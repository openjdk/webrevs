{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Objects;\n@@ -32,0 +33,2 @@\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n@@ -34,0 +37,2 @@\n+import com.sun.tools.javac.tree.JCTree.*;\n+import com.sun.tools.javac.util.Assert;\n@@ -35,0 +40,1 @@\n+import com.sun.tools.javac.util.Names;\n@@ -64,1 +70,1 @@\n-     * {@link LintSuppression#suppressionsFrom} returns a non-empty set.\n+     * {@link #suppressionsFrom} returns a non-empty set.\n@@ -70,1 +76,1 @@\n-        EnumSet<LintCategory> suppressions = lintSuppression.suppressionsFrom(sym);\n+        EnumSet<LintCategory> suppressions = suppressionsFrom(sym);\n@@ -91,2 +97,5 @@\n-    \/\/ Used to calculate suppressions from annotations\n-    private final LintSuppression lintSuppression;\n+    private final Context context;\n+\n+    \/\/ These are initialized lazily to avoid dependency loops\n+    private Symtab syms;\n+    private Names names;\n@@ -144,0 +153,1 @@\n+        this.context = context;\n@@ -145,2 +155,0 @@\n-\n-        lintSuppression = LintSuppression.instance(context);\n@@ -150,1 +158,3 @@\n-        this.lintSuppression = other.lintSuppression;\n+        this.context = other.context;\n+        this.syms = other.syms;\n+        this.names = other.names;\n@@ -390,0 +400,53 @@\n+\n+    \/**\n+     * Obtain the set of lint warning categories suppressed at the given symbol's declaration.\n+     *\n+     * <p>\n+     * This set can be non-empty only if the symbol is annotated with either\n+     * @SuppressWarnings or @Deprecated.\n+     *\n+     * @param symbol symbol corresponding to a possibly-annotated declaration\n+     * @return new warning suppressions applied to sym\n+     *\/\n+    public EnumSet<LintCategory> suppressionsFrom(Symbol symbol) {\n+        EnumSet<LintCategory> suppressions = suppressionsFrom(symbol.getDeclarationAttributes().stream());\n+        if (symbol.isDeprecated() && symbol.isDeprecatableViaAnnotation())\n+            suppressions.add(LintCategory.DEPRECATION);\n+        return suppressions;\n+    }\n+\n+    \/**\n+     * Retrieve the lint categories suppressed by the given @SuppressWarnings annotation.\n+     *\n+     * @param annotation @SuppressWarnings annotation, or null\n+     * @return set of lint categories, possibly empty but never null\n+     *\/\n+    private EnumSet<LintCategory> suppressionsFrom(JCAnnotation annotation) {\n+        initializeIfNeeded();\n+        if (annotation == null)\n+            return LintCategory.newEmptySet();\n+        Assert.check(annotation.attribute.type.tsym == syms.suppressWarningsType.tsym);\n+        return suppressionsFrom(Stream.of(annotation).map(anno -> anno.attribute));\n+    }\n+\n+    \/\/ Find the @SuppressWarnings annotation in the attribute stream and extract the suppressions\n+    private EnumSet<LintCategory> suppressionsFrom(Stream<Attribute.Compound> attributes) {\n+        initializeIfNeeded();\n+        return attributes\n+          .filter(attribute -> attribute.type.tsym == syms.suppressWarningsType.tsym)\n+          .map(attribute -> attribute.member(names.value))\n+          .flatMap(attribute -> Stream.of(((Attribute.Array)attribute).values))\n+          .map(Attribute.Constant.class::cast)\n+          .map(elem -> elem.value)\n+          .map(String.class::cast)\n+          .map(LintCategory::get)\n+          .filter(Objects::nonNull)\n+          .collect(Collectors.toCollection(LintCategory::newEmptySet));\n+    }\n+\n+    private void initializeIfNeeded() {\n+        if (syms == null) {\n+            syms = Symtab.instance(context);\n+            names = Names.instance(context);\n+        }\n+    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":70,"deletions":7,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -1,125 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.tools.javac.code;\n-\n-import java.util.EnumSet;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import com.sun.tools.javac.code.Lint.LintCategory;\n-import com.sun.tools.javac.tree.JCTree.*;\n-import com.sun.tools.javac.util.Assert;\n-import com.sun.tools.javac.util.Context;\n-import com.sun.tools.javac.util.Names;\n-\n-import static com.sun.tools.javac.code.Lint.LintCategory.DEPRECATION;\n-\n-\/**\n- * Utility class for calculating Lint category suppressions from annotations on a declaration.\n- *\n- *  <p><b>This is NOT part of any supported API.\n- *  If you write code that depends on this, you do so at your own risk.\n- *  This code and its internal interfaces are subject to change or\n- *  deletion without notice.<\/b>\n- *\/\n-public class LintSuppression {\n-\n-    \/** The context key for the LintSuppression object. *\/\n-    protected static final Context.Key<LintSuppression> lintSuppressionKey = new Context.Key<>();\n-\n-    private final Context context;\n-\n-    \/\/ These are initialized lazily to avoid dependency loops\n-    private Symtab syms;\n-    private Names names;\n-\n-    \/** Get the LintSuppression instance. *\/\n-    public static LintSuppression instance(Context context) {\n-        LintSuppression instance = context.get(lintSuppressionKey);\n-        if (instance == null)\n-            instance = new LintSuppression(context);\n-        return instance;\n-    }\n-\n-    private LintSuppression(Context context) {\n-        this.context = context;\n-        context.put(lintSuppressionKey, this);\n-    }\n-\n-    \/**\n-     * Obtain the set of lint warning categories suppressed at the given symbol's declaration.\n-     *\n-     * <p>\n-     * This set can be non-empty only if the symbol is annotated with either\n-     * @SuppressWarnings or @Deprecated.\n-     *\n-     * @param symbol symbol corresponding to a possibly-annotated declaration\n-     * @return new warning suppressions applied to sym\n-     *\/\n-    public EnumSet<LintCategory> suppressionsFrom(Symbol symbol) {\n-        EnumSet<LintCategory> suppressions = suppressionsFrom(symbol.getDeclarationAttributes().stream());\n-        if (symbol.isDeprecated() && symbol.isDeprecatableViaAnnotation())\n-            suppressions.add(DEPRECATION);\n-        return suppressions;\n-    }\n-\n-    \/**\n-     * Retrieve the lint categories suppressed by the given @SuppressWarnings annotation.\n-     *\n-     * @param annotation @SuppressWarnings annotation, or null\n-     * @return set of lint categories, possibly empty but never null\n-     *\/\n-    private EnumSet<LintCategory> suppressionsFrom(JCAnnotation annotation) {\n-        initializeIfNeeded();\n-        if (annotation == null)\n-            return LintCategory.newEmptySet();\n-        Assert.check(annotation.attribute.type.tsym == syms.suppressWarningsType.tsym);\n-        return suppressionsFrom(Stream.of(annotation).map(anno -> anno.attribute));\n-    }\n-\n-    \/\/ Find the @SuppressWarnings annotation in the attribute stream and extract the suppressions\n-    private EnumSet<LintCategory> suppressionsFrom(Stream<Attribute.Compound> attributes) {\n-        initializeIfNeeded();\n-        return attributes\n-          .filter(attribute -> attribute.type.tsym == syms.suppressWarningsType.tsym)\n-          .map(attribute -> attribute.member(names.value))\n-          .flatMap(attribute -> Stream.of(((Attribute.Array)attribute).values))\n-          .map(Attribute.Constant.class::cast)\n-          .map(elem -> elem.value)\n-          .map(String.class::cast)\n-          .map(LintCategory::get)\n-          .filter(Objects::nonNull)\n-          .collect(Collectors.toCollection(LintCategory::newEmptySet));\n-    }\n-\n-    private void initializeIfNeeded() {\n-        if (syms == null) {\n-            syms = Symtab.instance(context);\n-            names = Names.instance(context);\n-        }\n-    }\n-}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/LintSuppression.java","additions":0,"deletions":125,"binary":false,"changes":125,"status":"deleted"}]}