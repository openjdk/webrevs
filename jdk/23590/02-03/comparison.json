{"files":[{"patch":"@@ -44,1 +44,0 @@\n-import jdk.test.lib.Utils;\n@@ -48,4 +47,0 @@\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.file.StandardCopyOption;\n@@ -53,1 +48,0 @@\n-import java.util.List;\n@@ -58,2 +52,1 @@\n-public class MultipleLogins {\n-    private static final String KS_TYPE = \"PKCS11\";\n+public class MultipleLogins extends PKCS11Test {\n@@ -63,21 +56,4 @@\n-    private static void copyDbFiles() throws IOException {\n-        final var testFolder = System.getProperty(\"test.src\", \".\");\n-        final var srcDbFolder = Paths.get(testFolder).getParent().resolve(\"nss\", \"db\");\n-\n-        \/\/ Getting path & creating the temporary scratch directory .\/nss\/db\n-        final var nssFolder = Path.of(\".\").resolve(\"nss\");\n-        Files.createDirectory(nssFolder);\n-        final var destination = nssFolder.resolve(\"db\");\n-\n-        final var sourceFiles = List.of(\n-                srcDbFolder.resolve(\"cert9.db\"),\n-                srcDbFolder.resolve(\"key4.db\"),\n-                srcDbFolder.resolve(\"cert8.db\"),\n-                srcDbFolder.resolve(\"key3.db\")\n-        );\n-\n-        final var copiedFiles = Utils.copyFiles(sourceFiles, destination, StandardCopyOption.REPLACE_EXISTING);\n-        copiedFiles.forEach(path -> path.toFile().setWritable(true));\n-\n-        System.out.println(\"NSS db files copied to: \");\n-        copiedFiles.forEach(System.out::println);\n+    public static void main(String[] args) throws Exception {\n+        \/\/ This bypasses the PKCS11Test settings and run the mandatory\n+        \/\/ main method directly. This is needed to keep the custom logic of the test\n+        new MultipleLogins().main((Provider)null);\n@@ -86,2 +62,3 @@\n-    public static void main(String[] args) throws Exception {\n-        copyDbFiles();\n+    @Override\n+    public void main(Provider p) throws Exception {\n+        copyNssCertKeyToClassesDir();\n@@ -89,6 +66,1 @@\n-        String nssConfig = null;\n-        try {\n-            nssConfig = PKCS11Test.getNssConfig();\n-        } catch (SkippedException exc) {\n-            System.out.println(\"Skipping test: \" + exc.getMessage());\n-        }\n+        String nssConfig = getNssConfig();\n@@ -98,2 +70,1 @@\n-            System.out.println(\"No NSS config found. Skipping.\");\n-            return;\n+            throw new SkippedException(\"No NSS config found. Skipping.\");\n@@ -102,1 +73,1 @@\n-        for (int i =0; i < NUM_PROVIDERS; i++) {\n+        for (int i = 0; i < NUM_PROVIDERS; i++) {\n@@ -104,1 +75,1 @@\n-            providers[i] = (SunPKCS11)PKCS11Test.newPKCS11Provider();\n+            providers[i] = (SunPKCS11)newPKCS11Provider();\n@@ -114,1 +85,1 @@\n-        for (int i =0; i < NUM_PROVIDERS; i++) {\n+        for (int i = 0; i < NUM_PROVIDERS; i++) {\n@@ -141,1 +112,1 @@\n-        KeyStore ks = KeyStore.getInstance(KS_TYPE, p);\n+        KeyStore ks = KeyStore.getInstance(PKCS11, p);\n@@ -157,4 +128,3 @@\n-            if (e.getCause() instanceof LoginException &&\n-                    e.getCause().getMessage().contains(\"No token present\")) {\n-                \/\/ expected\n-            } else {\n+            if (!(e.getCause() instanceof LoginException) ||\n+                !(e.getCause().getMessage().contains(\"No token present\"))) {\n+\n@@ -162,1 +132,1 @@\n-            }\n+            } \/\/ else expected\n@@ -169,1 +139,3 @@\n-            if (!(callbacks[0] instanceof PasswordCallback)) {\n+            if (callbacks[0] instanceof PasswordCallback pc) {\n+                pc.setPassword(null);\n+            } else {\n@@ -172,2 +144,1 @@\n-            PasswordCallback pc = (PasswordCallback)callbacks[0];\n-            pc.setPassword(null);\n+\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/MultipleLogins.java","additions":22,"deletions":51,"binary":false,"changes":73,"status":"modified"}]}