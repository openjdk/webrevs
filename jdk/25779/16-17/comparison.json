{"files":[{"patch":"@@ -206,1 +206,1 @@\n-  volatile jlong _cpu_time = 0;\n+  jlong _cpu_time = 0;\n@@ -212,1 +212,1 @@\n-      Atomic::add(&_cpu_time, cpu_time);\n+      _cpu_time += cpu_time;\n@@ -219,2 +219,0 @@\n-  CPUTimeThreadClosure cl;\n-  gc_threads_do(&cl);\n@@ -228,0 +226,3 @@\n+  CPUTimeThreadClosure cl;\n+  gc_threads_do(&cl);\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,44 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_SHARED_CPUTIMESCOPE_HPP\n-#define SHARE_GC_SHARED_CPUTIMESCOPE_HPP\n-\n-#include \"memory\/allocation.hpp\"\n-\n-class VMThread;\n-\n-class CPUTimeScope : public StackObj {\n-private:\n-  jlong   _start;\n-  bool    _enabled;\n-  bool    _is_gc_operation;\n-  Thread* _thread;\n-\n-public:\n-  CPUTimeScope(VMThread* thread, bool is_gc_operation);\n-  ~CPUTimeScope();\n-};\n-\n-#endif \/\/ SHARE_GC_SHARED_CPUTIMESCOPE_HPP\n","filename":"src\/hotspot\/share\/gc\/shared\/cpuTimeScope.hpp","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_SHARED_VMTHREADCPUTIMESCOPE_HPP\n+#define SHARE_GC_SHARED_VMTHREADCPUTIMESCOPE_HPP\n+\n+#include \"memory\/allocation.hpp\"\n+\n+class VMThread;\n+\n+class VMThreadCPUTimeScope : public StackObj {\n+private:\n+  jlong   _start;\n+  bool    _enabled;\n+  bool    _is_gc_operation;\n+  Thread* _thread;\n+\n+public:\n+  VMThreadCPUTimeScope(VMThread* thread, bool is_gc_operation);\n+  ~VMThreadCPUTimeScope();\n+};\n+\n+#endif \/\/ SHARE_GC_SHARED_VMTHREADCPUTIMESCOPE_HPP\n","filename":"src\/hotspot\/share\/gc\/shared\/vmThreadCpuTimeScope.hpp","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-#include \"gc\/shared\/cpuTimeScope.hpp\"\n+#include \"gc\/shared\/vmThreadCpuTimeScope.hpp\"\n@@ -33,1 +33,1 @@\n-inline CPUTimeScope::CPUTimeScope(VMThread* thread, bool is_gc_operation)\n+inline VMThreadCPUTimeScope::VMThreadCPUTimeScope(VMThread* thread, bool is_gc_operation)\n@@ -43,1 +43,1 @@\n-inline CPUTimeScope::~CPUTimeScope() {\n+inline VMThreadCPUTimeScope::~VMThreadCPUTimeScope() {\n","filename":"src\/hotspot\/share\/gc\/shared\/vmThreadCpuTimeScope.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/hotspot\/share\/gc\/shared\/cpuTimeScope.inline.hpp","status":"renamed"},{"patch":"@@ -36,1 +36,1 @@\n-class CPUTimeScope;\n+class VMThreadCPUTimeScope;\n@@ -56,1 +56,1 @@\n-  friend class CPUTimeScope;\n+  friend class VMThreadCPUTimeScope;\n","filename":"src\/hotspot\/share\/runtime\/cpuTimeCounters.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"gc\/shared\/cpuTimeScope.inline.hpp\"\n+#include \"gc\/shared\/vmThreadCpuTimeScope.inline.hpp\"\n@@ -283,1 +283,1 @@\n-    CPUTimeScope CPUTimeScope(this, op->is_gc_operation());\n+    VMThreadCPUTimeScope CPUTimeScope(this, op->is_gc_operation());\n","filename":"src\/hotspot\/share\/runtime\/vmThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}