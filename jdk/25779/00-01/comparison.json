{"files":[{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+#ifndef SHARE_GC_SHARED_VTIMESCOPE_HPP\n+#define SHARE_GC_SHARED_VTIMESCOPE_HPP\n+\n+#include \"memory\/allocation.hpp\"\n+\n+class VMThread;\n+class VTimeScope : public StackObj {\n+private:\n+  jlong _start;\n+  bool _enabled;\n+  bool _gcLogging;\n+  Thread *_thread;\n+\n+public:\n+  VTimeScope(VMThread *thread);\n+  ~VTimeScope();\n+};\n+\n+#endif \/\/ SHARE_GC_SHARED_VTIMESCOPE_HPP\n","filename":"src\/hotspot\/share\/gc\/shared\/vtimeScope.hpp","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"gc\/shared\/vtimeScope.hpp\"\n+#include \"gc\/shared\/collectedHeap.hpp\"\n+#include \"logging\/log.hpp\"\n+#include \"memory\/universe.hpp\"\n+#include \"runtime\/cpuTimeCounters.hpp\"\n+#include \"runtime\/os.hpp\"\n+\n+inline VTimeScope::VTimeScope(VMThread *thread)\n+    : _start(0), _enabled(os::is_thread_cpu_time_supported()),\n+      _gcLogging(log_is_enabled(Info, gc) || log_is_enabled(Info, gc, cpu)),\n+      _thread((Thread*)thread) {\n+  if (_enabled && _gcLogging) {\n+    _start = os::thread_cpu_time(_thread);\n+  }\n+}\n+\n+inline VTimeScope::~VTimeScope() {\n+  if (_enabled) {\n+    jlong end = _gcLogging || UsePerfData ? os::thread_cpu_time(_thread) : 0;\n+\n+    if (_gcLogging) {\n+      jlong duration = end > _start ? end - _start : 0;\n+      Universe::heap()->add_vm_vtime(duration);\n+    }\n+\n+    if (UsePerfData) {\n+      assert(_thread == this, \"Assumes VM thread\");\n+      CPUTimeCounters::get_instance()->update_counter(CPUTimeGroups::CPUTimeType::vm, end);\n+    }\n+  }\n+}\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/gc\/shared\/vtimeScope.inline.hpp","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -129,4 +129,0 @@\n-\n-void ThreadTotalCPUTimeClosure::inc_total(jlong value) {\n-  _total += value;\n-}\n","filename":"src\/hotspot\/share\/runtime\/cpuTimeCounters.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+class VTimeScope;\n+\n@@ -54,0 +56,1 @@\n+  friend VTimeScope;\n@@ -112,1 +115,0 @@\n-  void inc_total(jlong value);\n","filename":"src\/hotspot\/share\/runtime\/cpuTimeCounters.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"gc\/shared\/vtimeScope.inline.hpp\"\n@@ -274,2 +275,0 @@\n-  const bool gcLogging = log_is_enabled(Info, gc) || log_is_enabled(Info, gc, cpu);\n-  jlong start = 0;\n@@ -283,3 +282,1 @@\n-    if (gcLogging && os::is_thread_cpu_time_supported()) {\n-      start = os::thread_cpu_time(this);\n-    }\n+    VTimeScope vTimeScope(this);\n@@ -295,14 +292,0 @@\n-\n-  if (os::is_thread_cpu_time_supported()) {\n-    jlong end = gcLogging || UsePerfData ? os::thread_cpu_time(this) : 0;\n-    if (gcLogging) {\n-      jlong duration = end > start ? end - start : 0;\n-      Universe::heap()->add_vm_vtime(duration);\n-    }\n-    if (UsePerfData) {\n-      assert(Thread::current() == this, \"Must be called from VM thread\");\n-      \/\/ Update vm_thread_cpu_time after each VM operation.\n-      ThreadTotalCPUTimeClosure tttc(CPUTimeGroups::CPUTimeType::vm);\n-      tttc.inc_total(end);\n-    }\n-  }\n","filename":"src\/hotspot\/share\/runtime\/vmThread.cpp","additions":2,"deletions":19,"binary":false,"changes":21,"status":"modified"}]}