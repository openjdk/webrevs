{"files":[{"patch":"@@ -1603,1 +1603,1 @@\n-double os::elapsed_process_vtime() {\n+double os::elapsed_process_cpu_time() {\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1197,1 +1197,1 @@\n-double os::elapsed_process_vtime() {\n+double os::elapsed_process_cpu_time() {\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-jlong  CollectedHeap::_vm_vtime = 0;\n+jlong  CollectedHeap::_vmthread_cpu_time = 0;\n@@ -205,1 +205,1 @@\n-class VCPUThreadClosure : public ThreadClosure {\n+class CPUTimeThreadClosure : public ThreadClosure {\n@@ -207,1 +207,1 @@\n-  volatile jlong _vtime = 0;\n+  volatile jlong _cpu_time = 0;\n@@ -211,1 +211,1 @@\n-    Atomic::add(&_vtime, os::thread_cpu_time(thread));\n+    Atomic::add(&_cpu_time, os::thread_cpu_time(thread));\n@@ -213,1 +213,1 @@\n-  jlong vtime() { return _vtime; };\n+  jlong cpu_time() { return _cpu_time; };\n@@ -216,2 +216,2 @@\n-double CollectedHeap::elapsed_gc_vtime() const {\n-  VCPUThreadClosure cl;\n+double CollectedHeap::elapsed_gc_cpu_time() const {\n+  CPUTimeThreadClosure cl;\n@@ -219,1 +219,1 @@\n-  return (double)(cl.vtime() + _vm_vtime) \/ NANOSECS_PER_SEC;\n+  return (double)(cl.cpu_time() + _vmthread_cpu_time) \/ NANOSECS_PER_SEC;\n@@ -625,1 +625,1 @@\n-void CollectedHeap::log_gc_vtime() const {\n+void CollectedHeap::log_gc_cpu_time() const {\n@@ -628,3 +628,3 @@\n-    double process_vtime = os::elapsed_process_vtime();\n-    double gc_vtime = elapsed_gc_vtime();\n-    double string_dedup_vtime = UseStringDeduplication ? os::thread_cpu_time((Thread*)StringDedup::_processor->_thread) \/ NANOSECS_PER_SEC : 0;\n+    double process_cpu_time = os::elapsed_process_cpu_time();\n+    double gc_cpu_time = elapsed_gc_cpu_time();\n+    double string_dedup_cpu_time = UseStringDeduplication ? os::thread_cpu_time((Thread*)StringDedup::_processor->_thread) \/ NANOSECS_PER_SEC : 0;\n@@ -632,1 +632,1 @@\n-    if (process_vtime == -1 || gc_vtime == -1 || string_dedup_vtime == -1) {\n+    if (process_cpu_time == -1 || gc_cpu_time == -1 || string_dedup_cpu_time == -1) {\n@@ -637,1 +637,1 @@\n-    if (gc_vtime > process_vtime || process_vtime == 0 || gc_vtime == 0) {\n+    if (gc_cpu_time > process_cpu_time || process_cpu_time == 0 || gc_cpu_time == 0) {\n@@ -642,1 +642,1 @@\n-      usage = 100 * (gc_vtime + string_dedup_vtime) \/ process_vtime;\n+      usage = 100 * (gc_cpu_time + string_dedup_cpu_time) \/ process_cpu_time;\n@@ -650,1 +650,1 @@\n-  log_gc_vtime();\n+  log_gc_cpu_time();\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-  static jlong _vm_vtime;\n+  static jlong _vmthread_cpu_time;\n@@ -253,2 +253,2 @@\n-  static jlong vm_vtime();\n-  static void add_vm_vtime(jlong time);\n+  static jlong vm_cpu_time();\n+  static void add_vmthread_cpu_time(jlong time);\n@@ -465,2 +465,2 @@\n-  double elapsed_gc_vtime() const;\n-  void log_gc_vtime() const;\n+  double elapsed_gc_cpu_time() const;\n+  void log_gc_cpu_time() const;\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -49,2 +49,2 @@\n-inline void CollectedHeap::add_vm_vtime(jlong time) {\n-  _vm_vtime += time;\n+inline void CollectedHeap::add_vmthread_cpu_time(jlong time) {\n+  _vmthread_cpu_time += time;\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_SHARED_CPUTIMESCOPE_HPP\n+#define SHARE_GC_SHARED_CPUTIMESCOPE_HPP\n+\n+#include \"memory\/allocation.hpp\"\n+\n+class VMThread;\n+\n+class CPUTimeScope : public StackObj {\n+private:\n+  jlong   _start;\n+  bool    _enabled;\n+  bool    _is_gc_operation;\n+  Thread* _thread;\n+\n+public:\n+  CPUTimeScope(VMThread* thread, bool is_gc_operation);\n+  ~CPUTimeScope();\n+};\n+\n+#endif \/\/ SHARE_GC_SHARED_CPUTIMESCOPE_HPP\n","filename":"src\/hotspot\/share\/gc\/shared\/cpuTimeScope.hpp","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"gc\/shared\/cpuTimeScope.hpp\"\n+\n+#include \"gc\/shared\/collectedHeap.inline.hpp\"\n+#include \"memory\/universe.hpp\"\n+#include \"runtime\/cpuTimeCounters.hpp\"\n+#include \"runtime\/os.hpp\"\n+#include \"runtime\/vmThread.hpp\"\n+\n+inline CPUTimeScope::CPUTimeScope(VMThread* thread, bool is_gc_operation)\n+  : _start(0),\n+    _enabled(os::is_thread_cpu_time_supported()),\n+    _is_gc_operation(is_gc_operation),\n+    _thread(thread) {\n+  if (_is_gc_operation && _enabled) {\n+    _start = os::thread_cpu_time(_thread);\n+  }\n+}\n+\n+inline CPUTimeScope::~CPUTimeScope() {\n+  if (!_enabled) {\n+    return;\n+  }\n+\n+  jlong end = (_is_gc_operation || UsePerfData) ? os::thread_cpu_time(_thread) : 0;\n+\n+  if (_is_gc_operation) {\n+    jlong duration = end > _start ? end - _start : 0;\n+    Universe::heap()->add_vmthread_cpu_time(duration);\n+  }\n+\n+  if (UsePerfData) {\n+    CPUTimeCounters::get_instance()->update_counter(CPUTimeGroups::CPUTimeType::vm, end);\n+  }\n+}\n","filename":"src\/hotspot\/share\/gc\/shared\/cpuTimeScope.inline.hpp","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -1,44 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_SHARED_VTIMESCOPE_HPP\n-#define SHARE_GC_SHARED_VTIMESCOPE_HPP\n-\n-#include \"memory\/allocation.hpp\"\n-\n-class VMThread;\n-\n-class VTimeScope : public StackObj {\n-private:\n-  jlong   _start;\n-  bool    _enabled;\n-  bool    _is_gc_operation;\n-  Thread* _thread;\n-\n-public:\n-  VTimeScope(VMThread* thread, bool is_gc_operation);\n-  ~VTimeScope();\n-};\n-\n-#endif \/\/ SHARE_GC_SHARED_VTIMESCOPE_HPP\n","filename":"src\/hotspot\/share\/gc\/shared\/vtimeScope.hpp","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"gc\/shared\/vtimeScope.hpp\"\n-\n-#include \"gc\/shared\/collectedHeap.inline.hpp\"\n-#include \"memory\/universe.hpp\"\n-#include \"runtime\/cpuTimeCounters.hpp\"\n-#include \"runtime\/os.hpp\"\n-#include \"runtime\/vmThread.hpp\"\n-\n-inline VTimeScope::VTimeScope(VMThread* thread, bool is_gc_operation)\n-  : _start(0),\n-    _enabled(os::is_thread_cpu_time_supported()),\n-    _is_gc_operation(is_gc_operation),\n-    _thread(thread) {\n-  if (_is_gc_operation && _enabled) {\n-    _start = os::thread_cpu_time(_thread);\n-  }\n-}\n-\n-inline VTimeScope::~VTimeScope() {\n-  if (!_enabled) {\n-    return;\n-  }\n-\n-  jlong end = (_is_gc_operation || UsePerfData) ? os::thread_cpu_time(_thread) : 0;\n-\n-  if (_is_gc_operation) {\n-    jlong duration = end > _start ? end - _start : 0;\n-    Universe::heap()->add_vm_vtime(duration);\n-  }\n-\n-  if (UsePerfData) {\n-    CPUTimeCounters::get_instance()->update_counter(CPUTimeGroups::CPUTimeType::vm, end);\n-  }\n-}\n","filename":"src\/hotspot\/share\/gc\/shared\/vtimeScope.inline.hpp","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -36,1 +36,1 @@\n-class VTimeScope;\n+class CPUTimeScope;\n@@ -56,1 +56,1 @@\n-  friend class VTimeScope;\n+  friend class CPUTimeScope;\n","filename":"src\/hotspot\/share\/runtime\/cpuTimeCounters.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -296,1 +296,1 @@\n-  static double elapsed_process_vtime();\n+  static double elapsed_process_cpu_time();\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"gc\/shared\/vtimeScope.inline.hpp\"\n+#include \"gc\/shared\/cpuTimeScope.inline.hpp\"\n@@ -283,1 +283,1 @@\n-    VTimeScope vTimeScope(this, op->is_gc_operation());\n+    CPUTimeScope CPUTimeScope(this, op->is_gc_operation());\n","filename":"src\/hotspot\/share\/runtime\/vmThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}