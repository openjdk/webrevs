{"files":[{"patch":"@@ -80,0 +80,1 @@\n+#include <sys\/resource.h>\n@@ -1602,0 +1603,11 @@\n+double os::elapsed_process_cpu_time() {\n+  struct rusage usage;\n+  int retval = getrusage(RUSAGE_SELF, &usage);\n+  if (retval == 0) {\n+    return usage.ru_utime.tv_sec + usage.ru_stime.tv_sec +\n+         (usage.ru_utime.tv_usec + usage.ru_stime.tv_usec) \/ (1000.0 * 1000.0);\n+  } else {\n+    return -1;\n+  }\n+}\n+\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1197,0 +1197,32 @@\n+double os::elapsed_process_cpu_time() {\n+  FILETIME create;\n+  FILETIME exit;\n+  FILETIME kernel;\n+  FILETIME user;\n+\n+  if (GetProcessTimes(GetCurrentProcess(), &create, &exit, &kernel, &user) == 0) {\n+    return -1;\n+  }\n+\n+  SYSTEMTIME user_total;\n+  if (FileTimeToSystemTime(&user, &user_total) == 0) {\n+    return -1;\n+  }\n+\n+  SYSTEMTIME kernel_total;\n+  if (FileTimeToSystemTime(&kernel, &kernel_total) == 0) {\n+    return -1;\n+  }\n+\n+  double user_seconds =\n+      double(user_total.wHour) * 3600.0 + double(user_total.wMinute) * 60.0 +\n+      double(user_total.wSecond) + double(user_total.wMilliseconds) \/ 1000.0;\n+\n+  double kernel_seconds = double(kernel_total.wHour) * 3600.0 +\n+                          double(kernel_total.wMinute) * 60.0 +\n+                          double(kernel_total.wSecond) +\n+                          double(kernel_total.wMilliseconds) \/ 1000.0;\n+\n+  return user_seconds + kernel_seconds;\n+}\n+\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -70,0 +70,2 @@\n+  void stop() override {};\n+\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonHeap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -158,0 +158,2 @@\n+  void stop() override {};\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -128,0 +128,2 @@\n+  void stop() override {};\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"gc\/shared\/stringdedup\/stringDedupProcessor.hpp\"\n@@ -203,0 +204,28 @@\n+class CPUTimeThreadClosure : public ThreadClosure {\n+private:\n+  jlong _cpu_time = 0;\n+\n+public:\n+  virtual void do_thread(Thread* thread) {\n+    jlong cpu_time = os::thread_cpu_time(thread);\n+    if (cpu_time != -1) {\n+      _cpu_time += cpu_time;\n+    }\n+  }\n+  jlong cpu_time() { return _cpu_time; };\n+};\n+\n+double CollectedHeap::elapsed_gc_cpu_time() const {\n+  double string_dedup_cpu_time = UseStringDeduplication ?\n+    os::thread_cpu_time((Thread*)StringDedup::_processor->_thread) : 0;\n+\n+  if (string_dedup_cpu_time == -1) {\n+    return -1;\n+  }\n+\n+  CPUTimeThreadClosure cl;\n+  gc_threads_do(&cl);\n+\n+  return (double)(cl.cpu_time() + _vmthread_cpu_time + string_dedup_cpu_time) \/ NANOSECS_PER_SEC;\n+}\n+\n@@ -284,0 +313,1 @@\n+  _vmthread_cpu_time(0),\n@@ -606,0 +636,34 @@\n+void CollectedHeap::log_gc_cpu_time() const {\n+  LogTarget(Info, gc, cpu) out;\n+  if (os::is_thread_cpu_time_supported() && out.is_enabled()) {\n+    double process_cpu_time = os::elapsed_process_cpu_time();\n+    double gc_cpu_time = elapsed_gc_cpu_time();\n+\n+    if (process_cpu_time == -1 || gc_cpu_time == -1) {\n+      log_warning(gc, cpu)(\"Could not sample CPU time\");\n+      return;\n+    }\n+\n+    double usage;\n+    if (gc_cpu_time > process_cpu_time ||\n+        process_cpu_time == 0 || gc_cpu_time == 0) {\n+      \/\/ This can happen e.g. for short running processes with\n+      \/\/ low CPU utilization\n+      usage = 0;\n+    } else {\n+      usage = 100 * gc_cpu_time \/ process_cpu_time;\n+    }\n+    out.print(\"GC CPU usage: %.2f%% (Process: %.4fs GC: %.4fs)\", usage, process_cpu_time, gc_cpu_time);\n+  }\n+}\n+\n+void CollectedHeap::before_exit() {\n+  print_tracing_info();\n+\n+  \/\/ Log GC CPU usage.\n+  log_gc_cpu_time();\n+\n+  \/\/ Stop any on-going concurrent work and prepare for exit.\n+  stop();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":64,"deletions":0,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -135,0 +135,2 @@\n+  jlong _vmthread_cpu_time;\n+\n@@ -209,0 +211,3 @@\n+  \/\/ Stop any onging concurrent work and prepare for exit.\n+  virtual void stop() = 0;\n+\n@@ -242,2 +247,1 @@\n-  \/\/ Stop any onging concurrent work and prepare for exit.\n-  virtual void stop() {}\n+  void before_exit();\n@@ -249,0 +253,2 @@\n+  void add_vmthread_cpu_time(jlong time);\n+\n@@ -458,0 +464,3 @@\n+  double elapsed_gc_cpu_time() const;\n+  void log_gc_cpu_time() const;\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -49,0 +49,4 @@\n+inline void CollectedHeap::add_vmthread_cpu_time(jlong time) {\n+  _vmthread_cpu_time += time;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.inline.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -103,0 +103,1 @@\n+#include \"gc\/shared\/collectedHeap.hpp\"\n@@ -108,0 +109,1 @@\n+class CollectedHeap;\n@@ -118,0 +120,1 @@\n+  friend class CollectedHeap;\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedup.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shared\/collectedHeap.hpp\"\n@@ -32,0 +33,1 @@\n+class CollectedHeap;\n@@ -45,0 +47,2 @@\n+  friend class CollectedHeap;\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupProcessor.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_SHARED_VMTHREADCPUTIMESCOPE_HPP\n+#define SHARE_GC_SHARED_VMTHREADCPUTIMESCOPE_HPP\n+\n+#include \"memory\/allocation.hpp\"\n+\n+class VMThread;\n+\n+class VMThreadCPUTimeScope : public StackObj {\n+private:\n+  jlong   _start;\n+  bool    _enabled;\n+  bool    _is_gc_operation;\n+  Thread* _thread;\n+\n+public:\n+  VMThreadCPUTimeScope(VMThread* thread, bool is_gc_operation);\n+  ~VMThreadCPUTimeScope();\n+};\n+\n+#endif \/\/ SHARE_GC_SHARED_VMTHREADCPUTIMESCOPE_HPP\n","filename":"src\/hotspot\/share\/gc\/shared\/vmThreadCpuTimeScope.hpp","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"gc\/shared\/vmThreadCpuTimeScope.hpp\"\n+\n+#include \"gc\/shared\/collectedHeap.inline.hpp\"\n+#include \"memory\/universe.hpp\"\n+#include \"runtime\/cpuTimeCounters.hpp\"\n+#include \"runtime\/os.hpp\"\n+#include \"runtime\/vmThread.hpp\"\n+\n+inline VMThreadCPUTimeScope::VMThreadCPUTimeScope(VMThread* thread, bool is_gc_operation)\n+  : _start(0),\n+    _enabled(os::is_thread_cpu_time_supported()),\n+    _is_gc_operation(is_gc_operation),\n+    _thread(thread) {\n+  if (_is_gc_operation && _enabled) {\n+    _start = os::thread_cpu_time(_thread);\n+  }\n+}\n+\n+inline VMThreadCPUTimeScope::~VMThreadCPUTimeScope() {\n+  if (!_enabled) {\n+    return;\n+  }\n+\n+  jlong end = (_is_gc_operation || UsePerfData) ? os::thread_cpu_time(_thread) : 0;\n+\n+  if (_is_gc_operation) {\n+    jlong duration = end > _start ? end - _start : 0;\n+    Universe::heap()->add_vmthread_cpu_time(duration);\n+  }\n+\n+  if (UsePerfData) {\n+    CPUTimeCounters::update_counter(CPUTimeGroups::CPUTimeType::vm, end);\n+  }\n+}\n","filename":"src\/hotspot\/share\/gc\/shared\/vmThreadCpuTimeScope.inline.hpp","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -36,0 +36,2 @@\n+class VMThreadCPUTimeScope;\n+\n","filename":"src\/hotspot\/share\/runtime\/cpuTimeCounters.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -474,3 +474,2 @@\n-  Universe::heap()->print_tracing_info();\n-  \/\/ Stop concurrent GC threads\n-  Universe::heap()->stop();\n+  \/\/ Run before exit and then stop concurrent GC threads\n+  Universe::heap()->before_exit();\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -296,0 +296,2 @@\n+  static double elapsed_process_cpu_time();\n+\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"gc\/shared\/vmThreadCpuTimeScope.inline.hpp\"\n@@ -278,1 +279,1 @@\n-                     (char *) op->name(), strlen(op->name()),\n+                     (char*) op->name(), strlen(op->name()),\n@@ -282,0 +283,1 @@\n+    VMThreadCPUTimeScope CPUTimeScope(this, op->is_gc_operation());\n@@ -288,1 +290,1 @@\n-                     (char *) op->name(), strlen(op->name()),\n+                     (char*) op->name(), strlen(op->name()),\n@@ -291,7 +293,0 @@\n-\n-  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n-    assert(Thread::current() == this, \"Must be called from VM thread\");\n-    \/\/ Update vm_thread_cpu_time after each VM operation.\n-    ThreadTotalCPUTimeClosure tttc(CPUTimeGroups::CPUTimeType::vm);\n-    tttc.do_thread(this);\n-  }\n","filename":"src\/hotspot\/share\/runtime\/vmThread.cpp","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"}]}