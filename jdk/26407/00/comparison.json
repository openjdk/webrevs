{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -944,0 +944,15 @@\n+        PropertyChangeListener propListener = new PropertyChangeListener() {\n+            public void propertyChange(PropertyChangeEvent e) {\n+                String propertyName = e.getPropertyName();\n+                if (propertyName == \"ancestor\") {\n+                    if (e.getOldValue() != null &&\n+                            e.getNewValue() == null) {\n+                        if (popup != null) {\n+                            popup.dispose();\n+                            popup = null;\n+                        }\n+\n+                    }\n+                }\n+            }\n+        };\n@@ -946,0 +961,3 @@\n+            if (oldInvoker != null) {\n+                oldInvoker.removePropertyChangeListener(propListener);\n+            }\n@@ -948,0 +966,1 @@\n+        invoker.addPropertyChangeListener(propListener);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JPopupMenu.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4938801\n+ * @key headful\n+ * @summary Verifies popup is removed when the component is removed\n+ * @run main TestPopupInvoker\n+ *\/\n+\n+import java.awt.Container;\n+import java.awt.Component;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.BorderLayout;\n+import javax.swing.JPopupMenu;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JTextField;\n+import javax.swing.SwingUtilities;\n+\n+public class TestPopupInvoker {\n+    static JPopupMenu jpm;\n+    static JFrame frame;\n+    static JLabel label;\n+    static volatile Point pt;\n+    static volatile Rectangle size;\n+\n+    public static class MyThread implements Runnable {\n+        static Container box;\n+        static Component invo;\n+\n+        public MyThread(Container cont, Component comp) {\n+            this.invo = comp;\n+            this.box = cont;\n+        }\n+\n+        public void run() {\n+            System.out.println(\"Starting 3 second countdown...\");\n+            try{\n+                Thread.currentThread().sleep(3000);\n+            } catch (Exception e) {}\n+            System.out.println(\"Removing popup invoker from the container.\");\n+            box.remove(invo);\n+            box.repaint();\n+            if (jpm.isVisible()) {\n+                throw new RuntimeException(\"poup is visible after component is removed\");\n+            }\n+        }\n+    }\n+\n+    private static void createUI() {\n+        frame = new JFrame(\"My frame\");\n+        final Container pane = frame.getContentPane();\n+        pane.setLayout(new BorderLayout());\n+        label = new JLabel(\"Click here to invoke popup\");\n+        label.addMouseListener(new MouseAdapter() {\n+            public void mouseReleased(MouseEvent e) {\n+                if (jpm == null) {\n+                    jpm = new JPopupMenu(\"Popup\");\n+                    jpm.add(\"One\");\n+                    jpm.add(\"Two\");\n+                    jpm.add(\"Three\");\n+                }\n+                jpm.show(label, 0, 0);\n+            }\n+\n+            public void mousePressed(MouseEvent e) {\n+                Thread thr = new Thread(new MyThread(pane, label));\n+                thr.start();\n+            }\n+        });\n+        pane.add(label, BorderLayout.CENTER);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    public static void main(String args[]) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            SwingUtilities.invokeAndWait(() -> createUI());\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                pt = label.getLocationOnScreen();\n+                size = label.getBounds();\n+            });\n+            robot.mouseMove(pt.x + size.width \/ 2, pt.y + size.height \/ 2);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/TestPopupInvoker.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"}]}