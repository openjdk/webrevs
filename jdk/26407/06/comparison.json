{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -130,0 +130,2 @@\n+    private PropertyChangeListener propListener = new Listener();\n+\n@@ -932,0 +934,10 @@\n+    private class Listener implements PropertyChangeListener,Serializable {\n+        public void propertyChange(PropertyChangeEvent e) {\n+            if (e.getOldValue() != null\n+                    && e.getNewValue() == null\n+                    && isVisible()) {\n+                setVisible(false);\n+            }\n+        }\n+    }\n+\n@@ -944,0 +956,1 @@\n+\n@@ -946,0 +959,4 @@\n+            if (oldInvoker != null) {\n+                oldInvoker.removePropertyChangeListener(\"ancestor\", propListener);\n+            }\n+            invoker.addPropertyChangeListener(\"ancestor\", propListener);\n@@ -1360,0 +1377,4 @@\n+        if (propListener instanceof Serializable) {\n+            values.addElement(\"propListener\");\n+            values.addElement(propListener);\n+        }\n@@ -1404,0 +1425,5 @@\n+        if(indexCounter < maxCounter && values.elementAt(indexCounter).\n+           equals(\"propListener\")) {\n+            propListener = (PropertyChangeListener) values.elementAt(++indexCounter);\n+            indexCounter++;\n+        }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JPopupMenu.java","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4938801\n+ * @key headful\n+ * @summary Verifies popup is removed when the component is removed\n+ * @run main TestPopupInvoker\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Container;\n+import java.awt.Robot;\n+import java.util.concurrent.CountDownLatch;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPopupMenu;\n+import javax.swing.SwingUtilities;\n+import javax.swing.event.PopupMenuEvent;\n+import javax.swing.event.PopupMenuListener;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+public class TestPopupInvoker {\n+    static JPopupMenu popupMenu;\n+    static JFrame frame;\n+    static JLabel label;\n+    static Container pane;\n+\n+    private static final CountDownLatch popupShown = new CountDownLatch(1);\n+    private static final CountDownLatch popupHidden = new CountDownLatch(1);\n+\n+    private static void createUI() {\n+        frame = new JFrame(\"TestPopupInvoker\");\n+        pane = frame.getContentPane();\n+        pane.setLayout(new BorderLayout());\n+        label = new JLabel(\"Popup Invoker\");\n+        pane.add(label, BorderLayout.CENTER);\n+\n+        popupMenu = new JPopupMenu(\"Popup\");\n+        popupMenu.add(\"One\");\n+        popupMenu.add(\"Two\");\n+        popupMenu.add(\"Three\");\n+\n+        popupMenu.addPopupMenuListener(new PopupMenuListener() {\n+            @Override\n+            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {\n+                popupShown.countDown();\n+            }\n+\n+            @Override\n+            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {\n+                popupHidden.countDown();\n+            }\n+\n+            @Override\n+            public void popupMenuCanceled(PopupMenuEvent e) {\n+            }\n+        });\n+\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            SwingUtilities.invokeAndWait(TestPopupInvoker::createUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> popupMenu.show(label, 0, 0));\n+\n+            if (!popupShown.await(2, SECONDS)) {\n+                throw new RuntimeException(\"Popup isn't displayed\");\n+            }\n+            robot.waitForIdle();\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                pane.remove(label);\n+                pane.repaint();\n+            });\n+            if (!popupHidden.await(1, SECONDS)) {\n+                throw new RuntimeException(\"Popup is visible after component is removed\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/TestPopupInvoker.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"}]}