{"files":[{"patch":"@@ -34,0 +34,20 @@\n+\/**\n+ * BufferCleaner supports PhantomReference-based management of native memory\n+ * referred to by Direct-XXX-Buffers. Unreferenced DBBs may be garbage\n+ * collected, deactivating the associated PRefs and making them available for\n+ * cleanup here.\n+ *\n+ * There is a configured limit to the amount of memory that may be allocated\n+ * by DBBs. When that limit is reached, the allocator may invoke the garbage\n+ * collector directly to attempt to trigger cleaning here, hopefully\n+ * permitting the allocation to complete. Only if that doesn't free sufficient\n+ * memory does the allocation fail.  See java.nio.Bits::reserveMemory() for\n+ * details.\n+ *\n+ * One of the requirements for that approach is having a way to determine that\n+ * deactivated cleaners have been cleaned. java.lang.ref.Cleaner doesn't\n+ * provide such a mechanism, and adding such a mechanism to that class to\n+ * satisfy this unique requirement was deemed undesirable. Instead, this class\n+ * uses the underlying primitives (PhantomReferences, ReferenceQueues) to\n+ * provide the functionality needed for DBB management.\n+ *\/\n@@ -55,1 +75,9 @@\n-                action.run();\n+                try {\n+                    action.run();\n+                } catch (Throwable x) {\n+                    \/\/ Long-standing behavior: when cleaning fails, VM exits.\n+                    if (System.err != null) {\n+                        new Error(\"nio Cleaner terminated abnormally\", x).printStackTrace();\n+                    }\n+                    System.exit(1);\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/nio\/BufferCleaner.java","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -82,10 +82,2 @@\n-            try {\n-                UNSAFE.freeMemory(address);\n-                Bits.unreserveMemory(size, capacity);\n-            } catch (Throwable x) {\n-                \/\/ Long-standing behavior: when deallocation fails, VM exits.\n-                if (System.err != null) {\n-                    new Error(\"Cleaner terminated abnormally\", x).printStackTrace();\n-                }\n-                System.exit(1);\n-            }\n+            UNSAFE.freeMemory(address);\n+            Bits.unreserveMemory(size, capacity);\n@@ -209,1 +201,1 @@\n-\tcleaner = (unmapper == null) ? null : BufferCleaner.register(this, unmapper);\n+        cleaner = (unmapper == null) ? null : BufferCleaner.register(this, unmapper);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"}]}