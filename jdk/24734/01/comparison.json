{"files":[{"patch":"@@ -0,0 +1,178 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowListener;\n+import javax.swing.DefaultCellEditor;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.border.BevelBorder;\n+import javax.swing.table.AbstractTableModel;\n+import javax.swing.table.DefaultTableCellRenderer;\n+import javax.swing.table.TableCellRenderer;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableModel;\n+\n+\/*\n+ * @test\n+ * @bug 4179066\n+ * @summary Tests that JTable prints AltGr characters (~\\@|{}[]²µ³)\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main InternationalCharacters\n+ *\/\n+\n+public class InternationalCharacters {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Double-click an entry in the JTable.\n+            Press Alt-Gr or Option with any key to type an international character.\n+            Verify that the international character appears in the table.\n+            If it does, press \"pass\", otherwise press \"fail\".\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(InternationalCharacters::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"InternationalCharacters test\");\n+        \/\/ Take the dummy data from SwingSet.\n+        final String[] names = {\"First Name\", \"Last Name\", \"Favorite Color\",\n+                                \"Favorite Number\", \"Vegetarian\"};\n+        final Object[][] data = {\n+            {\"Mark\", \"Andrews\", \"Red\", 2, true},\n+            {\"Tom\", \"Ball\", \"Blue\", 99, false},\n+            {\"Alan\", \"Chung\", \"Green\", 838, false},\n+            {\"Jeff\", \"Dinkins\", \"Turquois\", 8, true},\n+            {\"Amy\", \"Fowler\", \"Yellow\", 3, false},\n+            {\"Brian\", \"Gerhold\", \"Green\", 0, false},\n+            {\"James\", \"Gosling\", \"Pink\", 21, false},\n+            {\"David\", \"Karlton\", \"Red\", 1, false},\n+            {\"Dave\", \"Kloba\", \"Yellow\", 14, false},\n+            {\"Peter\", \"Korn\", \"Purple\", 12, false},\n+            {\"Phil\", \"Milne\", \"Purple\", 3, false},\n+            {\"Dave\", \"Moore\", \"Green\", 88, false},\n+            {\"Hans\", \"Muller\", \"Maroon\", 5, false},\n+            {\"Rick\", \"Levenson\", \"Blue\", 2, false},\n+            {\"Tim\", \"Prinzing\", \"Blue\", 22, false},\n+            {\"Chester\", \"Rose\", \"Black\", 0, false},\n+            {\"Ray\", \"Ryan\", \"Gray\", 77, false},\n+            {\"Georges\", \"Saab\", \"Red\", 4, false},\n+            {\"Willie\", \"Walker\", \"Phthalo Blue\", 4, false},\n+            {\"Kathy\", \"Walrath\", \"Blue\", 8, false},\n+            {\"Arnaud\", \"Weber\", \"Green\", 44, false}\n+        };\n+\n+        \/\/ Create a model of the data.\n+        TableModel dataModel = new AbstractTableModel() {\n+            \/\/ These methods always need to be implemented.\n+            public int getColumnCount() { return names.length; }\n+            public int getRowCount() { return data.length;}\n+            public Object getValueAt(int row, int col) {return data[row][col];}\n+\n+            \/\/ The default implementations of these methods in\n+            \/\/ AbstractTableModel would work, but we can refine them.\n+            public String getColumnName(int column) {return names[column];}\n+            public Class getColumnClass(int c) {return getValueAt(0, c).getClass();}\n+            public boolean isCellEditable(int row, int col) {return true;}\n+            public void setValueAt(Object aValue, int row, int column) {\n+                System.out.println(\"Setting value to: \" + aValue);\n+                data[row][column] = aValue;\n+            }\n+         };\n+\n+        \/\/ Create the table\n+        JTable tableView = new JTable(dataModel);\n+        \/\/ Turn off auto-resizing so that we can set column sizes programmatically.\n+        \/\/ In this mode, all columns will get their preferred widths, as set blow.\n+        tableView.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n+\n+        \/\/ Create a combo box to show that you can use one in a table.\n+        JComboBox comboBox = new JComboBox();\n+        comboBox.addItem(\"Red\");\n+        comboBox.addItem(\"Orange\");\n+        comboBox.addItem(\"Yellow\");\n+        comboBox.addItem(\"Green\");\n+        comboBox.addItem(\"Blue\");\n+        comboBox.addItem(\"Indigo\");\n+        comboBox.addItem(\"Violet\");\n+\n+        TableColumn colorColumn = tableView.getColumn(\"Favorite Color\");\n+        \/\/ Use the combo box as the editor in the \"Favorite Color\" column.\n+        colorColumn.setCellEditor(new DefaultCellEditor(comboBox));\n+\n+        \/\/ Set a pink background and tooltip for the Color column renderer.\n+        DefaultTableCellRenderer colorColumnRenderer = new DefaultTableCellRenderer();\n+        colorColumnRenderer.setBackground(Color.pink);\n+        colorColumnRenderer.setToolTipText(\"Click for combo box\");\n+        colorColumn.setCellRenderer(colorColumnRenderer);\n+\n+        \/\/ Set a tooltip for the header of the colors column.\n+        TableCellRenderer headerRenderer = colorColumn.getHeaderRenderer();\n+        if (headerRenderer instanceof DefaultTableCellRenderer)\n+            ((DefaultTableCellRenderer)headerRenderer).setToolTipText(\"Hi Mom!\");\n+\n+        \/\/ Set the width of the \"Vegetarian\" column.\n+        TableColumn vegetarianColumn = tableView.getColumn(\"Vegetarian\");\n+        vegetarianColumn.setPreferredWidth(100);\n+\n+        \/\/ Show the values in the \"Favorite Number\" column in different colors.\n+        TableColumn numbersColumn = tableView.getColumn(\"Favorite Number\");\n+        DefaultTableCellRenderer numberColumnRenderer = new DefaultTableCellRenderer() {\n+            public void setValue(Object value) {\n+                int cellValue = (value instanceof Number) ? ((Number)value).intValue() : 0;\n+                setForeground((cellValue > 30) ? Color.black : Color.red);\n+                setText((value == null) ? \"\" : value.toString());\n+            }\n+        };\n+        numberColumnRenderer.setHorizontalAlignment(JLabel.RIGHT);\n+        numbersColumn.setCellRenderer(numberColumnRenderer);\n+        numbersColumn.setPreferredWidth(110);\n+\n+        \/\/ Finish setting up the table.\n+        JScrollPane scrollpane = new JScrollPane(tableView);\n+        scrollpane.setBorder(new BevelBorder(BevelBorder.LOWERED));\n+        scrollpane.setPreferredSize(new Dimension(430, 200));\n+\n+        WindowListener l = new WindowAdapter() {\n+            public void windowClosing(WindowEvent e) {\n+                System.exit(0);\n+            }\n+        };\n+        frame.addWindowListener(l);\n+        frame.add(scrollpane);\n+        frame.setSize(500, 200);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/InternationalCharacters.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @bug 4129409\n+ * @summary Tests that JTable.setTableHeader(null) doesn't break AutoResize\n+ * @key headful\n+ * @run main NullTableHeader\n+ *\/\n+\n+public class NullTableHeader {\n+    static JTable tableView;\n+\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            tableView = new JTable();\n+            tableView.setTableHeader(null);\n+            tableView.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n+        });\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/NullTableHeader.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,184 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Component;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+import javax.swing.table.AbstractTableModel;\n+import javax.swing.table.TableCellRenderer;\n+import javax.swing.table.TableModel;\n+\n+\/*\n+ * @test\n+ * @bug 4118307\n+ * @summary Tests that JTable's cell editor for Number and Date work correctly\n+ * @key headful\n+ * @run main bug4118307\n+ *\/\n+\n+public class bug4118307 {\n+    static JFrame frame;\n+    static MyTable tbl;\n+    static Point tableLoc;\n+    static Point p;\n+    private static boolean flag = false;\n+    static final String[] columnNames = {\"Integer\", \"Double\"};\n+    static final Object[][] data = {\n+            {5, 3.14},\n+            {10, 2.71},\n+            {70, 3.14},\n+            {200, 2.71},\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(250);\n+            SwingUtilities.invokeAndWait(() -> createTestUI());\n+            robot.waitForIdle();\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                tableLoc = tbl.getLocationOnScreen();\n+                p = tbl.getCellRect(0, 0, true).getLocation();\n+            });\n+            robot.waitForIdle();\n+\n+            robot.mouseMove(tableLoc.x + p.x + 10, tableLoc.y + p.y + 10);\n+            robot.waitForIdle();\n+\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+\n+            SwingUtilities.invokeAndWait(() ->\n+                    p = tbl.getCellRect(1, 1, true).getLocation());\n+            robot.waitForIdle();\n+\n+            robot.mouseMove(tableLoc.x + p.x + 10, tableLoc.y + p.y + 10);\n+            robot.waitForIdle();\n+\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+\n+            SwingUtilities.invokeAndWait(() ->\n+                    p = tbl.getCellRect(1, 0, true).getLocation());\n+            robot.waitForIdle();\n+\n+            robot.mouseMove(tableLoc.x + p.x + 10, tableLoc.y + p.y + 10);\n+            robot.waitForIdle();\n+\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.delay(5000);\n+\n+            if (isFail()) {\n+                throw new RuntimeException(\"Test Failed.\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void createTestUI() {\n+        frame = new JFrame(\"bug4118307\");\n+        MyTableModel myModel = new MyTableModel();\n+        tbl = new MyTable(myModel);\n+        JScrollPane sp = new JScrollPane(tbl);\n+        frame.add(sp, BorderLayout.CENTER);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    static synchronized void setFail() {\n+        flag = true;\n+    }\n+\n+    static synchronized boolean isFail() {\n+        return flag;\n+    }\n+\n+    static class MyTable extends JTable {\n+        public MyTable(TableModel tm) {\n+            super(tm);\n+        }\n+\n+        public Component prepareRenderer(TableCellRenderer rend, int row, int col) {\n+            try {\n+                return super.prepareRenderer(rend, row, col);\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+                setFail();\n+                return null;\n+            }\n+        }\n+    }\n+\n+    static class MyTableModel extends AbstractTableModel {\n+        public int getColumnCount() {\n+            return columnNames.length;\n+        }\n+\n+        public int getRowCount() {\n+            return data.length;\n+        }\n+\n+        public String getColumnName(int col) {\n+            return columnNames[col];\n+        }\n+\n+        public Object getValueAt(int row, int col) {\n+            return data[row][col];\n+        }\n+\n+        public Class getColumnClass(int c) {\n+            return getValueAt(0, c).getClass();\n+        }\n+\n+        public boolean isCellEditable(int row, int col) {\n+            return true;\n+        }\n+\n+        public void setValueAt(Object value, int row, int col) {\n+            data[row][col] = value;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4118307.java","additions":184,"deletions":0,"binary":false,"changes":184,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+\n+\/*\n+ * @test\n+ * @bug 4138158\n+ * @summary Tests that setAutoscrolls(false) locks autoscroll\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4138158\n+ *\/\n+\n+public class bug4138158 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Move mouse to beginning of table, press left mouse button and move mouse down\n+            so that mouse cursor is below the bottom border of table. If the table isn't\n+            scrolled down then test passes. If the table is scrolled then test fails.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(bug4138158::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"bug4138158\");\n+        JTable table = new JTable(20, 3);\n+        table.setAutoscrolls(false);\n+        JScrollPane sp = new JScrollPane(table);\n+        frame.add(sp);\n+        frame.pack();\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4138158.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"}]}