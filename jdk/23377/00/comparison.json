{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -587,0 +587,7 @@\n+            \/\/ the value for the number of bytes of free space returned by the\n+            \/\/ native layer is not used here as it represents the number of free\n+            \/\/ bytes not considering quotas, whereas the value returned for the\n+            \/\/ number of usable bytes does respect quotas, and it is required\n+            \/\/ that free space <= total space\n+            if (t == SPACE_FREE)\n+                t = SPACE_USABLE;\n","filename":"src\/java.base\/windows\/classes\/java\/io\/WinNTFileSystem.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4057701 6286712 6364377 8181919\n+ * @bug 4057701 6286712 6364377 8181919 8349092\n@@ -179,0 +179,6 @@\n+        \/\/ Verify inequalities us <= fs <= ts (JDK-8349092)\n+        if (fs > ts)\n+            throw new RuntimeException(f + \" free space \" + fs + \" > total space \" + ts);\n+        if (us > fs)\n+            throw new RuntimeException(f + \" usable space \" + fs + \" > free space \" + ts);\n+\n","filename":"test\/jdk\/java\/io\/File\/GetXSpace.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}