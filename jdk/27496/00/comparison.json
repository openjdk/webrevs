{"files":[{"patch":"@@ -1,164 +0,0 @@\n-\/*\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-import sun.jvm.hotspot.oops.*;\n-import sun.jvm.hotspot.runtime.*;\n-import sun.jvm.hotspot.tools.*;\n-import sun.jvm.hotspot.utilities.*;\n-\n-\/**\n-   We don't run any of the \"standard\" SA command line tools for sanity\n-   check. This is because the standard tools print addresses in hex\n-   which could change legally. Also, textual comparison of output may\n-   not match because of other reasons as well. This tool checks\n-   validity of threads and frames logically. This class has reference\n-   frame names from \"known\" threads. The debuggee is assumed to run\n-   \"LibprocTest.java\".\n-*\/\n-\n-public class LibprocClient extends Tool {\n-\n-   public void run() {\n-      \/\/ try to get VM version and check\n-      String version = VM.getVM().getVMRelease();\n-      Assert.that(version.startsWith(\"1.5\"), \"1.5 expected\");\n-\n-      \/\/ try getting threads\n-      Threads threads = VM.getVM().getThreads();\n-      boolean mainTested = false;\n-\n-      \/\/ check frames of each thread\n-      for (JavaThread cur = threads.first(); cur != null; cur = cur.next()) {\n-         if (cur.isJavaThread()) {\n-             String name = cur.getThreadName();\n-             \/\/ testing of basic frame walking for all threads\n-             for (JavaVFrame vf = getLastJavaVFrame(cur); vf != null; vf = vf.javaSender()) {\n-                checkFrame(vf);\n-             }\n-\n-             \/\/ special testing for \"known\" threads. For now, only \"main\" thread.\n-             if (name.equals(\"main\")) {\n-                checkMainThread(cur);\n-                mainTested = true;\n-             }\n-         }\n-      }\n-      Assert.that(mainTested, \"main thread missing\");\n-   }\n-\n-   public static void main(String[] args) {\n-      try {\n-         LibprocClient lc = new LibprocClient();\n-         lc.start(args);\n-         lc.getAgent().detach();\n-         System.out.println(\"\\nPASSED\\n\");\n-      } catch (Exception exp) {\n-         System.out.println(\"\\nFAILED\\n\");\n-         exp.printStackTrace();\n-      }\n-   }\n-\n-   \/\/ -- Internals only below this point\n-   private static JavaVFrame getLastJavaVFrame(JavaThread cur) {\n-      RegisterMap regMap = cur.newRegisterMap(true);\n-      Frame f = cur.getCurrentFrameGuess();\n-      if (f == null) {\n-         System.err.println(\" (Unable to get a top most frame)\");\n-         return null;\n-      }\n-      VFrame vf = VFrame.newVFrame(f, regMap, cur, true, true);\n-      if (vf == null) {\n-         System.err.println(\" (Unable to create vframe for topmost frame guess)\");\n-         return null;\n-      }\n-      if (vf.isJavaFrame()) {\n-         return (JavaVFrame) vf;\n-      }\n-      return (JavaVFrame) vf.javaSender();\n-   }\n-\n-   private void checkMethodSignature(Symbol sig) {\n-      SignatureIterator itr = new SignatureIterator(sig) {\n-                                  public void doBool  () {}\n-                                  public void doChar  () {}\n-                                  public void doFloat () {}\n-                                  public void doDouble() {}\n-                                  public void doByte  () {}\n-                                  public void doShort () {}\n-                                  public void doInt   () {}\n-                                  public void doLong  () {}\n-                                  public void doVoid  () {}\n-                                  public void doObject(int begin, int end) {}\n-                                  public void doArray (int begin, int end) {}\n-                              };\n-      \/\/ this will throw RuntimeException for any invalid item in signature.\n-      itr.iterate();\n-   }\n-\n-   private void checkBCI(Method m, int bci) {\n-      if (! m.isNative()) {\n-         byte[] buf = m.getByteCode();\n-         Assert.that(bci >= 0 && bci < buf.length, \"invalid bci, not in code range\");\n-         if (m.hasLineNumberTable()) {\n-           int lineNum = m.getLineNumberFromBCI(bci);\n-           Assert.that(lineNum >= 0, \"expecting non-negative line number\");\n-         }\n-      }\n-   }\n-\n-   private void checkMethodHolder(Method method) {\n-      Klass klass = method.getMethodHolder();\n-      Assert.that(klass != null, \"expecting non-null instance klass\");\n-   }\n-\n-   private void checkFrame(JavaVFrame vf) {\n-      Method method = vf.getMethod();\n-      Assert.that(method != null, \"expecting a non-null method here\");\n-      Assert.that(method.getName() != null, \"expecting non-null method name\");\n-      checkMethodHolder(method);\n-      checkMethodSignature(method.getSignature());\n-      checkBCI(method, vf.getBCI());\n-   }\n-\n-   \/\/ from the test case LibprocTest.java - in the main thread we\n-   \/\/ should see frames as below\n-   private static String[] mainThreadMethods = new String[] {\n-                             \"java.lang.Object.wait(long)\",\n-                             \"java.lang.Object.wait()\",\n-                             \"LibprocTest.main(java.lang.String[])\"\n-                          };\n-\n-   private void checkMainThread(JavaThread thread) {\n-      checkFrames(thread, mainThreadMethods);\n-   }\n-\n-   private void checkFrames(JavaThread thread, String[] expectedMethodNames) {\n-      int i = 0;\n-      for (JavaVFrame vf = getLastJavaVFrame(thread); vf != null; vf = vf.javaSender(), i++) {\n-         Method m = vf.getMethod();\n-         Assert.that(m.externalNameAndSignature().equals(expectedMethodNames[i]),\n-                     \"expected frame missing\");\n-      }\n-   }\n-}\n","filename":"src\/jdk.hotspot.agent\/test\/libproc\/LibprocClient.java","additions":0,"deletions":164,"binary":false,"changes":164,"status":"deleted"},{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/**\n-  This is test case run by debuggee for running LibprocClient.java.\n-*\/\n-\n-public class LibprocTest {\n-   public static void main(String[] args) throws Exception {\n-      String myStr = \"\";\n-      System.out.println(\"main start\");\n-      synchronized(myStr) {\n-         try {\n-            myStr.wait();\n-         } catch (InterruptedException ee) {\n-         }\n-      }\n-      System.out.println(\"main end\");\n-   }\n-}\n","filename":"src\/jdk.hotspot.agent\/test\/libproc\/LibprocTest.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -1,30 +0,0 @@\n-#\n-# Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-#\n-\n-all:\n-\tjavac LibprocTest.java\n-\tjavac -classpath ..\/..\/build\/classes LibprocClient.java\n-\n-clean:\n-\trm -rf *.class\n","filename":"src\/jdk.hotspot.agent\/test\/libproc\/Makefile","additions":0,"deletions":30,"binary":false,"changes":30,"status":"deleted"},{"patch":"@@ -1,42 +0,0 @@\n-#\n-# Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#   \n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#   \n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#  \n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#   \n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#  \n-#\n-\n-After making any changes to libproc.so, the shell scripts described\n-below can be run to verify that it does not break Java Serviceability\n-Agent.\n-\n-Setup:\n-\n-You need to have jdk 1.5 installed to run this test. Set environment\n-variable SA_JAVA to point to the java executable of jdk\n-1.5. Otherwise, the script picks-up 'java' from PATH.\n-\n-Running the tests:\n-\n-run libproctest.sh (32-bit debuggee) and libproctest64.sh (64-bit\n-debuggee)\n-\n-Interpreting result:\n-\n-\"PASSED\" or \"FAILED\" is printed in standard output.\n","filename":"src\/jdk.hotspot.agent\/test\/libproc\/README","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -1,66 +0,0 @@\n-#!\/bin\/ksh\n-\n-#\n-# Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#  \n-#\n-\n-# This script is used to run consistency check of Serviceabilty Agent\n-# after making any libproc.so changes. Prints \"PASSED\" or \"FAILED\" in\n-# standard output.\n-\n-usage() {\n-    echo \"usage: $0\"\n-    echo \"   set SA_JAVA to be java executable from JDK 1.5\"\n-    exit 1 \n-}\n-\n-STARTDIR=`dirname $0`\n-\n-if [ \"$1\" == \"-help\" ]; then\n-    usage\n-fi\n-\n-if [ \"x$SA_JAVA\" = \"x\" ]; then\n-   SA_JAVA=java\n-fi\n-\n-# create java process with test case\n-tmp=\/tmp\/libproctest\n-rm -f $tmp\n-$SA_JAVA -classpath $STARTDIR LibprocTest > $tmp &\n-pid=$!\n-while [ ! -s $tmp ] ; do\n-  # Kludge alert!\n-  sleep 2\n-done\n-\n-# dump core\n-gcore $pid\n-kill -9 $pid\n-\n-\n-# run libproc client\n-$SA_JAVA -showversion -cp $STARTDIR\/..\/..\/build\/classes::$STARTDIR\/..\/sa.jar:$STARTDIR LibprocClient x core.$pid\n-\n-# delete core\n-rm -f core.$pid\n","filename":"src\/jdk.hotspot.agent\/test\/libproc\/libproctest.sh","additions":0,"deletions":66,"binary":false,"changes":66,"status":"deleted"},{"patch":"@@ -1,65 +0,0 @@\n-#!\/bin\/ksh\n-\n-#\n-# Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#  \n-#\n-\n-# This script is used to run consistency check of Serviceabilty Agent\n-# after making any libproc.so changes. Prints \"PASSED\" or \"FAILED\" in\n-# standard output.\n-\n-usage() {\n-    echo \"usage: $0\"\n-    echo \"   set SA_JAVA to be the java executable from JDK 1.5\"\n-    exit 1   \n-}\n-\n-if [ \"$1\" == \"-help\" ]; then\n-    usage\n-fi\n-\n-if [ \"x$SA_JAVA\" = \"x\" ]; then\n-   SA_JAVA=java\n-fi\n-\n-STARTDIR=`dirname $0`\n-\n-# create java process with test case\n-tmp=\/tmp\/libproctest\n-rm -f $tmp\n-$SA_JAVA -d64 -classpath $STARTDIR LibprocTest > $tmp &\n-pid=$!\n-while [ ! -s $tmp ] ; do\n-  # Kludge alert!\n-  sleep 2\n-done\n-\n-# dump core\n-gcore $pid\n-kill -9 $pid\n-\n-# run libproc client\n-$SA_JAVA -d64 -showversion -cp $STARTDIR\/..\/..\/build\/classes::$STARTDIR\/..\/sa.jar:$STARTDIR LibprocClient x core.$pid\n-\n-# delete core\n-rm -f core.$pid\n","filename":"src\/jdk.hotspot.agent\/test\/libproc\/libproctest64.sh","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"}]}