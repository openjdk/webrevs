{"files":[{"patch":"@@ -1478,2 +1478,2 @@\n-      \/\/ If the operations are different return the operand, as Max(A, Min(A, B)) == A if the value isn't a floating point value,\n-      \/\/ as if B == NaN the identity doesn't hold.\n+      \/\/ If the operations are different return the operand 'A', as Max(A, Min(A, B)) == A if the value isn't floating point.\n+      \/\/ With floating point values, the identity doesn't hold if B == NaN.\n@@ -1484,2 +1484,0 @@\n-\n-      return nullptr;\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -258,2 +258,1 @@\n-\/\/ all the behavior of addition on a ring.  Only new thing is that we allow\n-\/\/ 2 equal inputs to be equal.\n+\/\/ all the behavior of addition on a ring.\n","filename":"src\/hotspot\/share\/opto\/addnode.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @requires (os.simpleArch == \"x64\" & vm.cpu.features ~= \".*avx.*\") | os.arch == \"aarch64\" | os.arch == \"riscv64\"\n@@ -115,0 +116,4 @@\n+    \/\/ As Math.min\/max(LL) is not intrinsified, it first needs to be transformed into CMoveL and then MinL\/MaxL before\n+    \/\/ the identity can be matched. However, the outer min\/max is not transformed into CMove because of the CMove cost model.\n+    \/\/ As JDK-8307513 adds intrinsics for the methods, the Long tests are disabled until then.\n+\n@@ -116,1 +121,1 @@\n-    @IR(applyIfPlatform = { \"riscv64\", \"false\" }, phase = { CompilePhase.BEFORE_MACRO_EXPANSION }, counts = { IRNode.MIN_L, \"1\" })\n+\/\/     @IR(applyIfPlatform = { \"riscv64\", \"false\" }, phase = { CompilePhase.BEFORE_MACRO_EXPANSION }, counts = { IRNode.MIN_L, \"1\" })\n@@ -122,1 +127,1 @@\n-    @IR(applyIfPlatform = { \"riscv64\", \"false\" }, failOn = { IRNode.MIN_L, IRNode.MAX_L })\n+\/\/     @IR(applyIfPlatform = { \"riscv64\", \"false\" }, phase = { CompilePhase.BEFORE_MACRO_EXPANSION }, failOn = { IRNode.MIN_L, IRNode.MAX_L })\n@@ -128,1 +133,1 @@\n-    @IR(applyIfPlatform = { \"riscv64\", \"false\" }, failOn = { IRNode.MIN_L, IRNode.MAX_L })\n+\/\/     @IR(applyIfPlatform = { \"riscv64\", \"false\" }, phase = { CompilePhase.BEFORE_MACRO_EXPANSION }, failOn = { IRNode.MIN_L, IRNode.MAX_L })\n@@ -134,1 +139,1 @@\n-    @IR(applyIfPlatform = { \"riscv64\", \"false\" }, phase = { CompilePhase.BEFORE_MACRO_EXPANSION }, counts = { IRNode.MAX_L, \"1\" })\n+\/\/     @IR(applyIfPlatform = { \"riscv64\", \"false\" }, phase = { CompilePhase.BEFORE_MACRO_EXPANSION }, counts = { IRNode.MAX_L, \"1\" })\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestMinMaxIdentities.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"}]}