{"files":[{"patch":"@@ -173,1 +173,1 @@\n-JVM_ENTRY_NO_ENV(void, jfr_set_cpu_throttle(JNIEnv* env, jclass jvm, jdouble rate, jboolean autoadapt))\n+JVM_ENTRY_NO_ENV(void, jfr_set_cpu_throttle(JNIEnv* env, jclass jvm, jdouble rate, jboolean auto_adapt))\n@@ -175,1 +175,1 @@\n-  JfrCPUTimeThreadSampling::set_rate(rate, autoadapt == JNI_TRUE);\n+  JfrCPUTimeThreadSampling::set_rate(rate, auto_adapt == JNI_TRUE);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-void JNICALL jfr_set_cpu_throttle(JNIEnv* env, jclass jvm, jdouble rate, jboolean autoadapt);\n+void JNICALL jfr_set_cpu_throttle(JNIEnv* env, jclass jvm, jdouble rate, jboolean auto_adapt);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1261,1 +1261,1 @@\n-\n+  \n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -170,1 +170,1 @@\n-  bool _autoadapt;\n+  bool _auto_adapt;\n@@ -177,1 +177,1 @@\n-  JfrCPUTimeThreadSampler(double rate, bool autoadapt);\n+  JfrCPUTimeThreadSampler(double rate, bool auto_adapt);\n@@ -185,1 +185,1 @@\n-  void autoadapt_period_if_needed();\n+  void auto_adapt_period_if_needed();\n@@ -187,1 +187,1 @@\n-  void set_rate(double rate, bool autoadapt);\n+  void set_rate(double rate, bool auto_adapt);\n@@ -213,1 +213,1 @@\n-JfrCPUTimeThreadSampler::JfrCPUTimeThreadSampler(double rate, bool autoadapt) :\n+JfrCPUTimeThreadSampler::JfrCPUTimeThreadSampler(double rate, bool auto_adapt) :\n@@ -217,1 +217,1 @@\n-  _autoadapt(autoadapt),\n+  _auto_adapt(auto_adapt),\n@@ -294,1 +294,1 @@\n-  int64_t last_autoadapt_check = os::javaTimeNanos();\n+  int64_t last_auto_adapt_check = os::javaTimeNanos();\n@@ -302,3 +302,3 @@\n-    if (os::javaTimeNanos() - last_autoadapt_check > AUTOADAPT_INTERVAL_MS * 1000000) {\n-      autoadapt_period_if_needed();\n-      last_autoadapt_check = os::javaTimeNanos();\n+    if (os::javaTimeNanos() - last_auto_adapt_check > AUTOADAPT_INTERVAL_MS * 1000000) {\n+      auto_adapt_period_if_needed();\n+      last_auto_adapt_check = os::javaTimeNanos();\n@@ -415,1 +415,1 @@\n-void JfrCPUTimeThreadSampling::create_sampler(double rate, bool autoadapt) {\n+void JfrCPUTimeThreadSampling::create_sampler(double rate, bool auto_adapt) {\n@@ -417,1 +417,1 @@\n-  _sampler = new JfrCPUTimeThreadSampler(rate, autoadapt);\n+  _sampler = new JfrCPUTimeThreadSampler(rate, auto_adapt);\n@@ -422,1 +422,1 @@\n-void JfrCPUTimeThreadSampling::update_run_state(double rate, bool autoadapt) {\n+void JfrCPUTimeThreadSampling::update_run_state(double rate, bool auto_adapt) {\n@@ -425,1 +425,1 @@\n-      create_sampler(rate, autoadapt);\n+      create_sampler(rate, auto_adapt);\n@@ -427,1 +427,1 @@\n-      _sampler->set_rate(rate, autoadapt);\n+      _sampler->set_rate(rate, auto_adapt);\n@@ -433,1 +433,1 @@\n-    _sampler->set_rate(rate \/* 0 *\/, autoadapt);\n+    _sampler->set_rate(rate \/* 0 *\/, auto_adapt);\n@@ -438,1 +438,1 @@\n-void JfrCPUTimeThreadSampling::set_rate(double rate, bool autoadapt) {\n+void JfrCPUTimeThreadSampling::set_rate(double rate, bool auto_adapt) {\n@@ -443,1 +443,1 @@\n-  instance().set_rate_value(rate, autoadapt);\n+  instance().set_rate_value(rate, auto_adapt);\n@@ -446,1 +446,1 @@\n-void JfrCPUTimeThreadSampling::set_rate_value(double rate, bool autoadapt) {\n+void JfrCPUTimeThreadSampling::set_rate_value(double rate, bool auto_adapt) {\n@@ -448,1 +448,1 @@\n-    _sampler->set_rate(rate, autoadapt);\n+    _sampler->set_rate(rate, auto_adapt);\n@@ -450,1 +450,1 @@\n-  update_run_state(rate, autoadapt);\n+  update_run_state(rate, auto_adapt);\n@@ -642,1 +642,1 @@\n-void JfrCPUTimeThreadSampler::autoadapt_period_if_needed() {\n+void JfrCPUTimeThreadSampler::auto_adapt_period_if_needed() {\n@@ -644,1 +644,1 @@\n-  if (_autoadapt || current_period == -1) {\n+  if (_auto_adapt || current_period == -1) {\n@@ -653,1 +653,1 @@\n-void JfrCPUTimeThreadSampler::set_rate(double rate, bool autoadapt) {\n+void JfrCPUTimeThreadSampler::set_rate(double rate, bool auto_adapt) {\n@@ -655,1 +655,1 @@\n-  _autoadapt = autoadapt;\n+  _auto_adapt = auto_adapt;\n@@ -657,1 +657,1 @@\n-    autoadapt_period_if_needed();\n+    auto_adapt_period_if_needed();\n@@ -705,1 +705,1 @@\n-void JfrCPUTimeThreadSampling::set_rate(double rate, bool autoadapt) {\n+void JfrCPUTimeThreadSampling::set_rate(double rate, bool auto_adapt) {\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.cpp","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -105,2 +105,2 @@\n-  void create_sampler(double rate, bool autoadapt);\n-  void set_rate_value(double rate, bool autoadapt);\n+  void create_sampler(double rate, bool auto_adapt);\n+  void set_rate_value(double rate, bool auto_adapt);\n@@ -115,1 +115,1 @@\n-  void update_run_state(double rate, bool autoadapt);\n+  void update_run_state(double rate, bool auto_adapt);\n@@ -118,1 +118,1 @@\n-  static void set_rate(double rate, bool autoadapt);\n+  static void set_rate(double rate, bool auto_adapt);\n@@ -145,1 +145,1 @@\n-  static void set_rate(double rate, bool autoadapt);\n+  static void set_rate(double rate, bool auto_adapt);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -202,1 +202,1 @@\n-            JVM.setCPUThrottle(rate.rate(), rate.autoadapt());\n+            JVM.setCPUThrottle(rate.rate(), rate.autoAdapt());\n@@ -268,1 +268,1 @@\n-                JVM.setCPUThrottle(r.rate(), r.autoadapt());\n+                JVM.setCPUThrottle(r.rate(), r.autoAdapt());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PlatformEventType.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-                max = new TimespanRate(max.rate(), max.autoadapt() || rate.autoadapt());\n+                max = new TimespanRate(max.rate(), max.autoAdapt() || rate.autoAdapt());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/settings\/CPUThrottleSetting.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-public record TimespanRate(double rate, boolean autoadapt) {\n+public record TimespanRate(double rate, boolean autoAdapt) {\n@@ -63,1 +63,1 @@\n-        if (autoadapt) {\n+        if (autoAdapt) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/util\/TimespanRate.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}