{"files":[{"patch":"@@ -80,0 +80,1 @@\n+  assert(&JavaThread::current()->jfr_thread_local()->cpu_time_jfr_queue() == this, \"invariant\");\n@@ -96,1 +97,1 @@\n-volatile u4 _lost_samples_sum = 0;\n+static volatile u4 _lost_samples_sum = 0;\n@@ -121,1 +122,1 @@\n-s4 JfrCPUTimeTraceQueue::lost_samples() const {\n+u4 JfrCPUTimeTraceQueue::lost_samples() const {\n@@ -131,6 +132,1 @@\n-  s4 lost_samples = Atomic::load(&_lost_samples);\n-  s4 new_lost_samples;\n-  while ((new_lost_samples = Atomic::cmpxchg(&_lost_samples, lost_samples, 0)) != lost_samples) {\n-    lost_samples = new_lost_samples;\n-  }\n-  return lost_samples;\n+  return Atomic::xchg(&_lost_samples, (u4)0);\n@@ -164,1 +160,1 @@\n-class JfrCPUTimeThreadSampler : public NonJavaThread {\n+class JfrCPUSamplerThread : public NonJavaThread {\n@@ -177,1 +173,1 @@\n-  JfrCPUTimeThreadSampler(double rate, bool auto_adapt);\n+  JfrCPUSamplerThread(double rate, bool auto_adapt);\n@@ -194,0 +190,1 @@\n+  bool create_timer_for_thread(JavaThread* thread, timer_t &timerid);\n@@ -198,2 +195,2 @@\n-  virtual const char* name() const { return \"JFR CPU Time Thread Sampler\"; }\n-  virtual const char* type_name() const { return \"JfrCPUTimeThreadSampler\"; }\n+  virtual const char* name() const { return \"JFR CPU Sampler Thread\"; }\n+  virtual const char* type_name() const { return \"JfrCPUTimeSampler\"; }\n@@ -202,1 +199,0 @@\n-  bool create_timer_for_thread(JavaThread* thread, timer_t &timerid);\n@@ -206,1 +202,1 @@\n-  void init_timers();\n+  bool init_timers();\n@@ -212,0 +208,4 @@\n+\/\/ we have two stop signals, to remove a data race\n+\/\/ and this works even when the _instance is null\n+static volatile bool _static_stop_signals = true;\n+\n@@ -213,1 +213,1 @@\n-JfrCPUTimeThreadSampler::JfrCPUTimeThreadSampler(double rate, bool auto_adapt) :\n+JfrCPUSamplerThread::JfrCPUSamplerThread(double rate, bool auto_adapt) :\n@@ -220,1 +220,1 @@\n-  _stop_signals(false),\n+  _stop_signals(true),\n@@ -226,1 +226,1 @@\n-void JfrCPUTimeThreadSampler::trigger_async_processing_of_cpu_time_jfr_requests() {\n+void JfrCPUSamplerThread::trigger_async_processing_of_cpu_time_jfr_requests() {\n@@ -230,1 +230,1 @@\n-void JfrCPUTimeThreadSampler::on_javathread_create(JavaThread* thread) {\n+void JfrCPUSamplerThread::on_javathread_create(JavaThread* thread) {\n@@ -240,0 +240,2 @@\n+  } else {\n+    tl->deallocate_cpu_time_jfr_queue();\n@@ -243,1 +245,1 @@\n-void JfrCPUTimeThreadSampler::on_javathread_terminate(JavaThread* thread) {\n+void JfrCPUSamplerThread::on_javathread_terminate(JavaThread* thread) {\n@@ -259,1 +261,1 @@\n-void JfrCPUTimeThreadSampler::start_thread() {\n+void JfrCPUSamplerThread::start_thread() {\n@@ -267,1 +269,1 @@\n-void JfrCPUTimeThreadSampler::enroll() {\n+void JfrCPUSamplerThread::enroll() {\n@@ -269,0 +271,2 @@\n+    Atomic::release_store(&_static_stop_signals, false);\n+    Atomic::release_store(&_stop_signals, false);\n@@ -271,1 +275,5 @@\n-    init_timers();\n+    if (!init_timers()) {\n+      log_error(jfr)(\"Failed to initialize timers for CPU thread sampler\");\n+      disenroll();\n+      return;\n+    }\n@@ -276,1 +284,1 @@\n-void JfrCPUTimeThreadSampler::disenroll() {\n+void JfrCPUSamplerThread::disenroll() {\n@@ -280,1 +288,2 @@\n-    Atomic::store(&_stop_signals, true);\n+    Atomic::release_store(&_static_stop_signals, true);\n+    Atomic::release_store(&_stop_signals, true);\n@@ -286,1 +295,2 @@\n-    Atomic::store(&_stop_signals, false);\n+    Atomic::release_store(&_static_stop_signals, false);\n+    Atomic::release_store(&_stop_signals, false);\n@@ -291,1 +301,1 @@\n-void JfrCPUTimeThreadSampler::run() {\n+void JfrCPUSamplerThread::run() {\n@@ -307,2 +317,1 @@\n-    if (Atomic::load_acquire(&_is_async_processing_of_cpu_time_jfr_requests_triggered)) {\n-      Atomic::release_store(&_is_async_processing_of_cpu_time_jfr_requests_triggered, false);\n+    if (Atomic::cmpxchg(&_is_async_processing_of_cpu_time_jfr_requests_triggered, true, false)) {\n@@ -315,1 +324,1 @@\n-void JfrCPUTimeThreadSampler::stackwalk_threads_in_native() {\n+void JfrCPUSamplerThread::stackwalk_threads_in_native() {\n@@ -326,1 +335,1 @@\n-        continue; \/\/ thread doesn't have a last Java frame or queue is already being processed\n+        continue;\n@@ -383,1 +392,1 @@\n-void JfrCPUTimeThreadSampler::post_run() {\n+void JfrCPUSamplerThread::post_run() {\n@@ -417,1 +426,1 @@\n-  _sampler = new JfrCPUTimeThreadSampler(rate, auto_adapt);\n+  _sampler = new JfrCPUSamplerThread(rate, auto_adapt);\n@@ -473,0 +482,3 @@\n+  if (Atomic::load_acquire(&_static_stop_signals)) {\n+    return;\n+  }\n@@ -479,1 +491,2 @@\n-  if (Atomic::load(&_sampler->_stop_signals)) {\n+  if (info->si_signo != SIGPROF) {\n+    \/\/ not the signal we are interested in\n@@ -482,0 +495,1 @@\n+\n@@ -483,1 +497,3 @@\n-  _sampler->handle_timer_signal(info, context);\n+  if (!Atomic::load_acquire(&_sampler->_stop_signals)) {\n+    _sampler->handle_timer_signal(info, context);\n+  }\n@@ -487,1 +503,1 @@\n-void JfrCPUTimeThreadSampler::sample_thread(JfrSampleRequest& request, void* ucontext, JavaThread* jt, JfrThreadLocal* tl) {\n+void JfrCPUSamplerThread::sample_thread(JfrSampleRequest& request, void* ucontext, JavaThread* jt, JfrThreadLocal* tl) {\n@@ -501,1 +517,1 @@\n-void JfrCPUTimeThreadSampler::handle_timer_signal(siginfo_t* info, void* context) {\n+void JfrCPUSamplerThread::handle_timer_signal(siginfo_t* info, void* context) {\n@@ -509,1 +525,1 @@\n-      queue.increment_lost_samples();\n+    queue.increment_lost_samples();\n@@ -562,1 +578,1 @@\n-bool JfrCPUTimeThreadSampler::create_timer_for_thread(JavaThread* thread, timer_t& timerid) {\n+bool JfrCPUSamplerThread::create_timer_for_thread(JavaThread* thread, timer_t& timerid) {\n@@ -576,1 +592,0 @@\n-    log_error(jfr)(\"Failed to register the signal handler for thread sampling: %s\", os::strerror(os::get_last_error()));\n@@ -589,1 +604,1 @@\n-  JfrCPUTimeThreadSampler *_sampler;\n+  JfrCPUSamplerThread *_sampler;\n@@ -592,1 +607,1 @@\n-  VM_CPUTimeSamplerThreadInitializer(JfrCPUTimeThreadSampler* sampler) : _sampler(sampler) {\n+  VM_CPUTimeSamplerThreadInitializer(JfrCPUSamplerThread* sampler) : _sampler(sampler) {\n@@ -604,1 +619,1 @@\n-void JfrCPUTimeThreadSampler::init_timers() {\n+bool JfrCPUSamplerThread::init_timers() {\n@@ -606,2 +621,3 @@\n-  PosixSignals::install_generic_signal_handler(SIG, (void*)::handle_timer_signal);\n-\n+  if ((s8)PosixSignals::install_generic_signal_handler(SIG, (void*)::handle_timer_signal) == -1) {\n+    return false;\n+  }\n@@ -610,0 +626,1 @@\n+  return true;\n@@ -614,1 +631,1 @@\n-  JfrCPUTimeThreadSampler *_sampler;\n+  JfrCPUSamplerThread *_sampler;\n@@ -617,1 +634,1 @@\n-  VM_CPUTimeSamplerThreadTerminator(JfrCPUTimeThreadSampler* sampler) : _sampler(sampler) {\n+  VM_CPUTimeSamplerThreadTerminator(JfrCPUSamplerThread* sampler) : _sampler(sampler) {\n@@ -637,1 +654,1 @@\n-void JfrCPUTimeThreadSampler::stop_timer() {\n+void JfrCPUSamplerThread::stop_timer() {\n@@ -642,1 +659,1 @@\n-void JfrCPUTimeThreadSampler::auto_adapt_period_if_needed() {\n+void JfrCPUSamplerThread::auto_adapt_period_if_needed() {\n@@ -653,1 +670,1 @@\n-void JfrCPUTimeThreadSampler::set_rate(double rate, bool auto_adapt) {\n+void JfrCPUSamplerThread::set_rate(double rate, bool auto_adapt) {\n@@ -656,1 +673,1 @@\n-  if (_rate > 0 && Atomic::load(&_disenrolled) == false) {\n+  if (_rate > 0 && Atomic::load_acquire(&_disenrolled) == false) {\n@@ -663,1 +680,1 @@\n-void JfrCPUTimeThreadSampler::update_all_thread_timers() {\n+void JfrCPUSamplerThread::update_all_thread_timers() {\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.cpp","additions":68,"deletions":51,"binary":false,"changes":119,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-class NonJavaThread;\n@@ -58,1 +57,1 @@\n-  volatile s4 _lost_samples;\n+  volatile u4 _lost_samples;\n@@ -81,1 +80,1 @@\n-  s4 lost_samples() const;\n+  u4 lost_samples() const;\n@@ -97,1 +96,1 @@\n-class JfrCPUTimeThreadSampler;\n+class JfrCPUSamplerThread;\n@@ -103,1 +102,1 @@\n-  JfrCPUTimeThreadSampler* _sampler;\n+  JfrCPUSamplerThread* _sampler;\n@@ -128,1 +127,1 @@\n-  \/\/ Trigger sampling while a thread is not in a safepoint, from a seperate thread\n+  \/\/ Trigger sampling while a thread is not in a safepoint, from a separate thread\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.hpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-  friend class JfrCPUTimeThreadSampler;\n+  friend class JfrCPUSamplerThread;\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampling.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -142,1 +142,0 @@\n-      send_java_thread_start_event(jt);\n@@ -144,0 +143,1 @@\n+      send_java_thread_start_event(jt);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-\/\/     - JfrCPUTimeThreadSampler\n+\/\/     - JfrCPUSamplerThread\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -239,1 +239,1 @@\n-  friend class JfrCPUTimeThreadSampler;\n+  friend class JfrCPUSamplerThread;\n","filename":"src\/hotspot\/share\/utilities\/ticks.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}