{"files":[{"patch":"@@ -263,8 +263,10 @@\n-  if (tl->has_cpu_timer()) {\n-    timer_delete(tl->cpu_timer());\n-    tl->unset_cpu_timer();\n-    tl->deallocate_cpu_time_jfr_queue();\n-    s4 lost_samples = tl->cpu_time_jfr_queue().lost_samples();\n-    if (lost_samples > 0) {\n-      JfrCPUTimeThreadSampling::send_lost_event(JfrTicks::now(), JfrThreadLocal::thread_id(thread), lost_samples);\n-    }\n+  timer_t* timer = tl->cpu_timer();\n+  if (timer == nullptr) {\n+    return; \/\/ no timer was created for this thread\n+  }\n+  timer_delete(*timer);\n+  tl->unset_cpu_timer();\n+  tl->deallocate_cpu_time_jfr_queue();\n+  s4 lost_samples = tl->cpu_time_jfr_queue().lost_samples();\n+  if (lost_samples > 0) {\n+    JfrCPUTimeThreadSampling::send_lost_event(JfrTicks::now(), JfrThreadLocal::thread_id(thread), lost_samples);\n@@ -687,4 +689,3 @@\n-      if (tl->has_cpu_timer()) {\n-        timer_delete(tl->cpu_timer());\n-        tl->deallocate_cpu_time_jfr_queue();\n-        tl->unset_cpu_timer();\n+      timer_t* timer = tl->cpu_timer();\n+      if (timer == nullptr) {\n+        continue;\n@@ -692,0 +693,3 @@\n+      timer_delete(*timer);\n+      tl->deallocate_cpu_time_jfr_queue();\n+      tl->unset_cpu_timer();\n@@ -728,3 +732,5 @@\n-    JfrThreadLocal* jfr_thread_local = thread->jfr_thread_local();\n-    if (jfr_thread_local != nullptr && jfr_thread_local->has_cpu_timer()) {\n-      set_timer_time(jfr_thread_local->cpu_timer(), period_millis);\n+    JfrThreadLocal* tl = thread->jfr_thread_local();\n+    assert(tl != nullptr, \"invariant\");\n+    timer_t* timer = tl->cpu_timer();\n+    if (timer != nullptr) {\n+      set_timer_time(*timer, period_millis);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.cpp","additions":21,"deletions":15,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"jfr\/utilities\/jfrAllocation.hpp\"\n@@ -549,2 +550,4 @@\n-  _has_cpu_timer = true;\n-  _cpu_timer = timer;\n+  if (_cpu_timer == nullptr) {\n+    _cpu_timer = JfrCHeapObj::new_array<timer_t>(1);\n+  }\n+  *_cpu_timer = timer;\n@@ -554,1 +557,4 @@\n-  _has_cpu_timer = false;\n+  if (_cpu_timer != nullptr) {\n+    JfrCHeapObj::free(_cpu_timer, sizeof(timer_t));\n+    _cpu_timer = nullptr;\n+  }\n@@ -557,1 +563,1 @@\n-timer_t JfrThreadLocal::cpu_timer() const {\n+timer_t* JfrThreadLocal::cpu_timer() const {\n@@ -561,4 +567,0 @@\n-bool JfrThreadLocal::has_cpu_timer() const {\n-  return _has_cpu_timer;\n-}\n-\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.cpp","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -89,2 +89,1 @@\n-  bool _has_cpu_timer = false;\n-  timer_t _cpu_timer;\n+  timer_t* _cpu_timer = nullptr;\n@@ -374,2 +373,1 @@\n-  timer_t cpu_timer() const;\n-  bool has_cpu_timer() const;\n+  timer_t* cpu_timer() const;\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}