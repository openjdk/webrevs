{"files":[{"patch":"@@ -1511,1 +1511,1 @@\n-    return nullptr; \/\/ signal not installed\n+    return nullptr;\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-  volatile u4 _active_signal_handlers;\n+  volatile u4 _initialize_active_signal_handler_counter;\n@@ -191,1 +191,1 @@\n-  void sample_thread(JfrSampleRequest& request, void* ucontext, JavaThread* jt, JfrThreadLocal* tl);\n+  void sample_thread(JfrSampleRequest& request, void* ucontext, JavaThread* jt, JfrThreadLocal* tl, JfrTicks& now);\n@@ -229,1 +229,1 @@\n-  _active_signal_handlers(STOP_SIGNAL_BIT),\n+  _initialize_active_signal_handler_counter(STOP_SIGNAL_BIT),\n@@ -509,2 +509,2 @@\n-void JfrCPUSamplerThread::sample_thread(JfrSampleRequest& request, void* ucontext, JavaThread* jt, JfrThreadLocal* tl) {\n-  JfrSampleRequestBuilder::build_cpu_time_sample_request(request, ucontext, jt, jt->jfr_thread_local());\n+void JfrCPUSamplerThread::sample_thread(JfrSampleRequest& request, void* ucontext, JavaThread* jt, JfrThreadLocal* tl, JfrTicks& now) {\n+  JfrSampleRequestBuilder::build_cpu_time_sample_request(request, ucontext, jt, jt->jfr_thread_local(), now);\n@@ -524,0 +524,1 @@\n+  JfrTicks now = JfrTicks::now();\n@@ -544,1 +545,1 @@\n-  sample_thread(request._request, context, jt, tl);\n+  sample_thread(request._request, context, jt, tl, now);\n@@ -609,2 +610,2 @@\n-  Atomic::or_then_fetch(&_active_signal_handlers, STOP_SIGNAL_BIT, memory_order_acq_rel);\n-  while (Atomic::load_acquire(&_active_signal_handlers) > STOP_SIGNAL_BIT) {\n+  Atomic::or_then_fetch(&_initialize_active_signal_handler_counter, STOP_SIGNAL_BIT, memory_order_acq_rel);\n+  while (Atomic::load_acquire(&_initialize_active_signal_handler_counter) > STOP_SIGNAL_BIT) {\n@@ -619,1 +620,1 @@\n-  u4 old_value = Atomic::fetch_then_add(&_active_signal_handlers, (u4)1, memory_order_acq_rel);\n+  u4 old_value = Atomic::fetch_then_add(&_initialize_active_signal_handler_counter, (u4)1, memory_order_acq_rel);\n@@ -622,1 +623,1 @@\n-    Atomic::dec(&_active_signal_handlers, memory_order_acq_rel);\n+    Atomic::dec(&_initialize_active_signal_handler_counter, memory_order_acq_rel);\n@@ -629,1 +630,1 @@\n-  Atomic::dec(&_active_signal_handlers, memory_order_acq_rel);\n+  Atomic::dec(&_initialize_active_signal_handler_counter, memory_order_acq_rel);\n@@ -633,1 +634,1 @@\n-  Atomic::release_store(&_active_signal_handlers, (u4)0);\n+  Atomic::release_store(&_initialize_active_signal_handler_counter, (u4)0);\n@@ -657,1 +658,1 @@\n-    log_error(jfr)(\"CPUTimeSample events will not be recorded: %p\", prev_handler);\n+    log_error(jfr)(\"Conflicting SIGPROF handler found: %p. CPUTimeSample events will not be recorded\", prev_handler);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.cpp","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"jfr\/utilities\/jfrTime.hpp\"\n@@ -320,1 +321,2 @@\n-                                                            JfrThreadLocal* tl) {\n+                                                            JfrThreadLocal* tl,\n+                                                            JfrTicks& now) {\n@@ -322,0 +324,1 @@\n+  request._sample_ticks = now;\n@@ -333,1 +336,0 @@\n-  request._sample_ticks = JfrTicks::now();\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrSampleRequest.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -87,1 +87,2 @@\n-                                            JfrThreadLocal* tl);\n+                                            JfrThreadLocal* tl,\n+                                            JfrTicks& now);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrSampleRequest.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}