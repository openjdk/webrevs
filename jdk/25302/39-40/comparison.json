{"files":[{"patch":"@@ -378,0 +378,7 @@\n+\/\/ Entry point for a thread that has been sampled in native code and has a pending JFR CPU time request.\n+void JfrThreadSampling::process_cpu_time_request(JavaThread* jt, JfrThreadLocal* tl, Thread* current, bool lock) {\n+  assert(jt != nullptr, \"invariant\");\n+\n+  const JfrTicks now = JfrTicks::now();\n+  drain_enqueued_cpu_time_requests(now, tl, jt, current, lock);\n+}\n@@ -478,7 +485,0 @@\n-\/\/ Entry point for a thread that has been sampled in native code and has a pending JFR CPU time request.\n-void JfrThreadSampling::process_cpu_time_request(JavaThread* jt, JfrThreadLocal* tl, Thread* current, bool lock) {\n-  assert(jt != nullptr, \"invariant\");\n-\n-  const JfrTicks now = JfrTicks::now();\n-  drain_enqueued_cpu_time_requests(now, tl, jt, current, lock);\n-}\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampling.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+  friend class JfrCPUTimeThreadSampler;\n@@ -38,0 +39,1 @@\n+  static void process_cpu_time_request(JavaThread* jt, JfrThreadLocal* tl, Thread* current, bool lock);\n@@ -40,1 +42,0 @@\n-  static void process_cpu_time_request(JavaThread* jt, JfrThreadLocal* tl, Thread* current, bool lock);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampling.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}