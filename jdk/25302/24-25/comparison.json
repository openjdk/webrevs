{"files":[{"patch":"@@ -73,1 +73,1 @@\n-  _capacity(capacity), _head(0), _lost_samples(0), _first_native_request_index(-1) {\n+  _capacity(capacity), _head(0), _lost_samples(0) {\n@@ -165,8 +165,0 @@\n-void JfrCPUTimeTraceQueue::set_first_native_request_index(s4 index) {\n-  Atomic::release_store(&_first_native_request_index, index);\n-}\n-\n-s4 JfrCPUTimeTraceQueue::first_native_request_index() const {\n-  return Atomic::load_acquire(&_first_native_request_index);\n-}\n-\n@@ -191,1 +183,1 @@\n-  volatile bool _is_thread_in_native_stackwalking_triggered;\n+  volatile bool _is_async_processing_of_cpu_time_jfr_requests_triggered;\n@@ -227,1 +219,1 @@\n-  void trigger_is_thread_in_native_stackwalking();\n+  void trigger_async_processing_of_cpu_time_jfr_requests();\n@@ -240,1 +232,1 @@\n-  _is_thread_in_native_stackwalking_triggered(false) {\n+  _is_async_processing_of_cpu_time_jfr_requests_triggered(false) {\n@@ -244,2 +236,2 @@\n-void JfrCPUTimeThreadSampler::trigger_is_thread_in_native_stackwalking() {\n-  Atomic::release_store(&_is_thread_in_native_stackwalking_triggered, true);\n+void JfrCPUTimeThreadSampler::trigger_async_processing_of_cpu_time_jfr_requests() {\n+  Atomic::release_store(&_is_async_processing_of_cpu_time_jfr_requests_triggered, true);\n@@ -325,2 +317,2 @@\n-    if (Atomic::load_acquire(&_is_thread_in_native_stackwalking_triggered)) {\n-      Atomic::release_store(&_is_thread_in_native_stackwalking_triggered, false);\n+    if (Atomic::load_acquire(&_is_async_processing_of_cpu_time_jfr_requests_triggered)) {\n+      Atomic::release_store(&_is_async_processing_of_cpu_time_jfr_requests_triggered, false);\n@@ -340,1 +332,1 @@\n-    if (tl != nullptr && tl->wants_is_thread_in_native_stackwalking()) {\n+    if (tl != nullptr && tl->wants_async_processing_of_cpu_time_jfr_requests()) {\n@@ -344,1 +336,1 @@\n-      tl->set_wants_is_thread_in_native_stackwalking(false);\n+      tl->set_do_async_processing_of_cpu_time_jfr_requests(false);\n@@ -371,3 +363,0 @@\n-  s4 first_index = queue.first_native_request_index();\n-  assert(first_index >= 0, \"invariant\");\n-\n@@ -375,1 +364,1 @@\n-  for (u4 i = first_index; i < queue.size(); i++) {\n+  for (u4 i = 0; i < queue.size(); i++) {\n@@ -387,1 +376,0 @@\n-  queue.set_first_native_request_index(-1);\n@@ -392,1 +380,0 @@\n-  queue.set_size(first_index);\n@@ -523,1 +510,1 @@\n-void JfrCPUTimeThreadSampling::trigger_is_thread_in_native_stackwalking() {\n+void JfrCPUTimeThreadSampling::trigger_async_processing_of_cpu_time_jfr_requests() {\n@@ -525,1 +512,1 @@\n-    _instance->_sampler->trigger_is_thread_in_native_stackwalking();\n+    _instance->_sampler->trigger_async_processing_of_cpu_time_jfr_requests();\n@@ -571,1 +558,1 @@\n-      tl->set_wants_is_thread_in_native_stackwalking(false);\n+      tl->set_do_async_processing_of_cpu_time_jfr_requests(false);\n@@ -596,6 +583,2 @@\n-    tl->set_wants_is_thread_in_native_stackwalking(true);\n-    JfrCPUTimeThreadSampling::trigger_is_thread_in_native_stackwalking();\n-    if (queue.first_native_request_index() == -1) {\n-      \/\/ this is the first native request, set the index\n-      queue.set_first_native_request_index(queue.size() - 1);\n-    }\n+    tl->set_do_async_processing_of_cpu_time_jfr_requests(true);\n+    JfrCPUTimeThreadSampling::trigger_async_processing_of_cpu_time_jfr_requests();\n@@ -603,2 +586,1 @@\n-    tl->set_wants_is_thread_in_native_stackwalking(false);\n-    queue.set_first_native_request_index(-1);\n+    tl->set_do_async_processing_of_cpu_time_jfr_requests(false);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.cpp","additions":17,"deletions":35,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-#include \"memory\/padded.hpp\"\n@@ -61,4 +60,0 @@\n-  \/\/ index of the first request of the thread in native state\n-  \/\/ -1 if no native request is in the queue\n-  volatile s4 _first_native_request_index;\n-\n@@ -101,3 +96,0 @@\n-  void set_first_native_request_index(s4 index);\n-\n-  s4 first_native_request_index() const;\n@@ -139,1 +131,1 @@\n-  static void trigger_is_thread_in_native_stackwalking();\n+  static void trigger_async_processing_of_cpu_time_jfr_requests();\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.hpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -250,0 +250,2 @@\n+    biased = true;\n+\n@@ -257,0 +259,1 @@\n+          biased = false;\n@@ -263,1 +266,0 @@\n-    biased = true;\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampling.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-  _wants_is_thread_in_native_stackwalking(false)\n+  _do_async_processing_of_cpu_time_jfr_requests(false)\n@@ -615,2 +615,2 @@\n-void JfrThreadLocal::set_wants_is_thread_in_native_stackwalking(bool wants) {\n-  Atomic::release_store(&_wants_is_thread_in_native_stackwalking, wants);\n+void JfrThreadLocal::set_do_async_processing_of_cpu_time_jfr_requests(bool wants) {\n+  Atomic::release_store(&_do_async_processing_of_cpu_time_jfr_requests, wants);\n@@ -619,2 +619,2 @@\n-bool JfrThreadLocal::wants_is_thread_in_native_stackwalking() {\n-  return Atomic::load(&_wants_is_thread_in_native_stackwalking);\n+bool JfrThreadLocal::wants_async_processing_of_cpu_time_jfr_requests() {\n+  return Atomic::load(&_do_async_processing_of_cpu_time_jfr_requests);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-  volatile bool _wants_is_thread_in_native_stackwalking;\n+  volatile bool _do_async_processing_of_cpu_time_jfr_requests;\n@@ -395,2 +395,2 @@\n-  void set_wants_is_thread_in_native_stackwalking(bool wants);\n-  bool wants_is_thread_in_native_stackwalking();\n+  void set_do_async_processing_of_cpu_time_jfr_requests(bool wants);\n+  bool wants_async_processing_of_cpu_time_jfr_requests();\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}