{"files":[{"patch":"@@ -967,1 +967,1 @@\n-    throttle=\"true\" thread=\"false\" experimental=\"true\">\n+    throttle=\"true\" thread=\"false\" experimental=\"true\" startTime=\"false\">\n@@ -976,1 +976,1 @@\n-    thread=\"false\" stackTrace=\"false\" startTime=\"true\" experimental=\"true\">\n+    thread=\"false\" stackTrace=\"false\" startTime=\"false\" experimental=\"true\">\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -71,1 +71,2 @@\n-JfrCPUTimeTraceQueue::JfrCPUTimeTraceQueue(u4 capacity) : _capacity(capacity), _head(0), _lost_samples(0) {\n+JfrCPUTimeTraceQueue::JfrCPUTimeTraceQueue(u4 capacity) :\n+  _capacity(capacity), _head(0), _lost_samples(0), _first_native_request_index(-1) {\n@@ -163,0 +164,8 @@\n+void JfrCPUTimeTraceQueue::set_first_native_request_index(s4 index) {\n+  Atomic::release_store(&_first_native_request_index, index);\n+}\n+\n+s4 JfrCPUTimeTraceQueue::first_native_request_index() const {\n+  return Atomic::load_acquire(&_first_native_request_index);\n+}\n+\n@@ -257,1 +266,1 @@\n-    tl->disable_cpu_time_jfr_queue();\n+    tl->deallocate_cpu_time_jfr_queue();\n@@ -359,15 +368,2 @@\n-  JfrCPUTimeSampleRequest& request = queue.at(queue.size() - 1);\n-  \/\/ find the first that is equal\n-  \/\/ idea: this ensures that the frames happened in native\n-  \/\/ maybe we can wrap this in #ifdef ASSERT if first_index is always 0\n-  s4 first_index = queue.size() - 1;\n-  for (s4 i = queue.size() - 1; i >= 0; i--) {\n-    if (queue.at(i)._request == request._request) {\n-      first_index = i;\n-    } else {\n-      break;\n-    }\n-  }\n-  assert(first_index == 0, \"invariant\");\n-\n-  \/\/ now obtain the single stack trace\n+  s4 first_index = queue.first_native_request_index();\n+  assert(first_index >= 0, \"invariant\");\n@@ -377,1 +373,0 @@\n-    const JfrTicks now = JfrTicks::now();\n@@ -383,1 +378,1 @@\n-      JfrCPUTimeThreadSampling::send_empty_event(request._request._sample_ticks, now, tid, request._cpu_time_period);\n+      JfrCPUTimeThreadSampling::send_empty_event(request._request._sample_ticks, tid, request._cpu_time_period);\n@@ -386,1 +381,1 @@\n-      JfrCPUTimeThreadSampling::send_event(request._request._sample_ticks, now, sid, tid, request._cpu_time_period, false);\n+      JfrCPUTimeThreadSampling::send_event(request._request._sample_ticks, sid, tid, request._cpu_time_period, false);\n@@ -389,0 +384,1 @@\n+  queue.set_first_native_request_index(-1);\n@@ -399,1 +395,1 @@\n-void JfrCPUTimeThreadSampling::send_empty_event(const JfrTicks &start_time, const JfrTicks &end_time, traceid tid, Tickspan cpu_time_period) {\n+void JfrCPUTimeThreadSampling::send_empty_event(const JfrTicks &start_time, traceid tid, Tickspan cpu_time_period) {\n@@ -403,1 +399,0 @@\n-  event.set_endtime(end_time);\n@@ -414,1 +409,1 @@\n-void JfrCPUTimeThreadSampling::send_event(const JfrTicks &start_time, const JfrTicks &end_time, traceid sid, traceid tid, Tickspan cpu_time_period, bool biased) {\n+void JfrCPUTimeThreadSampling::send_event(const JfrTicks &start_time, traceid sid, traceid tid, Tickspan cpu_time_period, bool biased) {\n@@ -418,1 +413,0 @@\n-  event.set_endtime(end_time);\n@@ -570,0 +564,1 @@\n+  JfrCPUTimeTraceQueue& queue = tl->cpu_time_jfr_queue();\n@@ -572,1 +567,1 @@\n-      tl->cpu_time_jfr_queue().increment_lost_samples();\n+      queue.increment_lost_samples();\n@@ -577,1 +572,1 @@\n-    tl->cpu_time_jfr_queue().increment_lost_samples();\n+    queue.increment_lost_samples();\n@@ -588,1 +583,1 @@\n-  if (tl->cpu_time_jfr_queue().enqueue(request)) {\n+  if (queue.enqueue(request)) {\n@@ -592,1 +587,1 @@\n-    tl->cpu_time_jfr_queue().increment_lost_samples();\n+    queue.increment_lost_samples();\n@@ -596,1 +591,1 @@\n-    tl->cpu_time_jfr_queue().size() > tl->cpu_time_jfr_queue().capacity() * 2 \/ 3) {\n+      queue.size() > queue.capacity() * 2 \/ 3) {\n@@ -600,0 +595,4 @@\n+    if (queue.first_native_request_index() == -1) {\n+      \/\/ this is the first native request, set the index\n+      queue.set_first_native_request_index(queue.size() - 1);\n+    }\n@@ -602,0 +601,1 @@\n+    queue.set_first_native_request_index(-1);\n@@ -689,1 +689,1 @@\n-        tl->disable_cpu_time_jfr_queue();\n+        tl->deallocate_cpu_time_jfr_queue();\n@@ -774,1 +774,1 @@\n-void JfrCPUTimeThreadSampling::send_empty_event(const JfrTicks& start_time, const JfrTicks& end_time, traceid tid, Tickspan cpu_time_period) {\n+void JfrCPUTimeThreadSampling::send_empty_event(const JfrTicks& start_time, traceid tid, Tickspan cpu_time_period) {\n@@ -777,1 +777,1 @@\n-void JfrCPUTimeThreadSampling::send_event(const JfrTicks& start_time, const JfrTicks& end_time, traceid sid, traceid tid, Tickspan cpu_time_period, bool biased) {\n+void JfrCPUTimeThreadSampling::send_event(const JfrTicks& start_time, traceid sid, traceid tid, Tickspan cpu_time_period, bool biased) {\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.cpp","additions":32,"deletions":32,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -61,0 +61,4 @@\n+  \/\/ index of the first request of the thread in native state\n+  \/\/ -1 if no native request is in the queue\n+  volatile s4 _first_native_request_index;\n+\n@@ -96,0 +100,4 @@\n+\n+  void set_first_native_request_index(s4 index);\n+\n+  s4 first_native_request_index() const;\n@@ -126,2 +134,2 @@\n-  static void send_empty_event(const JfrTicks& start_time, const JfrTicks& end_time, traceid tid, Tickspan cpu_time_period);\n-  static void send_event(const JfrTicks& start_time, const JfrTicks& end_time, traceid sid, traceid tid, Tickspan cpu_time_period, bool biased);\n+  static void send_empty_event(const JfrTicks& start_time, traceid tid, Tickspan cpu_time_period);\n+  static void send_event(const JfrTicks& start_time, traceid sid, traceid tid, Tickspan cpu_time_period, bool biased);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.hpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -313,1 +313,1 @@\n-    JfrCPUTimeThreadSampling::send_empty_event(request._request._sample_ticks, now, tid, request._cpu_time_period);\n+    JfrCPUTimeThreadSampling::send_empty_event(request._request._sample_ticks, tid, request._cpu_time_period);\n@@ -322,1 +322,1 @@\n-      JfrCPUTimeThreadSampling::send_empty_event(request._request._sample_ticks, now, tid, request._cpu_time_period);\n+      JfrCPUTimeThreadSampling::send_empty_event(request._request._sample_ticks, tid, request._cpu_time_period);\n@@ -330,1 +330,1 @@\n-  JfrCPUTimeThreadSampling::send_event(request._request._sample_ticks, now, sid, tid, request._cpu_time_period, biased);\n+  JfrCPUTimeThreadSampling::send_event(request._request._sample_ticks, sid, tid, request._cpu_time_period, biased);\n@@ -365,1 +365,1 @@\n-    queue.set_size(0);\n+    queue.clear();\n@@ -371,1 +371,0 @@\n-    queue.clear();\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampling.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -601,1 +601,1 @@\n-void JfrThreadLocal::disable_cpu_time_jfr_queue() {\n+void JfrThreadLocal::deallocate_cpu_time_jfr_queue() {\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -397,1 +397,1 @@\n-  void disable_cpu_time_jfr_queue();\n+  void deallocate_cpu_time_jfr_queue();\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -269,1 +269,0 @@\n-        settingValues.put(EventNames.CPUTimeSampleLoss + \"#threshold\", \"0 ns\");\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestActiveSettingEvent.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}