{"files":[{"patch":"@@ -40,2 +40,4 @@\n-  if (has_sample_request(jt)) {\n-    JfrThreadSampling::process_sample_request(jt);\n+  JfrThreadLocal* tl = jt->jfr_thread_local();\n+  bool has_cpu_time_sample_request = tl->has_cpu_time_jfr_requests();\n+  if (tl->has_sample_request() || has_cpu_time_sample_request) {\n+    JfrThreadSampling::process_sample_request(jt, has_cpu_time_sample_request);\n","filename":"src\/hotspot\/share\/jfr\/jfr.inline.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+ #include \"jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.hpp\"\n@@ -28,1 +29,0 @@\n-#include \"runtime\/orderAccess.hpp\"\n@@ -30,1 +30,0 @@\n-#include \"jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.hpp\"\n@@ -34,2 +33,0 @@\n-#include \"jfr\/recorder\/jfrRecorder.hpp\"\n-#include \"jfr\/recorder\/service\/jfrRecorderService.hpp\"\n@@ -568,5 +565,4 @@\n-    \/\/ we are in native code and the queue is getting full\n-    if (queue.size() == queue.capacity() * 2 \/ 3) {\n-      tl->set_do_async_processing_of_cpu_time_jfr_requests(true);\n-      JfrCPUTimeThreadSampling::trigger_async_processing_of_cpu_time_jfr_requests();\n-    }\n+      if (!tl->wants_async_processing_of_cpu_time_jfr_requests()) {\n+        tl->set_do_async_processing_of_cpu_time_jfr_requests(true);\n+        JfrCPUTimeThreadSampling::trigger_async_processing_of_cpu_time_jfr_requests();\n+      }\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.cpp","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -358,1 +358,1 @@\n-static void drain_all_enqueued_requests(const JfrTicks& now, JfrThreadLocal* tl, JavaThread* jt, Thread* current) {\n+static void drain_all_enqueued_requests(const JfrTicks& now, JfrThreadLocal* tl, JavaThread* jt, Thread* current, bool has_cpu_time_sample_request) {\n@@ -364,1 +364,1 @@\n-  if (tl->has_cpu_time_jfr_requests()) {\n+  if (has_cpu_time_sample_request) {\n@@ -445,1 +445,1 @@\n-void JfrThreadSampling::process_sample_request(JavaThread* jt) {\n+void JfrThreadSampling::process_sample_request(JavaThread* jt, bool has_cpu_time_sample_request) {\n@@ -468,1 +468,1 @@\n-  drain_all_enqueued_requests(now, tl, jt, jt);\n+  drain_all_enqueued_requests(now, tl, jt, jt, has_cpu_time_sample_request);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampling.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  static void process_sample_request(JavaThread* jt);\n+  static void process_sample_request(JavaThread* jt, bool has_cpu_time_sample_request);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampling.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-class ThreadCrashProtection;\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -276,1 +276,1 @@\n-     * Setting rate to 0 turns off the CPU time method sampler.\n+     * Setting rate to 0 turns off the CPU time sampler.\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVM.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}