{"files":[{"patch":"@@ -334,0 +334,1 @@\n+  \/\/ Required to prevent JFR from sampling through an ongoing safepoint\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -396,18 +396,0 @@\n-class SampleMonitor : public StackObj {\n- private:\n-  JfrThreadLocal* const _tl;\n-  Monitor* const _sample_monitor;\n- public:\n-  SampleMonitor(JfrThreadLocal* tl) : _tl(tl), _sample_monitor(tl->sample_monitor()) {\n-    assert(tl != nullptr, \"invariant\");\n-    assert(_sample_monitor != nullptr, \"invariant\");\n-    _sample_monitor->lock_without_safepoint_check();\n-  }\n-  ~SampleMonitor() {\n-    assert_lock_strong(_sample_monitor);\n-    _tl->set_sample_state(NO_SAMPLE);\n-    _sample_monitor->notify_all();\n-    _sample_monitor->unlock();\n-  }\n-};\n-\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampling.cpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"}]}