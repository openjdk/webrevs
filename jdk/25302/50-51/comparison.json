{"files":[{"patch":"@@ -40,4 +40,2 @@\n-  JfrThreadLocal* tl = jt->jfr_thread_local();\n-  bool has_cpu_time_sample_request = tl->has_cpu_time_jfr_requests();\n-  if (tl->has_sample_request() || has_cpu_time_sample_request) {\n-    JfrThreadSampling::process_sample_request(jt, has_cpu_time_sample_request);\n+  if (has_sample_request(jt)) {\n+    JfrThreadSampling::process_sample_request(jt);\n","filename":"src\/hotspot\/share\/jfr\/jfr.inline.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -174,0 +174,1 @@\n+  volatile bool _signal_handler_installed;\n@@ -230,1 +231,2 @@\n-  _warned_about_timer_creation_failure(false) {\n+  _warned_about_timer_creation_failure(false),\n+  _signal_handler_installed(false) {\n@@ -239,1 +241,2 @@\n-  if (thread->is_hidden_from_external_view() || thread->is_JfrRecorder_thread()) {\n+  if (thread->is_hidden_from_external_view() || thread->is_JfrRecorder_thread() ||\n+      !Atomic::load_acquire(&_signal_handler_installed)) {\n@@ -298,2 +301,4 @@\n-    stop_timer();\n-    stop_signal_handlers();\n+    if (Atomic::fetch_then_and(&_signal_handler_installed, false)) {\n+      stop_timer();\n+      stop_signal_handlers();\n+    }\n@@ -330,1 +335,0 @@\n-  MutexLocker tlock(Threads_lock);\n@@ -658,0 +662,1 @@\n+  Atomic::release_store(&_signal_handler_installed, true);\n@@ -716,1 +721,0 @@\n-  MutexLocker tlock(Threads_lock);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.cpp","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -387,1 +387,1 @@\n-static void drain_all_enqueued_requests(const JfrTicks& now, JfrThreadLocal* tl, JavaThread* jt, Thread* current, bool has_cpu_time_sample_request) {\n+static void drain_all_enqueued_requests(const JfrTicks& now, JfrThreadLocal* tl, JavaThread* jt, Thread* current) {\n@@ -392,1 +392,1 @@\n-  if (has_cpu_time_sample_request) {\n+  if (tl->has_cpu_time_jfr_requests()) {\n@@ -462,1 +462,1 @@\n-void JfrThreadSampling::process_sample_request(JavaThread* jt, bool has_cpu_time_sample_request) {\n+void JfrThreadSampling::process_sample_request(JavaThread* jt) {\n@@ -489,1 +489,1 @@\n-  drain_all_enqueued_requests(now, tl, jt, jt, has_cpu_time_sample_request);\n+  drain_all_enqueued_requests(now, tl, jt, jt);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampling.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-  static void process_sample_request(JavaThread* jt, bool has_cpu_time_sample_request);\n+  static void process_sample_request(JavaThread* jt);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampling.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}