{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-#include \"metaprogramming\/logical.hpp\"\n@@ -35,0 +34,2 @@\n+#include <type_traits>\n+\n@@ -106,1 +107,1 @@\n-          ENABLE_IF(Conjunction<std::is_same<T0, Ts>...>::value)>\n+           ENABLE_IF(std::conjunction_v<std::is_same<T0, Ts>...>)>\n","filename":"src\/hotspot\/share\/gc\/shared\/workerUtils.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_METAPROGRAMMING_LOGICAL_HPP\n-#define SHARE_METAPROGRAMMING_LOGICAL_HPP\n-\n-\/\/ Stand-ins for C++17 logical operations on types.\n-\n-#include <type_traits>\n-\n-\/\/ Stand-in for C++17 std::bool_constant<value>.\n-template<bool Value>\n-using BoolConstant = std::integral_constant<bool, Value>;\n-\n-\/\/ Stand-in for C++17 std::conjunction<T...>\n-template<typename... T>\n-struct Conjunction : public std::true_type {};\n-\n-template<typename T1>\n-struct Conjunction<T1> : public T1 {};\n-\n-template<typename T1, typename... T>\n-struct Conjunction<T1, T...> :\n-  public std::conditional_t<bool(T1::value), Conjunction<T...>, T1>\n-{};\n-\n-\/\/ Stand-in for C++17 std::disjunction<T...>.\n-template<typename... T>\n-struct Disjunction : public std::false_type {};\n-\n-template<typename T1>\n-struct Disjunction<T1> : public T1 {};\n-\n-template<typename T1, typename... T>\n-struct Disjunction<T1, T...> :\n-  public std::conditional_t<bool(T1::value), T1, Disjunction<T...>>\n-{};\n-\n-\/\/ Stand-in for C++17 std::negation<T>.\n-template<typename T>\n-using Negation = BoolConstant<!bool(T::value)>;\n-\n-#endif \/\/ SHARE_METAPROGRAMMING_LOGICAL_HPP\n","filename":"src\/hotspot\/share\/metaprogramming\/logical.hpp","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -1,90 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"metaprogramming\/logical.hpp\"\n-#include <type_traits>\n-\n-class TestBoolConstant {\n-  static_assert(BoolConstant<true>::value, \"true\");\n-  static_assert(!BoolConstant<false>::value, \"false\");\n-};\n-\n-class TestConjunction {\n-  class A : public std::true_type {};\n-  class B : public std::true_type {};\n-  class C : public std::false_type {};\n-  class D : public std::false_type {};\n-\n-  static_assert(Conjunction<>::value, \"nullary value\");\n-\n-  static_assert(Conjunction<A>::value, \"true value\");\n-  static_assert(std::is_base_of<A, Conjunction<A>>::value, \"true type\");\n-\n-  static_assert(!Conjunction<C>::value, \"false value\");\n-  static_assert(std::is_base_of<C, Conjunction<C>>::value, \"false type\");\n-\n-  static_assert(Conjunction<A, B>::value, \"true\/true value\");\n-  static_assert(std::is_base_of<B, Conjunction<A, B>>::value, \"true\/true type\");\n-\n-  static_assert(!Conjunction<A, C>::value, \"true\/false value\");\n-  static_assert(std::is_base_of<C, Conjunction<A, C>>::value, \"true\/false type\");\n-\n-  static_assert(!Conjunction<C, A>::value, \"false\/true value\");\n-  static_assert(std::is_base_of<C, Conjunction<C, A>>::value, \"false\/true type\");\n-\n-  static_assert(!Conjunction<C, D>::value, \"false\/false value\");\n-  static_assert(std::is_base_of<C, Conjunction<C, D>>::value, \"false\/false type\");\n-};\n-\n-class TestDisjunction {\n-  class A : public std::true_type {};\n-  class B : public std::true_type {};\n-  class C : public std::false_type {};\n-  class D : public std::false_type {};\n-\n-  static_assert(!Disjunction<>::value, \"nullary value\");\n-\n-  static_assert(Disjunction<A>::value, \"true value\");\n-  static_assert(std::is_base_of<A, Disjunction<A>>::value, \"true type\");\n-\n-  static_assert(!Disjunction<C>::value, \"false value\");\n-  static_assert(std::is_base_of<C, Disjunction<C>>::value, \"false type\");\n-\n-  static_assert(Disjunction<A, B>::value, \"true\/true value\");\n-  static_assert(std::is_base_of<A, Disjunction<A, B>>::value, \"true\/true type\");\n-\n-  static_assert(Disjunction<A, C>::value, \"true\/false value\");\n-  static_assert(std::is_base_of<A, Disjunction<A, C>>::value, \"true\/false type\");\n-\n-  static_assert(Disjunction<C, A>::value, \"false\/true value\");\n-  static_assert(std::is_base_of<A, Disjunction<C, A>>::value, \"false\/true type\");\n-\n-  static_assert(!Disjunction<C, D>::value, \"false\/false value\");\n-  static_assert(std::is_base_of<D, Disjunction<C, D>>::value, \"false\/false type\");\n-};\n-\n-class TestNegation {\n-  static_assert(Negation<std::false_type>::value, \"false -> true\");\n-  static_assert(!Negation<std::true_type>::value, \"true -> false\");\n-};\n","filename":"test\/hotspot\/gtest\/metaprogramming\/test_logical.cpp","additions":0,"deletions":90,"binary":false,"changes":90,"status":"deleted"}]}