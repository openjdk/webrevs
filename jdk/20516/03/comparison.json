{"files":[{"patch":"@@ -36,0 +36,1 @@\n+#include \"runtime\/globals_extension.hpp\"\n@@ -38,0 +39,1 @@\n+#include \"utilities\/formatBuffer.hpp\"\n@@ -44,0 +46,1 @@\n+bool CDSConfig::_old_cds_flags_used = false;\n@@ -328,0 +331,79 @@\n+\n+#define CHECK_ALIAS(f) check_flag_alias(FLAG_IS_DEFAULT(f), #f)\n+\n+void CDSConfig::check_flag_alias(bool alias_is_default, const char* alias_name) {\n+  if (_old_cds_flags_used && !alias_is_default) {\n+    vm_exit_during_initialization(err_msg(\"Option %s cannot be used at the same time with \"\n+                                          \"-Xshare:on, -Xshare:auto, -Xshare:off, -Xshare:dump, \"\n+                                          \"DumpLoadedClassList, SharedClassListFile, or SharedArchiveFile\",\n+                                          alias_name));\n+  }\n+}\n+\n+void CDSConfig::check_flag_aliases() {\n+  if (!FLAG_IS_DEFAULT(DumpLoadedClassList) ||\n+      !FLAG_IS_DEFAULT(SharedClassListFile) ||\n+      !FLAG_IS_DEFAULT(SharedArchiveFile)) {\n+    _old_cds_flags_used = true;\n+  }\n+\n+  CHECK_ALIAS(AOTCache);\n+  CHECK_ALIAS(AOTConfiguration);\n+  CHECK_ALIAS(AOTMode);\n+\n+  if (FLAG_IS_DEFAULT(AOTCache) && FLAG_IS_DEFAULT(AOTConfiguration) && FLAG_IS_DEFAULT(AOTMode)) {\n+    \/\/ Aliases not used.\n+    return;\n+  }\n+\n+  if (FLAG_IS_DEFAULT(AOTMode) || strcmp(AOTMode, \"auto\") == 0 || strcmp(AOTMode, \"on\") == 0) {\n+    if (!FLAG_IS_DEFAULT(AOTConfiguration)) {\n+      vm_exit_during_initialization(\"AOTConfiguration can only be used with -XX:AOTMode=record or -XX:AOTMode=create\");\n+    }\n+\n+    if (!FLAG_IS_DEFAULT(AOTCache)) {\n+      assert(FLAG_IS_DEFAULT(SharedArchiveFile), \"already checked\");\n+      FLAG_SET_ERGO(SharedArchiveFile, AOTCache);\n+    }\n+\n+    UseSharedSpaces = true;\n+    if (FLAG_IS_DEFAULT(AOTMode) || (strcmp(AOTMode, \"auto\") == 0)) {\n+      RequireSharedSpaces = false;\n+    } else {\n+      assert(strcmp(AOTMode, \"on\") == 0, \"already checked\");\n+      RequireSharedSpaces = true;\n+    }\n+  } else if (strcmp(AOTMode, \"off\") == 0) {\n+    UseSharedSpaces = false;\n+    RequireSharedSpaces = false;\n+  } else {\n+    \/\/ AOTMode is record or create\n+    if (FLAG_IS_DEFAULT(AOTConfiguration)) {\n+      vm_exit_during_initialization(err_msg(\"-XX:AOTMode=%s cannot be used without setting AOTConfiguration\", AOTMode));\n+    }\n+\n+    if (strcmp(AOTMode, \"record\") == 0) {\n+      if (!FLAG_IS_DEFAULT(AOTCache)) {\n+        vm_exit_during_initialization(\"AOTCache must not be specified when using -XX:AOTMode=record\");\n+      }\n+\n+      assert(FLAG_IS_DEFAULT(DumpLoadedClassList), \"already checked\");\n+      FLAG_SET_ERGO(DumpLoadedClassList, AOTConfiguration);\n+      UseSharedSpaces = false;\n+      RequireSharedSpaces = false;\n+    } else {\n+      assert(strcmp(AOTMode, \"create\") == 0, \"checked by AOTModeConstraintFunc\");\n+      if (FLAG_IS_DEFAULT(AOTCache)) {\n+        vm_exit_during_initialization(\"AOTCache must be specified when using -XX:AOTMode=create\");\n+      }\n+\n+      assert(FLAG_IS_DEFAULT(SharedClassListFile), \"already checked\");\n+      FLAG_SET_ERGO(SharedClassListFile, AOTConfiguration);\n+      assert(FLAG_IS_DEFAULT(SharedArchiveFile), \"already checked\");\n+      FLAG_SET_ERGO(SharedArchiveFile, AOTCache);\n+\n+      CDSConfig::enable_dumping_static_archive();\n+    }\n+  }\n+}\n+\n@@ -329,0 +411,2 @@\n+  check_flag_aliases();\n+\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":84,"deletions":0,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+\n+  static bool  _old_cds_flags_used;\n@@ -50,0 +52,3 @@\n+  static void check_flag_alias(bool alias_is_default, const char* alias_name);\n+  static void check_flag_aliases();\n+\n@@ -60,0 +65,1 @@\n+  static void set_old_cds_flags_used() { CDS_ONLY(_old_cds_flags_used = true); }\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -97,0 +97,15 @@\n+                                                                            \\\n+  \/*========== New \"AOT\" flags =========================================*\/  \\\n+  \/* These are aliases of -Xshare:dump, -XX:SharedArchiveFile=..., etc. *\/  \\\n+  \/* See CDSConfig::check_flag_aliases().                               *\/  \\\n+                                                                            \\\n+  product(ccstr, AOTMode, nullptr,                                          \\\n+          \"Specifies how AOTCache should be created or used. Valid values \" \\\n+          \"are: off, record, create, auto, on; the default is auto\")        \\\n+          constraint(AOTModeConstraintFunc, AtParse)                        \\\n+                                                                            \\\n+  product(ccstr, AOTConfiguration, nullptr,                                 \\\n+          \"Configuration information used by CreateAOTCache\")               \\\n+                                                                            \\\n+  product(ccstr, AOTCache, nullptr,                                         \\\n+          \"Cache for improving start up and warm up\")                       \\\n","filename":"src\/hotspot\/share\/cds\/cds_globals.hpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+#include \"runtime\/globals_extension.hpp\"\n@@ -72,3 +73,7 @@\n-    char errmsg[JVM_MAXPATHLEN];\n-    os::lasterror(errmsg, JVM_MAXPATHLEN);\n-    vm_exit_during_initialization(\"Loading classlist failed\", errmsg);\n+    char reason[JVM_MAXPATHLEN];\n+    os::lasterror(reason, JVM_MAXPATHLEN);\n+    vm_exit_during_initialization(err_msg(\"Loading %s %s failed\",\n+                                          FLAG_IS_DEFAULT(AOTConfiguration) ?\n+                                          \"classlist\" : \"AOTConfiguration file\",\n+                                          file),\n+                                  reason);\n","filename":"src\/hotspot\/share\/cds\/classListParser.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -672,0 +672,7 @@\n+\n+  if (AOTMode != nullptr && strcmp(AOTMode, \"create\") == 0) {\n+    \/\/ We can't return to the JLI launcher, as it will try to run the main class, but\n+    \/\/ the main class is not specified when -XX:AOTMode=create is used.\n+    tty->print_cr(\"AOTCache creation is complete: %s\", AOTCache);\n+    vm_exit(0);\n+  }\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2538,0 +2538,1 @@\n+      CDSConfig::set_old_cds_flags_used();\n@@ -2542,0 +2543,1 @@\n+      CDSConfig::set_old_cds_flags_used();\n@@ -2547,0 +2549,1 @@\n+      CDSConfig::set_old_cds_flags_used();\n@@ -2551,0 +2554,1 @@\n+      CDSConfig::set_old_cds_flags_used();\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -313,0 +313,11 @@\n+  const JVMTypedFlagLimit<ccstr>* constraint = (const JVMTypedFlagLimit<ccstr>*)JVMFlagLimit::get_constraint(flag);\n+  if (constraint != nullptr && constraint->phase() <= JVMFlagLimit::validating_phase()) {\n+    bool verbose = JVMFlagLimit::verbose_checks_needed() | (origin == JVMFlagOrigin::ERGONOMIC);\n+    JVMFlag::Error err = ((JVMFlagConstraintFunc_ccstr)constraint->constraint_func())(*value, verbose);\n+    if (err != JVMFlag::SUCCESS) {\n+      if (origin == JVMFlagOrigin::ERGONOMIC) {\n+        fatal(\"FLAG_SET_ERGO cannot be used to set an invalid value for %s\", flag->name());\n+      }\n+      return err;\n+    }\n+  }\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagAccess.cpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,15 @@\n+JVMFlag::Error AOTModeConstraintFunc(ccstr value, bool verbose) {\n+  if (strcmp(value, \"off\") != 0 &&\n+      strcmp(value, \"record\") != 0 &&\n+      strcmp(value, \"create\") != 0 &&\n+      strcmp(value, \"auto\") != 0 &&\n+      strcmp(value, \"on\")) {\n+    JVMFlag::printError(verbose,\n+                        \"Unrecognized value %s for AOTMode. Must be one of the following: \"\n+                        \"off, record, create, auto, on\\n\",\n+                        value);\n+    return JVMFlag::VIOLATES_CONSTRAINT;\n+  }\n+\n+  return JVMFlag::SUCCESS;\n+}\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsRuntime.cpp","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+  f(ccstr,  AOTModeConstraintFunc)                    \\\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsRuntime.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,190 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary \"AOT\" aliases for traditional CDS command-line options\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @build Hello\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar hello.jar Hello\n+ * @run driver AOTFlags\n+ *\/\n+\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class AOTFlags {\n+    static String appJar = ClassFileInstaller.getJarPath(\"hello.jar\");\n+    static String aotConfigFile = \"hello.aotconfig\";\n+    static String aotCacheFile = \"hello.aot\";\n+    static String helloClass = \"Hello\";\n+\n+    public static void main(String[] args) throws Exception {\n+        positiveTests();\n+        negativeTests();\n+    }\n+\n+    static void positiveTests() throws Exception {\n+        \/\/ (1) Training Run\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-cp\", appJar, helloClass);\n+\n+        OutputAnalyzer out = CDSTestUtils.executeAndLog(pb, \"train\");\n+        out.shouldContain(\"Hello World\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/ (2) Assembly Phase\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-Xlog:cds\",\n+            \"-cp\", appJar);\n+        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n+        out.shouldContain(\"Dumping shared data to file:\");\n+        out.shouldMatch(\"cds.*hello[.]aot\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/ (3) Production Run with AOTCache\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-Xlog:cds\",\n+            \"-cp\", appJar, helloClass);\n+        out = CDSTestUtils.executeAndLog(pb, \"prod\");\n+        out.shouldContain(\"Opened archive hello.aot.\");\n+        out.shouldContain(\"Hello World\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/ (4) AOTMode=off\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"--show-version\",\n+            \"-Xlog:cds\",\n+            \"-XX:AOTMode=off\",\n+            \"-cp\", appJar, helloClass);\n+        out = CDSTestUtils.executeAndLog(pb, \"prod\");\n+        out.shouldNotContain(\", sharing\");\n+        out.shouldNotContain(\"Opened archive hello.aot.\");\n+        out.shouldContain(\"Hello World\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/ (5) AOTMode=auto\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"--show-version\",\n+            \"-Xlog:cds\",\n+            \"-XX:AOTMode=auto\",\n+            \"-cp\", appJar, helloClass);\n+        out = CDSTestUtils.executeAndLog(pb, \"prod\");\n+        out.shouldContain(\", sharing\");\n+        out.shouldContain(\"Opened archive hello.aot.\");\n+        out.shouldContain(\"Hello World\");\n+        out.shouldHaveExitValue(0);\n+    }\n+\n+    static void negativeTests() throws Exception {\n+        \/\/ (1) Mixing old and new options\n+        String mixOldNewErrSuffix = \" cannot be used at the same time with -Xshare:on, -Xshare:auto, \"\n+            + \"-Xshare:off, -Xshare:dump, DumpLoadedClassList, SharedClassListFile, \"\n+            + \"or SharedArchiveFile\";\n+\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-Xshare:off\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-cp\", appJar, helloClass);\n+\n+        OutputAnalyzer out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"Option AOTConfiguration\" + mixOldNewErrSuffix);\n+        out.shouldNotHaveExitValue(0);\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:SharedArchiveFile=\" + aotCacheFile,\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-cp\", appJar, helloClass);\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"Option AOTCache\" + mixOldNewErrSuffix);\n+        out.shouldNotHaveExitValue(0);\n+\n+        \/\/ (2) Use AOTConfiguration without AOTMode\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"AOTConfiguration can only be used with -XX:AOTMode=record or -XX:AOTMode=create\");\n+        out.shouldNotHaveExitValue(0);\n+\n+        \/\/ (3) Use AOTMode without AOTConfiguration\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"-XX:AOTMode=record cannot be used without setting AOTConfiguration\");\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"-XX:AOTMode=create cannot be used without setting AOTConfiguration\");\n+        out.shouldNotHaveExitValue(0);\n+\n+        \/\/ (4) Bad AOTMode\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=foo\",\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"Unrecognized value foo for AOTMode. Must be one of the following: off, record, create, auto, on\");\n+        out.shouldNotHaveExitValue(0);\n+\n+        \/\/ (5) AOTCache specified with -XX:AOTMode=record\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"AOTCache must not be specified when using -XX:AOTMode=record\");\n+        out.shouldNotHaveExitValue(0);\n+\n+        \/\/ (5) AOTCache not specified with -XX:AOTMode=create\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"AOTCache must be specified when using -XX:AOTMode=create\");\n+        out.shouldNotHaveExitValue(0);\n+\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/AOTFlags.java","additions":190,"deletions":0,"binary":false,"changes":190,"status":"added"}]}