{"files":[{"patch":"@@ -70,4 +70,2 @@\n-    MemorySegment segment;\n-    private final long baseAddress;\n-    private long curOffset;\n-    private final int capacity;\n+    private final MemorySegment segment;\n+    private int curOffset;\n@@ -77,3 +75,1 @@\n-        baseAddress = segment.address();\n-        curOffset = 0L;\n-        capacity = numBytes;\n+        curOffset = 0;\n@@ -93,1 +89,1 @@\n-        return baseAddress;\n+        return segment.address();\n@@ -102,1 +98,1 @@\n-        return capacity;\n+        return (int)segment.byteSize();\n@@ -106,1 +102,1 @@\n-        return (int)(capacity - curOffset);\n+        return (capacity() - curOffset);\n@@ -110,1 +106,1 @@\n-        return (int)(curOffset);\n+        return curOffset;\n@@ -113,2 +109,2 @@\n-    public final void position(long numBytes) {\n-        curOffset = numBytes;\n+    public final void position(int bytePos) {\n+        curOffset = bytePos;\n@@ -118,1 +114,1 @@\n-        curOffset = 0L;\n+        curOffset = 0;\n@@ -121,1 +117,1 @@\n-    public final RenderBuffer skip(long numBytes) {\n+    public final RenderBuffer skip(int numBytes) {\n@@ -142,4 +138,2 @@\n-            int offsetInBytes = offset * SIZEOF_BYTE;\n-            int lengthInBytes = length * SIZEOF_BYTE;\n-            MemorySegment.copy(x, offsetInBytes, segment, JAVA_BYTE, curOffset, length);\n-            position(position() + lengthInBytes);\n+            MemorySegment.copy(x, offset, segment, JAVA_BYTE, curOffset, length);\n+            position(position() + length * SIZEOF_BYTE);\n@@ -173,4 +167,2 @@\n-            int offsetInBytes = offset * SIZEOF_SHORT;\n-            int lengthInBytes = length * SIZEOF_SHORT;\n-            MemorySegment.copy(x, offsetInBytes, segment, JAVA_SHORT, curOffset, length);\n-            position(position() + lengthInBytes);\n+            MemorySegment.copy(x, offset, segment, JAVA_SHORT, curOffset, length);\n+            position(position() + length * SIZEOF_SHORT);\n@@ -191,1 +183,1 @@\n-        \/\/ assert (baseAddress + pos % SIZEOF_INT == 0);\n+        \/\/ assert (getAddress() + pos % SIZEOF_INT == 0);\n@@ -210,4 +202,2 @@\n-            int offsetInBytes = offset * SIZEOF_INT;\n-            int lengthInBytes = length * SIZEOF_INT;\n-            MemorySegment.copy(x, offsetInBytes, segment, JAVA_INT, curOffset, length);\n-            position(position() + lengthInBytes);\n+            MemorySegment.copy(x, offset, segment, JAVA_INT, curOffset, length);\n+            position(position() + length * SIZEOF_INT);\n@@ -241,4 +231,2 @@\n-            int offsetInBytes = offset * SIZEOF_FLOAT;\n-            int lengthInBytes = length * SIZEOF_FLOAT;\n-            MemorySegment.copy(x, offsetInBytes, segment, JAVA_FLOAT, curOffset, length);\n-            position(position() + lengthInBytes);\n+            MemorySegment.copy(x, offset, segment, JAVA_FLOAT, curOffset, length);\n+            position(position() + length * SIZEOF_FLOAT);\n@@ -272,4 +260,2 @@\n-            int offsetInBytes = offset * SIZEOF_LONG;\n-            int lengthInBytes = length * SIZEOF_LONG;\n-            MemorySegment.copy(x, offsetInBytes, segment, JAVA_LONG, curOffset, length);\n-            position(position() + lengthInBytes);\n+            MemorySegment.copy(x, offset, segment, JAVA_LONG, curOffset, length);\n+            position(position() + length * SIZEOF_LONG);\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/pipe\/RenderBuffer.java","additions":22,"deletions":36,"binary":false,"changes":58,"status":"modified"}]}