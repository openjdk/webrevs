{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -788,1 +788,2 @@\n-          \"Move predicates out of loops based on profiling data. \"          \\\n+          \"Move checks with an uncommon trap out of loops based on \"        \\\n+          \"profiling data. \"                                                \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4301,5 +4301,7 @@\n-  if (UseLoopPredicate && UseProfiledLoopPredicate && predicates.profiled_loop_predicate_block()->is_non_empty()) {\n-    tty->print(\" profile_predicated\");\n-  }\n-  if (UseLoopPredicate && predicates.loop_predicate_block()->is_non_empty()) {\n-    tty->print(\" predicated\");\n+  if (UseLoopPredicate) {\n+    if (UseProfiledLoopPredicate && predicates.profiled_loop_predicate_block()->is_non_empty()) {\n+      tty->print(\" profile_predicated\");\n+    }\n+    if (predicates.loop_predicate_block()->is_non_empty()) {\n+      tty->print(\" predicated\");\n+    }\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1522,1 +1522,1 @@\n-    public static final String PARSE_PREDICATE_LOOP = PREFIX + \"PARSE_PREDICATE_LOOP\" + POSTFIX;\n+    public static final String LOOP_PARSE_PREDICATE = PREFIX + \"LOOP_PARSE_PREDICATE\" + POSTFIX;\n@@ -1524,1 +1524,1 @@\n-        parsePredicateNodes(PARSE_PREDICATE_LOOP, \"Loop\");\n+        parsePredicateNodes(LOOP_PARSE_PREDICATE, \"Loop\");\n@@ -1527,1 +1527,1 @@\n-    public static final String PARSE_PREDICATE_LOOP_LIMIT_CHECK = PREFIX + \"PARSE_PREDICATE_LOOP_LIMIT_CHECK\" + POSTFIX;\n+    public static final String LOOP_LIMIT_CHECK_PARSE_PREDICATE = PREFIX + \"LOOP_LIMIT_CHECK_PARSE_PREDICATE\" + POSTFIX;\n@@ -1529,1 +1529,1 @@\n-        parsePredicateNodes(PARSE_PREDICATE_LOOP_LIMIT_CHECK, \"Loop Limit Check\");\n+        parsePredicateNodes(LOOP_LIMIT_CHECK_PARSE_PREDICATE, \"Loop Limit Check\");\n@@ -1532,1 +1532,1 @@\n-    public static final String PARSE_PREDICATE_PROFILED_LOOP = PREFIX + \"PARSE_PROFILED_PREDICATE_LOOP\" + POSTFIX;\n+    public static final String PROFILED_LOOP_PARSE_PREDICATE = PREFIX + \"PROFILED_LOOP_PARSE_PREDICATE\" + POSTFIX;\n@@ -1534,1 +1534,1 @@\n-        parsePredicateNodes(PARSE_PREDICATE_PROFILED_LOOP, \"Profiled Loop\");\n+        parsePredicateNodes(PROFILED_LOOP_PARSE_PREDICATE, \"Profiled Loop\");\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-    static final int WARMUP = 10_000;\n@@ -41,1 +40,1 @@\n-    static final int min = 3;\n+    static final int MIN = 3;\n@@ -47,0 +46,1 @@\n+        TestFramework.runWithFlags(\"-XX:-UseProfiledLoopPredicate\");\n@@ -51,4 +51,2 @@\n-        for (int i = 0; i < WARMUP; i++) {\n-            int res = test(true);\n-            Asserts.assertEQ(res, ((SIZE - 1)*SIZE-min*(min+1))\/ 2);\n-        }\n+        int res = test(true);\n+        Asserts.assertEQ(res, ((SIZE - 1) * SIZE - MIN * (MIN + 1)) \/ 2);\n@@ -72,3 +70,2 @@\n-    @IR(counts = { IRNode.PARSE_PREDICATE_LOOP, \"1\",\n-                   IRNode.PARSE_PREDICATE_PROFILED_LOOP, \"1\" },\n-        phase = CompilePhase.AFTER_PARSING,\n+    @IR(counts = { IRNode.LOOP_PARSE_PREDICATE, \"1\",\n+                   IRNode.PROFILED_LOOP_PARSE_PREDICATE, \"1\" },\n@@ -77,3 +74,2 @@\n-    @IR(failOn = { IRNode.PARSE_PREDICATE_LOOP,\n-                   IRNode.PARSE_PREDICATE_PROFILED_LOOP },\n-        phase = CompilePhase.AFTER_PARSING,\n+    @IR(failOn = { IRNode.LOOP_PARSE_PREDICATE,\n+                   IRNode.PROFILED_LOOP_PARSE_PREDICATE },\n@@ -81,0 +77,4 @@\n+    @IR(counts = { IRNode.LOOP_PARSE_PREDICATE, \"1\" },\n+        failOn = { IRNode.PROFILED_LOOP_PARSE_PREDICATE },\n+        applyIfAnd = { \"UseLoopPredicate\", \"true\",\n+                       \"UseProfiledLoopPredicate\", \"false\" })\n@@ -86,1 +86,1 @@\n-                if (arr[i] > min) {\n+                if (arr[i] > MIN) {\n","filename":"test\/hotspot\/jtreg\/compiler\/predicates\/TestDisabledLoopPredicates.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"}]}