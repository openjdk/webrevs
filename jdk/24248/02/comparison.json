{"files":[{"patch":"@@ -788,1 +788,2 @@\n-          \"Move predicates out of loops based on profiling data\")           \\\n+          \"Move predicates out of loops based on profiling data. \"          \\\n+          \"Requires UseLoopPredicate to be turned on (default).\")           \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4085,3 +4085,3 @@\n-  }\n-  if (UseProfiledLoopPredicate) {\n-    add_parse_predicate(Deoptimization::Reason_profile_predicate, nargs);\n+    if (UseProfiledLoopPredicate) {\n+      add_parse_predicate(Deoptimization::Reason_profile_predicate, nargs);\n+    }\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1090,3 +1090,3 @@\n-    }\n-    if (UseProfiledLoopPredicate) {\n-      add_parse_predicate(Deoptimization::Reason_profile_predicate, inner_head, outer_ilt, cloned_sfpt);\n+      if (UseProfiledLoopPredicate) {\n+        add_parse_predicate(Deoptimization::Reason_profile_predicate, inner_head, outer_ilt, cloned_sfpt);\n+      }\n@@ -4301,1 +4301,1 @@\n-  if (UseProfiledLoopPredicate && predicates.profiled_loop_predicate_block()->is_non_empty()) {\n+  if (UseLoopPredicate && UseProfiledLoopPredicate && predicates.profiled_loop_predicate_block()->is_non_empty()) {\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3800,0 +3800,7 @@\n+#ifdef COMPILER2\n+  if (!FLAG_IS_DEFAULT(UseLoopPredicate) && !UseLoopPredicate && UseProfiledLoopPredicate) {\n+    warning(\"Disabling UseProfiledLoopPredicate since UseLoopPredicate is turned off.\");\n+    FLAG_SET_ERGO(UseProfiledLoopPredicate, false);\n+  }\n+#endif \/\/ COMPILER2\n+\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1522,0 +1522,15 @@\n+    public static final String PARSE_PREDICATE_LOOP = PREFIX + \"PARSE_PREDICATE_LOOP\" + POSTFIX;\n+    static {\n+        parsePredicateNodes(PARSE_PREDICATE_LOOP, \"Loop\");\n+    }\n+\n+    public static final String PARSE_PREDICATE_LOOP_LIMIT_CHECK = PREFIX + \"PARSE_PREDICATE_LOOP_LIMIT_CHECK\" + POSTFIX;\n+    static {\n+        parsePredicateNodes(PARSE_PREDICATE_LOOP_LIMIT_CHECK, \"Loop Limit Check\");\n+    }\n+\n+    public static final String PARSE_PREDICATE_PROFILED_LOOP = PREFIX + \"PARSE_PROFILED_PREDICATE_LOOP\" + POSTFIX;\n+    static {\n+        parsePredicateNodes(PARSE_PREDICATE_PROFILED_LOOP, \"Profiled Loop\");\n+    }\n+\n@@ -2744,0 +2759,7 @@\n+    private static void parsePredicateNodes(String irNodePlaceholder, String label) {\n+        String regex = START + \"ParsePredicate\" + MID + \"#\" + label + \"[ ]*!jvms:\" + END;\n+        IR_NODE_MAPPINGS.put(irNodePlaceholder, new SinglePhaseRangeEntry(CompilePhase.AFTER_PARSING, regex,\n+                                                                          CompilePhase.AFTER_PARSING,\n+                                                                          CompilePhase.CCP1));\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package compiler.predicates;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @bug 8347449\n+ * @summary Test that profiled loop predicates are turned off if loop predicates are turned off\n+ * @library \/test\/lib \/\n+ * @run driver compiler.predicates.TestDisabledLoopPredicates\n+ *\/\n+\n+public class TestDisabledLoopPredicates {\n+    static final int WARMUP = 10_000;\n+    static final int SIZE = 100;\n+    static final int min = 3;\n+\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"-XX:+UseLoopPredicate\",\n+                                   \"-XX:+UseProfiledLoopPredicate\");\n+        TestFramework.runWithFlags(\"-XX:-UseLoopPredicate\");\n+    }\n+\n+    @Run(test = { \"test\" })\n+    private static void check() {\n+        for (int i = 0; i < WARMUP; i++) {\n+            int res = test(true);\n+            Asserts.assertEQ(res, ((SIZE - 1)*SIZE-min*(min+1))\/ 2);\n+        }\n+    }\n+\n+    @DontInline\n+    private static void blackhole(int i) {\n+    }\n+\n+    @DontInline\n+    private static int[] getArr() {\n+        int[] arr = new int[SIZE];\n+        for (int i = 0; i < SIZE; i++) {\n+            arr[i] = i;\n+        }\n+\n+        return arr;\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.PARSE_PREDICATE_LOOP, \"=1\",\n+                   IRNode.PARSE_PREDICATE_PROFILED_LOOP, \"1\" },\n+        phase = CompilePhase.AFTER_PARSING,\n+        applyIfAnd = { \"UseLoopPredicate\", \"true\",\n+                       \"UseProfiledLoopPredicate\", \"true\" })\n+    @IR(failOn = { IRNode.PARSE_PREDICATE_LOOP,\n+                   IRNode.PARSE_PREDICATE_PROFILED_LOOP },\n+        phase = CompilePhase.AFTER_PARSING,\n+        applyIf = { \"UseLoopPredicate\", \"false\" })\n+    public static int test(boolean cond) {\n+        int[] arr = getArr();\n+        int sum = 0;\n+        for (int i = 0; i < arr.length; i++) {\n+            if (cond) {\n+                if (arr[i] > min) {\n+                    sum += arr[i];\n+                }\n+            }\n+            blackhole(arr[i]);\n+        }\n+\n+        return sum;\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/compiler\/predicates\/TestDisabledLoopPredicates.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}