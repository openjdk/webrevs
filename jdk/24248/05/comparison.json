{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -241,1 +241,1 @@\n-          \"Generate a predicate to select fast\/slow loop versions\")         \\\n+          \"Move checks with uncommon trap out of loops.\")                   \\\n@@ -788,1 +788,3 @@\n-          \"Move predicates out of loops based on profiling data\")           \\\n+          \"Move checks with an uncommon trap out of loops based on \"        \\\n+          \"profiling data. \"                                                \\\n+          \"Requires UseLoopPredicate to be turned on (default).\")           \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -4085,3 +4085,3 @@\n-  }\n-  if (UseProfiledLoopPredicate) {\n-    add_parse_predicate(Deoptimization::Reason_profile_predicate, nargs);\n+    if (UseProfiledLoopPredicate) {\n+      add_parse_predicate(Deoptimization::Reason_profile_predicate, nargs);\n+    }\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -166,8 +166,6 @@\n-  if (UseLoopPredicate) {\n-    \/\/ Sync IdealKit and graphKit.\n-    gkit->sync_kit(*this);\n-    \/\/ Add Parse Predicates.\n-    gkit->add_parse_predicates(nargs);\n-    \/\/ Update IdealKit memory.\n-    sync_kit(gkit);\n-  }\n+  \/\/ Sync IdealKit and graphKit.\n+  gkit->sync_kit(*this);\n+  \/\/ Add Parse Predicates.\n+  gkit->add_parse_predicates(nargs);\n+  \/\/ Update IdealKit memory.\n+  sync_kit(gkit);\n","filename":"src\/hotspot\/share\/opto\/idealKit.cpp","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1090,3 +1090,3 @@\n-    }\n-    if (UseProfiledLoopPredicate) {\n-      add_parse_predicate(Deoptimization::Reason_profile_predicate, inner_head, outer_ilt, cloned_sfpt);\n+      if (UseProfiledLoopPredicate) {\n+        add_parse_predicate(Deoptimization::Reason_profile_predicate, inner_head, outer_ilt, cloned_sfpt);\n+      }\n@@ -4301,5 +4301,7 @@\n-  if (UseProfiledLoopPredicate && predicates.profiled_loop_predicate_block()->is_non_empty()) {\n-    tty->print(\" profile_predicated\");\n-  }\n-  if (UseLoopPredicate && predicates.loop_predicate_block()->is_non_empty()) {\n-    tty->print(\" predicated\");\n+  if (UseLoopPredicate) {\n+    if (UseProfiledLoopPredicate && predicates.profiled_loop_predicate_block()->is_non_empty()) {\n+      tty->print(\" profile_predicated\");\n+    }\n+    if (predicates.loop_predicate_block()->is_non_empty()) {\n+      tty->print(\" predicated\");\n+    }\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -3800,0 +3800,7 @@\n+#ifdef COMPILER2\n+  if (!FLAG_IS_DEFAULT(UseLoopPredicate) && !UseLoopPredicate && UseProfiledLoopPredicate) {\n+    warning(\"Disabling UseProfiledLoopPredicate since UseLoopPredicate is turned off.\");\n+    FLAG_SET_ERGO(UseProfiledLoopPredicate, false);\n+  }\n+#endif \/\/ COMPILER2\n+\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1522,0 +1522,15 @@\n+    public static final String LOOP_PARSE_PREDICATE = PREFIX + \"LOOP_PARSE_PREDICATE\" + POSTFIX;\n+    static {\n+        parsePredicateNodes(LOOP_PARSE_PREDICATE, \"Loop\");\n+    }\n+\n+    public static final String LOOP_LIMIT_CHECK_PARSE_PREDICATE = PREFIX + \"LOOP_LIMIT_CHECK_PARSE_PREDICATE\" + POSTFIX;\n+    static {\n+        parsePredicateNodes(LOOP_LIMIT_CHECK_PARSE_PREDICATE, \"Loop Limit Check\");\n+    }\n+\n+    public static final String PROFILED_LOOP_PARSE_PREDICATE = PREFIX + \"PROFILED_LOOP_PARSE_PREDICATE\" + POSTFIX;\n+    static {\n+        parsePredicateNodes(PROFILED_LOOP_PARSE_PREDICATE, \"Profiled Loop\");\n+    }\n+\n@@ -2744,0 +2759,7 @@\n+    private static void parsePredicateNodes(String irNodePlaceholder, String label) {\n+        String regex = START + \"ParsePredicate\" + MID + \"#\" + label + \"[ ]*!jvms:\" + END;\n+        IR_NODE_MAPPINGS.put(irNodePlaceholder, new SinglePhaseRangeEntry(CompilePhase.AFTER_PARSING, regex,\n+                                                                          CompilePhase.AFTER_PARSING,\n+                                                                          CompilePhase.PHASEIDEALLOOP_ITERATIONS));\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package compiler.predicates;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @bug 8347449\n+ * @summary Test that profiled loop predicates are turned off if loop predicates are turned off\n+ * @library \/test\/lib \/\n+ * @run driver compiler.predicates.TestDisabledLoopPredicates\n+ *\/\n+\n+public class TestDisabledLoopPredicates {\n+    static final int SIZE = 100;\n+    static final int MIN = 3;\n+\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"-XX:+UseLoopPredicate\",\n+                                   \"-XX:+UseProfiledLoopPredicate\");\n+        TestFramework.runWithFlags(\"-XX:-UseLoopPredicate\");\n+        TestFramework.runWithFlags(\"-XX:-UseProfiledLoopPredicate\");\n+    }\n+\n+    @Run(test = \"test\")\n+    private static void check() {\n+        int res = test(true);\n+        Asserts.assertEQ(res, ((SIZE - 1) * SIZE - MIN * (MIN + 1)) \/ 2);\n+    }\n+\n+    @DontInline\n+    private static void blackhole(int i) {\n+    }\n+\n+    @DontInline\n+    private static int[] getArr() {\n+        int[] arr = new int[SIZE];\n+        for (int i = 0; i < SIZE; i++) {\n+            arr[i] = i;\n+        }\n+\n+        return arr;\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOOP_PARSE_PREDICATE, \"1\",\n+                   IRNode.PROFILED_LOOP_PARSE_PREDICATE, \"1\" },\n+        applyIfAnd = { \"UseLoopPredicate\", \"true\",\n+                       \"UseProfiledLoopPredicate\", \"true\" })\n+    @IR(failOn = { IRNode.LOOP_PARSE_PREDICATE,\n+                   IRNode.PROFILED_LOOP_PARSE_PREDICATE },\n+        applyIf = { \"UseLoopPredicate\", \"false\" })\n+    @IR(counts = { IRNode.LOOP_PARSE_PREDICATE, \"1\" },\n+        failOn = { IRNode.PROFILED_LOOP_PARSE_PREDICATE },\n+        applyIfAnd = { \"UseLoopPredicate\", \"true\",\n+                       \"UseProfiledLoopPredicate\", \"false\" })\n+    public static int test(boolean cond) {\n+        int[] arr = getArr();\n+        int sum = 0;\n+        for (int i = 0; i < arr.length; i++) {\n+            if (cond) {\n+                if (arr[i] > MIN) {\n+                    sum += arr[i];\n+                }\n+            }\n+            blackhole(arr[i]);\n+        }\n+\n+        return sum;\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/compiler\/predicates\/TestDisabledLoopPredicates.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}