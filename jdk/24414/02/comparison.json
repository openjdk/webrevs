{"files":[{"patch":"@@ -83,0 +83,1 @@\n+        return UseZvbb;\n@@ -85,0 +86,3 @@\n+        if (bt != T_INT && bt != T_LONG) {\n+          return false;\n+        }\n@@ -3416,21 +3420,0 @@\n-\/\/\n-\/\/ Following rotate instruct's are shared by vectorization (in SLP, superword.cpp) and Vector API.\n-\/\/\n-\/\/ Rotate behaviour in vectorization is defined by java API, which includes:\n-\/\/  1. Integer.rorateRight, Integer.rorateLeft.\n-\/\/     `rotation by any multiple of 32 is a no-op, so all but the last five bits of the rotation distance can be ignored`.\n-\/\/  2. Long.rorateRight, Long.rorateLeft.\n-\/\/     `rotation by any multiple of 64 is a no-op, so all but the last six bits of the rotation distance can be ignored`.\n-\/\/\n-\/\/ Rotate behaviour in Vector API is defined as below, e.g.\n-\/\/  1. For Byte ROR, `a ROR b` is: (byte)(((((byte)a) & 0xFF) >>> (b & 7)) | ((((byte)a) & 0xFF) << (8 - (b & 7))))\n-\/\/  2. For Short ROR, `a ROR b` is: (short)(((((short)a) & 0xFFFF) >>> (b & 15)) | ((((short)a) & 0xFFFF) << (16 - (b & 15))))\n-\/\/  3. For Integer ROR, `a ROR b` is: Integer.rotateRight(a, ((int)b))\n-\/\/  4. For Long ROR, `a ROR b` is: Long.rotateRight(a, ((int)b))\n-\/\/\n-\/\/ Basically, the behaviour between vectorization and Vector API is the same for Long and Integer, except that Vector API\n-\/\/ also supports Byte and Short rotation. But we can still share the intrinsics between vectorization and Vector API.\n-\/\/\n-\/\/ NOTE: As vror.vi encodes 6-bits immediate rotate amount, which is different from other vector-immediate instructions,\n-\/\/       implementation of vector rotation for long and other types can be unified.\n-\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":4,"deletions":21,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,2 @@\n- * Copyright (c) 2022, Loongson Technology Co. Ltd. All rights reserved.\n+ * Copyright (c) 2022, 2025 Loongson Technology Co. Ltd. All rights reserved.\n+ * Copyright (c) 2025, Rivos Inc. All rights reserved.\n@@ -26,1 +27,1 @@\n- * @bug 8286847\n+ * @bug 8286847 8353600\n@@ -29,2 +30,2 @@\n- * @library \/test\/lib\n- * @run main\/othervm -XX:-TieredCompilation -XX:CompileCommand=compileonly,TestRotateByteAndShortVector::testRotate* -Xbatch TestRotateByteAndShortVector\n+ * @library \/test\/lib \/\n+ * @run main\/othervm TestRotateByteAndShortVector\n@@ -35,0 +36,1 @@\n+import compiler.lib.ir_framework.*;\n@@ -52,21 +54,1 @@\n-        System.out.println(\"warmup\");\n-        warmup();\n-\n-        System.out.println(\"Testing...\");\n-        runRotateLeftByteTest();\n-        runRotateRightByteTest();\n-        runRotateLeftShortTest();\n-        runRotateRightShortTest();\n-\n-        System.out.println(\"PASSED\");\n-    }\n-\n-    static void warmup() {\n-        random.nextBytes(arrByte);\n-        randomShorts();\n-        for (int i = 0; i < ITERS; i++) {\n-            testRotateLeftByte(rolByte, arrByte, i);\n-            testRotateRightByte(rorByte, arrByte, i);\n-            testRotateLeftShort(rolShort, arrShort, i);\n-            testRotateRightShort(rorShort, arrShort, i);\n-        }\n+        TestFramework.run();\n@@ -81,0 +63,1 @@\n+    @Run(test = { \"testRotateLeftByte\" })\n@@ -94,0 +77,1 @@\n+    @Run(test = { \"testRotateRightByte\" })\n@@ -107,0 +91,1 @@\n+    @Run(test = { \"testRotateLeftShort\" })\n@@ -120,0 +105,1 @@\n+    @Run(test = { \"testRotateRightShort\" })\n@@ -133,0 +119,6 @@\n+    \/\/ NOTE: currently, there is no platform supporting RotateLeftV\/RotateRightV intrinsic.\n+    \/\/ If there is some implementation, it could probably in a wrong way which is different\n+    \/\/ from what java language spec expects.\n+    @Test\n+    @IR(failOn = { IRNode.ROTATE_LEFT_V })\n+    @IR(failOn = { IRNode.ROTATE_RIGHT_V })\n@@ -139,0 +131,3 @@\n+    @Test\n+    @IR(failOn = { IRNode.ROTATE_LEFT_V })\n+    @IR(failOn = { IRNode.ROTATE_RIGHT_V })\n@@ -145,0 +140,3 @@\n+    @Test\n+    @IR(failOn = { IRNode.ROTATE_LEFT_V })\n+    @IR(failOn = { IRNode.ROTATE_RIGHT_V })\n@@ -151,0 +149,3 @@\n+    @Test\n+    @IR(failOn = { IRNode.ROTATE_LEFT_V })\n+    @IR(failOn = { IRNode.ROTATE_RIGHT_V })\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestRotateByteAndShortVector.java","additions":26,"deletions":25,"binary":false,"changes":51,"status":"modified"}]}