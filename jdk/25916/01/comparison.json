{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,0 @@\n-import jdk.internal.jimage.ImageLocation;\n-import jdk.internal.jimage.ImageReader;\n-\n@@ -30,0 +27,4 @@\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.FileVisitor;\n@@ -32,1 +33,6 @@\n-import java.util.Arrays;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.spi.FileSystemProvider;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n@@ -42,11 +48,15 @@\n-        return Arrays.stream(reader.getEntryNames())\n-                     .filter(name -> name.endsWith(\".class\"))\n-                     .filter(name -> !name.endsWith(\"module-info.class\"))\n-                     .map(ClassPathJimageEntry::toFileName)\n-                     .map(Utils::fileNameToClassName);\n-    }\n-\n-    private static String toFileName(String name) {\n-        final char nameSeparator = '\/';\n-        assert name.charAt(0) == nameSeparator : name;\n-        return name.substring(name.indexOf(nameSeparator, 1) + 1);\n+        Path modulesRoot = jrtFileSystem.getPath(\"\/modules\");\n+        List<String> classNames = new ArrayList<>();\n+        FileVisitor<Path> collectClassNames = new SimpleFileVisitor<>() {\n+            @Override\n+            public FileVisitResult visitFile(Path path, BasicFileAttributes attrs) {\n+                classNames.add(Utils.fileNameToClassName(modulesRoot.relativize(path).toString()));\n+                return FileVisitResult.CONTINUE;\n+            }\n+        };\n+        try {\n+            Files.walkFileTree(modulesRoot, collectClassNames);\n+        } catch (IOException e) {\n+            throw new Error(e);\n+        }\n+        return classNames.stream();\n@@ -63,1 +73,1 @@\n-            reader.close();\n+            jrtFileSystem.close();\n@@ -72,1 +82,1 @@\n-    private final ImageReader reader;\n+    private final FileSystem jrtFileSystem;\n@@ -80,1 +90,5 @@\n-            reader = ImageReader.open(root);\n+            jrtFileSystem = FileSystemProvider.installedProviders().stream()\n+                    .filter(p -> \"jrt\".equals(p.getScheme()))\n+                    .findFirst()\n+                    .orElseThrow(() -> new Error(\"cannot find JRT filesystem for \" + root))\n+                    .newFileSystem(root, Map.of());\n@@ -88,5 +102,9 @@\n-        String resource = Utils.classNameToFileName(name);\n-        for (String m : reader.getModuleNames()) {\n-            ImageLocation location = reader.findLocation(m, resource);\n-            if (location != null) {\n-                return reader.getResource(location);\n+        \/\/ Relative path to search for inside each \/modules\/<module> directory.\n+        Path resourcePath = jrtFileSystem.getPath(Utils.classNameToFileName(name));\n+        Path modulesRoot = jrtFileSystem.getPath(\"\/modules\");\n+        try (DirectoryStream<Path> modules = Files.newDirectoryStream(modulesRoot)) {\n+            for (Path module : modules) {\n+                Path p = module.resolve(resourcePath);\n+                if (Files.isRegularFile(p)) {\n+                    return Files.readAllBytes(p);\n+                }\n@@ -94,0 +112,2 @@\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n@@ -97,1 +117,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/testlibrary\/ctw\/src\/sun\/hotspot\/tools\/ctw\/ClassPathJimageEntry.java","additions":44,"deletions":25,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -189,1 +189,1 @@\n-     * Converts the filename to classname.\n+     * Converts the {@code \/}-separated filename to its corresponding class name.\n@@ -192,1 +192,1 @@\n-     * @return corresponding classname\n+     * @return corresponding class name\n@@ -203,0 +203,6 @@\n+    \/**\n+     * Converts a fully qualified class name to a {@code \/}-separated filename.\n+     *\n+     * @param classname fully qualified class name to convert\n+     * @return corresponding filename\n+     *\/\n","filename":"test\/hotspot\/jtreg\/testlibrary\/ctw\/src\/sun\/hotspot\/tools\/ctw\/Utils.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"}]}