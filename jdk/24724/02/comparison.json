{"files":[{"patch":"@@ -5208,2 +5208,3 @@\n-void igv_print() {\n-  Compile::current()->igv_print_method_to_file();\n+void igv_print(void* sp, void* fp, void* pc) {\n+  frame fr(sp, fp, pc);\n+  Compile::current()->igv_print_method_to_file(nullptr, false, &fr);\n@@ -5213,2 +5214,3 @@\n-void igv_print(const char* phase_name) {\n-  Compile::current()->igv_print_method_to_file(phase_name);\n+void igv_print(const char* phase_name, void* sp, void* fp, void* pc) {\n+  frame fr(sp, fp, pc);\n+  Compile::current()->igv_print_method_to_file(phase_name, false, &fr);\n@@ -5220,1 +5222,2 @@\n-void igv_print(bool network) {\n+void igv_print(bool network, void* sp, void* fp, void* pc) {\n+  frame fr(sp, fp, pc);\n@@ -5222,1 +5225,1 @@\n-    Compile::current()->igv_print_method_to_network();\n+    Compile::current()->igv_print_method_to_network(nullptr, &fr);\n@@ -5224,1 +5227,1 @@\n-    Compile::current()->igv_print_method_to_file();\n+    Compile::current()->igv_print_method_to_file(nullptr, false, &fr);\n@@ -5229,1 +5232,2 @@\n-void igv_print(bool network, const char* phase_name) {\n+void igv_print(bool network, const char* phase_name, void* sp, void* fp, void* pc) {\n+  frame fr(sp, fp, pc);\n@@ -5231,1 +5235,1 @@\n-    Compile::current()->igv_print_method_to_network(phase_name);\n+    Compile::current()->igv_print_method_to_network(phase_name, &fr);\n@@ -5233,1 +5237,1 @@\n-    Compile::current()->igv_print_method_to_file(phase_name);\n+    Compile::current()->igv_print_method_to_file(phase_name, false, &fr);\n@@ -5245,2 +5249,3 @@\n-void igv_append() {\n-  Compile::current()->igv_print_method_to_file(\"Debug\", true);\n+void igv_append(void* sp, void* fp, void* pc) {\n+  frame fr(sp, fp, pc);\n+  Compile::current()->igv_print_method_to_file(nullptr, true, &fr);\n@@ -5250,2 +5255,3 @@\n-void igv_append(const char* phase_name) {\n-  Compile::current()->igv_print_method_to_file(phase_name, true);\n+void igv_append(const char* phase_name, void* sp, void* fp, void* pc) {\n+  frame fr(sp, fp, pc);\n+  Compile::current()->igv_print_method_to_file(phase_name, true, &fr);\n@@ -5254,1 +5260,1 @@\n-void Compile::igv_print_method_to_file(const char* phase_name, bool append) {\n+void Compile::igv_print_method_to_file(const char* phase_name, bool append, frame* fr) {\n@@ -5262,1 +5268,1 @@\n-  _debug_file_printer->print_graph(phase_name);\n+  _debug_file_printer->print_graph(phase_name, fr);\n@@ -5265,1 +5271,1 @@\n-void Compile::igv_print_method_to_network(const char* phase_name) {\n+void Compile::igv_print_method_to_network(const char* phase_name, frame* fr) {\n@@ -5268,1 +5274,1 @@\n-  igv_print_graph_to_network(phase_name, empty_list);\n+  igv_print_graph_to_network(phase_name, empty_list, fr);\n@@ -5271,1 +5277,1 @@\n-void Compile::igv_print_graph_to_network(const char* name, GrowableArray<const Node*>& visible_nodes) {\n+void Compile::igv_print_graph_to_network(const char* name, GrowableArray<const Node*>& visible_nodes, frame* fr) {\n@@ -5278,1 +5284,1 @@\n-  _debug_network_printer->print(name, C->root(), visible_nodes);\n+  _debug_network_printer->print(name, C->root(), visible_nodes, fr);\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":26,"deletions":20,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -677,1 +677,1 @@\n-      _igv_printer->print_graph(graph_name);\n+      _igv_printer->print_graph(graph_name, nullptr);\n@@ -681,3 +681,3 @@\n-  void igv_print_method_to_file(const char* phase_name = \"Debug\", bool append = false);\n-  void igv_print_method_to_network(const char* phase_name = \"Debug\");\n-  void igv_print_graph_to_network(const char* name, GrowableArray<const Node*>& visible_nodes);\n+  void igv_print_method_to_file(const char* phase_name = nullptr, bool append = false, frame* fr = nullptr);\n+  void igv_print_method_to_network(const char* phase_name = nullptr, frame* fr = nullptr);\n+  void igv_print_graph_to_network(const char* name, GrowableArray<const Node*>& visible_nodes, frame* fr);\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"runtime\/arguments.hpp\"\n@@ -32,0 +33,1 @@\n+#include \"utilities\/decoder.hpp\"\n@@ -52,0 +54,6 @@\n+const char *IdealGraphPrinter::COMPILATION_ARGUMENTS_PROPERTY = \"arguments\";\n+const char *IdealGraphPrinter::COMPILATION_MACHINE_PROPERTY = \"machine\";\n+const char *IdealGraphPrinter::COMPILATION_VM_VERSION_PROPERTY = \"vm\";\n+const char *IdealGraphPrinter::COMPILATION_DATE_TIME_PROPERTY = \"dateTime\";\n+const char *IdealGraphPrinter::COMPILATION_PROCESS_ID_PROPERTY = \"processId\";\n+const char *IdealGraphPrinter::COMPILATION_THREAD_ID_PROPERTY = \"threadId\";\n@@ -339,0 +347,34 @@\n+  stringStream args;\n+  Arguments::print_jvm_args_on(&args);\n+  print_prop(COMPILATION_ARGUMENTS_PROPERTY, args.freeze());\n+\n+  stringStream machine;\n+  buffer[0] = 0;\n+  os::print_summary_info(&machine, buffer, sizeof(buffer) - 1);\n+  print_prop(COMPILATION_MACHINE_PROPERTY, machine.freeze());\n+\n+  stringStream version;\n+  buffer[0] = 0;\n+  JDK_Version::current().to_string(buffer, sizeof(buffer) - 1);\n+  const char* runtime_name = JDK_Version::runtime_name() != nullptr ?\n+    JDK_Version::runtime_name() : \"\";\n+  const char* runtime_version = JDK_Version::runtime_version() != nullptr ?\n+    JDK_Version::runtime_version() : \"\";\n+  const char* vendor_version = JDK_Version::runtime_vendor_version() != nullptr ?\n+    JDK_Version::runtime_vendor_version() : \"\";\n+  const char* jdk_debug_level = VM_Version::printable_jdk_debug_level() != nullptr ?\n+    VM_Version::printable_jdk_debug_level() : \"\";\n+\n+  version.print_cr(\"%s%s%s (%s) (%sbuild %s)\", runtime_name,\n+                   (*vendor_version != '\\0') ? \" \" : \"\", vendor_version,\n+                   buffer, jdk_debug_level, runtime_version);\n+  print_prop(COMPILATION_VM_VERSION_PROPERTY, version.freeze());\n+\n+  stringStream time;\n+  buffer[0] = 0;\n+  os::print_date_and_time(&time, buffer, sizeof(buffer) - 1);\n+  print_prop(COMPILATION_DATE_TIME_PROPERTY, time.freeze());\n+\n+  print_prop(COMPILATION_PROCESS_ID_PROPERTY, os::current_process_id());\n+  print_prop(COMPILATION_THREAD_ID_PROPERTY, os::current_thread_id());\n+\n@@ -865,1 +907,50 @@\n-void IdealGraphPrinter::print_graph(const char* name) {\n+static bool skip_frame(const char* name) {\n+  return strstr(name, \"IdealGraphPrinter\") != nullptr ||\n+         strstr(name, \"Compile::print_method\") != nullptr ||\n+         strstr(name, \"Compile::igv_print_graph\") != nullptr ||\n+         strstr(name, \"PrintBFS\") != nullptr ||\n+         strstr(name, \"Node::dump_bfs\") != nullptr;\n+}\n+\n+static bool stop_frame_walk(const char* name) {\n+  return strstr(name, \"C2Compiler::compile_method\") != nullptr;\n+}\n+\n+void IdealGraphPrinter::print_stack(frame fr, outputStream* graph_name) {\n+  char buf[O_BUFLEN];\n+  Thread* _current = Thread::current_or_null();\n+  int count = 0;\n+  int frame = 0;\n+  while (count++ < StackPrintLimit && fr.pc() != nullptr) {\n+    int offset;\n+    buf[0] = '\\0';\n+    bool found = os::dll_address_to_function_name(fr.pc(), buf, sizeof(buf), &offset);\n+    if (!found || stop_frame_walk(buf)) {\n+      break;\n+    }\n+    if (!skip_frame(buf)) {\n+      stringStream frame_loc;\n+      frame_loc.print(\"%s\", buf);\n+      buf[0] = '\\0';\n+      int line_no;\n+      if (Decoder::get_source_info(fr.pc(), buf, sizeof(buf), &line_no, count != 1)) {\n+        frame_loc.print(\" (%s:%d)\", buf, line_no);\n+        if (graph_name != nullptr) {\n+          \/\/ Extract a debug graph name and return.\n+          graph_name->print(\"%s:%d\", buf, line_no);\n+          return;\n+        }\n+      }\n+      if (graph_name == nullptr) {\n+        \/\/ Print frame as IGV property and continue to the next frame.\n+        stringStream frame_number_str;\n+        frame_number_str.print(\"frame %d:\", frame);\n+        print_prop(frame_number_str.freeze(), frame_loc.freeze());\n+        frame++;\n+      }\n+    }\n+    fr = frame::next_frame(fr, _current);\n+  }\n+}\n+\n+void IdealGraphPrinter::print_graph(const char* name, frame* fr) {\n@@ -868,1 +959,1 @@\n-  print(name, (Node*) C->root(), empty_list);\n+  print(name, (Node*) C->root(), empty_list, fr);\n@@ -872,1 +963,1 @@\n-void IdealGraphPrinter::print(const char* name, Node* node, GrowableArray<const Node*>& visible_nodes) {\n+void IdealGraphPrinter::print(const char* name, Node* node, GrowableArray<const Node*>& visible_nodes, frame* fr) {\n@@ -876,0 +967,11 @@\n+  frame current = fr == nullptr ? os::current_frame() : *fr;\n+\n+  if (name == nullptr) {\n+    stringStream graph_name;\n+    print_stack(current, &graph_name);\n+    name = graph_name.freeze();\n+    if (strlen(name) == 0) {\n+      name = \"Debug\";\n+    }\n+  }\n+\n@@ -880,1 +982,1 @@\n-  print_attr(GRAPH_NAME_PROPERTY, (const char *)name);\n+  print_attr(GRAPH_NAME_PROPERTY, name);\n@@ -883,0 +985,4 @@\n+  head(PROPERTIES_ELEMENT);\n+  print_stack(current, nullptr);\n+  tail(PROPERTIES_ELEMENT);\n+\n","filename":"src\/hotspot\/share\/opto\/idealGraphPrinter.cpp","additions":110,"deletions":4,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -70,0 +70,6 @@\n+  static const char *COMPILATION_ARGUMENTS_PROPERTY;\n+  static const char *COMPILATION_MACHINE_PROPERTY;\n+  static const char *COMPILATION_VM_VERSION_PROPERTY;\n+  static const char *COMPILATION_DATE_TIME_PROPERTY;\n+  static const char *COMPILATION_PROCESS_ID_PROPERTY;\n+  static const char *COMPILATION_THREAD_ID_PROPERTY;\n@@ -113,0 +119,4 @@\n+  \/\/ Walk the native stack and print relevant C2 frames as IGV properties (if\n+  \/\/ graph_name == nullptr) or the graph name based on the highest C2 frame (if\n+  \/\/ graph_name != nullptr).\n+  void print_stack(frame fr, outputStream* graph_name);\n@@ -152,2 +162,2 @@\n-  void print_graph(const char* name);\n-  void print(const char* name, Node* root, GrowableArray<const Node*>& hidden_nodes);\n+  void print_graph(const char* name, frame* fr = nullptr);\n+  void print(const char* name, Node* root, GrowableArray<const Node*>& hidden_nodes, frame* fr = nullptr);\n","filename":"src\/hotspot\/share\/opto\/idealGraphPrinter.hpp","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1777,2 +1777,2 @@\n-  PrintBFS(const Node* start, const int max_distance, const Node* target, const char* options, outputStream* st)\n-  : _start(start), _max_distance(max_distance), _target(target), _options(options), _output(st),\n+  PrintBFS(const Node* start, const int max_distance, const Node* target, const char* options, outputStream* st, frame* fr)\n+    : _start(start), _max_distance(max_distance), _target(target), _options(options), _output(st), _frame(fr),\n@@ -1799,0 +1799,1 @@\n+  frame* _frame;\n@@ -2060,1 +2061,1 @@\n-      C->igv_print_graph_to_network(\"PrintBFS\", _print_list);\n+      C->igv_print_graph_to_network(nullptr, _print_list, _frame);\n@@ -2105,0 +2106,2 @@\n+  _output->print_cr(\"        (use preferably with dump_bfs(int, Node*, char*, void*, void*, void*)\");\n+  _output->print_cr(\"         to produce a C2 stack trace along with the graph dump, see examples below)\");\n@@ -2154,0 +2157,3 @@\n+    _output->print_cr(\"  find_node(741)->dump_bfs(7, find_node(741), \\\"c+A!\\\", $sp, $fp, $pc)\");\n+    _output->print_cr(\"    same as above, but printing the resulting subgraph\");\n+    _output->print_cr(\"    along with a C2 stack trace on IGV\");\n@@ -2412,2 +2418,2 @@\n-void Node::dump_bfs(const int max_distance, Node* target, const char* options, outputStream* st) const {\n-  PrintBFS bfs(this, max_distance, target, options, st);\n+void Node::dump_bfs(const int max_distance, Node* target, const char* options, outputStream* st, frame* fr) const {\n+  PrintBFS bfs(this, max_distance, target, options, st, fr);\n@@ -2422,0 +2428,6 @@\n+\/\/ Call this from debugger, with stack handling register arguments for IGV dumps.\n+void Node::dump_bfs(const int max_distance, Node* target, const char* options, void* sp, void* fp, void* pc) const {\n+  frame fr(sp, fp, pc);\n+  dump_bfs(max_distance, target, options, tty, &fr);\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1301,1 +1301,1 @@\n-  void dump_bfs(const int max_distance, Node* target, const char* options, outputStream* st) const;\n+  void dump_bfs(const int max_distance, Node* target, const char* options, outputStream* st, frame* fr = nullptr) const;\n@@ -1304,0 +1304,1 @@\n+  void dump_bfs(const int max_distance, Node* target, const char* options, void* sp, void* fp, void* pc) const;\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+## Regular JVM Execution\n+\n@@ -51,0 +53,46 @@\n+## Dumping Graphs From a Debugger\n+\n+The JVM provides some entry functions to dump graphs from a debugger such as\n+`gdb` or `rr`, see the different variants of `igv_print` and `igv_append` in\n+`compile.cpp`. In combination with the IGV network interface, these functions\n+enable a powerful interactive workflow where the user can simultaneously step\n+through C2's code and visualize the evolving Ideal graph. Note that, to produce\n+and print meaningful C2 stack traces, these functions take the stack pointer,\n+frame pointer, and program counter registers as arguments. These are usually\n+`$sp`, `$fp`, and `$pc`:\n+\n+```\n+(gdb) p igv_print(true, $sp, $fp, $pc)\n+Method printed over network stream to IGV\n+```\n+\n+but might be given different names on different platforms, see the output of\n+`p help()` for more information. A tip to further simplify the workflow in\n+`gdb` or `rr` is to create a user-defined command such as e.g.:\n+\n+```\n+define igv\n+  p igv_print(true, $sp, $fp, $pc)\n+end\n+```\n+\n+Another way to dump graphs interactively is through the `Node::dump_bfs`\n+functionality with the option `!` (run `p find_node(0)->dump_bfs(0,0,\"H\")` to\n+see the complete list of options). One of the versions of this function also\n+takes the three stack management registers to produce a C2 stack trace:\n+\n+```\n+(gdb) p find_node(3)->dump_bfs(0, 0, \"!\", $sp, $fp, $pc)\n+(...)\n+Method printed over network stream to IGV\n+```\n+\n+Again, user-defined debugger commands can be created for simplicity. For\n+example, to dump the current graph with a given node highlighted:\n+\n+```\n+define igv_node\n+  p find_node($arg0)->dump_bfs(0, 0, \"!\", $sp, $fp, $pc)\n+end\n+```\n+\n","filename":"src\/utils\/IdealGraphVisualizer\/README.md","additions":48,"deletions":0,"binary":false,"changes":48,"status":"modified"}]}