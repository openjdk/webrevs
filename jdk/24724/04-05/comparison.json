{"files":[{"patch":"@@ -5208,0 +5208,1 @@\n+\/\/ Use in debugger (gdb\/rr): p igv_print($sp, $fp, $pc).\n@@ -5222,0 +5223,1 @@\n+\/\/ Use in debugger (gdb\/rr): p igv_print(true, $sp, $fp, $pc).\n@@ -5231,1 +5233,2 @@\n-\/\/ Same as igv_print(bool network) above but with a specified phase name.\n+\/\/ Same as igv_print(bool network, ...) above but with a specified phase name.\n+\/\/ Use in debugger (gdb\/rr): p igv_print(true, \"MyPhase\", $sp, $fp, $pc).\n@@ -5249,0 +5252,1 @@\n+\/\/ Use in debugger (gdb\/rr): p igv_append($sp, $fp, $pc).\n@@ -5254,1 +5258,2 @@\n-\/\/ Same as igv_append() above but with a specified phase name.\n+\/\/ Same as igv_append(...) above but with a specified phase name.\n+\/\/ Use in debugger (gdb\/rr): p igv_append(\"MyPhase\", $sp, $fp, $pc).\n@@ -5260,1 +5265,1 @@\n-void Compile::igv_print_method_to_file(const char* phase_name, bool append, frame* fr) {\n+void Compile::igv_print_method_to_file(const char* phase_name, bool append, const frame* fr) {\n@@ -5271,1 +5276,1 @@\n-void Compile::igv_print_method_to_network(const char* phase_name, frame* fr) {\n+void Compile::igv_print_method_to_network(const char* phase_name, const frame* fr) {\n@@ -5277,1 +5282,1 @@\n-void Compile::igv_print_graph_to_network(const char* name, GrowableArray<const Node*>& visible_nodes, frame* fr) {\n+void Compile::igv_print_graph_to_network(const char* name, GrowableArray<const Node*>& visible_nodes, const frame* fr) {\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -681,3 +681,3 @@\n-  void igv_print_method_to_file(const char* phase_name = nullptr, bool append = false, frame* fr = nullptr);\n-  void igv_print_method_to_network(const char* phase_name = nullptr, frame* fr = nullptr);\n-  void igv_print_graph_to_network(const char* name, GrowableArray<const Node*>& visible_nodes, frame* fr);\n+  void igv_print_method_to_file(const char* phase_name = nullptr, bool append = false, const frame* fr = nullptr);\n+  void igv_print_method_to_network(const char* phase_name = nullptr, const frame* fr = nullptr);\n+  void igv_print_graph_to_network(const char* name, GrowableArray<const Node*>& visible_nodes, const frame* fr);\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+const char *IdealGraphPrinter::COMPILATION_CPU_FEATURES_PROPERTY = \"cpuFeatures\";\n@@ -356,0 +357,2 @@\n+  print_prop(COMPILATION_CPU_FEATURES_PROPERTY, VM_Version::features_string());\n+\n@@ -907,1 +910,3 @@\n-static bool skip_frame(const char* name) {\n+\/\/ Whether the stack walk should skip the given frame when producing a C2 stack\n+\/\/ trace. We consider IGV- and debugger-specific frames uninteresting.\n+static bool should_skip_frame(const char* name) {\n@@ -915,1 +920,5 @@\n-static bool stop_frame_walk(const char* name) {\n+\/\/ Whether the stack walk should be considered done when visiting a certain\n+\/\/ frame. The purpose of walking the stack is producing a C2 trace, so we\n+\/\/ consider all frames below (and including) C2Compiler::compile_method(..)\n+\/\/ uninteresting.\n+static bool should_end_stack_walk(const char* name) {\n@@ -919,1 +928,1 @@\n-void IdealGraphPrinter::print_stack(frame fr, outputStream* graph_name) {\n+void IdealGraphPrinter::print_stack(const frame* initial_frame, outputStream* graph_name) {\n@@ -921,2 +930,1 @@\n-  Thread* _current = Thread::current_or_null();\n-  int count = 0;\n+  frame fr = initial_frame == nullptr ? os::current_frame() : *initial_frame;\n@@ -924,1 +932,1 @@\n-  while (count++ < StackPrintLimit && fr.pc() != nullptr) {\n+  for (int count = 0; count < StackPrintLimit && fr.pc() != nullptr; count++) {\n@@ -928,1 +936,1 @@\n-    if (!found || stop_frame_walk(buf)) {\n+    if (!found || should_end_stack_walk(buf)) {\n@@ -931,1 +939,1 @@\n-    if (!skip_frame(buf)) {\n+    if (!should_skip_frame(buf)) {\n@@ -952,1 +960,1 @@\n-    fr = frame::next_frame(fr, _current);\n+    fr = frame::next_frame(fr, Thread::current_or_null());\n@@ -956,1 +964,1 @@\n-void IdealGraphPrinter::print_graph(const char* name, frame* fr) {\n+void IdealGraphPrinter::print_graph(const char* name, const frame* fr) {\n@@ -963,1 +971,1 @@\n-void IdealGraphPrinter::print(const char* name, Node* node, GrowableArray<const Node*>& visible_nodes, frame* fr) {\n+void IdealGraphPrinter::print(const char* name, Node* node, GrowableArray<const Node*>& visible_nodes, const frame* fr) {\n@@ -967,2 +975,0 @@\n-  frame current = fr == nullptr ? os::current_frame() : *fr;\n-\n@@ -971,1 +977,1 @@\n-    print_stack(current, &graph_name);\n+    print_stack(fr, &graph_name);\n@@ -986,1 +992,1 @@\n-  print_stack(current, nullptr);\n+  print_stack(fr, nullptr);\n","filename":"src\/hotspot\/share\/opto\/idealGraphPrinter.cpp","additions":21,"deletions":15,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -72,0 +72,1 @@\n+  static const char *COMPILATION_CPU_FEATURES_PROPERTY;\n@@ -122,1 +123,1 @@\n-  void print_stack(frame fr, outputStream* graph_name);\n+  void print_stack(const frame* initial_frame, outputStream* graph_name);\n@@ -162,2 +163,2 @@\n-  void print_graph(const char* name, frame* fr = nullptr);\n-  void print(const char* name, Node* root, GrowableArray<const Node*>& hidden_nodes, frame* fr = nullptr);\n+  void print_graph(const char* name, const frame* fr = nullptr);\n+  void print(const char* name, Node* root, GrowableArray<const Node*>& hidden_nodes, const frame* fr = nullptr);\n","filename":"src\/hotspot\/share\/opto\/idealGraphPrinter.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1777,1 +1777,1 @@\n-  PrintBFS(const Node* start, const int max_distance, const Node* target, const char* options, outputStream* st, frame* fr)\n+  PrintBFS(const Node* start, const int max_distance, const Node* target, const char* options, outputStream* st, const frame* fr)\n@@ -1799,1 +1799,1 @@\n-  frame* _frame;\n+  const frame* _frame;\n@@ -2418,1 +2418,1 @@\n-void Node::dump_bfs(const int max_distance, Node* target, const char* options, outputStream* st, frame* fr) const {\n+void Node::dump_bfs(const int max_distance, Node* target, const char* options, outputStream* st, const frame* fr) const {\n@@ -2429,0 +2429,1 @@\n+\/\/ Example: p find_node(741)->dump_bfs(7, find_node(741), \"c+A!\", $sp, $fp, $pc).\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1301,1 +1301,1 @@\n-  void dump_bfs(const int max_distance, Node* target, const char* options, outputStream* st, frame* fr = nullptr) const;\n+  void dump_bfs(const int max_distance, Node* target, const char* options, outputStream* st, const frame* fr = nullptr) const;\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}