{"files":[{"patch":"@@ -177,1 +177,0 @@\n-  DEBUG_ONLY(_used = false;)\n@@ -181,3 +180,2 @@\n-  if (mask_size() > small_mask_limit) {\n-    assert(!Thread::current()->resource_area()->contains((void*)_bit_mask[0]),\n-           \"The bit mask should be allocated from the C heap\");\n+  if (has_valid_mask() && mask_size() > small_mask_limit) {\n+    assert(_bit_mask[0] != 0, \"should have pointer to C heap\");\n@@ -405,1 +403,1 @@\n-void InterpreterOopMap::copy_from(OopMapCacheEntry* src) {\n+void InterpreterOopMap::copy_from(const OopMapCacheEntry* src) {\n@@ -408,1 +406,1 @@\n-  assert(!_used, \"InterpreterOopMap object can only be filled once\");\n+  assert(!has_valid_mask(), \"InterpreterOopMap object can only be filled once\");\n@@ -419,2 +417,1 @@\n-    memcpy((void *)_bit_mask, (void *)src->_bit_mask,\n-      mask_word_size() * BytesPerWord);\n+    memcpy(_bit_mask, src->_bit_mask, mask_word_size() * BytesPerWord);\n@@ -423,1 +420,0 @@\n-    assert(_bit_mask[0] != 0, \"bit mask was not allocated\");\n@@ -426,1 +422,0 @@\n-  DEBUG_ONLY(_used = true);\n","filename":"src\/hotspot\/share\/interpreter\/oopMapCache.cpp","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -92,3 +92,2 @@\n-  DEBUG_ONLY(bool _used;)\n-  int             _num_oops;\n-  intptr_t        _bit_mask[N];   \/\/ the bit mask if\n+  int            _num_oops;\n+  intptr_t       _bit_mask[N];    \/\/ the bit mask if\n@@ -136,1 +135,1 @@\n-  void copy_from(OopMapCacheEntry* src);\n+  void copy_from(const OopMapCacheEntry* src);\n","filename":"src\/hotspot\/share\/interpreter\/oopMapCache.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}