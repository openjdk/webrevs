{"files":[{"patch":"@@ -69,3 +69,0 @@\n-#ifdef ASSERT\n-    _resource_allocate_bit_mask = false;\n-#endif\n@@ -181,1 +178,1 @@\n-  _resource_allocate_bit_mask = true;\n+  _used = false;\n@@ -185,0 +182,8 @@\n+InterpreterOopMap::~InterpreterOopMap() {\n+  if (mask_size() > small_mask_limit) {\n+    assert(!Thread::current()->resource_area()->contains((void*)_bit_mask[0]),\n+           \"The bit mask should be allocated from the C heap\");\n+    FREE_C_HEAP_ARRAY(uintptr_t, _bit_mask[0]);\n+  }\n+}\n+\n@@ -403,4 +408,4 @@\n-  assert(_resource_allocate_bit_mask,\n-    \"Should not resource allocate the _bit_mask\");\n-  assert(from->has_valid_mask(),\n-    \"Cannot copy entry with an invalid mask\");\n+  \/\/ The expectation is that this InterpreterOopMap is a recently created\n+  \/\/ and empty. It is used to get a copy of a cached entry.\n+  assert(!_used, \"InterpreterOopMap object can only be filled once\");\n+  assert(from->has_valid_mask(), \"Cannot copy entry with an invalid mask\");\n@@ -419,11 +424,1 @@\n-    \/\/ The expectation is that this InterpreterOopMap is a recently created\n-    \/\/ and empty. It is used to get a copy of a cached entry.\n-    \/\/ If the bit mask has a value, it should be in the\n-    \/\/ resource area.\n-    assert(_bit_mask[0] == 0 ||\n-      Thread::current()->resource_area()->contains((void*)_bit_mask[0]),\n-      \"The bit mask should have been allocated from a resource area\");\n-    \/\/ Allocate the bit_mask from a Resource area for performance.  Allocating\n-    \/\/ from the C heap as is done for OopMapCache has a significant\n-    \/\/ performance impact.\n-    _bit_mask[0] = (uintptr_t) NEW_RESOURCE_ARRAY(uintptr_t, mask_word_size());\n+    _bit_mask[0] = (uintptr_t) NEW_C_HEAP_ARRAY(uintptr_t, mask_word_size(), mtClass);\n@@ -431,2 +426,1 @@\n-    memcpy((void*) _bit_mask[0], (void*) from->_bit_mask[0],\n-      mask_word_size() * BytesPerWord);\n+    memcpy((void*) _bit_mask[0], (void*) from->_bit_mask[0], mask_word_size() * BytesPerWord);\n@@ -434,0 +428,1 @@\n+  DEBUG_ONLY(_used = true);\n","filename":"src\/hotspot\/share\/interpreter\/oopMapCache.cpp","additions":16,"deletions":21,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-\/\/ bit_mask can fit into two words it is stored in\n+\/\/ bit_mask can fit into four words it is stored in\n@@ -43,2 +43,3 @@\n-\/\/ For InterpreterOopMap the bit_mask is allocated in\n-\/\/ a resource area for better performance.  InterpreterOopMap\n+\/\/ For InterpreterOopMap the bit_mask is allocated in the C heap\n+\/\/ to avoid issues with allocations from the resource area that have\n+\/\/ to live accross the oop closure (see 8335409). InterpreterOopMap\n@@ -92,1 +93,1 @@\n-  bool _resource_allocate_bit_mask;\n+  bool           _used;\n@@ -131,0 +132,1 @@\n+  ~InterpreterOopMap();\n@@ -135,1 +137,1 @@\n-  \/\/ in-line), allocate the space from a Resource area.\n+  \/\/ in-line), allocate the space from the C heap.\n","filename":"src\/hotspot\/share\/interpreter\/oopMapCache.hpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -950,1 +950,0 @@\n-  ResourceMark rm(thread);\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}