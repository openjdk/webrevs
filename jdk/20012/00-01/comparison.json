{"files":[{"patch":"@@ -177,3 +177,1 @@\n-#ifdef ASSERT\n-  _used = false;\n-#endif\n+  DEBUG_ONLY(_used = false;)\n@@ -407,2 +405,2 @@\n-void InterpreterOopMap::resource_copy(OopMapCacheEntry* from) {\n-  \/\/ The expectation is that this InterpreterOopMap is a recently created\n+void InterpreterOopMap::copy_from(OopMapCacheEntry* src) {\n+  \/\/ The expectation is that this InterpreterOopMap is recently created\n@@ -411,1 +409,1 @@\n-  assert(from->has_valid_mask(), \"Cannot copy entry with an invalid mask\");\n+  assert(src->has_valid_mask(), \"Cannot copy entry with an invalid mask\");\n@@ -413,5 +411,5 @@\n-  set_method(from->method());\n-  set_bci(from->bci());\n-  set_mask_size(from->mask_size());\n-  set_expression_stack_size(from->expression_stack_size());\n-  _num_oops = from->num_oops();\n+  set_method(src->method());\n+  set_bci(src->bci());\n+  set_mask_size(src->mask_size());\n+  set_expression_stack_size(src->expression_stack_size());\n+  _num_oops = src->num_oops();\n@@ -420,2 +418,2 @@\n-  if (from->mask_size() <= small_mask_limit) {\n-    memcpy((void *)_bit_mask, (void *)from->_bit_mask,\n+  if (src->mask_size() <= small_mask_limit) {\n+    memcpy((void *)_bit_mask, (void *)src->_bit_mask,\n@@ -426,1 +424,1 @@\n-    memcpy((void*) _bit_mask[0], (void*) from->_bit_mask[0], mask_word_size() * BytesPerWord);\n+    memcpy((void*) _bit_mask[0], (void*) src->_bit_mask[0], mask_word_size() * BytesPerWord);\n@@ -510,1 +508,1 @@\n-        entry_for->resource_copy(entry);\n+        entry_for->copy_from(entry);\n@@ -524,1 +522,1 @@\n-  entry_for->resource_copy(tmp);\n+  entry_for->copy_from(tmp);\n@@ -625,1 +623,1 @@\n-    entry->resource_copy(tmp);\n+    entry->copy_from(tmp);\n","filename":"src\/hotspot\/share\/interpreter\/oopMapCache.cpp","additions":15,"deletions":17,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -45,2 +45,2 @@\n-\/\/ to live accross the oop closure (see 8335409). InterpreterOopMap\n-\/\/ should only be created and deleted during same garbage collection.\n+\/\/ to live accross the oop closure. InterpreterOopMap should only be\n+\/\/ created and deleted during the same garbage collection.\n@@ -134,3 +134,3 @@\n-  \/\/ Copy the OopMapCacheEntry in parameter \"from\" into this\n-  \/\/ InterpreterOopMap.  If the _bit_mask[0] in \"from\" points to\n-  \/\/ allocated space (i.e., the bit mask was to large to hold\n+  \/\/ Copy the OopMapCacheEntry in parameter \"src\" into this\n+  \/\/ InterpreterOopMap.  If the _bit_mask[0] in \"src\" points to\n+  \/\/ allocated space (i.e., the bit mask was too large to hold\n@@ -138,1 +138,1 @@\n-  void resource_copy(OopMapCacheEntry* from);\n+  void copy_from(OopMapCacheEntry* src);\n","filename":"src\/hotspot\/share\/interpreter\/oopMapCache.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}