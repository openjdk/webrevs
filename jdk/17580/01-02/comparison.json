{"files":[{"patch":"@@ -35,5 +35,5 @@\n-    unsigned char* result = nullptr;\n-    check_jvmti_status(env,\n-        jvmti->Allocate(size, &result),\n-        \"Allocate failed\");\n-    return result;\n+  unsigned char* result = nullptr;\n+  check_jvmti_status(env,\n+    jvmti->Allocate(size, &result),\n+    \"Allocate failed\");\n+  return result;\n@@ -43,3 +43,3 @@\n-    check_jvmti_status(env,\n-        jvmti->Deallocate((unsigned char*)mem),\n-        \"Deallocate failed\");\n+  check_jvmti_status(env,\n+    jvmti->Deallocate((unsigned char*)mem),\n+    \"Deallocate failed\");\n@@ -50,10 +50,10 @@\n-    size_t len = strlen(str);\n-    if (len >=2 && str[0] == 'L' && str[len-1] == ';') {\n-        len -=2;\n-        memmove(str, str+1, len);\n-        str[len] = '\\0';\n-    }\n-    \/\/ Replace '\/' with '.'.\n-    for (char* pos = str; (pos = strchr(pos, '\/')) != nullptr; ) {\n-        *pos = '.';\n-    }\n+  size_t len = strlen(str);\n+  if (len >=2 && str[0] == 'L' && str[len-1] == ';') {\n+    len -=2;\n+    memmove(str, str+1, len);\n+    str[len] = '\\0';\n+  }\n+  \/\/ Replace '\/' with '.'.\n+  for (char* pos = str; (pos = strchr(pos, '\/')) != nullptr; ) {\n+    *pos = '.';\n+  }\n@@ -63,9 +63,9 @@\n-    enum {\n-       ACC_STATIC        = 0x0008,\n-    };\n-\n-    jint access_flags = 0;\n-    check_jvmti_status(env,\n-        jvmti->GetFieldModifiers(klass, fid, &access_flags),\n-        \"GetFieldModifiers failed\");\n-    return (access_flags & ACC_STATIC) != 0;\n+  enum {\n+   ACC_STATIC        = 0x0008,\n+  };\n+\n+  jint access_flags = 0;\n+  check_jvmti_status(env,\n+    jvmti->GetFieldModifiers(klass, fid, &access_flags),\n+    \"GetFieldModifiers failed\");\n+  return (access_flags & ACC_STATIC) != 0;\n@@ -75,11 +75,11 @@\n-    char* name = nullptr;\n-    char* sig = nullptr;\n-    check_jvmti_status(env,\n-        jvmti->GetFieldName(klass, fid, &name, &sig, nullptr),\n-        \"GetFieldName failed\");\n-\n-    if (strcmp(sig, \"I\") != 0) {\n-        printf(\"ERROR: field '%s' is not int ('%s')\\n\", name, sig);\n-        fflush(nullptr);\n-        fatal(env, \"unexpected field type\");\n-    }\n+  char* name = nullptr;\n+  char* sig = nullptr;\n+  check_jvmti_status(env,\n+    jvmti->GetFieldName(klass, fid, &name, &sig, nullptr),\n+    \"GetFieldName failed\");\n+\n+  if (strcmp(sig, \"I\") != 0) {\n+    printf(\"ERROR: field '%s' is not int ('%s')\\n\", name, sig);\n+    fflush(nullptr);\n+    fatal(env, \"unexpected field type\");\n+  }\n@@ -87,2 +87,2 @@\n-    deallocate(env, name);\n-    deallocate(env, sig);\n+  deallocate(env, name);\n+  deallocate(env, sig);\n@@ -115,3 +115,3 @@\n-    jclass klass;\n-    char* name;\n-    Klass* super_klass;\n+  jclass klass;\n+  char* name;\n+  Klass* super_klass;\n@@ -119,3 +119,3 @@\n-    struct Field {\n-        jfieldID id;\n-        char* name;\n+  struct Field {\n+    jfieldID id;\n+    char* name;\n@@ -123,3 +123,3 @@\n-        \/\/ Field value for static fields (0 for instance fields).\n-        \/\/ All fields in the test classes are 'int'.\n-        jint value;\n+    \/\/ Field value for static fields (0 for instance fields).\n+    \/\/ All fields in the test classes are 'int'.\n+    jint value;\n@@ -127,2 +127,2 @@\n-        void init(JNIEnv* env, jclass klass, jfieldID fid);\n-    };\n+    void init(JNIEnv* env, jclass klass, jfieldID fid);\n+  };\n@@ -130,4 +130,4 @@\n-    \/\/ Fields of the class and its superclasses\n-    \/\/ as described in jvmtiHeapReferenceInfoField spec.\n-    Field* fields;\n-    jint field_count;\n+  \/\/ Fields of the class and its superclasses\n+  \/\/ as described in jvmtiHeapReferenceInfoField spec.\n+  Field* fields;\n+  jint field_count;\n@@ -135,3 +135,3 @@\n-    \/\/ Interfaces implemented by this klass, superclasses and superinterfaces.\n-    Klass** interfaces;\n-    jint interface_count;\n+  \/\/ Interfaces implemented by this klass, superclasses and superinterfaces.\n+  Klass** interfaces;\n+  jint interface_count;\n@@ -139,2 +139,2 @@\n-    \/\/ Number of fields in all implemented interfaces.\n-    jint interface_field_count;\n+  \/\/ Number of fields in all implemented interfaces.\n+  jint interface_field_count;\n@@ -142,1 +142,1 @@\n-    static Klass* explore(JNIEnv* env, jclass klass);\n+  static Klass* explore(JNIEnv* env, jclass klass);\n@@ -145,4 +145,4 @@\n-    \/\/ Initializes fields, field_count.\n-    void explore_fields(JNIEnv* env);\n-    \/\/ Initializes interfaces, interface_count.\n-    void explore_interfaces(JNIEnv* env);\n+  \/\/ Initializes fields, field_count.\n+  void explore_fields(JNIEnv* env);\n+  \/\/ Initializes interfaces, interface_count.\n+  void explore_interfaces(JNIEnv* env);\n@@ -150,1 +150,1 @@\n-    void print() const;\n+  void print() const;\n@@ -157,4 +157,4 @@\n-    Klass* klass;\n-    \/\/ Values of instance fields (0 for static fields).\n-    \/\/ Size of the array == klass->field_count.\n-    jint* field_values;\n+  Klass* klass;\n+  \/\/ Values of instance fields (0 for static fields).\n+  \/\/ Size of the array == klass->field_count.\n+  jint* field_values;\n@@ -162,1 +162,1 @@\n-    static Object* explore(JNIEnv* env, jobject obj);\n+  static Object* explore(JNIEnv* env, jobject obj);\n@@ -167,10 +167,10 @@\n-    id = fid;\n-    check_jvmti_status(env,\n-        jvmti->GetFieldName(klass, fid, &name, nullptr, nullptr),\n-        \"GetFieldName failed\");\n-    if (is_static_field(env, klass, fid)) {\n-        verify_int_field(env, klass, fid);\n-        value = env->GetStaticIntField(klass, fid);\n-    } else {\n-        value = 0;\n-    }\n+  id = fid;\n+  check_jvmti_status(env,\n+    jvmti->GetFieldName(klass, fid, &name, nullptr, nullptr),\n+    \"GetFieldName failed\");\n+  if (is_static_field(env, klass, fid)) {\n+    verify_int_field(env, klass, fid);\n+    value = env->GetStaticIntField(klass, fid);\n+  } else {\n+    value = 0;\n+  }\n@@ -180,17 +180,5 @@\n-    jint this_count;\n-    jfieldID* this_fields;\n-    check_jvmti_status(env,\n-        jvmti->GetClassFields(klass, &this_count, &this_fields),\n-        \"GetClassFields failed\");\n-\n-    jint super_count = super_klass != nullptr ? super_klass->field_count : 0;\n-\n-    fields = (Field*)allocate(env, sizeof(Field) * (super_count + this_count));\n-    field_count = 0;\n-\n-    if (super_klass != 0) {\n-        \/\/ super_klass->fields already contains fields from all superclasses in the required order.\n-        for (int i = 0; i < super_count; i++) {\n-            fields[field_count++].init(env, super_klass->klass, super_klass->fields[i].id);\n-        }\n-    }\n+  jint this_count;\n+  jfieldID* this_fields;\n+  check_jvmti_status(env,\n+    jvmti->GetClassFields(klass, &this_count, &this_fields),\n+    \"GetClassFields failed\");\n@@ -198,3 +186,9 @@\n-    \/\/ Add field of this class to the end of the list.\n-    for (int i = 0; i < this_count; i++) {\n-        fields[field_count++].init(env, klass, this_fields[i]);\n+  jint super_count = super_klass != nullptr ? super_klass->field_count : 0;\n+\n+  fields = (Field*)allocate(env, sizeof(Field) * (super_count + this_count));\n+  field_count = 0;\n+\n+  if (super_klass != 0) {\n+    \/\/ super_klass->fields already contains fields from all superclasses in the required order.\n+    for (int i = 0; i < super_count; i++) {\n+      fields[field_count++].init(env, super_klass->klass, super_klass->fields[i].id);\n@@ -202,1 +196,7 @@\n-    deallocate(env, this_fields);\n+  }\n+\n+  \/\/ Add field of this class to the end of the list.\n+  for (int i = 0; i < this_count; i++) {\n+    fields[field_count++].init(env, klass, this_fields[i]);\n+  }\n+  deallocate(env, this_fields);\n@@ -208,11 +208,11 @@\n-    jint interface_count;\n-    jclass* interfaces;\n-    check_jvmti_status(env,\n-        jvmti->GetImplementedInterfaces(klass, &interface_count, &interfaces),\n-        \"GetImplementedInterfaces failed\");\n-\n-    jint result = interface_count;\n-    \/\/ interfaces implemented by superinterfaces\n-    for (jint i = 0; i < interface_count; i++) {\n-        result += get_max_interface_count(env, interfaces[i]);\n-    }\n+  jint interface_count;\n+  jclass* interfaces;\n+  check_jvmti_status(env,\n+    jvmti->GetImplementedInterfaces(klass, &interface_count, &interfaces),\n+    \"GetImplementedInterfaces failed\");\n+\n+  jint result = interface_count;\n+  \/\/ interfaces implemented by superinterfaces\n+  for (jint i = 0; i < interface_count; i++) {\n+    result += get_max_interface_count(env, interfaces[i]);\n+  }\n@@ -220,1 +220,1 @@\n-    deallocate(env, interfaces);\n+  deallocate(env, interfaces);\n@@ -222,1 +222,1 @@\n-    return result;\n+  return result;\n@@ -229,27 +229,19 @@\n-    jint interface_count;\n-    jclass* interfaces;\n-    check_jvmti_status(env,\n-        jvmti->GetImplementedInterfaces(klass, &interface_count, &interfaces),\n-        \"GetImplementedInterfaces failed\");\n-\n-    jint count = 0;\n-    for (jint i = 0; i < interface_count; i++) {\n-        \/\/ Skip interface if it's already in the array\n-        \/\/ (i.e. implemented by another superclass\/superinterface).\n-        bool dup = false;\n-        for (jint j = 0; j < index; j++) {\n-            if (env->IsSameObject(arr[j]->klass, interfaces[i]) == JNI_TRUE) {\n-                dup = true;\n-                break;\n-            }\n-        }\n-        if (dup) {\n-            continue;\n-        }\n-\n-        \/\/ Add the interface.\n-        arr[index + count] = Klass::explore(env, interfaces[i]);\n-        count++;\n-\n-        \/\/ And explore its superinterfaces.\n-        count += fill_interfaces(arr, index + count, env, interfaces[i]);\n+  jint interface_count;\n+  jclass* interfaces;\n+  check_jvmti_status(env,\n+    jvmti->GetImplementedInterfaces(klass, &interface_count, &interfaces),\n+    \"GetImplementedInterfaces failed\");\n+\n+  jint count = 0;\n+  for (jint i = 0; i < interface_count; i++) {\n+    \/\/ Skip interface if it's already in the array\n+    \/\/ (i.e. implemented by another superclass\/superinterface).\n+    bool dup = false;\n+    for (jint j = 0; j < index; j++) {\n+      if (env->IsSameObject(arr[j]->klass, interfaces[i]) == JNI_TRUE) {\n+        dup = true;\n+        break;\n+      }\n+    }\n+    if (dup) {\n+      continue;\n@@ -258,4 +250,3 @@\n-    deallocate(env, interfaces);\n-\n-    return count;\n-}\n+    \/\/ Add the interface.\n+    arr[index + count] = Klass::explore(env, interfaces[i]);\n+    count++;\n@@ -263,5 +254,3 @@\n-void Klass::explore_interfaces(JNIEnv* env) {\n-    jint max_count = get_max_interface_count(env, klass);\n-    if (super_klass != nullptr) {\n-        max_count += super_klass->interface_count;\n-    }\n+    \/\/ And explore its superinterfaces.\n+    count += fill_interfaces(arr, index + count, env, interfaces[i]);\n+  }\n@@ -269,2 +258,1 @@\n-    \/\/ Allocate array for maximum possible count.\n-    interfaces = (Klass**)allocate(env, sizeof(Klass*) * max_count);\n+  deallocate(env, interfaces);\n@@ -272,6 +260,2 @@\n-    interface_count = 0;\n-    if (super_klass != nullptr) {\n-        \/\/ Add all interfaces implemented by super_klass first.\n-        interface_count = super_klass->interface_count;\n-        memcpy(interfaces, super_klass->interfaces, sizeof(Klass*) * super_klass->interface_count);\n-    }\n+  return count;\n+}\n@@ -279,2 +263,18 @@\n-    \/\/ Interfaces implemented by the klass.\n-    interface_count += fill_interfaces(interfaces, interface_count, env, klass);\n+void Klass::explore_interfaces(JNIEnv* env) {\n+  jint max_count = get_max_interface_count(env, klass);\n+  if (super_klass != nullptr) {\n+    max_count += super_klass->interface_count;\n+  }\n+\n+  \/\/ Allocate array for maximum possible count.\n+  interfaces = (Klass**)allocate(env, sizeof(Klass*) * max_count);\n+\n+  interface_count = 0;\n+  if (super_klass != nullptr) {\n+    \/\/ Add all interfaces implemented by super_klass first.\n+    interface_count = super_klass->interface_count;\n+    memcpy(interfaces, super_klass->interfaces, sizeof(Klass*) * super_klass->interface_count);\n+  }\n+\n+  \/\/ Interfaces implemented by the klass.\n+  interface_count += fill_interfaces(interfaces, interface_count, env, klass);\n@@ -284,12 +284,12 @@\n-    printf(\"Explored klass: %s, super: %s\\n\",\n-           name, super_klass == nullptr ? nullptr : super_klass->name);\n-    printf(\"  interfaces (%d):\\n\", (int)interface_count);\n-    for (jint i = 0; i < interface_count; i++) {\n-        printf(\"    %d: %s\\n\", (int)i, interfaces[i]->name);\n-    }\n-    printf(\"  fields (%d):\\n\", (int)field_count);\n-    for (jint i = 0; i < field_count; i++) {\n-        printf(\"    %d: %s (value = %d)\\n\",\n-               (int)i, fields[i].name, (int)fields[i].value);\n-    }\n-    printf(\"  interface_field_count: %d\\n\", (int)interface_field_count);\n+  printf(\"Explored klass: %s, super: %s\\n\",\n+         name, super_klass == nullptr ? nullptr : super_klass->name);\n+  printf(\"  interfaces (%d):\\n\", (int)interface_count);\n+  for (jint i = 0; i < interface_count; i++) {\n+    printf(\"    %d: %s\\n\", (int)i, interfaces[i]->name);\n+  }\n+  printf(\"  fields (%d):\\n\", (int)field_count);\n+  for (jint i = 0; i < field_count; i++) {\n+    printf(\"    %d: %s (value = %d)\\n\",\n+           (int)i, fields[i].name, (int)fields[i].value);\n+  }\n+  printf(\"  interface_field_count: %d\\n\", (int)interface_field_count);\n@@ -299,7 +299,7 @@\n-    jlong tag = 0;\n-    check_jvmti_status(env,\n-        jvmti->GetTag(klass, &tag),\n-        \"GetTag failed\");\n-    if (tag != 0) { \/\/ already explored\n-        return (Klass*)tag;\n-    }\n+  jlong tag = 0;\n+  check_jvmti_status(env,\n+    jvmti->GetTag(klass, &tag),\n+    \"GetTag failed\");\n+  if (tag != 0) { \/\/ already explored\n+    return (Klass*)tag;\n+  }\n@@ -307,1 +307,1 @@\n-    Klass* result = (Klass*)allocate(env, sizeof(Klass));\n+  Klass* result = (Klass*)allocate(env, sizeof(Klass));\n@@ -309,1 +309,1 @@\n-    result->klass = (jclass)env->NewGlobalRef(klass);\n+  result->klass = (jclass)env->NewGlobalRef(klass);\n@@ -311,4 +311,4 @@\n-    check_jvmti_status(env,\n-        jvmti->GetClassSignature(klass, &result->name, nullptr),\n-        \"GetClassSignature failed\");\n-    sig2name(result->name);\n+  check_jvmti_status(env,\n+    jvmti->GetClassSignature(klass, &result->name, nullptr),\n+    \"GetClassSignature failed\");\n+  sig2name(result->name);\n@@ -316,3 +316,3 @@\n-    \/\/ Explore superclass first.\n-    jclass super_klass = env->GetSuperclass(klass);\n-    result->super_klass = super_klass == nullptr ? nullptr : Klass::explore(env, super_klass);\n+  \/\/ Explore superclass first.\n+  jclass super_klass = env->GetSuperclass(klass);\n+  result->super_klass = super_klass == nullptr ? nullptr : Klass::explore(env, super_klass);\n@@ -320,1 +320,1 @@\n-    result->explore_fields(env);\n+  result->explore_fields(env);\n@@ -322,1 +322,1 @@\n-    result->explore_interfaces(env);\n+  result->explore_interfaces(env);\n@@ -324,5 +324,5 @@\n-    \/\/ Calculate interface_field_count.\n-    result->interface_field_count = 0;\n-    for (jint i = 0; i < result->interface_count; i++) {\n-        result->interface_field_count += result->interfaces[i]->field_count;\n-    }\n+  \/\/ Calculate interface_field_count.\n+  result->interface_field_count = 0;\n+  for (jint i = 0; i < result->interface_count; i++) {\n+    result->interface_field_count += result->interfaces[i]->field_count;\n+  }\n@@ -330,3 +330,3 @@\n-    check_jvmti_status(env,\n-        jvmti->SetTag(klass, (jlong)result),\n-        \"SetTag failed\");\n+  check_jvmti_status(env,\n+    jvmti->SetTag(klass, (jlong)result),\n+    \"SetTag failed\");\n@@ -334,1 +334,1 @@\n-    result->print();\n+  result->print();\n@@ -336,1 +336,1 @@\n-    return result;\n+  return result;\n@@ -340,20 +340,19 @@\n-    jlong tag = 0;\n-    check_jvmti_status(env,\n-        jvmti->GetTag(obj, &tag),\n-        \"GetTag failed\");\n-    if (tag != 0) { \/\/ already explored\n-        return (Object*)tag;\n-    }\n-\n-    jclass obj_klass = env->GetObjectClass(obj);\n-    Klass* klass = Klass::explore(env, obj_klass);\n-    jint* values = (jint*)allocate(env, sizeof(jint) * klass->field_count);\n-\n-    for (jint i = 0; i < klass->field_count; i++) {\n-        jfieldID fid = klass->fields[i].id;\n-        if (is_static_field(env, obj_klass, fid)) {\n-            values[i] = 0;\n-        } else {\n-            verify_int_field(env, obj_klass, fid);\n-            values[i] = env->GetIntField(obj, fid);\n-        }\n+  jlong tag = 0;\n+  check_jvmti_status(env,\n+    jvmti->GetTag(obj, &tag),\n+    \"GetTag failed\");\n+  if (tag != 0) { \/\/ already explored\n+    return (Object*)tag;\n+  }\n+\n+  jclass obj_klass = env->GetObjectClass(obj);\n+  Klass* klass = Klass::explore(env, obj_klass);\n+  jint* values = (jint*)allocate(env, sizeof(jint) * klass->field_count);\n+\n+  for (jint i = 0; i < klass->field_count; i++) {\n+    jfieldID fid = klass->fields[i].id;\n+    if (is_static_field(env, obj_klass, fid)) {\n+      values[i] = 0;\n+    } else {\n+      verify_int_field(env, obj_klass, fid);\n+      values[i] = env->GetIntField(obj, fid);\n@@ -361,0 +360,1 @@\n+  }\n@@ -362,3 +362,3 @@\n-    Object* result = (Object*)allocate(env, sizeof(Object));\n-    result->klass = klass;\n-    result->field_values = values;\n+  Object* result = (Object*)allocate(env, sizeof(Object));\n+  result->klass = klass;\n+  result->field_values = values;\n@@ -366,3 +366,3 @@\n-    check_jvmti_status(env,\n-        jvmti->SetTag(obj, (jlong)result),\n-        \"SetTag failed\");\n+  check_jvmti_status(env,\n+    jvmti->SetTag(obj, (jlong)result),\n+    \"SetTag failed\");\n@@ -370,1 +370,1 @@\n-    return result;\n+  return result;\n@@ -375,16 +375,16 @@\n-    jint res = jvm->GetEnv((void **)&jvmti, JVMTI_VERSION_1_1);\n-    if (res != JNI_OK || jvmti == nullptr) {\n-        printf(\"jvm->GetEnv failed\\n\");\n-        fflush(nullptr);\n-        return JNI_ERR;\n-    }\n-\n-    jvmtiCapabilities caps;\n-    memset(&caps, 0, sizeof(caps));\n-    caps.can_tag_objects = 1;\n-    jvmtiError err = jvmti->AddCapabilities(&caps);\n-    if (err != JVMTI_ERROR_NONE) {\n-        printf(\"AddCapabilities failed: %s (%d)\\n\", TranslateError(err), err);\n-        fflush(nullptr);\n-        return JNI_ERR;\n-    }\n+  jint res = jvm->GetEnv((void **)&jvmti, JVMTI_VERSION_1_1);\n+  if (res != JNI_OK || jvmti == nullptr) {\n+    printf(\"jvm->GetEnv failed\\n\");\n+    fflush(nullptr);\n+    return JNI_ERR;\n+  }\n+\n+  jvmtiCapabilities caps;\n+  memset(&caps, 0, sizeof(caps));\n+  caps.can_tag_objects = 1;\n+  jvmtiError err = jvmti->AddCapabilities(&caps);\n+  if (err != JVMTI_ERROR_NONE) {\n+    printf(\"AddCapabilities failed: %s (%d)\\n\", TranslateError(err), err);\n+    fflush(nullptr);\n+    return JNI_ERR;\n+  }\n@@ -392,1 +392,1 @@\n-    return JNI_OK;\n+  return JNI_OK;\n@@ -397,13 +397,13 @@\n-    if (index < klass->interface_field_count) {\n-        printf(\"ERROR: field_index is too small (%d < %d)\\n\",\n-               (int)index, (int)klass->interface_field_count);\n-        test_failed = true;\n-        return false;\n-    }\n-    if (index >= klass->interface_field_count + klass->field_count) {\n-        printf(\"ERROR: field_index is too big (%d >= %d)\\n\",\n-               (int)index, (int)(klass->interface_field_count + klass->field_count));\n-        test_failed = true;\n-        return false;\n-    }\n-    return true;\n+  if (index < klass->interface_field_count) {\n+    printf(\"ERROR: field_index is too small (%d < %d)\\n\",\n+           (int)index, (int)klass->interface_field_count);\n+    test_failed = true;\n+    return false;\n+  }\n+  if (index >= klass->interface_field_count + klass->field_count) {\n+    printf(\"ERROR: field_index is too big (%d >= %d)\\n\",\n+           (int)index, (int)(klass->interface_field_count + klass->field_count));\n+    test_failed = true;\n+    return false;\n+  }\n+  return true;\n@@ -413,5 +413,5 @@\n-    index -= klass->interface_field_count;\n-    if (index < 0 || index >= klass->field_count) {\n-        return nullptr;\n-    }\n-    return klass->fields[index].name;\n+  index -= klass->interface_field_count;\n+  if (index < 0 || index >= klass->field_count) {\n+    return nullptr;\n+  }\n+  return klass->fields[index].name;\n@@ -422,7 +422,7 @@\n-     jvmtiHeapReferenceKind        reference_kind,\n-     const jvmtiHeapReferenceInfo* reference_info,\n-     jlong                         class_tag,\n-     jlong*                        tag_ptr,\n-     jvalue                        value,\n-     jvmtiPrimitiveType            value_type,\n-     void*                         user_data)\n+   jvmtiHeapReferenceKind        reference_kind,\n+   const jvmtiHeapReferenceInfo* reference_info,\n+   jlong                         class_tag,\n+   jlong*                        tag_ptr,\n+   jvalue                        value,\n+   jvmtiPrimitiveType            value_type,\n+   void*                         user_data)\n@@ -430,8 +430,24 @@\n-    if (*tag_ptr == 0) {\n-        return 0;\n-    }\n-\n-    jint index = reference_info->field.index;\n-    jint int_value = value.i;\n-    if (value_type != JVMTI_PRIMITIVE_TYPE_INT) {\n-        printf(\"ERROR: unexpected value type in primitiveFieldCallback: '%c'\\n\", (char)value_type);\n+  if (*tag_ptr == 0) {\n+    return 0;\n+  }\n+\n+  jint index = reference_info->field.index;\n+  jint int_value = value.i;\n+  if (value_type != JVMTI_PRIMITIVE_TYPE_INT) {\n+    printf(\"ERROR: unexpected value type in primitiveFieldCallback: '%c'\\n\", (char)value_type);\n+    test_failed = true;\n+    int_value = -1;\n+  }\n+\n+  if (reference_kind == JVMTI_HEAP_REFERENCE_FIELD) {\n+    Object* obj = (Object*)(*tag_ptr);\n+    Klass* klass = obj->klass;\n+    printf(\"primitiveFieldCallback(JVMTI_HEAP_REFERENCE_FIELD): \"\n+           \"klass=%s, index=%d, type=%c, value=%d\\n\",\n+           klass->name, index,\n+           (int)value_type, (int)value.i);\n+    if (check_index_bounds(index, klass)) {\n+      jint expected_value = obj->field_values[index - klass->interface_field_count];\n+      if (int_value != expected_value) {\n+        printf(\"  ERROR: wrong instance value: (%d, expected %d)\\n\",\n+               (int)int_value, (int)expected_value);\n@@ -439,1 +455,4 @@\n-        int_value = -1;\n+      } else {\n+        printf(\"  OK: field %s.%s, value %d\\n\",\n+               klass->name, get_field_name(klass, index), (int)int_value);\n+      }\n@@ -441,38 +460,11 @@\n-\n-    if (reference_kind == JVMTI_HEAP_REFERENCE_FIELD) {\n-        Object* obj = (Object*)(*tag_ptr);\n-        Klass* klass = obj->klass;\n-        printf(\"primitiveFieldCallback(JVMTI_HEAP_REFERENCE_FIELD): \"\n-               \"klass=%s, index=%d, type=%c, value=%d\\n\",\n-               klass->name, index,\n-               (int)value_type, (int)value.i);\n-        if (check_index_bounds(index, klass)) {\n-            jint expected_value = obj->field_values[index - klass->interface_field_count];\n-            if (int_value != expected_value) {\n-                printf(\"  ERROR: wrong instance value: (%d, expected %d)\\n\",\n-                       (int)int_value, (int)expected_value);\n-                test_failed = true;\n-            } else {\n-                printf(\"  OK: field %s.%s, value %d\\n\",\n-                       klass->name, get_field_name(klass, index), (int)int_value);\n-            }\n-        }\n-    } else if (reference_kind == JVMTI_HEAP_REFERENCE_STATIC_FIELD) {\n-        Klass* klass = (Klass*)(*tag_ptr);\n-        printf(\"primitiveFieldCallback(JVMTI_HEAP_REFERENCE_STATIC_FIELD): \"\n-               \"klass=%s, index=%d, type=%c, value=%d\\n\",\n-               klass->name, index,\n-               (int)value_type, (int)value.i);\n-        if (check_index_bounds(index, klass)) {\n-            jint expected_value = klass->fields[index - klass->interface_field_count].value;\n-            if (int_value != expected_value) {\n-                printf(\"  ERROR: wrong static value: (%d, expected %d)\\n\\n\\n\",\n-                       (int)int_value, (int)expected_value);\n-                test_failed = true;\n-            } else {\n-                printf(\"  OK: field %s.%s, value %d\\n\",\n-                          klass->name, get_field_name(klass, index), (int)int_value);\n-            }\n-        }\n-    } else {\n-        printf(\"ERROR: unexpected reference_kind in primitiveFieldCallback: %d\\n\", (int)reference_kind);\n+  } else if (reference_kind == JVMTI_HEAP_REFERENCE_STATIC_FIELD) {\n+    Klass* klass = (Klass*)(*tag_ptr);\n+    printf(\"primitiveFieldCallback(JVMTI_HEAP_REFERENCE_STATIC_FIELD): \"\n+           \"klass=%s, index=%d, type=%c, value=%d\\n\",\n+           klass->name, index,\n+           (int)value_type, (int)value.i);\n+    if (check_index_bounds(index, klass)) {\n+      jint expected_value = klass->fields[index - klass->interface_field_count].value;\n+      if (int_value != expected_value) {\n+        printf(\"  ERROR: wrong static value: (%d, expected %d)\\n\\n\\n\",\n+               (int)int_value, (int)expected_value);\n@@ -480,0 +472,4 @@\n+      } else {\n+        printf(\"  OK: field %s.%s, value %d\\n\",\n+               klass->name, get_field_name(klass, index), (int)int_value);\n+      }\n@@ -481,0 +477,4 @@\n+  } else {\n+    printf(\"ERROR: unexpected reference_kind in primitiveFieldCallback: %d\\n\", (int)reference_kind);\n+    test_failed = true;\n+  }\n@@ -482,2 +482,2 @@\n-    fflush(nullptr);\n-    return 0;\n+  fflush(nullptr);\n+  return 0;\n@@ -489,2 +489,2 @@\n-    Object::explore(env, testObj);\n-    fflush(nullptr);\n+  Object::explore(env, testObj);\n+  fflush(nullptr);\n@@ -495,13 +495,13 @@\n-    jvmtiHeapCallbacks heapCallbacks;\n-    memset(&heapCallbacks, 0, sizeof(heapCallbacks));\n-\n-    heapCallbacks.primitive_field_callback = primitiveFieldCallback;\n-\n-    check_jvmti_status(env,\n-        jvmti->FollowReferences(JVMTI_HEAP_FILTER_UNTAGGED, \/\/ heap_filter\n-                                nullptr,                    \/\/ class\n-                                rootObject,                 \/\/ initial_object\n-                                &heapCallbacks,\n-                                nullptr),\n-        \"FollowReferences failed\");\n-    fflush(nullptr);\n+  jvmtiHeapCallbacks heapCallbacks;\n+  memset(&heapCallbacks, 0, sizeof(heapCallbacks));\n+\n+  heapCallbacks.primitive_field_callback = primitiveFieldCallback;\n+\n+  check_jvmti_status(env,\n+    jvmti->FollowReferences(JVMTI_HEAP_FILTER_UNTAGGED, \/\/ heap_filter\n+                            nullptr,                    \/\/ class\n+                            rootObject,                 \/\/ initial_object\n+                            &heapCallbacks,\n+                            nullptr),\n+    \"FollowReferences failed\");\n+  fflush(nullptr);\n@@ -512,1 +512,1 @@\n-    return test_failed ? JNI_TRUE : JNI_FALSE;\n+  return test_failed ? JNI_TRUE : JNI_FALSE;\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/FollowReferences\/FieldIndices\/libFieldIndicesTest.cpp","additions":335,"deletions":335,"binary":false,"changes":670,"status":"modified"}]}