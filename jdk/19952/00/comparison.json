{"files":[{"patch":"@@ -57,2 +57,0 @@\n-import java.lang.classfile.ClassModel;\n-import java.lang.classfile.ClassTransform;\n@@ -60,1 +58,0 @@\n-import java.lang.classfile.attribute.ModuleAttribute;\n@@ -63,1 +60,0 @@\n-import jdk.internal.javac.PreviewFeature;\n@@ -1591,1 +1587,1 @@\n-        byte[] bytes = cc.transform(cc.parse(in.readAllBytes()), (clb, cle) -> {\n+        byte[] bytes = cc.transformClass(cc.parse(in.readAllBytes()), (clb, cle) -> {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Module.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.lang.classfile.attribute.UnknownAttribute;\n@@ -438,1 +437,1 @@\n-     *                     b -> b.transform(model, transform));\n+     *                     clb -> clb.transform(model, transform));\n@@ -445,2 +444,2 @@\n-    default byte[] transform(ClassModel model, ClassTransform transform) {\n-        return transform(model, model.thisClass(), transform);\n+    default byte[] transformClass(ClassModel model, ClassTransform transform) {\n+        return transformClass(model, model.thisClass(), transform);\n@@ -461,2 +460,2 @@\n-    default byte[] transform(ClassModel model, ClassDesc newClassName, ClassTransform transform) {\n-        return transform(model, TemporaryConstantPool.INSTANCE.classEntry(newClassName), transform);\n+    default byte[] transformClass(ClassModel model, ClassDesc newClassName, ClassTransform transform) {\n+        return transformClass(model, TemporaryConstantPool.INSTANCE.classEntry(newClassName), transform);\n@@ -476,1 +475,1 @@\n-     *                     b -> b.transform(model, transform));\n+     *                     clb -> clb.transform(model, transform));\n@@ -484,1 +483,1 @@\n-    byte[] transform(ClassModel model, ClassEntry newClassName, ClassTransform transform);\n+    byte[] transformClass(ClassModel model, ClassEntry newClassName, ClassTransform transform);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFile.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * {@link ClassFile#transform(ClassModel, ClassTransform)}, and the elements of the class,\n+ * {@link ClassFile#transformClass(ClassModel, ClassTransform)}, and the elements of the class,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFileTransform.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-        return context.transform(clm, map(clm.thisClass().asSymbol()), this);\n+        return context.transformClass(clm, map(clm.thisClass().asSymbol()), this);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/components\/ClassRemapper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-        byte[] newBytes = ClassFile.of().transform(\n+        byte[] newBytes = ClassFile.of().transformClass(\n@@ -148,1 +148,1 @@\n-        byte[] newBytes = ClassFile.of().transform(\n+        byte[] newBytes = ClassFile.of().transformClass(\n@@ -163,1 +163,1 @@\n-        return ClassFile.of().transform(target,\n+        return ClassFile.of().transformClass(target,\n@@ -194,1 +194,1 @@\n-                                                        .transform(targetCodeModel, CodeLocalsShifter.of(mm.flags(), mm.methodTypeSymbol())\n+                                                    .transform(targetCodeModel, CodeLocalsShifter.of(mm.flags(), mm.methodTypeSymbol())\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/components\/snippet-files\/PackageSnippets.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -198,1 +198,1 @@\n-        byte[] newBytes = cc.transform(cc.parse(bytes), ct);\n+        byte[] newBytes = cc.transformClass(cc.parse(bytes), ct);\n@@ -349,1 +349,1 @@\n-        byte[] newBytes = ClassFile.of().transform(classModel,\n+        byte[] newBytes = ClassFile.of().transformClass(classModel,\n@@ -363,1 +363,1 @@\n-        return ClassFile.of().transform(target,\n+        return ClassFile.of().transformClass(target,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/snippet-files\/PackageSnippets.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-    public byte[] transform(ClassModel model, ClassEntry newClassName, ClassTransform transform) {\n+    public byte[] transformClass(ClassModel model, ClassEntry newClassName, ClassTransform transform) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassFileImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -156,1 +156,1 @@\n-        return cc.transform(cm, ClassTransform.endHandler(clb -> {\n+        return cc.transformClass(cm, ClassTransform.endHandler(clb -> {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleInfoExtender.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-                        byte[] content = ClassFile.of().transform(clm, ClassTransform\n+                        byte[] content = ClassFile.of().transformClass(clm, ClassTransform\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/StripJavaDebugAttributesPlugin.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-        return ClassFile.of().transform(newClassReader(path, classFile),\n+        return ClassFile.of().transformClass(newClassReader(path, classFile),\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/VersionPropsPlugin.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-        return cc.transform(cc.parse(classFile),\n+        return cc.transformClass(cc.parse(classFile),\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/LocalExecutionControl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -210,1 +210,1 @@\n-        return cf.transform(cf.parse(classBytes), ClassTransform.dropping(ce ->\n+        return cf.transformClass(cf.parse(classBytes), ClassTransform.dropping(ce ->\n@@ -220,1 +220,1 @@\n-        return cf.transform(cf.parse(classBytes), ClassTransform.dropping(ce ->\n+        return cf.transformClass(cf.parse(classBytes), ClassTransform.dropping(ce ->\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/BadCanonicalCtrTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -246,1 +246,1 @@\n-        return cf.transform(cf.parse(classBytes), ClassTransform.endHandler(clb -> {\n+        return cf.transformClass(cf.parse(classBytes), ClassTransform.endHandler(clb -> {\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/ProhibitedMethods.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -234,1 +234,1 @@\n-        return cf.transform(model, new SerialPersistentFieldsVisitor(model.thisClass().asSymbol(), spf));\n+        return cf.transformClass(model, new SerialPersistentFieldsVisitor(model.thisClass().asSymbol(), spf));\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/SerialPersistentFieldsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -151,1 +151,1 @@\n-        return cf.transform(oldModel, new ClassTransform() {\n+        return cf.transformClass(oldModel, new ClassTransform() {\n","filename":"test\/jdk\/java\/lang\/ModuleTests\/AnnotationsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -151,1 +151,1 @@\n-        var bytes = ClassFile.of().transform(model, transform);\n+        var bytes = ClassFile.of().transformClass(model, transform);\n","filename":"test\/jdk\/java\/lang\/instrument\/asmlib\/Instrumentor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,1 +126,1 @@\n-                    classData = cf.transform(cf.parse(classData), replaced.get(name));\n+                    classData = cf.transformClass(cf.parse(classData), replaced.get(name));\n","filename":"test\/jdk\/java\/lang\/invoke\/8022701\/BogoLoader.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -128,1 +128,1 @@\n-                    classData = cf.transform(cf.parse(classData), replaced.get(name));\n+                    classData = cf.transformClass(cf.parse(classData), replaced.get(name));\n","filename":"test\/jdk\/java\/lang\/invoke\/accessProtectedSuper\/BogoLoader.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,1 @@\n-            byte[] newBytes = cc.transform(cm, t);\n+            byte[] newBytes = cc.transformClass(cm, t);\n@@ -82,1 +82,1 @@\n-            byte[] newBytes = cc.transform(cm, t);\n+            byte[] newBytes = cc.transformClass(cm, t);\n@@ -104,1 +104,1 @@\n-        byte[] newBytes = cc.transform(cm, transform);\n+        byte[] newBytes = cc.transformClass(cm, transform);\n","filename":"test\/jdk\/jdk\/classfile\/AdaptCodeTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-            cc.verify(cc.transform(clm, (clb, cle) -> {\n+            cc.verify(cc.transformClass(clm, (clb, cle) -> {\n@@ -306,1 +306,1 @@\n-        return ClassFile.of().transform(target,\n+        return ClassFile.of().transformClass(target,\n@@ -337,1 +337,1 @@\n-                                                        .transform(targetCodeModel, CodeLocalsShifter.of(mm.flags(), mm.methodTypeSymbol())\n+                                                    .transform(targetCodeModel, CodeLocalsShifter.of(mm.flags(), mm.methodTypeSymbol())\n","filename":"test\/jdk\/jdk\/classfile\/AdvancedTransformationsTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-        byte[] newBytes = cc.transform(cm, (cb, ce) -> {\n+        byte[] newBytes = cc.transformClass(cm, (cb, ce) -> {\n","filename":"test\/jdk\/jdk\/classfile\/BSMTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,1 @@\n-        MethodHandles.lookup().defineClass(cc.transform(cm, transform));\n+        MethodHandles.lookup().defineClass(cc.transformClass(cm, transform));\n","filename":"test\/jdk\/jdk\/classfile\/ClassBuildingTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,1 +125,1 @@\n-        byte[] newBytes = ClassFile.of(ClassFile.ClassHierarchyResolverOption.of(res)).transform(classModel,\n+        byte[] newBytes = ClassFile.of(ClassFile.ClassHierarchyResolverOption.of(res)).transformClass(classModel,\n","filename":"test\/jdk\/jdk\/classfile\/ClassHierarchyInfoTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-        Files.write(root.resolve(targetClassFile), cc.transform(cc.parse(root.resolve(sourceClassFile)), ClassTransform.transformingMethodBodies((cob, coe) -> {\n+        Files.write(root.resolve(targetClassFile), cc.transformClass(cc.parse(root.resolve(sourceClassFile)), ClassTransform.transformingMethodBodies((cob, coe) -> {\n@@ -150,1 +150,1 @@\n-                                                .transform(ClassFile.of().parse(bytes), m.classTransform)\n+                                                .transformClass(ClassFile.of().parse(bytes), m.classTransform)\n@@ -213,1 +213,1 @@\n-                                      .transform(newModel,\n+                                      .transformClass(newModel,\n","filename":"test\/jdk\/jdk\/classfile\/CorpusTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-        bytes = cc.transform(cc.parse(bytes), ClassTransform.transformingMethodBodies(CodeTransform.ACCEPT_ALL));\n+        bytes = cc.transformClass(cc.parse(bytes), ClassTransform.transformingMethodBodies(CodeTransform.ACCEPT_ALL));\n@@ -87,1 +87,1 @@\n-        cc.transform(clm, ClassTransform.transformingMethodBodies(CodeTransform.ACCEPT_ALL)\n+        cc.transformClass(clm, ClassTransform.transformingMethodBodies(CodeTransform.ACCEPT_ALL)\n@@ -92,1 +92,1 @@\n-                cc.transform(clm, ClassTransform.transformingMethodBodies(CodeTransform.ACCEPT_ALL)\n+                cc.transformClass(clm, ClassTransform.transformingMethodBodies(CodeTransform.ACCEPT_ALL)\n@@ -98,1 +98,1 @@\n-                         .transform(clm, ClassTransform.transformingMethodBodies(CodeTransform.ACCEPT_ALL)));\n+                         .transformClass(clm, ClassTransform.transformingMethodBodies(CodeTransform.ACCEPT_ALL)));\n","filename":"test\/jdk\/jdk\/classfile\/DiscontinuedInstructionsTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,1 +111,1 @@\n-        byte[] newClass = cc.transform(c, Transforms.threeLevelNoop);\n+        byte[] newClass = cc.transformClass(c, Transforms.threeLevelNoop);\n","filename":"test\/jdk\/jdk\/classfile\/LvtTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,1 +83,1 @@\n-        return ClassFile.of().transform(cm, (cb, ce) -> {\n+        return ClassFile.of().transformClass(cm, (cb, ce) -> {\n","filename":"test\/jdk\/jdk\/classfile\/MassAdaptCopyCodeTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -102,1 +102,1 @@\n-                cc.transform(cm, (cb, e) -> {\n+                cc.transformClass(cm, (cb, e) -> {\n","filename":"test\/jdk\/jdk\/classfile\/MassAdaptCopyPrimitiveMatchCodeTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-                ClassFile.of(ClassFile.AttributesProcessingOption.DROP_UNSTABLE_ATRIBUTES).transform(\n+                ClassFile.of(ClassFile.AttributesProcessingOption.DROP_UNSTABLE_ATRIBUTES).transformClass(\n@@ -111,1 +111,1 @@\n-                ClassFile.of(ClassFile.AttributesProcessingOption.DROP_UNKNOWN_ATTRIBUTES).transform(\n+                ClassFile.of(ClassFile.AttributesProcessingOption.DROP_UNKNOWN_ATTRIBUTES).transformClass(\n","filename":"test\/jdk\/jdk\/classfile\/OptionsTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -139,1 +139,1 @@\n-                    CC_Fixed_Jumps.transform(\n+                    CC_Fixed_Jumps.transformClass(\n@@ -148,1 +148,1 @@\n-                    CC_Fixed_Jumps.transform(\n+                    CC_Fixed_Jumps.transformClass(\n@@ -157,1 +157,1 @@\n-                     CC_Not_Fixed_Jumps.transform(\n+                     CC_Not_Fixed_Jumps.transformClass(\n@@ -166,1 +166,1 @@\n-                     CC_Not_Fixed_Jumps.transform(\n+                     CC_Not_Fixed_Jumps.transformClass(\n@@ -175,1 +175,1 @@\n-                    CC_Fixed_Jumps.transform(\n+                    CC_Fixed_Jumps.transformClass(\n@@ -184,1 +184,1 @@\n-                    CC_Fixed_Jumps.transform(\n+                    CC_Fixed_Jumps.transformClass(\n@@ -193,1 +193,1 @@\n-                     CC_Not_Fixed_Jumps.transform(\n+                     CC_Not_Fixed_Jumps.transformClass(\n@@ -202,1 +202,1 @@\n-                     CC_Not_Fixed_Jumps.transform(\n+                     CC_Not_Fixed_Jumps.transformClass(\n","filename":"test\/jdk\/jdk\/classfile\/ShortJumpsFixTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -224,1 +224,1 @@\n-        var version49 = cc.parse(cc.transform(\n+        var version49 = cc.parse(cc.transformClass(\n@@ -232,1 +232,1 @@\n-         assertEmpty(cc.verify(cc.transform(\n+         assertEmpty(cc.verify(cc.transformClass(\n","filename":"test\/jdk\/jdk\/classfile\/StackMapsTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,1 @@\n-        ClassModel newModel = cc.parse(cc.transform(cm, xform));\n+        ClassModel newModel = cc.parse(cc.transformClass(cm, xform));\n@@ -77,1 +77,1 @@\n-        ClassModel newModel = cc.parse(cc.transform(cm, xform));\n+        ClassModel newModel = cc.parse(cc.transformClass(cm, xform));\n@@ -95,1 +95,1 @@\n-        ClassModel newModel = cc.parse(cc.transform(cm, xform));\n+        ClassModel newModel = cc.parse(cc.transformClass(cm, xform));\n","filename":"test\/jdk\/jdk\/classfile\/TestRecordComponent.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,2 +100,2 @@\n-        assertEquals(invoke(cc.transform(cm, transformCode(foo2foo))), \"foo\");\n-        assertEquals(invoke(cc.transform(cm, transformCode(foo2bar))), \"bar\");\n+        assertEquals(invoke(cc.transformClass(cm, transformCode(foo2foo))), \"foo\");\n+        assertEquals(invoke(cc.transformClass(cm, transformCode(foo2bar))), \"bar\");\n@@ -113,1 +113,1 @@\n-        assertEquals(invoke(cc.transform(cm, transform)), \"baz\");\n+        assertEquals(invoke(cc.transformClass(cm, transform)), \"baz\");\n@@ -124,3 +124,3 @@\n-        assertEquals(invoke(cc.transform(cm, transformCode(foo2bar.andThen(bar2baz).andThen(baz2foo)))), \"foo\");\n-        assertEquals(invoke(cc.transform(cm, transformCode(foo2bar.andThen(bar2baz).andThen(baz2quux)))), \"quux\");\n-        assertEquals(invoke(cc.transform(cm, transformCode(foo2foo.andThen(foo2bar).andThen(bar2baz)))), \"baz\");\n+        assertEquals(invoke(cc.transformClass(cm, transformCode(foo2bar.andThen(bar2baz).andThen(baz2foo)))), \"foo\");\n+        assertEquals(invoke(cc.transformClass(cm, transformCode(foo2bar.andThen(bar2baz).andThen(baz2quux)))), \"quux\");\n+        assertEquals(invoke(cc.transformClass(cm, transformCode(foo2foo.andThen(foo2bar).andThen(bar2baz)))), \"baz\");\n","filename":"test\/jdk\/jdk\/classfile\/TransformTests.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-        byte[] brokenClassBytes = cc.transform(classModel,\n+        byte[] brokenClassBytes = cc.transformClass(classModel,\n","filename":"test\/jdk\/jdk\/classfile\/VerifierSelfTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-        return ClassFile.of().transform(m, ClassTransform.endHandler(cb -> cb.with(RuntimeVisibleAnnotationsAttribute.of(annos))));\n+        return ClassFile.of().transformClass(m, ClassTransform.endHandler(cb -> cb.with(RuntimeVisibleAnnotationsAttribute.of(annos))));\n@@ -78,1 +78,1 @@\n-                    m2 = cc.parse(cc.transform(m, SWAP_ANNO_TRANSFORM));\n+                    m2 = cc.parse(cc.transformClass(m, SWAP_ANNO_TRANSFORM));\n@@ -122,1 +122,1 @@\n-                    m2 = cc.parse(cc.transform(m, (cb, ce) -> {\n+                    m2 = cc.parse(cc.transformClass(m, (cb, ce) -> {\n@@ -148,1 +148,1 @@\n-        return ClassFile.of().transform(m, ClassTransform.ofStateful(() -> new ClassTransform() {\n+        return ClassFile.of().transformClass(m, ClassTransform.ofStateful(() -> new ClassTransform() {\n@@ -175,1 +175,1 @@\n-        return ClassFile.of().transform(m, ClassTransform.ofStateful(() -> new ClassTransform() {\n+        return ClassFile.of().transformClass(m, ClassTransform.ofStateful(() -> new ClassTransform() {\n","filename":"test\/jdk\/jdk\/classfile\/examples\/AnnotationsExamples.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-        return ClassFile.of().transform(cm, (cb, ce) -> {\n+        return ClassFile.of().transformClass(cm, (cb, ce) -> {\n@@ -74,1 +74,1 @@\n-        return ClassFile.of().transform(cm, (cb, ce) -> {\n+        return ClassFile.of().transformClass(cm, (cb, ce) -> {\n@@ -83,1 +83,1 @@\n-        return ClassFile.of().transform(cm, (cb, ce) -> {\n+        return ClassFile.of().transformClass(cm, (cb, ce) -> {\n@@ -92,1 +92,1 @@\n-        return ClassFile.of().transform(cm, ClassTransform.endHandler(cb -> cb.withSuperclass(superclass)));\n+        return ClassFile.of().transformClass(cm, ClassTransform.endHandler(cb -> cb.withSuperclass(superclass)));\n@@ -96,1 +96,1 @@\n-        return ClassFile.of().transform(cm, (cb, ce) -> {\n+        return ClassFile.of().transformClass(cm, (cb, ce) -> {\n@@ -107,1 +107,1 @@\n-        return ClassFile.of().transform(cm, ClassTransform.ofStateful(()  -> new ClassTransform() {\n+        return ClassFile.of().transformClass(cm, ClassTransform.ofStateful(()  -> new ClassTransform() {\n@@ -136,1 +136,1 @@\n-        return ClassFile.of().transform(cm, ClassTransform.ofStateful(()  -> new ClassTransform() {\n+        return ClassFile.of().transformClass(cm, ClassTransform.ofStateful(()  -> new ClassTransform() {\n@@ -163,1 +163,1 @@\n-        return ClassFile.of().transform(cm, ClassTransform.dropping(e -> e instanceof SignatureAttribute));\n+        return ClassFile.of().transformClass(cm, ClassTransform.dropping(e -> e instanceof SignatureAttribute));\n@@ -167,1 +167,1 @@\n-        return ClassFile.of().transform(cm, (cb, ce) -> {\n+        return ClassFile.of().transformClass(cm, (cb, ce) -> {\n@@ -179,1 +179,1 @@\n-        return ClassFile.of().transform(cm, ClassTransform.dropping(e -> e instanceof SignatureAttribute)\n+        return ClassFile.of().transformClass(cm, ClassTransform.dropping(e -> e instanceof SignatureAttribute)\n@@ -190,1 +190,1 @@\n-        return ClassFile.of().transform(cm, ClassTransform.dropping(e -> e instanceof FieldModel fm\n+        return ClassFile.of().transformClass(cm, ClassTransform.dropping(e -> e instanceof FieldModel fm\n@@ -195,1 +195,1 @@\n-        return ClassFile.of().transform(cm, ClassTransform.endHandler(cb -> cb.withField(\"cool\", ClassDesc.ofDescriptor(\"(I)D\"), ClassFile.ACC_PUBLIC)));\n+        return ClassFile.of().transformClass(cm, ClassTransform.endHandler(cb -> cb.withField(\"cool\", ClassDesc.ofDescriptor(\"(I)D\"), ClassFile.ACC_PUBLIC)));\n@@ -199,1 +199,1 @@\n-        return ClassFile.of().transform(cm, ClassTransform.transformingFields((fb, fe) -> {\n+        return ClassFile.of().transformClass(cm, ClassTransform.transformingFields((fb, fe) -> {\n@@ -208,1 +208,1 @@\n-        return ClassFile.of().transform(cm, ClassTransform.transformingFields((fb, fe) -> {\n+        return ClassFile.of().transformClass(cm, ClassTransform.transformingFields((fb, fe) -> {\n@@ -217,1 +217,1 @@\n-        return ClassFile.of().transform(cm, ClassTransform.transformingMethods(\n+        return ClassFile.of().transformClass(cm, ClassTransform.transformingMethods(\n@@ -261,1 +261,1 @@\n-        return ClassFile.of().transform(cm, ClassTransform.transformingMethodBodies(transform));\n+        return ClassFile.of().transformClass(cm, ClassTransform.transformingMethodBodies(transform));\n@@ -265,1 +265,1 @@\n-        return ClassFile.of().transform(cm, ClassTransform.transformingMethodBodies((codeB, codeE) -> {\n+        return ClassFile.of().transformClass(cm, ClassTransform.transformingMethodBodies((codeB, codeE) -> {\n@@ -277,1 +277,1 @@\n-        return ClassFile.of().transform(cm, ClassTransform.transformingMethodBodies((codeB, codeE) -> {\n+        return ClassFile.of().transformClass(cm, ClassTransform.transformingMethodBodies((codeB, codeE) -> {\n","filename":"test\/jdk\/jdk\/classfile\/examples\/ExampleGallery.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n-        return ClassFile.of().transform(cm, (cb, ce) -> {\n+        return ClassFile.of().transformClass(cm, (cb, ce) -> {\n","filename":"test\/jdk\/jdk\/classfile\/examples\/ExperimentalTransformExamples.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-        return ClassFile.of().transform(cm, ClassTransform.ACCEPT_ALL);\n+        return ClassFile.of().transformClass(cm, ClassTransform.ACCEPT_ALL);\n@@ -45,1 +45,1 @@\n-        return ClassFile.of().transform(cm, (b, e) -> {\n+        return ClassFile.of().transformClass(cm, (b, e) -> {\n@@ -52,1 +52,1 @@\n-        return ClassFile.of().transform(cm, (b, e) ->\n+        return ClassFile.of().transformClass(cm, (b, e) ->\n@@ -60,1 +60,1 @@\n-        return ClassFile.of().transform(cm, (b, e) -> {\n+        return ClassFile.of().transformClass(cm, (b, e) -> {\n@@ -67,1 +67,1 @@\n-        return ClassFile.of().transform(cm, (b, e) -> {\n+        return ClassFile.of().transformClass(cm, (b, e) -> {\n","filename":"test\/jdk\/jdk\/classfile\/examples\/TransformExamples.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -190,1 +190,1 @@\n-            this.transform = bytes -> cc.transform(cc.parse(bytes), classTransform);\n+            this.transform = bytes -> cc.transformClass(cc.parse(bytes), classTransform);\n@@ -215,1 +215,1 @@\n-            return cc.transform(cm, (cb, ce) -> {\n+            return cc.transformClass(cm, (cb, ce) -> {\n@@ -256,1 +256,1 @@\n-            return cc.transform(cm, new ClassTransform() {\n+            return cc.transformClass(cm, new ClassTransform() {\n@@ -294,1 +294,1 @@\n-            return cc.transform(cm, (builder, element) -> {\n+            return cc.transformClass(cm, (builder, element) -> {\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/Transforms.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -320,1 +320,1 @@\n-        return cf.transform(cf.parse(bytes), (clb, ce) -> {\n+        return cf.transformClass(cf.parse(bytes), (clb, ce) -> {\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestInstrumentation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-                result = cf.transform(cf.parse(bytes), (clb, ce) -> {\n+                result = cf.transformClass(cf.parse(bytes), (clb, ce) -> {\n","filename":"test\/jdk\/jdk\/jfr\/javaagent\/TestEventInstrumentation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-        return ClassFile.of().transform(classModel,\n+        return ClassFile.of().transformClass(classModel,\n","filename":"test\/jdk\/jdk\/lambda\/separate\/ClassToInterfaceConverter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -187,1 +187,1 @@\n-        byte[] bazBytes = ClassFile.of().transform(baz, ClassTransform.transformingMethods((methodBuilder, methodElement) -> {\n+        byte[] bazBytes = ClassFile.of().transformClass(baz, ClassTransform.transformingMethods((methodBuilder, methodElement) -> {\n@@ -203,1 +203,1 @@\n-            bazBytes = ClassFile.of().transform(baz, ClassTransform.transformingMethods((methodBuilder, methodElement) -> {\n+            bazBytes = ClassFile.of().transformClass(baz, ClassTransform.transformingMethods((methodBuilder, methodElement) -> {\n","filename":"test\/langtools\/tools\/javac\/MethodParametersTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -187,1 +188,1 @@\n-        byte[] Bytes = ClassFile.of().transform(cf, ClassTransform\n+        byte[] Bytes = ClassFile.of().transformClass(cf, ClassTransform\n","filename":"test\/langtools\/tools\/javac\/classreader\/8171132\/BadConstantValue.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -151,1 +152,1 @@\n-        bytes = cf.transform(classModel, classTransform);\n+        bytes = cf.transformClass(classModel, classTransform);\n","filename":"test\/langtools\/tools\/javac\/classreader\/BadMethodParameter.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-        ClassFile.of().transform(cf, ClassTransform.dropping(ce -> ce instanceof ClassFileVersion)\n+        ClassFile.of().transformClass(cf, ClassTransform.dropping(ce -> ce instanceof ClassFileVersion)\n","filename":"test\/langtools\/tools\/javac\/defaultMethods\/BadClassfile.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -746,1 +746,1 @@\n-            byte[] newBytes = ClassFile.of().transform(cf,\n+            byte[] newBytes = ClassFile.of().transformClass(cf,\n","filename":"test\/langtools\/tools\/javac\/launcher\/SourceLauncherTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -269,1 +269,1 @@\n-        byte[] newBytes = ClassFile.of().transform(cm, ClassTransform.dropping(ce -> ce instanceof ModuleResolutionAttribute).\n+        byte[] newBytes = ClassFile.of().transformClass(cm, ClassTransform.dropping(ce -> ce instanceof ModuleResolutionAttribute).\n","filename":"test\/langtools\/tools\/javac\/modules\/IncubatingTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -240,1 +240,1 @@\n-        byte[] newBytes = ClassFile.of().transform(cm1, ClassTransform.dropping(ce -> ce instanceof ModuleAttribute).\n+        byte[] newBytes = ClassFile.of().transformClass(cm1, ClassTransform.dropping(ce -> ce instanceof ModuleAttribute).\n","filename":"test\/langtools\/tools\/javac\/modules\/JavaBaseTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -246,1 +246,1 @@\n-        byte[] newBytes = ClassFile.of().transform(cm, ClassTransform.dropping(ce -> ce instanceof ModuleAttribute).\n+        byte[] newBytes = ClassFile.of().transformClass(cm, ClassTransform.dropping(ce -> ce instanceof ModuleAttribute).\n","filename":"test\/langtools\/tools\/javac\/modules\/OpenModulesTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1073,1 +1073,1 @@\n-                                       cf.transform(cf.parse(moduleInfo),\n+                                       cf.transformClass(cf.parse(moduleInfo),\n@@ -1182,1 +1182,1 @@\n-            byte[] newData = cf.transform(cm, (builder, element) -> {\n+            byte[] newData = cf.transformClass(cm, (builder, element) -> {\n","filename":"test\/langtools\/tools\/javac\/platform\/createsymbols\/CreateSymbolsTestImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -305,1 +305,1 @@\n-        byte[] newClassFileBytes = ClassFile.of().transform(cf, ClassTransform.dropping(ce -> ce instanceof ModuleAttribute)\n+        byte[] newClassFileBytes = ClassFile.of().transformClass(cf, ClassTransform.dropping(ce -> ce instanceof ModuleAttribute)\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestOrigin.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-        var bytes = cf.transform(cm, (cb, ce) -> {\n+        var bytes = cf.transformClass(cm, (cb, ce) -> {\n","filename":"test\/langtools\/tools\/javap\/UndefinedAccessFlagTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-            bh.consume(cc.transform(cc.parse(bytes), transform.transform));\n+            bh.consume(cc.transformClass(cc.parse(bytes), transform.transform));\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/AdHocAdapt.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -102,1 +102,1 @@\n-        bh.consume(sharedCP.transform(benchModel, threeLevelNoop));\n+        bh.consume(sharedCP.transformClass(benchModel, threeLevelNoop));\n@@ -108,1 +108,1 @@\n-        bh.consume(newCP.transform(benchModel, threeLevelNoop));\n+        bh.consume(newCP.transformClass(benchModel, threeLevelNoop));\n@@ -114,1 +114,1 @@\n-        bh.consume(sharedCP.transform(benchModel, addNOP));\n+        bh.consume(sharedCP.transformClass(benchModel, addNOP));\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/ClassfileBenchmark.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-            bh.consume(cc.transform(cm, threeLevelNoop));\n+            bh.consume(cc.transformClass(cm, threeLevelNoop));\n@@ -55,1 +55,1 @@\n-            bh.consume(cc.transform(cm, threeLevelNoop));\n+            bh.consume(cc.transformClass(cm, threeLevelNoop));\n@@ -65,1 +65,1 @@\n-            bh.consume(cc.transform(cm, threeLevelNoop));\n+            bh.consume(cc.transformClass(cm, threeLevelNoop));\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/ParseOptions.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,1 +91,1 @@\n-        cc.transform(clm, ClassTransform.transformingMethodBodies((cob, coe) -> {\n+        cc.transformClass(clm, ClassTransform.transformingMethodBodies((cob, coe) -> {\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/RebuildMethodBodies.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -187,1 +187,1 @@\n-            this.transform = bytes -> cc.transform(cc.parse(bytes), classTransform);\n+            this.transform = bytes -> cc.transformClass(cc.parse(bytes), classTransform);\n@@ -201,1 +201,1 @@\n-            return cc.transform(cm, (cb, ce) -> {\n+            return cc.transformClass(cm, (cb, ce) -> {\n@@ -242,1 +242,1 @@\n-            return cc.transform(cm, new ClassTransform() {\n+            return cc.transformClass(cm, new ClassTransform() {\n@@ -280,1 +280,1 @@\n-            return cc.transform(cm, (builder, element) -> {\n+            return cc.transformClass(cm, (builder, element) -> {\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/Transforms.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}