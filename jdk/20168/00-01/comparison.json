{"files":[{"patch":"@@ -559,6 +559,19 @@\n-        if (len != 0) {\n-            int digit = ~0xFF;\n-            int i = 0;\n-            byte firstChar = value[i++];\n-            if (firstChar != '-' && firstChar != '+') {\n-                digit = CharacterDataLatin1.digit(firstChar);\n+        if (len == 0) {\n+            throw NumberFormatException.forInputString(\"\", radix);\n+        }\n+        int digit = ~0xFF;\n+        int i = 0;\n+        byte firstChar = value[i++];\n+        if (firstChar != '-' && firstChar != '+') {\n+            digit = CharacterDataLatin1.digit(firstChar);\n+        }\n+        if (digit >= 0 || digit == ~0xFF && len > 1) {\n+            int limit = firstChar != '-' ? MIN_VALUE + 1 : MIN_VALUE;\n+            int multmin = -214748364; \/\/ actual limit \/ 10;\n+            int result = -(digit & 0xFF);\n+            boolean inRange = true;\n+            \/* Accumulating negatively avoids surprises near MAX_VALUE *\/\n+            while (i < len && (digit = CharacterDataLatin1.digit(value[i++])) >= 0\n+                    && (inRange = result > multmin\n+                        || result == multmin && digit <= radix * multmin - limit)) {\n+                result = radix * result - digit;\n@@ -566,14 +579,2 @@\n-            if (digit >= 0 || digit == ~0xFF && len > 1) {\n-                int limit = firstChar != '-' ? MIN_VALUE + 1 : MIN_VALUE;\n-                int multmin = -214748364; \/\/ actual limit \/ 10;\n-                int result = -(digit & 0xFF);\n-                boolean inRange = true;\n-                \/* Accumulating negatively avoids surprises near MAX_VALUE *\/\n-                while (i < len && (digit = CharacterDataLatin1.digit(value[i++])) >= 0\n-                        && (inRange = result > multmin\n-                            || result == multmin && digit <= 10 * multmin - limit)) {\n-                    result = 10 * result - digit;\n-                }\n-                if (inRange && i == len && digit >= 0) {\n-                    return firstChar != '-' ? -result : result;\n-                }\n+            if (inRange && i == len && digit >= 0) {\n+                return firstChar != '-' ? -result : result;\n@@ -582,1 +583,1 @@\n-        throw NumberFormatException.forInputString(s, 10);\n+        throw NumberFormatException.forInputString(s, radix);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":22,"deletions":21,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -589,6 +589,19 @@\n-        if (len != 0) {\n-            int digit = ~0xFF;\n-            int i = 0;\n-            byte firstChar = value[i++];\n-            if (firstChar != '-' && firstChar != '+') {\n-                digit = CharacterDataLatin1.digit(firstChar);\n+        if (len == 0) {\n+            throw NumberFormatException.forInputString(\"\", radix);\n+        }\n+        int digit = ~0xFF;\n+        int i = 0;\n+        byte firstChar = value[i++];\n+        if (firstChar != '-' && firstChar != '+') {\n+            digit = CharacterDataLatin1.digit(firstChar);\n+        }\n+        if (digit >= 0 || digit == ~0xFF && len > 1) {\n+            long limit = firstChar != '-' ? MIN_VALUE + 1 : MIN_VALUE;\n+            long multmin = -922337203685477580L; \/\/ actual limit \/ 10\n+            long result = -(digit & 0xFF);\n+            boolean inRange = true;\n+            \/* Accumulating negatively avoids surprises near MAX_VALUE *\/\n+            while (i < len && (digit = CharacterDataLatin1.digit(value[i++])) >= 0\n+                    && (inRange = result > multmin\n+                        || result == multmin && digit <= (int) (radix * multmin - limit))) {\n+                result = radix * result - digit;\n@@ -596,14 +609,2 @@\n-            if (digit >= 0 || digit == ~0xFF && len > 1) {\n-                long limit = firstChar != '-' ? MIN_VALUE + 1 : MIN_VALUE;\n-                long multmin = -922337203685477580L; \/\/ actual limit \/ 10\n-                long result = -(digit & 0xFF);\n-                boolean inRange = true;\n-                \/* Accumulating negatively avoids surprises near MAX_VALUE *\/\n-                while (i < len && (digit = CharacterDataLatin1.digit(value[i++])) >= 0\n-                        && (inRange = result > multmin\n-                            || result == multmin && digit <= (int) (10 * multmin - limit))) {\n-                    result = 10 * result - digit;\n-                }\n-                if (inRange && i == len && digit >= 0) {\n-                    return firstChar != '-' ? -result : result;\n-                }\n+            if (inRange && i == len && digit >= 0) {\n+                return firstChar != '-' ? -result : result;\n@@ -612,1 +613,1 @@\n-        throw NumberFormatException.forInputString(s, 10);\n+        throw NumberFormatException.forInputString(s, radix);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":22,"deletions":21,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/Integers.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}