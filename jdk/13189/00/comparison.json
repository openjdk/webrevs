{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,2 @@\n- * @modules java.net.http\n- *          jdk.httpserver\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters jdk.test.lib.net.SimpleSSLContext\n@@ -34,4 +34,3 @@\n-import com.sun.net.httpserver.HttpContext;\n-import com.sun.net.httpserver.HttpExchange;\n-import com.sun.net.httpserver.HttpHandler;\n-import com.sun.net.httpserver.HttpServer;\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.test.lib.net.SimpleSSLContext;\n+\n@@ -41,2 +40,0 @@\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n@@ -46,0 +43,1 @@\n+import java.net.http.HttpClient.Version;\n@@ -52,0 +50,2 @@\n+import javax.net.ssl.SSLContext;\n+\n@@ -54,1 +54,1 @@\n-public class BasicAuthTest {\n+public class BasicAuthTest implements HttpServerAdapters {\n@@ -61,2 +61,8 @@\n-        InetSocketAddress addr = new InetSocketAddress(InetAddress.getLoopbackAddress(),0);\n-        HttpServer server = HttpServer.create(addr, 10);\n+        test(Version.HTTP_1_1, false);\n+        test(Version.HTTP_2, false);\n+        test(Version.HTTP_1_1, true);\n+        test(Version.HTTP_2, true);\n+    }\n+\n+    public static void test(Version version, boolean secure) throws Exception {\n+\n@@ -65,5 +71,3 @@\n-        HttpContext serverContext = server.createContext(\"\/test\", h);\n-        int port = server.getAddress().getPort();\n-        System.out.println(\"Server port = \" + port);\n-\n-        ClientAuth ca = new ClientAuth();\n+        SSLContext sslContext = secure ? new SimpleSSLContext().get() : null;\n+        HttpTestServer server = HttpTestServer.create(version, sslContext, e);\n+        HttpTestContext serverContext = server.addHandler(h,\"\/test\/\");\n@@ -72,1 +76,0 @@\n-        server.setExecutor(e);\n@@ -74,3 +77,6 @@\n-        HttpClient client = HttpClient.newBuilder()\n-                                      .authenticator(ca)\n-                                      .build();\n+        System.out.println(\"Server auth = \" + server.serverAuthority());\n+\n+        ClientAuth ca = new ClientAuth();\n+        var clientBuilder = HttpClient.newBuilder();\n+        if (sslContext != null) clientBuilder.sslContext(sslContext);\n+        HttpClient client = clientBuilder.authenticator(ca).build();\n@@ -79,2 +85,4 @@\n-            URI uri = new URI(\"http:\/\/localhost:\" + Integer.toString(port) + \"\/test\/foo\");\n-            HttpRequest req = HttpRequest.newBuilder(uri).GET().build();\n+            String scheme = sslContext == null ? \"http\" : \"https\";\n+            URI uri = new URI(scheme + \":\/\/\" + server.serverAuthority() + \"\/test\/foo\/\"+version);\n+            var builder = HttpRequest.newBuilder(uri);\n+            HttpRequest req = builder.copy().GET().build();\n@@ -82,0 +90,1 @@\n+            System.out.println(\"\\n\\nSending request: \" + req);\n@@ -90,0 +99,1 @@\n+            System.out.println(\"\\n\\nRepeat request: \" + req);\n@@ -98,2 +108,1 @@\n-            req = HttpRequest.newBuilder(uri)\n-                             .POST(BodyPublishers.ofString(POST_BODY))\n+            req = builder.copy().POST(BodyPublishers.ofString(POST_BODY))\n@@ -101,0 +110,1 @@\n+            System.out.println(\"\\n\\nSending POST request: \" + req);\n@@ -106,0 +116,2 @@\n+\n+\n@@ -107,1 +119,1 @@\n-            server.stop(0);\n+            server.stop();\n@@ -139,1 +151,1 @@\n-   static class Handler implements HttpHandler {\n+   static class Handler implements HttpTestHandler {\n@@ -143,1 +155,1 @@\n-        public void handle(HttpExchange he) throws IOException {\n+        public void handle(HttpTestExchange he) throws IOException {\n@@ -149,1 +161,1 @@\n-                    he.sendResponseHeaders(500, -1);\n+                    he.sendResponseHeaders(500, 0);\n@@ -152,1 +164,1 @@\n-                    he.sendResponseHeaders(200, -1);\n+                    he.sendResponseHeaders(200, 0);\n","filename":"test\/jdk\/java\/net\/httpclient\/BasicAuthTest.java","additions":42,"deletions":30,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -70,0 +70,2 @@\n+\n+import jdk.httpclient.test.lib.common.HttpServerAdapters.AbstractHttpAuthFilter.HttpAuthMode;\n@@ -91,1 +93,1 @@\n-        SERVER, PROXY, SERVER307, PROXY305\n+        SERVER, PROXY, SERVER307, PROXY305;\n@@ -93,0 +95,6 @@\n+        public HttpAuthMode authMode() {\n+            return switch (this) {\n+                case SERVER, SERVER307 -> HttpAuthMode.SERVER;\n+                case PROXY, PROXY305 -> HttpAuthMode.PROXY;\n+            };\n+        }\n@@ -483,0 +491,10 @@\n+    static BasicAuthenticator toBasicAuthenticator(HttpTestAuthenticator auth) {\n+        final String realm = auth.getRealm();\n+        return new BasicAuthenticator(realm) {\n+            @Override\n+            public boolean checkCredentials(String username, String pwd) {\n+                return auth.getUserName().equals(username)\n+                        && new String(auth.getPassword(username)).equals(pwd);\n+            }\n+        };\n+    }\n@@ -486,10 +504,2 @@\n-        final String realm = auth.getRealm();\n-        com.sun.net.httpserver.Authenticator authenticator =\n-            new BasicAuthenticator(realm) {\n-                @Override\n-                public boolean checkCredentials(String username, String pwd) {\n-                    return auth.getUserName().equals(username)\n-                           && new String(auth.getPassword(username)).equals(pwd);\n-                }\n-        };\n-        ctxt.setAuthenticator(authenticator);\n+\n+        ctxt.setAuthenticator(toBasicAuthenticator(auth));\n@@ -662,1 +672,1 @@\n-                \/\/ DIGEST authentication is handled by the handler.\n+                \/\/ DIGEST authentication is handled by the filter.\n@@ -708,79 +718,0 @@\n-    \/\/ Abstract HTTP filter class.\n-    private abstract static class AbstractHttpFilter extends HttpTestFilter {\n-\n-        final HttpAuthType authType;\n-        final String type;\n-        public AbstractHttpFilter(HttpAuthType authType, String type) {\n-            this.authType = authType;\n-            this.type = type;\n-        }\n-\n-        String getLocation() {\n-            return \"Location\";\n-        }\n-        String getAuthenticate() {\n-            return authType == HttpAuthType.PROXY\n-                    ? \"Proxy-Authenticate\" : \"WWW-Authenticate\";\n-        }\n-        String getAuthorization() {\n-            return authType == HttpAuthType.PROXY\n-                    ? \"Proxy-Authorization\" : \"Authorization\";\n-        }\n-        int getUnauthorizedCode() {\n-            return authType == HttpAuthType.PROXY\n-                    ? HttpURLConnection.HTTP_PROXY_AUTH\n-                    : HttpURLConnection.HTTP_UNAUTHORIZED;\n-        }\n-        String getKeepAlive() {\n-            return \"keep-alive\";\n-        }\n-        String getConnection() {\n-            return authType == HttpAuthType.PROXY\n-                    ? \"Proxy-Connection\" : \"Connection\";\n-        }\n-        protected abstract boolean isAuthentified(HttpTestExchange he) throws IOException;\n-        protected abstract void requestAuthentication(HttpTestExchange he) throws IOException;\n-        protected void accept(HttpTestExchange he, HttpChain chain) throws IOException {\n-            chain.doFilter(he);\n-        }\n-\n-        @Override\n-        public String description() {\n-            return \"Filter for \" + type;\n-        }\n-        @Override\n-        public void doFilter(HttpTestExchange he, HttpChain chain) throws IOException {\n-            try {\n-                System.out.println(type + \": Got \" + he.getRequestMethod()\n-                    + \": \" + he.getRequestURI()\n-                    + \"\\n\" + DigestEchoServer.toString(he.getRequestHeaders()));\n-\n-                \/\/ Assert only a single value for Expect. Not directly related\n-                \/\/ to digest authentication, but verifies good client behaviour.\n-                List<String> expectValues = he.getRequestHeaders().get(\"Expect\");\n-                if (expectValues != null && expectValues.size() > 1) {\n-                    throw new IOException(\"Expect:  \" + expectValues);\n-                }\n-\n-                if (!isAuthentified(he)) {\n-                    try {\n-                        requestAuthentication(he);\n-                        he.sendResponseHeaders(getUnauthorizedCode(), -1);\n-                        System.out.println(type\n-                            + \": Sent back \" + getUnauthorizedCode());\n-                    } finally {\n-                        he.close();\n-                    }\n-                } else {\n-                    accept(he, chain);\n-                }\n-            } catch (RuntimeException | Error | IOException t) {\n-               System.err.println(type\n-                    + \": Unexpected exception while handling request: \" + t);\n-               t.printStackTrace(System.err);\n-               he.close();\n-               throw t;\n-            }\n-        }\n-\n-    }\n@@ -921,1 +852,1 @@\n-    private static class HttpNoAuthFilter extends AbstractHttpFilter {\n+    private static class HttpNoAuthFilter extends AbstractHttpAuthFilter {\n@@ -924,1 +855,1 @@\n-            String type = authType == HttpAuthType.SERVER\n+            String type = authType.authMode() == HttpAuthMode.SERVER\n@@ -930,1 +861,1 @@\n-            super(authType, type(key, authType));\n+            super(authType.authMode(), type(key, authType));\n@@ -951,1 +882,1 @@\n-    private static class HttpBasicFilter extends AbstractHttpFilter {\n+    private static class HttpBasicFilter extends HttpBasicAuthFilter {\n@@ -954,1 +885,1 @@\n-            String type = authType == HttpAuthType.SERVER\n+            String type = authType.authMode() == HttpAuthMode.SERVER\n@@ -959,1 +890,0 @@\n-        private final HttpTestAuthenticator auth;\n@@ -962,51 +892,1 @@\n-            super(authType, type(key, authType));\n-            this.auth = auth;\n-        }\n-\n-        @Override\n-        protected void requestAuthentication(HttpTestExchange he)\n-            throws IOException\n-        {\n-            String headerName = getAuthenticate();\n-            String headerValue = \"Basic realm=\\\"\" + auth.getRealm() + \"\\\"\";\n-            he.getResponseHeaders().addHeader(headerName, headerValue);\n-            System.out.println(type + \": Requesting Basic Authentication, \"\n-                               + headerName + \" : \"+ headerValue);\n-        }\n-\n-        @Override\n-        protected boolean isAuthentified(HttpTestExchange he) {\n-            if (he.getRequestHeaders().containsKey(getAuthorization())) {\n-                List<String> authorization =\n-                    he.getRequestHeaders().get(getAuthorization());\n-                for (String a : authorization) {\n-                    System.out.println(type + \": processing \" + a);\n-                    int sp = a.indexOf(' ');\n-                    if (sp < 0) return false;\n-                    String scheme = a.substring(0, sp);\n-                    if (!\"Basic\".equalsIgnoreCase(scheme)) {\n-                        System.out.println(type + \": Unsupported scheme '\"\n-                                           + scheme +\"'\");\n-                        return false;\n-                    }\n-                    if (a.length() <= sp+1) {\n-                        System.out.println(type + \": value too short for '\"\n-                                            + scheme +\"'\");\n-                        return false;\n-                    }\n-                    a = a.substring(sp+1);\n-                    return validate(a);\n-                }\n-                return false;\n-            }\n-            return false;\n-        }\n-\n-        boolean validate(String a) {\n-            byte[] b = Base64.getDecoder().decode(a);\n-            String userpass = new String (b);\n-            int colon = userpass.indexOf (':');\n-            String uname = userpass.substring (0, colon);\n-            String pass = userpass.substring (colon+1);\n-            return auth.getUserName().equals(uname) &&\n-                   new String(auth.getPassword(uname)).equals(pass);\n+            super(toBasicAuthenticator(auth), authType.authMode(), type(key, authType));\n@@ -1017,1 +897,1 @@\n-            return \"Filter for BASIC authentication: \" + type;\n+            return \"Filter for BASIC authentication: \" + type();\n@@ -1026,1 +906,1 @@\n-    private static class HttpDigestFilter extends AbstractHttpFilter {\n+    private static class HttpDigestFilter extends AbstractHttpAuthFilter {\n@@ -1029,1 +909,1 @@\n-            String type = authType == HttpAuthType.SERVER\n+            String type = authType.authMode() == HttpAuthMode.SERVER\n@@ -1041,0 +921,1 @@\n+        private final String type;\n@@ -1042,1 +923,1 @@\n-            super(authType, type(key, authType));\n+            super(authType.authMode(), type(key, authType));\n@@ -1047,0 +928,1 @@\n+            this.type = type();\n","filename":"test\/jdk\/java\/net\/httpclient\/DigestEchoServer.java","additions":34,"deletions":152,"binary":false,"changes":186,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import com.sun.net.httpserver.Authenticator;\n+import com.sun.net.httpserver.BasicAuthenticator;\n@@ -51,0 +53,1 @@\n+import java.util.Base64;\n@@ -61,0 +64,1 @@\n+import java.util.stream.Collectors;\n@@ -509,0 +513,169 @@\n+    static String toString(HttpTestRequestHeaders headers) {\n+        return headers.entrySet().stream()\n+                .map((e) -> e.getKey() + \": \" + e.getValue())\n+                .collect(Collectors.joining(\"\\n\"));\n+    }\n+\n+    abstract static class AbstractHttpAuthFilter extends HttpTestFilter {\n+\n+        public static final int HTTP_PROXY_AUTH = 407;\n+        public static final int HTTP_UNAUTHORIZED = 401;\n+        public enum HttpAuthMode {PROXY, SERVER}\n+        final HttpAuthMode authType;\n+        final String type;\n+\n+        public AbstractHttpAuthFilter(HttpAuthMode authType, String type) {\n+            this.authType = authType;\n+            this.type = type;\n+        }\n+\n+        public final String type() {\n+            return type;\n+        }\n+\n+        protected String getLocation() {\n+            return \"Location\";\n+        }\n+        protected String getKeepAlive() {\n+            return \"keep-alive\";\n+        }\n+        protected String getConnection() {\n+            return authType == HttpAuthMode.PROXY ? \"Proxy-Connection\" : \"Connection\";\n+        }\n+\n+        protected String getAuthenticate() {\n+            return authType == HttpAuthMode.PROXY\n+                    ? \"Proxy-Authenticate\" : \"WWW-Authenticate\";\n+        }\n+        protected String getAuthorization() {\n+            return authType == HttpAuthMode.PROXY\n+                    ? \"Proxy-Authorization\" : \"Authorization\";\n+        }\n+        protected int getUnauthorizedCode() {\n+            return authType == HttpAuthMode.PROXY\n+                    ? HTTP_PROXY_AUTH\n+                    : HTTP_UNAUTHORIZED;\n+        }\n+        protected abstract boolean isAuthentified(HttpTestExchange he) throws IOException;\n+        protected abstract void requestAuthentication(HttpTestExchange he) throws IOException;\n+        protected void accept(HttpTestExchange he, HttpChain chain) throws IOException {\n+            chain.doFilter(he);\n+        }\n+\n+        @Override\n+        public void doFilter(HttpTestExchange he, HttpChain chain) throws IOException {\n+            try {\n+                System.out.println(type + \": Got \" + he.getRequestMethod()\n+                        + \": \" + he.getRequestURI()\n+                        + \"\\n\" + HttpServerAdapters.toString(he.getRequestHeaders()));\n+\n+                \/\/ Assert only a single value for Expect. Not directly related\n+                \/\/ to digest authentication, but verifies good client behaviour.\n+                List<String> expectValues = he.getRequestHeaders().get(\"Expect\");\n+                if (expectValues != null && expectValues.size() > 1) {\n+                    throw new IOException(\"Expect:  \" + expectValues);\n+                }\n+\n+                if (!isAuthentified(he)) {\n+                    try {\n+                        requestAuthentication(he);\n+                        he.sendResponseHeaders(getUnauthorizedCode(), -1);\n+                        System.out.println(type\n+                                + \": Sent back \" + getUnauthorizedCode());\n+                    } finally {\n+                        he.close();\n+                    }\n+                } else {\n+                    accept(he, chain);\n+                }\n+            } catch (RuntimeException | Error | IOException t) {\n+                System.err.println(type\n+                        + \": Unexpected exception while handling request: \" + t);\n+                t.printStackTrace(System.err);\n+                he.close();\n+                throw t;\n+            }\n+        }\n+\n+    }\n+\n+    public static class HttpBasicAuthFilter extends AbstractHttpAuthFilter {\n+\n+            static String type(HttpAuthMode authType) {\n+                String type = authType == HttpAuthMode.SERVER\n+                        ? \"BasicAuth Server Filter\" : \"BasicAuth Proxy Filter\";\n+                return \"[\"+type+\"]\";\n+            }\n+\n+            final BasicAuthenticator auth;\n+            public HttpBasicAuthFilter(BasicAuthenticator auth) {\n+                this(auth, HttpAuthMode.SERVER);\n+            }\n+\n+            public HttpBasicAuthFilter(BasicAuthenticator auth, HttpAuthMode authType) {\n+                this(auth, authType, type(authType));\n+            }\n+\n+            public HttpBasicAuthFilter(BasicAuthenticator auth, HttpAuthMode authType, String typeDesc) {\n+                super(authType, typeDesc);\n+                this.auth = auth;\n+            }\n+\n+            protected String getAuthValue() {\n+                return \"Basic realm=\\\"\" + auth.getRealm() + \"\\\"\";\n+            }\n+\n+            @Override\n+            protected void requestAuthentication(HttpTestExchange he)\n+                    throws IOException\n+            {\n+                String headerName = getAuthenticate();\n+                String headerValue = getAuthValue();\n+                he.getResponseHeaders().addHeader(headerName, headerValue);\n+                System.out.println(type + \": Requesting Basic Authentication, \"\n+                        + headerName + \" : \"+ headerValue);\n+            }\n+\n+            @Override\n+            protected boolean isAuthentified(HttpTestExchange he) {\n+                if (he.getRequestHeaders().containsKey(getAuthorization())) {\n+                    List<String> authorization =\n+                            he.getRequestHeaders().get(getAuthorization());\n+                    for (String a : authorization) {\n+                        System.out.println(type + \": processing \" + a);\n+                        int sp = a.indexOf(' ');\n+                        if (sp < 0) return false;\n+                        String scheme = a.substring(0, sp);\n+                        if (!\"Basic\".equalsIgnoreCase(scheme)) {\n+                            System.out.println(type + \": Unsupported scheme '\"\n+                                    + scheme +\"'\");\n+                            return false;\n+                        }\n+                        if (a.length() <= sp+1) {\n+                            System.out.println(type + \": value too short for '\"\n+                                    + scheme +\"'\");\n+                            return false;\n+                        }\n+                        a = a.substring(sp+1);\n+                        return validate(a);\n+                    }\n+                    return false;\n+                }\n+                return false;\n+            }\n+\n+            boolean validate(String a) {\n+                byte[] b = Base64.getDecoder().decode(a);\n+                String userpass = new String (b);\n+                int colon = userpass.indexOf (':');\n+                String uname = userpass.substring (0, colon);\n+                String pass = userpass.substring (colon+1);\n+                return auth.checkCredentials(uname, pass);\n+            }\n+\n+        @Override\n+        public String description() {\n+            return \"HttpBasicAuthFilter\";\n+        }\n+    }\n+\n@@ -517,1 +690,1 @@\n-        \/\/ will throw UOE if the server is HTTP\/2\n+        \/\/ will throw UOE if the server is HTTP\/2 or Authenticator is not a BasicAuthenticator\n@@ -755,2 +928,7 @@\n-            public void setAuthenticator(com.sun.net.httpserver.Authenticator authenticator) {\n-                throw new UnsupportedOperationException(\"Can't set HTTP\/1.1 authenticator on HTTP\/2 context\");\n+            public void setAuthenticator(final Authenticator authenticator) {\n+                if (authenticator instanceof BasicAuthenticator basicAuth) {\n+                    addFilter(new HttpBasicAuthFilter(basicAuth));\n+                } else {\n+                    throw new UnsupportedOperationException(\n+                            \"only BasicAuthenticator is supported on HTTP\/2 context\");\n+                }\n","filename":"test\/jdk\/java\/net\/httpclient\/lib\/jdk\/httpclient\/test\/lib\/common\/HttpServerAdapters.java","additions":181,"deletions":3,"binary":false,"changes":184,"status":"modified"}]}