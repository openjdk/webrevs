{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import sun.net.www.protocol.http.AuthCacheValue;\n@@ -80,1 +81,3 @@\n-    public Authenticator() {}\n+    public Authenticator() {\n+        AuthCacheValue.registerAuthenticator(this);\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/net\/Authenticator.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.lang.ref.Cleaner;\n+import java.net.Authenticator;\n@@ -31,0 +33,1 @@\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -40,0 +43,1 @@\n+    final Cleaner cleaner;\n@@ -43,0 +47,1 @@\n+        cleaner = Cleaner.create();\n@@ -49,0 +54,38 @@\n+    \/\/ call to register Authenticator with Cleaner.\n+\n+    public void registerAuthenticator(Authenticator auth) {\n+        cleaner.register(auth, new CleanerAction(AuthenticatorKeys.getKey(auth)));\n+    }\n+\n+    \/\/ used for testing\n+    public int mapSize() {\n+        AtomicInteger count = new AtomicInteger();\n+        hashtable.forEach((k,v) -> {\n+            count.addAndGet(v == null ? 0: v.size());\n+        });\n+        return count.get();\n+    }\n+\n+    \/\/ Cleaner action run to remove all entries whose key ends with\n+    \/\/ ;auth=authkey\n+    \/\/ ie. all entries belonging to the given Authenticator\n+\n+    class CleanerAction implements Runnable {\n+        private final String authkey;\n+\n+        CleanerAction(String authkey) {\n+            this.authkey = \";auth=\" + authkey;\n+        }\n+\n+        public void run() {\n+            synchronized(AuthCacheImpl.this) {\n+                hashtable.forEach((String key,\n+                                   LinkedList<AuthCacheValue> list) -> {\n+                    if (key.endsWith(authkey)) {\n+                        hashtable.remove(key);\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/AuthCacheImpl.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.net.Authenticator;\n@@ -51,1 +52,1 @@\n-    protected static AuthCache cache = new AuthCacheImpl();\n+    protected static AuthCacheImpl cache = new AuthCacheImpl();\n@@ -53,1 +54,1 @@\n-    public static void setAuthCache (AuthCache map) {\n+    public static void setAuthCache (AuthCacheImpl map) {\n@@ -57,0 +58,8 @@\n+    public static AuthCacheImpl getAuthCache() {\n+        return cache;\n+    }\n+\n+    public static void registerAuthenticator(Authenticator a) {\n+        cache.registerAuthenticator(a);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/AuthCacheValue.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,188 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8304818\n+ * @modules java.base\/sun.net.www.protocol.http\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.util.ForceGC\n+ * @run main\/othervm AuthCache\n+ *\/\n+\n+import com.sun.net.httpserver.BasicAuthenticator;\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+\n+import java.io.IOException;\n+import java.lang.ref.PhantomReference;\n+import java.net.*;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+\n+import sun.net.www.protocol.http.AuthCacheValue;\n+import jdk.test.lib.util.ForceGC;\n+\n+public class AuthCache {\n+    static class ClientAuth extends Authenticator {\n+        private final String realm;\n+        private final String username;\n+        private final String password;\n+        private AtomicBoolean wasCalled = new AtomicBoolean();\n+\n+        private String errorMsg;\n+\n+        ClientAuth(String realm, String username, String password) {\n+            this.realm = realm;\n+            this.username = username;\n+            this.password = password;\n+        }\n+\n+        \/**\n+         * returns true if getPasswordAuthentication() was called\n+         * since the last time this method was called. The wasCalled\n+         * flag is cleared after each call.\n+         * If an error occurred, a RuntimeException is thrown\n+         * @return\n+         *\/\n+        public synchronized boolean wasCalled() {\n+            if (errorMsg != null)\n+                throw new RuntimeException(errorMsg);\n+\n+            return wasCalled.getAndSet(false);\n+        }\n+        protected synchronized PasswordAuthentication getPasswordAuthentication() {\n+            if (!getRequestingPrompt().equals(realm)) {\n+                errorMsg = String.format(\"Error: %s expected as realm, received %s\", realm, getRequestingPrompt());\n+            }\n+            wasCalled.set(true);\n+            return new PasswordAuthentication(username, password.toCharArray());\n+        }\n+    }\n+\n+    static final HttpHandler handler = (HttpExchange exch) -> {\n+        exch.sendResponseHeaders(200, -1);\n+        exch.close();\n+    };\n+\n+    static class ServerAuth extends BasicAuthenticator {\n+        private final String user, pass;\n+\n+        ServerAuth(String realm, String user, String pass) {\n+            super(realm);\n+            this.user = user;\n+            this.pass = pass;\n+        }\n+\n+        @Override\n+        public boolean checkCredentials(String username, String password) {\n+            return username.equals(user) && password.equals(pass);\n+        }\n+    }\n+    \/**\n+     * Creates two Authenticators and two realms (\"r1\" and \"r2\")\n+     * \"r1\" uses context \"\/path1\" credentials = user1\/pass1\n+     * \"r2\" uses context \"\/path2\" credentials = user2\/pass2\n+     *\n+     * 1) Send request to \"r1\" and \"r2\" expect both authenticators to be called\n+     *    cache size should be 4\n+     *\n+     * 2) Send request to \"r1\" and \"r2\". Authenticators should not be called (cache)\n+     *\n+     * 3) Clear reference to \"r1\" and call gc.\n+     *    cache size should be 2\n+     *\n+     * 4) Send request to \"r1\" and \"r2\". \"r1\" auth should be called, but not \"r2\"\n+     *    cache size should be 4\n+     *\/\n+    public static void main(String[] args) throws IOException {\n+        var clauth1 = new ClientAuth(\"r1\", \"user1\", \"pass1\");\n+        PhantomReference<Authenticator> ref = new PhantomReference<>(clauth1, null);\n+        var clauth2 = new ClientAuth(\"r2\", \"user2\", \"pass2\");\n+        var server = HttpServer.create(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), 0);\n+        var ctx1 = server.createContext(\"\/path1\", handler);\n+        ctx1.setAuthenticator(new ServerAuth(\"r1\", \"user1\", \"pass1\"));\n+\n+        var ctx2 = server.createContext(\"\/path2\", handler);\n+        ctx2.setAuthenticator(new ServerAuth(\"r2\", \"user2\", \"pass2\"));\n+        var addr = server.getAddress();\n+        var url1 = URI.create(\"http:\/\/\" + addr.getHostName() + \":\" + addr.getPort() + \"\/path1\/\").toURL();\n+        var url2 = URI.create(\"http:\/\/\" + addr.getHostName() + \":\" + addr.getPort() + \"\/path2\/\").toURL();\n+        server.start();\n+\n+        sendRequest(url1, url2, clauth1, clauth2, true, true);\n+        checkCacheSize(4);\n+        sendRequest(url1, url2, clauth1, clauth2, false, false);\n+        checkCacheSize(4);\n+        clauth1 = null;\n+        ForceGC.wait(() -> ref.refersTo(null));\n+        delay(1);\n+        checkCacheSize(2);\n+        clauth1 = new ClientAuth(\"r1\", \"user1\", \"pass1\");\n+        sendRequest(url1, url2, clauth1, clauth2, true, false);\n+        checkCacheSize(4);\n+        System.out.println(\"Passed\");\n+        server.stop(0);\n+    }\n+\n+    static void delay(int seconds) {\n+        try {\n+            Thread.sleep(seconds * 1000);\n+        } catch (InterruptedException e) {\n+        }\n+    }\n+\n+    static void checkCacheSize(int expected) {\n+        int found = AuthCacheValue.getAuthCache().mapSize();\n+        if (found != expected) {\n+            var msg = String.format(\"Cache size: expected %d, got %d\\n\", expected, found);\n+            throw new RuntimeException(msg);\n+        }\n+    }\n+\n+    static void sendRequest(URL u1, URL u2, ClientAuth a1, ClientAuth a2, boolean auth1Called, boolean auth2Called) throws IOException {\n+        var urlc1 = (HttpURLConnection)u1.openConnection();\n+        urlc1.setAuthenticator(a1);\n+        var urlc2 = (HttpURLConnection)u2.openConnection();\n+        urlc2.setAuthenticator(a2);\n+\n+        var is1 = urlc1.getInputStream();\n+        is1.readAllBytes();\n+        is1.close();\n+        var is2 = urlc2.getInputStream();\n+        is2.readAllBytes();\n+        is2.close();\n+\n+        boolean a1Called = a1.wasCalled();\n+        boolean a2Called = a2.wasCalled();\n+        if (a1Called && !auth1Called)\n+            throw new RuntimeException(\"a1Called && !auth1Called\");\n+        if (!a1Called && auth1Called)\n+            throw new RuntimeException(\"!a1Called && auth1Called\");\n+        if (a2Called && !auth2Called)\n+            throw new RuntimeException(\"a2Called && !auth2Called\");\n+        if (!a2Called && auth2Called)\n+            throw new RuntimeException(\"!a2Called && auth2Called\");\n+    }\n+}\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/AuthCache.java","additions":188,"deletions":0,"binary":false,"changes":188,"status":"added"}]}