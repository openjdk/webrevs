{"files":[{"patch":"@@ -97,1 +97,0 @@\n-    final int size;\n@@ -106,1 +105,2 @@\n-        return size;\n+        \/\/ Note: only lookupswitch and tableswitch have variable sizes\n+        return op.sizeIfFixed();\n@@ -109,1 +109,1 @@\n-    public AbstractInstruction(Opcode op, int size) {\n+    AbstractInstruction(Opcode op) {\n@@ -111,1 +111,0 @@\n-        this.size = size;\n@@ -121,2 +120,2 @@\n-        protected BoundInstruction(Opcode op, int size, CodeImpl code, int pos) {\n-            super(op, size);\n+        protected BoundInstruction(Opcode op, CodeImpl code, int pos) {\n+            super(op);\n@@ -134,1 +133,1 @@\n-            code.classReader.copyBytesTo(writer.bytecodesBufWriter, pos, size);\n+            code.classReader.copyBytesTo(writer.bytecodesBufWriter, pos, op.sizeIfFixed());\n@@ -142,1 +141,1 @@\n-            super(op, op.sizeIfFixed(), code, pos);\n+            super(op, code, pos);\n@@ -158,1 +157,1 @@\n-            return switch (size) {\n+            return switch (sizeInBytes()) {\n@@ -171,1 +170,1 @@\n-            super(op, op.sizeIfFixed(), code, pos);\n+            super(op, code, pos);\n@@ -186,1 +185,1 @@\n-            return switch (size) {\n+            return switch (sizeInBytes()) {\n@@ -189,1 +188,1 @@\n-                default -> throw new IllegalArgumentException(\"Unexpected op size: \" + size + \" -- \" + op);\n+                default -> throw new IllegalArgumentException(\"Unexpected op size: \" + sizeInBytes() + \" -- \" + op);\n@@ -199,1 +198,1 @@\n-            super(op, op.sizeIfFixed(), code, pos);\n+            super(op, code, pos);\n@@ -204,1 +203,1 @@\n-            return size == 6 ? code.classReader.readU2(pos + 2) : code.classReader.readU1(pos + 1);\n+            return sizeInBytes() == 6 ? code.classReader.readU2(pos + 2) : code.classReader.readU1(pos + 1);\n@@ -209,1 +208,1 @@\n-            return size == 6 ? code.classReader.readS2(pos + 4) : (byte) code.classReader.readS1(pos + 2);\n+            return sizeInBytes() == 6 ? code.classReader.readS2(pos + 4) : code.classReader.readS1(pos + 2);\n@@ -223,1 +222,1 @@\n-            super(op, op.sizeIfFixed(), code, pos);\n+            super(op, code, pos);\n@@ -232,2 +231,2 @@\n-            return size == 3\n-                   ? (int) (short) code.classReader.readU2(pos + 1)\n+            return sizeInBytes() == 3\n+                   ? code.classReader.readS2(pos + 1)\n@@ -259,0 +258,1 @@\n+        private final int size;\n@@ -261,3 +261,2 @@\n-            super(op, size(code, code.codeStart, pos), code, pos);\n-\n-            this.afterPad = pos + 1 + ((4 - ((pos + 1 - code.codeStart) & 3)) & 3);\n+            super(op, code, pos);\n+            this.afterPad = code.codeStart + RawBytecodeHelper.align(pos + 1 - code.codeStart);\n@@ -268,7 +267,1 @@\n-        }\n-\n-        static int size(CodeImpl code, int codeStart, int pos) {\n-            int afterPad = pos + 1 + ((4 - ((pos + 1 - codeStart) & 3)) & 3);\n-            int pad = afterPad - (pos + 1);\n-            int npairs = code.classReader.readInt(afterPad + 4);\n-            return 1 + pad + 8 + npairs * 8;\n+            this.size = afterPad + 8 + npairs * 8 - pos;\n@@ -281,0 +274,5 @@\n+        @Override\n+        public int sizeInBytes() {\n+            return size;\n+        }\n+\n@@ -284,2 +282,1 @@\n-            for (int i = 0; i < npairs; ++i) {\n-                int z = afterPad + 8 + 8 * i;\n+            for (int i = 0, z = afterPad + 8; i < npairs; ++i, z += 8) {\n@@ -311,3 +308,4 @@\n-        BoundTableSwitchInstruction(Opcode op, CodeImpl code, int pos) {\n-            super(op, size(code, code.codeStart, pos), code, pos);\n-        }\n+        private final int afterPad;\n+        private final int low;\n+        private final int high;\n+        private final int size;\n@@ -315,5 +313,5 @@\n-        static int size(CodeImpl code, int codeStart, int pos) {\n-            int ap = pos + 1 + ((4 - ((pos + 1 - codeStart) & 3)) & 3);\n-            int pad = ap - (pos + 1);\n-            int low = code.classReader.readInt(ap + 4);\n-            int high = code.classReader.readInt(ap + 8);\n+        BoundTableSwitchInstruction(Opcode op, CodeImpl code, int pos) {\n+            super(op, code, pos);\n+            afterPad = code.codeStart + RawBytecodeHelper.align(pos + 1 - code.codeStart);\n+            low = code.classReader.readInt(afterPad + 4);\n+            high = code.classReader.readInt(afterPad + 8);\n@@ -324,1 +322,1 @@\n-            return 1 + pad + 12 + cnt * 4;\n+            size = afterPad + 12 + cnt * 4 - pos;\n@@ -327,3 +325,3 @@\n-        private int afterPadding() {\n-            int p = pos;\n-            return p + 1 + ((4 - ((p + 1 - code.codeStart) & 3)) & 3);\n+        @Override\n+        public int sizeInBytes() {\n+            return size;\n@@ -339,1 +337,1 @@\n-            return code.classReader.readInt(afterPadding() + 4);\n+            return low;\n@@ -344,1 +342,1 @@\n-            return code.classReader.readInt(afterPadding() + 8);\n+            return high;\n@@ -353,2 +351,1 @@\n-            int z = afterPadding() + 12;\n-            for (int i = lowValue(); i <= high; ++i) {\n+            for (int i = low, z = afterPad + 12; i <= high; ++i, z += 4) {\n@@ -359,1 +356,0 @@\n-                z += 4;\n@@ -365,1 +361,1 @@\n-            return code.classReader.readInt(afterPadding());\n+            return code.classReader.readInt(afterPad);\n@@ -386,1 +382,1 @@\n-            super(op, op.sizeIfFixed(), code, pos);\n+            super(op, code, pos);\n@@ -416,1 +412,1 @@\n-            super(op, op.sizeIfFixed(), code, pos);\n+            super(op, code, pos);\n@@ -456,1 +452,1 @@\n-            super(op, op.sizeIfFixed(), code, pos);\n+            super(op, code, pos);\n@@ -496,1 +492,1 @@\n-            super(op, op.sizeIfFixed(), code, pos);\n+            super(op, code, pos);\n@@ -526,1 +522,1 @@\n-            super(Opcode.NEW, Opcode.NEW.sizeIfFixed(), code, pos);\n+            super(Opcode.NEW, code, pos);\n@@ -555,1 +551,1 @@\n-            super(op, op.sizeIfFixed(), code, pos);\n+            super(op, code, pos);\n@@ -574,1 +570,1 @@\n-            super(op, op.sizeIfFixed(), code, pos);\n+            super(op, code, pos);\n@@ -600,1 +596,1 @@\n-            super(op, op.sizeIfFixed(), code, pos);\n+            super(op, code, pos);\n@@ -633,1 +629,1 @@\n-            super(op, op.sizeIfFixed(), code, pos);\n+            super(op, code, pos);\n@@ -662,1 +658,1 @@\n-            super(op, op.sizeIfFixed(), code, pos);\n+            super(op, code, pos);\n@@ -671,1 +667,1 @@\n-            return size == 3 ? code.classReader.readS2(pos + 1) : code.classReader.readS1(pos + 1);\n+            return sizeInBytes() == 3 ? code.classReader.readS2(pos + 1) : code.classReader.readS1(pos + 1);\n@@ -685,1 +681,1 @@\n-            super(op, op.sizeIfFixed(), code, pos);\n+            super(op, code, pos);\n@@ -720,1 +716,1 @@\n-            super(op, op.sizeIfFixed(), code, pos);\n+            super(op, code, pos);\n@@ -729,1 +725,1 @@\n-            return size == 3\n+            return sizeInBytes() == 3\n@@ -750,1 +746,1 @@\n-            super(op, op.sizeIfFixed(), code, pos);\n+            super(op, code, pos);\n@@ -760,1 +756,1 @@\n-            return switch (size) {\n+            return switch (sizeInBytes()) {\n@@ -772,1 +768,1 @@\n-            super(op, op.sizeIfFixed());\n+            super(op);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractInstruction.java","additions":61,"deletions":65,"binary":false,"changes":126,"status":"modified"}]}