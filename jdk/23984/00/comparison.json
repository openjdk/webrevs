{"files":[{"patch":"@@ -91,3 +91,0 @@\n-  \/\/ Node index of current thread.\n-  inline uint current_node_index() const;\n-\n@@ -113,0 +110,3 @@\n+  \/\/ Node index of current thread.\n+  inline uint current_node_index() const;\n+\n@@ -118,1 +118,2 @@\n-                                      size_t* actual_word_size);\n+                                      size_t* actual_word_size,\n+                                      uint node_index);\n@@ -122,1 +123,1 @@\n-  inline HeapWord* attempt_allocation_locked(size_t word_size);\n+  inline HeapWord* attempt_allocation_locked(size_t word_size, uint node_index);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.hpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -54,3 +54,2 @@\n-                                                 size_t* actual_word_size) {\n-  uint node_index = current_node_index();\n-\n+                                                 size_t* actual_word_size,\n+                                                 uint node_index) {\n@@ -65,2 +64,1 @@\n-inline HeapWord* G1Allocator::attempt_allocation_locked(size_t word_size) {\n-  uint node_index = current_node_index();\n+inline HeapWord* G1Allocator::attempt_allocation_locked(size_t word_size, uint node_index) {\n@@ -68,1 +66,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.inline.hpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -405,1 +405,1 @@\n-HeapWord* G1CollectedHeap::attempt_allocation_slow(size_t word_size) {\n+HeapWord* G1CollectedHeap::attempt_allocation_slow(size_t word_size, uint node_index) {\n@@ -429,1 +429,1 @@\n-      result = _allocator->attempt_allocation_locked(word_size);\n+      result = _allocator->attempt_allocation_locked(word_size, node_index);\n@@ -456,1 +456,1 @@\n-    result = _allocator->attempt_allocation(word_size, word_size, &dummy);\n+    result = _allocator->attempt_allocation(word_size, word_size, &dummy, node_index);\n@@ -590,1 +590,4 @@\n-  HeapWord* result = _allocator->attempt_allocation(min_word_size, desired_word_size, actual_word_size);\n+  \/\/ Fix NUMA node association for the duration of this allocation\n+  const uint node_index = _allocator->current_node_index();\n+\n+  HeapWord* result = _allocator->attempt_allocation(min_word_size, desired_word_size, actual_word_size, node_index);\n@@ -594,1 +597,1 @@\n-    result = attempt_allocation_slow(desired_word_size);\n+    result = attempt_allocation_slow(desired_word_size, node_index);\n@@ -701,0 +704,3 @@\n+  \/\/ Fix NUMA node association for the duration of this allocation\n+  const uint node_index = _allocator->current_node_index();\n+\n@@ -702,1 +708,1 @@\n-    return _allocator->attempt_allocation_locked(word_size);\n+    return _allocator->attempt_allocation_locked(word_size, node_index);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -453,1 +453,1 @@\n-  HeapWord* attempt_allocation_slow(size_t word_size);\n+  HeapWord* attempt_allocation_slow(size_t word_size, uint node_index);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}