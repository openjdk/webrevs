{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import java.util.Collections;\n@@ -80,1 +79,1 @@\n-        PathNode(String name, Path path, BasicFileAttributes attrs) {  \/\/ path\n+        private PathNode(String name, Path path, BasicFileAttributes attrs) {  \/\/ path\n@@ -85,1 +84,1 @@\n-        PathNode(String name, Node link) {              \/\/ link\n+        private PathNode(String name, Node link) {              \/\/ link\n@@ -90,1 +89,1 @@\n-        PathNode(String name, List<Node> children) {    \/\/ dir\n+        private PathNode(String name, List<Node> children) {    \/\/ dir\n@@ -118,1 +117,1 @@\n-        byte[] getContent() throws IOException {\n+        private byte[] getContent() throws IOException {\n@@ -193,1 +192,1 @@\n-    Node createModulesNode(String name, Path path) {\n+    private Node createModulesNode(String name, Path path) {\n@@ -195,1 +194,1 @@\n-        assert name.startsWith(MODULES) && name.length() > MODULES.length() : \"Invalid modules name: \" + name;\n+        assert isNonEmptyModulesPath(name) : \"Invalid modules name: \" + name;\n@@ -225,2 +224,2 @@\n-    Path underlyingModulesPath(String name) {\n-        if (name.startsWith(MODULES) && name.length() > MODULES.length()) {\n+    private Path underlyingModulesPath(String name) {\n+        if (isNonEmptyModulesPath(name)) {\n@@ -233,0 +232,6 @@\n+    private static boolean isNonEmptyModulesPath(String name) {\n+        \/\/ Don't just check the prefix, there must be something after it too\n+        \/\/ (otherwise you end up with an empty string after trimming).\n+        return name.startsWith(MODULES) && name.length() > MODULES.length();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jrtfs\/ExplodedImage.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"}]}