{"files":[{"patch":"@@ -27,0 +27,3 @@\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n@@ -52,0 +55,1 @@\n+        public InputStream getResource(String name);\n@@ -74,1 +78,0 @@\n-                byte[] baseBytes = base.getResourceBytes(item);\n@@ -85,1 +88,1 @@\n-                           .setResourceBytes(baseBytes)\n+                           .setResourceBytes(base.getResourceBytes(item))\n@@ -91,2 +94,1 @@\n-                boolean contentEquals = Arrays.equals(baseBytes, image.getResourceBytes(item));\n-                if (!contentEquals) {\n+                if (!compareStreams(base.getResource(item), image.getResource(item))) {\n@@ -97,1 +99,1 @@\n-                        .setResourceBytes(baseBytes)\n+                        .setResourceBytes(base.getResourceBytes(item))\n@@ -115,0 +117,47 @@\n+    \/**\n+     * Compare the contents of the two input streams (byte-by-byte).\n+     *\n+     * @param is1 The first input stream\n+     * @param is2 The second input stream\n+     * @return {@code true} iff the two streams contain the same number of\n+     *         bytes and each byte of the streams are equal. {@code false}\n+     *         otherwise.\n+     *\/\n+    private boolean compareStreams(InputStream is1, InputStream is2) {\n+        byte[] buf1 = new byte[1024];\n+        byte[] buf2 = new byte[1024];\n+        int bytesRead1, bytesRead2 = 0;\n+        try {\n+            try (is1; is2) {\n+                while ((bytesRead1 = is1.read(buf1)) != -1 &&\n+                       (bytesRead2 = is2.read(buf2)) != -1) {\n+                    if (bytesRead1 != bytesRead2) {\n+                        return false;\n+                    }\n+                    if (bytesRead1 == buf1.length) {\n+                        if (!Arrays.equals(buf1, buf2)) {\n+                            return false;\n+                        }\n+                    } else {\n+                        for (int i = 0; i < bytesRead1; i++) {\n+                            if (buf1[i] != buf2[i]) {\n+                                return false;\n+                            }\n+                        }\n+                    }\n+                }\n+                \/\/ ensure we read both to the end\n+                if (bytesRead1 == -1) {\n+                    bytesRead2 = is2.read(buf2);\n+                    if (bytesRead2 != -1) {\n+                        return false;\n+                    }\n+                    return true;\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(\"IO exception when comparing bytes\", e);\n+        }\n+        return false;\n+    }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/runtimelink\/JimageDiffGenerator.java","additions":54,"deletions":5,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.io.InputStream;\n@@ -59,0 +60,5 @@\n+    @Override\n+    public InputStream getResource(String name) {\n+        return pool.findEntry(name).orElseThrow().content();\n+    }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/runtimelink\/ResourcePoolReader.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * @run main\/othervm -Xmx1400m AddOptionsTest\n+ * @run main\/othervm -Xmx1g AddOptionsTest\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/AddOptionsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n- * @run main\/othervm -Xmx1400m BasicJlinkMissingJavaBase\n+ * @run main\/othervm -Xmx1g BasicJlinkMissingJavaBase\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/BasicJlinkMissingJavaBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- * @run main\/othervm -Xmx1400m BasicJlinkTest false\n+ * @run main\/othervm -Xmx1g BasicJlinkTest false\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/BasicJlinkTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- * @run main\/othervm -Xmx1400m CustomModuleJlinkTest\n+ * @run main\/othervm -Xmx1g CustomModuleJlinkTest\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/CustomModuleJlinkTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- * @run main\/othervm -Xmx1400m GenerateJLIClassesTest\n+ * @run main\/othervm -Xmx1g GenerateJLIClassesTest\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/GenerateJLIClassesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * @run main\/othervm -Xmx1400m JavaSEReproducibleTest\n+ * @run main\/othervm -Xmx1g JavaSEReproducibleTest\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/JavaSEReproducibleTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n- * @run main\/othervm -Xmx1400m KeepPackagedModulesFailTest\n+ * @run main\/othervm -Xmx1g KeepPackagedModulesFailTest\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/KeepPackagedModulesFailTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * @run main\/othervm -Xmx1400m ModifiedFilesExitTest\n+ * @run main\/othervm -Xmx1g ModifiedFilesExitTest\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/ModifiedFilesExitTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- * @run main\/othervm -Xmx1400m ModifiedFilesWarningTest\n+ * @run main\/othervm -Xmx1g ModifiedFilesWarningTest\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/ModifiedFilesWarningTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * @run main\/othervm -Xmx1400m MultiHopTest\n+ * @run main\/othervm -Xmx1g MultiHopTest\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/MultiHopTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n- * @run main\/othervm\/timeout=1200 -Xmx1400m PackagedModulesVsRuntimeImageLinkTest\n+ * @run main\/othervm\/timeout=1200 -Xmx1g PackagedModulesVsRuntimeImageLinkTest\n@@ -79,1 +79,0 @@\n-        System.out.println(\"Now comparing jmod-less and jmod-full) images\");\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/PackagedModulesVsRuntimeImageLinkTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n- * @run main\/othervm -Xmx1400m PatchedJDKModuleJlinkTest\n+ * @run main\/othervm -Xmx1g PatchedJDKModuleJlinkTest\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/PatchedJDKModuleJlinkTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n- * @run main\/othervm -Xmx1400m SystemModulesTest\n+ * @run main\/othervm -Xmx1g SystemModulesTest\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/SystemModulesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n- * @run main\/othervm -Xmx1400m SystemModulesTest2\n+ * @run main\/othervm -Xmx1g SystemModulesTest2\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/SystemModulesTest2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}