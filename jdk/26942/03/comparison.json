{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,2 @@\n-import java.io.*;\n+import java.io.File;\n+import java.io.FileInputStream;\n@@ -33,1 +34,0 @@\n-import java.util.*;\n@@ -40,0 +40,2 @@\n+import java.util.Arrays;\n+import java.util.Enumeration;\n@@ -128,2 +130,1 @@\n-            System.out.println(\"Skip test, due to \" + e);\n-            return;\n+            throw new SkippedException(\"Skip test, due to \" + e, e);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/CertChainRemoval.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -263,2 +263,1 @@\n-            System.out.println(\"Not supported by provider, skipping\");\n-            return;\n+            throw new SkippedException(\"Not supported by provider, skipping\");\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/ClientAuth.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+import jtreg.SkippedException;\n+\n@@ -36,0 +38,1 @@\n+import java.util.ArrayList;\n@@ -37,0 +40,1 @@\n+import java.util.List;\n@@ -60,2 +64,5 @@\n-            System.out.println(\"Not supported, skipping: \" + e);\n-            return;\n+            throw new SkippedException(\"[algorithm: \" + algorithm +\n+                                       \", key: \" + key.getAlgorithm() + \"]\" +\n+                                       \", provider: \" + p.getName() + \"]\" +\n+                                       \", expectedTestResult: \" + expected + \"]\" +\n+                                       \"Not supported, skipping: \" + e);\n@@ -102,4 +109,6 @@\n-        \/\/ fixed key length\n-        test(\"AES\", aes_128Key, p, TestResult.PASS);\n-        test(\"AES\", aes_256Key, p, TestResult.PASS);\n-        test(\"AES\", cc20Key, p, TestResult.FAIL);\n+        List<String> skippedList  = new ArrayList<>();\n+        try {\n+            \/\/ fixed key length\n+            test(\"AES\", aes_128Key, p, TestResult.PASS);\n+            test(\"AES\", aes_256Key, p, TestResult.PASS);\n+            test(\"AES\", cc20Key, p, TestResult.FAIL);\n@@ -107,3 +116,3 @@\n-        test(\"ChaCha20\", aes_128Key, p, TestResult.FAIL);\n-        test(\"ChaCha20\", aes_256Key, p, TestResult.FAIL);\n-        test(\"ChaCha20\", cc20Key, p, TestResult.PASS);\n+            test(\"ChaCha20\", aes_128Key, p, TestResult.FAIL);\n+            test(\"ChaCha20\", aes_256Key, p, TestResult.FAIL);\n+            test(\"ChaCha20\", cc20Key, p, TestResult.PASS);\n@@ -111,7 +120,15 @@\n-        \/\/ variable key length\n-        \/\/ Different PKCS11 impls may have different ranges\n-        \/\/ of supported key sizes for variable-key-length\n-        \/\/ algorithms.\n-        test(\"Blowfish\", aes_128Key, p, TestResult.FAIL);\n-        test(\"Blowfish\", cc20Key, p, TestResult.FAIL);\n-        test(\"Blowfish\", bf_128Key, p, TestResult.PASS);\n+            \/\/ variable key length\n+            \/\/ Different PKCS11 impls may have different ranges\n+            \/\/ of supported key sizes for variable-key-length\n+            \/\/ algorithms.\n+            test(\"Blowfish\", aes_128Key, p, TestResult.FAIL);\n+            test(\"Blowfish\", cc20Key, p, TestResult.FAIL);\n+            test(\"Blowfish\", bf_128Key, p, TestResult.PASS);\n+        } catch (SkippedException skippedException){\n+            skippedException.printStackTrace();\n+            skippedList.add(skippedException.getMessage());\n+        }\n+\n+        if (!skippedList.isEmpty()) {\n+            throw new SkippedException(\"One or more tests skipped \" + skippedList);\n+        }\n","filename":"test\/jdk\/sun\/security\/pkcs11\/SecretKeyFactory\/TestGeneral.java","additions":34,"deletions":17,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+import jtreg.SkippedException;\n+\n@@ -47,1 +49,0 @@\n-            System.out.println(\"Provider \" + p + \" does not support SecureRandom, skipping\");\n@@ -49,1 +50,1 @@\n-            return;\n+            throw new SkippedException(\"Provider \" + p + \" does not support SecureRandom, skipping\", e);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/SecureRandom\/Basic.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,2 @@\n+import jtreg.SkippedException;\n+\n@@ -46,2 +48,1 @@\n-            System.out.println(\"Skip test for provider \" + p.getName());\n-            return;\n+            throw new SkippedException(\"Skip test for provider \" + p.getName());\n@@ -54,2 +55,0 @@\n-            System.out.println(\"Provider \" + p +\n-                               \" does not support SecureRandom, skipping\");\n@@ -57,1 +56,2 @@\n-            return;\n+            throw new SkippedException(\"Provider \" + p +\n+                               \" does not support SecureRandom, skipping\");\n","filename":"test\/jdk\/sun\/security\/pkcs11\/SecureRandom\/TestDeserialization.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}