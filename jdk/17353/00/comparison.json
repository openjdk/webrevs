{"files":[{"patch":"@@ -29,1 +29,3 @@\n- * @run main GetStackTraceALotWhenPinned 25000\n+ * @modules java.base\/java.lang:+open\n+ * @library \/test\/lib\n+ * @run main GetStackTraceALotWhenPinned 500000\n@@ -35,1 +37,3 @@\n- * @run main\/timeout=300 GetStackTraceALotWhenPinned 10000\n+ * @modules java.base\/java.lang:+open\n+ * @library \/test\/lib\n+ * @run main\/timeout=300 GetStackTraceALotWhenPinned 200000\n@@ -41,0 +45,1 @@\n+import jdk.test.lib.thread.VThreadRunner;\n@@ -45,1 +50,7 @@\n-        var counter = new AtomicInteger(Integer.parseInt(args[0]));\n+        \/\/ need at least two carrier threads when main thread is a virtual thread\n+        if (Thread.currentThread().isVirtual()) {\n+            VThreadRunner.ensureParallelism(2);\n+        }\n+\n+        int iterations = Integer.parseInt(args[0]);\n+        var barrier = new Barrier(2);\n@@ -52,1 +63,4 @@\n-            while (counter.decrementAndGet() > 0) {\n+            for (int i = 0; i < iterations; i++) {\n+                \/\/ wait for main thread to arrive\n+                barrier.await();\n+\n@@ -66,1 +80,4 @@\n-        while (thread.isAlive()) {\n+        for (int i = 0; i < iterations; i++) {\n+            \/\/ wait for virtual thread to arrive\n+            barrier.await();\n+\n@@ -69,0 +86,1 @@\n+\n@@ -71,1 +89,1 @@\n-                System.out.format(\"%s %d remaining ...%n\", Instant.now(), counter.get());\n+                System.out.format(\"%s %d remaining ...%n\", Instant.now(), (iterations - i));\n@@ -76,0 +94,29 @@\n+\n+    \/**\n+     * Alow threads wait for each other to reach a common barrier point. This class does\n+     * not park threads that are waiting for the barrier to trip, instead it spins. This\n+     * makes it suitable for tests that use LockSupport.park or Thread.yield.\n+     *\/\n+    private static class Barrier {\n+        private final int parties;\n+        private final AtomicInteger count;\n+        private volatile int generation;\n+\n+        Barrier(int parties) {\n+            this.parties = parties;\n+            this.count = new AtomicInteger(parties);\n+        }\n+\n+        void await() {\n+            int g = generation;\n+            if (count.decrementAndGet() == 0) {\n+                count.set(parties);\n+                generation = g + 1;\n+            } else {\n+                while (generation == g) {\n+                    Thread.onSpinWait();\n+                }\n+            }\n+        }\n+\n+    }\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/GetStackTraceALotWhenPinned.java","additions":53,"deletions":6,"binary":false,"changes":59,"status":"modified"}]}