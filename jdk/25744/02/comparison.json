{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -165,24 +165,0 @@\n-    \/**\n-     * Set the TTL (time-to-live) option.\n-     * @param ttl a byte specifying the TTL value\n-     *\n-     * @deprecated use setTimeToLive instead.\n-     * @throws    IOException if an I\/O exception occurs while setting\n-     * the time-to-live option.\n-     * @see #getTTL()\n-     *\/\n-    @Deprecated(forRemoval = true, since = \"1.2\")\n-    protected abstract void setTTL(byte ttl) throws IOException;\n-\n-    \/**\n-     * Retrieve the TTL (time-to-live) option.\n-     *\n-     * @throws    IOException if an I\/O exception occurs\n-     * while retrieving the time-to-live option\n-     * @deprecated use getTimeToLive instead.\n-     * @return a byte representing the TTL value\n-     * @see #setTTL(byte)\n-     *\/\n-    @Deprecated(forRemoval = true, since = \"1.2\")\n-    protected abstract byte getTTL() throws IOException;\n-\n","filename":"src\/java.base\/share\/classes\/java\/net\/DatagramSocketImpl.java","additions":1,"deletions":25,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -191,20 +191,0 @@\n-    \/**\n-     * Set the default time-to-live for multicast packets sent out\n-     * on this {@code MulticastSocket} in order to control the\n-     * scope of the multicasts.\n-     *\n-     * <p>The ttl is an <b>unsigned<\/b> 8-bit quantity, and so <B>must<\/B> be\n-     * in the range {@code 0 <= ttl <= 0xFF }.\n-     *\n-     * @param      ttl the time-to-live\n-     * @throws     IOException if an I\/O exception occurs\n-     *             while setting the default time-to-live value, or the socket is closed.\n-     * @deprecated use the {@link #setTimeToLive(int)} method instead, which uses\n-     *             <b>int<\/b> instead of <b>byte<\/b> as the type for ttl.\n-     * @see #getTTL()\n-     *\/\n-    @Deprecated(forRemoval = true, since = \"1.2\")\n-    public void setTTL(byte ttl) throws IOException {\n-        delegate().setTTL(ttl);\n-    }\n-\n@@ -240,16 +220,0 @@\n-    \/**\n-     * Get the default time-to-live for multicast packets sent out on\n-     * the socket.\n-     *\n-     * @throws    IOException if an I\/O exception occurs\n-     *            while getting the default time-to-live value, or the socket is closed.\n-     * @return the default time-to-live value\n-     * @deprecated use the {@link #getTimeToLive()} method instead,\n-     * which returns an <b>int<\/b> instead of a <b>byte<\/b>.\n-     * @see #setTTL(byte)\n-     *\/\n-    @Deprecated(forRemoval = true, since = \"1.2\")\n-    public byte getTTL() throws IOException {\n-        return delegate().getTTL();\n-    }\n-\n@@ -469,43 +433,0 @@\n-\n-    \/**\n-     * Sends a datagram packet to the destination, with a TTL (time-to-live)\n-     * other than the default for the socket.  This method\n-     * need only be used in instances where a particular TTL is desired;\n-     * otherwise it is preferable to set a TTL once on the socket, and\n-     * use that default TTL for all packets.  This method does <B>not\n-     * <\/B> alter the default TTL for the socket. Its behavior may be\n-     * affected by {@code setInterface}.\n-     *\n-     * @param p is the packet to be sent. The packet should contain\n-     * the destination multicast ip address and the data to be sent.\n-     * One does not need to be the member of the group to send\n-     * packets to a destination multicast address.\n-     * @param ttl optional time to live for multicast packet.\n-     * default ttl is 1.\n-     *\n-     * @throws     IOException  if an I\/O error occurs, or the socket is closed.\n-     * @throws     PortUnreachableException may be thrown if the socket is connected\n-     *             to a currently unreachable destination. Note, there is no\n-     *             guarantee that the exception will be thrown.\n-     * @throws     IllegalArgumentException if the socket is connected,\n-     *             and connected address and packet address differ, or\n-     *             if the socket is not connected and the packet address\n-     *             is not set or if its port is out of range.\n-     *\n-     *\n-     * @deprecated Use the following code or its equivalent instead:\n-     *  <pre>{@code   ......\n-     *  int ttl = mcastSocket.getOption(StandardSocketOptions.IP_MULTICAST_TTL);\n-     *  mcastSocket.setOption(StandardSocketOptions.IP_MULTICAST_TTL, newttl);\n-     *  mcastSocket.send(p);\n-     *  mcastSocket.setOption(StandardSocketOptions.IP_MULTICAST_TTL, ttl);\n-     *  ......}<\/pre>\n-     *\n-     * @see DatagramSocket#send\n-     * @see DatagramSocket#receive\n-     *\/\n-    @Deprecated(forRemoval = true, since = \"1.4\")\n-    public void send(DatagramPacket p, byte ttl)\n-        throws IOException {\n-        delegate().send(p, ttl);\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/net\/MulticastSocket.java","additions":1,"deletions":80,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -570,6 +570,0 @@\n-    \/**\n-     * The lock on the socket's TTL. This is for set\/getTTL and\n-     * send(packet,ttl).\n-     *\/\n-    private final Object ttlLock = new Object();\n-\n@@ -587,8 +581,0 @@\n-    @Override\n-    @SuppressWarnings(\"removal\")\n-    public void setTTL(byte ttl) throws IOException {\n-        if (isClosed())\n-            throw new SocketException(\"Socket is closed\");\n-        getImpl().setTTL(ttl);\n-    }\n-\n@@ -605,8 +591,0 @@\n-    @Override\n-    @SuppressWarnings(\"removal\")\n-    public byte getTTL() throws IOException {\n-        if (isClosed())\n-            throw new SocketException(\"Socket is closed\");\n-        return getImpl().getTTL();\n-    }\n-\n@@ -799,46 +777,0 @@\n-\n-    @SuppressWarnings(\"removal\")\n-    @Override\n-    public void send(DatagramPacket p, byte ttl)\n-            throws IOException {\n-        if (isClosed())\n-            throw new SocketException(\"Socket is closed\");\n-        synchronized(ttlLock) {\n-            synchronized(p) {\n-                InetAddress packetAddress = p.getAddress();\n-                checkAddress(packetAddress, \"send\");\n-                if (connectState == ST_NOT_CONNECTED) {\n-                    if (packetAddress == null) {\n-                        throw new IllegalArgumentException(\"Address not set\");\n-                    }\n-                } else {\n-                    \/\/ we're connected\n-                    if (packetAddress == null) {\n-                        p.setAddress(connectedAddress);\n-                        p.setPort(connectedPort);\n-                    } else if ((!packetAddress.equals(connectedAddress)) ||\n-                            p.getPort() != connectedPort) {\n-                        throw new IllegalArgumentException(\"connected address and packet address\" +\n-                                \" differ\");\n-                    }\n-                }\n-                byte dttl = getTTL();\n-                try {\n-                    if (ttl != dttl) {\n-                        \/\/ set the ttl\n-                        getImpl().setTTL(ttl);\n-                    }\n-                    if (p.getPort() == 0) {\n-                        throw new SocketException(\"Can't send to port 0\");\n-                    }\n-                    \/\/ call the datagram method to send\n-                    getImpl().send(p);\n-                } finally {\n-                    \/\/ set it back to default\n-                    if (ttl != dttl) {\n-                        getImpl().setTTL(dttl);\n-                    }\n-                }\n-            } \/\/ synch p\n-        }  \/\/synch ttl\n-    } \/\/method\n","filename":"src\/java.base\/share\/classes\/java\/net\/NetMulticastSocket.java","additions":1,"deletions":69,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-import java.util.concurrent.locks.ReentrantLock;\n@@ -375,3 +374,0 @@\n-    \/\/ used to coordinate changing TTL with the deprecated send method\n-    private final ReentrantLock sendLock = new ReentrantLock();\n-\n@@ -383,6 +379,0 @@\n-    @Override\n-    @SuppressWarnings(\"removal\")\n-    public void setTTL(byte ttl) throws IOException {\n-        setTimeToLive(Byte.toUnsignedInt(ttl));\n-    }\n-\n@@ -391,12 +381,1 @@\n-        sendLock.lock();\n-        try {\n-            setIntOption(StandardSocketOptions.IP_MULTICAST_TTL, ttl);\n-        } finally {\n-            sendLock.unlock();\n-        }\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"removal\")\n-    public byte getTTL() throws IOException {\n-        return (byte) getTimeToLive();\n+        setIntOption(StandardSocketOptions.IP_MULTICAST_TTL, ttl);\n@@ -407,6 +386,1 @@\n-        sendLock.lock();\n-        try {\n-            return getIntOption(StandardSocketOptions.IP_MULTICAST_TTL);\n-        } finally {\n-            sendLock.unlock();\n-        }\n+        return getIntOption(StandardSocketOptions.IP_MULTICAST_TTL);\n@@ -561,17 +535,0 @@\n-    @Override\n-    @SuppressWarnings(\"removal\")\n-    public void send(DatagramPacket p, byte ttl) throws IOException {\n-        sendLock.lock();\n-        try {\n-            int oldValue = getTimeToLive();\n-            try {\n-                setTTL(ttl);\n-                send(p);\n-            } finally {\n-                setTimeToLive(oldValue);\n-            }\n-        } finally {\n-            sendLock.unlock();\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DatagramSocketAdaptor.java","additions":2,"deletions":45,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,38 +111,0 @@\n-\n-        if (sock instanceof MulticastSocket) {\n-            sock.disconnect();\n-            testTTL((MulticastSocket)sock);\n-        }\n-    }\n-\n-    private void testTTL(MulticastSocket sock) throws Exception {\n-        out.println(\"Testing deprecated send TTL with \" + sock.getClass());\n-        final byte ttl = 100;\n-        InetAddress addr = loopbackAddress;\n-        byte[] buf;\n-        DatagramPacket p;\n-        int port = serversock.getLocalPort();\n-\n-        out.println(\"Checking send to non-connected address ...\");\n-        try {\n-            out.println(\"Checking send with no packet address\");\n-            buf = (\"Hello, server\"+(++i)).getBytes();\n-            p = new DatagramPacket(buf, buf.length);\n-            sock.send(p,ttl);\n-            throw new AssertionError(\"Expected IllegalArgumentException not received\");\n-        } catch (IllegalArgumentException x) {\n-            out.println(\"Got expected exception: \" + x);\n-        }\n-\n-        out.println(\"Connecting to connected address: \" + sock);\n-        sock.connect(addr, port);\n-\n-        try {\n-            out.println(\"Checking send with different address than connected\");\n-            buf = (\"Hello, server\"+(++i)).getBytes();\n-            p = new DatagramPacket(buf, buf.length, addr, port+1);\n-            sock.send(p, ttl);\n-            throw new AssertionError(\"Expected IllegalArgumentException not received\");\n-        } catch (IllegalArgumentException x) {\n-            out.println(\"Got expected exception: \" + x);\n-        }\n","filename":"test\/jdk\/java\/net\/DatagramSocket\/AddressNotSet.java","additions":1,"deletions":39,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -255,1 +255,1 @@\n-     * Test getTimeToLive\/setTimeToLive\/getTTL\/getTTL and IP_MULTICAST_TTL socket\n+     * Test getTimeToLive\/setTimeToLive and IP_MULTICAST_TTL socket\n","filename":"test\/jdk\/java\/net\/DatagramSocket\/DatagramSocketMulticasting.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -124,8 +124,0 @@\n-        @Override\n-        protected void setTTL(byte ttl) throws IOException { }\n-\n-        @Override\n-        protected byte getTTL() throws IOException {\n-            return 0;\n-        }\n-\n","filename":"test\/jdk\/java\/net\/DatagramSocket\/OldDatagramSocketImplTest.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n- *          throw expected Execption when passed a DatagramPacket\n+ *          throw expected Exception when passed a DatagramPacket\n@@ -129,1 +129,1 @@\n-                Sender.of(new MulticastSocket(null), (byte) 0),\n+                Sender.of(new MulticastSocket(null)),\n@@ -131,3 +131,1 @@\n-                Sender.of(DatagramChannel.open().socket()),\n-                Sender.of((MulticastSocket)\n-                        DatagramChannel.open().socket(), (byte) 0)\n+                Sender.of(DatagramChannel.open().socket())\n@@ -182,6 +180,0 @@\n-        static Sender<IOException> of(MulticastSocket socket, byte ttl) {\n-            SenderImpl.Send<IOException> send =\n-                    (pkt) -> socket.send(pkt, ttl);\n-            return new SenderImpl<>(socket, send, socket::close, SE);\n-        }\n-\n","filename":"test\/jdk\/java\/net\/DatagramSocket\/SendCheck.java","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,9 +66,0 @@\n-        @Override\n-        protected void setTTL(byte ttl) throws IOException {\n-        }\n-\n-        @Override\n-        protected byte getTTL() throws IOException {\n-            return 0;\n-        }\n-\n","filename":"test\/jdk\/java\/net\/DatagramSocket\/SetDatagramSocketImplFactory\/java.base\/java\/net\/MyDatagramSocketImplFactory.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,2 +108,0 @@\n-        @Override protected void setTTL(byte ttl) { }\n-        @Override protected byte getTTL() { return 0; }\n","filename":"test\/jdk\/java\/net\/DatagramSocketImpl\/TestCreate.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -102,2 +102,0 @@\n-        @Override protected void setTTL(byte ttl) { }\n-        @Override protected byte getTTL() { return 0; }\n","filename":"test\/jdk\/java\/net\/DatagramSocketImpl\/TestDefaultBehavior.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 1998, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4089415\n- * @summary Test MulticastSocket send for modification of ttl\n- *\n- *\/\n-import java.io.*;\n-import java.net.*;\n-\n-public class MulticastTTL {\n-\n-    public static void main(String args[]) throws Exception {\n-        MulticastSocket soc = null;\n-        DatagramPacket pac = null;\n-        InetAddress sin = null;\n-        byte [] array = new byte[65537];\n-        int port = 0;\n-        byte old_ttl = 0;\n-        byte new_ttl = 64;\n-        byte ttl = 0;\n-\n-        sin = InetAddress.getByName(\"224.80.80.80\");\n-        soc = new MulticastSocket();\n-        port = soc.getLocalPort();\n-        old_ttl = soc.getTTL();\n-        pac = new DatagramPacket(array, array.length, sin, port);\n-\n-        try {\n-            soc.send(pac, new_ttl);\n-        } catch(java.io.IOException e) {\n-            ttl = soc.getTTL();\n-            soc.close();\n-            if(ttl != old_ttl)\n-                throw new RuntimeException(\"TTL \");\n-        }\n-        soc.close();\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/MulticastSocket\/MulticastTTL.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,1 +96,0 @@\n-        assertThrows(SE, () -> ms.send(pkt, (byte) 0));\n","filename":"test\/jdk\/java\/net\/MulticastSocket\/SendPortZero.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -209,10 +209,0 @@\n-        @Override\n-        protected void setTTL(byte ttl) throws IOException {\n-            shouldNotComeHere();\n-        }\n-\n-        @Override\n-        protected byte getTTL() throws IOException {\n-            return shouldNotComeHere();\n-        }\n-\n","filename":"test\/jdk\/java\/net\/MulticastSocket\/SetLoopbackOption.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 4189640\n- * @summary Make setTTL\/getTTL works\n- * @run main SetTTLAndGetTTL\n- *\/\n-\n-import java.net.*;\n-\n-public class SetTTLAndGetTTL {\n-\n-    public static void main(String args[]) throws Exception {\n-        MulticastSocket soc = null;\n-\n-        try {\n-            soc = new MulticastSocket();\n-        } catch(Exception e) {\n-            throw new Exception(\"Unexpected Exception\");\n-        }\n-\n-        soc.setTTL((byte)200);\n-        byte ttlValue = soc.getTTL();\n-        if (ttlValue != (byte)200)\n-            throw new Exception(\"setTTL\/getTTL is broken\");\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/MulticastSocket\/SetTTLAndGetTTL.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n-        soc.setTTL((byte)0);\n","filename":"test\/jdk\/java\/net\/MulticastSocket\/SetTTLTo0.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -127,2 +127,0 @@\n-        @Override protected void setTTL(byte ttl) { }\n-        @Override protected byte getTTL() { return 0; }\n","filename":"test\/jdk\/java\/net\/SocketOption\/CachedImplOptions.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -165,4 +165,0 @@\n-        protected void setTTL(byte ttl) throws IOException { }\n-\n-        protected byte getTTL() throws IOException { return 0; }\n-\n","filename":"test\/jdk\/java\/net\/SocketOption\/ImmutableOptions.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -330,1 +330,1 @@\n-     * Test getTimeToLive\/setTimeToLive\/getTTL\/getTTL and IP_MULTICAST_TTL socket\n+     * Test getTimeToLive\/setTimeToLive and IP_MULTICAST_TTL socket\n@@ -336,1 +336,0 @@\n-        assertTrue(s.getTTL() == 1);\n@@ -343,1 +342,0 @@\n-            assertTrue(s.getTTL() == ttl);\n@@ -348,9 +346,0 @@\n-        \/\/ setTTL\n-        for (byte ttl = (byte) -2; ttl <= 2; ttl++) {\n-            s.setTTL(ttl);\n-            assertTrue(s.getTTL() == ttl);\n-            int intValue = Byte.toUnsignedInt(ttl);\n-            assertTrue(s.getTimeToLive() == intValue);\n-            assertTrue(s.getOption(IP_MULTICAST_TTL) == intValue);\n-        }\n-\n@@ -362,1 +351,0 @@\n-            assertTrue(s.getTTL() == ttl);\n@@ -422,1 +410,1 @@\n-        s.send(p, (byte) 1);\n+        s.send(p);\n@@ -466,1 +454,1 @@\n-        s.send(p, (byte) 1);\n+        s.send(p);\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/AdaptorMulticasting.java","additions":4,"deletions":16,"binary":false,"changes":20,"status":"modified"}]}