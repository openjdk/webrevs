{"files":[{"patch":"@@ -109,0 +109,156 @@\n+template <typename TESTSIZE, Assembler::operand_size ASMSIZE>\n+class CmpxchgTester {\n+ public:\n+  typedef TESTSIZE (*cmpxchg_func)(intptr_t addr, TESTSIZE expected, TESTSIZE new_value, TESTSIZE result);\n+\n+  static TESTSIZE base_cmpxchg(int variant, intptr_t addr, TESTSIZE expected, TESTSIZE new_value, TESTSIZE result, bool boolean_result = false) {\n+    BufferBlob* bb = BufferBlob::create(\"riscvTest\", 128);\n+    CodeBuffer code(bb);\n+    MacroAssembler _masm(&code);\n+    address entry = _masm.pc();\n+    {\n+      switch(variant) {\n+        default:\n+          _masm.cmpxchg(\/*addr*\/ c_rarg0, \/*expected*\/ c_rarg1, \/*new_value*\/c_rarg2,\n+                        ASMSIZE, Assembler::relaxed, Assembler::relaxed,\n+                        \/*result*\/ c_rarg3, boolean_result);\n+          _masm.mv(c_rarg0, c_rarg3);\n+          break;\n+        case 1:\n+          \/\/ expected == result\n+          _masm.cmpxchg(\/*addr*\/ c_rarg0, \/*expected*\/ c_rarg1, \/*new_value*\/c_rarg2,\n+                        ASMSIZE, Assembler::relaxed, Assembler::relaxed,\n+                        \/*result*\/ c_rarg1, boolean_result);\n+          _masm.mv(c_rarg0, c_rarg1);\n+          break;\n+        case 2:\n+          \/\/ new_value == result\n+          _masm.cmpxchg(\/*addr*\/ c_rarg0, \/*expected*\/ c_rarg1, \/*new_value*\/c_rarg2,\n+                        ASMSIZE, Assembler::relaxed, Assembler::relaxed,\n+                        \/*result*\/ c_rarg2, boolean_result);\n+          _masm.mv(c_rarg0, c_rarg2);\n+          break;\n+        case 3:\n+          \/\/ expected == new_value\n+          _masm.cmpxchg(\/*addr*\/ c_rarg0, \/*expected*\/ c_rarg1, \/*new_value*\/ c_rarg1,\n+                        ASMSIZE, Assembler::relaxed, Assembler::relaxed,\n+                        \/*result*\/ c_rarg2, boolean_result);\n+          _masm.mv(c_rarg0, c_rarg2);\n+          break;\n+\n+      }\n+      _masm.ret();\n+    }\n+    _masm.flush();\n+    OrderAccess::cross_modify_fence();\n+    TESTSIZE ret = ((cmpxchg_func)entry)(addr, expected, new_value, result);\n+    BufferBlob::free(bb);\n+    return ret;\n+  }\n+};\n+\n+template <typename TESTSIZE, Assembler::operand_size ASMSIZE>\n+void plain_cmpxchg_test(int variant, TESTSIZE dv, TESTSIZE ex, TESTSIZE nv, TESTSIZE eret, TESTSIZE edata, bool bv) {\n+  TESTSIZE data = dv;\n+  TESTSIZE ret = CmpxchgTester<TESTSIZE, ASMSIZE>::base_cmpxchg(variant, (intptr_t)&data, ex, nv, \/* dummy *\/ 67, bv);\n+  ASSERT_EQ(ret,  eret);\n+  ASSERT_EQ(data, edata);\n+}\n+\n+template <typename TESTSIZE, Assembler::operand_size ASMSIZE>\n+void run_plain_cmpxchg_tests() {\n+  \/\/ Normal\n+  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   0 \/* variant *\/ , 1337 \/* start value*\/,\n+                                        1337 \/* expected *\/,   42 \/* new value *\/,\n+                                        1337 \/* return *\/    , 42 \/* end value*\/, false \/* boolean ret*\/);\n+\n+  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   0 \/* variant *\/ , 1337 \/* start value*\/,\n+                                        1336 \/* expected *\/,   42 \/* new value *\/,\n+                                        1337 \/* return *\/  , 1337 \/* end value*\/, false \/* boolean ret*\/);\n+\n+  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   0 \/* variant *\/ , 1337 \/* start value*\/,\n+                                        1337 \/* expected *\/,   42 \/* new value *\/,\n+                                           1 \/* return *\/    , 42 \/* end value*\/, true \/* boolean ret*\/);\n+\n+  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   0 \/* variant *\/ , 1337 \/* start value*\/,\n+                                        1336 \/* expected *\/,   42 \/* new value *\/,\n+                                           0 \/* return *\/  , 1337 \/* end value*\/, true \/* boolean ret*\/);\n+\n+  \/\/ result == expected register\n+  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   1 \/* variant *\/ , 1337 \/* start value*\/,\n+                                        1337 \/* expected *\/,   42 \/* new value *\/,\n+                                        1337 \/* return *\/    , 42 \/* end value*\/, false \/* boolean ret*\/);\n+\n+  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   1 \/* variant *\/ , 1337 \/* start value*\/,\n+                                        1336 \/* expected *\/,   42 \/* new value *\/,\n+                                        1337 \/* return *\/  , 1337 \/* end value*\/, false \/* boolean ret*\/);\n+\n+  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   1 \/* variant *\/ , 1337 \/* start value*\/,\n+                                        1337 \/* expected *\/,   42 \/* new value *\/,\n+                                           1 \/* return *\/    , 42 \/* end value*\/, true \/* boolean ret*\/);\n+\n+  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   1 \/* variant *\/ , 1337 \/* start value*\/,\n+                                        1336 \/* expected *\/,   42 \/* new value *\/,\n+                                           0 \/* return *\/  , 1337 \/* end value*\/, true \/* boolean ret*\/);\n+\n+  \/\/ new_value == result register\n+  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   2 \/* variant *\/ , 1337 \/* start value*\/,\n+                                        1337 \/* expected *\/,   42 \/* new value *\/,\n+                                        1337 \/* return *\/    , 42 \/* end value*\/, false \/* boolean ret*\/);\n+\n+  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   2 \/* variant *\/ , 1337 \/* start value*\/,\n+                                        1336 \/* expected *\/,   42 \/* new value *\/,\n+                                        1337 \/* return *\/  , 1337 \/* end value*\/, false \/* boolean ret*\/);\n+\n+  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   2 \/* variant *\/ , 1337 \/* start value*\/,\n+                                        1337 \/* expected *\/,   42 \/* new value *\/,\n+                                           1 \/* return *\/    , 42 \/* end value*\/, true \/* boolean ret*\/);\n+\n+  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   2 \/* variant *\/ , 1337 \/* start value*\/,\n+                                        1336 \/* expected *\/,   42 \/* new value *\/,\n+                                           0 \/* return *\/  , 1337 \/* end value*\/, true \/* boolean ret*\/);\n+\n+  \/\/ expected == new_value register\n+  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   3 \/* variant *\/ , 1337 \/* start value*\/,\n+                                        1337 \/* expected *\/,   42 \/* new value *\/,\n+                                        1337 \/* return *\/  , 1337 \/* end value*\/, false \/* boolean ret*\/);\n+\n+  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   3 \/* variant *\/ , 1337 \/* start value*\/,\n+                                        1336 \/* expected *\/,   42 \/* new value *\/,\n+                                        1337 \/* return *\/  , 1337 \/* end value*\/, false \/* boolean ret*\/);\n+\n+  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   3 \/* variant *\/ , 1337 \/* start value*\/,\n+                                        1337 \/* expected *\/,   42 \/* new value *\/,\n+                                           1 \/* return *\/  , 1337 \/* end value*\/, true \/* boolean ret*\/);\n+\n+  plain_cmpxchg_test<TESTSIZE, ASMSIZE>(   3 \/* variant *\/ , 1337 \/* start value*\/,\n+                                        1336 \/* expected *\/,   42 \/* new value *\/,\n+                                           0 \/* return *\/  , 1337 \/* end value*\/, true \/* boolean ret*\/);\n+}\n+\n+TEST_VM(RiscV, cmpxchg_int64_plain_lr_sc) {\n+  bool zacas = UseZacas;\n+  UseZacas = false;\n+  run_plain_cmpxchg_tests<int64_t, Assembler::int64>();\n+  UseZacas = zacas;\n+}\n+\n+TEST_VM(RiscV, cmpxchg_int64_plain_maybe_zacas) {\n+  if (UseZacas) {\n+    run_plain_cmpxchg_tests<int64_t, Assembler::int64>();\n+  }\n+}\n+\n+TEST_VM(RiscV, cmpxchg_int32_plain_lr_sc) {\n+  bool zacas = UseZacas;\n+  UseZacas = false;\n+  run_plain_cmpxchg_tests<int32_t, Assembler::int32>();\n+  UseZacas = zacas;\n+}\n+\n+TEST_VM(RiscV, cmpxchg_int32_plain_maybe_zacas) {\n+  if (UseZacas) {\n+    run_plain_cmpxchg_tests<int32_t, Assembler::int32>();\n+  }\n+}\n+\n","filename":"test\/hotspot\/gtest\/riscv\/test_assembler_riscv.cpp","additions":156,"deletions":0,"binary":false,"changes":156,"status":"modified"}]}