{"files":[{"patch":"@@ -86,1 +86,1 @@\n-          \"Randomly insert ReachabilityFence nodes\")                        \\\n+          \"Aggressively insert reachability fences for all oop arguments\")  \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -617,1 +617,4 @@\n-    assert(endoff == call->req(), \"reachability edge present\"); \/\/ asserted in SafePointNode::grow_stack\n+    \/\/ No reachability edges should be present when incremental inlining takes place.\n+    \/\/ Inlining logic doesn't expect any extra edges past debug info and fails with\n+    \/\/ an assert in SafePointNode::grow_stack.\n+    assert(endoff == call->req(), \"reachability edges not supported\");\n@@ -619,2 +622,2 @@\n-    if (call->req() > endoff) {\n-      assert(OptimizeReachabilityFences, \"reachability edge present\");\n+    if (call->req() > endoff) { \/\/ reachability edges present\n+      assert(OptimizeReachabilityFences, \"required\");\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2510,1 +2510,1 @@\n-  if (!optimize_loops(igvn, LoopOptsDefault)) {\n+  if (!optimize_loops(igvn, LoopOptsDefaultFinal)) {\n@@ -2517,1 +2517,2 @@\n-    TracePhase tp(_t_idealLoop);\n+    TracePhase tp1(_t_idealLoop);\n+    TracePhase tp2(_t_reachability);\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -107,0 +107,1 @@\n+  LoopOptsDefaultFinal,\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-Node* IdealLoopTree::unique_loop_exit_or_null() {\n+IfFalseNode* IdealLoopTree::unique_loop_exit_or_null() {\n@@ -69,1 +69,4 @@\n-      return head()->as_BaseCountedLoop()->loopexit()->proj_out_or_null(0 \/* false *\/);\n+      ProjNode* loop_exit = head()->as_BaseCountedLoop()->loopexit()->proj_out_or_null(0 \/* false *\/);\n+      if (loop_exit != nullptr) {\n+        return loop_exit->as_IfFalse();\n+      }\n@@ -76,1 +79,1 @@\n-  return nullptr;\n+  return nullptr; \/\/ not found or multiple loop exists exist\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -4932,1 +4932,1 @@\n-  bool do_split_ifs = (_mode == LoopOptsDefault);\n+  bool do_split_ifs = (_mode == LoopOptsDefault || _mode == LoopOptsDefaultFinal);\n@@ -5331,0 +5331,10 @@\n+\n+  \/\/ Loop opts are over. It is safe to get rid of all reachability fence nodes\n+  \/\/ and migrate reachability edges to safepoints.\n+  if (OptimizeReachabilityFences && !C->major_progress() && C->reachability_fences_count() > 0 && _mode == LoopOptsDefaultFinal) {\n+    Compile::TracePhase tp2(_t_reachability);\n+    eliminate_reachability_fences();\n+    if (C->failing())  return;\n+    C->print_method(PHASE_ELIMINATE_REACHABILITY_FENCES, 2);\n+    assert(C->reachability_fences_count() == 0, \"no RF nodes allowed\");\n+  }\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -746,1 +746,1 @@\n-  Node* unique_loop_exit_or_null();\n+  IfFalseNode* unique_loop_exit_or_null();\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -973,1 +973,1 @@\n-        use->as_ReachabilityFence()->clear_referent(_igvn); \/\/ redundant fence\n+        use->as_ReachabilityFence()->clear_referent(_igvn); \/\/ redundant fence; will be removed during IGVN\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,0 +94,2 @@\n+    tty->print_cr (\"             Optimize:        %7.3f s\", timers[_t_reachability_optimize].seconds());\n+    tty->print_cr (\"             Eliminate:       %7.3f s\", timers[_t_reachability_eliminate].seconds());\n","filename":"src\/hotspot\/share\/opto\/phase.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,0 +89,2 @@\n+    f(         _t_reachability_optimize,  \"reachabilityFence_optimize\") \\\n+    f(         _t_reachability_eliminate, \"reachabilityFence_eliminate\") \\\n","filename":"src\/hotspot\/share\/opto\/phase.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n- * It looks attractive to get rid of RF nodes early and transfer to safepoint-attached representation,\n+ * (a) It looks attractive to get rid of RF nodes early and transfer to safepoint-attached representation,\n@@ -65,3 +65,3 @@\n- * RF nodes may interfere with RA, so stand-alone RF nodes are eliminated and their referents are\n- * transferred to corresponding safepoints (phase #2). When safepoints are pruned during macro expansion,\n- * corresponding reachability edges also go away.\n+ * Live ranges of values are routinely extended during loop opts. And it can break the invariant that\n+ * all interfering safepoints contain the referent in their oop map. (If an interfering safepoint doesn't\n+ * keep the referent alive, then it becomes possible for the referent to be prematurely GCed.)\n@@ -69,2 +69,12 @@\n- * Unfortunately, it's not straightforward to stay with safepoint-attached representation till the very end,\n- * because information about derived oops is attached to safepoints the very same similar way. So, for now RFs are\n+ * After loop opts are over, it becomes possible to reliably enumerate all interfering safe points and\n+ * ensure the referent present in their oop maps.\n+ *\n+ * (b) RF nodes may interfere with Register Allocator (RA). If a safepoint is pruned during macro expansion,\n+ * it can make some RF nodes redundant, but we don't have information about their relations anymore to detect that.\n+ * Redundant RF node unnecessarily extends referent's live range and increases register pressure.\n+ *\n+ * Hence, we eliminate RF nodes and transfer their referents to corresponding safepoints (phase #2).\n+ * When safepoints are pruned, corresponding reachability edges also go away.\n+ *\n+ * (c) Unfortunately, it's not straightforward to stay with safepoint-attached representation till the very end,\n+ * because information about derived oops is attached to safepoints in a similar way. So, for now RFs are\n@@ -128,1 +138,2 @@\n-\/\/ Turn the RF node into an no-op by setting it's referent to null.\n+\/\/ Turn the RF node into a no-op by setting it's referent to null.\n+\/\/ Subsequent IGVN pass removes cleared nodes.\n@@ -309,1 +320,1 @@\n-  Compile::TracePhase tp(_t_reachability);\n+  Compile::TracePhase tp(_t_reachability_optimize);\n@@ -434,1 +445,1 @@\n-  Compile::TracePhase tp(_t_reachability);\n+  Compile::TracePhase tp(_t_reachability_eliminate);\n@@ -436,3 +447,1 @@\n-  if (!OptimizeReachabilityFences) {\n-    return false;\n-  }\n+  assert(OptimizeReachabilityFences, \"required\");\n@@ -440,0 +449,1 @@\n+  ResourceMark rm;\n","filename":"src\/hotspot\/share\/opto\/reachability.cpp","additions":22,"deletions":12,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-class ReachabilityFenceNode : public MultiNode {\n+class ReachabilityFenceNode : public Node {\n@@ -36,1 +36,1 @@\n-      : MultiNode(1) {\n+      : Node(1) {\n@@ -42,1 +42,4 @@\n-  virtual int   Opcode() const;\n+  virtual int  Opcode() const;\n+  virtual bool is_CFG() const { return true; }\n+  virtual uint hash() const { return NO_HASH; }  \/\/ CFG nodes do not hash\n+  virtual bool depends_only_on_test() const { return false; };\n@@ -45,1 +48,1 @@\n-  const RegMask &in_RegMask(uint idx) const {\n+  virtual const RegMask& in_RegMask(uint idx) const {\n@@ -50,0 +53,3 @@\n+  virtual const RegMask& out_RegMask() const {\n+    return RegMask::Empty;\n+  }\n","filename":"src\/hotspot\/share\/opto\/reachability.hpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"}]}