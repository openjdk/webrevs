{"files":[{"patch":"@@ -950,1 +950,1 @@\n-                assert(cpn->_con > 1, \"\"); \/\/ exception table; rethrow case\n+                assert(cpn->_con > 1, \"not an exception table projection\"); \/\/ exception table; rethrow case\n@@ -969,1 +969,1 @@\n-            assert(e->in(0)->as_CatchProj()->_con > 1, \"\"); \/\/ exception table for rethrow case\n+            assert(e->in(0)->as_CatchProj()->_con > 1, \"not an exception table projection\"); \/\/ exception table for rethrow case\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -616,1 +616,1 @@\n-      } else if (use->is_ReachabilityFence()) {\n+      } else if (use->is_ReachabilityFence() && OptimizeReachabilityFences) {\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2;\n+\n+\/*\n+ * @test\n+ * @bug 8290892\n+ * @summary Test diagnostic modes for Reference.reachabilityFence support \n+ *\n+ * @requires vm.compiler2.enabled\n+ *\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions \n+ *                   -XX:+StressReachabilityFences -XX:-OptimizeReachabilityFences -XX:-PreserveReachabilityFencesOnConstants \n+ *                     compiler.c2.TestReachabilityFenceFlags\n+ *\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions \n+ *                   -XX:+StressReachabilityFences -XX:-OptimizeReachabilityFences -XX:+PreserveReachabilityFencesOnConstants \n+ *                     compiler.c2.TestReachabilityFenceFlags\n+ *\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions \n+ *                   -XX:+StressReachabilityFences -XX:+OptimizeReachabilityFences -XX:-PreserveReachabilityFencesOnConstants \n+ *                     compiler.c2.TestReachabilityFenceFlags\n+ *\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions \n+ *                   -XX:+StressReachabilityFences -XX:+OptimizeReachabilityFences -XX:+PreserveReachabilityFencesOnConstants \n+ *                     compiler.c2.TestReachabilityFenceFlags\n+ *\/\n+public class TestReachabilityFenceFlags {\n+    public static void main(String[] args) throws Throwable {\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestReachabilityFenceFlags.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"}]}