{"files":[{"patch":"@@ -766,11 +766,3 @@\n-  float infrequent_prob = PROB_UNLIKELY_MAG(3);\n-  \/\/ Ignore cost and blocks frequency if CMOVE can be moved outside the loop.\n-  if (used_inside_loop) {\n-    if (cost >= ConditionalMoveLimit) return nullptr; \/\/ Too much goo\n-\n-    \/\/ BlockLayoutByFrequency optimization moves infrequent branch\n-    \/\/ from hot path. No point in CMOV'ing in such case (110 is used\n-    \/\/ instead of 100 to take into account not exactness of float value).\n-    if (BlockLayoutByFrequency) {\n-      infrequent_prob = MAX2(infrequent_prob, (float)BlockLayoutMinDiamondPercentage\/110.0f);\n-    }\n+  \/\/ Ignore cost if CMOVE can be moved outside the loop.\n+  if (used_inside_loop && cost >= ConditionalMoveLimit) {\n+    return nullptr;\n@@ -780,0 +772,1 @@\n+  constexpr float infrequent_prob = PROB_UNLIKELY_MAG(2);\n@@ -782,2 +775,1 @@\n-  } else if (iff->_prob < infrequent_prob ||\n-      iff->_prob > (1.0f - infrequent_prob))\n+  } else if (iff->_prob < infrequent_prob || iff->_prob > (1.0f - infrequent_prob)) {\n@@ -785,0 +777,1 @@\n+  }\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.random.RandomGeneratorFactory;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 1)\n+public class CMove {\n+    static final int SIZE = 1000000;\n+\n+    @Param({\"3\", \"6\", \"10\", \"20\", \"30\", \"60\", \"100\", \"200\", \"300\", \"600\"})\n+    int freq;\n+\n+    boolean[] conds;\n+\n+    @Setup(Level.Iteration)\n+    public void setup() {\n+        var r = RandomGeneratorFactory.getDefault().create(1);\n+        conds = new boolean[SIZE];\n+        for (int i = 0; i < SIZE; i++) {\n+            conds[i] = r.nextInt(1000) < freq;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void run(Blackhole bh) {\n+        for (int i = 0; i < conds.length; i++) {\n+            bh.consume(conds[i] ? 2 : 1);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/CMove.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"}]}