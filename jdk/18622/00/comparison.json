{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -262,0 +262,10 @@\n+        \/\/ verify that the default HEAD() method implementation in HttpRequest.Builder\n+        \/\/ interface works as expected\n+        HttpRequest defaultHeadReq = new NotOverriddenHEADImpl().HEAD().uri(TEST_URI).build();\n+        String actualMethod = defaultHeadReq.method();\n+        if (!actualMethod.equals(\"HEAD\")) {\n+            throw new AssertionError(\"failed: expected HEAD method but got method: \" + actualMethod);\n+        }\n+        if (defaultHeadReq.bodyPublisher().isEmpty()) {\n+            throw new AssertionError(\"failed: missing bodyPublisher on HEAD request\");\n+        }\n@@ -370,0 +380,75 @@\n+\n+    \/\/ doesn't override the default HEAD() method\n+    private static final class NotOverriddenHEADImpl implements HttpRequest.Builder {\n+        private final HttpRequest.Builder underlying = HttpRequest.newBuilder();\n+\n+        @Override\n+        public HttpRequest.Builder uri(URI uri) {\n+            return this.underlying.uri(uri);\n+        }\n+\n+        @Override\n+        public HttpRequest.Builder expectContinue(boolean enable) {\n+            return this.underlying.expectContinue(enable);\n+        }\n+\n+        @Override\n+        public HttpRequest.Builder version(HttpClient.Version version) {\n+            return this.underlying.version(version);\n+        }\n+\n+        @Override\n+        public HttpRequest.Builder header(String name, String value) {\n+            return this.underlying.header(name, value);\n+        }\n+\n+        @Override\n+        public HttpRequest.Builder headers(String... headers) {\n+            return this.underlying.headers(headers);\n+        }\n+\n+        @Override\n+        public HttpRequest.Builder timeout(Duration duration) {\n+            return this.underlying.timeout(duration);\n+        }\n+\n+        @Override\n+        public HttpRequest.Builder setHeader(String name, String value) {\n+            return this.underlying.setHeader(name, value);\n+        }\n+\n+        @Override\n+        public HttpRequest.Builder GET() {\n+            return this.underlying.GET();\n+        }\n+\n+        @Override\n+        public HttpRequest.Builder POST(HttpRequest.BodyPublisher bodyPublisher) {\n+            return this.underlying.POST(bodyPublisher);\n+        }\n+\n+        @Override\n+        public HttpRequest.Builder PUT(HttpRequest.BodyPublisher bodyPublisher) {\n+            return this.underlying.PUT(bodyPublisher);\n+        }\n+\n+        @Override\n+        public HttpRequest.Builder DELETE() {\n+            return this.underlying.DELETE();\n+        }\n+\n+        @Override\n+        public HttpRequest.Builder method(String method, HttpRequest.BodyPublisher bodyPublisher) {\n+            return this.underlying.method(method, bodyPublisher);\n+        }\n+\n+        @Override\n+        public HttpRequest build() {\n+            return this.underlying.build();\n+        }\n+\n+        @Override\n+        public HttpRequest.Builder copy() {\n+            return this.underlying.copy();\n+        }\n+    }\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpRequestBuilderTest.java","additions":86,"deletions":1,"binary":false,"changes":87,"status":"modified"}]}