{"files":[{"patch":"@@ -170,2 +170,1 @@\n-\n-  bool equals(const FullMethodName& b) const {\n+  bool operator== (const FullMethodName& b) const {\n@@ -174,2 +173,0 @@\n-\n-  bool operator== (const FullMethodName& other) const { return equals(other); }\n@@ -295,0 +292,8 @@\n+};\n+\n+\/\/ The MemStatTable contains records of memory usage of all compilations. It is printed,\n+\/\/ as memory summary, either with jcmd Compiler.memory, or - if the \"print\" suboption has\n+\/\/ been given with the MemStat compile command - as summary printout at VM exit.\n+\/\/ For any given compiled method, we only keep the memory statistics of the most recent\n+\/\/ compilation, but on a per-compiler basis. If one needs statistics of prior compilations,\n+\/\/ one needs to look into the log produced by the \"print\" suboption.\n@@ -296,2 +301,13 @@\n-  bool equals(const FullMethodName& b) const {\n-    return _method.equals(b);\n+class MemStatTableKey {\n+  const FullMethodName _fmn;\n+  const CompilerType _comptype;\n+public:\n+  MemStatTableKey(FullMethodName fmn, CompilerType comptype) :\n+    _fmn(fmn), _comptype(comptype) {}\n+  MemStatTableKey(const MemStatTableKey& o) :\n+    _fmn(o._fmn), _comptype(o._comptype) {}\n+  bool operator== (const MemStatTableKey& other) const {\n+    return _fmn == other._fmn && _comptype == other._comptype;\n+  }\n+  static unsigned compute_hash(const MemStatTableKey& n) {\n+    return FullMethodName::compute_hash(n._fmn) + (unsigned)n._comptype;\n@@ -302,2 +318,2 @@\n-    public ResourceHashtable<FullMethodName, MemStatEntry*, 7919, AnyObj::C_HEAP,\n-                             mtInternal, FullMethodName::compute_hash>\n+    public ResourceHashtable<MemStatTableKey, MemStatEntry*, 7919, AnyObj::C_HEAP,\n+                             mtInternal, MemStatTableKey::compute_hash>\n@@ -311,2 +327,2 @@\n-\n-    MemStatEntry** pe = get(fmn);\n+    MemStatTableKey key(fmn, comptype);\n+    MemStatEntry** pe = get(key);\n@@ -316,1 +332,1 @@\n-      put(fmn, e);\n+      put(key, e);\n@@ -341,1 +357,1 @@\n-    auto do_f = [&] (const FullMethodName& ignored, MemStatEntry* e) {\n+    auto do_f = [&] (const MemStatTableKey& ignored, MemStatEntry* e) {\n","filename":"src\/hotspot\/share\/compiler\/compilationMemoryStatistic.cpp","additions":28,"deletions":12,"binary":false,"changes":40,"status":"modified"}]}