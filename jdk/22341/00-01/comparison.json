{"files":[{"patch":"@@ -3176,26 +3176,5 @@\n-  int slots = 0;\n-  constexpr int NumRegs = 5;\n-  Register* regs[NumRegs] = {&temp_reg, &temp2_reg, &temp3_reg, &temp4_reg, &result_reg};\n-  bool is_noreg[NumRegs] = {\n-    temp_reg == noreg,\n-    temp2_reg == noreg,\n-    temp3_reg == noreg,\n-    temp4_reg == noreg,\n-    result_reg == noreg\n-  };\n-\n-  \/\/ Allocate registers and count slots\n-  for (int i = 0; i < NumRegs; ++i) {\n-    if (is_noreg[i]) {\n-      slots++;\n-      *regs[i] = allocate_if_noreg(*regs[i], available_regs, pushed_regs);\n-    }\n-  }\n-\n-#ifdef ASSERT\n-  assert(temp_reg   != noreg, \"temp_reg: sanity\");\n-  assert(temp2_reg  != noreg, \"temp2_reg: sanity\");\n-  assert(temp3_reg  != noreg, \"temp3_reg: sanity\");\n-  assert(temp4_reg  != noreg, \"temp4_reg: sanity\");\n-  assert(result_reg != noreg, \"result_reg: sanity\");\n-#endif \/\/ ASSERT\n+  temp_reg  = allocate_if_noreg(temp_reg,  available_regs, pushed_regs);\n+  temp2_reg = allocate_if_noreg(temp2_reg, available_regs, pushed_regs);\n+  temp3_reg = allocate_if_noreg(temp3_reg, available_regs, pushed_regs);;\n+  temp4_reg = allocate_if_noreg(temp4_reg, available_regs, pushed_regs);\n+  result_reg = allocate_if_noreg(result_reg, available_regs, pushed_regs);\n@@ -3203,1 +3182,1 @@\n-  const int frame_size = slots * BytesPerWord + frame::z_abi_160_size;\n+  const int frame_size = pushed_regs.size() * BytesPerWord + frame::z_abi_160_size;\n@@ -3211,4 +3190,2 @@\n-    for (int j = 0; j < NumRegs; ++j) {\n-      if (is_noreg[j]) {\n-        z_stg(*regs[j], (i++) * BytesPerWord + frame::z_abi_160_size, Z_SP);\n-      }\n+    for (auto it = pushed_regs.begin(); *it != noreg; i++) {\n+      z_stg(*it++, i * BytesPerWord + frame::z_abi_160_size, Z_SP);\n@@ -3216,1 +3193,0 @@\n-\n@@ -3228,4 +3204,2 @@\n-    for (int j = 0; j < NumRegs; ++j) {\n-      if (is_noreg[j]) {\n-        z_lg(*regs[j], (i++) * BytesPerWord + frame::z_abi_160_size, Z_SP);\n-      }\n+    for (auto it = pushed_regs.begin(); *it != noreg; ++i) {\n+      z_lg(*it++, i * BytesPerWord + frame::z_abi_160_size, Z_SP);\n@@ -3233,1 +3207,0 @@\n-\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":10,"deletions":37,"binary":false,"changes":47,"status":"modified"}]}