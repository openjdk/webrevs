{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.io.IOException;\n@@ -920,6 +921,10 @@\n-        StringBuilder result = new StringBuilder();\n-        appendExpandedReplacement(replacement, result);\n-        \/\/ Append the intervening text\n-        sb.append(text, lastAppendPosition, first);\n-        \/\/ Append the match substitution\n-        sb.append(result);\n+        int curLen = sb.length();\n+        try {\n+            \/\/ Append the intervening text\n+            sb.append(text, lastAppendPosition, first);\n+            \/\/ Append the match substitution\n+            appendExpandedReplacement(sb, replacement);\n+        } catch (IllegalArgumentException e) {\n+            sb.setLength(curLen);\n+            throw e;\n+        }\n@@ -1007,1 +1012,0 @@\n-        \/\/ If no match, return error\n@@ -1009,6 +1013,10 @@\n-        StringBuilder result = new StringBuilder();\n-        appendExpandedReplacement(replacement, result);\n-        \/\/ Append the intervening text\n-        sb.append(text, lastAppendPosition, first);\n-        \/\/ Append the match substitution\n-        sb.append(result);\n+        int curLen = sb.length();\n+        try {\n+            \/\/ Append the intervening text\n+            sb.append(text, lastAppendPosition, first);\n+            \/\/ Append the match substitution\n+            appendExpandedReplacement(sb, replacement);\n+        } catch (IllegalArgumentException e) {\n+            sb.setLength(curLen);\n+            throw e;\n+        }\n@@ -1024,23 +1032,6 @@\n-    private StringBuilder appendExpandedReplacement(\n-        String replacement, StringBuilder result) {\n-        int cursor = 0;\n-        while (cursor < replacement.length()) {\n-            char nextChar = replacement.charAt(cursor);\n-            if (nextChar == '\\\\') {\n-                cursor++;\n-                if (cursor == replacement.length())\n-                    throw new IllegalArgumentException(\n-                        \"character to be escaped is missing\");\n-                nextChar = replacement.charAt(cursor);\n-                result.append(nextChar);\n-                cursor++;\n-            } else if (nextChar == '$') {\n-                \/\/ Skip past $\n-                cursor++;\n-                \/\/ Throw IAE if this \"$\" is the last character in replacement\n-                if (cursor == replacement.length())\n-                   throw new IllegalArgumentException(\n-                        \"Illegal group reference: group index is missing\");\n-                nextChar = replacement.charAt(cursor);\n-                int refNum = -1;\n-                if (nextChar == '{') {\n+    private void appendExpandedReplacement(Appendable app, String replacement) {\n+        try {\n+            int cursor = 0;\n+            while (cursor < replacement.length()) {\n+                char nextChar = replacement.charAt(cursor);\n+                if (nextChar == '\\\\') {\n@@ -1048,24 +1039,1 @@\n-                    StringBuilder gsb = new StringBuilder();\n-                    while (cursor < replacement.length()) {\n-                        nextChar = replacement.charAt(cursor);\n-                        if (ASCII.isLower(nextChar) ||\n-                            ASCII.isUpper(nextChar) ||\n-                            ASCII.isDigit(nextChar)) {\n-                            gsb.append(nextChar);\n-                            cursor++;\n-                        } else {\n-                            break;\n-                        }\n-                    }\n-                    if (gsb.length() == 0)\n-                        throw new IllegalArgumentException(\n-                            \"named capturing group has 0 length name\");\n-                    if (nextChar != '}')\n-                        throw new IllegalArgumentException(\n-                            \"named capturing group is missing trailing '}'\");\n-                    String gname = gsb.toString();\n-                    if (ASCII.isDigit(gname.charAt(0)))\n-                        throw new IllegalArgumentException(\n-                            \"capturing group name {\" + gname +\n-                            \"} starts with digit character\");\n-                    if (!namedGroups().containsKey(gname))\n+                    if (cursor == replacement.length())\n@@ -1073,2 +1041,3 @@\n-                            \"No group with name {\" + gname + \"}\");\n-                    refNum = namedGroups().get(gname);\n+                                \"character to be escaped is missing\");\n+                    nextChar = replacement.charAt(cursor);\n+                    app.append(nextChar);\n@@ -1076,6 +1045,2 @@\n-                } else {\n-                    \/\/ The first number is always a group\n-                    refNum = nextChar - '0';\n-                    if ((refNum < 0) || (refNum > 9))\n-                        throw new IllegalArgumentException(\n-                            \"Illegal group reference\");\n+                } else if (nextChar == '$') {\n+                    \/\/ Skip past $\n@@ -1083,9 +1048,18 @@\n-                    \/\/ Capture the largest legal group string\n-                    boolean done = false;\n-                    while (!done) {\n-                        if (cursor >= replacement.length()) {\n-                            break;\n-                        }\n-                        int nextDigit = replacement.charAt(cursor) - '0';\n-                        if ((nextDigit < 0) || (nextDigit > 9)) { \/\/ not a number\n-                            break;\n+                    \/\/ Throw IAE if this \"$\" is the last character in replacement\n+                    if (cursor == replacement.length())\n+                        throw new IllegalArgumentException(\n+                                \"Illegal group reference: group index is missing\");\n+                    nextChar = replacement.charAt(cursor);\n+                    int refNum = -1;\n+                    if (nextChar == '{') {\n+                        cursor++;\n+                        int begin = cursor;\n+                        while (cursor < replacement.length()) {\n+                            nextChar = replacement.charAt(cursor);\n+                            if (ASCII.isLower(nextChar) ||\n+                                    ASCII.isUpper(nextChar) ||\n+                                    ASCII.isDigit(nextChar)) {\n+                                cursor++;\n+                            } else {\n+                                break;\n+                            }\n@@ -1093,6 +1067,40 @@\n-                        int newRefNum = (refNum * 10) + nextDigit;\n-                        if (groupCount() < newRefNum) {\n-                            done = true;\n-                        } else {\n-                            refNum = newRefNum;\n-                            cursor++;\n+                        if (begin == cursor)\n+                            throw new IllegalArgumentException(\n+                                    \"named capturing group has 0 length name\");\n+                        if (nextChar != '}')\n+                            throw new IllegalArgumentException(\n+                                    \"named capturing group is missing trailing '}'\");\n+                        String gname = replacement.substring(begin, cursor);\n+                        if (ASCII.isDigit(gname.charAt(0)))\n+                            throw new IllegalArgumentException(\n+                                    \"capturing group name {\" + gname +\n+                                            \"} starts with digit character\");\n+                        if (!namedGroups().containsKey(gname))\n+                            throw new IllegalArgumentException(\n+                                    \"No group with name {\" + gname + \"}\");\n+                        refNum = namedGroups().get(gname);\n+                        cursor++;\n+                    } else {\n+                        \/\/ The first number is always a group\n+                        refNum = nextChar - '0';\n+                        if ((refNum < 0) || (refNum > 9))\n+                            throw new IllegalArgumentException(\n+                                    \"Illegal group reference\");\n+                        cursor++;\n+                        \/\/ Capture the largest legal group string\n+                        boolean done = false;\n+                        while (!done) {\n+                            if (cursor >= replacement.length()) {\n+                                break;\n+                            }\n+                            int nextDigit = replacement.charAt(cursor) - '0';\n+                            if ((nextDigit < 0) || (nextDigit > 9)) { \/\/ not a number\n+                                break;\n+                            }\n+                            int newRefNum = (refNum * 10) + nextDigit;\n+                            if (groupCount() < newRefNum) {\n+                                done = true;\n+                            } else {\n+                                refNum = newRefNum;\n+                                cursor++;\n+                            }\n@@ -1101,0 +1109,6 @@\n+                    \/\/ Append group\n+                    if (start(refNum) != -1 && end(refNum) != -1)\n+                        app.append(text, start(refNum), end(refNum));\n+                } else {\n+                    app.append(nextChar);\n+                    cursor++;\n@@ -1102,6 +1116,0 @@\n-                \/\/ Append group\n-                if (start(refNum) != -1 && end(refNum) != -1)\n-                    result.append(text, start(refNum), end(refNum));\n-            } else {\n-                result.append(nextChar);\n-                cursor++;\n@@ -1109,0 +1117,2 @@\n+        } catch (IOException e) {  \/\/ cannot happen on String[Buffer|Builder]\n+            throw new AssertionError(e.getMessage());\n@@ -1110,1 +1120,0 @@\n-        return result;\n","filename":"src\/java.base\/share\/classes\/java\/util\/regex\/Matcher.java","additions":100,"deletions":91,"binary":false,"changes":191,"status":"modified"}]}