{"files":[{"patch":"@@ -61,1 +61,1 @@\n-    _file_input(file),\n+    _file_input(do_open(file), \/* need_close=*\/true),\n@@ -81,0 +81,13 @@\n+FILE* ClassListParser::do_open(const char* file) {\n+  \/\/ Use os::open() because neither fopen() nor os::fopen()\n+  \/\/ can handle long path name on Windows. (See JDK-8216184)\n+  int fd = os::open(file, O_RDONLY, S_IREAD);\n+  FILE* fp = nullptr;\n+  if (fd != -1) {\n+    \/\/ Obtain a FILE* from the file descriptor so that _input_stream\n+    \/\/ can be used in ClassListParser::parse()\n+    fp = os::fdopen(fd, \"r\");\n+  }\n+  return fp;\n+}\n+\n","filename":"src\/hotspot\/share\/cds\/classListParser.cpp","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-\n+  FILE* do_open(const char* file);\n","filename":"src\/hotspot\/share\/cds\/classListParser.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @bug 8216184\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/LongClassListPath.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}