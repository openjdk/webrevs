{"files":[{"patch":"@@ -274,7 +274,2 @@\n-  } else if (_buffer != nullptr && _buffer == _must_free) {\n-    COV(EXB_R);\n-    new_buf = REALLOC_C_HEAP_ARRAY(char, _buffer, new_length, mtInternal);\n-    if (new_buf != nullptr) {\n-      _must_free = new_buf;\n-    }\n-  } else {  \/\/ fresh allocation\n+  } else if (_buffer == &_small_buffer[0]) {\n+    \/\/ fresh alloc from c-heap\n@@ -284,2 +279,0 @@\n-      assert(_must_free == nullptr, \"dropped free\");\n-      _must_free = new_buf;\n@@ -291,0 +284,4 @@\n+  } else {\n+    \/\/ realloc\n+    COV(EXB_R);\n+    new_buf = REALLOC_C_HEAP_ARRAY(char, _buffer, new_length, mtInternal);\n@@ -292,0 +289,1 @@\n+\n@@ -300,5 +298,3 @@\n-void inputStream::handle_free() {\n-  void* to_free = _must_free;\n-  if (to_free == nullptr)  return;\n-  _must_free = nullptr;\n-  FreeHeap(to_free);\n+void inputStream::free_c_heap_buffer() {\n+  FreeHeap(_buffer);\n+  _buffer = nullptr;\n@@ -317,1 +313,1 @@\n-                \" B=%llx%s[%d], LN=%d, MF=%llx\",\n+                \" B=%llx%s[%d], LN=%d, CH=%d\",\n@@ -334,1 +330,1 @@\n-                (unsigned long long)(intptr_t)_must_free);\n+                has_c_heap_buffer());\n","filename":"src\/hotspot\/share\/utilities\/istream.cpp","additions":12,"deletions":16,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -106,1 +106,0 @@\n-  void*  _must_free;    \/\/ unless null, a malloc pointer which we must free\n@@ -111,1 +110,4 @@\n-  void handle_free();\n+  bool has_c_heap_buffer() {\n+    return _buffer != nullptr && _buffer != &_small_buffer[0];\n+  }\n+  void free_c_heap_buffer();\n@@ -134,2 +136,0 @@\n-  \/\/ A call to set_current_line_position (re-)fetches the indicated line.\n-  \/\/\n@@ -236,1 +236,0 @@\n-    _must_free(nullptr),\n@@ -247,1 +246,1 @@\n-    if (_must_free)         handle_free();\n+    if (has_c_heap_buffer()) free_c_heap_buffer();\n@@ -329,13 +328,0 @@\n-    \/\/ Give the current number of bytes already produced by the source.\n-    \/\/ Give (size_t)-1 if this source does have a tracked position.\n-    \/\/ A tracked position increments by the result of every call to read.\n-    virtual size_t position() { return -1; }\n-\n-    \/\/ Give the remaining number of bytes which might be produced in the future.\n-    \/\/ Give (size_t)-1 if this source does not keep track of that number.\n-    virtual size_t remaining() { return -1; }\n-\n-    \/\/ Rewind so that the position appears to be the given one.\n-    \/\/ Return the new position, or else (size_t)-1 if the request fails.\n-    virtual size_t set_position(size_t position) { return -1; }\n-\n@@ -347,11 +333,0 @@\n-template<typename BlockClass>\n-class BlockInputStream : public inputStream {\n-  BlockClass _input;\n- public:\n-  template<typename... Arg>\n-  BlockInputStream(Arg... arg)\n-    : _input(arg...) {\n-    set_input(&_input);\n-  }\n-};\n-\n@@ -388,9 +363,0 @@\n-  virtual size_t position() {\n-    return _fs.position();\n-  }\n-  virtual size_t remaining() {\n-    return _fs.remaining();\n-  }\n-  virtual size_t set_position(size_t position) {\n-    return _fs.set_position(position);\n-  }\n@@ -406,1 +372,0 @@\n-  const void* _must_free;  \/\/ unless null, a malloc pointer which we must free\n@@ -410,1 +375,0 @@\n-              bool must_free = false,\n@@ -412,4 +376,1 @@\n-    : _base(base), _limit(size), _offset(offset)\n-  {\n-    _must_free = must_free ? base : nullptr;\n-  }\n+    : _base(base), _limit(size), _offset(offset) {}\n@@ -433,14 +394,0 @@\n-  virtual size_t position() {\n-    return _offset;\n-  }\n-  virtual size_t remaining() {\n-    return _limit - _offset;\n-  }\n-  virtual size_t set_position(size_t position) {\n-    if (position <= _limit) {\n-      _offset = position;\n-    } else {\n-      position = (size_t)-1;\n-    }\n-    return position;\n-  }\n","filename":"src\/hotspot\/share\/utilities\/istream.hpp","additions":6,"deletions":59,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -32,0 +32,11 @@\n+template<typename BlockClass>\n+class BlockInputStream : public inputStream {\n+  BlockClass _input;\n+ public:\n+  template<typename... Arg>\n+  BlockInputStream(Arg... arg)\n+    : _input(arg...) {\n+    set_input(&_input);\n+  }\n+};\n+\n","filename":"test\/hotspot\/gtest\/utilities\/test_istream.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"}]}