{"files":[{"patch":"@@ -89,2 +89,2 @@\n-    tail(0),\n-    head(0) {}\n+    _tail(0),\n+    _head(0) {}\n@@ -92,3 +92,3 @@\n-size_t CircularStringBuffer::used() {\n-  size_t h = Atomic::load(&head);\n-  size_t t = Atomic::load(&tail);\n+size_t CircularStringBuffer::allocated_bytes() {\n+  size_t h = Atomic::load(&_head);\n+  size_t t = Atomic::load(&_tail);\n@@ -101,2 +101,2 @@\n-size_t CircularStringBuffer::unused() {\n-  return circular_mapping.size - used();\n+size_t CircularStringBuffer::available_bytes() {\n+  return circular_mapping.size - allocated_bytes();\n@@ -105,1 +105,1 @@\n-size_t CircularStringBuffer::calc_mem(size_t sz) {\n+size_t CircularStringBuffer::calculate_bytes_needed(size_t sz) {\n@@ -112,2 +112,2 @@\n-  const size_t required_memory = calc_mem(size);\n-  size_t unused = this->unused();\n+  const size_t required_memory = calculate_bytes_needed(size);\n+  size_t unused = this->available_bytes();\n@@ -123,1 +123,1 @@\n-        unused = this->unused();\n+        unused = this->available_bytes();\n@@ -135,1 +135,1 @@\n-  size_t t = tail;\n+  size_t t = _tail;\n@@ -144,1 +144,1 @@\n-  tail = (t + required_memory) % circular_mapping.size;\n+  Atomic::store(&_tail, (t + required_memory) % circular_mapping.size);\n@@ -152,1 +152,1 @@\n-  WriteLocker wl(this);\n+  ProducerLocker wl(this);\n@@ -157,1 +157,1 @@\n-  WriteLocker wl(this);\n+  ProducerLocker wl(this);\n@@ -166,1 +166,1 @@\n-  ReadLocker rl(this);\n+  ConsumerLocker rl(this);\n@@ -168,2 +168,2 @@\n-  size_t h = head;\n-  size_t t = tail;\n+  size_t h = _head;\n+  size_t t = _tail;\n@@ -188,1 +188,1 @@\n-  head = (h + out_msg->size) % circular_mapping.size;\n+  Atomic::store(&_head, (h + out_msg->size) % circular_mapping.size);\n@@ -206,2 +206,2 @@\n-  size_t h = Atomic::load(&head);\n-  size_t t = Atomic::load(&tail);\n+  size_t h = Atomic::load(&_head);\n+  size_t t = Atomic::load(&_tail);\n@@ -213,2 +213,2 @@\n-    ReadLocker rl(this);\n-    while (head == tail) {\n+    ConsumerLocker rl(this);\n+    while (_head == _tail) {\n","filename":"src\/hotspot\/share\/logging\/circularStringBuffer.cpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -61,2 +61,2 @@\n-    munmap(buffer, size * 2);\n-    fclose(file);\n+    ::munmap(buffer, size * 2);\n+    ::fclose(file);\n@@ -66,1 +66,1 @@\n-    memcpy(&buffer[at], bytes, size);\n+    ::memcpy(&buffer[at], bytes, size);\n@@ -70,1 +70,1 @@\n-    memcpy(out, &buffer[at], size);\n+    ::memcpy(out, &buffer[at], size);\n@@ -74,0 +74,1 @@\n+\/\/ On other platforms we resort to a double memcpy.\n@@ -124,1 +125,1 @@\n-  struct ReadLocker : public StackObj {\n+  struct ConsumerLocker : public StackObj {\n@@ -126,1 +127,1 @@\n-    ReadLocker(CircularStringBuffer* buf) : buf(buf) {\n+    ConsumerLocker(CircularStringBuffer* buf) : buf(buf) {\n@@ -129,1 +130,1 @@\n-    ~ReadLocker() {\n+    ~ConsumerLocker() {\n@@ -133,1 +134,1 @@\n-  struct WriteLocker : public StackObj {\n+  struct ProducerLocker : public StackObj {\n@@ -135,1 +136,1 @@\n-    WriteLocker(CircularStringBuffer* buf) : buf(buf) {\n+    ProducerLocker(CircularStringBuffer* buf) : buf(buf) {\n@@ -138,1 +139,1 @@\n-    ~WriteLocker() {\n+    ~ProducerLocker() {\n@@ -148,2 +149,2 @@\n-  volatile size_t tail; \/\/ Where new writes happen\n-  volatile size_t head; \/\/ Where new reads happen\n+  volatile size_t _tail; \/\/ Where new writes happen\n+  volatile size_t _head; \/\/ Where new reads happen\n@@ -151,3 +152,4 @@\n-  size_t used();\n-  size_t unused();\n-  size_t calc_mem(size_t sz);\n+  size_t allocated_bytes();\n+  size_t available_bytes();\n+  \/\/ How many bytes are needed to store a message of size sz?\n+  size_t calculate_bytes_needed(size_t sz);\n","filename":"src\/hotspot\/share\/logging\/circularStringBuffer.hpp","additions":17,"deletions":15,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -66,3 +66,4 @@\n-    CircularStringBuffer::DequeueResult result = _circular_buffer.dequeue(&msg, write_buffer, write_buffer_size);\n-    assert(result != CircularStringBuffer::DequeueResult::NoMessage, \"Race detected but there is only one reading thread\");\n-    if (result == CircularStringBuffer::DequeueResult::TooSmall) {\n+    using DequeueResult = CircularStringBuffer::DequeueResult;\n+    DequeueResult result = _circular_buffer.dequeue(&msg, write_buffer, write_buffer_size);\n+    assert(result != DequeueResult::NoMessage, \"Race detected but there is only one reading thread\");\n+    if (result == DequeueResult::TooSmall) {\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2589,1 +2589,1 @@\n-        } else if(strcmp(async_tail, \":drop\") == 0) {\n+        } else if (strcmp(async_tail, \":drop\") == 0) {\n@@ -2591,1 +2591,1 @@\n-        } else if(*async_tail == '\\0') {\n+        } else if (*async_tail == '\\0') {\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}