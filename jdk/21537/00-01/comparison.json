{"files":[{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -32,0 +33,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -73,2 +75,3 @@\n-        KeyPairGenerator kpairGen = KeyPairGenerator.getInstance(\"DSA\");\n-        kpairGen.initialize(2048);\n+        String kpgAlgorithm = \"DSA\";\n+        KeyPairGenerator kpairGen = KeyPairGenerator.getInstance(kpgAlgorithm);\n+        kpairGen.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/DES\/KeyWrapping.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -33,0 +34,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -39,2 +41,3 @@\n-        KeyPairGenerator kpgen = KeyPairGenerator.getInstance(\"DSA\");\n-        kpgen.initialize(2048);\n+        String kpgAlgorithm = \"DSA\";\n+        KeyPairGenerator kpgen = KeyPairGenerator.getInstance(kpgAlgorithm);\n+        kpgen.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/DES\/Sealtest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -57,0 +58,1 @@\n+ * @library \/test\/lib\n@@ -272,1 +274,1 @@\n-            kpg.initialize(2048);\n+            kpg.initialize(SecurityUtils.getTestKeySize(algo));\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/KeyWrap\/TestCipherKeyWrapperTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @library \/test\/lib\n@@ -41,0 +42,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -69,1 +71,1 @@\n-        byte[] salt = new byte[16];\n+        byte[] salt = new byte[SecurityUtils.getTestSaltSize()];\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/PBE\/PBEKeyCleanupTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -38,0 +39,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -60,2 +62,3 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\", kfp);\n-        kpg.initialize(2048);\n+        String kpgAlgorithm = \"RSA\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm, kfp);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/RSA\/TestOAEPWithParams.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -50,0 +51,1 @@\n+            String kpgAlgorithm = \"DiffieHellman\";\n@@ -51,1 +53,1 @@\n-            keyPairGen.initialize(2048);\n+            keyPairGen.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyAgreement\/DHKeyAgreementPadding.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -48,0 +49,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -111,1 +113,1 @@\n-            \"passPhrase\".toCharArray(), new byte [16], 1000, 512);\n+            \"passPhrase\".toCharArray(), new byte [SecurityUtils.getTestSaltSize()], 1000, 512);\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyFactory\/TestProviderLeak.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -58,0 +59,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -81,1 +83,1 @@\n-                kpg.initialize(2048);\n+                kpg.initialize(SecurityUtils.getTestKeySize(kpgInit));\n","filename":"test\/jdk\/java\/security\/KeyAgreement\/KeySpecTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -42,0 +43,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -71,1 +73,1 @@\n-                kpg.initialize(2048);\n+                kpg.initialize(SecurityUtils.getTestKeySize(kpgInit));\n","filename":"test\/jdk\/java\/security\/KeyAgreement\/MultiThreadTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -96,1 +97,1 @@\n-                kpg.initialize(2048);\n+                kpg.initialize(SecurityUtils.getTestKeySize(kpgInit));\n","filename":"test\/jdk\/java\/security\/KeyAgreement\/NegativeTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library ..\/testlibrary\n+ * @library ..\/testlibrary \/test\/lib\n@@ -37,0 +37,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -75,2 +76,3 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"DSA\");\n-        kpg.initialize(2048);\n+        String kpgAlgorithm = \"DSA\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/java\/security\/KeyFactory\/Failover.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -32,0 +33,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -37,2 +39,3 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"DSA\");\n-        kpg.initialize(2048);\n+        String kpgAlgorithm = \"DSA\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/java\/security\/KeyPairGenerator\/GenerateKeypair.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -34,0 +35,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -39,0 +41,1 @@\n+        String kpgAlgorithm = \"RSA\";\n@@ -40,2 +43,3 @@\n-        new RSAKeyGenParameterSpec (2048, RSAKeyGenParameterSpec.F4);\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\", \"SunRsaSign\");\n+        new RSAKeyGenParameterSpec (SecurityUtils.getTestKeySize(kpgAlgorithm),\n+                RSAKeyGenParameterSpec.F4);\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm, \"SunRsaSign\");\n","filename":"test\/jdk\/java\/security\/KeyPairGenerator\/GenerateRSAKeyPair.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -36,0 +37,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -40,2 +42,3 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"DSA\");\n-        kpg.initialize(2048);\n+        String kpgAlgorithm = \"DSA\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/java\/security\/Provider\/SupportsParameter.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -37,0 +38,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -46,2 +48,3 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n-        kpg.initialize(2048);\n+        String kpgAlgorithm = \"RSA\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/java\/security\/Signature\/NONEwithRSA.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -31,0 +32,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -54,0 +56,1 @@\n+            String kpgAlgorithm = \"RSA\";\n@@ -58,1 +61,1 @@\n-                keyGen = KeyPairGenerator.getInstance(\"RSA\", p);\n+                keyGen = KeyPairGenerator.getInstance(kpgAlgorithm, p);\n@@ -60,1 +63,1 @@\n-                keyGen = KeyPairGenerator.getInstance(\"RSA\");\n+                keyGen = KeyPairGenerator.getInstance(kpgAlgorithm);\n@@ -65,1 +68,1 @@\n-            keyGen.initialize(2048);\n+            keyGen.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/java\/security\/Signature\/ResetAfterException.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @library \/test\/lib\n@@ -38,0 +39,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -42,2 +44,3 @@\n-        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"DSA\");\n-        keyPairGenerator.initialize(2048);\n+        String kpgAlgorithm = \"DSA\";\n+        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(kpgAlgorithm);\n+        keyPairGenerator.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/java\/security\/Signature\/VerifyRangeCheckOverflow.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -33,0 +34,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -41,1 +43,1 @@\n-        cakg.generate(2048);\n+        cakg.generate(SecurityUtils.getTestKeySize(\"RSA\"));\n","filename":"test\/jdk\/java\/security\/cert\/X509Certificate\/GetSigAlgParams.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -35,0 +36,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -38,1 +40,2 @@\n-        KeyPair keypair = generateKeyPair(\"RSA\", 2048);\n+        String kpgAlgorithm = \"RSA\";\n+        KeyPair keypair = generateKeyPair(kpgAlgorithm, SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/javax\/security\/auth\/Destroyable\/KeyDestructionTest.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -178,2 +179,4 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n-        kpg.initialize(2048);\n+        String kpgRSA = \"RSA\";\n+        String kpgDSA = \"DSA\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgRSA);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgRSA));\n@@ -184,2 +187,2 @@\n-        kpg = KeyPairGenerator.getInstance(\"DSA\");\n-        kpg.initialize(2048);\n+        kpg = KeyPairGenerator.getInstance(kpgDSA);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgDSA));\n","filename":"test\/jdk\/jdk\/security\/jarsigner\/Spec.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -61,2 +62,3 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\", p);\n-        kpg.initialize(2048);\n+        String kpgAlgorithm = \"RSA\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm, p);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestRSACipher.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -60,2 +61,3 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\", p);\n-        kpg.initialize(2048);\n+        String kpgAlgorithm = \"RSA\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm, p);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestRSACipherWrap.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -56,2 +57,3 @@\n-        final int KEY_LEN = 2048;\n-        KeyPairGenerator kpGen = KeyPairGenerator.getInstance(\"RSA\", p);\n+        String kpgAlgorithm = \"RSA\";\n+        final int KEY_LEN = SecurityUtils.getTestKeySize(kpgAlgorithm);\n+        KeyPairGenerator kpGen = KeyPairGenerator.getInstance(kpgAlgorithm, p);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestRawRSACipher.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -50,2 +51,3 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"DH\", p);\n-        kpg.initialize(2048);\n+        String kpgAlgorithm = \"DH\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm, p);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyAgreement\/TestDH.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -37,0 +38,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -93,2 +95,3 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n-        kpg.initialize(2048);\n+        String kpgAlgorithm = \"RSA\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/sun\/security\/provider\/KeyStore\/CaseSensitiveAliases.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -30,0 +31,1 @@\n+ * @library \/test\/lib\n@@ -43,2 +45,3 @@\n-        TestSignatureOidHelper helper = new TestSignatureOidHelper(\"DSA\",\n-                \"SUN\", 2048, DATA);\n+        String kpgAlgorithm = \"DSA\";\n+        TestSignatureOidHelper helper = new TestSignatureOidHelper(kpgAlgorithm,\n+                \"SUN\", SecurityUtils.getTestKeySize(kpgAlgorithm), DATA);\n","filename":"test\/jdk\/sun\/security\/provider\/NSASuiteB\/TestSHAwithDSASignatureOids.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -38,0 +39,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -41,0 +43,1 @@\n+        String kpgAlgorithm = \"RSA\";\n@@ -42,2 +45,2 @@\n-                KeyPairGenerator.getInstance(\"RSA\", \"SunRsaSign\");\n-        generator.initialize(2048);\n+                KeyPairGenerator.getInstance(kpgAlgorithm, \"SunRsaSign\");\n+        generator.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/sun\/security\/rsa\/BrokenRSAPrivateCrtKey.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -116,1 +117,3 @@\n-        int[] keyLengths = {2048, 2048, 3072};\n+        String kpgAlgorithm = \"RSA\";\n+        int keySize = SecurityUtils.getTestKeySize(kpgAlgorithm);\n+        int[] keyLengths = {keySize, keySize, 3072};\n@@ -120,1 +123,1 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\", provider);\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm, provider);\n","filename":"test\/jdk\/sun\/security\/rsa\/TestKeyPairGenerator.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -36,0 +37,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -38,1 +40,2 @@\n-    private static int keyLen = 2048;\n+    private static final String KPG_ALGORITHM = \"RSA\";\n+    private static final int KEY_LENGTH = SecurityUtils.getTestKeySize(KPG_ALGORITHM);\n@@ -43,1 +46,1 @@\n-        BigInteger.ONE.shiftLeft(keyLen - 1).subtract(BigInteger.ONE)\n+        BigInteger.ONE.shiftLeft(KEY_LENGTH - 1).subtract(BigInteger.ONE)\n@@ -58,1 +61,1 @@\n-            kpg.initialize(new RSAKeyGenParameterSpec(keyLen, exponent));\n+            kpg.initialize(new RSAKeyGenParameterSpec(KEY_LENGTH, exponent));\n@@ -70,1 +73,1 @@\n-            kpg.initialize(new RSAKeyGenParameterSpec(keyLen, exponent));\n+            kpg.initialize(new RSAKeyGenParameterSpec(KEY_LENGTH, exponent));\n@@ -84,1 +87,1 @@\n-                KeyPairGenerator.getInstance(\"RSA\", \"SunRsaSign\");\n+                KeyPairGenerator.getInstance(KPG_ALGORITHM, \"SunRsaSign\");\n","filename":"test\/jdk\/sun\/security\/rsa\/TestKeyPairGeneratorExponent.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -33,0 +34,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -35,0 +37,2 @@\n+    private static final String KPG_ALGORITHM = \"RSA\";\n+    private static final int KEY_LENGTH = SecurityUtils.getTestKeySize(KPG_ALGORITHM);\n@@ -37,2 +41,2 @@\n-        test(2048);\n-        test(2049);\n+        test(KEY_LENGTH);\n+        test(KEY_LENGTH + 1);\n@@ -43,1 +47,1 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\", \"SunRsaSign\");\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(KPG_ALGORITHM, \"SunRsaSign\");\n","filename":"test\/jdk\/sun\/security\/rsa\/TestKeyPairGeneratorLength.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -29,0 +30,1 @@\n+ * @library \/test\/lib\n@@ -43,2 +45,3 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n-        kpg.initialize(2048);\n+        String kpgAlgorithm = \"RSA\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/sun\/security\/rsa\/pss\/InitAgain.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -106,0 +107,2 @@\n+    private static final int KEY_LENGTH_DSA = SecurityUtils.getTestKeySize(\"DSA\");\n+    private static final int KEY_LENGTH_RSA = SecurityUtils.getTestKeySize(\"RSA\");\n@@ -1065,2 +1068,2 @@\n-                \"-keypass changeit -genkeypair -keyalg DSA -dname CN=olala -keysize 2048 \" +\n-                \"-alias n6\");\n+                \"-keypass changeit -genkeypair -keyalg DSA -dname CN=olala -keysize \" +\n+                KEY_LENGTH_DSA + \" -alias n6\");\n@@ -1068,2 +1071,2 @@\n-                \"-keypass changeit -genkeypair -keyalg DSA -dname CN=olala -keysize 2048 \" +\n-                \"-alias n7\");\n+                \"-keypass changeit -genkeypair -keyalg DSA -dname CN=olala -keysize \" +\n+                KEY_LENGTH_DSA + \" -alias n7\");\n@@ -1676,1 +1679,1 @@\n-        \/\/   2. keytool -genkey -keyalg DSA -v -keysize 2048 Enter \"a\" for the keystore\n+        \/\/   2. keytool -genkey -keyalg DSA -v -keysize default Enter \"a\" for the keystore\n@@ -1683,1 +1686,2 @@\n-                \"-genkey -keyalg DSA -v -keysize 2048 -keystore x.jks -storetype JKS\");\n+                \"-genkey -keyalg DSA -v -keysize \" + KEY_LENGTH_DSA + \" -keystore x.jks \" +\n+                        \"-storetype JKS\");\n@@ -1690,1 +1694,1 @@\n-        \/\/   5. keytool - -keyalg DSA -v -keysize 2048 Enter \"password\" as the password.\n+        \/\/   5. keytool - -keyalg DSA -v -keysize default Enter \"password\" as the password.\n@@ -1692,1 +1696,1 @@\n-        testFail(\"password\\n\", \"-genkey -keyalg DSA -v -keysize 2048\" +\n+        testFail(\"password\\n\", \"-genkey -keyalg DSA -v -keysize \" + KEY_LENGTH_DSA +\n@@ -1695,1 +1699,1 @@\n-        \/\/   6. keytool -genkey -keyalg DSA -v -keysize 2048 -alias mykey2 -storepass password\n+        \/\/   6. keytool -genkey -keyalg DSA -v -keysize default -alias mykey2 -storepass password\n@@ -1699,2 +1703,2 @@\n-        testOK(\"\\n\\n\\n\\n\\n\\nyes\\n\\n\", \"-genkey -keyalg DSA -v -keysize 2048 -alias mykey2\" +\n-                \" -storepass password -keystore x.jks -storetype JKS\");\n+        testOK(\"\\n\\n\\n\\n\\n\\nyes\\n\\n\", \"-genkey -keyalg DSA -v -keysize \" + KEY_LENGTH_DSA +\n+                \" -alias mykey2 -storepass password -keystore x.jks -storetype JKS\");\n@@ -1780,1 +1784,1 @@\n-                \" -dname cn=genkey -keysize 2048 -keyalg rsa\"));\n+                \" -dname cn=genkey -keysize \" + KEY_LENGTH_RSA  + \" -keyalg rsa\"));\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/KeyToolTest.java","additions":16,"deletions":12,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -39,0 +40,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -55,2 +57,3 @@\n-        CertAndKeyGen cakg = new CertAndKeyGen(\"RSA\", \"SHA256withRSA\");\n-        cakg.generate(2048);\n+        String kpgAlgorithm = \"RSA\";\n+        CertAndKeyGen cakg = new CertAndKeyGen(kpgAlgorithm, \"SHA256withRSA\");\n+        cakg.generate(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/sun\/security\/x509\/AlgorithmId\/NonStandardNames.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,2 @@\n+    private final static int DEFAULT_SALTSIZE = 16;\n+\n@@ -110,0 +112,21 @@\n+    \/**\n+     * Returns a strong salt size for tests\n+     *\/\n+    public static int getTestSaltSize() {\n+        return DEFAULT_SALTSIZE;\n+    }\n+\n+    \/**\n+     * Returns a strong key size for tests, depending on the specified algorithm\n+     *\/\n+    public static int getTestKeySize(String algo) {\n+        int testKeySize;\n+        switch (algo) {\n+            case \"RSA\" -> testKeySize = KeySize.RSA.keySize;\n+            case \"DSA\" -> testKeySize = KeySize.DSA.keySize;\n+            case \"DH\", \"DiffieHellman\" -> testKeySize = KeySize.DH.keySize;\n+            default -> throw new RuntimeException(\"Test key size not defined for \" + algo);\n+        }\n+        return testKeySize;\n+    }\n+\n@@ -129,0 +152,16 @@\n+\n+    private enum KeySize{\n+        RSA(2048),\n+        DSA(2048),\n+        DH(2048);\n+\n+        private final int keySize;\n+        KeySize(int keySize) {\n+            this.keySize = keySize;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return String.valueOf(keySize);\n+        }\n+    }\n","filename":"test\/lib\/jdk\/test\/lib\/security\/SecurityUtils.java","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"}]}