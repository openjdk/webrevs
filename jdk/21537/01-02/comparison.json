{"files":[{"patch":"@@ -42,6 +42,6 @@\n-\n-        byte[] aliceSecret = new byte[256];\n-        byte[] bobSecret = new byte[256];\n-\n-        KeyAgreement alice = KeyAgreement.getInstance(\"DiffieHellman\");\n-        KeyAgreement bob = KeyAgreement.getInstance(\"DiffieHellman\");\n+        String kpgAlgorithm = \"DiffieHellman\";\n+        KeyAgreement alice = KeyAgreement.getInstance(kpgAlgorithm);\n+        KeyAgreement bob = KeyAgreement.getInstance(kpgAlgorithm);\n+        int keySizeBits = SecurityUtils.getTestKeySize(kpgAlgorithm);\n+        byte[] aliceSecret = new byte[keySizeBits \/ 8];\n+        byte[] bobSecret = new byte[keySizeBits \/ 8];\n@@ -51,3 +51,2 @@\n-            String kpgAlgorithm = \"DiffieHellman\";\n-            KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(\"DiffieHellman\");\n-            keyPairGen.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n+            KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(kpgAlgorithm);\n+            keyPairGen.initialize(keySizeBits);\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyAgreement\/DHKeyAgreementPadding.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+        int keySize = SecurityUtils.getTestKeySize(kpgAlgorithm);\n@@ -64,1 +65,1 @@\n-        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n+        kpg.initialize(keySize);\n@@ -117,1 +118,2 @@\n-            c1.update(new byte[512]);\n+            \/\/ Longer buffer size to verify IllegalBlockSizeException is thrown\n+            c1.update(new byte[keySize \/ 4]);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestRSACipher.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-        int[] keyLengths = {keySize, keySize, 3072};\n+        int[] keyLengths = {keySize, keySize, keySize + 1024};\n","filename":"test\/jdk\/sun\/security\/rsa\/TestKeyPairGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-     * Returns a strong key size for tests, depending on the specified algorithm\n+     * Returns a strong key size in bits for tests, depending on the specified algorithm\n","filename":"test\/lib\/jdk\/test\/lib\/security\/SecurityUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}