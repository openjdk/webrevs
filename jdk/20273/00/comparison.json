{"files":[{"patch":"@@ -3591,1 +3591,1 @@\n-        long len = (long) prefix.length() + suffix.length();\n+        int len = prefix.length() + suffix.length();\n@@ -3593,1 +3593,1 @@\n-            len += (long) (size - 1) * delimiter.length();\n+            len += (size - 1) * delimiter.length();\n@@ -3606,1 +3606,1 @@\n-        if (len < 0L || (len <<= coder) != (int) len) {\n+        if (len < 0L) {\n@@ -3609,1 +3609,1 @@\n-        byte[] value = StringConcatHelper.newArray(len);\n+        byte[] value = StringConcatHelper.newArray(len << coder);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n@@ -47,26 +48,2 @@\n-     * Return the coder for the character.\n-     * @param value character\n-     * @return      coder\n-     *\/\n-    static long coder(char value) {\n-        return StringLatin1.canEncode(value) ? LATIN1 : UTF16;\n-    }\n-\n-    \/**\n-     * Check for overflow, throw exception on overflow.\n-     *\n-     * @param lengthCoder String length with coder packed into higher bits\n-     *                    the upper word.\n-     * @return            the given parameter value, if valid\n-     *\/\n-    private static long checkOverflow(long lengthCoder) {\n-        if ((int)lengthCoder >= 0) {\n-            return lengthCoder;\n-        }\n-        throw new OutOfMemoryError(\"Overflow: String length out of range\");\n-    }\n-\n-    \/**\n-     * Mix value length and coder into current length and coder.\n-     * @param lengthCoder String length with coder packed into higher bits\n-     *                    the upper word.\n+     * add value length into current length\n+     * @param length      String length\n@@ -74,1 +51,1 @@\n-     * @return            new length and coder\n+     * @return            new length\n@@ -76,2 +53,3 @@\n-    static long mix(long lengthCoder, boolean value) {\n-        return checkOverflow(lengthCoder + (value ? 4 : 5));\n+    @ForceInline\n+    static int stringSize(int length, boolean value) {\n+        return length + (value ? 4 : 5);\n@@ -81,3 +59,2 @@\n-     * Mix value length and coder into current length and coder.\n-     * @param lengthCoder String length with coder packed into higher bits\n-     *                    the upper word.\n+     * add value length into current length\n+     * @param length      String length\n@@ -85,1 +62,1 @@\n-     * @return            new length and coder\n+     * @return            new length\n@@ -87,2 +64,2 @@\n-    static long mix(long lengthCoder, char value) {\n-        return checkOverflow(lengthCoder + 1) | coder(value);\n+    static int stringSize(int length, char value) {\n+        return length + 1;\n@@ -92,3 +69,2 @@\n-     * Mix value length and coder into current length and coder.\n-     * @param lengthCoder String length with coder packed into higher bits\n-     *                    the upper word.\n+     * add value length into current length\n+     * @param length      String length\n@@ -96,1 +72,1 @@\n-     * @return            new length and coder\n+     * @return            new length\n@@ -98,2 +74,2 @@\n-    static long mix(long lengthCoder, int value) {\n-        return checkOverflow(lengthCoder + Integer.stringSize(value));\n+    static int stringSize(int length, int value) {\n+        return length + Integer.stringSize(value);\n@@ -103,3 +79,2 @@\n-     * Mix value length and coder into current length and coder.\n-     * @param lengthCoder String length with coder packed into higher bits\n-     *                    the upper word.\n+     * add value length into current length\n+     * @param length      String length\n@@ -107,1 +82,1 @@\n-     * @return            new length and coder\n+     * @return            new length\n@@ -109,2 +84,2 @@\n-    static long mix(long lengthCoder, long value) {\n-        return checkOverflow(lengthCoder + Long.stringSize(value));\n+    static int stringSize(int length, long value) {\n+        return length + Long.stringSize(value);\n@@ -114,3 +89,2 @@\n-     * Mix value length and coder into current length and coder.\n-     * @param lengthCoder String length with coder packed into higher bits\n-     *                    the upper word.\n+     * add value length into current length\n+     * @param length      String length\n@@ -118,1 +92,1 @@\n-     * @return            new length and coder\n+     * @return            new length\n@@ -120,6 +94,2 @@\n-    static long mix(long lengthCoder, String value) {\n-        lengthCoder += value.length();\n-        if (value.coder() == String.UTF16) {\n-            lengthCoder |= UTF16;\n-        }\n-        return checkOverflow(lengthCoder);\n+    static int stringSize(int length, String value) {\n+        return length + value.length();\n@@ -132,2 +102,2 @@\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n+     * @param index      final char index in the buffer\n+     * @param coder      the coder of buf\n@@ -138,3 +108,2 @@\n-    static long prepend(long indexCoder, byte[] buf, boolean value) {\n-        int index = (int)indexCoder;\n-        if (indexCoder < UTF16) {\n+    static int prepend(int index, byte coder, byte[] buf, boolean value) {\n+        if (coder == String.LATIN1) {\n@@ -153,1 +122,0 @@\n-            return index;\n@@ -167,1 +135,0 @@\n-            return index | UTF16;\n@@ -169,0 +136,1 @@\n+        return index;\n@@ -175,2 +143,2 @@\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n+     * @param index      final char index in the buffer\n+     * @param coder      the coder of buf\n@@ -182,4 +150,4 @@\n-    static long prepend(long indexCoder, byte[] buf, boolean value, String prefix) {\n-        indexCoder = prepend(indexCoder, buf, value);\n-        indexCoder = prepend(indexCoder, buf, prefix);\n-        return indexCoder;\n+    static int prepend(int index, byte coder, byte[] buf, boolean value, String prefix) {\n+        index = prepend(index, coder, buf, value);\n+        index = prepend(index, coder, buf, prefix);\n+        return index;\n@@ -192,2 +160,2 @@\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n+     * @param index      final char index in the buffer\n+     * @param coder      the coder of buf\n@@ -198,3 +166,4 @@\n-    static long prepend(long indexCoder, byte[] buf, char value) {\n-        if (indexCoder < UTF16) {\n-            buf[(int)(--indexCoder)] = (byte) (value & 0xFF);\n+    static int prepend(int index, byte coder, byte[] buf, char value) {\n+        index--;\n+        if (coder == String.LATIN1) {\n+            buf[index] = (byte) (value & 0xFF);\n@@ -202,1 +171,1 @@\n-            StringUTF16.putChar(buf, (int)(--indexCoder), value);\n+            StringUTF16.putChar(buf, index, value);\n@@ -204,1 +173,1 @@\n-        return indexCoder;\n+        return index;\n@@ -218,4 +187,4 @@\n-    static long prepend(long indexCoder, byte[] buf, char value, String prefix) {\n-        indexCoder = prepend(indexCoder, buf, value);\n-        indexCoder = prepend(indexCoder, buf, prefix);\n-        return indexCoder;\n+    static int prepend(int index, byte coder, byte[] buf, char value, String prefix) {\n+        index = prepend(index, coder, buf, value);\n+        index = prepend(index, coder, buf, prefix);\n+        return index;\n@@ -228,2 +197,2 @@\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n+     * @param index      final char index in the buffer\n+     * @param coder      the coder of buf\n@@ -234,3 +203,3 @@\n-    static long prepend(long indexCoder, byte[] buf, int value) {\n-        if (indexCoder < UTF16) {\n-            return StringLatin1.getChars(value, (int)indexCoder, buf);\n+    static int prepend(int index, byte coder, byte[] buf, int value) {\n+        if (coder == String.LATIN1) {\n+            return StringLatin1.getChars(value, index, buf);\n@@ -238,1 +207,1 @@\n-            return StringUTF16.getChars(value, (int)indexCoder, buf) | UTF16;\n+            return StringUTF16.getChars(value, index, buf);\n@@ -246,2 +215,2 @@\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n+     * @param index      final char index in the buffer\n+     * @param coder      the coder of buf\n@@ -253,4 +222,4 @@\n-    static long prepend(long indexCoder, byte[] buf, int value, String prefix) {\n-        indexCoder = prepend(indexCoder, buf, value);\n-        indexCoder = prepend(indexCoder, buf, prefix);\n-        return indexCoder;\n+    static int prepend(int index, byte coder, byte[] buf, int value, String prefix) {\n+        index = prepend(index, coder, buf, value);\n+        index = prepend(index, coder, buf, prefix);\n+        return index;\n@@ -263,2 +232,2 @@\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n+     * @param index      final char index in the buffer\n+     * @param coder      the coder of buf\n@@ -269,3 +238,3 @@\n-    static long prepend(long indexCoder, byte[] buf, long value) {\n-        if (indexCoder < UTF16) {\n-            return StringLatin1.getChars(value, (int)indexCoder, buf);\n+    static int prepend(int index, byte coder, byte[] buf, long value) {\n+        if (coder == String.LATIN1) {\n+            return StringLatin1.getChars(value, index, buf);\n@@ -273,1 +242,1 @@\n-            return StringUTF16.getChars(value, (int)indexCoder, buf) | UTF16;\n+            return StringUTF16.getChars(value, index, buf);\n@@ -281,2 +250,2 @@\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n+     * @param index      final char index in the buffer\n+     * @param coder      the coder of buf\n@@ -288,4 +257,4 @@\n-    static long prepend(long indexCoder, byte[] buf, long value, String prefix) {\n-        indexCoder = prepend(indexCoder, buf, value);\n-        indexCoder = prepend(indexCoder, buf, prefix);\n-        return indexCoder;\n+    static int prepend(int index, byte coder, byte[] buf, long value, String prefix) {\n+        index = prepend(index, coder, buf, value);\n+        index = prepend(index, coder, buf, prefix);\n+        return index;\n@@ -298,2 +267,2 @@\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n+     * @param index      final char index in the buffer\n+     * @param coder      the coder of buf\n@@ -304,8 +273,4 @@\n-    static long prepend(long indexCoder, byte[] buf, String value) {\n-        indexCoder -= value.length();\n-        if (indexCoder < UTF16) {\n-            value.getBytes(buf, (int)indexCoder, String.LATIN1);\n-        } else {\n-            value.getBytes(buf, (int)indexCoder, String.UTF16);\n-        }\n-        return indexCoder;\n+    static int prepend(int index, byte coder, byte[] buf, String value) {\n+        index -= value.length();\n+        value.getBytes(buf, index, coder);\n+        return index;\n@@ -318,2 +283,2 @@\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n+     * @param index      final char index in the buffer\n+     * @param coder      the coder of buf\n@@ -325,4 +290,4 @@\n-    static long prepend(long indexCoder, byte[] buf, String value, String prefix) {\n-        indexCoder = prepend(indexCoder, buf, value);\n-        indexCoder = prepend(indexCoder, buf, prefix);\n-        return indexCoder;\n+    static int prepend(int index, byte coder, byte[] buf, String value, String prefix) {\n+        index = prepend(index, coder, buf, value);\n+        index = prepend(index, coder, buf, prefix);\n+        return index;\n@@ -337,1 +302,2 @@\n-    static String newString(byte[] buf, long indexCoder) {\n+    @ForceInline\n+    static String newString(byte[] buf, byte coder) {\n@@ -339,8 +305,21 @@\n-        if (indexCoder == LATIN1) {\n-            return new String(buf, String.LATIN1);\n-        } else if (indexCoder == UTF16) {\n-            return new String(buf, String.UTF16);\n-        } else {\n-            throw new InternalError(\"Storage is not completely initialized, \" +\n-                    (int)indexCoder + \" bytes left\");\n-        }\n+        return new String(buf, coder);\n+    }\n+\n+    static byte stringCoder(byte coder, char value) {\n+        return StringLatin1.canEncode(value) ? coder : String.UTF16;\n+    }\n+\n+    static byte stringCoder(byte coder, int value) {\n+        return coder;\n+    }\n+\n+    static byte stringCoder(byte coder, long value) {\n+        return coder;\n+    }\n+\n+    static byte stringCoder(byte coder, boolean value) {\n+        return coder;\n+    }\n+\n+    static byte stringCoder(byte coder, String str) {\n+        return (byte) (coder | str.coder());\n@@ -418,4 +397,0 @@\n-    private static final long LATIN1 = (long)String.LATIN1 << 32;\n-\n-    private static final long UTF16 = (long)String.UTF16 << 32;\n-\n@@ -436,7 +411,3 @@\n-    static byte[] newArrayWithSuffix(String suffix, long indexCoder) {\n-        byte[] buf = newArray(indexCoder + suffix.length());\n-        if (indexCoder < UTF16) {\n-            suffix.getBytes(buf, (int)indexCoder, String.LATIN1);\n-        } else {\n-            suffix.getBytes(buf, (int)indexCoder, String.UTF16);\n-        }\n+    static byte[] newArrayWithSuffix(String suffix, int index, byte coder) {\n+        byte[] buf = newArray((index + suffix.length()) << coder);\n+        suffix.getBytes(buf, index, coder);\n@@ -453,3 +424,2 @@\n-    static byte[] newArray(long indexCoder) {\n-        byte coder = (byte)(indexCoder >> 32);\n-        int index = ((int)indexCoder) << coder;\n+    static byte[] newArray(int index, byte coder) {\n+        index = index << coder;\n@@ -476,2 +446,2 @@\n-    static long initialCoder() {\n-        return String.COMPACT_STRINGS ? LATIN1 : UTF16;\n+    static byte initialCoder() {\n+        return String.COMPACT_STRINGS ? String.LATIN1 : String.UTF16;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":116,"deletions":146,"binary":false,"changes":262,"status":"modified"},{"patch":"@@ -2614,5 +2614,1 @@\n-            public long stringConcatHelperPrepend(long indexCoder, byte[] buf, String value) {\n-                return StringConcatHelper.prepend(indexCoder, buf, value);\n-            }\n-\n-            public long stringConcatInitialCoder() {\n+            public byte stringConcatInitialCoder() {\n@@ -2622,8 +2618,0 @@\n-            public long stringConcatMix(long lengthCoder, String constant) {\n-                return StringConcatHelper.mix(lengthCoder, constant);\n-            }\n-\n-            public long stringConcatMix(long lengthCoder, char value) {\n-                return StringConcatHelper.mix(lengthCoder, value);\n-            }\n-\n@@ -2646,0 +2634,4 @@\n+            public byte stringCoder(String str) {\n+                return str.coder();\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n@@ -549,1 +550,2 @@\n-        MethodHandle mh = MethodHandles.dropArgumentsTrusted(newString(), 2, ptypes);\n+        MethodHandle mh = MethodHandles.dropArgumentsTrusted(newString(), 1, new Class<?>[]{int.class});\n+        mh = MethodHandles.dropArgumentsTrusted(mh, 3, ptypes);\n@@ -553,1 +555,2 @@\n-        long initialLengthCoder = INITIAL_CODER;\n+        int initialCoder = INITIAL_CODER;\n+        int initialSize = 0;\n@@ -557,1 +560,2 @@\n-                initialLengthCoder = JLA.stringConcatMix(initialLengthCoder, constant);\n+                initialSize += constant.length();\n+                initialCoder |= JLA.stringCoder(constant);\n@@ -561,1 +565,1 @@\n-        \/\/ Mix in prependers. This happens when (byte[], long) = (storage, indexCoder) is already\n+        \/\/ size and coder in prependers. This happens when (byte[], int, byte) = (storage, index, coder) is already\n@@ -574,1 +578,1 @@\n-            initialLengthCoder -= suffix.length();\n+            initialSize -= suffix.length();\n@@ -580,1 +584,2 @@\n-                1 \/\/ index\n+                1, \/\/ index\n+                2  \/\/ coder\n@@ -583,1 +588,1 @@\n-        \/\/ Start combining length and coder mixers.\n+        \/\/ Start combining size and coder.\n@@ -592,1 +597,1 @@\n-        \/\/ during the initial filtering, or handled by specializations in MIXERS.\n+        \/\/ during the initial filtering, or handled by specializations in size and coder.\n@@ -594,1 +599,1 @@\n-        \/\/ The method handle shape before all mixers are combined in is:\n+        \/\/ The method handle shape before all size and coder are combined in is:\n@@ -597,2 +602,2 @@\n-        \/\/ We will bind the initialLengthCoder value to the last mixer (the one that will be\n-        \/\/ executed first), then fold that in. This leaves the shape after all mixers are\n+        \/\/ We will bind the initialLengthCoder value to the last size and coder (the one that will be\n+        \/\/ executed first), then fold that in. This leaves the shape after all size and coder are\n@@ -602,1 +607,1 @@\n-        mh = filterAndFoldInMixers(mh, initialLengthCoder, ptypes);\n+        mh = filterAndFoldInSizeCoders(mh, initialSize, (byte) initialCoder, ptypes);\n@@ -644,4 +649,5 @@\n-        if (argPositions == null || argPositions.length != count + 2) {\n-            argPositions = new int[count + 2];\n-            argPositions[0] = 1; \/\/ indexCoder\n-            argPositions[1] = 0; \/\/ storage\n+        if (argPositions == null || argPositions.length != count + 3) {\n+            argPositions = new int[count + 3];\n+            argPositions[0] = 1; \/\/ index\n+            argPositions[1] = 2; \/\/ coder\n+            argPositions[2] = 0; \/\/ storage\n@@ -649,2 +655,2 @@\n-        int limit = count + 2;\n-        for (int i = 2; i < limit; i++) {\n+        int limit = count + 3;\n+        for (int i = 3; i < limit; i++) {\n@@ -657,2 +663,2 @@\n-    \/\/ We need one mixer per argument.\n-    private static MethodHandle filterAndFoldInMixers(MethodHandle mh, long initialLengthCoder, Class<?>[] ptypes) {\n+    \/\/ We need one size and coder per argument.\n+    private static MethodHandle filterAndFoldInSizeCoders(MethodHandle mh, int initialSize, byte initialCoder, Class<?>[] ptypes) {\n@@ -663,2 +669,2 @@\n-            MethodHandle mix = mixer(ptypes[pos], ptypes[pos + 1], ptypes[pos + 2], ptypes[pos + 3]);\n-            argPositions = filterMixerArgPositions(argPositions, pos, 4);\n+            MethodHandle stringSize = stringSize(ptypes[pos], ptypes[pos + 1], ptypes[pos + 2], ptypes[pos + 3]);\n+            argPositions = filterSizeArgPositions(argPositions, pos, 4);\n@@ -666,1 +672,6 @@\n-                    mix, argPositions);\n+                    stringSize, argPositions);\n+\n+            MethodHandle stringCoder = stringCoder(ptypes[pos], ptypes[pos + 1], ptypes[pos + 2], ptypes[pos + 3]);\n+            argPositions = filterCoderArgPositions(argPositions, pos, 4);\n+            mh = MethodHandles.filterArgumentsWithCombiner(mh, 1,\n+                    stringCoder, argPositions);\n@@ -670,1 +681,1 @@\n-            \/\/ Mix in the last 1 to 4 parameters, insert the initialLengthCoder into the final mixer and\n+            \/\/ size and coder in the last 1 to 4 parameters, insert the initialSize and initialCoder into the final size and coder and\n@@ -672,1 +683,1 @@\n-            mh = foldInLastMixers(mh, initialLengthCoder, pos, ptypes, ptypes.length - pos);\n+            mh = foldInLastSizeCoders(mh, initialSize, initialCoder, pos, ptypes, ptypes.length - pos);\n@@ -674,2 +685,2 @@\n-            \/\/ No mixer (constants only concat), insert initialLengthCoder directly\n-            mh = MethodHandles.insertArguments(mh, 0, initialLengthCoder);\n+            \/\/ No size and coder (constants only concat), insert initialSize and initialCoder directly\n+            mh = MethodHandles.insertArguments(mh, 0, initialSize, initialCoder);\n@@ -680,1 +691,1 @@\n-    static int[] filterMixerArgPositions(int[] argPositions, int pos, int count) {\n+    static int[] filterSizeArgPositions(int[] argPositions, int pos, int count) {\n@@ -683,1 +694,1 @@\n-            argPositions[0] = 0; \/\/ indexCoder\n+            argPositions[0] = 0; \/\/ index\n@@ -687,1 +698,1 @@\n-            argPositions[i] = i + pos;\n+            argPositions[i] = i + pos + 1;\n@@ -692,6 +703,27 @@\n-    private static MethodHandle foldInLastMixers(MethodHandle mh, long initialLengthCoder, int pos, Class<?>[] ptypes, int count) {\n-        MethodHandle mix = switch (count) {\n-            case 1 -> mixer(ptypes[pos]);\n-            case 2 -> mixer(ptypes[pos], ptypes[pos + 1]);\n-            case 3 -> mixer(ptypes[pos], ptypes[pos + 1], ptypes[pos + 2]);\n-            case 4 -> mixer(ptypes[pos], ptypes[pos + 1], ptypes[pos + 2], ptypes[pos + 3]);\n+    static int[] filterCoderArgPositions(int[] argPositions, int pos, int count) {\n+        if (argPositions == null || argPositions.length != count + 2) {\n+            argPositions = new int[count + 1];\n+            argPositions[0] = 1; \/\/ coder\n+        }\n+        int limit = count + 1;\n+        for (int i = 1; i < limit; i++) {\n+            argPositions[i] = i + pos + 1;\n+        }\n+        return argPositions;\n+    }\n+\n+    private static MethodHandle foldInLastSizeCoders(MethodHandle mh, int initialLength, byte initalCoder, int pos, Class<?>[] ptypes, int count) {\n+        MethodHandle stringSize = switch (count) {\n+            case 1 -> stringSize(ptypes[pos]);\n+            case 2 -> stringSize(ptypes[pos], ptypes[pos + 1]);\n+            case 3 -> stringSize(ptypes[pos], ptypes[pos + 1], ptypes[pos + 2]);\n+            case 4 -> stringSize(ptypes[pos], ptypes[pos + 1], ptypes[pos + 2], ptypes[pos + 3]);\n+            default -> throw new IllegalArgumentException(\"Unexpected count: \" + count);\n+        };\n+        stringSize = MethodHandles.insertArguments(stringSize, 0, initialLength);\n+\n+        MethodHandle coder = switch (count) {\n+            case 1 -> stringCoder(ptypes[pos]);\n+            case 2 -> stringCoder(ptypes[pos], ptypes[pos + 1]);\n+            case 3 -> stringCoder(ptypes[pos], ptypes[pos + 1], ptypes[pos + 2]);\n+            case 4 -> stringCoder(ptypes[pos], ptypes[pos + 1], ptypes[pos + 2], ptypes[pos + 3]);\n@@ -700,12 +732,31 @@\n-        mix = MethodHandles.insertArguments(mix,0, initialLengthCoder);\n-        \/\/ apply selected arguments on the 1-4 arg mixer and fold in the result\n-        return switch (count) {\n-            case 1 -> MethodHandles.foldArgumentsWithCombiner(mh, 0, mix,\n-                    1 + pos);\n-            case 2 -> MethodHandles.foldArgumentsWithCombiner(mh, 0, mix,\n-                    1 + pos, 2 + pos);\n-            case 3 -> MethodHandles.foldArgumentsWithCombiner(mh, 0, mix,\n-                    1 + pos, 2 + pos, 3 + pos);\n-            case 4 -> MethodHandles.foldArgumentsWithCombiner(mh, 0, mix,\n-                    1 + pos, 2 + pos, 3 + pos, 4 + pos);\n-            default -> throw new IllegalArgumentException();\n+        coder = MethodHandles.insertArguments(coder, 0, initalCoder);\n+\n+        \/\/ MethodHandles.identity(int.class)\n+        \/\/ apply selected arguments on the 1-4 arg size & coder and fold in the result\n+        switch (count) {\n+            case 1:\n+                mh = MethodHandles.foldArgumentsWithCombiner(mh, 0, stringSize,\n+                        2 + pos);\n+                mh = MethodHandles.foldArgumentsWithCombiner(mh, 0, coder,\n+                        1 + pos);\n+                break;\n+            case 2:\n+                mh = MethodHandles.foldArgumentsWithCombiner(mh, 0, stringSize,\n+                        2 + pos, 3 + pos);\n+                mh = MethodHandles.foldArgumentsWithCombiner(mh, 0, coder,\n+                        1 + pos, 2 + pos);\n+                break;\n+            case 3:\n+                mh = MethodHandles.foldArgumentsWithCombiner(mh, 0, stringSize,\n+                        2 + pos, 3 + pos, 4 + pos);\n+                mh = MethodHandles.foldArgumentsWithCombiner(mh, 0, coder,\n+                        1 + pos, 2 + pos, 3 + pos);\n+                break;\n+            case 4:\n+                mh = MethodHandles.foldArgumentsWithCombiner(mh, 0, stringSize,\n+                        2 + pos, 3 + pos, 4 + pos, 5 + pos);\n+                mh = MethodHandles.foldArgumentsWithCombiner(mh, 0, coder,\n+                        1 + pos, 2 + pos, 3 + pos, 4 + pos);\n+                break;\n+            default:\n+                throw new IllegalArgumentException();\n@@ -713,0 +764,2 @@\n+\n+        return mh;\n@@ -722,1 +775,1 @@\n-                    prepender(cl), 3, prefix);\n+                    prepender(cl), 4, prefix);\n@@ -731,1 +784,1 @@\n-                    methodType(long.class, long.class, byte[].class,\n+                    methodType(int.class, int.class, byte.class, byte[].class,\n@@ -742,1 +795,1 @@\n-                    methodType(long.class, long.class, byte[].class,\n+                    methodType(int.class, int.class, byte.class, byte[].class,\n@@ -764,5 +817,5 @@\n-    private static final int[] PREPEND_FILTER_FIRST_ARGS  = new int[] { 0, 1, 2 };\n-    private static final int[] PREPEND_FILTER_SECOND_ARGS = new int[] { 0, 1, 3 };\n-    private static final int[] PREPEND_FILTER_THIRD_ARGS  = new int[] { 0, 1, 4 };\n-    private static final int[] PREPEND_FILTER_FIRST_PAIR_ARGS  = new int[] { 0, 1, 2, 3 };\n-    private static final int[] PREPEND_FILTER_SECOND_PAIR_ARGS = new int[] { 0, 1, 4, 5 };\n+    private static final int[] PREPEND_FILTER_FIRST_ARGS  = new int[] { 0, 1, 2, 3 };\n+    private static final int[] PREPEND_FILTER_SECOND_ARGS = new int[] { 0, 1, 2, 4 };\n+    private static final int[] PREPEND_FILTER_THIRD_ARGS  = new int[] { 0, 1, 2, 5 };\n+    private static final int[] PREPEND_FILTER_FIRST_PAIR_ARGS  = new int[] { 0, 1, 2, 3, 4 };\n+    private static final int[] PREPEND_FILTER_SECOND_PAIR_ARGS = new int[] { 0, 1, 2, 5, 6 };\n@@ -776,1 +829,1 @@\n-                    MethodHandles.identity(long.class), 1, byte[].class);\n+                    MethodHandles.identity(int.class), 1, byte.class, byte[].class);\n@@ -789,1 +842,1 @@\n-                    MethodHandles.dropArguments(prependBase(), 2, cl, cl2);\n+                    MethodHandles.dropArguments(prependBase(), 3, cl, cl2);\n@@ -808,1 +861,1 @@\n-            prepend = MethodHandles.dropArguments(prepend, 2,\n+            prepend = MethodHandles.dropArguments(prepend, 3,\n@@ -817,1 +870,1 @@\n-            prepend = MethodHandles.dropArguments(prepend, 2,\n+            prepend = MethodHandles.dropArguments(prepend, 3,\n@@ -830,5 +883,44 @@\n-    \/\/ Constant argument lists used by the mixer MH builders\n-    private static final int[] MIX_FILTER_SECOND_ARGS = new int[] { 0, 2 };\n-    private static final int[] MIX_FILTER_THIRD_ARGS  = new int[] { 0, 3 };\n-    private static final int[] MIX_FILTER_SECOND_PAIR_ARGS = new int[] { 0, 3, 4 };\n-    private static MethodHandle mixer(Class<?> cl) {\n+    \/\/ Constant argument lists used by the size MH builders\n+    private static final int[] SIZE_FILTER_SECOND_ARGS = new int[] { 0, 2 };\n+    private static final int[] SIZE_FILTER_THIRD_ARGS = new int[] { 0, 3 };\n+    private static final int[] SIZE_FILTER_SECOND_PAIR_ARGS = new int[] { 0, 3, 4 };\n+    private static MethodHandle stringSize(Class<?> cl) {\n+        int index = classIndex(cl);\n+        MethodHandle size = SIZERS[index];\n+        if (size == null) {\n+            SIZERS[index] = size = JLA.stringConcatHelper(\"stringSize\",\n+                    methodType(int.class, int.class, Wrapper.asPrimitiveType(cl))).rebind();\n+        }\n+        return size;\n+    }\n+\n+    private static final @Stable MethodHandle[][] DOUBLE_SIZERS = new MethodHandle[TYPE_COUNT][TYPE_COUNT];\n+    private static MethodHandle stringSize(Class<?> cl, Class<?> cl2) {\n+        int idx1 = classIndex(cl);\n+        int idx2 = classIndex(cl2);\n+        MethodHandle sizer = DOUBLE_SIZERS[idx1][idx2];\n+        if (sizer == null) {\n+            sizer = stringSize(cl);\n+            sizer = MethodHandles.dropArguments(sizer, 2, cl2);\n+            DOUBLE_SIZERS[idx1][idx2] = sizer = MethodHandles.filterArgumentsWithCombiner(sizer, 0,\n+                    stringSize(cl2), SIZE_FILTER_SECOND_ARGS);\n+        }\n+        return sizer;\n+    }\n+\n+    private static MethodHandle stringSize(Class<?> cl, Class<?> cl2, Class<?> cl3) {\n+        MethodHandle size = stringSize(cl, cl2);\n+        size = MethodHandles.dropArguments(size, 3, cl3);\n+        return MethodHandles.filterArgumentsWithCombiner(size, 0,\n+                stringSize(cl3), SIZE_FILTER_THIRD_ARGS);\n+    }\n+\n+    private static MethodHandle stringSize(Class<?> cl, Class<?> cl2, Class<?> cl3, Class<?> cl4) {\n+        MethodHandle size = stringSize(cl, cl2);\n+        size = MethodHandles.dropArguments(size, 3, cl3, cl4);\n+        return MethodHandles.filterArgumentsWithCombiner(size, 0,\n+                stringSize(cl3, cl4), SIZE_FILTER_SECOND_PAIR_ARGS);\n+    }\n+\n+    private @Stable static MethodHandle STRING_CODER;\n+    private static MethodHandle stringCoder(Class<?> cl) {\n@@ -836,4 +928,4 @@\n-        MethodHandle mix = MIXERS[index];\n-        if (mix == null) {\n-            MIXERS[index] = mix = JLA.stringConcatHelper(\"mix\",\n-                    methodType(long.class, long.class, Wrapper.asPrimitiveType(cl))).rebind();\n+        MethodHandle coder = CODERS[index];\n+        if (coder == null) {\n+            CODERS[index] = coder = JLA.stringConcatHelper(\"stringCoder\",\n+                    methodType(byte.class, byte.class, Wrapper.asPrimitiveType(cl))).rebind();\n@@ -841,1 +933,1 @@\n-        return mix;\n+        return coder;\n@@ -844,2 +936,2 @@\n-    private static final @Stable MethodHandle[][] DOUBLE_MIXERS = new MethodHandle[TYPE_COUNT][TYPE_COUNT];\n-    private static MethodHandle mixer(Class<?> cl, Class<?> cl2) {\n+    private static final @Stable MethodHandle[][] DOUBLE_CODERS = new MethodHandle[TYPE_COUNT][TYPE_COUNT];\n+    private static MethodHandle stringCoder(Class<?> cl, Class<?> cl2) {\n@@ -848,6 +940,6 @@\n-        MethodHandle mix = DOUBLE_MIXERS[idx1][idx2];\n-        if (mix == null) {\n-            mix = mixer(cl);\n-            mix = MethodHandles.dropArguments(mix, 2, cl2);\n-            DOUBLE_MIXERS[idx1][idx2] = mix = MethodHandles.filterArgumentsWithCombiner(mix, 0,\n-                    mixer(cl2), MIX_FILTER_SECOND_ARGS);\n+        MethodHandle coder = DOUBLE_CODERS[idx1][idx2];\n+        if (coder == null) {\n+            coder = stringCoder(cl);\n+            coder = MethodHandles.dropArguments(coder, 2, cl2);\n+            DOUBLE_CODERS[idx1][idx2] = coder = MethodHandles.filterArgumentsWithCombiner(coder, 0,\n+                    stringCoder(cl2), SIZE_FILTER_SECOND_ARGS);\n@@ -855,1 +947,1 @@\n-        return mix;\n+        return coder;\n@@ -858,5 +950,5 @@\n-    private static MethodHandle mixer(Class<?> cl, Class<?> cl2, Class<?> cl3) {\n-        MethodHandle mix = mixer(cl, cl2);\n-        mix = MethodHandles.dropArguments(mix, 3, cl3);\n-        return MethodHandles.filterArgumentsWithCombiner(mix, 0,\n-                mixer(cl3), MIX_FILTER_THIRD_ARGS);\n+    private static MethodHandle stringCoder(Class<?> cl, Class<?> cl2, Class<?> cl3) {\n+        MethodHandle coder = stringCoder(cl, cl2);\n+        coder = MethodHandles.dropArguments(coder, 3, cl3);\n+        return MethodHandles.filterArgumentsWithCombiner(coder, 0,\n+                stringCoder(cl3), SIZE_FILTER_THIRD_ARGS);\n@@ -865,5 +957,5 @@\n-    private static MethodHandle mixer(Class<?> cl, Class<?> cl2, Class<?> cl3, Class<?> cl4) {\n-        MethodHandle mix = mixer(cl, cl2);\n-        mix = MethodHandles.dropArguments(mix, 3, cl3, cl4);\n-        return MethodHandles.filterArgumentsWithCombiner(mix, 0,\n-                mixer(cl3, cl4), MIX_FILTER_SECOND_PAIR_ARGS);\n+    private static MethodHandle stringCoder(Class<?> cl, Class<?> cl2, Class<?> cl3, Class<?> cl4) {\n+        MethodHandle coder = stringCoder(cl, cl2);\n+        coder = MethodHandles.dropArguments(coder, 3, cl3, cl4);\n+        return MethodHandles.filterArgumentsWithCombiner(coder, 0,\n+                stringCoder(cl3, cl4), SIZE_FILTER_SECOND_PAIR_ARGS);\n@@ -888,1 +980,1 @@\n-                    methodType(String.class, byte[].class, long.class));\n+                    methodType(String.class, byte[].class, byte.class));\n@@ -899,1 +991,1 @@\n-                    methodType(byte[].class, String.class, long.class));\n+                    methodType(byte[].class, String.class, int.class, byte.class));\n@@ -910,1 +1002,1 @@\n-                    JLA.stringConcatHelper(\"newArray\", methodType(byte[].class, long.class));\n+                    JLA.stringConcatHelper(\"newArray\", methodType(byte[].class, int.class, byte.class));\n@@ -1013,3 +1105,4 @@\n-    private static final @Stable MethodHandle[] PREPENDERS      = new MethodHandle[TYPE_COUNT];\n-    private static final @Stable MethodHandle[] MIXERS          = new MethodHandle[TYPE_COUNT];\n-    private static final long INITIAL_CODER = JLA.stringConcatInitialCoder();\n+    private static final @Stable MethodHandle[] PREPENDERS           = new MethodHandle[TYPE_COUNT];\n+    private static final @Stable MethodHandle[] SIZERS               = new MethodHandle[TYPE_COUNT];\n+    private static final @Stable MethodHandle[] CODERS               = new MethodHandle[TYPE_COUNT];\n+    private static final int INITIAL_CODER = JLA.stringConcatInitialCoder();\n@@ -1021,1 +1114,1 @@\n-        \/\/ use int for subword integral types; still need special mixers\n+        \/\/ use int for subword integral types; still need special sizer\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":189,"deletions":96,"binary":false,"changes":285,"status":"modified"},{"patch":"@@ -435,6 +435,0 @@\n-    \/**\n-     * Prepends constant and the stringly representation of value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\/\n-    long stringConcatHelperPrepend(long indexCoder, byte[] buf, String value);\n-\n@@ -444,11 +438,1 @@\n-    long stringConcatInitialCoder();\n-\n-    \/**\n-     * Update lengthCoder for constant\n-     *\/\n-    long stringConcatMix(long lengthCoder, String constant);\n-\n-    \/**\n-     * Mix value length and coder into current length and coder.\n-     *\/\n-    long stringConcatMix(long lengthCoder, char value);\n+    byte stringConcatInitialCoder();\n@@ -474,0 +458,2 @@\n+    byte stringCoder(String str);\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"}]}