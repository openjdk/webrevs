{"files":[{"patch":"@@ -961,1 +961,3 @@\n-                m.ensureTypeVisible(m.getDeclaringClass());\n+                if (allowedModes != LM_TRUSTED) {\n+                    m.ensureTypeVisible(m.getDeclaringClass());\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemberName.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n@@ -49,0 +50,1 @@\n+import static java.lang.constant.ConstantDescs.*;\n@@ -503,0 +505,1 @@\n+\n@@ -1053,1 +1056,0 @@\n-        static final ClassDesc STRING_BUILDER = ClassDesc.ofDescriptor(\"Ljava\/lang\/StringBuilder;\");\n@@ -1056,10 +1058,19 @@\n-        static final MethodTypeDesc APPEND_BOOLEAN_TYPE = MethodTypeDesc.of(STRING_BUILDER, ConstantDescs.CD_boolean);\n-        static final MethodTypeDesc APPEND_CHAR_TYPE = MethodTypeDesc.of(STRING_BUILDER, ConstantDescs.CD_char);\n-        static final MethodTypeDesc APPEND_DOUBLE_TYPE = MethodTypeDesc.of(STRING_BUILDER, ConstantDescs.CD_double);\n-        static final MethodTypeDesc APPEND_FLOAT_TYPE = MethodTypeDesc.of(STRING_BUILDER, ConstantDescs.CD_float);\n-        static final MethodTypeDesc APPEND_INT_TYPE = MethodTypeDesc.of(STRING_BUILDER, ConstantDescs.CD_int);\n-        static final MethodTypeDesc APPEND_LONG_TYPE = MethodTypeDesc.of(STRING_BUILDER, ConstantDescs.CD_long);\n-        static final MethodTypeDesc APPEND_OBJECT_TYPE = MethodTypeDesc.of(STRING_BUILDER, ConstantDescs.CD_Object);\n-        static final MethodTypeDesc APPEND_STRING_TYPE = MethodTypeDesc.of(STRING_BUILDER, ConstantDescs.CD_String);\n-        static final MethodTypeDesc INT_CONSTRUCTOR_TYPE = MethodTypeDesc.of(ConstantDescs.CD_void, ConstantDescs.CD_int);\n-        static final MethodTypeDesc TO_STRING_TYPE = MethodTypeDesc.of(ConstantDescs.CD_String);\n+        static final ClassDesc CD_StringConcatHelper = ClassDesc.ofDescriptor(\"Ljava\/lang\/StringConcatHelper;\");\n+        static final ClassDesc CD_byteArray = ClassDesc.ofDescriptor(\"[B\");\n+        static final MethodTypeDesc OBJECT_TO_STRING = MethodTypeDesc.of(CD_String, CD_Object);\n+        static final MethodTypeDesc FLOAT_TO_STRING = MethodTypeDesc.of(CD_String, CD_float);\n+        static final MethodTypeDesc DOUBLE_TO_STRING = MethodTypeDesc.of(CD_String, CD_double);\n+        static final MethodTypeDesc NEW_ARRAY_SUFFIX = MethodTypeDesc.of(CD_byteArray, CD_String, CD_long);\n+        static final MethodTypeDesc NEW_STRING = MethodTypeDesc.of(CD_String, CD_byteArray, CD_long);\n+\n+        static final MethodTypeDesc Mix_int = MethodTypeDesc.of(CD_long, CD_long, CD_int);\n+        static final MethodTypeDesc MIX_long = MethodTypeDesc.of(CD_long, CD_long, CD_long);\n+        static final MethodTypeDesc Mix_boolean = MethodTypeDesc.of(CD_long, CD_long, CD_boolean);\n+        static final MethodTypeDesc Mix_char = MethodTypeDesc.of(CD_long, CD_long, CD_char);\n+        static final MethodTypeDesc Mix_String = MethodTypeDesc.of(CD_long, CD_long, CD_String);\n+\n+        static final MethodTypeDesc PREPEND_int = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_int, CD_String);\n+        static final MethodTypeDesc PREPEND_long = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_long, CD_String);\n+        static final MethodTypeDesc PREPEND_boolean = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_boolean, CD_String);\n+        static final MethodTypeDesc PREPEND_char = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_char, CD_String);\n+        static final MethodTypeDesc PREPEND_String = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_String, CD_String);\n@@ -1080,1 +1091,2 @@\n-            String className = getClassName(lookup.lookupClass());\n+            lookup = MethodHandles.Lookup.IMPL_LOOKUP;\n+            String className = getClassName(String.class);\n@@ -1093,4 +1105,3 @@\n-                Lookup hiddenLookup = lookup.makeHiddenClassDefiner(className, classBytes, SET_OF_STRONG, DUMPER)\n-                                            .defineClassAsLookup(true);\n-                Class<?> innerClass = hiddenLookup.lookupClass();\n-                return hiddenLookup.findStatic(innerClass, METHOD_NAME, args);\n+                var hiddenClass = lookup.makeHiddenClassDefiner(className, classBytes, SET_OF_STRONG, DUMPER)\n+                        .defineClass(true, null);\n+                return lookup.findStatic(hiddenClass, METHOD_NAME, args);\n@@ -1102,0 +1113,43 @@\n+        \/**\n+         * Generate InlineCopy-based code. <p>\n+         *\n+         * The following is an example of the generated target code:\n+         *\n+         * <blockquote><pre>\n+         * import static java.lang.StringConcatHelper.mix;\n+         * import static java.lang.StringConcatHelper.prepend;\n+         * import static java.lang.StringConcatHelper.newString;\n+         * import static java.lang.StringConcatHelper.newArray;\n+         *\n+         * public static String concat(int arg0, long arg1, boolean arg2, char arg3, String arg4, float arg5, double arg6, Object arg7) {\n+         *     String constant0, constant1, ..., constant8;\n+         *     int lengthCoder = ...;\n+         *\n+         *     \/\/ String arg\n+         *     arg4 = stringOf(arg4);\n+         *\n+         *     \/\/ Types other than byte\/short\/int\/long\/boolean\/String require a local variable to store\n+         *     String str5 = stringOf(arg5);\n+         *     String str6 = stringOf(arg6);\n+         *     String str7 = stringOf(arg7);\n+         *\n+         *     lengthCoder = mix(mix(mix(mix(\n+         *                   mix(mix(mix(mix(engthCoder,\n+         *                       str7), str6), str5), arg4),\n+         *                       arg3), arg2), arg1), arg0);\n+         *\n+         *     String suffix = constant9;\n+         *     lengthCoder -= suffix.length();\n+         *     byte[] buf = newArray(suffix, lengthCoder);\n+         *\n+         *     lengthCoder = prepend(prepend(prepend(prepend(\n+         *                   prepend(prepend(prepend(prepend(lengthCoder,\n+         *                        buf, str7, constant7), buf, str6, constant6),\n+         *                        buf, str5, constant5), buf, arg4, constant4),\n+         *                        buf, arg3, constant3), buf, arg2, constant2),\n+         *                        buf, arg1, constant1), buf, arg0, constant0);\n+         *\n+         *     return newArray(buf, lengthCoder);\n+         * }\n+         * <\/pre><\/blockquote>\n+         *\/\n@@ -1106,4 +1160,1 @@\n-                    cb.new_(STRING_BUILDER);\n-                    cb.dup();\n-\n-                    int len = 0;\n+                    long initalLengthCoder = JLA.stringConcatInitialCoder();\n@@ -1112,1 +1163,1 @@\n-                            len += constant.length();\n+                            initalLengthCoder = JLA.stringConcatMix(initalLengthCoder, constant);\n@@ -1115,11 +1166,55 @@\n-                    len += args.parameterCount() * ARGUMENT_SIZE_FACTOR;\n-                    cb.loadConstant(len);\n-                    cb.invokespecial(STRING_BUILDER, \"<init>\", INT_CONSTRUCTOR_TYPE);\n-\n-                    \/\/ At this point, we have a blank StringBuilder on stack, fill it in with .append calls.\n-                    {\n-                        int off = 0;\n-                        for (int c = 0; c < args.parameterCount(); c++) {\n-                            if (constants[c] != null) {\n-                                cb.ldc(constants[c]);\n-                                cb.invokevirtual(STRING_BUILDER, \"append\", APPEND_STRING_TYPE);\n+\n+                    int paramCount = args.parameterCount();\n+\n+                    \/\/ Compute parameter and local string variable slots\n+                    int   paramSlotsTotalSize = 0;\n+                    int[] paramSlots          = new int[paramCount];\n+                    for (int i = 0; i < paramCount; i++) {\n+                        Class<?> cl = args.parameterType(i);\n+                        TypeKind kind = TypeKind.from(cl);\n+                        paramSlots[i] = paramSlotsTotalSize;\n+                        paramSlotsTotalSize += kind.slotSize();\n+                    }\n+\n+                    int lengthCoderSlot = paramSlotsTotalSize;\n+                    int bufSlot         = paramSlotsTotalSize + 2;\n+\n+                    \/*\n+                     * store string variants:\n+                     *\n+                     * str0 = Float.toString(args(0));\n+                     * str1 = Double.toString(args(1));\n+                     * ...\n+                     * strN = StringConcatHelper.stringOf(args(N));\n+                     *\n+                     *\/\n+                    for (int i = 0, strings = 0; i < paramCount; i++) {\n+                        Class<?> cl = args.parameterType(i);\n+                        TypeKind kind = TypeKind.from(cl);\n+                        if (needStringOf(cl)) {\n+                            ClassDesc classDesc;\n+                            MethodTypeDesc methodTypeDesc;\n+                            String methodName;\n+                            if (cl == float.class) {\n+                                classDesc = CD_Float;\n+                                methodName = \"toString\";\n+                                methodTypeDesc = FLOAT_TO_STRING;\n+                            } else if (cl == double.class) {\n+                                classDesc = CD_Double;\n+                                methodName = \"toString\";\n+                                methodTypeDesc = DOUBLE_TO_STRING;\n+                            } else {\n+                                classDesc = CD_StringConcatHelper;\n+                                methodName = \"stringOf\";\n+                                methodTypeDesc = OBJECT_TO_STRING;\n+                            }\n+\n+                            \/\/ Types other than byte\/short\/int\/long\/boolean\/String require a local variable to store\n+                            int strLocalSlot = (cl == String.class)\n+                                    ? paramSlots[i]\n+                                    : bufSlot + (++strings);\n+                            cb.loadLocal(kind, paramSlots[i])\n+                              .invokestatic(classDesc, methodName, methodTypeDesc)\n+                              .astore(strLocalSlot);\n+                            if (cl != String.class) {\n+                                paramSlots[i] = strLocalSlot;\n@@ -1127,6 +1222,0 @@\n-                            Class<?> cl = args.parameterType(c);\n-                            TypeKind kind = TypeKind.from(cl);\n-                            cb.loadLocal(kind, off);\n-                            off += kind.slotSize();\n-                            MethodTypeDesc desc = getSBAppendDesc(cl);\n-                            cb.invokevirtual(STRING_BUILDER, \"append\", desc);\n@@ -1134,3 +1223,82 @@\n-                        if (constants[constants.length - 1] != null) {\n-                            cb.ldc(constants[constants.length - 1]);\n-                            cb.invokevirtual(STRING_BUILDER, \"append\", APPEND_STRING_TYPE);\n+                    }\n+\n+                    \/*\n+                     * Store init index :\n+                     *\n+                     *  lengthCoder = mix(mix(mix(mix(initalIengthCoder, argN), ..., arg2), arg1), 0);\n+                     *  ...\n+                     *\n+                     *\/\n+                    cb.loadConstant(initalLengthCoder);\n+                    for (int i = paramCount - 1; i >= 0; i--) {\n+                        Class<?> cl = args.parameterType(i);\n+                        TypeKind kind = TypeKind.from(cl);\n+                        int paramSlot = paramSlots[i];\n+\n+                        ClassDesc classDesc = CD_StringConcatHelper;\n+                        MethodTypeDesc methodTypeDesc;\n+                        if (cl == byte.class || cl == short.class || cl == int.class) {\n+                            classDesc = CD_Integer;\n+                            methodTypeDesc = Mix_int;\n+                        } else if (cl == long.class) {\n+                            classDesc = CD_Long;\n+                            methodTypeDesc = MIX_long;\n+                        } else if (cl == boolean.class) {\n+                            methodTypeDesc = Mix_boolean;\n+                        } else if (cl == char.class) {\n+                            methodTypeDesc = Mix_char;\n+                        } else {\n+                            methodTypeDesc = Mix_String;\n+                            kind = TypeKind.from(String.class);\n+                        }\n+                        cb.loadLocal(kind, paramSlot)\n+                          .invokestatic(CD_StringConcatHelper, \"mix\", methodTypeDesc);\n+                    }\n+                    cb.lstore(lengthCoderSlot);\n+\n+                    String suffix = constants[constants.length - 1];\n+                    if (suffix == null) {\n+                        suffix = \"\";\n+                    }\n+                    if (!suffix.isEmpty()) {\n+                        cb.lload(lengthCoderSlot)\n+                          .ldc((long) suffix.length())\n+                          .lsub()\n+                          .lstore(lengthCoderSlot);\n+                    }\n+\n+                    \/*\n+                     * Allocate buffer :\n+                     *  buf = StringConcatHelper.newArray(suffix, lengthCoder)\n+                     *\/\n+                    cb.ldc(suffix)\n+                      .lload(lengthCoderSlot)\n+                      .invokestatic(CD_StringConcatHelper, \"newArrayWithSuffix\", NEW_ARRAY_SUFFIX)\n+                      .astore(bufSlot);\n+\n+                    \/*\n+                     * prepend arguments :\n+                     *  lengthCoder = prepend(prepend(prepend(lengthCoder, buf, arg0), buf, arg1), ...)\n+                     *\/\n+                    cb.lload(lengthCoderSlot);\n+                    for (int i = paramCount - 1; i >= 0; i--) {\n+                        int paramSlot = paramSlots[i];\n+                        Class<?> cl = args.parameterType(i);\n+                        TypeKind kind = TypeKind.from(cl);\n+\n+                        MethodTypeDesc methodTypeDesc;\n+                        if (cl == byte.class || cl == short.class || cl == int.class) {\n+                            methodTypeDesc = PREPEND_int;\n+                        } else if (cl == long.class) {\n+                            methodTypeDesc = PREPEND_long;\n+                        } else if (cl == boolean.class) {\n+                            methodTypeDesc = PREPEND_boolean;\n+                        } else if (cl == char.class) {\n+                            methodTypeDesc = PREPEND_char;\n+                        } else {\n+                            methodTypeDesc = PREPEND_String;\n+                            kind = TypeKind.from(String.class);\n+                        }\n+                        String constant = constants[i];\n+                        if (constant == null) {\n+                            constant = \"\";\n@@ -1138,0 +1306,4 @@\n+                        cb.aload(bufSlot)\n+                          .loadLocal(kind, paramSlot)\n+                          .ldc(constant)\n+                          .invokestatic(CD_StringConcatHelper, \"prepend\", methodTypeDesc);\n@@ -1139,0 +1311,1 @@\n+                    cb.lstore(lengthCoderSlot);\n@@ -1140,2 +1313,10 @@\n-                    cb.invokevirtual(STRING_BUILDER, \"toString\", TO_STRING_TYPE);\n-                    cb.areturn();\n+                    \/\/ return StringConcatHelper.newString(buf, lengthCoder));\n+                    cb.aload(bufSlot)\n+                      .lload(lengthCoderSlot)\n+                      .invokestatic(CD_StringConcatHelper, \"newString\", NEW_STRING)\n+                      .areturn();\n+                }\n+\n+                static boolean needStringOf(Class<?> cl) {\n+                    return cl != byte.class && cl != short.class   && cl != int.class\n+                        && cl != long.class && cl != boolean.class && cl != char.class;\n@@ -1156,24 +1337,0 @@\n-\n-        private static MethodTypeDesc getSBAppendDesc(Class<?> cl) {\n-            if (cl.isPrimitive()) {\n-                if (cl == Integer.TYPE || cl == Byte.TYPE || cl == Short.TYPE) {\n-                    return APPEND_INT_TYPE;\n-                } else if (cl == Boolean.TYPE) {\n-                    return APPEND_BOOLEAN_TYPE;\n-                } else if (cl == Character.TYPE) {\n-                    return APPEND_CHAR_TYPE;\n-                } else if (cl == Double.TYPE) {\n-                    return APPEND_DOUBLE_TYPE;\n-                } else if (cl == Float.TYPE) {\n-                    return APPEND_FLOAT_TYPE;\n-                } else if (cl == Long.TYPE) {\n-                    return APPEND_LONG_TYPE;\n-                } else {\n-                    throw new IllegalStateException(\"Unhandled primitive StringBuilder.append: \" + cl);\n-                }\n-            } else if (cl == String.class) {\n-                return APPEND_STRING_TYPE;\n-            } else {\n-                return APPEND_OBJECT_TYPE;\n-            }\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":224,"deletions":67,"binary":false,"changes":291,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Trivial String concatenation benchmark.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(value = 3, jvmArgsAppend = \"-Djava.lang.invoke.StringConcat.highArityThreshold=0\")\n+public class StringConcatGenerate extends StringConcat {\n+    public static void main(String... args) {\n+        StringConcatGenerate concat = new StringConcatGenerate();\n+        concat.concat4String();\n+        concat.concat123String();\n+        concat.concat6String();\n+        concat.concat13String();\n+        concat.concat23String();\n+        concat.concatConstInt();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringConcatGenerate.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Benchmarks stressing String concat startup. Provides a main method that takes names of the sub-benchmarks\n+ * of choice as arguments to work well as a standalone startup test\/diagnostic\n+ *\n+ *   StringSingle\n+ *   MixedSmall - small number of mixed expressions\n+ *   StringLarge - large number of expressions with a mix of String arguments and constants\n+ *   MixedLarge - large number of expressions with a mix of constants, Strings and primivitive arguments\n+ *\/\n+public class StringConcatStartupGenerate {\n+\n+    public static void main(String... args) {\n+        String[] selection = new String[] { \"StringLarge\", \"MixedSmall\", \"StringSingle\", \"MixedLarge\" };\n+        if (args.length > 0) {\n+            selection = args;\n+        }\n+        for (String select : selection) {\n+            switch (select) {\n+                case \"StringSingle\" -> new StringSingle().run();\n+                case \"MixedSmall\" -> new MixedSmall().run();\n+                case \"StringLarge\" -> new StringLarge().run();\n+                case \"MixedLarge\" -> new MixedLarge().run();\n+            }\n+        }\n+    }\n+\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    @State(Scope.Thread)\n+    @Fork(value = 40, warmups = 2, jvmArgsAppend = \"-Djava.lang.invoke.StringConcat.highArityThreshold=0\")\n+    public static class StringSingle extends StringConcatStartup.StringSingle { }\n+\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    @State(Scope.Thread)\n+    @Fork(value = 20, warmups = 2, jvmArgsAppend = \"-Djava.lang.invoke.StringConcat.highArityThreshold=0\")\n+    public static class MixedSmall extends StringConcatStartup.MixedSmall { }\n+\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    @State(Scope.Thread)\n+    @Fork(value = 10, warmups = 2, jvmArgsAppend = \"-Djava.lang.invoke.StringConcat.highArityThreshold=0\")\n+    public static class StringLarge extends StringConcatStartup.StringLarge { }\n+\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    @State(Scope.Thread)\n+    @Fork(value = 10, warmups = 2, jvmArgsAppend = \"-Djava.lang.invoke.StringConcat.highArityThreshold=0\")\n+    public static class MixedLarge extends StringConcatStartup.MixedLarge { }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringConcatStartupGenerate.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"}]}