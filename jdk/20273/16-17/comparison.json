{"files":[{"patch":"@@ -103,22 +103,0 @@\n-    \/**\n-     * Mix value length and coder into current length and coder.\n-     * @param lengthCoder String length with coder packed into higher bits\n-     *                    the upper word.\n-     * @param value       value to mix in\n-     * @return            new length and coder\n-     *\/\n-    static long mix(long lengthCoder, Boolean value) {\n-        return checkOverflow(lengthCoder + ((value == null || value.booleanValue()) ? 4 : 5));\n-    }\n-\n-    \/**\n-     * Mix value length and coder into current length and coder.\n-     * @param lengthCoder String length with coder packed into higher bits\n-     *                    the upper word.\n-     * @param value       value to mix in\n-     * @return            new length and coder\n-     *\/\n-    static long mix(long lengthCoder, Integer value) {\n-        return checkOverflow(lengthCoder + (value == null ? 4: DecimalDigits.stringSize(value.intValue())));\n-    }\n-\n@@ -136,11 +114,0 @@\n-    \/**\n-     * Mix value length and coder into current length and coder.\n-     * @param lengthCoder String length with coder packed into higher bits\n-     *                    the upper word.\n-     * @param value       value to mix in\n-     * @return            new length and coder\n-     *\/\n-    static long mix(long lengthCoder, Long value) {\n-        return checkOverflow(lengthCoder + (value == null ? 4: DecimalDigits.stringSize(value.longValue())));\n-    }\n-\n@@ -318,90 +285,0 @@\n-    \/**\n-     * Prepends constant and the stringly representation of value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n-     * @param buf        buffer to append to\n-     * @param value      boolean value to encode\n-     * @param prefix     a constant to prepend before value\n-     * @return           updated index (coder value retained)\n-     *\/\n-    static long prependNull(long indexCoder, byte[] buf, String prefix) {\n-        int index = (int)indexCoder;\n-        index -= 4;\n-        if (indexCoder < UTF16) {\n-            buf[index] = 'n';\n-            buf[index + 1] = 'u';\n-            buf[index + 2] = 'l';\n-            buf[index + 3] = 'l';\n-            index -= prefix.length();\n-            prefix.getBytes(buf, index, String.LATIN1);\n-            return index;\n-        } else {\n-            StringUTF16.putChar(buf, index, 'n');\n-            StringUTF16.putChar(buf, index + 1, 'u');\n-            StringUTF16.putChar(buf, index + 2, 'l');\n-            StringUTF16.putChar(buf, index + 3, 'l');\n-            index -= prefix.length();\n-            prefix.getBytes(buf, index, String.UTF16);\n-            return index | UTF16;\n-        }\n-    }\n-\n-    \/**\n-     * Prepends constant and the stringly representation of value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n-     * @param buf        buffer to append to\n-     * @param value      Boolean value to encode\n-     * @param prefix     a constant to prepend before value\n-     * @return           updated index (coder value retained)\n-     *\/\n-    static long prepend(long indexCoder, byte[] buf, Boolean value, String prefix) {\n-        if (value == null) {\n-            return prependNull(indexCoder, buf, prefix);\n-        } else {\n-            return prepend(indexCoder, buf, value.booleanValue(), prefix);\n-        }\n-    }\n-\n-    \/**\n-     * Prepends constant and the stringly representation of value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n-     * @param buf        buffer to append to\n-     * @param value      Integer value to encode\n-     * @param prefix     a constant to prepend before value\n-     * @return           updated index (coder value retained)\n-     *\/\n-    static long prepend(long indexCoder, byte[] buf, Integer value, String prefix) {\n-        if (value == null) {\n-            return prependNull(indexCoder, buf, prefix);\n-        } else {\n-            return prepend(indexCoder, buf, value.intValue(), prefix);\n-        }\n-    }\n-\n-    \/**\n-     * Prepends constant and the stringly representation of value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n-     * @param buf        buffer to append to\n-     * @param value      Long value to encode\n-     * @param prefix     a constant to prepend before value\n-     * @return           updated index (coder value retained)\n-     *\/\n-    static long prepend(long indexCoder, byte[] buf, Long value, String prefix) {\n-        if (value == null) {\n-            return prependNull(indexCoder, buf, prefix);\n-        } else {\n-            return prepend(indexCoder, buf, value.longValue(), prefix);\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":0,"deletions":123,"binary":false,"changes":123,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import sun.invoke.util.Wrapper;\n@@ -495,2 +496,1 @@\n-        }\n-        if (paramCount == 2 && !mt.hasPrimitives() && suffix == null\n+        } else if (paramCount == 2 && !mt.hasPrimitives() && suffix == null\n@@ -505,12 +505,0 @@\n-    private static Class<?>[] eraseParameterArray(MethodType mt) {\n-        Class<?>[] ptypes = mt.parameterArray();\n-        for (int i = 0; i < ptypes.length; i++) {\n-            Class<?> ptype = ptypes[i];\n-            if (ptype.isPrimitive() || ptype == Boolean.class || ptype == Integer.class || ptype == Long.class) {\n-                continue;\n-            }\n-            ptypes[i] = Object.class;\n-        }\n-        return ptypes;\n-    }\n-\n@@ -535,1 +523,1 @@\n-        Class<?>[] ptypes = eraseParameterArray(mt);\n+        Class<?>[] ptypes = mt.erase().parameterArray();\n@@ -549,1 +537,1 @@\n-            if (cl == Object.class && cl != Boolean.class && cl != Integer.class && cl != Long.class) {\n+            if (cl == Object.class) {\n@@ -757,1 +745,2 @@\n-                    methodType(long.class, long.class, byte[].class, cl, String.class)).rebind();\n+                    methodType(long.class, long.class, byte[].class,\n+                            Wrapper.asPrimitiveType(cl), String.class)).rebind();\n@@ -771,9 +760,6 @@\n-    private static final int INT_PRIMITIVE_IDX  = 0,\n-                             CHAR_PRIMITIVE_IDX = 1,\n-                             LONG_PRIMITIVE_IDX = 2,\n-                             BOOL_PRIMITIVE_IDX = 3,\n-                             STRING_IDX         = 4,\n-                             BOOLEAN_IDX        = 5,\n-                             INTEGER_IDX        = 6,\n-                             LONG_IDX           = 7,\n-                             TYPE_COUNT         = 8;\n+    private static final int INT_IDX = 0,\n+            CHAR_IDX = 1,\n+            LONG_IDX = 2,\n+            BOOLEAN_IDX = 3,\n+            STRING_IDX = 4,\n+            TYPE_COUNT = 5;\n@@ -782,7 +768,4 @@\n-        if (cl == int.class)                             return INT_PRIMITIVE_IDX;\n-        if (cl == boolean.class)                         return BOOL_PRIMITIVE_IDX;\n-        if (cl == char.class)                            return CHAR_PRIMITIVE_IDX;\n-        if (cl == long.class)                            return LONG_PRIMITIVE_IDX;\n-        if (cl == Boolean.class)                         return BOOLEAN_IDX;\n-        if (cl == Integer.class)                         return INTEGER_IDX;\n-        if (cl == Long.class)                            return LONG_IDX;\n+        if (cl == int.class)                             return INT_IDX;\n+        if (cl == boolean.class)                         return BOOLEAN_IDX;\n+        if (cl == char.class)                            return CHAR_IDX;\n+        if (cl == long.class)                            return LONG_IDX;\n@@ -868,1 +851,1 @@\n-                    methodType(long.class, long.class, cl)).rebind();\n+                    methodType(long.class, long.class, Wrapper.asPrimitiveType(cl))).rebind();\n@@ -1053,1 +1036,1 @@\n-        if (t == Object.class && t != Boolean.class && t != Integer.class && t != Long.class) {\n+        if (t == Object.class) {\n@@ -1087,3 +1070,3 @@\n-        static final ClassDesc CD_byteArray = ClassDesc.ofDescriptor(\"[B\");\n-        static final MethodTypeDesc OBJECT_TO_STRING = MethodTypeDesc.of(CD_String, CD_Object);\n-        static final MethodTypeDesc FLOAT_TO_STRING = MethodTypeDesc.of(CD_String, CD_float);\n+        static final ClassDesc CD_Array_byte         = ClassDesc.ofDescriptor(\"[B\");\n+\n+        static final MethodTypeDesc FLOAT_TO_STRING  = MethodTypeDesc.of(CD_String, CD_float);\n@@ -1091,20 +1074,16 @@\n-        static final MethodTypeDesc NEW_ARRAY_SUFFIX = MethodTypeDesc.of(CD_byteArray, CD_String, CD_long);\n-        static final MethodTypeDesc NEW_STRING = MethodTypeDesc.of(CD_String, CD_byteArray, CD_long);\n-\n-        static final MethodTypeDesc Mix_int = MethodTypeDesc.of(CD_long, CD_long, CD_int);\n-        static final MethodTypeDesc MIX_long = MethodTypeDesc.of(CD_long, CD_long, CD_long);\n-        static final MethodTypeDesc Mix_boolean = MethodTypeDesc.of(CD_long, CD_long, CD_boolean);\n-        static final MethodTypeDesc Mix_char = MethodTypeDesc.of(CD_long, CD_long, CD_char);\n-        static final MethodTypeDesc Mix_String = MethodTypeDesc.of(CD_long, CD_long, CD_String);\n-        static final MethodTypeDesc Mix_Boolean = MethodTypeDesc.of(CD_long, CD_long, CD_Boolean);\n-        static final MethodTypeDesc Mix_Integer = MethodTypeDesc.of(CD_long, CD_long, CD_Integer);\n-        static final MethodTypeDesc Mix_Long = MethodTypeDesc.of(CD_long, CD_long, CD_Long);\n-\n-        static final MethodTypeDesc PREPEND_int = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_int, CD_String);\n-        static final MethodTypeDesc PREPEND_long = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_long, CD_String);\n-        static final MethodTypeDesc PREPEND_boolean = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_boolean, CD_String);\n-        static final MethodTypeDesc PREPEND_char = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_char, CD_String);\n-        static final MethodTypeDesc PREPEND_String = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_String, CD_String);\n-        static final MethodTypeDesc PREPEND_Boolean = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_Boolean, CD_String);\n-        static final MethodTypeDesc PREPEND_Integer = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_Integer, CD_String);\n-        static final MethodTypeDesc PREPEND_Long = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_Long, CD_String);\n+        static final MethodTypeDesc OBJECT_TO_STRING = MethodTypeDesc.of(CD_String, CD_Object);\n+\n+        static final MethodTypeDesc NEW_ARRAY_SUFFIX = MethodTypeDesc.of(CD_Array_byte, CD_String, CD_long);\n+        static final MethodTypeDesc NEW_STRING       = MethodTypeDesc.of(CD_String, CD_Array_byte, CD_long);\n+\n+        static final MethodTypeDesc MIX_int     = MethodTypeDesc.of(CD_long, CD_long, CD_int);\n+        static final MethodTypeDesc MIX_long    = MethodTypeDesc.of(CD_long, CD_long, CD_long);\n+        static final MethodTypeDesc MIX_boolean = MethodTypeDesc.of(CD_long, CD_long, CD_boolean);\n+        static final MethodTypeDesc MIX_char    = MethodTypeDesc.of(CD_long, CD_long, CD_char);\n+        static final MethodTypeDesc MIX_String  = MethodTypeDesc.of(CD_long, CD_long, CD_String);\n+\n+        static final MethodTypeDesc PREPEND_int     = MethodTypeDesc.of(CD_long, CD_long, CD_Array_byte, CD_int, CD_String);\n+        static final MethodTypeDesc PREPEND_long    = MethodTypeDesc.of(CD_long, CD_long, CD_Array_byte, CD_long, CD_String);\n+        static final MethodTypeDesc PREPEND_boolean = MethodTypeDesc.of(CD_long, CD_long, CD_Array_byte, CD_boolean, CD_String);\n+        static final MethodTypeDesc PREPEND_char    = MethodTypeDesc.of(CD_long, CD_long, CD_Array_byte, CD_char, CD_String);\n+        static final MethodTypeDesc PREPEND_String  = MethodTypeDesc.of(CD_long, CD_long, CD_Array_byte, CD_String, CD_String);\n@@ -1227,29 +1206,30 @@\n-                        TypeKind kind = TypeKind.from(cl);\n-                        if (needStringOf(cl)) {\n-                            ClassDesc classDesc;\n-                            MethodTypeDesc methodTypeDesc;\n-                            String methodName;\n-                            if (cl == float.class) {\n-                                classDesc = CD_Float;\n-                                methodName = \"toString\";\n-                                methodTypeDesc = FLOAT_TO_STRING;\n-                            } else if (cl == double.class) {\n-                                classDesc = CD_Double;\n-                                methodName = \"toString\";\n-                                methodTypeDesc = DOUBLE_TO_STRING;\n-                            } else {\n-                                classDesc = CD_StringConcatHelper;\n-                                methodName = \"stringOf\";\n-                                methodTypeDesc = OBJECT_TO_STRING;\n-                            }\n-\n-                            \/\/ Types other than byte\/short\/int\/long\/boolean\/String require a local variable to store\n-                            int strLocalSlot = (cl == String.class)\n-                                    ? paramSlots[i]\n-                                    : bufSlot + (++strings);\n-                            cb.loadLocal(kind, paramSlots[i])\n-                              .invokestatic(classDesc, methodName, methodTypeDesc)\n-                              .astore(strLocalSlot);\n-                            if (cl != String.class) {\n-                                paramSlots[i] = strLocalSlot;\n-                            }\n+                        if (!needStringOf(cl)) {\n+                            continue;\n+                        }\n+\n+                        ClassDesc classDesc;\n+                        MethodTypeDesc methodTypeDesc;\n+                        String methodName;\n+                        if (cl == float.class) {\n+                            classDesc = CD_Float;\n+                            methodName = \"toString\";\n+                            methodTypeDesc = FLOAT_TO_STRING;\n+                        } else if (cl == double.class) {\n+                            classDesc = CD_Double;\n+                            methodName = \"toString\";\n+                            methodTypeDesc = DOUBLE_TO_STRING;\n+                        } else {\n+                            classDesc = CD_StringConcatHelper;\n+                            methodName = \"stringOf\";\n+                            methodTypeDesc = OBJECT_TO_STRING;\n+                        }\n+\n+                        \/\/ Types other than byte\/short\/int\/long\/boolean\/String require a local variable to store\n+                        int strLocalSlot = (cl == String.class)\n+                                ? paramSlots[i]\n+                                : bufSlot + (++strings);\n+                        cb.loadLocal(TypeKind.from(cl), paramSlots[i])\n+                          .invokestatic(classDesc, methodName, methodTypeDesc)\n+                          .astore(strLocalSlot);\n+                        if (cl != String.class) {\n+                            paramSlots[i] = strLocalSlot;\n@@ -1276,1 +1256,1 @@\n-                            methodTypeDesc = Mix_int;\n+                            methodTypeDesc = MIX_int;\n@@ -1281,1 +1261,1 @@\n-                            methodTypeDesc = Mix_boolean;\n+                            methodTypeDesc = MIX_boolean;\n@@ -1283,7 +1263,1 @@\n-                            methodTypeDesc = Mix_char;\n-                        } else if (cl == Boolean.class) {\n-                            methodTypeDesc = Mix_Boolean;\n-                        } else if (cl == Integer.class) {\n-                            methodTypeDesc = Mix_Integer;\n-                        } else if (cl == Long.class) {\n-                            methodTypeDesc = Mix_Long;\n+                            methodTypeDesc = MIX_char;\n@@ -1291,1 +1265,1 @@\n-                            methodTypeDesc = Mix_String;\n+                            methodTypeDesc = MIX_String;\n@@ -1304,0 +1278,1 @@\n+                        \/\/ lengthCoder = lengthCoder - suffix.length()\n@@ -1321,1 +1296,1 @@\n-                     *  lengthCoder = prepend(prepend(prepend(lengthCoder, buf, arg0), buf, arg1), ...)\n+                     *  lengthCoder = prepend(prepend(lengthCoder, buf, argN, constantN), ...), buf, arg0, constant0)\n@@ -1338,6 +1313,0 @@\n-                        } else if (cl == Boolean.class) {\n-                            methodTypeDesc = PREPEND_Boolean;\n-                        } else if (cl == Integer.class) {\n-                            methodTypeDesc = PREPEND_Integer;\n-                        } else if (cl == Long.class) {\n-                            methodTypeDesc = PREPEND_Long;\n@@ -1367,3 +1336,2 @@\n-                    return cl != byte.class    && cl != short.class   && cl != int.class\n-                        && cl != long.class    && cl != boolean.class && cl != char.class\n-                        && cl != Boolean.class && cl != Integer.class && cl != Long.class;\n+                    return cl != byte.class && cl != short.class   && cl != int.class\n+                        && cl != long.class && cl != boolean.class && cl != char.class;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":75,"deletions":107,"binary":false,"changes":182,"status":"modified"},{"patch":"@@ -222,10 +222,10 @@\n-            f0 =\"1\",   f1=\"1\",  f2=\"1\",  f3=\"1\",  f4=\"1\",  f5=\"1\",  f6=\"1\",  f7=\"1\",  f8=\"1\",  f9=\"1\",\n-            f10=\"1\",  f11=\"1\", f12=\"1\", f13=\"1\", f14=\"1\", f15=\"1\", f16=\"1\", f17=\"1\", f18=\"1\", f19=\"1\",\n-            f20=\"1\",  f21=\"1\", f22=\"1\", f23=\"1\", f24=\"1\", f25=\"1\", f26=\"1\", f27=\"1\", f28=\"1\", f29=\"1\",\n-            f30=\"1\",  f31=\"1\", f32=\"1\", f33=\"1\", f34=\"1\", f35=\"1\", f36=\"1\", f37=\"1\", f38=\"1\", f39=\"1\",\n-            f40=\"1\",  f41=\"1\", f42=\"1\", f43=\"1\", f44=\"1\", f45=\"1\", f46=\"1\", f47=\"1\", f48=\"1\", f49=\"1\",\n-            f50=\"1\",  f51=\"1\", f52=\"1\", f53=\"1\", f54=\"1\", f55=\"1\", f56=\"1\", f57=\"1\", f58=\"1\", f59=\"1\",\n-            f60=\"1\",  f61=\"1\", f62=\"1\", f63=\"1\", f64=\"1\", f65=\"1\", f66=\"1\", f67=\"1\", f68=\"1\", f69=\"1\",\n-            f70=\"1\",  f71=\"1\", f72=\"1\", f73=\"1\", f74=\"1\", f75=\"1\", f76=\"1\", f77=\"1\", f78=\"1\", f79=\"1\",\n-            f80=\"1\",  f81=\"1\", f82=\"1\", f83=\"1\", f84=\"1\", f85=\"1\", f86=\"1\", f87=\"1\", f88=\"1\", f89=\"1\",\n-            f90=\"1\",  f91=\"1\", f92=\"1\", f93=\"1\", f94=\"1\", f95=\"1\", f96=\"1\", f97=\"1\", f98=\"1\", f99=\"1\",\n+            f0=\"1\", f1=\"1\", f2=\"1\", f3=\"1\", f4=\"1\", f5=\"1\", f6=\"1\", f7=\"1\", f8=\"1\", f9=\"1\",\n+            f10=\"1\", f11=\"1\", f12=\"1\", f13=\"1\", f14=\"1\", f15=\"1\", f16=\"1\", f17=\"1\", f18=\"1\", f19=\"1\",\n+            f20=\"1\", f21=\"1\", f22=\"1\", f23=\"1\", f24=\"1\", f25=\"1\", f26=\"1\", f27=\"1\", f28=\"1\", f29=\"1\",\n+            f30=\"1\", f31=\"1\", f32=\"1\", f33=\"1\", f34=\"1\", f35=\"1\", f36=\"1\", f37=\"1\", f38=\"1\", f39=\"1\",\n+            f40=\"1\", f41=\"1\", f42=\"1\", f43=\"1\", f44=\"1\", f45=\"1\", f46=\"1\", f47=\"1\", f48=\"1\", f49=\"1\",\n+            f50=\"1\", f51=\"1\", f52=\"1\", f53=\"1\", f54=\"1\", f55=\"1\", f56=\"1\", f57=\"1\", f58=\"1\", f59=\"1\",\n+            f60=\"1\", f61=\"1\", f62=\"1\", f63=\"1\", f64=\"1\", f65=\"1\", f66=\"1\", f67=\"1\", f68=\"1\", f69=\"1\",\n+            f70=\"1\", f71=\"1\", f72=\"1\", f73=\"1\", f74=\"1\", f75=\"1\", f76=\"1\", f77=\"1\", f78=\"1\", f79=\"1\",\n+            f80=\"1\", f81=\"1\", f82=\"1\", f83=\"1\", f84=\"1\", f85=\"1\", f86=\"1\", f87=\"1\", f88=\"1\", f89=\"1\",\n+            f90=\"1\", f91=\"1\", f92=\"1\", f93=\"1\", f94=\"1\", f95=\"1\", f96=\"1\", f97=\"1\", f98=\"1\", f99=\"1\",\n@@ -259,13 +259,13 @@\n-        return  f0 + \",\" +  f1 + \",\" + f2 + \",\" + f3 + \",\" + f4 + \",\" + f5 + \",\" + f6 + \",\" + f7 + \",\" + f8 + \",\" + f9 + \",\"\n-             + f10 + \",\" + f11 + \",\"+ f12 + \",\"+ f13 + \",\"+ f14 + \",\"+ f15 + \",\"+ f16 + \",\"+ f17 + \",\"+ f18 + \",\"+ f19 + \",\"\n-             + f20 + \",\" + f21 + \",\"+ f22 + \",\"+ f23 + \",\"+ f24 + \",\"+ f25 + \",\"+ f26 + \",\"+ f27 + \",\"+ f28 + \",\"+ f29 + \",\"\n-             + f30 + \",\" + f31 + \",\"+ f32 + \",\"+ f33 + \",\"+ f34 + \",\"+ f35 + \",\"+ f36 + \",\"+ f37 + \",\"+ f38 + \",\"+ f39 + \",\"\n-             + f40 + \",\" + f41 + \",\"+ f42 + \",\"+ f43 + \",\"+ f44 + \",\"+ f45 + \",\"+ f46 + \",\"+ f47 + \",\"+ f48 + \",\"+ f49 + \",\"\n-             + f50 + \",\" + f51 + \",\"+ f52 + \",\"+ f53 + \",\"+ f54 + \",\"+ f55 + \",\"+ f56 + \",\"+ f57 + \",\"+ f58 + \",\"+ f59 + \",\"\n-             + f60 + \",\" + f61 + \",\"+ f62 + \",\"+ f63 + \",\"+ f64 + \",\"+ f65 + \",\"+ f66 + \",\"+ f67 + \",\"+ f68 + \",\"+ f69 + \",\"\n-             + f70 + \",\" + f71 + \",\"+ f72 + \",\"+ f73 + \",\"+ f74 + \",\"+ f75 + \",\"+ f76 + \",\"+ f77 + \",\"+ f78 + \",\"+ f79 + \",\"\n-             + f80 + \",\" + f81 + \",\"+ f82 + \",\"+ f83 + \",\"+ f84 + \",\"+ f85 + \",\"+ f86 + \",\"+ f87 + \",\"+ f88 + \",\"+ f89 + \",\"\n-             + f90 + \",\" + f91 + \",\"+ f92 + \",\"+ f93 + \",\"+ f94 + \",\"+ f95 + \",\"+ f96 + \",\"+ f97 + \",\"+ f98 + \",\"+ f99 + \",\"\n-             +f100 + \",\" +f101 + \",\"+f102 + \",\"+f103 + \",\"+f104 + \",\"+f105 + \",\"+f106 + \",\"+f107 + \",\"+f108 + \",\"+f109 + \",\"\n-             +f110 + \",\" +f111 + \",\"+f112 + \",\"+f113 + \",\"+f114 + \",\"+f115 + \",\"+f116 + \",\"+f117 + \",\"+f118 + \",\"+f119 + \",\"\n-             +f120 + \",\" +f121 + \",\"+f122;\n+        return f0 + \",\"+ f1 + \",\"+ f2 + \",\"+ f3 + \",\"+ f4 + \",\"+ f5 + \",\"+ f6 + \",\"+ f7 + \",\"+ f8 + \",\"+ f9 + \",\"\n+                + f10 + \",\"+ f11 + \",\"+ f12 + \",\"+ f13 + \",\"+ f14 + \",\"+ f15 + \",\"+ f16 + \",\"+ f17 + \",\"+ f18 + \",\"+ f19 + \",\"\n+                + f20 + \",\"+ f21 + \",\"+ f22 + \",\"+ f23 + \",\"+ f24 + \",\"+ f25 + \",\"+ f26 + \",\"+ f27 + \",\"+ f28 + \",\"+ f29 + \",\"\n+                + f30 + \",\"+ f31 + \",\"+ f32 + \",\"+ f33 + \",\"+ f34 + \",\"+ f35 + \",\"+ f36 + \",\"+ f37 + \",\"+ f38 + \",\"+ f39 + \",\"\n+                + f40 + \",\"+ f41 + \",\"+ f42 + \",\"+ f43 + \",\"+ f44 + \",\"+ f45 + \",\"+ f46 + \",\"+ f47 + \",\"+ f48 + \",\"+ f49 + \",\"\n+                + f50 + \",\"+ f51 + \",\"+ f52 + \",\"+ f53 + \",\"+ f54 + \",\"+ f55 + \",\"+ f56 + \",\"+ f57 + \",\"+ f58 + \",\"+ f59 + \",\"\n+                + f60 + \",\"+ f61 + \",\"+ f62 + \",\"+ f63 + \",\"+ f64 + \",\"+ f65 + \",\"+ f66 + \",\"+ f67 + \",\"+ f68 + \",\"+ f69 + \",\"\n+                + f70 + \",\"+ f71 + \",\"+ f72 + \",\"+ f73 + \",\"+ f74 + \",\"+ f75 + \",\"+ f76 + \",\"+ f77 + \",\"+ f78 + \",\"+ f79 + \",\"\n+                + f80 + \",\"+ f81 + \",\"+ f82 + \",\"+ f83 + \",\"+ f84 + \",\"+ f85 + \",\"+ f86 + \",\"+ f87 + \",\"+ f88 + \",\"+ f89 + \",\"\n+                + f90 + \",\"+ f91 + \",\"+ f92 + \",\"+ f93 + \",\"+ f94 + \",\"+ f95 + \",\"+ f96 + \",\"+ f97 + \",\"+ f98 + \",\"+ f99 + \",\"\n+                +f100 + \",\"+f101 + \",\"+f102 + \",\"+f103 + \",\"+f104 + \",\"+f105 + \",\"+f106 + \",\"+f107 + \",\"+f108 + \",\"+f109 + \",\"\n+                +f110 + \",\"+f111 + \",\"+f112 + \",\"+f113 + \",\"+f114 + \",\"+f115 + \",\"+f116 + \",\"+f117 + \",\"+f118 + \",\"+f119 + \",\"\n+                +f120 + \",\"+f121 + \",\"+f122;\n@@ -305,5 +305,1 @@\n-        return  f0 +  f1  + f2 +  f3 +  f4\n-             +  f5 +  f6  + f7 +  f8 +  f9\n-             + f10 + f11 + f12 + f13 + f14\n-             + f15 + f16 + f17 + f18 + f19\n-             + f20 + f21 + f22 + \"\"\"\n+        return f0 + f1 + f2 + f3 + f4 + f5 + f6 + f7 + f8 + f9 + f10 + f11 + f12 + f13 + f14 + f15 + f16 + f17 + f18 + f19 + f20 + f21 + f22 + \"\"\"\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringConcat.java","additions":24,"deletions":28,"binary":false,"changes":52,"status":"modified"}]}