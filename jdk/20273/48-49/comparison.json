{"files":[{"patch":"@@ -1223,1 +1223,1 @@\n-                paramTypes[i + 1] = needString(cl) ? CD_String : ConstantUtils.classDesc(cl);\n+                paramTypes[i + 1] = needStringOf(cl) ? CD_String : ConstantUtils.classDesc(cl);\n@@ -1408,11 +1408,3 @@\n-                    int   paramCount  = concatArgs.parameterCount();\n-                    int   thisSlot    = cb.receiverSlot();\n-                    int[] stringSlots = new int[paramCount];\n-                    for (int i = 0; i < paramCount; i++) {\n-                        var cl = concatArgs.parameterType(i);\n-                        if (needStringOf(cl)) {\n-                            stringSlots[i] = cb.allocateLocal(TypeKind.ReferenceType);\n-                        }\n-                    }\n-\n-                    int lengthSlot    = cb.allocateLocal(TypeKind.IntType),\n+                    int paramCount    = concatArgs.parameterCount(),\n+                        thisSlot      = cb.receiverSlot(),\n+                        lengthSlot    = cb.allocateLocal(TypeKind.IntType),\n@@ -1434,0 +1426,1 @@\n+                    int[] stringSlots = new int[paramCount];\n@@ -1445,0 +1438,1 @@\n+                            stringSlots[i] = cb.allocateLocal(TypeKind.ReferenceType);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -39,3 +39,2 @@\n-        MethodHandles.Lookup lookup = MethodHandles.lookup();\n-\n-        Class<?>[] types = new Class[] {\n+        var lookup = MethodHandles.lookup();\n+        var types  = new Class<?>[] {\n@@ -44,3 +43,0 @@\n-        Object[] values = new Object[] {\n-                1, 1L, 1D, 1F, 'C', true, \"A\",\n-        };\n@@ -48,1 +44,3 @@\n-        for (int i = 0; i < 10_000; i++) {\n+        long initUnloadedClassCount = ManagementFactory.getClassLoadingMXBean().getUnloadedClassCount();\n+\n+        for (int i = 0; i < 2000; i++) {\n@@ -52,3 +50,1 @@\n-            String recipe = \"\\1\".repeat(length);\n-            Class<?>[] ptypes = new Class[length];\n-            Object[] pvalues = new Object[length];\n+            var ptypes = new Class[length];\n@@ -58,1 +54,0 @@\n-                pvalues[j] = values[index];\n@@ -60,2 +55,1 @@\n-            MethodType concatType = MethodType.methodType(String.class, ptypes);\n-            CallSite callSite = StringConcatFactory.makeConcatWithConstants(\n+            StringConcatFactory.makeConcatWithConstants(\n@@ -64,2 +58,2 @@\n-                    concatType,\n-                    recipe,\n+                    MethodType.methodType(String.class, ptypes),\n+                    \"\\1\".repeat(length), \/\/ recipe\n@@ -68,19 +62,0 @@\n-            MethodHandle mh = callSite.dynamicInvoker();\n-            String result = switch (length) {\n-                case 1  -> (String) mh.invoke(pvalues[0]);\n-                case 2  -> (String) mh.invoke(pvalues[0], pvalues[1]);\n-                case 3  -> (String) mh.invoke(pvalues[0], pvalues[1], pvalues[2]);\n-                case 4  -> (String) mh.invoke(pvalues[0], pvalues[1], pvalues[2], pvalues[3]);\n-                case 5  -> (String) mh.invoke(pvalues[0], pvalues[1], pvalues[2], pvalues[3], pvalues[4]);\n-                case 6  -> (String) mh.invoke(pvalues[0], pvalues[1], pvalues[2], pvalues[3], pvalues[4], pvalues[5]);\n-                case 7  -> (String) mh.invoke(pvalues[0], pvalues[1], pvalues[2], pvalues[3], pvalues[4], pvalues[5], pvalues[6]);\n-                case 8  -> (String) mh.invoke(pvalues[0], pvalues[1], pvalues[2], pvalues[3], pvalues[4], pvalues[5], pvalues[6], pvalues[7]);\n-                case 9  -> (String) mh.invoke(pvalues[0], pvalues[1], pvalues[2], pvalues[3], pvalues[4], pvalues[5], pvalues[6], pvalues[7], pvalues[8]);\n-                default -> throw new RuntimeException(\"length too large \" + length);\n-            };\n-\n-            StringBuilder sb = new StringBuilder();\n-            for (int j = 0; j < pvalues.length; j++) {\n-                sb.append(pvalues[j]);\n-            }\n-            assertEquals(sb.toString(), result);\n@@ -90,1 +65,1 @@\n-        if (unloadedClassCount == 0) {\n+        if (initUnloadedClassCount == unloadedClassCount) {\n","filename":"test\/jdk\/java\/lang\/String\/concat\/HiddenClassUnloading.java","additions":10,"deletions":35,"binary":false,"changes":45,"status":"modified"}]}