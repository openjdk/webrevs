{"files":[{"patch":"@@ -103,0 +103,22 @@\n+    \/**\n+     * Mix value length and coder into current length and coder.\n+     * @param lengthCoder String length with coder packed into higher bits\n+     *                    the upper word.\n+     * @param value       value to mix in\n+     * @return            new length and coder\n+     *\/\n+    static long mix(long lengthCoder, Boolean value) {\n+        return checkOverflow(lengthCoder + ((value == null || value.booleanValue()) ? 4 : 5));\n+    }\n+\n+    \/**\n+     * Mix value length and coder into current length and coder.\n+     * @param lengthCoder String length with coder packed into higher bits\n+     *                    the upper word.\n+     * @param value       value to mix in\n+     * @return            new length and coder\n+     *\/\n+    static long mix(long lengthCoder, Integer value) {\n+        return checkOverflow(lengthCoder + (value == null ? 4: DecimalDigits.stringSize(value.intValue())));\n+    }\n+\n@@ -114,0 +136,11 @@\n+    \/**\n+     * Mix value length and coder into current length and coder.\n+     * @param lengthCoder String length with coder packed into higher bits\n+     *                    the upper word.\n+     * @param value       value to mix in\n+     * @return            new length and coder\n+     *\/\n+    static long mix(long lengthCoder, Long value) {\n+        return checkOverflow(lengthCoder + (value == null ? 4: DecimalDigits.stringSize(value.longValue())));\n+    }\n+\n@@ -285,0 +318,90 @@\n+    \/**\n+     * Prepends constant and the stringly representation of value into buffer,\n+     * given the coder and final index. Index is measured in chars, not in bytes!\n+     *\n+     * @param indexCoder final char index in the buffer, along with coder packed\n+     *                   into higher bits.\n+     * @param buf        buffer to append to\n+     * @param value      boolean value to encode\n+     * @param prefix     a constant to prepend before value\n+     * @return           updated index (coder value retained)\n+     *\/\n+    static long prependNull(long indexCoder, byte[] buf, String prefix) {\n+        int index = (int)indexCoder;\n+        index -= 4;\n+        if (indexCoder < UTF16) {\n+            buf[index] = 'n';\n+            buf[index + 1] = 'u';\n+            buf[index + 2] = 'l';\n+            buf[index + 3] = 'l';\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.LATIN1);\n+            return index;\n+        } else {\n+            StringUTF16.putChar(buf, index, 'n');\n+            StringUTF16.putChar(buf, index + 1, 'u');\n+            StringUTF16.putChar(buf, index + 2, 'l');\n+            StringUTF16.putChar(buf, index + 3, 'l');\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.UTF16);\n+            return index | UTF16;\n+        }\n+    }\n+\n+    \/**\n+     * Prepends constant and the stringly representation of value into buffer,\n+     * given the coder and final index. Index is measured in chars, not in bytes!\n+     *\n+     * @param indexCoder final char index in the buffer, along with coder packed\n+     *                   into higher bits.\n+     * @param buf        buffer to append to\n+     * @param value      Boolean value to encode\n+     * @param prefix     a constant to prepend before value\n+     * @return           updated index (coder value retained)\n+     *\/\n+    static long prepend(long indexCoder, byte[] buf, Boolean value, String prefix) {\n+        if (value == null) {\n+            return prependNull(indexCoder, buf, prefix);\n+        } else {\n+            return prepend(indexCoder, buf, value.booleanValue(), prefix);\n+        }\n+    }\n+\n+    \/**\n+     * Prepends constant and the stringly representation of value into buffer,\n+     * given the coder and final index. Index is measured in chars, not in bytes!\n+     *\n+     * @param indexCoder final char index in the buffer, along with coder packed\n+     *                   into higher bits.\n+     * @param buf        buffer to append to\n+     * @param value      Integer value to encode\n+     * @param prefix     a constant to prepend before value\n+     * @return           updated index (coder value retained)\n+     *\/\n+    static long prepend(long indexCoder, byte[] buf, Integer value, String prefix) {\n+        if (value == null) {\n+            return prependNull(indexCoder, buf, prefix);\n+        } else {\n+            return prepend(indexCoder, buf, value.intValue(), prefix);\n+        }\n+    }\n+\n+    \/**\n+     * Prepends constant and the stringly representation of value into buffer,\n+     * given the coder and final index. Index is measured in chars, not in bytes!\n+     *\n+     * @param indexCoder final char index in the buffer, along with coder packed\n+     *                   into higher bits.\n+     * @param buf        buffer to append to\n+     * @param value      Long value to encode\n+     * @param prefix     a constant to prepend before value\n+     * @return           updated index (coder value retained)\n+     *\/\n+    static long prepend(long indexCoder, byte[] buf, Long value, String prefix) {\n+        if (value == null) {\n+            return prependNull(indexCoder, buf, prefix);\n+        } else {\n+            return prepend(indexCoder, buf, value.longValue(), prefix);\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"modified"},{"patch":"@@ -961,1 +961,3 @@\n-                m.ensureTypeVisible(m.getDeclaringClass());\n+                if (allowedModes != LM_TRUSTED) {\n+                    m.ensureTypeVisible(m.getDeclaringClass());\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemberName.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n@@ -34,1 +35,0 @@\n-import sun.invoke.util.Wrapper;\n@@ -49,0 +49,1 @@\n+import static java.lang.constant.ConstantDescs.*;\n@@ -374,4 +375,7 @@\n-            if (concatType.parameterCount() <= HIGH_ARITY_THRESHOLD) {\n-                return new ConstantCallSite(\n-                        generateMHInlineCopy(concatType, constantStrings)\n-                                .viewAsType(concatType, true));\n+            MethodHandle mh = makeSimpleConcat(concatType, constantStrings);\n+            if (mh == null && concatType.parameterCount() <= HIGH_ARITY_THRESHOLD) {\n+                mh = generateMHInlineCopy(concatType, constantStrings);\n+            }\n+\n+            if (mh != null) {\n+                mh = mh.viewAsType(concatType, true);\n@@ -379,2 +383,1 @@\n-                return new ConstantCallSite(\n-                        SimpleStringBuilderStrategy.generate(lookup, concatType, constantStrings));\n+                mh = SimpleStringBuilderStrategy.generate(lookup, concatType, constantStrings);\n@@ -382,0 +385,2 @@\n+\n+            return new ConstantCallSite(mh);\n@@ -469,8 +474,1 @@\n-    \/**\n-     * <p>This strategy replicates what StringBuilders are doing: it builds the\n-     * byte[] array on its own and passes that byte[] array to String\n-     * constructor. This strategy requires access to some private APIs in JDK,\n-     * most notably, the private String constructor that accepts byte[] arrays\n-     * without copying.\n-     *\/\n-    private static MethodHandle generateMHInlineCopy(MethodType mt, String[] constants) {\n+    private static MethodHandle makeSimpleConcat(MethodType mt, String[] constants) {\n@@ -503,0 +501,28 @@\n+\n+        return null;\n+    }\n+\n+    private static Class<?>[] eraseParameterArray(MethodType mt) {\n+        Class<?>[] ptypes = mt.parameterArray();\n+        for (int i = 0; i < ptypes.length; i++) {\n+            Class<?> ptype = ptypes[i];\n+            if (ptype.isPrimitive() || ptype == Boolean.class || ptype == Integer.class || ptype == Long.class) {\n+                continue;\n+            }\n+            ptypes[i] = Object.class;\n+        }\n+        return ptypes;\n+    }\n+\n+    \/**\n+     * <p>This strategy replicates what StringBuilders are doing: it builds the\n+     * byte[] array on its own and passes that byte[] array to String\n+     * constructor. This strategy requires access to some private APIs in JDK,\n+     * most notably, the private String constructor that accepts byte[] arrays\n+     * without copying.\n+     *\/\n+    private static MethodHandle generateMHInlineCopy(MethodType mt, String[] constants) {\n+        int paramCount = mt.parameterCount();\n+        String suffix = constants[paramCount];\n+\n+\n@@ -509,1 +535,1 @@\n-        Class<?>[] ptypes = mt.erase().parameterArray();\n+        Class<?>[] ptypes = eraseParameterArray(mt);\n@@ -523,1 +549,1 @@\n-            if (cl == Object.class) {\n+            if (cl == Object.class && cl != Boolean.class && cl != Integer.class && cl != Long.class) {\n@@ -731,2 +757,1 @@\n-                    methodType(long.class, long.class, byte[].class,\n-                            Wrapper.asPrimitiveType(cl), String.class)).rebind();\n+                    methodType(long.class, long.class, byte[].class, cl, String.class)).rebind();\n@@ -746,6 +771,9 @@\n-    private static final int INT_IDX = 0,\n-            CHAR_IDX = 1,\n-            LONG_IDX = 2,\n-            BOOLEAN_IDX = 3,\n-            STRING_IDX = 4,\n-            TYPE_COUNT = 5;\n+    private static final int INT_PRIMITIVE_IDX  = 0,\n+                             CHAR_PRIMITIVE_IDX = 1,\n+                             LONG_PRIMITIVE_IDX = 2,\n+                             BOOL_PRIMITIVE_IDX = 3,\n+                             STRING_IDX         = 4,\n+                             BOOLEAN_IDX        = 5,\n+                             INTEGER_IDX        = 6,\n+                             LONG_IDX           = 7,\n+                             TYPE_COUNT         = 8;\n@@ -754,4 +782,7 @@\n-        if (cl == int.class)                             return INT_IDX;\n-        if (cl == boolean.class)                         return BOOLEAN_IDX;\n-        if (cl == char.class)                            return CHAR_IDX;\n-        if (cl == long.class)                            return LONG_IDX;\n+        if (cl == int.class)                             return INT_PRIMITIVE_IDX;\n+        if (cl == boolean.class)                         return BOOL_PRIMITIVE_IDX;\n+        if (cl == char.class)                            return CHAR_PRIMITIVE_IDX;\n+        if (cl == long.class)                            return LONG_PRIMITIVE_IDX;\n+        if (cl == Boolean.class)                         return BOOLEAN_IDX;\n+        if (cl == Integer.class)                         return INTEGER_IDX;\n+        if (cl == Long.class)                            return LONG_IDX;\n@@ -837,1 +868,1 @@\n-                    methodType(long.class, long.class, Wrapper.asPrimitiveType(cl))).rebind();\n+                    methodType(long.class, long.class, cl)).rebind();\n@@ -1022,1 +1053,1 @@\n-        if (t == Object.class) {\n+        if (t == Object.class && t != Boolean.class && t != Integer.class && t != Long.class) {\n@@ -1053,1 +1084,0 @@\n-        static final ClassDesc STRING_BUILDER = ClassDesc.ofDescriptor(\"Ljava\/lang\/StringBuilder;\");\n@@ -1056,10 +1086,25 @@\n-        static final MethodTypeDesc APPEND_BOOLEAN_TYPE = MethodTypeDesc.of(STRING_BUILDER, ConstantDescs.CD_boolean);\n-        static final MethodTypeDesc APPEND_CHAR_TYPE = MethodTypeDesc.of(STRING_BUILDER, ConstantDescs.CD_char);\n-        static final MethodTypeDesc APPEND_DOUBLE_TYPE = MethodTypeDesc.of(STRING_BUILDER, ConstantDescs.CD_double);\n-        static final MethodTypeDesc APPEND_FLOAT_TYPE = MethodTypeDesc.of(STRING_BUILDER, ConstantDescs.CD_float);\n-        static final MethodTypeDesc APPEND_INT_TYPE = MethodTypeDesc.of(STRING_BUILDER, ConstantDescs.CD_int);\n-        static final MethodTypeDesc APPEND_LONG_TYPE = MethodTypeDesc.of(STRING_BUILDER, ConstantDescs.CD_long);\n-        static final MethodTypeDesc APPEND_OBJECT_TYPE = MethodTypeDesc.of(STRING_BUILDER, ConstantDescs.CD_Object);\n-        static final MethodTypeDesc APPEND_STRING_TYPE = MethodTypeDesc.of(STRING_BUILDER, ConstantDescs.CD_String);\n-        static final MethodTypeDesc INT_CONSTRUCTOR_TYPE = MethodTypeDesc.of(ConstantDescs.CD_void, ConstantDescs.CD_int);\n-        static final MethodTypeDesc TO_STRING_TYPE = MethodTypeDesc.of(ConstantDescs.CD_String);\n+        static final ClassDesc CD_StringConcatHelper = ClassDesc.ofDescriptor(\"Ljava\/lang\/StringConcatHelper;\");\n+        static final ClassDesc CD_byteArray = ClassDesc.ofDescriptor(\"[B\");\n+        static final MethodTypeDesc OBJECT_TO_STRING = MethodTypeDesc.of(CD_String, CD_Object);\n+        static final MethodTypeDesc FLOAT_TO_STRING = MethodTypeDesc.of(CD_String, CD_float);\n+        static final MethodTypeDesc DOUBLE_TO_STRING = MethodTypeDesc.of(CD_String, CD_double);\n+        static final MethodTypeDesc NEW_ARRAY_SUFFIX = MethodTypeDesc.of(CD_byteArray, CD_String, CD_long);\n+        static final MethodTypeDesc NEW_STRING = MethodTypeDesc.of(CD_String, CD_byteArray, CD_long);\n+\n+        static final MethodTypeDesc Mix_int = MethodTypeDesc.of(CD_long, CD_long, CD_int);\n+        static final MethodTypeDesc MIX_long = MethodTypeDesc.of(CD_long, CD_long, CD_long);\n+        static final MethodTypeDesc Mix_boolean = MethodTypeDesc.of(CD_long, CD_long, CD_boolean);\n+        static final MethodTypeDesc Mix_char = MethodTypeDesc.of(CD_long, CD_long, CD_char);\n+        static final MethodTypeDesc Mix_String = MethodTypeDesc.of(CD_long, CD_long, CD_String);\n+        static final MethodTypeDesc Mix_Boolean = MethodTypeDesc.of(CD_long, CD_long, CD_Boolean);\n+        static final MethodTypeDesc Mix_Integer = MethodTypeDesc.of(CD_long, CD_long, CD_Integer);\n+        static final MethodTypeDesc Mix_Long = MethodTypeDesc.of(CD_long, CD_long, CD_Long);\n+\n+        static final MethodTypeDesc PREPEND_int = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_int, CD_String);\n+        static final MethodTypeDesc PREPEND_long = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_long, CD_String);\n+        static final MethodTypeDesc PREPEND_boolean = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_boolean, CD_String);\n+        static final MethodTypeDesc PREPEND_char = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_char, CD_String);\n+        static final MethodTypeDesc PREPEND_String = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_String, CD_String);\n+        static final MethodTypeDesc PREPEND_Boolean = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_Boolean, CD_String);\n+        static final MethodTypeDesc PREPEND_Integer = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_Integer, CD_String);\n+        static final MethodTypeDesc PREPEND_Long = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_Long, CD_String);\n@@ -1080,1 +1125,2 @@\n-            String className = getClassName(lookup.lookupClass());\n+            lookup = MethodHandles.Lookup.IMPL_LOOKUP;\n+            String className = getClassName(String.class);\n@@ -1093,4 +1139,3 @@\n-                Lookup hiddenLookup = lookup.makeHiddenClassDefiner(className, classBytes, SET_OF_STRONG, DUMPER)\n-                                            .defineClassAsLookup(true);\n-                Class<?> innerClass = hiddenLookup.lookupClass();\n-                return hiddenLookup.findStatic(innerClass, METHOD_NAME, args);\n+                var hiddenClass = lookup.makeHiddenClassDefiner(className, classBytes, SET_OF_STRONG, DUMPER)\n+                        .defineClass(true, null);\n+                return lookup.findStatic(hiddenClass, METHOD_NAME, args);\n@@ -1102,0 +1147,43 @@\n+        \/**\n+         * Generate InlineCopy-based code. <p>\n+         *\n+         * The following is an example of the generated target code:\n+         *\n+         * <blockquote><pre>\n+         * import static java.lang.StringConcatHelper.mix;\n+         * import static java.lang.StringConcatHelper.prepend;\n+         * import static java.lang.StringConcatHelper.newString;\n+         * import static java.lang.StringConcatHelper.newArray;\n+         *\n+         * public static String concat(int arg0, long arg1, boolean arg2, char arg3, String arg4, float arg5, double arg6, Object arg7) {\n+         *     String constant0, constant1, ..., constant8;\n+         *     int lengthCoder = ...;\n+         *\n+         *     \/\/ String arg\n+         *     arg4 = stringOf(arg4);\n+         *\n+         *     \/\/ Types other than byte\/short\/int\/long\/boolean\/String require a local variable to store\n+         *     String str5 = stringOf(arg5);\n+         *     String str6 = stringOf(arg6);\n+         *     String str7 = stringOf(arg7);\n+         *\n+         *     lengthCoder = mix(mix(mix(mix(\n+         *                   mix(mix(mix(mix(engthCoder,\n+         *                       str7), str6), str5), arg4),\n+         *                       arg3), arg2), arg1), arg0);\n+         *\n+         *     String suffix = constant9;\n+         *     lengthCoder -= suffix.length();\n+         *     byte[] buf = newArray(suffix, lengthCoder);\n+         *\n+         *     lengthCoder = prepend(prepend(prepend(prepend(\n+         *                   prepend(prepend(prepend(prepend(lengthCoder,\n+         *                        buf, str7, constant7), buf, str6, constant6),\n+         *                        buf, str5, constant5), buf, arg4, constant4),\n+         *                        buf, arg3, constant3), buf, arg2, constant2),\n+         *                        buf, arg1, constant1), buf, arg0, constant0);\n+         *\n+         *     return newArray(buf, lengthCoder);\n+         * }\n+         * <\/pre><\/blockquote>\n+         *\/\n@@ -1106,4 +1194,1 @@\n-                    cb.new_(STRING_BUILDER);\n-                    cb.dup();\n-\n-                    int len = 0;\n+                    long initalLengthCoder = JLA.stringConcatInitialCoder();\n@@ -1112,1 +1197,1 @@\n-                            len += constant.length();\n+                            initalLengthCoder = JLA.stringConcatMix(initalLengthCoder, constant);\n@@ -1115,11 +1200,44 @@\n-                    len += args.parameterCount() * ARGUMENT_SIZE_FACTOR;\n-                    cb.loadConstant(len);\n-                    cb.invokespecial(STRING_BUILDER, \"<init>\", INT_CONSTRUCTOR_TYPE);\n-\n-                    \/\/ At this point, we have a blank StringBuilder on stack, fill it in with .append calls.\n-                    {\n-                        int off = 0;\n-                        for (int c = 0; c < args.parameterCount(); c++) {\n-                            if (constants[c] != null) {\n-                                cb.ldc(constants[c]);\n-                                cb.invokevirtual(STRING_BUILDER, \"append\", APPEND_STRING_TYPE);\n+\n+                    int paramCount = args.parameterCount();\n+\n+                    \/\/ Compute parameter and local string variable slots\n+                    int   paramSlotsTotalSize = 0;\n+                    int[] paramSlots          = new int[paramCount];\n+                    for (int i = 0; i < paramCount; i++) {\n+                        Class<?> cl = args.parameterType(i);\n+                        TypeKind kind = TypeKind.from(cl);\n+                        paramSlots[i] = paramSlotsTotalSize;\n+                        paramSlotsTotalSize += kind.slotSize();\n+                    }\n+\n+                    int lengthCoderSlot = paramSlotsTotalSize;\n+                    int bufSlot         = paramSlotsTotalSize + 2;\n+\n+                    \/*\n+                     * store string variants:\n+                     *\n+                     * str0 = Float.toString(args(0));\n+                     * str1 = Double.toString(args(1));\n+                     * ...\n+                     * strN = StringConcatHelper.stringOf(args(N));\n+                     *\n+                     *\/\n+                    for (int i = 0, strings = 0; i < paramCount; i++) {\n+                        Class<?> cl = args.parameterType(i);\n+                        TypeKind kind = TypeKind.from(cl);\n+                        if (needStringOf(cl)) {\n+                            ClassDesc classDesc;\n+                            MethodTypeDesc methodTypeDesc;\n+                            String methodName;\n+                            if (cl == float.class) {\n+                                classDesc = CD_Float;\n+                                methodName = \"toString\";\n+                                methodTypeDesc = FLOAT_TO_STRING;\n+                            } else if (cl == double.class) {\n+                                classDesc = CD_Double;\n+                                methodName = \"toString\";\n+                                methodTypeDesc = DOUBLE_TO_STRING;\n+                            } else {\n+                                classDesc = CD_StringConcatHelper;\n+                                methodName = \"stringOf\";\n+                                methodTypeDesc = OBJECT_TO_STRING;\n@@ -1127,6 +1245,102 @@\n-                            Class<?> cl = args.parameterType(c);\n-                            TypeKind kind = TypeKind.from(cl);\n-                            cb.loadLocal(kind, off);\n-                            off += kind.slotSize();\n-                            MethodTypeDesc desc = getSBAppendDesc(cl);\n-                            cb.invokevirtual(STRING_BUILDER, \"append\", desc);\n+\n+                            \/\/ Types other than byte\/short\/int\/long\/boolean\/String require a local variable to store\n+                            int strLocalSlot = (cl == String.class)\n+                                    ? paramSlots[i]\n+                                    : bufSlot + (++strings);\n+                            cb.loadLocal(kind, paramSlots[i])\n+                              .invokestatic(classDesc, methodName, methodTypeDesc)\n+                              .astore(strLocalSlot);\n+                            if (cl != String.class) {\n+                                paramSlots[i] = strLocalSlot;\n+                            }\n+                        }\n+                    }\n+\n+                    \/*\n+                     * Store init index :\n+                     *\n+                     *  lengthCoder = mix(mix(mix(mix(initalIengthCoder, argN), ..., arg2), arg1), 0);\n+                     *  ...\n+                     *\n+                     *\/\n+                    cb.loadConstant(initalLengthCoder);\n+                    for (int i = paramCount - 1; i >= 0; i--) {\n+                        Class<?> cl = args.parameterType(i);\n+                        TypeKind kind = TypeKind.from(cl);\n+                        int paramSlot = paramSlots[i];\n+\n+                        ClassDesc classDesc = CD_StringConcatHelper;\n+                        MethodTypeDesc methodTypeDesc;\n+                        if (cl == byte.class || cl == short.class || cl == int.class) {\n+                            classDesc = CD_Integer;\n+                            methodTypeDesc = Mix_int;\n+                        } else if (cl == long.class) {\n+                            classDesc = CD_Long;\n+                            methodTypeDesc = MIX_long;\n+                        } else if (cl == boolean.class) {\n+                            methodTypeDesc = Mix_boolean;\n+                        } else if (cl == char.class) {\n+                            methodTypeDesc = Mix_char;\n+                        } else if (cl == Boolean.class) {\n+                            methodTypeDesc = Mix_Boolean;\n+                        } else if (cl == Integer.class) {\n+                            methodTypeDesc = Mix_Integer;\n+                        } else if (cl == Long.class) {\n+                            methodTypeDesc = Mix_Long;\n+                        } else {\n+                            methodTypeDesc = Mix_String;\n+                            kind = TypeKind.from(String.class);\n+                        }\n+                        cb.loadLocal(kind, paramSlot)\n+                          .invokestatic(CD_StringConcatHelper, \"mix\", methodTypeDesc);\n+                    }\n+                    cb.lstore(lengthCoderSlot);\n+\n+                    String suffix = constants[constants.length - 1];\n+                    if (suffix == null) {\n+                        suffix = \"\";\n+                    }\n+                    if (!suffix.isEmpty()) {\n+                        cb.lload(lengthCoderSlot)\n+                          .ldc((long) suffix.length())\n+                          .lsub()\n+                          .lstore(lengthCoderSlot);\n+                    }\n+\n+                    \/*\n+                     * Allocate buffer :\n+                     *  buf = StringConcatHelper.newArray(suffix, lengthCoder)\n+                     *\/\n+                    cb.ldc(suffix)\n+                      .lload(lengthCoderSlot)\n+                      .invokestatic(CD_StringConcatHelper, \"newArrayWithSuffix\", NEW_ARRAY_SUFFIX)\n+                      .astore(bufSlot);\n+\n+                    \/*\n+                     * prepend arguments :\n+                     *  lengthCoder = prepend(prepend(prepend(lengthCoder, buf, arg0), buf, arg1), ...)\n+                     *\/\n+                    cb.lload(lengthCoderSlot);\n+                    for (int i = paramCount - 1; i >= 0; i--) {\n+                        int paramSlot = paramSlots[i];\n+                        Class<?> cl = args.parameterType(i);\n+                        TypeKind kind = TypeKind.from(cl);\n+\n+                        MethodTypeDesc methodTypeDesc;\n+                        if (cl == byte.class || cl == short.class || cl == int.class) {\n+                            methodTypeDesc = PREPEND_int;\n+                        } else if (cl == long.class) {\n+                            methodTypeDesc = PREPEND_long;\n+                        } else if (cl == boolean.class) {\n+                            methodTypeDesc = PREPEND_boolean;\n+                        } else if (cl == char.class) {\n+                            methodTypeDesc = PREPEND_char;\n+                        } else if (cl == Boolean.class) {\n+                            methodTypeDesc = PREPEND_Boolean;\n+                        } else if (cl == Integer.class) {\n+                            methodTypeDesc = PREPEND_Integer;\n+                        } else if (cl == Long.class) {\n+                            methodTypeDesc = PREPEND_Long;\n+                        } else {\n+                            methodTypeDesc = PREPEND_String;\n+                            kind = TypeKind.from(String.class);\n@@ -1134,3 +1348,3 @@\n-                        if (constants[constants.length - 1] != null) {\n-                            cb.ldc(constants[constants.length - 1]);\n-                            cb.invokevirtual(STRING_BUILDER, \"append\", APPEND_STRING_TYPE);\n+                        String constant = constants[i];\n+                        if (constant == null) {\n+                            constant = \"\";\n@@ -1138,0 +1352,4 @@\n+                        cb.aload(bufSlot)\n+                          .loadLocal(kind, paramSlot)\n+                          .ldc(constant)\n+                          .invokestatic(CD_StringConcatHelper, \"prepend\", methodTypeDesc);\n@@ -1139,0 +1357,1 @@\n+                    cb.lstore(lengthCoderSlot);\n@@ -1140,2 +1359,11 @@\n-                    cb.invokevirtual(STRING_BUILDER, \"toString\", TO_STRING_TYPE);\n-                    cb.areturn();\n+                    \/\/ return StringConcatHelper.newString(buf, lengthCoder));\n+                    cb.aload(bufSlot)\n+                      .lload(lengthCoderSlot)\n+                      .invokestatic(CD_StringConcatHelper, \"newString\", NEW_STRING)\n+                      .areturn();\n+                }\n+\n+                static boolean needStringOf(Class<?> cl) {\n+                    return cl != byte.class    && cl != short.class   && cl != int.class\n+                        && cl != long.class    && cl != boolean.class && cl != char.class\n+                        && cl != Boolean.class && cl != Integer.class && cl != Long.class;\n@@ -1156,24 +1384,0 @@\n-\n-        private static MethodTypeDesc getSBAppendDesc(Class<?> cl) {\n-            if (cl.isPrimitive()) {\n-                if (cl == Integer.TYPE || cl == Byte.TYPE || cl == Short.TYPE) {\n-                    return APPEND_INT_TYPE;\n-                } else if (cl == Boolean.TYPE) {\n-                    return APPEND_BOOLEAN_TYPE;\n-                } else if (cl == Character.TYPE) {\n-                    return APPEND_CHAR_TYPE;\n-                } else if (cl == Double.TYPE) {\n-                    return APPEND_DOUBLE_TYPE;\n-                } else if (cl == Float.TYPE) {\n-                    return APPEND_FLOAT_TYPE;\n-                } else if (cl == Long.TYPE) {\n-                    return APPEND_LONG_TYPE;\n-                } else {\n-                    throw new IllegalStateException(\"Unhandled primitive StringBuilder.append: \" + cl);\n-                }\n-            } else if (cl == String.class) {\n-                return APPEND_STRING_TYPE;\n-            } else {\n-                return APPEND_OBJECT_TYPE;\n-            }\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":302,"deletions":98,"binary":false,"changes":400,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n@@ -51,1 +52,2 @@\n-\n+    public Integer integerValue = intValue;\n+    public float floatValue = 156456.36435637F + intValue;\n@@ -53,1 +55,0 @@\n-\n@@ -55,1 +56,0 @@\n-\n@@ -57,1 +57,1 @@\n-\n+    public Boolean booleanValue = Boolean.TRUE;\n@@ -59,1 +59,0 @@\n-\n@@ -62,0 +61,10 @@\n+    @Benchmark\n+    public String concatConstBool() {\n+        return \"string\" + boolValue;\n+    }\n+\n+    @Benchmark\n+    public String concatConstBoolean() {\n+        return \"string\" + booleanValue;\n+    }\n+\n@@ -67,0 +76,10 @@\n+    @Benchmark\n+    public String concatConstInteger() {\n+        return \"string\" + integerValue;\n+    }\n+\n+    @Benchmark\n+    public String concatConstFloat() {\n+        return \"string\" + floatValue;\n+    }\n+\n@@ -97,0 +116,25 @@\n+    @Benchmark\n+    public String concatConstBoolString() {\n+        return \"string\" + boolValue + stringValue;\n+    }\n+\n+    @Benchmark\n+    public String concatConstBooleanString() {\n+        return \"string\" + booleanValue + stringValue;\n+    }\n+\n+    @Benchmark\n+    public String concatConstIntString() {\n+        return \"string\" + intValue + stringValue;\n+    }\n+\n+    @Benchmark\n+    public String concatConstIntegerString() {\n+        return \"string\" + integerValue + stringValue;\n+    }\n+\n+    @Benchmark\n+    public String concatConstFloatString() {\n+        return \"string\" + floatValue + stringValue;\n+    }\n+\n@@ -117,0 +161,25 @@\n+    @Benchmark\n+    public String concat3String() {\n+        return stringValue + stringValue + stringValue;\n+    }\n+\n+    @Benchmark\n+    public String concatStringBoolString() {\n+        return stringValue + boolValue + stringValue;\n+    }\n+\n+    @Benchmark\n+    public String concatStringBooleanString() {\n+        return stringValue + booleanValue + stringValue;\n+    }\n+\n+    @Benchmark\n+    public String concatStringIntString() {\n+        return stringValue + intValue + stringValue;\n+    }\n+\n+    @Benchmark\n+    public String concatStringIntegerString() {\n+        return stringValue + integerValue + stringValue;\n+    }\n+\n@@ -153,10 +222,10 @@\n-            f0=\"1\", f1=\"1\", f2=\"1\", f3=\"1\", f4=\"1\", f5=\"1\", f6=\"1\", f7=\"1\", f8=\"1\", f9=\"1\",\n-            f10=\"1\", f11=\"1\", f12=\"1\", f13=\"1\", f14=\"1\", f15=\"1\", f16=\"1\", f17=\"1\", f18=\"1\", f19=\"1\",\n-            f20=\"1\", f21=\"1\", f22=\"1\", f23=\"1\", f24=\"1\", f25=\"1\", f26=\"1\", f27=\"1\", f28=\"1\", f29=\"1\",\n-            f30=\"1\", f31=\"1\", f32=\"1\", f33=\"1\", f34=\"1\", f35=\"1\", f36=\"1\", f37=\"1\", f38=\"1\", f39=\"1\",\n-            f40=\"1\", f41=\"1\", f42=\"1\", f43=\"1\", f44=\"1\", f45=\"1\", f46=\"1\", f47=\"1\", f48=\"1\", f49=\"1\",\n-            f50=\"1\", f51=\"1\", f52=\"1\", f53=\"1\", f54=\"1\", f55=\"1\", f56=\"1\", f57=\"1\", f58=\"1\", f59=\"1\",\n-            f60=\"1\", f61=\"1\", f62=\"1\", f63=\"1\", f64=\"1\", f65=\"1\", f66=\"1\", f67=\"1\", f68=\"1\", f69=\"1\",\n-            f70=\"1\", f71=\"1\", f72=\"1\", f73=\"1\", f74=\"1\", f75=\"1\", f76=\"1\", f77=\"1\", f78=\"1\", f79=\"1\",\n-            f80=\"1\", f81=\"1\", f82=\"1\", f83=\"1\", f84=\"1\", f85=\"1\", f86=\"1\", f87=\"1\", f88=\"1\", f89=\"1\",\n-            f90=\"1\", f91=\"1\", f92=\"1\", f93=\"1\", f94=\"1\", f95=\"1\", f96=\"1\", f97=\"1\", f98=\"1\", f99=\"1\",\n+            f0 =\"1\",   f1=\"1\",  f2=\"1\",  f3=\"1\",  f4=\"1\",  f5=\"1\",  f6=\"1\",  f7=\"1\",  f8=\"1\",  f9=\"1\",\n+            f10=\"1\",  f11=\"1\", f12=\"1\", f13=\"1\", f14=\"1\", f15=\"1\", f16=\"1\", f17=\"1\", f18=\"1\", f19=\"1\",\n+            f20=\"1\",  f21=\"1\", f22=\"1\", f23=\"1\", f24=\"1\", f25=\"1\", f26=\"1\", f27=\"1\", f28=\"1\", f29=\"1\",\n+            f30=\"1\",  f31=\"1\", f32=\"1\", f33=\"1\", f34=\"1\", f35=\"1\", f36=\"1\", f37=\"1\", f38=\"1\", f39=\"1\",\n+            f40=\"1\",  f41=\"1\", f42=\"1\", f43=\"1\", f44=\"1\", f45=\"1\", f46=\"1\", f47=\"1\", f48=\"1\", f49=\"1\",\n+            f50=\"1\",  f51=\"1\", f52=\"1\", f53=\"1\", f54=\"1\", f55=\"1\", f56=\"1\", f57=\"1\", f58=\"1\", f59=\"1\",\n+            f60=\"1\",  f61=\"1\", f62=\"1\", f63=\"1\", f64=\"1\", f65=\"1\", f66=\"1\", f67=\"1\", f68=\"1\", f69=\"1\",\n+            f70=\"1\",  f71=\"1\", f72=\"1\", f73=\"1\", f74=\"1\", f75=\"1\", f76=\"1\", f77=\"1\", f78=\"1\", f79=\"1\",\n+            f80=\"1\",  f81=\"1\", f82=\"1\", f83=\"1\", f84=\"1\", f85=\"1\", f86=\"1\", f87=\"1\", f88=\"1\", f89=\"1\",\n+            f90=\"1\",  f91=\"1\", f92=\"1\", f93=\"1\", f94=\"1\", f95=\"1\", f96=\"1\", f97=\"1\", f98=\"1\", f99=\"1\",\n@@ -179,0 +248,9 @@\n+\n+    @Benchmark\n+    public String concat30Mix() {\n+        return f0 + \",\" + f1 + \",\"+ f2 + \",\"+  f3 + \",\"+  f4 + \",\"+  f5 + \",\"+  f6 + \",\"+  f7 + \",\"+  f8 + \",\"+  f9 + \",\"\n+              +f10 + \",\"+f11 + \",\"+f12 + \",\"+ f13 + \",\"+ f14 + \",\"+ f15 + \",\"+ f16 + \",\"+ f17 + \",\"+ f18 + \",\"+ f19 + \",\"\n+              +f20 + \",\"+f21 + \",\"+f22 + \",\" + boolValue + \",\" + booleanValue + \",\" + intValue + \",\" + integerValue\n+              + \",\" + floatValue + \",\" + byteValue + \",\" + objectValue;\n+    }\n+\n@@ -181,13 +259,42 @@\n-        return f0 + \",\"+ f1 + \",\"+ f2 + \",\"+ f3 + \",\"+ f4 + \",\"+ f5 + \",\"+ f6 + \",\"+ f7 + \",\"+ f8 + \",\"+ f9 + \",\"\n-                + f10 + \",\"+ f11 + \",\"+ f12 + \",\"+ f13 + \",\"+ f14 + \",\"+ f15 + \",\"+ f16 + \",\"+ f17 + \",\"+ f18 + \",\"+ f19 + \",\"\n-                + f20 + \",\"+ f21 + \",\"+ f22 + \",\"+ f23 + \",\"+ f24 + \",\"+ f25 + \",\"+ f26 + \",\"+ f27 + \",\"+ f28 + \",\"+ f29 + \",\"\n-                + f30 + \",\"+ f31 + \",\"+ f32 + \",\"+ f33 + \",\"+ f34 + \",\"+ f35 + \",\"+ f36 + \",\"+ f37 + \",\"+ f38 + \",\"+ f39 + \",\"\n-                + f40 + \",\"+ f41 + \",\"+ f42 + \",\"+ f43 + \",\"+ f44 + \",\"+ f45 + \",\"+ f46 + \",\"+ f47 + \",\"+ f48 + \",\"+ f49 + \",\"\n-                + f50 + \",\"+ f51 + \",\"+ f52 + \",\"+ f53 + \",\"+ f54 + \",\"+ f55 + \",\"+ f56 + \",\"+ f57 + \",\"+ f58 + \",\"+ f59 + \",\"\n-                + f60 + \",\"+ f61 + \",\"+ f62 + \",\"+ f63 + \",\"+ f64 + \",\"+ f65 + \",\"+ f66 + \",\"+ f67 + \",\"+ f68 + \",\"+ f69 + \",\"\n-                + f70 + \",\"+ f71 + \",\"+ f72 + \",\"+ f73 + \",\"+ f74 + \",\"+ f75 + \",\"+ f76 + \",\"+ f77 + \",\"+ f78 + \",\"+ f79 + \",\"\n-                + f80 + \",\"+ f81 + \",\"+ f82 + \",\"+ f83 + \",\"+ f84 + \",\"+ f85 + \",\"+ f86 + \",\"+ f87 + \",\"+ f88 + \",\"+ f89 + \",\"\n-                + f90 + \",\"+ f91 + \",\"+ f92 + \",\"+ f93 + \",\"+ f94 + \",\"+ f95 + \",\"+ f96 + \",\"+ f97 + \",\"+ f98 + \",\"+ f99 + \",\"\n-                +f100 + \",\"+f101 + \",\"+f102 + \",\"+f103 + \",\"+f104 + \",\"+f105 + \",\"+f106 + \",\"+f107 + \",\"+f108 + \",\"+f109 + \",\"\n-                +f110 + \",\"+f111 + \",\"+f112 + \",\"+f113 + \",\"+f114 + \",\"+f115 + \",\"+f116 + \",\"+f117 + \",\"+f118 + \",\"+f119 + \",\"\n-                +f120 + \",\"+f121 + \",\"+f122;\n+        return  f0 + \",\" +  f1 + \",\" + f2 + \",\" + f3 + \",\" + f4 + \",\" + f5 + \",\" + f6 + \",\" + f7 + \",\" + f8 + \",\" + f9 + \",\"\n+             + f10 + \",\" + f11 + \",\"+ f12 + \",\"+ f13 + \",\"+ f14 + \",\"+ f15 + \",\"+ f16 + \",\"+ f17 + \",\"+ f18 + \",\"+ f19 + \",\"\n+             + f20 + \",\" + f21 + \",\"+ f22 + \",\"+ f23 + \",\"+ f24 + \",\"+ f25 + \",\"+ f26 + \",\"+ f27 + \",\"+ f28 + \",\"+ f29 + \",\"\n+             + f30 + \",\" + f31 + \",\"+ f32 + \",\"+ f33 + \",\"+ f34 + \",\"+ f35 + \",\"+ f36 + \",\"+ f37 + \",\"+ f38 + \",\"+ f39 + \",\"\n+             + f40 + \",\" + f41 + \",\"+ f42 + \",\"+ f43 + \",\"+ f44 + \",\"+ f45 + \",\"+ f46 + \",\"+ f47 + \",\"+ f48 + \",\"+ f49 + \",\"\n+             + f50 + \",\" + f51 + \",\"+ f52 + \",\"+ f53 + \",\"+ f54 + \",\"+ f55 + \",\"+ f56 + \",\"+ f57 + \",\"+ f58 + \",\"+ f59 + \",\"\n+             + f60 + \",\" + f61 + \",\"+ f62 + \",\"+ f63 + \",\"+ f64 + \",\"+ f65 + \",\"+ f66 + \",\"+ f67 + \",\"+ f68 + \",\"+ f69 + \",\"\n+             + f70 + \",\" + f71 + \",\"+ f72 + \",\"+ f73 + \",\"+ f74 + \",\"+ f75 + \",\"+ f76 + \",\"+ f77 + \",\"+ f78 + \",\"+ f79 + \",\"\n+             + f80 + \",\" + f81 + \",\"+ f82 + \",\"+ f83 + \",\"+ f84 + \",\"+ f85 + \",\"+ f86 + \",\"+ f87 + \",\"+ f88 + \",\"+ f89 + \",\"\n+             + f90 + \",\" + f91 + \",\"+ f92 + \",\"+ f93 + \",\"+ f94 + \",\"+ f95 + \",\"+ f96 + \",\"+ f97 + \",\"+ f98 + \",\"+ f99 + \",\"\n+             +f100 + \",\" +f101 + \",\"+f102 + \",\"+f103 + \",\"+f104 + \",\"+f105 + \",\"+f106 + \",\"+f107 + \",\"+f108 + \",\"+f109 + \",\"\n+             +f110 + \",\" +f111 + \",\"+f112 + \",\"+f113 + \",\"+f114 + \",\"+f115 + \",\"+f116 + \",\"+f117 + \",\"+f118 + \",\"+f119 + \",\"\n+             +f120 + \",\" +f121 + \",\"+f122;\n+    }\n+\n+    @Benchmark\n+    public String concat13StringConst() {\n+        return f0  + f1  + f2  + f3 + f4\n+             + f5  + f6  + f7  + f8 + f9\n+             +f10 + f11 + f12 + \"\"\"\n+                A really long constant string. Such as a copyright header:\n+                 * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+                 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+                 *\n+                 * This code is free software; you can redistribute it and\/or modify it\n+                 * under the terms of the GNU General Public License version 2 only, as\n+                 * published by the Free Software Foundation.\n+                 *\n+                 * This code is distributed in the hope that it will be useful, but WITHOUT\n+                 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+                 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+                 * version 2 for more details (a copy is included in the LICENSE file that\n+                 * accompanied this code).\n+                 *\n+                 * You should have received a copy of the GNU General Public License version\n+                 * 2 along with this work; if not, write to the Free Software Foundation,\n+                 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+                 *\n+                 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+                 * or visit www.oracle.com if you need additional information or have any\n+                 * questions.\n+                \"\"\";\n@@ -198,1 +305,5 @@\n-        return f0 + f0 + f0 + f0 + f0 + f0 + f0 + f0 + f0 + f0 + f0 + f0 + f0 + f0 + f0 + f0 + f0 + f0 + f0 + f0 + f0 + f0 + f0 + \"\"\"\n+        return  f0 +  f1  + f2 +  f3 +  f4\n+             +  f5 +  f6  + f7 +  f8 +  f9\n+             + f10 + f11 + f12 + f13 + f14\n+             + f15 + f16 + f17 + f18 + f19\n+             + f20 + f21 + f22 + \"\"\"\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringConcat.java","additions":140,"deletions":29,"binary":false,"changes":169,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n@@ -30,0 +31,1 @@\n+import org.openjdk.jmh.annotations.Param;\n@@ -47,1 +49,7 @@\n-        String[] selection = new String[] { \"StringLarge\", \"MixedSmall\", \"StringSingle\", \"MixedLarge\" };\n+        String[] selection = {\n+                \"StringLarge\",\n+                \"MixedSmall\",\n+                \"StringSingle\",\n+                \"StringThree\",\n+                \"MixedLarge\"\n+        };\n@@ -53,1 +61,13 @@\n-                case \"StringSingle\" -> new StringSingle().run();\n+                case \"StringSingle\" -> {\n+                    new StringSingle().constInt();\n+                    new StringSingle().constFloat();\n+                    new StringSingle().constString();\n+                    new StringSingle().const2String();\n+                    new StringSingle().constIntString();\n+                    new StringSingle().constFloatString();\n+                    new StringSingle().constBooleanString();\n+                }\n+                case \"StringThree\" -> {\n+                    new StringThree().stringIntString();\n+                    new StringThree().stringIntegerString();\n+                }\n@@ -67,1 +87,7 @@\n-        public String s = \"foo\";\n+        @Param(\"4711\")\n+        public int intValue;\n+        public Integer integerValue = intValue;\n+        public float floatValue = 156456.36435637F + intValue;\n+        public String stringValue = String.valueOf(intValue);\n+        public boolean boolValue = true;\n+        public Boolean booleanValue = Boolean.TRUE;\n@@ -70,2 +96,56 @@\n-        public String run() {\n-            return \"\" + s;\n+        public String constBool() {\n+            return \"string\" + boolValue;\n+        }\n+\n+        @Benchmark\n+        public String constBoolean() {\n+            return \"string\" + booleanValue;\n+        }\n+\n+        @Benchmark\n+        public String constInt() {\n+            return \"string\" + intValue;\n+        }\n+\n+        @Benchmark\n+        public String constInteger() {\n+            return \"string\" + integerValue;\n+        }\n+\n+        @Benchmark\n+        public String constFloat() {\n+            return \"string\" + floatValue;\n+        }\n+\n+        @Benchmark\n+        public String constString() {\n+            return \"string\" + stringValue;\n+        }\n+\n+        public String const2String() {\n+            return \"string\" + stringValue + stringValue;\n+        }\n+\n+        @Benchmark\n+        public String constIntString() {\n+            return \"string\" + intValue + stringValue;\n+        }\n+\n+        @Benchmark\n+        public String constIntegerString() {\n+            return \"string\" + integerValue + stringValue;\n+        }\n+\n+        @Benchmark\n+        public String constFloatString() {\n+            return \"string\" + floatValue + stringValue;\n+        }\n+\n+        @Benchmark\n+        public String constBoolString() {\n+            return \"string\" + boolValue + stringValue;\n+        }\n+\n+        @Benchmark\n+        public String constBooleanString() {\n+            return \"string\" + booleanValue + stringValue;\n@@ -75,0 +155,21 @@\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    @State(Scope.Thread)\n+    @Fork(value = 40, warmups = 2)\n+    public static class StringThree {\n+\n+        @Param(\"4711\")\n+        public int intValue;\n+        public Integer integerValue = intValue;\n+        public String stringValue = String.valueOf(intValue);\n+\n+        @Benchmark\n+        public String stringIntString() {\n+            return stringValue + intValue + stringValue;\n+        }\n+\n+        @Benchmark\n+        public String stringIntegerString() {\n+            return stringValue + integerValue + stringValue;\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringConcatStartup.java","additions":106,"deletions":5,"binary":false,"changes":111,"status":"modified"}]}