{"files":[{"patch":"@@ -46,3 +46,3 @@\n-        @Stable String[] constants;\n-        @Stable int length;\n-        @Stable byte coder;\n+        @Stable final String[] constants;\n+        @Stable final int length;\n+        @Stable final byte coder;\n@@ -462,0 +462,140 @@\n+    \/**\n+     * Return the coder for the character.\n+     * @param value character\n+     * @return      coder\n+     *\/\n+    static byte stringCoder(char value) {\n+        return StringLatin1.canEncode(value) ? String.LATIN1 : String.UTF16;\n+    }\n+\n+    \/**\n+     * append the stringly representation of value into buffer,\n+     * given the coder and final index. Index is measured in chars, not in bytes!\n+     *\n+     * @param index     final char index in the buffer\n+     * @param coder     coder of the buffer\n+     * @param buf       buffer to append to\n+     * @param value     boolean value to encode\n+     * @return          updated index\n+     *\/\n+    static int append(int index, byte coder, byte[] buf, boolean value, String suffix) {\n+        if (coder == String.LATIN1) {\n+            if (value) {\n+                buf[index] = 't';\n+                buf[index + 1] = 'r';\n+                buf[index + 2] = 'u';\n+                buf[index + 3] = 'e';\n+                index += 4;\n+            } else {\n+                buf[index] = 'f';\n+                buf[index + 1] = 'a';\n+                buf[index + 2] = 'l';\n+                buf[index + 3] = 's';\n+                buf[index + 4] = 'e';\n+                index += 5;\n+            }\n+        } else {\n+            if (value) {\n+                StringUTF16.putChar(buf, index, 't');\n+                StringUTF16.putChar(buf, index + 1, 'r');\n+                StringUTF16.putChar(buf, index + 2, 'u');\n+                StringUTF16.putChar(buf, index + 3, 'e');\n+                index += 4;\n+            } else {\n+                StringUTF16.putChar(buf, index, 'f');\n+                StringUTF16.putChar(buf, index + 1, 'a');\n+                StringUTF16.putChar(buf, index + 2, 'l');\n+                StringUTF16.putChar(buf, index + 3, 's');\n+                StringUTF16.putChar(buf, index + 4, 'e');\n+                index += 5;\n+            }\n+        }\n+        suffix.getBytes(buf, index, coder);\n+        return index + suffix.length();\n+    }\n+\n+    \/**\n+     * append the stringly representation of value into buffer,\n+     * given the coder and final index. Index is measured in chars, not in bytes!\n+     *\n+     * @param index     final char index in the buffer\n+     * @param coder     coder of the buffer\n+     * @param buf       buffer to append to\n+     * @param value     char value to encode\n+     * @return          updated index\n+     *\/\n+    static int append(int index, byte coder, byte[] buf, char value, String suffix) {\n+        if (coder == String.LATIN1) {\n+            buf[index] = (byte) value;\n+        } else {\n+            StringUTF16.putChar(buf, index, value);\n+        }\n+        suffix.getBytes(buf, ++index, coder);\n+        return index + suffix.length();\n+    }\n+\n+    \/**\n+     * append the value into buffer,\n+     * given the coder and final index. Index is measured in chars, not in bytes!\n+     *\n+     * @param index     final char index in the buffer\n+     * @param coder     coder of the buffer\n+     * @param buf       buffer to append to\n+     * @param value     String value\n+     * @param size      stringSize of value\n+     * @return          updated index\n+     *\/\n+    static int append(int index, byte coder, byte[] buf, String value, String suffix) {\n+        if (coder == String.LATIN1) {\n+            value.getBytes(buf, index, String.LATIN1);\n+        } else {\n+            value.getBytes(buf, index, String.UTF16);\n+        }\n+        index += value.length();\n+        suffix.getBytes(buf, index, coder);\n+        return index + suffix.length();\n+    }\n+\n+    \/**\n+     * append the stringly representation of value into buffer,\n+     * given the coder and final index. Index is measured in chars, not in bytes!\n+     *\n+     * @param index     final char index in the buffer\n+     * @param coder     coder of the buffer\n+     * @param buf       buffer to append to\n+     * @param value     int value to encode\n+     * @param size      stringSize of value\n+     * @return          updated index\n+     *\/\n+    static int append(int index, byte coder, byte[] buf, int value, int size, String suffix) {\n+        index += size;\n+        if (coder == String.LATIN1) {\n+            StringLatin1.getChars(value, index, buf);\n+        } else {\n+            StringUTF16.getChars(value, index, buf);\n+        }\n+        suffix.getBytes(buf, index, coder);\n+        return index + suffix.length();\n+    }\n+\n+    \/**\n+     * append the stringly representation of value into buffer,\n+     * given the coder and final index. Index is measured in chars, not in bytes!\n+     *\n+     * @param index     final char index in the buffer\n+     * @param coder     coder of the buffer\n+     * @param buf       buffer to append to\n+     * @param value     long value to encode\n+     * @param size      stringSize of value\n+     * @return          updated index\n+     *\/\n+    static int append(int index, byte coder, byte[] buf, long value, int size, String suffix) {\n+        index += size;\n+        if (coder == String.LATIN1) {\n+            StringLatin1.getChars(value, index, buf);\n+        } else {\n+            StringUTF16.getChars(value, index, buf);\n+        }\n+        suffix.getBytes(buf, index, coder);\n+        return index + suffix.length();\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":143,"deletions":3,"binary":false,"changes":146,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.lang.classfile.Label;\n@@ -1069,3 +1070,0 @@\n-        static final String LENGTH = \"length\";\n-        static final String CODER = \"coder\";\n-        static final String CONSTANTS = \"constants\";\n@@ -1075,0 +1073,1 @@\n+        static final ClassDesc CD_DecimalDigits = ClassDesc.ofDescriptor(\"Ljdk\/internal\/util\/DecimalDigits;\");\n@@ -1078,4 +1077,0 @@\n-        static final MethodTypeDesc ARRAY_STRING_TO_VOID = MethodTypeDesc.of(CD_void, CD_Array_String);\n-        static final MethodTypeDesc FLOAT_TO_STRING  = MethodTypeDesc.of(CD_String, CD_float);\n-        static final MethodTypeDesc DOUBLE_TO_STRING = MethodTypeDesc.of(CD_String, CD_double);\n-        static final MethodTypeDesc OBJECT_TO_STRING = MethodTypeDesc.of(CD_String, CD_Object);\n@@ -1083,16 +1078,19 @@\n-        static final MethodTypeDesc NEW_ARRAY_SUFFIX = MethodTypeDesc.of(CD_Array_byte, CD_String, CD_long);\n-        static final MethodTypeDesc NEW_STRING       = MethodTypeDesc.of(CD_String, CD_Array_byte, CD_long);\n-\n-        static final MethodTypeDesc MTD_int     = MethodTypeDesc.of(CD_int);\n-\n-        static final MethodTypeDesc MIX_int     = MethodTypeDesc.of(CD_long, CD_long, CD_int);\n-        static final MethodTypeDesc MIX_long    = MethodTypeDesc.of(CD_long, CD_long, CD_long);\n-        static final MethodTypeDesc MIX_boolean = MethodTypeDesc.of(CD_long, CD_long, CD_boolean);\n-        static final MethodTypeDesc MIX_char    = MethodTypeDesc.of(CD_long, CD_long, CD_char);\n-        static final MethodTypeDesc MIX_String  = MethodTypeDesc.of(CD_long, CD_long, CD_String);\n-\n-        static final MethodTypeDesc PREPEND_int     = MethodTypeDesc.of(CD_long, CD_long, CD_Array_byte, CD_int, CD_String);\n-        static final MethodTypeDesc PREPEND_long    = MethodTypeDesc.of(CD_long, CD_long, CD_Array_byte, CD_long, CD_String);\n-        static final MethodTypeDesc PREPEND_boolean = MethodTypeDesc.of(CD_long, CD_long, CD_Array_byte, CD_boolean, CD_String);\n-        static final MethodTypeDesc PREPEND_char    = MethodTypeDesc.of(CD_long, CD_long, CD_Array_byte, CD_char, CD_String);\n-        static final MethodTypeDesc PREPEND_String  = MethodTypeDesc.of(CD_long, CD_long, CD_Array_byte, CD_String, CD_String);\n+        static final MethodTypeDesc MTD_byte_char     = MethodTypeDesc.of(CD_byte, CD_char);\n+        static final MethodTypeDesc MTD_byte          = MethodTypeDesc.of(CD_byte);\n+        static final MethodTypeDesc MTD_int           = MethodTypeDesc.of(CD_int);\n+        static final MethodTypeDesc MTD_int_int       = MethodTypeDesc.of(CD_int, CD_int);\n+        static final MethodTypeDesc MTD_int_long      = MethodTypeDesc.of(CD_int, CD_long);\n+        static final MethodTypeDesc MTD_String_float  = MethodTypeDesc.of(CD_String, CD_float);\n+        static final MethodTypeDesc MTD_String_double = MethodTypeDesc.of(CD_String, CD_double);\n+        static final MethodTypeDesc MTD_String_Object = MethodTypeDesc.of(CD_String, CD_Object);\n+\n+        static final MethodTypeDesc MTD_GET_BYTES   = MethodTypeDesc.of(CD_void, CD_Array_byte, CD_int, CD_byte);\n+        static final MethodTypeDesc MTD_INIT        = MethodTypeDesc.of(CD_void, CD_Array_String);\n+        static final MethodTypeDesc MTD_NEW_ARRAY   = MethodTypeDesc.of(CD_Array_byte, CD_int);\n+        static final MethodTypeDesc MTD_STRING_INIT = MethodTypeDesc.of(CD_void, CD_Array_byte, CD_byte);\n+\n+        static final MethodTypeDesc APPEND_int     = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_Array_byte, CD_int, CD_int, CD_String);\n+        static final MethodTypeDesc APPEND_long    = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_Array_byte, CD_long, CD_int, CD_String);\n+        static final MethodTypeDesc APPEND_boolean = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_Array_byte, CD_boolean, CD_String);\n+        static final MethodTypeDesc APPEND_char    = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_Array_byte, CD_char, CD_String);\n+        static final MethodTypeDesc APPEND_String  = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_Array_byte, CD_String, CD_String);\n@@ -1105,4 +1103,4 @@\n-                cb.aload(thisSlot);\n-                cb.aload(constantsSlot);\n-                cb.invokespecial(CD_StringConcatBase, INIT_NAME, ARRAY_STRING_TO_VOID, false);\n-                cb.return_();\n+                cb.aload(thisSlot)\n+                  .aload(constantsSlot)\n+                  .invokespecial(CD_StringConcatBase, INIT_NAME, MTD_INIT, false)\n+                  .return_();\n@@ -1161,1 +1159,1 @@\n-                                        ARRAY_STRING_TO_VOID,\n+                                        MTD_INIT,\n@@ -1163,2 +1161,1 @@\n-                                        CONSTRUCTOR_BUILDER\n-                                )\n+                                        CONSTRUCTOR_BUILDER)\n@@ -1205,1 +1202,3 @@\n-         *     long lengthCoder = this.length + (this.coder << 32L);\n+         *     int length = this.length();\n+         *     int coder = this.coder();\n+         *     String[] constants = this.constants;\n@@ -1209,0 +1208,3 @@\n+         *     arg5 = stringOf(arg5);\n+         *     arg6 = stringOf(arg6);\n+         *     arg7 = stringOf(arg7);\n@@ -1211,3 +1213,9 @@\n-         *     String str5 = stringOf(arg5);\n-         *     String str6 = stringOf(arg6);\n-         *     String str7 = stringOf(arg7);\n+         *     arg5 stringOf(arg5);\n+         *     arg5 stringOf(arg6);\n+         *     arg = stringOf(arg7);\n+         *\n+         *     length += DecimalDigits.stringSize(arg0);\n+         *     length += DecimalDigits.stringSize(arg1);\n+         *     length += arg2 ? 4 : 5;\n+         *     length ++; \/\/ char\n+         *     length += arg4.length() + arg5.length() + arg6.length() + arg7.length();\n@@ -1215,4 +1223,1 @@\n-         *     lengthCoder = mix(mix(mix(mix(\n-         *                   mix(mix(mix(mix(lengthCoder,\n-         *                       str7), str6), str5), arg4),\n-         *                       arg3), arg2), arg1), arg0);\n+         *     coder |= arg4.coder() | arg7.coder(); \/\/ arg5 and arg6 is not maybeUTF16\n@@ -1220,3 +1225,1 @@\n-         *     String suffix = constant[8];\n-         *     lengthCoder -= suffix.length();\n-         *     byte[] buf = newArray(suffix, lengthCoder);\n+         *     byte[] buf = newArray(length << coder);\n@@ -1224,2 +1227,4 @@\n-         *     lengthCoder = prepend(prepend(prepend(prepend(\n-         *                   prepend(prepend(prepend(prepend(lengthCoder,\n+         *     constants[0].getBytes(buf, 0, coder);\n+         *     length = constants[0].length();\n+         *     length = apppend(apppend(apppend(apppend(\n+         *                   apppend(apppend(apppend(apppend(length,\n@@ -1231,1 +1236,1 @@\n-         *     return newArray(buf, lengthCoder);\n+         *     return new String(buf, coder);\n@@ -1242,2 +1247,5 @@\n-                    int   nextSlot = 1;\n-                    int[] paramSlots          = new int[paramCount];\n+                    int thisSloat = 0,\n+                        nextSlot  = 1;\n+                    int[] paramSlots  = new int[paramCount],\n+                          sizeSlots   = new int[paramCount],\n+                          stringSlots = new int[paramCount];\n@@ -1245,2 +1253,0 @@\n-                        Class<?> cl = args.parameterType(i);\n-                        TypeKind kind = TypeKind.from(cl);\n@@ -1248,13 +1254,10 @@\n-                        nextSlot += kind.slotSize();\n-\n-                        \/*\n-                         * Stringify by storing String variants in\n-                         * repurposed argument slots:\n-                         *\n-                         * arg0 = Float.toString(args0);\n-                         * arg1 = Double.toString(arg1);\n-                         * ...\n-                         * argN = StringConcatHelper.stringOf(argN);\n-                         *\n-                         *\n-                         *\/\n+                        nextSlot     += TypeKind.from(args.parameterType(i)).slotSize();\n+                    }\n+\n+                    for (int i = 0; i < paramCount; i++) {\n+                        var cl = args.parameterType(i);\n+\n+                        \/\/ If the type is int\/long, use a local variable to save the size.\n+                        if (cl == int.class || cl == long.class) {\n+                            sizeSlots[i] = nextSlot++;\n+                        }\n@@ -1262,0 +1265,82 @@\n+                            stringSlots[i] = nextSlot++;\n+                        }\n+                    }\n+\n+                    int lengthSlot    = nextSlot;\n+                    int coderSlot     = nextSlot + 1;\n+                    int bufSlot       = nextSlot + 2;\n+                    int constantsSlot = nextSlot + 3;\n+\n+                    \/*\n+                     * Store init length and coder :\n+                     *  int length         = this.length();\n+                     *  int coder          = this.coder();\n+                     *  String[] constants = this.constants;\n+                     *\/\n+                    cb.aload(thisSloat)\n+                      .getfield(concatClass, \"length\", CD_int)\n+                      .istore(lengthSlot);\n+                    cb.aload(thisSloat)\n+                      .getfield(concatClass, \"coder\", CD_byte)\n+                      .istore(coderSlot);\n+                    cb.aload(thisSloat)\n+                      .getfield(concatClass, \"constants\", CD_Array_String)\n+                      .astore(constantsSlot);\n+\n+                    for (int i = 0; i < paramCount; i++) {\n+                        var cl   = args.parameterType(i);\n+                        var kind = TypeKind.from(cl);\n+                        if (cl == int.class) {\n+                            \/*\n+                             * sizeN = DecimalDigits.stringSize(argN);\n+                             * length = sizeN + length;\n+                             *\/\n+                            cb.loadLocal(kind, paramSlots[i])\n+                              .invokestatic(CD_DecimalDigits, \"stringSize\", MTD_int_int)\n+                              .dup()\n+                              .istore(sizeSlots[i])\n+                              .iload(lengthSlot)\n+                              .iadd()\n+                              .istore(lengthSlot);\n+                        } else if (cl == long.class) {\n+                            \/*\n+                             * sizeN = DecimalDigits.stringSize(argN);\n+                             * length = sizeN + length;\n+                             *\/\n+                            cb.loadLocal(kind, paramSlots[i])\n+                              .invokestatic(CD_DecimalDigits, \"stringSize\", MTD_int_long)\n+                              .dup()\n+                              .istore(sizeSlots[i])\n+                              .iload(lengthSlot)\n+                              .iadd()\n+                              .istore(lengthSlot);\n+                        } else if (cl == boolean.class) {\n+                            \/*\n+                             * length = (argN ? 4 : 5) + length;\n+                             *\/\n+                            Label L0 = cb.newLabel(), L1 = cb.newLabel();\n+                            cb.iload(paramSlots[i])\n+                              .ifeq(L0)\n+                              .ldc(5)\n+                              .goto_(L1)\n+                              .labelBinding(L0)\n+                              .ldc(4)\n+                              .labelBinding(L1)\n+                              .iload(lengthSlot)\n+                              .iadd()\n+                              .istore(lengthSlot);\n+                        } else if (cl == char.class) {\n+                            \/*\n+                             * length += 1;\n+                             *\/\n+                            cb.iinc(lengthSlot, 1);\n+                            \/*\n+                             * coder = StringConcatHelper.stringCoder(argN) | coder;\n+                             *\/\n+                            cb.loadLocal(kind, paramSlots[i])\n+                              .invokestatic(CD_StringConcatHelper, \"stringCoder\", MTD_byte_char)\n+                              .iload(coderSlot)\n+                              .ior()\n+                              .istore(coderSlot)\n+                            ;\n+                        } else {\n@@ -1268,1 +1353,1 @@\n-                                methodTypeDesc = FLOAT_TO_STRING;\n+                                methodTypeDesc = MTD_String_float;\n@@ -1272,1 +1357,1 @@\n-                                methodTypeDesc = DOUBLE_TO_STRING;\n+                                methodTypeDesc = MTD_String_double;\n@@ -1276,1 +1361,1 @@\n-                                methodTypeDesc = OBJECT_TO_STRING;\n+                                methodTypeDesc = MTD_String_Object;\n@@ -1280,2 +1365,24 @@\n-                              .invokestatic(classDesc, methodName, methodTypeDesc)\n-                              .astore(paramSlots[i]);\n+                              .invokestatic(classDesc, methodName, methodTypeDesc);\n+                            if (maybyUTF16(cl)) {\n+                                \/*\n+                                 * coder = str.coder() | length;\n+                                 *\/\n+                                cb.dup()\n+                                  .invokevirtual(CD_String, \"coder\", MTD_byte)\n+                                  .iload(coderSlot)\n+                                  .ior()\n+                                  .istore(coderSlot);\n+                            }\n+                            \/*\n+                             * length = str.length() + length;\n+                             *\/\n+                            cb.dup()\n+                              .invokevirtual(CD_String, \"length\", MTD_int)\n+                              .iload(lengthSlot)\n+                              .iadd()\n+                              .istore(lengthSlot);\n+\n+                            \/*\n+                             * store to argsN\n+                             *\/\n+                            cb.astore(stringSlots[i]);\n@@ -1285,5 +1392,0 @@\n-\n-                    int lengthCoderSlot = nextSlot;\n-                    int bufSlot         = nextSlot + 2;\n-                    int constantsSlot   = nextSlot + 3;\n-\n@@ -1291,5 +1393,2 @@\n-                     * Store init index :\n-                     *\n-                     *  lengthCoder = mix(mix(mix(mix(initalIengthCoder, argN), ..., arg2), arg1), 0);\n-                     *  ...\n-                     *\n+                     * Allocate buffer :\n+                     *  buf = StringConcatHelper.newArray(length << coder)\n@@ -1297,43 +1396,5 @@\n-                    cb.aload(0)\n-                      .getfield(concatClass, CODER, CD_byte)\n-                      .i2l()\n-                      .ldc(32)\n-                      .lshl()\n-                      .aload(0)\n-                      .getfield(concatClass, LENGTH, CD_int)\n-                      .i2l()\n-                      .ladd();\n-\n-                    for (int i = paramCount - 1; i >= 0; i--) {\n-                        var cl        = args.parameterType(i);\n-                        var kind      = TypeKind.from(cl);\n-                        var paramSlot = paramSlots[i];\n-\n-                        MethodTypeDesc methodTypeDesc;\n-                        if (cl == byte.class || cl == short.class || cl == int.class) {\n-                            methodTypeDesc = MIX_int;\n-                        } else if (cl == long.class) {\n-                            methodTypeDesc = MIX_long;\n-                        } else if (cl == boolean.class) {\n-                            methodTypeDesc = MIX_boolean;\n-                        } else if (cl == char.class) {\n-                            methodTypeDesc = MIX_char;\n-                        } else {\n-                            methodTypeDesc = MIX_String;\n-                            kind           = TypeKind.from(String.class);\n-                        }\n-                        cb.loadLocal(kind, paramSlot)\n-                          .invokestatic(CD_StringConcatHelper, \"mix\", methodTypeDesc);\n-                    }\n-\n-                    \/\/ lengthCoder = lengthCoder - suffix.length()\n-                    cb.aload(0)\n-                      .getfield(concatClass, CONSTANTS, CD_Array_String)\n-                      .astore(constantsSlot)\n-                      .aload(constantsSlot)\n-                      .ldc(paramCount)\n-                      .aaload()\n-                      .invokevirtual(CD_String, LENGTH, MTD_int)\n-                      .i2l()\n-                      .lsub()\n-                      .lstore(lengthCoderSlot);\n+                    cb.iload(lengthSlot)\n+                      .iload(coderSlot)\n+                      .ishl()\n+                      .invokestatic(CD_StringConcatHelper, \"newArray\", MTD_NEW_ARRAY)\n+                      .astore(bufSlot);\n@@ -1342,2 +1403,3 @@\n-                     * Allocate buffer :\n-                     *  buf = StringConcatHelper.newArray(suffix, lengthCoder)\n+                     * Append prefix and init length\n+                     *  constants[0].getBytes(buf, 0, coder);\n+                     *  length = constants[0].length();\n@@ -1346,5 +1408,8 @@\n-                      .ldc(paramCount)\n-                      .aaload()\n-                      .lload(lengthCoderSlot)\n-                      .invokestatic(CD_StringConcatHelper, \"newArrayWithSuffix\", NEW_ARRAY_SUFFIX)\n-                      .astore(bufSlot);\n+                       .ldc(0)\n+                       .aaload()\n+                       .dup()\n+                       .aload(bufSlot)\n+                       .ldc(0)\n+                       .iload(coderSlot)\n+                       .invokevirtual(CD_String, \"getBytes\", MTD_GET_BYTES)\n+                       .invokevirtual(CD_String, \"length\", MTD_int);\n@@ -1353,2 +1418,4 @@\n-                     * prepend arguments :\n-                     *  lengthCoder = prepend(prepend(lengthCoder, buf, argN, constantN), ...), buf, arg0, constant0)\n+                     * if (\n+                     * length = StringConcatHelper.append(length, coder, buf, argN, constants[N + 1]);\n+                     *\n+                     * length = StringConcatHelper.append(length, coder, buf, argN, constants[N + 1]);\n@@ -1356,3 +1423,2 @@\n-                    cb.lload(lengthCoderSlot);\n-                    for (int i = paramCount - 1; i >= 0; i--) {\n-                        var paramSlot = paramSlots[i];\n+                    for (int i = 0; i < paramCount; i++) {\n+                        int paramSlot = paramSlots[i];\n@@ -1361,1 +1427,0 @@\n-\n@@ -1363,2 +1428,2 @@\n-                        if (cl == byte.class || cl == short.class || cl == int.class) {\n-                            methodTypeDesc = PREPEND_int;\n+                        if (cl == int.class) {\n+                            methodTypeDesc = APPEND_int;\n@@ -1366,1 +1431,1 @@\n-                            methodTypeDesc = PREPEND_long;\n+                            methodTypeDesc = APPEND_long;\n@@ -1368,1 +1433,1 @@\n-                            methodTypeDesc = PREPEND_boolean;\n+                            methodTypeDesc = APPEND_boolean;\n@@ -1370,1 +1435,1 @@\n-                            methodTypeDesc = PREPEND_char;\n+                            methodTypeDesc = APPEND_char;\n@@ -1372,2 +1437,3 @@\n-                            methodTypeDesc = PREPEND_String;\n-                            kind           = TypeKind.from(String.class);\n+                            methodTypeDesc = APPEND_String;\n+                            paramSlot = stringSlots[i];\n+                            kind = TypeKind.from(String.class);\n@@ -1375,8 +1441,0 @@\n-                        cb.aload(bufSlot)\n-                          .loadLocal(kind, paramSlot)\n-                          .aload(constantsSlot)\n-                          .ldc(i)\n-                          .aaload()\n-                          .invokestatic(CD_StringConcatHelper, \"prepend\", methodTypeDesc);\n-                    }\n-                    cb.lstore(lengthCoderSlot);\n@@ -1384,4 +1442,23 @@\n-                    \/\/ return StringConcatHelper.newString(buf, lengthCoder));\n-                    cb.aload(bufSlot)\n-                      .lload(lengthCoderSlot)\n-                      .invokestatic(CD_StringConcatHelper, \"newString\", NEW_STRING)\n+                        cb.iload(coderSlot)\n+                          .aload(bufSlot)\n+                          .loadLocal(kind, paramSlot);\n+\n+                        if (cl == int.class || cl == long.class) {\n+                            cb.iload(sizeSlots[i]);\n+                        }\n+\n+                        \/\/ suffix\n+                        cb.aload(constantsSlot)\n+                           .ldc(i + 1)\n+                           .aaload();\n+\n+                        cb.invokestatic(CD_StringConcatHelper, \"append\", methodTypeDesc);\n+                    }\n+                    cb.istore(lengthSlot);\n+\n+                    \/\/ return new String(buf, coder);\n+                    cb.new_(CD_String)\n+                      .dup()\n+                      .aload(bufSlot)\n+                      .iload(coderSlot)\n+                      .invokespecial(CD_String, \"<init>\", MTD_STRING_INIT)\n@@ -1392,2 +1469,7 @@\n-                    return cl != byte.class && cl != short.class   && cl != int.class\n-                        && cl != long.class && cl != boolean.class && cl != char.class;\n+                    return cl != int.class && cl != long.class && cl != boolean.class && cl != char.class;\n+                }\n+\n+                static boolean maybyUTF16(Class<?> cl) {\n+                    return cl == char.class || (!cl.isPrimitive()\n+                        && cl != Byte.class && cl != Short.class && cl != Integer.class\n+                        && cl != Long.class && cl != Boolean.class);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":235,"deletions":153,"binary":false,"changes":388,"status":"modified"}]}