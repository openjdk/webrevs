{"files":[{"patch":"@@ -280,4 +280,0 @@\n-\n-    static MethodHandles.Lookup lookup() {\n-        return MethodHandles.lookup();\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2615,4 +2615,0 @@\n-            public MethodHandles.Lookup stringConcatLookup() {\n-                return StringConcatHelper.lookup();\n-            }\n-\n@@ -2623,4 +2619,0 @@\n-            public int stringSize(int i) {\n-                return Integer.stringSize(i);\n-            }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -961,1 +961,3 @@\n-                m.ensureTypeVisible(m.getDeclaringClass());\n+                if (allowedModes != LM_TRUSTED) {\n+                    m.ensureTypeVisible(m.getDeclaringClass());\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemberName.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -710,2 +710,2 @@\n-            lookup = JLA.stringConcatLookup();\n-            String className = getClassName(lookup.lookupClass());\n+            lookup = MethodHandles.Lookup.IMPL_LOOKUP;\n+            String className = getClassName(String.class);\n@@ -724,4 +724,3 @@\n-                Lookup hiddenLookup = lookup.makeHiddenClassDefiner(className, classBytes, SET_OF_STRONG, DUMPER)\n-                                            .defineClassAsLookup(true);\n-                Class<?> innerClass = hiddenLookup.lookupClass();\n-                return hiddenLookup.findStatic(innerClass, METHOD_NAME, args);\n+                var hiddenClass = lookup.makeHiddenClassDefiner(className, classBytes, SET_OF_STRONG, DUMPER)\n+                        .defineClass(true, null);\n+                return lookup.findStatic(hiddenClass, METHOD_NAME, args);\n@@ -830,3 +829,5 @@\n-                            cb.aload(argSlots + paramStrings[i])\n-                              .invokevirtual(ConstantDescs.CD_String, \"coder\", TO_BYTE)\n-                              .ior();\n+                            if (maybeUTF16(cl)) {\n+                                cb.aload(argSlots + paramStrings[i])\n+                                  .invokevirtual(ConstantDescs.CD_String, \"coder\", TO_BYTE)\n+                                  .ior();\n+                            }\n@@ -943,0 +944,13 @@\n+\n+                static boolean maybeUTF16(Class<?> cl) {\n+                    return cl != byte.class\n+                            && cl != short.class\n+                            && cl != int.class\n+                            && cl != long.class\n+                            && cl != boolean.class\n+                            && cl != Byte.class\n+                            && cl != Short.class\n+                            && cl != Integer.class\n+                            && cl != Long.class\n+                            && cl != Boolean.class;\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":23,"deletions":9,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -441,2 +441,0 @@\n-    MethodHandles.Lookup stringConcatLookup();\n-\n@@ -455,2 +453,0 @@\n-    int stringSize(int i);\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}