{"files":[{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n@@ -43,2 +44,0 @@\n-\n-\n@@ -47,3 +46,3 @@\n-        @Stable final int length;\n-        @Stable final byte coder;\n-        StringConcatBase(String[] constants) {\n+        final int length;\n+        final byte coder;\n+        protected StringConcatBase(String[] constants) {\n@@ -60,0 +59,69 @@\n+\n+        @ForceInline\n+        private String concat0(String value) {\n+            int length = this.length + value.length();\n+            byte coder = (byte) (this.coder | value.coder());\n+            byte[] buf = newArray(length << coder);\n+            String prefix = constants[0];\n+            prefix.getBytes(buf, 0, coder);\n+            value.getBytes(buf, prefix.length(), coder);\n+            constants[1].getBytes(buf, prefix.length() + value.length(), coder);\n+            return new String(buf, coder);\n+        }\n+\n+        @ForceInline\n+        private final String concat(boolean value) {\n+            int length = this.length + stringSize(value);\n+            String suffix = constants[1];\n+            length -= suffix.length();\n+            byte[] buf = newArrayWithSuffix(suffix, length, coder);\n+            prepend(length, coder, buf, value, constants[0]);\n+            return new String(buf, coder);\n+        }\n+\n+        @ForceInline\n+        private final String concat(char value) {\n+            int length = this.length + 1;\n+            byte coder = (byte) (this.coder | stringCoder(value));\n+            String suffix = constants[1];\n+            length -= suffix.length();\n+            byte[] buf = newArrayWithSuffix(suffix, length, coder);\n+            prepend(length, coder, buf, value, constants[0]);\n+            return new String(buf, coder);\n+        }\n+\n+        @ForceInline\n+        private final String concat(int value) {\n+            int length = this.length + stringSize(value);\n+            String suffix = constants[1];\n+            length -= suffix.length();\n+            byte[] buf = newArrayWithSuffix(suffix, length, coder);\n+            prepend(length, coder, buf, value, constants[0]);\n+            return new String(buf, coder);\n+        }\n+\n+        @ForceInline\n+        private final String concat(long value) {\n+            int length = this.length + stringSize(value);\n+            String suffix = constants[1];\n+            length -= suffix.length();\n+            byte[] buf = newArrayWithSuffix(suffix, length, coder);\n+            prepend(length, coder, buf, value, constants[0]);\n+            return new String(buf, coder);\n+        }\n+\n+        @ForceInline\n+        private final String concat(Object value) {\n+            String str = stringOf(value);\n+            return concat0(stringOf(value));\n+        }\n+\n+        @ForceInline\n+        private final String concat(float value) {\n+            return concat0(Float.toString(value));\n+        }\n+\n+        @ForceInline\n+        private final String concat(double value) {\n+            return concat0(Double.toString(value));\n+        }\n@@ -397,0 +465,53 @@\n+    static String stringOf(float value) {\n+        return Float.toString(value);\n+    }\n+\n+    static String stringOf(double value) {\n+        return Double.toString(value);\n+    }\n+\n+    \/**\n+     * return stirngSize of value\n+     * @param value       value\n+     * @return            1\n+     *\/\n+    static int stringSize(char value) {\n+        return 1;\n+    }\n+\n+    \/**\n+     * return stirngSize of value\n+     * @param value       value\n+     * @return            if ture 4, false 5\n+     *\/\n+    static int stringSize(boolean value) {\n+        return value ? 4 : 5;\n+    }\n+\n+    \/**\n+     * return stirngSize of value\n+     * @param value       value\n+     * @return            stirngSize of value\n+     *\/\n+    static int stringSize(int value) {\n+        return DecimalDigits.stringSize(value);\n+    }\n+\n+    \/**\n+     * return stirngSize of value\n+     * @param value       value\n+     * @return            stirngSize of value\n+     *\/\n+    static int stringSize(long value) {\n+        return DecimalDigits.stringSize(value);\n+    }\n+\n+    \/**\n+     * return stirngSize of value\n+     * @param value       value\n+     * @return            stirngSize of value\n+     *\/\n+    static int stringSize(String value) {\n+        return value.length();\n+    }\n+\n@@ -462,0 +583,22 @@\n+    \/**\n+     * Allocates an uninitialized byte array based on the length and coder\n+     * information, then prepends the given suffix string at the end of the\n+     * byte array before returning it. The calling code must adjust the\n+     * indexCoder so that it's taken the coder of the suffix into account, but\n+     * subtracted the length of the suffix.\n+     *\n+     * @param suffix\n+     * @param indexCoder\n+     * @return the newly allocated byte array\n+     *\/\n+    @ForceInline\n+    static byte[] newArrayWithSuffix(String suffix, int index, byte coder) {\n+        byte[] buf = newArray((index + suffix.length()) << coder);\n+        if (coder == String.LATIN1) {\n+            suffix.getBytes(buf, index, String.LATIN1);\n+        } else {\n+            suffix.getBytes(buf, index, String.UTF16);\n+        }\n+        return buf;\n+    }\n+\n@@ -472,1 +615,1 @@\n-     * append the stringly representation of value into buffer,\n+     * Prepends constant and the stringly representation of value into buffer,\n@@ -477,3 +620,4 @@\n-     * @param buf       buffer to append to\n-     * @param value     boolean value to encode\n-     * @return          updated index\n+     * @param buf        buffer to append to\n+     * @param value      boolean value to encode\n+     * @param prefix     a constant to prepend before value\n+     * @return           updated index\n@@ -481,1 +625,1 @@\n-    static int append(int index, byte coder, byte[] buf, boolean value, String suffix) {\n+    static int prepend(int index, byte coder, byte[] buf, boolean value, String prefix) {\n@@ -484,0 +628,1 @@\n+                index -= 4;\n@@ -488,1 +633,0 @@\n-                index += 4;\n@@ -490,0 +634,1 @@\n+                index -= 5;\n@@ -495,1 +640,0 @@\n-                index += 5;\n@@ -497,0 +641,2 @@\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.LATIN1);\n@@ -499,0 +645,1 @@\n+                index -= 4;\n@@ -503,1 +650,0 @@\n-                index += 4;\n@@ -505,0 +651,1 @@\n+                index -= 5;\n@@ -510,1 +657,0 @@\n-                index += 5;\n@@ -512,0 +658,2 @@\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.UTF16);\n@@ -513,2 +661,1 @@\n-        suffix.getBytes(buf, index, coder);\n-        return index + suffix.length();\n+        return index;\n@@ -518,1 +665,1 @@\n-     * append the stringly representation of value into buffer,\n+     * Prepends constant and the stringly representation of value into buffer,\n@@ -523,3 +670,4 @@\n-     * @param buf       buffer to append to\n-     * @param value     char value to encode\n-     * @return          updated index\n+     * @param buf        buffer to append to\n+     * @param value      char value to encode\n+     * @param prefix     a constant to prepend before value\n+     * @return           updated index\n@@ -527,1 +675,1 @@\n-    static int append(int index, byte coder, byte[] buf, char value, String suffix) {\n+    static int prepend(int index, byte coder, byte[] buf, char value, String prefix) {\n@@ -529,1 +677,3 @@\n-            buf[index] = (byte) value;\n+            buf[--index] = (byte) (value & 0xFF);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.LATIN1);\n@@ -531,1 +681,3 @@\n-            StringUTF16.putChar(buf, index, value);\n+            StringUTF16.putChar(buf, --index, value);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.UTF16);\n@@ -533,2 +685,1 @@\n-        suffix.getBytes(buf, ++index, coder);\n-        return index + suffix.length();\n+        return index;\n@@ -538,1 +689,1 @@\n-     * append the value into buffer,\n+     * Prepends constant and the stringly representation of value into buffer,\n@@ -543,4 +694,4 @@\n-     * @param buf       buffer to append to\n-     * @param value     String value\n-     * @param size      stringSize of value\n-     * @return          updated index\n+     * @param buf        buffer to append to\n+     * @param value      int value to encode\n+     * @param prefix     a constant to prepend before value\n+     * @return           updated index\n@@ -548,1 +699,1 @@\n-    static int append(int index, byte coder, byte[] buf, String value, String suffix) {\n+    static int prepend(int index, byte coder, byte[] buf, int value, String prefix) {\n@@ -550,1 +701,3 @@\n-            value.getBytes(buf, index, String.LATIN1);\n+            index = StringLatin1.getChars(value, index, buf);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.LATIN1);\n@@ -552,1 +705,3 @@\n-            value.getBytes(buf, index, String.UTF16);\n+            index = StringUTF16.getChars(value, index, buf);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.UTF16);\n@@ -554,3 +709,1 @@\n-        index += value.length();\n-        suffix.getBytes(buf, index, coder);\n-        return index + suffix.length();\n+        return index;\n@@ -560,1 +713,1 @@\n-     * append the stringly representation of value into buffer,\n+     * Prepends constant and the stringly representation of value into buffer,\n@@ -565,4 +718,4 @@\n-     * @param buf       buffer to append to\n-     * @param value     int value to encode\n-     * @param size      stringSize of value\n-     * @return          updated index\n+     * @param buf        buffer to append to\n+     * @param value      long value to encode\n+     * @param prefix     a constant to prepend before value\n+     * @return           updated index\n@@ -570,2 +723,1 @@\n-    static int append(int index, byte coder, byte[] buf, int value, int size, String suffix) {\n-        index += size;\n+    static int prepend(int index, byte coder, byte[] buf, long value, String prefix) {\n@@ -573,1 +725,3 @@\n-            StringLatin1.getChars(value, index, buf);\n+            index = StringLatin1.getChars(value, index, buf);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.LATIN1);\n@@ -575,1 +729,3 @@\n-            StringUTF16.getChars(value, index, buf);\n+            index = StringUTF16.getChars(value, index, buf);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.UTF16);\n@@ -577,2 +733,1 @@\n-        suffix.getBytes(buf, index, coder);\n-        return index + suffix.length();\n+        return index;\n@@ -582,1 +737,1 @@\n-     * append the stringly representation of value into buffer,\n+     * Prepends constant and the stringly representation of value into buffer,\n@@ -587,4 +742,4 @@\n-     * @param buf       buffer to append to\n-     * @param value     long value to encode\n-     * @param size      stringSize of value\n-     * @return          updated index\n+     * @param buf        buffer to append to\n+     * @param value      boolean value to encode\n+     * @param prefix     a constant to prepend before value\n+     * @return           updated index\n@@ -592,2 +747,2 @@\n-    static int append(int index, byte coder, byte[] buf, long value, int size, String suffix) {\n-        index += size;\n+    static int prepend(int index, byte coder, byte[] buf, String value, String prefix) {\n+        index -= value.length();\n@@ -595,1 +750,3 @@\n-            StringLatin1.getChars(value, index, buf);\n+            value.getBytes(buf, index, String.LATIN1);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.LATIN1);\n@@ -597,1 +754,3 @@\n-            StringUTF16.getChars(value, index, buf);\n+            value.getBytes(buf, index, String.UTF16);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.UTF16);\n@@ -599,2 +758,1 @@\n-        suffix.getBytes(buf, index, coder);\n-        return index + suffix.length();\n+        return index;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":216,"deletions":58,"binary":false,"changes":274,"status":"modified"},{"patch":"@@ -2626,0 +2626,4 @@\n+            public Object stringConcat1(String[] constants) {\n+                return new StringConcatHelper.StringConcatBase(constants);\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.lang.classfile.Annotation;\n@@ -43,0 +44,1 @@\n+import java.lang.classfile.MethodBuilder;\n@@ -44,0 +46,1 @@\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n@@ -48,0 +51,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -1081,0 +1086,2 @@\n+        static final MethodTypeDesc MTD_int_boolean   = MethodTypeDesc.of(CD_int, CD_boolean);\n+        static final MethodTypeDesc MTD_int_char      = MethodTypeDesc.of(CD_int, CD_char);\n@@ -1083,0 +1090,1 @@\n+        static final MethodTypeDesc MTD_int_String    = MethodTypeDesc.of(CD_int, CD_String);\n@@ -1087,4 +1095,4 @@\n-        static final MethodTypeDesc MTD_GET_BYTES   = MethodTypeDesc.of(CD_void, CD_Array_byte, CD_int, CD_byte);\n-        static final MethodTypeDesc MTD_INIT        = MethodTypeDesc.of(CD_void, CD_Array_String);\n-        static final MethodTypeDesc MTD_NEW_ARRAY   = MethodTypeDesc.of(CD_Array_byte, CD_int);\n-        static final MethodTypeDesc MTD_STRING_INIT = MethodTypeDesc.of(CD_void, CD_Array_byte, CD_byte);\n+        static final MethodTypeDesc MTD_GET_BYTES        = MethodTypeDesc.of(CD_void, CD_Array_byte, CD_int, CD_byte);\n+        static final MethodTypeDesc MTD_INIT             = MethodTypeDesc.of(CD_void, CD_Array_String);\n+        static final MethodTypeDesc MTD_NEW_ARRAY_SUFFIX = MethodTypeDesc.of(CD_Array_byte, CD_String, CD_int, CD_byte);\n+        static final MethodTypeDesc MTD_STRING_INIT      = MethodTypeDesc.of(CD_void, CD_Array_byte, CD_byte);\n@@ -1092,5 +1100,7 @@\n-        static final MethodTypeDesc APPEND_int     = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_Array_byte, CD_int, CD_int, CD_String);\n-        static final MethodTypeDesc APPEND_long    = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_Array_byte, CD_long, CD_int, CD_String);\n-        static final MethodTypeDesc APPEND_boolean = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_Array_byte, CD_boolean, CD_String);\n-        static final MethodTypeDesc APPEND_char    = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_Array_byte, CD_char, CD_String);\n-        static final MethodTypeDesc APPEND_String  = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_Array_byte, CD_String, CD_String);\n+        static final MethodTypeDesc PREPEND_int     = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_Array_byte, CD_int, CD_String);\n+        static final MethodTypeDesc PREPEND_long    = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_Array_byte, CD_long, CD_String);\n+        static final MethodTypeDesc PREPEND_boolean = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_Array_byte, CD_boolean, CD_String);\n+        static final MethodTypeDesc PREPEND_char    = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_Array_byte, CD_char, CD_String);\n+        static final MethodTypeDesc PREPEND_String  = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_Array_byte, CD_String, CD_String);\n+\n+        static final RuntimeVisibleAnnotationsAttribute FORCE_INLINE = RuntimeVisibleAnnotationsAttribute.of(Annotation.of(ClassDesc.ofDescriptor(\"Ljdk\/internal\/vm\/annotation\/ForceInline;\")));\n@@ -1125,6 +1135,6 @@\n-        private static MethodHandle generate(Lookup lookup, MethodType args, String[] constants) throws Exception {\n-            lookup = MethodHandles.Lookup.IMPL_LOOKUP;\n-            String className = \"java.lang.String$$StringConcat\";\n-            MethodType erasedArgs = args.erase().changeReturnType(String.class);\n-            for (int i = 0; i < erasedArgs.parameterCount(); i++) {\n-                Class<?> cl = erasedArgs.parameterType(i);\n+        private static MethodType erasedArgs(MethodType args) {\n+            int parameterCount = args.parameterCount();\n+            Class<?>[] paramTypes = new Class<?>[parameterCount];\n+            boolean changed = false;\n+            for (int i = 0; i < parameterCount; i++) {\n+                Class<?> cl = args.parameterType(i);\n@@ -1135,1 +1145,28 @@\n-                    erasedArgs = erasedArgs.changeParameterType(i, int.class);\n+                    cl = int.class;\n+                    changed = true;\n+                } else if (cl != Object.class && !cl.isPrimitive()) {\n+                    cl = Object.class;\n+                    changed = true;\n+                }\n+                paramTypes[i] = cl;\n+            }\n+            return changed ? MethodType.methodType(args.returnType(), paramTypes) : args;\n+        }\n+\n+        private static MethodType prependArgs(MethodType args) {\n+            int parameterCount = args.parameterCount();\n+            Class<?>[] paramTypes = new Class<?>[parameterCount + 4];\n+\n+            int lengthSlot    = 0,\n+                coderSlot     = 1,\n+                bufSlot       = 2,\n+                constantsSlot = 3;\n+            paramTypes[lengthSlot   ] = int.class;\n+            paramTypes[coderSlot    ] = byte.class;\n+            paramTypes[bufSlot      ] = byte[].class;\n+            paramTypes[constantsSlot] = String[].class;\n+\n+            for (int i = 0; i < parameterCount; i++) {\n+                var cl = args.parameterType(i);\n+                if (cl != String.class && needStringOf(cl)) {\n+                    cl = String.class;\n@@ -1137,0 +1174,47 @@\n+                paramTypes[i + 4] = cl;\n+            }\n+            return MethodType.methodType(int.class, paramTypes);\n+        }\n+\n+        private static MethodType coderArgs(MethodType args) {\n+            int parameterCount = args.parameterCount();\n+            List<Class<?>> paramTypes = new ArrayList<>();\n+            paramTypes.add(int.class);\n+            for (int i = 0; i < parameterCount; i++) {\n+                var cl = args.parameterType(i);\n+                if (cl == char.class) {\n+                    paramTypes.add(cl);\n+                } else if(needStringOf(cl) && maybeUTF16(cl)){\n+                    paramTypes.add(String.class);\n+                }\n+            }\n+            return MethodType.methodType(int.class, paramTypes.toArray(new Class<?>[0]));\n+        }\n+\n+        private static MethodType lengthArgs(MethodType args) {\n+            int parameterCount = args.parameterCount();\n+            var paramTypes = new Class<?>[parameterCount + 1];\n+            paramTypes[0] = int.class;\n+            for (int i = 0; i < parameterCount; i++) {\n+                var cl = args.parameterType(i);\n+                if (needStringOf(cl)) {\n+                    cl = String.class;\n+                }\n+                paramTypes[i + 1] = cl;\n+            }\n+            return MethodType.methodType(int.class, paramTypes);\n+        }\n+\n+        private static MethodHandle generate(Lookup lookup, MethodType args, String[] constants) throws Exception {\n+            lookup = MethodHandles.Lookup.IMPL_LOOKUP;\n+            String className = \"java.lang.String$$StringConcat\";\n+            final MethodType concatArgs = erasedArgs(args);\n+\n+\n+            \/\/ 1 argment use built-in method\n+            int paramCount  = args.parameterCount();\n+            var concatClass = ConstantUtils.binaryNameToDesc(className);\n+            if (paramCount == 1) {\n+                Object concat1 = JLA.stringConcat1(constants);\n+                var handle = lookup.findVirtual(concat1.getClass(), METHOD_NAME, concatArgs);\n+                return handle.bindTo(concat1);\n@@ -1138,2 +1222,2 @@\n-            final MethodType concatArgs = erasedArgs;\n-            SoftReference<MethodHandlePair> weakConstructorHandle = CACHE.get(concatArgs);\n+\n+            var weakConstructorHandle = CACHE.get(concatArgs);\n@@ -1151,1 +1235,5 @@\n-            ClassDesc concatClass = ConstantUtils.binaryNameToDesc(className);\n+            var lengthArgs  = lengthArgs(concatArgs);\n+            var coderArgs   = coderArgs(concatArgs);\n+            var prependArgs = prependArgs(concatArgs);\n+\n+            int maybeUTF16ParamCount = maybeUTF16ParameterCount(args);\n@@ -1154,0 +1242,2 @@\n+                        int forceInlineThreshold = 16;\n+                        boolean forceInline = concatArgs.parameterCount() < forceInlineThreshold;\n@@ -1158,1 +1248,1 @@\n-                                .withMethodBody(\"<init>\",\n+                                .withMethodBody(INIT_NAME,\n@@ -1162,1 +1252,23 @@\n-                                .withMethodBody(METHOD_NAME,\n+                                .withMethod(\"length\",\n+                                        ConstantUtils.methodTypeDesc(lengthArgs),\n+                                        ClassFile.ACC_STATIC | ClassFile.ACC_PRIVATE,\n+                                        new Consumer<MethodBuilder>() {\n+                                            public void accept(MethodBuilder mb) {\n+                                                if (forceInline) {\n+                                                    mb.with(FORCE_INLINE);\n+                                                }\n+                                                mb.withCode(generateLengthMethod(lengthArgs));\n+                                            }\n+                                        })\n+                                .withMethod(\"prepend\",\n+                                        ConstantUtils.methodTypeDesc(prependArgs),\n+                                        ClassFile.ACC_STATIC | ClassFile.ACC_PRIVATE,\n+                                        new Consumer<MethodBuilder>() {\n+                                            public void accept(MethodBuilder mb) {\n+                                                if (forceInline) {\n+                                                    mb.with(FORCE_INLINE);\n+                                                }\n+                                                mb.withCode(generatePrependMethod(concatArgs));\n+                                            }\n+                                        })\n+                                .withMethod(METHOD_NAME,\n@@ -1165,1 +1277,21 @@\n-                                        generateConcatMethod(concatClass, concatArgs));\n+                                        new Consumer<MethodBuilder>() {\n+                                            public void accept(MethodBuilder mb) {\n+                                                if (forceInline) {\n+                                                    mb.with(FORCE_INLINE);\n+                                                }\n+                                                mb.withCode(generateConcatMethod(concatClass, concatArgs, lengthArgs, coderArgs, prependArgs));\n+                                            }\n+                                        });\n+                            if (maybeUTF16ParamCount > 0) {\n+                                clb.withMethod(\"coder\",\n+                                        ConstantUtils.methodTypeDesc(coderArgs),\n+                                        ClassFile.ACC_STATIC | ClassFile.ACC_PRIVATE,\n+                                        new Consumer<MethodBuilder>() {\n+                                            public void accept(MethodBuilder mb) {\n+                                                if (forceInline) {\n+                                                    mb.with(FORCE_INLINE);\n+                                                }\n+                                                mb.withCode(generateCoderMethod(coderArgs));\n+                                            }\n+                                        });\n+                            }\n@@ -1169,3 +1301,2 @@\n-                        .defineClass(true, null);\n-\n-                MethodHandle constructorHandle = lookup.findConstructor(hiddenClass, MethodType.methodType(void.class, String[].class));\n+                                        .defineClass(true, null);\n+                var constructorHandle = lookup.findConstructor(hiddenClass, MethodType.methodType(void.class, String[].class));\n@@ -1173,1 +1304,1 @@\n-                MethodHandle handle = lookup.findVirtual(hiddenClass, METHOD_NAME, concatArgs);\n+                var handle = lookup.findVirtual(hiddenClass, METHOD_NAME, concatArgs);\n@@ -1187,4 +1318,8 @@\n-         * import static java.lang.StringConcatHelper.mix;\n-         * import static java.lang.StringConcatHelper.prepend;\n-         * import static java.lang.StringConcatHelper.newString;\n-         * import static java.lang.StringConcatHelper.newArray;\n+         *  import static java.lang.StringConcatHelper.prepend;\n+         *  import static java.lang.StringConcatHelper.newArrayWithSuffix;\n+         *\n+         *  class StringConcat extends java.lang.StringConcatHelper.StringConcatBase {\n+         *      \/\/ super class defines\n+         *      \/\/ String[] constants;\n+         *      \/\/ int length;\n+         *      \/\/ byte coder;\n@@ -1192,5 +1327,3 @@\n-         * class StringConcat extends java.lang.StringConcatHelper.StringConcatBase {\n-         *   \/\/ super class defines\n-         *   \/\/ String[] constants;\n-         *   \/\/ int length;\n-         *   \/\/ byte coder;\n+         *      StringConcat(String[] constants) {\n+         *          super(constants);\n+         *      }\n@@ -1198,7 +1331,6 @@\n-         *   StringConcat(String[] constants) {\n-         *       super(constants);\n-         *   }\n-         *   String concat(int arg0, long arg1, boolean arg2, char arg3, String arg4, float arg5, double arg6, Object arg7) {\n-         *     int length = this.length();\n-         *     int coder = this.coder();\n-         *     String[] constants = this.constants;\n+         *      String concat(int arg0, long arg1, boolean arg2, char arg3, String arg4,\n+         *          float arg5, double arg6, Object arg7\n+         *      ) {\n+         *          int length = this.length();\n+         *          int coder = this.coder();\n+         *          String[] constants = this.constants;\n@@ -1206,5 +1338,5 @@\n-         *     \/\/ String arg\n-         *     arg4 = stringOf(arg4);\n-         *     arg5 = stringOf(arg5);\n-         *     arg6 = stringOf(arg6);\n-         *     arg7 = stringOf(arg7);\n+         *          \/\/ String arg\n+         *          arg4 = stringOf(arg4);\n+         *          arg5 = stringOf(arg5);\n+         *          arg6 = stringOf(arg6);\n+         *          arg7 = stringOf(arg7);\n@@ -1212,4 +1344,4 @@\n-         *     \/\/ Types other than byte\/short\/int\/long\/boolean\/String require a local variable to store\n-         *     arg5 stringOf(arg5);\n-         *     arg5 stringOf(arg6);\n-         *     arg = stringOf(arg7);\n+         *          \/\/ Types other than byte\/short\/int\/long\/boolean\/String require a local variable to store\n+         *          arg5 stringOf(arg5);\n+         *          arg5 stringOf(arg6);\n+         *          arg = stringOf(arg7);\n@@ -1217,5 +1349,2 @@\n-         *     length += DecimalDigits.stringSize(arg0);\n-         *     length += DecimalDigits.stringSize(arg1);\n-         *     length += arg2 ? 4 : 5;\n-         *     length ++; \/\/ char\n-         *     length += arg4.length() + arg5.length() + arg6.length() + arg7.length();\n+         *          coder  = coder(this.coder, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);\n+         *          length = length(this.length, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);\n@@ -1223,1 +1352,1 @@\n-         *     coder |= arg4.coder() | arg7.coder(); \/\/ arg5 and arg6 is not maybeUTF16\n+         *          byte[] buf = newArrayWithSuffix(constants[paramCount], length. coder);\n@@ -1225,1 +1354,1 @@\n-         *     byte[] buf = newArray(length << coder);\n+         *          prepend(length, coder, buf, constants, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);\n@@ -1227,8 +1356,2 @@\n-         *     constants[0].getBytes(buf, 0, coder);\n-         *     length = constants[0].length();\n-         *     length = apppend(apppend(apppend(apppend(\n-         *                   apppend(apppend(apppend(apppend(length,\n-         *                        buf, str7, constant[7]), buf, str6, constant[6]),\n-         *                        buf, str5, constant[5]), buf, arg4, constant[4]),\n-         *                        buf, arg3, constant[3]), buf, arg2, constant[2]),\n-         *                        buf, arg1, constant[1]), buf, arg0, constant[0]);\n+         *          return new String(buf, coder);\n+         *      }\n@@ -1236,2 +1359,22 @@\n-         *     return new String(buf, coder);\n-         * }\n+         *      static int length(int length, int arg0, long arg1, boolean arg2, char arg3,\n+         *                       String arg4, String arg5, String arg6, String arg7) {\n+         *          return length | stringSize(arg0) | stringSize(arg1) | stringSize(arg2) | stringSize(arg4)\n+         *                    | stringSize(arg5) | stringSize(arg6) | stringSize(arg7);\n+         *      }\n+         *\n+         *      static int cocder(int coder, char arg3, String arg4, String arg5, String arg6, String arg7) {\n+         *          return coder | stringCoder(arg3) | arg4.coder() | arg5.coder() | arg6.coder() | arg7.coder();\n+         *      }\n+         *\n+         *      static int prepend(int length, int coder, byte[] buf, String[] constants,\n+         *                     int arg0, long arg1, boolean arg2, char arg3,\n+         *                     String arg4, String arg5, String arg6, String arg7) {\n+         *          \/\/ StringConcatHelper.prepend\n+         *          return prepend(prepend(prepend(prepend(\n+         *                  prepend(apppend(prepend(prepend(length,\n+         *                       buf, str7, constant[7]), buf, str6, constant[6]),\n+         *                       buf, str5, constant[5]), buf, arg4, constant[4]),\n+         *                       buf, arg3, constant[3]), buf, arg2, constant[2]),\n+         *                       buf, arg1, constant[1]), buf, arg0, constant[0]);\n+         *      }\n+         *  }\n@@ -1240,1 +1383,7 @@\n-        private static Consumer<CodeBuilder> generateConcatMethod(ClassDesc concatClass, MethodType args) {\n+        private static Consumer<CodeBuilder> generateConcatMethod(\n+                ClassDesc concatClass,\n+                MethodType args,\n+                MethodType lengthArgs,\n+                MethodType coderArgs,\n+                MethodType prependArgs\n+        ) {\n@@ -1247,1 +1396,1 @@\n-                    int thisSloat = 0,\n+                    int thisSlot  = 0,\n@@ -1250,1 +1399,0 @@\n-                          sizeSlots   = new int[paramCount],\n@@ -1257,0 +1405,1 @@\n+                    int maybeUTF16ParamCount = maybeUTF16ParameterCount(args);\n@@ -1259,5 +1408,0 @@\n-\n-                        \/\/ If the type is int\/long, use a local variable to save the size.\n-                        if (cl == int.class || cl == long.class) {\n-                            sizeSlots[i] = nextSlot++;\n-                        }\n@@ -1269,4 +1413,4 @@\n-                    int lengthSlot    = nextSlot;\n-                    int coderSlot     = nextSlot + 1;\n-                    int bufSlot       = nextSlot + 2;\n-                    int constantsSlot = nextSlot + 3;\n+                    int lengthSlot    = nextSlot,\n+                        coderSlot     = nextSlot + 1,\n+                        bufSlot       = nextSlot + 2,\n+                        constantsSlot = nextSlot + 3;\n@@ -1280,1 +1424,1 @@\n-                    cb.aload(thisSloat)\n+                    cb.aload(thisSlot)\n@@ -1282,2 +1426,2 @@\n-                      .istore(lengthSlot);\n-                    cb.aload(thisSloat)\n+                      .istore(lengthSlot)\n+                      .aload(thisSlot)\n@@ -1285,2 +1429,2 @@\n-                      .istore(coderSlot);\n-                    cb.aload(thisSloat)\n+                      .istore(coderSlot)\n+                      .aload(thisSlot)\n@@ -1290,58 +1434,9 @@\n-                    for (int i = 0; i < paramCount; i++) {\n-                        var cl   = args.parameterType(i);\n-                        var kind = TypeKind.from(cl);\n-                        if (cl == int.class) {\n-                            \/*\n-                             * sizeN = DecimalDigits.stringSize(argN);\n-                             * length = sizeN + length;\n-                             *\/\n-                            cb.loadLocal(kind, paramSlots[i])\n-                              .invokestatic(CD_DecimalDigits, \"stringSize\", MTD_int_int)\n-                              .dup()\n-                              .istore(sizeSlots[i])\n-                              .iload(lengthSlot)\n-                              .iadd()\n-                              .istore(lengthSlot);\n-                        } else if (cl == long.class) {\n-                            \/*\n-                             * sizeN = DecimalDigits.stringSize(argN);\n-                             * length = sizeN + length;\n-                             *\/\n-                            cb.loadLocal(kind, paramSlots[i])\n-                              .invokestatic(CD_DecimalDigits, \"stringSize\", MTD_int_long)\n-                              .dup()\n-                              .istore(sizeSlots[i])\n-                              .iload(lengthSlot)\n-                              .iadd()\n-                              .istore(lengthSlot);\n-                        } else if (cl == boolean.class) {\n-                            \/*\n-                             * length = (argN ? 4 : 5) + length;\n-                             *\/\n-                            Label L0 = cb.newLabel(), L1 = cb.newLabel();\n-                            cb.iload(paramSlots[i])\n-                              .ifeq(L0)\n-                              .ldc(5)\n-                              .goto_(L1)\n-                              .labelBinding(L0)\n-                              .ldc(4)\n-                              .labelBinding(L1)\n-                              .iload(lengthSlot)\n-                              .iadd()\n-                              .istore(lengthSlot);\n-                        } else if (cl == char.class) {\n-                            \/*\n-                             * length += 1;\n-                             *\/\n-                            cb.iinc(lengthSlot, 1);\n-                            \/*\n-                             * coder = StringConcatHelper.stringCoder(argN) | coder;\n-                             *\/\n-                            cb.loadLocal(kind, paramSlots[i])\n-                              .invokestatic(CD_StringConcatHelper, \"stringCoder\", MTD_byte_char)\n-                              .iload(coderSlot)\n-                              .ior()\n-                              .istore(coderSlot)\n-                            ;\n-                        } else {\n-                            ClassDesc classDesc;\n+                    \/*\n+                     * strN = toString(argN);\n+                     * ...\n+                     * str1 = stringOf(arg1);\n+                     * str0 = stringOf(arg0);\n+                     *\/\n+                    for (int i = paramCount - 1; i >= 0; i--) {\n+                        var cl = args.parameterType(i);\n+                        if (needStringOf(cl)) {\n@@ -1349,1 +1444,0 @@\n-                            String methodName;\n@@ -1351,2 +1445,0 @@\n-                                classDesc = CD_Float;\n-                                methodName = \"toString\";\n@@ -1355,2 +1447,0 @@\n-                                classDesc = CD_Double;\n-                                methodName = \"toString\";\n@@ -1359,2 +1449,0 @@\n-                                classDesc = CD_StringConcatHelper;\n-                                methodName = \"stringOf\";\n@@ -1363,0 +1451,5 @@\n+                            cb.loadLocal(TypeKind.from(cl), paramSlots[i])\n+                              .invokestatic(CD_StringConcatHelper, \"stringOf\", methodTypeDesc)\n+                              .astore(stringSlots[i]);\n+                        }\n+                    }\n@@ -1364,11 +1457,11 @@\n-                            cb.loadLocal(kind, paramSlots[i])\n-                              .invokestatic(classDesc, methodName, methodTypeDesc);\n-                            if (maybyUTF16(cl)) {\n-                                \/*\n-                                 * coder = str.coder() | length;\n-                                 *\/\n-                                cb.dup()\n-                                  .invokevirtual(CD_String, \"coder\", MTD_byte)\n-                                  .iload(coderSlot)\n-                                  .ior()\n-                                  .istore(coderSlot);\n+                    if (maybeUTF16ParamCount > 0) {\n+                        \/*\n+                         * coder = StringConcatHelper.stringCoder(argN) | ... | coder;\n+                         *\/\n+                        cb.iload(coderSlot);\n+                        for (int i = 0; i < paramCount; i++) {\n+                            var cl = args.parameterType(i);\n+                            if (cl == char.class) {\n+                                cb.loadLocal(TypeKind.from(cl), paramSlots[i]);\n+                            } else if (needStringOf(cl) && maybeUTF16(cl)) {\n+                                cb.aload(stringSlots[i]);\n@@ -1376,13 +1469,0 @@\n-                            \/*\n-                             * length = str.length() + length;\n-                             *\/\n-                            cb.dup()\n-                              .invokevirtual(CD_String, \"length\", MTD_int)\n-                              .iload(lengthSlot)\n-                              .iadd()\n-                              .istore(lengthSlot);\n-\n-                            \/*\n-                             * store to argsN\n-                             *\/\n-                            cb.astore(stringSlots[i]);\n@@ -1390,0 +1470,2 @@\n+                        cb.invokestatic(concatClass, \"coder\", ConstantUtils.methodTypeDesc(coderArgs))\n+                          .istore(coderSlot);\n@@ -1392,0 +1474,12 @@\n+                    cb.iload(lengthSlot);\n+                    for (int i = 0; i < paramCount; i++) {\n+                        var cl   = args.parameterType(i);\n+                        int paramSlot = paramSlots[i];\n+                        if (needStringOf(cl)) {\n+                            paramSlot = stringSlots[i];\n+                            cl = String.class;\n+                        }\n+                        cb.loadLocal(TypeKind.from(cl), paramSlot);\n+                    }\n+                    cb.invokestatic(concatClass, \"length\", ConstantUtils.methodTypeDesc(lengthArgs));\n+\n@@ -1393,2 +1487,1 @@\n-                     * Allocate buffer :\n-                     *  buf = StringConcatHelper.newArray(length << coder)\n+                     * length -= constants[paranCount].length();\n@@ -1396,5 +1489,6 @@\n-                    cb.iload(lengthSlot)\n-                      .iload(coderSlot)\n-                      .ishl()\n-                      .invokestatic(CD_StringConcatHelper, \"newArray\", MTD_NEW_ARRAY)\n-                      .astore(bufSlot);\n+                    cb.aload(constantsSlot)\n+                      .ldc(paramCount)\n+                      .aaload()\n+                      .invokevirtual(CD_String, \"length\", MTD_int)\n+                      .isub()\n+                      .istore(lengthSlot);\n@@ -1403,3 +1497,3 @@\n-                     * Append prefix and init length\n-                     *  constants[0].getBytes(buf, 0, coder);\n-                     *  length = constants[0].length();\n+                     * Allocate buffer :\n+                     *\n+                     *  buf = StringConcatHelper.newArrayWithSuffix(constants[paranCount], length, coder)\n@@ -1408,8 +1502,6 @@\n-                       .ldc(0)\n-                       .aaload()\n-                       .dup()\n-                       .aload(bufSlot)\n-                       .ldc(0)\n-                       .iload(coderSlot)\n-                       .invokevirtual(CD_String, \"getBytes\", MTD_GET_BYTES)\n-                       .invokevirtual(CD_String, \"length\", MTD_int);\n+                      .ldc(paramCount)\n+                      .aaload()\n+                      .iload(lengthSlot)\n+                      .iload(coderSlot)\n+                      .invokestatic(CD_StringConcatHelper, \"newArrayWithSuffix\", MTD_NEW_ARRAY_SUFFIX)\n+                      .astore(bufSlot);\n@@ -1418,4 +1510,1 @@\n-                     * if (\n-                     * length = StringConcatHelper.append(length, coder, buf, argN, constants[N + 1]);\n-                     *\n-                     * length = StringConcatHelper.append(length, coder, buf, argN, constants[N + 1]);\n+                     * prepend(length, coder, buf, constants, ar0, ar1, ..., argN);\n@@ -1423,0 +1512,4 @@\n+                    cb.iload(lengthSlot)\n+                      .iload(coderSlot)\n+                      .aload(bufSlot)\n+                      .aload(constantsSlot);\n@@ -1424,0 +1517,1 @@\n+                        var cl = args.parameterType(i);\n@@ -1425,13 +1519,2 @@\n-                        var cl        = args.parameterType(i);\n-                        var kind      = TypeKind.from(cl);\n-                        MethodTypeDesc methodTypeDesc;\n-                        if (cl == int.class) {\n-                            methodTypeDesc = APPEND_int;\n-                        } else if (cl == long.class) {\n-                            methodTypeDesc = APPEND_long;\n-                        } else if (cl == boolean.class) {\n-                            methodTypeDesc = APPEND_boolean;\n-                        } else if (cl == char.class) {\n-                            methodTypeDesc = APPEND_char;\n-                        } else {\n-                            methodTypeDesc = APPEND_String;\n+                        var kind = TypeKind.from(cl);\n+                        if (needStringOf(cl)) {\n@@ -1441,15 +1524,1 @@\n-\n-                        cb.iload(coderSlot)\n-                          .aload(bufSlot)\n-                          .loadLocal(kind, paramSlot);\n-\n-                        if (cl == int.class || cl == long.class) {\n-                            cb.iload(sizeSlots[i]);\n-                        }\n-\n-                        \/\/ suffix\n-                        cb.aload(constantsSlot)\n-                           .ldc(i + 1)\n-                           .aaload();\n-\n-                        cb.invokestatic(CD_StringConcatHelper, \"append\", methodTypeDesc);\n+                        cb.loadLocal(kind, paramSlot);\n@@ -1457,1 +1526,1 @@\n-                    cb.istore(lengthSlot);\n+                    cb.invokestatic(concatClass, \"prepend\", ConstantUtils.methodTypeDesc(prependArgs));\n@@ -1464,1 +1533,1 @@\n-                      .invokespecial(CD_String, \"<init>\", MTD_STRING_INIT)\n+                      .invokespecial(CD_String, INIT_NAME, MTD_STRING_INIT)\n@@ -1467,0 +1536,6 @@\n+            };\n+        }\n+\n+        static boolean needStringOf(Class<?> cl) {\n+            return cl != int.class && cl != long.class && cl != boolean.class && cl != char.class;\n+        }\n@@ -1468,2 +1543,11 @@\n-                static boolean needStringOf(Class<?> cl) {\n-                    return cl != int.class && cl != long.class && cl != boolean.class && cl != char.class;\n+        static boolean maybeUTF16(Class<?> cl) {\n+            return cl == char.class || (!cl.isPrimitive()\n+                    && cl != Byte.class && cl != Short.class && cl != Integer.class\n+                    && cl != Long.class && cl != Boolean.class);\n+        }\n+\n+        static int maybeUTF16ParameterCount(MethodType args) {\n+            int count = 0;\n+            for (int i = 0; i < args.parameterCount(); i++) {\n+                if (maybeUTF16(args.parameterType(i))) {\n+                    count++;\n@@ -1471,0 +1555,3 @@\n+            }\n+            return count;\n+        }\n@@ -1472,4 +1559,29 @@\n-                static boolean maybyUTF16(Class<?> cl) {\n-                    return cl == char.class || (!cl.isPrimitive()\n-                        && cl != Byte.class && cl != Short.class && cl != Integer.class\n-                        && cl != Long.class && cl != Boolean.class);\n+        private static Consumer<CodeBuilder> generateLengthMethod(MethodType lengthArgs) {\n+            return new Consumer<CodeBuilder>() {\n+                @Override\n+                public void accept(CodeBuilder cb) {\n+                    int paramCount = lengthArgs.parameterCount(),\n+                        lengthSlot = 0,\n+                        nextSlot   = 1;\n+                    cb.iload(lengthSlot);\n+                    for (int i = 1; i < paramCount; i++) {\n+                        var cl   = lengthArgs.parameterType(i);\n+                        var kind = TypeKind.from(cl);\n+                        MethodTypeDesc methodTypeDesc;\n+                        if (cl == int.class) {\n+                            methodTypeDesc = MTD_int_int;\n+                        } else if (cl == long.class) {\n+                            methodTypeDesc = MTD_int_long;\n+                        } else if (cl == char.class) {\n+                            methodTypeDesc = MTD_int_char;\n+                        } else if (cl == boolean.class) {\n+                            methodTypeDesc = MTD_int_boolean;\n+                        } else {\n+                            methodTypeDesc = MTD_int_String;\n+                        }\n+                        cb.loadLocal(kind, nextSlot)\n+                           .invokestatic(CD_StringConcatHelper, \"stringSize\", methodTypeDesc)\n+                           .iadd();\n+                        nextSlot += kind.slotSize();\n+                    }\n+                    cb.ireturn();\n@@ -1480,9 +1592,83 @@\n-        \/**\n-         * The generated class is in the same package as the host class as\n-         * it's the implementation of the string concatenation for the host\n-         * class.\n-         *\/\n-        private static String getClassName(Class<?> hostClass) {\n-            String name = hostClass.isHidden() ? hostClass.getName().replace('\/', '_')\n-                    : hostClass.getName();\n-            return name + \"$$StringConcat\";\n+        private static Consumer<CodeBuilder> generateCoderMethod(MethodType coderArgs) {\n+            return new Consumer<CodeBuilder>() {\n+                @Override\n+                public void accept(CodeBuilder cb) {\n+                    \/*\n+                     * return coder | argN.coder() | ... | arg1.coder() + arg0.coder();\n+                     *\/\n+                    int coderSlot = 0;\n+                    cb.iload(coderSlot);\n+                    for (int i = 1; i < coderArgs.parameterCount(); i++) {\n+                        var cl = coderArgs.parameterType(i);\n+                        int paramSlot = i;\n+                        cb.loadLocal(TypeKind.from(cl), paramSlot);\n+                        if (cl == char.class) {\n+                            cb.invokestatic(CD_StringConcatHelper, \"stringCoder\", MTD_byte_char);\n+                        } else {\n+                            cb.invokevirtual(CD_String, \"coder\", MTD_byte);\n+                        }\n+                        cb.ior();\n+                    }\n+                    cb.ireturn();\n+                }\n+            };\n+        }\n+\n+        private static Consumer<CodeBuilder> generatePrependMethod(MethodType args) {\n+            return new Consumer<CodeBuilder>() {\n+                @Override\n+                public void accept(CodeBuilder cb) {\n+                    int paramCount = args.parameterCount();\n+\n+                    \/\/ Compute parameter variable slots\n+                    int lengthSlot    = 0,\n+                        coderSlot     = 1,\n+                        bufSlot       = 2,\n+                        constantsSlot = 3,\n+                        nextSlot      = 4;\n+                    int[] paramSlots  = new int[paramCount];\n+                    for (int i = 0; i < paramCount; i++) {\n+                        paramSlots[i] = nextSlot;\n+                        nextSlot     += (args.parameterType(i) == long.class ? 2 : 1);\n+                    }\n+\n+                    \/*\n+                     * \/\/ StringConcatHelper.prepend\n+                     * return prepend(prepend(prepend(prepend(\n+                     *         prepend(apppend(prepend(prepend(length,\n+                     *              buf, str7, constant[7]), buf, str6, constant[6]),\n+                     *              buf, str5, constant[5]), buf, arg4, constant[4]),\n+                     *              buf, arg3, constant[3]), buf, arg2, constant[2]),\n+                     *              buf, arg1, constant[1]), buf, arg0, constant[0]);\n+                     *\/\n+                    cb.iload(lengthSlot);\n+                    for (int i = paramCount - 1; i >= 0; i--) {\n+                        int paramSlot = paramSlots[i];\n+                        var cl = args.parameterType(i);\n+                        var kind = TypeKind.from(cl);\n+\n+                        MethodTypeDesc methodTypeDesc;\n+                        if (cl == int.class) {\n+                            methodTypeDesc = PREPEND_int;\n+                        } else if (cl == long.class) {\n+                            methodTypeDesc = PREPEND_long;\n+                        } else if (cl == boolean.class) {\n+                            methodTypeDesc = PREPEND_boolean;\n+                        } else if (cl == char.class) {\n+                            methodTypeDesc = PREPEND_char;\n+                        } else {\n+                            kind = TypeKind.from(String.class);\n+                            methodTypeDesc = PREPEND_String;\n+                        }\n+\n+                        cb.iload(coderSlot)\n+                          .aload(bufSlot)\n+                          .loadLocal(kind, paramSlot)\n+                          .aload(constantsSlot)\n+                          .ldc(i)\n+                          .aaload()\n+                          .invokestatic(CD_StringConcatHelper, \"prepend\", methodTypeDesc);\n+                    }\n+                    cb.ireturn();\n+                }\n+            };\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":427,"deletions":241,"binary":false,"changes":668,"status":"modified"},{"patch":"@@ -449,0 +449,2 @@\n+    Object stringConcat1(String[] constants);\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -151,0 +151,30 @@\n+    @Benchmark\n+    public String concatConstStringConst() {\n+        return \"string\" + stringValue + \"string\";\n+    }\n+\n+    @Benchmark\n+    public String concatConstIntConst() {\n+        return \"string\" + intValue + \"string\";\n+    }\n+\n+    @Benchmark\n+    public String concatConstIntegerConst() {\n+        return \"string\" + integerValue + \"string\";\n+    }\n+\n+    @Benchmark\n+    public String concatConstFloatConst() {\n+        return \"string\" + floatValue + \"string\";\n+    }\n+\n+    @Benchmark\n+    public String concatConstObjectConst() {\n+        return \"string\" + objectValue + \"string\";\n+    }\n+\n+    @Benchmark\n+    public String concatConstBooleanConst() {\n+        return \"string\" + booleanValue + \"string\";\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringConcat.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"}]}