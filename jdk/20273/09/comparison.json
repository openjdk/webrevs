{"files":[{"patch":"@@ -961,1 +961,3 @@\n-                m.ensureTypeVisible(m.getDeclaringClass());\n+                if (allowedModes != LM_TRUSTED) {\n+                    m.ensureTypeVisible(m.getDeclaringClass());\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemberName.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n@@ -49,0 +50,1 @@\n+import static java.lang.constant.ConstantDescs.*;\n@@ -112,0 +114,1 @@\n+    private static final boolean GENERATE_INLINE_COPY;\n@@ -116,0 +119,3 @@\n+\n+        String generateInlineCopy = VM.getSavedProperty(\"java.lang.invoke.StringConcat.generateInlineCopy\");\n+        GENERATE_INLINE_COPY = generateInlineCopy != null ? \"true\".equalsIgnoreCase(generateInlineCopy) : true;\n@@ -145,0 +151,5 @@\n+    @SuppressWarnings(\"removal\")\n+    private static boolean isGenerateInlineCopy() {\n+        return GENERATE_INLINE_COPY && System.getSecurityManager() == null;\n+    }\n+\n@@ -373,0 +384,1 @@\n+        MethodHandle mh = null;\n@@ -375,6 +387,7 @@\n-                return new ConstantCallSite(\n-                        generateMHInlineCopy(concatType, constantStrings)\n-                                .viewAsType(concatType, true));\n-            } else {\n-                return new ConstantCallSite(\n-                        SimpleStringBuilderStrategy.generate(lookup, concatType, constantStrings));\n+                mh = generateMHInlineCopy(concatType, constantStrings);\n+                if (mh != null) {\n+                    mh = mh.viewAsType(concatType, true);\n+                }\n+            }\n+            if (mh == null) {\n+                mh = SimpleStringBuilderStrategy.generate(lookup, concatType, constantStrings);\n@@ -382,0 +395,1 @@\n+            return new ConstantCallSite(mh);\n@@ -503,0 +517,5 @@\n+\n+        if (isGenerateInlineCopy()) {\n+            return null;\n+        }\n+\n@@ -1067,0 +1086,20 @@\n+        static final ClassDesc CD_StringConcatHelper = ClassDesc.ofDescriptor(\"Ljava\/lang\/StringConcatHelper;\");\n+        static final ClassDesc CD_byteArray = ClassDesc.ofDescriptor(\"[B\");\n+        static final MethodTypeDesc OBJECT_TO_STRING = MethodTypeDesc.of(CD_String, CD_Object);\n+        static final MethodTypeDesc FLOAT_TO_STRING = MethodTypeDesc.of(CD_String, CD_float);\n+        static final MethodTypeDesc DOUBLE_TO_STRING = MethodTypeDesc.of(CD_String, CD_double);\n+        static final MethodTypeDesc NEW_ARRAY_SUFFIX = MethodTypeDesc.of(CD_byteArray, CD_String, CD_long);\n+        static final MethodTypeDesc NEW_STRING = MethodTypeDesc.of(CD_String, CD_byteArray, CD_long);\n+\n+        static final MethodTypeDesc Mix_int = MethodTypeDesc.of(CD_long, CD_long, CD_int);\n+        static final MethodTypeDesc MIX_long = MethodTypeDesc.of(CD_long, CD_long, CD_long);\n+        static final MethodTypeDesc Mix_boolean = MethodTypeDesc.of(CD_long, CD_long, CD_boolean);\n+        static final MethodTypeDesc Mix_char = MethodTypeDesc.of(CD_long, CD_long, CD_char);\n+        static final MethodTypeDesc Mix_String = MethodTypeDesc.of(CD_long, CD_long, CD_String);\n+\n+        static final MethodTypeDesc PREPEND_int = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_int, CD_String);\n+        static final MethodTypeDesc PREPEND_long = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_long, CD_String);\n+        static final MethodTypeDesc PREPEND_boolean = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_boolean, CD_String);\n+        static final MethodTypeDesc PREPEND_char = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_char, CD_String);\n+        static final MethodTypeDesc PREPEND_String = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_String, CD_String);\n+\n@@ -1080,1 +1119,2 @@\n-            String className = getClassName(lookup.lookupClass());\n+            lookup = MethodHandles.Lookup.IMPL_LOOKUP;\n+            String className = getClassName(String.class);\n@@ -1082,0 +1122,1 @@\n+            boolean generateInlineCopy = GENERATE_INLINE_COPY && args.parameterCount() <= HIGH_ARITY_THRESHOLD;\n@@ -1090,1 +1131,3 @@\n-                                        generateMethod(constants, args));\n+                                        generateInlineCopy\n+                                                ? generateInlineCopyMethod(constants, args)\n+                                                : generateMethod(constants, args));\n@@ -1093,4 +1136,3 @@\n-                Lookup hiddenLookup = lookup.makeHiddenClassDefiner(className, classBytes, SET_OF_STRONG, DUMPER)\n-                                            .defineClassAsLookup(true);\n-                Class<?> innerClass = hiddenLookup.lookupClass();\n-                return hiddenLookup.findStatic(innerClass, METHOD_NAME, args);\n+                var hiddenClass = lookup.makeHiddenClassDefiner(className, classBytes, SET_OF_STRONG, DUMPER)\n+                        .defineClass(true, null);\n+                return lookup.findStatic(hiddenClass, METHOD_NAME, args);\n@@ -1146,0 +1188,212 @@\n+        \/**\n+         * Generate InlineCopy-based code. <p>\n+         *\n+         * The following is an example of the generated target code:\n+         *\n+         * <blockquote><pre>\n+         * import static java.lang.StringConcatHelper.mix;\n+         * import static java.lang.StringConcatHelper.prepend;\n+         * import static java.lang.StringConcatHelper.newString;\n+         * import static java.lang.StringConcatHelper.newArray;\n+         *\n+         * public static String concat(int arg0, long arg1, boolean arg2, char arg3, String arg4, float arg5, double arg6, Object arg7) {\n+         *     String constant0, constant1, ..., constant8;\n+         *     int lengthCoder = ...;\n+         *\n+         *     \/\/ String arg\n+         *     arg4 = stringOf(arg4);\n+         *\n+         *     \/\/ Types other than byte\/short\/int\/long\/boolean\/String require a local variable to store\n+         *     String str5 = stringOf(arg5);\n+         *     String str6 = stringOf(arg6);\n+         *     String str7 = stringOf(arg7);\n+         *\n+         *     lengthCoder = mix(mix(mix(mix(mix(mix(mix(mix(lengthCoder, arg0), arg1), arg3), arg4), str5), str6), str7)\n+         *\n+         *     String suffix = constant9;\n+         *     lengthCoder -= suffix.length();\n+         *     byte[] buf = newArray(suffix, lengthCoder);\n+         *\n+         *     lengthCoder = prepend(lengthCoder, buf, str7, constant7);\n+         *     lengthCoder = prepend(lengthCoder, buf, str6, constant6);\n+         *     lengthCoder = prepend(lengthCoder, buf, str5, constant5);\n+         *     lengthCoder = prepend(lengthCoder, buf, arg4, constant4);\n+         *     lengthCoder = prepend(lengthCoder, buf, arg3, constant3);\n+         *     lengthCoder = prepend(lengthCoder, buf, arg2, constant2);\n+         *     lengthCoder = prepend(lengthCoder, buf, arg1, constant1);\n+         *     lengthCoder = prepend(lengthCoder, buf, arg0, constant0);\n+         *\n+         *     return newArray(buf, lengthCoder);\n+         * }\n+         * <\/pre><\/blockquote>\n+         *\/\n+        private static Consumer<CodeBuilder> generateInlineCopyMethod(String[] constants, MethodType args) {\n+            return new Consumer<CodeBuilder>() {\n+                @Override\n+                public void accept(CodeBuilder cb) {\n+                    long initalLengthCoder = JLA.stringConcatInitialCoder();\n+                    for (String constant : constants) {\n+                        if (constant != null) {\n+                            initalLengthCoder = JLA.stringConcatMix(initalLengthCoder, constant);\n+                        }\n+                    }\n+\n+                    int paramCount = args.parameterCount();\n+\n+                    \/\/ Compute parameter and local string variable slots\n+                    int   paramSlotsTotalSize = 0;\n+                    int[] paramSlots          = new int[paramCount];\n+                    for (int i = 0; i < paramCount; i++) {\n+                        Class<?> cl = args.parameterType(i);\n+                        TypeKind kind = TypeKind.from(cl);\n+                        paramSlots[i] = paramSlotsTotalSize;\n+                        paramSlotsTotalSize += kind.slotSize();\n+                    }\n+\n+                    int lengthCoderSloat = paramSlotsTotalSize;\n+                    int bufSlot          = paramSlotsTotalSize + 2;\n+\n+                    \/*\n+                     * store string variants:\n+                     *\n+                     * str0 = Float.toString(args(0));\n+                     * str1 = Double.toString(args(1));\n+                     * ...\n+                     * strN = StringConcatHelper.stringOf(args(N));\n+                     *\n+                     *\/\n+                    for (int i = 0, strings = 0; i < paramCount; i++) {\n+                        Class<?> cl = args.parameterType(i);\n+                        TypeKind kind = TypeKind.from(cl);\n+                        if (needStringOf(cl)) {\n+                            ClassDesc classDesc;\n+                            MethodTypeDesc methodTypeDesc;\n+                            String methodName;\n+                            if (cl == float.class) {\n+                                classDesc = CD_Float;\n+                                methodName = \"toString\";\n+                                methodTypeDesc = FLOAT_TO_STRING;\n+                            } else if (cl == double.class) {\n+                                classDesc = CD_Double;\n+                                methodName = \"toString\";\n+                                methodTypeDesc = DOUBLE_TO_STRING;\n+                            } else {\n+                                classDesc = CD_StringConcatHelper;\n+                                methodName = \"stringOf\";\n+                                methodTypeDesc = OBJECT_TO_STRING;\n+                            }\n+\n+                            \/\/ Types other than byte\/short\/int\/long\/boolean\/String require a local variable to store\n+                            int strLocalSlot = (cl == String.class)\n+                                    ? paramSlots[i]\n+                                    : bufSlot + (++strings);\n+                            cb.loadLocal(kind, paramSlots[i])\n+                              .invokestatic(classDesc, methodName, methodTypeDesc)\n+                              .astore(strLocalSlot);\n+                            if (cl != String.class) {\n+                                paramSlots[i] = strLocalSlot;\n+                            }\n+                        }\n+                    }\n+\n+                    \/*\n+                     * Store init index :\n+                     *\n+                     *  lengthCoder = mix(mix(mix(mix(initalIengthCoder, arg0), arg1), arg2), ....);\n+                     *  ...\n+                     *\n+                     *\/\n+                    cb.loadConstant(initalLengthCoder);\n+                    for (int i = 0; i < paramCount; i++) {\n+                        Class<?> cl = args.parameterType(i);\n+                        TypeKind kind = TypeKind.from(cl);\n+                        int paramSlot = paramSlots[i];\n+\n+                        ClassDesc classDesc = CD_StringConcatHelper;\n+                        MethodTypeDesc methodTypeDesc;\n+                        if (cl == byte.class || cl == short.class || cl == int.class) {\n+                            classDesc = CD_Integer;\n+                            methodTypeDesc = Mix_int;\n+                        } else if (cl == long.class) {\n+                            classDesc = CD_Long;\n+                            methodTypeDesc = MIX_long;\n+                        } else if (cl == boolean.class) {\n+                            methodTypeDesc = Mix_boolean;\n+                        } else if (cl == char.class) {\n+                            methodTypeDesc = Mix_char;\n+                        } else {\n+                            methodTypeDesc = Mix_String;\n+                            kind = TypeKind.from(String.class);\n+                        }\n+                        cb.loadLocal(kind, paramSlot)\n+                          .invokestatic(CD_StringConcatHelper, \"mix\", methodTypeDesc);\n+                    }\n+                    cb.lstore(lengthCoderSloat);\n+\n+                    String suffix = constants[constants.length - 1];\n+                    if (suffix == null) {\n+                        suffix = \"\";\n+                    }\n+                    if (!suffix.isEmpty()) {\n+                        cb.lload(lengthCoderSloat)\n+                          .ldc((long) suffix.length())\n+                          .lsub()\n+                          .lstore(lengthCoderSloat);\n+                    }\n+\n+                    \/*\n+                     * Allocate buffer :\n+                     *  buf = StringConcatHelper.newArray(suffix, lengthCoder)\n+                     *\/\n+                    cb.ldc(suffix)\n+                      .lload(lengthCoderSloat)\n+                      .invokestatic(CD_StringConcatHelper, \"newArrayWithSuffix\", NEW_ARRAY_SUFFIX)\n+                      .astore(bufSlot);\n+\n+                    cb.lload(lengthCoderSloat);\n+                    for (int i = paramCount - 1; i >= 0; i--) {\n+                        int paramSlot = paramSlots[i];\n+                        Class<?> cl = args.parameterType(i);\n+                        TypeKind kind = TypeKind.from(cl);\n+\n+                        \/*\n+                         * prepend arguments :\n+                         *  lengthCoder = prepend(prepend(prepend(lengthCoder, buf, arg0), buf, arg1), ...)\n+                         *\/\n+                        MethodTypeDesc methodTypeDesc;\n+                        if (cl == byte.class || cl == short.class || cl == int.class) {\n+                            methodTypeDesc = PREPEND_int;\n+                        } else if (cl == long.class) {\n+                            methodTypeDesc = PREPEND_long;\n+                        } else if (cl == boolean.class) {\n+                            methodTypeDesc = PREPEND_boolean;\n+                        } else if (cl == char.class) {\n+                            methodTypeDesc = PREPEND_char;\n+                        } else {\n+                            methodTypeDesc = PREPEND_String;\n+                            kind = TypeKind.from(String.class);\n+                        }\n+                        String constant = constants[i];\n+                        if (constant == null) {\n+                            constant = \"\";\n+                        }\n+                        cb.aload(bufSlot)\n+                          .loadLocal(kind, paramSlot)\n+                          .ldc(constant)\n+                          .invokestatic(CD_StringConcatHelper, \"prepend\", methodTypeDesc);\n+                    }\n+                    cb.lstore(lengthCoderSloat);\n+\n+                    cb.aload(bufSlot)\n+                      .lload(lengthCoderSloat)\n+                      .invokestatic(CD_StringConcatHelper, \"newString\", NEW_STRING)\n+                      .areturn();\n+                }\n+\n+                static boolean needStringOf(Class<?> cl) {\n+                    return cl != byte.class && cl != short.class   && cl != int.class\n+                        && cl != long.class && cl != boolean.class && cl != char.class;\n+                }\n+            };\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":266,"deletions":12,"binary":false,"changes":278,"status":"modified"}]}