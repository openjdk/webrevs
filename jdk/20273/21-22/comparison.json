{"files":[{"patch":"@@ -381,0 +381,2 @@\n+            } else {\n+                mh = mh.viewAsType(concatType, true);\n@@ -382,1 +384,0 @@\n-            mh = mh.viewAsType(concatType, true);\n@@ -1095,1 +1096,0 @@\n-            MethodType erasedArgs = args.erase().changeReturnType(String.class);\n@@ -1103,1 +1103,1 @@\n-                                        ConstantUtils.methodTypeDesc(erasedArgs),\n+                                        ConstantUtils.methodTypeDesc(args),\n@@ -1105,1 +1105,1 @@\n-                                        generateMethod(constants, erasedArgs));\n+                                        generateMethod(constants, args));\n@@ -1110,1 +1110,1 @@\n-                return lookup.findStatic(hiddenClass, METHOD_NAME, erasedArgs);\n+                return lookup.findStatic(hiddenClass, METHOD_NAME, args);\n@@ -1180,34 +1180,0 @@\n-\n-                        \/*\n-                         * Stringify by storing String variants in\n-                         * repurposed argument slots:\n-                         *\n-                         * arg0 = Float.toString(args0);\n-                         * arg1 = Double.toString(arg1);\n-                         * ...\n-                         * argN = StringConcatHelper.stringOf(argN);\n-                         *\n-                         *\n-                         *\/\n-                        if (needStringOf(cl)) {\n-                            ClassDesc classDesc;\n-                            MethodTypeDesc methodTypeDesc;\n-                            String methodName;\n-                            if (cl == float.class) {\n-                                classDesc = CD_Float;\n-                                methodName = \"toString\";\n-                                methodTypeDesc = FLOAT_TO_STRING;\n-                            } else if (cl == double.class) {\n-                                classDesc = CD_Double;\n-                                methodName = \"toString\";\n-                                methodTypeDesc = DOUBLE_TO_STRING;\n-                            } else {\n-                                classDesc = CD_StringConcatHelper;\n-                                methodName = \"stringOf\";\n-                                methodTypeDesc = OBJECT_TO_STRING;\n-                            }\n-\n-                            cb.loadLocal(kind, paramSlots[i])\n-                              .invokestatic(classDesc, methodName, methodTypeDesc)\n-                              .astore(paramSlots[i]);\n-                        }\n@@ -1217,1 +1183,45 @@\n-                    int bufSlot         = paramSlotsTotalSize + 2;\n+                    int bufSlot         = paramSlotsTotalSize + TypeKind.from(long.class).slotSize();\n+\n+                    \/*\n+                     * store string variants:\n+                     *\n+                     * str0 = Float.toString(args(0));\n+                     * str1 = Double.toString(args(1));\n+                     * ...\n+                     * strN = StringConcatHelper.stringOf(args(N));\n+                     *\n+                     *\/\n+                    for (int i = 0, strings = 0; i < paramCount; i++) {\n+                        Class<?> cl = args.parameterType(i);\n+                        if (!needStringOf(cl)) {\n+                            continue;\n+                        }\n+\n+                        ClassDesc classDesc;\n+                        MethodTypeDesc methodTypeDesc;\n+                        String methodName;\n+                        if (cl == float.class) {\n+                            classDesc = CD_Float;\n+                            methodName = \"toString\";\n+                            methodTypeDesc = FLOAT_TO_STRING;\n+                        } else if (cl == double.class) {\n+                            classDesc = CD_Double;\n+                            methodName = \"toString\";\n+                            methodTypeDesc = DOUBLE_TO_STRING;\n+                        } else {\n+                            classDesc = CD_StringConcatHelper;\n+                            methodName = \"stringOf\";\n+                            methodTypeDesc = OBJECT_TO_STRING;\n+                        }\n+\n+                        \/\/ Types other than byte\/short\/int\/long\/boolean\/String require a local variable to store\n+                        int strLocalSlot = (cl == String.class)\n+                                ? paramSlots[i]\n+                                : bufSlot + (++strings);\n+                        cb.loadLocal(TypeKind.from(cl), paramSlots[i])\n+                          .invokestatic(classDesc, methodName, methodTypeDesc)\n+                          .astore(strLocalSlot);\n+                        if (cl != String.class) {\n+                            paramSlots[i] = strLocalSlot;\n+                        }\n+                    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":50,"deletions":40,"binary":false,"changes":90,"status":"modified"}]}