{"files":[{"patch":"@@ -473,9 +473,0 @@\n-    \/**\n-     * return stirngSize of value\n-     * @param value       value\n-     * @return            1\n-     *\/\n-    static int stringSize(char value) {\n-        return 1;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemberName.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import java.lang.classfile.Label;\n@@ -1087,1 +1086,0 @@\n-        static final MethodTypeDesc MTD_int_char      = MethodTypeDesc.of(CD_int, CD_char);\n@@ -1108,0 +1106,1 @@\n+        static final MethodType CONSTRUCTOR_METHOD_TYPE = MethodType.methodType(void.class, String[].class);\n@@ -1135,0 +1134,3 @@\n+        \/**\n+         * The parameter types are normalized into five types: int,long,boolean,char,Object\n+         *\/\n@@ -1156,0 +1158,10 @@\n+        \/**\n+         * Construct the MethodType of the prepend method, The parameters only support 5 types:\n+         * int\/long\/char\/boolean\/String. Not int\/long\/char\/boolean type, use String type<p>\n+         *\n+         * The following is an example of the generated target code:\n+         * <blockquote><pre>\n+         *  int prepend(int length, byte coder, byte[] buff,  String[] constants\n+         *      int arg0, long arg1, boolean arg2, char arg3, String arg5)\n+         * <\/pre><\/blockquote>\n+         *\/\n@@ -1159,9 +1171,4 @@\n-\n-            int lengthSlot    = 0,\n-                coderSlot     = 1,\n-                bufSlot       = 2,\n-                constantsSlot = 3;\n-            paramTypes[lengthSlot   ] = int.class;\n-            paramTypes[coderSlot    ] = byte.class;\n-            paramTypes[bufSlot      ] = byte[].class;\n-            paramTypes[constantsSlot] = String[].class;\n+            paramTypes[0] = int.class;      \/\/ length\n+            paramTypes[1] = byte.class;     \/\/ coder\n+            paramTypes[2] = byte[].class;   \/\/ buff\n+            paramTypes[3] = String[].class; \/\/ constants\n@@ -1179,0 +1186,4 @@\n+        \/**\n+         * Construct the MethodType of the coder method,\n+         * The first parameter is the initialized coder, Only parameter types that can be UTF16 are added.\n+         *\/\n@@ -1182,1 +1193,1 @@\n-            paramTypes.add(int.class);\n+            paramTypes.add(int.class); \/\/ init coder\n@@ -1185,1 +1196,4 @@\n-                if (cl == char.class) {\n+                if(maybeUTF16(cl)){\n+                    if (cl != char.class) {\n+                        cl = String.class;\n+                    }\n@@ -1187,2 +1201,0 @@\n-                } else if(needStringOf(cl) && maybeUTF16(cl)){\n-                    paramTypes.add(String.class);\n@@ -1194,0 +1206,4 @@\n+        \/**\n+         * Construct the MethodType of the length method,\n+         * The first parameter is the initialized length, Only parameter types that can be UTF16 are added.\n+         *\/\n@@ -1239,1 +1255,0 @@\n-            int maybeUTF16ParamCount = maybeUTF16ParameterCount(args);\n@@ -1285,1 +1300,1 @@\n-                            if (maybeUTF16ParamCount > 0) {\n+                            if (parameterMaybeUTF16(args)) {\n@@ -1302,2 +1317,1 @@\n-                var constructorHandle = lookup.findConstructor(hiddenClass, MethodType.methodType(void.class, String[].class));\n-                var instance = hiddenClass.cast(constructorHandle.invoke(constants));\n+                var constructorHandle = lookup.findConstructor(hiddenClass, CONSTRUCTOR_METHOD_TYPE);\n@@ -1306,0 +1320,1 @@\n+                var instance = hiddenClass.cast(constructorHandle.invoke(constants));\n@@ -1334,10 +1349,0 @@\n-         *          int length = this.length();\n-         *          int coder = this.coder();\n-         *          String[] constants = this.constants;\n-         *\n-         *          \/\/ String arg\n-         *          arg4 = stringOf(arg4);\n-         *          arg5 = stringOf(arg5);\n-         *          arg6 = stringOf(arg6);\n-         *          arg7 = stringOf(arg7);\n-         *\n@@ -1345,6 +1350,4 @@\n-         *          arg5 stringOf(arg5);\n-         *          arg5 stringOf(arg6);\n-         *          arg = stringOf(arg7);\n-         *\n-         *          coder  = coder(this.coder, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);\n-         *          length = length(this.length, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);\n+         *          String str4 = stringOf(arg4);\n+         *          String str5 = stringOf(arg5);\n+         *          String str6 = stringOf(arg6);\n+         *          String str7 = stringOf(arg7);\n@@ -1352,0 +1355,3 @@\n+         *          int coder  = coder(this.coder, arg0, arg1, arg2, arg3, str4, str5, str6, str7);\n+         *          int length = length(this.length, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);\n+         *          String[] constants = this.constants;\n@@ -1354,1 +1360,1 @@\n-         *          prepend(length, coder, buf, constants, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);\n+         *          prepend(length, coder, buf, constants, arg0, arg1, arg2, arg3, str4, str5, str6, str7);\n@@ -1361,2 +1367,2 @@\n-         *          return length | stringSize(arg0) | stringSize(arg1) | stringSize(arg2) | stringSize(arg4)\n-         *                    | stringSize(arg5) | stringSize(arg6) | stringSize(arg7);\n+         *          return length + stringSize(arg0) + stringSize(arg1) + stringSize(arg2) + 1 + stringSize(arg4)\n+         *                    + stringSize(arg5) + stringSize(arg6) + stringSize(arg7);\n@@ -1365,2 +1371,2 @@\n-         *      static int cocder(int coder, char arg3, String arg4, String arg5, String arg6, String arg7) {\n-         *          return coder | stringCoder(arg3) | arg4.coder() | arg5.coder() | arg6.coder() | arg7.coder();\n+         *      static int cocder(int coder, char arg3, String str4, String str5, String str6, String str7) {\n+         *          return coder | stringCoder(arg3) | str4.coder() | str5.coder() | str6.coder() | str7.coder();\n@@ -1371,1 +1377,1 @@\n-         *                     String arg4, String arg5, String arg6, String arg7) {\n+         *                     String str4, String str6, String str6, String str7) {\n@@ -1376,1 +1382,1 @@\n-         *                       buf, str5, constant[5]), buf, arg4, constant[4]),\n+         *                       buf, str5, constant[5]), buf, str4, constant[4]),\n@@ -1393,2 +1399,0 @@\n-                    int paramCount = args.parameterCount();\n-\n@@ -1396,1 +1400,2 @@\n-                    int thisSlot  = 0,\n+                    int paramCount = args.parameterCount(),\n+                        thisSlot  = 0,\n@@ -1405,1 +1410,0 @@\n-                    int maybeUTF16ParamCount = maybeUTF16ParameterCount(args);\n@@ -1416,17 +1420,2 @@\n-                        constantsSlot = nextSlot + 3;\n-\n-                    \/*\n-                     * Store init length and coder :\n-                     *  int length         = this.length();\n-                     *  int coder          = this.coder();\n-                     *  String[] constants = this.constants;\n-                     *\/\n-                    cb.aload(thisSlot)\n-                      .getfield(concatClass, \"length\", CD_int)\n-                      .istore(lengthSlot)\n-                      .aload(thisSlot)\n-                      .getfield(concatClass, \"coder\", CD_byte)\n-                      .istore(coderSlot)\n-                      .aload(thisSlot)\n-                      .getfield(concatClass, \"constants\", CD_Array_String)\n-                      .astore(constantsSlot);\n+                        constantsSlot = nextSlot + 3,\n+                        suffixSlot    = nextSlot + 4;\n@@ -1435,0 +1424,4 @@\n+                     * Types other than int\/long\/char\/boolean require local variables to store the result of stringOf.\n+                     *\n+                     * stringSlots stores the slots of parameters relative to local variables\n+                     *\n@@ -1457,5 +1450,6 @@\n-                    if (maybeUTF16ParamCount > 0) {\n-                        \/*\n-                         * coder = StringConcatHelper.stringCoder(argN) | ... | coder;\n-                         *\/\n-                        cb.iload(coderSlot);\n+                    \/*\n+                     * coder = coder(this.coder, arg0, arg1, ... argN);\n+                     *\/\n+                    cb.aload(thisSlot)\n+                      .getfield(concatClass, \"coder\", CD_byte);\n+                    if (parameterMaybeUTF16(args)) {\n@@ -1464,4 +1458,6 @@\n-                            if (cl == char.class) {\n-                                cb.loadLocal(TypeKind.from(cl), paramSlots[i]);\n-                            } else if (needStringOf(cl) && maybeUTF16(cl)) {\n-                                cb.aload(stringSlots[i]);\n+                            if (maybeUTF16(cl)) {\n+                                if (cl == char.class) {\n+                                    cb.loadLocal(TypeKind.from(cl), paramSlots[i]);\n+                                } else {\n+                                    cb.aload(stringSlots[i]);\n+                                }\n@@ -1470,2 +1466,1 @@\n-                        cb.invokestatic(concatClass, \"coder\", ConstantUtils.methodTypeDesc(coderArgs))\n-                          .istore(coderSlot);\n+                        cb.invokestatic(concatClass, \"coder\", ConstantUtils.methodTypeDesc(coderArgs));\n@@ -1473,0 +1468,1 @@\n+                    cb.istore(coderSlot);\n@@ -1474,1 +1470,5 @@\n-                    cb.iload(lengthSlot);\n+                    \/*\n+                     * length = length(this.length, arg0, arg1, ..., argN);\n+                     *\/\n+                    cb.aload(thisSlot)\n+                      .getfield(concatClass, \"length\", CD_int);\n@@ -1476,1 +1476,1 @@\n-                        var cl   = args.parameterType(i);\n+                        var cl        = args.parameterType(i);\n@@ -1487,1 +1487,3 @@\n-                     * length -= constants[paranCount].length();\n+                     * String[] constants = this.constants;\n+                     * suffix = constants[paranCount];\n+                     * length -= suffix.length();\n@@ -1489,1 +1491,4 @@\n-                    cb.aload(constantsSlot)\n+                    cb.aload(thisSlot)\n+                      .getfield(concatClass, \"constants\", CD_Array_String)\n+                      .dup()\n+                      .astore(constantsSlot)\n@@ -1492,0 +1497,2 @@\n+                      .dup()\n+                      .astore(suffixSlot)\n@@ -1499,1 +1506,1 @@\n-                     *  buf = StringConcatHelper.newArrayWithSuffix(constants[paranCount], length, coder)\n+                     *  buf = newArrayWithSuffix(suffix, length, coder)\n@@ -1501,3 +1508,1 @@\n-                    cb.aload(constantsSlot)\n-                      .ldc(paramCount)\n-                      .aaload()\n+                    cb.aload(suffixSlot)\n@@ -1539,20 +1544,15 @@\n-        static boolean needStringOf(Class<?> cl) {\n-            return cl != int.class && cl != long.class && cl != boolean.class && cl != char.class;\n-        }\n-\n-        static boolean maybeUTF16(Class<?> cl) {\n-            return cl == char.class || (!cl.isPrimitive()\n-                    && cl != Byte.class && cl != Short.class && cl != Integer.class\n-                    && cl != Long.class && cl != Boolean.class);\n-        }\n-\n-        static int maybeUTF16ParameterCount(MethodType args) {\n-            int count = 0;\n-            for (int i = 0; i < args.parameterCount(); i++) {\n-                if (maybeUTF16(args.parameterType(i))) {\n-                    count++;\n-                }\n-            }\n-            return count;\n-        }\n-\n+        \/**\n+         * Generate coder method method. <p>\n+         *\n+         * The following is an example of the generated target code:\n+         *\n+         * <blockquote><pre>\n+         * import static java.lang.StringConcatHelper.stringSize;\n+         *\n+         * static int length(int length, int arg0, long arg1, boolean arg2, char arg3,\n+         *                  String arg4, String arg5, String arg6, String arg7) {\n+         *     return length + stringSize(arg0) + stringSize(arg1) + stringSize(arg2) + 1 + stringSize(arg4)\n+         *               + stringSize(arg5) + stringSize(arg6) + stringSize(arg7);\n+         * }\n+         * <\/pre><\/blockquote>\n+         *\/\n@@ -1571,8 +1571,2 @@\n-                        if (cl == int.class) {\n-                            methodTypeDesc = MTD_int_int;\n-                        } else if (cl == long.class) {\n-                            methodTypeDesc = MTD_int_long;\n-                        } else if (cl == char.class) {\n-                            methodTypeDesc = MTD_int_char;\n-                        } else if (cl == boolean.class) {\n-                            methodTypeDesc = MTD_int_boolean;\n+                        if (cl == char.class) {\n+                            cb.iconst_1();\n@@ -1580,1 +1574,11 @@\n-                            methodTypeDesc = MTD_int_String;\n+                            if (cl == int.class) {\n+                                methodTypeDesc = MTD_int_int;\n+                            } else if (cl == long.class) {\n+                                methodTypeDesc = MTD_int_long;\n+                            } else if (cl == boolean.class) {\n+                                methodTypeDesc = MTD_int_boolean;\n+                            } else {\n+                                methodTypeDesc = MTD_int_String;\n+                            }\n+                            cb.loadLocal(kind, nextSlot)\n+                              .invokestatic(CD_StringConcatHelper, \"stringSize\", methodTypeDesc);\n@@ -1582,3 +1586,1 @@\n-                        cb.loadLocal(kind, nextSlot)\n-                           .invokestatic(CD_StringConcatHelper, \"stringSize\", methodTypeDesc)\n-                           .iadd();\n+                        cb.iadd();\n@@ -1592,0 +1594,13 @@\n+        \/**\n+         * Generate coder method method. <p>\n+         *\n+         * The following is an example of the generated target code:\n+         *\n+         * <blockquote><pre>\n+         * import static java.lang.StringConcatHelper.stringCoder;\n+         *\n+         * static int cocder(int coder, char arg3, String str4, String str5, String str6, String str7) {\n+         *     return coder | stringCoder(arg3) | str4.coder() | str5.coder() | str6.coder() | str7.coder();\n+         * }\n+         * <\/pre><\/blockquote>\n+         *\/\n@@ -1597,1 +1612,1 @@\n-                     * return coder | argN.coder() | ... | arg1.coder() + arg0.coder();\n+                     * return coder | stringCoder(argN) | ... | arg1.coder() | arg0.coder();\n@@ -1617,0 +1632,21 @@\n+        \/**\n+         * Generate prepend method. <p>\n+         *\n+         * The following is an example of the generated target code:\n+         *\n+         * <blockquote><pre>\n+         * import static java.lang.StringConcatHelper.prepend;\n+         *\n+         * static int prepend(int length, int coder, byte[] buf, String[] constants,\n+         *                int arg0, long arg1, boolean arg2, char arg3,\n+         *                String str4, String str6, String str6, String str7) {\n+         *\n+         *     return prepend(prepend(prepend(prepend(\n+         *             prepend(prepend(prepend(prepend(length,\n+         *                  buf, str7, constant[7]), buf, str6, constant[6]),\n+         *                  buf, str5, constant[5]), buf, str4, constant[4]),\n+         *                  buf, arg3, constant[3]), buf, arg2, constant[2]),\n+         *                  buf, arg1, constant[1]), buf, arg0, constant[0]);\n+         * }\n+         * <\/pre><\/blockquote>\n+         *\/\n@@ -1621,2 +1657,0 @@\n-                    int paramCount = args.parameterCount();\n-\n@@ -1624,1 +1658,2 @@\n-                    int lengthSlot    = 0,\n+                    int paramCount    = args.parameterCount(),\n+                        lengthSlot    = 0,\n@@ -1647,2 +1682,2 @@\n-                        var cl = args.parameterType(i);\n-                        var kind = TypeKind.from(cl);\n+                        var cl        = args.parameterType(i);\n+                        var kind      = TypeKind.from(cl);\n@@ -1650,0 +1685,1 @@\n+                        \/\/ There are only 5 types of parameters: int, long, boolean, char, String\n@@ -1676,0 +1712,19 @@\n+\n+        static boolean needStringOf(Class<?> cl) {\n+            return cl != int.class && cl != long.class && cl != boolean.class && cl != char.class;\n+        }\n+\n+        static boolean maybeUTF16(Class<?> cl) {\n+            return cl == char.class || (!cl.isPrimitive()\n+                    && cl != Byte.class && cl != Short.class && cl != Integer.class\n+                    && cl != Long.class && cl != Boolean.class);\n+        }\n+\n+        static boolean parameterMaybeUTF16(MethodType args) {\n+            for (int i = 0; i < args.parameterCount(); i++) {\n+                if (maybeUTF16(args.parameterType(i))) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":175,"deletions":120,"binary":false,"changes":295,"status":"modified"}]}