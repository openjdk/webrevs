{"files":[{"patch":"@@ -425,23 +425,0 @@\n-    \/**\n-     * Allocates an uninitialized byte array based on the length and coder\n-     * information, then prepends the given suffix string at the end of the\n-     * byte array before returning it. The calling code must adjust the\n-     * indexCoder so that it's taken the coder of the suffix into account, but\n-     * subtracted the length of the suffix.\n-     *\n-     * @param suffix\n-     * @param index\n-     * @param coder\n-     * @return the newly allocated byte array\n-     *\/\n-    @ForceInline\n-    static byte[] newArray(String suffix, int index, byte coder) {\n-        byte[] buf = newArray((index + suffix.length()) << coder);\n-        if (coder == String.LATIN1) {\n-            suffix.getBytes(buf, index, String.LATIN1);\n-        } else {\n-            suffix.getBytes(buf, index, String.UTF16);\n-        }\n-        return buf;\n-    }\n-\n@@ -465,196 +442,0 @@\n-    \/**\n-     * Prepends constant and the stringly representation of value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\n-     * @param index      final char index in the buffer\n-     * @param the        coder of buf\n-     * @param buf        buffer to append to\n-     * @param value      boolean value to encode\n-     * @param prefix     a constant to prepend before value\n-     * @return           updated index (coder value retained)\n-     *\/\n-    static long prepend(int index, byte coder, byte[] buf, boolean value, String prefix) {\n-        if (coder == String.LATIN1) {\n-            if (value) {\n-                index -= 4;\n-                buf[index] = 't';\n-                buf[index + 1] = 'r';\n-                buf[index + 2] = 'u';\n-                buf[index + 3] = 'e';\n-            } else {\n-                index -= 5;\n-                buf[index] = 'f';\n-                buf[index + 1] = 'a';\n-                buf[index + 2] = 'l';\n-                buf[index + 3] = 's';\n-                buf[index + 4] = 'e';\n-            }\n-            index -= prefix.length();\n-            prefix.getBytes(buf, index, String.LATIN1);\n-        } else {\n-            if (value) {\n-                index -= 4;\n-                StringUTF16.putChar(buf, index, 't');\n-                StringUTF16.putChar(buf, index + 1, 'r');\n-                StringUTF16.putChar(buf, index + 2, 'u');\n-                StringUTF16.putChar(buf, index + 3, 'e');\n-            } else {\n-                index -= 5;\n-                StringUTF16.putChar(buf, index, 'f');\n-                StringUTF16.putChar(buf, index + 1, 'a');\n-                StringUTF16.putChar(buf, index + 2, 'l');\n-                StringUTF16.putChar(buf, index + 3, 's');\n-                StringUTF16.putChar(buf, index + 4, 'e');\n-            }\n-            index -= prefix.length();\n-            prefix.getBytes(buf, index, String.UTF16);\n-        }\n-        return index;\n-    }\n-\n-    \/**\n-     * Prepends constant and the stringly representation of value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\n-     * @param index      final char index in the buffer\n-     * @param the        coder of buf\n-     * @param buf        buffer to append to\n-     * @param value      char value to encode\n-     * @param prefix     a constant to prepend before value\n-     * @return           updated index (coder value retained)\n-     *\/\n-    static int prepend(int index, byte coder, byte[] buf, char value, String prefix) {\n-        if (coder == String.LATIN1) {\n-            buf[--index] = (byte) (value & 0xFF);\n-            index -= prefix.length();\n-            prefix.getBytes(buf, index, String.LATIN1);\n-        } else {\n-            StringUTF16.putChar(buf, --index, value);\n-            index -= prefix.length();\n-            prefix.getBytes(buf, index, String.UTF16);\n-        }\n-        return index;\n-    }\n-\n-    \/**\n-     * Prepends constant and the stringly representation of value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\n-     * @param index      final char index in the buffer\n-     * @param the        coder of buf\n-     * @param buf        buffer to append to\n-     * @param value      integer value to encode\n-     * @param prefix     a constant to prepend before value\n-     * @return           updated index (coder value retained)\n-     *\/\n-    @ForceInline\n-    static int prepend(int index, byte coder, byte[] buf, int value, String prefix) {\n-        if (coder == String.LATIN1) {\n-            index = StringLatin1.getChars(value, index, buf);\n-            index -= prefix.length();\n-            prefix.getBytes(buf, index, String.LATIN1);\n-        } else {\n-            index = StringUTF16.getChars(value, index, buf);\n-            index -= prefix.length();\n-            prefix.getBytes(buf, index, String.UTF16);\n-        }\n-        return index;\n-    }\n-\n-    \/**\n-     * Prepends constant and the stringly representation of value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\n-     * @param index      final char index in the buffer\n-     * @param the        coder of buf\n-     * @param buf        buffer to append to\n-     * @param value      long value to encode\n-     * @param prefix     a constant to prepend before value\n-     * @return           updated index (coder value retained)\n-     *\/\n-    @ForceInline\n-    static int prepend(int index, byte coder, byte[] buf, long value, String prefix) {\n-        if (coder == String.LATIN1) {\n-            index = StringLatin1.getChars(value, index, buf);\n-            index -= prefix.length();\n-            prefix.getBytes(buf, index, String.LATIN1);\n-        } else {\n-            index = StringUTF16.getChars(value, index, buf);\n-            index -= prefix.length();\n-            prefix.getBytes(buf, index, String.UTF16);\n-        }\n-        return index;\n-    }\n-\n-    \/**\n-     * Prepends constant and the stringly representation of value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\n-     * @param index      final char index in the buffer\n-     * @param the        coder of buf\n-     * @param buf        buffer to append to\n-     * @param value      string value to encode\n-     * @param prefix     a constant to prepend before value\n-     * @return           updated index (coder value retained)\n-     *\/\n-    static int prepend(int index, byte coder, byte[] buf, String value, String prefix) {\n-        index -= value.length();\n-        if (coder == String.LATIN1) {\n-            value.getBytes(buf, index, String.LATIN1);\n-            index -= prefix.length();\n-            prefix.getBytes(buf, index, String.LATIN1);\n-        } else {\n-            value.getBytes(buf, index, String.UTF16);\n-            index -= prefix.length();\n-            prefix.getBytes(buf, index, String.UTF16);\n-        }\n-        return index;\n-    }\n-\n-    \/**\n-     * Prepends the stringly representation of String value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\n-     * @param index      final char index in the buffer\n-     * @param coder      the coder of buf\n-     * @param buf        buffer to append to\n-     * @param value      String value to encode\n-     * @return           updated index (coder value retained)\n-     *\/\n-    static int prepend(int index, byte coder, byte[] buf, String value) {\n-        index -= value.length();\n-        value.getBytes(buf, index, coder);\n-        return index;\n-    }\n-\n-    static int stringSize(boolean value) {\n-        return value ? 4 : 5;\n-    }\n-\n-    static int stringSize(int value) {\n-        return Integer.stringSize(value);\n-    }\n-\n-    static int stringSize(long value) {\n-        return Long.stringSize(value);\n-    }\n-\n-    static int stringSize(char value) {\n-        return 1;\n-    }\n-\n-    static int stringSize(String value) {\n-        return value.length();\n-    }\n-\n-    static byte stringCoder(char value) {\n-        return StringLatin1.canEncode(value) ? String.LATIN1 : String.UTF16;\n-    }\n-\n-    static String stringOf(float value) {\n-        return Float.toString(value);\n-    }\n-\n-    static String stringOf(double value) {\n-        return Double.toString(value);\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":0,"deletions":219,"binary":false,"changes":219,"status":"modified"},{"patch":"@@ -2642,12 +2642,0 @@\n-            public byte stringInitialCoder() {\n-                return String.COMPACT_STRINGS ? String.LATIN1 : String.UTF16;\n-            }\n-\n-            public byte stringCoder(char value) {\n-                return StringLatin1.canEncode(value) ? String.LATIN1 : String.UTF16;\n-            }\n-\n-            public byte stringCoder(String str) {\n-                return str.coder();\n-            }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n@@ -1090,16 +1091,14 @@\n-        static final MethodTypeDesc TO_INT = MethodTypeDesc.of(CD_int);\n-        static final MethodTypeDesc INT_TO_INT = MethodTypeDesc.of(CD_int, CD_int);\n-        static final MethodTypeDesc LONG_TO_INT = MethodTypeDesc.of(CD_int, CD_long);\n-        static final MethodTypeDesc BOOLEAN_TO_INT = MethodTypeDesc.of(CD_int, CD_boolean);\n-        static final MethodTypeDesc CHAR_TO_INT = MethodTypeDesc.of(CD_int, CD_char);\n-        static final MethodTypeDesc STR_TO_INT = MethodTypeDesc.of(CD_int, CD_String);\n-        static final MethodTypeDesc TO_BYTE = MethodTypeDesc.of(CD_byte);\n-        static final MethodTypeDesc CHAR_TO_BYTE = MethodTypeDesc.of(CD_byte, CD_char);\n-        static final MethodTypeDesc NEW_ARRAY = MethodTypeDesc.of(CD_byteArray, CD_String, CD_int, CD_byte);\n-        static final MethodTypeDesc NEW_STRING = MethodTypeDesc.of(CD_void, CD_byteArray, CD_byte);\n-        static final MethodTypeDesc PREPEND_String = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_byteArray, CD_String, CD_String);\n-        static final MethodTypeDesc PREPEND_int = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_byteArray, CD_int, CD_String);\n-        static final MethodTypeDesc PREPEND_long = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_byteArray, CD_long, CD_String);\n-        static final MethodTypeDesc PREPEND_boolean = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_byteArray, CD_boolean, CD_String);\n-        static final MethodTypeDesc PREPEND_char = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_byteArray, CD_char, CD_String);\n-        static final MethodTypeDesc STR_GET_BYTES = MethodTypeDesc.of(CD_void, CD_byteArray, CD_int, CD_byte);\n+        static final MethodTypeDesc NEW_ARRAY_SUFFIX = MethodTypeDesc.of(CD_byteArray, CD_String, CD_long);\n+        static final MethodTypeDesc NEW_STRING = MethodTypeDesc.of(CD_String, CD_byteArray, CD_long);\n+\n+        static final MethodTypeDesc Mix_int = MethodTypeDesc.of(CD_long, CD_long, CD_int);\n+        static final MethodTypeDesc MIX_long = MethodTypeDesc.of(CD_long, CD_long, CD_long);\n+        static final MethodTypeDesc Mix_boolean = MethodTypeDesc.of(CD_long, CD_long, CD_boolean);\n+        static final MethodTypeDesc Mix_char = MethodTypeDesc.of(CD_long, CD_long, CD_char);\n+        static final MethodTypeDesc Mix_String = MethodTypeDesc.of(CD_long, CD_long, CD_String);\n+\n+        static final MethodTypeDesc PREPEND_int = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_int, CD_String);\n+        static final MethodTypeDesc PREPEND_long = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_long, CD_String);\n+        static final MethodTypeDesc PREPEND_boolean = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_boolean, CD_String);\n+        static final MethodTypeDesc PREPEND_char = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_char, CD_String);\n+        static final MethodTypeDesc PREPEND_String = MethodTypeDesc.of(CD_long, CD_long, CD_byteArray, CD_String, CD_String);\n@@ -1195,3 +1194,1 @@\n-         * import static java.lang.StringConcatHelper.stringOf;\n-         * import static java.lang.StringConcatHelper.stringSize;\n-         * import static java.lang.StringConcatHelper.newArray;\n+         * import static java.lang.StringConcatHelper.mix;\n@@ -1199,0 +1196,2 @@\n+         * import static java.lang.StringConcatHelper.newString;\n+         * import static java.lang.StringConcatHelper.newArray;\n@@ -1200,1 +1199,1 @@\n-         * public static String concat(int arg0, long arg1, boolean arg3, char arg4, String arg5, Object arg6, Object arg7) {\n+         * public static String concat(int arg0, long arg1, boolean arg2, char arg3, String arg4, float arg5, double arg6, Object arg7) {\n@@ -1202,2 +1201,1 @@\n-         *     int initCoder = ...;\n-         *     int initIndex = ...;\n+         *     int lengthCoder = ...;\n@@ -1206,1 +1204,1 @@\n-         *     arg5 = stringOf(arg5);\n+         *     arg4 = stringOf(arg4);\n@@ -1209,2 +1207,3 @@\n-         *     var str0 = stringOf(arg6);\n-         *     var str1 = stringOf(arg7);\n+         *     String str5 = stringOf(arg5);\n+         *     String str6 = stringOf(arg6);\n+         *     String str7 = stringOf(arg7);\n@@ -1212,3 +1211,1 @@\n-         *     int coder = initCoder | stringCoder(arg4) | arg5.coder() | str0.coder() | str1.coder();\n-         *     int index = initIndex + stringSize(arg0) + stringSize(arg1) + stringSize(arg2) + stringSize(arg3)\n-         *                           + stringSize(arg4) + stringSize(arg5) + stringSize(str0) + stringSize(str1);\n+         *     lengthCoder = mix(mix(mix(mix(mix(mix(mix(mix(lengthCoder, arg0), arg1), arg3), arg4), str5), str6), str7)\n@@ -1216,2 +1213,3 @@\n-         *     index -= constant8.length();\n-         *     byte[] buf = newArray(constant8, index, coder);\n+         *     String suffix = constant9;\n+         *     lengthCoder -= suffix.length();\n+         *     byte[] buf = newArray(suffix, lengthCoder);\n@@ -1219,8 +1217,8 @@\n-         *     index = prepend(index, coder, buf, str1, constant7);\n-         *     index = prepend(index, coder, buf, str0, constant6);\n-         *     index = prepend(index, coder, buf, arg5, constant5);\n-         *     index = prepend(index, coder, buf, arg4, constant4);\n-         *     index = prepend(index, coder, buf, arg3, constant3);\n-         *     index = prepend(index, coder, buf, arg2, constant2);\n-         *     index = prepend(index, coder, buf, arg1, constant1);\n-         *     index = prepend(index, coder, buf, arg0, constant0);\n+         *     lengthCoder = prepend(lengthCoder, buf, str7, constant7);\n+         *     lengthCoder = prepend(lengthCoder, buf, str6, constant6);\n+         *     lengthCoder = prepend(lengthCoder, buf, str5, constant5);\n+         *     lengthCoder = prepend(lengthCoder, buf, arg4, constant4);\n+         *     lengthCoder = prepend(lengthCoder, buf, arg3, constant3);\n+         *     lengthCoder = prepend(lengthCoder, buf, arg2, constant2);\n+         *     lengthCoder = prepend(lengthCoder, buf, arg1, constant1);\n+         *     lengthCoder = prepend(lengthCoder, buf, arg0, constant0);\n@@ -1228,1 +1226,1 @@\n-         *     return new String(buf, (byte) coder);\n+         *     return newArray(buf, lengthCoder);\n@@ -1236,2 +1234,1 @@\n-                    int initalIndex = 0;\n-                    int initalCoder = JLA.stringInitialCoder();\n+                    long initalLengthCoder = JLA.stringConcatInitialCoder();\n@@ -1240,2 +1237,1 @@\n-                            initalIndex += constant.length();\n-                            initalCoder |= JLA.stringCoder(constant);\n+                            initalLengthCoder = JLA.stringConcatMix(initalLengthCoder, constant);\n@@ -1248,2 +1244,2 @@\n-                    int argSlots = 0;\n-                    int[] paramSlots = new int[paramCount];\n+                    int   paramSlotsTotalSize = 0;\n+                    int[] paramSlots          = new int[paramCount];\n@@ -1253,2 +1249,2 @@\n-                        paramSlots[i] = argSlots;\n-                        argSlots += kind.slotSize();\n+                        paramSlots[i] = paramSlotsTotalSize;\n+                        paramSlotsTotalSize += kind.slotSize();\n@@ -1257,3 +1253,2 @@\n-                    int coderSlot = argSlots;\n-                    int indexSlot = argSlots + 1;\n-                    int bufSlot   = argSlots + 2;\n+                    int lengthCoderSloat = paramSlotsTotalSize;\n+                    int bufSlot          = paramSlotsTotalSize + 2;\n@@ -1264,2 +1259,2 @@\n-                     * str0 = StringConcatHelper.stringOf(args(0));\n-                     * str1 = StringConcatHelper.stringOf(args(1));\n+                     * str0 = Float.toString(args(0));\n+                     * str1 = Double.toString(args(1));\n@@ -1274,0 +1269,1 @@\n+                            ClassDesc classDesc;\n@@ -1275,0 +1271,1 @@\n+                            String methodName;\n@@ -1276,0 +1273,2 @@\n+                                classDesc = CD_Float;\n+                                methodName = \"toString\";\n@@ -1278,0 +1277,2 @@\n+                                classDesc = CD_Double;\n+                                methodName = \"toString\";\n@@ -1280,0 +1281,2 @@\n+                                classDesc = CD_StringConcatHelper;\n+                                methodName = \"stringOf\";\n@@ -1286,1 +1289,1 @@\n-                                    : argSlots + 3 + (strings++);\n+                                    : bufSlot + (++strings);\n@@ -1288,1 +1291,1 @@\n-                              .invokestatic(CD_StringConcatHelper, \"stringOf\", methodTypeDesc)\n+                              .invokestatic(classDesc, methodName, methodTypeDesc)\n@@ -1297,29 +1300,1 @@\n-                     * store init coder :\n-                     *\n-                     * coder = initalCoder;\n-                     * coder |= StringConcatHelper.stringCoder((char) args[1]);\n-                     * coder |= str0.coder();\n-                     *\n-                     *\/\n-                    cb.loadConstant(initalCoder);\n-                    for (int i = 0; i < paramCount; i++) {\n-                        Class<?> cl = args.parameterType(i);\n-                        TypeKind kind = TypeKind.from(cl);\n-                        if (cl == char.class) {\n-                            cb.loadLocal(kind, paramSlots[i])\n-                              .invokestatic(CD_StringConcatHelper, \"stringCoder\", CHAR_TO_BYTE)\n-                              .ior();\n-                        } else if (needStringOf(cl) && maybeUTF16(cl)) {\n-                            cb.aload(paramSlots[i])\n-                              .invokevirtual(CD_String, \"coder\", TO_BYTE)\n-                              .ior();\n-                        }\n-                    }\n-                    cb.istore(coderSlot);\n-\n-                    String suffix = constants[constants.length - 1];\n-                    if (suffix == null) {\n-                        suffix = \"\";\n-                    }\n-                    \/*\n-                     * store init index & allocate buffer :\n+                     * Store init index :\n@@ -1327,2 +1302,2 @@\n-                     * index = initalIndex + StringConcatHelper.stringSize(args[i]) + ...\n-                     * ...\n+                     *  lengthCoder = mix(mix(mix(mix(initalIengthCoder, arg0), arg1), arg2), ....);\n+                     *  ...\n@@ -1331,1 +1306,1 @@\n-                    cb.loadConstant(initalIndex);\n+                    cb.loadConstant(initalLengthCoder);\n@@ -1337,0 +1312,1 @@\n+                        ClassDesc classDesc = CD_StringConcatHelper;\n@@ -1339,1 +1315,2 @@\n-                            methodTypeDesc = INT_TO_INT;\n+                            classDesc = CD_Integer;\n+                            methodTypeDesc = Mix_int;\n@@ -1341,1 +1318,2 @@\n-                            methodTypeDesc = LONG_TO_INT;\n+                            classDesc = CD_Long;\n+                            methodTypeDesc = MIX_long;\n@@ -1343,1 +1321,1 @@\n-                            methodTypeDesc = BOOLEAN_TO_INT;\n+                            methodTypeDesc = Mix_boolean;\n@@ -1345,1 +1323,1 @@\n-                            methodTypeDesc = CHAR_TO_INT;\n+                            methodTypeDesc = Mix_char;\n@@ -1347,1 +1325,1 @@\n-                            methodTypeDesc = STR_TO_INT;\n+                            methodTypeDesc = Mix_String;\n@@ -1351,2 +1329,13 @@\n-                          .invokestatic(CD_StringConcatHelper, \"stringSize\", methodTypeDesc)\n-                          .iadd();\n+                          .invokestatic(CD_StringConcatHelper, \"mix\", methodTypeDesc);\n+                    }\n+                    cb.lstore(lengthCoderSloat);\n+\n+                    String suffix = constants[constants.length - 1];\n+                    if (suffix == null) {\n+                        suffix = \"\";\n+                    }\n+                    if (!suffix.isEmpty()) {\n+                        cb.lload(lengthCoderSloat)\n+                          .ldc((long) suffix.length())\n+                          .lsub()\n+                          .lstore(lengthCoderSloat);\n@@ -1354,3 +1343,0 @@\n-                    cb.ldc(suffix.length())\n-                      .isub()\n-                      .istore(indexSlot);\n@@ -1359,1 +1345,2 @@\n-                     *  buf = StringConcatHelper.newArray(suffix, index, coder)\n+                     * Allocate buffer :\n+                     *  buf = StringConcatHelper.newArray(suffix, lengthCoder)\n@@ -1362,3 +1349,2 @@\n-                      .iload(indexSlot)\n-                      .iload(coderSlot)\n-                      .invokestatic(CD_StringConcatHelper, \"newArray\", NEW_ARRAY)\n+                      .lload(lengthCoderSloat)\n+                      .invokestatic(CD_StringConcatHelper, \"newArrayWithSuffix\", NEW_ARRAY_SUFFIX)\n@@ -1367,0 +1353,1 @@\n+                    cb.lload(lengthCoderSloat);\n@@ -1374,1 +1361,1 @@\n-                         * index = StringConcatHelper.prepend(index, coder, buf, args[i])\n+                         *  lengthCoder = prepend(prepend(prepend(lengthCoder, buf, arg0), buf, arg1), ...)\n@@ -1393,3 +1380,1 @@\n-                        cb.iload(indexSlot)\n-                          .iload(coderSlot)\n-                          .aload(bufSlot)\n+                        cb.aload(bufSlot)\n@@ -1398,2 +1383,1 @@\n-                          .invokestatic(CD_StringConcatHelper, \"prepend\", methodTypeDesc)\n-                          .istore(indexSlot);\n+                          .invokestatic(CD_StringConcatHelper, \"prepend\", methodTypeDesc);\n@@ -1401,0 +1385,1 @@\n+                    cb.lstore(lengthCoderSloat);\n@@ -1402,6 +1387,3 @@\n-                    \/\/ return new String(buf, coder);\n-                    cb.new_(CD_String)\n-                      .dup()\n-                      .aload(bufSlot)\n-                      .iload(coderSlot)\n-                      .invokespecial(CD_String, \"<init>\", NEW_STRING)\n+                    cb.aload(bufSlot)\n+                      .lload(lengthCoderSloat)\n+                      .invokestatic(CD_StringConcatHelper, \"newString\", NEW_STRING)\n@@ -1415,7 +1397,0 @@\n-\n-                static boolean maybeUTF16(Class<?> cl) {\n-                    return cl != byte.class && cl != short.class && cl != int.class\n-                        && cl != long.class && cl != boolean.class\n-                        && cl != Byte.class && cl != Short.class && cl != Integer.class\n-                        && cl != Long.class && cl != Boolean.class;\n-                }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":94,"deletions":119,"binary":false,"changes":213,"status":"modified"},{"patch":"@@ -455,5 +455,0 @@\n-    byte stringInitialCoder();\n-\n-    byte stringCoder(char ch);\n-    byte stringCoder(String str);\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}