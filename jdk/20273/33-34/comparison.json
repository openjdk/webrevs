{"files":[{"patch":"@@ -751,0 +751,14 @@\n+\n+    \/**\n+     * Check for overflow, throw exception on overflow.\n+     *\n+     * @param value\n+     * @return the given parameter value, if valid\n+     *\/\n+    @ForceInline\n+    static int checkOverflow(int value) {\n+        if (value >= 0) {\n+            return value;\n+        }\n+        throw new OutOfMemoryError(\"Overflow: String length out of range\");\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -122,0 +122,1 @@\n+    private static final int FORCE_INLINE_THRESHOLD;\n@@ -125,1 +126,4 @@\n-        HIGH_ARITY_THRESHOLD = highArity != null ? Integer.parseInt(highArity) : 20;\n+        HIGH_ARITY_THRESHOLD = highArity != null ? Integer.parseInt(highArity) : 0;\n+\n+        String inlineThreshold = VM.getSavedProperty(\"java.lang.invoke.StringConcat.inlineThreshold\");\n+        FORCE_INLINE_THRESHOLD = inlineThreshold != null ? Integer.parseInt(inlineThreshold) : 16;\n@@ -390,1 +394,1 @@\n-                mh = SimpleStringBuilderStrategy.generate(lookup, concatType, constantStrings);\n+                mh = InlineHiddenClassStrategy.generate(lookup, concatType, constantStrings);\n@@ -1067,1 +1071,1 @@\n-     * Bytecode StringBuilder strategy.\n+     * Bytecode strategy.\n@@ -1072,1 +1076,1 @@\n-    private static final class SimpleStringBuilderStrategy {\n+    private static final class InlineHiddenClassStrategy {\n@@ -1105,1 +1109,0 @@\n-        static final int FORCE_INLINE_THRESHOLD = 16;\n@@ -1115,2 +1118,2 @@\n-                int thisSlot      = 0,\n-                    constantsSlot = 1;\n+                int thisSlot      = cb.receiverSlot(),\n+                    constantsSlot = cb.parameterSlot(0);\n@@ -1133,1 +1136,1 @@\n-        private SimpleStringBuilderStrategy() {\n+        private InlineHiddenClassStrategy() {\n@@ -1173,1 +1176,1 @@\n-        private static MethodType prependArgs(MethodType concatArgs) {\n+        private static MethodTypeDesc prependArgs(MethodType concatArgs) {\n@@ -1175,5 +1178,5 @@\n-            var paramTypes = new Class<?>[parameterCount + 4];\n-            paramTypes[0] = int.class;      \/\/ length\n-            paramTypes[1] = byte.class;     \/\/ coder\n-            paramTypes[2] = byte[].class;   \/\/ buff\n-            paramTypes[3] = String[].class; \/\/ constants\n+            var paramTypes = new ClassDesc[parameterCount + 4];\n+            paramTypes[0] = CD_int;          \/\/ length\n+            paramTypes[1] = CD_byte;         \/\/ coder\n+            paramTypes[2] = CD_Array_byte;   \/\/ buff\n+            paramTypes[3] = CD_Array_String; \/\/ constants\n@@ -1186,1 +1189,1 @@\n-                paramTypes[i + 4] = cl;\n+                paramTypes[i + 4] = ConstantUtils.classDesc(cl);\n@@ -1188,1 +1191,1 @@\n-            return MethodType.methodType(int.class, paramTypes);\n+            return MethodTypeDesc.of(CD_int, paramTypes);\n@@ -1195,1 +1198,1 @@\n-        private static MethodType coderArgs(MethodType concatArgs) {\n+        private static MethodTypeDesc coderArgs(MethodType concatArgs) {\n@@ -1197,2 +1200,2 @@\n-            List<Class<?>> paramTypes = new ArrayList<>();\n-            paramTypes.add(int.class); \/\/ init coder\n+            List<ClassDesc> paramTypes = new ArrayList<>();\n+            paramTypes.add(CD_int); \/\/ init coder\n@@ -1202,4 +1205,1 @@\n-                    if (cl != char.class) {\n-                        cl = String.class;\n-                    }\n-                    paramTypes.add(cl);\n+                    paramTypes.add(cl == char.class ? CD_char : CD_String);\n@@ -1208,1 +1208,1 @@\n-            return MethodType.methodType(int.class, paramTypes.toArray(new Class<?>[0]));\n+            return MethodTypeDesc.of(CD_int, paramTypes);\n@@ -1215,1 +1215,1 @@\n-        private static MethodType lengthArgs(MethodType concatArgs) {\n+        private static MethodTypeDesc lengthArgs(MethodType concatArgs) {\n@@ -1217,2 +1217,2 @@\n-            var paramTypes = new Class<?>[parameterCount + 1];\n-            paramTypes[0] = int.class;\n+            var paramTypes = new ClassDesc[parameterCount + 1];\n+            paramTypes[0] = CD_int;\n@@ -1224,1 +1224,1 @@\n-                paramTypes[i + 1] = cl;\n+                paramTypes[i + 1] = ConstantUtils.classDesc(cl);\n@@ -1226,1 +1226,1 @@\n-            return MethodType.methodType(int.class, paramTypes);\n+            return MethodTypeDesc.of(CD_int, paramTypes);\n@@ -1255,3 +1255,3 @@\n-            MethodType lengthArgs  = lengthArgs(concatArgs),\n-                       coderArgs   = coderArgs(concatArgs),\n-                       prependArgs = prependArgs(concatArgs);\n+            MethodTypeDesc lengthArgs  = lengthArgs(concatArgs),\n+                           coderArgs   = coderArgs(concatArgs),\n+                           prependArgs = prependArgs(concatArgs);\n@@ -1269,1 +1269,1 @@\n-                                        ConstantUtils.methodTypeDesc(lengthArgs),\n+                                        lengthArgs,\n@@ -1280,1 +1280,1 @@\n-                                        ConstantUtils.methodTypeDesc(prependArgs),\n+                                        prependArgs,\n@@ -1287,1 +1287,1 @@\n-                                                mb.withCode(generatePrependMethod(concatArgs));\n+                                                mb.withCode(generatePrependMethod(prependArgs));\n@@ -1309,1 +1309,1 @@\n-                                        ConstantUtils.methodTypeDesc(coderArgs),\n+                                        coderArgs,\n@@ -1397,5 +1397,5 @@\n-                ClassDesc  concatClass,\n-                MethodType args,\n-                MethodType lengthArgs,\n-                MethodType coderArgs,\n-                MethodType prependArgs\n+                ClassDesc      concatClass,\n+                MethodType     concatArgs,\n+                MethodTypeDesc lengthArgs,\n+                MethodTypeDesc coderArgs,\n+                MethodTypeDesc prependArgs\n@@ -1407,10 +1407,3 @@\n-                    int paramCount = args.parameterCount(),\n-                        thisSlot   = 0,\n-                        nextSlot   = 1;\n-                    int[] paramSlots  = new int[paramCount],\n-                          stringSlots = new int[paramCount];\n-                    for (int i = 0; i < paramCount; i++) {\n-                        paramSlots[i] = nextSlot;\n-                        nextSlot     += TypeKind.from(args.parameterType(i)).slotSize();\n-                    }\n-\n+                    int paramCount = concatArgs.parameterCount();\n+                    int thisSlot = cb.receiverSlot();\n+                    int[] stringSlots = new int[paramCount];\n@@ -1418,1 +1411,1 @@\n-                        var cl = args.parameterType(i);\n+                        var cl = concatArgs.parameterType(i);\n@@ -1420,1 +1413,1 @@\n-                            stringSlots[i] = nextSlot++;\n+                            stringSlots[i] = cb.allocateLocal(TypeKind.from(String.class));\n@@ -1424,5 +1417,5 @@\n-                    int lengthSlot    = nextSlot,\n-                        coderSlot     = nextSlot + 1,\n-                        bufSlot       = nextSlot + 2,\n-                        constantsSlot = nextSlot + 3,\n-                        suffixSlot    = nextSlot + 4;\n+                    int lengthSlot    = cb.allocateLocal(TypeKind.from(int.class)),\n+                        coderSlot     = cb.allocateLocal(TypeKind.from(int.class)),\n+                        bufSlot       = cb.allocateLocal(TypeKind.from(byte[].class)),\n+                        constantsSlot = cb.allocateLocal(TypeKind.from(String[].class)),\n+                        suffixSlot    = cb.allocateLocal(TypeKind.from(String.class));\n@@ -1441,1 +1434,1 @@\n-                        var cl = args.parameterType(i);\n+                        var cl = concatArgs.parameterType(i);\n@@ -1451,1 +1444,1 @@\n-                            cb.loadLocal(TypeKind.from(cl), paramSlots[i])\n+                            cb.loadLocal(TypeKind.from(cl), cb.parameterSlot(i))\n@@ -1462,1 +1455,1 @@\n-                    if (parameterMaybeUTF16(args)) {\n+                    if (parameterMaybeUTF16(concatArgs)) {\n@@ -1464,1 +1457,1 @@\n-                            var cl = args.parameterType(i);\n+                            var cl = concatArgs.parameterType(i);\n@@ -1467,1 +1460,1 @@\n-                                    cb.loadLocal(TypeKind.from(cl), paramSlots[i]);\n+                                    cb.loadLocal(TypeKind.from(cl), cb.parameterSlot(i));\n@@ -1473,1 +1466,1 @@\n-                        cb.invokestatic(concatClass, \"coder\", ConstantUtils.methodTypeDesc(coderArgs));\n+                        cb.invokestatic(concatClass, \"coder\", coderArgs);\n@@ -1483,2 +1476,2 @@\n-                        var cl        = args.parameterType(i);\n-                        int paramSlot = paramSlots[i];\n+                        var cl        = concatArgs.parameterType(i);\n+                        int paramSlot = cb.parameterSlot(i);\n@@ -1491,1 +1484,1 @@\n-                    cb.invokestatic(concatClass, \"length\", ConstantUtils.methodTypeDesc(lengthArgs));\n+                    cb.invokestatic(concatClass, \"length\", lengthArgs);\n@@ -1529,2 +1522,2 @@\n-                        var cl = args.parameterType(i);\n-                        int paramSlot = paramSlots[i];\n+                        var cl = concatArgs.parameterType(i);\n+                        int paramSlot = cb.parameterSlot(i);\n@@ -1538,1 +1531,1 @@\n-                    cb.invokestatic(concatClass, \"prepend\", ConstantUtils.methodTypeDesc(prependArgs));\n+                    cb.invokestatic(concatClass, \"prepend\", prependArgs);\n@@ -1566,1 +1559,1 @@\n-        private static Consumer<CodeBuilder> generateLengthMethod(MethodType lengthArgs) {\n+        private static Consumer<CodeBuilder> generateLengthMethod(MethodTypeDesc lengthArgs) {\n@@ -1570,5 +1563,2 @@\n-                    int paramCount = lengthArgs.parameterCount(),\n-                        lengthSlot = 0,\n-                        nextSlot   = 1;\n-                    cb.iload(lengthSlot);\n-                    for (int i = 1; i < paramCount; i++) {\n+                    cb.iload(cb.parameterSlot(0)); \/\/ length\n+                    for (int i = 1; i < lengthArgs.parameterCount(); i++) {\n@@ -1578,1 +1568,1 @@\n-                        if (cl == char.class) {\n+                        if (cl == CD_char) {\n@@ -1581,1 +1571,1 @@\n-                            if (cl == int.class) {\n+                            if (cl == CD_int) {\n@@ -1583,1 +1573,1 @@\n-                            } else if (cl == long.class) {\n+                            } else if (cl == CD_long) {\n@@ -1585,1 +1575,1 @@\n-                            } else if (cl == boolean.class) {\n+                            } else if (cl == CD_boolean) {\n@@ -1590,1 +1580,1 @@\n-                            cb.loadLocal(kind, nextSlot)\n+                            cb.loadLocal(kind, cb.parameterSlot(i))\n@@ -1593,2 +1583,2 @@\n-                        cb.iadd();\n-                        nextSlot += kind.slotSize();\n+                        cb.iadd()\n+                          .invokestatic(CD_StringConcatHelper, \"checkOverflow\", MTD_int_int);\n@@ -1614,1 +1604,1 @@\n-        private static Consumer<CodeBuilder> generateCoderMethod(MethodType coderArgs) {\n+        private static Consumer<CodeBuilder> generateCoderMethod(MethodTypeDesc coderArgs) {\n@@ -1621,2 +1611,1 @@\n-                    int coderSlot = 0;\n-                    cb.iload(coderSlot);\n+                    cb.iload(cb.parameterSlot(0)); \/\/ coder\n@@ -1625,3 +1614,2 @@\n-                        int paramSlot = i;\n-                        cb.loadLocal(TypeKind.from(cl), paramSlot);\n-                        if (cl == char.class) {\n+                        cb.loadLocal(TypeKind.from(cl), cb.parameterSlot(i));\n+                        if (cl == CD_char) {\n@@ -1660,1 +1648,1 @@\n-        private static Consumer<CodeBuilder> generatePrependMethod(MethodType args) {\n+        private static Consumer<CodeBuilder> generatePrependMethod(MethodTypeDesc prependArgs) {\n@@ -1665,2 +1653,1 @@\n-                    int paramCount    = args.parameterCount(),\n-                        lengthSlot    = 0,\n+                    int lengthSlot    = 0,\n@@ -1669,8 +1656,1 @@\n-                        constantsSlot = 3,\n-                        nextSlot      = 4;\n-                    int[] paramSlots  = new int[paramCount];\n-                    for (int i = 0; i < paramCount; i++) {\n-                        paramSlots[i] = nextSlot;\n-                        nextSlot     += (args.parameterType(i) == long.class ? 2 : 1);\n-                    }\n-\n+                        constantsSlot = 3;\n@@ -1686,5 +1666,4 @@\n-                    cb.iload(lengthSlot);\n-                    for (int i = paramCount - 1; i >= 0; i--) {\n-                        int paramSlot = paramSlots[i];\n-                        var cl        = args.parameterType(i);\n-                        var kind      = TypeKind.from(cl);\n+                    cb.iload(cb.parameterSlot(lengthSlot)); \/\/ length\n+                    for (int i = prependArgs.parameterCount() - 1; i >= 4; i--) {\n+                        var cl   = prependArgs.parameterType(i);\n+                        var kind = TypeKind.from(cl);\n@@ -1694,1 +1673,1 @@\n-                        if (cl == int.class) {\n+                        if (cl == CD_int) {\n@@ -1696,1 +1675,1 @@\n-                        } else if (cl == long.class) {\n+                        } else if (cl == CD_long) {\n@@ -1698,1 +1677,1 @@\n-                        } else if (cl == boolean.class) {\n+                        } else if (cl == CD_boolean) {\n@@ -1700,1 +1679,1 @@\n-                        } else if (cl == char.class) {\n+                        } else if (cl == CD_char) {\n@@ -1709,1 +1688,1 @@\n-                          .loadLocal(kind, paramSlot)\n+                          .loadLocal(kind, cb.parameterSlot(i))\n@@ -1711,1 +1690,1 @@\n-                          .ldc(i)\n+                          .ldc(i - 4)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":90,"deletions":111,"binary":false,"changes":201,"status":"modified"}]}