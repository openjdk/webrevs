{"files":[{"patch":"@@ -425,0 +425,23 @@\n+    \/**\n+     * Allocates an uninitialized byte array based on the length and coder\n+     * information, then prepends the given suffix string at the end of the\n+     * byte array before returning it. The calling code must adjust the\n+     * indexCoder so that it's taken the coder of the suffix into account, but\n+     * subtracted the length of the suffix.\n+     *\n+     * @param suffix\n+     * @param index\n+     * @param coder\n+     * @return the newly allocated byte array\n+     *\/\n+    @ForceInline\n+    static byte[] newArray(String suffix, int index, byte coder) {\n+        byte[] buf = newArray((index + suffix.length()) << coder);\n+        if (coder == String.LATIN1) {\n+            suffix.getBytes(buf, index, String.LATIN1);\n+        } else {\n+            suffix.getBytes(buf, index, String.UTF16);\n+        }\n+        return buf;\n+    }\n+\n@@ -443,1 +466,1 @@\n-     * Prepends the stringly representation of boolean value into buffer,\n+     * Prepends constant and the stringly representation of value into buffer,\n@@ -447,1 +470,1 @@\n-     * @param coder      the coder of buf\n+     * @param the        coder of buf\n@@ -450,0 +473,1 @@\n+     * @param prefix     a constant to prepend before value\n@@ -452,1 +476,1 @@\n-    static int prepend(int index, byte coder, byte[] buf, boolean value) {\n+    static long prepend(int index, byte coder, byte[] buf, boolean value, String prefix) {\n@@ -468,0 +492,2 @@\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.LATIN1);\n@@ -483,0 +509,2 @@\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.UTF16);\n@@ -488,1 +516,1 @@\n-     * Prepends the stringly representation of char value into buffer,\n+     * Prepends constant and the stringly representation of value into buffer,\n@@ -492,1 +520,1 @@\n-     * @param coder      the coder of buf\n+     * @param the        coder of buf\n@@ -495,0 +523,1 @@\n+     * @param prefix     a constant to prepend before value\n@@ -497,2 +526,1 @@\n-    static int prepend(int index, byte coder, byte[] buf, char value) {\n-        index--;\n+    static int prepend(int index, byte coder, byte[] buf, char value, String prefix) {\n@@ -500,1 +528,3 @@\n-            buf[index] = (byte) (value & 0xFF);\n+            buf[--index] = (byte) (value & 0xFF);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.LATIN1);\n@@ -502,1 +532,3 @@\n-            StringUTF16.putChar(buf, index, value);\n+            StringUTF16.putChar(buf, --index, value);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.UTF16);\n@@ -508,1 +540,1 @@\n-     * Prepends the stringly representation of integer value into buffer,\n+     * Prepends constant and the stringly representation of value into buffer,\n@@ -512,1 +544,1 @@\n-     * @param coder      the coder of buf\n+     * @param the        coder of buf\n@@ -515,0 +547,1 @@\n+     * @param prefix     a constant to prepend before value\n@@ -517,1 +550,2 @@\n-    static int prepend(int index, byte coder, byte[] buf, int value) {\n+    @ForceInline\n+    static int prepend(int index, byte coder, byte[] buf, int value, String prefix) {\n@@ -519,1 +553,3 @@\n-            return StringLatin1.getChars(value, index, buf);\n+            index = StringLatin1.getChars(value, index, buf);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.LATIN1);\n@@ -521,1 +557,3 @@\n-            return StringUTF16.getChars(value, index, buf);\n+            index = StringUTF16.getChars(value, index, buf);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.UTF16);\n@@ -523,0 +561,1 @@\n+        return index;\n@@ -526,1 +565,1 @@\n-     * Prepends the stringly representation of long value into buffer,\n+     * Prepends constant and the stringly representation of value into buffer,\n@@ -530,1 +569,1 @@\n-     * @param coder      the coder of buf\n+     * @param the        coder of buf\n@@ -533,0 +572,26 @@\n+     * @param prefix     a constant to prepend before value\n+     * @return           updated index (coder value retained)\n+     *\/\n+    @ForceInline\n+    static int prepend(int index, byte coder, byte[] buf, long value, String prefix) {\n+        if (coder == String.LATIN1) {\n+            index = StringLatin1.getChars(value, index, buf);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.LATIN1);\n+        } else {\n+            index = StringUTF16.getChars(value, index, buf);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.UTF16);\n+        }\n+        return index;\n+    }\n+\n+    \/**\n+     * Prepends constant and the stringly representation of value into buffer,\n+     * given the coder and final index. Index is measured in chars, not in bytes!\n+     *\n+     * @param index      final char index in the buffer\n+     * @param the        coder of buf\n+     * @param buf        buffer to append to\n+     * @param value      string value to encode\n+     * @param prefix     a constant to prepend before value\n@@ -535,1 +600,2 @@\n-    static int prepend(int index, byte coder, byte[] buf, long value) {\n+    static int prepend(int index, byte coder, byte[] buf, String value, String prefix) {\n+        index -= value.length();\n@@ -537,1 +603,3 @@\n-            return StringLatin1.getChars(value, index, buf);\n+            value.getBytes(buf, index, String.LATIN1);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.LATIN1);\n@@ -539,1 +607,3 @@\n-            return StringUTF16.getChars(value, index, buf);\n+            value.getBytes(buf, index, String.UTF16);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.UTF16);\n@@ -541,0 +611,1 @@\n+        return index;\n@@ -563,0 +634,16 @@\n+    static int stringSize(int value) {\n+        return Integer.stringSize(value);\n+    }\n+\n+    static int stringSize(long value) {\n+        return Long.stringSize(value);\n+    }\n+\n+    static int stringSize(char value) {\n+        return 1;\n+    }\n+\n+    static int stringSize(String value) {\n+        return value.length();\n+    }\n+\n@@ -566,0 +653,8 @@\n+\n+    static String stringOf(float value) {\n+        return Float.toString(value);\n+    }\n+\n+    static String stringOf(double value) {\n+        return Double.toString(value);\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":114,"deletions":19,"binary":false,"changes":133,"status":"modified"},{"patch":"@@ -1087,1 +1087,1 @@\n-        static final MethodTypeDesc STRING_OFF = MethodTypeDesc.of(CD_String, CD_Object);\n+        static final MethodTypeDesc OBJECT_TO_STRING = MethodTypeDesc.of(CD_String, CD_Object);\n@@ -1094,0 +1094,2 @@\n+        static final MethodTypeDesc CHAR_TO_INT = MethodTypeDesc.of(CD_int, CD_char);\n+        static final MethodTypeDesc STR_TO_INT = MethodTypeDesc.of(CD_int, CD_String);\n@@ -1096,1 +1098,1 @@\n-        static final MethodTypeDesc NEW_ARRAY = MethodTypeDesc.of(CD_byteArray, CD_int);\n+        static final MethodTypeDesc NEW_ARRAY = MethodTypeDesc.of(CD_byteArray, CD_String, CD_int, CD_byte);\n@@ -1098,5 +1100,5 @@\n-        static final MethodTypeDesc PREPEND_String = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_byteArray, CD_String);\n-        static final MethodTypeDesc PREPEND_int = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_byteArray, CD_int);\n-        static final MethodTypeDesc PREPEND_long = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_byteArray, CD_long);\n-        static final MethodTypeDesc PREPEND_boolean = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_byteArray, CD_boolean);\n-        static final MethodTypeDesc PREPEND_char = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_byteArray, CD_char);\n+        static final MethodTypeDesc PREPEND_String = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_byteArray, CD_String, CD_String);\n+        static final MethodTypeDesc PREPEND_int = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_byteArray, CD_int, CD_String);\n+        static final MethodTypeDesc PREPEND_long = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_byteArray, CD_long, CD_String);\n+        static final MethodTypeDesc PREPEND_boolean = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_byteArray, CD_boolean, CD_String);\n+        static final MethodTypeDesc PREPEND_char = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_byteArray, CD_char, CD_String);\n@@ -1187,0 +1189,43 @@\n+        \/**\n+         * Generate InlineCopy-based code. <p>\n+         *\n+         * The following is an example of the generated target code:\n+         *\n+         * <blockquote><pre>\n+         * import static java.lang.StringConcatHelper.stringOf;\n+         * import static java.lang.StringConcatHelper.stringSize;\n+         * import static java.lang.StringConcatHelper.newArray;\n+         * import static java.lang.StringConcatHelper.prepend;\n+         *\n+         * public static String concat(int arg0, long arg1, boolean arg3, char arg4, String arg5, Object arg6, Object arg7) {\n+         *     String constant0, constant1, ..., constant8;\n+         *     int initCoder = ...;\n+         *     int initIndex = ...;\n+         *\n+         *     \/\/ String arg\n+         *     arg5 = stringOf(arg5);\n+         *\n+         *     \/\/ Types other than byte\/short\/int\/long\/boolean\/String require a local variable to store\n+         *     var str0 = stringOf(arg6);\n+         *     var str1 = stringOf(arg7);\n+         *\n+         *     int coder = initCoder | stringCoder(arg4) | arg5.coder() | str0.coder() | str1.coder();\n+         *     int index = initIndex + stringSize(arg0) + stringSize(arg1) + stringSize(arg2) + stringSize(arg3)\n+         *                           + stringSize(arg4) + stringSize(arg5) + stringSize(str0) + stringSize(str1);\n+         *\n+         *     index -= constant8.length();\n+         *     byte[] buf = newArray(constant8, index, coder);\n+         *\n+         *     index = prepend(index, coder, buf, str1, constant7);\n+         *     index = prepend(index, coder, buf, str0, constant6);\n+         *     index = prepend(index, coder, buf, arg5, constant5);\n+         *     index = prepend(index, coder, buf, arg4, constant4);\n+         *     index = prepend(index, coder, buf, arg3, constant3);\n+         *     index = prepend(index, coder, buf, arg2, constant2);\n+         *     index = prepend(index, coder, buf, arg1, constant1);\n+         *     index = prepend(index, coder, buf, arg0, constant0);\n+         *\n+         *     return new String(buf, (byte) coder);\n+         * }\n+         * <\/pre><\/blockquote>\n+         *\/\n@@ -1203,1 +1248,0 @@\n-                    int strings = 0;\n@@ -1206,2 +1250,0 @@\n-                    \/\/ Types other than byte\/short\/int\/long\/boolean require a local variable to store\n-                    int[] paramStrLocalSlots = new int[paramCount];\n@@ -1213,3 +1255,0 @@\n-                        if (needStringOf(cl)) {\n-                            paramStrLocalSlots[i] = strings++;\n-                        }\n@@ -1218,0 +1257,4 @@\n+                    int coderSlot = argSlots;\n+                    int indexSlot = argSlots + 1;\n+                    int bufSlot   = argSlots + 2;\n+\n@@ -1221,2 +1264,2 @@\n-                     * str0 = Float.toString((float)args[0]);\n-                     * str1 = Double.toString((double)args[1]);\n+                     * str0 = StringConcatHelper.stringOf(args(0));\n+                     * str1 = StringConcatHelper.stringOf(args(1));\n@@ -1227,1 +1270,1 @@\n-                    for (int i = 0; i < paramCount; i++) {\n+                    for (int i = 0, strings = 0; i < paramCount; i++) {\n@@ -1231,1 +1274,1 @@\n-                            cb.loadLocal(kind, paramSlots[i]);\n+                            MethodTypeDesc methodTypeDesc;\n@@ -1233,1 +1276,1 @@\n-                                cb.invokestatic(CD_Float, \"toString\", FLOAT_TO_STRING);\n+                                methodTypeDesc = FLOAT_TO_STRING;\n@@ -1235,1 +1278,1 @@\n-                                cb.invokestatic(CD_Double, \"toString\", DOUBLE_TO_STRING);\n+                                methodTypeDesc = DOUBLE_TO_STRING;\n@@ -1237,1 +1280,12 @@\n-                                cb.invokestatic(CD_StringConcatHelper, \"stringOf\", STRING_OFF);\n+                                methodTypeDesc = OBJECT_TO_STRING;\n+                            }\n+\n+                            \/\/ Types other than byte\/short\/int\/long\/boolean\/String require a local variable to store\n+                            int strLocalSlot = (cl == String.class)\n+                                    ? paramSlots[i]\n+                                    : argSlots + 3 + (strings++);\n+                            cb.loadLocal(kind, paramSlots[i])\n+                              .invokestatic(CD_StringConcatHelper, \"stringOf\", methodTypeDesc)\n+                              .astore(strLocalSlot);\n+                            if (cl != String.class) {\n+                                paramSlots[i] = strLocalSlot;\n@@ -1239,1 +1293,0 @@\n-                            cb.astore(argSlots + paramStrLocalSlots[i]);\n@@ -1243,4 +1296,0 @@\n-                    int coderSlot = argSlots + strings;\n-                    int indexSlot = argSlots + strings + 1;\n-                    int bufSlot   = argSlots + strings + 2;\n-\n@@ -1264,1 +1313,1 @@\n-                            cb.aload(argSlots + paramStrLocalSlots[i])\n+                            cb.aload(paramSlots[i])\n@@ -1271,0 +1320,4 @@\n+                    String suffix = constants[constants.length - 1];\n+                    if (suffix == null) {\n+                        suffix = \"\";\n+                    }\n@@ -1274,3 +1327,1 @@\n-                     * index = initalIndex;\n-                     * index += stringSize(args[0]);\n-                     * index += stringSize(args[i])\n+                     * index = initalIndex + StringConcatHelper.stringSize(args[i]) + ...\n@@ -1278,1 +1329,0 @@\n-                     * buf = StringConcatHelper.newArray(index << coder)\n@@ -1285,1 +1335,3 @@\n-                        int pparamSlot = paramSlots[i];\n+                        int paramSlot = paramSlots[i];\n+\n+                        MethodTypeDesc methodTypeDesc;\n@@ -1287,2 +1339,1 @@\n-                            cb.loadLocal(kind, pparamSlot)\n-                              .invokestatic(CD_Integer, \"stringSize\", INT_TO_INT);\n+                            methodTypeDesc = INT_TO_INT;\n@@ -1290,2 +1341,1 @@\n-                            cb.loadLocal(kind, pparamSlot)\n-                              .invokestatic(CD_Long, \"stringSize\", LONG_TO_INT);\n+                            methodTypeDesc = LONG_TO_INT;\n@@ -1293,2 +1343,1 @@\n-                            cb.loadLocal(kind, pparamSlot)\n-                              .invokestatic(CD_StringConcatHelper, \"stringSize\", BOOLEAN_TO_INT);\n+                            methodTypeDesc = BOOLEAN_TO_INT;\n@@ -1296,1 +1345,1 @@\n-                            cb.iconst_1();\n+                            methodTypeDesc = CHAR_TO_INT;\n@@ -1298,2 +1347,2 @@\n-                            cb.aload(argSlots + paramStrLocalSlots[i])\n-                              .invokevirtual(CD_String, \"length\", TO_INT);\n+                            methodTypeDesc = STR_TO_INT;\n+                            kind = TypeKind.from(String.class);\n@@ -1301,1 +1350,3 @@\n-                        cb.iadd();\n+                        cb.loadLocal(kind, paramSlot)\n+                          .invokestatic(CD_StringConcatHelper, \"stringSize\", methodTypeDesc)\n+                          .iadd();\n@@ -1303,2 +1354,9 @@\n-                    cb.dup()\n-                      .istore(indexSlot)\n+                    cb.ldc(suffix.length())\n+                      .isub()\n+                      .istore(indexSlot);\n+\n+                    \/*\n+                     *  buf = StringConcatHelper.newArray(suffix, index, coder)\n+                     *\/\n+                    cb.ldc(suffix)\n+                      .iload(indexSlot)\n@@ -1306,1 +1364,0 @@\n-                      .ishl()\n@@ -1310,3 +1367,0 @@\n-                    \/\/ prepend suffix\n-                    prependConstant(cb, constants[constants.length - 1], bufSlot, indexSlot, coderSlot);\n-\n@@ -1318,5 +1372,5 @@\n-                        \/\/ prepend arguments :\n-                        \/\/ StringConcatHelper.prepend(index, coder, buf, args[i])\n-                        cb.iload(indexSlot)\n-                          .iload(coderSlot)\n-                          .aload(bufSlot);\n+                        \/*\n+                         * prepend arguments :\n+                         * index = StringConcatHelper.prepend(index, coder, buf, args[i])\n+                         *\/\n+                        MethodTypeDesc methodTypeDesc;\n@@ -1324,2 +1378,1 @@\n-                            cb.loadLocal(kind, paramSlot)\n-                              .invokestatic(CD_StringConcatHelper, \"prepend\", PREPEND_int);\n+                            methodTypeDesc = PREPEND_int;\n@@ -1327,2 +1380,1 @@\n-                            cb.loadLocal(kind, paramSlot)\n-                              .invokestatic(CD_StringConcatHelper, \"prepend\", PREPEND_long);\n+                            methodTypeDesc = PREPEND_long;\n@@ -1330,2 +1382,1 @@\n-                            cb.loadLocal(kind, paramSlot)\n-                              .invokestatic(CD_StringConcatHelper, \"prepend\", PREPEND_boolean);\n+                            methodTypeDesc = PREPEND_boolean;\n@@ -1333,2 +1384,1 @@\n-                            cb.loadLocal(kind, paramSlot)\n-                              .invokestatic(CD_StringConcatHelper, \"prepend\", PREPEND_char);\n+                            methodTypeDesc = PREPEND_char;\n@@ -1336,3 +1386,2 @@\n-                            int strLocalSlot = argSlots + paramStrLocalSlots[i];\n-                            cb.aload(strLocalSlot)\n-                              .invokestatic(CD_StringConcatHelper, \"prepend\", PREPEND_String);\n+                            methodTypeDesc = PREPEND_String;\n+                            kind = TypeKind.from(String.class);\n@@ -1340,4 +1389,11 @@\n-                        cb.istore(indexSlot);\n-\n-                        \/\/ prepend prefix constant\n-                        prependConstant(cb, constants[i], bufSlot, indexSlot, coderSlot);\n+                        String constant = constants[i];\n+                        if (constant == null) {\n+                            constant = \"\";\n+                        }\n+                        cb.iload(indexSlot)\n+                          .iload(coderSlot)\n+                          .aload(bufSlot)\n+                          .loadLocal(kind, paramSlot)\n+                          .ldc(constant)\n+                          .invokestatic(CD_StringConcatHelper, \"prepend\", methodTypeDesc)\n+                          .istore(indexSlot);\n@@ -1355,30 +1411,0 @@\n-                static void prependConstant(CodeBuilder cb, String constant, int bufSlot, int indexSlot, int coderSlot) {\n-                    if (constant == null) {\n-                        return;\n-                    }\n-\n-                    if (constant.length() == 1) {\n-                        \/\/ StringConcatHelper.prepend(index, coder, buf, constant.charAt(0))\n-                        cb.iload(indexSlot)\n-                          .iload(coderSlot)\n-                          .aload(bufSlot)\n-                          .loadConstant((int) constant.charAt(0))\n-                          .invokestatic(CD_StringConcatHelper, \"prepend\", PREPEND_char)\n-                          .istore(indexSlot);\n-                        return;\n-                    }\n-\n-                    \/\/ index -= constant.length()\n-                    cb.iload(indexSlot)\n-                      .loadConstant(constant.length())\n-                      .isub()\n-                      .istore(indexSlot);\n-\n-                    \/\/ constant.getBytes(buf, index, coder);\n-                    cb.ldc(constant)\n-                      .aload(bufSlot)\n-                      .iload(indexSlot)\n-                      .iload(coderSlot)\n-                      .invokevirtual(CD_String, \"getBytes\", STR_GET_BYTES);\n-                }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":123,"deletions":97,"binary":false,"changes":220,"status":"modified"}]}