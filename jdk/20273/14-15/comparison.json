{"files":[{"patch":"@@ -376,4 +376,7 @@\n-            if (concatType.parameterCount() <= HIGH_ARITY_THRESHOLD) {\n-                return new ConstantCallSite(\n-                        generateMHInlineCopy(concatType, constantStrings)\n-                                .viewAsType(concatType, true));\n+            MethodHandle mh = simpleConcat(concatType, constantStrings);\n+            if (mh == null && concatType.parameterCount() <= HIGH_ARITY_THRESHOLD) {\n+                mh = generateMHInlineCopy(concatType, constantStrings);\n+            }\n+\n+            if (mh != null) {\n+                mh = mh.viewAsType(concatType, true);\n@@ -381,2 +384,1 @@\n-                return new ConstantCallSite(\n-                        SimpleStringBuilderStrategy.generate(lookup, concatType, constantStrings));\n+                mh = SimpleStringBuilderStrategy.generate(lookup, concatType, constantStrings);\n@@ -384,0 +386,2 @@\n+\n+            return new ConstantCallSite(mh);\n@@ -471,8 +475,1 @@\n-    \/**\n-     * <p>This strategy replicates what StringBuilders are doing: it builds the\n-     * byte[] array on its own and passes that byte[] array to String\n-     * constructor. This strategy requires access to some private APIs in JDK,\n-     * most notably, the private String constructor that accepts byte[] arrays\n-     * without copying.\n-     *\/\n-    private static MethodHandle generateMHInlineCopy(MethodType mt, String[] constants) {\n+    private static MethodHandle simpleConcat(MethodType mt, String[] constants) {\n@@ -506,0 +503,15 @@\n+        return null;\n+    }\n+\n+    \/**\n+     * <p>This strategy replicates what StringBuilders are doing: it builds the\n+     * byte[] array on its own and passes that byte[] array to String\n+     * constructor. This strategy requires access to some private APIs in JDK,\n+     * most notably, the private String constructor that accepts byte[] arrays\n+     * without copying.\n+     *\/\n+    private static MethodHandle generateMHInlineCopy(MethodType mt, String[] constants) {\n+        int paramCount = mt.parameterCount();\n+        String suffix = constants[paramCount];\n+\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":26,"deletions":14,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -1,57 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.bench.java.lang;\n-\n-import org.openjdk.jmh.annotations.Benchmark;\n-import org.openjdk.jmh.annotations.BenchmarkMode;\n-import org.openjdk.jmh.annotations.Fork;\n-import org.openjdk.jmh.annotations.Measurement;\n-import org.openjdk.jmh.annotations.Mode;\n-import org.openjdk.jmh.annotations.OutputTimeUnit;\n-import org.openjdk.jmh.annotations.Param;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.State;\n-import org.openjdk.jmh.annotations.Warmup;\n-\n-import java.util.concurrent.TimeUnit;\n-\n-\/**\n- * Trivial String concatenation benchmark.\n- *\/\n-@BenchmarkMode(Mode.AverageTime)\n-@OutputTimeUnit(TimeUnit.NANOSECONDS)\n-@State(Scope.Thread)\n-@Warmup(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n-@Measurement(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n-@Fork(value = 3, jvmArgsAppend = \"-Djava.lang.invoke.StringConcat.highArityThreshold=0\")\n-public class StringConcatGenerate extends StringConcat {\n-    public static void main(String... args) {\n-        StringConcatGenerate concat = new StringConcatGenerate();\n-        concat.concat4String();\n-        concat.concat123String();\n-        concat.concat6String();\n-        concat.concat13String();\n-        concat.concat23String();\n-        concat.concatConstInt();\n-    }\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringConcatGenerate.java","additions":0,"deletions":57,"binary":false,"changes":57,"status":"deleted"},{"patch":"@@ -1,84 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.bench.java.lang;\n-\n-import org.openjdk.jmh.annotations.Benchmark;\n-import org.openjdk.jmh.annotations.BenchmarkMode;\n-import org.openjdk.jmh.annotations.Fork;\n-import org.openjdk.jmh.annotations.Mode;\n-import org.openjdk.jmh.annotations.OutputTimeUnit;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.State;\n-\n-import java.util.concurrent.TimeUnit;\n-\n-\/**\n- * Benchmarks stressing String concat startup. Provides a main method that takes names of the sub-benchmarks\n- * of choice as arguments to work well as a standalone startup test\/diagnostic\n- *\n- *   StringSingle\n- *   MixedSmall - small number of mixed expressions\n- *   StringLarge - large number of expressions with a mix of String arguments and constants\n- *   MixedLarge - large number of expressions with a mix of constants, Strings and primivitive arguments\n- *\/\n-public class StringConcatStartupGenerate {\n-\n-    public static void main(String... args) {\n-        String[] selection = new String[] { \"StringLarge\", \"MixedSmall\", \"StringSingle\", \"MixedLarge\" };\n-        if (args.length > 0) {\n-            selection = args;\n-        }\n-        for (String select : selection) {\n-            switch (select) {\n-                case \"StringSingle\" -> new StringSingle().run();\n-                case \"MixedSmall\" -> new MixedSmall().run();\n-                case \"StringLarge\" -> new StringLarge().run();\n-                case \"MixedLarge\" -> new MixedLarge().run();\n-            }\n-        }\n-    }\n-\n-    @BenchmarkMode(Mode.SingleShotTime)\n-    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n-    @State(Scope.Thread)\n-    @Fork(value = 40, warmups = 2, jvmArgsAppend = \"-Djava.lang.invoke.StringConcat.highArityThreshold=0\")\n-    public static class StringSingle extends StringConcatStartup.StringSingle { }\n-\n-    @BenchmarkMode(Mode.SingleShotTime)\n-    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n-    @State(Scope.Thread)\n-    @Fork(value = 20, warmups = 2, jvmArgsAppend = \"-Djava.lang.invoke.StringConcat.highArityThreshold=0\")\n-    public static class MixedSmall extends StringConcatStartup.MixedSmall { }\n-\n-    @BenchmarkMode(Mode.SingleShotTime)\n-    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n-    @State(Scope.Thread)\n-    @Fork(value = 10, warmups = 2, jvmArgsAppend = \"-Djava.lang.invoke.StringConcat.highArityThreshold=0\")\n-    public static class StringLarge extends StringConcatStartup.StringLarge { }\n-\n-    @BenchmarkMode(Mode.SingleShotTime)\n-    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n-    @State(Scope.Thread)\n-    @Fork(value = 10, warmups = 2, jvmArgsAppend = \"-Djava.lang.invoke.StringConcat.highArityThreshold=0\")\n-    public static class MixedLarge extends StringConcatStartup.MixedLarge { }\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringConcatStartupGenerate.java","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"}]}