{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng\/othervm LocaleMatchingTest\n+ * @run junit\/othervm LocaleMatchingTest\n@@ -31,0 +31,4 @@\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -43,4 +47,4 @@\n-import static org.testng.Assert.*;\n-\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -50,2 +54,1 @@\n-    @DataProvider(name = \"LRConstructorData\")\n-    Object[][] LRConstructorData() {\n+    static Object[][] LRConstructorData() {\n@@ -65,2 +68,1 @@\n-    @DataProvider(name = \"LRConstructorNPEData\")\n-    Object[][] LRConstructorNPEData() {\n+    static Object[][] LRConstructorNPEData() {\n@@ -74,2 +76,1 @@\n-    @DataProvider(name = \"LRConstructorIAEData\")\n-    Object[][] LRConstructorIAEData() {\n+    static Object[][] LRConstructorIAEData() {\n@@ -96,2 +97,1 @@\n-    @DataProvider(name = \"LRParseData\")\n-    Object[][] LRParseData() {\n+    static Object[][] LRParseData() {\n@@ -142,2 +142,1 @@\n-    @DataProvider(name = \"LRParseIAEData\")\n-    Object[][] LRParseIAEData() {\n+    static Object[][] LRParseIAEData() {\n@@ -151,2 +150,1 @@\n-    @DataProvider(name = \"LRMapEquivalentsData\")\n-    Object[][] LRMapEquivalentsData() {\n+    static Object[][] LRMapEquivalentsData() {\n@@ -184,2 +182,1 @@\n-    @DataProvider(name = \"LFilterData\")\n-    Object[][] LFilterData() {\n+    static Object[][] LFilterData() {\n@@ -206,2 +203,1 @@\n-    @DataProvider(name = \"LFilterNPEData\")\n-    Object[][] LFilterNPEData() {\n+    static Object[][] LFilterNPEData() {\n@@ -215,2 +211,1 @@\n-    @DataProvider(name = \"LFilterTagsData\")\n-    Object[][] LFilterTagsData() {\n+    static Object[][] LFilterTagsData() {\n@@ -277,2 +272,1 @@\n-    @DataProvider(name = \"LLookupData\")\n-    Object[][] LLookupData() {\n+    static Object[][] LLookupData() {\n@@ -287,2 +281,1 @@\n-    @DataProvider(name = \"LLookupTagData\")\n-    Object[][] LLookupTagData() {\n+    static Object[][] LLookupTagData() {\n@@ -301,2 +294,2 @@\n-    public void testLRConstants() {\n-        assertEquals(MIN_WEIGHT, 0.0, \"    MIN_WEIGHT should be 0.0 but got \"\n+    void testLRConstants() {\n+        assertEquals(0.0, MIN_WEIGHT, \"    MIN_WEIGHT should be 0.0 but got \"\n@@ -304,1 +297,1 @@\n-        assertEquals(MAX_WEIGHT, 1.0, \"    MAX_WEIGHT should be 1.0 but got \"\n+        assertEquals(1.0, MAX_WEIGHT, \"    MAX_WEIGHT should be 1.0 but got \"\n@@ -308,2 +301,3 @@\n-    @Test(dataProvider = \"LRConstructorData\")\n-    public void testLRConstructors(String range, double weight) {\n+    @MethodSource(\"LRConstructorData\")\n+    @ParameterizedTest\n+    void testLRConstructors(String range, double weight) {\n@@ -316,1 +310,1 @@\n-        assertEquals(lr.getRange(), range.toLowerCase(Locale.ROOT),\n+        assertEquals(range.toLowerCase(Locale.ROOT), lr.getRange(),\n@@ -319,1 +313,1 @@\n-        assertEquals(lr.getWeight(), weight,\n+        assertEquals(weight, lr.getWeight(),\n@@ -324,2 +318,3 @@\n-    @Test(dataProvider = \"LRConstructorNPEData\", expectedExceptions = NullPointerException.class)\n-    public void testLRConstructorNPE(String range, double weight) {\n+    @MethodSource(\"LRConstructorNPEData\")\n+    @ParameterizedTest\n+    void testLRConstructorNPE(String range, double weight) {\n@@ -327,1 +322,1 @@\n-            new LanguageRange(range);\n+            assertThrows(NullPointerException.class, () -> new LanguageRange(range));\n@@ -329,1 +324,1 @@\n-            new LanguageRange(range, weight);\n+            assertThrows(NullPointerException.class, () -> new LanguageRange(range, weight));\n@@ -333,2 +328,3 @@\n-    @Test(dataProvider = \"LRConstructorIAEData\", expectedExceptions = IllegalArgumentException.class)\n-    public void testLRConstructorIAE(String range, double weight) {\n+    @MethodSource(\"LRConstructorIAEData\")\n+    @ParameterizedTest\n+    void testLRConstructorIAE(String range, double weight) {\n@@ -336,1 +332,1 @@\n-            new LanguageRange(range);\n+            assertThrows(IllegalArgumentException.class, () -> new LanguageRange(range));\n@@ -338,1 +334,1 @@\n-            new LanguageRange(range, weight);\n+            assertThrows(IllegalArgumentException.class, () -> new LanguageRange(range, weight));\n@@ -343,1 +339,1 @@\n-    public void testLREquals() {\n+    void testLREquals() {\n@@ -353,1 +349,1 @@\n-        assertNotEquals(lr1, \"\", \"    LR(ja, 1.0).equals(\\\"\\\") should return false.\");\n+        assertNotEquals(\"\", lr1, \"    LR(ja, 1.0).equals(\\\"\\\") should return false.\");\n@@ -356,3 +352,4 @@\n-    @Test(dataProvider = \"LRParseData\")\n-    public void testLRParse(String ranges, List<LanguageRange> expected) {\n-        assertEquals(LanguageRange.parse(ranges), expected,\n+    @MethodSource(\"LRParseData\")\n+    @ParameterizedTest\n+    void testLRParse(String ranges, List<LanguageRange> expected) {\n+        assertEquals(expected, LanguageRange.parse(ranges),\n@@ -362,3 +359,3 @@\n-    @Test(expectedExceptions = NullPointerException.class)\n-    public void testLRParseNPE() {\n-        LanguageRange.parse(null);\n+    @Test\n+    void testLRParseNPE() {\n+        assertThrows(NullPointerException.class, () -> LanguageRange.parse(null));\n@@ -367,3 +364,4 @@\n-    @Test(dataProvider = \"LRParseIAEData\", expectedExceptions = IllegalArgumentException.class)\n-    public void testLRParseIAE(String ranges) {\n-        LanguageRange.parse(ranges);\n+    @MethodSource(\"LRParseIAEData\")\n+    @ParameterizedTest\n+    void testLRParseIAE(String ranges) {\n+        assertThrows(IllegalArgumentException.class, () -> LanguageRange.parse(ranges));\n@@ -372,2 +370,3 @@\n-    @Test(dataProvider = \"LRMapEquivalentsData\")\n-    public void testLRMapEquivalents(List<Locale.LanguageRange> priorityList,\n+    @MethodSource(\"LRMapEquivalentsData\")\n+    @ParameterizedTest\n+    void testLRMapEquivalents(List<Locale.LanguageRange> priorityList,\n@@ -375,1 +374,1 @@\n-        assertEquals(LanguageRange.mapEquivalents(priorityList, map), expected,\n+        assertEquals(expected, LanguageRange.mapEquivalents(priorityList, map),\n@@ -379,3 +378,4 @@\n-    @Test(expectedExceptions = NullPointerException.class)\n-    public void testLRMapEquivalentsNPE() {\n-        LanguageRange.mapEquivalents(null, Map.of(\"ja\", List.of(\"ja\", \"ja-Hira\")));\n+    @Test\n+    void testLRMapEquivalentsNPE() {\n+        assertThrows(NullPointerException.class,\n+                () -> LanguageRange.mapEquivalents(null, Map.of(\"ja\", List.of(\"ja\", \"ja-Hira\"))));\n@@ -384,2 +384,3 @@\n-    @Test(dataProvider = \"LFilterData\")\n-    public void testLFilter(String ranges, String tags, FilteringMode mode, String expectedLocales) {\n+    @MethodSource(\"LFilterData\")\n+    @ParameterizedTest\n+    void testLFilter(String ranges, String tags, FilteringMode mode, String expectedLocales) {\n@@ -390,1 +391,1 @@\n-        assertEquals(actualLocales, expectedLocales, showErrorMessage(\"    L.Filter(\" + mode + \")\",\n+        assertEquals(expectedLocales, actualLocales, showErrorMessage(\"    L.Filter(\" + mode + \")\",\n@@ -394,5 +395,13 @@\n-    @Test(dataProvider = \"LFilterNPEData\", expectedExceptions = NullPointerException.class)\n-    public void testLFilterNPE(String ranges, String tags, FilteringMode mode) {\n-        List<LanguageRange> priorityList = LanguageRange.parse(ranges);\n-        List<Locale> tagList = generateLocales(tags);\n-        showLocales(Locale.filter(priorityList, tagList, mode));\n+    @MethodSource(\"LFilterNPEData\")\n+    @ParameterizedTest\n+    void testLFilterNPE(String ranges, String tags, FilteringMode mode) {\n+        if (ranges == null) {\n+            \/\/ Ranges are null\n+            assertThrows(NullPointerException.class, () -> LanguageRange.parse(ranges));\n+        } else {\n+            \/\/ Tags are null\n+            List<LanguageRange> priorityList = LanguageRange.parse(ranges);\n+            List<Locale> tagList = generateLocales(tags);\n+            assertThrows(NullPointerException.class,\n+                    () -> showLocales(Locale.filter(priorityList, tagList, mode)));\n+        }\n@@ -401,2 +410,2 @@\n-    @Test(expectedExceptions = IllegalArgumentException.class)\n-    public void testLFilterIAE() {\n+    @Test\n+    void testLFilterIAE() {\n@@ -407,1 +416,2 @@\n-        showLocales(Locale.filter(priorityList, tagList, REJECT_EXTENDED_RANGES));\n+        assertThrows(IllegalArgumentException.class,\n+                () -> showLocales(Locale.filter(priorityList, tagList, REJECT_EXTENDED_RANGES)));\n@@ -410,2 +420,3 @@\n-    @Test(dataProvider = \"LFilterTagsData\")\n-    public void testLFilterTags(String ranges, String tags, FilteringMode mode, String expectedTags) {\n+    @MethodSource(\"LFilterTagsData\")\n+    @ParameterizedTest\n+    void testLFilterTags(String ranges, String tags, FilteringMode mode, String expectedTags) {\n@@ -420,1 +431,1 @@\n-        assertEquals(actualTags, expectedTags,\n+        assertEquals(expectedTags, actualTags,\n@@ -425,2 +436,2 @@\n-    @Test(expectedExceptions = IllegalArgumentException.class)\n-    public void testLFilterTagsIAE() {\n+    @Test\n+    void testLFilterTagsIAE() {\n@@ -431,1 +442,2 @@\n-        showLanguageTags(Locale.filterTags(priorityList, generateLanguageTags(tags), REJECT_EXTENDED_RANGES));\n+        assertThrows(IllegalArgumentException.class,\n+                () -> showLanguageTags(Locale.filterTags(priorityList, generateLanguageTags(tags), REJECT_EXTENDED_RANGES)));\n@@ -434,2 +446,3 @@\n-    @Test(dataProvider = \"LLookupData\")\n-    public void testLLookup(String ranges, String tags, String expectedLocale) {\n+    @MethodSource(\"LLookupData\")\n+    @ParameterizedTest\n+    void testLLookup(String ranges, String tags, String expectedLocale) {\n@@ -440,1 +453,1 @@\n-        assertEquals(actualLocale, expectedLocale, showErrorMessage(\"    L.Lookup()\",\n+        assertEquals(expectedLocale, actualLocale, showErrorMessage(\"    L.Lookup()\",\n@@ -444,2 +457,3 @@\n-    @Test(dataProvider = \"LLookupTagData\")\n-    public void testLLookupTag(String ranges, String tags, String expectedTag) {\n+    @MethodSource(\"LLookupTagData\")\n+    @ParameterizedTest\n+    void testLLookupTag(String ranges, String tags, String expectedTag) {\n@@ -449,1 +463,1 @@\n-        assertEquals(actualTag, expectedTag, showErrorMessage(\"    L.LookupTag()\",\n+        assertEquals(expectedTag, actualTag, showErrorMessage(\"    L.LookupTag()\",\n","filename":"test\/jdk\/java\/util\/Locale\/LocaleMatchingTest.java","additions":97,"deletions":83,"binary":false,"changes":180,"status":"modified"},{"patch":"@@ -23,1 +23,2 @@\n-\/**\n+\n+\/*\n@@ -28,1 +29,1 @@\n- * @run testng RequiredAvailableLocalesTest\n+ * @run junit RequiredAvailableLocalesTest\n@@ -33,1 +34,6 @@\n-import java.text.*;\n+import java.text.BreakIterator;\n+import java.text.Collator;\n+import java.text.DateFormat;\n+import java.text.DateFormatSymbols;\n+import java.text.DecimalFormatSymbols;\n+import java.text.NumberFormat;\n@@ -35,1 +41,7 @@\n-import java.util.*;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -37,3 +49,1 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -41,1 +51,0 @@\n-@Test\n@@ -48,2 +57,1 @@\n-    @DataProvider\n-    public Object[][] availableLocalesClasses() {\n+    static Object[][] availableLocalesClasses() {\n@@ -63,2 +71,3 @@\n-    @Test (dataProvider = \"availableLocalesClasses\")\n-    public void checkRequiredLocales(Class<?> c, MethodType mt) throws Throwable {\n+    @MethodSource(\"availableLocalesClasses\")\n+    @ParameterizedTest\n+    void checkRequiredLocales(Class<?> c, MethodType mt) throws Throwable {\n","filename":"test\/jdk\/java\/util\/Locale\/RequiredAvailableLocalesTest.java","additions":21,"deletions":12,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,2 @@\n-\/**\n+\n+\/*\n@@ -30,1 +31,1 @@\n- * @run testng TestOf\n+ * @run junit TestOf\n@@ -32,2 +33,4 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertThrows;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -37,2 +40,2 @@\n-import org.testng.annotations.Test;\n-import org.testng.annotations.DataProvider;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -41,1 +44,0 @@\n-@Test\n@@ -44,2 +46,1 @@\n-    @DataProvider\n-    public Object[][] data_1Arg() {\n+    static Object[][] data_1Arg() {\n@@ -58,2 +59,1 @@\n-    @DataProvider\n-    public Object[][] data_2Args() {\n+    static Object[][] data_2Args() {\n@@ -72,2 +72,1 @@\n-    @DataProvider\n-    public Object[][] data_3Args() {\n+    static Object[][] data_3Args() {\n@@ -90,3 +89,4 @@\n-    @Test (dataProvider = \"data_1Arg\")\n-    public void test_1Arg(Locale expected, String lang) {\n-        assertEquals(Locale.of(lang), expected);\n+    @MethodSource(\"data_1Arg\")\n+    @ParameterizedTest\n+    void test_1Arg(Locale expected, String lang) {\n+        assertEquals(expected, Locale.of(lang));\n@@ -95,3 +95,4 @@\n-    @Test (dataProvider = \"data_2Args\")\n-    public void test_2Args(Locale expected, String lang, String ctry) {\n-        assertEquals(Locale.of(lang, ctry), expected);\n+    @MethodSource(\"data_2Args\")\n+    @ParameterizedTest\n+    void test_2Args(Locale expected, String lang, String ctry) {\n+        assertEquals(expected, Locale.of(lang, ctry));\n@@ -100,3 +101,4 @@\n-    @Test (dataProvider = \"data_3Args\")\n-    public void test_3Args(Locale expected, String lang, String ctry, String vrnt) {\n-        assertEquals(Locale.of(lang, ctry, vrnt), expected);\n+    @MethodSource(\"data_3Args\")\n+    @ParameterizedTest\n+    void test_3Args(Locale expected, String lang, String ctry, String vrnt) {\n+        assertEquals(expected, Locale.of(lang, ctry, vrnt));\n@@ -106,1 +108,1 @@\n-    public void test_NPE() {\n+    void test_NPE() {\n","filename":"test\/jdk\/java\/util\/Locale\/TestOf.java","additions":26,"deletions":24,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run testng\/othervm CalendarTests\n+ * @run junit\/othervm CalendarTests\n@@ -34,2 +34,0 @@\n-import static org.testng.Assert.assertEquals;\n-\n@@ -41,4 +39,6 @@\n-import org.testng.annotations.AfterTest;\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -49,1 +49,0 @@\n-@Test\n@@ -67,2 +66,2 @@\n-    @BeforeTest\n-    public void beforeTest() {\n+    @BeforeAll\n+    static void beforeTest() {\n@@ -73,2 +72,2 @@\n-    @AfterTest\n-    public void afterTest() {\n+    @AfterAll\n+    static void afterTest() {\n@@ -78,2 +77,1 @@\n-    @DataProvider(name=\"tz\")\n-    Object[][] tz() {\n+    static Object[][] tz() {\n@@ -90,2 +88,1 @@\n-    @DataProvider(name=\"firstDayOfWeek\")\n-    Object[][] firstDayOfWeek () {\n+    static Object[][] firstDayOfWeek () {\n@@ -117,2 +114,1 @@\n-    @DataProvider(name=\"minDaysInFirstWeek\")\n-    Object[][] minDaysInFrstWeek () {\n+    static Object[][] minDaysInFirstWeek () {\n@@ -129,2 +125,3 @@\n-    @Test(dataProvider=\"tz\")\n-    public void test_tz(Locale locale, TimeZone zoneExpected) {\n+    @MethodSource(\"tz\")\n+    @ParameterizedTest\n+    void test_tz(Locale locale, TimeZone zoneExpected) {\n@@ -132,1 +129,1 @@\n-        assertEquals(df.getTimeZone(), zoneExpected);\n+        assertEquals(zoneExpected, df.getTimeZone());\n@@ -135,1 +132,1 @@\n-        assertEquals(c.getTimeZone(), zoneExpected);\n+        assertEquals(zoneExpected, c.getTimeZone());\n@@ -138,1 +135,1 @@\n-        assertEquals(c.getTimeZone(), zoneExpected);\n+        assertEquals(zoneExpected, c.getTimeZone());\n@@ -141,2 +138,3 @@\n-    @Test(dataProvider=\"firstDayOfWeek\")\n-    public void test_firstDayOfWeek(Locale locale, int dowExpected) {\n+    @MethodSource(\"firstDayOfWeek\")\n+    @ParameterizedTest\n+    void test_firstDayOfWeek(Locale locale, int dowExpected) {\n@@ -144,1 +142,1 @@\n-        assertEquals(c.getFirstDayOfWeek(), dowExpected);\n+        assertEquals(dowExpected, c.getFirstDayOfWeek());\n@@ -147,1 +145,1 @@\n-        assertEquals(c.getFirstDayOfWeek(), dowExpected);\n+        assertEquals(dowExpected, c.getFirstDayOfWeek());\n@@ -150,2 +148,3 @@\n-    @Test(dataProvider=\"minDaysInFirstWeek\")\n-    public void test_minDaysInFirstWeek(Locale locale, int minDaysExpected) {\n+    @MethodSource(\"minDaysInFirstWeek\")\n+    @ParameterizedTest\n+    void test_minDaysInFirstWeek(Locale locale, int minDaysExpected) {\n@@ -153,1 +152,1 @@\n-        assertEquals(c.getMinimalDaysInFirstWeek(), minDaysExpected);\n+        assertEquals(minDaysExpected, c.getMinimalDaysInFirstWeek());\n@@ -156,1 +155,1 @@\n-        assertEquals(c.getMinimalDaysInFirstWeek(), minDaysExpected);\n+        assertEquals(minDaysExpected, c.getMinimalDaysInFirstWeek());\n","filename":"test\/jdk\/java\/util\/Locale\/bcp47u\/CalendarTests.java","additions":31,"deletions":32,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run testng CurrencyFormatTests\n+ * @run junit CurrencyFormatTests\n@@ -33,1 +33,2 @@\n-import static org.testng.Assert.assertEquals;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -38,2 +39,1 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -45,1 +45,0 @@\n-@Test\n@@ -48,2 +47,1 @@\n-    @DataProvider(name=\"getInstanceData\")\n-    Object[][] getInstanceData() {\n+    static Object[][] getInstanceData() {\n@@ -100,3 +98,4 @@\n-    @Test(dataProvider=\"getInstanceData\")\n-    public void test_getInstance(Locale locale, int amount, String expected) {\n-        assertEquals(NumberFormat.getCurrencyInstance(locale).format(amount), expected);\n+    @MethodSource(\"getInstanceData\")\n+    @ParameterizedTest\n+    void test_getInstance(Locale locale, int amount, String expected) {\n+        assertEquals(expected, NumberFormat.getCurrencyInstance(locale).format(amount));\n","filename":"test\/jdk\/java\/util\/Locale\/bcp47u\/CurrencyFormatTests.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run testng\/othervm CurrencyTests\n+ * @run junit\/othervm CurrencyTests\n@@ -34,1 +34,2 @@\n-import static org.testng.Assert.assertEquals;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -39,2 +40,1 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -45,1 +45,0 @@\n-@Test\n@@ -51,2 +50,1 @@\n-    @DataProvider(name=\"getInstanceData\")\n-    Object[][] getInstanceData() {\n+    static Object[][] getInstanceData() {\n@@ -79,2 +77,1 @@\n-    @DataProvider(name=\"getSymbolData\")\n-    Object[][] getSymbolData() {\n+    static Object[][] getSymbolData() {\n@@ -97,3 +94,4 @@\n-    @Test(dataProvider=\"getInstanceData\")\n-    public void test_getInstance(Locale locale, Currency currencyExpected) {\n-        assertEquals(Currency.getInstance(locale), currencyExpected);\n+    @MethodSource(\"getInstanceData\")\n+    @ParameterizedTest\n+    void test_getInstance(Locale locale, Currency currencyExpected) {\n+        assertEquals(currencyExpected, Currency.getInstance(locale));\n@@ -102,3 +100,4 @@\n-    @Test(dataProvider=\"getSymbolData\")\n-    public void test_getSymbol(Currency c, Locale locale, String expected) {\n-        assertEquals(c.getSymbol(locale), expected);\n+    @MethodSource(\"getSymbolData\")\n+    @ParameterizedTest\n+    void test_getSymbol(Currency c, Locale locale, String expected) {\n+        assertEquals(expected, c.getSymbol(locale));\n","filename":"test\/jdk\/java\/util\/Locale\/bcp47u\/CurrencyTests.java","additions":15,"deletions":16,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run testng DisplayNameTests\n+ * @run junit DisplayNameTests\n@@ -33,1 +33,2 @@\n-import static org.testng.Assert.assertEquals;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -37,2 +38,1 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -44,1 +44,0 @@\n-@Test\n@@ -78,2 +77,1 @@\n-    @DataProvider(name=\"locales\")\n-    Object[][] tz() {\n+    static Object[][] locales() {\n@@ -104,2 +102,3 @@\n-    @Test(dataProvider=\"locales\")\n-    public void test_locales(Locale inLocale, Locale testLocale, String expected) {\n+    @MethodSource(\"locales\")\n+    @ParameterizedTest\n+    void test_locales(Locale inLocale, Locale testLocale, String expected) {\n@@ -107,1 +106,1 @@\n-        assertEquals(result, expected);\n+        assertEquals(expected, result);\n","filename":"test\/jdk\/java\/util\/Locale\/bcp47u\/DisplayNameTests.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run testng FormatTests\n+ * @run junit FormatTests\n@@ -34,1 +34,4 @@\n-import static org.testng.Assert.assertEquals;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -43,4 +46,1 @@\n-import org.testng.annotations.AfterTest;\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -51,1 +51,0 @@\n-@Test\n@@ -83,2 +82,2 @@\n-    @BeforeTest\n-    public void beforeTest() {\n+    @BeforeAll\n+    static void beforeTest() {\n@@ -89,2 +88,2 @@\n-    @AfterTest\n-    public void afterTest() {\n+    @AfterAll\n+    static void afterTest() {\n@@ -94,2 +93,1 @@\n-    @DataProvider(name=\"dateFormatData\")\n-    Object[][] dateFormatData() {\n+    static Object[][] dateFormatData() {\n@@ -119,2 +117,1 @@\n-    @DataProvider(name=\"numberFormatData\")\n-    Object[][] numberFormatData() {\n+    static Object[][] numberFormatData() {\n@@ -139,2 +136,3 @@\n-    @Test(dataProvider=\"dateFormatData\")\n-    public void test_DateFormat(Locale locale, String calClass, TimeZone tz,\n+    @MethodSource(\"dateFormatData\")\n+    @ParameterizedTest\n+    void test_DateFormat(Locale locale, String calClass, TimeZone tz,\n@@ -146,1 +144,1 @@\n-            assertEquals(df.getCalendar().getClass(), expected);\n+            assertEquals(expected, df.getCalendar().getClass());\n@@ -152,1 +150,1 @@\n-            assertEquals(df.getTimeZone(), tz);\n+            assertEquals(tz, df.getTimeZone());\n@@ -155,2 +153,2 @@\n-        assertEquals(formatted, formatExpected);\n-        assertEquals(df.parse(formatted), testDate);\n+        assertEquals(formatExpected, formatted);\n+        assertEquals(testDate, df.parse(formatted));\n@@ -159,2 +157,3 @@\n-    @Test(dataProvider=\"numberFormatData\")\n-    public void test_NumberFormat(Locale locale, double num,\n+    @MethodSource(\"numberFormatData\")\n+    @ParameterizedTest\n+    void test_NumberFormat(Locale locale, double num,\n@@ -165,2 +164,2 @@\n-        assertEquals(nf.format(num), formatExpected);\n-        assertEquals(nf.parse(formatted), num);\n+        assertEquals(formatExpected, nf.format(num));\n+        assertEquals(num, nf.parse(formatted));\n","filename":"test\/jdk\/java\/util\/Locale\/bcp47u\/FormatTests.java","additions":24,"deletions":25,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run testng SymbolsTests\n+ * @run junit SymbolsTests\n@@ -34,1 +34,2 @@\n-import static org.testng.Assert.assertEquals;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -40,2 +41,1 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -46,1 +46,0 @@\n-@Test\n@@ -53,2 +52,1 @@\n-    @DataProvider(name=\"dateFormatSymbolsData\")\n-    Object[][] dateFormatSymbolsData() {\n+    static Object[][] dateFormatSymbolsData() {\n@@ -64,2 +62,1 @@\n-    @DataProvider(name=\"decimalFormatSymbolsData\")\n-    Object[][] decimalFormatSymbolsData() {\n+    static Object[][] decimalFormatSymbolsData() {\n@@ -77,2 +74,3 @@\n-    @Test(dataProvider=\"dateFormatSymbolsData\")\n-    public void test_DateFormatSymbols(Locale locale, String amExpected, String pmExpected) {\n+    @MethodSource(\"dateFormatSymbolsData\")\n+    @ParameterizedTest\n+    void test_DateFormatSymbols(Locale locale, String amExpected, String pmExpected) {\n@@ -81,2 +79,2 @@\n-        assertEquals(ampm[0], amExpected);\n-        assertEquals(ampm[1], pmExpected);\n+        assertEquals(amExpected, ampm[0]);\n+        assertEquals(pmExpected, ampm[1]);\n@@ -85,2 +83,3 @@\n-    @Test(dataProvider=\"decimalFormatSymbolsData\")\n-    public void test_DecimalFormatSymbols(Locale locale, char decimal, char grouping) {\n+    @MethodSource(\"decimalFormatSymbolsData\")\n+    @ParameterizedTest\n+    void test_DecimalFormatSymbols(Locale locale, char decimal, char grouping) {\n@@ -88,2 +87,2 @@\n-        assertEquals(dfs.getDecimalSeparator(), decimal);\n-        assertEquals(dfs.getGroupingSeparator(), grouping);\n+        assertEquals(decimal, dfs.getDecimalSeparator());\n+        assertEquals(grouping, dfs.getGroupingSeparator());\n","filename":"test\/jdk\/java\/util\/Locale\/bcp47u\/SymbolsTests.java","additions":16,"deletions":17,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run testng\/othervm SystemPropertyTests\n+ * @run junit\/othervm SystemPropertyTests\n@@ -34,4 +34,2 @@\n-import static jdk.test.lib.process.ProcessTools.executeTestJava;\n-import static org.testng.Assert.assertTrue;\n-\n-import java.util.Locale;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -39,2 +37,2 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import static jdk.test.lib.process.ProcessTools.executeTestJava;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -46,1 +44,0 @@\n-@Test\n@@ -53,2 +50,1 @@\n-    @DataProvider(name=\"data\")\n-    Object[][] data() {\n+    static Object[][] data() {\n@@ -89,2 +85,3 @@\n-    @Test(dataProvider=\"data\")\n-    public void runTest(String extprop, String defLoc,\n+    @MethodSource(\"data\")\n+    @ParameterizedTest\n+    void runTest(String extprop, String defLoc,\n@@ -98,1 +95,1 @@\n-        assertTrue(exitValue == 0);\n+        assertEquals(0, exitValue);\n","filename":"test\/jdk\/java\/util\/Locale\/bcp47u\/SystemPropertyTests.java","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"}]}