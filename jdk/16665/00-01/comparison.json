{"files":[{"patch":"@@ -1886,1 +1886,1 @@\n-\/\/ Support class using when iterating over the heap.\n+\/\/ Support class used when iterating over the heap.\n@@ -1935,0 +1935,2 @@\n+   Mutex* _global_writer_lock;\n+\n@@ -1939,1 +1941,0 @@\n-   Mutex* _global_writer_lock;\n@@ -1943,0 +1944,4 @@\n+     \/\/ _lock and _global_writer_lock are used for synchronization between GC worker threads inside safepoint,\n+     \/\/ so we lock with _no_safepoint_check_flag.\n+     \/\/ signal_start() acquires _lock when global writer is locked,\n+     \/\/ its rank must be less than _global_writer_lock rank.\n@@ -1944,0 +1949,1 @@\n+     _global_writer_lock(new (std::nothrow) Mutex(Mutex::nosafepoint, \"DumpWriter_lock\")),\n@@ -1946,2 +1952,1 @@\n-     _started(false),\n-     _global_writer_lock(new (std::nothrow) Mutex(Mutex::nosafepoint, \"DumpWriter_lock\"))\n+     _started(false)\n@@ -2023,2 +2028,2 @@\n-  \/\/ calculate required buffer size\n-    size_t buf_size = strlen(base_path)\n+  \/\/ approximate required buffer size\n+  size_t buf_size = strlen(base_path)\n@@ -2026,1 +2031,1 @@\n-                    + 1 + (seq \/ 10)    \/\/ number\n+                    + 10                \/\/ number (that's enough for 2^32 parallel dumpers)\n@@ -2278,1 +2283,1 @@\n-  void update_parallel_dump_count(WorkerThreads* workers);\n+  void prepare_parallel_dump(WorkerThreads* workers);\n@@ -2350,1 +2355,1 @@\n-void VM_HeapDumper::update_parallel_dump_count(WorkerThreads* workers) {\n+void VM_HeapDumper::prepare_parallel_dump(WorkerThreads* workers) {\n@@ -2359,0 +2364,1 @@\n+  _dumper_controller = new (std::nothrow) DumperController(_num_dumper_threads);\n@@ -2411,2 +2417,1 @@\n-  update_parallel_dump_count(workers);\n-  _dumper_controller = new (std::nothrow) DumperController(_num_dumper_threads);\n+  prepare_parallel_dump(workers);\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"}]}