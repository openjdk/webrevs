{"files":[{"patch":"@@ -654,0 +654,1 @@\n+\/\/ An unmounted vthread always has the yield0() and yield() frames we need to hide.\n@@ -655,5 +656,3 @@\n-JvmtiEnvBase::skip_top_jvmti_annotated_frames(javaVFrame* jvf) {\n-  \/\/ The yield and yield0 may appear in an unmounted virtual thread.\n-  \/\/ The notifyJvmti* may appear in both carrier or virtual threads.\n-  for ( ; jvf != nullptr && jvf->method()->jvmti_mount_transition(); jvf = jvf->java_sender()) {\n-    \/\/ skip frame with jvmti_mount_transition() annotated method\n+JvmtiEnvBase::skip_yield_frames_for_unmounted_vthread(javaVFrame* jvf) {\n+  if (jvf == nullptr) { \/\/ check for safety\n+    return jvf;\n@@ -661,0 +660,3 @@\n+  jvf = jvf->java_sender(); \/\/ skip yield0 frame\n+  assert(jvf != nullptr, \"sanity check\");\n+  jvf = jvf->java_sender(); \/\/ skip yield frame\n@@ -666,3 +668,2 @@\n-  \/\/ The second condition is needed to hide notification methods.\n-  if (!is_in_VTMS_transition && (jvf == nullptr || !jvf->method()->jvmti_mount_transition())) {\n-    return jvf;  \/\/ No frames to skip.\n+  if (jvf == nullptr) {\n+    return jvf;\n@@ -670,5 +671,3 @@\n-  \/\/ Find jvf with a method annotated with @JvmtiMountTransition.\n-  for ( ; jvf != nullptr; jvf = jvf->java_sender()) {\n-    if (jvf->method()->jvmti_mount_transition()) {\n-      jvf = jvf->java_sender();  \/\/ Skip annotated method.\n-      break;\n+  if (jvf->method()->jvmti_mount_transition()) {\n+    \/\/ Skip frames annotated with @JvmtiMountTransition.\n+    for ( ; jvf != nullptr && jvf->method()->jvmti_mount_transition(); jvf = jvf->java_sender()) {\n@@ -676,2 +675,3 @@\n-    if (jvf->method()->changes_current_thread()) {\n-      break;\n+  } else if (is_in_VTMS_transition) {\n+    \/\/ Skip frames above the frame annotated with @ChangesCurrentThread.\n+    for ( ; jvf != nullptr && !jvf->method()->changes_current_thread(); jvf = jvf->java_sender()) {\n@@ -679,1 +679,0 @@\n-    \/\/ Skip frame above annotated method.\n@@ -686,7 +685,1 @@\n-  bool is_virtual = java_lang_VirtualThread::is_instance(jt->jvmti_vthread());\n-\n-  if (jt->is_in_VTMS_transition()) {\n-    jvf = check_and_skip_hidden_frames(true, jvf);\n-  } else if (is_virtual || jt->last_continuation() == nullptr) { \/\/ filter out pure continuations\n-    jvf = skip_top_jvmti_annotated_frames(jvf);\n-  }\n+  jvf = check_and_skip_hidden_frames(jt->is_in_VTMS_transition(), jvf);\n@@ -699,6 +692,5 @@\n-  if (java_lang_VirtualThread::is_instance(vthread)) { \/\/ paranoid check for safety\n-    if (java_lang_Thread::is_in_VTMS_transition(vthread)) {\n-      jvf = check_and_skip_hidden_frames(true, jvf);\n-    } else {\n-      jvf = skip_top_jvmti_annotated_frames(jvf);\n-    }\n+  if (java_lang_Thread::is_in_VTMS_transition(vthread)) {\n+    jvf = check_and_skip_hidden_frames(true, jvf);\n+  } else {\n+    \/\/ if vthread is not in a VTMS transition then it is unmounted\n+    jvf = skip_yield_frames_for_unmounted_vthread(jvf);\n@@ -729,1 +721,1 @@\n-    jvf = check_and_skip_hidden_frames(java_thread, jvf);\n+    jvf = check_and_skip_hidden_frames(false, jvf);\n@@ -733,1 +725,1 @@\n-    jvf = skip_top_jvmti_annotated_frames(jvf);\n+    jvf = check_and_skip_hidden_frames(vthread, jvf);\n@@ -1352,1 +1344,1 @@\n-     (state->is_virtual() && (jvf->is_vthread_entry() || jvf->method()->jvmti_mount_transition()))) {\n+      (state->is_virtual() && (jvf->is_vthread_entry() || jvf->method()->jvmti_mount_transition()))) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":24,"deletions":32,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -369,1 +369,1 @@\n-  static javaVFrame* skip_top_jvmti_annotated_frames(javaVFrame* jvf);\n+  static javaVFrame* skip_yield_frames_for_unmounted_vthread(javaVFrame* jvf);\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1813,3 +1813,1 @@\n-  \/\/ pure continuations have no VTMS transitions but they use methods annotated with JvmtiMountTransition\n-  if ((mh->jvmti_mount_transition() && (state->is_virtual() || thread->last_continuation() == nullptr)) ||\n-    thread->is_in_any_VTMS_transition()) {\n+  if (mh->jvmti_mount_transition() || thread->is_in_any_VTMS_transition()) {\n@@ -1907,3 +1905,1 @@\n-  \/\/ pure continuations have no VTMS transitions but they use methods annotated with JvmtiMountTransition\n-  if ((mh->jvmti_mount_transition() && (state->is_virtual() || thread->last_continuation() == nullptr)) ||\n-    thread->is_in_any_VTMS_transition()) {\n+  if (mh->jvmti_mount_transition() || thread->is_in_any_VTMS_transition()) {\n@@ -1985,3 +1981,1 @@\n-  \/\/ pure continuations have no VTMS transitions but they use methods annotated with JvmtiMountTransition\n-  if ((mh->jvmti_mount_transition() && (state->is_virtual() || thread->last_continuation() == nullptr)) ||\n-      thread->is_in_any_VTMS_transition()) {\n+  if (mh->jvmti_mount_transition() || thread->is_in_any_VTMS_transition()) {\n@@ -2151,3 +2145,1 @@\n-      \/\/ pure continuations have no VTMS transitions but they use methods annotated with JvmtiMountTransition\n-      if ((mh->jvmti_mount_transition() && (state->is_virtual() || thread->last_continuation() == nullptr)) ||\n-        thread->is_in_any_VTMS_transition()) {\n+      if (mh->jvmti_mount_transition() || thread->is_in_any_VTMS_transition()) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -344,1 +344,0 @@\n-    @JvmtiMountTransition\n@@ -357,1 +356,0 @@\n-    @JvmtiMountTransition\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/Continuation.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * A method may be annotated as \"jvmti mount transition\" to hint\n+ * A method may be annotated with JvmtiMountTransition to hint\n@@ -33,3 +33,3 @@\n- * Normally, a method is annotated as \"jvmti mount transition\" if it starts\n- * or ends virtual thread mount state transition (VTMS transition), so that\n- * the thread identity is not clear or different at method entry and exit.\n+ * Normally, a method is annotated with @JvmtiMountTransition if it starts\n+ * or ends Virtual Thread Mount State (VTMS) transition, so the thread\n+ * identity is undefined or different at method entry and exit.\n@@ -37,3 +37,0 @@\n- * The Continuation yield and yield0 frames normally are in VTMS transition\n- * but can be found out of transition in an unmounted virtual thread.\n- * This inconsistency is the reason why they also need this annotation.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/annotation\/JvmtiMountTransition.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"}]}