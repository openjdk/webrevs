{"files":[{"patch":"@@ -134,0 +134,8 @@\n+    public int classMajorVersion() {\n+        return attrs.majorVersion; \/\/ ..., 53, 54, ...\n+    }\n+\n+    public int classReleaseVersion() {\n+        return attrs.majorVersion - 44; \/\/ ..., 53 -> 9, 54 -> 10, ...\n+    }\n+\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/FingerPrint.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -213,1 +213,1 @@\n-    static String formatMsg(String key, String arg) {\n+    static String formatMsg(String key, String... args) {\n@@ -215,10 +215,0 @@\n-        String[] args = new String[1];\n-        args[0] = arg;\n-        return MessageFormat.format(msg, (Object[]) args);\n-    }\n-\n-    static String formatMsg2(String key, String arg, String arg1) {\n-        String msg = getMsg(key);\n-        String[] args = new String[2];\n-        args[0] = arg;\n-        args[1] = arg1;\n@@ -462,1 +452,1 @@\n-            error(formatMsg2(\"error.validator.jarfile.exception\", fname, e.getMessage()));\n+            error(formatMsg(\"error.validator.jarfile.exception\", fname, e.getMessage()));\n@@ -843,1 +833,1 @@\n-                    error(formatMsg2(\"error.release.unexpected.versioned.entry\",\n+                    error(formatMsg(\"error.release.unexpected.versioned.entry\",\n@@ -1267,2 +1257,1 @@\n-            out.print(formatMsg2(\"out.size\", String.valueOf(size),\n-                        String.valueOf(csize)));\n+            out.print(formatMsg(\"out.size\", String.valueOf(size), String.valueOf(csize)));\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/Main.java","additions":4,"deletions":15,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,0 @@\n-import static sun.tools.jar.Main.formatMsg2;\n@@ -167,1 +166,9 @@\n-\n+            \/\/ all versioned entries must be compatible with their release target number\n+            if (fp.mrversion() < fp.classReleaseVersion()) {\n+                errorAndInvalid(formatMsg(\"error.release.value.toohigh.versioned.entry\",\n+                        fp.entryName(), \/\/ META-INF\/versions\/9\/com\/foo\/Bar.class has class file version\n+                        String.valueOf(fp.classMajorVersion()), \/\/ 69, but class file version\n+                        String.valueOf(fp.mrversion() + 44), \/\/ 53 or less is required to target release\n+                        String.valueOf(fp.mrversion()))); \/\/ 9 of the Java Platform\n+                return;\n+            }\n@@ -313,1 +320,1 @@\n-        error(formatMsg2(\"error.validator.names.mismatch\",\n+        error(formatMsg(\"error.validator.names.mismatch\",\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/Validator.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -93,0 +93,2 @@\n+error.release.value.toohigh.versioned.entry=\\\n+        {0} has class file version {1}, but class file version {2} or less is required to target release {3} of the Java Platform\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/resources\/jar.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-        CompilerUtils.compile(source, classes);\n+        CompilerUtils.compile(source, classes, \"--release\", \"8\");\n@@ -132,1 +132,1 @@\n-        CompilerUtils.compile(source, classes);\n+        CompilerUtils.compile(source, classes, \"--release\", \"9\");\n@@ -136,1 +136,1 @@\n-        CompilerUtils.compile(source, classes);\n+        CompilerUtils.compile(source, classes, \"--release\", \"10\");\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/multiRelease\/MVJarSigningTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,0 +52,1 @@\n+import java.util.ArrayList;\n@@ -83,1 +84,1 @@\n-        javac(source, destination);\n+        javac(source, destination, 8);\n@@ -88,1 +89,1 @@\n-        javac(source, destination);\n+        javac(source, destination, 9);\n@@ -95,7 +96,10 @@\n-    private void javac(Path source, Path destination) throws IOException {\n-        String[] args = Stream.concat(\n-                Stream.of(\"-d\", destination.toString()),\n-                Files.walk(source)\n-                        .map(Path::toString)\n-                        .filter(s -> s.endsWith(\".java\"))\n-        ).toArray(String[]::new);\n+    private void javac(Path source, Path destination, int release) throws IOException {\n+        ArrayList<Object> arguments = new ArrayList();\n+        arguments.add(\"-d\");\n+        arguments.add(destination);\n+        arguments.add(\"--release\");\n+        arguments.add(release);\n+        try (var stream = Files.walk(source)) {\n+            stream.map(Path::toString).filter(s -> s.endsWith(\".java\")).forEach(arguments::add);\n+        }\n+        String[] args = arguments.stream().map(Object::toString).toArray(String[]::new);\n@@ -113,2 +117,2 @@\n-        Files.walk(userdir, 1)\n-                .filter(p -> !p.equals(userdir))\n+        try (var stream = Files.walk(userdir, 1)) {\n+            stream.filter(p -> !p.equals(userdir))\n@@ -126,0 +130,1 @@\n+        }\n@@ -232,1 +237,1 @@\n-        javac(source, destination);\n+        javac(source, destination, 10);\n@@ -243,1 +248,1 @@\n-        javac(modinfo, Paths.get(\"test5\"));\n+        javac(modinfo, Paths.get(\"test5\"), 9);\n@@ -338,1 +343,1 @@\n-        javac(src, dst);\n+        javac(src, dst, 8);\n@@ -400,1 +405,1 @@\n-        javac(src, dst);\n+        javac(src, dst, 8);\n","filename":"test\/jdk\/tools\/jar\/mmrjar\/Basic.java","additions":21,"deletions":16,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,2 +85,2 @@\n-        compileTemplate(classes.resolve(\"base\"), base);\n-        compileTemplate(classes.resolve(\"v10\"), v10);\n+        compileTemplate(8, classes.resolve(\"base\"), base);\n+        compileTemplate(10, classes.resolve(\"v10\"), v10);\n@@ -138,2 +138,2 @@\n-        compileTemplate(classes.resolve(\"base\"), base);\n-        compileTemplate(classes.resolve(\"v10\"), v10);\n+        compileTemplate(8, classes.resolve(\"base\"), base);\n+        compileTemplate(10, classes.resolve(\"v10\"), v10);\n@@ -179,2 +179,2 @@\n-        compileTemplate(classes.resolve(\"base\"), base);\n-        compileTemplate(classes.resolve(\"v10\"), v10);\n+        compileTemplate(8, classes.resolve(\"base\"), base);\n+        compileTemplate(10, classes.resolve(\"v10\"), v10);\n@@ -211,1 +211,1 @@\n-    private void compileTemplate(Path classes, String template) throws Throwable {\n+    private void compileTemplate(int release, Path classes, String template) throws Throwable {\n@@ -216,1 +216,1 @@\n-        javac(classes, classSourceFile);\n+        javac(release, classes, classSourceFile);\n@@ -455,1 +455,1 @@\n-        javac(classes, sourceFiles);\n+        javac(9, classes, sourceFiles);\n","filename":"test\/jdk\/tools\/jar\/multiRelease\/ApiValidatorTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- # @bug 8186087 8196748 8212807\n+ # @bug 8186087 8196748 8212807 8268611\n@@ -129,1 +129,1 @@\n-        for (String release : List.of(\"10000\", \"09\", \"00010\", \"10\")) {\n+        for (String release : List.of(\"09\", \"00010\", \"10\")) {\n@@ -131,1 +131,1 @@\n-                    \"--release\", release, \"-C\", classes.resolve(\"v10\").toString(), \".\")\n+                    \"--release\", release, \"-C\", classes.resolve(\"v9\").toString(), \".\")\n@@ -210,0 +210,1 @@\n+        \/\/ 8268611: The following creates an invalid JAR, which gets deleted.\n@@ -214,16 +215,5 @@\n-                .shouldHaveExitValue(SUCCESS);\n-\n-        checkMultiRelease(jarfile, true);\n-\n-        names = Map.of(\n-                \"version\/Main.class\",\n-                new String[]{\"base\", \"version\", \"Main.class\"},\n-\n-                \"version\/Version.class\",\n-                new String[]{\"v9\", \"version\", \"Version.class\"},\n-\n-                \"META-INF\/versions\/9\/version\/Version.class\",\n-                new String[]{\"v10\", \"version\", \"Version.class\"}\n-        );\n-\n-        compare(jarfile, names);\n+                .shouldNotHaveExitValue(SUCCESS)\n+                .shouldContain(\"META-INF\/versions\/9\/version\/Version.class\")\n+                .shouldContain(\" has class file version 54,\")\n+                .shouldContain(\" but class file version 53 or less is required\")\n+                .shouldContain(\" to target release 9 of the Java Platform\");\n@@ -250,1 +240,1 @@\n-        javac(classes.resolve(\"v9\"), source.resolve(\"Version.java\"));\n+        javac(9, classes.resolve(\"v9\"), source.resolve(\"Version.java\"));\n@@ -272,1 +262,1 @@\n-        javac(classes.resolve(\"v9\"), source.resolve(\"Extra.java\"));\n+        javac(9, classes.resolve(\"v9\"), source.resolve(\"Extra.java\"));\n@@ -294,1 +284,1 @@\n-        javac(classes.resolve(\"v9\"), source.resolve(\"Extra.java\"));\n+        javac(9, classes.resolve(\"v9\"), source.resolve(\"Extra.java\"));\n@@ -316,1 +306,1 @@\n-        javac(classes.resolve(\"v9\"), source.resolve(\"Version.java\"));\n+        javac(9, classes.resolve(\"v9\"), source.resolve(\"Version.java\"));\n@@ -385,1 +375,1 @@\n-        javac(classes.resolve(\"base\"), source.resolve(\"Nested.java\"));\n+        javac(8, classes.resolve(\"base\"), source.resolve(\"Nested.java\"));\n@@ -389,1 +379,1 @@\n-        javac(classes.resolve(\"v9\"), source.resolve(\"Nested.java\"));\n+        javac(9, classes.resolve(\"v9\"), source.resolve(\"Nested.java\"));\n@@ -410,1 +400,1 @@\n-        javac(classes.resolve(\"base\"), source.resolve(\"Nested.java\"));\n+        javac(8, classes.resolve(\"base\"), source.resolve(\"Nested.java\"));\n@@ -417,1 +407,1 @@\n-        javac(classes.resolve(\"v9\"), source.resolve(\"Nested.java\"));\n+        javac(9, classes.resolve(\"v9\"), source.resolve(\"Nested.java\"));\n@@ -463,1 +453,1 @@\n-        javac(classes.resolve(\"base\"), source.resolve(\"Nested.java\"));\n+        javac(8, classes.resolve(\"base\"), source.resolve(\"Nested.java\"));\n@@ -467,1 +457,1 @@\n-        javac(classes.resolve(\"v9\"), source.resolve(\"Nested.java\"));\n+        javac(9, classes.resolve(\"v9\"), source.resolve(\"Nested.java\"));\n@@ -492,1 +482,1 @@\n-        javac(classes.resolve(\"base\"), source.resolve(\"Nested.java\"));\n+        javac(8, classes.resolve(\"base\"), source.resolve(\"Nested.java\"));\n@@ -496,1 +486,1 @@\n-        javac(classes.resolve(\"v10\"), source.resolve(\"Nested.java\"));\n+        javac(10, classes.resolve(\"v10\"), source.resolve(\"Nested.java\"));\n@@ -538,1 +528,1 @@\n-                \"--release\", \"9\", \"-C\", classes.resolve(\"v10\").toString(), \".\")\n+                \"--release\", \"9\", \"-C\", classes.resolve(\"v9\").toString(), \".\")\n","filename":"test\/jdk\/tools\/jar\/multiRelease\/Basic.java","additions":23,"deletions":33,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n-        javac(base, source.resolve(\"Main.java\"), source.resolve(\"Version.java\"));\n+        javac(8, base, source.resolve(\"Main.java\"), source.resolve(\"Version.java\"));\n@@ -60,1 +60,1 @@\n-        javac(v9, source.resolve(\"Version.java\"));\n+        javac(9, v9, source.resolve(\"Version.java\"));\n@@ -65,1 +65,1 @@\n-        javac(v10, source.resolve(\"Version.java\"));\n+        javac(10, v10, source.resolve(\"Version.java\"));\n@@ -70,1 +70,1 @@\n-        javac(v10_1, source.resolve(\"Version.java\"));\n+        javac(10, v10_1, source.resolve(\"Version.java\"));\n","filename":"test\/jdk\/tools\/jar\/multiRelease\/Basic1.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-        javac(classes, source.resolve(\"Main.java\"), source.resolve(\"Version.java\"));\n+        javac(8, classes, source.resolve(\"Main.java\"), source.resolve(\"Version.java\"));\n@@ -70,1 +70,1 @@\n-        javac(classes, source.resolve(\"Version.java\"));\n+        javac(9, classes, source.resolve(\"Version.java\"));\n@@ -75,1 +75,1 @@\n-        javac(classes, source.resolve(\"Version.java\"));\n+        javac(10, classes, source.resolve(\"Version.java\"));\n@@ -104,6 +104,1 @@\n-    void javac(Path dest, Path... sourceFiles) throws Throwable {\n-        javac(dest, List.of(), sourceFiles);\n-    }\n-\n-    void javac(Path dest, List<String> extraParameters, Path... sourceFiles) throws Throwable {\n-\n+    void javac(int release, Path dest, Path... sourceFiles) throws Throwable {\n@@ -115,0 +110,2 @@\n+        commands.add(\"--release\");\n+        commands.add(String.valueOf(release));\n@@ -117,4 +114,1 @@\n-        Stream.of(sourceFiles)\n-                .map(Object::toString)\n-                .forEach(x -> commands.add(x));\n-        commands.addAll(extraParameters);\n+        Stream.of(sourceFiles).map(Object::toString).forEach(commands::add);\n","filename":"test\/jdk\/tools\/jar\/multiRelease\/MRTestBase.java","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,1 +91,1 @@\n-        javac(classesDir, List.of(\"--release\", majorVersion), sourceFile);\n+        javac(Integer.parseInt(majorVersion), classesDir, sourceFile);\n","filename":"test\/jdk\/tools\/jar\/multiRelease\/VersionValidatorTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @modules jdk.jdeps\/com.sun.tools.jdeps\n@@ -41,0 +40,1 @@\n+import java.io.RandomAccessFile;\n@@ -63,0 +63,9 @@\n+        \/\/ fixup classfile versions\n+        forceReleaseInClassFile(9, \"Main.class\");\n+        forceReleaseInClassFile(9, \"base\/test\/Version.class\", \"base\/p\/Foo.class\");\n+        forceReleaseInClassFile(9, \"9\/test\/NonPublic.class\", \"9\/test\/Version.class\");\n+        forceReleaseInClassFile(9, \"v9\/p\/Foo.class\", \"v9\/q\/Bar.class\");\n+        forceReleaseInClassFile(9, \"v9\/p\/Foo.class\", \"v9\/q\/Bar.class\");\n+        forceReleaseInClassFile(10, \"10\/test\/Version.class\");\n+        forceReleaseInClassFile(10, \"v10\/q\/Bar.class\", \"v10\/q\/Gee.class\");\n+\n@@ -77,0 +86,1 @@\n+        forceReleaseInClassFile(9, foo.resolve(\"module-info.class\"));\n@@ -81,0 +91,11 @@\n+    private void forceReleaseInClassFile(int release, Object... paths) {\n+        for (var path : paths) {\n+            try (var file = new RandomAccessFile(mrjar.resolve(path.toString()).toFile(), \"rw\")) {\n+                file.seek(4 + 2); \/\/ skip magic and minor\n+                file.writeShort(release + 44); \/\/ overwrite major\n+            } catch (Exception exception) {\n+                throw new RuntimeException(exception);\n+            }\n+        }\n+    }\n+\n","filename":"test\/langtools\/tools\/jdeps\/MultiReleaseJar.java","additions":23,"deletions":2,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-    private static final String VERSION = \"13\";\n+    private static final String VERSION = String.valueOf(Runtime.version().feature());\n@@ -125,1 +125,1 @@\n-            String regex = \"\\\\s+13\/p.internal.X\\\\s+->\\\\s+q.T\\\\s+not found\";\n+            String regex = \"\\\\s+\" + VERSION + \"\/p.internal.X\\\\s+->\\\\s+q.T\\\\s+not found\";\n","filename":"test\/langtools\/tools\/jdeps\/missingDeps\/MissingDepsTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-                assertTrue(CompilerUtils.compileModule(SRC_DIR, MODS_DIR, mn)));\n+                assertTrue(CompilerUtils.compileModule(SRC_DIR, MODS_DIR, mn, \"--release\", \"9\")));\n","filename":"test\/langtools\/tools\/jdeps\/multiVersion\/MultiVersionError.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}