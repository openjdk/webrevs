{"files":[{"patch":"@@ -134,0 +134,4 @@\n+    public int classMajorVersion() {\n+        return attrs.majorVersion; \/\/ ..., 53, 54, ...\n+    }\n+\n@@ -135,1 +139,1 @@\n-        return attrs.majorVersion - 44; \/\/ 53 -> 9, 54 -> 10, ...\n+        return attrs.majorVersion - 44; \/\/ ..., 53 -> 9, 54 -> 10, ...\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/FingerPrint.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -213,1 +213,1 @@\n-    static String formatMsg(String key, String arg) {\n+    static String formatMsg(String key, String... args) {\n@@ -215,10 +215,0 @@\n-        String[] args = new String[1];\n-        args[0] = arg;\n-        return MessageFormat.format(msg, (Object[]) args);\n-    }\n-\n-    static String formatMsg2(String key, String arg, String arg1) {\n-        String msg = getMsg(key);\n-        String[] args = new String[2];\n-        args[0] = arg;\n-        args[1] = arg1;\n@@ -462,1 +452,1 @@\n-            error(formatMsg2(\"error.validator.jarfile.exception\", fname, e.getMessage()));\n+            error(formatMsg(\"error.validator.jarfile.exception\", fname, e.getMessage()));\n@@ -843,1 +833,1 @@\n-                    error(formatMsg2(\"error.release.unexpected.versioned.entry\",\n+                    error(formatMsg(\"error.release.unexpected.versioned.entry\",\n@@ -1267,2 +1257,1 @@\n-            out.print(formatMsg2(\"out.size\", String.valueOf(size),\n-                        String.valueOf(csize)));\n+            out.print(formatMsg(\"out.size\", String.valueOf(size), String.valueOf(csize)));\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/Main.java","additions":4,"deletions":15,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -54,1 +54,0 @@\n-import static sun.tools.jar.Main.formatMsg2;\n@@ -169,2 +168,6 @@\n-                errorAndInvalid(formatMsg2(\"error.release.value.toohigh.versioned.entry\",\n-                        fp.entryName(), String.valueOf(fp.classReleaseVersion())));\n+                String actual = fp.classMajorVersion() + \" (Java \" + fp.classReleaseVersion() + \")\";\n+                errorAndInvalid(formatMsg(\"error.release.value.toohigh.versioned.entry\",\n+                        fp.entryName(), \/\/ META-INF\/versions\/9\/com\/foo\/Bar.class has class file version\n+                        actual, \/\/ 69 (Java 25), but class file version\n+                        String.valueOf(fp.mrversion() + 44), \/\/ 53 or less is required to target release\n+                        String.valueOf(fp.mrversion()))); \/\/ 9 of the Java Platform\n@@ -318,1 +321,1 @@\n-        error(formatMsg2(\"error.validator.names.mismatch\",\n+        error(formatMsg(\"error.validator.names.mismatch\",\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/Validator.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-        classfile release value of {0} too high: {1}\n+        {0} has class file version {1}, but class file version {2} or less is required to target release {3} of the Java Platform\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/resources\/jar.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -216,1 +216,4 @@\n-                .shouldContain(\"classfile release value of META-INF\/versions\/9\/version\/Version.class too high: 10\");\n+                .shouldContain(\"META-INF\/versions\/9\/version\/Version.class\")\n+                .shouldContain(\" has class file version 54 (Java 10),\")\n+                .shouldContain(\" but class file version 53 or less is required\")\n+                .shouldContain(\" to target release 9 of the Java Platform\");\n","filename":"test\/jdk\/tools\/jar\/multiRelease\/Basic.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}