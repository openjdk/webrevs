{"files":[{"patch":"@@ -243,1 +243,1 @@\n-  free_page(page);\n+  free_page(page, false \/* allow_defragment *\/);\n@@ -246,1 +246,1 @@\n-void ZHeap::free_page(ZPage* page) {\n+void ZHeap::free_page(ZPage* page, bool allow_defragment) {\n@@ -256,1 +256,1 @@\n-  _page_allocator.free_page(page);\n+  _page_allocator.free_page(page, allow_defragment);\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-  void free_page(ZPage* page);\n+  void free_page(ZPage* page, bool allow_defragment);\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -278,1 +278,1 @@\n-  free_page(page);\n+  free_page(page, false \/* allow_defragment *\/);\n@@ -465,0 +465,32 @@\n+bool ZPageAllocator::should_defragment(const ZPage* page) const {\n+  \/\/ A small page can end up at a high address (second half of the address space)\n+  \/\/ if we've split a larger page or we have a constrained address space. To help\n+  \/\/ fight address space fragmentation we remap such pages to a lower address, if\n+  \/\/ a lower address is available.\n+  return page->type() == ZPageType::small &&\n+         page->start() >= to_zoffset(_virtual.reserved() \/ 2) &&\n+         page->start() > _virtual.lowest_available_address();\n+}\n+\n+ZPage* ZPageAllocator::defragment_page(ZPage* page) {\n+  \/\/ Harvest the physical memory (which is committed)\n+  ZPhysicalMemory pmem;\n+  ZPhysicalMemory& old_pmem = page->physical_memory();\n+  pmem.add_segments(old_pmem);\n+  old_pmem.remove_segments();\n+\n+  _unmapper->unmap_and_destroy_page(page);\n+\n+  \/\/ Allocate new virtual memory at a low address\n+  const ZVirtualMemory vmem = _virtual.alloc(pmem.size(), true \/* force_low_address *\/);\n+\n+  \/\/ Create the new page and map it\n+  ZPage* new_page = new ZPage(ZPageType::small, vmem, pmem);\n+  map_page(new_page);\n+\n+  \/\/ Update statistics\n+  ZStatInc(ZCounterDefragment);\n+\n+  return new_page;\n+}\n+\n@@ -626,10 +658,0 @@\n-bool ZPageAllocator::should_defragment(const ZPage* page) const {\n-  \/\/ A small page can end up at a high address (second half of the address space)\n-  \/\/ if we've split a larger page or we have a constrained address space. To help\n-  \/\/ fight address space fragmentation we remap such pages to a lower address, if\n-  \/\/ a lower address is available.\n-  return page->type() == ZPageType::small &&\n-         page->start() >= to_zoffset(_virtual.reserved() \/ 2) &&\n-         page->start() > _virtual.lowest_available_address();\n-}\n-\n@@ -655,6 +677,0 @@\n-  if (should_defragment(page)) {\n-    \/\/ Defragment address space\n-    ZStatInc(ZCounterDefragment);\n-    return false;\n-  }\n-\n@@ -784,1 +800,1 @@\n-void ZPageAllocator::free_page(ZPage* page) {\n+void ZPageAllocator::free_page(ZPage* page, bool allow_defragment) {\n@@ -786,1 +802,7 @@\n-  ZPage* const to_recycle = _safe_recycle.register_and_clone_if_activated(page);\n+\n+  ZPage* to_recycle;\n+  if (allow_defragment && should_defragment(page)) {\n+    to_recycle = defragment_page(_safe_recycle.register_and_clone_if_activated(page));\n+  } else {\n+    to_recycle = _safe_recycle.register_and_clone_if_activated(page);\n+  }\n@@ -815,1 +837,7 @@\n-    to_recycle.push(_safe_recycle.register_and_clone_if_activated(page));\n+\n+    \/\/ Check if page needs to be remapped to avoid fragmentation\n+    if (should_defragment(page)) {\n+      to_recycle.push(defragment_page(_safe_recycle.register_and_clone_if_activated(page)));\n+    } else {\n+      to_recycle.push(_safe_recycle.register_and_clone_if_activated(page));\n+    }\n","filename":"src\/hotspot\/share\/gc\/z\/zPageAllocator.cpp","additions":48,"deletions":20,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -107,0 +107,3 @@\n+  bool should_defragment(const ZPage* page) const;\n+  ZPage* defragment_page(ZPage* page);\n+\n@@ -113,1 +116,0 @@\n-  bool should_defragment(const ZPage* page) const;\n@@ -154,1 +156,1 @@\n-  void free_page(ZPage* page);\n+  void free_page(ZPage* page, bool allow_defragment);\n","filename":"src\/hotspot\/share\/gc\/z\/zPageAllocator.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -414,1 +414,1 @@\n-    ZHeap::heap()->free_page(page);\n+    ZHeap::heap()->free_page(page, true \/* allow_defragment *\/);\n@@ -1040,1 +1040,1 @@\n-      ZHeap::heap()->free_page(page);\n+      ZHeap::heap()->free_page(page, true \/* allow_defragment *\/);\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocate.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}