{"files":[{"patch":"@@ -1,1 +1,1 @@\n-#  Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -648,0 +648,1 @@\n+    java\/util\/TimeZone\/DefaultTimeZoneTest.java \\\n","filename":"test\/jdk\/TEST.groups","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4296930 5033603 7092679 8340326\n+ * @summary Ensure that Java detects the platform time zone correctly, even\n+ * if changed during runtime. Also ensure that the system time zone detection code\n+ * detects the \"Automatically adjust clock for daylight saving changes\" setting\n+ * correctly on Windows. This is a manual test dependent on making changes to\n+ * the platform setting of the machine and thus cannot be automated.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @run main\/manual DefaultTimeZoneTest\n+ *\/\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import java.awt.BorderLayout;\n+import java.awt.Window;\n+import java.lang.reflect.InvocationTargetException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+public class DefaultTimeZoneTest  {\n+\n+    private static final SimpleDateFormat SDF =\n+            new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss zzzz (XXX)\");\n+    private static final String INSTRUCTIONS =\n+            \"\"\"\n+            Tests the platform time zone detection on all platforms.\n+            (Part I) and on\/off of DST adjustment on Windows (Part II).\n+\n+            Part I:\n+            Observe the displayed Time zone ID and the local time.\n+            Change the platform time zone setting, then click the\n+            \"Update Time Zone\" button. If the ID and local time\n+            update correctly, part I passes, otherwise press fail. Note that\n+            some time zone IDs have their aliases that may be displayed.\n+            For example, \"US\/Pacific\" is an alias of \"America\/Los_Angeles\".\n+            If this platform is Windows, proceed to Part II. Otherwise, press\n+            the Pass button to finish this applet.\n+\n+            Part II:\n+            Note that Part II may require the Administrator privilege to change\n+            Windows setting.\n+\n+              1. Open the Date and Time control panel.\n+              2. Select any time zone where daylight saving time is *currently*\n+                 in effect, such as \"(GMT-08:00) Pacific Time (US & Canada);\n+                 Tijuana\", \"(GMT+10:00) Canberra, Melbourne, Sydney\", and Apply.\n+              3. Observe the local time on the control panel (Date&Time pane) and\n+                 the applet local time should be the same (daylight time).\n+              4. Clear \"Automatically adjust clock for daylight saving changes\"\n+                 and Apply.\n+              5. Observe the two local times should be the same (standard time).\n+              6. Select \"Automatically adjust clock for daylight saving changes\"\n+                 and Apply.\n+\n+            If the local time in the control panel and applet are always the same,\n+            then this test passes. Press the Pass or Fail button based on the Part II\n+            result and finish this applet.\n+           \"\"\";\n+\n+    public static void main(String[] args)\n+            throws InterruptedException, InvocationTargetException {\n+        \/\/ Force platform time zone as default time zone\n+        TimeZone.setDefault(null);\n+        System.setProperty(\"user.timezone\", \"\");\n+        \/\/ Construct test window\n+        PassFailJFrame.builder()\n+                .title(\"DefaultTimeZoneTest Instructions\")\n+                .testUI(createTest())\n+                .instructions(INSTRUCTIONS)\n+                .build().awaitAndCheck();\n+    }\n+\n+    private static Window createTest() {\n+        var contents = new JFrame(\"DefaultTimeZoneTest\");\n+        var label = new JLabel(SDF.format(new Date()));\n+        var panel = new JPanel();\n+        var button = new JButton(\"Update Time Zone\");\n+        panel.add(button);\n+        contents.setSize(350, 250);\n+        contents.add(label, BorderLayout.NORTH);\n+        contents.add(panel, BorderLayout.CENTER);\n+        \/\/ Update default time zone on button click\n+        button.addActionListener(e -> {\n+            TimeZone tz = TimeZone.getDefault();\n+            SDF.setTimeZone(tz);\n+            label.setText(SDF.format(new Date()));\n+            contents.repaint();\n+        });\n+        return contents;\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/TimeZone\/DefaultTimeZoneTest.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"}]}