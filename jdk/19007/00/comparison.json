{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1165,0 +1165,31 @@\n+    \/**\n+     * Calculates the {@code Duration} until another {@code Instant}.\n+     * <p>\n+     * The start and end points are {@code this} and the specified instant.\n+     * The result will be negative if the end is before the start.\n+     * <p>\n+     * There are two ways to determine the duration between two instants.\n+     * The first is to invoke this method.\n+     * The second is to use {@link Duration#between(Temporal, Temporal)}:\n+     * <pre>\n+     *   \/\/ two ways to determine the duration\n+     *   duration = start.until(end);\n+     *   duration = Duration.between(start, end);\n+     * <\/pre>\n+     * The choice should be made based on which makes the code more readable.\n+     * <p>\n+     * This instance is immutable and unaffected by this method call.\n+     *\n+     * @param endExclusive the end {@code Instant}, exclusive, not null\n+     * @return the {@code Duration} from this {@code Instant} until the\n+     *      specified {@code endExclusive} {@code Instant}\n+     * @see Duration#between(Temporal, Temporal)\n+     * @since 23\n+     *\/\n+    public Duration until(Instant endExclusive) {\n+        Objects.requireNonNull(endExclusive, \"endExclusive\");\n+        long secsDiff = Math.subtractExact(endExclusive.seconds, seconds);\n+        int nanosDiff = endExclusive.nanos - nanos;\n+        return Duration.ofSeconds(secsDiff, nanosDiff);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/time\/Instant.java","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,0 +62,1 @@\n+import java.time.Duration;\n@@ -68,0 +69,1 @@\n+import static org.testng.Assert.assertThrows;\n@@ -71,1 +73,1 @@\n- * @bug 8273369\n+ * @bug 8273369 8331202\n@@ -123,0 +125,26 @@\n+\n+    @DataProvider\n+    private Object[][] provider_until_1arg() {\n+        Instant t1 = Instant.ofEpochSecond(0, 10);\n+        Instant t2 = Instant.ofEpochSecond(10, -20);\n+        return new Object[][] {\n+            {t1, t2},\n+            {t2, t1},\n+            {Instant.MIN, Instant.MAX},\n+            {Instant.MAX, Instant.MIN},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"provider_until_1arg\")\n+    public void test_until_1arg(Instant start, Instant end) {\n+        Duration expected = Duration.ofSeconds(end.getEpochSecond() - start.getEpochSecond(),\n+                end.getNano() - start.getNano());\n+        assertEquals(start.until(end), expected);\n+    }\n+\n+    @Test\n+    public void test_until_1arg_NPE() {\n+        assertThrows(NullPointerException.class, () -> {\n+            Instant.now().until(null);\n+        });\n+    }\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/TestInstant.java","additions":30,"deletions":2,"binary":false,"changes":32,"status":"modified"}]}