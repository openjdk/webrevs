{"files":[{"patch":"@@ -628,0 +628,1 @@\n+    com\/sun\/net\/httpserver\/simpleserver\/DocRootDirPermissionsWinTest.java \\\n","filename":"test\/jdk\/TEST.groups","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,292 @@\n+\/*\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Tests file permission checks during the creation of a `FileServerHandler`\n+ * @requires (os.family != \"windows\")\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.net.URIBuilder\n+ * @run main\/othervm -ea DocRootDirPermissionsTest true\n+ * @run main\/othervm -ea DocRootDirPermissionsTest false\n+ *\/\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse.BodyHandlers;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.AclEntry;\n+import java.nio.file.attribute.AclEntryPermission;\n+import java.nio.file.attribute.AclEntryType;\n+import java.nio.file.attribute.AclFileAttributeView;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.nio.file.attribute.UserPrincipal;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.logging.ConsoleHandler;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import com.sun.net.httpserver.HttpServer;\n+import com.sun.net.httpserver.SimpleFileServer;\n+import com.sun.net.httpserver.SimpleFileServer.OutputLevel;\n+import jdk.test.lib.net.URIBuilder;\n+import jdk.test.lib.util.FileUtils;\n+import static java.net.http.HttpClient.Builder.NO_PROXY;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.nio.file.StandardOpenOption.CREATE;\n+\n+\/**\n+ * Tests file permission checks during the creation of a FileServerHandler.\n+ *\n+ * A FileServerHandler can only be created if its root directory\n+ * is readable. The test consists of 2 runs:\n+ *     1) RootDir is readable\n+ *     2) RootDir is NOT readable\n+ * 2)  reuses the test directory created in the previous run, revoking\n+ *     read access.\n+* *\/\n+public class DocRootDirPermissionsTest {\n+\n+    private static final Path CWD = Path.of(\".\").toAbsolutePath().normalize();\n+    private static final Path TEST_DIR = CWD.resolve(\"RootDir\");\n+    private static final InetSocketAddress LOOPBACK_ADDR =\n+            new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n+\n+    private static final boolean ENABLE_LOGGING = true;\n+    private static final Logger LOGGER = Logger.getLogger(\"com.sun.net.httpserver\");\n+\n+    private static boolean readPermitted;\n+    private static String lastModifiedDir;\n+    private static String lastModifiedFile;\n+\n+    private static Set<PosixFilePermission> posixPermissions;\n+    private static List<AclEntry> acls;\n+\n+    public static void main(String[] args) throws Exception {\n+        new DocRootDirPermissionsTest().run(args);\n+    }\n+\n+    protected void run(String[] args) throws Exception{\n+        setupLogging();\n+        readPermitted = Boolean.parseBoolean(args[0]);\n+        if (readPermitted) {\n+            createTestDir();\n+            testDirectoryGET();\n+            testFileGET();\n+        } else {\n+            revokePermissions();\n+            try {\n+                testCreateHandler();\n+            } finally {\n+                restorePermissions();\n+            }\n+        }\n+    }\n+\n+    private void revokePermissions() throws IOException {\n+        if (!Files.isReadable(TEST_DIR)) {\n+            \/\/ good nothing to do:\n+            System.out.println(\"File is already not readable: nothing to do\");\n+            return;\n+        }\n+        System.out.println(\"FileSystem: \" + Files.getFileStore(TEST_DIR).type());\n+        if (Files.getFileStore(TEST_DIR).supportsFileAttributeView(\"posix\")) {\n+            System.out.println(\"Revoking owner's read access in POSIX permissions for \" + TEST_DIR);\n+            posixPermissions = Files.getPosixFilePermissions(TEST_DIR);\n+            Set<PosixFilePermission> newPerms = new HashSet<>(posixPermissions);\n+            newPerms.remove(PosixFilePermission.OWNER_READ);\n+            newPerms.remove(PosixFilePermission.OWNER_EXECUTE);\n+            Files.setPosixFilePermissions(TEST_DIR, newPerms);\n+        } else if (Files.getFileStore(TEST_DIR).supportsFileAttributeView(\"acl\")) {\n+            System.out.println(\"Revoking owner's read access in ACLs for \" + TEST_DIR);\n+            AclFileAttributeView view = Files.getFileAttributeView(TEST_DIR, AclFileAttributeView.class);\n+            acls = view.getAcl();\n+            List<AclEntry> entries = new ArrayList<>();\n+            UserPrincipal owner = view.getOwner();\n+            \/\/ Deny owner\n+            entries.add(AclEntry.newBuilder().setType(AclEntryType.DENY)\n+                    .setPrincipal(owner).setPermissions(AclEntryPermission.READ_DATA,\n+                            AclEntryPermission.READ_ATTRIBUTES, AclEntryPermission.READ_NAMED_ATTRS,\n+                            AclEntryPermission.EXECUTE)\n+                    .build());\n+            \/\/ Revoke read data and execute\n+            for (AclEntry entry : acls) {\n+                Set<AclEntryPermission> perms =\n+                        new HashSet<>(entry.permissions());\n+                if (entry.type() == AclEntryType.ALLOW) {\n+                    System.out.println(\"Revoking read access: \" + entry);\n+                    perms.remove(AclEntryPermission.READ_DATA);\n+                    perms.remove(AclEntryPermission.LIST_DIRECTORY);\n+                    perms.remove(AclEntryPermission.READ_ATTRIBUTES);\n+                    perms.remove(AclEntryPermission.READ_NAMED_ATTRS);\n+                    perms.remove(AclEntryPermission.EXECUTE);\n+                    entries.add(AclEntry.newBuilder(entry).setPermissions(perms).build());\n+                }\n+            }\n+            view.setAcl(entries);\n+            System.out.println(\"ACLs: \" + view.getAcl());\n+            try {\n+                System.out.println(\"File is readable: \" + Files.isReadable(TEST_DIR));\n+                Thread.sleep(50);\n+            } catch (InterruptedException x) {}\n+            \/\/ The above does not always work, skip the test if we can't make TEST_DIR\n+            \/\/ read-only.\n+            if (Files.isReadable(TEST_DIR)) {\n+                throw new jtreg.SkippedException(\"Can't make directory read-only\");\n+            }\n+        } else {\n+            throw new RuntimeException(\"Required attribute view not supported\");\n+        }\n+        System.out.println(\"File is readable: \" + Files.isReadable(TEST_DIR));\n+    }\n+\n+    private void restorePermissions() throws IOException {\n+        if (Files.getFileStore(TEST_DIR).supportsFileAttributeView(\"posix\")) {\n+            if (posixPermissions != null) {\n+                System.out.println(\"Restoring original POSIX permissions\");\n+                Files.setPosixFilePermissions(TEST_DIR, posixPermissions);\n+            }\n+        } else if (Files.getFileStore(TEST_DIR).supportsFileAttributeView(\"acl\")) {\n+            if (acls != null) {\n+                System.out.println(\"Restoring original ACLs\");\n+                AclFileAttributeView view = Files.getFileAttributeView(TEST_DIR, AclFileAttributeView.class);\n+                view.setAcl(acls);\n+            }\n+        } else {\n+            throw new RuntimeException(\"Required attribute view not supported\");\n+        }\n+    }\n+\n+    private void setupLogging() {\n+        if (ENABLE_LOGGING) {\n+            ConsoleHandler ch = new ConsoleHandler();\n+            LOGGER.setLevel(Level.ALL);\n+            ch.setLevel(Level.ALL);\n+            LOGGER.addHandler(ch);\n+        }\n+    }\n+\n+    private void createTestDir() throws IOException {\n+        if (Files.exists(TEST_DIR)) {\n+            FileUtils.deleteFileTreeWithRetry(TEST_DIR);\n+        }\n+        Files.createDirectories(TEST_DIR);\n+        var file = Files.writeString(TEST_DIR.resolve(\"aFile.txt\"), \"some text\", CREATE);\n+        lastModifiedDir = getLastModified(TEST_DIR);\n+        lastModifiedFile = getLastModified(file);\n+    }\n+\n+    private void testDirectoryGET() throws Exception {\n+        var expectedBody = openHTML + \"\"\"\n+                <h1>Directory listing for &#x2F;<\/h1>\n+                <ul>\n+                <li><a href=\"aFile.txt\">aFile.txt<\/a><\/li>\n+                <\/ul>\n+                \"\"\" + closeHTML;\n+        var expectedLength = Integer.toString(expectedBody.getBytes(UTF_8).length);\n+        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, TEST_DIR, OutputLevel.VERBOSE);\n+\n+        server.start();\n+        try {\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"\")).build();\n+            var response = client.send(request, BodyHandlers.ofString());\n+            assert response.statusCode() == 200;\n+            assert response.body().equals(expectedBody);\n+            assert response.headers().firstValue(\"content-type\").get().equals(\"text\/html; charset=UTF-8\");\n+            assert response.headers().firstValue(\"content-length\").get().equals(expectedLength);\n+            assert response.headers().firstValue(\"last-modified\").get().equals(lastModifiedDir);\n+        } finally {\n+            server.stop(0);\n+        }\n+    }\n+\n+    private void testFileGET() throws Exception {\n+        var expectedBody = \"some text\";\n+        var expectedLength = Integer.toString(expectedBody.getBytes(UTF_8).length);\n+        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, TEST_DIR, OutputLevel.VERBOSE);\n+\n+        server.start();\n+        try {\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"aFile.txt\")).build();\n+            var response = client.send(request, BodyHandlers.ofString());\n+            assert response.statusCode() == 200;\n+            assert response.body().equals(\"some text\");\n+            assert response.headers().firstValue(\"content-type\").get().equals(\"text\/plain\");\n+            assert response.headers().firstValue(\"content-length\").get().equals(expectedLength);\n+            assert response.headers().firstValue(\"last-modified\").get().equals(lastModifiedFile);\n+        } finally {\n+            server.stop(0);\n+        }\n+    }\n+\n+    private void testCreateHandler(){\n+        try {\n+            SimpleFileServer.createFileServer(LOOPBACK_ADDR, TEST_DIR, OutputLevel.NONE);\n+            throw new RuntimeException(\"Handler creation expected to fail\");\n+        } catch (IllegalArgumentException expected) { }\n+\n+        try {\n+            SimpleFileServer.createFileHandler(TEST_DIR);\n+            throw new RuntimeException(\"Handler creation expected to fail\");\n+        } catch (IllegalArgumentException expected) { }\n+    }\n+\n+    private static final String openHTML = \"\"\"\n+                <!DOCTYPE html>\n+                <html>\n+                <head>\n+                <meta charset=\"utf-8\"\/>\n+                <\/head>\n+                <body>\n+                \"\"\";\n+\n+    private static final String closeHTML = \"\"\"\n+                <\/body>\n+                <\/html>\n+                \"\"\";\n+\n+    private URI uri(HttpServer server, String path) {\n+        return URIBuilder.newBuilder()\n+                .host(\"localhost\")\n+                .port(server.getAddress().getPort())\n+                .scheme(\"http\")\n+                .path(\"\/\" + path)\n+                .buildUnchecked();\n+    }\n+\n+    private String getLastModified(Path path) throws IOException {\n+        return Files.getLastModifiedTime(path).toInstant().atZone(ZoneId.of(\"GMT\"))\n+                .format(DateTimeFormatter.RFC_1123_DATE_TIME);\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/DocRootDirPermissionsTest.java","additions":292,"deletions":0,"binary":false,"changes":292,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Tests file permission checks during the creation of a `FileServerHandler`\n+ * @requires (os.family == \"windows\")\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.net.URIBuilder\n+ * @run main\/manual\/othervm -ea DocRootDirPermissionsWinTest true\n+ * @run main\/manual\/othervm -ea DocRootDirPermissionsWinTest false\n+ *\/\n+\n+public class DocRootDirPermissionsWinTest extends DocRootDirPermissionsTest{\n+    public static void main(String[] args) throws Exception {\n+        new DocRootDirPermissionsWinTest().run(args);\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/DocRootDirPermissionsWinTest.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -1,287 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary Tests file permission checks during the creation of a `FileServerHandler`\n- * @library \/test\/lib\n- * @build jdk.test.lib.net.URIBuilder\n- * @run main\/othervm -ea RootDirPermissionsTest true\n- * @run main\/othervm -ea RootDirPermissionsTest false\n- *\/\n-\n-import java.io.IOException;\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n-import java.net.URI;\n-import java.net.http.HttpClient;\n-import java.net.http.HttpRequest;\n-import java.net.http.HttpResponse.BodyHandlers;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.attribute.AclEntry;\n-import java.nio.file.attribute.AclEntryPermission;\n-import java.nio.file.attribute.AclEntryType;\n-import java.nio.file.attribute.AclFileAttributeView;\n-import java.nio.file.attribute.PosixFilePermission;\n-import java.nio.file.attribute.UserPrincipal;\n-import java.time.ZoneId;\n-import java.time.format.DateTimeFormatter;\n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.logging.ConsoleHandler;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n-import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.SimpleFileServer;\n-import com.sun.net.httpserver.SimpleFileServer.OutputLevel;\n-import jdk.test.lib.net.URIBuilder;\n-import jdk.test.lib.util.FileUtils;\n-import static java.net.http.HttpClient.Builder.NO_PROXY;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-import static java.nio.file.StandardOpenOption.CREATE;\n-\n-\/**\n- * Tests file permission checks during the creation of a FileServerHandler.\n- *\n- * A FileServerHandler can only be created if its root directory\n- * is readable. The test consists of 2 runs:\n- *     1) RootDir is readable\n- *     2) RootDir is NOT readable\n- * 2)  reuses the test directory created in the previous run, revoking\n- *     read access.\n-* *\/\n-public class RootDirPermissionsTest {\n-\n-    static final Path CWD = Path.of(\".\").toAbsolutePath().normalize();\n-    static final Path TEST_DIR = CWD.resolve(\"RootDir\");\n-    static final InetSocketAddress LOOPBACK_ADDR =\n-            new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n-\n-    static final boolean ENABLE_LOGGING = true;\n-    static final Logger LOGGER = Logger.getLogger(\"com.sun.net.httpserver\");\n-\n-    static boolean readPermitted;\n-    static String lastModifiedDir;\n-    static String lastModifiedFile;\n-\n-    static Set<PosixFilePermission> posixPermissions;\n-    static List<AclEntry> acls;\n-\n-    public static void main(String[] args) throws Exception {\n-        setupLogging();\n-        readPermitted = Boolean.parseBoolean(args[0]);\n-        if (readPermitted) {\n-            createTestDir();\n-            testDirectoryGET();\n-            testFileGET();\n-        } else {\n-            revokePermissions();\n-            try {\n-                testCreateHandler();\n-            } finally {\n-                restorePermissions();\n-            }\n-        }\n-    }\n-\n-    private static void revokePermissions() throws IOException {\n-        if (!Files.isReadable(TEST_DIR)) {\n-            \/\/ good nothing to do:\n-            System.out.println(\"File is already not readable: nothing to do\");\n-            return;\n-        }\n-        System.out.println(\"FileSystem: \" + Files.getFileStore(TEST_DIR).type());\n-        if (Files.getFileStore(TEST_DIR).supportsFileAttributeView(\"posix\")) {\n-            System.out.println(\"Revoking owner's read access in POSIX permissions for \" + TEST_DIR);\n-            posixPermissions = Files.getPosixFilePermissions(TEST_DIR);\n-            Set<PosixFilePermission> newPerms = new HashSet<>(posixPermissions);\n-            newPerms.remove(PosixFilePermission.OWNER_READ);\n-            newPerms.remove(PosixFilePermission.OWNER_EXECUTE);\n-            Files.setPosixFilePermissions(TEST_DIR, newPerms);\n-        } else if (Files.getFileStore(TEST_DIR).supportsFileAttributeView(\"acl\")) {\n-            System.out.println(\"Revoking owner's read access in ACLs for \" + TEST_DIR);\n-            AclFileAttributeView view = Files.getFileAttributeView(TEST_DIR, AclFileAttributeView.class);\n-            acls = view.getAcl();\n-            List<AclEntry> entries = new ArrayList<>();\n-            UserPrincipal owner = view.getOwner();\n-            \/\/ Deny owner\n-            entries.add(AclEntry.newBuilder().setType(AclEntryType.DENY)\n-                    .setPrincipal(owner).setPermissions(AclEntryPermission.READ_DATA,\n-                            AclEntryPermission.READ_ATTRIBUTES, AclEntryPermission.READ_NAMED_ATTRS,\n-                            AclEntryPermission.EXECUTE)\n-                    .build());\n-            \/\/ Revoke read data and execute\n-            for (AclEntry entry : acls) {\n-                Set<AclEntryPermission> perms =\n-                        new HashSet<>(entry.permissions());\n-                if (entry.type() == AclEntryType.ALLOW) {\n-                    System.out.println(\"Revoking read access: \" + entry);\n-                    perms.remove(AclEntryPermission.READ_DATA);\n-                    perms.remove(AclEntryPermission.LIST_DIRECTORY);\n-                    perms.remove(AclEntryPermission.READ_ATTRIBUTES);\n-                    perms.remove(AclEntryPermission.READ_NAMED_ATTRS);\n-                    perms.remove(AclEntryPermission.EXECUTE);\n-                    entries.add(AclEntry.newBuilder(entry).setPermissions(perms).build());\n-                }\n-            }\n-            view.setAcl(entries);\n-            System.out.println(\"ACLs: \" + view.getAcl());\n-            try {\n-                System.out.println(\"File is readable: \" + Files.isReadable(TEST_DIR));\n-                Thread.sleep(50);\n-            } catch (InterruptedException x) {}\n-            \/\/ The above does not always work, skip the test if we can't make TEST_DIR\n-            \/\/ read-only.\n-            if (Files.isReadable(TEST_DIR)) {\n-                throw new jtreg.SkippedException(\"Can't make directory read-only\");\n-            }\n-        } else {\n-            throw new RuntimeException(\"Required attribute view not supported\");\n-        }\n-        System.out.println(\"File is readable: \" + Files.isReadable(TEST_DIR));\n-    }\n-\n-    private static void restorePermissions() throws IOException {\n-        if (Files.getFileStore(TEST_DIR).supportsFileAttributeView(\"posix\")) {\n-            if (posixPermissions != null) {\n-                System.out.println(\"Restoring original POSIX permissions\");\n-                Files.setPosixFilePermissions(TEST_DIR, posixPermissions);\n-            }\n-        } else if (Files.getFileStore(TEST_DIR).supportsFileAttributeView(\"acl\")) {\n-            if (acls != null) {\n-                System.out.println(\"Restoring original ACLs\");\n-                AclFileAttributeView view = Files.getFileAttributeView(TEST_DIR, AclFileAttributeView.class);\n-                view.setAcl(acls);\n-            }\n-        } else {\n-            throw new RuntimeException(\"Required attribute view not supported\");\n-        }\n-    }\n-\n-    private static void setupLogging() {\n-        if (ENABLE_LOGGING) {\n-            ConsoleHandler ch = new ConsoleHandler();\n-            LOGGER.setLevel(Level.ALL);\n-            ch.setLevel(Level.ALL);\n-            LOGGER.addHandler(ch);\n-        }\n-    }\n-\n-    private static void createTestDir() throws IOException {\n-        if (Files.exists(TEST_DIR)) {\n-            FileUtils.deleteFileTreeWithRetry(TEST_DIR);\n-        }\n-        Files.createDirectories(TEST_DIR);\n-        var file = Files.writeString(TEST_DIR.resolve(\"aFile.txt\"), \"some text\", CREATE);\n-        lastModifiedDir = getLastModified(TEST_DIR);\n-        lastModifiedFile = getLastModified(file);\n-    }\n-\n-    private static void testDirectoryGET() throws Exception {\n-        var expectedBody = openHTML + \"\"\"\n-                <h1>Directory listing for &#x2F;<\/h1>\n-                <ul>\n-                <li><a href=\"aFile.txt\">aFile.txt<\/a><\/li>\n-                <\/ul>\n-                \"\"\" + closeHTML;\n-        var expectedLength = Integer.toString(expectedBody.getBytes(UTF_8).length);\n-        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, TEST_DIR, OutputLevel.VERBOSE);\n-\n-        server.start();\n-        try {\n-            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n-            var request = HttpRequest.newBuilder(uri(server, \"\")).build();\n-            var response = client.send(request, BodyHandlers.ofString());\n-            assert response.statusCode() == 200;\n-            assert response.body().equals(expectedBody);\n-            assert response.headers().firstValue(\"content-type\").get().equals(\"text\/html; charset=UTF-8\");\n-            assert response.headers().firstValue(\"content-length\").get().equals(expectedLength);\n-            assert response.headers().firstValue(\"last-modified\").get().equals(lastModifiedDir);\n-        } finally {\n-            server.stop(0);\n-        }\n-    }\n-\n-    private static void testFileGET() throws Exception {\n-        var expectedBody = \"some text\";\n-        var expectedLength = Integer.toString(expectedBody.getBytes(UTF_8).length);\n-        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, TEST_DIR, OutputLevel.VERBOSE);\n-\n-        server.start();\n-        try {\n-            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n-            var request = HttpRequest.newBuilder(uri(server, \"aFile.txt\")).build();\n-            var response = client.send(request, BodyHandlers.ofString());\n-            assert response.statusCode() == 200;\n-            assert response.body().equals(\"some text\");\n-            assert response.headers().firstValue(\"content-type\").get().equals(\"text\/plain\");\n-            assert response.headers().firstValue(\"content-length\").get().equals(expectedLength);\n-            assert response.headers().firstValue(\"last-modified\").get().equals(lastModifiedFile);\n-        } finally {\n-            server.stop(0);\n-        }\n-    }\n-\n-    private static void testCreateHandler(){\n-        try {\n-            SimpleFileServer.createFileServer(LOOPBACK_ADDR, TEST_DIR, OutputLevel.NONE);\n-            throw new RuntimeException(\"Handler creation expected to fail\");\n-        } catch (IllegalArgumentException expected) { }\n-\n-        try {\n-            SimpleFileServer.createFileHandler(TEST_DIR);\n-            throw new RuntimeException(\"Handler creation expected to fail\");\n-        } catch (IllegalArgumentException expected) { }\n-    }\n-\n-    static final String openHTML = \"\"\"\n-                <!DOCTYPE html>\n-                <html>\n-                <head>\n-                <meta charset=\"utf-8\"\/>\n-                <\/head>\n-                <body>\n-                \"\"\";\n-\n-    static final String closeHTML = \"\"\"\n-                <\/body>\n-                <\/html>\n-                \"\"\";\n-\n-    static URI uri(HttpServer server, String path) {\n-        return URIBuilder.newBuilder()\n-                .host(\"localhost\")\n-                .port(server.getAddress().getPort())\n-                .scheme(\"http\")\n-                .path(\"\/\" + path)\n-                .buildUnchecked();\n-    }\n-\n-    static String getLastModified(Path path) throws IOException {\n-        return Files.getLastModifiedTime(path).toInstant().atZone(ZoneId.of(\"GMT\"))\n-                .format(DateTimeFormatter.RFC_1123_DATE_TIME);\n-    }\n-}\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/RootDirPermissionsTest.java","additions":0,"deletions":287,"binary":false,"changes":287,"status":"deleted"}]}