{"files":[{"patch":"@@ -3173,0 +3173,6 @@\n+    \/\/ Float to half float conversion may be succeeded by a conversion from\n+    \/\/ half float to float, in such a case back propagation of narrow type (SHORT)\n+    \/\/ may not be possible.\n+    if (n->Opcode() == Op_ConvF2HF) {\n+      return TypeInt::SHORT;\n+    }\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+* @test\n+* @summary Test Float16 vector conversion chain.\n+* @requires vm.compiler2.enabled\n+* @library \/test\/lib \/\n+* @run driver compiler.vectorization.TestFloat16VectorConvChain\n+*\/\n+\n+package compiler.vectorization;\n+\n+import compiler.lib.ir_framework.*;\n+import java.util.Random;\n+import java.util.Arrays;\n+\n+\n+public class TestFloat16VectorConvChain {\n+\n+    @Test\n+    @IR(counts = {IRNode.VECTOR_CAST_HF2F, IRNode.VECTOR_SIZE_ANY, \">= 1\", IRNode.VECTOR_CAST_F2HF, IRNode.VECTOR_SIZE_ANY, \" >= 1\"})\n+    public static void test(short [] res, short [] src1, short [] src2) {\n+        for (int i = 0; i < res.length; i++) {\n+            res[i] = (short)Float.float16ToFloat(Float.floatToFloat16(Float.float16ToFloat(src1[i]) + Float.float16ToFloat(src2[i])));\n+        }\n+    }\n+\n+    @Run(test = {\"test\"})\n+    @Warmup(1000)\n+    public static void micro() {\n+        short [] res = new short[1024];\n+        short [] src1 = new short[1024];\n+        short [] src2 = new short[1024];\n+        Arrays.fill(src1, (short)Float.floatToFloat16(1.0f));\n+        Arrays.fill(src2, (short)Float.floatToFloat16(2.0f));\n+        for (int i = 0; i < 1000; i++) {\n+            test(res, src1, src2);\n+        }\n+    }\n+\n+    public static void main(String [] args) {\n+        TestFramework.run(TestFloat16VectorConvChain.class);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestFloat16VectorConvChain.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"}]}