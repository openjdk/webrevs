{"files":[{"patch":"@@ -50,1 +50,0 @@\n-    private OperationProperties props = new OperationProperties(VERSION_1);\n@@ -111,3 +110,0 @@\n-        \/\/ Check that we can connect to the process\n-        \/\/ - this ensures we throw the permission denied error now rather than\n-        \/\/ later when we attempt to enqueue a command.\n@@ -115,1 +111,1 @@\n-            props = getDefaultProps();\n+            detectProperties();\n@@ -170,1 +166,1 @@\n-            writeCommand(writer, props, cmd, args);\n+            writeCommand(writer, cmd, args);\n","filename":"src\/jdk.attach\/aix\/classes\/sun\/tools\/attach\/VirtualMachineImpl.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-    private OperationProperties props = new OperationProperties(VERSION_1); \/\/ updated in ctor\n@@ -127,1 +126,1 @@\n-            props = getDefaultProps();\n+            detectProperties();\n@@ -181,1 +180,1 @@\n-            writeCommand(writer, props, cmd, args);\n+            writeCommand(writer, cmd, args);\n","filename":"src\/jdk.attach\/linux\/classes\/sun\/tools\/attach\/VirtualMachineImpl.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-    private OperationProperties props = new OperationProperties(VERSION_1); \/\/ updated in ctor\n@@ -115,1 +114,1 @@\n-            props = getDefaultProps();\n+            detectProperties();\n@@ -169,1 +168,1 @@\n-            writeCommand(writer, props, cmd, args);\n+            writeCommand(writer, cmd, args);\n","filename":"src\/jdk.attach\/macosx\/classes\/sun\/tools\/attach\/VirtualMachineImpl.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -340,2 +340,2 @@\n-    protected static final int VERSION_1 = 1;\n-    protected static final int VERSION_2 = 2;\n+    public static final int VERSION_1 = 1;\n+    public static final int VERSION_2 = 2;\n@@ -344,1 +344,1 @@\n-    protected static class OperationProperties {\n+    public static class OperationProperties {\n@@ -354,1 +354,1 @@\n-        int version() {\n+        public int version() {\n@@ -358,1 +358,5 @@\n-        void setOption(String name, String value) {\n+        public boolean containsOption(String name) {\n+            return options.containsKey(name);\n+        }\n+\n+        public void setOption(String name, String value) {\n@@ -369,0 +373,6 @@\n+    private OperationProperties props = new OperationProperties(VERSION_1);\n+\n+    public OperationProperties getProperties() throws IOException {\n+        return props;\n+    }\n+\n@@ -372,1 +382,1 @@\n-    protected OperationProperties getDefaultProps() throws IOException {\n+    protected void detectProperties() throws IOException {\n@@ -386,1 +396,1 @@\n-                OperationProperties result = new OperationProperties(supportedVersion);\n+                props = new OperationProperties(supportedVersion);\n@@ -392,1 +402,1 @@\n-                        result.setOption(OperationProperties.STREAMING,\n+                        props.setOption(OperationProperties.STREAMING,\n@@ -396,1 +406,1 @@\n-                return result;\n+                return;\n@@ -403,1 +413,1 @@\n-        return new OperationProperties(VERSION_1);\n+        props = new OperationProperties(VERSION_1);\n@@ -565,0 +575,4 @@\n+    protected void writeCommand(AttachOutputStream writer, String cmd, Object ... args) throws IOException {\n+        writeCommand(writer, getProperties(), cmd, args);\n+    }\n+\n","filename":"src\/jdk.attach\/share\/classes\/sun\/tools\/attach\/HotSpotVirtualMachine.java","additions":24,"deletions":10,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-    private OperationProperties props = new OperationProperties(VERSION_1); \/\/ updated in ctor\n@@ -58,1 +57,1 @@\n-                props = getDefaultProps();\n+                detectProperties();\n@@ -90,0 +89,1 @@\n+        OperationProperties props = getProperties();\n","filename":"src\/jdk.attach\/windows\/classes\/sun\/tools\/attach\/VirtualMachineImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+    private Boolean streamingOutput;\n@@ -44,0 +45,1 @@\n+    public Boolean getStreamingOutput() { return streamingOutput; }\n@@ -85,0 +87,13 @@\n+            } else if (args[i].startsWith(\"--streaming_output=\")) {\n+                \/\/ we know args[i] contains \"=\"\n+                String value = args[i].substring(args[i].indexOf(\"=\") + 1);\n+                switch (value) {\n+                case \"true\":\n+                    streamingOutput = Boolean.TRUE;\n+                    break;\n+                case \"false\":\n+                    streamingOutput = Boolean.FALSE;\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Unexpected option value: \" + args[i] + \" (excepted true|false)\");\n+                }\n@@ -111,1 +126,1 @@\n-        System.out.println(\"Usage: jcmd <pid | main class> <command ...|PerfCounter.print|-f file>\");\n+        System.out.println(\"Usage: jcmd <pid | main class> [--streaming_output=true|false] <command ...|PerfCounter.print|-f file>\");\n@@ -126,0 +141,3 @@\n+        System.out.println(\"                                                                  \");\n+        System.out.println(\"  --streaming_output option sets streaming\/buffered output mode   \");\n+        System.out.println(\"    (if supported by the target JVM).                             \");\n","filename":"src\/jdk.jcmd\/share\/classes\/sun\/tools\/jcmd\/Arguments.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-                    executeCommandForPid(pid, arg.getCommand());\n+                    executeCommandForPid(pid, arg.getCommand(), arg);\n@@ -110,1 +110,1 @@\n-    private static void executeCommandForPid(String pid, String command)\n+    private static void executeCommandForPid(String pid, String command, Arguments arg)\n@@ -124,0 +124,11 @@\n+            if (arg.getStreamingOutput() != null) {\n+                \/\/ set the option if supported by the VM\n+                HotSpotVirtualMachine.OperationProperties props = hvm.getProperties();\n+                if (props.containsOption(HotSpotVirtualMachine.OperationProperties.STREAMING)) {\n+                    props.setOption(HotSpotVirtualMachine.OperationProperties.STREAMING,\n+                                    arg.getStreamingOutput().booleanValue() ? \"1\" : \"0\");\n+                } else {\n+                    System.out.println(\"Streaming output is not supported by the target VM, ignoring\");\n+                }\n+            }\n+\n","filename":"src\/jdk.jcmd\/share\/classes\/sun\/tools\/jcmd\/JCmd.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8353485\n+ * @summary Test jcmd \"streaming_output\" option\n+ * @library \/test\/lib\n+ * @run driver TestJcmdStreamingOutput\n+ *\/\n+\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class TestJcmdStreamingOutput {\n+\n+    private static final String CMD = \"VM.version\";\n+    private static final String OPT = \"--streaming_output\";\n+    private static final String OPT_TRUE = OPT + \"=true\";\n+    private static final String OPT_FALSE = OPT + \"=false\";\n+    private static final String STREAMING_ON = \"executing command jcmd, streaming output: 1\";\n+    private static final String STREAMING_OFF = \"executing command jcmd, streaming output: 0\";\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ The option can be at any position after process id.\n+        test(STREAMING_ON, (targetPid) -> {\n+            jcmd(targetPid, OPT_TRUE, CMD)\n+                .shouldHaveExitValue(0);\n+        });\n+        test(STREAMING_ON, (targetPid) -> {\n+            jcmd(targetPid, CMD, OPT_TRUE)\n+                .shouldHaveExitValue(0);\n+        });\n+\n+        test(STREAMING_OFF, (targetPid) -> {\n+            jcmd(targetPid, OPT_FALSE, CMD)\n+                .shouldHaveExitValue(0);\n+        });\n+        test(STREAMING_OFF, (targetPid) -> {\n+            jcmd(targetPid, CMD, OPT_FALSE)\n+                .shouldHaveExitValue(0);\n+        });\n+\n+        test(null, (targetPid) -> {\n+            jcmd(targetPid, CMD, OPT + \"=something_wrong\")\n+                .shouldNotHaveExitValue(0)\n+                .shouldContain(\"Unexpected option value\");\n+        });\n+    }\n+\n+    private static OutputAnalyzer jcmd(String... args) throws Exception {\n+        return JcmdBase.jcmdNoPid(null, args);\n+    }\n+\n+    private interface JcmdAction {\n+        void run(String targetPid) throws Exception;\n+    }\n+\n+    private static void test(String expectedLog, JcmdAction action) throws Exception {\n+        System.out.println(\">> Test\");\n+        LingeredApp app = null;\n+        try {\n+            app = LingeredApp.startApp(\"-Xlog:attach=trace\");\n+            action.run(String.valueOf(app.getPid()));\n+        } finally {\n+            LingeredApp.stopApp(app);\n+        }\n+\n+        if (expectedLog != null) {\n+            new OutputAnalyzer(app.getProcessStdout(), \"\")\n+                .stdoutShouldMatch(expectedLog);\n+        }\n+        System.out.println(\"<< Test\");\n+        System.out.println();\n+    }\n+\n+}\n","filename":"test\/jdk\/sun\/tools\/jcmd\/TestJcmdStreamingOutput.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -1,1 +1,1 @@\n-Usage: jcmd <pid | main class> <command ...|PerfCounter.print|-f file>\n+Usage: jcmd <pid | main class> [--streaming_output=true|false] <command ...|PerfCounter.print|-f file>\n@@ -16,0 +16,3 @@\n+                                                                  \n+  --streaming_output option sets streaming\/buffered output mode   \n+    (if supported by the target JVM).                             \n","filename":"test\/jdk\/sun\/tools\/jcmd\/usage.out","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}