{"files":[{"patch":"@@ -83,3 +83,8 @@\n- * <p> Unless otherwise noted, {@linkplain java.nio.file##links symbolic links}\n- * are automatically redirected to the <i>target<\/i> of the link, whether they\n- * are provided by a pathname string or via a {@code File} object.\n+ * <p> Many operating systems and file systems have support for\n+ * {@linkplain java.nio.file##links symbolic links}.\n+ * A symbolic link is a special file that serves as a reference to another file.\n+ * Unless otherwise specified, symbolic links are transparent to applications\n+ * and operations on files that are symbolic links are automatically redirected\n+ * to the target of the link.  Methods that only operate on the abstract\n+ * pathname do not access the file system and thus do not resolve symbolic\n+ * links.\n@@ -451,1 +456,1 @@\n-     * Returns the name of the file or directory denoted by this abstract\n+     * Returns the name component of this abstract\n@@ -456,1 +461,1 @@\n-     * @return  The name of the file or directory denoted by this abstract\n+     * @return  The name component of this abstract\n@@ -838,1 +843,1 @@\n-     * Tests whether the file named by this abstract pathname is a hidden\n+     * Tests whether the file denoted by this abstract pathname is a hidden\n@@ -938,1 +943,1 @@\n-     *          already exists\n+     *          already exists, including if it is a symbolic link\n@@ -1294,1 +1299,1 @@\n-     * Sets the last-modified time of the file or directory named by this\n+     * Sets the last-modified time of the file or directory denoted by this\n@@ -1323,1 +1328,1 @@\n-     * Marks the file or directory named by this abstract pathname so that\n+     * Marks the file or directory denoted by this abstract pathname so that\n@@ -1344,1 +1349,2 @@\n-     * Sets the owner's or everybody's write permission for this abstract\n+     * Sets the owner's or everybody's write permission of the file or\n+     * directory denoted by this abstract\n@@ -1378,1 +1384,2 @@\n-     * A convenience method to set the owner's write permission for this abstract\n+     * A convenience method to set the owner's write permission for the file\n+     * or directory denoted by this abstract\n@@ -1405,1 +1412,2 @@\n-     * Sets the owner's or everybody's read permission for this abstract\n+     * Sets the owner's or everybody's read permission for the file or directory\n+     * denoted by this abstract\n@@ -1445,1 +1453,2 @@\n-     * A convenience method to set the owner's read permission for this abstract\n+     * A convenience method to set the owner's read permission for the file\n+     * or directory denoted by this abstract\n@@ -1478,1 +1487,2 @@\n-     * Sets the owner's or everybody's execute permission for this abstract\n+     * Sets the owner's or everybody's execute permission for the file or\n+     * directory denoted by this abstract\n@@ -1518,1 +1528,2 @@\n-     * A convenience method to set the owner's execute permission for this\n+     * A convenience method to set the owner's execute permission for the file\n+     * or directory denoted by this\n@@ -1937,1 +1948,3 @@\n-     * Microsoft Windows systems it is not.\n+     * Microsoft Windows systems it is not.  This method only compares the\n+     * abstract pathnames; it does not access the file system and the file is\n+     * not required to exist.\n@@ -1961,5 +1974,3 @@\n-     * on Microsoft Windows systems it is not.\n-     *\n-     * @apiNote This method only tests whether the abstract pathnames are equal;\n-     *          it does not access the file system and the file is not required\n-     *          to exist.\n+     * on Microsoft Windows systems it is not.  This method only tests whether\n+     * the abstract pathnames are equal; it does not access the file system and\n+     * the file is not required to exist.\n","filename":"src\/java.base\/share\/classes\/java\/io\/File.java","additions":32,"deletions":21,"binary":false,"changes":53,"status":"modified"}]}