[{"commit":{"message":"8365799: AArch64: Remove trailing DMB from cmpxchgptr for LSE\n\nAccording to the Java SE 24 API, CompareAndExchange has the\nmemory semantics as given by VarHandle.compareAndExchange, which has\nthe following effects [1]:\n\n> Atomically sets the value of a variable to the newValue with the\n> memory semantics of setVolatile if the variable's current value,\n> referred to as the witness value, == the expectedValue, as accessed\n> with the memory semantics of getVolatile.\n\nThus, the store-release due to setVolatile only occurs if\nthe compare is successful. Since CASAL already satisfies these\nrequirements, the DMB does not need to occur to ensure memory ordering\nin case the compare fails and a store-release does not happen.\n\nTherefore, we can remove the DMB from cmpxchgptr when LSE\nis enabled. We also rename it to cmpxchgptr_barrier to indicate that\nthis method provides trailing barrier semantics (via either LSE\nCASAL or a DMB).\n\nThe unused cmpxchgw is removed.\n\n[1] https:\/\/docs.oracle.com\/en\/java\/javase\/24\/docs\/api\/java.base\/java\/lang\/invoke\/VarHandle.html#compareAndExchange(java.lang.Object...)\n\nChange-Id: I45b26bdd75f931ecdb436d34f24ed91de0ac31c2"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"}],"sha":"4a95340c2eb6e76551e02baea4677f2ca66b6fe5"}]