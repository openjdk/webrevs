{"files":[{"patch":"@@ -35,5 +35,4 @@\n-     * Invoked by Thread.interrupt when the given Thread is interrupted. This method\n-     * is invoked while holding the Thread's interrupt lock. It will typically record\n-     * that the I\/O operation has been interrupted so that it can be coordinated with\n-     * {@code postInterrupt} when it called after releasing the Thread's interrupt\n-     * lock. This method must not block.\n+     * Invoked by Thread.interrupt when the given Thread is interrupted. Thread.interrupt\n+     * invokes this method while holding the given Thread's interrupt lock. This method\n+     * is also invoked by AbstractInterruptibleChannel when beginning an I\/O operation\n+     * with the current thread's interrupt status set. This method must not block.\n@@ -44,4 +43,7 @@\n-     * Invoked by Thread.interrupt after releasing the Thread's interrupt lock. It\n-     * may also invoked by AbstractInterruptibleChannel\/AbstractSelector begin methods\n-     * when the Thread is interrupted. This method closes the channel or wakes up the\n-     * Selector. This method is required to be idempotent.\n+     * Invoked by Thread.interrupt after releasing the Thread's interrupt lock.\n+     * It may also be invoked by AbstractInterruptibleChannel or AbstractSelector when\n+     * beginning an I\/O operation with the current thread's interrupt status set, or at\n+     * the end of an I\/O operation when any thread doing I\/O on the channel (or selector)\n+     * has been interrupted. This method closes the channel (or wakes up the Selector) to\n+     * ensure that AsynchronousCloseException or ClosedByInterruptException is thrown.\n+     * This method is required to be idempotent.\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/Interruptible.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"}]}