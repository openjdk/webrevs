{"files":[{"patch":"@@ -40,6 +40,0 @@\n-    # --disable-new-dtags forces use of RPATH instead of RUNPATH for rpaths.\n-    # This protects internal library dependencies within the JDK from being\n-    # overridden using LD_LIBRARY_PATH. See JDK-8326891 for more information.\n-    SET_EXECUTABLE_ORIGIN='-Wl,-rpath,\\$$ORIGIN[$]1 -Wl,--disable-new-dtags'\n-    SET_SHARED_LIBRARY_ORIGIN=\"-Wl,-z,origin $SET_EXECUTABLE_ORIGIN\"\n-    SET_SHARED_LIBRARY_NAME='-Wl,-soname=[$]1'\n@@ -51,3 +45,0 @@\n-      SET_EXECUTABLE_ORIGIN='-Wl,-rpath,@loader_path$(or [$]1,\/.)'\n-      SET_SHARED_LIBRARY_ORIGIN=\"$SET_EXECUTABLE_ORIGIN\"\n-      SET_SHARED_LIBRARY_NAME='-Wl,-install_name,@rpath\/[$]1'\n@@ -58,3 +49,0 @@\n-      SET_EXECUTABLE_ORIGIN=\"\"\n-      SET_SHARED_LIBRARY_ORIGIN=''\n-      SET_SHARED_LIBRARY_NAME=''\n@@ -65,13 +53,0 @@\n-      SET_EXECUTABLE_ORIGIN='-Wl,-rpath,\\$$ORIGIN[$]1'\n-      if test \"x$OPENJDK_TARGET_OS\" = xlinux; then\n-        SET_EXECUTABLE_ORIGIN=\"$SET_EXECUTABLE_ORIGIN -Wl,--disable-new-dtags\"\n-      fi\n-      SET_SHARED_LIBRARY_NAME='-Wl,-soname=[$]1'\n-\n-      # arm specific settings\n-      if test \"x$OPENJDK_TARGET_CPU\" = \"xarm\"; then\n-        # '-Wl,-z,origin' isn't used on arm.\n-        SET_SHARED_LIBRARY_ORIGIN='-Wl,-rpath,\\$$$$ORIGIN[$]1'\n-      else\n-        SET_SHARED_LIBRARY_ORIGIN=\"-Wl,-z,origin $SET_EXECUTABLE_ORIGIN\"\n-      fi\n@@ -82,3 +57,0 @@\n-    SET_EXECUTABLE_ORIGIN=''\n-    SET_SHARED_LIBRARY_ORIGIN=''\n-    SET_SHARED_LIBRARY_NAME=''\n@@ -87,3 +59,0 @@\n-  AC_SUBST(SET_EXECUTABLE_ORIGIN)\n-  AC_SUBST(SET_SHARED_LIBRARY_ORIGIN)\n-  AC_SUBST(SET_SHARED_LIBRARY_NAME)\n","filename":"make\/autoconf\/flags-cflags.m4","additions":0,"deletions":31,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-    # FIXME: We should really generalize SET_SHARED_LIBRARY_ORIGIN instead.\n+    # FIXME: We should really generalize SetSharedLibraryOrigin instead.\n","filename":"make\/autoconf\/flags-ldflags.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -627,4 +627,0 @@\n-# Options to linker to specify the library name.\n-# (Note absence of := assignment, because we do not want to evaluate the macro body here)\n-SET_SHARED_LIBRARY_NAME = @SET_SHARED_LIBRARY_NAME@\n-\n@@ -633,5 +629,0 @@\n-# Set origin using the linker, ie use the relative path to the dependent library to find the dependencies.\n-# (Note absence of := assignment, because we do not want to evaluate the macro body here)\n-SET_SHARED_LIBRARY_ORIGIN = @SET_SHARED_LIBRARY_ORIGIN@\n-SET_EXECUTABLE_ORIGIN = @SET_EXECUTABLE_ORIGIN@\n-\n","filename":"make\/autoconf\/spec.gmk.template","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,0 +33,41 @@\n+ifeq ($(call isCompiler, gcc), true)\n+  # --disable-new-dtags forces use of RPATH instead of RUNPATH for rpaths.\n+  # This protects internal library dependencies within the JDK from being\n+  # overridden using LD_LIBRARY_PATH. See JDK-8326891 for more information.\n+  SetExecutableOrigin = \\\n+      -Wl,-rpath,\\$(DOLLAR)ORIGIN$1 -Wl,--disable-new-dtags\n+  SetSharedLibraryOrigin = \\\n+      -Wl,-z,origin -Wl,-rpath,\\$(DOLLAR)ORIGIN$1 -Wl,--disable-new-dtags\n+else ifeq ($(call isCompiler, clang), true)\n+  ifeq ($(call isTargetOs, macosx), true)\n+    SetExecutableOrigin = \\\n+        -Wl,-rpath,@loader_path$(or $1,\/.)\n+    SetSharedLibraryOrigin = \\\n+        -Wl,-rpath,@loader_path$(or $1,\/.)\n+  else ifeq ($(call isTargetOs, aix), true)\n+    SetExecutableOrigin =\n+    SetSharedLibraryOrigin =\n+  else\n+    ifeq ($(call isTargetOs, linux), true)\n+      SetExecutableOrigin = \\\n+          -Wl,-rpath,\\$(DOLLAR)ORIGIN$1 -Wl,--disable-new-dtags\n+    else\n+      SetExecutableOrigin = \\\n+          -Wl,-rpath,\\$(DOLLAR)ORIGIN$1\n+    endif\n+\n+    ifeq ($(call isTargetOs, arm), true)\n+      SetSharedLibraryOrigin = \\\n+          -Wl,-rpath,\\$(DOLLAR)ORIGIN$1\n+    else\n+      SetSharedLibraryOrigin = \\\n+          -Wl,-z,origin -Wl,-rpath,\\$(DOLLAR)ORIGIN$1\n+    endif\n+  endif\n+else ifeq ($(call isCompiler, microsoft), true)\n+  SetExecutableOrigin =\n+  SetSharedLibraryOrigin =\n+else\n+  $(error Unknown toolchain)\n+endif\n+\n@@ -447,1 +488,1 @@\n-      $1_LDFLAGS += $$(call SET_EXECUTABLE_ORIGIN)\n+      $1_LDFLAGS += $$(call SetExecutableOrigin)\n@@ -449,1 +490,1 @@\n-      $1_LDFLAGS += $$(call SET_SHARED_LIBRARY_ORIGIN)\n+      $1_LDFLAGS += $$(call SetSharedLibraryOrigin)\n","filename":"make\/common\/JdkNativeCompilation.gmk","additions":43,"deletions":2,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -159,2 +159,2 @@\n-      LDFLAGS_linux := $$(call SET_EXECUTABLE_ORIGIN,\/..\/lib), \\\n-      LDFLAGS_macosx := $$(call SET_EXECUTABLE_ORIGIN,\/..\/lib), \\\n+      LDFLAGS_linux := $$(call SetExecutableOrigin,\/..\/lib), \\\n+      LDFLAGS_macosx := $$(call SetExecutableOrigin,\/..\/lib), \\\n","filename":"make\/common\/modules\/LauncherCommon.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,0 +53,20 @@\n+ifeq ($(call isCompiler, gcc), true)\n+  SetSharedLibraryName = \\\n+      -Wl,-soname=$1\n+else ifeq ($(call isCompiler, clang), true)\n+  ifeq ($(call isTargetOs, macosx), true)\n+    SetSharedLibraryName = \\\n+        -Wl,-install_name,@rpath\/$1\n+  else ifeq ($(call isTargetOs, aix), true)\n+    SetSharedLibraryName =\n+  else\n+    # Default works for linux, might work on other platforms as well.\n+    SetSharedLibraryName = \\\n+        -Wl,-soname=$1\n+  endif\n+else ifeq ($(call isCompiler, microsoft), true)\n+  SetSharedLibraryName =\n+else\n+  $(error Unknown toolchain)\n+endif\n+\n@@ -134,1 +154,1 @@\n-    $1_EXTRA_LDFLAGS += $$(call SET_SHARED_LIBRARY_NAME,$$($1_BASENAME))\n+    $1_EXTRA_LDFLAGS += $$(call SetSharedLibraryName,$$($1_BASENAME))\n","filename":"make\/common\/native\/Link.gmk","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-    LDFLAGS_unix := $(call SET_SHARED_LIBRARY_ORIGIN), \\\n+    LDFLAGS_unix := $(call SetSharedLibraryOrigin), \\\n","filename":"make\/hotspot\/lib\/CompileGtest.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    JVM_LDFLAGS_FEATURES += $(call SET_EXECUTABLE_ORIGIN,\/..)\n+    JVM_LDFLAGS_FEATURES += $(call SetExecutableOrigin,\/..)\n","filename":"make\/hotspot\/lib\/JvmFeatures.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}