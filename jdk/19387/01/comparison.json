{"files":[{"patch":"@@ -806,2 +806,3 @@\n-                    int refPos = sourcePosToTreePos(getRefPos(ref, link));\n-                    var newRefTree = m.at(refPos).newReferenceTree(ref).setEndPos(refPos + ref.length());\n+                    int[] span = getRefSpan(ref, link);\n+                    int refPos = sourcePosToTreePos(span[0]);\n+                    var newRefTree = m.at(refPos).newReferenceTree(ref).setEndPos(sourcePosToTreePos(span[1]));\n@@ -838,1 +839,1 @@\n-        private int getRefPos(String ref, Link link) {\n+        private int[] getRefSpan(String ref, Link link) {\n@@ -848,1 +849,8 @@\n-                    return start + index;\n+                    return new int[] {start + index, start + index + ref.length()};\n+                } else {\n+                    String escapedRef = ref.replace(\"[]\", \"\\\\[\\\\]\");\n+                    var escapedIndex = s.lastIndexOf(escapedRef);\n+                    if (escapedIndex != -1) {\n+                        return new int[] {start + escapedIndex,\n+                                          start + escapedIndex + escapedRef.length()};\n+                    }\n@@ -851,1 +859,1 @@\n-            return NOPOS;\n+            return NOSPAN;\n@@ -853,0 +861,1 @@\n+            private static final int[] NOSPAN = new int[] {NOPOS, NOPOS};\n","filename":"src\/jdk.internal.md\/share\/classes\/jdk\/internal\/markdown\/MarkdownTransformer.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @bug 8332858\n@@ -28,1 +29,1 @@\n- * @run main MarkdownTransformerPositionTest\n+ * @run main MarkdownTransformerPositionTest links\n@@ -32,0 +33,1 @@\n+import com.sun.source.doctree.LinkTree;\n@@ -33,0 +35,1 @@\n+import com.sun.source.doctree.ReferenceTree;\n@@ -53,0 +56,4 @@\n+\n+        if (args.length > 0 && \"links\".equals(args[0])) {\n+            t.linkWithEscapes();\n+        }\n@@ -79,0 +86,10 @@\n+    private void linkWithEscapes() throws Exception {\n+        runConvertedLinksTest(\"\"\"\n+                \/\/\/ Markdown comment.\n+                \/\/\/ [java.util.Arrays#asList(Object\\\\[\\\\])]\n+                public class Test {\n+                }\n+                \"\"\",\n+                \"java.util.Arrays#asList(Object\\\\[\\\\])\");\n+    }\n+\n@@ -110,0 +127,40 @@\n+    private void runConvertedLinksTest(String source, String... expectedRawSpans) throws Exception {\n+        JavaCompiler comp = ToolProvider.getSystemJavaCompiler();\n+        JavacTask task = (JavacTask)comp.getTask(null, null, null, null, null, Arrays.asList(new JavaSource(source)));\n+        CompilationUnitTree cu = task.parse().iterator().next();\n+        task.analyze();\n+        DocTrees trees = DocTrees.instance(task);\n+        List<String> rawSpans = new ArrayList<>();\n+        TreePath clazzTP = new TreePath(new TreePath(cu), cu.getTypeDecls().get(0));\n+        Element clazz = trees.getElement(clazzTP);\n+        DocCommentTree docComment = trees.getDocCommentTree(clazz);\n+\n+        new DocTreeScanner<Void, Void>() {\n+            @Override\n+            public Void visitLink(LinkTree node, Void p) {\n+                int start = (int) trees.getSourcePositions().getStartPosition(cu, docComment, node);\n+                if (start != (-1)) {\n+                    throw new AssertionError(\"UNexpected start position for synthetic link: \" + start);\n+                }\n+                return super.visitLink(node, p);\n+            }\n+\n+            @Override\n+            public Void visitReference(ReferenceTree node, Void p) {\n+                int start = (int) trees.getSourcePositions().getStartPosition(cu, docComment, node);\n+                int end = (int) trees.getSourcePositions().getEndPosition(cu, docComment, node);\n+                rawSpans.add(source.substring(start, end));\n+                return super.visitReference(node, p);\n+            }\n+        }.scan(docComment, null);\n+\n+        List<String> expectedRawSpansList = List.of(expectedRawSpans);\n+\n+        if (!expectedRawSpansList.equals(rawSpans)) {\n+            throw new AssertionError(\"Incorrect raw text spans, should be: \" +\n+                    expectedRawSpansList + \", but is: \" + rawSpans);\n+        }\n+\n+        System.err.println(\"Test result: success, boot modules: \" + ModuleLayer.boot().modules());\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/doctree\/MarkdownTransformerPositionTest.java","additions":58,"deletions":1,"binary":false,"changes":59,"status":"modified"}]}