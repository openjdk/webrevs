{"files":[{"patch":"@@ -216,0 +216,9 @@\n+#ifdef _WINDOWS\n+    \/\/ On Windows, we also support forward slash as the file separator when locating entries in the classpath entry.\n+    const char* dir_tail2 = strrchr(dir_name, '\/');\n+    if (dir_tail == nullptr) {\n+      dir_tail = dir_tail2;\n+    } else if (dir_tail2 != nullptr && dir_tail2 > dir_tail) {\n+      dir_tail = dir_tail2;\n+    }\n+#endif\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import jdk.test.lib.Platform;\n@@ -85,0 +86,69 @@\n+\n+      \/\/ Test handling of forward slash ('\/') file separator for Class-Path attribute on Windows.\n+      \/\/ Skip the following test when CDS dynamic dump is enabled due to some\n+      \/\/ issue when converting a relative path to real path.\n+      if (Platform.isWindows() && !CDSTestUtils.DYNAMIC_DUMP) {\n+          \/\/ Test with relative path\n+          \/\/ Find the index to the dir before the jar file.\n+          int idx = jar1.lastIndexOf(File.separator);\n+          idx = jar1.substring(0, idx - 1).lastIndexOf(File.separator);\n+          \/\/ Setup jar directory and names.\n+          String jarDir = jar1.substring(0, idx);\n+          String jar1Name = jar1.substring(idx + 1);\n+          String jar4Name = jar4.substring(idx + 1);\n+          String newCp = jar1Name.replace(\"\\\\\", \"\/\") + File.pathSeparator + jar4Name.replace(\"\\\\\", \"\/\");\n+\n+          OutputAnalyzer out = TestCommon.testDump(jarDir, newCp, classlist, \"-Xlog:class+path=info\");\n+          if (i == 1) {\n+              out.shouldMatch(\"opened:.*cpattr1.jar\"); \/\/ first jar on -cp\n+          } else {\n+              \/\/ first jar on -cp with long Class-Path: attribute\n+              out.shouldMatch(\"opened:.*cpattr1_long.jar\");\n+          }\n+          \/\/ one of the jar in the Class-Path: attribute of cpattr1.jar\n+          out.shouldMatch(\"opened:.*cpattr2.jar\");\n+\n+          TestCommon.runWithRelativePath(\n+              jarDir.replace(\"\\\\\", \"\/\"),\n+              \"-Xlog:class+path,class+load\",\n+              \"-cp\", newCp,\n+              \"CpAttr1\")\n+            .assertNormalExit(output -> {\n+                output.shouldMatch(\"checking shared classpath entry: .*cpattr2.jar\");\n+                output.shouldMatch(\"checking shared classpath entry: .*cpattr3.jar\");\n+              });\n+\n+          \/\/ Go one directory up.\n+          int idx2 = jar1.substring(0, idx - 1).lastIndexOf(File.separator);\n+          if (idx2 != -1) {\n+              \/\/ Setup jar directory and names.\n+              jarDir = jar1.substring(0, idx2);\n+              \/\/ Set relative path to jar containing '\\' and '\/' file separators\n+              \/\/ e.g. d1\\d2\/A.jar\n+              jar1Name = jar1.substring(idx2 + 1).replace(\"\\\\\", \"\/\");\n+              jar4Name = jar4.substring(idx2 + 1).replace(\"\\\\\", \"\/\");\n+              jar1Name = jar1Name.replaceFirst(\"\/\", \"\\\\\\\\\");\n+              jar4Name = jar4Name.replaceFirst(\"\/\", \"\\\\\\\\\");\n+\n+              newCp = jar1Name + File.pathSeparator + jar4Name;\n+              out = TestCommon.testDump(jarDir, newCp, classlist, \"-Xlog:class+path=info\");\n+              if (i == 1) {\n+                  out.shouldMatch(\"opened:.*cpattr1.jar\"); \/\/ first jar on -cp\n+              } else {\n+                  \/\/ first jar on -cp with long Class-Path: attribute\n+                  out.shouldMatch(\"opened:.*cpattr1_long.jar\");\n+              }\n+              \/\/ one of the jar in the Class-Path: attribute of cpattr1.jar\n+              out.shouldMatch(\"opened:.*cpattr2.jar\");\n+\n+              TestCommon.runWithRelativePath(\n+                  jarDir.replace(\"\\\\\", \"\/\"),\n+                  \"-Xlog:class+path,class+load\",\n+                  \"-cp\", newCp,\n+                  \"CpAttr1\")\n+                .assertNormalExit(output -> {\n+                    output.shouldMatch(\"checking shared classpath entry: .*cpattr2.jar\");\n+                    output.shouldMatch(\"checking shared classpath entry: .*cpattr3.jar\");\n+                  });\n+          }\n+      }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/ClassPathAttr.java","additions":71,"deletions":1,"binary":false,"changes":72,"status":"modified"}]}