{"files":[{"patch":"@@ -458,0 +458,21 @@\n+    \/**\n+     * Registers an action to perform when new metadata arrives in the stream.\n+     *\n+     * The event type of an event always arrives sometime before the actual event.\n+     * The action must be registered before the stream is started.\n+     * <p>\n+     * The following example shows how to listen to new event types, register\n+     * an action if the event type name matches a regular expression and increase a\n+     * counter if a matching event is found. A benefit of using an action per\n+     * event type, instead of the generic {@link #onEvent(Consumer)} method,\n+     * is that a stream implementation can avoid reading events that are of no\n+     * interest.\n+     *\n+     * {@snippet class = \"Snippets\" region = \"RecordingStreamMetadata\"}\n+     *\n+     * @param action to perform, not {@code null}\n+     *\n+     * @throws IllegalStateException if an action is added after the stream has\n+     *                               started\n+     * @since 16\n+     *\/\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/RecordingStream.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -112,0 +112,21 @@\n+    class RecordingStreamMetadata {\n+        \/\/ @start region=\"RecordingStreamMetadata\"\n+        static long count = 0;\n+        public static void main(String... args) throws Exception {\n+            String regExp = args[0];\n+            var pr = Pattern.compile(regExp).asMatchPredicate();\n+            Configuration c = Configuration.getConfiguration(\"default\");\n+            try (var s = new RecordingStream(c)) {\n+                s.setOrdered(false);\n+                s.onMetadata(metadata -> metadata.getAddedEventTypes()\n+                 .stream().map(EventType::getName).filter(pr)\n+                 .forEach(eventName -> s.onEvent(eventName, event -> count++)));\n+                s.startAsync();\n+                System.out.println(\"Running recording for 5 s. Please wait.\");\n+                s.awaitTermination(Duration.ofSeconds(5));\n+                System.out.println(count + \" events matches \" + regExp);\n+            }\n+        }\n+        \/\/ @end\n+    }\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/snippet-files\/Snippets.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"}]}