{"files":[{"patch":"@@ -1683,0 +1683,17 @@\n+  \/\/\n+  \/\/ In case of 11th bit of `lower` is 0, it's straightforward to understand.\n+  \/\/ In case of 11th bit of `lower` is 1, it's a bit tricky, to help understand,\n+  \/\/ image divide both `upper` and `lower` into 2 parts respectively, i.e.\n+  \/\/ [upper_20, upper_12], [lower_20, lower_12], they are the same just before\n+  \/\/ `lower = (lower << 52) >> 52;`.\n+  \/\/ After `upper -= lower;`,\n+  \/\/    upper_20' = upper_20 - (-1) == upper_20 + 1\n+  \/\/    upper_12 = 0x000\n+  \/\/ After `lui(Rd, upper);`, `Rd` = upper_20' << 12\n+  \/\/ Also divide `Rd` into 2 parts [Rd_20, Rd_12],\n+  \/\/    Rd_20 == upper_20'\n+  \/\/    Rd_12 == 0x000\n+  \/\/ After `addi(Rd, Rd, lower);`,\n+  \/\/    Rd_20 = upper_20' + (-1) == upper_20 + 1 - 1 = upper_20\n+  \/\/    Rd_12 = lower_12\n+  \/\/ So, finally Rd == [upper_20, lower_12]\n@@ -1703,4 +1720,1 @@\n-  uint32_t upper18 = (addr >> 30ull);\n-  int32_t  lower30 = (addr & 0x3fffffffu);\n-  int32_t  low12   = (lower30 << 20) >> 20;\n-  int32_t  mid18   = ((lower30 - low12) >> 12);\n+  \/\/ addr: [upper18, lower30[mid18, lower12]]\n@@ -1708,2 +1722,10 @@\n-  lui(tmp, upper18 << 12);\n-  lui(Rd, mid18 << 12);\n+  int64_t upper18 = addr >> 18;\n+  lui(tmp, upper18);\n+\n+  int64_t lower30 = addr & 0x3fffffff;\n+  int64_t mid18 = lower30, lower12 = lower30;\n+  lower12 = (lower12 << 52) >> 52;\n+  \/\/ For this tricky part (`mid18 -= lower12;` + `offset = lower12;`),\n+  \/\/ please refer to movptr1 above.\n+  mid18 -= (int32_t)lower12;\n+  lui(Rd, mid18);\n@@ -1714,1 +1736,1 @@\n-  offset = low12;\n+  offset = lower12;\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":29,"deletions":7,"binary":false,"changes":36,"status":"modified"}]}