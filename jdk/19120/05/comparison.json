{"files":[{"patch":"@@ -1890,2 +1890,3 @@\n-  INSN(vbrev8_v, 0b1010111, 0b010, 0b01000, 0b010010);\n-  INSN(vrev8_v,  0b1010111, 0b010, 0b01001, 0b010010);\n+  INSN(vbrev_v,  0b1010111, 0b010, 0b01010, 0b010010); \/\/ reverse bits in every element\n+  INSN(vbrev8_v, 0b1010111, 0b010, 0b01000, 0b010010); \/\/ reverse bits in every byte of element\n+  INSN(vrev8_v,  0b1010111, 0b010, 0b01001, 0b010010); \/\/ reverse bytes in every elememt\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+      case Op_ReverseBytesV:\n@@ -3759,0 +3760,26 @@\n+\/\/ -------------------------------- Reverse Bytes Vector Operations ------------------------\n+\n+instruct vreverse_bytes_masked(vReg dst, vReg src, vRegMask_V0 v0) %{\n+  match(Set dst (ReverseBytesV src v0));\n+  format %{ \"vreverse_bytes_masked $dst, $src, v0\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    uint vlen = Matcher::vector_length(this);\n+    __ vsetvli_helper(bt, vlen);\n+    __ vrev8_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vreverse_bytes(vReg dst, vReg src) %{\n+  match(Set dst (ReverseBytesV src));\n+  format %{ \"vreverse_bytes $dst, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    uint vlen = Matcher::vector_length(this);\n+    __ vsetvli_helper(bt, vlen);\n+    __ vrev8_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -3793,1 +3820,1 @@\n-instruct vpopcount_mask(vReg dst, vReg src, vRegMask_V0 v0) %{\n+instruct vpopcount_masked(vReg dst, vReg src, vRegMask_V0 v0) %{\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":28,"deletions":1,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -45,1 +45,2 @@\n- * @requires (os.simpleArch == \"x64\" & vm.cpu.features ~= \".*avx2.*\") | os.arch == \"aarch64\"\n+ * @requires (os.simpleArch == \"x64\" & vm.cpu.features ~= \".*avx2.*\") | os.arch == \"aarch64\" |\n+ *           (os.arch == \"riscv64\" & vm.cpu.features ~= \".*zvbb.*\")\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorReverseBytesTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @requires (os.simpleArch == \"x64\" & vm.cpu.features ~= \".*avx2.*\") | os.simpleArch == \"AArch64\"\n+ * @requires (os.simpleArch == \"x64\" & vm.cpu.features ~= \".*avx2.*\") | os.simpleArch == \"AArch64\" |\n+ *           (os.simpleArch == \"riscv64\" & vm.cpu.features ~= \".*zvbb.*\")\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestReverseBytes.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -230,0 +230,3 @@\n+    @IR(applyIfPlatform = {\"riscv64\", \"true\"},\n+        applyIfCPUFeature = {\"zvbb\", \"true\"},\n+        counts = {IRNode.REVERSE_BYTES_VS, \">0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicCharOpTest.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -253,0 +253,3 @@\n+    @IR(applyIfPlatform = {\"riscv64\", \"true\"},\n+        applyIfCPUFeature = {\"zvbb\", \"true\"},\n+        counts = {IRNode.REVERSE_BYTES_VS, \">0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicShortOpTest.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}