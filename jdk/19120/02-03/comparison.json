{"files":[{"patch":"@@ -1891,1 +1891,1 @@\n-  INSN(vbrev8_v, 0b1010111, 0b010, 0b01000, 0b010010); \/\/ reverse btis in every byte of element\n+  INSN(vbrev8_v, 0b1010111, 0b010, 0b01000, 0b010010); \/\/ reverse bits in every byte of element\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3762,1 +3762,1 @@\n-instruct vreverse_bytes_mask(vReg dst, vReg src, vRegMask_V0 v0) %{\n+instruct vreverse_bytes_masked(vReg dst, vReg src, vRegMask_V0 v0) %{\n@@ -3764,1 +3764,1 @@\n-  format %{ \"vector_reverse_byte $dst, $src, v0.t\" %}\n+  format %{ \"vreverse_bytes_masked $dst, $src, v0.t\" %}\n@@ -3766,1 +3766,4 @@\n-    __ vrev8_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg), __ VectorMask::v0_t);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    uint vlen = Matcher::vector_length(this);\n+    __ vsetvli_helper(bt, vlen);\n+    __ vrev8_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg), Assembler::v0_t);\n@@ -3775,0 +3778,3 @@\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    uint vlen = Matcher::vector_length(this);\n+    __ vsetvli_helper(bt, vlen);\n@@ -3814,1 +3820,1 @@\n-instruct vpopcount_mask(vReg dst, vReg src, vRegMask_V0 v0) %{\n+instruct vpopcount_masked(vReg dst, vReg src, vRegMask_V0 v0) %{\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"}]}