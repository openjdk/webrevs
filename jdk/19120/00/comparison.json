{"files":[{"patch":"@@ -1890,2 +1890,3 @@\n-  INSN(vbrev8_v, 0b1010111, 0b010, 0b01000, 0b010010);\n-  INSN(vrev8_v,  0b1010111, 0b010, 0b01001, 0b010010);\n+  INSN(vbrev_v,  0b1010111, 0b010, 0b01010, 0b010010); \/\/ reverse bits in every element\n+  INSN(vbrev8_v, 0b1010111, 0b010, 0b01000, 0b010010); \/\/ reverse btis in every byte of element\n+  INSN(vrev8_v,  0b1010111, 0b010, 0b01001, 0b010010); \/\/ reverse bytes in every elememt\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -118,0 +118,1 @@\n+  product(bool, UseZvbb, false, \"Use Zvbb instructions\")                         \\\n","filename":"src\/hotspot\/cpu\/riscv\/globals_riscv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -76,0 +76,2 @@\n+      case Op_ReverseBytesV:\n+        return UseZvbb;\n@@ -3756,0 +3758,20 @@\n+\/\/ -------------------------------- Reverse Bytes Vector Operations ------------------------\n+\n+instruct vreverse_bytes_mask(vReg dst, vReg src, vRegMask_V0 v0) %{\n+  match(Set dst (ReverseBytesV src v0));\n+  format %{ \"vector_reverse_byte $dst, $src, v0.t\" %}\n+  ins_encode %{\n+    __ vrev8_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg), __ VectorMask::v0_t);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct vreverse_bytes(vReg dst, vReg src) %{\n+  match(Set dst (ReverseBytesV src));\n+  format %{ \"vreverse_bytes $dst, $src\" %}\n+  ins_encode %{\n+    __ vrev8_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -248,0 +248,6 @@\n+  \/\/ UseZvbb (depends on RVV).\n+  if (UseZvbb && !UseRVV) {\n+    FLAG_SET_DEFAULT(UseZvbb, false);\n+    warning(\"Cannot enable UseZvbb on cpu without RVV support.\");\n+  }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -164,0 +164,1 @@\n+  decl(ext_Zvbb        , \"Zvbb\"        , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZvbb))        \\\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -181,0 +181,3 @@\n+  if (is_set(RISCV_HWPROBE_KEY_IMA_EXT_0, RISCV_HWPROBE_EXT_ZVBB)) {\n+    VM_Version::ext_Zvbb.enable_feature();\n+  }\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/riscv_hwprobe.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -105,1 +105,3 @@\n-        \"sve\"\n+        \"sve\",\n+        \/\/ Riscv64\n+        \"zvbb\"\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/IREncodingPrinter.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,3 @@\n- * @requires (os.simpleArch == \"x64\" & vm.cpu.features ~= \".*avx2.*\") | os.arch == \"aarch64\"\n+ * @requires (os.simpleArch == \"x64\" & vm.cpu.features ~= \".*avx2.*\") |\n+ *           os.arch == \"aarch64\" |\n+ *           (os.arch == \"riscv\" & vm.cpu.features ~= \".*zvbb.*\")\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorReverseBytesTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @requires (os.simpleArch == \"x64\" & vm.cpu.features ~= \".*avx2.*\") | os.simpleArch == \"AArch64\"\n+ * @requires (os.simpleArch == \"x64\" & vm.cpu.features ~= \".*avx2.*\") | os.simpleArch == \"AArch64\" |\n+ *           (os.simpleArch == \"riscv64\" & vm.cpu.features ~= \".*zvbb.*\")\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestReverseBytes.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -230,0 +230,3 @@\n+    @IR(applyIfPlatform = {\"riscv64\", \"true\"},\n+        applyIfCPUFeature = {\"zvbb\", \"true\"},\n+        counts = {IRNode.REVERSE_BYTES_VS, \">0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicCharOpTest.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -253,0 +253,3 @@\n+    @IR(applyIfPlatform = {\"riscv64\", \"true\"},\n+        applyIfCPUFeature = {\"zvbb\", \"true\"},\n+        counts = {IRNode.REVERSE_BYTES_VS, \">0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicShortOpTest.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}