{"files":[{"patch":"@@ -53,0 +53,5 @@\n+ * @apiNote\n+ * In the reference implementation, handling {@linkplain ErrorType\n+ * error types} generally does not cause an {@code\n+ * UnsupportedOperationException} from the methods in this interface.\n+ *\n@@ -201,0 +206,1 @@\n+     *\n@@ -202,1 +208,2 @@\n-     *          unboxing conversion\n+     *         unboxing conversion. Only types for the wrapper classes\n+     *         have an unboxing conversion.\n@@ -271,1 +278,4 @@\n-     * @throws IllegalArgumentException if bounds are not valid\n+     *\n+     * @throws IllegalArgumentException if bounds are not valid,\n+     * including for types that are <em>not<\/em> {@linkplain ReferenceType\n+     * reference types}\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/Types.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,184 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8340721\n+ * @summary Test invalid inputs to javax.lang.model.util.Types methods\n+ * @library \/tools\/javac\/lib\n+ * @modules java.compiler\n+ * @build JavacTestingAbstractProcessor TestInvalidInputs\n+ * @compile -processor TestInvalidInputs -proc:only TestInvalidInputs.java\n+ *\/\n+\n+import java.util.*;\n+import javax.annotation.processing.*;\n+import javax.lang.model.element.*;\n+import javax.lang.model.type.*;\n+import javax.lang.model.util.*;\n+\n+\/**\n+ * Test if exceptions are thrown for invalid arguments as expected.\n+ *\/\n+public class TestInvalidInputs extends JavacTestingAbstractProcessor {\n+\n+    \/\/ Reference types are ArrayType, DeclaredType, ErrorType, NullType, and TypeVariable\n+\n+    private TypeMirror       objectType;\n+    private TypeMirror       stringType;\n+    private ArrayType        arrayType;\n+    private DeclaredType     declaredType;\n+    \/\/ private ErrorType        errorType; \/\/ skip for now\n+    private ExecutableType   executableType;\n+    private IntersectionType intersectionType;\n+\n+    private NoType           noTypeVoid;\n+    private NoType           noTypeNone;\n+    private NoType           noTypePackage;\n+    private NoType           noTypeModule;\n+\n+    private NullType         nullType;\n+    private PrimitiveType    primitiveType;\n+    private UnionType        unionType;\n+    private WildcardType     wildcardType;\n+\n+    \/**\n+     * Check expected behavior on classes and packages.\n+     *\/\n+    public boolean process(Set<? extends TypeElement> annotations,\n+                           RoundEnvironment roundEnv) {\n+        if (!roundEnv.processingOver()) {\n+            initializeTypes();\n+            testUnboxedType();\n+            testGetWildcardType();\n+        }\n+        return true;\n+    }\n+\n+    void initializeTypes() {\n+        objectType = elements.getTypeElement(\"java.lang.Object\").asType();\n+        stringType = elements.getTypeElement(\"java.lang.String\").asType();\n+\n+        arrayType = types.getArrayType(objectType); \/\/ Object[]\n+        declaredType = (DeclaredType)objectType;\n+        executableType = extractExecutableType();\n+        intersectionType = extractIntersectionType();\n+\n+        noTypeVoid = types.getNoType(TypeKind.VOID);\n+        noTypeNone = types.getNoType(TypeKind.NONE);\n+        noTypePackage = (NoType)(elements.getPackageElement(\"java.lang\").asType());\n+        noTypeModule  = (NoType)(elements.getModuleElement(\"java.base\").asType());\n+\n+        nullType = types.getNullType();\n+        primitiveType = types.getPrimitiveType(TypeKind.DOUBLE);\n+        \/\/ unionType; \/\/ more work here\n+        wildcardType = types.getWildcardType(objectType, null);\n+\n+        return;\n+    }\n+\n+    ExecutableType extractExecutableType() {\n+        var typeElement = elements.getTypeElement(\"TestInvalidInputs.InvalidInputsHost\");\n+        for (var method : ElementFilter.methodsIn(typeElement.getEnclosedElements())) {\n+            if (\"foo7\".equals(method.getSimpleName().toString())) {\n+                return (ExecutableType)method.asType();\n+            }\n+        }\n+        throw new RuntimeException(\"Expected method not found\");\n+    }\n+\n+    IntersectionType extractIntersectionType() {\n+        var typeElement = elements.getTypeElement(\"TestInvalidInputs.InvalidInputsHost\");\n+        for (var method : ElementFilter.methodsIn(typeElement.getEnclosedElements())) {\n+            if (\"foo9\".equals(method.getSimpleName().toString())) {\n+                return (IntersectionType) ((TypeVariable)method.getReturnType()).getUpperBound();\n+            }\n+        }\n+        throw new RuntimeException(\"Expected method not found\");\n+    }\n+\n+    \/*\n+     * Class to host inputs for testing.\n+     *\/\n+    class InvalidInputsHost {\n+        \/\/ Use a method to get an ExecutableType\n+        public static String foo7(int arg) {return null;}\n+\n+        \/\/ Type variable with intersection type\n+        public static <S extends Number &  Runnable>  S foo9() {return null;}\n+    }\n+\n+    \/**\n+     * @throws IllegalArgumentException if the given type has no\n+     *         unboxing conversion, including for types that are not\n+     *         {@linkplain ReferenceType reference types}\n+     *\/\n+    void testUnboxedType() {\n+        \/\/ Only DeclaredType's for wrapper classes should have unboxing converions defined.\n+\n+        \/\/ Reference types are ArrayType, DeclaredType, ErrorType, NullType, TypeVariable\n+        \/\/ non-reference: ExecutableType, IntersectionType, NoType, PrimitiveType, UnionType, WildcardType\n+        var invalidInputs = List.of(objectType, stringType, arrayType,\n+                                    executableType, intersectionType,\n+                                    noTypeVoid, noTypeNone, noTypePackage, noTypeModule, nullType,\n+                                    primitiveType, \/*unionType, *\/ wildcardType);\n+\n+        for (TypeMirror tm : invalidInputs) {\n+            try {\n+                PrimitiveType pt = types.unboxedType(tm);\n+            } catch(IllegalArgumentException iae) {\n+                ; \/\/ Expected\n+            }\n+        }\n+        return;\n+    }\n+\n+    \/**\n+     * @throws IllegalArgumentException if bounds are not valid,\n+     * including for types that are not {@linkplain ReferenceType\n+     * reference types}\n+     *\/\n+    void testGetWildcardType() {\n+        \/\/ Reference types are ArrayType, DeclaredType, ErrorType, NullType, TypeVariable\n+        \/\/ non-reference: ExecutableType, IntersectionType, NoType, PrimitiveType, UnionType, WildcardType\n+        var invalidInputs = List.of( arrayType,\n+                                    executableType, intersectionType,\n+                                    noTypeVoid, noTypeNone, noTypePackage, noTypeModule, nullType,\n+                                    primitiveType, \/*unionType, *\/ wildcardType);\n+\n+        for (TypeMirror tm : invalidInputs) {\n+            try {\n+                WildcardType wc1 = types.getWildcardType(tm,   null);\n+            } catch(IllegalArgumentException iae) {\n+                ; \/\/ Expected\n+            }\n+\n+            try {\n+                WildcardType wc2 = types.getWildcardType(null, tm);\n+            } catch(IllegalArgumentException iae) {\n+                ; \/\/ Expected\n+            }\n+        }\n+        return;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/util\/types\/TestInvalidInputs.java","additions":184,"deletions":0,"binary":false,"changes":184,"status":"added"}]}