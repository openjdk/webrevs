{"files":[{"patch":"@@ -73,2 +73,7 @@\n-    static boolean isDirectoryMacBundle(Path dir) {\n-        return new MacBundle(dir).isValid();\n+    static Optional<MacBundle> fromPath(Path path) {\n+        var bundle = new MacBundle(path);\n+        if (bundle.isValid()) {\n+            return Optional.of(bundle);\n+        } else {\n+            return Optional.empty();\n+        }\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacBundle.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+import static jdk.jpackage.internal.MacRuntimeValidator.validateRuntimeHasJliLib;\n+import static jdk.jpackage.internal.MacRuntimeValidator.validateRuntimeHasNoBinDir;\n@@ -57,1 +59,0 @@\n-import jdk.jpackage.internal.SigningIdentityBuilder.StandardCertificateSelector;\n@@ -65,1 +66,0 @@\n-import jdk.jpackage.internal.model.MacLauncher;\n@@ -79,2 +79,8 @@\n-                .map(MacPackage::guessRuntimeLayout)\n-                .map(RuntimeLayout::unresolve);\n+                .map(MacPackage::guessRuntimeLayout);\n+\n+        if (predefinedRuntimeLayout.isPresent()) {\n+            validateRuntimeHasJliLib(predefinedRuntimeLayout.orElseThrow());\n+            if (APP_STORE.findIn(params).orElse(false)) {\n+                validateRuntimeHasNoBinDir(predefinedRuntimeLayout.orElseThrow());\n+            }\n+        }\n@@ -87,1 +93,1 @@\n-        }), APPLICATION_LAYOUT, RUNTIME_BUNDLE_LAYOUT, predefinedRuntimeLayout);\n+        }), APPLICATION_LAYOUT, RUNTIME_BUNDLE_LAYOUT, predefinedRuntimeLayout.map(RuntimeLayout::unresolve));\n@@ -105,1 +111,1 @@\n-            appBuilder.externalInfoPlistFile(PREDEFINED_APP_IMAGE.findIn(params).orElseThrow().resolve(\"Contents\/Info.plist\"));\n+            appBuilder.externalInfoPlistFile(PREDEFINED_APP_IMAGE.findIn(params).map(MacBundle::new).orElseThrow().infoPlistFile());\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacFromParams.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.NoSuchFileException;\n+import java.nio.file.Path;\n+import java.util.function.Predicate;\n+import jdk.jpackage.internal.model.ConfigException;\n+import jdk.jpackage.internal.model.RuntimeLayout;\n+\n+final class MacRuntimeValidator {\n+\n+    static void validateRuntimeHasJliLib(RuntimeLayout runtimeLayout) throws ConfigException {\n+        final var jliName = Path.of(\"libjli.dylib\");\n+        try (var walk = Files.walk(runtimeLayout.runtimeDirectory().resolve(\"lib\"))) {\n+            if (walk.map(Path::getFileName).anyMatch(Predicate.isEqual(jliName))) {\n+                return;\n+            }\n+        } catch (NoSuchFileException ex) {\n+        } catch (IOException ex) {\n+            throw new UncheckedIOException(ex);\n+        }\n+\n+        throw I18N.buildConfigException(\"error.invalid-runtime-image-missing-file\",\n+                runtimeLayout.rootDirectory(),\n+                runtimeLayout.unresolve().runtimeDirectory().resolve(\"lib\/**\").resolve(jliName)).create();\n+    }\n+\n+    static void validateRuntimeHasNoBinDir(RuntimeLayout runtimeLayout) throws ConfigException {\n+        if (Files.isDirectory(runtimeLayout.runtimeDirectory().resolve(\"bin\"))) {\n+            throw I18N.buildConfigException()\n+                    .message(\"error.invalid-runtime-image-bin-dir\", runtimeLayout.rootDirectory())\n+                    .advice(\"error.invalid-runtime-image-bin-dir.advice\", \"--mac-app-store\")\n+                    .create();\n+        }\n+    }\n+}\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacRuntimeValidator.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -42,0 +42,3 @@\n+error.invalid-runtime-image-missing-file=Runtime image \"{0}\" is missing \"{1}\" file\n+error.invalid-runtime-image-bin-dir=Runtime image \"{0}\" should not contain \"bin\" folder\n+error.invalid-runtime-image-bin-dir.advice=Use --strip-native-commands jlink option when generating runtime image used with {0} option\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -283,24 +283,0 @@\n-\n-            \/\/ Validate runtime if mac-app-store is set. Predefined runtime\n-            \/\/ should not contain \"bin\" folder.\n-            runtime = (String)bundlerArguments.get(\n-                    Arguments.CLIOptions.PREDEFINED_RUNTIME_IMAGE.getId());\n-            if (runtime != null) {\n-                \/\/ Should exist from check above if not null\n-                Path topImage = Path.of(runtime);\n-\n-                \/\/ On Mac topImage can be runtime root or runtime home.\n-                Path runtimeHome = topImage.resolve(\"Contents\/Home\");\n-                if (Files.isDirectory(runtimeHome)) {\n-                    \/\/ topImage references runtime root, adjust it to pick data\n-                    \/\/ from runtime home\n-                    topImage = runtimeHome;\n-                }\n-\n-                Path runtimeBin = topImage.resolve(\"bin\");\n-                if (Files.isDirectory(runtimeBin)) {\n-                    throw new PackagerException(\n-                            \"ERR_MacAppStoreRuntimeBinExists\",\n-                            topImage.toAbsolutePath().toString());\n-                }\n-            }\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/DeployParams.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-                    jlinkOptionsBuilder.appy();\n+                    jlinkOptionsBuilder.apply();\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/FromParams.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-        RuntimeBuilderBuilder appy() {\n+        RuntimeBuilderBuilder apply() {\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/RuntimeBuilderBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -119,1 +119,0 @@\n-ERR_MacAppStoreRuntimeBinExists=Error: Runtime image \"{0}\" should not contain \"bin\" folder. Use --strip-native-commands jlink option when generating runtime image used with --mac-app-store argument.\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/MainResources.properties","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-    Status appyTo(OverridableResource resource, Path resourceSaveAsFile) throws IOException {\n+    Status applyTo(OverridableResource resource, Path resourceSaveAsFile) throws IOException {\n@@ -187,1 +187,1 @@\n-                        conv.appyTo(e.getValue(), e.getKey());\n+                        conv.applyTo(e.getValue(), e.getKey());\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WixSourceConverter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import static jdk.jpackage.internal.util.function.ThrowingFunction.toFunction;\n@@ -31,0 +32,1 @@\n+import java.nio.file.Files;\n@@ -91,0 +93,12 @@\n+        INVALID_MAC_RUNTIME_BUNDLE(toFunction(cmd -> {\n+            \/\/ Has \"Contents\/MacOS\/libjli.dylib\", but missing \"Contents\/Home\/lib\/libjli.dylib\"\n+            final Path root = TKit.createTempDirectory(\"invalid-runtime-bundle\");\n+            Files.createDirectories(root.resolve(\"Contents\/Home\"));\n+            Files.createFile(root.resolve(\"Contents\/Info.plist\"));\n+            Files.createDirectories(root.resolve(\"Contents\/MacOS\"));\n+            Files.createFile(root.resolve(\"Contents\/MacOS\/libjli.dylib\"));\n+            return root.toString();\n+        })),\n+        EMPTY_DIR(toFunction(cmd -> {\n+            return TKit.createTempDirectory(\"empty-dir\");\n+        })),\n@@ -605,5 +619,1 @@\n-                        .error(\"ERR_MissingJLinkOptMacAppStore\", \"--strip-native-commands\"),\n-                testSpec().nativeType().addArgs(\"--mac-app-store\", \"--runtime-image\", Token.JAVA_HOME.token())\n-                        .error(\"ERR_MacAppStoreRuntimeBinExists\", JPackageCommand.cannedArgument(cmd -> {\n-                            return Path.of(cmd.getArgumentValue(\"--runtime-image\")).toAbsolutePath();\n-                        }, Token.JAVA_HOME.token()))\n+                        .error(\"ERR_MissingJLinkOptMacAppStore\", \"--strip-native-commands\")\n@@ -612,0 +622,2 @@\n+        macInvalidRuntime(testCases::add);\n+\n@@ -712,0 +724,39 @@\n+    private static void macInvalidRuntime(Consumer<TestSpec> accumulator) {\n+        var runtimeWithBinDirErr = JPackageStringBundle.MAIN.cannedFormattedString(\n+                \"error.invalid-runtime-image-bin-dir\", JPackageCommand.cannedArgument(cmd -> {\n+                    return Path.of(cmd.getArgumentValue(\"--runtime-image\"));\n+                }, Token.JAVA_HOME.token()));\n+        var runtimeWithBinDirErrAdvice = JPackageStringBundle.MAIN.cannedFormattedString(\n+                \"error.invalid-runtime-image-bin-dir.advice\", \"--mac-app-store\");\n+\n+        var runtimeBundleWithoutJliLibErr = JPackageStringBundle.MAIN.cannedFormattedString(\n+                \"error.invalid-runtime-image-missing-file\", JPackageCommand.cannedArgument(cmd -> {\n+                    return Path.of(cmd.getArgumentValue(\"--runtime-image\"));\n+                }, Token.INVALID_MAC_RUNTIME_BUNDLE.token()), \"Contents\/Home\/lib\/**\/libjli.dylib\");\n+\n+        var runtimeDirWithoutJliLibErr = JPackageStringBundle.MAIN.cannedFormattedString(\n+                \"error.invalid-runtime-image-missing-file\", JPackageCommand.cannedArgument(cmd -> {\n+                    return Path.of(cmd.getArgumentValue(\"--runtime-image\"));\n+                }, Token.EMPTY_DIR.token()), \"lib\/**\/libjli.dylib\");\n+\n+        Stream.of(\n+                testSpec().nativeType().addArgs(\"--mac-app-store\", \"--runtime-image\", Token.JAVA_HOME.token())\n+                        .errors(runtimeWithBinDirErr, runtimeWithBinDirErrAdvice)\n+        ).map(TestSpec.Builder::create).forEach(accumulator);\n+\n+        for (var mutator : List.<Consumer<TestSpec.Builder>>of(builder -> {\n+            builder.addArgs(\"--runtime-image\", Token.INVALID_MAC_RUNTIME_BUNDLE.token()).errors(runtimeBundleWithoutJliLibErr);\n+        }, builder -> {\n+            builder.addArgs(\"--runtime-image\", Token.EMPTY_DIR.token()).errors(runtimeDirWithoutJliLibErr);\n+        })) {\n+            Stream.of(\n+                    testSpec(),\n+                    testSpec().nativeType(),\n+                    testSpec().nativeType().noAppDesc()\n+            ).map(testSpec -> {\n+                mutator.accept(testSpec);\n+                return testSpec;\n+            }).map(TestSpec.Builder::create).forEach(accumulator);\n+        }\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/share\/ErrorTest.java","additions":56,"deletions":5,"binary":false,"changes":61,"status":"modified"}]}