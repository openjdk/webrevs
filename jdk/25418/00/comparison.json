{"files":[{"patch":"@@ -153,1 +153,1 @@\n-            sink.begin(size);\n+            sink.begin(-1); \/\/ GathererOp does not know the size of the output\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/GathererOp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -23,1 +23,0 @@\n-import java.util.ArrayList;\n@@ -25,1 +24,2 @@\n-import java.util.function.Predicate;\n+import java.util.Spliterator;\n+import java.util.function.Consumer;\n@@ -34,0 +34,1 @@\n+import org.junit.jupiter.params.provider.ValueSource;\n@@ -468,0 +469,35 @@\n+    @ParameterizedTest\n+    @ValueSource(booleans = { false, true })\n+    public void mustNotPropagateSizeInformation(boolean parallel) {\n+        \/\/ Constructs a spliterator of unbounded length but which\n+        \/\/ reports SIZED and SUBSIZED characteristics so if its size\n+        \/\/ of Long.MAX_VALUE gets propagated by gather() then the\n+        \/\/ resulting toList() call would allocate a huge array and as\n+        \/\/ such would yield an OutOfMemoryError\n+        var s = new Spliterator<Integer>() {\n+            @Override\n+            public boolean tryAdvance(Consumer<? super Integer> action) {\n+                action.accept(0);\n+                return true;\n+            }\n+\n+            @Override public Spliterator<Integer> trySplit() { return null; }\n+\n+            @Override public long estimateSize() { return Long.MAX_VALUE; }\n+\n+            @Override\n+            public int characteristics() {\n+                return Spliterator.SIZED | Spliterator.IMMUTABLE | Spliterator.SUBSIZED;\n+            }\n+        };\n+\n+        var result = StreamSupport.stream(s, parallel)\n+                                  .gather(\n+                                      Gatherer.of(\n+                                          (_, i, d)\n+                                              -> d.push(i) && false\n+                                      )\n+                                  ).toList();\n+        assertEquals(result, List.of(0));\n+    }\n+\n","filename":"test\/jdk\/java\/util\/stream\/GathererTest.java","additions":38,"deletions":2,"binary":false,"changes":40,"status":"modified"}]}