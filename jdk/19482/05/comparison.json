{"files":[{"patch":"@@ -1525,8 +1525,2 @@\n-  if (thread_oop != nullptr) {\n-    if (is_vthread_mounted()) {\n-      oop vt = vthread();\n-      assert(vt != nullptr, \"\");\n-      st->print_cr(\"   Carrying virtual thread #\" INT64_FORMAT, (int64_t)java_lang_Thread::thread_id(vt));\n-    } else {\n-      st->print_cr(\"   java.lang.Thread.State: %s\", java_lang_Thread::thread_status_name(thread_oop));\n-    }\n+  if (thread_oop != nullptr && !is_vthread_mounted()) {\n+    st->print_cr(\"   java.lang.Thread.State: %s\", java_lang_Thread::thread_status_name(thread_oop));\n@@ -1828,0 +1822,5 @@\n+      int indentation = st->indentation();\n+      while(indentation > 0) {\n+        st->print(\"\\t\");\n+        indentation--;\n+      }\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1330,0 +1330,11 @@\n+        oop thread_oop = p->threadObj();\n+        if (thread_oop != nullptr) {\n+          if (p->is_vthread_mounted()) {\n+            oop vt = p->vthread();\n+            assert(vt != nullptr, \"\");\n+            st->print_cr(\"   \\tCarrying virtual thread #\" INT64_FORMAT, (int64_t)java_lang_Thread::thread_id(vt));\n+            st->inc();\n+            p->print_vthread_stack_on(st);\n+            st->dec();\n+          }\n+        }\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import com.beust.ah.A;\n+import jdk.test.lib.dcmd.CommandExecutor;\n+import jdk.test.lib.dcmd.JMXExecutor;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import org.testng.Assert;\n+import org.testng.SkipException;\n+import org.testng.annotations.Test;\n+\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.regex.Pattern;\n+\n+\/*\n+ * @test\n+ * @summary Test of diagnostic command Thread.print with virtual threads\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n+ * @run testng PrintVirtualThreadTest\n+ *\/\n+public class PrintVirtualThreadTest {\n+\n+    public void run(CommandExecutor executor) throws InterruptedException {\n+        var shouldStop = new AtomicBoolean();\n+        var started = new CountDownLatch(1);\n+        final Runnable runnable = new DummyRunnable(shouldStop, started);\n+        Thread.startVirtualThread(runnable);\n+        started.await();\n+        \/* Execute *\/\n+        OutputAnalyzer output = executor.execute(\"Thread.print\");\n+        output.shouldMatch(\".*at \" + Pattern.quote(DummyRunnable.class.getName()) + \"\\\\.run.*\");\n+        output.shouldMatch(\".*at \" + Pattern.quote(DummyRunnable.class.getName()) + \"\\\\.compute.*\");\n+    }\n+\n+    @Test\n+    public void jmx() throws InterruptedException {\n+        run(new JMXExecutor());\n+    }\n+\n+    static class DummyRunnable implements Runnable {\n+\n+        private final AtomicBoolean shouldStop;\n+        private final CountDownLatch started;\n+\n+        public DummyRunnable(AtomicBoolean shouldStop, CountDownLatch started) {\n+           this.shouldStop = shouldStop;\n+           this.started = started;\n+        }\n+\n+        public void run() {\n+            compute();\n+        }\n+\n+        void compute() {\n+            started.countDown();\n+            while (true) {\n+                if (shouldStop.get()) {\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+\n+\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/thread\/PrintVirtualThreadTest.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"}]}