{"files":[{"patch":"@@ -59,1 +59,0 @@\n-#include \"oops\/method.inline.hpp\"\n@@ -74,1 +73,0 @@\n-#include \"runtime\/vframe.inline.hpp\"\n@@ -1338,16 +1336,1 @@\n-            \/\/ Very slightly modified copy of what GetStackTraceClosure does\n-            const int max_depth = MaxJavaStackTraceDepth;\n-            const bool skip_hidden = !ShowHiddenFrames;\n-            int total_count = 0;\n-            for (vframeStream vfst(p, false, false, false); \/\/ we don't process frames as we don't care about oops\n-                !vfst.at_end() && (max_depth == 0 || max_depth != total_count);\n-                vfst.next()) {\n-\n-              if (skip_hidden && (vfst.method()->is_hidden() ||\n-                                  vfst.method()->is_continuation_enter_intrinsic())) {\n-                continue;\n-              }\n-              st->print(\"\\t\"); \/\/ Indent\n-              java_lang_Throwable::print_stack_element(st, vfst.method(), vfst.bci());\n-              total_count++;\n-            }\n+            p->print_vthread_stack_on(st);\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":1,"deletions":18,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-            while(true) {\n+            while (true) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/thread\/PrintVirtualThreadTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}