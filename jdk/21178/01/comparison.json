{"files":[{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.util.zip;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.util.concurrent.TimeUnit;\n+import java.util.zip.*;\n+\n+\/**\n+ * Benchmark measuring cost of consuming streams from a ZipFile vs a ZipInputStream.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(3)\n+public class ReadZipStreams {\n+\n+    @Param({\"1024\"})\n+    private int size;\n+\n+    @Param({\"DEFLATED\", \"STORED\"})\n+    private String method;\n+\n+    @Param({\"true\"})\n+    private boolean buffered;\n+\n+    public File zipFile;\n+\n+    \/\/ Used by transferTo\n+    private static byte[] buffer = new byte[16384];\n+\n+    @Setup(Level.Trial)\n+    public void beforeRun() throws IOException {\n+        \/\/ Create a test Zip file with the number of entries.\n+        File tempFile = Files.createTempFile(\"zip-micro\", \".zip\").toFile();\n+        tempFile.deleteOnExit();\n+        \/\/ Using a class file a gives a representative compression rate\n+        byte[] content = readClassFile(getClass());\n+        CRC32 crc = new CRC32();\n+        crc.update(content);\n+        try (FileOutputStream fos = new FileOutputStream(tempFile);\n+             ZipOutputStream zos = new ZipOutputStream(fos)) {\n+\n+            for (int i = 0; i < size; i++) {\n+                ZipEntry entry = new ZipEntry(Integer.toString(i) +\".txt\");\n+                if (\"STORED\".equals(method)) {\n+                    entry.setMethod(ZipEntry.STORED);\n+                    entry.setCrc(crc.getValue());\n+                    entry.setSize(content.length);\n+                }\n+                zos.putNextEntry(entry);\n+                zos.write(content);\n+            }\n+        }\n+        zipFile = tempFile;\n+    }\n+\n+    @Benchmark\n+    public void readZipInputStream() throws Exception {\n+        try (var fi = new FileInputStream(zipFile);\n+             var wrap = buffered ? new BufferedInputStream(fi) : fi;\n+                var in = new ZipInputStream(wrap)) {\n+            ZipEntry entry;\n+            while ((entry = in.getNextEntry()) != null) {\n+                transferTo(in, OutputStream.nullOutputStream());\n+            }\n+        }\n+    }\n+\n+    @Benchmark\n+    public void readZipFileInputStream() throws Exception {\n+        try (var zf = new ZipFile(zipFile)) {\n+            var entries = zf.entries();\n+            while (entries.hasMoreElements()) {\n+                ZipEntry entry = entries.nextElement();\n+                try (var in = zf.getInputStream(entry)) {\n+                    transferTo(in, OutputStream.nullOutputStream());\n+                }\n+            }\n+        }\n+    }\n+\n+    @Benchmark\n+    public void zipFileOpenCloseStreams() throws Exception {\n+        try (var zf = new ZipFile(zipFile)) {\n+            var entries = zf.entries();\n+            while (entries.hasMoreElements()) {\n+                ZipEntry entry = entries.nextElement();\n+                zf.getInputStream(entry).close();\n+            }\n+        }\n+    }\n+\n+    \/\/ Read class file data for a class\n+    private byte[] readClassFile(Class<?> clazz) throws IOException {\n+        byte[] content;\n+        try (var is = clazz.getResourceAsStream(clazz.getSimpleName() +\".class\")) {\n+            content = is.readAllBytes();\n+        }\n+        return content;\n+    }\n+\n+    \/\/ Transfer bytes using an existing buffer\n+    private static void transferTo(InputStream in, OutputStream out) throws IOException {\n+        byte[] buffer = ReadZipStreams.buffer;\n+        int read;\n+        while (true) {\n+            if (!((read = in.read(buffer, 0, buffer.length)) >= 0)) break;\n+            out.write(buffer, 0, read);\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/zip\/ReadZipStreams.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"}]}