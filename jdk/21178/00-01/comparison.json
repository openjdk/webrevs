{"files":[{"patch":"@@ -30,1 +30,0 @@\n-import java.util.Random;\n@@ -56,0 +55,3 @@\n+    \/\/ Used by transferTo\n+    private static byte[] buffer = new byte[16384];\n+\n@@ -61,2 +63,2 @@\n-        byte[] content = new byte[2048];\n-        new Random().nextBytes(content);\n+        \/\/ Using a class file a gives a representative compression rate\n+        byte[] content = readClassFile(getClass());\n@@ -82,1 +84,0 @@\n-\n@@ -84,1 +85,1 @@\n-    public void zipInputStream() throws Exception {\n+    public void readZipInputStream() throws Exception {\n@@ -90,1 +91,1 @@\n-                in.transferTo(OutputStream.nullOutputStream());\n+                transferTo(in, OutputStream.nullOutputStream());\n@@ -96,1 +97,1 @@\n-    public void zipFile() throws Exception {\n+    public void readZipFileInputStream() throws Exception {\n@@ -102,1 +103,1 @@\n-                    in.transferTo(OutputStream.nullOutputStream());\n+                    transferTo(in, OutputStream.nullOutputStream());\n@@ -118,0 +119,19 @@\n+\n+    \/\/ Read class file data for a class\n+    private byte[] readClassFile(Class<?> clazz) throws IOException {\n+        byte[] content;\n+        try (var is = clazz.getResourceAsStream(clazz.getSimpleName() +\".class\")) {\n+            content = is.readAllBytes();\n+        }\n+        return content;\n+    }\n+\n+    \/\/ Transfer bytes using an existing buffer\n+    private static void transferTo(InputStream in, OutputStream out) throws IOException {\n+        byte[] buffer = ReadZipStreams.buffer;\n+        int read;\n+        while (true) {\n+            if (!((read = in.read(buffer, 0, buffer.length)) >= 0)) break;\n+            out.write(buffer, 0, read);\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/zip\/ReadZipStreams.java","additions":28,"deletions":8,"binary":false,"changes":36,"status":"modified"}]}