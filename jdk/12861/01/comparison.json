{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -115,1 +115,1 @@\n-                                       SUSPEND_NONE,   \"ThreadStartRequest1\");\n+                                       SUSPEND_NONE,   \"ThreadStartRequest0\");\n@@ -120,1 +120,1 @@\n-                                       SUSPEND_THREAD, \"ThreadStartRequest2\");\n+                                       SUSPEND_THREAD, \"ThreadStartRequest1\");\n@@ -125,1 +125,1 @@\n-                                       SUSPEND_ALL,    \"ThreadStartRequest3\");\n+                                       SUSPEND_ALL,    \"ThreadStartRequest2\");\n@@ -140,0 +140,11 @@\n+            display(\"       got new event: \"  + newEvent);\n+\n+            \/\/ Make sure any spurious ThreadStartEvent got filtered out.\n+            if (newEvent instanceof ThreadStartEvent) {\n+                ThreadStartEvent t = (ThreadStartEvent)newEvent;\n+                if (!t.thread().name().equals(resume008a.THREAD_NAME_PREFIX + i)) {\n+                    setFailedStatus(\"ERROR: ThreadStartEvent is not for expected thread:  \" +\n+                                    t.thread().name());\n+                    return;\n+                }\n+            }\n@@ -146,1 +157,1 @@\n-                display(\"       got new ThreadStartEvent with propety 'number' == \"\n+                display(\"       got new ThreadStartEvent with property 'number' == \"\n@@ -266,1 +277,0 @@\n-            tsr.addCountFilter(1);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/resume\/resume008.java","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,2 @@\n+    static final String THREAD_NAME_PREFIX = \"resume008-thread\";\n+\n@@ -98,1 +100,1 @@\n-                thread0 = JDIThreadFactory.newThread(new Threadresume008a(\"thread0\"));\n+                thread0 = JDIThreadFactory.newThread(new Threadresume008a(THREAD_NAME_PREFIX + 0));\n@@ -101,1 +103,1 @@\n-                thread1 = JDIThreadFactory.newThread(new Threadresume008a(\"thread1\"));\n+                thread1 = JDIThreadFactory.newThread(new Threadresume008a(THREAD_NAME_PREFIX + 1));\n@@ -103,1 +105,1 @@\n-                \/\/ before advancing to the first breakpoint\n+                \/\/ before advancing to the 2nd breakpoint\n@@ -109,1 +111,1 @@\n-                thread2 = JDIThreadFactory.newThread(new Threadresume008a(\"thread2\"));\n+                thread2 = JDIThreadFactory.newThread(new Threadresume008a(THREAD_NAME_PREFIX + 2));\n@@ -142,0 +144,1 @@\n+        log1(\"waitForTestCase: \" + t);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/resume\/resume008a.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -334,10 +334,18 @@\n-        if (event.toString().contains(\"VM JFR Buffer Thread\"))\n-            return true;\n-\n-        if (event.toString().contains(\"JFR request timer\"))\n-            return true;\n-\n-        \/\/ Filter out any carrier thread that starts while running the test.\n-        if (event.toString().contains(\"ForkJoinPool\"))\n-            return true;\n-\n+        if (event instanceof ThreadStartEvent) {\n+            ThreadStartEvent tse = (ThreadStartEvent)event;\n+            String tname = tse.thread().name();\n+            String knownThreads[] = {\n+                \"VM JFR Buffer Thread\",\n+                \"JFR request timer\",\n+                \"Reference Handler\",\n+                \"VirtualThread-unparker\",\n+                \"Common-Cleaner\",\n+                \"FinalizerThread\",\n+                \"ForkJoinPool\"\n+            };\n+            for (String s : knownThreads) {\n+                if (tname.startsWith(s)) {\n+                    return true;\n+                }\n+            }\n+        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdi\/EventFilters.java","additions":19,"deletions":11,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -254,0 +254,35 @@\n+\n+    \/**\n+     * Creates an EventListener for unexpected ThreadStartEvents. The\n+     * events are ignored.\n+     *\/\n+    public EventListener createSpuriousThreadStartEventListener(String owner) {\n+        \/*\n+         * This listener catches spurious thread creations that we want to ignore.\n+         *\/\n+        return (new EventListener() {\n+            boolean handled = false;\n+\n+            public boolean eventReceived(Event event) {\n+                handled = false;\n+                if (event instanceof ThreadStartEvent) {\n+                    if (EventFilters.filtered(event)) {\n+                        display(owner + \": Ignoring spurious thread creation: \" + event);\n+                        handled = true;\n+                    }\n+                }\n+                return handled;\n+            }\n+\n+            public void eventSetComplete(EventSet set) {\n+                \/\/ If we ignored this event, then we need to resume.\n+                if (handled) {\n+                    handled = false; \/\/ reset for next EventSet that comes in.\n+                    display(owner + \": set.resume() after spurious thread creation: \" + set);\n+                    set.resume();\n+                }\n+            }\n+        }\n+        );\n+    }\n+\n@@ -346,0 +381,7 @@\n+\n+        \/**\n+         * This listener attempt to catch any ThreadStartEvent for a thread not\n+         * created by the test. It prevents the \"Unexpected event\" listener\n+         * above from complaining about these events.\n+         *\/\n+        addListener(createSpuriousThreadStartEventListener(\"Default Listener\"));\n@@ -407,1 +449,1 @@\n-                        return true;\n+                        return true; \/\/ event was handled\n@@ -410,1 +452,1 @@\n-                return false;\n+                return false; \/\/ event was not handled\n@@ -413,0 +455,1 @@\n+\n@@ -422,0 +465,7 @@\n+        \/*\n+         * This listener skips spurious thread creations that we want to ignore.\n+         *\/\n+        EventListener spuriousThreadStartEventListener =\n+            createSpuriousThreadStartEventListener(\"waitForRequestedEventCommon\");\n+        addListener(spuriousThreadStartEventListener);\n+\n@@ -455,0 +505,1 @@\n+        removeListener(spuriousThreadStartEventListener);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdi\/EventHandler.java","additions":53,"deletions":2,"binary":false,"changes":55,"status":"modified"}]}