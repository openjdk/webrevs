{"files":[{"patch":"@@ -67,1 +67,1 @@\n-    private record EventCount(long count, float time) {\n+    private record EventCount(long count, float cpuTime) {\n@@ -69,1 +69,1 @@\n-            return count \/ time;\n+            return count \/ cpuTime;\n@@ -73,2 +73,10 @@\n-    private static EventCount countEvents(int timeMs, String rate) throws Exception {\n-        try(Recording recording = new Recording()) {\n+    \/**\n+     * Counting the events that are emitted for a given throttle in a given time.\n+     * <p>\n+     * The result is wall-clock independent; it only records the CPU-time and the number of\n+     * emitted events. The result, therefore, does not depend on the load of the machine.\n+     * And because failed events are counted too, the result is not affected by the thread\n+     * doing other in-JVM work (like garbage collection).\n+     *\/\n+    private static EventCount countEvents(int timeMs, String throttle) throws Exception {\n+        try (Recording recording = new Recording()) {\n@@ -76,1 +84,1 @@\n-                    .with(\"throttle\", rate);\n+                    .with(\"throttle\", throttle);\n@@ -95,2 +103,0 @@\n-            System.out.println(\"Event count: \" + eventCount + \", CPU time: \" + spendCPUTime \/ 1_000_000_000f + \"s\");\n-\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestCPUTimeSampleThrottling.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"}]}