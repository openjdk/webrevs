{"files":[{"patch":"@@ -985,1 +985,1 @@\n-  UTIL_ARG_WITH(NAME: signing-hook, TYPE: file,\n+  UTIL_ARG_WITH(NAME: signing-hook, TYPE: executable,\n@@ -987,1 +987,0 @@\n-      CHECKING_MSG: [for code signing hook],\n@@ -991,1 +990,1 @@\n-  AC_MSG_CHECKING([if signing hook is enabled])\n+  AC_MSG_CHECKING([for signing hook])\n@@ -994,1 +993,0 @@\n-    SIGNING_HOOK_ENABLED=true\n@@ -996,6 +994,4 @@\n-    AC_MSG_RESULT([yes])\n-   else\n-      SIGNING_HOOK_ENABLED=false\n-      AC_MSG_RESULT([no])\n-    fi\n-  AC_SUBST(SIGNING_HOOK_ENABLED)\n+    AC_MSG_RESULT([$SIGNING_HOOK])\n+  else\n+    AC_MSG_RESULT([none])\n+  fi\n","filename":"make\/autoconf\/jdk-options.m4","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -569,0 +569,8 @@\n+AC_DEFUN([UTIL_CHECK_TYPE_executable],\n+[\n+  # Check that the argument is an existing file that the user has execute access to.\n+  if (test ! -x \"$1\") || (test ! -f \"$1\") ; then\n+    FAILURE=\"File $1 does not exist or is not executable\"\n+  fi\n+])\n+\n@@ -651,1 +659,1 @@\n-#     \"directory\", \"literal\", \"multivalue\" or \"features\". Required.\n+#     \"executable\", \"directory\", \"literal\", \"multivalue\" or \"features\". Required.\n@@ -761,1 +769,1 @@\n-  [ if [[ ! \"$TEST_TYPE\" =~ ^(string|integer|file|directory|literal|multivalue|features)$ ]] ; then ]\n+  [ if [[ ! \"$TEST_TYPE\" =~ ^(string|integer|file|executable|directory|literal|multivalue|features)$ ]] ; then ]\n","filename":"make\/autoconf\/util.m4","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -232,12 +232,12 @@\n-  # Create a rule to call post-link signing hook\n-  $1_SIGNING_OUTPUT_PREFIX := $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_call_signing_hook\n-  $1_CALL_SIGNING_HOOK := $$($1_SIGNING_OUTPUT_PREFIX).log\n-\n-  $$($1_CALL_SIGNING_HOOK): $$($1_TARGET)\n-        ifeq ($(SIGNING_HOOK_ENABLED), true)\n-\t  $$(call LogInfo, Signing $$($1_BASENAME))\n-\t  $$(call ExecuteWithLog, $$($1_SIGNING_OUTPUT_PREFIX), \\\n-\t      $(FIXPATH) $(SIGNING_HOOK) $$($1_TARGET))\n-        endif\n-\n-  $1 += $$($1_CALL_SIGNING_HOOK)\n+  ifneq ($(SIGNING_HOOK), )\n+    # Create a rule to call post-link signing hook\n+    $1_SIGNING_OUTPUT_PREFIX := $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_call_signing_hook\n+    $1_CALL_SIGNING_HOOK := $$($1_SIGNING_OUTPUT_PREFIX).log\n+\n+    $$($1_CALL_SIGNING_HOOK): $$($1_TARGET)\n+\t    $$(call LogInfo, Signing $$($1_BASENAME))\n+\t    $$(call ExecuteWithLog, $$($1_SIGNING_OUTPUT_PREFIX), \\\n+\t        $(SIGNING_HOOK) $$($1_TARGET))\n+\n+    $1 += $$($1_CALL_SIGNING_HOOK)\n+  endif\n","filename":"make\/common\/NativeCompilation.gmk","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"}]}