{"files":[{"patch":"@@ -544,0 +544,7 @@\n+  \/\/ Keep this node as-is for now; we want Value() and\n+  \/\/ other optimizations checking for this node type to work\n+  if (phase->is_IterGVN() == nullptr) {\n+    phase->C->record_for_igvn(this);\n+    return nullptr;\n+  }\n+\n@@ -650,0 +657,7 @@\n+  \/\/ Keep this node as-is for now; we want Value() and\n+  \/\/ other optimizations checking for this node type to work\n+  if (phase->is_IterGVN() == nullptr) {\n+    phase->C->record_for_igvn(this);\n+    return nullptr;\n+  }\n+\n@@ -1097,0 +1111,7 @@\n+  \/\/ Keep this node as-is for now; we want Value() and\n+  \/\/ other optimizations checking for this node type to work\n+  if (phase->is_IterGVN() == nullptr) {\n+    phase->C->record_for_igvn(this);\n+    return nullptr;\n+  }\n+\n@@ -1392,0 +1413,7 @@\n+  \/\/ Keep this node as-is for now; we want Value() and\n+  \/\/ other optimizations checking for this node type to work\n+  if (phase->is_IterGVN() == nullptr) {\n+    phase->C->record_for_igvn(this);\n+    return nullptr;\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * @bug 8356813\n+ * @bug 8356813 8366815\n@@ -57,0 +57,2 @@\n+        \"positiveDivisor\", \"positiveDivisor2\",\n+        \"negativeDivisor\", \"negativeDivisor2\",\n@@ -82,0 +84,4 @@\n+        Asserts.assertEQ(x % POS_INT >= POS_INT, positiveDivisor(x));\n+        Asserts.assertEQ(x % POS_INT <= -POS_INT, positiveDivisor2(x));\n+        Asserts.assertEQ(x % NEG_INT <= NEG_INT, negativeDivisor(x));\n+        Asserts.assertEQ(x % NEG_INT > -(NEG_INT + 1), negativeDivisor2(x));\n@@ -140,0 +146,33 @@\n+    @Test\n+    @IR(failOn = {IRNode.MOD_I, IRNode.CMP_I, IRNode.AND_I, IRNode.RSHIFT_I})\n+    \/\/ The result is always smaller than the positive divisor.\n+    \/\/ Constant fold to false.\n+    public boolean positiveDivisor(int x) {\n+        return x % POS_INT >= POS_INT;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MOD_I, IRNode.CMP_I, IRNode.AND_I, IRNode.RSHIFT_I})\n+    \/\/ The result is always bigger than the negated positive divisor.\n+    \/\/ Constant fold to false.\n+    public boolean positiveDivisor2(int x) {\n+        return x % POS_INT <= -POS_INT;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MOD_I, IRNode.CMP_I, IRNode.AND_I, IRNode.RSHIFT_I})\n+    \/\/ The result is always smaller than the negated negative divisor with exception if MIN_VALUE.\n+    \/\/ Constant fold to false.\n+    public boolean negativeDivisor(int x) {\n+        \/\/ > with + 1 to avoid -MIN_VALUE == MIN_VALUE\n+        return x % NEG_INT > -(NEG_INT + 1);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MOD_I, IRNode.CMP_I, IRNode.AND_I, IRNode.RSHIFT_I})\n+    \/\/ The result is always bigger than the negative divisor.\n+    \/\/ Constant fold to false.\n+    public boolean negativeDivisor2(int x) {\n+        return x % NEG_INT <= NEG_INT;\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/ModINodeValueTests.java","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @bug 8356813\n+ * @bug 8356813 8366815\n@@ -56,0 +56,2 @@\n+        \"positiveDivisor\", \"positiveDivisor2\",\n+        \"negativeDivisor\", \"negativeDivisor2\",\n@@ -81,0 +83,4 @@\n+        Asserts.assertEQ(x % POS_LONG >= POS_LONG, positiveDivisor(x));\n+        Asserts.assertEQ(x % POS_LONG <= -POS_LONG, positiveDivisor2(x));\n+        Asserts.assertEQ(x % NEG_LONG <= NEG_LONG, negativeDivisor(x));\n+        Asserts.assertEQ(x % NEG_LONG > -(NEG_LONG + 1), negativeDivisor2(x));\n@@ -139,0 +145,33 @@\n+    @Test\n+    @IR(failOn = {IRNode.MOD_L, IRNode.CMP_L, IRNode.AND_L, IRNode.RSHIFT_L})\n+    \/\/ The result is always smaller than the positive divisor.\n+    \/\/ Constant fold to false.\n+    public boolean positiveDivisor(long x) {\n+        return x % POS_LONG >= POS_LONG;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MOD_L, IRNode.CMP_L, IRNode.AND_L, IRNode.RSHIFT_L})\n+    \/\/ The result is always bigger than the negated positive divisor.\n+    \/\/ Constant fold to false.\n+    public boolean positiveDivisor2(long x) {\n+        return x % POS_LONG <= -POS_LONG;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MOD_L, IRNode.CMP_L, IRNode.AND_L, IRNode.RSHIFT_L})\n+    \/\/ The result is always smaller than the negated negative divisor with exception if MIN_VALUE.\n+    \/\/ Constant fold to false.\n+    public boolean negativeDivisor(long x) {\n+        \/\/ > with + 1 to avoid -MIN_VALUE == MIN_VALUE\n+        return x % NEG_LONG > -(NEG_LONG + 1);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MOD_L, IRNode.CMP_L, IRNode.AND_L, IRNode.RSHIFT_L})\n+    \/\/ The result is always bigger than the negative divisor.\n+    \/\/ Constant fold to false.\n+    public boolean negativeDivisor2(long x) {\n+        return x % NEG_LONG <= NEG_LONG;\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/ModLNodeValueTests.java","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"}]}