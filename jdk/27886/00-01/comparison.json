{"files":[{"patch":"@@ -544,2 +544,12 @@\n-  \/\/ Keep this node as-is for now; we want Value() and\n-  \/\/ other optimizations checking for this node type to work\n+  \/\/ Keep this node as-is initially; we want Value() and\n+  \/\/ other optimizations checking for this node type to work.\n+  \/\/ Consider the following expression:\n+  \/\/  x \/ 100_000 >= 21_475, x in TypeInt::INT\n+  \/\/ This will always be false since max_jint \/ 100_000 == 21_474.\n+  \/\/ After transform_int_divide, we have a Sub node to round towards 0.\n+  \/\/ That means we subtract -1 if the dividend is negative, and 0 otherwise.\n+  \/\/ As the Sub node is not aware of representing a division, it overapproximates\n+  \/\/ [-21_475, 21_474] - [-1, 0] = [-21_475, 21_475], which prevents constant folding.\n+  \/\/\n+  \/\/ Less precise comparisons still work after transform_int_divide, e.g.,\n+  \/\/ comparing with >= 21_476 does not conflict with the off-by-one overapproximation.\n@@ -657,2 +667,3 @@\n-  \/\/ Keep this node as-is for now; we want Value() and\n-  \/\/ other optimizations checking for this node type to work\n+  \/\/ Keep this node as-is initially; we want Value() and\n+  \/\/ other optimizations checking for this node type to work.\n+  \/\/ See DivINode::Ideal for an explanation.\n@@ -1111,2 +1122,7 @@\n-  \/\/ Keep this node as-is for now; we want Value() and\n-  \/\/ other optimizations checking for this node type to work\n+  \/\/ Keep this node as-is initially; we want Value() and\n+  \/\/ other optimizations checking for this node type to work.\n+  \/\/ Consider the following expression:\n+  \/\/  x % 2, x in TypeInt::INT\n+  \/\/ With ModINode::Value, we can trivially tell the resulting range is [-1,1].\n+  \/\/ After idealizing, we have a subtraction from x, which means without\n+  \/\/ recognizing that as a modulo operation, we end up with a range of TypeInt::INT.\n@@ -1413,2 +1429,3 @@\n-  \/\/ Keep this node as-is for now; we want Value() and\n-  \/\/ other optimizations checking for this node type to work\n+  \/\/ Keep this node as-is initially; we want Value() and\n+  \/\/ other optimizations checking for this node type to work.\n+  \/\/ See ModINode::Ideal for an explanation.\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":25,"deletions":8,"binary":false,"changes":33,"status":"modified"}]}