{"files":[{"patch":"@@ -372,1 +372,1 @@\n-static bool has_annotation(const InstanceKlass* ik, const Symbol* annotation_type, bool& value) {\n+static bool has_annotation(const InstanceKlass* ik, const Symbol* annotation_type, bool default_value, bool& value) {\n@@ -388,0 +388,6 @@\n+      if (!element_iterator.has_next()) {\n+        \/\/ Default values are not stored in the annotation element, so if the\n+        \/\/ element-value pair is empty, return the default value.\n+        value = default_value;\n+        return true;\n+      }\n@@ -405,1 +411,1 @@\n-static bool annotation_value(const InstanceKlass* ik, const Symbol* annotation_type, bool& value) {\n+static bool annotation_value(const InstanceKlass* ik, const Symbol* annotation_type, bool default_value, bool& value) {\n@@ -409,1 +415,1 @@\n-  if (has_annotation(ik, annotation_type, value)) {\n+  if (has_annotation(ik, annotation_type, default_value, value)) {\n@@ -413,1 +419,1 @@\n-  return super != nullptr && JdkJfrEvent::is_a(super) ? annotation_value(super, annotation_type, value) : false;\n+  return super != nullptr && JdkJfrEvent::is_a(super) ? annotation_value(super, annotation_type, default_value, value) : false;\n@@ -472,1 +478,1 @@\n-  untypedEventHandler = !(annotation_value(ik, registered_symbol, value) || java_base_can_read_jdk_jfr());\n+  untypedEventHandler = !(annotation_value(ik, registered_symbol, true, value) || java_base_can_read_jdk_jfr());\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrEventClassTransformer.cpp","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.classfile.Attributes;\n@@ -66,0 +67,1 @@\n+    private static final String[] EMPTY_STRING_ARRAY = {};\n@@ -107,1 +109,1 @@\n-        String name = annotationValue(ANNOTATION_NAME, String.class);\n+        String name = annotationValue(ANNOTATION_NAME, String.class, null);\n@@ -112,1 +114,1 @@\n-        Boolean result = annotationValue(ANNOTATION_REGISTERED, Boolean.class);\n+        Boolean result = annotationValue(ANNOTATION_REGISTERED, Boolean.class, true);\n@@ -126,1 +128,1 @@\n-        Boolean result = annotationValue(ANNOTATION_ENABLED, Boolean.class);\n+        Boolean result = annotationValue(ANNOTATION_ENABLED, Boolean.class, true);\n@@ -204,1 +206,1 @@\n-        String[] value = annotationValue(ANNOTATION_REMOVE_FIELDS, String[].class);\n+        String[] value = annotationValue(ANNOTATION_REMOVE_FIELDS, String[].class, EMPTY_STRING_ARRAY);\n@@ -211,11 +213,5 @@\n-    private List<AnnotationValue> getAnnotationValues(ClassDesc classDesc) {\n-        List<AnnotationValue> list = new ArrayList<>();\n-        for (Attribute<?> attribute: classModel.attributes()) {\n-            if (attribute instanceof RuntimeVisibleAnnotationsAttribute rvaa) {\n-                for (Annotation a : rvaa.annotations()) {\n-                    if (a.classSymbol().equals(classDesc) && a.elements().size() == 1) {\n-                        AnnotationElement ae = a.elements().getFirst();\n-                        if (ae.name().equalsString(\"value\")) {\n-                            list.add(ae.value());\n-                        }\n-                    }\n+    private Annotation getFirstAnnotation(ClassDesc classDesc) {\n+        for (RuntimeVisibleAnnotationsAttribute attribute : classModel.findAttributes(Attributes.runtimeVisibleAnnotations())) {\n+            for (Annotation a : attribute.annotations()) {\n+                if (a.classSymbol().equals(classDesc)) {\n+                    return a;\n@@ -225,1 +221,1 @@\n-        return list;\n+        return null;\n@@ -230,19 +226,31 @@\n-    private <T> T annotationValue(ClassDesc classDesc, Class<T> type) {\n-        for (AnnotationValue a : getAnnotationValues(classDesc)) {\n-            if (a instanceof AnnotationValue.OfBoolean ofb && type.equals(Boolean.class)) {\n-                Boolean b = ofb.booleanValue();\n-                return (T) b;\n-            }\n-            if (a instanceof AnnotationValue.OfString ofs && type.equals(String.class)) {\n-                String s = ofs.stringValue();\n-                return (T) s;\n-            }\n-            if (a instanceof AnnotationValue.OfArray ofa && type.equals(String[].class)) {\n-                List<AnnotationValue> list = ofa.values();\n-                String[] array = new String[list.size()];\n-                int index = 0;\n-                for (AnnotationValue av : list) {\n-                    var avs = (AnnotationValue.OfString) av;\n-                    array[index++] = avs.stringValue();\n-                }\n-                return (T) array;\n+    private <T> T annotationValue(ClassDesc classDesc, Class<T> type, T defaultValue) {\n+        Annotation annotation = getFirstAnnotation(classDesc);\n+        if (annotation == null) {\n+            return null;\n+        }\n+        \/\/ Default values are not stored in the annotation element, so if the\n+        \/\/ element-value pair is empty, return the default value.\n+        if (annotation.elements().isEmpty()) {\n+            return defaultValue;\n+        }\n+\n+        AnnotationElement ae = annotation.elements().getFirst();\n+        if (!ae.name().equalsString(\"value\")) {\n+            return null;\n+        }\n+        AnnotationValue a = ae.value();\n+        if (a instanceof AnnotationValue.OfBoolean ofb && type.equals(Boolean.class)) {\n+            Boolean b = ofb.booleanValue();\n+            return (T) b;\n+        }\n+        if (a instanceof AnnotationValue.OfString ofs && type.equals(String.class)) {\n+            String s = ofs.stringValue();\n+            return (T) s;\n+        }\n+        if (a instanceof AnnotationValue.OfArray ofa && type.equals(String[].class)) {\n+            List<AnnotationValue> list = ofa.values();\n+            String[] array = new String[list.size()];\n+            int index = 0;\n+            for (AnnotationValue av : list) {\n+                var avs = (AnnotationValue.OfString) av;\n+                array[index++] = avs.stringValue();\n@@ -250,0 +258,1 @@\n+            return (T) array;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/ClassInspector.java","additions":44,"deletions":35,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.api.metadata.annotations;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import jdk.jfr.Enabled;\n+import jdk.jfr.Event;\n+import jdk.jfr.Recording;\n+import jdk.jfr.Registered;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.test.lib.jfr.Events;\n+\n+\/**\n+ * @test\n+ * @summary Tests that annotations can be overridden with the default value.\n+ * @requires vm.flagless\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @run main\/othervm jdk.jfr.api.metadata.annotations.TestOverrideWithDefaultValue\n+ *\/\n+public class TestOverrideWithDefaultValue {\n+\n+    @Enabled(false)\n+    static class Mammal extends Event {\n+    }\n+\n+    @Enabled\n+    static class Cat extends Mammal {\n+    }\n+\n+    @Registered(false)\n+    static class Animal extends Event {\n+    }\n+\n+    @Registered\n+    static class Dog extends Animal {\n+    }\n+\n+    public static void main(String[] args) throws IOException {\n+        testEnabled();\n+        testRegistered();\n+    }\n+\n+    private static void testEnabled() throws IOException {\n+        try (Recording r = new Recording()) {\n+            r.start();\n+            Cat cat = new Cat();\n+            cat.commit();\n+            List<RecordedEvent> events = Events.fromRecording(r);\n+            Events.hasEvents(events);\n+        }\n+    }\n+\n+    private static void testRegistered() throws IOException {\n+        try (Recording r = new Recording()) {\n+            r.start();\n+            Dog dog = new Dog();\n+            dog.commit();\n+            List<RecordedEvent> events = Events.fromRecording(r);\n+            Events.hasEvents(events);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/api\/metadata\/annotations\/TestOverrideWithDefaultValue.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"}]}