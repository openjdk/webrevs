{"files":[{"patch":"@@ -2166,1 +2166,13 @@\n-    case Op_XorV: {\n+    case Op_XorV:\n+    case Op_AddVB:\n+    case Op_AddVS:\n+    case Op_AddVI:\n+    case Op_AddVL:\n+    case Op_SubVB:\n+    case Op_SubVS:\n+    case Op_SubVI:\n+    case Op_SubVL:\n+    case Op_MulVB:\n+    case Op_MulVS:\n+    case Op_MulVI:\n+    case Op_MulVL: {\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -390,0 +390,120 @@\n+\/\/ vector-immediate add (unpredicated)\n+\n+instruct vadd_immI(vReg dst_src, immI5 con) %{\n+  match(Set dst_src (AddVB dst_src (Replicate con)));\n+  match(Set dst_src (AddVS dst_src (Replicate con)));\n+  match(Set dst_src (AddVI dst_src (Replicate con)));\n+  format %{ \"vadd_immI $dst_src, $dst_src, $con\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vadd_vi(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               $con$$constant);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vadd_immL(vReg dst_src, immL5 con) %{\n+  match(Set dst_src (AddVL dst_src (Replicate con)));\n+  format %{ \"vadd_immL $dst_src, $dst_src, $con\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vadd_vi(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               $con$$constant);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector-scalar add (unpredicated)\n+\n+instruct vadd_regI(vReg dst_src, iRegIorL2I src) %{\n+  match(Set dst_src (AddVB dst_src (Replicate src)));\n+  match(Set dst_src (AddVS dst_src (Replicate src)));\n+  match(Set dst_src (AddVI dst_src (Replicate src)));\n+  format %{ \"vadd_regI $dst_src, $dst_src, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vadd_vx(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               as_Register($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vadd_regL(vReg dst_src, iRegL src) %{\n+  match(Set dst_src (AddVL dst_src (Replicate src)));\n+  format %{ \"vadd_regL $dst_src, $dst_src, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vadd_vx(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               as_Register($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector-immediate add (predicated)\n+\n+instruct vadd_immI_masked(vReg dst_src, immI5 con, vRegMask_V0 v0) %{\n+  match(Set dst_src (AddVB (Binary dst_src (Replicate con)) v0));\n+  match(Set dst_src (AddVS (Binary dst_src (Replicate con)) v0));\n+  match(Set dst_src (AddVI (Binary dst_src (Replicate con)) v0));\n+  format %{ \"vadd_immI_masked $dst_src, $dst_src, $con\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vadd_vi(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               $con$$constant, Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vadd_immL_masked(vReg dst_src, immL5 con, vRegMask_V0 v0) %{\n+  match(Set dst_src (AddVL (Binary dst_src (Replicate con)) v0));\n+  format %{ \"vadd_immL_masked $dst_src, $dst_src, $con\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vadd_vi(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               $con$$constant, Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector-scalar add (predicated)\n+\n+instruct vadd_regI_masked(vReg dst_src, iRegIorL2I src, vRegMask_V0 v0) %{\n+  match(Set dst_src (AddVB (Binary dst_src (Replicate src)) v0));\n+  match(Set dst_src (AddVS (Binary dst_src (Replicate src)) v0));\n+  match(Set dst_src (AddVI (Binary dst_src (Replicate src)) v0));\n+  format %{ \"vadd_regI_masked $dst_src, $dst_src, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vadd_vx(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               as_Register($src$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vadd_regL_masked(vReg dst_src, iRegL src, vRegMask_V0 v0) %{\n+  match(Set dst_src (AddVL (Binary dst_src (Replicate src)) v0));\n+  format %{ \"vadd_regL_masked $dst_src, $dst_src, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vadd_vx(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               as_Register($src$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -454,0 +574,60 @@\n+\/\/ vector-scalar sub (unpredicated)\n+\n+instruct vsub_regI(vReg dst_src, iRegIorL2I src) %{\n+  match(Set dst_src (SubVB dst_src (Replicate src)));\n+  match(Set dst_src (SubVS dst_src (Replicate src)));\n+  match(Set dst_src (SubVI dst_src (Replicate src)));\n+  format %{ \"vsub_regI $dst_src, $dst_src, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vsub_vx(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               as_Register($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vsub_regL(vReg dst_src, iRegL src) %{\n+  match(Set dst_src (SubVL dst_src (Replicate src)));\n+  format %{ \"vsub_regL $dst_src, $dst_src, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vsub_vx(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               as_Register($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector-scalar sub (predicated)\n+\n+instruct vsub_regI_masked(vReg dst_src, iRegIorL2I src, vRegMask_V0 v0) %{\n+  match(Set dst_src (SubVB (Binary dst_src (Replicate src)) v0));\n+  match(Set dst_src (SubVS (Binary dst_src (Replicate src)) v0));\n+  match(Set dst_src (SubVI (Binary dst_src (Replicate src)) v0));\n+  format %{ \"vsub_regI_masked $dst_src, $dst_src, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vsub_vx(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               as_Register($src$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vsub_regL_masked(vReg dst_src, iRegL src, vRegMask_V0 v0) %{\n+  match(Set dst_src (SubVL (Binary dst_src (Replicate src)) v0));\n+  format %{ \"vsub_regL_masked $dst_src, $dst_src, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vsub_vx(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               as_Register($src$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -1470,0 +1650,60 @@\n+\/\/ vector-scalar mul (unpredicated)\n+\n+instruct vmul_regI(vReg dst_src, iRegIorL2I src) %{\n+  match(Set dst_src (MulVB dst_src (Replicate src)));\n+  match(Set dst_src (MulVS dst_src (Replicate src)));\n+  match(Set dst_src (MulVI dst_src (Replicate src)));\n+  format %{ \"vmul_regI $dst_src, $dst_src, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vmul_vx(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               as_Register($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vmul_regL(vReg dst_src, iRegL src) %{\n+  match(Set dst_src (MulVL dst_src (Replicate src)));\n+  format %{ \"vmul_regL $dst_src, $dst_src, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vmul_vx(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               as_Register($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector-scalar mul (predicated)\n+\n+instruct vmul_regI_masked(vReg dst_src, iRegIorL2I src, vRegMask_V0 v0) %{\n+  match(Set dst_src (MulVB (Binary dst_src (Replicate src)) v0));\n+  match(Set dst_src (MulVS (Binary dst_src (Replicate src)) v0));\n+  match(Set dst_src (MulVI (Binary dst_src (Replicate src)) v0));\n+  format %{ \"vmul_regI_masked $dst_src, $dst_src, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vmul_vx(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               as_Register($src$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vmul_regL_masked(vReg dst_src, iRegL src, vRegMask_V0 v0) %{\n+  match(Set dst_src (MulVL (Binary dst_src (Replicate src)) v0));\n+  format %{ \"vmul_regL_masked $dst_src, $dst_src, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vmul_vx(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               as_Register($src$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":240,"deletions":0,"binary":false,"changes":240,"status":"modified"}]}