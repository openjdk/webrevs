{"files":[{"patch":"@@ -372,3 +372,0 @@\n-static jint SIZE_TABLE[] = { 9, 99, 999, 9999, 99999, 999999, 9999999,\n-                            99999999, 999999999, 0x7fffffff };\n-\n@@ -1166,0 +1163,1 @@\n+\/\/ Mirror of Integer.stringSize, return the count of digits in integer,\n@@ -1170,7 +1168,3 @@\n-    jint count = 1;\n-    if (arg_val < 0) {\n-      \/\/ Special case for min_jint - it can't be negated.\n-      if (arg_val == min_jint) {\n-        return __ intcon(11);\n-      }\n-\n+    jint d = 1;\n+    if (arg_val >= 0) {\n+      d = 0;\n@@ -1178,1 +1172,0 @@\n-      count++;\n@@ -1180,4 +1173,4 @@\n-    for (int i = 0; i < (int)(sizeof(SIZE_TABLE) \/ sizeof(SIZE_TABLE[0])); i++) {\n-      if (arg_val <= SIZE_TABLE[i]) {\n-        count += i;\n-        break;\n+    jint p = -10;\n+    for (int i = 1; i < 10; i++) {\n+      if (arg_val > p) {\n+        return __ intcon(i + d);\n@@ -1185,0 +1178,1 @@\n+      p = 10 * p;\n@@ -1186,1 +1180,1 @@\n-    return __ intcon(count);\n+    return __ intcon(10 + d);\n@@ -1189,0 +1183,29 @@\n+  \/\/ int d = 1;\n+  \/\/ if (x >= 0) {\n+  \/\/     d = 0;\n+  \/\/     x = -x;\n+  \/\/ }\n+  RegionNode* sign_merge = new RegionNode(3);\n+  kit.gvn().set_type(sign_merge, Type::CONTROL);\n+  Node* digit_cnt = new PhiNode(sign_merge, TypeInt::INT);\n+  kit.gvn().set_type(digit_cnt, TypeInt::INT);\n+  Node* val = new PhiNode(sign_merge, TypeInt::INT);\n+  kit.gvn().set_type(val, TypeInt::INT);\n+\n+  IfNode* iff = kit.create_and_map_if(kit.control(),\n+                                      __ Bool(__ CmpI(arg, __ intcon(0)), BoolTest::ge),\n+                                      PROB_FAIR, COUNT_UNKNOWN);\n+  sign_merge->init_req(1, __ IfTrue(iff));\n+  sign_merge->init_req(2, __ IfFalse(iff));\n+  digit_cnt->init_req(1, __ intcon(0));\n+  digit_cnt->init_req(2, __ intcon(1));\n+  val->init_req(1, __ SubI(__ intcon(0), arg));\n+  val->init_req(2, arg);\n+  kit.set_control(sign_merge);\n+\n+  \/\/ int p = -10;\n+  \/\/ for (int i = 1; i < 10; i++) {\n+  \/\/     if (x > p)\n+  \/\/         return i + d;\n+  \/\/     p = 10 * p;\n+  \/\/ }\n@@ -1193,78 +1216,0 @@\n-  Node* final_mem = new PhiNode(final_merge, Type::MEMORY, TypePtr::BOTTOM);\n-  kit.gvn().set_type(final_mem, Type::MEMORY);\n-  Node* final_io = new PhiNode(final_merge, Type::ABIO);\n-  kit.gvn().set_type(final_io, Type::ABIO);\n-\n-  IfNode* iff = kit.create_and_map_if(kit.control(),\n-                                      __ Bool(__ CmpI(arg, __ intcon(0x80000000)), BoolTest::ne),\n-                                      PROB_FAIR, COUNT_UNKNOWN);\n-  Node* is_min = __ IfFalse(iff);\n-  final_merge->init_req(1, is_min);\n-  final_size->init_req(1, __ intcon(11));\n-  final_mem->init_req(1, kit.merged_memory());\n-  final_io->init_req(1, kit.i_o());\n-\n-  kit.set_control(__ IfTrue(iff));\n-  if (kit.stopped()) {\n-    final_merge->init_req(2, C->top());\n-    final_size->init_req(2, C->top());\n-    final_mem->init_req(2, C->top());\n-    final_io->init_req(2, C->top());\n-  } else {\n-    \/\/ int size = (i < 0) ? stringSize(-i) + 1 : stringSize(i);\n-    RegionNode *r = new RegionNode(3);\n-    kit.gvn().set_type(r, Type::CONTROL);\n-    Node *phi = new PhiNode(r, TypeInt::INT);\n-    kit.gvn().set_type(phi, TypeInt::INT);\n-    Node *size = new PhiNode(r, TypeInt::INT);\n-    kit.gvn().set_type(size, TypeInt::INT);\n-    Node* chk = __ CmpI(arg, __ intcon(0));\n-    Node* p = __ Bool(chk, BoolTest::lt);\n-    IfNode* iff = kit.create_and_map_if(kit.control(), p, PROB_FAIR, COUNT_UNKNOWN);\n-    Node* lessthan = __ IfTrue(iff);\n-    Node* greaterequal = __ IfFalse(iff);\n-    r->init_req(1, lessthan);\n-    phi->init_req(1, __ SubI(__ intcon(0), arg));\n-    size->init_req(1, __ intcon(1));\n-    r->init_req(2, greaterequal);\n-    phi->init_req(2, arg);\n-    size->init_req(2, __ intcon(0));\n-    kit.set_control(r);\n-    C->record_for_igvn(r);\n-    C->record_for_igvn(phi);\n-    C->record_for_igvn(size);\n-\n-    \/\/ int[] sizeTable = new int[10];\n-    \/\/ sizeTable[0] = 9;\n-    \/\/ sizeTable[1] = 99;\n-    \/\/ ...\n-    \/\/ sizeTable[9] = Integer.MAX_VALUE\n-    Node* sizeTable = NULL;\n-    {\n-      PreserveReexecuteState preexces(&kit);\n-      kit.jvms()->set_should_reexecute(true);\n-      Node* array_klass = __ makecon(TypeKlassPtr::make(ciTypeArrayKlass::make(T_INT)));\n-      sizeTable = kit.new_array(array_klass, __ intcon(10), 1);\n-    }\n-    for (int i = 0; i < 10; i++) {\n-      Node* elem = kit.array_element_address(sizeTable, __ intcon(i), T_INT);\n-      __ store_to_memory(kit.control(), elem, __ intcon(SIZE_TABLE[i]), T_INT,\n-                        TypeAryPtr::INTS, MemNode::unordered);\n-    }\n-\n-    \/\/ for (int i=0; ; i++)\n-    \/\/   if (x <= sizeTable[i])\n-    \/\/     return i+1;\n-\n-    \/\/ Add loop predicate first.\n-    kit.add_empty_predicates();\n-    C->set_has_loops(true);\n-\n-    RegionNode *loop = new RegionNode(3);\n-    loop->init_req(1, kit.control());\n-    kit.gvn().set_type(loop, Type::CONTROL);\n-\n-    Node *index = new PhiNode(loop, TypeInt::INT);\n-    index->init_req(1, __ intcon(0));\n-    kit.gvn().set_type(index, TypeInt::INT);\n-    kit.set_control(loop);\n@@ -1272,20 +1217,2 @@\n-    Node* value = kit.load_array_element(sizeTable, index, TypeAryPtr::INTS, \/* set_ctrl *\/ false);\n-    C->record_for_igvn(value);\n-    Node* limit = __ CmpI(phi, value);\n-    Node* limitb = __ Bool(limit, BoolTest::le);\n-    IfNode* iff2 = kit.create_and_map_if(kit.control(), limitb, PROB_MIN, COUNT_UNKNOWN);\n-    Node* lessEqual = __ IfTrue(iff2);\n-    Node* greater = __ IfFalse(iff2);\n-\n-    loop->init_req(2, greater);\n-    index->init_req(2, __ AddI(index, __ intcon(1)));\n-\n-    kit.set_control(lessEqual);\n-    C->record_for_igvn(loop);\n-    C->record_for_igvn(index);\n-\n-    final_merge->init_req(2, kit.control());\n-    final_size->init_req(2, __ AddI(__ AddI(index, size), __ intcon(1)));\n-    final_mem->init_req(2, kit.reset_memory());\n-    final_io->init_req(2, kit.i_o());\n-  }\n+  kit.add_empty_predicates();\n+  C->set_has_loops(true);\n@@ -1293,0 +1220,32 @@\n+  RegionNode* loop = new RegionNode(3);\n+  kit.gvn().set_type(loop, Type::CONTROL);\n+  Node* index = new PhiNode(loop, TypeInt::INT);\n+  kit.gvn().set_type(index, TypeInt::INT);\n+  Node* temp = new PhiNode(loop, TypeInt::INT);\n+  kit.gvn().set_type(temp, TypeInt::INT);\n+\n+  loop->init_req(1, kit.control());\n+  index->init_req(1, __ intcon(1));\n+  temp->init_req(1, __ intcon(-10));\n+  kit.set_control(loop);\n+\n+  Node* limit = __ CmpI(index, __ intcon(10));\n+  Node* limitb = __ Bool(limit, BoolTest::lt);\n+  IfNode* iff2 = kit.create_and_map_if(kit.control(), limitb, PROB_MIN, COUNT_UNKNOWN);\n+  Node* limit_less = __ IfTrue(iff2);\n+  kit.set_control(limit_less);\n+\n+  Node* cmp = __ CmpI(val, temp);\n+  Node* cmpb = __ Bool(cmp, BoolTest::gt);\n+  IfNode* iff3 = kit.create_and_map_if(kit.control(), cmpb, PROB_MIN, COUNT_UNKNOWN);\n+  Node* cmp_le = __ IfFalse(iff3);\n+  kit.set_control(cmp_le);\n+\n+  loop->init_req(2, kit.control());\n+  index->init_req(2, __ AddI(index, __ intcon(1)));\n+  temp->init_req(2, __ MulI(temp, __ intcon(10)));\n+\n+  final_merge->init_req(1, __ IfFalse(iff2));\n+  final_merge->init_req(2, __ IfTrue(iff3));\n+  final_size->init_req(1, __ AddI(digit_cnt, __ intcon(10)));\n+  final_size->init_req(2, __ AddI(digit_cnt, index));\n@@ -1294,2 +1253,0 @@\n-  kit.set_all_memory(final_mem);\n-  kit.set_i_o(final_io);\n@@ -1297,0 +1254,3 @@\n+  C->record_for_igvn(sign_merge);\n+  C->record_for_igvn(digit_cnt);\n+  C->record_for_igvn(val);\n@@ -1299,2 +1259,3 @@\n-  C->record_for_igvn(final_mem);\n-  C->record_for_igvn(final_io);\n+  C->record_for_igvn(loop);\n+  C->record_for_igvn(index);\n+  C->record_for_igvn(temp);\n@@ -1809,4 +1770,0 @@\n-  Node* overflow_mem = new PhiNode(overflow, Type::MEMORY, TypePtr::BOTTOM);\n-  kit.gvn().set_type(overflow_mem, Type::MEMORY);\n-  Node* overflow_io = new PhiNode(overflow, Type::ABIO);\n-  kit.gvn().set_type(overflow_io, Type::ABIO);\n@@ -1985,2 +1942,0 @@\n-      overflow_mem->set_req(argi, kit.merged_memory());\n-      overflow_io->set_req(argi, kit.i_o());\n@@ -1994,2 +1949,0 @@\n-    kit.set_all_memory(overflow_mem);\n-    kit.set_i_o(overflow_io);\n","filename":"src\/hotspot\/share\/opto\/stringopts.cpp","additions":79,"deletions":126,"binary":false,"changes":205,"status":"modified"}]}