{"files":[{"patch":"@@ -1355,87 +1355,0 @@\n-\/\/ Field allocation types. Used for computing field offsets.\n-\n-enum FieldAllocationType {\n-  STATIC_OOP,           \/\/ Oops\n-  STATIC_BYTE,          \/\/ Boolean, Byte, char\n-  STATIC_SHORT,         \/\/ shorts\n-  STATIC_WORD,          \/\/ ints\n-  STATIC_DOUBLE,        \/\/ aligned long or double\n-  NONSTATIC_OOP,\n-  NONSTATIC_BYTE,\n-  NONSTATIC_SHORT,\n-  NONSTATIC_WORD,\n-  NONSTATIC_DOUBLE,\n-  MAX_FIELD_ALLOCATION_TYPE,\n-  BAD_ALLOCATION_TYPE = -1\n-};\n-\n-static FieldAllocationType _basic_type_to_atype[2 * (T_CONFLICT + 1)] = {\n-  BAD_ALLOCATION_TYPE, \/\/ 0\n-  BAD_ALLOCATION_TYPE, \/\/ 1\n-  BAD_ALLOCATION_TYPE, \/\/ 2\n-  BAD_ALLOCATION_TYPE, \/\/ 3\n-  NONSTATIC_BYTE ,     \/\/ T_BOOLEAN     =  4,\n-  NONSTATIC_SHORT,     \/\/ T_CHAR        =  5,\n-  NONSTATIC_WORD,      \/\/ T_FLOAT       =  6,\n-  NONSTATIC_DOUBLE,    \/\/ T_DOUBLE      =  7,\n-  NONSTATIC_BYTE,      \/\/ T_BYTE        =  8,\n-  NONSTATIC_SHORT,     \/\/ T_SHORT       =  9,\n-  NONSTATIC_WORD,      \/\/ T_INT         = 10,\n-  NONSTATIC_DOUBLE,    \/\/ T_LONG        = 11,\n-  NONSTATIC_OOP,       \/\/ T_OBJECT      = 12,\n-  NONSTATIC_OOP,       \/\/ T_ARRAY       = 13,\n-  BAD_ALLOCATION_TYPE, \/\/ T_VOID        = 14,\n-  BAD_ALLOCATION_TYPE, \/\/ T_ADDRESS     = 15,\n-  BAD_ALLOCATION_TYPE, \/\/ T_NARROWOOP   = 16,\n-  BAD_ALLOCATION_TYPE, \/\/ T_METADATA    = 17,\n-  BAD_ALLOCATION_TYPE, \/\/ T_NARROWKLASS = 18,\n-  BAD_ALLOCATION_TYPE, \/\/ T_CONFLICT    = 19,\n-  BAD_ALLOCATION_TYPE, \/\/ 0\n-  BAD_ALLOCATION_TYPE, \/\/ 1\n-  BAD_ALLOCATION_TYPE, \/\/ 2\n-  BAD_ALLOCATION_TYPE, \/\/ 3\n-  STATIC_BYTE ,        \/\/ T_BOOLEAN     =  4,\n-  STATIC_SHORT,        \/\/ T_CHAR        =  5,\n-  STATIC_WORD,         \/\/ T_FLOAT       =  6,\n-  STATIC_DOUBLE,       \/\/ T_DOUBLE      =  7,\n-  STATIC_BYTE,         \/\/ T_BYTE        =  8,\n-  STATIC_SHORT,        \/\/ T_SHORT       =  9,\n-  STATIC_WORD,         \/\/ T_INT         = 10,\n-  STATIC_DOUBLE,       \/\/ T_LONG        = 11,\n-  STATIC_OOP,          \/\/ T_OBJECT      = 12,\n-  STATIC_OOP,          \/\/ T_ARRAY       = 13,\n-  BAD_ALLOCATION_TYPE, \/\/ T_VOID        = 14,\n-  BAD_ALLOCATION_TYPE, \/\/ T_ADDRESS     = 15,\n-  BAD_ALLOCATION_TYPE, \/\/ T_NARROWOOP   = 16,\n-  BAD_ALLOCATION_TYPE, \/\/ T_METADATA    = 17,\n-  BAD_ALLOCATION_TYPE, \/\/ T_NARROWKLASS = 18,\n-  BAD_ALLOCATION_TYPE, \/\/ T_CONFLICT    = 19,\n-};\n-\n-static FieldAllocationType basic_type_to_atype(bool is_static, BasicType type) {\n-  assert(type >= T_BOOLEAN && type < T_VOID, \"only allowable values\");\n-  FieldAllocationType result = _basic_type_to_atype[type + (is_static ? (T_CONFLICT + 1) : 0)];\n-  assert(result != BAD_ALLOCATION_TYPE, \"bad type\");\n-  return result;\n-}\n-\n-class ClassFileParser::FieldAllocationCount : public ResourceObj {\n- public:\n-  u2 count[MAX_FIELD_ALLOCATION_TYPE];\n-\n-  FieldAllocationCount() {\n-    for (int i = 0; i < MAX_FIELD_ALLOCATION_TYPE; i++) {\n-      count[i] = 0;\n-    }\n-  }\n-\n-  void update(bool is_static, BasicType type) {\n-    FieldAllocationType atype = basic_type_to_atype(is_static, type);\n-    if (atype != BAD_ALLOCATION_TYPE) {\n-      \/\/ Make sure there is no overflow with injected fields.\n-      assert(count[atype] < 0xFFFF, \"More than 65535 fields\");\n-      count[atype]++;\n-    }\n-  }\n-};\n-\n@@ -1446,1 +1359,0 @@\n-                                   FieldAllocationCount* const fac,\n@@ -1453,1 +1365,0 @@\n-  assert(fac != nullptr, \"invariant\");\n@@ -1547,2 +1458,4 @@\n-    \/\/ Update FieldAllocationCount for this kind of field\n-    fac->update(is_static, type);\n+    \/\/ Update number of static oop fields.\n+    if (is_static && is_reference_type(type)) {\n+      _static_oop_count++;\n+    }\n@@ -1593,4 +1506,0 @@\n-\n-      \/\/ Update FieldAllocationCount for this kind of field\n-      const BasicType type = Signature::basic_type(injected[n].signature());\n-      fac->update(false, type);\n@@ -5119,2 +5028,1 @@\n-  assert(_fac != nullptr, \"invariant\");\n-  ik->set_static_oop_field_count(_fac->count[STATIC_OOP]);\n+  ik->set_static_oop_field_count(_static_oop_count);\n@@ -5364,0 +5272,1 @@\n+  _static_oop_count(0),\n@@ -5384,1 +5293,0 @@\n-  _fac(nullptr),\n@@ -5710,1 +5618,0 @@\n-  _fac = new FieldAllocationCount();\n@@ -5713,1 +5620,0 @@\n-               _fac,\n@@ -5871,1 +5777,0 @@\n-  assert(_fac != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":6,"deletions":101,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -89,1 +89,0 @@\n-  class FieldAllocationCount;\n@@ -119,0 +118,1 @@\n+  unsigned int _static_oop_count;\n@@ -144,1 +144,0 @@\n-  FieldAllocationCount* _fac;\n@@ -263,1 +262,0 @@\n-                    FieldAllocationCount* const fac,\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}