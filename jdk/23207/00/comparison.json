{"files":[{"patch":"@@ -610,1 +610,0 @@\n-  void set_name(const char* name)           { _name = name; }\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -100,1 +100,0 @@\n-  friend class CodeCacheDumper;\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -93,1 +93,0 @@\n-  friend class CodeCacheLoader;\n","filename":"src\/hotspot\/share\/code\/codeCache.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-  friend class CodeCacheDumper; \/\/ possible extension [do not remove]\n","filename":"src\/hotspot\/share\/interpreter\/interpreter.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1434,32 +1434,0 @@\n-void SignatureHandlerLibrary::add(uint64_t fingerprint, address handler) {\n-  int handler_index = -1;\n-  \/\/ use customized signature handler\n-  MutexLocker mu(SignatureHandlerLibrary_lock);\n-  \/\/ make sure data structure is initialized\n-  initialize();\n-  fingerprint = InterpreterRuntime::normalize_fast_native_fingerprint(fingerprint);\n-  handler_index = _fingerprints->find(fingerprint);\n-  \/\/ create handler if necessary\n-  if (handler_index < 0) {\n-    if (PrintSignatureHandlers && (handler != Interpreter::slow_signature_handler())) {\n-      tty->cr();\n-      tty->print_cr(\"argument handler #%d at \" PTR_FORMAT \" for fingerprint \" UINT64_FORMAT,\n-                    _handlers->length(),\n-                    p2i(handler),\n-                    fingerprint);\n-    }\n-    _fingerprints->append(fingerprint);\n-    _handlers->append(handler);\n-  } else {\n-    if (PrintSignatureHandlers) {\n-      tty->cr();\n-      tty->print_cr(\"duplicate argument handler #%d for fingerprint \" UINT64_FORMAT \"(old: \" PTR_FORMAT \", new : \" PTR_FORMAT \")\",\n-                    _handlers->length(),\n-                    fingerprint,\n-                    p2i(_handlers->at(handler_index)),\n-                    p2i(handler));\n-    }\n-  }\n-}\n-\n-\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":0,"deletions":32,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -195,1 +195,0 @@\n-  static void add(uint64_t fingerprint, address handler);\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -91,1 +91,0 @@\n-  friend class CodeCacheExtensions;\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreter.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -247,1 +247,0 @@\n-  \/\/ (ExcutableCodeManager calls not needed to copy the entries)\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreterGenerator.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -154,1 +154,0 @@\n-  friend class CodeCacheExtensions;\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}