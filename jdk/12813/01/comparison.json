{"files":[{"patch":"@@ -54,0 +54,1 @@\n+  $(call info-file-item, \"JAVA_RUNTIME_VERSION\", \"$(VERSION_STRING)\")\n","filename":"make\/ReleaseFile.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,172 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8193660 8303476\n+ * @summary Check SOURCE line and JAVA_RUNTIME_VERSION in \"release\" file\n+ * @run main CheckReleaseFile\n+ *\/\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class CheckReleaseFile {\n+\n+    public static final String SRC_HASH_REGEXP = \":((hg)|(git)):[a-z0-9]*\\\\+?\";\n+\n+    private final boolean isOpenJDK;\n+    CheckReleaseFile(String dataFile, boolean isOpenJDK) {\n+        this.isOpenJDK = isOpenJDK;\n+        \/\/ Read data files\n+        readFile(dataFile);\n+    }\n+\n+    private void readFile(String fileName) {\n+        String fishForSOURCE = null;\n+        String implementor = null;\n+        String runtimeVersion = null;\n+\n+        File file = new File(fileName);\n+\n+        \/\/ open the stream to read in for Entries\n+        try (BufferedReader buffRead =\n+            new BufferedReader(new FileReader(fileName))) {\n+\n+            \/\/ this is the string read\n+            String readIn;\n+\n+            \/\/ let's read some strings!\n+            while ((readIn = buffRead.readLine()) != null) {\n+                readIn = readIn.trim();\n+\n+                \/\/ throw out blank lines\n+                if (readIn.length() == 0)\n+                    continue;\n+\n+                \/\/ grab SOURCE line\n+                if (readIn.startsWith(\"SOURCE=\")) {\n+                    fishForSOURCE = readIn;\n+                    continue;\n+                }\n+\n+                \/\/ grab IMPLEMENTOR line\n+                if (readIn.startsWith(\"IMPLEMENTOR=\")) {\n+                    implementor = readIn;\n+                    continue;\n+                }\n+\n+                \/\/ grab JAVA_RUNTIME_VERSION line\n+                if (readIn.startsWith(\"JAVA_RUNTIME_VERSION=\")) {\n+                    runtimeVersion = readIn;\n+                    continue;\n+                }\n+            }\n+        } catch (FileNotFoundException fileExcept) {\n+            throw new RuntimeException(\"File \" + fileName +\n+                                       \" not found reading data!\", fileExcept);\n+        } catch (IOException ioExcept) {\n+            throw new RuntimeException(\"Unexpected problem reading data!\",\n+                                       ioExcept);\n+        }\n+\n+        \/\/ was SOURCE even found?\n+        if (fishForSOURCE == null) {\n+            throw new RuntimeException(\"SOURCE line was not found!\");\n+        }\n+\n+        \/\/ Check if implementor is Oracle\n+        boolean isOracle = (implementor != null) && implementor.contains(\"Oracle Corporation\");\n+        checkSource(fishForSOURCE, isOracle);\n+\n+        if (runtimeVersion == null) {\n+            throw new RuntimeException(\"JAVA_RUNTIME_VERSION line was not found!\");\n+        }\n+        String expected = \"JAVA_RUNTIME_VERSION=\\\"\" + Runtime.version() + \"\\\"\";\n+        if (!expected.equals(runtimeVersion)) {\n+            throw new RuntimeException(\"Mismatched runtime version: \" +\n+                    runtimeVersion + \" expected: \" + expected);\n+        }\n+    }\n+\n+    private void checkSource(String fishForSOURCE, boolean isOracle) {\n+\n+        System.out.println(\"The source string found: \" + fishForSOURCE);\n+\n+        \/\/ Extract the value of SOURCE=\n+        Pattern valuePattern = Pattern.compile(\"SOURCE=\\\"(.*)\\\"\");\n+        Matcher valueMatcher = valuePattern.matcher(fishForSOURCE);\n+        if (!valueMatcher.matches()) {\n+            throw new RuntimeException(\"SOURCE string has bad format, should be SOURCE=\\\"<value>\\\"\");\n+        }\n+        String valueString = valueMatcher.group(1);\n+\n+\n+        String[] values = valueString.split(\" \");\n+\n+        \/\/ First value MUST start with \".:\" regardless of Oracle or OpenJDK\n+        String rootRegexp = \"\\\\.\" + SRC_HASH_REGEXP;\n+        if (!values[0].matches(rootRegexp)) {\n+            throw new RuntimeException(\"The test failed, first element did not match regexp: \" + rootRegexp);\n+        }\n+\n+        \/\/ If it's an Oracle build, it can be either OpenJDK or OracleJDK. Other\n+        \/\/ builds may have any number of additional elements in any format.\n+        if (isOracle) {\n+            if (isOpenJDK) {\n+                if (values.length != 1) {\n+                    throw new RuntimeException(\"The test failed, wrong number of elements in SOURCE list.\" +\n+                            \" Should be 1 for Oracle built OpenJDK.\");\n+                }\n+            } else {\n+                if (values.length != 2) {\n+                    throw new RuntimeException(\"The test failed, wrong number of elements in SOURCE list.\" +\n+                            \" Should be 2 for OracleJDK.\");\n+                }\n+                \/\/ Second value MUST start with \"open:\" for OracleJDK\n+                String openRegexp = \"open\" + SRC_HASH_REGEXP;\n+                if (!values[1].matches(openRegexp)) {\n+                    throw new RuntimeException(\"The test failed, second element did not match regexp: \" + openRegexp);\n+                }\n+            }\n+        }\n+\n+        \/\/ Everything was fine\n+        System.out.println(\"The test passed!\");\n+    }\n+\n+    public static void main(String args[]) {\n+        String jdkPath = System.getProperty(\"test.jdk\");\n+        String runtime = System.getProperty(\"java.runtime.name\");\n+\n+        System.out.println(\"JDK Path : \" + jdkPath);\n+        System.out.println(\"Runtime Name : \" + runtime);\n+\n+        new CheckReleaseFile(jdkPath + \"\/release\", runtime.contains(\"OpenJDK\"));\n+    }\n+}\n","filename":"test\/jdk\/build\/releaseFile\/CheckReleaseFile.java","additions":172,"deletions":0,"binary":false,"changes":172,"status":"added"},{"patch":"@@ -1,149 +0,0 @@\n-\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8193660\n- * @summary Check SOURCE line in \"release\" file for closedjdk\n- * @run main CheckSource\n- *\/\n-\n-import java.io.BufferedReader;\n-import java.io.File;\n-import java.io.FileReader;\n-import java.io.FileNotFoundException;\n-import java.io.IOException;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-public class CheckSource {\n-\n-    public static final String SRC_HASH_REGEXP = \":((hg)|(git)):[a-z0-9]*\\\\+?\";\n-\n-    CheckSource(String dataFile, boolean isOpenJDK) {\n-        \/\/ Read data files\n-        readFile(dataFile, isOpenJDK);\n-    }\n-\n-    private void readFile(String fileName, boolean isOpenJDK) {\n-        String fishForSOURCE = null;\n-        String implementor = null;\n-\n-        File file = new File(fileName);\n-\n-        \/\/ open the stream to read in for Entries\n-        try (BufferedReader buffRead =\n-            new BufferedReader(new FileReader(fileName))) {\n-\n-            \/\/ this is the string read\n-            String readIn;\n-\n-            \/\/ let's read some strings!\n-            while ((readIn = buffRead.readLine()) != null) {\n-                readIn = readIn.trim();\n-\n-                \/\/ throw out blank lines\n-                if (readIn.length() == 0)\n-                    continue;\n-\n-                \/\/ grab SOURCE line\n-                if (readIn.startsWith(\"SOURCE=\")) {\n-                    fishForSOURCE = readIn;\n-                    continue;\n-                }\n-\n-                \/\/ grab IMPLEMENTOR line\n-                if (readIn.startsWith(\"IMPLEMENTOR=\")) {\n-                    implementor = readIn;\n-                    continue;\n-                }\n-            }\n-        } catch (FileNotFoundException fileExcept) {\n-            throw new RuntimeException(\"File \" + fileName +\n-                                       \" not found reading data!\", fileExcept);\n-        } catch (IOException ioExcept) {\n-            throw new RuntimeException(\"Unexpected problem reading data!\",\n-                                       ioExcept);\n-        }\n-\n-        \/\/ was SOURCE even found?\n-        if (fishForSOURCE == null) {\n-            throw new RuntimeException(\"SOURCE line was not found!\");\n-        }\n-        System.out.println(\"The source string found: \" + fishForSOURCE);\n-\n-        \/\/ Extract the value of SOURCE=\n-        Pattern valuePattern = Pattern.compile(\"SOURCE=\\\"(.*)\\\"\");\n-        Matcher valueMatcher = valuePattern.matcher(fishForSOURCE);\n-        if (!valueMatcher.matches()) {\n-            throw new RuntimeException(\"SOURCE string has bad format, should be SOURCE=\\\"<value>\\\"\");\n-        }\n-        String valueString = valueMatcher.group(1);\n-\n-        \/\/ Check if implementor is Oracle\n-        boolean isOracle = (implementor != null) && implementor.contains(\"Oracle Corporation\");\n-\n-        String[] values = valueString.split(\" \");\n-\n-        \/\/ First value MUST start with \".:\" regardless of Oracle or OpenJDK\n-        String rootRegexp = \"\\\\.\" + SRC_HASH_REGEXP;\n-        if (!values[0].matches(rootRegexp)) {\n-            throw new RuntimeException(\"The test failed, first element did not match regexp: \" + rootRegexp);\n-        }\n-\n-        \/\/ If it's an Oracle build, it can be either OpenJDK or OracleJDK. Other\n-        \/\/ builds may have any number of additional elements in any format.\n-        if (isOracle) {\n-            if (isOpenJDK) {\n-                if (values.length != 1) {\n-                    throw new RuntimeException(\"The test failed, wrong number of elements in SOURCE list.\" +\n-                            \" Should be 1 for Oracle built OpenJDK.\");\n-                }\n-            } else {\n-                if (values.length != 2) {\n-                    throw new RuntimeException(\"The test failed, wrong number of elements in SOURCE list.\" +\n-                            \" Should be 2 for OracleJDK.\");\n-                }\n-                \/\/ Second value MUST start with \"open:\" for OracleJDK\n-                String openRegexp = \"open\" + SRC_HASH_REGEXP;\n-                if (!values[1].matches(openRegexp)) {\n-                    throw new RuntimeException(\"The test failed, second element did not match regexp: \" + openRegexp);\n-                }\n-            }\n-        }\n-\n-        \/\/ Everything was fine\n-        System.out.println(\"The test passed!\");\n-    }\n-\n-    public static void main(String args[]) {\n-        String jdkPath = System.getProperty(\"test.jdk\");\n-        String runtime = System.getProperty(\"java.runtime.name\");\n-\n-        System.out.println(\"JDK Path : \" + jdkPath);\n-        System.out.println(\"Runtime Name : \" + runtime);\n-\n-        new CheckSource(jdkPath + \"\/release\", runtime.contains(\"OpenJDK\"));\n-    }\n-}\n","filename":"test\/jdk\/build\/releaseFile\/CheckSource.java","additions":0,"deletions":149,"binary":false,"changes":149,"status":"deleted"}]}