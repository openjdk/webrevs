{"files":[{"patch":"@@ -544,1 +544,1 @@\n-        return StringSupport.read(this, offset, length, charset);\n+        return StringSupport.read(this, offset, charset, length);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,6 +62,9 @@\n-    public static String read(AbstractMemorySegmentImpl segment, long offset, int len, Charset charset) {\n-        return switch (CharsetKind.of(charset)) {\n-            case SINGLE_BYTE -> readByte(segment, offset, len, charset);\n-            case DOUBLE_BYTE -> readShort(segment, offset, len, charset);\n-            case QUAD_BYTE -> readInt(segment, offset, len, charset);\n-        };\n+    public static String read(AbstractMemorySegmentImpl segment, long offset, Charset charset, int len) {\n+        final byte[] bytes = new byte[len];\n+        MemorySegment.copy(segment, JAVA_BYTE, offset, bytes, 0, len);\n+        try {\n+            return JAVA_LANG_ACCESS.uncheckedNewStringOrThrow(bytes, charset);\n+        } catch (CharacterCodingException _) {\n+            \/\/ use replacement characters for malformed input\n+            return new String(bytes, charset);\n+        }\n@@ -82,20 +85,1 @@\n-        final byte[] bytes = new byte[len];\n-        MemorySegment.copy(segment, JAVA_BYTE, offset, bytes, 0, len);\n-        try {\n-            return JAVA_LANG_ACCESS.uncheckedNewStringOrThrow(bytes, charset);\n-        } catch (CharacterCodingException _) {\n-            \/\/ use replacement characters for malformed input\n-            return new String(bytes, charset);\n-        }\n-    }\n-\n-    @ForceInline\n-    private static String readByte(AbstractMemorySegmentImpl segment, long offset, int len, Charset charset) {\n-        final byte[] bytes = new byte[len];\n-        MemorySegment.copy(segment, JAVA_BYTE, offset, bytes, 0, len);\n-        try {\n-            return JAVA_LANG_ACCESS.uncheckedNewStringOrThrow(bytes, charset);\n-        } catch (CharacterCodingException _) {\n-            \/\/ use replacement characters for malformed input\n-            return new String(bytes, charset);\n-        }\n+        return read(segment, offset, charset, len);\n@@ -113,20 +97,1 @@\n-        byte[] bytes = new byte[len];\n-        MemorySegment.copy(segment, JAVA_BYTE, offset, bytes, 0, len);\n-        try {\n-            return JAVA_LANG_ACCESS.uncheckedNewStringOrThrow(bytes, charset);\n-        } catch (CharacterCodingException _) {\n-          \/\/ use replacement characters for malformed input\n-          return new String(bytes, charset);\n-        }\n-    }\n-\n-    @ForceInline\n-    private static String readShort(AbstractMemorySegmentImpl segment, long offset, int len, Charset charset) {\n-        byte[] bytes = new byte[len];\n-        MemorySegment.copy(segment, JAVA_BYTE, offset, bytes, 0, len);\n-        try {\n-            return JAVA_LANG_ACCESS.uncheckedNewStringOrThrow(bytes, charset);\n-        } catch (CharacterCodingException _) {\n-          \/\/ use replacement characters for malformed input\n-          return new String(bytes, charset);\n-        }\n+        return read(segment, offset, charset, len);\n@@ -144,20 +109,1 @@\n-        byte[] bytes = new byte[len];\n-        MemorySegment.copy(segment, JAVA_BYTE, offset, bytes, 0, len);\n-        try {\n-            return JAVA_LANG_ACCESS.uncheckedNewStringOrThrow(bytes, charset);\n-        } catch (CharacterCodingException _) {\n-            \/\/ use replacement characters for malformed input\n-            return new String(bytes, charset);\n-        }\n-    }\n-\n-    @ForceInline\n-    private static String readInt(AbstractMemorySegmentImpl segment, long offset, int len, Charset charset) {\n-        byte[] bytes = new byte[len];\n-        MemorySegment.copy(segment, JAVA_BYTE, offset, bytes, 0, len);\n-        try {\n-            return JAVA_LANG_ACCESS.uncheckedNewStringOrThrow(bytes, charset);\n-        } catch (CharacterCodingException _) {\n-            \/\/ use replacement characters for malformed input\n-            return new String(bytes, charset);\n-        }\n+        return read(segment, offset, charset, len);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/StringSupport.java","additions":12,"deletions":66,"binary":false,"changes":78,"status":"modified"}]}