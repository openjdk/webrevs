{"files":[{"patch":"@@ -1299,6 +1299,1 @@\n-     * known byte length can be done like so:\n-     * {@snippet lang=java :\n-     *     byte[] bytes = new byte[length];\n-     *     MemorySegment.copy(segment, JAVA_BYTE, offset, bytes, 0, length);\n-     *     return new String(bytes, charset);\n-     * }\n+     * known byte length can be done using {@link #getString(long, Charset, int)}.\n@@ -1331,0 +1326,32 @@\n+    \/**\n+     * Reads a string using the given length from this segment at the given offset,\n+     * using the provided charset.\n+     * <p>\n+     * This method always replaces malformed-input and unmappable-character\n+     * sequences with this charset's default replacement string. The {@link\n+     * java.nio.charset.CharsetDecoder} class should be used when more control\n+     * over the decoding process is required.\n+     *\n+     * @param offset  offset in bytes (relative to this segment address) at which this\n+     *                access operation will occur\n+     * @param charset the charset used to {@linkplain Charset#newDecoder() decode} the\n+     *                string bytes\n+     * @param length  length to be used for string conversion, in code units for\n+     *                the provided charset\n+     * @return a Java string constructed from the bytes read from the given starting\n+     *         address reading the given length of characters\n+     * @throws IllegalArgumentException  if the size of the string is greater than the\n+     *         largest string supported by the platform\n+     * @throws IndexOutOfBoundsException if {@code offset < 0}\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - (length * N)},\n+     *         where {@code N} is the size, in bytes, of a code unit in the provided charset\n+     * @throws IllegalStateException if the {@linkplain #scope() scope} associated with\n+     *         this segment is not {@linkplain Scope#isAlive() alive}\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     *         such that {@code isAccessibleBy(T) == false}\n+     * @throws IllegalArgumentException if {@code charset} is not a\n+     *         {@linkplain StandardCharsets standard charset}\n+     * @throws IllegalArgumentException if {@code length < 0}\n+     *\/\n+    String getString(long offset, Charset charset, int length);\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":33,"deletions":6,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-        int termCharSize = StringSupport.CharsetKind.of(charset).terminatorCharSize();\n+        int termCharSize = StringSupport.CharsetKind.of(charset).codeUnitSize();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -538,0 +538,9 @@\n+    @Override\n+    public String getString(long offset, Charset charset, int length) {\n+        if (length < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+        Objects.requireNonNull(charset);\n+        return StringSupport.read(this, offset, charset, length);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -61,0 +61,18 @@\n+    @ForceInline\n+    public static String read(AbstractMemorySegmentImpl segment, long offset, Charset charset, int length) {\n+        int lengthBytes = length * CharsetKind.of(charset).codeUnitSize();\n+        return readBytes(segment, offset, charset, lengthBytes);\n+    }\n+\n+    @ForceInline\n+    public static String readBytes(AbstractMemorySegmentImpl segment, long offset, Charset charset, int lengthBytes) {\n+        final byte[] bytes = new byte[lengthBytes];\n+        MemorySegment.copy(segment, JAVA_BYTE, offset, bytes, 0, lengthBytes);\n+        try {\n+            return JAVA_LANG_ACCESS.uncheckedNewStringOrThrow(bytes, charset);\n+        } catch (CharacterCodingException _) {\n+            \/\/ use replacement characters for malformed input\n+            return new String(bytes, charset);\n+        }\n+    }\n+\n@@ -73,8 +91,1 @@\n-        final byte[] bytes = new byte[len];\n-        MemorySegment.copy(segment, JAVA_BYTE, offset, bytes, 0, len);\n-        try {\n-            return JAVA_LANG_ACCESS.uncheckedNewStringOrThrow(bytes, charset);\n-        } catch (CharacterCodingException _) {\n-            \/\/ use replacement characters for malformed input\n-            return new String(bytes, charset);\n-        }\n+        return readBytes(segment, offset, charset, len);\n@@ -92,8 +103,1 @@\n-        byte[] bytes = new byte[len];\n-        MemorySegment.copy(segment, JAVA_BYTE, offset, bytes, 0, len);\n-        try {\n-            return JAVA_LANG_ACCESS.uncheckedNewStringOrThrow(bytes, charset);\n-        } catch (CharacterCodingException _) {\n-          \/\/ use replacement characters for malformed input\n-          return new String(bytes, charset);\n-        }\n+        return readBytes(segment, offset, charset, len);\n@@ -111,8 +115,1 @@\n-        byte[] bytes = new byte[len];\n-        MemorySegment.copy(segment, JAVA_BYTE, offset, bytes, 0, len);\n-        try {\n-            return JAVA_LANG_ACCESS.uncheckedNewStringOrThrow(bytes, charset);\n-        } catch (CharacterCodingException _) {\n-            \/\/ use replacement characters for malformed input\n-            return new String(bytes, charset);\n-        }\n+        return readBytes(segment, offset, charset, len);\n@@ -318,1 +315,1 @@\n-        final int terminatorCharSize;\n+        final int codeUnitSize;\n@@ -320,2 +317,2 @@\n-        CharsetKind(int terminatorCharSize) {\n-            this.terminatorCharSize = terminatorCharSize;\n+        CharsetKind(int codeUnitSize) {\n+            this.codeUnitSize = codeUnitSize;\n@@ -324,2 +321,2 @@\n-        public int terminatorCharSize() {\n-            return terminatorCharSize;\n+        public int codeUnitSize() {\n+            return codeUnitSize;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/StringSupport.java","additions":26,"deletions":29,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.util.Set;\n@@ -79,8 +80,0 @@\n-                        int terminatorSize = \"\\0\".getBytes(charset).length;\n-                        if (charset == StandardCharsets.UTF_16) {\n-                            terminatorSize -= 2; \/\/ drop BOM\n-                        }\n-                        \/\/ Note that the JDK's UTF_32 encoder doesn't add a BOM.\n-                        \/\/ This is legal under the Unicode standard, and means the byte order is BE.\n-                        \/\/ See: https:\/\/unicode.org\/faq\/utf_bom.html#gen7\n-\n@@ -88,2 +81,1 @@\n-                                testString.getBytes(charset).length +\n-                                        terminatorSize;\n+                                testString.getBytes(charset).length + codeUnitSize(charset);\n@@ -105,0 +97,30 @@\n+    @Test(dataProvider = \"strings\")\n+    public void testStringsLength(String testString) {\n+        Set<String> excluded = Set.of(\"yen\", \"snowman\", \"rainbow\");\n+        \/\/ This test only works for certain strings where the last character is not special\n+        if (!testString.isEmpty() && excluded.stream().noneMatch(testString::startsWith)) {\n+            for (Charset charset : Charset.availableCharsets().values()) {\n+                if (isStandard(charset)) {\n+                    for (Arena arena : arenas()) {\n+                        try (arena) {\n+                            MemorySegment text = arena.allocateFrom(testString, charset);\n+                            int length = testString.getBytes(charset).length \/ codeUnitSize(charset);\n+                            String roundTrip = text.getString(0, charset, length);\n+                            if (charset.newEncoder().canEncode(testString)) {\n+                                assertEquals(roundTrip, testString);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testStringsLengthNegative() {\n+        try (Arena arena = Arena.ofConfined()) {\n+            var segment = arena.allocateFrom(\"abc\");\n+            assertThrows(IllegalArgumentException.class, () -> segment.getString(0, StandardCharsets.UTF_8, -1));\n+        }\n+    }\n+\n@@ -543,0 +565,12 @@\n+\n+    static int codeUnitSize(Charset charset) {\n+        int codeUnitSize = \"\\0\".getBytes(charset).length;\n+        if (charset == StandardCharsets.UTF_16) {\n+            codeUnitSize -= 2; \/\/ drop BOM\n+        }\n+        \/\/ Note that the JDK's UTF_32 encoder doesn't add a BOM.\n+        \/\/ This is legal under the Unicode standard, and means the byte order is BE.\n+        \/\/ See: https:\/\/unicode.org\/faq\/utf_bom.html#gen7\n+        return codeUnitSize;\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestStringEncoding.java","additions":44,"deletions":10,"binary":false,"changes":54,"status":"modified"}]}