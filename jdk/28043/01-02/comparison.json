{"files":[{"patch":"@@ -1299,1 +1299,1 @@\n-     * known byte length can be done using {@link #getString(long, int, Charset)}.\n+     * known byte length can be done using {@link #getString(long, Charset, int)}.\n@@ -1327,1 +1327,1 @@\n-     * Reads a string using the given byte length from this segment at the given offset,\n+     * Reads a string using the given length from this segment at the given offset,\n@@ -1337,2 +1337,0 @@\n-     * @param length  byte length to be used for string conversion (not including any\n-     *                null termination)\n@@ -1341,0 +1339,2 @@\n+     * @param length  length to be used for string conversion, in code units for\n+     *                the provided charset\n@@ -1346,8 +1346,2 @@\n-     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - (B + N)}, where:\n-     *         <ul>\n-     *             <li>{@code B} is the size, in bytes, of the string encoded using the\n-     *             provided charset (e.g. {@code str.getBytes(charset).length});<\/li>\n-     *             <li>{@code N} is the size (in bytes) of the terminator char according\n-     *             to the provided charset. For instance, this is 1 for\n-     *             {@link StandardCharsets#US_ASCII} and 2 for {@link StandardCharsets#UTF_16}.<\/li>\n-     *         <\/ul>\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - (length * N)},\n+     *         where {@code N} is the size, in bytes, of a code unit in the provided charset\n@@ -1362,1 +1356,1 @@\n-    String getString(long offset, int length, Charset charset);\n+    String getString(long offset, Charset charset, int length);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-        int termCharSize = StringSupport.CharsetKind.of(charset).terminatorCharSize();\n+        int termCharSize = StringSupport.CharsetKind.of(charset).codeUnitSize();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -539,1 +539,1 @@\n-    public String getString(long offset, int length, Charset charset) {\n+    public String getString(long offset, Charset charset, int length) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,3 +62,9 @@\n-    public static String read(AbstractMemorySegmentImpl segment, long offset, Charset charset, int len) {\n-        final byte[] bytes = new byte[len];\n-        MemorySegment.copy(segment, JAVA_BYTE, offset, bytes, 0, len);\n+    public static String read(AbstractMemorySegmentImpl segment, long offset, Charset charset, int length) {\n+        int lengthBytes = length * CharsetKind.of(charset).codeUnitSize();\n+        return readBytes(segment, offset, charset, lengthBytes);\n+    }\n+\n+    @ForceInline\n+    public static String readBytes(AbstractMemorySegmentImpl segment, long offset, Charset charset, int lengthBytes) {\n+        final byte[] bytes = new byte[lengthBytes];\n+        MemorySegment.copy(segment, JAVA_BYTE, offset, bytes, 0, lengthBytes);\n@@ -85,1 +91,1 @@\n-        return read(segment, offset, charset, len);\n+        return readBytes(segment, offset, charset, len);\n@@ -97,1 +103,1 @@\n-        return read(segment, offset, charset, len);\n+        return readBytes(segment, offset, charset, len);\n@@ -109,1 +115,1 @@\n-        return read(segment, offset, charset, len);\n+        return readBytes(segment, offset, charset, len);\n@@ -309,1 +315,1 @@\n-        final int terminatorCharSize;\n+        final int codeUnitSize;\n@@ -311,2 +317,2 @@\n-        CharsetKind(int terminatorCharSize) {\n-            this.terminatorCharSize = terminatorCharSize;\n+        CharsetKind(int codeUnitSize) {\n+            this.codeUnitSize = codeUnitSize;\n@@ -315,2 +321,2 @@\n-        public int terminatorCharSize() {\n-            return terminatorCharSize;\n+        public int codeUnitSize() {\n+            return codeUnitSize;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/StringSupport.java","additions":17,"deletions":11,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-                                testString.getBytes(charset).length + terminatorSize(charset);\n+                                testString.getBytes(charset).length + codeUnitSize(charset);\n@@ -107,3 +107,2 @@\n-\n-                            String roundTrip = text.getString(0,\n-                                    (int) text.byteSize() - terminatorSize(charset) * 2, charset);\n+                            int length = testString.getBytes(charset).length \/ codeUnitSize(charset);\n+                            String roundTrip = text.getString(0, charset, length);\n@@ -111,1 +110,1 @@\n-                                assertEquals(roundTrip, testString.substring(0, testString.length() - 1));\n+                                assertEquals(roundTrip, testString);\n@@ -124,1 +123,1 @@\n-            assertThrows(IllegalArgumentException.class, () -> segment.getString(0, -1, StandardCharsets.UTF_8));\n+            assertThrows(IllegalArgumentException.class, () -> segment.getString(0, StandardCharsets.UTF_8, -1));\n@@ -567,2 +566,2 @@\n-    static int terminatorSize(Charset charset) {\n-        int terminatorSize = \"\\0\".getBytes(charset).length;\n+    static int codeUnitSize(Charset charset) {\n+        int codeUnitSize = \"\\0\".getBytes(charset).length;\n@@ -570,1 +569,1 @@\n-            terminatorSize -= 2; \/\/ drop BOM\n+            codeUnitSize -= 2; \/\/ drop BOM\n@@ -575,1 +574,1 @@\n-        return terminatorSize;\n+        return codeUnitSize;\n","filename":"test\/jdk\/java\/foreign\/TestStringEncoding.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"}]}