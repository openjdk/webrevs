{"files":[{"patch":"@@ -28,6 +28,0 @@\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.function.Function;\n-\n@@ -43,0 +37,1 @@\n+import java.lang.classfile.constantpool.PoolEntry;\n@@ -44,0 +39,6 @@\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n@@ -119,1 +120,1 @@\n-    <E> List<E> readEntryList(int p) {\n+    <E extends PoolEntry> List<E> readEntryList(int p, Class<E> type) {\n@@ -125,1 +126,1 @@\n-            entries[i] = classReader.readEntry(p);\n+            entries[i] = classReader.readEntry(p, type);\n@@ -552,1 +553,1 @@\n-                exceptions = readEntryList(payloadStart);\n+                exceptions = readEntryList(payloadStart, ClassEntry.class);\n@@ -648,1 +649,1 @@\n-                    List<ModuleEntry> exportsTo = readEntryList(p);\n+                    List<ModuleEntry> exportsTo = readEntryList(p, ModuleEntry.class);\n@@ -663,1 +664,1 @@\n-                    List<ModuleEntry> opensTo = readEntryList(p);\n+                    List<ModuleEntry> opensTo = readEntryList(p, ModuleEntry.class);\n@@ -671,1 +672,1 @@\n-                uses = readEntryList(p);\n+                uses = readEntryList(p, ClassEntry.class);\n@@ -680,1 +681,1 @@\n-                    List<ClassEntry> providesWith = readEntryList(p);\n+                    List<ClassEntry> providesWith = readEntryList(p, ClassEntry.class);\n@@ -700,1 +701,1 @@\n-                packages = readEntryList(payloadStart);\n+                packages = readEntryList(payloadStart, PackageEntry.class);\n@@ -718,1 +719,1 @@\n-                members = readEntryList(payloadStart);\n+                members = readEntryList(payloadStart, ClassEntry.class);\n@@ -747,1 +748,1 @@\n-                    final List<LoadableConstantEntry> args = readEntryList(p + 2);\n+                    final List<LoadableConstantEntry> args = readEntryList(p + 2, LoadableConstantEntry.class);\n@@ -927,1 +928,1 @@\n-                permittedSubclasses = readEntryList(payloadStart);\n+                permittedSubclasses = readEntryList(payloadStart, ClassEntry.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundAttribute.java","additions":18,"deletions":17,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8304837\n+ * @bug 8304837 8336585\n@@ -30,0 +30,6 @@\n+import jdk.internal.classfile.impl.DirectClassBuilder;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.opentest4j.AssertionFailedError;\n+\n@@ -31,0 +37,1 @@\n+import java.lang.classfile.BufWriter;\n@@ -36,3 +43,1 @@\n-import org.junit.jupiter.api.Test;\n-import org.opentest4j.AssertionFailedError;\n-\n+import java.lang.classfile.constantpool.ConstantPoolException;\n@@ -70,0 +75,29 @@\n+\n+    @Test\n+    void testBadEntryTypeInList() {\n+        var cf = ClassFile.of();\n+\n+        \/\/ Craft an attribute list with index to badly typed attributes\n+        var bytes = cf.build(ClassDesc.of(\"Test\"), clb -> {\n+            var cp = clb.constantPool();\n+            var oneClassString = cp.utf8Entry(\"Test$Ape\");\n+            var oneClass = cp.classEntry(oneClassString);\n+            ((DirectClassBuilder) clb).writeAttribute(new UnboundAttribute.AdHocAttribute<>(Attributes.nestMembers()) {\n+                @Override\n+                public void writeBody(BufWriter b) {\n+                    b.writeU2(2);\n+                    b.writeIndex(oneClass);\n+                    b.writeIndex(oneClassString);\n+                }\n+            });\n+        });\n+\n+        var nm = cf.parse(bytes).findAttribute(Attributes.nestMembers()).orElseThrow();\n+        Assertions.assertThrows(ConstantPoolException.class, () -> {\n+            int sum = 0;\n+            \/\/ this should throw CPE upon encountering non-ClassEntry\n+            for (var member : nm.nestMembers()) {\n+                sum += member.index();\n+            }\n+        });\n+    }\n","filename":"test\/jdk\/jdk\/classfile\/BoundAttributeTest.java","additions":39,"deletions":5,"binary":false,"changes":44,"status":"modified"}]}