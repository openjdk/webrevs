{"files":[{"patch":"@@ -71,3 +71,0 @@\n-    private static final List<ProtocolVersion> tls13Protocols =\n-            Arrays.asList(ProtocolVersion.PROTOCOLS_OF_13);\n-\n@@ -553,18 +550,0 @@\n-            \/\/ Per RFC 8446, we MAY include RSASSA-PKCS1-v1_5 and Legacy\n-            \/\/ algorithms in \"signature_algorithms\" extension. We choose to do\n-            \/\/ so for TLSv1.3 if such signature schemes would be present in\n-            \/\/ \"signature_algorithms_cert\" extension if it were sent.\n-            \/\/ Because it's stated in RFC 8446 that these signature schemes\n-            \/\/ can only be used in certificates, we could keep them in\n-            \/\/ \"signature_algorithms\" without risking that the TLSv1.3 peer\n-            \/\/ will misunderstand that those algorithms can be used for\n-            \/\/ the handshake signature.\n-            if (tls13Protocols.contains(hc.negotiatedProtocol)\n-                    || (hc.activeProtocols.size() == 1\n-                    && tls13Protocols.contains(\n-                    hc.activeProtocols.getFirst()))) {\n-                List<SignatureScheme> sigCertAlgs = new ArrayList<>(\n-                        hc.localSupportedCertSignAlgs);\n-                sigCertAlgs.retainAll(SignatureScheme.TLS13_CERT_ONLY);\n-                sigAlgs.addAll(sigCertAlgs);\n-            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SignatureAlgorithmsExtension.java","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -221,10 +221,0 @@\n-    \/\/ RSASSA-PKCS1-v1_5 plus Legacy signature schemes as defined in RFC 8446,\n-    \/\/ those can be used only for certificate signatures in TLSv1.3.\n-    static final List<SignatureScheme> TLS13_CERT_ONLY = List.of(\n-            RSA_PKCS1_SHA256,\n-            RSA_PKCS1_SHA384,\n-            RSA_PKCS1_SHA512,\n-            ECDSA_SHA1,\n-            RSA_PKCS1_SHA1\n-    );\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SignatureScheme.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import static jdk.test.lib.Asserts.assertTrue;\n@@ -82,12 +81,1 @@\n-        \/\/ RSASSA-PKCS1-v1_5 and Legacy algorithms that we include in\n-        \/\/ \"signature_algorithms\" extension if \"signature_algorithms_cert\"\n-        \/\/ extension is not being sent as we MAY per RFC 8446.\n-        \/\/ These should be present in both: TLSv1.2 and TLSv1.3, so we\n-        \/\/ place this check here and TLS13 test should run this method as well.\n-        TLS13_CERT_ONLY.forEach(ss ->\n-                assertTrue(sigAlgsSS.contains(ss), \"Signature Scheme \"\n-                        + ss\n-                        + \" isn't present in ClientHello's\"\n-                        + \" signature_algorithms extension\"));\n-\n-        \/\/ Check signature_algorithms_cert extension should not be present.\n+        \/\/ signature_algorithms_cert extension MUST NOT be present.\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/DisableSignatureSchemePerScopeNoClientCertSignAlgsExtTLS12.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+import static jdk.test.lib.Asserts.assertFalse;\n+\n@@ -36,0 +38,1 @@\n+import java.util.List;\n@@ -61,0 +64,17 @@\n+    @Override\n+    protected void checkClientHello() throws Exception {\n+        super.checkClientHello();\n+\n+        \/\/ Get signature_algorithms extension signature schemes.\n+        List<String> sigAlgsSS = getSigSchemesCliHello(\n+                extractHandshakeMsg(cTOs, TLS_HS_CLI_HELLO),\n+                SIG_ALGS_EXT);\n+\n+        \/\/ These signature schemes MOST NOT be present in signature_algorithms\n+        \/\/ extension.\n+        TLS13_CERT_ONLY.forEach(ss ->\n+                assertFalse(sigAlgsSS.contains(ss), \"Signature Scheme \" + ss\n+                        + \" present in ClientHello's\"\n+                        + \" signature_algorithms extension\"));\n+    }\n+\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/DisableSignatureSchemePerScopeNoClientCertSignAlgsExtTLS13.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -56,3 +56,3 @@\n-    \/\/ Signature schemes not supported in TLSv1.3 for the handshake but\n-    \/\/ supported for certificates.\n-    \/\/ This is regardless of jdk.tls.disabledAlgorithms configuration.\n+    \/\/ Signature schemes not supported in TLSv1.3 for the handshake\n+    \/\/ regardless of jdk.tls.disabledAlgorithms configuration.\n+    \/\/ In TLSv1.2 these are supported for both: handshake and certificate.\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/DisableSignatureSchemePerScopeTLS12.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -68,1 +68,2 @@\n-        \/\/ Should not be present in signature_algorithms extension.\n+        \/\/ These signature schemes MOST NOT be present in signature_algorithms\n+        \/\/ extension.\n@@ -70,3 +71,3 @@\n-                assertFalse(sigAlgsSS.contains(ss),\n-                        \"Signature Scheme \" + ss\n-                        + \" present in ClientHello's signature_algorithms extension\"));\n+                assertFalse(sigAlgsSS.contains(ss), \"Signature Scheme \" + ss\n+                        + \" present in ClientHello's\"\n+                        + \" signature_algorithms extension\"));\n@@ -79,1 +80,2 @@\n-        \/\/ Should be present in signature_algorithms_cert extension.\n+        \/\/ These signature schemes MUST be present in\n+        \/\/ signature_algorithms_cert extension.\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/DisableSignatureSchemePerScopeTLS13.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"}]}