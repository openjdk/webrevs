{"files":[{"patch":"@@ -71,0 +71,3 @@\n+    private static final List<ProtocolVersion> tls13Protocols =\n+            Arrays.asList(ProtocolVersion.PROTOCOLS_OF_13);\n+\n@@ -550,0 +553,18 @@\n+            \/\/ Per RFC 8446, we MAY include RSASSA-PKCS1-v1_5 and Legacy\n+            \/\/ algorithms in \"signature_algorithms\" extension. We choose to do\n+            \/\/ so for TLSv1.3 if such signature schemes would be present in\n+            \/\/ \"signature_algorithms_cert\" extension if it were sent.\n+            \/\/ Because it's stated in RFC 8446 that these signature schemes\n+            \/\/ can only be used in certificates, we could keep them in\n+            \/\/ \"signature_algorithms\" without risking that the TLSv1.3 peer\n+            \/\/ will misunderstand that those algorithms can be used for\n+            \/\/ the handshake signature.\n+            if (tls13Protocols.contains(hc.negotiatedProtocol)\n+                    || (hc.activeProtocols.size() == 1\n+                    && tls13Protocols.contains(\n+                    hc.activeProtocols.getFirst()))) {\n+                List<SignatureScheme> sigCertAlgs = new ArrayList<>(\n+                        hc.localSupportedCertSignAlgs);\n+                sigCertAlgs.retainAll(SignatureScheme.TLS13_CERT_ONLY);\n+                sigAlgs.addAll(sigCertAlgs);\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SignatureAlgorithmsExtension.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -221,0 +221,10 @@\n+    \/\/ RSASSA-PKCS1-v1_5 plus Legacy signature schemes as defined in RFC 8446,\n+    \/\/ those can be used only for certificate signatures in TLSv1.3.\n+    static final List<SignatureScheme> TLS13_CERT_ONLY = List.of(\n+            RSA_PKCS1_SHA256,\n+            RSA_PKCS1_SHA384,\n+            RSA_PKCS1_SHA512,\n+            ECDSA_SHA1,\n+            RSA_PKCS1_SHA1\n+    );\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SignatureScheme.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import static jdk.test.lib.Asserts.assertTrue;\n@@ -81,0 +82,11 @@\n+        \/\/ RSASSA-PKCS1-v1_5 and Legacy algorithms that we include in\n+        \/\/ \"signature_algorithms\" extension if \"signature_algorithms_cert\"\n+        \/\/ extension is not being sent as we MAY per RFC 8446.\n+        \/\/ These should be present in both: TLSv1.2 and TLSv1.3, so we\n+        \/\/ place this check here and TLS13 test should run this method as well.\n+        TLS13_CERT_ONLY.forEach(ss ->\n+                assertTrue(sigAlgsSS.contains(ss), \"Signature Scheme \"\n+                        + ss\n+                        + \" isn't present in ClientHello's\"\n+                        + \" signature_algorithms extension\"));\n+\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/DisableSignatureSchemePerScopeNoClientCertSignAlgsExtTLS12.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n-import static jdk.test.lib.Asserts.assertFalse;\n-\n@@ -38,1 +36,0 @@\n-import java.util.List;\n@@ -45,9 +42,0 @@\n-    \/\/ Signature schemes not supported in TLSv1.3 only for the handshake.\n-    \/\/ This is regardless of jdk.tls.disabledAlgorithms configuration.\n-    List<String> NOT_SUPPORTED_FOR_HANDSHAKE = List.of(\n-            \"rsa_pkcs1_sha1\",\n-            \"rsa_pkcs1_sha256\",\n-            \"rsa_pkcs1_sha384\",\n-            \"rsa_pkcs1_sha512\"\n-    );\n-\n@@ -73,16 +61,0 @@\n-    @Override\n-    protected void checkClientHello() throws Exception {\n-        super.checkClientHello();\n-\n-        \/\/ Get signature_algorithms extension signature schemes.\n-        List<String> sigAlgsSS = getSigSchemesCliHello(\n-                extractHandshakeMsg(cTOs, TLS_HS_CLI_HELLO),\n-                SIG_ALGS_EXT);\n-\n-        \/\/ Should not be present in signature_algorithms extension.\n-        NOT_SUPPORTED_FOR_HANDSHAKE.forEach(ss ->\n-                assertFalse(sigAlgsSS.contains(ss),\n-                        \"Signature Scheme \" + ss\n-                        + \" present in ClientHello's signature_algorithms extension\"));\n-    }\n-\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/DisableSignatureSchemePerScopeNoClientCertSignAlgsExtTLS13.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -56,0 +56,11 @@\n+    \/\/ Signature schemes not supported in TLSv1.3 for the handshake but\n+    \/\/ supported for certificates.\n+    \/\/ This is regardless of jdk.tls.disabledAlgorithms configuration.\n+    protected static final List<String> TLS13_CERT_ONLY = List.of(\n+            \"ecdsa_sha1\",\n+            \"rsa_pkcs1_sha1\",\n+            \"rsa_pkcs1_sha256\",\n+            \"rsa_pkcs1_sha384\",\n+            \"rsa_pkcs1_sha512\"\n+    );\n+\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/DisableSignatureSchemePerScopeTLS12.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -44,9 +44,0 @@\n-    \/\/ Signature schemes not supported in TLSv1.3 only for the handshake.\n-    \/\/ This is regardless of jdk.tls.disabledAlgorithms configuration.\n-    List<String> NOT_SUPPORTED_FOR_HANDSHAKE = List.of(\n-            \"rsa_pkcs1_sha1\",\n-            \"rsa_pkcs1_sha256\",\n-            \"rsa_pkcs1_sha384\",\n-            \"rsa_pkcs1_sha512\"\n-    );\n-\n@@ -78,1 +69,1 @@\n-        NOT_SUPPORTED_FOR_HANDSHAKE.forEach(ss ->\n+        TLS13_CERT_ONLY.forEach(ss ->\n@@ -89,1 +80,1 @@\n-        NOT_SUPPORTED_FOR_HANDSHAKE.forEach(ss ->\n+        TLS13_CERT_ONLY.forEach(ss ->\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/DisableSignatureSchemePerScopeTLS13.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"}]}