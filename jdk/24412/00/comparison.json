{"files":[{"patch":"@@ -50,1 +50,1 @@\n-        int glyph = charToGlyph(ch);\n+        int glyph = charToGlyph(ch, false);\n@@ -55,1 +55,1 @@\n-        int glyph = charToGlyph(cp);\n+        int glyph = charToGlyph(cp, false);\n@@ -92,1 +92,5 @@\n-        int glyph = cache.get(unicode);\n+        return charToGlyph(unicode, false);\n+    }\n+\n+    private int charToGlyph(char unicode, boolean raw) {\n+        int glyph = cache.get(unicode, raw);\n@@ -95,8 +99,4 @@\n-        if (FontUtilities.isDefaultIgnorable(unicode)) {\n-            glyph = INVISIBLE_GLYPH_ID;\n-        } else {\n-            final char[] unicodeArray = new char[] { unicode };\n-            final int[] glyphArray = new int[1];\n-            nativeCharsToGlyphs(fFont.getNativeFontPtr(), 1, unicodeArray, glyphArray);\n-            glyph = glyphArray[0];\n-        }\n+        final char[] unicodeArray = new char[] { unicode };\n+        final int[] glyphArray = new int[1];\n+        nativeCharsToGlyphs(fFont.getNativeFontPtr(), 1, unicodeArray, glyphArray);\n+        glyph = glyphArray[0];\n@@ -110,0 +110,8 @@\n+        return charToGlyph(unicode, false);\n+    }\n+\n+    public synchronized int charToGlyphRaw(int unicode) {\n+        return charToGlyph(unicode, true);\n+    }\n+\n+    private int charToGlyph(int unicode, boolean raw) {\n@@ -116,1 +124,1 @@\n-            charsToGlyphs(2, surrogates, glyphs);\n+            cache.get(2, surrogates, glyphs, raw);\n@@ -119,1 +127,1 @@\n-             return charToGlyph((char)unicode);\n+             return charToGlyph((char) unicode, raw);\n@@ -124,1 +132,1 @@\n-        cache.get(count, unicodes, glyphs);\n+        cache.get(count, unicodes, glyphs, false);\n@@ -129,1 +137,1 @@\n-            glyphs[i] = charToGlyph(unicodes[i]);\n+            glyphs[i] = charToGlyph(unicodes[i], false);\n@@ -156,1 +164,5 @@\n-        public synchronized int get(final int index) {\n+        public synchronized int get(final int index, final boolean raw) {\n+            if (!raw && FontUtilities.isDefaultIgnorable(index)) {\n+                return INVISIBLE_GLYPH_ID;\n+            }\n+\n@@ -227,1 +239,1 @@\n-        public synchronized void get(int count, char[] indices, int[] values)\n+        public synchronized void get(int count, char[] indices, int[] values, boolean raw)\n@@ -249,1 +261,1 @@\n-                final int value = get(code);\n+                final int value = get(code, raw);\n@@ -256,3 +268,0 @@\n-                } else if (FontUtilities.isDefaultIgnorable(code)) {\n-                    values[i] = INVISIBLE_GLYPH_ID;\n-                    put(code, INVISIBLE_GLYPH_ID);\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/font\/CCharToGlyphMapper.java","additions":30,"deletions":21,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2006, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,0 +89,7 @@\n+    public int charToVariationGlyphRaw(int unicode, int variationSelector) {\n+        \/\/ Override this if variation selector is supported.\n+        return charToGlyphRaw(unicode);\n+    }\n+\n+    public abstract int charToGlyphRaw(int unicode);\n+\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/CharToGlyphMapper.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,0 @@\n-\n@@ -99,1 +98,1 @@\n-            return;     \/\/ don't cache surrogates\n+            return; \/\/ don't cache surrogates\n@@ -120,2 +119,8 @@\n-    private int convertToGlyph(int unicode) {\n-\n+    private int getGlyph(int unicode, boolean raw) {\n+        if (!raw && FontUtilities.isDefaultIgnorable(unicode)) {\n+            return INVISIBLE_GLYPH_ID;\n+        }\n+        int glyphCode = getCachedGlyphCode(unicode);\n+        if (glyphCode != UNINITIALIZED_GLYPH) {\n+            return glyphCode;\n+        }\n@@ -125,1 +130,1 @@\n-                int glyphCode = mapper.charToGlyph(unicode);\n+                glyphCode = mapper.charToGlyphRaw(unicode);\n@@ -158,1 +163,4 @@\n-    public int charToGlyph(int unicode) {\n+    public int charToGlyphRaw(int unicode) {\n+        int glyphCode = getGlyph(unicode, true);\n+        return glyphCode;\n+    }\n@@ -160,4 +168,2 @@\n-        int glyphCode = getCachedGlyphCode(unicode);\n-        if (glyphCode == UNINITIALIZED_GLYPH) {\n-            glyphCode = convertToGlyph(unicode);\n-        }\n+    public int charToGlyph(int unicode) {\n+        int glyphCode = getGlyph(unicode, false);\n@@ -179,5 +185,1 @@\n-\n-        int glyphCode  = getCachedGlyphCode(unicode);\n-        if (glyphCode == UNINITIALIZED_GLYPH) {\n-            glyphCode = convertToGlyph(unicode);\n-        }\n+        int glyphCode = getGlyph(unicode, false);\n@@ -209,4 +211,1 @@\n-            int gc = glyphs[i] = getCachedGlyphCode(code);\n-            if (gc == UNINITIALIZED_GLYPH) {\n-                glyphs[i] = convertToGlyph(code);\n-            }\n+            glyphs[i] = getGlyph(code, false);\n@@ -246,4 +245,1 @@\n-                    int gc = glyphs[i] = getCachedGlyphCode(code);\n-                    if (gc == UNINITIALIZED_GLYPH) {\n-                        glyphs[i] = convertToGlyph(code);\n-                    }\n+                    glyphs[i] = getGlyph(code, false);\n@@ -256,4 +252,1 @@\n-            int gc = glyphs[i] = getCachedGlyphCode(code);\n-            if (gc == UNINITIALIZED_GLYPH) {\n-                glyphs[i] = convertToGlyph(code);\n-            }\n+            glyphs[i] = getGlyph(code, false);\n@@ -266,5 +259,1 @@\n-\n-            glyphs[i] = getCachedGlyphCode(code);\n-            if (glyphs[i] == UNINITIALIZED_GLYPH) {\n-                glyphs[i] = convertToGlyph(code);\n-            }\n+            glyphs[i] = getGlyph(code, false);\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/CompositeGlyphMapper.java","additions":22,"deletions":33,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -538,0 +538,8 @@\n+    public int charToGlyphRaw(int wchar) {\n+        return getMapper().charToGlyphRaw(wchar);\n+    }\n+\n+    public int charToVariationGlyphRaw(int wchar, int variationSelector) {\n+        return getMapper().charToVariationGlyphRaw(wchar, variationSelector);\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/Font2D.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -341,1 +341,1 @@\n-        int glyphID = font2D.charToGlyph(unicode);\n+        int glyphID = font2D.charToGlyphRaw(unicode);\n@@ -357,1 +357,1 @@\n-        int glyphID = font2D.charToVariationGlyph(unicode, variation_selector);\n+        int glyphID = font2D.charToVariationGlyphRaw(unicode, variation_selector);\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/HBShaper.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -60,2 +60,2 @@\n-    private char getGlyphFromCMAP(int charCode) {\n-        if (FontUtilities.isDefaultIgnorable(charCode)) {\n+    private char getGlyphFromCMAP(int charCode, boolean raw) {\n+        if (!raw && FontUtilities.isDefaultIgnorable(charCode)) {\n@@ -83,1 +83,1 @@\n-    private char getGlyphFromCMAP(int charCode, int variationSelector) {\n+    private char getGlyphFromCMAP(int charCode, int variationSelector, boolean raw) {\n@@ -85,1 +85,1 @@\n-            return getGlyphFromCMAP(charCode);\n+            return getGlyphFromCMAP(charCode, raw);\n@@ -87,1 +87,1 @@\n-        if (FontUtilities.isDefaultIgnorable(charCode)) {\n+        if (!raw && FontUtilities.isDefaultIgnorable(charCode)) {\n@@ -125,0 +125,11 @@\n+    public int charToGlyphRaw(int unicode) {\n+        int glyph = getGlyphFromCMAP(unicode, true);\n+        return glyph;\n+    }\n+\n+    @Override\n+    public int charToVariationGlyphRaw(int unicode, int variationSelector) {\n+        int glyph = getGlyphFromCMAP(unicode, variationSelector, true);\n+        return glyph;\n+    }\n+\n@@ -126,1 +137,1 @@\n-        int glyph = getGlyphFromCMAP(unicode);\n+        int glyph = getGlyphFromCMAP(unicode, false);\n@@ -131,1 +142,1 @@\n-        int glyph = getGlyphFromCMAP(unicode);\n+        int glyph = getGlyphFromCMAP(unicode, false);\n@@ -137,1 +148,1 @@\n-        int glyph = getGlyphFromCMAP(unicode, variationSelector);\n+        int glyph = getGlyphFromCMAP(unicode, variationSelector, false);\n@@ -143,1 +154,1 @@\n-            glyphs[i] = getGlyphFromCMAP(unicodes[i]);\n+            glyphs[i] = getGlyphFromCMAP(unicodes[i], false);\n@@ -161,1 +172,1 @@\n-                    glyphs[i] = getGlyphFromCMAP(code);\n+                    glyphs[i] = getGlyphFromCMAP(code, false);\n@@ -167,1 +178,1 @@\n-            glyphs[i] = getGlyphFromCMAP(code);\n+            glyphs[i] = getGlyphFromCMAP(code, false);\n@@ -194,1 +205,1 @@\n-            glyphs[i] = getGlyphFromCMAP(code);\n+            glyphs[i] = getGlyphFromCMAP(code, false);\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/TrueTypeGlyphMapper.java","additions":23,"deletions":12,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -93,0 +93,10 @@\n+        int glyph = charToGlyph(ch, false);\n+        return glyph;\n+    }\n+\n+    public int charToGlyphRaw(int ch) {\n+        int glyph = charToGlyph(ch, true);\n+        return glyph;\n+    }\n+\n+    private int charToGlyph(int ch, boolean raw) {\n@@ -96,1 +106,1 @@\n-            if (FontUtilities.isDefaultIgnorable(ch)) {\n+            if (!raw && FontUtilities.isDefaultIgnorable(ch)) {\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/Type1GlyphMapper.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -146,1 +146,1 @@\n-         (*env)->GetMethodID(env, tmpClass, \"charToGlyph\", \"(I)I\"));\n+         (*env)->GetMethodID(env, tmpClass, \"charToGlyphRaw\", \"(I)I\"));\n@@ -148,1 +148,1 @@\n-         (*env)->GetMethodID(env, tmpClass, \"charToVariationGlyph\", \"(II)I\"));\n+         (*env)->GetMethodID(env, tmpClass, \"charToVariationGlyphRaw\", \"(II)I\"));\n","filename":"src\/java.desktop\/share\/native\/libfontmanager\/sunFont.c","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,0 +78,4 @@\n+    public int charToGlyphRaw(int unicode) {\n+        return charToGlyph(unicode);\n+    }\n+\n","filename":"src\/java.desktop\/unix\/classes\/sun\/font\/NativeGlyphMapper.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,164 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8353230\n+ * @summary Regression test for TrueType font GSUB substitutions.\n+ *\/\n+\n+import java.awt.Font;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.GlyphVector;\n+import java.awt.font.TextAttribute;\n+import java.io.ByteArrayInputStream;\n+import java.util.Base64;\n+import java.util.Map;\n+\n+public class GlyphVectorGsubTest {\n+\n+    \/**\n+     * <p>Font created for this test which contains two GSUB substitutions: a\n+     * \"liga\" ligature for \"a\" + \"b\" which requires that the ligature support\n+     * be enabled, and a \"ccmp\" ligature for an emoji sequence which does not\n+     * require that ligatures be explicitly enabled.\n+     *\n+     * <p>The following FontForge Python script was used to generate this font:\n+     *\n+     * <pre>\n+     * import fontforge\n+     * import base64\n+     *\n+     * def draw(glyph, width, height):\n+     *   pen = glyph.glyphPen()\n+     *   pen.moveTo((100, 100))\n+     *   pen.lineTo((100, 100 + height))\n+     *   pen.lineTo((100 + width, 100 + height))\n+     *   pen.lineTo((100 + width, 100))\n+     *   pen.closePath()\n+     *   glyph.draw(pen)\n+     *   pen = None\n+     *\n+     * font = fontforge.font()\n+     * font.encoding = 'UnicodeFull'\n+     * font.design_size = 16\n+     * font.em = 2048\n+     * font.ascent = 1638\n+     * font.descent = 410\n+     * font.familyname = 'Test'\n+     * font.fontname = 'Test'\n+     * font.fullname = 'Test'\n+     * font.copyright = ''\n+     * font.autoWidth(0, 0, 2048)\n+     *\n+     * font.addLookup('ligatures', 'gsub_ligature', (), (('liga',(('latn',('dflt')),)),))\n+     * font.addLookupSubtable('ligatures', 'sub1')\n+     *\n+     * font.addLookup('sequences', 'gsub_ligature', (), (('ccmp',(('latn',('dflt')),)),))\n+     * font.addLookupSubtable('sequences', 'sub2')\n+     *\n+     * space = font.createChar(0x20)\n+     * space.width = 600\n+     *\n+     * # create glyphs: a, b, ab\n+     *\n+     * for char in list('ab'):\n+     *   glyph = font.createChar(ord(char))\n+     *   draw(glyph, 400, 100)\n+     *   glyph.width = 600\n+     *\n+     * ab = font.createChar(-1, 'ab')\n+     * ab.addPosSub('sub1', ('a', 'b'))\n+     * draw(ab, 400, 400)\n+     * ab.width = 600\n+     *\n+     * # create glyphs for \"woman\" emoji sequence\n+     *\n+     * components = []\n+     * woman = '\\U0001F471\\U0001F3FD\\u200D\\u2640\\uFE0F'\n+     * for char in list(woman):\n+     *   glyph = font.createChar(ord(char))\n+     *   draw(glyph, 400, 800)\n+     *   glyph.width = 600\n+     *   components.append(glyph.glyphname)\n+     *\n+     * del components[-1] # remove last\n+     * seq = font.createChar(-1, 'seq')\n+     * seq.addPosSub('sub2', components)\n+     * draw(seq, 400, 1200)\n+     * seq.width = 600\n+     *\n+     * # save font to file\n+     *\n+     * ttf = 'test.ttf'     # TrueType\n+     * t64 = 'test.ttf.txt' # TrueType Base64\n+     *\n+     * font.generate(ttf)\n+     *\n+     * with open(ttf, 'rb') as f1:\n+     *   encoded = base64.b64encode(f1.read())\n+     *   with open(t64, 'wb') as f2:\n+     *     f2.write(encoded)\n+     * <\/pre>\n+     *\/\n+    private static final String TTF_BYTES = \"AAEAAAAQAQAABAAARkZUTaomGsgAAAiUAAAAHEdERUYAQQAZAAAHtAAAACRHUE9T4BjvnAAACFwAAAA2R1NVQkbjQAkAAAfYAAAAhE9TLzKik\/GeAAABiAAAAGBjbWFwK+OB7AAAAgwAAAHWY3Z0IABEBREAAAPkAAAABGdhc3D\/\/wADAAAHrAAAAAhnbHlmyBUElgAABAQAAAG4aGVhZCnqeTIAAAEMAAAANmhoZWEIcgJdAAABRAAAACRobXR4CPwB1AAAAegAAAAibG9jYQKIAxYAAAPoAAAAHG1heHAAUQA5AAABaAAAACBuYW1lQcPFIwAABbwAAAGGcG9zdIAWZOAAAAdEAAAAaAABAAAAAQAA7g5Qb18PPPUACwgAAAAAAOQSF3AAAAAA5BIXcABEAAACZAVVAAAACAACAAAAAAAAAAEAAAVVAAAAuAJYAAAAAAJkAAEAAAAAAAAAAAAAAAAAAAAEAAEAAAANAAgAAgAAAAAAAgAAAAEAAQAAAEAALgAAAAAABAJYAZAABQAABTMFmQAAAR4FMwWZAAAD1wBmAhIAAAIABQkAAAAAAACAAAABAgBAAAgAAAAAAAAAUGZFZACAACD\/\/wZm\/mYAuAVVAAAAAAABAAAAAADIAAAAAAAgAAQCWABEAAAAAAJYAAACWAAAAGQAZABkAGQAZABkAGQAZABkAAAAAAAFAAAAAwAAACwAAAAEAAAAbAABAAAAAADQAAMAAQAAACwAAwAKAAAAbAAEAEAAAAAMAAgAAgAEACAAYiANJkD+D\/\/\/AAAAIABhIA0mQP4P\/\/\/\/4\/+j3\/nZxwH5AAEAAAAAAAAAAAAAAAAADAAAAAAAZAAAAAAAAAAHAAAAIAAAACAAAAADAAAAYQAAAGIAAAAEAAAgDQAAIA0AAAAGAAAmQAAAJkAAAAAHAAD+DwAA\/g8AAAAIAAHz\/QAB8\/0AAAAJAAH0cQAB9HEAAAAKAAABBgAAAQAAAAAAAAABAgAAAAIAAAAAAAAAAAAAAAAAAAABAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEQFEQAAACwALAAsACwAPgBQAGQAeACMAKAAtADIANwAAgBEAAACZAVVAAMABwAusQEALzyyBwQA7TKxBgXcPLIDAgDtMgCxAwAvPLIFBADtMrIHBgH8PLIBAgDtMjMRIRElIREhRAIg\/iQBmP5oBVX6q0QEzQAAAAIAZABkAfQAyAADAAcAADc1IRUhNSEVZAGQ\/nABkGRkZGRkAAIAZABkAfQAyAADAAcAADc1IRUhNSEVZAGQ\/nABkGRkZGRkAAIAZABkAfQDhAADAAcAADcRIREhESERZAGQ\/nABkGQDIPzgAyD84AACAGQAZAH0A4QAAwAHAAA3ESERIREhEWQBkP5wAZBkAyD84AMg\/OAAAgBkAGQB9AOEAAMABwAANxEhESERIRFkAZD+cAGQZAMg\/OADIPzgAAIAZABkAfQDhAADAAcAADcRIREhESERZAGQ\/nABkGQDIPzgAyD84AACAGQAZAH0A4QAAwAHAAA3ESERIREhEWQBkP5wAZBkAyD84AMg\/OAAAgBkAGQB9AH0AAMABwAANxEhESERIRFkAZD+cAGQZAGQ\/nABkP5wAAIAZABkAfQFFAADAAcAADcRIREhESERZAGQ\/nABkGQEsPtQBLD7UAAAAA4ArgABAAAAAAAAAAAAAgABAAAAAAABAAQADQABAAAAAAACAAcAIgABAAAAAAADAB8AagABAAAAAAAEAAQAlAABAAAAAAAFAA8AuQABAAAAAAAGAAQA0wADAAEECQAAAAAAAAADAAEECQABAAgAAwADAAEECQACAA4AEgADAAEECQADAD4AKgADAAEECQAEAAgAigADAAEECQAFAB4AmQADAAEECQAGAAgAyQAAAABUAGUAcwB0AABUZXN0AABSAGUAZwB1AGwAYQByAABSZWd1bGFyAABGAG8AbgB0AEYAbwByAGcAZQAgADIALgAwACAAOgAgAFQAZQBzAHQAIAA6ACAAMQAtADQALQAyADAAMgA1AABGb250Rm9yZ2UgMi4wIDogVGVzdCA6IDEtNC0yMDI1AABUAGUAcwB0AABUZXN0AABWAGUAcgBzAGkAbwBuACAAMAAwADEALgAwADAAMAAAVmVyc2lvbiAwMDEuMDAwAABUAGUAcwB0AABUZXN0AAAAAAIAAAAAAAD\/ZwBmAAAAAQAAAAAAAAAAAAAAAAAAAAAADQAAAAEAAgADAEQARQECAQMBBAEFAQYBBwEIB3VuaTIwMEQGZmVtYWxlB3VuaUZFMEYGdTFGM0ZEBnUxRjQ3MQJhYgNzZXEAAAAB\/\/8AAgABAAAADAAAABwAAAACAAIAAwAKAAEACwAMAAIABAAAAAIAAAABAAAACgAgADoAAWxhdG4ACAAEAAAAAP\/\/AAIAAAABAAJjY21wAA5saWdhABQAAAABAAAAAAABAAEAAgAGAA4ABAAAAAEAEAAEAAAAAQAkAAEAFgABAAgAAQAEAAwABAAJAAYABwABAAEACgABABIAAQAIAAEABAALAAIABQABAAEABAABAAAACgAeADQAAWxhdG4ACAAEAAAAAP\/\/AAEAAAABc2l6ZQAIAAQAAACgAAAAAAAAAAAAAAAAAAAAAQAAAADiAevnAAAAAOQSF3AAAAAA5BIXcA==\";\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        byte[] ttfBytes = Base64.getDecoder().decode(TTF_BYTES);\n+        ByteArrayInputStream ttfStream = new ByteArrayInputStream(ttfBytes);\n+        Font f1 = Font.createFont(Font.TRUETYPE_FONT, ttfStream).deriveFont(80f);\n+\n+        \/\/ Test emoji sequence, using \"ccmp\" feature and ZWJ (zero-width joiner):\n+        \/\/ - person with blonde hair\n+        \/\/ - emoji modifier fitzpatrick type 4\n+        \/\/ - zero-width joiner\n+        \/\/ - female sign\n+        \/\/ - variation selector 16\n+        \/\/ Does not require the use of the TextAttribute.LIGATURES_ON attribute.\n+        char[] text1 = \"\\ud83d\\udc71\\ud83c\\udffd\\u200d\\u2640\\ufe0f\".toCharArray();\n+        FontRenderContext frc = new FontRenderContext(null, true, true);\n+        GlyphVector gv1 = f1.layoutGlyphVector(frc, text1, 0, text1.length, 0);\n+        checkOneGlyph(gv1, text1, 12);\n+\n+        \/\/ Test regular ligature, using \"liga\" feature: \"ab\" -> replacement\n+        \/\/ Requires the use of the TextAttribute.LIGATURES_ON attribute.\n+        char[] text2 = \"ab\".toCharArray();\n+        Font f2 = f1.deriveFont(Map.of(TextAttribute.LIGATURES, TextAttribute.LIGATURES_ON));\n+        GlyphVector gv2 = f2.layoutGlyphVector(frc, text2, 0, text2.length, 0);\n+        checkOneGlyph(gv2, text2, 11);\n+    }\n+\n+    private static void checkOneGlyph(GlyphVector gv, char[] text, int expectedCode) {\n+        int glyphs = gv.getNumGlyphs();\n+        if (glyphs != 1) {\n+            throw new RuntimeException(\"Unexpected number of glyphs for text \" +\n+                new String(text) + \": \" + glyphs);\n+        }\n+        int code = gv.getGlyphCode(0);\n+        if (code != expectedCode) {\n+            throw new RuntimeException(\"Unexpected glyph code for text \" +\n+                new String(text) + \": \" + expectedCode + \" != \" + code);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/GlyphVector\/GlyphVectorGsubTest.java","additions":164,"deletions":0,"binary":false,"changes":164,"status":"added"}]}