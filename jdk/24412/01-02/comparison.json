{"files":[{"patch":"@@ -30,0 +30,3 @@\n+import static sun.font.FontUtilities.isDefaultIgnorable;\n+import static sun.font.FontUtilities.isIgnorableWhitespace;\n+\n@@ -141,6 +144,0 @@\n-    \/\/ Matches behavior in e.g. CMap.getControlCodeGlyph(int, boolean)\n-    \/\/ and RasterPrinterJob.removeControlChars(String)\n-    private static boolean isIgnorableWhitespace(int code) {\n-        return code == 0x0009 || code == 0x000a || code == 0x000d;\n-    }\n-\n@@ -171,1 +168,1 @@\n-            if (!raw && (FontUtilities.isDefaultIgnorable(index) || isIgnorableWhitespace(index))) {\n+            if (isIgnorableWhitespace(index) || (isDefaultIgnorable(index) && !raw)) {\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/font\/CCharToGlyphMapper.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -549,3 +549,2 @@\n-            int controlGlyph = getControlCodeGlyph(charCode, true);\n-            if (controlGlyph >= 0) {\n-                return (char)controlGlyph;\n+            if (isSurrogate(charCode)) {\n+                return 0;\n@@ -781,4 +780,2 @@\n-            final int origCharCode = charCode;\n-            int controlGlyph = getControlCodeGlyph(charCode, true);\n-            if (controlGlyph >= 0) {\n-                return (char)controlGlyph;\n+            if (isSurrogate(charCode)) {\n+                return 0;\n@@ -861,5 +858,3 @@\n-            final int origCharCode = charCode;\n-            int controlGlyph = getControlCodeGlyph(charCode, true);\n-            if (controlGlyph >= 0) {\n-                return (char)controlGlyph;\n-            }\n+             if (isSurrogate(charCode)) {\n+                 return 0;\n+             }\n@@ -1023,5 +1018,0 @@\n-            final int origCharCode = charCode;\n-            int controlGlyph = getControlCodeGlyph(charCode, false);\n-            if (controlGlyph >= 0) {\n-                return (char)controlGlyph;\n-            }\n@@ -1063,11 +1053,2 @@\n-    final int getControlCodeGlyph(int charCode, boolean noSurrogates) {\n-        if (charCode < 0x0010) {\n-            switch (charCode) {\n-            case 0x0009:\n-            case 0x000a:\n-            case 0x000d: return CharToGlyphMapper.INVISIBLE_GLYPH_ID;\n-            }\n-         } else if (noSurrogates && charCode >= 0xFFFF) {\n-            return 0;\n-        }\n-        return -1;\n+    private static boolean isSurrogate(int charCode) {\n+        return charCode >= 0xFFFF;\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/CMap.java","additions":9,"deletions":28,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -45,0 +45,3 @@\n+import static sun.font.FontUtilities.isDefaultIgnorable;\n+import static sun.font.FontUtilities.isIgnorableWhitespace;\n+\n@@ -120,1 +123,1 @@\n-        if (!raw && FontUtilities.isDefaultIgnorable(unicode)) {\n+        if (isIgnorableWhitespace(unicode) || (isDefaultIgnorable(unicode) && !raw)) {\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/CompositeGlyphMapper.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -372,0 +372,14 @@\n+    \/**\n+     * Checks whether or not the specified codepoint is whitespace which is\n+     * ignorable at the shaping stage of text rendering. These ignorable\n+     * whitespace characters should be used prior to text shaping and\n+     * rendering to determine the position of the text, but are not themselves\n+     * rendered.\n+     *\n+     * @param ch the codepoint to check\n+     * @return whether the specified codepoint is ignorable whitespace\n+     *\/\n+    public static boolean isIgnorableWhitespace(int ch) {\n+        return ch == 0x0009 || ch == 0x000a || ch == 0x000d;\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/FontUtilities.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -31,0 +31,3 @@\n+import static sun.font.FontUtilities.isDefaultIgnorable;\n+import static sun.font.FontUtilities.isIgnorableWhitespace;\n+\n@@ -61,1 +64,1 @@\n-        if (!raw && FontUtilities.isDefaultIgnorable(charCode)) {\n+        if (isIgnorableWhitespace(charCode) || (isDefaultIgnorable(charCode) && !raw)) {\n@@ -87,1 +90,1 @@\n-        if (!raw && FontUtilities.isDefaultIgnorable(charCode)) {\n+        if (isIgnorableWhitespace(charCode) || (isDefaultIgnorable(charCode) && !raw)) {\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/TrueTypeGlyphMapper.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -34,0 +34,3 @@\n+import static sun.font.FontUtilities.isDefaultIgnorable;\n+import static sun.font.FontUtilities.isIgnorableWhitespace;\n+\n@@ -81,1 +84,1 @@\n-        if (FontUtilities.isDefaultIgnorable(ch) || isIgnorableWhitespace(ch)) {\n+        if (isIgnorableWhitespace(ch) || isDefaultIgnorable(ch)) { \/\/ raw = false\n@@ -106,1 +109,1 @@\n-            if (!raw && (FontUtilities.isDefaultIgnorable(ch) || isIgnorableWhitespace(ch))) {\n+            if (isIgnorableWhitespace(ch) || (isDefaultIgnorable(ch) && !raw)) {\n@@ -118,7 +121,0 @@\n-    \/\/ Matches behavior in e.g. CMap.getControlCodeGlyph(int, boolean)\n-    \/\/ and RasterPrinterJob.removeControlChars(String)\n-    \/\/ and CCharToGlyphMapper.isIgnorableWhitespace(int)\n-    private static boolean isIgnorableWhitespace(int code) {\n-        return code == 0x0009 || code == 0x000a || code == 0x000d;\n-    }\n-\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/Type1GlyphMapper.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,0 +93,2 @@\n+import static sun.font.FontUtilities.isIgnorableWhitespace;\n+\n@@ -2485,1 +2487,1 @@\n-            if (c > '\\r' || c < '\\t' || c == '\\u000b' || c == '\\u000c')  {\n+            if (!isIgnorableWhitespace(c)) {\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/RasterPrinterJob.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}