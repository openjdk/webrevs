{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -151,3 +151,3 @@\n-                \",causeSnippet\" + causeSnippet +\n-                (value == null? \"\" : \"value=\" + value) +\n-                (exception == null? \"\" : \"exception=\" + exception) +\n+                \",causeSnippet=\" + causeSnippet +\n+                (value == null? \"\" : \",value=\" + value) +\n+                (exception == null? \"\" : \",exception=\" + exception) +\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/SnippetEvent.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8350808\n+ * @summary Check for proper formatting of SnippetEvent.toString()\n+ * @run testng SnippetEventToStringTest\n+ *\/\n+\n+import java.util.Map;\n+import java.util.List;\n+\n+import jdk.jshell.JShell;\n+import jdk.jshell.SnippetEvent;\n+import jdk.jshell.execution.LocalExecutionControlProvider;\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.assertEquals;\n+\n+public class SnippetEventToStringTest {\n+\n+    @DataProvider(name = \"cases\")\n+    public String[][] sourceLevels() {\n+        return new String[][] {\n+            { \"*\",                              \",causeSnippet=null\" },\n+            { \"123\",                            \",value=123\" },\n+            { \"throw new Exception(\\\"foo\\\");\",  \",exception=jdk.jshell.EvalException: foo\" }\n+        };\n+    }\n+\n+    @Test(dataProvider = \"cases\")\n+    private void verifySnippetEvent(String source, String match) {\n+        try (JShell jsh = JShell.builder().executionEngine(new LocalExecutionControlProvider(), Map.of()).build()) {\n+            List<SnippetEvent> result = jsh.eval(source);\n+            assertEquals(result.size(), 1);\n+            String string = result.get(0).toString();\n+            if (!string.contains(match))\n+                throw new AssertionError(String.format(\"\\\"%s\\\" not found in \\\"%s\\\"\", match, string));\n+        }\n+    }\n+}\n","filename":"test\/langtools\/jdk\/jshell\/SnippetEventToStringTest.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"}]}