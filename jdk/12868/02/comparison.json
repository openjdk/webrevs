{"files":[{"patch":"@@ -4669,2 +4669,4 @@\n-                        \/\/ Exclude those ZoneText cases.\n-                        if (!(this instanceof ZoneTextPrinterParser)) {\n+                        \/\/ Exclude those cases.\n+                        if (length == position + 3 ||\n+                                context.charEquals(text.charAt(position + 3), '+') ||\n+                                context.charEquals(text.charAt(position + 3), '-')) {\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @modules jdk.localedata\n+ * @bug 8303440\n+ * @summary Test parsing \"UTC-XX:XX\" text works correctly\n+ *\/\n+package test.java.time.format;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.TextStyle;\n+import java.time.temporal.TemporalQueries;\n+import java.util.Locale;\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestUTCParse {\n+\n+    static {\n+        \/\/ Assuming CLDR's SHORT name for \"America\/Los_Angeles\"\n+        \/\/ produces \"UTC\\u212208:00\"\n+        System.setProperty(\"java.locale.providers\", \"CLDR\");\n+    }\n+\n+    @DataProvider\n+    public Object[][] utcZoneIdStrings() {\n+        return new Object[][] {\n+            {\"UTC\"},\n+            {\"UTC+01:30\"},\n+            {\"UTC-01:30\"},\n+        };\n+    }\n+\n+    @Test\n+    public void testUTCShortNameRoundTrip() {\n+        var fmt = DateTimeFormatter.ofPattern(\"z\", Locale.FRANCE);\n+        var zdt = ZonedDateTime.of(2023, 3, 3, 0, 0, 0, 0, ZoneId.of(\"America\/Los_Angeles\"));\n+        var formatted = fmt.format(zdt);\n+        assertEquals(formatted, \"UTC\\u221208:00\");\n+        assertEquals(fmt.parse(formatted).query(TemporalQueries.zoneId()), zdt.getZone());\n+    }\n+\n+    @Test(dataProvider = \"utcZoneIdStrings\")\n+    public void testUTCOffsetRoundTrip(String zidString) {\n+        var fmt = new DateTimeFormatterBuilder()\n+                .appendZoneText(TextStyle.NARROW)\n+                .toFormatter();\n+        var zid = ZoneId.of(zidString);\n+        assertEquals(fmt.parse(zidString).query(TemporalQueries.zoneId()), zid);\n+    }\n+}\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/format\/TestUTCParse.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"}]}