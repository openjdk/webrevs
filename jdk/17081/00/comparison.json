{"files":[{"patch":"@@ -246,0 +246,7 @@\n+\n+                final SunGraphics2D g2d = (SunGraphics2D) bsg;\n+                final Color oldBg = g2d.getBackground();\n+                g2d.setBackground(paintingComponent.getBackground());\n+                g2d.clearRect(x, y, w, h);\n+                g2d.setBackground(oldBg);\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/BufferStrategyPaintManager.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Point;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.image.BufferedImage;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8187759\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Test to check if JFrame background is refreshed in Linux.\n+ * @requires (os.family == \"linux\")\n+ * @run main\/manual JFrameBackgroundRefreshTest\n+ *\/\n+\n+public class JFrameBackgroundRefreshTest {\n+    public static JFrame frame;\n+    public static PassFailJFrame passFailJFrame;\n+    private static final BufferedImage test = generateImage();\n+    private static Point p = new Point();\n+\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            try {\n+                JFrameBackgroundRefreshTest.initialize();\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+        passFailJFrame.awaitAndCheck();\n+    }\n+\n+    public static void initialize() throws Exception {\n+        final String INSTRUCTIONS = \"\"\"\n+                Instructions to Test:\n+                1. Move the \"text\" label around the frame using Mouse.\n+                2. For every move if the label is painted over the frame\n+                without previously painted label cleared, then the Test is FAIL.\n+                3. For every move if the label is painted over the frame\n+                by clearing previously painted label, then the Test is PASS.\n+                \"\"\";\n+\n+        frame = new JFrame(\"JFrame Background refresh test\");\n+        passFailJFrame = new PassFailJFrame(\"Test Instructions\",\n+                INSTRUCTIONS, 5L, 6, 45);\n+\n+        PassFailJFrame.addTestWindow(frame);\n+        PassFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.VERTICAL);\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setUndecorated(true);\n+        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);\n+        frame.setBackground(new Color(0, 0, 0, 0));\n+        frame.setContentPane(new TranslucentPane());\n+        frame.addMouseMotionListener(new MouseDragListener());\n+        frame.setVisible(true);\n+\n+    }\n+    private static class MouseDragListener extends MouseAdapter {\n+        @Override\n+        public void mouseMoved(MouseEvent e) {\n+            p = e.getPoint();\n+            frame.repaint();\n+        }\n+    }\n+\n+    \/** Capture an image of any component **\/\n+    private static BufferedImage getImage(Component c) {\n+        if(c==null) return null;\n+        BufferedImage image = new BufferedImage(c.getWidth(),\n+                c.getHeight(),\n+                BufferedImage.TYPE_INT_ARGB);\n+        Graphics2D g = image.createGraphics();\n+        c.printAll(g);\n+        g.dispose();\n+        return image;\n+    }\n+\n+    \/** Generates a dummy image to be painted on the frame **\/\n+    private static BufferedImage generateImage() {\n+        JLabel label = new JLabel(\"test\");\n+        label.setFont(new Font(\"Arial\", Font.BOLD, 24));\n+        label.setSize(label.getPreferredSize());\n+        return getImage(label);\n+    }\n+\n+    public static class TranslucentPane extends JPanel {\n+        public TranslucentPane() {\n+            setOpaque(false);\n+        }\n+        @Override\n+        protected void paintComponent(Graphics g) {\n+            super.paintComponent(g);\n+            Graphics2D g2d = (Graphics2D) g.create();\n+            g2d.setColor(new Color(0,0,0,0));\n+            g2d.fillRect(0, 0, getWidth(), getHeight());\n+            g2d.drawImage(test, p.x, p.y, this);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFrame\/JFrameBackgroundRefreshTest.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"}]}