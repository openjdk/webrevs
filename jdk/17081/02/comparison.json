{"files":[{"patch":"@@ -246,0 +246,9 @@\n+\n+                if (!bufferComponent.isOpaque()) {\n+                    final SunGraphics2D g2d = (SunGraphics2D) bsg;\n+                    final Color oldBg = g2d.getBackground();\n+                    g2d.setBackground(paintingComponent.getBackground());\n+                    g2d.clearRect(x, y, w, h);\n+                    g2d.setBackground(oldBg);\n+                }\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/BufferStrategyPaintManager.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,208 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.MouseInfo;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import javax.imageio.ImageIO;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8187759\n+ * @summary Test to check if JFrame background is refreshed in Linux.\n+ * @requires (os.family == \"linux\")\n+ * @run main JFrameBackgroundRefreshTest\n+ *\/\n+\n+public class JFrameBackgroundRefreshTest {\n+    public static JFrame frame;\n+    private static final BufferedImage test = generateImage();\n+    private static Point p = new Point();\n+    private static Robot robot;\n+    private static JFrame whiteFrame;\n+    private static Point frameLocation;\n+    private static int frameCenterX, frameCenterY, awayX, awayY;\n+    private static int imageCenterX, imageCenterY;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                try {\n+                    JFrameBackgroundRefreshTest.initialize();\n+                } catch (Exception e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                frameLocation = whiteFrame.getLocationOnScreen();\n+                frameCenterX = frameLocation.x + whiteFrame.getWidth() \/ 2;\n+                frameCenterY = frameLocation.y + whiteFrame.getHeight() \/ 2;\n+                awayX = frameLocation.x + whiteFrame.getWidth() + 100;\n+                awayY = frameLocation.y + whiteFrame.getHeight() \/ 2;\n+                imageCenterX = p.x + test.getWidth() \/ 2;\n+                imageCenterY = p.y + test.getHeight() \/ 2;\n+            });\n+            robot.delay(100);\n+            robot.waitForIdle();\n+            robot.mouseMove(imageCenterX, imageCenterY);\n+            robot.delay(100);\n+            robot.waitForIdle();\n+            moveMouseSlowly(frameCenterX, frameCenterY);\n+            robot.delay(1000);\n+            robot.waitForIdle();\n+\n+            moveMouseSlowly(awayX, awayY);\n+            robot.delay(100);\n+            robot.waitForIdle();\n+            Rectangle screenCaptureRect = new Rectangle(frameCenterX - 50,\n+                    frameCenterY - 50, 100, 100);\n+            BufferedImage bufferedImage = robot.createScreenCapture(screenCaptureRect);\n+\n+            if (!compareImages(bufferedImage)) {\n+                try {\n+                    ImageIO.write(bufferedImage, \"png\",\n+                            new File(\"FailureImage.png\"));\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                }\n+                throw new RuntimeException(\"Test Failed!\");\n+            }\n+            System.out.println(\"Test Passed!\");\n+        } finally {\n+            if (frame != null) {\n+                frame.dispose();\n+            }\n+            if (whiteFrame != null) {\n+                whiteFrame.dispose();\n+            }\n+        }\n+    }\n+\n+    private static void moveMouseSlowly( int targetX, int targetY) {\n+        Point currentMousePos = MouseInfo.getPointerInfo().getLocation();\n+        int currentX = currentMousePos.x;\n+        int currentY = currentMousePos.y;\n+        int deltaX = targetX - currentX;\n+        int deltaY = targetY - currentY;\n+        int steps = 50;\n+        double stepX = (double) deltaX \/ steps;\n+        double stepY = (double) deltaY \/ steps;\n+        for (int i = 1; i <= steps; i++) {\n+            int nextX = currentX + (int) Math.round(i * stepX);\n+            int nextY = currentY + (int) Math.round(i * stepY);\n+            robot.mouseMove(nextX, nextY);\n+            robot.delay(10);\n+        }\n+        robot.mouseMove(targetX, targetY);\n+    }\n+\n+    private static boolean compareImages(BufferedImage bufferedImage) {\n+        int sampleRGB = bufferedImage.getRGB(0,0);\n+        for (int x = 0; x < bufferedImage.getWidth(); x++) {\n+            for (int y = 0; y < bufferedImage.getHeight(); y++) {\n+                if (bufferedImage.getRGB(x, y) != sampleRGB) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public static void initialize() throws Exception {\n+        frame = new JFrame(\"JFrame Background refresh test\");\n+        whiteFrame = new JFrame(\"White Frame\");\n+        robot = new Robot();\n+        whiteFrame.setSize(200, 200);\n+        whiteFrame.setBackground(Color.WHITE);\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setUndecorated(true);\n+        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);\n+        frame.setBackground(new Color(0, 0, 0, 0));\n+        frame.setContentPane(new TranslucentPane());\n+        frame.addMouseMotionListener(new MouseDragListener());\n+        whiteFrame.setLocationRelativeTo(null);\n+        whiteFrame.setVisible(true);\n+        frame.setVisible(true);\n+        frame.setAlwaysOnTop(true);\n+    }\n+    private static class MouseDragListener extends MouseAdapter {\n+        @Override\n+        public void mouseMoved(MouseEvent e) {\n+            p = e.getPoint();\n+            frame.repaint();\n+        }\n+    }\n+\n+    \/** Capture an image of any component **\/\n+    private static BufferedImage getImage(Component c) {\n+        if (c == null) {\n+            return null;\n+        }\n+        BufferedImage image = new BufferedImage(c.getWidth(),\n+                c.getHeight(), BufferedImage.TYPE_INT_ARGB);\n+        Graphics2D g = image.createGraphics();\n+        c.printAll(g);\n+        g.dispose();\n+        return image;\n+    }\n+\n+    \/** Generates a dummy image to be painted on the frame **\/\n+    private static BufferedImage generateImage() {\n+        JLabel label = new JLabel(\"test\");\n+        label.setFont(new Font(\"Arial\", Font.BOLD, 24));\n+        label.setSize(label.getPreferredSize());\n+        return getImage(label);\n+    }\n+\n+    public static class TranslucentPane extends JPanel {\n+        public TranslucentPane() {\n+            setOpaque(false);\n+        }\n+        @Override\n+        protected void paintComponent(Graphics g) {\n+            super.paintComponent(g);\n+            Graphics2D g2d = (Graphics2D) g.create();\n+            g2d.setColor(new Color(0,0,0,0));\n+            g2d.fillRect(0, 0, getWidth(), getHeight());\n+            g2d.drawImage(test, p.x, p.y, this);\n+            g2d.dispose();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFrame\/JFrameBackgroundRefreshTest.java","additions":208,"deletions":0,"binary":false,"changes":208,"status":"added"}]}