{"files":[{"patch":"@@ -247,5 +247,7 @@\n-                final SunGraphics2D g2d = (SunGraphics2D) bsg;\n-                final Color oldBg = g2d.getBackground();\n-                g2d.setBackground(paintingComponent.getBackground());\n-                g2d.clearRect(x, y, w, h);\n-                g2d.setBackground(oldBg);\n+                if (!bufferComponent.isOpaque()) {\n+                    final SunGraphics2D g2d = (SunGraphics2D) bsg;\n+                    final Color oldBg = g2d.getBackground();\n+                    g2d.setBackground(paintingComponent.getBackground());\n+                    g2d.clearRect(x, y, w, h);\n+                    g2d.setBackground(oldBg);\n+                }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/BufferStrategyPaintManager.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.awt.MouseInfo;\n@@ -30,0 +31,2 @@\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n@@ -33,0 +36,3 @@\n+import java.io.File;\n+import java.io.IOException;\n+import javax.imageio.ImageIO;\n@@ -42,2 +48,0 @@\n- * @library \/java\/awt\/regtesthelpers\n- * @build PassFailJFrame\n@@ -46,1 +50,1 @@\n- * @run main\/manual JFrameBackgroundRefreshTest\n+ * @run main JFrameBackgroundRefreshTest\n@@ -51,1 +55,0 @@\n-    public static PassFailJFrame passFailJFrame;\n@@ -54,0 +57,5 @@\n+    private static Robot robot;\n+    private static JFrame whiteFrame;\n+    private static Point frameLocation;\n+    private static int frameCenterX, frameCenterY, awayX, awayY;\n+    private static int imageCenterX, imageCenterY;\n@@ -56,5 +64,50 @@\n-        SwingUtilities.invokeAndWait(() -> {\n-            try {\n-                JFrameBackgroundRefreshTest.initialize();\n-            } catch (Exception e) {\n-                throw new RuntimeException(e);\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                try {\n+                    JFrameBackgroundRefreshTest.initialize();\n+                } catch (Exception e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                frameLocation = whiteFrame.getLocationOnScreen();\n+                frameCenterX = frameLocation.x + whiteFrame.getWidth() \/ 2;\n+                frameCenterY = frameLocation.y + whiteFrame.getHeight() \/ 2;\n+                awayX = frameLocation.x + whiteFrame.getWidth() + 100;\n+                awayY = frameLocation.y + whiteFrame.getHeight() \/ 2;\n+                imageCenterX = p.x + test.getWidth() \/ 2;\n+                imageCenterY = p.y + test.getHeight() \/ 2;\n+            });\n+            robot.delay(100);\n+            robot.waitForIdle();\n+            robot.mouseMove(imageCenterX, imageCenterY);\n+            robot.delay(100);\n+            robot.waitForIdle();\n+            moveMouseSlowly(frameCenterX, frameCenterY);\n+            robot.delay(1000);\n+            robot.waitForIdle();\n+\n+            moveMouseSlowly(awayX, awayY);\n+            robot.delay(100);\n+            robot.waitForIdle();\n+            Rectangle screenCaptureRect = new Rectangle(frameCenterX - 50,\n+                    frameCenterY - 50, 100, 100);\n+            BufferedImage bufferedImage = robot.createScreenCapture(screenCaptureRect);\n+\n+            if (!compareImages(bufferedImage)) {\n+                try {\n+                    ImageIO.write(bufferedImage, \"png\",\n+                            new File(\"FailureImage.png\"));\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                }\n+                throw new RuntimeException(\"Test Failed!\");\n+            }\n+            System.out.println(\"Test Passed!\");\n+        } finally {\n+            if (frame != null) {\n+                frame.dispose();\n+            }\n+            if (whiteFrame != null) {\n+                whiteFrame.dispose();\n@@ -62,2 +115,1 @@\n-        });\n-        passFailJFrame.awaitAndCheck();\n+        }\n@@ -66,9 +118,17 @@\n-    public static void initialize() throws Exception {\n-        final String INSTRUCTIONS = \"\"\"\n-                Instructions to Test:\n-                1. Move the \"text\" label around the frame using Mouse.\n-                2. For every move if the label is painted over the frame\n-                without previously painted label cleared, then the Test is FAIL.\n-                3. For every move if the label is painted over the frame\n-                by clearing previously painted label, then the Test is PASS.\n-                \"\"\";\n+    private static void moveMouseSlowly( int targetX, int targetY) {\n+        Point currentMousePos = MouseInfo.getPointerInfo().getLocation();\n+        int currentX = currentMousePos.x;\n+        int currentY = currentMousePos.y;\n+        int deltaX = targetX - currentX;\n+        int deltaY = targetY - currentY;\n+        int steps = 50;\n+        double stepX = (double) deltaX \/ steps;\n+        double stepY = (double) deltaY \/ steps;\n+        for (int i = 1; i <= steps; i++) {\n+            int nextX = currentX + (int) Math.round(i * stepX);\n+            int nextY = currentY + (int) Math.round(i * stepY);\n+            robot.mouseMove(nextX, nextY);\n+            robot.delay(10);\n+        }\n+        robot.mouseMove(targetX, targetY);\n+    }\n@@ -76,3 +136,11 @@\n-        frame = new JFrame(\"JFrame Background refresh test\");\n-        passFailJFrame = new PassFailJFrame(\"Test Instructions\",\n-                INSTRUCTIONS, 5L, 6, 45);\n+    private static boolean compareImages(BufferedImage bufferedImage) {\n+        int sampleRGB = bufferedImage.getRGB(0,0);\n+        for (int x = 0; x < bufferedImage.getWidth(); x++) {\n+            for (int y = 0; y < bufferedImage.getHeight(); y++) {\n+                if (bufferedImage.getRGB(x, y) != sampleRGB) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n@@ -80,2 +148,6 @@\n-        PassFailJFrame.addTestWindow(frame);\n-        PassFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.VERTICAL);\n+    public static void initialize() throws Exception {\n+        frame = new JFrame(\"JFrame Background refresh test\");\n+        whiteFrame = new JFrame(\"White Frame\");\n+        robot = new Robot();\n+        whiteFrame.setSize(200, 200);\n+        whiteFrame.setBackground(Color.WHITE);\n@@ -88,0 +160,2 @@\n+        whiteFrame.setLocationRelativeTo(null);\n+        whiteFrame.setVisible(true);\n@@ -89,0 +163,1 @@\n+        frame.setAlwaysOnTop(true);\n@@ -90,1 +165,0 @@\n-\n@@ -105,2 +179,1 @@\n-                c.getHeight(),\n-                BufferedImage.TYPE_INT_ARGB);\n+                c.getHeight(), BufferedImage.TYPE_INT_ARGB);\n@@ -125,1 +198,0 @@\n-\n","filename":"test\/jdk\/javax\/swing\/JFrame\/JFrameBackgroundRefreshTest.java","additions":101,"deletions":29,"binary":false,"changes":130,"status":"modified"}]}