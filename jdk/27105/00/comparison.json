{"files":[{"patch":"@@ -241,1 +241,6 @@\n-            return signers.clone();\n+            if (signers != null) {\n+                return signers.clone();\n+\n+            } else {\n+                return null;\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/security\/CodeSource.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.net.URL;\n+import java.net.URI;\n+import java.security.CodeSource;\n+import java.security.PublicKey;\n+import java.security.cert.Certificate;\n+\n+\/**\n+ * @test\n+ * @bug 8366522\n+ * @summary Verify that NPE is not thrown CodeSource.getCodeSigners() when\n+ *          CodeSource is created with empty or null certs argument, or\n+ *          there are no X509 certificates in certs\n+ *\/\n+public class GetCodeSignersNoCerts {\n+    private static final Certificate NON_X509_CERT = new Certificate(\"\") {\n+        @Override\n+        public byte[] getEncoded() {\n+            return new byte[0];\n+        }\n+\n+        @Override\n+        public void verify(PublicKey key) {\n+        }\n+\n+        @Override\n+        public void verify(PublicKey key, String sigProvider) {\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"\";\n+        }\n+\n+        @Override\n+        public PublicKey getPublicKey() {\n+            return null;\n+        }\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        URL location = URI.create(\"file:\/\/\/ignored\").toURL();\n+\n+        CodeSource cs = new CodeSource(location, new Certificate[0]);\n+        cs.getCodeSigners();\n+\n+        cs = new CodeSource(location, (Certificate[]) null);\n+        cs.getCodeSigners();\n+\n+        cs = new CodeSource(location, new Certificate[]{NON_X509_CERT});\n+        cs.getCodeSigners();\n+    }\n+}\n","filename":"test\/jdk\/java\/security\/CodeSource\/GetCodeSignersNoCerts.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}