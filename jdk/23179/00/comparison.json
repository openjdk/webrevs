{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -549,1 +549,1 @@\n-        result = c.type;\n+        result = tree.type = c.type;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Enter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8205418 8207229 8207230 8230847 8245786 8247334 8248641 8240658 8246774 8274347\n+ * @bug 8205418 8207229 8207230 8230847 8245786 8247334 8248641 8240658 8246774 8274347 8347989\n@@ -55,0 +55,1 @@\n+import com.sun.source.tree.ReturnTree;\n@@ -76,0 +77,1 @@\n+import java.util.Objects;\n@@ -77,0 +79,4 @@\n+import javax.lang.model.type.DeclaredType;\n+import javax.lang.model.type.TypeKind;\n+import javax.lang.model.type.TypeMirror;\n+import javax.lang.model.type.TypeVariable;\n@@ -96,0 +102,1 @@\n+        new TestGetScopeResult().testClassTypeSetInEnterGetScope();\n@@ -888,0 +895,74 @@\n+    \/\/JDK-8347989\n+    void testClassTypeSetInEnterGetScope() throws IOException {\n+        JavacTool c = JavacTool.create();\n+        try (StandardJavaFileManager fm = c.getStandardFileManager(null, null, null)) {\n+            String code = \"\"\"\n+                          import java.util.*;\n+                          class Test<T extends Test&CharSequence> extends ArrayList\n+                                                                  implements List {\n+                              private int test(boolean b) {\n+                                  int v = b ? test(!b) : 0;\n+                                  return v;\n+                              }\n+                          }\n+                          \"\"\";\n+            Context ctx = new Context();\n+            TestAnalyzer.preRegister(ctx);\n+            JavaFileObject input =\n+                    SimpleJavaFileObject.forSource(URI.create(\"myfo:\/\/\/Test.java\"), code);\n+            JavacTask t = (JavacTask) c.getTask(null, fm, null, null, null,\n+                                                List.of(input),\n+                                                ctx);\n+            Trees trees = Trees.instance(t);\n+            List<List<String>> actual = new ArrayList<>();\n+\n+            t.addTaskListener(new TaskListener() {\n+                @Override\n+                public void finished(TaskEvent e) {\n+                    if (e.getKind() != TaskEvent.Kind.ENTER) {\n+                        return ;\n+                    }\n+\n+                    new TreePathScanner<Void, Void>() {\n+                        @Override\n+                        public Void visitClass(ClassTree node, Void p) {\n+                            TypeMirror type = trees.getTypeMirror(getCurrentPath());\n+                            if (type == null) {\n+                                throw new AssertionError(\"Expected class type 'Test', but got: null\");\n+                            }\n+                            assertEquals(TypeKind.DECLARED, type.getKind());\n+                            DeclaredType decl = (DeclaredType) type;\n+                            TypeVariable tvar = (TypeVariable) decl.getTypeArguments().get(0);\n+                            assertEquals(\"T\", tvar.asElement().getSimpleName().toString());\n+                            assertEquals(\"Test&java.lang.CharSequence\", tvar.getUpperBound().toString());\n+                            TypeElement clazz = (TypeElement) decl.asElement();\n+                            assertEquals(\"java.util.ArrayList\", clazz.getSuperclass().toString().toString());\n+                            assertEquals(\"java.util.List\", clazz.getInterfaces().toString().toString());\n+                            return super.visitClass(node, p);\n+                        }\n+                        @Override\n+                        public Void visitReturn(ReturnTree rt, Void p) {\n+                            Scope scope = trees.getScope(getCurrentPath());\n+                            actual.add(dumpScope(scope));\n+                            return super.visitReturn(rt, p);\n+                        }\n+                    }.scan(e.getCompilationUnit(), null);\n+                }\n+            });\n+\n+            t.analyze();\n+\n+            List<List<String>> expected =\n+                    List.of(List.of(\"v:int\",\n+                                    \"b:boolean\",\n+                                    \"super:java.util.ArrayList\",\n+                                    \"this:Test<T>\",\n+                                    \"T:T\"\n+                                ));\n+\n+            if (!expected.equals(actual)) {\n+                throw new AssertionError(\"Unexpected Scope content: \" + actual);\n+            }\n+        }\n+    }\n+\n@@ -911,0 +992,6 @@\n+    private void assertEquals(Object expected, Object actual) {\n+        if (!Objects.equals(expected, actual)) {\n+            throw new AssertionError(\"Expected: '\" + expected + \"', \" +\n+                                     \"but got: '\" + actual + \"'\");\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/api\/TestGetScopeResult.java","additions":89,"deletions":2,"binary":false,"changes":91,"status":"modified"}]}