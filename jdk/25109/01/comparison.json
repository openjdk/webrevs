{"files":[{"patch":"@@ -587,0 +587,1 @@\n+  {\"jdk.module.addreads\", true},               \/\/ --add-reads\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -334,2 +334,1 @@\n-    if (matches_property_suffix(property_suffix, ADDREADS, ADDREADS_LEN) ||\n-        matches_property_suffix(property_suffix, PATCH, PATCH_LEN) ||\n+    if (matches_property_suffix(property_suffix, PATCH, PATCH_LEN) ||\n@@ -346,0 +345,1 @@\n+          matches_property_suffix(property_suffix, ADDREADS, ADDREADS_LEN) ||\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -144,2 +144,1 @@\n-               getProperty(\"jdk.module.limitmods\") == null &&     \/\/ --limit-modules\n-               getProperty(\"jdk.module.addreads.0\") == null;      \/\/ --add-reads\n+               getProperty(\"jdk.module.limitmods\") == null;       \/\/ --limit-modules\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleBootstrap.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -425,1 +425,0 @@\n- -runtime\/cds\/appcds\/jigsaw\/modulepath\/AddExports.java \\\n@@ -546,2 +545,0 @@\n- -runtime\/cds\/appcds\/jigsaw\/modulepath\/AddExports.java \\\n- -runtime\/cds\/appcds\/jigsaw\/modulepath\/AddOpens.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -48,1 +48,3 @@\n-    static final Path SRC = Paths.get(System.getProperty(\"test.src\")).resolve(\"src\");\n+    static final String SEP = File.separator;\n+    static final Path SRC = Paths.get(System.getProperty(\"test.src\")).\n+        resolve( \"..\" + SEP + \"jigsaw\" + SEP + \"modulepath\" + SEP + \"src\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/AddExports.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/modulepath\/AddExports.java","status":"renamed"},{"patch":"@@ -0,0 +1,234 @@\n+\/*\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test\n+ * @requires vm.cds\n+ * @requires vm.cds.supports.aot.class.linking\n+ * @comment work around JDK-8345635\n+ * @requires !vm.jvmci.enabled\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @run driver AddOpens\n+ * @summary sanity test the --add-opens option\n+ *\/\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.cds.CDSAppTester;\n+import jdk.test.lib.cds.SimpleCDSAppTester;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class AddOpens {\n+    private static final String SEP = File.separator;\n+\n+    private static final Path USER_DIR = Paths.get(CDSTestUtils.getOutputDir());\n+\n+    private static final Path SRC_DIR = Paths.get(System.getProperty(\"test.src\")).\n+        resolve( \"..\" + SEP + \"jigsaw\" + SEP + \"modulepath\" + SEP + \"src\");\n+\n+    private static final Path MODS_DIR = Paths.get(\"mods\");\n+\n+    \/\/ the module name of the test module\n+    private static final String TEST_MODULE1 = \"com.simple\";\n+\n+    \/\/ the module main class\n+    private static final String MAIN_CLASS = \"com.simple.Main\";\n+\n+    private static Path moduleDir = null;\n+    private static Path moduleDir2 = null;\n+    private static Path destJar = null;\n+\n+    private static String addOpensArg = \"java.base\/java.lang=\" + TEST_MODULE1;\n+    private static String addOpensAllUnnamed = \"java.base\/java.lang=ALL-UNNAMED\";\n+    private static String extraOpts[][] =\n+        {{\"-Xlog:cds\", \"-Xlog:cds\"},\n+         {\"--add-opens\", addOpensArg}};\n+    private static String expectedOutput[] =\n+        { \"[class,load] com.simple.Main source: shared objects file\",\n+          \"method.setAccessible succeeded!\"};\n+\n+    public static void buildTestModule() throws Exception {\n+\n+        \/\/ javac -d mods\/$TESTMODULE --module-path MOD_DIR src\/$TESTMODULE\/**\n+        JarBuilder.compileModule(SRC_DIR.resolve(TEST_MODULE1),\n+                                 MODS_DIR.resolve(TEST_MODULE1),\n+                                 MODS_DIR.toString());\n+\n+        moduleDir = Files.createTempDirectory(USER_DIR, \"mlib\");\n+        moduleDir2 = Files.createTempDirectory(USER_DIR, \"mlib2\");\n+\n+        Path srcJar = moduleDir.resolve(TEST_MODULE1 + \".jar\");\n+        destJar = moduleDir2.resolve(TEST_MODULE1 + \".jar\");\n+        String classes = MODS_DIR.resolve(TEST_MODULE1).toString();\n+        JarBuilder.createModularJar(srcJar.toString(), classes, MAIN_CLASS);\n+        Files.copy(srcJar, destJar);\n+\n+    }\n+\n+    static int testCount = 0;\n+    static void printComment(String comment) {\n+        testCount ++;\n+        System.out.println(\"======================================================================\");\n+        System.out.println(\"TESTCASE \" + testCount + \": \" + comment);\n+        System.out.println(\"======================================================================\");\n+    }\n+\n+    static SimpleCDSAppTester test(String comment, SimpleCDSAppTester tester) throws Exception {\n+        printComment(comment);\n+        return tester\n+            .setAssemblyChecker((OutputAnalyzer out) -> {\n+                    out.shouldContain(\"Full module graph = enabled\");\n+                    })\n+            .setProductionChecker((OutputAnalyzer out) -> {\n+                    out.shouldContain(expectedOutput[0]);\n+                    out.shouldContain(expectedOutput[1]);\n+                    })\n+            .runStaticWorkflow()\n+            .runAOTWorkflow();\n+    }\n+\n+    static class Tester1 extends CDSAppTester {\n+        public Tester1(String testName) {\n+            super(testName);\n+        }\n+\n+        @Override\n+        public String[] vmArgs(RunMode runMode) {\n+            if (runMode == RunMode.DUMP_STATIC) {\n+                return new String[] { \"-Xlog:cds\" };\n+            } else {\n+                return new String[] {\n+                    \"--add-opens\", addOpensArg, \"-Xlog:class+load=trace\",\n+                };\n+            }\n+        }\n+\n+        @Override\n+        public String classpath(RunMode runMode) {\n+            return destJar.toString();\n+        }\n+\n+        @Override\n+        public String modulepath(RunMode runMode) {\n+            return moduleDir.toString();\n+        }\n+\n+        @Override\n+        public String[] appCommandLine(RunMode runMode) {\n+            if (runMode == RunMode.TRAINING ||\n+                runMode == RunMode.ASSEMBLY ||\n+                runMode == RunMode.DUMP_STATIC) {\n+                return new String[] {\n+                    \"-m\", TEST_MODULE1,\n+                };\n+            } else {\n+                return new String[] {\n+                    \"-m\", TEST_MODULE1, \"with_add_opens\",\n+                };\n+            }\n+        }\n+\n+        @Override\n+        public void checkExecution(OutputAnalyzer out, RunMode runMode) throws Exception {\n+            if (runMode == RunMode.PRODUCTION) {\n+                out.shouldContain(expectedOutput[0]);\n+                out.shouldContain(expectedOutput[1]);\n+            } else if (runMode == RunMode.ASSEMBLY) {\n+                out.shouldContain(\"full module graph: enabled\");\n+            }\n+        }\n+    }\n+\n+    static class Tester2 extends CDSAppTester {\n+        public Tester2(String testName) {\n+            super(testName);\n+        }\n+\n+        @Override\n+        public String[] vmArgs(RunMode runMode) {\n+            return new String[] {\n+                \"--add-opens\", addOpensAllUnnamed, \"-Xlog:class+load=trace\",\n+            };\n+        }\n+\n+        @Override\n+        public String classpath(RunMode runMode) {\n+            return destJar.toString();\n+        }\n+\n+        @Override\n+        public String[] appCommandLine(RunMode runMode) {\n+            if (runMode == RunMode.TRAINING ||\n+                runMode == RunMode.ASSEMBLY ||\n+                runMode == RunMode.DUMP_STATIC) {\n+                return new String[] {\n+                    MAIN_CLASS,\n+                };\n+            } else {\n+                return new String[] {\n+                    MAIN_CLASS, \"with_add_opens\",\n+                };\n+            }\n+        }\n+\n+        @Override\n+        public void checkExecution(OutputAnalyzer out, RunMode runMode) throws Exception {\n+            if (runMode == RunMode.PRODUCTION) {\n+                out.shouldContain(expectedOutput[0]);\n+                out.shouldContain(expectedOutput[1]);\n+            } else if (runMode == RunMode.ASSEMBLY) {\n+                out.shouldContain(\"full module graph: enabled\");\n+            }\n+        }\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        \/\/ compile the modules and create the modular jar files\n+        buildTestModule();\n+        String appClasses[] = {MAIN_CLASS};\n+        OutputAnalyzer output;\n+\n+        test(\"Same --add-opens during ASSEMBLY\/DUMP_STATIC and PRODUCTION RunMode\",\n+            SimpleCDSAppTester.of(\"same-add-opens\")\n+                .classpath(destJar.toString())\n+                .addVmArgs(\"--add-opens\", addOpensArg, \"-Xlog:class+load=trace\")\n+                .modulepath(moduleDir.toString())\n+                .appCommandLine(\"-m\", TEST_MODULE1, \"with_add_opens\"));\n+\n+        printComment(\"no --add-opens during DUMP_STATIC RunMode; --add-opens during PRODUCTION RunMode\");\n+        Tester1 t1 = new Tester1(\"no-add-opens-in-DUMP_STATIC\");\n+        t1.run(\"AOT\");\n+        t1.run(\"STATIC\");\n+\n+        printComment(\"--add-opens ALL-UNNAMED during ASSEMBLY\/DUMP_STATIC and PRODUCTION RunMode\");\n+        Tester2 t2 = new Tester2(\"add-opens-ALL-UNNAMED\");\n+        t2.run(\"AOT\");\n+        t2.run(\"STATIC\");\n+\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/AddOpens.java","additions":234,"deletions":0,"binary":false,"changes":234,"status":"added"},{"patch":"@@ -0,0 +1,205 @@\n+\/*\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8354083\n+ * @requires vm.cds\n+ * @requires vm.cds.supports.aot.class.linking\n+ * @comment work around JDK-8345635\n+ * @requires !vm.jvmci.enabled\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @run driver AddReads\n+ * @summary sanity test the --add-reads option\n+ *\/\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.cds.CDSAppTester;\n+import jdk.test.lib.cds.SimpleCDSAppTester;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.Asserts;\n+\n+public class AddReads {\n+    private static final String SEP = File.separator;\n+\n+    private static final Path USER_DIR = Paths.get(CDSTestUtils.getOutputDir());\n+\n+    private static final Path SRC_DIR = Paths.get(System.getProperty(\"test.src\")).\n+        resolve( \"..\" + SEP + \"jigsaw\" + SEP + \"modulepath\" + SEP + \"src\");\n+\n+    private static final Path MODS_DIR = Paths.get(\"mods\");\n+\n+    \/\/ the module name of the test module\n+    private static final String MAIN_MODULE = \"com.norequires\";\n+    private static final String SUB_MODULE = \"org.astro\";\n+\n+    \/\/ the module main class\n+    private static final String MAIN_CLASS = \"com.norequires.Main\";\n+    private static final String APP_CLASS = \"org.astro.World\";\n+\n+    private static final String sharedClassA =\n+        \"[class,load] com.norequires.Main source: shared objects file\";\n+    private static final String sharedClassB =\n+        \"[class,load] org.astro.World source: shared objects file\";\n+    private static final String fmgEnabled = \"full module graph: enabled\";\n+    private static final String fmgDisabled = \"full module graph: disabled\";\n+    private static final String cannotAccess =\n+        \"class com.norequires.Main (in module com.norequires) cannot access class org.astro.World (in module org.astro)\";\n+\n+    private static Path moduleDir = null;\n+    private static Path subJar = null;\n+    private static Path mainJar = null;\n+\n+    public static void buildTestModule() throws Exception {\n+\n+        \/\/ javac -d mods\/$TESTMODULE src\/$TESTMODULE\/**\n+        JarBuilder.compileModule(SRC_DIR.resolve(SUB_MODULE),\n+                                       MODS_DIR.resolve(SUB_MODULE),\n+                                       null);\n+\n+        Asserts.assertTrue(CompilerUtils\n+            .compile(SRC_DIR.resolve(MAIN_MODULE),\n+                     MODS_DIR.resolve(MAIN_MODULE),\n+                     \"-cp\", MODS_DIR.resolve(SUB_MODULE).toString(),\n+                     \"--add-reads\", \"com.norequires=ALL-UNNAMED\"));\n+\n+        moduleDir = Files.createTempDirectory(USER_DIR, \"mlib\");\n+        subJar = moduleDir.resolve(SUB_MODULE + \".jar\");\n+        String classes = MODS_DIR.resolve(SUB_MODULE).toString();\n+        JarBuilder.createModularJar(subJar.toString(), classes, null);\n+\n+        mainJar = moduleDir.resolve(MAIN_MODULE + \".jar\");\n+        classes = MODS_DIR.resolve(MAIN_MODULE).toString();\n+        JarBuilder.createModularJar(mainJar.toString(), classes, MAIN_CLASS);\n+    }\n+\n+    static int testCount = 0;\n+    static void printComment(String comment) {\n+        testCount ++;\n+        System.out.println(\"======================================================================\");\n+        System.out.println(\"TESTCASE \" + testCount + \": \" + comment);\n+        System.out.println(\"======================================================================\");\n+    }\n+\n+    static SimpleCDSAppTester test(String comment, SimpleCDSAppTester tester) throws Exception {\n+        printComment(comment);\n+        return tester\n+            .setAssemblyChecker((OutputAnalyzer out) -> {\n+                    out.shouldContain(\"Full module graph = enabled\");\n+                    })\n+            .setProductionChecker((OutputAnalyzer out) -> {\n+                    out.shouldContain(\"use_full_module_graph = true; java.base\");\n+                    })\n+            .runStaticWorkflow()\n+            .runAOTWorkflow();\n+    }\n+\n+    static class Tester extends CDSAppTester {\n+        public Tester(String testName) {\n+            super(testName);\n+        }\n+\n+        @Override\n+        public String[] vmArgs(RunMode runMode) {\n+            if (runMode == RunMode.TRAINING ||\n+                runMode == RunMode.ASSEMBLY ||\n+                runMode == RunMode.DUMP_STATIC) {\n+                return new String[] {\n+                    \"--add-modules\", SUB_MODULE,\n+                    \"--add-reads\", \"com.norequires=\" + SUB_MODULE,\n+                    \"-Xlog:class+load,cds,class+path=info\",\n+                };\n+            } else {\n+                return new String[] {\n+                    \"--add-modules\", SUB_MODULE,\n+                    \"--add-reads\", \"com.norequires=ALL-UNNAMED\",\n+                    \"-Xlog:class+load,cds,class+path=info\",\n+                };\n+            }\n+        }\n+\n+        @Override\n+        public String classpath(RunMode runMode) {\n+            return subJar.toString();\n+        }\n+\n+\n+        @Override\n+        public String[] appCommandLine(RunMode runMode) {\n+            return new String[] {\n+                \"-m\", MAIN_MODULE,\n+            };\n+        }\n+\n+        @Override\n+        public String modulepath(RunMode runMode) {\n+            return moduleDir.toString();\n+        }\n+\n+        @Override\n+        public void checkExecution(OutputAnalyzer out, RunMode runMode) throws Exception {\n+            if (runMode == RunMode.PRODUCTION) {\n+                out.shouldContain(\"full module graph: disabled\");\n+                out.shouldContain(\"Mismatched values for property jdk.module.addreads: runtime com.norequires=ALL-UNNAMED dump time com.norequires=org.astro\");\n+            } else if (runMode == RunMode.ASSEMBLY) {\n+                out.shouldContain(\"full module graph: enabled\");\n+            } else {\n+                out.shouldHaveExitValue(0);\n+            }\n+        }\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        \/\/ compile the modules and create the modular jar files\n+        buildTestModule();\n+\n+        test(\"FMG should be enabled with '--add-reads com.norequires=org.astro'\",\n+             SimpleCDSAppTester.of(\"add-reads\")\n+                 .modulepath(moduleDir.toString())\n+                 .addVmArgs(\"--add-modules\", SUB_MODULE,\n+                            \"--add-reads\", \"com.norequires=\" + SUB_MODULE,\n+                            \"-Xlog:class+load,cds,class+path=info\")\n+                 .appCommandLine(\"-m\", MAIN_MODULE));\n+\n+        test(\"FMG should be enabled with '--add-reads com.norequires=org.astro'\",\n+             SimpleCDSAppTester.of(\"add-reads-with-classpath\")\n+                 .classpath(subJar.toString())\n+                 .modulepath(moduleDir.toString())\n+                 .addVmArgs(\"--add-modules\", SUB_MODULE,\n+                            \"--add-reads\", \"com.norequires=\" + SUB_MODULE,\n+                            \"-Xlog:class+load,cds,class+path=info\")\n+                 .appCommandLine(\"-m\", MAIN_MODULE));\n+\n+        printComment(\"FMG should be enabled with '--add-reads com.norequires=ALL-UNNAMED\");\n+        Tester t = new Tester(\"add-reads-ALL-UNNAMED\");\n+        t.setCheckExitValue(false);\n+        t.run(\"AOT\");\n+        t.run(\"STATIC\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/AddReads.java","additions":205,"deletions":0,"binary":false,"changes":205,"status":"added"},{"patch":"@@ -1,132 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/**\n- * @test\n- * @requires vm.cds\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n- * @run driver AddOpens\n- * @summary sanity test the --add-opens option\n- *\/\n-\n-import java.io.File;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-\n-import jdk.test.lib.cds.CDSTestUtils;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-public class AddOpens {\n-\n-    private static final Path USER_DIR = Paths.get(CDSTestUtils.getOutputDir());\n-\n-    private static final String TEST_SRC = System.getProperty(\"test.src\");\n-\n-    private static final Path SRC_DIR = Paths.get(TEST_SRC, \"src\");\n-    private static final Path MODS_DIR = Paths.get(\"mods\");\n-\n-    \/\/ the module name of the test module\n-    private static final String TEST_MODULE1 = \"com.simple\";\n-\n-    \/\/ the module main class\n-    private static final String MAIN_CLASS = \"com.simple.Main\";\n-\n-    private static Path moduleDir = null;\n-    private static Path moduleDir2 = null;\n-    private static Path destJar = null;\n-\n-    private static String addOpensArg = \"java.base\/java.lang=\" + TEST_MODULE1;\n-    private static String addOpensAllUnnamed = \"java.base\/java.lang=ALL-UNNAMED\";\n-    private static String extraOpts[][] =\n-        {{\"-Xlog:cds\", \"-Xlog:cds\"},\n-         {\"--add-opens\", addOpensArg}};\n-    private static String expectedOutput[] =\n-        { \"[class,load] com.simple.Main source: shared objects file\",\n-          \"method.setAccessible succeeded!\"};\n-\n-    public static void buildTestModule() throws Exception {\n-\n-        \/\/ javac -d mods\/$TESTMODULE --module-path MOD_DIR src\/$TESTMODULE\/**\n-        JarBuilder.compileModule(SRC_DIR.resolve(TEST_MODULE1),\n-                                 MODS_DIR.resolve(TEST_MODULE1),\n-                                 MODS_DIR.toString());\n-\n-        moduleDir = Files.createTempDirectory(USER_DIR, \"mlib\");\n-        moduleDir2 = Files.createTempDirectory(USER_DIR, \"mlib2\");\n-\n-        Path srcJar = moduleDir.resolve(TEST_MODULE1 + \".jar\");\n-        destJar = moduleDir2.resolve(TEST_MODULE1 + \".jar\");\n-        String classes = MODS_DIR.resolve(TEST_MODULE1).toString();\n-        JarBuilder.createModularJar(srcJar.toString(), classes, MAIN_CLASS);\n-        Files.copy(srcJar, destJar);\n-\n-    }\n-\n-    public static void main(String... args) throws Exception {\n-        \/\/ compile the modules and create the modular jar files\n-        buildTestModule();\n-        String appClasses[] = {MAIN_CLASS};\n-        OutputAnalyzer output;\n-\n-        for (int i = 0; i < 2; i++) {\n-            \/\/ create an archive with both -cp and --module-path, and with the\n-            \/\/ --add-opens option if i == 1, in the command line.\n-            \/\/ Only the class in the modular jar in the --module-path will be archived;\n-            \/\/ the class in the modular jar in the -cp won't be archived.\n-            output = TestCommon.createArchive(\n-                             destJar.toString(), appClasses,\n-                             extraOpts[i][0], extraOpts[i][1],\n-                             \"--module-path\", moduleDir.toString(),\n-                             \"-m\", TEST_MODULE1);\n-            TestCommon.checkDump(output);\n-\n-            \/\/ run with the archive using the same command line as in dump time\n-            \/\/ plus the \"--add-opens java.base\/java.lang=com.simple\" option.\n-            \/\/ The main class should be loaded from the archive.\n-            \/\/ The setaccessible(true) on the ClassLoader.defineClass method should\n-            \/\/ be successful.\n-            TestCommon.run( \"-Xlog:class+load=trace\",\n-                            \"-cp\", destJar.toString(),\n-                            \"--add-opens\", addOpensArg,\n-                            \"--module-path\", moduleDir.toString(),\n-                            \"-m\", TEST_MODULE1, \"with_add_opens\")\n-                    .assertNormalExit(expectedOutput[0], expectedOutput[1]);\n-        }\n-\n-        \/\/ Test --add-opens to ALL-UNNAMED modules\n-        output = TestCommon.createArchive(\n-                         destJar.toString(), appClasses,\n-                         \"--add-opens\", addOpensAllUnnamed,\n-                         MAIN_CLASS);\n-        TestCommon.checkDump(output);\n-\n-        TestCommon.run( \"-Xlog:class+load=trace\",\n-                        \"-cp\", destJar.toString(),\n-                        \"--add-opens\", addOpensAllUnnamed,\n-                        MAIN_CLASS, \"with_add_opens\")\n-                .assertNormalExit(expectedOutput[0], expectedOutput[1]);\n-\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/modulepath\/AddOpens.java","additions":0,"deletions":132,"binary":false,"changes":132,"status":"deleted"},{"patch":"@@ -1,140 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/**\n- * @test\n- * @requires vm.cds\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n- * @run driver AddReads\n- * @summary sanity test the --add-reads option\n- *\/\n-\n-import java.io.File;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-\n-import jdk.test.lib.cds.CDSTestUtils;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.Asserts;\n-\n-public class AddReads {\n-\n-    private static final Path USER_DIR = Paths.get(CDSTestUtils.getOutputDir());\n-\n-    private static final String TEST_SRC = System.getProperty(\"test.src\");\n-\n-    private static final Path SRC_DIR = Paths.get(TEST_SRC, \"src\");\n-    private static final Path MODS_DIR = Paths.get(\"mods\");\n-\n-    \/\/ the module name of the test module\n-    private static final String MAIN_MODULE = \"com.norequires\";\n-    private static final String SUB_MODULE = \"org.astro\";\n-\n-    \/\/ the module main class\n-    private static final String MAIN_CLASS = \"com.norequires.Main\";\n-    private static final String APP_CLASS = \"org.astro.World\";\n-\n-    private static Path moduleDir = null;\n-    private static Path subJar = null;\n-    private static Path mainJar = null;\n-\n-    public static void buildTestModule() throws Exception {\n-\n-        \/\/ javac -d mods\/$TESTMODULE src\/$TESTMODULE\/**\n-        JarBuilder.compileModule(SRC_DIR.resolve(SUB_MODULE),\n-                                       MODS_DIR.resolve(SUB_MODULE),\n-                                       null);\n-\n-        Asserts.assertTrue(CompilerUtils\n-            .compile(SRC_DIR.resolve(MAIN_MODULE),\n-                     MODS_DIR.resolve(MAIN_MODULE),\n-                     \"-cp\", MODS_DIR.resolve(SUB_MODULE).toString(),\n-                     \"--add-reads\", \"com.norequires=ALL-UNNAMED\"));\n-\n-        moduleDir = Files.createTempDirectory(USER_DIR, \"mlib\");\n-        subJar = moduleDir.resolve(SUB_MODULE + \".jar\");\n-        String classes = MODS_DIR.resolve(SUB_MODULE).toString();\n-        JarBuilder.createModularJar(subJar.toString(), classes, null);\n-\n-        mainJar = moduleDir.resolve(MAIN_MODULE + \".jar\");\n-        classes = MODS_DIR.resolve(MAIN_MODULE).toString();\n-        JarBuilder.createModularJar(mainJar.toString(), classes, MAIN_CLASS);\n-    }\n-\n-    public static void main(String... args) throws Exception {\n-        \/\/ compile the modules and create the modular jar files\n-        buildTestModule();\n-        String appClasses[] = {MAIN_CLASS, APP_CLASS};\n-        \/\/ create an archive with the classes in the modules built in the\n-        \/\/ previous step\n-        OutputAnalyzer output = TestCommon.createArchive(\n-                                        null, appClasses,\n-                                        \"--module-path\", moduleDir.toString(),\n-                                        \"--add-modules\", SUB_MODULE,\n-                                        \"--add-reads\", \"com.norequires=org.astro\",\n-                                        \"-m\", MAIN_MODULE);\n-        TestCommon.checkDump(output);\n-        String prefix[] = {\"-Djava.class.path=\", \"-Xlog:class+load=trace\",\n-                           \"--add-modules\", SUB_MODULE,\n-                           \"--add-reads\", \"com.norequires=org.astro\"};\n-\n-        \/\/ run the com.norequires module with the archive with the same args\n-        \/\/ used during dump time.\n-        \/\/ The classes should be loaded from the archive.\n-        TestCommon.runWithModules(prefix,\n-                                  null, \/\/ --upgrade-module-path\n-                                  moduleDir.toString(), \/\/ --module-path\n-                                  MAIN_MODULE) \/\/ -m\n-            .assertNormalExit(out -> {\n-                out.shouldContain(\"[class,load] com.norequires.Main source: shared objects file\")\n-                   .shouldContain(\"[class,load] org.astro.World source: shared objects file\");\n-            });\n-\n-        \/\/ create an archive with -cp pointing to the jar file containing the\n-        \/\/ org.astro module and --module-path pointing to the main module\n-        output = TestCommon.createArchive(\n-                                        subJar.toString(), appClasses,\n-                                        \"--module-path\", moduleDir.toString(),\n-                                        \"--add-modules\", SUB_MODULE,\n-                                        \"--add-reads\", \"com.norequires=org.astro\",\n-                                        \"-m\", MAIN_MODULE);\n-        TestCommon.checkDump(output);\n-        \/\/ run the com.norequires module with the archive with the sub-module\n-        \/\/ in the -cp and with -add-reads=com.norequires=ALL-UNNAMED\n-        \/\/ The main class should be loaded from the archive.\n-        \/\/ The org.astro.World should be loaded from the jar.\n-        String prefix2[] = {\"-cp\", subJar.toString(), \"-Xlog:class+load=trace\",\n-                           \"--add-reads\", \"com.norequires=ALL-UNNAMED\"};\n-        TestCommon.runWithModules(prefix2,\n-                                  null, \/\/ --upgrade-module-path\n-                                  moduleDir.toString(), \/\/ --module-path\n-                                  MAIN_MODULE) \/\/ -m\n-            .assertNormalExit(out -> {\n-                out.shouldContain(\"[class,load] com.norequires.Main source: shared objects file\")\n-                   .shouldMatch(\".class.load. org.astro.World source:.*org.astro.jar\");\n-            });\n-\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/modulepath\/AddReads.java","additions":0,"deletions":140,"binary":false,"changes":140,"status":"deleted"}]}