{"files":[{"patch":"@@ -587,0 +587,1 @@\n+  {\"jdk.module.addreads\", true},               \/\/ --add-reads\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -334,2 +334,1 @@\n-    if (matches_property_suffix(property_suffix, ADDREADS, ADDREADS_LEN) ||\n-        matches_property_suffix(property_suffix, PATCH, PATCH_LEN) ||\n+    if (matches_property_suffix(property_suffix, PATCH, PATCH_LEN) ||\n@@ -346,0 +345,1 @@\n+          matches_property_suffix(property_suffix, ADDREADS, ADDREADS_LEN) ||\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -144,2 +144,1 @@\n-               getProperty(\"jdk.module.limitmods\") == null &&     \/\/ --limit-modules\n-               getProperty(\"jdk.module.addreads.0\") == null;      \/\/ --add-reads\n+               getProperty(\"jdk.module.limitmods\") == null;       \/\/ --limit-modules\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleBootstrap.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,3 @@\n- * @run driver AddReads\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI AddReads\n@@ -41,0 +43,1 @@\n+import jdk.test.whitebox.gc.GC;\n@@ -59,0 +62,9 @@\n+    private static final String sharedClassA =\n+        \"[class,load] com.norequires.Main source: shared objects file\";\n+    private static final String sharedClassB =\n+        \"[class,load] org.astro.World source: shared objects file\";\n+    private static final String fmgEnabled = \"full module graph: enabled\";\n+    private static final String fmgDisabled = \"full module graph: disabled\";\n+    private static final String cannotAccess =\n+        \"class com.norequires.Main (in module com.norequires) cannot access class org.astro.World (in module org.astro)\";\n+\n@@ -90,0 +102,4 @@\n+        String addReadsTarget[] = {SUB_MODULE, \"ALL-UNNAMED\"};\n+        final boolean useZGC = GC.Z.isSelected();\n+        final boolean dynamicMode = CDSTestUtils.DYNAMIC_DUMP;\n+\n@@ -96,1 +112,1 @@\n-                                        \"--add-reads\", \"com.norequires=org.astro\",\n+                                        \"--add-reads\", \"com.norequires=\" + SUB_MODULE,\n@@ -99,1 +115,1 @@\n-        String prefix[] = {\"-Djava.class.path=\", \"-Xlog:class+load=trace\",\n+        String prefix[] = {\"-Djava.class.path=\", \"-Xlog:class+load,cds,class+path=info\",\n@@ -101,1 +117,1 @@\n-                           \"--add-reads\", \"com.norequires=org.astro\"};\n+                           \"--add-reads\", \"com.norequires=\" + SUB_MODULE};\n@@ -111,2 +127,7 @@\n-                out.shouldContain(\"[class,load] com.norequires.Main source: shared objects file\")\n-                   .shouldContain(\"[class,load] org.astro.World source: shared objects file\");\n+                out.shouldContain(sharedClassA)\n+                   .shouldContain(sharedClassB);\n+                if (useZGC || dynamicMode) {\n+                   out.shouldContain(fmgDisabled);\n+                } else {\n+                   out.shouldContain(fmgEnabled);\n+                }\n@@ -115,16 +136,4 @@\n-        \/\/ create an archive with -cp pointing to the jar file containing the\n-        \/\/ org.astro module and --module-path pointing to the main module\n-        output = TestCommon.createArchive(\n-                                        subJar.toString(), appClasses,\n-                                        \"--module-path\", moduleDir.toString(),\n-                                        \"--add-modules\", SUB_MODULE,\n-                                        \"--add-reads\", \"com.norequires=org.astro\",\n-                                        \"-m\", MAIN_MODULE);\n-        TestCommon.checkDump(output);\n-        \/\/ run the com.norequires module with the archive with the sub-module\n-        \/\/ in the -cp and with -add-reads=com.norequires=ALL-UNNAMED\n-        \/\/ The main class should be loaded from the archive.\n-        \/\/ The org.astro.World should be loaded from the jar.\n-        String prefix2[] = {\"-cp\", subJar.toString(), \"-Xlog:class+load=trace\",\n-                           \"--add-reads\", \"com.norequires=ALL-UNNAMED\"};\n-        TestCommon.runWithModules(prefix2,\n+        \/\/ Run without --add-reads\n+        String prefixNoAddReads[] = {\"-Djava.class.path=\", \"-Xlog:class+load,cds,class+path=info\",\n+                                     \"--add-modules\", SUB_MODULE};\n+        TestCommon.runWithModules(prefixNoAddReads,\n@@ -134,3 +143,17 @@\n-            .assertNormalExit(out -> {\n-                out.shouldContain(\"[class,load] com.norequires.Main source: shared objects file\")\n-                   .shouldMatch(\".class.load. org.astro.World source:.*org.astro.jar\");\n+            .assertAbnormalExit(out -> {\n+                if (CDSTestUtils.isAOTClassLinkingEnabled()) {\n+                   out.shouldContain(\"shared archive file has aot-linked classes. It cannot be used when archived full module graph is not used.\");\n+                } else {\n+                    out.shouldContain(sharedClassA)\n+                       .shouldContain(sharedClassB)\n+                       .shouldContain(fmgDisabled)\n+                       .shouldContain(\"java.lang.IllegalAccessError\")\n+                       .shouldContain(cannotAccess);\n+                    if (dynamicMode) {\n+                       out.shouldContain(\"Mismatched values for property jdk.module.addmods:\")\n+                          .shouldContain(\"org.astro specified during runtime but not during dump time\");\n+                    } else {\n+                       out.shouldContain(\"Mismatched values for property jdk.module.addreads:\")\n+                          .shouldContain(\"com.norequires=org.astro specified during dump time but not during runtime\");\n+                    }\n+                }\n@@ -139,0 +162,44 @@\n+        if (dynamicMode) {\n+            \/\/ Skip the rest of the test if running in CDS dynamic mode.\n+            return;\n+        }\n+\n+        for (int i = 0; i <= 1; i++) {\n+            \/\/ create an archive with -cp pointing to the jar file containing the\n+            \/\/ org.astro module and --module-path pointing to the main module\n+            output = TestCommon.createArchive(\n+                                            subJar.toString(), appClasses,\n+                                            \"--module-path\", moduleDir.toString(),\n+                                            \"--add-reads\", \"com.norequires=\" + addReadsTarget[i],\n+                                            \"-m\", MAIN_MODULE);\n+            TestCommon.checkDump(output);\n+            \/\/ run the com.norequires module with the archive with the sub-module\n+            \/\/ in the -cp and with -add-reads=com.norequires=ALL-UNNAMED\n+            \/\/ Both the main class and org.astro.World should be loaded from the archive.\n+            \/\/ In the case where there is a mismatch in the target module in the --add-reads option\n+            \/\/ between dump and run time. The full module graph should be disabled.\n+            String prefix2[] = {\"-cp\", subJar.toString(), \"-Xlog:class+load,cds,class+path=info\",\n+                               \"--add-reads\", \"com.norequires=ALL-UNNAMED\"};\n+            final int caseNum = i;\n+            TestCommon.runWithModules(prefix2,\n+                                      null, \/\/ --upgrade-module-path\n+                                      moduleDir.toString(), \/\/ --module-path\n+                                      MAIN_MODULE) \/\/ -m\n+                .ifAbnormalExit(out -> {\n+                    if (caseNum == 0) {\n+                        out.shouldContain(fmgDisabled)\n+                           .shouldContain(\"shared archive file has aot-linked classes. It cannot be used when archived full module graph is not used.\");\n+                    } else {\n+                        throw new RuntimeException(\"Expecting normal exit\");\n+                    }\n+                })\n+                .ifNormalExit(out -> {\n+                    out.shouldContain(sharedClassA)\n+                       .shouldContain(sharedClassB);\n+                    if (caseNum == 0 || useZGC) {\n+                        out.shouldContain(fmgDisabled);\n+                    } else {\n+                        out.shouldContain(fmgEnabled);\n+                    }\n+                });\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/modulepath\/AddReads.java","additions":93,"deletions":26,"binary":false,"changes":119,"status":"modified"}]}