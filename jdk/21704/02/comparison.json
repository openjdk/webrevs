{"files":[{"patch":"@@ -152,1 +152,1 @@\n- * This allows client code to link against the .jre\/.jdk bundles,\n+ * This allows client code to link against the JDK bundles,\n@@ -165,4 +165,4 @@\n-    char jrePath[PATH_MAX];\n-    jboolean gotJREPath = GetJREPath(jrePath, sizeof(jrePath), JNI_FALSE);\n-    if (!gotJREPath) {\n-        JLI_ReportErrorMessage(\"Failed to GetJREPath()\");\n+    char jdkRoot[PATH_MAX];\n+    jboolean got = GetJDKInstallRoot(jdkRoot, sizeof(jdkRoot), JNI_FALSE);\n+    if (!got) {\n+        JLI_ReportErrorMessage(\"Failed to determine JDK installation root\");\n@@ -186,1 +186,1 @@\n-    jboolean gotJVMPath = GetJVMPath(jrePath, preferredJVM, jvmPath, sizeof(jvmPath));\n+    jboolean gotJVMPath = GetJVMPath(jdkRoot, preferredJVM, jvmPath, sizeof(jvmPath));\n@@ -329,1 +329,1 @@\n-                           char jrepath[], jint so_jrepath,\n+                           char jdkroot[], jint so_jdkroot,\n@@ -331,1 +331,1 @@\n-                           char jvmcfg[],  jint so_jvmcfg) {\n+                           char jvmcfg[], jint so_jvmcfg) {\n@@ -339,3 +339,3 @@\n-    \/* Find out where the JRE is that we will be using. *\/\n-    if (!GetJREPath(jrepath, so_jrepath, JNI_FALSE) ) {\n-        JLI_ReportErrorMessage(JRE_ERROR1);\n+    \/* Find out where the JDK is that we will be using. *\/\n+    if (!GetJDKInstallRoot(jdkroot, so_jdkroot, JNI_FALSE) ) {\n+        JLI_ReportErrorMessage(LAUNCHER_ERROR1);\n@@ -345,1 +345,1 @@\n-                 jrepath, FILESEP, FILESEP);\n+                 jdkroot, FILESEP, FILESEP);\n@@ -359,1 +359,1 @@\n-    if (!GetJVMPath(jrepath, jvmtype, jvmpath, so_jvmpath)) {\n+    if (!GetJVMPath(jdkroot, jvmtype, jvmpath, so_jvmpath)) {\n@@ -381,1 +381,1 @@\n-GetJVMPath(const char *jrepath, const char *jvmtype,\n+GetJVMPath(const char *jdkroot, const char *jvmtype,\n@@ -393,1 +393,1 @@\n-        JLI_Snprintf(jvmpath, jvmpathsize, \"%s\/lib\/%s\/\" JVM_DLL, jrepath, jvmtype);\n+        JLI_Snprintf(jvmpath, jvmpathsize, \"%s\/lib\/%s\/\" JVM_DLL, jdkroot, jvmtype);\n@@ -411,1 +411,1 @@\n- * Find path to JRE based on .exe's location or registry settings.\n+ * Find path to the JDK installation root\n@@ -414,1 +414,1 @@\n-GetJREPath(char *path, jint pathsize, jboolean speculative)\n+GetJDKInstallRoot(char *path, jint pathsize, jboolean speculative)\n@@ -419,1 +419,1 @@\n-        \/* Is JRE co-located with the application? *\/\n+        \/* Is the JDK co-located with the application? *\/\n@@ -448,1 +448,1 @@\n-    dladdr(&GetJREPath, &selfInfo);\n+    dladdr(&GetJDKInstallRoot, &selfInfo);\n@@ -491,2 +491,2 @@\n-    \/\/ If libjli.dylib is loaded from a macos bundle MacOS dir, find the JRE dir\n-    \/\/ in ..\/Home.\n+    \/\/ If libjli.dylib is loaded from a macos bundle MacOS dir, find the JDK\n+    \/\/ install root at ..\/Home.\n@@ -508,1 +508,1 @@\n-      JLI_ReportErrorMessage(JRE_ERROR8 JAVA_DLL);\n+      JLI_ReportErrorMessage(LAUNCHER_ERROR2 JAVA_DLL);\n@@ -645,3 +645,3 @@\n-        char jrePath[PATH_MAX];\n-        if (!GetJREPath(jrePath, sizeof(jrePath), JNI_FALSE)) {\n-            JLI_ReportErrorMessage(JRE_ERROR1);\n+        char jdkRoot[PATH_MAX];\n+        if (!GetJDKInstallRoot(jdkRoot, sizeof(jdkRoot), JNI_FALSE)) {\n+            JLI_ReportErrorMessage(LAUNCHER_ERROR1);\n@@ -653,1 +653,1 @@\n-                \"%s\/lib\/%s\", jrePath, SPLASHSCREEN_SO);\n+                                     \"%s\/lib\/%s\", jdkRoot, SPLASHSCREEN_SO);\n@@ -655,1 +655,1 @@\n-            JLI_ReportErrorMessage(JRE_ERROR11);\n+            JLI_ReportErrorMessage(LAUNCHER_ERROR3);\n@@ -659,1 +659,1 @@\n-            JLI_ReportErrorMessage(JRE_ERROR13);\n+            JLI_ReportErrorMessage(LAUNCHER_ERROR5);\n@@ -665,1 +665,1 @@\n-        \/\/ might have been stripped out from the JRE image to reduce its size\n+        \/\/ might have been stripped out from the JDK image to reduce its size\n","filename":"src\/java.base\/macosx\/native\/libjli\/java_md_macosx.m","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,0 @@\n-#define JAR_ERROR1      \"Error: Failed to load Main-Class manifest attribute from\\n%s\\n%s\"\n@@ -69,6 +68,0 @@\n-#define CLS_ERROR1      \"Error: Could not find the main class %s.\\n\" JNI_ERROR\n-#define CLS_ERROR2      \"Error: Failed to load Main Class: %s\\n%s\"\n-#define CLS_ERROR3      \"Error: No main method found in specified class.\\n\" GEN_ERROR\n-#define CLS_ERROR4      \"Error: Main method not public\\n\" GEN_ERROR\n-#define CLS_ERROR5      \"Error: main-class: attribute exceeds system limits of %d bytes\\n\" GEN_ERROR\n-\n@@ -78,1 +71,0 @@\n-#define CFG_WARN4       \"Warning: Missing server class VM on line %d of `%s'\"\n@@ -84,1 +76,0 @@\n-#define CFG_ERROR4      \"Error: Unable to locate JRE meeting specification \\\"%s\\\"\"\n@@ -88,1 +79,1 @@\n-#define CFG_ERROR8      \"Error: missing `%s' JVM at `%s'.\\nPlease install or use the JRE or JDK that contains these missing components.\"\n+#define CFG_ERROR8      \"Error: missing `%s' JVM at `%s'.\\nPlease install a JDK that contains these missing components.\"\n@@ -92,13 +83,5 @@\n-#define JRE_ERROR1      \"Error: Could not find Java SE Runtime Environment.\"\n-#define JRE_ERROR2      \"Error: This Java instance does not support a %d-bit JVM.\\nPlease install the desired version.\"\n-#define JRE_ERROR3      \"Error: Improper value at line %d.\"\n-#define JRE_ERROR4      \"Error: trying to exec %s.\\nCheck if file exists and permissions are set correctly.\"\n-#define JRE_ERROR5      \"Error: Failed to start a %d-bit JVM process from a %d-bit JVM.\"\n-#define JRE_ERROR6      \"Error: Verify all necessary Java SE components have been installed.\"\n-#define JRE_ERROR7      \"Error: Either 64-bit processes are not supported by this platform\\nor the 64-bit components have not been installed.\"\n-#define JRE_ERROR8      \"Error: could not find \"\n-#define JRE_ERROR9      \"Error: Unable to resolve %s\"\n-#define JRE_ERROR10     \"Error: Unable to resolve current executable\"\n-#define JRE_ERROR11     \"Error: Path length exceeds maximum length (PATH_MAX)\"\n-#define JRE_ERROR12     \"Error: Exec of %s failed\"\n-#define JRE_ERROR13     \"Error: String processing operation failed\"\n+#define LAUNCHER_ERROR1 \"Error: Could not find Java SE Runtime Environment.\"\n+#define LAUNCHER_ERROR2 \"Error: could not find \"\n+#define LAUNCHER_ERROR3 \"Error: Path length exceeds maximum length (PATH_MAX)\"\n+#define LAUNCHER_ERROR4 \"Error: trying to exec %s.\\nCheck if file exists and permissions are set correctly.\"\n+#define LAUNCHER_ERROR5 \"Error: String processing operation failed\"\n@@ -111,10 +94,0 @@\n-#define REG_ERROR1      \"Error: opening registry key '%s'\"\n-#define REG_ERROR2      \"Error: Failed reading value of registry key:\\n\\t%s\\\\CurrentVersion\"\n-#define REG_ERROR3      \"Error: Registry key '%s'\\\\CurrentVersion'\\nhas value '%s', but '%s' is required.\"\n-#define REG_ERROR4      \"Failed reading value of registry key:\\n\\t%s\\\\%s\\\\JavaHome\"\n-\n-#define SYS_ERROR1      \"Error: CreateProcess(%s, ...) failed:\"\n-#define SYS_ERROR2      \"Error: WaitForSingleObject() failed.\"\n-\n-\n-\n","filename":"src\/java.base\/share\/native\/libjli\/emessages.h","additions":7,"deletions":34,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -239,1 +239,1 @@\n-    char jrepath[MAXPATHLEN];\n+    char jdkroot[MAXPATHLEN];\n@@ -268,1 +268,1 @@\n-                               jrepath, sizeof(jrepath),\n+                               jdkroot, sizeof(jdkroot),\n@@ -270,1 +270,1 @@\n-                               jvmcfg,  sizeof(jvmcfg));\n+                               jvmcfg, sizeof(jvmcfg));\n@@ -2026,1 +2026,1 @@\n- * be installed in different subdirectories of a single JRE installation,\n+ * be installed in different subdirectories of a single JDK installation,\n","filename":"src\/java.base\/share\/native\/libjli\/java.c","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -114,2 +114,2 @@\n- * jrepath is an accessible path to the jre as determined by the call\n- * so_jrepath is the length of the buffer jrepath\n+ * jdkroot is an accessible path to the JDK installation root as determined by the call\n+ * so_jdkroot is the length of the buffer jdkroot\n@@ -120,1 +120,1 @@\n-                                char *jrepath, jint so_jrepath,\n+                                char *jdkroot, jint so_jdkroot,\n@@ -122,1 +122,1 @@\n-                                char *jvmcfg,  jint so_jvmcfg);\n+                                char *jvmcfg, jint so_jvmcfg);\n","filename":"src\/java.base\/share\/native\/libjli\/java.h","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -256,2 +256,2 @@\n-     * previous versions of the JRE, thus it is the only path that matters here.\n-     * So we check to see if the desired JRE is set.\n+     * previous versions of the JDK, thus it is the only path that matters here.\n+     * So we check to see if the desired JDK is set.\n@@ -276,1 +276,1 @@\n-                           char jrepath[], jint so_jrepath,\n+                           char jdkroot[], jint so_jdkroot,\n@@ -297,3 +297,3 @@\n-    \/* Find out where the JRE is that we will be using. *\/\n-    if (!GetJREPath(jrepath, so_jrepath, JNI_FALSE)) {\n-        JLI_ReportErrorMessage(JRE_ERROR1);\n+    \/* Find out where the JDK is that we will be using. *\/\n+    if (!GetJDKInstallRoot(jdkroot, so_jdkroot, JNI_FALSE)) {\n+        JLI_ReportErrorMessage(LAUNCHER_ERROR1);\n@@ -303,1 +303,1 @@\n-            jrepath, FILESEP, FILESEP);\n+            jdkroot, FILESEP, FILESEP);\n@@ -317,1 +317,1 @@\n-    if (!GetJVMPath(jrepath, jvmtype, jvmpath, so_jvmpath)) {\n+    if (!GetJVMPath(jdkroot, jvmtype, jvmpath, so_jvmpath)) {\n@@ -342,2 +342,2 @@\n-         *     o          $JRE\/lib\n-         *     o          $JRE\/..\/lib\n+         *     o          $JDK\/lib\n+         *     o          $JDK\/..\/lib\n@@ -355,1 +355,1 @@\n-                    2 * JLI_StrLen(jrepath) +\n+                    2 * JLI_StrLen(jdkroot) +\n@@ -375,2 +375,2 @@\n-                        jrepath,\n-                        jrepath\n+                        jdkroot,\n+                        jdkroot\n@@ -405,1 +405,1 @@\n-                JLI_ReportErrorMessageSys(JRE_ERROR11);\n+                JLI_ReportErrorMessageSys(LAUNCHER_ERROR3);\n@@ -440,1 +440,1 @@\n-        JLI_ReportErrorMessageSys(JRE_ERROR4, newexec);\n+        JLI_ReportErrorMessageSys(LAUNCHER_ERROR4, newexec);\n@@ -447,1 +447,1 @@\n-GetJVMPath(const char *jrepath, const char *jvmtype,\n+GetJVMPath(const char *jdkroot, const char *jvmtype,\n@@ -455,1 +455,1 @@\n-        JLI_Snprintf(jvmpath, jvmpathsize, \"%s\/lib\/%s\/\" JVM_DLL, jrepath, jvmtype);\n+        JLI_Snprintf(jvmpath, jvmpathsize, \"%s\/lib\/%s\/\" JVM_DLL, jdkroot, jvmtype);\n@@ -470,1 +470,1 @@\n- * Find path to JRE based on .exe's location or registry settings.\n+ * Find path to the JDK installation root\n@@ -473,1 +473,1 @@\n-GetJREPath(char *path, jint pathsize, jboolean speculative)\n+GetJDKInstallRoot(char *path, jint pathsize, jboolean speculative)\n@@ -478,1 +478,1 @@\n-    JLI_TraceLauncher(\"Attempt to get JRE path from launcher executable path\\n\");\n+    JLI_TraceLauncher(\"Attempt to get JDK installation root from launcher executable path\\n\");\n@@ -481,1 +481,1 @@\n-        \/* Is JRE co-located with the application? *\/\n+        \/* Is JDK co-located with the application? *\/\n@@ -484,1 +484,1 @@\n-            JLI_TraceLauncher(\"JRE path is %s\\n\", path);\n+            JLI_TraceLauncher(\"JDK installation root path is %s\\n\", path);\n@@ -489,1 +489,1 @@\n-    JLI_TraceLauncher(\"Attempt to get JRE path from shared lib of the image\\n\");\n+    JLI_TraceLauncher(\"Attempt to get JDK installation root path from shared lib of the image\\n\");\n@@ -494,1 +494,1 @@\n-            JLI_TraceLauncher(\"JRE path is %s\\n\", path);\n+            JLI_TraceLauncher(\"JDK installation root path is %s\\n\", path);\n@@ -504,1 +504,1 @@\n-            JLI_TraceLauncher(\"JRE path is %s\\n\", path);\n+            JLI_TraceLauncher(\"JDK installation root path is %s\\n\", path);\n@@ -511,1 +511,1 @@\n-      JLI_ReportErrorMessage(JRE_ERROR8 JAVA_DLL);\n+      JLI_ReportErrorMessage(LAUNCHER_ERROR2 JAVA_DLL);\n@@ -600,1 +600,1 @@\n-        char jrePath[MAXPATHLEN];\n+        char jdkRoot[MAXPATHLEN];\n@@ -603,2 +603,2 @@\n-        if (!GetJREPath(jrePath, sizeof(jrePath), JNI_FALSE)) {\n-            JLI_ReportErrorMessage(JRE_ERROR1);\n+        if (!GetJDKInstallRoot(jdkRoot, sizeof(jdkRoot), JNI_FALSE)) {\n+            JLI_ReportErrorMessage(LAUNCHER_ERROR1);\n@@ -608,1 +608,1 @@\n-                     jrePath, SPLASHSCREEN_SO);\n+                           jdkRoot, SPLASHSCREEN_SO);\n@@ -611,1 +611,1 @@\n-            JLI_ReportErrorMessage(JRE_ERROR11);\n+            JLI_ReportErrorMessage(LAUNCHER_ERROR3);\n@@ -615,1 +615,1 @@\n-            JLI_ReportErrorMessage(JRE_ERROR13);\n+            JLI_ReportErrorMessage(LAUNCHER_ERROR5);\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md.c","additions":32,"deletions":32,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-static jboolean GetJVMPath(const char *jrepath, const char *jvmtype,\n+static jboolean GetJVMPath(const char *jdkroot, const char *jvmtype,\n@@ -60,1 +60,1 @@\n-static jboolean GetJREPath(char *path, jint pathsize, jboolean speculative);\n+static jboolean GetJDKInstallRoot(char *path, jint pathsize, jboolean speculative);\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,1 +79,1 @@\n- * Retrieves the path to the JRE home by locating the executable file\n+ * Retrieves the path to the JDK home by locating the executable file\n@@ -96,1 +96,1 @@\n- * Retrieves the path to the JRE home by locating the\n+ * Retrieves the path to the JDK home by locating the\n@@ -127,1 +127,1 @@\n- * Retrieves the path to the JRE home by locating libjava.so in\n+ * Retrieves the path to the JDK home by locating libjava.so in\n@@ -265,1 +265,1 @@\n- *      it as a valid jre\/sdk.\n+ *      it as a valid JDK.\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md_common.c","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-static jboolean GetJVMPath(const char *jrepath, const char *jvmtype,\n+static jboolean GetJVMPath(const char *jdkroot, const char *jvmtype,\n@@ -50,1 +50,1 @@\n-static jboolean GetJREPath(char *path, jint pathsize);\n+static jboolean GetJDKInstallRoot(char *path, jint pathsize);\n@@ -155,1 +155,1 @@\n-                           char *jrepath, jint so_jrepath,\n+                           char *jdkroot, jint so_jdkroot,\n@@ -163,3 +163,3 @@\n-    \/* Find out where the JRE is that we will be using. *\/\n-    if (!GetJREPath(jrepath, so_jrepath)) {\n-        JLI_ReportErrorMessage(JRE_ERROR1);\n+    \/* Find out where the JDK is that we will be using. *\/\n+    if (!GetJDKInstallRoot(jdkroot, so_jdkroot)) {\n+        JLI_ReportErrorMessage(LAUNCHER_ERROR1);\n@@ -170,1 +170,1 @@\n-        jrepath, FILESEP, FILESEP);\n+        jdkroot, FILESEP, FILESEP);\n@@ -185,1 +185,1 @@\n-    if (!GetJVMPath(jrepath, jvmtype, jvmpath, so_jvmpath)) {\n+    if (!GetJVMPath(jdkroot, jvmtype, jvmpath, so_jvmpath)) {\n@@ -226,6 +226,6 @@\n-         * The Microsoft C Runtime Library needs to be loaded first.  A copy is\n-         * assumed to be present in the \"JRE path\" directory.  If it is not found\n-         * there (or \"JRE path\" fails to resolve), skip the explicit load and let\n-         * nature take its course, which is likely to be a failure to execute.\n-         * The makefiles will provide the correct lib contained in quotes in the\n-         * macro MSVCR_DLL_NAME.\n+         * The Microsoft C Runtime Library needs to be loaded first. A copy is\n+         * assumed to be present in the \"bin\" directory of the JDK installation root.\n+         * If it is not found there (or the JDK installation root fails to resolve),\n+         * skip the explicit load and let nature take its course, which is likely to\n+         * be a failure to execute. The makefiles will provide the correct lib contained\n+         * in quotes in the macro MSVCR_DLL_NAME.\n@@ -234,1 +234,1 @@\n-        if (GetJREPath(crtpath, MAXPATHLEN)) {\n+        if (GetJDKInstallRoot(crtpath, MAXPATHLEN)) {\n@@ -237,1 +237,1 @@\n-                JLI_ReportErrorMessage(JRE_ERROR11);\n+                JLI_ReportErrorMessage(LAUNCHER_ERROR3);\n@@ -251,1 +251,1 @@\n-        if (GetJREPath(crtpath, MAXPATHLEN)) {\n+        if (GetJDKInstallRoot(crtpath, MAXPATHLEN)) {\n@@ -254,1 +254,1 @@\n-                JLI_ReportErrorMessage(JRE_ERROR11);\n+                JLI_ReportErrorMessage(LAUNCHER_ERROR3);\n@@ -268,1 +268,1 @@\n-        if (GetJREPath(crtpath, MAXPATHLEN)) {\n+        if (GetJDKInstallRoot(crtpath, MAXPATHLEN)) {\n@@ -271,1 +271,1 @@\n-                JLI_ReportErrorMessage(JRE_ERROR11);\n+                JLI_ReportErrorMessage(LAUNCHER_ERROR3);\n@@ -291,1 +291,1 @@\n- * Find path to JRE based on .exe's location or registry settings.\n+ * Find path to JDK installation root based on .exe's location\n@@ -294,1 +294,1 @@\n-GetJREPath(char *path, jint pathsize)\n+GetJDKInstallRoot(char *path, jint pathsize)\n@@ -299,1 +299,1 @@\n-    JLI_TraceLauncher(\"Attempt to get JRE path from launcher executable path\\n\");\n+    JLI_TraceLauncher(\"Attempt to get JDK installation root path from launcher executable path\\n\");\n@@ -302,1 +302,1 @@\n-        \/* Is JRE co-located with the application? *\/\n+        \/* Is the JDK co-located with the application? *\/\n@@ -305,1 +305,1 @@\n-            JLI_TraceLauncher(\"JRE path is %s\\n\", path);\n+            JLI_TraceLauncher(\"JDK installation root path is %s\\n\", path);\n@@ -310,1 +310,1 @@\n-    JLI_TraceLauncher(\"Attempt to get JRE path from shared lib of the image\\n\");\n+    JLI_TraceLauncher(\"Attempt to get JDK installation root path from shared lib of the image\\n\");\n@@ -312,1 +312,1 @@\n-    \/* Try getting path to JRE from path to JLI.DLL *\/\n+    \/* Try getting path to JDK from path to JLI.DLL *\/\n@@ -316,1 +316,1 @@\n-            JLI_TraceLauncher(\"JRE path is %s\\n\", path);\n+            JLI_TraceLauncher(\"JDK installation root path is %s\\n\", path);\n@@ -321,1 +321,1 @@\n-    JLI_ReportErrorMessage(JRE_ERROR8 JAVA_DLL);\n+    JLI_ReportErrorMessage(LAUNCHER_ERROR2 JAVA_DLL);\n@@ -326,1 +326,1 @@\n- * Given a JRE location and a JVM type, construct what the name the\n+ * Given a JDK installation location and a JVM type, construct what the name the\n@@ -331,1 +331,1 @@\n-GetJVMPath(const char *jrepath, const char *jvmtype,\n+GetJVMPath(const char *jdkroot, const char *jvmtype,\n@@ -339,1 +339,1 @@\n-                     jrepath, jvmtype);\n+                     jdkroot, jvmtype);\n@@ -359,4 +359,5 @@\n-     * The Microsoft C Runtime Library needs to be loaded first.  A copy is\n-     * assumed to be present in the \"JRE path\" directory.  If it is not found\n-     * there (or \"JRE path\" fails to resolve), skip the explicit load and let\n-     * nature take its course, which is likely to be a failure to execute.\n+     * The Microsoft C Runtime Library needs to be loaded first. A copy is\n+     * assumed to be present within the JDK. If it is not found there\n+     * (or the JDK installation root fails to resolve), skip the explicit\n+     * load and let nature take its course, which is likely to be a failure\n+     * to execute.\n@@ -406,1 +407,1 @@\n- * Retrieves the path to the JRE home by locating the executable file\n+ * Retrieves the path to the JDK home by locating the executable file\n@@ -417,1 +418,1 @@\n- * Retrieves the path to the JRE home by locating JLI.DLL and\n+ * Retrieves the path to the JDK home by locating JLI.DLL and\n@@ -427,1 +428,1 @@\n-    if (GetModuleHandleEx(flags, (LPCSTR)&GetJREPath, &module) != 0) {\n+    if (GetModuleHandleEx(flags, (LPCSTR)&GetJDKInstallRoot, &module) != 0) {\n@@ -662,1 +663,1 @@\n-    if (!GetJREPath(libraryPath, MAXPATHLEN)) {\n+    if (!GetJDKInstallRoot(libraryPath, MAXPATHLEN)) {\n@@ -833,1 +834,1 @@\n-        size_t jrePathLen = 0;\n+        size_t jdkRootPathLen = 0;\n@@ -842,1 +843,1 @@\n-            if (!GetJREPath(libraryPath, MAXPATHLEN)) {\n+            if (!GetJDKInstallRoot(libraryPath, MAXPATHLEN)) {\n@@ -847,1 +848,1 @@\n-            jrePathLen = JLI_StrLen(libraryPath);\n+            jdkRootPathLen = JLI_StrLen(libraryPath);\n@@ -849,2 +850,2 @@\n-            if (jrePathLen + JLI_StrLen(\"\\\\bin\\\\verify.dll\") >= MAXPATHLEN) {\n-              \/* jre path is too long, the library path will not fit there;\n+            if (jdkRootPathLen + JLI_StrLen(\"\\\\bin\\\\verify.dll\") >= MAXPATHLEN) {\n+              \/* path is too long, the library path will not fit there;\n@@ -853,1 +854,1 @@\n-              JLI_ReportErrorMessage(JRE_ERROR11);\n+              JLI_ReportErrorMessage(LAUNCHER_ERROR3);\n@@ -867,2 +868,2 @@\n-            \/* restore jrePath *\/\n-            libraryPath[jrePathLen] = 0;\n+            \/* restore libraryPath *\/\n+            libraryPath[jdkRootPathLen] = 0;\n@@ -876,2 +877,2 @@\n-            \/* restore jrePath *\/\n-            libraryPath[jrePathLen] = 0;\n+            \/* restore libraryPath *\/\n+            libraryPath[jdkRootPathLen] = 0;\n","filename":"src\/java.base\/windows\/native\/libjli\/java_md.c","additions":51,"deletions":50,"binary":false,"changes":101,"status":"modified"}]}