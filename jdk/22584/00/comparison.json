{"files":[{"patch":"@@ -210,0 +210,16 @@\n+        algorithmsMap.put(\n+            XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA3_224,\n+            new Algorithm(\"EC\", \"SHA3-224withECDSA\", \"Signature\")\n+        );\n+        algorithmsMap.put(\n+            XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA3_256,\n+            new Algorithm(\"EC\", \"SHA3-256withECDSA\", \"Signature\")\n+        );\n+        algorithmsMap.put(\n+            XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA3_384,\n+            new Algorithm(\"EC\", \"SHA3-384withECDSA\", \"Signature\")\n+        );\n+        algorithmsMap.put(\n+            XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA3_512,\n+            new Algorithm(\"EC\", \"SHA3-512withECDSA\", \"Signature\")\n+        );\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/algorithms\/JCEMapper.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-    private static MessageDigest getDigestInstance(String algorithmURI) throws XMLSignatureException {\n+    public static MessageDigest getDigestInstance(String algorithmURI) throws XMLSignatureException {\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/algorithms\/MessageDigestAlgorithm.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -497,0 +497,12 @@\n+        algorithmHash.put(\n+            XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA3_224, SignatureECDSA.SignatureECDSASHA3_224.class\n+        );\n+        algorithmHash.put(\n+            XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA3_256, SignatureECDSA.SignatureECDSASHA3_256.class\n+        );\n+        algorithmHash.put(\n+                XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA3_384, SignatureECDSA.SignatureECDSASHA3_384.class\n+        );\n+        algorithmHash.put(\n+                XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA3_512, SignatureECDSA.SignatureECDSASHA3_512.class\n+        );\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/algorithms\/SignatureAlgorithm.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -773,0 +773,40 @@\n+\n+        ecCurveDefinitions.add(\n+                new ECCurveDefinition(\n+                        \"brainpoolP256r1 [RFC 5639]\",\n+                        \"1.3.36.3.3.2.8.1.1.7\",\n+                        \"a9fb57dba1eea9bc3e660a909d838d726e3bf623d52620282013481d1f6e5377\",\n+                        \"7d5a0975fc2c3057eef67530417affe7fb8055c126dc5c6ce94a4b44f330b5d9\",\n+                        \"26dc5c6ce94a4b44f330b5d9bbd77cbf958416295cf7e1ce6bccdc18ff8c07b6\",\n+                        \"8bd2aeb9cb7e57cb2c4b482ffc81b7afb9de27e1e3bd23c23a4453bd9ace3262\",\n+                        \"547ef835c3dac4fd97f8461a14611dc9c27745132ded8e545c1d54c72f046997\",\n+                        \"a9fb57dba1eea9bc3e660a909d838d718c397aa3b561a6f7901e0e82974856a7\",\n+                        1)\n+        );\n+\n+        ecCurveDefinitions.add(\n+                new ECCurveDefinition(\n+                        \"brainpoolP384r1 [RFC 5639]\",\n+                        \"1.3.36.3.3.2.8.1.1.11\",\n+                        \"8cb91e82a3386d280f5d6f7e50e641df152f7109ed5456b412b1da197fb71123acd3a729901d1a71874700133107ec53\",\n+                        \"7bc382c63d8c150c3c72080ace05afa0c2bea28e4fb22787139165efba91f90f8aa5814a503ad4eb04a8c7dd22ce2826\",\n+                        \"04a8c7dd22ce28268b39b55416f0447c2fb77de107dcd2a62e880ea53eeb62d57cb4390295dbc9943ab78696fa504c11\",\n+                        \"1d1c64f068cf45ffa2a63a81b7c13f6b8847a3e77ef14fe3db7fcafe0cbd10e8e826e03436d646aaef87b2e247d4af1e\",\n+                        \"8abe1d7520f9c2a45cb1eb8e95cfd55262b70b29feec5864e19c054ff99129280e4646217791811142820341263c5315\",\n+                        \"8cb91e82a3386d280f5d6f7e50e641df152f7109ed5456b31f166e6cac0425a7cf3ab6af6b7fc3103b883202e9046565\",\n+                        1)\n+        );\n+\n+        ecCurveDefinitions.add(\n+                new ECCurveDefinition(\n+                        \"brainpoolP512r1 [RFC 5639]\",\n+                        \"1.3.36.3.3.2.8.1.1.13\",\n+                        \"aadd9db8dbe9c48b3fd4e6ae33c9fc07cb308db3b3c9d20ed6639cca703308717d4d9b009bc66842aecda12ae6a380e62881ff2f2d82c68528aa6056583a48f3\",\n+                        \"7830a3318b603b89e2327145ac234cc594cbdd8d3df91610a83441caea9863bc2ded5d5aa8253aa10a2ef1c98b9ac8b57f1117a72bf2c7b9e7c1ac4d77fc94ca\",\n+                        \"3df91610a83441caea9863bc2ded5d5aa8253aa10a2ef1c98b9ac8b57f1117a72bf2c7b9e7c1ac4d77fc94cadc083e67984050b75ebae5dd2809bd638016f723\",\n+                        \"81aee4bdd82ed9645a21322e9c4c6a9385ed9f70b5d916c1b43b62eef4d0098eff3b1f78e2d0d48d50d1687b93b97d5f7c6d5047406a5e688b352209bcb9f822\",\n+                        \"7dde385d566332ecc0eabfa9cf7822fdf209f70024a57b1aa000c55b881f8111b2dcde494a5f485e5bca4bd88a2763aed1ca2b2fa8f0540678cd1e0f3ad80892\",\n+                        \"aadd9db8dbe9c48b3fd4e6ae33c9fc07cb308db3b3c9d20ed6639cca70330870553e5c414ca92619418661197fac10471db1d381085ddaddb58796829ca90069\",\n+                        1)\n+        );\n+\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/algorithms\/implementations\/ECDSAUtils.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -69,2 +69,1 @@\n-        LOG.debug(\"Created SignatureRSA using {0} and provider {1}\",\n-            algorithmID, signatureAlgorithm.getProvider());\n+        LOG.debug(\"Created SignatureRSA using {0}\", algorithmID);\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/algorithms\/implementations\/SignatureBaseRSA.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -374,0 +374,104 @@\n+    \/**\n+     * Class SignatureECDSASHA3-224\n+     *\n+     *\/\n+    public static class SignatureECDSASHA3_224 extends SignatureECDSA {\n+\n+        \/**\n+         * Constructor SignatureECDSASHA3-224\n+         *\n+         * @throws XMLSignatureException\n+         *\/\n+        public SignatureECDSASHA3_224() throws XMLSignatureException {\n+            super();\n+        }\n+\n+        public SignatureECDSASHA3_224(Provider provider) throws XMLSignatureException {\n+            super(provider);\n+        }\n+\n+        \/** {@inheritDoc} *\/\n+        @Override\n+        public String engineGetURI() {\n+            return XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA3_224;\n+        }\n+    }\n+\n+    \/**\n+     * Class SignatureECDSASHA3-256\n+     *\n+     *\/\n+    public static class SignatureECDSASHA3_256 extends SignatureECDSA {\n+\n+        \/**\n+         * Constructor SignatureECDSASHA3-256\n+         *\n+         * @throws XMLSignatureException\n+         *\/\n+        public SignatureECDSASHA3_256() throws XMLSignatureException {\n+            super();\n+        }\n+\n+        public SignatureECDSASHA3_256(Provider provider) throws XMLSignatureException {\n+            super(provider);\n+        }\n+\n+        \/** {@inheritDoc} *\/\n+        @Override\n+        public String engineGetURI() {\n+            return XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA3_256;\n+        }\n+    }\n+\n+    \/**\n+     * Class SignatureECDSASHA3-384\n+     *\n+     *\/\n+    public static class SignatureECDSASHA3_384 extends SignatureECDSA {\n+\n+        \/**\n+         * Constructor SignatureECDSASHA3-384\n+         *\n+         * @throws XMLSignatureException\n+         *\/\n+        public SignatureECDSASHA3_384() throws XMLSignatureException {\n+            super();\n+        }\n+\n+        public SignatureECDSASHA3_384(Provider provider) throws XMLSignatureException {\n+            super(provider);\n+        }\n+\n+        \/** {@inheritDoc} *\/\n+        @Override\n+        public String engineGetURI() {\n+            return XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA3_384;\n+        }\n+    }\n+\n+    \/**\n+     * Class SignatureECDSASHA3-512\n+     *\n+     *\/\n+    public static class SignatureECDSASHA3_512 extends SignatureECDSA {\n+\n+        \/**\n+         * Constructor SignatureECDSASHA3-512\n+         *\n+         * @throws XMLSignatureException\n+         *\/\n+        public SignatureECDSASHA3_512() throws XMLSignatureException {\n+            super();\n+        }\n+\n+        public SignatureECDSASHA3_512(Provider provider) throws XMLSignatureException {\n+            super(provider);\n+        }\n+\n+        \/** {@inheritDoc} *\/\n+        @Override\n+        public String engineGetURI() {\n+            return XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA3_512;\n+        }\n+    }\n+\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/algorithms\/implementations\/SignatureECDSA.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -35,9 +35,1 @@\n-import com.sun.org.apache.xml.internal.security.keys.content.DEREncodedKeyValue;\n-import com.sun.org.apache.xml.internal.security.keys.content.KeyInfoReference;\n-import com.sun.org.apache.xml.internal.security.keys.content.KeyName;\n-import com.sun.org.apache.xml.internal.security.keys.content.KeyValue;\n-import com.sun.org.apache.xml.internal.security.keys.content.MgmtData;\n-import com.sun.org.apache.xml.internal.security.keys.content.PGPData;\n-import com.sun.org.apache.xml.internal.security.keys.content.RetrievalMethod;\n-import com.sun.org.apache.xml.internal.security.keys.content.SPKIData;\n-import com.sun.org.apache.xml.internal.security.keys.content.X509Data;\n+import com.sun.org.apache.xml.internal.security.keys.content.*;\n@@ -53,1 +45,0 @@\n-import com.sun.org.apache.xml.internal.security.utils.SignatureElementProxy;\n@@ -91,1 +82,1 @@\n-public class KeyInfo extends SignatureElementProxy {\n+public class KeyInfo extends ElementProxy {\n@@ -234,1 +225,3 @@\n-     * Method add\n+     * Method adds public key encoded as KeyValue. If public key type is not supported by KeyValue, then\n+     * DEREncodedKeyValue is used. If public key type is not supported by DEREncodedKeyValue, then\n+     * IllegalArgumentException is thrown.\n@@ -236,1 +229,1 @@\n-     * @param pk\n+     * @param pk public key to be added to KeyInfo\n@@ -238,2 +231,12 @@\n-    public void add(PublicKey pk) {\n-        this.add(new KeyValue(getDocument(), pk));\n+    public void add(PublicKey pk)  {\n+\n+        if (KeyValue.isSupportedKeyType(pk)) {\n+            this.add(new KeyValue(getDocument(), pk));\n+            return;\n+        }\n+\n+        try {\n+            this.add(new DEREncodedKeyValue(getDocument(), pk));\n+        } catch (XMLSecurityException ex) {\n+            throw new IllegalArgumentException(ex);\n+        }\n@@ -775,0 +778,1 @@\n+\n@@ -1191,0 +1195,6 @@\n+\n+    \/** {@inheritDoc} *\/\n+    @Override\n+    public String getBaseNamespace() {\n+        return Constants.SignatureSpecNS;\n+    }\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/KeyInfo.java","additions":25,"deletions":15,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -44,1 +44,4 @@\n-    private static final String[] supportedKeyTypes = { \"RSA\", \"DSA\", \"EC\"};\n+    private static final String[] supportedKeyTypes = { \"RSA\", \"DSA\", \"EC\",\n+            \"DiffieHellman\", \"DH\", \"XDH\", \"X25519\", \"X448\",\n+            \"EdDSA\", \"Ed25519\", \"Ed448\",\n+            \"RSASSA-PSS\"};\n@@ -147,1 +150,0 @@\n-\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/content\/DEREncodedKeyValue.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n- *\n@@ -123,0 +122,14 @@\n+    \/**\n+     * Verifies that the XML KeyValue encoding is supported for the given key type. If the\n+     * encoding is supported, it returns true else false.\n+     *\n+     * @return true if the public key has a KeyValue encoding, false otherwise.\n+     *\/\n+    public static boolean isSupportedKeyType(PublicKey publicKey) {\n+\n+        return publicKey instanceof java.security.interfaces.DSAPublicKey\n+                || publicKey instanceof java.security.interfaces.RSAPublicKey\n+                || publicKey instanceof java.security.interfaces.ECPublicKey;\n+\n+    }\n+\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/content\/KeyValue.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -94,0 +94,39 @@\n+    \/* Supported curve brainpoolP256r1 *\/\n+    private static final Curve BRAINPOOLP256R1 = initializeCurve(\n+            \"brainpoolP256r1 [RFC 5639]\",\n+            \"1.3.36.3.3.2.8.1.1.7\",\n+            \"A9FB57DBA1EEA9BC3E660A909D838D726E3BF623D52620282013481D1F6E5377\",\n+            \"7D5A0975FC2C3057EEF67530417AFFE7FB8055C126DC5C6CE94A4B44F330B5D9\",\n+            \"26DC5C6CE94A4B44F330B5D9BBD77CBF958416295CF7E1CE6BCCDC18FF8C07B6\",\n+            \"8BD2AEB9CB7E57CB2C4B482FFC81B7AFB9DE27E1E3BD23C23A4453BD9ACE3262\",\n+            \"547EF835C3DAC4FD97F8461A14611DC9C27745132DED8E545C1D54C72F046997\",\n+            \"A9FB57DBA1EEA9BC3E660A909D838D718C397AA3B561A6F7901E0E82974856A7\",\n+            1\n+    );\n+\n+    \/* Supported curve brainpoolP384r1 *\/\n+    private static final Curve BRAINPOOLP384R1 = initializeCurve(\n+            \"brainpoolP384r1 [RFC 5639]\",\n+            \"1.3.36.3.3.2.8.1.1.11\",\n+            \"8CB91E82A3386D280F5D6F7E50E641DF152F7109ED5456B412B1DA197FB71123ACD3A729901D1A71874700133107EC53\",\n+            \"7BC382C63D8C150C3C72080ACE05AFA0C2BEA28E4FB22787139165EFBA91F90F8AA5814A503AD4EB04A8C7DD22CE2826\",\n+            \"04A8C7DD22CE28268B39B55416F0447C2FB77DE107DCD2A62E880EA53EEB62D57CB4390295DBC9943AB78696FA504C11\",\n+            \"1D1C64F068CF45FFA2A63A81B7C13F6B8847A3E77EF14FE3DB7FCAFE0CBD10E8E826E03436D646AAEF87B2E247D4AF1E\",\n+            \"8ABE1D7520F9C2A45CB1EB8E95CFD55262B70B29FEEC5864E19C054FF99129280E4646217791811142820341263C5315\",\n+            \"8CB91E82A3386D280F5D6F7E50E641DF152F7109ED5456B31F166E6CAC0425A7CF3AB6AF6B7FC3103B883202E9046565\",\n+            1\n+    );\n+\n+    \/* Supported curve brainpoolP512r1 *\/\n+    private static final Curve BRAINPOOLP512R1 = initializeCurve(\n+            \"brainpoolP512r1 [RFC 5639]\",\n+            \"1.3.36.3.3.2.8.1.1.13\",\n+            \"AADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA703308717D4D9B009BC66842AECDA12AE6A380E62881FF2F2D82C68528AA6056583A48F3\",\n+            \"7830A3318B603B89E2327145AC234CC594CBDD8D3DF91610A83441CAEA9863BC2DED5D5AA8253AA10A2EF1C98B9AC8B57F1117A72BF2C7B9E7C1AC4D77FC94CA\",\n+            \"3DF91610A83441CAEA9863BC2DED5D5AA8253AA10A2EF1C98B9AC8B57F1117A72BF2C7B9E7C1AC4D77FC94CADC083E67984050B75EBAE5DD2809BD638016F723\",\n+            \"81AEE4BDD82ED9645A21322E9C4C6A9385ED9F70B5D916C1B43B62EEF4D0098EFF3B1F78E2D0D48D50D1687B93B97D5F7C6D5047406A5E688B352209BCB9F822\",\n+            \"7DDE385D566332ECC0EABFA9CF7822FDF209F70024A57B1AA000C55B881F8111B2DCDE494A5F485E5BCA4BD88A2763AED1CA2B2FA8F0540678CD1E0F3AD80892\",\n+            \"AADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA70330870553E5C414CA92619418661197FAC10471DB1D381085DDADDB58796829CA90069\",\n+            1\n+    );\n+\n@@ -267,1 +306,7 @@\n-        } else {\n+        } else if (matchCurve(params, BRAINPOOLP256R1)) {\n+            match = BRAINPOOLP256R1;\n+        } else if (matchCurve(params, BRAINPOOLP384R1)) {\n+            match = BRAINPOOLP384R1;\n+        } else if (matchCurve(params, BRAINPOOLP512R1)) {\n+            match = BRAINPOOLP512R1;\n+        }else {\n@@ -335,0 +380,6 @@\n+        } else if (oid.equals(BRAINPOOLP256R1.getObjectId())) {\n+            return BRAINPOOLP256R1;\n+        } else if (oid.equals(BRAINPOOLP384R1.getObjectId())) {\n+            return BRAINPOOLP384R1;\n+        } else if (oid.equals(BRAINPOOLP512R1.getObjectId())) {\n+            return BRAINPOOLP512R1;\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/content\/keyvalues\/ECKeyValue.java","additions":52,"deletions":1,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-algorithms.NoSuchAlgorithm = Der Algorithmus {0} ist nicht verf\\u00fcgbar.\n+algorithms.NoSuchAlgorithmNoEx = Der Algorithmus {0} ist nicht verf\\u00fcgbar.\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/resource\/xmlsecurity_de.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -212,0 +212,17 @@\n+\n+    \/**Signature - SHA3-224withECDSA *\/\n+    public static final String ALGO_ID_SIGNATURE_ECDSA_SHA3_224 =\n+            \"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-224\";\n+\n+    \/**Signature - SHA3-256withECDSA *\/\n+    public static final String ALGO_ID_SIGNATURE_ECDSA_SHA3_256 =\n+            \"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-256\";\n+\n+    \/**Signature - SHA3-384withECDSA *\/\n+    public static final String ALGO_ID_SIGNATURE_ECDSA_SHA3_384 =\n+            \"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-384\";\n+\n+    \/**Signature - SHA3-512withECDSA *\/\n+    public static final String ALGO_ID_SIGNATURE_ECDSA_SHA3_512 =\n+            \"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-512\";\n+\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/signature\/XMLSignature.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -74,0 +74,3 @@\n+    \/** The 2021 xmldsig-more URL for Internet Engineering Task Force (IETF) algorithms **\/\n+    public static final String XML_DSIG_NS_MORE_21_04 = \"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#\";\n+\n@@ -147,0 +150,3 @@\n+    \/** Tag of Element Salt **\/\n+    public static final String _TAG_SALT = \"Salt\";\n+\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/Constants.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -515,0 +515,3 @@\n+        setNamespacePrefix(\"http:\/\/www.w3.org\/2001\/04\/xmldsig-more\", \"rfc4051\");\n+        setNamespacePrefix(\"http:\/\/www.w3.org\/2007\/05\/xmldsig-more#\", \"rfc6931\");\n+        setNamespacePrefix(\"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#\", \"rfc9231\");\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/ElementProxy.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -315,0 +315,36 @@\n+    \/**\n+     * The <a href=\"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-224\">\n+     * ECDSA-SHA3-224<\/a> signature method algorithm URI.\n+     *\n+     * @since 25\n+     *\/\n+    String ECDSA_SHA3_224 =\n+            \"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-224\";\n+\n+    \/**\n+     * The <a href=\"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-256\">\n+     * ECDSA-SHA3-256<\/a> signature method algorithm URI.\n+     *\n+     * @since 25\n+     *\/\n+    String ECDSA_SHA3_256 =\n+            \"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-256\";\n+\n+    \/**\n+     * The <a href=\"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-384\">\n+     * ECDSA-SHA3-384<\/a> signature method algorithm URI.\n+     *\n+     * @since 25\n+     *\/\n+    String ECDSA_SHA3_384 =\n+            \"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-384\";\n+\n+    \/**\n+     * The <a href=\"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-512\">\n+     * ECDSA-SHA3-512<\/a> signature method algorithm URI.\n+     *\n+     * @since 25\n+     *\/\n+    String ECDSA_SHA3_512 =\n+            \"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-512\";\n+\n","filename":"src\/java.xml.crypto\/share\/classes\/javax\/xml\/crypto\/dsig\/SignatureMethod.java","additions":37,"deletions":1,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-        } else if (\"RSA\".equals(algorithm)) {\n+        } else if (\"RSA\".equals(algorithm) || \"RSASSA-PSS\".equals(algorithm)) {\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMKeyInfoFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -244,0 +244,27 @@\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (this == obj) {\n+                return true;\n+            }\n+            if (!(obj instanceof KeyValue)) {\n+                return false;\n+            }\n+            \/\/ This equality test allows RSA keys that have different\n+            \/\/ algorithms (ex: RSA and RSASSA-PSS) to be equal as long\n+            \/\/ as the key is the same.\n+            try {\n+                PublicKey otherKey = ((KeyValue)obj).getPublicKey();\n+                if (!(otherKey instanceof RSAPublicKey)) {\n+                    return false;\n+                }\n+                RSAPublicKey otherRSAKey = (RSAPublicKey)otherKey;\n+                RSAPublicKey rsaKey = (RSAPublicKey)getPublicKey();\n+                return rsaKey.getPublicExponent().equals(\n+                            otherRSAKey.getPublicExponent())\n+                        && rsaKey.getModulus().equals(otherRSAKey.getModulus());\n+            } catch (KeyException ke) {\n+                \/\/ no practical way to determine if the keys are equal\n+                return false;\n+            }\n+        }\n@@ -372,0 +399,36 @@\n+        private static final Curve BRAINPOOLP256R1 = initializeCurve(\n+                \"brainpoolP256r1 [RFC 5639]\",\n+                \"1.3.36.3.3.2.8.1.1.7\",\n+                \"A9FB57DBA1EEA9BC3E660A909D838D726E3BF623D52620282013481D1F6E5377\",\n+                \"7D5A0975FC2C3057EEF67530417AFFE7FB8055C126DC5C6CE94A4B44F330B5D9\",\n+                \"26DC5C6CE94A4B44F330B5D9BBD77CBF958416295CF7E1CE6BCCDC18FF8C07B6\",\n+                \"8BD2AEB9CB7E57CB2C4B482FFC81B7AFB9DE27E1E3BD23C23A4453BD9ACE3262\",\n+                \"547EF835C3DAC4FD97F8461A14611DC9C27745132DED8E545C1D54C72F046997\",\n+                \"A9FB57DBA1EEA9BC3E660A909D838D718C397AA3B561A6F7901E0E82974856A7\",\n+                1\n+        );\n+\n+        private static final Curve BRAINPOOLP384R1 = initializeCurve(\n+                \"brainpoolP384r1 [RFC 5639]\",\n+                \"1.3.36.3.3.2.8.1.1.11\",\n+                \"8CB91E82A3386D280F5D6F7E50E641DF152F7109ED5456B412B1DA197FB71123ACD3A729901D1A71874700133107EC53\",\n+                \"7BC382C63D8C150C3C72080ACE05AFA0C2BEA28E4FB22787139165EFBA91F90F8AA5814A503AD4EB04A8C7DD22CE2826\",\n+                \"04A8C7DD22CE28268B39B55416F0447C2FB77DE107DCD2A62E880EA53EEB62D57CB4390295DBC9943AB78696FA504C11\",\n+                \"1D1C64F068CF45FFA2A63A81B7C13F6B8847A3E77EF14FE3DB7FCAFE0CBD10E8E826E03436D646AAEF87B2E247D4AF1E\",\n+                \"8ABE1D7520F9C2A45CB1EB8E95CFD55262B70B29FEEC5864E19C054FF99129280E4646217791811142820341263C5315\",\n+                \"8CB91E82A3386D280F5D6F7E50E641DF152F7109ED5456B31F166E6CAC0425A7CF3AB6AF6B7FC3103B883202E9046565\",\n+                1\n+        );\n+\n+        private static final Curve BRAINPOOLP512R1 = initializeCurve(\n+                \"brainpoolP512r1 [RFC 5639]\",\n+                \"1.3.36.3.3.2.8.1.1.13\",\n+                \"AADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA703308717D4D9B009BC66842AECDA12AE6A380E62881FF2F2D82C68528AA6056583A48F3\",\n+                \"7830A3318B603B89E2327145AC234CC594CBDD8D3DF91610A83441CAEA9863BC2DED5D5AA8253AA10A2EF1C98B9AC8B57F1117A72BF2C7B9E7C1AC4D77FC94CA\",\n+                \"3DF91610A83441CAEA9863BC2DED5D5AA8253AA10A2EF1C98B9AC8B57F1117A72BF2C7B9E7C1AC4D77FC94CADC083E67984050B75EBAE5DD2809BD638016F723\",\n+                \"81AEE4BDD82ED9645A21322E9C4C6A9385ED9F70B5D916C1B43B62EEF4D0098EFF3B1F78E2D0D48D50D1687B93B97D5F7C6D5047406A5E688B352209BCB9F822\",\n+                \"7DDE385D566332ECC0EABFA9CF7822FDF209F70024A57B1AA000C55B881F8111B2DCDE494A5F485E5BCA4BD88A2763AED1CA2B2FA8F0540678CD1E0F3AD80892\",\n+                \"AADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA70330870553E5C414CA92619418661197FAC10471DB1D381085DDADDB58796829CA90069\",\n+                1\n+        );\n+\n@@ -451,0 +514,6 @@\n+            } else if (matchCurve(params, BRAINPOOLP256R1)) {\n+                match = BRAINPOOLP256R1;\n+            } else if (matchCurve(params, BRAINPOOLP384R1)) {\n+                match = BRAINPOOLP384R1;\n+            } else if (matchCurve(params, BRAINPOOLP512R1)) {\n+                match = BRAINPOOLP512R1;\n@@ -488,1 +557,1 @@\n-            namedCurveElem.setAttributeNS(\"http:\/\/www.w3.org\/2000\/xmlns\/\",\n+            ecKeyValueElem.setAttributeNS(\"http:\/\/www.w3.org\/2000\/xmlns\/\",\n@@ -558,0 +627,6 @@\n+            } else if (oid.equals(BRAINPOOLP256R1.getObjectId())) {\n+                return BRAINPOOLP256R1;\n+            } else if (oid.equals(BRAINPOOLP384R1.getObjectId())) {\n+                return BRAINPOOLP384R1;\n+            } else if (oid.equals(BRAINPOOLP512R1.getObjectId())) {\n+                return BRAINPOOLP512R1;\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMKeyValue.java","additions":76,"deletions":1,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -103,0 +103,8 @@\n+    static final String ECDSA_SHA3_224 =\n+        \"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-224\";\n+    static final String ECDSA_SHA3_256 =\n+        \"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-256\";\n+    static final String ECDSA_SHA3_384 =\n+        \"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-384\";\n+    static final String ECDSA_SHA3_512 =\n+        \"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-512\";\n@@ -244,0 +252,8 @@\n+        } else if (alg.equals(ECDSA_SHA3_224)) {\n+            return new SHA3_224withECDSA(smElem);\n+        } else if (alg.equals(ECDSA_SHA3_256)) {\n+            return new SHA3_256withECDSA(smElem);\n+        } else if (alg.equals(ECDSA_SHA3_384)) {\n+            return new SHA3_384withECDSA(smElem);\n+        } else if (alg.equals(ECDSA_SHA3_512)) {\n+            return new SHA3_512withECDSA(smElem);\n@@ -1163,0 +1179,88 @@\n+    static final class SHA3_224withECDSA extends AbstractECDSASignatureMethod {\n+        SHA3_224withECDSA(AlgorithmParameterSpec params)\n+                throws InvalidAlgorithmParameterException {\n+            super(params);\n+        }\n+        SHA3_224withECDSA(Element dmElem) throws MarshalException {\n+            super(dmElem);\n+        }\n+        @Override\n+        public String getAlgorithm() {\n+            return ECDSA_SHA3_224;\n+        }\n+        @Override\n+        String getJCAAlgorithm() {\n+            return \"SHA3-224withECDSAinP1363Format\";\n+        }\n+        @Override\n+        String getJCAFallbackAlgorithm() {\n+            return \"SHA3-224withECDSA\";\n+        }\n+    }\n+\n+    static final class SHA3_256withECDSA extends AbstractECDSASignatureMethod {\n+        SHA3_256withECDSA(AlgorithmParameterSpec params)\n+                throws InvalidAlgorithmParameterException {\n+            super(params);\n+        }\n+        SHA3_256withECDSA(Element dmElem) throws MarshalException {\n+            super(dmElem);\n+        }\n+        @Override\n+        public String getAlgorithm() {\n+            return ECDSA_SHA3_256;\n+        }\n+        @Override\n+        String getJCAAlgorithm() {\n+            return \"SHA3-256withECDSAinP1363Format\";\n+        }\n+        @Override\n+        String getJCAFallbackAlgorithm() {\n+            return \"SHA3-256withECDSA\";\n+        }\n+    }\n+\n+    static final class SHA3_384withECDSA extends AbstractECDSASignatureMethod {\n+        SHA3_384withECDSA(AlgorithmParameterSpec params)\n+                throws InvalidAlgorithmParameterException {\n+            super(params);\n+        }\n+        SHA3_384withECDSA(Element dmElem) throws MarshalException {\n+            super(dmElem);\n+        }\n+        @Override\n+        public String getAlgorithm() {\n+            return ECDSA_SHA3_384;\n+        }\n+        @Override\n+        String getJCAAlgorithm() {\n+            return \"SHA3-384withECDSAinP1363Format\";\n+        }\n+        @Override\n+        String getJCAFallbackAlgorithm() {\n+            return \"SHA3-384withECDSA\";\n+        }\n+    }\n+\n+    static final class SHA3_512withECDSA extends AbstractECDSASignatureMethod {\n+        SHA3_512withECDSA(AlgorithmParameterSpec params)\n+                throws InvalidAlgorithmParameterException {\n+            super(params);\n+        }\n+        SHA3_512withECDSA(Element dmElem) throws MarshalException {\n+            super(dmElem);\n+        }\n+        @Override\n+        public String getAlgorithm() {\n+            return ECDSA_SHA3_512;\n+        }\n+        @Override\n+        String getJCAAlgorithm() {\n+            return \"SHA3-512withECDSAinP1363Format\";\n+        }\n+        @Override\n+        String getJCAFallbackAlgorithm() {\n+            return \"SHA3-512withECDSA\";\n+        }\n+    }\n+\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMSignatureMethod.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -348,0 +348,8 @@\n+        }  else if (algorithm.equals(DOMSignatureMethod.ECDSA_SHA3_224)) {\n+            return new DOMSignatureMethod.SHA3_224withECDSA(params);\n+        } else if (algorithm.equals(DOMSignatureMethod.ECDSA_SHA3_256)) {\n+            return new DOMSignatureMethod.SHA3_256withECDSA(params);\n+        } else if (algorithm.equals(DOMSignatureMethod.ECDSA_SHA3_384)) {\n+            return new DOMSignatureMethod.SHA3_384withECDSA(params);\n+        } else if (algorithm.equals(DOMSignatureMethod.ECDSA_SHA3_512)) {\n+            return new DOMSignatureMethod.SHA3_512withECDSA(params);\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMXMLSignatureFactory.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-        \/\/ Apache Santuario XML Security for Java, version 3.0.3\n+        \/\/ Apache Santuario XML Security for Java, version 3.0.5\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/XMLDSigRI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-## Apache Santuario v3.0.3\n+## Apache Santuario v3.0.5\n@@ -214,1 +214,1 @@\n-Copyright 1999-2023 The Apache Software Foundation\n+Copyright 1999-2024 The Apache Software Foundation\n@@ -226,1 +226,1 @@\n-copyright (c) 2021, Oracle and\/or its affiliates.\n+copyright (c) 2021, 2023, Oracle and\/or its affiliates.\n","filename":"src\/java.xml.crypto\/share\/legal\/santuario.md","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- *      8046724 8079693 8177334 8205507 8210736 8217878 8241306 8305972\n+ *      8046724 8079693 8177334 8205507 8210736 8217878 8241306 8305972 8344137\n@@ -102,0 +102,1 @@\n+            ecdsaSha3_224, ecdsaSha3_256, ecdsaSha3_384, ecdsaSha3_512,\n@@ -247,1 +248,1 @@\n-    \/\/ As of JDK 22, the number of defined algorithms are...\n+    \/\/ As of JDK 25, the number of defined algorithms are...\n@@ -249,1 +250,1 @@\n-        if (allSignatureMethods.length != 29\n+        if (allSignatureMethods.length != 33\n@@ -308,0 +309,4 @@\n+        test_create_signature_enveloping_p256_sha3_224();\n+        test_create_signature_enveloping_p256_sha3_256();\n+        test_create_signature_enveloping_p256_sha3_384();\n+        test_create_signature_enveloping_p256_sha3_512();\n@@ -562,0 +567,4 @@\n+        ecdsaSha3_224 = fac.newSignatureMethod(SignatureMethod.ECDSA_SHA3_224, null);\n+        ecdsaSha3_256 = fac.newSignatureMethod(SignatureMethod.ECDSA_SHA3_256, null);\n+        ecdsaSha3_384 = fac.newSignatureMethod(SignatureMethod.ECDSA_SHA3_384, null);\n+        ecdsaSha3_512 = fac.newSignatureMethod(SignatureMethod.ECDSA_SHA3_512, null);\n@@ -895,0 +904,28 @@\n+    static void test_create_signature_enveloping_p256_sha3_224() throws Exception {\n+        System.out.println(\"* Generating signature-enveloping-p256-sha3_224.xml\");\n+        test_create_signature_enveloping(sha1, ecdsaSha3_224, p256ki,\n+                getECPrivateKey(\"P256\"), kvks, false, true);\n+        System.out.println();\n+    }\n+\n+    static void test_create_signature_enveloping_p256_sha3_256() throws Exception {\n+        System.out.println(\"* Generating signature-enveloping-p256-sha3_256.xml\");\n+        test_create_signature_enveloping(sha1, ecdsaSha3_256, p256ki,\n+                getECPrivateKey(\"P256\"), kvks, false, true);\n+        System.out.println();\n+    }\n+\n+    static void test_create_signature_enveloping_p256_sha3_384() throws Exception {\n+        System.out.println(\"* Generating signature-enveloping-p256-sha3_384.xml\");\n+        test_create_signature_enveloping(sha1, ecdsaSha3_384, p256ki,\n+                getECPrivateKey(\"P256\"), kvks, false, true);\n+        System.out.println();\n+    }\n+\n+    static void test_create_signature_enveloping_p256_sha3_512() throws Exception {\n+        System.out.println(\"* Generating signature-enveloping-p256-sha3_512.xml\");\n+        test_create_signature_enveloping(sha1, ecdsaSha3_512, p256ki,\n+                getECPrivateKey(\"P256\"), kvks, false, true);\n+        System.out.println();\n+    }\n+\n","filename":"test\/jdk\/javax\/xml\/crypto\/dsig\/GenerationTests.java","additions":41,"deletions":4,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.security.XMLUtils;\n+\n+import javax.xml.crypto.dsig.DigestMethod;\n+import javax.xml.crypto.dsig.SignatureMethod;\n+import javax.xml.crypto.dsig.spec.RSAPSSParameterSpec;\n+import java.security.KeyPairGenerator;\n+import java.security.spec.MGF1ParameterSpec;\n+import java.security.spec.PSSParameterSpec;\n+\n+\/**\n+ * @test\n+ * @bug 8344137\n+ * @summary check RSASSA-PSS key\n+ * @library \/test\/lib\n+ * @modules java.xml.crypto\n+ *\/\n+public class PSS {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        var doc = XMLUtils.string2doc(\"<a><b>Text<\/b>Raw<\/a>\");\n+        var kpg = KeyPairGenerator.getInstance(\"RSASSA-PSS\");\n+        kpg.initialize(2048);\n+        var keyPair = kpg.generateKeyPair();\n+\n+        var pspec = new PSSParameterSpec(\"SHA-384\", \"MGF1\",\n+                MGF1ParameterSpec.SHA512, 48,\n+                PSSParameterSpec.TRAILER_FIELD_BC);\n+\n+        var signed = XMLUtils.signer(keyPair.getPrivate(), keyPair.getPublic())\n+                .dm(DigestMethod.SHA384)\n+                .sm(SignatureMethod.RSA_PSS, new RSAPSSParameterSpec(pspec))\n+                .sign(doc);\n+\n+        Asserts.assertTrue(XMLUtils.validator().validate(signed));\n+    }\n+}\n","filename":"test\/jdk\/javax\/xml\/crypto\/dsig\/PSS.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}