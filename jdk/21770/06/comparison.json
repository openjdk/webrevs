{"files":[{"patch":"@@ -1483,3 +1483,4 @@\n-  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  \/\/ opcode matches gcc\n-  emit_arith(0x01, 0xC0, src1, src2);\n+  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n+  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n+  (void)evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n+  emit_arith(0x03, 0xC0, src1, src2);\n@@ -1723,3 +1724,4 @@\n-  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  \/\/ opcode matches gcc\n-  emit_arith(0x21, 0xC0, src1, src2);\n+  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n+  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n+  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n+  emit_arith(0x23, 0xC0, src1, src2);\n@@ -2632,1 +2634,1 @@\n-  evex_prefix_ndd(src, 0, dst->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n+  evex_prefix_nf(src, 0, dst->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n@@ -4444,1 +4446,3 @@\n-  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n+  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n+  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n+  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_66, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n@@ -4496,3 +4500,4 @@\n-  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  \/\/ opcode matches gcc\n-  emit_arith(0x09, 0xC0, src1, src2);\n+  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n+  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n+  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n+  emit_arith(0x0B, 0xC0, src1, src2);\n@@ -6891,1 +6896,3 @@\n-  int encode = evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n+  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n+  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n+  int encode = evex_prefix_and_encode_ndd(src2->encoding(), dst->encoding(), src1->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n@@ -6902,1 +6909,3 @@\n-  int encode = evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n+  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n+  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n+  int encode = evex_prefix_and_encode_ndd(src2->encoding(), dst->encoding(), src1->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n@@ -6913,1 +6922,3 @@\n-  int encode = evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n+  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n+  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n+  int encode = evex_prefix_and_encode_ndd(src2->encoding(), dst->encoding(), src1->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n@@ -6924,1 +6935,3 @@\n-  int encode = evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n+  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n+  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n+  int encode = evex_prefix_and_encode_ndd(src2->encoding(), dst->encoding(), src1->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n@@ -6936,1 +6949,3 @@\n-  int encode = evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n+  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n+  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n+  int encode = evex_prefix_and_encode_ndd(src2->encoding(), dst->encoding(), src1->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n@@ -6947,1 +6962,3 @@\n-  int encode = evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n+  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n+  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n+  int encode = evex_prefix_and_encode_ndd(src2->encoding(), dst->encoding(), src1->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n@@ -7108,1 +7125,1 @@\n-void Assembler::esubl(Register dst, Register src2, Register src1, bool no_flags) {\n+void Assembler::esubl(Register dst, Register src1, Register src2, bool no_flags) {\n@@ -7110,3 +7127,4 @@\n-  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  \/\/ opcode matches gcc\n-  emit_arith(0x29, 0xC0, src1, src2);\n+  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n+  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n+  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n+  emit_arith(0x2B, 0xC0, src1, src2);\n@@ -7438,3 +7456,4 @@\n-  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  \/\/ opcode matches gcc\n-  emit_arith(0x31, 0xC0, src1, src2);\n+  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n+  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n+  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n+  emit_arith(0x33, 0xC0, src1, src2);\n@@ -7501,1 +7520,0 @@\n-  emit_int8(0x66);\n@@ -7503,2 +7521,4 @@\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n-  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_3C, &attributes, no_flags);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_16bit);\n+  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n+  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n+  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), VEX_SIMD_66, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n@@ -14299,3 +14319,4 @@\n-  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  \/\/ opcode matches gcc\n-  emit_arith(0x01, 0xC0, src1, src2);\n+  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n+  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n+  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n+  emit_arith(0x03, 0xC0, src1, src2);\n@@ -14395,3 +14416,4 @@\n-  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  \/\/ opcode matches gcc\n-  emit_arith(0x21, 0xC0, src1, src2);\n+  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n+  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n+  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n+  emit_arith(0x23, 0xC0, src1, src2);\n@@ -14826,1 +14848,1 @@\n-  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, \/* src_is_gpr *\/ true, \/* nds_is_ndd *\/ false, no_flags);\n+  int encode = evex_prefix_and_encode_nf(dst->encoding(), 0, src->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n@@ -14845,1 +14867,3 @@\n-  vex_prefix(src, 0, dst->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F, &attributes, \/* nds_is_ndd *\/ false, no_flags);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n+  evex_prefix_nf(src, 0, dst->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n+\n@@ -15290,3 +15314,4 @@\n-  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  \/\/ opcode matches gcc\n-  emit_arith(0x09, 0xC0, src1, src2);\n+  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n+  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n+  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n+  emit_arith(0x0B, 0xC0, src1, src2);\n@@ -15978,3 +16003,4 @@\n-  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  \/\/ opcode matches gcc\n-  emit_arith(0x29, 0xC0, src1, src2);\n+  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n+  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n+  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n+  emit_arith(0x2B, 0xC0, src1, src2);\n@@ -16042,3 +16068,4 @@\n-  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  \/\/ opcode matches gcc\n-  emit_arith(0x31, 0xC0, src1, src2);\n+  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n+  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n+  (void) evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n+  emit_arith(0x33, 0xC0, src1, src2);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":71,"deletions":44,"binary":false,"changes":115,"status":"modified"}]}