[{"commit":{"message":"Convert test from testNG to JUnit"},"files":[{"filename":"test\/jdk\/java\/util\/zip\/ZipInputStream\/Zip64DataDescriptor.java"}],"sha":"657f961ed0c2d99698bf260290638535f4b2b705"},{"commit":{"message":"Fix the check that the size of an extra field block size must not grow past the total extra field length"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java"}],"sha":"534373dc448da11279f4759fbf822242168e364b"},{"commit":{"message":"Move isZip64ExtBlockSizeValid back into ZipInputStream, since it is different from the ZipFile implementation which reads the LOC"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java"}],"sha":"7eb6b77f6d0529be240ea29e90b48f15c67b4e2f"},{"commit":{"message":"Merge branch 'master' into data-descriptor\n\n# Conflicts:\n#\tsrc\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java"},"files":[],"sha":"0cbca78d6d2aa1bda166a772a836285d14ea392b"},{"commit":{"message":"Remove excessive comment"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java"}],"sha":"fad0da2e6b952d47537c91687f2c0fdb002a36e5"},{"commit":{"message":"Move isZip64ExtBlockSizeValid to ZipUtils, use it from ZipInputStream and ZipFile.Source"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java"}],"sha":"2d7d3787df299007865ea594d76d9844ec783807"},{"commit":{"message":"Merge branch 'master' into data-descriptor"},"files":[],"sha":"2f36679afc5a147f803a1f6b7023c606b2743110"},{"commit":{"message":"Use block comments instead of javadoc comments to avoid doclint warnings"},"files":[{"filename":"test\/jdk\/java\/util\/zip\/ZipInputStream\/Zip64DataDescriptor.java"}],"sha":"01216ef75906f88aa4b574deed20f8511499aeb5"},{"commit":{"message":"Merge branch 'master' into data-descriptor"},"files":[],"sha":"0633c8079be981394784990ee50f95fa3633048d"},{"commit":{"message":"Zip64 extra field of a LOC header has 1-3 long components"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java"}],"sha":"b9e0a483690fbd129cb0312b53b0a2b5f738ed27"},{"commit":{"message":"Clarify comment for shouldIgnoreExcessiveExtraSize"},"files":[{"filename":"test\/jdk\/java\/util\/zip\/ZipInputStream\/Zip64DataDescriptor.java"}],"sha":"e162ee0181535d6c69ba1edc7ef1de389b3059bc"},{"commit":{"message":"Update test to use a Zip64 file produced using the zip command with the -fd flag"},"files":[{"filename":"test\/jdk\/java\/util\/zip\/ZipInputStream\/Zip64DataDescriptor.java"}],"sha":"45d34ce6075c31f837f188202dcdd743c3dcda76"},{"commit":{"message":"Add comment to explaining the setExtraSize and readZipInputStream methods and the zip64File field."},"files":[{"filename":"test\/jdk\/java\/util\/zip\/ZipInputStream\/Zip64DataDescriptor.java"}],"sha":"5a9576e2f90a8548a1d2e4603c2a1e0a82965d14"},{"commit":{"message":"Add comment to the call site of hasZip64 extra"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java"}],"sha":"e2ca1509babf0768a490e19f7c805cbb676b1e2b"},{"commit":{"message":"Improve the documentation of ZipInputStream.hasZip64Extra, explaining how the method is used and adding a reference to the APPNOTE.txt specification."},"files":[{"filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java"}],"sha":"a1937caa1cea27d09be616d938f0a1ac42376512"},{"commit":{"message":"Make (2 * Short.BYTES) less magic my extracting a variable with a comment"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java"}],"sha":"dbb349d1c6b687e0c464806f63c8412b6be2e3df"},{"commit":{"message":"Merge branch 'master' into data-descriptor"},"files":[],"sha":"e8bf14263041731b5439183ce8bb3d97a07b7661"},{"commit":{"message":"Validate that the Zip64 extra field is right sized (8, 16, 24 or 28 bytes). Add tests for excessive and invalid extra data sizes."},"files":[{"filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java"},{"filename":"test\/jdk\/java\/util\/zip\/ZipInputStream\/Zip64DataDescriptor.java"}],"sha":"05a3d700a15b26dd678f246a369deb5aaa4ba07c"},{"commit":{"message":"Merge branch 'master' into data-descriptor"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java"}],"sha":"9d9927f2ec975271bd3236bf0d44734bf6c7a649"},{"commit":{"message":"Further reduce the impact of this change by augmenting instead of replacing the existing check"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java"}],"sha":"3f72e264017b6947d08da876f6af72a904be7d21"},{"commit":{"message":"Revert refactoring in ZipInputStream.readEnd, leaving only the change to check for precense of a Zip64 header. Also revert the support for CRC == SIGEXT, including the test."},"files":[{"filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java"}],"sha":"719b7db5b93328d3c3e69d1a72c08b2fd702cbb9"},{"commit":{"message":"Break loop in case of invalid extra field data size"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java"}],"sha":"9bf0a73614b2f09b8fb6e42883675d4cdc707a7e"},{"commit":{"message":"Spellfix in comment"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java"}],"sha":"e6eead686cb9f0c707af26ce0236af8e860e19b3"},{"commit":{"message":"Update copyright year"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java"}],"sha":"a652c59364400a98ab22f08f1e6c13fb0a582c89"},{"commit":{"message":"Fix ZipInputStream.readEnd to correctly identify ZIP64 data descriptor. Also update readEnd to correctly distinguish a CRC of 0x08074b50 from SIGEXT which has the same value."},"files":[{"filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java"},{"filename":"test\/jdk\/java\/util\/zip\/ZipInputStream\/Zip64DataDescriptor.java"}],"sha":"6b5befcdb058df0c7f1c5328cfcd1de4ee1dcceb"}]