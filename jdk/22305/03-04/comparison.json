{"files":[{"patch":"@@ -253,4 +253,1 @@\n-  if (Arguments::is_internal_module_property(key) &&\n-      !Arguments::is_module_path_property(key) &&\n-      !Arguments::is_add_modules_property(key) &&\n-      !Arguments::is_enable_native_access_property(key)) {\n+  if (Arguments::is_non_cds_compatible_internal_module_property(key)) {\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -426,3 +426,1 @@\n-  CDS_JAVA_HEAP_ONLY(Modules::serialize(soc);)\n-  CDS_JAVA_HEAP_ONLY(Modules::serialize_addmods_names(soc);)\n-  CDS_JAVA_HEAP_ONLY(Modules::serialize_native_access_flags(soc);)\n+  CDS_JAVA_HEAP_ONLY(Modules::serialize_archived_module_info(soc);)\n@@ -571,6 +569,1 @@\n-  \/\/ Write module name into archive\n-  CDS_JAVA_HEAP_ONLY(Modules::dump_main_module_name();)\n-  \/\/ Write module names from --add-modules into archive\n-  CDS_JAVA_HEAP_ONLY(Modules::dump_addmods_names();)\n-  \/\/ Write native enable-native-access flag into archive\n-  CDS_JAVA_HEAP_ONLY(Modules::dump_native_access_flag());\n+  CDS_JAVA_HEAP_ONLY(Modules::dump_archived_module_info());\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -574,1 +574,1 @@\n-void Modules::check_archived_flag_consistency(char** archived_flag, const char* runtime_flag, const char* property) {\n+void Modules::check_archived_flag_consistency(char* archived_flag, const char* runtime_flag, const char* property) {\n@@ -576,1 +576,1 @@\n-    *archived_flag != nullptr ? *archived_flag : \"(null)\");\n+    archived_flag != nullptr ? archived_flag : \"(null)\");\n@@ -579,2 +579,2 @@\n-    if (*archived_flag != nullptr) {\n-      log_info(cds)(\"Module for %s: %s specified during dump time but not during runtime\", property, *archived_flag);\n+    if (archived_flag != nullptr) {\n+      log_info(cds)(\"Value for property %s: %s specified during dump time but not during runtime\", property, archived_flag);\n@@ -584,2 +584,2 @@\n-    if (*archived_flag == nullptr) {\n-      log_info(cds)(\"Module for %s: %s specified during runtime but not during dump time\", property, runtime_flag);\n+    if (archived_flag == nullptr) {\n+      log_info(cds)(\"Value for property %s: %s specified during runtime but not during dump time\", property, runtime_flag);\n@@ -587,2 +587,2 @@\n-    } else if (strcmp(runtime_flag, *archived_flag) != 0) {\n-      log_info(cds)(\"Mismatched modules for %s: runtime %s dump time %s\", property, runtime_flag, *archived_flag);\n+    } else if (strcmp(runtime_flag, archived_flag) != 0) {\n+      log_info(cds)(\"Mismatched values for property %s: runtime %s dump time %s\", property, runtime_flag, archived_flag);\n@@ -599,0 +599,10 @@\n+}\n+\n+void Modules::dump_archived_module_info() {\n+  \/\/ Write module name into archive\n+  CDS_JAVA_HEAP_ONLY(Modules::dump_main_module_name();)\n+  \/\/ Write module names from --add-modules into archive\n+  CDS_JAVA_HEAP_ONLY(Modules::dump_addmods_names();)\n+  \/\/ Write native enable-native-access flag into archive\n+  CDS_JAVA_HEAP_ONLY(Modules::dump_native_access_flag());\n+}\n@@ -600,2 +610,4 @@\n-  \/\/ Don't hold onto the pointer, in case we might decide to unmap the archive.\n-  *archived_flag = nullptr;\n+void Modules::serialize_archived_module_info(SerializeClosure* soc) {\n+  CDS_JAVA_HEAP_ONLY(Modules::serialize(soc);)\n+  CDS_JAVA_HEAP_ONLY(Modules::serialize_addmods_names(soc);)\n+  CDS_JAVA_HEAP_ONLY(Modules::serialize_native_access_flags(soc);)\n@@ -611,1 +623,4 @@\n-    check_archived_flag_consistency(&_archived_main_module_name, runtime_main_module, \"jdk.module.main\");\n+    check_archived_flag_consistency(_archived_main_module_name, runtime_main_module, \"jdk.module.main\");\n+\n+    \/\/ Don't hold onto the pointer, in case we might decide to unmap the archive.\n+    _archived_main_module_name = nullptr;\n@@ -616,1 +631,0 @@\n-  unsigned int count = Arguments::enable_native_access_count();\n@@ -624,1 +638,1 @@\n-  return get_numbered_property_as_sorted_string(\"jdk.module.enable.native.access\", Arguments::enable_native_access_count());\n+  return get_numbered_property_as_sorted_string(\"jdk.module.enable.native.access\");\n@@ -630,1 +644,4 @@\n-    check_archived_flag_consistency(&_archived_native_access_flags, get_native_access_flags_as_sorted_string(), \"jdk.module.enable.native.access\");\n+    check_archived_flag_consistency(_archived_native_access_flags, get_native_access_flags_as_sorted_string(), \"jdk.module.enable.native.access\");\n+\n+    \/\/ Don't hold onto the pointer, in case we might decide to unmap the archive.\n+    _archived_native_access_flags = nullptr;\n@@ -635,1 +652,0 @@\n-  unsigned int count = Arguments::addmods_count();\n@@ -643,1 +659,1 @@\n-  return get_numbered_property_as_sorted_string(\"jdk.module.addmods\", Arguments::addmods_count());\n+  return get_numbered_property_as_sorted_string(\"jdk.module.addmods\");\n@@ -649,1 +665,4 @@\n-    check_archived_flag_consistency(&_archived_addmods_names, get_addmods_names_as_sorted_string(), \"jdk.module.addmods\");\n+    check_archived_flag_consistency(_archived_addmods_names, get_addmods_names_as_sorted_string(), \"jdk.module.addmods\");\n+\n+    \/\/ Don't hold onto the pointer, in case we might decide to unmap the archive.\n+    _archived_addmods_names = nullptr;\n@@ -653,1 +672,1 @@\n-const char* Modules::get_numbered_property_as_sorted_string(const char* property, unsigned int property_count) {\n+const char* Modules::get_numbered_property_as_sorted_string(const char* property) {\n@@ -655,1 +674,3 @@\n-  const int max_digits = 3;\n+  \/\/ theoretical string size limit for decimal int, but the following loop will end much sooner due to\n+  \/\/ OS command-line size limit.\n+  const int max_digits = 10;\n@@ -660,1 +681,1 @@\n-  for (unsigned int i = 0; i < property_count; i++) {\n+  for (unsigned int i = 0;; i++) {\n@@ -663,0 +684,3 @@\n+    if (prop_value == nullptr) {\n+      break;\n+    }\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":44,"deletions":20,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -62,0 +62,2 @@\n+  static void dump_archived_module_info() NOT_CDS_JAVA_HEAP_RETURN;\n+  static void serialize_archived_module_info(SerializeClosure* soc) NOT_CDS_JAVA_HEAP_RETURN;\n@@ -64,1 +66,1 @@\n-  static void check_archived_flag_consistency(char** archived_flag, const char* runtime_flag, const char* property) NOT_CDS_JAVA_HEAP_RETURN;\n+  static void check_archived_flag_consistency(char* archived_flag, const char* runtime_flag, const char* property) NOT_CDS_JAVA_HEAP_RETURN;\n@@ -74,1 +76,1 @@\n-  static const char* get_numbered_property_as_sorted_string(const char* property, unsigned int property_count) NOT_CDS_JAVA_HEAP_RETURN_(nullptr);\n+  static const char* get_numbered_property_as_sorted_string(const char* property) NOT_CDS_JAVA_HEAP_RETURN_(nullptr);\n","filename":"src\/hotspot\/share\/classfile\/modules.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -324,1 +324,11 @@\n-  if  (strncmp(property, MODULE_PROPERTY_PREFIX, MODULE_PROPERTY_PREFIX_LEN) == 0) {\n+  return internal_module_property_helper(property, false);\n+}\n+\n+\/\/ Returns true if property is one of those recognized by is_internal_module_property() but\n+\/\/ is not supported by CDS archived full module graph.\n+bool Arguments::is_non_cds_compatible_internal_module_property(const char* property) {\n+  return internal_module_property_helper(property, true);\n+}\n+\n+bool Arguments::internal_module_property_helper(const char* property, bool check_for_cds) {\n+  if (strncmp(property, MODULE_PROPERTY_PREFIX, MODULE_PROPERTY_PREFIX_LEN) == 0) {\n@@ -330,1 +340,0 @@\n-        matches_property_suffix(property_suffix, ADDMODS, ADDMODS_LEN) ||\n@@ -332,1 +341,0 @@\n-        matches_property_suffix(property_suffix, PATH, PATH_LEN) ||\n@@ -334,2 +342,1 @@\n-        matches_property_suffix(property_suffix, ILLEGAL_NATIVE_ACCESS, ILLEGAL_NATIVE_ACCESS_LEN) ||\n-        matches_property_suffix(property_suffix, ENABLE_NATIVE_ACCESS, ENABLE_NATIVE_ACCESS_LEN)) {\n+        matches_property_suffix(property_suffix, ILLEGAL_NATIVE_ACCESS, ILLEGAL_NATIVE_ACCESS_LEN)) {\n@@ -338,0 +345,9 @@\n+\n+    if (!check_for_cds) {\n+      \/\/ CDS notes: these properties are supported by CDS archived full module graph.\n+      if (matches_property_suffix(property_suffix, PATH, PATH_LEN) ||\n+          matches_property_suffix(property_suffix, ADDMODS, ADDMODS_LEN) ||\n+          matches_property_suffix(property_suffix, ENABLE_NATIVE_ACCESS, ENABLE_NATIVE_ACCESS_LEN)) {\n+        return true;\n+      }\n+    }\n@@ -342,13 +358,0 @@\n-bool Arguments::is_add_modules_property(const char* key) {\n-  return (strcmp(key, MODULE_PROPERTY_PREFIX ADDMODS) == 0);\n-}\n-\n-bool Arguments::is_enable_native_access_property(const char* key) {\n-  return (strcmp(key, MODULE_PROPERTY_PREFIX ENABLE_NATIVE_ACCESS) == 0);\n-}\n-\n-\/\/ Return true if the key matches the --module-path property name (\"jdk.module.path\").\n-bool Arguments::is_module_path_property(const char* key) {\n-  return (strcmp(key, MODULE_PROPERTY_PREFIX PATH) == 0);\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":21,"deletions":18,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -467,5 +467,2 @@\n-  static bool is_add_modules_property(const char* key);\n-  static unsigned int addmods_count() { return  _addmods_count; }\n-  static bool is_enable_native_access_property(const char* key);\n-  static unsigned int enable_native_access_count() { return _enable_native_access_count; }\n-  static bool is_module_path_property(const char* key);\n+  static bool is_non_cds_compatible_internal_module_property(const char* property);\n+  static bool internal_module_property_helper(const char* property, bool check_for_cds);\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-            .assertAbnormalExit(\"Mismatched modules for jdk.module.addmods\",\n+            .assertAbnormalExit(\"Mismatched values for property jdk.module.addmods\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/AOTClassLinkingVMOptions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-          .shouldContain(\"Mismatched modules for jdk.module.addmods\")\n+          .shouldContain(\"Mismatched values for property jdk.module.addmods\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/addmods\/AddmodsOption.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-        .shouldContain(\"Mismatched modules for jdk.module.enable.native.access: runtime jdk.httpserver dump time java.base\")\n+        .shouldContain(\"Mismatched values for property jdk.module.enable.native.access: runtime jdk.httpserver dump time java.base\")\n@@ -76,1 +76,1 @@\n-        .shouldContain(\"Module for jdk.module.enable.native.access: java.base specified during dump time but not during runtime\")\n+        .shouldContain(\"Value for property jdk.module.enable.native.access: java.base specified during dump time but not during runtime\")\n@@ -94,2 +94,2 @@\n-        .shouldContain(\"Module for jdk.module.enable.native.access: java.base specified during runtime but not during dump time\")\n-        .shouldContain(disabledOptimizedModule);\n+          .shouldContain(\"Value for property jdk.module.enable.native.access: java.base specified during runtime but not during dump time\")\n+          .shouldContain(disabledOptimizedModule);\n@@ -130,1 +130,1 @@\n-            .shouldContain(\"Mismatched modules for jdk.module.enable.native.access: runtime java.base dump time java.base,jdk.httpserver\")\n+            .shouldContain(\"Mismatched values for property jdk.module.enable.native.access: runtime java.base dump time java.base,jdk.httpserver\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/module\/EnableNativeAccessCDS.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-          .shouldContain(\"Mismatched modules for jdk.module.main: runtime jdk.compiler dump time jdk.httpserver\")\n+          .shouldContain(\"Mismatched values for property jdk.module.main: runtime jdk.compiler dump time jdk.httpserver\")\n@@ -81,1 +81,1 @@\n-          .shouldContain(\"Module for jdk.module.main: jdk.httpserver specified during dump time but not during runtime\")\n+          .shouldContain(\"Value for property jdk.module.main: jdk.httpserver specified during dump time but not during runtime\")\n@@ -99,1 +99,1 @@\n-          .shouldContain(\"Module for jdk.module.main: jdk.httpserver specified during runtime but not during dump time\")\n+          .shouldContain(\"Value for property jdk.module.main: jdk.httpserver specified during runtime but not during dump time\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/module\/ModuleOption.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}