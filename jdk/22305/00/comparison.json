{"files":[{"patch":"@@ -248,1 +248,2 @@\n-      !Arguments::is_add_modules_property(key)) {\n+      !Arguments::is_add_modules_property(key) &&\n+      !Arguments::is_enable_native_access_property(key)) {\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -398,0 +398,1 @@\n+  CDS_JAVA_HEAP_ONLY(Modules::serialize_native_access_flags(soc);)\n@@ -539,0 +540,2 @@\n+  \/\/ Write native enable-native-access flag into archive\n+  CDS_JAVA_HEAP_ONLY(Modules::dump_native_access_flag());\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -565,0 +565,1 @@\n+char* Modules::_archived_native_access_flags = nullptr;\n@@ -608,0 +609,49 @@\n+void Modules::dump_native_access_flag() {\n+  unsigned int count = Arguments::enable_native_access_count();\n+  const char* native_access_names = get_native_access_flags_as_sorted_string();\n+  if (native_access_names != nullptr) {\n+    _archived_native_access_flags = ArchiveBuilder::current()->ro_strdup(native_access_names);\n+  }\n+  ArchivePtrMarker::mark_pointer(&_archived_native_access_flags);\n+}\n+\n+const char* Modules::get_native_access_flags_as_sorted_string() {\n+  return get_numbered_property_as_sorted_string(\"jdk.module.enable.native.access\", Arguments::enable_native_access_count());\n+}\n+\n+void Modules::serialize_native_access_flags(SerializeClosure* soc) {\n+  soc->do_ptr(&_archived_native_access_flags);\n+  if (soc->reading()) {\n+    bool disable = false;\n+    if (_archived_native_access_flags[0] != '\\0') {\n+      if (Arguments::enable_native_access_count() == 0) {\n+        log_info(cds)(\"--enable-native-access module name(s) found in archive but not specified during runtime: %s\",\n+            _archived_native_access_flags);\n+        disable = true;\n+      } else {\n+        const char* native_access_flags = get_native_access_flags_as_sorted_string();\n+        if (strcmp((const char*)_archived_native_access_flags, native_access_flags) != 0) {\n+          log_info(cds)(\"Mismatched --enable-native-access module name(s).\");\n+          log_info(cds)(\"  dump time: %s runtime: %s\", _archived_native_access_flags, native_access_flags);\n+          disable = true;\n+        }\n+      }\n+    } else {\n+      if (Arguments::enable_native_access_count() > 0) {\n+        log_info(cds)(\"--enable-native-access module name(s) specified during runtime but not found in archive: %s\",\n+                      get_native_access_flags_as_sorted_string());\n+        disable = true;\n+      }\n+    }\n+    if (disable) {\n+      log_info(cds)(\"Disabling optimized module handling\");\n+      CDSConfig::stop_using_optimized_module_handling();\n+    }\n+    log_info(cds)(\"optimized module handling: %s\", CDSConfig::is_using_optimized_module_handling() ? \"enabled\" : \"disabled\");\n+    log_info(cds)(\"full module graph: %s\", CDSConfig::is_using_full_module_graph() ? \"enabled\" : \"disabled\");\n+\n+    \/\/ Don't hold onto the pointer, in case we might decide to unmap the archive.\n+    _archived_native_access_flags = nullptr;\n+  }\n+}\n+\n@@ -617,0 +667,4 @@\n+const char* Modules::get_addmods_names_as_sorted_string() {\n+  return get_numbered_property_as_sorted_string(\"jdk.module.addmods\", Arguments::addmods_count());\n+}\n+\n@@ -653,1 +707,1 @@\n-const char* Modules::get_addmods_names_as_sorted_string() {\n+const char* Modules::get_numbered_property_as_sorted_string(const char* property, unsigned int property_count) {\n@@ -657,1 +711,1 @@\n-  size_t prop_len = strlen(\"jdk.module.addmods\") + max_digits + extra_symbols_count;\n+  size_t prop_len = strlen(property) + max_digits + extra_symbols_count;\n@@ -660,2 +714,2 @@\n-  for (unsigned int i = 0; i < Arguments::addmods_count(); i++) {\n-    jio_snprintf(prop_name, prop_len, \"jdk.module.addmods.%d\", i);\n+  for (unsigned int i = 0; i < property_count; i++) {\n+    jio_snprintf(prop_name, prop_len, \"%s.%d\", property, i);\n@@ -698,1 +752,1 @@\n-      prefix = \"\\n\";\n+      prefix = \",\";\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":59,"deletions":5,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -64,0 +64,5 @@\n+\n+  static void dump_native_access_flag() NOT_CDS_JAVA_HEAP_RETURN;\n+  static const char* get_native_access_flags_as_sorted_string() NOT_CDS_JAVA_HEAP_RETURN_(nullptr);\n+  static void serialize_native_access_flags(SerializeClosure* soc) NOT_CDS_JAVA_HEAP_RETURN;\n+\n@@ -65,1 +70,0 @@\n-  static void serialize_addmods_names(SerializeClosure* soc) NOT_CDS_JAVA_HEAP_RETURN;\n@@ -67,0 +71,1 @@\n+  static void serialize_addmods_names(SerializeClosure* soc) NOT_CDS_JAVA_HEAP_RETURN;\n@@ -68,0 +73,1 @@\n+  static const char* get_numbered_property_as_sorted_string(const char* property, unsigned int property_count) NOT_CDS_JAVA_HEAP_RETURN_(nullptr);\n@@ -71,0 +77,1 @@\n+  static char* _archived_native_access_flags;\n","filename":"src\/hotspot\/share\/classfile\/modules.hpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -83,13 +83,14 @@\n-char*  Arguments::_jvm_flags_file               = nullptr;\n-char** Arguments::_jvm_flags_array              = nullptr;\n-int    Arguments::_num_jvm_flags                = 0;\n-char** Arguments::_jvm_args_array               = nullptr;\n-int    Arguments::_num_jvm_args                 = 0;\n-unsigned int Arguments::_addmods_count          = 0;\n-char*  Arguments::_java_command                 = nullptr;\n-SystemProperty* Arguments::_system_properties   = nullptr;\n-size_t Arguments::_conservative_max_heap_alignment = 0;\n-Arguments::Mode Arguments::_mode                = _mixed;\n-const char*  Arguments::_java_vendor_url_bug    = nullptr;\n-const char*  Arguments::_sun_java_launcher      = DEFAULT_JAVA_LAUNCHER;\n-bool   Arguments::_sun_java_launcher_is_altjvm  = false;\n+char*  Arguments::_jvm_flags_file                   = nullptr;\n+char** Arguments::_jvm_flags_array                  = nullptr;\n+int    Arguments::_num_jvm_flags                    = 0;\n+char** Arguments::_jvm_args_array                   = nullptr;\n+int    Arguments::_num_jvm_args                     = 0;\n+unsigned int Arguments::_addmods_count              = 0;\n+unsigned int Arguments::_enable_native_access_count = 0;\n+char*  Arguments::_java_command                     = nullptr;\n+SystemProperty* Arguments::_system_properties       = nullptr;\n+size_t Arguments::_conservative_max_heap_alignment  = 0;\n+Arguments::Mode Arguments::_mode                    = _mixed;\n+const char*  Arguments::_java_vendor_url_bug        = nullptr;\n+const char*  Arguments::_sun_java_launcher          = DEFAULT_JAVA_LAUNCHER;\n+bool   Arguments::_sun_java_launcher_is_altjvm      = false;\n@@ -344,0 +345,4 @@\n+bool Arguments::is_enable_native_access_property(const char* key) {\n+  return (strcmp(key, MODULE_PROPERTY_PREFIX ENABLE_NATIVE_ACCESS) == 0);\n+}\n+\n@@ -1774,1 +1779,0 @@\n-unsigned int enable_native_access_count = 0;\n@@ -2247,1 +2251,1 @@\n-      if (!create_numbered_module_property(\"jdk.module.enable.native.access\", tail, enable_native_access_count++)) {\n+      if (!create_numbered_module_property(\"jdk.module.enable.native.access\", tail, _enable_native_access_count++)) {\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":19,"deletions":15,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -201,0 +201,2 @@\n+  \/\/ number of unique modules specified in the --enable-native-access option\n+  static unsigned int _enable_native_access_count;\n@@ -467,0 +469,2 @@\n+  static bool is_enable_native_access_property(const char* key);\n+  static unsigned int enable_native_access_count() { return _enable_native_access_count; }\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8342089\n+ * @summary Test consistency of --enable-native-access option for CDS dump time and runtime\n+ * @requires vm.cds.write.archived.java.heap\n+ * @requires vm.flagless\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @run driver EnableNativeAccessCDS\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class EnableNativeAccessCDS {\n+    public static void main(String[] args) throws Exception {\n+        final String module0 = \"java.base\";\n+        final String module1 = \"jdk.httpserver\";\n+        final String disabledOptimizedModule = \"Disabling optimized module handling\";\n+        final String loggingOption = \"-Xlog:cds=debug,cds+module=debug,cds+heap=info,module=trace\";\n+\n+        String archiveName = TestCommon.getNewArchiveName(\"native-access\");\n+        TestCommon.setCurrentArchiveName(archiveName);\n+\n+        \/\/ dump a base archive with --enable-native-access=java.base\n+        OutputAnalyzer oa = TestCommon.dumpBaseArchive(\n+            archiveName,\n+            loggingOption,\n+            \"--enable-native-access\", module0,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0);\n+\n+        \/\/ same module specified during runtime\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"--enable-native-access\", module0,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+        .shouldContain(\"use_full_module_graph = true\");\n+\n+        \/\/ different module specified during runtime\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"--enable-native-access\", module1,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+        .shouldContain(\"Mismatched --enable-native-access module name(s).\")\n+        .shouldContain(disabledOptimizedModule);\n+\n+        \/\/ no module specified during runtime\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+        .shouldContain(\"--enable-native-access module name(s) found in archive but not specified during runtime\")\n+        .shouldContain(disabledOptimizedModule);\n+\n+        \/\/ dump an archive without the module option\n+        archiveName = TestCommon.getNewArchiveName(\"no-native-access-modules\");\n+        TestCommon.setCurrentArchiveName(archiveName);\n+        oa = TestCommon.dumpBaseArchive(\n+            archiveName,\n+            loggingOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0);\n+\n+        \/\/ run with --enable-native-access\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"--enable-native-access\", module0,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+        .shouldContain(\"--enable-native-access module name(s) specified during runtime but not found in archive\")\n+        .shouldContain(disabledOptimizedModule);\n+\n+        \/\/ dump an archive with multiple modules with native access\n+        archiveName = TestCommon.getNewArchiveName(\"multiple-native-access-modules\");\n+        TestCommon.setCurrentArchiveName(archiveName);\n+        oa = TestCommon.dumpBaseArchive(\n+            archiveName,\n+            loggingOption,\n+            \"--enable-native-access\", module0 + \",\" + module1,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0);\n+\n+        \/\/ same module specified during runtime but in a different order\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"--enable-native-access\", module1 + \",\" + module0,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+          .shouldContain(\"use_full_module_graph = true\");\n+\n+        \/\/ same module specified during runtime but specifying --enable-native-access twice\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"--enable-native-access\", module0,\n+            \"--enable-native-access\", module1,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+          .shouldContain(\"use_full_module_graph = true\");\n+\n+        \/\/ run with only one same module\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"--enable-native-access\", module0,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+            .shouldContain(\"Mismatched --enable-native-access module name(s).\")\n+            .shouldContain(disabledOptimizedModule);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/module\/EnableNativeAccessCDS.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"}]}