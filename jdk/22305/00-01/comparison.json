{"files":[{"patch":"@@ -572,1 +572,30 @@\n-  ArchivePtrMarker::mark_pointer(&_archived_main_module_name);\n+}\n+\n+void Modules::check_archived_flag_consistency(char** archived_flag, const char* runtime_flag, const char* property) {\n+  log_info(cds)(\"%s %s\", property,\n+    *archived_flag != nullptr ? *archived_flag : \"(null)\");\n+  bool disable = false;\n+  if (runtime_flag == nullptr) {\n+    if (*archived_flag != nullptr) {\n+      log_info(cds)(\"Module for %s: %s specified during dump time but not during runtime\", property, *archived_flag);\n+      disable = true;\n+    }\n+  } else {\n+    if (*archived_flag == nullptr) {\n+      log_info(cds)(\"Module for %s: %s specified during runtime but not during dump time\", property, runtime_flag);\n+      disable = true;\n+    } else if (strcmp(runtime_flag, *archived_flag) != 0) {\n+      log_info(cds)(\"Mismatched modules for %s: runtime %s dump time %s\", property, runtime_flag, *archived_flag);\n+      disable = true;\n+    }\n+  }\n+\n+  if (disable) {\n+    log_info(cds)(\"Disabling optimized module handling\");\n+    CDSConfig::stop_using_optimized_module_handling();\n+  }\n+  log_info(cds)(\"optimized module handling: %s\", CDSConfig::is_using_optimized_module_handling() ? \"enabled\" : \"disabled\");\n+  log_info(cds)(\"full module graph: %s\", CDSConfig::is_using_full_module_graph() ? \"enabled\" : \"disabled\");\n+\n+  \/\/ Don't hold onto the pointer, in case we might decide to unmap the archive.\n+  *archived_flag = nullptr;\n@@ -581,22 +610,0 @@\n-    bool disable = false;\n-    if (runtime_main_module == nullptr) {\n-      if (_archived_main_module_name != nullptr) {\n-        log_info(cds)(\"Module %s specified during dump time but not during runtime\", _archived_main_module_name);\n-        disable = true;\n-      }\n-    } else {\n-      if (_archived_main_module_name == nullptr) {\n-        log_info(cds)(\"Module %s specified during runtime but not during dump time\", runtime_main_module);\n-        disable = true;\n-      } else if (strcmp(runtime_main_module, _archived_main_module_name) != 0) {\n-        log_info(cds)(\"Mismatched modules: runtime %s dump time %s\", runtime_main_module, _archived_main_module_name);\n-        disable = true;\n-      }\n-    }\n-\n-    if (disable) {\n-      log_info(cds)(\"Disabling optimized module handling\");\n-      CDSConfig::stop_using_optimized_module_handling();\n-    }\n-    log_info(cds)(\"optimized module handling: %s\", CDSConfig::is_using_optimized_module_handling() ? \"enabled\" : \"disabled\");\n-    log_info(cds)(\"full module graph: %s\", CDSConfig::is_using_full_module_graph() ? \"enabled\" : \"disabled\");\n@@ -604,2 +611,1 @@\n-    \/\/ Don't hold onto the pointer, in case we might decide to unmap the archive.\n-    _archived_main_module_name = nullptr;\n+    check_archived_flag_consistency(&_archived_main_module_name, runtime_main_module, \"jdk.module.main\");\n@@ -615,1 +621,0 @@\n-  ArchivePtrMarker::mark_pointer(&_archived_native_access_flags);\n@@ -625,30 +630,1 @@\n-    bool disable = false;\n-    if (_archived_native_access_flags[0] != '\\0') {\n-      if (Arguments::enable_native_access_count() == 0) {\n-        log_info(cds)(\"--enable-native-access module name(s) found in archive but not specified during runtime: %s\",\n-            _archived_native_access_flags);\n-        disable = true;\n-      } else {\n-        const char* native_access_flags = get_native_access_flags_as_sorted_string();\n-        if (strcmp((const char*)_archived_native_access_flags, native_access_flags) != 0) {\n-          log_info(cds)(\"Mismatched --enable-native-access module name(s).\");\n-          log_info(cds)(\"  dump time: %s runtime: %s\", _archived_native_access_flags, native_access_flags);\n-          disable = true;\n-        }\n-      }\n-    } else {\n-      if (Arguments::enable_native_access_count() > 0) {\n-        log_info(cds)(\"--enable-native-access module name(s) specified during runtime but not found in archive: %s\",\n-                      get_native_access_flags_as_sorted_string());\n-        disable = true;\n-      }\n-    }\n-    if (disable) {\n-      log_info(cds)(\"Disabling optimized module handling\");\n-      CDSConfig::stop_using_optimized_module_handling();\n-    }\n-    log_info(cds)(\"optimized module handling: %s\", CDSConfig::is_using_optimized_module_handling() ? \"enabled\" : \"disabled\");\n-    log_info(cds)(\"full module graph: %s\", CDSConfig::is_using_full_module_graph() ? \"enabled\" : \"disabled\");\n-\n-    \/\/ Don't hold onto the pointer, in case we might decide to unmap the archive.\n-    _archived_native_access_flags = nullptr;\n+    check_archived_flag_consistency(&_archived_native_access_flags, get_native_access_flags_as_sorted_string(), \"jdk.module.enable.native.access\");\n@@ -664,1 +640,0 @@\n-  ArchivePtrMarker::mark_pointer(&_archived_addmods_names);\n@@ -674,30 +649,1 @@\n-    bool disable = false;\n-    if (_archived_addmods_names[0] != '\\0') {\n-      if (Arguments::addmods_count() == 0) {\n-        log_info(cds)(\"--add-modules module name(s) found in archive but not specified during runtime: %s\",\n-            _archived_addmods_names);\n-        disable = true;\n-      } else {\n-        const char* addmods_names = get_addmods_names_as_sorted_string();\n-        if (strcmp((const char*)_archived_addmods_names, addmods_names) != 0) {\n-          log_info(cds)(\"Mismatched --add-modules module name(s).\");\n-          log_info(cds)(\"  dump time: %s runtime: %s\", _archived_addmods_names, addmods_names);\n-          disable = true;\n-        }\n-      }\n-    } else {\n-      if (Arguments::addmods_count() > 0) {\n-        log_info(cds)(\"--add-modules module name(s) specified during runtime but not found in archive: %s\",\n-                      get_addmods_names_as_sorted_string());\n-        disable = true;\n-      }\n-    }\n-    if (disable) {\n-      log_info(cds)(\"Disabling optimized module handling\");\n-      CDSConfig::stop_using_optimized_module_handling();\n-    }\n-    log_info(cds)(\"optimized module handling: %s\", CDSConfig::is_using_optimized_module_handling() ? \"enabled\" : \"disabled\");\n-    log_info(cds)(\"full module graph: %s\", CDSConfig::is_using_full_module_graph() ? \"enabled\" : \"disabled\");\n-\n-    \/\/ Don't hold onto the pointer, in case we might decide to unmap the archive.\n-    _archived_addmods_names = nullptr;\n+    check_archived_flag_consistency(&_archived_addmods_names, get_addmods_names_as_sorted_string(), \"jdk.module.addmods\");\n@@ -756,1 +702,2 @@\n-  return (const char*)os::strdup(st.as_string()); \/\/ Example: \"java.base,java.compiler\"\n+  const char* result = (const char*)os::strdup(st.as_string()); \/\/ Example: \"java.base,java.compiler\"\n+  return strcmp(result, \"\") != 0 ? result : nullptr;\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":35,"deletions":88,"binary":false,"changes":123,"status":"modified"},{"patch":"@@ -64,0 +64,1 @@\n+  static void check_archived_flag_consistency(char** archived_flag, const char* runtime_flag, const char* property) NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/classfile\/modules.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-            .assertAbnormalExit(\"Mismatched --add-modules module name(s)\",\n+            .assertAbnormalExit(\"Mismatched modules for jdk.module.addmods\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/AOTClassLinkingVMOptions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,2 +86,2 @@\n-          .shouldContain(\"Mismatched --add-modules module name(s).\")\n-          .shouldContain(\"dump time: jdk.jconsole runtime: jdk.incubator.vector\")\n+          .shouldContain(\"Mismatched modules for jdk.module.addmods\")\n+          .shouldContain(\"runtime jdk.incubator.vector dump time jdk.jconsole\")\n@@ -95,1 +95,1 @@\n-          .shouldContain(\"Module jdk.httpserver specified during dump time but not during runtime\")\n+          .shouldContain(\"jdk.httpserver specified during dump time but not during runtime\")\n@@ -115,1 +115,1 @@\n-          .shouldContain(\"--add-modules module name(s) specified during runtime but not found in archive: jdk.jconsole\")\n+          .shouldContain(\"jdk.jconsole specified during runtime but not during dump time\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/addmods\/AddmodsOption.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-        final String loggingOption = \"-Xlog:cds=debug,cds+module=debug,cds+heap=info,module=trace\";\n+        final String loggingOption = \"-Xlog:cds=debug\";\n@@ -68,1 +68,1 @@\n-        .shouldContain(\"Mismatched --enable-native-access module name(s).\")\n+        .shouldContain(\"Mismatched modules for jdk.module.enable.native.access\")\n@@ -76,1 +76,1 @@\n-        .shouldContain(\"--enable-native-access module name(s) found in archive but not specified during runtime\")\n+        .shouldContain(\"Module for jdk.module.enable.native.access: java.base specified during dump time but not during runtime\")\n@@ -79,1 +79,1 @@\n-        \/\/ dump an archive without the module option\n+        \/\/ dump an archive without --enable-native-access option\n@@ -94,1 +94,1 @@\n-        .shouldContain(\"--enable-native-access module name(s) specified during runtime but not found in archive\")\n+        .shouldContain(\"Module for jdk.module.enable.native.access: java.base specified during runtime but not during dump time\")\n@@ -130,1 +130,1 @@\n-            .shouldContain(\"Mismatched --enable-native-access module name(s).\")\n+            .shouldContain(\"Mismatched modules for jdk.module.enable.native.access\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/module\/EnableNativeAccessCDS.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-          .shouldContain(\"Mismatched modules: runtime jdk.compiler dump time jdk.httpserver\")\n+          .shouldContain(\"Mismatched modules for jdk.module.main: runtime jdk.compiler dump time jdk.httpserver\")\n@@ -81,1 +81,1 @@\n-          .shouldContain(\"Module jdk.httpserver specified during dump time but not during runtime\")\n+          .shouldContain(\"Module for jdk.module.main: jdk.httpserver specified during dump time but not during runtime\")\n@@ -99,1 +99,1 @@\n-          .shouldContain(\"Module jdk.httpserver specified during runtime but not during dump time\")\n+          .shouldContain(\"Module for jdk.module.main: jdk.httpserver specified during runtime but not during dump time\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/module\/ModuleOption.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}