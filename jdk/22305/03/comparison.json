{"files":[{"patch":"@@ -255,1 +255,2 @@\n-      !Arguments::is_add_modules_property(key)) {\n+      !Arguments::is_add_modules_property(key) &&\n+      !Arguments::is_enable_native_access_property(key)) {\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -428,0 +428,1 @@\n+  CDS_JAVA_HEAP_ONLY(Modules::serialize_native_access_flags(soc);)\n@@ -574,0 +575,2 @@\n+  \/\/ Write native enable-native-access flag into archive\n+  CDS_JAVA_HEAP_ONLY(Modules::dump_native_access_flag());\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -565,0 +565,1 @@\n+char* Modules::_archived_native_access_flags = nullptr;\n@@ -571,1 +572,30 @@\n-  ArchivePtrMarker::mark_pointer(&_archived_main_module_name);\n+}\n+\n+void Modules::check_archived_flag_consistency(char** archived_flag, const char* runtime_flag, const char* property) {\n+  log_info(cds)(\"%s %s\", property,\n+    *archived_flag != nullptr ? *archived_flag : \"(null)\");\n+  bool disable = false;\n+  if (runtime_flag == nullptr) {\n+    if (*archived_flag != nullptr) {\n+      log_info(cds)(\"Module for %s: %s specified during dump time but not during runtime\", property, *archived_flag);\n+      disable = true;\n+    }\n+  } else {\n+    if (*archived_flag == nullptr) {\n+      log_info(cds)(\"Module for %s: %s specified during runtime but not during dump time\", property, runtime_flag);\n+      disable = true;\n+    } else if (strcmp(runtime_flag, *archived_flag) != 0) {\n+      log_info(cds)(\"Mismatched modules for %s: runtime %s dump time %s\", property, runtime_flag, *archived_flag);\n+      disable = true;\n+    }\n+  }\n+\n+  if (disable) {\n+    log_info(cds)(\"Disabling optimized module handling\");\n+    CDSConfig::stop_using_optimized_module_handling();\n+  }\n+  log_info(cds)(\"optimized module handling: %s\", CDSConfig::is_using_optimized_module_handling() ? \"enabled\" : \"disabled\");\n+  log_info(cds)(\"full module graph: %s\", CDSConfig::is_using_full_module_graph() ? \"enabled\" : \"disabled\");\n+\n+  \/\/ Don't hold onto the pointer, in case we might decide to unmap the archive.\n+  *archived_flag = nullptr;\n@@ -580,15 +610,0 @@\n-    bool disable = false;\n-    if (runtime_main_module == nullptr) {\n-      if (_archived_main_module_name != nullptr) {\n-        log_info(cds)(\"Module %s specified during dump time but not during runtime\", _archived_main_module_name);\n-        disable = true;\n-      }\n-    } else {\n-      if (_archived_main_module_name == nullptr) {\n-        log_info(cds)(\"Module %s specified during runtime but not during dump time\", runtime_main_module);\n-        disable = true;\n-      } else if (strcmp(runtime_main_module, _archived_main_module_name) != 0) {\n-        log_info(cds)(\"Mismatched modules: runtime %s dump time %s\", runtime_main_module, _archived_main_module_name);\n-        disable = true;\n-      }\n-    }\n@@ -596,6 +611,11 @@\n-    if (disable) {\n-      log_info(cds)(\"Disabling optimized module handling\");\n-      CDSConfig::stop_using_optimized_module_handling();\n-    }\n-    log_info(cds)(\"optimized module handling: %s\", CDSConfig::is_using_optimized_module_handling() ? \"enabled\" : \"disabled\");\n-    log_info(cds)(\"full module graph: %s\", CDSConfig::is_using_full_module_graph() ? \"enabled\" : \"disabled\");\n+    check_archived_flag_consistency(&_archived_main_module_name, runtime_main_module, \"jdk.module.main\");\n+  }\n+}\n+\n+void Modules::dump_native_access_flag() {\n+  unsigned int count = Arguments::enable_native_access_count();\n+  const char* native_access_names = get_native_access_flags_as_sorted_string();\n+  if (native_access_names != nullptr) {\n+    _archived_native_access_flags = ArchiveBuilder::current()->ro_strdup(native_access_names);\n+  }\n+}\n@@ -603,2 +623,8 @@\n-    \/\/ Don't hold onto the pointer, in case we might decide to unmap the archive.\n-    _archived_main_module_name = nullptr;\n+const char* Modules::get_native_access_flags_as_sorted_string() {\n+  return get_numbered_property_as_sorted_string(\"jdk.module.enable.native.access\", Arguments::enable_native_access_count());\n+}\n+\n+void Modules::serialize_native_access_flags(SerializeClosure* soc) {\n+  soc->do_ptr(&_archived_native_access_flags);\n+  if (soc->reading()) {\n+    check_archived_flag_consistency(&_archived_native_access_flags, get_native_access_flags_as_sorted_string(), \"jdk.module.enable.native.access\");\n@@ -614,1 +640,4 @@\n-  ArchivePtrMarker::mark_pointer(&_archived_addmods_names);\n+}\n+\n+const char* Modules::get_addmods_names_as_sorted_string() {\n+  return get_numbered_property_as_sorted_string(\"jdk.module.addmods\", Arguments::addmods_count());\n@@ -620,30 +649,1 @@\n-    bool disable = false;\n-    if (_archived_addmods_names[0] != '\\0') {\n-      if (Arguments::addmods_count() == 0) {\n-        log_info(cds)(\"--add-modules module name(s) found in archive but not specified during runtime: %s\",\n-            _archived_addmods_names);\n-        disable = true;\n-      } else {\n-        const char* addmods_names = get_addmods_names_as_sorted_string();\n-        if (strcmp((const char*)_archived_addmods_names, addmods_names) != 0) {\n-          log_info(cds)(\"Mismatched --add-modules module name(s).\");\n-          log_info(cds)(\"  dump time: %s runtime: %s\", _archived_addmods_names, addmods_names);\n-          disable = true;\n-        }\n-      }\n-    } else {\n-      if (Arguments::addmods_count() > 0) {\n-        log_info(cds)(\"--add-modules module name(s) specified during runtime but not found in archive: %s\",\n-                      get_addmods_names_as_sorted_string());\n-        disable = true;\n-      }\n-    }\n-    if (disable) {\n-      log_info(cds)(\"Disabling optimized module handling\");\n-      CDSConfig::stop_using_optimized_module_handling();\n-    }\n-    log_info(cds)(\"optimized module handling: %s\", CDSConfig::is_using_optimized_module_handling() ? \"enabled\" : \"disabled\");\n-    log_info(cds)(\"full module graph: %s\", CDSConfig::is_using_full_module_graph() ? \"enabled\" : \"disabled\");\n-\n-    \/\/ Don't hold onto the pointer, in case we might decide to unmap the archive.\n-    _archived_addmods_names = nullptr;\n+    check_archived_flag_consistency(&_archived_addmods_names, get_addmods_names_as_sorted_string(), \"jdk.module.addmods\");\n@@ -653,1 +653,1 @@\n-const char* Modules::get_addmods_names_as_sorted_string() {\n+const char* Modules::get_numbered_property_as_sorted_string(const char* property, unsigned int property_count) {\n@@ -657,1 +657,1 @@\n-  size_t prop_len = strlen(\"jdk.module.addmods\") + max_digits + extra_symbols_count;\n+  size_t prop_len = strlen(property) + max_digits + extra_symbols_count;\n@@ -660,2 +660,2 @@\n-  for (unsigned int i = 0; i < Arguments::addmods_count(); i++) {\n-    jio_snprintf(prop_name, prop_len, \"jdk.module.addmods.%d\", i);\n+  for (unsigned int i = 0; i < property_count; i++) {\n+    jio_snprintf(prop_name, prop_len, \"%s.%d\", property, i);\n@@ -698,1 +698,1 @@\n-      prefix = \"\\n\";\n+      prefix = \",\";\n@@ -702,1 +702,2 @@\n-  return (const char*)os::strdup(st.as_string()); \/\/ Example: \"java.base,java.compiler\"\n+  const char* result = (const char*)os::strdup(st.as_string()); \/\/ Example: \"java.base,java.compiler\"\n+  return strcmp(result, \"\") != 0 ? result : nullptr;\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":62,"deletions":61,"binary":false,"changes":123,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,0 +64,6 @@\n+  static void check_archived_flag_consistency(char** archived_flag, const char* runtime_flag, const char* property) NOT_CDS_JAVA_HEAP_RETURN;\n+\n+  static void dump_native_access_flag() NOT_CDS_JAVA_HEAP_RETURN;\n+  static const char* get_native_access_flags_as_sorted_string() NOT_CDS_JAVA_HEAP_RETURN_(nullptr);\n+  static void serialize_native_access_flags(SerializeClosure* soc) NOT_CDS_JAVA_HEAP_RETURN;\n+\n@@ -65,1 +71,0 @@\n-  static void serialize_addmods_names(SerializeClosure* soc) NOT_CDS_JAVA_HEAP_RETURN;\n@@ -67,0 +72,1 @@\n+  static void serialize_addmods_names(SerializeClosure* soc) NOT_CDS_JAVA_HEAP_RETURN;\n@@ -68,0 +74,1 @@\n+  static const char* get_numbered_property_as_sorted_string(const char* property, unsigned int property_count) NOT_CDS_JAVA_HEAP_RETURN_(nullptr);\n@@ -71,0 +78,1 @@\n+  static char* _archived_native_access_flags;\n","filename":"src\/hotspot\/share\/classfile\/modules.hpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -84,13 +84,14 @@\n-char*  Arguments::_jvm_flags_file               = nullptr;\n-char** Arguments::_jvm_flags_array              = nullptr;\n-int    Arguments::_num_jvm_flags                = 0;\n-char** Arguments::_jvm_args_array               = nullptr;\n-int    Arguments::_num_jvm_args                 = 0;\n-unsigned int Arguments::_addmods_count          = 0;\n-char*  Arguments::_java_command                 = nullptr;\n-SystemProperty* Arguments::_system_properties   = nullptr;\n-size_t Arguments::_conservative_max_heap_alignment = 0;\n-Arguments::Mode Arguments::_mode                = _mixed;\n-const char*  Arguments::_java_vendor_url_bug    = nullptr;\n-const char*  Arguments::_sun_java_launcher      = DEFAULT_JAVA_LAUNCHER;\n-bool   Arguments::_sun_java_launcher_is_altjvm  = false;\n+char*  Arguments::_jvm_flags_file                   = nullptr;\n+char** Arguments::_jvm_flags_array                  = nullptr;\n+int    Arguments::_num_jvm_flags                    = 0;\n+char** Arguments::_jvm_args_array                   = nullptr;\n+int    Arguments::_num_jvm_args                     = 0;\n+unsigned int Arguments::_addmods_count              = 0;\n+unsigned int Arguments::_enable_native_access_count = 0;\n+char*  Arguments::_java_command                     = nullptr;\n+SystemProperty* Arguments::_system_properties       = nullptr;\n+size_t Arguments::_conservative_max_heap_alignment  = 0;\n+Arguments::Mode Arguments::_mode                    = _mixed;\n+const char*  Arguments::_java_vendor_url_bug        = nullptr;\n+const char*  Arguments::_sun_java_launcher          = DEFAULT_JAVA_LAUNCHER;\n+bool   Arguments::_sun_java_launcher_is_altjvm      = false;\n@@ -345,0 +346,4 @@\n+bool Arguments::is_enable_native_access_property(const char* key) {\n+  return (strcmp(key, MODULE_PROPERTY_PREFIX ENABLE_NATIVE_ACCESS) == 0);\n+}\n+\n@@ -1775,1 +1780,0 @@\n-unsigned int enable_native_access_count = 0;\n@@ -2248,1 +2252,1 @@\n-      if (!create_numbered_module_property(\"jdk.module.enable.native.access\", tail, enable_native_access_count++)) {\n+      if (!create_numbered_module_property(\"jdk.module.enable.native.access\", tail, _enable_native_access_count++)) {\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":19,"deletions":15,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -201,0 +201,2 @@\n+  \/\/ number of unique modules specified in the --enable-native-access option\n+  static unsigned int _enable_native_access_count;\n@@ -467,0 +469,2 @@\n+  static bool is_enable_native_access_property(const char* key);\n+  static unsigned int enable_native_access_count() { return _enable_native_access_count; }\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-            .assertAbnormalExit(\"Mismatched --add-modules module name(s)\",\n+            .assertAbnormalExit(\"Mismatched modules for jdk.module.addmods\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/AOTClassLinkingVMOptions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,2 +86,2 @@\n-          .shouldContain(\"Mismatched --add-modules module name(s).\")\n-          .shouldContain(\"dump time: jdk.jconsole runtime: jdk.incubator.vector\")\n+          .shouldContain(\"Mismatched modules for jdk.module.addmods\")\n+          .shouldContain(\"runtime jdk.incubator.vector dump time jdk.jconsole\")\n@@ -95,1 +95,1 @@\n-          .shouldContain(\"Module jdk.httpserver specified during dump time but not during runtime\")\n+          .shouldContain(\"jdk.httpserver specified during dump time but not during runtime\")\n@@ -115,1 +115,1 @@\n-          .shouldContain(\"--add-modules module name(s) specified during runtime but not found in archive: jdk.jconsole\")\n+          .shouldContain(\"jdk.jconsole specified during runtime but not during dump time\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/addmods\/AddmodsOption.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8342089\n+ * @summary Test consistency of --enable-native-access option for CDS dump time and runtime\n+ * @requires vm.cds.write.archived.java.heap\n+ * @requires vm.flagless\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @run driver EnableNativeAccessCDS\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class EnableNativeAccessCDS {\n+    public static void main(String[] args) throws Exception {\n+        final String module0 = \"java.base\";\n+        final String module1 = \"jdk.httpserver\";\n+        final String disabledOptimizedModule = \"Disabling optimized module handling\";\n+        final String loggingOption = \"-Xlog:cds=debug\";\n+\n+        String archiveName = TestCommon.getNewArchiveName(\"native-access\");\n+        TestCommon.setCurrentArchiveName(archiveName);\n+\n+        \/\/ dump a base archive with --enable-native-access=java.base\n+        OutputAnalyzer oa = TestCommon.dumpBaseArchive(\n+            archiveName,\n+            loggingOption,\n+            \"--enable-native-access\", module0,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0);\n+\n+        \/\/ same module specified during runtime\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"--enable-native-access\", module0,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+        .shouldContain(\"use_full_module_graph = true\");\n+\n+        \/\/ different module specified during runtime\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"--enable-native-access\", module1,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+        .shouldContain(\"Mismatched modules for jdk.module.enable.native.access: runtime jdk.httpserver dump time java.base\")\n+        .shouldContain(disabledOptimizedModule);\n+\n+        \/\/ no module specified during runtime\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+        .shouldContain(\"Module for jdk.module.enable.native.access: java.base specified during dump time but not during runtime\")\n+        .shouldContain(disabledOptimizedModule);\n+\n+        \/\/ dump an archive without --enable-native-access option\n+        archiveName = TestCommon.getNewArchiveName(\"no-native-access-modules\");\n+        TestCommon.setCurrentArchiveName(archiveName);\n+        oa = TestCommon.dumpBaseArchive(\n+            archiveName,\n+            loggingOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0);\n+\n+        \/\/ run with --enable-native-access\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"--enable-native-access\", module0,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+        .shouldContain(\"Module for jdk.module.enable.native.access: java.base specified during runtime but not during dump time\")\n+        .shouldContain(disabledOptimizedModule);\n+\n+        \/\/ dump an archive with multiple modules with native access\n+        archiveName = TestCommon.getNewArchiveName(\"multiple-native-access-modules\");\n+        TestCommon.setCurrentArchiveName(archiveName);\n+        oa = TestCommon.dumpBaseArchive(\n+            archiveName,\n+            loggingOption,\n+            \"--enable-native-access\", module0 + \",\" + module1,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0);\n+\n+        \/\/ same module specified during runtime but in a different order\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"--enable-native-access\", module1 + \",\" + module0,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+          .shouldContain(\"use_full_module_graph = true\");\n+\n+        \/\/ same module specified during runtime but specifying --enable-native-access twice\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"--enable-native-access\", module0,\n+            \"--enable-native-access\", module1,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+          .shouldContain(\"use_full_module_graph = true\");\n+\n+        \/\/ run with only one same module\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"--enable-native-access\", module0,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+            .shouldContain(\"Mismatched modules for jdk.module.enable.native.access: runtime java.base dump time java.base,jdk.httpserver\")\n+            .shouldContain(disabledOptimizedModule);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/module\/EnableNativeAccessCDS.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"},{"patch":"@@ -73,1 +73,1 @@\n-          .shouldContain(\"Mismatched modules: runtime jdk.compiler dump time jdk.httpserver\")\n+          .shouldContain(\"Mismatched modules for jdk.module.main: runtime jdk.compiler dump time jdk.httpserver\")\n@@ -81,1 +81,1 @@\n-          .shouldContain(\"Module jdk.httpserver specified during dump time but not during runtime\")\n+          .shouldContain(\"Module for jdk.module.main: jdk.httpserver specified during dump time but not during runtime\")\n@@ -99,1 +99,1 @@\n-          .shouldContain(\"Module jdk.httpserver specified during runtime but not during dump time\")\n+          .shouldContain(\"Module for jdk.module.main: jdk.httpserver specified during runtime but not during dump time\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/module\/ModuleOption.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}