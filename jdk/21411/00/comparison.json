{"files":[{"patch":"@@ -2802,0 +2802,6 @@\n+\n+            @Override\n+            public String shortVersionString() {\n+                return VersionProps.shortVersionString();\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -235,0 +235,6 @@\n+    static String shortVersionString() {\n+        return launcher_name + \" \" + java_version\n+                   + \" \" + java_version_date\n+                   + (isLTS ? \" LTS\" : \"\");\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/VersionProps.java.template","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -642,0 +642,5 @@\n+\n+    \/**\n+     * Return a short version string for this runtime.\n+     *\/\n+    String shortVersionString();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+import jdk.internal.access.SharedSecrets;\n@@ -589,0 +590,11 @@\n+    \/**\n+     * Prints the short usage text to the desired output stream.\n+     *\/\n+    static void printConciseUsageMessage(boolean printToStderr) {\n+        initOutput(printToStderr);\n+        ostream.println(SharedSecrets.getJavaLangAccess().shortVersionString());\n+        ostream.println();\n+        ostream.println(getLocalizedMessage(\"java.launcher.opt.concise.header\",\n+                File.pathSeparator));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -235,0 +235,15 @@\n+# Translators please note do not translate the options themselves\n+java.launcher.opt.concise.header  =   Usage: java [options...] <what to execute> [arguments to main method...]\\n\\n\\\n+\\Where <what to execute> is one of:\\n\\\n+\\  <MainClass>                to execute the main method of a compiled class\\n\\\n+\\  -jar <jar-file.jar>        to execute the main class in a JAR archive\\n\\\n+\\  -m <module>[\/<MainClass>]  to execute the main class of a module\\n\\\n+\\  <SourceFile.java>          to compile and execute a single-file program\\n\\n\\\n+\\Where key options include:\\n\\\n+\\  --class-path <class path>\\n\\\n+\\      a {0} separated list of directories and JAR archives to search for class files\\n\\\n+\\  --module-path <module path>\\n\\\n+\\      a {0} separated list of directories and JAR archives to search for modules\\n\\n\\\n+\\For more details about this launcher:   java --help\\n\\\n+\\For an interactive Java environment:    jshell\n+\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/resources\/launcher.properties","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-static void PrintUsage(JNIEnv* env, jboolean doXUsage);\n+static void PrintUsage(JNIEnv* env, jboolean doXUsage, jboolean conciseUsage);\n@@ -541,1 +541,1 @@\n-        PrintUsage(env, printXUsage);\n+        PrintUsage(env, printXUsage, !printXUsage && !printUsage);\n@@ -1924,1 +1924,1 @@\n-PrintUsage(JNIEnv* env, jboolean doXUsage)\n+PrintUsage(JNIEnv* env, jboolean doXUsage, jboolean conciseUsage)\n@@ -1926,1 +1926,2 @@\n-  jmethodID initHelp, vmSelect, vmSynonym, printHelp, printXUsageMessage;\n+  jmethodID initHelp, vmSelect, vmSynonym;\n+  jmethodID printHelp, printConciseUsageMessage, printXUsageMessage;\n@@ -1931,1 +1932,5 @@\n-  if (doXUsage) {\n+  if (conciseUsage) {\n+    NULL_CHECK(printConciseUsageMessage = (*env)->GetStaticMethodID(env, cls,\n+                                        \"printConciseUsageMessage\", \"(Z)V\"));\n+    (*env)->CallStaticVoidMethod(env, cls, printConciseUsageMessage, printTo);\n+  } else if (doXUsage) {\n","filename":"src\/java.base\/share\/native\/libjli\/java.c","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"}]}