{"files":[{"patch":"@@ -860,2 +860,3 @@\n-  fields = TypeTuple::fields(0);\n-  const TypeTuple *range = TypeTuple::make(TypeFunc::Parms, fields);\n+  fields = TypeTuple::fields(1);\n+  fields[TypeFunc::Parms] = TypeInstPtr::BOTTOM;\n+  const TypeTuple *range = TypeTuple::make(TypeFunc::Parms + 1, fields);\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -51,0 +51,5 @@\n+\/\/\n+\/\/ Please note that correctly matching the type of the call with the specified\n+\/\/ signature. Even if you don't plan on consuming the output of the call, C2\n+\/\/ needs this information to correctly track returned oops and avoid strange\n+\/\/ deoptimization crashes (JDK-8347463).\n","filename":"src\/hotspot\/share\/opto\/runtime.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.intrinsics;\n+\n+import compiler.lib.ir_framework.*;\n+\n+import jdk.jfr.Event;\n+import jdk.jfr.Name;\n+import jdk.jfr.Recording;\n+\n+\/**\n+ * @test\n+ * @summary Tests that the getEventWriter call to write_checkpoint correctly\n+ *          reports returning an oop\n+ * @requires vm.hasJFR & vm.continuations\n+ * @library \/test\/lib \/\n+ * @modules jdk.jfr\/jdk.jfr.internal\n+ * @run driver compiler.intrinsics.TestReturnsOopSetForJFRWriteCheckpoint\n+ *\/\n+public class TestReturnsOopSetForJFRWriteCheckpoint {\n+\n+    private static class TestEvent extends Event {\n+    }\n+\n+    public static void main(String... args) {\n+        TestFramework.run();\n+    }\n+\n+    \/\/ JDK-8347463: crash was due to the returns_oop field not being set\n+    \/\/ for the write_checkpoint call. Instead of explicitly checking for\n+    \/\/ it, we look for a non-void return type (which comes hand-in-hand\n+    \/\/ with the returns_oop information)\n+    @Test\n+    @IR(failOn = { IRNode.STATIC_CALL_OF_METHOD, \"write_checkpoint.*void\"})\n+    public void myTest() {\n+        try (Recording r = new Recording()) {\n+            r.start();\n+\n+            emitEvent();\n+        }\n+\n+    }\n+\n+    @ForceInline\n+    public void emitEvent() {\n+        TestEvent t = new TestEvent();\n+        t.commit();\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestReturnsOopSetForJFRWriteCheckpoint.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}