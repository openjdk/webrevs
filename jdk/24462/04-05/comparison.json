{"files":[{"patch":"@@ -1010,0 +1010,1 @@\n+                                         \"Ljava\/lang\/String;\"                                                                                  \\\n@@ -1011,2 +1012,1 @@\n-                                         \"Ljdk\/internal\/vm\/vector\/VectorSupport$UnaryOperation;\"                                               \\\n-                                         \"Ljava\/lang\/String;)\"                                                                                 \\\n+                                         \"Ljdk\/internal\/vm\/vector\/VectorSupport$UnaryOperation;)\"                                              \\\n@@ -1021,0 +1021,1 @@\n+                                          \"Ljava\/lang\/String;\"                                                                                 \\\n@@ -1023,2 +1024,1 @@\n-                                          \"Ljdk\/internal\/vm\/vector\/VectorSupport$BinaryOperation;\"                                             \\\n-                                          \"Ljava\/lang\/String;)\"                                                                                \\\n+                                          \"Ljdk\/internal\/vm\/vector\/VectorSupport$BinaryOperation;)\"                                            \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -480,3 +480,3 @@\n-\/\/ V unaryOp(long address, Class<? extends V> vClass, Class<E> elementType, int length,\n-\/\/           V v,\n-\/\/           UnaryOperation<V, ?> defaultImpl)\n+\/\/ V libraryUnaryOp(long address, Class<? extends V> vClass, Class<E> elementType, int length, String debugName,\n+\/\/                  V v,\n+\/\/                  UnaryOperation<V, ?> defaultImpl)\n@@ -486,1 +486,1 @@\n-\/\/ V binaryOp(long address, Class<? extends V> vClass, Class<E> elementType, int length,\n+\/\/ V libraryBinaryOp(long address, Class<? extends V> vClass, Class<E> elementType, int length, String debugName,\n@@ -492,8 +492,12 @@\n-  const TypeLong*    entry        = gvn().type(argument(0))->isa_long();\n-  const TypeInstPtr* vector_klass = gvn().type(argument(2))->isa_instptr();\n-  const TypeInstPtr* elem_klass   = gvn().type(argument(3))->isa_instptr();\n-  const TypeInt*     vlen         = gvn().type(argument(4))->isa_int();\n-\n-  if (entry == nullptr || vector_klass == nullptr || elem_klass == nullptr || vlen == nullptr ||\n-      !entry->is_con() || vector_klass->const_oop() == nullptr || elem_klass->const_oop() == nullptr || !vlen->is_con()) {\n-    log_if_needed(\"  ** missing constant: opr=%s vclass=%s etype=%s vlen=%s\",\n+  const TypeLong*    entry          = gvn().type(argument(0))->isa_long();\n+  const TypeInstPtr* vector_klass   = gvn().type(argument(2))->isa_instptr();\n+  const TypeInstPtr* elem_klass     = gvn().type(argument(3))->isa_instptr();\n+  const TypeInt*     vlen           = gvn().type(argument(4))->isa_int();\n+  const TypeInstPtr* debug_name_oop = gvn().type(argument(5))->isa_instptr();\n+\n+  if (entry        == nullptr   || !entry->is_con() ||\n+      vector_klass == nullptr   || vector_klass->const_oop() == nullptr ||\n+      elem_klass   == nullptr   || elem_klass->const_oop() == nullptr ||\n+      vlen         == nullptr   || !vlen->is_con() ||\n+      debug_name_oop == nullptr || debug_name_oop->const_oop() == nullptr) {\n+    log_if_needed(\"  ** missing constant: opr=%s vclass=%s etype=%s vlen=%s debug_name=%s\",\n@@ -503,1 +507,2 @@\n-                  NodeClassNames[argument(4)->Opcode()]);\n+                  NodeClassNames[argument(4)->Opcode()],\n+                  NodeClassNames[argument(5)->Opcode()]);\n@@ -533,1 +538,1 @@\n-  Node* opd1 = unbox_vector(argument(5), vbox_type, elem_bt, num_elem);\n+  Node* opd1 = unbox_vector(argument(6), vbox_type, elem_bt, num_elem);\n@@ -535,2 +540,1 @@\n-    log_if_needed(\"  ** unbox failed v1=%s\",\n-                  NodeClassNames[argument(5)->Opcode()]);\n+    log_if_needed(\"  ** unbox failed v1=%s\", NodeClassNames[argument(6)->Opcode()]);\n@@ -542,1 +546,1 @@\n-    opd2 = unbox_vector(argument(6), vbox_type, elem_bt, num_elem);\n+    opd2 = unbox_vector(argument(7), vbox_type, elem_bt, num_elem);\n@@ -544,2 +548,1 @@\n-      log_if_needed(\"  ** unbox failed v2=%s\",\n-                    NodeClassNames[argument(6)->Opcode()]);\n+      log_if_needed(\"  ** unbox failed v2=%s\", NodeClassNames[argument(7)->Opcode()]);\n@@ -549,1 +552,1 @@\n-  assert(arity == 1 || arity == 2, \"not supported\");\n+  assert(arity == 1 || arity == 2, \"arity %d not supported\", arity);\n@@ -555,2 +558,1 @@\n-  const TypeInstPtr* debug_name_oop = gvn().type(argument(8))->isa_instptr();\n-  if (debug_name_oop != nullptr && debug_name_oop->const_oop() && !debug_name_oop->const_oop()->is_null_object()) {\n+  if (!debug_name_oop->const_oop()->is_null_object()) {\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":24,"deletions":22,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -350,1 +350,1 @@\n-    V libraryUnaryOp(long addr, Class<? extends V> vClass, Class<E> eClass, int length,\n+    V libraryUnaryOp(long addr, Class<? extends V> vClass, Class<E> eClass, int length, String debugName,\n@@ -352,2 +352,1 @@\n-                     UnaryOperation<V,?> defaultImpl,\n-                     String debugName) {\n+                     UnaryOperation<V,?> defaultImpl) {\n@@ -389,1 +388,1 @@\n-    V libraryBinaryOp(long addr, Class<? extends V> vClass, Class<E> eClass, int length,\n+    V libraryBinaryOp(long addr, Class<? extends V> vClass, Class<E> eClass, int length, String debugName,\n@@ -391,2 +390,1 @@\n-                      BinaryOperation<V,?> defaultImpl,\n-                      String debugName) {\n+                      BinaryOperation<V,?> defaultImpl) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -304,1 +304,1 @@\n-                    entry.entry.address(), vt, vspecies.elementType(), vspecies.length(),\n+                    entry.entry.address(), vt, vspecies.elementType(), vspecies.length(), entry.name,\n@@ -306,2 +306,1 @@\n-                    entry.impl,\n-                    entry.name);\n+                    entry.impl);\n@@ -326,1 +325,1 @@\n-                    entry.entry.address(), vt, vspecies.elementType(), vspecies.length(),\n+                    entry.entry.address(), vt, vspecies.elementType(), vspecies.length(), entry.name,\n@@ -328,2 +327,1 @@\n-                    entry.impl,\n-                    entry.name);\n+                    entry.impl);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorMathLibrary.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"}]}