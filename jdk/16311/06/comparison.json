{"files":[{"patch":"@@ -54,0 +54,3 @@\n+  if (code.blob() == nullptr) {\n+    return nullptr;\n+  }\n@@ -61,0 +64,2 @@\n+  bool caller_must_gc_arguments = false;\n+  bool alloc_fail_is_fatal = false;\n@@ -66,1 +71,6 @@\n-                                  g.oop_maps(), false);\n+                                  g.oop_maps(),\n+                                  caller_must_gc_arguments,\n+                                  alloc_fail_is_fatal);\n+  if (stub == nullptr) {\n+    return nullptr;\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/downcallLinker_aarch64.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -130,0 +130,3 @@\n+  if (buffer.blob() == nullptr) {\n+    return nullptr;\n+  }\n@@ -327,0 +330,3 @@\n+  if (blob == nullptr) {\n+    return nullptr;\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/upcallLinker_aarch64.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -54,0 +54,3 @@\n+  if (code.blob() == nullptr) {\n+    return nullptr;\n+  }\n@@ -61,0 +64,2 @@\n+  bool caller_must_gc_arguments = false;\n+  bool alloc_fail_is_fatal = false;\n@@ -66,1 +71,6 @@\n-                                  g.oop_maps(), false);\n+                                  g.oop_maps(),\n+                                  caller_must_gc_arguments,\n+                                  alloc_fail_is_fatal);\n+  if (stub == nullptr) {\n+    return nullptr;\n+  }\n","filename":"src\/hotspot\/cpu\/ppc\/downcallLinker_ppc.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -131,0 +131,3 @@\n+  if (buffer.blob() == nullptr) {\n+    return nullptr;\n+  }\n@@ -335,0 +338,4 @@\n+  if (blob == nullptr) {\n+    return nullptr;\n+  }\n+\n","filename":"src\/hotspot\/cpu\/ppc\/upcallLinker_ppc.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -55,0 +55,3 @@\n+  if (code.blob() == nullptr) {\n+    return nullptr;\n+  }\n@@ -62,0 +65,2 @@\n+  bool caller_must_gc_arguments = false;\n+  bool alloc_fail_is_fatal = false;\n@@ -67,1 +72,6 @@\n-                                  g.oop_maps(), false);\n+                                  g.oop_maps(),\n+                                  caller_must_gc_arguments,\n+                                  alloc_fail_is_fatal);\n+  if (stub == nullptr) {\n+    return nullptr;\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/downcallLinker_riscv.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -131,0 +131,3 @@\n+  if (buffer.blob() == nullptr) {\n+    return nullptr;\n+  }\n@@ -347,0 +350,4 @@\n+  if (blob == nullptr) {\n+    return nullptr;\n+  }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/upcallLinker_riscv.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -55,0 +55,3 @@\n+  if (code.blob() == nullptr) {\n+    return nullptr;\n+  }\n@@ -63,0 +66,2 @@\n+  bool caller_must_gc_arguments = false;\n+  bool alloc_fail_is_fatal = false;\n@@ -68,1 +73,6 @@\n-                                  g.oop_maps(), false);\n+                                  g.oop_maps(),\n+                                  caller_must_gc_arguments,\n+                                  alloc_fail_is_fatal);\n+  if (stub == nullptr) {\n+    return nullptr;\n+  }\n","filename":"src\/hotspot\/cpu\/s390\/downcallLinker_s390.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -129,0 +129,3 @@\n+  if (buffer.blob() == nullptr) {\n+    return nullptr;\n+  }\n@@ -286,0 +289,4 @@\n+  if (blob == nullptr) {\n+    return nullptr;\n+  }\n+\n","filename":"src\/hotspot\/cpu\/s390\/upcallLinker_s390.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -52,0 +52,3 @@\n+  if (code.blob() == nullptr) {\n+    return nullptr;\n+  }\n@@ -59,0 +62,2 @@\n+  bool caller_must_gc_arguments = false;\n+  bool alloc_fail_is_fatal = false;\n@@ -64,1 +69,6 @@\n-                                  g.oop_maps(), false);\n+                                  g.oop_maps(),\n+                                  caller_must_gc_arguments,\n+                                  alloc_fail_is_fatal);\n+  if (stub == nullptr) {\n+    return nullptr;\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/downcallLinker_x86_64.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -180,0 +180,3 @@\n+  if (buffer.blob() == nullptr) {\n+    return nullptr;\n+  }\n@@ -382,0 +385,3 @@\n+  if (blob == nullptr) {\n+    return nullptr;\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/upcallLinker_x86_64.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -762,0 +762,4 @@\n+  if (blob == nullptr) {\n+    return nullptr; \/\/ caller must handle this\n+  }\n+\n","filename":"src\/hotspot\/share\/code\/codeBlob.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -81,4 +81,8 @@\n-  return (jlong) DowncallLinker::make_downcall_stub(basic_type, pslots, ret_bt, abi,\n-                                                    input_regs, output_regs,\n-                                                    needs_return_buffer, captured_state_mask,\n-                                                    needs_transition)->code_begin();\n+  RuntimeStub* stub = DowncallLinker::make_downcall_stub(basic_type, pslots, ret_bt, abi,\n+                                                         input_regs, output_regs,\n+                                                         needs_return_buffer, captured_state_mask,\n+                                                         needs_transition);\n+  if (stub == nullptr) {\n+    return 0;\n+  }\n+  return (jlong) stub->code_begin();\n","filename":"src\/hotspot\/share\/prims\/nativeEntryPoint.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -74,0 +74,3 @@\n+            if (downcallStub == 0) {\n+                throw new OutOfMemoryError(\"Failed to allocate downcall stub\");\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/NativeEntryPoint.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -109,0 +109,3 @@\n+            if (entryPoint == 0) {\n+                throw new OutOfMemoryError(\"Failed to allocate upcall stub\");\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/UpcallLinker.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -178,0 +178,4 @@\n+        return upcallStub(holder, name, descriptor, Arena.ofAuto());\n+    }\n+\n+    public static MemorySegment upcallStub(Class<?> holder, String name, FunctionDescriptor descriptor, Arena arena) {\n@@ -180,1 +184,1 @@\n-            return LINKER.upcallStub(target, descriptor, Arena.ofAuto());\n+            return LINKER.upcallStub(target, descriptor, arena);\n","filename":"test\/jdk\/java\/foreign\/NativeTestHelper.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -131,0 +131,1 @@\n+                .assertFailed()\n","filename":"test\/jdk\/java\/foreign\/TestAddressDereference.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library ..\/ \/test\/lib\n+ * @requires jdk.foreign.linker != \"FALLBACK\"\n+ * @run testng\/othervm\/native\n+ *   --enable-native-access=ALL-UNNAMED\n+ *   TestStubAllocFailure\n+ *\/\n+\n+import java.lang.foreign.*;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n+\n+public class TestStubAllocFailure extends UpcallTestHelper {\n+\n+    @Test\n+    public void testUpcallAllocFailure() throws IOException, InterruptedException {\n+        runInNewProcess(UpcallRunner.class, true, List.of(\"-XX:ReservedCodeCacheSize=3M\"), List.of())\n+                .assertSuccess();\n+    }\n+\n+    public static class UpcallRunner extends NativeTestHelper {\n+        public static void main(String[] args) throws Throwable {\n+            try (Arena arena = Arena.ofConfined()) {\n+                while (true) {\n+                    \/\/ allocate stubs until we crash\n+                    upcallStub(UpcallRunner.class, \"target\", FunctionDescriptor.ofVoid(), arena);\n+                }\n+            } catch (OutOfMemoryError e) {\n+                assertTrue(e.getMessage().contains(\"Failed to allocate upcall stub\"));\n+            }\n+        }\n+\n+        public static void target() {\n+            fail(\"Should not get here\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/TestStubAllocFailure.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -51,0 +51,1 @@\n+                .assertFailed()\n","filename":"test\/jdk\/java\/foreign\/TestUpcallException.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import jdk.test.lib.Utils;\n@@ -31,1 +32,0 @@\n-import java.util.Arrays;\n@@ -33,0 +33,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -34,0 +35,1 @@\n+import static org.testng.Assert.assertEquals;\n@@ -38,1 +40,1 @@\n-    public record Output(List<String> stdout, List<String> stderr) {\n+    public record Output(int result, List<String> stdout, List<String> stderr) {\n@@ -44,0 +46,10 @@\n+        public Output assertFailed() {\n+            assertNotEquals(result, 0);\n+            return this;\n+        }\n+\n+        public Output assertSuccess() {\n+            assertEquals(result, 0);\n+            return this;\n+        }\n+\n@@ -56,0 +68,4 @@\n+        return runInNewProcess(target, useSpec, List.of(), List.of(programArgs));\n+    }\n+\n+    public Output runInNewProcess(Class<?> target, boolean useSpec, List<String> vmArgs, List<String> programArgs) throws IOException, InterruptedException {\n@@ -61,2 +77,1 @@\n-            \"-Djdk.internal.foreign.UpcallLinker.USE_SPEC=\" + useSpec,\n-            target.getName()\n+            \"-Djdk.internal.foreign.UpcallLinker.USE_SPEC=\" + useSpec\n@@ -64,1 +79,3 @@\n-        command.addAll(Arrays.asList(programArgs));\n+        command.addAll(vmArgs);\n+        command.add(target.getName());\n+        command.addAll(programArgs);\n@@ -68,2 +85,3 @@\n-        int result = process.waitFor();\n-        assertNotEquals(result, 0);\n+        long timeOut = (long) (Utils.TIMEOUT_FACTOR * 1L);\n+        boolean completed = process.waitFor(timeOut, TimeUnit.MINUTES);\n+        assertTrue(completed, \"Time out while waiting for process\");\n@@ -76,1 +94,1 @@\n-        return new Output(outLines, errLines);\n+        return new Output(process.exitValue(), outLines, errLines);\n","filename":"test\/jdk\/java\/foreign\/UpcallTestHelper.java","additions":26,"deletions":8,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-        runInNewProcess(Runner.class, true).assertStdOutContains(\"wrong thread state for upcall\");\n+        runInNewProcess(Runner.class, true).assertFailed().assertStdOutContains(\"wrong thread state for upcall\");\n","filename":"test\/jdk\/java\/foreign\/critical\/TestCriticalUpcall.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-        runInNewProcess(Runner.class, spec).assertStdErrContains(\"Heap segment not allowed\");\n+        runInNewProcess(Runner.class, spec).assertFailed().assertStdErrContains(\"Heap segment not allowed\");\n","filename":"test\/jdk\/java\/foreign\/passheapsegment\/TestPassHeapSegment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}