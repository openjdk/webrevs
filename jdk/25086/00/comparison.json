{"files":[{"patch":"@@ -4435,0 +4435,12 @@\n+\/\/ Called before ergonomic flags processing\n+void os::initialize_max_ram_percentage() {\n+  if (OSContainer::is_containerized()) {\n+    \/\/ Increase the default MaxRAMPercentage for\n+    \/\/ containerized work-loads to 75%. The expectation\n+    \/\/ is for them to limit resources on the container\n+    \/\/ level and the default scenario is to deploy a single\n+    \/\/ application per container.\n+    FLAG_SET_ERGO_IF_DEFAULT(MaxRAMPercentage, 75.0);\n+  }\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -487,0 +487,1 @@\n+  LINUX_ONLY(initialize_max_ram_percentage();)\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -259,0 +259,1 @@\n+  LINUX_ONLY(static void initialize_max_ram_percentage();)\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2025 Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8350596\n+ * @key cgroups\n+ * @requires os.family == \"linux\"\n+ * @requires vm.flagless\n+ * @library \/testlibrary \/test\/lib\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI MaxRAMPercentage\n+ *\/\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import jdk.test.whitebox.WhiteBox;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class MaxRAMPercentage {\n+\n+    public static void main(String[] args) throws Exception {\n+        WhiteBox wb = WhiteBox.getWhiteBox();\n+        if (wb.isContainerized()) {\n+            throw new RuntimeException(\"Test failed! Expected not containerized on plain Linux.\");\n+        }\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+PrintFlagsFinal\", \"-version\");\n+        OutputAnalyzer out = new OutputAnalyzer(pb.start());\n+        out.shouldHaveExitValue(0);\n+\n+        String maxRamPercentage = getFlagValue(\"MaxRAMPercentage\", out.getStdout());\n+        \/\/ expect a default of 25%\n+        if (!maxRamPercentage.startsWith(\"25\")) {\n+            throw new RuntimeException(\"Test failed! Expected MaxRAMPercentage to be 25% but got: \" + maxRamPercentage);\n+        }\n+        System.out.println(\"PASS. Got expected MaxRAMPercentage=\" + maxRamPercentage);\n+    }\n+\n+    private static String getFlagValue(String flag, String where) {\n+        Matcher m = Pattern.compile(flag + \"\\\\s+:?= (\\\\d+\\\\.\\\\d+)\").matcher(where);\n+        if (!m.find()) {\n+            throw new RuntimeException(\"Could not find value for flag \" + flag + \" in output string\");\n+        }\n+        return m.group(1);\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/containers\/cgroup\/MaxRAMPercentage.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2025 Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Verify MaxRAMPercentage setting in a containerized system\n+ * @bug 8350596\n+ * @key cgroups\n+ * @requires os.family == \"linux\"\n+ * @requires vm.flagless\n+ * @library \/testlibrary \/test\/lib\n+ * @run driver MaxRAMPercentage\n+ *\/\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import jdk.test.lib.containers.docker.Common;\n+import jdk.test.lib.containers.docker.DockerRunOptions;\n+import jdk.test.lib.containers.docker.DockerTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class MaxRAMPercentage {\n+    private static final String imageName = Common.imageName(\"ram-percentage\");\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!DockerTestUtils.canTestDocker()) {\n+            return;\n+        }\n+\n+        DockerTestUtils.buildJdkContainerImage(imageName);\n+\n+        try {\n+            testMaxRAMPercentage();\n+        } finally {\n+            DockerTestUtils.removeDockerImage(imageName);\n+        }\n+    }\n+\n+    private static String getFlagValue(String flag, String where) {\n+        Matcher m = Pattern.compile(flag + \"\\\\s+:?= (\\\\d+\\\\.\\\\d+)\").matcher(where);\n+        if (!m.find()) {\n+            throw new RuntimeException(\"Could not find value for flag \" + flag + \" in output string\");\n+        }\n+        return m.group(1);\n+    }\n+\n+    private static void testMaxRAMPercentage() throws Exception {\n+        Common.logNewTestCase(\"Test MaxRAMPercentage\");\n+        DockerRunOptions opts =\n+                new DockerRunOptions(imageName, \"\/jdk\/bin\/java\", \"-version\");\n+        opts.addJavaOpts(\"-XX:+PrintFlagsFinal\");\n+\n+        \/\/ We are interested in the default option when run in a container, so\n+        \/\/ don't append test java options\n+        opts.appendTestJavaOptions = false;\n+        OutputAnalyzer out = DockerTestUtils.dockerRunJava(opts);\n+        out.shouldHaveExitValue(0);\n+\n+        String maxRamPercentage = getFlagValue(\"MaxRAMPercentage\", out.getStdout());\n+        \/\/ expect a default of 75%\n+        if (!maxRamPercentage.startsWith(\"75\")) {\n+            throw new RuntimeException(\"Test failed! Expected MaxRAMPercentage to be 75% but got: \" + maxRamPercentage);\n+        }\n+        System.out.println(\"PASS. Got expected MaxRAMPercentage=\" + maxRamPercentage);\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/MaxRAMPercentage.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}