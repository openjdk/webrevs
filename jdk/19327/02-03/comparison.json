{"files":[{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ *\/\n+package org.openjdk.bench.java.lang.reflect;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+\/**\n+ * Benchmark measuring the speed of Method\/Constructor.getExceptionTypes() and\n+ * getParameterTypes(), in cases where the result array is length zero.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@State(Scope.Benchmark)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Fork(1)\n+@Warmup(iterations = 3, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+public class ConstructorBenchmark {\n+    Constructor<?> emptyParametersConstructor;\n+    Constructor<?> oneParameterConstructor;\n+    Constructor<?> emptyExceptionsConstructor;\n+    Constructor<?> oneExceptionConstructor;\n+\n+    public ConstructorBenchmark() {\n+        try {\n+            emptyParametersConstructor = Object.class.getConstructor();\n+            oneParameterConstructor = String.class.getConstructor(String.class);\n+\n+            emptyExceptionsConstructor = emptyParametersConstructor;\n+            oneExceptionConstructor = String.class.getConstructor(byte[].class, String.class);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+    }\n+\n+    @Benchmark\n+    public void getExceptionTypes() throws Exception {\n+        oneExceptionConstructor.getExceptionTypes();\n+    }\n+\n+    @Benchmark\n+    public void getExceptionTypesEmpty() throws Exception {\n+        emptyExceptionsConstructor.getExceptionTypes();\n+    }\n+\n+    @Benchmark\n+    public void getParameterTypesEmpty() throws Exception {\n+        emptyParametersConstructor.getParameterTypes();\n+    }\n+\n+    @Benchmark\n+    public void getParameterTypes() throws Exception {\n+        oneParameterConstructor.getParameterTypes();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/reflect\/ConstructorBenchmark.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -6,1 +6,1 @@\n-import java.lang.reflect.Executable;\n+import java.lang.reflect.Method;\n@@ -18,1 +18,0 @@\n-import org.openjdk.jmh.infra.Blackhole;\n@@ -21,1 +20,1 @@\n- * Benchmark measuring the speed of Method\/Constructor.getExceptionTypes() and\n+ * Benchmark measuring the speed of Method\/Method.getExceptionTypes() and\n@@ -31,2 +30,4 @@\n-    Executable objectConstructor;\n-    Executable hashCodeMethod;\n+    Method emptyParametersMethod;\n+    Method oneParameterMethod;\n+    Method emptyExceptionsMethod;\n+    Method oneExceptionMethod;\n@@ -36,2 +37,5 @@\n-            hashCodeMethod = Object.class.getDeclaredMethod(\"hashCode\");\n-            objectConstructor = Object.class.getConstructor();\n+            emptyParametersMethod = Object.class.getDeclaredMethod(\"hashCode\");\n+            oneParameterMethod = String.class.getDeclaredMethod(\"getBytes\", String.class);\n+\n+            emptyExceptionsMethod = emptyParametersMethod;\n+            oneExceptionMethod = oneParameterMethod;\n@@ -45,2 +49,2 @@\n-    public void constructorExceptionsEmpty(Blackhole bh) throws Exception {\n-        bh.consume(objectConstructor.getExceptionTypes());\n+    public void getExceptionTypes() throws Exception {\n+        oneExceptionMethod.getExceptionTypes();\n@@ -50,2 +54,2 @@\n-    public void constructorParametersEmpty(Blackhole bh) throws Exception {\n-        bh.consume(objectConstructor.getParameterTypes());\n+    public void getExceptionTypesEmpty() throws Exception {\n+        emptyExceptionsMethod.getExceptionTypes();\n@@ -55,2 +59,2 @@\n-    public void methodExceptionsEmpty(Blackhole bh) throws Exception {\n-        bh.consume(hashCodeMethod.getExceptionTypes());\n+    public void getParameterTypesEmpty() throws Exception {\n+        emptyParametersMethod.getParameterTypes();\n@@ -60,2 +64,2 @@\n-    public void methodParametersEmpty(Blackhole bh) throws Exception {\n-        bh.consume(hashCodeMethod.getParameterTypes());\n+    public void getParameterTypes() throws Exception {\n+        oneParameterMethod.getParameterTypes();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/reflect\/MethodBenchmark.java","additions":19,"deletions":15,"binary":false,"changes":34,"status":"modified"}]}