{"files":[{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang.reflect;\n+\n+import java.lang.reflect.Executable;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+\/**\n+ * Benchmark measuring the speed of Method\/Constructor.getExceptionTypes() and\n+ * getParameterTypes(), in cases where the result array is length zero.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@State(Scope.Benchmark)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Fork(1)\n+@Warmup(iterations = 3, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+public class ExecutableParameterAndExceptionTypesBenchmark {\n+    Executable objectConstructor;\n+    Executable hashCodeMethod;\n+\n+    public ExecutableParameterAndExceptionTypesBenchmark() {\n+        try {\n+            hashCodeMethod = Object.class.getDeclaredMethod(\"hashCode\");\n+            objectConstructor = Object.class.getConstructor();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+    }\n+\n+    @Benchmark\n+    public void constructorExceptionsWithNoExceptions(Blackhole bh) throws Exception {\n+        bh.consume(objectConstructor.getExceptionTypes());\n+    }\n+\n+    @Benchmark\n+    public void constructorParametersWithNoExceptions(Blackhole bh) throws Exception {\n+        bh.consume(objectConstructor.getParameterTypes());\n+    }\n+\n+    @Benchmark\n+    public void methodExceptionsWithNoExceptions(Blackhole bh) throws Exception {\n+        bh.consume(hashCodeMethod.getExceptionTypes());\n+    }\n+\n+    @Benchmark\n+    public void methodParametersWithNoExceptions(Blackhole bh) throws Exception {\n+        bh.consume(hashCodeMethod.getParameterTypes());\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/reflect\/ExecutableParameterAndExceptionTypesBenchmark.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}