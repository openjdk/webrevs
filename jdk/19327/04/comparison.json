{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -269,1 +269,1 @@\n-        return parameterTypes.clone();\n+        return parameterTypes.length == 0 ? parameterTypes : parameterTypes.clone();\n@@ -295,1 +295,1 @@\n-        return exceptionTypes.clone();\n+        return exceptionTypes.length == 0 ? exceptionTypes : exceptionTypes.clone();\n@@ -298,1 +298,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Constructor.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -318,1 +318,1 @@\n-        return parameterTypes.clone();\n+        return parameterTypes.length == 0 ? parameterTypes: parameterTypes.clone();\n@@ -345,1 +345,1 @@\n-        return exceptionTypes.clone();\n+        return exceptionTypes.length == 0 ? exceptionTypes : exceptionTypes.clone();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang.reflect;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+\/**\n+ * Benchmark measuring the speed of Method\/Constructor.getExceptionTypes() and\n+ * getParameterTypes(), in cases where the result array is length zero.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@State(Scope.Benchmark)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Fork(1)\n+@Warmup(iterations = 3, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+public class ConstructorBenchmark {\n+    Constructor<?> emptyParametersConstructor;\n+    Constructor<?> oneParameterConstructor;\n+    Constructor<?> emptyExceptionsConstructor;\n+    Constructor<?> oneExceptionConstructor;\n+\n+    public ConstructorBenchmark() {\n+        try {\n+            emptyParametersConstructor = Object.class.getConstructor();\n+            oneParameterConstructor = String.class.getConstructor(String.class);\n+\n+            emptyExceptionsConstructor = emptyParametersConstructor;\n+            oneExceptionConstructor = String.class.getConstructor(byte[].class, String.class);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+    }\n+\n+    @Benchmark\n+    public Object[] getExceptionTypes() throws Exception {\n+        return oneExceptionConstructor.getExceptionTypes();\n+    }\n+\n+    @Benchmark\n+    public Object[] getExceptionTypesEmpty() throws Exception {\n+        return emptyExceptionsConstructor.getExceptionTypes();\n+    }\n+\n+    @Benchmark\n+    public Object[] getParameterTypesEmpty() throws Exception {\n+        return emptyParametersConstructor.getParameterTypes();\n+    }\n+\n+    @Benchmark\n+    public Object[] getParameterTypes() throws Exception {\n+        return oneParameterConstructor.getParameterTypes();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/reflect\/ConstructorBenchmark.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang.reflect;\n+\n+import java.lang.reflect.Method;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+\/**\n+ * Benchmark measuring the speed of Method\/Method.getExceptionTypes() and\n+ * getParameterTypes(), in cases where the result array is length zero.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@State(Scope.Benchmark)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Fork(1)\n+@Warmup(iterations = 3, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+public class MethodBenchmark {\n+    Method emptyParametersMethod;\n+    Method oneParameterMethod;\n+    Method emptyExceptionsMethod;\n+    Method oneExceptionMethod;\n+\n+    public MethodBenchmark() {\n+        try {\n+            emptyParametersMethod = Object.class.getDeclaredMethod(\"hashCode\");\n+            oneParameterMethod = String.class.getDeclaredMethod(\"getBytes\", String.class);\n+\n+            emptyExceptionsMethod = emptyParametersMethod;\n+            oneExceptionMethod = oneParameterMethod;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+    }\n+\n+    @Benchmark\n+    public Object[] getExceptionTypes() throws Exception {\n+        return oneExceptionMethod.getExceptionTypes();\n+    }\n+\n+    @Benchmark\n+    public Object[] getExceptionTypesEmpty() throws Exception {\n+        return emptyExceptionsMethod.getExceptionTypes();\n+    }\n+\n+    @Benchmark\n+    public Object[] getParameterTypesEmpty() throws Exception {\n+        return emptyParametersMethod.getParameterTypes();\n+    }\n+\n+    @Benchmark\n+    public Object[] getParameterTypes() throws Exception {\n+        return oneParameterMethod.getParameterTypes();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/reflect\/MethodBenchmark.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"}]}