{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -269,1 +269,1 @@\n-        return parameterTypes.clone();\n+        return parameterTypes.length == 0 ? parameterTypes : parameterTypes.clone();\n@@ -295,1 +295,1 @@\n-        return exceptionTypes.clone();\n+        return exceptionTypes.length == 0 ? exceptionTypes : exceptionTypes.clone();\n@@ -298,1 +298,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Constructor.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -318,1 +318,1 @@\n-        return parameterTypes.clone();\n+        return parameterTypes.length == 0 ? parameterTypes: parameterTypes.clone();\n@@ -345,1 +345,1 @@\n-        return exceptionTypes.clone();\n+        return exceptionTypes.length == 0 ? exceptionTypes : exceptionTypes.clone();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ *\/\n+package org.openjdk.bench.java.lang.reflect;\n+\n+import java.lang.reflect.Executable;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+\/**\n+ * Benchmark measuring the speed of Method\/Constructor.getExceptionTypes() and\n+ * getParameterTypes(), in cases where the result array is length zero.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@State(Scope.Benchmark)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Fork(1)\n+@Warmup(iterations = 3, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+public class MethodBenchmark {\n+    Executable objectConstructor;\n+    Executable hashCodeMethod;\n+\n+    public MethodBenchmark() {\n+        try {\n+            hashCodeMethod = Object.class.getDeclaredMethod(\"hashCode\");\n+            objectConstructor = Object.class.getConstructor();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+    }\n+\n+    @Benchmark\n+    public void constructorExceptionsEmpty(Blackhole bh) throws Exception {\n+        bh.consume(objectConstructor.getExceptionTypes());\n+    }\n+\n+    @Benchmark\n+    public void constructorParametersEmpty(Blackhole bh) throws Exception {\n+        bh.consume(objectConstructor.getParameterTypes());\n+    }\n+\n+    @Benchmark\n+    public void methodExceptionsEmpty(Blackhole bh) throws Exception {\n+        bh.consume(hashCodeMethod.getExceptionTypes());\n+    }\n+\n+    @Benchmark\n+    public void methodParametersEmpty(Blackhole bh) throws Exception {\n+        bh.consume(hashCodeMethod.getParameterTypes());\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/reflect\/MethodBenchmark.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"}]}