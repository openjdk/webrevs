{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/jdk\/src\/classes\/build\/tools\/intpoly\/FieldGen.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/test\/BuildMicrobenchmark.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Intel Corporation. All rights reserved.\n+ * Copyright (c) 2024, Intel Corporation. All rights reserved.\n@@ -33,4 +33,4 @@\n-  0x000fffffffffffff, 0x00000fffffffffff,\n-  0x0000000000000000, 0x0000001000000000,\n-  0x0000ffffffff0000, 0x0000000000000000,\n-  0x0000000000000000, 0x0000000000000000\n+  0x000fffffffffffffULL, 0x00000fffffffffffULL,\n+  0x0000000000000000ULL, 0x0000001000000000ULL,\n+  0x0000ffffffff0000ULL, 0x0000000000000000ULL,\n+  0x0000000000000000ULL, 0x0000000000000000ULL\n@@ -43,4 +43,4 @@\n-  0x000fffffffffffff, 0x000fffffffffffff,\n-  0x000fffffffffffff, 0x000fffffffffffff,\n-  0xffffffffffffffff, 0xffffffffffffffff,\n-  0xffffffffffffffff, 0xffffffffffffffff,\n+  0x000fffffffffffffULL, 0x000fffffffffffffULL,\n+  0x000fffffffffffffULL, 0x000fffffffffffffULL,\n+  0xffffffffffffffffULL, 0xffffffffffffffffULL,\n+  0xffffffffffffffffULL, 0xffffffffffffffffULL,\n@@ -53,4 +53,4 @@\n-  0x0000000000000004, 0x0000000000000004,\n-  0x0000000000000004, 0x0000000000000004,\n-  0x0000000000000004, 0x0000000000000004,\n-  0x0000000000000004, 0x0000000000000004,\n+  0x0000000000000004ULL, 0x0000000000000004ULL,\n+  0x0000000000000004ULL, 0x0000000000000004ULL,\n+  0x0000000000000004ULL, 0x0000000000000004ULL,\n+  0x0000000000000004ULL, 0x0000000000000004ULL,\n@@ -63,4 +63,4 @@\n-  0x0000000000000001, 0x0000000000000002,\n-  0x0000000000000003, 0x0000000000000004,\n-  0x0000000000000005, 0x0000000000000006,\n-  0x0000000000000007, 0x0000000000000000,\n+  0x0000000000000001ULL, 0x0000000000000002ULL,\n+  0x0000000000000003ULL, 0x0000000000000004ULL,\n+  0x0000000000000005ULL, 0x0000000000000006ULL,\n+  0x0000000000000007ULL, 0x0000000000000000ULL,\n@@ -73,4 +73,4 @@\n-  0x0000000000000007, 0x0000000000000000,\n-  0x0000000000000001, 0x0000000000000002,\n-  0x0000000000000003, 0x0000000000000004,\n-  0x0000000000000005, 0x0000000000000006,\n+  0x0000000000000007ULL, 0x0000000000000000ULL,\n+  0x0000000000000001ULL, 0x0000000000000002ULL,\n+  0x0000000000000003ULL, 0x0000000000000004ULL,\n+  0x0000000000000005ULL, 0x0000000000000006ULL,\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_poly_mont.cpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/runtime.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/ECDSAOperations.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,1 @@\n-        IntegerPolynomialP256.MODULUS, IntegerPolynomialP256.ONE,\n+        IntegerPolynomialP256.MODULUS, MontgomeryIntegerPolynomialP256.ONE,\n@@ -73,8 +73,0 @@\n-    \/\/ This field is optional.\n-    \/\/ It is set, when the operations are also available in Montgomery domain.\n-    private ECOperations montgomeryOps;\n-\n-    static final Map<BigInteger, IntegerMontgomeryFieldModuloP> montgomeryFields = Map.of(\n-        IntegerPolynomialP256.MODULUS, MontgomeryIntegerPolynomialP256.ONE\n-    );\n-\n@@ -102,6 +94,0 @@\n-        ECOperations montOps = null;\n-        IntegerMontgomeryFieldModuloP montField = montgomeryFields.get(primeField.getP());\n-        if (montField != null) {\n-            montOps = new ECOperations(montField.getElement(curve.getB()), orderField);\n-        }\n-\n@@ -109,1 +95,1 @@\n-        ECOperations ecOps = new ECOperations(b, orderField, montOps);\n+        ECOperations ecOps = new ECOperations(b, orderField);\n@@ -122,5 +108,0 @@\n-        this(b, orderField, null);\n-    }\n-\n-    private ECOperations(IntegerModuloP b, IntegerFieldModuloP orderField, ECOperations montgomeryOps) {\n-        this.montgomeryOps = montgomeryOps;\n@@ -228,1 +209,1 @@\n-        if (montgomeryOps == null) {\n+        if (!(b.getField() instanceof IntegerMontgomeryFieldModuloP)) {\n@@ -235,1 +216,1 @@\n-            multiplier = new DefaultMontgomeryMultiplier(montgomeryOps, ecPoint);\n+            multiplier = new DefaultMontgomeryMultiplier(this, ecPoint);\n@@ -245,1 +226,1 @@\n-        if (montgomeryOps == null) {\n+        if (!(b.getField() instanceof IntegerMontgomeryFieldModuloP)) {\n@@ -251,1 +232,1 @@\n-            multiplier = new DefaultMontgomeryMultiplier(montgomeryOps, ecPoint);\n+            multiplier = new DefaultMontgomeryMultiplier(this, ecPoint);\n@@ -318,8 +299,1 @@\n-        \/\/ Route to Montgomery setSum, if field implemented\n-        ECOperations ops = this;\n-        if (this.montgomeryOps != null) {\n-            assert p.getField() instanceof IntegerMontgomeryFieldModuloP;\n-            assert p2.getField() instanceof IntegerMontgomeryFieldModuloP;\n-            ops = this.montgomeryOps;\n-        }\n-        ops.setSum((ProjectivePoint.Mutable) p, (ProjectivePoint.Mutable) p2, t0, t1, t2, t3, t4);\n+        setSum((ProjectivePoint.Mutable) p, (ProjectivePoint.Mutable) p2, t0, t1, t2, t3, t4);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/ECOperations.java","additions":8,"deletions":34,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/point\/ProjectivePoint.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/math\/IntegerMontgomeryFieldModuloP.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/math\/intpoly\/IntegerPolynomial.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/math\/intpoly\/IntegerPolynomial1305.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/math\/intpoly\/IntegerPolynomialModBinP.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/math\/intpoly\/MontgomeryIntegerPolynomialP256.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Intel Corporation. All rights reserved.\n+ * Copyright (c) 2024, Intel Corporation. All rights reserved.\n@@ -37,0 +37,1 @@\n+import sun.security.util.math.intpoly.*;\n@@ -82,0 +83,1 @@\n+                BigInteger b = curve.getCurve().getB();\n@@ -87,1 +89,1 @@\n-                ECOperations opsReference = ECOperations.forParameters(params).get();\n+                ECOperations opsReference = new ECOperations(IntegerPolynomialP256.ONE.getElement(b), P256OrderField.ONE);\n@@ -89,9 +91,4 @@\n-                try {\n-                        Field montgomeryOps = ECOperations.class.getDeclaredField(\"montgomeryOps\");\n-                        montgomeryOps.setAccessible(true);\n-                        if (montgomeryOps.get(ops) == null) {\n-                                throw new RuntimeException(\"Expected to find montgomery field for P256\");\n-                        }\n-                        montgomeryOps.set(opsReference, null); \/\/ Disable Montgomery field operations\n-                } catch (NoSuchFieldException | IllegalAccessException ex) {\n-                        throw new RuntimeException(ex);\n+                boolean instanceTest1 = ops.getField() instanceof IntegerMontgomeryFieldModuloP;\n+                boolean instanceTest2 = opsReference.getField() instanceof IntegerMontgomeryFieldModuloP;\n+                if (instanceTest1 == false || instanceTest2 == true) {\n+                        throw new RuntimeException(\"Bad Initialization: [\"+instanceTest1+\",\"+instanceTest2+\"]\");\n","filename":"test\/jdk\/com\/sun\/security\/ec\/ECOperationsFuzzTest.java","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Intel Corporation. All rights reserved.\n+ * Copyright (c) 2024, Intel Corporation. All rights reserved.\n@@ -39,0 +39,1 @@\n+import sun.security.util.math.intpoly.*;\n@@ -164,0 +165,1 @@\n+                BigInteger b = curve.getCurve().getB();\n@@ -169,1 +171,1 @@\n-                ECOperations opsReference = ECOperations.forParameters(params).get();\n+                ECOperations opsReference = new ECOperations(IntegerPolynomialP256.ONE.getElement(b), P256OrderField.ONE);\n@@ -171,9 +173,4 @@\n-                try {\n-                        Field montgomeryOps = ECOperations.class.getDeclaredField(\"montgomeryOps\");\n-                        montgomeryOps.setAccessible(true);\n-                        if (montgomeryOps.get(ops) == null) {\n-                                throw new RuntimeException(\"Expected to find montgomery field for P256\");\n-                        }\n-                        montgomeryOps.set(opsReference, null); \/\/ Disable Montgomery field operations\n-                } catch (NoSuchFieldException | IllegalAccessException ex) {\n-                        throw new RuntimeException(ex);\n+                boolean instanceTest1 = ops.getField() instanceof IntegerMontgomeryFieldModuloP;\n+                boolean instanceTest2 = opsReference.getField() instanceof IntegerMontgomeryFieldModuloP;\n+                if (instanceTest1 == false || instanceTest2 == true) {\n+                        throw new RuntimeException(\"Bad Initialization: [\"+instanceTest1+\",\"+instanceTest2+\"]\");\n","filename":"test\/jdk\/com\/sun\/security\/ec\/ECOperationsKATTest.java","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Intel Corporation. All rights reserved.\n+ * Copyright (c) 2024, Intel Corporation. All rights reserved.\n","filename":"test\/jdk\/com\/sun\/security\/util\/math\/intpoly\/IntegerPolynomialTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Intel Corporation. All rights reserved.\n+ * Copyright (c) 2024, Intel Corporation. All rights reserved.\n","filename":"test\/jdk\/com\/sun\/security\/util\/math\/intpoly\/MontgomeryPolynomialFuzzTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/full\/PolynomialP256Bench.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}