[{"commit":{"message":"Merge remote-tracking branch 'origin\/master' into ecc-montgomery"},"files":[],"sha":"b1a3300440581c5ed42c9bac7cfb9a6ee373c6d7"},{"commit":{"message":"shenandoah verifier"},"files":[],"sha":"df4fe6fa1d00c2d8c2d168493ca8a74bcf7e1e04"},{"commit":{"message":"comments from Sandhya"},"files":[],"sha":"5c360e35b8662a284f98d789ee73077b21906a93"},{"commit":{"message":"whitespace"},"files":[],"sha":"8cd095dd22598ace7a5ac06ad501d7bb39f1079f"},{"commit":{"message":"add message back"},"files":[],"sha":"83b213106cdc6267673148bdbbaafb5d2e32c3b7"},{"commit":{"message":"whitespace"},"files":[],"sha":"1ecfdc448cac923b18be058d2339dd945a8c0df3"},{"commit":{"message":"Use AffinePoint to exit Montgomery domain\n\nStyle notes:\nAffine.equals()\n    - Mismatched fields only appear to be used from testing, perhaps should be moved there instead\nAffine.getX(boolean)|getY(boolean)\n    - \"Passing flag is bad design\" - cleanest\/performant alternative to several instanceof checks\n    - needed to convert Affine to Projective (need to stay in montgomery domain)\nECOperations.PointMultiplier\n   - changes could probably be restored to original (since ProjectivePoint handling no longer required)\n   - consider these changes an improvement? (fewer nested classes)\n   - was an inner-class but not using inner-class features (i.e. ecOps variable should be converted)"},"files":[],"sha":"8ff243a231ae6be51f6f8156fd19f45d0e62a82b"},{"commit":{"message":"whitespace"},"files":[],"sha":"a1984501ae0ba229bdf522eadf600fc39751aa11"},{"commit":{"message":"Comments from Tony and Jatin"},"files":[],"sha":"c93a71f0f5cca636ce61a80d49106103032362a5"},{"commit":{"message":"Comments from Jatin and Tony"},"files":[],"sha":"6f9ac0469d42a93d5827ae0441cabc32c2b4a60e"},{"commit":{"message":"remove use of jdk.crypto.ec"},"files":[],"sha":"82b6dae78f4dbc87776bb790656938671ffdec12"},{"commit":{"message":"remove trailing whitespace"},"files":[],"sha":"dbe6cd3b1eddaceffdbec979ff700e75a868db0d"},{"commit":{"message":"Remeasure performance"},"files":[],"sha":"7bf06b73904ca24a99d59ff7eb49a12a97393481"},{"commit":{"message":"Fix rebase typo"},"files":[],"sha":"bc8d611f557b231fa13a3cf6fb85ed688325d671"},{"commit":{"message":"Address comments from Anas and thorough cleanup\n\n- MontgomeryIntegerPolynomialP256\n\t- Cleaned up montgomery in conversion; now automatically via Field.getElement()\n\t- removed toMontgomery() (and its interface)\n\t- Rearange and comment code, remove debug traces\n\t- (TODO: fix getElement(byte[]))\n- ECOperations\n\t- No more hashmap lookup on every multiply (ifs instead), removed trampoline\n\t- Regression; put back lazy loading of static constant table for better VM startup\n\t- Cleaned up tomontgomery  conversion to use Field.getElement()\n\t- Flattened multilayer PointMultiplication (was ECOperations.PointMultiplier.LargeTable.P256 made even worse by new montgomery multipliers)\n\t- removed (pre-existing incorrect) use of member classes\n\t- Added comments and more comments\n\t- Made ECOperations.montgomeryOps private\n\t- Patched tests to use reflection to access ECOperations.montgomeryOps\n- stubGenerator_x86)64_poly_mont.cpp\n\t- Comments were very wrong, fixed\/rewrote comments\n\t- Added ascii art for vector operations\n- Removed montgomery percolation in crypto ParameterSpec APIs\n- Enabled montgomery intrinsics by default\n- Fixed test cases (ECOperationsFussTest.java, ECOperationsKAT.java, MontgomeryPolynomialFuzzTest.java)\n\t- Typos from context switch\n\t- Fixes needed after refactoring\n\t\t- Use reflection to disable montgomery\n\t\t- getElement() refactored, unfix uses\n- Fixed PolynomialP256Bench microbenchmark\n\t- Need to remeasure\n- Removed changes in SignatureBench and KeyAggreementBench\n\t- Will use original with baseline SDK"},"files":[],"sha":"c431528d8f322d7ed7a0d43e7ea37dcfaaee07b3"},{"commit":{"message":"conditionalAssign intrinsic"},"files":[],"sha":"6285a33ff8666ed26181fc39d8bce8ce8a4334cf"},{"commit":{"message":"rebase"},"files":[],"sha":"e36a552a598b13205c94f445646fb9bb46041bae"}]