{"files":[{"patch":"@@ -811,0 +811,34 @@\n+        \/\/ To avoid user confusion, we block signature scheme names to be used\n+        \/\/ with CertificateSignature algorithm constraints usage. For example,\n+        \/\/ RSASSA-PSS certificate signature algorithm corresponds to multiple\n+        \/\/ signature scheme names and blocking one of those signature scheme\n+        \/\/ with CertificateSignature usage directive won't block RSASSA-PSS\n+        \/\/ certificate signature because other rsa_pss_* signature schemes\n+        \/\/ still will be allowed.\n+        \/\/ Below are signature scheme names supported in TLSv1.2 and TLSv1.3\n+        \/\/ that are unique (i.e. different from corresponding algorithm names).\n+        \/\/ We avoid calling back the SSL layer to get these names because of\n+        \/\/ the circular dependency.\n+        private static final Set<String> BLOCKED_FOR_CERT_SCOPE = Set.of(\n+                \"ecdsa_secp256r1_sha256\",\n+                \"ecdsa_secp384r1_sha384\",\n+                \"ecdsa_secp521r1_sha512\",\n+                \"rsa_pss_rsae_sha256\",\n+                \"rsa_pss_rsae_sha384\",\n+                \"rsa_pss_rsae_sha512\",\n+                \"rsa_pss_pss_sha256\",\n+                \"rsa_pss_pss_sha384\",\n+                \"rsa_pss_pss_sha512\",\n+                \"rsa_pkcs1_sha256\",\n+                \"rsa_pkcs1_sha384\",\n+                \"rsa_pkcs1_sha512\",\n+                \"dsa_sha256\",\n+                \"ecdsa_sha224\",\n+                \"rsa_sha224\",\n+                \"dsa_sha224\",\n+                \"ecdsa_sha1\",\n+                \"rsa_pkcs1_sha1\",\n+                \"dsa_sha1\",\n+                \"rsa_md5\"\n+        );\n+\n@@ -821,0 +855,8 @@\n+                        if (SSLScope.CERTIFICATE_SIGNATURE.equals(scope)\n+                                && BLOCKED_FOR_CERT_SCOPE.contains(\n+                                algorithm.toLowerCase(Locale.ENGLISH))) {\n+                            throw new IllegalArgumentException(\"Can't use \"\n+                                    + \"signature scheme names with \"\n+                                    + usage + \" usage constraint\");\n+                        }\n+\n@@ -824,0 +866,1 @@\n+\n@@ -843,5 +886,2 @@\n-            if (this.scopes == null || scopes == null) {\n-                return true;\n-            }\n-\n-            return Collections.disjoint(this.scopes, scopes);\n+            return this.scopes == null || scopes == null\n+                    || Collections.disjoint(this.scopes, scopes);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DisabledAlgorithmConstraints.java","additions":45,"deletions":5,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -758,1 +758,6 @@\n-#     Example: \"rsa_pkcs1_sha1 usage HandshakeSignature\"\n+#     Note that TLS signature scheme names can't be used as algorithms with\n+#     CertificateSignature usage type, only certificate's signature algorithm\n+#     or certificate's key algorithm are supported for this usage type.\n+#     Examples:\n+#       - rsa_pkcs1_sha1 usage HandshakeSignature\n+#       - SHA1withRSA usage CertificateSignature\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8366211\n+ * @summary Block signature scheme names to be used with CertificateSignature\n+ *          algorithm constraints usage\n+ * @library \/javax\/net\/ssl\/templates\n+ *          \/test\/lib\n+ * @run main\/othervm BlockSignatureSchemesForCert\n+ *\/\n+\n+import static jdk.test.lib.Asserts.assertEquals;\n+import static jdk.test.lib.Asserts.assertTrue;\n+import static jdk.test.lib.Utils.runAndCheckException;\n+\n+import java.security.Security;\n+\n+public class BlockSignatureSchemesForCert extends SSLSocketTemplate {\n+\n+    public static void main(String[] args) throws Exception {\n+        Security.setProperty(\"jdk.tls.disabledAlgorithms\",\n+                \"Rsa_Pss_Pss_Sha256 usage CertificateSignature\");\n+\n+        runAndCheckException(\n+                () -> new BlockSignatureSchemesForCert().run(),\n+                e -> {\n+                    assertTrue(e instanceof ExceptionInInitializerError);\n+                    assertTrue(\n+                            e.getCause() instanceof IllegalArgumentException);\n+                    assertEquals(e.getCause().getMessage(), \"Can't use \"\n+                            + \"signature scheme names with \"\n+                            + \"CertificateSignature usage constraint\");\n+                });\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/BlockSignatureSchemesForCert.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -47,0 +47,1 @@\n+    private static final String CERTIFICATE_DISABLED_ALG = \"SHA384withECDSA\";\n@@ -52,3 +53,4 @@\n-    protected static final String DISABLED_CONSTRAINTS =\n-            HANDSHAKE_DISABLED_SIG + \" usage HandShakesignature, \"\n-            + CERTIFICATE_DISABLED_SIG + \" usage certificateSignature\";\n+    protected static final String DISABLED_CONSTRAINTS = HANDSHAKE_DISABLED_SIG\n+            + \" usage HandShakesignature, \"\n+            + CERTIFICATE_DISABLED_ALG\n+            + \" usage certificateSignature\";\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/DisableSignatureSchemePerScopeTLS12.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-                \"rsa_pkcs1_sha1 usage handshakeSignature certificateSignature TLSServer\");\n+                \"SHA1withRSA usage handshakeSignature certificateSignature TLSServer\");\n@@ -51,3 +51,3 @@\n-                    assertEquals(e.getCause().getMessage(),\n-                            \"Can't mix TLS protocol specific constraints\"\n-                                    + \" with other usage constraints\");\n+                    assertEquals(e.getCause().getMessage(), \"Can't mix TLS \"\n+                            + \"protocol specific constraints\"\n+                            + \" with other usage constraints\");\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/MixingTLSUsageConstraintsWithNonTLS.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}