{"files":[{"patch":"@@ -0,0 +1,177 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ *\n+ * @library \/test\/lib\n+ * @requires vm.hasSA\n+ * @modules jdk.hotspot.agent\/sun.jvm.hotspot\n+ *          jdk.hotspot.agent\/sun.jvm.hotspot.debugger\n+ *          jdk.hotspot.agent\/sun.jvm.hotspot.types\n+ *          jdk.hotspot.agent\/sun.jvm.hotspot.types.basic\n+ *\n+ * @run main\/othervm --add-opens=jdk.hotspot.agent\/sun.jvm.hotspot.types.basic=ALL-UNNAMED UniqueVtableTest\n+ *\/\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import sun.jvm.hotspot.HotSpotAgent;\n+import sun.jvm.hotspot.debugger.Address;\n+import sun.jvm.hotspot.types.Type;\n+import sun.jvm.hotspot.types.basic.BasicTypeDataBase;\n+\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.SA.SATestUtils;\n+\n+\n+public class UniqueVtableTest {\n+\n+    private HotSpotAgent agent;\n+    private MethodHandle vtblForType;\n+\n+    public UniqueVtableTest() {\n+    }\n+\n+    private static String type2String(Type t) {\n+        return t + \" (extends \" + t.getSuperclass() + \")\";\n+    }\n+\n+    private static void log(Object o) {\n+        System.out.println(o);\n+    }\n+\n+    private void attach(long pid) throws Throwable {\n+        agent = new HotSpotAgent();\n+        log(\"Attaching to process ID \" + pid + \"...\");\n+        agent.attach((int) pid);\n+        log(\"Attached successfully.\");\n+\n+        \/\/ agent.getTypeDataBase() returns HotSpotTypeDataBase (extends BasicTypeDataBase)\n+        \/\/ We need a method from BasicTypeDataBase\n+        \/\/    Address vtblForType(Type type);\n+\n+        MethodHandles.Lookup lookup = MethodHandles.lookup();\n+        MethodHandles.Lookup classLookup = MethodHandles.privateLookupIn(BasicTypeDataBase.class, lookup);\n+        vtblForType = classLookup.findVirtual(BasicTypeDataBase.class, \"vtblForType\",\n+                 MethodType.methodType(Address.class, Type.class));\n+    }\n+\n+    private void detach() {\n+        if (agent != null) {\n+            agent.detach();\n+        }\n+    }\n+\n+    private void runTest() throws Throwable {\n+        Map<Address, List<Type>> types = new HashMap<>();\n+        Iterator<Type> it = agent.getTypeDataBase().getTypes();\n+        int dupFound = 0;\n+        while (it.hasNext()) {\n+            Type t = it.next();\n+            Address vtable = (Address) vtblForType.invoke(agent.getTypeDataBase(), t);\n+\n+            if (vtable != null) {\n+                List<Type> typeList = types.get(vtable);\n+                if (typeList == null) {\n+                    types.put(vtable, new ArrayList<>(List.of(t)));\n+                } else {\n+                    \/\/ duplicate found\n+                    dupFound++;\n+                    typeList.add(t);\n+                }\n+            }\n+\n+            if (vtable == null && t.getSuperclass() != null) {\n+               log(\"WARNING: vtable is null for \" + type2String(t)\n+                  + \", CInt: \" + t.isCIntegerType()\n+                  + \", CStr: \" + t.isCStringType()\n+                  + \", JPrimitive: \" + t.isJavaPrimitiveType()\n+                  + \", Oop: \" + t.isOopType()\n+                  + \", Ptr: \" + t.isPointerType());\n+            }\n+        }\n+\n+        if (dupFound > 0) {\n+            types.forEach((vtable, list) -> {\n+                if (list.size() > 1) {\n+                    log(\"Duplicate vtable: \" + vtable + \": \");\n+                    list.forEach(t -> log(\"  - \" + type2String(t)));\n+                }\n+            });\n+            throw new RuntimeException(\"Duplicate vtable(s) found: \" + dupFound);\n+        }\n+    }\n+\n+    private void run() throws Throwable {\n+        Throwable reasonToFail = null;\n+        LingeredApp app = null;\n+        try {\n+            app = LingeredApp.startApp();\n+            attach(app.getPid());\n+            runTest();\n+        } catch (Throwable ex) {\n+            reasonToFail = ex;\n+        } finally {\n+            try {\n+                detach();\n+            } catch (Exception ex) {\n+                log(\"detach error:\");\n+                ex.printStackTrace(System.out);\n+                \/\/ do not override original error\n+                if (reasonToFail != null) {\n+                    reasonToFail = ex;\n+                }\n+            }\n+            try {\n+                LingeredApp.stopApp(app);\n+            } catch (Exception ex) {\n+                log(\"LingeredApp.stopApp error:\");\n+                ex.printStackTrace(System.out);\n+                \/\/ do not override original error\n+                if (reasonToFail != null) {\n+                    reasonToFail = ex;\n+                }\n+            }\n+        }\n+        if (reasonToFail != null) {\n+            throw reasonToFail;\n+        }\n+    }\n+\n+    public static void main(String... args) throws Throwable {\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n+\n+        UniqueVtableTest test = new UniqueVtableTest();\n+\n+        test.run();\n+    }\n+\n+ }\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/UniqueVtableTest.java","additions":177,"deletions":0,"binary":false,"changes":177,"status":"added"}]}