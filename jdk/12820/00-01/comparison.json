{"files":[{"patch":"@@ -159,1 +159,1 @@\n-  Map<Type, Address> typeToVtbl = new HashMap<>();\n+  private Map<Type, Address> typeToVtbl = new HashMap<>();\n@@ -161,1 +161,1 @@\n-  private Address vtblForType(Type type) {\n+  public Address vtblForType(Type type) {\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/types\/basic\/BasicTypeDataBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @run main\/othervm --add-opens=jdk.hotspot.agent\/sun.jvm.hotspot.types.basic=ALL-UNNAMED UniqueVtableTest\n+ * @run main\/othervm UniqueVtableTest\n@@ -37,3 +37,0 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodType;\n@@ -58,1 +55,0 @@\n-    private MethodHandle vtblForType;\n@@ -76,9 +72,0 @@\n-\n-        \/\/ agent.getTypeDataBase() returns HotSpotTypeDataBase (extends BasicTypeDataBase)\n-        \/\/ We need a method from BasicTypeDataBase\n-        \/\/    Address vtblForType(Type type);\n-\n-        MethodHandles.Lookup lookup = MethodHandles.lookup();\n-        MethodHandles.Lookup classLookup = MethodHandles.privateLookupIn(BasicTypeDataBase.class, lookup);\n-        vtblForType = classLookup.findVirtual(BasicTypeDataBase.class, \"vtblForType\",\n-                 MethodType.methodType(Address.class, Type.class));\n@@ -94,1 +81,1 @@\n-        Map<Address, List<Type>> types = new HashMap<>();\n+        Map<Address, List<Type>> vtableToTypesMap = new HashMap<>();\n@@ -96,1 +83,6 @@\n-        int dupFound = 0;\n+        int dupsFound = 0;\n+        \/\/ agent.getTypeDataBase() returns HotSpotTypeDataBase (extends BasicTypeDataBase)\n+        BasicTypeDataBase typeDB = (BasicTypeDataBase)(agent.getTypeDataBase());\n+        int total = 0;\n+        int no_vtable = 0;\n+        int no_vtable_with_super = 0;\n@@ -98,0 +90,1 @@\n+            total++;\n@@ -99,2 +92,1 @@\n-            Address vtable = (Address) vtblForType.invoke(agent.getTypeDataBase(), t);\n-\n+            Address vtable = typeDB.vtblForType(t);\n@@ -102,1 +94,2 @@\n-                List<Type> typeList = types.get(vtable);\n+                no_vtable++;\n+                List<Type> typeList = vtableToTypesMap.get(vtable);\n@@ -104,1 +97,1 @@\n-                    types.put(vtable, new ArrayList<>(List.of(t)));\n+                    vtableToTypesMap.put(vtable, new ArrayList<>(List.of(t)));\n@@ -107,1 +100,1 @@\n-                    dupFound++;\n+                    dupsFound++;\n@@ -113,6 +106,7 @@\n-               log(\"WARNING: vtable is null for \" + type2String(t)\n-                  + \", CInt: \" + t.isCIntegerType()\n-                  + \", CStr: \" + t.isCStringType()\n-                  + \", JPrimitive: \" + t.isJavaPrimitiveType()\n-                  + \", Oop: \" + t.isOopType()\n-                  + \", Ptr: \" + t.isPointerType());\n+                no_vtable_with_super++;\n+                log(\"WARNING: vtable is null for \" + type2String(t)\n+                    + \", CInt: \" + t.isCIntegerType()\n+                    + \", CStr: \" + t.isCStringType()\n+                    + \", JPrimitive: \" + t.isJavaPrimitiveType()\n+                    + \", Oop: \" + t.isOopType()\n+                    + \", Ptr: \" + t.isPointerType());\n@@ -121,3 +115,4 @@\n-\n-        if (dupFound > 0) {\n-            types.forEach((vtable, list) -> {\n+        log(\"total: \" + total + \", no vtable: \" + no_vtable\n+            + \", no_vtable_with_super: \" + no_vtable_with_super);\n+        if (dupsFound > 0) {\n+            vtableToTypesMap.forEach((vtable, list) -> {\n@@ -129,1 +124,1 @@\n-            throw new RuntimeException(\"Duplicate vtable(s) found: \" + dupFound);\n+            throw new RuntimeException(\"Duplicate vtable(s) found: \" + dupsFound);\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/UniqueVtableTest.java","additions":26,"deletions":31,"binary":false,"changes":57,"status":"modified"}]}