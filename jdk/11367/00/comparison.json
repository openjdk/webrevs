{"files":[{"patch":"@@ -38,0 +38,1 @@\n+import java.lang.reflect.AccessFlag;\n@@ -54,0 +55,7 @@\n+import jdk.internal.classfile.AccessFlags;\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.ClassTransform;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.attribute.ModuleAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n@@ -65,7 +73,0 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Attribute;\n-import jdk.internal.org.objectweb.asm.ClassReader;\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.ModuleVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n@@ -1592,23 +1593,5 @@\n-\n-        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS\n-                                         + ClassWriter.COMPUTE_FRAMES);\n-\n-        ClassVisitor cv = new ClassVisitor(Opcodes.ASM7, cw) {\n-            @Override\n-            public void visit(int version,\n-                              int access,\n-                              String name,\n-                              String signature,\n-                              String superName,\n-                              String[] interfaces) {\n-                cw.visit(version,\n-                        Opcodes.ACC_INTERFACE\n-                            + Opcodes.ACC_ABSTRACT\n-                            + Opcodes.ACC_SYNTHETIC,\n-                        MODULE_INFO,\n-                        null,\n-                        \"java\/lang\/Object\",\n-                        null);\n-            }\n-            @Override\n-            public AnnotationVisitor visitAnnotation(String desc, boolean visible) {\n+        byte[] bytes = Classfile.parse(in.readAllBytes(),\n+                Classfile.Option.constantPoolSharing(false)).transform((clb, cle) -> {\n+            switch (cle) {\n+                case AccessFlags af -> clb.withFlags(AccessFlag.INTERFACE,\n+                        AccessFlag.ABSTRACT, AccessFlag.SYNTHETIC);\n@@ -1616,4 +1599,1 @@\n-                return super.visitAnnotation(desc, visible);\n-            }\n-            @Override\n-            public void visitAttribute(Attribute attr) {\n+                case RuntimeVisibleAnnotationsAttribute a -> clb.with(a);\n@@ -1621,12 +1601,3 @@\n-            }\n-            @Override\n-            public ModuleVisitor visitModule(String name, int flags, String version) {\n-                \/\/ drop Module attribute\n-                return null;\n-            }\n-        };\n-\n-        ClassReader cr = new ClassReader(in);\n-        cr.accept(cv, 0);\n-        byte[] bytes = cw.toByteArray();\n-\n+                case Attribute<?> a -> {}\n+                default -> clb.with(cle);\n+            }});\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Module.java","additions":17,"deletions":46,"binary":false,"changes":63,"status":"modified"}]}