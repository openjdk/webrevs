{"files":[{"patch":"@@ -1626,1 +1626,1 @@\n-  void ghash_processBlocks_wide(address p, Register state, Register subkeyH,\n+  void ghash_processBlocks_wide(Label& p, Register state, Register subkeyH,\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -510,1 +510,1 @@\n-void MacroAssembler::ghash_processBlocks_wide(address field_polynomial, Register state,\n+void MacroAssembler::ghash_processBlocks_wide(Label& field_polynomial, Register state,\n@@ -534,1 +534,4 @@\n-  ldrq(p, field_polynomial);    \/\/ The field polynomial\n+  \/\/ load polynomial via label which must identify local data in the\n+  \/\/ same code stub\n+  adr(rscratch1, field_polynomial);\n+  ldrq(p, rscratch1);    \/\/ The field polynomial\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64_aes.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -805,1 +805,1 @@\n-  void generate_copy_longs(StubId stub_id, DecoratorSet decorators, Label &start, Register s, Register d, Register count) {\n+  address generate_copy_longs(StubId stub_id, DecoratorSet decorators, Register s, Register d, Register count) {\n@@ -857,1 +857,1 @@\n-    __ bind(start);\n+    address start = __ pc();\n@@ -897,3 +897,3 @@\n-       use_stride = prefetch > 256;\n-       prefetch = -prefetch;\n-       if (use_stride) __ mov(stride, prefetch);\n+      use_stride = prefetch > 256;\n+      prefetch = -prefetch;\n+      if (use_stride) __ mov(stride, prefetch);\n@@ -1029,3 +1029,3 @@\n-         use_stride = prefetch > 256;\n-         prefetch = -prefetch;\n-         if (use_stride) __ mov(stride, prefetch);\n+        use_stride = prefetch > 256;\n+        prefetch = -prefetch;\n+        if (use_stride) __ mov(stride, prefetch);\n@@ -1040,9 +1040,9 @@\n-       \/\/ allowing for the offset of -8 the store instructions place\n-       \/\/ registers into the target 64 bit block at the following\n-       \/\/ offsets\n-       \/\/\n-       \/\/ t0 at offset 0\n-       \/\/ t1 at offset 8,  t2 at offset 16\n-       \/\/ t3 at offset 24, t4 at offset 32\n-       \/\/ t5 at offset 40, t6 at offset 48\n-       \/\/ t7 at offset 56\n+        \/\/ allowing for the offset of -8 the store instructions place\n+        \/\/ registers into the target 64 bit block at the following\n+        \/\/ offsets\n+        \/\/\n+        \/\/ t0 at offset 0\n+        \/\/ t1 at offset 8,  t2 at offset 16\n+        \/\/ t3 at offset 24, t4 at offset 32\n+        \/\/ t5 at offset 40, t6 at offset 48\n+        \/\/ t7 at offset 56\n@@ -1060,12 +1060,12 @@\n-       \/\/ d was not offset when we started so the registers are\n-       \/\/ written into the 64 bit block preceding d with the following\n-       \/\/ offsets\n-       \/\/\n-       \/\/ t1 at offset -8\n-       \/\/ t3 at offset -24, t0 at offset -16\n-       \/\/ t5 at offset -48, t2 at offset -32\n-       \/\/ t7 at offset -56, t4 at offset -48\n-       \/\/                   t6 at offset -64\n-       \/\/\n-       \/\/ note that this matches the offsets previously noted for the\n-       \/\/ loads\n+        \/\/ d was not offset when we started so the registers are\n+        \/\/ written into the 64 bit block preceding d with the following\n+        \/\/ offsets\n+        \/\/\n+        \/\/ t1 at offset -8\n+        \/\/ t3 at offset -24, t0 at offset -16\n+        \/\/ t5 at offset -48, t2 at offset -32\n+        \/\/ t7 at offset -56, t4 at offset -48\n+        \/\/                   t6 at offset -64\n+        \/\/\n+        \/\/ note that this matches the offsets previously noted for the\n+        \/\/ loads\n@@ -1112,4 +1112,4 @@\n-       \/\/ this is the same as above but copying only 4 longs hence\n-       \/\/ with only one intervening stp between the str instructions\n-       \/\/ but note that the offsets and registers still follow the\n-       \/\/ same pattern\n+        \/\/ this is the same as above but copying only 4 longs hence\n+        \/\/ with only one intervening stp between the str instructions\n+        \/\/ but note that the offsets and registers still follow the\n+        \/\/ same pattern\n@@ -1130,4 +1130,4 @@\n-       \/\/ this is the same as above but copying only 2 longs hence\n-       \/\/ there is no intervening stp between the str instructions\n-       \/\/ but note that the offset and register patterns are still\n-       \/\/ the same\n+        \/\/ this is the same as above but copying only 2 longs hence\n+        \/\/ there is no intervening stp between the str instructions\n+        \/\/ but note that the offset and register patterns are still\n+        \/\/ the same\n@@ -1144,2 +1144,2 @@\n-       \/\/ for forwards copy we need to re-adjust the offsets we\n-       \/\/ applied so that s and d are follow the last words written\n+        \/\/ for forwards copy we need to re-adjust the offsets we\n+        \/\/ applied so that s and d are follow the last words written\n@@ -1147,4 +1147,4 @@\n-       if (direction == copy_forwards) {\n-         __ add(s, s, 16);\n-         __ add(d, d, 8);\n-       }\n+        if (direction == copy_forwards) {\n+          __ add(s, s, 16);\n+          __ add(d, d, 8);\n+        }\n@@ -1155,1 +1155,3 @@\n-      }\n+    }\n+\n+    return start;\n@@ -1209,4 +1211,0 @@\n-  Label copy_f, copy_b;\n-  Label copy_obj_f, copy_obj_b;\n-  Label copy_obj_uninit_f, copy_obj_uninit_b;\n-\n@@ -1450,1 +1448,1 @@\n-        __ bl(copy_f);\n+        __ bl(StubRoutines::aarch64::copy_byte_f());\n@@ -1452,1 +1450,1 @@\n-        __ bl(copy_obj_uninit_f);\n+        __ bl(StubRoutines::aarch64::copy_oop_uninit_f());\n@@ -1454,1 +1452,1 @@\n-        __ bl(copy_obj_f);\n+        __ bl(StubRoutines::aarch64::copy_oop_f());\n@@ -1458,1 +1456,1 @@\n-        __ bl(copy_b);\n+        __ bl(StubRoutines::aarch64::copy_byte_b());\n@@ -1460,1 +1458,1 @@\n-        __ bl(copy_obj_uninit_b);\n+        __ bl(StubRoutines::aarch64::copy_oop_uninit_b());\n@@ -1462,1 +1460,1 @@\n-        __ bl(copy_obj_b);\n+        __ bl(StubRoutines::aarch64::copy_oop_b());\n@@ -1525,3 +1523,3 @@\n-  \/\/ Side Effects: entry is set to the (post push) entry point so it\n-  \/\/               can be used by the corresponding conjoint copy\n-  \/\/               method\n+  \/\/ Side Effects: nopush_entry is set to the (post push) entry point\n+  \/\/               so it can be used by the corresponding conjoint\n+  \/\/               copy method\n@@ -1529,1 +1527,1 @@\n-  address generate_disjoint_copy(StubId stub_id, address *entry) {\n+  address generate_disjoint_copy(StubId stub_id, address *nopush_entry) {\n@@ -1618,2 +1616,2 @@\n-    if (entry != nullptr) {\n-      *entry = __ pc();\n+    if (nopush_entry != nullptr) {\n+      *nopush_entry = __ pc();\n@@ -1682,2 +1680,2 @@\n-  \/\/   entry is set to the no-overlap entry point so it can be used by\n-  \/\/   some other conjoint copy method\n+  \/\/   nopush_entry is set to the no-overlap entry point so it can be\n+  \/\/   used by some other conjoint copy method\n@@ -1685,1 +1683,1 @@\n-  address generate_conjoint_copy(StubId stub_id, address nooverlap_target, address *entry) {\n+  address generate_conjoint_copy(StubId stub_id, address nooverlap_target, address *nopush_entry) {\n@@ -1772,2 +1770,2 @@\n-    if (entry != nullptr) {\n-      *entry = __ pc();\n+    if (nopush_entry != nullptr) {\n+      *nopush_entry = __ pc();\n@@ -1779,0 +1777,1 @@\n+    Label L_overlapping;\n@@ -1781,1 +1780,3 @@\n-    __ br(Assembler::HS, nooverlap_target);\n+    __ br(Assembler::LO, L_overlapping);\n+    __ b(RuntimeAddress(nooverlap_target));\n+    __ bind(L_overlapping);\n@@ -1853,1 +1854,1 @@\n-  address generate_checkcast_copy(StubId stub_id, address *entry) {\n+  address generate_checkcast_copy(StubId stub_id, address *nopush_entry) {\n@@ -1914,2 +1915,2 @@\n-    if (entry != nullptr) {\n-      *entry = __ pc();\n+    if (nopush_entry != nullptr) {\n+      *nopush_entry = __ pc();\n@@ -2727,7 +2728,15 @@\n-    address entry;\n-    address entry_jbyte_arraycopy;\n-    address entry_jshort_arraycopy;\n-    address entry_jint_arraycopy;\n-    address entry_oop_arraycopy;\n-    address entry_jlong_arraycopy;\n-    address entry_checkcast_arraycopy;\n+    \/\/ Some copy stubs publish a normal entry and then a 2nd 'fallback'\n+    \/\/ entry immediately following their stack push. This can be used\n+    \/\/ as a post-push branch target for compatible stubs when they\n+    \/\/ identify a special case that can be handled by the fallback\n+    \/\/ stub e.g a disjoint copy stub may be use as a special case\n+    \/\/ fallback for its compatible conjoint copy stub.\n+    \/\/\n+    \/\/ A no push entry is always returned in the following local and\n+    \/\/ then published by assigning to the appropriate entry field in\n+    \/\/ class StubRoutines. The entry value is then passed to the\n+    \/\/ generator for the compatible stub. That means the entry must be\n+    \/\/ listed when saving to\/restoring from the AOT cache, ensuring\n+    \/\/ that the inter-stub jumps are noted at AOT-cache save and\n+    \/\/ relocated at AOT cache load.\n+    address nopush_entry;\n@@ -2741,2 +2750,4 @@\n-    generate_copy_longs(StubId::stubgen_copy_byte_f_id, IN_HEAP | IS_ARRAY, copy_f, r0, r1, r15);\n-    generate_copy_longs(StubId::stubgen_copy_byte_b_id, IN_HEAP | IS_ARRAY, copy_b, r0, r1, r15);\n+    \/\/ generate and publish arch64-specific bulk copy routines first\n+    \/\/ so we can call them from other copy stubs\n+    StubRoutines::aarch64::_copy_byte_f = generate_copy_longs(StubId::stubgen_copy_byte_f_id, IN_HEAP | IS_ARRAY, r0, r1, r15);\n+    StubRoutines::aarch64::_copy_byte_b = generate_copy_longs(StubId::stubgen_copy_byte_b_id, IN_HEAP | IS_ARRAY, r0, r1, r15);\n@@ -2744,2 +2755,2 @@\n-    generate_copy_longs(StubId::stubgen_copy_oop_f_id, IN_HEAP | IS_ARRAY, copy_obj_f, r0, r1, r15);\n-    generate_copy_longs(StubId::stubgen_copy_oop_b_id, IN_HEAP | IS_ARRAY, copy_obj_b, r0, r1, r15);\n+    StubRoutines::aarch64::_copy_oop_f = generate_copy_longs(StubId::stubgen_copy_oop_f_id, IN_HEAP | IS_ARRAY, r0, r1, r15);\n+    StubRoutines::aarch64::_copy_oop_b = generate_copy_longs(StubId::stubgen_copy_oop_b_id, IN_HEAP | IS_ARRAY, r0, r1, r15);\n@@ -2747,2 +2758,2 @@\n-    generate_copy_longs(StubId::stubgen_copy_oop_uninit_f_id, IN_HEAP | IS_ARRAY | IS_DEST_UNINITIALIZED, copy_obj_uninit_f, r0, r1, r15);\n-    generate_copy_longs(StubId::stubgen_copy_oop_uninit_b_id, IN_HEAP | IS_ARRAY | IS_DEST_UNINITIALIZED, copy_obj_uninit_b, r0, r1, r15);\n+    StubRoutines::aarch64::_copy_oop_uninit_f = generate_copy_longs(StubId::stubgen_copy_oop_uninit_f_id, IN_HEAP | IS_ARRAY | IS_DEST_UNINITIALIZED, r0, r1, r15);\n+    StubRoutines::aarch64::_copy_oop_uninit_b = generate_copy_longs(StubId::stubgen_copy_oop_uninit_b_id, IN_HEAP | IS_ARRAY | IS_DEST_UNINITIALIZED, r0, r1, r15);\n@@ -2754,4 +2765,10 @@\n-    StubRoutines::_jbyte_disjoint_arraycopy         = generate_disjoint_copy(StubId::stubgen_jbyte_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_jbyte_arraycopy                  = generate_conjoint_copy(StubId::stubgen_jbyte_arraycopy_id, entry, &entry_jbyte_arraycopy);\n-    StubRoutines::_arrayof_jbyte_disjoint_arraycopy = generate_disjoint_copy(StubId::stubgen_arrayof_jbyte_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_arrayof_jbyte_arraycopy          = generate_conjoint_copy(StubId::stubgen_arrayof_jbyte_arraycopy_id, entry, nullptr);\n+    StubRoutines::_jbyte_disjoint_arraycopy         = generate_disjoint_copy(StubId::stubgen_jbyte_disjoint_arraycopy_id, &nopush_entry);\n+    \/\/ disjoint nopush entry is needed by conjoint copy\n+    StubRoutines::_jbyte_disjoint_arraycopy_nopush  = nopush_entry;\n+    StubRoutines::_jbyte_arraycopy                  = generate_conjoint_copy(StubId::stubgen_jbyte_arraycopy_id, StubRoutines::_jbyte_disjoint_arraycopy_nopush, &nopush_entry);\n+    \/\/ conjoint nopush entry is needed by generic\/unsafe copy\n+    StubRoutines::_jbyte_arraycopy_nopush = nopush_entry;\n+    StubRoutines::_arrayof_jbyte_disjoint_arraycopy = generate_disjoint_copy(StubId::stubgen_arrayof_jbyte_disjoint_arraycopy_id, &nopush_entry);\n+    \/\/ disjoint arrayof nopush entry is needed by conjoint copy\n+    StubRoutines::_arrayof_jbyte_disjoint_arraycopy_nopush  = nopush_entry;\n+    StubRoutines::_arrayof_jbyte_arraycopy          = generate_conjoint_copy(StubId::stubgen_arrayof_jbyte_arraycopy_id, StubRoutines::_arrayof_jbyte_disjoint_arraycopy_nopush, nullptr);\n@@ -2761,4 +2778,10 @@\n-    StubRoutines::_jshort_disjoint_arraycopy         = generate_disjoint_copy(StubId::stubgen_jshort_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_jshort_arraycopy                  = generate_conjoint_copy(StubId::stubgen_jshort_arraycopy_id, entry, &entry_jshort_arraycopy);\n-    StubRoutines::_arrayof_jshort_disjoint_arraycopy = generate_disjoint_copy(StubId::stubgen_arrayof_jshort_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_arrayof_jshort_arraycopy          = generate_conjoint_copy(StubId::stubgen_arrayof_jshort_arraycopy_id, entry, nullptr);\n+    StubRoutines::_jshort_disjoint_arraycopy         = generate_disjoint_copy(StubId::stubgen_jshort_disjoint_arraycopy_id, &nopush_entry);\n+    \/\/ disjoint nopush entry is needed by conjoint copy\n+    StubRoutines::_jshort_disjoint_arraycopy_nopush  = nopush_entry;\n+    StubRoutines::_jshort_arraycopy                  = generate_conjoint_copy(StubId::stubgen_jshort_arraycopy_id, StubRoutines::_jshort_disjoint_arraycopy_nopush, &nopush_entry);\n+    \/\/ conjoint nopush entry is used by generic\/unsafe copy\n+    StubRoutines::_jshort_arraycopy_nopush = nopush_entry;\n+    StubRoutines::_arrayof_jshort_disjoint_arraycopy = generate_disjoint_copy(StubId::stubgen_arrayof_jshort_disjoint_arraycopy_id, &nopush_entry);\n+    \/\/ disjoint arrayof nopush entry is needed by conjoint copy\n+    StubRoutines::_arrayof_jshort_disjoint_arraycopy_nopush = nopush_entry;\n+    StubRoutines::_arrayof_jshort_arraycopy          = generate_conjoint_copy(StubId::stubgen_arrayof_jshort_arraycopy_id, StubRoutines::_arrayof_jshort_disjoint_arraycopy_nopush, nullptr);\n@@ -2768,2 +2791,4 @@\n-    StubRoutines::_arrayof_jint_disjoint_arraycopy = generate_disjoint_copy(StubId::stubgen_arrayof_jint_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_arrayof_jint_arraycopy          = generate_conjoint_copy(StubId::stubgen_arrayof_jint_arraycopy_id, entry, &entry_jint_arraycopy);\n+    StubRoutines::_arrayof_jint_disjoint_arraycopy = generate_disjoint_copy(StubId::stubgen_arrayof_jint_disjoint_arraycopy_id, &nopush_entry);\n+    \/\/ disjoint arrayof nopush entry is needed by conjoint copy\n+    StubRoutines::_arrayof_jint_disjoint_arraycopy_nopush = nopush_entry;\n+    StubRoutines::_arrayof_jint_arraycopy          = generate_conjoint_copy(StubId::stubgen_arrayof_jint_arraycopy_id, StubRoutines::_arrayof_jint_disjoint_arraycopy_nopush, nullptr);\n@@ -2771,3 +2796,7 @@\n-    \/\/ entry_jint_arraycopy always points to the unaligned version\n-    StubRoutines::_jint_disjoint_arraycopy         = generate_disjoint_copy(StubId::stubgen_jint_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_jint_arraycopy                  = generate_conjoint_copy(StubId::stubgen_jint_arraycopy_id, entry, &entry_jint_arraycopy);\n+    \/\/ jint_arraycopy_nopush always points to the unaligned version\n+    StubRoutines::_jint_disjoint_arraycopy         = generate_disjoint_copy(StubId::stubgen_jint_disjoint_arraycopy_id, &nopush_entry);\n+    \/\/ disjoint nopush entry is needed by conjoint copy\n+    StubRoutines::_jint_disjoint_arraycopy_nopush  = nopush_entry;\n+    StubRoutines::_jint_arraycopy                  = generate_conjoint_copy(StubId::stubgen_jint_arraycopy_id, StubRoutines::_jint_disjoint_arraycopy_nopush, &nopush_entry);\n+    \/\/ conjoint nopush entry is needed by generic\/unsafe copy\n+    StubRoutines::_jint_arraycopy_nopush = nopush_entry;\n@@ -2777,2 +2806,8 @@\n-    StubRoutines::_arrayof_jlong_disjoint_arraycopy = generate_disjoint_copy(StubId::stubgen_arrayof_jlong_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_arrayof_jlong_arraycopy          = generate_conjoint_copy(StubId::stubgen_arrayof_jlong_arraycopy_id, entry, &entry_jlong_arraycopy);\n+    StubRoutines::_arrayof_jlong_disjoint_arraycopy = generate_disjoint_copy(StubId::stubgen_arrayof_jlong_disjoint_arraycopy_id, &nopush_entry);\n+    \/\/ disjoint arrayof nopush entry is needed by conjoint copy\n+    StubRoutines::_arrayof_jlong_disjoint_arraycopy_nopush = nopush_entry;\n+    StubRoutines::_arrayof_jlong_arraycopy          = generate_conjoint_copy(StubId::stubgen_arrayof_jlong_arraycopy_id, StubRoutines::_arrayof_jlong_disjoint_arraycopy_nopush, &nopush_entry);\n+    \/\/ conjoint nopush entry is needed by generic\/unsafe copy\n+    StubRoutines::_jlong_arraycopy_nopush = nopush_entry;\n+    \/\/ disjoint normal\/nopush and conjoint normal entries are not\n+    \/\/ generated since the arrayof versions are the same\n@@ -2780,0 +2815,1 @@\n+    StubRoutines::_jlong_disjoint_arraycopy_nopush = StubRoutines::_arrayof_jlong_disjoint_arraycopy_nopush;\n@@ -2784,4 +2820,0 @@\n-      \/\/ With compressed oops we need unaligned versions; notice that\n-      \/\/ we overwrite entry_oop_arraycopy.\n-      bool aligned = !UseCompressedOops;\n-\n@@ -2789,1 +2821,3 @@\n-        = generate_disjoint_copy(StubId::stubgen_arrayof_oop_disjoint_arraycopy_id, &entry);\n+        = generate_disjoint_copy(StubId::stubgen_arrayof_oop_disjoint_arraycopy_id, &nopush_entry);\n+      \/\/ disjoint arrayof nopush entry is needed by conjoint copy\n+      StubRoutines::_arrayof_oop_disjoint_arraycopy_nopush = nopush_entry;\n@@ -2791,1 +2825,3 @@\n-        = generate_conjoint_copy(StubId::stubgen_arrayof_oop_arraycopy_id, entry, &entry_oop_arraycopy);\n+        = generate_conjoint_copy(StubId::stubgen_arrayof_oop_arraycopy_id, StubRoutines::_arrayof_oop_disjoint_arraycopy_nopush, &nopush_entry);\n+      \/\/ conjoint arrayof nopush entry is needed by generic\/unsafe copy\n+      StubRoutines::_oop_arraycopy_nopush = nopush_entry;\n@@ -2794,1 +2830,5 @@\n-        = generate_disjoint_copy(StubId::stubgen_arrayof_oop_disjoint_arraycopy_uninit_id, &entry);\n+        = generate_disjoint_copy(StubId::stubgen_arrayof_oop_disjoint_arraycopy_uninit_id, &nopush_entry);\n+      \/\/ disjoint arrayof+uninit nopush entry is needed by conjoint copy\n+      StubRoutines::_arrayof_oop_disjoint_arraycopy_uninit_nopush = nopush_entry;\n+      \/\/ note that we don't need a returned nopush entry because the\n+      \/\/ generic\/unsafe copy does not cater for uninit arrays.\n@@ -2796,1 +2836,1 @@\n-        = generate_conjoint_copy(StubId::stubgen_arrayof_oop_arraycopy_uninit_id, entry, nullptr);\n+        = generate_conjoint_copy(StubId::stubgen_arrayof_oop_arraycopy_uninit_id, StubRoutines::_arrayof_oop_disjoint_arraycopy_uninit_nopush, nullptr);\n@@ -2799,0 +2839,1 @@\n+    \/\/ for oop copies reuse arrayof entries for non-arrayof cases\n@@ -2800,0 +2841,1 @@\n+    StubRoutines::_oop_disjoint_arraycopy_nopush = StubRoutines::_arrayof_oop_disjoint_arraycopy_nopush;\n@@ -2802,0 +2844,1 @@\n+    StubRoutines::_oop_disjoint_arraycopy_uninit_nopush = StubRoutines::_arrayof_oop_disjoint_arraycopy_uninit_nopush;\n@@ -2804,1 +2847,5 @@\n-    StubRoutines::_checkcast_arraycopy        = generate_checkcast_copy(StubId::stubgen_checkcast_arraycopy_id, &entry_checkcast_arraycopy);\n+    StubRoutines::_checkcast_arraycopy        = generate_checkcast_copy(StubId::stubgen_checkcast_arraycopy_id, &nopush_entry);\n+    \/\/ checkcast nopush entry is needed by generic copy\n+    StubRoutines::_checkcast_arraycopy_nopush = nopush_entry;\n+    \/\/ note that we don't need a returned nopush entry because the\n+    \/\/ generic copy does not cater for uninit arrays.\n@@ -2807,4 +2854,5 @@\n-    StubRoutines::_unsafe_arraycopy    = generate_unsafe_copy(entry_jbyte_arraycopy,\n-                                                              entry_jshort_arraycopy,\n-                                                              entry_jint_arraycopy,\n-                                                              entry_jlong_arraycopy);\n+    \/\/ unsafe arraycopy may fallback on conjoint stubs\n+    StubRoutines::_unsafe_arraycopy    = generate_unsafe_copy(StubRoutines::_jbyte_arraycopy_nopush,\n+                                                              StubRoutines::_jshort_arraycopy_nopush,\n+                                                              StubRoutines::_jint_arraycopy_nopush,\n+                                                              StubRoutines::_jlong_arraycopy_nopush);\n@@ -2812,6 +2860,7 @@\n-    StubRoutines::_generic_arraycopy   = generate_generic_copy(entry_jbyte_arraycopy,\n-                                                               entry_jshort_arraycopy,\n-                                                               entry_jint_arraycopy,\n-                                                               entry_oop_arraycopy,\n-                                                               entry_jlong_arraycopy,\n-                                                               entry_checkcast_arraycopy);\n+    \/\/ generic arraycopy may fallback on conjoint stubs\n+    StubRoutines::_generic_arraycopy   = generate_generic_copy(StubRoutines::_jbyte_arraycopy_nopush,\n+                                                               StubRoutines::_jshort_arraycopy_nopush,\n+                                                               StubRoutines::_jint_arraycopy_nopush,\n+                                                               StubRoutines::_oop_arraycopy_nopush,\n+                                                               StubRoutines::_jlong_arraycopy_nopush,\n+                                                               StubRoutines::_checkcast_arraycopy_nopush);\n@@ -3405,6 +3454,1 @@\n-    address ghash_polynomial = __ pc();\n-    __ emit_int64(0x87);  \/\/ The low-order bits of the field\n-                          \/\/ polynomial (i.e. p = z^7+z^2+z+1)\n-                          \/\/ repeated in the low and high parts of a\n-                          \/\/ 128-bit vector\n-    __ emit_int64(0x87);\n+    Label ghash_polynomial; \/\/ local data generated after code\n@@ -3412,1 +3456,1 @@\n-    __ align(CodeEntryAlignment);\n+   __ align(CodeEntryAlignment);\n@@ -3517,1 +3561,11 @@\n-     return start;\n+\n+    \/\/ bind label and generate polynomial data\n+    __ align(wordSize * 2);\n+    __ bind(ghash_polynomial);\n+    __ emit_int64(0x87);  \/\/ The low-order bits of the field\n+                          \/\/ polynomial (i.e. p = z^7+z^2+z+1)\n+                          \/\/ repeated in the low and high parts of a\n+                          \/\/ 128-bit vector\n+    __ emit_int64(0x87);\n+\n+    return start;\n@@ -4562,10 +4616,0 @@\n-    \/\/ The constant data is broken into two 128-bit segments to be loaded\n-    \/\/ onto FloatRegisters.  The first 128 bits are a counter add overlay\n-    \/\/ that adds +0\/+1\/+2\/+3 to the vector holding replicated state[12].\n-    \/\/ The second 128-bits is a table constant used for 8-bit left rotations.\n-    __ BIND(L_cc20_const);\n-    __ emit_int64(0x0000000100000000UL);\n-    __ emit_int64(0x0000000300000002UL);\n-    __ emit_int64(0x0605040702010003UL);\n-    __ emit_int64(0x0E0D0C0F0A09080BUL);\n-\n@@ -4719,0 +4763,11 @@\n+    \/\/ bind label and generate local constant data used by this stub\n+    \/\/ The constant data is broken into two 128-bit segments to be loaded\n+    \/\/ onto FloatRegisters.  The first 128 bits are a counter add overlay\n+    \/\/ that adds +0\/+1\/+2\/+3 to the vector holding replicated state[12].\n+    \/\/ The second 128-bits is a table constant used for 8-bit left rotations.\n+    __ BIND(L_cc20_const);\n+    __ emit_int64(0x0000000100000000UL);\n+    __ emit_int64(0x0000000300000002UL);\n+    __ emit_int64(0x0605040702010003UL);\n+    __ emit_int64(0x0E0D0C0F0A09080BUL);\n+\n@@ -6039,4 +6094,0 @@\n-    __ BIND(L_F00);\n-    __ emit_int64(0x0f000f000f000f00);\n-    __ emit_int64(0x0f000f000f000f00);\n-\n@@ -6236,0 +6287,5 @@\n+    \/\/ bind label and generate constant data used by this stub\n+    __ BIND(L_F00);\n+    __ emit_int64(0x0f000f000f000f00);\n+    __ emit_int64(0x0f000f000f000f00);\n+\n@@ -9645,8 +9701,1 @@\n-    __ align(wordSize * 2);\n-    address p = __ pc();\n-    __ emit_int64(0x87);  \/\/ The low-order bits of the field\n-                          \/\/ polynomial (i.e. p = z^7+z^2+z+1)\n-                          \/\/ repeated in the low and high parts of a\n-                          \/\/ 128-bit vector\n-    __ emit_int64(0x87);\n-\n+    Label polynomial; \/\/ local data generated at end of stub\n@@ -9664,1 +9713,2 @@\n-    __ ldrq(v24, p);    \/\/ The field polynomial\n+    __ adr(rscratch1, polynomial);\n+    __ ldrq(v24, rscratch1);    \/\/ The field polynomial\n@@ -9704,0 +9754,9 @@\n+    \/\/ bind label and generate local polynomial data\n+    __ align(wordSize * 2);\n+    __ bind(polynomial);\n+    __ emit_int64(0x87);  \/\/ The low-order bits of the field\n+                          \/\/ polynomial (i.e. p = z^7+z^2+z+1)\n+                          \/\/ repeated in the low and high parts of a\n+                          \/\/ 128-bit vector\n+    __ emit_int64(0x87);\n+\n@@ -9712,8 +9771,1 @@\n-    __ align(wordSize * 2);\n-    address p = __ pc();\n-    __ emit_int64(0x87);  \/\/ The low-order bits of the field\n-                          \/\/ polynomial (i.e. p = z^7+z^2+z+1)\n-                          \/\/ repeated in the low and high parts of a\n-                          \/\/ 128-bit vector\n-    __ emit_int64(0x87);\n-\n+    Label polynomial;           \/\/ local data generated after stub\n@@ -9741,1 +9793,1 @@\n-    __ ghash_processBlocks_wide(p, state, subkeyH, data, blocks, unroll);\n+    __ ghash_processBlocks_wide(polynomial, state, subkeyH, data, blocks, unroll);\n@@ -9754,0 +9806,9 @@\n+    \/\/ bind label and generate polynomial data\n+    __ align(wordSize * 2);\n+    __ bind(polynomial);\n+    __ emit_int64(0x87);  \/\/ The low-order bits of the field\n+                          \/\/ polynomial (i.e. p = z^7+z^2+z+1)\n+                          \/\/ repeated in the low and high parts of a\n+                          \/\/ 128-bit vector\n+    __ emit_int64(0x87);\n+\n@@ -9755,0 +9816,1 @@\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":218,"deletions":156,"binary":false,"changes":374,"status":"modified"},{"patch":"@@ -3013,0 +3013,4 @@\n+    \/\/ Note:   chaining of stubs does not rely on branching to an\n+    \/\/         auxiliary post-push entry because none of the stubs\n+    \/\/         push\/pop a frame.\n+\n@@ -3026,0 +3030,1 @@\n+    \/\/ disjoint copy entry is needed by conjoint copy\n","filename":"src\/hotspot\/cpu\/arm\/stubGenerator_arm.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3280,2 +3280,6 @@\n-    \/\/ Note: the disjoint stubs must be generated first, some of\n-    \/\/ the conjoint stubs use them.\n+    \/\/ Note: the disjoint stubs must be generated first, some of the\n+    \/\/       conjoint stubs use them.\n+\n+    \/\/ Note: chaining of stubs does not rely on branching to an\n+    \/\/       auxiliary post-push entry because none of the stubs\n+    \/\/       push\/pop a frame.\n","filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -734,2 +734,1 @@\n-  void generate_copy_longs(StubId stub_id, Label &start,\n-                           Register s, Register d, Register count) {\n+  address generate_copy_longs(StubId stub_id, Register s, Register d, Register count) {\n@@ -765,1 +764,1 @@\n-    __ bind(start);\n+    address start = __ pc();\n@@ -881,1 +880,0 @@\n-  }\n@@ -883,1 +881,2 @@\n-  Label copy_f, copy_b;\n+    return start;\n+  }\n@@ -1101,2 +1100,2 @@\n-  \/\/   entry - is assigned to the stub's post push entry point unless\n-  \/\/           it is null\n+  \/\/   nopush_entry - is assigned to the stub's post push entry point\n+  \/\/                  unless it is null\n@@ -1113,3 +1112,3 @@\n-  \/\/ Side Effects: entry is set to the (post push) entry point so it\n-  \/\/               can be used by the corresponding conjoint copy\n-  \/\/               method\n+  \/\/ Side Effects: nopush_entry is set to the (post push) entry point\n+  \/\/               so it can be used by the corresponding conjoint\n+  \/\/               copy method\n@@ -1117,1 +1116,1 @@\n-  address generate_disjoint_copy(StubId stub_id, address* entry) {\n+  address generate_disjoint_copy(StubId stub_id, address* nopush_entry) {\n@@ -1206,2 +1205,2 @@\n-    if (entry != nullptr) {\n-      *entry = __ pc();\n+    if (nopush_entry != nullptr) {\n+     *nopush_entry = __ pc();\n@@ -1258,2 +1257,2 @@\n-  \/\/   entry - is assigned to the stub's post push entry point unless\n-  \/\/           it is null\n+  \/\/   nopush_entry - is assigned to the stub's post push entry point\n+  \/\/                 unless it is null\n@@ -1271,2 +1270,2 @@\n-  \/\/   entry is set to the no-overlap entry point so it can be used by\n-  \/\/   some other conjoint copy method\n+  \/\/   nopush_entry is set to the no-overlap entry point so it can be\n+  \/\/   used by some other conjoint copy method\n@@ -1274,1 +1273,1 @@\n-  address generate_conjoint_copy(StubId stub_id, address nooverlap_target, address *entry) {\n+  address generate_conjoint_copy(StubId stub_id, address nooverlap_target, address *nopush_entry) {\n@@ -1361,2 +1360,2 @@\n-    if (entry != nullptr) {\n-      *entry = __ pc();\n+    if (nopush_entry != nullptr) {\n+      *nopush_entry = __ pc();\n@@ -1372,1 +1371,1 @@\n-    __ j(nooverlap_target);\n+    __ j(RuntimeAddress(nooverlap_target));\n@@ -1447,1 +1446,1 @@\n-  address generate_checkcast_copy(StubId stub_id, address* entry) {\n+  address generate_checkcast_copy(StubId stub_id, address* nopush_entry) {\n@@ -1498,2 +1497,2 @@\n-    if (entry != nullptr) {\n-      *entry = __ pc();\n+    if (nopush_entry != nullptr) {\n+      *nopush_entry = __ pc();\n@@ -2296,7 +2295,15 @@\n-    address entry                     = nullptr;\n-    address entry_jbyte_arraycopy     = nullptr;\n-    address entry_jshort_arraycopy    = nullptr;\n-    address entry_jint_arraycopy      = nullptr;\n-    address entry_oop_arraycopy       = nullptr;\n-    address entry_jlong_arraycopy     = nullptr;\n-    address entry_checkcast_arraycopy = nullptr;\n+    \/\/ Some copy stubs publish a normal entry and then a 2nd 'fallback'\n+    \/\/ entry immediately following their stack push. This can be used\n+    \/\/ as a post-push branch target for compatible stubs when they\n+    \/\/ identify a special case that can be handled by the fallback\n+    \/\/ stub e.g a disjoint copy stub may be use as a special case\n+    \/\/ fallback for its compatible conjoint copy stub.\n+    \/\/\n+    \/\/ A no push entry is always returned in the following local and\n+    \/\/ then published by assigning to the appropriate entry field in\n+    \/\/ class StubRoutines. The entry value is then passed to the\n+    \/\/ generator for the compatible stub. That means the entry must be\n+    \/\/ listed when saving to\/restoring from the AOT cache, ensuring\n+    \/\/ that the inter-stub jumps are noted at AOT-cache save and\n+    \/\/ relocated at AOT cache load.\n+    address nopush_entry = nullptr;\n@@ -2310,2 +2317,4 @@\n-    generate_copy_longs(StubId::stubgen_copy_byte_f_id, copy_f, c_rarg0, c_rarg1, t1);\n-    generate_copy_longs(StubId::stubgen_copy_byte_b_id, copy_b, c_rarg0, c_rarg1, t1);\n+    \/\/ generate and publish riscv-specific bulk copy routines first\n+    \/\/ so we can call them from other copy stubs\n+    StubRoutines::riscv::_copy_byte_f = generate_copy_longs(StubId::stubgen_copy_byte_f_id, c_rarg0, c_rarg1, t1);\n+    StubRoutines::riscv::_copy_byte_b = generate_copy_longs(StubId::stubgen_copy_byte_b_id, c_rarg0, c_rarg1, t1);\n@@ -2317,4 +2326,10 @@\n-    StubRoutines::_jbyte_disjoint_arraycopy          = generate_disjoint_copy(StubId::stubgen_jbyte_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_jbyte_arraycopy                   = generate_conjoint_copy(StubId::stubgen_jbyte_arraycopy_id, entry, &entry_jbyte_arraycopy);\n-    StubRoutines::_arrayof_jbyte_disjoint_arraycopy  = generate_disjoint_copy(StubId::stubgen_arrayof_jbyte_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_arrayof_jbyte_arraycopy           = generate_conjoint_copy(StubId::stubgen_arrayof_jbyte_arraycopy_id, entry, nullptr);\n+    StubRoutines::_jbyte_disjoint_arraycopy          = generate_disjoint_copy(StubId::stubgen_jbyte_disjoint_arraycopy_id, &nopush_entry);\n+    \/\/ disjoint nopush entry is needed by conjoint copy\n+    StubRoutines::_jbyte_disjoint_arraycopy_nopush  = nopush_entry;\n+    StubRoutines::_jbyte_arraycopy                   = generate_conjoint_copy(StubId::stubgen_jbyte_arraycopy_id, StubRoutines::_jbyte_disjoint_arraycopy_nopush, &nopush_entry);\n+    \/\/ conjoint nopush entry is needed by generic\/unsafe copy\n+    StubRoutines::_jbyte_arraycopy_nopush = nopush_entry;\n+    StubRoutines::_arrayof_jbyte_disjoint_arraycopy  = generate_disjoint_copy(StubId::stubgen_arrayof_jbyte_disjoint_arraycopy_id, &nopush_entry);\n+    \/\/ disjoint arrayof nopush entry is needed by conjoint copy\n+    StubRoutines::_arrayof_jbyte_disjoint_arraycopy_nopush  = nopush_entry;\n+    StubRoutines::_arrayof_jbyte_arraycopy           = generate_conjoint_copy(StubId::stubgen_arrayof_jbyte_arraycopy_id, StubRoutines::_arrayof_jbyte_disjoint_arraycopy_nopush, nullptr);\n@@ -2324,4 +2339,10 @@\n-    StubRoutines::_jshort_disjoint_arraycopy         = generate_disjoint_copy(StubId::stubgen_jshort_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_jshort_arraycopy                  = generate_conjoint_copy(StubId::stubgen_jshort_arraycopy_id, entry, &entry_jshort_arraycopy);\n-    StubRoutines::_arrayof_jshort_disjoint_arraycopy = generate_disjoint_copy(StubId::stubgen_arrayof_jshort_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_arrayof_jshort_arraycopy          = generate_conjoint_copy(StubId::stubgen_arrayof_jshort_arraycopy_id, entry, nullptr);\n+    StubRoutines::_jshort_disjoint_arraycopy         = generate_disjoint_copy(StubId::stubgen_jshort_disjoint_arraycopy_id, &nopush_entry);\n+    \/\/ disjoint nopush entry is needed by conjoint copy\n+    StubRoutines::_jshort_disjoint_arraycopy_nopush  = nopush_entry;\n+    StubRoutines::_jshort_arraycopy                  = generate_conjoint_copy(StubId::stubgen_jshort_arraycopy_id, StubRoutines::_jshort_disjoint_arraycopy_nopush, &nopush_entry);\n+    \/\/ conjoint nopush entry is used by generic\/unsafe copy\n+    StubRoutines::_jshort_arraycopy_nopush = nopush_entry;\n+    StubRoutines::_arrayof_jshort_disjoint_arraycopy = generate_disjoint_copy(StubId::stubgen_arrayof_jshort_disjoint_arraycopy_id, &nopush_entry);\n+    \/\/ disjoint arrayof nopush entry is needed by conjoint copy\n+    StubRoutines::_arrayof_jshort_disjoint_arraycopy_nopush = nopush_entry;\n+    StubRoutines::_arrayof_jshort_arraycopy          = generate_conjoint_copy(StubId::stubgen_arrayof_jshort_arraycopy_id, StubRoutines::_arrayof_jshort_disjoint_arraycopy_nopush, nullptr);\n@@ -2331,2 +2352,4 @@\n-    StubRoutines::_arrayof_jint_disjoint_arraycopy   = generate_disjoint_copy(StubId::stubgen_arrayof_jint_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_arrayof_jint_arraycopy            = generate_conjoint_copy(StubId::stubgen_arrayof_jint_arraycopy_id, entry, &entry_jint_arraycopy);\n+    StubRoutines::_arrayof_jint_disjoint_arraycopy   = generate_disjoint_copy(StubId::stubgen_arrayof_jint_disjoint_arraycopy_id, &nopush_entry);\n+    \/\/ disjoint arrayof nopush entry is needed by conjoint copy\n+    StubRoutines::_arrayof_jint_disjoint_arraycopy_nopush = nopush_entry;\n+    StubRoutines::_arrayof_jint_arraycopy            = generate_conjoint_copy(StubId::stubgen_arrayof_jint_arraycopy_id, StubRoutines::_arrayof_jint_disjoint_arraycopy_nopush, nullptr);\n@@ -2335,2 +2358,6 @@\n-    StubRoutines::_jint_disjoint_arraycopy           = generate_disjoint_copy(StubId::stubgen_jint_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_jint_arraycopy                  = generate_conjoint_copy(StubId::stubgen_jint_arraycopy_id, entry, &entry_jint_arraycopy);\n+    StubRoutines::_jint_disjoint_arraycopy           = generate_disjoint_copy(StubId::stubgen_jint_disjoint_arraycopy_id, &nopush_entry);\n+    \/\/ disjoint nopush entry is needed by conjoint copy\n+    StubRoutines::_jint_disjoint_arraycopy_nopush  = nopush_entry;\n+    StubRoutines::_jint_arraycopy                  = generate_conjoint_copy(StubId::stubgen_jint_arraycopy_id, StubRoutines::_jint_disjoint_arraycopy_nopush, &nopush_entry);\n+    \/\/ conjoint nopush entry is needed by generic\/unsafe copy\n+    StubRoutines::_jint_arraycopy_nopush = nopush_entry;\n@@ -2340,2 +2367,8 @@\n-    StubRoutines::_arrayof_jlong_disjoint_arraycopy = generate_disjoint_copy(StubId::stubgen_arrayof_jlong_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_arrayof_jlong_arraycopy          = generate_conjoint_copy(StubId::stubgen_arrayof_jlong_arraycopy_id, entry, &entry_jlong_arraycopy);\n+    StubRoutines::_arrayof_jlong_disjoint_arraycopy = generate_disjoint_copy(StubId::stubgen_arrayof_jlong_disjoint_arraycopy_id, &nopush_entry);\n+    \/\/ disjoint arrayof nopush entry is needed by conjoint copy\n+    StubRoutines::_arrayof_jlong_disjoint_arraycopy_nopush = nopush_entry;\n+    StubRoutines::_arrayof_jlong_arraycopy          = generate_conjoint_copy(StubId::stubgen_arrayof_jlong_arraycopy_id, StubRoutines::_arrayof_jlong_disjoint_arraycopy_nopush, &nopush_entry);\n+    \/\/ conjoint nopush entry is needed by generic\/unsafe copy\n+    StubRoutines::_jlong_arraycopy_nopush = nopush_entry;\n+    \/\/ disjoint normal\/nopush and conjoint normal entries are not\n+    \/\/ generated since the arrayof versions are the same\n@@ -2343,0 +2376,1 @@\n+    StubRoutines::_jlong_disjoint_arraycopy_nopush = StubRoutines::_arrayof_jlong_disjoint_arraycopy_nopush;\n@@ -2347,1 +2381,3 @@\n-      = generate_disjoint_copy(StubId::stubgen_arrayof_oop_disjoint_arraycopy_id, &entry);\n+      = generate_disjoint_copy(StubId::stubgen_arrayof_oop_disjoint_arraycopy_id, &nopush_entry);\n+      \/\/ disjoint arrayof nopush entry is needed by conjoint copy\n+    StubRoutines::_arrayof_oop_disjoint_arraycopy_nopush = nopush_entry;\n@@ -2349,1 +2385,3 @@\n-      = generate_conjoint_copy(StubId::stubgen_arrayof_oop_arraycopy_id, entry, &entry_oop_arraycopy);\n+      = generate_conjoint_copy(StubId::stubgen_arrayof_oop_arraycopy_id, StubRoutines::_arrayof_oop_disjoint_arraycopy_nopush, &nopush_entry);\n+    \/\/ conjoint arrayof nopush entry is needed by generic\/unsafe copy\n+    StubRoutines::_oop_arraycopy_nopush = nopush_entry;\n@@ -2352,1 +2390,6 @@\n-      = generate_disjoint_copy(StubId::stubgen_arrayof_oop_disjoint_arraycopy_uninit_id, &entry);\n+      = generate_disjoint_copy(StubId::stubgen_arrayof_oop_disjoint_arraycopy_uninit_id, &nopush_entry);\n+    \/\/ disjoint arrayof+uninit nopush entry is needed by conjoint copy\n+    StubRoutines::_arrayof_oop_disjoint_arraycopy_uninit_nopush = nopush_entry;\n+\n+    \/\/ note that we don't need a returned nopush entry because the\n+    \/\/ generic\/unsafe copy does not cater for uninit arrays.\n@@ -2354,1 +2397,1 @@\n-      = generate_conjoint_copy(StubId::stubgen_arrayof_oop_arraycopy_uninit_id, entry, nullptr);\n+      = generate_conjoint_copy(StubId::stubgen_arrayof_oop_arraycopy_uninit_id, StubRoutines::_arrayof_oop_disjoint_arraycopy_uninit_nopush, nullptr);\n@@ -2356,0 +2399,1 @@\n+    \/\/ for oop copies reuse arrayof entries for non-arrayof cases\n@@ -2357,0 +2401,1 @@\n+    StubRoutines::_oop_disjoint_arraycopy_nopush = StubRoutines::_arrayof_oop_disjoint_arraycopy_nopush;\n@@ -2359,0 +2404,1 @@\n+    StubRoutines::_oop_disjoint_arraycopy_uninit_nopush = StubRoutines::_arrayof_oop_disjoint_arraycopy_uninit_nopush;\n@@ -2361,1 +2407,5 @@\n-    StubRoutines::_checkcast_arraycopy        = generate_checkcast_copy(StubId::stubgen_checkcast_arraycopy_id, &entry_checkcast_arraycopy);\n+    StubRoutines::_checkcast_arraycopy        = generate_checkcast_copy(StubId::stubgen_checkcast_arraycopy_id, &nopush_entry);\n+    \/\/ checkcast nopush entry is needed by generic copy\n+    StubRoutines::_checkcast_arraycopy_nopush = nopush_entry;\n+    \/\/ note that we don't need a returned nopush entry because the\n+    \/\/ generic copy does not cater for uninit arrays.\n@@ -2365,4 +2415,5 @@\n-    StubRoutines::_unsafe_arraycopy    = generate_unsafe_copy(entry_jbyte_arraycopy,\n-                                                              entry_jshort_arraycopy,\n-                                                              entry_jint_arraycopy,\n-                                                              entry_jlong_arraycopy);\n+    \/\/ unsafe arraycopy may fallback on conjoint stubs\n+    StubRoutines::_unsafe_arraycopy    = generate_unsafe_copy(StubRoutines::_jbyte_arraycopy_nopush,\n+                                                              StubRoutines::_jshort_arraycopy_nopush,\n+                                                              StubRoutines::_jint_arraycopy_nopush,\n+                                                              StubRoutines::_jlong_arraycopy_nopush);\n@@ -2370,6 +2421,7 @@\n-    StubRoutines::_generic_arraycopy   = generate_generic_copy(entry_jbyte_arraycopy,\n-                                                               entry_jshort_arraycopy,\n-                                                               entry_jint_arraycopy,\n-                                                               entry_oop_arraycopy,\n-                                                               entry_jlong_arraycopy,\n-                                                               entry_checkcast_arraycopy);\n+    \/\/ generic arraycopy may fallback on conjoint stubs\n+    StubRoutines::_generic_arraycopy   = generate_generic_copy(StubRoutines::_jbyte_arraycopy_nopush,\n+                                                               StubRoutines::_jshort_arraycopy_nopush,\n+                                                               StubRoutines::_jint_arraycopy_nopush,\n+                                                               StubRoutines::_oop_arraycopy_nopush,\n+                                                               StubRoutines::_jlong_arraycopy_nopush,\n+                                                               StubRoutines::_checkcast_arraycopy_nopush);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":114,"deletions":62,"binary":false,"changes":176,"status":"modified"},{"patch":"@@ -79,7 +79,43 @@\n-  address entry;\n-  address entry_jbyte_arraycopy;\n-  address entry_jshort_arraycopy;\n-  address entry_jint_arraycopy;\n-  address entry_oop_arraycopy;\n-  address entry_jlong_arraycopy;\n-  address entry_checkcast_arraycopy;\n+  \/\/ Some copy stubs publish a normal entry and then a 2nd 'fallback'\n+  \/\/ entry immediately following their stack push. This can be used\n+  \/\/ as a post-push branch target for compatible stubs when they\n+  \/\/ identify a special case that can be handled by the fallback\n+  \/\/ stub e.g a disjoint copy stub may be use as a special case\n+  \/\/ fallback for its compatible conjoint copy stub.\n+  \/\/\n+  \/\/ A no push entry is always returned in the following local and\n+  \/\/ then published by assigning to the appropriate entry field in\n+  \/\/ class StubRoutines. The entry value is then passed to the\n+  \/\/ generator for the compatible stub. That means the entry must be\n+  \/\/ listed when saving to\/restoring from the AOT cache, ensuring\n+  \/\/ that the inter-stub jumps are noted at AOT-cache save and\n+  \/\/ relocated at AOT cache load.\n+  address nopush_entry;\n+\n+  StubRoutines::_jbyte_disjoint_arraycopy  = generate_disjoint_byte_copy(&nopush_entry);\n+  \/\/ disjoint nopush entry is needed by conjoint copy\n+  StubRoutines::_jbyte_disjoint_arraycopy_nopush  = nopush_entry;\n+  StubRoutines::_jbyte_arraycopy           = generate_conjoint_byte_copy(StubRoutines::_jbyte_disjoint_arraycopy_nopush, &nopush_entry);\n+  \/\/ conjoint nopush entry is needed by generic\/unsafe copy\n+  StubRoutines::_jbyte_arraycopy_nopush    = nopush_entry;\n+\n+  StubRoutines::_jshort_disjoint_arraycopy = generate_disjoint_short_copy(&nopush_entry);\n+  \/\/ disjoint nopush entry is needed by conjoint copy\n+  StubRoutines::_jshort_disjoint_arraycopy_nopush = nopush_entry;\n+  StubRoutines::_jshort_arraycopy          = generate_conjoint_short_copy(StubRoutines::_jshort_disjoint_arraycopy_nopush, &nopush_entry);\n+  \/\/ conjoint nopush entry is needed by generic\/unsafe copy\n+  StubRoutines::_jshort_arraycopy_nopush   = nopush_entry;\n+\n+  StubRoutines::_jint_disjoint_arraycopy   = generate_disjoint_int_oop_copy(StubId::stubgen_jint_disjoint_arraycopy_id, &nopush_entry);\n+  \/\/ disjoint nopush entry is needed by conjoint copy\n+  StubRoutines::_jint_disjoint_arraycopy_nopush = nopush_entry;\n+  StubRoutines::_jint_arraycopy            = generate_conjoint_int_oop_copy(StubId::stubgen_jint_arraycopy_id, StubRoutines::_jint_disjoint_arraycopy_nopush, &nopush_entry);\n+  \/\/ conjoint nopush entry is needed by generic\/unsafe copy\n+  StubRoutines::_jint_arraycopy_nopush     = nopush_entry;\n+\n+  StubRoutines::_jlong_disjoint_arraycopy  = generate_disjoint_long_oop_copy(StubId::stubgen_jlong_disjoint_arraycopy_id, &nopush_entry);\n+  \/\/ disjoint nopush entry is needed by conjoint copy\n+  StubRoutines::_jlong_disjoint_arraycopy_nopush  = nopush_entry;\n+  StubRoutines::_jlong_arraycopy           = generate_conjoint_long_oop_copy(StubId::stubgen_jlong_arraycopy_id, StubRoutines::_jlong_disjoint_arraycopy_nopush, &nopush_entry);\n+  \/\/ conjoint nopush entry is needed by generic\/unsafe copy\n+  StubRoutines::_jlong_arraycopy_nopush    = nopush_entry;\n@@ -87,11 +123,0 @@\n-  StubRoutines::_jbyte_disjoint_arraycopy  = generate_disjoint_byte_copy(&entry);\n-  StubRoutines::_jbyte_arraycopy           = generate_conjoint_byte_copy(entry, &entry_jbyte_arraycopy);\n-\n-  StubRoutines::_jshort_disjoint_arraycopy = generate_disjoint_short_copy(&entry);\n-  StubRoutines::_jshort_arraycopy          = generate_conjoint_short_copy(entry, &entry_jshort_arraycopy);\n-\n-  StubRoutines::_jint_disjoint_arraycopy   = generate_disjoint_int_oop_copy(StubId::stubgen_jint_disjoint_arraycopy_id, &entry);\n-  StubRoutines::_jint_arraycopy            = generate_conjoint_int_oop_copy(StubId::stubgen_jint_arraycopy_id, entry, &entry_jint_arraycopy);\n-\n-  StubRoutines::_jlong_disjoint_arraycopy  = generate_disjoint_long_oop_copy(StubId::stubgen_jlong_disjoint_arraycopy_id, &entry);\n-  StubRoutines::_jlong_arraycopy           = generate_conjoint_long_oop_copy(StubId::stubgen_jlong_arraycopy_id, entry, &entry_jlong_arraycopy);\n@@ -99,4 +124,12 @@\n-    StubRoutines::_oop_disjoint_arraycopy  = generate_disjoint_int_oop_copy(StubId::stubgen_oop_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_oop_arraycopy           = generate_conjoint_int_oop_copy(StubId::stubgen_oop_arraycopy_id, entry, &entry_oop_arraycopy);\n-    StubRoutines::_oop_disjoint_arraycopy_uninit  = generate_disjoint_int_oop_copy(StubId::stubgen_oop_disjoint_arraycopy_uninit_id, &entry);\n-    StubRoutines::_oop_arraycopy_uninit           = generate_conjoint_int_oop_copy(StubId::stubgen_oop_arraycopy_uninit_id, entry, nullptr);\n+    StubRoutines::_oop_disjoint_arraycopy  = generate_disjoint_int_oop_copy(StubId::stubgen_oop_disjoint_arraycopy_id, &nopush_entry);\n+    \/\/ disjoint nopush entry is needed by conjoint copy\n+    StubRoutines::_oop_disjoint_arraycopy_nopush  = nopush_entry;\n+    StubRoutines::_oop_arraycopy           = generate_conjoint_int_oop_copy(StubId::stubgen_oop_arraycopy_id, StubRoutines::_oop_disjoint_arraycopy_nopush, &nopush_entry);\n+    \/\/ conjoint nopush entry is needed by generic\/unsafe copy\n+    StubRoutines::_oop_arraycopy_nopush    = nopush_entry;\n+    StubRoutines::_oop_disjoint_arraycopy_uninit  = generate_disjoint_int_oop_copy(StubId::stubgen_oop_disjoint_arraycopy_uninit_id, &nopush_entry);\n+    \/\/ disjoint nopush entry is needed by conjoint copy\n+    StubRoutines::_oop_disjoint_arraycopy_uninit_nopush  = nopush_entry;\n+    \/\/ note that we don't need a returned nopush entry because the\n+    \/\/ generic\/unsafe copy does not cater for uninit arrays.\n+    StubRoutines::_oop_arraycopy_uninit           = generate_conjoint_int_oop_copy(StubId::stubgen_oop_arraycopy_uninit_id, StubRoutines::_oop_disjoint_arraycopy_uninit_nopush, nullptr);\n@@ -104,4 +137,12 @@\n-    StubRoutines::_oop_disjoint_arraycopy  = generate_disjoint_long_oop_copy(StubId::stubgen_oop_disjoint_arraycopy_id, &entry);\n-    StubRoutines::_oop_arraycopy           = generate_conjoint_long_oop_copy(StubId::stubgen_oop_arraycopy_id, entry, &entry_oop_arraycopy);\n-    StubRoutines::_oop_disjoint_arraycopy_uninit  = generate_disjoint_long_oop_copy(StubId::stubgen_oop_disjoint_arraycopy_uninit_id, &entry);\n-    StubRoutines::_oop_arraycopy_uninit           = generate_conjoint_long_oop_copy(StubId::stubgen_oop_arraycopy_uninit_id, entry, nullptr);\n+    StubRoutines::_oop_disjoint_arraycopy  = generate_disjoint_long_oop_copy(StubId::stubgen_oop_disjoint_arraycopy_id, &nopush_entry);\n+    \/\/ disjoint nopush entry is needed by conjoint copy\n+    StubRoutines::_oop_disjoint_arraycopy_nopush  = nopush_entry;\n+    StubRoutines::_oop_arraycopy           = generate_conjoint_long_oop_copy(StubId::stubgen_oop_arraycopy_id, StubRoutines::_oop_disjoint_arraycopy_nopush, &nopush_entry);\n+    \/\/ conjoint nopush entry is needed by generic\/unsafe copy\n+    StubRoutines::_oop_arraycopy_nopush    = nopush_entry;\n+    StubRoutines::_oop_disjoint_arraycopy_uninit  = generate_disjoint_long_oop_copy(StubId::stubgen_oop_disjoint_arraycopy_uninit_id, &nopush_entry);\n+    \/\/ disjoint nopush entry is needed by conjoint copy\n+    StubRoutines::_oop_disjoint_arraycopy_uninit_nopush  = nopush_entry;\n+    \/\/ note that we don't need a returned nopush entry because the\n+    \/\/ generic\/unsafe copy does not cater for uninit arrays.\n+    StubRoutines::_oop_arraycopy_uninit           = generate_conjoint_long_oop_copy(StubId::stubgen_oop_arraycopy_uninit_id, StubRoutines::_oop_disjoint_arraycopy_uninit_nopush, nullptr);\n@@ -110,1 +151,5 @@\n-  StubRoutines::_checkcast_arraycopy        = generate_checkcast_copy(StubId::stubgen_checkcast_arraycopy_id, &entry_checkcast_arraycopy);\n+  StubRoutines::_checkcast_arraycopy        = generate_checkcast_copy(StubId::stubgen_checkcast_arraycopy_id, &nopush_entry);\n+  \/\/ checkcast nopush entry is needed by generic copy\n+  StubRoutines::_checkcast_arraycopy_nopush = nopush_entry;\n+  \/\/ note that we don't need a returned nopush entry because the\n+  \/\/ generic copy does not cater for uninit arrays.\n@@ -113,10 +158,10 @@\n-  StubRoutines::_unsafe_arraycopy    = generate_unsafe_copy(entry_jbyte_arraycopy,\n-                                                            entry_jshort_arraycopy,\n-                                                            entry_jint_arraycopy,\n-                                                            entry_jlong_arraycopy);\n-  StubRoutines::_generic_arraycopy   = generate_generic_copy(entry_jbyte_arraycopy,\n-                                                             entry_jshort_arraycopy,\n-                                                             entry_jint_arraycopy,\n-                                                             entry_oop_arraycopy,\n-                                                             entry_jlong_arraycopy,\n-                                                             entry_checkcast_arraycopy);\n+  StubRoutines::_unsafe_arraycopy    = generate_unsafe_copy(StubRoutines::_jbyte_arraycopy_nopush,\n+                                                            StubRoutines::_jshort_arraycopy_nopush,\n+                                                            StubRoutines::_jint_arraycopy_nopush,\n+                                                            StubRoutines::_jlong_arraycopy_nopush);\n+  StubRoutines::_generic_arraycopy   = generate_generic_copy(StubRoutines::_jbyte_arraycopy_nopush,\n+                                                             StubRoutines::_jshort_arraycopy_nopush,\n+                                                             StubRoutines::_jint_arraycopy_nopush,\n+                                                             StubRoutines::_oop_arraycopy_nopush,\n+                                                             StubRoutines::_jlong_arraycopy_nopush,\n+                                                             StubRoutines::_checkcast_arraycopy_nopush);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_arraycopy.cpp","additions":82,"deletions":37,"binary":false,"changes":119,"status":"modified"},{"patch":"@@ -894,0 +894,2 @@\n+  do_entry(final, jbyte_arraycopy, jbyte_arraycopy_nopush,              \\\n+            jbyte_arraycopy_nopush)                                     \\\n@@ -897,0 +899,2 @@\n+  do_entry(final, jshort_arraycopy, jshort_arraycopy_nopush,            \\\n+            jshort_arraycopy_nopush)                                    \\\n@@ -900,0 +904,2 @@\n+  do_entry(final, jint_arraycopy, jint_arraycopy_nopush,                \\\n+            jint_arraycopy_nopush)                                      \\\n@@ -903,0 +909,2 @@\n+  do_entry(final, jlong_arraycopy, jlong_arraycopy_nopush,              \\\n+            jlong_arraycopy_nopush)                                     \\\n@@ -906,0 +914,2 @@\n+  do_entry(final, oop_arraycopy, oop_arraycopy_nopush,                  \\\n+            oop_arraycopy_nopush)                                       \\\n@@ -914,0 +924,3 @@\n+  do_entry(final, jbyte_disjoint_arraycopy,                             \\\n+           jbyte_disjoint_arraycopy_nopush,                             \\\n+           jbyte_disjoint_arraycopy_nopush)                             \\\n@@ -918,0 +931,3 @@\n+  do_entry(final, jshort_disjoint_arraycopy,                            \\\n+           jshort_disjoint_arraycopy_nopush,                            \\\n+           jshort_disjoint_arraycopy_nopush)                            \\\n@@ -922,0 +938,3 @@\n+  do_entry(final, jint_disjoint_arraycopy,                              \\\n+           jint_disjoint_arraycopy_nopush,                              \\\n+           jint_disjoint_arraycopy_nopush)                              \\\n@@ -926,0 +945,3 @@\n+  do_entry(final, jlong_disjoint_arraycopy,                             \\\n+           jlong_disjoint_arraycopy_nopush,                             \\\n+           jlong_disjoint_arraycopy_nopush)                             \\\n@@ -929,0 +951,3 @@\n+  do_entry(final, oop_disjoint_arraycopy,                               \\\n+           oop_disjoint_arraycopy_nopush,                               \\\n+           oop_disjoint_arraycopy_nopush)                               \\\n@@ -934,0 +959,3 @@\n+  do_entry(final, oop_disjoint_arraycopy_uninit,                        \\\n+           oop_disjoint_arraycopy_uninit_nopush,                        \\\n+           oop_disjoint_arraycopy_uninit_nopush)                        \\\n@@ -963,0 +991,3 @@\n+  do_entry(final, arrayof_jbyte_disjoint_arraycopy,                     \\\n+           arrayof_jbyte_disjoint_arraycopy_nopush,                     \\\n+           arrayof_jbyte_disjoint_arraycopy_nopush)                     \\\n@@ -968,0 +999,3 @@\n+  do_entry(final, arrayof_jshort_disjoint_arraycopy,                    \\\n+           arrayof_jshort_disjoint_arraycopy_nopush,                    \\\n+           arrayof_jshort_disjoint_arraycopy_nopush)                    \\\n@@ -973,0 +1007,3 @@\n+  do_entry(final, arrayof_jint_disjoint_arraycopy,                      \\\n+           arrayof_jint_disjoint_arraycopy_nopush,                      \\\n+           arrayof_jint_disjoint_arraycopy_nopush)                      \\\n@@ -978,0 +1015,3 @@\n+  do_entry(final, arrayof_jlong_disjoint_arraycopy,                     \\\n+           arrayof_jlong_disjoint_arraycopy_nopush,                     \\\n+           arrayof_jlong_disjoint_arraycopy_nopush)                     \\\n@@ -983,0 +1023,3 @@\n+  do_entry(final, arrayof_oop_disjoint_arraycopy,                       \\\n+           arrayof_oop_disjoint_arraycopy_nopush,                       \\\n+           arrayof_oop_disjoint_arraycopy_nopush)                       \\\n@@ -988,0 +1031,3 @@\n+  do_entry(final, arrayof_oop_disjoint_arraycopy_uninit,                \\\n+           arrayof_oop_disjoint_arraycopy_uninit_nopush,                \\\n+           arrayof_oop_disjoint_arraycopy_uninit_nopush)                \\\n@@ -991,0 +1037,2 @@\n+  do_entry(final, checkcast_arraycopy, checkcast_arraycopy_nopush,      \\\n+            checkcast_arraycopy_nopush)                                 \\\n","filename":"src\/hotspot\/share\/runtime\/stubDeclarations.hpp","additions":48,"deletions":0,"binary":false,"changes":48,"status":"modified"}]}