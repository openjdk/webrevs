{"files":[{"patch":"@@ -612,0 +612,5 @@\n+    \/*\n+     * The record is used to pass the method along with the type where that method is visible.\n+     * Passing the type explicitly allows to preserve a complete type information, including\n+     * parameterization.\n+     *\/\n@@ -616,5 +621,0 @@\n-     * The record is used to pass the method along with the type where that method is visible.\n-     * Passing the type explicitly allows to preserve a complete type information, including\n-     * parameterization, which is otherwise unavailable without computation similar to what\n-     * this method does.\n-     *\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -157,2 +157,7 @@\n-    \/** Tables for direct and indirect superclasses. *\/\n-    private final List<VisibleMemberTable> allSuperclasses;\n+    \/**\n+     * Tables for direct and indirect superclasses.\n+     *\n+     * Tables for superclasses must be unique: no class can appear multiple\n+     * times in the inheritance hierarchy for some other class.\n+     *\/\n+    private final Set<VisibleMemberTable> allSuperclasses;\n@@ -161,1 +166,3 @@\n-     * Tables for superinterfaces might not be unique.\n+     *\n+     * Tables for superinterfaces might not be unique (i.e. an interface\n+     * may be added from different lineages).\n@@ -168,2 +175,0 @@\n-     * Tables for the superinterfaces might not be unique (i.e. an interface\n-     * may be added from different lineages).\n@@ -171,1 +176,1 @@\n-    private final List<VisibleMemberTable> parents;\n+    private final Set<VisibleMemberTable> parents;\n@@ -192,1 +197,1 @@\n-        allSuperclasses = new ArrayList<>();\n+        allSuperclasses = new LinkedHashSet<>();\n@@ -194,1 +199,1 @@\n-        parents = new ArrayList<>();\n+        parents = new LinkedHashSet<>();\n@@ -209,1 +214,1 @@\n-    private List<VisibleMemberTable> getAllSuperclasses() {\n+    private Set<VisibleMemberTable> getAllSuperclasses() {\n@@ -443,1 +448,2 @@\n-                parents.add(vmt);\n+                boolean added = parents.add(vmt);\n+                assert added; \/\/ no duplicates\n@@ -451,0 +457,1 @@\n+            assert Collections.disjoint(allSuperclasses, vmt.getAllSuperclasses()); \/\/ no duplicates\n@@ -454,1 +461,2 @@\n-            parents.add(vmt);\n+            boolean added = parents.add(vmt);\n+            assert added; \/\/ no duplicates\n@@ -1152,0 +1160,12 @@\n+\n+    @Override\n+    public int hashCode() {\n+        return te.hashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (!(obj instanceof VisibleMemberTable other))\n+            return false;\n+        return te.equals(other.te);\n+    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/VisibleMemberTable.java","additions":31,"deletions":11,"binary":false,"changes":42,"status":"modified"}]}