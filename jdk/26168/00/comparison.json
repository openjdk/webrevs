{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n- * ProcessBuilder.start and Runtime.exec.\n+ * {@code ProcessBuilder.start} and {@code Runtime.exec}.\n@@ -81,4 +81,0 @@\n- * <p>The process is not killed when there are no more references to\n- * the {@code Process} object, but rather the process\n- * continues executing asynchronously.\n- *\n@@ -101,0 +97,43 @@\n+ * <h2>Resource Usage<\/h2>\n+ * {@linkplain ProcessBuilder#start() Starting a process} uses resources in both the invoking process and the invoked\n+ * process and for the communication streams between them.\n+ * The resources to control the process and for communication between the processes are retained\n+ * until there are no longer any references to the Process or the input, error, and output streams\n+ * or readers, or they have been closed.\n+ *\n+ * <p>The process is not killed when there are no more references to the {@code Process} object,\n+ * but rather the process continues executing asynchronously.\n+ * The process implementation closes file descriptors and handles for streams\n+ * that are no longer referenced to prevent leaking operating system resources.\n+ * Processes that have terminated or been terminated are monitored and their resources released.\n+ *\n+ * <p>Streams should be {@code closed} when they are no longer needed, to avoid delaying\n+ * releasing the operating system resources.\n+ * {@code Try-with-resources} can be used to open and close the streams.\n+ * <p>For example, to capture the output of a program known to produce some output and then exit:\n+ * {@snippet lang = \"java\" :\n+ * List<String> capture(List<String> args) throws Exception {\n+ *     ProcessBuilder pb = new ProcessBuilder(args);\n+ *     Process process = pb.start();\n+ *     try (BufferedReader in = process.inputReader()) {\n+ *         List<String> captured = in.readAllLines();\n+ *         int status = process.waitFor();\n+ *         if (status != 0) {\n+ *             throw new RuntimeException(\"Process %d: %s failed with %d\"\n+ *                         .formatted(process.pid(), args, status));\n+ *         }\n+ *         return captured;\n+ *     }\n+ * }\n+ * }\n+ * <p>Stream resources (file descriptor or handle) are always paired; one in the invoking process\n+ * and the other end of that connection in the invoked process.\n+ * Closing a stream at either end terminates communication but does not have any direct effect\n+ * on the other Process. The closing of the stream typically results in the other process exiting.\n+ *\n+ * <p> {@linkplain #destroy Destroying a process} signals the operating system to terminate the process.\n+ * It is up to the operating system to clean up and release the resources of that process.\n+ * Typically, file descriptors and handles are closed. When they are closed, any connections to\n+ * other processes are terminated and file descriptors and handles in the invoking process signal\n+ * end-of-file or closed. Usually, that is seen as an end-of-file or an exception.\n+ *\n@@ -130,0 +169,3 @@\n+     * <p>The output stream should be {@linkplain OutputStream#close closed}\n+     * when it is no longer needed.\n+     *\n@@ -162,0 +204,3 @@\n+     * <p>The input stream should be {@linkplain InputStream#close closed}\n+     * when it is no longer needed.\n+     *\n@@ -163,2 +208,5 @@\n-     * Use {@link #getInputStream()} and {@link #inputReader()} with extreme care.\n-     * The {@code BufferedReader} may have buffered input from the input stream.\n+     * Use either this method or an {@linkplain #inputReader() input reader}\n+     * but not both on the same {@code Process}.\n+     * The input reader consumes and buffers bytes from the input stream.\n+     * Bytes read from the input stream would not be seen by the reader and\n+     * buffer contents are unpredictable.\n@@ -188,0 +236,3 @@\n+     * <p>The error stream should be {@linkplain InputStream#close closed}\n+     * when it is no longer needed.\n+     *\n@@ -189,2 +240,5 @@\n-     * Use {@link #getErrorStream()} and {@link #errorReader()} with extreme care.\n-     * The {@code BufferedReader} may have buffered input from the error stream.\n+     * Use either this method or an {@linkplain #errorReader() error reader}\n+     * but not both on the same {@code Process}.\n+     * The error reader consumes and buffers bytes from the error stream.\n+     * Bytes read from the error stream would not be seen by the reader and the\n+     * buffer contents are unpredictable.\n@@ -211,0 +265,10 @@\n+     * <p>The reader should be {@linkplain BufferedReader#close closed}\n+     * when it is no longer needed.\n+     *\n+     * @apiNote\n+     * Use either this method or the {@linkplain #getInputStream input stream}\n+     * but not both on the same {@code Process}.\n+     * The input reader consumes and buffers bytes from the input stream.\n+     * Bytes read from the input stream would not be seen by the reader and the\n+     * buffer contents are unpredictable.\n+     *\n@@ -241,0 +305,3 @@\n+     * <p>The reader should be {@linkplain BufferedReader#close closed}\n+     * when it is no longer needed.\n+     *\n@@ -248,3 +315,5 @@\n-     * Using both {@link #getInputStream} and {@link #inputReader(Charset)} has\n-     * unpredictable behavior since the buffered reader reads ahead from the\n-     * input stream.\n+     * Use either this method or the {@linkplain #getInputStream input stream}\n+     * but not both on the same {@code Process}.\n+     * The input reader consumes and buffers bytes from the input stream.\n+     * Bytes read from the input stream would not be seen by the reader and the\n+     * buffer contents are unpredictable.\n@@ -286,0 +355,10 @@\n+     * <p>The error reader should be {@linkplain BufferedReader#close closed}\n+     * when it is no longer needed.\n+     *\n+     * @apiNote\n+     * Use either this method or the {@linkplain #getErrorStream error stream}\n+     * but not both on the same {@code Process}.\n+     * The error reader consumes and buffers bytes from the error stream.\n+     * Bytes read from the error stream would not be seen by the reader and the\n+     * buffer contents are unpredictable.\n+     *\n@@ -317,0 +396,3 @@\n+     * <p>The error reader should be {@linkplain BufferedReader#close closed}\n+     * when it is no longer needed.\n+     *\n@@ -318,3 +400,5 @@\n-     * Using both {@link #getErrorStream} and {@link #errorReader(Charset)} has\n-     * unpredictable behavior since the buffered reader reads ahead from the\n-     * error stream.\n+     * Use either this method or the {@linkplain #getErrorStream error stream}\n+     * but not both on the same {@code Process}.\n+     * The error reader consumes and buffers bytes from the error stream.\n+     * Bytes read from the error stream would not be seen by the reader and the\n+     * buffer contents are unpredictable.\n@@ -349,1 +433,1 @@\n-     * Writes text to a character-output stream, buffering characters so as to provide\n+     * Writes text to a character-output stream, buffering characters to provide\n@@ -357,0 +441,3 @@\n+     * <p>The output writer should be {@linkplain BufferedWriter#close closed}\n+     * when it is no longer needed.\n+     *\n@@ -368,1 +455,1 @@\n-     * Writes text to a character-output stream, buffering characters so as to provide\n+     * Writes text to a character-output stream, buffering characters to provide\n@@ -386,0 +473,3 @@\n+     * <p>The output writer should be {@linkplain BufferedWriter#close closed}\n+     * when it is no longer needed.\n+     *\n@@ -677,5 +767,6 @@\n-     * <pre> {@code   Process p = new ProcessBuilder(\"cmp\", \"f1\", \"f2\").start();\n-     *    Future<Boolean> identical = p.onExit().thenApply(p1 -> p1.exitValue() == 0);\n-     *    ...\n-     *    if (identical.get()) { ... }\n-     * }<\/pre>\n+     * {@snippet lang = \"java\" :\n+     *     Process p = new ProcessBuilder(\"cmp\", \"f1\", \"f2\").start();\n+     *     Future<Boolean> identical = p.onExit().thenApply(p1 -> p1.exitValue() == 0);\n+     *     ...\n+     *     if (identical.get()) { ... }\n+     * }\n@@ -698,1 +789,1 @@\n-     * <pre>{@code\n+     * {@snippet lang = \"java\" :\n@@ -702,1 +793,1 @@\n-     * }<\/pre>\n+     * }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Process.java","additions":116,"deletions":25,"binary":false,"changes":141,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -153,1 +153,2 @@\n- * <pre> {@code\n+ * {@snippet lang = \"java\" :\n+\n@@ -155,1 +156,2 @@\n- * }<\/pre>\n+ * }\n+\n@@ -161,16 +163,17 @@\n- * <pre> {@code\n- * ProcessBuilder pb =\n- *   new ProcessBuilder(\"myCommand\", \"myArg1\", \"myArg2\");\n- * Map<String, String> env = pb.environment();\n- * env.put(\"VAR1\", \"myValue\");\n- * env.remove(\"OTHERVAR\");\n- * env.put(\"VAR2\", env.get(\"VAR1\") + \"suffix\");\n- * pb.directory(new File(\"myDir\"));\n- * File log = new File(\"log\");\n- * pb.redirectErrorStream(true);\n- * pb.redirectOutput(Redirect.appendTo(log));\n- * Process p = pb.start();\n- * assert pb.redirectInput() == Redirect.PIPE;\n- * assert pb.redirectOutput().file() == log;\n- * assert p.getInputStream().read() == -1;\n- * }<\/pre>\n+ * {@snippet lang = \"java\":\n+ *     ProcessBuilder pb = new ProcessBuilder(\"myCommand\", \"myArg1\", \"myArg2\");\n+ *     Map<String, String> env = pb.environment();\n+ *     env.put(\"VAR1\", \"myValue\");\n+ *     env.remove(\"OTHERVAR\");\n+ *     env.put(\"VAR2\", env.get(\"VAR1\") + \"suffix\");\n+ *\n+ *     pb.directory(new File(\"myDir\"));\n+ *     File log = new File(\"log\");\n+ *     pb.redirectErrorStream(true);\n+ *     pb.redirectOutput(Redirect.appendTo(log));\n+ *\n+ *     Process p = pb.start();\n+ *     assert pb.redirectInput() == Redirect.PIPE;\n+ *     assert pb.redirectOutput().file() == log;\n+ *     assert p.getInputStream().read() == -1;\n+ * }\n@@ -509,4 +512,4 @@\n-         *  <pre> {@code\n-         * Redirect.PIPE.file() == null &&\n-         * Redirect.PIPE.type() == Redirect.Type.PIPE\n-         * }<\/pre>\n+         * {@snippet lang = \"java\" :\n+         *     Redirect.PIPE.file() == null &&\n+         *     Redirect.PIPE.type() == Redirect.Type.PIPE\n+         * }\n@@ -524,4 +527,4 @@\n-         *  <pre> {@code\n-         * Redirect.INHERIT.file() == null &&\n-         * Redirect.INHERIT.type() == Redirect.Type.INHERIT\n-         * }<\/pre>\n+         * {@snippet lang = \"java\" :\n+         *     Redirect.INHERIT.file() == null &&\n+         *     Redirect.INHERIT.type() == Redirect.Type.INHERIT\n+         * }\n@@ -540,5 +543,4 @@\n-         * <pre> {@code\n-         * Redirect.DISCARD.file() is the filename appropriate for the operating system\n-         * and may be null &&\n-         * Redirect.DISCARD.type() == Redirect.Type.WRITE\n-         * }<\/pre>\n+         * {@snippet lang = \"java\" :\n+         *     Redirect.DISCARD.file() != null && \/\/ is the filename appropriate for the operating system\n+         *     Redirect.DISCARD.type() == Redirect.Type.WRITE;\n+         * }\n@@ -575,4 +577,4 @@\n-         *  <pre> {@code\n-         * Redirect.from(file).file() == file &&\n-         * Redirect.from(file).type() == Redirect.Type.READ\n-         * }<\/pre>\n+         * {@snippet lang = \"java\" :\n+         *     Redirect.from(file).file() == file &&\n+         *     Redirect.from(file).type() == Redirect.Type.READ\n+         * }\n@@ -601,4 +603,4 @@\n-         *  <pre> {@code\n-         * Redirect.to(file).file() == file &&\n-         * Redirect.to(file).type() == Redirect.Type.WRITE\n-         * }<\/pre>\n+         * {@snippet lang = \"java\" :\n+         *     Redirect.to(file).file() == file &&\n+         *     Redirect.to(file).type() == Redirect.Type.WRITE\n+         * }\n@@ -631,4 +633,4 @@\n-         *  <pre> {@code\n-         * Redirect.appendTo(file).file() == file &&\n-         * Redirect.appendTo(file).type() == Redirect.Type.APPEND\n-         * }<\/pre>\n+         * {@snippet lang = \"java\" :\n+         *     Redirect.appendTo(file).file() == file &&\n+         *     Redirect.appendTo(file).type() == Redirect.Type.APPEND\n+         * }\n@@ -917,3 +919,3 @@\n-     *  <pre> {@code\n-     * pb.inheritIO()\n-     * }<\/pre>\n+     * {@snippet lang = \"java\" :\n+     *      pb.inheritIO()\n+     * }\n@@ -921,5 +923,5 @@\n-     *  <pre> {@code\n-     * pb.redirectInput(Redirect.INHERIT)\n-     *   .redirectOutput(Redirect.INHERIT)\n-     *   .redirectError(Redirect.INHERIT)\n-     * }<\/pre>\n+     * {@snippet lang = \"java\" :\n+     *      pb.redirectInput(Redirect.INHERIT)\n+     *          .redirectOutput(Redirect.INHERIT)\n+     *          .redirectError(Redirect.INHERIT)\n+     * }\n@@ -1179,3 +1181,3 @@\n-     * <pre>{@code\n-     * String directory = \"\/home\/duke\/src\";\n-     * ProcessBuilder[] builders = {\n+     * {@snippet lang = \"java\" :\n+     *     String directory = \"\/home\/duke\/src\";\n+     *     ProcessBuilder[] builders = {\n@@ -1186,4 +1188,3 @@\n-     * List<Process> processes = ProcessBuilder.startPipeline(\n-     *         Arrays.asList(builders));\n-     * Process last = processes.get(processes.size()-1);\n-     * try (InputStream is = last.getInputStream();\n+     *     List<Process> processes = ProcessBuilder.startPipeline( Arrays.asList(builders));\n+     *     Process last = processes.get(processes.size() - 1);\n+     *     try (InputStream is = last.getInputStream();\n@@ -1192,1 +1193,2 @@\n-     *     long count = r.lines().count();\n+     *         long count = r.lines().count();\n+     *     }\n@@ -1194,1 +1196,0 @@\n-     * }<\/pre>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessBuilder.java","additions":62,"deletions":61,"binary":false,"changes":123,"status":"modified"}]}