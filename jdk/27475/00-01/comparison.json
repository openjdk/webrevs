{"files":[{"patch":"@@ -2509,0 +2509,3 @@\n+\n+        \/\/ Cloning reference fields. Other fields (e.g., \"positivePrefixPatterns\")\n+        \/\/ are not cloned since they are read-only constants after initialization.\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.text.DecimalFormatSymbols;\n@@ -34,1 +35,0 @@\n-import java.text.ParseException;\n@@ -43,0 +43,1 @@\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n@@ -58,5 +59,2 @@\n-                    try {\n-                        assertEquals(num, clone.parse(String.valueOf(num)).intValue());\n-                    } catch (ParseException pe) {\n-                        throw new RuntimeException(pe);\n-                    }\n+                    assertDoesNotThrow(() ->\n+                        assertEquals(num, clone.parse(String.valueOf(num)).intValue()));\n@@ -77,0 +75,2 @@\n+            Arguments.of(\"compactPatterns\", String[].class),\n+            Arguments.of(\"symbols\", DecimalFormatSymbols.class),\n@@ -87,1 +87,1 @@\n-        var original= NumberFormat.getCompactNumberInstance(Locale.US, NumberFormat.Style.SHORT);\n+        var original = NumberFormat.getCompactNumberInstance(Locale.US, NumberFormat.Style.SHORT);\n","filename":"test\/jdk\/java\/text\/Format\/CompactNumberFormat\/TestClone.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}