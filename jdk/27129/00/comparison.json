{"files":[{"patch":"@@ -164,18 +164,1 @@\n-            values = LintCategory.newEmptySet();\n-\n-            Source source = Source.instance(context);\n-            if (source.compareTo(Source.JDK9) >= 0) {\n-                values.add(LintCategory.DEP_ANN);\n-            }\n-            if (Source.Feature.REDUNDANT_STRICTFP.allowedInSource(source)) {\n-                values.add(LintCategory.STRICTFP);\n-            }\n-            values.add(LintCategory.REQUIRES_TRANSITIVE_AUTOMATIC);\n-            values.add(LintCategory.OPENS);\n-            values.add(LintCategory.MODULE);\n-            values.add(LintCategory.REMOVAL);\n-            if (!options.isSet(Option.PREVIEW)) {\n-                values.add(LintCategory.PREVIEW);\n-            }\n-            values.add(LintCategory.IDENTITY);\n-            values.add(LintCategory.INCUBATING);\n+            values = getDefaults();\n@@ -196,0 +179,17 @@\n+    \/\/ Obtain the set of on-by-default categories. Note that for a few categories,\n+    \/\/ whether the category is on-by-default depends on other compiler options.\n+    private EnumSet<LintCategory> getDefaults() {\n+        EnumSet<LintCategory> defaults = LintCategory.newEmptySet();\n+        Source source = Source.instance(context);\n+        Stream.of(LintCategory.values())\n+          .filter(lc ->\n+            switch (lc) {\n+                case DEP_ANN  -> source.compareTo(Source.JDK9) >= 0;\n+                case STRICTFP -> Source.Feature.REDUNDANT_STRICTFP.allowedInSource(source);\n+                case PREVIEW  -> !options.isSet(Option.PREVIEW);\n+                default       -> lc.enabledByDefault;\n+            })\n+          .forEach(defaults::add);\n+        return defaults;\n+    }\n+\n@@ -224,1 +224,1 @@\n-        CLASSFILE(\"classfile\", false),\n+        CLASSFILE(\"classfile\", false, false),\n@@ -241,1 +241,1 @@\n-        DEP_ANN(\"dep-ann\"),\n+        DEP_ANN(\"dep-ann\", true, true),\n@@ -271,1 +271,1 @@\n-        IDENTITY(\"identity\", true, \"synchronization\"),\n+        IDENTITY(\"identity\", true, true, \"synchronization\"),\n@@ -279,1 +279,1 @@\n-        INCUBATING(\"incubating\", false),\n+        INCUBATING(\"incubating\", false, true),\n@@ -294,1 +294,1 @@\n-        MODULE(\"module\"),\n+        MODULE(\"module\", true, true),\n@@ -299,1 +299,1 @@\n-        OPENS(\"opens\"),\n+        OPENS(\"opens\", true, true),\n@@ -307,1 +307,1 @@\n-        OPTIONS(\"options\", false),\n+        OPTIONS(\"options\", false, false),\n@@ -315,1 +315,1 @@\n-        OUTPUT_FILE_CLASH(\"output-file-clash\", false),\n+        OUTPUT_FILE_CLASH(\"output-file-clash\", false, false),\n@@ -333,1 +333,1 @@\n-        PATH(\"path\", false),\n+        PATH(\"path\", false, false),\n@@ -337,0 +337,3 @@\n+         *\n+         * <p>\n+         * This category is not supported by {@code @SuppressWarnings}.\n@@ -338,1 +341,1 @@\n-        PROCESSING(\"processing\"),\n+        PROCESSING(\"processing\", false, false),\n@@ -348,1 +351,1 @@\n-        REMOVAL(\"removal\"),\n+        REMOVAL(\"removal\", true, true),\n@@ -358,1 +361,1 @@\n-        REQUIRES_TRANSITIVE_AUTOMATIC(\"requires-transitive-automatic\"),\n+        REQUIRES_TRANSITIVE_AUTOMATIC(\"requires-transitive-automatic\", true, true),\n@@ -373,1 +376,1 @@\n-        STRICTFP(\"strictfp\"),\n+        STRICTFP(\"strictfp\", true, true),\n@@ -403,1 +406,1 @@\n-        PREVIEW(\"preview\"),\n+        PREVIEW(\"preview\", true, true),\n@@ -411,1 +414,1 @@\n-            this(option, true);\n+            this(option, true, false);\n@@ -414,1 +417,1 @@\n-        LintCategory(String option, boolean annotationSuppression, String... aliases) {\n+        LintCategory(String option, boolean annotationSuppression, boolean enabledByDefault, String... aliases) {\n@@ -417,0 +420,1 @@\n+            this.enabledByDefault = enabledByDefault;\n@@ -453,0 +457,6 @@\n+\n+        \/**\n+         * Is this category included in the default set of enabled lint categories?\n+         * Note that for some categories, command line options can alter this at runtime.\n+         *\/\n+        public final boolean enabledByDefault;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":44,"deletions":34,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.util.List;\n@@ -46,0 +47,1 @@\n+import java.util.TreeMap;\n@@ -487,1 +489,1 @@\n-        private final String LINT_KEY_FORMAT = SMALL_INDENT + SMALL_INDENT + \"%-\" +\n+        private final String LINT_KEY_FORMAT = SMALL_INDENT + \" %c%-\" +\n@@ -495,0 +497,1 @@\n+                                            ' ',\n@@ -497,4 +500,11 @@\n-            LintCategory.options().forEach(ident -> log.printRawLines(WriterKind.STDOUT,\n-                              String.format(LINT_KEY_FORMAT,\n-                                            ident,\n-                                            log.localize(PrefixKind.JAVAC, \"opt.Xlint.desc.\" + ident))));\n+            TreeMap<String, String> keyDescMap = new TreeMap<>();       \/\/ alphabetize categories and aliases together\n+            Stream.of(LintCategory.values()).forEach(lc ->\n+              lc.optionList.stream()\n+                .forEach(key -> keyDescMap.put(key,\n+                  String.format(LINT_KEY_FORMAT,\n+                                lc.enabledByDefault ? '*' : ' ',\n+                                key,\n+                                key.equals(lc.option) ?\n+                                  log.localize(PrefixKind.JAVAC, \"opt.Xlint.desc.\" + key) :\n+                                  log.localize(PrefixKind.JAVAC, \"opt.Xlint.alias.of\", lc.option, key)))));\n+            keyDescMap.values().forEach(desc -> log.printRawLines(WriterKind.STDOUT, desc));\n@@ -503,0 +513,1 @@\n+                                            ' ',\n@@ -505,0 +516,3 @@\n+            List<String> aliasExample = LintCategory.IDENTITY.optionList;\n+            log.printRawLines(WriterKind.STDOUT,\n+                              log.localize(PrefixKind.JAVAC, \"opt.help.lint.footer\", aliasExample.get(0), aliasExample.get(1)));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/Option.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -171,1 +171,2 @@\n-    Enable recommended warning categories\n+    Enable recommended lint warning categories. In this release, all\\n\\\n+    available lint warning categories are recommended.\n@@ -173,1 +174,1 @@\n-    Enable all warning categories\n+    Enable all lint warning categories\n@@ -175,1 +176,1 @@\n-    Disable all warning categories\n+    Disable all lint warning categories\n@@ -180,3 +181,4 @@\n-    Warning categories to enable or disable, separated by comma.\\n\\\n-    Precede a key by ''-'' to disable the specified warning.\\n\\\n-    Use --help-lint to see the supported keys.\n+    Lint warning categories to enable or disable, separated by comma.\\n\\\n+    Precede a key by ''-'' to disable the specified category. Use\\n\\\n+    ''--help-lint'' to show supported keys and which categories are\\n\\\n+    enabled by default.\n@@ -294,7 +296,0 @@\n-# L10N: do not localize: identity synchronization\n-javac.opt.Xlint.desc.synchronization=\\\n-    Warn about synchronization attempts on instances of value-based classes.\\n\\\n-\\                         This key is a deprecated alias for ''identity'', which has the same uses and\\n\\\n-\\                         effects. Users are encouraged to use the ''identity'' category for all future\\n\\\n-\\                         and existing uses of ''synchronization''.\n-\n@@ -304,0 +299,4 @@\n+javac.opt.Xlint.alias.of=\\\n+    Deprecated alias for ''{0}'' with an identical effect. Users are encouraged to use\\n\\\n+\\                         ''{0}'' instead of ''{1}'' for all current and future uses.\n+\n@@ -337,0 +336,4 @@\n+javac.opt.help.lint.footer=\\\n+    Lint categories marked with ''*'' are in the default set of enabled categories.\\n\\\n+    Categories and their aliases can be used interchangeably; for example, the flag\\n\\\n+    ''-Xlint:{0},{1}'' would be redundant.\n@@ -349,0 +352,1 @@\n+# L10N: do not localize: ''preview''\n@@ -350,1 +354,1 @@\n-    Enable preview language features.\\n\\\n+    Enable preview language features. Also disables the ''preview'' lint category.\\n\\\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/javac.properties","additions":18,"deletions":14,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -144,1 +144,2 @@\n- * strings that can be used with {@code @SuppressWarnings}.\n+ * strings that are recognized by <em>javac<\/em> in {@code @SuppressWarnings}\n+ * annotations. Unrecognized strings are ignored.\n@@ -155,1 +156,0 @@\n- * <tr><th scope=\"row\">{@code classfile}            <td>issues related to classfile contents\n@@ -168,1 +168,0 @@\n- * <tr><th scope=\"row\">{@code incubating}           <td>use of incubating modules\n@@ -176,1 +175,0 @@\n- * <tr><th scope=\"row\">{@code path}                 <td>invalid path elements on the command line\n@@ -180,1 +178,0 @@\n- * <tr><th scope=\"row\">{@code restricted}           <td>use of restricted methods\n@@ -183,0 +180,1 @@\n+ * <tr><th scope=\"row\">{@code restricted}           <td>use of restricted methods\n@@ -190,5 +188,3 @@\n- * <tr><th scope=\"row\">{@code synchronization}      <td>synchronization attempts on instances of value-based classes;\n- *                                                      this key is a deprecated alias for {@code identity}, which has\n- *                                                      the same uses and effects. Users are encouraged to use the\n- *                                                      {@code identity} category for all future and existing uses of\n- *                                                      {@code synchronization}\n+ * <tr><th scope=\"row\">{@code synchronization}      <td>deprecated alias for {@code identity} with an identical effect.\n+ *                                                      Users are encouraged to use {@code identity} instead of\n+ *                                                      {@code synchronization} for all current and future uses.\n","filename":"src\/jdk.compiler\/share\/classes\/module-info.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -211,2 +211,2 @@\n-:   Enables preview language features. Used in conjunction with either\n-    [`-source`](#option-source) or [`--release`](#option-release).\n+:   Enables preview language features. Also disables the `preview` lint category.\n+    Used in conjunction with either [`-source`](#option-source) or [`--release`](#option-release).\n@@ -560,2 +560,2 @@\n-:   Enables all recommended warnings. In this release, enabling all available\n-    warnings is recommended.\n+:   Enables recommended lint warning categories. In this release, all available\n+    lint warning categories are recommended.\n@@ -564,1 +564,1 @@\n-:   Enables and\/or disables warning categories using the one or more of the keys described\n+:   Enables and\/or disables lint warning categories using the one or more of the keys described\n@@ -567,1 +567,1 @@\n-    by a hyphen (`-`).\n+    by a hyphen (`-`). Categories marked with * are enabled by default.\n@@ -585,1 +585,1 @@\n-    -   `dep-ann`: Warns about the items marked as deprecated in `javadoc` but\n+    -   *`dep-ann`: Warns about the items marked as deprecated in `javadoc` but\n@@ -599,1 +599,1 @@\n-    -   `identity`: Warns about use of a value-based class where an identity\n+    -   *`identity`: Warns about use of a value-based class where an identity\n@@ -602,1 +602,1 @@\n-    -   `incubating`: Warns about the use of incubating modules.\n+    -   *`incubating`: Warns about the use of incubating modules.\n@@ -610,1 +610,1 @@\n-    -   `module`: Warns about the module system-related issues.\n+    -   *`module`: Warns about the module system-related issues.\n@@ -612,1 +612,1 @@\n-    -   `opens`: Warns about the issues related to module opens.\n+    -   *`opens`: Warns about the issues related to module opens.\n@@ -626,1 +626,1 @@\n-    -   `preview`: Warns about the use of preview language features.\n+    -   *`preview`: Warns about the use of preview language features.\n@@ -632,1 +632,1 @@\n-    -   `removal`: Warns about the use of an API that has been marked for\n+    -   *`removal`: Warns about the use of an API that has been marked for\n@@ -640,1 +640,1 @@\n-    -   `requires-transitive-automatic`: Warns about automatic modules in\n+    -   *`requires-transitive-automatic`: Warns about automatic modules in\n@@ -649,1 +649,1 @@\n-    -   `strictfp`: Warns about unnecessary use of the `strictfp` modifier.\n+    -   *`strictfp`: Warns about unnecessary use of the `strictfp` modifier.\n@@ -651,4 +651,3 @@\n-    -   `synchronization`: Warns about synchronization attempts on instances\n-        of value-based classes. This key is a deprecated alias for `identity`,\n-        which has the same uses and effects. Users are encouraged to use the\n-        `identity` category for all future and existing uses of `synchronization`.\n+    -   *`synchronization`: Deprecated alias for `identity` with an identical\n+        effect. Users are encouraged to use `identity` instead of `synchronization`\n+        for all current and future uses.\n@@ -670,3 +669,4 @@\n-    With the exception of `all` and `none`, the keys can be used with\n-    the `@SuppressWarnings` annotation to suppress warnings in a part\n-    of the source code being compiled.\n+    The keys listed above may be used in `@SuppressWarnings` annotations to suppress\n+    warnings within the annotated declaration, with the exception of these keys:\n+    `all`, `none`, `classfile`, `incubating`, `options`, `output-file-clash`,\n+    `processing`, and `path`.\n","filename":"src\/jdk.compiler\/share\/man\/javac.md","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"}]}