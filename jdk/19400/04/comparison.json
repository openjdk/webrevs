{"files":[{"patch":"@@ -593,1 +593,13 @@\n-                outer = new ClassType(outer, sigToTypes('>'), t) {\n+                List<Type> actuals = sigToTypes('>');\n+                List<Type> formals = ((ClassType)t.type.tsym.type).typarams_field;\n+                if (formals != null) {\n+                    if (actuals.isEmpty())\n+                        actuals = formals;\n+                }\n+                \/* actualsCp is final as it will be captured by the inner class below. We could avoid defining\n+                 * this additional local variable and depend on field ClassType::typarams_field which `actuals` is\n+                 * assigned to but then we would have a dependendy on the internal representation of ClassType which\n+                 * could change in the future\n+                 *\/\n+                final List<Type> actualsCp = actuals;\n+                outer = new ClassType(outer, actuals, t) {\n@@ -624,1 +636,18 @@\n-                    };\n+\n+                        @Override\n+                        public List<Type> getTypeArguments() {\n+                            List<Type> formalsCp = ((ClassType)t.type.tsym.type).typarams_field;\n+                            if (formalsCp != null && !formalsCp.isEmpty()) {\n+                                if (actualsCp.length() == formalsCp.length()) {\n+                                    List<Type> a = actualsCp;\n+                                    List<Type> f = formalsCp;\n+                                    while (a.nonEmpty()) {\n+                                        a.head = a.head.withTypeVar(f.head);\n+                                        a = a.tail;\n+                                        f = f.tail;\n+                                    }\n+                                }\n+                            }\n+                            return super.getTypeArguments();\n+                        }\n+                };\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":31,"deletions":2,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -0,0 +1,194 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8332507\n+ * @summary compilation result depends on compilation order\n+ * @library \/tools\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.code\n+ *      jdk.compiler\/com.sun.tools.javac.util\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.file\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ *      jdk.jdeps\/com.sun.tools.classfile\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main WildcardBoundsNotReadFromClassFileTest\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import com.sun.tools.javac.code.Flags;\n+import com.sun.tools.javac.util.Assert;\n+import com.sun.tools.classfile.ClassFile;\n+\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+\n+public class WildcardBoundsNotReadFromClassFileTest extends TestRunner {\n+    ToolBox tb = new ToolBox();\n+\n+    public WildcardBoundsNotReadFromClassFileTest() {\n+        super(System.err);\n+    }\n+\n+    protected void runTests() throws Exception {\n+        runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    Path[] findJavaFiles(Path... paths) throws Exception {\n+        return tb.findJavaFiles(paths);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new WildcardBoundsNotReadFromClassFileTest().runTests();\n+    }\n+\n+    @Test\n+    public void testSeparateCompilation1(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                import java.util.List;\n+                public class A {\n+                    static void of(List<Attribute<?>> attributes) {}\n+                }\n+                class Attribute<T extends Attribute<T>> {}\n+                class A1 extends Attribute<A1> {}\n+                \"\"\");\n+        Path classes = base.resolve(\"classes\");\n+        tb.createDirectories(classes);\n+\n+        \/\/ let's compile A.java first\n+        new toolbox.JavacTask(tb)\n+                .outdir(classes)\n+                .files(findJavaFiles(src))\n+                .run()\n+                .writeAll();\n+\n+        \/\/ now class Test with the rest in the classpath\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                import java.util.List;\n+                import java.util.stream.*;\n+                public class Test {\n+                    void m(Stream<Attribute<?>> stream, boolean cond) {\n+                        A.of(stream.map(atr -> cond ? (A1) atr : atr).toList());\n+                    }\n+                }\n+                \"\"\");\n+        new toolbox.JavacTask(tb)\n+                .outdir(classes)\n+                .options(\"-cp\", classes.toString())\n+                .files(src.resolve(\"Test.java\"))\n+                .run()\n+                .writeAll();\n+    }\n+\n+    @Test\n+    public void testSeparateCompilation2(Path base) throws Exception {\n+        \/\/ this test uses nested classes\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                import java.util.List;\n+                public class A {\n+                    static void of(List<Attribute<?>> attributes) {}\n+                    public interface Attribute<A extends Attribute<A>> {\n+                        public static final class A1 implements Attribute<A1> {}\n+                    }\n+                }\n+                \"\"\");\n+        Path classes = base.resolve(\"classes\");\n+        tb.createDirectories(classes);\n+\n+        \/\/ let's compile A.java first\n+        new toolbox.JavacTask(tb)\n+                .outdir(classes)\n+                .files(findJavaFiles(src))\n+                .run()\n+                .writeAll();\n+\n+        \/\/ now class Test with the rest in the classpath\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                import java.util.List;\n+                import java.util.stream.*;\n+                public class Test {\n+                    void m(Stream<A.Attribute<?>> stream, boolean cond) {\n+                        A.of(stream.map(atr -> cond ? (A.Attribute.A1) atr : atr).toList());\n+                    }\n+                }\n+                \"\"\");\n+        new toolbox.JavacTask(tb)\n+                .outdir(classes)\n+                .options(\"-cp\", classes.toString())\n+                .files(src.resolve(\"Test.java\"))\n+                .run()\n+                .writeAll();\n+    }\n+\n+    @Test\n+    public void testSeparateCompilation3(Path base) throws Exception {\n+        \/\/ this test uses nested classes too\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                import java.util.Map;\n+                abstract class A {\n+                    interface I<X extends String> {}\n+                    abstract void f(Map<String, I<?>> i);\n+                }\n+                \"\"\");\n+        Path classes = base.resolve(\"classes\");\n+        tb.createDirectories(classes);\n+\n+        \/\/ let's compile A.java first\n+        new toolbox.JavacTask(tb)\n+                .outdir(classes)\n+                .files(findJavaFiles(src))\n+                .run()\n+                .writeAll();\n+\n+        \/\/ now class B with the rest in the classpath\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                import java.util.Map;\n+                public class B {\n+                    void f(A a, Map<String, A.I<? extends String>> x) {\n+                        a.f(x);\n+                    }\n+                }\n+                \"\"\");\n+        new toolbox.JavacTask(tb)\n+                .outdir(classes)\n+                .options(\"-cp\", classes.toString())\n+                .files(src.resolve(\"B.java\"))\n+                .run()\n+                .writeAll();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/generics\/wildcards\/separate_compilation\/WildcardBoundsNotReadFromClassFileTest.java","additions":194,"deletions":0,"binary":false,"changes":194,"status":"added"}]}