{"files":[{"patch":"@@ -957,0 +957,1 @@\n+     *\n@@ -964,1 +965,58 @@\n-        return new AWTEventMulticaster(a, b);\n+        AWTEventMulticaster n = new AWTEventMulticaster(a, b);\n+        if (!needsRebalance(n))\n+            return n;\n+\n+        EventListener[] array = getListeners(n, EventListener.class);\n+        return rebalance(array, 0, array.length - 1);\n+    }\n+\n+    \/**\n+     * Return true if the argument represents a binary tree that needs to be rebalanced.\n+     * <p>\n+     * The criteria for when we need a rebalance is subjective. For now this method\n+     * checks up to 500 of the topmost nodes of a AWTEventMulticaster. If they all include\n+     * one leaf node, then this method returns true. This criteria will be met after\n+     * 500 iterations of {@link #addInternal(EventListener, EventListener)}.\n+     *\/\n+    private static boolean needsRebalance(AWTEventMulticaster l) {\n+        int level = 0;\n+        while (true) {\n+            if (++level > 500) {\n+                return true;\n+            }\n+            if (l.a instanceof AWTEventMulticaster aMulti) {\n+                if (l.b instanceof AWTEventMulticaster) {\n+                    \/\/ we reached a node where both children are AWTEventMulticaster: let's assume\n+                    \/\/ the current node marks the start of a well-balanced subtree\n+                    return false;\n+                }\n+                l = aMulti;\n+            } else if (l.b instanceof AWTEventMulticaster bMulti) {\n+                l = bMulti;\n+            } else {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Recursively create a balanced tree that includes a given range of EventListeners.\n+     *\n+     * @param array the array of the EventListeners to consult\n+     * @param index0 the lowest index (inclusive) that the return value must include\n+     * @param index1 the highest index (inclusive) that the return value must include.\n+     *\n+     * @return a balanced tree. If index0 equals index1 then this returns an EventListener from\n+     * the array provided. Otherwise this returns an AWTEventMulticaster.\n+     *\/\n+    private static EventListener rebalance(EventListener[] array, int index0, int index1) {\n+        if (index0 == index1) {\n+            return array[index0];\n+        }\n+        if (index0 == index1 - 1) {\n+            return new AWTEventMulticaster(array[index0], array[index1]);\n+        }\n+        int mid = (index0 + index1)\/2;\n+        return new AWTEventMulticaster(\n+                rebalance(array, index0, mid),\n+                rebalance(array, mid + 1, index1));\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/AWTEventMulticaster.java","additions":59,"deletions":1,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\n+import java.awt.event.*;\n+import java.awt.*;\n+\n+\/*\n+ * @test\n+ * @bug 8342782\n+ * @summary Tests large AWTEventMulticasters for StackOverflowErrors\n+ * @run main LargeAWTEventMulticasterTest\n+ *\/\n+public class LargeAWTEventMulticasterTest {\n+\n+    \/**\n+     * This is an empty ActionListener that also has a numeric index.\n+     *\/\n+    static class IndexedActionListener implements ActionListener {\n+        private final int index;\n+\n+        public IndexedActionListener(int index) {\n+            this.index = index;\n+        }\n+\n+        @Override\n+        public void actionPerformed(ActionEvent e) {\n+\n+        }\n+\n+        public int getIndex() {\n+            return index;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return Integer.toString(index);\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        int maxA = 0;\n+        try {\n+            for (int a = 1; a < 200_000; a *= 2) {\n+                maxA = a;\n+                testAddingActionListener(a);\n+            }\n+        } finally {\n+            System.out.println(\"maximum a = \" + maxA);\n+        }\n+    }\n+\n+    private static void testAddingActionListener(int numberOfListeners) {\n+        \/\/ step 1: create the large AWTEventMulticaster\n+        ActionListener l = null;\n+        for (int a = 0; a < numberOfListeners; a++) {\n+            l = AWTEventMulticaster.add(l, new IndexedActionListener(a));\n+        }\n+\n+        \/\/ Prior to 8342782 we could CREATE a large AWTEventMulticaster, but we couldn't\n+        \/\/ always interact with it.\n+\n+        \/\/ step 2: dispatch an event\n+        \/\/ Here we're making sure we don't get a StackOverflowError when we traverse the tree:\n+        l.actionPerformed(null);\n+\n+        \/\/ step 3: make sure getListeners() returns elements in the correct order\n+        \/\/ The resolution for 8342782 introduced a `rebalance` method; we want to\n+        \/\/ double-check that the rebalanced tree preserves the appropriate order.\n+        IndexedActionListener[] array = AWTEventMulticaster.getListeners(l, IndexedActionListener.class);\n+        for (int b = 0; b < array.length; b++) {\n+            if (b != array[b].getIndex())\n+                throw new Error(\"the listeners are in the wrong order. \" + b + \" != \" + array[b].getIndex());\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/awt\/event\/StressTest\/LargeAWTEventMulticasterTest.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}