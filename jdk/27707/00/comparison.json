{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -189,1 +189,7 @@\n-     * upper-left corner coordinates of the rectangle are\n+     * application provides a {@code dst} that is always returned.\n+     * If {@code dst} is {@code null} and a destination {code BufferedImage}\n+     * with the transformed dimensions cannot be created, the {@code src}\n+     * dimensions may be substituted.\n+     *\n+     * <p>\n+     * If the upper-left corner coordinates of the rectangle are\n@@ -227,1 +233,1 @@\n-            dst = createCompatibleDestImage(src, null);\n+            dst = createCompatibleDestImageInt(src, null);\n@@ -275,1 +281,1 @@\n-                    dst = createCompatibleDestImage(src, null);\n+                    dst = createCompatibleDestImageInt(src, null);\n@@ -323,1 +329,6 @@\n-     * upper-left corner coordinates of rectangle are negative then\n+     * application provides a {@code dst} that is always returned.\n+     * If {@code dst} is {@code null} and a destination {code Raster}\n+     * with the transformed dimensions cannot be created, the {@code src}\n+     * dimensions may be substituted.\n+     * <p>\n+     * If the upper-left corner coordinates of rectangle are negative then\n@@ -345,1 +356,1 @@\n-            dst = createCompatibleDestRaster(src);\n+            dst = createCompatibleDestRasterInt(src);\n@@ -425,1 +436,1 @@\n-     * transformed width or height is equal to 0.\n+     * transformed width or height is less than or equal to 0, or too large.\n@@ -440,1 +451,0 @@\n-        BufferedImage image;\n@@ -442,0 +452,23 @@\n+        try {\n+            return createCompatibleDestImage(src, destCM, r);\n+        } catch (Exception e) {\n+             if (e instanceof RasterFormatException) {\n+                 throw e;\n+             } else {\n+                 RasterFormatException re =\n+                     new RasterFormatException(\"Could not create transformed image of size \" + r);\n+                     re.initCause(e);\n+                     throw re;\n+             }\n+        }\n+    }\n+\n+    private BufferedImage createCompatibleDestImageInt(BufferedImage src,\n+                                                      ColorModel destCM) {\n+\n+       try {\n+           return createCompatibleDestImage(src, destCM);\n+       } catch (Exception e) {\n+           return createCompatibleDestImage(src, destCM, src.getRaster().getBounds());\n+       }\n+    }\n@@ -443,0 +476,5 @@\n+    private BufferedImage createCompatibleDestImage(BufferedImage src,\n+                                                    ColorModel destCM,\n+                                                    Rectangle r) {\n+\n+        BufferedImage image;\n@@ -485,1 +523,1 @@\n-     * if the transformed width or height is equal to 0.\n+     * if the transformed width or height is less than or equal to 0, or too large.\n@@ -492,1 +530,25 @@\n-        Rectangle2D r = getBounds2D(src);\n+        Rectangle r = getBounds2D(src).getBounds();\n+        try {\n+            return createCompatibleDestRaster(src, r);\n+        } catch (Exception e) {\n+             if (e instanceof RasterFormatException) {\n+                 throw e;\n+             } else {\n+                 RasterFormatException re =\n+                     new RasterFormatException(\"Could not create transformed raster of size \" + r);\n+                     re.initCause(e);\n+                     throw re;\n+             }\n+        }\n+    }\n+\n+    private WritableRaster createCompatibleDestRasterInt(Raster src) {\n+       try {\n+           return createCompatibleDestRaster(src);\n+       } catch (Exception e) {\n+           Rectangle r = src.getBounds();\n+           return createCompatibleDestRaster(src, r);\n+       }\n+    }\n+\n+    private WritableRaster createCompatibleDestRaster (Raster src, Rectangle r) {\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/image\/AffineTransformOp.java","additions":72,"deletions":10,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 4690476\n+ * @summary Verify behaviour with transform which creates too large an image.\n+ *\/\n+\n+import java.awt.geom.AffineTransform;\n+import java.awt.image.AffineTransformOp;\n+import static java.awt.image.AffineTransformOp.*;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.Raster;\n+import java.awt.image.RasterFormatException;\n+\n+public class AffineTxOpSizeTest {\n+\n+    static final int W = 2552, H = 3300;\n+    \/\/ This transform will require an approx 60_000 x 60_000 raster which is too large\n+    static final AffineTransform AT = new AffineTransform(0.2, 23, 18, 0.24, -70.0, -90.0);\n+\n+    public static void main(String[] args) {\n+        BufferedImage src = new BufferedImage(W, H, BufferedImage.TYPE_INT_RGB);\n+        testAOP(src, TYPE_BICUBIC);\n+        testAOP(src, TYPE_BILINEAR);\n+        testAOP(src, TYPE_NEAREST_NEIGHBOR);\n+    }\n+\n+    static void testAOP(BufferedImage src, int iType) {\n+        AffineTransformOp aop = new AffineTransformOp(AT, iType);\n+        System.out.println(\"Bounds=\" + aop.getBounds2D(src));\n+\n+        aop.filter(src, null);\n+        aop.filter(src.getRaster(), null);\n+        try {\n+             aop.createCompatibleDestImage(src, src.getColorModel());\n+             throw new RuntimeException(\"No exception for image\");\n+        } catch (RasterFormatException e) {\n+        }\n+        try {\n+             aop.createCompatibleDestRaster(src.getRaster());\n+             throw new RuntimeException(\"No exception for raster\");\n+        } catch (RasterFormatException e) {\n+        }\n+  }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/image\/AffineTransformOp\/AffineTxOpSizeTest.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}