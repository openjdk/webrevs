{"files":[{"patch":"@@ -208,2 +208,4 @@\n-    \/\/ thawing, see ThawBase::finish_thaw()). We also need to clear the last_sp\n-    \/\/ saved in the frame as it is not expected to be set in case we preempt again.\n+    \/\/ thawing, see ThawBase::finish_thaw()). We also clear last_sp to match\n+    \/\/ the behavior when calling the VM from the interpreter (we check for this\n+    \/\/ in FreezeBase::prepare_freeze_interpreted_top_frame, which can be reached\n+    \/\/ if preempting again at redo_vmcall()).\n","filename":"src\/hotspot\/cpu\/aarch64\/continuationFreezeThaw_aarch64.inline.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -215,2 +215,4 @@\n-    \/\/ thawing, see ThawBase::finish_thaw()). We also need to clear the last_sp\n-    \/\/ saved in the frame as it is not expected to be set in case we preempt again.\n+    \/\/ thawing, see ThawBase::finish_thaw()). We also clear last_sp to match\n+    \/\/ the behavior when calling the VM from the interpreter (we check for this\n+    \/\/ in FreezeBase::prepare_freeze_interpreted_top_frame, which can be reached\n+    \/\/ if preempting again at redo_vmcall()).\n","filename":"src\/hotspot\/cpu\/riscv\/continuationFreezeThaw_riscv.inline.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -199,2 +199,4 @@\n-    \/\/ thawing, see ThawBase::finish_thaw()). We also need to clear the last_sp\n-    \/\/ saved in the frame as it is not expected to be set in case we preempt again.\n+    \/\/ thawing, see ThawBase::finish_thaw()). We also clear last_sp to match\n+    \/\/ the behavior when calling the VM from the interpreter (we check for this\n+    \/\/ in FreezeBase::prepare_freeze_interpreted_top_frame, which can be reached\n+    \/\/ if preempting again at redo_vmcall()).\n","filename":"src\/hotspot\/cpu\/x86\/continuationFreezeThaw_x86.inline.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}