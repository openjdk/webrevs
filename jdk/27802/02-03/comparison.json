{"files":[{"patch":"@@ -278,1 +278,1 @@\n-    InterpreterRuntime::resolve_get_put(bc, raw_index, mh, cp, StaticMode::dont_initialize_klass, CHECK);\n+    InterpreterRuntime::resolve_get_put(bc, raw_index, mh, cp, ClassInitMode::dont_init, CHECK);\n","filename":"src\/hotspot\/share\/cds\/aotConstantPoolResolver.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -403,1 +403,1 @@\n-  LinkResolver::resolve_field(result, link_info, bc, StaticMode::dont_initialize_klass, CHECK_AND_CLEAR_(false));\n+  LinkResolver::resolve_field(result, link_info, bc, ClassInitMode::dont_init, CHECK_AND_CLEAR_(false));\n","filename":"src\/hotspot\/share\/ci\/ciField.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2130,1 +2130,1 @@\n-  macro(_interruptible_wait_offset,        k, \"interruptableWait\",  bool_signature,              false); \\\n+  macro(_interruptible_wait_offset,        k, \"interruptibleWait\",  bool_signature,              false); \\\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -655,1 +655,1 @@\n-  resolve_get_put(bytecode, last_frame.get_index_u2(bytecode), m, pool, StaticMode::initialize_klass_preemptable, CHECK_AND_CLEAR_PREEMPTED);\n+  resolve_get_put(bytecode, last_frame.get_index_u2(bytecode), m, pool, ClassInitMode::init_preemptable, CHECK_AND_CLEAR_PREEMPTED);\n@@ -661,1 +661,1 @@\n-                                         StaticMode static_mode, TRAPS) {\n+                                         ClassInitMode init_mode, TRAPS) {\n@@ -669,2 +669,1 @@\n-    LinkResolver::resolve_field_access(info, pool, field_index,\n-                                       m, bytecode, static_mode, CHECK);\n+    LinkResolver::resolve_field_access(info, pool, field_index, m, bytecode, init_mode, CHECK);\n@@ -829,1 +828,1 @@\n-                                 StaticMode::initialize_klass_preemptable, THREAD);\n+                                 ClassInitMode::init_preemptable, THREAD);\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-                              methodHandle& m, constantPoolHandle& pool, StaticMode static_mode, TRAPS);\n+                              methodHandle& m, constantPoolHandle& pool, ClassInitMode init_mode, TRAPS);\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -989,1 +989,1 @@\n-                                        StaticMode static_mode, TRAPS) {\n+                                        ClassInitMode init_mode, TRAPS) {\n@@ -991,1 +991,1 @@\n-  resolve_field(fd, link_info, byte, static_mode, CHECK);\n+  resolve_field(fd, link_info, byte, init_mode, CHECK);\n@@ -996,1 +996,1 @@\n-                                 Bytecodes::Code byte, StaticMode static_mode,\n+                                 Bytecodes::Code byte, ClassInitMode init_mode,\n@@ -1081,1 +1081,1 @@\n-      if (static_mode == StaticMode::initialize_klass) {\n+      if (init_mode == ClassInitMode::init) {\n@@ -1083,1 +1083,1 @@\n-      } else if (static_mode == StaticMode::initialize_klass_preemptable) {\n+      } else if (init_mode == ClassInitMode::init_preemptable) {\n@@ -1111,1 +1111,1 @@\n-                                       StaticMode static_mode, TRAPS) {\n+                                       ClassInitMode init_mode, TRAPS) {\n@@ -1118,2 +1118,2 @@\n-  if (static_mode != StaticMode::dont_initialize_klass && resolved_klass->should_be_initialized()) {\n-    if (static_mode == StaticMode::initialize_klass) {\n+  if (init_mode != ClassInitMode::dont_init && resolved_klass->should_be_initialized()) {\n+    if (init_mode == ClassInitMode::init) {\n@@ -1121,1 +1121,1 @@\n-    } else if (static_mode == StaticMode::initialize_klass_preemptable) {\n+    } else if (init_mode == ClassInitMode::init_preemptable) {\n@@ -1685,1 +1685,1 @@\n-  resolve_static_call(info, link_info, StaticMode::dont_initialize_klass, THREAD);\n+  resolve_static_call(info, link_info, ClassInitMode::dont_init, THREAD);\n@@ -1709,1 +1709,1 @@\n-void LinkResolver::resolve_invoke(CallInfo& result, Handle recv, const constantPoolHandle& pool, int index, Bytecodes::Code byte, StaticMode static_mode, TRAPS) {\n+void LinkResolver::resolve_invoke(CallInfo& result, Handle recv, const constantPoolHandle& pool, int index, Bytecodes::Code byte, ClassInitMode init_mode, TRAPS) {\n@@ -1711,7 +1711,7 @@\n-    case Bytecodes::_invokestatic   : resolve_invokestatic   (result,       pool, index, static_mode, CHECK); break;\n-    case Bytecodes::_invokespecial  : resolve_invokespecial  (result, recv, pool, index,              CHECK); break;\n-    case Bytecodes::_invokevirtual  : resolve_invokevirtual  (result, recv, pool, index,              CHECK); break;\n-    case Bytecodes::_invokehandle   : resolve_invokehandle   (result,       pool, index,              CHECK); break;\n-    case Bytecodes::_invokedynamic  : resolve_invokedynamic  (result,       pool, index,              CHECK); break;\n-    case Bytecodes::_invokeinterface: resolve_invokeinterface(result, recv, pool, index,              CHECK); break;\n-    default                         :                                                                         break;\n+    case Bytecodes::_invokestatic   : resolve_invokestatic   (result,       pool, index, init_mode, CHECK); break;\n+    case Bytecodes::_invokespecial  : resolve_invokespecial  (result, recv, pool, index,            CHECK); break;\n+    case Bytecodes::_invokevirtual  : resolve_invokevirtual  (result, recv, pool, index,            CHECK); break;\n+    case Bytecodes::_invokehandle   : resolve_invokehandle   (result,       pool, index,            CHECK); break;\n+    case Bytecodes::_invokedynamic  : resolve_invokedynamic  (result,       pool, index,            CHECK); break;\n+    case Bytecodes::_invokeinterface: resolve_invokeinterface(result, recv, pool, index,            CHECK); break;\n+    default                         :                                                                       break;\n@@ -1739,1 +1739,1 @@\n-      resolve_static_call(result, link_info, StaticMode::dont_initialize_klass, CHECK);\n+      resolve_static_call(result, link_info, ClassInitMode::dont_init, CHECK);\n@@ -1750,1 +1750,1 @@\n-void LinkResolver::resolve_invokestatic(CallInfo& result, const constantPoolHandle& pool, int index, StaticMode static_mode, TRAPS) {\n+void LinkResolver::resolve_invokestatic(CallInfo& result, const constantPoolHandle& pool, int index, ClassInitMode init_mode, TRAPS) {\n@@ -1752,1 +1752,1 @@\n-  resolve_static_call(result, link_info, static_mode, CHECK);\n+  resolve_static_call(result, link_info, init_mode, CHECK);\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -192,4 +192,4 @@\n-enum class StaticMode : uint8_t {\n-  dont_initialize_klass,\n-  initialize_klass,\n-  initialize_klass_preemptable\n+enum class ClassInitMode : uint8_t {\n+  dont_init,\n+  init,\n+  init_preemptable\n@@ -276,1 +276,1 @@\n-                                      const constantPoolHandle& pool, int index, StaticMode mode, TRAPS);\n+                                      const constantPoolHandle& pool, int index, ClassInitMode mode, TRAPS);\n@@ -304,1 +304,1 @@\n-                                   StaticMode mode, TRAPS);\n+                                   ClassInitMode mode, TRAPS);\n@@ -310,2 +310,1 @@\n-    resolve_field_access(result, pool, index, method, byte,\n-                         StaticMode::initialize_klass, THREAD);\n+    resolve_field_access(result, pool, index, method, byte, ClassInitMode::init, THREAD);\n@@ -315,1 +314,1 @@\n-                            StaticMode mode, TRAPS);\n+                            ClassInitMode mode, TRAPS);\n@@ -319,1 +318,1 @@\n-                                     StaticMode mode, TRAPS);\n+                                     ClassInitMode mode, TRAPS);\n@@ -361,1 +360,1 @@\n-                             Bytecodes::Code byte, StaticMode static_mode, TRAPS);\n+                             Bytecodes::Code byte, ClassInitMode static_mode, TRAPS);\n@@ -365,1 +364,1 @@\n-    resolve_invoke(result, recv, pool, index, byte, StaticMode::initialize_klass, THREAD);\n+    resolve_invoke(result, recv, pool, index, byte, ClassInitMode::init, THREAD);\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.hpp","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -1011,1 +1011,1 @@\n-  LinkResolver::resolve_field(fd, link_info, Bytecodes::java_code(code), StaticMode::dont_initialize_klass, CHECK_NULL);\n+  LinkResolver::resolve_field(fd, link_info, Bytecodes::java_code(code), ClassInitMode::dont_init, CHECK_NULL);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -774,1 +774,1 @@\n-                        link_info, StaticMode::dont_initialize_klass, THREAD);\n+                        link_info, ClassInitMode::dont_init, THREAD);\n@@ -836,1 +836,1 @@\n-        LinkResolver::resolve_field(result, link_info, Bytecodes::_nop, StaticMode::dont_initialize_klass, THREAD);\n+        LinkResolver::resolve_field(result, link_info, Bytecodes::_nop, ClassInitMode::dont_init, THREAD);\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-bool ContinuationEntry::assert_entry_frame_laid_out(JavaThread* thread, bool preempted) {\n+bool ContinuationEntry::assert_entry_frame_laid_out(JavaThread* thread) {\n@@ -117,2 +117,0 @@\n-  if (preempted) return true;\n-\n","filename":"src\/hotspot\/share\/runtime\/continuationEntry.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-  static bool assert_entry_frame_laid_out(JavaThread* thread, bool preempted = false);\n+  static bool assert_entry_frame_laid_out(JavaThread* thread);\n","filename":"src\/hotspot\/share\/runtime\/continuationEntry.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -196,1 +196,1 @@\n-static void log_frames(JavaThread* thread, bool dolog = true);\n+static void log_frames(JavaThread* thread, bool do_log = true);\n@@ -3170,1 +3170,1 @@\n-static void log_frames(JavaThread* thread, bool dolog) {\n+static void log_frames(JavaThread* thread, bool do_log) {\n@@ -3173,1 +3173,1 @@\n-  if (!lt.develop_is_enabled() || !dolog) {\n+  if (!lt.develop_is_enabled() || !do_log) {\n@@ -3233,1 +3233,1 @@\n-  assert(ContinuationEntry::assert_entry_frame_laid_out(thread, preempted), \"\");\n+  assert(preempted || ContinuationEntry::assert_entry_frame_laid_out(thread), \"\");\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -246,1 +246,1 @@\n-  LinkResolver::resolve_static_call(callinfo, link_info, StaticMode::initialize_klass, CHECK);\n+  LinkResolver::resolve_static_call(callinfo, link_info, ClassInitMode::init, CHECK);\n","filename":"src\/hotspot\/share\/runtime\/javaCalls.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -492,1 +492,1 @@\n-  \/\/ We allow preemption on some klass initializion calls.\n+  \/\/ We allow preemption on some klass initialization calls.\n@@ -506,1 +506,1 @@\n-  bool at_preemptable_init() { return _at_preemptable_init; }\n+  bool at_preemptable_init()           { return _at_preemptable_init; }\n@@ -522,1 +522,1 @@\n-    AtRedoVMCall(JavaThread *t) : _thread(t) {\n+    AtRedoVMCall(JavaThread* t) : _thread(t) {\n@@ -524,1 +524,2 @@\n-      assert(_thread->_interp_at_preemptable_vmcall_cnt > 0, \"\");\n+      assert(_thread->_interp_at_preemptable_vmcall_cnt > 0, \"Unexpected count: %d\",\n+             _thread->_interp_at_preemptable_vmcall_cnt);\n@@ -528,1 +529,2 @@\n-      assert(_thread->_interp_at_preemptable_vmcall_cnt >= 0, \"\");\n+      assert(_thread->_interp_at_preemptable_vmcall_cnt >= 0, \"Unexpected count: %d\",\n+             _thread->_interp_at_preemptable_vmcall_cnt);\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-    private volatile boolean interruptableWait;\n+    private volatile boolean interruptibleWait;\n@@ -605,1 +605,1 @@\n-            boolean interruptable = interruptableWait;\n+            boolean interruptible = interruptibleWait;\n@@ -635,1 +635,1 @@\n-            if (interruptable && interrupted && compareAndSetState(newState, UNBLOCKED)) {\n+            if (interruptible && interrupted && compareAndSetState(newState, UNBLOCKED)) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/VirtualThread.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-public class PreemptedException extends Exception {\n+public class PreemptedException extends RuntimeException {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/PreemptedException.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}