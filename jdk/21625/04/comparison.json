{"files":[{"patch":"@@ -35,0 +35,2 @@\n+import java.lang.classfile.instruction.BranchInstruction;\n+import java.lang.classfile.instruction.DiscontinuedInstruction;\n@@ -233,1 +235,1 @@\n-     * Default is {@code FIX_SHORT_JUMPS} to automatically rewrite jump\n+     * Default is {@link #FIX_SHORT_JUMPS} to automatically rewrite jump\n@@ -235,0 +237,6 @@\n+     * <p>\n+     * Due to physical restrictions, some types of instructions cannot encode\n+     * certain jump targets with bci offsets less than -32768 or greater than\n+     * 32767, as they use a {@code s2} to encode such an offset.  (The maximum\n+     * length of the {@code code} array is 65535.)  These types of instructions\n+     * are called \"short jumps\".\n@@ -236,0 +244,2 @@\n+     * @see BranchInstruction\n+     * @see DiscontinuedInstruction.JsrInstruction\n@@ -240,1 +250,6 @@\n-        \/** Automatically convert short jumps to long when necessary *\/\n+        \/**\n+         * Automatically convert short jumps to long when necessary.\n+         * <p>\n+         * For an invalid instruction model, a {@link CodeBuilder} may generate\n+         * another or a few other instructions to accomplish the same effect.\n+         *\/\n@@ -243,1 +258,6 @@\n-        \/** Fail if short jump overflows *\/\n+        \/**\n+         * Fail with an {@link IllegalArgumentException} if short jump overflows.\n+         * <p>\n+         * This is useful to ensure the physical accuracy of a generated {@code\n+         * class} file.\n+         *\/\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFile.java","additions":23,"deletions":3,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n- * <h2>Instruction Factories<\/h2>\n+ * <h2 id=\"instruction-factories\">Instruction Factories<\/h2>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CodeBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -33,1 +34,6 @@\n- * Models an executable instruction in a method body.\n+ * Models an executable instruction in the {@code code} array of the {@link\n+ * CodeAttribute Code} attribute of a method.\n+ * <p>\n+ * The {@link #opcode() opcode} identifies the operation of an instruction.\n+ * Each {@linkplain Opcode#kind() kind} of opcode has its own modeling interface\n+ * for instructions.\n@@ -35,0 +41,1 @@\n+ * @sealedGraph\n@@ -49,1 +56,1 @@\n-     * {@return the opcode of this instruction}\n+     * {@return the operation of this instruction}\n@@ -55,0 +62,2 @@\n+     * This value is equal to {@link Opcode#sizeIfFixed()\n+     * opcode().sizeIfFixed()} if it is not {@code -1}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Instruction.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -27,0 +27,4 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.instruction.LabelTarget;\n+import java.util.ListIterator;\n+\n@@ -31,10 +35,42 @@\n- * association between a label's identity and the position it represents is\n- * managed by the entity managing the method body (a {@link CodeModel} or {@link\n- * CodeBuilder}), not the label itself; this allows the same label to have a\n- * meaning both in an existing method (as managed by a {@linkplain CodeModel})\n- * and in the transformation of that method (as managed by a {@linkplain\n- * CodeBuilder}), while corresponding to different positions in each. When\n- * traversing the elements of a {@linkplain CodeModel}, {@linkplain Label}\n- * markers will be delivered at the position to which they correspond.  A label\n- * can be bound to the current position within a {@linkplain CodeBuilder} via\n- * {@link CodeBuilder#labelBinding(Label)} or {@link CodeBuilder#with(ClassFileElement)}.\n+ * position is a cursor position in the list of instructions, similar to that\n+ * of a {@link ListIterator}.\n+ *\n+ * <h2 id=\"reading\">Reading Labels<\/h2>\n+ * Labels read from {@code class} files represent positions in the {@code code}\n+ * array of a {@link CodeAttribute Code} attribute.  It is associated with a\n+ * <dfn>{@index bci}<\/dfn> (bytecode index), also known as <dfn>{@index pc}<\/dfn>\n+ * (program counter), the index into the {@code code} array; the actual cursor\n+ * position is immediately before the given index, so a label at the beginning\n+ * of the instructions has bci {@code 0}, and a label at the end of the\n+ * instructions has bci {@link CodeAttribute#codeLength codeLength() + 1}.  The\n+ * bci can be inspected through {@link CodeAttribute#labelToBci\n+ * CodeAttribute::labelToBci}.\n+ * <p>\n+ * In generic {@link CodeModel}s, a label may not have a bci value; the position\n+ * of a label can be found by searching for the corresponding {@link LabelTarget}\n+ * within that model.\n+ *\n+ * <h2 id=\"writing\">Writing Labels<\/h2>\n+ * Many models in {@link java.lang.classfile} refer to labels.  To write a\n+ * label, a label must be obtained, it must be bound to a {@link CodeBuilder}.\n+ * <p>\n+ * To obtain a label:\n+ * <ul>\n+ * <li>Use a label read from other models.\n+ * <li>Use pre-defined labels from a {@link CodeBuilder}, such as {@link\n+ *     CodeBuilder#startLabel() CodeBuilder::startLabel}, {@link CodeBuilder#endLabel\n+ *     CodeBuilder::endLabel}, or {@link CodeBuilder.BlockCodeBuilder#breakLabel\n+ *     BlockCodeBuilder::breakLabel}.  They are already bound.\n+ * <li>Create labels with {@link CodeBuilder#newLabel CodeBuilder::newLabel} or\n+ *     {@link CodeBuilder#newBoundLabel CodeBuilder::newBoundLabel}.\n+ * <\/ul>\n+ * <p>\n+ * A label must be bound exactly once in the {@code CodeBuilder} where it is\n+ * used; otherwise, writing fails.  To bind an unbound label:\n+ * <ul>\n+ * <li>Send a read {@link LabelTarget} to a {@code CodeBuilder}.\n+ * <li>Use {@link CodeBuilder#labelBinding CodeBuilder::labelBinding}.\n+ * <\/ul>\n+ * Note that a label read from another model is not automatically bound in a\n+ * {@code CodeBuilder}; they are separate entities and the label is bound to\n+ * different positions in them.\n@@ -42,0 +78,3 @@\n+ * @see CodeAttribute#labelToBci CodeAttribute::labelToBci\n+ * @see CodeBuilder#newLabel CodeBuilder::newLabel\n+ * @see CodeBuilder#labelBinding CodeBuilder::labelBinding\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Label.java","additions":49,"deletions":10,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.lang.classfile.instruction.*;\n+\n@@ -31,2 +33,10 @@\n- * As well as a number of pseudo-instructions that may be encountered when\n- * traversing the instructions of a method.\n+ * This includes a few pseudo-opcodes modified by {@link #isWide() wide}.\n+ * <p>\n+ * An opcode describes the operation of an instruction.\n+ *\n+ * @apiNote\n+ * The enum constants are named after the opcodes' mnemonics in uppercase.\n+ * Wide pseudo-opcodes are named with the original opcodes' mnemonic plus\n+ * a {@code _W} suffix. However, {@link #LDC_W ldc_w}, {@link #LDC2_W ldc2_w},\n+ * {@link #GOTO_W goto_w}, and {@link #JSR_W jsr_w} are legitimate opcodes\n+ * instead of wide pseudo-opcodes.\n@@ -35,1 +45,0 @@\n- * @see PseudoInstruction\n@@ -41,1 +50,6 @@\n-    \/** Do nothing *\/\n+    \/**\n+     * Do nothing.\n+     *\n+     * @jvms 6.5.nop <em>nop<\/em>\n+     * @see Kind#NOP\n+     *\/\n@@ -44,1 +58,7 @@\n-    \/** Push null *\/\n+    \/**\n+     * Push {@code null}.\n+     *\n+     * @jvms 6.5.aconst_null <em>aconst_null<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -47,1 +67,7 @@\n-    \/** Push int constant -1 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code -1}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -50,1 +76,7 @@\n-    \/** Push int constant 0 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code 0}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -53,1 +85,7 @@\n-    \/** Push int constant 1 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code 1}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -56,1 +94,7 @@\n-    \/** Push int constant 2 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code 2}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -59,1 +103,7 @@\n-    \/** Push int constant 3 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code 3}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -62,1 +112,7 @@\n-    \/** Push int constant 4 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code 4}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -65,1 +121,7 @@\n-    \/** Push int constant 5 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code 5}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -68,1 +130,7 @@\n-    \/** Push long constant 0 *\/\n+    \/**\n+     * Push {@link TypeKind#LONG long} constant {@code 0L}.\n+     *\n+     * @jvms 6.5.lconst_l <em>lconst_&lt;l&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -71,1 +139,7 @@\n-    \/** Push long constant  1 *\/\n+    \/**\n+     * Push {@link TypeKind#LONG long} constant {@code 1L}.\n+     *\n+     * @jvms 6.5.lconst_l <em>lconst_&lt;l&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -74,1 +148,7 @@\n-    \/** Push float constant 0 *\/\n+    \/**\n+     * Push {@link TypeKind#FLOAT float} constant {@code 0.0F}.\n+     *\n+     * @jvms 6.5.fconst_f <em>fconst_&lt;f&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -77,1 +157,7 @@\n-    \/** Push float constant 1 *\/\n+    \/**\n+     * Push {@link TypeKind#FLOAT float} constant {@code 1.0F}.\n+     *\n+     * @jvms 6.5.fconst_f <em>fconst_&lt;f&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -80,1 +166,7 @@\n-    \/** Push float constant 2 *\/\n+    \/**\n+     * Push {@link TypeKind#FLOAT float} constant {@code 2.0F}.\n+     *\n+     * @jvms 6.5.fconst_f <em>fconst_&lt;f&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -83,1 +175,7 @@\n-    \/** Push double constant 0 *\/\n+    \/**\n+     * Push {@link TypeKind#DOUBLE double} constant {@code 0.0D}.\n+     *\n+     * @jvms 6.5.dconst_d <em>dconst_&lt;d&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -86,1 +184,7 @@\n-    \/** Push double constant 1 *\/\n+    \/**\n+     * Push {@link TypeKind#DOUBLE double} constant {@code 1.0D}.\n+     *\n+     * @jvms 6.5.dconst_d <em>dconst_&lt;d&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -89,1 +193,8 @@\n-    \/** Push byte *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} value from sign-extension of immediate\n+     * {@link TypeKind#BYTE byte} value.\n+     *\n+     * @jvms 6.5.bipush <em>bipush<\/em>\n+     * @see ConstantInstruction.ArgumentConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -92,1 +203,8 @@\n-    \/** Push short *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} value from sign-extension of immediate\n+     * {@link TypeKind#SHORT short} value.\n+     *\n+     * @jvms 6.5.sipush <em>sipush<\/em>\n+     * @see ConstantInstruction.ArgumentConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -95,1 +213,7 @@\n-    \/** Push item from run-time constant pool *\/\n+    \/**\n+     * Push item from run-time constant pool.\n+     *\n+     * @jvms 6.5.ldc <em>ldc<\/em>\n+     * @see ConstantInstruction.LoadConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -98,1 +222,7 @@\n-    \/** Push item from run-time constant pool (wide index) *\/\n+    \/**\n+     * Push item from run-time constant pool (wide index).\n+     *\n+     * @jvms 6.5.ldc_w <em>ldc_w<\/em>\n+     * @see ConstantInstruction.LoadConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -101,1 +231,8 @@\n-    \/** Push long or double from run-time constant pool (wide index) *\/\n+    \/**\n+     * Push {@link TypeKind#LONG long} or {@link TypeKind#DOUBLE double}\n+     * from run-time constant pool (wide index).\n+     *\n+     * @jvms 6.5.ldc2_w <em>ldc2_w<\/em>\n+     * @see ConstantInstruction.LoadConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -104,1 +241,6 @@\n-    \/** Load int from local variable *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from local variable.\n+     *\n+     * @jvms 6.5.iload <em>iload<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -107,1 +249,6 @@\n-    \/** Load long from local variable *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from local variable.\n+     *\n+     * @jvms 6.5.lload <em>lload<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -110,1 +257,6 @@\n-    \/** Load float from local variable *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from local variable.\n+     *\n+     * @jvms 6.5.fload <em>fload<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -113,1 +265,6 @@\n-    \/** Load double from local variable *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from local variable.\n+     *\n+     * @jvms 6.5.dload <em>dload<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -116,1 +273,6 @@\n-    \/** Load reference from local variable *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from local variable.\n+     *\n+     * @jvms 6.5.aload <em>aload<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -119,1 +281,6 @@\n-    \/** Load int from local variable 0 *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.iload_n <em>iload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -122,1 +289,6 @@\n-    \/** Load int from local variable 1 *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.iload_n <em>iload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -125,1 +297,6 @@\n-    \/** Load int from local variable 2 *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.iload_n <em>iload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -128,1 +305,6 @@\n-    \/** Load int from local variable3  *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.iload_n <em>iload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -131,1 +313,6 @@\n-    \/** Load long from local variable 0 *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.lload_n <em>lload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -134,1 +321,6 @@\n-    \/** Load long from local variable 1 *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.lload_n <em>lload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -137,1 +329,6 @@\n-    \/** Load long from local variable 2 *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.lload_n <em>lload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -140,1 +337,6 @@\n-    \/** Load long from local variable 3 *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.lload_n <em>lload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -143,1 +345,6 @@\n-    \/** Load float from local variable 0 *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.fload_n <em>fload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -146,1 +353,6 @@\n-    \/** Load float from local variable 1 *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.fload_n <em>fload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -149,1 +361,6 @@\n-    \/** Load float from local variable 2 *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.fload_n <em>fload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -152,1 +369,6 @@\n-    \/** Load float from local variable 3 *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.fload_n <em>fload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -155,1 +377,6 @@\n-    \/** Load double from local variable 0 *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.dload_n <em>dload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -158,1 +385,6 @@\n-    \/** Load double from local variable 1 *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.dload_n <em>dload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -161,1 +393,6 @@\n-    \/** Load double from local variable 2 *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.dload_n <em>dload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -164,1 +401,6 @@\n-    \/** Load double from local variable 3 *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.dload_n <em>dload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -167,1 +409,6 @@\n-    \/**  Load reference from local variable 0 *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.aload_n <em>aload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -170,1 +417,6 @@\n-    \/** Load reference from local variable 1 *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.aload_n <em>aload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -173,1 +425,6 @@\n-    \/** Load reference from local variable 2 *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.aload_n <em>aload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -176,1 +433,6 @@\n-    \/** Load reference from local variable 3 *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.aload_n <em>aload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -179,1 +441,6 @@\n-    \/** Load int from array *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from array.\n+     *\n+     * @jvms 6.5.iaload <em>iaload<\/em>\n+     * @see Kind#ARRAY_LOAD\n+     *\/\n@@ -182,1 +449,6 @@\n-    \/** Load long from array *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from array.\n+     *\n+     * @jvms 6.5.laload <em>laload<\/em>\n+     * @see Kind#ARRAY_LOAD\n+     *\/\n@@ -185,1 +457,6 @@\n-    \/** Load float from array *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from array.\n+     *\n+     * @jvms 6.5.faload <em>faload<\/em>\n+     * @see Kind#ARRAY_LOAD\n+     *\/\n@@ -188,1 +465,6 @@\n-    \/** Load double from array *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from array.\n+     *\n+     * @jvms 6.5.daload <em>daload<\/em>\n+     * @see Kind#ARRAY_LOAD\n+     *\/\n@@ -191,1 +473,6 @@\n-    \/** Load reference from array *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from array.\n+     *\n+     * @jvms 6.5.aaload <em>aaload<\/em>\n+     * @see Kind#ARRAY_LOAD\n+     *\/\n@@ -194,1 +481,6 @@\n-    \/** Load byte from array *\/\n+    \/**\n+     * Load {@link TypeKind#BYTE byte} or {@link TypeKind#BOOLEAN boolean} from array.\n+     *\n+     * @jvms 6.5.baload <em>baload<\/em>\n+     * @see Kind#ARRAY_LOAD\n+     *\/\n@@ -197,1 +489,6 @@\n-    \/** Load char from array *\/\n+    \/**\n+     * Load {@link TypeKind#CHAR char} from array.\n+     *\n+     * @jvms 6.5.caload <em>caload<\/em>\n+     * @see Kind#ARRAY_LOAD\n+     *\/\n@@ -200,1 +497,6 @@\n-    \/** Load short from array *\/\n+    \/**\n+     * Load {@link TypeKind#SHORT short} from array.\n+     *\n+     * @jvms 6.5.saload <em>saload<\/em>\n+     * @see Kind#ARRAY_LOAD\n+     *\/\n@@ -203,1 +505,6 @@\n-    \/** Store int into local variable *\/\n+    \/**\n+     * Store {@link TypeKind#INT int} into local variable.\n+     *\n+     * @jvms 6.5.istore <em>istore<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -206,1 +513,6 @@\n-    \/** Store long into local variable *\/\n+    \/**\n+     * Store {@link TypeKind#LONG long} into local variable.\n+     *\n+     * @jvms 6.5.lstore <em>lstore<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -209,1 +521,6 @@\n-    \/** Store float into local variable *\/\n+    \/**\n+     * Store {@link TypeKind#FLOAT float} into local variable.\n+     *\n+     * @jvms 6.5.fstore <em>fstore<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -212,1 +529,6 @@\n-    \/** Store double into local variable *\/\n+    \/**\n+     * Store {@link TypeKind#DOUBLE double} into local variable.\n+     *\n+     * @jvms 6.5.dstore <em>dstore<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -215,1 +537,7 @@\n-    \/** Store reference into local variable *\/\n+    \/**\n+     * Store {@link TypeKind#REFERENCE reference} into local variable.\n+     * Can also store the {@link TypeKind##returnAddress returnAddress} type.\n+     *\n+     * @jvms 6.5.astore <em>astore<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -218,1 +546,6 @@\n-    \/** Store int into local variable 0 *\/\n+    \/**\n+     * Store {@link TypeKind#INT int} into local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.istore_n <em>istore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -221,1 +554,6 @@\n-    \/** Store int into local variable 1 *\/\n+    \/**\n+     * Store {@link TypeKind#INT int} into local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.istore_n <em>istore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -224,1 +562,6 @@\n-    \/** Store int into local variable 2 *\/\n+    \/**\n+     * Store {@link TypeKind#INT int} into local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.istore_n <em>istore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -227,1 +570,6 @@\n-    \/** Store int into local variable 3 *\/\n+    \/**\n+     * Store {@link TypeKind#INT int} into local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.istore_n <em>istore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -230,1 +578,6 @@\n-    \/** Store long into local variable 0 *\/\n+    \/**\n+     * Store {@link TypeKind#LONG long} into local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.lstore_n <em>lstore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -233,1 +586,6 @@\n-    \/** Store long into local variable 1 *\/\n+    \/**\n+     * Store {@link TypeKind#LONG long} into local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.lstore_n <em>lstore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -236,1 +594,6 @@\n-    \/** Store long into local variable 2 *\/\n+    \/**\n+     * Store {@link TypeKind#LONG long} into local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.lstore_n <em>lstore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -239,1 +602,6 @@\n-    \/** Store long into local variable 3 *\/\n+    \/**\n+     * Store {@link TypeKind#LONG long} into local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.lstore_n <em>lstore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -242,1 +610,6 @@\n-    \/** Store float into local variable 0 *\/\n+    \/**\n+     * Store {@link TypeKind#FLOAT float} into local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.fstore_n <em>fstore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -245,1 +618,6 @@\n-    \/** Store float into local variable 1 *\/\n+    \/**\n+     * Store {@link TypeKind#FLOAT float} into local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.fstore_n <em>fstore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -248,1 +626,6 @@\n-    \/** Store float into local variable 2 *\/\n+    \/**\n+     * Store {@link TypeKind#FLOAT float} into local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.fstore_n <em>fstore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -251,1 +634,6 @@\n-    \/** Store float into local variable 3 *\/\n+    \/**\n+     * Store {@link TypeKind#FLOAT float} into local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.fstore_n <em>fstore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -254,1 +642,6 @@\n-    \/** Store double into local variable 0 *\/\n+    \/**\n+     * Store {@link TypeKind#DOUBLE double} into local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.dstore_n <em>dstore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -257,1 +650,6 @@\n-    \/** Store double into local variable 1 *\/\n+    \/**\n+     * Store {@link TypeKind#DOUBLE double} into local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.dstore_n <em>dstore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -260,1 +658,6 @@\n-    \/** Store double into local variable 2 *\/\n+    \/**\n+     * Store {@link TypeKind#DOUBLE double} into local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.dstore_n <em>dstore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -263,1 +666,6 @@\n-    \/** Store double into local variable 3 *\/\n+    \/**\n+     * Store {@link TypeKind#DOUBLE double} into local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.dstore_n <em>dstore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -266,1 +674,7 @@\n-    \/** Store reference into local variable 0 *\/\n+    \/**\n+     * Store {@link TypeKind#REFERENCE reference} into local variable slot {@code 0}.\n+     * Can also store the {@link TypeKind##returnAddress returnAddress} type.\n+     *\n+     * @jvms 6.5.astore_n <em>astore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -269,1 +683,7 @@\n-    \/** Store reference into local variable 1 *\/\n+    \/**\n+     * Store {@link TypeKind#REFERENCE reference} into local variable slot {@code 1}.\n+     * Can also store the {@link TypeKind##returnAddress returnAddress} type.\n+     *\n+     * @jvms 6.5.astore_n <em>astore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -272,1 +692,7 @@\n-    \/** Store reference into local variable 2 *\/\n+    \/**\n+     * Store {@link TypeKind#REFERENCE reference} into local variable slot {@code 2}.\n+     * Can also store the {@link TypeKind##returnAddress returnAddress} type.\n+     *\n+     * @jvms 6.5.astore_n <em>astore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -275,1 +701,7 @@\n-    \/** Store reference into local variable 3 *\/\n+    \/**\n+     * Store {@link TypeKind#REFERENCE reference} into local variable slot {@code 3}.\n+     * Can also store the {@link TypeKind##returnAddress returnAddress} type.\n+     *\n+     * @jvms 6.5.astore_n <em>astore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -278,1 +710,6 @@\n-    \/** Store into int array *\/\n+    \/**\n+     * Store into {@link TypeKind#INT int} array.\n+     *\n+     * @jvms 6.5.iastore <em>iastore<\/em>\n+     * @see Kind#ARRAY_STORE\n+     *\/\n@@ -281,1 +718,6 @@\n-    \/** Store into long array *\/\n+    \/**\n+     * Store into {@link TypeKind#LONG long} array.\n+     *\n+     * @jvms 6.5.lastore <em>lastore<\/em>\n+     * @see Kind#ARRAY_STORE\n+     *\/\n@@ -284,1 +726,6 @@\n-    \/** Store into float array *\/\n+    \/**\n+     * Store into {@link TypeKind#FLOAT float} array.\n+     *\n+     * @jvms 6.5.fastore <em>fastore<\/em>\n+     * @see Kind#ARRAY_STORE\n+     *\/\n@@ -287,1 +734,6 @@\n-    \/** Store into double array *\/\n+    \/**\n+     * Store into {@link TypeKind#DOUBLE double} array.\n+     *\n+     * @jvms 6.5.dastore <em>dastore<\/em>\n+     * @see Kind#ARRAY_STORE\n+     *\/\n@@ -290,1 +742,6 @@\n-    \/** Store into reference array *\/\n+    \/**\n+     * Store into {@link TypeKind#REFERENCE reference} array.\n+     *\n+     * @jvms 6.5.aastore <em>aastore<\/em>\n+     * @see Kind#ARRAY_STORE\n+     *\/\n@@ -293,1 +750,6 @@\n-    \/** Store into byte array *\/\n+    \/**\n+     * Store into {@link TypeKind#BYTE byte} or {@link TypeKind#BOOLEAN boolean} array.\n+     *\n+     * @jvms 6.5.bastore <em>bastore<\/em>\n+     * @see Kind#ARRAY_STORE\n+     *\/\n@@ -296,1 +758,6 @@\n-    \/** Store into char array *\/\n+    \/**\n+     * Store into {@link TypeKind#CHAR char} array.\n+     *\n+     * @jvms 6.5.castore <em>castore<\/em>\n+     * @see Kind#ARRAY_STORE\n+     *\/\n@@ -299,1 +766,6 @@\n-    \/** Store into short array *\/\n+    \/**\n+     * Store into {@link TypeKind#SHORT short} array.\n+     *\n+     * @jvms 6.5.sastore <em>sastore<\/em>\n+     * @see Kind#ARRAY_STORE\n+     *\/\n@@ -302,1 +774,6 @@\n-    \/** Pop the top operand stack value *\/\n+    \/**\n+     * Pop the top operand stack value.\n+     *\n+     * @jvms 6.5.pop <em>pop<\/em>\n+     * @see Kind#STACK\n+     *\/\n@@ -305,1 +782,6 @@\n-    \/** Pop the top one or two operand stack values *\/\n+    \/**\n+     * Pop the top one or two operand stack values.\n+     *\n+     * @jvms 6.5.pop2 <em>pop2<\/em>\n+     * @see Kind#STACK\n+     *\/\n@@ -308,1 +790,6 @@\n-    \/** Duplicate the top operand stack value *\/\n+    \/**\n+     * Duplicate the top operand stack value.\n+     *\n+     * @jvms 6.5.dup <em>dup<\/em>\n+     * @see Kind#STACK\n+     *\/\n@@ -311,1 +798,6 @@\n-    \/** Duplicate the top operand stack value and insert two values down *\/\n+    \/**\n+     * Duplicate the top operand stack value and insert two values down.\n+     *\n+     * @jvms 6.5.dup_x1 <em>dup_x1<\/em>\n+     * @see Kind#STACK\n+     *\/\n@@ -314,1 +806,6 @@\n-    \/** Duplicate the top operand stack value and insert two or three values down *\/\n+    \/**\n+     * Duplicate the top operand stack value and insert two or three values down.\n+     *\n+     * @jvms 6.5.dup_x2 <em>dup_x2<\/em>\n+     * @see Kind#STACK\n+     *\/\n@@ -317,1 +814,6 @@\n-    \/** Duplicate the top one or two operand stack values *\/\n+    \/**\n+     * Duplicate the top one or two operand stack values.\n+     *\n+     * @jvms 6.5.dup2 <em>dup2<\/em>\n+     * @see Kind#STACK\n+     *\/\n@@ -320,1 +822,7 @@\n-    \/** Duplicate the top one or two operand stack values and insert two or three values down *\/\n+    \/**\n+     * Duplicate the top one or two operand stack values and insert two or three\n+     * values down.\n+     *\n+     * @jvms 6.5.dup2_x1 <em>dup2_x1<\/em>\n+     * @see Kind#STACK\n+     *\/\n@@ -323,1 +831,7 @@\n-    \/** Duplicate the top one or two operand stack values and insert two, three, or four values down *\/\n+    \/**\n+     * Duplicate the top one or two operand stack values and insert two, three,\n+     * or four values down.\n+     *\n+     * @jvms 6.5.dup2_x2 <em>dup2_x2<\/em>\n+     * @see Kind#STACK\n+     *\/\n@@ -326,1 +840,6 @@\n-    \/** Swap the top two operand stack values *\/\n+    \/**\n+     * Swap the top two operand stack values.\n+     *\n+     * @jvms 6.5.swap <em>swap<\/em>\n+     * @see Kind#STACK\n+     *\/\n@@ -329,1 +848,6 @@\n-    \/** Add int *\/\n+    \/**\n+     * Add {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.iadd <em>iadd<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -332,1 +856,6 @@\n-    \/** Add long *\/\n+    \/**\n+     * Add {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.ladd <em>ladd<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -335,1 +864,6 @@\n-    \/** Add float *\/\n+    \/**\n+     * Add {@link TypeKind#FLOAT float}.\n+     *\n+     * @jvms 6.5.fadd <em>fadd<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -338,1 +872,6 @@\n-    \/** Add double *\/\n+    \/**\n+     * Add {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jvms 6.5.dadd <em>dadd<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -341,1 +880,6 @@\n-    \/** Subtract int *\/\n+    \/**\n+     * Subtract {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.isub <em>isub<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -344,1 +888,6 @@\n-    \/** Subtract long *\/\n+    \/**\n+     * Subtract {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lsub <em>lsub<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -347,1 +896,6 @@\n-    \/** Subtract float *\/\n+    \/**\n+     * Subtract {@link TypeKind#FLOAT float}.\n+     *\n+     * @jvms 6.5.fsub <em>fsub<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -350,1 +904,6 @@\n-    \/** Subtract double *\/\n+    \/**\n+     * Subtract {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jvms 6.5.dsub <em>dsub<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -353,1 +912,6 @@\n-    \/** Multiply int *\/\n+    \/**\n+     * Multiply {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.imul <em>imul<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -356,1 +920,6 @@\n-    \/** Multiply long *\/\n+    \/**\n+     * Multiply {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lmul <em>lmul<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -359,1 +928,6 @@\n-    \/** Multiply float *\/\n+    \/**\n+     * Multiply {@link TypeKind#FLOAT float}.\n+     *\n+     * @jvms 6.5.fmul <em>fmul<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -362,1 +936,6 @@\n-    \/** Multiply double *\/\n+    \/**\n+     * Multiply {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jvms 6.5.dmul <em>dmul<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -365,1 +944,6 @@\n-    \/** Divide int *\/\n+    \/**\n+     * Divide {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.idiv <em>idiv<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -368,1 +952,6 @@\n-    \/** Divide long *\/\n+    \/**\n+     * Divide {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.ldiv <em>ldiv<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -371,1 +960,6 @@\n-    \/** Divide float *\/\n+    \/**\n+     * Divide {@link TypeKind#FLOAT float}.\n+     *\n+     * @jvms 6.5.fdiv <em>fdiv<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -374,1 +968,6 @@\n-    \/** Divide double *\/\n+    \/**\n+     * Divide {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jvms 6.5.ddiv <em>ddiv<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -377,1 +976,6 @@\n-    \/** Remainder int *\/\n+    \/**\n+     * Remainder {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.irem <em>irem<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -380,1 +984,6 @@\n-    \/** Remainder long *\/\n+    \/**\n+     * Remainder {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lrem <em>lrem<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -383,1 +992,6 @@\n-    \/** Remainder float *\/\n+    \/**\n+     * Remainder {@link TypeKind#FLOAT float}.\n+     *\n+     * @jvms 6.5.frem <em>frem<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -386,1 +1000,6 @@\n-    \/** Remainder double *\/\n+    \/**\n+     * Remainder {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jvms 6.5.drem <em>drem<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -389,1 +1008,6 @@\n-    \/** Negate int *\/\n+    \/**\n+     * Negate {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.ineg <em>ineg<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -392,1 +1016,6 @@\n-    \/** Negate long *\/\n+    \/**\n+     * Negate {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lneg <em>lneg<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -395,1 +1024,6 @@\n-    \/** Negate float *\/\n+    \/**\n+     * Negate {@link TypeKind#FLOAT float}.\n+     *\n+     * @jvms 6.5.fneg <em>fneg<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -398,1 +1032,6 @@\n-    \/** Negate double *\/\n+    \/**\n+     * Negate {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jvms 6.5.dneg <em>dneg<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -401,1 +1040,6 @@\n-    \/** Shift left int *\/\n+    \/**\n+     * Shift left {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.ishl <em>ishl<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -404,1 +1048,6 @@\n-    \/** Shift left long *\/\n+    \/**\n+     * Shift left {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lshl <em>lshl<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -407,1 +1056,6 @@\n-    \/** Shift right int *\/\n+    \/**\n+     * Arithmetic shift right {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.ishr <em>ishr<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -410,1 +1064,6 @@\n-    \/** Shift right long *\/\n+    \/**\n+     * Arithmetic shift right {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lshr <em>lshr<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -413,1 +1072,6 @@\n-    \/** Logical shift right int *\/\n+    \/**\n+     * Logical shift right {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.iushr <em>iushr<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -416,1 +1080,6 @@\n-    \/** Logical shift right long *\/\n+    \/**\n+     * Logical shift right {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lushr <em>lushr<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -419,1 +1088,9 @@\n-    \/** Boolean AND int *\/\n+    \/**\n+     * Bitwise AND {@link TypeKind#INT int}.\n+     *\n+     * @apiNote\n+     * This may be used to implement {@link TypeKind#BOOLEAN boolean} AND.\n+     *\n+     * @jvms 6.5.iand <em>iand<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -422,1 +1099,6 @@\n-    \/** Boolean AND long *\/\n+    \/**\n+     * Bitwise AND {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.land <em>land<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -425,1 +1107,9 @@\n-    \/** Boolean OR int *\/\n+    \/**\n+     * Bitwise OR {@link TypeKind#INT int}.\n+     *\n+     * @apiNote\n+     * This may be used to implement {@link TypeKind#BOOLEAN boolean} OR.\n+     *\n+     * @jvms 6.5.ior <em>ior<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -428,1 +1118,6 @@\n-    \/** Boolean OR long *\/\n+    \/**\n+     * Bitwise OR {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lor <em>lor<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -431,1 +1126,9 @@\n-    \/** Boolean XOR int *\/\n+    \/**\n+     * Bitwise XOR {@link TypeKind#INT int}.\n+     *\n+     * @apiNote\n+     * This may be used to implement {@link TypeKind#BOOLEAN boolean} XOR.\n+     *\n+     * @jvms 6.5.ixor <em>ixor<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -434,1 +1137,6 @@\n-    \/** Boolean XOR long *\/\n+    \/**\n+     * Bitwise XOR {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lxor <em>lxor<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -437,1 +1145,6 @@\n-    \/** Increment local variable by constant *\/\n+    \/**\n+     * Increment local variable by constant.\n+     *\n+     * @jvms 6.5.iinc <em>iinc<\/em>\n+     * @see Kind#INCREMENT\n+     *\/\n@@ -440,1 +1153,7 @@\n-    \/** Convert int to long *\/\n+    \/**\n+     * Convert {@link TypeKind#INT int} to {@link TypeKind#LONG long}.\n+     *\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     * @jvms 6.5.i2l <em>i2l<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -443,1 +1162,7 @@\n-    \/** Convert int to float *\/\n+    \/**\n+     * Convert {@link TypeKind#INT int} to {@link TypeKind#FLOAT float}.\n+     *\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     * @jvms 6.5.i2f <em>i2f<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -446,1 +1171,7 @@\n-    \/** Convert int to double *\/\n+    \/**\n+     * Convert {@link TypeKind#INT int} to {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     * @jvms 6.5.i2d <em>i2d<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -449,1 +1180,7 @@\n-    \/** Convert long to int *\/\n+    \/**\n+     * Convert {@link TypeKind#LONG long} to {@link TypeKind#INT int}.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.l2i <em>l2i<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -452,1 +1189,6 @@\n-    \/** Convert long to float *\/\n+    \/** Convert {@link TypeKind#LONG long} to {@link TypeKind#FLOAT float}.\n+     *\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     * @jvms 6.5.l2f <em>l2f<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -455,1 +1197,6 @@\n-    \/** Convert long to double *\/\n+    \/** Convert {@link TypeKind#LONG long} to {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     * @jvms 6.5.l2d <em>l2d<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -458,1 +1205,7 @@\n-    \/** Convert float to int *\/\n+    \/**\n+     * Convert {@link TypeKind#FLOAT float} to {@link TypeKind#INT int}.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.f2i <em>f2i<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -461,1 +1214,7 @@\n-    \/** Convert float to long *\/\n+    \/**\n+     * Convert {@link TypeKind#FLOAT float} to {@link TypeKind#LONG long}.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.f2l <em>f2l<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -464,1 +1223,7 @@\n-    \/** Convert float to double *\/\n+    \/**\n+     * Convert {@link TypeKind#FLOAT float} to {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     * @jvms 6.5.f2d <em>f2d<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -467,1 +1232,7 @@\n-    \/** Convert double to int *\/\n+    \/**\n+     * Convert {@link TypeKind#DOUBLE double} to {@link TypeKind#INT int}.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.d2i <em>d2i<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -470,1 +1241,6 @@\n-    \/** Convert double to long *\/\n+    \/**\n+     * Convert {@link TypeKind#DOUBLE double} to {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.d2l <em>d2l<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -473,1 +1249,7 @@\n-    \/** Convert double to float *\/\n+    \/**\n+     * Convert {@link TypeKind#DOUBLE double} to {@link TypeKind#FLOAT float}.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.d2f <em>d2f<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -476,1 +1258,9 @@\n-    \/** Convert int to byte *\/\n+    \/**\n+     * Convert {@link TypeKind#INT int} to {@link TypeKind#BYTE byte}.\n+     * This is as if storing the {@linkplain TypeKind##computational-type\n+     * computational} {@code int} into a {@code byte} and loading it back.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.i2b <em>i2b<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -479,1 +1269,9 @@\n-    \/** Convert int to char *\/\n+    \/**\n+     * Convert {@link TypeKind#INT int} to {@link TypeKind#CHAR char}.\n+     * This is as if storing the {@linkplain TypeKind##computational-type\n+     * computational} {@code int} into a {@code char} and loading it back.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.i2c <em>i2c<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -482,1 +1280,9 @@\n-    \/** Convert int to short *\/\n+    \/**\n+     * Convert {@link TypeKind#INT int} to {@link TypeKind#SHORT short}.\n+     * This is as if storing the {@linkplain TypeKind##computational-type\n+     * computational} {@code int} into a {@code short} and loading it back.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.i2s <em>i2s<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -485,1 +1291,7 @@\n-    \/** Compare long *\/\n+    \/**\n+     * Compare {@link TypeKind#LONG long}.\n+     *\n+     * @see Long#compare(long, long)\n+     * @jvms 6.5.lcmp <em>lcmp<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -488,1 +1300,8 @@\n-    \/** Compare float *\/\n+    \/**\n+     * Compare {@link TypeKind#FLOAT float}.\n+     * Produces {@code -1} if any operand is {@link Float#isNaN(float) NaN}.\n+     *\n+     * @see Double##equivalenceRelation Floating-point Equality, Equivalence, and Comparison\n+     * @jvms 6.5.fcmp_op <em>fcmp&lt;op&gt;<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -491,1 +1310,8 @@\n-    \/** Compare float *\/\n+    \/**\n+     * Compare {@link TypeKind#FLOAT float}.\n+     * Produces {@code 1} if any operand is {@link Float#isNaN(float) NaN}.\n+     *\n+     * @see Double##equivalenceRelation Floating-point Equality, Equivalence, and Comparison\n+     * @jvms 6.5.fcmp_op <em>fcmp&lt;op&gt;<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -494,1 +1320,8 @@\n-    \/** Compare double *\/\n+    \/**\n+     * Compare {@link TypeKind#DOUBLE double}.\n+     * Produces {@code -1} if any operand is {@link Double#isNaN(double) NaN}.\n+     *\n+     * @see Double##equivalenceRelation Floating-point Equality, Equivalence, and Comparison\n+     * @jvms 6.5.dcmp_op <em>dcmp&lt;op&gt;<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -497,1 +1330,8 @@\n-    \/** Compare double *\/\n+    \/**\n+     * Compare {@link TypeKind#DOUBLE double}.\n+     * Produces {@code 1} if any operand is {@link Double#isNaN(double) NaN}.\n+     *\n+     * @see Double##equivalenceRelation Floating-point Equality, Equivalence, and Comparison\n+     * @jvms 6.5.dcmp_op <em>dcmp&lt;op&gt;<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -500,1 +1340,6 @@\n-    \/** Branch if int comparison with zero succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code == 0} succeeds.\n+     *\n+     * @jvms 6.5.if_cond <em>if_&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -503,1 +1348,6 @@\n-    \/** Branch if int comparison with zero succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code != 0} succeeds.\n+     *\n+     * @jvms 6.5.if_cond <em>if_&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -506,1 +1356,6 @@\n-    \/** Branch if int comparison with zero succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code < 0} succeeds.\n+     *\n+     * @jvms 6.5.if_cond <em>if_&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -509,1 +1364,6 @@\n-    \/** Branch if int comparison with zero succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code >= 0} succeeds.\n+     *\n+     * @jvms 6.5.if_cond <em>if_&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -512,1 +1372,6 @@\n-    \/** Branch if int comparison with zero succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code > 0} succeeds.\n+     *\n+     * @jvms 6.5.if_cond <em>if_&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -515,1 +1380,6 @@\n-    \/** Branch if int comparison with zero succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code <= 0} succeeds.\n+     *\n+     * @jvms 6.5.if_cond <em>if_&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -518,1 +1388,6 @@\n-    \/** Branch if int comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code operand1 == operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_icmp_cond <em>if_icmp&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -521,1 +1396,6 @@\n-    \/** Branch if int comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code operand1 != operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_icmp_cond <em>if_icmp&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -524,1 +1404,6 @@\n-    \/** Branch if int comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code operand1 < operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_icmp_cond <em>if_icmp&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -527,1 +1412,6 @@\n-    \/** Branch if int comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code operand1 >= operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_icmp_cond <em>if_icmp&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -530,1 +1420,6 @@\n-    \/** Branch if int comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code operand1 > operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_icmp_cond <em>if_icmp&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -533,1 +1428,6 @@\n-    \/** Branch if int comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code operand1 <= operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_icmp_cond <em>if_icmp&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -536,1 +1436,7 @@\n-    \/** Branch if reference comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#REFERENCE reference} comparison\n+     * {@code operand1 == operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_acmp_cond <em>if_acmp&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -539,1 +1445,7 @@\n-    \/** Branch if reference comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#REFERENCE reference} comparison\n+     * {@code operand1 != operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_acmp_cond <em>if_acmp&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -542,1 +1454,6 @@\n-    \/** Branch always *\/\n+    \/**\n+     * Branch always.\n+     *\n+     * @jvms 6.5.goto <em>goto<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -546,2 +1463,6 @@\n-     * Jump subroutine is discontinued opcode\n-     * @see java.lang.classfile.instruction.DiscontinuedInstruction\n+     * (Discontinued) Jump subroutine; last used in major version {@value\n+     * ClassFile#JAVA_6_VERSION}.\n+     *\n+     * @jvms 4.9.1 Static Constraints\n+     * @jvms 6.5.jsr <em>jsr<\/em>\n+     * @see Kind#DISCONTINUED_JSR\n@@ -552,2 +1473,6 @@\n-     * Return from subroutine is discontinued opcode\n-     * @see java.lang.classfile.instruction.DiscontinuedInstruction\n+     * (Discontinued) Return from subroutine; last used in major version\n+     * {@value ClassFile#JAVA_6_VERSION}.\n+     *\n+     * @jvms 4.9.1 Static Constraints\n+     * @jvms 6.5.ret <em>ret<\/em>\n+     * @see Kind#DISCONTINUED_RET\n@@ -557,1 +1482,6 @@\n-    \/** Access jump table by index and jump *\/\n+    \/**\n+     * Access jump table by index and jump.\n+     *\n+     * @jvms 6.5.tableswitch <em>tableswitch<\/em>\n+     * @see Kind#TABLE_SWITCH\n+     *\/\n@@ -560,1 +1490,6 @@\n-    \/** Access jump table by key match and jump *\/\n+    \/**\n+     * Access jump table by key match and jump.\n+     *\n+     * @jvms 6.5.lookupswitch <em>lookupswitch<\/em>\n+     * @see Kind#LOOKUP_SWITCH\n+     *\/\n@@ -563,1 +1498,6 @@\n-    \/** Return int from method *\/\n+    \/**\n+     * Return {@link TypeKind#INT int} from method.\n+     *\n+     * @jvms 6.5.ireturn <em>ireturn<\/em>\n+     * @see Kind#RETURN\n+     *\/\n@@ -566,1 +1506,6 @@\n-    \/** Return long from method *\/\n+    \/**\n+     * Return {@link TypeKind#LONG long} from method.\n+     *\n+     * @jvms 6.5.lreturn <em>lreturn<\/em>\n+     * @see Kind#RETURN\n+     *\/\n@@ -569,1 +1514,6 @@\n-    \/** Return float from method *\/\n+    \/**\n+     * Return {@link TypeKind#FLOAT float} from method.\n+     *\n+     * @jvms 6.5.freturn <em>freturn<\/em>\n+     * @see Kind#RETURN\n+     *\/\n@@ -572,1 +1522,6 @@\n-    \/** Return double from method *\/\n+    \/**\n+     * Return {@link TypeKind#DOUBLE double} from method.\n+     *\n+     * @jvms 6.5.dreturn <em>dreturn<\/em>\n+     * @see Kind#RETURN\n+     *\/\n@@ -575,1 +1530,6 @@\n-    \/** Return reference from method *\/\n+    \/**\n+     * Return {@link TypeKind#REFERENCE reference} from method.\n+     *\n+     * @jvms 6.5.areturn <em>areturn<\/em>\n+     * @see Kind#RETURN\n+     *\/\n@@ -578,1 +1538,6 @@\n-    \/** Return void from method *\/\n+    \/**\n+     * Return {@link TypeKind#VOID void} from method.\n+     *\n+     * @jvms 6.5.return <em>return<\/em>\n+     * @see Kind#RETURN\n+     *\/\n@@ -581,1 +1546,6 @@\n-    \/** Get static field from class *\/\n+    \/**\n+     * Get {@code static} field from class.\n+     *\n+     * @jvms 6.5.getstatic <em>getstatic<\/em>\n+     * @see Kind#FIELD_ACCESS\n+     *\/\n@@ -584,1 +1554,6 @@\n-    \/** Set static field in class *\/\n+    \/**\n+     * Set {@code static} field in class.\n+     *\n+     * @jvms 6.5.putstatic <em>putstatic<\/em>\n+     * @see Kind#FIELD_ACCESS\n+     *\/\n@@ -587,1 +1562,6 @@\n-    \/** Fetch field from object *\/\n+    \/**\n+     * Fetch field from object.\n+     *\n+     * @jvms 6.5.getfield <em>getfield<\/em>\n+     * @see Kind#FIELD_ACCESS\n+     *\/\n@@ -590,1 +1570,6 @@\n-    \/** Set field in object *\/\n+    \/**\n+     * Set field in object.\n+     *\n+     * @jvms 6.5.putfield <em>putfield<\/em>\n+     * @see Kind#FIELD_ACCESS\n+     *\/\n@@ -593,1 +1578,6 @@\n-    \/** Invoke instance method; dispatch based on class *\/\n+    \/**\n+     * Invoke instance method; dispatch based on class.\n+     *\n+     * @jvms 6.5.invokevirtual <em>invokevirtual<\/em>\n+     * @see Kind#INVOKE\n+     *\/\n@@ -598,1 +1588,4 @@\n-     * methods and methods of the current class and its supertypes\n+     * methods and methods of the current class and its supertypes.\n+     *\n+     * @jvms 6.5.invokevirtual <em>invokevirtual<\/em>\n+     * @see Kind#INVOKE\n@@ -602,1 +1595,6 @@\n-    \/** Invoke a class (static) method *\/\n+    \/**\n+     * Invoke a class ({@code static}) method.\n+     *\n+     * @jvms 6.5.invokestatic <em>invokestatic<\/em>\n+     * @see Kind#INVOKE\n+     *\/\n@@ -605,1 +1603,6 @@\n-    \/** Invoke interface method *\/\n+    \/**\n+     * Invoke interface method.\n+     *\n+     * @jvms 6.5.invokeinterface <em>invokeinterface<\/em>\n+     * @see Kind#INVOKE\n+     *\/\n@@ -608,1 +1611,6 @@\n-    \/** Invoke a dynamically-computed call site *\/\n+    \/**\n+     * Invoke a dynamically-computed call site.\n+     *\n+     * @jvms 6.5.invokedynamic <em>invokedynamic<\/em>\n+     * @see Kind#INVOKE_DYNAMIC\n+     *\/\n@@ -611,1 +1619,6 @@\n-    \/** Create new object *\/\n+    \/**\n+     * Create new object.\n+     *\n+     * @jvms 6.5.new <em>new<\/em>\n+     * @see Kind#NEW_OBJECT\n+     *\/\n@@ -614,1 +1627,6 @@\n-    \/** Create new array *\/\n+    \/**\n+     * Create new array.\n+     *\n+     * @jvms 6.5.newarray <em>newarray<\/em>\n+     * @see Kind#NEW_PRIMITIVE_ARRAY\n+     *\/\n@@ -617,1 +1635,6 @@\n-    \/** Create new array of reference *\/\n+    \/**\n+     * Create new array of {@link TypeKind#REFERENCE reference}.\n+     *\n+     * @jvms 6.5.anewarray <em>anewarray<\/em>\n+     * @see Kind#NEW_REF_ARRAY\n+     *\/\n@@ -620,1 +1643,6 @@\n-    \/** Get length of array *\/\n+    \/**\n+     * Get length of array.\n+     *\n+     * @jvms 6.5.arraylength <em>arraylength<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -623,1 +1651,6 @@\n-    \/** Throw exception or error *\/\n+    \/**\n+     * Throw exception or error.\n+     *\n+     * @jvms 6.5.athrow <em>athrow<\/em>\n+     * @see Kind#THROW_EXCEPTION\n+     *\/\n@@ -626,1 +1659,7 @@\n-    \/** Check whether object is of given type *\/\n+    \/**\n+     * Check whether object is of given type.\n+     *\n+     * @see Class#cast(Object)\n+     * @jvms 6.5.checkcast <em>checkcast<\/em>\n+     * @see Kind#TYPE_CHECK\n+     *\/\n@@ -629,1 +1668,7 @@\n-    \/** Determine if object is of given type *\/\n+    \/**\n+     * Determine if object is of given type.\n+     *\n+     * @see Class#isInstance(Object)\n+     * @jvms 6.5.instanceof <em>instanceof<\/em>\n+     * @see Kind#TYPE_CHECK\n+     *\/\n@@ -632,1 +1677,6 @@\n-    \/** Enter monitor for object *\/\n+    \/**\n+     * Enter monitor for object.\n+     *\n+     * @jvms 6.5.monitorenter <em>monitorenter<\/em>\n+     * @see Kind#MONITOR\n+     *\/\n@@ -635,1 +1685,6 @@\n-    \/** Exit monitor for object *\/\n+    \/**\n+     * Exit monitor for object.\n+     *\n+     * @jvms 6.5.monitorexit <em>monitorexit<\/em>\n+     * @see Kind#MONITOR\n+     *\/\n@@ -638,1 +1693,6 @@\n-    \/** Create new multidimensional array *\/\n+    \/**\n+     * Create new multidimensional array.\n+     *\n+     * @jvms 6.5.multianewarray <em>multianewarray<\/em>\n+     * @see Kind#NEW_MULTI_ARRAY\n+     *\/\n@@ -641,1 +1701,6 @@\n-    \/** Branch if reference is null *\/\n+    \/**\n+     * Branch if {@link TypeKind#REFERENCE reference} is {@code null}.\n+     *\n+     * @jvms 6.5.ifnull <em>ifnull<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -644,1 +1709,6 @@\n-    \/** Branch if reference not null *\/\n+    \/**\n+     * Branch if {@link TypeKind#REFERENCE reference} is not {@code null}.\n+     *\n+     * @jvms 6.5.ifnonnull <em>ifnonnull<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -647,1 +1717,6 @@\n-    \/** Branch always (wide index) *\/\n+    \/**\n+     * Branch always (wide index).\n+     *\n+     * @jvms 6.5.goto_w <em>goto_w<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -651,2 +1726,6 @@\n-     * Jump subroutine (wide index) is discontinued opcode\n-     * @see java.lang.classfile.instruction.DiscontinuedInstruction\n+     * (Discontinued) Jump subroutine (wide index); last used in major\n+     * version {@value ClassFile#JAVA_6_VERSION}.\n+     *\n+     * @jvms 4.9.1 Static Constraints\n+     * @jvms 6.5.jsr_w <em>jsr_w<\/em>\n+     * @see Kind#DISCONTINUED_JSR\n@@ -656,1 +1735,8 @@\n-    \/** Load int from local variable (wide index) *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.iload <em>iload<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -659,1 +1745,8 @@\n-    \/** Load long from local variable (wide index) *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.lload <em>lload<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -662,1 +1755,8 @@\n-    \/** Load float from local variable (wide index) *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.fload <em>fload<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -665,1 +1765,8 @@\n-    \/** Load double from local variable (wide index) *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.dload <em>dload<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -668,1 +1775,8 @@\n-    \/** Load reference from local variable (wide index) *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.aload <em>aload<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -671,1 +1785,8 @@\n-    \/** Store int into local variable (wide index) *\/\n+    \/**\n+     * Store {@link TypeKind#INT int} into local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.istore <em>istore<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -674,1 +1795,8 @@\n-    \/** Store long into local variable (wide index) *\/\n+    \/**\n+     * Store {@link TypeKind#LONG long} into local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.lstore <em>lstore<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -677,1 +1805,8 @@\n-    \/** Store float into local variable (wide index) *\/\n+    \/**\n+     * Store {@link TypeKind#FLOAT float} into local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.fstore <em>fstore<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -680,1 +1815,8 @@\n-    \/** Store double into local variable (wide index) *\/\n+    \/**\n+     * Store {@link TypeKind#DOUBLE double} into local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.dstore <em>dstore<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -683,1 +1825,9 @@\n-    \/** Store reference into local variable (wide index) *\/\n+    \/**\n+     * Store {@link TypeKind#REFERENCE reference} into local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     * Can also store the {@link TypeKind##returnAddress returnAddress} type.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.astore <em>astore<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -687,2 +1837,8 @@\n-     * Return from subroutine (wide index) is discontinued opcode\n-     * @see java.lang.classfile.instruction.DiscontinuedInstruction\n+     * (Discontinued) Return from subroutine (wide index); last used in major\n+     * version {@value ClassFile#JAVA_6_VERSION}.\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 4.9.1 Static Constraints\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.ret <em>ret<\/em>\n+     * @see Kind#DISCONTINUED_RET\n@@ -692,1 +1848,8 @@\n-    \/** Increment local variable by constant (wide index) *\/\n+    \/**\n+     * Increment local variable by constant (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.iinc <em>iinc<\/em>\n+     * @see Kind#INCREMENT\n+     *\/\n@@ -696,1 +1859,2 @@\n-     * Kinds of opcodes.\n+     * Kinds of opcodes.  Each kind of opcode has its own modeling interface\n+     * for its instructions.\n@@ -700,1 +1864,1 @@\n-    public static enum Kind {\n+    public enum Kind {\n@@ -703,1 +1867,1 @@\n-         * Load from local variable\n+         * Load from local variable.\n@@ -705,0 +1869,1 @@\n+         * @see LoadInstruction\n@@ -739,1 +1904,1 @@\n-         * Store into local variable\n+         * Store into local variable.\n@@ -741,0 +1906,1 @@\n+         * @see StoreInstruction\n@@ -775,1 +1941,1 @@\n-         * Increment local variable\n+         * Increment local variable.\n@@ -777,0 +1943,1 @@\n+         * @see IncrementInstruction\n@@ -783,1 +1950,1 @@\n-         * Branch\n+         * Branch.\n@@ -785,0 +1952,1 @@\n+         * @see BranchInstruction\n@@ -807,1 +1975,1 @@\n-         * Access jump table by key match and jump\n+         * Access jump table by key match and jump.\n@@ -809,0 +1977,1 @@\n+         * @see LookupSwitchInstruction\n@@ -814,1 +1983,1 @@\n-         * Access jump table by index and jump\n+         * Access jump table by index and jump.\n@@ -816,0 +1985,1 @@\n+         * @see TableSwitchInstruction\n@@ -821,1 +1991,1 @@\n-         * Return from method\n+         * Return from method.\n@@ -823,0 +1993,1 @@\n+         * @see ReturnInstruction\n@@ -833,1 +2004,1 @@\n-         * Throw exception or error\n+         * Throw exception or error.\n@@ -835,0 +2006,1 @@\n+         * @see ThrowInstruction\n@@ -840,1 +2012,1 @@\n-         * Access field\n+         * Access field.\n@@ -842,0 +2014,1 @@\n+         * @see FieldInstruction\n@@ -850,1 +2023,1 @@\n-         * Invoke method or constructor\n+         * Invoke method or constructor.\n@@ -852,0 +2025,1 @@\n+         * @see InvokeInstruction\n@@ -860,1 +2034,1 @@\n-         * Invoke a dynamically-computed call site\n+         * Invoke a dynamically-computed call site.\n@@ -862,0 +2036,1 @@\n+         * @see InvokeDynamicInstruction\n@@ -867,1 +2042,1 @@\n-         * Create new object\n+         * Create new object.\n@@ -869,0 +2044,1 @@\n+         * @see NewObjectInstruction\n@@ -874,1 +2050,1 @@\n-         * Create new array\n+         * Create new array.\n@@ -876,0 +2052,1 @@\n+         * @see NewPrimitiveArrayInstruction\n@@ -881,1 +2058,1 @@\n-         * Create new reference array\n+         * Create new {@link TypeKind#REFERENCE reference} array.\n@@ -883,0 +2060,1 @@\n+         * @see NewReferenceArrayInstruction\n@@ -888,1 +2066,1 @@\n-         * Create new multidimensional array\n+         * Create new multidimensional array.\n@@ -890,0 +2068,1 @@\n+         * @see NewMultiArrayInstruction\n@@ -895,1 +2074,1 @@\n-         * Check whether object is of given type\n+         * Check whether object is of given type.\n@@ -897,0 +2076,1 @@\n+         * @see TypeCheckInstruction\n@@ -903,1 +2083,1 @@\n-         * Load from array\n+         * Load from array.\n@@ -905,0 +2085,1 @@\n+         * @see ArrayLoadInstruction\n@@ -917,1 +2098,1 @@\n-         * Store into array\n+         * Store into array.\n@@ -919,0 +2100,1 @@\n+         * @see ArrayStoreInstruction\n@@ -931,1 +2113,1 @@\n-         * Stack operations\n+         * Stack operations.\n@@ -933,0 +2115,1 @@\n+         * @see StackInstruction\n@@ -946,1 +2129,1 @@\n-         * Type conversions\n+         * Type conversions.\n@@ -948,0 +2131,1 @@\n+         * @see ConvertInstruction\n@@ -967,1 +2151,1 @@\n-         * Operators\n+         * Operators.\n@@ -969,0 +2153,1 @@\n+         * @see OperatorInstruction\n@@ -1015,1 +2200,1 @@\n-         * Constants\n+         * Constants.\n@@ -1017,0 +2202,1 @@\n+         * @see ConstantInstruction\n@@ -1041,1 +2227,1 @@\n-         * Monitor\n+         * Monitor.\n@@ -1043,0 +2229,1 @@\n+         * @see MonitorInstruction\n@@ -1049,1 +2236,1 @@\n-         * Do nothing\n+         * Do nothing.\n@@ -1051,0 +2238,1 @@\n+         * @see NopInstruction\n@@ -1056,1 +2244,1 @@\n-         * Discontinued jump subroutine\n+         * Discontinued jump subroutine.\n@@ -1058,0 +2246,1 @@\n+         * @see DiscontinuedInstruction.JsrInstruction\n@@ -1060,1 +2249,0 @@\n-         * @see java.lang.classfile.instruction.DiscontinuedInstruction\n@@ -1065,1 +2253,1 @@\n-         * Discontinued return from subroutine\n+         * Discontinued return from subroutine.\n@@ -1067,0 +2255,1 @@\n+         * @see DiscontinuedInstruction.RetInstruction\n@@ -1069,1 +2258,0 @@\n-         * @see java.lang.classfile.instruction.DiscontinuedInstruction\n@@ -1093,0 +2281,2 @@\n+     * <p>\n+     * {@code wide} extends local variable index by additional bytes.\n@@ -1094,0 +2284,1 @@\n+     * @jvms 6.5.wide <em>wide<\/em>\n@@ -1112,0 +2303,2 @@\n+     *\n+     * @see Instruction#sizeInBytes() Instruction::sizeInBytes\n@@ -1116,1 +2309,2 @@\n-     * {@return instruction kind}\n+     * {@return operation kind}  Each kind of operation has its own modeling\n+     * interface to model instructions belonging to that kind.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Opcode.java","additions":1445,"deletions":251,"binary":false,"changes":1696,"status":"modified"},{"patch":"@@ -29,0 +29,3 @@\n+import java.lang.classfile.instruction.LoadInstruction;\n+import java.lang.classfile.instruction.NewPrimitiveArrayInstruction;\n+import java.lang.classfile.instruction.StoreInstruction;\n@@ -36,7 +39,11 @@\n- * Describes the data types Java Virtual Machine operates on.\n- * This omits {@code returnAddress} (JVMS {@jvms 2.3.3}),\n- * which is only used by discontinued {@link\n- * DiscontinuedInstruction.JsrInstruction jsr} and {@link\n- * DiscontinuedInstruction.RetInstruction ret} instructions,\n- * and includes {@link #VOID void} (JVMS {@jvms 4.3.3}), which\n- * appears as a method return type.\n+ * Describes the data types Java Virtual Machine operates on.  This omits {@code\n+ * returnAddress} (JVMS {@jvms 2.3.3}) and includes {@link #VOID void} (JVMS\n+ * {@jvms 4.3.3}), which appears as a method return type.\n+ * <p>\n+ * The <code>{@index returnAddress}<\/code> type is only used by discontinued\n+ * {@linkplain DiscontinuedInstruction.JsrInstruction jump subroutine} and\n+ * {@linkplain DiscontinuedInstruction.RetInstruction return from subroutine}\n+ * instructions.  Jump subroutine instructions push {@code returnAddress} to the\n+ * operand stack; {@link StoreInstruction astore} instructions store {@code\n+ * returnAddress} from the operand stack to local variables; return from\n+ * subroutine instructions load {@code returnAddress} from local variables.\n@@ -167,1 +174,4 @@\n-     * @jvms 6.5.newarray <i>newarray<\/i>\n+     *\n+     * @jvms 6.5.newarray <em>newarray<\/em>\n+     * @see NewPrimitiveArrayInstruction\n+     * @see #fromNewarrayCode(int) fromNewarrayCode(int)\n@@ -178,0 +188,1 @@\n+     *\n@@ -188,0 +199,3 @@\n+     *\n+     * @see LoadInstruction\n+     * @see StoreInstruction\n@@ -196,0 +210,1 @@\n+     *\n@@ -198,1 +213,3 @@\n-     * @jvms 6.5.newarray <i>newarray<\/i>\n+     * @jvms 6.5.newarray <em>newarray<\/em>\n+     * @see NewPrimitiveArrayInstruction\n+     * @see #newarrayCode() newarrayCode()\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/TypeKind.java","additions":26,"deletions":9,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -38,2 +39,2 @@\n- * attribute.  Corresponding opcodes will have a {@code kind} of {@link\n- * Opcode.Kind#ARRAY_LOAD}.  Delivered as a {@link CodeElement} when\n+ * attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind}\n+ * of {@link Opcode.Kind#ARRAY_LOAD}.  Delivered as a {@link CodeElement} when\n@@ -41,0 +42,8 @@\n+ * <p>\n+ * An array load instruction can be viewed as a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ArrayLoadInstruction\" target=\"CodeBuilder#arrayLoad(TypeKind)\" :\n+ * ArrayLoadInstruction(TypeKind typeKind) \/\/ @link substring=\"typeKind\" target=\"#typeKind\"\n+ * }\n+ * where {@code typeKind} is not {@link TypeKind#VOID void}, and {@link\n+ * TypeKind#BOOLEAN boolean} is converted to {@link TypeKind#BYTE byte}.\n@@ -42,0 +51,2 @@\n+ * @see Opcode.Kind#ARRAY_LOAD\n+ * @see CodeBuilder#arrayLoad CodeBuilder::arrayLoad\n@@ -47,1 +58,1 @@\n-     * {@return the component type of the array} The {@link TypeKind#BYTE byte}\n+     * {@return the component type of the array}  The {@link TypeKind#BYTE byte}\n@@ -49,1 +60,2 @@\n-     * {@link TypeKind#BOOLEAN boolean} arrays.\n+     * {@link TypeKind#BOOLEAN boolean} arrays, so this never returns\n+     * {@code boolean}.\n@@ -59,1 +71,1 @@\n-     *         {@link Opcode.Kind#ARRAY_LOAD}.\n+     *         {@link Opcode.Kind#ARRAY_LOAD}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ArrayLoadInstruction.java","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -38,2 +39,2 @@\n- * attribute.  Corresponding opcodes will have a {@code kind} of {@link\n- * Opcode.Kind#ARRAY_STORE}.  Delivered as a {@link CodeElement} when\n+ * attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind}\n+ * of {@link Opcode.Kind#ARRAY_STORE}.  Delivered as a {@link CodeElement} when\n@@ -41,0 +42,8 @@\n+ * <p>\n+ * An array store instruction can be viewed as a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ArrayStoreInstruction\" target=\"CodeBuilder#arrayStore(TypeKind)\" :\n+ * ArrayStoreInstruction(TypeKind typeKind) \/\/ @link substring=\"typeKind\" target=\"#typeKind\"\n+ * }\n+ * where {@code typeKind} is not {@link TypeKind#VOID void}, and {@link\n+ * TypeKind#BOOLEAN boolean} is converted to {@link TypeKind#BYTE byte}.\n@@ -42,0 +51,2 @@\n+ * @see Opcode.Kind#ARRAY_STORE\n+ * @see CodeBuilder#arrayStore CodeBuilder::arrayStore\n@@ -47,1 +58,1 @@\n-     * {@return the component type of the array} The {@link TypeKind#BYTE byte}\n+     * {@return the component type of the array}  The {@link TypeKind#BYTE byte}\n@@ -49,1 +60,2 @@\n-     * {@link TypeKind#BOOLEAN boolean} arrays.\n+     * {@link TypeKind#BOOLEAN boolean} arrays, so this never returns\n+     * {@code boolean}.\n@@ -59,1 +71,1 @@\n-     *         {@link Opcode.Kind#ARRAY_STORE}.\n+     *         {@link Opcode.Kind#ARRAY_STORE}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ArrayStoreInstruction.java","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,5 +27,1 @@\n-import java.lang.classfile.CodeElement;\n-import java.lang.classfile.CodeModel;\n-import java.lang.classfile.Instruction;\n-import java.lang.classfile.Label;\n-import java.lang.classfile.Opcode;\n+import java.lang.classfile.*;\n@@ -38,3 +34,17 @@\n- * code} array of a {@code Code} attribute.  Corresponding opcodes will have a\n- * {@code kind} of {@link Opcode.Kind#BRANCH}.  Delivered as a {@link\n- * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * code} array of a {@code Code} attribute.  Corresponding opcodes have a\n+ * {@linkplain Opcode#kind() kind} of {@link Opcode.Kind#BRANCH}.  Delivered as\n+ * a {@link CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * <p>\n+ * A branch instruction can be viewed as a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"BranchInstruction\" target=\"#of\":\n+ * BranchInstruction(\n+ *     Opcode opcode, \/\/ @link substring=\"Opcode\" target=\"#opcode()\"\n+ *     Label target \/\/ @link substring=\"Label\" target=\"#target()\"\n+ * )\n+ * }\n+ * <p>\n+ * Due to physical restrictions, some types of instructions cannot encode labels\n+ * too far away in the list of code elements.  In such cases, the {@link\n+ * ClassFile.ShortJumpsOption} controls how an invalid branch instruction model\n+ * is written by a {@link CodeBuilder}.\n@@ -42,0 +52,3 @@\n+ * @see Opcode.Kind#BRANCH\n+ * @see CodeBuilder#branch CodeBuilder::branch\n+ * @see ClassFile.ShortJumpsOption\n@@ -48,1 +61,1 @@\n-     * {@return the target of the branch}\n+     * {@return the branch target of this instruction}\n@@ -59,1 +72,1 @@\n-     *         {@link Opcode.Kind#BRANCH}.\n+     *         {@link Opcode.Kind#BRANCH}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/BranchInstruction.java","additions":23,"deletions":10,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -39,4 +40,21 @@\n- * A pseudo-instruction which models a single entry in the\n- * {@link CharacterRangeTableAttribute}.  Delivered as a {@link CodeElement}\n- * during traversal of the elements of a {@link CodeModel}, according to\n- * the setting of the {@link ClassFile.DebugElementsOption} option.\n+ * A pseudo-instruction which models a single entry in the {@link\n+ * CharacterRangeTableAttribute CharacterRangeTable} attribute.  Delivered as a\n+ * {@link CodeElement} during traversal of the elements of a {@link CodeModel},\n+ * according to the setting of the {@link ClassFile.DebugElementsOption} option.\n+ * <p>\n+ * A character range entry can be viewed a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"CharacterRange\" target=\"#of\":\n+ * CharacterRange(\n+ *     Label startScope, \/\/ @link substring=\"startScope\" target=\"#startScope\"\n+ *     Label endScope, \/\/ @link substring=\"endScope\" target=\"#endScope\"\n+ *     int characterRangeStart, \/\/ @link substring=\"characterRangeStart\" target=\"#characterRangeStart\"\n+ *     int characterRangeEnd, \/\/ @link substring=\"characterRangeEnd\" target=\"#characterRangeEnd\"\n+ *     int flags \/\/ @link substring=\"flags\" target=\"#flags\"\n+ * )\n+ * }\n+ * <p>\n+ * Another model, {@link CharacterRangeInfo}, also models a character range\n+ * entry;  it has no dependency on a {@code CodeModel} and represents of bci\n+ * values as {@code int}s instead of {@code Label}s, and is used as components\n+ * of a {@link CharacterRangeTableAttribute}.\n@@ -44,0 +62,3 @@\n+ * @see CharacterRangeInfo\n+ * @see CodeBuilder#characterRange CodeBuilder::characterRange\n+ * @see ClassFile.DebugElementsOption\n@@ -117,1 +138,1 @@\n-     * @see java.lang.classfile.attribute.CharacterRangeInfo#flags()\n+     * @see CharacterRangeInfo#flags()\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/CharacterRange.java","additions":26,"deletions":5,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -41,5 +42,12 @@\n- * Code} attribute, including \"intrinsic constant\" instructions (e.g., {@code\n- * iconst_0}), \"argument constant\" instructions (e.g., {@code bipush}), and \"load\n- * constant\" instructions (e.g., {@code LDC}).  Corresponding opcodes will have\n- * a {@code kind} of {@link Opcode.Kind#CONSTANT}.  Delivered as a {@link\n- * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * Code} attribute, including {@linkplain IntrinsicConstantInstruction\n+ * \"intrinsic\"}, {@linkplain ArgumentConstantInstruction \"argument\"}, and\n+ * {@linkplain LoadConstantInstruction \"load\"} constant instructions.\n+ * Corresponding opcodes have a {@linkplain Opcode#kind() kind} of {@link\n+ * Opcode.Kind#CONSTANT}.  Delivered as a {@link CodeElement} when traversing\n+ * the elements of a {@link CodeModel}.\n+ * <p>\n+ * A constant-load instruction can be viewed as a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ConstantInstruction\" target=\"CodeBuilder#loadConstant(ConstantDesc)\" :\n+ * ConstantInstruction(ConstantDesc constantValue) \/\/ @link substring=\"constantValue\" target=\"#constantValue()\"\n+ * }\n@@ -47,0 +55,3 @@\n+ * @see Opcode.Kind#CONSTANT\n+ * @see CodeBuilder#loadConstant(ConstantDesc) CodeBuilder::loadConstant\n+ * @sealedGraph\n@@ -57,1 +68,2 @@\n-     * {@return the type of the constant}\n+     * {@return the {@linkplain TypeKind##computational-type computational type} of the constant}\n+     * This is derived from the {@link #constantValue() constantValue}.\n@@ -62,2 +74,16 @@\n-     * Models an \"intrinsic constant\" instruction (e.g., {@code\n-     * iconst_0}).\n+     * Models an \"intrinsic constant\" instruction, which encodes\n+     * the constant value in its opcode. Examples include {@link\n+     * Opcode#ACONST_NULL aconst_null} and {@link\n+     * Opcode#ICONST_0 iconst_0}.\n+     * <p>\n+     * An intrinsic constant instruction can be viewed as a record:\n+     * {@snippet lang=text :\n+     * \/\/ @link substring=\"IntrinsicConstantInstruction\" target=\"#ofIntrinsic\" :\n+     * IntrinsicConstantInstruction(Opcode opcode) \/\/ @link substring=\"opcode\" target=\"#opcode()\"\n+     * }\n+     * where:\n+     * <dl>\n+     * <dt>{@link #opcode() opcode}<\/dt>\n+     * <dd>Must be of the constant kind and have a {@linkplain\n+     * Opcode#sizeIfFixed() fixed size} of 1.<\/dd>\n+     * <\/dl>\n@@ -65,0 +91,2 @@\n+     * @see Opcode.Kind#CONSTANT\n+     * @see ConstantInstruction#ofIntrinsic ConstantInstruction::ofIntrinsic\n@@ -70,3 +98,0 @@\n-        \/**\n-         * {@return the type of the constant}\n-         *\/\n@@ -80,2 +105,19 @@\n-     * Models an \"argument constant\" instruction (e.g., {@code\n-     * bipush}).\n+     * Models an \"argument constant\" instruction, which encodes the\n+     * constant value in the instruction directly. Includes {@link\n+     * Opcode#BIPUSH bipush} and {@link Opcode#SIPUSH sipush} instructions.\n+     * <p>\n+     * An argument constant instruction can be viewed a record:\n+     * {@snippet lang=text :\n+     * \/\/ @link substring=\"ArgumentConstantInstruction\" target=\"#ofArgument\" :\n+     * ArgumentConstantInstruction(\n+     *     Opcode opcode, \/\/ @link substring=\"opcode\" target=\"#opcode()\"\n+     *     int constantValue \/\/ @link substring=\"constantValue\" target=\"#constantValue()\"\n+     * )\n+     * }\n+     * where:\n+     * <ul>\n+     * <li>{@code opcode} must be one of {@code bipush} or {@code sipush}.\n+     * <li>{@code constantValue} must be in the range of {@code byte}, {@code\n+     * [-128, 127]}, for {@code bipush},  and in the range of {@code short},\n+     * {@code [-32768, 32767]}, for {@code sipush}.\n+     * <\/ul>\n@@ -83,0 +125,5 @@\n+     * @see Opcode.Kind#CONSTANT\n+     * @see ConstantInstruction#ofArgument ConstantInstruction::ofArgument\n+     * @see CodeBuilder#loadConstant(int) CodeBuilder::loadConstant(int)\n+     * @see CodeBuilder#bipush CodeBuilder::bipush\n+     * @see CodeBuilder#sipush CodeBuilder::sipush\n@@ -92,3 +139,0 @@\n-        \/**\n-         * {@return the type of the constant}\n-         *\/\n@@ -102,2 +146,15 @@\n-     * Models a \"load constant\" instruction (e.g., {@code\n-     * ldc}).\n+     * Models a \"load constant\" instruction, which encodes the  constant value\n+     * in the constant pool.  Includes {@link Opcode#LDC ldc} and {@link\n+     * Opcode#LDC_W ldc_w}, and {@link Opcode#LDC2_W ldc2_w} instructions.\n+     * <p>\n+     * A load constant instruction can be viewed as one of these records:\n+     * {@snippet lang=text :\n+     * \/\/ @link substring=\"LoadConstantInstruction\" target=\"CodeBuilder#ldc(ConstantDesc)\" :\n+     * LoadConstantInstruction(ConstantDesc constantValue) \/\/ @link substring=\"constantValue\" target=\"#constantValue()\"\n+     * \/\/ @link substring=\"LoadConstantInstruction\" target=\"CodeBuilder#ldc(LoadableConstantEntry)\" :\n+     * LoadConstantInstruction(LoadableConstantEntry constantEntry) \/\/ @link substring=\"constantEntry\" target=\"#constantEntry()\"\n+     * }\n+     * <p>\n+     * Though the generic constant-load model and the \"load constant\" model both\n+     * hold a {@code constantValue}, the generic instruction may be more optimized,\n+     * avoiding extra constant pool entries and using smaller-sized instructions.\n@@ -105,0 +162,3 @@\n+     * @see Opcode.Kind#CONSTANT\n+     * @see ConstantInstruction#ofLoad ConstantInstruction::ofLoad\n+     * @see CodeBuilder#ldc CodeBuilder::ldc\n@@ -116,3 +176,0 @@\n-        \/**\n-         * {@return the type of the constant}\n-         *\/\n@@ -142,0 +199,4 @@\n+     * <p>\n+     * {@code value} must be in the range of {@code byte}, {@code [-128, 127]},\n+     * for {@link Opcode#BIPUSH},  and in the range of {@code short}, {@code\n+     * [-32768, 32767]}, for {@link Opcode#SIPUSH}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ConstantInstruction.java","additions":82,"deletions":21,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -39,3 +40,18 @@\n- * {@code Code} attribute, such as {@code i2l}.  Corresponding opcodes will have\n- * a {@code kind} of {@link Opcode.Kind#CONVERT}.  Delivered as a {@link\n- * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * {@code Code} attribute, such as {@link Opcode#I2L i2l}.  Corresponding opcodes\n+ * have a {@linkplain Opcode#kind() kind} of {@link Opcode.Kind#CONVERT}.\n+ * Delivered as a {@link CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * <p>\n+ * A primitive conversion instruction can be viewed a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ConvertInstruction\" target=\"#of(TypeKind, TypeKind)\" :\n+ * ConvertInstruction(\n+ *     TypeKind fromType, \/\/ @link substring=\"fromType\" target=\"#fromType\"\n+ *     TypeKind toType \/\/ @link substring=\"toType\" target=\"#toType\"\n+ * )\n+ * }\n+ * where these conversions are valid:\n+ * <ul>\n+ * <li>Between {@code int}, {@code long}, {@code float}, and {@code double}, where\n+ * {@code fromType != toType};\n+ * <li>From {@code int} to {@code byte}, {@code char}, and {@code short}.\n+ * <\/ul>\n@@ -43,0 +59,2 @@\n+ * @see Opcode.Kind#CONVERT\n+ * @see CodeBuilder#conversion CodeBuilder::conversion\n@@ -58,1 +76,6 @@\n-     * {@return A conversion instruction}\n+     * {@return a conversion instruction}  Valid conversions are:\n+     * <ul>\n+     * <li>Between {@code int}, {@code long}, {@code float}, and {@code double},\n+     * where {@code fromType != toType};\n+     * <li>From {@code int} to {@code byte}, {@code char}, and {@code short}.\n+     * <\/ul>\n@@ -62,0 +85,1 @@\n+     * @throws IllegalArgumentException if this is not a valid conversion\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ConvertInstruction.java","additions":28,"deletions":4,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -27,5 +27,1 @@\n-import java.lang.classfile.CodeElement;\n-import java.lang.classfile.CodeModel;\n-import java.lang.classfile.Instruction;\n-import java.lang.classfile.Label;\n-import java.lang.classfile.Opcode;\n+import java.lang.classfile.*;\n@@ -38,3 +34,3 @@\n- * Models instruction discontinued from the {@code code} array of a {@code Code}\n- * attribute. Delivered as a {@link CodeElement} when traversing the elements of\n- * a {@link CodeModel}.\n+ * Marker interface for instruction discontinued from the {@code code} array of\n+ * a {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n+ * the elements of a {@link CodeModel}.\n@@ -42,0 +38,8 @@\n+ * @apiNote\n+ * While most instructions have convenience factory methods in {@link\n+ * CodeBuilder}, discontinued instructions can only be supplied to code builders\n+ * explicitly with {@link CodeBuilder#with CodeBuilder::with} to discourage\n+ * their use.\n+ *\n+ * @jvms 4.9.1 Static Constraints\n+ * @sealedGraph\n@@ -47,5 +51,22 @@\n-     * Models JSR and JSR_W instructions discontinued from the {@code code}\n-     * array of a {@code Code} attribute since class file version 51.0.\n-     * Corresponding opcodes will have a {@code kind} of\n-     * {@link Opcode.Kind#DISCONTINUED_JSR}.  Delivered as a {@link CodeElement}\n-     * when traversing the elements of a {@link CodeModel}.\n+     * Models jump subroutine instructions discontinued from the {@code code}\n+     * array of a {@code Code} attribute since class file major version {@value\n+     * ClassFile#JAVA_7_VERSION} (JVMS {@jvms 4.9.1}).  Corresponding opcodes\n+     * have a {@linkplain Opcode#kind() kind} of {@link Opcode.Kind#DISCONTINUED_JSR}.\n+     * Delivered as a {@link CodeElement} when traversing the elements of a\n+     * {@link CodeModel}.\n+     * <p>\n+     * A jump subroutine instruction can be viewed as a record:\n+     * {@snippet lang=text :\n+     * \/\/ @link substring=\"JsrInstruction\" target=\"#of(Label)\" :\n+     * JsrInstruction(Label target) \/\/ @link substring=\"target\" target=\"#target()\"\n+     * }\n+     * <p>\n+     * Due to physical restrictions, {@link Opcode#JSR jsr} instructions cannot\n+     * encode labels too far away in the list of code elements.  In such cases,\n+     * the {@link ClassFile.ShortJumpsOption} controls how an invalid {@code jsr}\n+     * instruction model is written by a {@link CodeBuilder}.\n+     * <p>\n+     * Jump subroutine instructions push a {@link TypeKind##returnAddress\n+     * returnAddress} value to the operand stack, and {@link StoreInstruction\n+     * astore} series of instructions can then store this value to a local\n+     * variable slot.\n@@ -53,0 +74,1 @@\n+     * @see Opcode.Kind#DISCONTINUED_JSR\n@@ -60,1 +82,1 @@\n-         * {@return the target of the JSR instruction}\n+         * {@return the target of the jump subroutine instruction}\n@@ -65,1 +87,1 @@\n-         * {@return a JSR instruction}\n+         * {@return a jump subroutine instruction}\n@@ -67,1 +89,5 @@\n-         * @param op the opcode for the specific type of JSR instruction,\n+         * @apiNote\n+         * The explicit {@code op} argument allows creating {@link Opcode#JSR_W\n+         * jsr_w} instructions to avoid short jumps.\n+         *\n+         * @param op the opcode for the specific type of jump subroutine instruction,\n@@ -79,1 +105,1 @@\n-         * {@return a JSR instruction}\n+         * {@return a jump subroutine instruction}\n@@ -89,3 +115,4 @@\n-     * Models RET and RET_W instructions discontinued from the {@code code}\n-     * array of a {@code Code} attribute since class file version 51.0.\n-     * Corresponding opcodes will have a {@code kind} of\n+     * Models return from subroutine instructions discontinued from the {@code\n+     * code} array of a {@code Code} attribute since class file major version\n+     * {@value ClassFile#JAVA_7_VERSION} (JVMS {@jvms 4.9.1}).\n+     * Corresponding opcodes have a {@linkplain Opcode#kind() kind} of\n@@ -94,0 +121,11 @@\n+     * <p>\n+     * A return from subroutine instruction can be viewed as a record:\n+     * {@snippet lang=text :\n+     * \/\/ @link substring=\"RetInstruction\" target=\"#of(int)\" :\n+     * RetInstruction(int slot) \/\/ @link substring=\"slot\" target=\"#slot()\"\n+     * }\n+     * where {@code slot} must be within {@code [0, 65535]}.\n+     * <p>\n+     * {@link StoreInstruction astore} series of instructions store a {@link\n+     * TypeKind##returnAddress returnAddress} value to a local variable slot,\n+     * making the slot usable by a return from subroutine instruction.\n@@ -95,0 +133,2 @@\n+     * @jvms 6.5.ret <em>ret<\/em>\n+     * @see Opcode.Kind#DISCONTINUED_RET\n@@ -103,0 +143,1 @@\n+         * The value is within {@code [0, 65535]}.\n@@ -107,1 +148,10 @@\n-         * {@return a RET or RET_W instruction}\n+         * {@return a return from subroutine instruction}\n+         * <p>\n+         * {@code slot} must be in the closed range of {@code [0, 255]} for\n+         * {@link Opcode#RET ret}, or within {@code [0, 65535]} for {@link\n+         * Opcode#RET_W wide ret}.\n+         *\n+         * @apiNote\n+         * The explicit {@code op} argument allows creating {@code wide ret}\n+         * instructions with {@code slot} in the range of regular {@code ret}\n+         * instructions.\n@@ -109,1 +159,1 @@\n-         * @param op the opcode for the specific type of RET instruction,\n+         * @param op the opcode for the specific type of return from subroutine instruction,\n@@ -121,1 +171,3 @@\n-         * {@return a RET instruction}\n+         * {@return a return from subroutine instruction}\n+         * <p>\n+         * {@code slot} must be within {@code [0, 65535]}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/DiscontinuedInstruction.java","additions":75,"deletions":23,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -31,0 +32,1 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -37,6 +39,16 @@\n- * A pseudo-instruction modeling an entry in the exception table of a code\n- * attribute.  Entries in the exception table model catch and finally blocks.\n- * Delivered as a {@link CodeElement} when traversing the contents\n- * of a {@link CodeModel}.\n- *\n- * @see PseudoInstruction\n+ * A pseudo-instruction modeling an entry in the {@code exception_table} array\n+ * of a {@link CodeAttribute Code} attribute.  Catch (JVMS {@jvms 3.12}) and\n+ * finally (JVMS {@jvms 3.14}) blocks in Java source code compile to exception\n+ * table entries.  Delivered as a {@link CodeElement} when traversing the\n+ * contents of a {@link CodeModel}.\n+ * <p>\n+ * An exception table entry can be viewed as a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ExceptionCatch\" target=\"#of(Label, Label, Label, Optional)\" :\n+ * ExceptionCatch(\n+ *     Label handler, \/\/ @link substring=\"handler\" target=\"#handler\"\n+ *     Label tryStart, \/\/ @link substring=\"tryStart\" target=\"#tryStart\"\n+ *     Label tryEnd, \/\/ @link substring=\"tryEnd\" target=\"#tryEnd\"\n+ *     Optional<ClassEntry> catchType \/\/ @link substring=\"catchType\" target=\"#catchType\"\n+ * )\n+ * }\n@@ -44,0 +56,2 @@\n+ * @see CodeBuilder#exceptionCatch CodeBuilder::exceptionCatch\n+ * @jvms 4.7.3 The {@code Code} Attribute\n@@ -64,2 +78,2 @@\n-     * {@return the type of the exception to catch, or empty if this handler is\n-     * unconditional}\n+     * {@return the type of the exception to catch, or empty if this handler\n+     * catches everything}\n@@ -83,1 +97,1 @@\n-     * {@return an exception table pseudo-instruction for an unconditional handler}\n+     * {@return an exception table pseudo-instruction to catch everything}\n@@ -85,2 +99,2 @@\n-     * @param tryStart the beginning of the instruction range for the gaurded instructions\n-     * @param tryEnd the end of the instruction range for the gaurded instructions\n+     * @param tryStart the beginning of the instruction range for the guarded instructions\n+     * @param tryEnd the end of the instruction range for the guarded instructions\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ExceptionCatch.java","additions":25,"deletions":11,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -43,2 +44,2 @@\n- * attribute.  Corresponding opcodes will have a {@code kind} of {@link\n- * Opcode.Kind#FIELD_ACCESS}.  Delivered as a {@link CodeElement} when\n+ * attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind}\n+ * of {@link Opcode.Kind#FIELD_ACCESS}.  Delivered as a {@link CodeElement} when\n@@ -46,0 +47,9 @@\n+ * <p>\n+ * A field access instruction can be viewed as a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"FieldInstruction\" target=\"#of(Opcode, FieldRefEntry)\" :\n+ * FieldInstruction(\n+ *     Opcode opcode, \/\/ @link substring=\"opcode\" target=\"#opcode()\"\n+ *     FieldRefEntry field, \/\/ @link substring=\"field\" target=\"#field()\"\n+ * )\n+ * }\n@@ -47,0 +57,2 @@\n+ * @see Opcode.Kind#FIELD_ACCESS\n+ * @see CodeBuilder#fieldAccess CodeBuilder::fieldAccess\n@@ -71,1 +83,5 @@\n-     * {@return the field descriptor of the field}\n+     * {@return the field descriptor string of the field}\n+     *\n+     * @apiNote\n+     * A symbolic descriptor for the type of the field is available through\n+     * {@link #typeSymbol() typeSymbol()}.\n@@ -106,0 +122,2 @@\n+     * @throws IllegalArgumentException if the opcode kind is not\n+     *         {@link Opcode.Kind#FIELD_ACCESS}.\n@@ -121,0 +139,2 @@\n+     * @throws IllegalArgumentException if the opcode kind is not\n+     *         {@link Opcode.Kind#FIELD_ACCESS}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/FieldInstruction.java","additions":23,"deletions":3,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -36,2 +37,2 @@\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n- * {@link Opcode.Kind#INCREMENT}.  Delivered as a {@link CodeElement} when\n+ * {@code Code} attribute.  Corresponding opcodes have a {@linkplain Opcode#kind()\n+ * kind} of {@link Opcode.Kind#INCREMENT}.  Delivered as a {@link CodeElement} when\n@@ -39,0 +40,14 @@\n+ * <p>\n+ * A local variable increment instruction can be viewed as a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"IncrementInstruction\" target=\"#of\" :\n+ * IncrementInstruction(\n+ *     int slot, \/\/ @link substring=\"slot\" target=\"#slot()\"\n+ *     int constant \/\/ @link substring=\"constant\" target=\"#constant()\"\n+ * )\n+ * }\n+ * where\n+ * <ul>\n+ * <li>{@code slot} must be within {@code [0, 65535]}.\n+ * <li>{@code constant} must be within {@code [-32768, 32767]}.\n+ * <\/ul>\n@@ -40,0 +55,3 @@\n+ * @see Opcode.Kind#INCREMENT\n+ * @see CodeBuilder#iinc CodeBuilder::iinc\n+ * @jvms 6.5.iinc <em>iinc<\/em>\n@@ -57,0 +75,4 @@\n+     * <ul>\n+     * <li>{@code slot} must be within {@code [0, 65535]}.\n+     * <li>{@code constant} must be within {@code [-32768, 32767]}.\n+     * <\/ul>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/IncrementInstruction.java","additions":24,"deletions":2,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -30,0 +31,1 @@\n+import java.lang.classfile.Opcode;\n@@ -43,3 +45,11 @@\n- * Models an {@code invokedynamic} instruction in the {@code code} array of a\n- * {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n- * the elements of a {@link CodeModel}.\n+ * Models a dynamically-computed call site invocation instruction in the\n+ * {@code code} array of a {@code Code} attribute.  The corresponding opcode is\n+ * {@link Opcode#INVOKEDYNAMIC invokedynamic}.  Delivered as a {@link\n+ * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * <p>\n+ * A dynamically-computed call site invocation instruction can be viewed as a\n+ * record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"InvokeDynamicInstruction\" target=\"#of\" :\n+ * InvokeDynamicInstruction(InvokeDynamicEntry invokedynamic) \/\/ @link substring=\"invokedynamic\" target=\"#invokedynamic()\"\n+ * }\n@@ -47,0 +57,3 @@\n+ * @see Opcode.Kind#INVOKE_DYNAMIC\n+ * @see CodeBuilder#invokedynamic CodeBuilder::invokedynamic\n+ * @jvms 6.5.invokedynamic <em>invokedynamic<\/em>\n@@ -65,0 +78,4 @@\n+     *\n+     * @apiNote\n+     * A symbolic descriptor for the invocation typeis available through {@link\n+     * #typeSymbol() typeSymbol()}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/InvokeDynamicInstruction.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -31,0 +32,1 @@\n+import java.lang.classfile.TypeKind;\n@@ -45,3 +47,17 @@\n- * Code} attribute, other than {@code invokedynamic}.  Corresponding opcodes\n- * will have a {@code kind} of {@link Opcode.Kind#INVOKE}.  Delivered as a\n- * {@link CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * Code} attribute, other than {@link InvokeDynamicInstruction invokedynamic}.\n+ * Corresponding opcodes have a {@linkplain Opcode#kind() kind} of {@link Opcode.Kind#INVOKE}.\n+ * Delivered as a {@link CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * <p>\n+ * A method invocation instruction can be viewed as a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"InvokeInstruction\" target=\"#of(Opcode, MemberRefEntry)\" :\n+ * InvokeInstruction(\n+ *     Opcode opcode, \/\/ @link substring=\"opcode\" target=\"#opcode()\"\n+ *     MethodRefEntry | InterfaceMethodRefEntry method) \/\/ @link substring=\"method\" target=\"#method()\"\n+ * )\n+ * }\n+ * where {@code method} must be an {@code InterfaceMethodRefEntry} for {@link\n+ * Opcode#INVOKEINTERFACE invokeinterface} opcode, and must be a {@code\n+ * MethodRefEntry} for {@link Opcode#INVOKEVIRTUAL invokevirtual} opcode.\n+ * {@link Opcode#INVOKESTATIC invokestatic} and {@link Opcode#INVOKESPECIAL\n+ * invokespecial} can have either type of entry for {@code method}.\n@@ -49,0 +65,2 @@\n+ * @see Opcode.Kind#INVOKE\n+ * @see CodeBuilder#invoke CodeBuilder::invoke\n@@ -60,1 +78,1 @@\n-     * {@return whether the class holding the method is an interface}\n+     * {@return whether the class or interface holding the method is an interface}\n@@ -65,2 +83,9 @@\n-     * {@return the {@code count} value of an {@code invokeinterface} instruction, as defined in JVMS {@jvms 6.5}\n-     * or {@code 0} for {@code invokespecial}, {@code invokestatic} and {@code invokevirtual} instructions}\n+     * {@return the {@code count} value of an {@code invokeinterface} instruction,\n+     * or {@code 0} for other instructions}\n+     * <p>\n+     * For an {@code invokeinterface} instruction, this value must be equivalent\n+     * to the sum of {@linkplain TypeKind#slotSize() slot sizes} of all arguments\n+     * plus one, which is equal to the number of operand stack depth consumed by\n+     * this interface method invocation instruction.\n+     *\n+     * @jvms 6.5.invokeinterface <em>invokeinterface<\/em>\n@@ -71,1 +96,1 @@\n-     * {@return the class holding the method}\n+     * {@return the class or interface holding the method}\n@@ -85,1 +110,5 @@\n-     * {@return the method descriptor of the method}\n+     * {@return the method descriptor string of the method}\n+     *\n+     * @apiNote\n+     * A symbolic descriptor for the type of the method is available through\n+     * {@link #typeSymbol() typeSymbol()}.\n@@ -98,1 +127,0 @@\n-\n@@ -106,1 +134,1 @@\n-     *         {@link Opcode.Kind#INVOKE}.\n+     *         {@link Opcode.Kind#INVOKE}\n@@ -122,0 +150,2 @@\n+     * @throws IllegalArgumentException if the opcode kind is not\n+     *         {@link Opcode.Kind#INVOKE}\n@@ -139,0 +169,2 @@\n+     * @throws IllegalArgumentException if the opcode kind is not\n+     *         {@link Opcode.Kind#INVOKE}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/InvokeInstruction.java","additions":42,"deletions":10,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -29,0 +30,1 @@\n+import java.lang.classfile.CodeTransform;\n@@ -31,0 +33,1 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -38,0 +41,19 @@\n+ * <p>\n+ * This can be used to inspect the target position of labels across {@linkplain\n+ * CodeTransform transformations}, as {@linkplain CodeAttribute#labelToBci bci}\n+ * is not stable.\n+ * <p>\n+ * When passed to a {@link CodeBuilder}, this pseudo-instruction sets the\n+ * specified label to be bound at the current position in the builder.\n+ * <p>\n+ * By design, {@code LabelTarget} cannot be created by users and can only be\n+ * read from a code model.  Use {@link CodeBuilder#labelBinding\n+ * CodeBuilder::labelBinding} to bind arbitrary labels to a {@code CodeBuilder}.\n+ * <p>\n+ * For a {@code CodeBuilder cob}, a {@code LabelTarget lt}, these two calls are\n+ * equivalent:\n+ * {@snippet lang=java :\n+ * cob.with(lt); \/\/ @link substring=\"with\" target=\"CodeBuilder#with\"\n+ * \/\/ @link substring=\"labelBinding\" target=\"CodeBuilder#labelBinding\" :\n+ * cob.labelBinding(lt.label()); \/\/ @link substring=\"label\" target=\"#label\"\n+ * }\n@@ -39,2 +61,2 @@\n- * @see PseudoInstruction\n- *\n+ * @see Label\n+ * @see CodeBuilder#labelBinding CodeBuilder::labelBinding\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LabelTarget.java","additions":24,"deletions":2,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -31,0 +32,2 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.attribute.LineNumberInfo;\n@@ -36,4 +39,17 @@\n- * A pseudo-instruction which models a single entry in the\n- * {@link LineNumberTableAttribute}.  Delivered as a {@link CodeElement}\n- * during traversal of the elements of a {@link CodeModel}, according to\n- * the setting of the {@link ClassFile.LineNumbersOption} option.\n+ * A pseudo-instruction which indicates the code for a given line number starts\n+ * after the current position in a {@link CodeAttribute Code} attribute.  This\n+ * models a single entry in the {@link LineNumberTableAttribute LineNumberTable}\n+ * attribute.  Delivered as a {@link CodeElement} during traversal of the\n+ * elements of a {@link CodeModel}, according to the setting of the {@link\n+ * ClassFile.LineNumbersOption} option.\n+ * <p>\n+ * A line number entry can be viewed as a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"LineNumber\" target=\"#of\" :\n+ * LineNumber(int line) \/\/ @link substring=\"int line\" target=\"#line\"\n+ * }\n+ * <p>\n+ * Another model, {@link LineNumberInfo}, also models a line number entry; it\n+ * has no dependency on a {@code CodeModel} and represents of bci values as\n+ * {@code int}s instead of order of pseudo-instructions in the elements of a\n+ * {@code CodeModel}, and is used as components of a {@link LineNumberTableAttribute}.\n@@ -41,1 +57,3 @@\n- * @see PseudoInstruction\n+ * @apiNote\n+ * Line numbers are represented with custom pseudo-instructions to avoid using\n+ * labels, which usually indicate branching targets for the control flow.\n@@ -43,0 +61,3 @@\n+ * @see LineNumberInfo\n+ * @see CodeBuilder#lineNumber CodeBuilder::lineNumber\n+ * @see ClassFile.LineNumbersOption\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LineNumber.java","additions":26,"deletions":5,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -39,3 +40,14 @@\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n- * {@link Opcode.Kind#LOAD}.  Delivered as a {@link CodeElement} when\n- * traversing the elements of a {@link CodeModel}.\n+ * {@code Code} attribute.  Corresponding opcodes have a {@linkplain\n+ * Opcode#kind() kind} of {@link Opcode.Kind#LOAD}.  Delivered as a {@link\n+ * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * <p>\n+ * A local variable load instruction can be viewed as a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"LoadInstruction\" target=\"#of(TypeKind, int)\" :\n+ * LoadInstruction(\n+ *     TypeKind typeKind, \/\/ @link substring=\"typeKind\" target=\"#typeKind\"\n+ *     int slot \/\/ @link substring=\"slot\" target=\"#slot\"\n+ * )\n+ * }\n+ * where {@code TypeKind} is {@linkplain TypeKind##computational-type\n+ * computational}, and {@code slot} is within {@code [0, 65535]}.\n@@ -43,0 +55,2 @@\n+ * @see Opcode.Kind#LOAD\n+ * @see CodeBuilder#loadLocal CodeBuilder::loadLocal\n@@ -51,0 +65,1 @@\n+     * The value is within {@code [0, 65535]}.\n@@ -55,1 +70,2 @@\n-     * {@return the type of the value to be loaded}\n+     * {@return the {@linkplain TypeKind##computational-type computational type}\n+     * of the value to be loaded}\n@@ -61,0 +77,3 @@\n+     * {@code kind} is {@linkplain TypeKind#asLoadable() converted} to its\n+     * computational type.\n+     * {@code slot} must be within {@code [0, 65535]}.\n@@ -74,0 +93,14 @@\n+     * <p>\n+     * The range of {@code slot} is restricted by the {@code op} and its\n+     * {@linkplain Opcode#sizeIfFixed() size}:\n+     * <ul>\n+     * <li>If {@code op} has size 1, {@code slot} must be exactly the slot value\n+     * implied by the opcode.\n+     * <li>If {@code op} has size 2, {@code slot} must be within {@code [0, 255]}.\n+     * <li>If {@code op} has size 4, {@code slot} must be within {@code [0, 65535]}.\n+     * <\/ul>\n+     *\n+     * @apiNote\n+     * The explicit {@code op} argument allows creating {@code wide} or\n+     * regular load instructions when the {@code slot} can be encoded\n+     * with more optimized load instructions.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LoadInstruction.java","additions":37,"deletions":4,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -32,0 +33,1 @@\n+import java.lang.classfile.attribute.LocalVariableInfo;\n@@ -42,4 +44,22 @@\n- * A pseudo-instruction which models a single entry in the\n- * {@link LocalVariableTableAttribute}.  Delivered as a {@link CodeElement}\n- * during traversal of the elements of a {@link CodeModel}, according to\n- * the setting of the {@link ClassFile.DebugElementsOption} option.\n+ * A pseudo-instruction which models a single entry in the {@link\n+ * LocalVariableTableAttribute LocalVariableTable} attribute.  Delivered as a\n+ * {@link CodeElement} during traversal of the elements of a {@link CodeModel},\n+ * according to the setting of the {@link ClassFile.DebugElementsOption} option.\n+ * <p>\n+ * A local variable entry can be viewed a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"LocalVariable\" target=\"#of(int, String, ClassDesc, Label, Label)\" :\n+ * LocalVariable(\n+ *     int slot, \/\/ @link substring=\"slot\" target=\"#slot\"\n+ *     String name, \/\/ @link substring=\"name\" target=\"#name\"\n+ *     ClassDesc type, \/\/ @link substring=\"type\" target=\"#type\"\n+ *     Label startScope, \/\/ @link substring=\"startScope\" target=\"#startScope\"\n+ *     Label endScope \/\/ @link substring=\"endScope\" target=\"#endScope\"\n+ * )\n+ * }\n+ * Where {@code slot} is within {@code [0, 65535]}.\n+ * <p>\n+ * Another model, {@link LocalVariableInfo}, also models a local variable\n+ * entry; it has no dependency on a {@code CodeModel} and represents of bci\n+ * values as {@code int}s instead of {@code Label}s, and is used as components\n+ * of a {@link LocalVariableTableAttribute}.\n@@ -47,1 +67,5 @@\n- * @see PseudoInstruction\n+ * @apiNote\n+ * {@code LocalVariable} is used for all local variables in Java source code.\n+ * If a local variable has a parameterized type, a type argument, or an array\n+ * type of one of the previous types, a {@link LocalVariableType} should be\n+ * created for that local variable as well.\n@@ -49,0 +73,3 @@\n+ * @see LocalVariableInfo\n+ * @see CodeBuilder#localVariable CodeBuilder::localVariable\n+ * @see ClassFile.DebugElementsOption\n@@ -55,0 +82,1 @@\n+     * The value is within {@code [0, 65535]}.\n@@ -64,1 +92,5 @@\n-     * {@return the local variable field descriptor}\n+     * {@return the local variable field descriptor string}\n+     *\n+     * @apiNote\n+     * A symbolic descriptor for the type of the local variable is available\n+     * through {@link #typeSymbol() typeSymbol()}.\n@@ -87,0 +119,1 @@\n+     * {@code slot} must be within {@code [0, 65535]}.\n@@ -102,0 +135,1 @@\n+     * {@code slot} must be within {@code [0, 65535]}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LocalVariable.java","additions":40,"deletions":6,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -27,6 +27,2 @@\n-import java.lang.classfile.ClassFile;\n-import java.lang.classfile.CodeElement;\n-import java.lang.classfile.CodeModel;\n-import java.lang.classfile.Label;\n-import java.lang.classfile.PseudoInstruction;\n-import java.lang.classfile.Signature;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.LocalVariableTypeInfo;\n@@ -42,3 +38,21 @@\n- * LocalVariableTypeTableAttribute}.  Delivered as a {@link CodeElement} during\n- * traversal of the elements of a {@link CodeModel}, according to the setting of\n- * the {@link ClassFile.DebugElementsOption} option.\n+ * LocalVariableTypeTableAttribute LocalVariableTypeTable} attribute.  Delivered\n+ * as a {@link CodeElement} during traversal of the elements of a {@link CodeModel},\n+ * according to the setting of the {@link ClassFile.DebugElementsOption} option.\n+ * <p>\n+ * A local variable type entry can be viewed as a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"LocalVariableType\" target=\"#of(int, String, Signature, Label, Label)\" :\n+ * LocalVariableType(\n+ *     int slot, \/\/ @link substring=\"slot\" target=\"#slot\"\n+ *     String name, \/\/ @link substring=\"name\" target=\"#name\"\n+ *     Signature signature, \/\/ @link substring=\"signature\" target=\"#signatureSymbol\"\n+ *     Label startScope, \/\/ @link substring=\"startScope\" target=\"#startScope\"\n+ *     Label endScope \/\/ @link substring=\"endScope\" target=\"#endScope\"\n+ * )\n+ * }\n+ * Where {@code slot} is within {@code [0, 65535]}.\n+ * <p>\n+ * Another model, {@link LocalVariableTypeInfo}, also models a local variable\n+ * type entry; it has no dependency on a {@code CodeModel} and represents of bci\n+ * values as {@code int}s instead of {@code Label}s, and is used as components\n+ * of a {@link LocalVariableTypeTableAttribute}.\n@@ -46,0 +60,9 @@\n+ * @apiNote\n+ * {@code LocalVariableType} is used if a local variable has a parameterized\n+ * type, a type argument, or an array type of one of the previous types as its\n+ * type.  A {@link LocalVariable} with the erased type should still be created\n+ * for that local variable.\n+ *\n+ * @see LocalVariableTypeInfo\n+ * @see CodeBuilder#localVariableType CodeBuilder::localVariableType\n+ * @see ClassFile.DebugElementsOption\n@@ -52,0 +75,1 @@\n+     * The value is within {@code [0, 65535]}.\n@@ -61,1 +85,5 @@\n-     * {@return the local variable signature}\n+     * {@return the local variable generic signature string}\n+     *\n+     * @apiNote\n+     * A symbolic generic signature of the local variable is available\n+     * through {@link #signatureSymbol() signatureSymbol()}.\n@@ -66,1 +94,1 @@\n-     * {@return the local variable signature}\n+     * {@return the local variable generic signature}\n@@ -84,0 +112,1 @@\n+     * {@code slot} must be within {@code [0, 65535]}.\n@@ -99,0 +128,1 @@\n+     * {@code slot} must be within {@code [0, 65535]}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LocalVariableType.java","additions":41,"deletions":11,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -31,0 +32,1 @@\n+import java.lang.classfile.Opcode;\n@@ -36,3 +38,15 @@\n- * Models a {@code lookupswitch} instruction in the {@code code} array of a\n- * {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n- * the elements of a {@link CodeModel}.\n+ * Models a {@link Opcode#LOOKUPSWITCH lookupswitch} instruction in the {@code\n+ * code} array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n+ * when traversing the elements of a {@link CodeModel}.\n+ * <p>\n+ * A lookup switch instruction can be viewed as a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"LookupSwitchInstruction\" target=\"#of\" :\n+ * LookupSwitchInstruction(\n+ *     Label defaultTarget, \/\/ @link substring=\"defaultTarget\" target=\"#defaultTarget\"\n+ *     List<SwitchCase> cases \/\/ @link substring=\"cases\" target=\"#cases()\"\n+ * )\n+ * }\n+ * If elements in {@code cases} are not sorted ascending by their {@link\n+ * SwitchCase#caseValue caseValue}, a sorted version of the {@code cases} list\n+ * will be written instead.\n@@ -40,0 +54,3 @@\n+ * @see Opcode.Kind#LOOKUP_SWITCH\n+ * @see CodeBuilder#lookupswitch CodeBuilder::lookupswitch\n+ * @jvms 6.5.lookupswitch <em>lookupswitch<\/em>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LookupSwitchInstruction.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -36,3 +37,11 @@\n- * Models a {@code monitorenter} or {@code monitorexit} instruction in the\n- * {@code code} array of a {@code Code} attribute.  Delivered as a {@link\n- * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * Models a {@link Opcode#MONITORENTER monitorenter} or {@link Opcode#MONITOREXIT\n+ * monitorexit} instruction in the {@code code} array of a {@code Code} attribute.\n+ * Corresponding opcodes have a {@linkplain Opcode#kind() kind} of {@link\n+ * Opcode.Kind#MONITOR}.  Delivered as a {@link CodeElement} when traversing the\n+ * elements of a {@link CodeModel}.\n+ * <p>\n+ * A monitor instruction can be viewed record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"MonitorInstruction\" target=\"#of(Opcode)\" :\n+ * MonitorInstruction(Opcode opcode) \/\/ @link substring=\"opcode\" target=\"#opcode\"\n+ * }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/MonitorInstruction.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -30,0 +31,1 @@\n+import java.lang.classfile.Opcode;\n@@ -36,1 +38,1 @@\n- * Models a {@code multianewarray} invocation instruction in the {@code code}\n+ * Models a {@link Opcode#MULTIANEWARRAY multianewarray} instruction in the {@code code}\n@@ -39,0 +41,10 @@\n+ * <p>\n+ * A new multi-dimensional array instruction can be viewed as a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"NewMultiArrayInstruction\" target=\"#of\" :\n+ * NewMultiArrayInstruction(\n+ *     ClassEntry arrayType, \/\/ @link substring=\"arrayType\" target=\"#arrayType\"\n+ *     int dimensions \/\/ @link substring=\"dimensions\" target=\"#dimensions\"\n+ * )\n+ * }\n+ * where the {@code arrayType} is an array class.\n@@ -40,0 +52,3 @@\n+ * @see Opcode.Kind#NEW_MULTI_ARRAY\n+ * @see CodeBuilder#multianewarray CodeBuilder::multianewarray\n+ * @jvms 6.5.multianewarray <em>multianewarray<\/em>\n@@ -47,1 +62,1 @@\n-     * {@return the type of the array, as a symbolic descriptor}\n+     * {@return the type of the array}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NewMultiArrayInstruction.java","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -30,0 +31,1 @@\n+import java.lang.classfile.Opcode;\n@@ -35,1 +37,1 @@\n- * Models a {@code new} instruction in the {@code code} array of a {@code Code}\n+ * Models a {@link Opcode#NEW new} instruction in the {@code code} array of a {@code Code}\n@@ -38,0 +40,7 @@\n+ * <p>\n+ * A new object instruction can be viewed as a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"NewObjectInstruction\" target=\"#of\" :\n+ * NewObjectInstruction(ClassEntry className) \/\/ @link substring=\"className\" target=\"#className\"\n+ * }\n+ * where the {@code className} is a non-abstract class.\n@@ -39,0 +48,3 @@\n+ * @see Opcode.Kind#NEW_OBJECT\n+ * @see CodeBuilder#new_ CodeBuilder::new_\n+ * @jvms 6.5.new <em>new<\/em>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NewObjectInstruction.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -30,0 +31,1 @@\n+import java.lang.classfile.Opcode;\n@@ -35,1 +37,1 @@\n- * Models a {@code newarray} invocation instruction in the {@code code}\n+ * Models a {@link Opcode#NEWARRAY newarray} instruction in the {@code code}\n@@ -38,0 +40,7 @@\n+ * <p>\n+ * A new primitive array instruction can be viewed as a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"NewPrimitiveArrayInstruction\" target=\"#of\" :\n+ * NewPrimitiveArrayInstruction(TypeKind typeKind) \/\/ @link substring=\"typeKind\" target=\"#typeKind\"\n+ * }\n+ * where {@code typeKind} is primitive and not {@code void}.\n@@ -39,0 +48,3 @@\n+ * @see Opcode.Kind#NEW_PRIMITIVE_ARRAY\n+ * @see CodeBuilder#newarray CodeBuilder::newarray\n+ * @jvms 6.5.newarray <em>newarray<\/em>\n@@ -46,0 +58,4 @@\n+     *\n+     * @apiNote\n+     * The backing array code for this instruction is available through\n+     * {@link TypeKind#newarrayCode() typeKind().newarrayCode()}.\n@@ -53,2 +69,3 @@\n-     * @throws IllegalArgumentException when the {@code typeKind} is not a legal\n-     *                                  primitive array component type\n+     * @throws IllegalArgumentException when {@code typeKind} is not primitive\n+     *         or is {@code void}\n+     * @see TypeKind#fromNewarrayCode(int) TypeKind::fromNewarrayCode\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NewPrimitiveArrayInstruction.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -30,0 +31,1 @@\n+import java.lang.classfile.Opcode;\n@@ -35,1 +37,1 @@\n- * Models a {@code anewarray} invocation instruction in the {@code code}\n+ * Models a {@link Opcode#ANEWARRAY anewarray} instruction in the {@code code}\n@@ -38,0 +40,6 @@\n+ * <p>\n+ * A new reference array instruction can be viewed as a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"NewReferenceArrayInstruction\" target=\"#of\" :\n+ * NewReferenceArrayInstruction(ClassEntry componentType) \/\/ @link substring=\"componentType\" target=\"#componentType\"\n+ * }\n@@ -39,0 +47,3 @@\n+ * @see Opcode.Kind#NEW_REF_ARRAY\n+ * @see CodeBuilder#newarray CodeBuilder::anewarray\n+ * @jvms 6.5.anewarray <em>anewarray<\/em>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NewReferenceArrayInstruction.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -30,0 +31,1 @@\n+import java.lang.classfile.Opcode;\n@@ -34,1 +36,1 @@\n- * Models a {@code nop} invocation instruction in the {@code code}\n+ * Models a {@link Opcode#NOP nop} instruction in the {@code code}\n@@ -37,0 +39,6 @@\n+ * <p>\n+ * A no-op instruction can be viewed as a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"NopInstruction\" target=\"#of\" :\n+ * NopInstruction()\n+ * }\n@@ -38,0 +46,2 @@\n+ * @see CodeBuilder#nop CodeBuilder::nop\n+ * @jvms 6.5.nop <em>nop<\/em>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NopInstruction.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@code Code} attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind} of\n@@ -41,0 +41,6 @@\n+ * <p>\n+ * An operator instruction can be viewed as a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"OperatorInstruction\" target=\"#of\" :\n+ * OperatorInstruction(Opcode opcode) \/\/ @link substring=\"opcode\" target=\"#opcode()\"\n+ * }\n@@ -42,0 +48,1 @@\n+ * @see Opcode.Kind#OPERATOR\n@@ -48,0 +55,1 @@\n+     * This is derived from the {@link #opcode opcode}.\n@@ -54,1 +62,1 @@\n-     * @param op the opcode for the specific type of array load instruction,\n+     * @param op the opcode for the specific type of operator instruction,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/OperatorInstruction.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -39,1 +40,1 @@\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@code Code} attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind} of\n@@ -42,0 +43,8 @@\n+ * <p>\n+ * A return-from-method instruction can be viewed a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ReturnInstruction\" target=\"#of(TypeKind)\" :\n+ * ReturnInstruction(TypeKind typeKind) \/\/ @link substring=\"typeKind\" target=\"#typeKind()\"\n+ * }\n+ * where {@code typeKind} is {@linkplain TypeKind##computational-type\n+ * computational} or {@link TypeKind#VOID void}.\n@@ -43,0 +52,2 @@\n+ * @see Opcode.Kind#RETURN\n+ * @see CodeBuilder#return_(TypeKind) CodeBuilder::return_\n@@ -49,1 +60,2 @@\n-     * {@return the type of the return instruction}\n+     * {@return the {@linkplain TypeKind##computational-type computational type}, including\n+     * {@link TypeKind#VOID void}, of the return instruction}\n@@ -55,0 +67,2 @@\n+     * {@code typeKind} is {@linkplain TypeKind#asLoadable() converted} to its\n+     * computational type.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ReturnInstruction.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@code Code} attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind} of\n@@ -40,0 +40,6 @@\n+ * <p>\n+ * A stack manipulation instruction can be viewed as a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"StackInstruction\" target=\"#of\" :\n+ * StackInstruction(Opcode opcode) \/\/ @link substring=\"opcode\" target=\"#opcode()\"\n+ * }\n@@ -41,0 +47,1 @@\n+ * @see Opcode.Kind#STACK\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/StackInstruction.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -39,1 +40,1 @@\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@code Code} attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind} of\n@@ -42,0 +43,16 @@\n+ * <p>\n+ * A local variable store instruction can be viewed as a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"StoreInstruction\" target=\"#of(TypeKind, int)\" :\n+ * StoreInstruction(\n+ *     TypeKind typeKind, \/\/ @link substring=\"typeKind\" target=\"#typeKind\"\n+ *     int slot \/\/ @link substring=\"slot\" target=\"#slot\"\n+ * )\n+ * }\n+ * where {@code TypeKind} is {@linkplain TypeKind##computational-type\n+ * computational}, and {@code slot} is within {@code [0, 65535]}.\n+ * <p>\n+ * {@code astore} series of instructions, or {@code reference} type store\n+ * instructions, can also operate on the {@link TypeKind##returnAddress\n+ * returnAddress} type from discontinued {@linkplain\n+ * DiscontinuedInstruction.JsrInstruction jump subroutine instructions}.\n@@ -43,0 +60,2 @@\n+ * @see Opcode.Kind#STORE\n+ * @see CodeBuilder#storeLocal CodeBuilder::storeLocal\n@@ -50,0 +69,1 @@\n+     * The value is within {@code [0, 65535]}.\n@@ -54,1 +74,4 @@\n-     * {@return the type of the value to be stored}\n+     * {@return the {@linkplain TypeKind##computational-type computational type}\n+     * of the value to be stored}  The {@link TypeKind#REFERENCE reference}\n+     * type store instructions also operate on the {@code returnAddress} type,\n+     * which does not apply to {@code reference} type load instructions.\n@@ -60,0 +83,3 @@\n+     * {@code kind} is {@linkplain TypeKind#asLoadable() converted} to its\n+     * computational type.\n+     * {@code slot} must be within {@code [0, 65535]}.\n@@ -73,0 +99,14 @@\n+     * <p>\n+     * The range of {@code slot} is restricted by the {@code op} and its\n+     * {@linkplain Opcode#sizeIfFixed() size}:\n+     * <ul>\n+     * <li>If {@code op} has size 1, {@code slot} must be exactly the slot value\n+     * implied by the opcode.\n+     * <li>If {@code op} has size 2, {@code slot} must be within {@code [0, 255]}.\n+     * <li>If {@code op} has size 4, {@code slot} must be within {@code [0, 65535]}.\n+     * <\/ul>\n+     *\n+     * @apiNote\n+     * The explicit {@code op} argument allows creating {@code wide} or\n+     * regular store instructions when the {@code slot} can be encoded\n+     * with more optimized store instructions.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/StoreInstruction.java","additions":42,"deletions":2,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -32,2 +32,11 @@\n- * Models a single case in a {@code lookupswitch} or {@code tableswitch}\n- * instruction.\n+ * Models a single case in a {@link LookupSwitchInstruction lookupswitch} or\n+ * {@link TableSwitchInstruction tableswitch} instruction.\n+ * <p>\n+ * A switch case can be viewed as a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"SwitchCase\" target=\"#of\" :\n+ * SwitchCase(\n+ *     int caseValue, \/\/ @link substring=\"caseValue\" target=\"#caseValue\"\n+ *     Label target \/\/ @link substring=\"target\" target=\"#target\"\n+ * )\n+ * }\n@@ -37,1 +46,0 @@\n- *\n@@ -50,1 +58,1 @@\n-     * Create a {@linkplain SwitchCase}\n+     * {@return a new switch case}\n@@ -54,1 +62,0 @@\n-     * @return the {@linkplain SwitchCase}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/SwitchCase.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -31,0 +32,1 @@\n+import java.lang.classfile.Opcode;\n@@ -36,1 +38,1 @@\n- * Models a {@code tableswitch} instruction in the {@code code} array of a\n+ * Models a {@link Opcode#TABLESWITCH tableswitch} instruction in the {@code code} array of a\n@@ -39,0 +41,21 @@\n+ * <p>\n+ * A table switch instruction can be viewed a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"TableSwitchInstruction\" target=\"#of\" :\n+ * TableSwitchInstruction(\n+ *     int lowValue, \/\/ @link substring=\"int lowValue\" target=\"#lowValue\"\n+ *     int highValue, \/\/ @link substring=\"int highValue\" target=\"#highValue\"\n+ *     Label defaultTarget, \/\/ @link substring=\"defaultTarget\" target=\"#defaultTarget\"\n+ *     List<SwitchCase> cases \/\/ @link substring=\"cases\" target=\"#cases()\"\n+ * )\n+ * }\n+ * <p>\n+ * When read from {@code class} files, the {@code cases} may omit cases that\n+ * duplicate the default target.  The list is sorted ascending by the {@link\n+ * SwitchCase#caseValue() caseValue}.\n+ * <p>\n+ * When writing to {@code class} file, the order in the {@code cases} list does\n+ * not matter, as there is only one valid order in the physical representation\n+ * of table switch entries.  Treatment of elements in {@code cases} whose value\n+ * is less than {@code lowValue} or greater than {@code highValue}, and elements\n+ * whose value duplicates that of another, is not specified.\n@@ -40,0 +63,3 @@\n+ * @see Opcode.Kind#TABLE_SWITCH\n+ * @see CodeBuilder#tableswitch CodeBuilder::tableswitch\n+ * @jvms 6.5.tableswitch <em>tableswitch<\/em>\n@@ -70,1 +96,2 @@\n-     * @param cases the cases of the switch\n+     * @param cases the cases of the switch; duplicate or out of bound case\n+     *              handling is not specified\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/TableSwitchInstruction.java","additions":29,"deletions":2,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -30,0 +31,1 @@\n+import java.lang.classfile.Opcode;\n@@ -34,1 +36,1 @@\n- * Models an {@code athrow} instruction in the {@code code} array of a\n+ * Models an {@link Opcode#ATHROW athrow} instruction in the {@code code} array of a\n@@ -37,0 +39,6 @@\n+ * <p>\n+ * A throw instruction can be viewed as a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ThrowInstruction\" target=\"#of\" :\n+ * ThrowInstruction()\n+ * }\n@@ -38,0 +46,2 @@\n+ * @see Opcode.Kind#THROW_EXCEPTION\n+ * @see CodeBuilder#athrow CodeBuiler::athrow\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ThrowInstruction.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -39,3 +39,17 @@\n- * Models an {@code instanceof} or {@code checkcast} instruction in the {@code\n- * code} array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n- * when traversing the elements of a {@link CodeModel}.\n+ * Models an {@link Opcode#INSTANCEOF instanceof} or a {@link Opcode#CHECKCAST checkcast}\n+ * instruction in the {@code code} array of a {@code Code} attribute.  Corresponding\n+ * opcodes have a {@linkplain Opcode#kind() kind} of {@link Opcode.Kind#TYPE_CHECK}.\n+ * Delivered as a {@link CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * <p>\n+ * An {@code instanceof} checks the type and pushes a value to the operand stack.\n+ * A {@code checkcast} checks the type and throws a {@link ClassCastException} if\n+ * the check fails.\n+ * <p>\n+ * A type check instruction can be viewed as a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"TypeCheckInstruction\" target=\"#of(Opcode, ClassEntry)\" :\n+ * TypeCheckInstruction(\n+ *     Opcode opcode, \/\/ @link substring=\"opcode\" target=\"#opcode\"\n+ *     ClassEntry type \/\/ @link substring=\"type\" target=\"#type\"\n+ * )\n+ * }\n@@ -50,1 +64,1 @@\n-     * {@return the type against which the instruction checks or casts}\n+     * {@return the type against which the instruction checks}\n@@ -61,1 +75,1 @@\n-     *         {@link Opcode.Kind#TYPE_CHECK}.\n+     *         {@link Opcode.Kind#TYPE_CHECK}\n@@ -74,0 +88,2 @@\n+     * @throws IllegalArgumentException if the opcode kind is not\n+     *         {@link Opcode.Kind#TYPE_CHECK}, or if {@code type} is primitive\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/TypeCheckInstruction.java","additions":21,"deletions":5,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -29,1 +29,5 @@\n- * The {@code java.lang.classfile.attribute} package contains interfaces describing code instructions.\n+ * The {@code java.lang.classfile.instruction} package contains interfaces describing code instructions.\n+ * <p>\n+ * Unless otherwise specified, passing {@code null} or an array or collection containing a {@code null} element as an\n+ * argument to a constructor or method of any Class-File API class or interface will cause a {@link NullPointerException}\n+ * to be thrown.\n@@ -31,0 +35,28 @@\n+ * <h2 id=\"reading\">Reading of instructions<\/h2>\n+ * Instructions and pseudo-instructions are usually accessed from a {@link CodeModel}, such as {@link CodeModel#forEach\n+ * CodeModel::forEach}, and categorized by pattern-matching.\n+ * <p>\n+ * When read from {@code class} files, instructions are lazily inflated; the contents of these instructions, besides the\n+ * bare structure, are not evaluated to speed up parsing.  Instructions to users interest, such as those filtered by the\n+ * pattern matching, have their contents read on demand, to avoid unnecessary reading of unrelated instructions in a code\n+ * array.\n+ * <p>\n+ * Due to the lazy nature of {@code class} file parsing, {@link IllegalArgumentException} indicating malformed\n+ * {@code class} file data can be thrown at any method invocation.  For example, an instruction object for a {@link\n+ * TypeCheckInstruction} may be obtained from a {@code CodeModel}, but the subsequent invocation of {@link\n+ * TypeCheckInstruction#type() .type()} may fail with {@code IllegalArgumentException} because the instruction refers\n+ * to a bad constant pool index.\n+ *\n+ * <h2 id=\"writing\">Writing of instructions<\/h2>\n+ * Writing of instructions happen on {@link CodeBuilder}.  The most basic way to write instructions is to pass an\n+ * instruction object to {@link CodeBuilder#with CodeBuilder::with}, which supports all valid instructions.\n+ * Yet, {@code CodeBuilder} provides a lot of {@linkplain CodeBuilder##instruction-factories convenience factory methods}\n+ * for easy creation of instructions, named by their mnemonic.  These accessors are more concise, and often more\n+ * efficient at run-time than passing instruction objects.\n+ * <p>\n+ * Due to restrictions in the {@code class} file format, some instructions may not be representable in a {@code CodeBuilder}.\n+ * In some scenarios, such as for {@link BranchInstruction}, Class-File API options control if alternatives can be used\n+ * in code generation instead.  Otherwise, they can be configured to fail-fast to ensure the parity of {@code CodeBuilder}\n+ * commands with the generated {@code code} array data.\n+ *\n+ * @jvms 6.5 Instructions\n@@ -35,0 +67,3 @@\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeModel;\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/package-info.java","additions":36,"deletions":1,"binary":false,"changes":37,"status":"modified"}]}