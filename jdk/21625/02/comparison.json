{"files":[{"patch":"@@ -54,1 +54,1 @@\n- * <h2>Instruction Factories<\/h2>\n+ * <h2 id=\"instruction-factories\">Instruction Factories<\/h2>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CodeBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -33,1 +34,7 @@\n- * Models an executable instruction in a method body.\n+ * Models an executable instruction in the {@code code} array of the {@link\n+ * CodeAttribute Code} attribute of a method.\n+ * <p>\n+ * Physically, instructions are discriminated unions identified by thier {@link\n+ * #opcode() opcode()}.  The exact type of the instruction can be identified\n+ * from {@link Opcode#kind() Opcode::kind}.  {@link #sizeInBytes() sizeInBytes()}\n+ * indicates the exact size of such a discriminated union.\n@@ -35,0 +42,1 @@\n+ * @sealedGraph\n@@ -55,0 +63,2 @@\n+     * This value is equal to {@link Opcode#sizeIfFixed()\n+     * opcode().sizeIfFixed()} if it is not {@code -1}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Instruction.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,0 +27,4 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.instruction.LabelTarget;\n+import java.util.ListIterator;\n+\n@@ -31,10 +35,41 @@\n- * association between a label's identity and the position it represents is\n- * managed by the entity managing the method body (a {@link CodeModel} or {@link\n- * CodeBuilder}), not the label itself; this allows the same label to have a\n- * meaning both in an existing method (as managed by a {@linkplain CodeModel})\n- * and in the transformation of that method (as managed by a {@linkplain\n- * CodeBuilder}), while corresponding to different positions in each. When\n- * traversing the elements of a {@linkplain CodeModel}, {@linkplain Label}\n- * markers will be delivered at the position to which they correspond.  A label\n- * can be bound to the current position within a {@linkplain CodeBuilder} via\n- * {@link CodeBuilder#labelBinding(Label)} or {@link CodeBuilder#with(ClassFileElement)}.\n+ * position is a cursor position in the list of instructions, similar to that\n+ * of a {@link ListIterator}.\n+ *\n+ * <h2 id=\"reading\">Reading Labels<\/h2>\n+ * Labels read from {@code class} files represent positions in the {@code code}\n+ * array of a {@link CodeAttribute Code} attribute.  It is associated with a\n+ * <dfn>{@index bci}<\/dfn>, also known as <dfn>{@index pc}<\/dfn>, the index into\n+ * the {@code code} array; the actual cursor position is immediately before the\n+ * given index, so a label at the beginning of the instructions has bci {@code 0},\n+ * and a label at the end of the instructions has bci {@link CodeAttribute#codeLength\n+ * codeLength() + 1}.  The bci can be inspected through {@link CodeAttribute#labelToBci\n+ * CodeAttribute::labelToBci}.\n+ * <p>\n+ * In generic {@link CodeModel}s, a label may not have a bci value; the position\n+ * of a label can be found by searching for the corresponding {@link LabelTarget}\n+ * within that model.\n+ *\n+ * <h2 id=\"writing\">Writing Labels<\/h2>\n+ * Many models in {@code java.lang.classfile} refer to labels.  To write a\n+ * label, a label must be obtained, it must be bound to a {@link CodeBuilder}.\n+ * <p>\n+ * To obtain a label:\n+ * <ul>\n+ * <li>Use a label read from other models.\n+ * <li>Use pre-defined labels from a {@link CodeBuilder}, such as {@link\n+ *     CodeBuilder#startLabel() CodeBuilder::startLabel}, {@link CodeBuilder#endLabel\n+ *     CodeBuilder::endLabel}, or {@link CodeBuilder.BlockCodeBuilder#breakLabel\n+ *     BlockCodeBuilder::breakLabel}.  They are already bound.\n+ * <li>Create labels with {@link CodeBuilder#newLabel CodeBuilder::newLabel} or\n+ *     {@link CodeBuilder#newBoundLabel CodeBuilder::newBoundLabel}.\n+ * <\/ul>\n+ * <p>\n+ * A label must be bound exactly once in the {@code CodeBuilder} where it is\n+ * used; otherwise, writing fails.  To bind an unbound label:\n+ * <ul>\n+ * <li>Send a {@link LabelTarget} to a {@code CodeBuilder}.\n+ * <li>Use {@link CodeBuilder#labelBinding CodeBuilder::labelBinding}.\n+ * <\/ul>\n+ * Note that a label read from another model is not automatically bound in a\n+ * {@code CodeBuilder}; they are separate entities and the label is bound to\n+ * different positions in them.\n@@ -42,0 +77,7 @@\n+ * @see CodeAttribute#labelToBci CodeAttribute::labelToBci\n+ * @see LabelTarget\n+ * @see CodeBuilder#newLabel CodeBuilder::newLabel\n+ * @see CodeBuilder#newBoundLabel CodeBuilder::newBoundLabel\n+ * @see CodeBuilder#startLabel CodeBuilder::startLabel\n+ * @see CodeBuilder#endLabel CodeBuilder::endLabel\n+ * @see CodeBuilder.BlockCodeBuilder#breakLabel BlockCodeBuilder::breakLabel\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Label.java","additions":52,"deletions":10,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.lang.classfile.instruction.*;\n+\n@@ -31,2 +33,8 @@\n- * As well as a number of pseudo-instructions that may be encountered when\n- * traversing the instructions of a method.\n+ * This includes a few pseudo-opcodes modified by {@link #isWide() wide}.\n+ *\n+ * @apiNote\n+ * The enum constants are named after the opcodes' mnemonics in uppercase.\n+ * Wide pseudo-opcodes are named with the original opcodes' mnemonic plus\n+ * a {@code _W} suffix. However, {@link #LDC_W ldc_w}, {@link #LDC2_W ldc2_w},\n+ * {@link #GOTO_W goto_w}, and {@link #JSR_W jsr_w} are legitimate opcodes\n+ * instead of wide pseudo-opcodes.\n@@ -35,1 +43,0 @@\n- * @see PseudoInstruction\n@@ -41,1 +48,5 @@\n-    \/** Do nothing *\/\n+    \/**\n+     * Do nothing.\n+     *\n+     * @jvms 6.5.nop <em>nop<\/em>\n+     *\/\n@@ -44,1 +55,6 @@\n-    \/** Push null *\/\n+    \/**\n+     * Push {@code null}.\n+     *\n+     * @jvms 6.5.aconst_null <em>aconst_null<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -47,1 +63,6 @@\n-    \/** Push int constant -1 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code -1}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -50,1 +71,6 @@\n-    \/** Push int constant 0 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code 0}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -53,1 +79,6 @@\n-    \/** Push int constant 1 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code 1}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -56,1 +87,6 @@\n-    \/** Push int constant 2 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code 2}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -59,1 +95,6 @@\n-    \/** Push int constant 3 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code 3}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -62,1 +103,6 @@\n-    \/** Push int constant 4 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code 4}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -65,1 +111,6 @@\n-    \/** Push int constant 5 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code 5}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -68,1 +119,6 @@\n-    \/** Push long constant 0 *\/\n+    \/**\n+     * Push {@link TypeKind#LONG long} constant {@code 0}.\n+     *\n+     * @jvms 6.5.lconst_l <em>lconst_&lt;l&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -71,1 +127,6 @@\n-    \/** Push long constant  1 *\/\n+    \/**\n+     * Push {@link TypeKind#LONG long} constant {@code 1}.\n+     *\n+     * @jvms 6.5.lconst_l <em>lconst_&lt;l&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -74,1 +135,6 @@\n-    \/** Push float constant 0 *\/\n+    \/**\n+     * Push {@link TypeKind#FLOAT float} constant {@code 0}.\n+     *\n+     * @jvms 6.5.fconst_f <em>fconst_&lt;f&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -77,1 +143,6 @@\n-    \/** Push float constant 1 *\/\n+    \/**\n+     * Push {@link TypeKind#FLOAT float} constant {@code 1}.\n+     *\n+     * @jvms 6.5.fconst_f <em>fconst_&lt;f&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -80,1 +151,6 @@\n-    \/** Push float constant 2 *\/\n+    \/**\n+     * Push {@link TypeKind#FLOAT float} constant {@code 2}.\n+     *\n+     * @jvms 6.5.fconst_f <em>fconst_&lt;f&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -83,1 +159,6 @@\n-    \/** Push double constant 0 *\/\n+    \/**\n+     * Push {@link TypeKind#DOUBLE double} constant {@code 0}.\n+     *\n+     * @jvms 6.5.dconst_d <em>dconst_&lt;d&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -86,1 +167,6 @@\n-    \/** Push double constant 1 *\/\n+    \/**\n+     * Push {@link TypeKind#DOUBLE double} constant {@code 1}.\n+     *\n+     * @jvms 6.5.dconst_d <em>dconst_&lt;d&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -89,1 +175,7 @@\n-    \/** Push byte *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} value from sign-extension of immediate\n+     * {@link TypeKind#BYTE byte} value.\n+     *\n+     * @jvms 6.5.bipush <em>bipush<\/em>\n+     * @see ConstantInstruction.ArgumentConstantInstruction\n+     *\/\n@@ -92,1 +184,7 @@\n-    \/** Push short *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} value from sign-extension of immediate\n+     * {@link TypeKind#SHORT short} value.\n+     *\n+     * @jvms 6.5.sipush <em>sipush<\/em>\n+     * @see ConstantInstruction.ArgumentConstantInstruction\n+     *\/\n@@ -95,1 +193,6 @@\n-    \/** Push item from run-time constant pool *\/\n+    \/**\n+     * Push item from run-time constant pool.\n+     *\n+     * @jvms 6.5.ldc <em>ldc<\/em>\n+     * @see ConstantInstruction.LoadConstantInstruction\n+     *\/\n@@ -98,1 +201,6 @@\n-    \/** Push item from run-time constant pool (wide index) *\/\n+    \/**\n+     * Push item from run-time constant pool (wide index).\n+     *\n+     * @jvms 6.5.ldc_w <em>ldc_w<\/em>\n+     * @see ConstantInstruction.LoadConstantInstruction\n+     *\/\n@@ -101,1 +209,7 @@\n-    \/** Push long or double from run-time constant pool (wide index) *\/\n+    \/**\n+     * Push {@link TypeKind#LONG long} or {@link TypeKind#DOUBLE double}\n+     * from run-time constant pool (wide index).\n+     *\n+     * @jvms 6.5.ldc2_w <em>ldc2_w<\/em>\n+     * @see ConstantInstruction.LoadConstantInstruction\n+     *\/\n@@ -104,1 +218,5 @@\n-    \/** Load int from local variable *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from local variable.\n+     *\n+     * @jvms 6.5.iload <em>iload<\/em>\n+     *\/\n@@ -107,1 +225,5 @@\n-    \/** Load long from local variable *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from local variable.\n+     *\n+     * @jvms 6.5.lload <em>lload<\/em>\n+     *\/\n@@ -110,1 +232,5 @@\n-    \/** Load float from local variable *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from local variable.\n+     *\n+     * @jvms 6.5.fload <em>fload<\/em>\n+     *\/\n@@ -113,1 +239,5 @@\n-    \/** Load double from local variable *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from local variable.\n+     *\n+     * @jvms 6.5.dload <em>dload<\/em>\n+     *\/\n@@ -116,1 +246,5 @@\n-    \/** Load reference from local variable *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from local variable.\n+     *\n+     * @jvms 6.5.aload <em>aload<\/em>\n+     *\/\n@@ -119,1 +253,5 @@\n-    \/** Load int from local variable 0 *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.iload_n <em>iload_&lt;n&gt;<\/em>\n+     *\/\n@@ -122,1 +260,5 @@\n-    \/** Load int from local variable 1 *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.iload_n <em>iload_&lt;n&gt;<\/em>\n+     *\/\n@@ -125,1 +267,5 @@\n-    \/** Load int from local variable 2 *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.iload_n <em>iload_&lt;n&gt;<\/em>\n+     *\/\n@@ -128,1 +274,5 @@\n-    \/** Load int from local variable3  *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.iload_n <em>iload_&lt;n&gt;<\/em>\n+     *\/\n@@ -131,1 +281,5 @@\n-    \/** Load long from local variable 0 *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.lload_n <em>lload_&lt;n&gt;<\/em>\n+     *\/\n@@ -134,1 +288,5 @@\n-    \/** Load long from local variable 1 *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.lload_n <em>lload_&lt;n&gt;<\/em>\n+     *\/\n@@ -137,1 +295,5 @@\n-    \/** Load long from local variable 2 *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.lload_n <em>lload_&lt;n&gt;<\/em>\n+     *\/\n@@ -140,1 +302,5 @@\n-    \/** Load long from local variable 3 *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.lload_n <em>lload_&lt;n&gt;<\/em>\n+     *\/\n@@ -143,1 +309,5 @@\n-    \/** Load float from local variable 0 *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.fload_n <em>fload_&lt;n&gt;<\/em>\n+     *\/\n@@ -146,1 +316,5 @@\n-    \/** Load float from local variable 1 *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.fload_n <em>fload_&lt;n&gt;<\/em>\n+     *\/\n@@ -149,1 +323,5 @@\n-    \/** Load float from local variable 2 *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.fload_n <em>fload_&lt;n&gt;<\/em>\n+     *\/\n@@ -152,1 +330,5 @@\n-    \/** Load float from local variable 3 *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.fload_n <em>fload_&lt;n&gt;<\/em>\n+     *\/\n@@ -155,1 +337,5 @@\n-    \/** Load double from local variable 0 *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.dload_n <em>dload_&lt;n&gt;<\/em>\n+     *\/\n@@ -158,1 +344,5 @@\n-    \/** Load double from local variable 1 *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.dload_n <em>dload_&lt;n&gt;<\/em>\n+     *\/\n@@ -161,1 +351,5 @@\n-    \/** Load double from local variable 2 *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.dload_n <em>dload_&lt;n&gt;<\/em>\n+     *\/\n@@ -164,1 +358,5 @@\n-    \/** Load double from local variable 3 *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.dload_n <em>dload_&lt;n&gt;<\/em>\n+     *\/\n@@ -167,1 +365,5 @@\n-    \/**  Load reference from local variable 0 *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.aload_n <em>aload_&lt;n&gt;<\/em>\n+     *\/\n@@ -170,1 +372,5 @@\n-    \/** Load reference from local variable 1 *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.aload_n <em>aload_&lt;n&gt;<\/em>\n+     *\/\n@@ -173,1 +379,5 @@\n-    \/** Load reference from local variable 2 *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.aload_n <em>aload_&lt;n&gt;<\/em>\n+     *\/\n@@ -176,1 +386,5 @@\n-    \/** Load reference from local variable 3 *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.aload_n <em>aload_&lt;n&gt;<\/em>\n+     *\/\n@@ -179,1 +393,5 @@\n-    \/** Load int from array *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from array.\n+     *\n+     * @jvms 6.5.iaload <em>iaload<\/em>\n+     *\/\n@@ -182,1 +400,5 @@\n-    \/** Load long from array *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from array.\n+     *\n+     * @jvms 6.5.laload <em>laload<\/em>\n+     *\/\n@@ -185,1 +407,5 @@\n-    \/** Load float from array *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from array.\n+     *\n+     * @jvms 6.5.faload <em>faload<\/em>\n+     *\/\n@@ -188,1 +414,5 @@\n-    \/** Load double from array *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from array.\n+     *\n+     * @jvms 6.5.daload <em>daload<\/em>\n+     *\/\n@@ -191,1 +421,5 @@\n-    \/** Load reference from array *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from array.\n+     *\n+     * @jvms 6.5.aaload <em>aaload<\/em>\n+     *\/\n@@ -194,1 +428,5 @@\n-    \/** Load byte from array *\/\n+    \/**\n+     * Load {@link TypeKind#BYTE byte} or {@link TypeKind#BOOLEAN boolean} from array.\n+     *\n+     * @jvms 6.5.baload <em>baload<\/em>\n+     *\/\n@@ -197,1 +435,5 @@\n-    \/** Load char from array *\/\n+    \/**\n+     * Load {@link TypeKind#CHAR char} from array.\n+     *\n+     * @jvms 6.5.caload <em>caload<\/em>\n+     *\/\n@@ -200,1 +442,5 @@\n-    \/** Load short from array *\/\n+    \/**\n+     * Load {@link TypeKind#SHORT short} from array.\n+     *\n+     * @jvms 6.5.saload <em>saload<\/em>\n+     *\/\n@@ -203,1 +449,5 @@\n-    \/** Store int into local variable *\/\n+    \/**\n+     * Store {@link TypeKind#INT int} into local variable.\n+     *\n+     * @jvms 6.5.istore <em>istore<\/em>\n+     *\/\n@@ -206,1 +456,5 @@\n-    \/** Store long into local variable *\/\n+    \/**\n+     * Store {@link TypeKind#LONG long} into local variable.\n+     *\n+     * @jvms 6.5.lstore <em>lstore<\/em>\n+     *\/\n@@ -209,1 +463,5 @@\n-    \/** Store float into local variable *\/\n+    \/**\n+     * Store {@link TypeKind#FLOAT float} into local variable.\n+     *\n+     * @jvms 6.5.fstore <em>fstore<\/em>\n+     *\/\n@@ -212,1 +470,5 @@\n-    \/** Store double into local variable *\/\n+    \/**\n+     * Store {@link TypeKind#DOUBLE double} into local variable.\n+     *\n+     * @jvms 6.5.dstore <em>dstore<\/em>\n+     *\/\n@@ -215,1 +477,6 @@\n-    \/** Store reference into local variable *\/\n+    \/**\n+     * Store {@link TypeKind#REFERENCE reference} into local variable.\n+     * Can also store the {@code returnAddress} type.\n+     *\n+     * @jvms 6.5.astore <em>astore<\/em>\n+     *\/\n@@ -218,1 +485,5 @@\n-    \/** Store int into local variable 0 *\/\n+    \/**\n+     * Store {@link TypeKind#INT int} into local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.istore_n <em>istore_&lt;n&gt;<\/em>\n+     *\/\n@@ -221,1 +492,5 @@\n-    \/** Store int into local variable 1 *\/\n+    \/**\n+     * Store {@link TypeKind#INT int} into local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.istore_n <em>istore_&lt;n&gt;<\/em>\n+     *\/\n@@ -224,1 +499,5 @@\n-    \/** Store int into local variable 2 *\/\n+    \/**\n+     * Store {@link TypeKind#INT int} into local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.istore_n <em>istore_&lt;n&gt;<\/em>\n+     *\/\n@@ -227,1 +506,5 @@\n-    \/** Store int into local variable 3 *\/\n+    \/**\n+     * Store {@link TypeKind#INT int} into local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.istore_n <em>istore_&lt;n&gt;<\/em>\n+     *\/\n@@ -230,1 +513,5 @@\n-    \/** Store long into local variable 0 *\/\n+    \/**\n+     * Store {@link TypeKind#LONG long} into local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.lstore_n <em>lstore_&lt;n&gt;<\/em>\n+     *\/\n@@ -233,1 +520,5 @@\n-    \/** Store long into local variable 1 *\/\n+    \/**\n+     * Store {@link TypeKind#LONG long} into local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.lstore_n <em>lstore_&lt;n&gt;<\/em>\n+     *\/\n@@ -236,1 +527,5 @@\n-    \/** Store long into local variable 2 *\/\n+    \/**\n+     * Store {@link TypeKind#LONG long} into local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.lstore_n <em>lstore_&lt;n&gt;<\/em>\n+     *\/\n@@ -239,1 +534,5 @@\n-    \/** Store long into local variable 3 *\/\n+    \/**\n+     * Store {@link TypeKind#LONG long} into local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.lstore_n <em>lstore_&lt;n&gt;<\/em>\n+     *\/\n@@ -242,1 +541,5 @@\n-    \/** Store float into local variable 0 *\/\n+    \/**\n+     * Store {@link TypeKind#FLOAT float} into local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.fstore_n <em>fstore_&lt;n&gt;<\/em>\n+     *\/\n@@ -245,1 +548,5 @@\n-    \/** Store float into local variable 1 *\/\n+    \/**\n+     * Store {@link TypeKind#FLOAT float} into local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.fstore_n <em>fstore_&lt;n&gt;<\/em>\n+     *\/\n@@ -248,1 +555,5 @@\n-    \/** Store float into local variable 2 *\/\n+    \/**\n+     * Store {@link TypeKind#FLOAT float} into local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.fstore_n <em>fstore_&lt;n&gt;<\/em>\n+     *\/\n@@ -251,1 +562,5 @@\n-    \/** Store float into local variable 3 *\/\n+    \/**\n+     * Store {@link TypeKind#FLOAT float} into local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.fstore_n <em>fstore_&lt;n&gt;<\/em>\n+     *\/\n@@ -254,1 +569,5 @@\n-    \/** Store double into local variable 0 *\/\n+    \/**\n+     * Store {@link TypeKind#DOUBLE double} into local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.dstore_n <em>dstore_&lt;n&gt;<\/em>\n+     *\/\n@@ -257,1 +576,5 @@\n-    \/** Store double into local variable 1 *\/\n+    \/**\n+     * Store {@link TypeKind#DOUBLE double} into local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.dstore_n <em>dstore_&lt;n&gt;<\/em>\n+     *\/\n@@ -260,1 +583,5 @@\n-    \/** Store double into local variable 2 *\/\n+    \/**\n+     * Store {@link TypeKind#DOUBLE double} into local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.dstore_n <em>dstore_&lt;n&gt;<\/em>\n+     *\/\n@@ -263,1 +590,5 @@\n-    \/** Store double into local variable 3 *\/\n+    \/**\n+     * Store {@link TypeKind#DOUBLE double} into local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.dstore_n <em>dstore_&lt;n&gt;<\/em>\n+     *\/\n@@ -266,1 +597,6 @@\n-    \/** Store reference into local variable 0 *\/\n+    \/**\n+     * Store {@link TypeKind#REFERENCE reference} into local variable slot {@code 0}.\n+     * Can also store the {@code returnAddress} type.\n+     *\n+     * @jvms 6.5.astore_n <em>astore_&lt;n&gt;<\/em>\n+     *\/\n@@ -269,1 +605,6 @@\n-    \/** Store reference into local variable 1 *\/\n+    \/**\n+     * Store {@link TypeKind#REFERENCE reference} into local variable slot {@code 1}.\n+     * Can also store the {@code returnAddress} type.\n+     *\n+     * @jvms 6.5.astore_n <em>astore_&lt;n&gt;<\/em>\n+     *\/\n@@ -272,1 +613,6 @@\n-    \/** Store reference into local variable 2 *\/\n+    \/**\n+     * Store {@link TypeKind#REFERENCE reference} into local variable slot {@code 2}.\n+     * Can also store the {@code returnAddress} type.\n+     *\n+     * @jvms 6.5.astore_n <em>astore_&lt;n&gt;<\/em>\n+     *\/\n@@ -275,1 +621,6 @@\n-    \/** Store reference into local variable 3 *\/\n+    \/**\n+     * Store {@link TypeKind#REFERENCE reference} into local variable slot {@code 3}.\n+     * Can also store the {@code returnAddress} type.\n+     *\n+     * @jvms 6.5.astore_n <em>astore_&lt;n&gt;<\/em>\n+     *\/\n@@ -278,1 +629,5 @@\n-    \/** Store into int array *\/\n+    \/**\n+     * Store into {@link TypeKind#INT int} array.\n+     *\n+     * @jvms 6.5.iastore <em>iastore<\/em>\n+     *\/\n@@ -281,1 +636,5 @@\n-    \/** Store into long array *\/\n+    \/**\n+     * Store into {@link TypeKind#LONG long} array.\n+     *\n+     * @jvms 6.5.lastore <em>lastore<\/em>\n+     *\/\n@@ -284,1 +643,5 @@\n-    \/** Store into float array *\/\n+    \/**\n+     * Store into {@link TypeKind#FLOAT float} array.\n+     *\n+     * @jvms 6.5.fastore <em>fastore<\/em>\n+     *\/\n@@ -287,1 +650,5 @@\n-    \/** Store into double array *\/\n+    \/**\n+     * Store into {@link TypeKind#DOUBLE double} array.\n+     *\n+     * @jvms 6.5.dastore <em>dastore<\/em>\n+     *\/\n@@ -290,1 +657,5 @@\n-    \/** Store into reference array *\/\n+    \/**\n+     * Store into {@link TypeKind#REFERENCE reference} array.\n+     *\n+     * @jvms 6.5.aastore <em>aastore<\/em>\n+     *\/\n@@ -293,1 +664,5 @@\n-    \/** Store into byte array *\/\n+    \/**\n+     * Store into {@link TypeKind#BYTE byte} or {@link TypeKind#BOOLEAN boolean} array.\n+     *\n+     * @jvms 6.5.bastore <em>bastore<\/em>\n+     *\/\n@@ -296,1 +671,5 @@\n-    \/** Store into char array *\/\n+    \/**\n+     * Store into {@link TypeKind#CHAR char} array.\n+     *\n+     * @jvms 6.5.castore <em>castore<\/em>\n+     *\/\n@@ -299,1 +678,5 @@\n-    \/** Store into short array *\/\n+    \/**\n+     * Store into {@link TypeKind#SHORT short} array.\n+     *\n+     * @jvms 6.5.sastore <em>sastore<\/em>\n+     *\/\n@@ -302,1 +685,5 @@\n-    \/** Pop the top operand stack value *\/\n+    \/**\n+     * Pop the top operand stack value.\n+     *\n+     * @jvms 6.5.pop <em>pop<\/em>\n+     *\/\n@@ -305,1 +692,5 @@\n-    \/** Pop the top one or two operand stack values *\/\n+    \/**\n+     * Pop the top one or two operand stack values.\n+     *\n+     * @jvms 6.5.pop2 <em>pop2<\/em>\n+     *\/\n@@ -308,1 +699,5 @@\n-    \/** Duplicate the top operand stack value *\/\n+    \/**\n+     * Duplicate the top operand stack value.\n+     *\n+     * @jvms 6.5.dup <em>dup<\/em>\n+     *\/\n@@ -311,1 +706,5 @@\n-    \/** Duplicate the top operand stack value and insert two values down *\/\n+    \/**\n+     * Duplicate the top operand stack value and insert two values down.\n+     *\n+     * @jvms 6.5.dup_x1 <em>dup_x1<\/em>\n+     *\/\n@@ -314,1 +713,5 @@\n-    \/** Duplicate the top operand stack value and insert two or three values down *\/\n+    \/**\n+     * Duplicate the top operand stack value and insert two or three values down.\n+     *\n+     * @jvms 6.5.dup_x2 <em>dup_x2<\/em>\n+     *\/\n@@ -317,1 +720,5 @@\n-    \/** Duplicate the top one or two operand stack values *\/\n+    \/**\n+     * Duplicate the top one or two operand stack values.\n+     *\n+     * @jvms 6.5.dup2 <em>dup2<\/em>\n+     *\/\n@@ -320,1 +727,6 @@\n-    \/** Duplicate the top one or two operand stack values and insert two or three values down *\/\n+    \/**\n+     * Duplicate the top one or two operand stack values and insert two or three\n+     * values down.\n+     *\n+     * @jvms 6.5.dup2_x1 <em>dup2_x1<\/em>\n+     *\/\n@@ -323,1 +735,6 @@\n-    \/** Duplicate the top one or two operand stack values and insert two, three, or four values down *\/\n+    \/**\n+     * Duplicate the top one or two operand stack values and insert two, three,\n+     * or four values down.\n+     *\n+     * @jvms 6.5.dup2_x2 <em>dup2_x2<\/em>\n+     *\/\n@@ -326,1 +743,5 @@\n-    \/** Swap the top two operand stack values *\/\n+    \/**\n+     * Swap the top two operand stack values.\n+     *\n+     * @jvms 6.5.swap <em>swap<\/em>\n+     *\/\n@@ -329,1 +750,5 @@\n-    \/** Add int *\/\n+    \/**\n+     * Add {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.iadd <em>iadd<\/em>\n+     *\/\n@@ -332,1 +757,5 @@\n-    \/** Add long *\/\n+    \/**\n+     * Add {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.ladd <em>ladd<\/em>\n+     *\/\n@@ -335,1 +764,5 @@\n-    \/** Add float *\/\n+    \/**\n+     * Add {@link TypeKind#FLOAT float}.\n+     *\n+     * @jvms 6.5.fadd <em>fadd<\/em>\n+     *\/\n@@ -338,1 +771,5 @@\n-    \/** Add double *\/\n+    \/**\n+     * Add {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jvms 6.5.dadd <em>dadd<\/em>\n+     *\/\n@@ -341,1 +778,5 @@\n-    \/** Subtract int *\/\n+    \/**\n+     * Subtract {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.isub <em>isub<\/em>\n+     *\/\n@@ -344,1 +785,5 @@\n-    \/** Subtract long *\/\n+    \/**\n+     * Subtract {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lsub <em>lsub<\/em>\n+     *\/\n@@ -347,1 +792,5 @@\n-    \/** Subtract float *\/\n+    \/**\n+     * Subtract {@link TypeKind#FLOAT float}.\n+     *\n+     * @jvms 6.5.fsub <em>fsub<\/em>\n+     *\/\n@@ -350,1 +799,5 @@\n-    \/** Subtract double *\/\n+    \/**\n+     * Subtract {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jvms 6.5.dsub <em>dsub<\/em>\n+     *\/\n@@ -353,1 +806,5 @@\n-    \/** Multiply int *\/\n+    \/**\n+     * Multiply {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.imul <em>imul<\/em>\n+     *\/\n@@ -356,1 +813,5 @@\n-    \/** Multiply long *\/\n+    \/**\n+     * Multiply {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lmul <em>lmul<\/em>\n+     *\/\n@@ -359,1 +820,5 @@\n-    \/** Multiply float *\/\n+    \/**\n+     * Multiply {@link TypeKind#FLOAT float}.\n+     *\n+     * @jvms 6.5.fmul <em>fmul<\/em>\n+     *\/\n@@ -362,1 +827,5 @@\n-    \/** Multiply double *\/\n+    \/**\n+     * Multiply {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jvms 6.5.dmul <em>dmul<\/em>\n+     *\/\n@@ -365,1 +834,5 @@\n-    \/** Divide int *\/\n+    \/**\n+     * Divide {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.idiv <em>idiv<\/em>\n+     *\/\n@@ -368,1 +841,5 @@\n-    \/** Divide long *\/\n+    \/**\n+     * Divide {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.ldiv <em>ldiv<\/em>\n+     *\/\n@@ -371,1 +848,5 @@\n-    \/** Divide float *\/\n+    \/**\n+     * Divide {@link TypeKind#FLOAT float}.\n+     *\n+     * @jvms 6.5.fdiv <em>fdiv<\/em>\n+     *\/\n@@ -374,1 +855,5 @@\n-    \/** Divide double *\/\n+    \/**\n+     * Divide {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jvms 6.5.ddiv <em>ddiv<\/em>\n+     *\/\n@@ -377,1 +862,5 @@\n-    \/** Remainder int *\/\n+    \/**\n+     * Remainder {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.irem <em>irem<\/em>\n+     *\/\n@@ -380,1 +869,5 @@\n-    \/** Remainder long *\/\n+    \/**\n+     * Remainder {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lrem <em>lrem<\/em>\n+     *\/\n@@ -383,1 +876,5 @@\n-    \/** Remainder float *\/\n+    \/**\n+     * Remainder {@link TypeKind#FLOAT float}.\n+     *\n+     * @jvms 6.5.frem <em>frem<\/em>\n+     *\/\n@@ -386,1 +883,5 @@\n-    \/** Remainder double *\/\n+    \/**\n+     * Remainder {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jvms 6.5.drem <em>drem<\/em>\n+     *\/\n@@ -389,1 +890,5 @@\n-    \/** Negate int *\/\n+    \/**\n+     * Negate {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.ineg <em>ineg<\/em>\n+     *\/\n@@ -392,1 +897,5 @@\n-    \/** Negate long *\/\n+    \/**\n+     * Negate {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lneg <em>lneg<\/em>\n+     *\/\n@@ -395,1 +904,5 @@\n-    \/** Negate float *\/\n+    \/**\n+     * Negate {@link TypeKind#FLOAT float}.\n+     *\n+     * @jvms 6.5.fneg <em>fneg<\/em>\n+     *\/\n@@ -398,1 +911,5 @@\n-    \/** Negate double *\/\n+    \/**\n+     * Negate {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jvms 6.5.dneg <em>dneg<\/em>\n+     *\/\n@@ -401,1 +918,5 @@\n-    \/** Shift left int *\/\n+    \/**\n+     * Shift left {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.ishl <em>ishl<\/em>\n+     *\/\n@@ -404,1 +925,5 @@\n-    \/** Shift left long *\/\n+    \/**\n+     * Shift left {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lshl <em>lshl<\/em>\n+     *\/\n@@ -407,1 +932,5 @@\n-    \/** Shift right int *\/\n+    \/**\n+     * Arithmetic shift right {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.ishr <em>ishr<\/em>\n+     *\/\n@@ -410,1 +939,5 @@\n-    \/** Shift right long *\/\n+    \/**\n+     * Arithmetic shift right {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lshr <em>lshr<\/em>\n+     *\/\n@@ -413,1 +946,5 @@\n-    \/** Logical shift right int *\/\n+    \/**\n+     * Logical shift right {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.iushr <em>iushr<\/em>\n+     *\/\n@@ -416,1 +953,5 @@\n-    \/** Logical shift right long *\/\n+    \/**\n+     * Logical shift right {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lushr <em>lushr<\/em>\n+     *\/\n@@ -419,1 +960,8 @@\n-    \/** Boolean AND int *\/\n+    \/**\n+     * Bitwise AND {@link TypeKind#INT int}.\n+     *\n+     * @apiNote\n+     * This may be used to implement {@link TypeKind#BOOLEAN boolean} AND.\n+     *\n+     * @jvms 6.5.iand <em>iand<\/em>\n+     *\/\n@@ -422,1 +970,5 @@\n-    \/** Boolean AND long *\/\n+    \/**\n+     * Bitwise AND {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.land <em>land<\/em>\n+     *\/\n@@ -425,1 +977,8 @@\n-    \/** Boolean OR int *\/\n+    \/**\n+     * Bitwise OR {@link TypeKind#INT int}.\n+     *\n+     * @apiNote\n+     * This may be used to implement {@link TypeKind#BOOLEAN boolean} OR.\n+     *\n+     * @jvms 6.5.ior <em>ior<\/em>\n+     *\/\n@@ -428,1 +987,5 @@\n-    \/** Boolean OR long *\/\n+    \/**\n+     * Bitwise OR {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lor <em>lor<\/em>\n+     *\/\n@@ -431,1 +994,8 @@\n-    \/** Boolean XOR int *\/\n+    \/**\n+     * Bitwise XOR {@link TypeKind#INT int}.\n+     *\n+     * @apiNote\n+     * This may be used to implement {@link TypeKind#BOOLEAN boolean} XOR.\n+     *\n+     * @jvms 6.5.ixor <em>ixor<\/em>\n+     *\/\n@@ -434,1 +1004,5 @@\n-    \/** Boolean XOR long *\/\n+    \/**\n+     * Bitwise XOR {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lxor <em>lxor<\/em>\n+     *\/\n@@ -437,1 +1011,5 @@\n-    \/** Increment local variable by constant *\/\n+    \/**\n+     * Increment local variable by constant.\n+     *\n+     * @jvms 6.5.iinc <em>iinc<\/em>\n+     *\/\n@@ -440,1 +1018,6 @@\n-    \/** Convert int to long *\/\n+    \/**\n+     * Convert {@link TypeKind#INT int} to {@link TypeKind#LONG long}.\n+     *\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     * @jvms 6.5.i2l <em>i2l<\/em>\n+     *\/\n@@ -443,1 +1026,6 @@\n-    \/** Convert int to float *\/\n+    \/**\n+     * Convert {@link TypeKind#INT int} to {@link TypeKind#FLOAT float}.\n+     *\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     * @jvms 6.5.i2f <em>i2f<\/em>\n+     *\/\n@@ -446,1 +1034,6 @@\n-    \/** Convert int to double *\/\n+    \/**\n+     * Convert {@link TypeKind#INT int} to {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     * @jvms 6.5.i2d <em>i2d<\/em>\n+     *\/\n@@ -449,1 +1042,6 @@\n-    \/** Convert long to int *\/\n+    \/**\n+     * Convert {@link TypeKind#LONG long} to {@link TypeKind#INT int}.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.l2i <em>l2i<\/em>\n+     *\/\n@@ -452,1 +1050,5 @@\n-    \/** Convert long to float *\/\n+    \/** Convert {@link TypeKind#LONG long} to {@link TypeKind#FLOAT float}.\n+     *\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     * @jvms 6.5.l2f <em>l2f<\/em>\n+     *\/\n@@ -455,1 +1057,5 @@\n-    \/** Convert long to double *\/\n+    \/** Convert {@link TypeKind#LONG long} to {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     * @jvms 6.5.l2d <em>l2d<\/em>\n+     *\/\n@@ -458,1 +1064,6 @@\n-    \/** Convert float to int *\/\n+    \/**\n+     * Convert {@link TypeKind#FLOAT float} to {@link TypeKind#INT int}.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.f2i <em>f2i<\/em>\n+     *\/\n@@ -461,1 +1072,6 @@\n-    \/** Convert float to long *\/\n+    \/**\n+     * Convert {@link TypeKind#FLOAT float} to {@link TypeKind#LONG long}.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.f2l <em>f2l<\/em>\n+     *\/\n@@ -464,1 +1080,6 @@\n-    \/** Convert float to double *\/\n+    \/**\n+     * Convert {@link TypeKind#FLOAT float} to {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     * @jvms 6.5.f2d <em>f2d<\/em>\n+     *\/\n@@ -467,1 +1088,6 @@\n-    \/** Convert double to int *\/\n+    \/**\n+     * Convert {@link TypeKind#DOUBLE double} to {@link TypeKind#INT int}.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.d2i <em>d2i<\/em>\n+     *\/\n@@ -470,1 +1096,5 @@\n-    \/** Convert double to long *\/\n+    \/**\n+     * Convert {@link TypeKind#DOUBLE double} to {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.d2l <em>d2l<\/em>\n+     *\/\n@@ -473,1 +1103,6 @@\n-    \/** Convert double to float *\/\n+    \/**\n+     * Convert {@link TypeKind#DOUBLE double} to {@link TypeKind#FLOAT float}.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.d2f <em>d2f<\/em>\n+     *\/\n@@ -476,1 +1111,8 @@\n-    \/** Convert int to byte *\/\n+    \/**\n+     * Convert {@link TypeKind#INT int} to {@link TypeKind#BYTE byte}.\n+     * This is as if storing the {@linkplain TypeKind##computational-type\n+     * computational} {@code int} into a {@code byte} and loading it back.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.i2b <em>i2b<\/em>\n+     *\/\n@@ -479,1 +1121,8 @@\n-    \/** Convert int to char *\/\n+    \/**\n+     * Convert {@link TypeKind#INT int} to {@link TypeKind#CHAR char}.\n+     * This is as if storing the {@linkplain TypeKind##computational-type\n+     * computational} {@code int} into a {@code char} and loading it back.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.i2c <em>i2c<\/em>\n+     *\/\n@@ -482,1 +1131,8 @@\n-    \/** Convert int to short *\/\n+    \/**\n+     * Convert {@link TypeKind#INT int} to {@link TypeKind#SHORT short}.\n+     * This is as if storing the {@linkplain TypeKind##computational-type\n+     * computational} {@code int} into a {@code short} and loading it back.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.i2s <em>i2s<\/em>\n+     *\/\n@@ -485,1 +1141,6 @@\n-    \/** Compare long *\/\n+    \/**\n+     * Compare {@link TypeKind#LONG long}.\n+     *\n+     * @see Long#compare(long, long)\n+     * @jvms 6.5.lcmp <em>lcmp<\/em>\n+     *\/\n@@ -488,1 +1149,7 @@\n-    \/** Compare float *\/\n+    \/**\n+     * Compare {@link TypeKind#FLOAT float}.\n+     * Produces {@code -1} if any operand is {@link Float#isNaN(float) NaN}.\n+     *\n+     * @see Double##equivalenceRelation Floating-point Equality, Equivalence, and Comparison\n+     * @jvms 6.5.fcmp_op <em>fcmp&lt;op&gt;<\/em>\n+     *\/\n@@ -491,1 +1158,7 @@\n-    \/** Compare float *\/\n+    \/**\n+     * Compare {@link TypeKind#FLOAT float}.\n+     * Produces {@code 1} if any operand is {@link Float#isNaN(float) NaN}.\n+     *\n+     * @see Double##equivalenceRelation Floating-point Equality, Equivalence, and Comparison\n+     * @jvms 6.5.fcmp_op <em>fcmp&lt;op&gt;<\/em>\n+     *\/\n@@ -494,1 +1167,7 @@\n-    \/** Compare double *\/\n+    \/**\n+     * Compare {@link TypeKind#DOUBLE double}.\n+     * Produces {@code -1} if any operand is {@link Double#isNaN(double) NaN}.\n+     *\n+     * @see Double##equivalenceRelation Floating-point Equality, Equivalence, and Comparison\n+     * @jvms 6.5.dcmp_op <em>dcmp&lt;op&gt;<\/em>\n+     *\/\n@@ -497,1 +1176,7 @@\n-    \/** Compare double *\/\n+    \/**\n+     * Compare {@link TypeKind#DOUBLE double}.\n+     * Produces {@code 1} if any operand is {@link Double#isNaN(double) NaN}.\n+     *\n+     * @see Double##equivalenceRelation Floating-point Equality, Equivalence, and Comparison\n+     * @jvms 6.5.dcmp_op <em>dcmp&lt;op&gt;<\/em>\n+     *\/\n@@ -500,1 +1185,5 @@\n-    \/** Branch if int comparison with zero succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code == 0} succeeds.\n+     *\n+     * @jvms 6.5.if_cond <em>if_&lt;cond&gt;<\/em>\n+     *\/\n@@ -503,1 +1192,5 @@\n-    \/** Branch if int comparison with zero succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code != 0} succeeds.\n+     *\n+     * @jvms 6.5.if_cond <em>if_&lt;cond&gt;<\/em>\n+     *\/\n@@ -506,1 +1199,5 @@\n-    \/** Branch if int comparison with zero succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code < 0} succeeds.\n+     *\n+     * @jvms 6.5.if_cond <em>if_&lt;cond&gt;<\/em>\n+     *\/\n@@ -509,1 +1206,5 @@\n-    \/** Branch if int comparison with zero succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code >= 0} succeeds.\n+     *\n+     * @jvms 6.5.if_cond <em>if_&lt;cond&gt;<\/em>\n+     *\/\n@@ -512,1 +1213,5 @@\n-    \/** Branch if int comparison with zero succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code > 0} succeeds.\n+     *\n+     * @jvms 6.5.if_cond <em>if_&lt;cond&gt;<\/em>\n+     *\/\n@@ -515,1 +1220,5 @@\n-    \/** Branch if int comparison with zero succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code <= 0} succeeds.\n+     *\n+     * @jvms 6.5.if_cond <em>if_&lt;cond&gt;<\/em>\n+     *\/\n@@ -518,1 +1227,5 @@\n-    \/** Branch if int comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code operand1 == operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_icmp_cond <em>if_icmp&lt;cond&gt;<\/em>\n+     *\/\n@@ -521,1 +1234,5 @@\n-    \/** Branch if int comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code operand1 != operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_icmp_cond <em>if_icmp&lt;cond&gt;<\/em>\n+     *\/\n@@ -524,1 +1241,5 @@\n-    \/** Branch if int comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code operand1 < operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_icmp_cond <em>if_icmp&lt;cond&gt;<\/em>\n+     *\/\n@@ -527,1 +1248,5 @@\n-    \/** Branch if int comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code operand1 >= operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_icmp_cond <em>if_icmp&lt;cond&gt;<\/em>\n+     *\/\n@@ -530,1 +1255,5 @@\n-    \/** Branch if int comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code operand1 > operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_icmp_cond <em>if_icmp&lt;cond&gt;<\/em>\n+     *\/\n@@ -533,1 +1262,5 @@\n-    \/** Branch if int comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code operand1 <= operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_icmp_cond <em>if_icmp&lt;cond&gt;<\/em>\n+     *\/\n@@ -536,1 +1269,6 @@\n-    \/** Branch if reference comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#REFERENCE reference} comparison\n+     * {@code operand1 == operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_acmp_cond <em>if_acmp&lt;cond&gt;<\/em>\n+     *\/\n@@ -539,1 +1277,6 @@\n-    \/** Branch if reference comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#REFERENCE reference} comparison\n+     * {@code operand1 != operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_acmp_cond <em>if_acmp&lt;cond&gt;<\/em>\n+     *\/\n@@ -542,1 +1285,5 @@\n-    \/** Branch always *\/\n+    \/**\n+     * Branch always.\n+     *\n+     * @jvms 6.5.goto <em>goto<\/em>\n+     *\/\n@@ -546,2 +1293,6 @@\n-     * Jump subroutine is discontinued opcode\n-     * @see java.lang.classfile.instruction.DiscontinuedInstruction\n+     * (Discontinued) Jump subroutine; last used in major version {@value\n+     * ClassFile#JAVA_6_VERSION}.\n+     *\n+     * @see DiscontinuedInstruction.JsrInstruction\n+     * @jvms 4.9.1 Static Constraints\n+     * @jvms 6.5.jsr <em>jsr<\/em>\n@@ -552,2 +1303,6 @@\n-     * Return from subroutine is discontinued opcode\n-     * @see java.lang.classfile.instruction.DiscontinuedInstruction\n+     * (Discontinued) Return from subroutine; last used in major version\n+     * {@value ClassFile#JAVA_6_VERSION}.\n+     *\n+     * @see DiscontinuedInstruction.RetInstruction\n+     * @jvms 4.9.1 Static Constraints\n+     * @jvms 6.5.ret <em>ret<\/em>\n@@ -557,1 +1312,5 @@\n-    \/** Access jump table by index and jump *\/\n+    \/**\n+     * Access jump table by index and jump.\n+     *\n+     * @jvms 6.5.tableswitch <em>tableswitch<\/em>\n+     *\/\n@@ -560,1 +1319,5 @@\n-    \/** Access jump table by key match and jump *\/\n+    \/**\n+     * Access jump table by key match and jump.\n+     *\n+     * @jvms 6.5.lookupswitch <em>lookupswitch<\/em>\n+     *\/\n@@ -563,1 +1326,5 @@\n-    \/** Return int from method *\/\n+    \/**\n+     * Return {@link TypeKind#INT int} from method.\n+     *\n+     * @jvms 6.5.ireturn <em>ireturn<\/em>\n+     *\/\n@@ -566,1 +1333,5 @@\n-    \/** Return long from method *\/\n+    \/**\n+     * Return {@link TypeKind#LONG long} from method.\n+     *\n+     * @jvms 6.5.lreturn <em>lreturn<\/em>\n+     *\/\n@@ -569,1 +1340,5 @@\n-    \/** Return float from method *\/\n+    \/**\n+     * Return {@link TypeKind#FLOAT float} from method.\n+     *\n+     * @jvms 6.5.freturn <em>freturn<\/em>\n+     *\/\n@@ -572,1 +1347,5 @@\n-    \/** Return double from method *\/\n+    \/**\n+     * Return {@link TypeKind#DOUBLE double} from method.\n+     *\n+     * @jvms 6.5.dreturn <em>dreturn<\/em>\n+     *\/\n@@ -575,1 +1354,5 @@\n-    \/** Return reference from method *\/\n+    \/**\n+     * Return {@link TypeKind#REFERENCE reference} from method.\n+     *\n+     * @jvms 6.5.areturn <em>areturn<\/em>\n+     *\/\n@@ -578,1 +1361,5 @@\n-    \/** Return void from method *\/\n+    \/**\n+     * Return {@link TypeKind#VOID void} from method.\n+     *\n+     * @jvms 6.5.return <em>return<\/em>\n+     *\/\n@@ -581,1 +1368,5 @@\n-    \/** Get static field from class *\/\n+    \/**\n+     * Get {@code static} field from class.\n+     *\n+     * @jvms 6.5.getstatic <em>getstatic<\/em>\n+     *\/\n@@ -584,1 +1375,5 @@\n-    \/** Set static field in class *\/\n+    \/**\n+     * Set {@code static} field in class.\n+     *\n+     * @jvms 6.5.putstatic <em>putstatic<\/em>\n+     *\/\n@@ -587,1 +1382,5 @@\n-    \/** Fetch field from object *\/\n+    \/**\n+     * Fetch field from object.\n+     *\n+     * @jvms 6.5.getfield <em>getfield<\/em>\n+     *\/\n@@ -590,1 +1389,5 @@\n-    \/** Set field in object *\/\n+    \/**\n+     * Set field in object.\n+     *\n+     * @jvms 6.5.putfield <em>putfield<\/em>\n+     *\/\n@@ -593,1 +1396,5 @@\n-    \/** Invoke instance method; dispatch based on class *\/\n+    \/**\n+     * Invoke instance method; dispatch based on class.\n+     *\n+     * @jvms 6.5.invokevirtual <em>invokevirtual<\/em>\n+     *\/\n@@ -598,1 +1405,3 @@\n-     * methods and methods of the current class and its supertypes\n+     * methods and methods of the current class and its supertypes.\n+     *\n+     * @jvms 6.5.invokevirtual <em>invokevirtual<\/em>\n@@ -602,1 +1411,5 @@\n-    \/** Invoke a class (static) method *\/\n+    \/**\n+     * Invoke a class ({@code static}) method.\n+     *\n+     * @jvms 6.5.invokestatic <em>invokestatic<\/em>\n+     *\/\n@@ -605,1 +1418,5 @@\n-    \/** Invoke interface method *\/\n+    \/**\n+     * Invoke interface method.\n+     *\n+     * @jvms 6.5.invokeinterface <em>invokeinterface<\/em>\n+     *\/\n@@ -608,1 +1425,5 @@\n-    \/** Invoke a dynamically-computed call site *\/\n+    \/**\n+     * Invoke a dynamically-computed call site.\n+     *\n+     * @jvms 6.5.invokedynamic <em>invokedynamic<\/em>\n+     *\/\n@@ -611,1 +1432,5 @@\n-    \/** Create new object *\/\n+    \/**\n+     * Create new object.\n+     *\n+     * @jvms 6.5.new <em>new<\/em>\n+     *\/\n@@ -614,1 +1439,5 @@\n-    \/** Create new array *\/\n+    \/**\n+     * Create new array.\n+     *\n+     * @jvms 6.5.newarray <em>newarray<\/em>\n+     *\/\n@@ -617,1 +1446,4 @@\n-    \/** Create new array of reference *\/\n+    \/** Create new array of {@link TypeKind#REFERENCE reference}.\n+     *\n+     * @jvms 6.5.anewarray <em>anewarray<\/em>\n+     *\/\n@@ -620,1 +1452,5 @@\n-    \/** Get length of array *\/\n+    \/**\n+     * Get length of array.\n+     *\n+     * @jvms 6.5.arraylength <em>arraylength<\/em>\n+     *\/\n@@ -623,1 +1459,5 @@\n-    \/** Throw exception or error *\/\n+    \/**\n+     * Throw exception or error.\n+     *\n+     * @jvms 6.5.athrow <em>athrow<\/em>\n+     *\/\n@@ -626,1 +1466,6 @@\n-    \/** Check whether object is of given type *\/\n+    \/**\n+     * Check whether object is of given type.\n+     *\n+     * @see Class#cast(Object)\n+     * @jvms 6.5.checkcast <em>checkcast<\/em>\n+     *\/\n@@ -629,1 +1474,6 @@\n-    \/** Determine if object is of given type *\/\n+    \/**\n+     * Determine if object is of given type.\n+     *\n+     * @see Class#isInstance(Object)\n+     * @jvms 6.5.instanceof <em>instanceof<\/em>\n+     *\/\n@@ -632,1 +1482,5 @@\n-    \/** Enter monitor for object *\/\n+    \/**\n+     * Enter monitor for object.\n+     *\n+     * @jvms 6.5.monitorenter <em>monitorenter<\/em>\n+     *\/\n@@ -635,1 +1489,5 @@\n-    \/** Exit monitor for object *\/\n+    \/**\n+     * Exit monitor for object.\n+     *\n+     * @jvms 6.5.monitorexit <em>monitorexit<\/em>\n+     *\/\n@@ -638,1 +1496,5 @@\n-    \/** Create new multidimensional array *\/\n+    \/**\n+     * Create new multidimensional array.\n+     *\n+     * @jvms 6.5.multianewarray <em>multianewarray<\/em>\n+     *\/\n@@ -641,1 +1503,5 @@\n-    \/** Branch if reference is null *\/\n+    \/**\n+     * Branch if {@link TypeKind#REFERENCE reference} is {@code null}.\n+     *\n+     * @jvms 6.5.ifnull <em>ifnull<\/em>\n+     *\/\n@@ -644,1 +1510,5 @@\n-    \/** Branch if reference not null *\/\n+    \/**\n+     * Branch if {@link TypeKind#REFERENCE reference} is not {@code null}.\n+     *\n+     * @jvms 6.5.ifnonnull <em>ifnonnull<\/em>\n+     *\/\n@@ -647,1 +1517,5 @@\n-    \/** Branch always (wide index) *\/\n+    \/**\n+     * Branch always (wide index).\n+     *\n+     * @jvms 6.5.goto_w <em>goto_w<\/em>\n+     *\/\n@@ -651,2 +1525,6 @@\n-     * Jump subroutine (wide index) is discontinued opcode\n-     * @see java.lang.classfile.instruction.DiscontinuedInstruction\n+     * (Discontinued) Jump subroutine (wide index); last used in major\n+     * version {@value ClassFile#JAVA_6_VERSION}.\n+     *\n+     * @see DiscontinuedInstruction.JsrInstruction\n+     * @jvms 4.9.1 Static Constraints\n+     * @jvms 6.5.jsr_w <em>jsr_w<\/em>\n@@ -656,1 +1534,7 @@\n-    \/** Load int from local variable (wide index) *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.iload <em>iload<\/em>\n+     *\/\n@@ -659,1 +1543,7 @@\n-    \/** Load long from local variable (wide index) *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.lload <em>lload<\/em>\n+     *\/\n@@ -662,1 +1552,7 @@\n-    \/** Load float from local variable (wide index) *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.fload <em>fload<\/em>\n+     *\/\n@@ -665,1 +1561,7 @@\n-    \/** Load double from local variable (wide index) *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.dload <em>dload<\/em>\n+     *\/\n@@ -668,1 +1570,7 @@\n-    \/** Load reference from local variable (wide index) *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.aload <em>aload<\/em>\n+     *\/\n@@ -671,1 +1579,7 @@\n-    \/** Store int into local variable (wide index) *\/\n+    \/**\n+     * Store {@link TypeKind#INT int} into local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.istore <em>istore<\/em>\n+     *\/\n@@ -674,1 +1588,7 @@\n-    \/** Store long into local variable (wide index) *\/\n+    \/**\n+     * Store {@link TypeKind#LONG long} into local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.lstore <em>lstore<\/em>\n+     *\/\n@@ -677,1 +1597,7 @@\n-    \/** Store float into local variable (wide index) *\/\n+    \/**\n+     * Store {@link TypeKind#FLOAT float} into local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.fstore <em>fstore<\/em>\n+     *\/\n@@ -680,1 +1606,7 @@\n-    \/** Store double into local variable (wide index) *\/\n+    \/**\n+     * Store {@link TypeKind#DOUBLE double} into local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.dstore <em>dstore<\/em>\n+     *\/\n@@ -683,1 +1615,8 @@\n-    \/** Store reference into local variable (wide index) *\/\n+    \/**\n+     * Store {@link TypeKind#REFERENCE reference} into local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     * Can also store the {@code returnAddress} type.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.astore <em>astore<\/em>\n+     *\/\n@@ -687,2 +1626,8 @@\n-     * Return from subroutine (wide index) is discontinued opcode\n-     * @see java.lang.classfile.instruction.DiscontinuedInstruction\n+     * (Discontinued) Return from subroutine (wide index) last used in major\n+     * version {@value ClassFile#JAVA_6_VERSION}.\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @see DiscontinuedInstruction.RetInstruction\n+     * @jvms 4.9.1 Static Constraints\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.ret <em>ret<\/em>\n@@ -692,1 +1637,7 @@\n-    \/** Increment local variable by constant (wide index) *\/\n+    \/**\n+     * Increment local variable by constant (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.iinc <em>iinc<\/em>\n+     *\/\n@@ -700,1 +1651,1 @@\n-    public static enum Kind {\n+    public enum Kind {\n@@ -703,1 +1654,1 @@\n-         * Load from local variable\n+         * Load from local variable.\n@@ -705,0 +1656,1 @@\n+         * @see LoadInstruction\n@@ -739,1 +1691,1 @@\n-         * Store into local variable\n+         * Store into local variable.\n@@ -741,0 +1693,1 @@\n+         * @see StoreInstruction\n@@ -775,1 +1728,1 @@\n-         * Increment local variable\n+         * Increment local variable.\n@@ -777,0 +1730,1 @@\n+         * @see IncrementInstruction\n@@ -783,1 +1737,1 @@\n-         * Branch\n+         * Branch.\n@@ -785,0 +1739,1 @@\n+         * @see BranchInstruction\n@@ -807,1 +1762,1 @@\n-         * Access jump table by key match and jump\n+         * Access jump table by key match and jump.\n@@ -809,0 +1764,1 @@\n+         * @see LookupSwitchInstruction\n@@ -814,1 +1770,1 @@\n-         * Access jump table by index and jump\n+         * Access jump table by index and jump.\n@@ -816,0 +1772,1 @@\n+         * @see TableSwitchInstruction\n@@ -821,1 +1778,1 @@\n-         * Return from method\n+         * Return from method.\n@@ -823,0 +1780,1 @@\n+         * @see ReturnInstruction\n@@ -833,1 +1791,1 @@\n-         * Throw exception or error\n+         * Throw exception or error.\n@@ -835,0 +1793,1 @@\n+         * @see ThrowInstruction\n@@ -840,1 +1799,1 @@\n-         * Access field\n+         * Access field.\n@@ -842,0 +1801,1 @@\n+         * @see FieldInstruction\n@@ -850,1 +1810,1 @@\n-         * Invoke method or constructor\n+         * Invoke method or constructor.\n@@ -852,0 +1812,1 @@\n+         * @see InvokeInstruction\n@@ -860,1 +1821,1 @@\n-         * Invoke a dynamically-computed call site\n+         * Invoke a dynamically-computed call site.\n@@ -862,0 +1823,1 @@\n+         * @see InvokeDynamicInstruction\n@@ -867,1 +1829,1 @@\n-         * Create new object\n+         * Create new object.\n@@ -869,0 +1831,1 @@\n+         * @see NewObjectInstruction\n@@ -874,1 +1837,1 @@\n-         * Create new array\n+         * Create new array.\n@@ -876,0 +1839,1 @@\n+         * @see NewPrimitiveArrayInstruction\n@@ -881,1 +1845,1 @@\n-         * Create new reference array\n+         * Create new {@link TypeKind#REFERENCE reference} array.\n@@ -883,0 +1847,1 @@\n+         * @see NewReferenceArrayInstruction\n@@ -888,1 +1853,1 @@\n-         * Create new multidimensional array\n+         * Create new multidimensional array.\n@@ -890,0 +1855,1 @@\n+         * @see NewMultiArrayInstruction\n@@ -895,1 +1861,1 @@\n-         * Check whether object is of given type\n+         * Check whether object is of given type.\n@@ -897,0 +1863,1 @@\n+         * @see TypeCheckInstruction\n@@ -903,1 +1870,1 @@\n-         * Load from array\n+         * Load from array.\n@@ -905,0 +1872,1 @@\n+         * @see ArrayLoadInstruction\n@@ -917,1 +1885,1 @@\n-         * Store into array\n+         * Store into array.\n@@ -919,0 +1887,1 @@\n+         * @see ArrayStoreInstruction\n@@ -931,1 +1900,1 @@\n-         * Stack operations\n+         * Stack operations.\n@@ -933,0 +1902,1 @@\n+         * @see StackInstruction\n@@ -946,1 +1916,1 @@\n-         * Type conversions\n+         * Type conversions.\n@@ -948,0 +1918,1 @@\n+         * @see ConvertInstruction\n@@ -967,1 +1938,1 @@\n-         * Operators\n+         * Operators.\n@@ -969,0 +1940,1 @@\n+         * @see OperatorInstruction\n@@ -1015,1 +1987,1 @@\n-         * Constants\n+         * Constants.\n@@ -1017,0 +1989,1 @@\n+         * @see ConstantInstruction\n@@ -1041,1 +2014,1 @@\n-         * Monitor\n+         * Monitor.\n@@ -1043,0 +2016,1 @@\n+         * @see MonitorInstruction\n@@ -1049,1 +2023,1 @@\n-         * Do nothing\n+         * Do nothing.\n@@ -1051,0 +2025,1 @@\n+         * @see NopInstruction\n@@ -1056,1 +2031,1 @@\n-         * Discontinued jump subroutine\n+         * Discontinued jump subroutine.\n@@ -1058,0 +2033,1 @@\n+         * @see DiscontinuedInstruction.JsrInstruction\n@@ -1060,1 +2036,0 @@\n-         * @see java.lang.classfile.instruction.DiscontinuedInstruction\n@@ -1065,1 +2040,1 @@\n-         * Discontinued return from subroutine\n+         * Discontinued return from subroutine.\n@@ -1067,0 +2042,1 @@\n+         * @see DiscontinuedInstruction.RetInstruction\n@@ -1069,1 +2045,0 @@\n-         * @see java.lang.classfile.instruction.DiscontinuedInstruction\n@@ -1093,0 +2068,2 @@\n+     * <p>\n+     * {@code wide} extends local variable index by additional bytes.\n@@ -1094,0 +2071,1 @@\n+     * @jvms 6.5.wide <em>wide<\/em>\n@@ -1112,0 +2090,2 @@\n+     *\n+     * @see Instruction#sizeInBytes() Instruction::sizeInBytes\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Opcode.java","additions":1229,"deletions":249,"binary":false,"changes":1478,"status":"modified"},{"patch":"@@ -167,1 +167,1 @@\n-     * @jvms 6.5.newarray <i>newarray<\/i>\n+     * @jvms 6.5.newarray <em>newarray<\/em>\n@@ -198,1 +198,1 @@\n-     * @jvms 6.5.newarray <i>newarray<\/i>\n+     * @jvms 6.5.newarray <em>newarray<\/em>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/TypeKind.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -38,2 +39,2 @@\n- * attribute.  Corresponding opcodes will have a {@code kind} of {@link\n- * Opcode.Kind#ARRAY_LOAD}.  Delivered as a {@link CodeElement} when\n+ * attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind}\n+ * of {@link Opcode.Kind#ARRAY_LOAD}.  Delivered as a {@link CodeElement} when\n@@ -41,0 +42,17 @@\n+ * <p>\n+ * Conceptually, an array load instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ArrayLoadInstruction\" target=\"CodeBuilder#arrayLoad(TypeKind)\" :\n+ * ArrayLoadInstruction(TypeKind) \/\/ @link substring=\"TypeKind\" target=\"#typeKind()\"\n+ * }\n+ * where the {@code TypeKind} is not {@link TypeKind#BOOLEAN boolean} or\n+ * {@link TypeKind#VOID void}.  Boolean arrays use the {@link TypeKind#BYTE\n+ * byte} kind instruction.\n+ * <p>\n+ * Physically, an array load instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ArrayLoadInstruction\" target=\"#of(Opcode)\" :\n+ * ArrayLoadInstruction(Opcode) \/\/ @link substring=\"Opcode\" target=\"#opcode()\"\n+ * }\n+ * where the {@code Opcode} is of the array load kind.  The component type of\n+ * the array is intrinsic to the opcode.\n@@ -42,0 +60,1 @@\n+ * @see CodeBuilder#arrayLoad CodeBuilder::arrayLoad\n@@ -47,1 +66,1 @@\n-     * {@return the component type of the array} The {@link TypeKind#BYTE byte}\n+     * {@return the component type of the array}  The {@link TypeKind#BYTE byte}\n@@ -49,1 +68,2 @@\n-     * {@link TypeKind#BOOLEAN boolean} arrays.\n+     * {@link TypeKind#BOOLEAN boolean} arrays, so this never returns\n+     * {@code boolean}.\n@@ -59,1 +79,1 @@\n-     *         {@link Opcode.Kind#ARRAY_LOAD}.\n+     *         {@link Opcode.Kind#ARRAY_LOAD}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ArrayLoadInstruction.java","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -38,2 +39,2 @@\n- * attribute.  Corresponding opcodes will have a {@code kind} of {@link\n- * Opcode.Kind#ARRAY_STORE}.  Delivered as a {@link CodeElement} when\n+ * attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind}\n+ * of {@link Opcode.Kind#ARRAY_STORE}.  Delivered as a {@link CodeElement} when\n@@ -41,0 +42,17 @@\n+ * <p>\n+ * Conceptually, an array store instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ArrayStoreInstruction\" target=\"CodeBuilder#arrayStore(TypeKind)\" :\n+ * ArrayStoreInstruction(TypeKind) \/\/ @link substring=\"TypeKind\" target=\"#typeKind()\"\n+ * }\n+ * where the {@code TypeKind} is not {@link TypeKind#BOOLEAN boolean} or\n+ * {@link TypeKind#VOID void}.  Boolean arrays use the {@link TypeKind#BYTE\n+ * byte} kind instruction.\n+ * <p>\n+ * Physically, an array store instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ArrayStoreInstruction\" target=\"#of(Opcode)\" :\n+ * ArrayStoreInstruction(Opcode) \/\/ @link substring=\"Opcode\" target=\"#opcode()\"\n+ * }\n+ * where the {@code Opcode} is of the array store kind.  The component type of\n+ * the array is intrinsic to the opcode.\n@@ -42,0 +60,1 @@\n+ * @see CodeBuilder#arrayStore CodeBuilder::arrayStore\n@@ -47,1 +66,1 @@\n-     * {@return the component type of the array} The {@link TypeKind#BYTE byte}\n+     * {@return the component type of the array}  The {@link TypeKind#BYTE byte}\n@@ -49,1 +68,2 @@\n-     * {@link TypeKind#BOOLEAN boolean} arrays.\n+     * {@link TypeKind#BOOLEAN boolean} arrays, so this never returns\n+     * {@code boolean}.\n@@ -59,1 +79,1 @@\n-     *         {@link Opcode.Kind#ARRAY_STORE}.\n+     *         {@link Opcode.Kind#ARRAY_STORE}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ArrayStoreInstruction.java","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -27,5 +27,1 @@\n-import java.lang.classfile.CodeElement;\n-import java.lang.classfile.CodeModel;\n-import java.lang.classfile.Instruction;\n-import java.lang.classfile.Label;\n-import java.lang.classfile.Opcode;\n+import java.lang.classfile.*;\n@@ -38,3 +34,25 @@\n- * code} array of a {@code Code} attribute.  Corresponding opcodes will have a\n- * {@code kind} of {@link Opcode.Kind#BRANCH}.  Delivered as a {@link\n- * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * code} array of a {@code Code} attribute.  Corresponding opcodes have a\n+ * {@linkplain Opcode#kind() kind} of {@link Opcode.Kind#BRANCH}.  Delivered as\n+ * a {@link CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * <p>\n+ * Conceptually, a branch instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region substring=\"BranchInstruction\" target=\"#of\"\n+ * \/\/ @link substring=\"Opcode\" target=\"#opcode()\" :\n+ * BranchInstruction(Opcode, Label) \/\/ @link substring=\"Label\" target=\"#target()\"\n+ * \/\/ @end\n+ * }\n+ * where the {@code Opcode} is of the branch kind.\n+ * <p>\n+ * Physically, a branch instruction has the same structure; however, some types\n+ * of instructions use a {@code s2} to encode the target, which is insufficient\n+ * to encode targets with bci offsets less than {@code -32768} or greater than\n+ * {@code 32767}.  Such instructions have a {@linkplain Opcode#sizeIfFixed()\n+ * size} of {@code 3} bytes.\n+ * <p>\n+ * In such cases, if the {@link ClassFile.ShortJumpsOption#FIX_SHORT_JUMPS\n+ * FIX_SHORT_JUMPS} option is set, a {@link CodeBuilder} will convert this\n+ * instruction to other instructions to achieve the same effect.  Otherwise,\n+ * {@link ClassFile.ShortJumpsOption#FAIL_ON_SHORT_JUMPS FAIL_ON_SHORT_JUMPS}\n+ * option can ensure the physical accuracy of the generated {@code class} file\n+ * and fail if an exact representation is not possible.\n@@ -42,0 +60,1 @@\n+ * @see CodeBuilder#branch CodeBuilder::branch\n@@ -59,1 +78,1 @@\n-     *         {@link Opcode.Kind#BRANCH}.\n+     *         {@link Opcode.Kind#BRANCH}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/BranchInstruction.java","additions":28,"deletions":9,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -43,0 +44,19 @@\n+ * <p>\n+ * Conceptually, a character range entry is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region=0 substring=\"CharacterRange\" target=\"#of\"\n+ * \/\/ @link region=1 substring=\"Label startScope\" target=\"#startScope\"\n+ * \/\/ @link region=2 substring=\"Label endScope\" target=\"#endScope\"\n+ * \/\/ @link region=3 substring=\"int characterRangeStart\" target=\"#characterRangeStart\"\n+ * \/\/ @link region=4 substring=\"int characterRangeEnd\" target=\"#characterRangeEnd\"\n+ * \/\/ @link substring=\"int flags\" target=\"#flags()\" :\n+ * CharacterRange(Label startScope, Label endScope, int characterRangeStart, int characterRangeEnd, int flags)\n+ * \/\/ @end region=0\n+ * \/\/ @end region=1\n+ * \/\/ @end region=2\n+ * \/\/ @end region=3\n+ * \/\/ @end region=4\n+ * }\n+ * <p>\n+ * Physically, a character range has the same structure; it is modeled by a\n+ * {@link CharacterRangeInfo}.\n@@ -44,0 +64,3 @@\n+ * @see CharacterRangeTableAttribute\n+ * @see CharacterRangeInfo\n+ * @see CodeBuilder#characterRange CodeBuilder::characterRange\n@@ -117,1 +140,1 @@\n-     * @see java.lang.classfile.attribute.CharacterRangeInfo#flags()\n+     * @see CharacterRangeInfo#flags()\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/CharacterRange.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -41,5 +42,17 @@\n- * Code} attribute, including \"intrinsic constant\" instructions (e.g., {@code\n- * iconst_0}), \"argument constant\" instructions (e.g., {@code bipush}), and \"load\n- * constant\" instructions (e.g., {@code LDC}).  Corresponding opcodes will have\n- * a {@code kind} of {@link Opcode.Kind#CONSTANT}.  Delivered as a {@link\n- * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * Code} attribute, including {@linkplain IntrinsicConstantInstruction\n+ * \"intrinsic\"}, {@linkplain ArgumentConstantInstruction \"argument\"}, and\n+ * {@linkplain LoadConstantInstruction \"load\"} constant instructions.\n+ * Corresponding opcodes have a {@linkplain Opcode#kind() kind} of {@link\n+ * Opcode.Kind#CONSTANT}.  Delivered as a {@link CodeElement} when traversing\n+ * the elements of a {@link CodeModel}.\n+ * <p>\n+ * Conceptually, a constant-load instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ConstantInstruction\" target=\"CodeBuilder#loadConstant(ConstantDesc)\" :\n+ * ConstantInstruction(ConstantDesc) \/\/ @link substring=\"ConstantDesc\" target=\"#constantValue()\"\n+ * }\n+ * The {@linkplain #typeKind() computational type} is derived from the {@code\n+ * ConstantDesc}.\n+ * <p>\n+ * Physically, a constant-load instruction is polymorphic; nested interfaces in\n+ * this interface model different constant instructions as records.\n@@ -47,0 +60,2 @@\n+ * @see CodeBuilder#loadConstant(ConstantDesc) CodeBuilder::loadConstant\n+ * @sealedGraph\n@@ -57,1 +72,1 @@\n-     * {@return the type of the constant}\n+     * {@return the {@linkplain TypeKind##computational-type computational type} of the constant}\n@@ -62,2 +77,16 @@\n-     * Models an \"intrinsic constant\" instruction (e.g., {@code\n-     * iconst_0}).\n+     * Models an \"intrinsic constant\" instruction, which encodes\n+     * the constant value in its opcode. Examples include {@link\n+     * Opcode#ACONST_NULL aconst_null} and {@link\n+     * Opcode#ICONST_0 iconst_0}.\n+     * <p>\n+     * Conceptually, an intrinsic constant instruction is a record:\n+     * {@snippet lang=text :\n+     * \/\/ @link substring=\"IntrinsicConstantInstruction\" target=\"#ofIntrinsic\" :\n+     * IntrinsicConstantInstruction(Opcode) \/\/ @link substring=\"Opcode\" target=\"#opcode()\"\n+     * }\n+     * where the {@code Opcode} is of the constant kind and has a fixed size\n+     * of 1.  The constant value and the computational type are intrinsic to\n+     * the {@code Opcode}.\n+     * <p>\n+     * Physically, an intrinsic constant instruction is the same as its\n+     * conceptual representation.\n@@ -70,3 +99,0 @@\n-        \/**\n-         * {@return the type of the constant}\n-         *\/\n@@ -80,2 +106,15 @@\n-     * Models an \"argument constant\" instruction (e.g., {@code\n-     * bipush}).\n+     * Models an \"argument constant\" instruction, which encodes the\n+     * constant value in the instruction directly. Includes {@link\n+     * Opcode#BIPUSH bipush} and {@link Opcode#SIPUSH sipush} instructions.\n+     * <p>\n+     * Physically, an argument constant instruction is a record:\n+     * {@snippet lang=text :\n+     * \/\/ @link region substring=\"ArgumentConstantInstruction\" target=\"#ofArgument\"\n+     * \/\/ @link substring=\"Opcode\" target=\"#opcode()\" :\n+     * ArgumentConstantInstruction(Opcode, int) \/\/ @link substring=\"int\" target=\"#constantValue()\"\n+     * \/\/ @end\n+     * }\n+     * where the {@code Opcode} is either {@code bipush} or {@code sipush}.\n+     * The {@code int} must be in the range of {@code byte} for {@code bipush},\n+     * and in the range of {@code short} for {@code sipush}.  The {@linkplain\n+     * #typeKind() computational type} is trivially {@code int}.\n@@ -83,0 +122,3 @@\n+     * @see CodeBuilder#loadConstant(int) CodeBuilder::loadConstant(int)\n+     * @see CodeBuilder#bipush CodeBuilder::bipush\n+     * @see CodeBuilder#sipush CodeBuilder::sipush\n@@ -92,3 +134,0 @@\n-        \/**\n-         * {@return the type of the constant}\n-         *\/\n@@ -102,2 +141,32 @@\n-     * Models a \"load constant\" instruction (e.g., {@code\n-     * ldc}).\n+     * Models a \"load constant\" instruction, which encodes the\n+     * constant value in the constant pool.  Includes {@link\n+     * Opcode#LDC ldc} and {@link Opcode#LDC_W ldc_w}, and\n+     * {@link Opcode#LDC2_W ldc2_w} instructions.\n+     * <p>\n+     * Conceptually, besides the more generic record for all constant-load\n+     * instructions, a load constant instruction are these records:\n+     * {@snippet lang=text :\n+     * \/\/ @link substring=\"LoadConstantInstruction\" target=\"CodeBuilder#ldc(ConstantDesc)\" :\n+     * LoadConstantInstruction(ConstantDesc) \/\/ @link substring=\"ConstantDesc\" target=\"#constantValue()\"\n+     * \/\/ @link substring=\"LoadConstantInstruction\" target=\"CodeBuilder#ldc(LoadableConstantEntry)\" :\n+     * LoadConstantInstruction(LoadableConstantEntry) \/\/ @link substring=\"LoadableConstantEntry\" target=\"#constantEntry()\"\n+     * }\n+     * <p>\n+     * Note that though both the generic constant-load record and the \"load\n+     * constant\" record holds a {@code ConstantDesc}, the physical representation\n+     * for the generic instruction may be more optimized, avoiding extra constant\n+     * pool entries and using smaller instructions.\n+     * <p>\n+     * Physically, a load constant instruction is a record:\n+     * {@snippet lang=text :\n+     * \/\/ @link region substring=\"LoadConstantInstruction\" target=\"#ofLoad\"\n+     * \/\/ @link substring=\"Opcode\" target=\"#opcode()\" :\n+     * LoadConstantInstruction(Opcode, LoadableConstantEntry) \/\/ @link substring=\"LoadableConstantEntry\" target=\"#constantEntry()\"\n+     * \/\/ @end\n+     * }\n+     * where the {@code Opcode} must be {@code ldc} or {@code ldc_w} if the\n+     * entry is not of {@code long} or {@code double} types, or it must be\n+     * {@code ldc2_w} if the entry is of {@code long} or {@code double} type.\n+     * Additionally, {@code ldc} cannot be used if the {@linkplain\n+     * LoadableConstantEntry#index() index} of the {@code LoadableConstantEntry}\n+     * is not in the range of {@code [0, 255]}.\n@@ -105,0 +174,1 @@\n+     * @see CodeBuilder#ldc(LoadableConstantEntry) CodeBuilder::ldc\n@@ -116,3 +186,0 @@\n-        \/**\n-         * {@return the type of the constant}\n-         *\/\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ConstantInstruction.java","additions":88,"deletions":21,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -39,3 +40,25 @@\n- * {@code Code} attribute, such as {@code i2l}.  Corresponding opcodes will have\n- * a {@code kind} of {@link Opcode.Kind#CONVERT}.  Delivered as a {@link\n- * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * {@code Code} attribute, such as {@link Opcode#I2L i2l}.  Corresponding opcodes\n+ * have a {@linkplain Opcode#kind() kind} of {@link Opcode.Kind#CONVERT}.\n+ * Delivered as a {@link CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * <p>\n+ * Conceptually, a primitive conversion instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region substring=\"ConvertInstruction\" target=\"#of(TypeKind, TypeKind)\" :\n+ * \/\/ @link substring=\"TypeKind fromType\" target=\"#fromType\" :\n+ * ConvertInstruction(TypeKind fromType, TypeKind toType) \/\/ @link substring=\"TypeKind toType\" target=\"#toType\"\n+ * \/\/ @end\n+ * }\n+ * where these conversions are valid:\n+ * <ul>\n+ * <li>Between {@code int}, {@code long}, {@code float}, and {@code double}, where\n+ * {@code fromType != toType};\n+ * <li>From {@code int} to {@code byte}, {@code char}, and {@code short}.\n+ * <\/ul>\n+ * <p>\n+ * Physically, a primitive conversion instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ConvertInstruction\" target=\"#of(Opcode)\" :\n+ * ConvertInstruction(Opcode opcode) \/\/ @link substring=\"Opcode\" target=\"#opcode\"\n+ * }\n+ * where the {@code Opcode} is of the convert kind.  The {@code fromType} and\n+ * {@code toType} are intrinsic to the {@code Opcode}.\n@@ -43,0 +66,1 @@\n+ * @see CodeBuilder#conversion CodeBuilder::conversion\n@@ -58,1 +82,6 @@\n-     * {@return A conversion instruction}\n+     * {@return a conversion instruction}  Valid conversions are:\n+     * <ul>\n+     * <li>Between {@code int}, {@code long}, {@code float}, and {@code double},\n+     * where {@code fromType != toType};\n+     * <li>From {@code int} to {@code byte}, {@code char}, and {@code short}.\n+     * <\/ul>\n@@ -62,0 +91,1 @@\n+     * @throws IllegalArgumentException if this is not a valid conversion\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ConvertInstruction.java","additions":34,"deletions":4,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -27,5 +27,1 @@\n-import java.lang.classfile.CodeElement;\n-import java.lang.classfile.CodeModel;\n-import java.lang.classfile.Instruction;\n-import java.lang.classfile.Label;\n-import java.lang.classfile.Opcode;\n+import java.lang.classfile.*;\n@@ -38,3 +34,3 @@\n- * Models instruction discontinued from the {@code code} array of a {@code Code}\n- * attribute. Delivered as a {@link CodeElement} when traversing the elements of\n- * a {@link CodeModel}.\n+ * Marker interface for instruction discontinued from the {@code code} array of\n+ * a {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n+ * the elements of a {@link CodeModel}.\n@@ -42,0 +38,8 @@\n+ * @apiNote\n+ * While most instructions have convenience factory methods in {@link\n+ * CodeBuilder}, discontinued instructions can only be supplied to code builders\n+ * explicitly with {@link CodeBuilder#with CodeBuilder::with} to discourage\n+ * their use.\n+ *\n+ * @jvms 4.9.1 Static Constraints\n+ * @sealedGraph\n@@ -47,5 +51,35 @@\n-     * Models JSR and JSR_W instructions discontinued from the {@code code}\n-     * array of a {@code Code} attribute since class file version 51.0.\n-     * Corresponding opcodes will have a {@code kind} of\n-     * {@link Opcode.Kind#DISCONTINUED_JSR}.  Delivered as a {@link CodeElement}\n-     * when traversing the elements of a {@link CodeModel}.\n+     * Models jump subroutine instructions discontinued from the {@code code}\n+     * array of a {@code Code} attribute since class file major version {@value\n+     * ClassFile#JAVA_7_VERSION} (JVMS {@jvms 4.9.1}).  Corresponding opcodes\n+     * have a {@linkplain Opcode#kind() kind} of {@link Opcode.Kind#DISCONTINUED_JSR}.\n+     * Delivered as a {@link CodeElement} when traversing the elements of a\n+     * {@link CodeModel}.\n+     * <p>\n+     * Conceptually, a jump subroutine instruction is a record:\n+     * {@snippet lang=text :\n+     * \/\/ @link substring=\"JsrInstruction\" target=\"#of(Label)\" :\n+     * JsrInstruction(Label) \/\/ @link substring=\"Label\" target=\"#target()\"\n+     * }\n+     * <p>\n+     * Physically, a jump subroutine instruction is a record:\n+     * {@snippet lang=text :\n+     * \/\/ @link region substring=\"JsrInstruction\" target=\"#of(Opcode, Label)\"\n+     * \/\/ @link substring=\"Opcode\" target=\"#opcode()\" :\n+     * JsrInstruction(Opcode, Label) \/\/ @link substring=\"Label\" target=\"#target()\"\n+     * \/\/ @end\n+     * }\n+     * where the {@code Opcode} must be {@link Opcode#JSR jsr} or {@link\n+     * Opcode#JSR_W jsr_w}.  However, {@code jsr} only uses a {@code s2} to\n+     * encode its target, which is insufficient to encode targets with bci\n+     * offsets less than {@code -32768} or greater than {@code 32767}.\n+     * <p>\n+     * In such cases, if the {@link ClassFile.ShortJumpsOption#FIX_SHORT_JUMPS\n+     * FIX_SHORT_JUMPS} option is set, a {@link CodeBuilder} will convert a\n+     * {@code jsr} instruction to a {@code jsr_w} instruction to achieve the\n+     * same effect.  Otherwise, {@link ClassFile.ShortJumpsOption#FAIL_ON_SHORT_JUMPS\n+     * FAIL_ON_SHORT_JUMPS} option can ensure the physical accuracy of the\n+     * generated {@code class} file and fail if an exact representation is not\n+     * possible.\n+     * <p>\n+     * {@link StoreInstruction astore} series of instructions can operate on the\n+     * {@code returnAddress} type from jump subroutine instructions.\n@@ -60,1 +94,1 @@\n-         * {@return the target of the JSR instruction}\n+         * {@return the target of the jump subroutine instruction}\n@@ -65,1 +99,1 @@\n-         * {@return a JSR instruction}\n+         * {@return a jump subroutine instruction}\n@@ -67,1 +101,5 @@\n-         * @param op the opcode for the specific type of JSR instruction,\n+         * @apiNote\n+         * The explicit {@code op} argument allows creating {@code jsr_w}\n+         * instructions to avoid {@code target} overflow.\n+         *\n+         * @param op the opcode for the specific type of jump subroutine instruction,\n@@ -79,1 +117,1 @@\n-         * {@return a JSR instruction}\n+         * {@return a jump subroutine instruction}\n@@ -89,3 +127,4 @@\n-     * Models RET and RET_W instructions discontinued from the {@code code}\n-     * array of a {@code Code} attribute since class file version 51.0.\n-     * Corresponding opcodes will have a {@code kind} of\n+     * Models return from subroutine instructions discontinued from the {@code\n+     * code} array of a {@code Code} attribute since class file major version\n+     * {@value ClassFile#JAVA_7_VERSION} (JVMS {@jvms 4.9.1}).\n+     * Corresponding opcodes have a {@linkplain Opcode#kind() kind} of\n@@ -94,0 +133,20 @@\n+     * <p>\n+     * Conceptually, a return from subroutine instruction is a record:\n+     * {@snippet lang=text :\n+     * \/\/ @link substring=\"RetInstruction\" target=\"#of(int)\" :\n+     * RetInstruction(int slot) \/\/ @link substring=\"int slot\" target=\"#slot()\"\n+     * }\n+     * where the {@code slot}, a local variable slot, has a {@code returnAddress}\n+     * computational type previously stored by an {@link StoreInstruction astore}\n+     * instruction.\n+     * <p>\n+     * Physically, a return from subroutine instruction is a record:\n+     * {@snippet lang=text :\n+     * \/\/ @link region substring=\"RetInstruction\" target=\"#of(Opcode, int)\"\n+     * \/\/ @link substring=\"Opcode\" target=\"#opcode()\" :\n+     * RetInstruction(Opcode, int slot) \/\/ @link substring=\"int slot\" target=\"#slot()\"\n+     * \/\/ @end\n+     * }\n+     * where the {@code Opcode} must be {@link Opcode#RET ret} or {@link\n+     * Opcode#RET_W wide ret}.  In addition, if {@code slot} is greater than 255,\n+     * {@code Opcode} must be {@code wide ret}.\n@@ -107,1 +166,6 @@\n-         * {@return a RET or RET_W instruction}\n+         * {@return a return from subroutine instruction}\n+         *\n+         * @apiNote\n+         * The explicit {@code op} argument allows creating {@code wide ret}\n+         * instructions with {@code slot} in the range of regular {@code ret}\n+         * instructions.\n@@ -109,1 +173,1 @@\n-         * @param op the opcode for the specific type of RET instruction,\n+         * @param op the opcode for the specific type of return from subroutine instruction,\n@@ -121,1 +185,1 @@\n-         * {@return a RET instruction}\n+         * {@return a return from subroutine instruction}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/DiscontinuedInstruction.java","additions":87,"deletions":23,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -37,6 +38,21 @@\n- * A pseudo-instruction modeling an entry in the exception table of a code\n- * attribute.  Entries in the exception table model catch and finally blocks.\n- * Delivered as a {@link CodeElement} when traversing the contents\n- * of a {@link CodeModel}.\n- *\n- * @see PseudoInstruction\n+ * A pseudo-instruction modeling an entry in the {@code exception_table} array\n+ * of a {@code Code} attribute.  Catch (JVMS {@jvms 3.12}) and finally (JVMS\n+ * {@jvms 3.14}) blocks in Java source code compile to exception table entries.\n+ * Delivered as a {@link CodeElement} when traversing the contents of a {@link\n+ * CodeModel}.\n+ * <p>\n+ * Conceptually, an exception table entry is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region=0 substring=\"ExceptionCatch\" target=\"#of(Label, Label, Label, Optional)\" :\n+ * \/\/ @link region=1 substring=\"Label handler\" target=\"#handler\" :\n+ * \/\/ @link region=2 substring=\"Label tryStart\" target=\"#tryStart\" :\n+ * \/\/ @link substring=\"Label tryEnd\" target=\"#tryEnd\" :\n+ * ExceptionCatch(Label handler, Label tryStart, Label tryEnd, Optional<ClassEntry> catchType) \/\/ @link substring=\"Optional<ClassEntry> catchType\" target=\"#catchType\"\n+ * \/\/ @end region=0\n+ * \/\/ @end region=1\n+ * \/\/ @end region=2\n+ * }\n+ * <p>\n+ * Physically, an exception table entry has the same structure.  The labels are\n+ * encoded as {@code u2} bci, and the {@code catchType} is a union of the\n+ * class entry index or zero for catching all types of throwable.\n@@ -44,0 +60,2 @@\n+ * @see CodeBuilder#exceptionCatch CodeBuilder::exceptionCatch\n+ * @jvms 4.7.3 The {@code Code} Attribute\n@@ -85,2 +103,2 @@\n-     * @param tryStart the beginning of the instruction range for the gaurded instructions\n-     * @param tryEnd the end of the instruction range for the gaurded instructions\n+     * @param tryStart the beginning of the instruction range for the guarded instructions\n+     * @param tryEnd the end of the instruction range for the guarded instructions\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ExceptionCatch.java","additions":26,"deletions":8,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -32,0 +33,1 @@\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n@@ -36,0 +38,1 @@\n+import java.lang.constant.ConstantDescs;\n@@ -43,2 +46,2 @@\n- * attribute.  Corresponding opcodes will have a {@code kind} of {@link\n- * Opcode.Kind#FIELD_ACCESS}.  Delivered as a {@link CodeElement} when\n+ * attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind}\n+ * of {@link Opcode.Kind#FIELD_ACCESS}.  Delivered as a {@link CodeElement} when\n@@ -46,0 +49,19 @@\n+ * <p>\n+ * Conceptually, a field access instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region substring=\"FieldInstruction\" target=\"#of(Opcode, FieldRefEntry)\"\n+ * \/\/ @link substring=\"Opcode\" target=\"#opcode()\" :\n+ * FieldInstruction(Opcode, FieldRefEntry) \/\/ @link substring=\"FieldRefEntry\" target=\"#field()\"\n+ * \/\/ @end\n+ * \/\/ @link region=1 substring=\"FieldRefEntry\" target=\"ConstantPoolBuilder#fieldRefEntry(ClassDesc, String, ClassDesc)\"\n+ * \/\/ @link region=2 substring=\"ClassDesc owner\" target=\"#owner()\"\n+ * \/\/ @link substring=\"String name\" target=\"#name()\" :\n+ * FieldRefEntry(ClassDesc owner, String name, ClassDesc type) \/\/ @link substring=\"ClassDesc type\" target=\"#typeSymbol()\"\n+ * \/\/ @end region=1\n+ * \/\/ @end region=2\n+ * }\n+ * where the {@code opcode} is of the field access kind, the {@code owner} is a\n+ * class or interface, the {@code name} is a simple name, and the {@code type}\n+ * is not {@link ConstantDescs#CD_void void}.\n+ * <p>\n+ * Physically, a field access instruction has the same structure.\n@@ -47,0 +69,1 @@\n+ * @see CodeBuilder#fieldAccess CodeBuilder::fieldAccess\n@@ -58,0 +81,4 @@\n+     *\n+     * @apiNote\n+     * A symbolic descriptor for the owner is available through {@link\n+     * ClassEntry#asSymbol() owner().asSymbol()}.\n@@ -65,0 +92,4 @@\n+     *\n+     * @apiNote\n+     * A string value for the name is available through {@link\n+     * Utf8Entry#stringValue() name().stringValue()}.\n@@ -71,1 +102,5 @@\n-     * {@return the field descriptor of the field}\n+     * {@return the field descriptor string of the field}\n+     *\n+     * @apiNote\n+     * A symbolic descriptor for the type of the field is available through\n+     * {@link #typeSymbol() typeSymbol()}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/FieldInstruction.java","additions":38,"deletions":3,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -36,2 +37,2 @@\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n- * {@link Opcode.Kind#INCREMENT}.  Delivered as a {@link CodeElement} when\n+ * {@code Code} attribute.  Corresponding opcodes have a {@linkplain Opcode#kind()\n+ * kind} of {@link Opcode.Kind#INCREMENT}.  Delivered as a {@link CodeElement} when\n@@ -39,0 +40,23 @@\n+ * <p>\n+ * Conceptually, a local variable increment instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region substring=\"IncrementInstruction\" target=\"#of\"\n+ * \/\/ @link substring=\"int slot\" target=\"#slot()\" :\n+ * IncrementInstruction(int slot, int constant) \/\/ @link substring=\"int constant\" target=\"#constant()\"\n+ * \/\/ @end\n+ * }\n+ * where the {@code slot} is a valid local variable index, and the {@code constant}\n+ * must be in the range {@code [-32768, 32767]}.\n+ * <p>\n+ * Physically, a local variable increment instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region=1 substring=\"Opcode\" target=\"#opcode()\"\n+ * \/\/ @link substring=\"int slot\" target=\"#slot()\" :\n+ * IncrementInstruction(Opcode, int slot, int constant) \/\/ @link substring=\"int constant\" target=\"#constant()\"\n+ * \/\/ @end region=1\n+ * }\n+ * where the {@code Opcode} must be {@link Opcode#IINC iinc} or {@link\n+ * Opcode#IINC_W wide iinc}; it must not be {@code iinc} if {@code slot}\n+ * is greater than {@code 255} or {@code constant} is less than {@code -255} or\n+ * greater than {@code 127}.  Same restrictions for {@code slot} and {@code\n+ * constant} apply.\n@@ -40,0 +64,2 @@\n+ * @see CodeBuilder#iinc CodeBuilder::iinc\n+ * @jvms 6.5.iinc <em>iinc<\/em>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/IncrementInstruction.java","additions":28,"deletions":2,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -30,0 +31,2 @@\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.constantpool.ClassEntry;\n@@ -43,3 +46,16 @@\n- * Models an {@code invokedynamic} instruction in the {@code code} array of a\n- * {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n- * the elements of a {@link CodeModel}.\n+ * Models an {@link Opcode#INVOKEDYNAMIC invokedynamic} instruction in the {@code\n+ * code} array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n+ * when traversing the elements of a {@link CodeModel}.\n+ * <p>\n+ * Conceptually, an {@code invokedynamic} instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"InvokeDynamicInstruction\" target=\"CodeBuilder#invokedynamic(DynamicCallSiteDesc)\" :\n+ * InvokeDynamicInstruction(DynamicCallSiteDesc) \/\/ @link substring=\"DynamicCallSiteDesc\" target=\"#invokedynamic()\"\n+ * }\n+ * <p>\n+ * Physically, an {@code invokedynamic} instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"InvokeDynamicInstruction\" target=\"#of\" :\n+ * InvokeDynamicInstruction(Opcode, InvokeDynamicEntry) \/\/ @link substring=\"InvokeDynamicEntry\" target=\"#invokedynamic()\"\n+ * }\n+ * where the {@code Opcode} is always {@code invokedynamic}.\n@@ -47,0 +63,2 @@\n+ * @see CodeBuilder#invokedynamic CodeBuilder::invokedynamic\n+ * @jvms 6.5.invokedynamic <em>invokedynamic<\/em>\n@@ -53,0 +71,4 @@\n+     *\n+     * @apiNote\n+     * A symbolic descriptor for the dynamically-computed call site is available\n+     * through {@link InvokeDynamicEntry#asSymbol() invokedynamic().asSymbol()}.\n@@ -58,0 +80,4 @@\n+     *\n+     * @apiNote\n+     * A string value for the invocation name is available through {@link\n+     * Utf8Entry#stringValue() name().stringValue()}.\n@@ -65,0 +91,4 @@\n+     *\n+     * @apiNote\n+     * A symbolic descriptor for the invocation typeis available through {@link\n+     * #typeSymbol() typeSymbol()}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/InvokeDynamicInstruction.java","additions":33,"deletions":3,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -31,0 +32,1 @@\n+import java.lang.classfile.TypeKind;\n@@ -32,0 +34,1 @@\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n@@ -37,0 +40,1 @@\n+import java.lang.constant.ConstantDescs;\n@@ -45,3 +49,42 @@\n- * Code} attribute, other than {@code invokedynamic}.  Corresponding opcodes\n- * will have a {@code kind} of {@link Opcode.Kind#INVOKE}.  Delivered as a\n- * {@link CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * Code} attribute, other than {@link InvokeDynamicInstruction invokedynamic}.\n+ * Corresponding opcodes have a {@linkplain Opcode#kind() kind} of {@link Opcode.Kind#INVOKE}.\n+ * Delivered as a {@link CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * <p>\n+ * Conceptually, a method invocation instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region substring=\"InvokeInstruction\" target=\"#of(Opcode, MemberRefEntry)\"\n+ * \/\/ @link substring=\"Opcode\" target=\"#opcode()\" :\n+ * InvokeInstruction(Opcode, MethodRefEntry | InterfaceMethodRefEntry method) \/\/ @link substring=\"MethodRefEntry | InterfaceMethodRefEntry method\" target=\"#method()\"\n+ * \/\/ @end\n+ * \/\/ @link region=1a substring=\"MethodRefEntry\" target=\"ConstantPoolBuilder#methodRefEntry(ClassDesc, String, MethodTypeDesc)\"\n+ * \/\/ @link region=2a substring=\"ClassDesc owner\" target=\"#owner()\"\n+ * \/\/ @link substring=\"String name\" target=\"#name()\" :\n+ * MethodRefEntry(ClassDesc owner, String name, MethodTypeDesc type) \/\/ @link substring=\"MethodTypeDesc type\" target=\"#typeSymbol()\"\n+ * \/\/ @end region=1a\n+ * \/\/ @end region=2a\n+ * \/\/ @link region=1b substring=\"InterfaceMethodRefEntry\" target=\"ConstantPoolBuilder#interfaceMethodRefEntry(ClassDesc, String, MethodTypeDesc)\"\n+ * \/\/ @link region=2b substring=\"ClassDesc owner\" target=\"#owner()\"\n+ * \/\/ @link substring=\"String name\" target=\"#name()\" :\n+ * InterfaceMethodRefEntry(ClassDesc owner, String name, MethodTypeDesc type) \/\/ @link substring=\"MethodTypeDesc type\" target=\"#typeSymbol()\"\n+ * \/\/ @end region=1b\n+ * \/\/ @end region=2b\n+ * }\n+ * where the {@code opcode} is of the method invocation kind, the {@code owner}\n+ * is a class or interface, the {@code name} is a simple name or {@value\n+ * ConstantDescs#INIT_NAME}.\n+ * <p>\n+ * The {@code method} must be an {@code InterfaceMethodRefEntry} for {@link\n+ * Opcode#INVOKEINTERFACE invokeinterface} opcode, and must be a {@code\n+ * MethodRefEntry} for {@link Opcode#INVOKEVIRTUAL invokevirtual} opcode.\n+ * {@link Opcode#INVOKESTATIC invokestatic} and {@link Opcode#INVOKESPECIAL\n+ * invokespecial} can have either type of entry for {@code method}.\n+ * <p>\n+ * Physically, a method invocation instruction has the same structure for\n+ * {@code invokestatic}, {@code invokevirtual}, and {@code invokespecial}.\n+ * {@code invokeinterface} has another structure:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"InterfaceMethodRefEntry method\" target=\"#method()\" :\n+ * InvokeInstruction(Opcode.INVOKEINTERFACE, InterfaceMethodRefEntry, int count) \/\/ @link substring=\"int count\" target=\"#count\"\n+ * }\n+ * The {@code count}, an unsigned byte, must be set according to the {@link\n+ * #typeSymbol() type}.  There is another trailing 1-byte padding of value 0.\n@@ -49,0 +92,1 @@\n+ * @see CodeBuilder#invoke CodeBuilder::invoke\n@@ -60,1 +104,1 @@\n-     * {@return whether the class holding the method is an interface}\n+     * {@return whether the class or interface holding the method is an interface}\n@@ -65,1 +109,1 @@\n-     * {@return the {@code count} value of an {@code invokeinterface} instruction, as defined in JVMS {@jvms 6.5}\n+     * {@return the {@code count} value of an {@link Opcode#INVOKEINTERFACE invokeinterface} instruction,\n@@ -67,0 +111,7 @@\n+     * <p>\n+     * For an {@code invokeinterface} instruction, this value must be equivalent\n+     * to the sum of {@linkplain TypeKind#slotSize() slot sizes} of all arguments\n+     * plus one, which is equal to the number of operand stack depth consumed by\n+     * this interface method invocation instruction.\n+     *\n+     * @jvms 6.5.invokeinterface <em>invokeinterface<\/em>\n@@ -71,1 +122,5 @@\n-     * {@return the class holding the method}\n+     * {@return the class or interface holding the method}\n+     *\n+     * @apiNote\n+     * A symbolic descriptor for the owner is available through {@link\n+     * ClassEntry#asSymbol() owner().asSymbol()}.\n@@ -79,0 +134,4 @@\n+     *\n+     * @apiNote\n+     * A string value for the name is available through {@link\n+     * Utf8Entry#stringValue() name().stringValue()}.\n@@ -85,1 +144,5 @@\n-     * {@return the method descriptor of the method}\n+     * {@return the method descriptor string of the method}\n+     *\n+     * @apiNote\n+     * A symbolic descriptor for the type of the method is available through\n+     * {@link #typeSymbol() typeSymbol()}.\n@@ -98,1 +161,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/InvokeInstruction.java","additions":70,"deletions":8,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -29,0 +30,1 @@\n+import java.lang.classfile.CodeTransform;\n@@ -31,0 +33,1 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -38,0 +41,19 @@\n+ * <p>\n+ * This can be used to inspect the target position of labels across {@linkplain\n+ * CodeTransform transformations}, as {@linkplain CodeAttribute#labelToBci bci}\n+ * is not stable.\n+ * <p>\n+ * When passed to a {@link CodeBuilder}, this pseudo-instruction sets the\n+ * specified label to be bound at the current position in the builder.\n+ * <p>\n+ * By design, {@code LabelTarget} cannot be created by users and can only be\n+ * read from a code model.  Use {@link CodeBuilder#labelBinding\n+ * CodeBuilder::labelBinding} to bind arbitrary labels to a {@code CodeBuilder}.\n+ * <p>\n+ * For a {@code CodeBuilder cob}, a {@code LabelTarget lt}, these two calls are\n+ * equivalent:\n+ * {@snippet lang=java :\n+ * cob.with(lt); \/\/ @link substring=\"with\" target=\"CodeBuilder#with\"\n+ * \/\/ @link substring=\"labelBinding\" target=\"CodeBuilder#labelBinding\" :\n+ * cob.labelBinding(lt.label()); \/\/ @link substring=\"label\" target=\"#label\"\n+ * }\n@@ -39,2 +61,2 @@\n- * @see PseudoInstruction\n- *\n+ * @see Label\n+ * @see CodeBuilder#labelBinding CodeBuilder::labelBinding\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LabelTarget.java","additions":24,"deletions":2,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -31,0 +32,1 @@\n+import java.lang.classfile.attribute.LineNumberInfo;\n@@ -40,0 +42,9 @@\n+ * <p>\n+ * Conceptually, a line number entry is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"LineNumber\" target=\"#of\" :\n+ * LineNumber(int line) \/\/ @link substring=\"int line\" target=\"#line\"\n+ * }\n+ * <p>\n+ * Physically, a line number entry is a different record of {@code (Label, int line)};\n+ * it is modeled by a {@link LineNumberInfo}.\n@@ -41,1 +52,3 @@\n- * @see PseudoInstruction\n+ * @apiNote\n+ * Line numbers are represented with custom pseudo-instructions to avoid using\n+ * labels, which usually indicate branching targets for the control flow.\n@@ -43,0 +56,2 @@\n+ * @see LineNumberInfo\n+ * @see CodeBuilder#lineNumber CodeBuilder::lineNumber\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LineNumber.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -39,3 +40,30 @@\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n- * {@link Opcode.Kind#LOAD}.  Delivered as a {@link CodeElement} when\n- * traversing the elements of a {@link CodeModel}.\n+ * {@code Code} attribute.  Corresponding opcodes have a {@linkplain\n+ * Opcode#kind() kind} of {@link Opcode.Kind#LOAD}.  Delivered as a {@link\n+ * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * <p>\n+ * Conceptually, a local variable load instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region substring=\"LoadInstruction\" target=\"#of(TypeKind, int)\"\n+ * \/\/ @link substring=\"TypeKind\" target=\"#typeKind\" :\n+ * LoadInstruction(TypeKind, int slot) \/\/ @link substring=\"int slot\" target=\"#slot\"\n+ * \/\/ @end\n+ * }\n+ * where the {@code TypeKind} is {@linkplain TypeKind##computational-type\n+ * computational}.  Multiple instructions, such as {@code aload_0}, {@code\n+ * aload 0}, and {@code wide aload 0}, may match such a record, but they\n+ * are functionally equivalent.\n+ * <p>\n+ * Physically, load variable instructions are polymorphic, discriminated by\n+ * their opcode:\n+ * {@snippet lang=text :\n+ * LoadInstruction(Opcode) \/\/ @link substring=\"Opcode\" target=\"#opcode\"\n+ * \/\/ @link region substring=\"LoadInstruction\" target=\"#of(Opcode, int)\"\n+ * \/\/ @link substring=\"Opcode\" target=\"#opcode\" :\n+ * LoadInstruction(Opcode, int slot) \/\/ @link substring=\"int slot\" target=\"#slot\"\n+ * \/\/ @end\n+ * }\n+ * the first form requires the {@code slot} to be intrinsic to the {@code Opcode};\n+ * such opcodes have an {@linkplain Opcode#sizeIfFixed() instruction size} of {@code 1}.\n+ * Otherwise, the {@code slot} must be compatible with the {@code Opcode}, such\n+ * that if the opcode is not {@linkplain Opcode#isWide() wide}, the {@code slot}\n+ * must be no greater than {@code 255}.\n@@ -43,0 +71,1 @@\n+ * @see CodeBuilder#loadLocal CodeBuilder::loadLocal\n@@ -55,1 +84,2 @@\n-     * {@return the type of the value to be loaded}\n+     * {@return the {@linkplain TypeKind##computational-type computational type}\n+     * of the value to be loaded}\n@@ -75,0 +105,5 @@\n+     * @apiNote\n+     * The explicit {@code op} argument allows creating {@code wide} or\n+     * regular load instructions when the {@code slot} can be encoded\n+     * with more optimized load instructions.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LoadInstruction.java","additions":39,"deletions":4,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -32,0 +33,1 @@\n+import java.lang.classfile.attribute.LocalVariableInfo;\n@@ -46,0 +48,32 @@\n+ * <p>\n+ * Conceptually, a local variable table entry is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region=0 substring=\"LocalVariable\" target=\"#of(int, String, ClassDesc, Label, Label)\"\n+ * \/\/ @link region=1 substring=\"int slot\" target=\"#slot\"\n+ * \/\/ @link region=2 substring=\"String name\" target=\"#name\"\n+ * \/\/ @link region=3 substring=\"ClassDesc type\" target=\"#typeSymbol\"\n+ * \/\/ @link substring=\"Label startScope\" target=\"#startScope\" :\n+ * LocalVariable(int slot, String name, ClassDesc type, Label startScope, Label endScope) \/\/ @link substring=\"Label endScope\" target=\"#endScope\"\n+ * \/\/ @end region=0\n+ * \/\/ @end region=1\n+ * \/\/ @end region=2\n+ * \/\/ @end region=3\n+ * }\n+ * Where {@code type} must be non-{@code void}.\n+ * <p>\n+ * Physically, a local variable table entry modeled by a {@link LocalVariableInfo}.\n+ * It is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region=0 substring=\"LocalVariable\" target=\"#of(int, Utf8Entry, Utf8Entry, Label, Label)\"\n+ * \/\/ @link region=1 substring=\"int slot\" target=\"#slot\"\n+ * \/\/ @link region=2 substring=\"Utf8Entry name\" target=\"#name\"\n+ * \/\/ @link region=3 substring=\"Utf8Entry type\" target=\"#type\"\n+ * \/\/ @link substring=\"Label startScope\" target=\"#startScope\" :\n+ * LocalVariable(Label startScope, Label endScope, Utf8Entry name, Utf8Entry type, int slot) \/\/ @link substring=\"Label endScope\" target=\"#endScope\"\n+ * \/\/ @end region=0\n+ * \/\/ @end region=1\n+ * \/\/ @end region=2\n+ * \/\/ @end region=3\n+ * }\n+ * Where the {@code endScope} is encoded as a nonnegative bci offset to\n+ * {@code startScope}, a bci value.\n@@ -47,1 +81,5 @@\n- * @see PseudoInstruction\n+ * @apiNote\n+ * Local variable table entries are used for all local variables in Java source\n+ * code.  If a local variable has a parameterized type, a type argument, or an\n+ * array type of one of the previous types, a local variable type table entry is\n+ * created for that local variable as well.\n@@ -49,0 +87,3 @@\n+ * @see LocalVariableTableAttribute\n+ * @see LocalVariableInfo\n+ * @see CodeBuilder#localVariable CodeBuilder::localVariable\n@@ -60,0 +101,4 @@\n+     *\n+     * @apiNote\n+     * A string value for the name is available through {@link\n+     * Utf8Entry#stringValue() name().stringValue()}.\n@@ -64,1 +109,5 @@\n-     * {@return the local variable field descriptor}\n+     * {@return the local variable field descriptor string}\n+     *\n+     * @apiNote\n+     * A symbolic descriptor for the type of the local variable is available\n+     * through {@link #typeSymbol() typeSymbol()}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LocalVariable.java","additions":51,"deletions":2,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -27,6 +27,2 @@\n-import java.lang.classfile.ClassFile;\n-import java.lang.classfile.CodeElement;\n-import java.lang.classfile.CodeModel;\n-import java.lang.classfile.Label;\n-import java.lang.classfile.PseudoInstruction;\n-import java.lang.classfile.Signature;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.LocalVariableTypeInfo;\n@@ -45,0 +41,32 @@\n+ * <p>\n+ * Conceptually, a local variable type table entry is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region=0 substring=\"LocalVariableType\" target=\"#of(int, String, Signature, Label, Label)\"\n+ * \/\/ @link region=1 substring=\"int slot\" target=\"#slot\"\n+ * \/\/ @link region=2 substring=\"String name\" target=\"#name\"\n+ * \/\/ @link region=3 substring=\"Signature signature\" target=\"#signatureSymbol\"\n+ * \/\/ @link substring=\"Label startScope\" target=\"#startScope\" :\n+ * LocalVariableType(int slot, String name, Signature signature, Label startScope, Label endScope) \/\/ @link substring=\"Label endScope\" target=\"#endScope\"\n+ * \/\/ @end region=0\n+ * \/\/ @end region=1\n+ * \/\/ @end region=2\n+ * \/\/ @end region=3\n+ * }\n+ * Where {@code signature} must be non-{@code void}.\n+ * <p>\n+ * Physically, a local variable type table entry modeled by a {@link LocalVariableTypeInfo}.\n+ * It is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region=0 substring=\"LocalVariableType\" target=\"#of(int, Utf8Entry, Utf8Entry, Label, Label)\"\n+ * \/\/ @link region=1 substring=\"int slot\" target=\"#slot\"\n+ * \/\/ @link region=2 substring=\"Utf8Entry name\" target=\"#name\"\n+ * \/\/ @link region=3 substring=\"Utf8Entry signature\" target=\"#signature\"\n+ * \/\/ @link substring=\"Label startScope\" target=\"#startScope\" :\n+ * LocalVariableType(Label startScope, Label endScope, Utf8Entry name, Utf8Entry signature, int slot) \/\/ @link substring=\"Label endScope\" target=\"#endScope\"\n+ * \/\/ @end region=0\n+ * \/\/ @end region=1\n+ * \/\/ @end region=2\n+ * \/\/ @end region=3\n+ * }\n+ * Where the {@code endScope} is encoded as a nonnegative bci offset to\n+ * {@code startScope}, a bci value.\n@@ -46,0 +74,9 @@\n+ * @apiNote\n+ * Local variable type table entry is used if a local variable has a parameterized\n+ * type, a type argument, or an array type of one of the previous types as its type.\n+ * A local variable table entry with the erased type should still be created for\n+ * that local variable.\n+ *\n+ * @see LocalVariableTypeTableAttribute\n+ * @see LocalVariableTypeInfo\n+ * @see CodeBuilder#localVariableType CodeBuilder::localVariableType\n@@ -57,0 +94,4 @@\n+     *\n+     * @apiNote\n+     * A string value for the name is available through {@link\n+     * Utf8Entry#stringValue() name().stringValue()}.\n@@ -61,1 +102,5 @@\n-     * {@return the local variable signature}\n+     * {@return the local variable generic signature string}\n+     *\n+     * @apiNote\n+     * A symbolic generic signature of the local variable is available\n+     * through {@link #signatureSymbol() signatureSymbol()}.\n@@ -66,1 +111,1 @@\n-     * {@return the local variable signature}\n+     * {@return the local variable generic signature}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LocalVariableType.java","additions":53,"deletions":8,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -31,0 +32,1 @@\n+import java.lang.classfile.Opcode;\n@@ -36,3 +38,25 @@\n- * Models a {@code lookupswitch} instruction in the {@code code} array of a\n- * {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n- * the elements of a {@link CodeModel}.\n+ * Models a {@link Opcode#LOOKUPSWITCH lookupswitch} instruction in the {@code\n+ * code} array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n+ * when traversing the elements of a {@link CodeModel}.\n+ * <p>\n+ * Conceptually, a {@code lookupswitch} instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region substring=\"LookupSwitchInstruction\" target=\"#of\"\n+ * \/\/ @link substring=\"Label defaultTarget\" target=\"#defaultTarget\" :\n+ * LookupSwitchInstruction(Label defaultTarget, List<SwitchCase> cases) \/\/ @link substring=\"List<SwitchCase> cases\" target=\"#cases()\"\n+ * \/\/ @end\n+ * }\n+ * If elements in {@code cases} are not sorted ascending by their {@linkplain\n+ * SwitchCase#caseValue value}, a sorted version of the {@code cases} list\n+ * will be written instead.\n+ * <p>\n+ * Physically, a {@code lookupswitch} instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region substring=\"LookupSwitchInstruction\" target=\"#of\"\n+ * \/\/ @link substring=\"Label defaultTarget\" target=\"#defaultTarget\" :\n+ * LookupSwitchInstruction(Opcode.LOOKUPSWITCH, padding, Label defaultTarget, List<SwitchCase> cases) \/\/ @link substring=\"List<SwitchCase> cases\" target=\"#cases()\"\n+ * \/\/ @end\n+ * }\n+ * The {@code padding} is 0 to 3 bytes of any value, making the default target\n+ * 4-byte aligned to the beginning of the {@code code} array.  It also requires\n+ * the elements in {@code cases} to be sorted ascending by their value.\n@@ -40,0 +64,2 @@\n+ * @see CodeBuilder#lookupswitch CodeBuilder::lookupswitch\n+ * @jvms 6.5.lookupswitch <em>lookupswitch<\/em>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LookupSwitchInstruction.java","additions":29,"deletions":3,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -36,3 +37,11 @@\n- * Models a {@code monitorenter} or {@code monitorexit} instruction in the\n- * {@code code} array of a {@code Code} attribute.  Delivered as a {@link\n- * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * Models a {@link Opcode#MONITORENTER monitorenter} or {@link Opcode#MONITOREXIT\n+ * monitorexit} instruction in the {@code code} array of a {@code Code} attribute.\n+ * Corresponding opcodes have a {@linkplain Opcode#kind() kind} of {@link\n+ * Opcode.Kind#MONITOR}.  Delivered as a {@link CodeElement} when traversing the\n+ * elements of a {@link CodeModel}.\n+ * <p>\n+ * Conceptually and physically, a monitor instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"MonitorInstruction\" target=\"#of(Opcode)\" :\n+ * MonitorInstruction(Opcode) \/\/ @link substring=\"Opcode\" target=\"#opcode\"\n+ * }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/MonitorInstruction.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -30,0 +31,1 @@\n+import java.lang.classfile.Opcode;\n@@ -31,0 +33,1 @@\n+import java.lang.constant.ClassDesc;\n@@ -36,1 +39,1 @@\n- * Models a {@code multianewarray} invocation instruction in the {@code code}\n+ * Models a {@link Opcode#MULTIANEWARRAY multianewarray} instruction in the {@code code}\n@@ -39,0 +42,17 @@\n+ * <p>\n+ * Conceptually, a {@code multianewarray} instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region substring=\"NewMultiArrayInstruction\" target=\"CodeBuilder#multianewarray(ClassDesc, int)\"\n+ * \/\/ @link substring=\"ClassDesc arrayType\" target=\"#arrayType\" :\n+ * NewMultiArrayInstruction(ClassDesc arrayType, int dimensions) \/\/ @link substring=\"int dimensions\" target=\"#dimensions\"\n+ * \/\/ @end\n+ * }\n+ * where the {@code arrayType} is an array class.\n+ * <p>\n+ * Physically, a {@code multianewarray} instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region substring=\"NewMultiArrayInstruction\" target=\"#of\"\n+ * \/\/ @link substring=\"ClassEntry arrayType\" target=\"#arrayType\" :\n+ * NewMultiArrayInstruction(Opcode.MULTIANEWARRAY, ClassEntry arrayType, int dimensions) \/\/ @link substring=\"int dimensions\" target=\"#dimensions\"\n+ * \/\/ @end\n+ * }\n@@ -40,0 +60,2 @@\n+ * @see CodeBuilder#multianewarray CodeBuilder::multianewarray\n+ * @jvms 6.5.multianewarray <em>multianewarray<\/em>\n@@ -47,1 +69,5 @@\n-     * {@return the type of the array, as a symbolic descriptor}\n+     * {@return the type of the array}\n+     *\n+     * @apiNote\n+     * A symbolic descriptor for the type of the array is available through\n+     * {@link ClassEntry#asSymbol() arrayType().asSymbol()}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NewMultiArrayInstruction.java","additions":28,"deletions":2,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -30,0 +31,1 @@\n+import java.lang.classfile.Opcode;\n@@ -35,1 +37,1 @@\n- * Models a {@code new} instruction in the {@code code} array of a {@code Code}\n+ * Models a {@link Opcode#NEW new} instruction in the {@code code} array of a {@code Code}\n@@ -38,0 +40,13 @@\n+ * <p>\n+ * Conceptually, a {@code new} instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"NewObjectInstruction\" target=\"CodeBuilder#new_(ClassDesc)\" :\n+ * NewObjectInstruction(ClassDesc) \/\/ @link substring=\"ClassDesc\" target=\"#className\"\n+ * }\n+ * where the {@code ClassDesc} is a non-abstract class.\n+ * <p>\n+ * Physically, a {@code new} instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"NewObjectInstruction\" target=\"#of(ClassEntry)\" :\n+ * NewObjectInstruction(Opcode.NEW, ClassEntry) \/\/ @link substring=\"ClassEntry\" target=\"#className\"\n+ * }\n@@ -39,0 +54,2 @@\n+ * @see CodeBuilder#new_ CodeBuilder::new_\n+ * @jvms 6.5.new <em>new<\/em>\n@@ -46,0 +63,4 @@\n+     *\n+     * @apiNote\n+     * A symbolic descriptor for the type of the object is available through\n+     * {@link ClassEntry#asSymbol() className().asSymbol()}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NewObjectInstruction.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -30,0 +31,1 @@\n+import java.lang.classfile.Opcode;\n@@ -31,0 +33,1 @@\n+import java.lang.classfile.constantpool.ClassEntry;\n@@ -35,1 +38,1 @@\n- * Models a {@code newarray} invocation instruction in the {@code code}\n+ * Models a {@link Opcode#NEWARRAY newarray} instruction in the {@code code}\n@@ -38,0 +41,14 @@\n+ * <p>\n+ * Conceptually, a {@code newarray} instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"NewPrimitiveArrayInstruction\" target=\"#of\" :\n+ * NewPrimitiveArrayInstruction(TypeKind) \/\/ @link substring=\"TypeKind\" target=\"#typeKind\"\n+ * }\n+ * where the {@code TypeKind} is primitive and not {@code void}.\n+ * <p>\n+ * Physically, a {@code newarray} instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"NewPrimitiveArrayInstruction\" target=\"#of\" :\n+ * NewPrimitiveArrayInstruction(Opcode.NEWARRAY, int code) \/\/ @link substring=\"int code\" target=\"TypeKind#newarrayCode()\"\n+ * }\n+ * where the code is a valid new array code.\n@@ -39,0 +56,2 @@\n+ * @see CodeBuilder#newarray CodeBuilder::newarray\n+ * @jvms 6.5.newarray <em>newarray<\/em>\n@@ -46,0 +65,4 @@\n+     *\n+     * @apiNote\n+     * The backing array code for this instruction is available through\n+     * {@link TypeKind#newarrayCode() typeKind().newarrayCode()}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NewPrimitiveArrayInstruction.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -30,0 +31,1 @@\n+import java.lang.classfile.Opcode;\n@@ -35,1 +37,1 @@\n- * Models a {@code anewarray} invocation instruction in the {@code code}\n+ * Models a {@link Opcode#ANEWARRAY anewarray} instruction in the {@code code}\n@@ -38,0 +40,13 @@\n+ * <p>\n+ * Conceptually, an {@code anewarray} instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"NewReferenceArrayInstruction\" target=\"CodeBuilder#anewarray(ClassDesc)\" :\n+ * NewReferenceArrayInstruction(ClassDesc) \/\/ @link substring=\"ClassDesc\" target=\"#componentType\"\n+ * }\n+ * where the {@code ClassDesc} is not primitive.\n+ * <p>\n+ * Physically, an {@code anewarray} instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"NewReferenceArrayInstruction\" target=\"#of\" :\n+ * NewReferenceArrayInstruction(Opcode.ANEWARRAY, ClassEntry) \/\/ @link substring=\"ClassEntry\" target=\"#componentType\"\n+ * }\n@@ -39,0 +54,2 @@\n+ * @see CodeBuilder#newarray CodeBuilder::anewarray\n+ * @jvms 6.5.anewarray <em>anewarray<\/em>\n@@ -45,0 +62,4 @@\n+     *\n+     * @apiNote\n+     * A symbolic descriptor for the component type of the array is available\n+     * through {@link ClassEntry#asSymbol() componentType().asSymbol()}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NewReferenceArrayInstruction.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -30,0 +31,1 @@\n+import java.lang.classfile.Opcode;\n@@ -34,1 +36,1 @@\n- * Models a {@code nop} invocation instruction in the {@code code}\n+ * Models a {@link Opcode#NOP nop} instruction in the {@code code}\n@@ -37,0 +39,6 @@\n+ * <p>\n+ * Conceptually and physically, a no-op instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"NopInstruction\" target=\"#of\" :\n+ * NopInstruction(Opcode.NOP)\n+ * }\n@@ -38,0 +46,2 @@\n+ * @see CodeBuilder#nop CodeBuilder::nop\n+ * @jvms 6.5.nop <em>nop<\/em>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NopInstruction.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@code Code} attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind} of\n@@ -41,0 +41,7 @@\n+ * <p>\n+ * Conceptually and physically, an operator instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"OperatorInstruction\" target=\"#of\" :\n+ * OperatorInstruction(Opcode) \/\/ @link substring=\"Opcode\" target=\"#opcode()\"\n+ * }\n+ * The {@link #typeKind() typeKind()} attribute is intrinsic to the opcode.\n@@ -54,1 +61,1 @@\n-     * @param op the opcode for the specific type of array load instruction,\n+     * @param op the opcode for the specific type of operator instruction,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/OperatorInstruction.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -39,1 +40,1 @@\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@code Code} attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind} of\n@@ -42,0 +43,16 @@\n+ * <p>\n+ * Conceptually, a return-from-method instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ReturnInstruction\" target=\"#of(TypeKind)\" :\n+ * ReturnInstruction(TypeKind) \/\/ @link substring=\"TypeKind\" target=\"#typeKind()\"\n+ * }\n+ * where the {@code TypeKind} is {@linkplain TypeKind##computational-type\n+ * computational} or {@link TypeKind#VOID void}.\n+ * <p>\n+ * Physically, an return-from-method instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ReturnInstruction\" target=\"#of(Opcode)\" :\n+ * ReturnInstruction(Opcode) \/\/ @link substring=\"Opcode\" target=\"#opcode()\"\n+ * }\n+ * where the {@code Opcode} is of the return kind.  The computational type\n+ * type of the instruction is intrinsic to the opcode.\n@@ -43,0 +60,1 @@\n+ * @see CodeBuilder#return_(TypeKind) CodeBuilder::return_\n@@ -49,1 +67,2 @@\n-     * {@return the type of the return instruction}\n+     * {@return the {@linkplain TypeKind##computational-type computational type}, including\n+     * {@link TypeKind#VOID void}, of the return instruction}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ReturnInstruction.java","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@code Code} attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind} of\n@@ -40,0 +40,8 @@\n+ * <p>\n+ * Conceptually and physically, a stack manipulation instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"StackInstruction\" target=\"#of\" :\n+ * StackInstruction(Opcode) \/\/ @link substring=\"Opcode\" target=\"#opcode()\"\n+ * }\n+ * All attributes of stack manipulation instructions are intrinsic to the\n+ * opcode.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/StackInstruction.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -39,1 +40,1 @@\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@code Code} attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind} of\n@@ -42,0 +43,31 @@\n+ * <p>\n+ * Conceptually, a local variable store instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region substring=\"StoreInstruction\" target=\"#of(TypeKind, int)\"\n+ * \/\/ @link substring=\"TypeKind\" target=\"#typeKind\" :\n+ * StoreInstruction(TypeKind, int slot) \/\/ @link substring=\"int slot\" target=\"#slot\"\n+ * \/\/ @end\n+ * }\n+ * where the {@code TypeKind} is {@linkplain TypeKind##computational-type\n+ * computational}.  Multiple instructions, such as {@code astore_0}, {@code\n+ * astore 0}, and {@code wide astore 0}, may match such a record, but they\n+ * are functionally equivalent.\n+ * <p>\n+ * Physically, store variable instructions are polymorphic, discriminated by\n+ * their opcode:\n+ * {@snippet lang=text :\n+ * StoreInstruction(Opcode) \/\/ @link substring=\"Opcode\" target=\"#opcode\"\n+ * \/\/ @link region substring=\"StoreInstruction\" target=\"#of(Opcode, int)\"\n+ * \/\/ @link substring=\"Opcode\" target=\"#opcode\" :\n+ * StoreInstruction(Opcode, int slot) \/\/ @link substring=\"int slot\" target=\"#slot\"\n+ * \/\/ @end\n+ * }\n+ * the first form requires the {@code slot} to be intrinsic to the {@code Opcode};\n+ * such opcodes have an {@linkplain Opcode#sizeIfFixed() instruction size} of {@code 1}.\n+ * Otherwise, the {@code slot} must be compatible with the {@code Opcode}, such\n+ * that if the opcode is not {@linkplain Opcode#isWide() wide}, the {@code slot}\n+ * must be no greater than {@code 255}.\n+ * <p>\n+ * {@code astore} series of instructions can operate on the {@code returnAddress}\n+ * type from {@linkplain DiscontinuedInstruction.JsrInstruction jump subroutine\n+ * instructions}.\n@@ -43,0 +75,1 @@\n+ * @see CodeBuilder#storeLocal CodeBuilder::storeLocal\n@@ -54,1 +87,4 @@\n-     * {@return the type of the value to be stored}\n+     * {@return the {@linkplain TypeKind##computational-type computational type}\n+     * of the value to be stored}  The {@link TypeKind#REFERENCE reference}\n+     * type store instructions also operate on the {@code returnAddress} type,\n+     * which does not apply to {@code reference} type load instructions.\n@@ -74,0 +110,5 @@\n+     * @apiNote\n+     * The explicit {@code op} argument allows creating {@code wide} or\n+     * regular store instructions when the {@code slot} can be encoded\n+     * with more optimized store instructions.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/StoreInstruction.java","additions":43,"deletions":2,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -32,2 +32,18 @@\n- * Models a single case in a {@code lookupswitch} or {@code tableswitch}\n- * instruction.\n+ * Models a single case in a {@link LookupSwitchInstruction lookupswitch} or\n+ * {@link TableSwitchInstruction tableswitch} instruction.\n+ * <p>\n+ * Conceptually, a switch case is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region substring=\"SwitchCase\" target=\"#of\"\n+ * \/\/ @link substring=\"Label target\" target=\"#target\" :\n+ * SwitchCase(int caseValue, Label target) \/\/ @link substring=\"int caseValue\" target=\"#caseValue\"\n+ * \/\/ @end\n+ * }\n+ * <p>\n+ * Physically, a switch case is represented differently in a {@code lookupswitch}\n+ * versus in a {@code tableswitch}.  In a {@code lookupswitch}, a switch case\n+ * is as its conceptual representation, a tuple of lookup key and jump target.\n+ * A {@code tableswitch} instead knows a {@link TableSwitchInstruction#lowValue\n+ * lowValue}, and the lookup value of the case is implicitly {@code lowValue\n+ * + index}, where {@code index} is the index of the case into the array of\n+ * cases.\n@@ -37,1 +53,0 @@\n- *\n@@ -50,1 +65,1 @@\n-     * Create a {@linkplain SwitchCase}\n+     * {@return a new switch case}\n@@ -54,1 +69,0 @@\n-     * @return the {@linkplain SwitchCase}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/SwitchCase.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -31,0 +32,1 @@\n+import java.lang.classfile.Opcode;\n@@ -36,1 +38,1 @@\n- * Models a {@code tableswitch} instruction in the {@code code} array of a\n+ * Models a {@link Opcode#TABLESWITCH tableswitch} instruction in the {@code code} array of a\n@@ -39,0 +41,37 @@\n+ * <p>\n+ * Conceptually, a {@code tableswitch} instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region=0 substring=\"TableSwitchInstruction\" target=\"CodeBuilder#tableswitch(Label, List)\"\n+ * \/\/ @link substring=\"Label defaultTarget\" target=\"#defaultTarget\" :\n+ * TableSwitchInstruction(Label defaultTarget, List<SwitchCase> cases) \/\/ @link substring=\"List<SwitchCase> cases\" target=\"#cases()\"\n+ * \/\/ @end region=0\n+ * }\n+ * Where the {@link #lowValue lowValue} and {@link #highValue highValue} are\n+ * derived from the list of cases.\n+ * <p>\n+ * Physically, a {@code tableswich} instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region=0 substring=\"TableSwitchInstruction\" target=\"#of\"\n+ * \/\/ @link region=1 substring=\"int lowValue\" target=\"#lowValue\"\n+ * \/\/ @link region=2 substring=\"int highValue\" target=\"#highValue\"\n+ * \/\/ @link substring=\"Label defaultTarget\" target=\"#defaultTarget\" :\n+ * TableSwitchInstruction(Opcode.TABLESWITCH, padding, Label defaultTarget, int lowValue, int highValue, List<Label> cases) \/\/ @link substring=\"List<Label> cases\" target=\"#cases()\"\n+ * \/\/ @end region=0\n+ * \/\/ @end region=1\n+ * \/\/ @end region=2\n+ * }\n+ * The {@code padding} is 0 to 3 bytes of any value, making the default target\n+ * 4-byte aligned to the beginning of the {@code code} array.  The {@code cases}\n+ * list has an implicit length equal to {@code highValue - lowValue + 1}, and\n+ * the case at {@code index} has value {@code lowValue + index}.\n+ * <p>\n+ * When read from {@code class} files, the {@code List<SwitchCase> cases}\n+ * may omit cases that duplicate the default target.  The list is sorted\n+ * ascending by the values.\n+ * <p>\n+ * When writing, the order in the {@code List<SwitchCase> cases} list does not\n+ * matter, as there is only one valid order in the physical representation of\n+ * table switch entries.  Treatment of elements in {@code List<SwitchCase> cases}\n+ * whose {@linkplain SwitchCase#caseValue value} is less than {@code lowValue}\n+ * or greater than {@code highValue}, and elements whose value duplicates that\n+ * of another, is not specified.\n@@ -40,0 +79,2 @@\n+ * @see CodeBuilder#tableswitch CodeBuilder::tableswitch\n+ * @jvms 6.5.tableswitch <em>tableswitch<\/em>\n@@ -70,1 +111,2 @@\n-     * @param cases the cases of the switch\n+     * @param cases the cases of the switch; duplicate or out of bound case\n+     *              handling is not specified\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/TableSwitchInstruction.java","additions":44,"deletions":2,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -30,0 +31,1 @@\n+import java.lang.classfile.Opcode;\n@@ -34,1 +36,1 @@\n- * Models an {@code athrow} instruction in the {@code code} array of a\n+ * Models an {@link Opcode#ATHROW athrow} instruction in the {@code code} array of a\n@@ -37,0 +39,6 @@\n+ * <p>\n+ * Conceptually and physically, a stack manipulation instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ThrowInstruction\" target=\"#of\" :\n+ * ThrowInstruction(Opcode.ATHROW)\n+ * }\n@@ -38,0 +46,1 @@\n+ * @see CodeBuilder#athrow CodeBuiler::athrow\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ThrowInstruction.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -39,3 +39,25 @@\n- * Models an {@code instanceof} or {@code checkcast} instruction in the {@code\n- * code} array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n- * when traversing the elements of a {@link CodeModel}.\n+ * Models an {@link Opcode#INSTANCEOF instanceof} or a {@link Opcode#CHECKCAST checkcast}\n+ * instruction in the {@code code} array of a {@code Code} attribute.  Corresponding\n+ * opcodes have a {@linkplain Opcode#kind() kind} of {@link Opcode.Kind#TYPE_CHECK}.\n+ * Delivered as a {@link CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * <p>\n+ * An {@code instanceof} checks the type and pushes a value to the operand stack.\n+ * A {@code checkcast} checks the type and throws a {@link ClassCastException} if\n+ * the check fails.\n+ * <p>\n+ * Conceptually, a type check instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region substring=\"TypeCheckInstruction\" target=\"#of(Opcode, ClassDesc)\"\n+ * \/\/ @link substring=\"Opcode\" target=\"#opcode\" :\n+ * TypeCheckInstruction(Opcode, ClassDesc) \/\/ @link substring=\"ClassDesc\" target=\"#type\"\n+ * \/\/ @end\n+ * }\n+ * where the {@code ClassDesc} is not primitive.\n+ * <p>\n+ * Physically, a type check instruction is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region substring=\"TypeCheckInstruction\" target=\"#of(Opcode, ClassEntry)\"\n+ * \/\/ @link substring=\"Opcode\" target=\"#opcode\" :\n+ * TypeCheckInstruction(Opcode, ClassEntry) \/\/ @link substring=\"ClassEntry\" target=\"#type\"\n+ * \/\/ @end\n+ * }\n@@ -50,1 +72,5 @@\n-     * {@return the type against which the instruction checks or casts}\n+     * {@return the type against which the instruction checks}\n+     *\n+     * @apiNote\n+     * A symbolic descriptor for the type checked is available through {@link\n+     * ClassEntry#asSymbol() type().asSymbol()}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/TypeCheckInstruction.java","additions":30,"deletions":4,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -29,1 +29,5 @@\n- * The {@code java.lang.classfile.attribute} package contains interfaces describing code instructions.\n+ * The {@code java.lang.classfile.instruction} package contains interfaces describing code instructions.\n+ * <p>\n+ * Unless otherwise specified, passing {@code null} or an array or collection containing a {@code null} element as an\n+ * argument to a constructor or method of any Class-File API class or interface will cause a {@link NullPointerException}\n+ * to be thrown.\n@@ -31,0 +35,28 @@\n+ * <h2 id=\"reading\">Reading of instructions<\/h2>\n+ * Instructions and pseudo-instructions are usually accessed from a {@link CodeModel}, such as {@link CodeModel#forEach\n+ * CodeModel::forEach}, and categorized by pattern-matching.\n+ * <p>\n+ * When read from {@code class} files, instructions are lazily inflated; the contents of these instructions, besides the\n+ * bare structure, are not evaluated to speed up parsing.  Instructions to users interest, such as those filtered by the\n+ * pattern matching, have their contents read on demand, to avoid unnecessary reading of unrelated instructions in a code\n+ * array.\n+ * <p>\n+ * Due to the lazy nature of {@code class} file parsing, {@link IllegalArgumentException} indicating malformed\n+ * {@code class} file data can be thrown at any method invocation.  For example, an instruction object for a {@link\n+ * TypeCheckInstruction} may be obtained from a {@code CodeModel}, but the subsequent invocation of {@link\n+ * TypeCheckInstruction#type() .type()} may fail with {@code IllegalArgumentException} because the instruction refers\n+ * to a bad constant pool index.\n+ *\n+ * <h2 id=\"writing\">Writing of instructions<\/h2>\n+ * Writing of instructions happen on {@link CodeBuilder}.  The most basic way to write instructions is to pass an\n+ * instruction object to {@link CodeBuilder#with CodeBuilder::with}, which supports all valid instructions.\n+ * Yet, {@code CodeBuilder} provides a lot of {@linkplain CodeBuilder##instruction-factories convenience factory methods}\n+ * for easy creation of instructions, named by their mnemonic.  These accessors are more concise, and often more\n+ * efficient at run-time than passing instruction objects.\n+ * <p>\n+ * Due to restrictions in the {@code class} file format, some instructions may not be representable in a {@code CodeBuilder}.\n+ * In some scenarios, such as for {@link BranchInstruction}, Class-File API options control if alternatives can be used\n+ * in code generation instead.  Otherwise, they can be configured to fail-fast to ensure the parity of {@code CodeBuilder}\n+ * commands with the generated {@code code} array data.\n+ *\n+ * @jvms 6.5 Instructions\n@@ -35,0 +67,3 @@\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeModel;\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/package-info.java","additions":36,"deletions":1,"binary":false,"changes":37,"status":"modified"}]}