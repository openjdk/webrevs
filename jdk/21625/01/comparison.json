{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -33,1 +34,2 @@\n- * Models an executable instruction in a method body.\n+ * Models an executable instruction in the {@code code} array of the {@link CodeAttribute Code}\n+ * attribute of a method.\n@@ -35,0 +37,1 @@\n+ * @sealedGraph\n@@ -55,0 +58,2 @@\n+     * This value is equal to {@link Opcode#sizeIfFixed()\n+     * opcode().sizeIfFixed()} if it is not {@code -1}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Instruction.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.lang.classfile.instruction.*;\n+\n@@ -31,2 +33,8 @@\n- * As well as a number of pseudo-instructions that may be encountered when\n- * traversing the instructions of a method.\n+ * This includes a few pseudo-opcodes modified by {@link #isWide() wide}.\n+ *\n+ * @apiNote\n+ * The enum constants are named after the opcodes' mnemonics in uppercase.\n+ * Wide pseudo-opcodes are named with the original opcodes' mnemonic plus\n+ * a {@code _W} suffix. However, {@link #LDC_W ldc_w}, {@link #LDC2_W ldc2_w},\n+ * {@link #GOTO_W goto_w}, and {@link #JSR_W jsr_w} are legitimate opcodes\n+ * instead of wide pseudo-opcodes.\n@@ -35,1 +43,0 @@\n- * @see PseudoInstruction\n@@ -41,1 +48,5 @@\n-    \/** Do nothing *\/\n+    \/**\n+     * Do nothing.\n+     *\n+     * @jvms 6.5.nop <em>nop<\/em>\n+     *\/\n@@ -44,1 +55,6 @@\n-    \/** Push null *\/\n+    \/**\n+     * Push {@code null}.\n+     *\n+     * @jvms 6.5.aconst_null <em>aconst_null<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -47,1 +63,6 @@\n-    \/** Push int constant -1 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code -1}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -50,1 +71,6 @@\n-    \/** Push int constant 0 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code 0}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -53,1 +79,6 @@\n-    \/** Push int constant 1 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code 1}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -56,1 +87,6 @@\n-    \/** Push int constant 2 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code 2}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -59,1 +95,6 @@\n-    \/** Push int constant 3 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code 3}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -62,1 +103,6 @@\n-    \/** Push int constant 4 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code 4}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -65,1 +111,6 @@\n-    \/** Push int constant 5 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code 5}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -68,1 +119,6 @@\n-    \/** Push long constant 0 *\/\n+    \/**\n+     * Push {@link TypeKind#LONG long} constant {@code 0}.\n+     *\n+     * @jvms 6.5.lconst_l <em>lconst_&lt;l&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -71,1 +127,6 @@\n-    \/** Push long constant  1 *\/\n+    \/**\n+     * Push {@link TypeKind#LONG long} constant {@code 1}.\n+     *\n+     * @jvms 6.5.lconst_l <em>lconst_&lt;l&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -74,1 +135,6 @@\n-    \/** Push float constant 0 *\/\n+    \/**\n+     * Push {@link TypeKind#FLOAT float} constant {@code 0}.\n+     *\n+     * @jvms 6.5.fconst_f <em>fconst_&lt;f&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -77,1 +143,6 @@\n-    \/** Push float constant 1 *\/\n+    \/**\n+     * Push {@link TypeKind#FLOAT float} constant {@code 1}.\n+     *\n+     * @jvms 6.5.fconst_f <em>fconst_&lt;f&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -80,1 +151,6 @@\n-    \/** Push float constant 2 *\/\n+    \/**\n+     * Push {@link TypeKind#FLOAT float} constant {@code 2}.\n+     *\n+     * @jvms 6.5.fconst_f <em>fconst_&lt;f&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -83,1 +159,6 @@\n-    \/** Push double constant 0 *\/\n+    \/**\n+     * Push {@link TypeKind#DOUBLE double} constant {@code 0}.\n+     *\n+     * @jvms 6.5.dconst_d <em>dconst_&lt;d&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -86,1 +167,6 @@\n-    \/** Push double constant 1 *\/\n+    \/**\n+     * Push {@link TypeKind#DOUBLE double} constant {@code 1}.\n+     *\n+     * @jvms 6.5.dconst_d <em>dconst_&lt;d&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     *\/\n@@ -89,1 +175,7 @@\n-    \/** Push byte *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} value from sign-extension of immediate\n+     * {@link TypeKind#BYTE byte} value.\n+     *\n+     * @jvms 6.5.bipush <em>bipush<\/em>\n+     * @see ConstantInstruction.ArgumentConstantInstruction\n+     *\/\n@@ -92,1 +184,7 @@\n-    \/** Push short *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} value from sign-extension of immediate\n+     * {@link TypeKind#SHORT short} value.\n+     *\n+     * @jvms 6.5.sipush <em>sipush<\/em>\n+     * @see ConstantInstruction.ArgumentConstantInstruction\n+     *\/\n@@ -95,1 +193,6 @@\n-    \/** Push item from run-time constant pool *\/\n+    \/**\n+     * Push item from run-time constant pool.\n+     *\n+     * @jvms 6.5.ldc <em>ldc<\/em>\n+     * @see ConstantInstruction.LoadConstantInstruction\n+     *\/\n@@ -98,1 +201,6 @@\n-    \/** Push item from run-time constant pool (wide index) *\/\n+    \/**\n+     * Push item from run-time constant pool (wide index).\n+     *\n+     * @jvms 6.5.ldc_w <em>ldc_w<\/em>\n+     * @see ConstantInstruction.LoadConstantInstruction\n+     *\/\n@@ -101,1 +209,7 @@\n-    \/** Push long or double from run-time constant pool (wide index) *\/\n+    \/**\n+     * Push {@link TypeKind#LONG long} or {@link TypeKind#DOUBLE double}\n+     * from run-time constant pool (wide index).\n+     *\n+     * @jvms 6.5.ldc2_w <em>ldc2_w<\/em>\n+     * @see ConstantInstruction.LoadConstantInstruction\n+     *\/\n@@ -104,1 +218,5 @@\n-    \/** Load int from local variable *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from local variable.\n+     *\n+     * @jvms 6.5.iload <em>iload<\/em>\n+     *\/\n@@ -107,1 +225,5 @@\n-    \/** Load long from local variable *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from local variable.\n+     *\n+     * @jvms 6.5.lload <em>lload<\/em>\n+     *\/\n@@ -110,1 +232,5 @@\n-    \/** Load float from local variable *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from local variable.\n+     *\n+     * @jvms 6.5.fload <em>fload<\/em>\n+     *\/\n@@ -113,1 +239,5 @@\n-    \/** Load double from local variable *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from local variable.\n+     *\n+     * @jvms 6.5.dload <em>dload<\/em>\n+     *\/\n@@ -116,1 +246,5 @@\n-    \/** Load reference from local variable *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from local variable.\n+     *\n+     * @jvms 6.5.aload <em>aload<\/em>\n+     *\/\n@@ -119,1 +253,5 @@\n-    \/** Load int from local variable 0 *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.iload_n <em>iload_&lt;n&gt;<\/em>\n+     *\/\n@@ -122,1 +260,5 @@\n-    \/** Load int from local variable 1 *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.iload_n <em>iload_&lt;n&gt;<\/em>\n+     *\/\n@@ -125,1 +267,5 @@\n-    \/** Load int from local variable 2 *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.iload_n <em>iload_&lt;n&gt;<\/em>\n+     *\/\n@@ -128,1 +274,5 @@\n-    \/** Load int from local variable3  *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.iload_n <em>iload_&lt;n&gt;<\/em>\n+     *\/\n@@ -131,1 +281,5 @@\n-    \/** Load long from local variable 0 *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.lload_n <em>lload_&lt;n&gt;<\/em>\n+     *\/\n@@ -134,1 +288,5 @@\n-    \/** Load long from local variable 1 *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.lload_n <em>lload_&lt;n&gt;<\/em>\n+     *\/\n@@ -137,1 +295,5 @@\n-    \/** Load long from local variable 2 *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.lload_n <em>lload_&lt;n&gt;<\/em>\n+     *\/\n@@ -140,1 +302,5 @@\n-    \/** Load long from local variable 3 *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.lload_n <em>lload_&lt;n&gt;<\/em>\n+     *\/\n@@ -143,1 +309,5 @@\n-    \/** Load float from local variable 0 *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.fload_n <em>fload_&lt;n&gt;<\/em>\n+     *\/\n@@ -146,1 +316,5 @@\n-    \/** Load float from local variable 1 *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.fload_n <em>fload_&lt;n&gt;<\/em>\n+     *\/\n@@ -149,1 +323,5 @@\n-    \/** Load float from local variable 2 *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.fload_n <em>fload_&lt;n&gt;<\/em>\n+     *\/\n@@ -152,1 +330,5 @@\n-    \/** Load float from local variable 3 *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.fload_n <em>fload_&lt;n&gt;<\/em>\n+     *\/\n@@ -155,1 +337,5 @@\n-    \/** Load double from local variable 0 *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.dload_n <em>dload_&lt;n&gt;<\/em>\n+     *\/\n@@ -158,1 +344,5 @@\n-    \/** Load double from local variable 1 *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.dload_n <em>dload_&lt;n&gt;<\/em>\n+     *\/\n@@ -161,1 +351,5 @@\n-    \/** Load double from local variable 2 *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.dload_n <em>dload_&lt;n&gt;<\/em>\n+     *\/\n@@ -164,1 +358,5 @@\n-    \/** Load double from local variable 3 *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.dload_n <em>dload_&lt;n&gt;<\/em>\n+     *\/\n@@ -167,1 +365,5 @@\n-    \/**  Load reference from local variable 0 *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.aload_n <em>aload_&lt;n&gt;<\/em>\n+     *\/\n@@ -170,1 +372,5 @@\n-    \/** Load reference from local variable 1 *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.aload_n <em>aload_&lt;n&gt;<\/em>\n+     *\/\n@@ -173,1 +379,5 @@\n-    \/** Load reference from local variable 2 *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.aload_n <em>aload_&lt;n&gt;<\/em>\n+     *\/\n@@ -176,1 +386,5 @@\n-    \/** Load reference from local variable 3 *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.aload_n <em>aload_&lt;n&gt;<\/em>\n+     *\/\n@@ -179,1 +393,5 @@\n-    \/** Load int from array *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from array.\n+     *\n+     * @jvms 6.5.iaload <em>iaload<\/em>\n+     *\/\n@@ -182,1 +400,5 @@\n-    \/** Load long from array *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from array.\n+     *\n+     * @jvms 6.5.laload <em>laload<\/em>\n+     *\/\n@@ -185,1 +407,5 @@\n-    \/** Load float from array *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from array.\n+     *\n+     * @jvms 6.5.faload <em>faload<\/em>\n+     *\/\n@@ -188,1 +414,5 @@\n-    \/** Load double from array *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from array.\n+     *\n+     * @jvms 6.5.daload <em>daload<\/em>\n+     *\/\n@@ -191,1 +421,5 @@\n-    \/** Load reference from array *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from array.\n+     *\n+     * @jvms 6.5.aaload <em>aaload<\/em>\n+     *\/\n@@ -194,1 +428,5 @@\n-    \/** Load byte from array *\/\n+    \/**\n+     * Load {@link TypeKind#BYTE byte} or {@link TypeKind#BOOLEAN boolean} from array.\n+     *\n+     * @jvms 6.5.baload <em>baload<\/em>\n+     *\/\n@@ -197,1 +435,5 @@\n-    \/** Load char from array *\/\n+    \/**\n+     * Load {@link TypeKind#CHAR char} from array.\n+     *\n+     * @jvms 6.5.caload <em>caload<\/em>\n+     *\/\n@@ -200,1 +442,5 @@\n-    \/** Load short from array *\/\n+    \/**\n+     * Load {@link TypeKind#SHORT short} from array.\n+     *\n+     * @jvms 6.5.saload <em>saload<\/em>\n+     *\/\n@@ -203,1 +449,5 @@\n-    \/** Store int into local variable *\/\n+    \/**\n+     * Store {@link TypeKind#INT int} into local variable.\n+     *\n+     * @jvms 6.5.istore <em>istore<\/em>\n+     *\/\n@@ -206,1 +456,5 @@\n-    \/** Store long into local variable *\/\n+    \/**\n+     * Store {@link TypeKind#LONG long} into local variable.\n+     *\n+     * @jvms 6.5.lstore <em>lstore<\/em>\n+     *\/\n@@ -209,1 +463,5 @@\n-    \/** Store float into local variable *\/\n+    \/**\n+     * Store {@link TypeKind#FLOAT float} into local variable.\n+     *\n+     * @jvms 6.5.fstore <em>fstore<\/em>\n+     *\/\n@@ -212,1 +470,5 @@\n-    \/** Store double into local variable *\/\n+    \/**\n+     * Store {@link TypeKind#DOUBLE double} into local variable.\n+     *\n+     * @jvms 6.5.dstore <em>dstore<\/em>\n+     *\/\n@@ -215,1 +477,6 @@\n-    \/** Store reference into local variable *\/\n+    \/**\n+     * Store {@link TypeKind#REFERENCE reference} into local variable.\n+     * Can also store the {@code returnAddress} type.\n+     *\n+     * @jvms 6.5.astore <em>astore<\/em>\n+     *\/\n@@ -218,1 +485,5 @@\n-    \/** Store int into local variable 0 *\/\n+    \/**\n+     * Store {@link TypeKind#INT int} into local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.istore_n <em>istore_&lt;n&gt;<\/em>\n+     *\/\n@@ -221,1 +492,5 @@\n-    \/** Store int into local variable 1 *\/\n+    \/**\n+     * Store {@link TypeKind#INT int} into local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.istore_n <em>istore_&lt;n&gt;<\/em>\n+     *\/\n@@ -224,1 +499,5 @@\n-    \/** Store int into local variable 2 *\/\n+    \/**\n+     * Store {@link TypeKind#INT int} into local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.istore_n <em>istore_&lt;n&gt;<\/em>\n+     *\/\n@@ -227,1 +506,5 @@\n-    \/** Store int into local variable 3 *\/\n+    \/**\n+     * Store {@link TypeKind#INT int} into local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.istore_n <em>istore_&lt;n&gt;<\/em>\n+     *\/\n@@ -230,1 +513,5 @@\n-    \/** Store long into local variable 0 *\/\n+    \/**\n+     * Store {@link TypeKind#LONG long} into local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.lstore_n <em>lstore_&lt;n&gt;<\/em>\n+     *\/\n@@ -233,1 +520,5 @@\n-    \/** Store long into local variable 1 *\/\n+    \/**\n+     * Store {@link TypeKind#LONG long} into local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.lstore_n <em>lstore_&lt;n&gt;<\/em>\n+     *\/\n@@ -236,1 +527,5 @@\n-    \/** Store long into local variable 2 *\/\n+    \/**\n+     * Store {@link TypeKind#LONG long} into local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.lstore_n <em>lstore_&lt;n&gt;<\/em>\n+     *\/\n@@ -239,1 +534,5 @@\n-    \/** Store long into local variable 3 *\/\n+    \/**\n+     * Store {@link TypeKind#LONG long} into local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.lstore_n <em>lstore_&lt;n&gt;<\/em>\n+     *\/\n@@ -242,1 +541,5 @@\n-    \/** Store float into local variable 0 *\/\n+    \/**\n+     * Store {@link TypeKind#FLOAT float} into local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.fstore_n <em>fstore_&lt;n&gt;<\/em>\n+     *\/\n@@ -245,1 +548,5 @@\n-    \/** Store float into local variable 1 *\/\n+    \/**\n+     * Store {@link TypeKind#FLOAT float} into local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.fstore_n <em>fstore_&lt;n&gt;<\/em>\n+     *\/\n@@ -248,1 +555,5 @@\n-    \/** Store float into local variable 2 *\/\n+    \/**\n+     * Store {@link TypeKind#FLOAT float} into local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.fstore_n <em>fstore_&lt;n&gt;<\/em>\n+     *\/\n@@ -251,1 +562,5 @@\n-    \/** Store float into local variable 3 *\/\n+    \/**\n+     * Store {@link TypeKind#FLOAT float} into local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.fstore_n <em>fstore_&lt;n&gt;<\/em>\n+     *\/\n@@ -254,1 +569,5 @@\n-    \/** Store double into local variable 0 *\/\n+    \/**\n+     * Store {@link TypeKind#DOUBLE double} into local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.dstore_n <em>dstore_&lt;n&gt;<\/em>\n+     *\/\n@@ -257,1 +576,5 @@\n-    \/** Store double into local variable 1 *\/\n+    \/**\n+     * Store {@link TypeKind#DOUBLE double} into local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.dstore_n <em>dstore_&lt;n&gt;<\/em>\n+     *\/\n@@ -260,1 +583,5 @@\n-    \/** Store double into local variable 2 *\/\n+    \/**\n+     * Store {@link TypeKind#DOUBLE double} into local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.dstore_n <em>dstore_&lt;n&gt;<\/em>\n+     *\/\n@@ -263,1 +590,5 @@\n-    \/** Store double into local variable 3 *\/\n+    \/**\n+     * Store {@link TypeKind#DOUBLE double} into local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.dstore_n <em>dstore_&lt;n&gt;<\/em>\n+     *\/\n@@ -266,1 +597,6 @@\n-    \/** Store reference into local variable 0 *\/\n+    \/**\n+     * Store {@link TypeKind#REFERENCE reference} into local variable slot {@code 0}.\n+     * Can also store the {@code returnAddress} type.\n+     *\n+     * @jvms 6.5.astore_n <em>astore_&lt;n&gt;<\/em>\n+     *\/\n@@ -269,1 +605,6 @@\n-    \/** Store reference into local variable 1 *\/\n+    \/**\n+     * Store {@link TypeKind#REFERENCE reference} into local variable slot {@code 1}.\n+     * Can also store the {@code returnAddress} type.\n+     *\n+     * @jvms 6.5.astore_n <em>astore_&lt;n&gt;<\/em>\n+     *\/\n@@ -272,1 +613,6 @@\n-    \/** Store reference into local variable 2 *\/\n+    \/**\n+     * Store {@link TypeKind#REFERENCE reference} into local variable slot {@code 2}.\n+     * Can also store the {@code returnAddress} type.\n+     *\n+     * @jvms 6.5.astore_n <em>astore_&lt;n&gt;<\/em>\n+     *\/\n@@ -275,1 +621,6 @@\n-    \/** Store reference into local variable 3 *\/\n+    \/**\n+     * Store {@link TypeKind#REFERENCE reference} into local variable slot {@code 3}.\n+     * Can also store the {@code returnAddress} type.\n+     *\n+     * @jvms 6.5.astore_n <em>astore_&lt;n&gt;<\/em>\n+     *\/\n@@ -278,1 +629,5 @@\n-    \/** Store into int array *\/\n+    \/**\n+     * Store into {@link TypeKind#INT int} array.\n+     *\n+     * @jvms 6.5.iastore <em>iastore<\/em>\n+     *\/\n@@ -281,1 +636,5 @@\n-    \/** Store into long array *\/\n+    \/**\n+     * Store into {@link TypeKind#LONG long} array.\n+     *\n+     * @jvms 6.5.lastore <em>lastore<\/em>\n+     *\/\n@@ -284,1 +643,5 @@\n-    \/** Store into float array *\/\n+    \/**\n+     * Store into {@link TypeKind#FLOAT float} array.\n+     *\n+     * @jvms 6.5.fastore <em>fastore<\/em>\n+     *\/\n@@ -287,1 +650,5 @@\n-    \/** Store into double array *\/\n+    \/**\n+     * Store into {@link TypeKind#DOUBLE double} array.\n+     *\n+     * @jvms 6.5.dastore <em>dastore<\/em>\n+     *\/\n@@ -290,1 +657,5 @@\n-    \/** Store into reference array *\/\n+    \/**\n+     * Store into {@link TypeKind#REFERENCE reference} array.\n+     *\n+     * @jvms 6.5.aastore <em>aastore<\/em>\n+     *\/\n@@ -293,1 +664,5 @@\n-    \/** Store into byte array *\/\n+    \/**\n+     * Store into {@link TypeKind#BYTE byte} or {@link TypeKind#BOOLEAN boolean} array.\n+     *\n+     * @jvms 6.5.bastore <em>bastore<\/em>\n+     *\/\n@@ -296,1 +671,5 @@\n-    \/** Store into char array *\/\n+    \/**\n+     * Store into {@link TypeKind#CHAR char} array.\n+     *\n+     * @jvms 6.5.castore <em>castore<\/em>\n+     *\/\n@@ -299,1 +678,5 @@\n-    \/** Store into short array *\/\n+    \/**\n+     * Store into {@link TypeKind#SHORT short} array.\n+     *\n+     * @jvms 6.5.sastore <em>sastore<\/em>\n+     *\/\n@@ -302,1 +685,5 @@\n-    \/** Pop the top operand stack value *\/\n+    \/**\n+     * Pop the top operand stack value.\n+     *\n+     * @jvms 6.5.pop <em>pop<\/em>\n+     *\/\n@@ -305,1 +692,5 @@\n-    \/** Pop the top one or two operand stack values *\/\n+    \/**\n+     * Pop the top one or two operand stack values.\n+     *\n+     * @jvms 6.5.pop2 <em>pop2<\/em>\n+     *\/\n@@ -308,1 +699,5 @@\n-    \/** Duplicate the top operand stack value *\/\n+    \/**\n+     * Duplicate the top operand stack value.\n+     *\n+     * @jvms 6.5.dup <em>dup<\/em>\n+     *\/\n@@ -311,1 +706,5 @@\n-    \/** Duplicate the top operand stack value and insert two values down *\/\n+    \/**\n+     * Duplicate the top operand stack value and insert two values down.\n+     *\n+     * @jvms 6.5.dup_x1 <em>dup_x1<\/em>\n+     *\/\n@@ -314,1 +713,5 @@\n-    \/** Duplicate the top operand stack value and insert two or three values down *\/\n+    \/**\n+     * Duplicate the top operand stack value and insert two or three values down.\n+     *\n+     * @jvms 6.5.dup_x2 <em>dup_x2<\/em>\n+     *\/\n@@ -317,1 +720,5 @@\n-    \/** Duplicate the top one or two operand stack values *\/\n+    \/**\n+     * Duplicate the top one or two operand stack values.\n+     *\n+     * @jvms 6.5.dup2 <em>dup2<\/em>\n+     *\/\n@@ -320,1 +727,6 @@\n-    \/** Duplicate the top one or two operand stack values and insert two or three values down *\/\n+    \/**\n+     * Duplicate the top one or two operand stack values and insert two or three\n+     * values down.\n+     *\n+     * @jvms 6.5.dup2_x1 <em>dup2_x1<\/em>\n+     *\/\n@@ -323,1 +735,6 @@\n-    \/** Duplicate the top one or two operand stack values and insert two, three, or four values down *\/\n+    \/**\n+     * Duplicate the top one or two operand stack values and insert two, three,\n+     * or four values down.\n+     *\n+     * @jvms 6.5.dup2_x2 <em>dup2_x2<\/em>\n+     *\/\n@@ -326,1 +743,5 @@\n-    \/** Swap the top two operand stack values *\/\n+    \/**\n+     * Swap the top two operand stack values.\n+     *\n+     * @jvms 6.5.swap <em>swap<\/em>\n+     *\/\n@@ -329,1 +750,5 @@\n-    \/** Add int *\/\n+    \/**\n+     * Add {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.iadd <em>iadd<\/em>\n+     *\/\n@@ -332,1 +757,5 @@\n-    \/** Add long *\/\n+    \/**\n+     * Add {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.ladd <em>ladd<\/em>\n+     *\/\n@@ -335,1 +764,5 @@\n-    \/** Add float *\/\n+    \/**\n+     * Add {@link TypeKind#FLOAT float}.\n+     *\n+     * @jvms 6.5.fadd <em>fadd<\/em>\n+     *\/\n@@ -338,1 +771,5 @@\n-    \/** Add double *\/\n+    \/**\n+     * Add {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jvms 6.5.dadd <em>dadd<\/em>\n+     *\/\n@@ -341,1 +778,5 @@\n-    \/** Subtract int *\/\n+    \/**\n+     * Subtract {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.isub <em>isub<\/em>\n+     *\/\n@@ -344,1 +785,5 @@\n-    \/** Subtract long *\/\n+    \/**\n+     * Subtract {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lsub <em>lsub<\/em>\n+     *\/\n@@ -347,1 +792,5 @@\n-    \/** Subtract float *\/\n+    \/**\n+     * Subtract {@link TypeKind#FLOAT float}.\n+     *\n+     * @jvms 6.5.fsub <em>fsub<\/em>\n+     *\/\n@@ -350,1 +799,5 @@\n-    \/** Subtract double *\/\n+    \/**\n+     * Subtract {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jvms 6.5.dsub <em>dsub<\/em>\n+     *\/\n@@ -353,1 +806,5 @@\n-    \/** Multiply int *\/\n+    \/**\n+     * Multiply {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.imul <em>imul<\/em>\n+     *\/\n@@ -356,1 +813,5 @@\n-    \/** Multiply long *\/\n+    \/**\n+     * Multiply {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lmul <em>lmul<\/em>\n+     *\/\n@@ -359,1 +820,5 @@\n-    \/** Multiply float *\/\n+    \/**\n+     * Multiply {@link TypeKind#FLOAT float}.\n+     *\n+     * @jvms 6.5.fmul <em>fmul<\/em>\n+     *\/\n@@ -362,1 +827,5 @@\n-    \/** Multiply double *\/\n+    \/**\n+     * Multiply {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jvms 6.5.dmul <em>dmul<\/em>\n+     *\/\n@@ -365,1 +834,5 @@\n-    \/** Divide int *\/\n+    \/**\n+     * Divide {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.idiv <em>idiv<\/em>\n+     *\/\n@@ -368,1 +841,5 @@\n-    \/** Divide long *\/\n+    \/**\n+     * Divide {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.ldiv <em>ldiv<\/em>\n+     *\/\n@@ -371,1 +848,5 @@\n-    \/** Divide float *\/\n+    \/**\n+     * Divide {@link TypeKind#FLOAT float}.\n+     *\n+     * @jvms 6.5.fdiv <em>fdiv<\/em>\n+     *\/\n@@ -374,1 +855,5 @@\n-    \/** Divide double *\/\n+    \/**\n+     * Divide {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jvms 6.5.ddiv <em>ddiv<\/em>\n+     *\/\n@@ -377,1 +862,5 @@\n-    \/** Remainder int *\/\n+    \/**\n+     * Remainder {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.irem <em>irem<\/em>\n+     *\/\n@@ -380,1 +869,5 @@\n-    \/** Remainder long *\/\n+    \/**\n+     * Remainder {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lrem <em>lrem<\/em>\n+     *\/\n@@ -383,1 +876,5 @@\n-    \/** Remainder float *\/\n+    \/**\n+     * Remainder {@link TypeKind#FLOAT float}.\n+     *\n+     * @jvms 6.5.frem <em>frem<\/em>\n+     *\/\n@@ -386,1 +883,5 @@\n-    \/** Remainder double *\/\n+    \/**\n+     * Remainder {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jvms 6.5.drem <em>drem<\/em>\n+     *\/\n@@ -389,1 +890,5 @@\n-    \/** Negate int *\/\n+    \/**\n+     * Negate {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.ineg <em>ineg<\/em>\n+     *\/\n@@ -392,1 +897,5 @@\n-    \/** Negate long *\/\n+    \/**\n+     * Negate {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lneg <em>lneg<\/em>\n+     *\/\n@@ -395,1 +904,5 @@\n-    \/** Negate float *\/\n+    \/**\n+     * Negate {@link TypeKind#FLOAT float}.\n+     *\n+     * @jvms 6.5.fneg <em>fneg<\/em>\n+     *\/\n@@ -398,1 +911,5 @@\n-    \/** Negate double *\/\n+    \/**\n+     * Negate {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jvms 6.5.dneg <em>dneg<\/em>\n+     *\/\n@@ -401,1 +918,5 @@\n-    \/** Shift left int *\/\n+    \/**\n+     * Shift left {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.ishl <em>ishl<\/em>\n+     *\/\n@@ -404,1 +925,5 @@\n-    \/** Shift left long *\/\n+    \/**\n+     * Shift left {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lshl <em>lshl<\/em>\n+     *\/\n@@ -407,1 +932,5 @@\n-    \/** Shift right int *\/\n+    \/**\n+     * Arithmetic shift right {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.ishr <em>ishr<\/em>\n+     *\/\n@@ -410,1 +939,5 @@\n-    \/** Shift right long *\/\n+    \/**\n+     * Arithmetic shift right {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lshr <em>lshr<\/em>\n+     *\/\n@@ -413,1 +946,5 @@\n-    \/** Logical shift right int *\/\n+    \/**\n+     * Logical shift right {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.iushr <em>iushr<\/em>\n+     *\/\n@@ -416,1 +953,5 @@\n-    \/** Logical shift right long *\/\n+    \/**\n+     * Logical shift right {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lushr <em>lushr<\/em>\n+     *\/\n@@ -419,1 +960,8 @@\n-    \/** Boolean AND int *\/\n+    \/**\n+     * Bitwise AND {@link TypeKind#INT int}.\n+     *\n+     * @apiNote\n+     * This may be used to implement {@link TypeKind#BOOLEAN boolean} AND.\n+     *\n+     * @jvms 6.5.iand <em>iand<\/em>\n+     *\/\n@@ -422,1 +970,5 @@\n-    \/** Boolean AND long *\/\n+    \/**\n+     * Bitwise AND {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.land <em>land<\/em>\n+     *\/\n@@ -425,1 +977,8 @@\n-    \/** Boolean OR int *\/\n+    \/**\n+     * Bitwise OR {@link TypeKind#INT int}.\n+     *\n+     * @apiNote\n+     * This may be used to implement {@link TypeKind#BOOLEAN boolean} OR.\n+     *\n+     * @jvms 6.5.ior <em>ior<\/em>\n+     *\/\n@@ -428,1 +987,5 @@\n-    \/** Boolean OR long *\/\n+    \/**\n+     * Bitwise OR {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lor <em>lor<\/em>\n+     *\/\n@@ -431,1 +994,8 @@\n-    \/** Boolean XOR int *\/\n+    \/**\n+     * Bitwise XOR {@link TypeKind#INT int}.\n+     *\n+     * @apiNote\n+     * This may be used to implement {@link TypeKind#BOOLEAN boolean} XOR.\n+     *\n+     * @jvms 6.5.ixor <em>ixor<\/em>\n+     *\/\n@@ -434,1 +1004,5 @@\n-    \/** Boolean XOR long *\/\n+    \/**\n+     * Bitwise XOR {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lxor <em>lxor<\/em>\n+     *\/\n@@ -437,1 +1011,5 @@\n-    \/** Increment local variable by constant *\/\n+    \/**\n+     * Increment local variable by constant.\n+     *\n+     * @jvms 6.5.iinc <em>iinc<\/em>\n+     *\/\n@@ -440,1 +1018,6 @@\n-    \/** Convert int to long *\/\n+    \/**\n+     * Convert {@link TypeKind#INT int} to {@link TypeKind#LONG long}.\n+     *\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     * @jvms 6.5.i2l <em>i2l<\/em>\n+     *\/\n@@ -443,1 +1026,6 @@\n-    \/** Convert int to float *\/\n+    \/**\n+     * Convert {@link TypeKind#INT int} to {@link TypeKind#FLOAT float}.\n+     *\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     * @jvms 6.5.i2f <em>i2f<\/em>\n+     *\/\n@@ -446,1 +1034,6 @@\n-    \/** Convert int to double *\/\n+    \/**\n+     * Convert {@link TypeKind#INT int} to {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     * @jvms 6.5.i2d <em>i2d<\/em>\n+     *\/\n@@ -449,1 +1042,6 @@\n-    \/** Convert long to int *\/\n+    \/**\n+     * Convert {@link TypeKind#LONG long} to {@link TypeKind#INT int}.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.l2i <em>l2i<\/em>\n+     *\/\n@@ -452,1 +1050,5 @@\n-    \/** Convert long to float *\/\n+    \/** Convert {@link TypeKind#LONG long} to {@link TypeKind#FLOAT float}.\n+     *\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     * @jvms 6.5.l2f <em>l2f<\/em>\n+     *\/\n@@ -455,1 +1057,5 @@\n-    \/** Convert long to double *\/\n+    \/** Convert {@link TypeKind#LONG long} to {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     * @jvms 6.5.l2d <em>l2d<\/em>\n+     *\/\n@@ -458,1 +1064,6 @@\n-    \/** Convert float to int *\/\n+    \/**\n+     * Convert {@link TypeKind#FLOAT float} to {@link TypeKind#INT int}.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.f2i <em>f2i<\/em>\n+     *\/\n@@ -461,1 +1072,6 @@\n-    \/** Convert float to long *\/\n+    \/**\n+     * Convert {@link TypeKind#FLOAT float} to {@link TypeKind#LONG long}.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.f2l <em>f2l<\/em>\n+     *\/\n@@ -464,1 +1080,6 @@\n-    \/** Convert float to double *\/\n+    \/**\n+     * Convert {@link TypeKind#FLOAT float} to {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     * @jvms 6.5.f2d <em>f2d<\/em>\n+     *\/\n@@ -467,1 +1088,6 @@\n-    \/** Convert double to int *\/\n+    \/**\n+     * Convert {@link TypeKind#DOUBLE double} to {@link TypeKind#INT int}.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.d2i <em>d2i<\/em>\n+     *\/\n@@ -470,1 +1096,5 @@\n-    \/** Convert double to long *\/\n+    \/**\n+     * Convert {@link TypeKind#DOUBLE double} to {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.d2l <em>d2l<\/em>\n+     *\/\n@@ -473,1 +1103,6 @@\n-    \/** Convert double to float *\/\n+    \/**\n+     * Convert {@link TypeKind#DOUBLE double} to {@link TypeKind#FLOAT float}.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.d2f <em>d2f<\/em>\n+     *\/\n@@ -476,1 +1111,8 @@\n-    \/** Convert int to byte *\/\n+    \/**\n+     * Convert {@link TypeKind#INT int} to {@link TypeKind#BYTE byte}.\n+     * This is as if storing the {@linkplain TypeKind##computational-type\n+     * computational} {@code int} into a {@code byte} and loading it back.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.i2b <em>i2b<\/em>\n+     *\/\n@@ -479,1 +1121,8 @@\n-    \/** Convert int to char *\/\n+    \/**\n+     * Convert {@link TypeKind#INT int} to {@link TypeKind#CHAR char}.\n+     * This is as if storing the {@linkplain TypeKind##computational-type\n+     * computational} {@code int} into a {@code char} and loading it back.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.i2c <em>i2c<\/em>\n+     *\/\n@@ -482,1 +1131,8 @@\n-    \/** Convert int to short *\/\n+    \/**\n+     * Convert {@link TypeKind#INT int} to {@link TypeKind#SHORT short}.\n+     * This is as if storing the {@linkplain TypeKind##computational-type\n+     * computational} {@code int} into a {@code short} and loading it back.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.i2s <em>i2s<\/em>\n+     *\/\n@@ -485,1 +1141,6 @@\n-    \/** Compare long *\/\n+    \/**\n+     * Compare {@link TypeKind#LONG long}.\n+     *\n+     * @see Long#compare(long, long)\n+     * @jvms 6.5.lcmp <em>lcmp<\/em>\n+     *\/\n@@ -488,1 +1149,7 @@\n-    \/** Compare float *\/\n+    \/**\n+     * Compare {@link TypeKind#FLOAT float}.\n+     * Produces {@code -1} if any operand is {@link Float#isNaN(float) NaN}.\n+     *\n+     * @see Double##equivalenceRelation Floating-point Equality, Equivalence, and Comparison\n+     * @jvms 6.5.fcmp_op <em>fcmp&lt;op&gt;<\/em>\n+     *\/\n@@ -491,1 +1158,7 @@\n-    \/** Compare float *\/\n+    \/**\n+     * Compare {@link TypeKind#FLOAT float}.\n+     * Produces {@code 1} if any operand is {@link Float#isNaN(float) NaN}.\n+     *\n+     * @see Double##equivalenceRelation Floating-point Equality, Equivalence, and Comparison\n+     * @jvms 6.5.fcmp_op <em>fcmp&lt;op&gt;<\/em>\n+     *\/\n@@ -494,1 +1167,7 @@\n-    \/** Compare double *\/\n+    \/**\n+     * Compare {@link TypeKind#DOUBLE double}.\n+     * Produces {@code -1} if any operand is {@link Double#isNaN(double) NaN}.\n+     *\n+     * @see Double##equivalenceRelation Floating-point Equality, Equivalence, and Comparison\n+     * @jvms 6.5.dcmp_op <em>dcmp&lt;op&gt;<\/em>\n+     *\/\n@@ -497,1 +1176,7 @@\n-    \/** Compare double *\/\n+    \/**\n+     * Compare {@link TypeKind#DOUBLE double}.\n+     * Produces {@code 1} if any operand is {@link Double#isNaN(double) NaN}.\n+     *\n+     * @see Double##equivalenceRelation Floating-point Equality, Equivalence, and Comparison\n+     * @jvms 6.5.dcmp_op <em>dcmp&lt;op&gt;<\/em>\n+     *\/\n@@ -500,1 +1185,5 @@\n-    \/** Branch if int comparison with zero succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code == 0} succeeds.\n+     *\n+     * @jvms 6.5.if_cond <em>if_&lt;cond&gt;<\/em>\n+     *\/\n@@ -503,1 +1192,5 @@\n-    \/** Branch if int comparison with zero succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code != 0} succeeds.\n+     *\n+     * @jvms 6.5.if_cond <em>if_&lt;cond&gt;<\/em>\n+     *\/\n@@ -506,1 +1199,5 @@\n-    \/** Branch if int comparison with zero succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code < 0} succeeds.\n+     *\n+     * @jvms 6.5.if_cond <em>if_&lt;cond&gt;<\/em>\n+     *\/\n@@ -509,1 +1206,5 @@\n-    \/** Branch if int comparison with zero succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code >= 0} succeeds.\n+     *\n+     * @jvms 6.5.if_cond <em>if_&lt;cond&gt;<\/em>\n+     *\/\n@@ -512,1 +1213,5 @@\n-    \/** Branch if int comparison with zero succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code > 0} succeeds.\n+     *\n+     * @jvms 6.5.if_cond <em>if_&lt;cond&gt;<\/em>\n+     *\/\n@@ -515,1 +1220,5 @@\n-    \/** Branch if int comparison with zero succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code <= 0} succeeds.\n+     *\n+     * @jvms 6.5.if_cond <em>if_&lt;cond&gt;<\/em>\n+     *\/\n@@ -518,1 +1227,5 @@\n-    \/** Branch if int comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code operand1 == operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_icmp_cond <em>if_icmp&lt;cond&gt;<\/em>\n+     *\/\n@@ -521,1 +1234,5 @@\n-    \/** Branch if int comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code operand1 != operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_icmp_cond <em>if_icmp&lt;cond&gt;<\/em>\n+     *\/\n@@ -524,1 +1241,5 @@\n-    \/** Branch if int comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code operand1 < operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_icmp_cond <em>if_icmp&lt;cond&gt;<\/em>\n+     *\/\n@@ -527,1 +1248,5 @@\n-    \/** Branch if int comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code operand1 >= operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_icmp_cond <em>if_icmp&lt;cond&gt;<\/em>\n+     *\/\n@@ -530,1 +1255,5 @@\n-    \/** Branch if int comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code operand1 > operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_icmp_cond <em>if_icmp&lt;cond&gt;<\/em>\n+     *\/\n@@ -533,1 +1262,5 @@\n-    \/** Branch if int comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code operand1 <= operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_icmp_cond <em>if_icmp&lt;cond&gt;<\/em>\n+     *\/\n@@ -536,1 +1269,6 @@\n-    \/** Branch if reference comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#REFERENCE reference} comparison\n+     * {@code operand1 == operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_acmp_cond <em>if_acmp&lt;cond&gt;<\/em>\n+     *\/\n@@ -539,1 +1277,6 @@\n-    \/** Branch if reference comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#REFERENCE reference} comparison\n+     * {@code operand1 != operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_acmp_cond <em>if_acmp&lt;cond&gt;<\/em>\n+     *\/\n@@ -542,1 +1285,5 @@\n-    \/** Branch always *\/\n+    \/**\n+     * Branch always.\n+     *\n+     * @jvms 6.5.goto <em>goto<\/em>\n+     *\/\n@@ -546,2 +1293,6 @@\n-     * Jump subroutine is discontinued opcode\n-     * @see java.lang.classfile.instruction.DiscontinuedInstruction\n+     * Jump subroutine (discontinued); last used in major version {@value\n+     * ClassFile#JAVA_6_VERSION}.\n+     *\n+     * @see DiscontinuedInstruction.JsrInstruction\n+     * @jvms 4.9.1 Static Constraints\n+     * @jvms 6.5.jsr <em>jsr<\/em>\n@@ -552,2 +1303,6 @@\n-     * Return from subroutine is discontinued opcode\n-     * @see java.lang.classfile.instruction.DiscontinuedInstruction\n+     * Return from subroutine (discontinued); last used in major version\n+     * {@value ClassFile#JAVA_6_VERSION}.\n+     *\n+     * @see DiscontinuedInstruction.RetInstruction\n+     * @jvms 4.9.1 Static Constraints\n+     * @jvms 6.5.ret <em>ret<\/em>\n@@ -557,1 +1312,5 @@\n-    \/** Access jump table by index and jump *\/\n+    \/**\n+     * Access jump table by index and jump.\n+     *\n+     * @jvms 6.5.tableswitch <em>tableswitch<\/em>\n+     *\/\n@@ -560,1 +1319,5 @@\n-    \/** Access jump table by key match and jump *\/\n+    \/**\n+     * Access jump table by key match and jump.\n+     *\n+     * @jvms 6.5.lookupswitch <em>lookupswitch<\/em>\n+     *\/\n@@ -563,1 +1326,5 @@\n-    \/** Return int from method *\/\n+    \/**\n+     * Return {@link TypeKind#INT int} from method.\n+     *\n+     * @jvms 6.5.ireturn <em>ireturn<\/em>\n+     *\/\n@@ -566,1 +1333,5 @@\n-    \/** Return long from method *\/\n+    \/**\n+     * Return {@link TypeKind#LONG long} from method.\n+     *\n+     * @jvms 6.5.lreturn <em>lreturn<\/em>\n+     *\/\n@@ -569,1 +1340,5 @@\n-    \/** Return float from method *\/\n+    \/**\n+     * Return {@link TypeKind#FLOAT float} from method.\n+     *\n+     * @jvms 6.5.freturn <em>freturn<\/em>\n+     *\/\n@@ -572,1 +1347,5 @@\n-    \/** Return double from method *\/\n+    \/**\n+     * Return {@link TypeKind#DOUBLE double} from method.\n+     *\n+     * @jvms 6.5.dreturn <em>dreturn<\/em>\n+     *\/\n@@ -575,1 +1354,5 @@\n-    \/** Return reference from method *\/\n+    \/**\n+     * Return {@link TypeKind#REFERENCE reference} from method.\n+     *\n+     * @jvms 6.5.areturn <em>areturn<\/em>\n+     *\/\n@@ -578,1 +1361,5 @@\n-    \/** Return void from method *\/\n+    \/**\n+     * Return {@link TypeKind#VOID void} from method.\n+     *\n+     * @jvms 6.5.return <em>return<\/em>\n+     *\/\n@@ -581,1 +1368,5 @@\n-    \/** Get static field from class *\/\n+    \/**\n+     * Get {@code static} field from class.\n+     *\n+     * @jvms 6.5.getstatic <em>getstatic<\/em>\n+     *\/\n@@ -584,1 +1375,5 @@\n-    \/** Set static field in class *\/\n+    \/**\n+     * Set {@code static} field in class.\n+     *\n+     * @jvms 6.5.putstatic <em>putstatic<\/em>\n+     *\/\n@@ -587,1 +1382,5 @@\n-    \/** Fetch field from object *\/\n+    \/**\n+     * Fetch field from object.\n+     *\n+     * @jvms 6.5.getfield <em>getfield<\/em>\n+     *\/\n@@ -590,1 +1389,5 @@\n-    \/** Set field in object *\/\n+    \/**\n+     * Set field in object.\n+     *\n+     * @jvms 6.5.putfield <em>putfield<\/em>\n+     *\/\n@@ -593,1 +1396,5 @@\n-    \/** Invoke instance method; dispatch based on class *\/\n+    \/**\n+     * Invoke instance method; dispatch based on class.\n+     *\n+     * @jvms 6.5.invokevirtual <em>invokevirtual<\/em>\n+     *\/\n@@ -598,1 +1405,3 @@\n-     * methods and methods of the current class and its supertypes\n+     * methods and methods of the current class and its supertypes.\n+     *\n+     * @jvms 6.5.invokevirtual <em>invokevirtual<\/em>\n@@ -602,1 +1411,5 @@\n-    \/** Invoke a class (static) method *\/\n+    \/**\n+     * Invoke a class ({@code static}) method.\n+     *\n+     * @jvms 6.5.invokestatic <em>invokestatic<\/em>\n+     *\/\n@@ -605,1 +1418,5 @@\n-    \/** Invoke interface method *\/\n+    \/**\n+     * Invoke interface method.\n+     *\n+     * @jvms 6.5.invokeinterface <em>invokeinterface<\/em>\n+     *\/\n@@ -608,1 +1425,5 @@\n-    \/** Invoke a dynamically-computed call site *\/\n+    \/**\n+     * Invoke a dynamically-computed call site.\n+     *\n+     * @jvms 6.5.invokedynamic <em>invokedynamic<\/em>\n+     *\/\n@@ -611,1 +1432,5 @@\n-    \/** Create new object *\/\n+    \/**\n+     * Create new object.\n+     *\n+     * @jvms 6.5.new <em>new<\/em>\n+     *\/\n@@ -614,1 +1439,5 @@\n-    \/** Create new array *\/\n+    \/**\n+     * Create new array.\n+     *\n+     * @jvms 6.5.newarray <em>newarray<\/em>\n+     *\/\n@@ -617,1 +1446,4 @@\n-    \/** Create new array of reference *\/\n+    \/** Create new array of {@link TypeKind#REFERENCE reference}.\n+     *\n+     * @jvms 6.5.anewarray <em>anewarray<\/em>\n+     *\/\n@@ -620,1 +1452,5 @@\n-    \/** Get length of array *\/\n+    \/**\n+     * Get length of array.\n+     *\n+     * @jvms 6.5.arraylength <em>arraylength<\/em>\n+     *\/\n@@ -623,1 +1459,5 @@\n-    \/** Throw exception or error *\/\n+    \/**\n+     * Throw exception or error.\n+     *\n+     * @jvms 6.5.athrow <em>athrow<\/em>\n+     *\/\n@@ -626,1 +1466,6 @@\n-    \/** Check whether object is of given type *\/\n+    \/**\n+     * Check whether object is of given type.\n+     *\n+     * @see Class#cast(Object)\n+     * @jvms 6.5.checkcast <em>checkcast<\/em>\n+     *\/\n@@ -629,1 +1474,6 @@\n-    \/** Determine if object is of given type *\/\n+    \/**\n+     * Determine if object is of given type.\n+     *\n+     * @see Class#isInstance(Object)\n+     * @jvms 6.5.instanceof <em>instanceof<\/em>\n+     *\/\n@@ -632,1 +1482,5 @@\n-    \/** Enter monitor for object *\/\n+    \/**\n+     * Enter monitor for object.\n+     *\n+     * @jvms 6.5.monitorenter <em>monitorenter<\/em>\n+     *\/\n@@ -635,1 +1489,5 @@\n-    \/** Exit monitor for object *\/\n+    \/**\n+     * Exit monitor for object.\n+     *\n+     * @jvms 6.5.monitorexit <em>monitorexit<\/em>\n+     *\/\n@@ -638,1 +1496,5 @@\n-    \/** Create new multidimensional array *\/\n+    \/**\n+     * Create new multidimensional array.\n+     *\n+     * @jvms 6.5.multianewarray <em>multianewarray<\/em>\n+     *\/\n@@ -641,1 +1503,5 @@\n-    \/** Branch if reference is null *\/\n+    \/**\n+     * Branch if {@link TypeKind#REFERENCE reference} is {@code null}.\n+     *\n+     * @jvms 6.5.ifnull <em>ifnull<\/em>\n+     *\/\n@@ -644,1 +1510,5 @@\n-    \/** Branch if reference not null *\/\n+    \/**\n+     * Branch if {@link TypeKind#REFERENCE reference} is not {@code null}.\n+     *\n+     * @jvms 6.5.ifnonnull <em>ifnonnull<\/em>\n+     *\/\n@@ -647,1 +1517,5 @@\n-    \/** Branch always (wide index) *\/\n+    \/**\n+     * Branch always (wide index).\n+     *\n+     * @jvms 6.5.goto_w <em>goto_w<\/em>\n+     *\/\n@@ -651,2 +1525,6 @@\n-     * Jump subroutine (wide index) is discontinued opcode\n-     * @see java.lang.classfile.instruction.DiscontinuedInstruction\n+     * Jump subroutine (wide index) (discontinued); last used in major\n+     * version {@value ClassFile#JAVA_6_VERSION}.\n+     *\n+     * @see DiscontinuedInstruction.JsrInstruction\n+     * @jvms 4.9.1 Static Constraints\n+     * @jvms 6.5.jsr_w <em>jsr_w<\/em>\n@@ -656,1 +1534,7 @@\n-    \/** Load int from local variable (wide index) *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.iload <em>iload<\/em>\n+     *\/\n@@ -659,1 +1543,7 @@\n-    \/** Load long from local variable (wide index) *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.lload <em>lload<\/em>\n+     *\/\n@@ -662,1 +1552,7 @@\n-    \/** Load float from local variable (wide index) *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.fload <em>fload<\/em>\n+     *\/\n@@ -665,1 +1561,7 @@\n-    \/** Load double from local variable (wide index) *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.dload <em>dload<\/em>\n+     *\/\n@@ -668,1 +1570,7 @@\n-    \/** Load reference from local variable (wide index) *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.aload <em>aload<\/em>\n+     *\/\n@@ -671,1 +1579,7 @@\n-    \/** Store int into local variable (wide index) *\/\n+    \/**\n+     * Store {@link TypeKind#INT int} into local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.istore <em>istore<\/em>\n+     *\/\n@@ -674,1 +1588,7 @@\n-    \/** Store long into local variable (wide index) *\/\n+    \/**\n+     * Store {@link TypeKind#LONG long} into local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.lstore <em>lstore<\/em>\n+     *\/\n@@ -677,1 +1597,7 @@\n-    \/** Store float into local variable (wide index) *\/\n+    \/**\n+     * Store {@link TypeKind#FLOAT float} into local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.fstore <em>fstore<\/em>\n+     *\/\n@@ -680,1 +1606,7 @@\n-    \/** Store double into local variable (wide index) *\/\n+    \/**\n+     * Store {@link TypeKind#DOUBLE double} into local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.dstore <em>dstore<\/em>\n+     *\/\n@@ -683,1 +1615,8 @@\n-    \/** Store reference into local variable (wide index) *\/\n+    \/**\n+     * Store {@link TypeKind#REFERENCE reference} into local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     * Can also store the {@code returnAddress} type.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.astore <em>astore<\/em>\n+     *\/\n@@ -687,2 +1626,7 @@\n-     * Return from subroutine (wide index) is discontinued opcode\n-     * @see java.lang.classfile.instruction.DiscontinuedInstruction\n+     * Return from subroutine (wide index) (discontinued); last used in major\n+     * version {@value ClassFile#JAVA_6_VERSION}.\n+     *\n+     * @see DiscontinuedInstruction.RetInstruction\n+     * @jvms 4.9.1 Static Constraints\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.ret <em>ret<\/em>\n@@ -692,1 +1636,6 @@\n-    \/** Increment local variable by constant (wide index) *\/\n+    \/**\n+     * Increment local variable by constant (wide index).\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.iinc <em>iinc<\/em>\n+     *\/\n@@ -700,1 +1649,1 @@\n-    public static enum Kind {\n+    public enum Kind {\n@@ -703,1 +1652,1 @@\n-         * Load from local variable\n+         * Load from local variable.\n@@ -705,0 +1654,1 @@\n+         * @see LoadInstruction\n@@ -739,1 +1689,1 @@\n-         * Store into local variable\n+         * Store into local variable.\n@@ -741,0 +1691,1 @@\n+         * @see StoreInstruction\n@@ -775,1 +1726,1 @@\n-         * Increment local variable\n+         * Increment local variable.\n@@ -777,0 +1728,1 @@\n+         * @see IncrementInstruction\n@@ -783,1 +1735,1 @@\n-         * Branch\n+         * Branch.\n@@ -785,0 +1737,1 @@\n+         * @see BranchInstruction\n@@ -807,1 +1760,1 @@\n-         * Access jump table by key match and jump\n+         * Access jump table by key match and jump.\n@@ -809,0 +1762,1 @@\n+         * @see LookupSwitchInstruction\n@@ -814,1 +1768,1 @@\n-         * Access jump table by index and jump\n+         * Access jump table by index and jump.\n@@ -816,0 +1770,1 @@\n+         * @see TableSwitchInstruction\n@@ -821,1 +1776,1 @@\n-         * Return from method\n+         * Return from method.\n@@ -823,0 +1778,1 @@\n+         * @see ReturnInstruction\n@@ -833,1 +1789,1 @@\n-         * Throw exception or error\n+         * Throw exception or error.\n@@ -835,0 +1791,1 @@\n+         * @see ThrowInstruction\n@@ -840,1 +1797,1 @@\n-         * Access field\n+         * Access field.\n@@ -842,0 +1799,1 @@\n+         * @see FieldInstruction\n@@ -850,1 +1808,1 @@\n-         * Invoke method or constructor\n+         * Invoke method or constructor.\n@@ -852,0 +1810,1 @@\n+         * @see InvokeInstruction\n@@ -860,1 +1819,1 @@\n-         * Invoke a dynamically-computed call site\n+         * Invoke a dynamically-computed call site.\n@@ -862,0 +1821,1 @@\n+         * @see InvokeDynamicInstruction\n@@ -867,1 +1827,1 @@\n-         * Create new object\n+         * Create new object.\n@@ -869,0 +1829,1 @@\n+         * @see NewObjectInstruction\n@@ -874,1 +1835,1 @@\n-         * Create new array\n+         * Create new array.\n@@ -876,0 +1837,1 @@\n+         * @see NewPrimitiveArrayInstruction\n@@ -881,1 +1843,1 @@\n-         * Create new reference array\n+         * Create new {@link TypeKind#REFERENCE reference} array.\n@@ -883,0 +1845,1 @@\n+         * @see NewReferenceArrayInstruction\n@@ -888,1 +1851,1 @@\n-         * Create new multidimensional array\n+         * Create new multidimensional array.\n@@ -890,0 +1853,1 @@\n+         * @see NewMultiArrayInstruction\n@@ -895,1 +1859,1 @@\n-         * Check whether object is of given type\n+         * Check whether object is of given type.\n@@ -897,0 +1861,1 @@\n+         * @see TypeCheckInstruction\n@@ -903,1 +1868,1 @@\n-         * Load from array\n+         * Load from array.\n@@ -905,0 +1870,1 @@\n+         * @see ArrayLoadInstruction\n@@ -917,1 +1883,1 @@\n-         * Store into array\n+         * Store into array.\n@@ -919,0 +1885,1 @@\n+         * @see ArrayStoreInstruction\n@@ -931,1 +1898,1 @@\n-         * Stack operations\n+         * Stack operations.\n@@ -933,0 +1900,1 @@\n+         * @see StackInstruction\n@@ -946,1 +1914,1 @@\n-         * Type conversions\n+         * Type conversions.\n@@ -948,0 +1916,1 @@\n+         * @see ConvertInstruction\n@@ -967,1 +1936,1 @@\n-         * Operators\n+         * Operators.\n@@ -969,0 +1938,1 @@\n+         * @see OperatorInstruction\n@@ -1015,1 +1985,1 @@\n-         * Constants\n+         * Constants.\n@@ -1017,0 +1987,1 @@\n+         * @see ConstantInstruction\n@@ -1041,1 +2012,1 @@\n-         * Monitor\n+         * Monitor.\n@@ -1043,0 +2014,1 @@\n+         * @see MonitorInstruction\n@@ -1049,1 +2021,1 @@\n-         * Do nothing\n+         * Do nothing.\n@@ -1051,0 +2023,1 @@\n+         * @see NopInstruction\n@@ -1056,1 +2029,1 @@\n-         * Discontinued jump subroutine\n+         * Discontinued jump subroutine.\n@@ -1058,0 +2031,1 @@\n+         * @see DiscontinuedInstruction.JsrInstruction\n@@ -1060,1 +2034,0 @@\n-         * @see java.lang.classfile.instruction.DiscontinuedInstruction\n@@ -1065,1 +2038,1 @@\n-         * Discontinued return from subroutine\n+         * Discontinued return from subroutine.\n@@ -1067,0 +2040,1 @@\n+         * @see DiscontinuedInstruction.RetInstruction\n@@ -1069,1 +2043,0 @@\n-         * @see java.lang.classfile.instruction.DiscontinuedInstruction\n@@ -1093,0 +2066,2 @@\n+     * <p>\n+     * {@code wide} extends local variable index by additional bytes.\n@@ -1094,0 +2069,1 @@\n+     * @jvms 6.5.wide <em>wide<\/em>\n@@ -1112,0 +2088,2 @@\n+     *\n+     * @see Instruction#sizeInBytes() Instruction::sizeInBytes\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Opcode.java","additions":1227,"deletions":249,"binary":false,"changes":1476,"status":"modified"},{"patch":"@@ -167,1 +167,1 @@\n-     * @jvms 6.5.newarray <i>newarray<\/i>\n+     * @jvms 6.5.newarray <em>newarray<\/em>\n@@ -198,1 +198,1 @@\n-     * @jvms 6.5.newarray <i>newarray<\/i>\n+     * @jvms 6.5.newarray <em>newarray<\/em>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/TypeKind.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n- * attribute.  Corresponding opcodes will have a {@code kind} of {@link\n- * Opcode.Kind#ARRAY_LOAD}.  Delivered as a {@link CodeElement} when\n+ * attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind}\n+ * of {@link Opcode.Kind#ARRAY_LOAD}.  Delivered as a {@link CodeElement} when\n@@ -59,1 +59,1 @@\n-     *         {@link Opcode.Kind#ARRAY_LOAD}.\n+     *         {@link Opcode.Kind#ARRAY_LOAD}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ArrayLoadInstruction.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n- * attribute.  Corresponding opcodes will have a {@code kind} of {@link\n- * Opcode.Kind#ARRAY_STORE}.  Delivered as a {@link CodeElement} when\n+ * attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind}\n+ * of {@link Opcode.Kind#ARRAY_STORE}.  Delivered as a {@link CodeElement} when\n@@ -59,1 +59,1 @@\n-     *         {@link Opcode.Kind#ARRAY_STORE}.\n+     *         {@link Opcode.Kind#ARRAY_STORE}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ArrayStoreInstruction.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeBuilder;\n@@ -38,3 +40,7 @@\n- * code} array of a {@code Code} attribute.  Corresponding opcodes will have a\n- * {@code kind} of {@link Opcode.Kind#BRANCH}.  Delivered as a {@link\n- * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * code} array of a {@code Code} attribute.  Corresponding opcodes have a\n+ * {@linkplain Opcode#kind() kind} of {@link Opcode.Kind#BRANCH}.  Delivered as\n+ * a {@link CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * <p>\n+ * A branch instruction may be rewritten in a {@link CodeBuilder} if the {@link\n+ * #target() target} cannot be encoded and the {@link ClassFile.ShortJumpsOption#FIX_SHORT_JUMPS\n+ * FIX_SHORT_JUMPS} option is set.\n@@ -59,1 +65,1 @@\n-     *         {@link Opcode.Kind#BRANCH}.\n+     *         {@link Opcode.Kind#BRANCH}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/BranchInstruction.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -41,5 +41,6 @@\n- * Code} attribute, including \"intrinsic constant\" instructions (e.g., {@code\n- * iconst_0}), \"argument constant\" instructions (e.g., {@code bipush}), and \"load\n- * constant\" instructions (e.g., {@code LDC}).  Corresponding opcodes will have\n- * a {@code kind} of {@link Opcode.Kind#CONSTANT}.  Delivered as a {@link\n- * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * Code} attribute, including {@linkplain IntrinsicConstantInstruction\n+ * \"intrinsic\"}, {@linkplain ArgumentConstantInstruction \"argument\"}, and\n+ * {@linkplain LoadConstantInstruction \"load\"} constant instructions.\n+ * Corresponding opcodes have a {@linkplain Opcode#kind() kind} of {@link\n+ * Opcode.Kind#CONSTANT}.  Delivered as a {@link CodeElement} when traversing\n+ * the elements of a {@link CodeModel}.\n@@ -47,0 +48,1 @@\n+ * @sealedGraph\n@@ -57,1 +59,1 @@\n-     * {@return the type of the constant}\n+     * {@return the {@linkplain TypeKind##computational-type computational type} of the constant}\n@@ -62,2 +64,4 @@\n-     * Models an \"intrinsic constant\" instruction (e.g., {@code\n-     * iconst_0}).\n+     * Models an \"intrinsic constant\" instruction, which encodes\n+     * the constant value in its opcode. Examples include {@link\n+     * Opcode#ACONST_NULL aconst_null} and {@link\n+     * Opcode#ICONST_0 iconst_0}.\n@@ -70,3 +74,0 @@\n-        \/**\n-         * {@return the type of the constant}\n-         *\/\n@@ -80,2 +81,3 @@\n-     * Models an \"argument constant\" instruction (e.g., {@code\n-     * bipush}).\n+     * Models an \"argument constant\" instruction, which encodes the\n+     * constant value in the instruction directly. Includes {@link\n+     * Opcode#BIPUSH bipush} and {@link Opcode#SIPUSH sipush} instructions.\n@@ -92,3 +94,0 @@\n-        \/**\n-         * {@return the type of the constant}\n-         *\/\n@@ -102,2 +101,4 @@\n-     * Models a \"load constant\" instruction (e.g., {@code\n-     * ldc}).\n+     * Models a \"load constant\" instruction, which encodes the\n+     * constant value in the constant pool. Includes {@link\n+     * Opcode#LDC ldc} and {@link Opcode#LDC_W ldc_w}, and\n+     * {@link Opcode#LDC2_W ldc2_w} instructions.\n@@ -116,3 +117,0 @@\n-        \/**\n-         * {@return the type of the constant}\n-         *\/\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ConstantInstruction.java","additions":19,"deletions":21,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -39,3 +39,3 @@\n- * {@code Code} attribute, such as {@code i2l}.  Corresponding opcodes will have\n- * a {@code kind} of {@link Opcode.Kind#CONVERT}.  Delivered as a {@link\n- * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * {@code Code} attribute, such as {@link Opcode#I2L i2l}.  Corresponding opcodes\n+ * have a {@linkplain Opcode#kind() kind} of {@link Opcode.Kind#CONVERT}.\n+ * Delivered as a {@link CodeElement} when traversing the elements of a {@link CodeModel}.\n@@ -58,1 +58,9 @@\n-     * {@return A conversion instruction}\n+     * {@return a conversion instruction} The valid conversions are:\n+     * <ul>\n+     * <li>{@code fromType} and {@code toType} are both one of {@link TypeKind#INT\n+     * int}, {@link TypeKind#LONG long}, {@link TypeKind#FLOAT float}, {@link\n+     * TypeKind#DOUBLE double}, and {@code fromType} is different than {@code toType};\n+     * <li>{@code fromType} is {@code int}, and {@code toType} is one of\n+     * {@link TypeKind#BYTE byte}, {@link TypeKind#SHORT short}, or {@link\n+     * TypeKind#CHAR char}.\n+     * <\/ul>\n@@ -62,0 +70,2 @@\n+     * @throws IllegalArgumentException if there is no single instruction\n+     *         converting {@code from} to {@code to}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ConvertInstruction.java","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeBuilder;\n@@ -42,0 +44,3 @@\n+ * @jvms 4.9.1 Static Constraints\n+ *\n+ * @sealedGraph\n@@ -47,3 +52,4 @@\n-     * Models JSR and JSR_W instructions discontinued from the {@code code}\n-     * array of a {@code Code} attribute since class file version 51.0.\n-     * Corresponding opcodes will have a {@code kind} of\n+     * Models {@link Opcode#JSR jsr} and {@link Opcode#JSR_W jsr_w} instructions\n+     * discontinued from the {@code code} array of a {@code Code} attribute since\n+     * class file major version {@value ClassFile#JAVA_7_VERSION} (JVMS {@jvms 4.9.1}).\n+     * Corresponding opcodes have a {@linkplain Opcode#kind() kind} of\n@@ -52,0 +58,4 @@\n+     * <p>\n+     * A {@code jsr} instruction may be rewritten in a {@link CodeBuilder} if the {@link #target()\n+     * target} cannot be encoded and the {@link ClassFile.ShortJumpsOption#FIX_SHORT_JUMPS\n+     * FIX_SHORT_JUMPS} option is set.\n@@ -67,0 +77,4 @@\n+         * @apiNote\n+         * The explicit {@code op} argument allows creating {@code jsr_w}\n+         * instructions to avoid {@code target} overflow.\n+         *\n@@ -89,3 +103,4 @@\n-     * Models RET and RET_W instructions discontinued from the {@code code}\n-     * array of a {@code Code} attribute since class file version 51.0.\n-     * Corresponding opcodes will have a {@code kind} of\n+     * Models {@link Opcode#RET ret} and {@link Opcode#RET_W wide ret} instructions\n+     * discontinued from the {@code code} array of a {@code Code} attribute since\n+     * class file major version {@value ClassFile#JAVA_7_VERSION} (JVMS {@jvms 4.9.1}).\n+     * Corresponding opcodes have a {@linkplain Opcode#kind() kind} of\n@@ -107,1 +122,6 @@\n-         * {@return a RET or RET_W instruction}\n+         * {@return a RET instruction}\n+         *\n+         * @apiNote\n+         * The explicit {@code op} argument allows creating {@code wide ret}\n+         * instructions with {@code slot} in the range of regular {@code ret}\n+         * instructions.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/DiscontinuedInstruction.java","additions":27,"deletions":7,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -43,2 +43,2 @@\n- * attribute.  Corresponding opcodes will have a {@code kind} of {@link\n- * Opcode.Kind#FIELD_ACCESS}.  Delivered as a {@link CodeElement} when\n+ * attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind}\n+ * of {@link Opcode.Kind#FIELD_ACCESS}.  Delivered as a {@link CodeElement} when\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/FieldInstruction.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n- * {@link Opcode.Kind#INCREMENT}.  Delivered as a {@link CodeElement} when\n+ * {@code Code} attribute.  Corresponding opcodes have a {@linkplain Opcode#kind()\n+ * kind} of {@link Opcode.Kind#INCREMENT}.  Delivered as a {@link CodeElement} when\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/IncrementInstruction.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.classfile.Opcode;\n@@ -43,3 +44,3 @@\n- * Models an {@code invokedynamic} instruction in the {@code code} array of a\n- * {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n- * the elements of a {@link CodeModel}.\n+ * Models an {@link Opcode#INVOKEDYNAMIC invokedynamic} instruction in the {@code\n+ * code} array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n+ * when traversing the elements of a {@link CodeModel}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/InvokeDynamicInstruction.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -45,3 +45,3 @@\n- * Code} attribute, other than {@code invokedynamic}.  Corresponding opcodes\n- * will have a {@code kind} of {@link Opcode.Kind#INVOKE}.  Delivered as a\n- * {@link CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * Code} attribute, other than {@link InvokeDynamicInstruction invokedynamic}.\n+ * Corresponding opcodes have a {@linkplain Opcode#kind() kind} of {@link Opcode.Kind#INVOKE}.\n+ * Delivered as a {@link CodeElement} when traversing the elements of a {@link CodeModel}.\n@@ -65,1 +65,1 @@\n-     * {@return the {@code count} value of an {@code invokeinterface} instruction, as defined in JVMS {@jvms 6.5}\n+     * {@return the {@code count} value of an {@link Opcode#INVOKEINTERFACE invokeinterface} instruction,\n@@ -67,0 +67,2 @@\n+     *\n+     * @jvms 6.5.invokeinterface <em>invokeinterface<\/em>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/InvokeInstruction.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -39,3 +39,3 @@\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n- * {@link Opcode.Kind#LOAD}.  Delivered as a {@link CodeElement} when\n- * traversing the elements of a {@link CodeModel}.\n+ * {@code Code} attribute.  Corresponding opcodes have a {@linkplain\n+ * Opcode#kind() kind} of {@link Opcode.Kind#LOAD}.  Delivered as a {@link\n+ * CodeElement} when traversing the elements of a {@link CodeModel}.\n@@ -55,1 +55,2 @@\n-     * {@return the type of the value to be loaded}\n+     * {@return the {@linkplain TypeKind##computational-type computational type}\n+     * of the value to be loaded}\n@@ -75,0 +76,5 @@\n+     * @apiNote\n+     * The explicit {@code op} argument allows creating {@code wide} or\n+     * regular load instructions when the {@code slot} can be encoded\n+     * with more optimized load instructions.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LoadInstruction.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.classfile.Opcode;\n@@ -36,3 +37,3 @@\n- * Models a {@code lookupswitch} instruction in the {@code code} array of a\n- * {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n- * the elements of a {@link CodeModel}.\n+ * Models a {@link Opcode#LOOKUPSWITCH lookupswitch} instruction in the {@code\n+ * code} array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n+ * when traversing the elements of a {@link CodeModel}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LookupSwitchInstruction.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,3 +36,5 @@\n- * Models a {@code monitorenter} or {@code monitorexit} instruction in the\n- * {@code code} array of a {@code Code} attribute.  Delivered as a {@link\n- * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * Models a {@link Opcode#MONITORENTER monitorenter} or {@link Opcode#MONITOREXIT\n+ * monitorexit} instruction in the {@code code} array of a {@code Code} attribute.\n+ * Corresponding opcodes have a {@linkplain Opcode#kind() kind} of {@link\n+ * Opcode.Kind#MONITOR}.  Delivered as a {@link CodeElement} when traversing the\n+ * elements of a {@link CodeModel}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/MonitorInstruction.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.classfile.Opcode;\n@@ -36,1 +37,1 @@\n- * Models a {@code multianewarray} invocation instruction in the {@code code}\n+ * Models a {@link Opcode#MULTIANEWARRAY multianewarray} instruction in the {@code code}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NewMultiArrayInstruction.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.classfile.Opcode;\n@@ -35,1 +36,1 @@\n- * Models a {@code new} instruction in the {@code code} array of a {@code Code}\n+ * Models a {@link Opcode#NEW new} instruction in the {@code code} array of a {@code Code}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NewObjectInstruction.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.classfile.Opcode;\n@@ -35,1 +36,1 @@\n- * Models a {@code newarray} invocation instruction in the {@code code}\n+ * Models a {@link Opcode#NEWARRAY newarray} instruction in the {@code code}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NewPrimitiveArrayInstruction.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.classfile.Opcode;\n@@ -35,1 +36,1 @@\n- * Models a {@code anewarray} invocation instruction in the {@code code}\n+ * Models a {@link Opcode#ANEWARRAY anewarray} instruction in the {@code code}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NewReferenceArrayInstruction.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.classfile.Opcode;\n@@ -34,1 +35,1 @@\n- * Models a {@code nop} invocation instruction in the {@code code}\n+ * Models a {@link Opcode#NOP nop} instruction in the {@code code}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NopInstruction.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@code Code} attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind} of\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/OperatorInstruction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@code Code} attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind} of\n@@ -49,1 +49,2 @@\n-     * {@return the type of the return instruction}\n+     * {@return the {@linkplain TypeKind##computational-type computational type}, including\n+     * {@link TypeKind#VOID void}, of the return instruction}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ReturnInstruction.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@code Code} attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind} of\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/StackInstruction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@code Code} attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind} of\n@@ -54,1 +54,4 @@\n-     * {@return the type of the value to be stored}\n+     * {@return the {@linkplain TypeKind##computational-type computational type}\n+     * of the value to be stored} The {@link TypeKind#REFERENCE reference}\n+     * type store instructions also operate on the {@code returnAddress} type,\n+     * which does not apply to {@code reference} type load instructions.\n@@ -74,0 +77,5 @@\n+     * @apiNote\n+     * The explicit {@code op} argument allows creating {@code wide} or\n+     * regular store instructions when the {@code slot} can be encoded\n+     * with more optimized store instructions.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/StoreInstruction.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.classfile.Opcode;\n@@ -36,1 +37,1 @@\n- * Models a {@code tableswitch} instruction in the {@code code} array of a\n+ * Models a {@link Opcode#TABLESWITCH tableswitch} instruction in the {@code code} array of a\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/TableSwitchInstruction.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.classfile.Opcode;\n@@ -34,1 +35,1 @@\n- * Models an {@code athrow} instruction in the {@code code} array of a\n+ * Models an {@link Opcode#ATHROW athrow} instruction in the {@code code} array of a\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ThrowInstruction.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,3 +39,4 @@\n- * Models an {@code instanceof} or {@code checkcast} instruction in the {@code\n- * code} array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n- * when traversing the elements of a {@link CodeModel}.\n+ * Models an {@link Opcode#INSTANCEOF instanceof} or a {@link Opcode#CHECKCAST checkcast}\n+ * instruction in the {@code code} array of a {@code Code} attribute.  Corresponding\n+ * opcodes have a {@linkplain Opcode#kind() kind} of {@link Opcode.Kind#TYPE_CHECK}.\n+ * Delivered as a {@link CodeElement} when traversing the elements of a {@link CodeModel}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/TypeCheckInstruction.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,1 +29,7 @@\n- * The {@code java.lang.classfile.attribute} package contains interfaces describing code instructions.\n+ * The {@code java.lang.classfile.instruction} package contains interfaces describing code instructions.\n+ * <p>\n+ * Unless otherwise noted, passing a {@code null} argument to a constructor\n+ * or method of any Class-File API class or interface will cause a {@link\n+ * java.lang.NullPointerException NullPointerException} to be thrown. Additionally,\n+ * invoking a method with an array or collection containing a {@code null} element\n+ * will cause a {@code NullPointerException}, unless otherwise specified. <\/p>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/package-info.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}