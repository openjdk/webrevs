{"files":[{"patch":"@@ -208,1 +208,1 @@\n-        lintOptions = !options.isExplicitlyDisabled(Option.XLINT, LintCategory.OPTIONS);\n+        lintOptions = !options.isDisabled(Option.XLINT, LintCategory.OPTIONS);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Modules.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-                    boolean lintPaths = !options.isExplicitlyDisabled(Option.XLINT, LintCategory.PATH);\n+                    boolean lintPaths = !options.isDisabled(Option.XLINT, LintCategory.PATH);\n@@ -579,1 +579,1 @@\n-        boolean lintOptions = !options.isExplicitlyDisabled(Option.XLINT, LintCategory.OPTIONS);\n+        boolean lintOptions = !options.isDisabled(Option.XLINT, LintCategory.OPTIONS);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/Arguments.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -174,0 +174,31 @@\n+    \/**\n+     * Determine if a specific {@link LintCategory} is enabled via a custom\n+     * option flag of the form {@code -Flag}, {@code -Flag:all}, or {@code -Flag:key}.\n+     *\n+     * <p>\n+     * Note: It's possible the category was also disabled; this method does not check that.\n+     *\n+     * @param option the plain (non-custom) version of the option (e.g., {@link Option#XLINT})\n+     * @param lc the {@link LintCategory} in question\n+     * @return true if {@code lc} has been enabled\n+     *\/\n+    public boolean isEnabled(Option option, LintCategory lc) {\n+        Option custom = option.getCustom();\n+        return isExplicitlyEnabled(option, lc) || isSet(custom) || isSet(custom, Option.LINT_CUSTOM_ALL);\n+    }\n+\n+    \/**\n+     * Determine if a specific {@link LintCategory} is disabled via a custom\n+     * option flag of the form {@code -Flag:none} or {@code -Flag:-key}.\n+     *\n+     * <p>\n+     * Note: It's possible the category was also enabled; this method does not check that.\n+     *\n+     * @param option the plain (non-custom) version of the option (e.g., {@link Option#XLINT})\n+     * @param lc the {@link LintCategory} in question\n+     * @return true if {@code lc} has been disabled\n+     *\/\n+    public boolean isDisabled(Option option, LintCategory lc) {\n+        return isExplicitlyDisabled(option, lc) || isSet(option.getCustom(), Option.LINT_CUSTOM_NONE);\n+    }\n+\n@@ -179,1 +210,4 @@\n-     * Note: It's possible the category was also explicitly disabled; this method does not check that.\n+     * Note: This does not check for option flags of the form {@code -Flag} or {@code -Flag:all}.\n+     *\n+     * <p>\n+     * Note: It's possible the category was also disabled; this method does not check that.\n@@ -195,1 +229,4 @@\n-     * Note: It's possible the category was also explicitly enabled; this method does not check that.\n+     * Note: This does not check for an option flag of the form {@code -Flag:none}.\n+     *\n+     * <p>\n+     * Note: It's possible the category was also enabled; this method does not check that.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Options.java","additions":39,"deletions":2,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+ * @compile                          -Werror -XDrawDiagnostics -source 21 -target 21                -Xlint:none     LintOptions.java\n+ * @compile                          -Werror -XDrawDiagnostics -source 21 -target 21 -Xlint:options -Xlint:none     LintOptions.java\n","filename":"test\/langtools\/tools\/javac\/lint\/LintOptions.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}