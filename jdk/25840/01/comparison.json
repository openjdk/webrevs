{"files":[{"patch":"@@ -208,1 +208,1 @@\n-        lintOptions = !options.isExplicitlyDisabled(Option.XLINT, LintCategory.OPTIONS);\n+        lintOptions = !options.isDisabled(Option.XLINT, LintCategory.OPTIONS);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Modules.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-                    boolean lintPaths = !options.isExplicitlyDisabled(Option.XLINT, LintCategory.PATH);\n+                    boolean lintPaths = !options.isDisabled(Option.XLINT, LintCategory.PATH);\n@@ -579,1 +579,1 @@\n-        boolean lintOptions = !options.isExplicitlyDisabled(Option.XLINT, LintCategory.OPTIONS);\n+        boolean lintOptions = !options.isDisabled(Option.XLINT, LintCategory.OPTIONS);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/Arguments.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -175,1 +175,2 @@\n-     * Check whether the given lint category is explicitly enabled or disabled.\n+     * Determine if a specific {@link LintCategory} is enabled via a custom\n+     * option flag of the form {@code -Flag}, {@code -Flag:all}, or {@code -Flag:key}.\n@@ -178,1 +179,1 @@\n-     * If the category is neither enabled nor disabled, return the given default value.\n+     * Note: It's possible the category was also disabled; this method does not check that.\n@@ -180,1 +181,1 @@\n-     * @param option the plain (non-custom) option\n+     * @param option the plain (non-custom) version of the option (e.g., {@link Option#XLINT})\n@@ -182,2 +183,1 @@\n-     * @param defaultValue presumed default value\n-     * @return true if {@code lc} would be included\n+     * @return true if {@code lc} has been enabled\n@@ -185,15 +185,3 @@\n-    public boolean isSet(Option option, LintCategory lc, boolean defaultValue) {\n-        Option customOption = option.getCustom();\n-        if (lc.optionList.stream().anyMatch(alias -> isSet(customOption, alias))) {\n-            return true;\n-        }\n-        if (lc.optionList.stream().anyMatch(alias -> isSet(customOption, \"-\" + alias))) {\n-            return false;\n-        }\n-        if (isSet(option) || isSet(customOption, Option.LINT_CUSTOM_ALL)) {\n-            return true;\n-        }\n-        if (isSet(customOption, Option.LINT_CUSTOM_NONE)) {\n-            return false;\n-        }\n-        return defaultValue;\n+    public boolean isEnabled(Option option, LintCategory lc) {\n+        Option custom = option.getCustom();\n+        return isExplicitlyEnabled(option, lc) || isSet(custom) || isSet(custom, Option.LINT_CUSTOM_ALL);\n@@ -203,2 +191,5 @@\n-     * Determine if a specific {@link LintCategory} was explicitly enabled via a custom option flag\n-     * of the form {@code -Flag:all} or {@code -Flag:key}.\n+     * Determine if a specific {@link LintCategory} is disabled via a custom\n+     * option flag of the form {@code -Flag:none} or {@code -Flag:-key}.\n+     *\n+     * <p>\n+     * Note: It's possible the category was also enabled; this method does not check that.\n@@ -206,1 +197,19 @@\n-     * @param option the option\n+     * @param option the plain (non-custom) version of the option (e.g., {@link Option#XLINT})\n+     * @param lc the {@link LintCategory} in question\n+     * @return true if {@code lc} has been disabled\n+     *\/\n+    public boolean isDisabled(Option option, LintCategory lc) {\n+        return isExplicitlyDisabled(option, lc) || isSet(option.getCustom(), Option.LINT_CUSTOM_NONE);\n+    }\n+\n+    \/**\n+     * Determine if a specific {@link LintCategory} is explicitly enabled via a custom\n+     * option flag of the form {@code -Flag:key}.\n+     *\n+     * <p>\n+     * Note: This does not check for option flags of the form {@code -Flag} or {@code -Flag:all}.\n+     *\n+     * <p>\n+     * Note: It's possible the category was also disabled; this method does not check that.\n+     *\n+     * @param option the plain (non-custom) version of the option (e.g., {@link Option#XLINT})\n@@ -211,1 +220,2 @@\n-        return isSet(option, lc, false);\n+        Option customOption = option.getCustom();\n+        return lc.optionList.stream().anyMatch(alias -> isSet(customOption, alias));\n@@ -215,2 +225,2 @@\n-     * Determine if a specific {@link LintCategory} was explicitly disabled via a custom option flag\n-     * of the form {@code -Flag:none} or {@code -Flag:-key}.\n+     * Determine if a specific {@link LintCategory} is explicitly disabled via a custom\n+     * option flag of the form {@code -Flag:-key}.\n@@ -218,1 +228,7 @@\n-     * @param option the option\n+     * <p>\n+     * Note: This does not check for an option flag of the form {@code -Flag:none}.\n+     *\n+     * <p>\n+     * Note: It's possible the category was also enabled; this method does not check that.\n+     *\n+     * @param option the plain (non-custom) version of the option (e.g., {@link Option#XLINT})\n@@ -223,1 +239,2 @@\n-        return !isSet(option, lc, true);\n+        Option customOption = option.getCustom();\n+        return lc.optionList.stream().anyMatch(alias -> isSet(customOption, \"-\" + alias));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Options.java","additions":45,"deletions":28,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8359596\n+ * @summary Verify behavior when both \"-Xlint:options\" and \"-Xlint:-options\" are given\n+ * @compile\/fail\/ref=LintOptions.out -Werror -XDrawDiagnostics -source 21 -target 21                                LintOptions.java\n+ * @compile\/fail\/ref=LintOptions.out -Werror -XDrawDiagnostics -source 21 -target 21 -Xlint:options                 LintOptions.java\n+ * @compile                          -Werror -XDrawDiagnostics -source 21 -target 21                -Xlint:-options LintOptions.java\n+ * @compile                          -Werror -XDrawDiagnostics -source 21 -target 21 -Xlint:options -Xlint:-options LintOptions.java\n+ * @compile                          -Werror -XDrawDiagnostics -source 21 -target 21                -Xlint:none     LintOptions.java\n+ * @compile                          -Werror -XDrawDiagnostics -source 21 -target 21 -Xlint:options -Xlint:none     LintOptions.java\n+ *\/\n+class LintOptions {\n+}\n","filename":"test\/langtools\/tools\/javac\/lint\/LintOptions.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+- compiler.warn.source.no.system.modules.path: 21, (compiler.misc.source.no.system.modules.path.with.target: 21, 21)\n+- compiler.err.warnings.and.werror\n+1 error\n+1 warning\n","filename":"test\/langtools\/tools\/javac\/lint\/LintOptions.out","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"}]}