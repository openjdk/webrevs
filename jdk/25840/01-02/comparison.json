{"files":[{"patch":"@@ -186,1 +186,1 @@\n-            if (options.isExplicitlyEnabled(Option.XLINT, lc)) {\n+            if (options.isLintExplicitlyEnabled(lc)) {\n@@ -188,1 +188,1 @@\n-            } else if (options.isExplicitlyDisabled(Option.XLINT, lc)) {\n+            } else if (options.isLintExplicitlyDisabled(lc)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -208,1 +208,1 @@\n-        lintOptions = !options.isDisabled(Option.XLINT, LintCategory.OPTIONS);\n+        lintOptions = !options.isLintDisabled(LintCategory.OPTIONS);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Modules.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-                    boolean lintPaths = !options.isDisabled(Option.XLINT, LintCategory.PATH);\n+                    boolean lintPaths = !options.isLintDisabled(LintCategory.PATH);\n@@ -579,1 +579,1 @@\n-        boolean lintOptions = !options.isDisabled(Option.XLINT, LintCategory.OPTIONS);\n+        boolean lintOptions = !options.isLintDisabled(LintCategory.OPTIONS);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/Arguments.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -176,1 +176,1 @@\n-     * option flag of the form {@code -Flag}, {@code -Flag:all}, or {@code -Flag:key}.\n+     * option flag of the form {@code -Xlint}, {@code -Xlint:all}, or {@code -Xlint:key}.\n@@ -181,1 +181,0 @@\n-     * @param option the plain (non-custom) version of the option (e.g., {@link Option#XLINT})\n@@ -185,3 +184,4 @@\n-    public boolean isEnabled(Option option, LintCategory lc) {\n-        Option custom = option.getCustom();\n-        return isExplicitlyEnabled(option, lc) || isSet(custom) || isSet(custom, Option.LINT_CUSTOM_ALL);\n+    public boolean isLintEnabled(LintCategory lc) {\n+        return isLintExplicitlyEnabled(lc) ||\n+            isSet(Option.XLINT_CUSTOM) ||\n+            isSet(Option.XLINT_CUSTOM, Option.LINT_CUSTOM_ALL);\n@@ -192,1 +192,1 @@\n-     * option flag of the form {@code -Flag:none} or {@code -Flag:-key}.\n+     * option flag of the form {@code -Xlint:none} or {@code -Xlint:-key}.\n@@ -197,1 +197,0 @@\n-     * @param option the plain (non-custom) version of the option (e.g., {@link Option#XLINT})\n@@ -201,2 +200,2 @@\n-    public boolean isDisabled(Option option, LintCategory lc) {\n-        return isExplicitlyDisabled(option, lc) || isSet(option.getCustom(), Option.LINT_CUSTOM_NONE);\n+    public boolean isLintDisabled(LintCategory lc) {\n+        return isLintExplicitlyDisabled(lc) || isSet(Option.XLINT_CUSTOM, Option.LINT_CUSTOM_NONE);\n@@ -207,1 +206,1 @@\n-     * option flag of the form {@code -Flag:key}.\n+     * option flag of the form {@code -Xlint:key}.\n@@ -210,1 +209,1 @@\n-     * Note: This does not check for option flags of the form {@code -Flag} or {@code -Flag:all}.\n+     * Note: This does not check for option flags of the form {@code -Xlint} or {@code -Xlint:all}.\n@@ -215,1 +214,0 @@\n-     * @param option the plain (non-custom) version of the option (e.g., {@link Option#XLINT})\n@@ -219,3 +217,2 @@\n-    public boolean isExplicitlyEnabled(Option option, LintCategory lc) {\n-        Option customOption = option.getCustom();\n-        return lc.optionList.stream().anyMatch(alias -> isSet(customOption, alias));\n+    public boolean isLintExplicitlyEnabled(LintCategory lc) {\n+        return lc.optionList.stream().anyMatch(alias -> isSet(Option.XLINT_CUSTOM, alias));\n@@ -226,1 +223,1 @@\n-     * option flag of the form {@code -Flag:-key}.\n+     * option flag of the form {@code -Xlint:-key}.\n@@ -229,1 +226,1 @@\n-     * Note: This does not check for an option flag of the form {@code -Flag:none}.\n+     * Note: This does not check for an option flag of the form {@code -Xlint:none}.\n@@ -234,1 +231,0 @@\n-     * @param option the plain (non-custom) version of the option (e.g., {@link Option#XLINT})\n@@ -238,3 +234,2 @@\n-    public boolean isExplicitlyDisabled(Option option, LintCategory lc) {\n-        Option customOption = option.getCustom();\n-        return lc.optionList.stream().anyMatch(alias -> isSet(customOption, \"-\" + alias));\n+    public boolean isLintExplicitlyDisabled(LintCategory lc) {\n+        return lc.optionList.stream().anyMatch(alias -> isSet(Option.XLINT_CUSTOM, \"-\" + alias));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Options.java","additions":16,"deletions":21,"binary":false,"changes":37,"status":"modified"}]}