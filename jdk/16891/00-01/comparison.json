{"files":[{"patch":"@@ -121,0 +121,2 @@\n+ * See {@link MessageFormat##pattern_caveats MessageFormat} for caveats regarding\n+ * {@code MessageFormat} patterns within a {@code ChoiceFormat} pattern.\n","filename":"src\/java.base\/share\/classes\/java\/text\/ChoiceFormat.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -296,3 +296,9 @@\n- * <strong>Note:<\/strong> As we see above, the string produced\n- * by a {@code ChoiceFormat} in {@code MessageFormat} is treated as special;\n- * occurrences of '{' are used to indicate subformats, and cause recursion.\n+ * <strong id=\"pattern_caveats\">Notes:<\/strong> As seen in the previous snippet,\n+ * the string produced by a {@code ChoiceFormat} in {@code MessageFormat} is\n+ * treated as special; occurrences of '{' are used to indicate subformats, and\n+ * cause recursion. A limitation to this behavior is that, if a {@code MessageFormat}\n+ * {@code FormatElement} is defined in the {@code ChoiceFormat} pattern, it will only\n+ * be formatted according to the {@code FormatType} and {@code FormatStyle}\n+ * pattern provided. The associated subformats of the {@code MessageFormat} will\n+ * not be applied to the {@code FormatElement} defined in the {@code ChoiceFormat}\n+ * pattern, even if the {@code ArgumentIndex} has an associated subformat.\n","filename":"src\/java.base\/share\/classes\/java\/text\/MessageFormat.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"}]}