{"files":[{"patch":"@@ -72,0 +72,1 @@\n+import jdk.xml.internal.JdkXmlConfig;\n@@ -78,1 +79,0 @@\n-import jdk.xml.internal.XMLSecurityPropertyManager.Property;\n@@ -80,0 +80,1 @@\n+import jdk.xml.internal.XMLSecurityPropertyManager.Property;\n@@ -90,1 +91,1 @@\n- * @LastModified: Apr 2025\n+ * @LastModified: May 2025\n@@ -268,1 +269,5 @@\n-        _xmlFeatures = new JdkXmlFeatures(!_isNotSecureProcessing);\n+        JdkXmlConfig config = JdkXmlConfig.getInstance(false);\n+        \/\/ security (property) managers updated with current system properties\n+        _xmlSecurityManager = config.getXMLSecurityManager(true);\n+        _xmlSecurityPropertyMgr = config.getXMLSecurityPropertyManager(true);\n+        _xmlFeatures = config.getXMLFeatures(true);\n@@ -271,1 +276,0 @@\n-        _xmlSecurityPropertyMgr = new XMLSecurityPropertyManager();\n@@ -277,2 +281,0 @@\n-        \/\/Parser's security manager\n-        _xmlSecurityManager = new XMLSecurityManager(true);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/trax\/TransformerFactoryImpl.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+import jdk.xml.internal.JdkXmlConfig;\n@@ -74,1 +75,1 @@\n- * @LastModified: Apr 2025\n+ * @LastModified: May 2025\n@@ -417,1 +418,1 @@\n-        setProperty(SECURITY_MANAGER, new XMLSecurityManager(true));\n+        setProperty(SECURITY_MANAGER, JdkXmlConfig.getInstance(false).getXMLSecurityManager(false));\n@@ -420,1 +421,1 @@\n-                new XMLSecurityPropertyManager());\n+                JdkXmlConfig.getInstance(false).getXMLSecurityPropertyManager(false));\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/dom\/DOMConfigurationImpl.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.xml.internal.JdkXmlConfig;\n@@ -47,1 +48,1 @@\n- * @LastModified: Apr 2025\n+ * @LastModified: May 2025\n@@ -69,0 +70,1 @@\n+    JdkXmlConfig config = JdkXmlConfig.getInstance(true);\n@@ -144,1 +146,2 @@\n-        fSecurityManager = new XMLSecurityManager(true);\n+        fSecurityManager = config.getXMLSecurityManager(true);\n+        fSecurityPropertyMgr = config.getXMLSecurityPropertyManager(true);\n@@ -146,1 +149,0 @@\n-        fSecurityPropertyMgr = new XMLSecurityPropertyManager();\n@@ -235,1 +237,1 @@\n-                fSecurityPropertyMgr = new XMLSecurityPropertyManager();\n+                fSecurityPropertyMgr = config.getXMLSecurityPropertyManager(true);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/PropertyManager.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-import javax.xml.catalog.CatalogFeatures.Feature;\n@@ -58,1 +57,0 @@\n-import jdk.xml.internal.JdkCatalog;\n@@ -61,0 +59,1 @@\n+import jdk.xml.internal.JdkXmlConfig;\n@@ -97,1 +96,1 @@\n- * @LastModified: Apr 2025\n+ * @LastModified: May 2025\n@@ -439,1 +438,1 @@\n-        this(null, new XMLSecurityManager(true));\n+        this(null, JdkXmlConfig.getInstance(false).getXMLSecurityManager(false));\n@@ -1058,1 +1057,1 @@\n-            staxInputSource = resolveWithCatalogStAX(fDefCR, JdkCatalog.JDKCATALOG, publicId, literalSystemId);\n+            staxInputSource = resolveWithCatalogStAX(fDefCR, JdkXmlConfig.JDKCATALOG_FILE, publicId, literalSystemId);\n@@ -1700,1 +1699,1 @@\n-            spm = new XMLSecurityPropertyManager();\n+            spm = JdkXmlConfig.getInstance(false).getXMLSecurityPropertyManager(false);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/XMLEntityManager.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -77,0 +77,1 @@\n+import jdk.xml.internal.JdkXmlConfig;\n@@ -105,1 +106,1 @@\n- * @LastModified: Apr 2025\n+ * @LastModified: May 2025\n@@ -1004,1 +1005,1 @@\n-            spm = new XMLSecurityPropertyManager();\n+            spm = JdkXmlConfig.getInstance(false).getXMLSecurityPropertyManager(false);\n@@ -1010,1 +1011,1 @@\n-            setProperty(SECURITY_MANAGER,new XMLSecurityManager(true));\n+            setProperty(SECURITY_MANAGER, JdkXmlConfig.getInstance(false).getXMLSecurityManager(false));\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/xs\/XMLSchemaLoader.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -108,0 +108,1 @@\n+import jdk.xml.internal.JdkXmlConfig;\n@@ -134,1 +135,1 @@\n- * @LastModified: Apr 2025\n+ * @LastModified: May 2025\n@@ -738,1 +739,2 @@\n-        fAnnotationValidator.setProperty(SECURITY_MANAGER, (fSecurityManager != null) ? fSecurityManager : new XMLSecurityManager(true));\n+        fAnnotationValidator.setProperty(SECURITY_MANAGER,\n+                (fSecurityManager != null) ? fSecurityManager : JdkXmlConfig.getInstance(false).getXMLSecurityManager(false));\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/xs\/traversers\/XSDHandler.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+\n+import jdk.xml.internal.JdkXmlConfig;\n@@ -42,1 +44,1 @@\n- * @LastModified: Apr 2025\n+ * @LastModified: May 2025\n@@ -57,2 +59,9 @@\n-    XMLSecurityManager fSecurityManager = new XMLSecurityManager(true);\n-    XMLSecurityPropertyManager fSecurityPropertyMgr = new XMLSecurityPropertyManager();\n+    XMLSecurityManager fSecurityManager;\n+    XMLSecurityPropertyManager fSecurityPropertyMgr;\n+\n+    public DocumentBuilderFactoryImpl() {\n+        JdkXmlConfig config = JdkXmlConfig.getInstance(false);\n+        \/\/ security (property) managers updated with current system properties\n+        fSecurityManager = config.getXMLSecurityManager(true);\n+        fSecurityPropertyMgr = config.getXMLSecurityPropertyManager(true);\n+    }\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/DocumentBuilderFactoryImpl.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n- * @LastModified: Apr 2025\n+ * @LastModified: May 2025\n@@ -143,1 +143,1 @@\n-        fSecurityPropertyMgr = new XMLSecurityPropertyManager();\n+        fSecurityPropertyMgr = dbf.fSecurityPropertyMgr;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/DocumentBuilderImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.xml.internal.JdkXmlConfig;\n@@ -45,1 +46,1 @@\n- * @LastModified: Apr 2025\n+ * @LastModified: May 2025\n@@ -71,2 +72,8 @@\n-    XMLSecurityManager fSecurityManager = new XMLSecurityManager(true);\n-    XMLSecurityPropertyManager fSecurityPropertyMgr = new XMLSecurityPropertyManager();\n+    XMLSecurityManager fSecurityManager;\n+    XMLSecurityPropertyManager fSecurityPropertyMgr;\n+\n+    public SAXParserFactoryImpl() {\n+        JdkXmlConfig config = JdkXmlConfig.getInstance(false);\n+        fSecurityManager = config.getXMLSecurityManager(true);\n+        fSecurityPropertyMgr = config.getXMLSecurityPropertyManager(true);\n+    }\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/SAXParserFactoryImpl.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import jdk.xml.internal.JdkXmlConfig;\n@@ -67,1 +68,1 @@\n- * @LastModified: Apr 2025\n+ * @LastModified: May 2025\n@@ -415,1 +416,1 @@\n-                fSecurityManager = new XMLSecurityManager(true);\n+                fSecurityManager = JdkXmlConfig.getInstance(false).getXMLSecurityManager(false);\n@@ -426,1 +427,1 @@\n-                fSecurityPropertyMgr = new XMLSecurityPropertyManager();\n+                fSecurityPropertyMgr = JdkXmlConfig.getInstance(false).getXMLSecurityPropertyManager(false);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/SAXParserImpl.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import jdk.xml.internal.JdkXmlConfig;\n@@ -52,1 +53,1 @@\n- * @LastModified: July 2023\n+ * @LastModified: May 2025\n@@ -193,1 +194,1 @@\n-            config.setProperty(SECURITY_MANAGER, new XMLSecurityManager());\n+            config.setProperty(SECURITY_MANAGER, JdkXmlConfig.getInstance(false).getXMLSecurityManager(false));\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/validation\/StreamValidatorHelper.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+import jdk.xml.internal.JdkXmlConfig;\n@@ -73,1 +74,1 @@\n- * @LastModified: Apr 2025\n+ * @LastModified: May 2025\n@@ -155,3 +156,5 @@\n-        \/\/ Enable secure processing feature by default\n-        fSecurityManager = new XMLSecurityManager(true);\n-        fXMLSchemaLoader.setProperty(SECURITY_MANAGER, fSecurityManager);\n+        \/\/ security (property) managers updated with current system properties\n+        JdkXmlConfig config = JdkXmlConfig.getInstance(false);\n+        fSecurityManager = config.getXMLSecurityManager(true);\n+        fSecurityPropertyMgr = config.getXMLSecurityPropertyManager(true);\n+        fXmlFeatures = config.getXMLFeatures(true);\n@@ -159,3 +162,2 @@\n-        fSecurityPropertyMgr = new XMLSecurityPropertyManager();\n-        fXMLSchemaLoader.setProperty(XML_SECURITY_PROPERTY_MANAGER,\n-                fSecurityPropertyMgr);\n+        fXMLSchemaLoader.setProperty(SECURITY_MANAGER, fSecurityManager);\n+        fXMLSchemaLoader.setProperty(XML_SECURITY_PROPERTY_MANAGER, fSecurityPropertyMgr);\n@@ -167,1 +169,0 @@\n-        fXmlFeatures = new JdkXmlFeatures(fSecurityManager.isSecureProcessing());\n@@ -503,1 +504,1 @@\n-                fSecurityPropertyMgr = new XMLSecurityPropertyManager();\n+                fSecurityPropertyMgr = JdkXmlConfig.getInstance(false).getXMLSecurityPropertyManager(true);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/validation\/XMLSchemaFactory.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+import jdk.xml.internal.JdkXmlConfig;\n@@ -61,1 +62,1 @@\n- * @LastModified: Apr 2025\n+ * @LastModified: May 2025\n@@ -301,1 +302,1 @@\n-            fInitSecurityManager = new XMLSecurityManager(secureProcessing);\n+            fInitSecurityManager = JdkXmlConfig.getInstance(false).getXMLSecurityManager(false);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/validation\/XMLSchemaValidatorComponentManager.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,1 +82,1 @@\n- * @LastModified: Jan 2024\n+ * @LastModified: May 2025\n@@ -1668,1 +1668,1 @@\n-                        fConfiguration.setProperty(SECURITY_MANAGER, new XMLSecurityManager());\n+                        fConfiguration.setProperty(SECURITY_MANAGER, config.getXMLSecurityManager(true));\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/parsers\/AbstractSAXParser.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n- * @LastModified: Apr 2025\n+ * @LastModified: May 2025\n@@ -553,1 +553,1 @@\n-                securityPropertyManager = new XMLSecurityPropertyManager();\n+                securityPropertyManager = config.getXMLSecurityPropertyManager(true);\n@@ -562,1 +562,1 @@\n-            securityManager = new XMLSecurityManager(true);\n+            securityManager = config.getXMLSecurityManager(true);\n@@ -567,1 +567,1 @@\n-            securityPropertyManager = new XMLSecurityPropertyManager();\n+            securityPropertyManager = config.getXMLSecurityPropertyManager(true);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/parsers\/DOMParser.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+import jdk.xml.internal.JdkXmlConfig;\n@@ -54,1 +55,0 @@\n-import jdk.xml.internal.XMLSecurityPropertyManager;\n@@ -92,1 +92,1 @@\n- * @LastModified: Apr 2025\n+ * @LastModified: May 2025\n@@ -430,1 +430,2 @@\n-        setProperty(XML_SECURITY_PROPERTY_MANAGER, new XMLSecurityPropertyManager());\n+        setProperty(XML_SECURITY_PROPERTY_MANAGER,\n+                JdkXmlConfig.getInstance(false).getXMLSecurityPropertyManager(false));\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/parsers\/DTDConfiguration.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+import jdk.xml.internal.JdkXmlConfig;\n@@ -53,1 +54,0 @@\n-import jdk.xml.internal.XMLSecurityPropertyManager;\n@@ -393,1 +393,2 @@\n-        setProperty(XML_SECURITY_PROPERTY_MANAGER, new XMLSecurityPropertyManager());\n+        setProperty(XML_SECURITY_PROPERTY_MANAGER,\n+                JdkXmlConfig.getInstance(false).getXMLSecurityPropertyManager(false));\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/parsers\/NonValidatingConfiguration.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n- * @LastModified: Apr 2025\n+ * @LastModified: May 2025\n@@ -157,1 +157,1 @@\n-                securityPropertyManager = new XMLSecurityPropertyManager();\n+                securityPropertyManager = config.getXMLSecurityPropertyManager(true);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/parsers\/SAXParser.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import jdk.xml.internal.JdkXmlConfig;\n@@ -46,1 +47,1 @@\n- * @LastModified: July 2023\n+ * @LastModified: May 2025\n@@ -110,1 +111,2 @@\n-        setProperty(SECURITY_MANAGER_PROPERTY, new XMLSecurityManager(true));\n+        setProperty(SECURITY_MANAGER_PROPERTY,\n+                JdkXmlConfig.getInstance(false).getXMLSecurityManager(false));\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/parsers\/SecurityConfiguration.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.xml.internal.JdkXmlConfig;\n@@ -53,1 +54,1 @@\n- * @LastModified: Apr 2025\n+ * @LastModified: May 2025\n@@ -84,0 +85,2 @@\n+    JdkXmlConfig config = JdkXmlConfig.getInstance(false);\n+\n@@ -145,1 +148,1 @@\n-            securityManager = sm != null ? sm : new XMLSecurityManager(true);\n+            securityManager = sm != null ? sm : config.getXMLSecurityManager(true);\n@@ -150,1 +153,1 @@\n-            securityPropertyManager = spm != null ? spm : new XMLSecurityPropertyManager();\n+            securityPropertyManager = spm != null ? spm : config.getXMLSecurityPropertyManager(true);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/parsers\/XMLParser.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,2 @@\n+\n+import jdk.xml.internal.JdkXmlConfig;\n@@ -42,1 +44,1 @@\n- * @LastModified: May 2022\n+ * @LastModified: May 2025\n@@ -52,1 +54,1 @@\n-        this(null, null, null, null, false, new JdkXmlFeatures(false));\n+        this(null, null, null, null, false, JdkXmlConfig.getInstance(false).getXMLFeatures(true));\n@@ -60,1 +62,1 @@\n-             false, new JdkXmlFeatures(false));\n+             false, JdkXmlConfig.getInstance(false).getXMLFeatures(true));\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xpath\/internal\/jaxp\/XPathExpressionImpl.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,4 +30,2 @@\n-import jdk.xml.internal.JdkConstants;\n-import jdk.xml.internal.JdkProperty;\n-import jdk.xml.internal.JdkXmlFeatures;\n-import jdk.xml.internal.XMLSecurityManager;\n+\n+import jdk.xml.internal.*;\n@@ -40,1 +38,1 @@\n- * @LastModified: Nov 2024\n+ * @LastModified: May 2025\n@@ -82,2 +80,3 @@\n-            _featureManager = new JdkXmlFeatures(!_isNotSecureProcessing);\n-            _xmlSecMgr = new XMLSecurityManager(true);\n+            JdkXmlConfig config = JdkXmlConfig.getInstance(false);\n+            _xmlSecMgr = config.getXMLSecurityManager(true);\n+            _featureManager = config.getXMLFeatures(true);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xpath\/internal\/jaxp\/XPathFactoryImpl.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+\n+import jdk.xml.internal.JdkXmlConfig;\n@@ -51,1 +53,1 @@\n- * @LastModified: May 2022\n+ * @LastModified: May 2025\n@@ -61,1 +63,3 @@\n-        this(vr, fr, false, new JdkXmlFeatures(false), new XMLSecurityManager(true));\n+        this(vr, fr, false,\n+                JdkXmlConfig.getInstance(false).getXMLFeatures(false),\n+                JdkXmlConfig.getInstance(false).getXMLSecurityManager(false));\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xpath\/internal\/jaxp\/XPathImpl.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import javax.xml.transform.Result;\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/validation\/SchemaFactory.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -189,1 +189,1 @@\n-     * Read from system properties, or those in jaxp.properties\n+     * Reads the system property, and sets the value if successful.\n@@ -194,8 +194,9 @@\n-    void getSystemProperty(Enum<?> property, String systemProperty) {\n-        try {\n-            String value = System.getProperty(systemProperty);\n-            if (value != null) {\n-                values[property.ordinal()] = value;\n-                states[property.ordinal()] = State.SYSTEMPROPERTY;\n-                return;\n-            }\n+    boolean getSystemProperty(Enum<?> property, String systemProperty) {\n+        String value = System.getProperty(systemProperty);\n+        if (value != null) {\n+            values[property.ordinal()] = value;\n+            states[property.ordinal()] = State.SYSTEMPROPERTY;\n+            return true;\n+        }\n+        return false;\n+    }\n@@ -203,7 +204,14 @@\n-            value = SecuritySupport.readConfig(systemProperty);\n-            if (value != null) {\n-                values[property.ordinal()] = value;\n-                states[property.ordinal()] = State.JAXPDOTPROPERTIES;\n-            }\n-        } catch (NumberFormatException e) {\n-            \/\/invalid setting ignored\n+    \/**\n+     * Reads the property from the JAXP Configuration File.\n+     *\n+     * @param property the property\n+     * @param sysPropertyName the name of the system property\n+     * @return true if the property is read successfully from the JAXP Config,\n+     * false otherwise.\n+     *\/\n+    boolean getPropertyConfig(Enum<?> property, String sysPropertyName) {\n+        String value = SecuritySupport.readConfig(sysPropertyName);\n+        if (value != null) {\n+            values[property.ordinal()] = value;\n+            states[property.ordinal()] = State.JAXPDOTPROPERTIES;\n+            return true;\n@@ -211,0 +219,1 @@\n+        return false;\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/FeaturePropertyBase.java","additions":25,"deletions":16,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.xml.internal;\n-\n-import java.net.URI;\n-import javax.xml.catalog.Catalog;\n-import javax.xml.catalog.CatalogFeatures;\n-import javax.xml.catalog.CatalogManager;\n-\n-\/**\n- * Represents the built-in Catalog that hosts the DTDs for the Java platform.\n- *\/\n-public class JdkCatalog {\n-    public static final String JDKCATALOG = \"\/jdk\/xml\/internal\/jdkcatalog\/JDKCatalog.xml\";\n-    private static final String JDKCATALOG_URL = SecuritySupport.getResource(JDKCATALOG).toExternalForm();\n-    public static Catalog catalog;\n-\n-    public static void init(String resolve) {\n-        if (catalog == null) {\n-            CatalogFeatures cf = JdkXmlUtils.getCatalogFeatures(null, JDKCATALOG_URL, null, resolve);\n-            catalog = CatalogManager.catalog(cf, URI.create(JDKCATALOG_URL));\n-        }\n-    }\n-}\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/JdkCatalog.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -0,0 +1,180 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.xml.internal;\n+\n+import javax.xml.catalog.Catalog;\n+import javax.xml.catalog.CatalogFeatures;\n+import javax.xml.catalog.CatalogManager;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+\n+\/**\n+ * Global configuration for JAXP components. A single instance of this class\n+ * holds the properties from the JAXP Configuration File, the JDK built-in\n+ * Catalog, a base XMLSecurityManager and XMLSecurityPropertyManager.\n+ *\/\n+public class JdkXmlConfig {\n+    public static final String JDKCATALOG_FILE = \"\/jdk\/xml\/internal\/jdkcatalog\/JDKCatalog.xml\";\n+    private static final String JDKCATALOG_URL = \"jrt:\/java.xml\/jdk\/xml\/internal\/jdkcatalog\/JDKCatalog.xml\";\n+\n+    \/\/ The JDK Configuration instance\n+    private static volatile JdkXmlConfig INSTANCE;\n+    \/\/ Represents properties set in JAXP Configuration File\n+    private final Properties jaxpConfig = new Properties();\n+    \/\/ The security manager initialized when the JdkXmlConfig instance is created\n+    private final XMLSecurityManager baseManager;\n+    private final XMLSecurityPropertyManager basePropertyMgr;\n+    private final JdkXmlFeatures baseFeatures;\n+\n+    \/\/ The JDK built-in Catalog\n+    private static class CatalogHolder {\n+        private static final Catalog JDKCATALOG = CatalogManager.catalog(\n+                CatalogFeatures.defaults(), URI.create(JDKCATALOG_URL));\n+    }\n+\n+    \/**\n+     * Constructs an instance of this class.\n+     * @param stax a flag indicating whether the call is from StAX\n+     *\/\n+    private JdkXmlConfig(boolean stax) {\n+        loadConfig(stax);\n+        baseManager = new XMLSecurityManager(true);\n+        basePropertyMgr = new XMLSecurityPropertyManager();\n+        baseFeatures = new JdkXmlFeatures(true);\n+    }\n+\n+    \/**\n+     * Returns the singleton instance of this class.\n+     * @param stax a flag indicating whether the call is from StAX\n+     * @return the singleton instance of this class\n+     *\/\n+    public static JdkXmlConfig getInstance(boolean stax) {\n+        if (INSTANCE == null) {\n+            synchronized (JdkXmlConfig.class) {\n+                if (INSTANCE == null) {\n+                    INSTANCE = new JdkXmlConfig(stax);\n+                }\n+            }\n+        }\n+        return INSTANCE;\n+    }\n+\n+    public Properties getJaxpConfig() {\n+        return jaxpConfig;\n+    }\n+\n+    \/**\n+     * Returns a copy of the base XMLSecurityManager.\n+     * @param update the flag indicating whether the copy should be updated\n+     * @return a copy of the base XMLSecurityManager.\n+     *\/\n+    public XMLSecurityManager getXMLSecurityManager(boolean update) {\n+        return update ? baseManager.cloneAndUpdate() : baseManager.clone();\n+    }\n+\n+    \/**\n+     * Returns a copy of the base XMLSecurityPropertyManager.\n+     * @param update the flag indicating whether the copy should be updated\n+     * @return a copy of the base XMLSecurityPropertyManager.\n+     *\/\n+    public XMLSecurityPropertyManager getXMLSecurityPropertyManager(boolean update) {\n+        return update ? basePropertyMgr.cloneAndUpdate() : basePropertyMgr.clone();\n+    }\n+\n+    \/**\n+     * Returns a copy of the base XMLSecurityPropertyManager.\n+     * @param update the flag indicating whether the copy should be updated\n+     * @return a copy of the base XMLSecurityPropertyManager.\n+     *\/\n+    public JdkXmlFeatures getXMLFeatures(boolean update) {\n+        return update ? baseFeatures.cloneAndUpdate() : baseFeatures.clone();\n+    }\n+\n+    \/**\n+     * Returns the JDK built-in Catalog.\n+     * @return the JDK built-in Catalog\n+     *\/\n+    public Catalog getJdkCatalog() {\n+        return CatalogHolder.JDKCATALOG;\n+    }\n+\n+    \/**\n+     * Loads the JAXP Configuration file.\n+     * The method reads the JDK default configuration that is typically located\n+     * at $java.home\/conf\/jaxp.properties. On top of the default, if the System\n+     * Property \"java.xml.config.file\" exists, the configuration file it points\n+     * to will also be read. Any settings in it will then override those in the\n+     * default.\n+     *\n+     * @param stax a flag indicating whether to read stax.properties\n+     * @return the value of the specified property, null if the property is not\n+     * found\n+     *\/\n+    private void loadConfig(boolean stax) {\n+        Properties properties = new Properties();\n+        \/\/ load the default configuration file\n+        boolean found = loadProperties(\n+                Paths.get(System.getProperty(\"java.home\"),\n+                                \"conf\", \"jaxp.properties\")\n+                        .toAbsolutePath().normalize().toString());\n+\n+        \/\/ attempts to find stax.properties only if jaxp.properties is not available\n+        if (stax && !found) {\n+            found = loadProperties(\n+                    Paths.get(System.getProperty(\"java.home\"),\n+                                    \"conf\", \"stax.properties\")\n+                            .toAbsolutePath().normalize().toString()\n+            );\n+        }\n+\n+        \/\/ load the custom configure on top of the default if any\n+        String configFile = System.getProperty(JdkConstants.CONFIG_FILE_PROPNAME);\n+        if (configFile != null) {\n+            loadProperties(configFile);\n+        }\n+    }\n+\n+    \/**\n+     * Loads the properties from the specified file into the cache.\n+     * @param file the specified file\n+     * @return true if success, false otherwise\n+     *\/\n+    private boolean loadProperties(String file) {\n+        File f = new File(file);\n+        if (SecuritySupport.doesFileExist(f)) {\n+            try (final InputStream in = SecuritySupport.getFileInputStream(f)) {\n+                jaxpConfig.load(in);\n+                return true;\n+            } catch (IOException e) {\n+                \/\/ shouldn't happen, but required by method getFileInputStream\n+            }\n+        }\n+        return false;\n+    }\n+}\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/JdkXmlConfig.java","additions":180,"deletions":0,"binary":false,"changes":180,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-public class JdkXmlFeatures {\n+public class JdkXmlFeatures implements Cloneable {\n@@ -220,1 +220,1 @@\n-    private final boolean[] featureValues;\n+    private boolean[] featureValues;\n@@ -225,1 +225,1 @@\n-    private final State[] states;\n+    private State[] states;\n@@ -249,2 +249,27 @@\n-        \/\/read system properties or jaxp.properties\n-        readSystemProperties();\n+    }\n+\n+    \/**\n+     * Returns a copy of the JdkXmlFeatures.\n+     * @return a copy of the JdkXmlFeatures\n+     *\/\n+    public JdkXmlFeatures clone() {\n+        try {\n+            JdkXmlFeatures copy = (JdkXmlFeatures) super.clone();\n+            copy.featureValues = this.featureValues.clone();\n+            copy.states = this.states.clone();\n+            return copy;\n+        } catch (CloneNotSupportedException e) {\n+            \/\/ shouldn't happen as this class is Cloneable\n+            throw new InternalError(e);\n+        }\n+    }\n+\n+    \/**\n+     * Returns a copy of the JdkXmlFeatures that is updated with the\n+     * current System Properties.\n+     * @return a copy of the JdkXmlFeatures\n+     *\/\n+    public JdkXmlFeatures cloneAndUpdate() {\n+        JdkXmlFeatures copy = clone();\n+        copy.readSystemProperties();\n+        return copy;\n@@ -390,1 +415,2 @@\n-     * Read from system properties, or those in jaxp.properties\n+     * Read the system property, or the setting in the Jaxp Configuration File\n+     * corresponding to the XmlFeature.\n@@ -392,2 +418,2 @@\n-     * @param property the type of the property\n-     * @param sysPropertyName the name of system property\n+     * @param feature the XmlFeature\n+     * @param sysPropertyName the corresponding system property\n@@ -397,6 +423,5 @@\n-        try {\n-            String value = System.getProperty(sysPropertyName);\n-            if (value == null && feature.systemPropertyOld() != null) {\n-                \/\/ legacy system property\n-                value = System.getProperty(feature.systemPropertyOld());\n-            }\n+        String value = System.getProperty(sysPropertyName);\n+        if (value == null && feature.systemPropertyOld() != null) {\n+            \/\/ legacy system property\n+            value = System.getProperty(feature.systemPropertyOld());\n+        }\n@@ -404,4 +429,4 @@\n-            if (value != null && !value.isEmpty()) {\n-                setFeature(feature, State.SYSTEMPROPERTY, Boolean.parseBoolean(value));\n-                return true;\n-            }\n+        if (value != null && !value.isEmpty()) {\n+            setFeature(feature, State.SYSTEMPROPERTY, Boolean.parseBoolean(value));\n+            return true;\n+        }\n@@ -409,8 +434,4 @@\n-            value = SecuritySupport.readConfig(sysPropertyName);\n-            if (value != null && !value.isEmpty()) {\n-                setFeature(feature, State.JAXPDOTPROPERTIES, Boolean.parseBoolean(value));\n-                return true;\n-            }\n-        } catch (NumberFormatException e) {\n-            \/\/invalid setting\n-            throw new NumberFormatException(\"Invalid setting for system property: \" + feature.systemProperty());\n+        value = SecuritySupport.readConfig(sysPropertyName);\n+        if (value != null && !value.isEmpty()) {\n+            setFeature(feature, State.JAXPDOTPROPERTIES, Boolean.parseBoolean(value));\n+            return true;\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/JdkXmlFeatures.java","additions":48,"deletions":27,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -143,48 +143,1 @@\n-        \/\/ always load the default configuration file\n-        if (firstTime) {\n-            synchronized (cacheProps) {\n-                if (firstTime) {\n-                    boolean found = loadProperties(\n-                            Paths.get(System.getProperty(\"java.home\"),\n-                                \"conf\", \"jaxp.properties\")\n-                                .toAbsolutePath().normalize().toString());\n-\n-                    \/\/ attempts to find stax.properties only if jaxp.properties is not available\n-                    if (stax && !found) {\n-                        found = loadProperties(\n-                            Paths.get(System.getProperty(\"java.home\"),\n-                                    \"conf\", \"stax.properties\")\n-                                    .toAbsolutePath().normalize().toString()\n-                        );\n-                    }\n-\n-                    \/\/ load the custom configure on top of the default if any\n-                    String configFile = System.getProperty(JdkConstants.CONFIG_FILE_PROPNAME);\n-                    if (configFile != null) {\n-                        loadProperties(configFile);\n-                    }\n-\n-                    firstTime = false;\n-                }\n-            }\n-        }\n-\n-        return cacheProps.getProperty(propName);\n-    }\n-\n-    \/**\n-     * Loads the properties from the specified file into the cache.\n-     * @param file the specified file\n-     * @return true if success, false otherwise\n-     *\/\n-    private static boolean loadProperties(String file) {\n-        File f = new File(file);\n-        if (SecuritySupport.doesFileExist(f)) {\n-            try (final InputStream in = SecuritySupport.getFileInputStream(f)) {\n-                cacheProps.load(in);\n-                return true;\n-            } catch (IOException e) {\n-                \/\/ shouldn't happen, but required by method getFileInputStream\n-            }\n-        }\n-        return false;\n+        return JdkXmlConfig.getInstance(stax).getJaxpConfig().getProperty(propName);\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/SecuritySupport.java","additions":2,"deletions":49,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-public final class XMLSecurityManager {\n+public final class XMLSecurityManager implements Cloneable {\n@@ -235,1 +235,1 @@\n-    private final int[] values;\n+    private int[] values;\n@@ -286,5 +286,0 @@\n-\n-        \/\/read system properties or the config file (jaxp.properties by default)\n-        readSystemProperties();\n-        \/\/ prepare the JDK Catalog\n-        prepareCatalog();\n@@ -294,1 +289,2 @@\n-     * Flag indicating whether the JDK Catalog has been initialized\n+     * Returns a copy of the XMLSecurityManager.\n+     * @return a copy of the XMLSecurityManager\n@@ -296,12 +292,10 @@\n-    static volatile boolean jdkcatalogInitialized = false;\n-    private final Object lock = new Object();\n-\n-    private void prepareCatalog() {\n-        if (!jdkcatalogInitialized) {\n-            synchronized (lock) {\n-                if (!jdkcatalogInitialized) {\n-                    jdkcatalogInitialized = true;\n-                    String resolve = getLimitValueAsString(Limit.JDKCATALOG_RESOLVE);\n-                    JdkCatalog.init(resolve);\n-                }\n-            }\n+    public XMLSecurityManager clone() {\n+        try {\n+            XMLSecurityManager copy = (XMLSecurityManager) super.clone();\n+            copy.values = this.values.clone();\n+            copy.states = this.states.clone();\n+            copy.isSet = this.isSet.clone();\n+            return copy;\n+        } catch (CloneNotSupportedException e) {\n+            \/\/ shouldn't happen as this class is Cloneable\n+            throw new InternalError(e);\n@@ -311,0 +305,11 @@\n+    \/**\n+     * Returns a copy of the XMLSecurityManager that is updated with the\n+     * current System Properties.\n+     * @return a copy of the XMLSecurityManager\n+     *\/\n+    public XMLSecurityManager cloneAndUpdate() {\n+        XMLSecurityManager copy = clone();\n+        copy.readSystemProperties();\n+        return copy;\n+    }\n+\n@@ -319,1 +324,2 @@\n-        return CatalogManager.catalogResolver(JdkCatalog.catalog, toActionType(resolve));\n+        return CatalogManager.catalogResolver(\n+                JdkXmlConfig.getInstance(false).getJdkCatalog(), toActionType(resolve));\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/XMLSecurityManager.java","additions":28,"deletions":22,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-public final class XMLSecurityPropertyManager extends FeaturePropertyBase {\n+public final class XMLSecurityPropertyManager extends FeaturePropertyBase implements Cloneable {\n@@ -40,1 +40,1 @@\n-        ACCESS_EXTERNAL_DTD(XMLConstants.ACCESS_EXTERNAL_DTD,\n+        ACCESS_EXTERNAL_DTD(XMLConstants.ACCESS_EXTERNAL_DTD, JdkConstants.SP_ACCESS_EXTERNAL_DTD,\n@@ -42,1 +42,1 @@\n-        ACCESS_EXTERNAL_SCHEMA(XMLConstants.ACCESS_EXTERNAL_SCHEMA,\n+        ACCESS_EXTERNAL_SCHEMA(XMLConstants.ACCESS_EXTERNAL_SCHEMA, JdkConstants.SP_ACCESS_EXTERNAL_SCHEMA,\n@@ -44,1 +44,1 @@\n-        ACCESS_EXTERNAL_STYLESHEET(XMLConstants.ACCESS_EXTERNAL_STYLESHEET,\n+        ACCESS_EXTERNAL_STYLESHEET(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, JdkConstants.SP_ACCESS_EXTERNAL_STYLESHEET,\n@@ -47,1 +47,2 @@\n-        final String name;\n+        final String apiProperty;\n+        final String systemProperty;\n@@ -50,2 +51,3 @@\n-        Property(String name, String value) {\n-            this.name = name;\n+        Property(String apiProperty, String systemProperty, String value) {\n+            this.apiProperty = apiProperty;\n+            this.systemProperty = systemProperty;\n@@ -56,1 +58,2 @@\n-            return (propertyName == null) ? false : name.equals(propertyName);\n+            return (propertyName == null) ? false :\n+                    (apiProperty.equals(propertyName) || systemProperty.equals(propertyName));\n@@ -60,1 +63,4 @@\n-            return name;\n+            return apiProperty;\n+        }\n+        public String systemProperty() {\n+            return systemProperty;\n@@ -75,2 +81,27 @@\n-        \/\/read system properties or jaxp.properties\n-        readSystemProperties();\n+    }\n+\n+    \/**\n+     * Returns a copy of the XMLSecurityManager.\n+     * @return a copy of the XMLSecurityManager\n+     *\/\n+    public XMLSecurityPropertyManager clone() {\n+        try {\n+            XMLSecurityPropertyManager copy = (XMLSecurityPropertyManager) super.clone();\n+            copy.values = this.values.clone();\n+            copy.states = this.states.clone();\n+            return copy;\n+        } catch (CloneNotSupportedException e) {\n+            \/\/ shouldn't happen as this class is Cloneable\n+            throw new InternalError(e);\n+        }\n+    }\n+\n+    \/**\n+     * Returns a copy of the XMLSecurityPropertyManager that is updated with the\n+     * current System Properties.\n+     * @return a copy of the XMLSecurityPropertyManager\n+     *\/\n+    public XMLSecurityPropertyManager cloneAndUpdate() {\n+        XMLSecurityPropertyManager copy = clone();\n+        copy.readSystemProperties();\n+        return copy;\n@@ -136,7 +167,13 @@\n-    private void readSystemProperties() {\n-        getSystemProperty(Property.ACCESS_EXTERNAL_DTD,\n-                JdkConstants.SP_ACCESS_EXTERNAL_DTD);\n-        getSystemProperty(Property.ACCESS_EXTERNAL_SCHEMA,\n-                JdkConstants.SP_ACCESS_EXTERNAL_SCHEMA);\n-        getSystemProperty(Property.ACCESS_EXTERNAL_STYLESHEET,\n-                JdkConstants.SP_ACCESS_EXTERNAL_STYLESHEET);\n+    public void readSystemProperties() {\n+        for (Property property : Property.values()) {\n+            if (State.SYSTEMPROPERTY.compareTo(states[property.ordinal()]) >= 0 &&\n+                    property.systemProperty() != null) {\n+                \/\/ attempts to read the System Property\n+                if (!getSystemProperty(property, property.systemProperty())) {\n+                    \/\/if system property is not found, try the config file\n+                    if (State.JAXPDOTPROPERTIES.compareTo(states[property.ordinal()]) >= 0) {\n+                        getPropertyConfig(property, property.systemProperty());\n+                    }\n+                }\n+            }\n+        }\n@@ -144,1 +181,0 @@\n-\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/XMLSecurityPropertyManager.java","additions":55,"deletions":19,"binary":false,"changes":74,"status":"modified"}]}