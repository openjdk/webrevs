{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -4002,5 +4002,27 @@\n-        return env.info.ctorPrologue &&\n-            (v.flags() & STATIC) == 0 &&\n-            v.owner.kind == TYP &&\n-            types.isSubtype(env.enclClass.type, v.owner.type) &&\n-            (base == null || TreeInfo.isExplicitThisReference(types, (ClassType)env.enclClass.type, base));\n+        if (env.info.ctorPrologue &&\n+                (v.flags() & STATIC) == 0 &&\n+                v.owner.kind == TYP &&\n+                types.isSubtype(env.enclClass.type, v.owner.type)) {\n+\n+            \/\/ Handle the qualified case \"Foo.x\"\n+            if (base != null) {\n+                return TreeInfo.isExplicitThisReference(types, (ClassType)env.enclClass.type, base);\n+            }\n+\n+            \/\/ Handle the unqualified case \"x\". First we allow an unqualified reference to an instance field\n+            \/\/ declared in a superclass S if (a) the field is private, and (b) S is also an outer class.\n+            \/\/ It's OK because the expression \"x\" then refers to the outer instance, not the current instance.\n+            if (env.enclClass.type != v.owner.type && (v.flags() & PRIVATE) != 0) {\n+                    Type.ClassType rawOwnerType = (Type.ClassType)types.erasure(v.owner.type);\n+                    Type.ClassType rawCurrentType = (Type.ClassType)types.erasure(env.enclClass.type);\n+                    Symbol.ClassSymbol rawOwnerSym = (Symbol.ClassSymbol)rawOwnerType.tsym;\n+                    Symbol.ClassSymbol rawCurrentSym = (Symbol.ClassSymbol)rawCurrentType.tsym;\n+                if (rawCurrentSym.isEnclosedBy(rawOwnerSym)) {\n+                    return false;\n+                }\n+            }\n+\n+            \/\/ It's an early reference to an instance field of the current instance\n+            return true;\n+        }\n+        return false;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":28,"deletions":6,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 8194743\n+ * @bug 8194743 8349754\n@@ -493,0 +493,11 @@\n+    \/\/ Test for JDK-8349754\n+    public static class Test23 {\n+        private int i;\n+        class Sub extends Test23 {\n+            Sub() {\n+                i = 3;      \/\/ here \"i\" refers to \"Test23.this.i\", not \"this.i\" - so it's OK\n+                super();\n+            }\n+        }\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitGood.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"}]}