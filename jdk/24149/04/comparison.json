{"files":[{"patch":"@@ -320,1 +320,12 @@\n-#define IOE_FORMAT \"error=%d, %s\"\n+#define IOE_FORMAT \"%s, error: %d (%s) %s\"\n+\n+#define SPAWN_HELPER_INTERNAL_ERROR_MSG \"\\n\" \\\n+  \"Possible reasons:\\n\" \\\n+  \"  - Spawn helper ran into JDK version mismatch\\n\" \\\n+  \"  - Spawn helper ran into unexpected internal error\\n\" \\\n+  \"  - Spawn helper was terminated by another process\\n\" \\\n+  \"Possible solutions:\\n\" \\\n+  \"  - Restart JVM, especially after in-place JDK updates\\n\" \\\n+  \"  - Check system logs for JDK-related errors\\n\" \\\n+  \"  - Re-install JDK to fix permission\/versioning problems\\n\" \\\n+  \"  - Switch to legacy launch mechanism with -Djdk.lang.Process.launchMechanism=VFORK\\n\"\n@@ -323,1 +334,1 @@\n-throwIOException(JNIEnv *env, int errnum, const char *defaultDetail)\n+throwIOExceptionImpl(JNIEnv *env, int errnum, const char *externalDetail, const char *internalDetail)\n@@ -325,1 +336,1 @@\n-    const char *detail = defaultDetail;\n+    const char *errorDetail;\n@@ -333,2 +344,7 @@\n-        if (ret != EINVAL)\n-            detail = tmpbuf;\n+        if (ret != EINVAL) {\n+            errorDetail = tmpbuf;\n+        } else {\n+            errorDetail = \"unknown\";\n+        }\n+    } else {\n+        errorDetail = \"none\";\n@@ -336,0 +352,1 @@\n+\n@@ -337,1 +354,1 @@\n-    fmtsize = sizeof(IOE_FORMAT) + strlen(detail) + 3 * sizeof(errnum);\n+    fmtsize = sizeof(IOE_FORMAT) + strlen(externalDetail) + 3 * sizeof(errnum) + strlen(errorDetail) +  strlen(internalDetail) + 1;\n@@ -342,1 +359,1 @@\n-    snprintf(errmsg, fmtsize, IOE_FORMAT, errnum, detail);\n+    snprintf(errmsg, fmtsize, IOE_FORMAT, externalDetail, errnum, errorDetail, internalDetail);\n@@ -353,0 +370,24 @@\n+\/**\n+ * Throws IOException that signifies an internal error, e.g. spawn helper failure.\n+ *\/\n+static void\n+throwInternalIOException(JNIEnv *env, int errnum, const char *externalDetail, int mode)\n+{\n+  switch (mode) {\n+    case MODE_POSIX_SPAWN:\n+      throwIOExceptionImpl(env, errnum, externalDetail, SPAWN_HELPER_INTERNAL_ERROR_MSG);\n+      break;\n+    default:\n+      throwIOExceptionImpl(env, errnum, externalDetail, \"\");\n+  }\n+}\n+\n+\/**\n+ * Throws IOException that signifies a normal error.\n+ *\/\n+static void\n+throwIOException(JNIEnv *env, int errnum, const char *externalDetail)\n+{\n+  throwIOExceptionImpl(env, errnum, externalDetail, \"\");\n+}\n+\n@@ -356,1 +397,1 @@\n-static void throwExitCause(JNIEnv *env, int pid, int status) {\n+static void throwExitCause(JNIEnv *env, int pid, int status, int mode) {\n@@ -360,1 +401,1 @@\n-            \"Failed to exec spawn helper: pid: %d, exit value: %d\",\n+            \"Failed to exec spawn helper: pid: %d, exit code: %d\",\n@@ -371,1 +412,1 @@\n-    throwIOException(env, 0, ebuf);\n+    throwInternalIOException(env, 0, ebuf, mode);\n@@ -694,1 +735,1 @@\n-        throwIOException(env, errno, \"Bad file descriptor\");\n+        throwInternalIOException(env, errno, \"Bad file descriptor\", c->mode);\n@@ -728,1 +769,1 @@\n-            throwIOException(env, errno, \"vfork failed\");\n+            throwInternalIOException(env, errno, \"vfork failed\", c->mode);\n@@ -731,1 +772,1 @@\n-            throwIOException(env, errno, \"fork failed\");\n+            throwInternalIOException(env, errno, \"fork failed\", c->mode);\n@@ -734,1 +775,1 @@\n-            throwIOException(env, errno, \"posix_spawn failed\");\n+            throwInternalIOException(env, errno, \"posix_spawn failed\", c->mode);\n@@ -748,1 +789,1 @@\n-                throwExitCause(env, p, tmpStatus);\n+                throwExitCause(env, p, tmpStatus, c->mode);\n@@ -755,2 +796,3 @@\n-                throwIOException(env, 0, \"Bad code from spawn helper \"\n-                                         \"(Failed to exec spawn helper)\");\n+                throwInternalIOException(env, 0,\n+                                         \"Bad code from spawn helper (Failed to exec spawn helper)\",\n+                                         c->mode);\n@@ -761,1 +803,1 @@\n-            throwIOException(env, errno, \"Read failed\");\n+          throwInternalIOException(env, errno, \"Read failed\", c->mode);\n@@ -773,1 +815,1 @@\n-        throwIOException(env, errno, \"Read failed\");\n+        throwInternalIOException(env, errno, \"Read failed\", c->mode);\n","filename":"src\/java.base\/unix\/native\/libjava\/ProcessImpl_md.c","additions":61,"deletions":19,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ *      8352533\n@@ -89,0 +90,1 @@\n+    static final String SPAWNHELPER_FAILURE_MSG = \"(Possible reasons:)\";\n@@ -321,1 +323,3 @@\n-                ! matches(m, PERMISSION_DENIED_ERROR_MSG))\n+                !matches(m, PERMISSION_DENIED_ERROR_MSG))\n+                unexpected(e);\n+            if (matches(m, SPAWNHELPER_FAILURE_MSG))\n@@ -431,1 +435,3 @@\n-                                ! matches(m, NO_SUCH_FILE_ERROR_MSG))\n+                                !matches(m, NO_SUCH_FILE_ERROR_MSG))\n+                                unexpected(e);\n+                            if (matches(m, SPAWNHELPER_FAILURE_MSG))\n@@ -444,1 +450,3 @@\n-                                ! matches(m, NO_SUCH_FILE_ERROR_MSG))\n+                                !matches(m, NO_SUCH_FILE_ERROR_MSG))\n+                                unexpected(e);\n+                            if (matches(m, SPAWNHELPER_FAILURE_MSG))\n@@ -1981,0 +1989,2 @@\n+            if (matches(m, SPAWNHELPER_FAILURE_MSG))\n+                unexpected(e);\n@@ -1998,0 +2008,2 @@\n+                if (matches(m, SPAWNHELPER_FAILURE_MSG))\n+                    unexpected(e);\n@@ -2014,0 +2026,2 @@\n+            if (matches(m, SPAWNHELPER_FAILURE_MSG))\n+                unexpected(e);\n@@ -2072,2 +2086,3 @@\n-                        check(expected.getMessage()\n-                              .matches(\"[Ss]tream [Cc]losed\"));\n+                        String m = expected.getMessage();\n+                        check(m.matches(\"[Ss]tream [Cc]losed\"));\n+                        check(!matches(m, SPAWNHELPER_FAILURE_MSG));\n@@ -2125,1 +2140,2 @@\n-                            if (!ioe.getMessage().equals(\"Stream closed\")) {\n+                            String m = ioe.getMessage();\n+                            if (!m.equals(\"Stream closed\")) {\n@@ -2129,0 +2145,3 @@\n+                            if (matches(m, SPAWNHELPER_FAILURE_MSG)) {\n+                                unexpected(ioe);\n+                            }\n@@ -2182,0 +2201,3 @@\n+                            if (matches(msg, SPAWNHELPER_FAILURE_MSG)) {\n+                                unexpected(e);\n+                            }\n@@ -2274,0 +2296,3 @@\n+            if (matches(m, SPAWNHELPER_FAILURE_MSG)) {\n+                unexpected(e);\n+            }\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/Basic.java","additions":31,"deletions":6,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -52,0 +52,2 @@\n+    private static final String SPAWNHELPER_FAILURE_MSG = \"Possible reasons:\";\n+\n@@ -58,0 +60,1 @@\n+            \/\/ Check that exception contains rich message on failure.\n@@ -59,1 +62,5 @@\n-            System.exit(ERROR);\n+            if (e instanceof IOException && e.getMessage().contains(SPAWNHELPER_FAILURE_MSG)) {\n+                System.exit(ERROR);\n+            } else {\n+                System.exit(ERROR + 3);\n+            }\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/JspawnhelperProtocol.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"}]}