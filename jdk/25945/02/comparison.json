{"files":[{"patch":"@@ -496,1 +496,4 @@\n-      offset = fs.offset();\n+      \/\/ fail fast for static fields upon match\n+      if (!fs.access_flags().is_static()) {\n+        offset = fs.offset();\n+      }\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -405,0 +405,3 @@\n+            if (Modifier.isStatic(modifiers))\n+                throw new IllegalArgumentException(\"Must not be a static field\");\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicIntegerFieldUpdater.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -400,0 +400,3 @@\n+            if (Modifier.isStatic(modifiers))\n+                throw new IllegalArgumentException(\"Must not be a static field\");\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicLongFieldUpdater.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -345,0 +345,3 @@\n+            if (Modifier.isStatic(modifiers))\n+                throw new IllegalArgumentException(\"Must not be a static field\");\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicReferenceFieldUpdater.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1068,0 +1068,3 @@\n+     *\n+     * @throws NullPointerException if the field is {@code null}\n+     * @throws IllegalArgumentException if the field is static\n@@ -1081,0 +1084,3 @@\n+     * <p>\n+     * Great care must be taken to ensure the passed field name is validated\n+     * to be an instance field.  Do not pass arbitrary field names.\n@@ -1085,1 +1091,2 @@\n-     *         would throw {@code java.lang.NoSuchFieldException}.\n+     *         would throw {@code java.lang.NoSuchFieldException}, or if such\n+     *         a field is static\n@@ -1112,0 +1119,3 @@\n+     *\n+     * @throws NullPointerException if the field is {@code null}\n+     * @throws IllegalArgumentException if the field is not static\n@@ -1131,0 +1141,3 @@\n+     *\n+     * @throws NullPointerException if the field is {@code null}\n+     * @throws IllegalArgumentException if the field is not static\n@@ -3847,4 +3860,4 @@\n-    private native long objectFieldOffset0(Field f);\n-    private native long objectFieldOffset1(Class<?> c, String name);\n-    private native long staticFieldOffset0(Field f);\n-    private native Object staticFieldBase0(Field f);\n+    private native long objectFieldOffset0(Field f); \/\/ throws IAE\n+    private native long objectFieldOffset1(Class<?> c, String name); \/\/ throws InternalError\n+    private native long staticFieldOffset0(Field f); \/\/ throws IAE\n+    private native Object staticFieldBase0(Field f); \/\/ throws IAE\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/Unsafe.java","additions":18,"deletions":5,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+    static volatile int q;\n@@ -88,0 +89,10 @@\n+        } catch (IllegalArgumentException success) {}\n+    }\n+\n+    \/**\n+     * construction with static field throws IllegalArgumentException\n+     *\/\n+    public void testConstructor4() {\n+        try {\n+            updaterFor(\"q\");\n+            shouldThrow();\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/AtomicIntegerFieldUpdaterTest.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+    static volatile long q;\n@@ -91,0 +92,10 @@\n+    \/**\n+     * construction with static field throws IllegalArgumentException\n+     *\/\n+    public void testConstructor4() {\n+        try {\n+            updaterFor(\"q\");\n+            shouldThrow();\n+        } catch (IllegalArgumentException success) {}\n+    }\n+\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/AtomicLongFieldUpdaterTest.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+    static volatile Item q;\n@@ -103,0 +104,11 @@\n+    \/**\n+     * construction with static field throws IllegalArgumentException\n+     *\/\n+    public void testConstructor5() {\n+        try {\n+            updaterFor(\"q\");\n+            shouldThrow();\n+        } catch (IllegalArgumentException success) {}\n+    }\n+\n+\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/AtomicReferenceFieldUpdaterTest.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"}]}