{"files":[{"patch":"@@ -496,1 +496,4 @@\n-      offset = fs.offset();\n+      \/\/ fail fast for static fields upon match\n+      if (!fs.access_flags().is_static()) {\n+        offset = fs.offset();\n+      }\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -405,0 +405,3 @@\n+            if (Modifier.isStatic(modifiers))\n+                throw new IllegalArgumentException(\"Must not be a static field\");\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicIntegerFieldUpdater.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -400,0 +400,3 @@\n+            if (Modifier.isStatic(modifiers))\n+                throw new IllegalArgumentException(\"Must not be a static field\");\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicLongFieldUpdater.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -345,0 +345,3 @@\n+            if (Modifier.isStatic(modifiers))\n+                throw new IllegalArgumentException(\"Must not be a static field\");\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicReferenceFieldUpdater.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1068,0 +1068,3 @@\n+     *\n+     * @throws NullPointerException if the field is {@code null}\n+     * @throws IllegalArgumentException if the field is static\n@@ -1081,0 +1084,3 @@\n+     * <p>\n+     * Great care must be taken to ensure the passed field name is validated\n+     * to be an instance field.  Do not pass arbitrary field names.\n@@ -1085,1 +1091,2 @@\n-     *         would throw {@code java.lang.NoSuchFieldException}.\n+     *         would throw {@code java.lang.NoSuchFieldException}, or if such\n+     *         a field is static\n@@ -1112,0 +1119,3 @@\n+     *\n+     * @throws NullPointerException if the field is {@code null}\n+     * @throws IllegalArgumentException if the field is not static\n@@ -1131,0 +1141,3 @@\n+     *\n+     * @throws NullPointerException if the field is {@code null}\n+     * @throws IllegalArgumentException if the field is not static\n@@ -3847,4 +3860,4 @@\n-    private native long objectFieldOffset0(Field f);\n-    private native long objectFieldOffset1(Class<?> c, String name);\n-    private native long staticFieldOffset0(Field f);\n-    private native Object staticFieldBase0(Field f);\n+    private native long objectFieldOffset0(Field f); \/\/ throws IAE\n+    private native long objectFieldOffset1(Class<?> c, String name); \/\/ throws InternalError\n+    private native long staticFieldOffset0(Field f); \/\/ throws IAE\n+    private native Object staticFieldBase0(Field f); \/\/ throws IAE\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/Unsafe.java","additions":18,"deletions":5,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+    static volatile int q;\n@@ -88,0 +89,10 @@\n+        } catch (IllegalArgumentException success) {}\n+    }\n+\n+    \/**\n+     * construction with static field throws IllegalArgumentException\n+     *\/\n+    public void testConstructor4() {\n+        try {\n+            updaterFor(\"q\");\n+            shouldThrow();\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/AtomicIntegerFieldUpdaterTest.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+    static volatile long q;\n@@ -91,0 +92,10 @@\n+    \/**\n+     * construction with static field throws IllegalArgumentException\n+     *\/\n+    public void testConstructor4() {\n+        try {\n+            updaterFor(\"q\");\n+            shouldThrow();\n+        } catch (IllegalArgumentException success) {}\n+    }\n+\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/AtomicLongFieldUpdaterTest.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+    static volatile Item q;\n@@ -103,0 +104,11 @@\n+    \/**\n+     * construction with static field throws IllegalArgumentException\n+     *\/\n+    public void testConstructor5() {\n+        try {\n+            updaterFor(\"q\");\n+            shouldThrow();\n+        } catch (IllegalArgumentException success) {}\n+    }\n+\n+\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/AtomicReferenceFieldUpdaterTest.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.reflect.Field;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static jdk.internal.misc.Unsafe.getUnsafe;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+\/*\n+ * @test\n+ * @bug 8361300\n+ * @summary Verify Unsafe memory address computation method contracts,\n+ *          exposed via sun.misc.Unsafe\n+ * @modules java.base\/jdk.internal.misc\n+ * @run junit AddressComputationContractTest\n+ *\/\n+public class AddressComputationContractTest {\n+\n+    int instanceField;\n+    static int staticField;\n+\n+    private static final Field INSTANCE_FIELD;\n+    private static final Field STATIC_FIELD;\n+\n+    static {\n+        try {\n+            INSTANCE_FIELD = AddressComputationContractTest.class.getDeclaredField(\"instanceField\");\n+            STATIC_FIELD = AddressComputationContractTest.class.getDeclaredField(\"staticField\");\n+        } catch (ReflectiveOperationException ex) {\n+            throw new ExceptionInInitializerError(ex);\n+        }\n+    }\n+\n+    @Test\n+    void objectFieldOffset() {\n+        assertDoesNotThrow(() -> getUnsafe().objectFieldOffset(INSTANCE_FIELD));\n+        assertThrows(NullPointerException.class, () -> getUnsafe().objectFieldOffset(null));\n+        assertThrows(IllegalArgumentException.class, () -> getUnsafe().objectFieldOffset(STATIC_FIELD));\n+    }\n+\n+    @Test\n+    void fastObjectFieldOffset() {\n+        assertDoesNotThrow(() -> getUnsafe().objectFieldOffset(AddressComputationContractTest.class, \"instanceField\"));\n+        assertThrows(NullPointerException.class, () -> getUnsafe().objectFieldOffset(null, \"instanceField\"));\n+        assertThrows(NullPointerException.class, () -> getUnsafe().objectFieldOffset(AddressComputationContractTest.class, null));\n+        assertThrows(InternalError.class, () -> getUnsafe().objectFieldOffset(AddressComputationContractTest.class, \"doesNotExist\"));\n+        assertThrows(InternalError.class, () -> getUnsafe().objectFieldOffset(AddressComputationContractTest.class, \"staticField\"));\n+    }\n+\n+    @Test\n+    void staticFieldOffset() {\n+        assertDoesNotThrow(() -> getUnsafe().staticFieldOffset(STATIC_FIELD));\n+        assertThrows(NullPointerException.class, () -> getUnsafe().staticFieldOffset(null));\n+        assertThrows(IllegalArgumentException.class, () -> getUnsafe().staticFieldOffset(INSTANCE_FIELD));\n+    }\n+\n+    @Test\n+    void staticFieldBase() {\n+        assertDoesNotThrow(() -> getUnsafe().staticFieldBase(STATIC_FIELD));\n+        assertThrows(NullPointerException.class, () -> getUnsafe().staticFieldBase(null));\n+        assertThrows(IllegalArgumentException.class, () -> getUnsafe().staticFieldBase(INSTANCE_FIELD));\n+    }\n+\n+    @Test\n+    void arrayBaseOffset() {\n+        assertDoesNotThrow(() -> getUnsafe().arrayBaseOffset(int[].class));\n+        assertThrows(NullPointerException.class, () -> getUnsafe().arrayBaseOffset(null));\n+        \/\/ Caused by VM trying to throw java.lang.InvalidClassException (there's one in java.io instead)\n+        assertThrows(NoClassDefFoundError.class, () -> getUnsafe().arrayBaseOffset(AddressComputationContractTest.class));\n+    }\n+\n+    @Test\n+    void arrayIndexScale() {\n+        assertDoesNotThrow(() -> getUnsafe().arrayIndexScale(int[].class));\n+        assertThrows(NullPointerException.class, () -> getUnsafe().arrayIndexScale(null));\n+        \/\/ Caused by VM trying to throw java.lang.InvalidClassException (there's one in java.io instead)\n+        assertThrows(NoClassDefFoundError.class, () -> getUnsafe().arrayIndexScale(AddressComputationContractTest.class));\n+    }\n+}\n","filename":"test\/jdk\/jdk\/internal\/misc\/Unsafe\/AddressComputationContractTest.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"}]}