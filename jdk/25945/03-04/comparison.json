{"files":[{"patch":"@@ -483,1 +483,3 @@\n-static jlong find_field_offset(jclass clazz, jstring name, TRAPS) {\n+\/\/ Finds the object field offset of a field with the matching name, or an error code\n+\/\/ Error code -1 is not found, -2 is static field\n+static jlong find_known_instance_field_offset(jclass clazz, jstring name, TRAPS) {\n@@ -492,1 +494,1 @@\n-  jint offset = -1;\n+  jint offset = -1; \/\/ Not found\n@@ -496,1 +498,0 @@\n-      \/\/ fail fast for static fields upon match\n@@ -499,0 +500,2 @@\n+      } else {\n+        offset = -2; \/\/ A static field\n@@ -504,1 +507,1 @@\n-    THROW_0(vmSymbols::java_lang_InternalError());\n+    return offset; \/\/ Error code\n@@ -533,2 +536,2 @@\n-UNSAFE_ENTRY(jlong, Unsafe_ObjectFieldOffset1(JNIEnv *env, jobject unsafe, jclass c, jstring name)) {\n-  return find_field_offset(c, name, THREAD);\n+UNSAFE_ENTRY(jlong, Unsafe_KnownObjectFieldOffset0(JNIEnv *env, jobject unsafe, jclass c, jstring name)) {\n+  return find_known_instance_field_offset(c, name, THREAD);\n@@ -888,1 +891,1 @@\n-    {CC \"objectFieldOffset1\", CC \"(\" CLS LANG \"String;)J\", FN_PTR(Unsafe_ObjectFieldOffset1)},\n+    {CC \"knownObjectFieldOffset0\", CC \"(\" CLS LANG \"String;)J\", FN_PTR(Unsafe_KnownObjectFieldOffset0)},\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1086,2 +1086,3 @@\n-     * Reports the location of the field with a given name in the storage\n-     * allocation of its class.\n+     * (For compile-time known instance fields in JDK code only) Reports the\n+     * location of the field with a given name in the storage allocation of its\n+     * class.\n@@ -1089,2 +1090,4 @@\n-     * Great care must be taken to ensure the passed field name is validated\n-     * to be an instance field.  Do not pass arbitrary field names.\n+     * This API is used to avoid creating reflective Objects in Java code at\n+     * startup.  This should not be used to find fields in non-trusted code.\n+     * Use the {@link #objectFieldOffset(Field) Field}-accepting version for\n+     * arbitrary fields instead.\n@@ -1094,3 +1097,1 @@\n-     *         in class {@code c}, i.e., if {@code c.getDeclaredField(name)}\n-     *         would throw {@code java.lang.NoSuchFieldException}, or if such\n-     *         a field is static\n+     *         in class {@code c} or if that field is static\n@@ -1105,1 +1106,10 @@\n-        return objectFieldOffset1(c, name);\n+        long result = knownObjectFieldOffset0(c, name);\n+        if (result < 0) {\n+            String type = switch ((int) result) {\n+                case -2 -> \"a static field\";\n+                case -1 -> \"not found\";\n+                default -> \"unknown\";\n+            };\n+            throw new InternalError(\"Field %s.%s %s\".formatted(c.getTypeName(), name, type));\n+        }\n+        return result;\n@@ -3865,1 +3875,1 @@\n-    private native long objectFieldOffset1(Class<?> c, String name); \/\/ throws InternalError\n+    private native long knownObjectFieldOffset0(Class<?> c, String name); \/\/ error code: -1 not found, -2 static\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/Unsafe.java","additions":19,"deletions":9,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -29,2 +29,1 @@\n-import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -69,2 +68,4 @@\n-        assertThrows(InternalError.class, () -> getUnsafe().objectFieldOffset(AddressComputationContractTest.class, \"doesNotExist\"));\n-        assertThrows(InternalError.class, () -> getUnsafe().objectFieldOffset(AddressComputationContractTest.class, \"staticField\"));\n+        var dneMsg = assertThrows(InternalError.class, () -> getUnsafe().objectFieldOffset(AddressComputationContractTest.class, \"doesNotExist\")).getMessage();\n+        assertTrue(dneMsg.contains(\"AddressComputationContractTest.doesNotExist\") && dneMsg.contains(\"not found\"), dneMsg);\n+        var staticMsg = assertThrows(InternalError.class, () -> getUnsafe().objectFieldOffset(AddressComputationContractTest.class, \"staticField\")).getMessage();\n+        assertTrue(staticMsg.contains(\"AddressComputationContractTest.staticField\") && staticMsg.contains(\"static field\"), staticMsg);\n","filename":"test\/jdk\/jdk\/internal\/misc\/Unsafe\/AddressComputationContractTest.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}