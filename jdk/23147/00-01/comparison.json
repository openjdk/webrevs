{"files":[{"patch":"@@ -78,0 +78,55 @@\n+ * <h2><a id=\"optional-services\">Optional Services<\/a><\/h2>\n+ *\n+ * Resolution requires that if a module {@code M} '{@code uses}' a service or\n+ * '{@code provides}' an implementation of a service, then the service must be available\n+ * to {@code M} at run time, either because {@code M} itself contains the service's\n+ * package or because {@code M} reads another module that exports the service's package.\n+ * However, it is sometimes desirable for the service's package to come from a module\n+ * that is optional at run time, as indicated by the use of 'requires static' in this\n+ * example:\n+ *\n+ * {@snippet :\n+ *     module M {\n+ *         requires static Y;\n+ *         uses p.S;\n+ *     }\n+ *\n+ *     module Y {\n+ *        exports p;\n+ *     }\n+ *  }\n+ *\n+ * Resolution is resilient when a service's package comes from a module that is optional\n+ * at run time. That is, if a module {@code M} has an optional dependency on some module\n+ * {@code Y}, but {@code Y} is not needed at run time ({@code Y} might be observable but\n+ * no-one reads it), then resolution at run time <i>assumes<\/i> that {@code Y} exported\n+ * the service's package at compile time. Resolution at run time does not attempt to\n+ * check whether {@code Y} is observable or (if it is observable) whether {@code Y}\n+ * exports the service's package.\n+ *\n+ * <p> The module that '{@code uses}' the service, or '{@code provides}' an implementation\n+ * of it, may depend directly on the optional module, as {@code M} does above, or may\n+ * depend indirectly on the optional module, as shown here:\n+ *\n+ *  {@snippet :\n+ *     module M {\n+ *         requires X;\n+ *         uses p.S;\n+ *     }\n+ *\n+ *     module X {\n+ *         requires static transitive Y;\n+ *     }\n+ *\n+ *     module Y {\n+ *         exports p;\n+ *     }\n+ * }\n+ *\n+ * In effect, the service that {@code M} '{@code uses}', or '{@code provides}' an\n+ * implementation of, is optional if it comes from an optional dependency. In this case,\n+ * code in {@code M} must be prepared to deal with the class or interface that denotes\n+ * the service being unavailable at run time. This is distinct from the more regular\n+ * case where the service is available but no implementations of the service are\n+ * available.\n+ *\n@@ -360,2 +415,2 @@\n-     *     <li><p> A module {@code M} declares that it \"{@code uses p.S}\" or\n-     *     \"{@code provides p.S with ...}\", but the package {@code p} is neither in\n+     *     <li><p> A module {@code M} declares that it '{@code uses p.S}' or\n+     *     '{@code provides p.S with ...}', but the package {@code p} is neither in\n@@ -365,1 +420,1 @@\n-     *         <li> {@code M} declares \"{@code requires static}\" for at least one\n+     *         <li> {@code M} declares '{@code requires static}' for at least one\n@@ -368,1 +423,1 @@\n-     *         \"{@code requires transitive static}\" for at least one module that is\n+     *         '{@code requires transitive static}' for at least one module that is\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/Configuration.java","additions":59,"deletions":4,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -194,0 +194,4 @@\n+ * <p> The {@linkplain java.lang.module.Configuration##optional-services Optional\n+ * Services} section of {@link java.lang.module.Configuration} shows how resolution\n+ * can be resilient when a service comes from a module that is optional at run time.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/package-info.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}