{"files":[{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2024 Red Hat and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.Argument;\n+import compiler.lib.ir_framework.Arguments;\n+import compiler.lib.ir_framework.CompilePhase;\n+import compiler.lib.ir_framework.IR;\n+import compiler.lib.ir_framework.IRNode;\n+import compiler.lib.ir_framework.Test;\n+import compiler.lib.ir_framework.TestFramework;\n+\n+\/**\n+ * @test\n+ * @bug 8327381\n+ * @summary Refactor boolean node tautology transformations\n+ * @library \/test\/lib \/\n+ * @run main compiler.c2.irTests.TestBoolNodeGvn\n+ *\/\n+public class TestBoolNodeGVN {\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+        testCorrectness();\n+    }\n+\n+    \/**\n+     * Test changing ((x & m) u<= m) or ((m & x) u<= m) to always true, same with ((x & m) u< m+1) and ((m & x) u< m+1)\n+     * The test is not applicable to x86 (32bit) for not having <code>Integer.compareUnsigned<\/code> intrinsified.\n+     *\/\n+    @Test\n+    @Arguments(values = {Argument.DEFAULT, Argument.DEFAULT})\n+    @IR(failOn = IRNode.CMP_U, phase = CompilePhase.AFTER_PARSING, applyIfPlatform = {\"x86\", \"false\"})\n+    public static boolean test(int x, int m) {\n+        return !(Integer.compareUnsigned((x & m), m) > 0) & \/\/ assert in inversions to generates the pattern looking for\n+                !(Integer.compareUnsigned((m & x), m) > 0) &\n+                Integer.compareUnsigned((x & m), m + 1) < 0 &\n+                Integer.compareUnsigned((m & x), m + 1) < 0;\n+    }\n+\n+    private static void testCorrectness() {\n+        int[] values = { 0, 1, 5, 8, 16, 42, 100, Integer.MAX_VALUE };\n+\n+        for (int x : values) {\n+            for (int m : values) {\n+                if (!test(x, m)) {\n+                    throw new RuntimeException(\"Bad result for x = \" + x + \" and m = \" + m + \", expected always true\");\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestBoolNodeGVN.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -1,72 +0,0 @@\n-\/*\n- * Copyright (c) 2024 Red Hat and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.c2.irTests;\n-\n-import compiler.lib.ir_framework.Argument;\n-import compiler.lib.ir_framework.Arguments;\n-import compiler.lib.ir_framework.CompilePhase;\n-import compiler.lib.ir_framework.IR;\n-import compiler.lib.ir_framework.IRNode;\n-import compiler.lib.ir_framework.Test;\n-import compiler.lib.ir_framework.TestFramework;\n-\n-\/**\n- * @test\n- * @bug 8327381\n- * @summary Refactor boolean node tautology transformations\n- * @library \/test\/lib \/\n- * @run driver compiler.c2.irTests.TestBoolNodeGvn\n- *\/\n-public class TestBoolNodeGvn {\n-    public static void main(String[] args) {\n-        TestFramework.run();\n-        testCorrectness();\n-    }\n-\n-    \/**\n-     * Test changing ((x & m) u<= m) or ((m & x) u<= m) to always true, same with ((x & m) u< m+1) and ((m & x) u< m+1)\n-     * The test is not applicable to x86 (32bit) for not having <code>Integer.compareUnsigned<\/code> intrinsified.\n-     *\/\n-    @Test\n-    @Arguments({Argument.DEFAULT, Argument.DEFAULT})\n-    @IR(failOn = IRNode.CMP_U, phase = CompilePhase.AFTER_PARSING, applyIfPlatform = {\"x86\", \"false\"})\n-    public static boolean test(int x, int m) {\n-        return !(Integer.compareUnsigned((x & m), m) > 0) \/\/ assert in inversions to generates the pattern looking for\n-                & !(Integer.compareUnsigned((m & x), m) > 0)\n-                & Integer.compareUnsigned((x & m), m + 1) < 0\n-                & Integer.compareUnsigned((m & x), m + 1) < 0;\n-    }\n-\n-    private static void testCorrectness() {\n-        int[] values = { 0, 1, 5, 8, 16, 42, 100, Integer.MAX_VALUE };\n-\n-        for (int x : values) {\n-            for (int m : values) {\n-                if (!test(x, m)) {\n-                    throw new RuntimeException(\"Bad result for x = \" + x + \" and m = \" + m + \", expected always true\");\n-                }\n-            }\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestBoolNodeGvn.java","additions":0,"deletions":72,"binary":false,"changes":72,"status":"deleted"}]}