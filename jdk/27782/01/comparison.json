{"files":[{"patch":"@@ -209,1 +209,1 @@\n-                dataOffsets[i] += xOffset*pixelStride+yOffset*scanlineStride;\n+                dataOffsets[i] += dataBuffer.getOffset() + xOffset*pixelStride+yOffset*scanlineStride;\n@@ -230,1 +230,1 @@\n-        this.dbOffsetPacked = dataBuffer.getOffset() -\n+        this.dbOffsetPacked = -\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/ByteInterleavedRaster.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.color.ColorSpace;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.ColorModel;\n+import java.awt.image.ComponentColorModel;\n+import java.awt.image.DataBuffer;\n+import java.awt.image.DataBufferByte;\n+import java.awt.image.Raster;\n+import java.awt.image.WritableRaster;\n+\n+\/*\n+ * @test\n+ * @bug  4954405\n+ * @summary Verify DataBuffer offsets are handled by ByteInterleavedRaster\n+ *\/\n+\n+public class ByteInterleavedOffsetsTest {\n+\n+    public static void main(String[] args) {\n+        byte[] data = { 0, -1, 0, 0 }; \/\/ only set the R sample.\n+        int[] bandOffsets = { 0, 1, 2 };\n+        DataBuffer databuf = new DataBufferByte(data, 3, 1);\n+        WritableRaster raster =\n+            Raster.createInterleavedRaster(databuf, 1, 1, 3, 3, bandOffsets, null);\n+        int[] pixels = raster.getPixels(0, 0, 1, 1, (int[])null);\n+        byte[] elements = (byte[])raster.getDataElements(0, 0, null);\n+        ColorModel colorModel = new ComponentColorModel(\n+                ColorSpace.getInstance(ColorSpace.CS_sRGB), false, false,\n+                ColorModel.OPAQUE, DataBuffer.TYPE_BYTE);\n+        BufferedImage img = new BufferedImage(colorModel, raster, false, null);\n+        int pixel = img.getRGB(0, 0);\n+\n+        System.out.println(\"PIXEL0=\" + Integer.toHexString(pixels[0]));\n+        System.out.println(\"PIXEL1=\" + Integer.toHexString(pixels[1]));\n+        System.out.println(\"PIXEL2=\" + Integer.toHexString(pixels[2]));\n+        System.out.println(\"ELEMENT0=\" + Integer.toHexString(elements[0] & 0xff));\n+        System.out.println(\"ELEMENT1=\" + Integer.toHexString(elements[1] & 0xff));\n+        System.out.println(\"ELEMENT2=\" + Integer.toHexString(elements[2] & 0xff));\n+        System.out.println(\"PIXEL=\" + Integer.toHexString(pixel));\n+\n+        if ((pixels[0] != 0xff) || (pixels[1] != 0) || (pixels[2] != 0)) {\n+            throw new RuntimeException(\"Unexpected pixels\");\n+        }\n+        if (((elements[0] & 0xff) != 0xff) || (elements[1] != 0) || (elements[2] != 0)) {\n+            throw new RuntimeException(\"Unexpected elements\");\n+        }\n+        if (pixel != 0xffff0000) {\n+            throw new RuntimeException(\"Unexpected pixel\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/image\/ByteInterleavedRasterOffsetsTest.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}