{"files":[{"patch":"@@ -141,0 +141,30 @@\n+    \/**\n+     * Constant for the most negative supported duration.\n+     *\n+     * @apiNote This and {@link Duration#MAX} constants are {@code Duration}\n+     * edge values. They are intended to be used in comparisons with other\n+     * durations or testing.\n+     *\n+     * They should never be added to or subtracted from an {@linkplain Instant\n+     * instant}, as doing so will cause overflow. Extreme care should be taken\n+     * when performing {@code Duration} arithmetic on them, such as adding\n+     * them to or subtracting them from another duration.\n+     *\n+     * @since 26\n+     *\/\n+    public static final Duration MIN = new Duration(Long.MIN_VALUE, 0);\n+    \/**\n+     * Constant for the most positive supported duration.\n+     *\n+     * @apiNote This and {@link Duration#MIN} constants are {@code Duration}\n+     * edge values. They are intended to be used in comparisons with other\n+     * durations or for testing.\n+     *\n+     * They should never be added to or subtracted from an {@linkplain Instant\n+     * instant}, as doing so will cause overflow. Extreme care should be taken\n+     * when performing {@code Duration} arithmetic on them, such as adding\n+     * them to or subtracting them from another duration.\n+     *\n+     * @since 26\n+     *\/\n+    public static final Duration MAX = new Duration(Long.MAX_VALUE, 999_999_999);\n","filename":"src\/java.base\/share\/classes\/java\/time\/Duration.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -187,2 +187,1 @@\n-     * The estimated duration of this unit is artificially defined as the largest duration\n-     * supported by {@link Duration}.\n+     * The estimated duration of this unit is artificially defined as {@link Duration#MAX}.\n@@ -190,1 +189,1 @@\n-    FOREVER(\"Forever\", Duration.ofSeconds(Long.MAX_VALUE, 999_999_999));\n+    FOREVER(\"Forever\", Duration.MAX);\n","filename":"src\/java.base\/share\/classes\/java\/time\/temporal\/ChronoUnit.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,0 +74,2 @@\n+import static org.testng.Assert.assertNotEquals;\n+import static org.testng.Assert.assertThrows;\n@@ -118,0 +120,38 @@\n+    @Test\n+    public void test_min() {\n+        assertEquals(Duration.MIN.getSeconds(), Long.MIN_VALUE);\n+        assertEquals(Duration.MIN.getNano(), 0);\n+        \/\/ no duration minimally less than MIN\n+        assertThrows(ArithmeticException.class, () -> Duration.MIN.minusNanos(1));\n+    }\n+\n+    @Test\n+    public void test_max() {\n+        assertEquals(Duration.MAX.getSeconds(), Long.MAX_VALUE);\n+        assertEquals(Duration.MAX.getNano(), 999_999_999);\n+        \/\/ no duration minimally greater than MAX\n+        assertThrows(ArithmeticException.class, () -> Duration.MAX.plusNanos(1));\n+    }\n+\n+    @Test\n+    public void test_constant_properties() {\n+        assertTrue(Duration.MIN.compareTo(Duration.MIN) == 0);\n+        assertEquals(Duration.MIN, Duration.MIN);\n+        assertTrue(Duration.ZERO.compareTo(Duration.ZERO) == 0);\n+        assertEquals(Duration.ZERO, Duration.ZERO);\n+        assertTrue(Duration.MAX.compareTo(Duration.MAX) == 0);\n+        assertEquals(Duration.MAX, Duration.MAX);\n+\n+        assertTrue(Duration.MIN.compareTo(Duration.ZERO) < 0);\n+        assertTrue(Duration.ZERO.compareTo(Duration.MIN) > 0);\n+        assertNotEquals(Duration.ZERO, Duration.MIN);\n+\n+        assertTrue(Duration.ZERO.compareTo(Duration.MAX) < 0);\n+        assertTrue(Duration.MAX.compareTo(Duration.ZERO) > 0);\n+        assertNotEquals(Duration.ZERO, Duration.MAX);\n+\n+        assertTrue(Duration.MIN.compareTo(Duration.MAX) < 0);\n+        assertTrue(Duration.MAX.compareTo(Duration.MIN) > 0);\n+        assertNotEquals(Duration.MIN, Duration.MAX);\n+    }\n+\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/TCKDuration.java","additions":41,"deletions":1,"binary":false,"changes":42,"status":"modified"}]}