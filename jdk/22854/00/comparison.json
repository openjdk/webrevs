{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -427,2 +427,6 @@\n-            return SECONDS_CACHE.computeIfAbsent(totalSeconds, totalSecs -> {\n-                ZoneOffset result = new ZoneOffset(totalSecs);\n+            Integer totalSecs = totalSeconds;\n+            ZoneOffset result = SECONDS_CACHE.get(totalSecs);\n+            if (result == null) {\n+                result = new ZoneOffset(totalSeconds);\n+                SECONDS_CACHE.putIfAbsent(totalSecs, result);\n+                result = SECONDS_CACHE.get(totalSecs);\n@@ -430,2 +434,2 @@\n-                return result;\n-            });\n+            }\n+            return result;\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZoneOffset.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -312,1 +312,7 @@\n-        return CACHE.computeIfAbsent(key, e -> createStore(e.getKey(), e.getValue()));\n+        Object store = CACHE.get(key);\n+        if (store == null) {\n+            store = createStore(field, locale);\n+            CACHE.putIfAbsent(key, store);\n+            store = CACHE.get(key);\n+        }\n+        return store;\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeTextProvider.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -163,1 +163,7 @@\n-        return CACHE.computeIfAbsent(locale, DecimalStyle::create);\n+        DecimalStyle info = CACHE.get(locale);\n+        if (info == null) {\n+            info = create(locale);\n+            CACHE.putIfAbsent(locale, info);\n+            info = CACHE.get(locale);\n+        }\n+        return info;\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DecimalStyle.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.time;\n+\n+import java.time.ZoneOffset;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@State(Scope.Benchmark)\n+@Fork(1)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 2)\n+@Measurement(iterations = 5)\n+public class ZoneOffsetBench {\n+\n+    @Benchmark\n+    public void ofTotalSeconds() {\n+        for (int i = 0; i < 1_000; i++) {\n+            ZoneOffset.ofTotalSeconds(0);\n+        }\n+    }\n+}\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/time\/ZoneOffsetBench.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"}]}