{"files":[{"patch":"@@ -4516,42 +4516,12 @@\n-     * Access of bytes at an index may be aligned or misaligned for {@code T},\n-     * with respect to the underlying memory address, {@code A} say, associated\n-     * with the array and index.\n-     * If access is misaligned then access for anything other than the\n-     * {@code get} and {@code set} access modes will result in an\n-     * {@code IllegalStateException}.  In such cases atomic access is only\n-     * guaranteed with respect to the largest power of two that divides the GCD\n-     * of {@code A} and the size (in bytes) of {@code T}.\n-     * If access is aligned then following access modes are supported and are\n-     * guaranteed to support atomic access:\n-     * <ul>\n-     * <li>read write access modes for all {@code T}, with the exception of\n-     *     access modes {@code get} and {@code set} for {@code long} and\n-     *     {@code double} on 32-bit platforms.\n-     * <li>atomic update access modes for {@code int}, {@code long},\n-     *     {@code float} or {@code double}.\n-     *     (Future major platform releases of the JDK may support additional\n-     *     types for certain currently unsupported access modes.)\n-     * <li>numeric atomic update access modes for {@code int} and {@code long}.\n-     *     (Future major platform releases of the JDK may support additional\n-     *     numeric types for certain currently unsupported access modes.)\n-     * <li>bitwise atomic update access modes for {@code int} and {@code long}.\n-     *     (Future major platform releases of the JDK may support additional\n-     *     numeric types for certain currently unsupported access modes.)\n-     * <\/ul>\n-     * <p>\n-     * Misaligned access, and therefore atomicity guarantees, may be determined\n-     * for {@code byte[]} arrays without operating on a specific array.  Given\n-     * an {@code index}, {@code T} and its corresponding boxed type,\n-     * {@code T_BOX}, misalignment may be determined as follows:\n-     * <pre>{@code\n-     * int sizeOfT = T_BOX.BYTES;  \/\/ size in bytes of T\n-     * int misalignedAtZeroIndex = ByteBuffer.wrap(new byte[0]).\n-     *     alignmentOffset(0, sizeOfT);\n-     * int misalignedAtIndex = (misalignedAtZeroIndex + index) % sizeOfT;\n-     * boolean isMisaligned = misalignedAtIndex != 0;\n-     * }<\/pre>\n-     * <p>\n-     * If the variable type is {@code float} or {@code double} then atomic\n-     * update access modes compare values using their bitwise representation\n-     * (see {@link Float#floatToRawIntBits} and\n-     * {@link Double#doubleToRawLongBits}, respectively).\n+     * Only plain {@linkplain VarHandle.AccessMode#GET get} and {@linkplain VarHandle.AccessMode#SET set}\n+     * access modes are supported by the returned var handle. For all other access modes, an\n+     * {@link UnsupportedOperationException} will be thrown.\n+     *\n+     * @apiNote if access modes other than plain access are required, clients should\n+     * consider using off-heap memory through\n+     * {@linkplain java.nio.ByteBuffer#allocateDirect(int) direct byte buffers} or\n+     * off-heap {@linkplain java.lang.foreign.MemorySegment memory segments},\n+     * or memory segments backed by a\n+     * {@linkplain java.lang.foreign.MemorySegment#ofArray(long[]) {@code long[]}},\n+     * for which stronger alignment guarantees can be made.\n+     *\n@@ -4603,1 +4573,7 @@\n-     * Access of bytes at an index may be aligned or misaligned for {@code T},\n+     * For heap byte buffers, access is always unaligned. As a result, only the plain\n+     * {@linkplain VarHandle.AccessMode#GET get}\n+     * and {@linkplain VarHandle.AccessMode#SET set} access modes are supported by the\n+     * returned var handle. For all other access modes, an {@link IllegalStateException}\n+     * will be thrown.\n+     * <p>\n+     * For direct buffers only, access of bytes at an index may be aligned or misaligned for {@code T},\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":19,"deletions":43,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    \n+\n@@ -118,8 +118,0 @@\n-        @ForceInline\n-        static long address(byte[] ba, int index) {\n-            long address = ((long) index) + Unsafe.ARRAY_BYTE_BASE_OFFSET;\n-            if ((address & ALIGN) != 0)\n-                throw newIllegalStateExceptionForMisalignedAccess(index);\n-            return address;\n-        }\n-\n@@ -163,413 +155,0 @@\n-        @ForceInline\n-        static $type$ getVolatile(VarHandle ob, Object oba, int index) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            return convEndian(handle.be,\n-                              UNSAFE.get$RawType$Volatile(\n-                                      ba,\n-                                      address(ba, index(ba, index))));\n-        }\n-\n-        @ForceInline\n-        static void setVolatile(VarHandle ob, Object oba, int index, $type$ value) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            UNSAFE.put$RawType$Volatile(\n-                    ba,\n-                    address(ba, index(ba, index)),\n-                    convEndian(handle.be, value));\n-        }\n-\n-        @ForceInline\n-        static $type$ getAcquire(VarHandle ob, Object oba, int index) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            return convEndian(handle.be,\n-                              UNSAFE.get$RawType$Acquire(\n-                                      ba,\n-                                      address(ba, index(ba, index))));\n-        }\n-\n-        @ForceInline\n-        static void setRelease(VarHandle ob, Object oba, int index, $type$ value) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            UNSAFE.put$RawType$Release(\n-                    ba,\n-                    address(ba, index(ba, index)),\n-                    convEndian(handle.be, value));\n-        }\n-\n-        @ForceInline\n-        static $type$ getOpaque(VarHandle ob, Object oba, int index) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            return convEndian(handle.be,\n-                              UNSAFE.get$RawType$Opaque(\n-                                      ba,\n-                                      address(ba, index(ba, index))));\n-        }\n-\n-        @ForceInline\n-        static void setOpaque(VarHandle ob, Object oba, int index, $type$ value) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            UNSAFE.put$RawType$Opaque(\n-                    ba,\n-                    address(ba, index(ba, index)),\n-                    convEndian(handle.be, value));\n-        }\n-#if[CAS]\n-\n-        @ForceInline\n-        static boolean compareAndSet(VarHandle ob, Object oba, int index, $type$ expected, $type$ value) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-#if[Object]\n-            return UNSAFE.compareAndSetReference(\n-                    ba,\n-                    address(ba, index(ba, index)),\n-                    convEndian(handle.be, expected), convEndian(handle.be, value));\n-#else[Object]\n-            return UNSAFE.compareAndSet$RawType$(\n-                    ba,\n-                    address(ba, index(ba, index)),\n-                    convEndian(handle.be, expected), convEndian(handle.be, value));\n-#end[Object]\n-        }\n-\n-        @ForceInline\n-        static $type$ compareAndExchange(VarHandle ob, Object oba, int index, $type$ expected, $type$ value) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            return convEndian(handle.be,\n-                              UNSAFE.compareAndExchange$RawType$(\n-                                      ba,\n-                                      address(ba, index(ba, index)),\n-                                      convEndian(handle.be, expected), convEndian(handle.be, value)));\n-        }\n-\n-        @ForceInline\n-        static $type$ compareAndExchangeAcquire(VarHandle ob, Object oba, int index, $type$ expected, $type$ value) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            return convEndian(handle.be,\n-                              UNSAFE.compareAndExchange$RawType$Acquire(\n-                                      ba,\n-                                      address(ba, index(ba, index)),\n-                                      convEndian(handle.be, expected), convEndian(handle.be, value)));\n-        }\n-\n-        @ForceInline\n-        static $type$ compareAndExchangeRelease(VarHandle ob, Object oba, int index, $type$ expected, $type$ value) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            return convEndian(handle.be,\n-                              UNSAFE.compareAndExchange$RawType$Release(\n-                                      ba,\n-                                      address(ba, index(ba, index)),\n-                                      convEndian(handle.be, expected), convEndian(handle.be, value)));\n-        }\n-\n-        @ForceInline\n-        static boolean weakCompareAndSetPlain(VarHandle ob, Object oba, int index, $type$ expected, $type$ value) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            return UNSAFE.weakCompareAndSet$RawType$Plain(\n-                    ba,\n-                    address(ba, index(ba, index)),\n-                    convEndian(handle.be, expected), convEndian(handle.be, value));\n-        }\n-\n-        @ForceInline\n-        static boolean weakCompareAndSet(VarHandle ob, Object oba, int index, $type$ expected, $type$ value) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            return UNSAFE.weakCompareAndSet$RawType$(\n-                    ba,\n-                    address(ba, index(ba, index)),\n-                    convEndian(handle.be, expected), convEndian(handle.be, value));\n-        }\n-\n-        @ForceInline\n-        static boolean weakCompareAndSetAcquire(VarHandle ob, Object oba, int index, $type$ expected, $type$ value) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            return UNSAFE.weakCompareAndSet$RawType$Acquire(\n-                    ba,\n-                    address(ba, index(ba, index)),\n-                    convEndian(handle.be, expected), convEndian(handle.be, value));\n-        }\n-\n-        @ForceInline\n-        static boolean weakCompareAndSetRelease(VarHandle ob, Object oba, int index, $type$ expected, $type$ value) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            return UNSAFE.weakCompareAndSet$RawType$Release(\n-                    ba,\n-                    address(ba, index(ba, index)),\n-                    convEndian(handle.be, expected), convEndian(handle.be, value));\n-        }\n-\n-        @ForceInline\n-        static $type$ getAndSet(VarHandle ob, Object oba, int index, $type$ value) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-#if[Object]\n-            return convEndian(handle.be,\n-                              UNSAFE.getAndSetReference(\n-                                      ba,\n-                                      address(ba, index(ba, index)),\n-                                      convEndian(handle.be, value)));\n-#else[Object]\n-            return convEndian(handle.be,\n-                              UNSAFE.getAndSet$RawType$(\n-                                      ba,\n-                                      address(ba, index(ba, index)),\n-                                      convEndian(handle.be, value)));\n-#end[Object]\n-        }\n-\n-        @ForceInline\n-        static $type$ getAndSetAcquire(VarHandle ob, Object oba, int index, $type$ value) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            return convEndian(handle.be,\n-                              UNSAFE.getAndSet$RawType$Acquire(\n-                                      ba,\n-                                      address(ba, index(ba, index)),\n-                                      convEndian(handle.be, value)));\n-        }\n-\n-        @ForceInline\n-        static $type$ getAndSetRelease(VarHandle ob, Object oba, int index, $type$ value) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            return convEndian(handle.be,\n-                              UNSAFE.getAndSet$RawType$Release(\n-                                      ba,\n-                                      address(ba, index(ba, index)),\n-                                      convEndian(handle.be, value)));\n-        }\n-#end[CAS]\n-#if[AtomicAdd]\n-\n-        @ForceInline\n-        static $type$ getAndAdd(VarHandle ob, Object oba, int index, $type$ delta) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            if (handle.be == BE) {\n-                return UNSAFE.getAndAdd$RawType$(\n-                        ba,\n-                        address(ba, index(ba, index)),\n-                        delta);\n-            } else {\n-                return getAndAddConvEndianWithCAS(ba, index, delta);\n-            }\n-        }\n-\n-        @ForceInline\n-        static $type$ getAndAddAcquire(VarHandle ob, Object oba, int index, $type$ delta) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            if (handle.be == BE) {\n-                return UNSAFE.getAndAdd$RawType$Acquire(\n-                        ba,\n-                        address(ba, index(ba, index)),\n-                        delta);\n-            } else {\n-                return getAndAddConvEndianWithCAS(ba, index, delta);\n-            }\n-        }\n-\n-        @ForceInline\n-        static $type$ getAndAddRelease(VarHandle ob, Object oba, int index, $type$ delta) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            if (handle.be == BE) {\n-                return UNSAFE.getAndAdd$RawType$Release(\n-                        ba,\n-                        address(ba, index(ba, index)),\n-                        delta);\n-            } else {\n-                return getAndAddConvEndianWithCAS(ba, index, delta);\n-            }\n-        }\n-\n-        @ForceInline\n-        static $type$ getAndAddConvEndianWithCAS(byte[] ba, int index, $type$ delta) {\n-            $type$ nativeExpectedValue, expectedValue;\n-            long offset = address(ba, index(ba, index));\n-            do {\n-                nativeExpectedValue = UNSAFE.get$RawType$Volatile(ba, offset);\n-                expectedValue = $RawBoxType$.reverseBytes(nativeExpectedValue);\n-            } while (!UNSAFE.weakCompareAndSet$RawType$(ba, offset,\n-                    nativeExpectedValue, $RawBoxType$.reverseBytes(expectedValue + delta)));\n-            return expectedValue;\n-        }\n-#end[AtomicAdd]\n-#if[Bitwise]\n-\n-        @ForceInline\n-        static $type$ getAndBitwiseOr(VarHandle ob, Object oba, int index, $type$ value) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            if (handle.be == BE) {\n-                return UNSAFE.getAndBitwiseOr$RawType$(\n-                        ba,\n-                        address(ba, index(ba, index)),\n-                        value);\n-            } else {\n-                return getAndBitwiseOrConvEndianWithCAS(ba, index, value);\n-            }\n-        }\n-\n-        @ForceInline\n-        static $type$ getAndBitwiseOrRelease(VarHandle ob, Object oba, int index, $type$ value) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            if (handle.be == BE) {\n-                return UNSAFE.getAndBitwiseOr$RawType$Release(\n-                        ba,\n-                        address(ba, index(ba, index)),\n-                        value);\n-            } else {\n-                return getAndBitwiseOrConvEndianWithCAS(ba, index, value);\n-            }\n-        }\n-\n-        @ForceInline\n-        static $type$ getAndBitwiseOrAcquire(VarHandle ob, Object oba, int index, $type$ value) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            if (handle.be == BE) {\n-                return UNSAFE.getAndBitwiseOr$RawType$Acquire(\n-                        ba,\n-                        address(ba, index(ba, index)),\n-                        value);\n-            } else {\n-                return getAndBitwiseOrConvEndianWithCAS(ba, index, value);\n-            }\n-        }\n-\n-        @ForceInline\n-        static $type$ getAndBitwiseOrConvEndianWithCAS(byte[] ba, int index, $type$ value) {\n-            $type$ nativeExpectedValue, expectedValue;\n-            long offset = address(ba, index(ba, index));\n-            do {\n-                nativeExpectedValue = UNSAFE.get$RawType$Volatile(ba, offset);\n-                expectedValue = $RawBoxType$.reverseBytes(nativeExpectedValue);\n-            } while (!UNSAFE.weakCompareAndSet$RawType$(ba, offset,\n-                    nativeExpectedValue, $RawBoxType$.reverseBytes(expectedValue | value)));\n-            return expectedValue;\n-        }\n-\n-        @ForceInline\n-        static $type$ getAndBitwiseAnd(VarHandle ob, Object oba, int index, $type$ value) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            if (handle.be == BE) {\n-                return UNSAFE.getAndBitwiseAnd$RawType$(\n-                        ba,\n-                        address(ba, index(ba, index)),\n-                        value);\n-            } else {\n-                return getAndBitwiseAndConvEndianWithCAS(ba, index, value);\n-            }\n-        }\n-\n-        @ForceInline\n-        static $type$ getAndBitwiseAndRelease(VarHandle ob, Object oba, int index, $type$ value) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            if (handle.be == BE) {\n-                return UNSAFE.getAndBitwiseAnd$RawType$Release(\n-                        ba,\n-                        address(ba, index(ba, index)),\n-                        value);\n-            } else {\n-                return getAndBitwiseAndConvEndianWithCAS(ba, index, value);\n-            }\n-        }\n-\n-        @ForceInline\n-        static $type$ getAndBitwiseAndAcquire(VarHandle ob, Object oba, int index, $type$ value) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            if (handle.be == BE) {\n-                return UNSAFE.getAndBitwiseAnd$RawType$Acquire(\n-                        ba,\n-                        address(ba, index(ba, index)),\n-                        value);\n-            } else {\n-                return getAndBitwiseAndConvEndianWithCAS(ba, index, value);\n-            }\n-        }\n-\n-        @ForceInline\n-        static $type$ getAndBitwiseAndConvEndianWithCAS(byte[] ba, int index, $type$ value) {\n-            $type$ nativeExpectedValue, expectedValue;\n-            long offset = address(ba, index(ba, index));\n-            do {\n-                nativeExpectedValue = UNSAFE.get$RawType$Volatile(ba, offset);\n-                expectedValue = $RawBoxType$.reverseBytes(nativeExpectedValue);\n-            } while (!UNSAFE.weakCompareAndSet$RawType$(ba, offset,\n-                    nativeExpectedValue, $RawBoxType$.reverseBytes(expectedValue & value)));\n-            return expectedValue;\n-        }\n-\n-        @ForceInline\n-        static $type$ getAndBitwiseXor(VarHandle ob, Object oba, int index, $type$ value) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            if (handle.be == BE) {\n-                return UNSAFE.getAndBitwiseXor$RawType$(\n-                        ba,\n-                        address(ba, index(ba, index)),\n-                        value);\n-            } else {\n-                return getAndBitwiseXorConvEndianWithCAS(ba, index, value);\n-            }\n-        }\n-\n-        @ForceInline\n-        static $type$ getAndBitwiseXorRelease(VarHandle ob, Object oba, int index, $type$ value) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            if (handle.be == BE) {\n-                return UNSAFE.getAndBitwiseXor$RawType$Release(\n-                        ba,\n-                        address(ba, index(ba, index)),\n-                        value);\n-            } else {\n-                return getAndBitwiseXorConvEndianWithCAS(ba, index, value);\n-            }\n-        }\n-\n-        @ForceInline\n-        static $type$ getAndBitwiseXorAcquire(VarHandle ob, Object oba, int index, $type$ value) {\n-            ArrayHandle handle = (ArrayHandle)ob;\n-            byte[] ba = (byte[]) oba;\n-            if (handle.be == BE) {\n-                return UNSAFE.getAndBitwiseXor$RawType$Acquire(\n-                        ba,\n-                        address(ba, index(ba, index)),\n-                        value);\n-            } else {\n-                return getAndBitwiseXorConvEndianWithCAS(ba, index, value);\n-            }\n-        }\n-\n-        @ForceInline\n-        static $type$ getAndBitwiseXorConvEndianWithCAS(byte[] ba, int index, $type$ value) {\n-            $type$ nativeExpectedValue, expectedValue;\n-            long offset = address(ba, index(ba, index));\n-            do {\n-                nativeExpectedValue = UNSAFE.get$RawType$Volatile(ba, offset);\n-                expectedValue = $RawBoxType$.reverseBytes(nativeExpectedValue);\n-            } while (!UNSAFE.weakCompareAndSet$RawType$(ba, offset,\n-                    nativeExpectedValue, $RawBoxType$.reverseBytes(expectedValue ^ value)));\n-            return expectedValue;\n-        }\n-#end[Bitwise]\n-\n@@ -637,0 +216,8 @@\n+        @ForceInline\n+        static Object checkNullHeapBase(Object hb) {\n+            if (hb != null) {\n+                throw new IllegalStateException(\"Atomic access not supported for heap buffer\");\n+            }\n+            return hb;\n+        }\n+\n@@ -680,1 +267,1 @@\n-                                      UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                                      checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -689,1 +276,1 @@\n-                    UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                    checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -700,1 +287,1 @@\n-                                      UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                                      checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -709,1 +296,1 @@\n-                    UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                    checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -720,1 +307,1 @@\n-                                      UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                                      checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -729,1 +316,1 @@\n-                    UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                    checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -739,6 +326,0 @@\n-#if[Object]\n-            return SCOPED_MEMORY_ACCESS.compareAndSetReference(session(bb),\n-                    UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n-                    address(bb, indexRO(bb, index)),\n-                    convEndian(handle.be, expected), convEndian(handle.be, value));\n-#else[Object]\n@@ -746,1 +327,1 @@\n-                    UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                    checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -749,1 +330,0 @@\n-#end[Object]\n@@ -758,1 +338,1 @@\n-                                      UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                                      checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -769,1 +349,1 @@\n-                                      UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                                      checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -780,1 +360,1 @@\n-                                      UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                                      checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -790,1 +370,1 @@\n-                    UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                    checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -800,1 +380,1 @@\n-                    UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                    checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -810,1 +390,1 @@\n-                    UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                    checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -820,1 +400,1 @@\n-                    UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                    checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -829,7 +409,0 @@\n-#if[Object]\n-            return convEndian(handle.be,\n-                              SCOPED_MEMORY_ACCESS.getAndSetReference(session(bb),\n-                                      UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n-                                      address(bb, indexRO(bb, index)),\n-                                      convEndian(handle.be, value)));\n-#else[Object]\n@@ -838,1 +411,1 @@\n-                                      UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                                      checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -841,1 +414,0 @@\n-#end[Object]\n@@ -850,1 +422,1 @@\n-                                      UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                                      checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -861,1 +433,1 @@\n-                                      UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                                      checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -874,1 +446,1 @@\n-                        UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                        checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -888,1 +460,1 @@\n-                        UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                        checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -902,1 +474,1 @@\n-                        UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                        checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -913,1 +485,1 @@\n-            Object base = UNSAFE.getReference(bb, BYTE_BUFFER_HB);\n+            Object base = checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB));\n@@ -931,1 +503,1 @@\n-                        UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                        checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -945,1 +517,1 @@\n-                        UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                        checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -959,1 +531,1 @@\n-                        UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                        checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -970,1 +542,1 @@\n-            Object base = UNSAFE.getReference(bb, BYTE_BUFFER_HB);\n+            Object base = checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB));\n@@ -986,1 +558,1 @@\n-                        UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                        checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -1000,1 +572,1 @@\n-                        UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                        checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -1014,1 +586,1 @@\n-                        UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                        checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -1025,1 +597,1 @@\n-            Object base = UNSAFE.getReference(bb, BYTE_BUFFER_HB);\n+            Object base = checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB));\n@@ -1042,1 +614,1 @@\n-                        UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                        checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -1056,1 +628,1 @@\n-                        UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                        checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -1070,1 +642,1 @@\n-                        UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                        checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB)),\n@@ -1081,1 +653,1 @@\n-            Object base = UNSAFE.getReference(bb, BYTE_BUFFER_HB);\n+            Object base = checkNullHeapBase(UNSAFE.getReference(bb, BYTE_BUFFER_HB));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleByteArrayView.java.template","additions":42,"deletions":470,"binary":false,"changes":512,"status":"modified"},{"patch":"@@ -1560,1 +1560,1 @@\n-    \n+\n@@ -1574,1 +1574,1 @@\n-    \n+\n@@ -1580,1 +1580,1 @@\n-    public \n+    public\n@@ -1594,1 +1594,1 @@\n-    public \n+    public\n@@ -1608,1 +1608,1 @@\n-    public \n+    public\n@@ -1622,1 +1622,1 @@\n-    public \n+    public\n@@ -1636,1 +1636,1 @@\n-    public \n+    public\n@@ -2211,1 +2211,1 @@\n-     * \n+     *\n@@ -2216,4 +2216,0 @@\n-     * @implNote\n-     * This implementation throws {@code UnsupportedOperationException} for\n-     * non-direct buffers when the given unit size is greater then {@code 8}.\n-     *\n@@ -2234,7 +2230,1 @@\n-     *         If the native platform does not guarantee stable alignment offset\n-     *         values for the given unit size when managing the memory regions\n-     *         of buffers of the same kind as this buffer (direct or\n-     *         non-direct).  For example, if garbage collection would result\n-     *         in the moving of a memory region covered by a non-direct buffer\n-     *         from one location to another and both locations have different\n-     *         alignment characteristics.\n+     *         If the buffer is non-direct, and {@code unitSize > 1}\n@@ -2250,1 +2240,1 @@\n-        if (unitSize > 8 && !isDirect())\n+        if (unitSize > 1 && !isDirect())\n@@ -2290,4 +2280,0 @@\n-     * @implNote\n-     * This implementation throws {@code UnsupportedOperationException} for\n-     * non-direct buffers when the given unit size is greater then {@code 8}.\n-     *\n@@ -2303,7 +2289,1 @@\n-     *         If the native platform does not guarantee stable aligned slices\n-     *         for the given unit size when managing the memory regions\n-     *         of buffers of the same kind as this buffer (direct or\n-     *         non-direct).  For example, if garbage collection would result\n-     *         in the moving of a memory region covered by a non-direct buffer\n-     *         from one location to another and both locations have different\n-     *         alignment characteristics.\n+     *         If the buffer is non-direct, and {@code unitSize > 1}\n","filename":"src\/java.base\/share\/classes\/java\/nio\/X-Buffer.java.template","additions":11,"deletions":31,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -162,1 +162,3 @@\n-        VarHandleSource(VarHandle vh, MemoryMode... modes) {\n+        final boolean supportsAtomicAccess;\n+\n+        VarHandleSource(VarHandle vh, boolean supportsAtomicAccess, MemoryMode... modes) {\n@@ -164,0 +166,1 @@\n+            this.supportsAtomicAccess = supportsAtomicAccess;\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleBaseByteArrayTest.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-                    MethodHandles.byteArrayViewVarHandle(arrayType, bo),\n+                    MethodHandles.byteArrayViewVarHandle(arrayType, bo), false,\n@@ -80,1 +80,1 @@\n-                    MethodHandles.byteBufferViewVarHandle(arrayType, bo),\n+                    MethodHandles.byteBufferViewVarHandle(arrayType, bo), true,\n@@ -117,32 +117,42 @@\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_VOLATILE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_VOLATILE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_RELEASE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_OPAQUE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_OPAQUE));\n-\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_SET));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_RELEASE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_PLAIN));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_RELEASE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_RELEASE));\n-\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_RELEASE));\n-\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_RELEASE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_RELEASE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_RELEASE));\n+        if (vhs.supportsAtomicAccess) {\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_VOLATILE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_VOLATILE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_RELEASE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_OPAQUE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_OPAQUE));\n+        } else {\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_VOLATILE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.SET_VOLATILE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.SET_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_OPAQUE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.SET_OPAQUE));\n+        }\n+\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_SET));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_PLAIN));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_RELEASE));\n+\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_RELEASE));\n+\n+\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_RELEASE));\n@@ -183,3 +193,0 @@\n-                        cases.add(new VarHandleSourceAccessTestCase(\n-                                \"misaligned access\", bav, vh, h -> testArrayMisalignedAccess(bas, h),\n-                                false));\n@@ -210,3 +217,5 @@\n-                        cases.add(new VarHandleSourceAccessTestCase(\n-                                \"misaligned access\", bav, vh, h -> testArrayMisalignedAccess(bbs, h),\n-                                false));\n+                        if (bbs.s.isDirect()) {\n+                            cases.add(new VarHandleSourceAccessTestCase(\n+                                    \"misaligned access\", bav, vh, h -> testArrayMisalignedAccess(bbs, h),\n+                                    false));\n+                        }\n@@ -246,27 +255,0 @@\n-\n-        checkNPE(() -> {\n-            char x = (char) vh.getVolatile(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            char x = (char) vh.getAcquire(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            char x = (char) vh.getOpaque(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.setVolatile(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.setRelease(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.setOpaque(array, ci, VALUE_1);\n-        });\n-\n-\n-\n@@ -426,1 +408,1 @@\n-        if (readOnly) {\n+        if (readOnly && array.isDirect()) {\n@@ -438,0 +420,5 @@\n+\n+\n+        }\n+\n+        if (array.isDirect()) {\n@@ -481,1 +468,0 @@\n-\n@@ -493,1 +479,0 @@\n-\n@@ -529,2 +514,12 @@\n-        }\n-        else {\n+        } else {\n+            checkISE(() -> {\n+                vh.setVolatile(array, ci, VALUE_1);\n+            });\n+\n+            checkISE(() -> {\n+                vh.setRelease(array, ci, VALUE_1);\n+            });\n+\n+            checkISE(() -> {\n+                vh.setOpaque(array, ci, VALUE_1);\n+            });\n@@ -639,27 +634,0 @@\n-\n-            checkAIOOBE(() -> {\n-                char x = (char) vh.getVolatile(array, ci);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                char x = (char) vh.getAcquire(array, ci);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                char x = (char) vh.getOpaque(array, ci);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                vh.setVolatile(array, ci, VALUE_1);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                vh.setRelease(array, ci, VALUE_1);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                vh.setOpaque(array, ci, VALUE_1);\n-            });\n-\n-\n-\n@@ -689,17 +657,1 @@\n-            checkIOOBE(() -> {\n-                char x = (char) vh.getVolatile(array, ci);\n-            });\n-\n-            checkIOOBE(() -> {\n-                char x = (char) vh.getAcquire(array, ci);\n-            });\n-\n-            checkIOOBE(() -> {\n-                char x = (char) vh.getOpaque(array, ci);\n-            });\n-\n-            if (!readOnly) {\n-                checkIOOBE(() -> {\n-                    vh.setVolatile(array, ci, VALUE_1);\n-                });\n-\n+            if (array.isDirect()) {\n@@ -707,26 +659,0 @@\n-                    vh.setRelease(array, ci, VALUE_1);\n-                });\n-\n-                checkIOOBE(() -> {\n-                    vh.setOpaque(array, ci, VALUE_1);\n-                });\n-\n-\n-\n-            }\n-        }\n-    }\n-\n-    static void testArrayMisalignedAccess(ByteArraySource bs, VarHandleSource vhs) throws Throwable {\n-        VarHandle vh = vhs.s;\n-        byte[] array = bs.s;\n-\n-        int misalignmentAtZero = ByteBuffer.wrap(array).alignmentOffset(0, SIZE);\n-\n-        int length = array.length - SIZE + 1;\n-        for (int i = 0; i < length; i++) {\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n-            final int ci = i;\n-\n-            if (!iAligned) {\n-                checkISE(() -> {\n@@ -736,1 +662,1 @@\n-                checkISE(() -> {\n+                checkIOOBE(() -> {\n@@ -740,1 +666,1 @@\n-                checkISE(() -> {\n+                checkIOOBE(() -> {\n@@ -744,3 +670,4 @@\n-                checkISE(() -> {\n-                    vh.setVolatile(array, ci, VALUE_1);\n-                });\n+                if (!readOnly) {\n+                    checkIOOBE(() -> {\n+                        vh.setVolatile(array, ci, VALUE_1);\n+                    });\n@@ -748,3 +675,7 @@\n-                checkISE(() -> {\n-                    vh.setRelease(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        vh.setRelease(array, ci, VALUE_1);\n+                    });\n+\n+                    checkIOOBE(() -> {\n+                        vh.setOpaque(array, ci, VALUE_1);\n+                    });\n@@ -752,3 +683,0 @@\n-                checkISE(() -> {\n-                    vh.setOpaque(array, ci, VALUE_1);\n-                });\n@@ -757,0 +685,1 @@\n+                }\n@@ -798,3 +727,0 @@\n-\n-\n-\n@@ -810,2 +736,0 @@\n-        int misalignmentAtZero = ByteBuffer.wrap(array).alignmentOffset(0, SIZE);\n-\n@@ -815,2 +739,0 @@\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n-\n@@ -823,26 +745,0 @@\n-\n-\n-            if (iAligned) {\n-                \/\/ Volatile\n-                {\n-                    vh.setVolatile(array, i, VALUE_2);\n-                    char x = (char) vh.getVolatile(array, i);\n-                    assertEquals(x, VALUE_2, \"setVolatile char value\");\n-                }\n-\n-                \/\/ Lazy\n-                {\n-                    vh.setRelease(array, i, VALUE_1);\n-                    char x = (char) vh.getAcquire(array, i);\n-                    assertEquals(x, VALUE_1, \"setRelease char value\");\n-                }\n-\n-                \/\/ Opaque\n-                {\n-                    vh.setOpaque(array, i, VALUE_2);\n-                    char x = (char) vh.getOpaque(array, i);\n-                    assertEquals(x, VALUE_2, \"setOpaque char value\");\n-                }\n-\n-\n-            }\n@@ -857,2 +753,0 @@\n-        int misalignmentAtZero = array.alignmentOffset(0, SIZE);\n-\n@@ -862,1 +756,1 @@\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n+            boolean iAligned = array.isDirect() ? ((i + array.alignmentOffset(0, SIZE)) & (SIZE - 1)) == 0 : false;\n@@ -902,2 +796,0 @@\n-        int misalignmentAtZero = array.alignmentOffset(0, SIZE);\n-\n@@ -910,1 +802,1 @@\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n+            boolean iAligned = array.isDirect() ? ((i + array.alignmentOffset(0, SIZE)) & (SIZE - 1)) == 0 : false;\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestByteArrayAsChar.java","additions":84,"deletions":192,"binary":false,"changes":276,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-                    MethodHandles.byteArrayViewVarHandle(arrayType, bo),\n+                    MethodHandles.byteArrayViewVarHandle(arrayType, bo), false,\n@@ -80,1 +80,1 @@\n-                    MethodHandles.byteBufferViewVarHandle(arrayType, bo),\n+                    MethodHandles.byteBufferViewVarHandle(arrayType, bo), true,\n@@ -117,32 +117,56 @@\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_VOLATILE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_VOLATILE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_RELEASE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_OPAQUE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_OPAQUE));\n-\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_SET));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_RELEASE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_PLAIN));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_RELEASE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_RELEASE));\n-\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_RELEASE));\n-\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_RELEASE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_RELEASE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_RELEASE));\n+        if (vhs.supportsAtomicAccess) {\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_VOLATILE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_VOLATILE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_RELEASE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_OPAQUE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_OPAQUE));\n+        } else {\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_VOLATILE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.SET_VOLATILE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.SET_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_OPAQUE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.SET_OPAQUE));\n+        }\n+\n+        if (vhs.supportsAtomicAccess) {\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_SET));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_RELEASE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_PLAIN));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_RELEASE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_RELEASE));\n+        } else {\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_SET));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_PLAIN));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_RELEASE));\n+        }\n+\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_RELEASE));\n+\n+\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_RELEASE));\n@@ -183,3 +207,0 @@\n-                        cases.add(new VarHandleSourceAccessTestCase(\n-                                \"misaligned access\", bav, vh, h -> testArrayMisalignedAccess(bas, h),\n-                                false));\n@@ -210,3 +231,5 @@\n-                        cases.add(new VarHandleSourceAccessTestCase(\n-                                \"misaligned access\", bav, vh, h -> testArrayMisalignedAccess(bbs, h),\n-                                false));\n+                        if (bbs.s.isDirect()) {\n+                            cases.add(new VarHandleSourceAccessTestCase(\n+                                    \"misaligned access\", bav, vh, h -> testArrayMisalignedAccess(bbs, h),\n+                                    false));\n+                        }\n@@ -246,0 +269,14 @@\n+    }\n+\n+    static void testArrayNPE(ByteBufferSource bs, VarHandleSource vhs) {\n+        VarHandle vh = vhs.s;\n+        ByteBuffer array = null;\n+        int ci = 1;\n+\n+        checkNPE(() -> {\n+            double x = (double) vh.get(array, ci);\n+        });\n+\n+        checkNPE(() -> {\n+            vh.set(array, ci, VALUE_1);\n+        });\n@@ -318,1 +355,1 @@\n-    static void testArrayNPE(ByteBufferSource bs, VarHandleSource vhs) {\n+    static void testArrayUnsupported(ByteArraySource bs, VarHandleSource vhs) {\n@@ -320,1 +357,1 @@\n-        ByteBuffer array = null;\n+        byte[] array = bs.s;\n@@ -323,33 +360,1 @@\n-        checkNPE(() -> {\n-            double x = (double) vh.get(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.set(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            double x = (double) vh.getVolatile(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            double x = (double) vh.getAcquire(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            double x = (double) vh.getOpaque(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.setVolatile(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.setRelease(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.setOpaque(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -359,1 +364,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -363,1 +368,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -367,1 +372,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -371,1 +376,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -375,1 +380,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -379,1 +384,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -383,1 +388,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -387,1 +392,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -391,1 +396,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -395,1 +400,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -399,9 +404,0 @@\n-\n-    }\n-\n-    static void testArrayUnsupported(ByteArraySource bs, VarHandleSource vhs) {\n-        VarHandle vh = vhs.s;\n-        byte[] array = bs.s;\n-        int ci = 1;\n-\n-\n@@ -469,1 +465,1 @@\n-        if (readOnly) {\n+        if (readOnly && array.isDirect()) {\n@@ -481,1 +477,0 @@\n-\n@@ -527,0 +522,3 @@\n+        }\n+\n+        if (array.isDirect()) {\n@@ -538,1 +536,0 @@\n-\n@@ -574,2 +571,55 @@\n-        }\n-        else {\n+        } else {\n+            checkISE(() -> {\n+                vh.setVolatile(array, ci, VALUE_1);\n+            });\n+\n+            checkISE(() -> {\n+                vh.setRelease(array, ci, VALUE_1);\n+            });\n+\n+            checkISE(() -> {\n+                vh.setOpaque(array, ci, VALUE_1);\n+            });\n+            checkISE(() -> {\n+                boolean r = vh.compareAndSet(array, ci, VALUE_1, VALUE_2);\n+            });\n+\n+            checkISE(() -> {\n+                double r = (double) vh.compareAndExchange(array, ci, VALUE_2, VALUE_1);\n+            });\n+\n+            checkISE(() -> {\n+                double r = (double) vh.compareAndExchangeAcquire(array, ci, VALUE_2, VALUE_1);\n+            });\n+\n+            checkISE(() -> {\n+                double r = (double) vh.compareAndExchangeRelease(array, ci, VALUE_2, VALUE_1);\n+            });\n+\n+            checkISE(() -> {\n+                boolean r = vh.weakCompareAndSetPlain(array, ci, VALUE_1, VALUE_2);\n+            });\n+\n+            checkISE(() -> {\n+                boolean r = vh.weakCompareAndSet(array, ci, VALUE_1, VALUE_2);\n+            });\n+\n+            checkISE(() -> {\n+                boolean r = vh.weakCompareAndSetAcquire(array, ci, VALUE_1, VALUE_2);\n+            });\n+\n+            checkISE(() -> {\n+                boolean r = vh.weakCompareAndSetRelease(array, ci, VALUE_1, VALUE_2);\n+            });\n+\n+            checkISE(() -> {\n+                double o = (double) vh.getAndSet(array, ci, VALUE_1);\n+            });\n+\n+            checkISE(() -> {\n+                double o = (double) vh.getAndSetAcquire(array, ci, VALUE_1);\n+            });\n+\n+            checkISE(() -> {\n+                double o = (double) vh.getAndSetRelease(array, ci, VALUE_1);\n+            });\n@@ -641,71 +691,0 @@\n-\n-            checkAIOOBE(() -> {\n-                double x = (double) vh.getVolatile(array, ci);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                double x = (double) vh.getAcquire(array, ci);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                double x = (double) vh.getOpaque(array, ci);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                vh.setVolatile(array, ci, VALUE_1);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                vh.setRelease(array, ci, VALUE_1);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                vh.setOpaque(array, ci, VALUE_1);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                boolean r = vh.compareAndSet(array, ci, VALUE_1, VALUE_2);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                double r = (double) vh.compareAndExchange(array, ci, VALUE_2, VALUE_1);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                double r = (double) vh.compareAndExchangeAcquire(array, ci, VALUE_2, VALUE_1);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                double r = (double) vh.compareAndExchangeRelease(array, ci, VALUE_2, VALUE_1);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                boolean r = vh.weakCompareAndSetPlain(array, ci, VALUE_1, VALUE_2);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                boolean r = vh.weakCompareAndSet(array, ci, VALUE_1, VALUE_2);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                boolean r = vh.weakCompareAndSetAcquire(array, ci, VALUE_1, VALUE_2);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                boolean r = vh.weakCompareAndSetRelease(array, ci, VALUE_1, VALUE_2);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                double o = (double) vh.getAndSet(array, ci, VALUE_1);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                double o = (double) vh.getAndSetAcquire(array, ci, VALUE_1);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                double o = (double) vh.getAndSetRelease(array, ci, VALUE_1);\n-            });\n-\n-\n-\n@@ -735,17 +714,1 @@\n-            checkIOOBE(() -> {\n-                double x = (double) vh.getVolatile(array, ci);\n-            });\n-\n-            checkIOOBE(() -> {\n-                double x = (double) vh.getAcquire(array, ci);\n-            });\n-\n-            checkIOOBE(() -> {\n-                double x = (double) vh.getOpaque(array, ci);\n-            });\n-\n-            if (!readOnly) {\n-                checkIOOBE(() -> {\n-                    vh.setVolatile(array, ci, VALUE_1);\n-                });\n-\n+            if (array.isDirect()) {\n@@ -753,1 +716,1 @@\n-                    vh.setRelease(array, ci, VALUE_1);\n+                    double x = (double) vh.getVolatile(array, ci);\n@@ -757,1 +720,1 @@\n-                    vh.setOpaque(array, ci, VALUE_1);\n+                    double x = (double) vh.getAcquire(array, ci);\n@@ -761,1 +724,1 @@\n-                    boolean r = vh.compareAndSet(array, ci, VALUE_1, VALUE_2);\n+                    double x = (double) vh.getOpaque(array, ci);\n@@ -764,3 +727,4 @@\n-                checkIOOBE(() -> {\n-                    double r = (double) vh.compareAndExchange(array, ci, VALUE_2, VALUE_1);\n-                });\n+                if (!readOnly) {\n+                    checkIOOBE(() -> {\n+                        vh.setVolatile(array, ci, VALUE_1);\n+                    });\n@@ -768,3 +732,3 @@\n-                checkIOOBE(() -> {\n-                    double r = (double) vh.compareAndExchangeAcquire(array, ci, VALUE_2, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        vh.setRelease(array, ci, VALUE_1);\n+                    });\n@@ -772,3 +736,3 @@\n-                checkIOOBE(() -> {\n-                    double r = (double) vh.compareAndExchangeRelease(array, ci, VALUE_2, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        vh.setOpaque(array, ci, VALUE_1);\n+                    });\n@@ -776,3 +740,3 @@\n-                checkIOOBE(() -> {\n-                    boolean r = vh.weakCompareAndSetPlain(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.compareAndSet(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -780,3 +744,3 @@\n-                checkIOOBE(() -> {\n-                    boolean r = vh.weakCompareAndSet(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        double r = (double) vh.compareAndExchange(array, ci, VALUE_2, VALUE_1);\n+                    });\n@@ -784,3 +748,3 @@\n-                checkIOOBE(() -> {\n-                    boolean r = vh.weakCompareAndSetAcquire(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        double r = (double) vh.compareAndExchangeAcquire(array, ci, VALUE_2, VALUE_1);\n+                    });\n@@ -788,3 +752,3 @@\n-                checkIOOBE(() -> {\n-                    boolean r = vh.weakCompareAndSetRelease(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        double r = (double) vh.compareAndExchangeRelease(array, ci, VALUE_2, VALUE_1);\n+                    });\n@@ -792,3 +756,3 @@\n-                checkIOOBE(() -> {\n-                    double o = (double) vh.getAndSet(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.weakCompareAndSetPlain(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -796,72 +760,3 @@\n-                checkIOOBE(() -> {\n-                    double o = (double) vh.getAndSetAcquire(array, ci, VALUE_1);\n-                });\n-\n-                checkIOOBE(() -> {\n-                    double o = (double) vh.getAndSetRelease(array, ci, VALUE_1);\n-                });\n-\n-\n-            }\n-        }\n-    }\n-\n-    static void testArrayMisalignedAccess(ByteArraySource bs, VarHandleSource vhs) throws Throwable {\n-        VarHandle vh = vhs.s;\n-        byte[] array = bs.s;\n-\n-        int misalignmentAtZero = ByteBuffer.wrap(array).alignmentOffset(0, SIZE);\n-\n-        int length = array.length - SIZE + 1;\n-        for (int i = 0; i < length; i++) {\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n-            final int ci = i;\n-\n-            if (!iAligned) {\n-                checkISE(() -> {\n-                    double x = (double) vh.getVolatile(array, ci);\n-                });\n-\n-                checkISE(() -> {\n-                    double x = (double) vh.getAcquire(array, ci);\n-                });\n-\n-                checkISE(() -> {\n-                    double x = (double) vh.getOpaque(array, ci);\n-                });\n-\n-                checkISE(() -> {\n-                    vh.setVolatile(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    vh.setRelease(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    vh.setOpaque(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    boolean r = vh.compareAndSet(array, ci, VALUE_1, VALUE_2);\n-                });\n-\n-                checkISE(() -> {\n-                    double r = (double) vh.compareAndExchange(array, ci, VALUE_2, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    double r = (double) vh.compareAndExchangeAcquire(array, ci, VALUE_2, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    double r = (double) vh.compareAndExchangeRelease(array, ci, VALUE_2, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    boolean r = vh.weakCompareAndSetPlain(array, ci, VALUE_1, VALUE_2);\n-                });\n-\n-                checkISE(() -> {\n-                    boolean r = vh.weakCompareAndSet(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.weakCompareAndSet(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -869,3 +764,3 @@\n-                checkISE(() -> {\n-                    boolean r = vh.weakCompareAndSetAcquire(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.weakCompareAndSetAcquire(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -873,3 +768,3 @@\n-                checkISE(() -> {\n-                    boolean r = vh.weakCompareAndSetRelease(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.weakCompareAndSetRelease(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -877,3 +772,3 @@\n-                checkISE(() -> {\n-                    double o = (double) vh.getAndSet(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        double o = (double) vh.getAndSet(array, ci, VALUE_1);\n+                    });\n@@ -881,3 +776,3 @@\n-                checkISE(() -> {\n-                    double o = (double) vh.getAndSetAcquire(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        double o = (double) vh.getAndSetAcquire(array, ci, VALUE_1);\n+                    });\n@@ -885,3 +780,3 @@\n-                checkISE(() -> {\n-                    double o = (double) vh.getAndSetRelease(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        double o = (double) vh.getAndSetRelease(array, ci, VALUE_1);\n+                    });\n@@ -890,0 +785,1 @@\n+                }\n@@ -931,1 +827,0 @@\n-\n@@ -975,2 +870,0 @@\n-\n-\n@@ -986,2 +879,0 @@\n-        int misalignmentAtZero = ByteBuffer.wrap(array).alignmentOffset(0, SIZE);\n-\n@@ -991,2 +882,0 @@\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n-\n@@ -999,185 +888,0 @@\n-\n-\n-            if (iAligned) {\n-                \/\/ Volatile\n-                {\n-                    vh.setVolatile(array, i, VALUE_2);\n-                    double x = (double) vh.getVolatile(array, i);\n-                    assertEquals(x, VALUE_2, \"setVolatile double value\");\n-                }\n-\n-                \/\/ Lazy\n-                {\n-                    vh.setRelease(array, i, VALUE_1);\n-                    double x = (double) vh.getAcquire(array, i);\n-                    assertEquals(x, VALUE_1, \"setRelease double value\");\n-                }\n-\n-                \/\/ Opaque\n-                {\n-                    vh.setOpaque(array, i, VALUE_2);\n-                    double x = (double) vh.getOpaque(array, i);\n-                    assertEquals(x, VALUE_2, \"setOpaque double value\");\n-                }\n-\n-                vh.set(array, i, VALUE_1);\n-\n-                \/\/ Compare\n-                {\n-                    boolean r = vh.compareAndSet(array, i, VALUE_1, VALUE_2);\n-                    assertEquals(r, true, \"success compareAndSet double\");\n-                    double x = (double) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"success compareAndSet double value\");\n-                }\n-\n-                {\n-                    boolean r = vh.compareAndSet(array, i, VALUE_1, VALUE_3);\n-                    assertEquals(r, false, \"failing compareAndSet double\");\n-                    double x = (double) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"failing compareAndSet double value\");\n-                }\n-\n-                {\n-                    double r = (double) vh.compareAndExchange(array, i, VALUE_2, VALUE_1);\n-                    assertEquals(r, VALUE_2, \"success compareAndExchange double\");\n-                    double x = (double) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"success compareAndExchange double value\");\n-                }\n-\n-                {\n-                    double r = (double) vh.compareAndExchange(array, i, VALUE_2, VALUE_3);\n-                    assertEquals(r, VALUE_1, \"failing compareAndExchange double\");\n-                    double x = (double) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"failing compareAndExchange double value\");\n-                }\n-\n-                {\n-                    double r = (double) vh.compareAndExchangeAcquire(array, i, VALUE_1, VALUE_2);\n-                    assertEquals(r, VALUE_1, \"success compareAndExchangeAcquire double\");\n-                    double x = (double) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"success compareAndExchangeAcquire double value\");\n-                }\n-\n-                {\n-                    double r = (double) vh.compareAndExchangeAcquire(array, i, VALUE_1, VALUE_3);\n-                    assertEquals(r, VALUE_2, \"failing compareAndExchangeAcquire double\");\n-                    double x = (double) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"failing compareAndExchangeAcquire double value\");\n-                }\n-\n-                {\n-                    double r = (double) vh.compareAndExchangeRelease(array, i, VALUE_2, VALUE_1);\n-                    assertEquals(r, VALUE_2, \"success compareAndExchangeRelease double\");\n-                    double x = (double) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"success compareAndExchangeRelease double value\");\n-                }\n-\n-                {\n-                    double r = (double) vh.compareAndExchangeRelease(array, i, VALUE_2, VALUE_3);\n-                    assertEquals(r, VALUE_1, \"failing compareAndExchangeRelease double\");\n-                    double x = (double) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"failing compareAndExchangeRelease double value\");\n-                }\n-\n-                {\n-                    boolean success = false;\n-                    for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n-                        success = vh.weakCompareAndSetPlain(array, i, VALUE_1, VALUE_2);\n-                        if (!success) weakDelay();\n-                    }\n-                    assertEquals(success, true, \"success weakCompareAndSetPlain double\");\n-                    double x = (double) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"success weakCompareAndSetPlain double value\");\n-                }\n-\n-                {\n-                    boolean success = vh.weakCompareAndSetPlain(array, i, VALUE_1, VALUE_3);\n-                    assertEquals(success, false, \"failing weakCompareAndSetPlain double\");\n-                    double x = (double) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"failing weakCompareAndSetPlain double value\");\n-                }\n-\n-                {\n-                    boolean success = false;\n-                    for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n-                        success = vh.weakCompareAndSetAcquire(array, i, VALUE_2, VALUE_1);\n-                        if (!success) weakDelay();\n-                    }\n-                    assertEquals(success, true, \"success weakCompareAndSetAcquire double\");\n-                    double x = (double) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"success weakCompareAndSetAcquire double\");\n-                }\n-\n-                {\n-                    boolean success = vh.weakCompareAndSetAcquire(array, i, VALUE_2, VALUE_3);\n-                    assertEquals(success, false, \"failing weakCompareAndSetAcquire double\");\n-                    double x = (double) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"failing weakCompareAndSetAcquire double value\");\n-                }\n-\n-                {\n-                    boolean success = false;\n-                    for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n-                        success = vh.weakCompareAndSetRelease(array, i, VALUE_1, VALUE_2);\n-                        if (!success) weakDelay();\n-                    }\n-                    assertEquals(success, true, \"success weakCompareAndSetRelease double\");\n-                    double x = (double) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"success weakCompareAndSetRelease double\");\n-                }\n-\n-                {\n-                    boolean success = vh.weakCompareAndSetRelease(array, i, VALUE_1, VALUE_3);\n-                    assertEquals(success, false, \"failing weakCompareAndSetRelease double\");\n-                    double x = (double) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"failing weakCompareAndSetRelease double value\");\n-                }\n-\n-                {\n-                    boolean success = false;\n-                    for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n-                        success = vh.weakCompareAndSet(array, i, VALUE_2, VALUE_1);\n-                        if (!success) weakDelay();\n-                    }\n-                    assertEquals(success, true, \"success weakCompareAndSet double\");\n-                    double x = (double) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"success weakCompareAndSet double\");\n-                }\n-\n-                {\n-                    boolean success = vh.weakCompareAndSet(array, i, VALUE_2, VALUE_3);\n-                    assertEquals(success, false, \"failing weakCompareAndSet double\");\n-                    double x = (double) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"failing weakCompareAndSet double value\");\n-                }\n-\n-                \/\/ Compare set and get\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    double o = (double) vh.getAndSet(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndSet double\");\n-                    double x = (double) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"getAndSet double value\");\n-                }\n-\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    double o = (double) vh.getAndSetAcquire(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndSetAcquire double\");\n-                    double x = (double) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"getAndSetAcquire double value\");\n-                }\n-\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    double o = (double) vh.getAndSetRelease(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndSetRelease double\");\n-                    double x = (double) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"getAndSetRelease double value\");\n-                }\n-\n-\n-            }\n@@ -1192,2 +896,0 @@\n-        int misalignmentAtZero = array.alignmentOffset(0, SIZE);\n-\n@@ -1197,1 +899,1 @@\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n+            boolean iAligned = array.isDirect() ? ((i + array.alignmentOffset(0, SIZE)) & (SIZE - 1)) == 0 : false;\n@@ -1396,2 +1098,0 @@\n-        int misalignmentAtZero = array.alignmentOffset(0, SIZE);\n-\n@@ -1404,1 +1104,1 @@\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n+            boolean iAligned = array.isDirect() ? ((i + array.alignmentOffset(0, SIZE)) & (SIZE - 1)) == 0 : false;\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestByteArrayAsDouble.java","additions":199,"deletions":499,"binary":false,"changes":698,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-                    MethodHandles.byteArrayViewVarHandle(arrayType, bo),\n+                    MethodHandles.byteArrayViewVarHandle(arrayType, bo), false,\n@@ -80,1 +80,1 @@\n-                    MethodHandles.byteBufferViewVarHandle(arrayType, bo),\n+                    MethodHandles.byteBufferViewVarHandle(arrayType, bo), true,\n@@ -117,32 +117,56 @@\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_VOLATILE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_VOLATILE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_RELEASE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_OPAQUE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_OPAQUE));\n-\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_SET));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_RELEASE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_PLAIN));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_RELEASE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_RELEASE));\n-\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_RELEASE));\n-\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_RELEASE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_RELEASE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_RELEASE));\n+        if (vhs.supportsAtomicAccess) {\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_VOLATILE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_VOLATILE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_RELEASE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_OPAQUE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_OPAQUE));\n+        } else {\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_VOLATILE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.SET_VOLATILE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.SET_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_OPAQUE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.SET_OPAQUE));\n+        }\n+\n+        if (vhs.supportsAtomicAccess) {\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_SET));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_RELEASE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_PLAIN));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_RELEASE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_RELEASE));\n+        } else {\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_SET));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_PLAIN));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_RELEASE));\n+        }\n+\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_RELEASE));\n+\n+\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_RELEASE));\n@@ -183,3 +207,0 @@\n-                        cases.add(new VarHandleSourceAccessTestCase(\n-                                \"misaligned access\", bav, vh, h -> testArrayMisalignedAccess(bas, h),\n-                                false));\n@@ -210,3 +231,5 @@\n-                        cases.add(new VarHandleSourceAccessTestCase(\n-                                \"misaligned access\", bav, vh, h -> testArrayMisalignedAccess(bbs, h),\n-                                false));\n+                        if (bbs.s.isDirect()) {\n+                            cases.add(new VarHandleSourceAccessTestCase(\n+                                    \"misaligned access\", bav, vh, h -> testArrayMisalignedAccess(bbs, h),\n+                                    false));\n+                        }\n@@ -246,0 +269,14 @@\n+    }\n+\n+    static void testArrayNPE(ByteBufferSource bs, VarHandleSource vhs) {\n+        VarHandle vh = vhs.s;\n+        ByteBuffer array = null;\n+        int ci = 1;\n+\n+        checkNPE(() -> {\n+            float x = (float) vh.get(array, ci);\n+        });\n+\n+        checkNPE(() -> {\n+            vh.set(array, ci, VALUE_1);\n+        });\n@@ -318,1 +355,1 @@\n-    static void testArrayNPE(ByteBufferSource bs, VarHandleSource vhs) {\n+    static void testArrayUnsupported(ByteArraySource bs, VarHandleSource vhs) {\n@@ -320,1 +357,1 @@\n-        ByteBuffer array = null;\n+        byte[] array = bs.s;\n@@ -323,33 +360,1 @@\n-        checkNPE(() -> {\n-            float x = (float) vh.get(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.set(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            float x = (float) vh.getVolatile(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            float x = (float) vh.getAcquire(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            float x = (float) vh.getOpaque(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.setVolatile(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.setRelease(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.setOpaque(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -359,1 +364,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -363,1 +368,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -367,1 +372,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -371,1 +376,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -375,1 +380,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -379,1 +384,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -383,1 +388,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -387,1 +392,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -391,1 +396,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -395,1 +400,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -399,9 +404,0 @@\n-\n-    }\n-\n-    static void testArrayUnsupported(ByteArraySource bs, VarHandleSource vhs) {\n-        VarHandle vh = vhs.s;\n-        byte[] array = bs.s;\n-        int ci = 1;\n-\n-\n@@ -469,1 +465,1 @@\n-        if (readOnly) {\n+        if (readOnly && array.isDirect()) {\n@@ -481,1 +477,0 @@\n-\n@@ -527,0 +522,3 @@\n+        }\n+\n+        if (array.isDirect()) {\n@@ -538,1 +536,0 @@\n-\n@@ -574,2 +571,55 @@\n-        }\n-        else {\n+        } else {\n+            checkISE(() -> {\n+                vh.setVolatile(array, ci, VALUE_1);\n+            });\n+\n+            checkISE(() -> {\n+                vh.setRelease(array, ci, VALUE_1);\n+            });\n+\n+            checkISE(() -> {\n+                vh.setOpaque(array, ci, VALUE_1);\n+            });\n+            checkISE(() -> {\n+                boolean r = vh.compareAndSet(array, ci, VALUE_1, VALUE_2);\n+            });\n+\n+            checkISE(() -> {\n+                float r = (float) vh.compareAndExchange(array, ci, VALUE_2, VALUE_1);\n+            });\n+\n+            checkISE(() -> {\n+                float r = (float) vh.compareAndExchangeAcquire(array, ci, VALUE_2, VALUE_1);\n+            });\n+\n+            checkISE(() -> {\n+                float r = (float) vh.compareAndExchangeRelease(array, ci, VALUE_2, VALUE_1);\n+            });\n+\n+            checkISE(() -> {\n+                boolean r = vh.weakCompareAndSetPlain(array, ci, VALUE_1, VALUE_2);\n+            });\n+\n+            checkISE(() -> {\n+                boolean r = vh.weakCompareAndSet(array, ci, VALUE_1, VALUE_2);\n+            });\n+\n+            checkISE(() -> {\n+                boolean r = vh.weakCompareAndSetAcquire(array, ci, VALUE_1, VALUE_2);\n+            });\n+\n+            checkISE(() -> {\n+                boolean r = vh.weakCompareAndSetRelease(array, ci, VALUE_1, VALUE_2);\n+            });\n+\n+            checkISE(() -> {\n+                float o = (float) vh.getAndSet(array, ci, VALUE_1);\n+            });\n+\n+            checkISE(() -> {\n+                float o = (float) vh.getAndSetAcquire(array, ci, VALUE_1);\n+            });\n+\n+            checkISE(() -> {\n+                float o = (float) vh.getAndSetRelease(array, ci, VALUE_1);\n+            });\n@@ -641,71 +691,0 @@\n-\n-            checkAIOOBE(() -> {\n-                float x = (float) vh.getVolatile(array, ci);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                float x = (float) vh.getAcquire(array, ci);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                float x = (float) vh.getOpaque(array, ci);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                vh.setVolatile(array, ci, VALUE_1);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                vh.setRelease(array, ci, VALUE_1);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                vh.setOpaque(array, ci, VALUE_1);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                boolean r = vh.compareAndSet(array, ci, VALUE_1, VALUE_2);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                float r = (float) vh.compareAndExchange(array, ci, VALUE_2, VALUE_1);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                float r = (float) vh.compareAndExchangeAcquire(array, ci, VALUE_2, VALUE_1);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                float r = (float) vh.compareAndExchangeRelease(array, ci, VALUE_2, VALUE_1);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                boolean r = vh.weakCompareAndSetPlain(array, ci, VALUE_1, VALUE_2);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                boolean r = vh.weakCompareAndSet(array, ci, VALUE_1, VALUE_2);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                boolean r = vh.weakCompareAndSetAcquire(array, ci, VALUE_1, VALUE_2);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                boolean r = vh.weakCompareAndSetRelease(array, ci, VALUE_1, VALUE_2);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                float o = (float) vh.getAndSet(array, ci, VALUE_1);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                float o = (float) vh.getAndSetAcquire(array, ci, VALUE_1);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                float o = (float) vh.getAndSetRelease(array, ci, VALUE_1);\n-            });\n-\n-\n-\n@@ -735,17 +714,1 @@\n-            checkIOOBE(() -> {\n-                float x = (float) vh.getVolatile(array, ci);\n-            });\n-\n-            checkIOOBE(() -> {\n-                float x = (float) vh.getAcquire(array, ci);\n-            });\n-\n-            checkIOOBE(() -> {\n-                float x = (float) vh.getOpaque(array, ci);\n-            });\n-\n-            if (!readOnly) {\n-                checkIOOBE(() -> {\n-                    vh.setVolatile(array, ci, VALUE_1);\n-                });\n-\n+            if (array.isDirect()) {\n@@ -753,1 +716,1 @@\n-                    vh.setRelease(array, ci, VALUE_1);\n+                    float x = (float) vh.getVolatile(array, ci);\n@@ -757,1 +720,1 @@\n-                    vh.setOpaque(array, ci, VALUE_1);\n+                    float x = (float) vh.getAcquire(array, ci);\n@@ -761,1 +724,1 @@\n-                    boolean r = vh.compareAndSet(array, ci, VALUE_1, VALUE_2);\n+                    float x = (float) vh.getOpaque(array, ci);\n@@ -764,3 +727,4 @@\n-                checkIOOBE(() -> {\n-                    float r = (float) vh.compareAndExchange(array, ci, VALUE_2, VALUE_1);\n-                });\n+                if (!readOnly) {\n+                    checkIOOBE(() -> {\n+                        vh.setVolatile(array, ci, VALUE_1);\n+                    });\n@@ -768,3 +732,3 @@\n-                checkIOOBE(() -> {\n-                    float r = (float) vh.compareAndExchangeAcquire(array, ci, VALUE_2, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        vh.setRelease(array, ci, VALUE_1);\n+                    });\n@@ -772,3 +736,3 @@\n-                checkIOOBE(() -> {\n-                    float r = (float) vh.compareAndExchangeRelease(array, ci, VALUE_2, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        vh.setOpaque(array, ci, VALUE_1);\n+                    });\n@@ -776,3 +740,3 @@\n-                checkIOOBE(() -> {\n-                    boolean r = vh.weakCompareAndSetPlain(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.compareAndSet(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -780,3 +744,3 @@\n-                checkIOOBE(() -> {\n-                    boolean r = vh.weakCompareAndSet(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        float r = (float) vh.compareAndExchange(array, ci, VALUE_2, VALUE_1);\n+                    });\n@@ -784,3 +748,3 @@\n-                checkIOOBE(() -> {\n-                    boolean r = vh.weakCompareAndSetAcquire(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        float r = (float) vh.compareAndExchangeAcquire(array, ci, VALUE_2, VALUE_1);\n+                    });\n@@ -788,3 +752,3 @@\n-                checkIOOBE(() -> {\n-                    boolean r = vh.weakCompareAndSetRelease(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        float r = (float) vh.compareAndExchangeRelease(array, ci, VALUE_2, VALUE_1);\n+                    });\n@@ -792,3 +756,3 @@\n-                checkIOOBE(() -> {\n-                    float o = (float) vh.getAndSet(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.weakCompareAndSetPlain(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -796,72 +760,3 @@\n-                checkIOOBE(() -> {\n-                    float o = (float) vh.getAndSetAcquire(array, ci, VALUE_1);\n-                });\n-\n-                checkIOOBE(() -> {\n-                    float o = (float) vh.getAndSetRelease(array, ci, VALUE_1);\n-                });\n-\n-\n-            }\n-        }\n-    }\n-\n-    static void testArrayMisalignedAccess(ByteArraySource bs, VarHandleSource vhs) throws Throwable {\n-        VarHandle vh = vhs.s;\n-        byte[] array = bs.s;\n-\n-        int misalignmentAtZero = ByteBuffer.wrap(array).alignmentOffset(0, SIZE);\n-\n-        int length = array.length - SIZE + 1;\n-        for (int i = 0; i < length; i++) {\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n-            final int ci = i;\n-\n-            if (!iAligned) {\n-                checkISE(() -> {\n-                    float x = (float) vh.getVolatile(array, ci);\n-                });\n-\n-                checkISE(() -> {\n-                    float x = (float) vh.getAcquire(array, ci);\n-                });\n-\n-                checkISE(() -> {\n-                    float x = (float) vh.getOpaque(array, ci);\n-                });\n-\n-                checkISE(() -> {\n-                    vh.setVolatile(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    vh.setRelease(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    vh.setOpaque(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    boolean r = vh.compareAndSet(array, ci, VALUE_1, VALUE_2);\n-                });\n-\n-                checkISE(() -> {\n-                    float r = (float) vh.compareAndExchange(array, ci, VALUE_2, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    float r = (float) vh.compareAndExchangeAcquire(array, ci, VALUE_2, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    float r = (float) vh.compareAndExchangeRelease(array, ci, VALUE_2, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    boolean r = vh.weakCompareAndSetPlain(array, ci, VALUE_1, VALUE_2);\n-                });\n-\n-                checkISE(() -> {\n-                    boolean r = vh.weakCompareAndSet(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.weakCompareAndSet(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -869,3 +764,3 @@\n-                checkISE(() -> {\n-                    boolean r = vh.weakCompareAndSetAcquire(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.weakCompareAndSetAcquire(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -873,3 +768,3 @@\n-                checkISE(() -> {\n-                    boolean r = vh.weakCompareAndSetRelease(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.weakCompareAndSetRelease(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -877,3 +772,3 @@\n-                checkISE(() -> {\n-                    float o = (float) vh.getAndSet(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        float o = (float) vh.getAndSet(array, ci, VALUE_1);\n+                    });\n@@ -881,3 +776,3 @@\n-                checkISE(() -> {\n-                    float o = (float) vh.getAndSetAcquire(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        float o = (float) vh.getAndSetAcquire(array, ci, VALUE_1);\n+                    });\n@@ -885,3 +780,3 @@\n-                checkISE(() -> {\n-                    float o = (float) vh.getAndSetRelease(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        float o = (float) vh.getAndSetRelease(array, ci, VALUE_1);\n+                    });\n@@ -890,0 +785,1 @@\n+                }\n@@ -931,1 +827,0 @@\n-\n@@ -975,2 +870,0 @@\n-\n-\n@@ -986,2 +879,0 @@\n-        int misalignmentAtZero = ByteBuffer.wrap(array).alignmentOffset(0, SIZE);\n-\n@@ -991,2 +882,0 @@\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n-\n@@ -999,185 +888,0 @@\n-\n-\n-            if (iAligned) {\n-                \/\/ Volatile\n-                {\n-                    vh.setVolatile(array, i, VALUE_2);\n-                    float x = (float) vh.getVolatile(array, i);\n-                    assertEquals(x, VALUE_2, \"setVolatile float value\");\n-                }\n-\n-                \/\/ Lazy\n-                {\n-                    vh.setRelease(array, i, VALUE_1);\n-                    float x = (float) vh.getAcquire(array, i);\n-                    assertEquals(x, VALUE_1, \"setRelease float value\");\n-                }\n-\n-                \/\/ Opaque\n-                {\n-                    vh.setOpaque(array, i, VALUE_2);\n-                    float x = (float) vh.getOpaque(array, i);\n-                    assertEquals(x, VALUE_2, \"setOpaque float value\");\n-                }\n-\n-                vh.set(array, i, VALUE_1);\n-\n-                \/\/ Compare\n-                {\n-                    boolean r = vh.compareAndSet(array, i, VALUE_1, VALUE_2);\n-                    assertEquals(r, true, \"success compareAndSet float\");\n-                    float x = (float) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"success compareAndSet float value\");\n-                }\n-\n-                {\n-                    boolean r = vh.compareAndSet(array, i, VALUE_1, VALUE_3);\n-                    assertEquals(r, false, \"failing compareAndSet float\");\n-                    float x = (float) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"failing compareAndSet float value\");\n-                }\n-\n-                {\n-                    float r = (float) vh.compareAndExchange(array, i, VALUE_2, VALUE_1);\n-                    assertEquals(r, VALUE_2, \"success compareAndExchange float\");\n-                    float x = (float) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"success compareAndExchange float value\");\n-                }\n-\n-                {\n-                    float r = (float) vh.compareAndExchange(array, i, VALUE_2, VALUE_3);\n-                    assertEquals(r, VALUE_1, \"failing compareAndExchange float\");\n-                    float x = (float) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"failing compareAndExchange float value\");\n-                }\n-\n-                {\n-                    float r = (float) vh.compareAndExchangeAcquire(array, i, VALUE_1, VALUE_2);\n-                    assertEquals(r, VALUE_1, \"success compareAndExchangeAcquire float\");\n-                    float x = (float) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"success compareAndExchangeAcquire float value\");\n-                }\n-\n-                {\n-                    float r = (float) vh.compareAndExchangeAcquire(array, i, VALUE_1, VALUE_3);\n-                    assertEquals(r, VALUE_2, \"failing compareAndExchangeAcquire float\");\n-                    float x = (float) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"failing compareAndExchangeAcquire float value\");\n-                }\n-\n-                {\n-                    float r = (float) vh.compareAndExchangeRelease(array, i, VALUE_2, VALUE_1);\n-                    assertEquals(r, VALUE_2, \"success compareAndExchangeRelease float\");\n-                    float x = (float) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"success compareAndExchangeRelease float value\");\n-                }\n-\n-                {\n-                    float r = (float) vh.compareAndExchangeRelease(array, i, VALUE_2, VALUE_3);\n-                    assertEquals(r, VALUE_1, \"failing compareAndExchangeRelease float\");\n-                    float x = (float) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"failing compareAndExchangeRelease float value\");\n-                }\n-\n-                {\n-                    boolean success = false;\n-                    for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n-                        success = vh.weakCompareAndSetPlain(array, i, VALUE_1, VALUE_2);\n-                        if (!success) weakDelay();\n-                    }\n-                    assertEquals(success, true, \"success weakCompareAndSetPlain float\");\n-                    float x = (float) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"success weakCompareAndSetPlain float value\");\n-                }\n-\n-                {\n-                    boolean success = vh.weakCompareAndSetPlain(array, i, VALUE_1, VALUE_3);\n-                    assertEquals(success, false, \"failing weakCompareAndSetPlain float\");\n-                    float x = (float) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"failing weakCompareAndSetPlain float value\");\n-                }\n-\n-                {\n-                    boolean success = false;\n-                    for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n-                        success = vh.weakCompareAndSetAcquire(array, i, VALUE_2, VALUE_1);\n-                        if (!success) weakDelay();\n-                    }\n-                    assertEquals(success, true, \"success weakCompareAndSetAcquire float\");\n-                    float x = (float) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"success weakCompareAndSetAcquire float\");\n-                }\n-\n-                {\n-                    boolean success = vh.weakCompareAndSetAcquire(array, i, VALUE_2, VALUE_3);\n-                    assertEquals(success, false, \"failing weakCompareAndSetAcquire float\");\n-                    float x = (float) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"failing weakCompareAndSetAcquire float value\");\n-                }\n-\n-                {\n-                    boolean success = false;\n-                    for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n-                        success = vh.weakCompareAndSetRelease(array, i, VALUE_1, VALUE_2);\n-                        if (!success) weakDelay();\n-                    }\n-                    assertEquals(success, true, \"success weakCompareAndSetRelease float\");\n-                    float x = (float) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"success weakCompareAndSetRelease float\");\n-                }\n-\n-                {\n-                    boolean success = vh.weakCompareAndSetRelease(array, i, VALUE_1, VALUE_3);\n-                    assertEquals(success, false, \"failing weakCompareAndSetRelease float\");\n-                    float x = (float) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"failing weakCompareAndSetRelease float value\");\n-                }\n-\n-                {\n-                    boolean success = false;\n-                    for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n-                        success = vh.weakCompareAndSet(array, i, VALUE_2, VALUE_1);\n-                        if (!success) weakDelay();\n-                    }\n-                    assertEquals(success, true, \"success weakCompareAndSet float\");\n-                    float x = (float) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"success weakCompareAndSet float\");\n-                }\n-\n-                {\n-                    boolean success = vh.weakCompareAndSet(array, i, VALUE_2, VALUE_3);\n-                    assertEquals(success, false, \"failing weakCompareAndSet float\");\n-                    float x = (float) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"failing weakCompareAndSet float value\");\n-                }\n-\n-                \/\/ Compare set and get\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    float o = (float) vh.getAndSet(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndSet float\");\n-                    float x = (float) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"getAndSet float value\");\n-                }\n-\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    float o = (float) vh.getAndSetAcquire(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndSetAcquire float\");\n-                    float x = (float) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"getAndSetAcquire float value\");\n-                }\n-\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    float o = (float) vh.getAndSetRelease(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndSetRelease float\");\n-                    float x = (float) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"getAndSetRelease float value\");\n-                }\n-\n-\n-            }\n@@ -1192,2 +896,0 @@\n-        int misalignmentAtZero = array.alignmentOffset(0, SIZE);\n-\n@@ -1197,1 +899,1 @@\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n+            boolean iAligned = array.isDirect() ? ((i + array.alignmentOffset(0, SIZE)) & (SIZE - 1)) == 0 : false;\n@@ -1396,2 +1098,0 @@\n-        int misalignmentAtZero = array.alignmentOffset(0, SIZE);\n-\n@@ -1404,1 +1104,1 @@\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n+            boolean iAligned = array.isDirect() ? ((i + array.alignmentOffset(0, SIZE)) & (SIZE - 1)) == 0 : false;\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestByteArrayAsFloat.java","additions":199,"deletions":499,"binary":false,"changes":698,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-                    MethodHandles.byteArrayViewVarHandle(arrayType, bo),\n+                    MethodHandles.byteArrayViewVarHandle(arrayType, bo), false,\n@@ -80,1 +80,1 @@\n-                    MethodHandles.byteBufferViewVarHandle(arrayType, bo),\n+                    MethodHandles.byteBufferViewVarHandle(arrayType, bo), true,\n@@ -117,32 +117,74 @@\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_VOLATILE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_VOLATILE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_RELEASE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_OPAQUE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_OPAQUE));\n-\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_SET));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_RELEASE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_PLAIN));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_RELEASE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_RELEASE));\n-\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_RELEASE));\n-\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_RELEASE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_RELEASE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_RELEASE));\n+        if (vhs.supportsAtomicAccess) {\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_VOLATILE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_VOLATILE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_RELEASE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_OPAQUE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_OPAQUE));\n+        } else {\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_VOLATILE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.SET_VOLATILE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.SET_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_OPAQUE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.SET_OPAQUE));\n+        }\n+\n+        if (vhs.supportsAtomicAccess) {\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_SET));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_RELEASE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_PLAIN));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_RELEASE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_RELEASE));\n+        } else {\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_SET));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_PLAIN));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_RELEASE));\n+        }\n+\n+        if (vhs.supportsAtomicAccess) {\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_RELEASE));\n+        } else {\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_RELEASE));\n+        }\n+\n+\n+        if (vhs.supportsAtomicAccess) {\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_RELEASE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_RELEASE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_RELEASE));\n+        } else {\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_RELEASE));\n+        }\n@@ -183,3 +225,0 @@\n-                        cases.add(new VarHandleSourceAccessTestCase(\n-                                \"misaligned access\", bav, vh, h -> testArrayMisalignedAccess(bas, h),\n-                                false));\n@@ -210,3 +249,5 @@\n-                        cases.add(new VarHandleSourceAccessTestCase(\n-                                \"misaligned access\", bav, vh, h -> testArrayMisalignedAccess(bbs, h),\n-                                false));\n+                        if (bbs.s.isDirect()) {\n+                            cases.add(new VarHandleSourceAccessTestCase(\n+                                    \"misaligned access\", bav, vh, h -> testArrayMisalignedAccess(bbs, h),\n+                                    false));\n+                        }\n@@ -246,0 +287,14 @@\n+    }\n+\n+    static void testArrayNPE(ByteBufferSource bs, VarHandleSource vhs) {\n+        VarHandle vh = vhs.s;\n+        ByteBuffer array = null;\n+        int ci = 1;\n+\n+        checkNPE(() -> {\n+            int x = (int) vh.get(array, ci);\n+        });\n+\n+        checkNPE(() -> {\n+            vh.set(array, ci, VALUE_1);\n+        });\n@@ -364,1 +419,1 @@\n-    static void testArrayNPE(ByteBufferSource bs, VarHandleSource vhs) {\n+    static void testArrayUnsupported(ByteArraySource bs, VarHandleSource vhs) {\n@@ -366,1 +421,1 @@\n-        ByteBuffer array = null;\n+        byte[] array = bs.s;\n@@ -369,33 +424,1 @@\n-        checkNPE(() -> {\n-            int x = (int) vh.get(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.set(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            int x = (int) vh.getVolatile(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            int x = (int) vh.getAcquire(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            int x = (int) vh.getOpaque(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.setVolatile(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.setRelease(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.setOpaque(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -405,1 +428,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -409,1 +432,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -413,1 +436,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -417,1 +440,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -421,1 +444,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -425,1 +448,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -429,1 +452,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -433,1 +456,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -437,1 +460,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -441,1 +464,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -445,1 +468,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -449,1 +472,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -453,1 +476,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -457,1 +480,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -461,1 +484,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -465,1 +488,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -469,1 +492,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -473,1 +496,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -477,1 +500,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -481,1 +504,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -485,1 +508,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -489,1 +512,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -494,9 +517,0 @@\n-    static void testArrayUnsupported(ByteArraySource bs, VarHandleSource vhs) {\n-        VarHandle vh = vhs.s;\n-        byte[] array = bs.s;\n-        int ci = 1;\n-\n-\n-\n-    }\n-\n@@ -515,1 +529,1 @@\n-        if (readOnly) {\n+        if (readOnly && array.isDirect()) {\n@@ -527,1 +541,0 @@\n-\n@@ -572,1 +585,0 @@\n-\n@@ -621,28 +633,0 @@\n-        else {\n-        }\n-    }\n-\n-\n-    static void testArrayIndexOutOfBounds(ByteArraySource bs, VarHandleSource vhs) throws Throwable {\n-        VarHandle vh = vhs.s;\n-        byte[] array = bs.s;\n-\n-        int length = array.length - SIZE + 1;\n-        for (int i : new int[]{-1, Integer.MIN_VALUE, length, length + 1, Integer.MAX_VALUE}) {\n-            final int ci = i;\n-\n-            checkAIOOBE(() -> {\n-                int x = (int) vh.get(array, ci);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                vh.set(array, ci, VALUE_1);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                int x = (int) vh.getVolatile(array, ci);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                int x = (int) vh.getAcquire(array, ci);\n-            });\n@@ -650,5 +634,3 @@\n-            checkAIOOBE(() -> {\n-                int x = (int) vh.getOpaque(array, ci);\n-            });\n-\n-            checkAIOOBE(() -> {\n+        if (array.isDirect()) {\n+        } else {\n+            checkISE(() -> {\n@@ -658,1 +640,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -662,1 +644,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -665,2 +647,1 @@\n-\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -670,1 +651,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -674,1 +655,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -678,1 +659,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -682,1 +663,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -686,1 +667,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -690,1 +671,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -694,1 +675,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -698,1 +679,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -702,1 +683,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -706,1 +687,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -709,2 +690,1 @@\n-\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -714,1 +694,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -718,1 +698,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -721,2 +701,1 @@\n-\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -726,1 +705,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -730,1 +709,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -734,1 +713,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -738,1 +717,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -742,1 +721,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -746,1 +725,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -750,1 +729,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -754,1 +733,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -757,0 +736,15 @@\n+        }\n+    }\n+\n+\n+    static void testArrayIndexOutOfBounds(ByteArraySource bs, VarHandleSource vhs) throws Throwable {\n+        VarHandle vh = vhs.s;\n+        byte[] array = bs.s;\n+\n+        int length = array.length - SIZE + 1;\n+        for (int i : new int[]{-1, Integer.MIN_VALUE, length, length + 1, Integer.MAX_VALUE}) {\n+            final int ci = i;\n+\n+            checkAIOOBE(() -> {\n+                int x = (int) vh.get(array, ci);\n+            });\n@@ -758,0 +752,3 @@\n+            checkAIOOBE(() -> {\n+                vh.set(array, ci, VALUE_1);\n+            });\n@@ -781,13 +778,1 @@\n-            checkIOOBE(() -> {\n-                int x = (int) vh.getVolatile(array, ci);\n-            });\n-\n-            checkIOOBE(() -> {\n-                int x = (int) vh.getAcquire(array, ci);\n-            });\n-\n-            checkIOOBE(() -> {\n-                int x = (int) vh.getOpaque(array, ci);\n-            });\n-\n-            if (!readOnly) {\n+            if (array.isDirect()) {\n@@ -795,1 +780,1 @@\n-                    vh.setVolatile(array, ci, VALUE_1);\n+                    int x = (int) vh.getVolatile(array, ci);\n@@ -799,1 +784,1 @@\n-                    vh.setRelease(array, ci, VALUE_1);\n+                    int x = (int) vh.getAcquire(array, ci);\n@@ -803,1 +788,1 @@\n-                    vh.setOpaque(array, ci, VALUE_1);\n+                    int x = (int) vh.getOpaque(array, ci);\n@@ -806,3 +791,4 @@\n-                checkIOOBE(() -> {\n-                    boolean r = vh.compareAndSet(array, ci, VALUE_1, VALUE_2);\n-                });\n+                if (!readOnly) {\n+                    checkIOOBE(() -> {\n+                        vh.setVolatile(array, ci, VALUE_1);\n+                    });\n@@ -810,3 +796,3 @@\n-                checkIOOBE(() -> {\n-                    int r = (int) vh.compareAndExchange(array, ci, VALUE_2, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        vh.setRelease(array, ci, VALUE_1);\n+                    });\n@@ -814,3 +800,3 @@\n-                checkIOOBE(() -> {\n-                    int r = (int) vh.compareAndExchangeAcquire(array, ci, VALUE_2, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        vh.setOpaque(array, ci, VALUE_1);\n+                    });\n@@ -818,3 +804,3 @@\n-                checkIOOBE(() -> {\n-                    int r = (int) vh.compareAndExchangeRelease(array, ci, VALUE_2, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.compareAndSet(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -822,3 +808,3 @@\n-                checkIOOBE(() -> {\n-                    boolean r = vh.weakCompareAndSetPlain(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        int r = (int) vh.compareAndExchange(array, ci, VALUE_2, VALUE_1);\n+                    });\n@@ -826,3 +812,3 @@\n-                checkIOOBE(() -> {\n-                    boolean r = vh.weakCompareAndSet(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        int r = (int) vh.compareAndExchangeAcquire(array, ci, VALUE_2, VALUE_1);\n+                    });\n@@ -830,3 +816,3 @@\n-                checkIOOBE(() -> {\n-                    boolean r = vh.weakCompareAndSetAcquire(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        int r = (int) vh.compareAndExchangeRelease(array, ci, VALUE_2, VALUE_1);\n+                    });\n@@ -834,3 +820,3 @@\n-                checkIOOBE(() -> {\n-                    boolean r = vh.weakCompareAndSetRelease(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.weakCompareAndSetPlain(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -838,3 +824,3 @@\n-                checkIOOBE(() -> {\n-                    int o = (int) vh.getAndSet(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.weakCompareAndSet(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -842,3 +828,3 @@\n-                checkIOOBE(() -> {\n-                    int o = (int) vh.getAndSetAcquire(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.weakCompareAndSetAcquire(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -846,3 +832,3 @@\n-                checkIOOBE(() -> {\n-                    int o = (int) vh.getAndSetRelease(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.weakCompareAndSetRelease(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -850,3 +836,3 @@\n-                checkIOOBE(() -> {\n-                    int o = (int) vh.getAndAdd(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        int o = (int) vh.getAndSet(array, ci, VALUE_1);\n+                    });\n@@ -854,3 +840,3 @@\n-                checkIOOBE(() -> {\n-                    int o = (int) vh.getAndAddAcquire(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        int o = (int) vh.getAndSetAcquire(array, ci, VALUE_1);\n+                    });\n@@ -858,3 +844,3 @@\n-                checkIOOBE(() -> {\n-                    int o = (int) vh.getAndAddRelease(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        int o = (int) vh.getAndSetRelease(array, ci, VALUE_1);\n+                    });\n@@ -862,3 +848,3 @@\n-                checkIOOBE(() -> {\n-                    int o = (int) vh.getAndBitwiseOr(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        int o = (int) vh.getAndAdd(array, ci, VALUE_1);\n+                    });\n@@ -866,3 +852,3 @@\n-                checkIOOBE(() -> {\n-                    int o = (int) vh.getAndBitwiseOrAcquire(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        int o = (int) vh.getAndAddAcquire(array, ci, VALUE_1);\n+                    });\n@@ -870,3 +856,3 @@\n-                checkIOOBE(() -> {\n-                    int o = (int) vh.getAndBitwiseOrRelease(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        int o = (int) vh.getAndAddRelease(array, ci, VALUE_1);\n+                    });\n@@ -874,122 +860,3 @@\n-                checkIOOBE(() -> {\n-                    int o = (int) vh.getAndBitwiseAnd(array, ci, VALUE_1);\n-                });\n-\n-                checkIOOBE(() -> {\n-                    int o = (int) vh.getAndBitwiseAndAcquire(array, ci, VALUE_1);\n-                });\n-\n-                checkIOOBE(() -> {\n-                    int o = (int) vh.getAndBitwiseAndRelease(array, ci, VALUE_1);\n-                });\n-\n-                checkIOOBE(() -> {\n-                    int o = (int) vh.getAndBitwiseXor(array, ci, VALUE_1);\n-                });\n-\n-                checkIOOBE(() -> {\n-                    int o = (int) vh.getAndBitwiseXorAcquire(array, ci, VALUE_1);\n-                });\n-\n-                checkIOOBE(() -> {\n-                    int o = (int) vh.getAndBitwiseXorRelease(array, ci, VALUE_1);\n-                });\n-            }\n-        }\n-    }\n-\n-    static void testArrayMisalignedAccess(ByteArraySource bs, VarHandleSource vhs) throws Throwable {\n-        VarHandle vh = vhs.s;\n-        byte[] array = bs.s;\n-\n-        int misalignmentAtZero = ByteBuffer.wrap(array).alignmentOffset(0, SIZE);\n-\n-        int length = array.length - SIZE + 1;\n-        for (int i = 0; i < length; i++) {\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n-            final int ci = i;\n-\n-            if (!iAligned) {\n-                checkISE(() -> {\n-                    int x = (int) vh.getVolatile(array, ci);\n-                });\n-\n-                checkISE(() -> {\n-                    int x = (int) vh.getAcquire(array, ci);\n-                });\n-\n-                checkISE(() -> {\n-                    int x = (int) vh.getOpaque(array, ci);\n-                });\n-\n-                checkISE(() -> {\n-                    vh.setVolatile(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    vh.setRelease(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    vh.setOpaque(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    boolean r = vh.compareAndSet(array, ci, VALUE_1, VALUE_2);\n-                });\n-\n-                checkISE(() -> {\n-                    int r = (int) vh.compareAndExchange(array, ci, VALUE_2, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    int r = (int) vh.compareAndExchangeAcquire(array, ci, VALUE_2, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    int r = (int) vh.compareAndExchangeRelease(array, ci, VALUE_2, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    boolean r = vh.weakCompareAndSetPlain(array, ci, VALUE_1, VALUE_2);\n-                });\n-\n-                checkISE(() -> {\n-                    boolean r = vh.weakCompareAndSet(array, ci, VALUE_1, VALUE_2);\n-                });\n-\n-                checkISE(() -> {\n-                    boolean r = vh.weakCompareAndSetAcquire(array, ci, VALUE_1, VALUE_2);\n-                });\n-\n-                checkISE(() -> {\n-                    boolean r = vh.weakCompareAndSetRelease(array, ci, VALUE_1, VALUE_2);\n-                });\n-\n-                checkISE(() -> {\n-                    int o = (int) vh.getAndSet(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    int o = (int) vh.getAndSetAcquire(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    int o = (int) vh.getAndSetRelease(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    int o = (int) vh.getAndAdd(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    int o = (int) vh.getAndAddAcquire(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    int o = (int) vh.getAndAddRelease(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    int o = (int) vh.getAndBitwiseOr(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        int o = (int) vh.getAndBitwiseOr(array, ci, VALUE_1);\n+                    });\n@@ -997,3 +864,3 @@\n-                checkISE(() -> {\n-                    int o = (int) vh.getAndBitwiseOrAcquire(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        int o = (int) vh.getAndBitwiseOrAcquire(array, ci, VALUE_1);\n+                    });\n@@ -1001,3 +868,3 @@\n-                checkISE(() -> {\n-                    int o = (int) vh.getAndBitwiseOrRelease(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        int o = (int) vh.getAndBitwiseOrRelease(array, ci, VALUE_1);\n+                    });\n@@ -1005,3 +872,3 @@\n-                checkISE(() -> {\n-                    int o = (int) vh.getAndBitwiseAnd(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        int o = (int) vh.getAndBitwiseAnd(array, ci, VALUE_1);\n+                    });\n@@ -1009,3 +876,3 @@\n-                checkISE(() -> {\n-                    int o = (int) vh.getAndBitwiseAndAcquire(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        int o = (int) vh.getAndBitwiseAndAcquire(array, ci, VALUE_1);\n+                    });\n@@ -1013,3 +880,3 @@\n-                checkISE(() -> {\n-                    int o = (int) vh.getAndBitwiseAndRelease(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        int o = (int) vh.getAndBitwiseAndRelease(array, ci, VALUE_1);\n+                    });\n@@ -1017,3 +884,3 @@\n-                checkISE(() -> {\n-                    int o = (int) vh.getAndBitwiseXor(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        int o = (int) vh.getAndBitwiseXor(array, ci, VALUE_1);\n+                    });\n@@ -1021,3 +888,3 @@\n-                checkISE(() -> {\n-                    int o = (int) vh.getAndBitwiseXorAcquire(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        int o = (int) vh.getAndBitwiseXorAcquire(array, ci, VALUE_1);\n+                    });\n@@ -1025,3 +892,4 @@\n-                checkISE(() -> {\n-                    int o = (int) vh.getAndBitwiseXorRelease(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        int o = (int) vh.getAndBitwiseXorRelease(array, ci, VALUE_1);\n+                    });\n+                }\n@@ -1069,1 +937,0 @@\n-\n@@ -1113,1 +980,0 @@\n-\n@@ -1125,1 +991,0 @@\n-\n@@ -1170,2 +1035,0 @@\n-        int misalignmentAtZero = ByteBuffer.wrap(array).alignmentOffset(0, SIZE);\n-\n@@ -1175,2 +1038,0 @@\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n-\n@@ -1183,295 +1044,0 @@\n-\n-\n-            if (iAligned) {\n-                \/\/ Volatile\n-                {\n-                    vh.setVolatile(array, i, VALUE_2);\n-                    int x = (int) vh.getVolatile(array, i);\n-                    assertEquals(x, VALUE_2, \"setVolatile int value\");\n-                }\n-\n-                \/\/ Lazy\n-                {\n-                    vh.setRelease(array, i, VALUE_1);\n-                    int x = (int) vh.getAcquire(array, i);\n-                    assertEquals(x, VALUE_1, \"setRelease int value\");\n-                }\n-\n-                \/\/ Opaque\n-                {\n-                    vh.setOpaque(array, i, VALUE_2);\n-                    int x = (int) vh.getOpaque(array, i);\n-                    assertEquals(x, VALUE_2, \"setOpaque int value\");\n-                }\n-\n-                vh.set(array, i, VALUE_1);\n-\n-                \/\/ Compare\n-                {\n-                    boolean r = vh.compareAndSet(array, i, VALUE_1, VALUE_2);\n-                    assertEquals(r, true, \"success compareAndSet int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"success compareAndSet int value\");\n-                }\n-\n-                {\n-                    boolean r = vh.compareAndSet(array, i, VALUE_1, VALUE_3);\n-                    assertEquals(r, false, \"failing compareAndSet int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"failing compareAndSet int value\");\n-                }\n-\n-                {\n-                    int r = (int) vh.compareAndExchange(array, i, VALUE_2, VALUE_1);\n-                    assertEquals(r, VALUE_2, \"success compareAndExchange int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"success compareAndExchange int value\");\n-                }\n-\n-                {\n-                    int r = (int) vh.compareAndExchange(array, i, VALUE_2, VALUE_3);\n-                    assertEquals(r, VALUE_1, \"failing compareAndExchange int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"failing compareAndExchange int value\");\n-                }\n-\n-                {\n-                    int r = (int) vh.compareAndExchangeAcquire(array, i, VALUE_1, VALUE_2);\n-                    assertEquals(r, VALUE_1, \"success compareAndExchangeAcquire int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"success compareAndExchangeAcquire int value\");\n-                }\n-\n-                {\n-                    int r = (int) vh.compareAndExchangeAcquire(array, i, VALUE_1, VALUE_3);\n-                    assertEquals(r, VALUE_2, \"failing compareAndExchangeAcquire int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"failing compareAndExchangeAcquire int value\");\n-                }\n-\n-                {\n-                    int r = (int) vh.compareAndExchangeRelease(array, i, VALUE_2, VALUE_1);\n-                    assertEquals(r, VALUE_2, \"success compareAndExchangeRelease int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"success compareAndExchangeRelease int value\");\n-                }\n-\n-                {\n-                    int r = (int) vh.compareAndExchangeRelease(array, i, VALUE_2, VALUE_3);\n-                    assertEquals(r, VALUE_1, \"failing compareAndExchangeRelease int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"failing compareAndExchangeRelease int value\");\n-                }\n-\n-                {\n-                    boolean success = false;\n-                    for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n-                        success = vh.weakCompareAndSetPlain(array, i, VALUE_1, VALUE_2);\n-                        if (!success) weakDelay();\n-                    }\n-                    assertEquals(success, true, \"success weakCompareAndSetPlain int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"success weakCompareAndSetPlain int value\");\n-                }\n-\n-                {\n-                    boolean success = vh.weakCompareAndSetPlain(array, i, VALUE_1, VALUE_3);\n-                    assertEquals(success, false, \"failing weakCompareAndSetPlain int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"failing weakCompareAndSetPlain int value\");\n-                }\n-\n-                {\n-                    boolean success = false;\n-                    for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n-                        success = vh.weakCompareAndSetAcquire(array, i, VALUE_2, VALUE_1);\n-                        if (!success) weakDelay();\n-                    }\n-                    assertEquals(success, true, \"success weakCompareAndSetAcquire int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"success weakCompareAndSetAcquire int\");\n-                }\n-\n-                {\n-                    boolean success = vh.weakCompareAndSetAcquire(array, i, VALUE_2, VALUE_3);\n-                    assertEquals(success, false, \"failing weakCompareAndSetAcquire int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"failing weakCompareAndSetAcquire int value\");\n-                }\n-\n-                {\n-                    boolean success = false;\n-                    for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n-                        success = vh.weakCompareAndSetRelease(array, i, VALUE_1, VALUE_2);\n-                        if (!success) weakDelay();\n-                    }\n-                    assertEquals(success, true, \"success weakCompareAndSetRelease int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"success weakCompareAndSetRelease int\");\n-                }\n-\n-                {\n-                    boolean success = vh.weakCompareAndSetRelease(array, i, VALUE_1, VALUE_3);\n-                    assertEquals(success, false, \"failing weakCompareAndSetRelease int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"failing weakCompareAndSetRelease int value\");\n-                }\n-\n-                {\n-                    boolean success = false;\n-                    for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n-                        success = vh.weakCompareAndSet(array, i, VALUE_2, VALUE_1);\n-                        if (!success) weakDelay();\n-                    }\n-                    assertEquals(success, true, \"success weakCompareAndSet int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"success weakCompareAndSet int\");\n-                }\n-\n-                {\n-                    boolean success = vh.weakCompareAndSet(array, i, VALUE_2, VALUE_3);\n-                    assertEquals(success, false, \"failing weakCompareAndSet int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"failing weakCompareAndSet int value\");\n-                }\n-\n-                \/\/ Compare set and get\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    int o = (int) vh.getAndSet(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndSet int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"getAndSet int value\");\n-                }\n-\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    int o = (int) vh.getAndSetAcquire(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndSetAcquire int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"getAndSetAcquire int value\");\n-                }\n-\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    int o = (int) vh.getAndSetRelease(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndSetRelease int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"getAndSetRelease int value\");\n-                }\n-\n-                \/\/ get and add, add and get\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    int o = (int) vh.getAndAdd(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndAdd int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 + VALUE_2, \"getAndAdd int value\");\n-                }\n-\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    int o = (int) vh.getAndAddAcquire(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndAddAcquire int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 + VALUE_2, \"getAndAddAcquire int value\");\n-                }\n-\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    int o = (int) vh.getAndAddRelease(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndAddRelease int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 + VALUE_2, \"getAndAddRelease int value\");\n-                }\n-\n-                \/\/ get and bitwise or\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    int o = (int) vh.getAndBitwiseOr(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseOr int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 | VALUE_2, \"getAndBitwiseOr int value\");\n-                }\n-\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    int o = (int) vh.getAndBitwiseOrAcquire(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseOrAcquire int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 | VALUE_2, \"getAndBitwiseOrAcquire int value\");\n-                }\n-\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    int o = (int) vh.getAndBitwiseOrRelease(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseOrRelease int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 | VALUE_2, \"getAndBitwiseOrRelease int value\");\n-                }\n-\n-                \/\/ get and bitwise and\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    int o = (int) vh.getAndBitwiseAnd(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseAnd int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 & VALUE_2, \"getAndBitwiseAnd int value\");\n-                }\n-\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    int o = (int) vh.getAndBitwiseAndAcquire(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseAndAcquire int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 & VALUE_2, \"getAndBitwiseAndAcquire int value\");\n-                }\n-\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    int o = (int) vh.getAndBitwiseAndRelease(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseAndRelease int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 & VALUE_2, \"getAndBitwiseAndRelease int value\");\n-                }\n-\n-                \/\/ get and bitwise xor\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    int o = (int) vh.getAndBitwiseXor(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseXor int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 ^ VALUE_2, \"getAndBitwiseXor int value\");\n-                }\n-\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    int o = (int) vh.getAndBitwiseXorAcquire(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseXorAcquire int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 ^ VALUE_2, \"getAndBitwiseXorAcquire int value\");\n-                }\n-\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    int o = (int) vh.getAndBitwiseXorRelease(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseXorRelease int\");\n-                    int x = (int) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 ^ VALUE_2, \"getAndBitwiseXorRelease int value\");\n-                }\n-            }\n@@ -1486,2 +1052,0 @@\n-        int misalignmentAtZero = array.alignmentOffset(0, SIZE);\n-\n@@ -1491,1 +1055,1 @@\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n+            boolean iAligned = array.isDirect() ? ((i + array.alignmentOffset(0, SIZE)) & (SIZE - 1)) == 0 : false;\n@@ -1800,2 +1364,0 @@\n-        int misalignmentAtZero = array.alignmentOffset(0, SIZE);\n-\n@@ -1808,1 +1370,1 @@\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n+            boolean iAligned = array.isDirect() ? ((i + array.alignmentOffset(0, SIZE)) & (SIZE - 1)) == 0 : false;\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestByteArrayAsInt.java","additions":253,"deletions":691,"binary":false,"changes":944,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-                    MethodHandles.byteArrayViewVarHandle(arrayType, bo),\n+                    MethodHandles.byteArrayViewVarHandle(arrayType, bo), false,\n@@ -80,1 +80,1 @@\n-                    MethodHandles.byteBufferViewVarHandle(arrayType, bo),\n+                    MethodHandles.byteBufferViewVarHandle(arrayType, bo), true,\n@@ -117,32 +117,74 @@\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_VOLATILE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_VOLATILE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_RELEASE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_OPAQUE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_OPAQUE));\n-\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_SET));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_RELEASE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_PLAIN));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_RELEASE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_RELEASE));\n-\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_RELEASE));\n-\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_RELEASE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_RELEASE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_RELEASE));\n+        if (vhs.supportsAtomicAccess) {\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_VOLATILE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_VOLATILE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_RELEASE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_OPAQUE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_OPAQUE));\n+        } else {\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_VOLATILE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.SET_VOLATILE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.SET_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_OPAQUE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.SET_OPAQUE));\n+        }\n+\n+        if (vhs.supportsAtomicAccess) {\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_SET));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_RELEASE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_PLAIN));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_RELEASE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_RELEASE));\n+        } else {\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_SET));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_PLAIN));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_RELEASE));\n+        }\n+\n+        if (vhs.supportsAtomicAccess) {\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_RELEASE));\n+        } else {\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_RELEASE));\n+        }\n+\n+\n+        if (vhs.supportsAtomicAccess) {\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_RELEASE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_RELEASE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_RELEASE));\n+        } else {\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_RELEASE));\n+        }\n@@ -183,3 +225,0 @@\n-                        cases.add(new VarHandleSourceAccessTestCase(\n-                                \"misaligned access\", bav, vh, h -> testArrayMisalignedAccess(bas, h),\n-                                false));\n@@ -210,3 +249,5 @@\n-                        cases.add(new VarHandleSourceAccessTestCase(\n-                                \"misaligned access\", bav, vh, h -> testArrayMisalignedAccess(bbs, h),\n-                                false));\n+                        if (bbs.s.isDirect()) {\n+                            cases.add(new VarHandleSourceAccessTestCase(\n+                                    \"misaligned access\", bav, vh, h -> testArrayMisalignedAccess(bbs, h),\n+                                    false));\n+                        }\n@@ -246,0 +287,14 @@\n+    }\n+\n+    static void testArrayNPE(ByteBufferSource bs, VarHandleSource vhs) {\n+        VarHandle vh = vhs.s;\n+        ByteBuffer array = null;\n+        int ci = 1;\n+\n+        checkNPE(() -> {\n+            long x = (long) vh.get(array, ci);\n+        });\n+\n+        checkNPE(() -> {\n+            vh.set(array, ci, VALUE_1);\n+        });\n@@ -364,1 +419,1 @@\n-    static void testArrayNPE(ByteBufferSource bs, VarHandleSource vhs) {\n+    static void testArrayUnsupported(ByteArraySource bs, VarHandleSource vhs) {\n@@ -366,1 +421,1 @@\n-        ByteBuffer array = null;\n+        byte[] array = bs.s;\n@@ -369,33 +424,1 @@\n-        checkNPE(() -> {\n-            long x = (long) vh.get(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.set(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            long x = (long) vh.getVolatile(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            long x = (long) vh.getAcquire(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            long x = (long) vh.getOpaque(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.setVolatile(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.setRelease(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.setOpaque(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -405,1 +428,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -409,1 +432,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -413,1 +436,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -417,1 +440,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -421,1 +444,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -425,1 +448,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -429,1 +452,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -433,1 +456,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -437,1 +460,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -441,1 +464,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -445,1 +468,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -449,1 +472,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -453,1 +476,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -457,1 +480,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -461,1 +484,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -465,1 +488,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -469,1 +492,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -473,1 +496,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -477,1 +500,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -481,1 +504,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -485,1 +508,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -489,1 +512,1 @@\n-        checkNPE(() -> {\n+        checkUOE(() -> {\n@@ -494,9 +517,0 @@\n-    static void testArrayUnsupported(ByteArraySource bs, VarHandleSource vhs) {\n-        VarHandle vh = vhs.s;\n-        byte[] array = bs.s;\n-        int ci = 1;\n-\n-\n-\n-    }\n-\n@@ -515,1 +529,1 @@\n-        if (readOnly) {\n+        if (readOnly && array.isDirect()) {\n@@ -527,1 +541,0 @@\n-\n@@ -572,1 +585,0 @@\n-\n@@ -621,28 +633,0 @@\n-        else {\n-        }\n-    }\n-\n-\n-    static void testArrayIndexOutOfBounds(ByteArraySource bs, VarHandleSource vhs) throws Throwable {\n-        VarHandle vh = vhs.s;\n-        byte[] array = bs.s;\n-\n-        int length = array.length - SIZE + 1;\n-        for (int i : new int[]{-1, Integer.MIN_VALUE, length, length + 1, Integer.MAX_VALUE}) {\n-            final int ci = i;\n-\n-            checkAIOOBE(() -> {\n-                long x = (long) vh.get(array, ci);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                vh.set(array, ci, VALUE_1);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                long x = (long) vh.getVolatile(array, ci);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                long x = (long) vh.getAcquire(array, ci);\n-            });\n@@ -650,5 +634,3 @@\n-            checkAIOOBE(() -> {\n-                long x = (long) vh.getOpaque(array, ci);\n-            });\n-\n-            checkAIOOBE(() -> {\n+        if (array.isDirect()) {\n+        } else {\n+            checkISE(() -> {\n@@ -658,1 +640,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -662,1 +644,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -665,2 +647,1 @@\n-\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -670,1 +651,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -674,1 +655,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -678,1 +659,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -682,1 +663,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -686,1 +667,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -690,1 +671,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -694,1 +675,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -698,1 +679,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -702,1 +683,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -706,1 +687,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -709,2 +690,1 @@\n-\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -714,1 +694,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -718,1 +698,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -721,2 +701,1 @@\n-\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -726,1 +705,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -730,1 +709,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -734,1 +713,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -738,1 +717,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -742,1 +721,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -746,1 +725,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -750,1 +729,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -754,1 +733,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -757,0 +736,15 @@\n+        }\n+    }\n+\n+\n+    static void testArrayIndexOutOfBounds(ByteArraySource bs, VarHandleSource vhs) throws Throwable {\n+        VarHandle vh = vhs.s;\n+        byte[] array = bs.s;\n+\n+        int length = array.length - SIZE + 1;\n+        for (int i : new int[]{-1, Integer.MIN_VALUE, length, length + 1, Integer.MAX_VALUE}) {\n+            final int ci = i;\n+\n+            checkAIOOBE(() -> {\n+                long x = (long) vh.get(array, ci);\n+            });\n@@ -758,0 +752,3 @@\n+            checkAIOOBE(() -> {\n+                vh.set(array, ci, VALUE_1);\n+            });\n@@ -781,13 +778,1 @@\n-            checkIOOBE(() -> {\n-                long x = (long) vh.getVolatile(array, ci);\n-            });\n-\n-            checkIOOBE(() -> {\n-                long x = (long) vh.getAcquire(array, ci);\n-            });\n-\n-            checkIOOBE(() -> {\n-                long x = (long) vh.getOpaque(array, ci);\n-            });\n-\n-            if (!readOnly) {\n+            if (array.isDirect()) {\n@@ -795,1 +780,1 @@\n-                    vh.setVolatile(array, ci, VALUE_1);\n+                    long x = (long) vh.getVolatile(array, ci);\n@@ -799,1 +784,1 @@\n-                    vh.setRelease(array, ci, VALUE_1);\n+                    long x = (long) vh.getAcquire(array, ci);\n@@ -803,1 +788,1 @@\n-                    vh.setOpaque(array, ci, VALUE_1);\n+                    long x = (long) vh.getOpaque(array, ci);\n@@ -806,3 +791,4 @@\n-                checkIOOBE(() -> {\n-                    boolean r = vh.compareAndSet(array, ci, VALUE_1, VALUE_2);\n-                });\n+                if (!readOnly) {\n+                    checkIOOBE(() -> {\n+                        vh.setVolatile(array, ci, VALUE_1);\n+                    });\n@@ -810,3 +796,3 @@\n-                checkIOOBE(() -> {\n-                    long r = (long) vh.compareAndExchange(array, ci, VALUE_2, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        vh.setRelease(array, ci, VALUE_1);\n+                    });\n@@ -814,3 +800,3 @@\n-                checkIOOBE(() -> {\n-                    long r = (long) vh.compareAndExchangeAcquire(array, ci, VALUE_2, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        vh.setOpaque(array, ci, VALUE_1);\n+                    });\n@@ -818,3 +804,3 @@\n-                checkIOOBE(() -> {\n-                    long r = (long) vh.compareAndExchangeRelease(array, ci, VALUE_2, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.compareAndSet(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -822,3 +808,3 @@\n-                checkIOOBE(() -> {\n-                    boolean r = vh.weakCompareAndSetPlain(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        long r = (long) vh.compareAndExchange(array, ci, VALUE_2, VALUE_1);\n+                    });\n@@ -826,3 +812,3 @@\n-                checkIOOBE(() -> {\n-                    boolean r = vh.weakCompareAndSet(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        long r = (long) vh.compareAndExchangeAcquire(array, ci, VALUE_2, VALUE_1);\n+                    });\n@@ -830,3 +816,3 @@\n-                checkIOOBE(() -> {\n-                    boolean r = vh.weakCompareAndSetAcquire(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        long r = (long) vh.compareAndExchangeRelease(array, ci, VALUE_2, VALUE_1);\n+                    });\n@@ -834,3 +820,3 @@\n-                checkIOOBE(() -> {\n-                    boolean r = vh.weakCompareAndSetRelease(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.weakCompareAndSetPlain(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -838,3 +824,3 @@\n-                checkIOOBE(() -> {\n-                    long o = (long) vh.getAndSet(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.weakCompareAndSet(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -842,3 +828,3 @@\n-                checkIOOBE(() -> {\n-                    long o = (long) vh.getAndSetAcquire(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.weakCompareAndSetAcquire(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -846,3 +832,3 @@\n-                checkIOOBE(() -> {\n-                    long o = (long) vh.getAndSetRelease(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.weakCompareAndSetRelease(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -850,3 +836,3 @@\n-                checkIOOBE(() -> {\n-                    long o = (long) vh.getAndAdd(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        long o = (long) vh.getAndSet(array, ci, VALUE_1);\n+                    });\n@@ -854,3 +840,3 @@\n-                checkIOOBE(() -> {\n-                    long o = (long) vh.getAndAddAcquire(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        long o = (long) vh.getAndSetAcquire(array, ci, VALUE_1);\n+                    });\n@@ -858,3 +844,3 @@\n-                checkIOOBE(() -> {\n-                    long o = (long) vh.getAndAddRelease(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        long o = (long) vh.getAndSetRelease(array, ci, VALUE_1);\n+                    });\n@@ -862,3 +848,3 @@\n-                checkIOOBE(() -> {\n-                    long o = (long) vh.getAndBitwiseOr(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        long o = (long) vh.getAndAdd(array, ci, VALUE_1);\n+                    });\n@@ -866,3 +852,3 @@\n-                checkIOOBE(() -> {\n-                    long o = (long) vh.getAndBitwiseOrAcquire(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        long o = (long) vh.getAndAddAcquire(array, ci, VALUE_1);\n+                    });\n@@ -870,3 +856,3 @@\n-                checkIOOBE(() -> {\n-                    long o = (long) vh.getAndBitwiseOrRelease(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        long o = (long) vh.getAndAddRelease(array, ci, VALUE_1);\n+                    });\n@@ -874,122 +860,3 @@\n-                checkIOOBE(() -> {\n-                    long o = (long) vh.getAndBitwiseAnd(array, ci, VALUE_1);\n-                });\n-\n-                checkIOOBE(() -> {\n-                    long o = (long) vh.getAndBitwiseAndAcquire(array, ci, VALUE_1);\n-                });\n-\n-                checkIOOBE(() -> {\n-                    long o = (long) vh.getAndBitwiseAndRelease(array, ci, VALUE_1);\n-                });\n-\n-                checkIOOBE(() -> {\n-                    long o = (long) vh.getAndBitwiseXor(array, ci, VALUE_1);\n-                });\n-\n-                checkIOOBE(() -> {\n-                    long o = (long) vh.getAndBitwiseXorAcquire(array, ci, VALUE_1);\n-                });\n-\n-                checkIOOBE(() -> {\n-                    long o = (long) vh.getAndBitwiseXorRelease(array, ci, VALUE_1);\n-                });\n-            }\n-        }\n-    }\n-\n-    static void testArrayMisalignedAccess(ByteArraySource bs, VarHandleSource vhs) throws Throwable {\n-        VarHandle vh = vhs.s;\n-        byte[] array = bs.s;\n-\n-        int misalignmentAtZero = ByteBuffer.wrap(array).alignmentOffset(0, SIZE);\n-\n-        int length = array.length - SIZE + 1;\n-        for (int i = 0; i < length; i++) {\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n-            final int ci = i;\n-\n-            if (!iAligned) {\n-                checkISE(() -> {\n-                    long x = (long) vh.getVolatile(array, ci);\n-                });\n-\n-                checkISE(() -> {\n-                    long x = (long) vh.getAcquire(array, ci);\n-                });\n-\n-                checkISE(() -> {\n-                    long x = (long) vh.getOpaque(array, ci);\n-                });\n-\n-                checkISE(() -> {\n-                    vh.setVolatile(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    vh.setRelease(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    vh.setOpaque(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    boolean r = vh.compareAndSet(array, ci, VALUE_1, VALUE_2);\n-                });\n-\n-                checkISE(() -> {\n-                    long r = (long) vh.compareAndExchange(array, ci, VALUE_2, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    long r = (long) vh.compareAndExchangeAcquire(array, ci, VALUE_2, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    long r = (long) vh.compareAndExchangeRelease(array, ci, VALUE_2, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    boolean r = vh.weakCompareAndSetPlain(array, ci, VALUE_1, VALUE_2);\n-                });\n-\n-                checkISE(() -> {\n-                    boolean r = vh.weakCompareAndSet(array, ci, VALUE_1, VALUE_2);\n-                });\n-\n-                checkISE(() -> {\n-                    boolean r = vh.weakCompareAndSetAcquire(array, ci, VALUE_1, VALUE_2);\n-                });\n-\n-                checkISE(() -> {\n-                    boolean r = vh.weakCompareAndSetRelease(array, ci, VALUE_1, VALUE_2);\n-                });\n-\n-                checkISE(() -> {\n-                    long o = (long) vh.getAndSet(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    long o = (long) vh.getAndSetAcquire(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    long o = (long) vh.getAndSetRelease(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    long o = (long) vh.getAndAdd(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    long o = (long) vh.getAndAddAcquire(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    long o = (long) vh.getAndAddRelease(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    long o = (long) vh.getAndBitwiseOr(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        long o = (long) vh.getAndBitwiseOr(array, ci, VALUE_1);\n+                    });\n@@ -997,3 +864,3 @@\n-                checkISE(() -> {\n-                    long o = (long) vh.getAndBitwiseOrAcquire(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        long o = (long) vh.getAndBitwiseOrAcquire(array, ci, VALUE_1);\n+                    });\n@@ -1001,3 +868,3 @@\n-                checkISE(() -> {\n-                    long o = (long) vh.getAndBitwiseOrRelease(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        long o = (long) vh.getAndBitwiseOrRelease(array, ci, VALUE_1);\n+                    });\n@@ -1005,3 +872,3 @@\n-                checkISE(() -> {\n-                    long o = (long) vh.getAndBitwiseAnd(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        long o = (long) vh.getAndBitwiseAnd(array, ci, VALUE_1);\n+                    });\n@@ -1009,3 +876,3 @@\n-                checkISE(() -> {\n-                    long o = (long) vh.getAndBitwiseAndAcquire(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        long o = (long) vh.getAndBitwiseAndAcquire(array, ci, VALUE_1);\n+                    });\n@@ -1013,3 +880,3 @@\n-                checkISE(() -> {\n-                    long o = (long) vh.getAndBitwiseAndRelease(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        long o = (long) vh.getAndBitwiseAndRelease(array, ci, VALUE_1);\n+                    });\n@@ -1017,3 +884,3 @@\n-                checkISE(() -> {\n-                    long o = (long) vh.getAndBitwiseXor(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        long o = (long) vh.getAndBitwiseXor(array, ci, VALUE_1);\n+                    });\n@@ -1021,3 +888,3 @@\n-                checkISE(() -> {\n-                    long o = (long) vh.getAndBitwiseXorAcquire(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        long o = (long) vh.getAndBitwiseXorAcquire(array, ci, VALUE_1);\n+                    });\n@@ -1025,3 +892,4 @@\n-                checkISE(() -> {\n-                    long o = (long) vh.getAndBitwiseXorRelease(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        long o = (long) vh.getAndBitwiseXorRelease(array, ci, VALUE_1);\n+                    });\n+                }\n@@ -1069,1 +937,0 @@\n-\n@@ -1113,1 +980,0 @@\n-\n@@ -1125,1 +991,0 @@\n-\n@@ -1170,2 +1035,0 @@\n-        int misalignmentAtZero = ByteBuffer.wrap(array).alignmentOffset(0, SIZE);\n-\n@@ -1175,2 +1038,0 @@\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n-\n@@ -1183,295 +1044,0 @@\n-\n-\n-            if (iAligned) {\n-                \/\/ Volatile\n-                {\n-                    vh.setVolatile(array, i, VALUE_2);\n-                    long x = (long) vh.getVolatile(array, i);\n-                    assertEquals(x, VALUE_2, \"setVolatile long value\");\n-                }\n-\n-                \/\/ Lazy\n-                {\n-                    vh.setRelease(array, i, VALUE_1);\n-                    long x = (long) vh.getAcquire(array, i);\n-                    assertEquals(x, VALUE_1, \"setRelease long value\");\n-                }\n-\n-                \/\/ Opaque\n-                {\n-                    vh.setOpaque(array, i, VALUE_2);\n-                    long x = (long) vh.getOpaque(array, i);\n-                    assertEquals(x, VALUE_2, \"setOpaque long value\");\n-                }\n-\n-                vh.set(array, i, VALUE_1);\n-\n-                \/\/ Compare\n-                {\n-                    boolean r = vh.compareAndSet(array, i, VALUE_1, VALUE_2);\n-                    assertEquals(r, true, \"success compareAndSet long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"success compareAndSet long value\");\n-                }\n-\n-                {\n-                    boolean r = vh.compareAndSet(array, i, VALUE_1, VALUE_3);\n-                    assertEquals(r, false, \"failing compareAndSet long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"failing compareAndSet long value\");\n-                }\n-\n-                {\n-                    long r = (long) vh.compareAndExchange(array, i, VALUE_2, VALUE_1);\n-                    assertEquals(r, VALUE_2, \"success compareAndExchange long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"success compareAndExchange long value\");\n-                }\n-\n-                {\n-                    long r = (long) vh.compareAndExchange(array, i, VALUE_2, VALUE_3);\n-                    assertEquals(r, VALUE_1, \"failing compareAndExchange long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"failing compareAndExchange long value\");\n-                }\n-\n-                {\n-                    long r = (long) vh.compareAndExchangeAcquire(array, i, VALUE_1, VALUE_2);\n-                    assertEquals(r, VALUE_1, \"success compareAndExchangeAcquire long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"success compareAndExchangeAcquire long value\");\n-                }\n-\n-                {\n-                    long r = (long) vh.compareAndExchangeAcquire(array, i, VALUE_1, VALUE_3);\n-                    assertEquals(r, VALUE_2, \"failing compareAndExchangeAcquire long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"failing compareAndExchangeAcquire long value\");\n-                }\n-\n-                {\n-                    long r = (long) vh.compareAndExchangeRelease(array, i, VALUE_2, VALUE_1);\n-                    assertEquals(r, VALUE_2, \"success compareAndExchangeRelease long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"success compareAndExchangeRelease long value\");\n-                }\n-\n-                {\n-                    long r = (long) vh.compareAndExchangeRelease(array, i, VALUE_2, VALUE_3);\n-                    assertEquals(r, VALUE_1, \"failing compareAndExchangeRelease long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"failing compareAndExchangeRelease long value\");\n-                }\n-\n-                {\n-                    boolean success = false;\n-                    for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n-                        success = vh.weakCompareAndSetPlain(array, i, VALUE_1, VALUE_2);\n-                        if (!success) weakDelay();\n-                    }\n-                    assertEquals(success, true, \"success weakCompareAndSetPlain long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"success weakCompareAndSetPlain long value\");\n-                }\n-\n-                {\n-                    boolean success = vh.weakCompareAndSetPlain(array, i, VALUE_1, VALUE_3);\n-                    assertEquals(success, false, \"failing weakCompareAndSetPlain long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"failing weakCompareAndSetPlain long value\");\n-                }\n-\n-                {\n-                    boolean success = false;\n-                    for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n-                        success = vh.weakCompareAndSetAcquire(array, i, VALUE_2, VALUE_1);\n-                        if (!success) weakDelay();\n-                    }\n-                    assertEquals(success, true, \"success weakCompareAndSetAcquire long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"success weakCompareAndSetAcquire long\");\n-                }\n-\n-                {\n-                    boolean success = vh.weakCompareAndSetAcquire(array, i, VALUE_2, VALUE_3);\n-                    assertEquals(success, false, \"failing weakCompareAndSetAcquire long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"failing weakCompareAndSetAcquire long value\");\n-                }\n-\n-                {\n-                    boolean success = false;\n-                    for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n-                        success = vh.weakCompareAndSetRelease(array, i, VALUE_1, VALUE_2);\n-                        if (!success) weakDelay();\n-                    }\n-                    assertEquals(success, true, \"success weakCompareAndSetRelease long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"success weakCompareAndSetRelease long\");\n-                }\n-\n-                {\n-                    boolean success = vh.weakCompareAndSetRelease(array, i, VALUE_1, VALUE_3);\n-                    assertEquals(success, false, \"failing weakCompareAndSetRelease long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"failing weakCompareAndSetRelease long value\");\n-                }\n-\n-                {\n-                    boolean success = false;\n-                    for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n-                        success = vh.weakCompareAndSet(array, i, VALUE_2, VALUE_1);\n-                        if (!success) weakDelay();\n-                    }\n-                    assertEquals(success, true, \"success weakCompareAndSet long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"success weakCompareAndSet long\");\n-                }\n-\n-                {\n-                    boolean success = vh.weakCompareAndSet(array, i, VALUE_2, VALUE_3);\n-                    assertEquals(success, false, \"failing weakCompareAndSet long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"failing weakCompareAndSet long value\");\n-                }\n-\n-                \/\/ Compare set and get\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    long o = (long) vh.getAndSet(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndSet long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"getAndSet long value\");\n-                }\n-\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    long o = (long) vh.getAndSetAcquire(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndSetAcquire long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"getAndSetAcquire long value\");\n-                }\n-\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    long o = (long) vh.getAndSetRelease(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndSetRelease long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"getAndSetRelease long value\");\n-                }\n-\n-                \/\/ get and add, add and get\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    long o = (long) vh.getAndAdd(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndAdd long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 + VALUE_2, \"getAndAdd long value\");\n-                }\n-\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    long o = (long) vh.getAndAddAcquire(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndAddAcquire long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 + VALUE_2, \"getAndAddAcquire long value\");\n-                }\n-\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    long o = (long) vh.getAndAddRelease(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndAddRelease long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 + VALUE_2, \"getAndAddRelease long value\");\n-                }\n-\n-                \/\/ get and bitwise or\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    long o = (long) vh.getAndBitwiseOr(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseOr long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 | VALUE_2, \"getAndBitwiseOr long value\");\n-                }\n-\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    long o = (long) vh.getAndBitwiseOrAcquire(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseOrAcquire long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 | VALUE_2, \"getAndBitwiseOrAcquire long value\");\n-                }\n-\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    long o = (long) vh.getAndBitwiseOrRelease(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseOrRelease long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 | VALUE_2, \"getAndBitwiseOrRelease long value\");\n-                }\n-\n-                \/\/ get and bitwise and\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    long o = (long) vh.getAndBitwiseAnd(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseAnd long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 & VALUE_2, \"getAndBitwiseAnd long value\");\n-                }\n-\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    long o = (long) vh.getAndBitwiseAndAcquire(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseAndAcquire long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 & VALUE_2, \"getAndBitwiseAndAcquire long value\");\n-                }\n-\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    long o = (long) vh.getAndBitwiseAndRelease(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseAndRelease long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 & VALUE_2, \"getAndBitwiseAndRelease long value\");\n-                }\n-\n-                \/\/ get and bitwise xor\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    long o = (long) vh.getAndBitwiseXor(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseXor long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 ^ VALUE_2, \"getAndBitwiseXor long value\");\n-                }\n-\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    long o = (long) vh.getAndBitwiseXorAcquire(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseXorAcquire long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 ^ VALUE_2, \"getAndBitwiseXorAcquire long value\");\n-                }\n-\n-                {\n-                    vh.set(array, i, VALUE_1);\n-\n-                    long o = (long) vh.getAndBitwiseXorRelease(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseXorRelease long\");\n-                    long x = (long) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 ^ VALUE_2, \"getAndBitwiseXorRelease long value\");\n-                }\n-            }\n@@ -1486,2 +1052,0 @@\n-        int misalignmentAtZero = array.alignmentOffset(0, SIZE);\n-\n@@ -1491,1 +1055,1 @@\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n+            boolean iAligned = array.isDirect() ? ((i + array.alignmentOffset(0, SIZE)) & (SIZE - 1)) == 0 : false;\n@@ -1800,2 +1364,0 @@\n-        int misalignmentAtZero = array.alignmentOffset(0, SIZE);\n-\n@@ -1808,1 +1370,1 @@\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n+            boolean iAligned = array.isDirect() ? ((i + array.alignmentOffset(0, SIZE)) & (SIZE - 1)) == 0 : false;\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestByteArrayAsLong.java","additions":253,"deletions":691,"binary":false,"changes":944,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-                    MethodHandles.byteArrayViewVarHandle(arrayType, bo),\n+                    MethodHandles.byteArrayViewVarHandle(arrayType, bo), false,\n@@ -80,1 +80,1 @@\n-                    MethodHandles.byteBufferViewVarHandle(arrayType, bo),\n+                    MethodHandles.byteBufferViewVarHandle(arrayType, bo), true,\n@@ -117,32 +117,42 @@\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_VOLATILE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_VOLATILE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_RELEASE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_OPAQUE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_OPAQUE));\n-\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_SET));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_RELEASE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_PLAIN));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_RELEASE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_RELEASE));\n-\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_RELEASE));\n-\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_RELEASE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_RELEASE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_RELEASE));\n+        if (vhs.supportsAtomicAccess) {\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_VOLATILE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_VOLATILE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_RELEASE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_OPAQUE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_OPAQUE));\n+        } else {\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_VOLATILE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.SET_VOLATILE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.SET_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_OPAQUE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.SET_OPAQUE));\n+        }\n+\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_SET));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_PLAIN));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_RELEASE));\n+\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_RELEASE));\n+\n+\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_RELEASE));\n@@ -183,3 +193,0 @@\n-                        cases.add(new VarHandleSourceAccessTestCase(\n-                                \"misaligned access\", bav, vh, h -> testArrayMisalignedAccess(bas, h),\n-                                false));\n@@ -210,3 +217,5 @@\n-                        cases.add(new VarHandleSourceAccessTestCase(\n-                                \"misaligned access\", bav, vh, h -> testArrayMisalignedAccess(bbs, h),\n-                                false));\n+                        if (bbs.s.isDirect()) {\n+                            cases.add(new VarHandleSourceAccessTestCase(\n+                                    \"misaligned access\", bav, vh, h -> testArrayMisalignedAccess(bbs, h),\n+                                    false));\n+                        }\n@@ -246,27 +255,0 @@\n-\n-        checkNPE(() -> {\n-            short x = (short) vh.getVolatile(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            short x = (short) vh.getAcquire(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            short x = (short) vh.getOpaque(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.setVolatile(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.setRelease(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.setOpaque(array, ci, VALUE_1);\n-        });\n-\n-\n-\n@@ -426,1 +408,1 @@\n-        if (readOnly) {\n+        if (readOnly && array.isDirect()) {\n@@ -438,0 +420,5 @@\n+\n+\n+        }\n+\n+        if (array.isDirect()) {\n@@ -481,1 +468,0 @@\n-\n@@ -493,1 +479,0 @@\n-\n@@ -529,2 +514,12 @@\n-        }\n-        else {\n+        } else {\n+            checkISE(() -> {\n+                vh.setVolatile(array, ci, VALUE_1);\n+            });\n+\n+            checkISE(() -> {\n+                vh.setRelease(array, ci, VALUE_1);\n+            });\n+\n+            checkISE(() -> {\n+                vh.setOpaque(array, ci, VALUE_1);\n+            });\n@@ -639,27 +634,0 @@\n-\n-            checkAIOOBE(() -> {\n-                short x = (short) vh.getVolatile(array, ci);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                short x = (short) vh.getAcquire(array, ci);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                short x = (short) vh.getOpaque(array, ci);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                vh.setVolatile(array, ci, VALUE_1);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                vh.setRelease(array, ci, VALUE_1);\n-            });\n-\n-            checkAIOOBE(() -> {\n-                vh.setOpaque(array, ci, VALUE_1);\n-            });\n-\n-\n-\n@@ -689,17 +657,1 @@\n-            checkIOOBE(() -> {\n-                short x = (short) vh.getVolatile(array, ci);\n-            });\n-\n-            checkIOOBE(() -> {\n-                short x = (short) vh.getAcquire(array, ci);\n-            });\n-\n-            checkIOOBE(() -> {\n-                short x = (short) vh.getOpaque(array, ci);\n-            });\n-\n-            if (!readOnly) {\n-                checkIOOBE(() -> {\n-                    vh.setVolatile(array, ci, VALUE_1);\n-                });\n-\n+            if (array.isDirect()) {\n@@ -707,26 +659,0 @@\n-                    vh.setRelease(array, ci, VALUE_1);\n-                });\n-\n-                checkIOOBE(() -> {\n-                    vh.setOpaque(array, ci, VALUE_1);\n-                });\n-\n-\n-\n-            }\n-        }\n-    }\n-\n-    static void testArrayMisalignedAccess(ByteArraySource bs, VarHandleSource vhs) throws Throwable {\n-        VarHandle vh = vhs.s;\n-        byte[] array = bs.s;\n-\n-        int misalignmentAtZero = ByteBuffer.wrap(array).alignmentOffset(0, SIZE);\n-\n-        int length = array.length - SIZE + 1;\n-        for (int i = 0; i < length; i++) {\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n-            final int ci = i;\n-\n-            if (!iAligned) {\n-                checkISE(() -> {\n@@ -736,1 +662,1 @@\n-                checkISE(() -> {\n+                checkIOOBE(() -> {\n@@ -740,1 +666,1 @@\n-                checkISE(() -> {\n+                checkIOOBE(() -> {\n@@ -744,3 +670,4 @@\n-                checkISE(() -> {\n-                    vh.setVolatile(array, ci, VALUE_1);\n-                });\n+                if (!readOnly) {\n+                    checkIOOBE(() -> {\n+                        vh.setVolatile(array, ci, VALUE_1);\n+                    });\n@@ -748,3 +675,7 @@\n-                checkISE(() -> {\n-                    vh.setRelease(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        vh.setRelease(array, ci, VALUE_1);\n+                    });\n+\n+                    checkIOOBE(() -> {\n+                        vh.setOpaque(array, ci, VALUE_1);\n+                    });\n@@ -752,3 +683,0 @@\n-                checkISE(() -> {\n-                    vh.setOpaque(array, ci, VALUE_1);\n-                });\n@@ -757,0 +685,1 @@\n+                }\n@@ -798,3 +727,0 @@\n-\n-\n-\n@@ -810,2 +736,0 @@\n-        int misalignmentAtZero = ByteBuffer.wrap(array).alignmentOffset(0, SIZE);\n-\n@@ -815,2 +739,0 @@\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n-\n@@ -823,26 +745,0 @@\n-\n-\n-            if (iAligned) {\n-                \/\/ Volatile\n-                {\n-                    vh.setVolatile(array, i, VALUE_2);\n-                    short x = (short) vh.getVolatile(array, i);\n-                    assertEquals(x, VALUE_2, \"setVolatile short value\");\n-                }\n-\n-                \/\/ Lazy\n-                {\n-                    vh.setRelease(array, i, VALUE_1);\n-                    short x = (short) vh.getAcquire(array, i);\n-                    assertEquals(x, VALUE_1, \"setRelease short value\");\n-                }\n-\n-                \/\/ Opaque\n-                {\n-                    vh.setOpaque(array, i, VALUE_2);\n-                    short x = (short) vh.getOpaque(array, i);\n-                    assertEquals(x, VALUE_2, \"setOpaque short value\");\n-                }\n-\n-\n-            }\n@@ -857,2 +753,0 @@\n-        int misalignmentAtZero = array.alignmentOffset(0, SIZE);\n-\n@@ -862,1 +756,1 @@\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n+            boolean iAligned = array.isDirect() ? ((i + array.alignmentOffset(0, SIZE)) & (SIZE - 1)) == 0 : false;\n@@ -902,2 +796,0 @@\n-        int misalignmentAtZero = array.alignmentOffset(0, SIZE);\n-\n@@ -910,1 +802,1 @@\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n+            boolean iAligned = array.isDirect() ? ((i + array.alignmentOffset(0, SIZE)) & (SIZE - 1)) == 0 : false;\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestByteArrayAsShort.java","additions":84,"deletions":192,"binary":false,"changes":276,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-                    MethodHandles.byteArrayViewVarHandle(arrayType, bo),\n+                    MethodHandles.byteArrayViewVarHandle(arrayType, bo), false,\n@@ -84,1 +84,1 @@\n-                    MethodHandles.byteBufferViewVarHandle(arrayType, bo),\n+                    MethodHandles.byteBufferViewVarHandle(arrayType, bo), true,\n@@ -121,6 +121,15 @@\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_VOLATILE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_VOLATILE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_RELEASE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_OPAQUE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_OPAQUE));\n+        if (vhs.supportsAtomicAccess) {\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_VOLATILE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_VOLATILE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_RELEASE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_OPAQUE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_OPAQUE));\n+        } else {\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_VOLATILE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.SET_VOLATILE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.SET_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_OPAQUE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.SET_OPAQUE));\n+        }\n@@ -129,23 +138,27 @@\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_SET));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_RELEASE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_PLAIN));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_RELEASE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_RELEASE));\n-#else[CAS]\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_SET));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_RELEASE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_PLAIN));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_RELEASE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_RELEASE));\n+        if (vhs.supportsAtomicAccess) {\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_SET));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_RELEASE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_PLAIN));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_RELEASE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_RELEASE));\n+        } else {\n+#end[CAS]\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_SET));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_PLAIN));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_RELEASE));\n+#if[CAS]\n+        }\n@@ -155,7 +168,11 @@\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_RELEASE));\n-#else[AtomicAdd]\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_RELEASE));\n+        if (vhs.supportsAtomicAccess) {\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_RELEASE));\n+        } else {\n+#end[AtomicAdd]\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_RELEASE));\n+#if[AtomicAdd]\n+        }\n@@ -164,0 +181,1 @@\n+\n@@ -165,19 +183,23 @@\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_RELEASE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_RELEASE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_ACQUIRE));\n-        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_RELEASE));\n-#else[Bitwise]\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_RELEASE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_RELEASE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_ACQUIRE));\n-        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_RELEASE));\n+        if (vhs.supportsAtomicAccess) {\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_RELEASE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_RELEASE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_ACQUIRE));\n+            assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_RELEASE));\n+        } else {\n+#end[Bitwise]\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_RELEASE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_ACQUIRE));\n+            assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_RELEASE));\n+#if[Bitwise]\n+        }\n@@ -219,3 +241,0 @@\n-                        cases.add(new VarHandleSourceAccessTestCase(\n-                                \"misaligned access\", bav, vh, h -> testArrayMisalignedAccess(bas, h),\n-                                false));\n@@ -246,3 +265,5 @@\n-                        cases.add(new VarHandleSourceAccessTestCase(\n-                                \"misaligned access\", bav, vh, h -> testArrayMisalignedAccess(bbs, h),\n-                                false));\n+                        if (bbs.s.isDirect()) {\n+                            cases.add(new VarHandleSourceAccessTestCase(\n+                                    \"misaligned access\", bav, vh, h -> testArrayMisalignedAccess(bbs, h),\n+                                    false));\n+                        }\n@@ -282,122 +303,0 @@\n-\n-        checkNPE(() -> {\n-            $type$ x = ($type$) vh.getVolatile(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            $type$ x = ($type$) vh.getAcquire(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            $type$ x = ($type$) vh.getOpaque(array, ci);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.setVolatile(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.setRelease(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            vh.setOpaque(array, ci, VALUE_1);\n-        });\n-\n-#if[CAS]\n-        checkNPE(() -> {\n-            boolean r = vh.compareAndSet(array, ci, VALUE_1, VALUE_2);\n-        });\n-\n-        checkNPE(() -> {\n-            $type$ r = ($type$) vh.compareAndExchange(array, ci, VALUE_2, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            $type$ r = ($type$) vh.compareAndExchangeAcquire(array, ci, VALUE_2, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            $type$ r = ($type$) vh.compareAndExchangeRelease(array, ci, VALUE_2, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            boolean r = vh.weakCompareAndSetPlain(array, ci, VALUE_1, VALUE_2);\n-        });\n-\n-        checkNPE(() -> {\n-            boolean r = vh.weakCompareAndSet(array, ci, VALUE_1, VALUE_2);\n-        });\n-\n-        checkNPE(() -> {\n-            boolean r = vh.weakCompareAndSetAcquire(array, ci, VALUE_1, VALUE_2);\n-        });\n-\n-        checkNPE(() -> {\n-            boolean r = vh.weakCompareAndSetRelease(array, ci, VALUE_1, VALUE_2);\n-        });\n-\n-        checkNPE(() -> {\n-            $type$ o = ($type$) vh.getAndSet(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            $type$ o = ($type$) vh.getAndSetAcquire(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            $type$ o = ($type$) vh.getAndSetRelease(array, ci, VALUE_1);\n-        });\n-#end[CAS]\n-\n-#if[AtomicAdd]\n-        checkNPE(() -> {\n-            $type$ o = ($type$) vh.getAndAdd(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            $type$ o = ($type$) vh.getAndAddAcquire(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            $type$ o = ($type$) vh.getAndAddRelease(array, ci, VALUE_1);\n-        });\n-#end[AtomicAdd]\n-\n-#if[Bitwise]\n-        checkNPE(() -> {\n-            $type$ o = ($type$) vh.getAndBitwiseOr(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            $type$ o = ($type$) vh.getAndBitwiseOrAcquire(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            $type$ o = ($type$) vh.getAndBitwiseOrRelease(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            $type$ o = ($type$) vh.getAndBitwiseAnd(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            $type$ o = ($type$) vh.getAndBitwiseAndAcquire(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            $type$ o = ($type$) vh.getAndBitwiseAndRelease(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            $type$ o = ($type$) vh.getAndBitwiseXor(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            $type$ o = ($type$) vh.getAndBitwiseXorAcquire(array, ci, VALUE_1);\n-        });\n-\n-        checkNPE(() -> {\n-            $type$ o = ($type$) vh.getAndBitwiseXorRelease(array, ci, VALUE_1);\n-        });\n-#end[Bitwise]\n@@ -547,1 +446,0 @@\n-#if[!CAS]\n@@ -591,1 +489,0 @@\n-#end[CAS]\n@@ -593,1 +490,0 @@\n-#if[!AtomicAdd]\n@@ -605,1 +501,0 @@\n-#end[AtomicAdd]\n@@ -607,1 +502,0 @@\n-#if[!Bitwise]\n@@ -643,1 +537,0 @@\n-#end[Bitwise]\n@@ -658,1 +551,1 @@\n-        if (readOnly) {\n+        if (readOnly && array.isDirect()) {\n@@ -671,1 +564,0 @@\n-\n@@ -715,45 +607,0 @@\n-\n-#else[CAS]\n-            checkUOE(() -> {\n-                boolean r = vh.compareAndSet(array, ci, VALUE_1, VALUE_2);\n-            });\n-\n-            checkUOE(() -> {\n-                $type$ r = ($type$) vh.compareAndExchange(array, ci, VALUE_2, VALUE_1);\n-            });\n-\n-            checkUOE(() -> {\n-                $type$ r = ($type$) vh.compareAndExchangeAcquire(array, ci, VALUE_2, VALUE_1);\n-            });\n-\n-            checkUOE(() -> {\n-                $type$ r = ($type$) vh.compareAndExchangeRelease(array, ci, VALUE_2, VALUE_1);\n-            });\n-\n-            checkUOE(() -> {\n-                boolean r = vh.weakCompareAndSetPlain(array, ci, VALUE_1, VALUE_2);\n-            });\n-\n-            checkUOE(() -> {\n-                boolean r = vh.weakCompareAndSet(array, ci, VALUE_1, VALUE_2);\n-            });\n-\n-            checkUOE(() -> {\n-                boolean r = vh.weakCompareAndSetAcquire(array, ci, VALUE_1, VALUE_2);\n-            });\n-\n-            checkUOE(() -> {\n-                boolean r = vh.weakCompareAndSetRelease(array, ci, VALUE_1, VALUE_2);\n-            });\n-\n-            checkUOE(() -> {\n-                $type$ o = ($type$) vh.getAndSet(array, ci, VALUE_1);\n-            });\n-\n-            checkUOE(() -> {\n-                $type$ o = ($type$) vh.getAndSetAcquire(array, ci, VALUE_1);\n-            });\n-\n-            checkUOE(() -> {\n-                $type$ o = ($type$) vh.getAndSetRelease(array, ci, VALUE_1);\n-            });\n@@ -774,12 +621,0 @@\n-#else[AtomicAdd]\n-            checkUOE(() -> {\n-                $type$ o = ($type$) vh.getAndAdd(array, ci, VALUE_1);\n-            });\n-\n-            checkUOE(() -> {\n-                $type$ o = ($type$) vh.getAndAddAcquire(array, ci, VALUE_1);\n-            });\n-\n-            checkUOE(() -> {\n-                $type$ o = ($type$) vh.getAndAddRelease(array, ci, VALUE_1);\n-            });\n@@ -824,36 +659,0 @@\n-#else[Bitwise]\n-            checkUOE(() -> {\n-                $type$ o = ($type$) vh.getAndBitwiseOr(array, ci, VALUE_1);\n-            });\n-\n-            checkUOE(() -> {\n-                $type$ o = ($type$) vh.getAndBitwiseOrAcquire(array, ci, VALUE_1);\n-            });\n-\n-            checkUOE(() -> {\n-                $type$ o = ($type$) vh.getAndBitwiseOrRelease(array, ci, VALUE_1);\n-            });\n-\n-            checkUOE(() -> {\n-                $type$ o = ($type$) vh.getAndBitwiseAnd(array, ci, VALUE_1);\n-            });\n-\n-            checkUOE(() -> {\n-                $type$ o = ($type$) vh.getAndBitwiseAndAcquire(array, ci, VALUE_1);\n-            });\n-\n-            checkUOE(() -> {\n-                $type$ o = ($type$) vh.getAndBitwiseAndRelease(array, ci, VALUE_1);\n-            });\n-\n-            checkUOE(() -> {\n-                $type$ o = ($type$) vh.getAndBitwiseXor(array, ci, VALUE_1);\n-            });\n-\n-            checkUOE(() -> {\n-                $type$ o = ($type$) vh.getAndBitwiseXorAcquire(array, ci, VALUE_1);\n-            });\n-\n-            checkUOE(() -> {\n-                $type$ o = ($type$) vh.getAndBitwiseXorRelease(array, ci, VALUE_1);\n-            });\n@@ -862,1 +661,2 @@\n-        else {\n+\n+        if (array.isDirect()) {\n@@ -958,3 +758,4 @@\n-        }\n-    }\n-\n+        } else {\n+            checkISE(() -> {\n+                vh.setVolatile(array, ci, VALUE_1);\n+            });\n@@ -962,3 +763,3 @@\n-    static void testArrayIndexOutOfBounds(ByteArraySource bs, VarHandleSource vhs) throws Throwable {\n-        VarHandle vh = vhs.s;\n-        byte[] array = bs.s;\n+            checkISE(() -> {\n+                vh.setRelease(array, ci, VALUE_1);\n+            });\n@@ -966,3 +767,7 @@\n-        int length = array.length - SIZE + 1;\n-        for (int i : new int[]{-1, Integer.MIN_VALUE, length, length + 1, Integer.MAX_VALUE}) {\n-            final int ci = i;\n+            checkISE(() -> {\n+                vh.setOpaque(array, ci, VALUE_1);\n+            });\n+#if[!CAS]\n+            checkUOE(() -> {\n+                boolean r = vh.compareAndSet(array, ci, VALUE_1, VALUE_2);\n+            });\n@@ -970,2 +775,2 @@\n-            checkAIOOBE(() -> {\n-                $type$ x = ($type$) vh.get(array, ci);\n+            checkUOE(() -> {\n+                $type$ r = ($type$) vh.compareAndExchange(array, ci, VALUE_2, VALUE_1);\n@@ -974,2 +779,2 @@\n-            checkAIOOBE(() -> {\n-                vh.set(array, ci, VALUE_1);\n+            checkUOE(() -> {\n+                $type$ r = ($type$) vh.compareAndExchangeAcquire(array, ci, VALUE_2, VALUE_1);\n@@ -978,2 +783,2 @@\n-            checkAIOOBE(() -> {\n-                $type$ x = ($type$) vh.getVolatile(array, ci);\n+            checkUOE(() -> {\n+                $type$ r = ($type$) vh.compareAndExchangeRelease(array, ci, VALUE_2, VALUE_1);\n@@ -982,2 +787,2 @@\n-            checkAIOOBE(() -> {\n-                $type$ x = ($type$) vh.getAcquire(array, ci);\n+            checkUOE(() -> {\n+                boolean r = vh.weakCompareAndSetPlain(array, ci, VALUE_1, VALUE_2);\n@@ -986,2 +791,2 @@\n-            checkAIOOBE(() -> {\n-                $type$ x = ($type$) vh.getOpaque(array, ci);\n+            checkUOE(() -> {\n+                boolean r = vh.weakCompareAndSet(array, ci, VALUE_1, VALUE_2);\n@@ -990,2 +795,2 @@\n-            checkAIOOBE(() -> {\n-                vh.setVolatile(array, ci, VALUE_1);\n+            checkUOE(() -> {\n+                boolean r = vh.weakCompareAndSetAcquire(array, ci, VALUE_1, VALUE_2);\n@@ -994,2 +799,2 @@\n-            checkAIOOBE(() -> {\n-                vh.setRelease(array, ci, VALUE_1);\n+            checkUOE(() -> {\n+                boolean r = vh.weakCompareAndSetRelease(array, ci, VALUE_1, VALUE_2);\n@@ -998,2 +803,2 @@\n-            checkAIOOBE(() -> {\n-                vh.setOpaque(array, ci, VALUE_1);\n+            checkUOE(() -> {\n+                $type$ o = ($type$) vh.getAndSet(array, ci, VALUE_1);\n@@ -1001,1 +806,0 @@\n-#if[CAS]\n@@ -1003,1 +807,9 @@\n-            checkAIOOBE(() -> {\n+            checkUOE(() -> {\n+                $type$ o = ($type$) vh.getAndSetAcquire(array, ci, VALUE_1);\n+            });\n+\n+            checkUOE(() -> {\n+                $type$ o = ($type$) vh.getAndSetRelease(array, ci, VALUE_1);\n+            });\n+#else[CAS]\n+            checkISE(() -> {\n@@ -1007,1 +819,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -1011,1 +823,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -1015,1 +827,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -1019,1 +831,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -1023,1 +835,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -1027,1 +839,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -1031,1 +843,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -1035,1 +847,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -1039,1 +851,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -1043,1 +855,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -1047,0 +859,4 @@\n+#if[!AtomicAdd]\n+            checkUOE(() -> {\n+                $type$ o = ($type$) vh.getAndAdd(array, ci, VALUE_1);\n+            });\n@@ -1048,2 +864,9 @@\n-#if[AtomicAdd]\n-            checkAIOOBE(() -> {\n+            checkUOE(() -> {\n+                $type$ o = ($type$) vh.getAndAddAcquire(array, ci, VALUE_1);\n+            });\n+\n+            checkUOE(() -> {\n+                $type$ o = ($type$) vh.getAndAddRelease(array, ci, VALUE_1);\n+            });\n+#else[AtomicAdd]\n+            checkISE(() -> {\n@@ -1053,1 +876,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -1057,1 +880,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -1061,0 +884,4 @@\n+#if[!Bitwise]\n+            checkUOE(() -> {\n+                $type$ o = ($type$) vh.getAndBitwiseOr(array, ci, VALUE_1);\n+            });\n@@ -1062,2 +889,33 @@\n-#if[Bitwise]\n-            checkAIOOBE(() -> {\n+            checkUOE(() -> {\n+                $type$ o = ($type$) vh.getAndBitwiseOrAcquire(array, ci, VALUE_1);\n+            });\n+\n+            checkUOE(() -> {\n+                $type$ o = ($type$) vh.getAndBitwiseOrRelease(array, ci, VALUE_1);\n+            });\n+\n+            checkUOE(() -> {\n+                $type$ o = ($type$) vh.getAndBitwiseAnd(array, ci, VALUE_1);\n+            });\n+\n+            checkUOE(() -> {\n+                $type$ o = ($type$) vh.getAndBitwiseAndAcquire(array, ci, VALUE_1);\n+            });\n+\n+            checkUOE(() -> {\n+                $type$ o = ($type$) vh.getAndBitwiseAndRelease(array, ci, VALUE_1);\n+            });\n+\n+            checkUOE(() -> {\n+                $type$ o = ($type$) vh.getAndBitwiseXor(array, ci, VALUE_1);\n+            });\n+\n+            checkUOE(() -> {\n+                $type$ o = ($type$) vh.getAndBitwiseXorAcquire(array, ci, VALUE_1);\n+            });\n+\n+            checkUOE(() -> {\n+                $type$ o = ($type$) vh.getAndBitwiseXorRelease(array, ci, VALUE_1);\n+            });\n+#else[Bitwise]\n+            checkISE(() -> {\n@@ -1067,1 +925,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -1071,1 +929,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -1075,1 +933,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -1079,1 +937,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -1083,1 +941,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -1087,1 +945,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -1091,1 +949,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -1095,1 +953,1 @@\n-            checkAIOOBE(() -> {\n+            checkISE(() -> {\n@@ -1099,0 +957,15 @@\n+        }\n+    }\n+\n+\n+    static void testArrayIndexOutOfBounds(ByteArraySource bs, VarHandleSource vhs) throws Throwable {\n+        VarHandle vh = vhs.s;\n+        byte[] array = bs.s;\n+\n+        int length = array.length - SIZE + 1;\n+        for (int i : new int[]{-1, Integer.MIN_VALUE, length, length + 1, Integer.MAX_VALUE}) {\n+            final int ci = i;\n+\n+            checkAIOOBE(() -> {\n+                $type$ x = ($type$) vh.get(array, ci);\n+            });\n@@ -1100,0 +973,3 @@\n+            checkAIOOBE(() -> {\n+                vh.set(array, ci, VALUE_1);\n+            });\n@@ -1123,13 +999,1 @@\n-            checkIOOBE(() -> {\n-                $type$ x = ($type$) vh.getVolatile(array, ci);\n-            });\n-\n-            checkIOOBE(() -> {\n-                $type$ x = ($type$) vh.getAcquire(array, ci);\n-            });\n-\n-            checkIOOBE(() -> {\n-                $type$ x = ($type$) vh.getOpaque(array, ci);\n-            });\n-\n-            if (!readOnly) {\n+            if (array.isDirect()) {\n@@ -1137,1 +1001,1 @@\n-                    vh.setVolatile(array, ci, VALUE_1);\n+                    $type$ x = ($type$) vh.getVolatile(array, ci);\n@@ -1141,1 +1005,1 @@\n-                    vh.setRelease(array, ci, VALUE_1);\n+                    $type$ x = ($type$) vh.getAcquire(array, ci);\n@@ -1145,1 +1009,1 @@\n-                    vh.setOpaque(array, ci, VALUE_1);\n+                    $type$ x = ($type$) vh.getOpaque(array, ci);\n@@ -1148,0 +1012,13 @@\n+                if (!readOnly) {\n+                    checkIOOBE(() -> {\n+                        vh.setVolatile(array, ci, VALUE_1);\n+                    });\n+\n+                    checkIOOBE(() -> {\n+                        vh.setRelease(array, ci, VALUE_1);\n+                    });\n+\n+                    checkIOOBE(() -> {\n+                        vh.setOpaque(array, ci, VALUE_1);\n+                    });\n+\n@@ -1149,3 +1026,3 @@\n-                checkIOOBE(() -> {\n-                    boolean r = vh.compareAndSet(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.compareAndSet(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -1153,3 +1030,3 @@\n-                checkIOOBE(() -> {\n-                    $type$ r = ($type$) vh.compareAndExchange(array, ci, VALUE_2, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        $type$ r = ($type$) vh.compareAndExchange(array, ci, VALUE_2, VALUE_1);\n+                    });\n@@ -1157,3 +1034,3 @@\n-                checkIOOBE(() -> {\n-                    $type$ r = ($type$) vh.compareAndExchangeAcquire(array, ci, VALUE_2, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        $type$ r = ($type$) vh.compareAndExchangeAcquire(array, ci, VALUE_2, VALUE_1);\n+                    });\n@@ -1161,3 +1038,3 @@\n-                checkIOOBE(() -> {\n-                    $type$ r = ($type$) vh.compareAndExchangeRelease(array, ci, VALUE_2, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        $type$ r = ($type$) vh.compareAndExchangeRelease(array, ci, VALUE_2, VALUE_1);\n+                    });\n@@ -1165,3 +1042,3 @@\n-                checkIOOBE(() -> {\n-                    boolean r = vh.weakCompareAndSetPlain(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.weakCompareAndSetPlain(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -1169,3 +1046,3 @@\n-                checkIOOBE(() -> {\n-                    boolean r = vh.weakCompareAndSet(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.weakCompareAndSet(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -1173,3 +1050,3 @@\n-                checkIOOBE(() -> {\n-                    boolean r = vh.weakCompareAndSetAcquire(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.weakCompareAndSetAcquire(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -1177,3 +1054,3 @@\n-                checkIOOBE(() -> {\n-                    boolean r = vh.weakCompareAndSetRelease(array, ci, VALUE_1, VALUE_2);\n-                });\n+                    checkIOOBE(() -> {\n+                        boolean r = vh.weakCompareAndSetRelease(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -1181,3 +1058,3 @@\n-                checkIOOBE(() -> {\n-                    $type$ o = ($type$) vh.getAndSet(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        $type$ o = ($type$) vh.getAndSet(array, ci, VALUE_1);\n+                    });\n@@ -1185,3 +1062,3 @@\n-                checkIOOBE(() -> {\n-                    $type$ o = ($type$) vh.getAndSetAcquire(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        $type$ o = ($type$) vh.getAndSetAcquire(array, ci, VALUE_1);\n+                    });\n@@ -1189,3 +1066,3 @@\n-                checkIOOBE(() -> {\n-                    $type$ o = ($type$) vh.getAndSetRelease(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        $type$ o = ($type$) vh.getAndSetRelease(array, ci, VALUE_1);\n+                    });\n@@ -1195,3 +1072,3 @@\n-                checkIOOBE(() -> {\n-                    $type$ o = ($type$) vh.getAndAdd(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        $type$ o = ($type$) vh.getAndAdd(array, ci, VALUE_1);\n+                    });\n@@ -1199,3 +1076,3 @@\n-                checkIOOBE(() -> {\n-                    $type$ o = ($type$) vh.getAndAddAcquire(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        $type$ o = ($type$) vh.getAndAddAcquire(array, ci, VALUE_1);\n+                    });\n@@ -1203,3 +1080,3 @@\n-                checkIOOBE(() -> {\n-                    $type$ o = ($type$) vh.getAndAddRelease(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        $type$ o = ($type$) vh.getAndAddRelease(array, ci, VALUE_1);\n+                    });\n@@ -1209,27 +1086,3 @@\n-                checkIOOBE(() -> {\n-                    $type$ o = ($type$) vh.getAndBitwiseOr(array, ci, VALUE_1);\n-                });\n-\n-                checkIOOBE(() -> {\n-                    $type$ o = ($type$) vh.getAndBitwiseOrAcquire(array, ci, VALUE_1);\n-                });\n-\n-                checkIOOBE(() -> {\n-                    $type$ o = ($type$) vh.getAndBitwiseOrRelease(array, ci, VALUE_1);\n-                });\n-\n-                checkIOOBE(() -> {\n-                    $type$ o = ($type$) vh.getAndBitwiseAnd(array, ci, VALUE_1);\n-                });\n-\n-                checkIOOBE(() -> {\n-                    $type$ o = ($type$) vh.getAndBitwiseAndAcquire(array, ci, VALUE_1);\n-                });\n-\n-                checkIOOBE(() -> {\n-                    $type$ o = ($type$) vh.getAndBitwiseAndRelease(array, ci, VALUE_1);\n-                });\n-\n-                checkIOOBE(() -> {\n-                    $type$ o = ($type$) vh.getAndBitwiseXor(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        $type$ o = ($type$) vh.getAndBitwiseOr(array, ci, VALUE_1);\n+                    });\n@@ -1237,3 +1090,3 @@\n-                checkIOOBE(() -> {\n-                    $type$ o = ($type$) vh.getAndBitwiseXorAcquire(array, ci, VALUE_1);\n-                });\n+                    checkIOOBE(() -> {\n+                        $type$ o = ($type$) vh.getAndBitwiseOrAcquire(array, ci, VALUE_1);\n+                    });\n@@ -1241,7 +1094,3 @@\n-                checkIOOBE(() -> {\n-                    $type$ o = ($type$) vh.getAndBitwiseXorRelease(array, ci, VALUE_1);\n-                });\n-#end[Bitwise]\n-            }\n-        }\n-    }\n+                    checkIOOBE(() -> {\n+                        $type$ o = ($type$) vh.getAndBitwiseOrRelease(array, ci, VALUE_1);\n+                    });\n@@ -1249,3 +1098,3 @@\n-    static void testArrayMisalignedAccess(ByteArraySource bs, VarHandleSource vhs) throws Throwable {\n-        VarHandle vh = vhs.s;\n-        byte[] array = bs.s;\n+                    checkIOOBE(() -> {\n+                        $type$ o = ($type$) vh.getAndBitwiseAnd(array, ci, VALUE_1);\n+                    });\n@@ -1253,1 +1102,3 @@\n-        int misalignmentAtZero = ByteBuffer.wrap(array).alignmentOffset(0, SIZE);\n+                    checkIOOBE(() -> {\n+                        $type$ o = ($type$) vh.getAndBitwiseAndAcquire(array, ci, VALUE_1);\n+                    });\n@@ -1255,251 +1106,1 @@\n-        int length = array.length - SIZE + 1;\n-        for (int i = 0; i < length; i++) {\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n-            final int ci = i;\n-\n-            if (!iAligned) {\n-                checkISE(() -> {\n-                    $type$ x = ($type$) vh.getVolatile(array, ci);\n-                });\n-\n-                checkISE(() -> {\n-                    $type$ x = ($type$) vh.getAcquire(array, ci);\n-                });\n-\n-                checkISE(() -> {\n-                    $type$ x = ($type$) vh.getOpaque(array, ci);\n-                });\n-\n-                checkISE(() -> {\n-                    vh.setVolatile(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    vh.setRelease(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    vh.setOpaque(array, ci, VALUE_1);\n-                });\n-#if[CAS]\n-\n-                checkISE(() -> {\n-                    boolean r = vh.compareAndSet(array, ci, VALUE_1, VALUE_2);\n-                });\n-\n-                checkISE(() -> {\n-                    $type$ r = ($type$) vh.compareAndExchange(array, ci, VALUE_2, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    $type$ r = ($type$) vh.compareAndExchangeAcquire(array, ci, VALUE_2, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    $type$ r = ($type$) vh.compareAndExchangeRelease(array, ci, VALUE_2, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    boolean r = vh.weakCompareAndSetPlain(array, ci, VALUE_1, VALUE_2);\n-                });\n-\n-                checkISE(() -> {\n-                    boolean r = vh.weakCompareAndSet(array, ci, VALUE_1, VALUE_2);\n-                });\n-\n-                checkISE(() -> {\n-                    boolean r = vh.weakCompareAndSetAcquire(array, ci, VALUE_1, VALUE_2);\n-                });\n-\n-                checkISE(() -> {\n-                    boolean r = vh.weakCompareAndSetRelease(array, ci, VALUE_1, VALUE_2);\n-                });\n-\n-                checkISE(() -> {\n-                    $type$ o = ($type$) vh.getAndSet(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    $type$ o = ($type$) vh.getAndSetAcquire(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    $type$ o = ($type$) vh.getAndSetRelease(array, ci, VALUE_1);\n-                });\n-#end[CAS]\n-\n-#if[AtomicAdd]\n-                checkISE(() -> {\n-                    $type$ o = ($type$) vh.getAndAdd(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    $type$ o = ($type$) vh.getAndAddAcquire(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    $type$ o = ($type$) vh.getAndAddRelease(array, ci, VALUE_1);\n-                });\n-#end[AtomicAdd]\n-\n-#if[Bitwise]\n-                checkISE(() -> {\n-                    $type$ o = ($type$) vh.getAndBitwiseOr(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    $type$ o = ($type$) vh.getAndBitwiseOrAcquire(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    $type$ o = ($type$) vh.getAndBitwiseOrRelease(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    $type$ o = ($type$) vh.getAndBitwiseAnd(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    $type$ o = ($type$) vh.getAndBitwiseAndAcquire(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    $type$ o = ($type$) vh.getAndBitwiseAndRelease(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    $type$ o = ($type$) vh.getAndBitwiseXor(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    $type$ o = ($type$) vh.getAndBitwiseXorAcquire(array, ci, VALUE_1);\n-                });\n-\n-                checkISE(() -> {\n-                    $type$ o = ($type$) vh.getAndBitwiseXorRelease(array, ci, VALUE_1);\n-                });\n-#end[Bitwise]\n-            }\n-        }\n-    }\n-\n-    static void testArrayMisalignedAccess(ByteBufferSource bs, VarHandleSource vhs) throws Throwable {\n-        VarHandle vh = vhs.s;\n-        ByteBuffer array = bs.s;\n-\n-        boolean readOnly = MemoryMode.READ_ONLY.isSet(bs.memoryModes);\n-        int misalignmentAtZero = array.alignmentOffset(0, SIZE);\n-\n-        int length = array.limit() - SIZE + 1;\n-        for (int i = 0; i < length; i++) {\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n-            final int ci = i;\n-\n-            if (!iAligned) {\n-                checkISE(() -> {\n-                    $type$ x = ($type$) vh.getVolatile(array, ci);\n-                });\n-\n-                checkISE(() -> {\n-                    $type$ x = ($type$) vh.getAcquire(array, ci);\n-                });\n-\n-                checkISE(() -> {\n-                    $type$ x = ($type$) vh.getOpaque(array, ci);\n-                });\n-\n-                if (!readOnly) {\n-                    checkISE(() -> {\n-                        vh.setVolatile(array, ci, VALUE_1);\n-                    });\n-\n-                    checkISE(() -> {\n-                        vh.setRelease(array, ci, VALUE_1);\n-                    });\n-\n-                    checkISE(() -> {\n-                        vh.setOpaque(array, ci, VALUE_1);\n-                    });\n-\n-#if[CAS]\n-                    checkISE(() -> {\n-                        boolean r = vh.compareAndSet(array, ci, VALUE_1, VALUE_2);\n-                    });\n-\n-                    checkISE(() -> {\n-                        $type$ r = ($type$) vh.compareAndExchange(array, ci, VALUE_2, VALUE_1);\n-                    });\n-\n-                    checkISE(() -> {\n-                        $type$ r = ($type$) vh.compareAndExchangeAcquire(array, ci, VALUE_2, VALUE_1);\n-                    });\n-\n-                    checkISE(() -> {\n-                        $type$ r = ($type$) vh.compareAndExchangeRelease(array, ci, VALUE_2, VALUE_1);\n-                    });\n-\n-                    checkISE(() -> {\n-                        boolean r = vh.weakCompareAndSetPlain(array, ci, VALUE_1, VALUE_2);\n-                    });\n-\n-                    checkISE(() -> {\n-                        boolean r = vh.weakCompareAndSet(array, ci, VALUE_1, VALUE_2);\n-                    });\n-\n-                    checkISE(() -> {\n-                        boolean r = vh.weakCompareAndSetAcquire(array, ci, VALUE_1, VALUE_2);\n-                    });\n-\n-                    checkISE(() -> {\n-                        boolean r = vh.weakCompareAndSetRelease(array, ci, VALUE_1, VALUE_2);\n-                    });\n-\n-                    checkISE(() -> {\n-                        $type$ o = ($type$) vh.getAndSet(array, ci, VALUE_1);\n-                    });\n-\n-                    checkISE(() -> {\n-                        $type$ o = ($type$) vh.getAndSetAcquire(array, ci, VALUE_1);\n-                    });\n-\n-                    checkISE(() -> {\n-                        $type$ o = ($type$) vh.getAndSetRelease(array, ci, VALUE_1);\n-                    });\n-#end[CAS]\n-\n-#if[AtomicAdd]\n-                    checkISE(() -> {\n-                        $type$ o = ($type$) vh.getAndAdd(array, ci, VALUE_1);\n-                    });\n-\n-                    checkISE(() -> {\n-                        $type$ o = ($type$) vh.getAndAddAcquire(array, ci, VALUE_1);\n-                    });\n-\n-                    checkISE(() -> {\n-                        $type$ o = ($type$) vh.getAndAddRelease(array, ci, VALUE_1);\n-                    });\n-#end[AtomicAdd]\n-\n-#if[Bitwise]\n-                    checkISE(() -> {\n-                        $type$ o = ($type$) vh.getAndBitwiseOr(array, ci, VALUE_1);\n-                    });\n-\n-                    checkISE(() -> {\n-                        $type$ o = ($type$) vh.getAndBitwiseOrAcquire(array, ci, VALUE_1);\n-                    });\n-\n-                    checkISE(() -> {\n-                        $type$ o = ($type$) vh.getAndBitwiseOrRelease(array, ci, VALUE_1);\n-                    });\n-\n-                    checkISE(() -> {\n-                        $type$ o = ($type$) vh.getAndBitwiseAnd(array, ci, VALUE_1);\n-                    });\n-\n-                    checkISE(() -> {\n-                        $type$ o = ($type$) vh.getAndBitwiseAndAcquire(array, ci, VALUE_1);\n-                    });\n-\n-                    checkISE(() -> {\n+                    checkIOOBE(() -> {\n@@ -1509,189 +1110,3 @@\n-                    checkISE(() -> {\n-                        $type$ o = ($type$) vh.getAndBitwiseXor(array, ci, VALUE_1);\n-                    });\n-\n-                    checkISE(() -> {\n-                        $type$ o = ($type$) vh.getAndBitwiseXorAcquire(array, ci, VALUE_1);\n-                    });\n-\n-                    checkISE(() -> {\n-                        $type$ o = ($type$) vh.getAndBitwiseXorRelease(array, ci, VALUE_1);\n-                    });\n-#end[Bitwise]\n-                }\n-            }\n-        }\n-    }\n-\n-    static void testArrayReadWrite(ByteArraySource bs, VarHandleSource vhs) {\n-        VarHandle vh = vhs.s;\n-        byte[] array = bs.s;\n-\n-        int misalignmentAtZero = ByteBuffer.wrap(array).alignmentOffset(0, SIZE);\n-\n-        bs.fill((byte) 0xff);\n-        int length = array.length - SIZE + 1;\n-        for (int i = 0; i < length; i++) {\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n-\n-            \/\/ Plain\n-            {\n-                vh.set(array, i, VALUE_1);\n-                $type$ x = ($type$) vh.get(array, i);\n-                assertEquals(x, VALUE_1, \"get $type$ value\");\n-            }\n-\n-\n-            if (iAligned) {\n-                \/\/ Volatile\n-                {\n-                    vh.setVolatile(array, i, VALUE_2);\n-                    $type$ x = ($type$) vh.getVolatile(array, i);\n-                    assertEquals(x, VALUE_2, \"setVolatile $type$ value\");\n-                }\n-\n-                \/\/ Lazy\n-                {\n-                    vh.setRelease(array, i, VALUE_1);\n-                    $type$ x = ($type$) vh.getAcquire(array, i);\n-                    assertEquals(x, VALUE_1, \"setRelease $type$ value\");\n-                }\n-\n-                \/\/ Opaque\n-                {\n-                    vh.setOpaque(array, i, VALUE_2);\n-                    $type$ x = ($type$) vh.getOpaque(array, i);\n-                    assertEquals(x, VALUE_2, \"setOpaque $type$ value\");\n-                }\n-#if[CAS]\n-\n-                vh.set(array, i, VALUE_1);\n-\n-                \/\/ Compare\n-                {\n-                    boolean r = vh.compareAndSet(array, i, VALUE_1, VALUE_2);\n-                    assertEquals(r, true, \"success compareAndSet $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"success compareAndSet $type$ value\");\n-                }\n-\n-                {\n-                    boolean r = vh.compareAndSet(array, i, VALUE_1, VALUE_3);\n-                    assertEquals(r, false, \"failing compareAndSet $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"failing compareAndSet $type$ value\");\n-                }\n-\n-                {\n-                    $type$ r = ($type$) vh.compareAndExchange(array, i, VALUE_2, VALUE_1);\n-                    assertEquals(r, VALUE_2, \"success compareAndExchange $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"success compareAndExchange $type$ value\");\n-                }\n-\n-                {\n-                    $type$ r = ($type$) vh.compareAndExchange(array, i, VALUE_2, VALUE_3);\n-                    assertEquals(r, VALUE_1, \"failing compareAndExchange $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"failing compareAndExchange $type$ value\");\n-                }\n-\n-                {\n-                    $type$ r = ($type$) vh.compareAndExchangeAcquire(array, i, VALUE_1, VALUE_2);\n-                    assertEquals(r, VALUE_1, \"success compareAndExchangeAcquire $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"success compareAndExchangeAcquire $type$ value\");\n-                }\n-\n-                {\n-                    $type$ r = ($type$) vh.compareAndExchangeAcquire(array, i, VALUE_1, VALUE_3);\n-                    assertEquals(r, VALUE_2, \"failing compareAndExchangeAcquire $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"failing compareAndExchangeAcquire $type$ value\");\n-                }\n-\n-                {\n-                    $type$ r = ($type$) vh.compareAndExchangeRelease(array, i, VALUE_2, VALUE_1);\n-                    assertEquals(r, VALUE_2, \"success compareAndExchangeRelease $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"success compareAndExchangeRelease $type$ value\");\n-                }\n-\n-                {\n-                    $type$ r = ($type$) vh.compareAndExchangeRelease(array, i, VALUE_2, VALUE_3);\n-                    assertEquals(r, VALUE_1, \"failing compareAndExchangeRelease $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"failing compareAndExchangeRelease $type$ value\");\n-                }\n-\n-                {\n-                    boolean success = false;\n-                    for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n-                        success = vh.weakCompareAndSetPlain(array, i, VALUE_1, VALUE_2);\n-                        if (!success) weakDelay();\n-                    }\n-                    assertEquals(success, true, \"success weakCompareAndSetPlain $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"success weakCompareAndSetPlain $type$ value\");\n-                }\n-\n-                {\n-                    boolean success = vh.weakCompareAndSetPlain(array, i, VALUE_1, VALUE_3);\n-                    assertEquals(success, false, \"failing weakCompareAndSetPlain $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"failing weakCompareAndSetPlain $type$ value\");\n-                }\n-\n-                {\n-                    boolean success = false;\n-                    for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n-                        success = vh.weakCompareAndSetAcquire(array, i, VALUE_2, VALUE_1);\n-                        if (!success) weakDelay();\n-                    }\n-                    assertEquals(success, true, \"success weakCompareAndSetAcquire $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"success weakCompareAndSetAcquire $type$\");\n-                }\n-\n-                {\n-                    boolean success = vh.weakCompareAndSetAcquire(array, i, VALUE_2, VALUE_3);\n-                    assertEquals(success, false, \"failing weakCompareAndSetAcquire $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"failing weakCompareAndSetAcquire $type$ value\");\n-                }\n-\n-                {\n-                    boolean success = false;\n-                    for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n-                        success = vh.weakCompareAndSetRelease(array, i, VALUE_1, VALUE_2);\n-                        if (!success) weakDelay();\n-                    }\n-                    assertEquals(success, true, \"success weakCompareAndSetRelease $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"success weakCompareAndSetRelease $type$\");\n-                }\n-\n-                {\n-                    boolean success = vh.weakCompareAndSetRelease(array, i, VALUE_1, VALUE_3);\n-                    assertEquals(success, false, \"failing weakCompareAndSetRelease $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"failing weakCompareAndSetRelease $type$ value\");\n-                }\n-\n-                {\n-                    boolean success = false;\n-                    for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n-                        success = vh.weakCompareAndSet(array, i, VALUE_2, VALUE_1);\n-                        if (!success) weakDelay();\n-                    }\n-                    assertEquals(success, true, \"success weakCompareAndSet $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"success weakCompareAndSet $type$\");\n-                }\n-\n-                {\n-                    boolean success = vh.weakCompareAndSet(array, i, VALUE_2, VALUE_3);\n-                    assertEquals(success, false, \"failing weakCompareAndSet $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_1, \"failing weakCompareAndSet $type$ value\");\n-                }\n+                    checkIOOBE(() -> {\n+                        $type$ o = ($type$) vh.getAndBitwiseXor(array, ci, VALUE_1);\n+                    });\n@@ -1699,3 +1114,3 @@\n-                \/\/ Compare set and get\n-                {\n-                    vh.set(array, i, VALUE_1);\n+                    checkIOOBE(() -> {\n+                        $type$ o = ($type$) vh.getAndBitwiseXorAcquire(array, ci, VALUE_1);\n+                    });\n@@ -1703,4 +1118,4 @@\n-                    $type$ o = ($type$) vh.getAndSet(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndSet $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"getAndSet $type$ value\");\n+                    checkIOOBE(() -> {\n+                        $type$ o = ($type$) vh.getAndBitwiseXorRelease(array, ci, VALUE_1);\n+                    });\n+#end[Bitwise]\n@@ -1708,0 +1123,3 @@\n+            }\n+        }\n+    }\n@@ -1709,2 +1127,3 @@\n-                {\n-                    vh.set(array, i, VALUE_1);\n+    static void testArrayMisalignedAccess(ByteBufferSource bs, VarHandleSource vhs) throws Throwable {\n+        VarHandle vh = vhs.s;\n+        ByteBuffer array = bs.s;\n@@ -1712,5 +1131,2 @@\n-                    $type$ o = ($type$) vh.getAndSetAcquire(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndSetAcquire $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"getAndSetAcquire $type$ value\");\n-                }\n+        boolean readOnly = MemoryMode.READ_ONLY.isSet(bs.memoryModes);\n+        int misalignmentAtZero = array.alignmentOffset(0, SIZE);\n@@ -1718,2 +1134,4 @@\n-                {\n-                    vh.set(array, i, VALUE_1);\n+        int length = array.limit() - SIZE + 1;\n+        for (int i = 0; i < length; i++) {\n+            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n+            final int ci = i;\n@@ -1721,6 +1139,4 @@\n-                    $type$ o = ($type$) vh.getAndSetRelease(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndSetRelease $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_2, \"getAndSetRelease $type$ value\");\n-                }\n-#end[CAS]\n+            if (!iAligned) {\n+                checkISE(() -> {\n+                    $type$ x = ($type$) vh.getVolatile(array, ci);\n+                });\n@@ -1728,4 +1144,3 @@\n-#if[AtomicAdd]\n-                \/\/ get and add, add and get\n-                {\n-                    vh.set(array, i, VALUE_1);\n+                checkISE(() -> {\n+                    $type$ x = ($type$) vh.getAcquire(array, ci);\n+                });\n@@ -1733,5 +1148,3 @@\n-                    $type$ o = ($type$) vh.getAndAdd(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndAdd $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 + VALUE_2, \"getAndAdd $type$ value\");\n-                }\n+                checkISE(() -> {\n+                    $type$ x = ($type$) vh.getOpaque(array, ci);\n+                });\n@@ -1739,2 +1152,4 @@\n-                {\n-                    vh.set(array, i, VALUE_1);\n+                if (!readOnly) {\n+                    checkISE(() -> {\n+                        vh.setVolatile(array, ci, VALUE_1);\n+                    });\n@@ -1742,5 +1157,3 @@\n-                    $type$ o = ($type$) vh.getAndAddAcquire(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndAddAcquire $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 + VALUE_2, \"getAndAddAcquire $type$ value\");\n-                }\n+                    checkISE(() -> {\n+                        vh.setRelease(array, ci, VALUE_1);\n+                    });\n@@ -1748,2 +1161,7 @@\n-                {\n-                    vh.set(array, i, VALUE_1);\n+                    checkISE(() -> {\n+                        vh.setOpaque(array, ci, VALUE_1);\n+                    });\n+#if[CAS]\n+                    checkISE(() -> {\n+                        boolean r = vh.compareAndSet(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -1751,6 +1169,3 @@\n-                    $type$ o = ($type$) vh.getAndAddRelease(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndAddRelease $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 + VALUE_2, \"getAndAddRelease $type$ value\");\n-                }\n-#end[AtomicAdd]\n+                    checkISE(() -> {\n+                        $type$ r = ($type$) vh.compareAndExchange(array, ci, VALUE_2, VALUE_1);\n+                    });\n@@ -1758,4 +1173,3 @@\n-#if[Bitwise]\n-                \/\/ get and bitwise or\n-                {\n-                    vh.set(array, i, VALUE_1);\n+                    checkISE(() -> {\n+                        $type$ r = ($type$) vh.compareAndExchangeAcquire(array, ci, VALUE_2, VALUE_1);\n+                    });\n@@ -1763,5 +1177,3 @@\n-                    $type$ o = ($type$) vh.getAndBitwiseOr(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseOr $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 | VALUE_2, \"getAndBitwiseOr $type$ value\");\n-                }\n+                    checkISE(() -> {\n+                        $type$ r = ($type$) vh.compareAndExchangeRelease(array, ci, VALUE_2, VALUE_1);\n+                    });\n@@ -1769,2 +1181,3 @@\n-                {\n-                    vh.set(array, i, VALUE_1);\n+                    checkISE(() -> {\n+                        boolean r = vh.weakCompareAndSetPlain(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -1772,5 +1185,3 @@\n-                    $type$ o = ($type$) vh.getAndBitwiseOrAcquire(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseOrAcquire $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 | VALUE_2, \"getAndBitwiseOrAcquire $type$ value\");\n-                }\n+                    checkISE(() -> {\n+                        boolean r = vh.weakCompareAndSet(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -1778,2 +1189,3 @@\n-                {\n-                    vh.set(array, i, VALUE_1);\n+                    checkISE(() -> {\n+                        boolean r = vh.weakCompareAndSetAcquire(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -1781,5 +1193,3 @@\n-                    $type$ o = ($type$) vh.getAndBitwiseOrRelease(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseOrRelease $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 | VALUE_2, \"getAndBitwiseOrRelease $type$ value\");\n-                }\n+                    checkISE(() -> {\n+                        boolean r = vh.weakCompareAndSetRelease(array, ci, VALUE_1, VALUE_2);\n+                    });\n@@ -1787,3 +1197,3 @@\n-                \/\/ get and bitwise and\n-                {\n-                    vh.set(array, i, VALUE_1);\n+                    checkISE(() -> {\n+                        $type$ o = ($type$) vh.getAndSet(array, ci, VALUE_1);\n+                    });\n@@ -1791,5 +1201,3 @@\n-                    $type$ o = ($type$) vh.getAndBitwiseAnd(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseAnd $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 & VALUE_2, \"getAndBitwiseAnd $type$ value\");\n-                }\n+                    checkISE(() -> {\n+                        $type$ o = ($type$) vh.getAndSetAcquire(array, ci, VALUE_1);\n+                    });\n@@ -1797,2 +1205,8 @@\n-                {\n-                    vh.set(array, i, VALUE_1);\n+                    checkISE(() -> {\n+                        $type$ o = ($type$) vh.getAndSetRelease(array, ci, VALUE_1);\n+                    });\n+#end[CAS]\n+#if[AtomicAdd]\n+                    checkISE(() -> {\n+                        $type$ o = ($type$) vh.getAndAdd(array, ci, VALUE_1);\n+                    });\n@@ -1800,5 +1214,3 @@\n-                    $type$ o = ($type$) vh.getAndBitwiseAndAcquire(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseAndAcquire $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 & VALUE_2, \"getAndBitwiseAndAcquire $type$ value\");\n-                }\n+                    checkISE(() -> {\n+                        $type$ o = ($type$) vh.getAndAddAcquire(array, ci, VALUE_1);\n+                    });\n@@ -1806,2 +1218,8 @@\n-                {\n-                    vh.set(array, i, VALUE_1);\n+                    checkISE(() -> {\n+                        $type$ o = ($type$) vh.getAndAddRelease(array, ci, VALUE_1);\n+                    });\n+#end[AtomicAdd]\n+#if[Bitwise]\n+                    checkISE(() -> {\n+                        $type$ o = ($type$) vh.getAndBitwiseOr(array, ci, VALUE_1);\n+                    });\n@@ -1809,5 +1227,3 @@\n-                    $type$ o = ($type$) vh.getAndBitwiseAndRelease(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseAndRelease $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 & VALUE_2, \"getAndBitwiseAndRelease $type$ value\");\n-                }\n+                    checkISE(() -> {\n+                        $type$ o = ($type$) vh.getAndBitwiseOrAcquire(array, ci, VALUE_1);\n+                    });\n@@ -1815,3 +1231,3 @@\n-                \/\/ get and bitwise xor\n-                {\n-                    vh.set(array, i, VALUE_1);\n+                    checkISE(() -> {\n+                        $type$ o = ($type$) vh.getAndBitwiseOrRelease(array, ci, VALUE_1);\n+                    });\n@@ -1819,5 +1235,3 @@\n-                    $type$ o = ($type$) vh.getAndBitwiseXor(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseXor $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 ^ VALUE_2, \"getAndBitwiseXor $type$ value\");\n-                }\n+                    checkISE(() -> {\n+                        $type$ o = ($type$) vh.getAndBitwiseAnd(array, ci, VALUE_1);\n+                    });\n@@ -1825,2 +1239,3 @@\n-                {\n-                    vh.set(array, i, VALUE_1);\n+                    checkISE(() -> {\n+                        $type$ o = ($type$) vh.getAndBitwiseAndAcquire(array, ci, VALUE_1);\n+                    });\n@@ -1828,5 +1243,3 @@\n-                    $type$ o = ($type$) vh.getAndBitwiseXorAcquire(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseXorAcquire $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 ^ VALUE_2, \"getAndBitwiseXorAcquire $type$ value\");\n-                }\n+                    checkISE(() -> {\n+                        $type$ o = ($type$) vh.getAndBitwiseAndRelease(array, ci, VALUE_1);\n+                    });\n@@ -1834,2 +1247,3 @@\n-                {\n-                    vh.set(array, i, VALUE_1);\n+                    checkISE(() -> {\n+                        $type$ o = ($type$) vh.getAndBitwiseXor(array, ci, VALUE_1);\n+                    });\n@@ -1837,5 +1251,7 @@\n-                    $type$ o = ($type$) vh.getAndBitwiseXorRelease(array, i, VALUE_2);\n-                    assertEquals(o, VALUE_1, \"getAndBitwiseXorRelease $type$\");\n-                    $type$ x = ($type$) vh.get(array, i);\n-                    assertEquals(x, VALUE_1 ^ VALUE_2, \"getAndBitwiseXorRelease $type$ value\");\n-                }\n+                    checkISE(() -> {\n+                        $type$ o = ($type$) vh.getAndBitwiseXorAcquire(array, ci, VALUE_1);\n+                    });\n+\n+                    checkISE(() -> {\n+                        $type$ o = ($type$) vh.getAndBitwiseXorRelease(array, ci, VALUE_1);\n+                    });\n@@ -1843,0 +1259,17 @@\n+                }\n+            }\n+        }\n+    }\n+\n+    static void testArrayReadWrite(ByteArraySource bs, VarHandleSource vhs) {\n+        VarHandle vh = vhs.s;\n+        byte[] array = bs.s;\n+\n+        bs.fill((byte) 0xff);\n+        int length = array.length - SIZE + 1;\n+        for (int i = 0; i < length; i++) {\n+            \/\/ Plain\n+            {\n+                vh.set(array, i, VALUE_1);\n+                $type$ x = ($type$) vh.get(array, i);\n+                assertEquals(x, VALUE_1, \"get $type$ value\");\n@@ -1852,2 +1285,0 @@\n-        int misalignmentAtZero = array.alignmentOffset(0, SIZE);\n-\n@@ -1857,1 +1288,1 @@\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n+            boolean iAligned = array.isDirect() ? ((i + array.alignmentOffset(0, SIZE)) & (SIZE - 1)) == 0 : false;\n@@ -2172,2 +1603,0 @@\n-        int misalignmentAtZero = array.alignmentOffset(0, SIZE);\n-\n@@ -2180,1 +1609,1 @@\n-            boolean iAligned = ((i + misalignmentAtZero) & (SIZE - 1)) == 0;\n+            boolean iAligned = array.isDirect() ? ((i + array.alignmentOffset(0, SIZE)) & (SIZE - 1)) == 0 : false;\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/X-VarHandleTestByteArrayView.java.template","additions":425,"deletions":996,"binary":false,"changes":1421,"status":"modified"},{"patch":"@@ -387,1 +387,1 @@\n-                if (direct || us <= 8) {\n+                if (direct || us == 1) {\n@@ -397,5 +397,0 @@\n-        \/\/ Probe for long misalignment at index zero for a newly created buffer\n-        ByteBuffer empty =\n-                direct ? ByteBuffer.allocateDirect(0) : ByteBuffer.allocate(0);\n-        int longMisalignmentAtZero = empty.alignmentOffset(0, 8);\n-\n@@ -403,0 +398,4 @@\n+            \/\/ Probe for long misalignment at index zero for a newly created buffer\n+            ByteBuffer empty = ByteBuffer.allocateDirect(0);\n+            int longMisalignmentAtZero = empty.alignmentOffset(0, 8);\n+\n@@ -410,12 +409,0 @@\n-        } else {\n-            \/\/ For heap byte buffers misalignment may occur on 32-bit systems\n-            \/\/ where Unsafe.ARRAY_BYTE_BASE_OFFSET % 8 == 4 and not 0\n-            \/\/ Note the GC will preserve alignment of the base address of the\n-            \/\/ array\n-            if (jdk.internal.misc.Unsafe.ARRAY_BYTE_BASE_OFFSET % 8\n-                    != longMisalignmentAtZero) {\n-                fail(\"Heap byte buffer misaligned at index 0\"\n-                        + \" for ref and primitive values \"\n-                        + longMisalignmentAtZero);\n-            }\n-        }\n@@ -423,3 +410,3 @@\n-        \/\/ Ensure test buffer is correctly aligned at index 0\n-        if (b.alignmentOffset(0, 8) != longMisalignmentAtZero)\n-            fail(\"Test input buffer not correctly aligned at index 0\", b);\n+            \/\/ Ensure test buffer is correctly aligned at index 0\n+            if (b.alignmentOffset(0, 8) != longMisalignmentAtZero)\n+                fail(\"Test input buffer not correctly aligned at index 0\", b);\n@@ -427,5 +414,5 @@\n-        \/\/ Test misalignment values\n-        for (int us : new int[]{1, 2, 4, 8}) {\n-            for (int i = 0; i < us * 2; i++) {\n-                int am = b.alignmentOffset(i, us);\n-                int expectedAm = (longMisalignmentAtZero + i) % us;\n+            \/\/ Test misalignment values\n+            for (int us : new int[]{1, 2, 4, 8}) {\n+                for (int i = 0; i < us * 2; i++) {\n+                    int am = b.alignmentOffset(i, us);\n+                    int expectedAm = (longMisalignmentAtZero + i) % us;\n@@ -433,3 +420,4 @@\n-                if (am != expectedAm) {\n-                    String f = \"b.alignmentOffset(%d, %d) == %d incorrect, expected %d\";\n-                    fail(String.format(f, i, us, am, expectedAm));\n+                    if (am != expectedAm) {\n+                        String f = \"b.alignmentOffset(%d, %d) == %d incorrect, expected %d\";\n+                        fail(String.format(f, i, us, am, expectedAm));\n+                    }\n@@ -438,1 +426,0 @@\n-        }\n@@ -440,42 +427,43 @@\n-        \/\/ Created aligned slice to test against\n-        int ap = 8 - longMisalignmentAtZero;\n-        int al = b.limit() - b.alignmentOffset(b.limit(), 8);\n-        ByteBuffer ab = b.position(ap).limit(al).\n-                slice();\n-        if (ab.limit() == 0) {\n-            fail(\"Test input buffer not sufficiently sized to cover\" +\n-                    \" an aligned region for all values\", b);\n-        }\n-        if (ab.alignmentOffset(0, 8) != 0)\n-            fail(\"Aligned test input buffer not correctly aligned at index 0\", ab);\n-\n-        for (int us : new int[]{1, 2, 4, 8}) {\n-            for (int p = 1; p < 16; p++) {\n-                int l = ab.limit() - p;\n-\n-                ByteBuffer as = ab.slice().position(p).limit(l).\n-                        alignedSlice(us);\n-\n-                ck(as, 0, as.position());\n-                ck(as, as.capacity(), as.limit());\n-                if (b.isDirect() != as.isDirect())\n-                    fail(\"Lost direction\", as);\n-                if (b.isReadOnly() != as.isReadOnly())\n-                    fail(\"Lost read-only\", as);\n-\n-                if (as.alignmentOffset(0, us) != 0)\n-                    fail(\"Buffer not correctly aligned at index 0\", as);\n-\n-                if (as.alignmentOffset(as.limit(), us) != 0)\n-                    fail(\"Buffer not correctly aligned at limit\", as);\n-\n-                int p_mod = ab.alignmentOffset(p, us);\n-                int l_mod = ab.alignmentOffset(l, us);\n-                \/\/ Round up position\n-                p = (p_mod > 0) ? p + (us - p_mod) : p;\n-                \/\/ Round down limit\n-                l = l - l_mod;\n-\n-                int ec = l - p;\n-                if (as.limit() != ec) {\n-                    fail(\"Buffer capacity incorrect, expected: \" + ec, as);\n+            \/\/ Created aligned slice to test against\n+            int ap = 8 - longMisalignmentAtZero;\n+            int al = b.limit() - b.alignmentOffset(b.limit(), 8);\n+            ByteBuffer ab = b.position(ap).limit(al).\n+                    slice();\n+            if (ab.limit() == 0) {\n+                fail(\"Test input buffer not sufficiently sized to cover\" +\n+                        \" an aligned region for all values\", b);\n+            }\n+            if (ab.alignmentOffset(0, 8) != 0)\n+                fail(\"Aligned test input buffer not correctly aligned at index 0\", ab);\n+\n+            for (int us : new int[]{1, 2, 4, 8}) {\n+                for (int p = 1; p < 16; p++) {\n+                    int l = ab.limit() - p;\n+\n+                    ByteBuffer as = ab.slice().position(p).limit(l).\n+                            alignedSlice(us);\n+\n+                    ck(as, 0, as.position());\n+                    ck(as, as.capacity(), as.limit());\n+                    if (b.isDirect() != as.isDirect())\n+                        fail(\"Lost direction\", as);\n+                    if (b.isReadOnly() != as.isReadOnly())\n+                        fail(\"Lost read-only\", as);\n+\n+                    if (as.alignmentOffset(0, us) != 0)\n+                        fail(\"Buffer not correctly aligned at index 0\", as);\n+\n+                    if (as.alignmentOffset(as.limit(), us) != 0)\n+                        fail(\"Buffer not correctly aligned at limit\", as);\n+\n+                    int p_mod = ab.alignmentOffset(p, us);\n+                    int l_mod = ab.alignmentOffset(l, us);\n+                    \/\/ Round up position\n+                    p = (p_mod > 0) ? p + (us - p_mod) : p;\n+                    \/\/ Round down limit\n+                    l = l - l_mod;\n+\n+                    int ec = l - p;\n+                    if (as.limit() != ec) {\n+                        fail(\"Buffer capacity incorrect, expected: \" + ec, as);\n+                    }\n","filename":"test\/jdk\/java\/nio\/Buffer\/Basic-X.java.template","additions":60,"deletions":72,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -387,1 +387,1 @@\n-                if (direct || us <= 8) {\n+                if (direct || us == 1) {\n@@ -397,5 +397,0 @@\n-        \/\/ Probe for long misalignment at index zero for a newly created buffer\n-        ByteBuffer empty =\n-                direct ? ByteBuffer.allocateDirect(0) : ByteBuffer.allocate(0);\n-        int longMisalignmentAtZero = empty.alignmentOffset(0, 8);\n-\n@@ -403,0 +398,4 @@\n+            \/\/ Probe for long misalignment at index zero for a newly created buffer\n+            ByteBuffer empty = ByteBuffer.allocateDirect(0);\n+            int longMisalignmentAtZero = empty.alignmentOffset(0, 8);\n+\n@@ -410,12 +409,0 @@\n-        } else {\n-            \/\/ For heap byte buffers misalignment may occur on 32-bit systems\n-            \/\/ where Unsafe.ARRAY_BYTE_BASE_OFFSET % 8 == 4 and not 0\n-            \/\/ Note the GC will preserve alignment of the base address of the\n-            \/\/ array\n-            if (jdk.internal.misc.Unsafe.ARRAY_BYTE_BASE_OFFSET % 8\n-                    != longMisalignmentAtZero) {\n-                fail(\"Heap byte buffer misaligned at index 0\"\n-                        + \" for ref and primitive values \"\n-                        + longMisalignmentAtZero);\n-            }\n-        }\n@@ -423,3 +410,3 @@\n-        \/\/ Ensure test buffer is correctly aligned at index 0\n-        if (b.alignmentOffset(0, 8) != longMisalignmentAtZero)\n-            fail(\"Test input buffer not correctly aligned at index 0\", b);\n+            \/\/ Ensure test buffer is correctly aligned at index 0\n+            if (b.alignmentOffset(0, 8) != longMisalignmentAtZero)\n+                fail(\"Test input buffer not correctly aligned at index 0\", b);\n@@ -427,5 +414,5 @@\n-        \/\/ Test misalignment values\n-        for (int us : new int[]{1, 2, 4, 8}) {\n-            for (int i = 0; i < us * 2; i++) {\n-                int am = b.alignmentOffset(i, us);\n-                int expectedAm = (longMisalignmentAtZero + i) % us;\n+            \/\/ Test misalignment values\n+            for (int us : new int[]{1, 2, 4, 8}) {\n+                for (int i = 0; i < us * 2; i++) {\n+                    int am = b.alignmentOffset(i, us);\n+                    int expectedAm = (longMisalignmentAtZero + i) % us;\n@@ -433,3 +420,4 @@\n-                if (am != expectedAm) {\n-                    String f = \"b.alignmentOffset(%d, %d) == %d incorrect, expected %d\";\n-                    fail(String.format(f, i, us, am, expectedAm));\n+                    if (am != expectedAm) {\n+                        String f = \"b.alignmentOffset(%d, %d) == %d incorrect, expected %d\";\n+                        fail(String.format(f, i, us, am, expectedAm));\n+                    }\n@@ -438,1 +426,0 @@\n-        }\n@@ -440,42 +427,43 @@\n-        \/\/ Created aligned slice to test against\n-        int ap = 8 - longMisalignmentAtZero;\n-        int al = b.limit() - b.alignmentOffset(b.limit(), 8);\n-        ByteBuffer ab = b.position(ap).limit(al).\n-                slice();\n-        if (ab.limit() == 0) {\n-            fail(\"Test input buffer not sufficiently sized to cover\" +\n-                    \" an aligned region for all values\", b);\n-        }\n-        if (ab.alignmentOffset(0, 8) != 0)\n-            fail(\"Aligned test input buffer not correctly aligned at index 0\", ab);\n-\n-        for (int us : new int[]{1, 2, 4, 8}) {\n-            for (int p = 1; p < 16; p++) {\n-                int l = ab.limit() - p;\n-\n-                ByteBuffer as = ab.slice().position(p).limit(l).\n-                        alignedSlice(us);\n-\n-                ck(as, 0, as.position());\n-                ck(as, as.capacity(), as.limit());\n-                if (b.isDirect() != as.isDirect())\n-                    fail(\"Lost direction\", as);\n-                if (b.isReadOnly() != as.isReadOnly())\n-                    fail(\"Lost read-only\", as);\n-\n-                if (as.alignmentOffset(0, us) != 0)\n-                    fail(\"Buffer not correctly aligned at index 0\", as);\n-\n-                if (as.alignmentOffset(as.limit(), us) != 0)\n-                    fail(\"Buffer not correctly aligned at limit\", as);\n-\n-                int p_mod = ab.alignmentOffset(p, us);\n-                int l_mod = ab.alignmentOffset(l, us);\n-                \/\/ Round up position\n-                p = (p_mod > 0) ? p + (us - p_mod) : p;\n-                \/\/ Round down limit\n-                l = l - l_mod;\n-\n-                int ec = l - p;\n-                if (as.limit() != ec) {\n-                    fail(\"Buffer capacity incorrect, expected: \" + ec, as);\n+            \/\/ Created aligned slice to test against\n+            int ap = 8 - longMisalignmentAtZero;\n+            int al = b.limit() - b.alignmentOffset(b.limit(), 8);\n+            ByteBuffer ab = b.position(ap).limit(al).\n+                    slice();\n+            if (ab.limit() == 0) {\n+                fail(\"Test input buffer not sufficiently sized to cover\" +\n+                        \" an aligned region for all values\", b);\n+            }\n+            if (ab.alignmentOffset(0, 8) != 0)\n+                fail(\"Aligned test input buffer not correctly aligned at index 0\", ab);\n+\n+            for (int us : new int[]{1, 2, 4, 8}) {\n+                for (int p = 1; p < 16; p++) {\n+                    int l = ab.limit() - p;\n+\n+                    ByteBuffer as = ab.slice().position(p).limit(l).\n+                            alignedSlice(us);\n+\n+                    ck(as, 0, as.position());\n+                    ck(as, as.capacity(), as.limit());\n+                    if (b.isDirect() != as.isDirect())\n+                        fail(\"Lost direction\", as);\n+                    if (b.isReadOnly() != as.isReadOnly())\n+                        fail(\"Lost read-only\", as);\n+\n+                    if (as.alignmentOffset(0, us) != 0)\n+                        fail(\"Buffer not correctly aligned at index 0\", as);\n+\n+                    if (as.alignmentOffset(as.limit(), us) != 0)\n+                        fail(\"Buffer not correctly aligned at limit\", as);\n+\n+                    int p_mod = ab.alignmentOffset(p, us);\n+                    int l_mod = ab.alignmentOffset(l, us);\n+                    \/\/ Round up position\n+                    p = (p_mod > 0) ? p + (us - p_mod) : p;\n+                    \/\/ Round down limit\n+                    l = l - l_mod;\n+\n+                    int ec = l - p;\n+                    if (as.limit() != ec) {\n+                        fail(\"Buffer capacity incorrect, expected: \" + ec, as);\n+                    }\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicByte.java","additions":60,"deletions":72,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -398,12 +398,0 @@\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicChar.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -303,12 +303,0 @@\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicDouble.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -530,12 +530,0 @@\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicFloat.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -390,12 +390,0 @@\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicInt.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -436,12 +436,0 @@\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicLong.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -502,12 +502,0 @@\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicShort.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"}]}