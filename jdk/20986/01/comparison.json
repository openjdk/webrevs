{"files":[{"patch":"@@ -108,0 +108,1 @@\n+\/\/ Generic implementation. GCs can provide an optimized one.\n@@ -109,3 +110,0 @@\n-  NearLabel Ldone;\n-  __ z_ltgr(tmp1, value);\n-  __ z_bre(Ldone);          \/\/ Use null result as-is.\n@@ -113,2 +111,4 @@\n-  __ z_nill(value, ~JNIHandles::tag_mask);\n-  __ z_lg(value, 0, value); \/\/ Resolve (untagged) jobject.\n+  assert_different_registers(value, tmp1, tmp2);\n+  NearLabel done, weak_tag, verify, tagged;\n+  __ z_ltgr(value, value);\n+  __ z_bre(done);          \/\/ Use null result as-is.\n@@ -116,0 +116,44 @@\n+  __ z_tmll(value, JNIHandles::tag_mask);\n+  __ z_btrue(tagged); \/\/ not zero\n+\n+  \/\/ Resolve Local handle\n+  __ access_load_at(T_OBJECT, IN_NATIVE | AS_RAW, Address(value, 0), value, tmp1, tmp2);\n+  __ z_bru(verify);\n+\n+  __ bind(tagged);\n+  __ testbit(value, exact_log2(JNIHandles::TypeTag::weak_global)); \/\/ test for weak tag\n+  __ z_btrue(weak_tag);\n+\n+  \/\/ resolve global handle\n+  __ access_load_at(T_OBJECT, IN_NATIVE, Address(value, -JNIHandles::TypeTag::global), value, tmp1, tmp2);\n+  __ z_bru(verify);\n+\n+  __ bind(weak_tag);\n+  \/\/ resolve jweak.\n+  __ access_load_at(T_OBJECT, IN_NATIVE | ON_PHANTOM_OOP_REF,\n+                    Address(value, -JNIHandles::TypeTag::weak_global), value, tmp1, tmp2);\n+  __ bind(verify);\n+  __ verify_oop(value, FILE_AND_LINE);\n+  __ bind(done);\n+}\n+\n+\/\/ Generic implementation. GCs can provide an optimized one.\n+void BarrierSetAssembler::resolve_global_jobject(MacroAssembler* masm, Register value, Register tmp1, Register tmp2) {\n+  assert_different_registers(value, tmp1, tmp2);\n+  NearLabel done;\n+\n+  __ z_ltgr(value, value);\n+  __ z_bre(done); \/\/ null as-is.\n+\n+#ifdef ASSERT\n+  {\n+    NearLabel valid_global_tag;\n+    __ testbit(value, exact_log2(JNIHandles::TypeTag::global)); \/\/ test for global tag\n+    __ z_btrue(valid_global_tag);\n+    __ stop(\"non global jobject using resolve_global_jobject\");\n+    __ bind(valid_global_tag);\n+  }\n+#endif \/\/ ASSERT\n+\n+  \/\/ Resolve global handle\n+  __ access_load_at(T_OBJECT, IN_NATIVE, Address(value, -JNIHandles::TypeTag::global), value, tmp1, tmp2);\n@@ -117,1 +161,1 @@\n-  __ bind(Ldone);\n+  __ bind(done);\n","filename":"src\/hotspot\/cpu\/s390\/gc\/shared\/barrierSetAssembler_s390.cpp","additions":50,"deletions":6,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+  virtual void resolve_global_jobject(MacroAssembler* masm, Register value, Register tmp1, Register tmp2);\n","filename":"src\/hotspot\/cpu\/s390\/gc\/shared\/barrierSetAssembler_s390.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3675,0 +3675,5 @@\n+}\n+\n+void MacroAssembler::resolve_global_jobject(Register value, Register tmp1, Register tmp2) {\n+  BarrierSetAssembler* bs = BarrierSet::barrier_set()->barrier_set_assembler();\n+  bs->resolve_global_jobject(this, value, tmp1, tmp2);\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -761,0 +761,1 @@\n+  void resolve_global_jobject(Register value, Register tmp1, Register tmp2);\n@@ -822,1 +823,0 @@\n- private:\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}