{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -148,1 +148,1 @@\n-\/\/ usage by types and memory used by tracking itself.\n+\/\/ usage by tags and memory used by tracking itself.\n@@ -158,1 +158,1 @@\n-  inline MallocMemory* by_type(MemTag mem_tag) {\n+  inline MallocMemory* by_tag(MemTag mem_tag) {\n@@ -163,1 +163,1 @@\n-  inline const MallocMemory* by_type(MemTag mem_tag) const {\n+  inline const MallocMemory* by_tag(MemTag mem_tag) const {\n@@ -223,1 +223,1 @@\n-     as_snapshot()->by_type(mem_tag)->record_malloc(size);\n+     as_snapshot()->by_tag(mem_tag)->record_malloc(size);\n@@ -228,1 +228,1 @@\n-     as_snapshot()->by_type(mem_tag)->record_free(size);\n+     as_snapshot()->by_tag(mem_tag)->record_free(size);\n@@ -233,1 +233,1 @@\n-     as_snapshot()->by_type(mem_tag)->record_new_arena();\n+     as_snapshot()->by_tag(mem_tag)->record_new_arena();\n@@ -237,1 +237,1 @@\n-     as_snapshot()->by_type(mem_tag)->record_arena_free();\n+     as_snapshot()->by_tag(mem_tag)->record_arena_free();\n@@ -241,1 +241,1 @@\n-     as_snapshot()->by_type(mem_tag)->record_arena_size_change(size);\n+     as_snapshot()->by_tag(mem_tag)->record_arena_size_change(size);\n","filename":"src\/hotspot\/share\/nmt\/mallocTracker.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n-        const MallocMemory* mm = as_snapshot()->by_type(mem_tag);\n+        const MallocMemory* mm = as_snapshot()->by_tag(mem_tag);\n","filename":"src\/hotspot\/share\/nmt\/mallocTracker.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-int compare_malloc_site_and_type(const MallocSite& s1, const MallocSite& s2) {\n+int compare_malloc_site_and_tag(const MallocSite& s1, const MallocSite& s2) {\n@@ -234,2 +234,2 @@\n-    case by_site_and_type:\n-      malloc_sites_to_allocation_site_and_type_order();\n+    case by_site_and_tag:\n+      malloc_sites_to_allocation_site_and_tag_order();\n@@ -275,1 +275,1 @@\n-  if (_malloc_sites_order != by_site && _malloc_sites_order != by_site_and_type) {\n+  if (_malloc_sites_order != by_site && _malloc_sites_order != by_site_and_tag) {\n@@ -285,3 +285,3 @@\n-void MemBaseline::malloc_sites_to_allocation_site_and_type_order() {\n-  if (_malloc_sites_order != by_site_and_type) {\n-    SortedLinkedList<MallocSite, compare_malloc_site_and_type> tmp;\n+void MemBaseline::malloc_sites_to_allocation_site_and_tag_order() {\n+  if (_malloc_sites_order != by_site_and_tag) {\n+    SortedLinkedList<MallocSite, compare_malloc_site_and_tag> tmp;\n@@ -292,1 +292,1 @@\n-    _malloc_sites_order = by_site_and_type;\n+    _malloc_sites_order = by_site_and_tag;\n","filename":"src\/hotspot\/share\/nmt\/memBaseline.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-    by_site_and_type \/\/ by call site and memory tag\n+    by_site_and_tag  \/\/ by call site and memory tag\n@@ -149,1 +149,1 @@\n-    return _malloc_memory_snapshot.by_type(mem_tag);\n+    return _malloc_memory_snapshot.by_tag(mem_tag);\n@@ -154,1 +154,1 @@\n-    return _virtual_memory_snapshot.by_type(mem_tag);\n+    return _virtual_memory_snapshot.by_tag(mem_tag);\n@@ -207,1 +207,1 @@\n-  void malloc_sites_to_allocation_site_and_type_order();\n+  void malloc_sites_to_allocation_site_and_tag_order();\n","filename":"src\/hotspot\/share\/nmt\/memBaseline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-    out->print(\"(%s%zu%s type=%s\", alloc_type,\n+    out->print(\"(%s%zu%s tag=%s\", alloc_type,\n@@ -184,2 +184,2 @@\n-    MallocMemory* malloc_memory = _malloc_snapshot->by_type(mem_tag);\n-    VirtualMemory* virtual_memory = _vm_snapshot->by_type(mem_tag);\n+    MallocMemory* malloc_memory = _malloc_snapshot->by_tag(mem_tag);\n+    VirtualMemory* virtual_memory = _vm_snapshot->by_tag(mem_tag);\n@@ -187,1 +187,1 @@\n-    report_summary_of_type(mem_tag, malloc_memory, virtual_memory);\n+    report_summary_of_tag(mem_tag, malloc_memory, virtual_memory);\n@@ -191,1 +191,1 @@\n-void MemSummaryReporter::report_summary_of_type(MemTag mem_tag,\n+void MemSummaryReporter::report_summary_of_tag(MemTag mem_tag,\n@@ -200,1 +200,1 @@\n-      (const VirtualMemory*)_vm_snapshot->by_type(mtThreadStack);\n+      (const VirtualMemory*)_vm_snapshot->by_tag(mtThreadStack);\n@@ -242,1 +242,1 @@\n-     _vm_snapshot->by_type(mtThreadStack);\n+     _vm_snapshot->by_tag(mtThreadStack);\n@@ -383,1 +383,1 @@\n-        out->print(\" Type=%s\", NMTUtil::tag_to_name(mem_tag));\n+        out->print(\" Tag=%s\", NMTUtil::tag_to_name(mem_tag));\n@@ -527,1 +527,1 @@\n-    diff_summary_of_type(mem_tag,\n+    diff_summary_of_tag(mem_tag,\n@@ -597,1 +597,1 @@\n-void MemSummaryDiffReporter::diff_summary_of_type(MemTag mem_tag,\n+void MemSummaryDiffReporter::diff_summary_of_tag(MemTag mem_tag,\n@@ -798,2 +798,2 @@\n-  MallocSiteIterator early_itr = _early_baseline.malloc_sites(MemBaseline::by_site_and_type);\n-  MallocSiteIterator current_itr = _current_baseline.malloc_sites(MemBaseline::by_site_and_type);\n+  MallocSiteIterator early_itr = _early_baseline.malloc_sites(MemBaseline::by_site_and_tag);\n+  MallocSiteIterator current_itr = _current_baseline.malloc_sites(MemBaseline::by_site_and_tag);\n","filename":"src\/hotspot\/share\/nmt\/memReporter.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -142,1 +142,1 @@\n-  void report_summary_of_type(MemTag mem_tag, MallocMemory* malloc_memory,\n+  void report_summary_of_tag(MemTag mem_tag, MallocMemory* malloc_memory,\n@@ -207,1 +207,1 @@\n-  void diff_summary_of_type(MemTag mem_tag,\n+  void diff_summary_of_tag(MemTag mem_tag,\n","filename":"src\/hotspot\/share\/nmt\/memReporter.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-  \/\/ Memory type is encoded into tracking header as a byte field,\n+  \/\/ Memory tag is encoded into tracking header as a byte field,\n","filename":"src\/hotspot\/share\/nmt\/memTracker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -213,1 +213,1 @@\n-  \/\/  memory flags of the original region.\n+  \/\/  memory tags of the original region.\n@@ -228,1 +228,1 @@\n-      VirtualMemoryTracker::set_reserved_region_type((address)addr, mem_tag);\n+      VirtualMemoryTracker::set_reserved_region_tag((address)addr, mem_tag);\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-    VirtualMemory* summary = file->_summary.by_type(NMTUtil::index_to_tag(i));\n+    VirtualMemory* summary = file->_summary.by_tag(NMTUtil::index_to_tag(i));\n@@ -56,1 +56,1 @@\n-    VirtualMemory* summary = file->_summary.by_type(NMTUtil::index_to_tag(i));\n+    VirtualMemory* summary = file->_summary.by_tag(NMTUtil::index_to_tag(i));\n@@ -179,1 +179,1 @@\n-    VirtualMemory* snap = snapshot->by_type(tag);\n+    VirtualMemory* snap = snapshot->by_tag(tag);\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +81,1 @@\n-        f(NMTUtil::index_to_tag(i), file->_summary.by_type(NMTUtil::index_to_tag(i)));\n+        f(NMTUtil::index_to_tag(i), file->_summary.by_tag(NMTUtil::index_to_tag(i)));\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-#define MEMORY_TAG_DECLARE_NAME(type, human_readable) \\\n-  { #type, human_readable },\n+#define MEMORY_TAG_DECLARE_NAME(tag, human_readable) \\\n+  { #tag, human_readable },\n","filename":"src\/hotspot\/share\/nmt\/nmtCommon.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,1 +91,1 @@\n-    assert(tag_is_valid(mem_tag), \"Invalid type (%u)\", (unsigned)mem_tag);\n+    assert(tag_is_valid(mem_tag), \"Invalid tag (%u)\", (unsigned)mem_tag);\n@@ -107,1 +107,1 @@\n-    assert(tag_index_is_valid(index), \"Invalid type index (%d)\", index);\n+    assert(tag_index_is_valid(index), \"Invalid tag index (%d)\", index);\n","filename":"src\/hotspot\/share\/nmt\/nmtCommon.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    const MallocMemory* mm = ms->by_type(mem_tag);\n+    const MallocMemory* mm = ms->by_tag(mem_tag);\n@@ -87,1 +87,1 @@\n-    const VirtualMemory* vm = vms->by_type(mem_tag);\n+    const VirtualMemory* vm = vms->by_tag(mem_tag);\n","filename":"src\/hotspot\/share\/nmt\/nmtUsage.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -416,1 +416,1 @@\n-void VirtualMemoryTracker::set_reserved_region_type(address addr, MemTag mem_tag) {\n+void VirtualMemoryTracker::set_reserved_region_tag(address addr, MemTag mem_tag) {\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,1 +101,1 @@\n-  inline VirtualMemory* by_type(MemTag mem_tag) {\n+  inline VirtualMemory* by_tag(MemTag mem_tag) {\n@@ -106,1 +106,1 @@\n-  inline const VirtualMemory* by_type(MemTag mem_tag) const {\n+  inline const VirtualMemory* by_tag(MemTag mem_tag) const {\n@@ -138,1 +138,1 @@\n-    as_snapshot()->by_type(mem_tag)->reserve_memory(size);\n+    as_snapshot()->by_tag(mem_tag)->reserve_memory(size);\n@@ -142,1 +142,1 @@\n-    as_snapshot()->by_type(mem_tag)->commit_memory(size);\n+    as_snapshot()->by_tag(mem_tag)->commit_memory(size);\n@@ -146,1 +146,1 @@\n-    as_snapshot()->by_type(mem_tag)->uncommit_memory(size);\n+    as_snapshot()->by_tag(mem_tag)->uncommit_memory(size);\n@@ -150,1 +150,1 @@\n-    as_snapshot()->by_type(mem_tag)->release_memory(size);\n+    as_snapshot()->by_tag(mem_tag)->release_memory(size);\n@@ -156,1 +156,1 @@\n-  \/\/ type to specified memory tag.\n+  \/\/ tag to specified memory tag.\n@@ -158,2 +158,2 @@\n-    as_snapshot()->by_type(from)->release_memory(size);\n-    as_snapshot()->by_type(to)->reserve_memory(size);\n+    as_snapshot()->by_tag(from)->release_memory(size);\n+    as_snapshot()->by_tag(to)->reserve_memory(size);\n@@ -163,2 +163,2 @@\n-    as_snapshot()->by_type(from)->uncommit_memory(size);\n-    as_snapshot()->by_type(to)->commit_memory(size);\n+    as_snapshot()->by_tag(from)->uncommit_memory(size);\n+    as_snapshot()->by_tag(to)->commit_memory(size);\n@@ -389,1 +389,1 @@\n-  static void set_reserved_region_type  (address addr, MemTag mem_tag);\n+  static void set_reserved_region_tag   (address addr, MemTag mem_tag);\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.hpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -99,1 +99,1 @@\n-      assert(!(type == StateType::Released) || data.mem_tag == mtNone, \"Released type must have memory tag mtNone\");\n+      assert(!(type == StateType::Released) || data.mem_tag == mtNone, \"Released state-type must have memory tag mtNone\");\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    EXPECT_EQ(file->_summary.by_type(mtTest)->committed(), sz(100));\n+    EXPECT_EQ(file->_summary.by_tag(mtTest)->committed(), sz(100));\n@@ -38,1 +38,1 @@\n-    EXPECT_EQ(file->_summary.by_type(mtTest)->committed(), sz(200));\n+    EXPECT_EQ(file->_summary.by_tag(mtTest)->committed(), sz(200));\n@@ -40,1 +40,1 @@\n-    EXPECT_EQ(file->_summary.by_type(mtTest)->committed(), sz(300));\n+    EXPECT_EQ(file->_summary.by_tag(mtTest)->committed(), sz(300));\n@@ -42,1 +42,1 @@\n-    EXPECT_EQ(file->_summary.by_type(mtTest)->committed(), sz(0));\n+    EXPECT_EQ(file->_summary.by_tag(mtTest)->committed(), sz(0));\n@@ -44,1 +44,1 @@\n-    EXPECT_EQ(file->_summary.by_type(mtTest)->committed(), sz(100));\n+    EXPECT_EQ(file->_summary.by_tag(mtTest)->committed(), sz(100));\n@@ -46,1 +46,1 @@\n-    EXPECT_EQ(file->_summary.by_type(mtTest)->committed(), sz(90));\n+    EXPECT_EQ(file->_summary.by_tag(mtTest)->committed(), sz(90));\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_memoryfiletracker.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}