{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import java.security.PublicKey;\n@@ -43,0 +44,1 @@\n+import java.util.concurrent.ConcurrentHashMap;\n@@ -80,0 +82,17 @@\n+    private final boolean ksP12;\n+    \/*\n+     * The credentials from the PKCS12KeyStore as\n+     * Map: String(builderIndex.entryAlias) -> X509Credentials(credentials)\n+     *\/\n+    private final Map<String, X509Credentials> credentialsMap;\n+\n+    private static class X509Credentials {\n+        final PrivateKey privateKey;\n+        final X509Certificate[] certificates;\n+\n+        X509Credentials(PrivateKey privateKey, X509Certificate[] certificates) {\n+            this.privateKey = privateKey;\n+            this.certificates = certificates;\n+        }\n+    }\n+\n@@ -87,2 +106,28 @@\n-        entryCacheMap = Collections.synchronizedMap\n-                        (new SizedMap<>());\n+        boolean foundPKCS12 = false;\n+\n+        for (Builder builder : builders) {\n+            try {\n+                KeyStore keyStore = builder.getKeyStore();\n+                String ksType = keyStore.getType();\n+                if (ksType.equalsIgnoreCase(\"pkcs12\")) {\n+                    foundPKCS12 = true;\n+                    break;\n+                }\n+            } catch (Exception e) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                    SSLLogger.fine(\"KeyMgr: error occurred during \" +\n+                            \"getKeyStore() operation for Keystore builder\");\n+                }\n+            }\n+        }\n+\n+        if (foundPKCS12) {\n+            ksP12 = true;\n+            credentialsMap = new ConcurrentHashMap<>();\n+            entryCacheMap = null;\n+            initializeCredentials();\n+        } else {\n+            ksP12 = false;\n+            credentialsMap = null;\n+            entryCacheMap = Collections.synchronizedMap(new SizedMap<>());\n+        }\n@@ -102,0 +147,25 @@\n+    private void initializeCredentials() {\n+        for (int i = 0, n = builders.size(); i < n; i++) {\n+            try {\n+                Builder builder = builders.get(i);\n+                KeyStore keyStore = builder.getKeyStore();\n+\n+                Enumeration<String> aliases = keyStore.aliases();\n+                while (aliases.hasMoreElements()) {\n+                    String alias = aliases.nextElement();\n+                    if (!keyStore.isKeyEntry(alias)) {\n+                        continue;\n+                    }\n+\n+                    processCredentials(builder, i, alias);\n+                }\n+            } catch (Exception e) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                    SSLLogger.fine(\"KeyMgr: error occurred during \" +\n+                            \"getKeyStore() operation for Keystore builder \" +\n+                            \"index = \" + i);\n+                }\n+            }\n+        }\n+    }\n+\n@@ -108,3 +178,8 @@\n-        PrivateKeyEntry entry = getEntry(alias);\n-        return entry == null ? null :\n-                (X509Certificate[])entry.getCertificateChain();\n+        if (ksP12) {\n+            X509Credentials cred = getCredentials(alias);\n+            return (cred != null) ? cred.certificates.clone() : null;\n+        } else {\n+            PrivateKeyEntry entry = getEntry(alias);\n+            return entry == null ? null :\n+                    (X509Certificate[]) entry.getCertificateChain();\n+        }\n@@ -115,2 +190,7 @@\n-        PrivateKeyEntry entry = getEntry(alias);\n-        return entry == null ? null : entry.getPrivateKey();\n+        if (ksP12) {\n+            X509Credentials cred = getCredentials(alias);\n+            return (cred != null) ? cred.privateKey : null;\n+        } else {\n+            PrivateKeyEntry entry = getEntry(alias);\n+            return entry == null ? null : entry.getPrivateKey();\n+        }\n@@ -183,0 +263,121 @@\n+    private String removeAliasIndex(String alias) {\n+        if (alias == null) {\n+            return null;\n+        }\n+\n+        int firstDot = alias.indexOf('.');\n+        int secondDot = alias.indexOf('.', firstDot + 1);\n+        if ((firstDot == -1) || (secondDot == firstDot)) {\n+            \/\/ invalid alias\n+            return null;\n+        }\n+        return alias.substring(firstDot + 1);\n+    }\n+\n+    private X509Credentials getCredentials(String alias) {\n+        String builderAlias = removeAliasIndex(alias);\n+        if (builderAlias == null) {\n+            return null;\n+        }\n+\n+        X509Credentials cred = credentialsMap.get(builderAlias);\n+        if (cred == null || !areCertChainsEqual(builderAlias,\n+                cred.certificates)) {\n+            if (updateCredentialsMap(builderAlias)) {\n+                cred = credentialsMap.get(builderAlias);\n+            } else {\n+                cred = null;\n+            }\n+        }\n+        return cred;\n+    }\n+\n+    private boolean areCertChainsEqual(String builderAlias,\n+            X509Certificate[] cachedCerts) {\n+        int aDot = builderAlias.indexOf('.');\n+        int builderIndex = Integer.parseInt(builderAlias.substring(0, aDot));\n+        String entryAlias = builderAlias.substring(aDot + 1);\n+        try {\n+            Builder builder = builders.get(builderIndex);\n+            KeyStore keyStore = builder.getKeyStore();\n+\n+            Certificate[] keyStoreCerts = keyStore.\n+                    getCertificateChain(entryAlias);\n+            if (keyStoreCerts == null || keyStoreCerts.length == 0) {\n+                return false;\n+            }\n+            return Arrays.equals(cachedCerts, keyStoreCerts);\n+        } catch (Exception e) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                SSLLogger.fine(\"KeyMgr: exception occurred during \" +\n+                        \"areCertChainsEqual() operation for: \" +\n+                        \" keystore builder index = \" + builderIndex +\n+                        \", alias = \" + entryAlias);\n+            }\n+            return false;\n+        }\n+    }\n+\n+    private boolean processCredentials(Builder builder, int builderIndex,\n+            String alias) {\n+        try {\n+            KeyStore keyStore = builder.getKeyStore();\n+\n+            Entry newEntry = keyStore.getEntry(alias,\n+                    builder.getProtectionParameter(alias));\n+            if (!(newEntry instanceof PrivateKeyEntry privateKeyEntry)) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                    SSLLogger.fine(\"KeyMgr: Failed to retrieve private key \" +\n+                            \"entry for: keystore builder index = \" +\n+                            builderIndex + \", alias = \" + alias);\n+                }\n+                return false;\n+            }\n+\n+            PrivateKey privateKey = privateKeyEntry.getPrivateKey();\n+            X509Certificate[] certs = (X509Certificate[]) privateKeyEntry.\n+                    getCertificateChain();\n+\n+            X509Certificate cert = certs[0];\n+            PublicKey publicKey = cert.getPublicKey();\n+            if (!privateKey.getAlgorithm().equals(publicKey.getAlgorithm())) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                    SSLLogger.fine(\"KeyMgr: Private key algorithm does not \" +\n+                            \"match public key for: keystore builder index = \" +\n+                            builderIndex + \", alias = \" + alias);\n+                }\n+                return false;\n+            }\n+\n+            \/\/ Add to credentials map\n+            String builderAlias = builderIndex + \".\" + alias;\n+            X509Credentials cred = new X509Credentials(privateKey, certs);\n+            credentialsMap.put(builderAlias, cred);\n+\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                SSLLogger.fine(\"found key for: \" +\n+                        \"keystore builder index = \" + builderIndex +\n+                        \", alias = \" + alias, (Object[]) certs);\n+            }\n+\n+            return true;\n+        } catch (Exception e) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                SSLLogger.fine(\"KeyMgr: Exception occurred during processing \" +\n+                        \"credentials in cached map for: keystore builder \" +\n+                        \"index = \" + builderIndex + \", alias = \" + alias);\n+            }\n+            return false;\n+        }\n+    }\n+\n+    \/\/ Update the credentialsMap with the up-to-date key and certificates\n+    private boolean updateCredentialsMap(String builderAlias) {\n+        int aDot = builderAlias.indexOf('.');\n+        int builderIndex = Integer.parseInt(builderAlias.substring(0, aDot));\n+        String entryAlias = builderAlias.substring(aDot + 1);\n+        Builder builder = builders.get(builderIndex);\n+\n+        return processCredentials(builder, builderIndex, entryAlias);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/X509KeyManagerImpl.java","additions":209,"deletions":8,"binary":false,"changes":217,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,0 +78,3 @@\n+    @Param({\"SunX509\", \"PKIX\"})\n+    String keyMgr;\n+\n@@ -83,2 +86,1 @@\n-        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\n-                KeyManagerFactory.getDefaultAlgorithm());\n+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(keyMgr);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/SSLHandshake.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}