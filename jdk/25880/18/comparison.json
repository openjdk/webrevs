{"files":[{"patch":"@@ -47,10 +47,10 @@\n- * Provides default implementations of {@link ExecutorService}\n- * execution methods. This class implements the {@code submit},\n- * {@code invokeAny} and {@code invokeAll} methods using a\n- * {@link RunnableFuture} returned by {@code newTaskFor}, which defaults\n- * to the {@link FutureTask} class provided in this package.  For example,\n- * the implementation of {@code submit(Runnable)} creates an\n- * associated {@code RunnableFuture} that is executed and\n- * returned. Subclasses may override the {@code newTaskFor} methods\n- * to return {@code RunnableFuture} implementations other than\n- * {@code FutureTask}.\n+ * Provides default implementations of {@link ExecutorService} methods\n+ * other than {@link Executor#execute}. This class implements the {@code\n+ * submit}, {@code invokeAny} and {@code invokeAll} methods using a\n+ * {@link RunnableFuture} returned by {@code newTaskFor}, which\n+ * defaults to the {@link FutureTask} class provided in this package.\n+ * For example, the implementation of {@code submit(Runnable)} creates\n+ * an associated {@code RunnableFuture} that is executed and\n+ * returned. Subclasses may override the {@code newTaskFor} methods to\n+ * return {@code RunnableFuture} implementations other than {@code\n+ * FutureTask}.\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/AbstractExecutorService.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n- * A stage completes upon termination of its computation, but this may\n+ * A stage completes upon termination of its computation, which may\n@@ -100,12 +100,19 @@\n- * {@link CompletionException} holding the exception as its cause.  If\n- * a stage is dependent on <em>both<\/em> of two stages, and both\n- * complete exceptionally, then the CompletionException may correspond\n- * to either one of these exceptions.  If a stage is dependent on\n- * <em>either<\/em> of two others, and only one of them completes\n- * exceptionally, no guarantees are made about whether the dependent\n- * stage completes normally or exceptionally. In the case of method\n- * {@code whenComplete}, when the supplied action itself encounters an\n- * exception, then the stage completes exceptionally with this\n- * exception unless the source stage also completed exceptionally, in\n- * which case the exceptional completion from the source stage is\n- * given preference and propagated to the dependent stage.\n+ * {@link CompletionException} holding the exception as its\n+ * cause. This convention distinguishes exceptions in an action itself\n+ * from those it depends on. If they are to be handled in the same\n+ * way, instead catch {@link RuntimeException} (possibly inspecting\n+ * the exception's {@code getCause()}).  If a stage is dependent on\n+ * <em>both<\/em> of two stages, and both complete exceptionally, then\n+ * the CompletionException may correspond to either one of these\n+ * exceptions.  If a stage is dependent on <em>either<\/em> of two\n+ * others, and only one of them completes exceptionally, no guarantees\n+ * are made about whether the dependent stage completes normally or\n+ * exceptionally. In the case of method {@code whenComplete}, when the\n+ * supplied action itself encounters an exception, then the stage\n+ * completes exceptionally with that exception unless the source stage\n+ * also completed exceptionally, in which case the exceptional\n+ * completion from the source stage is given preference and propagated\n+ * to the dependent stage. Applications are encouraged to maintain\n+ * these conventions, avoiding unnecessary nesting when rethrowing, as\n+ * in {@code throw (ex instanceof CompletionException) ? ex : new\n+ * CompletionException(ex)}.\n@@ -140,1 +147,1 @@\n- * <p>This interface does not define methods for initially creating,\n+ * <p>The {@code CompletionStage} interface does not define methods for initially creating,\n@@ -148,0 +155,7 @@\n+ * <p>Memory consistency effects: Actions in a thread prior to the\n+ * submission of a computation producing a {@code CompletionStage} <a\n+ * href=\"package-summary.html#MemoryVisibility\"><i>happen-before<\/i><\/a>\n+ * that computation begins. And actions taken by {@code\n+ * CompletionStage x} <i>happen-before<\/i> actions of any dependent\n+ * stage subsequent to {@code x}'s completion.\n+ *\n@@ -156,2 +170,2 @@\n-     * Returns a new CompletionStage that, when this stage completes\n-     * normally, is executed with this stage's result as the argument\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n+     * normally, is executed with {@code this} stage's result as the argument\n@@ -175,3 +189,3 @@\n-     * Returns a new CompletionStage that, when this stage completes\n-     * normally, is executed using this stage's default asynchronous\n-     * execution facility, with this stage's result as the argument to\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n+     * normally, is executed using {@code this} stage's default asynchronous\n+     * execution facility, with {@code this} stage's result as the argument to\n@@ -192,2 +206,2 @@\n-     * Returns a new CompletionStage that, when this stage completes\n-     * normally, is executed using the supplied Executor, with this\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n+     * normally, is executed using the supplied Executor, with {@code this}\n@@ -210,2 +224,2 @@\n-     * Returns a new CompletionStage that, when this stage completes\n-     * normally, is executed with this stage's result as the argument\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n+     * normally, is executed with {@code this} stage's result as the argument\n@@ -224,3 +238,3 @@\n-     * Returns a new CompletionStage that, when this stage completes\n-     * normally, is executed using this stage's default asynchronous\n-     * execution facility, with this stage's result as the argument to\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n+     * normally, is executed using {@code this} stage's default asynchronous\n+     * execution facility, with {@code this} stage's result as the argument to\n@@ -239,2 +253,2 @@\n-     * Returns a new CompletionStage that, when this stage completes\n-     * normally, is executed using the supplied Executor, with this\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n+     * normally, is executed using the supplied Executor, with {@code this}\n@@ -254,1 +268,1 @@\n-     * Returns a new CompletionStage that, when this stage completes\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n@@ -267,2 +281,2 @@\n-     * Returns a new CompletionStage that, when this stage completes\n-     * normally, executes the given action using this stage's default\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n+     * normally, executes the given action using {@code this} stage's default\n@@ -281,1 +295,1 @@\n-     * Returns a new CompletionStage that, when this stage completes\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n@@ -296,1 +310,1 @@\n-     * Returns a new CompletionStage that, when this and the other\n+     * Returns a new CompletionStage that, when {@code this} and the other\n@@ -315,2 +329,2 @@\n-     * Returns a new CompletionStage that, when this and the other\n-     * given stage both complete normally, is executed using this\n+     * Returns a new CompletionStage that, when {@code this} and the other\n+     * given stage both complete normally, is executed using {@code this}\n@@ -335,1 +349,1 @@\n-     * Returns a new CompletionStage that, when this and the other\n+     * Returns a new CompletionStage that, when {@code this} and the other\n@@ -357,1 +371,1 @@\n-     * Returns a new CompletionStage that, when this and the other\n+     * Returns a new CompletionStage that, when {@code this} and the other\n@@ -375,2 +389,2 @@\n-     * Returns a new CompletionStage that, when this and the other\n-     * given stage both complete normally, is executed using this\n+     * Returns a new CompletionStage that, when {@code this} and the other\n+     * given stage both complete normally, is executed using {@code this}\n@@ -394,1 +408,1 @@\n-     * Returns a new CompletionStage that, when this and the other\n+     * Returns a new CompletionStage that, when {@code this} and the other\n@@ -415,1 +429,1 @@\n-     * Returns a new CompletionStage that, when this and the other\n+     * Returns a new CompletionStage that, when {@code this} and the other\n@@ -429,1 +443,1 @@\n-     * Returns a new CompletionStage that, when this and the other\n+     * Returns a new CompletionStage that, when {@code this} and the other\n@@ -431,1 +445,1 @@\n-     * using this stage's default asynchronous execution facility.\n+     * using {@code this} stage's default asynchronous execution facility.\n@@ -445,1 +459,1 @@\n-     * Returns a new CompletionStage that, when this and the other\n+     * Returns a new CompletionStage that, when {@code this} and the other\n@@ -462,1 +476,1 @@\n-     * Returns a new CompletionStage that, when either this or the\n+     * Returns a new CompletionStage that, when either {@code this} or the\n@@ -480,2 +494,2 @@\n-     * Returns a new CompletionStage that, when either this or the\n-     * other given stage complete normally, is executed using this\n+     * Returns a new CompletionStage that, when either {@code this} or the\n+     * other given stage complete normally, is executed using {@code this}\n@@ -499,1 +513,1 @@\n-     * Returns a new CompletionStage that, when either this or the\n+     * Returns a new CompletionStage that, when either {@code this} or the\n@@ -520,1 +534,1 @@\n-     * Returns a new CompletionStage that, when either this or the\n+     * Returns a new CompletionStage that, when either {@code this} or the\n@@ -537,2 +551,2 @@\n-     * Returns a new CompletionStage that, when either this or the\n-     * other given stage complete normally, is executed using this\n+     * Returns a new CompletionStage that, when either {@code this} or the\n+     * other given stage complete normally, is executed using {@code this}\n@@ -555,1 +569,1 @@\n-     * Returns a new CompletionStage that, when either this or the\n+     * Returns a new CompletionStage that, when either {@code this} or the\n@@ -575,1 +589,1 @@\n-     * Returns a new CompletionStage that, when either this or the\n+     * Returns a new CompletionStage that, when either {@code this} or the\n@@ -590,1 +604,1 @@\n-     * Returns a new CompletionStage that, when either this or the\n+     * Returns a new CompletionStage that, when either {@code this} or the\n@@ -592,1 +606,1 @@\n-     * using this stage's default asynchronous execution facility.\n+     * using {@code this} stage's default asynchronous execution facility.\n@@ -607,1 +621,1 @@\n-     * Returns a new CompletionStage that, when either this or the\n+     * Returns a new CompletionStage that, when either {@code this} or the\n@@ -629,2 +643,2 @@\n-     * <p>When this stage completes normally, the given function is\n-     * invoked with this stage's result as the argument, returning\n+     * <p>When {@code this} stage completes normally, the given function is\n+     * invoked with {@code this} stage's result as the argument, returning\n@@ -632,1 +646,1 @@\n-     * the CompletionStage returned by this method is completed with\n+     * the CompletionStage returned is completed with\n@@ -655,1 +669,1 @@\n-     * executed using this stage's default asynchronous execution\n+     * executed using {@code this} stage's default asynchronous execution\n@@ -658,2 +672,2 @@\n-     * <p>When this stage completes normally, the given function is\n-     * invoked with this stage's result as the argument, returning\n+     * <p>When {@code this} stage completes normally, the given function is\n+     * invoked with {@code this} stage's result as the argument, returning\n@@ -661,1 +675,1 @@\n-     * the CompletionStage returned by this method is completed with\n+     * the CompletionStage returned is completed with\n@@ -682,2 +696,2 @@\n-     * <p>When this stage completes normally, the given function is\n-     * invoked with this stage's result as the argument, returning\n+     * <p>When {@code this} stage completes normally, the given function is\n+     * invoked with {@code this} stage's result as the argument, returning\n@@ -685,1 +699,1 @@\n-     * the CompletionStage returned by this method is completed with\n+     * the CompletionStage returned by {@code this} method is completed with\n@@ -704,2 +718,2 @@\n-     * Returns a new CompletionStage that, when this stage completes\n-     * either normally or exceptionally, is executed with this stage's\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n+     * either normally or exceptionally, is executed with {@code this} stage's\n@@ -708,1 +722,1 @@\n-     * <p>When this stage is complete, the given function is invoked\n+     * <p>When {@code this} stage is complete, the given function is invoked\n@@ -710,1 +724,1 @@\n-     * {@code null} if none) of this stage as arguments, and the\n+     * {@code null} if none) of {@code this} stage as arguments, and the\n@@ -722,3 +736,3 @@\n-     * Returns a new CompletionStage that, when this stage completes\n-     * either normally or exceptionally, is executed using this stage's\n-     * default asynchronous execution facility, with this stage's\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n+     * either normally or exceptionally, is executed using {@code this} stage's\n+     * default asynchronous execution facility, with {@code this} stage's\n@@ -727,1 +741,1 @@\n-     * <p>When this stage is complete, the given function is invoked\n+     * <p>When {@code this} stage is complete, the given function is invoked\n@@ -729,1 +743,1 @@\n-     * {@code null} if none) of this stage as arguments, and the\n+     * {@code null} if none) of {@code this} stage as arguments, and the\n@@ -741,1 +755,1 @@\n-     * Returns a new CompletionStage that, when this stage completes\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n@@ -743,1 +757,1 @@\n-     * supplied executor, with this stage's result and exception as\n+     * supplied executor, with {@code this} stage's result and exception as\n@@ -746,1 +760,1 @@\n-     * <p>When this stage is complete, the given function is invoked\n+     * <p>When {@code this} stage is complete, the given function is invoked\n@@ -748,1 +762,1 @@\n-     * {@code null} if none) of this stage as arguments, and the\n+     * {@code null} if none) of {@code this} stage as arguments, and the\n@@ -763,1 +777,1 @@\n-     * this stage, that executes the given action when this stage completes.\n+     * {@code this} stage, that executes the given action when {@code this} stage completes.\n@@ -765,1 +779,1 @@\n-     * <p>When this stage is complete, the given action is invoked\n+     * <p>When {@code this} stage is complete, the given action is invoked\n@@ -767,1 +781,1 @@\n-     * {@code null} if none) of this stage as arguments.  The returned\n+     * {@code null} if none) of {@code this} stage as arguments.  The returned\n@@ -771,1 +785,1 @@\n-     * this method is not designed to translate completion outcomes,\n+     * method {@code whenComplete} is not designed to translate completion outcomes,\n@@ -773,1 +787,1 @@\n-     * if it does, the following rules apply: if this stage completed\n+     * if it does, the following rules apply: if {@code this} stage completed\n@@ -776,1 +790,1 @@\n-     * action's exception. Or, if this stage completed exceptionally\n+     * action's exception. Or, if {@code this} stage completed exceptionally\n@@ -778,1 +792,1 @@\n-     * stage completes exceptionally with this stage's exception.\n+     * stage completes exceptionally with {@code this} stage's exception.\n@@ -788,2 +802,2 @@\n-     * this stage, that executes the given action using this stage's\n-     * default asynchronous execution facility when this stage completes.\n+     * {@code this} stage, that executes the given action using {@code this} stage's\n+     * default asynchronous execution facility when {@code this} stage completes.\n@@ -791,1 +805,1 @@\n-     * <p>When this stage is complete, the given action is invoked with the\n+     * <p>When {@code this} stage is complete, the given action is invoked with the\n@@ -793,1 +807,1 @@\n-     * if none) of this stage as arguments.  The returned stage is completed\n+     * if none) of {@code this} stage as arguments.  The returned stage is completed\n@@ -797,1 +811,1 @@\n-     * this method is not designed to translate completion outcomes,\n+     * method {@code whenCompleteAsync} is not designed to translate completion outcomes,\n@@ -799,1 +813,1 @@\n-     * if it does, the following rules apply: If this stage completed\n+     * if it does, the following rules apply: If {@code this} stage completed\n@@ -802,1 +816,1 @@\n-     * action's exception. Or, if this stage completed exceptionally\n+     * action's exception. Or, if {@code this} stage completed exceptionally\n@@ -804,1 +818,1 @@\n-     * stage completes exceptionally with this stage's exception.\n+     * stage completes exceptionally with {@code this} stage's exception.\n@@ -814,2 +828,2 @@\n-     * this stage, that executes the given action using the supplied\n-     * Executor when this stage completes.\n+     * {@code this} stage, that executes the given action using the supplied\n+     * Executor when {@code this} stage completes.\n@@ -817,1 +831,1 @@\n-     * <p>When this stage is complete, the given action is invoked with the\n+     * <p>When {@code this} stage is complete, the given action is invoked with the\n@@ -819,1 +833,1 @@\n-     * if none) of this stage as arguments.  The returned stage is completed\n+     * if none) of {@code this} stage as arguments.  The returned stage is completed\n@@ -823,1 +837,1 @@\n-     * this method is not designed to translate completion outcomes,\n+     * method {@code whenCompleteAsync} is not designed to translate completion outcomes,\n@@ -825,1 +839,1 @@\n-     * if it does, the following rules apply: If this stage completed\n+     * if it does, the following rules apply: If {@code this} stage completed\n@@ -828,1 +842,1 @@\n-     * action's exception. Or, if this stage completed exceptionally\n+     * action's exception. Or, if {@code this} stage completed exceptionally\n@@ -830,1 +844,1 @@\n-     * stage completes exceptionally with this stage's exception.\n+     * stage completes exceptionally with {@code this} stage's exception.\n@@ -841,3 +855,3 @@\n-     * Returns a new CompletionStage that, when this stage completes\n-     * exceptionally, is executed with this stage's exception as the\n-     * argument to the supplied function.  Otherwise, if this stage\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n+     * exceptionally, is executed with {@code this} stage's exception as the\n+     * argument to the supplied function.  Otherwise, if {@code this} stage\n@@ -848,1 +862,1 @@\n-     * returned CompletionStage if this CompletionStage completed\n+     * returned CompletionStage if {@code this} CompletionStage completed\n@@ -856,4 +870,4 @@\n-     * Returns a new CompletionStage that, when this stage completes\n-     * exceptionally, is executed with this stage's exception as the\n-     * argument to the supplied function, using this stage's default\n-     * asynchronous execution facility.  Otherwise, if this stage\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n+     * exceptionally, is executed with {@code this} stage's exception as the\n+     * argument to the supplied function, using {@code this} stage's default\n+     * asynchronous execution facility.  Otherwise, if {@code this} stage\n@@ -868,1 +882,1 @@\n-     * returned CompletionStage if this CompletionStage completed\n+     * returned CompletionStage if {@code this} CompletionStage completed\n@@ -882,2 +896,2 @@\n-     * Returns a new CompletionStage that, when this stage completes\n-     * exceptionally, is executed with this stage's exception as the\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n+     * exceptionally, is executed with {@code this} stage's exception as the\n@@ -885,1 +899,1 @@\n-     * Otherwise, if this stage completes normally, then the returned\n+     * Otherwise, if {@code this} stage completes normally, then the returned\n@@ -893,1 +907,1 @@\n-     * returned CompletionStage if this CompletionStage completed\n+     * returned CompletionStage if {@code this} CompletionStage completed\n@@ -908,1 +922,1 @@\n-     * Returns a new CompletionStage that, when this stage completes\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n@@ -910,1 +924,1 @@\n-     * function applied to this stage's exception.\n+     * function applied to {@code this} stage's exception.\n@@ -917,1 +931,1 @@\n-     * CompletionStage if this CompletionStage completed exceptionally\n+     * CompletionStage if {@code this} CompletionStage completed exceptionally\n@@ -930,1 +944,1 @@\n-     * Returns a new CompletionStage that, when this stage completes\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n@@ -932,1 +946,1 @@\n-     * function applied to this stage's exception, using this stage's\n+     * function applied to {@code this} stage's exception, using {@code this} stage's\n@@ -940,1 +954,1 @@\n-     * CompletionStage if this CompletionStage completed exceptionally\n+     * CompletionStage if {@code this} CompletionStage completed exceptionally\n@@ -954,1 +968,1 @@\n-     * Returns a new CompletionStage that, when this stage completes\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n@@ -956,1 +970,1 @@\n-     * function applied to this stage's exception, using the\n+     * function applied to {@code this} stage's exception, using the\n@@ -964,1 +978,1 @@\n-     * CompletionStage if this CompletionStage completed exceptionally\n+     * CompletionStage if {@code this} CompletionStage completed exceptionally\n@@ -981,3 +995,3 @@\n-     * completion properties as this stage. If this stage is already a\n-     * CompletableFuture, this method may return this stage itself.\n-     * Otherwise, invocation of this method may be equivalent in\n+     * completion properties as {@code this} stage. If {@code this} stage is already a\n+     * CompletableFuture, method {@code toCompletableFuture} may return {@code this} stage itself.\n+     * Otherwise, invocation may be equivalent in\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CompletionStage.java","additions":141,"deletions":127,"binary":false,"changes":268,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n- * <p>ConcurrentHashMaps support a set of sequential and parallel bulk\n+ * <p id=\"Bulk\">ConcurrentHashMaps support a set of sequential and parallel bulk\n@@ -3707,1 +3707,1 @@\n-     * Performs the given action for each (key, value).\n+     * Performs the given {@linkplain ##Bulk bulk} action for each (key, value).\n@@ -3723,1 +3723,1 @@\n-     * Performs the given action for each non-null transformation\n+     * Performs the given {@linkplain ##Bulk bulk} action for each non-null transformation\n@@ -3746,1 +3746,1 @@\n-     * Returns a non-null result from applying the given search\n+     * Returns a non-null result from applying the given {@linkplain ##Bulk bulk} search\n@@ -3770,1 +3770,1 @@\n-     * Returns the result of accumulating the given transformation\n+     * Returns the result of accumulating the given {@linkplain ##Bulk bulk} transformation\n@@ -3796,1 +3796,1 @@\n-     * Returns the result of accumulating the given transformation\n+     * Returns the result of accumulating the given {@linkplain ##Bulk bulk} transformation\n@@ -3822,1 +3822,1 @@\n-     * Returns the result of accumulating the given transformation\n+     * Returns the result of accumulating the given {@linkplain ##Bulk bulk} transformation\n@@ -3848,1 +3848,1 @@\n-     * Returns the result of accumulating the given transformation\n+     * Returns the result of accumulating the given {@linkplain ##Bulk bulk} transformation\n@@ -3874,1 +3874,1 @@\n-     * Performs the given action for each key.\n+     * Performs the given {@linkplain ##Bulk bulk} action for each key.\n@@ -3890,1 +3890,1 @@\n-     * Performs the given action for each non-null transformation\n+     * Performs the given {@linkplain ##Bulk bulk} action for each non-null transformation\n@@ -3913,1 +3913,1 @@\n-     * Returns a non-null result from applying the given search\n+     * Returns a non-null result from applying the given {@linkplain ##Bulk bulk} search\n@@ -3937,1 +3937,1 @@\n-     * Returns the result of accumulating all keys using the given\n+     * Returns the result of {@linkplain ##Bulk bulk} accumulating all keys using the given\n@@ -3956,1 +3956,1 @@\n-     * Returns the result of accumulating the given transformation\n+     * Returns the result of {@linkplain ##Bulk bulk} accumulating the given transformation\n@@ -3982,1 +3982,1 @@\n-     * Returns the result of accumulating the given transformation\n+     * Returns the result of {@linkplain ##Bulk bulk} accumulating the given transformation\n@@ -4008,1 +4008,1 @@\n-     * Returns the result of accumulating the given transformation\n+     * Returns the result of {@linkplain ##Bulk bulk} accumulating the given transformation\n@@ -4034,1 +4034,1 @@\n-     * Returns the result of accumulating the given transformation\n+     * Returns the result of {@linkplain ##Bulk bulk} accumulating the given transformation\n@@ -4060,1 +4060,1 @@\n-     * Performs the given action for each value.\n+     * Performs the given {@linkplain ##Bulk bulk} action for each value.\n@@ -4077,1 +4077,1 @@\n-     * Performs the given action for each non-null transformation\n+     * Performs the given {@linkplain ##Bulk bulk} action for each non-null transformation\n@@ -4100,1 +4100,1 @@\n-     * Returns a non-null result from applying the given search\n+     * Returns a non-null result from {@linkplain ##Bulk bulk} applying the given search\n@@ -4124,1 +4124,1 @@\n-     * Returns the result of accumulating all values using the\n+     * Returns the result of {@linkplain ##Bulk bulk} accumulating all values using the\n@@ -4142,1 +4142,1 @@\n-     * Returns the result of accumulating the given transformation\n+     * Returns the result of {@linkplain ##Bulk bulk} accumulating the given transformation\n@@ -4168,1 +4168,1 @@\n-     * Returns the result of accumulating the given transformation\n+     * Returns the result of {@linkplain ##Bulk bulk} accumulating the given transformation\n@@ -4194,1 +4194,1 @@\n-     * Returns the result of accumulating the given transformation\n+     * Returns the result of {@linkplain ##Bulk bulk} accumulating the given transformation\n@@ -4220,1 +4220,1 @@\n-     * Returns the result of accumulating the given transformation\n+     * Returns the result of {@linkplain ##Bulk bulk} accumulating the given transformation\n@@ -4246,1 +4246,1 @@\n-     * Performs the given action for each entry.\n+     * Performs the given {@linkplain ##Bulk bulk} action for each entry.\n@@ -4261,1 +4261,1 @@\n-     * Performs the given action for each non-null transformation\n+     * Performs the given {@linkplain ##Bulk bulk} action for each non-null transformation\n@@ -4284,1 +4284,1 @@\n-     * Returns a non-null result from applying the given search\n+     * Returns a non-null result from {@linkplain ##Bulk bulk} applying the given search\n@@ -4308,1 +4308,1 @@\n-     * Returns the result of accumulating all entries using the\n+     * Returns the result of {@linkplain ##Bulk bulk} accumulating all entries using the\n@@ -4326,1 +4326,1 @@\n-     * Returns the result of accumulating the given transformation\n+     * Returns the result of {@linkplain ##Bulk bulk} accumulating the given transformation\n@@ -4352,1 +4352,1 @@\n-     * Returns the result of accumulating the given transformation\n+     * Returns the result of {@linkplain ##Bulk bulk} accumulating the given transformation\n@@ -4378,1 +4378,1 @@\n-     * Returns the result of accumulating the given transformation\n+     * Returns the result of {@linkplain ##Bulk bulk} accumulating the given transformation\n@@ -4404,1 +4404,1 @@\n-     * Returns the result of accumulating the given transformation\n+     * Returns the result of {@linkplain ##Bulk bulk} accumulating the given transformation\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ConcurrentHashMap.java","additions":32,"deletions":32,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -47,1 +47,4 @@\n- * are released.\n+ * are released. If you need support for variable numbers of parties\n+ * per cycle, alternate actions on exceptions, termination control,\n+ * contention control, or status monitoring, use the more flexible\n+ * {@link Phaser} class.\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CyclicBarrier.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -59,1 +59,3 @@\n- * that can be used to cancel execution and\/or wait for completion.\n+ * that can be used to cancel execution and\/or wait for completion;\n+ * also reporting exceptions that would otherwise be uncaught\n+ * using method {@code execute}.\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ExecutorService.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -309,1 +309,1 @@\n-     * Creates a thread pool that can schedule commands to run after a\n+     * Creates a fixed-size thread pool that can schedule commands to run after a\n@@ -321,1 +321,1 @@\n-     * Creates a thread pool that can schedule commands to run after a\n+     * Creates a fixed-size thread pool that can schedule commands to run after a\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/Executors.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,2 @@\n- * SubmissionPublisher}).\n+ * SubmissionPublisher}), and omits some error processing needed to\n+ * fully conform to the Reactive Streams specification.\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/Flow.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n- * actions become <em>enabled<\/em> and behave as ordinary submitted\n+ * actions become enabled for execution and behave as ordinary submitted\n@@ -156,1 +156,1 @@\n- * do not include scheduled tasks that are not yet enabled to execute,\n+ * do not include scheduled tasks that are not yet enabled for execution,\n@@ -3508,1 +3508,1 @@\n-     * Submits a one-shot task that becomes enabled after the given\n+     * Submits a one-shot task that becomes enabled for execution after the given\n@@ -3536,1 +3536,1 @@\n-     * Submits a value-returning one-shot task that becomes enabled\n+     * Submits a value-returning one-shot task that becomes enabled for execution\n@@ -3565,1 +3565,1 @@\n-     * Submits a periodic action that becomes enabled first after the\n+     * Submits a periodic action that becomes enabled for execution first after the\n@@ -3619,1 +3619,1 @@\n-     * Submits a periodic action that becomes enabled first after the\n+     * Submits a periodic action that becomes enabled for execution first after the\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -53,0 +53,20 @@\n+ * <p>Cancellation of a Future need not abruptly terminate its\n+ * computation. Method {@code cancel} causes {@code isCancelled()} to\n+ * return {@code true} unless already {@code isDone()}; in either case\n+ * {@code isDone()} subsequently reports {@code true}. This suppresses\n+ * execution by an {@link ExecutorService} if not already started.\n+ * There are several options for suppressing unnecessary computation\n+ * or unblocking a running Future that will not generate a\n+ * result. When task bodies are simple and short, no special attention\n+ * is warranted.  Computational methods in Future-aware code bodies\n+ * (for example {@link ForkJoinTask}, {@link FutureTask}) may inspect\n+ * their own {@code isDone()} status before or while engaging in\n+ * expensive computations. In blocking I\/O or communication contexts,\n+ * the optional {@code mayInterruptIfRunning} argument of {@code\n+ * cancel} may be used to support conventions that tasks should\n+ * unblock and exit when {@link Thread#interrupted}, whether checked\n+ * inside a task body or as a response to an {@link\n+ * InterruptedException}.  It is still preferable to additionally\n+ * check {@code isDone()} status when possible to avoid unintended\n+ * effects of other uses of {@link Thread#interrupt}.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/Future.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -288,1 +288,3 @@\n-     * upon successful completion of the computation.\n+     * upon successful completion of the computation. Invocation in\n+     * other contexts has undefined effects. Any override of this\n+     * method in subclasses should include {@code super.set(v)}.\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/FutureTask.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,2 +50,3 @@\n-     * Sets this Future to the result of its computation\n-     * unless it has been cancelled.\n+     * Sets this Future to the result of its computation unless it has\n+     * been cancelled (or has already been invoked, in which case\n+     * effects are undefined).\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/RunnableFuture.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -43,4 +43,6 @@\n- * and return a task object that can be used to cancel or check\n- * execution. The {@code scheduleAtFixedRate} and\n- * {@code scheduleWithFixedDelay} methods create and execute tasks\n- * that run periodically until cancelled.\n+ * and return {@link ScheduledFuture} objects that can be used to cancel or check\n+ * execution. When delays elapse, tasks are enabled for execution and\n+ * behave in accord with other {@link ExecutorService} tasks, except\n+ * that {@code scheduleAtFixedRate} and {@code scheduleWithFixedDelay}\n+ * methods create and execute tasks that run periodically until\n+ * cancelled.\n@@ -94,1 +96,1 @@\n-     * Submits a one-shot task that becomes enabled after the given delay.\n+     * Submits a one-shot task that becomes enabled for execution after the given delay.\n@@ -110,1 +112,1 @@\n-     * Submits a value-returning one-shot task that becomes enabled\n+     * Submits a value-returning one-shot task that becomes enabled for execution\n@@ -126,1 +128,1 @@\n-     * Submits a periodic action that becomes enabled first after the\n+     * Submits a periodic action that becomes enabled for execution first after the\n@@ -170,1 +172,1 @@\n-     * Submits a periodic action that becomes enabled first after the\n+     * Submits a periodic action that becomes enabled for execution first after the\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ScheduledExecutorService.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n- * <p>Delayed tasks execute no sooner than they are enabled, but\n+ * <p>Delayed tasks execute no sooner than they are enabled for execution, but\n@@ -571,1 +571,1 @@\n-     * Submits a periodic action that becomes enabled first after the\n+     * Submits a periodic action that becomes enabled for execution first after the\n@@ -624,1 +624,1 @@\n-     * Submits a periodic action that becomes enabled first after the\n+     * Submits a periodic action that becomes enabled for execution first after the\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ScheduledThreadPoolExecutor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -165,1 +165,0 @@\n- *     subscription.request(1);\n@@ -167,0 +166,1 @@\n+ *     subscription.request(1);\n@@ -605,3 +605,5 @@\n-     * subscribers, and disallows subsequent attempts to publish.\n-     * Upon return, this method does <em>NOT<\/em> guarantee that all\n-     * subscribers have yet completed.\n+     * subscribers, and disallows subsequent attempts to publish. To\n+     * ensure uniform ordering among subscribers, this method may\n+     * await completion of in-progress offers.  Upon return, this\n+     * method does <em>NOT<\/em> guarantee that all subscribers have\n+     * yet completed.\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/SubmissionPublisher.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -401,0 +401,2 @@\n+     * @throws  IllegalMonitorStateException  if the current thread is not\n+     *               the owner of the object's monitor.\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/TimeUnit.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,4 +49,5 @@\n- * designated {@code volatile int} fields of designated classes.\n- * This class is designed for use in atomic data structures in which\n- * several fields of the same node are independently subject to atomic\n- * updates.\n+ * designated non-static {@code volatile int} fields of designated\n+ * classes, providing a subset of the functionality of class {@link\n+ * VarHandle} that should be used instead.  This class is designed for\n+ * use in atomic data structures in which several fields of the same\n+ * node are independently subject to atomic updates.\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicIntegerFieldUpdater.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -49,4 +49,5 @@\n- * designated {@code volatile long} fields of designated classes.\n- * This class is designed for use in atomic data structures in which\n- * several fields of the same node are independently subject to atomic\n- * updates.\n+ * designated non-static {@code volatile long} fields of designated\n+ * classes, providing a subset of the functionality of class {@link\n+ * VarHandle} that should be used instead.  This class is designed for\n+ * use in atomic data structures in which several fields of the same\n+ * node are independently subject to atomic updates.\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicLongFieldUpdater.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -49,5 +49,6 @@\n- * designated {@code volatile} reference fields of designated\n- * classes.  This class is designed for use in atomic data structures\n- * in which several reference fields of the same node are\n- * independently subject to atomic updates. For example, a tree node\n- * might be declared as\n+ * designated non-static {@code volatile} reference fields of\n+ * designated classes, providing a subset of the functionality of\n+ * class {@link VarHandle} that should be used instead.  This class\n+ * may be used in atomic data structures in which several reference\n+ * fields of the same node are independently subject to atomic\n+ * updates. For example, a tree node might be declared as\n@@ -71,0 +72,20 @@\n+ * However, it is preferable to use {@link VarHandle}:\n+ * <pre> {@code\n+ * import java.lang.invoke.VarHandle;\n+ * import java.lang.invoke.MethodHandles;\n+ * class Node {\n+ *  private volatile Node left, right;\n+ *  private static final VarHandle LEFT, RIGHT;\n+ *  Node getLeft() { return left; }\n+ *  boolean compareAndSetLeft(Node expect, Node update) {\n+ *    return LEFT.compareAndSet(this, expect, update);\n+ *  }\n+ *  \/\/ ... and so on\n+ *  static { try {\n+ *    MethodHandles.Lookup l = MethodHandles.lookup();\n+ *    LEFT  = l.findVarHandle(Node.class, \"left\", Node.class);\n+ *    RIGHT = l.findVarHandle(Node.class, \"right\", Node.class);\n+ *   } catch (ReflectiveOperationException e) {\n+ *     throw new ExceptionInInitializerError(e);\n+ * }}}}<\/pre>\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicReferenceFieldUpdater.java","additions":26,"deletions":5,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -100,0 +100,4 @@\n+ * <p>Note: If you do not rely on reentrancy, you may find that {@link\n+ * StampedLock} offers better performance, as in: {@code ReadWriteLock\n+ * lock = new StampedLock().asReadWriteLock()}.\n+ *\n@@ -737,1 +741,1 @@\n-         * another thread and returns immediately.\n+         * any thread and returns immediately.\n@@ -739,3 +743,5 @@\n-         * <p>If the write lock is held by another thread then\n-         * the current thread becomes disabled for thread scheduling\n-         * purposes and lies dormant until the read lock has been acquired.\n+         * <p>If the write lock is held by any thread or the fairness\n+         * policy prohibits acquisition of the read lock at this time,\n+         * then the current thread becomes disabled for thread\n+         * scheduling purposes and lies dormant until the read lock\n+         * has been acquired.\n@@ -752,1 +758,1 @@\n-         * by another thread and returns immediately.\n+         * by any thread and returns immediately.\n@@ -754,3 +760,5 @@\n-         * <p>If the write lock is held by another thread then the\n-         * current thread becomes disabled for thread scheduling\n-         * purposes and lies dormant until one of two things happens:\n+         * <p>If the write lock is held by any thread or the fairness\n+         * policy prohibits acquisition of the read lock at this time,\n+         * then the current thread becomes disabled for thread\n+         * scheduling purposes and lies dormant until one of two\n+         * things happens:\n@@ -797,1 +805,1 @@\n-         * another thread and returns immediately with the value\n+         * any thread and returns immediately with the value\n@@ -809,1 +817,1 @@\n-         * <p>If the write lock is held by another thread then\n+         * <p>If the write lock is held by any thread then\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock.java","additions":18,"deletions":10,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -225,1 +225,3 @@\n- * <\/ul>\n+ * <li> These properties extend to other iteration-based\n+ * operations. In particular, {@link Object#equals} is almost never\n+ * useful unless both collections are known to be quiescent.  <\/ul>\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/package-info.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}