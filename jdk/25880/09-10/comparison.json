{"files":[{"patch":"@@ -101,5 +101,6 @@\n- * cause. This distinguishes exceptions in an action itself from those\n- * it depends on. If they are to be handled in the same way, instead\n- * catch {@link RuntimeException}.  If a stage is dependent\n- * on <em>both<\/em> of two stages, and both complete exceptionally,\n- * then the CompletionException may correspond to either one of these\n+ * cause. This convention distinguishes exceptions in an action itself\n+ * from those it depends on. If they are to be handled in the same\n+ * way, instead catch {@link RuntimeException} (possibly inspecting\n+ * the exception's {@code getCause()}).  If a stage is dependent on\n+ * <em>both<\/em> of two stages, and both complete exceptionally, then\n+ * the CompletionException may correspond to either one of these\n@@ -114,1 +115,4 @@\n- * to the dependent stage.\n+ * to the dependent stage. Applications are encouraged to maintain\n+ * these conventions, avoiding unnecessary nesting when rethrowing, as\n+ * in {@code throw (ex instanceof CompletionException) ? ex : new\n+ * CompletionException(ex)}.\n@@ -152,4 +156,5 @@\n- * submission of a computation producing a {@code CompletionStage}\n- * <i>happen-before<\/i> that computation begins. And actions taken by\n- * {@code CompletionStage x} <i>happen-before<\/i> actions of any\n- * dependent stage subsequent to {@code x}'s completion.\n+ * submission of a computation producing a {@code CompletionStage} <a\n+ * href=\"package-summary.html#MemoryVisibility\"><i>happen-before<\/i><\/a>\n+ * that computation begins. And actions taken by {@code\n+ * CompletionStage x} <i>happen-before<\/i> actions of any dependent\n+ * stage subsequent to {@code x}'s completion.\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CompletionStage.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"}]}