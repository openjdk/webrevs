{"files":[{"patch":"@@ -46,1 +46,1 @@\n- * A stage completes upon termination of its computation, but this may\n+ * A stage completes upon termination of its computation, which may\n@@ -100,12 +100,15 @@\n- * {@link CompletionException} holding the exception as its cause.  If\n- * a stage is dependent on <em>both<\/em> of two stages, and both\n- * complete exceptionally, then the CompletionException may correspond\n- * to either one of these exceptions.  If a stage is dependent on\n- * <em>either<\/em> of two others, and only one of them completes\n- * exceptionally, no guarantees are made about whether the dependent\n- * stage completes normally or exceptionally. In the case of method\n- * {@code whenComplete}, when the supplied action itself encounters an\n- * exception, then the stage completes exceptionally with this\n- * exception unless the source stage also completed exceptionally, in\n- * which case the exceptional completion from the source stage is\n- * given preference and propagated to the dependent stage.\n+ * {@link CompletionException} holding the exception as its\n+ * cause. This distinguishes exceptions in an action itself from those\n+ * it depends on. If you want them handled in the same way, you might\n+ * choose to catch {@link RuntimeException}.  If a stage is dependent\n+ * on <em>both<\/em> of two stages, and both complete exceptionally,\n+ * then the CompletionException may correspond to either one of these\n+ * exceptions.  If a stage is dependent on <em>either<\/em> of two\n+ * others, and only one of them completes exceptionally, no guarantees\n+ * are made about whether the dependent stage completes normally or\n+ * exceptionally. In the case of method {@code whenComplete}, when the\n+ * supplied action itself encounters an exception, then the stage\n+ * completes exceptionally with that exception unless the source stage\n+ * also completed exceptionally, in which case the exceptional\n+ * completion from the source stage is given preference and propagated\n+ * to the dependent stage.\n@@ -140,1 +143,1 @@\n- * <p>This interface does not define methods for initially creating,\n+ * <p>The {@code CompletionStage} interface does not define methods for initially creating,\n@@ -148,0 +151,6 @@\n+ * <p>Memory consistency effects: Actions in a thread prior to the\n+ * submission of a computation producing a {@code CompletionStage}\n+ * <i>happen-before<\/I> that computation begins. And actions taken by\n+ * a {@code CompletionStage} <i>happen-before<\/i> actions of any\n+ * dependent stage subsequent to its completion.\n+ *\n@@ -156,2 +165,2 @@\n-     * Returns a new CompletionStage that, when this stage completes\n-     * normally, is executed with this stage's result as the argument\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n+     * normally, is executed with {@code this} stage's result as the argument\n@@ -175,3 +184,3 @@\n-     * Returns a new CompletionStage that, when this stage completes\n-     * normally, is executed using this stage's default asynchronous\n-     * execution facility, with this stage's result as the argument to\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n+     * normally, is executed using {@code this} stage's default asynchronous\n+     * execution facility, with {@code this} stage's result as the argument to\n@@ -192,2 +201,2 @@\n-     * Returns a new CompletionStage that, when this stage completes\n-     * normally, is executed using the supplied Executor, with this\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n+     * normally, is executed using the supplied Executor, with {@code this}\n@@ -210,2 +219,2 @@\n-     * Returns a new CompletionStage that, when this stage completes\n-     * normally, is executed with this stage's result as the argument\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n+     * normally, is executed with {@code this} stage's result as the argument\n@@ -224,3 +233,3 @@\n-     * Returns a new CompletionStage that, when this stage completes\n-     * normally, is executed using this stage's default asynchronous\n-     * execution facility, with this stage's result as the argument to\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n+     * normally, is executed using {@code this} stage's default asynchronous\n+     * execution facility, with {@code this} stage's result as the argument to\n@@ -239,2 +248,2 @@\n-     * Returns a new CompletionStage that, when this stage completes\n-     * normally, is executed using the supplied Executor, with this\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n+     * normally, is executed using the supplied Executor, with {@code this}\n@@ -254,1 +263,1 @@\n-     * Returns a new CompletionStage that, when this stage completes\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n@@ -267,2 +276,2 @@\n-     * Returns a new CompletionStage that, when this stage completes\n-     * normally, executes the given action using this stage's default\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n+     * normally, executes the given action using {@code this} stage's default\n@@ -281,1 +290,1 @@\n-     * Returns a new CompletionStage that, when this stage completes\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n@@ -296,1 +305,1 @@\n-     * Returns a new CompletionStage that, when this and the other\n+     * Returns a new CompletionStage that, when {@code this} and the other\n@@ -315,2 +324,2 @@\n-     * Returns a new CompletionStage that, when this and the other\n-     * given stage both complete normally, is executed using this\n+     * Returns a new CompletionStage that, when {@code this} and the other\n+     * given stage both complete normally, is executed using {@code this}\n@@ -335,1 +344,1 @@\n-     * Returns a new CompletionStage that, when this and the other\n+     * Returns a new CompletionStage that, when {@code this} and the other\n@@ -357,1 +366,1 @@\n-     * Returns a new CompletionStage that, when this and the other\n+     * Returns a new CompletionStage that, when {@code this} and the other\n@@ -375,2 +384,2 @@\n-     * Returns a new CompletionStage that, when this and the other\n-     * given stage both complete normally, is executed using this\n+     * Returns a new CompletionStage that, when {@code this} and the other\n+     * given stage both complete normally, is executed using {@code this}\n@@ -394,1 +403,1 @@\n-     * Returns a new CompletionStage that, when this and the other\n+     * Returns a new CompletionStage that, when {@code this} and the other\n@@ -415,1 +424,1 @@\n-     * Returns a new CompletionStage that, when this and the other\n+     * Returns a new CompletionStage that, when {@code this} and the other\n@@ -429,1 +438,1 @@\n-     * Returns a new CompletionStage that, when this and the other\n+     * Returns a new CompletionStage that, when {@code this} and the other\n@@ -431,1 +440,1 @@\n-     * using this stage's default asynchronous execution facility.\n+     * using {@code this} stage's default asynchronous execution facility.\n@@ -445,1 +454,1 @@\n-     * Returns a new CompletionStage that, when this and the other\n+     * Returns a new CompletionStage that, when {@code this} and the other\n@@ -462,1 +471,1 @@\n-     * Returns a new CompletionStage that, when either this or the\n+     * Returns a new CompletionStage that, when either {@code this} or the\n@@ -480,2 +489,2 @@\n-     * Returns a new CompletionStage that, when either this or the\n-     * other given stage complete normally, is executed using this\n+     * Returns a new CompletionStage that, when either {@code this} or the\n+     * other given stage complete normally, is executed using {@code this}\n@@ -499,1 +508,1 @@\n-     * Returns a new CompletionStage that, when either this or the\n+     * Returns a new CompletionStage that, when either {@code this} or the\n@@ -520,1 +529,1 @@\n-     * Returns a new CompletionStage that, when either this or the\n+     * Returns a new CompletionStage that, when either {@code this} or the\n@@ -537,2 +546,2 @@\n-     * Returns a new CompletionStage that, when either this or the\n-     * other given stage complete normally, is executed using this\n+     * Returns a new CompletionStage that, when either {@code this} or the\n+     * other given stage complete normally, is executed using {@code this}\n@@ -555,1 +564,1 @@\n-     * Returns a new CompletionStage that, when either this or the\n+     * Returns a new CompletionStage that, when either {@code this} or the\n@@ -575,1 +584,1 @@\n-     * Returns a new CompletionStage that, when either this or the\n+     * Returns a new CompletionStage that, when either {@code this} or the\n@@ -590,1 +599,1 @@\n-     * Returns a new CompletionStage that, when either this or the\n+     * Returns a new CompletionStage that, when either {@code this} or the\n@@ -592,1 +601,1 @@\n-     * using this stage's default asynchronous execution facility.\n+     * using {@code this} stage's default asynchronous execution facility.\n@@ -607,1 +616,1 @@\n-     * Returns a new CompletionStage that, when either this or the\n+     * Returns a new CompletionStage that, when either {@code this} or the\n@@ -629,2 +638,2 @@\n-     * <p>When this stage completes normally, the given function is\n-     * invoked with this stage's result as the argument, returning\n+     * <p>When {@code this} stage completes normally, the given function is\n+     * invoked with {@code this} stage's result as the argument, returning\n@@ -632,1 +641,1 @@\n-     * the CompletionStage returned by this method is completed with\n+     * the CompletionStage returned is completed with\n@@ -655,1 +664,1 @@\n-     * executed using this stage's default asynchronous execution\n+     * executed using {@code this} stage's default asynchronous execution\n@@ -658,2 +667,2 @@\n-     * <p>When this stage completes normally, the given function is\n-     * invoked with this stage's result as the argument, returning\n+     * <p>When {@code this} stage completes normally, the given function is\n+     * invoked with {@code this} stage's result as the argument, returning\n@@ -661,1 +670,1 @@\n-     * the CompletionStage returned by this method is completed with\n+     * the CompletionStage returned is completed with\n@@ -682,2 +691,2 @@\n-     * <p>When this stage completes normally, the given function is\n-     * invoked with this stage's result as the argument, returning\n+     * <p>When {@code this} stage completes normally, the given function is\n+     * invoked with {@code this} stage's result as the argument, returning\n@@ -685,1 +694,1 @@\n-     * the CompletionStage returned by this method is completed with\n+     * the CompletionStage returned by {@code this} method is completed with\n@@ -704,2 +713,2 @@\n-     * Returns a new CompletionStage that, when this stage completes\n-     * either normally or exceptionally, is executed with this stage's\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n+     * either normally or exceptionally, is executed with {@code this} stage's\n@@ -708,1 +717,1 @@\n-     * <p>When this stage is complete, the given function is invoked\n+     * <p>When {@code this} stage is complete, the given function is invoked\n@@ -710,1 +719,1 @@\n-     * {@code null} if none) of this stage as arguments, and the\n+     * {@code null} if none) of {@code this} stage as arguments, and the\n@@ -722,3 +731,3 @@\n-     * Returns a new CompletionStage that, when this stage completes\n-     * either normally or exceptionally, is executed using this stage's\n-     * default asynchronous execution facility, with this stage's\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n+     * either normally or exceptionally, is executed using {@code this} stage's\n+     * default asynchronous execution facility, with {@code this} stage's\n@@ -727,1 +736,1 @@\n-     * <p>When this stage is complete, the given function is invoked\n+     * <p>When {@code this} stage is complete, the given function is invoked\n@@ -729,1 +738,1 @@\n-     * {@code null} if none) of this stage as arguments, and the\n+     * {@code null} if none) of {@code this} stage as arguments, and the\n@@ -741,1 +750,1 @@\n-     * Returns a new CompletionStage that, when this stage completes\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n@@ -743,1 +752,1 @@\n-     * supplied executor, with this stage's result and exception as\n+     * supplied executor, with {@code this} stage's result and exception as\n@@ -746,1 +755,1 @@\n-     * <p>When this stage is complete, the given function is invoked\n+     * <p>When {@code this} stage is complete, the given function is invoked\n@@ -748,1 +757,1 @@\n-     * {@code null} if none) of this stage as arguments, and the\n+     * {@code null} if none) of {@code this} stage as arguments, and the\n@@ -763,1 +772,1 @@\n-     * this stage, that executes the given action when this stage completes.\n+     * {@code this} stage, that executes the given action when {@code this} stage completes.\n@@ -765,1 +774,1 @@\n-     * <p>When this stage is complete, the given action is invoked\n+     * <p>When {@code this} stage is complete, the given action is invoked\n@@ -767,1 +776,1 @@\n-     * {@code null} if none) of this stage as arguments.  The returned\n+     * {@code null} if none) of {@code this} stage as arguments.  The returned\n@@ -771,1 +780,1 @@\n-     * this method is not designed to translate completion outcomes,\n+     * method {@code whenComplete} is not designed to translate completion outcomes,\n@@ -773,1 +782,1 @@\n-     * if it does, the following rules apply: if this stage completed\n+     * if it does, the following rules apply: if {@code this} stage completed\n@@ -776,1 +785,1 @@\n-     * action's exception. Or, if this stage completed exceptionally\n+     * action's exception. Or, if {@code this} stage completed exceptionally\n@@ -778,1 +787,1 @@\n-     * stage completes exceptionally with this stage's exception.\n+     * stage completes exceptionally with {@code this} stage's exception.\n@@ -788,2 +797,2 @@\n-     * this stage, that executes the given action using this stage's\n-     * default asynchronous execution facility when this stage completes.\n+     * {@code this} stage, that executes the given action using {@code this} stage's\n+     * default asynchronous execution facility when {@code this} stage completes.\n@@ -791,1 +800,1 @@\n-     * <p>When this stage is complete, the given action is invoked with the\n+     * <p>When {@code this} stage is complete, the given action is invoked with the\n@@ -793,1 +802,1 @@\n-     * if none) of this stage as arguments.  The returned stage is completed\n+     * if none) of {@code this} stage as arguments.  The returned stage is completed\n@@ -797,1 +806,1 @@\n-     * this method is not designed to translate completion outcomes,\n+     * method {@code whenCompleteAsync} is not designed to translate completion outcomes,\n@@ -799,1 +808,1 @@\n-     * if it does, the following rules apply: If this stage completed\n+     * if it does, the following rules apply: If {@code this} stage completed\n@@ -802,1 +811,1 @@\n-     * action's exception. Or, if this stage completed exceptionally\n+     * action's exception. Or, if {@code this} stage completed exceptionally\n@@ -804,1 +813,1 @@\n-     * stage completes exceptionally with this stage's exception.\n+     * stage completes exceptionally with {@code this} stage's exception.\n@@ -814,2 +823,2 @@\n-     * this stage, that executes the given action using the supplied\n-     * Executor when this stage completes.\n+     * {@code this} stage, that executes the given action using the supplied\n+     * Executor when {@code this} stage completes.\n@@ -817,1 +826,1 @@\n-     * <p>When this stage is complete, the given action is invoked with the\n+     * <p>When {@code this} stage is complete, the given action is invoked with the\n@@ -819,1 +828,1 @@\n-     * if none) of this stage as arguments.  The returned stage is completed\n+     * if none) of {@code this} stage as arguments.  The returned stage is completed\n@@ -823,1 +832,1 @@\n-     * this method is not designed to translate completion outcomes,\n+     * method {@code whenCompleteAsync} is not designed to translate completion outcomes,\n@@ -825,1 +834,1 @@\n-     * if it does, the following rules apply: If this stage completed\n+     * if it does, the following rules apply: If {@code this} stage completed\n@@ -828,1 +837,1 @@\n-     * action's exception. Or, if this stage completed exceptionally\n+     * action's exception. Or, if {@code this} stage completed exceptionally\n@@ -830,1 +839,1 @@\n-     * stage completes exceptionally with this stage's exception.\n+     * stage completes exceptionally with {@code this} stage's exception.\n@@ -841,3 +850,3 @@\n-     * Returns a new CompletionStage that, when this stage completes\n-     * exceptionally, is executed with this stage's exception as the\n-     * argument to the supplied function.  Otherwise, if this stage\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n+     * exceptionally, is executed with {@code this} stage's exception as the\n+     * argument to the supplied function.  Otherwise, if {@code this} stage\n@@ -848,1 +857,1 @@\n-     * returned CompletionStage if this CompletionStage completed\n+     * returned CompletionStage if {@code this} CompletionStage completed\n@@ -856,4 +865,4 @@\n-     * Returns a new CompletionStage that, when this stage completes\n-     * exceptionally, is executed with this stage's exception as the\n-     * argument to the supplied function, using this stage's default\n-     * asynchronous execution facility.  Otherwise, if this stage\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n+     * exceptionally, is executed with {@code this} stage's exception as the\n+     * argument to the supplied function, using {@code this} stage's default\n+     * asynchronous execution facility.  Otherwise, if {@code this} stage\n@@ -868,1 +877,1 @@\n-     * returned CompletionStage if this CompletionStage completed\n+     * returned CompletionStage if {@code this} CompletionStage completed\n@@ -882,2 +891,2 @@\n-     * Returns a new CompletionStage that, when this stage completes\n-     * exceptionally, is executed with this stage's exception as the\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n+     * exceptionally, is executed with {@code this} stage's exception as the\n@@ -885,1 +894,1 @@\n-     * Otherwise, if this stage completes normally, then the returned\n+     * Otherwise, if {@code this} stage completes normally, then the returned\n@@ -893,1 +902,1 @@\n-     * returned CompletionStage if this CompletionStage completed\n+     * returned CompletionStage if {@code this} CompletionStage completed\n@@ -908,1 +917,1 @@\n-     * Returns a new CompletionStage that, when this stage completes\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n@@ -910,1 +919,1 @@\n-     * function applied to this stage's exception.\n+     * function applied to {@code this} stage's exception.\n@@ -917,1 +926,1 @@\n-     * CompletionStage if this CompletionStage completed exceptionally\n+     * CompletionStage if {@code this} CompletionStage completed exceptionally\n@@ -930,1 +939,1 @@\n-     * Returns a new CompletionStage that, when this stage completes\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n@@ -932,1 +941,1 @@\n-     * function applied to this stage's exception, using this stage's\n+     * function applied to {@code this} stage's exception, using {@code this} stage's\n@@ -940,1 +949,1 @@\n-     * CompletionStage if this CompletionStage completed exceptionally\n+     * CompletionStage if {@code this} CompletionStage completed exceptionally\n@@ -954,1 +963,1 @@\n-     * Returns a new CompletionStage that, when this stage completes\n+     * Returns a new CompletionStage that, when {@code this} stage completes\n@@ -956,1 +965,1 @@\n-     * function applied to this stage's exception, using the\n+     * function applied to {@code this} stage's exception, using the\n@@ -964,1 +973,1 @@\n-     * CompletionStage if this CompletionStage completed exceptionally\n+     * CompletionStage if {@code this} CompletionStage completed exceptionally\n@@ -981,3 +990,3 @@\n-     * completion properties as this stage. If this stage is already a\n-     * CompletableFuture, this method may return this stage itself.\n-     * Otherwise, invocation of this method may be equivalent in\n+     * completion properties as {@code this} stage. If {@code this} stage is already a\n+     * CompletableFuture, method {@code toCompletableFuture} may return {@code this} stage itself.\n+     * Otherwise, invocation may be equivalent in\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CompletionStage.java","additions":136,"deletions":127,"binary":false,"changes":263,"status":"modified"},{"patch":"@@ -63,1 +63,2 @@\n- * SubmissionPublisher}).\n+ * SubmissionPublisher}), and omits some error processing needed to\n+ * fully conform to ReactiveStream rules.\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/Flow.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n- * actions become <em>enabled<\/em> and behave as ordinary submitted\n+ * actions become <em>enabled<\/em> for execution and behave as ordinary submitted\n@@ -156,1 +156,1 @@\n- * do not include scheduled tasks that are not yet enabled to execute,\n+ * do not include scheduled tasks that are not yet enabled for execution,\n@@ -3508,1 +3508,1 @@\n-     * Submits a one-shot task that becomes enabled after the given\n+     * Submits a one-shot task that becomes enabled for execution after the given\n@@ -3536,1 +3536,1 @@\n-     * Submits a value-returning one-shot task that becomes enabled\n+     * Submits a value-returning one-shot task that becomes enabled for execution\n@@ -3565,1 +3565,1 @@\n-     * Submits a periodic action that becomes enabled first after the\n+     * Submits a periodic action that becomes enabled for execution first after the\n@@ -3619,1 +3619,1 @@\n-     * Submits a periodic action that becomes enabled first after the\n+     * Submits a periodic action that becomes enabled for execution first after the\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -44,3 +44,5 @@\n- * execution. The {@code scheduleAtFixedRate} and\n- * {@code scheduleWithFixedDelay} methods create and execute tasks\n- * that run periodically until cancelled.\n+ * execution. When delays elapse, tasks are enabled for execution and\n+ * behave in accord with other {@link ExecutorService} tasks, except\n+ * that {@code scheduleAtFixedRate} and {@code scheduleWithFixedDelay}\n+ * methods create and execute tasks that run periodically until\n+ * cancelled.\n@@ -94,1 +96,1 @@\n-     * Submits a one-shot task that becomes enabled after the given delay.\n+     * Submits a one-shot task that becomes enabled for execution after the given delay.\n@@ -110,1 +112,1 @@\n-     * Submits a value-returning one-shot task that becomes enabled\n+     * Submits a value-returning one-shot task that becomes enabled for execution\n@@ -126,1 +128,1 @@\n-     * Submits a periodic action that becomes enabled first after the\n+     * Submits a periodic action that becomes enabled for execution first after the\n@@ -170,1 +172,1 @@\n-     * Submits a periodic action that becomes enabled first after the\n+     * Submits a periodic action that becomes enabled for execution first after the\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ScheduledExecutorService.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n- * <p>Delayed tasks execute no sooner than they are enabled, but\n+ * <p>Delayed tasks execute no sooner than they are enabled for execution, but\n@@ -571,1 +571,1 @@\n-     * Submits a periodic action that becomes enabled first after the\n+     * Submits a periodic action that becomes enabled for execution first after the\n@@ -624,1 +624,1 @@\n-     * Submits a periodic action that becomes enabled first after the\n+     * Submits a periodic action that becomes enabled for execution first after the\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ScheduledThreadPoolExecutor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -165,1 +165,0 @@\n- *     subscription.request(1);\n@@ -167,0 +166,1 @@\n+ *     subscription.request(1);\n@@ -605,3 +605,5 @@\n-     * subscribers, and disallows subsequent attempts to publish.\n-     * Upon return, this method does <em>NOT<\/em> guarantee that all\n-     * subscribers have yet completed.\n+     * subscribers, and disallows subsequent attempts to publish. To\n+     * ensure uniform ordering among subscribers, this method may\n+     * await completion of in-progress offer.  Upon return, this\n+     * method does <em>NOT<\/em> guarantee that all subscribers have\n+     * yet completed.\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/SubmissionPublisher.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n- * designated {@code volatile} reference fields of designated\n+ * designated non-static {@code volatile} reference fields of designated\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicReferenceFieldUpdater.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}