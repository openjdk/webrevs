{"files":[{"patch":"@@ -45,2 +45,1 @@\n- * |+16                | padding              | For alignment  |\n- * |+sizeof(void*)     | <size_t:user_size>   | User data size |\n+ * |+GUARD_SIZE        | <size_t:user_size>   | User data size |\n@@ -137,3 +136,4 @@\n-   * NB: the size of the GuardHeader must be such that the user-ptr\n-   * is maximally aligned i.e. 16-byte alignment for x86 ABI for\n-   * stack alignment and use of vector (xmm) instructions.\n+   * NB: the size and placement of the GuardHeader must be such that the\n+   * user-ptr is maximally aligned i.e. 16-byte alignment for x86 ABI for\n+   * stack alignment and use of vector (xmm) instructions. We use alignas\n+   * to achieve this,\n@@ -141,1 +141,1 @@\n-  class GuardHeader : Guard {\n+  class alignas(16) GuardHeader : Guard {\n@@ -143,3 +143,0 @@\n-\n-    void* padding; \/\/ Ensures 16-byte alignment\n-\n@@ -164,3 +161,0 @@\n-  static_assert(sizeof(GuardHeader) % 16 == 0,\n-                \"GuardHeader size must ensure _base_addr is 16-byte aligned\");\n-\n","filename":"src\/hotspot\/share\/memory\/guardedMemory.hpp","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"}]}