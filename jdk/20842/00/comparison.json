{"files":[{"patch":"@@ -37,2 +37,2 @@\n-static const int native_invoker_code_base_size = 512;\n-static const int native_invoker_size_per_arg = 8;\n+static const int native_invoker_code_base_size = 256;\n+static const int native_invoker_size_per_arg = 16;\n","filename":"src\/hotspot\/cpu\/x86\/downcallLinker_x86_64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestLargeStub\n+ * @run junit\/othervm --enable-native-access=ALL-UNNAMED TestLargeStub\n@@ -31,1 +31,4 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -36,0 +39,1 @@\n+import java.lang.foreign.ValueLayout;\n@@ -38,0 +42,2 @@\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n+\n@@ -40,0 +46,3 @@\n+    private static final int DOWNCALL_AVAILABLE_SLOTS = 248;\n+    private static final int UPCALL_AVAILABLE_SLOTS = 250;\n+\n@@ -45,2 +54,3 @@\n-    @Test\n-    public void testDowncall() {\n+    @ParameterizedTest\n+    @MethodSource(\"layouts\")\n+    public void testDowncall(ValueLayout layout, int numSlots) {\n@@ -50,1 +60,1 @@\n-                        Stream.generate(() -> C_DOUBLE).limit(124).toArray(MemoryLayout[]::new)),\n+                        Stream.generate(() -> layout).limit(DOWNCALL_AVAILABLE_SLOTS \/ numSlots).toArray(MemoryLayout[]::new)),\n@@ -65,2 +75,3 @@\n-    @Test\n-    public void testUpcall() {\n+    @ParameterizedTest\n+    @MethodSource(\"layouts\")\n+    public void testUpcall(ValueLayout layout, int numSlots) {\n@@ -70,1 +81,10 @@\n-                        Stream.generate(() -> C_DOUBLE).limit(125).toArray(MemoryLayout[]::new)));\n+                        Stream.generate(() -> layout).limit(UPCALL_AVAILABLE_SLOTS \/ numSlots).toArray(MemoryLayout[]::new)));\n+    }\n+\n+    private static Stream<Arguments> layouts() {\n+        return Stream.of(\n+            arguments(C_INT, 1),\n+            arguments(C_LONG_LONG, 2),\n+            arguments(C_FLOAT, 1),\n+            arguments(C_DOUBLE, 2)\n+        );\n","filename":"test\/jdk\/java\/foreign\/largestub\/TestLargeStub.java","additions":29,"deletions":9,"binary":false,"changes":38,"status":"modified"}]}