{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,0 +66,1 @@\n+    private static final String COMMON_SCRIPTS = \"COMMON_SCRIPTS\";\n@@ -68,1 +69,1 @@\n-            COMMANDS_INSTALL, COMMANDS_UNINSTALL, SCRIPTS);\n+            COMMANDS_INSTALL, COMMANDS_UNINSTALL, SCRIPTS, COMMON_SCRIPTS);\n@@ -232,2 +233,0 @@\n-        boolean needCleanupScripts = !associations.isEmpty();\n-\n@@ -244,4 +243,0 @@\n-            if (!integration.associations.isEmpty()) {\n-                needCleanupScripts = true;\n-            }\n-\n@@ -257,4 +252,2 @@\n-        if (needCleanupScripts) {\n-            \/\/ Pull in desktop_utils.sh scrips library.\n-            data.put(SCRIPTS, stringifyTextFile(\"desktop_utils.sh\"));\n-        }\n+        data.put(COMMON_SCRIPTS, stringifyTextFile(\"common_utils.sh\"));\n+        data.put(SCRIPTS, stringifyTextFile(\"desktop_utils.sh\"));\n@@ -298,1 +291,3 @@\n-            unregisterDesktopFileCmd = String.join(\" \", \"xdg-desktop-menu\",\n+            unregisterDesktopFileCmd = String.join(\" \",\n+                    \"do_if_file_belongs_to_single_package\", desktopFile.\n+                            installPath().toString(), \"xdg-desktop-menu\",\n@@ -306,2 +301,4 @@\n-            unregisterFileAssociationsCmd = String.join(\" \", \"xdg-mime\",\n-                    \"uninstall\", mimeInfoFile.installPath().toString());\n+            unregisterFileAssociationsCmd = String.join(\" \",\n+                    \"do_if_file_belongs_to_single_package\", mimeInfoFile.\n+                            installPath().toString(), \"xdg-mime\", \"uninstall\",\n+                    mimeInfoFile.installPath().toString());\n@@ -323,3 +320,5 @@\n-                    \"uninstall_default_mime_handler\",\n-                    desktopFile.installPath().getFileName().toString(),\n-                    String.join(\" \", getMimeTypeNamesFromFileAssociations()));\n+                    \"do_if_file_belongs_to_single_package\", desktopFile.\n+                            installPath().toString(),\n+                    \"desktop_uninstall_default_mime_handler\", desktopFile.\n+                            installPath().getFileName().toString(), String.join(\n+                            \" \", getMimeTypeNamesFromFileAssociations()));\n@@ -331,4 +330,0 @@\n-        void addIcon(String mimeType, Path iconFile) {\n-            addIcon(mimeType, iconFile, getSquareSizeOfImage(iconFile.toFile()));\n-        }\n-\n@@ -341,2 +336,4 @@\n-            unregisterIconCmds.add(String.join(\" \", \"xdg-icon-resource\",\n-                    \"uninstall\", dashMime, \"--size\", Integer.toString(imgSize)));\n+            unregisterIconCmds.add(String.join(\" \",\n+                    \"do_if_file_belongs_to_single_package\", iconFile.toString(),\n+                    \"xdg-icon-resource\", \"uninstall\", dashMime, \"--size\",\n+                    Integer.toString(imgSize)));\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/DesktopIntegration.java","additions":21,"deletions":24,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import java.util.ArrayList;\n+import java.util.Collections;\n@@ -45,0 +47,14 @@\n+    @Override\n+    protected List<String> replacementStringIds() {\n+        return LINUX_REPLACEMENT_STRING_IDS;\n+    }\n+\n+    @Override\n+    protected Map<String, String> createImpl() throws IOException {\n+        var data = super.createImpl();\n+        if (!data.isEmpty()) {\n+            data.put(COMMON_SCRIPTS, stringifyTextFile(\"common_utils.sh\"));\n+        }\n+        return data;\n+    }\n+\n@@ -48,1 +64,1 @@\n-            return ShellCustomAction.nop(REPLACEMENT_STRING_IDS);\n+            return ShellCustomAction.nop(LINUX_REPLACEMENT_STRING_IDS);\n@@ -87,0 +103,12 @@\n+\n+    private static final String COMMON_SCRIPTS = \"COMMON_SCRIPTS\";\n+\n+    private static final List<String> LINUX_REPLACEMENT_STRING_IDS;\n+\n+    static {\n+        ArrayList<String> buf = new ArrayList<>();\n+        buf.addAll(UnixLaunchersAsServices.REPLACEMENT_STRING_IDS);\n+        buf.add(COMMON_SCRIPTS);\n+\n+        LINUX_REPLACEMENT_STRING_IDS = Collections.unmodifiableList(buf);\n+    }\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/LinuxLaunchersAsServices.java","additions":30,"deletions":2,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -158,1 +158,2 @@\n-                data.putAll(ca.instance.create());\n+                ShellCustomAction.mergeReplacementData(data, ca.instance.\n+                        create());\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/LinuxPackageBundler.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,23 @@\n+file_belongs_to_single_package ()\n+{\n+  if [ ! -e \"$1\" ]; then\n+    false\n+  elif [ \"$package_type\" = rpm ]; then\n+    test `rpm -q --whatprovides \"$1\" | wc -l` = 1\n+  elif [ \"$package_type\" = deb ]; then\n+    test `dpkg -S \"$1\" | wc -l` = 1\n+  else\n+    exit 1\n+  fi\n+}\n+\n+\n+do_if_file_belongs_to_single_package ()\n+{\n+  local file=\"$1\"\n+  shift\n+\n+  if file_belongs_to_single_package \"$file\"; then\n+    \"$@\"\n+  fi\n+}\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/resources\/common_utils.sh","additions":23,"deletions":0,"binary":false,"changes":23,"status":"added"},{"patch":"@@ -5,1 +5,1 @@\n-_filter_out_default_mime_handler ()\n+desktop_filter_out_default_mime_handler ()\n@@ -53,1 +53,1 @@\n-_uninstall_default_mime_handler ()\n+desktop_uninstall_default_mime_handler_0 ()\n@@ -69,1 +69,1 @@\n-    _filter_out_default_mime_handler \"$desktop_file\" \"$mime\" \"$tmpfile1\" > \"$tmpfile2\"\n+    desktop_filter_out_default_mime_handler \"$desktop_file\" \"$mime\" \"$tmpfile1\" > \"$tmpfile2\"\n@@ -76,1 +76,1 @@\n-      trace Remove $desktop_file default handler for $mime mime type from $defaults_list file\n+      desktop_trace Remove $desktop_file default handler for $mime mime type from $defaults_list file\n@@ -82,1 +82,1 @@\n-    trace \"$defaults_list\" file updated\n+    desktop_trace \"$defaults_list\" file updated\n@@ -93,1 +93,1 @@\n-uninstall_default_mime_handler ()\n+desktop_uninstall_default_mime_handler ()\n@@ -96,1 +96,1 @@\n-    _uninstall_default_mime_handler \"$f\" \"$@\"\n+    desktop_uninstall_default_mime_handler_0 \"$f\" \"$@\"\n@@ -101,1 +101,1 @@\n-trace ()\n+desktop_trace ()\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/resources\/desktop_utils.sh","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -26,13 +26,0 @@\n-\n-file_belongs_to_single_package ()\n-{\n-  if [ ! -e \"$1\" ]; then\n-    false\n-  elif [ \"$package_type\" = rpm ]; then\n-    test `rpm -q --whatprovides \"$1\" | wc -l` = 1\n-  elif [ \"$package_type\" = deb ]; then\n-    test `dpkg -S \"$1\" | wc -l` = 1\n-  else\n-    exit 1\n-  fi\n-}\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/resources\/services_utils.sh","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -17,0 +17,1 @@\n+COMMON_SCRIPTS\n@@ -22,1 +23,1 @@\n-  true; LAUNCHER_AS_SERVICE_COMMANDS_UNINSTALL\n+  :; LAUNCHER_AS_SERVICE_COMMANDS_UNINSTALL\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/resources\/template.preinst","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -21,0 +21,1 @@\n+COMMON_SCRIPTS\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/resources\/template.prerm","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -86,0 +86,1 @@\n+COMMON_SCRIPTS\n@@ -87,2 +88,2 @@\n-if [ \"$1\" = 2 ]; then\n-  true; LAUNCHER_AS_SERVICE_COMMANDS_UNINSTALL\n+if [ \"$1\" -gt 1 ]; then\n+  :; LAUNCHER_AS_SERVICE_COMMANDS_UNINSTALL\n@@ -93,0 +94,1 @@\n+COMMON_SCRIPTS\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/resources\/template.spec","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import java.util.Objects;\n@@ -77,0 +78,20 @@\n+    static void mergeReplacementData(Map<String, String> target,\n+            Map<String, String> newValues) {\n+        Objects.requireNonNull(target);\n+        Objects.requireNonNull(newValues);\n+\n+        for (var kvp : newValues.entrySet()) {\n+            String newValue = kvp.getValue();\n+            String existingValue = target.putIfAbsent(kvp.getKey(), newValue);\n+            if (existingValue != null) {\n+                if (existingValue.isEmpty()) {\n+                    target.replace(kvp.getKey(), newValue);\n+                } else if (!newValue.isEmpty() && !newValue.\n+                        equals(existingValue)) {\n+                    throw new IllegalArgumentException(String.format(\n+                            \"Key [%s] value mismatch\", kvp.getKey()));\n+                }\n+            }\n+        }\n+    }\n+\n","filename":"src\/jdk.jpackage\/unix\/classes\/jdk\/jpackage\/internal\/ShellCustomAction.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,2 +68,2 @@\n-    final protected List<String> replacementStringIds() {\n-        return List.of(COMMANDS_INSTALL, COMMANDS_UNINSTALL, SCRIPTS);\n+    protected List<String> replacementStringIds() {\n+        return REPLACEMENT_STRING_IDS;\n@@ -73,1 +73,1 @@\n-    final protected Map<String, String> createImpl() throws IOException {\n+    protected Map<String, String> createImpl() throws IOException {\n@@ -90,5 +90,1 @@\n-        try {\n-            data.put(SCRIPTS, stringifyTextFile(\"services_utils.sh\"));\n-        } catch (IOException ex) {\n-            throw new RuntimeException(ex);\n-        }\n+        data.put(SCRIPTS, stringifyTextFile(\"services_utils.sh\"));\n","filename":"src\/jdk.jpackage\/unix\/classes\/jdk\/jpackage\/internal\/UnixLaunchersAsServices.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,0 +79,5 @@\n+    final public AdditionalLauncher setVerifyUninstalled(boolean value) {\n+        verifyUninstalled = value;\n+        return this;\n+    }\n+\n@@ -144,0 +149,7 @@\n+        if (verifyUninstalled) {\n+            test.addUninstallVerifier(this::verifyUninstalled);\n+        }\n+    }\n+\n+    final public void verifyRemovedInUpgrade(PackageTest test) {\n+        test.addInstallVerifier(this::verifyUninstalled);\n@@ -321,0 +333,29 @@\n+    private void verifyInstalled(JPackageCommand cmd, boolean installed) throws IOException {\n+        if (TKit.isLinux() && !cmd.isImagePackageType() && !cmd.\n+                isPackageUnpacked(String.format(\n+                        \"Not verifying package and system .desktop files for [%s] launcher\",\n+                        cmd.appLauncherPath(name)))) {\n+            Path packageDesktopFile = LinuxHelper.getDesktopFile(cmd, name);\n+            Path systemDesktopFile = LinuxHelper.getSystemDesktopFilesFolder().\n+                    resolve(packageDesktopFile.getFileName());\n+            if (Files.exists(packageDesktopFile) && installed) {\n+                TKit.assertFileExists(systemDesktopFile);\n+                TKit.assertStringListEquals(Files.readAllLines(\n+                        packageDesktopFile),\n+                        Files.readAllLines(systemDesktopFile), String.format(\n+                        \"Check [%s] and [%s] files are equal\",\n+                        packageDesktopFile,\n+                        systemDesktopFile));\n+            } else {\n+                TKit.assertPathExists(packageDesktopFile, false);\n+                TKit.assertPathExists(systemDesktopFile, false);\n+            }\n+        }\n+    }\n+\n+    protected void verifyUninstalled(JPackageCommand cmd) throws IOException {\n+        verifyInstalled(cmd, false);\n+        Path launcherPath = cmd.appLauncherPath(name);\n+        TKit.assertPathExists(launcherPath, false);\n+    }\n+\n@@ -325,0 +366,1 @@\n+        verifyInstalled(cmd, true);\n@@ -397,0 +439,1 @@\n+    private boolean verifyUninstalled;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/AdditionalLauncher.java","additions":44,"deletions":1,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import java.nio.file.FileSystemException;\n@@ -33,0 +34,1 @@\n+import java.util.function.Consumer;\n@@ -61,0 +63,5 @@\n+        public Builder setAdditionalLauncherCallback(Consumer<AdditionalLauncher> v) {\n+            additionalLauncherCallback = v;\n+            return this;\n+        }\n+\n@@ -64,1 +71,2 @@\n-                    expectedValue);\n+                    expectedValue,\n+                    launcherName != null ? additionalLauncherCallback : null);\n@@ -75,0 +83,1 @@\n+        private Consumer<AdditionalLauncher> additionalLauncherCallback;\n@@ -83,1 +92,2 @@\n-            String expectedArgValue) {\n+            String expectedArgValue,\n+            Consumer<AdditionalLauncher> additionalLauncherCallback) {\n@@ -87,0 +97,1 @@\n+        this.additionalLauncherCallback = additionalLauncherCallback;\n@@ -236,1 +247,1 @@\n-                TKit.deleteIfExists(outputFilePath);\n+                deleteOutputFile(outputFilePath);\n@@ -245,1 +256,1 @@\n-        new AdditionalLauncher(launcherName) {\n+        AdditionalLauncher al = new AdditionalLauncher(launcherName) {\n@@ -251,1 +262,1 @@\n-                    TKit.deleteIfExists(appOutputFilePathVerify(cmd));\n+                    deleteOutputFile(appOutputFilePathVerify(cmd));\n@@ -259,2 +270,20 @@\n-                .addDefaultArguments(expectedValue)\n-                .applyTo(pkg);\n+                .addDefaultArguments(expectedValue);\n+\n+        Optional.ofNullable(additionalLauncherCallback).ifPresent(v -> v.accept(al));\n+\n+        al.applyTo(pkg);\n+    }\n+\n+    private static void deleteOutputFile(Path file) throws IOException {\n+        try {\n+            TKit.deleteIfExists(file);\n+        } catch (FileSystemException ex) {\n+            if (TKit.isLinux() || TKit.isOSX()) {\n+                \/\/ Probably \"Operation no permitted\" error. Try with \"sudo\" as the\n+                \/\/ file is created by a launcher started under root account.\n+                Executor.of(\"sudo\", \"rm\", \"-f\").addArgument(file.toString()).\n+                        execute();\n+            } else {\n+                throw ex;\n+            }\n+        }\n@@ -340,0 +369,1 @@\n+    private final Consumer<AdditionalLauncher> additionalLauncherCallback;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LauncherAsServiceVerifier.java","additions":38,"deletions":8,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -467,1 +467,1 @@\n-    private static Path getSystemDesktopFilesFolder() {\n+    static Path getSystemDesktopFilesFolder() {\n@@ -561,1 +561,0 @@\n-                .filter(str -> str.startsWith(xdgCmdName))\n@@ -565,0 +564,2 @@\n+            scriptletBodyStream = scriptletBodyStream.filter(str -> str.\n+                    startsWith(xdgCmdName));\n@@ -567,0 +568,4 @@\n+        } else {\n+            scriptletBodyStream = scriptletBodyStream.filter(str -> str.\n+                    contains(xdgCmdName)).filter(str -> str.startsWith(\n+                    \"do_if_file_belongs_to_single_package\"));\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LinuxHelper.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Path;\n+import jdk.jpackage.test.AdditionalLauncher;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.LauncherAsServiceVerifier;\n+import jdk.jpackage.test.TKit;\n+\n+\/**\n+ * Test how services and desktop integration align together in the same package.\n+ * On Linux these features share common code in custom actions (common_utils.sh).\n+ * Test correctness of integration of this code.\n+ *\n+ * The test is not intended to be executed by SQE. It is for internal use only\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary jpackage with desktop integration and services on Linux\n+ * @library ..\/helpers\n+ * @key jpackagePlatformPackage\n+ * @requires jpackage.test.SQETest == null\n+ * @build jdk.jpackage.test.*\n+ * @requires (os.family == \"linux\")\n+ * @modules jdk.jpackage\/jdk.jpackage.internal\n+ * @compile ServiceAndDesktopTest.java\n+ * @run main\/othervm\/timeout=720 jdk.jpackage.test.Main\n+ *  --jpt-run=ServiceAndDesktopTest\n+ *\/\n+\n+public class ServiceAndDesktopTest {\n+\n+    @Test\n+    public static void test() {\n+        var pkg = new PackageTest()\n+                .configureHelloApp()\n+                .addBundleDesktopIntegrationVerifier(true)\n+                .addInitializer(cmd -> {\n+                    \/\/ Want a .desktop file for the main launcher\n+                    cmd.addArguments(\"--icon\", GOLDEN_ICON.toString());\n+                });\n+        LauncherAsServiceVerifier.build().setLauncherName(\"foo\").\n+                setExpectedValue(\"Fun\").setAdditionalLauncherCallback(al -> {\n+                    \/\/ Don't want .desktop file for service launcher\n+                    al.setNoIcon();\n+                }).applyTo(pkg);\n+        pkg.run();\n+    }\n+\n+    private final static Path GOLDEN_ICON = TKit.TEST_SRC_ROOT.resolve(Path.of(\n+            \"resources\", \"icon\" + TKit.ICON_SUFFIX));\n+}\n","filename":"test\/jdk\/tools\/jpackage\/linux\/ServiceAndDesktopTest.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.Map;\n+import java.nio.file.Path;\n+import jdk.jpackage.test.AdditionalLauncher;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.TKit;\n+\n+\/*\n+ * @test\n+ * @summary Linux upgrade testing\n+ * @library ..\/helpers\n+ * @key jpackagePlatformPackage\n+ * @build jdk.jpackage.test.*\n+ * @requires (os.family == \"linux\")\n+ * @modules jdk.jpackage\/jdk.jpackage.internal\n+ * @compile UpgradeTest.java\n+ * @run main\/othervm\/timeout=360 jdk.jpackage.test.Main\n+ *  --jpt-run=UpgradeTest\n+ *\/\n+public class UpgradeTest {\n+\n+    @Test\n+    public void testDesktopFiles() {\n+        \/\/ Create two packages with the same name but different versions.\n+        \/\/ The first will have `launcherA`, and `launcherB` additional launchers.\n+        \/\/ The second will have `launcherB`, and `launcherC` additional launchers.\n+        \/\/ Launchers are configured in a way to have correpsonding .desktop files.\n+        \/\/ These files will be installed in system directories.\n+        \/\/ After the upgrade `launcherA`-related files must be deleted and\n+        \/\/ `launcherB`-related files from the first package must be replaced with\n+        \/\/ the files from the second package.\n+        \/\/ Checks that correct files are installed in system directories\n+        \/\/ encapsulated in AdditionalLauncher class.\n+\n+        var pkg = createPackageTest().disablePackageUninstaller();\n+\n+        var alA = createAdditionalLauncher(\"launcherA\");\n+\n+        alA.applyTo(pkg);\n+        createAdditionalLauncher(\"launcherB\").addRawProperties(Map.entry(\n+                \"description\", \"Foo\")).applyTo(pkg);\n+\n+        var pkg2 = createPackageTest().addInitializer(cmd -> {\n+            cmd.addArguments(\"--app-version\", \"2.0\");\n+        });\n+\n+        alA.verifyRemovedInUpgrade(pkg2);\n+        createAdditionalLauncher(\"launcherB\").addRawProperties(Map.entry(\n+                \"description\", \"Bar\")).applyTo(pkg2);\n+        createAdditionalLauncher(\"launcherC\").applyTo(pkg2);\n+\n+        new PackageTest.Group(pkg, pkg2).run();\n+    }\n+\n+    private static PackageTest createPackageTest() {\n+        return new PackageTest().configureHelloApp().addInitializer(\n+                JPackageCommand::setInputToEmptyDirectory).addInitializer(\n+                        JPackageCommand::setFakeRuntime).\n+                addBundleDesktopIntegrationVerifier(true);\n+    }\n+\n+    private static AdditionalLauncher createAdditionalLauncher(String name) {\n+        \/\/ Configure additionl launcher in a way to trigger jpackage create\n+        \/\/ corresponding .desktop file.\n+        return new AdditionalLauncher(name).setIcon(GOLDEN_ICON);\n+    }\n+\n+    private final static Path GOLDEN_ICON = TKit.TEST_SRC_ROOT.resolve(Path.of(\n+            \"resources\", \"icon\" + TKit.ICON_SUFFIX));\n+}\n","filename":"test\/jdk\/tools\/jpackage\/linux\/UpgradeTest.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"}]}