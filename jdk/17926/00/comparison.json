{"files":[{"patch":"@@ -1737,0 +1737,15 @@\n+bool ShenandoahBarrierC2Support::merge_point_safe(Node* region) {\n+  for (DUIterator_Fast imax, i = region->fast_outs(imax); i < imax; i++) {\n+    Node* n = region->fast_out(i);\n+    if (n->is_LoadStore()) {\n+      \/\/ Splitting a LoadStore node through phi, causes it to lose its SCMemProj: the split if code doesn't have support\n+      \/\/ for a LoadStore at the region the if is split through because that's not expected to happen (LoadStore nodes\n+      \/\/ should be between barrier nodes). It does however happen with Shenandoah though because barriers can get\n+      \/\/ expanded around a LoadStore node.\n+      return false;\n+    }\n+  }\n+  return true;\n+}\n+\n+\n@@ -1741,1 +1756,1 @@\n-    if (phase->can_split_if(n_ctrl)) {\n+    if (phase->can_split_if(n_ctrl) && merge_point_safe(n_ctrl)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+  static bool merge_point_safe(Node* region);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3411,0 +3411,1 @@\n+          assert(!trailing_load_store(), \"load store node can't be eliminated\");\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8325372\n+ * @summary fusion of heap stable test causes GetAndSet node to be removed\n+ * @requires vm.gc.Shenandoah\n+ * @modules java.base\/jdk.internal.misc:+open\n+ *\n+ * @run main\/othervm -XX:+UseShenandoahGC -XX:-BackgroundCompilation TestUnsafeLoadStoreMergedHeapStableTests\n+ *\n+ *\n+ *\/\n+\n+import jdk.internal.misc.Unsafe;\n+\n+import java.lang.reflect.Field;\n+\n+public class TestUnsafeLoadStoreMergedHeapStableTests {\n+\n+    static final jdk.internal.misc.Unsafe UNSAFE = Unsafe.getUnsafe();\n+    static long F_OFFSET;\n+\n+    static class A {\n+        Object f;\n+    }\n+\n+    static {\n+        try {\n+            Field fField = A.class.getDeclaredField(\"f\");\n+            F_OFFSET = UNSAFE.objectFieldOffset(fField);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    static Object testHelper(boolean flag, Object o, long offset, Object x) {\n+        if (flag) {\n+            return UNSAFE.getAndSetObject(o, offset, x);\n+        }\n+        return null;\n+    }\n+\n+    static Object field;\n+\n+\n+    static Object test1(boolean flag, Object o, long offset) {\n+        return testHelper(flag, null, offset, field);\n+    }\n+\n+    static Object test2(Object o, long offset) {\n+        return UNSAFE.getAndSetObject(o, offset, field);\n+    }\n+\n+    static public void main(String[] args) {\n+        A a = new A();\n+        for (int i = 0; i < 20_000; i++) {\n+            testHelper(true, a, F_OFFSET, null);\n+            test1(false, a, F_OFFSET);\n+            test2(a, F_OFFSET);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestUnsafeLoadStoreMergedHeapStableTests.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"}]}