{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,0 +60,1 @@\n+\t$(info $(_) make test-docs TEST=<t> # Run test(s) on the generated documentation)\n","filename":"make\/Global.gmk","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -791,0 +791,6 @@\n+$(eval $(call SetupTarget, test-docs, \\\n+    MAKEFILE := RunTests, \\\n+    ARGS := TEST=\"$(TEST)\", \\\n+    DEPS := jdk-image test-image docs-jdk, \\\n+))\n+\n@@ -1337,0 +1343,1 @@\n+run-test-docs: test-docs\n","filename":"make\/Main.gmk","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -267,0 +267,1 @@\n+docs_JTREG_PROBLEM_LIST += $(TOPDIR)\/test\/docs\/ProblemList.txt\n","filename":"make\/RunTests.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-JTREG_TESTROOTS += $(addprefix $(TOPDIR)\/test\/, hotspot\/jtreg jdk langtools jaxp lib-test)\n+JTREG_TESTROOTS += $(addprefix $(TOPDIR)\/test\/, hotspot\/jtreg jdk langtools jaxp lib-test docs)\n","filename":"make\/common\/FindTests.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1072,0 +1072,46 @@\n+    var testOnlyProfilesPrebuiltDocs = {\n+        \"run-test-prebuilt-docs\": {\n+            target_os: input.build_os,\n+            target_cpu: input.build_cpu,\n+            src: \"src.conf\",\n+            dependencies: [\n+                \"jtreg\", \"gnumake\", \"boot_jdk\", \"devkit\", \"jib\",\n+                \"jcov\", testedProfileJdk, testedProfileTest, \"docs.doc_api_spec\",\n+            ],\n+            make_args: testOnlyMake,\n+            environment: {\n+                \"BOOT_JDK\": common.boot_jdk_home,\n+                \"JT_HOME\": input.get(\"jtreg\", \"home_path\"),\n+                \"JDK_IMAGE_DIR\": input.get(testedProfileJdk, \"home_path\"),\n+                \"TEST_IMAGE_DIR\": input.get(testedProfileTest, \"home_path\"),\n+                \"SYMBOLS_IMAGE_DIR\": input.get(testedProfile + \".jdk_symbols\", \"home_path\"),\n+            },\n+            labels: \"test-docs\",\n+        }\n+    };\n+\n+    if (!testedProfile.endsWith(\"-jcov\")) {\n+        testOnlyProfilesPrebuiltDocs[\"run-test-prebuilt-docs\"][\"dependencies\"].push(testedProfile + \".jdk_symbols\");\n+    }\n+\n+    if (input.profile == \"run-test-prebuilt-docs\") {\n+        if (profiles[testedProfile] == null && profiles[testImageProfile] == null) {\n+            error(\"testedProfile is not defined: \" + testedProfile + \" \" + testImageProfile);\n+        }\n+    }\n+\n+    if (profiles[testedProfile] != null) {\n+        testOnlyProfilesPrebuiltDocs[\"run-test-prebuilt-docs\"][\"target_os\"] = profiles[testedProfile][\"target_os\"];\n+        testOnlyProfilesPrebuiltDocs[\"run-test-prebuilt-docs\"][\"target_cpu\"] = profiles[testedProfile][\"target_cpu\"];\n+    } else if (profiles[testImageProfile] != null) {\n+        testOnlyProfilesPrebuiltDocs[\"run-test-prebuilt-docs\"][\"target_os\"] = profiles[testImageProfile][\"target_os\"];\n+        testOnlyProfilesPrebuiltDocs[\"run-test-prebuilt-docs\"][\"target_cpu\"] = profiles[testImageProfile][\"target_cpu\"];\n+    }\n+\n+    profiles = concatObjects(profiles, testOnlyProfilesPrebuiltDocs);\n+\n+    if (!new java.io.File(__DIR__, \"..\/..\/README.md\").exists()) {\n+        profiles[\"run-test-prebuilt-docs\"] = concatObjects(profiles[\"run-test-prebuilt-docs\"],\n+            runTestPrebuiltSrcFullExtra);\n+    }\n+\n","filename":"make\/conf\/jib-profiles.js","additions":46,"deletions":0,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -0,0 +1,10 @@\n+#\n+# Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+# ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+#\n+\n+###########################################################################\n+#\n+# See doccheck\/test\/ProblemList.txt for documentation on this file and its purpose.\n+#\n+#############################################################################\n","filename":"test\/docs\/ProblemList.txt","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+# This file identifies the root of the test-suite hierarchy.\n+# It also contains test-suite configuration information.\n+\n+# The list of keywords supported in the entire test suite.  The\n+# \"intermittent\" keyword marks tests known to fail intermittently.\n+# The \"randomness\" keyword marks tests using randomness with test\n+# cases differing from run to run. (A test using a fixed random seed\n+# would not count as \"randomness\" by this definition.) Extra care\n+# should be taken to handle test failures of intermittent or\n+# randomness tests.\n+\n+keys=intermittent randomness needs-src needs-src-jdk_javadoc\n+\n+# Group definitions\n+groups=TEST.groups\n+\n+# Minimum jtreg version\n+requiredVersion=7.4+1\n+\n+# Use new module options\n+useNewOptions=true\n+\n+# Use --patch-module instead of -Xmodule:\n+useNewPatchModule=true\n+\n+# Path to libraries in the topmost test directory. This is needed so @library\n+# does not need ..\/..\/ notation to reach them\n+external.lib.roots = ..\/..\/\n","filename":"test\/docs\/TEST.ROOT","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+#  Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+#  This code is free software; you can redistribute it and\/or modify it\n+#  under the terms of the GNU General Public License version 2 only, as\n+#  published by the Free Software Foundation.\n+#\n+#  This code is distributed in the hope that it will be useful, but WITHOUT\n+#  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+#  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+#  version 2 for more details (a copy is included in the LICENSE file that\n+#  accompanied this code).\n+#\n+#  You should have received a copy of the GNU General Public License version\n+#  2 along with this work; if not, write to the Free Software Foundation,\n+#  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+#  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+#  or visit www.oracle.com if you need additional information or have any\n+#  questions.\n+#\n+\n+# Doccheck-specific test groups\n+\n+docs_all = \\\n+    \/\n+\n+tier2 = \\\n+    :docs_all\n","filename":"test\/docs\/TEST.groups","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library \/test\/lib\n+ * @build jtreg.SkippedException\n+ * @summary example of a test on the generated documentation\n+ * @run main TestDocs\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import jtreg.SkippedException;\n+\n+public class TestDocs {\n+    private static final Path ROOT_PATH = Path.of(System.getProperty(\"test.jdk\"));\n+\n+    public static Path resolveDocs() {\n+        Path firstCandidate = ROOT_PATH.getParent()\n+                .resolve(\"docs\");\n+        Path secondCandidate = ROOT_PATH.getParent().getParent()\n+                .resolve(\"docs.doc_api_spec\").resolve(\"docs\");\n+\n+        if (Files.exists(firstCandidate)) {\n+            return firstCandidate;\n+        } else if (Files.exists(secondCandidate)) {\n+            return secondCandidate;\n+        } else {\n+            throw new SkippedException(\"docs folder not found in either location\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Path docRoot = resolveDocs();\n+        System.err.println(docRoot);\n+        final List<Path> files=new ArrayList<>();\n+        try {\n+            Files.walkFileTree(docRoot, new SimpleFileVisitor<>() {\n+                @Override\n+                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {\n+                    if (!attrs.isDirectory()) {\n+                        files.add(file);\n+                    }\n+                    return FileVisitResult.CONTINUE;\n+                }\n+            });\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        for (var file : files) {\n+            if (!Files.isReadable(file)) {\n+                throw new Exception(\"File \" + file + \" is unreadable\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/docs\/jdk\/javadoc\/TestDocs.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,1 @@\n+echo_file test\/TEST.properties\n","filename":"test\/docs\/req.flg","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"}]}