{"files":[{"patch":"@@ -872,0 +872,7 @@\n+  ifneq ($$(DOCS_IMAGE_DIR), )\n+    DOCS_PATH := $$(DOCS_IMAGE_DIR)\n+  else\n+    DOCS_PATH := $$(OUTPUTDIR)\/images\/docs\n+  endif\n+  $1_JTREG_BASIC_OPTIONS += -e:DOCS_IMAGE_DIR=$$(DOCS_PATH)\n+\n","filename":"make\/RunTests.gmk","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -960,1 +960,1 @@\n-    if (testedProfile == null) {\n+    if (testedProfile == null || testedProfile == \"docs\") {\n@@ -1002,0 +1002,8 @@\n+    var testOnlyProfilesPrebuiltDocs = clone(testOnlyProfilesPrebuilt);\n+    testOnlyProfilesPrebuiltDocs[\"run-test-prebuilt-docs\"] = testOnlyProfilesPrebuiltDocs[\"run-test-prebuilt\"];\n+    delete testOnlyProfilesPrebuiltDocs[\"run-test-prebuilt\"];\n+\n+    testOnlyProfilesPrebuiltDocs[\"run-test-prebuilt-docs\"].dependencies.push(\"docs.doc_api_spec\");\n+    testOnlyProfilesPrebuiltDocs[\"run-test-prebuilt-docs\"].environment[\"DOCS_IMAGE_DIR\"] = input.get(\"docs.doc_api_spec\", \"install_path\");\n+    testOnlyProfilesPrebuiltDocs[\"run-test-prebuilt-docs\"].labels = \"test-docs\";\n+\n@@ -1005,1 +1013,1 @@\n-    if (input.profile == \"run-test-prebuilt\") {\n+    if (input.profile == \"run-test-prebuilt\" || input.profile == \"run-test-prebuilt-docs\") {\n@@ -1010,12 +1018,2 @@\n-    if (profiles[testedProfile] != null) {\n-        testOnlyProfilesPrebuilt[\"run-test-prebuilt\"][\"target_os\"]\n-            = profiles[testedProfile][\"target_os\"];\n-        testOnlyProfilesPrebuilt[\"run-test-prebuilt\"][\"target_cpu\"]\n-            = profiles[testedProfile][\"target_cpu\"];\n-    } else if (profiles[testImageProfile] != null) {\n-        testOnlyProfilesPrebuilt[\"run-test-prebuilt\"][\"target_os\"]\n-            = profiles[testImageProfile][\"target_os\"];\n-        testOnlyProfilesPrebuilt[\"run-test-prebuilt\"][\"target_cpu\"]\n-            = profiles[testImageProfile][\"target_cpu\"];\n-    }\n-    profiles = concatObjects(profiles, testOnlyProfilesPrebuilt);\n+    function updateProfileTargets(profiles, testedProfile, testImageProfile, targetProfile, runTestProfile) {\n+        var profileToCheck = profiles[testedProfile] || profiles[testImageProfile];\n@@ -1023,18 +1021,3 @@\n-    \/\/ On macosx add the devkit bin dir to the path in all the run-test profiles.\n-    \/\/ This gives us a guaranteed working version of lldb for the jtreg failure handler.\n-    if (input.build_os == \"macosx\") {\n-        macosxRunTestExtra = {\n-            dependencies: [ \"lldb\" ],\n-            environment_path: [\n-                input.get(\"gnumake\", \"install_path\") + \"\/bin\",\n-                input.get(\"lldb\", \"install_path\") + \"\/Xcode\/Contents\/Developer\/usr\/bin\",\n-            ],\n-        };\n-        profiles[\"run-test\"] = concatObjects(profiles[\"run-test\"], macosxRunTestExtra);\n-        profiles[\"run-test-prebuilt\"] = concatObjects(profiles[\"run-test-prebuilt\"], macosxRunTestExtra);\n-    } else if (input.build_os == \"windows\") {\n-        \/\/ On windows, add the devkit debugger to the path in all the run-test profiles\n-        \/\/ to make them available to the jtreg failure handler.\n-        var archDir = \"x64\";\n-        if (input.build_arch == \"aarch64\") {\n-            archDir = \"arm64\"\n+        if (profileToCheck != null) {\n+            targetProfile[runTestProfile][\"target_os\"] = profileToCheck[\"target_os\"];\n+            targetProfile[runTestProfile][\"target_cpu\"] = profileToCheck[\"target_cpu\"];\n@@ -1042,7 +1025,0 @@\n-        windowsRunTestExtra = {\n-            environment_path: [\n-                input.get(\"devkit\", \"install_path\") + \"\/10\/Debuggers\/\" + archDir\n-            ]\n-        }\n-        profiles[\"run-test\"] = concatObjects(profiles[\"run-test\"], windowsRunTestExtra);\n-        profiles[\"run-test-prebuilt\"] = concatObjects(profiles[\"run-test-prebuilt\"], windowsRunTestExtra);\n@@ -1051,0 +1027,6 @@\n+    updateProfileTargets(profiles, testedProfile, testImageProfile, testOnlyProfilesPrebuilt, \"run-test-prebuilt\");\n+    updateProfileTargets(profiles, testedProfile, testImageProfile, testOnlyProfilesPrebuiltDocs, \"run-test-prebuilt-docs\");\n+\n+    profiles = concatObjects(profiles, testOnlyProfilesPrebuiltDocs);\n+    profiles = concatObjects(profiles, testOnlyProfilesPrebuilt);\n+\n@@ -1070,44 +1052,0 @@\n-    }\n-\n-    var testOnlyProfilesPrebuiltDocs = {\n-        \"run-test-prebuilt-docs\": {\n-            target_os: input.build_os,\n-            target_cpu: input.build_cpu,\n-            src: \"src.conf\",\n-            dependencies: [\n-                \"jtreg\", \"gnumake\", \"boot_jdk\", \"devkit\", \"jib\",\n-                \"jcov\", testedProfileJdk, testedProfileTest, \"docs.doc_api_spec\",\n-            ],\n-            make_args: testOnlyMake,\n-            environment: {\n-                \"BOOT_JDK\": common.boot_jdk_home,\n-                \"JT_HOME\": input.get(\"jtreg\", \"home_path\"),\n-                \"JDK_IMAGE_DIR\": input.get(testedProfileJdk, \"home_path\"),\n-                \"TEST_IMAGE_DIR\": input.get(testedProfileTest, \"home_path\"),\n-                \"SYMBOLS_IMAGE_DIR\": input.get(testedProfile + \".jdk_symbols\", \"home_path\"),\n-            },\n-            labels: \"test-docs\",\n-        }\n-    };\n-\n-    if (!testedProfile.endsWith(\"-jcov\")) {\n-        testOnlyProfilesPrebuiltDocs[\"run-test-prebuilt-docs\"][\"dependencies\"].push(testedProfile + \".jdk_symbols\");\n-    }\n-\n-    if (input.profile == \"run-test-prebuilt-docs\") {\n-        if (profiles[testedProfile] == null && profiles[testImageProfile] == null) {\n-            error(\"testedProfile is not defined: \" + testedProfile + \" \" + testImageProfile);\n-        }\n-    }\n-\n-    if (profiles[testedProfile] != null) {\n-        testOnlyProfilesPrebuiltDocs[\"run-test-prebuilt-docs\"][\"target_os\"] = profiles[testedProfile][\"target_os\"];\n-        testOnlyProfilesPrebuiltDocs[\"run-test-prebuilt-docs\"][\"target_cpu\"] = profiles[testedProfile][\"target_cpu\"];\n-    } else if (profiles[testImageProfile] != null) {\n-        testOnlyProfilesPrebuiltDocs[\"run-test-prebuilt-docs\"][\"target_os\"] = profiles[testImageProfile][\"target_os\"];\n-        testOnlyProfilesPrebuiltDocs[\"run-test-prebuilt-docs\"][\"target_cpu\"] = profiles[testImageProfile][\"target_cpu\"];\n-    }\n-\n-    profiles = concatObjects(profiles, testOnlyProfilesPrebuiltDocs);\n-\n-    if (!new java.io.File(__DIR__, \"..\/..\/README.md\").exists()) {\n","filename":"make\/conf\/jib-profiles.js","additions":21,"deletions":83,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/test\/lib\n+ * @library \/test\/lib ..\/..\/tools\/tester\n@@ -32,10 +32,1 @@\n-import java.io.IOException;\n-import java.nio.file.FileVisitResult;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.SimpleFileVisitor;\n-import java.nio.file.attribute.BasicFileAttributes;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import jtreg.SkippedException;\n+import tester.DocTester;\n@@ -44,39 +35,3 @@\n-    private static final Path ROOT_PATH = Path.of(System.getProperty(\"test.jdk\"));\n-\n-    public static Path resolveDocs() {\n-        Path firstCandidate = ROOT_PATH.getParent()\n-                .resolve(\"docs\");\n-        Path secondCandidate = ROOT_PATH.getParent().getParent()\n-                .resolve(\"docs.doc_api_spec\").resolve(\"docs\");\n-\n-        if (Files.exists(firstCandidate)) {\n-            return firstCandidate;\n-        } else if (Files.exists(secondCandidate)) {\n-            return secondCandidate;\n-        } else {\n-            throw new SkippedException(\"docs folder not found in either location\");\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        Path docRoot = resolveDocs();\n-        System.err.println(docRoot);\n-        final List<Path> files=new ArrayList<>();\n-        try {\n-            Files.walkFileTree(docRoot, new SimpleFileVisitor<>() {\n-                @Override\n-                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {\n-                    if (!attrs.isDirectory()) {\n-                        files.add(file);\n-                    }\n-                    return FileVisitResult.CONTINUE;\n-                }\n-            });\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n-        for (var file : files) {\n-            if (!Files.isReadable(file)) {\n-                throw new Exception(\"File \" + file + \" is unreadable\");\n-            }\n-        }\n+    public static void main(String... args) throws Exception {\n+        var docs = DocTester.resolveDocs();\n+        System.err.println(docs);\n","filename":"test\/docs\/jdk\/javadoc\/TestDocs.java","additions":5,"deletions":50,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package tester;\n+\n+import jtreg.SkippedException;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+\/**\n+ * Test framework for performing tests on the generated documentation.\n+ *\/\n+public class DocTester {\n+    private final static String DIR = System.getenv(\"DOCS_IMAGE_DIR\");\n+    private static final Path firstCandidate = Path.of(System.getProperty(\"test.jdk\"))\n+            .getParent().resolve(\"docs\");\n+\n+    public static Path resolveDocs() {\n+        if (DIR != null && !DIR.isBlank() && Files.exists(Path.of(DIR))) {\n+            return Path.of(DIR);\n+        } else if (Files.exists(firstCandidate)) {\n+            return firstCandidate;\n+        }else {\n+            throw new SkippedException(\"docs folder not found in either location\");\n+        }\n+    }\n+}\n","filename":"test\/docs\/tools\/tester\/DocTester.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"}]}