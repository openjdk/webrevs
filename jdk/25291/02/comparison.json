{"files":[{"patch":"@@ -304,1 +304,1 @@\n-        return new Control(new ThresholdSetting(type), def);\n+        return new Control(new ThresholdSetting(type, def), def);\n@@ -316,1 +316,1 @@\n-        return new Control(new CutoffSetting(type), def);\n+        return new Control(new CutoffSetting(type, def), def);\n@@ -322,1 +322,1 @@\n-        return new Control(new ThrottleSetting(type), def);\n+        return new Control(new ThrottleSetting(type, def), def);\n@@ -335,1 +335,1 @@\n-        return new Control(new PeriodSetting(type), def);\n+        return new Control(new PeriodSetting(type, def), def);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventControl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import jdk.jfr.internal.util.Utils;\n@@ -50,1 +51,0 @@\n-    private String value = DEFAULT_VALUE;\n@@ -52,0 +52,2 @@\n+    private final String defaultValue;\n+    private String value;\n@@ -53,2 +55,4 @@\n-    public CutoffSetting(PlatformEventType eventType) {\n-       this.eventType = Objects.requireNonNull(eventType);\n+    public CutoffSetting(PlatformEventType eventType, String defaultValue) {\n+        this.eventType = Objects.requireNonNull(eventType);\n+        this.defaultValue = Utils.validTimespanInfinity(eventType, \"Cutoff\", defaultValue, DEFAULT_VALUE);\n+        this.value = defaultValue;\n@@ -68,1 +72,1 @@\n-        return Objects.requireNonNullElse(text, DEFAULT_VALUE);\n+        return Objects.requireNonNullElse(text, defaultValue);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/settings\/CutoffSetting.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+import jdk.jfr.internal.util.Utils;\n+\n@@ -47,1 +49,0 @@\n-\n@@ -54,1 +55,2 @@\n-    private String value = EVERY_CHUNK;\n+    private final String defaultValue;\n+    private String value;\n@@ -56,1 +58,1 @@\n-    public PeriodSetting(PlatformEventType eventType) {\n+    public PeriodSetting(PlatformEventType eventType, String defaultValue) {\n@@ -58,0 +60,10 @@\n+        this.defaultValue = validPeriod(defaultValue);\n+        this.value = defaultValue;\n+    }\n+\n+    private String validPeriod(String userDefault) {\n+        return switch (userDefault) {\n+            case BEGIN_CHUNK -> BEGIN_CHUNK;\n+            case END_CHUNK -> END_CHUNK;\n+            default -> Utils.validTimespanInfinity(eventType, \"Period\", userDefault, DEFAULT_VALUE);\n+        };\n@@ -98,1 +110,1 @@\n-        return DEFAULT_VALUE; \/\/ \"everyChunk\" is default\n+        return defaultValue;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/settings\/PeriodSetting.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.jfr.internal.util.Utils;\n@@ -51,1 +52,0 @@\n-    private String value = DEFAULT_VALUE;\n@@ -53,0 +53,2 @@\n+    private final String defaultValue;\n+    private String value;\n@@ -54,1 +56,1 @@\n-    public ThresholdSetting(PlatformEventType eventType) {\n+    public ThresholdSetting(PlatformEventType eventType, String defaultValue) {\n@@ -56,0 +58,2 @@\n+       this.defaultValue = Utils.validTimespanInfinity(eventType, \"Threshold\", defaultValue, DEFAULT_VALUE);\n+       this.value = defaultValue;\n@@ -71,1 +75,1 @@\n-        return Objects.requireNonNullElse(text, DEFAULT_VALUE);\n+        return Objects.requireNonNullElse(text, defaultValue);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/settings\/ThresholdSetting.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -54,1 +54,2 @@\n-    private String value = DEFAULT_VALUE;\n+    private final String defaultValue;\n+    private String value;\n@@ -56,2 +57,15 @@\n-    public ThrottleSetting(PlatformEventType eventType) {\n-       this.eventType = Objects.requireNonNull(eventType);\n+    public ThrottleSetting(PlatformEventType eventType, String defaultValue) {\n+        this.eventType = Objects.requireNonNull(eventType);\n+        this.defaultValue = validRate(defaultValue);\n+        this.value = defaultValue;\n+    }\n+\n+    private String validRate(String defaultValue) {\n+        if (DEFAULT_VALUE.equals(defaultValue)) {\n+            return DEFAULT_VALUE; \/\/ Fast path to avoid parsing\n+        }\n+        if (Rate.of(defaultValue) == null) {\n+            Utils.warnInvalidAnnotation(eventType, \"Throttle\", defaultValue, DEFAULT_VALUE);\n+            return DEFAULT_VALUE;\n+        }\n+        return defaultValue;\n@@ -73,2 +87,1 @@\n-        \/\/ \"off\" is default\n-        return Objects.requireNonNullElse(text, DEFAULT_VALUE);\n+        return Objects.requireNonNullElse(text, defaultValue);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/settings\/ThrottleSetting.java","additions":18,"deletions":5,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+import jdk.jfr.internal.PlatformEventType;\n@@ -462,0 +463,27 @@\n+\n+\n+    public static String validTimespanInfinity(PlatformEventType type, String annotation, String userDefault, String systemDefault) {\n+        if (systemDefault.equals(userDefault)) {\n+            return systemDefault; \/\/ Fast path to avoid parsing\n+        }\n+        if (ValueParser.parseTimespanWithInfinity(userDefault, ValueParser.MISSING) != ValueParser.MISSING) {\n+            return userDefault;\n+        }\n+        warnInvalidAnnotation(type, annotation, userDefault, systemDefault);\n+        return systemDefault;\n+    }\n+\n+    public static void warnInvalidAnnotation(PlatformEventType type, String annotation, String userDefault, String systemDefault) {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"Programming error. Event setting \");\n+        sb.append(\"@\").append(annotation).append(\"(\\\"\").append(userDefault).append(\"\\\")\");\n+        sb.append(\" is invalid on event \");\n+        sb.append(type.getName());\n+        sb.append(\", using \");\n+        sb.append(\"@\").append(annotation).append(\"(\\\"\").append(systemDefault).append(\"\\\")\");\n+        sb.append( \" instead.\");\n+        if (type.isSystem()) {\n+            throw new InternalError(sb.toString()); \/\/ Fail fast for JDK and JVM events\n+        }\n+        Logger.log(LogTag.JFR_SETTING, LogLevel.WARN, sb.toString());\n+    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/util\/Utils.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"}]}