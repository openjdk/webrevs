{"files":[{"patch":"@@ -64,1 +64,1 @@\n-     * Unsafe.compareAndSetObject instead of AtomicReferenceFieldUpdater\n+     * Unsafe.compareAndSetReference instead of AtomicReferenceFieldUpdater\n","filename":"src\/java.base\/share\/classes\/java\/io\/BufferedInputStream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3864,87 +3864,0 @@\n-\n-    \/\/ The following deprecated methods are used by JSR 166.\n-\n-    @Deprecated(since=\"12\", forRemoval=true)\n-    public final Object getObject(Object o, long offset) {\n-        return getReference(o, offset);\n-    }\n-    @Deprecated(since=\"12\", forRemoval=true)\n-    public final Object getObjectVolatile(Object o, long offset) {\n-        return getReferenceVolatile(o, offset);\n-    }\n-    @Deprecated(since=\"12\", forRemoval=true)\n-    public final Object getObjectAcquire(Object o, long offset) {\n-        return getReferenceAcquire(o, offset);\n-    }\n-    @Deprecated(since=\"12\", forRemoval=true)\n-    public final Object getObjectOpaque(Object o, long offset) {\n-        return getReferenceOpaque(o, offset);\n-    }\n-\n-\n-    @Deprecated(since=\"12\", forRemoval=true)\n-    public final void putObject(Object o, long offset, Object x) {\n-        putReference(o, offset, x);\n-    }\n-    @Deprecated(since=\"12\", forRemoval=true)\n-    public final void putObjectVolatile(Object o, long offset, Object x) {\n-        putReferenceVolatile(o, offset, x);\n-    }\n-    @Deprecated(since=\"12\", forRemoval=true)\n-    public final void putObjectOpaque(Object o, long offset, Object x) {\n-        putReferenceOpaque(o, offset, x);\n-    }\n-    @Deprecated(since=\"12\", forRemoval=true)\n-    public final void putObjectRelease(Object o, long offset, Object x) {\n-        putReferenceRelease(o, offset, x);\n-    }\n-\n-\n-    @Deprecated(since=\"12\", forRemoval=true)\n-    public final Object getAndSetObject(Object o, long offset, Object newValue) {\n-        return getAndSetReference(o, offset, newValue);\n-    }\n-    @Deprecated(since=\"12\", forRemoval=true)\n-    public final Object getAndSetObjectAcquire(Object o, long offset, Object newValue) {\n-        return getAndSetReferenceAcquire(o, offset, newValue);\n-    }\n-    @Deprecated(since=\"12\", forRemoval=true)\n-    public final Object getAndSetObjectRelease(Object o, long offset, Object newValue) {\n-        return getAndSetReferenceRelease(o, offset, newValue);\n-    }\n-\n-\n-    @Deprecated(since=\"12\", forRemoval=true)\n-    public final boolean compareAndSetObject(Object o, long offset, Object expected, Object x) {\n-        return compareAndSetReference(o, offset, expected, x);\n-    }\n-    @Deprecated(since=\"12\", forRemoval=true)\n-    public final Object compareAndExchangeObject(Object o, long offset, Object expected, Object x) {\n-        return compareAndExchangeReference(o, offset, expected, x);\n-    }\n-    @Deprecated(since=\"12\", forRemoval=true)\n-    public final Object compareAndExchangeObjectAcquire(Object o, long offset, Object expected, Object x) {\n-        return compareAndExchangeReferenceAcquire(o, offset, expected, x);\n-    }\n-    @Deprecated(since=\"12\", forRemoval=true)\n-    public final Object compareAndExchangeObjectRelease(Object o, long offset, Object expected, Object x) {\n-        return compareAndExchangeReferenceRelease(o, offset, expected, x);\n-    }\n-\n-\n-    @Deprecated(since=\"12\", forRemoval=true)\n-    public final boolean weakCompareAndSetObject(Object o, long offset, Object expected, Object x) {\n-        return weakCompareAndSetReference(o, offset, expected, x);\n-    }\n-    @Deprecated(since=\"12\", forRemoval=true)\n-    public final boolean weakCompareAndSetObjectAcquire(Object o, long offset, Object expected, Object x) {\n-        return weakCompareAndSetReferenceAcquire(o, offset, expected, x);\n-    }\n-    @Deprecated(since=\"12\", forRemoval=true)\n-    public final boolean weakCompareAndSetObjectPlain(Object o, long offset, Object expected, Object x) {\n-        return weakCompareAndSetReferencePlain(o, offset, expected, x);\n-    }\n-    @Deprecated(since=\"12\", forRemoval=true)\n-    public final boolean weakCompareAndSetObjectRelease(Object o, long offset, Object expected, Object x) {\n-        return weakCompareAndSetReferenceRelease(o, offset, expected, x);\n-    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/Unsafe.java","additions":0,"deletions":87,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,3 +92,3 @@\n-                U.putObject(TestUnstableStable.class, FIELD_OFFSET, null);\n-                U.putObject(TestUnstableStable.class, FIELD_OFFSET, 42);\n-                U.putObject(TestUnstableStable.class, FIELD_OFFSET, 43);\n+                U.putReference(TestUnstableStable.class, FIELD_OFFSET, null);\n+                U.putReference(TestUnstableStable.class, FIELD_OFFSET, 42);\n+                U.putReference(TestUnstableStable.class, FIELD_OFFSET, 43);\n","filename":"test\/hotspot\/jtreg\/compiler\/stable\/TestUnstableStable.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-            return UNSAFE.getAndSetObject(o, offset, x);\n+            return UNSAFE.getAndSetReference(o, offset, x);\n@@ -71,1 +71,1 @@\n-        return UNSAFE.getAndSetObject(o, offset, field);\n+        return UNSAFE.getAndSetReference(o, offset, field);\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestUnsafeLoadStoreMergedHeapStableTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}