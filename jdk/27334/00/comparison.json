{"files":[{"patch":"@@ -41,3 +41,1 @@\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n-import java.nio.charset.Charset;\n+import java.io.UncheckedIOException;\n@@ -45,2 +43,0 @@\n-import java.util.Collections;\n-import java.util.HashMap;\n@@ -50,1 +46,0 @@\n-import java.util.Map;\n@@ -74,1 +69,1 @@\n-import com.sun.source.util.JavacTask;\n+import com.sun.tools.javac.api.JavacTaskPool;\n@@ -83,1 +78,0 @@\n-import com.sun.tools.javac.tree.JCTree.JCImport;\n@@ -93,1 +87,0 @@\n-import java.util.stream.Stream;\n@@ -278,0 +271,1 @@\n+    JavacTaskPool pool = new JavacTaskPool(1);\n@@ -288,1 +282,0 @@\n-        JavacTool tool = JavacTool.create();\n@@ -291,12 +284,17 @@\n-        JavacTask task = tool.getTask(pw, fm, r, List.of(\"-proc:none\"), null, files);\n-        Iterable<? extends CompilationUnitTree> trees = task.parse();\n-        pw.flush();\n-        if (r.errors > 0)\n-            throw new ParseException(sw.toString());\n-        Iterator<? extends CompilationUnitTree> iter = trees.iterator();\n-        if (!iter.hasNext())\n-            throw new Error(\"no trees found\");\n-        JCCompilationUnit t = (JCCompilationUnit) iter.next();\n-        if (iter.hasNext())\n-            throw new Error(\"too many trees found\");\n-        return t;\n+        return pool.getTask(pw, fm, r, List.of(\"-proc:none\"), null, files, task -> {\n+            try {\n+                Iterable<? extends CompilationUnitTree> trees = task.parse();\n+                pw.flush();\n+                if (r.errors > 0)\n+                    throw new ParseException(sw.toString());\n+                Iterator<? extends CompilationUnitTree> iter = trees.iterator();\n+                if (!iter.hasNext())\n+                    throw new Error(\"no trees found\");\n+                JCCompilationUnit t = (JCCompilationUnit) iter.next();\n+                if (iter.hasNext())\n+                    throw new Error(\"too many trees found\");\n+                return t;\n+            } catch (IOException ex) {\n+                throw new UncheckedIOException(ex);\n+            }\n+        });\n@@ -549,1 +547,1 @@\n-    private static class ParseException extends Exception {\n+    private static class ParseException extends RuntimeException {\n","filename":"test\/langtools\/tools\/javac\/tree\/TreePosTest.java","additions":21,"deletions":23,"binary":false,"changes":44,"status":"modified"}]}