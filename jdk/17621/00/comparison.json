{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -363,8 +363,0 @@\n-    @ForceInline\n-    @Override\n-    public final Vector<E> fromMemorySegment(MemorySegment ms, long offset, ByteOrder bo) {\n-        return dummyVector()\n-            .fromMemorySegment0(ms, offset)\n-            .maybeSwap(bo);\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractSpecies.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -4202,0 +4202,8 @@\n+        @ForceInline\n+        @Override final\n+        public ByteVector fromMemorySegment(MemorySegment ms, long offset, ByteOrder bo) {\n+            \/\/ User entry point:  Be careful with inputs.\n+            return ByteVector\n+                .fromMemorySegment(this, ms, offset, bo);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -3805,0 +3805,8 @@\n+        @ForceInline\n+        @Override final\n+        public DoubleVector fromMemorySegment(MemorySegment ms, long offset, ByteOrder bo) {\n+            \/\/ User entry point:  Be careful with inputs.\n+            return DoubleVector\n+                .fromMemorySegment(this, ms, offset, bo);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -3755,0 +3755,8 @@\n+        @ForceInline\n+        @Override final\n+        public FloatVector fromMemorySegment(MemorySegment ms, long offset, ByteOrder bo) {\n+            \/\/ User entry point:  Be careful with inputs.\n+            return FloatVector\n+                .fromMemorySegment(this, ms, offset, bo);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -3911,0 +3911,8 @@\n+        @ForceInline\n+        @Override final\n+        public IntVector fromMemorySegment(MemorySegment ms, long offset, ByteOrder bo) {\n+            \/\/ User entry point:  Be careful with inputs.\n+            return IntVector\n+                .fromMemorySegment(this, ms, offset, bo);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -3837,0 +3837,8 @@\n+        @ForceInline\n+        @Override final\n+        public LongVector fromMemorySegment(MemorySegment ms, long offset, ByteOrder bo) {\n+            \/\/ User entry point:  Be careful with inputs.\n+            return LongVector\n+                .fromMemorySegment(this, ms, offset, bo);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -4196,0 +4196,8 @@\n+        @ForceInline\n+        @Override final\n+        public ShortVector fromMemorySegment(MemorySegment ms, long offset, ByteOrder bo) {\n+            \/\/ User entry point:  Be careful with inputs.\n+            return ShortVector\n+                .fromMemorySegment(this, ms, offset, bo);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -5461,0 +5461,8 @@\n+        @ForceInline\n+        @Override final\n+        public $abstractvectortype$ fromMemorySegment(MemorySegment ms, long offset, ByteOrder bo) {\n+            \/\/ User entry point:  Be careful with inputs.\n+            return $abstractvectortype$\n+                .fromMemorySegment(this, ms, offset, bo);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-        return ByteVector.fromArray(SPECIES, a, i);\n+        return (ByteVector) SPECIES.fromArray(a, i);\n@@ -271,1 +271,1 @@\n-        return ByteVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (ByteVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-        return ByteVector.fromArray(SPECIES, a, i);\n+        return (ByteVector) SPECIES.fromArray(a, i);\n@@ -271,1 +271,1 @@\n-        return ByteVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (ByteVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-        return ByteVector.fromArray(SPECIES, a, i);\n+        return (ByteVector) SPECIES.fromArray(a, i);\n@@ -271,1 +271,1 @@\n-        return ByteVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (ByteVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-        return ByteVector.fromArray(SPECIES, a, i);\n+        return (ByteVector) SPECIES.fromArray(a, i);\n@@ -271,1 +271,1 @@\n-        return ByteVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (ByteVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -258,1 +258,1 @@\n-        return ByteVector.fromArray(SPECIES, a, i);\n+        return (ByteVector) SPECIES.fromArray(a, i);\n@@ -278,1 +278,1 @@\n-        return ByteVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (ByteVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-        return DoubleVector.fromArray(SPECIES, a, i);\n+        return (DoubleVector) SPECIES.fromArray(a, i);\n@@ -271,1 +271,1 @@\n-        return DoubleVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (DoubleVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-        return DoubleVector.fromArray(SPECIES, a, i);\n+        return (DoubleVector) SPECIES.fromArray(a, i);\n@@ -271,1 +271,1 @@\n-        return DoubleVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (DoubleVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-        return DoubleVector.fromArray(SPECIES, a, i);\n+        return (DoubleVector) SPECIES.fromArray(a, i);\n@@ -271,1 +271,1 @@\n-        return DoubleVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (DoubleVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-        return DoubleVector.fromArray(SPECIES, a, i);\n+        return (DoubleVector) SPECIES.fromArray(a, i);\n@@ -271,1 +271,1 @@\n-        return DoubleVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (DoubleVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -258,1 +258,1 @@\n-        return DoubleVector.fromArray(SPECIES, a, i);\n+        return (DoubleVector) SPECIES.fromArray(a, i);\n@@ -278,1 +278,1 @@\n-        return DoubleVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (DoubleVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-        return FloatVector.fromArray(SPECIES, a, i);\n+        return (FloatVector) SPECIES.fromArray(a, i);\n@@ -271,1 +271,1 @@\n-        return FloatVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (FloatVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-        return FloatVector.fromArray(SPECIES, a, i);\n+        return (FloatVector) SPECIES.fromArray(a, i);\n@@ -271,1 +271,1 @@\n-        return FloatVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (FloatVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-        return FloatVector.fromArray(SPECIES, a, i);\n+        return (FloatVector) SPECIES.fromArray(a, i);\n@@ -271,1 +271,1 @@\n-        return FloatVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (FloatVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-        return FloatVector.fromArray(SPECIES, a, i);\n+        return (FloatVector) SPECIES.fromArray(a, i);\n@@ -271,1 +271,1 @@\n-        return FloatVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (FloatVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -258,1 +258,1 @@\n-        return FloatVector.fromArray(SPECIES, a, i);\n+        return (FloatVector) SPECIES.fromArray(a, i);\n@@ -278,1 +278,1 @@\n-        return FloatVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (FloatVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-        return IntVector.fromArray(SPECIES, a, i);\n+        return (IntVector) SPECIES.fromArray(a, i);\n@@ -271,1 +271,1 @@\n-        return IntVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (IntVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-        return IntVector.fromArray(SPECIES, a, i);\n+        return (IntVector) SPECIES.fromArray(a, i);\n@@ -271,1 +271,1 @@\n-        return IntVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (IntVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-        return IntVector.fromArray(SPECIES, a, i);\n+        return (IntVector) SPECIES.fromArray(a, i);\n@@ -271,1 +271,1 @@\n-        return IntVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (IntVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-        return IntVector.fromArray(SPECIES, a, i);\n+        return (IntVector) SPECIES.fromArray(a, i);\n@@ -271,1 +271,1 @@\n-        return IntVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (IntVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -258,1 +258,1 @@\n-        return IntVector.fromArray(SPECIES, a, i);\n+        return (IntVector) SPECIES.fromArray(a, i);\n@@ -278,1 +278,1 @@\n-        return IntVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (IntVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-        return LongVector.fromArray(SPECIES, a, i);\n+        return (LongVector) SPECIES.fromArray(a, i);\n@@ -271,1 +271,1 @@\n-        return LongVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (LongVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-        return LongVector.fromArray(SPECIES, a, i);\n+        return (LongVector) SPECIES.fromArray(a, i);\n@@ -271,1 +271,1 @@\n-        return LongVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (LongVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-        return LongVector.fromArray(SPECIES, a, i);\n+        return (LongVector) SPECIES.fromArray(a, i);\n@@ -271,1 +271,1 @@\n-        return LongVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (LongVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-        return LongVector.fromArray(SPECIES, a, i);\n+        return (LongVector) SPECIES.fromArray(a, i);\n@@ -271,1 +271,1 @@\n-        return LongVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (LongVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -258,1 +258,1 @@\n-        return LongVector.fromArray(SPECIES, a, i);\n+        return (LongVector) SPECIES.fromArray(a, i);\n@@ -278,1 +278,1 @@\n-        return LongVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (LongVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-        return ShortVector.fromArray(SPECIES, a, i);\n+        return (ShortVector) SPECIES.fromArray(a, i);\n@@ -271,1 +271,1 @@\n-        return ShortVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (ShortVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-        return ShortVector.fromArray(SPECIES, a, i);\n+        return (ShortVector) SPECIES.fromArray(a, i);\n@@ -271,1 +271,1 @@\n-        return ShortVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (ShortVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-        return ShortVector.fromArray(SPECIES, a, i);\n+        return (ShortVector) SPECIES.fromArray(a, i);\n@@ -271,1 +271,1 @@\n-        return ShortVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (ShortVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-        return ShortVector.fromArray(SPECIES, a, i);\n+        return (ShortVector) SPECIES.fromArray(a, i);\n@@ -271,1 +271,1 @@\n-        return ShortVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (ShortVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -258,1 +258,1 @@\n-        return ShortVector.fromArray(SPECIES, a, i);\n+        return (ShortVector) SPECIES.fromArray(a, i);\n@@ -278,1 +278,1 @@\n-        return ShortVector.fromMemorySegment(SPECIES, a, i, bo);\n+        return (ShortVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorLoadStoreTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -271,1 +271,1 @@\n-        return $abstractvectortype$.fromArray(SPECIES, a, i);\n+        return ($abstractvectortype$) SPECIES.fromArray(a, i);\n@@ -291,1 +291,1 @@\n-        return $abstractvectortype$.fromMemorySegment(SPECIES, a, i, bo);\n+        return ($abstractvectortype$) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/X-LoadStoreTest.java.template","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}