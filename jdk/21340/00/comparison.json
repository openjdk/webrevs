{"files":[{"patch":"@@ -131,0 +131,2 @@\n+java\/awt\/dnd\/DragExitBeforeDropTest.java 8242805 macosx-all\n+java\/awt\/dnd\/DragThresholdTest.java 8076299 macosx-all\n","filename":"test\/jdk\/ProblemList.txt","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,257 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceDragEvent;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetContext;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+\/*\n+ * @test\n+ * @bug 4395290\n+ * @key headful\n+ * @summary tests that dragExit() is not called before drop()\n+ *\/\n+\n+public class DragExitBeforeDropTest {\n+    private static Frame frame;\n+    private static final DragSourceButton dragSourceButton = new DragSourceButton();\n+    private static final DropTargetPanel dropTargetPanel = new DropTargetPanel();\n+    private static volatile Point srcPoint;\n+    private static volatile Point dstPoint;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            EventQueue.invokeAndWait(DragExitBeforeDropTest::createAndShowUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                Point p = dragSourceButton.getLocationOnScreen();\n+                Dimension d = dragSourceButton.getSize();\n+                p.translate(d.width \/ 2, d.height \/ 2);\n+                srcPoint = p;\n+\n+                p = dropTargetPanel.getLocationOnScreen();\n+                d = dropTargetPanel.getSize();\n+                p.translate(d.width \/ 2, d.height \/ 2);\n+                dstPoint = p;\n+            });\n+\n+            robot.mouseMove(srcPoint.x, srcPoint.y);\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            for (; !srcPoint.equals(dstPoint);\n+                 srcPoint.translate(sign(dstPoint.x - srcPoint.x),\n+                                    sign(dstPoint.y - srcPoint.y))) {\n+                robot.mouseMove(srcPoint.x, srcPoint.y);\n+                robot.delay(10);\n+            }\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            if (!dropTargetPanel.getStatus()) {\n+                throw new RuntimeException(\"The test failed: dragExit()\"\n+                                           + \" is called before drop()\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowUI() {\n+        frame = new Frame(\"DragExitBeforeDropTest\");\n+        frame.setLayout(new GridLayout(2, 1));\n+        frame.add(dragSourceButton);\n+        frame.add(dropTargetPanel);\n+        frame.setLocationRelativeTo(null);\n+        frame.setSize(300, 400);\n+        frame.setVisible(true);\n+    }\n+\n+    public static int sign(int n) {\n+        return Integer.compare(n, 0);\n+    }\n+\n+    private static class DragSourceButton extends Button implements Serializable,\n+            Transferable,\n+            DragGestureListener,\n+            DragSourceListener {\n+        private final DataFlavor dataflavor =\n+                new DataFlavor(Button.class, \"DragSourceButton\");\n+\n+        public DragSourceButton() {\n+            this(\"DragSourceButton\");\n+        }\n+\n+        public DragSourceButton(String str) {\n+            super(str);\n+\n+            DragSource ds = DragSource.getDefaultDragSource();\n+            ds.createDefaultDragGestureRecognizer(this, DnDConstants.ACTION_COPY,\n+                                                  this);\n+        }\n+\n+        public void dragGestureRecognized(DragGestureEvent dge) {\n+            dge.startDrag(null, this, this);\n+        }\n+\n+        public void dragEnter(DragSourceDragEvent dsde) {}\n+\n+        public void dragExit(DragSourceEvent dse) {}\n+\n+        public void dragOver(DragSourceDragEvent dsde) {}\n+\n+        public void dragDropEnd(DragSourceDropEvent dsde) {}\n+\n+        public void dropActionChanged(DragSourceDragEvent dsde) {}\n+\n+        public Object getTransferData(DataFlavor flavor)\n+                throws UnsupportedFlavorException, IOException {\n+\n+            if (!isDataFlavorSupported(flavor)) {\n+                throw new UnsupportedFlavorException(flavor);\n+            }\n+\n+            Object retObj;\n+\n+            ByteArrayOutputStream baoStream = new ByteArrayOutputStream();\n+            ObjectOutputStream ooStream = new ObjectOutputStream(baoStream);\n+            ooStream.writeObject(this);\n+\n+            ByteArrayInputStream baiStream =\n+                    new ByteArrayInputStream(baoStream.toByteArray());\n+            ObjectInputStream ois = new ObjectInputStream(baiStream);\n+            try {\n+                retObj = ois.readObject();\n+            } catch (ClassNotFoundException e) {\n+                e.printStackTrace();\n+                throw new RuntimeException(e.toString());\n+            }\n+\n+            return retObj;\n+        }\n+\n+        public DataFlavor[] getTransferDataFlavors() {\n+            return new DataFlavor[] { dataflavor };\n+        }\n+\n+        public boolean isDataFlavorSupported(DataFlavor dflavor) {\n+            return dataflavor.equals(dflavor);\n+        }\n+    }\n+\n+    private static class DropTargetPanel extends Panel implements DropTargetListener {\n+\n+        final Dimension preferredDimension = new Dimension(200, 100);\n+        volatile boolean testPassed = true;\n+\n+        public DropTargetPanel() {\n+            setDropTarget(new DropTarget(this, this));\n+        }\n+\n+        public boolean getStatus() {\n+            return testPassed;\n+        }\n+\n+        public Dimension getPreferredSize() {\n+            return preferredDimension;\n+        }\n+\n+        public void dragEnter(DropTargetDragEvent dtde) {}\n+\n+        public void dragExit(DropTargetEvent dte) {\n+            testPassed = false;\n+        }\n+\n+        public void dragOver(DropTargetDragEvent dtde) {}\n+\n+        public void dropActionChanged(DropTargetDragEvent dtde) {}\n+\n+        public void drop(DropTargetDropEvent dtde) {\n+            DropTargetContext dtc = dtde.getDropTargetContext();\n+\n+            if ((dtde.getSourceActions() & DnDConstants.ACTION_COPY) != 0) {\n+                dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+            } else {\n+                dtde.rejectDrop();\n+            }\n+\n+            DataFlavor[] dfs = dtde.getCurrentDataFlavors();\n+            Component comp = null;\n+\n+            if(dfs != null && dfs.length >= 1) {\n+                Transferable transfer = dtde.getTransferable();\n+\n+                try {\n+                    comp = (Component)transfer.getTransferData(dfs[0]);\n+                } catch (Throwable e) {\n+                    e.printStackTrace();\n+                    dtc.dropComplete(false);\n+                }\n+            }\n+            dtc.dropComplete(true);\n+            add(comp);\n+        }\n+    }\n+}\n+\n+\n+\n","filename":"test\/jdk\/java\/awt\/dnd\/DragExitBeforeDropTest.java","additions":257,"deletions":0,"binary":false,"changes":257,"status":"added"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseMotionAdapter;\n+\n+\/*\n+  @test\n+  @key headful\n+  @bug 4415175\n+  @summary tests DragSource.getDragThreshold() and\n+           that the AWT default drag gesture recognizers\n+           honor the drag gesture motion threshold\n+*\/\n+\n+public class DragThresholdTest {\n+    private static Frame frame;\n+    private static Panel panel;\n+    private static MouseEvent lastMouseEvent;\n+    private static volatile boolean failed;\n+    private static volatile Point startPoint;\n+    private static volatile Point endPoint;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+\n+            EventQueue.invokeAndWait(DragThresholdTest::createAndShowDnD);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                Point p = panel.getLocationOnScreen();\n+                p.translate(50, 50);\n+                startPoint = p;\n+                endPoint = new Point(p.x + 2 * DragSource.getDragThreshold(),\n+                                     p.y + 2 * DragSource.getDragThreshold());\n+            });\n+\n+            robot.mouseMove(startPoint.x, startPoint.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            for (Point p = new Point(startPoint); !p.equals(endPoint);\n+                 p.translate(sign(endPoint.x - p.x),\n+                             sign(endPoint.y - p.y))) {\n+                robot.mouseMove(p.x, p.y);\n+                robot.delay(100);\n+            }\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.delay(200);\n+\n+            if (failed) {\n+                throw new RuntimeException(\"drag gesture recognized too early\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowDnD() {\n+        frame = new Frame(\"DragThresholdTest\");\n+        panel = new Panel();\n+        \/\/ Mouse motion listener mml is added to the panel first.\n+        \/\/ We rely on it that this listener will be called first.\n+        panel.addMouseMotionListener(new MouseMotionAdapter() {\n+            public void mouseDragged(MouseEvent evt) {\n+                lastMouseEvent = evt;\n+                System.out.println(evt);\n+            }\n+        });\n+        frame.add(panel);\n+        frame.setSize(200, 200);\n+        frame.setLocationRelativeTo(null);\n+\n+        DragGestureListener dgl = dge -> {\n+            Point dragOrigin = dge.getDragOrigin();\n+            int diffx = Math.abs(dragOrigin.x - lastMouseEvent.getX());\n+            int diffy = Math.abs(dragOrigin.y - lastMouseEvent.getY());\n+            System.out.println(\"dragGestureRecognized(): \" +\n+                               \" diffx=\" + diffx + \" diffy=\" + diffy +\n+                               \" DragSource.getDragThreshold()=\"\n+                               + DragSource.getDragThreshold());\n+            if (diffx <= DragSource.getDragThreshold() &&\n+                diffy <= DragSource.getDragThreshold()) {\n+                failed = true;\n+                System.out.println(\"drag gesture recognized too early!\");\n+            }\n+        };\n+\n+        \/\/ Default drag gesture recognizer is a mouse motion listener.\n+        \/\/ It is added to the panel second.\n+        new DragSource().createDefaultDragGestureRecognizer(\n+                panel,\n+                DnDConstants.ACTION_COPY_OR_MOVE, dgl);\n+        frame.setVisible(true);\n+    }\n+\n+    private static int sign(int n) {\n+        return Integer.compare(n, 0);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/DragThresholdTest.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"},{"patch":"@@ -0,0 +1,131 @@\n+\/*\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceAdapter;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\/*\n+ * @test\n+ * @bug 4414739\n+ * @requires (os.family == \"windows\")\n+ * @summary verifies that getDropSuccess() returns correct value for moving\n+            a file from a Java drag source to the Windows shell\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual WinMoveFileToShellTest\n+ *\/\n+\n+public class WinMoveFileToShellTest {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Drag from the frame titled \"Drag Frame\" and drop on to Windows Desktop.\n+            After Drag and Drop, check for \"Drop Success\" status in the log area.\n+            If \"Drop Success\" is true press PASS else FAIL.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                      .title(\"Test Instructions\")\n+                      .instructions(INSTRUCTIONS)\n+                      .columns(40)\n+                      .testUI(WinMoveFileToShellTest::createAndShowUI)\n+                      .logArea(5)\n+                      .build()\n+                      .awaitAndCheck();\n+    }\n+\n+    private static Frame createAndShowUI() {\n+        Frame frame = new Frame(\"Drag Frame\");\n+        final DragSourceListener dsl = new DragSourceAdapter() {\n+            public void dragDropEnd(DragSourceDropEvent e) {\n+                PassFailJFrame.log(\"Drop Success: \" + e.getDropSuccess());\n+            }\n+        };\n+\n+        DragGestureListener dgl = dge -> {\n+            File file = new File(System.getProperty(\"test.classes\", \".\")\n+                                 + File.separator + \"move.me\");\n+            try {\n+                file.createNewFile();\n+            } catch (IOException exc) {\n+                exc.printStackTrace();\n+            }\n+            ArrayList<File> list = new ArrayList<>();\n+            list.add(file);\n+            dge.startDrag(null, new FileListSelection(list), dsl);\n+        };\n+\n+        new DragSource().createDefaultDragGestureRecognizer(frame,\n+                                                            DnDConstants.ACTION_MOVE, dgl);\n+        frame.setSize(200, 100);\n+        return frame;\n+    }\n+\n+    private static class FileListSelection implements Transferable {\n+        private static final int FL = 0;\n+\n+        private static final DataFlavor[] flavors =\n+                new DataFlavor[] { DataFlavor.javaFileListFlavor };\n+\n+\n+        private List data;\n+\n+        public FileListSelection(List data) {\n+            this.data = data;\n+        }\n+\n+        public DataFlavor[] getTransferDataFlavors() {\n+            return flavors.clone();\n+        }\n+\n+        public boolean isDataFlavorSupported(DataFlavor flavor) {\n+            for (DataFlavor dataFlavor : flavors) {\n+                if (flavor.equals(dataFlavor)) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+\n+        public Object getTransferData(DataFlavor flavor)\n+                throws UnsupportedFlavorException, IOException\n+        {\n+            if (flavor.equals(flavors[FL])) {\n+                return data;\n+            } else {\n+                throw new UnsupportedFlavorException(flavor);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/WinMoveFileToShellTest.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"}]}