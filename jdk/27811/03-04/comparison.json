{"files":[{"patch":"@@ -708,1 +708,1 @@\n-        if (!isFinite(d) )\n+        if (!isFinite(d) ) {\n@@ -711,3 +711,4 @@\n-        else {\n-            boolean negative = Double.doubleToLongBits(d) < 0;\n-            d = Math.abs(d);\n+        }\n+\n+        boolean negative = Double.doubleToLongBits(d) < 0;\n+        d = Math.abs(d);\n@@ -715,5 +716,5 @@\n-            if (d == 0.0) {\n-                return negative ? \"-0x0.0p0\" : \"0x0.0p0\";\n-            } else {\n-                \/\/ Check if the value is subnormal (less than the smallest normal value)\n-                boolean subnormal = (d < Double.MIN_NORMAL);\n+        if (d == 0.0) {\n+            return negative ? \"-0x0.0p0\" : \"0x0.0p0\";\n+        }\n+        \/\/ Check if the value is subnormal (less than the smallest normal value)\n+        boolean subnormal = d < Double.MIN_NORMAL;\n@@ -721,6 +722,4 @@\n-                \/\/ Isolate significand bits and OR in a high-order bit\n-                \/\/ so that the string representation has a known length.\n-                \/\/ This ensures we always have 13 hex digits to work with (52 bits \/ 4 bits per hex digit)\n-                long signifBits = (Double.doubleToLongBits(d)\n-                        & DoubleConsts.SIGNIF_BIT_MASK) |\n-                        0x1000_0000_0000_0000L;\n+        \/\/ Isolate significand bits and OR in a high-order bit\n+        \/\/ so that the string representation has a known length.\n+        \/\/ This ensures we always have 13 hex digits to work with (52 bits \/ 4 bits per hex digit)\n+        long signifBits = (Double.doubleToLongBits(d) & DoubleConsts.SIGNIF_BIT_MASK) | 0x1000_0000_0000_0000L;\n@@ -728,5 +727,5 @@\n-                \/\/ Calculate the number of trailing zeros in the significand (in groups of 4 bits)\n-                \/\/ This is used to remove trailing zeros from the hex representation\n-                \/\/ We limit to 12 because we want to keep at least 1 hex digit (13 total - 12 = 1)\n-                \/\/ assert 0 <= trailingZeros && trailingZeros <= 12\n-                int trailingZeros = Long.numberOfTrailingZeros(signifBits | 1L << 4 * 12) >> 2;\n+        \/\/ Calculate the number of trailing zeros in the significand (in groups of 4 bits)\n+        \/\/ This is used to remove trailing zeros from the hex representation\n+        \/\/ We limit to 12 because we want to keep at least 1 hex digit (13 total - 12 = 1)\n+        \/\/ assert 0 <= trailingZeros && trailingZeros <= 12\n+        int trailingZeros = Long.numberOfTrailingZeros(signifBits | 1L << 4 * 12) >> 2;\n@@ -734,3 +733,3 @@\n-                \/\/ Determine the exponent value based on whether the number is subnormal or normal\n-                \/\/ Subnormal numbers use the minimum exponent, normal numbers use the actual exponent\n-                int exp = subnormal ? Double.MIN_EXPONENT : Math.getExponent(d);\n+        \/\/ Determine the exponent value based on whether the number is subnormal or normal\n+        \/\/ Subnormal numbers use the minimum exponent, normal numbers use the actual exponent\n+        int exp = subnormal ? Double.MIN_EXPONENT : Math.getExponent(d);\n@@ -738,8 +737,8 @@\n-                \/\/ Calculate the total length of the resulting string:\n-                \/\/ Sign (optional) + prefix \"0x\" + implicit bit + \".\" + hex digits + \"p\" + exponent\n-                int charlen = (negative ? 1 : 0) \/\/ sign character\n-                        + 4 \/\/ \"0x1.\" or \"0x0.\"\n-                        + 13 - trailingZeros \/\/ hex digits (13 max, minus trailing zeros)\n-                        + 1 \/\/ \"p\"\n-                        + DecimalDigits.stringSize(exp) \/\/ exponent\n-                        ;\n+        \/\/ Calculate the total length of the resulting string:\n+        \/\/ Sign (optional) + prefix \"0x\" + implicit bit + \".\" + hex digits + \"p\" + exponent\n+        int charlen = (negative ? 1 : 0) \/\/ sign character\n+                + 4 \/\/ \"0x1.\" or \"0x0.\"\n+                + 13 - trailingZeros \/\/ hex digits (13 max, minus trailing zeros)\n+                + 1 \/\/ \"p\"\n+                + DecimalDigits.stringSize(exp) \/\/ exponent\n+                ;\n@@ -747,3 +746,3 @@\n-                \/\/ Create a byte array to hold the result characters\n-                byte[] chars = new byte[charlen];\n-                int index = 0;\n+        \/\/ Create a byte array to hold the result characters\n+        byte[] chars = new byte[charlen];\n+        int index = 0;\n@@ -751,4 +750,4 @@\n-                \/\/ Add the sign character if the number is negative\n-                if (negative) {  \/\/ value is negative\n-                    chars[index++] = '-';\n-                }\n+        \/\/ Add the sign character if the number is negative\n+        if (negative) {  \/\/ value is negative\n+            chars[index++] = '-';\n+        }\n@@ -756,7 +755,7 @@\n-                \/\/ Add the prefix and the implicit bit ('1' for normal, '0' for subnormal)\n-                \/\/ Subnormal values have a 0 implicit bit; normal values have a 1 implicit bit.\n-                chars[index    ] = '0';      \/\/ Hex prefix\n-                chars[index + 1] = 'x';  \/\/ Hex prefix\n-                chars[index + 2] = (byte) (subnormal ? '0' : '1');  \/\/ Implicit bit\n-                chars[index + 3] = '.';  \/\/ Decimal point\n-                index += 4;\n+        \/\/ Add the prefix and the implicit bit ('1' for normal, '0' for subnormal)\n+        \/\/ Subnormal values have a 0 implicit bit; normal values have a 1 implicit bit.\n+        chars[index    ] = '0';      \/\/ Hex prefix\n+        chars[index + 1] = 'x';  \/\/ Hex prefix\n+        chars[index + 2] = (byte) (subnormal ? '0' : '1');  \/\/ Implicit bit\n+        chars[index + 3] = '.';  \/\/ Decimal point\n+        index += 4;\n@@ -764,9 +763,9 @@\n-                \/\/ Convert significand to hex digits manually to avoid creating temporary strings\n-                \/\/ Extract the 13 hex digits (52 bits) from signifBits\n-                \/\/ We need to extract bits 48-51, 44-47, ..., 0-3 (13 groups of 4 bits)\n-                for (int i = 0, end = 13 - trailingZeros; i < end; i++) {\n-                    \/\/ Extract 4 bits at a time from left to right\n-                    \/\/ Shift right by (12 - i) * 4 positions and mask with 0xF\n-                    \/\/ Integer.digits maps values 0-15 to '0'-'f' characters\n-                    chars[index++] = Integer.digits[((int)(signifBits >> ((12 - i) << 2))) & 0xF];\n-                }\n+        \/\/ Convert significand to hex digits manually to avoid creating temporary strings\n+        \/\/ Extract the 13 hex digits (52 bits) from signifBits\n+        \/\/ We need to extract bits 48-51, 44-47, ..., 0-3 (13 groups of 4 bits)\n+        for (int i = 0, end = 13 - trailingZeros; i < end; i++) {\n+            \/\/ Extract 4 bits at a time from left to right\n+            \/\/ Shift right by (12 - i) * 4 positions and mask with 0xF\n+            \/\/ Integer.digits maps values 0-15 to '0'-'f' characters\n+            chars[index++] = Integer.digits[((int)(signifBits >> ((12 - i) << 2))) & 0xF];\n+        }\n@@ -774,2 +773,2 @@\n-                \/\/ Add the exponent indicator\n-                chars[index] = 'p';\n+        \/\/ Add the exponent indicator\n+        chars[index] = 'p';\n@@ -777,3 +776,3 @@\n-                \/\/ Append the exponent value to the character array\n-                \/\/ This method writes the decimal representation of exp directly into the byte array\n-                DecimalDigits.uncheckedGetCharsLatin1(exp, charlen, chars);\n+        \/\/ Append the exponent value to the character array\n+        \/\/ This method writes the decimal representation of exp directly into the byte array\n+        DecimalDigits.uncheckedGetCharsLatin1(exp, charlen, chars);\n@@ -781,3 +780,1 @@\n-                return String.newStringWithLatin1Bytes(chars);\n-            }\n-        }\n+        return String.newStringWithLatin1Bytes(chars);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Double.java","additions":59,"deletions":62,"binary":false,"changes":121,"status":"modified"}]}