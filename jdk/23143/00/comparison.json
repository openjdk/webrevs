{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,0 @@\n-    DISABLED_WARNINGS := try deprecation rawtypes unchecked serial cast removal preview restricted dangling-doc-comments, \\\n","filename":"make\/test\/BuildTestLib.gmk","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -641,1 +641,1 @@\n-                return (T) exc;\n+                return expected.cast(exc);\n","filename":"test\/lib\/jdk\/test\/lib\/Asserts.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -432,1 +432,1 @@\n-    \/**\n+    \/*\n@@ -602,0 +602,1 @@\n+    @SuppressWarnings(\"restricted\")\n","filename":"test\/lib\/jdk\/test\/lib\/apps\/LingeredApp.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-                manager = (ArtifactManager) Class.forName(managerName).newInstance();\n+                manager = (ArtifactManager) Class.forName(managerName).getDeclaredConstructor().newInstance();\n","filename":"test\/lib\/jdk\/test\/lib\/artifacts\/ArtifactResolver.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import java.io.Serial;\n+\n@@ -30,0 +32,2 @@\n+    @Serial\n+    private static final long serialVersionUID = 8341884506180926911L;\n","filename":"test\/lib\/jdk\/test\/lib\/artifacts\/ArtifactResolverException.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,1 +78,1 @@\n-            Class jibServiceFactory = classLoader.loadClass(JIB_SERVICE_FACTORY);\n+            Class<?> jibServiceFactory = classLoader.loadClass(JIB_SERVICE_FACTORY);\n","filename":"test\/lib\/jdk\/test\/lib\/artifacts\/JibArtifactManager.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import java.io.Serial;\n@@ -48,0 +49,3 @@\n+        @Serial\n+        private static final long serialVersionUID = -8108935949624559549L;\n+\n","filename":"test\/lib\/jdk\/test\/lib\/classloader\/ClassUnloadCommon.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-    public synchronized Class loadClass(String name) throws ClassNotFoundException {\n+    public synchronized Class<?> loadClass(String name) throws ClassNotFoundException {\n@@ -45,1 +45,1 @@\n-    public synchronized Class loadClass(String name, boolean resolve)\n+    public synchronized Class<?> loadClass(String name, boolean resolve)\n@@ -47,1 +47,1 @@\n-        Class c = findLoadedClass(name);\n+        Class<?> c = findLoadedClass(name);\n@@ -132,1 +132,1 @@\n-        return (byte[]) bytecode.clone();\n+        return bytecode.clone();\n","filename":"test\/lib\/jdk\/test\/lib\/classloader\/GeneratingClassLoader.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -205,1 +205,1 @@\n-        Class<?>[] classes = new Class[numClasses];\n+        Class<?>[] classes = new Class<?>[numClasses];\n","filename":"test\/lib\/jdk\/test\/lib\/classloader\/GeneratingCompilingClassLoader.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -110,1 +110,1 @@\n-    @SuppressWarnings(\"rawtypes\")\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n","filename":"test\/lib\/jdk\/test\/lib\/format\/ArrayDiff.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-\/**\n+\/*\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaHeapObject.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-\/**\n+\/*\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaStatic.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-\/**\n+\/*\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaThing.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-\/**\n+\/*\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/Root.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.io.IOException;\n@@ -39,1 +40,1 @@\n-\/**\n+\/*\n@@ -640,1 +641,1 @@\n-    public void close() throws Exception {\n+    public void close() throws IOException {\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/Snapshot.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-\/**\n+\/*\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/StackFrame.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-\/**\n+\/*\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/StackTrace.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,1 +89,1 @@\n-    public void close() throws Exception {\n+    public void close() throws IOException {\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/parser\/FileReadBuffer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -130,1 +130,1 @@\n-    public void close() throws Exception {\n+    public void close() throws IOException {\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/parser\/MappedReadBuffer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,1 @@\n+    public void  close() throws IOException;\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/parser\/ReadBuffer.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,1 +96,0 @@\n-                in.close();\n@@ -169,1 +168,0 @@\n-                in.close();\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/parser\/Reader.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -236,1 +236,1 @@\n-        assertEquals(eventThread.getJavaThreadId(), thread.getId(), \"Wrong thread id\");\n+        assertEquals(eventThread.getJavaThreadId(), thread.threadId(), \"Wrong thread id\");\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/Events.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import java.io.Serial;\n+\n@@ -52,0 +54,1 @@\n+    @SuppressWarnings(\"restricted\")\n@@ -73,0 +76,3 @@\n+        @Serial\n+        private static final long serialVersionUID = -4069390356498980839L;\n+\n","filename":"test\/lib\/jdk\/test\/lib\/jvmti\/DebugeeClass.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-            ThreadInfo ti = tmx.getThreadInfo(thread.getId());\n+            ThreadInfo ti = tmx.getThreadInfo(thread.threadId());\n@@ -63,1 +63,1 @@\n-            ThreadInfo ti = tmx.getThreadInfo(thread.getId());\n+            ThreadInfo ti = tmx.getThreadInfo(thread.threadId());\n","filename":"test\/lib\/jdk\/test\/lib\/management\/ThreadMXBeanTool.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,0 +63,1 @@\n+    @SuppressWarnings(\"try\")\n","filename":"test\/lib\/jdk\/test\/lib\/net\/IPSupport.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -163,1 +163,0 @@\n-                    scanner.close();\n","filename":"test\/lib\/jdk\/test\/lib\/os\/linux\/HugePageConfiguration.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -984,1 +984,1 @@\n-        Method mainMethod = c.getMethod(\"main\", new Class[] { String[].class });\n+        Method mainMethod = c.getMethod(\"main\", new Class<?>[] { String[].class });\n","filename":"test\/lib\/jdk\/test\/lib\/process\/ProcessTools.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -97,0 +97,1 @@\n+    @SuppressWarnings(\"unchecked\")\n","filename":"test\/lib\/jdk\/test\/lib\/thread\/VThreadPinner.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,0 +60,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -97,1 +98,3 @@\n-            throw (X) ex;\n+            if ((X) ex == ex) {\n+                throw (X) ex;\n+            }\n","filename":"test\/lib\/jdk\/test\/lib\/thread\/VThreadRunner.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -269,1 +269,1 @@\n-                    Set mountPoints = new HashSet();\n+                    Set<String> mountPoints = new HashSet<>();\n@@ -302,2 +302,2 @@\n-        final AtomicReference throwableReference =\n-            new AtomicReference<Throwable>();\n+        final AtomicReference<Throwable> throwableReference =\n+            new AtomicReference<>();\n@@ -318,1 +318,1 @@\n-        Throwable uncaughtException = (Throwable)throwableReference.get();\n+        Throwable uncaughtException = throwableReference.get();\n@@ -368,0 +368,1 @@\n+    @SuppressWarnings(\"restricted\")\n","filename":"test\/lib\/jdk\/test\/lib\/util\/FileUtils.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"}]}