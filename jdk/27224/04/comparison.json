{"files":[{"patch":"@@ -34,0 +34,1 @@\n+#include \"gc\/shared\/gc_globals.hpp\"\n@@ -1510,16 +1511,13 @@\n-  julong phys_mem;\n-\n-  \/\/ If the user specified one of these options, they\n-  \/\/ want specific memory sizing so do not limit memory\n-  \/\/ based on compressed oops addressability.\n-  \/\/ Also, memory limits will be calculated based on\n-  \/\/ available os physical memory, not our MaxRAM limit,\n-  \/\/ unless MaxRAM is also specified.\n-  bool override_coop_limit = (!FLAG_IS_DEFAULT(MaxRAMPercentage) ||\n-                           !FLAG_IS_DEFAULT(MinRAMPercentage) ||\n-                           !FLAG_IS_DEFAULT(InitialRAMPercentage) ||\n-                           !FLAG_IS_DEFAULT(MaxRAM));\n-  if (override_coop_limit) {\n-    if (FLAG_IS_DEFAULT(MaxRAM)) {\n-      phys_mem = static_cast<julong>(os::physical_memory());\n-      FLAG_SET_ERGO(MaxRAM, (uint64_t)phys_mem);\n+  uint64_t physical_memory;\n+\n+  \/\/ Check if the user has configured any limit on the amount of RAM we may use.\n+  bool has_ram_limit = !FLAG_IS_DEFAULT(MaxRAMPercentage) ||\n+                       !FLAG_IS_DEFAULT(MinRAMPercentage) ||\n+                       !FLAG_IS_DEFAULT(InitialRAMPercentage) ||\n+                       !FLAG_IS_DEFAULT(MaxRAM);\n+\n+  if (has_ram_limit) {\n+    if (!FLAG_IS_DEFAULT(MaxRAM)) {\n+      \/\/ The user has configured MaxRAM, use that instead of physical memory\n+      \/\/ reported by the OS.\n+      physical_memory = MaxRAM;\n@@ -1527,1 +1525,4 @@\n-      phys_mem = (julong)MaxRAM;\n+      \/\/ The user has configured a limit, make sure MaxRAM reflects the physical\n+      \/\/ memory limit that heap sizing takes into account.\n+      physical_memory = os::physical_memory();\n+      FLAG_SET_ERGO(MaxRAM, physical_memory);\n@@ -1530,2 +1531,4 @@\n-    phys_mem = FLAG_IS_DEFAULT(MaxRAM) ? MIN2(static_cast<julong>(os::physical_memory()), (julong)MaxRAM)\n-                                       : (julong)MaxRAM;\n+    \/\/ If the user did not specify any limit, choose the lowest of the available\n+    \/\/ physical memory and MaxRAM. MaxRAM is typically set to 128GB on 64-bit\n+    \/\/ architecture.\n+    physical_memory = MIN2(os::physical_memory(), MaxRAM);\n@@ -1534,3 +1537,3 @@\n-  \/\/ If the maximum heap size has not been set with -Xmx,\n-  \/\/ then set it as fraction of the size of physical memory,\n-  \/\/ respecting the maximum and minimum sizes of the heap.\n+  \/\/ If the maximum heap size has not been set with -Xmx, then set it as\n+  \/\/ fraction of the size of physical memory, respecting the maximum and\n+  \/\/ minimum sizes of the heap.\n@@ -1538,2 +1541,6 @@\n-    julong reasonable_max = (julong)(((double)phys_mem * MaxRAMPercentage) \/ 100);\n-    const julong reasonable_min = (julong)(((double)phys_mem * MinRAMPercentage) \/ 100);\n+    uint64_t min_memory = (uint64_t)(((double)physical_memory * MinRAMPercentage) \/ 100);\n+    uint64_t max_memory = (uint64_t)(((double)physical_memory * MaxRAMPercentage) \/ 100);\n+\n+    const size_t reasonable_min = limit_by_size_t_max(min_memory);\n+    size_t reasonable_max = limit_by_size_t_max(max_memory);\n+\n@@ -1546,1 +1553,1 @@\n-      reasonable_max = MAX2(reasonable_max, (julong)MaxHeapSize);\n+      reasonable_max = MAX2(reasonable_max, MaxHeapSize);\n@@ -1551,1 +1558,1 @@\n-      reasonable_max = MIN2(reasonable_max, (julong)ErgoHeapSizeLimit);\n+      reasonable_max = MIN2(reasonable_max, ErgoHeapSizeLimit);\n@@ -1561,1 +1568,1 @@\n-      reasonable_max = MAX2(reasonable_max, (julong)InitialHeapSize);\n+      reasonable_max = MAX2(reasonable_max, InitialHeapSize);\n@@ -1563,1 +1570,1 @@\n-      reasonable_max = MAX2(reasonable_max, (julong)MinHeapSize);\n+      reasonable_max = MAX2(reasonable_max, MinHeapSize);\n@@ -1572,2 +1579,2 @@\n-          log_debug(gc, heap, coops)(\"HeapBaseMinAddress must be at least %zu\"\n-                                     \" (%zuG) which is greater than value given %zu\",\n+          log_debug(gc, heap, coops)(\"HeapBaseMinAddress must be at least %zu \"\n+                                     \"(%zuG) which is greater than value given %zu\",\n@@ -1581,0 +1588,1 @@\n+\n@@ -1582,2 +1590,2 @@\n-      \/\/ Limit the heap size to the maximum possible when using compressed oops\n-      julong max_coop_heap = (julong)max_heap_for_compressed_oops();\n+      size_t heap_end = HeapBaseMinAddress + MaxHeapSize;\n+      size_t max_coop_heap = max_heap_for_compressed_oops();\n@@ -1585,3 +1593,4 @@\n-      if (HeapBaseMinAddress + MaxHeapSize < max_coop_heap) {\n-        \/\/ Heap should be above HeapBaseMinAddress to get zero based compressed oops\n-        \/\/ but it should be not less than default MaxHeapSize.\n+      \/\/ Limit the heap size to the maximum possible when using compressed oops\n+      if (heap_end < max_coop_heap) {\n+        \/\/ Heap should be above HeapBaseMinAddress to get zero based compressed\n+        \/\/ oops but it should be not less than default MaxHeapSize.\n@@ -1591,4 +1600,3 @@\n-      \/\/ If user specified flags prioritizing os physical\n-      \/\/ memory limits, then disable compressed oops if\n-      \/\/ limits exceed max_coop_heap and UseCompressedOops\n-      \/\/ was not specified.\n+      \/\/ If the user has configured any limit on the amount of RAM we may use,\n+      \/\/ then disable compressed oops if the calculated max exceeds max_coop_heap\n+      \/\/ and UseCompressedOops was not specified.\n@@ -1596,5 +1604,5 @@\n-        if (FLAG_IS_ERGO(UseCompressedOops) && override_coop_limit) {\n-          aot_log_info(aot)(\"UseCompressedOops disabled due to\"\n-            \" max heap %zu > compressed oop heap %zu. \"\n-            \"Please check the setting of MaxRAMPercentage %5.2f.\"\n-            ,(size_t)reasonable_max, (size_t)max_coop_heap, MaxRAMPercentage);\n+        if (FLAG_IS_ERGO(UseCompressedOops) && has_ram_limit) {\n+          aot_log_info(aot)(\"UseCompressedOops disabled due to \"\n+                            \"max heap %zu > compressed oop heap %zu. \"\n+                            \"Please check the setting of MaxRAMPercentage %5.2f.\",\n+                            reasonable_max, max_coop_heap, MaxRAMPercentage);\n@@ -1603,1 +1611,1 @@\n-          reasonable_max = MIN2(reasonable_max, max_coop_heap);\n+          reasonable_max = max_coop_heap;\n@@ -1609,2 +1617,2 @@\n-    log_trace(gc, heap)(\"  Maximum heap size %zu\", (size_t) reasonable_max);\n-    FLAG_SET_ERGO(MaxHeapSize, (size_t)reasonable_max);\n+    log_trace(gc, heap)(\"  Maximum heap size %zu\", reasonable_max);\n+    FLAG_SET_ERGO(MaxHeapSize, reasonable_max);\n@@ -1616,4 +1624,2 @@\n-    julong reasonable_minimum = (julong)(OldSize + NewSize);\n-\n-    reasonable_minimum = MIN2(reasonable_minimum, (julong)MaxHeapSize);\n-\n+    size_t reasonable_minimum = limit_by_size_t_max((uint64_t)OldSize + (uint64_t)NewSize);\n+    reasonable_minimum = MIN2(reasonable_minimum, MaxHeapSize);\n@@ -1623,1 +1629,2 @@\n-      julong reasonable_initial = (julong)(((double)phys_mem * InitialRAMPercentage) \/ 100);\n+      uint64_t initial_memory = (uint64_t)(((double)physical_memory * InitialRAMPercentage) \/ 100);\n+      size_t reasonable_initial = limit_by_size_t_max(initial_memory);\n@@ -1626,2 +1633,2 @@\n-      reasonable_initial = MAX3(reasonable_initial, reasonable_minimum, (julong)MinHeapSize);\n-      reasonable_initial = MIN2(reasonable_initial, (julong)MaxHeapSize);\n+      reasonable_initial = MAX3(reasonable_initial, reasonable_minimum, MinHeapSize);\n+      reasonable_initial = MIN2(reasonable_initial, MaxHeapSize);\n@@ -1632,0 +1639,1 @@\n+\n@@ -1635,1 +1643,1 @@\n-      FLAG_SET_ERGO(MinHeapSize, MIN2((size_t)reasonable_minimum, InitialHeapSize));\n+      FLAG_SET_ERGO(MinHeapSize, MIN2(reasonable_minimum, InitialHeapSize));\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":63,"deletions":55,"binary":false,"changes":118,"status":"modified"},{"patch":"@@ -1107,0 +1107,6 @@\n+\/\/ This is typically used to safely convert to size_t from a larger type.\n+template <class T>\n+size_t limit_by_size_t_max(T value) {\n+  return (size_t)MIN2(value, (T)std::numeric_limits<size_t>::max());\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}