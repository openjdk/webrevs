{"files":[{"patch":"@@ -769,1 +769,1 @@\n-Arguments::ArgsRange Arguments::check_memory_size(julong size, julong min_size, julong max_size) {\n+Arguments::ArgsRange Arguments::check_memory_size(size_t size, size_t min_size, size_t max_size) {\n@@ -1509,1 +1509,1 @@\n-  julong phys_mem;\n+  size_t phys_mem;\n@@ -1523,1 +1523,1 @@\n-      phys_mem = static_cast<julong>(os::physical_memory());\n+      phys_mem = os::physical_memory();\n@@ -1526,1 +1526,1 @@\n-      phys_mem = (julong)MaxRAM;\n+      phys_mem = (size_t)MaxRAM;\n@@ -1529,2 +1529,2 @@\n-    phys_mem = FLAG_IS_DEFAULT(MaxRAM) ? MIN2(static_cast<julong>(os::physical_memory()), (julong)MaxRAM)\n-                                       : (julong)MaxRAM;\n+    phys_mem = FLAG_IS_DEFAULT(MaxRAM) ? MIN2(os::physical_memory(), (size_t)MaxRAM)\n+                                       : (size_t)MaxRAM;\n@@ -1537,2 +1537,2 @@\n-    julong reasonable_max = (julong)(((double)phys_mem * MaxRAMPercentage) \/ 100);\n-    const julong reasonable_min = (julong)(((double)phys_mem * MinRAMPercentage) \/ 100);\n+    size_t reasonable_max = (size_t)(((double)phys_mem * MaxRAMPercentage) \/ 100);\n+    const size_t reasonable_min = (size_t)(((double)phys_mem * MinRAMPercentage) \/ 100);\n@@ -1545,1 +1545,1 @@\n-      reasonable_max = MAX2(reasonable_max, (julong)MaxHeapSize);\n+      reasonable_max = MAX2(reasonable_max, MaxHeapSize);\n@@ -1550,1 +1550,1 @@\n-      reasonable_max = MIN2(reasonable_max, (julong)ErgoHeapSizeLimit);\n+      reasonable_max = MIN2(reasonable_max, ErgoHeapSizeLimit);\n@@ -1560,1 +1560,1 @@\n-      reasonable_max = MAX2(reasonable_max, (julong)InitialHeapSize);\n+      reasonable_max = MAX2(reasonable_max, InitialHeapSize);\n@@ -1562,1 +1562,1 @@\n-      reasonable_max = MAX2(reasonable_max, (julong)MinHeapSize);\n+      reasonable_max = MAX2(reasonable_max, MinHeapSize);\n@@ -1582,1 +1582,1 @@\n-      julong max_coop_heap = (julong)max_heap_for_compressed_oops();\n+      size_t max_coop_heap = max_heap_for_compressed_oops();\n@@ -1599,1 +1599,1 @@\n-            ,(size_t)reasonable_max, (size_t)max_coop_heap, MaxRAMPercentage);\n+            , reasonable_max, max_coop_heap, MaxRAMPercentage);\n@@ -1608,2 +1608,2 @@\n-    log_trace(gc, heap)(\"  Maximum heap size %zu\", (size_t) reasonable_max);\n-    FLAG_SET_ERGO(MaxHeapSize, (size_t)reasonable_max);\n+    log_trace(gc, heap)(\"  Maximum heap size %zu\", reasonable_max);\n+    FLAG_SET_ERGO(MaxHeapSize, reasonable_max);\n@@ -1615,1 +1615,1 @@\n-    julong reasonable_minimum = (julong)(OldSize + NewSize);\n+    size_t reasonable_minimum = OldSize + NewSize;\n@@ -1617,1 +1617,1 @@\n-    reasonable_minimum = MIN2(reasonable_minimum, (julong)MaxHeapSize);\n+    reasonable_minimum = MIN2(reasonable_minimum, MaxHeapSize);\n@@ -1622,1 +1622,1 @@\n-      julong reasonable_initial = (julong)(((double)phys_mem * InitialRAMPercentage) \/ 100);\n+      size_t reasonable_initial = (size_t)(((double)phys_mem * InitialRAMPercentage) \/ 100);\n@@ -1625,2 +1625,2 @@\n-      reasonable_initial = MAX3(reasonable_initial, reasonable_minimum, (julong)MinHeapSize);\n-      reasonable_initial = MIN2(reasonable_initial, (julong)MaxHeapSize);\n+      reasonable_initial = MAX3(reasonable_initial, reasonable_minimum, MinHeapSize);\n+      reasonable_initial = MIN2(reasonable_initial, MaxHeapSize);\n@@ -1628,1 +1628,1 @@\n-      FLAG_SET_ERGO(InitialHeapSize, (size_t)reasonable_initial);\n+      FLAG_SET_ERGO(InitialHeapSize, reasonable_initial);\n@@ -1634,1 +1634,1 @@\n-      FLAG_SET_ERGO(MinHeapSize, MIN2((size_t)reasonable_minimum, InitialHeapSize));\n+      FLAG_SET_ERGO(MinHeapSize, MIN2(reasonable_minimum, InitialHeapSize));\n@@ -1648,1 +1648,1 @@\n-  \/\/ Thus, we need to make sure we're using a julong for intermediate\n+  \/\/ Thus, we need to make sure we're using size_t for intermediate\n@@ -1650,3 +1650,2 @@\n-  julong initHeapSize;\n-  size_t phys_mem = os::physical_memory();\n-  julong total_memory = static_cast<julong>(phys_mem);\n+  size_t initHeapSize;\n+  size_t total_memory = os::physical_memory();\n@@ -1654,1 +1653,1 @@\n-  if (total_memory < (julong) 256 * M) {\n+  if (total_memory < 256 * M) {\n@@ -1665,2 +1664,1 @@\n-  initHeapSize = MIN2(total_memory \/ (julong) 2,\n-          total_memory - (julong) 160 * M);\n+  initHeapSize = MIN2(total_memory \/ 2, total_memory - 160 * M);\n@@ -1683,2 +1681,1 @@\n-    if (FLAG_SET_CMDLINE(NewSize,\n-            ((julong) MaxHeapSize \/ (julong) 8) * (julong) 3) != JVMFlag::SUCCESS) {\n+    if (FLAG_SET_CMDLINE(NewSize, (MaxHeapSize \/ 8) * 3) != JVMFlag::SUCCESS) {\n@@ -1946,5 +1943,5 @@\n-                                                  julong* long_arg,\n-                                                  julong min_size,\n-                                                  julong max_size) {\n-  if (!parse_integer(s, long_arg)) return arg_unreadable;\n-  return check_memory_size(*long_arg, min_size, max_size);\n+                                                  size_t* arg,\n+                                                  size_t min_size,\n+                                                  size_t max_size) {\n+  if (!parse_integer(s, arg)) return arg_unreadable;\n+  return check_memory_size(*arg, min_size, max_size);\n@@ -2080,2 +2077,2 @@\n-  const julong min_ThreadStackSize = 0;\n-  const julong max_ThreadStackSize = 1 * M;\n+  const size_t min_ThreadStackSize = 0;\n+  const size_t max_ThreadStackSize = 1 * M;\n@@ -2085,2 +2082,2 @@\n-  assert(min_ThreadStackSize == static_cast<julong>(limit->min()), \"must be\");\n-  assert(max_ThreadStackSize == static_cast<julong>(limit->max()), \"must be\");\n+  assert(min_ThreadStackSize == static_cast<size_t>(limit->min()), \"must be\");\n+  assert(max_ThreadStackSize == static_cast<size_t>(limit->max()), \"must be\");\n@@ -2088,2 +2085,2 @@\n-  const julong min_size = min_ThreadStackSize * K;\n-  const julong max_size = max_ThreadStackSize * K;\n+  const size_t min_size = min_ThreadStackSize * K;\n+  const size_t max_size = max_ThreadStackSize * K;\n@@ -2093,1 +2090,1 @@\n-  julong size = 0;\n+  size_t size = 0;\n@@ -2106,1 +2103,1 @@\n-  const julong size_aligned = align_up(size, K);\n+  const size_t size_aligned = align_up(size, K);\n@@ -2108,1 +2105,1 @@\n-         \"Overflow: \" JULONG_FORMAT \" \" JULONG_FORMAT,\n+         \"Overflow: %zu %zu\",\n@@ -2111,3 +2108,3 @@\n-  const julong size_in_K = size_aligned \/ K;\n-  assert(size_in_K < (julong)max_intx,\n-         \"size_in_K doesn't fit in the type of ThreadStackSize: \" JULONG_FORMAT,\n+  const size_t size_in_K = size_aligned \/ K;\n+  assert(size_in_K < (size_t)max_intx,\n+         \"size_in_K doesn't fit in the type of ThreadStackSize: %zu\",\n@@ -2117,1 +2114,1 @@\n-  const julong max_expanded = align_up(size_in_K * K, os::vm_page_size());\n+  const size_t max_expanded = align_up(size_in_K * K, os::vm_page_size());\n@@ -2119,1 +2116,1 @@\n-         \"Expansion overflowed: \" JULONG_FORMAT \" \" JULONG_FORMAT,\n+         \"Expansion overflowed: %zu %zu\",\n@@ -2353,1 +2350,1 @@\n-      julong long_initial_young_size = 0;\n+      size_t long_initial_young_size = 0;\n@@ -2361,1 +2358,1 @@\n-      if (FLAG_SET_CMDLINE(MaxNewSize, (size_t)long_initial_young_size) != JVMFlag::SUCCESS) {\n+      if (FLAG_SET_CMDLINE(MaxNewSize, long_initial_young_size) != JVMFlag::SUCCESS) {\n@@ -2364,1 +2361,1 @@\n-      if (FLAG_SET_CMDLINE(NewSize, (size_t)long_initial_young_size) != JVMFlag::SUCCESS) {\n+      if (FLAG_SET_CMDLINE(NewSize, long_initial_young_size) != JVMFlag::SUCCESS) {\n@@ -2369,1 +2366,1 @@\n-      julong size = 0;\n+      size_t size = 0;\n@@ -2378,1 +2375,1 @@\n-      if (FLAG_SET_CMDLINE(MinHeapSize, (size_t)size) != JVMFlag::SUCCESS) {\n+      if (FLAG_SET_CMDLINE(MinHeapSize, size) != JVMFlag::SUCCESS) {\n@@ -2381,1 +2378,1 @@\n-      if (FLAG_SET_CMDLINE(InitialHeapSize, (size_t)size) != JVMFlag::SUCCESS) {\n+      if (FLAG_SET_CMDLINE(InitialHeapSize, size) != JVMFlag::SUCCESS) {\n@@ -2386,1 +2383,1 @@\n-      julong long_max_heap_size = 0;\n+      size_t long_max_heap_size = 0;\n@@ -2394,1 +2391,1 @@\n-      if (FLAG_SET_CMDLINE(MaxHeapSize, (size_t)long_max_heap_size) != JVMFlag::SUCCESS) {\n+      if (FLAG_SET_CMDLINE(MaxHeapSize, long_max_heap_size) != JVMFlag::SUCCESS) {\n@@ -2461,1 +2458,1 @@\n-      julong long_ReservedCodeCacheSize = 0;\n+      size_t long_ReservedCodeCacheSize = 0;\n@@ -2469,1 +2466,1 @@\n-      if (FLAG_SET_CMDLINE(ReservedCodeCacheSize, (size_t)long_ReservedCodeCacheSize) != JVMFlag::SUCCESS) {\n+      if (FLAG_SET_CMDLINE(ReservedCodeCacheSize, long_ReservedCodeCacheSize) != JVMFlag::SUCCESS) {\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":58,"deletions":61,"binary":false,"changes":119,"status":"modified"},{"patch":"@@ -345,3 +345,3 @@\n-  static ArgsRange check_memory_size(julong size, julong min_size, julong max_size);\n-  static ArgsRange parse_memory_size(const char* s, julong* long_arg,\n-                                     julong min_size, julong max_size = max_uintx);\n+  static ArgsRange check_memory_size(size_t size, size_t min_size, size_t max_size);\n+  static ArgsRange parse_memory_size(const char* s, size_t* arg,\n+                                     size_t min_size, size_t max_size = max_uintx);\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  static Arguments::ArgsRange check_memory_size(julong size, julong min_size, julong max_size) {\n+  static Arguments::ArgsRange check_memory_size(size_t size, size_t min_size, size_t max_size) {\n@@ -116,1 +116,1 @@\n-    EXPECT_EQ(check_memory_size((julong)max_intx + 1, max_intx, max_uintx), Arguments::arg_in_range);\n+    EXPECT_EQ(check_memory_size((size_t)max_intx + 1, max_intx, max_uintx), Arguments::arg_in_range);\n@@ -118,4 +118,4 @@\n-    EXPECT_EQ(check_memory_size(        max_intx - 1, (julong)max_intx + 1, max_uintx), Arguments::arg_too_small);\n-    EXPECT_EQ(check_memory_size(        max_intx    , (julong)max_intx + 1, max_uintx), Arguments::arg_too_small);\n-    EXPECT_EQ(check_memory_size((julong)max_intx + 1, (julong)max_intx + 1, max_uintx), Arguments::arg_in_range);\n-    EXPECT_EQ(check_memory_size((julong)max_intx + 2, (julong)max_intx + 1, max_uintx), Arguments::arg_in_range);\n+    EXPECT_EQ(check_memory_size(        max_intx - 1, (size_t)max_intx + 1, max_uintx), Arguments::arg_too_small);\n+    EXPECT_EQ(check_memory_size(        max_intx    , (size_t)max_intx + 1, max_uintx), Arguments::arg_too_small);\n+    EXPECT_EQ(check_memory_size((size_t)max_intx + 1, (size_t)max_intx + 1, max_uintx), Arguments::arg_in_range);\n+    EXPECT_EQ(check_memory_size((size_t)max_intx + 2, (size_t)max_intx + 1, max_uintx), Arguments::arg_in_range);\n@@ -144,1 +144,1 @@\n-    EXPECT_EQ(check_memory_size((julong)max_intx + 1     , 1000, max_intx), Arguments::arg_too_big);\n+    EXPECT_EQ(check_memory_size((size_t)max_intx + 1     , 1000, max_intx), Arguments::arg_too_big);\n@@ -146,3 +146,3 @@\n-    EXPECT_EQ(check_memory_size(        max_intx         , 1000, (julong)max_intx + 1), Arguments::arg_in_range);\n-    EXPECT_EQ(check_memory_size((julong)max_intx + 1     , 1000, (julong)max_intx + 1), Arguments::arg_in_range);\n-    EXPECT_EQ(check_memory_size((julong)max_intx + 2     , 1000, (julong)max_intx + 1), Arguments::arg_too_big);\n+    EXPECT_EQ(check_memory_size(        max_intx         , 1000, (size_t)max_intx + 1), Arguments::arg_in_range);\n+    EXPECT_EQ(check_memory_size((size_t)max_intx + 1     , 1000, (size_t)max_intx + 1), Arguments::arg_in_range);\n+    EXPECT_EQ(check_memory_size((size_t)max_intx + 2     , 1000, (size_t)max_intx + 1), Arguments::arg_too_big);\n","filename":"test\/hotspot\/gtest\/runtime\/test_arguments.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"}]}