{"files":[{"patch":"@@ -155,8 +155,10 @@\n-          Node* prev = stack.node_at(stack.size() - 2);\n-          for (uint j = 1; j < region->req(); ++j) {\n-            if (n->in(j) == prev) {\n-              Node* in = region->in(j);\n-              if (in != nullptr && !in->is_top()) {\n-                if (is_dominator(ctl, in)) {\n-                  valid_control.set(in->_idx);\n-                  collect_nodes_to_clone(stack, to_fix);\n+          if (n->req() == region->req()) { \/\/ dead phi?\n+            Node* prev = stack.node_at(stack.size() - 2);\n+            for (uint j = 1; j < region->req(); ++j) {\n+              if (n->in(j) == prev) {\n+                Node* in = region->in(j);\n+                if (in != nullptr && !in->is_top()) {\n+                  if (is_dominator(ctl, in)) {\n+                    valid_control.set(in->_idx);\n+                    collect_nodes_to_clone(stack, to_fix);\n+                  }\n","filename":"src\/hotspot\/share\/opto\/replacednodes.cpp","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8319764\n+ * @summary C2 compilation asserts during incremental inlining because Phi input is out of bounds\n+ * @run main\/othervm -XX:-TieredCompilation -XX:-BackgroundCompilation -XX:CompileCommand=dontinline,TestLateInlineReplacedNodesExceptionPath::notInlined\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+StressIGVN -XX:StressSeed=1246687813 TestLateInlineReplacedNodesExceptionPath\n+ * @run main\/othervm -XX:-TieredCompilation -XX:-BackgroundCompilation -XX:CompileCommand=dontinline,TestLateInlineReplacedNodesExceptionPath::notInlined\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+StressIGVN TestLateInlineReplacedNodesExceptionPath\n+ *\/\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+\n+public class TestLateInlineReplacedNodesExceptionPath {\n+    private static A fieldA;\n+    private static C fieldC = new C();\n+\n+    public static void main(String[] args) throws Throwable {\n+        A a = new A();\n+        B b = new B();\n+        for (int i = 0; i < 20_000; i++) {\n+            fieldA = a;\n+            test1(true);\n+            fieldA = b;\n+            test1(true);\n+            inlined1(true);\n+            inlined1(false);\n+            inlined2(true);\n+            inlined2(false);\n+        }\n+    }\n+\n+    static final MethodHandle mh1;\n+    static MethodHandle mh2;\n+    static final MethodHandle mh3;\n+    static MethodHandle mh4;\n+\n+    static {\n+        try {\n+            MethodHandles.Lookup lookup = MethodHandles.lookup();\n+            mh1 = lookup.findStatic(TestLateInlineReplacedNodesExceptionPath.class, \"lateInlined1\", MethodType.methodType(void.class, C.class));\n+            mh2 = mh1;\n+            mh3 = lookup.findStatic(TestLateInlineReplacedNodesExceptionPath.class, \"lateInlined2\", MethodType.methodType(void.class, C.class));\n+            mh4 = mh3;\n+        } catch (NoSuchMethodException | IllegalAccessException e) {\n+            e.printStackTrace();\n+            throw new RuntimeException(\"Method handle lookup failed\");\n+        }\n+    }\n+\n+    private static void lateInlined1(C c) {\n+        fieldA.m(c);\n+        c.field++;\n+        fieldA.m(c);\n+    }\n+\n+    private static void lateInlined2(C c) {\n+        c.field++;\n+    }\n+\n+    private static void test1(boolean flag) throws Throwable {\n+        final C c = fieldC;\n+        MethodHandle mh = null;\n+        if (flag) {\n+            mh = inlined1(flag);\n+        }\n+        mh.invokeExact(c);\n+        mh = null;\n+        if (flag) {\n+            mh = inlined2(flag);\n+        }\n+        mh.invokeExact(c);\n+    }\n+\n+    private static MethodHandle inlined1(boolean flag) {\n+        if (flag) {\n+            return mh1;\n+        }\n+        return mh2;\n+    }\n+\n+    private static MethodHandle inlined2(boolean flag) {\n+        if (flag) {\n+            return mh3;\n+        }\n+        return mh4;\n+    }\n+\n+    private static void notInlined() {\n+    }\n+\n+    private static class A {\n+        public void m(C c) {\n+            c.field++;\n+            notInlined();\n+        }\n+\n+    }\n+\n+    private static class B extends A {\n+\n+        public void m(C c) {\n+            notInlined();\n+        }\n+    }\n+\n+    private static class C {\n+        public int field;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/inlining\/TestLateInlineReplacedNodesExceptionPath.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"}]}