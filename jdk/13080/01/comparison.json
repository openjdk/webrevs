{"files":[{"patch":"@@ -1087,0 +1087,1 @@\n+private:\n@@ -1091,0 +1092,6 @@\n+public:\n+  \/\/ Iterate over the regions that the humongous object starting at the given\n+  \/\/ region and apply the given method with the signature f(HeapRegion*) on them.\n+  template <typename Functor>\n+  void humongous_obj_regions_iterate(HeapRegion* start, Functor&& f);\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -114,0 +114,11 @@\n+template <typename Functor>\n+inline void G1CollectedHeap::humongous_obj_regions_iterate(HeapRegion* start, Functor&& f) {\n+  assert(start->is_starts_humongous(), \"must be\");\n+\n+  do {\n+    HeapRegion* next = next_region_in_humongous(start);\n+    f(start);\n+    start = next;\n+  } while (start != nullptr);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.inline.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -478,1 +478,2 @@\n-void G1ConcurrentMark::clear_statistics_in_region(uint region_idx) {\n+void G1ConcurrentMark::clear_statistics_in_region(HeapRegion* r) {\n+  uint region_idx = r->hrm_index();\n@@ -486,13 +487,0 @@\n-void G1ConcurrentMark::clear_statistics(HeapRegion* r) {\n-  uint const region_idx = r->hrm_index();\n-  if (r->is_humongous()) {\n-    assert(r->is_starts_humongous(), \"Got humongous continues region here\");\n-    uint const size_in_regions = (uint)_g1h->humongous_obj_size_in_regions(cast_to_oop(r->humongous_start_region()->bottom())->size());\n-    for (uint j = region_idx; j < (region_idx + size_in_regions); j++) {\n-      clear_statistics_in_region(j);\n-    }\n-  } else {\n-    clear_statistics_in_region(region_idx);\n-  }\n-}\n-\n@@ -501,0 +489,1 @@\n+  assert(r->is_starts_humongous(), \"Got humongous continues region here\");\n@@ -510,1 +499,4 @@\n-  clear_statistics(r);\n+  _g1h->humongous_obj_regions_iterate(r,\n+                                      [&] (HeapRegion* r) {\n+                                        clear_statistics_in_region(r);\n+                                      });\n@@ -1127,2 +1119,0 @@\n-      uint const region_idx = hr->hrm_index();\n-\n@@ -1130,1 +1120,0 @@\n-      uint const num_regions_in_humongous = (uint)G1CollectedHeap::humongous_obj_size_in_regions(obj_size_in_words);\n@@ -1138,2 +1127,1 @@\n-      for (uint i = region_idx; i < (region_idx + num_regions_in_humongous); i++) {\n-        HeapRegion* const r = _g1h->region_at(i);\n+      auto distribute_bytes = [&] (HeapRegion* r) {\n@@ -1143,1 +1131,1 @@\n-                               bytes_to_add, i, r->get_type_str());\n+                               bytes_to_add, r->hrm_index(), r->get_type_str());\n@@ -1146,1 +1134,3 @@\n-      }\n+      };\n+      _g1h->humongous_obj_regions_iterate(hr, distribute_bytes);\n+\n@@ -1148,2 +1138,2 @@\n-             \"%zu bytes left after distributing space across %u regions\",\n-             marked_bytes, num_regions_in_humongous);\n+             \"%zu bytes left after distributing space across %zu regions\",\n+             marked_bytes, G1CollectedHeap::humongous_obj_size_in_regions(obj_size_in_words));\n@@ -1372,1 +1362,1 @@\n-        _g1h->concurrent_mark()->clear_statistics_in_region(hr->hrm_index());\n+        _g1h->concurrent_mark()->clear_statistics_in_region(hr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":15,"deletions":25,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -385,4 +385,0 @@\n-  \/\/ Clear statistics gathered during the concurrent cycle for the given region after\n-  \/\/ it has been reclaimed.\n-  void clear_statistics(HeapRegion* r);\n-\n@@ -484,1 +480,1 @@\n-  void clear_statistics_in_region(uint region_idx);\n+  void clear_statistics_in_region(HeapRegion* r);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -141,5 +141,5 @@\n-  do {\n-    add(hr);\n-    _collector->update_from_skip_compacting_to_compacting(hr->hrm_index());\n-    hr = g1h->next_region_in_humongous(hr);\n-  } while (hr != nullptr);\n+  g1h->humongous_obj_regions_iterate(hr,\n+                                     [&] (HeapRegion* r) {\n+                                       add(r);\n+                                       _collector->update_from_skip_compacting_to_compacting(r->hrm_index());\n+                                     });\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -151,8 +151,6 @@\n-      uint const size_in_regions = (uint)g1h->humongous_obj_size_in_regions(cast_to_oop(r->bottom())->size());\n-      uint const region_idx = r->hrm_index();\n-      for (uint j = region_idx; j < (region_idx + size_in_regions); j++) {\n-        HeapRegion* const cur = g1h->region_at(j);\n-        assert(!cur->is_continues_humongous() || cur->rem_set()->is_empty(),\n-               \"Continues humongous region %u remset should be empty\", j);\n-        cur->rem_set()->clear_locked(true \/* only_cardset *\/);\n-      }\n+      g1h->humongous_obj_regions_iterate(r,\n+                                         [&] (HeapRegion* r) {\n+                                           assert(!r->is_continues_humongous() || r->rem_set()->is_empty(),\n+                                                  \"Continues humongous region %u remset should be empty\", r->hrm_index());\n+                                           r->rem_set()->clear_locked(true \/* only_cardset *\/);\n+                                         });\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSetTrackingPolicy.cpp","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -216,2 +216,2 @@\n-    do {\n-      HeapRegion* next = _g1h->next_region_in_humongous(r);\n+\n+    auto free_humongous_region = [&] (HeapRegion* r) {\n@@ -223,2 +223,3 @@\n-      r = next;\n-    } while (r != nullptr);\n+    };\n+\n+    _g1h->humongous_obj_regions_iterate(r, free_humongous_region);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}