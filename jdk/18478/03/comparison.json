{"files":[{"patch":"@@ -504,1 +504,5 @@\n-\n+#if defined(X86)\n+  { \"UseRTMLocking\",                JDK_Version::jdk(23), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n+  { \"UseRTMDeopt\",                  JDK_Version::jdk(23), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n+  { \"RTMRetryCount\",                JDK_Version::jdk(23), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n+#endif \/\/ X86\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2480,18 +2480,0 @@\n-\\f[V]-XX:RTMAbortRatio=\\f[R]\\f[I]abort_ratio\\f[R]\n-Specifies the RTM abort ratio is specified as a percentage (%) of all\n-executed RTM transactions.\n-If a number of aborted transactions becomes greater than this ratio,\n-then the compiled code is deoptimized.\n-This ratio is used when the \\f[V]-XX:+UseRTMDeopt\\f[R] option is\n-enabled.\n-The default value of this option is 50.\n-This means that the compiled code is deoptimized if 50% of all\n-transactions are aborted.\n-.TP\n-\\f[V]-XX:RTMRetryCount=\\f[R]\\f[I]number_of_retries\\f[R]\n-Specifies the number of times that the RTM locking code is retried, when\n-it is aborted or busy, before falling back to the normal locking\n-mechanism.\n-The default value for this option is 5.\n-The \\f[V]-XX:UseRTMLocking\\f[R] option must be enabled.\n-.TP\n@@ -2731,59 +2713,0 @@\n-\\f[V]-XX:+UseRTMDeopt\\f[R]\n-Autotunes RTM locking depending on the abort ratio.\n-This ratio is specified by the \\f[V]-XX:RTMAbortRatio\\f[R] option.\n-If the number of aborted transactions exceeds the abort ratio, then the\n-method containing the lock is deoptimized and recompiled with all locks\n-as normal locks.\n-This option is disabled by default.\n-The \\f[V]-XX:+UseRTMLocking\\f[R] option must be enabled.\n-.TP\n-\\f[V]-XX:+UseRTMLocking\\f[R]\n-Generates Restricted Transactional Memory (RTM) locking code for all\n-inflated locks, with the normal locking mechanism as the fallback\n-handler.\n-This option is disabled by default.\n-Options related to RTM are available only on x86 CPUs that support\n-Transactional Synchronization Extensions (TSX).\n-.RS\n-.PP\n-RTM is part of Intel\\[aq]s TSX, which is an x86 instruction set\n-extension and facilitates the creation of multithreaded applications.\n-RTM introduces the new instructions \\f[V]XBEGIN\\f[R], \\f[V]XABORT\\f[R],\n-\\f[V]XEND\\f[R], and \\f[V]XTEST\\f[R].\n-The \\f[V]XBEGIN\\f[R] and \\f[V]XEND\\f[R] instructions enclose a set of\n-instructions to run as a transaction.\n-If no conflict is found when running the transaction, then the memory\n-and register modifications are committed together at the \\f[V]XEND\\f[R]\n-instruction.\n-The \\f[V]XABORT\\f[R] instruction can be used to explicitly abort a\n-transaction and the \\f[V]XTEST\\f[R] instruction checks if a set of\n-instructions is being run in a transaction.\n-.PP\n-A lock on a transaction is inflated when another thread tries to access\n-the same transaction, thereby blocking the thread that didn\\[aq]t\n-originally request access to the transaction.\n-RTM requires that a fallback set of operations be specified in case a\n-transaction aborts or fails.\n-An RTM lock is a lock that has been delegated to the TSX\\[aq]s system.\n-.PP\n-RTM improves performance for highly contended locks with low conflict in\n-a critical region (which is code that must not be accessed by more than\n-one thread concurrently).\n-RTM also improves the performance of coarse-grain locking, which\n-typically doesn\\[aq]t perform well in multithreaded applications.\n-(Coarse-grain locking is the strategy of holding locks for long periods\n-to minimize the overhead of taking and releasing locks, while\n-fine-grained locking is the strategy of trying to achieve maximum\n-parallelism by locking only when necessary and unlocking as soon as\n-possible.)\n-Also, for lightly contended locks that are used by different threads,\n-RTM can reduce false cache line sharing, also known as cache line\n-ping-pong.\n-This occurs when multiple threads from different processors are\n-accessing different resources, but the resources share the same cache\n-line.\n-As a result, the processors repeatedly invalidate the cache lines of\n-other processors, which forces them to read from main memory instead of\n-their cache.\n-.RE\n-.TP\n@@ -3828,0 +3751,35 @@\n+.TP\n+\\f[V]-XX:RTMAbortRatio=\\f[R]\\f[I]abort_ratio\\f[R]\n+Specifies the RTM abort ratio is specified as a percentage (%) of all\n+executed RTM transactions.\n+If a number of aborted transactions becomes greater than this ratio,\n+then the compiled code is deoptimized.\n+This ratio is used when the \\f[V]-XX:+UseRTMDeopt\\f[R] option is\n+enabled.\n+The default value of this option is 50.\n+This means that the compiled code is deoptimized if 50% of all\n+transactions are aborted.\n+.TP\n+\\f[V]-XX:RTMRetryCount=\\f[R]\\f[I]number_of_retries\\f[R]\n+Specifies the number of times that the RTM locking code is retried, when\n+it is aborted or busy, before falling back to the normal locking\n+mechanism.\n+The default value for this option is 5.\n+The \\f[V]-XX:UseRTMLocking\\f[R] option must be enabled.\n+.TP\n+\\f[V]-XX:+UseRTMDeopt\\f[R]\n+Autotunes RTM locking depending on the abort ratio.\n+This ratio is specified by the \\f[V]-XX:RTMAbortRatio\\f[R] option.\n+If the number of aborted transactions exceeds the abort ratio, then the\n+method containing the lock is deoptimized and recompiled with all locks\n+as normal locks.\n+This option is disabled by default.\n+The \\f[V]-XX:+UseRTMLocking\\f[R] option must be enabled.\n+.TP\n+\\f[V]-XX:+UseRTMLocking\\f[R]\n+Generates Restricted Transactional Memory (RTM) locking code for all\n+inflated locks, with the normal locking mechanism as the fallback\n+handler.\n+This option is disabled by default.\n+Options related to RTM are available only on x86 CPUs that support\n+Transactional Synchronization Extensions (TSX).\n","filename":"src\/java.base\/share\/man\/java.1","additions":35,"deletions":77,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -65,0 +65,9 @@\n+        if (Platform.isX86() || Platform.isX64()) {\n+          deprecated.addAll(\n+            Arrays.asList(new String[][] {\n+              {\"UseRTMLocking\",         \"false\"},\n+              {\"UseRTMDeopt\",           \"false\"},\n+              {\"RTMRetryCount\",         \"5\"}\n+            })\n+          );\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/VMDeprecatedOptions.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}