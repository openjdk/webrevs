{"files":[{"patch":"@@ -3786,0 +3786,42 @@\n+.RS\n+.PP\n+RTM is part of Intel\\[aq]s TSX, which is an x86 instruction set\n+extension and facilitates the creation of multithreaded applications.\n+RTM introduces the new instructions \\f[V]XBEGIN\\f[R], \\f[V]XABORT\\f[R],\n+\\f[V]XEND\\f[R], and \\f[V]XTEST\\f[R].\n+The \\f[V]XBEGIN\\f[R] and \\f[V]XEND\\f[R] instructions enclose a set of\n+instructions to run as a transaction.\n+If no conflict is found when running the transaction, then the memory\n+and register modifications are committed together at the \\f[V]XEND\\f[R]\n+instruction.\n+The \\f[V]XABORT\\f[R] instruction can be used to explicitly abort a\n+transaction and the \\f[V]XTEST\\f[R] instruction checks if a set of\n+instructions is being run in a transaction.\n+.PP\n+A lock on a transaction is inflated when another thread tries to access\n+the same transaction, thereby blocking the thread that didn\\[aq]t\n+originally request access to the transaction.\n+RTM requires that a fallback set of operations be specified in case a\n+transaction aborts or fails.\n+An RTM lock is a lock that has been delegated to the TSX\\[aq]s system.\n+.PP\n+RTM improves performance for highly contended locks with low conflict in\n+a critical region (which is code that must not be accessed by more than\n+one thread concurrently).\n+RTM also improves the performance of coarse-grain locking, which\n+typically doesn\\[aq]t perform well in multithreaded applications.\n+(Coarse-grain locking is the strategy of holding locks for long periods\n+to minimize the overhead of taking and releasing locks, while\n+fine-grained locking is the strategy of trying to achieve maximum\n+parallelism by locking only when necessary and unlocking as soon as\n+possible.)\n+Also, for lightly contended locks that are used by different threads,\n+RTM can reduce false cache line sharing, also known as cache line\n+ping-pong.\n+This occurs when multiple threads from different processors are\n+accessing different resources, but the resources share the same cache\n+line.\n+As a result, the processors repeatedly invalidate the cache lines of\n+other processors, which forces them to read from main memory instead of\n+their cache.\n+.RE\n","filename":"src\/java.base\/share\/man\/java.1","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"}]}