{"files":[{"patch":"@@ -784,1 +784,0 @@\n-  size_t used = max - free;\n@@ -792,27 +791,0 @@\n-    return;\n-  }\n-\n-  size_t last_used = _last_unloading_used;\n-  if (last_used >= used) {\n-    \/\/ No increase since last GC; no need to sweep yet\n-    return;\n-  }\n-  size_t allocated_since_last = used - last_used;\n-  double allocated_since_last_ratio = double(allocated_since_last) \/ double(max);\n-  double threshold = SweeperThreshold \/ 100.0;\n-  double used_ratio = double(used) \/ double(max);\n-  double last_used_ratio = double(last_used) \/ double(max);\n-  if (used_ratio > threshold) {\n-    \/\/ After threshold is reached, scale it by free_ratio so that more aggressive\n-    \/\/ GC is triggered as we approach code cache exhaustion\n-    threshold *= free_ratio;\n-  }\n-  \/\/ If code cache has been allocated without any GC at all, let's make sure\n-  \/\/ it is eventually invoked to avoid trouble.\n-  if (allocated_since_last_ratio > threshold) {\n-    \/\/ In case the GC is concurrent, we make sure only one thread requests the GC.\n-    if (Atomic::cmpxchg(&_unloading_threshold_gc_requested, false, true) == false) {\n-      log_info(codecache)(\"Triggering threshold (%.3f%%) GC due to allocating %.3f%% since last unloading (%.3f%% used -> %.3f%% used)\",\n-                          threshold * 100.0, allocated_since_last_ratio * 100.0, last_used_ratio * 100.0, used_ratio * 100.0);\n-      Universe::heap()->collect(GCCause::_codecache_GC_threshold);\n-    }\n@@ -820,0 +792,1 @@\n+  return;\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":1,"deletions":28,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -1568,1 +1568,0 @@\n-    case GCCause::_codecache_GC_threshold:  return true;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1274,1 +1274,0 @@\n-               (cause == GCCause::_codecache_GC_threshold) ||\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -299,1 +299,0 @@\n-    case GCCause::_codecache_GC_threshold:\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -69,3 +69,0 @@\n-    case _codecache_GC_threshold:\n-      return \"CodeCache GC Threshold\";\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/gcCause.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -64,1 +64,0 @@\n-    _codecache_GC_threshold,\n","filename":"src\/hotspot\/share\/gc\/shared\/gcCause.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -114,1 +114,0 @@\n-      || cause == GCCause::_codecache_GC_threshold\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectorPolicy.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -250,1 +250,0 @@\n-  case GCCause::_codecache_GC_threshold:\n","filename":"src\/hotspot\/share\/gc\/x\/xDriver.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -200,1 +200,0 @@\n-  case GCCause::_codecache_GC_threshold:\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -253,1 +253,0 @@\n-  case GCCause::_codecache_GC_threshold:\n@@ -291,1 +290,0 @@\n-  case GCCause::_codecache_GC_threshold:\n@@ -355,1 +353,0 @@\n-  case GCCause::_codecache_GC_threshold:\n","filename":"src\/hotspot\/share\/gc\/z\/zDriver.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -519,1 +519,1 @@\n-\n+  { \"SweeperThreshold\",             JDK_Version::undefined(), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1548,5 +1548,0 @@\n-  product(double, SweeperThreshold, 15.0,                                   \\\n-          \"Threshold when a code cache unloading GC is invoked.\"            \\\n-          \"Value is percentage of ReservedCodeCacheSize.\")                  \\\n-          range(0.0, 100.0)                                                 \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-  _codecache_GC_threshold (\"CodeCache GC Threshold\"),\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/shared\/GCCause.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,6 +47,0 @@\n-    \/\/ Test double format for -XX:SweeperThreshold\n-    testDoubleFlagWithValue(\"-XX:SweeperThreshold\", \"10.0\");\n-\n-    \/\/ Test integer format -XX:SweeperThreshold\n-    testDoubleFlagWithValue(\"-XX:SweeperThreshold\", \"10\");\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/DoubleFlagWithIntegerValue.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"}]}