{"files":[{"patch":"@@ -48,12 +48,0 @@\n-\n-int ClassLoaderHierarchyDCmd::num_arguments() {\n-  ResourceMark rm;\n-  ClassLoaderHierarchyDCmd* dcmd = new ClassLoaderHierarchyDCmd(nullptr, false);\n-  if (dcmd != nullptr) {\n-    DCmdMark mark(dcmd);\n-    return dcmd->_dcmdparser.num_arguments();\n-  } else {\n-    return 0;\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/classfile\/classLoaderHierarchyDCmd.cpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-  static int num_arguments();\n+  static int num_arguments() { return 3; }\n","filename":"src\/hotspot\/share\/classfile\/classLoaderHierarchyDCmd.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -450,10 +450,0 @@\n-int JfrConfigureFlightRecorderDCmd::num_arguments() {\n-  ResourceMark rm;\n-  JfrConfigureFlightRecorderDCmd* dcmd = new JfrConfigureFlightRecorderDCmd(NULL, false);\n-  if (dcmd != NULL) {\n-    DCmdMark mark(dcmd);\n-    return dcmd->_dcmdparser.num_arguments();\n-  }\n-  return 0;\n-}\n-\n","filename":"src\/hotspot\/share\/jfr\/dcmd\/jfrDcmds.cpp","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -180,1 +180,1 @@\n-  static int num_arguments();\n+  static int num_arguments() { return 9; }\n","filename":"src\/hotspot\/share\/jfr\/dcmd\/jfrDcmds.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,11 +48,0 @@\n-int LogDiagnosticCommand::num_arguments() {\n-  ResourceMark rm;\n-  LogDiagnosticCommand* dcmd = new LogDiagnosticCommand(nullptr, false);\n-  if (dcmd != nullptr) {\n-    DCmdMark mark(dcmd);\n-    return dcmd->_dcmdparser.num_arguments();\n-  } else {\n-    return 0;\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/logging\/logDiagnosticCommand.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-  static int num_arguments();\n+  static int num_arguments() { return 7; }\n","filename":"src\/hotspot\/share\/logging\/logDiagnosticCommand.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,11 +61,0 @@\n-int MetaspaceDCmd::num_arguments() {\n-  ResourceMark rm;\n-  MetaspaceDCmd* dcmd = new MetaspaceDCmd(nullptr, false);\n-  if (dcmd != nullptr) {\n-    DCmdMark mark(dcmd);\n-    return dcmd->_dcmdparser.num_arguments();\n-  } else {\n-    return 0;\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceDCmd.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-  static int num_arguments();\n+  static int num_arguments() { return 8; }\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceDCmd.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1076,11 +1076,0 @@\n-int ThreadDumpToFileDCmd::num_arguments() {\n-  ResourceMark rm;\n-  ThreadDumpToFileDCmd* dcmd = new ThreadDumpToFileDCmd(nullptr, false);\n-  if (dcmd != nullptr) {\n-    DCmdMark mark(dcmd);\n-    return dcmd->_dcmdparser.num_arguments();\n-  } else {\n-    return 0;\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+  static int num_arguments() { return 2; }\n@@ -116,0 +117,1 @@\n+  static int num_arguments() { return 1; }\n@@ -138,0 +140,1 @@\n+  static int num_arguments() { return 2; }\n@@ -179,0 +182,1 @@\n+  static int num_arguments() { return 2; }\n@@ -219,0 +223,1 @@\n+  static int num_arguments() { return 1; }\n@@ -319,0 +324,1 @@\n+  static int num_arguments() { return 4; }\n@@ -345,0 +351,1 @@\n+  static int num_arguments() { return 2; }\n@@ -369,0 +376,1 @@\n+  static int num_arguments() { return 3; }\n@@ -395,0 +403,1 @@\n+  static int num_arguments() { return 2; }\n@@ -410,1 +419,0 @@\n-  static int num_arguments();\n@@ -421,0 +429,1 @@\n+  static int num_arguments() { return 2; }\n@@ -472,0 +481,2 @@\n+  static int num_arguments() { return 21; }\n+\n@@ -635,0 +646,1 @@\n+  static int num_arguments() { return 2; }\n@@ -699,0 +711,1 @@\n+  static int num_arguments() { return 1; }\n@@ -784,0 +797,1 @@\n+  static int num_arguments() { return 1; }\n@@ -806,0 +820,1 @@\n+  static int num_arguments() { return 1; }\n@@ -828,0 +843,1 @@\n+  static int num_arguments() { return 1; }\n@@ -850,0 +866,1 @@\n+  static int num_arguments() { return 1; }\n@@ -894,0 +911,1 @@\n+  static int num_arguments() { return 2; }\n@@ -920,0 +938,1 @@\n+  static int num_arguments() { return 3; }\n@@ -934,1 +953,0 @@\n-  static int num_arguments();\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.hpp","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -279,3 +279,1 @@\n-  \/\/ - For subclasses of DCmdWithParser, it's calculated by DCmdParser::num_arguments().\n-  \/\/ - Other subclasses of DCmd have zero arguments by default. You can change this\n-  \/\/   by defining your own version of MyDCmd::num_arguments().\n+  \/\/ All subclasses should override this to report the actual number of arguments.\n@@ -443,1 +441,1 @@\n-  static int get_num_arguments() {\n+  static int get_parsed_num_arguments() {\n@@ -448,1 +446,1 @@\n-  static int get_num_arguments() {\n+  static int get_parsed_num_arguments() {\n@@ -458,0 +456,13 @@\n+\n+  template <typename T, ENABLE_IF(std::is_convertible<T, DCmd>::value)>\n+  static int get_num_arguments() {\n+    int n_args = T::num_arguments();\n+#ifdef ASSERT\n+    int n_parsed_args = get_parsed_num_arguments<T>();\n+    assert(n_args == n_parsed_args,\n+           \"static argument count %d does not match parsed argument count %d\",\n+           n_args, n_parsed_args);\n+#endif\n+    return n_args;\n+  }\n+\n","filename":"src\/hotspot\/share\/services\/diagnosticFramework.hpp","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+  static int num_arguments() { return 7; }\n","filename":"src\/hotspot\/share\/services\/nmtDCmd.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}