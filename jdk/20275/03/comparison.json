{"files":[{"patch":"@@ -6391,1 +6391,1 @@\n-instruct cmovL_imm_01(rRegL dst, immI_1 src, rFlagsReg cr, cmpOp cop)\n+instruct cmovL_imm_01(rRegL dst, immL1 src, rFlagsReg cr, cmpOp cop)\n@@ -6429,1 +6429,1 @@\n-instruct cmovL_imm_01U(rRegL dst, immI_1 src, rFlagsRegU cr, cmpOpU cop)\n+instruct cmovL_imm_01U(rRegL dst, immL1 src, rFlagsRegU cr, cmpOpU cop)\n@@ -6455,1 +6455,1 @@\n-instruct cmovL_imm_01UCF(rRegL dst, immI_1 src, rFlagsRegUCF cr, cmpOpUCF cop)\n+instruct cmovL_imm_01UCF(rRegL dst, immL1 src, rFlagsRegUCF cr, cmpOpUCF cop)\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * bug 8336860\n+ * @summary Verify codegen for CMoveL with constants 0 and 1\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.CMoveLConstants\n+ *\/\n+public class CMoveLConstants {\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Test\n+    @IR(applyIfPlatform = {\"x64\", \"true\"}, counts = {IRNode.X86_CMOVEL_IMM01, \"1\"}, phase = CompilePhase.FINAL_CODE)\n+    public static long testSigned(int a, int b) {\n+        return a > b ? 1L : 0L;\n+    }\n+\n+    @Test\n+    @IR(applyIfPlatform = {\"x64\", \"true\"}, counts = {IRNode.X86_CMOVEL_IMM01U, \"1\"}, phase = CompilePhase.FINAL_CODE)\n+    public static long testUnsigned(int a, int b) {\n+        return Integer.compareUnsigned(a, b) > 0 ? 1L : 0L;\n+    }\n+\n+    @Test\n+    @IR(applyIfPlatform = {\"x64\", \"true\"}, counts = {IRNode.X86_CMOVEL_IMM01UCF, \"1\"}, phase = CompilePhase.FINAL_CODE)\n+    public static long testFloat(float a, float b) {\n+        return a > b ? 1L : 0L;\n+    }\n+\n+    @DontCompile\n+    public void assertResults(int a, int b) {\n+        Asserts.assertEQ(a > b ? 1L : 0L, testSigned(a, b));\n+        Asserts.assertEQ(Integer.compareUnsigned(a, b) > 0 ? 1L : 0L, testUnsigned(a, b));\n+        Asserts.assertEQ((float) a > (float) b ? 1L : 0L, testFloat(a, b));\n+    }\n+\n+    @Run(test = {\"testSigned\", \"testUnsigned\", \"testFloat\"})\n+    public void runMethod() {\n+        assertResults(10, 20);\n+        assertResults(20, 10);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/CMoveLConstants.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -2236,0 +2236,15 @@\n+    public static final String X86_CMOVEL_IMM01 = PREFIX + \"X86_CMOVEL_IMM01\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(X86_CMOVEL_IMM01, \"cmovL_imm_01\");\n+    }\n+\n+    public static final String X86_CMOVEL_IMM01U = PREFIX + \"X86_CMOVEL_IMM01U\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(X86_CMOVEL_IMM01U, \"cmovL_imm_01U\");\n+    }\n+\n+    public static final String X86_CMOVEL_IMM01UCF = PREFIX + \"X86_CMOVEL_IMM01UCF\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(X86_CMOVEL_IMM01UCF, \"cmovL_imm_01UCF\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import java.util.Random;\n+\n@@ -41,0 +43,10 @@\n+    @Setup(Level.Iteration)\n+    public void setup() {\n+        Random random = new Random(1000);\n+\n+        for (int i = 0; i < 1024; i++) {\n+            INT_ARRAY[i] = random.nextInt();\n+            LONG_ARRAY[i] = random.nextLong();\n+        }\n+    }\n+\n@@ -128,0 +140,7 @@\n+\n+    @Benchmark\n+    public void cmovL_imm_01(Blackhole bh) {\n+        for (int i = 0; i < INT_ARRAY.length; i++) {\n+            bh.consume(INT_ARRAY[i] > 0 ? 1L : 0L);\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/x86\/BasicRules.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"}]}