{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -178,8 +178,0 @@\n-\n-    @Benchmark\n-    public void cmovConstant01(Blackhole bh) {\n-        for (int i = 0; i < size; i++) {\n-            long r = longArraySmall[i] > bound ? 1L : 0L;\n-            bh.consume(r);\n-        }\n-    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/Longs.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import java.util.Random;\n+\n@@ -41,0 +43,10 @@\n+    @Setup(Level.Iteration)\n+    public void setup() {\n+        Random random = new Random(1000);\n+\n+        for (int i = 0; i < 1024; i++) {\n+            INT_ARRAY[i] = random.nextInt();\n+            LONG_ARRAY[i] = random.nextLong();\n+        }\n+    }\n+\n@@ -128,0 +140,7 @@\n+\n+    @Benchmark\n+    public void cmovL_imm_01(Blackhole bh) {\n+        for (int i = 0; i < INT_ARRAY.length; i++) {\n+            bh.consume(INT_ARRAY[i] > 0 ? 1L : 0L);\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/x86\/BasicRules.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"}]}