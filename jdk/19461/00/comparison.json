{"files":[{"patch":"@@ -33,0 +33,1 @@\n+#include \"utilities\/debug.hpp\"\n@@ -34,0 +35,6 @@\n+#include \"utilities\/ostream.hpp\"\n+\n+#define INDENT_BY(num_chars, CODE) { \\\n+  streamIndentor si(out, num_chars); \\\n+  { CODE }                           \\\n+}\n@@ -45,0 +52,9 @@\n+MemReporterBase::MemReporterBase(outputStream* out, size_t scale) :\n+  _scale(scale), _output(out) {\n+  _output->set_autoindent(true);\n+}\n+\n+MemReporterBase::~MemReporterBase() {\n+  _output->set_autoindent(false);\n+}\n+\n@@ -107,13 +123,1 @@\n-void MemReporterBase::print_malloc_line(const MemoryCounter* c) const {\n-  output()->print(\"%28s\", \" \");\n-  print_malloc(c);\n-  output()->print_cr(\" \");\n-}\n-\n-void MemReporterBase::print_virtual_memory_line(size_t reserved, size_t committed, size_t peak) const {\n-  output()->print(\"%28s\", \" \");\n-  print_virtual_memory(reserved, committed, peak);\n-  output()->print_cr(\" \");\n-}\n-\n-void MemReporterBase::print_arena_line(const MemoryCounter* c) const {\n+void MemReporterBase::print_arena(const MemoryCounter* c) const {\n@@ -126,2 +130,2 @@\n-  out->print(\"%27s (arena=\" SIZE_FORMAT \"%s #\" SIZE_FORMAT \")\", \"\",\n-    amount_in_current_scale(amount), scale, count);\n+  out->print(\"(arena=\" SIZE_FORMAT \"%s #\" SIZE_FORMAT \")\",\n+             amount_in_current_scale(amount), scale, count);\n@@ -137,2 +141,0 @@\n-\n-  out->cr();\n@@ -158,1 +160,3 @@\n-  out->print_cr(\"\\nNative Memory Tracking:\\n\");\n+  out->cr();\n+  out->print_cr(\"Native Memory Tracking:\");\n+  out->cr();\n@@ -168,7 +172,9 @@\n-  out->print_cr(\"       malloc: \" SIZE_FORMAT \"%s #\" SIZE_FORMAT \", peak=\" SIZE_FORMAT \"%s #\" SIZE_FORMAT,\n-                amount_in_current_scale(total_malloced_bytes), current_scale(),\n-                _malloc_snapshot->total_count(),\n-                amount_in_current_scale(_malloc_snapshot->total_peak()),\n-                current_scale(), _malloc_snapshot->total_peak_count());\n-  out->print(\"       mmap:   \");\n-  print_total(total_mmap_reserved_bytes, total_mmap_committed_bytes);\n+  INDENT_BY(7,\n+    out->print_cr(\"malloc: \" SIZE_FORMAT \"%s #\" SIZE_FORMAT \", peak=\" SIZE_FORMAT \"%s #\" SIZE_FORMAT,\n+                  amount_in_current_scale(total_malloced_bytes), current_scale(),\n+                  _malloc_snapshot->total_count(),\n+                  amount_in_current_scale(_malloc_snapshot->total_peak()),\n+                  current_scale(), _malloc_snapshot->total_peak_count());\n+    out->print(\"mmap:   \");\n+    print_total(total_mmap_reserved_bytes, total_mmap_committed_bytes);\n+  )\n@@ -220,1 +226,2 @@\n-  out->print(\"-%26s (\", NMTUtil::flag_to_name(flag));\n+  constexpr int indent = 28;\n+  out->print(\"-%*s (\", indent - 2, NMTUtil::flag_to_name(flag));\n@@ -231,0 +238,2 @@\n+  streamIndentor si(out, indent);\n+\n@@ -233,4 +242,3 @@\n-    out->print_cr(\"%27s (classes #\" SIZE_FORMAT \")\",\n-      \" \", (_instance_class_count + _array_class_count));\n-    out->print_cr(\"%27s (  instance classes #\" SIZE_FORMAT \", array classes #\" SIZE_FORMAT \")\",\n-      \" \", _instance_class_count, _array_class_count);\n+    out->print_cr(\"(classes #\" SIZE_FORMAT \")\", (_instance_class_count + _array_class_count));\n+    out->print_cr(\"(  instance classes #\" SIZE_FORMAT \", array classes #\" SIZE_FORMAT \")\",\n+                  _instance_class_count, _array_class_count);\n@@ -241,2 +249,2 @@\n-    out->print_cr(\"%27s (threads #\" SIZE_FORMAT \")\", \" \", ThreadStackTracker::thread_count());\n-    out->print(\"%27s (stack: \", \" \");\n+    out->print_cr(\"(threads #\" SIZE_FORMAT \")\", ThreadStackTracker::thread_count());\n+    out->print(\"(stack: \");\n@@ -249,1 +257,2 @@\n-    print_malloc_line(malloc_memory->malloc_counter());\n+    print_malloc(malloc_memory->malloc_counter());\n+    out->cr();\n@@ -253,1 +262,2 @@\n-    print_virtual_memory_line(virtual_memory->reserved(), virtual_memory->committed(), virtual_memory->peak_size());\n+    print_virtual_memory(virtual_memory->reserved(), virtual_memory->committed(), virtual_memory->peak_size());\n+    out->cr();\n@@ -257,1 +267,2 @@\n-    print_arena_line(malloc_memory->arena_counter());\n+    print_arena(malloc_memory->arena_counter());\n+    out->cr();\n@@ -262,2 +273,2 @@\n-    out->print_cr(\"%27s (tracking overhead=\" SIZE_FORMAT \"%s)\", \" \",\n-      amount_in_current_scale(_malloc_snapshot->malloc_overhead()), scale);\n+    out->print_cr(\"(tracking overhead=\" SIZE_FORMAT \"%s)\",\n+                   amount_in_current_scale(_malloc_snapshot->malloc_overhead()), scale);\n@@ -271,1 +282,1 @@\n-  out->print_cr(\" \");\n+  out->cr();\n@@ -287,2 +298,2 @@\n-  out->print_cr(\"%27s (  %s)\", \" \", name);\n-  out->print(\"%27s (    \", \" \");\n+  out->print_cr(\"(  %s)\", name);\n+  out->print(\"(    \");\n@@ -291,3 +302,3 @@\n-  out->print_cr(\"%27s (    used=\" SIZE_FORMAT \"%s)\", \" \", amount_in_current_scale(stats.used()), scale);\n-  out->print_cr(\"%27s (    waste=\" SIZE_FORMAT \"%s =%2.2f%%)\", \" \", amount_in_current_scale(waste),\n-    scale, waste_percentage);\n+  out->print_cr(\"(    used=\" SIZE_FORMAT \"%s)\", amount_in_current_scale(stats.used()), scale);\n+  out->print_cr(\"(    waste=\" SIZE_FORMAT \"%s =%2.2f%%)\", amount_in_current_scale(waste),\n+                scale, waste_percentage);\n@@ -328,1 +339,0 @@\n-    out->print(\"%29s\", \" \");\n@@ -332,2 +342,6 @@\n-    print_malloc(malloc_site->counter(), flag);\n-    out->print_cr(\"\\n\");\n+    INDENT_BY(29,\n+      out->print(\"(\");\n+      print_malloc(malloc_site->counter(), flag);\n+      out->print_cr(\")\");\n+    )\n+    out->cr();\n@@ -345,0 +359,1 @@\n+\n@@ -361,7 +376,10 @@\n-    out->print(\"%28s (\", \" \");\n-    print_total(virtual_memory_site->reserved(), virtual_memory_site->committed());\n-    MEMFLAGS flag = virtual_memory_site->flag();\n-    if (flag != mtNone) {\n-      out->print(\" Type=%s\", NMTUtil::flag_to_name(flag));\n-    }\n-    out->print_cr(\")\\n\");\n+    INDENT_BY(29,\n+      out->print(\"(\");\n+      print_total(virtual_memory_site->reserved(), virtual_memory_site->committed());\n+      const MEMFLAGS flag = virtual_memory_site->flag();\n+      if (flag != mtNone) {\n+        out->print(\" Type=%s\", NMTUtil::flag_to_name(flag));\n+      }\n+      out->print_cr(\")\");\n+    )\n+    out->cr();\n@@ -404,1 +422,1 @@\n-  out->print_cr(\" \");\n+  out->cr();\n@@ -408,1 +426,1 @@\n-    out->print_cr(\" \");\n+    out->cr();\n@@ -411,1 +429,1 @@\n-    stack->print_on(out, 4);\n+    INDENT_BY(4, stack->print_on(out);)\n@@ -432,8 +450,10 @@\n-    out->print(\"\\n\\t\");\n-    print_virtual_memory_region(\"committed\", committed_rgn->base(), committed_rgn->size());\n-    if (stack->is_empty()) {\n-      out->print_cr(\" \");\n-    } else {\n-      out->print_cr(\" from\");\n-      stack->print_on(out, 12);\n-    }\n+    out->cr();\n+    INDENT_BY(8,\n+      print_virtual_memory_region(\"committed\", committed_rgn->base(), committed_rgn->size());\n+      if (stack->is_empty()) {\n+        out->cr();\n+      } else {\n+        out->print_cr(\" from\");\n+        INDENT_BY(4, stack->print_on(out);)\n+      }\n+    )\n@@ -445,1 +465,3 @@\n-  out->print_cr(\"\\nNative Memory Tracking:\\n\");\n+  out->cr();\n+  out->print_cr(\"Native Memory Tracking:\");\n+  out->cr();\n@@ -458,1 +480,2 @@\n-  out->print_cr(\"\\n\");\n+  out->cr();\n+  out->cr();\n@@ -543,0 +566,1 @@\n+  constexpr int indent = 28;\n@@ -576,1 +600,1 @@\n-    out->print(\"-%26s (\", NMTUtil::flag_to_name(flag));\n+    out->print(\"-%*s (\", indent - 2, NMTUtil::flag_to_name(flag));\n@@ -581,0 +605,2 @@\n+    streamIndentor si(out, indent);\n+\n@@ -584,1 +610,1 @@\n-      out->print(\"%27s (classes #\" SIZE_FORMAT \"\", \" \", _current_baseline.class_count());\n+      out->print(\"(classes #\" SIZE_FORMAT, _current_baseline.class_count());\n@@ -592,1 +618,1 @@\n-      out->print(\"%27s (  instance classes #\" SIZE_FORMAT, \" \", _current_baseline.instance_class_count());\n+      out->print(\"(  instance classes #\" SIZE_FORMAT, _current_baseline.instance_class_count());\n@@ -608,1 +634,1 @@\n-      out->print(\"%27s (threads #\" SIZE_FORMAT \"\", \" \", _current_baseline.thread_count());\n+      out->print(\"(threads #\" SIZE_FORMAT, _current_baseline.thread_count());\n@@ -615,1 +641,1 @@\n-      out->print(\"%27s (stack: \", \" \");\n+      out->print(\"(stack: \");\n@@ -633,1 +659,1 @@\n-      out->print(\"%28s(\", \" \");\n+      out->print(\"(\");\n@@ -642,1 +668,1 @@\n-      out->print(\"%27s (mmap: \", \" \");\n+      out->print(\"(mmap: \");\n@@ -651,1 +677,1 @@\n-      out->print(\"%28s(\", \" \");\n+      out->print(\"(\");\n@@ -662,2 +688,2 @@\n-      out->print(\"%27s (tracking overhead=\" SIZE_FORMAT \"%s\", \" \",\n-        amount_in_current_scale(_current_baseline.malloc_tracking_overhead()), scale);\n+      out->print(\"(tracking overhead=\" SIZE_FORMAT \"%s\",\n+                 amount_in_current_scale(_current_baseline.malloc_tracking_overhead()), scale);\n@@ -674,1 +700,1 @@\n-    out->print_cr(\" \");\n+    out->cr();\n@@ -692,2 +718,2 @@\n-  out->print_cr(\"%27s: (  %s)\", \" \", header);\n-  out->print(\"%27s (    \", \" \");\n+  out->print_cr(\"(  %s)\", header);\n+  out->print(\"(    \");\n@@ -708,2 +734,2 @@\n-  out->print(\"%27s (    used=\" SIZE_FORMAT \"%s\", \" \",\n-    amount_in_current_scale(current_stats.used()), scale);\n+  out->print(\"(    used=\" SIZE_FORMAT \"%s\",\n+             amount_in_current_scale(current_stats.used()), scale);\n@@ -718,2 +744,2 @@\n-  out->print(\"%27s (    waste=\" SIZE_FORMAT \"%s =%2.2f%%\", \" \",\n-    amount_in_current_scale(current_waste), scale, waste_percentage);\n+  out->print(\"(    waste=\" SIZE_FORMAT \"%s =%2.2f%%\",\n+             amount_in_current_scale(current_waste), scale, waste_percentage);\n@@ -836,3 +862,6 @@\n-  out->print(\"%28s (\", \" \");\n-  print_malloc_diff(current_size, current_count,\n-    early_size, early_count, flags);\n+  INDENT_BY(28,\n+    out->print(\"(\");\n+    print_malloc_diff(current_size, current_count, early_size, early_count, flags);\n+    out->print_cr(\")\");\n+  )\n+  out->cr();\n@@ -840,1 +869,0 @@\n-  out->print_cr(\")\\n\");\n@@ -869,9 +897,9 @@\n-  out->print(\"%28s (mmap: \", \" \");\n-  print_virtual_memory_diff(current_reserved, current_committed,\n-    early_reserved, early_committed);\n-\n-  if (flag != mtNone) {\n-    out->print(\" Type=%s\", NMTUtil::flag_to_name(flag));\n-  }\n-\n-  out->print_cr(\")\\n\");\n+  INDENT_BY(28,\n+    out->print(\"(mmap: \");\n+    print_virtual_memory_diff(current_reserved, current_committed, early_reserved, early_committed);\n+    if (flag != mtNone) {\n+      out->print(\" Type=%s\", NMTUtil::flag_to_name(flag));\n+    }\n+    out->print_cr(\")\");\n+  )\n+  out->cr();\n","filename":"src\/hotspot\/share\/nmt\/memReporter.cpp","additions":124,"deletions":96,"binary":false,"changes":220,"status":"modified"},{"patch":"@@ -48,3 +48,2 @@\n-  MemReporterBase(outputStream* out, size_t scale = default_scale) :\n-    _scale(scale), _output(out)\n-  {}\n+  MemReporterBase(outputStream* out, size_t scale = default_scale);\n+  ~MemReporterBase();\n@@ -113,4 +112,1 @@\n-\n-  void print_malloc_line(const MemoryCounter* c) const;\n-  void print_virtual_memory_line(size_t reserved, size_t committed, size_t peak) const;\n-  void print_arena_line(const MemoryCounter* c) const;\n+  void print_arena(const MemoryCounter* c) const;\n","filename":"src\/hotspot\/share\/nmt\/memReporter.hpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -74,4 +74,0 @@\n-void NativeCallStack::print_on(outputStream* out) const {\n-  print_on(out, 0);\n-}\n-\n@@ -79,1 +75,1 @@\n-void NativeCallStack::print_on(outputStream* out, int indent) const {\n+void NativeCallStack::print_on(outputStream* out) const {\n@@ -85,1 +81,0 @@\n-    out->fill_to(indent);\n@@ -91,1 +86,0 @@\n-      out->fill_to(indent);\n","filename":"src\/hotspot\/share\/utilities\/nativeCallStack.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -127,1 +127,0 @@\n-  void print_on(outputStream* out, int indent) const;\n","filename":"src\/hotspot\/share\/utilities\/nativeCallStack.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,8 +47,0 @@\n-outputStream::outputStream() {\n-  _position    = 0;\n-  _precount    = 0;\n-  _indentation = 0;\n-  _scratch     = nullptr;\n-  _scratch_len = 0;\n-}\n-\n@@ -59,0 +51,1 @@\n+  _autoindent  = false;\n@@ -140,0 +133,3 @@\n+  if (_autoindent && _position == 0) {\n+    indent();\n+  }\n@@ -169,0 +165,7 @@\n+void outputStream::print_raw(const char* str, size_t len) {\n+  if (_autoindent && _position == 0) {\n+    indent();\n+  }\n+  write(str, len);\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/ostream.cpp","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -48,0 +48,2 @@\n+   int _indentation; \/\/ current indentation\n+   bool _autoindent; \/\/ if true, every line starts with indentation\n@@ -50,1 +52,0 @@\n-   int _indentation; \/\/ current indentation\n@@ -73,2 +74,1 @@\n-   outputStream();\n-   outputStream(bool has_time_stamps);\n+   outputStream(bool has_time_stamps = false);\n@@ -82,2 +82,0 @@\n-   int  indentation() const    { return _indentation; }\n-   void set_indentation(int i) { _indentation = i;    }\n@@ -87,0 +85,7 @@\n+   \/\/ Automatic indentation:\n+   \/\/ If autoindent mode is on, the following APIs will automatically indent\n+   \/\/ line starts depending on the current indentation level:\n+   \/\/ print(), print_cr(), print_raw(), print_raw_cr()\n+   \/\/ Other APIs are unaffected\n+   void set_autoindent(bool value) { _autoindent = value; }\n+\n@@ -98,4 +103,4 @@\n-   void print_raw(const char* str)            { write(str, strlen(str)); }\n-   void print_raw(const char* str, size_t len)   { write(str,         len); }\n-   void print_raw_cr(const char* str)         { write(str, strlen(str)); cr(); }\n-   void print_raw_cr(const char* str, size_t len){ write(str,         len); cr(); }\n+   void print_raw(const char* str)                { print_raw(str, strlen(str)); }\n+   void print_raw(const char* str, size_t len);\n+   void print_raw_cr(const char* str)             { print_raw(str); cr(); }\n+   void print_raw_cr(const char* str, size_t len) { print_raw(str, len); cr(); }\n","filename":"src\/hotspot\/share\/utilities\/ostream.hpp","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -106,0 +106,47 @@\n+static void test_autoindent(bool on) {\n+  stringStream ss;\n+  ss.set_autoindent(on);\n+  {\n+    streamIndentor si(&ss, 5);\n+    ss.print(\"ABC\");\n+    ss.print(\"DEF\");\n+    ss.cr();\n+    ss.print_cr(\"0123\");\n+    {\n+      streamIndentor si(&ss, 5);\n+      ss.print_cr(\"4567\");\n+      ss.print_raw(\"89AB\");\n+      ss.print_raw(\"CDEXXXX\", 3);\n+      ss.print_raw_cr(\"XYZ\");\n+    }\n+    ss.print(\"%u\", 100);\n+    ss.print_raw(\"KB\");\n+    ss.cr();\n+  }\n+  ss.print(\"end\");\n+\n+  if (on) {\n+    EXPECT_STREQ(ss.base(),\n+        \"     ABCDEF\\n\"\n+        \"     0123\\n\"\n+        \"          4567\\n\"\n+        \"          89ABCDEXYZ\\n\"\n+        \"     100KB\\n\"\n+        \"end\"\n+    );\n+  } else {\n+    \/\/ no autoindent: calls should work as always without indentation\n+    EXPECT_STREQ(ss.base(),\n+        \"ABCDEF\\n\"\n+        \"0123\\n\"\n+        \"4567\\n\"\n+        \"89ABCDEXYZ\\n\"\n+        \"100KB\\n\"\n+        \"end\"\n+    );\n+  }\n+}\n+\n+TEST_VM(ostream, autoindent_on)  { test_autoindent(true);  }\n+TEST_VM(ostream, autoindent_off) { test_autoindent(false); }\n+\n","filename":"test\/hotspot\/gtest\/utilities\/test_ostream.cpp","additions":47,"deletions":0,"binary":false,"changes":47,"status":"modified"}]}