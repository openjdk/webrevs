{"files":[{"patch":"@@ -54,1 +54,1 @@\n-     * @param outLevel the level above which messages will be directly\n+     * @param outLevel the level at or above which messages will be directly\n@@ -56,1 +56,1 @@\n-     * @param errLevel the level above which messages will be directly\n+     * @param errLevel the level at or above which messages will be directly\n@@ -58,1 +58,1 @@\n-     * @param logLevel the level above which messages will be forwarded\n+     * @param logLevel the level at or above which messages will be forwarded\n@@ -68,1 +68,1 @@\n-        \/\/ true if at least on of the three levels is not Level.OFF\n+        \/\/ true if at least one of the three levels is not Level.OFF\n@@ -70,1 +70,1 @@\n-            return minSeverity() <= Level.OFF.getSeverity();\n+            return minSeverity() < Level.OFF.getSeverity();\n@@ -72,0 +72,1 @@\n+\n@@ -78,0 +79,1 @@\n+\n@@ -103,1 +105,1 @@\n-        public static final LoggerConfig STDOUT = new LoggerConfig(Level.OFF, Level.ALL, Level.OFF);\n+        public static final LoggerConfig STDOUT = new LoggerConfig(Level.ALL, Level.OFF, Level.OFF);\n@@ -108,0 +110,11 @@\n+        \/** logs on both System.err and System.Logger **\/\n+        public static final LoggerConfig ERRLOG = new LoggerConfig(Level.OFF, Level.ALL, Level.ALL);\n+\n+        public static LoggerConfig of(LoggerConfig config) {\n+            if (config.equals(OFF)) return OFF;\n+            if (config.equals(ERRLOG)) return ERRLOG;\n+            if (config.equals(STDERR)) return STDERR;\n+            if (config.equals(STDOUT)) return STDOUT;\n+            if (config.equals(LOG)) return LOG;\n+            return config;\n+        }\n@@ -120,1 +133,1 @@\n-            new DebugLogger(HTTP, \"WS\"::toString, LoggerConfig.OFF);\n+            new DebugLogger(WS, \"WS\"::toString, LoggerConfig.OFF);\n@@ -122,1 +135,1 @@\n-            new DebugLogger(HTTP, \"HPACK\"::toString, LoggerConfig.OFF);\n+            new DebugLogger(HPACK, \"HPACK\"::toString, LoggerConfig.OFF);\n@@ -161,1 +174,1 @@\n-     *               This should be either {@link #WS}, {@link #HPACK}, or {@link #HTTP};\n+     *               This is typically either {@link #WS}, {@link #HPACK}, or {@link #HTTP};\n@@ -165,1 +178,1 @@\n-     * @param config The levels above which messages will be printed to the\n+     * @param config The levels at or above which messages will be printed to the\n@@ -174,1 +187,1 @@\n-        this.config = Objects.requireNonNull(config);\n+        this.config = LoggerConfig.of(Objects.requireNonNull(config));\n@@ -198,1 +211,1 @@\n-    static boolean levelEnabledFor(Level level, LoggerConfig config,\n+    private static boolean levelEnabledFor(Level level, LoggerConfig config,\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/DebugLogger.java","additions":25,"deletions":12,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -975,1 +975,1 @@\n-        return DebugLogger.createWebSocketLogger(dbgTag, DEBUG_CONFIG);\n+        return DebugLogger.createWebSocketLogger(dbgTag, DEBUG_WS_CONFIG);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/Utils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import java.lang.ref.Reference;\n@@ -34,1 +35,0 @@\n-import java.util.Optional;\n@@ -37,1 +37,0 @@\n-import java.util.function.Function;\n@@ -85,1 +84,1 @@\n-     * interceptor to record anything printed on {@code }System.err}\n+     * interceptor to record anything printed on {@code System.err}\n@@ -260,1 +259,1 @@\n-        doTest(() -> debug.log(MESSAGE), logHandler, dest, MESSAGE, matcher1);\n+        doTest(() -> debug.log(MESSAGE), debug, logHandler, dest, MESSAGE, matcher1);\n@@ -265,1 +264,1 @@\n-        doTest(() -> debug.log(MESSAGE2, thrown), logHandler, dest, MESSAGE2, matcher2);\n+        doTest(() -> debug.log(MESSAGE2, thrown), debug, logHandler, dest, MESSAGE2, matcher2);\n@@ -267,0 +266,1 @@\n+        Reference.reachabilityFence(julLogger);\n@@ -270,0 +270,1 @@\n+                               System.Logger logger,\n@@ -287,0 +288,5 @@\n+        if (!(logger instanceof jdk.internal.net.http.common.Logger debug)) {\n+            throw new AssertionError(\"Unexpected logger type for: \" + logger);\n+        }\n+        assertEquals(debug.on(), !dest.isEmpty(), \"Unexpected debug.on() for \" + dest);\n+        assertEquals(debug.isLoggable(System.Logger.Level.DEBUG), !dest.isEmpty());\n@@ -319,0 +325,6 @@\n+    static void assertEquals(Object o1, Object o2, String message) {\n+        if (!Objects.equals(o1, o2)) {\n+            throw new AssertionError(message + \": \\\"\"\n+                    + o1 + \"\\\" != \\\"\" + o2 + \"\\\"\");\n+        }\n+    }\n","filename":"test\/jdk\/java\/net\/httpclient\/DebugLoggerTest.java","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"}]}