{"files":[{"patch":"@@ -57,0 +57,2 @@\n+    private static final Pattern DF_PATTERN = Pattern.compile(\"([^\\\\s]+)\\\\s+(\\\\d+)\\\\s+(\\\\d+)\\\\s+(\\\\d+)\\\\s+\\\\d+%\\\\s+([^\\\\s].*)\\n\");\n+\n@@ -107,2 +109,11 @@\n-            if (getSpace0(name, sizes))\n-                System.err.println(\"WARNING: total space is estimated\");\n+            if (Platform.isWindows() & isCDDrive(name)) {\n+                try {\n+                    sizes = getCDDriveSpace(name);\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                    throw new RuntimeException(\"can't get CDDrive sizes\");\n+                }\n+            } else {\n+                if (getSpace0(name, sizes))\n+                    System.err.println(\"WARNING: total space is estimated\");\n+            }\n@@ -170,1 +181,2 @@\n-        out.format(fmt, \"getSpace0\", s.total(), s.free(), s.available());\n+        String method = Platform.isWindows() & isCDDrive(s.name()) ? \"getCDDriveSpace\" : \"getSpace0\";\n+        out.format(fmt, method, s.total(), s.free(), s.available());\n@@ -327,1 +339,1 @@\n-        \/\/ returned by File::getXSpace are equivalent to those from getSpace0\n+        \/\/ returned by File::getXSpace are equivalent to those from getSpace0 or getCDDriveSpace\n@@ -400,0 +412,40 @@\n+\n+    private static native boolean isCDDrive(String root);\n+\n+    private static long[] getCDDriveSpace(String root) throws IOException {\n+        long[] sizes = new long[4];\n+        String cmd = \"df -k -P \" + root;\n+        StringBuilder sb = new StringBuilder();\n+        ProcessBuilder pb = new ProcessBuilder(\"bash\", \"-c\", cmd);;\n+        pb.redirectErrorStream(true);\n+        Process p = pb.start();\n+\n+        try (BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()))) {\n+            String s;\n+            int i = 0;\n+            while ((s = in.readLine()) != null) {\n+                \/\/ skip header\n+                if (i++ == 0) continue;\n+                sb.append(s).append(\"\\n\");\n+            }\n+        }\n+        out.println(sb);\n+\n+        Matcher m = DF_PATTERN.matcher(sb);\n+        int j = 0;\n+        while (j < sb.length()) {\n+            if (m.find(j)) {\n+                sizes[0] = Long.parseLong(m.group(2)) * 1024;\n+                sizes[1] = Long.parseLong(m.group(3)) * 1024;\n+                sizes[2] = sizes[0] - sizes[1];\n+                sizes[3] = Long.parseLong(m.group(4)) * 1024;\n+                j = m.end();\n+            } else {\n+                throw new RuntimeException(\"unrecognized df output format: \"\n+                                           + \"charAt(\" + j + \") = '\"\n+                                           + sb.charAt(j) + \"'\");\n+            }\n+        }\n+\n+        return sizes;\n+    }\n","filename":"test\/jdk\/java\/io\/File\/GetXSpace.java","additions":56,"deletions":4,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -48,5 +48,0 @@\n-\n-BOOL isCDROM(LPCWSTR path) {\n-    UINT driveType = GetDriveTypeW(path);\n-    return (driveType == DRIVE_CDROM);\n-}\n@@ -87,1 +82,1 @@\n-    if (pfnGetDiskSpaceInformation != NULL && !isCDROM(path)) {\n+    if (pfnGetDiskSpaceInformation != NULL) {\n@@ -108,44 +103,0 @@\n-    } else if (isCDROM(path)) {\n-        \/\/ use df\n-        char cmd[256];\n-        snprintf(cmd, sizeof(cmd), \"df -k -P %ls 2>&1\", path);\n-\n-        FILE *fp = _popen(cmd, \"r\");\n-        if (fp == NULL) {\n-            (*env)->ReleaseStringChars(env, root, strchars);\n-            JNU_ThrowByNameWithLastError(env, \"java\/lang\/RuntimeException\",\n-                                         \"popen\");\n-            return JNI_FALSE;\n-        }\n-\n-        char buffer[1024];\n-        int i = 0;\n-        int found = 0;\n-        while (fgets(buffer, sizeof(buffer), fp) != NULL) {\n-            \/\/ skip header and error message containing \"No such file or directory\"\n-            \/\/ meaning that the CD-ROM drive does not have a disk mounted\n-            if (i++ == 0) continue;\n-\n-            char filesystem[256];\n-            long blocks, used, available;\n-            if (sscanf(buffer, \"%s %ld %ld %ld\", filesystem, &blocks, &used, &available) == 4) {\n-                array[0] = (jlong)blocks * 1024;\n-                array[1] = (jlong)used * 1024;\n-                array[2] = array[0] - array[1];\n-                array[3] = (jlong)available * 1024;\n-                found = 1;\n-                break;\n-            }\n-        }\n-\n-        _pclose(fp);\n-\n-        if (!found) {\n-            \/\/ df did not produce output\n-            array[0] = 0;\n-            array[1] = 0;\n-            array[2] = 0;\n-            array[3] = 0;\n-        }\n-\n-        (*env)->ReleaseStringChars(env, root, strchars);\n@@ -211,0 +162,24 @@\n+\n+JNIEXPORT jboolean JNICALL\n+Java_GetXSpace_isCDDrive\n+    (JNIEnv *env, jclass cls, jstring root)\n+{\n+    const jchar* strchars = (*env)->GetStringChars(env, root, NULL);\n+    if (strchars == NULL) {\n+        JNU_ThrowByNameWithLastError(env, \"java\/lang\/RuntimeException\",\n+                                     \"GetStringChars\");\n+        return JNI_FALSE;\n+    }\n+\n+    LPCWSTR path = (LPCWSTR)strchars;\n+    UINT driveType = GetDriveTypeW(path);\n+\n+    (*env)->ReleaseStringChars(env, root, strchars);\n+\n+    if (driveType != DRIVE_CDROM) {\n+        return JNI_FALSE;\n+    }\n+\n+    return JNI_TRUE;\n+}\n+\n","filename":"test\/jdk\/java\/io\/File\/libGetXSpace.c","additions":25,"deletions":50,"binary":false,"changes":75,"status":"modified"}]}