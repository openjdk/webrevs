{"files":[{"patch":"@@ -750,1 +750,2 @@\n-              region == Region.TEXT_PANE) {\n+              region == Region.TEXT_PANE ||\n+              region == Region.EDITOR_PANE) {\n@@ -754,2 +755,1 @@\n-            if (region == Region.EDITOR_PANE ||\n-                  region == Region.FORMATTED_TEXT_FIELD ||\n+            if (region == Region.FORMATTED_TEXT_FIELD ||\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/gtk\/GTKStyle.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,158 @@\n+\/*\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.GridLayout;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.image.BufferedImage;\n+\n+import javax.swing.JEditorPane;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTextArea;\n+import javax.swing.JTextPane;\n+import javax.swing.UIManager;\n+import javax.swing.text.JTextComponent;\n+\n+\/*\n+ * @test\n+ * @bug 6492108 8160755\n+ * @key headful\n+ * @requires (os.family == \"linux\")\n+ * @summary Verifies that the background is painted the same for\n+ *          JTextArea, JTextPane, and JEditorPane.\n+ * @library \/javax\/swing\/regtesthelpers\n+ * @build SwingTestHelper\n+ * @run main\/othervm bug6492108\n+ *\/\n+\n+public class bug6492108 extends SwingTestHelper {\n+\n+    private JPanel panel;\n+\n+    public static void main(String[] args) throws Throwable {\n+        try {\n+            UIManager.setLookAndFeel(\n+                \"com.sun.java.swing.plaf.gtk.GTKLookAndFeel\");\n+        } catch (Exception e) {\n+            System.out.println(\"GTK LAF is not supported on this system; test passes\");\n+            return;\n+        }\n+        new bug6492108().run(args);\n+    }\n+\n+    private static void addTextComps(Container parent,\n+                                     Class<? extends JTextComponent> type)\n+        throws Throwable\n+    {\n+        JTextComponent text = type.newInstance();\n+        addTextComp(parent, text);\n+\n+        text = type.newInstance();\n+        text.setEditable(false);\n+        addTextComp(parent, text);\n+\n+        text = type.newInstance();\n+        text.setEnabled(false);\n+        addTextComp(parent, text);\n+\n+        text = type.newInstance();\n+        text.setEnabled(false);\n+        text.setEditable(false);\n+        addTextComp(parent, text);\n+    }\n+\n+    private static void addTextComp(Container parent, JTextComponent text) {\n+        JScrollPane sp = new JScrollPane(text);\n+        text.setFocusable(false); \/\/ to avoid showing the blinking caret\n+        sp.setPreferredSize(new Dimension(150, 150));\n+        sp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);\n+        sp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);\n+        parent.add(sp);\n+    }\n+\n+    protected Component createContentPane() {\n+        panel = new JPanel();\n+        panel.setLayout(new GridLayout(3, 4));\n+        try {\n+            addTextComps(panel, JTextArea.class);\n+            addTextComps(panel, JEditorPane.class);\n+            addTextComps(panel, JTextPane.class);\n+        } catch (Throwable t) {\n+            fail(\"Problem creating text components\");\n+        }\n+        return panel;\n+    }\n+\n+    private void onEDT10() {\n+        requestAndWaitForFocus(panel);\n+    }\n+\n+    private void onBackgroundThread20() {\n+        \/\/ For each component on the top row, compare against the two\n+        \/\/ components below in the same column.  All three components in\n+        \/\/ that column should be the same pixel-for-pixel.\n+        for (int count = 0; count < 4; count++) {\n+            Component ref = panel.getComponent(count);\n+            Point loc = ref.getLocationOnScreen();\n+            Rectangle refRect =\n+                new Rectangle(loc.x, loc.y, ref.getWidth(), ref.getHeight());\n+            BufferedImage refimg = robot.createScreenCapture(refRect);\n+\n+            for (int k = 1; k < 3; k++) {\n+                int index = count + (k*4);\n+                Component test = panel.getComponent(index);\n+                loc = test.getLocationOnScreen();\n+                Rectangle testRect =\n+                    new Rectangle(loc.x, loc.y,\n+                                  test.getWidth(), test.getHeight());\n+                BufferedImage testimg = robot.createScreenCapture(testRect);\n+\n+                if (refimg.getWidth() != testimg.getWidth() ||\n+                    refimg.getHeight() != testimg.getHeight())\n+                {\n+                    fail(\"Test image size must match reference image size\");\n+                }\n+\n+                for (int y = 0; y < refimg.getHeight(); y++) {\n+                    for (int x = 0; x < refimg.getWidth(); x++) {\n+                        int refPixel  = refimg.getRGB(x, y);\n+                        int testPixel = testimg.getRGB(x, y);\n+                        if (refPixel != testPixel) {\n+                            fail(\"Image comparison failed at (\" +\n+                                 x + \",\" + y + \") for image \" + index);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void onBackgroundThread30() {\n+        \/\/ Allow enough time for visual verification\n+        try { Thread.sleep(3000); } catch (Exception e) {}\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/java\/swing\/plaf\/gtk\/bug6492108.java","additions":158,"deletions":0,"binary":false,"changes":158,"status":"added"}]}