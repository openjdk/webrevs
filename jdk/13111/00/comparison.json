{"files":[{"patch":"@@ -378,0 +378,1 @@\n+  _preserve_repository(\"preserve-repository\", \"Delete disk repository files on exit\", \"BOOLEAN\", false, \"false\"),\n@@ -388,0 +389,1 @@\n+  _dcmdparser.add_dcmd_option(&_preserve_repository);\n@@ -395,5 +397,5 @@\n-  out->print_cr(\"  globalbuffercount  (Optional) Number of global buffers. This option is a legacy\");\n-  out->print_cr(\"                     option: change the memorysize parameter to alter the number of\");\n-  out->print_cr(\"                     global buffers. This value cannot be changed once JFR has been\");\n-  out->print_cr(\"                     initialized. (STRING, default determined by the value for\");\n-  out->print_cr(\"                     memorysize)\");\n+  out->print_cr(\"  globalbuffercount   (Optional) Number of global buffers. This option is a legacy\");\n+  out->print_cr(\"                      option: change the memorysize parameter to alter the number of\");\n+  out->print_cr(\"                      global buffers. This value cannot be changed once JFR has been\");\n+  out->print_cr(\"                      initialized. (STRING, default determined by the value for\");\n+  out->print_cr(\"                      memorysize)\");\n@@ -401,5 +403,5 @@\n-  out->print_cr(\"  globalbuffersize   (Optional) Size of the global buffers, in bytes. This option is a\");\n-  out->print_cr(\"                     legacy option: change the memorysize parameter to alter the size\");\n-  out->print_cr(\"                     of the global buffers. This value cannot be changed once JFR has\");\n-  out->print_cr(\"                     been initialized. (STRING, default determined by the value for\");\n-  out->print_cr(\"                     memorysize)\");\n+  out->print_cr(\"  globalbuffersize    (Optional) Size of the global buffers, in bytes. This option is a\");\n+  out->print_cr(\"                      legacy option: change the memorysize parameter to alter the size\");\n+  out->print_cr(\"                      of the global buffers. This value cannot be changed once JFR has\");\n+  out->print_cr(\"                      been initialized. (STRING, default determined by the value for\");\n+  out->print_cr(\"                      memorysize)\");\n@@ -407,4 +409,4 @@\n-  out->print_cr(\"  maxchunksize       (Optional) Maximum size of an individual data chunk in bytes if\");\n-  out->print_cr(\"                     one of the following suffixes is not used: 'm' or 'M' for\");\n-  out->print_cr(\"                     megabytes OR 'g' or 'G' for gigabytes. This value cannot be\");\n-  out->print_cr(\"                     changed once JFR has been initialized. (STRING, 12M)\");\n+  out->print_cr(\"  maxchunksize        (Optional) Maximum size of an individual data chunk in bytes if\");\n+  out->print_cr(\"                      one of the following suffixes is not used: 'm' or 'M' for\");\n+  out->print_cr(\"                      megabytes OR 'g' or 'G' for gigabytes. This value cannot be\");\n+  out->print_cr(\"                      changed once JFR has been initialized. (STRING, 12M)\");\n@@ -412,4 +414,4 @@\n-  out->print_cr(\"  memorysize         (Optional) Overall memory size, in bytes if one of the following\");\n-  out->print_cr(\"                     suffixes is not used: 'm' or 'M' for megabytes OR 'g' or 'G' for\");\n-  out->print_cr(\"                     gigabytes. This value cannot be changed once JFR has been\");\n-  out->print_cr(\"                     initialized. (STRING, 10M)\");\n+  out->print_cr(\"  memorysize          (Optional) Overall memory size, in bytes if one of the following\");\n+  out->print_cr(\"                      suffixes is not used: 'm' or 'M' for megabytes OR 'g' or 'G' for\");\n+  out->print_cr(\"                      gigabytes. This value cannot be changed once JFR has been\");\n+  out->print_cr(\"                      initialized. (STRING, 10M)\");\n@@ -417,6 +419,6 @@\n-  out->print_cr(\"  repositorypath     (Optional) Path to the location where recordings are stored until\");\n-  out->print_cr(\"                     they are written to a permanent file. (STRING, The default\");\n-  out->print_cr(\"                     location is the temporary directory for the operating system. On\");\n-  out->print_cr(\"                     Linux operating systems, the temporary directory is \/tmp. On\");\n-  out->print_cr(\"                     Windows, the temporary directory is specified by the TMP\");\n-  out->print_cr(\"                     environment variable)\");\n+  out->print_cr(\"  repositorypath      (Optional) Path to the location where recordings are stored until\");\n+  out->print_cr(\"                      they are written to a permanent file. (STRING, The default\");\n+  out->print_cr(\"                      location is the temporary directory for the operating system. On\");\n+  out->print_cr(\"                      Linux operating systems, the temporary directory is \/tmp. On\");\n+  out->print_cr(\"                      Windows, the temporary directory is specified by the TMP\");\n+  out->print_cr(\"                      environment variable)\");\n@@ -424,3 +426,3 @@\n-  out->print_cr(\"  dumppath           (Optional) Path to the location where a recording file is written\");\n-  out->print_cr(\"                     in case the VM runs into a critical error, such as a system\");\n-  out->print_cr(\"                     crash. (STRING, The default location is the current directory)\");\n+  out->print_cr(\"  dumppath            (Optional) Path to the location where a recording file is written\");\n+  out->print_cr(\"                      in case the VM runs into a critical error, such as a system\");\n+  out->print_cr(\"                      crash. (STRING, The default location is the current directory)\");\n@@ -428,4 +430,4 @@\n-  out->print_cr(\"  stackdepth         (Optional) Stack depth for stack traces. Setting this value\");\n-  out->print_cr(\"                     greater than the default of 64 may cause a performance\");\n-  out->print_cr(\"                     degradation. This value cannot be changed once JFR has been\");\n-  out->print_cr(\"                     initialized. (LONG, 64)\");\n+  out->print_cr(\"  stackdepth          (Optional) Stack depth for stack traces. Setting this value\");\n+  out->print_cr(\"                      greater than the default of 64 may cause a performance\");\n+  out->print_cr(\"                      degradation. This value cannot be changed once JFR has been\");\n+  out->print_cr(\"                      initialized. (LONG, 64)\");\n@@ -433,5 +435,8 @@\n-  out->print_cr(\"  thread_buffer_size (Optional) Local buffer size for each thread in bytes if one of\");\n-  out->print_cr(\"                     the following suffixes is not used: 'k' or 'K' for kilobytes or\");\n-  out->print_cr(\"                     'm' or 'M' for megabytes. Overriding this parameter could reduce\");\n-  out->print_cr(\"                     performance and is not recommended. This value cannot be changed\");\n-  out->print_cr(\"                     once JFR has been initialized. (STRING, 8k)\");\n+  out->print_cr(\"  thread_buffer_size  (Optional) Local buffer size for each thread in bytes if one of\");\n+  out->print_cr(\"                      the following suffixes is not used: 'k' or 'K' for kilobytes or\");\n+  out->print_cr(\"                      'm' or 'M' for megabytes. Overriding this parameter could reduce\");\n+  out->print_cr(\"                      performance and is not recommended. This value cannot be changed\");\n+  out->print_cr(\"                      once JFR has been initialized. (STRING, 8k)\");\n+  out->print_cr(\"\");\n+  out->print_cr(\"  preserve-repository (Optional) Preserve files stored in the disk repository after the\");\n+  out->print_cr(\"                      Java Virtual Machine has exited. (BOOLEAN, false)\");\n@@ -493,0 +498,1 @@\n+  jobject preserve_repository = nullptr;\n@@ -513,0 +519,3 @@\n+    if (_preserve_repository.is_set()) {\n+      preserve_repository = JfrJavaSupport::new_java_lang_Boolean(_preserve_repository.value(), CHECK);\n+    }\n@@ -528,1 +537,1 @@\n-    \"Ljava\/lang\/Long;)[Ljava\/lang\/String;\";\n+    \"Ljava\/lang\/Long;Ljava\/lang\/Boolean;)[Ljava\/lang\/String;\";\n@@ -543,0 +552,1 @@\n+  execute_args.push_jobject(preserve_repository);\n","filename":"src\/hotspot\/share\/jfr\/dcmd\/jfrDcmds.cpp","additions":47,"deletions":37,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -160,0 +160,1 @@\n+  DCmdArgument<bool>  _preserve_repository;\n","filename":"src\/hotspot\/share\/jfr\/dcmd\/jfrDcmds.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -168,0 +168,1 @@\n+const char* const default_preserve_repository = \"false\";\n@@ -257,0 +258,7 @@\n+static DCmdArgument<bool> _dcmd_preserve_repository(\n+  \"preserve-repository\",\n+  \"If the disk repository should be deleted when the JVM exits)\",\n+  \"BOOLEAN\",\n+  false,\n+  default_preserve_repository);\n+\n@@ -271,0 +279,1 @@\n+  _parser.add_dcmd_option(&_dcmd_preserve_repository);\n@@ -382,0 +391,3 @@\n+  configure._preserve_repository.set_is_set(_dcmd_preserve_repository.is_set());\n+  configure._preserve_repository.set_value(_dcmd_preserve_repository.value());\n+\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrOptionSet.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+    private static final boolean DEFAULT_PRESERVE_REPOSITORY = true;\n@@ -62,0 +63,1 @@\n+    private static boolean preserveRepository;\n@@ -141,0 +143,8 @@\n+    public static synchronized void setPreserveRepository(boolean preserve) {\n+        preserveRepository = preserve;\n+    }\n+\n+    public static synchronized boolean getPreserveRepository() {\n+        return preserveRepository;\n+    }\n+\n@@ -153,0 +163,1 @@\n+        setPreserveRepository(DEFAULT_PRESERVE_REPOSITORY);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Options.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -163,0 +163,4 @@\n+        if (Options.getPreserveRepository()) {\n+            return;\n+        }\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Repository.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+     * @param memorySize Size of in memory buffer\n@@ -55,2 +56,1 @@\n-     * @param sampleThreads if thread sampling should be enabled\n-     *\n+     * @param preserveRepository if files in the repository should be deleted on exit.\n@@ -72,1 +72,2 @@\n-            Long maxChunkSize\n+            Long maxChunkSize,\n+            Boolean preserveRepository\n@@ -83,1 +84,2 @@\n-                    \", maxchunksize=\" + maxChunkSize);\n+                    \", maxchunksize=\" + maxChunkSize +\n+                    \", preserveRepository=\" + preserveRepository);\n@@ -106,0 +108,8 @@\n+        if (preserveRepository != null) {\n+            Options.setPreserveRepository(preserveRepository.booleanValue());\n+            if (verbose) {\n+                printPreserveRepository();\n+            }\n+            updated = true;\n+        }\n+\n@@ -179,0 +189,1 @@\n+            printPreserveRepository();\n@@ -197,0 +208,4 @@\n+    private void printPreserveRepository() {\n+        println(\"Preserve repository: \" + Options.getPreserveRepository());\n+    }\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/DCmdConfigure.java","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.jcmd;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+\n+import jdk.test.lib.jfr.FileHelper;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.Utils;\n+\/**\n+ * @test\n+ * @summary Test verifies that files are left after preserve-repository has been set using jcmd JFR.configure\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib \/test\/jdk\n+ * @run main\/othervm jdk.jfr.jcmd.TestJcmdPreserveRepository\n+ *\/\n+public class TestJcmdPreserveRepository {\n+\n+    public static class TestProcess {\n+        public static void main(String... args) {\n+            OutputAnalyzer output = JcmdHelper.jcmd(\"JFR.configure\", \"preserve-repository=true\");\n+            System.exit(output.getExitValue());\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Throwable {\n+        Path path = Path.of(\".\/preserved\");\n+        String[] arguments = {\n+            \"-XX:StartFlightRecording\",\n+            \"-XX:FlightRecorderOptions:repository=\" + path,\n+            \"-Dtest.jdk=\" + System.getProperty(\"test.jdk\"),\n+            TestProcess.class.getName()\n+        };\n+        OutputAnalyzer output = ProcessTools.executeTestJvm(arguments);\n+        output.shouldHaveExitValue(0);\n+        Optional<Path> p = Files.find(path, 99, (a,b) -> a.getFileName().toString().endsWith(\".jfr\")).findAny();\n+        if (p.isEmpty()) {\n+            throw new Exception(\"Could not find preserved files in repository\");\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/jdk\/jfr\/jcmd\/TestJcmdPreserveRepository.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+package jdk.jfr.startupargs;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\/**\n+ * @test\n+ * @summary Tests that -XX:FlightRecorderOptions:preserve-repository works\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @modules jdk.jfr\n+ * @library \/test\/lib\n+ * @run main\/othervm jdk.jfr.startupargs.TestPreserveRepository\n+ *\/\n+public class TestPreserveRepository {\n+\n+    public static void main(String... args) throws Exception {\n+        Path path  = Path.of(\".\/preserved\");\n+        String[] arguments = {\n+            \"-XX:StartFlightRecording\",\n+            \"-XX:FlightRecorderOptions:repository=\" + path + \",preserve-repository=true\",\n+            \"-version\"\n+        };\n+        ProcessBuilder pb = ProcessTools.createTestJvm(arguments);\n+        OutputAnalyzer output = ProcessTools.executeProcess(pb);\n+        output.shouldHaveExitValue(0);\n+        Optional<Path> p = Files.find(path, 99, (a,b) -> a.getFileName().toString().endsWith(\".jfr\")).findAny();\n+        if (p.isEmpty()) {\n+            throw new Exception(\"Could not find preserved files in repository\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/startupargs\/TestPreserveRepository.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"}]}