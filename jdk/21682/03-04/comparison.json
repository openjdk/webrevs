{"files":[{"patch":"@@ -1072,3 +1072,7 @@\n-void CallJavaNode::prepend_and_reset_generator(PhaseGVN* phase, CallGenerator* cg) {\n-  phase->C->prepend_late_inline(cg);\n-  set_generator(nullptr);\n+void CallJavaNode::register_for_late_inline() {\n+  if (generator() != nullptr) {\n+    Compile::current()->prepend_late_inline(generator());\n+    set_generator(nullptr);\n+  } else {\n+    assert(false, \"repeated inline attempt\");\n+  }\n@@ -1097,1 +1101,1 @@\n-          prepend_and_reset_generator(phase, cg);\n+          register_for_late_inline();\n@@ -1104,1 +1108,1 @@\n-          prepend_and_reset_generator(phase, cg);\n+          register_for_late_inline();\n@@ -1115,1 +1119,1 @@\n-      prepend_and_reset_generator(phase, cg);\n+      register_for_late_inline();\n@@ -1215,1 +1219,1 @@\n-        prepend_and_reset_generator(phase, cg); \/\/ MH late inlining prepends to the list, so do the same\n+        register_for_late_inline(); \/\/ MH late inlining prepends to the list, so do the same\n@@ -1223,1 +1227,1 @@\n-      prepend_and_reset_generator(phase, cg);\n+      register_for_late_inline();\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -797,1 +797,1 @@\n-  void prepend_and_reset_generator(PhaseGVN* phase, CallGenerator* cg);\n+  void register_for_late_inline();\n","filename":"src\/hotspot\/share\/opto\/callnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2044,2 +2044,3 @@\n-        if (C->igvn_worklist()->member(cg->call_node()) == is_scheduled_for_igvn_before) { \/\/ avoid potential infinite loop\n-          cg->call_node()->set_generator(cg);\n+        bool is_scheduled_for_igvn_after = C->igvn_worklist()->member(cg->call_node());\n+        if (!is_scheduled_for_igvn_before && is_scheduled_for_igvn_after) { \/\/ avoid potential infinite loop\n+          assert(false, \"scheduled for IGVN during inlining attempt\");\n@@ -2047,1 +2048,2 @@\n-          assert(false, \"call node shouldn't be scheduled for IGVN\");\n+          assert(is_scheduled_for_igvn_before == is_scheduled_for_igvn_after, \"call node removed from IGVN list during inlining pass\");\n+          cg->call_node()->set_generator(cg);\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}