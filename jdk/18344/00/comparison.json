{"files":[{"patch":"@@ -1,92 +0,0 @@\n-\/*\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.management;\n-\n-\/**\n- *\/\n-@Deprecated\n-public class CompilerThreadStat implements java.io.Serializable {\n-    private String name;\n-    private long taskCount;\n-    private long compileTime;\n-    private MethodInfo lastMethod;\n-\n-    CompilerThreadStat(String name, long taskCount, long time, MethodInfo lastMethod) {\n-        this.name = name;\n-        this.taskCount = taskCount;\n-        this.compileTime = time;\n-        this.lastMethod = lastMethod;\n-    };\n-\n-    \/**\n-     * Returns the name of the compiler thread associated with\n-     * this compiler thread statistic.\n-     *\n-     * @return the name of the compiler thread.\n-     *\/\n-    public String getName() {\n-        return name;\n-    }\n-\n-    \/**\n-     * Returns the number of compile tasks performed by the compiler thread\n-     * associated with this compiler thread statistic.\n-     *\n-     * @return the number of compile tasks performed by the compiler thread.\n-     *\/\n-    public long getCompileTaskCount() {\n-        return taskCount;\n-    }\n-\n-    \/**\n-     * Returns the accumulated elapsed time spent by the compiler thread\n-     * associated with this compiler thread statistic.\n-     *\n-     * @return the accumulated elapsed time spent by the compiler thread.\n-     *\/\n-    public long getCompileTime() {\n-        return compileTime;\n-    }\n-\n-    \/**\n-     * Returns the information about the last method compiled by\n-     * the compiler thread associated with this compiler thread statistic.\n-     *\n-     * @return a {@link MethodInfo} object for the last method\n-     * compiled by the compiler thread.\n-     *\/\n-    public MethodInfo getLastCompiledMethodInfo() {\n-        return lastMethod;\n-    }\n-\n-    public String toString() {\n-        return getName() + \" compileTasks = \" + getCompileTaskCount()\n-            + \" compileTime = \" + getCompileTime();\n-    }\n-\n-    private static final long serialVersionUID = 6992337162326171013L;\n-\n-}\n","filename":"src\/java.management\/share\/classes\/sun\/management\/CompilerThreadStat.java","additions":0,"deletions":92,"binary":false,"changes":92,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,27 +75,0 @@\n-    private class CompilerThreadInfo {\n-        String name;\n-        StringCounter method;\n-        LongCounter type;\n-        LongCounter compiles;\n-        LongCounter time;\n-        CompilerThreadInfo(String bname, int index) {\n-            String basename = bname + \".\" + index + \".\";\n-            this.name = bname + \"-\" + index;\n-            this.method = (StringCounter) lookup(basename + \"method\");\n-            this.type = (LongCounter) lookup(basename + \"type\");\n-            this.compiles = (LongCounter) lookup(basename + \"compiles\");\n-            this.time = (LongCounter) lookup(basename + \"time\");\n-        }\n-\n-        @SuppressWarnings(\"deprecation\")\n-        CompilerThreadStat getCompilerThreadStat() {\n-            MethodInfo minfo = new MethodInfo(method.stringValue(),\n-                                              (int) type.longValue(),\n-                                              -1);\n-            return new CompilerThreadStat(name,\n-                                          compiles.longValue(),\n-                                          time.longValue(),\n-                                          minfo);\n-        }\n-    }\n-    private List<CompilerThreadInfo> threads;\n@@ -148,9 +121,0 @@\n-\n-        \/\/ Allocate CompilerThreadInfo for compilerThread and adaptorThread\n-        threads = new ArrayList<>();\n-\n-        for (int i = 0; i < numActiveThreads; i++) {\n-            if (counters.containsKey(SUN_CI + \"compilerThread.\" + i + \".method\")) {\n-                threads.add(new CompilerThreadInfo(\"compilerThread\", i));\n-            }\n-        }\n@@ -183,9 +147,0 @@\n-    @Deprecated\n-    public List<CompilerThreadStat> getCompilerThreadStats() {\n-        List<CompilerThreadStat> list = new ArrayList<>(threads.size());\n-        for (CompilerThreadInfo info : threads) {\n-            list.add(info.getCompilerThreadStat());\n-        }\n-        return list;\n-    }\n-\n","filename":"src\/java.management\/share\/classes\/sun\/management\/HotspotCompilation.java","additions":1,"deletions":46,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,10 +42,0 @@\n-    \/**\n-     * Returns the statistic of all compiler threads.\n-     *\n-     * @return a list of {@link CompilerThreadStat} object containing\n-     * the statistic of a compiler thread.\n-     *\n-     *\/\n-    @Deprecated\n-    public java.util.List<CompilerThreadStat> getCompilerThreadStats();\n-\n","filename":"src\/java.management\/share\/classes\/sun\/management\/HotspotCompilationMBean.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"}]}