{"files":[{"patch":"@@ -85,2 +85,2 @@\n-ParsePredicateSuccessProj* ParsePredicate::clone_to_unswitched_loop(Node* new_control, const bool is_true_path_loop,\n-                                                                    PhaseIdealLoop* phase) const {\n+ParsePredicate ParsePredicate::clone_to_unswitched_loop(Node* new_control, const bool is_true_path_loop,\n+                                                        PhaseIdealLoop* phase) const {\n@@ -91,1 +91,1 @@\n-  return success_proj;\n+  return ParsePredicate(success_proj, _parse_predicate_node->deopt_reason());\n@@ -173,2 +173,2 @@\n-\/\/ Clone this Template Assertion Predicate and replace the OpaqueLoopInitNode with the provided 'new_opaque_init' node.\n-IfTrueNode* TemplateAssertionPredicate::clone(Node* new_control, PhaseIdealLoop* phase) const {\n+\/\/ Clone this Template Assertion Predicate without modifying any OpaqueLoop*Node inputs.\n+TemplateAssertionPredicate TemplateAssertionPredicate::clone(Node* new_control, PhaseIdealLoop* phase) const {\n@@ -182,2 +182,3 @@\n-  DEBUG_ONLY(TemplateAssertionPredicate::verify(success_proj);)\n-  return success_proj;\n+  TemplateAssertionPredicate cloned_template_assertion_predicate(success_proj);\n+  DEBUG_ONLY(cloned_template_assertion_predicate.verify();)\n+  return cloned_template_assertion_predicate;\n@@ -186,3 +187,4 @@\n-\/\/ Clone this Template Assertion Predicate and replace the OpaqueLoopInitNode with the provided 'new_opaque_init' node.\n-IfTrueNode* TemplateAssertionPredicate::clone_and_replace_init(Node* new_control, OpaqueLoopInitNode* new_opaque_init,\n-                                                               PhaseIdealLoop* phase) const {\n+\/\/ Clone this Template Assertion Predicate and replace the input of the OpaqueLoopInitNode with 'new_opaque_input'.\n+TemplateAssertionPredicate TemplateAssertionPredicate::clone_and_replace_opaque_input(Node* new_control,\n+                                                                                      Node* new_opaque_input,\n+                                                                                      PhaseIdealLoop* phase) const {\n@@ -190,0 +192,2 @@\n+  OpaqueLoopInitNode* new_opaque_init = new OpaqueLoopInitNode(phase->C, new_opaque_input);\n+  phase->register_new_node(new_opaque_init, new_control);\n@@ -197,2 +201,3 @@\n-  DEBUG_ONLY(TemplateAssertionPredicate::verify(success_proj);)\n-  return success_proj;\n+  TemplateAssertionPredicate cloned_template_assertion_predicate(success_proj);\n+  DEBUG_ONLY(cloned_template_assertion_predicate.verify();)\n+  return cloned_template_assertion_predicate;\n@@ -208,3 +213,2 @@\n-\/\/ Create a new Initialized Assertion Predicate from this template at 'new_control' and return the success projection\n-\/\/ of the newly created Initialized Assertion Predicate.\n-IfTrueNode* TemplateAssertionPredicate::initialize(PhaseIdealLoop* phase, Node* new_control) const {\n+\/\/ Create a new Initialized Assertion Predicate from this template at the template success projection.\n+InitializedAssertionPredicate TemplateAssertionPredicate::initialize(PhaseIdealLoop* phase) const {\n@@ -213,3 +217,4 @@\n-  IfTrueNode* success_proj = initialized_assertion_predicate_creator.create_from_template(head(), new_control);\n-  DEBUG_ONLY(InitializedAssertionPredicate::verify(success_proj);)\n-  return success_proj;\n+  InitializedAssertionPredicate initialized_assertion_predicate =\n+      initialized_assertion_predicate_creator.create_from_template_and_insert_below(*this);\n+  DEBUG_ONLY(initialized_assertion_predicate.verify();)\n+  return initialized_assertion_predicate;\n@@ -750,1 +755,1 @@\n-    const bool does_overflow, const AssertionPredicateType assertion_predicate_type) {\n+    const bool does_overflow, const AssertionPredicateType assertion_predicate_type) const {\n@@ -784,1 +789,1 @@\n-\/\/ - OpaqueLoop*Nodes with new_init and _ew_stride, respectively.\n+\/\/ - OpaqueLoop*Nodes with new_init and new_stride, respectively.\n@@ -801,3 +806,2 @@\n-IfTrueNode* InitializedAssertionPredicateCreator::create_from_template(IfNode* template_assertion_predicate,\n-                                                                       Node* new_control, Node* new_init,\n-                                                                       Node* new_stride) {\n+InitializedAssertionPredicate InitializedAssertionPredicateCreator::create_from_template(\n+    IfNode* template_assertion_predicate, Node* new_control, Node* new_init, Node* new_stride) const {\n@@ -806,2 +810,4 @@\n-  return create_control_nodes(new_control, template_assertion_predicate->Opcode(), assertion_expression,\n-                              template_assertion_predicate->assertion_predicate_type());\n+   IfTrueNode* success_proj = create_control_nodes(new_control, template_assertion_predicate->Opcode(),\n+                                                   assertion_expression,\n+                                                   template_assertion_predicate->assertion_predicate_type());\n+  return InitializedAssertionPredicate(success_proj);\n@@ -810,7 +816,6 @@\n-\/\/ Create a new Initialized Assertion Predicate from 'template_assertion_predicate' by cloning it but omitting the\n-\/\/ OpaqueLoop*Notes (i.e. taking their inputs instead).\n-IfTrueNode* InitializedAssertionPredicateCreator::create_from_template(IfNode* template_assertion_predicate,\n-                                                                       Node* new_control) {\n-  OpaqueTemplateAssertionPredicateNode* template_opaque =\n-      template_assertion_predicate->in(1)->as_OpaqueTemplateAssertionPredicate();\n-  TemplateAssertionExpression template_assertion_expression(template_opaque);\n+\/\/ Create a new Initialized Assertion Predicate from the provided Template Assertion Predicate at the template success\n+\/\/ projection by cloning it but omitting the OpaqueLoop*Notes (i.e. taking their inputs instead).\n+InitializedAssertionPredicate InitializedAssertionPredicateCreator::create_from_template_and_insert_below(\n+    const TemplateAssertionPredicate& template_assertion_predicate) const {\n+  TemplateAssertionExpression template_assertion_expression(template_assertion_predicate.opaque_node());\n+  IfTrueNode* template_assertion_predicate_success_proj = template_assertion_predicate.tail();\n@@ -818,3 +823,8 @@\n-      template_assertion_expression.clone_and_fold_opaque_loop_nodes(new_control, _phase);\n-  return create_control_nodes(new_control, template_assertion_predicate->Opcode(), assertion_expression,\n-                              template_assertion_predicate->assertion_predicate_type());\n+      template_assertion_expression.clone_and_fold_opaque_loop_nodes(template_assertion_predicate_success_proj, _phase);\n+\n+  IfNode* template_assertion_predicate_if = template_assertion_predicate.head();\n+  AssertionPredicateType assertion_predicate_type = template_assertion_predicate_if->assertion_predicate_type();\n+  int if_opcode = template_assertion_predicate_if->Opcode();\n+  IfTrueNode* success_proj = create_control_nodes(template_assertion_predicate_success_proj, if_opcode,\n+                                                  assertion_expression, assertion_predicate_type);\n+  return InitializedAssertionPredicate(success_proj);\n@@ -826,1 +836,1 @@\n-                                                         const AssertionPredicateType assertion_predicate_type) {\n+                                                         const AssertionPredicateType assertion_predicate_type) const {\n@@ -840,1 +850,1 @@\n-    const AssertionPredicateType assertion_predicate_type) {\n+    const AssertionPredicateType assertion_predicate_type) const {\n@@ -851,1 +861,1 @@\n-                                                                                Node* new_stride) {\n+                                                                                Node* new_stride) const {\n@@ -935,3 +945,4 @@\n-    IfTrueNode* cloned_template_success_proj = clone_template_and_replace_init_input(template_assertion_predicate);\n-    initialize_from_template(template_assertion_predicate, cloned_template_success_proj);\n-    _current_predicate_chain_head = cloned_template_success_proj->in(0);\n+    TemplateAssertionPredicate cloned_template_assertion_predicate =\n+        clone_template_and_replace_init_input(template_assertion_predicate);\n+    initialize_from_template(template_assertion_predicate, cloned_template_assertion_predicate.tail());\n+    _current_predicate_chain_head = cloned_template_assertion_predicate.head();\n@@ -939,2 +950,3 @@\n-    IfTrueNode* initialized_success_proj = initialize_from_template(template_assertion_predicate, _old_target_loop_entry);\n-    _current_predicate_chain_head = initialized_success_proj->in(0);\n+    InitializedAssertionPredicate initialized_assertion_predicate =\n+        initialize_from_template(template_assertion_predicate, _old_target_loop_entry);\n+    _current_predicate_chain_head = initialized_assertion_predicate.head();\n@@ -945,1 +957,1 @@\n-IfTrueNode* CreateAssertionPredicatesVisitor::initialize_from_template(\n+InitializedAssertionPredicate CreateAssertionPredicatesVisitor::initialize_from_template(\n@@ -950,7 +962,8 @@\n-  IfTrueNode* initialized_predicate = initialized_assertion_predicate_creator.create_from_template(template_head,\n-                                                                                                   new_control,\n-                                                                                                   _init, _stride);\n-  DEBUG_ONLY(InitializedAssertionPredicate::verify(initialized_predicate);)\n-  template_assertion_predicate.rewire_loop_data_dependencies(initialized_predicate, _node_in_loop_body, _phase);\n-  rewire_to_old_predicate_chain_head(initialized_predicate);\n-  return initialized_predicate;\n+  InitializedAssertionPredicate initialized_assertion_predicate =\n+      initialized_assertion_predicate_creator.create_from_template(template_head, new_control, _init, _stride);\n+\n+  DEBUG_ONLY(initialized_assertion_predicate.verify();)\n+  template_assertion_predicate.rewire_loop_data_dependencies(initialized_assertion_predicate.tail(),\n+                                                             _node_in_loop_body, _phase);\n+  rewire_to_old_predicate_chain_head(initialized_assertion_predicate.tail());\n+  return initialized_assertion_predicate;\n@@ -959,6 +972,6 @@\n-\/\/ Clone the provided 'template_assertion_predicate' and set '_init' as new input for the OpaqueLoopInitNode.\n-IfTrueNode* CreateAssertionPredicatesVisitor::clone_template_and_replace_init_input(\n-    const TemplateAssertionPredicate& template_assertion_predicate) {\n-  OpaqueLoopInitNode* opaque_init = new OpaqueLoopInitNode(_phase->C, _init);\n-  _phase->register_new_node(opaque_init, _old_target_loop_entry);\n-  return template_assertion_predicate.clone_and_replace_init(_old_target_loop_entry, opaque_init, _phase);\n+\/\/ Clone the provided Template Assertion Predicate and set '_init' as new input for the OpaqueLoopInitNode.\n+TemplateAssertionPredicate CreateAssertionPredicatesVisitor::clone_template_and_replace_init_input(\n+    const TemplateAssertionPredicate& template_assertion_predicate) const {\n+  TemplateAssertionPredicate new_template =\n+      template_assertion_predicate.clone_and_replace_opaque_input(_old_target_loop_entry, _init, _phase);\n+  return new_template;\n@@ -1012,4 +1025,5 @@\n-void TargetLoopPredicateChain::insert_predicate(IfTrueNode* predicate_success_proj) {\n-  rewire_to_target_chain_head(predicate_success_proj);\n-  _current_predicate_chain_head = predicate_success_proj->in(0);\n-  assert(predicate_success_proj->_idx >= _node_index_before_cloning, \"must be a newly cloned predicate\");\n+void TargetLoopPredicateChain::insert_predicate(const Predicate& predicate) {\n+  rewire_to_target_chain_head(predicate.tail()->as_IfTrue());\n+  _current_predicate_chain_head = predicate.head();\n+  assert(predicate.head()->_idx >= _node_index_before_cloning, \"must be a newly cloned predicate\");\n+  assert(predicate.tail()->_idx >= _node_index_before_cloning, \"must be a newly cloned predicate\");\n@@ -1072,1 +1086,2 @@\n-\/\/ Clone the Template Assertion Predicate and set a new input for the OpaqueLoopStrideNode.\n+\/\/ Update the Template Assertion Predicate by setting a new input for the OpaqueLoopStrideNode. Create a new\n+\/\/ Initialized Assertion Predicate from the updated Template Assertion Predicate.\n@@ -1080,2 +1095,3 @@\n-  IfTrueNode* initialized_success_proj = initialize_from_updated_template(template_assertion_predicate);\n-  connect_initialized_assertion_predicate(template_tail_control_out, initialized_success_proj);\n+  InitializedAssertionPredicate initialized_assertion_predicate =\n+      initialize_from_updated_template(template_assertion_predicate);\n+  connect_initialized_assertion_predicate(template_tail_control_out, initialized_assertion_predicate);\n@@ -1090,1 +1106,1 @@\n-IfTrueNode* UpdateStrideForAssertionPredicates::initialize_from_updated_template(\n+InitializedAssertionPredicate UpdateStrideForAssertionPredicates::initialize_from_updated_template(\n@@ -1092,2 +1108,1 @@\n-  IfTrueNode* initialized_success_proj = template_assertion_predicate.initialize(_phase, template_assertion_predicate.tail());\n-  return initialized_success_proj;\n+  return template_assertion_predicate.initialize(_phase);\n@@ -1100,1 +1115,2 @@\n-    Node* new_control_out, IfTrueNode* initialized_success_proj) const {\n+    Node* new_control_out, const InitializedAssertionPredicate& initialized_assertion_predicate) const {\n+  Node* initialized_assertion_predicate_success_proj = initialized_assertion_predicate.tail();\n@@ -1102,1 +1118,1 @@\n-    _phase->replace_loop_entry(new_control_out->as_Loop(), initialized_success_proj);\n+    _phase->replace_loop_entry(new_control_out->as_Loop(), initialized_assertion_predicate_success_proj);\n@@ -1104,1 +1120,1 @@\n-    _phase->replace_control(new_control_out, initialized_success_proj);\n+    _phase->replace_control(new_control_out, initialized_assertion_predicate_success_proj);\n","filename":"src\/hotspot\/share\/opto\/predicates.cpp","additions":86,"deletions":70,"binary":false,"changes":156,"status":"modified"},{"patch":"@@ -330,2 +330,2 @@\n-  ParsePredicateSuccessProj* clone_to_unswitched_loop(Node* new_control, bool is_true_path_loop,\n-                                                      PhaseIdealLoop* phase) const;\n+  ParsePredicate clone_to_unswitched_loop(Node* new_control, bool is_true_path_loop,\n+                                          PhaseIdealLoop* phase) const;\n@@ -406,2 +406,3 @@\n-  IfTrueNode* clone(Node* new_control, PhaseIdealLoop* phase) const;\n-  IfTrueNode* clone_and_replace_init(Node* new_control, OpaqueLoopInitNode* new_opaque_init, PhaseIdealLoop* phase) const;\n+  TemplateAssertionPredicate clone(Node* new_control, PhaseIdealLoop* phase) const;\n+  TemplateAssertionPredicate clone_and_replace_opaque_input(Node* new_control, Node* new_opaque_input,\n+                                                            PhaseIdealLoop* phase) const;\n@@ -409,1 +410,1 @@\n-  IfTrueNode* initialize(PhaseIdealLoop* phase, Node* new_control) const;\n+  InitializedAssertionPredicate initialize(PhaseIdealLoop* phase) const;\n@@ -612,1 +613,1 @@\n-                             bool does_overflow, AssertionPredicateType assertion_predicate_type);\n+                             bool does_overflow, AssertionPredicateType assertion_predicate_type) const;\n@@ -635,3 +636,5 @@\n-  IfTrueNode* create_from_template(IfNode* template_assertion_predicate, Node* new_control, Node* new_init,\n-                                   Node* new_stride);\n-  IfTrueNode* create_from_template(IfNode* template_assertion_predicate, Node* new_control);\n+  InitializedAssertionPredicate create_from_template(IfNode* template_assertion_predicate, Node* new_control,\n+                                                     Node* new_init, Node* new_stride) const;\n+\n+  InitializedAssertionPredicate\n+  create_from_template_and_insert_below(const TemplateAssertionPredicate& template_assertion_predicate) const;\n@@ -639,1 +642,1 @@\n-                     AssertionPredicateType assertion_predicate_type);\n+                     AssertionPredicateType assertion_predicate_type) const;\n@@ -644,1 +647,1 @@\n-                                                                                     Node* new_stride);\n+                                                                                     Node* new_stride) const;\n@@ -647,1 +650,1 @@\n-                                   AssertionPredicateType assertion_predicate_type);\n+                                   AssertionPredicateType assertion_predicate_type) const;\n@@ -1043,3 +1046,5 @@\n-  IfTrueNode* clone_template_and_replace_init_input(const TemplateAssertionPredicate& template_assertion_predicate);\n-  IfTrueNode* initialize_from_template(const TemplateAssertionPredicate& template_assertion_predicate,\n-                                       Node* new_control) const;\n+  TemplateAssertionPredicate\n+  clone_template_and_replace_init_input(const TemplateAssertionPredicate& template_assertion_predicate) const;\n+\n+  InitializedAssertionPredicate initialize_from_template(const TemplateAssertionPredicate& template_assertion_predicate,\n+                                                         Node* new_control) const;\n@@ -1073,1 +1078,1 @@\n-  void insert_predicate(IfTrueNode* predicate_success_proj);\n+  void insert_predicate(const Predicate& predicate);\n@@ -1105,3 +1110,3 @@\n-    ParsePredicateSuccessProj* cloned_parse_predicate_success_proj =\n-      parse_predicate.clone_to_unswitched_loop(_old_target_loop_entry, is_true_path_loop, _phase);\n-    _target_loop_predicate_chain.insert_predicate(cloned_parse_predicate_success_proj);\n+    ParsePredicate cloned_parse_predicate = parse_predicate.clone_to_unswitched_loop(_old_target_loop_entry,\n+                                                                                     is_true_path_loop, _phase);\n+    _target_loop_predicate_chain.insert_predicate(cloned_parse_predicate);\n@@ -1112,4 +1117,5 @@\n-    IfTrueNode* cloned_template_success_proj = template_assertion_predicate.clone(_old_target_loop_entry,\n-                                                                                  _phase);\n-    template_assertion_predicate.rewire_loop_data_dependencies(cloned_template_success_proj, _node_in_loop_body, _phase);\n-    _target_loop_predicate_chain.insert_predicate(cloned_template_success_proj);\n+    TemplateAssertionPredicate cloned_template_assertion_predicate =\n+        template_assertion_predicate.clone(_old_target_loop_entry, _phase);\n+    template_assertion_predicate.rewire_loop_data_dependencies(cloned_template_assertion_predicate.tail(),\n+                                                               _node_in_loop_body, _phase);\n+    _target_loop_predicate_chain.insert_predicate(cloned_template_assertion_predicate);\n@@ -1167,2 +1173,4 @@\n-  IfTrueNode* initialize_from_updated_template(const TemplateAssertionPredicate& template_assertion_predicate) const;\n-  void connect_initialized_assertion_predicate(Node* new_control_out, IfTrueNode* initialized_success_proj) const;\n+\n+  InitializedAssertionPredicate\n+  initialize_from_updated_template(const TemplateAssertionPredicate& template_assertion_predicate) const;\n+  void connect_initialized_assertion_predicate(Node* new_control_out, const InitializedAssertionPredicate& initialized_assertion_predicate) const;\n","filename":"src\/hotspot\/share\/opto\/predicates.hpp","additions":33,"deletions":25,"binary":false,"changes":58,"status":"modified"}]}