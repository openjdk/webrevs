{"files":[{"patch":"@@ -147,1 +147,1 @@\n-      VirtualMemoryTracker::add_reserved_region((address)addr, size, stack, flag);\n+      VirtualMemoryTracker::add_reserved_region(addr, size, stack, flag);\n@@ -157,2 +157,2 @@\n-      VirtualMemoryTracker::add_reserved_region((address)addr, size, stack, flag);\n-      VirtualMemoryTracker::add_committed_region((address)addr, size, stack);\n+      VirtualMemoryTracker::add_reserved_region(addr, size, stack, flag);\n+      VirtualMemoryTracker::add_committed_region(addr, size, stack);\n@@ -168,1 +168,1 @@\n-      VirtualMemoryTracker::add_committed_region((address)addr, size, stack);\n+      VirtualMemoryTracker::add_committed_region(addr, size, stack);\n","filename":"src\/hotspot\/share\/services\/memTracker.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+GrowableArray<VirtualMemoryTracker::MemoryEvent> VirtualMemoryTracker::work_queue{0, mtNMT};\n+\n@@ -328,0 +330,1 @@\n+    work_queue.reserve(256);\n@@ -333,1 +336,1 @@\n-bool VirtualMemoryTracker::add_reserved_region(address base_addr, size_t size,\n+bool VirtualMemoryTracker::add_reserved_region_impl(address base_addr, size_t size,\n@@ -413,0 +416,2 @@\n+  commit_events();\n+\n@@ -425,1 +430,1 @@\n-bool VirtualMemoryTracker::add_committed_region(address addr, size_t size,\n+bool VirtualMemoryTracker::add_committed_region_impl(address addr, size_t size,\n@@ -446,1 +451,1 @@\n-bool VirtualMemoryTracker::remove_uncommitted_region(address addr, size_t size) {\n+bool VirtualMemoryTracker::remove_uncommitted_region_impl(address addr, size_t size) {\n@@ -462,1 +467,1 @@\n-bool VirtualMemoryTracker::remove_released_region(ReservedMemoryRegion* rgn) {\n+bool VirtualMemoryTracker::remove_released_region_rgn(ReservedMemoryRegion* rgn) {\n@@ -482,1 +487,1 @@\n-bool VirtualMemoryTracker::remove_released_region(address addr, size_t size) {\n+bool VirtualMemoryTracker::remove_released_region_impl(address addr, size_t size) {\n@@ -496,1 +501,1 @@\n-    return remove_released_region(reserved_rgn);\n+    return remove_released_region_rgn(reserved_rgn);\n@@ -520,2 +525,2 @@\n-      remove_released_region(reserved_rgn);\n-      remove_released_region(cls_rgn);\n+      remove_released_region_rgn(reserved_rgn);\n+      remove_released_region_rgn(cls_rgn);\n@@ -554,1 +559,1 @@\n-bool VirtualMemoryTracker::split_reserved_region(address addr, size_t size, size_t split) {\n+bool VirtualMemoryTracker::split_reserved_region_impl(address addr, size_t size, size_t split) {\n@@ -566,1 +571,1 @@\n-  remove_released_region(reserved_rgn);\n+  remove_released_region_rgn(reserved_rgn);\n@@ -570,2 +575,2 @@\n-  add_reserved_region(addr, split, original_stack, original_flags);\n-  add_reserved_region(addr + split, size - split, original_stack, original_flags);\n+  add_reserved_region_impl(addr, split, original_stack, original_flags);\n+  add_reserved_region_impl(addr + split, size - split, original_stack, original_flags);\n@@ -658,0 +663,1 @@\n+  commit_events();\n","filename":"src\/hotspot\/share\/services\/virtualMemoryTracker.cpp","additions":18,"deletions":12,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"memory\/arena.hpp\"\n@@ -31,0 +32,1 @@\n+#include \"runtime\/threadCritical.hpp\"\n@@ -33,0 +35,1 @@\n+#include \"utilities\/growableArray.hpp\"\n@@ -374,2 +377,77 @@\n- public:\n-  static bool initialize(NMT_TrackingLevel level);\n+  enum class Tag {\n+    AddCommitted, AddReserved, RemoveUncommitted, RemoveReleased, SplitReserved\n+  };\n+  struct MemoryEvent {\n+    using StackFlag = struct {\n+        NativeCallStack stack;\n+        MEMFLAGS flag;\n+    };\n+    using Split = struct {\n+      size_t split;\n+    };\n+    Tag tag;\n+    void* addr; size_t size;\n+    \/\/ Optional data\n+    union {\n+      StackFlag stack_flag; \/\/ AddReserved, AddCommitted (AddCommitted only uses the stack field)\n+      Split split;          \/\/ SplitReserved\n+      \/\/ Nothing: RemoveUncommitted, RemoveReleased\n+    };\n+    MemoryEvent() {\n+    }\n+    MemoryEvent(Tag tag, void* addr, size_t size, StackFlag opts)\n+      : tag(tag), addr(addr), size(size), stack_flag(opts) {\n+    }\n+    MemoryEvent(Tag tag, void* addr, size_t size, Split opts)\n+      : tag(tag), addr(addr), size(size), split(opts) {\n+    }\n+    MemoryEvent(Tag tag, void* addr, size_t size)\n+      : tag(tag), addr(addr), size(size) {\n+    }\n+  };\n+  static Arena work_queue_arena;\n+  static GrowableArray<MemoryEvent> work_queue;\n+public:\n+  static void add_reserved_region(void* addr, size_t size, const NativeCallStack& stack, MEMFLAGS flag) {\n+    work_queue.append({Tag::AddReserved, addr, size, {stack, flag}});\n+  }\n+  static void add_committed_region(void* addr, size_t size, const NativeCallStack& stack) {\n+    work_queue.append({Tag::AddCommitted, addr, size, {stack, mtNone}});\n+  }\n+  static void remove_uncommitted_region(void* addr, size_t size) {\n+    work_queue.append({Tag::RemoveUncommitted, addr, size});\n+  }\n+  static void remove_released_region(void* addr, size_t size) {\n+    work_queue.append({Tag::RemoveReleased, addr, size});\n+  }\n+  static void split_reserved_region(address addr, size_t size, size_t split) {\n+    work_queue.append({Tag::SplitReserved, addr, size, {split}});\n+  }\n+  static void commit_events() {\n+    int length = work_queue.length();\n+    for (int i = 0; i < length; i++) {\n+      MemoryEvent evt = work_queue.at(i);\n+      if (evt.tag == Tag::AddReserved) {\n+        add_reserved_region_impl((address)evt.addr, evt.size, evt.stack_flag.stack, evt.stack_flag.flag);\n+      } else if(evt.tag == Tag::AddCommitted) {\n+        add_committed_region_impl((address)evt.addr, evt.size, evt.stack_flag.stack);\n+      } else if(evt.tag == Tag::RemoveUncommitted) {\n+        remove_uncommitted_region_impl((address)evt.addr, evt.size);\n+      } else if(evt.tag == Tag::RemoveReleased) {\n+        remove_released_region_impl((address)evt.addr, evt.size);\n+      } else if(evt.tag == Tag::SplitReserved) {\n+        split_reserved_region_impl((address)evt.addr, evt.size, evt.split.split);\n+      }\n+#ifdef ASSERT\n+      else {\n+        ShouldNotReachHere();\n+      }\n+#endif\n+    }\n+    \/\/ Try not to keep too much unused memory around.\n+    if (length > 1024) {\n+      work_queue.clear_and_deallocate();\n+    } else {\n+      work_queue.clear();\n+    }\n+  }\n@@ -377,1 +455,1 @@\n-  static bool add_reserved_region (address base_addr, size_t size, const NativeCallStack& stack, MEMFLAGS flag = mtNone);\n+  static bool initialize(NMT_TrackingLevel level);\n@@ -379,5 +457,7 @@\n-  static bool add_committed_region      (address base_addr, size_t size, const NativeCallStack& stack);\n-  static bool remove_uncommitted_region (address base_addr, size_t size);\n-  static bool remove_released_region    (address base_addr, size_t size);\n-  static bool remove_released_region    (ReservedMemoryRegion* rgn);\n-  static void set_reserved_region_type  (address addr, MEMFLAGS flag);\n+private:\n+  \/\/ Internal linked list work\n+  static bool add_reserved_region_impl        (address base_addr, size_t size, const NativeCallStack& stack, MEMFLAGS flag = mtNone);\n+  static bool add_committed_region_impl       (address base_addr, size_t size, const NativeCallStack& stack);\n+  static bool remove_uncommitted_region_impl  (address base_addr, size_t size);\n+  static bool remove_released_region_impl     (address base_addr, size_t size);\n+  static bool remove_released_region_rgn (ReservedMemoryRegion* rgn);\n@@ -388,1 +468,4 @@\n-  static bool split_reserved_region(address addr, size_t size, size_t split);\n+  static bool split_reserved_region_impl(address addr, size_t size, size_t split);\n+\n+public:\n+  static void set_reserved_region_type   (address addr, MEMFLAGS flag);\n@@ -393,0 +476,2 @@\n+  \/\/ Default walkers\n+\n","filename":"src\/hotspot\/share\/services\/virtualMemoryTracker.hpp","additions":94,"deletions":9,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    VirtualMemoryTracker::add_reserved_region(stack_end, stack_size, CALLER_PC, mtThreadStack);\n+    VirtualMemoryTracker::add_reserved_region_impl(stack_end, stack_size, CALLER_PC, mtThreadStack);\n@@ -109,1 +109,1 @@\n-    VirtualMemoryTracker::add_reserved_region((address)base, size, stack, mtThreadStack);\n+    VirtualMemoryTracker::add_reserved_region_impl((address)base, size, stack, mtThreadStack);\n@@ -139,1 +139,1 @@\n-    VirtualMemoryTracker::remove_released_region((address)base, size);\n+    VirtualMemoryTracker::remove_released_region_impl((address)base, size);\n","filename":"test\/hotspot\/gtest\/runtime\/test_committed_virtualmemory.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -105,0 +105,2 @@\n+    VirtualMemoryTracker::commit_events();\n+\n@@ -179,0 +181,1 @@\n+    VirtualMemoryTracker::commit_events();\n@@ -180,1 +183,1 @@\n-    VirtualMemoryTracker::add_reserved_region(addr, size, stack, mtTest);\n+    VirtualMemoryTracker::add_reserved_region_impl(addr, size, stack, mtTest);\n@@ -255,1 +258,0 @@\n-\n@@ -266,0 +268,2 @@\n+    VirtualMemoryTracker::commit_events();\n+\n@@ -437,0 +441,1 @@\n+    VirtualMemoryTracker::commit_events();\n","filename":"test\/hotspot\/gtest\/runtime\/test_virtualMemoryTracker.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"}]}