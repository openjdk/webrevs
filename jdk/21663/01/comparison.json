{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties;\n@@ -1404,0 +1405,1 @@\n+            checkArraySize(tree.elems);\n@@ -1426,0 +1428,6 @@\n+        private void checkArraySize(List<JCExpression> tree) {\n+            \/\/check if attribute length exceeds maximum unsigned 16-bit value\n+            if (!sigOnly && tree != null && (tree.size() >>> 16) > 0) {\n+                log.warning(tree.getFirst().pos(), CompilerProperties.Warnings.ProcAnnotationArrayTooLarge);\n+            }\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/TypeAnnotations.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2238,0 +2238,3 @@\n+compiler.warn.proc.annotation.array.too.large=\\\n+    Annotation array element too large, length exceeds limit of 65535\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,130 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test ParameterArraySizeLimit\n+ * @library \/tools\/lib\n+ * @run main ParameterArraySizeLimit\n+ *\/\n+\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.MessageFormat;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.tools.*;\n+import com.sun.source.util.JavacTask;\n+\n+\n+public class ParameterArraySizeLimit {\n+\n+    public static void main(String[] args) throws IOException {\n+\n+        int[] values = new int[]{65536, 65537, 512000};\n+\n+        for (var value : values) {\n+\n+            Path tmpDir = Paths.get(System.getProperty(\"java.io.tmpdir\"));\n+            String className = MessageFormat.format(\"ClassAnnotationWithLength_{0,number,#}.java\", value);\n+            Path out = tmpDir.resolve(className);\n+\n+            createJavaFile(value, out);\n+            checkParamArrayWarning(className, out);\n+        }\n+    }\n+\n+    private static void checkParamArrayWarning(String className, Path out) throws IOException {\n+\n+        JavaCompiler javaCompiler = ToolProvider.getSystemJavaCompiler();\n+        DiagnosticCollector<JavaFileObject> d = new DiagnosticCollector<>();\n+        JavacTask task = (JavacTask) javaCompiler.getTask(\n+                null,\n+                null,\n+                d,\n+                null,\n+                null,\n+                Collections.singletonList(\n+                        SimpleJavaFileObject.forSource(\n+                                URI.create(\"myfo:\/\" + className),\n+                                Files.readString(out)\n+                        )));\n+        task.analyze();\n+\n+        List<Diagnostic<? extends JavaFileObject>> diagnosticList = d.getDiagnostics();\n+\n+        if (diagnosticList.isEmpty()) {\n+            throw new RuntimeException(\"No diagnostic found\");\n+        }\n+\n+        for (Diagnostic<? extends JavaFileObject> diagnostic : diagnosticList) {\n+            if (!(diagnostic.getKind() == Diagnostic.Kind.WARNING\n+                    && diagnostic.getMessage(null)\n+                    .equals(\"Annotation array element too large, length exceeds limit of 65535\"))) {\n+                throw new RuntimeException(\"Unexpected diagnostic: \" + diagnostic.getMessage(null));\n+            }\n+        }\n+    }\n+\n+    private static void createJavaFile(int value, Path out) throws IOException {\n+        String customAnno = \"\"\"\n+                import java.lang.annotation.*;\n+                @Retention(RetentionPolicy.RUNTIME)\n+                @interface CustomAnno {\n+                    String value() default \"default value\";\n+                    long[] arr() ;\n+                    int count() default 0;\n+                }\n+                \"\"\";\n+        String annotation = MessageFormat.format(\"\"\"\n+                            public class ClassAnnotationWithLength_{0,number,#} '{'\n+                            @CustomAnno(value = \"custom\", count = 42, arr='{'\n+                \"\"\", value);\n+\n+        String end = \"\"\"\n+                     })\n+\n+                    static int x = 3;\n+\n+                    public void myAnnotatedMethod() { }\n+                }\n+                \"\"\";\n+\n+        BufferedWriter bufferedWriter = Files.newBufferedWriter(out);\n+        bufferedWriter.write(customAnno);\n+        bufferedWriter.write(annotation);\n+\n+        for (int i = 0; i < value - 1; i++) {\n+            bufferedWriter.write(\"-1,\");\n+        }\n+\n+        bufferedWriter.write(\"-1\");\n+        bufferedWriter.write(end);\n+        bufferedWriter.close();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/annotations\/ParameterArraySizeLimit.java","additions":130,"deletions":0,"binary":false,"changes":130,"status":"added"},{"patch":"@@ -25,0 +25,1 @@\n+compiler.warn.proc.annotation.array.too.large           # Code\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}