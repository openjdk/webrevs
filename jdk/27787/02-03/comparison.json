{"files":[{"patch":"@@ -63,0 +63,1 @@\n+import java.util.concurrent.CancellationException;\n@@ -64,1 +65,0 @@\n-import java.util.concurrent.CompletionException;\n@@ -1110,1 +1110,0 @@\n-            res = translateSendAsyncExecFailure(res);\n@@ -1113,0 +1112,2 @@\n+                \/\/ We're called by `sendAsync()` - make sure we translate exceptions\n+                res = translateSendAsyncExecFailure(res);\n@@ -1143,1 +1144,1 @@\n-                        \/\/ Except `Error`s, wrap failures inside an `IOException`.\n+                        \/\/ Except `Error` and `CancellationException`, wrap failures inside an `IOException`.\n@@ -1146,0 +1147,1 @@\n+                                || unwrappedException instanceof CancellationException\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpClientImpl.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -82,1 +82,0 @@\n-import static org.testng.Assert.assertTrue;\n@@ -670,2 +669,2 @@\n-            \/\/ `UncheckedIOException` is peeled off by `HttpClientImpl::translateSendAsyncExecFailure`\n-            return throwable instanceof CustomIOException;\n+            return UncheckedIOException.class.isInstance(throwable)\n+                    && CustomIOException.class.isInstance(throwable.getCause());\n","filename":"test\/jdk\/java\/net\/httpclient\/AbstractThrowingPublishers.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import java.util.concurrent.CancellationException;\n@@ -169,0 +170,7 @@\n+        \/\/ `CancellationException`\n+        var cancellationException = new CancellationException();\n+        testCases.add(new ExceptionTestCase(\n+                \"CancellationException\",\n+                _ -> { throw cancellationException; },\n+                exception -> assertThrowableSame(cancellationException, exception)));\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpClientSendAsyncExceptionTest.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+import com.sun.net.httpserver.HttpServer;\n@@ -68,0 +69,1 @@\n+import java.net.InetAddress;\n@@ -295,2 +297,9 @@\n-                if (throwableCausalChainContainsInstanceOf(IllegalArgumentException.class, x)) {\n-                    System.out.println(\"Got expected exception: \" + x);\n+                Throwable cause = x;\n+                if (x instanceof CompletionException || x instanceof ExecutionException) {\n+                    cause = x.getCause();\n+                }\n+                if (cause instanceof IOException && cause.getCause() != null) {\n+                    cause = cause.getCause();\n+                }\n+                if (cause instanceof IllegalArgumentException) {\n+                    System.out.println(\"Got expected exception: \" + cause);\n@@ -354,2 +363,9 @@\n-                if (throwableCausalChainContainsInstanceOf(IllegalArgumentException.class, x)) {\n-                    System.out.println(\"Got expected exception: \" + x);\n+                Throwable cause = x;\n+                if (x instanceof CompletionException || x instanceof ExecutionException) {\n+                    cause = x.getCause();\n+                }\n+                if (cause instanceof IOException && cause.getCause() != null) {\n+                    cause = cause.getCause();\n+                }\n+                if (cause instanceof IllegalArgumentException) {\n+                    System.out.println(\"Got expected exception: \" + cause);\n@@ -400,2 +416,9 @@\n-                if (throwableCausalChainContainsInstanceOf(IllegalArgumentException.class, x)) {\n-                    System.out.println(\"Got expected exception: \" + x);\n+                Throwable cause = x;\n+                if (x instanceof CompletionException || x instanceof ExecutionException) {\n+                    cause = x.getCause();\n+                }\n+                if (cause instanceof IOException && cause.getCause() != null) {\n+                    cause = cause.getCause();\n+                }\n+                if (cause instanceof IllegalArgumentException) {\n+                    System.out.println(\"Got expected exception: \" + cause);\n@@ -453,2 +476,9 @@\n-                if (throwableCausalChainContainsInstanceOf(IllegalArgumentException.class, x)) {\n-                    System.out.println(\"Got expected exception: \" + x);\n+                Throwable cause = x;\n+                if (x instanceof CompletionException || x instanceof ExecutionException) {\n+                    cause = x.getCause();\n+                }\n+                if (cause instanceof IOException && cause.getCause() != null) {\n+                    cause = cause.getCause();\n+                }\n+                if (cause instanceof IllegalArgumentException) {\n+                    System.out.println(\"Got expected exception: \" + cause);\n@@ -476,11 +506,0 @@\n-    private static boolean throwableCausalChainContainsInstanceOf(\n-            Class<? extends Throwable> expectedClass,\n-            Throwable throwable) {\n-        for (Throwable t = throwable; t != null; t = t.getCause()) {\n-            if (expectedClass.isInstance(t)) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n@@ -542,0 +561,5 @@\n+    static String serverAuthority(HttpServer server) {\n+        return InetAddress.getLoopbackAddress().getHostName() + \":\"\n+                + server.getAddress().getPort();\n+    }\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/InvalidInputStreamSubscriptionRequest.java","additions":43,"deletions":19,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -343,1 +343,2 @@\n-            if (!throwableCausalChainContainsInstanceOf(expectedException, e)) {\n+            if (expectedException != null\n+                    && !expectedException.isAssignableFrom(e.getClass())) {\n@@ -362,11 +363,0 @@\n-\n-    private static boolean throwableCausalChainContainsInstanceOf(\n-            Class<? extends Throwable> expectedClass,\n-            Throwable throwable) {\n-        for (Throwable t = throwable; t != null; t = t.getCause()) {\n-            if (expectedClass.isInstance(t)) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n","filename":"test\/jdk\/java\/net\/httpclient\/http3\/H3QuicTLSConnection.java","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.util.concurrent.ExecutionException;\n@@ -161,2 +162,6 @@\n-            if (throwableCausalChainContainsInstanceOf(CancellationException.class, actualException)) {\n-                System.out.println(\"Received the expected `CancellationException` in the causal chain\");\n+            if (actualException instanceof CancellationException) {\n+                \/\/ expected\n+                System.out.println(\"Received the expected CancellationException\");\n+            } else if (actualException instanceof ExecutionException\n+                    && actualException.getCause() instanceof CancellationException) {\n+                System.out.println(\"Received CancellationException wrapped as ExecutionException\");\n@@ -184,11 +189,0 @@\n-    private static boolean throwableCausalChainContainsInstanceOf(\n-            Class<? extends Throwable> expectedClass,\n-            Throwable throwable) {\n-        for (Throwable t = throwable; t != null; t = t.getCause()) {\n-            if (expectedClass.isInstance(t)) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n","filename":"test\/jdk\/java\/net\/httpclient\/http3\/StopSendingTest.java","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"}]}