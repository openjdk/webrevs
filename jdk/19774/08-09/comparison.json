{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import java.net.URI;\n@@ -68,2 +69,1 @@\n-        Configuration config = Configuration.resolveAndBind(moduleFinder, List.of(systemConfiguration()),\n-                ModuleFinder.of(), rootModules);\n+        Configuration config = systemConfiguration().resolveAndBind(ModuleFinder.of(), moduleFinder, rootModules);\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jnativescan\/JNativeScanTask.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng TestArrayTypeRefs\n+ * @run junit TestArrayTypeRefs\n@@ -33,2 +33,2 @@\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +41,1 @@\n-    Path arrayRef;\n+    static Path ARRAY_REF;\n@@ -43,3 +43,3 @@\n-    @BeforeClass\n-    public void before() throws IOException {\n-        arrayRef = Path.of(\"arrayref.jar\");\n+    @BeforeAll\n+    public static void before() throws IOException {\n+        ARRAY_REF = Path.of(\"arrayref.jar\");\n@@ -47,1 +47,1 @@\n-        JarUtils.createJarFile(arrayRef, testClasses, Path.of(\"arrayref\", \"App.class\"));\n+        JarUtils.createJarFile(ARRAY_REF, testClasses, Path.of(\"arrayref\", \"App.class\"));\n@@ -52,1 +52,1 @@\n-        assertSuccess(jnativescan(\"--class-path\", arrayRef.toString()))\n+        assertSuccess(jnativescan(\"--class-path\", ARRAY_REF.toString()))\n","filename":"test\/langtools\/tools\/jnativescan\/TestArrayTypeRefs.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run testng TestJNativeScan\n+ * @run junit TestJNativeScan\n@@ -38,2 +38,2 @@\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -49,1 +49,1 @@\n-import static org.testng.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -53,1 +53,1 @@\n-    Path testClasses;\n+    static Path TEST_CLASSES;\n@@ -55,7 +55,7 @@\n-    Path classPathApp;\n-    Path singleJarClassPath;\n-    Path singleJarModular;\n-    Path orgMyapp;\n-    Path orgLib;\n-    Path unnamedPackageJar;\n-    Path libJar;\n+    static Path CLASS_PATH_APP;\n+    static Path SINGLE_JAR_CLASS_PATH;\n+    static Path SINGLE_JAR_MODULAR;\n+    static Path ORG_MYAPP;\n+    static Path ORG_LIB;\n+    static Path UNNAMED_PACKAGE_JAR;\n+    static Path LIB_JAR;\n@@ -63,5 +63,5 @@\n-    @BeforeClass\n-    public void before() throws IOException {\n-        singleJarClassPath = Path.of(\"singleJar.jar\");\n-        testClasses = Path.of(System.getProperty(\"test.classes\", \"\"));\n-        JarUtils.createJarFile(singleJarClassPath, testClasses, Path.of(\"main\", \"Main.class\"));\n+    @BeforeAll\n+    public static void before() throws IOException {\n+        SINGLE_JAR_CLASS_PATH = Path.of(\"singleJar.jar\");\n+        TEST_CLASSES = Path.of(System.getProperty(\"test.classes\", \"\"));\n+        JarUtils.createJarFile(SINGLE_JAR_CLASS_PATH, TEST_CLASSES, Path.of(\"main\", \"Main.class\"));\n@@ -69,2 +69,2 @@\n-        libJar = Path.of(\"lib.jar\");\n-        JarUtils.createJarFile(libJar, testClasses, Path.of(\"lib\", \"Lib.class\"));\n+        LIB_JAR = Path.of(\"lib.jar\");\n+        JarUtils.createJarFile(LIB_JAR, TEST_CLASSES, Path.of(\"lib\", \"Lib.class\"));\n@@ -75,2 +75,2 @@\n-        classPathApp = Path.of(\"app.jar\");\n-        JarUtils.createJarFile(classPathApp, manifest, testClasses, Path.of(\"app\", \"App.class\"));\n+        CLASS_PATH_APP = Path.of(\"app.jar\");\n+        JarUtils.createJarFile(CLASS_PATH_APP, manifest, TEST_CLASSES, Path.of(\"app\", \"App.class\"));\n@@ -78,3 +78,3 @@\n-        singleJarModular = makeModularJar(\"org.singlejar\");\n-        orgMyapp = makeModularJar(\"org.myapp\");\n-        orgLib = makeModularJar(\"org.lib\");\n+        SINGLE_JAR_MODULAR = makeModularJar(\"org.singlejar\");\n+        ORG_MYAPP = makeModularJar(\"org.myapp\");\n+        ORG_LIB = makeModularJar(\"org.lib\");\n@@ -83,2 +83,2 @@\n-        unnamedPackageJar = Path.of(\"unnamed_package.jar\");\n-        JarUtils.createJarFile(unnamedPackageJar, testClasses, Path.of(\"UnnamedPackage.class\"));\n+        UNNAMED_PACKAGE_JAR = Path.of(\"unnamed_package.jar\");\n+        JarUtils.createJarFile(UNNAMED_PACKAGE_JAR, TEST_CLASSES, Path.of(\"UnnamedPackage.class\"));\n@@ -89,1 +89,1 @@\n-        assertSuccess(jnativescan(\"--class-path\", singleJarClassPath.toString()))\n+        assertSuccess(jnativescan(\"--class-path\", SINGLE_JAR_CLASS_PATH.toString()))\n@@ -136,1 +136,1 @@\n-        assertSuccess(jnativescan(\"--class-path\", classPathApp.toString()))\n+        assertSuccess(jnativescan(\"--class-path\", CLASS_PATH_APP.toString()))\n@@ -165,1 +165,1 @@\n-        String modulePath = moduleRoot(\"org.myapp\").toString() + File.pathSeparator + orgLib.toString();\n+        String modulePath = moduleRoot(\"org.myapp\").toString() + File.pathSeparator + ORG_LIB.toString();\n@@ -184,1 +184,1 @@\n-        String classPath = singleJarClassPath + File.pathSeparator + classPathApp;\n+        String classPath = SINGLE_JAR_CLASS_PATH + File.pathSeparator + CLASS_PATH_APP;\n@@ -195,1 +195,1 @@\n-        assertSuccess(jnativescan(\"--class-path\", unnamedPackageJar.toString()))\n+        assertSuccess(jnativescan(\"--class-path\", UNNAMED_PACKAGE_JAR.toString()))\n@@ -221,1 +221,1 @@\n-        assertSuccess(jnativescan(\"--class-path\", testClasses.toString()))\n+        assertSuccess(jnativescan(\"--class-path\", TEST_CLASSES.toString()))\n@@ -239,3 +239,3 @@\n-        String classPath = unnamedPackageJar\n-                + File.pathSeparator + singleJarClassPath\n-                + File.pathSeparator + libJar;\n+        String classPath = UNNAMED_PACKAGE_JAR\n+                + File.pathSeparator + SINGLE_JAR_CLASS_PATH\n+                + File.pathSeparator + LIB_JAR;\n@@ -246,1 +246,1 @@\n-                .stdoutShouldContain(unnamedPackageJar.toString())\n+                .stdoutShouldContain(UNNAMED_PACKAGE_JAR.toString())\n@@ -248,1 +248,1 @@\n-                .stdoutShouldContain(libJar.toString())\n+                .stdoutShouldContain(LIB_JAR.toString())\n@@ -250,1 +250,1 @@\n-                .stdoutShouldContain(singleJarClassPath.toString());\n+                .stdoutShouldContain(SINGLE_JAR_CLASS_PATH.toString());\n","filename":"test\/langtools\/tools\/jnativescan\/TestJNativeScan.java","additions":38,"deletions":38,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng TestMissingSystemClass\n+ * @run junit TestMissingSystemClass\n@@ -33,2 +33,2 @@\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +41,1 @@\n-    Path missingsystem;\n+    static Path MISSING_SYSTEM;\n@@ -43,3 +43,3 @@\n-    @BeforeClass\n-    public void before() throws IOException {\n-        missingsystem = Path.of(\"missingsystem.jar\");\n+    @BeforeAll\n+    public static void before() throws IOException {\n+        MISSING_SYSTEM = Path.of(\"missingsystem.jar\");\n@@ -47,1 +47,1 @@\n-        JarUtils.createJarFile(missingsystem, testClasses, Path.of(\"missingsystem\", \"App.class\"));\n+        JarUtils.createJarFile(MISSING_SYSTEM, testClasses, Path.of(\"missingsystem\", \"App.class\"));\n@@ -52,1 +52,1 @@\n-        assertFailure(jnativescan(\"--class-path\", missingsystem.toString(), \"--release\", \"21\"))\n+        assertFailure(jnativescan(\"--class-path\", MISSING_SYSTEM.toString(), \"--release\", \"21\"))\n","filename":"test\/langtools\/tools\/jnativescan\/TestMissingSystemClass.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng TestSubclassRefs\n+ * @run junit TestSubclassRefs\n@@ -33,2 +33,2 @@\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +41,1 @@\n-    Path subclassRef;\n+    static Path SUBCLASS_REF;\n@@ -43,3 +43,3 @@\n-    @BeforeClass\n-    public void before() throws IOException {\n-        subclassRef = Path.of(\"subclassref.jar\");\n+    @BeforeAll\n+    public static void before() throws IOException {\n+        SUBCLASS_REF = Path.of(\"subclassref.jar\");\n@@ -47,1 +47,1 @@\n-        JarUtils.createJarFile(subclassRef, testClasses, Path.of(\"subclassref\", \"App.class\"));\n+        JarUtils.createJarFile(SUBCLASS_REF, testClasses, Path.of(\"subclassref\", \"App.class\"));\n@@ -52,1 +52,1 @@\n-        assertSuccess(jnativescan(\"--class-path\", subclassRef.toString()))\n+        assertSuccess(jnativescan(\"--class-path\", SUBCLASS_REF.toString()))\n","filename":"test\/langtools\/tools\/jnativescan\/TestSubclassRefs.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}