{"files":[{"patch":"@@ -61,1 +61,1 @@\n-                = new TreeMap<>(Comparator.comparing(ClassFileSource::moduleName));\n+                = new TreeMap<>(Comparator.comparing(ClassFileSource::path));\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jnativescan\/NativeMethodFinder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+    Path libJar;\n@@ -68,1 +69,2 @@\n-        JarUtils.createJarFile(Path.of(\"lib.jar\"), testClasses, Path.of(\"lib\", \"Lib.class\"));\n+        libJar = Path.of(\"lib.jar\");\n+        JarUtils.createJarFile(libJar, testClasses, Path.of(\"lib\", \"Lib.class\"));\n@@ -82,1 +84,1 @@\n-        JarUtils.createJarFile(unnamedPackageJar, manifest, testClasses, Path.of(\"UnnamedPackage.class\"));\n+        JarUtils.createJarFile(unnamedPackageJar, testClasses, Path.of(\"UnnamedPackage.class\"));\n@@ -233,0 +235,17 @@\n+\n+    @Test\n+    public void testMultipleClassPathJars() {\n+        \/\/ make sure all of these are reported, even when they are all in the ALL-UNNAMED module\n+        String classPath = unnamedPackageJar\n+                + File.pathSeparator + singleJarClassPath\n+                + File.pathSeparator + libJar;\n+        assertSuccess(jnativescan(\"--class-path\", classPath))\n+                .stderrShouldBeEmpty()\n+                .stdoutShouldContain(\"ALL-UNNAMED\")\n+                .stdoutShouldContain(\"UnnamedPackage\")\n+                .stdoutShouldContain(unnamedPackageJar.toString())\n+                .stdoutShouldContain(\"lib.Lib\")\n+                .stdoutShouldContain(libJar.toString())\n+                .stdoutShouldContain(\"main.Main\")\n+                .stdoutShouldContain(singleJarClassPath.toString());\n+    }\n","filename":"test\/langtools\/tools\/jnativescan\/TestJNativeScan.java","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"}]}