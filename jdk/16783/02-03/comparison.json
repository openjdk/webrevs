{"files":[{"patch":"@@ -864,1 +864,1 @@\n-  BUILD_HOTSPOT_JTREG_EXCLUDE += exesigtest.c libterminatedThread.c libTestJNI.c libCompleteExit.c libMonitorWithDeadObjectHelper.c libTestPsig.c exeGetCreatedJavaVMs.c\n+  BUILD_HOTSPOT_JTREG_EXCLUDE += exesigtest.c libterminatedThread.c libTestJNI.c libCompleteExit.c libMonitorWithDeadObjectTest.c libTestPsig.c exeGetCreatedJavaVMs.c\n@@ -1506,1 +1506,1 @@\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libMonitorWithDeadObjectHelper += -lpthread\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libMonitorWithDeadObjectTest += -lpthread\n","filename":"make\/test\/JtregNativeHotspot.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,42 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test MonitorWithDeadObjectDetachThreadTest\n- * @summary This test checks that ObjectMonitors with dead objects don't\n-            cause asserts, crashes, or failures when the owning thread\n-            is detached.\n- * @requires os.family != \"windows\"\n- * @library \/testlibrary \/test\/lib\n- * @modules jdk.management\n- * @run main\/native MonitorWithDeadObjectDetachThreadTest\n- *\/\n-\n-public class MonitorWithDeadObjectDetachThreadTest {\n-    public static void main(String[] args) throws Exception {\n-        \/\/ Create an ObjectMonitor with a dead object from an\n-        \/\/ attached thread.\n-        MonitorWithDeadObjectHelper.createMonitorWithDeadObject();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/Monitor\/MonitorWithDeadObjectDetachThreadTest.java","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -1,72 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test MonitorWithDeadObjectDumpThreadsAfterDetachTest\n- * @summary This test checks that ObjectMonitors with dead objects don't\n-            cause asserts, crashes, or failures when dumping threads\n-            after the owning thread has been detached.\n- * @requires os.family != \"windows\"\n- * @library \/testlibrary \/test\/lib\n- * @modules jdk.management\n- * @run main\/native MonitorWithDeadObjectDumpThreadsAfterDetachTest\n- *\/\n-\n-import java.lang.management.ManagementFactory;\n-import java.lang.management.ThreadMXBean;\n-\n-public class MonitorWithDeadObjectDumpThreadsAfterDetachTest {\n-    public static void dumpThreadsWithLockedMonitors() {\n-        ThreadMXBean threadBean = ManagementFactory.getThreadMXBean();\n-        threadBean.dumpAllThreads(true, false);\n-    }\n-\n-    public static void testBeforeJoin() {\n-        MonitorWithDeadObjectHelper.createMonitorWithDeadObjectNoJoin();\n-\n-        \/\/ After createMonitorWithDeadObjectNoJoin has been called, there's an\n-        \/\/ \"owned\" monitor with a dead object. The thread dumping code used to\n-        \/\/ not tolerate such a monitor and would assert. Run a thread dump\n-        \/\/ and make sure that it doesn't crash\/assert.\n-        dumpThreadsWithLockedMonitors();\n-\n-        MonitorWithDeadObjectHelper.joinTestThread();\n-    }\n-\n-    public static void testAfterJoin() {\n-        MonitorWithDeadObjectHelper.createMonitorWithDeadObjectNoJoin();\n-        MonitorWithDeadObjectHelper.joinTestThread();\n-\n-        \/\/ After createMonitorWithDeadObjectNoJoin has been called, there's an\n-        \/\/ \"owned\" monitor with a dead object. The thread dumping code used to\n-        \/\/ not tolerate such a monitor and would assert. Run a thread dump\n-        \/\/ and make sure that it doesn't crash\/assert.\n-        dumpThreadsWithLockedMonitors();\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        testBeforeJoin();\n-        testAfterJoin();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/Monitor\/MonitorWithDeadObjectDumpThreadsAfterDetachTest.java","additions":0,"deletions":72,"binary":false,"changes":72,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test MonitorWithDeadObjectDumpThreadsBeforeDetachTest\n- * @summary This test checks that ObjectMonitors with dead objects don't\n-            cause asserts, crashes, or failures when threads are dumped\n-            before the thread has been detached.\n- * @requires os.family != \"windows\"\n- * @library \/testlibrary \/test\/lib\n- * @modules jdk.management\n- * @run main\/native MonitorWithDeadObjectDumpThreadsBeforeDetachTest\n- *\/\n-\n-public class MonitorWithDeadObjectDumpThreadsBeforeDetachTest {\n-    public static void main(String[] args) throws Exception {\n-        MonitorWithDeadObjectHelper.createMonitorWithDeadObjectDumpThreadsBeforeDetach();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/Monitor\/MonitorWithDeadObjectDumpThreadsBeforeDetachTest.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,35 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-public class MonitorWithDeadObjectHelper {\n-    public static native void createMonitorWithDeadObject();\n-    public static native void createMonitorWithDeadObjectNoJoin();\n-    public static native void createMonitorWithDeadObjectDumpThreadsBeforeDetach();\n-\n-    public static native void joinTestThread();\n-\n-    static {\n-        System.loadLibrary(\"MonitorWithDeadObjectHelper\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/Monitor\/MonitorWithDeadObjectHelper.java","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary This test checks that ObjectMonitors with dead objects don't\n+            cause asserts, crashes, or failures when various sub-systems\n+            in the JVM find them.\n+ * @requires os.family != \"windows\"\n+ * @library \/testlibrary \/test\/lib\n+ * @modules jdk.management\n+ * @run main\/native MonitorWithDeadObjectTest\n+ *\/\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadMXBean;\n+\n+public class MonitorWithDeadObjectTest {\n+    public static native void createMonitorWithDeadObject();\n+    public static native void createMonitorWithDeadObjectNoJoin();\n+    public static native void createMonitorWithDeadObjectDumpThreadsBeforeDetach();\n+\n+    public static native void joinTestThread();\n+\n+    static {\n+        System.loadLibrary(\"MonitorWithDeadObjectTest\");\n+    }\n+\n+    private static void dumpThreadsWithLockedMonitors() {\n+        ThreadMXBean threadBean = ManagementFactory.getThreadMXBean();\n+        threadBean.dumpAllThreads(true, false);\n+    }\n+\n+    private static void testDetachThread() {\n+        \/\/ Create an ObjectMonitor with a dead object from an\n+        \/\/ attached thread.\n+        createMonitorWithDeadObject();\n+    }\n+\n+    private static void testDumpThreadsBeforeDetach() {\n+        \/\/ Create an ObjectMonitor with a dead object from an\n+        \/\/ attached thread and perform a thread dump before\n+        \/\/ detaching the thread.\n+        createMonitorWithDeadObjectDumpThreadsBeforeDetach();\n+    }\n+\n+    private static void testDumpThreadsAfterDetachBeforeJoin() {\n+        createMonitorWithDeadObjectNoJoin();\n+\n+        \/\/ After createMonitorWithDeadObjectNoJoin has been called, there's an\n+        \/\/ \"owned\" monitor with a dead object. The thread dumping code used to\n+        \/\/ not tolerate such a monitor and would assert. Run a thread dump\n+        \/\/ and make sure that it doesn't crash\/assert.\n+        dumpThreadsWithLockedMonitors();\n+\n+        joinTestThread();\n+    }\n+\n+    private static void testDumpThreadsAfterDetachAfterJoin() {\n+        createMonitorWithDeadObjectNoJoin();\n+        joinTestThread();\n+\n+        \/\/ After createMonitorWithDeadObjectNoJoin has been called, there's an\n+        \/\/ \"owned\" monitor with a dead object. The thread dumping code used to\n+        \/\/ not tolerate such a monitor and would assert. Run a thread dump\n+        \/\/ and make sure that it doesn't crash\/assert.\n+        dumpThreadsWithLockedMonitors();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        testDetachThread();\n+        testDumpThreadsBeforeDetach();\n+        testDumpThreadsAfterDetachBeforeJoin();\n+        testDumpThreadsAfterDetachAfterJoin();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/Monitor\/MonitorWithDeadObjectTest.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -30,4 +30,0 @@\n-#define die(x) do { printf(\"%s:%s\\n\",x , __func__); perror(x); exit(EXIT_FAILURE); } while (0)\n-\n-#ifndef _Included_MonitorWithDeadObjectHelper\n-#define _Included_MonitorWithDeadObjectHelper\n@@ -41,0 +37,2 @@\n+#define die(x) do { printf(\"%s:%s\\n\",x , __func__); perror(x); exit(EXIT_FAILURE); } while (0)\n+\n@@ -156,1 +154,1 @@\n-JNIEXPORT void JNICALL Java_MonitorWithDeadObjectHelper_createMonitorWithDeadObject(JNIEnv* env, jclass jc) {\n+JNIEXPORT void JNICALL Java_MonitorWithDeadObjectTest_createMonitorWithDeadObject(JNIEnv* env, jclass jc) {\n@@ -167,1 +165,1 @@\n-JNIEXPORT void JNICALL Java_MonitorWithDeadObjectHelper_createMonitorWithDeadObjectNoJoin(JNIEnv* env, jclass jc) {\n+JNIEXPORT void JNICALL Java_MonitorWithDeadObjectTest_createMonitorWithDeadObjectNoJoin(JNIEnv* env, jclass jc) {\n@@ -177,1 +175,1 @@\n-JNIEXPORT void JNICALL Java_MonitorWithDeadObjectHelper_createMonitorWithDeadObjectDumpThreadsBeforeDetach(JNIEnv* env, jclass jc) {\n+JNIEXPORT void JNICALL Java_MonitorWithDeadObjectTest_createMonitorWithDeadObjectDumpThreadsBeforeDetach(JNIEnv* env, jclass jc) {\n@@ -188,1 +186,1 @@\n-JNIEXPORT void JNICALL Java_MonitorWithDeadObjectHelper_joinTestThread(JNIEnv* env, jclass jc) {\n+JNIEXPORT void JNICALL Java_MonitorWithDeadObjectTest_joinTestThread(JNIEnv* env, jclass jc) {\n@@ -196,1 +194,0 @@\n-#endif\n","filename":"test\/hotspot\/jtreg\/runtime\/Monitor\/libMonitorWithDeadObjectTest.c","additions":6,"deletions":9,"binary":false,"changes":15,"previous_filename":"test\/hotspot\/jtreg\/runtime\/Monitor\/libMonitorWithDeadObjectHelper.c","status":"renamed"}]}