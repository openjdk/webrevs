{"files":[{"patch":"@@ -864,1 +864,1 @@\n-  BUILD_HOTSPOT_JTREG_EXCLUDE += exesigtest.c libterminatedThread.c libTestJNI.c libCompleteExit.c libTestPsig.c exeGetCreatedJavaVMs.c\n+  BUILD_HOTSPOT_JTREG_EXCLUDE += exesigtest.c libterminatedThread.c libTestJNI.c libCompleteExit.c libIterateMonitorWithDeadObjectTest.c libTestPsig.c exeGetCreatedJavaVMs.c\n@@ -1506,0 +1506,1 @@\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libIterateMonitorWithDeadObjectTest += -lpthread\n","filename":"make\/test\/JtregNativeHotspot.gmk","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2246,0 +2246,7 @@\n+\n+  if (obj == nullptr) {\n+    \/\/ This can happen if JNI code drops all references to the\n+    \/\/ owning object.\n+    return;\n+  }\n+\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1086,1 +1086,0 @@\n-      assert(monitor->object_peek() != nullptr, \"Owned monitors should not have a dead object\");\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -350,0 +350,6 @@\n+    if (monitor->object_peek() == nullptr) {\n+      \/\/ JNI code doesn't necessarily keep the monitor object\n+      \/\/ alive. Filter out monitors with dead objects.\n+      return;\n+    }\n+\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test IterateMonitorWithDeadObjectTest\n+ * @summary This locks a monitor, GCs the object, and iterate and perform\n+ *          various iteration and operations over this monitor.\n+ * @requires os.family == \"linux\"\n+ * @library \/testlibrary \/test\/lib\n+ * @build IterateMonitorWithDeadObjectTest\n+ * @run main\/native IterateMonitorWithDeadObjectTest\n+ *\/\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadMXBean;\n+\n+public class IterateMonitorWithDeadObjectTest {\n+    public static native void runTestAndDetachThread();\n+    public static native void joinTestThread();\n+\n+    public static void dumpThreadsWithLockedMonitors() {\n+        ThreadMXBean threadBean = ManagementFactory.getThreadMXBean();\n+        threadBean.dumpAllThreads(true, false);\n+    }\n+\n+    static {\n+        System.loadLibrary(\"IterateMonitorWithDeadObjectTest\");\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Run the part of the test that causes the problematic monitor:\n+        \/\/ - Create an object\n+        \/\/ - Call MonitorEnter on the object to create a monitor\n+        \/\/ - Drop the last reference to the object\n+        \/\/ - GC to clear the weak reference to the object in the monitor\n+        \/\/ - Detach the thread - provoke previous bug\n+        \/\/ - Leave the thread un-joined\n+        runTestAndDetachThread();\n+\n+        System.out.println(\"Dumping threads with locked monitors\");\n+\n+        \/\/ After testIt has been called, there's an \"owned\" monitor with a\n+        \/\/ dead object. The thread dumping code didn't tolerate such a monitor,\n+        \/\/ so run a thread dump and make sure that it doesn't crash\/assert.\n+        dumpThreadsWithLockedMonitors();\n+\n+        System.out.println(\"Dumping threads with locked monitors done\");\n+\n+        joinTestThread();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/Monitor\/IterateMonitorWithDeadObjectTest.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,142 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <jni.h>\n+#include <stdlib.h>\n+#include <pthread.h>\n+#include <stdio.h>\n+#include <unistd.h>\n+\n+#define die(x) do { printf(\"%s:%s\\n\",x , __func__); perror(x); exit(EXIT_FAILURE); } while (0)\n+\n+#ifndef _Included_IterateMonitorWithDeadObjectTest\n+#define _Included_IterateMonitorWithDeadObjectTest\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+static JavaVM* jvm;\n+static pthread_t attacher;\n+\n+static jobject create_object(JNIEnv* env) {\n+  jclass clazz = (*env)->FindClass(env, \"java\/lang\/Object\");\n+  if (clazz == 0) die(\"No class\");\n+\n+  jmethodID constructor = (*env)->GetMethodID(env, clazz, \"<init>\", \"()V\");\n+  if (constructor == 0) die(\"No constructor\");\n+\n+  return (*env)->NewObject(env, clazz, constructor);\n+}\n+\n+static void system_gc(JNIEnv* env) {\n+  jclass clazz = (*env)->FindClass(env, \"java\/lang\/System\");\n+  if (clazz == 0) die(\"No class\");\n+\n+  jmethodID method = (*env)->GetStaticMethodID(env, clazz, \"gc\", \"()V\");\n+  if (method == 0) die(\"No method\");\n+\n+  (*env)->CallStaticVoidMethod(env, clazz, method);\n+}\n+\n+static void thread_dump_with_locked_monitors(JNIEnv* env) {\n+  jclass ManagementFactoryClass = (*env)->FindClass(env, \"java\/lang\/management\/ManagementFactory\");\n+  if (ManagementFactoryClass == 0) die(\"No ManagementFactory class\");\n+\n+  jmethodID getThreadMXBeanMethod = (*env)->GetStaticMethodID(env, ManagementFactoryClass, \"getThreadMXBean\", \"()Ljava\/lang\/management\/ThreadMXBean;\");\n+  if (getThreadMXBeanMethod == 0) die(\"No getThreadMXBean method\");\n+\n+  jobject threadBean = (*env)->CallStaticObjectMethod(env, ManagementFactoryClass, getThreadMXBeanMethod);\n+\n+  jclass ThreadMXBeanClass = (*env)->FindClass(env, \"java\/lang\/management\/ThreadMXBean\");\n+  if (ThreadMXBeanClass == 0) die(\"No ThreadMXBean class\");\n+\n+  jmethodID dumpAllThreadsMethod = (*env)->GetMethodID(env, ThreadMXBeanClass, \"dumpAllThreads\", \"(ZZ)[Ljava\/lang\/management\/ThreadInfo;\");\n+  if (dumpAllThreadsMethod == 0) die(\"No dumpAllThreads method\");\n+\n+  \/\/ The 'lockedMonitors == true' is what triggers the collection of the monitor with the dead object.\n+  (*env)->CallObjectMethod(env, ThreadMXBeanClass, dumpAllThreadsMethod, threadBean, JNI_TRUE \/* lockedMonitors *\/, JNI_FALSE \/* lockedSynchronizers*\/);\n+}\n+\n+static void* do_test() {\n+  JNIEnv* env;\n+  int res = (*jvm)->AttachCurrentThread(jvm, (void**)&env, NULL);\n+  if (res != JNI_OK) die(\"AttachCurrentThread\");\n+\n+  jobject obj = create_object(env);\n+\n+  if ((*env)->MonitorEnter(env, obj) != 0) die(\"MonitorEnter\");\n+\n+  \/\/ Drop the last strong reference to the object associated with the monitor.\n+  \/\/ The monitor only keeps a weak reference to the object.\n+  (*env)->DeleteLocalRef(env, obj);\n+\n+  \/\/ Let the GC clear the weak reference to the object.\n+  system_gc(env);\n+\n+  \/\/ Perform a thread dump that checks for all thread's monitors.\n+  \/\/ That code didn't expect the monitor iterators to return monitors\n+  \/\/ with dead objects and therefore asserted\/crashed.\n+  thread_dump_with_locked_monitors(env);\n+\n+  \/\/ DetachCurrenThread will try to unlock held monitors. This has been a\n+  \/\/ source of at least two bugs:\n+  \/\/ - When the object reference in the monitor was made weak, the code\n+  \/\/   didn't unlock the monitor, leaving it lingering in the system.\n+  \/\/ - When the monitor iterator API was rewritten the code was changed to\n+  \/\/   assert that we didn't have \"owned\" monitors with dead objects. This\n+  \/\/   test provokes that situation and those asserts.\n+  if ((*jvm)->DetachCurrentThread(jvm) != JNI_OK) die(\"DetachCurrentThread\");\n+  pthread_exit(NULL);\n+\n+  return NULL;\n+}\n+\n+\/*\n+ * Class:     IterateMonitorWithDeadObjectTest\n+ * Method:    runTestAndDetachThread\n+ * Signature: ()V\n+ *\/\n+JNIEXPORT void JNICALL Java_IterateMonitorWithDeadObjectTest_runTestAndDetachThread(JNIEnv* env, jclass jc) {\n+    pthread_attr_t attr;\n+    void* ret;\n+\n+    (*env)->GetJavaVM(env, &jvm);\n+\n+    if (pthread_attr_init(&attr) != 0) die(\"pthread_attr_init\");\n+    if (pthread_create(&attacher, &attr, do_test, NULL) != 0) die(\"pthread_create\");\n+}\n+\n+\/*\n+ * Class:     IterateMonitorWithDeadObjectTest\n+ * Method:    joinTestThread\n+ * Signature: ()V\n+ *\/\n+JNIEXPORT void JNICALL Java_IterateMonitorWithDeadObjectTest_joinTestThread(JNIEnv* env, jclass jc) {\n+    void* ret;\n+    if (pthread_join(attacher, &ret) != 0) die(\"pthread_join\");\n+}\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+#endif\n","filename":"test\/hotspot\/jtreg\/runtime\/Monitor\/libIterateMonitorWithDeadObjectTest.c","additions":142,"deletions":0,"binary":false,"changes":142,"status":"added"},{"patch":"@@ -49,0 +49,1 @@\n+    private static native void jniMonitorEnter(Object obj);\n@@ -52,0 +53,11 @@\n+    private static void jniMonitorEnterAndLetObjectDie() {\n+        \/\/ The monitor iterator used GetOwnedMonitorInfo used to\n+        \/\/ assert when an owned monitor with a dead object was found.\n+        \/\/ Inject this situation into this test that performs other\n+        \/\/ GetOwnedMonitorInfo testing.\n+        Object obj = new Object() { public String toString() {return \"\";} };\n+        jniMonitorEnter(obj);\n+        obj = null;\n+        System.gc();\n+    }\n+\n@@ -53,2 +65,4 @@\n-        runTest(true);\n-        runTest(false);\n+        runTest(true, true);\n+        runTest(true, false);\n+        runTest(false, true);\n+        runTest(false, false);\n@@ -57,1 +71,1 @@\n-    public static void runTest(boolean isVirtual) throws Exception {\n+    public static void runTest(boolean isVirtual, boolean jni) throws Exception {\n@@ -62,0 +76,4 @@\n+            if (jni) {\n+                jniMonitorEnterAndLetObjectDie();\n+            }\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/GetOwnedMonitorInfo\/GetOwnedMonitorInfoTest.java","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -267,0 +267,7 @@\n+JNIEXPORT void JNICALL\n+Java_GetOwnedMonitorInfoTest_jniMonitorEnter(JNIEnv* env, jclass cls, jobject obj) {\n+    if ((*env)->MonitorEnter(env, obj) != 0) {\n+        fprintf(stderr, \"MonitorEnter failed\");\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/GetOwnedMonitorInfo\/libGetOwnedMonitorInfoTest.c","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}