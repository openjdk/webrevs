{"files":[{"patch":"@@ -32,1 +32,0 @@\n-#include \"gc\/shared\/softRefPolicy.hpp\"\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonHeap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-#include \"gc\/shared\/softRefPolicy.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -472,5 +472,0 @@\n-bool ParallelScavengeHeap::must_clear_all_soft_refs() {\n-  return _gc_cause == GCCause::_metadata_GC_clear_soft_refs ||\n-         _gc_cause == GCCause::_wb_full_gc;\n-}\n-\n@@ -479,1 +474,1 @@\n-  bool clear_soft_refs = must_clear_all_soft_refs();\n+  bool clear_soft_refs = should_clear_all_soft_refs();\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -99,2 +99,0 @@\n-  bool must_clear_all_soft_refs();\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -343,5 +343,0 @@\n-bool SerialHeap::must_clear_all_soft_refs() {\n-  return _gc_cause == GCCause::_metadata_GC_clear_soft_refs ||\n-         _gc_cause == GCCause::_wb_full_gc;\n-}\n-\n@@ -500,1 +495,1 @@\n-  bool clear_soft_refs = must_clear_all_soft_refs();\n+  bool clear_soft_refs = should_clear_all_soft_refs();\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#include \"gc\/shared\/softRefPolicy.hpp\"\n@@ -107,4 +106,0 @@\n-  \/\/ Does the \"cause\" of GC indicate that\n-  \/\/ we absolutely __must__ clear soft refs?\n-  bool must_clear_all_soft_refs();\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -279,1 +279,0 @@\n-  _soft_ref_policy(),\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"gc\/shared\/softRefPolicy.hpp\"\n@@ -107,2 +106,0 @@\n-  SoftRefPolicy _soft_ref_policy;\n-\n@@ -237,0 +234,11 @@\n+  \/\/ Does the \"cause\" of GC indicate that\n+  \/\/ we absolutely __must__ clear soft refs?\n+  static inline bool should_clear_all_soft_refs(GCCause::Cause cause) {\n+    return cause == GCCause::_metadata_GC_clear_soft_refs ||\n+           cause == GCCause::_wb_full_gc;\n+  }\n+\n+  inline bool should_clear_all_soft_refs() const {\n+    return should_clear_all_soft_refs(_gc_cause);\n+  }\n+\n@@ -398,3 +406,0 @@\n-  \/\/ Return the SoftRefPolicy for the heap;\n-  SoftRefPolicy* soft_ref_policy() { return &_soft_ref_policy; }\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"gc\/shared\/softRefPolicy.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcVMOperations.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,42 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_SHARED_SOFTREFPOLICY_HPP\n-#define SHARE_GC_SHARED_SOFTREFPOLICY_HPP\n-\n-class SoftRefPolicy {\n- private:\n-  \/\/ Set to true when policy wants soft refs cleared.\n-  \/\/ Reset to false by gc after it clears all soft refs.\n-  bool _should_clear_all_soft_refs;\n-\n- public:\n-  SoftRefPolicy() :\n-    _should_clear_all_soft_refs(false) {}\n-\n-  bool should_clear_all_soft_refs() { return _should_clear_all_soft_refs; }\n-  void set_should_clear_all_soft_refs(bool v) { _should_clear_all_soft_refs = v; }\n-};\n-\n-#endif \/\/ SHARE_GC_SHARED_SOFTREFPOLICY_HPP\n","filename":"src\/hotspot\/share\/gc\/shared\/softRefPolicy.hpp","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -117,0 +117,2 @@\n+  _generation->ref_processor()->set_soft_reference_policy(\n+      ShenandoahHeap::should_clear_all_soft_refs(cause));\n@@ -735,1 +737,0 @@\n-  rp->set_soft_reference_policy(heap->soft_ref_policy()->should_clear_all_soft_refs());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"gc\/shenandoah\/shenandoahReferenceProcessor.hpp\"\n@@ -121,1 +122,1 @@\n-      heap->soft_ref_policy()->set_should_clear_all_soft_refs(true);\n+      heap->global_generation()->ref_processor()->set_soft_reference_policy(true);\n@@ -196,1 +197,1 @@\n-      heap->soft_ref_policy()->set_should_clear_all_soft_refs(false);\n+      heap->global_generation()->ref_processor()->set_soft_reference_policy(false);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"gc\/shenandoah\/shenandoahReferenceProcessor.hpp\"\n@@ -219,2 +220,3 @@\n-  if (request.generation->is_global() && (ShenandoahCollectorPolicy::is_allocation_failure(request.cause) || ShenandoahCollectorPolicy::is_explicit_gc(request.cause) || ShenandoahAlwaysClearSoftRefs)) {\n-    _heap->soft_ref_policy()->set_should_clear_all_soft_refs(true);\n+  if (ShenandoahHeap::should_clear_all_soft_refs(request.cause) || (request.generation->is_global() &&\n+      (ShenandoahCollectorPolicy::is_allocation_failure(request.cause) || ShenandoahCollectorPolicy::is_explicit_gc(request.cause) || ShenandoahAlwaysClearSoftRefs))) {\n+    request.generation->ref_processor()->set_soft_reference_policy(true);\n@@ -292,1 +294,1 @@\n-  _heap->soft_ref_policy()->set_should_clear_all_soft_refs(false);\n+  request.generation->ref_processor()->set_soft_reference_policy(false);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalControlThread.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"gc\/shared\/softRefPolicy.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -80,1 +80,0 @@\n-  rp->set_soft_reference_policy(heap->soft_ref_policy()->should_clear_all_soft_refs());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSTWMark.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/shared\/softRefPolicy.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1504,1 +1504,0 @@\n-  Universe::heap()->soft_ref_policy()->set_should_clear_all_soft_refs(true);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}