{"files":[{"patch":"@@ -474,1 +474,1 @@\n-  bool clear_soft_refs = should_clear_all_soft_refs();\n+  bool clear_soft_refs = GCCause::should_clear_all_soft_refs(_gc_cause);\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -495,1 +495,1 @@\n-  bool clear_soft_refs = should_clear_all_soft_refs();\n+  bool clear_soft_refs = GCCause::should_clear_all_soft_refs(_gc_cause);\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -234,11 +234,0 @@\n-  \/\/ Does the \"cause\" of GC indicate that\n-  \/\/ we absolutely __must__ clear soft refs?\n-  static inline bool should_clear_all_soft_refs(GCCause::Cause cause) {\n-    return cause == GCCause::_metadata_GC_clear_soft_refs ||\n-           cause == GCCause::_wb_full_gc;\n-  }\n-\n-  inline bool should_clear_all_soft_refs() const {\n-    return should_clear_all_soft_refs(_gc_cause);\n-  }\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -106,0 +106,7 @@\n+  \/\/ Does the \"cause\" of GC indicate that\n+  \/\/ we absolutely __must__ clear soft refs?\n+  inline static bool should_clear_all_soft_refs(GCCause::Cause cause) {\n+    return cause == GCCause::_metadata_GC_clear_soft_refs ||\n+           cause == GCCause::_wb_full_gc;\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/gcCause.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-      ShenandoahHeap::should_clear_all_soft_refs(cause));\n+      GCCause::should_clear_all_soft_refs(cause));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -220,1 +220,1 @@\n-  if (ShenandoahHeap::should_clear_all_soft_refs(request.cause) || (request.generation->is_global() &&\n+  if (GCCause::should_clear_all_soft_refs(request.cause) || (request.generation->is_global() &&\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalControlThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -224,0 +224,2 @@\n+AlwaysClearPolicy ShenandoahReferenceProcessor::_always_clear_policy;\n+\n@@ -225,1 +227,1 @@\n-  _soft_reference_policy(nullptr),\n+  _soft_reference_policy(&_always_clear_policy),\n@@ -248,1 +250,0 @@\n-  static AlwaysClearPolicy always_clear_policy;\n@@ -253,1 +254,1 @@\n-    _soft_reference_policy = &always_clear_policy;\n+    _soft_reference_policy = &_always_clear_policy;\n@@ -287,1 +288,1 @@\n-  assert(_soft_reference_policy != nullptr, \"Policy not initialized\");\n+  assert(_soft_reference_policy != nullptr, \"Should never be null\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -130,0 +130,2 @@\n+  static AlwaysClearPolicy _always_clear_policy;\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}