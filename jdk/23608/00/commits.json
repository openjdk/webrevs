[{"commit":{"message":"8349522: AArch64: Add backend implementation for new unsigned and saturating vector operations\n\nSince PR [1] has added several new vector operations in VectorAPI\nand the X86 backend implementation for them, this patch adds the\nAArch64 backend part for NEON\/SVE architectures.\n\nThe performance of Vector API relative jmh micro benchmarks can\nimprove about 70x ~ 95x on an AArch64 128-bit vector length sve2\narchitecture with different UseSVE options. Here is the uplift\ndetails:\n\n```\nBenchmark                  (size)  Mode Cnt -XX:UseSVE=0 -XX:UseSVE=1 -XX:UseSVE=2\nByteMaxVector.SADD          1024  thrpt  30    80.69x       79.70x      80.534x\nByteMaxVector.SADDMasked    1024  thrpt  30    84.08x       85.72x      85.901x\nByteMaxVector.SSUB          1024  thrpt  30    80.46x       80.27x      81.063x\nByteMaxVector.SSUBMasked    1024  thrpt  30    83.96x       85.26x      85.887x\nByteMaxVector.SUADD         1024  thrpt  30    80.43x       80.36x      81.761x\nByteMaxVector.SUADDMasked   1024  thrpt  30    83.40x       84.62x      85.199x\nByteMaxVector.SUSUB         1024  thrpt  30    79.93x       79.22x      79.714x\nByteMaxVector.SUSUBMasked   1024  thrpt  30    82.93x       85.02x      84.726x\nByteMaxVector.UMAX          1024  thrpt  30    78.73x       77.39x      78.220x\nByteMaxVector.UMAXMasked    1024  thrpt  30    82.62x       84.77x      85.531x\nByteMaxVector.UMIN          1024  thrpt  30    79.04x       77.80x      78.471x\nByteMaxVector.UMINMasked    1024  thrpt  30    83.11x       84.86x      86.126x\nIntMaxVector.SADD           1024  thrpt  30    83.11x       83.07x      83.183x\nIntMaxVector.SADDMasked     1024  thrpt  30    90.67x       91.80x      93.162x\nIntMaxVector.SSUB           1024  thrpt  30    83.37x       82.82x      83.317x\nIntMaxVector.SSUBMasked     1024  thrpt  30    90.85x       92.87x      94.201x\nIntMaxVector.SUADD          1024  thrpt  30    82.76x       81.78x      82.679x\nIntMaxVector.SUADDMasked    1024  thrpt  30    90.49x       91.93x      93.155x\nIntMaxVector.SUSUB          1024  thrpt  30    82.92x       82.34x      82.525x\nIntMaxVector.SUSUBMasked    1024  thrpt  30    90.60x       92.12x      92.951x\nIntMaxVector.UMAX           1024  thrpt  30    82.40x       81.85x      82.242x\nIntMaxVector.UMAXMasked     1024  thrpt  30    90.30x       92.10x      92.587x\nIntMaxVector.UMIN           1024  thrpt  30    82.84x       81.43x      82.801x\nIntMaxVector.UMINMasked     1024  thrpt  30    90.43x       91.49x      92.678x\nLongMaxVector.SADD          1024  thrpt  30    82.01x       81.74x      82.153x\nLongMaxVector.SADDMasked    1024  thrpt  30    91.61x       92.69x      93.579x\nLongMaxVector.SSUB          1024  thrpt  30    81.97x       81.42x      82.991x\nLongMaxVector.SSUBMasked    1024  thrpt  30    91.34x       92.47x      93.026x\nLongMaxVector.SUADD         1024  thrpt  30    82.44x       81.29x      82.506x\nLongMaxVector.SUADDMasked   1024  thrpt  30    92.21x       92.35x      93.419x\nLongMaxVector.SUSUB         1024  thrpt  30    82.04x       80.98x      81.761x\nLongMaxVector.SUSUBMasked   1024  thrpt  30    91.74x       92.39x      93.375x\nLongMaxVector.UMAX          1024  thrpt  30    81.59x       80.21x      82.162x\nLongMaxVector.UMAXMasked    1024  thrpt  30    70.09x       92.89x      93.627x\nLongMaxVector.UMIN          1024  thrpt  30    82.31x       81.95x      82.298x\nLongMaxVector.UMINMasked    1024  thrpt  30    69.85x       92.19x      93.390x\nShortMaxVector.SADD         1024  thrpt  30    80.08x       79.15x      80.310x\nShortMaxVector.SADDMasked   1024  thrpt  30    90.74x       92.00x      93.743x\nShortMaxVector.SSUB         1024  thrpt  30    79.54x       78.67x      80.584x\nShortMaxVector.SSUBMasked   1024  thrpt  30    91.18x       92.10x      93.725x\nShortMaxVector.SUADD        1024  thrpt  30    79.86x       79.37x      80.372x\nShortMaxVector.SUADDMasked  1024  thrpt  30    90.17x       92.43x      93.759x\nShortMaxVector.SUSUB        1024  thrpt  30    79.78x       79.85x      80.744x\nShortMaxVector.SUSUBMasked  1024  thrpt  30    89.99x       91.91x      93.320x\nShortMaxVector.UMAX         1024  thrpt  30    79.87x       79.81x      80.518x\nShortMaxVector.UMAXMasked   1024  thrpt  30    89.69x       91.70x      92.826x\nShortMaxVector.UMIN         1024  thrpt  30    79.11x       77.98x      79.458x\nShortMaxVector.UMINMasked   1024  thrpt  30    90.49x       92.86x      93.323x\n```\n\nTested with `hotspot::hotspot_all` and `jdk::jdk_all`, and no\nnew regression is found.\n\n[1] https:\/\/github.com\/openjdk\/jdk\/pull\/20507"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"},{"filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/IREncodingPrinter.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorSaturatedOperationsTest.java"}],"sha":"2f9b3fbab858a85ce1715b6b628c09c5f5745854"}]