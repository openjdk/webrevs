{"files":[{"patch":"@@ -187,1 +187,1 @@\n-  if (FLAG_IS_DEFAULT(TLABAllocationWeight)) {\n+  if (strcmp(ShenandoahGCMode, \"generational\") && FLAG_IS_DEFAULT(TLABAllocationWeight)) {\n@@ -190,0 +190,1 @@\n+  \/\/ In generational mode, let TLABAllocationWeight keeps its default value of 35.\n@@ -220,0 +221,9 @@\n+\n+  if (FLAG_IS_DEFAULT(TLABSize)) {\n+    TLABSize = MAX2(ShenandoahHeapRegion::region_size_bytes() \/ 256, (size_t) 32 * 1024);\n+  }\n+#undef KELVIN_ARGUMENTS\n+#ifdef KELVIN_ARGUMENTS\n+  log_info(gc)(\"TLABAllocationWeight: %u\", (unsigned int) TLABAllocationWeight);\n+  log_info(gc)(\"            TLABSize: %zu\", (size_t) TLABSize);\n+#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahArguments.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -793,0 +793,1 @@\n+  \/\/ Limit TLAB size for better startup behavior and more equitable distribution of memory between contending mutator threads.\n@@ -794,1 +795,2 @@\n-  MaxTLABSizeWords = align_down(RegionSizeWords, MinObjAlignment);\n+  MaxTLABSizeWords = align_down(MIN2(RegionSizeWords, MAX2(RegionSizeWords \/ 32, (size_t) (256 * 1024) \/ HeapWordSize)),\n+                                MinObjAlignment);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,2 +60,2 @@\n-                switch (i & 0x3) {\n-                    case 0:\n+                switch (i & 0x7) {\n+                    case 0,1,2:\n@@ -66,1 +66,1 @@\n-                    case 1:\n+                    case 3,4:\n@@ -70,1 +70,1 @@\n-                    case 2,3:\n+                    case 5,6,7:\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/generational\/TestOldGrowthTriggers.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}