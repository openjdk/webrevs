{"files":[{"patch":"@@ -53,0 +53,3 @@\n+<li><a href=\"#avoid-implicit-conversions-to-bool\"\n+id=\"toc-avoid-implicit-conversions-to-bool\">Avoid implicit conversions\n+to bool<\/a><\/li>\n@@ -75,0 +78,3 @@\n+<li><a href=\"#non-type-template-parameter-values\"\n+id=\"toc-non-type-template-parameter-values\">Non-type template parameter\n+values<\/a><\/li>\n@@ -80,0 +86,2 @@\n+<li><a href=\"#inline-variables\" id=\"toc-inline-variables\">Inline\n+Variables<\/a><\/li>\n@@ -85,0 +93,2 @@\n+<li><a href=\"#mandatory-copy-elision\"\n+id=\"toc-mandatory-copy-elision\">Mandatory Copy Elision<\/a><\/li>\n@@ -91,0 +101,8 @@\n+<li><a href=\"#enhanced-selection-statements\"\n+id=\"toc-enhanced-selection-statements\">Enhanced selection\n+statements<\/a><\/li>\n+<li><a href=\"#expression-evaluation-order\"\n+id=\"toc-expression-evaluation-order\">Expression Evaluation\n+Order<\/a><\/li>\n+<li><a href=\"#compatibility-with-c11\"\n+id=\"toc-compatibility-with-c11\">Compatibility with C11<\/a><\/li>\n@@ -94,0 +112,1 @@\n+<\/ul><\/li>\n@@ -95,0 +114,10 @@\n+Features<\/a>\n+<ul>\n+<li><a href=\"#structured-bindings\"\n+id=\"toc-structured-bindings\">Structured Bindings<\/a><\/li>\n+<li><a href=\"#file-system-library\" id=\"toc-file-system-library\">File\n+System Library<\/a><\/li>\n+<li><a href=\"#aggregate-extensions\"\n+id=\"toc-aggregate-extensions\">Aggregate Extensions<\/a><\/li>\n+<li><a href=\"#additional-excluded-features\"\n+id=\"toc-additional-excluded-features\">Additional Excluded\n@@ -96,0 +125,1 @@\n+<\/ul><\/li>\n@@ -97,0 +127,19 @@\n+Features<\/a>\n+<ul>\n+<li><a href=\"#stdoptional\"\n+id=\"toc-stdoptional\">std::optional&lt;&gt;<\/a><\/li>\n+<li><a href=\"#stdbyte\" id=\"toc-stdbyte\">std::byte<\/a><\/li>\n+<li><a href=\"#string-views\" id=\"toc-string-views\">String Views<\/a><\/li>\n+<li><a href=\"#substring-and-subsequence-searching\"\n+id=\"toc-substring-and-subsequence-searching\">Substring and Subsequence\n+Searching<\/a><\/li>\n+<li><a href=\"#new-and-delete-with-over-aligned-data\"\n+id=\"toc-new-and-delete-with-over-aligned-data\"><code>new<\/code> and\n+<code>delete<\/code> with Over-Aligned Data<\/a><\/li>\n+<li><a href=\"#stdto_chars-and-stdfrom_chars\"\n+id=\"toc-stdto_chars-and-stdfrom_chars\"><code>std::to_chars()<\/code> and\n+<code>std::from_chars<\/code><\/a><\/li>\n+<li><a href=\"#stdlaunder\"\n+id=\"toc-stdlaunder\"><code>std::launder()<\/code><\/a><\/li>\n+<li><a href=\"#additional-undecided-features\"\n+id=\"toc-additional-undecided-features\">Additional Undecided\n@@ -411,7 +460,2 @@\n-<h3 id=\"miscellaneous\">Miscellaneous<\/h3>\n-<ul>\n-<li><p>Use the <a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/raii\"\n-title=\"Resource Acquisition Is Initialization\">Resource Acquisition Is\n-Initialization<\/a> (RAII) design pattern to manage bracketed critical\n-sections. See class <code>ResourceMark<\/code> for an example.<\/p><\/li>\n-<li><p>Avoid implicit conversions to <code>bool<\/code>.<\/p>\n+<h3 id=\"avoid-implicit-conversions-to-bool\">Avoid implicit conversions\n+to bool<\/h3>\n@@ -424,3 +468,11 @@\n-<li>Do not use declarations in <em>condition<\/em> forms, i.e. don't use\n-<code>if (T v = value) { ... }<\/code>.<\/li>\n-<\/ul><\/li>\n+<li>Do not use non-boolean declarations in <em>condition<\/em> forms,\n+i.e. don't use <code>if (T v = value) { ... }<\/code>. But see <a\n+href=\"#enhanced-selection-statements\">Enhanced selection\n+statements<\/a>.<\/li>\n+<\/ul>\n+<h3 id=\"miscellaneous\">Miscellaneous<\/h3>\n+<ul>\n+<li><p>Use the <a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/raii\"\n+title=\"Resource Acquisition Is Initialization\">Resource Acquisition Is\n+Initialization<\/a> (RAII) design pattern to manage bracketed critical\n+sections. See class <code>ResourceMark<\/code> for an example.<\/p><\/li>\n@@ -438,1 +490,1 @@\n-More recently, support for C++14 is provided, though again, HotSpot only\n+More recently, support for C++17 is provided, though again, HotSpot only\n@@ -444,4 +496,4 @@\n-C++11 and C++14 may be explicitly permitted or explicitly excluded, and\n-discussed accordingly here. There is a third category, undecided\n-features, about which HotSpot developers have not yet reached a\n-consensus, or perhaps have not discussed at all. Use of these features\n+C++11, C++14, and C++17 may be explicitly permitted or explicitly\n+excluded, and discussed accordingly here. There is a third category,\n+undecided features, about which HotSpot developers have not yet reached\n+a consensus, or perhaps have not discussed at all. Use of these features\n@@ -456,3 +508,3 @@\n-<p>Lists of new features for C++11 and C++14, along with links to their\n-descriptions, can be found in the online documentation for some of the\n-compilers and libraries. The C++14 Standard is the definitive\n+<p>Lists of new features for C++11, C++14, and C++17, along with links\n+to their descriptions, can be found in the online documentation for some\n+of the compilers and libraries. The C++17 Standard is the definitive\n@@ -655,0 +707,5 @@\n+<li><p><code>auto<\/code> for non-type template parameters (<a\n+href=\"http:\/\/wg21.link\/p0127r2\">p0127r2<\/a>)<br> <code>auto<\/code> may\n+be used as a placeholder for the type of a non-type template parameter.\n+The type is deduced from the value provided in a template\n+instantiation.<\/p><\/li>\n@@ -659,0 +716,17 @@\n+<li><p>Class template argument deduction (<a\n+href=\"http:\/\/wg21.link\/n3602\">n3602<\/a>, <a\n+href=\"http:\/\/wg21.link\/p0091r3\">p0091r3<\/a>)<br> The template arguments\n+of a class template may be deduced from the arguments to a constructor.\n+This is similar to ordinary function argument deduction, though partial\n+deduction with only <em>some<\/em> template arguments explicitly provided\n+is not permitted for class template argument deduction. Deduction guides\n+may be used to provide additional control over the deduction. As with\n+<code>auto<\/code> variable declarations, excessive use can make code\n+harder to understand, because explicit type information is lacking. But\n+it can also remove the need to be explicit about types that are either\n+obvious, or that are very hard to write. For example, these allow the\n+addition of a scope-guard mechanism with nice syntax; something like\n+this<\/p><\/li>\n+<\/ul>\n+<pre><code>  ScopeGuard guard{[&amp;]{ ... cleanup code ... }};<\/code><\/pre>\n+<ul>\n@@ -661,0 +735,5 @@\n+<li><p><code>decltype(auto)<\/code> should be avoided, whether for\n+variables, for non-type template parameters, or for function return\n+types. There are subtle and complex differences between this placeholder\n+type and <code>auto<\/code>. Any use would need very careful\n+explanation.<\/p><\/li>\n@@ -685,0 +764,9 @@\n+<h3 id=\"non-type-template-parameter-values\">Non-type template parameter\n+values<\/h3>\n+<p>C++17 extended the arguments permitted for non-type template\n+parameters (<a href=\"http:\/\/wg21.link\/n4268\">n4268<\/a>). The kinds of\n+values (the parameter types) aren't changed. However, the values can now\n+be the result of arbitrary constant expressions (with a few restrictions\n+on the result), rather than a much more limited and restrictive set of\n+expressions. In particular, the argument for a pointer or reference type\n+parameter can now be the result of a constexpr function.<\/p>\n@@ -798,0 +886,28 @@\n+<h3 id=\"inline-variables\">Inline Variables<\/h3>\n+<p>Variables with static storage duration may be declared\n+<code>inline<\/code> (<a href=\"https:\/\/wg21.link\/p0386r2\">p0386r2<\/a>).\n+This has similar effects as for declaring a function inline: it can be\n+defined, identically, in multiple translation units, must be defined in\n+every translation unit in which it is <a\n+href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/definition\"\n+title=\"One Definition Rule\">ODR used<\/a>, and the behavior of the\n+program is as if there is exactly one variable.<\/p>\n+<p>Declaring a variable inline allows the complete definition to be in a\n+header file, rather than having a declaration in a header and the\n+definition in a .cpp file. The guidance on <a\n+href=\"#initializing-variables-with-static-storage-duration\">initialization<\/a>\n+of such variables still applies. Inline variables with dynamic\n+initializations can make initialization order problems worse. The few\n+ordering constraints that exist for non-inline variables don't apply, as\n+there isn't a single program-designated translation unit containing the\n+definition.<\/p>\n+<p>A <code>constexpr<\/code> static data member is implicitly\n+<code>inline<\/code>. As a consequence, an <a\n+href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/definition\"\n+title=\"One Definition Rule\">ODR use<\/a> of such a variable doesn't\n+require a definition in some .cpp file. (This is a change from\n+pre-C++17. Beginning with C++17, such a definition is considered a\n+duplicate definition, and is deprecated.)<\/p>\n+<p>Declaring a <code>thread_local<\/code> variable <code>inline<\/code> is\n+forbidden for HotSpot code. <a href=\"#thread_local\">The use of\n+<code>thread_local<\/code><\/a> is already heavily restricted.<\/p>\n@@ -849,0 +965,39 @@\n+<h3 id=\"mandatory-copy-elision\">Mandatory Copy Elision<\/h3>\n+<p><a href=\"https:\/\/en.wikipedia.org\/wiki\/Copy_elision\">Copy elision<\/a>\n+(or <a\n+href=\"https:\/\/cn.cppreference.com\/w\/cpp\/language\/copy_elision.html\">here<\/a>)\n+is a compiler optimization used to avoid potentially expensive copies in\n+certain situations. It is critical to making practical the performance\n+of return by value or pass by value. It is also unusual in not following\n+the as-if rule for optimizations - copy elision can be applied even if\n+doing so bypasses side-effects of copying\/moving the object. The C++\n+standard explicitly permits this.<\/p>\n+<p>However, because it's an optional optimization, the relevant\n+copy\/move constructor must be available and accessible, in case the\n+compiler chooses to not apply the optimization even in a situation where\n+permitted.<\/p>\n+<p>C++17 changed some cases of copy elision so that there is never a\n+copy\/move in these cases (<a\n+href=\"http:\/\/wg21.link\/p0135r1\">p0135r1<\/a>). The interesting cases\n+involve a function that returns an unnamed temporary object, and\n+constructors. In such cases the object being initialized from the\n+temporary is always direct initialized, with no copy\/move ever involved;\n+see <a href=\"https:\/\/en.wikipedia.org\/wiki\/Copy_elision#RVO\"\n+title=\"Return Value Optimization\">RVO<\/a> and more specifically <a\n+href=\"https:\/\/cn.cppreference.com\/w\/cpp\/language\/copy_elision.html\"\n+title=\"Unnamed Return Value Optimization\">URVO<\/a>.<\/p>\n+<p>Since this is now standard behavior it can't be avoided in the\n+covered situations. This could change the behavior of code that relied\n+on side effects by constructors, but that's both uncommon and was\n+already problematic because of the previous optional copy elision. But\n+HotSpot code can, and should, explicitly take advantage of this newly\n+required behavior where it makes sense to do so.<\/p>\n+<p>For example, it may be beneficial to delay construction of the result\n+of a function until the return statement, rather than having a local\n+variable that is modified into the desired state and then returned.\n+(Though <a href=\"https:\/\/en.wikipedia.org\/wiki\/Copy_elision#NRVO\"\n+title=\"Named Return Value Optimization\">NRVO<\/a> may apply in that\n+case.)<\/p>\n+<p>It is also now possible to define a factory function for a class that\n+is neither movable nor copyable, if it can be written in a way that\n+makes use of this feature.<\/p>\n@@ -921,0 +1076,7 @@\n+<p>A lambda is a constexpr function if either the parameter declaration\n+clause is followed by <code>constexpr<\/code>, or it satisfies the\n+requirements for a constexpr function (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2016\/p0170r1.pdf\">p0170r1<\/a>).\n+Thus, using a lambda to package up some computation doesn't incur\n+unnecessary overhead or prevent use in a context required to be\n+compile-time evaluated (such as an array size).<\/p>\n@@ -968,0 +1130,12 @@\n+<li><p>By-value capture of <code>this<\/code> (using a capture list like\n+<code>[*this]<\/code> (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2016\/p0018r3.html\">p0018r3<\/a>))\n+is also not permitted. One of the motivating use-cases is when the\n+lifetime of the lambda exceeds the lifetime of the object for the\n+containing member function. That is, we have an upward lambda that is\n+capturing <code>this<\/code> of the enclosing method. But again, that\n+use-case doesn't apply if only downward lambdas are used. Another\n+use-case is when we simply want the lambda to be operating on a copy of\n+<code>this<\/code> for some reason. This is sufficiently uncommon that it\n+can be handled by manual copying, so readers don't need to understand\n+this rare syntax.<\/p><\/li>\n@@ -977,2 +1151,1 @@\n-<\/ul>\n-<p>The use of <code>mutable<\/code> lambda expressions is forbidden\n+<li><p>The use of <code>mutable<\/code> lambda expressions is forbidden\n@@ -984,1 +1157,3 @@\n-HotSpot developers to understand this relatively obscure feature.<\/p>\n+HotSpot developers to understand this relatively obscure\n+feature.<\/p><\/li>\n+<\/ul>\n@@ -1102,17 +1277,6 @@\n-revisions (<a\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2015\/p0136r1.html\"\n-title=\"p0136r1\">p0136r1<\/a> opens with a list of 8 Core Issues). Since\n-HotSpot doesn't support use of C++17, use of inherited constructors\n-could run into those problems. Such uses might also change behavior in a\n-future HotSpot update to use C++17 or later, potentially in subtle ways\n-that could lead to hard to diagnose problems. Because of this, HotSpot\n-code must not use inherited constructors.<\/p>\n-<p>Note that gcc7 provides the <code>-fnew-inheriting-ctors<\/code>\n-option to use the <a\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2015\/p0136r1.html\"\n-title=\"p0136r1\">p0136r1<\/a> semantics. This is enabled by default when\n-using C++17 or later. It is also enabled by default for\n-<code>fabi-version=11<\/code> (introduced by gcc7) or higher when using\n-C++11\/14, as the change is considered a Defect Report that applies to\n-those versions. Earlier versions of gcc don't have that option, and\n-other supported compilers may not have anything similar.<\/p>\n+revisions (<a href=\"http:\/wg21.link\/p0136r1\" title=\"p0136r1\">p0136r1<\/a>\n+opens with a list of 8 Core Issues). Although those issues have been\n+addressed, the benefits from this feature are small compared to the\n+complexity. Because of this, HotSpot code must not use inherited\n+constructors.<\/p>\n+<p><a href=\"http:\/\/wg21.link\/p0195r0\">p0195r0<\/a><\/p>\n@@ -1134,0 +1298,2 @@\n+<p><a href=\"http:\/\/wg21.link\/p0068r0\">p0068r0<\/a> is the initial\n+proposal for the attributes added by C++17.)<\/p>\n@@ -1137,0 +1303,6 @@\n+<li><code>[[nodiscard]]<\/code> (<a\n+href=\"http:\/\/wg21.link\/p0189r1\">p0189r1<\/a>)<\/li>\n+<li><code>[[maybe_unused]]<\/code> (<a\n+href=\"http:\/\/wg21.link\/p0212r1\">p0212r1<\/a>)<\/li>\n+<li><code>[[fallthrough]]<\/code> (<a\n+href=\"http:\/\/wg21.link\/p0188\">p0188r1<\/a>)<\/li>\n@@ -1144,0 +1316,17 @@\n+<p>Direct use of non-standard (and presumably scoped) attributes in\n+shared code is also forbidden. Using such would depend on the C++17\n+feature that an attribute not recognized by the implementation is\n+ignored (<a href=\"http:\/\/wg21.link\/p0283r2\">p0283r2<\/a>). If such an\n+attribute is needed in shared code, the well-established technique of\n+providing an <code>ATTRIBUTE_XXX<\/code> macro with per-compiler\n+definitions (sometimes empty) should be used. Compilers may warn about\n+unrecognized attributes (whether by name or by location), in order to\n+report typos or misuse. Disabling such warnings globally would not be\n+desirable.<\/p>\n+<p>The use of <code>using<\/code> directives in attribute lists is also\n+forbidden. (<a href=\"http:\/\/wg21.link\/p0028r0\">p0028r0<\/a>) (<a\n+href=\"http:\/\/wg21.link\/p0028r4\">p0028r4<\/a>) We don't generally use\n+scoped attributes in attribute lists with other attributes. Rather, uses\n+of scoped attributes (which are implementation defined) are generally\n+hidden behind a portability macro that includes the surrounding\n+brackets.<\/p>\n@@ -1193,0 +1382,4 @@\n+<p>The exception specification is part of the type of a function (<a\n+href=\"http:\/\/wg21.link\/p0012r1\">p0012r1<\/a>. This likely has little\n+impact on HotSpot code, since the use of <code>noexcept<\/code> is\n+expected to be rare.<\/p>\n@@ -1196,0 +1389,59 @@\n+<h3 id=\"enhanced-selection-statements\">Enhanced selection\n+statements<\/h3>\n+<p>C++17 modified the <em>condition<\/em> part <code>if<\/code> and\n+<code>switch<\/code> statements, permitting an <em>init-statement<\/em> to\n+be included (<a href=\"http:\/\/wg21.link\/p0305r1\">p0305r1<\/a>).<\/p>\n+<p>Use of this feature is permitted. (However, complex uses may\n+interfere with readability.) Limiting the scope of a variable involved\n+in the condition, while also making the value available to the\n+statement's body, can improve readability. The alternative method of\n+scope-limiting by introducing a nested scope isn't very popular and is\n+rarely used.<\/p>\n+<p>This new syntax is in addition to the <em>condition<\/em> being a\n+declaration with a <em>brace-or-equal-initializer<\/em>. For an\n+<code>if<\/code> statement this new sytax gains that benefit without\n+violating the long-standing guidance against using <a\n+href=\"#avoid-implicit-conversions-to-bool\">implicit conversions to\n+<code>bool<\/code><\/a>, which still stands.<\/p>\n+<p>For example, uses of Unified Logging sometimes explicitly check\n+whether a <code>LogTarget<\/code> is enabled. Instead of<\/p>\n+<pre><code>  LogTarget(...) lt;\n+  if (lt.is_enabled()) {\n+    LogStream log(lt);\n+    ... use log ...\n+  }\n+  ... lt is accessible but probably not needed here ...<\/code><\/pre>\n+<p>using this feature one could write<\/p>\n+<pre><code>  if (LogTarget(...) lt; lt.is_enabled()) {\n+    LogStream log(lt);\n+    ... use log ...\n+  }<\/code><\/pre>\n+<p>C++17 also added compile-time if statements (<a\n+href=\"http:\/\/wg21.link\/p0292r2\">p0292r2<\/a>). Use of\n+<code>if constexpr<\/code> is permitted. This feature can replace and\n+(sometimes vastly) simplify many uses of <a\n+href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/sfinae\"\n+title=\"Substitution Failure Is Not An Error\">SFINAE<\/a>. The same\n+declaration and initialization guidance for the <em>condition<\/em> part\n+apply here as for ordinary <code>if<\/code> statements.<\/p>\n+<h3 id=\"expression-evaluation-order\">Expression Evaluation Order<\/h3>\n+<p>C++17 tightened up the evaluation order for some kinds of\n+subexpressions (<a href=\"http:\/\/wg21.link\/p0138r2\">p0138r2<\/a>). Note,\n+however, that the Alternate Evaluation Order for Function Calls\n+alternative in that paper was adopted, rather than the strict left to\n+right order of evaluation for function call arguments that was proposed\n+in the main body of the paper.<\/p>\n+<p>The primary purpose of this change seems to be to make certain kinds\n+of call chaining well defined. That's not a style widely used in\n+HotSpot. In general it is better to continue to avoid questions in this\n+area by isolating operations with side effects from other statements. In\n+particular, continue to avoid modifying a value in an expression where\n+it is also used.<\/p>\n+<h3 id=\"compatibility-with-c11\">Compatibility with C11<\/h3>\n+<p>C++17 refers to C11 rather than C99. This means that C11 libraries\n+and functions may be used in HotSpot. There may be limitations because\n+of differing levels of compatibility among various compilers and\n+versions of those compilers.<\/p>\n+<p>Note that the C parts of the JDK have been built with C11 selected\n+for some time (<a\n+href=\"https:\/\/bugs.openjdk.org\/browse\/JDK-8292008\">JDK-8292008<\/a>).<\/p>\n@@ -1211,2 +1463,4 @@\n-<li><p>Static assertions (<a\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2004\/n1720.html\">n1720<\/a>)<\/p><\/li>\n+<li><p>Static assertions (<a href=\"http:\/\/wg21.link\/n1720\">n1720<\/a>)\n+(<a href=\"http:\/\/wg21.link\/n3928\">n3928<\/a>)<br> Both the original\n+(C++11) two-argument form and the new (C++17) single-argument form are\n+permitted.<\/p><\/li>\n@@ -1254,0 +1508,29 @@\n+<li><p>Preprocessor Condition <code>__has_include<\/code> (<a\n+href=\"http:\/\/wg21.link\/p0061r0\">p0061r0<\/a>) (<a\n+href=\"http:\/\/wg21.link\/p0061r1\">p0061r1<\/a>)<\/p><\/li>\n+<li><p>Hexadecimal Floating-Point Literals (<a\n+href=\"http:\/\/wg21.link\/p0245r1\">p0245r1<\/a>)<\/p><\/li>\n+<li><p>Construction Rules for <code>enum class<\/code> Values (<a\n+href=\"http:\/\/wg21.link\/p0138r2\">p0138r2<\/a>)<\/p><\/li>\n+<li><p>Allow <code>typename<\/code> in template template parameter (<a\n+href=\"http:\/\/wg21.link\/n4051\">n4051<\/a>) — template template parameters\n+are barely used (if at all) in HotSpot, but there's no reason to\n+artificially disallow this syntactic regularization in any such\n+uses.<\/p><\/li>\n+<\/ul>\n+<h2 id=\"excluded-features\">Excluded Features<\/h2>\n+<h3 id=\"structured-bindings\">Structured Bindings<\/h3>\n+<p>The use of structured bindings <a\n+href=\"http:\/\/wg21.link\/p0217r3\">p0217r3<\/a> is forbidden. Preferred\n+approaches for handling functions with multiple return values\n+include<\/p>\n+<ul>\n+<li><p>Return a named class\/struct intended for that purpose, with named\n+and typed members\/accessors.<\/p><\/li>\n+<li><p>Return a value along with out parameters (usually pointers,\n+sometimes references).<\/p><\/li>\n+<li><p>Designate a sentinel \"failure\" value in the normal return value\n+type, with some out of band location for additional information. For\n+example, this is the model typically used with <code>errno<\/code>, where\n+a function returns a normal result, or -1 to indicate an error, with\n+additional error information in <code>errno<\/code>.<\/p><\/li>\n@@ -1255,1 +1538,26 @@\n-<h3 id=\"excluded-features\">Excluded Features<\/h3>\n+<p>There is a strong preference for names and explicit types, as opposed\n+to offsets and implicit types. For example, there are folks who strongly\n+dislike that some of the Standard Library functions return\n+<code>std::pair<\/code> because <code>first<\/code> and\n+<code>second<\/code> members don't carry any useful information.<\/p>\n+<h3 id=\"file-system-library\">File System Library<\/h3>\n+<p>The use of the File System library is forbidden. HotSpot doesn't very\n+much with files, and already has adequate mechanisms for its needs.\n+Rewriting in terms of this new library would not be a good use of\n+resources. Having a mix of the existing usage and uses of this new\n+library would just be confusing.<\/p>\n+<p><a href=\"http:\/\/wg21.link\/n4100\">n4100<\/a> <a\n+href=\"http:\/\/wg21.link\/p0218r0\">p0218r0<\/a> <a\n+href=\"http:\/\/wg21.link\/p0219r1\">p0219r1<\/a> <a\n+href=\"http:\/\/wg21.link\/p0317r1\">p0317r1<\/a> <a\n+href=\"http:\/\/wg21.link\/p0392r0\">p0392r0<\/a> <a\n+href=\"http:\/\/wg21.link\/p0430r2\">p0430r2<\/a> <a\n+href=\"http:\/\/wg21.link\/p0492r2\">p0492r2<\/a> <a\n+href=\"http:\/\/wg21.link\/p1164r1\">p1164r1<\/a><\/p>\n+<h3 id=\"aggregate-extensions\">Aggregate Extensions<\/h3>\n+<p>Aggregates with base classes are forbidden. C++17 allows aggregate\n+initialization for classes with base classes (<a\n+href=\"https:\/\/wg21.link\/p0017r1\">p0017r1<\/a>). HotSpot makes very little\n+use of aggregate classes, preferring explicit constructors even for very\n+simple classes.<\/p>\n+<h3 id=\"additional-excluded-features\">Additional Excluded Features<\/h3>\n@@ -1289,2 +1597,3 @@\n-<code>bool<\/code> isn't needed in HotSpot code because of the \"no\n-implicit boolean\" guideline.)<\/p><\/li>\n+<code>bool<\/code> isn't needed in HotSpot code because of the <a\n+href=\"#avoid-implicit-conversions-to-bool\">no implicit boolean<\/a>\n+guideline.)<\/p><\/li>\n@@ -1292,0 +1601,56 @@\n+<li><p>Attributes for namespaces and enumerators (<a\n+href=\"http:\/\/wg21.link\/n4266\">n4266<\/a> — The only applicable attribute\n+is <a href=\"#attributes\"><code>[[deprecated]]<\/code><\/a>, which is\n+forbidden.<\/p><\/li>\n+<li><p>Variadic <code>using<\/code> declarations (<a\n+href=\"http:\/\/wg21.link\/p0195r2\">p0195r2<\/a>)<\/p><\/li>\n+<li><p><code>std::variant&lt;&gt;<\/code> (<a\n+href=\"http:\/\/wg21.link\/p0088r3\">p0088r3<\/a>) — Even if more of the C++\n+Standard Library is permitted, this class will remain forbidded. Invalid\n+accesses are indicated by throwing exceptions.<\/p><\/li>\n+<li><p><code>std::any<\/code> (<a\n+href=\"http:\/\/wg21.link\/p0220r1\">p0220r1<\/a>) — Even if more of the C++\n+Standard Library is permitted, this class will remain forbidden. It may\n+require allocation, and always uses the standard allocator. It requires\n+<a href=\"https:\/\/en.wikipedia.org\/wiki\/Run-time_type_information\"\n+title=\"Runtime Type Information\">RTTI<\/a>.<\/p><\/li>\n+<li><p><code>std::as_const()<\/code> (<a\n+href=\"http:\/\/wg21.link\/p0007r1\">p0007r1<\/a>) — If sufficiently useful,\n+HotSpot could add such a function. It would likely be added to\n+globalDefinitions.hpp, where there are already some similar small\n+utilities.<\/p><\/li>\n+<li><p><code>std::clamp()<\/code> (<a\n+href=\"http:\/\/wg21.link\/p002501\">p002501<\/a>) — This function is already\n+provided in globalDefinitions.hpp.<\/p><\/li>\n+<li><p>Parallel STL Algorithms (<a\n+href=\"http:\/\/wg21.link\/p0024r2\">p0024r2<\/a>) — Even if more of the C++\n+Standard Library is permitted, these will remain forbidden. They are\n+built on the standard C++ threading mechanisms. HotSpot doesn't use\n+those mechanisms, instead providing and using its own.<\/p><\/li>\n+<li><p>Cache Line Sizes <a href=\"http:\/\/wg21.link\/p0154r1\">p0154r1<\/a> —\n+HotSpot has its own mechanisms for this, using values like\n+<code>DEFAULT_CACHE_LINE_SIZE<\/code>. The platform-specific\n+implementation of the HotSpot mechanisms might use these library\n+functions, but there is no reason to move away from current approach.\n+Quoting from <a href=\"https:\/\/www.cppstd17.com\"\n+title=\"C++17: The Complete Guide\">JOSUTTIS<\/a>: \"... if you know better,\n+use specific values, but using these values is better than any assumed\n+fixed size for code supporting multiple platforms.\"<\/p><\/li>\n+<li><p><code>register<\/code> storage class removal <a\n+href=\"http:\/\/wg21.link\/p0001r1\">p0001r1<\/a> — The <code>register<\/code>\n+storage class has been removed. <code>register<\/code> is still a\n+keyword, so still can't be used for normal purposes. Also, this doesn't\n+affect the use of <code>register<\/code> for gcc-style extended asm code;\n+that's a different syntactic element with a different meaning.<\/p><\/li>\n+<li><p>Value of <code>__cplusplus<\/code> — Testing whether\n+<code>__cplusplus<\/code> is defined or not is permitted, and indeed\n+required. But the value should not need to be examined. The value is\n+changed with each revision of the Standard. But we build HotSpot and\n+(most of) the rest of the JDK with a specifically selected version of\n+the Standard. The value of <code>__cplusplus<\/code> should be known and\n+unchanging until we change the project's build configuration again. So\n+examining the value shouldn't ever be necessary.<\/p><\/li>\n+<li><p>Removal of <code>++<\/code> for <code>bool<\/code> (<a\n+href=\"http:\/\/wg21.link\/p0003r1\">p0003r1<\/a>)<\/p><\/li>\n+<li><p>Removal of trigraphs (<a\n+href=\"http:\/\/wg21.link\/n4086\">n4086<\/a>)<\/p><\/li>\n@@ -1293,1 +1658,1 @@\n-<h3 id=\"undecided-features\">Undecided Features<\/h3>\n+<h2 id=\"undecided-features\">Undecided Features<\/h2>\n@@ -1296,0 +1661,138 @@\n+<p>Some features are undecided (so implicitly forbidden) because we\n+don't expect to use them at all. This might be reconsidered if someone\n+finds a good use case.<\/p>\n+<p>Some Standard Library features are undecided (so implicitly\n+forbidden) because, while this Style Guide forbids the use of such, they\n+may be sufficiently useful that we want to permit them anyway. Doing so\n+may require some idiomatic mechanism for addressing things like\n+<code>assert<\/code> incompatibility, incompatibility with HotSpot's\n+<code>FORBID_C_FUNCTION<\/code> mechanism, and the like.<\/p>\n+<h3 id=\"stdoptional\">std::optional&lt;&gt;<\/h3>\n+<p>It is undecided whether to permit the use of\n+<code>std::optional&lt;&gt;<\/code> (<a\n+href=\"http:\/\/wg21.link\/p0220r1\">p0220r1<\/a>). It may be sufficiently\n+useful that it should be permitted despite the usual prohibition against\n+using Standard Library facilities. Use of the <code>value()<\/code>\n+member function must be forbidden, as it reports an invalid access by\n+throwing an exception.<\/p>\n+<h3 id=\"stdbyte\">std::byte<\/h3>\n+<p>It is undecided whether to permit the use of the\n+<code>std::byte<\/code> type (<a\n+href=\"http:\/\/wg21.link\/p0298r3\">p0298r3<\/a>). It may be sufficiently\n+useful that it should be permitted despite the usual prohibition against\n+using Standard Library facilities.<\/p>\n+<p>It has been suggested that changing the HotSpot <code>address<\/code>\n+type to use <code>std::byte<\/code> has some benefits. That is,\n+replace<\/p>\n+<pre><code>typedef u_char*       address;\n+typedef const u_char* const_address;<\/code><\/pre>\n+<pre><code>using address       = std::byte*;\n+using const_address = const std::byte*;<\/code><\/pre>\n+<p>in globalDefinitions.hpp.<\/p>\n+<p>A specific benefit that was mentioned is that it might improve the\n+horrible way that gdb handles our current definition of the\n+<code>address<\/code> type.<\/p>\n+<pre><code>#include &lt;cstddef&gt;\n+\n+typedef unsigned char* address;\n+typedef std::byte* address_b;\n+\n+int main() {\n+\n+  char* mem;\n+\n+  address addr = (address)mem;\n+  address_b addr_b = (address_b)mem;\n+\n+  return 0;\n+}<\/code><\/pre>\n+<pre><code>(gdb) p addr\n+$1 = (address) 0x7ffff7fe4fa0 &lt;dl_main&gt; &quot;\\363\\017\\036\\372Uf\\017\\357\\300H\\211\\345AWI\\211\\377AVAUATSH\\201\\354\\210\\002&quot;\n+(gdb) p addr_b\n+$2 = (address_b) 0x7ffff7fe4fa0 &lt;dl_main&gt;<\/code><\/pre>\n+<p>This needs to be explored. Some folks have said they will do so.<\/p>\n+<h3 id=\"string-views\">String Views<\/h3>\n+<p>It is undecided whether to permit the use of\n+<code>std::string_view<\/code> (<a\n+href=\"http:\/\/wg21.link\/p0220r1\">p0220r1<\/a>).<\/p>\n+<p>HotSpot doesn't use <code>std::string<\/code>, but uses\n+<code>char*<\/code> strings a lot. Wrapping such in a\n+<code>std::string_view<\/code> to enable the use of various algorithms\n+could be useful. But since HotSpot also doesn't permit use of\n+<code>&lt;algorithm&gt;<\/code> and the like, that only gets the limited\n+set of algorithms provided by the view class directly.<\/p>\n+<p>There is also the issue of <code>NUL<\/code> termination; string views\n+are not necessarily <code>NUL<\/code> terminated. Moreover, if one goes\n+to the work of making one that is <code>NUL<\/code> terminated, that\n+terminator is included in the size.<\/p>\n+<p>There are other caveats. Permitting use of string views would require\n+discussion of those.<\/p>\n+<h3 id=\"substring-and-subsequence-searching\">Substring and Subsequence\n+Searching<\/h3>\n+<p>In addition to simple substring searching, the Standard Library now\n+includes Boyer-Moore and Boyer-Moore-Horspool searchers, in case someone\n+wants to search really large texts. That seems an unlikely use-case for\n+HotSpot. See <a href=\"http:\/\/wg21.link\/p0220r1\">p0220r1<\/a>.<\/p>\n+<h3 id=\"new-and-delete-with-over-aligned-data\"><code>new<\/code> and\n+<code>delete<\/code> with Over-Aligned Data<\/h3>\n+<p>It is undecided whether to permit the use of dynamic allocation of\n+overaligned types (<a href=\"http:\/\/wg21.link\/n3396\">n3396<\/a>).<\/p>\n+<p>HotSpot currently only has a couple of over-aligned types that are\n+dynamically allocated. These are handled manually, not going through\n+<code>new<\/code> expressions, as that couldn't work before C++17.<\/p>\n+<p>One of the ways an over-aligned type might arise is by aligning a\n+data member. This might be done to avoid destructive interference for\n+concurrent accesses. But HotSpot uses a different approach, using\n+explicit padding. Again, this is in part because <code>new<\/code> and\n+<code>delete<\/code> of overaligned types didn't work. But we might\n+prefer to continue this approach.<\/p>\n+<p>We would need to add <code>operator new<\/code> overloads to\n+<code>CHeapObj&lt;&gt;<\/code> and possibly in other places in order to\n+support this. However, it has been suggested that implementing it\n+(efficiently) on top of NMT might be difficult. Note that\n+<code>posix_memalign<\/code> \/ <code>_aligned_malloc<\/code> don't help\n+here, because of NMT's use of malloc headers.<\/p>\n+<p>If we don't support it we may want to add <code>operator new<\/code>\n+overloads that are deleted, to prevent attempted uses.<\/p>\n+<p>Alignment usage in non-HotSpot parts of the OpenJDK:<\/p>\n+<ul>\n+<li><p><code>alignas<\/code> used once in harfbuzz, to align a\n+variable.<\/p><\/li>\n+<li><p>libpipewire has <code>#define SPA_ALIGNED<\/code> macro using gcc\n+<code>aligned<\/code> attribute, but doesn't use it.<\/p><\/li>\n+<li><p>libsleef has <code>#define ALIGNED<\/code> macro using gcc\n+<code>aligned<\/code> attribute. It is not used for class or member\n+declarations.<\/p><\/li>\n+<\/ul>\n+<h3 id=\"stdto_chars-and-stdfrom_chars\"><code>std::to_chars()<\/code> and\n+<code>std::from_chars<\/code><\/h3>\n+<p>It is undecided whether to permit the use of\n+<code>std::to_chars()<\/code> and <code>std::from_chars()<\/code> (<a\n+href=\"http:\/\/wg21.link\/p0067r5\">p0067r5<\/a>).<\/p>\n+<p>These functions provide low-level conversions between character\n+sequences and numeric values. This seems like a good candidate for use\n+in HotSpot, potentially replacing various clumsy or less performant\n+alternatives. There is no memory allocation. Parsing failures are\n+indicated via error codes rather than exceptions. Various other nice for\n+HotSpot properties.<\/p>\n+<p>Note that the published C++17 Standard puts these in\n+<code>&lt;utility&gt;<\/code>, but a defect report moved them to\n+<code>&lt;charconv&gt;<\/code>. This also needs\n+<code>&lt;system_error&gt;<\/code>.<\/p>\n+<p>This would require upgrading the minimum gcc version to 11.1 for\n+floating point conversion support. The minimum Visual Studio version is\n+already sufficient. The minimum clang version requirement hasn't been\n+determined yet.<\/p>\n+<h3 id=\"stdlaunder\"><code>std::launder()<\/code><\/h3>\n+<p>It is undecided whether to permit the use of\n+<code>std::launder()<\/code> (<a\n+href=\"http:\/\/wg21.link\/p0137r1\">p0137r1<\/a>).<\/p>\n+<p>Change to permitted if we discover a place where we need it. Or maybe\n+we should just permit it, but hope we don't need it.<\/p>\n+<p>Also, C++20 revised the relevant part of Object Lifetime in a way\n+that seems more permissive and with less need of laundering. We don't\n+know if implementations of prior versions take advantage of the\n+difference.<\/p>\n+<p>See Object Lifetime: C++17 6.8\/8, C++20 6.7.3\/8<\/p>\n+<h3 id=\"additional-undecided-features\">Additional Undecided\n+Features<\/h3>\n@@ -1300,1 +1803,2 @@\n-href=\"https:\/\/isocpp.org\/files\/papers\/N3651.pdf\">n3651<\/a>)<\/p><\/li>\n+href=\"https:\/\/isocpp.org\/files\/papers\/N3651.pdf\">n3651<\/a>, <a\n+href=\"http:\/\/wg21.link\/p0127r2\">p0127r2<\/a>)<\/p><\/li>\n@@ -1304,0 +1808,21 @@\n+<li><p>Shorthand for nested namespaces (<a\n+href=\"http:\/\/wg21.link\/n4230\">n4230<\/a>) — HotSpot makes very little use\n+of namespaces, so this seemingly innocuous feature probably isn't useful\n+to us.<\/p><\/li>\n+<li><p>Direct list initialization with <code>auto<\/code> (<a\n+href=\"http:\/\/wg21.link\/n3681\">n3681<\/a>) — This change fixed some issues\n+with direct list initialization and <code>auto<\/code>. But we don't use\n+that feature much, if at all. And perhaps shouldn't be using\n+it.<\/p><\/li>\n+<li><p>UTF-8 Character Literals (<a\n+href=\"http:\/\/wg21.link\/n4267\">n4267<\/a>) — Do we have a use-case for\n+this?<\/p><\/li>\n+<li><p>Fold Expressions (<a href=\"http:\/\/wg21.link\/n4295\">n4295<\/a>) —\n+Provides a simple way to apply operators to a parameter pack. HotSpot\n+doesn't use variadic templates very much. That makes it questionable\n+that developers should need to know about this feature. But if someone\n+does come up with a good use-case, it's likely that the alternatives are\n+significantly worse, because pack manipulation without this can be\n+complicated.<\/p><\/li>\n+<li><p><code>std::invoke&lt;&gt;()<\/code> (<a\n+href=\"http:\/\/wg21.link\/n4169\">n4169<\/a>)<\/p><\/li>\n","filename":"doc\/hotspot-style.html","additions":570,"deletions":45,"binary":false,"changes":615,"status":"modified"},{"patch":"@@ -369,0 +369,10 @@\n+### Avoid implicit conversions to bool\n+\n+* Use `bool` for boolean values.\n+* Do not use ints or pointers as (implicit) booleans with `&&`, `||`,\n+`if`, `while`. Instead, compare explicitly, i.e. `if (x != 0)` or\n+`if (ptr != nullptr)`, etc.\n+* Do not use non-boolean declarations in _condition_ forms, i.e. don't use\n+`if (T v = value) { ... }`. But see\n+[Enhanced selection statements](#enhanced-selection-statements).\n+\n@@ -375,8 +385,0 @@\n-* Avoid implicit conversions to `bool`.\n-    * Use `bool` for boolean values.\n-    * Do not use ints or pointers as (implicit) booleans with `&&`, `||`,\n-      `if`, `while`. Instead, compare explicitly, i.e. `if (x != 0)` or\n-      `if (ptr != nullptr)`, etc.\n-    * Do not use declarations in _condition_ forms, i.e. don't use\n-      `if (T v = value) { ... }`.\n-\n@@ -394,1 +396,0 @@\n-\n@@ -398,1 +399,1 @@\n-More recently, support for C++14 is provided, though again,\n+More recently, support for C++17 is provided, though again,\n@@ -405,1 +406,1 @@\n-C++11 and C++14 may be explicitly permitted or explicitly excluded,\n+C++11, C++14, and C++17 may be explicitly permitted or explicitly excluded,\n@@ -420,1 +421,1 @@\n-Lists of new features for C++11 and C++14, along with links to their\n+Lists of new features for C++11, C++14, and C++17, along with links to their\n@@ -422,1 +423,1 @@\n-compilers and libraries.  The C++14 Standard is the definitive\n+compilers and libraries.  The C++17 Standard is the definitive\n@@ -627,0 +628,6 @@\n+* `auto` for non-type template parameters\n+([p0127r2](http:\/\/wg21.link\/p0127r2))<br>\n+`auto` may be used as a placeholder for the type of a non-type template\n+parameter. The type is deduced from the value provided in a template\n+instantiation.\n+\n@@ -632,0 +639,16 @@\n+* Class template argument deduction\n+([n3602](http:\/\/wg21.link\/n3602), [p0091r3](http:\/\/wg21.link\/p0091r3))<br>\n+The template arguments of a class template may be deduced from the arguments\n+to a constructor. This is similar to ordinary function argument deduction,\n+though partial deduction with only _some_ template arguments explicitly\n+provided is not permitted for class template argument deduction. Deduction\n+guides may be used to provide additional control over the deduction. As with\n+`auto` variable declarations, excessive use can make code harder to\n+understand, because explicit type information is lacking. But it can also\n+remove the need to be explicit about types that are either obvious, or that\n+are very hard to write. For example, these allow the addition of a scope-guard\n+mechanism with nice syntax; something like this\n+```\n+  ScopeGuard guard{[&]{ ... cleanup code ... }};\n+```\n+\n@@ -634,0 +657,5 @@\n+* `decltype(auto)` should be avoided, whether for variables, for non-type\n+template parameters, or for function return types. There are subtle and\n+complex differences between this placeholder type and `auto`. Any use would\n+need very careful explanation.\n+\n@@ -655,0 +683,10 @@\n+### Non-type template parameter values\n+\n+C++17 extended the arguments permitted for non-type template parameters\n+([n4268](http:\/\/wg21.link\/n4268)). The kinds of values (the parameter types)\n+aren't changed.  However, the values can now be the result of arbitrary\n+constant expressions (with a few restrictions on the result), rather than a\n+much more limited and restrictive set of expressions. In particular, the\n+argument for a pointer or reference type parameter can now be the result of a\n+constexpr function.\n+\n@@ -773,0 +811,26 @@\n+### Inline Variables\n+\n+Variables with static storage duration may be declared `inline`\n+([p0386r2](https:\/\/wg21.link\/p0386r2)). This has similar effects as for\n+declaring a function inline: it can be defined, identically, in multiple\n+translation units, must be defined in every translation unit in which it is\n+[ODR used][ODR], and the behavior of the program is as if there is exactly one\n+variable.\n+\n+Declaring a variable inline allows the complete definition to be in a header\n+file, rather than having a declaration in a header and the definition in a\n+.cpp file. The guidance on\n+[initialization](#initializing-variables-with-static-storage-duration) of such\n+variables still applies. Inline variables with dynamic initializations can\n+make initialization order problems worse. The few ordering constraints\n+that exist for non-inline variables don't apply, as there isn't a single\n+program-designated translation unit containing the definition.\n+\n+A `constexpr` static data member is implicitly `inline`. As a consequence, an\n+[ODR use][ODR] of such a variable doesn't require a definition in some .cpp\n+file. (This is a change from pre-C++17. Beginning with C++17, such a\n+definition is considered a duplicate definition, and is deprecated.)\n+\n+Declaring a `thread_local` variable `inline` is forbidden for HotSpot code.\n+[The use of `thread_local`](#thread_local) is already heavily restricted.\n+\n@@ -816,0 +880,47 @@\n+### Mandatory Copy Elision\n+\n+[Copy elision](https:\/\/en.wikipedia.org\/wiki\/Copy_elision)\n+(or [here](https:\/\/cn.cppreference.com\/w\/cpp\/language\/copy_elision.html))\n+is a compiler optimization used to avoid potentially expensive copies in\n+certain situations. It is critical to making practical the performance of\n+return by value or pass by value. It is also unusual in not following the\n+as-if rule for optimizations - copy elision can be applied even if doing so\n+bypasses side-effects of copying\/moving the object. The C++ standard\n+explicitly permits this.\n+\n+However, because it's an optional optimization, the relevant copy\/move\n+constructor must be available and accessible, in case the compiler chooses to\n+not apply the optimization even in a situation where permitted.\n+\n+C++17 changed some cases of copy elision so that there is never a copy\/move in\n+these cases ([p0135r1](http:\/\/wg21.link\/p0135r1)). The interesting cases\n+involve a function that returns an unnamed temporary object, and constructors.\n+In such cases the object being initialized from the temporary is always direct\n+initialized, with no copy\/move ever involved; see [RVO] and more specifically\n+[URVO].\n+\n+Since this is now standard behavior it can't be avoided in the covered\n+situations. This could change the behavior of code that relied on side effects\n+by constructors, but that's both uncommon and was already problematic because\n+of the previous optional copy elision. But HotSpot code can, and should,\n+explicitly take advantage of this newly required behavior where it makes sense\n+to do so.\n+\n+For example, it may be beneficial to delay construction of the result of a\n+function until the return statement, rather than having a local variable that\n+is modified into the desired state and then returned. (Though [NRVO] may apply\n+in that case.)\n+\n+It is also now possible to define a factory function for a class that is\n+neither movable nor copyable, if it can be written in a way that makes use of\n+this feature.\n+\n+[RVO]: https:\/\/en.wikipedia.org\/wiki\/Copy_elision#RVO\n+  \"Return Value Optimization\"\n+\n+[NRVO]: https:\/\/en.wikipedia.org\/wiki\/Copy_elision#NRVO\n+  \"Named Return Value Optimization\"\n+\n+[URVO]: https:\/\/cn.cppreference.com\/w\/cpp\/language\/copy_elision.html\n+  \"Unnamed Return Value Optimization\"\n+\n@@ -884,0 +995,6 @@\n+A lambda is a constexpr function if either the parameter declaration clause is\n+followed by `constexpr`, or it satisfies the requirements for a constexpr\n+function ([p0170r1]). Thus, using a lambda to package up some computation\n+doesn't incur unnecessary overhead or prevent use in a context required to be\n+compile-time evaluated (such as an array size).\n+\n@@ -935,0 +1052,11 @@\n+* By-value capture of `this` (using a capture list like `[*this]` ([p0018r3]))\n+is also not permitted. One of the motivating use-cases is when the lifetime of\n+the lambda exceeds the lifetime of the object for the containing member\n+function. That is, we have an upward lambda that is capturing `this` of the\n+enclosing method. But again, that use-case doesn't apply if only downward\n+lambdas are used.\n+  Another use-case is when we simply want the lambda to be operating on a copy\n+of `this` for some reason. This is sufficiently uncommon that it can be\n+handled by manual copying, so readers don't need to understand this rare\n+syntax.\n+\n@@ -944,1 +1072,1 @@\n-The use of `mutable` lambda expressions is forbidden because there don't\n+* The use of `mutable` lambda expressions is forbidden because there don't\n@@ -1091,15 +1219,6 @@\n-a list of 8 Core Issues).  Since HotSpot doesn't support use of C++17, use of\n-inherited constructors could run into those problems. Such uses might also\n-change behavior in a future HotSpot update to use C++17 or later, potentially\n-in subtle ways that could lead to hard to diagnose problems.  Because of this,\n-HotSpot code must not use inherited constructors.\n-\n-Note that gcc7 provides the `-fnew-inheriting-ctors` option to use the\n-[p0136r1] semantics.  This is enabled by default when using C++17 or later.\n-It is also enabled by default for `fabi-version=11` (introduced by gcc7) or\n-higher when using C++11\/14, as the change is considered a Defect Report that\n-applies to those versions.  Earlier versions of gcc don't have that option,\n-and other supported compilers may not have anything similar.\n-\n-[p0136r1]: http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2015\/p0136r1.html\n-  \"p0136r1\"\n+a list of 8 Core Issues). Although those issues have been addressed, the\n+benefits from this feature are small compared to the complexity. Because of\n+this, HotSpot code must not use inherited constructors.\n+\n+[p0136r1]: http:\/wg21.link\/p0136r1 \"p0136r1\"\n+[p0195r0](http:\/\/wg21.link\/p0195r0)\n@@ -1124,0 +1243,3 @@\n+[p0068r0](http:\/\/wg21.link\/p0068r0) is the initial proposal for the attributes\n+added by C++17.)\n+\n@@ -1127,0 +1249,3 @@\n+* `[[nodiscard]]` ([p0189r1](http:\/\/wg21.link\/p0189r1))\n+* `[[maybe_unused]]` ([p0212r1](http:\/\/wg21.link\/p0212r1))\n+* `[[fallthrough]]` ([p0188r1](http:\/\/wg21.link\/p0188))\n@@ -1133,0 +1258,18 @@\n+Direct use of non-standard (and presumably scoped) attributes in shared code\n+is also forbidden. Using such would depend on the C++17 feature that an\n+attribute not recognized by the implementation is ignored\n+([p0283r2](http:\/\/wg21.link\/p0283r2)). If such an attribute is needed in\n+shared code, the well-established technique of providing an `ATTRIBUTE_XXX`\n+macro with per-compiler definitions (sometimes empty) should be\n+used. Compilers may warn about unrecognized attributes (whether by name or by\n+location), in order to report typos or misuse. Disabling such warnings\n+globally would not be desirable.\n+\n+The use of `using` directives in attribute lists is also forbidden.\n+([p0028r0](http:\/\/wg21.link\/p0028r0))\n+([p0028r4](http:\/\/wg21.link\/p0028r4))\n+We don't generally use scoped attributes in attribute lists with other\n+attributes. Rather, uses of scoped attributes (which are implementation\n+defined) are generally hidden behind a portability macro that includes the\n+surrounding brackets.\n+\n@@ -1181,0 +1324,4 @@\n+The exception specification is part of the type of a function\n+([p0012r1](http:\/\/wg21.link\/p0012r1). This likely has little impact on HotSpot\n+code, since the use of `noexcept` is expected to be rare.\n+\n@@ -1184,0 +1331,66 @@\n+### Enhanced selection statements\n+\n+C++17 modified the _condition_ part `if` and `switch` statements, permitting\n+an _init-statement_ to be included\n+([p0305r1](http:\/\/wg21.link\/p0305r1)).\n+\n+Use of this feature is permitted. (However, complex uses may interfere with\n+readability.) Limiting the scope of a variable involved in the condition,\n+while also making the value available to the statement's body, can improve\n+readability. The alternative method of scope-limiting by introducing a nested\n+scope isn't very popular and is rarely used.\n+\n+This new syntax is in addition to the _condition_ being a declaration with a\n+_brace-or-equal-initializer_. For an `if` statement this new sytax gains that\n+benefit without violating the long-standing guidance against using\n+[implicit conversions to `bool`](#avoid-implicit-conversions-to-bool),\n+which still stands.\n+\n+For example, uses of Unified Logging sometimes explicitly check whether a\n+`LogTarget` is enabled.  Instead of\n+```\n+  LogTarget(...) lt;\n+  if (lt.is_enabled()) {\n+    LogStream log(lt);\n+    ... use log ...\n+  }\n+  ... lt is accessible but probably not needed here ...\n+```\n+using this feature one could write\n+```\n+  if (LogTarget(...) lt; lt.is_enabled()) {\n+    LogStream log(lt);\n+    ... use log ...\n+  }\n+```\n+\n+C++17 also added compile-time if statements\n+([p0292r2](http:\/\/wg21.link\/p0292r2)). Use of `if constexpr` is\n+permitted. This feature can replace and (sometimes vastly) simplify many uses\n+of [SFINAE]. The same declaration and initialization guidance for the\n+_condition_ part apply here as for ordinary `if` statements.\n+\n+### Expression Evaluation Order\n+\n+C++17 tightened up the evaluation order for some kinds of subexpressions\n+([p0138r2](http:\/\/wg21.link\/p0138r2)). Note, however, that the Alternate\n+Evaluation Order for Function Calls alternative in that paper was adopted,\n+rather than the strict left to right order of evaluation for function call\n+arguments that was proposed in the main body of the paper.\n+\n+The primary purpose of this change seems to be to make certain kinds of call\n+chaining well defined. That's not a style widely used in HotSpot. In general\n+it is better to continue to avoid questions in this area by isolating\n+operations with side effects from other statements. In particular, continue to\n+avoid modifying a value in an expression where it is also used.\n+\n+### Compatibility with C11\n+\n+C++17 refers to C11 rather than C99. This means that C11 libraries and\n+functions may be used in HotSpot. There may be limitations because of\n+differing levels of compatibility among various compilers and versions of\n+those compilers.\n+\n+Note that the C parts of the JDK have been built with C11 selected for some\n+time ([JDK-8292008](https:\/\/bugs.openjdk.org\/browse\/JDK-8292008)).\n+\n@@ -1201,1 +1414,4 @@\n-([n1720](http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2004\/n1720.html))\n+([n1720](http:\/\/wg21.link\/n1720))\n+([n3928](http:\/\/wg21.link\/n3928))<br>\n+Both the original (C++11) two-argument form and the new (C++17)\n+single-argument form are permitted.\n@@ -1248,1 +1464,65 @@\n-### Excluded Features\n+* Preprocessor Condition `__has_include`\n+([p0061r0](http:\/\/wg21.link\/p0061r0))\n+([p0061r1](http:\/\/wg21.link\/p0061r1))\n+\n+* Hexadecimal Floating-Point Literals\n+([p0245r1](http:\/\/wg21.link\/p0245r1))\n+\n+* Construction Rules for `enum class` Values\n+([p0138r2](http:\/\/wg21.link\/p0138r2))\n+\n+* Allow `typename` in template template parameter\n+([n4051](http:\/\/wg21.link\/n4051)) &mdash; template template parameters are\n+barely used (if at all) in HotSpot, but there's no reason to artificially\n+disallow this syntactic regularization in any such uses.\n+\n+## Excluded Features\n+\n+### Structured Bindings\n+\n+The use of structured bindings [p0217r3](http:\/\/wg21.link\/p0217r3) is\n+forbidden.  Preferred approaches for handling functions with multiple return\n+values include\n+\n+* Return a named class\/struct intended for that purpose, with named and typed\n+members\/accessors.\n+\n+* Return a value along with out parameters (usually pointers, sometimes\n+references).\n+\n+* Designate a sentinel \"failure\" value in the normal return value type, with\n+some out of band location for additional information.  For example, this is\n+the model typically used with `errno`, where a function returns a normal\n+result, or -1 to indicate an error, with additional error information in\n+`errno`.\n+\n+There is a strong preference for names and explicit types, as opposed to\n+offsets and implicit types. For example, there are folks who strongly dislike\n+that some of the Standard Library functions return `std::pair` because `first`\n+and `second` members don't carry any useful information.\n+\n+### File System Library\n+\n+The use of the File System library is forbidden. HotSpot doesn't very much\n+with files, and already has adequate mechanisms for its needs. Rewriting in\n+terms of this new library would not be a good use of resources. Having a mix\n+of the existing usage and uses of this new library would just be confusing.\n+\n+[n4100](http:\/\/wg21.link\/n4100)\n+[p0218r0](http:\/\/wg21.link\/p0218r0)\n+[p0219r1](http:\/\/wg21.link\/p0219r1)\n+[p0317r1](http:\/\/wg21.link\/p0317r1)\n+[p0392r0](http:\/\/wg21.link\/p0392r0)\n+[p0430r2](http:\/\/wg21.link\/p0430r2)\n+[p0492r2](http:\/\/wg21.link\/p0492r2)\n+[p1164r1](http:\/\/wg21.link\/p1164r1)\n+\n+### Aggregate Extensions\n+\n+Aggregates with base classes are forbidden. C++17 allows aggregate\n+initialization for classes with base classes\n+([p0017r1](https:\/\/wg21.link\/p0017r1)). HotSpot makes very little use of\n+aggregate classes, preferring explicit constructors even for very simple\n+classes.\n+\n+### Additional Excluded Features\n@@ -1285,1 +1565,3 @@\n-in HotSpot code because of the \"no implicit boolean\" guideline.)\n+in HotSpot code because of the\n+[no implicit boolean](#avoid-implicit-conversions-to-bool)\n+guideline.)\n@@ -1289,1 +1571,67 @@\n-### Undecided Features\n+* Attributes for namespaces and enumerators\n+([n4266](http:\/\/wg21.link\/n4266) &mdash;\n+The only applicable attribute is [`[[deprecated]]`](#attributes), which is\n+forbidden.\n+\n+* Variadic `using` declarations\n+([p0195r2](http:\/\/wg21.link\/p0195r2))\n+\n+* `std::variant<>`\n+([p0088r3](http:\/\/wg21.link\/p0088r3)) &mdash;\n+Even if more of the C++ Standard Library is permitted, this class will remain\n+forbidded. Invalid accesses are indicated by throwing exceptions.\n+\n+* `std::any`\n+([p0220r1](http:\/\/wg21.link\/p0220r1)) &mdash;\n+Even if more of the C++ Standard Library is permitted, this class will remain\n+forbidden. It may require allocation, and always uses the standard\n+allocator. It requires [RTTI].\n+\n+* `std::as_const()`\n+([p0007r1](http:\/\/wg21.link\/p0007r1)) &mdash;\n+If sufficiently useful, HotSpot could add such a function. It would likely be\n+added to globalDefinitions.hpp, where there are already some similar small\n+utilities.\n+\n+* `std::clamp()`\n+([p002501](http:\/\/wg21.link\/p002501)) &mdash;\n+This function is already provided in globalDefinitions.hpp.\n+\n+* Parallel STL Algorithms\n+([p0024r2](http:\/\/wg21.link\/p0024r2)) &mdash;\n+Even if more of the C++ Standard Library is permitted, these will remain\n+forbidden. They are built on the standard C++ threading mechanisms. HotSpot\n+doesn't use those mechanisms, instead providing and using its own.\n+\n+* Cache Line Sizes\n+[p0154r1](http:\/\/wg21.link\/p0154r1) &mdash;\n+HotSpot has its own mechanisms for this, using values like\n+`DEFAULT_CACHE_LINE_SIZE`. The platform-specific implementation of the HotSpot\n+mechanisms might use these library functions, but there is no reason to move\n+away from current approach. Quoting from [JOSUTTIS]: \"... if you know better,\n+use specific values, but using these values is better than any assumed fixed\n+size for code supporting multiple platforms.\"\n+\n+* `register` storage class removal\n+[p0001r1](http:\/\/wg21.link\/p0001r1) &mdash;\n+The `register` storage class has been removed. `register` is still a keyword,\n+so still can't be used for normal purposes. Also, this doesn't affect the use\n+of `register` for gcc-style extended asm code; that's a different syntactic\n+element with a different meaning.\n+\n+* Value of `__cplusplus` &mdash;\n+Testing whether `__cplusplus` is defined or not is permitted, and indeed\n+required. But the value should not need to be examined. The value is changed\n+with each revision of the Standard. But we build HotSpot and (most of) the\n+rest of the JDK with a specifically selected version of the Standard. The\n+value of `__cplusplus` should be known and unchanging until we change the\n+project's build configuration again. So examining the value shouldn't ever be\n+necessary.\n+\n+* Removal of `++` for `bool`\n+([p0003r1](http:\/\/wg21.link\/p0003r1))\n+\n+* Removal of trigraphs\n+([n4086](http:\/\/wg21.link\/n4086))\n+\n+## Undecided Features\n@@ -1294,0 +1642,158 @@\n+Some features are undecided (so implicitly forbidden) because we don't expect\n+to use them at all. This might be reconsidered if someone finds a good use\n+case.\n+\n+Some Standard Library features are undecided (so implicitly forbidden)\n+because, while this Style Guide forbids the use of such, they may be\n+sufficiently useful that we want to permit them anyway. Doing so may require\n+some idiomatic mechanism for addressing things like `assert` incompatibility,\n+incompatibility with HotSpot's `FORBID_C_FUNCTION` mechanism, and the like.\n+\n+### std::optional<>\n+\n+It is undecided whether to permit the use of `std::optional<>`\n+([p0220r1](http:\/\/wg21.link\/p0220r1)). It may be sufficiently useful that it\n+should be permitted despite the usual prohibition against using Standard\n+Library facilities. Use of the `value()` member function must be forbidden, as\n+it reports an invalid access by throwing an exception.\n+\n+### std::byte\n+\n+It is undecided whether to permit the use of the `std::byte` type\n+([p0298r3](http:\/\/wg21.link\/p0298r3)). It may be sufficiently useful that it\n+should be permitted despite the usual prohibition against using Standard\n+Library facilities.\n+\n+It has been suggested that changing the HotSpot `address` type to use\n+`std::byte` has some benefits. That is, replace\n+```\n+typedef u_char*       address;\n+typedef const u_char* const_address;\n+```\n+```\n+using address       = std::byte*;\n+using const_address = const std::byte*;\n+```\n+in globalDefinitions.hpp.\n+\n+A specific benefit that was mentioned is that it might improve the horrible\n+way that gdb handles our current definition of the `address` type.\n+```\n+#include <cstddef>\n+\n+typedef unsigned char* address;\n+typedef std::byte* address_b;\n+\n+int main() {\n+\n+  char* mem;\n+\n+  address addr = (address)mem;\n+  address_b addr_b = (address_b)mem;\n+\n+  return 0;\n+}\n+```\n+\n+```\n+(gdb) p addr\n+$1 = (address) 0x7ffff7fe4fa0 <dl_main> \"\\363\\017\\036\\372Uf\\017\\357\\300H\\211\\345AWI\\211\\377AVAUATSH\\201\\354\\210\\002\"\n+(gdb) p addr_b\n+$2 = (address_b) 0x7ffff7fe4fa0 <dl_main>\n+```\n+\n+This needs to be explored. Some folks have said they will do so.\n+\n+### String Views\n+\n+It is undecided whether to permit the use of `std::string_view`\n+([p0220r1](http:\/\/wg21.link\/p0220r1)).\n+\n+HotSpot doesn't use `std::string`, but uses `char*` strings a lot. Wrapping\n+such in a `std::string_view` to enable the use of various algorithms could be\n+useful. But since HotSpot also doesn't permit use of `<algorithm>` and the\n+like, that only gets the limited set of algorithms provided by the view class\n+directly.\n+\n+There is also the issue of `NUL` termination; string views are not necessarily\n+`NUL` terminated. Moreover, if one goes to the work of making one that is\n+`NUL` terminated, that terminator is included in the size.\n+\n+There are other caveats. Permitting use of string views would require\n+discussion of those.\n+\n+### Substring and Subsequence Searching\n+\n+In addition to simple substring searching, the Standard Library now includes\n+Boyer-Moore and Boyer-Moore-Horspool searchers, in case someone wants to\n+search really large texts. That seems an unlikely use-case for HotSpot.  See\n+[p0220r1](http:\/\/wg21.link\/p0220r1).\n+\n+### `new` and `delete` with Over-Aligned Data\n+\n+It is undecided whether to permit the use of dynamic allocation of overaligned\n+types ([n3396](http:\/\/wg21.link\/n3396)).\n+\n+HotSpot currently only has a couple of over-aligned types that are dynamically\n+allocated. These are handled manually, not going through `new` expressions, as\n+that couldn't work before C++17.\n+\n+One of the ways an over-aligned type might arise is by aligning a data member.\n+This might be done to avoid destructive interference for concurrent accesses.\n+But HotSpot uses a different approach, using explicit padding. Again, this is\n+in part because `new` and `delete` of overaligned types didn't work. But we\n+might prefer to continue this approach.\n+\n+We would need to add `operator new` overloads to `CHeapObj<>` and possibly in\n+other places in order to support this. However, it has been suggested that\n+implementing it (efficiently) on top of NMT might be difficult. Note that\n+`posix_memalign` \/ `_aligned_malloc` don't help here, because of NMT's use of\n+malloc headers.\n+\n+If we don't support it we may want to add `operator new` overloads that are\n+deleted, to prevent attempted uses.\n+\n+Alignment usage in non-HotSpot parts of the OpenJDK:\n+\n+* `alignas` used once in harfbuzz, to align a variable.\n+\n+* libpipewire has `#define SPA_ALIGNED` macro using gcc `aligned` attribute,\n+but doesn't use it.\n+\n+* libsleef has `#define ALIGNED` macro using gcc `aligned` attribute. It is\n+not used for class or member declarations.\n+\n+### `std::to_chars()` and `std::from_chars`\n+\n+It is undecided whether to permit the use of `std::to_chars()` and\n+`std::from_chars()` ([p0067r5](http:\/\/wg21.link\/p0067r5)).\n+\n+These functions provide low-level conversions between character sequences and\n+numeric values. This seems like a good candidate for use in HotSpot,\n+potentially replacing various clumsy or less performant alternatives. There is\n+no memory allocation. Parsing failures are indicated via error codes rather\n+than exceptions. Various other nice for HotSpot properties.\n+\n+Note that the published C++17 Standard puts these in `<utility>`, but a defect\n+report moved them to `<charconv>`. This also needs `<system_error>`.\n+\n+This would require upgrading the minimum gcc version to 11.1 for floating\n+point conversion support. The minimum Visual Studio version is already\n+sufficient.  The minimum clang version requirement hasn't been determined yet.\n+\n+### `std::launder()`\n+\n+It is undecided whether to permit the use of `std::launder()`\n+([p0137r1](http:\/\/wg21.link\/p0137r1)).\n+\n+Change to permitted if we discover a place where we need it. Or maybe we\n+should just permit it, but hope we don't need it.\n+\n+Also, C++20 revised the relevant part of Object Lifetime in a way that seems\n+more permissive and with less need of laundering. We don't know if\n+implementations of prior versions take advantage of the difference.\n+\n+See Object Lifetime: C++17 6.8\/8, C++20 6.7.3\/8\n+\n+### Additional Undecided Features\n+\n@@ -1298,1 +1804,2 @@\n-([n3651](https:\/\/isocpp.org\/files\/papers\/N3651.pdf))\n+([n3651](https:\/\/isocpp.org\/files\/papers\/N3651.pdf),\n+[p0127r2](http:\/\/wg21.link\/p0127r2))\n@@ -1305,0 +1812,27 @@\n+* Shorthand for nested namespaces\n+([n4230](http:\/\/wg21.link\/n4230)) &mdash;\n+HotSpot makes very little use of namespaces, so this seemingly innocuous\n+feature probably isn't useful to us.\n+\n+* Direct list initialization with `auto`\n+([n3681](http:\/\/wg21.link\/n3681)) &mdash;\n+This change fixed some issues with direct list initialization and `auto`. But\n+we don't use that feature much, if at all. And perhaps shouldn't be using it.\n+\n+* UTF-8 Character Literals\n+([n4267](http:\/\/wg21.link\/n4267)) &mdash;\n+Do we have a use-case for this?\n+\n+* Fold Expressions\n+([n4295](http:\/\/wg21.link\/n4295)) &mdash;\n+Provides a simple way to apply operators to a parameter pack. HotSpot doesn't\n+use variadic templates very much. That makes it questionable that developers\n+should need to know about this feature.  But if someone does come up with a\n+good use-case, it's likely that the alternatives are significantly worse,\n+because pack manipulation without this can be complicated.\n+\n+* `std::invoke<>()`\n+([n4169](http:\/\/wg21.link\/n4169))\n+\n+\n+\n@@ -1322,0 +1856,3 @@\n+\n+[JOSUTTIS]: https:\/\/www.cppstd17.com\n+  \"C++17: The Complete Guide\"\n","filename":"doc\/hotspot-style.md","additions":571,"deletions":34,"binary":false,"changes":605,"status":"modified"},{"patch":"@@ -600,1 +600,1 @@\n-    LANGSTD_CXXFLAGS=\"-std=c++14\"\n+    LANGSTD_CXXFLAGS=\"-std=c++17\"\n@@ -602,1 +602,1 @@\n-    LANGSTD_CXXFLAGS=\"-std:c++14\"\n+    LANGSTD_CXXFLAGS=\"-std:c++17\"\n@@ -604,1 +604,1 @@\n-    AC_MSG_ERROR([Cannot enable C++14 for this toolchain])\n+    AC_MSG_ERROR([Cannot enable C++17 for this toolchain])\n","filename":"make\/autoconf\/flags-cflags.m4","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-\t\t\"C_Cpp.default.cppStandard\": \"c++14\",\n+\t\t\"C_Cpp.default.cppStandard\": \"c++17\",\n","filename":"make\/ide\/vscode\/hotspot\/indexers\/ccls-settings.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-\t\t\"C_Cpp.default.cppStandard\": \"c++14\",\n+\t\t\"C_Cpp.default.cppStandard\": \"c++17\",\n","filename":"make\/ide\/vscode\/hotspot\/indexers\/clangd-settings.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-\t\t\"C_Cpp.default.cppStandard\": \"c++14\",\n+\t\t\"C_Cpp.default.cppStandard\": \"c++17\",\n","filename":"make\/ide\/vscode\/hotspot\/indexers\/cpptools-settings.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-\t\t\"C_Cpp.default.cppStandard\": \"c++14\",\n+\t\t\"C_Cpp.default.cppStandard\": \"c++17\",\n","filename":"make\/ide\/vscode\/hotspot\/indexers\/rtags-settings.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}