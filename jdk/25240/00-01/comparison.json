{"files":[{"patch":"@@ -48,2 +48,7 @@\n-          \"Enable JVMCI. Defaults to true if UseJVMCICompiler is true or \"  \\\n-          \"jdk.internal.vm.ci is added to the root set with --add-modules.\")\\\n+          \"Enable JVMCI support in the VM. \"                                \\\n+          \"Defaults to true if UseJVMCICompiler is true or \"                \\\n+          \"--add-modules=jdk.internal.vm.ci was specified. \"                \\\n+          \"If true and UseJVMCINativeLibrary is false (i.e. libjvmci is \"   \\\n+          \"not available or not selected), the behavior of adding the \"     \\\n+          \"jdk.internal.vm.ci module is triggered, as if the \"   \\\n+          \"--add-modules=jdk.internal.vm.ci option was specified.\")         \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmci_globals.hpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1808,4 +1808,4 @@\n-    if (ClassLoader::is_module_observable(\"jdk.internal.vm.ci\") && !UseJVMCINativeLibrary && !_jvmci_module_added) {\n-      jio_fprintf(defaultStream::error_stream(),\n-        \"'+EnableJVMCI' requires '--add-modules=jdk.internal.vm.ci' when UseJVMCINativeLibrary is false\\n\");\n-      return false;\n+    if (!UseJVMCINativeLibrary && ClassLoader::is_module_observable(\"jdk.internal.vm.ci\") && !_jvmci_module_added) {\n+      if (!create_numbered_module_property(\"jdk.module.addmods\", \"jdk.internal.vm.ci\", _addmods_count++)) {\n+        return false;\n+      }\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -67,12 +67,0 @@\n-\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:+UnlockExperimentalVMOptions\", \"-XX:+UseJVMCICompiler\",\n-            \"-XX:+PrintFlagsFinal\", \"--version\");\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-        boolean useJVMCINativeLibrary = output.firstMatch(\"bool +UseJVMCINativeLibrary += true\") != null;\n-        \/\/ If libjvmci is not in use, then the JVMCI module must be explicitly\n-        \/\/ added with --add-modules=jdk.internal.vm.ci\n-        String addJVMCIModule = useJVMCINativeLibrary ?\n-            \"--add-modules=java.base\" : \/\/ effectively a nop\n-            \"--add-modules=jdk.internal.vm.ci\";\n-\n@@ -80,1 +68,1 @@\n-        test(\"-XX:-PrintWarnings\", addJVMCIModule,\n+        test(\"-XX:-PrintWarnings\",\n@@ -83,1 +71,1 @@\n-        test(\"-XX:+UseJVMCICompiler\", addJVMCIModule,\n+        test(\"-XX:+UseJVMCICompiler\",\n@@ -86,1 +74,1 @@\n-        test(\"-XX:-UseJVMCICompiler\", addJVMCIModule,\n+        test(\"-XX:-UseJVMCICompiler\",\n@@ -89,1 +77,1 @@\n-        test(\"-XX:+EnableJVMCI\", addJVMCIModule,\n+        test(\"-XX:+EnableJVMCI\",\n@@ -92,1 +80,1 @@\n-        test(\"-XX:-EnableJVMCI\", addJVMCIModule,\n+        test(\"-XX:-EnableJVMCI\",\n@@ -95,1 +83,1 @@\n-        test(\"-XX:+EnableJVMCIProduct\", addJVMCIModule,\n+        test(\"-XX:+EnableJVMCIProduct\",\n@@ -103,1 +91,1 @@\n-    static void test(String explicitFlag, String addJVMCIModule, Expectation... expectations) throws Exception {\n+    static void test(String explicitFlag, Expectation... expectations) throws Exception {\n@@ -106,1 +94,0 @@\n-\n@@ -110,1 +97,1 @@\n-                \"-XX:+UnlockExperimentalVMOptions\", addJVMCIModule, flag, \"-XX:-UnlockExperimentalVMOptions\",\n+                \"-XX:+UnlockExperimentalVMOptions\", flag, \"-XX:-UnlockExperimentalVMOptions\",\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestEnableJVMCIProduct.java","additions":8,"deletions":21,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-            \"--add-modules=jdk.internal.vm.ci\",\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestInvalidJVMCIOption.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-            \"--add-modules=jdk.internal.vm.ci\",\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestJVMCIPrintProperties.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-            \"--add-modules=jdk.internal.vm.ci\",\n+            \"-XX:+EnableJVMCI\",\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestJVMCISavedProperties.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-                                     \"--add-modules=jdk.internal.vm.ci\",\n+                                     \"-XX:+EnableJVMCI\",\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestValidateModules.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-            \"--add-modules=jdk.internal.vm.ci\",\n+            \"-XX:+EnableJVMCI\",\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/GetFlagValueTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-                \"--add-modules=jdk.internal.vm.ci\",\n+                \"-XX:+EnableJVMCI\",\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.hotspot.test\/src\/jdk\/vm\/ci\/hotspot\/test\/TestHotSpotJVMCIRuntime.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}