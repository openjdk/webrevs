{"files":[{"patch":"@@ -1813,2 +1813,0 @@\n-    PropertyList_unique_add(&_system_properties, \"jdk.internal.vm.ci.enabled\", \"true\",\n-        AddProperty, UnwriteableProperty, InternalProperty);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -200,1 +200,0 @@\n-  \/\/ number of unique modules specified in the --add-modules option\n@@ -202,0 +201,1 @@\n+  \/\/ was jdk.internal.vm.ci module specified in the --add-modules option?\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,1 +62,0 @@\n-        Services.checkJVMCIEnabled();\n@@ -88,1 +87,0 @@\n-        Services.checkJVMCIEnabled();\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/services\/JVMCIServiceLocator.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,11 +67,0 @@\n-    static final boolean JVMCI_ENABLED = Boolean.parseBoolean(VM.getSavedProperties().get(\"jdk.internal.vm.ci.enabled\"));\n-\n-    \/**\n-     * Checks that JVMCI is enabled in the VM and throws an error if it isn't.\n-     *\/\n-    static void checkJVMCIEnabled() {\n-        if (!JVMCI_ENABLED) {\n-            throw new Error(\"The EnableJVMCI VM option must be true (i.e., -XX:+EnableJVMCI) to use JVMCI\");\n-        }\n-    }\n-\n@@ -87,1 +76,0 @@\n-        checkJVMCIEnabled();\n@@ -116,1 +104,0 @@\n-        checkJVMCIEnabled();\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/services\/Services.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -173,0 +173,1 @@\n+                \"--add-modules=jdk.internal.vm.ci\",\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.hotspot.test\/src\/jdk\/vm\/ci\/hotspot\/test\/TestHotSpotJVMCIRuntime.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}