{"files":[{"patch":"@@ -48,1 +48,2 @@\n-          \"Enable JVMCI. Defaults to true if UseJVMCICompiler is true.\")    \\\n+          \"Enable JVMCI. Defaults to true if UseJVMCICompiler is true or \"  \\\n+          \"jdk.internal.vm.ci is added to the root set with --add-modules.\")\\\n","filename":"src\/hotspot\/share\/jvmci\/jvmci_globals.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -88,0 +88,3 @@\n+#if INCLUDE_JVMCI\n+bool   Arguments::_jvmci_module_added           = false;\n+#endif\n@@ -1801,0 +1804,9 @@\n+    \/\/ libjvmci doesn't require resolving jdk.internal.vm.ci as it is\n+    \/\/ compiled into the libjvmci image itself. Without libjvmci, there\n+    \/\/ is no other representation of the jdk.internal.vm.ci module\n+    \/\/ so it needs to be added to the root module set.\n+    if (ClassLoader::is_module_observable(\"jdk.internal.vm.ci\") && !UseJVMCINativeLibrary && !_jvmci_module_added) {\n+      jio_fprintf(defaultStream::error_stream(),\n+        \"'+EnableJVMCI' requires '--add-modules=jdk.internal.vm.ci' when UseJVMCINativeLibrary is false\\n\");\n+      return false;\n+    }\n@@ -1803,5 +1815,0 @@\n-    if (ClassLoader::is_module_observable(\"jdk.internal.vm.ci\")) {\n-      if (!create_numbered_module_property(\"jdk.module.addmods\", \"jdk.internal.vm.ci\", _addmods_count++)) {\n-        return false;\n-      }\n-    }\n@@ -2250,0 +2257,13 @@\n+#if INCLUDE_JVMCI\n+      if (!_jvmci_module_added) {\n+        const char *jvmci_module = strstr(tail, \"jdk.internal.vm.ci\");\n+        if (jvmci_module != nullptr) {\n+          char before = *(jvmci_module - 1);\n+          char after  = *(jvmci_module + strlen(\"jdk.internal.vm.ci\"));\n+          if ((before == '=' || before == ',') && (after == '\\0' || after == ',')) {\n+            FLAG_SET_DEFAULT(EnableJVMCI, true);\n+            _jvmci_module_added = true;\n+          }\n+        }\n+      }\n+#endif\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -200,0 +200,4 @@\n+  \/\/ number of unique modules specified in the --add-modules option\n+#if INCLUDE_JVMCI\n+  static bool _jvmci_module_added;\n+#endif\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -67,0 +67,12 @@\n+\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:+UnlockExperimentalVMOptions\", \"-XX:+UseJVMCICompiler\",\n+            \"-XX:+PrintFlagsFinal\", \"--version\");\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        boolean useJVMCINativeLibrary = output.firstMatch(\"bool +UseJVMCINativeLibrary += true\") != null;\n+        \/\/ If libjvmci is not in use, then the JVMCI module must be explicitly\n+        \/\/ added with --add-modules=jdk.internal.vm.ci\n+        String addJVMCIModule = useJVMCINativeLibrary ?\n+            \"--add-modules=java.base\" : \/\/ effectively a nop\n+            \"--add-modules=jdk.internal.vm.ci\";\n+\n@@ -68,1 +80,1 @@\n-        test(\"-XX:-PrintWarnings\",\n+        test(\"-XX:-PrintWarnings\", addJVMCIModule,\n@@ -71,1 +83,1 @@\n-        test(\"-XX:+UseJVMCICompiler\",\n+        test(\"-XX:+UseJVMCICompiler\", addJVMCIModule,\n@@ -74,1 +86,1 @@\n-        test(\"-XX:-UseJVMCICompiler\",\n+        test(\"-XX:-UseJVMCICompiler\", addJVMCIModule,\n@@ -77,1 +89,1 @@\n-        test(\"-XX:+EnableJVMCI\",\n+        test(\"-XX:+EnableJVMCI\", addJVMCIModule,\n@@ -80,1 +92,1 @@\n-        test(\"-XX:-EnableJVMCI\",\n+        test(\"-XX:-EnableJVMCI\", addJVMCIModule,\n@@ -83,1 +95,1 @@\n-        test(\"-XX:+EnableJVMCIProduct\",\n+        test(\"-XX:+EnableJVMCIProduct\", addJVMCIModule,\n@@ -91,1 +103,1 @@\n-    static void test(String explicitFlag, Expectation... expectations) throws Exception {\n+    static void test(String explicitFlag, String addJVMCIModule, Expectation... expectations) throws Exception {\n@@ -94,0 +106,1 @@\n+\n@@ -97,1 +110,1 @@\n-                \"-XX:+UnlockExperimentalVMOptions\", flag, \"-XX:-UnlockExperimentalVMOptions\",\n+                \"-XX:+UnlockExperimentalVMOptions\", addJVMCIModule, flag, \"-XX:-UnlockExperimentalVMOptions\",\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestEnableJVMCIProduct.java","additions":21,"deletions":8,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+            \"--add-modules=jdk.internal.vm.ci\",\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestInvalidJVMCIOption.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+            \"--add-modules=jdk.internal.vm.ci\",\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestJVMCIPrintProperties.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-            \"-XX:+EnableJVMCI\",\n+            \"--add-modules=jdk.internal.vm.ci\",\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestJVMCISavedProperties.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-                                     \"-XX:+EnableJVMCI\",\n+                                     \"--add-modules=jdk.internal.vm.ci\",\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestValidateModules.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-            \"-XX:+EnableJVMCI\",\n+            \"--add-modules=jdk.internal.vm.ci\",\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/GetFlagValueTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-                \"-XX:+EnableJVMCI\",\n+                \"--add-modules=jdk.internal.vm.ci\",\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.hotspot.test\/src\/jdk\/vm\/ci\/hotspot\/test\/TestHotSpotJVMCIRuntime.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}