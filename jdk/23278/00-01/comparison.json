{"files":[{"patch":"@@ -255,5 +255,0 @@\n-  \/\/ This is just a placeholder for flagging compilations that didn't pass\n-  \/\/ through the compilation broker. This kind of compilation originates from\n-  \/\/ JVMCI and they are printed by JVMCI code installation and flagged with a '$'.\n-  const char jvmci_hosted_char  = ' ';\n-\n@@ -261,1 +256,1 @@\n-  st->print(\"%c%c%c%c%c%c \", compile_type, sync_char, exception_char, blocking_char, native_char, jvmci_hosted_char);\n+  st->print(\"%c%c%c%c%c \", compile_type, sync_char, exception_char, blocking_char, native_char);\n","filename":"src\/hotspot\/share\/compiler\/compileTask.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -726,1 +726,1 @@\n-  jint compilation_id = -1;\n+  jint id = -1;\n@@ -734,1 +734,1 @@\n-    compilation_id = stream->read_s4(\"id\");\n+    id = stream->read_s4(\"id\");\n@@ -767,1 +767,1 @@\n-    if (compilation_id == -1) {\n+    if (id == -1) {\n@@ -769,2 +769,2 @@\n-      compilation_id = CompileBroker::assign_compile_id_unlocked(thread, method, entry_bci);\n-      jvmci_env()->set_HotSpotCompiledNmethod_id(compiled_code, compilation_id);\n+      id = CompileBroker::assign_compile_id_unlocked(thread, method, entry_bci);\n+      jvmci_env()->set_HotSpotCompiledNmethod_id(compiled_code, id);\n@@ -797,1 +797,1 @@\n-                                        compilation_id,\n+                                        id,\n@@ -819,0 +819,1 @@\n+          \/\/ Since this compilation didn't pass through the broker it wasn't logged yet.\n@@ -820,23 +821,1 @@\n-\n-          const char compile_type_char = entry_bci == _offsets.value(CodeOffsets::OSR_Entry) ? '%' : ' ';\n-          const char sync_char         = method->is_synchronized() ? 's' : ' ';\n-          const char exception_char    = method->has_exception_handler() ? '!' : ' ';\n-          const char blocking_char     = '?';\n-          const char native_char       = '?';\n-          const char jvmci_hosted_char = '$';\n-\n-          tty->print(UINT64_FORMAT \" \", (uint64_t) tty->time_stamp().milliseconds());\n-          \/\/ print compiler name if requested\n-          if (CIPrintCompilerName) {\n-            tty->print(\"jvmci:\");\n-          }\n-          tty->print(\"%4d \", compilation_id);\n-          tty->print(\"%c%c%c%c%c%c 4 \", compile_type_char, sync_char, exception_char, blocking_char, native_char, jvmci_hosted_char); \/\/ type '4' is for compilation level\n-\n-          method->print_short_name(tty);\n-\n-          tty->print(\" (%d bytes)\", method->code_size());\n-          if (compile_type_char == '%') {\n-            tty->print(\" @ %d\", entry_bci);\n-          }\n-          tty->cr();\n+          CompileTask::print(tty, nm, \"(hosted JVMCI compilation)\");\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":8,"deletions":29,"binary":false,"changes":37,"status":"modified"}]}