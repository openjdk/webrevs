{"files":[{"patch":"@@ -322,0 +322,2 @@\n+                             char* errorbuf,\n+                             const int buf_size,\n@@ -337,0 +339,10 @@\n+  if (!UnlockDiagnosticVMOptions) {\n+    const char* name = option2name(option);\n+    JVMFlag* flag = JVMFlag::find_declared_flag(name);\n+    if (flag != nullptr && flag->is_diagnostic()) {\n+      jio_snprintf(errorbuf, buf_size, \"VM option '%s' is diagnostic and must be enabled via -XX:+UnlockDiagnosticVMOptions.\", name);\n+      delete matcher;\n+      return;\n+    }\n+  }\n+\n@@ -737,1 +749,1 @@\n-      register_command(matcher, option, value);\n+      register_command(matcher, option, errorbuf, buf_size, value);\n@@ -755,1 +767,1 @@\n-      register_command(matcher, option, value);\n+      register_command(matcher, option, errorbuf, buf_size, value);\n@@ -765,1 +777,1 @@\n-      register_command(matcher, option, (ccstr) value);\n+      register_command(matcher, option, errorbuf, buf_size, (ccstr) value);\n@@ -822,1 +834,1 @@\n-      register_command(matcher, option, (ccstr) value);\n+      register_command(matcher, option, errorbuf, buf_size, (ccstr) value);\n@@ -832,1 +844,1 @@\n-      register_command(matcher, option, true);\n+      register_command(matcher, option, errorbuf, buf_size,true);\n@@ -839,1 +851,1 @@\n-        register_command(matcher, option, true);\n+        register_command(matcher, option, errorbuf, buf_size,true);\n@@ -844,1 +856,1 @@\n-        register_command(matcher, option, false);\n+        register_command(matcher, option, errorbuf, buf_size,false);\n@@ -861,1 +873,1 @@\n-      register_command(matcher, option, atof(value));\n+      register_command(matcher, option, errorbuf, buf_size, atof(value));\n@@ -1014,1 +1026,5 @@\n-          register_command(typed_matcher, option, true);\n+          register_command(typed_matcher, option, error_buf, sizeof(error_buf), true);\n+          if (*error_buf != '\\0') {\n+            print_parse_error(error_buf, original.get());\n+            return false;\n+          }\n@@ -1044,1 +1060,5 @@\n-        register_command(matcher, option, true);\n+        register_command(matcher, option, error_buf, sizeof(error_buf), true);\n+        if (*error_buf != '\\0') {\n+          print_parse_error(error_buf, original.get());\n+          return false;\n+        }\n@@ -1048,1 +1068,5 @@\n-        register_command(matcher, option, (uintx)MemStatAction::collect);\n+        register_command(matcher, option, error_buf, sizeof(error_buf), (uintx)MemStatAction::collect);\n+        if (*error_buf != '\\0') {\n+          print_parse_error(error_buf, original.get());\n+          return false;\n+        }\n@@ -1164,2 +1188,4 @@\n-        register_command(matcher, CompileCommandEnum::CompileOnly, true);\n-        continue;\n+        register_command(matcher, CompileCommandEnum::CompileOnly, error_buf, sizeof(error_buf), true);\n+        if (*error_buf == '\\0') {\n+          continue;\n+        }\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.cpp","additions":39,"deletions":13,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-        ProcessTools.executeTestJava(\"-XX:CompileCommand=option,package\/class,ccstrlist,ControlIntrinsic,+_getClass\", \"-version\")\n+        ProcessTools.executeTestJava(\"-XX:+UnlockDiagnosticVMOptions\", \"-XX:CompileCommand=option,package\/class,ccstrlist,ControlIntrinsic,+_getClass\", \"-version\")\n@@ -46,1 +46,1 @@\n-        ProcessTools.executeTestJava(\"-XX:CompileCommand=option,*,ccstrlist,ControlIntrinsic,+_getClass\", \"-version\")\n+        ProcessTools.executeTestJava(\"-XX:+UnlockDiagnosticVMOptions\", \"-XX:CompileCommand=option,*,ccstrlist,ControlIntrinsic,+_getClass\", \"-version\")\n@@ -54,1 +54,1 @@\n-        ProcessTools.executeTestJava(\"-XX:CompileCommand=option,*.ccstrlist,ccstrlist,ControlIntrinsic,+_getClass\", \"-version\")\n+        ProcessTools.executeTestJava(\"-XX:+UnlockDiagnosticVMOptions\", \"-XX:CompileCommand=option,*.ccstrlist,ccstrlist,ControlIntrinsic,+_getClass\", \"-version\")\n@@ -60,1 +60,1 @@\n-        ProcessTools.executeTestJava(\"-XX:CompileCommand=option,*.*,ccstrlist,ControlIntrinsic,+_getClass\", \"-version\")\n+        ProcessTools.executeTestJava(\"-XX:+UnlockDiagnosticVMOptions\", \"-XX:CompileCommand=option,*.*,ccstrlist,ControlIntrinsic,+_getClass\", \"-version\")\n@@ -65,1 +65,1 @@\n-        ProcessTools.executeTestJava(\"-XX:CompileCommand=option,class,PrintIntrinsics\", \"-version\")\n+        ProcessTools.executeTestJava(\"-XX:+UnlockDiagnosticVMOptions\", \"-XX:CompileCommand=option,class,PrintIntrinsics\", \"-version\")\n@@ -71,1 +71,1 @@\n-        ProcessTools.executeTestJava(\"-XX:CompileCommand=option,class.PrintIntrinsics,PrintIntrinsics\", \"-version\")\n+        ProcessTools.executeTestJava(\"-XX:+UnlockDiagnosticVMOptions\", \"-XX:CompileCommand=option,class.PrintIntrinsics,PrintIntrinsics\", \"-version\")\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/commands\/OptionTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ *      -XX:+UnlockDiagnosticVMOptions\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/bigInteger\/TestMultiplyToLen.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ *      -XX:+UnlockDiagnosticVMOptions\n@@ -41,0 +42,1 @@\n+ *      -XX:+UnlockDiagnosticVMOptions\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/bigInteger\/TestShift.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ *      -XX:+UnlockDiagnosticVMOptions\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/bigInteger\/TestSquareToLen.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @requires ! vm.opt.final.UnlockExperimentalVMOptions\n+ * @requires !vm.opt.final.UnlockExperimentalVMOptions\n@@ -40,1 +40,1 @@\n- * @requires ! vm.debug\n+ * @requires !vm.debug\n@@ -47,0 +47,11 @@\n+\/* @test VMCompileCommandWarningDiagnostic\n+ * @bug 8351958\n+ * @summary Warn if compile command that is an alias for a diagnostic vm option is used and -XX:+UnlockDiagnosticVMOptions isn't specified.\n+ * @requires vm.flagless\n+ * @requires !vm.debug\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver VMOptionWarning DiagnosticCompileCommand\n+ *\/\n+\n@@ -51,1 +62,1 @@\n- * @requires ! vm.debug\n+ * @requires !vm.debug\n@@ -85,0 +96,7 @@\n+            case \"DiagnosticCompileCommand\": {\n+                pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:CompileCommand=PrintAssembly,MyClass::myMethod\", \"-version\");\n+                output = new OutputAnalyzer(pb.start());\n+                output.shouldNotHaveExitValue(0);\n+                output.shouldContain(\"Error: VM option 'PrintAssembly' is diagnostic and must be enabled via -XX:+UnlockDiagnosticVMOptions.\");\n+                break;\n+            }\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/VMOptionWarning.java","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"}]}