{"files":[{"patch":"@@ -287,1 +287,0 @@\n-\n@@ -339,64 +338,0 @@\n-    \/**\n-     * This is a variant of {@link DecimalDigits#getCharsUTF16(long, int, byte[])}, but for\n-     * UTF-16 coder.\n-     *\n-     * @param i     value to convert\n-     * @param index next index, after the least significant digit\n-     * @param buf   target buffer, UTF16-coded.\n-     * @return index of the most significant digit or minus sign, if present\n-     *\/\n-    public static int getChars(long i, int index, char[] buf) {\n-        \/\/ Used by trusted callers.  Assumes all necessary bounds checks have been done by the caller.\n-        long q;\n-        int charPos = index;\n-\n-        boolean negative = (i < 0);\n-        if (!negative) {\n-            i = -i;\n-        }\n-\n-        \/\/ Get 2 digits\/iteration using longs until quotient fits into an int\n-        while (i < Integer.MIN_VALUE) {\n-            q = i \/ 100;\n-            charPos -= 2;\n-            putPair(buf, charPos, (int)((q * 100) - i));\n-            i = q;\n-        }\n-\n-        \/\/ Get 2 digits\/iteration using ints\n-        int q2;\n-        int i2 = (int)i;\n-        while (i2 <= -100) {\n-            q2 = i2 \/ 100;\n-            charPos -= 2;\n-            putPair(buf, charPos, (q2 * 100) - i2);\n-            i2 = q2;\n-        }\n-\n-        \/\/ We know there are at most two digits left at this point.\n-        if (i2 <= -10) {\n-            charPos -= 2;\n-            putPair(buf, charPos, -i2);\n-        } else {\n-            buf[--charPos] = (char) ('0' - i2);\n-        }\n-\n-        if (negative) {\n-            buf[--charPos] = '-';\n-        }\n-        return charPos;\n-    }\n-\n-    \/**\n-     * Insert the 2-chars integer into the buf as 2 decimal digit ASCII chars,\n-     * only least significant 16 bits of {@code v} are used.\n-     * @param buf byte buffer to copy into\n-     * @param charPos insert point\n-     * @param v to convert\n-     *\/\n-    public static void putPair(char[] buf, int charPos, int v) {\n-        int packed = DIGITS[v & 0x7f];\n-        buf[charPos    ] = (char) (packed & 0xFF);\n-        buf[charPos + 1] = (char) (packed >> 8);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/DecimalDigits.java","additions":0,"deletions":65,"binary":false,"changes":65,"status":"modified"}]}