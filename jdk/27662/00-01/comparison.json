{"files":[{"patch":"@@ -1161,1 +1161,1 @@\n-    heap->clear_cancelled_gc(true \/* clear oom handler *\/);\n+    heap->clear_cancelled_gc();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-  heap->clear_cancelled_gc(true \/* clear oom handler *\/);\n+  heap->clear_cancelled_gc();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1171,1 +1171,1 @@\n-    heap->clear_cancelled_gc(true \/* clear oom handler *\/);\n+    heap->clear_cancelled_gc();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -459,3 +459,2 @@\n-  \/\/ Clears the cancellation cause and optionally resets the oom handler (cancelling an\n-  \/\/ old mark does _not_ touch the oom handler).\n-  inline void clear_cancelled_gc(bool clear_oom_handler = true);\n+  \/\/ Clears the cancellation cause and resets the oom handler\n+  inline void clear_cancelled_gc();\n@@ -482,0 +481,2 @@\n+  inline void reset_cancellation_time();\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -272,1 +272,1 @@\n-inline void ShenandoahHeap::clear_cancelled_gc(bool clear_oom_handler) {\n+inline void ShenandoahHeap::clear_cancelled_gc() {\n@@ -274,4 +274,3 @@\n-  if (_cancel_requested_time > 0) {\n-    log_debug(gc)(\"GC cancellation took %.3fs\", (os::elapsedTime() - _cancel_requested_time));\n-    _cancel_requested_time = 0;\n-  }\n+  reset_cancellation_time();\n+  _oom_evac_handler.clear();\n+}\n@@ -279,2 +278,4 @@\n-  if (clear_oom_handler) {\n-    _oom_evac_handler.clear();\n+inline GCCause::Cause ShenandoahHeap::clear_cancellation(const GCCause::Cause expected) {\n+  const GCCause::Cause cancellation_cause = _cancelled_gc.cmpxchg(GCCause::_no_gc, expected);\n+  if (cancellation_cause == expected) {\n+    reset_cancellation_time();\n@@ -282,0 +283,1 @@\n+  return cancellation_cause;\n@@ -284,2 +286,5 @@\n-inline GCCause::Cause ShenandoahHeap::clear_cancellation(GCCause::Cause expected) {\n-  return _cancelled_gc.cmpxchg(GCCause::_no_gc, expected);\n+inline void ShenandoahHeap::reset_cancellation_time() {\n+  if (_cancel_requested_time > 0) {\n+    log_debug(gc)(\"GC cancellation took %.3fs\", (os::elapsedTime() - _cancel_requested_time));\n+    _cancel_requested_time = 0;\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"}]}