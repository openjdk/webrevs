{"files":[{"patch":"@@ -1010,1 +1010,1 @@\n-            return in.readLine(prompt, mask);\n+            return in.readLine(prompt.replace(\"%\", \"%%\"), mask);\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/ConsoleIOContext.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8331535\n+ * @summary Test the JShell tool Console handling\n+ * @modules jdk.internal.le\/jdk.internal.org.jline.reader\n+ *          jdk.jshell\/jdk.internal.jshell.tool:+open\n+ * @build ConsoleToolTest ReplToolTesting\n+ * @run testng ConsoleToolTest\n+ *\/\n+\n+\n+import org.testng.annotations.Test;\n+\n+public class ConsoleToolTest extends ReplToolTesting {\n+\n+    @Test\n+    public void testOutput() {\n+        test(\n+             a -> {assertCommandWithOutputAndTerminal(a,\n+                                                      \"System.console().readLine(\\\"%%s\\\");\\ninput\", \/\/newline automatically appended\n+                                                      \"$1 ==> \\\"input\\\"\",\n+                                                      \"\"\"\n+                                                      \\u0005System.console().readLine(\\\"%%s\\\");\n+                                                      %sinput\n+                                                      \"\"\");},\n+             a -> {assertCommandWithOutputAndTerminal(a,\n+                                                      \"System.console().readPassword(\\\"%%s\\\");\\ninput!\", \/\/newline automatically appended\n+                                                      \"$2 ==> char[6] { 'i', 'n', 'p', 'u', 't', '!' }\",\n+                                                      \"\"\"\n+                                                      \\u0005System.console().readPassword(\\\"%%s\\\");\n+                                                      %s\n+                                                      \"\"\");}\n+            );\n+    }\n+\n+    void assertCommandWithOutputAndTerminal(boolean a, String command, String out, String terminalOut) {\n+        assertCommand(a, command, out, null, null, null, null, terminalOut);\n+    }\n+\n+}\n","filename":"test\/langtools\/jdk\/jshell\/ConsoleToolTest.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -224,0 +224,6 @@\n+    public String getTerminalOutput() {\n+        String s = normalizeLineEndings(\"\\r\\n\", console.data.toString());\n+        console.data.reset();\n+        return s;\n+    }\n+\n@@ -479,0 +485,1 @@\n+\n@@ -535,0 +542,5 @@\n+        assertCommand(after, cmd, out, err, userinput, print, usererr, null);\n+    }\n+\n+    public void assertCommand(boolean after, String cmd, String out, String err,\n+            String userinput, String print, String usererr, String terminalOut) {\n@@ -549,0 +561,1 @@\n+            assertOutput(getTerminalOutput(), terminalOut, \"terminal output: \" + cmd);\n@@ -568,1 +581,5 @@\n-        return ANSI_CODE_PATTERN.matcher(text.replace(System.getProperty(\"line.separator\"), \"\\n\")).replaceAll(\"\");\n+        return normalizeLineEndings(System.getProperty(\"line.separator\"), text);\n+    }\n+\n+    private String normalizeLineEndings(String lineSeparator, String text) {\n+        return ANSI_CODE_PATTERN.matcher(text.replace(lineSeparator, \"\\n\")).replaceAll(\"\");\n@@ -849,0 +866,1 @@\n+        private final ByteArrayOutputStream data = new ByteArrayOutputStream();\n@@ -864,1 +882,2 @@\n-            } \/\/ For now, anything else is thrown away\n+            }\n+            data.write(b);\n","filename":"test\/langtools\/jdk\/jshell\/ReplToolTesting.java","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"}]}