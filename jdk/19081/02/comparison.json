{"files":[{"patch":"@@ -101,1 +101,1 @@\n-                return jline.readLine(fmt.formatted(args));\n+                return jline.readLine(fmt.formatted(args).replace(\"%\", \"%%\"));\n@@ -116,1 +116,2 @@\n-                return jline.readLine(fmt.formatted(args), '\\0').toCharArray();\n+                return jline.readLine(fmt.formatted(args).replace(\"%\", \"%%\"), '\\0')\n+                            .toCharArray();\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/JdkConsoleProviderImpl.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8331681\n+ * @summary Verify the java.base's console provider handles the prompt correctly.\n+ * @library \/test\/lib\n+ * @run main\/othervm --limit-modules java.base ConsolePromptTest\n+ *\/\n+\n+import java.lang.reflect.Method;\n+import java.util.Objects;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class ConsolePromptTest {\n+\n+    public static void main(String... args) throws Throwable {\n+        for (Method m : ConsolePromptTest.class.getDeclaredMethods()) {\n+            if (m.getName().startsWith(\"test\")) {\n+                m.invoke(new ConsolePromptTest());\n+            }\n+        }\n+    }\n+\n+    void testCorrectOutputReadLine() throws Exception {\n+        doRunConsoleTest(\"testCorrectOutputReadLine\", \"inp\", \"%s\");\n+    }\n+\n+    void testCorrectOutputReadPassword() throws Exception {\n+        doRunConsoleTest(\"testCorrectOutputReadPassword\", \"inp\", \"%s\");\n+    }\n+\n+    void doRunConsoleTest(String testName,\n+                          String input,\n+                          String expectedOut) throws Exception {\n+        ProcessBuilder builder =\n+                ProcessTools.createTestJavaProcessBuilder(ConsoleTest.class.getName(),\n+                                                          testName);\n+        OutputAnalyzer output = ProcessTools.executeProcess(builder, input);\n+\n+        output.waitFor();\n+\n+        if (output.getExitValue() != 0) {\n+            throw new AssertionError(\"Unexpected return value: \" + output.getExitValue() +\n+                                     \", actualOut: \" + output.getStdout() +\n+                                     \", actualErr: \" + output.getStderr());\n+        }\n+\n+        String actualOut = output.getStdout();\n+\n+        if (!Objects.equals(expectedOut, actualOut)) {\n+            throw new AssertionError(\"Unexpected stdout content. \" +\n+                                     \"Expected: '\" + expectedOut + \"'\" +\n+                                     \", got: '\" + actualOut + \"'\");\n+        }\n+\n+        String expectedErr = \"\";\n+        String actualErr = output.getStderr();\n+\n+        if (!Objects.equals(expectedErr, actualErr)) {\n+            throw new AssertionError(\"Unexpected stderr content. \" +\n+                                     \"Expected: '\" + expectedErr + \"'\" +\n+                                     \", got: '\" + actualErr + \"'\");\n+        }\n+    }\n+\n+    public static class ConsoleTest {\n+        public static void main(String... args) {\n+            switch (args[0]) {\n+                case \"testCorrectOutputReadLine\" ->\n+                    System.console().readLine(\"%%s\");\n+                case \"testCorrectOutputReadPassword\" ->\n+                    System.console().readPassword(\"%%s\");\n+                default -> throw new UnsupportedOperationException(args[0]);\n+            }\n+\n+            System.exit(0);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/Console\/ConsolePromptTest.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8331535\n+ * @summary Verify the jdk.internal.le's console provider works properly.\n+ * @modules jdk.internal.le\n+ * @library \/test\/lib\n+ * @run main\/othervm -Djdk.console=jdk.internal.le JLineConsoleProviderTest\n+ *\/\n+\n+import java.lang.reflect.Method;\n+import java.util.Objects;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class JLineConsoleProviderTest {\n+\n+    public static void main(String... args) throws Throwable {\n+        for (Method m : JLineConsoleProviderTest.class.getDeclaredMethods()) {\n+            if (m.getName().startsWith(\"test\")) {\n+                m.invoke(new JLineConsoleProviderTest());\n+            }\n+        }\n+    }\n+\n+    void testCorrectOutputReadLine() throws Exception {\n+        doRunConsoleTest(\"testCorrectOutputReadLine\", \"inp\", \"%s\");\n+    }\n+\n+    void testCorrectOutputReadPassword() throws Exception {\n+        doRunConsoleTest(\"testCorrectOutputReadPassword\", \"inp\", \"%s\");\n+    }\n+\n+    void doRunConsoleTest(String testName,\n+                          String input,\n+                          String expectedOut) throws Exception {\n+        ProcessBuilder builder =\n+                ProcessTools.createTestJavaProcessBuilder(ConsoleTest.class.getName(),\n+                                                          testName);\n+        OutputAnalyzer output = ProcessTools.executeProcess(builder, input);\n+\n+        output.waitFor();\n+\n+        if (output.getExitValue() != 0) {\n+            throw new AssertionError(\"Unexpected return value: \" + output.getExitValue() +\n+                                     \", actualOut: \" + output.getStdout() +\n+                                     \", actualErr: \" + output.getStderr());\n+        }\n+\n+        String actualOut = output.getStdout();\n+\n+        if (!Objects.equals(expectedOut, actualOut)) {\n+            throw new AssertionError(\"Unexpected stdout content. \" +\n+                                     \"Expected: '\" + expectedOut + \"'\" +\n+                                     \", got: '\" + actualOut + \"'\");\n+        }\n+\n+        String expectedErr = \"\";\n+        String actualErr = output.getStderr();\n+\n+        if (!Objects.equals(expectedErr, actualErr)) {\n+            throw new AssertionError(\"Unexpected stderr content. \" +\n+                                     \"Expected: '\" + expectedErr + \"'\" +\n+                                     \", got: '\" + actualErr + \"'\");\n+        }\n+    }\n+\n+    public static class ConsoleTest {\n+        public static void main(String... args) {\n+            switch (args[0]) {\n+                case \"testCorrectOutputReadLine\" ->\n+                    System.console().readLine(\"%%s\");\n+                case \"testCorrectOutputReadPassword\" ->\n+                    System.console().readPassword(\"%%s\");\n+                default -> throw new UnsupportedOperationException(args[0]);\n+            }\n+\n+            System.exit(0);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/internal\/jline\/JLineConsoleProviderTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"}]}