{"files":[{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8366364\n+ * @summary Return enabled signature schemes with\n+ *          SSLConfiguration#getSSLParameters() call\n+ * @library \/javax\/net\/ssl\/templates\n+ *          \/test\/lib\n+ * @run main\/othervm DefaultSSLConfigSignatureSchemes\n+ * @run main\/othervm\n+ *          -Djdk.tls.server.SignatureSchemes=ecdsa_secp384r1_sha384,ed25519\n+ *          -Djdk.tls.client.SignatureSchemes=ecdsa_secp256r1_sha256,ed448\n+ *          DefaultSSLConfigSignatureSchemes\n+ *\/\n+\n+import static jdk.test.lib.Asserts.assertFalse;\n+import static jdk.test.lib.Asserts.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import javax.net.ssl.SSLEngine;\n+import jdk.test.lib.security.SecurityUtils;\n+\n+public class DefaultSSLConfigSignatureSchemes extends SSLEngineTemplate {\n+\n+    protected static final String DISABLED_SS = \"ecdsa_secp521r1_sha512\";\n+    protected static final String[] CUSTOM_SS = new String[]{\n+            \"ecdsa_secp256r1_sha256\",\n+            \"ecdsa_secp384r1_sha384\"};\n+    protected static final List<String> REFERENCE_SS = Stream.of(\n+                    \"ecdsa_secp256r1_sha256\",\n+                    \"ecdsa_secp384r1_sha384\",\n+                    \"ecdsa_secp521r1_sha512\",\n+                    \"ed25519\",\n+                    \"ed448\",\n+                    \"rsa_pss_rsae_sha256\",\n+                    \"rsa_pss_rsae_sha384\",\n+                    \"rsa_pss_rsae_sha512\",\n+                    \"rsa_pss_pss_sha256\",\n+                    \"rsa_pss_pss_sha384\",\n+                    \"rsa_pss_pss_sha512\",\n+                    \"rsa_pkcs1_sha256\",\n+                    \"rsa_pkcs1_sha384\",\n+                    \"rsa_pkcs1_sha512\",\n+                    \"dsa_sha256\",\n+                    \"ecdsa_sha224\",\n+                    \"rsa_sha224\",\n+                    \"dsa_sha224\",\n+                    \"ecdsa_sha1\",\n+                    \"rsa_pkcs1_sha1\",\n+                    \"dsa_sha1\")\n+            .sorted()\n+            .toList();\n+\n+    protected DefaultSSLConfigSignatureSchemes() throws Exception {\n+        super();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        SecurityUtils.addToDisabledTlsAlgs(DISABLED_SS);\n+        var test = new DefaultSSLConfigSignatureSchemes();\n+        var propertyClientSS =\n+                System.getProperty(\"jdk.tls.client.SignatureSchemes\");\n+        var propertyServerSS =\n+                System.getProperty(\"jdk.tls.server.SignatureSchemes\");\n+\n+        \/\/ Test jdk.tls.client.SignatureSchemes system property.\n+        if (propertyClientSS != null) {\n+            comparePropertySSWithEngineSS(propertyClientSS, test.clientEngine);\n+        }\n+\n+        \/\/ Test jdk.tls.server.SignatureSchemes system property.\n+        if (propertyServerSS != null) {\n+            comparePropertySSWithEngineSS(propertyServerSS, test.serverEngine);\n+        }\n+\n+        \/\/ Test default signature schemes and custom values if no system\n+        \/\/ properties are present.\n+        if (propertyClientSS == null && propertyServerSS == null) {\n+            for (SSLEngine engine :\n+                    new SSLEngine[]{test.serverEngine, test.clientEngine}) {\n+\n+                var sslParams = engine.getSSLParameters();\n+                var defaultConfigSS = new ArrayList<>(List.of(\n+                        sslParams.getSignatureSchemes()));\n+\n+                \/\/ Test default config signature schemes.\n+                assertFalse(defaultConfigSS.contains(DISABLED_SS));\n+                defaultConfigSS.add(DISABLED_SS);\n+                assertTrue(REFERENCE_SS.equals(\n+                        defaultConfigSS.stream().sorted().toList()));\n+\n+                \/\/ Test custom values.\n+                sslParams.setSignatureSchemes(CUSTOM_SS);\n+                engine.setSSLParameters(sslParams);\n+                assertTrue(Arrays.equals(CUSTOM_SS,\n+                        engine.getSSLParameters().getSignatureSchemes()));\n+            }\n+        }\n+    }\n+\n+    private static void comparePropertySSWithEngineSS(\n+            String property, SSLEngine engine) {\n+        var engineSS = Stream.of(engine\n+                .getSSLParameters().getSignatureSchemes()).sorted().toList();\n+        var propertySS = Stream.of(property.split(\",\")).sorted().toList();\n+        assertTrue(engineSS.equals(propertySS));\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/DefaultSSLConfigSignatureSchemes.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"}]}