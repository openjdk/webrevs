{"files":[{"patch":"@@ -149,0 +149,10 @@\n+\n+            ostream.println(\"\\n\" + TWOINDENT + \"Enabled Signature Schemes:\");\n+            String[] schemes = ssls.getSSLParameters().getSignatureSchemes();\n+            if (schemes == null) {\n+                ostream.println(THREEINDENT + \"<none>\");\n+            } else {\n+                for (String s : schemes) {\n+                    ostream.println(THREEINDENT + s);\n+                }\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/SecuritySettings.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import sun.security.ssl.SignatureScheme.SupportedSigSchemes;\n@@ -244,2 +245,6 @@\n-                CustomizedClientSignatureSchemes.signatureSchemes :\n-                CustomizedServerSignatureSchemes.signatureSchemes;\n+                CustomizedClientSignatureSchemes.signatureSchemes != null ?\n+                        CustomizedClientSignatureSchemes.signatureSchemes :\n+                        SupportedSigSchemes.DEFAULT :\n+                CustomizedServerSignatureSchemes.signatureSchemes != null ?\n+                        CustomizedServerSignatureSchemes.signatureSchemes :\n+                        SupportedSigSchemes.DEFAULT;\n@@ -365,1 +370,3 @@\n-        }   \/\/ Otherwise, use the default values\n+        } else {    \/\/ Otherwise, use the default values.\n+            this.signatureSchemes = SupportedSigSchemes.DEFAULT;\n+        }\n@@ -517,1 +524,2 @@\n-        \/\/ Reset the signature schemes, if it was configured with SSLParameters.\n+        \/\/ Reset the signature schemes, if it was configured with a\n+        \/\/ system property.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLConfiguration.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -300,1 +300,1 @@\n-    boolean isDefaultProtocolVesions(List<ProtocolVersion> protocols) {\n+    boolean isDefaultProtocolVersions(List<ProtocolVersion> protocols) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLContextImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -198,1 +198,1 @@\n-                if (sslContext.isDefaultProtocolVesions(\n+                if (sslContext.isDefaultProtocolVersions(\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLServerSocketImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.util.Collections;\n@@ -416,0 +415,1 @@\n+        List<SignatureScheme> schemesToCheck;\n@@ -417,4 +417,15 @@\n-        List<SignatureScheme> schemesToCheck =\n-                config.signatureSchemes == null ?\n-                    Arrays.asList(SignatureScheme.values()) :\n-                    namesOfAvailable(config.signatureSchemes);\n+        \/\/ No need to look up the names of the default signature schemes.\n+        if (config.signatureSchemes == SupportedSigSchemes.DEFAULT) {\n+            schemesToCheck = Arrays.asList(SignatureScheme.values());\n+        } else {\n+            schemesToCheck = new ArrayList<>();\n+            for (String name : config.signatureSchemes) {\n+                var ss = SignatureScheme.nameOf(name);\n+                if (ss != null) {\n+                    schemesToCheck.add(ss);\n+                } else {\n+                    SSLLogger.logWarning(\"ssl,handshake\", \"Unavailable \"\n+                            + \"configured signature scheme: \" + name);\n+                }\n+            }\n+        }\n@@ -473,2 +484,2 @@\n-            } else if ((config.signatureSchemes == null\n-                        || Utilities.contains(config.signatureSchemes, ss.name))\n+            } else if ((config.signatureSchemes == SupportedSigSchemes.DEFAULT\n+                    || Utilities.contains(config.signatureSchemes, ss.name))\n@@ -617,27 +628,0 @@\n-    private static List<SignatureScheme> namesOfAvailable(\n-                String[] signatureSchemes) {\n-\n-        if (signatureSchemes == null || signatureSchemes.length == 0) {\n-            return Collections.emptyList();\n-        }\n-\n-        List<SignatureScheme> sss = new ArrayList<>(signatureSchemes.length);\n-        for (String ss : signatureSchemes) {\n-            SignatureScheme scheme = SignatureScheme.nameOf(ss);\n-            if (scheme == null || !scheme.isAvailable) {\n-                if (SSLLogger.isOn &&\n-                        SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n-                    SSLLogger.finest(\n-                            \"Ignore the signature algorithm (\" + ss\n-                          + \"), unsupported or unavailable\");\n-                }\n-\n-                continue;\n-            }\n-\n-            sss.add(scheme);\n-        }\n-\n-        return sss;\n-    }\n-\n@@ -689,0 +673,11 @@\n+\n+    \/\/ Default signature schemes for SSLConfiguration.\n+    static final class SupportedSigSchemes {\n+\n+        static final String[] DEFAULT = Arrays.stream(\n+                        SignatureScheme.values())\n+                .filter(ss -> ss.isAvailable\n+                        && ss.isPermitted(\n+                        SSLAlgorithmConstraints.DEFAULT, null))\n+                .map(ss -> ss.name).toArray(String[]::new);\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SignatureScheme.java","additions":29,"deletions":34,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -474,1 +474,1 @@\n-            if (sslContext.isDefaultProtocolVesions(\n+            if (sslContext.isDefaultProtocolVersions(\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/TransportContext.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,143 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8366364\n+ * @summary Return enabled signature schemes with\n+ *          SSLConfiguration#getSSLParameters() call\n+ * @library \/javax\/net\/ssl\/templates\n+ *          \/test\/lib\n+ * @run main\/othervm DefaultSSLConfigSignatureSchemes\n+ * @run main\/othervm\n+ *          -Djdk.tls.server.SignatureSchemes=ecdsa_secp384r1_sha384,ed25519\n+ *          -Djdk.tls.client.SignatureSchemes=ecdsa_secp256r1_sha256,ed448\n+ *          DefaultSSLConfigSignatureSchemes\n+ *\/\n+\n+import static jdk.test.lib.Asserts.assertFalse;\n+import static jdk.test.lib.Asserts.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import javax.net.ssl.SSLEngine;\n+import jdk.test.lib.security.SecurityUtils;\n+\n+public class DefaultSSLConfigSignatureSchemes extends SSLEngineTemplate {\n+\n+    protected static final String DISABLED_SS = \"ecdsa_secp521r1_sha512\";\n+    protected static final String[] CUSTOM_SS = new String[]{\n+            \"ecdsa_secp256r1_sha256\",\n+            \"ecdsa_secp384r1_sha384\"};\n+    protected static final List<String> REFERENCE_SS = Stream.of(\n+                    \"ecdsa_secp256r1_sha256\",\n+                    \"ecdsa_secp384r1_sha384\",\n+                    \"ecdsa_secp521r1_sha512\",\n+                    \"ed25519\",\n+                    \"ed448\",\n+                    \"rsa_pss_rsae_sha256\",\n+                    \"rsa_pss_rsae_sha384\",\n+                    \"rsa_pss_rsae_sha512\",\n+                    \"rsa_pss_pss_sha256\",\n+                    \"rsa_pss_pss_sha384\",\n+                    \"rsa_pss_pss_sha512\",\n+                    \"rsa_pkcs1_sha256\",\n+                    \"rsa_pkcs1_sha384\",\n+                    \"rsa_pkcs1_sha512\",\n+                    \"dsa_sha256\",\n+                    \"ecdsa_sha224\",\n+                    \"rsa_sha224\",\n+                    \"dsa_sha224\",\n+                    \"ecdsa_sha1\",\n+                    \"rsa_pkcs1_sha1\",\n+                    \"dsa_sha1\")\n+            .sorted()\n+            .toList();\n+\n+    protected DefaultSSLConfigSignatureSchemes() throws Exception {\n+        super();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        SecurityUtils.addToDisabledTlsAlgs(DISABLED_SS);\n+        var test = new DefaultSSLConfigSignatureSchemes();\n+        var propertyClientSS =\n+                System.getProperty(\"jdk.tls.client.SignatureSchemes\");\n+        var propertyServerSS =\n+                System.getProperty(\"jdk.tls.server.SignatureSchemes\");\n+\n+        \/\/ Test jdk.tls.client.SignatureSchemes system property.\n+        if (propertyClientSS != null) {\n+            comparePropertySSWithEngineSS(propertyClientSS, test.clientEngine);\n+        }\n+\n+        \/\/ Test jdk.tls.server.SignatureSchemes system property.\n+        if (propertyServerSS != null) {\n+            comparePropertySSWithEngineSS(propertyServerSS, test.serverEngine);\n+        }\n+\n+        \/\/ Test default signature schemes and custom values if no system\n+        \/\/ properties are present.\n+        if (propertyClientSS == null && propertyServerSS == null) {\n+            for (SSLEngine engine :\n+                    new SSLEngine[]{test.serverEngine, test.clientEngine}) {\n+\n+                \/\/ Test default config signature schemes.\n+                checkEngineDefaultSS(engine);\n+\n+                \/\/ Test custom values.\n+                var sslParams = engine.getSSLParameters();\n+                sslParams.setSignatureSchemes(CUSTOM_SS);\n+                engine.setSSLParameters(sslParams);\n+                assertTrue(Arrays.equals(CUSTOM_SS,\n+                        engine.getSSLParameters().getSignatureSchemes()));\n+\n+                \/\/ Set null custom value, default signature schemes should\n+                \/\/ be returned.\n+                sslParams.setSignatureSchemes(null);\n+                engine.setSSLParameters(sslParams);\n+                checkEngineDefaultSS(engine);\n+            }\n+        }\n+    }\n+\n+    private static void comparePropertySSWithEngineSS(\n+            String property, SSLEngine engine) {\n+        var engineSS = Stream.of(engine\n+                .getSSLParameters().getSignatureSchemes()).sorted().toList();\n+        var propertySS = Stream.of(property.split(\",\")).sorted().toList();\n+        assertTrue(engineSS.equals(propertySS));\n+    }\n+\n+    private static void checkEngineDefaultSS(SSLEngine engine) {\n+        var defaultConfigSS = new ArrayList<>(List.of(\n+                engine.getSSLParameters().getSignatureSchemes()));\n+\n+        assertFalse(defaultConfigSS.contains(DISABLED_SS));\n+        defaultConfigSS.add(DISABLED_SS);\n+        assertTrue(REFERENCE_SS.equals(\n+                defaultConfigSS.stream().sorted().toList()));\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/DefaultSSLConfigSignatureSchemes.java","additions":143,"deletions":0,"binary":false,"changes":143,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @bug 6994753 7123582 8305950 8281658 8310201 8311653 8343804 8351354\n+ * @bug 6994753 7123582 8305950 8281658 8310201 8311653 8343804 8351354 8366364\n@@ -87,0 +87,2 @@\n+    private static final String ENABLED_SIG_SCHEMES_SETTINGS =\n+            \"Enabled Signature Schemes:\";\n@@ -110,0 +112,1 @@\n+        checkContains(tr, ENABLED_SIG_SCHEMES_SETTINGS);\n@@ -240,0 +243,1 @@\n+        checkContains(tr, ENABLED_SIG_SCHEMES_SETTINGS);\n","filename":"test\/jdk\/tools\/launcher\/Settings.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}