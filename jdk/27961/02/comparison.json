{"files":[{"patch":"@@ -149,0 +149,10 @@\n+\n+            ostream.println(\"\\n\" + TWOINDENT + \"Enabled Signature Schemes:\");\n+            String[] schemes = ssls.getSSLParameters().getSignatureSchemes();\n+            if (schemes == null) {\n+                ostream.println(THREEINDENT + \"<none>\");\n+            } else {\n+                for (String s : schemes) {\n+                    ostream.println(THREEINDENT + s);\n+                }\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/SecuritySettings.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -772,1 +772,3 @@\n-                            if (namedGroup.isAvailable) {\n+                            if (namedGroup.isAvailable\n+                                    && namedGroup.isPermitted(\n+                                    SSLAlgorithmConstraints.DEFAULT)) {\n@@ -808,1 +810,2 @@\n-                    if (group.isAvailable) {\n+                    if (group.isAvailable && group.isPermitted(\n+                            SSLAlgorithmConstraints.DEFAULT)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/NamedGroup.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import sun.security.ssl.SignatureScheme.SupportedSigSchemes;\n@@ -244,2 +245,6 @@\n-                CustomizedClientSignatureSchemes.signatureSchemes :\n-                CustomizedServerSignatureSchemes.signatureSchemes;\n+                CustomizedClientSignatureSchemes.signatureSchemes != null ?\n+                        CustomizedClientSignatureSchemes.signatureSchemes :\n+                        SupportedSigSchemes.DEFAULT :\n+                CustomizedServerSignatureSchemes.signatureSchemes != null ?\n+                        CustomizedServerSignatureSchemes.signatureSchemes :\n+                        SupportedSigSchemes.DEFAULT;\n@@ -365,1 +370,3 @@\n-        }   \/\/ Otherwise, use the default values\n+        } else {    \/\/ Otherwise, use the default values.\n+            this.signatureSchemes = SupportedSigSchemes.DEFAULT;\n+        }\n@@ -517,1 +524,2 @@\n-        \/\/ Reset the signature schemes, if it was configured with SSLParameters.\n+        \/\/ Reset the signature schemes, if it was configured with a\n+        \/\/ system property.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLConfiguration.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -300,1 +300,1 @@\n-    boolean isDefaultProtocolVesions(List<ProtocolVersion> protocols) {\n+    boolean isDefaultProtocolVersions(List<ProtocolVersion> protocols) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLContextImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -198,1 +198,1 @@\n-                if (sslContext.isDefaultProtocolVesions(\n+                if (sslContext.isDefaultProtocolVersions(\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLServerSocketImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.util.Collections;\n@@ -41,0 +40,1 @@\n+import java.util.Objects;\n@@ -416,0 +416,1 @@\n+        List<SignatureScheme> schemesToCheck;\n@@ -417,4 +418,18 @@\n-        List<SignatureScheme> schemesToCheck =\n-                config.signatureSchemes == null ?\n-                    Arrays.asList(SignatureScheme.values()) :\n-                    namesOfAvailable(config.signatureSchemes);\n+        \/\/ No need to look up the names of the default signature schemes.\n+        if (config.signatureSchemes == SupportedSigSchemes.DEFAULT\n+                || config.signatureSchemes == null) {\n+            schemesToCheck = Arrays.asList(SignatureScheme.values());\n+        } else {\n+            schemesToCheck = Arrays.stream(config.signatureSchemes)\n+                    .map(name -> {\n+                        var ss = SignatureScheme.nameOf(name);\n+                        if (ss == null && SSLLogger.isOn\n+                                && SSLLogger.isOn(\"ssl,handshake\")) {\n+                            SSLLogger.warning(\"Unavailable configured \"\n+                                    + \"signature scheme: \" + name);\n+                        }\n+                        return ss;\n+                    })\n+                    .filter(Objects::nonNull)\n+                    .toList();\n+        }\n@@ -474,1 +489,2 @@\n-                        || Utilities.contains(config.signatureSchemes, ss.name))\n+                    || config.signatureSchemes == SupportedSigSchemes.DEFAULT\n+                    || Utilities.contains(config.signatureSchemes, ss.name))\n@@ -617,27 +633,0 @@\n-    private static List<SignatureScheme> namesOfAvailable(\n-                String[] signatureSchemes) {\n-\n-        if (signatureSchemes == null || signatureSchemes.length == 0) {\n-            return Collections.emptyList();\n-        }\n-\n-        List<SignatureScheme> sss = new ArrayList<>(signatureSchemes.length);\n-        for (String ss : signatureSchemes) {\n-            SignatureScheme scheme = SignatureScheme.nameOf(ss);\n-            if (scheme == null || !scheme.isAvailable) {\n-                if (SSLLogger.isOn &&\n-                        SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n-                    SSLLogger.finest(\n-                            \"Ignore the signature algorithm (\" + ss\n-                          + \"), unsupported or unavailable\");\n-                }\n-\n-                continue;\n-            }\n-\n-            sss.add(scheme);\n-        }\n-\n-        return sss;\n-    }\n-\n@@ -689,0 +678,11 @@\n+\n+    \/\/ Default signature schemes for SSLConfiguration.\n+    static final class SupportedSigSchemes {\n+\n+        static final String[] DEFAULT = Arrays.stream(\n+                        SignatureScheme.values())\n+                .filter(ss -> ss.isAvailable\n+                        && ss.isPermitted(\n+                        SSLAlgorithmConstraints.DEFAULT, null))\n+                .map(ss -> ss.name).toArray(String[]::new);\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SignatureScheme.java","additions":33,"deletions":33,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -474,1 +474,1 @@\n-            if (sslContext.isDefaultProtocolVesions(\n+            if (sslContext.isDefaultProtocolVersions(\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/TransportContext.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8246330\n+ * @bug 8246330 8366364\n@@ -38,1 +38,0 @@\n-import javax.net.ssl.SSLException;\n@@ -114,1 +113,1 @@\n-            } catch (SSLException | IllegalStateException ssle) {\n+            } catch (NoClassDefFoundError | ExceptionInInitializerError ssle) {\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/DisabledCurve.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,3 @@\n- * @bug 8226374 8242929\n- * @library \/javax\/net\/ssl\/templates\n+ * @bug 8226374 8242929 8366364\n+ * @library \/test\/lib\n+ *          \/javax\/net\/ssl\/templates\n@@ -41,0 +42,3 @@\n+import static jdk.test.lib.Asserts.assertTrue;\n+import static jdk.test.lib.Utils.runAndCheckException;\n+\n@@ -45,1 +49,0 @@\n-import javax.net.ssl.SSLException;\n@@ -91,1 +94,1 @@\n-        \/\/ Named group is set as per run argument with no change in it's alphabet\n+        \/\/ Named group is set as per run argument with no change in its alphabet\n@@ -96,8 +99,3 @@\n-            try {\n-                (new RestrictNamedGroup()).run();\n-            } catch (SSLException | IllegalStateException ssle) {\n-                \/\/ The named group should be restricted.\n-                continue;\n-            }\n-\n-            throw new Exception(\"The test case should be disabled\");\n+            runAndCheckException(() -> new RestrictNamedGroup().run(),\n+                    ex -> assertTrue(ex instanceof NoClassDefFoundError\n+                            || ex instanceof ExceptionInInitializerError));\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/RestrictNamedGroup.java","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @bug 6994753 7123582 8305950 8281658 8310201 8311653 8343804 8351354\n+ * @bug 6994753 7123582 8305950 8281658 8310201 8311653 8343804 8351354 8366364\n@@ -87,0 +87,2 @@\n+    private static final String ENABLED_SIG_SCHEMES_SETTINGS =\n+            \"Enabled Signature Schemes:\";\n@@ -110,0 +112,1 @@\n+        checkContains(tr, ENABLED_SIG_SCHEMES_SETTINGS);\n@@ -240,0 +243,1 @@\n+        checkContains(tr, ENABLED_SIG_SCHEMES_SETTINGS);\n","filename":"test\/jdk\/tools\/launcher\/Settings.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}