{"files":[{"patch":"@@ -37,0 +37,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -70,1 +72,1 @@\n-        return MethodTypeDescImpl.ofTrusted(returnDesc, ConstantUtils.EMPTY_CLASSDESC);\n+        return MethodTypeDescImpl.ofValidated(requireNonNull(returnDesc), ConstantUtils.EMPTY_CLASSDESC);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/MethodTypeDesc.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -72,2 +72,6 @@\n-        if (trustedArgTypes.length == 0) \/\/ implicit null check\n-            return new MethodTypeDescImpl(returnType, ConstantUtils.EMPTY_CLASSDESC);\n+        \/\/ implicit null checks of trustedArgTypes and all elements\n+        for (ClassDesc cd : trustedArgTypes) {\n+            validateArgument(cd);\n+        }\n+        return ofValidated(returnType, trustedArgTypes);\n+    }\n@@ -75,3 +79,5 @@\n-        for (ClassDesc cd : trustedArgTypes)\n-            if (cd.descriptorString().charAt(0) == 'V') \/\/ implicit null check\n-                throw new IllegalArgumentException(\"Void parameters not permitted\");\n+    private static ClassDesc validateArgument(ClassDesc arg) {\n+        if (arg.descriptorString().charAt(0) == 'V') \/\/ implicit null check\n+            throw new IllegalArgumentException(\"Void parameters not permitted\");\n+        return arg;\n+    }\n@@ -79,0 +85,10 @@\n+    \/**\n+     * Constructs a {@linkplain MethodTypeDesc} with the specified pre-validated return type\n+     * and a pre-validated trusted parameter types array.\n+     *\n+     * @param returnType a {@link ClassDesc} describing the return type\n+     * @param trustedArgTypes {@link ClassDesc}s describing the trusted parameter types\n+     *\/\n+    public static MethodTypeDescImpl ofValidated(ClassDesc returnType, ClassDesc[] trustedArgTypes) {\n+        if (trustedArgTypes.length == 0)\n+            return new MethodTypeDescImpl(returnType, ConstantUtils.EMPTY_CLASSDESC);\n@@ -99,1 +115,1 @@\n-        MethodTypeDescImpl result = new MethodTypeDescImpl(ptypes.get(0), paramTypes);\n+        MethodTypeDescImpl result = ofValidated(ptypes.get(0), paramTypes);\n@@ -132,1 +148,1 @@\n-        return new MethodTypeDescImpl(requireNonNull(returnType), argTypes);\n+        return ofValidated(requireNonNull(returnType), argTypes);\n@@ -138,2 +154,2 @@\n-        newArgs[index] = paramType;\n-        return ofTrusted(returnType, newArgs);\n+        newArgs[index] = validateArgument(paramType);\n+        return ofValidated(returnType, newArgs);\n@@ -154,1 +170,1 @@\n-        return ofTrusted(returnType, newArgs);\n+        return ofValidated(returnType, newArgs);\n@@ -162,0 +178,3 @@\n+        for (ClassDesc param : paramTypes)\n+            validateArgument(param);\n+\n@@ -170,1 +189,1 @@\n-        return ofTrusted(returnType, newArgs);\n+        return ofValidated(returnType, newArgs);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/constant\/MethodTypeDescImpl.java","additions":30,"deletions":11,"binary":false,"changes":41,"status":"modified"}]}