{"files":[{"patch":"@@ -359,2 +359,0 @@\n-        Color tabbedPaneBg = new ColorUIResource(238, 238, 238);\n-        Color unselectedTabColor = new ColorUIResource(255, 255, 255);\n@@ -1032,5 +1030,0 @@\n-            \"TabbedPane.selected\", tabbedPaneBg,\n-            \"TabbedPane.contentOpaque\", Boolean.TRUE,\n-            \"TabbedPane.tabsOpaque\", Boolean.TRUE,\n-            \"TabbedPane.contentAreaColor\", tabbedPaneBg,\n-            \"TabbedPane.unselectedBackground\", unselectedTabColor,\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/gtk\/GTKLookAndFeel.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -938,0 +938,4 @@\n+        Region id = context.getRegion();\n+        int state = context.getComponentState();\n+        int gtkState = ((state & SynthConstants.SELECTED) != 0 ?\n+                SynthConstants.ENABLED : SynthConstants.PRESSED);\n@@ -939,9 +943,1 @@\n-        if (UIManager.getBoolean(\"TabbedPane.tabsOpaque\") || pane.isOpaque()) {\n-            Region id = context.getRegion();\n-            int state = context.getComponentState();\n-            int gtkState = ((state & SynthConstants.SELECTED) != 0 ?\n-                    SynthConstants.ENABLED : SynthConstants.PRESSED);\n-            int placement = pane.getTabPlacement();\n-\n-            \/\/ Fill the tab rect area\n-            g.fillRect(x, y, w, h);\n+        int placement = pane.getTabPlacement();\n@@ -949,10 +945,9 @@\n-            synchronized (UNIXToolkit.GTK_LOCK) {\n-                if (!ENGINE.paintCachedImage(g, x, y, w, h,\n-                        id, gtkState, placement, tabIndex)) {\n-                    PositionType side = POSITIONS[placement - 1];\n-                    ENGINE.startPainting(g, x, y, w, h,\n-                            id, gtkState, placement, tabIndex);\n-                    ENGINE.paintExtension(g, context, id, gtkState,\n-                            ShadowType.OUT, \"tab\", x, y, w, h, side, tabIndex);\n-                    ENGINE.finishPainting();\n-                }\n+        synchronized (UNIXToolkit.GTK_LOCK) {\n+            if (!ENGINE.paintCachedImage(g, x, y, w, h,\n+                    id, gtkState, placement, tabIndex)) {\n+                PositionType side = POSITIONS[placement - 1];\n+                ENGINE.startPainting(g, x, y, w, h,\n+                        id, gtkState, placement, tabIndex);\n+                ENGINE.paintExtension(g, context, id, gtkState,\n+                        ShadowType.OUT, \"tab\", x, y, w, h, side, tabIndex);\n+                ENGINE.finishPainting();\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/gtk\/GTKPainter.java","additions":14,"deletions":19,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2114,21 +2114,18 @@\n-        JTabbedPane pane = (JTabbedPane)context.getComponent();\n-        if (UIManager.getBoolean(\"TabbedPane.tabsOpaque\") || pane.isOpaque()) {\n-            if (orientation == JTabbedPane.LEFT) {\n-                AffineTransform transform = new AffineTransform();\n-                transform.scale(-1, 1);\n-                transform.rotate(Math.toRadians(90));\n-                paintBackground(context, g, y, x, h, w, transform);\n-            } else if (orientation == JTabbedPane.RIGHT) {\n-                AffineTransform transform = new AffineTransform();\n-                transform.rotate(Math.toRadians(90));\n-                transform.translate(0, -(x + w));\n-                paintBackground(context, g, y, 0, h, w, transform);\n-            } else if (orientation == JTabbedPane.BOTTOM) {\n-                AffineTransform transform = new AffineTransform();\n-                transform.translate(x, y);\n-                transform.scale(1, -1);\n-                transform.translate(0, -h);\n-                paintBackground(context, g, 0, 0, w, h, transform);\n-            } else {\n-                paintBackground(context, g, x, y, w, h, null);\n-            }\n+        if (orientation == JTabbedPane.LEFT) {\n+            AffineTransform transform = new AffineTransform();\n+            transform.scale(-1, 1);\n+            transform.rotate(Math.toRadians(90));\n+            paintBackground(context, g, y, x, h, w, transform);\n+        } else if (orientation == JTabbedPane.RIGHT) {\n+            AffineTransform transform = new AffineTransform();\n+            transform.rotate(Math.toRadians(90));\n+            transform.translate(0, -(x + w));\n+            paintBackground(context, g, y, 0, h, w, transform);\n+        } else if (orientation == JTabbedPane.BOTTOM) {\n+            AffineTransform transform = new AffineTransform();\n+            transform.translate(x, y);\n+            transform.scale(1, -1);\n+            transform.translate(0, -h);\n+            paintBackground(context, g, 0, 0, w, h, transform);\n+        } else {\n+            paintBackground(context, g, x, y, w, h, null);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/nimbus\/SynthPainterImpl.java","additions":18,"deletions":21,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 1998, 2017, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,3 +86,0 @@\n-      <uiColor name=\"nimbusTabbedPaneContentArea\">\n-         <matte red=\"238\" green=\"238\" blue=\"238\" alpha=\"255\" hueOffset=\"0.0\" saturationOffset=\"0.0\" brightnessOffset=\"0.0\" alphaOffset=\"0\"\/>\n-      <\/uiColor>\n@@ -21652,5 +21649,0 @@\n-               <uiProperty name=\"contentOpaque\" type=\"BOOLEAN\" value=\"true\"\/>\n-               <uiProperty name=\"tabsOpaque\" type=\"BOOLEAN\" value=\"true\"\/>\n-               <uiProperty name=\"contentAreaColor\" type=\"COLOR\">\n-                  <matte red=\"238\" green=\"238\" blue=\"238\" alpha=\"255\" uiDefaultParentName=\"nimbusTabbedPaneContentArea\" hueOffset=\"0.0\" saturationOffset=\"0.0\" brightnessOffset=\"0.0\" alphaOffset=\"0\"\/>\n-               <\/uiProperty>\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/nimbus\/skin.laf","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import java.awt.Color;\n@@ -125,6 +124,0 @@\n-    \/\/ Background color for selected tab and content pane\n-    private Color selectColor;\n-    \/\/ Background color for unselected tabs\n-    private Color unselectedBackground;\n-    private boolean contentOpaque = true;\n-\n@@ -156,3 +149,0 @@\n-        selectColor = UIManager.getColor(\"TabbedPane.selected\");\n-        contentOpaque = UIManager.getBoolean(\"TabbedPane.contentOpaque\");\n-        unselectedBackground = UIManager.getColor(\"TabbedPane.unselectedBackground\");\n@@ -650,6 +640,0 @@\n-        if (isSelected) {\n-            g.setColor(selectColor);\n-        } else {\n-            g.setColor(getUnselectedBackgroundAt(tabIndex));\n-        }\n-\n@@ -678,8 +662,0 @@\n-    private Color getUnselectedBackgroundAt(int index) {\n-        Color color = tabPane.getBackgroundAt(index);\n-        if (color instanceof UIResource && unselectedBackground != null) {\n-            return unselectedBackground;\n-        }\n-        return color;\n-    }\n-\n@@ -763,15 +739,0 @@\n-\n-        if (tabPane.getTabCount() > 0 && (contentOpaque || tabPane.isOpaque())) {\n-            \/\/ Fill region behind content area\n-            Color color = UIManager.getColor(\"TabbedPane.contentAreaColor\");\n-            if (color != null) {\n-                g.setColor(color);\n-            } else if (selectColor == null || selectedIndex == -1) {\n-                g.setColor(tabPane.getBackground());\n-            } else {\n-                g.setColor(selectColor);\n-            }\n-            \/\/ fill content area rect for both GTK and Nimbus LAF here\n-            g.fillRect(x, y, w, h);\n-        }\n-\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthTabbedPaneUI.java","additions":1,"deletions":40,"binary":false,"changes":41,"status":"modified"}]}