{"files":[{"patch":"@@ -41,0 +41,10 @@\n+\/\/ Return true iff an access to bt is single-copy atomic.\n+\n+\/\/ The JMM requires atomicity for all accesses to fields of primitive\n+\/\/ types other than double and long. In practice, HotSpot assumes that\n+\/\/ on all all processors, accesses to memory operands of wordSize and\n+\/\/ smaller are atomic.\n+static bool access_is_atomic(BasicType bt) {\n+  return type2aelembytes(bt) <= wordSize;\n+}\n+\n@@ -143,1 +153,1 @@\n-  bool is_atomic = is_volatile || AlwaysAtomicAccesses;\n+  bool needs_atomic = AlwaysAtomicAccesses && !access_is_atomic(value->type());\n@@ -157,1 +167,1 @@\n-  if (is_atomic && !needs_patching) {\n+  if ((is_volatile || needs_atomic) && !needs_patching) {\n@@ -172,1 +182,1 @@\n-  bool is_atomic = is_volatile || AlwaysAtomicAccesses;\n+  bool needs_atomic = AlwaysAtomicAccesses && !access_is_atomic(result->type());\n@@ -184,1 +194,1 @@\n-  } else if (is_atomic && !needs_patching) {\n+  } else if ((is_volatile || needs_atomic) && !needs_patching) {\n","filename":"src\/hotspot\/share\/gc\/shared\/c1\/barrierSetC1.cpp","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"}]}