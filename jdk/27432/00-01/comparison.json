{"files":[{"patch":"@@ -42,0 +42,5 @@\n+\n+\/\/ The JMM requires atomicity for all accesses to fields of primitive\n+\/\/ types other than double and long. In practice, HotSpot assumes that\n+\/\/ on all all processors, accesses to memory operands of wordSize and\n+\/\/ smaller are atomic.\n@@ -43,1 +48,0 @@\n-#ifdef CPU_MULTI_COPY_ATOMIC\n@@ -45,3 +49,0 @@\n-#else\n-  return false;\n-#endif\n@@ -152,1 +153,1 @@\n-  bool is_atomic = is_volatile || (AlwaysAtomicAccesses && ! access_is_atomic(value->type()));\n+  bool needs_atomic = is_volatile || (AlwaysAtomicAccesses && !access_is_atomic(value->type()));\n@@ -166,1 +167,1 @@\n-  if (is_atomic && !needs_patching) {\n+  if (needs_atomic && !needs_patching) {\n@@ -181,1 +182,1 @@\n-  bool is_atomic = is_volatile || (AlwaysAtomicAccesses && ! access_is_atomic(result->type()));\n+  bool needs_atomic = is_volatile || (AlwaysAtomicAccesses && !access_is_atomic(result->type()));\n@@ -193,1 +194,1 @@\n-  } else if (is_atomic && !needs_patching) {\n+  } else if (needs_atomic && !needs_patching) {\n","filename":"src\/hotspot\/share\/gc\/shared\/c1\/barrierSetC1.cpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"}]}