{"files":[{"patch":"@@ -95,0 +95,6 @@\n+void ClassFileParser::classfile_icce_error(const char* msg,\n+                                           TRAPS) const {\n+  ResourceMark rm(THREAD);\n+  Exceptions::fthrow(THREAD_AND_LOCATION, vmSymbols::java_lang_IncompatibleClassChangeError(), msg);\n+}\n+\n","filename":"src\/hotspot\/share\/classfile\/classFileError.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4067,3 +4067,6 @@\n-    if (super_ik->is_sealed() && !super_ik->has_as_permitted_subclass(this_klass)) {\n-      classfile_icce_error(\"class %s cannot inherit from sealed class %s\", super_ik, THREAD);\n-      return;\n+    if (super_ik->is_sealed()) {\n+      stringStream ss;\n+      if (!super_ik->has_as_permitted_subclass(this_klass, ss)) {\n+        classfile_icce_error(ss.as_string(), THREAD);\n+        return;\n+      }\n@@ -4114,6 +4117,6 @@\n-    if (k->is_sealed() && !k->has_as_permitted_subclass(this_klass)) {\n-      classfile_icce_error(this_klass->is_interface() ?\n-                             \"class %s cannot extend sealed interface %s\" :\n-                             \"class %s cannot implement sealed interface %s\",\n-                           k, THREAD);\n-      return;\n+    if (k->is_sealed()) {\n+      stringStream ss;\n+      if (!k->has_as_permitted_subclass(this_klass, ss)) {\n+        classfile_icce_error(ss.as_string(), THREAD);\n+        return;\n+      }\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -370,0 +370,4 @@\n+  \/\/ Uses msg directly in the ICCE, with no additional content\n+  void classfile_icce_error(const char* msg,\n+                            TRAPS) const;\n+\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -745,1 +745,1 @@\n-               name() == nullptr ? UNNAMED_MODULE : name()->as_C_string(),\n+               name_as_C_string(),\n","filename":"src\/hotspot\/share\/classfile\/moduleEntry.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -188,0 +188,4 @@\n+  \/\/ Note caller requires ResourceMark\n+  const char* name_as_C_string() {\n+    return is_named() ? name()->as_C_string() : UNNAMED_MODULE;\n+  }\n","filename":"src\/hotspot\/share\/classfile\/moduleEntry.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -214,2 +214,4 @@\n-\/\/ Called to verify that k is a permitted subclass of this class\n-bool InstanceKlass::has_as_permitted_subclass(const InstanceKlass* k) const {\n+\/\/ Called to verify that k is a permitted subclass of this class.\n+\/\/ The incoming stringStream is used to format the messages for error logging and for the caller\n+\/\/ to use for exception throwing.\n+bool InstanceKlass::has_as_permitted_subclass(const InstanceKlass* k, stringStream& ss) const {\n@@ -223,1 +225,1 @@\n-    log_trace(class, sealed)(\"Checking for permitted subclass of %s in %s\",\n+    log_trace(class, sealed)(\"Checking for permitted subclass %s in %s\",\n@@ -229,3 +231,5 @@\n-    ResourceMark rm(current);\n-    log_trace(class, sealed)(\"Check failed for same module of permitted subclass %s and sealed class %s\",\n-                             k->external_name(), this->external_name());\n+    ss.print(\"Failed same module check: subclass %s is in module \\\"%s\\\" for loader %s \"\n+             \"and sealed class %s is in module \\\"%s\\\" for loader %s\",\n+             k->external_name(), k->module()->name_as_C_string(), k->module()->loader_data()->loader_name_and_id(),\n+             this->external_name(), this->module()->name_as_C_string(), this->module()->loader_data()->loader_name_and_id());\n+    log_trace(class, sealed)(\" - %s\", ss.as_string());\n@@ -236,3 +240,7 @@\n-    ResourceMark rm(current);\n-    log_trace(class, sealed)(\"Check failed, subclass %s not public and not in the same package as sealed class %s\",\n-                             k->external_name(), this->external_name());\n+    ss.print(\"Failed same run-time package check: non-public subclass %s is in package \\\"%s\\\" with classloader %s,\"\n+             \"and sealed class %s is in package \\\"%s\\\" with classloader %s\",\n+             k->external_name(), k->package() != nullptr ? k->package()->name()->as_C_string() : \"un-named\",\n+             k->module()->loader_data()->loader_name_and_id(),\n+             this->external_name(), this->package() != nullptr ? this->package()->name()->as_C_string() : \"un-named\",\n+             this->module()->loader_data()->loader_name_and_id());\n+    log_trace(class, sealed)(\" - %s\", ss.as_string());\n@@ -250,1 +258,4 @@\n-  log_trace(class, sealed)(\"- class is NOT a permitted subclass!\");\n+\n+  ss.print(\"Failed listed permitted subclass check: class %s is not a permitted subclass of %s\",\n+           k->external_name(), this->external_name());\n+  log_trace(class, sealed)(\" - %s\", ss.as_string());\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":21,"deletions":10,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -459,2 +459,4 @@\n-  \/\/ Called to verify that k is a permitted subclass of this class\n-  bool has_as_permitted_subclass(const InstanceKlass* k) const;\n+  \/\/ Called to verify that k is a permitted subclass of this class.\n+  \/\/ The incoming stringStream is used for logging, and for the caller to create\n+  \/\/ a detailed exception message on failure.\n+  bool has_as_permitted_subclass(const InstanceKlass* k, stringStream& ss) const;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,3 @@\n-            if (!e.getMessage().contains(\"cannot implement sealed interface\")) {\n+            if (!e.getMessage().equals(\"Failed same run-time package check: non-public subclass sealedP2.C2 \" +\n+                                       \"is in package \\\"sealedP2\\\" with classloader 'app',and sealed class \" +\n+                                       \"sealedP1.SuperInterface is in package \\\"sealedP1\\\" with classloader 'app'\")) {\n@@ -89,1 +91,3 @@\n-            if (!e.getMessage().contains(\"cannot implement sealed interface\")) {\n+            if (!e.getMessage().equals(\"Failed same module check: subclass sealedP3.C3 is in module \\\"module_two\\\" \" +\n+                                       \"for loader 'app' and sealed class sealedP1.SuperInterface is in module \" +\n+                                       \"\\\"module_one\\\" for loader 'app'\")) {\n","filename":"test\/hotspot\/jtreg\/runtime\/modules\/SealedInterfaceModuleTest.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,3 @@\n-            if (!e.getMessage().contains(\"cannot inherit from sealed class\")) {\n+            if (!e.getMessage().equals(\"Failed same run-time package check: non-public subclass sealedP2.C2 \" +\n+                                       \"is in package \\\"sealedP2\\\" with classloader 'app',and sealed class \" +\n+                                       \"sealedP1.SuperClass is in package \\\"sealedP1\\\" with classloader 'app'\")) {\n@@ -89,1 +91,3 @@\n-            if (!e.getMessage().contains(\"cannot inherit from sealed class\")) {\n+            if (!e.getMessage().equals(\"Failed same module check: subclass sealedP3.C3 is in module \\\"module_two\\\" \" +\n+                                       \"for loader 'app' and sealed class sealedP1.SuperClass is in module \" +\n+                                       \"\\\"module_one\\\" for loader 'app'\")) {\n","filename":"test\/hotspot\/jtreg\/runtime\/modules\/SealedModuleTest.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,0 +52,1 @@\n+    \/\/ Check if the given class has the expected permitted subclasses\n@@ -95,1 +96,1 @@\n-                                          String expectedCFEMessage) throws Throwable {\n+                                          String expectedMessage) throws Throwable {\n@@ -98,1 +99,1 @@\n-            throw new RuntimeException(\"Expected ClassFormatError exception not thrown for \" + className);\n+            throw new RuntimeException(\"Expected exception \" + expectedException.getName() + \" not thrown for \" + className);\n@@ -104,1 +105,1 @@\n-            if (!cfe.getMessage().contains(expectedCFEMessage)) {\n+            if (!cfe.getMessage().contains(expectedMessage)) {\n@@ -113,1 +114,1 @@\n-            if (!icce.getMessage().contains(expectedCFEMessage)) {\n+            if (!icce.getMessage().contains(expectedMessage)) {\n@@ -138,1 +139,1 @@\n-                           \"SubClass cannot inherit from sealed class NoSubclasses\");\n+                           \"Failed listed permitted subclass check: class SubClass is not a permitted subclass of NoSubclasses\");\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/GetPermittedSubclassesTest.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8345911\n+ * @library \/test\/lib\n+ * @compile SealedSuper.java SealedSub.java\n+ * @comment Copy SealedSuper.class to the currnet directory so it will be on the bootclasspath\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller SealedSuper\n+ * @run main\/othervm -Xbootclasspath\/a:. -Xlog:class+sealed=trace SealedDifferentUnnamedModuleTest\n+ *\/\n+\n+public class SealedDifferentUnnamedModuleTest {\n+\n+    public static void main(String args[]) throws Throwable {\n+\n+        \/\/ Load the sealed superclass. It will be loaded by the boot loader and\n+        \/\/ so reside in the boot loaders un-named module.\n+        Class<?> c1 = Class.forName(\"SealedSuper\");\n+\n+        \/\/ Test loading a \"permitted\" subclass in the app classloader, which then resides\n+        \/\/ in the app loader's un-named module.\n+        \/\/ This should fail.\n+        try {\n+            Class<?> c2 = Class.forName(\"SealedSub\");\n+            throw new RuntimeException(\"Expected IncompatibleClassChangeError exception not thrown\");\n+        } catch (IncompatibleClassChangeError e) {\n+            if (!e.getMessage().equals(\"Failed same module check: subclass SealedSub is in module \\\"unnamed module\\\" \" +\n+                                       \"for loader 'app' and sealed class SealedSuper is in module \\\"unnamed module\\\" \" +\n+                                       \"for loader 'bootstrap'\")) {\n+                throw new RuntimeException(\"Wrong IncompatibleClassChangeError exception thrown: \" + e.getMessage());\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/SealedDifferentUnnamedModuleTest.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -23,3 +23,1 @@\n-package org.lib;\n-\n-public interface Service {\n+public final class SealedSub extends SealedSuper {\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/SealedSub.java","additions":1,"deletions":3,"binary":false,"changes":4,"previous_filename":"test\/langtools\/tools\/jnativescan\/cases\/modules\/org.lib\/org\/lib\/Service.java","status":"copied"},{"patch":"@@ -23,1 +23,0 @@\n-package org.lib;\n@@ -25,1 +24,1 @@\n-public interface Service {\n+public sealed class SealedSuper permits SealedSub {\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/SealedSuper.java","additions":1,"deletions":2,"binary":false,"changes":3,"previous_filename":"test\/langtools\/tools\/jnativescan\/cases\/modules\/org.lib\/org\/lib\/Service.java","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main SealedUnnamedModuleIntfTest\n+ * @run main\/othervm SealedUnnamedModuleIntfTest\n@@ -54,1 +54,2 @@\n-            if (!e.getMessage().contains(\"cannot implement sealed interface\")) {\n+            if (!e.getMessage().equals(\"Failed listed permitted subclass check: class Pkg.NotPermitted \" +\n+                                       \"is not a permitted subclass of Pkg.SealedInterface\")) {\n@@ -65,1 +66,3 @@\n-            if (!e.getMessage().contains(\"cannot implement sealed interface\")) {\n+            if (!e.getMessage().equals(\"Failed same run-time package check: non-public subclass otherPkg.WrongPackageNotPublic \" +\n+                                       \"is in package \\\"otherPkg\\\" with classloader 'app',and sealed class Pkg.SealedInterface \" +\n+                                       \"is in package \\\"Pkg\\\" with classloader 'app'\")) {\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/SealedUnnamedModuleIntfTest.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main SealedUnnamedModuleTest\n+ * @run main\/othervm SealedUnnamedModuleTest\n@@ -49,1 +49,2 @@\n-            if (!e.getMessage().contains(\"cannot inherit from sealed class\")) {\n+            if (!e.getMessage().equals(\"Failed listed permitted subclass check: class planets.Mars is \" +\n+                                       \"not a permitted subclass of planets.OuterPlanets\")) {\n@@ -60,1 +61,3 @@\n-            if (!e.getMessage().contains(\"cannot inherit from sealed class\")) {\n+            if (!e.getMessage().equals(\"Failed same run-time package check: non-public subclass asteroids.Pluto is \" +\n+                                       \"in package \\\"asteroids\\\" with classloader 'app',and sealed class \" +\n+                                       \"planets.OuterPlanets is in package \\\"planets\\\" with classloader 'app'\")) {\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/SealedUnnamedModuleTest.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"}]}