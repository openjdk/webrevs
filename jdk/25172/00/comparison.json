{"files":[{"patch":"@@ -2519,1 +2519,1 @@\n-\/\/ 2. 'CompressibleRegion' and 'IncompressibleRegion' are introduced to mark assembler scopes\n+\/\/ 2. 'CompressibleScope' and 'IncompressibleScope' are introduced to mark assembler scopes\n@@ -2523,1 +2523,1 @@\n-\/\/      CompressibleRegion cr(_masm);\n+\/\/      CompressibleScope scope(_masm);\n@@ -2526,1 +2526,1 @@\n-\/\/         IncompressibleRegion ir(_masm);\n+\/\/         IncompressibleScope scope(_masm);\n@@ -2529,1 +2529,1 @@\n-\/\/            CompressibleRegion cr(_masm);\n+\/\/            CompressibleScope scope(_masm);\n@@ -2538,1 +2538,1 @@\n-  bool _in_compressible_region;\n+  bool _in_compressible_scope;\n@@ -2540,2 +2540,2 @@\n-  bool in_compressible_region() const { return _in_compressible_region; }\n-  void set_in_compressible_region(bool b) { _in_compressible_region = b; }\n+  bool in_compressible_scope() const { return _in_compressible_scope; }\n+  void set_in_compressible_scope(bool b) { _in_compressible_scope = b; }\n@@ -2544,2 +2544,2 @@\n-  \/\/ an abstract compressible region\n-  class AbstractCompressibleRegion : public StackObj {\n+  \/\/ An abstract compressible scope\n+  class AbstractCompressibleScope : public StackObj {\n@@ -2548,1 +2548,1 @@\n-    bool _saved_in_compressible_region;\n+    bool _saved_in_compressible_scope;\n@@ -2550,1 +2550,1 @@\n-    AbstractCompressibleRegion(Assembler *_masm)\n+    AbstractCompressibleScope(Assembler *_masm)\n@@ -2552,1 +2552,1 @@\n-    , _saved_in_compressible_region(_masm->in_compressible_region()) {}\n+    , _saved_in_compressible_scope(_masm->in_compressible_scope()) {}\n@@ -2554,2 +2554,2 @@\n-  \/\/ a compressible region\n-  class CompressibleRegion : public AbstractCompressibleRegion {\n+  \/\/ A compressible scope\n+  class CompressibleScope : public AbstractCompressibleScope {\n@@ -2557,2 +2557,2 @@\n-    CompressibleRegion(Assembler *_masm) : AbstractCompressibleRegion(_masm) {\n-      _masm->set_in_compressible_region(true);\n+    CompressibleScope(Assembler *_masm) : AbstractCompressibleScope(_masm) {\n+      _masm->set_in_compressible_scope(true);\n@@ -2560,2 +2560,2 @@\n-    ~CompressibleRegion() {\n-      _masm->set_in_compressible_region(_saved_in_compressible_region);\n+    ~CompressibleScope() {\n+      _masm->set_in_compressible_scope(_saved_in_compressible_scope);\n@@ -2564,2 +2564,2 @@\n-  \/\/ an incompressible region\n-  class IncompressibleRegion : public AbstractCompressibleRegion {\n+  \/\/ An incompressible scope\n+  class IncompressibleScope : public AbstractCompressibleScope {\n@@ -2567,2 +2567,2 @@\n-    IncompressibleRegion(Assembler *_masm) : AbstractCompressibleRegion(_masm) {\n-      _masm->set_in_compressible_region(false);\n+    IncompressibleScope(Assembler *_masm) : AbstractCompressibleScope(_masm) {\n+      _masm->set_in_compressible_scope(false);\n@@ -2570,2 +2570,2 @@\n-    ~IncompressibleRegion() {\n-      _masm->set_in_compressible_region(_saved_in_compressible_region);\n+    ~IncompressibleScope() {\n+      _masm->set_in_compressible_scope(_saved_in_compressible_scope);\n@@ -2586,1 +2586,1 @@\n-    IncompressibleRegion ir(this);  \/\/ relocations\n+    IncompressibleScope scope(this); \/\/ relocations\n@@ -2592,1 +2592,1 @@\n-    IncompressibleRegion ir(this);  \/\/ relocations\n+    IncompressibleScope scope(this); \/\/ relocations\n@@ -3173,1 +3173,1 @@\n-    return UseRVC && in_compressible_region();\n+    return UseRVC && in_compressible_scope();\n@@ -3841,1 +3841,1 @@\n-  Assembler(CodeBuffer* code) : AbstractAssembler(code), _in_compressible_region(true) {}\n+  Assembler(CodeBuffer* code) : AbstractAssembler(code), _in_compressible_scope(true) {}\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":28,"deletions":28,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -352,1 +352,1 @@\n-  IncompressibleRegion ir(this);  \/\/ keep the nop as 4 bytes for patching.\n+  IncompressibleScope scope(this); \/\/ keep the nop as 4 bytes for patching.\n","filename":"src\/hotspot\/cpu\/riscv\/c1_MacroAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -229,1 +229,1 @@\n-  Assembler::IncompressibleRegion ir(masm);  \/\/ Fixed length: see entry_barrier_offset()\n+  Assembler::IncompressibleScope scope(masm); \/\/ Fixed length: see entry_barrier_offset()\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -259,1 +259,1 @@\n-  CompressibleRegion cr(this);\n+  CompressibleScope scope(this);\n@@ -420,1 +420,1 @@\n-    IncompressibleRegion ir(this);  \/\/ the label address will be patched back.\n+    IncompressibleScope scope(this); \/\/ the label address will be patched back.\n@@ -567,1 +567,1 @@\n-    IncompressibleRegion ir(this);  \/\/ Fixed length\n+    IncompressibleScope scope(this); \/\/ Fixed length\n@@ -607,1 +607,1 @@\n-    IncompressibleRegion ir(this);  \/\/ Fixed length\n+    IncompressibleScope scope(this); \/\/ Fixed length\n@@ -778,1 +778,1 @@\n-  IncompressibleRegion ir(this);  \/\/ Fixed length: see CompiledDirectCall::to_interp_stub_size().\n+  IncompressibleScope scope(this); \/\/ Fixed length: see CompiledDirectCall::to_interp_stub_size().\n@@ -910,1 +910,1 @@\n-  IncompressibleRegion ir(this);   \/\/ the label address may be patched back.\n+  IncompressibleScope scope(this); \/\/ the label address may be patched back.\n@@ -974,1 +974,1 @@\n-  IncompressibleRegion ir(this);\n+  IncompressibleScope scope(this);\n@@ -4980,1 +4980,1 @@\n-  IncompressibleRegion ir(this);  \/\/ relocations\n+  IncompressibleScope scope(this); \/\/ relocations\n@@ -4993,1 +4993,1 @@\n-  IncompressibleRegion ir(this);\n+  IncompressibleScope scope(this);\n@@ -5906,1 +5906,0 @@\n-  \/\/ align 8, so first sd n % 8 = mod, next loop sd 8 * n.\n@@ -5909,1 +5908,1 @@\n-  slli(t0, t0, 2); \/\/ sd_inst_nums * 4; t0 is cnt % 8, so t1 = t1 - sd_inst_nums * 4, 4 is sizeof(inst)\n+  slli(t0, t0, 2);\n@@ -5915,2 +5914,5 @@\n-  for (int i = -unroll; i < 0; i++) {\n-    sd(value, Address(base, i * 8));\n+  {\n+    IncompressibleScope scope(this); \/\/ Fixed length\n+    for (int i = -unroll; i < 0; i++) {\n+      sd(value, Address(base, i * 8));\n+    }\n@@ -6123,0 +6125,1 @@\n+\n@@ -6125,2 +6128,5 @@\n-  for (int i = -unroll; i < 0; i++) {\n-    sd(zr, Address(tmp, i * wordSize));\n+  {\n+    IncompressibleScope scope(this); \/\/ Fixed length\n+    for (int i = -unroll; i < 0; i++) {\n+      sd(zr, Address(tmp, i * wordSize));\n+    }\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":21,"deletions":15,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -752,1 +752,1 @@\n-    IncompressibleRegion ir(this);  \/* relocations *\/\n+    IncompressibleScope scope(this);  \/* relocations *\/\n@@ -973,1 +973,1 @@\n-    IncompressibleRegion ir(this);  \/* relocations *\/\n+    IncompressibleScope scope(this);  \/* relocations *\/\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -482,1 +482,1 @@\n-  Assembler::IncompressibleRegion ir(&a);  \/\/ Fixed length: see NativeGeneralJump::get_instruction_size()\n+  Assembler::IncompressibleScope scope(&a); \/\/ Fixed length: see NativeGeneralJump::get_instruction_size()\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1298,1 +1298,1 @@\n-    Assembler::CompressibleRegion cr(masm); \/\/ nops shall be 2-byte under RVC for alignment purposes.\n+    Assembler::CompressibleScope scope(masm); \/\/ nops shall be 2-byte under RVC for alignment purposes.\n@@ -1374,1 +1374,1 @@\n-    Assembler::IncompressibleRegion ir(masm);  \/\/ keep the nop as 4 bytes for patching.\n+    Assembler::IncompressibleScope scope(masm); \/\/ keep the nop as 4 bytes for patching.\n@@ -1757,1 +1757,1 @@\n-  Assembler::IncompressibleRegion ir(masm);  \/\/ Fixed length: see BoxLockNode::size()\n+  Assembler::IncompressibleScope scope(masm); \/\/ Fixed length: see BoxLockNode::size()\n@@ -2407,1 +2407,1 @@\n-    Assembler::IncompressibleRegion ir(masm);  \/\/ Fixed length: see ret_addr_offset\n+    Assembler::IncompressibleScope scope(masm); \/\/ Fixed length: see ret_addr_offset\n@@ -2454,1 +2454,1 @@\n-    Assembler::IncompressibleRegion ir(masm);  \/\/ Fixed length: see ret_addr_offset\n+    Assembler::IncompressibleScope scope(masm); \/\/ Fixed length: see ret_addr_offset\n@@ -2473,1 +2473,1 @@\n-    Assembler::IncompressibleRegion ir(masm);  \/\/ Fixed length: see ret_addr_offset\n+    Assembler::IncompressibleScope scope(masm); \/\/ Fixed length: see ret_addr_offset\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1328,1 +1328,1 @@\n-      Assembler::IncompressibleRegion ir(masm);  \/\/ keep the nop as 4 bytes for patching.\n+      Assembler::IncompressibleScope scope(masm); \/\/ keep the nop as 4 bytes for patching.\n@@ -1471,1 +1471,1 @@\n-    Assembler::IncompressibleRegion ir(masm);  \/\/ keep the nop as 4 bytes for patching.\n+    Assembler::IncompressibleScope scope(masm); \/\/ keep the nop as 4 bytes for patching.\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}