{"files":[{"patch":"@@ -83,0 +83,1 @@\n+import sun.nio.fs.AbstractFileSystemProvider;\n@@ -2612,1 +2613,5 @@\n-        return isAccessible(path, AccessMode.READ);\n+        FileSystemProvider provider = provider(path);\n+        if (provider instanceof AbstractFileSystemProvider afsp)\n+            return afsp.isReadable(path);\n+        else\n+            return isAccessible(path, AccessMode.READ);\n@@ -2643,1 +2648,5 @@\n-        return isAccessible(path, AccessMode.WRITE);\n+        FileSystemProvider provider = provider(path);\n+        if (provider instanceof AbstractFileSystemProvider afsp)\n+            return afsp.isWritable(path);\n+        else\n+            return isAccessible(path, AccessMode.WRITE);\n@@ -2678,1 +2687,5 @@\n-        return isAccessible(path, AccessMode.EXECUTE);\n+        FileSystemProvider provider = provider(path);\n+        if (provider instanceof AbstractFileSystemProvider afsp)\n+            return afsp.isExecutable(path);\n+        else\n+            return isAccessible(path, AccessMode.EXECUTE);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/Files.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import java.nio.file.Path;\n+import java.nio.file.AccessMode;\n@@ -30,0 +30,1 @@\n+import java.nio.file.Path;\n@@ -118,0 +119,36 @@\n+\n+    \/**\n+     * Tests whether a file is readable.\n+     *\/\n+    public boolean isReadable(Path path) {\n+        try {\n+            checkAccess(path, AccessMode.READ);\n+        } catch (IOException e) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    \/**\n+     * Tests whether a file is writable.\n+     *\/\n+    public boolean isWritable(Path path) {\n+        try {\n+            checkAccess(path, AccessMode.WRITE);\n+        } catch (IOException e) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    \/**\n+     * Tests whether a file is executable.\n+     *\/\n+    public boolean isExecutable(Path path) {\n+        try {\n+            checkAccess(path, AccessMode.EXECUTE);\n+        } catch (IOException e) {\n+            return false;\n+        }\n+        return true;\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/fs\/AbstractFileSystemProvider.java","additions":39,"deletions":2,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -896,1 +896,3 @@\n-                access(source, W_OK);\n+                int errno = access(source, W_OK);\n+                if (errno != 0)\n+                    new UnixException(errno).rethrowAsIOException(source);\n@@ -1027,7 +1029,5 @@\n-            try {\n-                \/\/ the access(2) system call always follows links so it\n-                \/\/ is suppressed if the source is an unfollowed link\n-                access(source, R_OK);\n-            } catch (UnixException exc) {\n-                exc.rethrowAsIOException(source);\n-            }\n+            \/\/ the access(2) system call always follows links so it\n+            \/\/ is suppressed if the source is an unfollowed link\n+            int errno = access(source, R_OK);\n+            if (errno != 0)\n+                new UnixException(errno).rethrowAsIOException(source);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystem.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -352,4 +352,27 @@\n-        try {\n-            access(file, mode);\n-        } catch (UnixException exc) {\n-            exc.rethrowAsIOException(file);\n+        int errno = access(file, mode);\n+        if (errno != 0)\n+            new UnixException(errno).rethrowAsIOException(file);\n+    }\n+\n+    @Override\n+    public boolean isReadable(Path path) {\n+        UnixPath file = UnixPath.toUnixPath(path);\n+        file.checkRead();\n+        return access(file, R_OK) == 0 ? true : false;\n+    }\n+\n+    @Override\n+    public boolean isWritable(Path path) {\n+        UnixPath file = UnixPath.toUnixPath(path);\n+        file.checkWrite();\n+        return access(file, W_OK) == 0 ? true : false;\n+    }\n+\n+    @Override\n+    public boolean isExecutable(Path path) {\n+        UnixPath file = UnixPath.toUnixPath(path);\n+        @SuppressWarnings(\"removal\")\n+        SecurityManager sm = System.getSecurityManager();\n+        if (sm != null) {\n+            \/\/ not cached\n+            sm.checkExec(file.getPathForPermissionCheck());\n@@ -357,0 +380,1 @@\n+        return access(file, X_OK) == 0 ? true : false;\n@@ -564,1 +588,1 @@\n-            return UnixNativeDispatcher.exists(file);\n+            return access(file, F_OK) == 0;\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystemProvider.java","additions":29,"deletions":5,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -600,1 +600,1 @@\n-    static void access(UnixPath path, int amode) throws UnixException {\n+    static int access(UnixPath path, int amode) {\n@@ -604,1 +604,1 @@\n-                access0(buffer.address(), amode);\n+                return access0(buffer.address(), amode);\n@@ -610,18 +610,1 @@\n-    private static native void access0(long pathAddress, int amode) throws UnixException;\n-\n-    \/**\n-     * access(constant char* path, F_OK)\n-     *\n-     * @return true if the file exists, false otherwise\n-     *\/\n-    static boolean exists(UnixPath path) {\n-        try (NativeBuffer buffer = copyToNativeBuffer(path)) {\n-            long comp = Blocker.begin();\n-            try {\n-                return exists0(buffer.address());\n-            } finally {\n-                Blocker.end(comp);\n-            }\n-        }\n-    }\n-    private static native boolean exists0(long pathAddress);\n+    private static native int access0(long pathAddress, int amode);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixNativeDispatcher.java","additions":4,"deletions":21,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1193,1 +1193,1 @@\n-JNIEXPORT void JNICALL\n+JNIEXPORT jint JNICALL\n@@ -1201,4 +1201,0 @@\n-    if (err == -1) {\n-        throwUnixException(env, errno);\n-    }\n-}\n@@ -1206,6 +1202,1 @@\n-JNIEXPORT jboolean JNICALL\n-Java_sun_nio_fs_UnixNativeDispatcher_exists0(JNIEnv* env, jclass this, jlong pathAddress) {\n-    int err;\n-    const char* path = (const char*)jlong_to_ptr(pathAddress);\n-    RESTARTABLE(access(path, F_OK), err);\n-    return (err == 0) ? JNI_TRUE : JNI_FALSE;\n+    return (err == -1) ? errno : 0;\n","filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixNativeDispatcher.c","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"}]}