{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: Mar 2023\n@@ -208,1 +208,1 @@\n-            value = SecuritySupport.readJAXPProperty(systemProperty);\n+            value = SecuritySupport.readConfig(systemProperty);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/utils\/FeaturePropertyBase.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: Mar 2023\n@@ -151,1 +151,1 @@\n-            return attributes.get(pName);\n+            return fSecurityManager.getLimitAsString(pName);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/DocumentBuilderFactoryImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -565,1 +565,1 @@\n-            value = SecuritySupport.readJAXPProperty(sysPropertyName);\n+            value = SecuritySupport.readConfig(sysPropertyName);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/utils\/XMLSecurityManager.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -234,1 +234,1 @@\n-            value = SecuritySupport.readJAXPProperty(systemProperty);\n+            value = SecuritySupport.readConfig(systemProperty);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/utils\/XMLSecurityPropertyManager.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,51 @@\n- * <p>Utility class to contain basic XML values as constants.\n+ * Defines constants for XML Processing APIs.\n+ *\n+ * <h2 id=\"ScopeAndOrder\">Scope and Order<\/h2>\n+ * Some of the properties defined in this class, for example, the external access\n+ * properties (ACCESS_EXTERNAL_*) and USE_CATALOG, support multiple ways to set\n+ * their values. These properties follow the\n+ * <a href=\"{@docRoot}\/java.xml\/module-summary.html#PSO\">Property Scope and Order<\/a>\n+ * defined in the module summary for the effectiveness of their scope and order\n+ * of preference.\n+ *\n+ * <h2 id=\"EAP\">External Access Properties<\/h2>\n+ * The format of the value for the external access properties\n+ * {@link #ACCESS_EXTERNAL_DTD}, {@link #ACCESS_EXTERNAL_SCHEMA}\n+ * and {@link #ACCESS_EXTERNAL_STYLESHEET} is defined as follows.\n+ *\n+ * <h3 id=\"EAPValue\">Value:<\/h3> a list of protocols separated by comma. A protocol is the scheme portion of a\n+ * {@link java.net.URI}, or in the case of the JAR protocol, \"jar\" plus the scheme portion\n+ * separated by colon.\n+ * A scheme is defined as:\n+ *\n+ * <blockquote>\n+ * scheme = alpha *( alpha | digit | \"+\" | \"-\" | \".\" )<br>\n+ * where alpha = a-z and A-Z.<br><br>\n+ *\n+ * And the JAR protocol:<br>\n+ *\n+ * jar[:scheme]<br><br>\n+ *\n+ * Protocols including the keyword \"jar\" are case-insensitive. Any whitespaces as defined by\n+ * {@link java.lang.Character#isSpaceChar } in the value will be ignored.\n+ * Examples of protocols are file, http, jar:file.\n+ *\n+ * <\/blockquote>\n+ *\n+ * <p>\n+ * <b>Default value:<\/b> The default value is implementation specific and therefore not specified.\n+ * The following options are provided for consideration:\n+ * <blockquote>\n+ * <UL>\n+ *     <LI>an empty string to deny all access to external references;<\/LI>\n+ *     <LI>a specific protocol, such as file, to give permission to only the protocol;<\/LI>\n+ *     <LI>the keyword \"all\" to grant  permission to all protocols.<\/LI>\n+ * <\/UL><br>\n+ *      When FEATURE_SECURE_PROCESSING is enabled,  it is recommended that implementations\n+ *      restrict external connections by default, though this may cause problems for applications\n+ *      that process XML\/XSD\/XSL with external references.\n+ * <\/blockquote>\n+ *\n+ * <p>\n+ * <b>Granting all access:<\/b>  the keyword \"all\" grants permission to all protocols.\n+ *\n@@ -201,35 +251,1 @@\n-         * <b>Value: <\/b> a list of protocols separated by comma. A protocol is the scheme portion of a\n-         * {@link java.net.URI}, or in the case of the JAR protocol, \"jar\" plus the scheme portion\n-         * separated by colon.\n-         * A scheme is defined as:\n-         *\n-         * <blockquote>\n-         * scheme = alpha *( alpha | digit | \"+\" | \"-\" | \".\" )<br>\n-         * where alpha = a-z and A-Z.<br><br>\n-         *\n-         * And the JAR protocol:<br>\n-         *\n-         * jar[:scheme]<br><br>\n-         *\n-         * Protocols including the keyword \"jar\" are case-insensitive. Any whitespaces as defined by\n-         * {@link java.lang.Character#isSpaceChar } in the value will be ignored.\n-         * Examples of protocols are file, http, jar:file.\n-         *\n-         * <\/blockquote>\n-         *\n-         *<p>\n-         * <b>Default value:<\/b> The default value is implementation specific and therefore not specified.\n-         * The following options are provided for consideration:\n-         * <blockquote>\n-         * <UL>\n-         *     <LI>an empty string to deny all access to external references;<\/LI>\n-         *     <LI>a specific protocol, such as file, to give permission to only the protocol;<\/LI>\n-         *     <LI>the keyword \"all\" to grant  permission to all protocols.<\/LI>\n-         * <\/UL><br>\n-         *      When FEATURE_SECURE_PROCESSING is enabled,  it is recommended that implementations\n-         *      restrict external connections by default, though this may cause problems for applications\n-         *      that process XML\/XSD\/XSL with external references.\n-         * <\/blockquote>\n-         *\n-         * <p>\n-         * <b>Granting all access:<\/b>  the keyword \"all\" grants permission to all protocols.\n+         * <b>Value: <\/b> as defined in <a href=\"#EAPValue\">the class description<\/a>.\n@@ -238,3 +254,1 @@\n-         * <b>System Property:<\/b> The value of this property can be set or overridden by\n-         * system property {@code javax.xml.accessExternalDTD}.\n-         *\n+         * <b>System Property:<\/b> {@code javax.xml.accessExternalDTD}.\n@@ -243,6 +257,3 @@\n-         * <b>jaxp.properties:<\/b> This configuration file is in standard\n-         * {@link java.util.Properties} format and typically located in the {@code conf}\n-         * directory of the Java installation. If the file exists and the system\n-         * property is specified, its value will be used to override the default\n-         * of the property.\n-         *\n+         * <b>Configuration File:<\/b>\n+         * Yes. The property can be set in the\n+         * <a href=\"{@docRoot}\/java.xml\/module-summary.html#ConfigurationFile\">configuration file<\/a>.\n@@ -265,35 +276,1 @@\n-         * <b>Value:<\/b> a list of protocols separated by comma. A protocol is the scheme portion of a\n-         * {@link java.net.URI}, or in the case of the JAR protocol, \"jar\" plus the scheme portion\n-         * separated by colon.\n-         * A scheme is defined as:\n-         *\n-         * <blockquote>\n-         * scheme = alpha *( alpha | digit | \"+\" | \"-\" | \".\" )<br>\n-         * where alpha = a-z and A-Z.<br><br>\n-         *\n-         * And the JAR protocol:<br>\n-         *\n-         * jar[:scheme]<br><br>\n-         *\n-         * Protocols including the keyword \"jar\" are case-insensitive. Any whitespaces as defined by\n-         * {@link java.lang.Character#isSpaceChar } in the value will be ignored.\n-         * Examples of protocols are file, http, jar:file.\n-         *\n-         * <\/blockquote>\n-         *\n-         * <p>\n-         * <b>Default value:<\/b> The default value is implementation specific and therefore not specified.\n-         * The following options are provided for consideration:\n-         * <blockquote>\n-         * <UL>\n-         *     <LI>an empty string to deny all access to external references;<\/LI>\n-         *     <LI>a specific protocol, such as file, to give permission to only the protocol;<\/LI>\n-         *     <LI>the keyword \"all\" to grant  permission to all protocols.<\/LI>\n-         * <\/UL><br>\n-         *      When FEATURE_SECURE_PROCESSING is enabled,  it is recommended that implementations\n-         *      restrict external connections by default, though this may cause problems for applications\n-         *      that process XML\/XSD\/XSL with external references.\n-         * <\/blockquote>\n-         *\n-         * <p>\n-         * <b>Granting all access:<\/b>  the keyword \"all\" grants permission to all protocols.\n+         * <b>Value: <\/b> as defined in <a href=\"#EAPValue\">the class description<\/a>.\n@@ -302,2 +279,1 @@\n-         * <b>System Property:<\/b> The value of this property can be set or overridden by\n-         * system property {@code javax.xml.accessExternalSchema}\n+         * <b>System Property:<\/b> {@code javax.xml.accessExternalSchema}\n@@ -306,6 +282,5 @@\n-         * <b>jaxp.properties:<\/b> This configuration file is in standard\n-         * {@link java.util.Properties} format and typically located in the {@code conf}\n-         * directory of the Java installation. If the file exists and the system\n-         * property is specified, its value will be used to override the default\n-         * of the property.\n-         *\n+         * <b>Configuration File:<\/b>\n+          * <b>Configuration File:<\/b>\n+         * Yes. The property can be set in the\n+         * <a href=\"{@docRoot}\/java.xml\/module-summary.html#ConfigurationFile\">configuration file<\/a>.\n+        *\n@@ -329,35 +304,1 @@\n-         * <b>Value:<\/b> a list of protocols separated by comma. A protocol is the scheme portion of a\n-         * {@link java.net.URI}, or in the case of the JAR protocol, \"jar\" plus the scheme portion\n-         * separated by colon.\n-         * A scheme is defined as:\n-         *\n-         * <blockquote>\n-         * scheme = alpha *( alpha | digit | \"+\" | \"-\" | \".\" )<br>\n-         * where alpha = a-z and A-Z.<br><br>\n-         *\n-         * And the JAR protocol:<br>\n-         *\n-         * jar[:scheme]<br><br>\n-         *\n-         * Protocols including the keyword \"jar\" are case-insensitive. Any whitespaces as defined by\n-         * {@link java.lang.Character#isSpaceChar } in the value will be ignored.\n-         * Examples of protocols are file, http, jar:file.\n-         *\n-         * <\/blockquote>\n-         *\n-         * <p>\n-         * <b>Default value:<\/b> The default value is implementation specific and therefore not specified.\n-         * The following options are provided for consideration:\n-         * <blockquote>\n-         * <UL>\n-         *     <LI>an empty string to deny all access to external references;<\/LI>\n-         *     <LI>a specific protocol, such as file, to give permission to only the protocol;<\/LI>\n-         *     <LI>the keyword \"all\" to grant  permission to all protocols.<\/LI>\n-         * <\/UL><br>\n-         *      When FEATURE_SECURE_PROCESSING is enabled,  it is recommended that implementations\n-         *      restrict external connections by default, though this may cause problems for applications\n-         *      that process XML\/XSD\/XSL with external references.\n-         * <\/blockquote>\n-         *\n-         * <p>\n-         * <b>Granting all access:<\/b>  the keyword \"all\" grants permission to all protocols.\n+         * <b>Value: <\/b> as defined in <a href=\"#EAPValue\">the class description<\/a>.\n@@ -366,2 +307,1 @@\n-         * <b>System Property:<\/b> The value of this property can be set or overridden by\n-         * system property {@code javax.xml.accessExternalStylesheet}\n+         * <b>System Property:<\/b> {@code javax.xml.accessExternalStylesheet}\n@@ -370,5 +310,3 @@\n-         * <b>jaxp.properties:<\/b> This configuration file is in standard\n-         * {@link java.util.Properties} format and typically located in the {@code conf}\n-         * directory of the Java installation. If the file exists and the system\n-         * property is specified, its value will be used to override the default\n-         * of the property.\n+         * <b>Configuration File:<\/b>\n+         * Yes. The property can be set in the\n+         * <a href=\"{@docRoot}\/java.xml\/module-summary.html#ConfigurationFile\">configuration file<\/a>.\n@@ -387,1 +325,1 @@\n-         * jaxp.properties by using the {@code javax.xml.catalog.files} property\n+         * configuration file by using the {@code javax.xml.catalog.files} property\n@@ -404,2 +342,1 @@\n-         * <b>System Property:<\/b> The value of this property can be set or overridden by\n-         * system property {@code javax.xml.useCatalog}\n+         * <b>System Property:<\/b> {@code javax.xml.useCatalog}\n@@ -408,5 +345,3 @@\n-         * <b>jaxp.properties:<\/b> This configuration file is in standard\n-         * {@link java.util.Properties} format and typically located in the {@code conf}\n-         * directory of the Java installation. If the file exists and the system\n-         * property is specified, its value will be used to override the default\n-         * value of the property.\n+         * <b>Configuration File:<\/b>\n+         * Yes. The property can be set in the\n+         * <a href=\"{@docRoot}\/java.xml\/module-summary.html#ConfigurationFile\">configuration file<\/a>.\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/XMLConstants.java","additions":74,"deletions":139,"binary":false,"changes":213,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,0 @@\n-import java.net.MalformedURLException;\n-import java.net.URISyntaxException;\n@@ -45,2 +43,2 @@\n- * <th scope=\"col\" rowspan=\"2\">jaxp.properties [1]<\/th>\n- * <th scope=\"col\" colspan=\"2\" style=\"text-align:center\">Value [2]<\/th>\n+ * <th scope=\"col\" rowspan=\"2\"><a href=\"{@docRoot}\/java.xml\/module-summary.html#ConfigurationFile\">configuration file<\/a> [2]<\/th>\n+ * <th scope=\"col\" colspan=\"2\" style=\"text-align:center\">Value [3]<\/th>\n@@ -64,1 +62,1 @@\n- * <td>javax.xml.catalog.files<\/td>\n+ * <td>Yes<\/td>\n@@ -76,1 +74,1 @@\n- * identifiers. The default value is public [3].<\/td>\n+ * identifiers. The default value is public [4].<\/td>\n@@ -79,1 +77,1 @@\n- * <td rowspan=\"2\">N\/A<\/td>\n+ * <td rowspan=\"2\">No<\/td>\n@@ -98,2 +96,1 @@\n- * <td rowspan=\"2\">javax.xml.catalog.defer [4]<\/td>\n- * <td rowspan=\"2\">javax.xml.catalog.defer<\/td>\n+ * <td rowspan=\"2\">javax.xml.catalog.defer [5]<\/td>\n@@ -101,0 +98,1 @@\n+ * <td rowspan=\"2\">Yes<\/td>\n@@ -110,1 +108,1 @@\n- * Loads all catalogs[5]. <\/td>\n+ * Loads all catalogs[6]. <\/td>\n@@ -119,1 +117,1 @@\n- * <td rowspan=\"3\">javax.xml.catalog.resolve<\/td>\n+ * <td rowspan=\"3\">Yes<\/td>\n@@ -143,1 +141,0 @@\n- *\n@@ -145,1 +142,4 @@\n- * <b>[2]<\/b> The value shall be exactly as listed in this table, case-sensitive.\n+ * <b>[2]<\/b> The value \"yes\" indicates that the system property can be placed in\n+ * the configuration file, \"no\" otherwise.\n+ * <p>\n+ * <b>[3]<\/b> The value shall be exactly as listed in this table, case-sensitive.\n@@ -148,1 +148,1 @@\n- * <b>[3]<\/b> The Catalog specification defined complex rules on\n+ * <b>[4]<\/b> The Catalog specification defined complex rules on\n@@ -157,1 +157,1 @@\n- * <b>[4]<\/b> Although non-standard attributes in the OASIS Catalog specification,\n+ * <b>[5]<\/b> Although non-standard attributes in the OASIS Catalog specification,\n@@ -163,1 +163,1 @@\n- * <b>[5]<\/b> If the intention is to share an entire catalog store, it may be desirable to\n+ * <b>[6]<\/b> If the intention is to share an entire catalog store, it may be desirable to\n@@ -168,5 +168,8 @@\n- * Features and properties can be set through the catalog file, the Catalog API,\n- * system properties, and {@code jaxp.properties}, with a preference in the same order.\n- * <p>\n- * Properties that are specified as attributes in the catalog file for the\n- * catalog and group entries shall take preference over any of the other settings.\n+ * The Catalog Features follow the\n+ * <a href=\"{@docRoot}\/java.xml\/module-summary.html#PSO\">Property Scope and Order<\/a>\n+ * as described in the module summary with regards to settings with the configuration\n+ * file, system and API properties. In addition to the general procedure,\n+ * the Catalog Features are further supported in the catalog file itself where\n+ * they can be specified as attributes for the catalog and group entries. When\n+ * the attributes are specified, they shall take preference over any of\n+ * the other settings.\n@@ -176,7 +179,0 @@\n- * <p>\n- * Properties set through the Catalog API override those that may have been set\n- * by system properties and\/or in {@code jaxp.properties}. In case of multiple\n- * interfaces, the latest in a procedure shall take preference. For\n- * {@link Feature#FILES}, this means that the URI(s) specified through the methods\n- * of the {@link CatalogManager} will override any that may have been entered\n- * through the {@link Builder}.\n@@ -185,9 +181,0 @@\n- * System properties when set shall override those in {@code jaxp.properties}.\n- * <p>\n- * The {@code jaxp.properties} file is typically in the conf directory of the Java\n- * installation. The file is read only once by the JAXP implementation and\n- * its values are then cached for future use. If the file does not exist\n- * when the first attempt is made to read from it, no further attempts are\n- * made to check for its existence. It is not possible to change the value\n- * of any properties in {@code jaxp.properties} after it has been read.\n- * <p>\n@@ -492,1 +479,1 @@\n-     * jaxp.properties file, jaxp system properties, and jaxp api properties\n+     * configuration file, jaxp system properties, and jaxp api properties\n@@ -625,1 +612,1 @@\n-            value = SecuritySupport.readJAXPProperty(sysPropertyName);\n+            value = SecuritySupport.readConfig(sysPropertyName);\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/CatalogFeatures.java","additions":27,"deletions":40,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n- * or system property or the jaxp.properties file to take advantage of the feature.\n+ * or system property or the configuration file to take advantage of the feature.\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/package-info.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.io.File;\n@@ -32,1 +31,0 @@\n-import java.util.Properties;\n@@ -54,11 +52,0 @@\n-    \/**\n-     * Cache for properties in java.home\/conf\/jaxp.properties\n-     *\/\n-    private final static Properties cacheProps = new Properties();\n-\n-    \/**\n-     * Flag indicating if properties from java.home\/conf\/jaxp.properties\n-     * have been cached.\n-     *\/\n-    private static volatile boolean firstTime = true;\n-\n@@ -236,25 +223,4 @@\n-        \/\/ try to read from $java.home\/conf\/jaxp.properties\n-        try {\n-            if (firstTime) {\n-                synchronized (cacheProps) {\n-                    if (firstTime) {\n-                        String configFile = SecuritySupport.getSystemProperty(\"java.home\") + File.separator +\n-                            \"conf\" + File.separator + \"jaxp.properties\";\n-                        File f = new File(configFile);\n-                        firstTime = false;\n-                        if (SecuritySupport.doesFileExist(f)) {\n-                            dPrint(()->\"Read properties file \"+f);\n-                            cacheProps.load(SecuritySupport.getFileInputStream(f));\n-                        }\n-                    }\n-                }\n-            }\n-            final String factoryClassName = cacheProps.getProperty(factoryId);\n-\n-            if (factoryClassName != null) {\n-                dPrint(()->\"found in ${java.home}\/conf\/jaxp.properties, value=\" + factoryClassName);\n-                return newInstance(type, factoryClassName, null, true);\n-            }\n-        }\n-        catch (Exception ex) {\n-            if (debug) ex.printStackTrace();\n+        \/\/ try to read from the configuration file\n+        String factoryClassName = SecuritySupport.readConfig(factoryId);\n+        if (factoryClassName != null) {\n+            return newInstance(type, factoryClassName, null, true);\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/datatype\/FactoryFinder.java","additions":5,"deletions":39,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.io.File;\n@@ -32,1 +31,0 @@\n-import java.util.Properties;\n@@ -53,11 +51,0 @@\n-    \/**\n-     * Cache for properties in java.home\/conf\/jaxp.properties\n-     *\/\n-    private static final Properties cacheProps = new Properties();\n-\n-    \/**\n-     * Flag indicating if properties from java.home\/conf\/jaxp.properties\n-     * have been cached.\n-     *\/\n-    static volatile boolean firstTime = true;\n-\n@@ -234,25 +221,4 @@\n-        \/\/ try to read from $java.home\/conf\/jaxp.properties\n-        try {\n-            if (firstTime) {\n-                synchronized (cacheProps) {\n-                    if (firstTime) {\n-                        String configFile = SecuritySupport.getSystemProperty(\"java.home\") + File.separator +\n-                            \"conf\" + File.separator + \"jaxp.properties\";\n-                        File f = new File(configFile);\n-                        firstTime = false;\n-                        if (SecuritySupport.doesFileExist(f)) {\n-                            dPrint(()->\"Read properties file \"+f);\n-                            cacheProps.load(SecuritySupport.getFileInputStream(f));\n-                        }\n-                    }\n-                }\n-            }\n-            final String factoryClassName = cacheProps.getProperty(factoryId);\n-\n-            if (factoryClassName != null) {\n-                dPrint(()->\"found in ${java.home}\/conf\/jaxp.properties, value=\" + factoryClassName);\n-                return newInstance(type, factoryClassName, null, true);\n-            }\n-        }\n-        catch (Exception ex) {\n-            if (debug) ex.printStackTrace();\n+        \/\/ try to read from the configuration file\n+        String factoryClassName = SecuritySupport.readConfig(factoryId);\n+        if (factoryClassName != null) {\n+            return newInstance(type, factoryClassName, null, true);\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/parsers\/FactoryFinder.java","additions":5,"deletions":39,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.io.File;\n@@ -32,1 +31,0 @@\n-import java.util.Properties;\n@@ -55,11 +53,0 @@\n-    \/**\n-     * Cache for properties in java.home\/conf\/jaxp.properties\n-     *\/\n-    final private static Properties cacheProps = new Properties();\n-\n-    \/**\n-     * Flag indicating if properties from java.home\/conf\/jaxp.properties\n-     * have been cached.\n-     *\/\n-    private static volatile boolean firstTime = true;\n-\n@@ -269,37 +256,4 @@\n-        \/\/ Try read $java.home\/conf\/stax.properties followed by\n-        \/\/ $java.home\/conf\/jaxp.properties if former not present\n-        String configFile = null;\n-        try {\n-            if (firstTime) {\n-                synchronized (cacheProps) {\n-                    if (firstTime) {\n-                        configFile = SecuritySupport.getSystemProperty(\"java.home\") + File.separator +\n-                            \"conf\" + File.separator + \"stax.properties\";\n-                        final File fStax = new File(configFile);\n-                        firstTime = false;\n-                        if (SecuritySupport.doesFileExist(fStax)) {\n-                            dPrint(()->\"Read properties file \"+fStax);\n-                            cacheProps.load(SecuritySupport.getFileInputStream(fStax));\n-                        }\n-                        else {\n-                            configFile = SecuritySupport.getSystemProperty(\"java.home\") + File.separator +\n-                                \"conf\" + File.separator + \"jaxp.properties\";\n-                            final File fJaxp = new File(configFile);\n-                            if (SecuritySupport.doesFileExist(fJaxp)) {\n-                                dPrint(()->\"Read properties file \"+fJaxp);\n-                                cacheProps.load(SecuritySupport.getFileInputStream(fJaxp));\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-            final String factoryClassName = cacheProps.getProperty(factoryId);\n-\n-            if (factoryClassName != null) {\n-                final String foundIn = configFile;\n-                dPrint(()->\"found in \" + foundIn + \" value=\" + factoryClassName);\n-                return newInstance(type, factoryClassName, cl, true);\n-            }\n-        }\n-        catch (Exception ex) {\n-            if (debug) ex.printStackTrace();\n+        \/\/ try to read from the configuration file\n+        String factoryClassName = SecuritySupport.readConfig(factoryId);\n+        if (factoryClassName != null) {\n+            return newInstance(type, factoryClassName, cl, true);\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/stream\/FactoryFinder.java","additions":5,"deletions":51,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,1 +85,1 @@\n-   * <a href=\"..\/..\/..\/module-summary.html#LookupMechanism\">JAXP Lookup Mechanism<\/a>\n+   * <a href=\"{@docRoot}\/java.xml\/module-summary.html#LookupMechanism\">JAXP Lookup Mechanism<\/a>\n@@ -137,17 +137,4 @@\n-   *   Use the configuration file \"stax.properties\". The file is in standard\n-   *   {@link java.util.Properties} format and typically located in the\n-   *   conf directory of the Java installation. It contains the fully qualified\n-   *   name of the implementation class with the key being the system property\n-   *   defined above.\n-   *\n-   *   <p>\n-   *   The stax.properties file is read only once by the implementation\n-   *   and its values are then cached for future use.  If the file does not exist\n-   *   when the first attempt is made to read from it, no further attempts are\n-   *   made to check for its existence.  It is not possible to change the value\n-   *   of any property in stax.properties after it has been read for the first time.\n-   *\n-   *   <p>\n-   *   Use the jaxp configuration file \"jaxp.properties\". The file is in the same\n-   *   format as stax.properties and will only be read if stax.properties does\n-   *   not exist.\n+   *   Use the value of the property {@code factoryId} set in the\n+   * <a href=\"{@docRoot}\/java.xml\/module-summary.html#ConfigurationFile\">configuration file<\/a>,\n+   * jaxp.properties by default. If the file exists and the property {@code factoryId}\n+   * is specified in the file, its value will be used as the implementation class.\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/stream\/XMLEventFactory.java","additions":6,"deletions":19,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-   * <a href=\"..\/..\/..\/module-summary.html#LookupMechanism\">JAXP Lookup Mechanism<\/a>\n+   * <a href=\"{@docRoot}\/java.xml\/module-summary.html#LookupMechanism\">JAXP Lookup Mechanism<\/a>\n@@ -224,17 +224,4 @@\n-   *   Use the configuration file \"stax.properties\". The file is in standard\n-   *   {@link java.util.Properties} format and typically located in the\n-   *   {@code conf} directory of the Java installation. It contains the fully qualified\n-   *   name of the implementation class with the key being the system property\n-   *   defined above.\n-   *\n-   *   <p>\n-   *   The stax.properties file is read only once by the implementation\n-   *   and its values are then cached for future use.  If the file does not exist\n-   *   when the first attempt is made to read from it, no further attempts are\n-   *   made to check for its existence.  It is not possible to change the value\n-   *   of any property in stax.properties after it has been read for the first time.\n-   *\n-   *   <p>\n-   *   Use the jaxp configuration file \"jaxp.properties\". The file is in the same\n-   *   format as stax.properties and will only be read if stax.properties does\n-   *   not exist.\n+   *   Use the value of the property {@code factoryId} set in the\n+   * <a href=\"{@docRoot}\/java.xml\/module-summary.html#ConfigurationFile\">configuration file<\/a>,\n+   * jaxp.properties by default. If the file exists and the property {@code factoryId}\n+   * is specified in the file, its value will be used as the implementation class.\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/stream\/XMLInputFactory.java","additions":5,"deletions":18,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-   * <a href=\"..\/..\/..\/module-summary.html#LookupMechanism\">JAXP Lookup Mechanism<\/a>\n+   * <a href=\"{@docRoot}\/java.xml\/module-summary.html#LookupMechanism\">JAXP Lookup Mechanism<\/a>\n@@ -199,17 +199,4 @@\n-   *   Use the configuration file \"stax.properties\". The file is in standard\n-   *   {@link java.util.Properties} format and typically located in the\n-   *   {@code conf} directory of the Java installation. It contains the fully qualified\n-   *   name of the implementation class with the key being the system property\n-   *   defined above.\n-   *\n-   *   <p>\n-   *   The stax.properties file is read only once by the implementation\n-   *   and its values are then cached for future use.  If the file does not exist\n-   *   when the first attempt is made to read from it, no further attempts are\n-   *   made to check for its existence.  It is not possible to change the value\n-   *   of any property in stax.properties after it has been read for the first time.\n-   *\n-   *   <p>\n-   *   Use the jaxp configuration file \"jaxp.properties\". The file is in the same\n-   *   format as stax.properties and will only be read if stax.properties does\n-   *   not exist.\n+   *   Use the value of the property {@code factoryId} set in the\n+   * <a href=\"{@docRoot}\/java.xml\/module-summary.html#ConfigurationFile\">configuration file<\/a>,\n+   * jaxp.properties by default. If the file exists and the property {@code factoryId}\n+   * is specified in the file, its value will be used as the implementation class.\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/stream\/XMLOutputFactory.java","additions":5,"deletions":18,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,0 @@\n-import java.io.File;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n@@ -34,1 +31,0 @@\n-import java.util.Properties;\n@@ -56,11 +52,0 @@\n-    \/**\n-     * Cache for properties in java.home\/conf\/jaxp.properties\n-     *\/\n-    private final static Properties cacheProps = new Properties();\n-\n-    \/**\n-     * Flag indicating if properties from java.home\/conf\/jaxp.properties\n-     * have been cached.\n-     *\/\n-    static volatile boolean firstTime = true;\n-\n@@ -220,25 +205,4 @@\n-        \/\/ try to read from $java.home\/conf\/jaxp.properties\n-        try {\n-            if (firstTime) {\n-                synchronized (cacheProps) {\n-                    if (firstTime) {\n-                        String configFile = SecuritySupport.getSystemProperty(\"java.home\") + File.separator +\n-                            \"conf\" + File.separator + \"jaxp.properties\";\n-                        File f = new File(configFile);\n-                        firstTime = false;\n-                        if (SecuritySupport.doesFileExist(f)) {\n-                            dPrint(()->\"Read properties file \"+f);\n-                            cacheProps.load(SecuritySupport.getFileInputStream(f));\n-                        }\n-                    }\n-                }\n-            }\n-            final String factoryClassName = cacheProps.getProperty(factoryId);\n-\n-            if (factoryClassName != null) {\n-                dPrint(()->\"found in ${java.home}\/conf\/jaxp.properties, value=\" + factoryClassName);\n-                return newInstance(type, factoryClassName, null, true);\n-            }\n-        }\n-        catch (Exception ex) {\n-            if (debug) ex.printStackTrace();\n+        \/\/ try to read from the configuration file\n+        String factoryClassName = SecuritySupport.readConfig(factoryId);\n+        if (factoryClassName != null) {\n+            return newInstance(type, factoryClassName, null, true);\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/transform\/FactoryFinder.java","additions":5,"deletions":41,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import java.io.File;\n@@ -31,2 +30,0 @@\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n@@ -36,1 +33,0 @@\n-import java.util.Properties;\n@@ -54,9 +50,0 @@\n-    \/**\n-     * <p>Cache properties for performance.<\/p>\n-     *\/\n-    private static final Properties cacheProps = new Properties();\n-\n-    \/**\n-     * <p>First time requires initialization overhead.<\/p>\n-     *\/\n-    private static volatile boolean firstTime = true;\n@@ -182,31 +169,6 @@\n-        String javah = SecuritySupport.getSystemProperty( \"java.home\" );\n-        String configFile = javah + File.separator +\n-        \"conf\" + File.separator + \"jaxp.properties\";\n-\n-\n-        \/\/ try to read from $java.home\/conf\/jaxp.properties\n-        try {\n-            if(firstTime){\n-                synchronized(cacheProps){\n-                    if(firstTime){\n-                        File f=new File( configFile );\n-                        firstTime = false;\n-                        if(SecuritySupport.doesFileExist(f)){\n-                            debugPrintln(()->\"Read properties file \" + f);\n-                            cacheProps.load(SecuritySupport.getFileInputStream(f));\n-                        }\n-                    }\n-                }\n-            }\n-            final String factoryClassName = cacheProps.getProperty(propertyName);\n-            debugPrintln(()->\"found \" + factoryClassName + \" in $java.home\/conf\/jaxp.properties\");\n-\n-            if (factoryClassName != null) {\n-                sf = createInstance(factoryClassName);\n-                if(sf != null){\n-                    return sf;\n-                }\n-            }\n-        } catch (Exception ex) {\n-            if (debug) {\n-                ex.printStackTrace();\n+        \/\/ try to read from the configuration file\n+        String factoryClassName = SecuritySupport.readConfig(propertyName);\n+        if (factoryClassName != null) {\n+            sf = createInstance(factoryClassName);\n+            if(sf != null){\n+                return sf;\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/validation\/SchemaFactoryFinder.java","additions":7,"deletions":45,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import java.io.File;\n@@ -177,30 +176,5 @@\n-        String javah = SecuritySupport.getSystemProperty( \"java.home\" );\n-        String configFile = javah + File.separator +\n-        \"conf\" + File.separator + \"jaxp.properties\";\n-\n-        \/\/ try to read from $java.home\/conf\/jaxp.properties\n-        try {\n-            if(firstTime){\n-                synchronized(cacheProps){\n-                    if(firstTime){\n-                        File f=new File( configFile );\n-                        firstTime = false;\n-                        if(SecuritySupport.doesFileExist(f)){\n-                            debugPrintln(()->\"Read properties file \" + f);\n-                            cacheProps.load(SecuritySupport.getFileInputStream(f));\n-                        }\n-                    }\n-                }\n-            }\n-            final String factoryClassName = cacheProps.getProperty(propertyName);\n-            debugPrintln(()->\"found \" + factoryClassName + \" in $java.home\/conf\/jaxp.properties\");\n-\n-            if (factoryClassName != null) {\n-                xpathFactory = createInstance(factoryClassName);\n-                if(xpathFactory != null){\n-                    return xpathFactory;\n-                }\n-            }\n-        } catch (Exception ex) {\n-            if (debug) {\n-                ex.printStackTrace();\n+        String factoryClassName = SecuritySupport.readConfig(propertyName);\n+        if (factoryClassName != null) {\n+            xpathFactory = createInstance(factoryClassName);\n+            if(xpathFactory != null){\n+                return xpathFactory;\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/xpath\/XPathFactoryFinder.java","additions":6,"deletions":32,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -286,0 +286,6 @@\n+    \/**\n+     * System Property for the Configuration File\n+     * @since 21\n+     *\/\n+    public static final String CONFIG_FILE = \"java.xml.config.file\";\n+\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/JdkConstants.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -410,1 +410,1 @@\n-            value = SecuritySupport.readJAXPProperty(sysPropertyName);\n+            value = SecuritySupport.readConfig(sysPropertyName);\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/JdkXmlFeatures.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.nio.file.Paths;\n@@ -162,1 +163,1 @@\n-            value = readJAXPProperty(propName);\n+            value = readConfig(propName);\n@@ -168,1 +169,4 @@\n-     * Reads the specified property from $java.home\/conf\/jaxp.properties\n+     * Returns the value of the specified property from the Configuration file.\n+     * The method reads the System Property \"java.xml.config.file\" for a custom\n+     * configuration file, if doesn't exist, falls back to the JDK default that\n+     * is typically located at $java.home\/conf\/jaxp.properties.\n@@ -170,2 +174,18 @@\n-     * @param propName the name of the property\n-     * @return the value of the property\n+     * @param propName the specified property\n+     * @return the value of the specified property, null if the property is not\n+     * found\n+     *\/\n+    public static String readConfig(String propName) {\n+        return readConfig(propName, false);\n+    }\n+\n+    \/**\n+     * Returns the value of the specified property from the Configuration file.\n+     * The method reads the System Property \"java.xml.config.file\" for a custom\n+     * configuration file, if doesn't exist, falls back to the JDK default that\n+     * is typically located at $java.home\/conf\/jaxp.properties.\n+     *\n+     * @param propName the specified property\n+     * @param stax a flag indicating whether to read stax.properties\n+     * @return the value of the specified property, null if the property is not\n+     * found\n@@ -173,15 +193,18 @@\n-    public static String readJAXPProperty(String propName) {\n-        String value = null;\n-        InputStream is = null;\n-        try {\n-            if (firstTime) {\n-                synchronized (cacheProps) {\n-                    if (firstTime) {\n-                        String configFile = getSystemProperty(\"java.home\") + File.separator\n-                                + \"conf\" + File.separator + \"jaxp.properties\";\n-                        File f = new File(configFile);\n-                        if (isFileExists(f)) {\n-                            is = getFileInputStream(f);\n-                            cacheProps.load(is);\n-                        }\n-                        firstTime = false;\n+    public static String readConfig(String propName, boolean stax) {\n+        \/\/ use the System Property if specified\n+        String configFile = SecuritySupport.getSystemProperty(JdkConstants.CONFIG_FILE);\n+        if (configFile != null && loadProperties(configFile)) {\n+            return cacheProps.getProperty(propName);\n+        }\n+\n+        \/\/ fall back to the default configuration file\n+        if (firstTime) {\n+            synchronized (cacheProps) {\n+                if (firstTime) {\n+                    boolean found = false;\n+                    if (stax) {\n+                        found = loadProperties(\n+                            Paths.get(SecuritySupport.getSystemProperty(\"java.home\"),\n+                                    \"conf\", \"stax.properties\")\n+                                    .toAbsolutePath().normalize().toString()\n+                        );\n@@ -189,0 +212,8 @@\n+\n+                    if (!found) {\n+                        loadProperties(\n+                            Paths.get(SecuritySupport.getSystemProperty(\"java.home\"),\n+                                \"conf\", \"jaxp.properties\")\n+                                .toAbsolutePath().normalize().toString());\n+                    }\n+                    firstTime = false;\n@@ -191,9 +222,0 @@\n-            value = cacheProps.getProperty(propName);\n-\n-        } catch (IOException ex) {\n-        } finally {\n-            if (is != null) {\n-                try {\n-                    is.close();\n-                } catch (IOException ex) {}\n-            }\n@@ -202,1 +224,19 @@\n-        return value;\n+        return cacheProps.getProperty(propName);\n+    }\n+\n+    \/**\n+     * Loads the properties from the specified file into the cache.\n+     * @param file the specified file\n+     * @return true if success, false otherwise\n+     *\/\n+    private static boolean loadProperties(String file) {\n+        File f = new File(file);\n+        if (SecuritySupport.doesFileExist(f)) {\n+            try (final InputStream in = SecuritySupport.getFileInputStream(f)) {\n+                cacheProps.load(in);\n+                return true;\n+            } catch (IOException e) {\n+                \/\/ ignore file not found error\n+            }\n+        }\n+        return false;\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/SecuritySupport.java","additions":70,"deletions":30,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -588,1 +588,1 @@\n-            value = SecuritySupport.readJAXPProperty(sysPropertyName);\n+            value = SecuritySupport.readConfig(sysPropertyName);\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/XMLSecurityManager.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,60 @@\n+ * <h2 id=\"ConfigurationFile\">Configuration File<\/h2>\n+ * The XML processing APIs in this module support the use of a configuration file for\n+ * setting properties that have defined corresponding system properties.\n+ *\n+ * <h3>Format<\/h3>\n+ * The configuration file must be in standard {@link java.util.Properties} format.\n+ * <p>\n+ * The keys are the names of the system properties, for example, those listed in\n+ * column {@code System Property Name} of the table <a href=\"#Factories\">JAXP Factories<\/a>,\n+ * or {@code System Property} in table {@code Catalog Features}\n+ * of class {@link javax.xml.catalog.CatalogFeatures CatalogFeatures}.\n+ *\n+ * <p>\n+ * The values are those defined in the specific API or process, for example, the\n+ * fully qualified name of the implementation class for the\n+ * <a href=\"#LookupMechanism\">Factory Lookup Mechanism<\/a>, or {@code value} in\n+ * table {@code Catalog Features} of class\n+ * {@link javax.xml.catalog.CatalogFeatures CatalogFeatures}.\n+ *\n+ * <p>\n+ * Below are examples on what can be placed in the configuration file:\n+ * <pre>\n+ *     {@code javax.xml.parsers.DocumentBuilderFactory=packagename.DocumentBuilderFactoryImpl}\n+ *     {@code javax.xml.catalog.resolve=strict}\n+ * <\/pre>\n+ *\n+ *\n+ * <h3 id=\"CF_Default\">Default<\/h3>\n+ * By default, the <a href=\"#Factories\">JAXP Factories<\/a> will look for a\n+ * configuration file called {@code jaxp.properties} in the {@code conf} directory\n+ * of the Java installation if the\n+ * <a href=\"#CF_SP\">system property {@code java.xml.config.file}<\/a>\n+ * is not specified.\n+ *\n+ * <p>\n+ * The default file will be read only once during a factory initialization and\n+ * the values are used while the factory is alive.  If the file does not exist when\n+ * the first attempt is made to read from it, no further attempts are made to check\n+ * for its existence. It is not possible to change the value of any property after\n+ * it has been read for the first time.\n+ *\n+ *\n+ * <h3 id=\"CF_SP\">System Property<\/h3>\n+ * The system property {@code java.xml.config.file} can be used to set up a\n+ * configuration file outside of the JDK to override the default configuration\n+ * file (jaxp.properties).\n+ * <p>\n+ * When the system property is specified, the configuration file it points to\n+ * will override the default file in its entirety, that means no setting in the\n+ * latter will be used by the factories. If the system property does not exist\n+ * when a factory is instantiated, no further attempt will be made to locate it\n+ * while the factory is alive.\n+ * <p>\n+ * The value of the property shall be a valid file path to a configuration file.\n+ * If the file path is not absolute, it will be considered relative to the working\n+ * directory.\n+ * <p>\n+ * Unlike other system properties, this property can not be placed in a configuration\n+ * file.\n+ *\n@@ -55,1 +115,1 @@\n- * <td style=\"text-align:center\"><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n+ * <td style=\"text-align:center\"><a href=\"#ConfigurationFile\">Configuration File<\/a>, <a href=\"#CF_Default\">jaxp.properties<\/a> by default<\/td>\n@@ -64,1 +124,1 @@\n- * <td style=\"text-align:center\"><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n+ * <td style=\"text-align:center\"><a href=\"#ConfigurationFile\">Configuration File<\/a>, <a href=\"#CF_Default\">jaxp.properties<\/a> by default<\/td>\n@@ -73,1 +133,1 @@\n- * <td style=\"text-align:center\"><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n+ * <td style=\"text-align:center\"><a href=\"#ConfigurationFile\">Configuration File<\/a>, <a href=\"#CF_Default\">jaxp.properties<\/a> by default<\/td>\n@@ -83,2 +143,2 @@\n- *     <a href=\"#StAXProperties\">stax.properties<\/a> and then\n- *     <a href=\"#JaxpProperties\">jaxp.properties<\/a>\n+ *     <a href=\"#ConfigurationFile\">Configuration File<\/a>,\n+ *     <a href=\"#CF_Default\">jaxp.properties<\/a> by default\n@@ -95,2 +155,2 @@\n- *     <a href=\"#StAXProperties\">stax.properties<\/a> and then\n- *     <a href=\"#JaxpProperties\">jaxp.properties<\/a>\n+ *     <a href=\"#ConfigurationFile\">Configuration File<\/a>,\n+ *     <a href=\"#CF_Default\">jaxp.properties<\/a> by default\n@@ -107,2 +167,2 @@\n- *     <a href=\"#StAXProperties\">stax.properties<\/a> and then\n- *     <a href=\"#JaxpProperties\">jaxp.properties<\/a>\n+ *     <a href=\"#ConfigurationFile\">Configuration File<\/a>,\n+ *     <a href=\"#CF_Default\">jaxp.properties<\/a> by default\n@@ -118,1 +178,1 @@\n- * <td style=\"text-align:center\"><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n+ * <td style=\"text-align:center\"><a href=\"#ConfigurationFile\">Configuration File<\/a>, <a href=\"#CF_Default\">jaxp.properties<\/a> by default<\/td>\n@@ -127,1 +187,1 @@\n- * <td style=\"text-align:center\"><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n+ * <td style=\"text-align:center\"><a href=\"#ConfigurationFile\">Configuration File<\/a>, <a href=\"#CF_Default\">jaxp.properties<\/a> by default<\/td>\n@@ -136,1 +196,1 @@\n- * <td style=\"text-align:center\"><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n+ * <td style=\"text-align:center\"><a href=\"#ConfigurationFile\">Configuration File<\/a>, <a href=\"#CF_Default\">jaxp.properties<\/a> by default<\/td>\n@@ -150,17 +210,0 @@\n- * <h3 id=\"JaxpProperties\">jaxp.properties<\/h3>\n- * {@code jaxp.properties} is a configuration file in standard\n- * {@link java.util.Properties} format and typically located in the {@code conf}\n- * directory of the Java installation. It contains the fully qualified\n- * name of the implementation class with the key being the system property name\n- * defined in <a href=\"#Factories\">the table<\/a> above.\n- * <p>\n- * The {@code jaxp.properties} file is read only once by the implementation and\n- * the values are then cached for future use.  If the file does not exist when\n- * the first attempt is made to read from it, no further attempts\n- * are made to check for its existence. It is not possible to change the value\n- * of any property after it has been read for the first time.\n- *\n- * <h3 id=\"StAXProperties\">stax.properties<\/h3>\n- * {@code stax.properties} is a configuration file that functions the same as\n- * {@code jaxp.properties} except that it is only used by StAX factory lookup.\n- *\n@@ -174,1 +217,1 @@\n- * <a href=\"#Factories\">JAXP Factories<\/a> above.\n+ * <a href=\"#Factories\">JAXP Factories<\/a> above;\n@@ -178,4 +221,1 @@\n- * Use the configuration file <a href=\"#JaxpProperties\">jaxp.properties<\/a> as\n- * indicated in the table <a href=\"#Factories\">JAXP Factories<\/a>. For StAX,\n- * if <a href=\"#StAXProperties\">stax.properties<\/a> exists, the factories will\n- * first attempt to read from it instead of <a href=\"#JaxpProperties\">jaxp.properties<\/a>.\n+ * Use the <a href=\"#ConfigurationFile\">Configuration File<\/a>;\n@@ -232,0 +272,38 @@\n+ * <h2 id=\"PSO\">Property Scope and Order<\/h2>\n+ * Properties in this module may be set in several different ways, including\n+ * initialization, the {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING FEATURE_SECURE_PROCESSING}\n+ * (hereafter referred to FSP), <a href=\"#ConfigurationFile\">configuration file<\/a>,\n+ * system properties, the API properties. These settings will be in effect in\n+ * different scopes and follow an overriding order. In general, a setting in a\n+ * more specific or narrower scope overrides the one in general or wider scope.\n+ * The followings describe the scope of the settings and the overriding order that\n+ * is in descending order, with the later overriding the former:\n+ *\n+ * <ul>\n+ * <li>\n+ *      In a factory scope, properties are initialized with default values;\n+ * <\/li>\n+ * <li><p>\n+ *      In a factory scope, the {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING}\n+ * feature (hereafter referred to FSP) may set a more restrictive value to override\n+ * the default. This process applies only to security-related properties that\n+ * have defined a restrictive value on top of the default one.\n+ * <\/li>\n+ * <li><p>\n+ *      In a scope of all invocations of the JDK, properties that have corresponding\n+ * system properties defined may be set in the <a href=\"#ConfigurationFile\">configuration file<\/a>;\n+ * <\/li>\n+ * <li><p>\n+ *      In a scope of a JDK instance, system properties, if any, may be set on\n+ * the commandline;\n+ * <\/li>\n+ * <li><p>\n+ *      System properties may be set through the System Property API to have effect\n+ * on the procedure where they are set;\n+ * <\/li>\n+ * <li><p>\n+ *      And last, in a scope of a factory or processor, properties specified\n+ * through factories or processors API.\n+ * <\/li>\n+ * <\/ul>\n+ *\n@@ -233,0 +311,13 @@\n+ *\n+ * <h2 id=\"ConfigurationFile\">Configuration File<\/h2>\n+ * The <a href=\"#ConfigurationFile\">configuration file<\/a> defined by the XML\n+ * processing API may be used to set the JDK implementation specific properties\n+ * and features. For that purpose, the JDK may be distributed with the\n+ * <a href=\"#CF_Default\">default file {@code jaxp.properties}<\/a> that may contain\n+ * any of the properties listed in table\n+ * <a href=\"#Properties\">Implementation Specific Properties<\/a> and\n+ * <a href=\"#Features\">Features<\/a>. See also\n+ * <a href=\"#PSO\">Property Scope and Order<\/a> for the use of the configuration\n+ * file in setting properties.\n+ *\n+ *\n@@ -238,4 +329,4 @@\n- * naming convention, System Properties, jaxp.properties, scope and order,\n- * and processors to which a property applies. A table listing the implementation\n- * specific features and properties which the implementation currently supports\n- * can be found at the end of this note.\n+ * naming convention, System Properties, scope and order, and processors to which\n+ * a property applies. A table listing the implementation specific features and\n+ * properties that the implementation currently supports can be found at the end\n+ * of this note.\n@@ -274,4 +365,7 @@\n- * <h3>jaxp.properties<\/h3>\n- * A system property can be specified in the <a href=\"#JaxpProperties\">jaxp.properties<\/a>\n- * file to set the behavior for all invocations of the JDK. The format is\n- * {@code system-property-name=value}. For example:\n+ * <h3>Configuration File<\/h3>\n+ * A system property can be specified in the <a href=\"#ConfigurationFile\">Configuration File<\/a>\n+ * to set the behavior for all invocations of the JDK. The format is\n+ * {@code key=value}, where the key is the property name as listed in column\n+ * {@code Full Name} and value in column {@code Value} in table\n+ * <a href=\"#Properties\">Implementation Specific Properties<\/a> and\n+ * <a href=\"#Features\">Features<\/a>. For example:\n@@ -279,0 +373,1 @@\n+ *     {@code jdk.xml.entityExpansionLimit=2000}\n@@ -283,22 +378,9 @@\n- * The {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING} feature\n- * (hereafter referred to as secure processing) is required for XML processors\n- * including DOM, SAX, Schema Validation, XSLT, and XPath. When secure processing\n- * is set to true, security related features and properties, such as those flagged\n- * as {@code \"security: yes\"} (hereafter referred to as security properties) in\n- * table <a href=\"#Features\">Implementation Specific Features<\/a> and\n- * <a href=\"#Properties\">Properties<\/a>,\n- * are enforced. Such enforcement includes setting security properties and features\n- * to more restrictive values and limits as shown in {@code \"Value\"}'s\n- * subcolumn {@code \"Enforced\"} in the tables. When secure processing\n- * is set to false, however, the property values will not be affected.\n- * <p>\n- * When the Java Security Manager is present, secure processing is set to true\n- * and can not be turned off. The security properties are therefore enforced.\n- * <p>\n- * Properties specified in the jaxp.properties file affect all invocations of\n- * the JDK, and will override their default values, or those that may have been\n- * set by secure processing.\n- * <p>\n- * System properties, when set, affect the invocation of the JDK and override\n- * the default settings or those that may have been set in jaxp.properties or\n- * by secure processing.\n+ * The JDK implementation specific features and properties follow the same procedure\n+ * as described in section <a href=\"#PSO\">Property Scope and Order<\/a>. Specific\n+ * to the 2nd step in the procedure, that is, settings by\n+ * {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING FSP}, security related\n+ * features and properties are flagged as {@code \"security: yes\"} in table\n+ * <a href=\"#Features\">Implementation Specific Features<\/a> and\n+ * <a href=\"#Properties\">Properties<\/a>. Their values are shown in {@code \"Value\"}'s\n+ * subcolumn {@code \"Enforced\"} in the tables.\n+ *\n@@ -306,3 +388,3 @@\n- * JAXP properties specified through JAXP factories or processors (e.g. SAXParser)\n- * take preference over system properties, the jaxp.properties file, as well as\n- * secure processing.\n+ * Furthermore, when the Java Security Manager is present, the JDK sets\n+ * {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING FSP} to true and does\n+ * not allow it to be turned off. The security properties are therefore enforced.\n@@ -439,1 +521,1 @@\n- * <th scope=\"col\" rowspan=\"2\">jaxp.properties <a href=\"#Note3\">[3]<\/a><\/th>\n+ * <th scope=\"col\" rowspan=\"2\">Configuration File <a href=\"#Note3\">[3]<\/a><\/th>\n@@ -675,1 +757,1 @@\n- * <th scope=\"col\" rowspan=\"2\">jaxp.properties <a href=\"#Note3\">[3]<\/a><\/th>\n+ * <th scope=\"col\" rowspan=\"2\">Configuration File <a href=\"#Note3\">[3]<\/a><\/th>\n@@ -790,1 +872,1 @@\n- * <li>Value set in jaxp.properties;<\/li>\n+ * <li>Value set in the configuration file;<\/li>\n","filename":"src\/java.xml\/share\/classes\/module-info.java","additions":153,"deletions":71,"binary":false,"changes":224,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import org.testng.annotations.DataProvider;\n+\n+\/**\n+ * Configuration Test\n+ *\/\n+public class ConfigurationTest {\n+    static final String SP_CONFIG = \"java.xml.config.file\";\n+    static final String SP_ENTITY_EXPANSION = \"jdk.xml.entityExpansionLimit\";\n+\n+\n+    static final boolean IS_WINDOWS = System.getProperty(\"os.name\").contains(\"Windows\");\n+    static final String SRC_DIR;\n+    static final String TEST_SOURCE_DIR;\n+    static {\n+        String srcDir = System.getProperty(\"test.src\", \".\");\n+        if (IS_WINDOWS) {\n+            srcDir = srcDir.replace('\\\\', '\/');\n+        }\n+        SRC_DIR = srcDir;\n+        TEST_SOURCE_DIR = srcDir + \"\/files\/\";\n+    }\n+\n+   \/*\n+     * DataProvider for testing the configuration file and system property.\n+     *\n+     * Fields:\n+     *     configuration file, property name, property value\n+     *\/\n+    @DataProvider(name = \"getProperty\")\n+    public Object[][] getProperty() {\n+\n+        return new Object[][]{\n+            {null, SP_ENTITY_EXPANSION, \"64000\"},\n+            {\"jaxp.properties\", SP_ENTITY_EXPANSION, \"1000\"},\n+        };\n+    }\n+\n+    static String getPath(String file) {\n+        String temp = TEST_SOURCE_DIR + file;\n+        if (IS_WINDOWS) {\n+            temp = \"\/\" + temp;\n+        }\n+        return temp;\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/ConfigurationTest.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.SP_CONFIG;\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.DOMImplTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class DOMImplTest extends DocumentBuilderFactory {\n+    \/*\n+     * DataProvider for testing the configuration file and system property.\n+     *\n+     * Fields:\n+     *     configuration file, factory implementation class\n+     *\/\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl\"},\n+            {\"jaxpImpls.properties\", \"common.config.DOMImplTest\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testDOMImpl(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(SP_CONFIG, getPath(config));\n+        }\n+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+        System.clearProperty(SP_CONFIG);\n+        Assert.assertEquals(dbf.getClass().getName(), expected);\n+    }\n+\n+    @Override\n+    public DocumentBuilder newDocumentBuilder() throws ParserConfigurationException {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setAttribute(String name, Object value) throws IllegalArgumentException {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public Object getAttribute(String name) throws IllegalArgumentException {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setFeature(String name, boolean value) throws ParserConfigurationException {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public boolean getFeature(String name) throws ParserConfigurationException {\n+        return false;\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/DOMImplTest.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.DOMPropertyTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class DOMPropertyTest extends ConfigurationTest {\n+\n+   @Test(dataProvider = \"getProperty\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(SP_CONFIG, getPath(config));\n+        }\n+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+        Assert.assertEquals(dbf.getAttribute(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/DOMPropertyTest.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,205 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import java.util.Iterator;\n+import javax.xml.namespace.NamespaceContext;\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.Location;\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.events.Attribute;\n+import javax.xml.stream.events.Characters;\n+import javax.xml.stream.events.Comment;\n+import javax.xml.stream.events.DTD;\n+import javax.xml.stream.events.EndDocument;\n+import javax.xml.stream.events.EndElement;\n+import javax.xml.stream.events.EntityDeclaration;\n+import javax.xml.stream.events.EntityReference;\n+import javax.xml.stream.events.Namespace;\n+import javax.xml.stream.events.ProcessingInstruction;\n+import javax.xml.stream.events.StartDocument;\n+import javax.xml.stream.events.StartElement;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.EventFactoryTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class EventFactoryTest extends XMLEventFactory {\n+   @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.xml.internal.stream.events.XMLEventFactoryImpl\"},\n+            {\"jaxpImpls.properties\", \"common.config.EventFactoryTest\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testEventFactory(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        XMLEventFactory ef = XMLEventFactory.newFactory();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(ef.getClass().getName(), expected);\n+    }\n+\n+    @Override\n+    public void setLocation(Location location) {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public Attribute createAttribute(String prefix, String namespaceURI, String localName, String value) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Attribute createAttribute(String localName, String value) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Attribute createAttribute(QName name, String value) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Namespace createNamespace(String namespaceURI) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Namespace createNamespace(String prefix, String namespaceUri) {\n+        return null;\n+    }\n+\n+    @Override\n+    public StartElement createStartElement(QName name, Iterator<? extends Attribute> attributes, Iterator<? extends Namespace> namespaces) {\n+        return null;\n+    }\n+\n+    @Override\n+    public StartElement createStartElement(String prefix, String namespaceUri, String localName) {\n+        return null;\n+    }\n+\n+    @Override\n+    public StartElement createStartElement(String prefix, String namespaceUri, String localName, Iterator<? extends Attribute> attributes, Iterator<? extends Namespace> namespaces) {\n+        return null;\n+    }\n+\n+    @Override\n+    public StartElement createStartElement(String prefix, String namespaceUri, String localName, Iterator<? extends Attribute> attributes, Iterator<? extends Namespace> namespaces, NamespaceContext context) {\n+        return null;\n+    }\n+\n+    @Override\n+    public EndElement createEndElement(QName name, Iterator<? extends Namespace> namespaces) {\n+        return null;\n+    }\n+\n+    @Override\n+    public EndElement createEndElement(String prefix, String namespaceUri, String localName) {\n+        return null;\n+    }\n+\n+    @Override\n+    public EndElement createEndElement(String prefix, String namespaceUri, String localName, Iterator<? extends Namespace> namespaces) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Characters createCharacters(String content) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Characters createCData(String content) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Characters createSpace(String content) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Characters createIgnorableSpace(String content) {\n+        return null;\n+    }\n+\n+    @Override\n+    public StartDocument createStartDocument() {\n+        return null;\n+    }\n+\n+    @Override\n+    public StartDocument createStartDocument(String encoding, String version, boolean standalone) {\n+        return null;\n+    }\n+\n+    @Override\n+    public StartDocument createStartDocument(String encoding, String version) {\n+        return null;\n+    }\n+\n+    @Override\n+    public StartDocument createStartDocument(String encoding) {\n+        return null;\n+    }\n+\n+    @Override\n+    public EndDocument createEndDocument() {\n+        return null;\n+    }\n+\n+    @Override\n+    public EntityReference createEntityReference(String name, EntityDeclaration declaration) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Comment createComment(String text) {\n+        return null;\n+    }\n+\n+    @Override\n+    public ProcessingInstruction createProcessingInstruction(String target, String data) {\n+        return null;\n+    }\n+\n+    @Override\n+    public DTD createDTD(String dtd) {\n+        return null;\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/EventFactoryTest.java","additions":205,"deletions":0,"binary":false,"changes":205,"status":"added"},{"patch":"@@ -0,0 +1,192 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import javax.xml.stream.EventFilter;\n+import javax.xml.stream.StreamFilter;\n+import javax.xml.stream.XMLEventReader;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLReporter;\n+import javax.xml.stream.XMLResolver;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamReader;\n+import javax.xml.stream.util.XMLEventAllocator;\n+import javax.xml.transform.Source;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.InputFactoryTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class InputFactoryTest extends XMLInputFactory {\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.xml.internal.stream.XMLInputFactoryImpl\"},\n+            {\"jaxpImpls.properties\", \"common.config.InputFactoryTest\"},\n+\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testInputFactory(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        XMLInputFactory xif = XMLInputFactory.newFactory();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(xif.getClass().getName(), expected);\n+    }\n+\n+    @Override\n+    public XMLStreamReader createXMLStreamReader(Reader reader) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLStreamReader createXMLStreamReader(Source source) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLStreamReader createXMLStreamReader(InputStream stream) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLStreamReader createXMLStreamReader(InputStream stream, String encoding) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLStreamReader createXMLStreamReader(String systemId, InputStream stream) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLStreamReader createXMLStreamReader(String systemId, Reader reader) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLEventReader createXMLEventReader(Reader reader) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLEventReader createXMLEventReader(String systemId, Reader reader) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLEventReader createXMLEventReader(XMLStreamReader reader) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLEventReader createXMLEventReader(Source source) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLEventReader createXMLEventReader(InputStream stream) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLEventReader createXMLEventReader(InputStream stream, String encoding) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLEventReader createXMLEventReader(String systemId, InputStream stream) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLStreamReader createFilteredReader(XMLStreamReader reader, StreamFilter filter) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLEventReader createFilteredReader(XMLEventReader reader, EventFilter filter) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLResolver getXMLResolver() {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setXMLResolver(XMLResolver resolver) {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public XMLReporter getXMLReporter() {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setXMLReporter(XMLReporter reporter) {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public void setProperty(String name, Object value) throws IllegalArgumentException {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public Object getProperty(String name) throws IllegalArgumentException {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isPropertySupported(String name) {\n+        return false;\n+    }\n+\n+    @Override\n+    public void setEventAllocator(XMLEventAllocator allocator) {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public XMLEventAllocator getEventAllocator() {\n+        return null;\n+    }\n+\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/InputFactoryTest.java","additions":192,"deletions":0,"binary":false,"changes":192,"status":"added"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import java.io.OutputStream;\n+import java.io.Writer;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.Result;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.OutputFactoryTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class OutputFactoryTest extends XMLOutputFactory {\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.xml.internal.stream.XMLOutputFactoryImpl\"},\n+            {\"jaxpImpls.properties\", \"common.config.OutputFactoryTest\"},};\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testOutputFactory(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        XMLOutputFactory xof = XMLOutputFactory.newFactory();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(xof.getClass().getName(), expected);\n+    }\n+\n+    @Override\n+    public XMLStreamWriter createXMLStreamWriter(Writer stream) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLStreamWriter createXMLStreamWriter(OutputStream stream) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLStreamWriter createXMLStreamWriter(OutputStream stream, String encoding) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLStreamWriter createXMLStreamWriter(Result result) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLEventWriter createXMLEventWriter(Result result) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLEventWriter createXMLEventWriter(OutputStream stream) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLEventWriter createXMLEventWriter(OutputStream stream, String encoding) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLEventWriter createXMLEventWriter(Writer stream) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setProperty(String name, Object value) throws IllegalArgumentException {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public Object getProperty(String name) throws IllegalArgumentException {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isPropertySupported(String name) {\n+        return false;\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/OutputFactoryTest.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.SAXNotRecognizedException;\n+import org.xml.sax.SAXNotSupportedException;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.SAXImplTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class SAXImplTest extends SAXParserFactory {\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl\"},\n+            {\"jaxpImpls.properties\", \"common.config.SAXImplTest\"},};\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testSAXImpl(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+        SAXParserFactory spf = SAXParserFactory.newInstance();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(spf.getClass().getName(), expected);\n+    }\n+\n+    @Override\n+    public SAXParser newSAXParser() throws ParserConfigurationException, SAXException {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setFeature(String name, boolean value)\n+            throws ParserConfigurationException, SAXNotRecognizedException, SAXNotSupportedException {\n+        \/\/\n+    }\n+\n+    @Override\n+    public boolean getFeature(String name)\n+            throws ParserConfigurationException, SAXNotRecognizedException, SAXNotSupportedException {\n+        return false;\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/SAXImplTest.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.xml.sax.XMLReader;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.SAXPropertyTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class SAXPropertyTest extends ConfigurationTest {\n+    @Test(dataProvider = \"getProperty\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+        SAXParserFactory spf = SAXParserFactory.newInstance();\n+        SAXParser sp = spf.newSAXParser();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(sp.getProperty(property), expected);\n+        XMLReader reader = sp.getXMLReader();\n+        Assert.assertEquals(reader.getProperty(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/SAXPropertyTest.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.Source;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.w3c.dom.ls.LSResourceResolver;\n+import org.xml.sax.ErrorHandler;\n+import org.xml.sax.SAXException;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.SchemaFactoryTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class SchemaFactoryTest extends SchemaFactory {\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.org.apache.xerces.internal.jaxp.validation.XMLSchemaFactory\"},\n+            {\"jaxpImpls.properties\", \"common.config.SchemaFactoryTest\"},\n+\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testFactory(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(sf.getClass().getName(), expected);\n+    }\n+\n+    @Override\n+    public boolean isSchemaLanguageSupported(String schemaLanguage) {\n+        return false;\n+    }\n+\n+    @Override\n+    public void setErrorHandler(ErrorHandler errorHandler) {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public ErrorHandler getErrorHandler() {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setResourceResolver(LSResourceResolver resourceResolver) {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public LSResourceResolver getResourceResolver() {\n+        return null;\n+    }\n+\n+    @Override\n+    public Schema newSchema(Source[] schemas) throws SAXException {\n+        return null;\n+    }\n+\n+    @Override\n+    public Schema newSchema() throws SAXException {\n+        return null;\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/SchemaFactoryTest.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.validation.SchemaFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.SchemaPropertyTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class SchemaPropertyTest extends ConfigurationTest {\n+    @Test(dataProvider = \"getProperty\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(sf.getProperty(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/SchemaPropertyTest.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import javax.xml.stream.XMLInputFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.StAXPropertyTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class StAXPropertyTest extends ConfigurationTest {\n+    @Test(dataProvider = \"getProperty\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+        XMLInputFactory xif = XMLInputFactory.newFactory();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(xif.getProperty(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/StAXPropertyTest.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.transform.ErrorListener;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Templates;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.URIResolver;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.TransformerFactoryTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class TransformerFactoryTest extends TransformerFactory {\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl\"},\n+            {\"jaxpImpls.properties\", \"common.config.TransformerFactoryTest\"},\n+\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testFactory(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        TransformerFactory tf = TransformerFactory.newInstance();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(tf.getClass().getName(), expected);\n+    }\n+\n+    @Override\n+    public Transformer newTransformer(Source source) throws TransformerConfigurationException {\n+        return null;\n+    }\n+\n+    @Override\n+    public Transformer newTransformer() throws TransformerConfigurationException {\n+        return null;\n+    }\n+\n+    @Override\n+    public Templates newTemplates(Source source) throws TransformerConfigurationException {\n+        return null;\n+    }\n+\n+    @Override\n+    public Source getAssociatedStylesheet(Source source, String media, String title, String charset) throws TransformerConfigurationException {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setURIResolver(URIResolver resolver) {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public URIResolver getURIResolver() {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setFeature(String name, boolean value) throws TransformerConfigurationException {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public boolean getFeature(String name) {\n+        return false;\n+    }\n+\n+    @Override\n+    public void setAttribute(String name, Object value) {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public Object getAttribute(String name) {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setErrorListener(ErrorListener listener) {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public ErrorListener getErrorListener() {\n+        return null;\n+    }\n+\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/TransformerFactoryTest.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import javax.xml.transform.TransformerFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.TransformerPropertyTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class TransformerPropertyTest extends ConfigurationTest {\n+    @Test(dataProvider = \"getProperty\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+        TransformerFactory tf = TransformerFactory.newInstance();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(tf.getAttribute(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/TransformerPropertyTest.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathFactory;\n+import javax.xml.xpath.XPathFactoryConfigurationException;\n+import javax.xml.xpath.XPathFunctionResolver;\n+import javax.xml.xpath.XPathVariableResolver;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.XPathFactoryTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class XPathFactoryTest extends XPathFactory {\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.org.apache.xpath.internal.jaxp.XPathFactoryImpl\"},\n+            {\"jaxpImpls.properties\", \"common.config.XPathFactoryTest\"},\n+\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testFactory(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        XPathFactory xf = XPathFactory.newInstance();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(xf.getClass().getName(), expected);\n+    }\n+\n+    @Override\n+    public boolean isObjectModelSupported(String objectModel) {\n+        return false;\n+    }\n+\n+    @Override\n+    public void setFeature(String name, boolean value) throws XPathFactoryConfigurationException {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public boolean getFeature(String name) throws XPathFactoryConfigurationException {\n+        return false;\n+    }\n+\n+    @Override\n+    public void setXPathVariableResolver(XPathVariableResolver resolver) {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public void setXPathFunctionResolver(XPathFunctionResolver resolver) {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public XPath newXPath() {\n+        return null;\n+    }\n+\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/XPathFactoryTest.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import javax.xml.xpath.XPathFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.XPathPropertyTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class XPathPropertyTest extends ConfigurationTest {\n+   \/*\n+     * DataProvider for testing the configuration file and system property.\n+     *\n+     * Fields:\n+     *     configuration file, property name, property value\n+     *\/\n+    @DataProvider(name = \"getProperty\")\n+    public Object[][] getProperty() {\n+\n+        return new Object[][]{\n+            {null, \"jdk.xml.xpathExprOpLimit\", \"100\"},\n+            {\"jaxp.properties\", \"jdk.xml.xpathExprOpLimit\", \"200\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getProperty\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+        XPathFactory xf = XPathFactory.newInstance();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(xf.getProperty(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/XPathPropertyTest.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+################################################################################\n+#       XML Library (java.xml) Configuration File\n+#\n+# This file is in java.util.Properties format and typically located in the conf \n+# directory of the Java installation. It may contain key\/value pairs for specifying\n+# the implementation class of a factory and\/or properties that have corresponding\n+# system properties. \n+#\n+# This file can be replaced by specifying a filename with the jdk.xml.config.file \n+# system property. For example java -Djdk.xml.config.file=myfile \n+################################################################################\n+\n+# ---- Configuration for test ----\n+#\n+# Disable Extension Functions\n+jdk.xml.enableExtensionFunctions=false\n+# Disallow overriding the default parser\n+jdk.xml.overrideDefaultParser=false\n+#\n+# Implementation specific limits:\n+jdk.xml.entityExpansionLimit=1000\n+jdk.xml.totalEntitySizeLimit=100000\n+jdk.xml.maxGeneralEntitySizeLimit=1024\n+jdk.xml.maxParameterEntitySizeLimit=1024\n+jdk.xml.entityReplacementLimit=10000\n+#\n+# General XML limits\n+jdk.xml.elementAttributeLimit=100\n+jdk.xml.maxOccurLimit=5000\n+jdk.xml.maxElementDepth=0\n+jdk.xml.maxXMLNameLimit=1000\n+#\n+# XPath Limits\n+jdk.xml.xpathExprGrpLimit=10\n+jdk.xml.xpathExprOpLimit=200\n+jdk.xml.xpathTotalOpLimit=10000\n+\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/files\/jaxp.properties","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+################################################################################\n+#       XML Library (java.xml) Configuration File\n+#\n+# This file is in java.util.Properties format and typically located in the conf \n+# directory of the Java installation. It may contain key\/value pairs for specifying\n+# the implementation class of a factory and\/or properties that have corresponding\n+# system properties. \n+#\n+# This file can be replaced by specifying a filename with the jdk.xml.config.file \n+# system property. For example java -Djdk.xml.config.file=myfile \n+################################################################################\n+\n+# ---- Configuration for test ----\n+# \n+# Factory implementation class\n+javax.xml.parsers.DocumentBuilderFactory=common.config.DOMImplTest\n+javax.xml.parsers.SAXParserFactory=common.config.SAXImplTest\n+javax.xml.stream.XMLEventFactory=common.config.EventFactoryTest\n+javax.xml.stream.XMLInputFactory=common.config.InputFactoryTest\n+javax.xml.stream.XMLOutputFactory=common.config.OutputFactoryTest\n+javax.xml.transform.TransformerFactory=common.config.TransformerFactoryTest\n+javax.xml.validation.SchemaFactory\\:http\\:\/\/www.w3.org\/2001\/XMLSchema=common.config.SchemaFactoryTest\n+javax.xml.xpath.XPathFactory\\:http\\:\/\/java.sun.com\/jaxp\/xpath\/dom=common.config.XPathFactoryTest\n+#\n+# Disable Extension Functions\n+jdk.xml.enableExtensionFunctions=false\n+# Disallow overriding the default parser\n+jdk.xml.overrideDefaultParser=false\n+#\n+# Implementation specific limits:\n+#\n+jdk.xml.entityExpansionLimit=1000\n+jdk.xml.totalEntitySizeLimit=100000\n+jdk.xml.maxGeneralEntitySizeLimit=1024\n+jdk.xml.maxParameterEntitySizeLimit=1024\n+jdk.xml.entityReplacementLimit=10000\n+#\n+# General XML limits\n+jdk.xml.elementAttributeLimit=100\n+jdk.xml.maxOccurLimit=5000\n+jdk.xml.maxElementDepth=0\n+jdk.xml.maxXMLNameLimit=1000\n+#\n+# XPath Limits\n+jdk.xml.xpathExprGrpLimit=10\n+jdk.xml.xpathExprOpLimit=100\n+jdk.xml.xpathTotalOpLimit=10000\n+\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/files\/jaxpImpls.properties","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/configtest.zip","binary":true,"status":"added"}]}