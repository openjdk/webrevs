{"files":[{"patch":"@@ -274,1 +274,0 @@\n-\n@@ -276,1 +275,0 @@\n-\n@@ -280,3 +278,4 @@\n-                targetMountNS = Optional.ofNullable(Files.readSymbolicLink(procPidPath.resolve(NS_MNT))); \/\/ attempt to read the target's mnt ns id...\n-            } catch (\n-                    IOException _) { \/\/ if we fail to read the target's mnt ns id then we either don't have access or it no longer exists!\n+                \/\/ attempt to read the target's mnt ns id\n+                targetMountNS = Optional.ofNullable(Files.readSymbolicLink(procPidPath.resolve(NS_MNT)));\n+            } catch (IOException _) {\n+                \/\/ if we fail to read the target's mnt ns id then we either don't have access or it no longer exists!\n@@ -286,2 +285,1 @@\n-\n-                \/\/ ok so if we get here we have failed to read the target's mnt ns, but the target process still exists ... we do not have privileges to read its procfs\n+                \/\/ the process still exists, but we don't have privileges to read its procfs\n@@ -290,1 +288,1 @@\n-            final var sameMountNS = SELF_MNT_NS.isPresent() && SELF_MNT_NS.equals(targetMountNS); \/\/ will be false  if we did not read the target's mnt ns\n+            final var sameMountNS = SELF_MNT_NS.isPresent() && SELF_MNT_NS.equals(targetMountNS);\n@@ -295,0 +293,1 @@\n+                \/\/ we could not read the target's mnt ns\n@@ -296,1 +295,0 @@\n-\n@@ -298,1 +296,1 @@\n-                    return procPidRootTmp.toString(); \/\/ not in the same mnt ns but tmp is accessible via \/proc...\n+                    return procPidRootTmp.toString(); \/\/ not in the same mnt ns but tmp is accessible via \/proc\n@@ -302,2 +300,1 @@\n-            \/\/ let's attempt to obtain the pid NS... best efforts to avoid crossing pid ns boundaries (as with a container)\n-\n+            \/\/ let's attempt to obtain the pid NS, best efforts to avoid crossing pid ns boundaries (as with a container)\n@@ -307,2 +304,4 @@\n-                curPidNS = Optional.ofNullable(Files.readSymbolicLink(procPidPath.resolve(NS_PID))); \/\/ attempt to read the target's mnt ns id...\n-            } catch (IOException _) { \/\/ if we fail to read the target's pid ns id then we either don't have access or it no longer exists!\n+                \/\/ attempt to read the target's pid ns id\n+                curPidNS = Optional.ofNullable(Files.readSymbolicLink(procPidPath.resolve(NS_PID)));\n+            } catch (IOException _) {\n+                \/\/ if we fail to read the target's pid ns id then we either don't have access or it no longer exists!\n@@ -312,2 +311,1 @@\n-\n-                \/\/ ok so if we get here we have failed to read the target's pid ns, but the target process still exists ... we do not have privileges to read its procfs\n+                \/\/ the process still exists, but we don't have privileges to read its procfs\n@@ -316,2 +314,1 @@\n-            \/\/ recurse \"up\" the process hierarchy... if appropriate\n-\n+            \/\/ recurse \"up\" the process hierarchy, if appropriate\n@@ -319,1 +316,0 @@\n-\n@@ -324,3 +320,1 @@\n-\n-                nsPid = getNamespacePid(ph.get().pid()); \/\/ get the ns pid of the parent...\n-\n+                nsPid = getNamespacePid(ph.get().pid()); \/\/ get the ns pid of the parent\n@@ -354,1 +348,0 @@\n-\n","filename":"src\/jdk.attach\/linux\/classes\/sun\/tools\/attach\/VirtualMachineImpl.java","additions":16,"deletions":23,"binary":false,"changes":39,"status":"modified"}]}