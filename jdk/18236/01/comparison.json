{"files":[{"patch":"@@ -471,1 +471,2 @@\n-                            if (selectorType == long.class || selectorType == float.class || selectorType == double.class) {\n+                            if (selectorType == long.class || selectorType == float.class || selectorType == double.class ||\n+                                selectorType == Long.class || selectorType == Float.class || selectorType == Double.class) {\n@@ -478,1 +479,1 @@\n-                            if (selectorType == long.class) {\n+                            if (selectorType == long.class || selectorType == Long.class) {\n@@ -482,1 +483,1 @@\n-                            } else if (selectorType == float.class) {\n+                            } else if (selectorType == float.class || selectorType == Float.class) {\n@@ -486,1 +487,1 @@\n-                            } else if (selectorType == double.class) {\n+                            } else if (selectorType == double.class || selectorType == Double.class) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/SwitchBootstraps.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -46,0 +46,4 @@\n+import javax.tools.Diagnostic;\n+import javax.tools.JavaFileObject;\n+import java.util.List;\n+\n@@ -85,0 +89,12 @@\n+    \/\/ potential not-exhaustive errors are expected and filtered out in `doWork`\n+    private static final String test3 =\n+            \"\"\"\n+            public class Test {\n+                public static void doTest(#{TYPE1} in) {\n+                    switch(in) {\n+                       case #{TYPE2} x -> {}\n+                    }\n+                }\n+            }\n+            \"\"\";\n+\n@@ -90,1 +106,1 @@\n-                .withOption(\"-source\").withOption(JAVA_VERSION);;\n+                .withOption(\"-source\").withOption(JAVA_VERSION);\n@@ -95,1 +111,6 @@\n-                .withOption(\"-source\").withOption(JAVA_VERSION);;\n+                .withOption(\"-source\").withOption(JAVA_VERSION);\n+\n+        ComboTask task3 = newCompilationTask()\n+                .withSourceFromTemplate(test3.replace(\"#{TYPE1}\", type1.code).replace(\"#{TYPE2}\", type2.code))\n+                .withOption(\"--enable-preview\")\n+                .withOption(\"-source\").withOption(JAVA_VERSION);\n@@ -99,5 +120,12 @@\n-                if (result1.hasErrors() ^ result2.hasErrors()) {\n-                    throw new AssertionError(\"Unexpected result: \" +\n-                            \"\\n task1: \" + result1.hasErrors() + \", info: \" + result1.compilationInfo() +\n-                            \"\\n task1: \" + result2.hasErrors() + \", info: \" + result2.compilationInfo());\n-                }\n+                task3.generate(result3 -> {\n+                    List<Diagnostic<? extends JavaFileObject>> list1 = result1.diagnosticsForKind(Diagnostic.Kind.ERROR);\n+                    List<Diagnostic<? extends JavaFileObject>> list2 = result2.diagnosticsForKind(Diagnostic.Kind.ERROR);\n+                    List<Diagnostic<? extends JavaFileObject>> list3 = result3.diagnosticsForKind(Diagnostic.Kind.ERROR).stream().filter(e -> !e.getCode().equals(\"compiler.err.not.exhaustive.statement\")).toList();\n+                    if (!(list1.size() == list2.size() && list3.size() == list2.size())) {\n+                        throw new AssertionError(\"Unexpected result: \" +\n+                                \"\\n task1: \" + result1.hasErrors() + \", info: \" + result1.compilationInfo() +\n+                                \"\\n task2: \" + result2.hasErrors() + \", info: \" + result2.compilationInfo() +\n+                                \"\\n task3: \" + result3.hasErrors() + \", info: \" + result3.compilationInfo()\n+                        );\n+                    }\n+                });\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitiveInstanceOfComboTest.java","additions":35,"deletions":7,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -116,0 +116,7 @@\n+        assertEquals(Character.MAX_VALUE, testUnboxingAndWideningCharacter1(Character.MAX_VALUE));\n+        assertEquals(Character.MAX_VALUE, testUnboxingAndWideningCharacter2(Character.MAX_VALUE));\n+        assertEquals(Character.MAX_VALUE, testUnboxingAndWideningCharacter3(Character.MAX_VALUE));\n+        assertEquals(Float.MAX_VALUE, testUnboxingAndWideningFloat(Float.MAX_VALUE));\n+        assertEquals(Float.MAX_VALUE, testUnboxingAndWideningFloatExplicitCast(Float.MAX_VALUE));\n+        assertEquals(42f, testUnboxingAndWideningLong(42L));\n+        assertEquals(2, testUnboxingAndWideningLong(Long.MAX_VALUE));\n@@ -568,0 +575,37 @@\n+    public static char testUnboxingAndWideningCharacter1(Character test) {\n+        return switch (test) {\n+            case char c -> c;\n+        };\n+    }\n+\n+    public static int testUnboxingAndWideningCharacter2(Character test) {\n+        return switch (test) {\n+            case int c -> c;\n+        };\n+    }\n+\n+    public static float testUnboxingAndWideningCharacter3(Character test) {\n+        return switch (test) {\n+            case float f -> f;\n+        };\n+    }\n+    public static float testUnboxingAndWideningLong(Long test) {\n+        return switch (test) {\n+            case float y -> y;\n+            default -> 2;\n+        };\n+    }\n+\n+    public static double testUnboxingAndWideningFloat(Float test) {\n+        return switch (test) {\n+            case double y -> y;\n+            default -> 2;\n+        };\n+    }\n+\n+    public static double testUnboxingAndWideningFloatExplicitCast(Object test) {\n+        return switch ((Float) test) {\n+            case double y -> y;\n+            default -> 2;\n+        };\n+    }\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitivePatternsSwitch.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -244,0 +244,20 @@\n+\n+    public static int disallowedUnboxingAndNarrowing1() {\n+        Long n = 42l;\n+        return switch (n) { \/\/ Error - not exhaustive and not allowed\n+            case char c -> -1 ;\n+        };\n+    }\n+\n+    public static int disallowedUnboxingAndNarrowing2() {\n+        Long n = 42l;\n+        return switch (n) { \/\/ Error - not exhaustive and not allowed\n+            case int c -> -1 ;\n+        };\n+    }\n+\n+    public static char disallowedUnboxingAndWidening(Short test) {\n+        return switch (test) {\n+            case char c -> c; \/\/ Error - not exhaustive and not allowed\n+        };\n+    }\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitivePatternsSwitchErrors.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -29,0 +29,3 @@\n+PrimitivePatternsSwitchErrors.java:248:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Long, char)\n+PrimitivePatternsSwitchErrors.java:255:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Long, int)\n+PrimitivePatternsSwitchErrors.java:261:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Short, char)\n@@ -38,0 +41,3 @@\n+PrimitivePatternsSwitchErrors.java:247:16: compiler.err.not.exhaustive\n+PrimitivePatternsSwitchErrors.java:254:16: compiler.err.not.exhaustive\n+PrimitivePatternsSwitchErrors.java:260:16: compiler.err.not.exhaustive\n@@ -40,1 +46,1 @@\n-37 errors\n\\ No newline at end of file\n+43 errors\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitivePatternsSwitchErrors.out","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}