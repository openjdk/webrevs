{"files":[{"patch":"@@ -913,22 +913,1 @@\n-      if (nm->entry_point() <= addr && addr < nm->code_end()) {\n-        \/\/ Pointing into an nmethod. Try to disassemble some instructions around addr.\n-        address start = (addr < nm->verified_entry_point()) ? nm->entry_point() : nm->verified_entry_point();\n-        address end = nm->code_end();\n-        \/\/ Try using relocations to find known instruction start and end points.\n-        \/\/ (Some platforms have variable length instructions and can only\n-        \/\/ disassemble correctly at instruction start addresses.)\n-        RelocIterator iter(nm, start);\n-        while (iter.next() && iter.addr() < addr) { \/\/ find relocation before addr\n-          start = iter.addr();\n-        }\n-        if (iter.has_current()) {\n-          if (iter.addr() == addr) iter.next(); \/\/ find relocation after addr\n-          if (iter.has_current()) end = iter.addr();\n-        }\n-\n-        \/\/ Always print hex. Disassembler may still have problems if start is not a correct instruction start.\n-        os::print_hex_dump(st, start, end, 1, \/* print_ascii=*\/false);\n-        if (!Disassembler::is_abstract()) {\n-          Disassembler::decode(start, end, st);\n-        }\n-      }\n+      nm->print_code_snippet(st, addr);\n","filename":"src\/hotspot\/share\/code\/codeBlob.cpp","additions":1,"deletions":22,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -3998,0 +3998,25 @@\n+void nmethod::print_code_snippet(outputStream* st, address addr) const {\n+  if (entry_point() <= addr && addr < code_end()) {\n+    \/\/ Pointing into the nmethod's code. Try to disassemble some instructions around addr.\n+    address start = (addr < verified_entry_point()) ? entry_point() : verified_entry_point();\n+    address end = code_end();\n+    \/\/ Try using relocations to find known instruction start and end points.\n+    \/\/ (Some platforms have variable length instructions and can only\n+    \/\/ disassemble correctly at instruction start addresses.)\n+    RelocIterator iter((nmethod*)this, start);\n+    while (iter.next() && iter.addr() < addr) { \/\/ find relocation before addr\n+      start = iter.addr();\n+    }\n+    if (iter.has_current()) {\n+      if (iter.addr() == addr) iter.next(); \/\/ find relocation after addr\n+      if (iter.has_current()) end = iter.addr();\n+    }\n+\n+    \/\/ Always print hex. Disassembler may still have problems when hitting an incorrect instruction start.\n+    os::print_hex_dump(st, start, end, 1, \/* print_ascii=*\/false);\n+    if (!Disassembler::is_abstract()) {\n+      Disassembler::decode(start, end, st);\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -999,0 +999,1 @@\n+  void print_code_snippet(outputStream* st, address addr) const;\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}