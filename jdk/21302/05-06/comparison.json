{"files":[{"patch":"@@ -396,1 +396,1 @@\n-        _num_workers(MAX2(1, os::active_processor_count() \/ CPUS_PER_WORKER - 1)),\n+        _num_workers(max_workers()),\n@@ -410,0 +410,8 @@\n+int ArchiveWorkers::max_workers() {\n+  return MAX2(0, MIN2(MAX_WORKERS, os::active_processor_count() \/ CPUS_PER_WORKER) - 1);\n+}\n+\n+bool ArchiveWorkers::is_parallel() {\n+  return _num_workers > 0;\n+}\n+\n@@ -411,1 +419,2 @@\n-  if (Atomic::cmpxchg(&_in_shutdown, false, true) == false) {\n+  if (is_parallel() &&\n+      Atomic::cmpxchg(&_in_shutdown, false, true, memory_order_relaxed) == false) {\n@@ -423,1 +432,1 @@\n-    if (Atomic::cmpxchg(&_started_workers, cur, cur + 1) == cur) {\n+    if (Atomic::cmpxchg(&_started_workers, cur, cur + 1, memory_order_relaxed) == cur) {\n@@ -433,1 +442,1 @@\n-  assert(_task == nullptr, \"Should not have running tasks\");\n+  assert(Atomic::load(&_task) == nullptr, \"Should not have running tasks\");\n@@ -435,3 +444,18 @@\n-  \/\/ Configure the execution.\n-  task->maybe_override_max_chunks(_num_workers * CHUNKS_PER_WORKER);\n-  Atomic::store(&_running_workers, _num_workers);\n+  if (is_parallel()) {\n+    run_task_multi(task);\n+  } else {\n+    run_task_single(task);\n+  }\n+}\n+\n+void ArchiveWorkers::run_task_single(ArchiveWorkerTask* task) {\n+  \/\/ Single thread needs no chunking.\n+  task->configure_max_chunks(1);\n+\n+  \/\/ Execute the task ourselves, as there are no workers.\n+  task->work(0, 1);\n+}\n+\n+void ArchiveWorkers::run_task_multi(ArchiveWorkerTask* task) {\n+  \/\/ Multiple threads can work with multiple chunks.\n+  task->configure_max_chunks(_num_workers * CHUNKS_PER_WORKER);\n@@ -440,0 +464,1 @@\n+  Atomic::store(&_running_workers, _num_workers);\n@@ -450,1 +475,1 @@\n-  Atomic::store(&_task, (ArchiveWorkerTask*)nullptr);\n+  Atomic::store(&_task, (ArchiveWorkerTask *) nullptr);\n@@ -467,2 +492,2 @@\n-void ArchiveWorkerTask::maybe_override_max_chunks(int max_chunks) {\n-  if (_max_chunks == -1) {\n+void ArchiveWorkerTask::configure_max_chunks(int max_chunks) {\n+  if (_max_chunks == 0) {\n@@ -474,0 +499,1 @@\n+  assert(is_parallel(), \"Should be in parallel mode\");\n@@ -480,1 +506,1 @@\n-  if (Atomic::sub(&_running_workers, 1) == 0) {\n+  if (Atomic::sub(&_running_workers, 1, memory_order_relaxed) == 0) {\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.cpp","additions":37,"deletions":11,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -300,0 +300,1 @@\n+  friend class ArchiveWorkerShutdownTask;\n@@ -307,1 +308,1 @@\n-  void maybe_override_max_chunks(int max_chunks);\n+  void configure_max_chunks(int max_chunks);\n@@ -310,2 +311,2 @@\n-  ArchiveWorkerTask(const char* name, int max_chunks = -1) :\n-      _name(name), _max_chunks(max_chunks), _chunk(0) {}\n+  ArchiveWorkerTask(const char* name) :\n+      _name(name), _max_chunks(0), _chunk(0) {}\n@@ -329,1 +330,4 @@\n-  ArchiveWorkerShutdownTask() : ArchiveWorkerTask(\"Archive Worker Shutdown\", 1) {}\n+  ArchiveWorkerShutdownTask() : ArchiveWorkerTask(\"Archive Worker Shutdown\") {\n+    \/\/ This task always have only one chunk.\n+    configure_max_chunks(1);\n+  }\n@@ -342,0 +346,4 @@\n+  \/\/ The absolute limit on the number of archive workers. This should protect\n+  \/\/ from workers stumbling over each other on very large machines.\n+  static constexpr int MAX_WORKERS = 16;\n+\n@@ -343,1 +351,1 @@\n-  \/\/ to take 1\/4 CPUs to provide decent parallelism without letting workers\n+  \/\/ to take 1\/2 CPUs to provide decent parallelism without letting workers\n@@ -345,1 +353,1 @@\n-  static constexpr int CPUS_PER_WORKER = 4;\n+  static constexpr int CPUS_PER_WORKER = 2;\n@@ -351,0 +359,2 @@\n+  static int max_workers();\n+\n@@ -364,0 +374,5 @@\n+  void run_task_single(ArchiveWorkerTask* task);\n+  void run_task_multi(ArchiveWorkerTask* task);\n+\n+  bool is_parallel();\n+\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.hpp","additions":21,"deletions":6,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -98,3 +98,0 @@\n-  product(bool, ArchivePreTouch, true, DIAGNOSTIC,                          \\\n-          \"Pre-touch archive regions, regardless of AlwaysPreTouch mode.\")  \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/cds\/cds_globals.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1746,16 +1746,0 @@\n-class ArchiveRegionPretouchTask : public ArchiveWorkerTask {\n-private:\n-  char* const _from;\n-  size_t const _bytes;\n-\n-public:\n-  ArchiveRegionPretouchTask(char* from, size_t bytes) :\n-    ArchiveWorkerTask(\"Archive Regions Pretouch\"), _from(from), _bytes(bytes) {}\n-\n-  void work(int chunk, int max_chunks) override {\n-    char* start = _from + MIN2(_bytes, _bytes * chunk \/ max_chunks);\n-    char* end   = _from + MIN2(_bytes, _bytes * (chunk + 1) \/ max_chunks);\n-    os::pretouch_memory(start, end);\n-  }\n-};\n-\n@@ -1763,2 +1747,1 @@\n- * Same as os::map_memory() but also pretouches memory unconditionally,\n- * as we are very likely to start writing into that memory during archive load.\n+ * Same as os::map_memory() but also pretouches if AlwaysPreTouch is enabled.\n@@ -1766,2 +1749,3 @@\n-char* FileMapInfo::map_memory(int fd, const char* file_name, size_t file_offset,\n-                              char *addr, size_t bytes, bool read_only, bool allow_exec) {\n+static char* map_memory(int fd, const char* file_name, size_t file_offset,\n+                        char *addr, size_t bytes, bool read_only,\n+                        bool allow_exec, MemTag mem_tag = mtNone) {\n@@ -1769,5 +1753,4 @@\n-                             (ArchivePreTouch || AlwaysPreTouch) ? false : read_only,\n-                             allow_exec, mtClassShared);\n-  if (mem != nullptr && (ArchivePreTouch || AlwaysPreTouch)) {\n-    ArchiveRegionPretouchTask pretouch(mem, bytes);\n-    _archive_workers.run_task(&pretouch);\n+                             AlwaysPreTouch ? false : read_only,\n+                             allow_exec, mem_tag);\n+  if (mem != nullptr && AlwaysPreTouch) {\n+    os::pretouch_memory(mem, mem + bytes);\n@@ -1918,1 +1901,1 @@\n-                            r->allow_exec());\n+                            r->allow_exec(), mtClassShared);\n@@ -1946,1 +1929,1 @@\n-                                 requested_addr, r->used_aligned(), read_only, allow_exec);\n+                                 requested_addr, r->used_aligned(), read_only, allow_exec, mtClassShared);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":10,"deletions":27,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -473,3 +473,0 @@\n-  char* map_memory(int fd, const char* file_name, size_t file_offset,\n-                   char *addr, size_t bytes, bool read_only, bool allow_exec);\n-\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}