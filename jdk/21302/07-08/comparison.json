{"files":[{"patch":"@@ -393,0 +393,2 @@\n+ArchiveWorkers ArchiveWorkers::_workers;\n+\n@@ -396,1 +398,1 @@\n-        _num_workers(max_workers()),\n+        _num_workers(0),\n@@ -398,1 +400,1 @@\n-        _waiting_workers(_num_workers),\n+        _waiting_workers(0),\n@@ -400,1 +402,1 @@\n-        _in_shutdown(false),\n+        _state(state_uninitialized),\n@@ -402,2 +404,0 @@\n-  \/\/ Kick off pool startup by creating a single worker.\n-  start_worker_if_needed();\n@@ -406,3 +406,8 @@\n-ArchiveWorkers::~ArchiveWorkers() {\n-  \/\/ If nothing called shutdown yet, we need to gracefully shutdown now.\n-  shutdown();\n+void ArchiveWorkers::initialize() {\n+  assert(Atomic::load(&_state) == state_uninitialized, \"Should be\");\n+\n+  Atomic::store(&_num_workers, max_workers());\n+  Atomic::store(&_state, state_initialized);\n+\n+  \/\/ Kick off pool startup by creating a single worker.\n+  start_worker_if_needed();\n@@ -424,4 +429,5 @@\n-  if (is_parallel() &&\n-      Atomic::cmpxchg(&_in_shutdown, false, true, memory_order_relaxed) == false) {\n-    \/\/ Execute a shutdown task and block until all workers respond.\n-    run_task(&_shutdown_task);\n+  if (is_parallel()) {\n+    if (Atomic::cmpxchg(&_state, state_initialized, state_shutdown, memory_order_relaxed) == false) {\n+      \/\/ Execute a shutdown task and block until all workers respond.\n+      run_task(&_shutdown_task);\n+    }\n@@ -459,1 +465,3 @@\n-  assert(task == &_shutdown_task || !_in_shutdown, \"Should not be shutdown\");\n+  assert((Atomic::load(&_state) == state_initialized) ||\n+         ((Atomic::load(&_state) == state_shutdown) && (task == &_shutdown_task)),\n+         \"Should be in correct state\");\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.cpp","additions":21,"deletions":13,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -349,1 +349,0 @@\n-\n@@ -352,0 +351,3 @@\n+  \/\/ Global shared instance. Can be uninitialized, can be shut down.\n+  static ArchiveWorkers _workers;\n+\n@@ -360,1 +362,2 @@\n-  bool _in_shutdown;\n+\n+  enum { state_uninitialized, state_initialized, state_shutdown} _state;\n@@ -372,1 +375,0 @@\n-public:\n@@ -374,1 +376,4 @@\n-  ~ArchiveWorkers();\n+\n+public:\n+  static ArchiveWorkers* workers() { return &_workers; }\n+  void initialize();\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.hpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1741,3 +1741,0 @@\n-\n-  \/\/ Workers are no longer needed.\n-  _archive_workers.shutdown();\n@@ -1973,0 +1970,1 @@\n+    assert(end > start, \"Sanity: no empty slices\");\n@@ -2018,1 +2016,1 @@\n-      _archive_workers.run_task(&task);\n+      ArchiveWorkers::workers()->run_task(&task);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -345,2 +345,0 @@\n-  ArchiveWorkers _archive_workers;\n-\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -964,0 +964,3 @@\n+  \/\/ We are about to open the archives. Initialize workers now.\n+  ArchiveWorkers::workers()->initialize();\n+\n@@ -1573,0 +1576,3 @@\n+\n+  \/\/ Workers are no longer needed.\n+  ArchiveWorkers::workers()->shutdown();\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}