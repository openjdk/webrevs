{"files":[{"patch":"@@ -279,4 +279,4 @@\n-     * It is the simple name (e.g., {@code int}) for primitive types, the\n-     * unqualified class name for class or interface types, or the\n-     * human-readable name of the component type suffixed with the\n-     * appropriate number of {@code []} pairs for array types.\n+     * For primitive types, this method returns the simple name (such as {@code int}).\n+     * For class or interface types, this method returns the unqualified class name.\n+     * For array types, this method returns the human-readable name of the component\n+     * type suffixed with the appropriate number of {@code []} pairs.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ClassDesc.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-        return componentType().displayName() + \"[]\".repeat(rank);\n+        return elementType.displayName() + \"[]\".repeat(rank);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/constant\/ArrayClassDescImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-\/**\n+\/*\n@@ -45,1 +45,1 @@\n- * @bug 8215510 8283075\n+ * @bug 8215510 8283075 8338544\n@@ -71,0 +71,22 @@\n+        } else {\n+            assertNull(r.componentType());\n+        }\n+\n+        if (!r.isClassOrInterface()) {\n+            assertEquals(r.packageName(), \"\");\n+        }\n+    }\n+\n+    private static String classDisplayName(Class<?> c) {\n+        int arrayLevel = 0;\n+        while (c.isArray()) {\n+            arrayLevel++;\n+            c = c.componentType();\n+        }\n+        String name = c.getName();\n+        String simpleClassName;\n+        if (c.isPrimitive()) {\n+            simpleClassName = name;\n+        } else {\n+            int lastDot = name.lastIndexOf('.');\n+            simpleClassName = lastDot == -1 ? name : name.substring(lastDot + 1);\n@@ -72,0 +94,1 @@\n+        return simpleClassName + \"[]\".repeat(arrayLevel);\n@@ -80,0 +103,7 @@\n+        if (r.isArray()) {\n+            testClassDesc(r.componentType(), c.componentType());\n+        }\n+        if (r.isClassOrInterface()) {\n+            assertEquals(r.packageName(), c.getPackageName());\n+        }\n+        assertEquals(r.displayName(), classDisplayName(c));\n@@ -146,1 +176,2 @@\n-            assertEquals(r.arrayType().resolveConstantDesc(LOOKUP), String[].class);\n+            testClassDesc(r.arrayType(), String[].class);\n+            testClassDesc(r.arrayType(3), String[][][].class);\n","filename":"test\/jdk\/java\/lang\/constant\/ClassDescTest.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"}]}