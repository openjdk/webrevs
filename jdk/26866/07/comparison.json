{"files":[{"patch":"@@ -141,1 +141,1 @@\n-void CompilationPolicy::replay_training_at_init_impl(InstanceKlass* klass, TRAPS) {\n+void CompilationPolicy::replay_training_at_init_impl(InstanceKlass* klass, JavaThread* current) {\n@@ -153,1 +153,1 @@\n-          if (ctd->init_deps_left() == 0) {\n+          if (ctd->init_deps_left_acquire() == 0) {\n@@ -156,2 +156,2 @@\n-              const methodHandle mh(THREAD, const_cast<Method*>(mtd->holder()));\n-              CompilationPolicy::maybe_compile_early(mh, THREAD);\n+              const methodHandle mh(current, const_cast<Method*>(mtd->holder()));\n+              CompilationPolicy::maybe_compile_early(mh, current);\n@@ -166,1 +166,1 @@\n-void CompilationPolicy::replay_training_at_init(InstanceKlass* klass, TRAPS) {\n+void CompilationPolicy::replay_training_at_init(InstanceKlass* klass, JavaThread* current) {\n@@ -169,1 +169,1 @@\n-    _training_replay_queue.push(klass, TrainingReplayQueue_lock, THREAD);\n+    _training_replay_queue.push(klass, TrainingReplayQueue_lock, current);\n@@ -184,1 +184,1 @@\n-void CompilationPolicy::replay_training_at_init_loop(TRAPS) {\n+void CompilationPolicy::replay_training_at_init_loop(JavaThread* current) {\n@@ -186,1 +186,1 @@\n-    InstanceKlass* ik = _training_replay_queue.pop(TrainingReplayQueue_lock, THREAD);\n+    InstanceKlass* ik = _training_replay_queue.pop(TrainingReplayQueue_lock, current);\n@@ -188,1 +188,1 @@\n-      replay_training_at_init_impl(ik, THREAD);\n+      replay_training_at_init_impl(ik, current);\n@@ -449,1 +449,1 @@\n-      st->print(\"%d\", ctd->init_deps_left());\n+      st->print(\"%d\", ctd->init_deps_left_acquire());\n@@ -1175,1 +1175,1 @@\n-  if (SkipTier2IfPossible && ctd->init_deps_left() == 0) {\n+  if (SkipTier2IfPossible && ctd->init_deps_left_acquire() == 0) {\n@@ -1203,1 +1203,1 @@\n-  if (ctd != nullptr && ctd->init_deps_left() == 0) {\n+  if (ctd != nullptr && ctd->init_deps_left_acquire() == 0) {\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -77,2 +77,2 @@\n-  void push(T* value, Monitor* lock, TRAPS) {\n-    MonitorLocker locker(THREAD, lock);\n+  void push(T* value, Monitor* lock, JavaThread* current) {\n+    MonitorLocker locker(current, lock);\n@@ -85,3 +85,3 @@\n-  T* pop(Monitor* lock, TRAPS) {\n-    MonitorLocker locker(THREAD, lock);\n-    while(is_empty_unlocked() && !CompileBroker::is_compilation_disabled_forever()) {\n+  T* pop(Monitor* lock, JavaThread* current) {\n+    MonitorLocker locker(current, lock);\n+    while (is_empty_unlocked() && !CompileBroker::is_compilation_disabled_forever()) {\n@@ -94,6 +94,3 @@\n-  T* try_pop(Monitor* lock, TRAPS) {\n-    MonitorLocker locker(THREAD, lock);\n-    T* value = nullptr;\n-    if (!is_empty_unlocked()) {\n-      value = pop_unlocked();\n-    }\n+  T* try_pop(Monitor* lock, JavaThread* current) {\n+    MonitorLocker locker(current, lock);\n+    T* value = pop_unlocked();\n@@ -102,1 +99,0 @@\n-\n@@ -345,1 +341,1 @@\n-  static void replay_training_at_init_impl(InstanceKlass* klass, TRAPS);\n+  static void replay_training_at_init_impl(InstanceKlass* klass, JavaThread* current);\n@@ -355,2 +351,2 @@\n-  static void replay_training_at_init(InstanceKlass* klass, TRAPS);\n-  static void replay_training_at_init_loop(TRAPS);\n+  static void replay_training_at_init(InstanceKlass* klass, JavaThread* current);\n+  static void replay_training_at_init_loop(JavaThread* current);\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.hpp","additions":11,"deletions":15,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-  if (TrainingData::have_data()) {\n+  if (TrainingData::have_data() && !TrainingData::assembling_data()) {\n@@ -101,3 +101,15 @@\n-        mtd->verify();\n-      } else if (td->is_CompileTrainingData()) {\n-        td->as_CompileTrainingData()->verify();\n+        mtd->verify(\/*verify_dep_counter*\/true);\n+      }\n+    });\n+  }\n+  if (TrainingData::need_data()) {\n+    TrainingDataLocker l;\n+    training_data_set()->iterate([&](TrainingData* td) {\n+      if (td->is_KlassTrainingData()) {\n+        KlassTrainingData* ktd = td->as_KlassTrainingData();\n+        ktd->verify();\n+      } else if (td->is_MethodTrainingData()) {\n+        MethodTrainingData* mtd = td->as_MethodTrainingData();\n+        \/\/ During the training run init deps tracking is not setup yet,\n+        \/\/ don't verify it.\n+        mtd->verify(\/*verify_dep_counter*\/false);\n@@ -232,1 +244,1 @@\n-void CompileTrainingData::dec_init_deps_left(KlassTrainingData* ktd) {\n+void CompileTrainingData::dec_init_deps_left_release(KlassTrainingData* ktd) {\n@@ -453,1 +465,1 @@\n-    comp_dep(i)->dec_init_deps_left(this);\n+    comp_dep(i)->dec_init_deps_left_release(this);\n@@ -479,0 +491,1 @@\n+  }\n@@ -480,3 +493,2 @@\n-    if (AOTVerifyTrainingData) {\n-      training_data_set()->verify();\n-    }\n+  if (AOTVerifyTrainingData) {\n+    TrainingData::verify();\n@@ -595,12 +607,3 @@\n-void MethodTrainingData::verify() {\n-  iterate_compiles([](CompileTrainingData* ctd) {\n-    ctd->verify();\n-\n-    int init_deps_left1 = ctd->init_deps_left();\n-    int init_deps_left2 = ctd->compute_init_deps_left();\n-\n-    if (init_deps_left1 != init_deps_left2) {\n-      ctd->print_on(tty); tty->cr();\n-    }\n-    guarantee(init_deps_left1 == init_deps_left2, \"mismatch: %d %d %d\",\n-              init_deps_left1, init_deps_left2, ctd->init_deps_left());\n+void MethodTrainingData::verify(bool verify_dep_counter) {\n+  iterate_compiles([&](CompileTrainingData* ctd) {\n+    ctd->verify(verify_dep_counter);\n@@ -610,1 +613,1 @@\n-void CompileTrainingData::verify() {\n+void CompileTrainingData::verify(bool verify_dep_counter) {\n@@ -627,0 +630,12 @@\n+\n+  if (verify_dep_counter) {\n+    int init_deps_left1 = init_deps_left_acquire();\n+    int init_deps_left2 = compute_init_deps_left();\n+\n+    bool invariant = (init_deps_left1 >= init_deps_left2);\n+    if (!invariant) {\n+      print_on(tty);\n+      tty->cr();\n+    }\n+    guarantee(invariant, \"init deps invariant violation: %d >= %d\", init_deps_left1, init_deps_left2);\n+  }\n","filename":"src\/hotspot\/share\/oops\/trainingData.cpp","additions":37,"deletions":22,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -676,3 +676,3 @@\n-  void dec_init_deps_left(KlassTrainingData* ktd);\n-  int init_deps_left() const {\n-    return Atomic::load(&_init_deps_left);\n+  void dec_init_deps_left_release(KlassTrainingData* ktd);\n+  int init_deps_left_acquire() const {\n+    return Atomic::load_acquire(&_init_deps_left);\n@@ -710,1 +710,1 @@\n-  void verify();\n+  void verify(bool verify_dep_counter);\n@@ -831,1 +831,1 @@\n-  void verify();\n+  void verify(bool verify_dep_counter);\n","filename":"src\/hotspot\/share\/oops\/trainingData.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -198,4 +198,1 @@\n-  \/\/ Initialize TrainingData only we're recording\/replaying\n-  if (TrainingData::have_data() || TrainingData::need_data()) {\n-   TrainingData::initialize();\n-  }\n+  TrainingData::initialize();\n","filename":"src\/hotspot\/share\/runtime\/init.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"compiler\/compilationPolicy.hpp\"\n@@ -518,0 +519,6 @@\n+  #if INCLUDE_CDS\n+  if (AOTVerifyTrainingData) {\n+    TrainingData::verify();\n+  }\n+  #endif\n+\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}