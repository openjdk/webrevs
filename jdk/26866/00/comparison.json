{"files":[{"patch":"@@ -141,0 +141,7 @@\n+ void CompilationPolicy::flush_replay_training_at_init(TRAPS) {\n+    MonitorLocker locker(THREAD, TrainingReplayQueue_lock);\n+    while (!_training_replay_queue.is_empty_unlocked() || _training_replay_queue.is_processing_unlocked()) {\n+      locker.wait(); \/\/ let the replay training thread drain the queue\n+    }\n+ }\n+\n@@ -189,0 +196,1 @@\n+      _training_replay_queue.processing_done(TrainingReplayQueue_lock, THREAD);\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+  int _processing;\n@@ -71,0 +72,1 @@\n+      ++_processing;\n@@ -75,0 +77,4 @@\n+  void processing_done_unlocked() {\n+    precond(_processing > 0);\n+    --_processing;\n+  }\n@@ -76,1 +82,1 @@\n-  Queue() : _head(nullptr), _tail(nullptr) { }\n+  Queue() : _head(nullptr), _tail(nullptr), _processing(0) { }\n@@ -84,0 +90,1 @@\n+  bool is_processing_unlocked() const { return _processing > 0; }\n@@ -96,4 +103,1 @@\n-    T* value = nullptr;\n-    if (!is_empty_unlocked()) {\n-      value = pop_unlocked();\n-    }\n+    T* value = pop_unlocked();\n@@ -103,0 +107,6 @@\n+  void processing_done(Monitor* lock, TRAPS) {\n+    MonitorLocker locker(THREAD, lock);\n+    processing_done_unlocked();\n+    locker.notify_all();\n+  }\n+\n@@ -355,0 +365,1 @@\n+  static void flush_replay_training_at_init(TRAPS);\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.hpp","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-  if (TrainingData::have_data()) {\n+  if (TrainingData::have_data() && !TrainingData::assembling_data()) {\n@@ -101,3 +101,13 @@\n-        mtd->verify();\n-      } else if (td->is_CompileTrainingData()) {\n-        td->as_CompileTrainingData()->verify();\n+        mtd->verify(true);\n+      }\n+    });\n+  }\n+  if (TrainingData::need_data()) {\n+    TrainingDataLocker l;\n+    training_data_set()->iterate([&](TrainingData* td) {\n+      if (td->is_KlassTrainingData()) {\n+        KlassTrainingData* ktd = td->as_KlassTrainingData();\n+        ktd->verify();\n+      } else if (td->is_MethodTrainingData()) {\n+        MethodTrainingData* mtd = td->as_MethodTrainingData();\n+        mtd->verify(false);\n@@ -479,0 +489,1 @@\n+  }\n@@ -480,3 +491,2 @@\n-    if (AOTVerifyTrainingData) {\n-      training_data_set()->verify();\n-    }\n+  if (AOTVerifyTrainingData) {\n+    TrainingData::verify();\n@@ -595,12 +605,3 @@\n-void MethodTrainingData::verify() {\n-  iterate_compiles([](CompileTrainingData* ctd) {\n-    ctd->verify();\n-\n-    int init_deps_left1 = ctd->init_deps_left();\n-    int init_deps_left2 = ctd->compute_init_deps_left();\n-\n-    if (init_deps_left1 != init_deps_left2) {\n-      ctd->print_on(tty); tty->cr();\n-    }\n-    guarantee(init_deps_left1 == init_deps_left2, \"mismatch: %d %d %d\",\n-              init_deps_left1, init_deps_left2, ctd->init_deps_left());\n+void MethodTrainingData::verify(bool verify_dep_counter) {\n+  iterate_compiles([&](CompileTrainingData* ctd) {\n+    ctd->verify(verify_dep_counter);\n@@ -610,1 +611,1 @@\n-void CompileTrainingData::verify() {\n+void CompileTrainingData::verify(bool verify_dep_counter) {\n@@ -627,0 +628,12 @@\n+\n+  if (verify_dep_counter) {\n+    int init_deps_left1 = init_deps_left();\n+    int init_deps_left2 = compute_init_deps_left();\n+\n+    if (init_deps_left1 != init_deps_left2) {\n+      print_on(tty);\n+      tty->cr();\n+    }\n+    guarantee(init_deps_left1 == init_deps_left2,\n+              \"init deps invariant violation: %d == %d\", init_deps_left1, init_deps_left2);\n+  }\n","filename":"src\/hotspot\/share\/oops\/trainingData.cpp","additions":33,"deletions":20,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -678,1 +678,1 @@\n-    return Atomic::load(&_init_deps_left);\n+    return Atomic::load_acquire(&_init_deps_left);\n@@ -710,1 +710,1 @@\n-  void verify();\n+  void verify(bool verify_dep_counter);\n@@ -831,1 +831,1 @@\n-  void verify();\n+  void verify(bool verify_dep_counter);\n","filename":"src\/hotspot\/share\/oops\/trainingData.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -198,4 +198,1 @@\n-  \/\/ Initialize TrainingData only we're recording\/replaying\n-  if (TrainingData::have_data() || TrainingData::need_data()) {\n-   TrainingData::initialize();\n-  }\n+  TrainingData::initialize();\n","filename":"src\/hotspot\/share\/runtime\/init.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"compiler\/compilationPolicy.hpp\"\n@@ -518,0 +519,6 @@\n+  if (AOTVerifyTrainingData) {\n+    EXCEPTION_MARK;\n+    CompilationPolicy::flush_replay_training_at_init(THREAD);\n+    TrainingData::verify();\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}