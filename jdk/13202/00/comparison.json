{"files":[{"patch":"@@ -31,1 +31,1 @@\n-#include \"assembler_riscv.inline.hpp\"\n+#include \"code\/codeCache.hpp\"\n@@ -511,1 +511,1 @@\n-    guarantee(is_offset_in_range(offset, 12), \"offset is invalid.\");                               \\\n+    guarantee(is_simm12(offset), \"offset is invalid.\");                                            \\\n@@ -534,1 +534,1 @@\n-    guarantee(is_offset_in_range(offset, 12), \"offset is invalid.\");                               \\\n+    guarantee(is_simm12(offset), \"offset is invalid.\");                                            \\\n@@ -552,1 +552,1 @@\n-    guarantee(is_imm_in_range(offset, 12, 1), \"offset is invalid.\");                                     \\\n+    guarantee(is_simm13(offset) && ((offset % 2) == 0), \"offset is invalid.\");                           \\\n@@ -581,1 +581,1 @@\n-    guarantee(is_offset_in_range(offset, 12), \"offset is invalid.\");                                        \\\n+    guarantee(is_simm12(offset), \"offset is invalid.\");                                                     \\\n@@ -606,1 +606,1 @@\n-    guarantee(is_unsigned_imm_in_range(csr, 12, 0), \"csr is invalid\");                \\\n+    guarantee(is_uimm12(csr), \"csr is invalid\");                                      \\\n@@ -624,2 +624,2 @@\n-    guarantee(is_unsigned_imm_in_range(csr, 12, 0), \"csr is invalid\");                \\\n-    guarantee(is_unsigned_imm_in_range(uimm, 5, 0), \"uimm is invalid\");               \\\n+    guarantee(is_uimm12(csr), \"csr is invalid\");                                      \\\n+    guarantee(is_uimm5(uimm), \"uimm is invalid\");                                     \\\n@@ -644,1 +644,1 @@\n-    guarantee(is_imm_in_range(offset, 20, 1), \"offset is invalid.\");                  \\\n+    guarantee(is_simm21(offset) && ((offset % 2) == 0), \"offset is invalid.\");        \\\n@@ -661,1 +661,1 @@\n-    guarantee(is_offset_in_range(offset, 12), \"offset is invalid.\");                  \\\n+    guarantee(is_simm12(offset), \"offset is invalid.\");                               \\\n@@ -806,1 +806,1 @@\n-    guarantee(is_imm_in_range(imm, 12, 0), \"Immediate is out of validity\");                 \\\n+    guarantee(is_simm12(imm), \"Immediate is out of validity\");                              \\\n@@ -827,1 +827,1 @@\n-    guarantee(is_unsigned_imm_in_range(imm, 12, 0), \"Immediate is out of validity\");        \\\n+    guarantee(is_uimm12(imm), \"Immediate is out of validity\");                              \\\n@@ -1153,1 +1153,1 @@\n-    guarantee(is_unsigned_imm_in_range(imm, 5, 0), \"imm is invalid\");     \\\n+    guarantee(is_uimm5(imm), \"imm is invalid\");                           \\\n@@ -1283,1 +1283,1 @@\n-    guarantee(is_unsigned_imm_in_range(imm, 5, 0), \"imm is invalid\");                              \\\n+    guarantee(is_uimm5(imm), \"imm is invalid\");                                                    \\\n@@ -1527,1 +1527,1 @@\n-    guarantee(is_imm_in_range(imm, 5, 0), \"imm is invalid\");                                       \\\n+    guarantee(is_simm5(imm), \"imm is invalid\");                                                    \\\n@@ -1567,1 +1567,1 @@\n-    guarantee(is_imm_in_range(imm, 5, 0), \"imm is invalid\");               \\\n+    guarantee(is_simm5(imm), \"imm is invalid\");                            \\\n@@ -1654,1 +1654,1 @@\n-    guarantee(is_unsigned_imm_in_range(width, 3, 0), \"width is invalid\");            \\\n+    guarantee(is_uimm3(width), \"width is invalid\");                                  \\\n@@ -1974,1 +1974,1 @@\n-    assert_cond(is_imm_in_range(imm, 6, 0));                                                 \\\n+    assert_cond(is_simm6(imm));                                                              \\\n@@ -1991,1 +1991,1 @@\n-    assert_cond(is_imm_in_range(imm, 10, 0));                                                \\\n+    assert_cond(is_simm10(imm));                                                             \\\n@@ -2012,1 +2012,1 @@\n-    assert_cond(is_unsigned_imm_in_range(uimm, 10, 0));                                      \\\n+    assert_cond(is_uimm10(uimm));                                                            \\\n@@ -2032,1 +2032,1 @@\n-    assert_cond(is_unsigned_imm_in_range(shamt, 6, 0));                                      \\\n+    assert_cond(is_uimm6(shamt));                                                            \\\n@@ -2050,1 +2050,1 @@\n-    assert_cond(is_unsigned_imm_in_range(shamt, 6, 0));                                      \\\n+    assert_cond(is_uimm6(shamt));                                                            \\\n@@ -2069,1 +2069,1 @@\n-    assert_cond(is_imm_in_range(imm, 6, 0));                                                 \\\n+    assert_cond(is_simm6(imm));                                                              \\\n@@ -2159,1 +2159,1 @@\n-    assert_cond(is_imm_in_range(offset, 11, 1));                                             \\\n+    assert(is_simm12(offset) && ((offset % 2) == 0), \"just checking\");                       \\\n@@ -2176,1 +2176,1 @@\n-    assert_cond(is_imm_in_range(distance, 11, 1));                                           \\\n+    assert(is_simm12(distance) && ((distance % 2) == 0), \"just checking\");                   \\\n@@ -2189,1 +2189,1 @@\n-    assert_cond(is_imm_in_range(imm, 8, 1));                                                 \\\n+    assert(is_simm9(imm) && ((imm % 2) == 0), \"just checking\");                              \\\n@@ -2204,1 +2204,1 @@\n-    assert_cond(is_imm_in_range(distance, 8, 1));                                            \\\n+    assert(is_simm9(distance) && ((distance % 2) == 0), \"just checking\");                    \\\n@@ -2218,1 +2218,1 @@\n-    assert_cond(is_imm_in_range(imm, 18, 0));                                                \\\n+    assert_cond(is_simm18(imm));                                                             \\\n@@ -2237,1 +2237,1 @@\n-    assert_cond(is_imm_in_range(imm, 6, 0));                                                 \\\n+    assert_cond(is_simm6(imm));                                                              \\\n@@ -2254,1 +2254,1 @@\n-    assert_cond(is_unsigned_imm_in_range(uimm, 9, 0));                                       \\\n+    assert_cond(is_uimm9(uimm));                                                             \\\n@@ -2273,1 +2273,1 @@\n-    assert_cond(is_unsigned_imm_in_range(uimm, 9, 0));                                       \\\n+    assert_cond(is_uimm9(uimm));                                                             \\\n@@ -2291,1 +2291,1 @@\n-    assert_cond(is_unsigned_imm_in_range(uimm, 8, 0));                                       \\\n+    assert_cond(is_uimm8(uimm));                                                             \\\n@@ -2312,1 +2312,1 @@\n-    assert_cond(is_unsigned_imm_in_range(uimm, 9, 0));                                       \\\n+    assert_cond(is_uimm9(uimm));                                                             \\\n@@ -2330,1 +2330,1 @@\n-    assert_cond(is_unsigned_imm_in_range(uimm, 8, 0));                                       \\\n+    assert_cond(is_uimm8(uimm));                                                             \\\n@@ -2347,1 +2347,1 @@\n-    assert_cond(is_unsigned_imm_in_range(uimm, 8, 0));                                       \\\n+    assert_cond(is_uimm8(uimm));                                                             \\\n@@ -2366,1 +2366,1 @@\n-    assert_cond(is_unsigned_imm_in_range(uimm, 7, 0));                                       \\\n+    assert_cond(is_uimm7(uimm));                                                             \\\n@@ -2464,1 +2464,2 @@\n-      is_unsigned_imm_in_range(imm12, bits, 0) &&                                            \\\n+      (imm12 >= 0) &&                                                                        \\\n+      is_uimm(imm12, bits) &&                                                                \\\n@@ -2477,1 +2478,2 @@\n-      is_unsigned_imm_in_range(imm12, bits, 0) &&                                            \\\n+      (imm12 >= 0) &&                                                                        \\\n+      is_uimm(imm12, bits) &&                                                                \\\n@@ -2489,1 +2491,2 @@\n-      is_unsigned_imm_in_range(imm12, bits, 0) &&                                            \\\n+      (imm12 >= 0) &&                                                                        \\\n+      is_uimm(imm12, bits) &&                                                                \\\n@@ -2672,1 +2675,1 @@\n-      if (Rd == Rs1 && is_imm_in_range(imm, 6, 0)) {                                         \\\n+      if (Rd == Rs1 && is_simm6(imm)) {                                                      \\\n@@ -2679,1 +2682,1 @@\n-        if (Rd == Rs1 && (imm & 0b1111) == 0x0 && is_imm_in_range(imm, 10, 0)) {             \\\n+        if (Rd == Rs1 && (imm & 0b1111) == 0x0 && is_simm10(imm)) {                          \\\n@@ -2682,1 +2685,1 @@\n-        } else if (Rd->is_compressed_valid() && (imm & 0b11) == 0x0 && is_unsigned_imm_in_range(imm, 10, 0)) { \\\n+        } else if (Rd->is_compressed_valid() && (imm & 0b11) == 0x0 && (imm >= 0) && is_uimm10(imm)) { \\\n@@ -2699,1 +2702,1 @@\n-    if (do_compress() && (Rd == Rs1 && Rd != x0 && is_imm_in_range(imm, 6, 0))) {            \\\n+    if (do_compress() && (Rd == Rs1 && Rd != x0 && is_simm6(imm))) {                         \\\n@@ -2715,1 +2718,1 @@\n-        (Rd == Rs1 && Rd->is_compressed_valid() && is_imm_in_range(imm, 6, 0))) {            \\\n+        (Rd == Rs1 && Rd->is_compressed_valid() && is_simm6(imm))) {                         \\\n@@ -2765,1 +2768,1 @@\n-    if (do_compress() && (Rd != x0 && Rd != x2 && imm != 0 && is_imm_in_range(imm, 18, 0))) { \\\n+    if (do_compress() && (Rd != x0 && Rd != x2 && imm != 0 && is_simm18(imm))) {             \\\n@@ -2829,3 +2832,16 @@\n-  static bool operand_valid_for_add_immediate(long imm) {\n-    return is_imm_in_range(imm, 12, 0);\n-  }\n+  static bool is_simm5(int64_t x);\n+  static bool is_simm6(int64_t x);\n+  static bool is_simm12(int64_t x);\n+  static bool is_simm13(int64_t x);\n+  static bool is_simm18(int64_t x);\n+  static bool is_simm21(int64_t x);\n+\n+  static bool is_uimm3(uint64_t x);\n+  static bool is_uimm5(uint64_t x);\n+  static bool is_uimm6(uint64_t x);\n+  static bool is_uimm7(uint64_t x);\n+  static bool is_uimm8(uint64_t x);\n+  static bool is_uimm9(uint64_t x);\n+  static bool is_uimm10(uint64_t x);\n+\n+  static bool operand_valid_for_add_sub_immediate(long imm);\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":64,"deletions":48,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -34,4 +34,6 @@\n-inline bool is_imm_in_range(long value, unsigned bits, unsigned align_bits) {\n-  intx sign_bits = (value >> (bits + align_bits - 1));\n-  return ((value & right_n_bits(align_bits)) == 0) && ((sign_bits == 0) || (sign_bits == -1));\n-}\n+inline bool Assembler::is_simm5(int64_t x) { return is_simm(x, 5); }\n+inline bool Assembler::is_simm6(int64_t x) { return is_simm(x, 6); }\n+inline bool Assembler::is_simm12(int64_t x) { return is_simm(x, 12); }\n+inline bool Assembler::is_simm13(int64_t x) { return is_simm(x, 13); }\n+inline bool Assembler::is_simm18(int64_t x) { return is_simm(x, 18); }\n+inline bool Assembler::is_simm21(int64_t x) { return is_simm(x, 21); }\n@@ -39,3 +41,7 @@\n-inline bool is_unsigned_imm_in_range(intx value, unsigned bits, unsigned align_bits) {\n-  return (value >= 0) && ((value & right_n_bits(align_bits)) == 0) && ((value >> (align_bits + bits)) == 0);\n-}\n+inline bool Assembler::is_uimm3(uint64_t x) { return is_uimm(x, 3); }\n+inline bool Assembler::is_uimm5(uint64_t x) { return is_uimm(x, 5); }\n+inline bool Assembler::is_uimm6(uint64_t x) { return is_uimm(x, 6); }\n+inline bool Assembler::is_uimm7(uint64_t x) { return is_uimm(x, 7); }\n+inline bool Assembler::is_uimm8(uint64_t x) { return is_uimm(x, 8); }\n+inline bool Assembler::is_uimm9(uint64_t x) { return is_uimm(x, 9); }\n+inline bool Assembler::is_uimm10(uint64_t x) { return is_uimm(x, 10); }\n@@ -43,3 +49,1 @@\n-inline bool is_offset_in_range(intx offset, unsigned bits) {\n-  return is_imm_in_range(offset, bits, 0);\n-}\n+inline bool Assembler::operand_valid_for_add_sub_immediate(int64_t imm) { return is_simm12(imm); }\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.inline.hpp","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-        if (is_imm_in_range(c - 1, 12, 0)) {\n+        if (Assembler::is_simm12(c - 1)) {\n@@ -78,1 +78,1 @@\n-        if (is_imm_in_range(c - 1, 12, 0)) {\n+        if (Assembler::is_simm12(c - 1)) {\n@@ -201,1 +201,1 @@\n-          if (is_imm_in_range(c - 1, 12, 0)) {\n+          if (Assembler::is_simm12(c - 1)) {\n@@ -220,1 +220,1 @@\n-          if (is_imm_in_range(c - 1, 12, 0)) {\n+          if (Assembler::is_simm12(c - 1)) {\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_arith_riscv.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1297,1 +1297,1 @@\n-      if (Assembler::operand_valid_for_add_immediate(right_const)) {\n+      if (Assembler::operand_valid_for_add_sub_immediate(right_const)) {\n@@ -1312,1 +1312,1 @@\n-      if (Assembler::operand_valid_for_add_immediate(right_const)) {\n+      if (Assembler::operand_valid_for_add_sub_immediate(right_const)) {\n@@ -1828,1 +1828,1 @@\n-    if (!is_imm_in_range(offset, 12, 0)) {\n+    if (!Assembler::is_simm12(offset)) {\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -129,2 +129,2 @@\n-    return Assembler::operand_valid_for_add_immediate(value) &&\n-           Assembler::operand_valid_for_add_immediate(- value);\n+    return Assembler::operand_valid_for_add_sub_immediate(value) &&\n+           Assembler::operand_valid_for_add_sub_immediate(- value);\n@@ -136,2 +136,2 @@\n-    return Assembler::operand_valid_for_add_immediate(value) &&\n-           Assembler::operand_valid_for_add_immediate(- value);\n+    return Assembler::operand_valid_for_add_sub_immediate(value) &&\n+           Assembler::operand_valid_for_add_sub_immediate(- value);\n@@ -155,2 +155,2 @@\n-    return Assembler::operand_valid_for_add_immediate(constant) &&\n-           Assembler::operand_valid_for_add_immediate(- constant);\n+    return Assembler::operand_valid_for_add_sub_immediate(constant) &&\n+           Assembler::operand_valid_for_add_sub_immediate(- constant);\n@@ -414,1 +414,1 @@\n-          !Assembler::operand_valid_for_add_immediate(right.get_jlong_constant())) ||\n+          !Assembler::operand_valid_for_add_sub_immediate(right.get_jlong_constant())) ||\n@@ -416,1 +416,1 @@\n-          !Assembler::operand_valid_for_add_immediate(-right.get_jlong_constant()))) {\n+          !Assembler::operand_valid_for_add_sub_immediate(-right.get_jlong_constant()))) {\n@@ -477,2 +477,2 @@\n-        ((x->op() == Bytecodes::_iadd && !Assembler::operand_valid_for_add_immediate(right.get_jint_constant())) ||\n-         (x->op() == Bytecodes::_isub && !Assembler::operand_valid_for_add_immediate(-right.get_jint_constant())))) {\n+        ((x->op() == Bytecodes::_iadd && !Assembler::operand_valid_for_add_sub_immediate(right.get_jint_constant())) ||\n+         (x->op() == Bytecodes::_isub && !Assembler::operand_valid_for_add_sub_immediate(-right.get_jint_constant())))) {\n@@ -549,2 +549,2 @@\n-     ((tag == longTag && Assembler::operand_valid_for_add_immediate(right.get_jlong_constant())) ||\n-      (tag == intTag && Assembler::operand_valid_for_add_immediate(right.get_jint_constant()))))  {\n+     ((tag == longTag && Assembler::operand_valid_for_add_sub_immediate(right.get_jlong_constant())) ||\n+      (tag == intTag && Assembler::operand_valid_for_add_sub_immediate(right.get_jint_constant()))))  {\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRGenerator_riscv.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -719,1 +719,1 @@\n-  if (is_offset_in_range(offset, 32)) {\n+  if (is_simm32(offset)) {\n@@ -799,1 +799,1 @@\n-  if (do_compress() && (is_imm_in_range(imm, 6, 0) && Rd != x0)) {\n+  if (do_compress() && (is_simm6(imm) && Rd != x0)) {\n@@ -838,1 +838,1 @@\n-    if (is_imm_in_range(distance, 20, 1)) {                        \\\n+    if (is_simm21(distance) && ((distance % 2) == 0)) {            \\\n@@ -882,1 +882,1 @@\n-    if (is_imm_in_range(distance, 20, 1)) {                                           \\\n+    if (is_simm21(distance) && ((distance % 2) == 0)) {                               \\\n@@ -1348,1 +1348,2 @@\n-  assert(is_imm_in_range(offset, 20, 1), \"offset is too large to be patched in one jal insrusction!\\n\");\n+  assert(Assembler::is_simm21(offset) && ((offset % 2) == 0),\n+         \"offset is too large to be patched in one jal instruction!\\n\");\n@@ -1357,1 +1358,2 @@\n-  assert(is_imm_in_range(offset, 12, 1), \"offset is too large to be patched in one beq\/bge\/bgeu\/blt\/bltu\/bne insrusction!\\n\");\n+  assert(Assembler::is_simm13(offset) && ((offset % 2) == 0),\n+         \"offset is too large to be patched in one beq\/bge\/bgeu\/blt\/bltu\/bne instruction!\\n\");\n@@ -1565,2 +1567,1 @@\n-  assert(is_unsigned_imm_in_range(imm64, 47, 0) || (imm64 == (int64_t)-1),\n-         \"bit 47 overflows in address constant\");\n+  assert((uintptr_t)imm64 < (1ull << 48), \"48-bit overflow in address constant\");\n@@ -1586,1 +1587,1 @@\n-  if (is_imm_in_range(increment, 12, 0)) {\n+  if (is_simm12(increment)) {\n@@ -1596,1 +1597,1 @@\n-  if (is_imm_in_range(increment, 12, 0)) {\n+  if (is_simm12(increment)) {\n@@ -1606,1 +1607,1 @@\n-  if (is_imm_in_range(-decrement, 12, 0)) {\n+  if (is_simm12(-decrement)) {\n@@ -1616,1 +1617,1 @@\n-  if (is_imm_in_range(-decrement, 12, 0)) {\n+  if (is_simm12(-decrement)) {\n@@ -1852,1 +1853,1 @@\n-  if (is_imm_in_range(imm, 12, 0)) {\n+  if (is_simm12(imm)) {\n@@ -1866,1 +1867,1 @@\n-    if (is_imm_in_range(src.as_constant(), 12, 0)) {\n+    if (is_simm12(src.as_constant())) {\n@@ -2395,1 +2396,1 @@\n-  if (is_offset_in_range(byte_offset, 12)) { \/\/ 12: imm in range 2^12\n+  if (is_simm12(byte_offset)) { \/\/ 12: imm in range 2^12\n@@ -2981,1 +2982,0 @@\n-  assert(is_valid_riscv64_address(dest.target()), \"bad address\");\n@@ -2983,0 +2983,1 @@\n+  assert((uintptr_t)dest.target() < (1ull << 48), \"bad address\");\n@@ -3215,1 +3216,1 @@\n-           is_offset_in_range(dst.offset(), 12)) || is_imm_in_range(value, 12, 0)),\n+           is_simm12(dst.offset())) || is_simm12(value)),\n@@ -3226,1 +3227,1 @@\n-           is_offset_in_range(dst.offset(), 12)) || is_imm_in_range(value, 12, 0)),\n+           is_simm12(dst.offset())) || is_simm12(value)),\n@@ -3237,1 +3238,1 @@\n-           is_offset_in_range(dst.offset(), 12)) || is_imm_in_range(value, 12, 0)),\n+           is_simm12(dst.offset())) || is_simm12(value)),\n@@ -3248,1 +3249,1 @@\n-           is_offset_in_range(dst.offset(), 12)) || is_imm_in_range(value, 12, 0)),\n+           is_simm12(dst.offset())) || is_simm12(value)),\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":21,"deletions":20,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-#include \"asm\/assembler.hpp\"\n+#include \"asm\/assembler.inline.hpp\"\n@@ -274,1 +274,1 @@\n-      if (!is_offset_in_range(adr.offset(), 12)) {\n+      if (!is_simm12(adr.offset())) {\n@@ -595,1 +595,1 @@\n-    guarantee(is_imm_in_range(offset, 12, 1), \"offset is invalid.\");                                     \\\n+    guarantee(is_simm13(offset) && ((offset % 2) == 0), \"offset is invalid.\");                           \\\n@@ -785,1 +785,1 @@\n-    if (is_offset_in_range(distance, 32)) {                                                        \\\n+    if (is_simm32(distance)) {                                                                     \\\n@@ -806,1 +806,1 @@\n-        if (is_offset_in_range(adr.offset(), 12)) {                                                \\\n+        if (is_simm12(adr.offset())) {                                                             \\\n@@ -842,1 +842,1 @@\n-    if (is_offset_in_range(distance, 32)) {                                                        \\\n+    if (is_simm32(distance)) {                                                                     \\\n@@ -864,1 +864,1 @@\n-        if (is_offset_in_range(adr.offset(), 12)) {                                                \\\n+        if (is_simm12(adr.offset())) {                                                             \\\n@@ -903,1 +903,1 @@\n-    if (is_offset_in_range(distance, 32)) {                                                        \\\n+    if (is_simm32(distance)) {                                                                     \\\n@@ -922,1 +922,1 @@\n-        if (is_offset_in_range(adr.offset(), 12)) {                                                \\\n+        if (is_simm12(adr.offset())) {                                                             \\\n@@ -948,1 +948,1 @@\n-    if (is_offset_in_range(distance, 32)) {                                                        \\\n+    if (is_simm32(distance)) {                                                                     \\\n@@ -966,1 +966,1 @@\n-        if (is_offset_in_range(adr.offset(), 12)) {                                                \\\n+        if (is_simm12(adr.offset())) {                                                             \\\n@@ -1362,6 +1362,0 @@\n-  \/\/ Return true if an address is within the 48-bit RISCV64 address space.\n-  bool is_valid_riscv64_address(address addr) {\n-    \/\/ sv48: must have bits 63–48 all equal to bit 47\n-    return ((uintptr_t)addr >> 47) == 0;\n-  }\n-\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":11,"deletions":17,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -371,1 +371,2 @@\n-    guarantee(is_imm_in_range(offset, 20, 1), \"offset is too large to be patched in one jal insrusction.\"); \/\/ 1M\n+    guarantee(Assembler::is_simm21(offset) && ((offset % 2) == 0),\n+              \"offset is too large to be patched in one jal instruction.\"); \/\/ 1M\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -269,1 +269,1 @@\n-    assert(is_imm_in_range(offset, 20, 1), \"encoding constraint\");\n+    assert(Assembler::is_simm21(offset), \"encoding constraint\");\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1699,1 +1699,1 @@\n-  if (is_imm_in_range(offset, 12, 0)) {\n+  if (Assembler::is_simm12(offset)) {\n@@ -1701,1 +1701,1 @@\n-  } else if (is_imm_in_range(offset, 32, 0)) {\n+  } else if (Assembler::is_simm32(offset)) {\n@@ -1713,1 +1713,1 @@\n-  if (is_imm_in_range(offset, 12, 0)) {\n+  if (Assembler::is_simm12(offset)) {\n@@ -2892,1 +2892,1 @@\n-  predicate(Assembler::operand_valid_for_add_immediate((int64_t)n->get_int()));\n+  predicate(Assembler::operand_valid_for_add_sub_immediate((int64_t)n->get_int()));\n@@ -2902,1 +2902,1 @@\n-  predicate(Assembler::operand_valid_for_add_immediate(-(int64_t)n->get_int()));\n+  predicate(Assembler::operand_valid_for_add_sub_immediate(-(int64_t)n->get_int()));\n@@ -3057,1 +3057,1 @@\n-  predicate(Assembler::operand_valid_for_add_immediate(n->get_long()));\n+  predicate(Assembler::operand_valid_for_add_sub_immediate(n->get_long()));\n@@ -3067,1 +3067,1 @@\n-  predicate(Assembler::operand_valid_for_add_immediate(-(n->get_long())));\n+  predicate(Assembler::operand_valid_for_add_sub_immediate(-(n->get_long())));\n@@ -3148,1 +3148,1 @@\n-  predicate(is_imm_in_range(n->get_int(), 12, 0));\n+  predicate(Assembler::is_simm12(n->get_int()));\n@@ -3157,1 +3157,1 @@\n-  predicate(is_imm_in_range(n->get_long(), 12, 0));\n+  predicate(Assembler::is_simm12(n->get_long()));\n@@ -5252,1 +5252,1 @@\n-    if (is_imm_in_range($mem$$disp, 12, 0)) {\n+    if (Assembler::is_simm12($mem$$disp)) {\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -87,1 +87,4 @@\n-  return (char*) -1;\n+  \/\/ even in its subfields (as defined by the CPU immediate fields,\n+  \/\/ if the CPU splits constants across multiple instructions).\n+\n+  return (char*) 0xffffffffffff;\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/os_linux_riscv.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}