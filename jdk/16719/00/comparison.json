{"files":[{"patch":"@@ -30,0 +30,1 @@\n+COPY += .dtd .xsd .xml\n","filename":"make\/modules\/java.xml\/Java.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n- * @LastModified: July 2023\n+ * @LastModified: Nov 2023\n@@ -153,4 +153,1 @@\n-        for (CatalogFeatures.Feature f : CatalogFeatures.Feature.values()) {\n-            supportedProps.put(f.getPropertyName(), null);\n-        }\n-\n+        JdkXmlUtils.initCatalogFeatures(supportedProps);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/PropertyManager.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n- * @LastModified: July 2023\n+ * @LastModified: Nov 2023\n@@ -346,0 +346,7 @@\n+    \/**\n+     * Properties to determine whether to use a user-specified Catalog:\n+     * Feature USE_CATALOG, Resolve and Catalog File\n+     *\/\n+    protected boolean fUseCatalog = true;\n+    protected String fCatalogFile;\n+\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/XMLDocumentFragmentScannerImpl.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import javax.xml.XMLConstants;\n@@ -49,0 +50,1 @@\n+import jdk.xml.internal.JdkXmlUtils;\n@@ -72,1 +74,1 @@\n- * @LastModified: July 2023\n+ * @LastModified: Nov 2023\n@@ -284,0 +286,3 @@\n+        fUseCatalog = (Boolean)propertyManager.getProperty(XMLConstants.USE_CATALOG);\n+        fCatalogFile = (String)propertyManager.getProperty(JdkXmlUtils.CATALOG_FILES);\n+\n@@ -330,0 +335,2 @@\n+        fUseCatalog = componentManager.getFeature(XMLConstants.USE_CATALOG, true);\n+        fCatalogFile = (String)componentManager.getProperty(JdkXmlUtils.CATALOG_FILES);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/XMLDocumentScannerImpl.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+import jdk.xml.internal.JdkCatalog;\n@@ -96,1 +97,1 @@\n- * @LastModified: July 2023\n+ * @LastModified: Nov 2023\n@@ -268,3 +269,0 @@\n-    \/\/ should be diplayed trace resolving messages\n-    private static final boolean DEBUG_RESOLVER = false ;\n-\n@@ -358,0 +356,1 @@\n+    XMLSecurityPropertyManager fSecurityPropertyMgr;\n@@ -421,0 +420,1 @@\n+    \/\/ user-specified Catalog Resolver\n@@ -423,0 +423,2 @@\n+    \/\/ the default JDK Catalog Resolver\n+    CatalogResolver fDefCR;\n@@ -437,0 +439,4 @@\n+        this(null, new XMLSecurityManager(true));\n+    }\n+\n+    public XMLEntityManager(XMLSecurityPropertyManager securityPropertyMgr, XMLSecurityManager securityManager) {\n@@ -438,1 +444,2 @@\n-        fSecurityManager = new XMLSecurityManager(true);\n+        fSecurityManager = securityManager;\n+        fSecurityPropertyMgr = securityPropertyMgr;\n@@ -441,1 +448,1 @@\n-    } \/\/ <init>()\n+    }\n@@ -656,1 +663,5 @@\n-                    stream = connect.getInputStream();\n+                    if (expandedSystemId.startsWith(\"jrt:\/java.xml\")) {\n+                        stream = SecuritySupport.getInputStream(connect);\n+                    } else {\n+                        stream = connect.getInputStream();\n+                    }\n@@ -1015,3 +1026,0 @@\n-        if(DEBUG_RESOLVER){\n-            System.out.println(\"BEFORE Calling resolveEntity\") ;\n-        }\n@@ -1020,2 +1028,2 @@\n-        \/\/either of Stax or Xerces would be null\n-        if(fStaxEntityResolver != null){\n+        \/\/ Step 1: custom resolver, either StAX or Entity\n+        if (fStaxEntityResolver != null) {\n@@ -1023,1 +1031,4 @@\n-            if(staxInputSource != null) {\n+        } else if(fEntityResolver != null){\n+            xmlInputSource = fEntityResolver.resolveEntity(ri);\n+            if(xmlInputSource != null){\n+                \/\/wrap it in StaxXMLInputSource\n@@ -1025,0 +1036,1 @@\n+                staxInputSource = new StaxXMLInputSource(xmlInputSource, fISCreatedByResolver);\n@@ -1028,4 +1040,5 @@\n-        if(fEntityResolver != null){\n-            xmlInputSource = fEntityResolver.resolveEntity(ri);\n-            if(xmlInputSource != null) {\n-                fISCreatedByResolver = true;\n+        \/\/ Step 2: custom catalog if specified\n+        if (staxInputSource == null && (fUseCatalog && fCatalogFile != null)) {\n+            if (fCatalogResolver == null) {\n+                fCatalogFeatures = JdkXmlUtils.getCatalogFeatures(fDefer, fCatalogFile, fPrefer, fResolve);\n+                fCatalogResolver = CatalogManager.catalogResolver(fCatalogFeatures);\n@@ -1033,1 +1046,0 @@\n-        }\n@@ -1035,3 +1047,1 @@\n-        if(xmlInputSource != null){\n-            \/\/wrap this XMLInputSource to StaxInputSource\n-            staxInputSource = new StaxXMLInputSource(xmlInputSource, fISCreatedByResolver);\n+            staxInputSource = resolveWithCatalogStAX(fCatalogResolver, fCatalogFile, publicId, literalSystemId);\n@@ -1040,20 +1050,5 @@\n-        if (staxInputSource == null && fUseCatalog) {\n-            if (fCatalogFeatures == null) {\n-                fCatalogFeatures = JdkXmlUtils.getCatalogFeatures(fDefer, fCatalogFile, fPrefer, fResolve);\n-            }\n-            fCatalogFile = fCatalogFeatures.get(Feature.FILES);\n-            if (fCatalogFile != null) {\n-                try {\n-                    if (fCatalogResolver == null) {\n-                        fCatalogResolver = CatalogManager.catalogResolver(fCatalogFeatures);\n-                    }\n-                    InputSource is = fCatalogResolver.resolveEntity(publicId, literalSystemId);\n-                    if (is != null && !is.isEmpty()) {\n-                        staxInputSource = new StaxXMLInputSource(new XMLInputSource(is, true), true);\n-                    }\n-                } catch (CatalogException e) {\n-                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,\"CatalogException\",\n-                    new Object[]{SecuritySupport.sanitizePath(fCatalogFile)},\n-                    XMLErrorReporter.SEVERITY_FATAL_ERROR, e );\n-                }\n-            }\n+        \/\/ Step 3: use the default JDK Catalog Resolver if Step 2's resolve is continue\n+        if (staxInputSource == null && JdkXmlUtils.isResolveContinue(fCatalogFeatures)) {\n+            initJdkCatalogResolver();\n+\n+            staxInputSource = resolveWithCatalogStAX(fDefCR, JdkCatalog.JDKCATALOG, publicId, literalSystemId);\n@@ -1062,7 +1057,6 @@\n-        \/\/ do default resolution\n-        \/\/this works for both stax & Xerces, if staxInputSource is null,\n-        \/\/it means parser need to revert to default resolution\n-        if (staxInputSource == null) {\n-            \/\/ REVISIT: when systemId is null, I think we should return null.\n-            \/\/          is this the right solution? -SG\n-            \/\/if (systemId != null)\n+        \/\/ Step 4: default resolution if not resolved by a resolver and the RESOLVE\n+        \/\/ feature is set to 'continue'\n+        if (staxInputSource != null) {\n+            fISCreatedByResolver = true;\n+        } else if (JdkXmlUtils.isResolveContinue(fCatalogFeatures) &&\n+                fSecurityManager.is(Limit.JDKCATALOG_RESOLVE, JdkConstants.CONTINUE)) {\n@@ -1071,2 +1065,0 @@\n-        }else if(staxInputSource.hasXMLStreamOrXMLEventReader()){\n-            \/\/Waiting for the clarification from EG. - nb\n@@ -1075,3 +1067,7 @@\n-        if (DEBUG_RESOLVER) {\n-            System.err.println(\"XMLEntityManager.resolveEntity(\" + publicId + \")\");\n-            System.err.println(\" = \" + xmlInputSource);\n+        return staxInputSource;\n+\n+    }\n+\n+    private void initJdkCatalogResolver() {\n+        if (fDefCR == null) {\n+            fDefCR = fSecurityManager.getJDKCatalogResolver();\n@@ -1079,0 +1075,1 @@\n+    }\n@@ -1080,1 +1077,13 @@\n-        return staxInputSource;\n+    \/**\n+     * Resolves the external resource using the Catalog specified and returns\n+     * a StaxXMLInputSource.\n+     *\/\n+    private StaxXMLInputSource resolveWithCatalogStAX(CatalogResolver cr, String cFile,\n+            String publicId, String systemId) {\n+        InputSource is = resolveWithCatalog(cr, cFile, publicId, systemId);\n+\/\/        if (is != null && !is.isEmpty()) {\n+        if (is != null) {\n+            return new StaxXMLInputSource(new XMLInputSource(is, true), true);\n+        }\n+        return null;\n+    }\n@@ -1082,0 +1091,55 @@\n+    \/**\n+     * Resolves the external resource using the Catalog specified and returns\n+     * a InputSource.\n+     *\/\n+    private InputSource resolveWithCatalog(CatalogResolver cr, String cFile,\n+            String publicId, String systemId) {\n+        if (cr != null) {\n+            try {\n+                return cr.resolveEntity(publicId, systemId);\n+            } catch (CatalogException e) {\n+                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,\"CatalogException\",\n+                new Object[]{SecuritySupport.sanitizePath(cFile)},\n+                XMLErrorReporter.SEVERITY_FATAL_ERROR, e );\n+            }\n+        }\n+        return null;\n+    }\n+\n+    \/**\n+     * Resolves the external resource using the Catalog specified and returns\n+     * a XMLInputSource. Since the Resolve method can be called from various processors,\n+     * this method attempts to resolve the resource as an EntityResolver first\n+     * and then URIResolver if no match is found.\n+     *\/\n+    private XMLInputSource resolveEntityOrURI(CatalogResolver cr, String publicId, String systemId, String base) {\n+        XMLInputSource xis = resolveEntity(cr, publicId, systemId, base);\n+\n+        if (xis != null) {\n+            return xis;\n+        } else if (systemId != null) {\n+            Source source = null;\n+            try {\n+                source = cr.resolve(systemId, base);\n+            } catch (CatalogException e) {\n+                throw new XNIException(e);\n+            }\n+            if (source != null && !source.isEmpty()) {\n+                return new XMLInputSource(publicId, source.getSystemId(), base, true);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private XMLInputSource resolveEntity(CatalogResolver cr, String publicId, String systemId, String base) {\n+        InputSource is = null;\n+        try {\n+            if (publicId != null || systemId != null) {\n+                is = cr.resolveEntity(publicId, systemId);\n+            }\n+        } catch (CatalogException e) {}\n+\n+        if (is != null && !is.isEmpty()) {\n+            return new XMLInputSource(is, true);\n+        }\n+        return null;\n@@ -1131,1 +1195,1 @@\n-        \/\/ give the entity resolver a chance\n+        \/\/ Step 1: custom Entity resolver\n@@ -1140,2 +1204,4 @@\n-        if (xmlInputSource == null && fUseCatalog) {\n-            if (fCatalogFeatures == null) {\n+        \/\/ Step 2: custom catalog if specified\n+        if ((publicId != null || literalSystemId != null || resourceIdentifier.getNamespace() !=null)\n+                && xmlInputSource == null && (fUseCatalog && fCatalogFile != null)) {\n+            if (fCatalogResolver == null) {\n@@ -1143,0 +1209,1 @@\n+                fCatalogResolver = CatalogManager.catalogResolver(fCatalogFeatures);\n@@ -1144,36 +1211,2 @@\n-            fCatalogFile = fCatalogFeatures.get(Feature.FILES);\n-            if (fCatalogFile != null) {\n-                \/*\n-                 since the method can be called from various processors, both\n-                 EntityResolver and URIResolver are used to attempt to find\n-                 a match\n-                *\/\n-                InputSource is = null;\n-                try {\n-                    if (fCatalogResolver == null) {\n-                        fCatalogResolver = CatalogManager.catalogResolver(fCatalogFeatures);\n-                    }\n-                    String pid = (publicId != null? publicId : resourceIdentifier.getNamespace());\n-                    if (pid != null || literalSystemId != null) {\n-                        is = fCatalogResolver.resolveEntity(pid, literalSystemId);\n-                    }\n-                } catch (CatalogException e) {}\n-\n-                if (is != null && !is.isEmpty()) {\n-                    xmlInputSource = new XMLInputSource(is, true);\n-                } else if (literalSystemId != null) {\n-                    if (fCatalogResolver == null) {\n-                        fCatalogResolver = CatalogManager.catalogResolver(fCatalogFeatures);\n-                    }\n-\n-                    Source source = null;\n-                    try {\n-                        source = fCatalogResolver.resolve(literalSystemId, baseSystemId);\n-                    } catch (CatalogException e) {\n-                        throw new XNIException(e);\n-                    }\n-                    if (source != null && !source.isEmpty()) {\n-                        xmlInputSource = new XMLInputSource(publicId, source.getSystemId(), baseSystemId, true);\n-                    }\n-                }\n-            }\n+            String pid = (publicId != null? publicId : resourceIdentifier.getNamespace());\n+            xmlInputSource = resolveEntityOrURI(fCatalogResolver, pid, literalSystemId, baseSystemId);\n@@ -1182,10 +1215,6 @@\n-        \/\/ do default resolution\n-        \/\/ REVISIT: what's the correct behavior if the user provided an entity\n-        \/\/ resolver (fEntityResolver != null), but resolveEntity doesn't return\n-        \/\/ an input source (xmlInputSource == null)?\n-        \/\/ do we do default resolution, or do we just return null? -SG\n-        if (xmlInputSource == null) {\n-            \/\/ REVISIT: when systemId is null, I think we should return null.\n-            \/\/          is this the right solution? -SG\n-            \/\/if (systemId != null)\n-            xmlInputSource = new XMLInputSource(publicId, literalSystemId, baseSystemId, false);\n+        \/\/ Step 3: use the default JDK Catalog Resolver if Step 2's resolve is continue\n+        if ((publicId != null || literalSystemId != null)\n+                && xmlInputSource == null && JdkXmlUtils.isResolveContinue(fCatalogFeatures)) {\n+            initJdkCatalogResolver();\n+            \/\/ unlike a custom catalog, the JDK Catalog only contains entity references\n+            xmlInputSource = resolveEntity(fDefCR, publicId, literalSystemId, baseSystemId);\n@@ -1194,3 +1223,5 @@\n-        if (DEBUG_RESOLVER) {\n-            System.err.println(\"XMLEntityManager.resolveEntity(\" + publicId + \")\");\n-            System.err.println(\" = \" + xmlInputSource);\n+        \/\/ Step 4: default resolution if not resolved by a resolver and the RESOLVE\n+        \/\/ feature is set to 'continue'\n+        if ((xmlInputSource == null) && JdkXmlUtils.isResolveContinue(fCatalogFeatures) &&\n+                fSecurityManager.is(Limit.JDKCATALOG_RESOLVE, JdkConstants.CONTINUE)) {\n+            xmlInputSource = new XMLInputSource(publicId, literalSystemId, baseSystemId, false);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/XMLEntityManager.java","additions":137,"deletions":106,"binary":false,"changes":243,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n- * @LastModified: July 2023\n+ * @LastModified: Nov 2023\n@@ -405,1 +405,1 @@\n-            super();\n+            super(null, null, securityPropertyMgr, securityManager);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/SAXParserImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -165,3 +165,0 @@\n-        for (Feature f : Feature.values()) {\n-            fXMLSchemaLoader.setProperty(f.getPropertyName(), null);\n-        }\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/validation\/XMLSchemaFactory.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n- * @LastModified: Sep 2023\n+ * @LastModified: Nov 2023\n@@ -94,1 +94,1 @@\n-        initSecurityManager();\n+        initSecurityManager(null, null);\n@@ -101,1 +101,1 @@\n-        this(null, null);\n+        this(null, null, null, null);\n@@ -108,1 +108,1 @@\n-        this(symbolTable, null);\n+        this(symbolTable, null, null, null);\n@@ -116,0 +116,5 @@\n+        this(symbolTable, grammarPool, null, null);\n+    }\n+\n+    public SAXParser(SymbolTable symbolTable, XMLGrammarPool grammarPool,\n+            XMLSecurityPropertyManager securityPropertyMgr, XMLSecurityManager securityManager) {\n@@ -131,1 +136,1 @@\n-        initSecurityManager();\n+        initSecurityManager(securityPropertyMgr, securityManager);\n@@ -175,21 +180,0 @@\n-\n-    \/**\n-     * Initiates the SecurityManager. This becomes necessary when the SAXParser\n-     * is constructed directly by, for example, XMLReaderFactory rather than\n-     * through SAXParserFactory.\n-     *\/\n-    private void initSecurityManager() {\n-        try {\n-            if (securityManager == null) {\n-                securityManager = new XMLSecurityManager(true);\n-                super.setProperty(Constants.SECURITY_MANAGER, securityManager);\n-            }\n-\n-            if (securityPropertyManager == null) {\n-                securityPropertyManager = new XMLSecurityPropertyManager();\n-                super.setProperty(JdkConstants.XML_SECURITY_PROPERTY_MANAGER, securityPropertyManager);\n-            }\n-        } catch (SAXException e) {\n-            Utils.dPrint(() -> e.getMessage());\n-        }\n-    }\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/parsers\/SAXParser.java","additions":10,"deletions":26,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,2 +2,1 @@\n- * reserved comment block\n- * DO NOT REMOVE OR ALTER!\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +27,1 @@\n+import com.sun.org.apache.xerces.internal.utils.XMLSecurityPropertyManager;\n@@ -36,0 +36,1 @@\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -43,0 +44,1 @@\n+ * @LastModified: Nov 2023\n@@ -91,1 +93,1 @@\n-        this(null, null, null);\n+        this(null, null, null, null, null);\n@@ -100,1 +102,1 @@\n-        this(symbolTable, null, null);\n+        this(symbolTable, null, null, null, null);\n@@ -114,1 +116,1 @@\n-        this(symbolTable, grammarPool, null);\n+        this(symbolTable, grammarPool, null, null, null);\n@@ -126,3 +128,1 @@\n-    public XIncludeAwareParserConfiguration(\n-            SymbolTable symbolTable,\n-            XMLGrammarPool grammarPool,\n+    public XIncludeAwareParserConfiguration(SymbolTable symbolTable, XMLGrammarPool grammarPool,\n@@ -130,1 +130,7 @@\n-        super(symbolTable, grammarPool, parentSettings);\n+        this(symbolTable, grammarPool, parentSettings, null, null);\n+    }\n+\n+    public XIncludeAwareParserConfiguration(SymbolTable symbolTable, XMLGrammarPool grammarPool,\n+            XMLComponentManager parentSettings, XMLSecurityPropertyManager securityPropertyMgr,\n+            XMLSecurityManager securityManager) {\n+        super(symbolTable, grammarPool, parentSettings, securityPropertyMgr, securityManager);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/parsers\/XIncludeAwareParserConfiguration.java","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,0 +49,1 @@\n+import com.sun.org.apache.xerces.internal.utils.XMLSecurityPropertyManager;\n@@ -73,0 +74,1 @@\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -81,1 +83,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: Nov 2023\n@@ -435,1 +437,1 @@\n-        this(null, null, null);\n+        this(null, null, null, null, null);\n@@ -444,1 +446,1 @@\n-        this(symbolTable, null, null);\n+        this(symbolTable, null, null, null, null);\n@@ -459,1 +461,1 @@\n-        this(symbolTable, grammarPool, null);\n+        this(symbolTable, grammarPool, null, null, null);\n@@ -474,4 +476,8 @@\n-    public XML11Configuration(\n-        SymbolTable symbolTable,\n-        XMLGrammarPool grammarPool,\n-        XMLComponentManager parentSettings) {\n+    public XML11Configuration(SymbolTable symbolTable, XMLGrammarPool grammarPool,\n+            XMLComponentManager parentSettings) {\n+        this(symbolTable, grammarPool, parentSettings, null, null);\n+    }\n+\n+    public XML11Configuration(SymbolTable symbolTable, XMLGrammarPool grammarPool,\n+            XMLComponentManager parentSettings, XMLSecurityPropertyManager securityPropertyMgr,\n+            XMLSecurityManager securityManager) {\n@@ -595,1 +601,1 @@\n-        fEntityManager = new XMLEntityManager();\n+        fEntityManager = new XMLEntityManager(securityPropertyMgr, securityManager);\n@@ -643,5 +649,0 @@\n-        \/\/ Initialize Catalog features\n-        for( CatalogFeatures.Feature f : CatalogFeatures.Feature.values()) {\n-            fProperties.put(f.getPropertyName(), null);\n-        }\n-\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/parsers\/XML11Configuration.java","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.xml.internal.Utils;\n@@ -32,0 +33,1 @@\n+import org.xml.sax.SAXException;\n@@ -51,1 +53,1 @@\n- * @LastModified: July 2023\n+ * @LastModified: Nov 2023\n@@ -130,9 +132,1 @@\n-        if (securityManager == null) {\n-            securityManager = new XMLSecurityManager(true);\n-            fConfiguration.setProperty(Constants.SECURITY_MANAGER, securityManager);\n-        }\n-        if (securityPropertyManager == null) {\n-            securityPropertyManager = new XMLSecurityPropertyManager();\n-            fConfiguration.setProperty(JdkConstants.XML_SECURITY_PROPERTY_MANAGER, securityPropertyManager);\n-        }\n-\n+        initSecurityManager(null, null);\n@@ -144,0 +138,17 @@\n+    \/**\n+     * Initiates the SecurityManager. This becomes necessary when the Parser\n+     * is constructed directly by, for example, XMLReaderFactory rather than\n+     * through SAXParserFactory.\n+     *\/\n+    void initSecurityManager(XMLSecurityPropertyManager spm, XMLSecurityManager sm) {\n+        if (securityManager == null) {\n+            securityManager = sm != null ? sm : new XMLSecurityManager(true);\n+        }\n+        fConfiguration.setProperty(Constants.SECURITY_MANAGER, securityManager);\n+\n+        if (securityPropertyManager == null) {\n+            securityPropertyManager = spm != null ? spm : new XMLSecurityPropertyManager();\n+        }\n+        fConfiguration.setProperty(JdkConstants.XML_SECURITY_PROPERTY_MANAGER, securityPropertyManager);\n+    }\n+\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/parsers\/XMLParser.java","additions":21,"deletions":10,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import jdk.xml.internal.JdkXmlUtils;\n@@ -45,1 +46,1 @@\n- * @LastModified: Apr 2019\n+ * @LastModified: Nov 2023\n@@ -100,0 +101,2 @@\n+        \/\/ Initialize Catalog features\n+        JdkXmlUtils.initCatalogFeatures(fProperties);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/util\/ParserConfigurationSettings.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -168,1 +168,1 @@\n-                        if (f1.isFile()) {\n+                        if (SecuritySupport.isFile(f1)) {\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/Util.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.xml.internal;\n+\n+import java.net.URI;\n+import javax.xml.catalog.Catalog;\n+import javax.xml.catalog.CatalogFeatures;\n+import javax.xml.catalog.CatalogManager;\n+\n+\/**\n+ * Represents the JDKCatalog\n+ *\/\n+public class JdkCatalog {\n+    public static final String JDKCATALOG = \"\/jdk\/xml\/internal\/jdkcatalog\/JDKCatalog.xml\";\n+    private static final String JDKCATALOG_URL = SecuritySupport.getResource(JDKCATALOG).toExternalForm();\n+    public static Catalog catalog;\n+\n+    public static void init(String resolve) {\n+        if (catalog == null) {\n+            CatalogFeatures cf = JdkXmlUtils.getCatalogFeatures(null, JDKCATALOG_URL, null, resolve);\n+            catalog = CatalogManager.catalog(cf, URI.create(JDKCATALOG_URL));\n+        }\n+    }\n+}\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/JdkCatalog.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -294,0 +294,1 @@\n+     * @since 22\n@@ -302,0 +303,11 @@\n+    \/**\n+     * System Property for the JDKCatalog' RESOLVE property\n+     * @since 22\n+     *\/\n+    public static final String JDKCATALOG_RESOLVE = \"jdk.xml.jdkCatalog.resolve\";\n+\n+    \/\/ Catalog Resolve Integer mappings for String values\n+    public static final int CONTINUE = 0;\n+    \/\/public static final int IGNORE = 1; \/\/ same as that of DTD\n+    public static final int STRICT = 2;\n+\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/JdkConstants.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.util.Map;\n@@ -159,0 +160,25 @@\n+    \/**\n+     * Initialize catalog features, including setting the default values and reading\n+     * from the JAXP configuration file and System Properties.\n+     *\n+     * @param properties the Map object that holds the properties\n+     *\/\n+    public static void initCatalogFeatures(Map<String, Object> properties) {\n+        CatalogFeatures cf = getCatalogFeatures();\n+        for( CatalogFeatures.Feature f : CatalogFeatures.Feature.values()) {\n+            properties.put(f.getPropertyName(), cf.get(f));\n+        }\n+    }\n+\n+    \/**\n+     * Creates an instance of a CatalogFeatures with default settings.\n+     * Note: the CatalogFeatures is initialized with settings in the following\n+     * order:\n+     *     Default values -> values in the config -> values set with System Properties\n+     *\n+     * @return an instance of a CatalogFeatures\n+     *\/\n+    public static CatalogFeatures getCatalogFeatures() {\n+        return CatalogFeatures.builder().build();\n+    }\n+\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/JdkXmlUtils.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.net.URLConnection;\n@@ -269,0 +270,12 @@\n+    \/**\n+     * Tests whether the input is file.\n+     *\n+     * @param f the file to be tested\n+     * @return true if the input is file, false otherwise\n+     *\/\n+    @SuppressWarnings(\"removal\")\n+    public static boolean isFile(final File f) {\n+        return (AccessController.doPrivileged((PrivilegedAction<Boolean>) ()\n+                -> f.isFile()));\n+    }\n+\n@@ -286,0 +299,17 @@\n+    \/**\n+     * Returns an InputStream from a URLConnection.\n+     * @param uc the URLConnection\n+     * @return the InputStream\n+     * @throws IOException if an I\/O error occurs while creating the input stream\n+     *\/\n+    @SuppressWarnings(\"removal\")\n+    public static InputStream getInputStream(final URLConnection uc)\n+            throws IOException {\n+        try {\n+            return AccessController.doPrivileged((PrivilegedExceptionAction<InputStream>) ()\n+                    -> uc.getInputStream());\n+        } catch (PrivilegedActionException e) {\n+            throw (IOException) e.getException();\n+        }\n+    }\n+\n@@ -297,0 +327,11 @@\n+    \/**\n+     * Returns the resource by the name.\n+     * @param name the resource name\n+     * @return the resource\n+     *\/\n+    @SuppressWarnings(\"removal\")\n+    public static URL getResource(final String name) {\n+        return AccessController.doPrivileged((PrivilegedAction<URL>) () ->\n+                SecuritySupport.class.getResource(name));\n+    }\n+\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/SecuritySupport.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -35,0 +35,3 @@\n+import javax.xml.catalog.CatalogManager;\n+import javax.xml.catalog.CatalogResolver;\n+import javax.xml.catalog.CatalogResolver.NotFoundAction;\n@@ -70,0 +73,12 @@\n+    \/\/ Valid values for Catalog Resolve, and mappings between the string and\n+    \/\/ interger values\n+    static final Map<String, Integer> CR_MAP;\n+    \/\/ Source Level JDK 8\n+    static {\n+        Map<String, Integer> map = new HashMap<>();\n+        map.put(\"continue\", 0);\n+        map.put(\"ignore\", 1);\n+        map.put(\"strict\", 2);\n+        CR_MAP = Collections.unmodifiableMap(map);\n+    }\n+\n@@ -76,1 +91,1 @@\n-    \/\/ DTD value map\n+    \/\/ DTD value mapper\n@@ -79,0 +94,3 @@\n+    \/\/ Catalog Resolve value mapper\n+    private static final StringMapper CRMAPPER = new StringMapper(CR_MAP);\n+\n@@ -112,0 +130,2 @@\n+        JDKCATALOG_RESOLVE(\"JDKCatalogResolve\", JdkConstants.JDKCATALOG_RESOLVE, JdkConstants.JDKCATALOG_RESOLVE, null,\n+                JdkConstants.CONTINUE, JdkConstants.CONTINUE, Processor.PARSER, CRMAPPER),\n@@ -269,0 +289,42 @@\n+        \/\/ prepare the JDK Catalog\n+        prepareCatalog();\n+    }\n+\n+    \/**\n+     * Flag indicating whether the JDK Catalog has been initialized\n+     *\/\n+    static volatile boolean jdkcatalogInitialized = false;\n+    private final Object lock = new Object();\n+\n+    private void prepareCatalog() {\n+        if (!jdkcatalogInitialized) {\n+            synchronized (lock) {\n+                if (!jdkcatalogInitialized) {\n+                    jdkcatalogInitialized = true;\n+                    String resolve = getLimitValueAsString(Limit.JDKCATALOG_RESOLVE);\n+                    JdkCatalog.init(resolve);\n+                }\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Returns the JDKCatalogResolver with the current setting of the RESOLVE\n+     * property.\n+     *\n+     * @return the JDKCatalogResolver\n+     *\/\n+    public CatalogResolver getJDKCatalogResolver() {\n+        String resolve = getLimitValueAsString(Limit.JDKCATALOG_RESOLVE);\n+        return CatalogManager.catalogResolver(JdkCatalog.catalog, toActionType(resolve));\n+    }\n+\n+    \/\/ convert the string value of the RESOLVE property to the corresponding\n+    \/\/ action type\n+    private NotFoundAction toActionType(String resolve) {\n+        for (NotFoundAction type : NotFoundAction.values()) {\n+            if (type.toString().equals(resolve)) {\n+                return type;\n+            }\n+        }\n+        return null;\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/XMLSecurityManager.java","additions":63,"deletions":1,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+-->\n+<!--\n+   Catalog of DTDs for the Java platform\n+-->\n+<catalog xmlns=\"urn:oasis:names:tc:entity:xmlns:xml:catalog\">\n+    <group id=\"javadtds\" prefer = \"system\" xml:base = \"java\/dtd\/\">\n+        <system systemId=\"http:\/\/java.sun.com\/dtd\/preferences.dtd\" uri=\"J2SE\/preferences.dtd\"\/>\n+        <system systemId=\"http:\/\/java.sun.com\/dtd\/properties.dtd\" uri=\"J2SE\/properties.dtd\"\/>\n+    <\/group>\n+<\/catalog>\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/jdkcatalog\/JDKCatalog.xml","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,110 @@\n+<!--\n+Copyright 2001 Sun Microsystems, Inc. 901 San Antonio Road,\n+Palo Alto, CA  94303, U.S.A.  All rights reserved.\n+\n+This product or document is protected by copyright and distributed\n+under licenses restricting its use, copying, distribution, and\n+decompilation.  No part of this product or documentation may be\n+reproduced in any form by any means without prior written authorization\n+of Sun and its licensors, if any.\n+\n+Third party software, including font technology, is copyrighted and\n+licensed from Sun suppliers.\n+\n+Sun, Sun Microsystems, the Sun Logo, Solaris, Java, JavaServer Pages, Java\n+Naming and Directory Interface, JDBC, JDK, JavaMail and Enterprise JavaBeans,\n+are trademarks or registered trademarks of Sun Microsystems, Inc in the U.S.\n+and other countries.\n+\n+All SPARC trademarks are used under license and are trademarks\n+or registered trademarks of SPARC International, Inc.\n+in the U.S. and other countries. Products bearing SPARC\n+trademarks are based upon an architecture developed by Sun Microsystems, Inc.\n+\n+PostScript is a registered trademark of Adobe Systems, Inc.\n+\n+Federal Acquisitions: Commercial Software - Government Users Subject to\n+Standard License Terms and Conditions.\n+\n+DOCUMENTATION IS PROVIDED \"AS IS\" AND ALL EXPRESS OR IMPLIED\n+CONDITIONS, REPRESENTATIONS AND WARRANTIES, INCLUDING ANY\n+IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\n+PURPOSE OR NON-INFRINGEMENT, ARE DISCLAIMED, EXCEPT\n+TO THE EXTENT THAT SUCH DISCLAIMERS ARE HELD TO BE LEGALLY\n+INVALID.\n+\n+_________________________________________________________________________\n+\n+Copyright 2000-2001 Sun Microsystems, Inc.,\n+901 San Antonio Road, Palo Alto, CA  94303, Etats-Unis.\n+Tous droits re'serve's.\n+\n+\n+Ce produit ou document est prote'ge' par un copyright et distribue' avec\n+des licences qui en restreignent l'utilisation, la copie, la distribution,\n+et la de'compilation.  Aucune partie de ce produit ou de sa documentation\n+associe'e ne peut e^tre reproduite sous aucune forme, par quelque moyen\n+que ce soit, sans l'autorisation pre'alable et e'crite de Sun et de ses\n+bailleurs de licence, s'il y en a.\n+\n+Le logiciel de'tenu par des tiers, et qui comprend la technologie\n+relative aux polices de caracte`res, est prote'ge' par un copyright\n+et licencie' par des fournisseurs de Sun.\n+\n+Sun, Sun Microsystems, le logo Sun, Solaris, Java, JavaServer Pages, Java\n+Naming and Directory Interface, JDBC, JDK, JavaMail, et Enterprise JavaBeans,\n+sont des marques de fabrique ou des marques de'pose'es de Sun\n+Microsystems, Inc. aux Etats-Unis et dans d'autres pays.\n+\n+Toutes les marques SPARC sont utilise'es sous licence et sont\n+des marques de fabrique ou des marques de'pose'es de SPARC\n+International, Inc. aux Etats-Unis et  dans\n+d'autres pays. Les produits portant les marques SPARC sont\n+base's sur une architecture de'veloppe'e par Sun Microsystems, Inc.\n+\n+Postcript est une marque enregistre'e d'Adobe Systems Inc.\n+\n+LA DOCUMENTATION EST FOURNIE \"EN L'ETAT\" ET TOUTES AUTRES CONDITIONS,\n+DECLARATIONS ET GARANTIES EXPRESSES OU TACITES SONT FORMELLEMENT EXCLUES,\n+DANS LA MESURE AUTORISEE PAR LA LOI APPLICABLE, Y COMPRIS NOTAMMENT\n+TOUTE GARANTIE IMPLICITE RELATIVE A LA QUALITE MARCHANDE, A L'APTITUDE\n+A UNE UTILISATION PARTICULIERE OU A L'ABSENCE DE CONTREFACON.\n+-->\n+\n+\n+<!-- DTD for a Preferences tree. -->\n+\n+<!-- The preferences element is at the root of an XML document\n+     representing a Preferences tree. -->\n+<!ELEMENT preferences (root)>\n+\n+<!-- The preferences element contains an optional version attribute,\n+      which specifies version of DTD. -->\n+<!ATTLIST preferences EXTERNAL_XML_VERSION CDATA \"0.0\" >  \n+\n+<!-- The root element has a map representing the root's preferences\n+     (if any), and one node for each child of the root (if any). -->\n+<!ELEMENT root (map, node*) >\n+\n+<!-- Additionally, the root contains a type attribute, which\n+     specifies whether it's the system or user root. -->\n+<!ATTLIST root\n+          type (system|user) #REQUIRED >\n+\n+<!-- Each node has a map representing its preferences (if any),\n+     and one node for each child (if any). -->\n+<!ELEMENT node (map, node*) >\n+\n+<!-- Additionally, each node has a name attribute -->\n+<!ATTLIST node\n+          name CDATA #REQUIRED >\n+\n+<!-- A map represents the preferences stored at a node (if any). -->\n+<!ELEMENT map (entry*) >\n+\n+<!-- An entry represents a single preference, which is simply\n+      a key-value pair. -->\n+<!ELEMENT entry EMPTY >\n+<!ATTLIST entry\n+          key   CDATA #REQUIRED\n+          value CDATA #REQUIRED >\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/jdkcatalog\/java\/dtd\/J2SE\/preferences.dtd","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+<!--\n+   Copyright 2006 Sun Microsystems, Inc.  All rights reserved.\n+  -->\n+\n+<!-- DTD for properties -->\n+\n+<!ELEMENT properties ( comment?, entry* ) >\n+\n+<!ATTLIST properties version CDATA #FIXED \"1.0\">\n+\n+<!ELEMENT comment (#PCDATA) >\n+\n+<!ELEMENT entry (#PCDATA) >\n+\n+<!ATTLIST entry key CDATA #REQUIRED>\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/jdkcatalog\/java\/dtd\/J2SE\/properties.dtd","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -405,0 +405,5 @@\n+ * <li><a href=\"#JDKCATALOG\">JDK built-in Catalog<\/a>\n+ *      <ul>\n+ *      <li><a href=\"#JC_PROCESS\">External Resource Resolution Process with the built-in Catalog<\/a><\/li>\n+ *      <\/ul>\n+ * <\/li>\n@@ -414,0 +419,27 @@\n+ * <h2 id=\"JDKCATALOG\">JDK built-in Catalog<\/h2>\n+ * The JDK has a built-in catalog that hosts the following DTDs defined by the Java Platform:\n+ * <ul>\n+ * <li>DTD for {@link java.util.prefs.Preferences java.util.prefs.Preferences}, preferences.dtd<\/li>\n+ * <li>DTD for {@link java.util.Properties java.util.Properties}, properties.dtd<\/li>\n+ * <\/ul>\n+ * <p>\n+ * The catalog is loaded once when the first JAXP processor factory is created.\n+ *\n+ * <h3 id=\"JC_PROCESS\">External Resource Resolution Process with the built-in Catalog<\/h3>\n+ * The JDK creates a {@link javax.xml.catalog.CatalogResolver CatalogResolver}\n+ * with the built-in catalog when needed. This CatalogResolver is used as the\n+ * default external resource resolver.\n+ * <p>\n+ * XML processors may use resolvers (such as {@link org.xml.sax.EntityResolver EntityResolver},\n+ * {@link javax.xml.stream.XMLResolver XMLResolver}, and {@link javax.xml.catalog.CatalogResolver CatalogResolver})\n+ * to handle external references. In the absence of the user-defined resolvers,\n+ * the JDK XML processors fall back to the default CatalogResolver to attempt to\n+ * find a resolution before making a connection to fetch the resources. The fall-back\n+ * also takes place if a user-defined resolver exists but allows the process to\n+ * continue when unable to resolve the resource.\n+ * <p>\n+ * If the default CatalogResolver is unable to locate a resource, it may signal\n+ * the XML processors to continue processing, or skip the resource, or\n+ * throw a CatalogException. The behavior is configured with the\n+ * <a href=\"#JDKCATALOG_RESOLVE\">{@code jdk.xml.jdkcatalog.resolve}<\/a> property.\n+ *\n@@ -755,1 +787,1 @@\n- * <td style=\"text-align:center\" rowspan=\"4\">yes<\/td>\n+ * <td style=\"text-align:center\" rowspan=\"5\">yes<\/td>\n@@ -838,0 +870,34 @@\n+ *     <a href=\"#StAX\">StAX<\/a><br>\n+ *     <a href=\"#Validation\">Validation<\/a><br>\n+ *     <a href=\"#Transform\">Transform<\/a>\n+ * <\/td>\n+ * <td style=\"text-align:center\"><a href=\"#Processor\">Method 1<\/a><\/td>\n+ * <td style=\"text-align:center\">22<\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <td id=\"JDKCATALOG_RESOLVE\">{@systemProperty jdk.xml.jdkcatalog.resolve}<\/td>\n+ * <td>Instructs the JDK default CatalogResolver to act in accordance with the setting\n+ * of this property when unable to resolve an external reference with the built-in Catalog.\n+ * The options are:\n+ * <ul>\n+ * <li><p>\n+ * {@code continue} -- Indicates that the processing should continue\n+ * <\/li>\n+ * <li><p>\n+ * {@code ignore} -- Indicates that the reference is skipped\n+ * <\/li>\n+ * <li><p>\n+ * {@code strict} -- Indicates that the resolver should throw a CatalogException\n+ * <\/li>\n+ * <\/ul>\n+ * <\/td>\n+ * <td style=\"text-align:center\">String<\/td>\n+ * <td>\n+ * {@code continue, ignore, and strict}. Values are case-insensitive.\n+ * <\/td>\n+ * <td style=\"text-align:center\">continue<\/td>\n+ * <td style=\"text-align:center\">No<\/td>\n+ * <td style=\"text-align:center\">Yes<\/td>\n+ * <td style=\"text-align:center\">\n+ *     <a href=\"#DOM\">DOM<\/a><br>\n+ *     <a href=\"#SAX\">SAX<\/a><br>\n","filename":"src\/java.xml\/share\/classes\/module-info.java","additions":67,"deletions":1,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,1 @@\n+@SuppressWarnings(\"removal\")\n@@ -164,0 +165,1 @@\n+@SuppressWarnings(\"removal\")\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/libs\/jaxp\/library\/JAXPPolicyManager.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -374,1 +374,3 @@\n-        factory.setProperty(CatalogFeatures.Feature.FILES.getPropertyName(), catalog);\n+        if (catalog != null) {\n+            factory.setProperty(CatalogFeatures.Feature.FILES.getPropertyName(), catalog);\n+        }\n@@ -475,1 +477,3 @@\n-        parser.setProperty(CatalogFeatures.Feature.FILES.getPropertyName(), catalog);\n+        if (catalog != null) {\n+            parser.setProperty(CatalogFeatures.Feature.FILES.getPropertyName(), catalog);\n+        }\n@@ -498,1 +502,3 @@\n-        reader.setProperty(CatalogFeatures.Feature.FILES.getPropertyName(), catalog);\n+        if (catalog != null) {\n+            reader.setProperty(CatalogFeatures.Feature.FILES.getPropertyName(), catalog);\n+        }\n@@ -569,1 +575,3 @@\n-            xif.setProperty(CatalogFeatures.Feature.FILES.getPropertyName(), catalog);\n+            if (catalog != null) {\n+                xif.setProperty(CatalogFeatures.Feature.FILES.getPropertyName(), catalog);\n+            }\n@@ -1016,0 +1024,1 @@\n+    @SuppressWarnings(\"removal\")\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/CatalogSupportBase.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,361 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.catalog;\n+\n+import common.util.TestBase;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.validation.SchemaFactory;\n+\/\/import org.testng.annotations.DataProvider;\n+\n+\/**\n+ * Tests the JDK Catalog\n+ *\/\n+public class CatalogTestBase extends TestBase {\n+    \/*\n+     * DataProvider for testing configuring properties for parsers.\n+     *\n+     * Fields:\n+     *     file, FSP, state of setting, config file, system property, api property,\n+     *     Custom Catalog, error expected, error code or expected result\n+     *\/\n+    \/\/@DataProvider(name = \"configWCatalogForParsers\")\n+    public Object[][] getConfigs(Processor processor) {\n+        \/\/ file with an external DTD that's not in JdkCatalog\n+        String fileDTDNotInC = \"properties1.xml\";\n+        \/\/ file with an external DTD that's in the Custom Catalog\n+        String fileDTDInCC = \"test.xml\";\n+        \/\/ file with an external DTD that's in JdkCatalog\n+        String javaDTD = \"properties.xml\";\n+        \/\/ file with an external DTD thats in the Custom Catalog\n+        String w3cDTD = \"xhtml11.xml\";\n+\n+        \/\/ error code when CATALOG=strict; The cause for DOM\n+        String errCode = \"JAXP09040001\";\n+\n+        \/\/ error (not from catalog) is expect when CATALOG=continue\n+        boolean isErrExpected = true;\n+        String expected1 = \"invalid.site.com\";\n+\n+        \/\/ expected when reference is resolved by Catalog\n+        String expected3 = \"\", expected4 = \"\";\n+        switch (processor) {\n+            case SAX:\n+                errCode = \"JAXP00090001\";\n+                break;\n+            case STAX:\n+                errCode = \"JAXP00090001\";\n+                \/\/errCode = \"JAXP00090001\";\n+                \/\/ StAX is non-validating parser\n+                isErrExpected = false;\n+                expected1 = \".*[\\\\w\\\\s]*(value1)[\\\\w\\\\s]*.*\";\n+                expected3 = \"Minimal XHTML 1.1 DocumentThis is a minimal XHTML 1.1 document.\";\n+                expected4 = \".*(123)[\\\\w\\\\s]*.*\";\n+                break;\n+            default:\n+                break;\n+        }\n+\n+        return new Object[][]{\n+            \/\/ Case 1: external reference not in the JDKCatalog\n+            \/**\n+             * Case 1-1: default setting; no Config file; Catalog: continue (by default)\n+             * Expect: error as the parser continues and tries to access an invalid site\n+             *         java.net.UnknownHostException: invalid.site.com\n+             *\/\n+            {fileDTDNotInC, null, null, null, null, null, null, isErrExpected, expected1},\n+\n+            \/**\n+             * Case 1-2: set JDK Catalog to strict in a Config file\n+             * Expect: Exception since the external reference is not in the Catalog\n+             * Error Msg:\n+             * [Fatal Error] properties1.xml:2:75: JAXP00090001: The CatalogResolver is enabled with the catalog \"JdkCatalog.xml\", but a CatalogException is returned.\n+             * org.xml.sax.SAXException: javax.xml.catalog.CatalogException: JAXP09040001: No match found for publicId 'null' and systemId 'http:\/\/invalid.site.com\/dtd\/properties1.dtd'.\n+             * javax.xml.catalog.CatalogException: JAXP09040001: No match found for publicId 'null' and systemId 'http:\/\/invalid.site.com\/dtd\/properties1.dtd'.\n+             *\/\n+            {fileDTDNotInC, null, PropertyState.CONFIG_FILE, Properties.CONFIG_FILE_CATALOG_STRICT, null, null, null, true, errCode},\n+\n+            \/**\n+             * Case 1-3: set CATALOG back to continue through the System Property\n+             * Expect: error as the parser continues and tries to access an invalid site\n+             *         java.net.UnknownHostException: invalid.site.com\n+             *\/\n+            {fileDTDNotInC, null, PropertyState.CONFIG_FILE_SYSTEM, Properties.CONFIG_FILE_CATALOG_STRICT, new Properties[]{Properties.CATALOG0}, null, null, isErrExpected, expected1},\n+\n+            \/**\n+             * Case 1-4: override the settings in Case 3 with the API property, and set Catalog to strict\n+             * Expect: Exception since the external reference is not in the Catalog\n+             *\/\n+            {fileDTDNotInC, null, PropertyState.CONFIG_FILE_SYSTEM_API, Properties.CONFIG_FILE_CATALOG_STRICT, new Properties[]{Properties.CATALOG0}, new Properties[]{Properties.CATALOG2}, null, true, errCode},\n+\n+            \/\/ Case 2: external reference in the JDKCatalog\n+            \/**\n+             * Case 2-1: set CATALOG to strict in a Config file\n+             * Compare to: case 1-2\n+             * Expect: pass without error\n+             *\/\n+            {javaDTD, null, PropertyState.CONFIG_FILE, Properties.CONFIG_FILE_CATALOG_STRICT, null, null, null, false, expected1},\n+\n+            \/**\n+             * Case 2-2: override the settings in Case 3 with the API property, and set Catalog to strict\n+             * Compare to: case 1-4\n+             * Expect: pass without error\n+             *\/\n+            {javaDTD, null, PropertyState.CONFIG_FILE_SYSTEM_API, Properties.CONFIG_FILE_CATALOG_STRICT, new Properties[]{Properties.CATALOG0}, new Properties[]{Properties.CATALOG2}, null, false, expected1},\n+\n+            \/\/ Case 3: external reference in the Custom Catalog\n+            \/**\n+             * Case 3-1: set CATALOG to strict in a Config file\n+             * Compare to: case 1-2, would have resulted in an error without the\n+             *         custom catalog\n+             * Expect: pass without error because the external reference is in\n+             *         the custom catalog\n+             *\/\n+            {fileDTDInCC, null, PropertyState.CONFIG_FILE, Properties.CONFIG_FILE_CATALOG_STRICT, null, null, CustomCatalog.STRICT, false, expected4},\n+\n+            \/**\n+             * Case 3-2: override the settings in Case 3 with the API property, and set Catalog to strict\n+             * Compare to: case 1-4, would have resulted in an error without the\n+             *         custom catalog\n+             * Expect: pass without error\n+             *\/\n+            {fileDTDInCC, null, PropertyState.CONFIG_FILE_SYSTEM_API, Properties.CONFIG_FILE_CATALOG_STRICT, new Properties[]{Properties.CATALOG0}, new Properties[]{Properties.CATALOG2}, CustomCatalog.STRICT, false, expected4},\n+\n+            \/\/ Case 4: Parameter Entity reference\n+            \/**\n+             * Case 4-1: set CATALOG to strict in a Config file\n+             * Compare to: case 1-2, would have resulted in an error since the external\n+             * reference can not be found\n+             * Expect: pass without error because the external reference is in\n+             *         the custom catalog\n+             *\/\n+            {\"testExternalParameter.xml\", null, PropertyState.CONFIG_FILE, Properties.CONFIG_FILE_CATALOG_STRICT, null, null, CustomCatalog.STRICT, false, expected1},\n+\n+            \/\/ Case 5: resolve xInclude with the Custom Catalog\n+            \/**\n+             * Case 5-1: set CATALOG to strict in a Config file\n+             * Compare to: case 1-2, would have resulted in an error without the\n+             *         custom catalog\n+             * Expect: pass without error because the external reference is in\n+             *         the custom catalog\n+             *\/\n+            {\"XI_roottest.xml\", null, PropertyState.CONFIG_FILE, Properties.CONFIG_FILE_CATALOG_STRICT, null, null, CustomCatalog.STRICT, false, \"\"},\n+\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider for testing configuring properties for validation or transform.\n+     *\n+     * Fields:\n+     *     xml file, xsd or xsl file, FSP, state of setting, config file, system property,\n+     *     api property, Custom Catalog, error expected, error code or expected result\n+     *\/\n+    \/\/@DataProvider(name = \"validationOrTransform\")\n+    public Object[][] getConfig(String m) {\n+        \/\/ Schema Import\n+        String xmlFile = \"XSDImport_company.xsd\";\n+        String xsdOrXsl = null;\n+        String expected = \"\";\n+        String errCode = \"JAXP00090001\";\n+\n+        switch (m) {\n+            case \"SchemaTest2\":\n+                \/\/ Schema Include\n+                xmlFile = \"XSDInclude_company.xsd\";\n+                break;\n+            case \"Validation\":\n+                \/\/ Schema Location\n+                xmlFile = \"val_test.xml\";\n+                break;\n+            case \"Stylesheet\":\n+                errCode = \"JAXP09040001\";\n+                xmlFile = \"XSLDTD.xsl\";\n+                break;\n+            case \"Transform\":\n+                xmlFile = \"XSLPI.xml\";\n+                errCode = \"JAXP09040001\";\n+                xsdOrXsl = \"<?xml version='1.0'?>\"\n+                + \"<!DOCTYPE top SYSTEM 'test.dtd'\"\n+                + \"[\"\n+                + \"<!ENTITY % pe \\\"x\\\">\"\n+                + \"<!ENTITY   x1 \\\"AAAAA\\\">\"\n+                + \"<!ENTITY   x2 \\\"bbb\\\">\"\n+                +\"]>\"\n+                + \"<?xml-stylesheet href=\\\"\"\n+                + TEST_SOURCE_DIR\n+                + \"\/XSLPI_target.xsl\\\" type=\\\"text\/xml\\\"?>\"\n+                + \"<xsl:stylesheet \"\n+                + \"    xmlns:xsl='http:\/\/www.w3.org\/1999\/XSL\/Transform' \"\n+                + \"    version='1.0'>\"\n+                + \"<\/xsl:stylesheet> \";\n+                break;\n+            default:\n+                break;\n+        }\n+\n+        return new Object[][]{\n+            \/\/ Case 1: external reference not in the JDKCatalog\n+            \/**\n+             * Case 1-1: default setting; no Config file; Catalog: continue\n+             * Expect: pass without error\n+             *\/\n+            {xmlFile, xsdOrXsl, null, null, null, null, null, null, false, expected},\n+\n+            \/**\n+             * Case 1-2: set CATALOG to strict in a Config file\n+             * Expect: Exception since the external reference is not in the Catalog\n+             * Sample Error Msg:\n+             * org.xml.sax.SAXParseException; systemId: file:path\/XSDImport_company.xsd;\n+             * lineNumber: 10; columnNumber: 11;\n+             * JAXP00090001: The CatalogResolver is enabled with the catalog \"JdkCatalog.xml\",\n+             * but a CatalogException is returned.\n+             *\/\n+            {xmlFile, xsdOrXsl, null, PropertyState.CONFIG_FILE, Properties.CONFIG_FILE_CATALOG_STRICT, null, null, null, true, errCode},\n+\n+            \/**\n+             * Case 1-3: set CATALOG back to continue through the System Property\n+             * Expect: pass without error\n+             *\/\n+            {xmlFile, xsdOrXsl, null, PropertyState.CONFIG_FILE_SYSTEM, Properties.CONFIG_FILE_CATALOG_STRICT, new Properties[]{Properties.CATALOG0}, null, null, false, expected},\n+\n+            \/**\n+             * Case 1-4: override the settings in Case 3 with the API property, and set Catalog to strict\n+             * Expect: Exception since the external reference is not in the Catalog\n+             *\/\n+            {xmlFile, xsdOrXsl, null, PropertyState.CONFIG_FILE_SYSTEM_API, Properties.CONFIG_FILE_CATALOG_STRICT, new Properties[]{Properties.CATALOG0}, new Properties[]{Properties.CATALOG2}, null, true, errCode},\n+\n+            \/**\n+             * Case 1-5: use Custom Catalog to resolve external references\n+             * Expect: pass without error\n+             *\/\n+            {xmlFile, xsdOrXsl, null, PropertyState.CONFIG_FILE_SYSTEM_API, Properties.CONFIG_FILE_CATALOG_STRICT, new Properties[]{Properties.CATALOG0}, new Properties[]{Properties.CATALOG2}, CustomCatalog.STRICT, false, expected},\n+\n+        };\n+    }\n+\n+\/\/    @Test(dataProvider = \"configWCatalogForParsers\", priority=0)\n+    public void testDOM(String filename, Properties fsp, PropertyState state,\n+        Properties config, Properties[] sysProp, Properties[] apiProp, CustomCatalog cc,\n+        boolean expectError, String error) throws Exception {\n+\n+        DocumentBuilderFactory dbf = getDBF(fsp, state, config, sysProp, apiProp, cc);\n+        process(filename, dbf, expectError, error);\n+    }\n+\n+\/\/    @Test(dataProvider = \"configWCatalogForParsers\")\n+    public void testSAX(String filename, Properties fsp, PropertyState state,\n+        Properties config, Properties[] sysProp, Properties[] apiProp, CustomCatalog cc,\n+        boolean expectError, String error) throws Exception {\n+\n+        SAXParser parser = getSAXParser(fsp, state, config, sysProp, apiProp, cc);\n+        process(filename, parser, expectError, error);\n+    }\n+\n+\/\/    @Test(dataProvider = \"configWCatalogForParsers\")\n+    public void testStAX(String filename, Properties fsp, PropertyState state,\n+        Properties config, Properties[] sysProp, Properties[] apiProp, CustomCatalog cc,\n+        boolean expectError, String error) throws Exception {\n+\n+        XMLInputFactory xif = getXMLInputFactory(state, config, sysProp, apiProp, cc);\n+        process(filename, xif, expectError, error);\n+    }\n+\n+\/\/    @Test(dataProvider = \"validationOrTransform\")\n+    public void testSchema1(String filename, String xsd, Properties fsp, PropertyState state,\n+        Properties config, Properties[] sysProp, Properties[] apiProp, CustomCatalog cc,\n+        boolean expectError, String error) throws Exception {\n+\n+        SchemaFactory sf = getSchemaFactory(fsp, state, config, sysProp, apiProp, cc);\n+        process(filename, sf, expectError, error);\n+    }\n+\n+\/\/    @Test(dataProvider = \"validationOrTransform\")\n+    public void testSchema2(String filename, String xsd, Properties fsp, PropertyState state,\n+        Properties config, Properties[] sysProp, Properties[] apiProp, CustomCatalog cc,\n+        boolean expectError, String error) throws Exception {\n+        testSchema1(filename, xsd, fsp, state, config, sysProp, apiProp, cc, expectError,  error);\n+    }\n+\n+\/\/    @Test(dataProvider = \"validationOrTransform\")\n+    public void testValidation(String filename, String xsd, Properties fsp, PropertyState state,\n+        Properties config, Properties[] sysProp, Properties[] apiProp, CustomCatalog cc,\n+        boolean expectError, String error) throws Exception {\n+\n+        SchemaFactory sf = getSchemaFactory(fsp, state, config, sysProp, apiProp, cc);\n+        validate(filename, sf, expectError, error);\n+    }\n+\n+\/\/    @Test(dataProvider = \"validationOrTransform\")\n+    public void testStylesheet(String filename, String xsl, Properties fsp, PropertyState state,\n+        Properties config, Properties[] sysProp, Properties[] apiProp, CustomCatalog cc,\n+        boolean expectError, String error) throws Exception {\n+\n+        TransformerFactory tf = getTransformerFactory(fsp, state, config, sysProp, apiProp, cc);\n+        process(filename, tf, expectError, error);\n+    }\n+\n+\/\/    @Test(dataProvider = \"validationOrTransform\")\n+    public void testTransform(String filename, String xsl, Properties fsp, PropertyState state,\n+        Properties config, Properties[] sysProp, Properties[] apiProp, CustomCatalog cc,\n+        boolean expectError, String error) throws Exception {\n+\n+        TransformerFactory tf = getTransformerFactory(fsp, state, config, sysProp, apiProp, cc);\n+        transform(filename, xsl, tf, expectError, error);\n+    }\n+\n+    \/\/ parameters in the same order as the test method\n+    String filename; String xsd; String xsl; Properties fsp; PropertyState state;\n+    Properties config; Properties[] sysProp; Properties[] apiProp; CustomCatalog cc;\n+    boolean expectError; String error;\n+\n+    \/\/ Maps the DataProvider array to individual parameters\n+    public void paramMap(Processor processor, String method, String index) {\n+        int i = 0;\n+        Object[][] params;\n+        if (processor == Processor.VALIDATOR ||\n+                processor == Processor.TRANSFORMER) {\n+            params = getConfig(method);\n+            i = 1;\n+        } else {\n+            params = getConfigs(processor);\n+        }\n+        Object[] param = params[Integer.parseInt(index)];\n+        filename = (String)param[0];\n+        if (processor == Processor.VALIDATOR) {\n+            xsd = (String)param[i];\n+        } else if (processor == Processor.TRANSFORMER) {\n+            xsl = (String)param[i];\n+        }\n+        fsp = (Properties)param[i + 1];\n+        state = (PropertyState)param[i + 2];\n+        config = (Properties)param[i + 3];\n+        sysProp = (Properties[])param[i + 4];\n+        apiProp = (Properties[])param[i + 5];\n+        cc = (CustomCatalog)param[i + 6];\n+        expectError = (boolean)param[i + 7];\n+        error = (String)param[i + 8];\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/catalog\/CatalogTestBase.java","additions":361,"deletions":0,"binary":false,"changes":361,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.catalog;\n+\n+\/**\n+ * @test @bug 8306055\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run driver common.catalog.DOMTest 0 \/\/ verifies default setting catalog.resolve=allow\n+ * @run driver common.catalog.DOMTest 1 \/\/ verifies overriding with catalog.resolve=strict in a config file\n+ * @run driver common.catalog.DOMTest 2 \/\/ verifies overriding with system property\n+ * @run driver common.catalog.DOMTest 3 \/\/ verifies overriding with factory setting (catalog.resolve=strict)\n+ * @run driver common.catalog.DOMTest 4 \/\/ verifies external DTD resolution with the JDK Catalog while resolve=strict in config file\n+ * @run driver common.catalog.DOMTest 5 \/\/ verifies external DTD resolution with the JDK Catalog while resolve=strict in API setting\n+ * @run driver common.catalog.DOMTest 6 \/\/ verifies external DTD resolution with a custom Catalog while resolve=strict in config file\n+ * @run driver common.catalog.DOMTest 7 \/\/ verifies external DTD resolution with a custom Catalog while resolve=strict in API setting\n+ * @run driver common.catalog.DOMTest 8 \/\/ verifies external parameter are resolved with a custom Catalog though resolve=strict in API setting\n+ * @run driver common.catalog.DOMTest 9 \/\/ verifies XInclude are resolved with a custom Catalog though resolve=strict in API setting\n+ * @summary verifies DOM's support of the JDK Catalog.\n+ *\/\n+public class DOMTest extends CatalogTestBase {\n+    public static void main(String args[]) throws Exception {\n+        new DOMTest().run(args[0]);\n+    }\n+\n+    public void run(String index) throws Exception {\n+        paramMap(Processor.DOM, null, index);\n+        super.testDOM(filename, fsp, state, config, sysProp, apiProp, cc, expectError, error);\n+\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/catalog\/DOMTest.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.catalog;\n+\n+\/**\n+ * @test @bug 8306055\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run driver common.catalog.SAXTest 0 \/\/ verifies default setting catalog.resolve=allow\n+ * @run driver common.catalog.SAXTest 1 \/\/ verifies overriding with catalog.resolve=strict in a config file\n+ * @run driver common.catalog.SAXTest 2 \/\/ verifies overriding with system property\n+ * @run driver common.catalog.SAXTest 3 \/\/ verifies overriding with factory setting (catalog.resolve=strict)\n+ * @run driver common.catalog.SAXTest 4 \/\/ verifies external DTD resolution with the JDK Catalog while resolve=strict in config file\n+ * @run driver common.catalog.SAXTest 5 \/\/ verifies external DTD resolution with the JDK Catalog while resolve=strict in API setting\n+ * @run driver common.catalog.SAXTest 6 \/\/ verifies external DTD resolution with a custom Catalog while resolve=strict in config file\n+ * @run driver common.catalog.SAXTest 7 \/\/ verifies external DTD resolution with a custom Catalog while resolve=strict in API setting\n+ * @run driver common.catalog.SAXTest 8 \/\/ verifies external parameter are resolved with a custom Catalog though resolve=strict in API setting\n+ * @run driver common.catalog.SAXTest 9 \/\/ verifies XInclude are resolved with a custom Catalog though resolve=strict in API setting\n+ * @summary verifies DOM's support of the JDK Catalog.\n+\n+ *\/\n+public class SAXTest extends CatalogTestBase {\n+    public static void main(String args[]) throws Exception {\n+        new SAXTest().run(args[0]);\n+    }\n+\n+    public void run(String index) throws Exception {\n+        paramMap(Processor.SAX, null, index);\n+        super.testSAX(filename, fsp, state, config, sysProp, apiProp, cc, expectError, error);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/catalog\/SAXTest.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.catalog;\n+\n+\/**\n+ * @test @bug 8306632\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run driver common.catalog.SchemaTest SchemaTest1 0 \/\/ verifies default setting dtd.support=allow\n+ * @run driver common.catalog.SchemaTest SchemaTest1 1 \/\/ verifies overriding with config file\n+ * @run driver common.catalog.SchemaTest SchemaTest1 2 \/\/ verifies overriding with system property\n+ * @run driver common.catalog.SchemaTest SchemaTest1 3 \/\/ verifies overriding with factory setting (DTD=deny)\n+ * @run driver common.catalog.SchemaTest SchemaTest1 4 \/\/ verifies DTD=ignore\n+ * @run driver common.catalog.SchemaTest SchemaTest2 0 \/\/ verifies default setting dtd.support=allow\n+ * @run driver common.catalog.SchemaTest SchemaTest2 1 \/\/ verifies overriding with config file\n+ * @run driver common.catalog.SchemaTest SchemaTest2 2 \/\/ verifies overriding with system property\n+ * @run driver common.catalog.SchemaTest SchemaTest2 3 \/\/ verifies overriding with factory setting (DTD=deny)\n+ * @run driver common.catalog.SchemaTest SchemaTest2 4 \/\/ verifies DTD=ignore\n+ * @run driver common.catalog.SchemaTest Validation 0 \/\/ verifies default setting dtd.support=allow\n+ * @run driver common.catalog.SchemaTest Validation 1 \/\/ verifies overriding with config file\n+ * @run driver common.catalog.SchemaTest Validation 2 \/\/ verifies overriding with system property\n+ * @run driver common.catalog.SchemaTest Validation 3 \/\/ verifies overriding with factory setting (DTD=deny)\n+ * @run driver common.catalog.SchemaTest Validation 4 \/\/ verifies DTD=ignore\n+ * @summary verifies Schema and Validation's support of the property jdk.xml.dtd.support.\n+ *\/\n+public class SchemaTest extends CatalogTestBase {\n+\n+    public static void main(String args[]) throws Exception {\n+        new SchemaTest().run(args[0], args[1]);\n+    }\n+\n+    public void run(String method, String index) throws Exception {\n+        paramMap(Processor.VALIDATOR, method, index);\n+        switch (method) {\n+            case \"SchemaTest1\":\n+                super.testSchema1(filename, xsd, fsp, state, config, sysProp, apiProp, cc, expectError, error);\n+                break;\n+            case \"SchemaTest2\":\n+                super.testSchema2(filename, xsd, fsp, state, config, sysProp, apiProp, cc, expectError, error);\n+                break;\n+            case \"Validation\":\n+                super.testValidation(filename, xsd, fsp, state, config, sysProp, apiProp, cc, expectError, error);\n+                break;\n+        }\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/catalog\/SchemaTest.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.catalog;\n+\n+\/**\n+ * @test @bug 8306055\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run driver common.catalog.StAXTest 0 \/\/ verifies default setting catalog.resolve=allow\n+ * @run driver common.catalog.StAXTest 1 \/\/ verifies overriding with catalog.resolve=strict in a config file\n+ * @run driver common.catalog.StAXTest 2 \/\/ verifies overriding with system property\n+ * @run driver common.catalog.StAXTest 3 \/\/ verifies overriding with factory setting (catalog.resolve=strict)\n+ * @run driver common.catalog.StAXTest 4 \/\/ verifies external DTD resolution with the JDK Catalog while resolve=strict in config file\n+ * @run driver common.catalog.StAXTest 5 \/\/ verifies external DTD resolution with the JDK Catalog while resolve=strict in API setting\n+ * @run driver common.catalog.StAXTest 6 \/\/ verifies external DTD resolution with a custom Catalog while resolve=strict in config file\n+ * @run driver common.catalog.StAXTest 7 \/\/ verifies external DTD resolution with a custom Catalog while resolve=strict in API setting\n+ * @run driver common.catalog.StAXTest 8 \/\/ verifies external parameter are resolved with a custom Catalog though resolve=strict in API setting\n+ * @run driver common.catalog.StAXTest 9 \/\/ verifies XInclude are resolved with a custom Catalog though resolve=strict in API setting\n+ * @summary verifies DOM's support of the JDK Catalog.\n+ *\/\n+public class StAXTest extends CatalogTestBase {\n+    public static void main(String args[]) throws Exception {\n+        new StAXTest().run(args[0]);\n+    }\n+\n+    public void run(String index) throws Exception {\n+        paramMap(Processor.STAX, null, index);\n+        super.testStAX(filename, fsp, state, config, sysProp, apiProp, cc, expectError, error);\n+\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/catalog\/StAXTest.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.catalog;\n+\n+\/**\n+ * @test @bug 8306632\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run driver common.catalog.TransformTest Stylesheet 0 \/\/ verifies default setting dtd.support=allow\n+ * @run driver common.catalog.TransformTest Stylesheet 1 \/\/ verifies overriding with config file\n+ * @run driver common.catalog.TransformTest Stylesheet 2 \/\/ verifies overriding with system property\n+ * @run driver common.catalog.TransformTest Stylesheet 3 \/\/ verifies overriding with factory setting (DTD=deny)\n+ * @run driver common.catalog.TransformTest Stylesheet 4 \/\/ verifies DTD=ignore\n+ * @run driver common.catalog.TransformTest Transform 0 \/\/ verifies default setting dtd.support=allow\n+ * @run driver common.catalog.TransformTest Transform 1 \/\/ verifies overriding with config file\n+ * @run driver common.catalog.TransformTest Transform 2 \/\/ verifies overriding with system property\n+ * @run driver common.catalog.TransformTest Transform 3 \/\/ verifies overriding with factory setting (DTD=deny)\n+ * @run driver common.catalog.TransformTest Transform 4 \/\/ verifies DTD=ignore\n+ * @summary verifies Transform's support of the property jdk.xml.dtd.support.\n+ *\/\n+public class TransformTest extends CatalogTestBase {\n+\n+    public static void main(String args[]) throws Exception {\n+        new TransformTest().run(args[0], args[1]);\n+    }\n+\n+    public void run(String method, String index) throws Exception {\n+        paramMap(Processor.TRANSFORMER, method, index);\n+        switch (method) {\n+            case \"Stylesheet\":\n+                super.testStylesheet(filename, xsl, fsp, state, config, sysProp, apiProp, cc, expectError, error);\n+                break;\n+            case \"Transform\":\n+                super.testTransform(filename, xsl, fsp, state, config, sysProp, apiProp, cc, expectError, error);\n+                break;\n+        }\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/catalog\/TransformTest.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<catalog xmlns=\"urn:oasis:names:tc:entity:xmlns:xml:catalog\">\n+    <!-- Catalog for testing the CATALOG property\n+    -->\n+\n+    <group id=\"dtds\" prefer = \"system\" xml:base = \"dtds\/\">\n+        <systemSuffix systemIdSuffix=\"test.dtd\" uri=\"test.dtd\"\/>\n+        <system systemId=\"file:\/externalParameterEntity\" uri=\"paramEntity.dtd\"\/>\n+        <system systemId=\"XSLDTD.dtd\" uri=\"XSLDTD.dtd\"\/>\n+        \n+    <\/group>\n+\n+    <group id=\"xsds\" prefer = \"system\" xml:base = \"xsds\/\">\n+        <system systemId=\"XSDImport_person.xsd\" uri=\"XSDImport_person.xsd\"\/>\n+        <system systemId=\"XSDImport_product.xsd\" uri=\"XSDImport_product.xsd\"\/>\n+        <system systemId=\"XSDInclude_person.xsd\" uri=\"XSDInclude_person.xsd\"\/>\n+        <system systemId=\"XSDInclude_product.xsd\" uri=\"XSDInclude_product.xsd\"\/>\n+        <!-- file:\/path\/val_test.xsd -->\n+        <systemSuffix systemIdSuffix=\"val_test.xsd\" uri=\"val_test.xsd\"\/>\n+    <\/group>\n+\n+    <group id=\"xi\" prefer = \"system\" xml:base = \"xinclude\/\">\n+\n+        <system systemId=\"XI_red.dtd\" uri=\"XI_red.dtd\"\/>\n+        <system systemId=\"XI_simple.xml\" uri=\"XI_simple.xml\"\/>\n+        <system systemId=\"XI_test2.xml\" uri=\"XI_test2.xml\"\/>\n+        <system systemId=\"XI_utf8.xml\" uri=\"XI_utf8.xml\"\/>\n+    <\/group>\n+    <!-- additional catalogs can be added a NextCatalog besides registering\n+         through the Feature.FILES (javax.xml.catalog.files) property -->\n+    <!-- nextCatalog catalog=\"pathto\/AnotherCatalog.xml\"\/-->\n+<\/catalog>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/catalog\/testcatalog\/TestCatalog.xml","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/catalog\/testcatalog\/dtds\/XSLDTD.dtd","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/XSLDTD.dtd","status":"copied"},{"patch":"@@ -0,0 +1,2 @@\n+<!ENTITY  quantity \"2\">\r\n+<!ENTITY  unitPrice \"24.99\">\r\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/catalog\/testcatalog\/dtds\/paramEntity.dtd","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/catalog\/testcatalog\/dtds\/test.dtd","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/test.dtd","status":"copied"},{"patch":"","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/catalog\/testcatalog\/xinclude\/XI_red.dtd","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/XI_red.dtd","status":"copied"},{"patch":"","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/catalog\/testcatalog\/xinclude\/XI_simple.xml","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/XI_simple.xml","status":"copied"},{"patch":"@@ -0,0 +1,10 @@\n+<?xml version=\"1.1\"?>\n+<!-- comment before root -->\n+<!DOCTYPE red SYSTEM \"XI_red.dtd\">\n+<red xmlns:xinclude=\"http:\/\/www.w3.org\/2001\/XInclude\">\n+  <blue>\n+    <xinclude:include href=\"XI_utf8.xml\" parse=\"text\"\/>\n+  <\/blue>\n+<\/red>\n+<!-- comment after root -->\n+\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/catalog\/testcatalog\/xinclude\/XI_test2.xml","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+<red>\n+    value1 trjsagdkasgdhasdgashgdhsadgashdg\n+<\/red>\n+\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/catalog\/testcatalog\/xinclude\/XI_utf8.xml","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/catalog\/testcatalog\/xsds\/XSDImport_person.xsd","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/XSDImport_person.xsd","status":"copied"},{"patch":"","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/catalog\/testcatalog\/xsds\/XSDImport_product.xsd","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/XSDImport_product.xsd","status":"copied"},{"patch":"","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/catalog\/testcatalog\/xsds\/XSDInclude_person.xsd","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/XSDInclude_person.xsd","status":"copied"},{"patch":"","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/catalog\/testcatalog\/xsds\/XSDInclude_product.xsd","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/XSDInclude_product.xsd","status":"copied"},{"patch":"","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/catalog\/testcatalog\/xsds\/val_test.xsd","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/val_test.xsd","status":"copied"},{"patch":"@@ -0,0 +1,36 @@\n+################################################################################\n+#       XML Library (java.xml) Configuration File\n+#\n+# This file is in java.util.Properties format and typically located in the conf \n+# directory of the Java installation. It may contain key\/value pairs for specifying\n+# the implementation class of a factory and\/or properties that have corresponding\n+# system properties. \n+#\n+# This file can be replaced by specifying a filename with the java.xml.config.file \n+# system property. For example java -Djava.xml.config.file=myfile \n+################################################################################\n+\n+# ---- Config File: for testing the CATALOG property ----\n+#\n+# strict: report error if not resolved by the JDK Catalog\n+jdk.xml.jdkCatalog.resolve=strict\n+# Enable Extension Functions\n+jdk.xml.enableExtensionFunctions=true\n+# Disallow overriding the default parser\n+jdk.xml.overrideDefaultParser=false\n+#\n+# Implementation specific limits:\n+#\n+jdk.xml.entityExpansionLimit=64000\n+jdk.xml.elementAttributeLimit=10000\n+jdk.xml.maxOccurLimit=5000\n+jdk.xml.totalEntitySizeLimit=100000\n+jdk.xml.maxGeneralEntitySizeLimit=0\n+jdk.xml.maxParameterEntitySizeLimit=1000000\n+jdk.xml.entityReplacementLimit=300000\n+jdk.xml.maxElementDepth=0\n+jdk.xml.maxXMLNameLimit=1000\n+jdk.xml.xpathExprGrpLimit=10\n+jdk.xml.xpathExprOpLimit=100\n+jdk.xml.xpathTotalOpLimit=10000\n+\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/files\/catalog2.properties","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -131,0 +131,5 @@\n+# Implementation Specific Properties - DTD\n+#\n+# This property instructs the parsers to: deny, ignore or allow DTD processing.\n+# The following setting would cause the parser to reject DTD by throwing an exception.\n+# jdk.xml.dtd.support=deny\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/files\/jaxp.properties","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -20,9 +20,0 @@\n-    static final String SRC_DIR;\n-    static {\n-        String srcDir = System.getProperty(\"test.src\", \".\");\n-        if (IS_WINDOWS) {\n-            srcDir = srcDir.replace('\\\\', '\/');\n-        }\n-        SRC_DIR = srcDir;\n-        TEST_SOURCE_DIR = srcDir + \"\/..\/xmlfiles\/\";\n-    }\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/dtd\/DTDTestBase.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -70,2 +70,2 @@\n-    public static String SRC_DIR = System.getProperty(\"test.src\", \".\");\n-    public static String TEST_SOURCE_DIR;\n+    public static String SRC_DIR;\n+    public static String TEST_SOURCE_DIR, CONFIG_FILE_PATH, CATALOG_PATH;\n@@ -73,0 +73,14 @@\n+    static {\n+        String srcDir = System.getProperty(\"test.src\", \".\");\n+        if (IS_WINDOWS) {\n+            srcDir = srcDir.replace('\\\\', '\/');\n+        }\n+        SRC_DIR = srcDir;\n+        if (IS_WINDOWS) {\n+            CATALOG_PATH = \"file:\/\/\/\" + SRC_DIR + \"\/..\/catalog\/testcatalog\/TestCatalog.xml\";\n+        } else {\n+            CATALOG_PATH = \"file:\/\/\" + SRC_DIR + \"\/..\/catalog\/testcatalog\/TestCatalog.xml\";\n+        }\n+        TEST_SOURCE_DIR = srcDir + \"\/..\/xmlfiles\/\";\n+        CONFIG_FILE_PATH = SRC_DIR + \"\/..\/config\/files\/\";\n+    }\n@@ -77,0 +91,4 @@\n+    \/\/ CATALOG Abbreviation: C\n+    static final String C_FILE = CatalogFeatures.Feature.FILES.getPropertyName();\n+    static final String C_RESOLVE = CatalogFeatures.Feature.RESOLVE.getPropertyName();\n+\n@@ -87,0 +105,1 @@\n+    public static final String SP_CATALOG = \"jdk.xml.jdkCatalog.resolve\";\n@@ -100,1 +119,4 @@\n-    public static final String JCF_DTD2 = \"..\/config\/files\/dtd2.properties\";\n+    public static final String JCF_DTD2 = \"dtd2.properties\";\n+\n+    \/\/ CATALOG=strict\n+    public static final String CONFIG_CATALOG_STRICT = \"catalog2.properties\";\n@@ -110,1 +132,3 @@\n-        CONFIG_FILE_DTD2(null, CONFIG_FILE, Type.FEATURE, getPath(JCF_DTD2)),\n+        \/\/ config file: CATALOG = strict\n+        CONFIG_FILE_CATALOG_STRICT(null, CONFIG_FILE, Type.FEATURE, getPath(CONFIG_FILE_PATH, CONFIG_CATALOG_STRICT)),\n+        CONFIG_FILE_DTD2(null, CONFIG_FILE, Type.FEATURE, getPath(CONFIG_FILE_PATH, JCF_DTD2)),\n@@ -118,0 +142,3 @@\n+        CATALOG0(SP_CATALOG, \"ditto\", Type.PROPERTY, RESOLVE_CONTINUE),\n+        CATALOG1(SP_CATALOG, \"ditto\", Type.PROPERTY, RESOLVE_IGNORE),\n+        CATALOG2(SP_CATALOG, \"ditto\", Type.PROPERTY, RESOLVE_STRICT),\n@@ -184,0 +211,23 @@\n+    public static enum CustomCatalog {\n+        \/\/ continue processing if no match found\n+        CONTINUE(CATALOG_PATH, \"continue\"),\n+        \/\/ skip if no match found\n+        IGNORE(CATALOG_PATH, \"ignore\"),\n+        \/\/ throws CatalogException if no match found\n+        STRICT(CATALOG_PATH, \"strict\");\n+\n+        String file, resolve;\n+        CustomCatalog(String file, String resolve) {\n+            this.file = file;\n+            this.resolve = resolve;\n+        }\n+\n+        public String file() {\n+            return file;\n+        }\n+\n+        public String resolve() {\n+            return resolve;\n+        }\n+    }\n+\n@@ -188,1 +238,1 @@\n-        File file = new File(getPath(filename));\n+        File file = new File(getPath(TEST_SOURCE_DIR, filename));\n@@ -201,1 +251,1 @@\n-        File file = new File(getPath(filename));\n+        File file = new File(getPath(TEST_SOURCE_DIR, filename));\n@@ -214,1 +264,1 @@\n-        String xml = getPath(filename);\n+        String xml = getPath(TEST_SOURCE_DIR, filename);\n@@ -231,1 +281,1 @@\n-        String xsd = getPath(filename);\n+        String xsd = getPath(TEST_SOURCE_DIR, filename);\n@@ -243,1 +293,1 @@\n-        String xsl = getPath(filename);\n+        String xsl = getPath(TEST_SOURCE_DIR, filename);\n@@ -257,1 +307,1 @@\n-        String xmlSysId = getPath(xmlFile);\n+        String xmlSysId = getPath(TEST_SOURCE_DIR, xmlFile);\n@@ -267,1 +317,0 @@\n-            e.printStackTrace();\n@@ -274,1 +323,1 @@\n-        String xml = getPath(filename);\n+        String xml = getPath(TEST_SOURCE_DIR, filename);\n@@ -312,0 +361,5 @@\n+        return getDBF(fsp, state, config, sysProp, apiProp, null);\n+    }\n+\n+    protected DocumentBuilderFactory getDBF(Properties fsp, PropertyState state,\n+            Properties config, Properties[] sysProp, Properties[] apiProp, CustomCatalog cc) {\n@@ -338,0 +392,4 @@\n+        if (cc != null) {\n+            dbf.setAttribute(C_FILE, cc.file());\n+            dbf.setAttribute(C_RESOLVE, cc.resolve());\n+        }\n@@ -358,0 +416,5 @@\n+        return getSAXParser(fsp, state, config, sysProp, apiProp, null);\n+    }\n+\n+    public SAXParser getSAXParser(Properties fsp, PropertyState state, Properties config,\n+            Properties[] sysProp, Properties[] apiProp, CustomCatalog cc) throws Exception {\n@@ -390,0 +453,5 @@\n+        if (cc != null) {\n+            parser.setProperty(C_FILE, cc.file());\n+            parser.setProperty(C_RESOLVE, cc.resolve());\n+        }\n+\n@@ -396,0 +464,5 @@\n+        return getXMLInputFactory(state, config, sysProp, apiProp, null);\n+    }\n+\n+    protected XMLInputFactory getXMLInputFactory(PropertyState state,\n+            Properties config, Properties[] sysProp, Properties[] apiProp, CustomCatalog cc) {\n@@ -405,0 +478,5 @@\n+        if (cc != null) {\n+            factory.setProperty(C_FILE, cc.file());\n+            factory.setProperty(C_RESOLVE, cc.resolve());\n+        }\n+\n@@ -413,0 +491,6 @@\n+        return getSchemaFactory(fsp, state, config, sysProp, apiProp, null);\n+    }\n+\n+    protected SchemaFactory getSchemaFactory(Properties fsp, PropertyState state,\n+            Properties config, Properties[] sysProp, Properties[] apiProp, CustomCatalog cc)\n+            throws Exception {\n@@ -430,0 +514,5 @@\n+        if (cc != null) {\n+            factory.setProperty(C_FILE, cc.file());\n+            factory.setProperty(C_RESOLVE, cc.resolve());\n+        }\n+\n@@ -438,0 +527,6 @@\n+        return getTransformerFactory(fsp, state, config, sysProp, apiProp, null);\n+    }\n+\n+    protected TransformerFactory getTransformerFactory(Properties fsp, PropertyState state,\n+            Properties config, Properties[] sysProp, Properties[] apiProp, CustomCatalog cc)\n+            throws Exception {\n@@ -453,0 +548,4 @@\n+        if (cc != null) {\n+            tf.setAttribute(C_FILE, cc.file());\n+            tf.setAttribute(C_RESOLVE, cc.resolve());\n+        }\n@@ -608,2 +707,2 @@\n-    static String getPath(String file) {\n-        String temp = TEST_SOURCE_DIR + file;\n+    static String getPath(String base, String file) {\n+        String temp = base + file;\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/util\/TestBase.java","additions":113,"deletions":14,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -0,0 +1,6 @@\n+<?xml version=\"1.1\"?>\n+<!-- comment before root 1 -->\n+<xinclude:include xmlns:xinclude=\"http:\/\/www.w3.org\/2001\/XInclude\"\n+  href=\"XI_simple.xml\"\/>\n+<!-- comment after root 1 -->\n+\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/XI_roottest.xml","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"},{"patch":"@@ -0,0 +1,6 @@\n+<!DOCTYPE top SYSTEM 'test.dtd'\r\n+[\r\n+<!ENTITY % pe0 \"x\">\r\n+        <!ENTITY   x1 \"A\">\r\n+        ]>\r\n+<top>123&x1;<\/top>\r\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/test.xml","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"},{"patch":"@@ -0,0 +1,12 @@\n+<?xml version='1.0' encoding ='utf-8'?>\n+<!DOCTYPE SupplierOrder [\n+<!ENTITY % paraEntity SYSTEM \"file:\/externalParameterEntity\">\n+%paraEntity;\n+]>\n+<SupplierOrder>\n+    value value1\n+    <OrderId>10016<\/OrderId>\n+    <LineItems>\n+        <LineItem categoryId=\"BIRDS\" itemId=\"EST-18\" lineNo=\"0\" productId=\"AV-CB-01\" quantity=\"&quantity;\" unitPrice=\"&unitPrice;\"\/>\n+    <\/LineItems>\n+<\/SupplierOrder>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/testExternalParameter.xml","additions":12,"deletions":0,"binary":false,"changes":12,"status":"added"}]}