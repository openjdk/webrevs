{"files":[{"patch":"@@ -790,1 +790,2 @@\n-  ctzc_bit(trailing_char, match_mask, isL, ch1, result);\n+  \/\/ count bits of trailing zero chars\n+  ctzc_bits(trailing_char, match_mask, isL, ch1, result);\n@@ -1539,1 +1540,2 @@\n-    ctzc_bit(result, tmp3, isLL); \/\/ count zero from lsb to msb\n+    \/\/ count bits of trailing zero chars\n+    ctzc_bits(result, tmp3, isLL);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -5398,4 +5398,6 @@\n-\/\/ Count bits of trailing zero chars from lsb to msb until first non-zero element.\n-\/\/ For LL case, one byte for one element, so shift 8 bits once, and for other case,\n-\/\/ shift 16 bits once.\n-void MacroAssembler::ctzc_bit(Register Rd, Register Rs, bool isLL, Register tmp1, Register tmp2) {\n+\/\/ Count bits of trailing zero chars from lsb to msb until first non-zero\n+\/\/ char seen. For the LL case, shift 8 bits once as there is only one byte\n+\/\/ per each char. For other cases, shift 16 bits once.\n+void MacroAssembler::ctzc_bits(Register Rd, Register Rs, bool isLL,\n+                               Register tmp1, Register tmp2) {\n+  int step = isLL ? 8 : 16;\n@@ -5403,2 +5405,0 @@\n-    assert_different_registers(Rd, Rs, tmp1);\n-    int step = isLL ? 8 : 16;\n@@ -5406,2 +5406,1 @@\n-    andi(tmp1, Rd, step - 1);\n-    sub(Rd, Rd, tmp1);\n+    andi(Rd, Rd, -step);\n@@ -5411,1 +5410,1 @@\n-  assert_different_registers(Rd, Rs, tmp1, tmp2);\n+  assert_different_registers(Rd, tmp1, tmp2);\n@@ -5413,2 +5412,0 @@\n-  int step = isLL ? 8 : 16;\n-  mv(Rd, -step);\n@@ -5416,0 +5413,1 @@\n+  mv(Rd, -step);\n@@ -5419,1 +5417,1 @@\n-  andi(tmp1, tmp2, ((1 << step) - 1));\n+  zext(tmp1, tmp2, step);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1365,1 +1365,2 @@\n-  void ctzc_bit(Register Rd, Register Rs, bool isLL = false, Register tmp1 = t0, Register tmp2 = t1);\n+  void ctzc_bits(Register Rd, Register Rs, bool isLL = false,\n+                 Register tmp1 = t0, Register tmp2 = t1);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2571,1 +2571,2 @@\n-      __ ctzc_bit(tmp4, tmp3);\n+      \/\/ count bits of trailing zero chars\n+      __ ctzc_bits(tmp4, tmp3);\n@@ -2706,1 +2707,2 @@\n-      __ ctzc_bit(tmp3, tmp4, isLL); \/\/ count zero from lsb to msb\n+      \/\/ count bits of trailing zero chars\n+      __ ctzc_bits(tmp3, tmp4, isLL);\n@@ -2719,1 +2721,2 @@\n-      __ ctzc_bit(tmp3, tmp4, isLL); \/\/ count zero from lsb to msb\n+      \/\/ count bits of trailing zero chars\n+      __ ctzc_bits(tmp3, tmp4, isLL);\n@@ -2865,1 +2868,2 @@\n-    __ ctzc_bit(trailing_zeros, match_mask, haystack_isL, ch2, tmp); \/\/ count trailing zeros\n+    \/\/ count bits of trailing zero chars\n+    __ ctzc_bits(trailing_zeros, match_mask, haystack_isL, ch2, tmp);\n@@ -2884,1 +2888,2 @@\n-    __ ctzc_bit(trailing_zeros, match_mask, haystack_isL, tmp, ch2);\n+    \/\/ count bits of trailing zero chars\n+    __ ctzc_bits(trailing_zeros, match_mask, haystack_isL, tmp, ch2);\n@@ -2903,1 +2908,2 @@\n-    __ ctzc_bit(trailing_zeros, match_mask, haystack_isL, tmp, ch2);\n+    \/\/ count bits of trailing zero chars\n+    __ ctzc_bits(trailing_zeros, match_mask, haystack_isL, tmp, ch2);\n@@ -2932,1 +2938,2 @@\n-    __ ctzc_bit(trailing_zeros, match_mask, haystack_isL, needle_len, ch2); \/\/ find next \"first\" char index\n+    \/\/ count bits of trailing zero chars\n+    __ ctzc_bits(trailing_zeros, match_mask, haystack_isL, needle_len, ch2);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":14,"deletions":7,"binary":false,"changes":21,"status":"modified"}]}