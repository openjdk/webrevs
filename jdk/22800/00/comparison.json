{"files":[{"patch":"@@ -5398,4 +5398,5 @@\n-\/\/ Count bits of trailing zero chars from lsb to msb until first non-zero element.\n-\/\/ For LL case, one byte for one element, so shift 8 bits once, and for other case,\n-\/\/ shift 16 bits once.\n-void MacroAssembler::ctzc_bit(Register Rd, Register Rs, bool isLL, Register tmp1, Register tmp2) {\n+\/\/ Count bits of trailing zero chars from lsb to msb until first non-zero\n+\/\/ char seen. For the LL case, shift 8 bits once as there is only one byte\n+\/\/ per each char. For other cases, shift 16 bits once.\n+void MacroAssembler::ctzc_bit(Register Rd, Register Rs, bool isLL,\n+                              Register tmp1, Register tmp2) {\n@@ -5419,1 +5420,1 @@\n-  andi(tmp1, tmp2, ((1 << step) - 1));\n+  zext(tmp1, tmp2, step);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1365,1 +1365,2 @@\n-  void ctzc_bit(Register Rd, Register Rs, bool isLL = false, Register tmp1 = t0, Register tmp2 = t1);\n+  void ctzc_bit(Register Rd, Register Rs, bool isLL = false,\n+                Register tmp1 = t0, Register tmp2 = t1);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}