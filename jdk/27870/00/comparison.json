{"files":[{"patch":"@@ -218,1 +218,1 @@\n-        return strings.stream().collect(Collectors.joining(\",\"));\n+        return strings.stream().sorted().collect(Collectors.joining(\",\"));\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/JLinkRuntimeBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import static java.util.stream.Collectors.toMap;\n+\n@@ -33,0 +35,1 @@\n+import java.util.TreeMap;\n@@ -34,2 +37,0 @@\n-import java.util.function.UnaryOperator;\n-import java.util.stream.Collectors;\n@@ -49,5 +50,5 @@\n-        scripts = EnumSet.allOf(scriptIdsType).stream().collect(\n-                Collectors.toMap(UnaryOperator.identity(), scriptId -> {\n-                    return new ShellScriptResource(scriptId.name()).setResource(\n-                            scriptId.get());\n-                }));\n+        scripts = EnumSet.allOf(scriptIdsType).stream().collect(toMap(x -> x, scriptId -> {\n+            return new ShellScriptResource(scriptId.name()).setResource(scriptId.get());\n+        }, (a, b) -> {\n+            throw new UnsupportedOperationException();\n+        }, TreeMap::new));\n","filename":"src\/jdk.jpackage\/unix\/classes\/jdk\/jpackage\/internal\/PackageScripts.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import java.util.TreeMap;\n@@ -196,1 +197,1 @@\n-        private final Map<Path, OverridableResource> resources = new HashMap<>();\n+        private final Map<Path, OverridableResource> resources = new TreeMap<>();\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WixSourceConverter.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -72,0 +72,1 @@\n+                        .sorted()\n","filename":"test\/jdk\/tools\/jpackage\/apps\/PrintEnv.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -123,2 +123,1 @@\n-      -e 's|\"\/.*\/jdk.jpackage[0-9]\\{1,\\}\/|\"\/jdk.jpackage\/|' \\\n-      -e 's|\"file:\/\/\/.*\/jdk.jpackage[0-9]\\{1,\\}\/|\"file:\/\/\/jdk.jpackage\/|' \\\n+      -e 's|\/jdk.jpackage[0-9]\\{1,\\}\/|\/jdk.jpackage\/|' \\\n","filename":"test\/jdk\/tools\/jpackage\/clean_stashed_files.sh","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,3 @@\n+      # Strip variable part of temporary directory name `jdk.jpackage.test217379316521032539`\n+      -e 's|\\([\\\/]\\)jdk\\.jpackage\\.test[0-9]\\{1,\\}\\b|\\1jdk.jpackage.test|g'\n+\n@@ -79,0 +82,35 @@\n+\n+      # Whipe out entire output of \/usr\/bin\/hdiutil command.\n+      # It is of little to no interest and contains too many variable parts to deal with individually.\n+      -e '\/^Running \\\/usr\\\/bin\\\/hdiutil\/,\/^Returned:\/{\n+            \/\/,\/^Output:\/!d\n+          }'\n+\n+      # Zip stack traces.\n+      -e $'\/^\\tat \/{\n+            :a\n+            g\n+            N\n+            s\/.*\\\\n\/\/\n+            \/^\\tat \/ba\n+            s\/\\\\(^\\t... \\\\)[0-9]\\\\{1,\\\\}\\\\( more\\\\)\/\\\\1N\\\\2\/\n+            s\/\\(.*\\)\/\\tat <stacktrace>\\\\n\\\\1\/\n+            P\n+            D\n+          }'\n+\n+      # Convert PID value in `taskkill \/F \/PID 5640`\n+      -e 's|taskkill \/F \/PID [0-9]\\{1,\\}|taskkill \/F \/PID <pid>|'\n+\n+      # Convert PID value in `The process with PID 5640 has been terminated`\n+      -e 's|\\(The process with PID \\)[0-9]\\{1,\\}\\( has been terminated\\)|\\1<pid>\\2|'\n+\n+      # Convert timeout value in `Check timeout value 57182ms is positive`\n+      -e 's|\\(Check timeout value \\)[0-9]\\{1,\\}\\(ms is positive\\)|\\1<timeout>\\2|'\n+\n+      # Convert variable part of \/usr\/bin\/osascript output `jdk.jpackage\/config\/SigningRuntimeImagePackageTest-dmg-setup.scpt:455:497: execution error: Finder got an error: Canâ€™t set 1 to icon view. (-10006)`\n+      -e 's|\\(-dmg-setup.scpt:\\)[0-9]\\{1,\\}:[0-9]\\{1,\\}\\(: execution error: \\)|\\1<N:M>\\2|'\n+\n+      # Use the same name for all exceptions.\n+      -e 's|[^ ]\\{1,\\}\\.[^ ]\\{1,\\}\\Exception:|<Exception>:|g'\n+      -e 's|[^ ]\\{1,\\}\\.[^ ]\\{1,\\}\\ExceptionBox:|<Exception>:|g'\n","filename":"test\/jdk\/tools\/jpackage\/clean_test_output.sh","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.HashMap;\n@@ -35,1 +34,1 @@\n-import java.util.stream.Stream;\n+import java.util.TreeMap;\n@@ -47,1 +46,1 @@\n-        Map<String, String> entries = new HashMap<>(Map.of(\n+        Map<String, String> entries = new TreeMap<>(Map.of(\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/FileAssociations.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import static java.util.Collections.unmodifiableSortedSet;\n+\n@@ -35,1 +37,0 @@\n-import java.util.HashSet;\n@@ -41,0 +42,2 @@\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n@@ -392,2 +395,1 @@\n-                Set<Scriptlet> requiredScriptlets = Stream.of(Scriptlet.values()).sorted().collect(\n-                        Collectors.toSet());\n+                var requiredScriptlets = Stream.of(Scriptlet.values()).sorted().toList();\n@@ -491,1 +493,1 @@\n-        final Set<String> mandatoryKeys = new HashSet<>(Set.of(\"Name\", \"Comment\",\n+        final Set<String> mandatoryKeys = new TreeSet<>(Set.of(\"Name\", \"Comment\",\n@@ -497,1 +499,1 @@\n-        for (var e : Map.of(\"Type\", \"Application\", \"Terminal\", \"false\").entrySet()) {\n+        for (var e : List.of(Map.entry(\"Type\", \"Application\"), Map.entry(\"Terminal\", \"false\"))) {\n@@ -713,1 +715,1 @@\n-        Map<Scriptlet, List<String>> result = new HashMap<>();\n+        Map<Scriptlet, List<String>> result = new TreeMap<>();\n@@ -735,1 +737,1 @@\n-        Map<Scriptlet, List<String>> result = new HashMap<>();\n+        Map<Scriptlet, List<String>> result = new TreeMap<>();\n@@ -890,1 +892,2 @@\n-    private static final Set<Integer> XDG_CMD_VALID_ICON_SIZES = Set.of(16, 22, 32, 48, 64, 128);\n+    private static final Set<Integer> XDG_CMD_VALID_ICON_SIZES = unmodifiableSortedSet(\n+            new TreeSet<>(List.of(16, 22, 32, 48, 64, 128)));\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LinuxHelper.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import static java.util.Collections.unmodifiableSortedSet;\n@@ -43,0 +44,1 @@\n+import java.util.TreeSet;\n@@ -145,0 +147,1 @@\n+            customPLists = unmodifiableSortedSet(new TreeSet<>(customPLists));\n@@ -150,1 +153,0 @@\n-                    .sorted(Comparator.comparing(CustomPListType::role))\n@@ -158,1 +160,1 @@\n-                var map = Map.ofEntries(\n+                final var props = List.of(\n@@ -163,1 +165,1 @@\n-                TKit.createPropertiesFile(propFile, map);\n+                TKit.createPropertiesFile(propFile, props);\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/CustomInfoPListTest.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.util.List;\n@@ -64,1 +65,1 @@\n-        Map<String, String> map = Map.ofEntries(\n+        final var props = List.of(\n@@ -76,1 +77,1 @@\n-        TKit.createPropertiesFile(propFile, map);\n+        TKit.createPropertiesFile(propFile, props);\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/MacFileAssociationsTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import static java.util.Map.entry;\n@@ -27,0 +28,1 @@\n+import java.util.List;\n@@ -28,0 +30,1 @@\n+import java.util.TreeMap;\n@@ -117,3 +120,3 @@\n-            TKit.createPropertiesFile(propFile, Map.of(\n-                \"extension\", \"foo\",\n-                \"description\", \"bar\"\n+            TKit.createPropertiesFile(propFile, List.of(\n+                    entry(\"extension\", \"foo\"),\n+                    entry(\"description\", \"bar\")\n@@ -134,4 +137,4 @@\n-            TKit.createPropertiesFile(propFile, Map.of(\n-                \"mime-type\", \"application\/x-jpackage-foo, application\/x-jpackage-bar\",\n-                \"extension\", \"foo\",\n-                \"description\", \"bar\"\n+            TKit.createPropertiesFile(propFile, List.of(\n+                    entry(\"mime-type\", \"application\/x-jpackage-foo, application\/x-jpackage-bar\"),\n+                    entry(\"extension\", \"foo\"),\n+                    entry(\"description\", \"bar\")\n","filename":"test\/jdk\/tools\/jpackage\/share\/FileAssociationsTest.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -25,3 +25,0 @@\n-import java.util.stream.Stream;\n-import java.util.stream.Collectors;\n-import java.util.function.Consumer;\n@@ -37,8 +34,4 @@\n-import jdk.jpackage.test.TKit;\n-import jdk.jpackage.test.JPackageCommand;\n-import jdk.jpackage.test.LauncherIconVerifier;\n-import jdk.jpackage.test.PackageTest;\n-import jdk.jpackage.test.Executor;\n-import jdk.jpackage.test.LinuxHelper;\n-import jdk.jpackage.test.AdditionalLauncher;\n-import jdk.jpackage.internal.util.function.ThrowingConsumer;\n+import java.util.TreeMap;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n@@ -46,0 +39,2 @@\n+import jdk.jpackage.internal.util.function.ThrowingConsumer;\n+import jdk.jpackage.test.AdditionalLauncher;\n@@ -48,0 +43,6 @@\n+import jdk.jpackage.test.Executor;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.LauncherIconVerifier;\n+import jdk.jpackage.test.LinuxHelper;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.TKit;\n@@ -95,1 +96,1 @@\n-        config = Map.of(\n+        config = new TreeMap<>(Map.of(\n@@ -97,1 +98,1 @@\n-                Launcher.Additional, additionalLauncherIconType);\n+                Launcher.Additional, additionalLauncherIconType));\n@@ -104,1 +105,1 @@\n-        config = Map.of(\n+        config = new TreeMap<>(Map.of(\n@@ -106,1 +107,1 @@\n-                Launcher.Additional, additionalLauncherIconType);\n+                Launcher.Additional, additionalLauncherIconType));\n","filename":"test\/jdk\/tools\/jpackage\/share\/IconTest.java","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"}]}