{"files":[{"patch":"@@ -2033,1 +2033,1 @@\n-                SwingUtilities2.drawHLine(g, damagedArea.x, damagedArea.x + tableWidth - 1, y - 1);\n+                SwingUtilities2.drawHLine(g, damagedArea.x, tableWidth - 1, y - 1);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicTableUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -534,1 +534,1 @@\n-                                g, damagedArea.x, y - 1, damagedArea.x + tableWidth - 1,y - 1);\n+                                g, damagedArea.x, y - 1, tableWidth - 1,y - 1);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthTableUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.awt.Dimension;\n@@ -28,0 +29,1 @@\n+import java.awt.Point;\n@@ -60,1 +62,3 @@\n-    static String failureString;\n+    static volatile int allColumnWidths;\n+    static volatile Point tableLocation;\n+    static volatile Dimension tableSize;\n@@ -86,1 +90,1 @@\n-                    int allColumnWidths = 0;\n+                    allColumnWidths = 0;\n@@ -92,13 +96,15 @@\n-                    BufferedImage bufferedImage = robot.createScreenCapture(\n-                            new Rectangle(customTableObj.table.getLocationOnScreen().x,\n-                                    customTableObj.table.getLocationOnScreen().y,\n-                                    customTableObj.table.getWidth() - allColumnWidths,\n-                                    customTableObj.table.getHeight()));\n-                    int expectedRGB = bufferedImage.getRGB(0, 0);\n-                    for (int x = 0; x < bufferedImage.getWidth(); x++) {\n-                        for (int y = 0; y < bufferedImage.getHeight(); y++) {\n-                            if (expectedRGB != bufferedImage.getRGB(x, y)) {\n-                                saveImage(bufferedImage, \"failureImage.png\");\n-                                failureString = \"Test Failed at <\" + x + \", \" + y + \">\";\n-                                break;\n-                            }\n+                    tableLocation = customTableObj.table.getLocationOnScreen();\n+                    tableSize = customTableObj.table.getSize();\n+                });\n+\n+                BufferedImage bufferedImage = robot.createScreenCapture(\n+                        new Rectangle(tableLocation.x,\n+                                tableLocation.y,\n+                                (int)tableSize.getWidth() - allColumnWidths,\n+                                (int)tableSize.getHeight()));\n+                int expectedRGB = bufferedImage.getRGB(0, 0);\n+                for (int x = 0; x < bufferedImage.getWidth(); x++) {\n+                    for (int y = 0; y < bufferedImage.getHeight(); y++) {\n+                        if (expectedRGB != bufferedImage.getRGB(x, y)) {\n+                            saveImage(bufferedImage, \"failureImage.png\");\n+                            throw new RuntimeException(\"Test Failed at <\" + x + \", \" + y + \">\");\n@@ -107,5 +113,0 @@\n-                });\n-                if (failureString != null) {\n-                    throw new RuntimeException(failureString);\n-                } else {\n-                    System.out.println(\"Test Passed!\");\n@@ -113,0 +114,2 @@\n+\n+                System.out.println(\"Test Passed!\");\n","filename":"test\/jdk\/javax\/swing\/JTable\/JTableRightOrientationTest.java","additions":23,"deletions":20,"binary":false,"changes":43,"status":"modified"}]}