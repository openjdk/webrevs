{"files":[{"patch":"@@ -2028,0 +2028,6 @@\n+        if (table.getComponentOrientation().isLeftToRight()) {\n+            damagedArea.x = getXPosition(cMin);\n+        } else {\n+            damagedArea.x = getXPosition(cMax);\n+        }\n+\n@@ -2033,1 +2039,1 @@\n-                SwingUtilities2.drawHLine(g, damagedArea.x, tableWidth - 1, y - 1);\n+                SwingUtilities2.drawHLine(g, damagedArea.x, damagedArea.x + tableWidth - 1, y - 1);\n@@ -2081,0 +2087,1 @@\n+                cellRect.x = getXPosition(cMin);\n@@ -2094,1 +2101,2 @@\n-                aColumn = cm.getColumn(cMin);\n+                cellRect.x = getXPosition(cMax);\n+                aColumn = cm.getColumn(cMax);\n@@ -2098,1 +2106,1 @@\n-                    paintCell(g, cellRect, row, cMin);\n+                    paintCell(g, cellRect, row, cMax);\n@@ -2100,1 +2108,1 @@\n-                for(int column = cMin+1; column <= cMax; column++) {\n+                for(int column = cMax-1; column >= cMin; column--) {\n@@ -2104,1 +2112,1 @@\n-                    cellRect.x -= columnWidth;\n+                    cellRect.x += columnWidth;\n@@ -2108,0 +2116,1 @@\n+\n@@ -2291,0 +2300,33 @@\n+\n+    private int getXPosition(int column) {\n+        int x = 0;\n+        TableColumnModel cm = table.getColumnModel();\n+\n+        if (column < 0) {\n+            if (!table.getComponentOrientation().isLeftToRight()) {\n+                x = getWidthInRightToLeft();\n+            }\n+        }\n+        else if (column >= cm.getColumnCount()) {\n+            if (table.getComponentOrientation().isLeftToRight()) {\n+                x = table.getWidth();\n+            }\n+        }\n+        else {\n+            for (int i = 0; i < column; i++) {\n+                x += cm.getColumn(i).getWidth();\n+            }\n+            if (!table.getComponentOrientation().isLeftToRight()) {\n+                x = getWidthInRightToLeft() - x - cm.getColumn(column).getWidth();\n+            }\n+        }\n+        return x;\n+    }\n+\n+    private int getWidthInRightToLeft() {\n+        if ((table != null) &&\n+                (table.getAutoResizeMode() != JTable.AUTO_RESIZE_OFF)) {\n+            return table.getWidth();\n+        }\n+        return table.getParent().getWidth();\n+    }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicTableUI.java","additions":47,"deletions":5,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -524,0 +524,7 @@\n+\n+        if (table.getComponentOrientation().isLeftToRight()) {\n+            damagedArea.x = getXPosition(cMin);\n+        } else {\n+            damagedArea.x = getXPosition(cMax);\n+        }\n+\n@@ -533,1 +540,1 @@\n-                                g, damagedArea.x, y - 1, tableWidth - 1,y - 1);\n+                                g, damagedArea.x, y - 1, damagedArea.x + tableWidth - 1,y - 1);\n@@ -584,0 +591,1 @@\n+                cellRect.x = getXPosition(cMin);\n@@ -597,1 +605,2 @@\n-                aColumn = cm.getColumn(cMin);\n+                cellRect.x = getXPosition(cMax);\n+                aColumn = cm.getColumn(cMax);\n@@ -601,1 +610,1 @@\n-                    paintCell(context, g, cellRect, row, cMin);\n+                    paintCell(context, g, cellRect, row, cMax);\n@@ -603,1 +612,1 @@\n-                for(int column = cMin+1; column <= cMax; column++) {\n+                for(int column = cMax-1; column >= cMin; column--) {\n@@ -607,1 +616,1 @@\n-                    cellRect.x -= columnWidth;\n+                    cellRect.x += columnWidth;\n@@ -846,0 +855,33 @@\n+    private int getXPosition(int column) {\n+        int x = 0;\n+        TableColumnModel cm = table.getColumnModel();\n+\n+        if (column < 0) {\n+            if (!table.getComponentOrientation().isLeftToRight()) {\n+                x = getWidthInRightToLeft();\n+            }\n+        }\n+        else if (column >= cm.getColumnCount()) {\n+            if (table.getComponentOrientation().isLeftToRight()) {\n+                x = table.getWidth();\n+            }\n+        }\n+        else {\n+            for (int i = 0; i < column; i++) {\n+                x += cm.getColumn(i).getWidth();\n+            }\n+            if (!table.getComponentOrientation().isLeftToRight()) {\n+                x = getWidthInRightToLeft() - x - cm.getColumn(column).getWidth();\n+            }\n+        }\n+        return x;\n+    }\n+\n+    private int getWidthInRightToLeft() {\n+        if ((table != null) &&\n+                (table.getAutoResizeMode() != JTable.AUTO_RESIZE_OFF)) {\n+            return table.getWidth();\n+        }\n+        return table.getParent().getWidth();\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthTableUI.java","additions":47,"deletions":5,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -0,0 +1,200 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.ComponentOrientation;\n+import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n+import java.awt.Insets;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.image.BufferedImage;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+import javax.swing.table.AbstractTableModel;\n+import javax.swing.UIManager;\n+\n+import javax.imageio.ImageIO;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 5108458\n+ * @summary Test to check Right alignment of JTable data\n+ * (Fix affects all L&F, test verifies only Metal L&F)\n+ * @run main JTableRightAlignmentTest\n+ *\/\n+\n+public class JTableRightAlignmentTest {\n+    static JFrame frame;\n+    static CustomTable table;\n+    static boolean passed = true;\n+    static String failureString;\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel(\"javax.swing.plaf.metal.MetalLookAndFeel\");\n+        Robot robot = new Robot();\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame = new JFrame(\"Test JTable\");\n+\n+                JPanel panel = new JPanel(new GridBagLayout());\n+                frame.setContentPane(panel);\n+                table = new CustomTable();\n+                panel.add(new JScrollPane(table.table),\n+                        new GridBagConstraints(0, 0, -1, -1, 1.0, 1.0,\n+                                GridBagConstraints.PAGE_START, GridBagConstraints.BOTH,\n+                                new Insets(2, 2, 2, 2), 0, 0));\n+                frame.pack();\n+                frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+                frame.applyComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);\n+                frame.setVisible(true);\n+            });\n+\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                int maxHeight = (int) (((double) table.table.getTableHeader().getHeight())\n+                        + ((double) table.table.getHeight()));\n+                int yPos = table.table.getTableHeader().getLocationOnScreen().y;\n+                int xPos = table.table.getLocationOnScreen().x + table.table.getWidth() -\n+                        table.table.getTableHeader().getColumnModel()\n+                                .getColumn(2)\n+                                .getWidth() - 1;\n+                Color expectedRGB = robot.getPixelColor(xPos, yPos);\n+                for (int y = yPos; y < yPos + maxHeight; y++) {\n+                    if (expectedRGB.getRGB() != robot.getPixelColor(xPos, y).getRGB()) {\n+                        BufferedImage failImage = robot.createScreenCapture(\n+                                new Rectangle(xPos, yPos, 3, maxHeight));\n+                        saveImage(failImage, \"failureImage.png\");\n+                        passed = false;\n+                        failureString = \"Test Failed at <\" + xPos + \", \" + y + \">\";\n+                        break;\n+                    }\n+                }\n+            });\n+            if (!passed) {\n+                throw new RuntimeException(failureString);\n+            } else {\n+                System.out.println(\"Test Passed!\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void saveImage(BufferedImage image, String fileName) {\n+        try {\n+            ImageIO.write(image, \"png\", new File(fileName));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}\n+\n+class CustomTable {\n+    public final static int COL_FIRSTNAME = 0;\n+    public final static int COL_LASTNAME = 1;\n+    public final static int COL_SALARY = 2;\n+\n+    static final Class[] classes = {\n+            String.class,\n+            String.class,\n+            Float.class,\n+    };\n+\n+    String[] cols = {\n+            \"First name\",\n+            \"Last name\",\n+            \"Salary\",\n+    };\n+    List data = new ArrayList();\n+    JTable table;\n+\n+    public CustomTable() {\n+        data.add(new CustomTable.Data(\"First1\", \"Last1\", 10000f));\n+        data.add(new CustomTable.Data(\"First2\", \"Last2\", 10000f));\n+        data.add(new CustomTable.Data(\"First3\", \"Last3\", 10000f));\n+        table = new JTable(new CustomTable.Model());\n+        table.getColumnModel().getColumn(COL_FIRSTNAME).setMaxWidth(90);\n+        table.getColumnModel().getColumn(COL_LASTNAME).setMaxWidth(90);\n+        table.getColumnModel().getColumn(COL_SALARY).setMaxWidth(90);\n+    }\n+\n+    class Data {\n+        String firstname;\n+        String lastname;\n+        float salary;\n+\n+        public Data(String firstname, String lastname, float salary) {\n+            this.firstname = firstname;\n+            this.lastname = lastname;\n+            this.salary = salary;\n+        }\n+    }\n+\n+    class Model extends AbstractTableModel {\n+\n+        public int getColumnCount() {\n+            return cols.length;\n+        }\n+\n+        public int getRowCount() {\n+            return data.size();\n+        }\n+\n+        public Object getValueAt(int rowIndex, int columnIndex) {\n+            CustomTable.Data item = (CustomTable.Data) data.get(rowIndex);\n+            switch (columnIndex) {\n+                case COL_FIRSTNAME:\n+                    return item.firstname;\n+                case COL_LASTNAME:\n+                    return item.lastname;\n+                case COL_SALARY:\n+                    return Float.valueOf(item.salary);\n+            }\n+            return null;\n+        }\n+\n+        public String getColumnName(int column) {\n+            return cols[column];\n+        }\n+\n+        public Class getColumnClass(int columnIndex) {\n+            return classes[columnIndex];\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/JTableRightAlignmentTest.java","additions":200,"deletions":0,"binary":false,"changes":200,"status":"added"}]}