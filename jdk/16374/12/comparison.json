{"files":[{"patch":"@@ -3009,8 +3009,2 @@\n-            if( getComponentOrientation().isLeftToRight() ) {\n-                for(int i = 0; i < column; i++) {\n-                    r.x += cm.getColumn(i).getWidth();\n-                }\n-            } else {\n-                for(int i = cm.getColumnCount()-1; i > column; i--) {\n-                    r.x += cm.getColumn(i).getWidth();\n-                }\n+            for(int i = 0; i < column; i++) {\n+                r.x += cm.getColumn(i).getWidth();\n@@ -3018,1 +3012,8 @@\n-            r.width = cm.getColumn(column).getWidth();\n+            \/\/ Table columns are laid out from right to left when component\n+            \/\/ orientation is set to ComponentOrientation.RIGHT_TO_LEFT,\n+            \/\/ adjust the x coordinate for this case.\n+            final int columnWidth = cm.getColumn(column).getWidth();\n+            if( !getComponentOrientation().isLeftToRight() ) {\n+                r.x = getWidth() - r.x - columnWidth;\n+            }\n+            r.width = columnWidth;\n@@ -9804,1 +9805,0 @@\n-\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JTable.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,204 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.ComponentOrientation;\n+import java.awt.Dimension;\n+import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n+import java.awt.Insets;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+import javax.swing.table.AbstractTableModel;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+import javax.imageio.ImageIO;\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 5108458\n+ * @summary Test to check Right alignment of JTable data\n+ * @run main JTableRightOrientationTest\n+ *\/\n+\n+public class JTableRightOrientationTest {\n+    static JFrame frame;\n+    static CustomTable customTableObj;\n+    static volatile Rectangle tableBounds;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        for (UIManager.LookAndFeelInfo laf : UIManager.getInstalledLookAndFeels()) {\n+            System.out.println(\"Testing LAF : \" + laf.getClassName());\n+            SwingUtilities.invokeAndWait(() -> setLookAndFeel(laf));\n+            try {\n+                SwingUtilities.invokeAndWait(() -> {\n+                    frame = new JFrame(\"JTable RTL column layout\");\n+                    JPanel panel = new JPanel(new GridBagLayout());\n+                    frame.setContentPane(panel);\n+                    customTableObj = new CustomTable();\n+                    panel.add(new JScrollPane(customTableObj.table),\n+                            new GridBagConstraints(0, 0, -1, -1, 1.0, 1.0,\n+                                    GridBagConstraints.PAGE_START, GridBagConstraints.BOTH,\n+                                    new Insets(2, 2, 2, 2), 0, 0));\n+                    frame.pack();\n+                    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+                    frame.applyComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);\n+                    frame.setVisible(true);\n+                });\n+\n+                robot.waitForIdle();\n+                robot.delay(1000);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    int allColumnWidths = 0;\n+                    for (int i = 0; i < customTableObj.table.getColumnCount(); i++) {\n+                        allColumnWidths += customTableObj.table.getTableHeader().getColumnModel()\n+                                .getColumn(i)\n+                                .getWidth();\n+                    }\n+                    Point tableLocation = customTableObj.table.getLocationOnScreen();\n+                    Dimension tableSize = customTableObj.table.getSize();\n+                    tableSize.width -= allColumnWidths;\n+                    tableBounds = new Rectangle(tableLocation, tableSize);\n+                });\n+\n+                BufferedImage bufferedImage = robot.createScreenCapture(tableBounds);\n+\n+                int expectedRGB = bufferedImage.getRGB(0, 0);\n+                for (int x = 0; x < bufferedImage.getWidth(); x++) {\n+                    for (int y = 0; y < bufferedImage.getHeight(); y++) {\n+                        if (expectedRGB != bufferedImage.getRGB(x, y)) {\n+                            saveImage(bufferedImage);\n+                            throw new RuntimeException(\"Test Failed at <\" + x + \", \" + y + \">\");\n+                        }\n+                    }\n+                }\n+\n+                System.out.println(\"Test Passed!\");\n+            } finally {\n+                SwingUtilities.invokeAndWait(() -> {\n+                    if (frame != null) {\n+                        frame.dispose();\n+                    }\n+                });\n+            }\n+            robot.waitForIdle();\n+            robot.delay(200);\n+        }\n+    }\n+\n+    private static void saveImage(BufferedImage image) {\n+        try {\n+            ImageIO.write(image, \"png\", new File(\"failureImage.png\"));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Unsupported LAF: \" + laf.getClassName());\n+        } catch (ClassNotFoundException | InstantiationException\n+                 | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}\n+\n+class CustomTable {\n+    private static final int COL_FIRSTNAME = 0;\n+    private static final int COL_LASTNAME = 1;\n+    private static final int COL_SALARY = 2;\n+\n+    static final Class<?>[] classes = {\n+            String.class,\n+            String.class,\n+            Float.class,\n+    };\n+\n+    String[] cols = {\n+            \"First name\",\n+            \"Last name\",\n+            \"Salary\",\n+    };\n+    List<CustomTable.Data> data = new ArrayList<>();\n+    JTable table;\n+\n+    public CustomTable() {\n+        data.add(new CustomTable.Data(\"First1\", \"Last1\", 10000f));\n+        data.add(new CustomTable.Data(\"First2\", \"Last2\", 10000f));\n+        data.add(new CustomTable.Data(\"First3\", \"Last3\", 10000f));\n+        table = new JTable(new CustomTable.Model());\n+        table.getColumnModel().getColumn(COL_FIRSTNAME).setMaxWidth(90);\n+        table.getColumnModel().getColumn(COL_LASTNAME).setMaxWidth(90);\n+        table.getColumnModel().getColumn(COL_SALARY).setMaxWidth(90);\n+    }\n+\n+    record Data(String firstName, String lastName, float salary) {}\n+\n+    class Model extends AbstractTableModel {\n+\n+        public int getColumnCount() {\n+            return cols.length;\n+        }\n+\n+        public int getRowCount() {\n+            return data.size();\n+        }\n+\n+        public Object getValueAt(int rowIndex, int columnIndex) {\n+            CustomTable.Data item = data.get(rowIndex);\n+            switch (columnIndex) {\n+                case COL_FIRSTNAME:\n+                    return item.firstName;\n+                case COL_LASTNAME:\n+                    return item.lastName;\n+                case COL_SALARY:\n+                    return item.salary;\n+            }\n+            return null;\n+        }\n+\n+        public String getColumnName(int column) {\n+            return cols[column];\n+        }\n+\n+        public Class<?> getColumnClass(int columnIndex) {\n+            return classes[columnIndex];\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/JTableRightOrientationTest.java","additions":204,"deletions":0,"binary":false,"changes":204,"status":"added"}]}