{"files":[{"patch":"@@ -2029,1 +2029,1 @@\n-            damagedArea.x = getXPosition(cMin);\n+            damagedArea.x = SwingUtilities2.getXPosInRightToLeft(table, cMin);\n@@ -2031,1 +2031,1 @@\n-            damagedArea.x = getXPosition(cMax);\n+            damagedArea.x = SwingUtilities2.getXPosInRightToLeft(table, cMax);\n@@ -2087,1 +2087,0 @@\n-                cellRect.x = getXPosition(cMin);\n@@ -2100,2 +2099,2 @@\n-                cellRect = table.getCellRect(row, cMin, false);\n-                cellRect.x = getXPosition(cMax);\n+                cellRect = table.getCellRect(row, cMax, false);\n+                cellRect.x = SwingUtilities2.getXPosInRightToLeft(table, cMax);\n@@ -2293,33 +2292,0 @@\n-\n-    private int getXPosition(int column) {\n-        int x = 0;\n-        TableColumnModel cm = table.getColumnModel();\n-\n-        if (column < 0) {\n-            if (!table.getComponentOrientation().isLeftToRight()) {\n-                x = getWidthInRightToLeft();\n-            }\n-        }\n-        else if (column >= cm.getColumnCount()) {\n-            if (table.getComponentOrientation().isLeftToRight()) {\n-                x = table.getWidth();\n-            }\n-        }\n-        else {\n-            for (int i = 0; i < column; i++) {\n-                x += cm.getColumn(i).getWidth();\n-            }\n-            if (!table.getComponentOrientation().isLeftToRight()) {\n-                x = getWidthInRightToLeft() - x - cm.getColumn(column).getWidth();\n-            }\n-        }\n-        return x;\n-    }\n-\n-    private int getWidthInRightToLeft() {\n-        if ((table != null) &&\n-                (table.getAutoResizeMode() != JTable.AUTO_RESIZE_OFF)) {\n-            return table.getWidth();\n-        }\n-        return table.getParent().getWidth();\n-    }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicTableUI.java","additions":4,"deletions":38,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -59,0 +59,2 @@\n+import sun.swing.SwingUtilities2;\n+\n@@ -526,1 +528,1 @@\n-            damagedArea.x = getXPosition(cMin);\n+            damagedArea.x = SwingUtilities2.getXPosInRightToLeft(table, cMin);\n@@ -528,1 +530,1 @@\n-            damagedArea.x = getXPosition(cMax);\n+            damagedArea.x = SwingUtilities2.getXPosInRightToLeft(table, cMax);\n@@ -591,1 +593,0 @@\n-                cellRect.x = getXPosition(cMin);\n@@ -604,9 +605,3 @@\n-                cellRect = table.getCellRect(row, cMin, false);\n-                cellRect.x = getXPosition(cMax);\n-                aColumn = cm.getColumn(cMax);\n-                if (aColumn != draggedColumn) {\n-                    columnWidth = aColumn.getWidth();\n-                    cellRect.width = columnWidth - columnMargin;\n-                    paintCell(context, g, cellRect, row, cMax);\n-                }\n-                for (int column = cMax-1; column >= cMin; column--) {\n+                cellRect = table.getCellRect(row, cMax, false);\n+                cellRect.x = SwingUtilities2.getXPosInRightToLeft(table, cMax);\n+                for (int column = cMax; column >= cMin; column--) {\n@@ -616,1 +611,0 @@\n-                    cellRect.x += columnWidth;\n@@ -620,0 +614,1 @@\n+                    cellRect.x += columnWidth;\n@@ -855,33 +850,0 @@\n-    private int getXPosition(int column) {\n-        int x = 0;\n-        TableColumnModel cm = table.getColumnModel();\n-\n-        if (column < 0) {\n-            if (!table.getComponentOrientation().isLeftToRight()) {\n-                x = getWidthInRightToLeft();\n-            }\n-        }\n-        else if (column >= cm.getColumnCount()) {\n-            if (table.getComponentOrientation().isLeftToRight()) {\n-                x = table.getWidth();\n-            }\n-        }\n-        else {\n-            for (int i = 0; i < column; i++) {\n-                x += cm.getColumn(i).getWidth();\n-            }\n-            if (!table.getComponentOrientation().isLeftToRight()) {\n-                x = getWidthInRightToLeft() - x - cm.getColumn(column).getWidth();\n-            }\n-        }\n-        return x;\n-    }\n-\n-    private int getWidthInRightToLeft() {\n-        if ((table != null) &&\n-                (table.getAutoResizeMode() != JTable.AUTO_RESIZE_OFF)) {\n-            return table.getWidth();\n-        }\n-        return table.getParent().getWidth();\n-    }\n-\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthTableUI.java","additions":8,"deletions":46,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2340,0 +2340,33 @@\n+\n+    public static int getXPosInRightToLeft(JTable table, int column) {\n+        int x = 0;\n+        TableColumnModel cm = table.getColumnModel();\n+\n+        if (column < 0) {\n+            if (!table.getComponentOrientation().isLeftToRight()) {\n+                x = getWidthInRightToLeft(table);\n+            }\n+        }\n+        else if (column >= cm.getColumnCount()) {\n+            if (table.getComponentOrientation().isLeftToRight()) {\n+                x = table.getWidth();\n+            }\n+        }\n+        else {\n+            for (int i = 0; i < column; i++) {\n+                x += cm.getColumn(i).getWidth();\n+            }\n+            if (!table.getComponentOrientation().isLeftToRight()) {\n+                x = getWidthInRightToLeft(table) - x - cm.getColumn(column).getWidth();\n+            }\n+        }\n+        return x;\n+    }\n+\n+    public static int getWidthInRightToLeft(JTable table) {\n+        if ((table != null) &&\n+                (table.getAutoResizeMode() != JTable.AUTO_RESIZE_OFF)) {\n+            return table.getWidth();\n+        }\n+        return table.getParent().getWidth();\n+    }\n","filename":"src\/java.desktop\/share\/classes\/sun\/swing\/SwingUtilities2.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-import java.awt.Color;\n@@ -40,0 +39,1 @@\n+import javax.swing.UnsupportedLookAndFeelException;\n@@ -60,1 +60,0 @@\n-    static boolean passed = true;\n@@ -64,1 +63,0 @@\n-        UIManager.setLookAndFeel(\"javax.swing.plaf.metal.MetalLookAndFeel\");\n@@ -66,17 +64,2 @@\n-        try {\n-            SwingUtilities.invokeAndWait(() -> {\n-                frame = new JFrame(\"Test JTable\");\n-\n-                JPanel panel = new JPanel(new GridBagLayout());\n-                frame.setContentPane(panel);\n-                table = new CustomTable();\n-                panel.add(new JScrollPane(table.table),\n-                        new GridBagConstraints(0, 0, -1, -1, 1.0, 1.0,\n-                                GridBagConstraints.PAGE_START, GridBagConstraints.BOTH,\n-                                new Insets(2, 2, 2, 2), 0, 0));\n-                frame.pack();\n-                frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n-                frame.applyComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);\n-                frame.setVisible(true);\n-            });\n-\n+        for (UIManager.LookAndFeelInfo laf : UIManager.getInstalledLookAndFeels()) {\n+            System.out.println(\"Testing LAF : \" + laf.getClassName());\n@@ -84,18 +67,41 @@\n-            robot.delay(1000);\n-            SwingUtilities.invokeAndWait(() -> {\n-                int maxHeight = (int) (((double) table.table.getTableHeader().getHeight())\n-                        + ((double) table.table.getHeight()));\n-                int yPos = table.table.getTableHeader().getLocationOnScreen().y;\n-                int xPos = table.table.getLocationOnScreen().x + table.table.getWidth() -\n-                        table.table.getTableHeader().getColumnModel()\n-                                .getColumn(2)\n-                                .getWidth() - 1;\n-                Color expectedRGB = robot.getPixelColor(xPos, yPos);\n-                for (int y = yPos; y < yPos + maxHeight; y++) {\n-                    if (expectedRGB.getRGB() != robot.getPixelColor(xPos, y).getRGB()) {\n-                        BufferedImage failImage = robot.createScreenCapture(\n-                                new Rectangle(xPos, yPos, 3, maxHeight));\n-                        saveImage(failImage, \"failureImage.png\");\n-                        passed = false;\n-                        failureString = \"Test Failed at <\" + xPos + \", \" + y + \">\";\n-                        break;\n+            robot.delay(100);\n+            SwingUtilities.invokeAndWait(() -> setLookAndFeel(laf));\n+            try {\n+                SwingUtilities.invokeAndWait(() -> {\n+                    frame = new JFrame(\"Test JTable\");\n+                    JPanel panel = new JPanel(new GridBagLayout());\n+                    frame.setContentPane(panel);\n+                    table = new CustomTable();\n+                    panel.add(new JScrollPane(table.table),\n+                            new GridBagConstraints(0, 0, -1, -1, 1.0, 1.0,\n+                                    GridBagConstraints.PAGE_START, GridBagConstraints.BOTH,\n+                                    new Insets(2, 2, 2, 2), 0, 0));\n+                    frame.pack();\n+                    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+                    frame.applyComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);\n+                    frame.setVisible(true);\n+                });\n+\n+                robot.waitForIdle();\n+                robot.delay(1000);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    int allColumnWidths = 0;\n+                    for (int i = 0; i < table.table.getColumnCount(); i++) {\n+                        allColumnWidths += table.table.getTableHeader().getColumnModel()\n+                                .getColumn(i)\n+                                .getWidth();\n+                    }\n+                    BufferedImage bufferedImage = robot.createScreenCapture(\n+                            new Rectangle(table.table.getLocationOnScreen().x,\n+                                    table.table.getLocationOnScreen().y,\n+                                    table.table.getWidth() - allColumnWidths,\n+                                    table.table.getHeight()));\n+                    int expectedRGB = bufferedImage.getRGB(0, 0);\n+                    for (int x = 0; x < bufferedImage.getWidth(); x++) {\n+                        for (int y = 0; y < bufferedImage.getHeight(); y++) {\n+                            if (expectedRGB != bufferedImage.getRGB(x, y)) {\n+                                saveImage(bufferedImage, \"failureImage.png\");\n+                                failureString = \"Test Failed at <\" + x + \", \" + y + \">\";\n+                                break;\n+                            }\n+                        }\n@@ -103,0 +109,5 @@\n+                });\n+                if (failureString != null) {\n+                    throw new RuntimeException(failureString);\n+                } else {\n+                    System.out.println(\"Test Passed!\");\n@@ -104,5 +115,6 @@\n-            });\n-            if (!passed) {\n-                throw new RuntimeException(failureString);\n-            } else {\n-                System.out.println(\"Test Passed!\");\n+            } finally {\n+                SwingUtilities.invokeAndWait(() -> {\n+                    if (frame != null) {\n+                        frame.dispose();\n+                    }\n+                });\n@@ -110,6 +122,0 @@\n-        } finally {\n-            SwingUtilities.invokeAndWait(() -> {\n-                if (frame != null) {\n-                    frame.dispose();\n-                }\n-            });\n@@ -126,0 +132,11 @@\n+\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Unsupported LAF: \" + laf.getClassName());\n+        } catch (ClassNotFoundException | InstantiationException\n+                 | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n@@ -144,1 +161,1 @@\n-    List data = new ArrayList();\n+    List<CustomTable.Record> data = new ArrayList();\n@@ -148,3 +165,3 @@\n-        data.add(new CustomTable.Data(\"First1\", \"Last1\", 10000f));\n-        data.add(new CustomTable.Data(\"First2\", \"Last2\", 10000f));\n-        data.add(new CustomTable.Data(\"First3\", \"Last3\", 10000f));\n+        data.add(new CustomTable.Record(\"First1\", \"Last1\", 10000f));\n+        data.add(new CustomTable.Record(\"First2\", \"Last2\", 10000f));\n+        data.add(new CustomTable.Record(\"First3\", \"Last3\", 10000f));\n@@ -157,1 +174,1 @@\n-    class Data {\n+    static class Record {\n@@ -162,1 +179,1 @@\n-        public Data(String firstname, String lastname, float salary) {\n+        public Record(String firstname, String lastname, float salary) {\n@@ -180,1 +197,1 @@\n-            CustomTable.Data item = (CustomTable.Data) data.get(rowIndex);\n+            CustomTable.Record item = data.get(rowIndex);\n","filename":"test\/jdk\/javax\/swing\/JTable\/JTableRightAlignmentTest.java","additions":73,"deletions":56,"binary":false,"changes":129,"status":"modified"}]}