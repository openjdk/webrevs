{"files":[{"patch":"@@ -241,3 +241,11 @@\n- * double}. Alternatives include using an integer type and storing\n- * cents or mills or using {@link java.math.BigDecimal BigDecimal} to\n- * store decimal fraction values exactly.\n+ * double}. Alternatives include:\n+ * <ul>\n+ * <li>using {@link java.math.BigDecimal BigDecimal} to store decimal\n+ * fractional values exactly\n+ *\n+ * <li>scaling up so the monetary value so it is an integer &mdash; for\n+ * example, multiplying by 100 if the value is denominated in cents or\n+ * multiplying by 1000 if the value is denominated in mills &mdash; and\n+ * then storing the scaled value in an integer type.\n+ *\n+ *<\/ul>\n@@ -275,1 +283,1 @@\n- * <p>An analogous range can be constructed similarly for the {@code\n+ * <p>Similarly, an analogous range can be constructed  for the {@code\n@@ -289,1 +297,1 @@\n- * A floating-point value doesn't \"know\" if it was the result of\n+ * A floating-point value doesn't \"know\" whether it was the result of\n@@ -305,1 +313,2 @@\n- * only close to 1.0. Consequently the following code is an infinite loop:\n+ * only be close to 1.0. Consequently, the following code is an\n+ * infinite loop:\n@@ -314,1 +323,1 @@\n- * Instead, for counted loops, use an integer loop count:\n+ * Instead, use an integer loop count for counted loops:\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Double.java","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"}]}