{"files":[{"patch":"@@ -205,1 +205,1 @@\n- * Many surprising aspects of binary floating-point arithmetic trace\n+ * Many surprises results of binary floating-point arithmetic trace\n@@ -208,3 +208,3 @@\n- * in any base, which fractional values can be exactly represented is\n- * a function of the base. For example, in base 10, 1\/3 is a repeating\n- * fraction (0.33333....); but in base 3, 1\/3 is exactly\n+ * in any base, which fractional values can be exactly represented in\n+ * a base is a function of the base. For example, in base 10, 1\/3 is a\n+ * repeating fraction (0.33333....); but in base 3, 1\/3 is exactly\n@@ -212,3 +212,3 @@\n- * Similarly, in base 10, 1\/10 is exactly representable as 0.1, but in\n- * base 2, it is a repeating fraction\n- * (0.0001100110011...<sub>(2)<\/sub>).\n+ * Similarly, in base 10, 1\/10 is exactly representable as 0.1\n+ * (1&nbsp;&times;&nbsp;10<sup>-1<\/sup>), but in base 2, it is a\n+ * repeating fraction (0.0001100110011...<sub>(2)<\/sub>).\n@@ -249,1 +249,1 @@\n- * and then storing that scaled value in an integer type.\n+ * and then storing that scaled value in an integer type\n@@ -294,1 +294,0 @@\n- * <li>less than the exact result\n@@ -296,0 +295,1 @@\n+ * <li>less than the exact result\n@@ -314,1 +314,1 @@\n- * only be close to 1.0. Consequently, the following code is an\n+ * only to be close to 1.0. Consequently, the following code is an\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Double.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"}]}