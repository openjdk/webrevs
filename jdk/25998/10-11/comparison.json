{"files":[{"patch":"@@ -140,1 +140,1 @@\n-     * @param len the total number of <em>characters (not bytes!)<\/em> to be encoded\n+     * @param len the maximum number of <em>characters (not bytes!)<\/em> to be encoded\n@@ -148,0 +148,1 @@\n+        int sl;\n@@ -150,1 +151,1 @@\n-                len > (sa.length >>> 1) - sp ||\n+                sp >= (sl = sa.length >>> 1) ||\n@@ -152,4 +153,0 @@\n-            \/\/ Not checking the `len < da.length - dp` invariant, since \"as many\n-            \/\/ codepoints as possible\" contract still holds with a `da` of\n-            \/\/ insufficient capacity, and the compiler intrinsic matches this\n-            \/\/ behavior too.\n@@ -158,1 +155,2 @@\n-        return encodeISOArray0(sa, sp, da, dp, len);\n+        int minLen = Math.min(len, Math.min(sl - sp, da.length - dp));\n+        return encodeISOArray0(sa, sp, da, dp, minLen);\n@@ -183,1 +181,1 @@\n-     * @param len the total number of characters to be encoded\n+     * @param len the maximum number of characters to be encoded\n@@ -191,5 +189,1 @@\n-        if ((sp | dp | len) < 0 || len > sa.length - sp || dp >= da.length) {\n-            \/\/ Not checking the `len < da.length - dp` invariant, since \"as many\n-            \/\/ codepoints as possible\" contract still holds with a `da` of\n-            \/\/ insufficient capacity, and the compiler intrinsic matches this\n-            \/\/ behavior too.\n+        if ((sp | dp | len) < 0 || sp >= sa.length || dp >= da.length) {\n@@ -198,1 +192,2 @@\n-        return encodeAsciiArray0(sa, sp, da, dp, len);\n+        int minLen = Math.min(len, Math.min(sa.length - sp, da.length - dp));\n+        return encodeAsciiArray0(sa, sp, da, dp, minLen);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringCoding.java","additions":9,"deletions":14,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-         * @param len the total number of characters to be encoded\n+         * @param len the maximum number of characters to be encoded\n@@ -161,5 +161,1 @@\n-            if ((sp | dp | len) < 0 || len > sa.length - sp || dp >= da.length) {\n-                \/\/ Not checking the `len < da.length - dp` invariant, since \"as many\n-                \/\/ codepoints as possible\" contract still holds with a `da` of\n-                \/\/ insufficient capacity, and the compiler intrinsic matches this\n-                \/\/ behavior too.\n+            if ((sp | dp | len) < 0 || sp >= sa.length || dp >= da.length) {\n@@ -168,1 +164,2 @@\n-            return encodeISOArray0(sa, sp, da, dp, len);\n+            int minLen = Math.min(len, Math.min(sa.length - sp, da.length - dp));\n+            return encodeISOArray0(sa, sp, da, dp, minLen);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/ISO_8859_1.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @bug 8361842\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestVerifyIntrinsicChecks.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+ * @bug 8281146\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestCountPositives.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+ * @bug 6896617 8274242\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestEncodeIntrinsics.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+ * @bug 8054307\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestHasNegatives.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}