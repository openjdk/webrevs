[{"commit":{"message":"Merge remote-tracking branch 'upstream\/master' into strIntrinCheck"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/share\/opto\/c2_globals.hpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.cpp"}],"sha":"c322f0e096baf71c48c680ca806050b552ce7c6e"},{"commit":{"message":"Replace `requireNonNull` with implicit null checks to reduce bytecode size"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringCoding.java"},{"filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/ISO_8859_1.java"}],"sha":"e70dfa3ce61583f60dfc58610b707fd3c9e167c8"},{"commit":{"message":"Add `@bug` tags"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestVerifyIntrinsicChecks.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestCountPositives.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestEncodeIntrinsics.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestHasNegatives.java"}],"sha":"1d02189fba1d53230b556b1cc0741fc0be56cfd7"},{"commit":{"message":"Improve wording of `@param len`"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringCoding.java"},{"filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/ISO_8859_1.java"}],"sha":"dc5e673e516c86d0d4b141a04983413b3315b2c2"},{"commit":{"message":"Make source array bound checks lenient too"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringCoding.java"},{"filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/ISO_8859_1.java"}],"sha":"cb4780d0889e2b763dc813199b0f537244cf92b8"},{"commit":{"message":"Cap destination array bounds"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringCoding.java"},{"filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/ISO_8859_1.java"}],"sha":"07cd41c540199d99a92dd094d24e7e9467ff04b4"},{"commit":{"message":"Fix bit shifting"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringCoding.java"}],"sha":"025c7ef7805202ea67843bb59dd85c2cc2cfb0c1"},{"commit":{"message":"Remove superseded `@throws` Javadoc"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java"}],"sha":"86e3ed8db18c411b3c3567801a7209482f11a1a8"},{"commit":{"message":"Merge remote-tracking branch 'upstream\/master' into strIntrinCheck"},"files":[{"filename":"src\/hotspot\/share\/opto\/c2_globals.hpp"}],"sha":"f69374fb46c779892d500a9ff9bfc0ed165a11ba"},{"commit":{"message":"Make `StringCoding` encoding intrinsics lenient"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringCoding.java"},{"filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/ISO_8859_1.java"},{"filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/SingleByte.java"}],"sha":"fb8f6efea34b402f92037502272aab42cf66e373"},{"commit":{"message":"Fix `encodeISOArray` bounds checks and Javadoc"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringCoding.java"}],"sha":"943f84000a7d377afb191e374a571975b7cd29e1"},{"commit":{"message":"Disable `TestVerifyIntrinsicChecks` for GraalVM"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestVerifyIntrinsicChecks.java"}],"sha":"4016c7a1fe708bacf8d4be785f687b98d37ebc6d"},{"commit":{"message":"Relax target array capacity check for intrinsic Java wrappers\n\nIt's not possible to determine the required capacity of the target\narray in constant time, as Unicode code points may occupy either one\nor two `char` values. As a result, existing implementations typically\ninvoke encoding methods in a loop, handling each unmappable character\non a case-by-case basis. For an example, see\n`sun.nio.cs.DoubleByte.Encoder::encode`."},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringCoding.java"},{"filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/ISO_8859_1.java"}],"sha":"8c712ff29279af0fe23f731b4983489f856aa865"},{"commit":{"message":"Fix out-of-bounds in `sun.nio.cs.SingleByte.Encoder::encodeArrayLoop`"},"files":[{"filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/SingleByte.java"}],"sha":"7a6cd39d4367bd2ee0774e247dbcafc59e9b86bb"},{"commit":{"message":"Replace casting with `as_Region()` in `generate_string_range_check`"},"files":[{"filename":"src\/hotspot\/share\/opto\/library_call.cpp"}],"sha":"db1ed388765344423e131e6157f0ab0ebceb9373"},{"commit":{"message":"Duplicate affected tests with `-XX:+VerifyIntrinsicChecks` variants"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestCountPositives.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestEncodeIntrinsics.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestHasNegatives.java"}],"sha":"abc0eeb3bfc6ac05b589bd32e6db98f7657e3438"},{"commit":{"message":"Fix compiler error in `generate_string_range_check`"},"files":[{"filename":"src\/hotspot\/share\/opto\/library_call.cpp"}],"sha":"bfc301798d17318b97dd6dffa73548d25176be6c"},{"commit":{"message":"Add test verifying the effectiveness of `VerifyIntrinsicChecks`"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringCoding.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestVerifyIntrinsicChecks.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/patches\/java.base\/java\/lang\/Helper.java"}],"sha":"bcb073cbb41dbdd469b7bfbaf6d2815e8348bcf1"},{"commit":{"message":"Improve `generate_string_range_check` changes\n\nCo-authored-by: Tobias Hartmann <tobias.hartmann@oracle.com>"},"files":[{"filename":"src\/hotspot\/share\/opto\/library_call.cpp"}],"sha":"2b89e8808cbeacb34224cc5971a43902ab738cae"},{"commit":{"message":"Merge remote-tracking branch 'upstream\/master' into strIntrinCheck"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.hpp"}],"sha":"85f198648a2ef2fc531d847e70a2b18a83fff2e8"},{"commit":{"message":"Apply review feedback (styling changes)"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringCoding.java"},{"filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/ISO_8859_1.java"}],"sha":"2672f7c1adadd493540570e8439d372edafb1a98"},{"commit":{"message":"Minimize the number of touched lines in `vmIntrinsics.hpp`"},"files":[{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp"}],"sha":"7c042b35bfe02c7e1172d1d47a3e2814531485eb"},{"commit":{"message":"Remove Markdown-styling in comments"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"}],"sha":"b60ff457453fc410f32cca13fed0c3438f9da979"},{"commit":{"message":"Improve wording of the `VerifyIntrinsicChecks` flag"},"files":[{"filename":"src\/hotspot\/share\/opto\/c2_globals.hpp"}],"sha":"c331fbfad922b2c0cf18d5653e9e45f0e1f9c4ef"},{"commit":{"message":"Merge remote-tracking branch 'upstream\/master' into strIntrinCheck"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp"},{"filename":"src\/hotspot\/share\/opto\/c2_globals.hpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/String.java"}],"sha":"6af98646e6528da69e89ce46ca83a0f2e8a3c68f"},{"commit":{"message":"Fix `EUC_JP.java.template` broken due to `encodeASCII` rename"},"files":[{"filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/EUC_JP.java.template"}],"sha":"b9a6adf16c08b4ee4c31e66a3e4ef66dcd65865a"},{"commit":{"message":"Remove `StringCodingCountPositives`, `String{En,De}code` already cover our cases\n\nThis reverts commit 196fc5d406851b8e7070c97ac53ca59c4615aad9."},"files":[],"sha":"14275e5517c730284f97339a640873ec7d7e3352"},{"commit":{"message":"Improve intrinsics in `StringCoding`"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/String.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringCoding.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/System.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java"},{"filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/CESU_8.java"},{"filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/DoubleByte.java"},{"filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/ISO_8859_1.java"},{"filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/SingleByte.java"},{"filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/US_ASCII.java"},{"filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/UTF_8.java"}],"sha":"9932dd34612256adef193b445e4eadefad62984f"},{"commit":{"message":"Add `StringCodingCountPositives` benchmark"},"files":[],"sha":"196fc5d406851b8e7070c97ac53ca59c4615aad9"},{"commit":{"message":"Apply review feedback"},"files":[{"filename":"src\/hotspot\/share\/opto\/c2_globals.hpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringCoding.java"}],"sha":"149882416a956dec728a964c150b826dd589908f"},{"commit":{"message":"Move `StringCoding::countPositives` checks from C++ to Java"},"files":[{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp"},{"filename":"src\/hotspot\/share\/opto\/c2_globals.hpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringCoding.java"}],"sha":"ac5df9f3a779110111c0e400ec10b9bf94a65c0d"}]