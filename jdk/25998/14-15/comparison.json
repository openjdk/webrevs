{"files":[{"patch":"@@ -133,0 +133,2 @@\n+        \/\/ This method should tolerate invalid arguments, matching the lenient behavior of the VM intrinsic.\n+        \/\/ Hence, using operator expressions instead of `Preconditions`, which throw on failure.\n@@ -172,0 +174,2 @@\n+        \/\/ This method should tolerate invalid arguments, matching the lenient behavior of the VM intrinsic.\n+        \/\/ Hence, using operator expressions instead of `Preconditions`, which throw on failure.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringCoding.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -159,0 +159,2 @@\n+            \/\/ This method should tolerate invalid arguments, matching the lenient behavior of the VM intrinsic.\n+            \/\/ Hence, using operator expressions instead of `Preconditions`, which throw on failure.\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/ISO_8859_1.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n- *          by enabling the ones in the compiler intrinsic using\n+ *          by enabling the ones in the VM intrinsic using\n@@ -57,0 +57,3 @@\n+ * @comment This does not check out-of-range conditions. The\n+ *          `-XX:+VerifyIntrinsicChecks` version of this test simply ensures\n+ *          that the VM intrinsic will produce no spurious errors.\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestCountPositives.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -38,2 +38,5 @@\n- *          Java wrapper checks by enabling the ones in the compiler intrinsic\n- *          using `-XX:+VerifyIntrinsicChecks`\n+ *          Java wrapper checks by enabling the ones in the VM intrinsic using\n+ *          `-XX:+VerifyIntrinsicChecks`\n+ * @comment This does not check out-of-range conditions. The\n+ *          `-XX:+VerifyIntrinsicChecks` version of this test simply ensures\n+ *          that the VM intrinsic will produce no spurious errors.\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestEncodeIntrinsics.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n- *          by enabling the ones in the compiler intrinsic using\n+ *          by enabling the ones in the VM intrinsic using\n@@ -56,0 +56,3 @@\n+ * @comment This does not check out-of-range conditions. The\n+ *          `-XX:+VerifyIntrinsicChecks` version of this test simply ensures\n+ *          that the VM intrinsic will produce no spurious errors.\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestHasNegatives.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}