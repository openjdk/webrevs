{"files":[{"patch":"@@ -193,2 +193,2 @@\n-    private static int encodeAsciiArray0(char[] sa, int sp,\n-                                         byte[] da, int dp, int len) {\n+    static int encodeAsciiArray0(char[] sa, int sp,\n+                                 byte[] da, int dp, int len) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringCoding.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Verify the effectiveness of the `VerifyIntrinsicChecks` VM flag\n+ *          through (bypassing `StringCoding::encodeAsciiArray`, and) feeding\n+ *          invalid input to an intrinsified `StringCoding::encodeAsciiArray0`\n+ *          (note the `0` suffix!).\n+ * @library \/compiler\/patches\n+ * @library \/test\/lib\n+ * @build java.base\/java.lang.Helper\n+ * @comment `vm.debug == true` is required since `VerifyIntrinsicChecks` is a\n+ *          development flag\n+ * @requires vm.debug == true & vm.flavor == \"server\"\n+ * @run main\/othervm compiler.intrinsics.TestVerifyIntrinsicChecks verify\n+ *\/\n+\n+package compiler.intrinsics;\n+\n+import java.lang.Helper;\n+import java.time.Instant;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public final class TestVerifyIntrinsicChecks {\n+\n+    public static void main(String[] args) throws Exception {\n+        switch (args[0]) {\n+            case \"verify\" -> {\n+                log(\"Starting JVM in a separate process to verify the crash\");\n+                OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(\n+                        \"-Xcomp\",\n+                        \"-XX:-TieredCompilation\",\n+                        \"-XX:CompileCommand=inline,java.lang.StringCoding::encodeAsciiArray0\",\n+                        \"-XX:+VerifyIntrinsicChecks\",\n+                        \"--patch-module\", \"java.base=%s\/java.base\".formatted(System.getProperty(\"test.patch.path\")),\n+                        \"compiler.intrinsics.TestVerifyIntrinsicChecks\",\n+                        \"crash\");\n+                outputAnalyzer.shouldContain(\"unexpected null in intrinsic\");\n+                outputAnalyzer.shouldNotHaveExitValue(0);\n+            }\n+            case \"crash\" -> {\n+                log(\"Triggering the crash\");\n+                warmUpIntrinsicMethod();\n+                violateIntrinsicMethodContract();\n+            }\n+            default -> throw new IllegalArgumentException();\n+        }\n+    }\n+\n+    private static void warmUpIntrinsicMethod() {\n+        log(\"Warming up the intrinsic method\");\n+        char[] sa = createAsciiChars(8192);\n+        byte[] sp = new byte[4096];\n+        for (int i = 0; i < 1_000; i++) {\n+            Helper.StringCodingEncodeAsciiArray0(sa, i, sp, 0, sp.length - i);\n+        }\n+    }\n+\n+    private static char[] createAsciiChars(int length) {\n+        char[] buffer = new char[length];\n+        for (int i = 0; i < length; i++) {\n+            buffer[i] = (char) (i % '\\u0080');\n+        }\n+        return buffer;\n+    }\n+\n+    private static void violateIntrinsicMethodContract() {\n+        log(\"Violating the intrinsic method contract (sa=null)\");\n+        int ret = Helper.StringCodingEncodeAsciiArray0(null, 1, null, 1, 1);\n+    }\n+\n+    private synchronized static void log(String format, Object... args) {\n+        Object[] extendedArgs = new Object[2 + args.length];\n+        extendedArgs[0] = Instant.now();\n+        extendedArgs[1] = Thread.currentThread().getName();\n+        System.arraycopy(args, 0, extendedArgs, extendedArgs.length - args.length, args.length);\n+        String extendedFormat = \"%%s [%%s] %s%%n\".formatted(format);\n+        System.out.printf(extendedFormat, extendedArgs);\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestVerifyIntrinsicChecks.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -42,0 +42,5 @@\n+    @jdk.internal.vm.annotation.ForceInline\n+    public static int StringCodingEncodeAsciiArray0(char[] sa, int sp, byte[] da, int dp, int len) {\n+        return StringCoding.encodeAsciiArray0(sa, sp, da, dp, len);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/patches\/java.base\/java\/lang\/Helper.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}