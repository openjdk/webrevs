{"files":[{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import jdk.internal.foreign.AbstractMemorySegmentImpl;\n+import jdk.internal.misc.ScopedMemoryAccess;\n@@ -51,1 +53,1 @@\n-@Fork(value = 3)\n+@Fork(value = 3, jvmArgs = { \"--add-opens=java.base\/jdk.internal.misc=ALL-UNNAMED\",\"--add-opens=java.base\/jdk.internal.foreign=ALL-UNNAMED\"})\n@@ -54,1 +56,3 @@\n-    @Param({\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"64\", \"512\",\n+    private static final ScopedMemoryAccess SCOPED_MEMORY_ACCESS = ScopedMemoryAccess.getScopedMemoryAccess();\n+\n+    @Param({\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"12\", \"64\", \"512\",\n@@ -59,3 +63,3 @@\n-    MemorySegment heapSegment;\n-    MemorySegment nativeSegment;\n-    MemorySegment unalignedSegment;\n+    AbstractMemorySegmentImpl heapSegment;\n+    AbstractMemorySegmentImpl nativeSegment;\n+    AbstractMemorySegmentImpl unalignedSegment;\n@@ -67,3 +71,3 @@\n-        heapSegment = MemorySegment.ofArray(array);\n-        nativeSegment = Arena.ofAuto().allocate(ELEM_SIZE, 8);\n-        unalignedSegment = Arena.ofAuto().allocate(ELEM_SIZE + 1, 8).asSlice(1);\n+        heapSegment = (AbstractMemorySegmentImpl)MemorySegment.ofArray(array);\n+        nativeSegment = (AbstractMemorySegmentImpl)Arena.ofAuto().allocate(ELEM_SIZE, 8);\n+        unalignedSegment = (AbstractMemorySegmentImpl)Arena.ofAuto().allocate(ELEM_SIZE + 1, 8).asSlice(1);\n@@ -98,1 +102,0 @@\n-    @Fork(value = 3, jvmArgs = {\"-Djava.lang.foreign.native.threshold.power.fill=0\"})\n@@ -101,1 +104,1 @@\n-        heapSegment.fill((byte) 0);\n+        SCOPED_MEMORY_ACCESS.setMemory(heapSegment.sessionImpl(), heapSegment.unsafeGetBase(), heapSegment.unsafeGetOffset(), heapSegment.byteSize(), (byte) 0);\n@@ -117,1 +120,0 @@\n-    @Fork(value = 3, jvmArgs = {\"-Djava.lang.foreign.native.threshold.power.fill=0\"})\n@@ -120,1 +122,1 @@\n-        nativeSegment.fill((byte) 0);\n+        SCOPED_MEMORY_ACCESS.setMemory(nativeSegment.sessionImpl(), nativeSegment.unsafeGetBase(), nativeSegment.unsafeGetOffset(), nativeSegment.byteSize(), (byte) 0);\n@@ -136,1 +138,0 @@\n-    @Fork(value = 3, jvmArgs = {\"-Djava.lang.foreign.native.threshold.power.fill=0\"})\n@@ -139,1 +140,1 @@\n-        unalignedSegment.fill((byte) 0);\n+        SCOPED_MEMORY_ACCESS.setMemory(unalignedSegment.sessionImpl(), unalignedSegment.unsafeGetBase(), unalignedSegment.unsafeGetOffset(), unalignedSegment.byteSize(), (byte) 0);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/SegmentBulkFill.java","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"}]}