{"files":[{"patch":"@@ -55,1 +55,1 @@\n-    private static final int NATIVE_THRESHOLD_FILL = powerOfPropertyOr(\"fill\", 5);\n+    private static final int NATIVE_THRESHOLD_FILL = 32;\n@@ -80,1 +80,1 @@\n-        \/* The multiplication below is equivalent to:\n+        \/* The multiplication below is equivalent to (but faster than):\n@@ -87,1 +87,1 @@\n-            case 0 -> dst.sessionImpl().checkValidState(); \/\/ Implicit state check\n+            case 0 -> dst.sessionImpl().checkValidState(); \/\/ Explicit state check\n@@ -96,0 +96,1 @@\n+    \/** This case covers [2, 3] bytes *\/\n@@ -99,1 +100,2 @@\n-        SCOPED_MEMORY_ACCESS.putShortUnaligned(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset() + len - Short.BYTES, value, !Architecture.isLittleEndian());\n+        \/\/ `putByte()` below is enough as 3 is the maximum number of bytes covered\n+        SCOPED_MEMORY_ACCESS.putByte(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset() + len - Byte.BYTES, (byte) value);\n@@ -102,0 +104,1 @@\n+    \/** This case covers [4, 7] bytes *\/\n@@ -108,0 +111,1 @@\n+    \/** This case covers [8, 15] bytes *\/\n@@ -114,0 +118,1 @@\n+    \/** This case covers [16, 2^63) bytes *\/\n@@ -117,1 +122,1 @@\n-            final int limit = (int) (len & (NATIVE_THRESHOLD_FILL - 8));\n+            final int limit = (int) (len & (NATIVE_THRESHOLD_FILL - Long.BYTES));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SegmentBulkOperations.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    @Param({\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"12\", \"64\", \"512\",\n+    @Param({\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"12\", \"24\", \"64\", \"512\",\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/SegmentBulkFill.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}