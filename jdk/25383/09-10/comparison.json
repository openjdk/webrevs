{"files":[{"patch":"@@ -349,1 +349,1 @@\n-    public void checkReadOnly(boolean readOnly) {\n+    public final void checkReadOnly(boolean readOnly) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -199,1 +199,1 @@\n-    public void checkValidStateRaw() {\n+    public final void checkValidStateRaw() {\n@@ -213,1 +213,1 @@\n-    public void checkValidState() {\n+    public final void checkValidState() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-        dst.checkReadOnly(false);\n+        dst.checkReadOnly(true);\n@@ -99,1 +99,3 @@\n-        SCOPED_MEMORY_ACCESS.putShortUnaligned(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset(), value, !Architecture.isLittleEndian());\n+        final MemorySessionImpl sessionImpl = dst.sessionImpl();\n+        final long offset = dst.unsafeGetOffset();\n+        SCOPED_MEMORY_ACCESS.putShortUnaligned(sessionImpl, dst.unsafeGetBase(), offset, value);\n@@ -101,1 +103,1 @@\n-        SCOPED_MEMORY_ACCESS.putByte(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset() + len - Byte.BYTES, (byte) value);\n+        SCOPED_MEMORY_ACCESS.putByte(sessionImpl, dst.unsafeGetBase(), offset + len - Byte.BYTES, (byte) value);\n@@ -107,2 +109,4 @@\n-        SCOPED_MEMORY_ACCESS.putIntUnaligned(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset(), value, !Architecture.isLittleEndian());\n-        SCOPED_MEMORY_ACCESS.putIntUnaligned(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset() + len - Integer.BYTES, value, !Architecture.isLittleEndian());\n+        final MemorySessionImpl sessionImpl = dst.sessionImpl();\n+        final long offset = dst.unsafeGetOffset();\n+        SCOPED_MEMORY_ACCESS.putIntUnaligned(sessionImpl, dst.unsafeGetBase(), offset, value);\n+        SCOPED_MEMORY_ACCESS.putIntUnaligned(sessionImpl, dst.unsafeGetBase(), offset + len - Integer.BYTES, value);\n@@ -114,2 +118,4 @@\n-        SCOPED_MEMORY_ACCESS.putLongUnaligned(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset(), value, !Architecture.isLittleEndian());\n-        SCOPED_MEMORY_ACCESS.putLongUnaligned(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset() + len - Long.BYTES, value, !Architecture.isLittleEndian());\n+        final MemorySessionImpl sessionImpl = dst.sessionImpl();\n+        final long offset = dst.unsafeGetOffset();\n+        SCOPED_MEMORY_ACCESS.putLongUnaligned(sessionImpl, dst.unsafeGetBase(), offset, value);\n+        SCOPED_MEMORY_ACCESS.putLongUnaligned(sessionImpl, dst.unsafeGetBase(), offset + len - Long.BYTES, value);\n@@ -121,0 +127,2 @@\n+        final MemorySessionImpl sessionImpl = dst.sessionImpl();\n+        final long offset = dst.unsafeGetOffset();\n@@ -123,2 +131,2 @@\n-            for (int offset = 0; offset < limit; offset += Long.BYTES) {\n-                SCOPED_MEMORY_ACCESS.putLongUnaligned(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset() + offset, value, !Architecture.isLittleEndian());\n+            for (int i = 0; i < limit; i += Long.BYTES) {\n+                SCOPED_MEMORY_ACCESS.putLongUnaligned(sessionImpl, dst.unsafeGetBase(), offset + i, value);\n@@ -126,1 +134,1 @@\n-            SCOPED_MEMORY_ACCESS.putLongUnaligned(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset() + len - Long.BYTES, value, !Architecture.isLittleEndian());\n+            SCOPED_MEMORY_ACCESS.putLongUnaligned(sessionImpl, dst.unsafeGetBase(), offset + len - Long.BYTES, value);\n@@ -129,1 +137,1 @@\n-            SCOPED_MEMORY_ACCESS.setMemory(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset(), len, (byte) value);\n+            SCOPED_MEMORY_ACCESS.setMemory(sessionImpl, dst.unsafeGetBase(), offset, len, (byte) value);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SegmentBulkOperations.java","additions":19,"deletions":11,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -85,0 +85,42 @@\n+\n+    @ForceInline\n+    public $type$ get$Type$Unaligned(MemorySessionImpl session, Object base, long offset) {\n+        try {\n+            return get$Type$UnalignedInternal(session, base, offset);\n+        } catch (ScopedAccessError ex) {\n+            throw ex.newRuntimeException();\n+        }\n+    }\n+\n+    @ForceInline @Scoped\n+    private $type$ get$Type$UnalignedInternal(MemorySessionImpl session, Object base, long offset) {\n+        try {\n+            if (session != null) {\n+                session.checkValidStateRaw();\n+            }\n+            return UNSAFE.get$Type$Unaligned(base, offset);\n+        } finally {\n+            Reference.reachabilityFence(session);\n+        }\n+    }\n+\n+    @ForceInline\n+    public void put$Type$Unaligned(MemorySessionImpl session, Object base, long offset, $type$ value) {\n+        try {\n+            put$Type$UnalignedInternal(session, base, offset, value);\n+        } catch (ScopedAccessError ex) {\n+            throw ex.newRuntimeException();\n+        }\n+    }\n+\n+    @ForceInline @Scoped\n+    private void put$Type$UnalignedInternal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n+        try {\n+            if (session != null) {\n+                session.checkValidStateRaw();\n+            }\n+            UNSAFE.put$Type$Unaligned(base, offset, value);\n+        } finally {\n+            Reference.reachabilityFence(session);\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess-bin.java.template","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"}]}