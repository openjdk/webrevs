{"files":[{"patch":"@@ -103,2 +103,1 @@\n-            Smaps.Parser smapsParser = new Smaps.Parser();\n-            smapsParser.parse();\n+            Smaps smaps = Smaps.parseSelf();\n@@ -106,1 +105,1 @@\n-            Range range = smapsParser.getRange(heapStart);\n+            Range range = smaps.getRange(heapStart);\n","filename":"test\/hotspot\/jtreg\/gc\/TestTransparentHugePagesHeap.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -161,2 +161,1 @@\n-        Smaps.Parser smapsParser = new Smaps.Parser();\n-        smapsParser.parse(\"-\" + (run++));\n+        Smaps smaps = Smaps.parseSelf();\n@@ -179,1 +178,1 @@\n-                Range range = smapsParser.getRange(address);\n+                Range range = smaps.getRange(address);\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestTracePageSizes.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -38,0 +38,27 @@\n+    \/\/ List of memory ranges\n+    private List<Range> ranges;\n+\n+    protected Smaps(List<Range> ranges) {\n+        this.ranges = ranges;\n+    }\n+\n+    \/\/ Search for a range including the given address.\n+    public Range getRange(String addr) {\n+        BigInteger laddr = new BigInteger(addr.substring(2), 16);\n+        for (Range range : ranges) {\n+            if (range.includes(laddr)) {\n+                return range;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public static Smaps parseSelf() throws Exception {\n+        return parse(Path.of(\"\/proc\/self\/smaps\"));\n+    }\n+\n+    public static Smaps parse(Path smaps) throws Exception {\n+        return new Parser(smaps).parse();\n+    }\n+\n@@ -42,2 +69,1 @@\n-    public static class Parser {\n-        private static final List<Range> ranges = new LinkedList<>();\n+    private static class Parser {\n@@ -56,0 +82,9 @@\n+        List<Range> ranges;\n+        Path smaps;\n+\n+        Parser(Path smaps) {\n+            this.ranges = new LinkedList<Range>();\n+            this.smaps = smaps;\n+            reset();\n+        }\n+\n@@ -106,21 +141,4 @@\n-        private Path copySmaps(String postfix) throws Exception {\n-            Path p1 = Paths.get(\"\/proc\/self\/smaps\");\n-            Path p2 = Paths.get(\"smaps-copy-\" +  ProcessHandle.current().pid() + postfix + \".txt\");\n-            Files.copy(p1, p2, StandardCopyOption.REPLACE_EXISTING);\n-            return p2;\n-        }\n-\n-        \/\/ Parse \/proc\/self\/smaps.\n-        public void parse() throws Exception {\n-            parse(\"\");\n-        }\n-\n-        public void parse(String postfix) throws Exception {\n-            \/\/ We can override the smaps file to parse to pass in a pre-fetched one\n-            String smapsFileToParse = System.getProperty(\"smaps-file\");\n-            if (smapsFileToParse != null) {\n-                parse(Paths.get(smapsFileToParse));\n-            } else {\n-                Path smapsCopy = copySmaps(postfix);\n-                parse(smapsCopy);\n-            }\n+        private Path copySmaps() throws Exception {\n+            Path copy = Paths.get(\"smaps-copy-\" +  ProcessHandle.current().pid() + \"-\" + System.nanoTime() + \".txt\");\n+            Files.copy(smaps, copy, StandardCopyOption.REPLACE_EXISTING);\n+            return copy;\n@@ -130,2 +148,5 @@\n-        public void parse(Path smapsFileToParse) throws Exception {\n-            Files.lines(smapsFileToParse).forEach(this::eatNext);\n+        public Smaps parse() throws Exception {\n+            Path smapsCopy = copySmaps();\n+            Files.lines(smapsCopy).forEach(this::eatNext);\n+\n+            \/\/ Finish up the last range\n@@ -133,1 +154,0 @@\n-        }\n@@ -135,9 +155,2 @@\n-        \/\/ Search for a range including the given address.\n-        public Range getRange(String addr) {\n-            BigInteger laddr = new BigInteger(addr.substring(2), 16);\n-            for (Range range : ranges) {\n-                if (range.includes(laddr)) {\n-                    return range;\n-                }\n-            }\n-            return null;\n+            \/\/ Return a Smaps object with the parsed ranges\n+            return new Smaps(ranges);\n","filename":"test\/lib\/jdk\/test\/lib\/os\/linux\/Smaps.java","additions":48,"deletions":35,"binary":false,"changes":83,"status":"modified"}]}