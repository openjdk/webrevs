{"files":[{"patch":"@@ -5336,1 +5336,2 @@\n-  _need_verify = Verifier::should_verify_for(_loader_data->class_loader());\n+  \/\/ Always verify CFLH bytes from the user agents.\n+  _need_verify = stream->from_class_file_load_hook() ? true : Verifier::should_verify_for(_loader_data->class_loader());\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,1 +37,2 @@\n-                                 bool from_boot_loader_modules_image) :\n+                                 bool from_boot_loader_modules_image,\n+                                 bool from_class_file_load_hook) :\n@@ -43,1 +44,2 @@\n-  _from_boot_loader_modules_image(from_boot_loader_modules_image) {\n+  _from_boot_loader_modules_image(from_boot_loader_modules_image),\n+  _from_class_file_load_hook(from_class_file_load_hook) {\n@@ -71,1 +73,2 @@\n-                             from_boot_loader_modules_image());\n+                             from_boot_loader_modules_image(),\n+                             from_class_file_load_hook());\n","filename":"src\/hotspot\/share\/classfile\/classFileStream.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,3 @@\n-  void truncated_file_error(TRAPS) const ;\n+  bool _from_class_file_load_hook;       \/\/ True if this is from CFLH (needs verification)\n+\n+  void truncated_file_error(TRAPS) const;\n@@ -58,1 +60,2 @@\n-                  bool from_boot_loader_modules_image = false);\n+                  bool from_boot_loader_modules_image = false,\n+                  bool from_class_file_load_hook = false);\n@@ -157,0 +160,2 @@\n+\n+  bool from_class_file_load_hook() const { return _from_class_file_load_hook; }\n","filename":"src\/hotspot\/share\/classfile\/classFileStream.hpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -79,1 +79,3 @@\n-                                                    cfs->source());\n+                                                    cfs->source(),\n+                                                    \/* from_boot_loader_modules_image *\/ false,\n+                                                    \/* from_class_file_load_hook *\/ true);\n@@ -158,1 +160,3 @@\n-                                   stream->source());\n+                                   stream->source(),\n+                                   \/* from_boot_loader_modules_image *\/ false,\n+                                   \/* from_class_file_load_hook *\/ true);\n","filename":"src\/hotspot\/share\/classfile\/klassFactory.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8351654\n+ * @summary Show that --patch-module for java.base does not verify the classfile.\n+ * @requires vm.flagless\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @compile PatchModuleMain.java\n+ * @run driver PatchModuleJavaBaseVerify\n+ *\/\n+\n+import jdk.test.lib.compiler.InMemoryJavaCompiler;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class PatchModuleJavaBaseVerify {\n+\n+    public static void main(String[] args) throws Exception {\n+        String source = \"package java.lang; \"                       +\n+                        \"public class NewClass { \"                  +\n+                        \"    static { \"                             +\n+                        \"        System.out.println(\\\"I pass!\\\"); \" +\n+                        \"    } \"                                    +\n+                        \"}\";\n+\n+        ClassFileInstaller.writeClassToDisk(\"java\/lang\/NewClass\",\n+             InMemoryJavaCompiler.compile(\"java.lang.NewClass\", source, \"--patch-module=java.base\"),\n+             \"mods\/java.base\");\n+\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"--patch-module=java.base=mods\/java.base\",\n+             \"-Xlog:verification\", \"PatchModuleMain\", \"java.lang.NewClass\");\n+\n+        new OutputAnalyzer(pb.start())\n+            .shouldContain(\"I pass!\")\n+            .shouldContain(\"End class verification for: PatchModuleMain\")\n+            .shouldNotContain(\"End class verification for: java.lang.NewClass\")\n+            .shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/modules\/PatchModule\/PatchModuleJavaBaseVerify.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package checker;\n+\n+public interface TestChecker {\n+    void check(Integer i);\n+\n+    static TestChecker instance() {\n+        return TestCheckerImpl.instance;\n+    }\n+\n+    class TestCheckerImpl implements TestChecker {\n+        private static final TestCheckerImpl instance = new TestCheckerImpl();\n+\n+        @Override\n+        public void check(Integer i) {\n+            System.out.println(\"Checking: \" + i);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/verifier\/CFLH\/TestChecker.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,174 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Verifier should verify ClassFileLoadHook bytes even if on bootclasspath\n+ * @bug 8351654\n+ * @requires vm.jvmti\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ * @modules java.compiler\n+ *          java.instrument\n+ *          jdk.jartool\/sun.tools.jar\n+ * @compile TestChecker.java\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller checker\/TestChecker\n+ * @run main TestVerify buildAgent\n+ * @run main\/othervm --patch-module=java.base=. -Dagent.retransform=false -javaagent:redefineagent.jar TestVerify\n+ * @run main\/othervm --patch-module=java.base=. -Dagent.retransform=true -javaagent:redefineagent.jar TestVerify\n+ *\/\n+\n+import java.lang.invoke.MethodHandles;\n+import java.time.Duration;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.MethodTransform;\n+import java.lang.classfile.constantpool.InterfaceMethodRefEntry;\n+import java.lang.classfile.instruction.ReturnInstruction;\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.ConstantDescs;\n+import java.lang.constant.MethodTypeDesc;\n+import java.lang.instrument.ClassFileTransformer;\n+import java.lang.instrument.IllegalClassFormatException;\n+import java.lang.instrument.Instrumentation;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.ProtectionDomain;\n+\n+import java.io.PrintWriter;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import java.io.FileNotFoundException;\n+\n+public class TestVerify {\n+\n+    private static final String CLASS_TO_BREAK = \"java.time.Duration\";\n+    private static final String INTERNAL_CLASS_TO_BREAK = CLASS_TO_BREAK.replace('.', '\/');\n+    private static final boolean DEBUG = false;\n+\n+    private static class BadTransformer implements ClassFileTransformer {\n+\n+        @Override\n+        public byte[] transform(Module module, ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n+\n+            if (className.equals(INTERNAL_CLASS_TO_BREAK)) {\n+                System.out.println(\"Instrumenting modular class \" + INTERNAL_CLASS_TO_BREAK);\n+\n+                var methodTransform = MethodTransform.transformingCode((builder, element) -> {\n+                    if (element instanceof ReturnInstruction) {\n+                        System.out.println(\"Injecting bug\");\n+                        \/\/ THE BUG! insert broken function call\n+\n+                        var checkerDesc = ClassDesc.of(\"checker\", \"TestChecker\");\n+                        builder.invokestatic(checkerDesc, \"instance\", MethodTypeDesc.of(checkerDesc), true);\n+\n+                        \/\/ dup the instance ref, this is just to get a bad argument to the next method call\n+                        builder.dup();\n+\n+                        \/\/ then call a check method that doesn't take that type, but we have the wrong desc\n+                        builder.invokeinterface(checkerDesc, \"check\", MethodTypeDesc.of(ConstantDescs.CD_void, ConstantDescs.CD_Integer));\n+\n+                        System.out.println(\"Done injecting bug\");\n+                    }\n+                    builder.with(element);\n+                });\n+                var classTransform = ClassTransform.transformingMethods(mm -> mm.methodName().stringValue().equals(\"getSeconds\"), methodTransform);\n+\n+                byte[] bytes;\n+                try {\n+                    var cf = ClassFile.of();\n+                    var existingClass = cf.parse(classfileBuffer);\n+                    bytes = cf.transformClass(existingClass, classTransform);\n+\n+                    if (DEBUG) Files.write(Path.of(\"bad.class\"), bytes);\n+                } catch (Throwable e) {\n+                    throw new AssertionError(e);\n+                }\n+                return bytes;\n+            }\n+            return null;\n+        }\n+    }\n+\n+    static Instrumentation inst = null;\n+\n+    public static void premain(String args, Instrumentation instrumentation) throws Exception {\n+        System.out.println(\"Premain\");\n+        inst = instrumentation;\n+    }\n+\n+    private static void buildAgent() {\n+        try {\n+            ClassFileInstaller.main(\"TestVerify\");\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Could not write agent classfile\", e);\n+        }\n+\n+        try {\n+            PrintWriter pw = new PrintWriter(\"MANIFEST.MF\");\n+            pw.println(\"Premain-Class: TestVerify\");\n+            pw.println(\"Agent-Class: TestVerify\");\n+            pw.println(\"Can-Retransform-Classes: true\");\n+            pw.println(\"Can-Redefine-Classes: true\");\n+            pw.close();\n+        } catch (FileNotFoundException e) {\n+            throw new RuntimeException(\"Could not write manifest file for the agent\", e);\n+        }\n+\n+        sun.tools.jar.Main jarTool = new sun.tools.jar.Main(System.out, System.err, \"jar\");\n+        if (!jarTool.run(new String[] { \"-cmf\", \"MANIFEST.MF\", \"redefineagent.jar\", \"TestVerify.class\" })) {\n+            throw new RuntimeException(\"Could not write the agent jar file\");\n+        }\n+    }\n+\n+    public static void main(String argv[]) throws Exception {\n+        if (argv.length == 1 && argv[0].equals(\"buildAgent\")) {\n+            buildAgent();\n+            return;\n+        }\n+\n+        \/\/ double check our class hasn't been loaded yet\n+        for (Class clazz : inst.getAllLoadedClasses()) {\n+            if (clazz.getName().equals(CLASS_TO_BREAK)) {\n+                throw new AssertionError(\"Oops! Class \" + CLASS_TO_BREAK + \" is already loaded, the test can't work\");\n+            }\n+        }\n+\n+        boolean retransform = Boolean.getBoolean(\"agent.retransform\");\n+\n+        try {\n+            if (retransform) {\n+                \/\/ Retransform the class for the VerifyError.\n+                var clazz = Class.forName(CLASS_TO_BREAK);\n+                inst.addTransformer(new BadTransformer(), true);\n+                inst.retransformClasses(clazz);\n+            } else {\n+                \/\/ Load the class instrumented with CFLH for the VerifyError.\n+                inst.addTransformer(new BadTransformer());\n+                System.out.println(\"1 hour is \" + Duration.ofHours(1).getSeconds() + \" seconds\");\n+            }\n+            throw new RuntimeException(\"Failed: Did not throw VerifyError\");\n+        } catch (VerifyError e) {\n+            System.out.println(\"Passed: VerifyError \" + e.getMessage());\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/verifier\/CFLH\/TestVerify.java","additions":174,"deletions":0,"binary":false,"changes":174,"status":"added"}]}