{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -922,1 +922,2 @@\n-            if (bufferedImageType != BufferedImage.TYPE_CUSTOM) {\n+            if (bufferedImageType != BufferedImage.TYPE_CUSTOM\n+                    && bufferedImageType != BufferedImage.TYPE_BYTE_INDEXED) {\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/ImageTypeSpecifier.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8351108\n+ * @summary This test verifies that attempting to write a JPEG using\n+ *          ImageIO.write(..) fails by returning `false` for\n+ *          translucent IndexColorModels.\n+ *\/\n+\n+import javax.imageio.ImageIO;\n+import java.awt.Transparency;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.IndexColorModel;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+public class JpegWriterWriteNonOpaqueIndexColorModelTest {\n+    public static void main(String[] args) throws IOException {\n+        boolean b1 = testJpegWriter(Transparency.OPAQUE, \"OPAQUE\", true);\n+        boolean b2 = testJpegWriter(Transparency.BITMASK, \"BITMASK\", false);\n+        boolean b3 = testJpegWriter(Transparency.TRANSLUCENT, \"TRANSLUCENT\", false);\n+        if (!(b1 && b2 && b3))\n+            throw new Error(\"Test failed\");\n+    }\n+\n+    \/**\n+     * Test writing a JPEG using a IndexColorModel\n+     *\n+     * @param imageType a Transparency constant (OPAQUE, BITMASK, TRANSLUCENT) that is used to\n+     *                  define a new IndexColorModel.\n+     * @param name the name of the Transparency constant\n+     * @param expectedWriteReturnValue the expected return value of <code>ImageIO.write(..)<\/code>\n+     * @return true if <code>ImageIO.write(..) == expectedWriteReturnValue<\/code>, or false otherwise.\n+     *         This also returns false if <code>ImageIO.write(..)<\/code> throws an exception. We do not\n+     *         expect that to happen anymore. (Prior to resolving 8351108 ImageIO threw an exception.)\n+     *\/\n+    private static boolean testJpegWriter(int imageType, String name, boolean expectedWriteReturnValue) {\n+        System.out.println();\n+        System.out.println(\"TESTING \" + name);\n+        try {\n+            byte[] gray = new byte[256];\n+            for (int a = 0; a < gray.length; a++) {\n+                gray[a] = (byte) a;\n+            }\n+\n+            byte[] alpha = new byte[256];\n+            if (imageType == Transparency.OPAQUE || imageType == Transparency.BITMASK) {\n+                for (int a = 0; a < alpha.length; a++) {\n+                    alpha[a] = -1;\n+                }\n+                if (imageType == Transparency.BITMASK) {\n+                    alpha[0] = 0;\n+                }\n+            } else if (imageType == Transparency.TRANSLUCENT) {\n+                for (int a = 0; a < alpha.length; a++) {\n+                    alpha[a] = (byte) a;\n+                }\n+            }\n+            IndexColorModel indexColorModel = new IndexColorModel(8, 256, gray, gray, gray, alpha);\n+            System.out.println(\"colorModel.getTransparency() = \" + indexColorModel.getTransparency());\n+            BufferedImage bi = new BufferedImage(10, 10, BufferedImage.TYPE_BYTE_INDEXED, indexColorModel);\n+            boolean result = ImageIO.write(bi, \"jpg\", new ByteArrayOutputStream());\n+            if (result != expectedWriteReturnValue) {\n+                throw new Exception(\"ImageIO.write(..) returned \" + result + \" but we expected \" + expectedWriteReturnValue);\n+            }\n+            System.out.println(\"Tested passed\");\n+            return true;\n+        } catch (Exception e) {\n+            System.err.println(name + \" test failed\");\n+            e.printStackTrace();\n+            return false;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegWriterWriteNonOpaqueIndexColorModelTest.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"}]}