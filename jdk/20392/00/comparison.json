{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import jdk.jfr.internal.util.TimespanUnit;\n@@ -305,10 +306,5 @@\n-        return switch(unit) {\n-            case \"ns\" -> time;\n-            case \"us\" -> time * 1000;\n-            case \"ms\" -> time * 1000 * 1000;\n-            case \"s\" -> time * 1000 * 1000 * 1000;\n-            case \"m\" -> time * 60 * 1000 * 1000 * 1000;\n-            case \"h\" -> time * 60 * 60* 1000 * 1000 * 1000;\n-            case \"d\" -> time * 24 * 60 * 60 * 1000 * 1000 * 1000;\n-            default -> throw new IllegalArgumentException(\"Integer parsing error nanotime value: illegal unit\");\n-        };\n+        TimespanUnit tu = TimespanUnit.fromText(unit);\n+        if (tu == null) {\n+            throw new IllegalArgumentException(\"Integer parsing error nanotime value: illegal unit\");\n+        }\n+        return tu.toNanos(time);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/ArgumentParser.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import jdk.jfr.internal.util.TimespanUnit;\n@@ -30,3 +31,0 @@\n-    private static final String[] UNITS = new String[] {\n-        \"ns\", \"us\", \"ns\", \"ms\", \"s\", \"m\", \"h\", \"d\" \/\/ order matters\n-    };\n@@ -107,3 +105,3 @@\n-            for (String unit : UNITS) {\n-                if (s.endsWith(unit)) {\n-                    return parseForUnit(s, unit);\n+            for (TimespanUnit timespan : TimespanUnit.values()) {\n+                if (s.endsWith(timespan.text)) {\n+                    return parseForUnit(s, timespan.text);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/Utilities.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.util.concurrent.TimeUnit;\n+\n@@ -28,7 +30,7 @@\n-    NANOSECONDS (\"ns\",                           1L, 1000),\n-    MICROSECONDS(\"us\",                        1000L, 1000),\n-    MILLISECONDS(\"ms\",                   1_000_000L, 1000),\n-    SECONDS     (\"s\",                1_000_000_000L,   60),\n-    MINUTES     (\"m\",           60 * 1_000_000_000L,   60),\n-    HOURS       (\"h\",      60 * 60 * 1_000_000_000L,   24),\n-    DAYS        (\"d\", 24 * 60 * 60 * 1_000_000_000L,    7);\n+    NANOSECONDS (\"ns\",  TimeUnit.NANOSECONDS, 1000),\n+    MICROSECONDS(\"us\", TimeUnit.MICROSECONDS, 1000),\n+    MILLISECONDS(\"ms\", TimeUnit.MILLISECONDS, 1000),\n+    SECONDS     (\"s\",       TimeUnit.SECONDS,   60),\n+    MINUTES     (\"m\",       TimeUnit.MINUTES,   60),\n+    HOURS       (\"h\",         TimeUnit.HOURS,   24),\n+    DAYS        (\"d\",          TimeUnit.DAYS,    7);\n@@ -38,1 +40,2 @@\n-    TimespanUnit(String text, long nanos, int size) {\n+    private final TimeUnit timeUnit;\n+    TimespanUnit(String text, TimeUnit tu, int size) {\n@@ -40,1 +43,1 @@\n-        this.nanos = nanos;\n+        this.nanos = tu.toNanos(1);\n@@ -42,0 +45,5 @@\n+        this.timeUnit = tu;\n+    }\n+\n+    public long toNanos(long value) {\n+        return timeUnit.toNanos(value);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/util\/TimespanUnit.java","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -54,20 +54,6 @@\n-        if (s.endsWith(\"ns\")) {\n-            return Long.parseLong(s.substring(0, s.length() - 2).trim());\n-        }\n-        if (s.endsWith(\"us\")) {\n-            return MICROSECONDS.toNanos(Long.parseLong(s.substring(0, s.length() - 2).trim()));\n-        }\n-        if (s.endsWith(\"ms\")) {\n-            return MILLISECONDS.toNanos(Long.parseLong(s.substring(0, s.length() - 2).trim()));\n-        }\n-        if (s.endsWith(\"s\")) {\n-            return SECONDS.toNanos(Long.parseLong(s.substring(0, s.length() - 1).trim()));\n-        }\n-        if (s.endsWith(\"m\")) {\n-            return MINUTES.toNanos(Long.parseLong(s.substring(0, s.length() - 1).trim()));\n-        }\n-        if (s.endsWith(\"h\")) {\n-            return HOURS.toNanos(Long.parseLong(s.substring(0, s.length() - 1).trim()));\n-        }\n-        if (s.endsWith(\"d\")) {\n-            return DAYS.toNanos(Long.parseLong(s.substring(0, s.length() - 1).trim()));\n+        for (TimespanUnit unit : TimespanUnit.values()) {\n+            String text = unit.text;\n+            if (s.endsWith(text)) {\n+                long value = Long.parseLong(s.substring(0, s.length() - text.length()).strip());\n+                return unit.toNanos(value);\n+            }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/util\/ValueParser.java","additions":6,"deletions":20,"binary":false,"changes":26,"status":"modified"}]}