{"files":[{"patch":"@@ -4066,0 +4066,87 @@\n+  \/\/ Execute on round of keccak of two computations in parallel.\n+  \/\/ One of the states should be loaded into the lower halves of\n+  \/\/ the vector registers v0-v24, the other should be loaded into\n+  \/\/ the upper halves of those registers. The ld1r instruction loads\n+  \/\/ the round constant into both halves.\n+  \/\/ All vector instructions that are used operate on both register\n+  \/\/ halves in parallel.\n+  \/\/ If only a single computation is needed, one can only load the lower halves.\n+  void keccak_round(Register rscratch1) {\n+    __ eor3(v29, __ T16B, v4, v9, v14);\n+    __ eor3(v26, __ T16B, v1, v6, v11);\n+    __ eor3(v28, __ T16B, v3, v8, v13);\n+    __ eor3(v25, __ T16B, v0, v5, v10);\n+    __ eor3(v27, __ T16B, v2, v7, v12);\n+    __ eor3(v29, __ T16B, v29, v19, v24);\n+    __ eor3(v26, __ T16B, v26, v16, v21);\n+    __ eor3(v28, __ T16B, v28, v18, v23);\n+    __ eor3(v25, __ T16B, v25, v15, v20);\n+    __ eor3(v27, __ T16B, v27, v17, v22);\n+\n+    __ rax1(v30, __ T2D, v29, v26);\n+    __ rax1(v26, __ T2D, v26, v28);\n+    __ rax1(v28, __ T2D, v28, v25);\n+    __ rax1(v25, __ T2D, v25, v27);\n+    __ rax1(v27, __ T2D, v27, v29);\n+\n+    __ eor(v0, __ T16B, v0, v30);\n+    __ xar(v29, __ T2D, v1,  v25, (64 - 1));\n+    __ xar(v1,  __ T2D, v6,  v25, (64 - 44));\n+    __ xar(v6,  __ T2D, v9,  v28, (64 - 20));\n+    __ xar(v9,  __ T2D, v22, v26, (64 - 61));\n+    __ xar(v22, __ T2D, v14, v28, (64 - 39));\n+    __ xar(v14, __ T2D, v20, v30, (64 - 18));\n+    __ xar(v31, __ T2D, v2,  v26, (64 - 62));\n+    __ xar(v2,  __ T2D, v12, v26, (64 - 43));\n+    __ xar(v12, __ T2D, v13, v27, (64 - 25));\n+    __ xar(v13, __ T2D, v19, v28, (64 - 8));\n+    __ xar(v19, __ T2D, v23, v27, (64 - 56));\n+    __ xar(v23, __ T2D, v15, v30, (64 - 41));\n+    __ xar(v15, __ T2D, v4,  v28, (64 - 27));\n+    __ xar(v28, __ T2D, v24, v28, (64 - 14));\n+    __ xar(v24, __ T2D, v21, v25, (64 - 2));\n+    __ xar(v8,  __ T2D, v8,  v27, (64 - 55));\n+    __ xar(v4,  __ T2D, v16, v25, (64 - 45));\n+    __ xar(v16, __ T2D, v5,  v30, (64 - 36));\n+    __ xar(v5,  __ T2D, v3,  v27, (64 - 28));\n+    __ xar(v27, __ T2D, v18, v27, (64 - 21));\n+    __ xar(v3,  __ T2D, v17, v26, (64 - 15));\n+    __ xar(v25, __ T2D, v11, v25, (64 - 10));\n+    __ xar(v26, __ T2D, v7,  v26, (64 - 6));\n+    __ xar(v30, __ T2D, v10, v30, (64 - 3));\n+\n+    __ bcax(v20, __ T16B, v31, v22, v8);\n+    __ bcax(v21, __ T16B, v8,  v23, v22);\n+    __ bcax(v22, __ T16B, v22, v24, v23);\n+    __ bcax(v23, __ T16B, v23, v31, v24);\n+    __ bcax(v24, __ T16B, v24, v8,  v31);\n+\n+    __ ld1r(v31, __ T2D, __ post(rscratch1, 8));\n+\n+    __ bcax(v17, __ T16B, v25, v19, v3);\n+    __ bcax(v18, __ T16B, v3,  v15, v19);\n+    __ bcax(v19, __ T16B, v19, v16, v15);\n+    __ bcax(v15, __ T16B, v15, v25, v16);\n+    __ bcax(v16, __ T16B, v16, v3,  v25);\n+\n+    __ bcax(v10, __ T16B, v29, v12, v26);\n+    __ bcax(v11, __ T16B, v26, v13, v12);\n+    __ bcax(v12, __ T16B, v12, v14, v13);\n+    __ bcax(v13, __ T16B, v13, v29, v14);\n+    __ bcax(v14, __ T16B, v14, v26, v29);\n+\n+    __ bcax(v7, __ T16B, v30, v9,  v4);\n+    __ bcax(v8, __ T16B, v4,  v5,  v9);\n+    __ bcax(v9, __ T16B, v9,  v6,  v5);\n+    __ bcax(v5, __ T16B, v5,  v30, v6);\n+    __ bcax(v6, __ T16B, v6,  v4,  v30);\n+\n+    __ bcax(v3, __ T16B, v27, v0,  v28);\n+    __ bcax(v4, __ T16B, v28, v1,  v0);\n+    __ bcax(v0, __ T16B, v0,  v2,  v1);\n+    __ bcax(v1, __ T16B, v1,  v27, v2);\n+    __ bcax(v2, __ T16B, v2,  v28, v27);\n+\n+    __ eor(v0, __ T16B, v0, v31);\n+  }\n+\n@@ -4199,76 +4286,1 @@\n-    __ eor3(v29, __ T16B, v4, v9, v14);\n-    __ eor3(v26, __ T16B, v1, v6, v11);\n-    __ eor3(v28, __ T16B, v3, v8, v13);\n-    __ eor3(v25, __ T16B, v0, v5, v10);\n-    __ eor3(v27, __ T16B, v2, v7, v12);\n-    __ eor3(v29, __ T16B, v29, v19, v24);\n-    __ eor3(v26, __ T16B, v26, v16, v21);\n-    __ eor3(v28, __ T16B, v28, v18, v23);\n-    __ eor3(v25, __ T16B, v25, v15, v20);\n-    __ eor3(v27, __ T16B, v27, v17, v22);\n-\n-    __ rax1(v30, __ T2D, v29, v26);\n-    __ rax1(v26, __ T2D, v26, v28);\n-    __ rax1(v28, __ T2D, v28, v25);\n-    __ rax1(v25, __ T2D, v25, v27);\n-    __ rax1(v27, __ T2D, v27, v29);\n-\n-    __ eor(v0, __ T16B, v0, v30);\n-    __ xar(v29, __ T2D, v1,  v25, (64 - 1));\n-    __ xar(v1,  __ T2D, v6,  v25, (64 - 44));\n-    __ xar(v6,  __ T2D, v9,  v28, (64 - 20));\n-    __ xar(v9,  __ T2D, v22, v26, (64 - 61));\n-    __ xar(v22, __ T2D, v14, v28, (64 - 39));\n-    __ xar(v14, __ T2D, v20, v30, (64 - 18));\n-    __ xar(v31, __ T2D, v2,  v26, (64 - 62));\n-    __ xar(v2,  __ T2D, v12, v26, (64 - 43));\n-    __ xar(v12, __ T2D, v13, v27, (64 - 25));\n-    __ xar(v13, __ T2D, v19, v28, (64 - 8));\n-    __ xar(v19, __ T2D, v23, v27, (64 - 56));\n-    __ xar(v23, __ T2D, v15, v30, (64 - 41));\n-    __ xar(v15, __ T2D, v4,  v28, (64 - 27));\n-    __ xar(v28, __ T2D, v24, v28, (64 - 14));\n-    __ xar(v24, __ T2D, v21, v25, (64 - 2));\n-    __ xar(v8,  __ T2D, v8,  v27, (64 - 55));\n-    __ xar(v4,  __ T2D, v16, v25, (64 - 45));\n-    __ xar(v16, __ T2D, v5,  v30, (64 - 36));\n-    __ xar(v5,  __ T2D, v3,  v27, (64 - 28));\n-    __ xar(v27, __ T2D, v18, v27, (64 - 21));\n-    __ xar(v3,  __ T2D, v17, v26, (64 - 15));\n-    __ xar(v25, __ T2D, v11, v25, (64 - 10));\n-    __ xar(v26, __ T2D, v7,  v26, (64 - 6));\n-    __ xar(v30, __ T2D, v10, v30, (64 - 3));\n-\n-    __ bcax(v20, __ T16B, v31, v22, v8);\n-    __ bcax(v21, __ T16B, v8,  v23, v22);\n-    __ bcax(v22, __ T16B, v22, v24, v23);\n-    __ bcax(v23, __ T16B, v23, v31, v24);\n-    __ bcax(v24, __ T16B, v24, v8,  v31);\n-\n-    __ ld1r(v31, __ T2D, __ post(rscratch1, 8));\n-\n-    __ bcax(v17, __ T16B, v25, v19, v3);\n-    __ bcax(v18, __ T16B, v3,  v15, v19);\n-    __ bcax(v19, __ T16B, v19, v16, v15);\n-    __ bcax(v15, __ T16B, v15, v25, v16);\n-    __ bcax(v16, __ T16B, v16, v3,  v25);\n-\n-    __ bcax(v10, __ T16B, v29, v12, v26);\n-    __ bcax(v11, __ T16B, v26, v13, v12);\n-    __ bcax(v12, __ T16B, v12, v14, v13);\n-    __ bcax(v13, __ T16B, v13, v29, v14);\n-    __ bcax(v14, __ T16B, v14, v26, v29);\n-\n-    __ bcax(v7, __ T16B, v30, v9,  v4);\n-    __ bcax(v8, __ T16B, v4,  v5,  v9);\n-    __ bcax(v9, __ T16B, v9,  v6,  v5);\n-    __ bcax(v5, __ T16B, v5,  v30, v6);\n-    __ bcax(v6, __ T16B, v6,  v4,  v30);\n-\n-    __ bcax(v3, __ T16B, v27, v0,  v28);\n-    __ bcax(v4, __ T16B, v28, v1,  v0);\n-    __ bcax(v0, __ T16B, v0,  v2,  v1);\n-    __ bcax(v1, __ T16B, v1,  v27, v2);\n-    __ bcax(v2, __ T16B, v2,  v28, v27);\n-\n-    __ eor(v0, __ T16B, v0, v31);\n+    keccak_round(rscratch1);\n@@ -4319,0 +4331,2 @@\n+    \/\/ Implements the double_keccak() method of the\n+    \/\/ sun.secyrity.provider.SHA3Parallel class\n@@ -4361,78 +4375,1 @@\n-\n-    __ eor3(v29, __ T16B, v4, v9, v14);\n-    __ eor3(v26, __ T16B, v1, v6, v11);\n-    __ eor3(v28, __ T16B, v3, v8, v13);\n-    __ eor3(v25, __ T16B, v0, v5, v10);\n-    __ eor3(v27, __ T16B, v2, v7, v12);\n-    __ eor3(v29, __ T16B, v29, v19, v24);\n-    __ eor3(v26, __ T16B, v26, v16, v21);\n-    __ eor3(v28, __ T16B, v28, v18, v23);\n-    __ eor3(v25, __ T16B, v25, v15, v20);\n-    __ eor3(v27, __ T16B, v27, v17, v22);\n-\n-    __ rax1(v30, __ T2D, v29, v26);\n-    __ rax1(v26, __ T2D, v26, v28);\n-    __ rax1(v28, __ T2D, v28, v25);\n-    __ rax1(v25, __ T2D, v25, v27);\n-    __ rax1(v27, __ T2D, v27, v29);\n-\n-    __ eor(v0, __ T16B, v0, v30);\n-    __ xar(v29, __ T2D, v1,  v25, (64 - 1));\n-    __ xar(v1,  __ T2D, v6,  v25, (64 - 44));\n-    __ xar(v6,  __ T2D, v9,  v28, (64 - 20));\n-    __ xar(v9,  __ T2D, v22, v26, (64 - 61));\n-    __ xar(v22, __ T2D, v14, v28, (64 - 39));\n-    __ xar(v14, __ T2D, v20, v30, (64 - 18));\n-    __ xar(v31, __ T2D, v2,  v26, (64 - 62));\n-    __ xar(v2,  __ T2D, v12, v26, (64 - 43));\n-    __ xar(v12, __ T2D, v13, v27, (64 - 25));\n-    __ xar(v13, __ T2D, v19, v28, (64 - 8));\n-    __ xar(v19, __ T2D, v23, v27, (64 - 56));\n-    __ xar(v23, __ T2D, v15, v30, (64 - 41));\n-    __ xar(v15, __ T2D, v4,  v28, (64 - 27));\n-    __ xar(v28, __ T2D, v24, v28, (64 - 14));\n-    __ xar(v24, __ T2D, v21, v25, (64 - 2));\n-    __ xar(v8,  __ T2D, v8,  v27, (64 - 55));\n-    __ xar(v4,  __ T2D, v16, v25, (64 - 45));\n-    __ xar(v16, __ T2D, v5,  v30, (64 - 36));\n-    __ xar(v5,  __ T2D, v3,  v27, (64 - 28));\n-    __ xar(v27, __ T2D, v18, v27, (64 - 21));\n-    __ xar(v3,  __ T2D, v17, v26, (64 - 15));\n-    __ xar(v25, __ T2D, v11, v25, (64 - 10));\n-    __ xar(v26, __ T2D, v7,  v26, (64 - 6));\n-    __ xar(v30, __ T2D, v10, v30, (64 - 3));\n-\n-    __ bcax(v20, __ T16B, v31, v22, v8);\n-    __ bcax(v21, __ T16B, v8,  v23, v22);\n-    __ bcax(v22, __ T16B, v22, v24, v23);\n-    __ bcax(v23, __ T16B, v23, v31, v24);\n-    __ bcax(v24, __ T16B, v24, v8,  v31);\n-\n-    __ ld1r(v31, __ T2D, __ post(rscratch1, 8));\n-\n-    __ bcax(v17, __ T16B, v25, v19, v3);\n-    __ bcax(v18, __ T16B, v3,  v15, v19);\n-    __ bcax(v19, __ T16B, v19, v16, v15);\n-    __ bcax(v15, __ T16B, v15, v25, v16);\n-    __ bcax(v16, __ T16B, v16, v3,  v25);\n-\n-    __ bcax(v10, __ T16B, v29, v12, v26);\n-    __ bcax(v11, __ T16B, v26, v13, v12);\n-    __ bcax(v12, __ T16B, v12, v14, v13);\n-    __ bcax(v13, __ T16B, v13, v29, v14);\n-    __ bcax(v14, __ T16B, v14, v26, v29);\n-\n-    __ bcax(v7, __ T16B, v30, v9,  v4);\n-    __ bcax(v8, __ T16B, v4,  v5,  v9);\n-    __ bcax(v9, __ T16B, v9,  v6,  v5);\n-    __ bcax(v5, __ T16B, v5,  v30, v6);\n-    __ bcax(v6, __ T16B, v6,  v4,  v30);\n-\n-    __ bcax(v3, __ T16B, v27, v0,  v28);\n-    __ bcax(v4, __ T16B, v28, v1,  v0);\n-    __ bcax(v0, __ T16B, v0,  v2,  v1);\n-    __ bcax(v1, __ T16B, v1,  v27, v2);\n-    __ bcax(v2, __ T16B, v2,  v28, v27);\n-\n-    __ eor(v0, __ T16B, v0, v31);\n-\n+    keccak_round(rscratch1);\n@@ -4456,0 +4393,1 @@\n+    \/\/ restore callee-saved vector registers\n@@ -4636,9 +4574,36 @@\n-  void dilithium_montmul32() {\n-    __ sqdmulh(v24, __ T4S, v0, v16);\n-    __ mulv(v16, __ T4S, v0, v16);\n-    __ sqdmulh(v25, __ T4S, v1, v17);\n-    __ mulv(v17, __ T4S, v1, v17);\n-    __ sqdmulh(v26, __ T4S, v2, v18);\n-    __ mulv(v18, __ T4S, v2, v18);\n-    __ sqdmulh(v27, __ T4S, v3, v19);\n-    __ mulv(v19, __ T4S, v3, v19);\n+  void dilithium_load4zetas(int o0, Register zetas) {\n+    __ ldpq(as_FloatRegister(o0), as_FloatRegister(o0 + 1), __ post (zetas, 32));\n+    __ ldpq(as_FloatRegister(o0 + 2), as_FloatRegister(o0 + 3), __ post (zetas, 32));\n+\n+  }\n+\n+  void dilithium_load8zetas(Register zetas) {\n+    dilithium_load4zetas(16, zetas);\n+    dilithium_load4zetas(20, zetas);\n+  }\n+\n+  \/\/ 2x16 32-bit Montgomery multiplications in parallel\n+  \/\/ See the montMul() method of the sun.security.provider.ML_DSA class.\n+  \/\/ Here MONT_R_BITS is 32, so the right shift by it is implicit.\n+  \/\/ The constants MONT_Q_INV_MOD_R and MONT_Q are loaded in (all 32-bit\n+  \/\/ chunks of) vector registers v30 and v31, resp.\n+  \/\/ The inputs are in v0-v7 and v16-v23 and the results go to v16-v23,\n+  \/\/ four 32-bit values in each register\n+  void dilithium_montmul32(bool by_constant) {\n+    FloatRegister vr0 = by_constant ? v29 : v0;\n+    FloatRegister vr1 = by_constant ? v29 : v1;\n+    FloatRegister vr2 = by_constant ? v29 : v2;\n+    FloatRegister vr3 = by_constant ? v29 : v3;\n+    FloatRegister vr4 = by_constant ? v29 : v4;\n+    FloatRegister vr5 = by_constant ? v29 : v5;\n+    FloatRegister vr6 = by_constant ? v29 : v6;\n+    FloatRegister vr7 = by_constant ? v29 : v7;\n+\n+    __ sqdmulh(v24, __ T4S, vr0, v16);\n+    __ mulv(v16, __ T4S, vr0, v16);\n+    __ sqdmulh(v25, __ T4S, vr1, v17);\n+    __ mulv(v17, __ T4S, vr1, v17);\n+    __ sqdmulh(v26, __ T4S, vr2, v18);\n+    __ mulv(v18, __ T4S, vr2, v18);\n+    __ sqdmulh(v27, __ T4S, vr3, v19);\n+    __ mulv(v19, __ T4S, vr3, v19);\n@@ -4661,8 +4626,8 @@\n-    __ sqdmulh(v24, __ T4S, v4, v20);\n-    __ mulv(v20, __ T4S, v4, v20);\n-    __ sqdmulh(v25, __ T4S, v5, v21);\n-    __ mulv(v21, __ T4S, v5, v21);\n-    __ sqdmulh(v26, __ T4S, v6, v22);\n-    __ mulv(v22, __ T4S, v6, v22);\n-    __ sqdmulh(v27, __ T4S, v7, v23);\n-    __ mulv(v23, __ T4S, v7, v23);\n+    __ sqdmulh(v24, __ T4S, vr4, v20);\n+    __ mulv(v20, __ T4S, vr4, v20);\n+    __ sqdmulh(v25, __ T4S, vr5, v21);\n+    __ mulv(v21, __ T4S, vr5, v21);\n+    __ sqdmulh(v26, __ T4S, vr6, v22);\n+    __ mulv(v22, __ T4S, vr6, v22);\n+    __ sqdmulh(v27, __ T4S, vr7, v23);\n+    __ mulv(v23, __ T4S, vr7, v23);\n@@ -4744,7 +4709,8 @@\n-  \/\/ can use ldpq to collect the corresponding data into pairs of v registers\n-  \/\/ we collect the coefficients that need to be multiplied by the corresponding\n-  \/\/ zeta values into registers v0-v7, the zetas into registers v16-v23 then\n-  \/\/ do the (Montgomery) multiplications by zeta in parallel into v16-v23\n-  \/\/ load the coeffs corresponding to the'j+l's into v0-v7, then\n-  \/\/ do the additions into v24-v31 and the subtractions into v0-v7 and\n-  \/\/ finally save the results back to the coeffs array\n+  \/\/ can use ldpq to collect the corresponding data into pairs of vector\n+  \/\/ registers.\n+  \/\/ We collect the coefficients corresponding to the 'j+l' indexes into\n+  \/\/ the vector registers v0-v7, the zetas into the vector registers v16-v23\n+  \/\/ then we do the (Montgomery) multiplications by the zetas in parallel\n+  \/\/ into v16-v23, load the coeffs corresponding to the 'j' indexes into\n+  \/\/ v0-v7, then do the additions into v24-v31 and the subtractions into\n+  \/\/ v0-v7 and finally save the results back to the coeffs array.\n@@ -4779,5 +4745,2 @@\n-        __ ldpq(v16, v17, __ post (zetas, 32));\n-        __ ldpq(v18, v19, __ post (zetas, 32));\n-        __ ldpq(v20, v21, __ post (zetas, 32));\n-        __ ldpq(v22, v23, __ post (zetas, 32));\n-        dilithium_montmul32();\n+        dilithium_load8zetas(zetas);\n+        dilithium_montmul32(false);\n@@ -4817,1 +4780,1 @@\n-  \/\/ Implements\n+  \/\/ Implements the method\n@@ -4819,0 +4782,1 @@\n+  \/\/ of the Java class sun.security.provider\n@@ -4841,0 +4805,1 @@\n+\n@@ -4855,5 +4820,2 @@\n-      __ ldpq(v16, v17, __ post (zetas, 32));\n-      __ ldpq(v18, v19, __ post (zetas, 32));\n-      __ ldpq(v20, v21, __ post (zetas, 32));\n-      __ ldpq(v22, v23, __ post (zetas, 32));\n-      dilithium_montmul32();\n+      dilithium_load8zetas(zetas);\n+      dilithium_montmul32(false);\n@@ -4898,2 +4860,1 @@\n-      __ ldpq(v16, v17, __ post (zetas, 32));\n-      __ ldpq(v18, v19, __ post (zetas, 32));\n+      dilithium_load4zetas(16, zetas);\n@@ -4922,2 +4883,1 @@\n-      __ ldpq(v16, v17, __ post (zetas, 32));\n-      __ ldpq(v18, v19, __ post(zetas, 32));\n+      dilithium_load4zetas(16, zetas);\n@@ -4980,2 +4940,3 @@\n-  \/\/ can use ldpq to collect the corresponding data into pairs of v registers\n-  \/\/ we collect the coefficients that correspond to the 'j's into v0-v7\n+  \/\/ can use ldpq to collect the corresponding data into pairs of vector\n+  \/\/ registers\n+  \/\/ We collect the coefficients that correspond to the 'j's into v0-v7\n@@ -5028,5 +4989,2 @@\n-        __ ldpq(v16, v17, __ post (zetas, 32));\n-        __ ldpq(v18, v19, __ post (zetas, 32));\n-        __ ldpq(v20, v21, __ post (zetas, 32));\n-        __ ldpq(v22, v23, __ post (zetas, 32));\n-        dilithium_montmul32();\n+        dilithium_load8zetas(zetas);\n+        dilithium_montmul32(false);\n@@ -5057,2 +5015,3 @@\n-  \/\/ Implements\n-  \/\/ static int implDilithiumAlmostInverseNtt(int[] coeffs, int[] zetas) {}\n+  \/\/ Implements the method\n+  \/\/ static int implDilithiumAlmostInverseNtt(int[] coeffs, int[] zetas) {} of\n+  \/\/ the sun.security.provider.ML_DSA class.\n@@ -5092,2 +5051,1 @@\n-      __ ldpq(v16, v17, __ post (zetas, 32));\n-      __ ldpq(v18, v19, __ post (zetas, 32));\n+      dilithium_load4zetas(16, zetas);\n@@ -5115,2 +5073,1 @@\n-      __ ldpq(v16, v17, __ post (zetas, 32));\n-      __ ldpq(v18, v19, __ post (zetas, 32));\n+      dilithium_load4zetas(16, zetas);\n@@ -5155,4 +5112,1 @@\n-      __ ldpq(v16, v17, __ post (zetas, 32));\n-      __ ldpq(v18, v19, __ post (zetas, 32));\n-      __ ldpq(v20, v21, __ post (zetas, 32));\n-      __ ldpq(v22, v23, __ post (zetas, 32));\n+      dilithium_load8zetas(zetas);\n@@ -5160,1 +5114,1 @@\n-      dilithium_montmul32();\n+      dilithium_montmul32(false);\n@@ -5183,1 +5137,1 @@\n-  \/\/ Implements\n+  \/\/ Straightforward implementation of the method\n@@ -5185,1 +5139,2 @@\n-  \/\/              int[] result, int[] ntta, int[] nttb {}\n+  \/\/              int[] result, int[] ntta, int[] nttb {} of\n+  \/\/ the sun.security.provider.ML_DSA class.\n@@ -5225,41 +5180,2 @@\n-    dilithium_montmul32();\n-    __ sqdmulh(v24, __ T4S, v29, v16);\n-    __ mulv(v16, __ T4S, v29, v16);\n-    __ sqdmulh(v25, __ T4S, v29, v17);\n-    __ mulv(v17, __ T4S, v29, v17);\n-    __ sqdmulh(v26, __ T4S, v29, v18);\n-    __ mulv(v18, __ T4S, v29, v18);\n-    __ sqdmulh(v27, __ T4S, v29, v19);\n-    __ mulv(v19, __ T4S, v29, v19);\n-    __ mulv(v16, __ T4S, v16, v30);\n-    __ mulv(v17, __ T4S, v17, v30);\n-    __ mulv(v18, __ T4S, v18, v30);\n-    __ mulv(v19, __ T4S, v19, v30);\n-    __ sqdmulh(v16, __ T4S, v16, v31);\n-    __ sqdmulh(v17, __ T4S, v17, v31);\n-    __ sqdmulh(v18, __ T4S, v18, v31);\n-    __ sqdmulh(v19, __ T4S, v19, v31);\n-    __ shsubv(v16, __ T4S, v24, v16);\n-    __ shsubv(v17, __ T4S, v25, v17);\n-    __ shsubv(v18, __ T4S, v26, v18);\n-    __ shsubv(v19, __ T4S, v27, v19);\n-    __ sqdmulh(v24, __ T4S, v29, v20);\n-    __ mulv(v20, __ T4S, v29, v20);\n-    __ sqdmulh(v25, __ T4S, v29, v21);\n-    __ mulv(v21, __ T4S, v29, v21);\n-    __ sqdmulh(v26, __ T4S, v29, v22);\n-    __ mulv(v22, __ T4S, v29, v22);\n-    __ sqdmulh(v27, __ T4S, v29, v23);\n-    __ mulv(v23, __ T4S, v29, v23);\n-    __ mulv(v20, __ T4S, v20, v30);\n-    __ mulv(v21, __ T4S, v21, v30);\n-    __ mulv(v22, __ T4S, v22, v30);\n-    __ mulv(v23, __ T4S, v23, v30);\n-    __ sqdmulh(v20, __ T4S, v20, v31);\n-    __ sqdmulh(v21, __ T4S, v21, v31);\n-    __ sqdmulh(v22, __ T4S, v22, v31);\n-    __ sqdmulh(v23, __ T4S, v23, v31);\n-    __ shsubv(v20, __ T4S, v24, v20);\n-    __ shsubv(v21, __ T4S, v25, v21);\n-    __ shsubv(v22, __ T4S, v26, v22);\n-    __ shsubv(v23, __ T4S, v27, v23);\n+    dilithium_montmul32(false);\n+    dilithium_montmul32(true);\n@@ -5284,1 +5200,1 @@\n-  \/\/ Implements\n+  \/\/ A straightforward implementation of the method\n@@ -5286,0 +5202,1 @@\n+  \/\/ of the sun.security.provider.MLDSA class\n@@ -5309,1 +5226,1 @@\n-\n+    __ ldpq(v30, v31, Address(dilithiumConsts, 0));\n@@ -5316,49 +5233,9 @@\n-    __ ldpq(v30, v31, Address(dilithiumConsts, 0));\n-    __ ldpq(v0, v1, __ post(coeffs, 32));\n-    __ ldpq(v2, v3, __ post(coeffs, 32));\n-    __ ldpq(v4, v5, __ post(coeffs, 32));\n-    __ ldpq(v6, v7, __ post(coeffs, 32));\n-    __ sqdmulh(v16, __ T4S, v0, v29);\n-    __ mulv(v0, __ T4S, v0, v29);\n-    __ sqdmulh(v17, __ T4S, v1, v29);\n-    __ mulv(v1, __ T4S, v1, v29);\n-    __ sqdmulh(v18, __ T4S, v2, v29);\n-    __ mulv(v2, __ T4S, v2, v29);\n-    __ sqdmulh(v19, __ T4S, v3, v29);\n-    __ mulv(v3, __ T4S, v3, v29);\n-    __ sqdmulh(v20, __ T4S, v4, v29);\n-    __ mulv(v4, __ T4S, v4, v29);\n-    __ sqdmulh(v21, __ T4S, v5, v29);\n-    __ mulv(v5, __ T4S, v5, v29);\n-    __ sqdmulh(v22, __ T4S, v6, v29);\n-    __ mulv(v6, __ T4S, v6, v29);\n-    __ sqdmulh(v23, __ T4S, v7, v29);\n-    __ mulv(v7, __ T4S, v7, v29);\n-    __ mulv(v0, __ T4S, v0, v30);\n-    __ mulv(v1, __ T4S, v1, v30);\n-    __ mulv(v2, __ T4S, v2, v30);\n-    __ mulv(v3, __ T4S, v3, v30);\n-    __ mulv(v4, __ T4S, v4, v30);\n-    __ mulv(v5, __ T4S, v5, v30);\n-    __ mulv(v6, __ T4S, v6, v30);\n-    __ mulv(v7, __ T4S, v7, v30);\n-    __ sqdmulh(v0, __ T4S, v0, v31);\n-    __ sqdmulh(v1, __ T4S, v1, v31);\n-    __ sqdmulh(v2, __ T4S, v2, v31);\n-    __ sqdmulh(v3, __ T4S, v3, v31);\n-    __ sqdmulh(v4, __ T4S, v4, v31);\n-    __ sqdmulh(v5, __ T4S, v5, v31);\n-    __ sqdmulh(v6, __ T4S, v6, v31);\n-    __ sqdmulh(v7, __ T4S, v7, v31);\n-    __ shsubv(v0, __ T4S, v16, v0);\n-    __ shsubv(v1, __ T4S, v17, v1);\n-    __ shsubv(v2, __ T4S, v18, v2);\n-    __ shsubv(v3, __ T4S, v19, v3);\n-    __ shsubv(v4, __ T4S, v20, v4);\n-    __ shsubv(v5, __ T4S, v21, v5);\n-    __ shsubv(v6, __ T4S, v22, v6);\n-    __ shsubv(v7, __ T4S, v23, v7);\n-    __ stpq(v0, v1, __ post(result, 32));\n-    __ stpq(v2, v3, __ post(result, 32));\n-    __ stpq(v4, v5, __ post(result, 32));\n-    __ stpq(v6, v7, __ post(result, 32));\n+    __ ldpq(v16, v17, __ post(coeffs, 32));\n+    __ ldpq(v18, v19, __ post(coeffs, 32));\n+    __ ldpq(v20, v21, __ post(coeffs, 32));\n+    __ ldpq(v22, v23, __ post(coeffs, 32));\n+    dilithium_montmul32(true);\n+    __ stpq(v16, v17, __ post(result, 32));\n+    __ stpq(v18, v19, __ post(result, 32));\n+    __ stpq(v20, v21, __ post(result, 32));\n+    __ stpq(v22, v23, __ post(result, 32));\n@@ -5378,1 +5255,1 @@\n-  \/\/ Implements\n+  \/\/ Implements the method\n@@ -5380,0 +5257,1 @@\n+  \/\/ of the sun.security.provider.ML_DSA class\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":184,"deletions":306,"binary":false,"changes":490,"status":"modified"},{"patch":"@@ -1300,1 +1300,1 @@\n-        int[][] lowPart = new int[mlDsa_k][ML_DSA_N];\n+        int[][] lowPart = r;\n@@ -1553,0 +1553,1 @@\n+    \/\/ see e.g. Algorithm 3 in https:\/\/eprint.iacr.org\/2018\/039.pdf\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/ML_DSA.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,0 +38,14 @@\n+\/*\n+ * This class is for making it possible that NRPAR (= 2) (rather restricted)\n+ * SHAKE computations execute in parallel.\n+ * The restrictions are:\n+ *  1. The messages processed should be such that the absorb phase should\n+ * execute a single keccak() call and the byte arrays passed to the constructor\n+ * (or reset() method) of this class should be the message padded with the\n+ * appropriate padding described in\n+ * https:\/\/nvlpubs.nist.gov\/nistpubs\/fips\/nist.fips.202.pdf.\n+ *  2. The only available way for extracting data is the squeeze() method\n+ * that extracts exactly 1 block of data of each computation, delivering it\n+ * in the arrays that were passed to the class in the constructor (or the\n+ * reset() call).\n+ *\/\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SHA3Parallel.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"}]}