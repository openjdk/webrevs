{"files":[{"patch":"@@ -228,1 +228,1 @@\n-        private final static TestExecutionRecorder staticRecorder = new TestExecutionRecorder(ParameterizedInstanceTest.class);\n+        private static final TestExecutionRecorder staticRecorder = new TestExecutionRecorder(ParameterizedInstanceTest.class);\n","filename":"test\/jdk\/tools\/jpackage\/helpers-test\/jdk\/jpackage\/test\/AnnotationsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-import static jdk.jpackage.internal.util.function.ThrowingRunnable.toRunnable;\n-\n@@ -36,0 +34,1 @@\n+import java.util.ArrayList;\n@@ -37,0 +36,1 @@\n+import java.util.stream.Stream;\n@@ -38,2 +38,2 @@\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.io.TempDir;\n+import org.junit.jupiter.api.DynamicTest;\n+import org.junit.jupiter.api.TestFactory;\n@@ -43,1 +43,1 @@\n-    JUnitAdapter() {\n+    static {\n@@ -50,7 +50,6 @@\n-    @Test\n-    void runJPackageTests(@TempDir Path workDir) throws Throwable {\n-        if (!getClass().equals(JUnitAdapter.class)) {\n-            Main.main(TestBuilder.build().workDirRoot(workDir), new String [] {\n-                    \"--jpt-before-run=jdk.jpackage.test.JPackageCommand.useToolProviderByDefault\",\n-                    \"--jpt-run=\" + getClass().getName()\n-                    });\n+    public static Stream<DynamicTest> createJPackageTests(ClassLoader testClassLoader, String... args) throws Throwable {\n+        final List<TestInstance> tests = new ArrayList<>();\n+        try (final var testBuilder = TestBuilder.build().workDirRoot(Path.of(\"\")).testClassLoader(testClassLoader).testConsumer(tests::add).create()) {\n+            for (final var arg : args) {\n+                testBuilder.processCmdLineArg(arg);\n+            }\n@@ -58,0 +57,10 @@\n+        return tests.stream().map(test -> {\n+            return DynamicTest.dynamicTest(test.fullName(), () -> {\n+                TKit.runAdhocTest(test);\n+            });\n+        });\n+    }\n+\n+    @TestFactory\n+    Stream<DynamicTest> createJPackageTests() throws Throwable {\n+        return createJPackageTests(getClass().getClassLoader(), \"--jpt-run=\" + getClass().getName());\n","filename":"test\/jdk\/tools\/jpackage\/helpers-test\/jdk\/jpackage\/test\/JUnitAdapter.java","additions":21,"deletions":12,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import java.util.stream.Stream;\n@@ -145,1 +146,12 @@\n-                    Desktop.getDesktop().open(testFile.toFile());\n+                    if (!HelloApp.CLEAR_JAVA_ENV_VARS) {\n+                        Desktop.getDesktop().open(testFile.toFile());\n+                    } else {\n+                        final var jsScript = TKit.createTempFile(Path.of(\"fa-scripts\", testFile.getFileName().toString() + \".jsh\"));\n+                        TKit.createTextFile(jsScript, List.of(\n+                                \"import java.awt.Desktop\",\n+                                \"import java.io.File\",\n+                                String.format(\"Desktop.getDesktop().open(new File(\\\"%s\\\"))\", testFile.toString().replace('\\\\', '\/')),\n+                                \"\/exit\"));\n+                        final var exec = Executor.of(JavaTool.JSHELL.getPath().toString(), jsScript.toString());\n+                        HelloApp.configureEnvironment(exec).dumpOutput().execute();\n+                    }\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/FileAssociations.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.util.Set;\n@@ -517,1 +518,1 @@\n-    private static Executor configureEnvironment(Executor executor) {\n+    static Executor configureEnvironment(Executor executor) {\n@@ -519,2 +520,1 @@\n-            executor.removeEnvVar(\"JAVA_TOOL_OPTIONS\");\n-            executor.removeEnvVar(\"_JAVA_OPTIONS\");\n+            JAVA_ENV_VARS.forEach(executor::removeEnvVar);\n@@ -525,0 +525,8 @@\n+    private static boolean javaEnvVariablesContainsModulePath() {\n+        return JAVA_ENV_VARS.stream().map(System::getenv).filter(Objects::nonNull).anyMatch(HelloApp::containsModulePath);\n+    }\n+\n+    private static boolean containsModulePath(String value) {\n+        return value.contains(\"--module-path\");\n+    }\n+\n@@ -527,0 +535,2 @@\n+    private static final Set<String> JAVA_ENV_VARS = Set.of(\"JAVA_TOOL_OPTIONS\", \"_JAVA_OPTIONS\");\n+\n@@ -535,2 +545,7 @@\n-    private static final boolean CLEAR_JAVA_ENV_VARS = Optional.ofNullable(\n-            TKit.getConfigProperty(\"clear-app-launcher-java-env-vars\")).map(Boolean::parseBoolean).orElse(false);\n+    \/\/\n+    \/\/ Runtime in the app image normally doesn't have .jmod files. Because of this `--module-path`\n+    \/\/ option will cause failure at app launcher startup.\n+    \/\/ Java environment variables containing this option should be removed from the\n+    \/\/ environment in which app launchers are started.\n+    \/\/\n+    static final boolean CLEAR_JAVA_ENV_VARS = javaEnvVariablesContainsModulePath();\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/HelloApp.java","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+import java.util.spi.ToolProvider;\n@@ -667,0 +668,4 @@\n+    public static void useToolProviderByDefault(ToolProvider jpackageToolProvider) {\n+        defaultToolProvider = Optional.of(jpackageToolProvider);\n+    }\n+\n@@ -668,1 +673,1 @@\n-        defaultWithToolProvider = true;\n+        useToolProviderByDefault(JavaTool.JPACKAGE.asToolProvider());\n@@ -672,1 +677,1 @@\n-        defaultWithToolProvider = false;\n+        defaultToolProvider = Optional.empty();\n@@ -781,2 +786,1 @@\n-        return Optional.ofNullable(withToolProvider).orElse(\n-                defaultWithToolProvider);\n+        return Optional.ofNullable(withToolProvider).orElseGet(defaultToolProvider::isPresent);\n@@ -803,1 +807,1 @@\n-            exec.setToolProvider(JavaTool.JPACKAGE);\n+            exec.setToolProvider(defaultToolProvider.orElseGet(JavaTool.JPACKAGE::asToolProvider));\n@@ -976,1 +980,1 @@\n-        private final static class Builder {\n+        private static final class Builder {\n@@ -1475,1 +1479,1 @@\n-    private static boolean defaultWithToolProvider;\n+    private static Optional<ToolProvider> defaultToolProvider = Optional.empty();\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-    JAVA, JAVAC, JPACKAGE, JAR, JLINK, JMOD;\n+    JAVA, JAVAC, JPACKAGE, JAR, JLINK, JMOD, JSHELL;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JavaTool.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1040,1 +1040,1 @@\n-    public final static class ResolvedKeychain {\n+    public static final class ResolvedKeychain {\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacSign.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-        final private String value;\n+        private final String value;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacSignVerify.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-    static public enum Action {\n+    public static enum Action {\n@@ -117,1 +117,1 @@\n-        public final static Action[] CREATE_AND_UNPACK = new Action[] {\n+        public static final Action[] CREATE_AND_UNPACK = new Action[] {\n@@ -146,1 +146,1 @@\n-    private final static List<Action> DEFAULT_ACTIONS;\n+    private static final List<Action> DEFAULT_ACTIONS;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/RunnablePackageTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import static jdk.jpackage.internal.util.function.ThrowingSupplier.toSupplier;\n@@ -129,0 +130,6 @@\n+    enum RunTestMode {\n+        FAIL_FAST;\n+\n+        static final Set<RunTestMode> DEFAULTS = Set.of();\n+    }\n+\n@@ -130,0 +137,6 @@\n+        runTests(tests, RunTestMode.DEFAULTS);\n+    }\n+\n+    static void runTests(List<TestInstance> tests, Set<RunTestMode> modes) {\n+        Objects.requireNonNull(tests);\n+        Objects.requireNonNull(modes);\n@@ -139,1 +152,5 @@\n-                    ignoreExceptions(test).run();\n+                    if (modes.contains(RunTestMode.FAIL_FAST)) {\n+                        ThrowingRunnable.toRunnable(test::run).run();\n+                    } else {\n+                        ignoreExceptions(test).run();\n+                    }\n@@ -150,0 +167,29 @@\n+    static <T> T runAdhocTest(ThrowingSupplier<T> action) {\n+        final List<T> box = new ArrayList<>();\n+        runAdhocTest(() -> {\n+            box.add(action.get());\n+        });\n+        return box.getFirst();\n+    }\n+\n+    static void runAdhocTest(ThrowingRunnable action) {\n+        Objects.requireNonNull(action);\n+\n+        final Path workDir = toSupplier(() -> Files.createTempDirectory(\"jdk.jpackage-test\")).get();\n+\n+        final TestInstance test;\n+        if (action instanceof TestInstance ti) {\n+            test = new TestInstance(ti, workDir);\n+        } else {\n+            test = new TestInstance(() -> {\n+                try {\n+                    action.run();\n+                } finally {\n+                    TKit.deleteDirectoryRecursive(workDir);\n+                }\n+            }, workDir);\n+        }\n+\n+        runTests(List.of(test), Set.of(RunTestMode.FAIL_FAST));\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TKit.java","additions":47,"deletions":1,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    final static class Builder {\n+    static final class Builder {\n@@ -77,0 +77,5 @@\n+        Builder testClassLoader(ClassLoader v) {\n+            testClassLoader = v;\n+            return this;\n+        }\n+\n@@ -78,1 +83,1 @@\n-            return new TestBuilder(testConsumer, workDirRoot);\n+            return new TestBuilder(testConsumer, workDirRoot, testClassLoader);\n@@ -83,0 +88,1 @@\n+        private ClassLoader testClassLoader = TestBuilder.class.getClassLoader();\n@@ -85,1 +91,1 @@\n-    private TestBuilder(Consumer<TestInstance> testConsumer, Path workDirRoot) {\n+    private TestBuilder(Consumer<TestInstance> testConsumer, Path workDirRoot, ClassLoader testClassLoader) {\n@@ -88,0 +94,1 @@\n+        this.testClassLoader = Objects.requireNonNull(testClassLoader);\n@@ -236,1 +243,1 @@\n-    private static Class<?> probeClass(String name) {\n+    private static Class<?> probeClass(String name, ClassLoader classLoader) {\n@@ -238,1 +245,1 @@\n-            return Class.forName(name);\n+            return Class.forName(name, true, classLoader);\n@@ -257,1 +264,1 @@\n-            Class<?> testSet = probeClass(token);\n+            Class<?> testSet = probeClass(token, testClassLoader);\n@@ -300,1 +307,1 @@\n-                    fromQualifiedMethodName(qualifiedMethodName));\n+                    fromQualifiedMethodName(qualifiedMethodName), testClassLoader);\n@@ -374,0 +381,1 @@\n+    private final ClassLoader testClassLoader;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TestBuilder.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -51,2 +51,10 @@\n-    static class TestDesc {\n-        private TestDesc() {\n+    static final class TestDesc {\n+        private TestDesc(Class<?> clazz, String functionName, String functionArgs, String instanceArgs) {\n+            this.clazz = Objects.requireNonNull(clazz);\n+            this.functionName = functionName;\n+            this.functionArgs = functionArgs;\n+            this.instanceArgs = instanceArgs;\n+        }\n+\n+        private TestDesc(Class<?> clazz) {\n+            this(clazz, null, null, null);\n@@ -96,1 +104,0 @@\n-                TestDesc desc = new TestDesc();\n@@ -98,1 +105,1 @@\n-                    desc.clazz = enclosingMainMethodClass();\n+                    return new TestDesc(enclosingMainMethodClass());\n@@ -100,4 +107,1 @@\n-                    desc.clazz = method.getDeclaringClass();\n-                    desc.functionName = method.getName();\n-                    desc.functionArgs = formatArgs(methodArgs);\n-                    desc.instanceArgs = formatArgs(ctorArgs);\n+                    return new TestDesc(method.getDeclaringClass(), method.getName(), formatArgs(methodArgs), formatArgs(ctorArgs));\n@@ -105,1 +109,0 @@\n-                return desc;\n@@ -143,21 +146,4 @@\n-        static TestDesc create(Method m, Object... args) {\n-            TestDesc desc = new TestDesc();\n-            desc.clazz = m.getDeclaringClass();\n-            desc.functionName = m.getName();\n-            if (args.length != 0) {\n-                desc.functionArgs = Stream.of(args).map(v -> {\n-                    if (v.getClass().isArray()) {\n-                        return String.format(\"%s(length=%d)\",\n-                                Arrays.deepToString((Object[]) v),\n-                                Array.getLength(v));\n-                    }\n-                    return String.format(\"%s\", v);\n-                }).collect(Collectors.joining(\", \"));\n-            }\n-            return desc;\n-        }\n-\n-        private Class<?> clazz;\n-        private String functionName;\n-        private String functionArgs;\n-        private String instanceArgs;\n+        private final Class<?> clazz;\n+        private final String functionName;\n+        private final String functionArgs;\n+        private final String instanceArgs;\n@@ -189,0 +175,11 @@\n+    TestInstance(TestInstance other, Path workDirRoot) {\n+        assertCount = 0;\n+        this.testConstructor = other.testConstructor;\n+        this.testBody = other.testBody;\n+        this.beforeActions = other.beforeActions;\n+        this.afterActions = other.afterActions;\n+        this.testDesc = other.testDesc;\n+        this.dryRun = other.dryRun;\n+        this.workDir = workDirRoot.resolve(createWorkDirPath(other.testDesc));\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TestInstance.java","additions":27,"deletions":30,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -65,2 +65,2 @@\n-        List<Method> lookup() throws ClassNotFoundException {\n-            final Class<?> methodClass = Class.forName(className);\n+        List<Method> lookup(ClassLoader classLoader) throws ClassNotFoundException {\n+            final Class<?> methodClass = Class.forName(className, true, classLoader);\n@@ -87,1 +87,1 @@\n-    List<Method> findNullaryLikeMethods(MethodQuery query) throws NoSuchMethodException {\n+    List<Method> findNullaryLikeMethods(MethodQuery query, ClassLoader classLoader) throws NoSuchMethodException {\n@@ -91,1 +91,1 @@\n-            methods = query.lookup();\n+            methods = query.lookup(classLoader);\n@@ -276,2 +276,4 @@\n-            final var parameterSupplierCandidates = findNullaryLikeMethods(methodQuery);\n-            final Function<String, Class<?>> classForName = toFunction(Class::forName);\n+            final var parameterSupplierCandidates = findNullaryLikeMethods(methodQuery, execClass.getClassLoader());\n+            final Function<String, Class<?>> classForName = toFunction(name -> {\n+                return Class.forName(name, true, execClass.getClassLoader());\n+            });\n@@ -287,1 +289,1 @@\n-            supplierMethod = findNullaryLikeMethods(methodQuery)\n+            supplierMethod = findNullaryLikeMethods(methodQuery, execClass.getClassLoader())\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TestMethodSupplier.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"}]}