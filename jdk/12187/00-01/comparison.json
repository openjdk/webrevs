{"files":[{"patch":"@@ -219,1 +219,1 @@\n-  \/\/ Variant of TraceTime(null, &_t_accumulator, CITime);\n+  \/\/ Variant of TraceTime(nullptr, &_t_accumulator, CITime);\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-  ConPNode( const TypePtr *t ) : ConNode(t) {}\n+  ConPNode(const TypePtr *t) : ConNode(t) {}\n@@ -78,4 +78,5 @@\n-    if (con == nullptr)\n-      return new ConPNode( TypePtr::NULL_PTR ) ;\n-    else\n-      return new ConPNode( TypeRawPtr::make(con) );\n+    if (con == nullptr) {\n+      return new ConPNode(TypePtr::NULL_PTR);\n+    } else {\n+      return new ConPNode(TypeRawPtr::make(con));\n+    }\n","filename":"src\/hotspot\/share\/opto\/connode.hpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-  if( tp != nullptr ) {\n+  if(tp != nullptr) {\n","filename":"src\/hotspot\/share\/opto\/convertnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -904,1 +904,1 @@\n-  assert(stopped(), \"call set_map(null) first\");\n+  assert(stopped(), \"call set_map(nullptr) first\");\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  \/\/ Add ConP(#null) and ConN(#null) nodes.\n+  \/\/ Add ConP and ConN null oop nodes\n@@ -98,1 +98,1 @@\n-  \/\/ Add ConP#null and ConN#null nodes before ConnectionGraph construction\n+  \/\/ Add ConP and ConN null oop nodes before ConnectionGraph construction\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3064,1 +3064,1 @@\n-  \/\/ type == null if profiling tells us this object is always null\n+  \/\/ type is null if profiling tells us this object is always null\n@@ -3517,1 +3517,1 @@\n-\/\/ and return (Node*)null.  Otherwise, load the non-constant\n+\/\/ and return null.  Otherwise, load the non-constant\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5141,2 +5141,2 @@\n-  \/\/ if saved_jvms_before_guards != nullptr (then alloc != nullptr) then we can handle guards and a tightly coupled allocation\n-  \/\/ if saved_jvms_before_guards == nullptr and alloc != nullptr, we can't emit any guards\n+  \/\/ if saved_jvms_before_guards is not null (then alloc is not null) then we can handle guards and a tightly coupled allocation\n+  \/\/ if saved_jvms_before_guards is null and alloc is not null, we can't emit any guards\n@@ -5164,1 +5164,1 @@\n-    \/\/ if saved_jvms_before_guards == nullptr and alloc != nullptr, we don't emit any\n+    \/\/ if saved_jvms_before_guards is null and alloc is not null, we don't emit any\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -349,1 +349,1 @@\n-  \/\/ are set to NodeSentinel. If (MachOper *) null is returned, base and\n+  \/\/ are set to NodeSentinel. If null is returned, base and\n","filename":"src\/hotspot\/share\/opto\/machnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2223,1 +2223,1 @@\n-      if( input != nullptr ) {                    \/\/ Ignore nulls\n+      if( input != nullptr ) {                 \/\/ Ignore nulls\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1777,1 +1777,1 @@\n-  \/\/      return null;\n+  \/\/      return nullptr;\n@@ -1782,1 +1782,1 @@\n-  \/\/    if( !phase->allow_progress() ) return null;\n+  \/\/    if( !phase->allow_progress() ) return nullptr;\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4652,1 +4652,1 @@\n-    print_depth(); tty->print(\"  \\\\ %d SWPointer::offset_plus_k: _invar != nullptr: \", _invar->_idx); _invar->dump();\n+    print_depth(); tty->print(\"  \\\\ %d SWPointer::offset_plus_k: _invar is not null: \", _invar->_idx); _invar->dump();\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2687,1 +2687,1 @@\n-    \/\/ type->speculative() == null means that speculation is no better\n+    \/\/ type->speculative() is null means that speculation is no better\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}