{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,0 @@\n-import java.util.Vector;\n@@ -215,4 +214,3 @@\n-        \/**\n-         * if either superscript or subscript is\n-         * is set, we need to reduce the font size\n-         * by 2.\n+        \/*\n+         * If either superscript or subscript is set,\n+         * we need to reduce the font size by 2.\n@@ -766,1 +764,0 @@\n-        unusedSets = f.get(\"unusedSets\", 0);\n@@ -788,8 +785,0 @@\n-    \/**\n-     * Number of immutable sets that are not currently\n-     * being used.  This helps indicate when the sets need\n-     * to be cleaned out of the hashtable they are stored\n-     * in.\n-     *\/\n-    private int unusedSets;\n-\n@@ -1058,1 +1047,1 @@\n-    static class KeyEnumeration implements Enumeration<Object> {\n+    static final class KeyEnumeration implements Enumeration<Object> {\n@@ -1096,139 +1085,0 @@\n-    \/**\n-     * Sorts the key strings so that they can be very quickly compared\n-     * in the attribute set searches.\n-     *\/\n-    static class KeyBuilder {\n-\n-        public void initialize(AttributeSet a) {\n-            if (a instanceof SmallAttributeSet) {\n-                initialize(((SmallAttributeSet)a).attributes);\n-            } else {\n-                keys.removeAllElements();\n-                data.removeAllElements();\n-                Enumeration<?> names = a.getAttributeNames();\n-                while (names.hasMoreElements()) {\n-                    Object name = names.nextElement();\n-                    addAttribute(name, a.getAttribute(name));\n-                }\n-            }\n-        }\n-\n-        \/**\n-         * Initialize with a set of already sorted\n-         * keys (data from an existing SmallAttributeSet).\n-         *\/\n-        private void initialize(Object[] sorted) {\n-            keys.removeAllElements();\n-            data.removeAllElements();\n-            int n = sorted.length;\n-            for (int i = 0; i < n; i += 2) {\n-                keys.addElement(sorted[i]);\n-                data.addElement(sorted[i+1]);\n-            }\n-        }\n-\n-        \/**\n-         * Creates a table of sorted key\/value entries\n-         * suitable for creation of an instance of\n-         * SmallAttributeSet.\n-         *\/\n-        public Object[] createTable() {\n-            int n = keys.size();\n-            Object[] tbl = new Object[2 * n];\n-            for (int i = 0; i < n; i ++) {\n-                int offs = 2 * i;\n-                tbl[offs] = keys.elementAt(i);\n-                tbl[offs + 1] = data.elementAt(i);\n-            }\n-            return tbl;\n-        }\n-\n-        \/**\n-         * The number of key\/value pairs contained\n-         * in the current key being forged.\n-         *\/\n-        int getCount() {\n-            return keys.size();\n-        }\n-\n-        \/**\n-         * Adds a key\/value to the set.\n-         *\/\n-        public void addAttribute(Object key, Object value) {\n-            keys.addElement(key);\n-            data.addElement(value);\n-        }\n-\n-        \/**\n-         * Adds a set of key\/value pairs to the set.\n-         *\/\n-        public void addAttributes(AttributeSet attr) {\n-            if (attr instanceof SmallAttributeSet) {\n-                \/\/ avoid searching the keys, they are already interned.\n-                Object[] tbl = ((SmallAttributeSet)attr).attributes;\n-                int n = tbl.length;\n-                for (int i = 0; i < n; i += 2) {\n-                    addAttribute(tbl[i], tbl[i+1]);\n-                }\n-            } else {\n-                Enumeration<?> names = attr.getAttributeNames();\n-                while (names.hasMoreElements()) {\n-                    Object name = names.nextElement();\n-                    addAttribute(name, attr.getAttribute(name));\n-                }\n-            }\n-        }\n-\n-        \/**\n-         * Removes the given name from the set.\n-         *\/\n-        public void removeAttribute(Object key) {\n-            int n = keys.size();\n-            for (int i = 0; i < n; i++) {\n-                if (keys.elementAt(i).equals(key)) {\n-                    keys.removeElementAt(i);\n-                    data.removeElementAt(i);\n-                    return;\n-                }\n-            }\n-        }\n-\n-        \/**\n-         * Removes the set of keys from the set.\n-         *\/\n-        public void removeAttributes(Enumeration<?> names) {\n-            while (names.hasMoreElements()) {\n-                Object name = names.nextElement();\n-                removeAttribute(name);\n-            }\n-        }\n-\n-        \/**\n-         * Removes the set of matching attributes from the set.\n-         *\/\n-        public void removeAttributes(AttributeSet attr) {\n-            Enumeration<?> names = attr.getAttributeNames();\n-            while (names.hasMoreElements()) {\n-                Object name = names.nextElement();\n-                Object value = attr.getAttribute(name);\n-                removeSearchAttribute(name, value);\n-            }\n-        }\n-\n-        private void removeSearchAttribute(Object ikey, Object value) {\n-            int n = keys.size();\n-            for (int i = 0; i < n; i++) {\n-                if (keys.elementAt(i).equals(ikey)) {\n-                    if (data.elementAt(i).equals(value)) {\n-                        keys.removeElementAt(i);\n-                        data.removeElementAt(i);\n-                    }\n-                    return;\n-                }\n-            }\n-        }\n-\n-        private Vector<Object> keys = new Vector<Object>();\n-        private Vector<Object> data = new Vector<Object>();\n-    }\n-\n@@ -1238,1 +1088,1 @@\n-    static class FontKey {\n+    static final class FontKey {\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/StyleContext.java","additions":6,"deletions":156,"binary":false,"changes":162,"status":"modified"}]}