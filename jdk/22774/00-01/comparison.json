{"files":[{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.security.util;\n+\n+import java.util.Map;\n+import java.util.ResourceBundle;\n+import java.util.concurrent.ConcurrentHashMap;\n+import jdk.internal.misc.VM;\n+\n+\/**\n+ *\/\n+public class ResourcesMgr {\n+    \/\/ intended for java.security, javax.security and sun.security resources\n+    private static final Map<String, ResourceBundle> bundles = new ConcurrentHashMap<>();\n+\n+    public static String getString(String s) {\n+        return getBundle(\"sun.security.util.resources.security\").getString(s);\n+    }\n+\n+    public static String getAuthResourceString(String s) {\n+        return getBundle(\"sun.security.util.resources.auth\").getString(s);\n+    }\n+\n+    private static ResourceBundle getBundle(String bundleName) {\n+        if (!VM.isBooted()) {\n+            \/\/ don't expect this be called before the system is fully initialized.\n+            \/\/ This triggers loading of any resource bundle that should be\n+            \/\/ done during initialization of system class loader.\n+            throw new InternalError(\"Expected to use ResourceBundle only after booted\");\n+        }\n+        return bundles.computeIfAbsent(bundleName, ResourceBundle::getBundle);\n+    }\n+\n+}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/ResourcesMgr.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"}]}