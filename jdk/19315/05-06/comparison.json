{"files":[{"patch":"@@ -25,3 +25,0 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodType;\n@@ -63,2 +60,2 @@\n-        expectRunner(\"false\");\n-        expectRunner(\"true\");\n+        expectRunner(\"-echo\");\n+        expectRunner(\"echo\");\n@@ -81,2 +78,1 @@\n-                \"RestoreEchoTest\",\n-                initialEcho);\n+                \"RestoreEchoTest\");\n@@ -95,6 +91,0 @@\n-        MethodHandle MH_echo = MethodHandles.privateLookupIn(JdkConsoleImpl.class, MethodHandles.lookup())\n-                .findStatic(JdkConsoleImpl.class, \"echo\", MethodType.methodType(boolean.class, boolean.class));\n-\n-        var initialEcho = Boolean.parseBoolean(args[0]);\n-        var originalEcho = (boolean)MH_echo.invokeExact(initialEcho);\n-\n@@ -113,18 +103,0 @@\n-\n-        var echoAfter = (boolean)MH_echo.invokeExact(originalEcho);\n-\n-        var echoStates =\n-                \"\"\"\n-                    Platform's original echo state: %s\n-                    Echo state before readPassword(): %s\n-                    Echo state after readPassword(): %s\n-                \"\"\".formatted(originalEcho, initialEcho, echoAfter);\n-        if (initialEcho != echoAfter) {\n-            throw new RuntimeException(\n-                \"\"\"\n-                Initial echo state was not correctly restored.\n-                %s\n-                \"\"\".formatted(echoStates));\n-        } else {\n-            System.out.println(echoStates);\n-        }\n","filename":"test\/jdk\/java\/io\/Console\/RestoreEchoTest.java","additions":3,"deletions":31,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-set initialEcho [lrange $argv 0 0]\n+set initialEcho [lindex $argv 0]\n@@ -26,6 +26,7 @@\n-set prompt \"prompt: \"\n-set pwprompt \"password prompt: \"\n-set input \"InPuT\"\n-set password \"PaSsWoRd\"\n-set expected \"input is $input\"\n-set pwexpected \"password is $password\"\n+set rlprompt \"prompt: \"\n+set rpprompt \"password prompt: \"\n+set rlinput \"InPuT\"\n+set rpinput \"PaSsWoRd\"\n+set rlexpected \"input is $rlinput\"\n+set rpexpected \"password is $rpinput\"\n+set stty_init $initialEcho\n@@ -34,1 +35,7 @@\n-eval spawn $java\n+proc test {prompt input echoStat expected} {\n+    expect \"$prompt\"\n+    send -- \"$input\\n\"\n+    if {$echoStat == \"echo\"} {\n+        expect \"$input\"\n+    }\n+    expect \"$expected\"\n@@ -36,12 +43,5 @@\n-# readLine() - input is displayed depending on initialEcho value\n-expect \"$prompt\"\n-send -- \"$input\\n\"\n-if {$initialEcho == \"true\"} {\n-    expect \"$input\"\n-}\n-expect \"$expected\"\n-\n-if {$expect_out(0,string) != $expected} {\n-    send_error \"Expected: $expected\\n\"\n-    send_error \"Received: $expect_out(0,string)\"\n-    exit 1\n+    if {$expect_out(0,string) != $expected} {\n+        send_error \"Expected: $expected\\n\"\n+        send_error \"Received: $expect_out(0,string)\"\n+        exit 1\n+    }\n@@ -50,4 +50,1 @@\n-# readPassword() - password is not displayed regardless of initialEcho value\n-expect \"$pwprompt\"\n-send -- \"$password\\n\"\n-expect \"$pwexpected\"\n+spawn sh -c \"[list {*}$java] && stty -a\"\n@@ -55,5 +52,6 @@\n-if {$expect_out(0,string) != $pwexpected} {\n-    send_error \"Expected: $pwexpected\\n\"\n-    send_error \"Received: $expect_out(0,string)\"\n-    exit 1\n-}\n+# readLine() - input is displayed depending on initialEcho value\n+test \"$rlprompt\" \"$rlinput\" \"$initialEcho\" \"$rlexpected\"\n+# readPassword() - input is not displayed\n+test \"$rpprompt\" \"$rpinput\" \"-echo\" \"$rpexpected\"\n+# See if the initialEcho is restored with `stty -a`\n+expect \" $initialEcho \"\n","filename":"test\/jdk\/java\/io\/Console\/restoreEcho.exp","additions":27,"deletions":29,"binary":false,"changes":56,"status":"modified"}]}