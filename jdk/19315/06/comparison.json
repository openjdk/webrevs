{"files":[{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.Console;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+\n+import jdk.internal.io.JdkConsoleImpl;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+\n+\n+\/**\n+ * @test\n+ * @bug 8332161\n+ * @summary Tests JdkConsoleImpl restores the echo state after readPassword() call\n+ *     This test relies on the static JdkConsoleImpl.echo() method, which\n+ *     queries\/sets the platform's echo state.\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.io:+open\n+ * @run junit RestoreEchoTest\n+ *\/\n+public class RestoreEchoTest {\n+\n+    @Test\n+    @EnabledOnOs({OS.LINUX, OS.MAC})\n+    public void testRestoreEcho() throws Throwable {\n+        \/\/ check \"expect\" command availability\n+        var expect = Paths.get(\"\/usr\/bin\/expect\");\n+        if (!Files.exists(expect) || !Files.isExecutable(expect)) {\n+            Assumptions.abort(\"'\" + expect + \"' not found\");\n+        }\n+\n+        expectRunner(\"-echo\");\n+        expectRunner(\"echo\");\n+    }\n+\n+    private static void expectRunner(String initialEcho) throws Throwable {\n+        \/\/ invoking \"expect\" command\n+        var testSrc = System.getProperty(\"test.src\", \".\");\n+        var testClasses = System.getProperty(\"test.classes\", \".\");\n+        var jdkDir = System.getProperty(\"test.jdk\");\n+        OutputAnalyzer output = ProcessTools.executeProcess(\n+                \"expect\",\n+                \"-n\",\n+                testSrc + \"\/restoreEcho.exp\",\n+                initialEcho,\n+                jdkDir + \"\/bin\/java\",\n+                \"--add-opens=java.base\/jdk.internal.io=ALL-UNNAMED\",\n+                \"-Djdk.console=java.base\",\n+                \"-classpath\", testClasses,\n+                \"RestoreEchoTest\");\n+        output.reportDiagnosticSummary();\n+        var eval = output.getExitValue();\n+        if (eval != 0) {\n+            throw new RuntimeException(\"Test failed. Exit value from 'expect' command: \" + eval);\n+        }\n+    }\n+\n+    public static void main(String... args) throws Throwable {\n+        if (!\"java.base\".equals(System.getProperty(\"jdk.console\"))) {\n+            throw new RuntimeException(\"Test failed. jdk.console is not java.base\");\n+        }\n+\n+        Console con = System.console();\n+        if (con == null) {\n+            throw new RuntimeException(\"Test failed. System.console() returned null\");\n+        }\n+\n+        \/\/ testing readLine()\n+        String input = con.readLine(\"prompt: \");\n+        con.printf(\"input is %s\\n\", input);\n+\n+        \/\/ testing readPassword()\n+        input = String.valueOf(con.readPassword(\"password prompt: \"));\n+        con.printf(\"password is %s\\n\", input);\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/Console\/RestoreEchoTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+#\n+# Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+set initialEcho [lindex $argv 0]\n+set java [lrange $argv 1 end]\n+set rlprompt \"prompt: \"\n+set rpprompt \"password prompt: \"\n+set rlinput \"InPuT\"\n+set rpinput \"PaSsWoRd\"\n+set rlexpected \"input is $rlinput\"\n+set rpexpected \"password is $rpinput\"\n+set stty_init $initialEcho\n+set timeout 2\n+\n+proc test {prompt input echoStat expected} {\n+    expect \"$prompt\"\n+    send -- \"$input\\n\"\n+    if {$echoStat == \"echo\"} {\n+        expect \"$input\"\n+    }\n+    expect \"$expected\"\n+\n+    if {$expect_out(0,string) != $expected} {\n+        send_error \"Expected: $expected\\n\"\n+        send_error \"Received: $expect_out(0,string)\"\n+        exit 1\n+    }\n+}\n+\n+spawn sh -c \"[list {*}$java] && stty -a\"\n+\n+# readLine() - input is displayed depending on initialEcho value\n+test \"$rlprompt\" \"$rlinput\" \"$initialEcho\" \"$rlexpected\"\n+# readPassword() - input is not displayed\n+test \"$rpprompt\" \"$rpinput\" \"-echo\" \"$rpexpected\"\n+# See if the initialEcho is restored with `stty -a`\n+expect \" $initialEcho \"\n+expect eof\n","filename":"test\/jdk\/java\/io\/Console\/restoreEcho.exp","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"}]}