{"files":[{"patch":"@@ -862,6 +862,5 @@\n-            int set = Stream.of(Objects.requireNonNull(capturedState))\n-                    .map(Objects::requireNonNull)\n-                    .map(CapturableState::forName)\n-                    .mapToInt(state -> 1 << state.ordinal())\n-                    .sum();\n-            return new LinkerOptions.CaptureCallState(set);\n+            int mask = 0;\n+            for (var state : capturedState) {\n+                mask |= CapturableState.forName(state).mask;\n+            }\n+            return new LinkerOptions.CaptureCallState(mask);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -188,3 +188,1 @@\n-        return linkerOptions.capturedCallState()\n-                .mapToInt(CapturableState::mask)\n-                .reduce(0, (a, b) -> a | b);\n+        return linkerOptions.capturedCallStateMask();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/CallingSequence.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.util.ArrayList;\n@@ -34,2 +35,1 @@\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n+import java.util.Map;\n@@ -39,4 +39,1 @@\n-public enum CapturableState {\n-    GET_LAST_ERROR    (\"GetLastError\",    JAVA_INT, 1 << 0, OperatingSystem.isWindows()),\n-    WSA_GET_LAST_ERROR(\"WSAGetLastError\", JAVA_INT, 1 << 1, OperatingSystem.isWindows()),\n-    ERRNO             (\"errno\",           JAVA_INT, 1 << 2, true);\n+public final class CapturableState {\n@@ -44,3 +41,2 @@\n-    public static final StructLayout LAYOUT = MemoryLayout.structLayout(\n-        supportedStates().map(CapturableState::layout).toArray(MemoryLayout[]::new));\n-    public static final List<CapturableState> BY_ORDINAL = List.of(values());\n+    public static final StructLayout LAYOUT;\n+    private static final Map<String, CapturableState> LOOKUP;\n@@ -49,1 +45,23 @@\n-        assert (BY_ORDINAL.size() < Integer.SIZE); \/\/ Update LinkerOptions.CaptureCallState\n+        List<CapturableState> supported;\n+\n+        if (OperatingSystem.isWindows()) {\n+            supported = List.of(\n+                    new CapturableState(\"GetLastError\",    JAVA_INT, 1 << 0),\n+                    new CapturableState(\"WSAGetLastError\", JAVA_INT, 1 << 1),\n+                    new CapturableState(\"errno\",           JAVA_INT, 1 << 2)\n+            );\n+        } else {\n+            supported = List.of(new CapturableState(\"errno\", JAVA_INT, 1 << 2));\n+        }\n+\n+        MemoryLayout[] stateLayouts = new MemoryLayout[supported.size()];\n+        @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+        Map.Entry<String, CapturableState>[] entries = new Map.Entry[supported.size()];\n+        int i = 0;\n+        for (var each : supported) {\n+            stateLayouts[i] = each.layout;\n+            entries[i] = Map.entry(each.stateName, each);\n+            i++;\n+        }\n+        LAYOUT = MemoryLayout.structLayout(stateLayouts);\n+        LOOKUP = Map.ofEntries(entries);\n@@ -52,4 +70,3 @@\n-    private final String stateName;\n-    private final ValueLayout layout;\n-    private final int mask;\n-    private final boolean isSupported;\n+    public final String stateName;\n+    public final ValueLayout layout;\n+    public final int mask;\n@@ -57,1 +74,1 @@\n-    CapturableState(String stateName, ValueLayout layout, int mask, boolean isSupported) {\n+    private CapturableState(String stateName, ValueLayout layout, int mask) {\n@@ -61,5 +78,0 @@\n-        this.isSupported = isSupported;\n-    }\n-\n-    private static Stream<CapturableState> supportedStates() {\n-        return Stream.of(values()).filter(CapturableState::isSupported);\n@@ -69,13 +81,7 @@\n-        return Stream.of(values())\n-                .filter(stl -> stl.stateName().equals(name))\n-                .filter(CapturableState::isSupported)\n-                .findAny()\n-                .orElseThrow(() -> new IllegalArgumentException(\n-                        \"Unknown name: \" + name +\", must be one of: \"\n-                            + supportedStates()\n-                                    .map(CapturableState::stateName)\n-                                    .collect(Collectors.joining(\", \"))));\n-    }\n-\n-    public String stateName() {\n-        return stateName;\n+        var ret = LOOKUP.get(name);\n+        if (ret == null) {\n+            throw new IllegalArgumentException(\n+                    \"Unknown name: \" + name + \", must be one of: \"\n+                            + LOOKUP.keySet());\n+        }\n+        return ret;\n@@ -84,2 +90,12 @@\n-    public ValueLayout layout() {\n-        return layout;\n+    \/**\n+     * Returns a list-like display string for a captured state mask.\n+     * Enclosed with brackets.\n+     *\/\n+    public static String displayString(int mask) {\n+        var displayList = new ArrayList<>(); \/\/ unordered\n+        for (var e : LOOKUP.values()) {\n+            if ((mask & e.mask) != 0) {\n+                displayList.add(e.stateName);\n+            }\n+        }\n+        return displayList.toString();\n@@ -88,6 +104,3 @@\n-    public int mask() {\n-        return mask;\n-    }\n-\n-    public boolean isSupported() {\n-        return isSupported;\n+    @Override\n+    public String toString() {\n+        return stateName;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/CapturableState.java","additions":55,"deletions":42,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,1 +87,1 @@\n-    public Stream<CapturableState> capturedCallState() {\n+    public int capturedCallStateMask() {\n@@ -89,1 +89,1 @@\n-        return stl == null ? Stream.empty() : stl.saved().stream();\n+        return stl == null ? 0 : stl.mask();\n@@ -153,1 +153,1 @@\n-    public record CaptureCallState(int compact) implements LinkerOptionImpl {\n+    public record CaptureCallState(int mask) implements LinkerOptionImpl {\n@@ -159,15 +159,0 @@\n-        public Set<CapturableState> saved() {\n-            var set = EnumSet.noneOf(CapturableState.class);\n-            int mask = compact;\n-            int i = 0;\n-            while (mask != 0) {\n-                if ((mask & 1) == 1) {\n-                    set.add(CapturableState.BY_ORDINAL.get(i));\n-                }\n-                mask >>= 1;\n-                i++;\n-            }\n-            return set;\n-        }\n-\n-\n@@ -176,1 +161,1 @@\n-            return obj instanceof CaptureCallState that && compact == that.compact;\n+            return obj instanceof CaptureCallState that && mask == that.mask;\n@@ -181,1 +166,6 @@\n-            return compact;\n+            return mask;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"CaptureCallState\" + CapturableState.displayString(mask);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/LinkerOptions.java","additions":11,"deletions":21,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -87,3 +87,1 @@\n-        int capturedStateMask = options.capturedCallState()\n-                .mapToInt(CapturableState::mask)\n-                .reduce(0, (a, b) -> a | b);\n+        int capturedStateMask = options.capturedCallStateMask();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/FallbackLinker.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @bug 8356126\n@@ -50,2 +51,1 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.*;\n@@ -64,0 +64,11 @@\n+    \/\/ Basic sanity tests around Java API contracts\n+    @Test\n+    public void testApiContracts() {\n+        assertThrows(IllegalArgumentException.class, () -> Linker.Option.captureCallState(\"Does not exist\"));\n+        var duplicateOpt = Linker.Option.captureCallState(\"errno\", \"errno\"); \/\/ duplicates\n+        var noDuplicateOpt = Linker.Option.captureCallState(\"errno\");\n+        assertEquals(duplicateOpt, noDuplicateOpt, \"auto deduplication\");\n+        var display = duplicateOpt.toString();\n+        assertTrue(display.contains(\"errno\"), \"toString should contain state name 'errno': \" + display);\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/capturecallstate\/TestCaptureCallState.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"}]}