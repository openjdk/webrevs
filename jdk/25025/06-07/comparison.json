{"files":[{"patch":"@@ -37,2 +37,0 @@\n-import java.util.Objects;\n-import java.util.Set;\n@@ -40,2 +38,0 @@\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n@@ -864,1 +860,1 @@\n-                mask |= CapturableState.forName(state).mask;\n+                mask |= CapturableState.maskFromName(state);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.lang.foreign.ValueLayout;\n@@ -34,1 +33,0 @@\n-import java.util.List;\n@@ -39,0 +37,3 @@\n+\/**\n+ * Utility class for the call states to capture.\n+ *\/\n@@ -42,1 +43,1 @@\n-    private static final Map<String, CapturableState> LOOKUP;\n+    private static final Map<String, Integer> MASKS;\n@@ -45,2 +46,0 @@\n-        List<CapturableState> supported;\n-\n@@ -48,4 +47,8 @@\n-            supported = List.of(\n-                    new CapturableState(\"GetLastError\",    JAVA_INT, 1 << 0),\n-                    new CapturableState(\"WSAGetLastError\", JAVA_INT, 1 << 1),\n-                    new CapturableState(\"errno\",           JAVA_INT, 1 << 2)\n+            LAYOUT = MemoryLayout.structLayout(\n+                    JAVA_INT.withName(\"GetLastError\"),\n+                    JAVA_INT.withName(\"WSAGetLastError\"),\n+                    JAVA_INT.withName(\"errno\"));\n+            MASKS = Map.of(\n+                    \"GetLastError\",    1 << 0,\n+                    \"WSAGetLastError\", 1 << 1,\n+                    \"errno\",           1 << 2\n@@ -54,11 +57,5 @@\n-            supported = List.of(new CapturableState(\"errno\", JAVA_INT, 1 << 2));\n-        }\n-\n-        MemoryLayout[] stateLayouts = new MemoryLayout[supported.size()];\n-        @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-        Map.Entry<String, CapturableState>[] entries = new Map.Entry[supported.size()];\n-        int i = 0;\n-        for (var each : supported) {\n-            stateLayouts[i] = each.layout;\n-            entries[i] = Map.entry(each.stateName, each);\n-            i++;\n+            LAYOUT = MemoryLayout.structLayout(\n+                    JAVA_INT.withName(\"errno\"));\n+            MASKS = Map.of(\n+                    \"errno\",           1 << 2\n+            );\n@@ -66,2 +63,0 @@\n-        LAYOUT = MemoryLayout.structLayout(stateLayouts);\n-        LOOKUP = Map.ofEntries(entries);\n@@ -70,8 +65,1 @@\n-    public final String stateName;\n-    public final ValueLayout layout;\n-    public final int mask;\n-\n-    private CapturableState(String stateName, ValueLayout layout, int mask) {\n-        this.stateName = stateName;\n-        this.layout = layout.withName(stateName);\n-        this.mask = mask;\n+    private CapturableState() {\n@@ -80,2 +68,6 @@\n-    public static CapturableState forName(String name) {\n-        var ret = LOOKUP.get(name);\n+    \/**\n+     * Returns the mask for a supported capturable state, or throw an\n+     * IllegalArgumentException if no supported state with this name exists.\n+     *\/\n+    public static int maskFromName(String name) {\n+        var ret = MASKS.get(name);\n@@ -85,1 +77,1 @@\n-                            + LOOKUP.keySet());\n+                            + MASKS.keySet());\n@@ -91,1 +83,1 @@\n-     * Returns a list-like display string for a captured state mask.\n+     * Returns a collection-like display string for a captured state mask.\n@@ -96,3 +88,3 @@\n-        for (var e : LOOKUP.values()) {\n-            if ((mask & e.mask) != 0) {\n-                displayList.add(e.stateName);\n+        for (var e : MASKS.entrySet()) {\n+            if ((mask & e.getValue()) != 0) {\n+                displayList.add(e.getKey());\n@@ -103,5 +95,0 @@\n-\n-    @Override\n-    public String toString() {\n-        return stateName;\n-    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/CapturableState.java","additions":29,"deletions":42,"binary":false,"changes":71,"status":"modified"}]}