{"files":[{"patch":"@@ -47,1 +47,3 @@\n-            throw new IllegalArgumentException(\"Signing identity and identifier prefix mismatch\");\n+            throw new IllegalArgumentException(\n+                \"Signing identity (\" + identity + \") and identifier prefix (\" +\n+                identifierPrefix + \") mismatch\");\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/CodesignConfig.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-    private String validatedBundleIdentifier() throws ConfigException {\n+    public String validatedBundleIdentifier() throws ConfigException {\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacApplicationBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import static jdk.jpackage.internal.StandardBundlerParam.PREDEFINED_RUNTIME_IMAGE;\n@@ -32,0 +33,1 @@\n+import java.io.IOException;\n@@ -36,0 +38,1 @@\n+import java.util.NoSuchElementException;\n@@ -37,0 +40,1 @@\n+import java.util.stream.Stream;\n@@ -66,0 +70,17 @@\n+        } else if (StandardBundlerParam.isRuntimeInstaller(params)) {\n+            \/\/ Call appImageBundler.validate(params); to validate signing\n+            \/\/ requirements.\n+            appImageBundler.validate(params);\n+\n+            Path runtimeImage = PREDEFINED_RUNTIME_IMAGE.fetchFrom(params);\n+\n+            \/\/ Make sure we have valid runtime image.\n+            if (!isRuntimeImageJDKBundle(runtimeImage)\n+                    && !isRuntimeImageJDKImage(runtimeImage)) {\n+                throw new ConfigException(\n+                    MessageFormat.format(I18N.getString(\n+                    \"message.runtime-image-invalid\"),\n+                    runtimeImage.toString()),\n+                    I18N.getString(\n+                    \"message.runtime-image-invalid.advice\"));\n+            }\n@@ -76,0 +97,28 @@\n+    \/\/ JDK bundle: \"Contents\/Home\", \"Contents\/MacOS\/libjli.dylib\"\n+    \/\/ and \"Contents\/Info.plist\"\n+    private static boolean isRuntimeImageJDKBundle(Path runtimeImage) {\n+        Path path1 = runtimeImage.resolve(\"Contents\/Home\");\n+        Path path2 = runtimeImage.resolve(\"Contents\/MacOS\/libjli.dylib\");\n+        Path path3 = runtimeImage.resolve(\"Contents\/Info.plist\");\n+        return IOUtils.exists(path1)\n+                && path1.toFile().list() != null\n+                && path1.toFile().list().length > 0\n+                && IOUtils.exists(path2)\n+                && IOUtils.exists(path3);\n+    }\n+\n+    \/\/ JDK image: \"lib\/*\/libjli.dylib\"\n+    static boolean isRuntimeImageJDKImage(Path runtimeImage) {\n+        final Path jliName = Path.of(\"libjli.dylib\");\n+        try (Stream<Path> walk = Files.walk(runtimeImage.resolve(\"lib\"))) {\n+            final Path jli = walk\n+                    .filter(file -> file.getFileName().equals(jliName))\n+                    .findFirst()\n+                    .get();\n+            return IOUtils.exists(jli);\n+        } catch (IOException | NoSuchElementException ex) {\n+            Log.verbose(ex);\n+            return false;\n+        }\n+    }\n+\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacBaseInstallerBundler.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import static jdk.jpackage.internal.StandardBundlerParam.isRuntimeInstaller;\n@@ -79,1 +80,2 @@\n-            if (Files.isDirectory(RUNTIME_PACKAGE_LAYOUT.resolveAt(predefinedRuntimeImage).runtimeDirectory())) {\n+            if (!isRuntimeInstaller(params) &&\n+                    Files.isDirectory(RUNTIME_PACKAGE_LAYOUT.resolveAt(predefinedRuntimeImage).runtimeDirectory())) {\n@@ -150,1 +152,9 @@\n-            app.mainLauncher().flatMap(Launcher::startupInfo).ifPresent(signingBuilder::signingIdentifierPrefix);\n+            final var bundleIdentifier = appBuilder.validatedBundleIdentifier();\n+            app.mainLauncher().flatMap(Launcher::startupInfo).ifPresentOrElse(\n+                signingBuilder::signingIdentifierPrefix,\n+                () -> {\n+                    \/\/ Runtime installer does not have main launcher, so use\n+                    \/\/ 'bundleIdentifier' as prefix by default.\n+                    signingBuilder.signingIdentifierPrefix(\n+                        bundleIdentifier + \".\");\n+                });\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacFromParams.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import static jdk.jpackage.internal.model.MacPackage.RUNTIME_PACKAGE_LAYOUT;\n@@ -74,0 +75,1 @@\n+import jdk.jpackage.internal.model.RuntimeLayout;\n@@ -94,0 +96,1 @@\n+        COPY_RUNTIME_JLILIB,\n@@ -95,1 +98,2 @@\n-        COPY_SIGN\n+        COPY_SIGN,\n+        SIGN_RUNTIME_BUNDLE\n@@ -99,1 +103,9 @@\n-        return pkg.appImageLayout().resolveAt(pkg.relativeInstallDir().getFileName());\n+        if (pkg.isRuntimeInstaller()) {\n+            if (((MacPackage)pkg).isRuntimeImageJDKImage()) {\n+                return RUNTIME_PACKAGE_LAYOUT.resolveAt(pkg.relativeInstallDir().getFileName());\n+            } else {\n+                return RuntimeLayout.DEFAULT.resolveAt(pkg.relativeInstallDir().getFileName());\n+            }\n+        } else {\n+            return pkg.appImageLayout().resolveAt(pkg.relativeInstallDir().getFileName());\n+        }\n@@ -121,1 +133,1 @@\n-                        .applicationAction(MacPackagingPipeline::copyJliLib)\n+                        .applicationAction(MacPackagingPipeline::copyApplicationRuntimeJliLib)\n@@ -143,0 +155,6 @@\n+                .task(MacCopyAppImageTaskID.COPY_RUNTIME_JLILIB)\n+                        .addDependencies(CopyAppImageTaskID.COPY)\n+                        .addDependents(PrimaryTaskID.COPY_APP_IMAGE).add()\n+                .task(MacCopyAppImageTaskID.SIGN_RUNTIME_BUNDLE)\n+                        .addDependencies(CopyAppImageTaskID.COPY)\n+                        .addDependents(PrimaryTaskID.COPY_APP_IMAGE).add()\n@@ -151,1 +169,1 @@\n-                .appImageAction(MacPackagingPipeline::sign)\n+                .appImageAction(MacPackagingPipeline::signApplicationBundle)\n@@ -157,1 +175,1 @@\n-                .appImageAction(MacPackagingPipeline::sign)\n+                .appImageAction(MacPackagingPipeline::signApplicationBundle)\n@@ -182,3 +200,14 @@\n-\/\/                if (p.isRuntimeInstaller()) {\n-\/\/                    builder.task(MacCopyAppImageTaskID.COPY_RUNTIME_INFO_PLIST).packageAction(MacPackagingPipeline::writeRuntimeRuntimeInfoPlist).add();\n-\/\/                }\n+                if (((MacPackage)p).isRuntimeImageJDKImage()) {\n+                    builder.task(MacCopyAppImageTaskID.COPY_RUNTIME_INFO_PLIST)\n+                           .packageAction(MacPackagingPipeline::writeRuntimeRuntimeInfoPlist)\n+                           .add();\n+                    builder.task(MacCopyAppImageTaskID.COPY_RUNTIME_JLILIB)\n+                            .packageAction(MacPackagingPipeline::copyRuntimeRuntimeJliLib)\n+                            .add();\n+                }\n+\n+                if (((MacPackage)p).isRuntimeJDKBundleNeedSigning()) {\n+                    builder.task(MacCopyAppImageTaskID.SIGN_RUNTIME_BUNDLE)\n+                            .packageAction(MacPackagingPipeline::signRuntimeBundle)\n+                            .add();\n+                }\n@@ -214,1 +243,6 @@\n-    private static void copyJliLib(\n+    private static void copyRuntimeRuntimeJliLib(PackageBuildEnv<MacPackage, AppImageLayout> env) throws IOException {\n+        copyJliLib(env.resolvedLayout().rootDirectory(),\n+                   env.resolvedLayout().rootDirectory().resolve(\"Contents\/Home\"));\n+    }\n+\n+    private static void copyApplicationRuntimeJliLib(\n@@ -216,0 +250,5 @@\n+        copyJliLib(env.resolvedLayout().runtimeRootDirectory(),\n+                   env.resolvedLayout().runtimeDirectory());\n+    }\n+\n+    private static void copyJliLib(Path runtimeRootDirectory, Path runtimeLibRoot) throws IOException {\n@@ -217,1 +256,1 @@\n-        final var runtimeMacOSDir = env.resolvedLayout().runtimeRootDirectory().resolve(\"Contents\/MacOS\");\n+        final var runtimeMacOSDir = runtimeRootDirectory.resolve(\"Contents\/MacOS\");\n@@ -221,1 +260,1 @@\n-        try (var walk = Files.walk(env.resolvedLayout().runtimeDirectory().resolve(\"lib\"))) {\n+        try (var walk = Files.walk(runtimeLibRoot.resolve(\"lib\"))) {\n@@ -251,1 +290,1 @@\n-        writeRuntimeInfoPlist(env.pkg().app(), env.env(), env.resolvedLayout().rootDirectory());\n+        writeRuntimeBundleInfoPlist(env.pkg().app(), env.env(), env.resolvedLayout().rootDirectory());\n@@ -274,0 +313,16 @@\n+    private static void writeRuntimeBundleInfoPlist(MacApplication app, BuildEnv env, Path runtimeRootDirectory) throws IOException {\n+\n+        Map<String, String> data = new HashMap<>();\n+        data.put(\"CF_BUNDLE_IDENTIFIER\", app.bundleIdentifier());\n+        data.put(\"CF_BUNDLE_NAME\", app.bundleName());\n+        data.put(\"CF_BUNDLE_VERSION\", app.version());\n+        data.put(\"CF_BUNDLE_SHORT_VERSION_STRING\", app.shortVersion().toString());\n+        data.put(\"CF_BUNDLE_VENDOR\", app.vendor());\n+\n+        env.createResource(\"RuntimeBundle-Info.plist.template\")\n+                .setPublicName(\"RuntimeBundle-Info.plist\")\n+                .setCategory(I18N.getString(\"resource.runtime-bundle-info-plist\"))\n+                .setSubstitutionData(data)\n+                .saveToFile(runtimeRootDirectory.resolve(\"Contents\/Info.plist\"));\n+    }\n+\n@@ -311,1 +366,7 @@\n-    private static void sign(AppImageBuildEnv<MacApplication, MacApplicationLayout> env) throws IOException {\n+    private static void signRuntimeBundle(PackageBuildEnv<MacPackage, AppImageLayout> env) throws IOException {\n+        sign(env.pkg().app(), env.env(), env.resolvedLayout().rootDirectory());\n+    }\n+\n+    private static void signApplicationBundle(AppImageBuildEnv<MacApplication, MacApplicationLayout> env) throws IOException {\n+        sign(env.app(), env.env(), env.resolvedLayout().rootDirectory());\n+    }\n@@ -313,1 +374,2 @@\n-        final var app = env.app();\n+    private static void sign(final MacApplication app,\n+            final BuildEnv env, final Path appImageDir) throws IOException {\n@@ -322,1 +384,1 @@\n-            final var entitlementsFile = env.env().configDir().resolve(app.name() + \".entitlements\");\n+            final var entitlementsFile = env.configDir().resolve(app.name() + \".entitlements\");\n@@ -324,1 +386,1 @@\n-            env.env().createResource(entitlementsDefaultResource)\n+            env.createResource(entitlementsDefaultResource)\n@@ -332,1 +394,0 @@\n-            final var appImageDir = env.resolvedLayout().rootDirectory();\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPackagingPipeline.java","additions":78,"deletions":17,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -58,1 +58,5 @@\n-            return Application.super.appImageDirName();\n+            if (Application.super.appImageDirName().toString().endsWith(\".jdk\")) {\n+                return Application.super.appImageDirName();\n+            } else {\n+                return Path.of(Application.super.appImageDirName().toString() + \".jdk\");\n+            }\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/model\/MacApplication.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.nio.file.Files;\n@@ -37,1 +38,1 @@\n-            return RUNTIME_PACKAGE_LAYOUT;\n+            return RuntimeLayout.DEFAULT;\n@@ -47,0 +48,30 @@\n+    default boolean isRuntimeImageJDKImage() {\n+        if (isRuntimeInstaller()) {\n+            Path runtimeImage = app().runtimeImage().orElseThrow();\n+            Path p = runtimeImage.resolve(\"Contents\/Home\");\n+            return !Files.exists(p);\n+        }\n+\n+        return false;\n+    }\n+\n+    \/\/ Returns true if signing is requested or JDK bundle is not signed\n+    \/\/ or JDK image is provided.\n+    default boolean isRuntimeJDKBundleNeedSigning() {\n+        if (!isRuntimeInstaller()) {\n+            return false;\n+        }\n+\n+        if (app().sign()) {\n+            return true;\n+        }\n+\n+        if (isRuntimeImageJDKImage()) {\n+            return true;\n+        } else {\n+            Path runtimeImage = app().runtimeImage().orElseThrow();\n+            Path p = runtimeImage.resolve(\"Contents\/_CodeSignature\");\n+            return !Files.exists(p);\n+        }\n+    }\n+\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/model\/MacPackage.java","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+resource.runtime-bundle-info-plist=Java Runtime Bundle Info.plist\n@@ -85,0 +86,2 @@\n+message.runtime-image-invalid=Provided runtime image at \"{0}\" is invalid or corrupted.\n+message.runtime-image-invalid.advice=Runtime image should be valid JDK bundle or JDK image.\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,39 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE plist PUBLIC \"-\/\/Apple\/\/DTD PLIST 1.0\/\/EN\" \"https:\/\/www.apple.com\/DTDs\/PropertyList-1.0.dtd\">\n+<plist version=\"1.0\">\n+<dict>\n+        <key>CFBundleDevelopmentRegion<\/key>\n+        <string>English<\/string>\n+        <key>CFBundleExecutable<\/key>\n+        <string>libjli.dylib<\/string>\n+        <key>CFBundleIdentifier<\/key>\n+        <string>CF_BUNDLE_IDENTIFIER<\/string>\n+        <key>CFBundleInfoDictionaryVersion<\/key>\n+        <string>7.0<\/string>\n+        <key>CFBundleName<\/key>\n+        <string>CF_BUNDLE_NAME<\/string>\n+        <key>CFBundlePackageType<\/key>\n+        <string>BNDL<\/string>\n+        <key>CFBundleShortVersionString<\/key>\n+        <string>CF_BUNDLE_SHORT_VERSION_STRING<\/string>\n+        <key>CFBundleSignature<\/key>\n+        <string>????<\/string>\n+        <key>CFBundleVersion<\/key>\n+        <string>CF_BUNDLE_VERSION<\/string>\n+        <key>NSMicrophoneUsageDescription<\/key>\n+        <string>The application is requesting access to the microphone.<\/string>\n+        <key>JavaVM<\/key>\n+        <dict>\n+                <key>JVMCapabilities<\/key>\n+                <array>\n+                        <string>CommandLine<\/string>\n+                <\/array>\n+                <key>JVMPlatformVersion<\/key>\n+                <string>CF_BUNDLE_VERSION<\/string>\n+                <key>JVMVendor<\/key>\n+                <string>CF_BUNDLE_VENDOR<\/string>\n+                <key>JVMVersion<\/key>\n+                <string>CF_BUNDLE_VERSION<\/string>\n+        <\/dict>\n+<\/dict>\n+<\/plist>\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/RuntimeBundle-Info.plist.template","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -78,0 +78,1 @@\n+                Optional.ofNullable(runtimeImage),\n@@ -150,0 +151,5 @@\n+    ApplicationBuilder runtimeImage(Path v) {\n+        runtimeImage = v;\n+        return this;\n+    }\n+\n@@ -190,0 +196,1 @@\n+    private Path runtimeImage;\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/ApplicationBuilder.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -90,0 +90,1 @@\n+        PREDEFINED_RUNTIME_IMAGE.copyInto(params, appBuilder::runtimeImage);\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/FromParams.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -91,0 +91,11 @@\n+    \/**\n+     * Gets the source directory of this application if available or an empty\n+     * {@link Optional} instance.\n+     * <p>\n+     * Source directory is a directory with the applications's classes and other\n+     * resources.\n+     *\n+     * @return the source directory of this application\n+     *\/\n+    Optional<Path> runtimeImage();\n+\n@@ -248,1 +259,1 @@\n-            List<Path> contentDirs, AppImageLayout imageLayout, Optional<RuntimeBuilder> runtimeBuilder,\n+            Optional<Path> runtimeImage, List<Path> contentDirs, AppImageLayout imageLayout, Optional<RuntimeBuilder> runtimeBuilder,\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/model\/Application.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -970,1 +970,6 @@\n-        RUNTIME_IMAGE(new Builder(\"--runtime-image\").create());\n+        RUNTIME_IMAGE(new Builder(\"--runtime-image\").enable(cmd -> {\n+            \/\/ External runtime image should be R\/O unless it is runtime installer\n+            \/\/ on macOS. On macOS runtime image will be signed ad-hoc or with\n+            \/\/ real certificate when creating runtime installers.\n+            return !(cmd.isRuntime() && TKit.isOSX());\n+        }).create());\n@@ -1085,5 +1090,1 @@\n-                if (cmd.isRuntime()) {\n-                    TKit.assertPathExists(libjliPath, false);\n-                } else {\n-                    TKit.assertFileExists(libjliPath);\n-                }\n+                TKit.assertFileExists(libjliPath);\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -337,1 +337,1 @@\n-        return installLocation.resolve(cmd.name() + (cmd.isRuntime() ? \"\" : \".app\"));\n+        return installLocation.resolve(cmd.name() + (cmd.isRuntime() ? \".jdk\" : \".app\"));\n@@ -419,1 +419,4 @@\n-            \"Home\"\n+            \"Home\",\n+            \"MacOS\",\n+            \"Info.plist\",\n+            \"_CodeSignature\"\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacHelper.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-                    Optional.empty(), List.of(), null, Optional.empty(),\n+                    Optional.empty(), Optional.empty(), List.of(), null, Optional.empty(),\n","filename":"test\/jdk\/tools\/jpackage\/junit\/share\/jdk.jpackage\/jdk\/jpackage\/internal\/AppImageFileTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,263 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.io.IOException;\n+\n+import jdk.jpackage.test.ApplicationLayout;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.PackageType;\n+import jdk.jpackage.test.MacHelper;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.Annotations.Parameter;\n+import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.JavaTool;\n+import jdk.jpackage.test.Executor;\n+\n+\/**\n+ * Tests generation of dmg and pkg with --mac-sign and related arguments.\n+ * Test will generate pkg and verifies its signature. It verifies that dmg\n+ * is not signed, but runtime image inside dmg is signed.\n+ *\n+ * Note: Specific UNICODE signing is not tested, since it is shared code\n+ * with app image signing and it will be covered by SigningPackageTest.\n+ *\n+ * Following combinations are tested:\n+ * 1) \"--runtime-image\" points to unsigned JDK bundle and --mac-sign is not\n+ * provided. Expected result: runtime image ad-hoc signed.\n+ * 2) \"--runtime-image\" points to unsigned JDK bundle and --mac-sign is\n+ * provided. Expected result: Everything is signed with provided certificate.\n+ * 3) \"--runtime-image\" points to signed JDK bundle and --mac-sign is not\n+ * provided. Expected result: runtime image is signed with original certificate.\n+ * 4) \"--runtime-image\" points to signed JDK bundle and --mac-sign is provided.\n+ * Expected result: runtime image is signed with provided certificate.\n+ * 5) \"--runtime-image\" points to JDK image and --mac-sign is not provided.\n+ * Expected result: runtime image ad-hoc signed.\n+ * 6) \"--runtime-image\" points to JDK image and --mac-sign is provided.\n+ * Expected result: Everything is signed with provided certificate.\n+ *\n+ * This test requires that the machine is configured with test certificate for\n+ * \"Developer ID Installer: jpackage.openjdk.java.net\" in\n+ * jpackagerTest keychain with\n+ * always allowed access to this keychain for user which runs test.\n+ * note:\n+ * \"jpackage.openjdk.java.net\" can be over-ridden by systerm property\n+ * \"jpackage.mac.signing.key.user.name\", and\n+ * \"jpackagerTest\" can be over-ridden by system property\n+ * \"jpackage.mac.signing.keychain\"\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary jpackage with --type pkg,dmg --runtime-image --mac-sign\n+ * @library \/test\/jdk\/tools\/jpackage\/helpers\n+ * @library base\n+ * @key jpackagePlatformPackage\n+ * @build SigningBase\n+ * @build jdk.jpackage.test.*\n+ * @build SigningRuntimeImagePackageTest\n+ * @requires (jpackage.test.MacSignTests == \"run\")\n+ * @run main\/othervm\/timeout=720 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=SigningRuntimeImagePackageTest\n+ *  --jpt-before-run=SigningBase.verifySignTestEnvReady\n+ *\/\n+public class SigningRuntimeImagePackageTest {\n+\n+    private static void verifyPKG(JPackageCommand cmd) {\n+        Path outputBundle = cmd.outputBundle();\n+        SigningBase.verifyPkgutil(outputBundle, isPKGSigned(cmd), getCertIndex(cmd));\n+        if (isPKGSigned(cmd)) {\n+            SigningBase.verifySpctl(outputBundle, \"install\", getCertIndex(cmd));\n+        }\n+    }\n+\n+    private static void verifyDMG(JPackageCommand cmd) {\n+        Path outputBundle = cmd.outputBundle();\n+        SigningBase.verifyDMG(outputBundle);\n+    }\n+\n+    private static void verifyRuntimeImageInDMG(JPackageCommand cmd,\n+                                                boolean isRuntimeImageSigned,\n+                                                int JDKBundleCertIndex) {\n+        MacHelper.withExplodedDmg(cmd, dmgImage -> {\n+            Path launcherPath = ApplicationLayout.platformAppImage()\n+                    .resolveAt(dmgImage).launchersDirectory().resolve(\"libjli.dylib\");\n+            \/\/ We will be called with all folders in DMG since JDK-8263155, but\n+            \/\/ we only need to verify JDK bundle.\n+            if (dmgImage.endsWith(cmd.name() + \".jdk\")) {\n+                SigningBase.verifyCodesign(launcherPath, isRuntimeImageSigned,\n+                        JDKBundleCertIndex);\n+                SigningBase.verifyCodesign(dmgImage, isRuntimeImageSigned,\n+                        JDKBundleCertIndex);\n+                if (isRuntimeImageSigned) {\n+                    SigningBase.verifySpctl(dmgImage, \"exec\", JDKBundleCertIndex);\n+                }\n+            }\n+        });\n+    }\n+\n+    private static boolean isPKGSigned(JPackageCommand cmd) {\n+        return cmd.hasArgument(\"--mac-signing-key-user-name\") ||\n+               cmd.hasArgument(\"--mac-installer-sign-identity\");\n+    }\n+\n+    private static int getCertIndex(JPackageCommand cmd) {\n+        if (cmd.hasArgument(\"--mac-signing-key-user-name\")) {\n+            String devName = cmd.getArgumentValue(\"--mac-signing-key-user-name\");\n+            return SigningBase.getDevNameIndex(devName);\n+        } else {\n+            return SigningBase.CertIndex.INVALID_INDEX.value();\n+        }\n+    }\n+\n+    private static Path getRuntimeImagePath(boolean useJDKBundle,\n+                                            boolean isRuntimeImageSigned,\n+                                            int JDKBundleCertIndex) throws IOException {\n+        final Path runtimeBundleDir =\n+                TKit.createTempDirectory(\"runtimebundle\");\n+        final Path runtimeImageImage =\n+                runtimeBundleDir.resolve(\"image\");\n+\n+        new Executor()\n+            .setToolProvider(JavaTool.JLINK)\n+            .dumpOutput()\n+            .addArguments(\n+                \"--output\", runtimeImageImage.toString(),\n+                \"--add-modules\", \"java.desktop\",\n+                \"--strip-debug\",\n+                \"--no-header-files\",\n+                \"--no-man-pages\")\n+            .execute();\n+\n+        if (useJDKBundle) {\n+            \/\/ We will use jpackage to create JDK bundle from image signed or\n+            \/\/ unsigned.\n+\n+            final Path runtimeBundleDMG =\n+                runtimeBundleDir.resolve(\"dmg\");\n+            final Path runtimeBundleBundle =\n+                runtimeBundleDir.resolve(\"bundle\");\n+\n+            Executor ex = new Executor();\n+            ex.setToolProvider(JavaTool.JPACKAGE)\n+            .dumpOutput()\n+            .addArguments(\n+                \"--type\", \"dmg\",\n+                \"--name\", \"foo\",\n+                \"--runtime-image\", runtimeImageImage.toAbsolutePath().toString(),\n+                \"--dest\", runtimeBundleDMG.toAbsolutePath().toString());\n+\n+            if (isRuntimeImageSigned) {\n+                ex.addArguments(\n+                    \"--mac-sign\",\n+                    \"--mac-signing-keychain\", SigningBase.getKeyChain(),\n+                    \"--mac-signing-key-user-name\", SigningBase.getDevName(JDKBundleCertIndex));\n+            }\n+\n+            ex.execute();\n+\n+            JPackageCommand dummyCMD = new JPackageCommand();\n+            dummyCMD.addArguments(\n+                \"--type\", \"dmg\",\n+                \"--name\", \"foo\",\n+                \"--dest\", runtimeBundleDMG.toAbsolutePath().toString()\n+                );\n+\n+            MacHelper.withExplodedDmg(dummyCMD, dmgImage -> {\n+                if (dmgImage.endsWith(dummyCMD.name() + \".jdk\")) {\n+                    Executor.of(\"cp\", \"-R\")\n+                            .addArgument(dmgImage)\n+                            .addArgument(runtimeBundleBundle.toAbsolutePath().toString())\n+                            .execute(0);\n+                }\n+            });\n+\n+            return runtimeBundleBundle.toAbsolutePath();\n+        } else {\n+            return runtimeImageImage.toAbsolutePath();\n+        }\n+    }\n+\n+    @Test\n+    \/\/ useJDKBundle  - If \"true\" predefined runtime image will be converted to\n+    \/\/                 JDK bundle. If \"false\" JDK image will be used.\n+    \/\/ JDKBundleCert - Certificate to sign JDK bundle before calling jpackage.\n+    \/\/ signCert      - Certificate to sign bundle produced by jpackage.\n+    \/\/ 1) unsigned JDK bundle and --mac-sign is not provided\n+    @Parameter({\"true\", \"INVALID_INDEX\", \"INVALID_INDEX\"})\n+    \/\/ 2) unsigned JDK bundle and --mac-sign is provided\n+    @Parameter({\"true\", \"INVALID_INDEX\", \"ASCII_INDEX\"})\n+    \/\/ 3) signed JDK bundle and --mac-sign is not provided\n+    @Parameter({\"true\", \"UNICODE_INDEX\", \"INVALID_INDEX\"})\n+    \/\/ 4) signed JDK bundle and --mac-sign is provided\n+    @Parameter({\"true\", \"UNICODE_INDEX\", \"ASCII_INDEX\"})\n+    \/\/ 5) JDK image and --mac-sign is not provided\n+    @Parameter({\"false\", \"INVALID_INDEX\", \"INVALID_INDEX\"})\n+    \/\/ 6) JDK image and --mac-sign is provided\n+    @Parameter({\"false\", \"INVALID_INDEX\", \"ASCII_INDEX\"})\n+    public static void test(boolean useJDKBundle,\n+                            SigningBase.CertIndex JDKBundleCert,\n+                            SigningBase.CertIndex signCert) throws Exception {\n+        final int JDKBundleCertIndex = JDKBundleCert.value();\n+        final int signCertIndex = signCert.value();\n+\n+        final boolean isRuntimeImageSigned =\n+            (JDKBundleCertIndex != SigningBase.CertIndex.INVALID_INDEX.value());\n+        final boolean isSigned =\n+            (signCertIndex != SigningBase.CertIndex.INVALID_INDEX.value());\n+\n+        new PackageTest()\n+                .forTypes(PackageType.MAC)\n+                .addInitializer(cmd -> {\n+                    cmd.addArguments(\"--runtime-image\",\n+                        getRuntimeImagePath(useJDKBundle,\n+                            isRuntimeImageSigned, JDKBundleCertIndex));\n+                    \/\/ Remove --input parameter from jpackage command line as we don't\n+                    \/\/ create input directory in the test and jpackage fails\n+                    \/\/ if --input references non existant directory.\n+                    cmd.removeArgumentWithValue(\"--input\");\n+\n+                    if (isSigned) {\n+                        cmd.addArguments(\"--mac-sign\",\n+                                \"--mac-signing-keychain\", SigningBase.getKeyChain());\n+                        cmd.addArguments(\"--mac-signing-key-user-name\",\n+                                         SigningBase.getDevName(signCertIndex));\n+                    }\n+                })\n+                .forTypes(PackageType.MAC_PKG)\n+                .addBundleVerifier(SigningRuntimeImagePackageTest::verifyPKG)\n+                .forTypes(PackageType.MAC_DMG)\n+                .addBundleVerifier(SigningRuntimeImagePackageTest::verifyDMG)\n+                .addBundleVerifier(cmd -> {\n+                    int certIndex = SigningBase.CertIndex.INVALID_INDEX.value();\n+                    if (isSigned)\n+                        certIndex = signCertIndex;\n+                    else if (isRuntimeImageSigned)\n+                        certIndex = JDKBundleCertIndex;\n+                    verifyRuntimeImageInDMG(cmd, isRuntimeImageSigned || isSigned,\n+                        certIndex);\n+                })\n+                .run();\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningRuntimeImagePackageTest.java","additions":263,"deletions":0,"binary":false,"changes":263,"status":"added"},{"patch":"@@ -31,0 +31,1 @@\n+import java.nio.file.Files;\n@@ -43,0 +44,3 @@\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+\n@@ -91,0 +95,23 @@\n+        INVALID_MAC_JDK_BUNDLE(cmd -> {\n+            \/\/ Missing \"Contents\/MacOS\/libjli.dylib\"\n+            try {\n+                final Path runtimePath = TKit.createTempDirectory(\"invalidJDKBundle\");\n+                Files.createDirectories(runtimePath.resolve(\"Contents\/Home\"));\n+                Files.createFile(runtimePath.resolve(\"Contents\/Info.plist\"));\n+                return runtimePath.toAbsolutePath().toString();\n+            } catch (IOException ex) {\n+                throw new UncheckedIOException(ex);\n+            }\n+        }),\n+        INVALID_JDK_IMAGE(cmd -> {\n+            \/\/ Missing \"\"lib\/*\/libjli.dylib\"\"\n+            try {\n+                final Path runtimePath = TKit.createTempDirectory(\"invalidJDKImage\");\n+                Files.createDirectories(runtimePath.resolve(\"jmods\"));\n+                Files.createDirectories(runtimePath.resolve(\"lib\"));\n+                Files.createFile(runtimePath.resolve(\"lib\/src.zip\"));\n+                return runtimePath.toAbsolutePath().toString();\n+            } catch (IOException ex) {\n+                throw new UncheckedIOException(ex);\n+            }\n+        }),\n@@ -606,1 +633,13 @@\n-                        }, Token.JAVA_HOME.token()))\n+                        }, Token.JAVA_HOME.token())),\n+                testSpec().noAppDesc().nativeType()\n+                        .addArgs(\"--runtime-image\", Token.INVALID_MAC_JDK_BUNDLE.token())\n+                        .error(\"message.runtime-image-invalid\", JPackageCommand.cannedArgument(cmd -> {\n+                            return Path.of(cmd.getArgumentValue(\"--runtime-image\")).toAbsolutePath();\n+                        }, Token.INVALID_MAC_JDK_BUNDLE.token()))\n+                        .error(\"message.runtime-image-invalid.advice\"),\n+                testSpec().noAppDesc().nativeType()\n+                        .addArgs(\"--runtime-image\", Token.INVALID_JDK_IMAGE.token())\n+                        .error(\"message.runtime-image-invalid\", JPackageCommand.cannedArgument(cmd -> {\n+                            return Path.of(cmd.getArgumentValue(\"--runtime-image\")).toAbsolutePath();\n+                        }, Token.INVALID_JDK_IMAGE.token()))\n+                        .error(\"message.runtime-image-invalid.advice\")\n","filename":"test\/jdk\/tools\/jpackage\/share\/ErrorTest.java","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"}]}