{"files":[{"patch":"@@ -30,1 +30,0 @@\n-import static jdk.jpackage.internal.StandardBundlerParam.PREDEFINED_RUNTIME_IMAGE;\n@@ -33,1 +32,0 @@\n-import java.io.IOException;\n@@ -38,1 +36,0 @@\n-import java.util.NoSuchElementException;\n@@ -40,1 +37,0 @@\n-import java.util.stream.Stream;\n@@ -70,17 +66,0 @@\n-        } else if (StandardBundlerParam.isRuntimeInstaller(params)) {\n-            \/\/ Call appImageBundler.validate(params); to validate signing\n-            \/\/ requirements.\n-            appImageBundler.validate(params);\n-\n-            Path runtimeImage = PREDEFINED_RUNTIME_IMAGE.fetchFrom(params);\n-\n-            \/\/ Make sure we have valid runtime image.\n-            if (!isRuntimeImageJDKBundle(runtimeImage)\n-                    && !isRuntimeImageJDKImage(runtimeImage)) {\n-                throw new ConfigException(\n-                    MessageFormat.format(I18N.getString(\n-                    \"message.runtime-image-invalid\"),\n-                    runtimeImage.toString()),\n-                    I18N.getString(\n-                    \"message.runtime-image-invalid.advice\"));\n-            }\n@@ -97,28 +76,0 @@\n-    \/\/ JDK bundle: \"Contents\/Home\", \"Contents\/MacOS\/libjli.dylib\"\n-    \/\/ and \"Contents\/Info.plist\"\n-    private static boolean isRuntimeImageJDKBundle(Path runtimeImage) {\n-        Path path1 = runtimeImage.resolve(\"Contents\/Home\");\n-        Path path2 = runtimeImage.resolve(\"Contents\/MacOS\/libjli.dylib\");\n-        Path path3 = runtimeImage.resolve(\"Contents\/Info.plist\");\n-        return IOUtils.exists(path1)\n-                && path1.toFile().list() != null\n-                && path1.toFile().list().length > 0\n-                && IOUtils.exists(path2)\n-                && IOUtils.exists(path3);\n-    }\n-\n-    \/\/ JDK image: \"lib\/*\/libjli.dylib\"\n-    static boolean isRuntimeImageJDKImage(Path runtimeImage) {\n-        final Path jliName = Path.of(\"libjli.dylib\");\n-        try (Stream<Path> walk = Files.walk(runtimeImage.resolve(\"lib\"))) {\n-            final Path jli = walk\n-                    .filter(file -> file.getFileName().equals(jliName))\n-                    .findFirst()\n-                    .get();\n-            return IOUtils.exists(jli);\n-        } catch (IOException | NoSuchElementException ex) {\n-            Log.verbose(ex);\n-            return false;\n-        }\n-    }\n-\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacBaseInstallerBundler.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+import java.nio.file.NoSuchFileException;\n@@ -57,0 +58,2 @@\n+import java.util.NoSuchElementException;\n+import java.util.stream.Stream;\n@@ -181,0 +184,9 @@\n+        \/\/ Make sure we have valid runtime image.\n+        Path runtimeImage = PREDEFINED_RUNTIME_IMAGE.fetchFrom(params);\n+        if (!isRuntimeImageJDKBundle(runtimeImage)\n+                && !isRuntimeImageJDKImage(runtimeImage)) {\n+            throw new ConfigException(\n+                I18N.format(\"message.runtime-image-invalid\", runtimeImage),\n+                I18N.getString(\"message.runtime-image-invalid.advice\"));\n+        }\n+\n@@ -198,0 +210,30 @@\n+\n+    \/\/ JDK bundle: \"Contents\/Home\", \"Contents\/MacOS\/libjli.dylib\"\n+    \/\/ and \"Contents\/Info.plist\"\n+    private static boolean isRuntimeImageJDKBundle(Path runtimeImage) {\n+        Path path1 = runtimeImage.resolve(\"Contents\/Home\");\n+        Path path2 = runtimeImage.resolve(\"Contents\/MacOS\/libjli.dylib\");\n+        Path path3 = runtimeImage.resolve(\"Contents\/Info.plist\");\n+        return IOUtils.exists(path1)\n+                && path1.toFile().list() != null\n+                && path1.toFile().list().length > 0\n+                && IOUtils.exists(path2)\n+                && IOUtils.exists(path3);\n+    }\n+\n+    \/\/ JDK image: \"lib\/*\/libjli.dylib\"\n+    private static boolean isRuntimeImageJDKImage(Path runtimeImage) {\n+        final Path jliName = Path.of(\"libjli.dylib\");\n+        try (Stream<Path> walk = Files.walk(runtimeImage.resolve(\"lib\"))) {\n+            final Path jli = walk\n+                    .filter(file -> file.getFileName().equals(jliName))\n+                    .findFirst()\n+                    .get();\n+            return IOUtils.exists(jli);\n+        } catch (NoSuchElementException | NoSuchFileException ex) {\n+            return false;\n+        } catch (IOException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacFromParams.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-            if (((MacPackage)pkg).isRuntimeImageJDKImage()) {\n+            if (isRuntimeImageJDKImage(pkg)) {\n@@ -200,1 +200,1 @@\n-                if (((MacPackage)p).isRuntimeImageJDKImage()) {\n+                if (isRuntimeImageJDKImage(p)) {\n@@ -209,1 +209,1 @@\n-                if (((MacPackage)p).isRuntimeJDKBundleNeedSigning()) {\n+                if (isRuntimeJDKBundleNeedSigning(p)) {\n@@ -290,1 +290,1 @@\n-        writeRuntimeBundleInfoPlist(env.pkg().app(), env.env(), env.resolvedLayout().rootDirectory());\n+        writeRuntimeInfoPlist(env.pkg().app(), env.env(), env.resolvedLayout().rootDirectory());\n@@ -299,0 +299,1 @@\n+        boolean isRuntimeBundle = !app.asApplicationLayout().isPresent();\n@@ -305,0 +306,3 @@\n+        if (isRuntimeBundle) {\n+            data.put(\"CF_BUNDLE_VENDOR\", app.vendor());\n+        }\n@@ -306,15 +310,6 @@\n-        env.createResource(\"Runtime-Info.plist.template\")\n-                .setPublicName(\"Runtime-Info.plist\")\n-                .setCategory(I18N.getString(\"resource.runtime-info-plist\"))\n-                .setSubstitutionData(data)\n-                .saveToFile(runtimeRootDirectory.resolve(\"Contents\/Info.plist\"));\n-    }\n-\n-    private static void writeRuntimeBundleInfoPlist(MacApplication app, BuildEnv env, Path runtimeRootDirectory) throws IOException {\n-\n-        Map<String, String> data = new HashMap<>();\n-        data.put(\"CF_BUNDLE_IDENTIFIER\", app.bundleIdentifier());\n-        data.put(\"CF_BUNDLE_NAME\", app.bundleName());\n-        data.put(\"CF_BUNDLE_VERSION\", app.version());\n-        data.put(\"CF_BUNDLE_SHORT_VERSION_STRING\", app.shortVersion().toString());\n-        data.put(\"CF_BUNDLE_VENDOR\", app.vendor());\n+        String template = isRuntimeBundle ?\n+            \"RuntimeBundle-Info.plist.template\" : \"Runtime-Info.plist.template\";\n+        String publicName = isRuntimeBundle ?\n+            \"RuntimeBundle-Info.plist\" : \"Runtime-Info.plist\";\n+        String category = isRuntimeBundle ?\n+            \"resource.runtime-bundle-info-plist\" : \"resource.runtime-info-plist\";\n@@ -322,3 +317,3 @@\n-        env.createResource(\"RuntimeBundle-Info.plist.template\")\n-                .setPublicName(\"RuntimeBundle-Info.plist\")\n-                .setCategory(I18N.getString(\"resource.runtime-bundle-info-plist\"))\n+        env.createResource(template)\n+                .setPublicName(publicName)\n+                .setCategory(I18N.getString(category))\n@@ -474,0 +469,30 @@\n+    private static boolean isRuntimeImageJDKImage(Package pkg) {\n+        if (pkg.isRuntimeInstaller()) {\n+            Path runtimeImage = ((MacPackage)pkg).app().runtimeImageDir().orElseThrow();\n+            Path p = runtimeImage.resolve(\"Contents\/Home\");\n+            return !Files.exists(p);\n+        }\n+\n+        return false;\n+    }\n+\n+    \/\/ Returns true if signing is requested or JDK bundle is not signed\n+    \/\/ or JDK image is provided.\n+    private static boolean isRuntimeJDKBundleNeedSigning(Package pkg) {\n+        if (!pkg.isRuntimeInstaller()) {\n+            return false;\n+        }\n+\n+        if (((MacPackage)pkg).app().sign()) {\n+            return true;\n+        }\n+\n+        if (isRuntimeImageJDKImage(pkg)) {\n+            return true;\n+        } else {\n+            Path runtimeImage = ((MacPackage)pkg).app().runtimeImageDir().orElseThrow();\n+            Path p = runtimeImage.resolve(\"Contents\/_CodeSignature\");\n+            return !Files.exists(p);\n+        }\n+    }\n+\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPackagingPipeline.java","additions":47,"deletions":22,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.nio.file.Files;\n@@ -48,30 +47,0 @@\n-    default boolean isRuntimeImageJDKImage() {\n-        if (isRuntimeInstaller()) {\n-            Path runtimeImage = app().runtimeImage().orElseThrow();\n-            Path p = runtimeImage.resolve(\"Contents\/Home\");\n-            return !Files.exists(p);\n-        }\n-\n-        return false;\n-    }\n-\n-    \/\/ Returns true if signing is requested or JDK bundle is not signed\n-    \/\/ or JDK image is provided.\n-    default boolean isRuntimeJDKBundleNeedSigning() {\n-        if (!isRuntimeInstaller()) {\n-            return false;\n-        }\n-\n-        if (app().sign()) {\n-            return true;\n-        }\n-\n-        if (isRuntimeImageJDKImage()) {\n-            return true;\n-        } else {\n-            Path runtimeImage = app().runtimeImage().orElseThrow();\n-            Path p = runtimeImage.resolve(\"Contents\/_CodeSignature\");\n-            return !Files.exists(p);\n-        }\n-    }\n-\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/model\/MacPackage.java","additions":0,"deletions":31,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-                Optional.ofNullable(runtimeImage),\n+                Optional.ofNullable(runtimeImageDir),\n@@ -151,2 +151,2 @@\n-    ApplicationBuilder runtimeImage(Path v) {\n-        runtimeImage = v;\n+    ApplicationBuilder runtimeImageDir(Path v) {\n+        runtimeImageDir = v;\n@@ -196,1 +196,1 @@\n-    private Path runtimeImage;\n+    private Path runtimeImageDir;\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/ApplicationBuilder.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-        PREDEFINED_RUNTIME_IMAGE.copyInto(params, appBuilder::runtimeImage);\n+        PREDEFINED_RUNTIME_IMAGE.copyInto(params, appBuilder::runtimeImageDir);\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/FromParams.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,2 +92,2 @@\n-     * Gets the source directory of this application if available or an empty\n-     * {@link Optional} instance.\n+     * Gets the runtime image directory of this runtime image or bundle if\n+     * available or an empty {@link Optional} instance.\n@@ -95,2 +95,2 @@\n-     * Source directory is a directory with the applications's classes and other\n-     * resources.\n+     * Runtime image directory is a directory with the runtime image or bundle\n+     * for runtime installers.\n@@ -98,1 +98,1 @@\n-     * @return the source directory of this application\n+     * @return the runtime image directory of this runtime image or bundle\n@@ -100,1 +100,1 @@\n-    Optional<Path> runtimeImage();\n+    Optional<Path> runtimeImageDir();\n@@ -259,1 +259,1 @@\n-            Optional<Path> runtimeImage, List<Path> contentDirs, AppImageLayout imageLayout, Optional<RuntimeBuilder> runtimeBuilder,\n+            Optional<Path> runtimeImageDir, List<Path> contentDirs, AppImageLayout imageLayout, Optional<RuntimeBuilder> runtimeBuilder,\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/model\/Application.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -970,6 +970,1 @@\n-        RUNTIME_IMAGE(new Builder(\"--runtime-image\").enable(cmd -> {\n-            \/\/ External runtime image should be R\/O unless it is runtime installer\n-            \/\/ on macOS. On macOS runtime image will be signed ad-hoc or with\n-            \/\/ real certificate when creating runtime installers.\n-            return !(cmd.isRuntime() && TKit.isOSX());\n-        }).create());\n+        RUNTIME_IMAGE(new Builder(\"--runtime-image\").create());\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n- * \"jpackage.openjdk.java.net\" can be over-ridden by systerm property\n+ * \"jpackage.openjdk.java.net\" can be over-ridden by system property\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageFromTwoStepAppImageTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- * \"jpackage.openjdk.java.net\" can be over-ridden by systerm property\n+ * \"jpackage.openjdk.java.net\" can be over-ridden by system property\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n- * \"jpackage.openjdk.java.net\" can be over-ridden by systerm property\n+ * \"jpackage.openjdk.java.net\" can be over-ridden by system property\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageTwoStepTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.jpackage.internal.util.FileUtils;\n@@ -65,1 +66,1 @@\n- * \"jpackage.openjdk.java.net\" can be over-ridden by systerm property\n+ * \"jpackage.openjdk.java.net\" can be over-ridden by system property\n@@ -102,1 +103,1 @@\n-                                                int JDKBundleCertIndex) {\n+                                                int jdkBundleCertIndex) {\n@@ -110,1 +111,1 @@\n-                        JDKBundleCertIndex);\n+                        jdkBundleCertIndex);\n@@ -112,1 +113,1 @@\n-                        JDKBundleCertIndex);\n+                        jdkBundleCertIndex);\n@@ -114,1 +115,1 @@\n-                    SigningBase.verifySpctl(dmgImage, \"exec\", JDKBundleCertIndex);\n+                    SigningBase.verifySpctl(dmgImage, \"exec\", jdkBundleCertIndex);\n@@ -134,3 +135,5 @@\n-    private static Path getRuntimeImagePath(boolean useJDKBundle,\n-                                            boolean isRuntimeImageSigned,\n-                                            int JDKBundleCertIndex) throws IOException {\n+    \/\/ Creates runtime image or bundle based on input parameters to be used as\n+    \/\/ input to jpackage. Returns path to created image or bundle.\n+    private static Path createInputRuntimeImageOrBundle(boolean useJDKBundle,\n+                                                        boolean isRuntimeImageSigned,\n+                                                        int jdkBundleCertIndex) throws IOException {\n@@ -175,1 +178,1 @@\n-                    \"--mac-signing-key-user-name\", SigningBase.getDevName(JDKBundleCertIndex));\n+                    \"--mac-signing-key-user-name\", SigningBase.getDevName(jdkBundleCertIndex));\n@@ -180,2 +183,4 @@\n-            JPackageCommand dummyCMD = new JPackageCommand();\n-            dummyCMD.addArguments(\n+            var cmd = new JPackageCommand()\n+                .useToolProvider(true)\n+                .dumpOutput(true)\n+                .addArguments(\n@@ -184,2 +189,1 @@\n-                \"--dest\", runtimeBundleDMG.toAbsolutePath().toString()\n-                );\n+                \"--dest\", runtimeBundleDMG.toAbsolutePath().toString());\n@@ -187,2 +191,2 @@\n-            MacHelper.withExplodedDmg(dummyCMD, dmgImage -> {\n-                if (dmgImage.endsWith(dummyCMD.name() + \".jdk\")) {\n+            MacHelper.withExplodedDmg(cmd, dmgImage -> {\n+                if (dmgImage.endsWith(cmd.name() + \".jdk\")) {\n@@ -220,1 +224,1 @@\n-                            SigningBase.CertIndex JDKBundleCert,\n+                            SigningBase.CertIndex jdkBundleCert,\n@@ -222,1 +226,1 @@\n-        final int JDKBundleCertIndex = JDKBundleCert.value();\n+        final int jdkBundleCertIndex = jdkBundleCert.value();\n@@ -226,1 +230,1 @@\n-            (JDKBundleCertIndex != SigningBase.CertIndex.INVALID_INDEX.value());\n+            (jdkBundleCertIndex != SigningBase.CertIndex.INVALID_INDEX.value());\n@@ -231,1 +235,0 @@\n-                .forTypes(PackageType.MAC)\n@@ -234,2 +237,2 @@\n-                        getRuntimeImagePath(useJDKBundle,\n-                            isRuntimeImageSigned, JDKBundleCertIndex));\n+                        createInputRuntimeImageOrBundle(useJDKBundle,\n+                            isRuntimeImageSigned, jdkBundleCertIndex));\n@@ -257,1 +260,1 @@\n-                        certIndex = JDKBundleCertIndex;\n+                        certIndex = jdkBundleCertIndex;\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningRuntimeImagePackageTest.java","additions":25,"deletions":22,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-                final Path runtimePath = TKit.createTempDirectory(\"invalidJDKBundle\");\n+                final Path runtimePath = TKit.createTempDirectory(\"invalid-jdk-bundle\");\n@@ -109,1 +109,1 @@\n-                final Path runtimePath = TKit.createTempDirectory(\"invalidJDKImage\");\n+                final Path runtimePath = TKit.createTempDirectory(\"invalid-jdk-image\");\n@@ -637,1 +637,1 @@\n-                            return Path.of(cmd.getArgumentValue(\"--runtime-image\")).toAbsolutePath();\n+                            return Path.of(cmd.getArgumentValue(\"--runtime-image\"));\n@@ -643,1 +643,1 @@\n-                            return Path.of(cmd.getArgumentValue(\"--runtime-image\")).toAbsolutePath();\n+                            return Path.of(cmd.getArgumentValue(\"--runtime-image\"));\n","filename":"test\/jdk\/tools\/jpackage\/share\/ErrorTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}