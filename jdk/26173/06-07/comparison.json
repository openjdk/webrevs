{"files":[{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jpackage.internal;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Objects;\n+import jdk.jpackage.internal.model.AppImageLayout;\n+\n+\/**\n+ * An abstraction of macOS Application bundle.\n+ *\n+ * @see <a href=\"https:\/\/en.wikipedia.org\/wiki\/Bundle_(macOS)#Application_bundles\">https:\/\/en.wikipedia.org\/wiki\/Bundle_(macOS)#Application_bundles<\/a>\n+ *\/\n+record MacBundle(Path root) {\n+\n+    MacBundle {\n+        Objects.requireNonNull(root);\n+    }\n+\n+    boolean isValid() {\n+        return Files.isDirectory(contentsDir()) && Files.isDirectory(macOsDir()) && Files.isRegularFile(infoPlistFile());\n+    }\n+\n+    boolean isSigned() {\n+        return Files.isDirectory(contentsDir().resolve(\"_CodeSignature\"));\n+    }\n+\n+    Path contentsDir() {\n+        return root.resolve(\"Contents\");\n+    }\n+\n+    Path homeDir() {\n+        return contentsDir().resolve(\"Home\");\n+    }\n+\n+    Path macOsDir() {\n+        return contentsDir().resolve(\"MacOS\");\n+    }\n+\n+    Path resourcesDir() {\n+        return contentsDir().resolve(\"Resources\");\n+    }\n+\n+    Path infoPlistFile() {\n+        return contentsDir().resolve(\"Info.plist\");\n+    }\n+\n+    static boolean isDirectoryMacBundle(Path dir) {\n+        return new MacBundle(dir).isValid();\n+    }\n+\n+    static MacBundle fromAppImageLayout(AppImageLayout layout) {\n+        return new MacBundle(layout.rootDirectory());\n+    }\n+}\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacBundle.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -46,1 +46,0 @@\n-import static jdk.jpackage.internal.StandardBundlerParam.isRuntimeInstaller;\n@@ -49,1 +48,0 @@\n-import java.io.UncheckedIOException;\n@@ -52,1 +50,0 @@\n-import java.nio.file.NoSuchFileException;\n@@ -59,2 +56,0 @@\n-import java.util.NoSuchElementException;\n-import java.util.stream.Stream;\n@@ -84,2 +79,1 @@\n-            if (!isRuntimeInstaller(params) &&\n-                    Files.isDirectory(RUNTIME_PACKAGE_LAYOUT.resolveAt(predefinedRuntimeImage).runtimeDirectory())) {\n+            if (Files.isDirectory(RUNTIME_PACKAGE_LAYOUT.resolveAt(predefinedRuntimeImage).runtimeDirectory())) {\n@@ -185,10 +179,5 @@\n-        \/\/ Make sure we have valid runtime image.\n-        if (PREDEFINED_RUNTIME_IMAGE.findIn(params).isPresent()) {\n-            Path runtimeImage = PREDEFINED_RUNTIME_IMAGE.fetchFrom(params);\n-            if (!isRuntimeImageJDKBundle(runtimeImage)\n-                    && !isRuntimeImageJDKImage(runtimeImage)) {\n-                throw new ConfigException(\n-                    I18N.format(\"message.runtime-image-invalid\", runtimeImage),\n-                    I18N.getString(\"message.runtime-image-invalid.advice\"));\n-            }\n-        }\n+        PREDEFINED_RUNTIME_IMAGE.findIn(params)\n+                .map(MacBundle::new)\n+                .filter(MacBundle::isValid)\n+                .map(MacBundle::isSigned)\n+                .ifPresent(builder::predefinedAppImageSigned);\n@@ -213,30 +202,0 @@\n-\n-    \/\/ JDK bundle: \"Contents\/Home\", \"Contents\/MacOS\/libjli.dylib\"\n-    \/\/ and \"Contents\/Info.plist\"\n-    private static boolean isRuntimeImageJDKBundle(Path runtimeImage) {\n-        Path path1 = runtimeImage.resolve(\"Contents\/Home\");\n-        Path path2 = runtimeImage.resolve(\"Contents\/MacOS\/libjli.dylib\");\n-        Path path3 = runtimeImage.resolve(\"Contents\/Info.plist\");\n-        return Files.exists(path1) &&\n-                    Optional.ofNullable(path1.toFile().list())\n-                            .map(list -> list.length > 0).orElse(false) &&\n-                    Files.exists(path2) &&\n-                    Files.exists(path3);\n-    }\n-\n-    \/\/ JDK image: \"lib\/*\/libjli.dylib\"\n-    private static boolean isRuntimeImageJDKImage(Path runtimeImage) {\n-        final Path jliName = Path.of(\"libjli.dylib\");\n-        try (Stream<Path> walk = Files.walk(runtimeImage.resolve(\"lib\"))) {\n-            final Path jli = walk\n-                    .filter(file -> file.getFileName().equals(jliName))\n-                    .findFirst()\n-                    .get();\n-            return Files.exists(jli);\n-        } catch (NoSuchElementException | NoSuchFileException ex) {\n-            return false;\n-        } catch (IOException ex) {\n-            throw new UncheckedIOException(ex);\n-        }\n-    }\n-\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacFromParams.java","additions":6,"deletions":47,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import static jdk.jpackage.internal.model.MacPackage.RUNTIME_PACKAGE_LAYOUT;\n@@ -45,0 +44,1 @@\n+import java.nio.file.LinkOption;\n@@ -75,1 +75,0 @@\n-import jdk.jpackage.internal.model.RuntimeLayout;\n@@ -77,0 +76,1 @@\n+import jdk.jpackage.internal.util.FileUtils;\n@@ -98,2 +98,1 @@\n-        COPY_SIGN,\n-        SIGN_RUNTIME_BUNDLE\n+        COPY_SIGN\n@@ -103,9 +102,1 @@\n-        if (pkg.isRuntimeInstaller()) {\n-            if (isRuntimeImageJDKImage(pkg)) {\n-                return RUNTIME_PACKAGE_LAYOUT.resolveAt(pkg.relativeInstallDir().getFileName());\n-            } else {\n-                return RuntimeLayout.DEFAULT.resolveAt(pkg.relativeInstallDir().getFileName());\n-            }\n-        } else {\n-            return pkg.appImageLayout().resolveAt(pkg.relativeInstallDir().getFileName());\n-        }\n+        return pkg.appImageLayout().resolveAt(pkg.relativeInstallDir().getFileName());\n@@ -120,3 +111,3 @@\n-                    final var withpredefinedAppImage =\n-                        pkg.flatMap(Package::predefinedAppImage).isPresent();\n-                    return new TaskContextProxy(appContext, false, withpredefinedAppImage);\n+                    final var isRuntimeInstaller = pkg.map(Package::isRuntimeInstaller).orElse(false);\n+                    final var withPredefinedAppImage = pkg.flatMap(Package::predefinedAppImage).isPresent();\n+                    return new TaskContextProxy(appContext, false, isRuntimeInstaller || withPredefinedAppImage);\n@@ -130,1 +121,1 @@\n-                        .applicationAction(MacPackagingPipeline::writeApplicationRuntimeInfoPlist)\n+                        .appImageAction(MacPackagingPipeline::writeRuntimeInfoPlist)\n@@ -133,1 +124,1 @@\n-                        .applicationAction(MacPackagingPipeline::copyApplicationRuntimeJliLib)\n+                        .appImageAction(MacPackagingPipeline::copyJliLib)\n@@ -153,0 +144,1 @@\n+                        .appImageAction(MacPackagingPipeline::writeRuntimeInfoPlist)\n@@ -156,3 +148,1 @@\n-                        .addDependencies(CopyAppImageTaskID.COPY)\n-                        .addDependents(PrimaryTaskID.COPY_APP_IMAGE).add()\n-                .task(MacCopyAppImageTaskID.SIGN_RUNTIME_BUNDLE)\n+                        .noaction()\n@@ -165,1 +155,1 @@\n-                        .applicationAction(MacPackagingPipeline::writeAppInfoPlist)\n+                        .applicationAction(MacPackagingPipeline::writeApplicationInfoPlist)\n@@ -193,1 +183,2 @@\n-                builder.task(MacCopyAppImageTaskID.REPLACE_APP_IMAGE_FILE).applicationAction(createWriteAppImageFileAction()).add();\n+                builder.task(MacCopyAppImageTaskID.REPLACE_APP_IMAGE_FILE)\n+                        .applicationAction(createWriteAppImageFileAction()).add();\n@@ -195,3 +186,9 @@\n-            } else if (p.isRuntimeInstaller() || ((MacPackage)p).predefinedAppImageSigned().orElse(false)) {\n-                \/\/ If this is a runtime package or a signed predefined app image,\n-                \/\/ don't create \".package\" file and don't sign it.\n+            } else if (p.isRuntimeInstaller()) {\n+\n+                builder.task(MacCopyAppImageTaskID.COPY_RUNTIME_JLILIB)\n+                        .appImageAction(MacPackagingPipeline::copyJliLib).add();\n+\n+                final var predefinedRuntimeBundle = Optional.of(\n+                        new MacBundle(p.predefinedAppImage().orElseThrow())).filter(MacBundle::isValid);\n+\n+                \/\/ Don't create \".package\" file.\n@@ -199,8 +196,6 @@\n-                disabledTasks.add(MacCopyAppImageTaskID.COPY_SIGN);\n-                if (isRuntimeImageJDKImage(p)) {\n-                    builder.task(MacCopyAppImageTaskID.COPY_RUNTIME_INFO_PLIST)\n-                           .packageAction(MacPackagingPipeline::writeRuntimeRuntimeInfoPlist)\n-                           .add();\n-                    builder.task(MacCopyAppImageTaskID.COPY_RUNTIME_JLILIB)\n-                            .packageAction(MacPackagingPipeline::copyRuntimeRuntimeJliLib)\n-                            .add();\n+\n+                if (predefinedRuntimeBundle.isPresent()) {\n+                    \/\/ The predefined app image is a macOS bundle.\n+                    \/\/ Disable all alterations of the input bundle, but keep the signing enabled.\n+                    disabledTasks.addAll(List.of(MacCopyAppImageTaskID.values()));\n+                    disabledTasks.remove(MacCopyAppImageTaskID.COPY_SIGN);\n@@ -209,4 +204,4 @@\n-                if (isRuntimeJDKBundleNeedSigning(p)) {\n-                    builder.task(MacCopyAppImageTaskID.SIGN_RUNTIME_BUNDLE)\n-                            .appImageAction(MacPackagingPipeline::sign)\n-                            .add();\n+                if (predefinedRuntimeBundle.map(MacBundle::isSigned).orElse(false) && !((MacPackage)p).app().sign()) {\n+                    \/\/ The predefined app image is a signed bundle; explicit signing is not requested for the package.\n+                    \/\/ Disable the signing, i.e. don't re-sign the input bundle.\n+                    disabledTasks.add(MacCopyAppImageTaskID.COPY_SIGN);\n@@ -214,0 +209,6 @@\n+            } else if (((MacPackage)p).predefinedAppImageSigned().orElse(false)) {\n+                \/\/ This is a signed predefined app image.\n+                \/\/ Don't create \".package\" file.\n+                disabledTasks.add(MacCopyAppImageTaskID.COPY_PACKAGE_FILE);\n+                \/\/ Don't sign the image.\n+                disabledTasks.add(MacCopyAppImageTaskID.COPY_SIGN);\n@@ -240,2 +241,0 @@\n-        PackagingPipeline.copyAppImage(srcAppImage, dstAppImage, !pkg.predefinedAppImageSigned().orElse(false));\n-    }\n@@ -243,4 +242,1 @@\n-    private static void copyRuntimeRuntimeJliLib(PackageBuildEnv<MacPackage, AppImageLayout> env) throws IOException {\n-        copyJliLib(env.resolvedLayout().rootDirectory(),\n-                   env.resolvedLayout().rootDirectory().resolve(\"Contents\/Home\"));\n-    }\n+        boolean predefinedAppImageSigned = pkg.predefinedAppImageSigned().orElse(false);\n@@ -248,4 +244,12 @@\n-    private static void copyApplicationRuntimeJliLib(\n-            AppImageBuildEnv<MacApplication, MacApplicationLayout> env) throws IOException {\n-        copyJliLib(env.resolvedLayout().runtimeRootDirectory(),\n-                   env.resolvedLayout().runtimeDirectory());\n+        var inputRootDirectory = srcAppImage.resolvedAppImagelayout().rootDirectory();\n+\n+        if (pkg.isRuntimeInstaller() && MacBundle.isDirectoryMacBundle(inputRootDirectory)) {\n+            \/\/ Building runtime package from the input runtime bundle.\n+            \/\/ Copy the input bundle verbatim.\n+            FileUtils.copyRecursive(\n+                    inputRootDirectory,\n+                    dstAppImage.resolvedAppImagelayout().rootDirectory(),\n+                    LinkOption.NOFOLLOW_LINKS);\n+        } else {\n+            PackagingPipeline.copyAppImage(srcAppImage, dstAppImage, !predefinedAppImageSigned);\n+        }\n@@ -254,1 +258,2 @@\n-    private static void copyJliLib(Path runtimeRootDirectory, Path runtimeLibRoot) throws IOException {\n+    private static void copyJliLib(\n+            AppImageBuildEnv<MacApplication, AppImageLayout> env) throws IOException {\n@@ -256,1 +261,1 @@\n-        final var runtimeMacOSDir = runtimeRootDirectory.resolve(\"Contents\/MacOS\");\n+        final var runtimeBundle = runtimeBundle(env);\n@@ -260,1 +265,1 @@\n-        try (var walk = Files.walk(runtimeLibRoot.resolve(\"lib\"))) {\n+        try (var walk = Files.walk(env.resolvedLayout().runtimeDirectory().resolve(\"lib\"))) {\n@@ -265,2 +270,2 @@\n-            Files.createDirectories(runtimeMacOSDir);\n-            Files.copy(jli, runtimeMacOSDir.resolve(jliName));\n+            Files.createDirectories(runtimeBundle.macOsDir());\n+            Files.copy(jli, runtimeBundle.macOsDir().resolve(jliName));\n@@ -289,3 +294,2 @@\n-    private static void writeRuntimeRuntimeInfoPlist(PackageBuildEnv<MacPackage, AppImageLayout> env) throws IOException {\n-        writeRuntimeInfoPlist(env.pkg().app(), env.env(), env.resolvedLayout().rootDirectory());\n-    }\n+    private static void writeRuntimeInfoPlist(\n+            AppImageBuildEnv<MacApplication, AppImageLayout> env) throws IOException {\n@@ -293,7 +297,1 @@\n-    private static void writeApplicationRuntimeInfoPlist(\n-            AppImageBuildEnv<MacApplication, MacApplicationLayout> env) throws IOException {\n-        writeRuntimeInfoPlist(env.app(), env.env(), env.resolvedLayout().runtimeRootDirectory());\n-    }\n-\n-    private static void writeRuntimeInfoPlist(MacApplication app, BuildEnv env, Path runtimeRootDirectory) throws IOException {\n-        boolean isRuntimeBundle = !app.asApplicationLayout().isPresent();\n+        final var app = env.app();\n@@ -306,1 +304,1 @@\n-        if (isRuntimeBundle) {\n+        if (app.isRuntime()) {\n@@ -310,6 +308,13 @@\n-        String template = isRuntimeBundle ?\n-            \"RuntimeBundle-Info.plist.template\" : \"Runtime-Info.plist.template\";\n-        String publicName = isRuntimeBundle ?\n-            \"RuntimeBundle-Info.plist\" : \"Runtime-Info.plist\";\n-        String category = isRuntimeBundle ?\n-            \"resource.runtime-bundle-info-plist\" : \"resource.runtime-info-plist\";\n+        final String template;\n+        final String publicName;\n+        final String category;\n+\n+        if (app.isRuntime()) {\n+            template = \"RuntimeBundle-Info.plist.template\";\n+            publicName = \"RuntimeBundle-Info.plist\";\n+            category = \"resource.runtime-bundle-info-plist\";\n+        } else {\n+            template = \"Runtime-Info.plist.template\";\n+            publicName = \"Runtime-Info.plist\";\n+            category = \"resource.runtime-info-plist\";\n+        }\n@@ -317,1 +322,1 @@\n-        env.createResource(template)\n+        env.env().createResource(template)\n@@ -321,1 +326,1 @@\n-                .saveToFile(runtimeRootDirectory.resolve(\"Contents\/Info.plist\"));\n+                .saveToFile(runtimeBundle(env).infoPlistFile());\n@@ -324,1 +329,1 @@\n-    private static void writeAppInfoPlist(\n+    private static void writeApplicationInfoPlist(\n@@ -329,1 +334,1 @@\n-        final var infoPlistFile = env.resolvedLayout().contentDirectory().resolve(\"Info.plist\");\n+        final var infoPlistFile = MacBundle.fromAppImageLayout(env.resolvedLayout()).infoPlistFile();\n@@ -463,23 +468,3 @@\n-    private static boolean isRuntimeImageJDKImage(Package pkg) {\n-        if (pkg.isRuntimeInstaller()) {\n-            Path runtimeImage = pkg.predefinedAppImage().orElseThrow();\n-            Path p = runtimeImage.resolve(\"Contents\/Home\");\n-            return !Files.exists(p);\n-        }\n-\n-        return false;\n-    }\n-\n-    \/\/ Returns true if signing is requested or JDK bundle is not signed\n-    \/\/ or JDK image is provided.\n-    private static boolean isRuntimeJDKBundleNeedSigning(Package pkg) {\n-        if (!pkg.isRuntimeInstaller()) {\n-            return false;\n-        }\n-\n-        if (((MacPackage)pkg).app().sign()) {\n-            return true;\n-        }\n-\n-        if (isRuntimeImageJDKImage(pkg)) {\n-            return true;\n+    private static MacBundle runtimeBundle(AppImageBuildEnv<MacApplication, AppImageLayout> env) {\n+        if (env.app().isRuntime()) {\n+            return new MacBundle(env.resolvedLayout().rootDirectory());\n@@ -487,3 +472,1 @@\n-            Path runtimeImage = pkg.predefinedAppImage().orElseThrow();\n-            Path p = runtimeImage.resolve(\"Contents\/_CodeSignature\");\n-            return !Files.exists(p);\n+            return new MacBundle(((MacApplicationLayout)env.resolvedLayout()).runtimeRootDirectory());\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPackagingPipeline.java","additions":83,"deletions":100,"binary":false,"changes":183,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+        final String suffix;\n@@ -58,5 +59,1 @@\n-            if (Application.super.appImageDirName().toString().endsWith(\".jdk\")) {\n-                return Application.super.appImageDirName();\n-            } else {\n-                return Path.of(Application.super.appImageDirName().toString() + \".jdk\");\n-            }\n+            suffix = \".jdk\";\n@@ -64,1 +61,1 @@\n-            return Path.of(Application.super.appImageDirName().toString() + \".app\");\n+            suffix = \".app\";\n@@ -66,0 +63,1 @@\n+        return Path.of(Application.super.appImageDirName().toString() + suffix);\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/model\/MacApplication.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-            return RuntimeLayout.DEFAULT;\n+            return RUNTIME_PACKAGE_LAYOUT;\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/model\/MacPackage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,2 +86,0 @@\n-message.runtime-image-invalid=Provided runtime image at \"{0}\" is invalid or corrupted.\n-message.runtime-image-invalid.advice=Runtime image should be valid JDK bundle or JDK image.\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources.properties","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-            builder.appImageDir(StandardBundlerParam.getpredefinedAppImage(params));\n+            builder.appImageDir(StandardBundlerParam.getPredefinedAppImage(params));\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/BuildEnvFromParams.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import static jdk.jpackage.internal.StandardBundlerParam.PREDEFINED_APP_IMAGE;\n@@ -49,1 +50,0 @@\n-import static jdk.jpackage.internal.StandardBundlerParam.getpredefinedAppImage;\n@@ -146,1 +146,2 @@\n-        builder.predefinedAppImage(getpredefinedAppImage(params));\n+        PREDEFINED_APP_IMAGE.findIn(params).ifPresent(builder::predefinedAppImage);\n+        PREDEFINED_RUNTIME_IMAGE.findIn(params).ifPresent(builder::predefinedAppImage);\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/FromParams.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -440,4 +440,2 @@\n-            srcAppImageDesc = new AppImageDesc(pkg.app().imageLayout(), pkg.predefinedAppImage().orElseGet(() -> {\n-                \/\/ Can't create app image without runtime builder.\n-                throw new UnsupportedOperationException();\n-            }));\n+            srcAppImageDesc = new AppImageDesc(pkg.app().imageLayout(),\n+                    pkg.predefinedAppImage().orElseThrow(UnsupportedOperationException::new));\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/PackagingPipeline.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-                    var appImage = getpredefinedAppImage(params);\n+                    var appImage = getPredefinedAppImage(params);\n@@ -536,5 +536,3 @@\n-    \/\/ Returns predefined application image or in case of runtime installer\n-    \/\/ returns predefined runtime image.\n-    static Path getpredefinedAppImage(Map<String, ? super Object> params) {\n-        Path appOrRuntimeImage = PREDEFINED_APP_IMAGE.fetchFrom(params);\n-        if (appOrRuntimeImage != null && !Files.exists(appOrRuntimeImage)) {\n+    static Path getPredefinedAppImage(Map<String, ? super Object> params) {\n+        Path applicationImage = PREDEFINED_APP_IMAGE.fetchFrom(params);\n+        if (applicationImage != null && !IOUtils.exists(applicationImage)) {\n@@ -545,3 +543,1 @@\n-                            appOrRuntimeImage.toString()));\n-        } else if (isRuntimeInstaller(params)) {\n-            return PREDEFINED_RUNTIME_IMAGE.fetchFrom(params);\n+                            applicationImage.toString()));\n@@ -549,1 +545,1 @@\n-        return appOrRuntimeImage;\n+        return applicationImage;\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/StandardBundlerParam.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -403,0 +403,8 @@\n+    private static Set<Path> createBundleContents(String... customItems) {\n+        return Stream.concat(Stream.of(customItems), Stream.of(\n+                \"MacOS\",\n+                \"Info.plist\",\n+                \"_CodeSignature\"\n+        )).map(Path::of).collect(toSet());\n+    }\n+\n@@ -408,3 +416,1 @@\n-    private static final Set<Path> APP_BUNDLE_CONTENTS = Stream.of(\n-            \"Info.plist\",\n-            \"MacOS\",\n+    private static final Set<Path> APP_BUNDLE_CONTENTS = createBundleContents(\n@@ -414,10 +420,6 @@\n-            \"PkgInfo\",\n-            \"_CodeSignature\"\n-    ).map(Path::of).collect(toSet());\n-\n-    private static final Set<Path> RUNTIME_BUNDLE_CONTENTS = Stream.of(\n-            \"Home\",\n-            \"MacOS\",\n-            \"Info.plist\",\n-            \"_CodeSignature\"\n-    ).map(Path::of).collect(toSet());\n+            \"PkgInfo\"\n+    );\n+\n+    private static final Set<Path> RUNTIME_BUNDLE_CONTENTS = createBundleContents(\n+            \"Home\"\n+    );\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacHelper.java","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-import java.nio.file.Path;\n@@ -26,2 +25,6 @@\n-\n-import jdk.jpackage.test.ApplicationLayout;\n+import java.nio.file.Path;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+import jdk.jpackage.test.Annotations.Parameter;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.Executor;\n@@ -29,0 +32,2 @@\n+import jdk.jpackage.test.JavaTool;\n+import jdk.jpackage.test.MacHelper;\n@@ -31,3 +36,0 @@\n-import jdk.jpackage.test.MacHelper;\n-import jdk.jpackage.test.Annotations.Test;\n-import jdk.jpackage.test.Annotations.Parameter;\n@@ -35,3 +37,0 @@\n-import jdk.jpackage.test.JavaTool;\n-import jdk.jpackage.test.Executor;\n-import jdk.jpackage.internal.util.FileUtils;\n@@ -88,5 +87,6 @@\n-    private static void verifyPKG(JPackageCommand cmd) {\n-        Path outputBundle = cmd.outputBundle();\n-        SigningBase.verifyPkgutil(outputBundle, isPKGSigned(cmd), getCertIndex(cmd));\n-        if (isPKGSigned(cmd)) {\n-            SigningBase.verifySpctl(outputBundle, \"install\", getCertIndex(cmd));\n+    private static JPackageCommand addSignOptions(JPackageCommand cmd, int certIndex) {\n+        if (certIndex != SigningBase.CertIndex.INVALID_INDEX.value()) {\n+            cmd.addArguments(\n+                    \"--mac-sign\",\n+                    \"--mac-signing-keychain\", SigningBase.getKeyChain(),\n+                    \"--mac-signing-key-user-name\", SigningBase.getDevName(certIndex));\n@@ -94,0 +94,1 @@\n+        return cmd;\n@@ -96,4 +97,1 @@\n-    private static void verifyDMG(JPackageCommand cmd) {\n-        Path outputBundle = cmd.outputBundle();\n-        SigningBase.verifyDMG(outputBundle);\n-    }\n+    private static Path createInputRuntimeImage() throws IOException {\n@@ -101,24 +99,1 @@\n-    private static void verifyRuntimeImageInDMG(JPackageCommand cmd,\n-                                                boolean isRuntimeImageSigned,\n-                                                int jdkBundleCertIndex) {\n-        MacHelper.withExplodedDmg(cmd, dmgImage -> {\n-            Path launcherPath = ApplicationLayout.platformAppImage()\n-                    .resolveAt(dmgImage).launchersDirectory().resolve(\"libjli.dylib\");\n-            \/\/ We will be called with all folders in DMG since JDK-8263155, but\n-            \/\/ we only need to verify JDK bundle.\n-            if (dmgImage.endsWith(cmd.name() + \".jdk\")) {\n-                SigningBase.verifyCodesign(launcherPath, isRuntimeImageSigned,\n-                        jdkBundleCertIndex);\n-                SigningBase.verifyCodesign(dmgImage, isRuntimeImageSigned,\n-                        jdkBundleCertIndex);\n-                if (isRuntimeImageSigned) {\n-                    SigningBase.verifySpctl(dmgImage, \"exec\", jdkBundleCertIndex);\n-                }\n-            }\n-        });\n-    }\n-\n-    private static boolean isPKGSigned(JPackageCommand cmd) {\n-        return cmd.hasArgument(\"--mac-signing-key-user-name\") ||\n-               cmd.hasArgument(\"--mac-installer-sign-identity\");\n-    }\n+        final Path runtimeImageDir;\n@@ -126,4 +101,2 @@\n-    private static int getCertIndex(JPackageCommand cmd) {\n-        if (cmd.hasArgument(\"--mac-signing-key-user-name\")) {\n-            String devName = cmd.getArgumentValue(\"--mac-signing-key-user-name\");\n-            return SigningBase.getDevNameIndex(devName);\n+        if (JPackageCommand.DEFAULT_RUNTIME_IMAGE != null) {\n+            runtimeImageDir = JPackageCommand.DEFAULT_RUNTIME_IMAGE;\n@@ -131,1 +104,11 @@\n-            return SigningBase.CertIndex.INVALID_INDEX.value();\n+            runtimeImageDir = TKit.createTempDirectory(\"runtime-image\").resolve(\"data\");\n+\n+            new Executor().setToolProvider(JavaTool.JLINK)\n+                    .dumpOutput()\n+                    .addArguments(\n+                            \"--output\", runtimeImageDir.toString(),\n+                            \"--add-modules\", \"java.desktop\",\n+                            \"--strip-debug\",\n+                            \"--no-header-files\",\n+                            \"--no-man-pages\")\n+                    .execute();\n@@ -133,11 +116,0 @@\n-    }\n-\n-    \/\/ Creates runtime image or bundle based on input parameters to be used as\n-    \/\/ input to jpackage. Returns path to created image or bundle.\n-    private static Path createInputRuntimeImageOrBundle(boolean useJDKBundle,\n-                                                        boolean isRuntimeImageSigned,\n-                                                        int jdkBundleCertIndex) throws IOException {\n-        final Path runtimeBundleDir =\n-                TKit.createTempDirectory(\"runtimebundle\");\n-        final Path runtimeImageImage =\n-                runtimeBundleDir.resolve(\"image\");\n@@ -145,10 +117,2 @@\n-        new Executor()\n-            .setToolProvider(JavaTool.JLINK)\n-            .dumpOutput()\n-            .addArguments(\n-                \"--output\", runtimeImageImage.toString(),\n-                \"--add-modules\", \"java.desktop\",\n-                \"--strip-debug\",\n-                \"--no-header-files\",\n-                \"--no-man-pages\")\n-            .execute();\n+        return runtimeImageDir;\n+    }\n@@ -156,3 +120,1 @@\n-        if (useJDKBundle) {\n-            \/\/ We will use jpackage to create JDK bundle from image signed or\n-            \/\/ unsigned.\n+    private static Path createInputRuntimeBundle(int certIndex) throws IOException {\n@@ -160,4 +122,1 @@\n-            final Path runtimeBundleDMG =\n-                runtimeBundleDir.resolve(\"dmg\");\n-            final Path runtimeBundleBundle =\n-                runtimeBundleDir.resolve(\"bundle\");\n+        final var runtimeImage = createInputRuntimeImage();\n@@ -165,8 +124,1 @@\n-            Executor ex = new Executor();\n-            ex.setToolProvider(JavaTool.JPACKAGE)\n-            .dumpOutput()\n-            .addArguments(\n-                \"--type\", \"dmg\",\n-                \"--name\", \"foo\",\n-                \"--runtime-image\", runtimeImageImage.toAbsolutePath().toString(),\n-                \"--dest\", runtimeBundleDMG.toAbsolutePath().toString());\n+        final var runtimeBundleWorkDir = TKit.createTempDirectory(\"runtime-bundle\");\n@@ -174,6 +126,1 @@\n-            if (isRuntimeImageSigned) {\n-                ex.addArguments(\n-                    \"--mac-sign\",\n-                    \"--mac-signing-keychain\", SigningBase.getKeyChain(),\n-                    \"--mac-signing-key-user-name\", SigningBase.getDevName(jdkBundleCertIndex));\n-            }\n+        final var unpackadeRuntimeBundleDir = runtimeBundleWorkDir.resolve(\"unpacked\");\n@@ -181,3 +128,1 @@\n-            ex.execute();\n-\n-            var cmd = new JPackageCommand()\n+        var cmd = new JPackageCommand()\n@@ -185,0 +130,1 @@\n+                .ignoreDefaultRuntime(true)\n@@ -186,4 +132,4 @@\n-                .addArguments(\n-                \"--type\", \"dmg\",\n-                \"--name\", \"foo\",\n-                \"--dest\", runtimeBundleDMG.toAbsolutePath().toString());\n+                .setPackageType(PackageType.MAC_DMG)\n+                .setArgumentValue(\"--name\", \"foo\")\n+                .addArguments(\"--runtime-image\", runtimeImage)\n+                .addArguments(\"--dest\", runtimeBundleWorkDir);\n@@ -191,8 +137,1 @@\n-            MacHelper.withExplodedDmg(cmd, dmgImage -> {\n-                if (dmgImage.endsWith(cmd.name() + \".jdk\")) {\n-                    Executor.of(\"cp\", \"-R\")\n-                            .addArgument(dmgImage)\n-                            .addArgument(runtimeBundleBundle.toAbsolutePath().toString())\n-                            .execute(0);\n-                }\n-            });\n+        addSignOptions(cmd, certIndex);\n@@ -200,4 +139,12 @@\n-            return runtimeBundleBundle.toAbsolutePath();\n-        } else {\n-            return runtimeImageImage.toAbsolutePath();\n-        }\n+        cmd.execute();\n+\n+        MacHelper.withExplodedDmg(cmd, dmgImage -> {\n+            if (dmgImage.endsWith(cmd.appInstallationDirectory().getFileName())) {\n+                Executor.of(\"cp\", \"-R\")\n+                        .addArgument(dmgImage)\n+                        .addArgument(unpackadeRuntimeBundleDir)\n+                        .execute(0);\n+            }\n+        });\n+\n+        return unpackadeRuntimeBundleDir;\n@@ -226,2 +173,0 @@\n-        final int jdkBundleCertIndex = jdkBundleCert.value();\n-        final int signCertIndex = signCert.value();\n@@ -229,4 +174,1 @@\n-        final boolean isRuntimeImageSigned =\n-            (jdkBundleCertIndex != SigningBase.CertIndex.INVALID_INDEX.value());\n-        final boolean isSigned =\n-            (signCertIndex != SigningBase.CertIndex.INVALID_INDEX.value());\n+        final Path inputRuntime[] = new Path[1];\n@@ -235,0 +177,7 @@\n+                .addRunOnceInitializer(() -> {\n+                    if (useJDKBundle) {\n+                        inputRuntime[0] = createInputRuntimeBundle(jdkBundleCert.value());\n+                    } else {\n+                        inputRuntime[0] = createInputRuntimeImage();\n+                    }\n+                })\n@@ -236,3 +185,1 @@\n-                    cmd.addArguments(\"--runtime-image\",\n-                        createInputRuntimeImageOrBundle(useJDKBundle,\n-                            isRuntimeImageSigned, jdkBundleCertIndex));\n+                    cmd.addArguments(\"--runtime-image\", inputRuntime[0]);\n@@ -241,1 +188,1 @@\n-                    \/\/ if --input references non existant directory.\n+                    \/\/ if --input references non existent directory.\n@@ -243,0 +190,10 @@\n+                    addSignOptions(cmd, signCert.value());\n+                })\n+                .addInstallVerifier(cmd -> {\n+                    final var certIndex = Stream.of(signCert, jdkBundleCert)\n+                            .filter(Predicate.isEqual(SigningBase.CertIndex.INVALID_INDEX).negate())\n+                            .findFirst().orElse(SigningBase.CertIndex.INVALID_INDEX).value();\n+\n+                    final var signed = certIndex != SigningBase.CertIndex.INVALID_INDEX.value();\n+\n+                    final var unfoldedBundleDir = cmd.appRuntimeDirectory();\n@@ -244,5 +201,6 @@\n-                    if (isSigned) {\n-                        cmd.addArguments(\"--mac-sign\",\n-                                \"--mac-signing-keychain\", SigningBase.getKeyChain());\n-                        cmd.addArguments(\"--mac-signing-key-user-name\",\n-                                         SigningBase.getDevName(signCertIndex));\n+                    final var libjli = unfoldedBundleDir.resolve(\"Contents\/MacOS\/libjli.dylib\");\n+\n+                    SigningBase.verifyCodesign(libjli, signed, certIndex);\n+                    SigningBase.verifyCodesign(unfoldedBundleDir, signed, certIndex);\n+                    if (signed) {\n+                        SigningBase.verifySpctl(unfoldedBundleDir, \"exec\", certIndex);\n@@ -251,13 +209,0 @@\n-                .forTypes(PackageType.MAC_PKG)\n-                .addBundleVerifier(SigningRuntimeImagePackageTest::verifyPKG)\n-                .forTypes(PackageType.MAC_DMG)\n-                .addBundleVerifier(SigningRuntimeImagePackageTest::verifyDMG)\n-                .addBundleVerifier(cmd -> {\n-                    int certIndex = SigningBase.CertIndex.INVALID_INDEX.value();\n-                    if (isSigned)\n-                        certIndex = signCertIndex;\n-                    else if (isRuntimeImageSigned)\n-                        certIndex = jdkBundleCertIndex;\n-                    verifyRuntimeImageInDMG(cmd, isRuntimeImageSigned || isSigned,\n-                        certIndex);\n-                })\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningRuntimeImagePackageTest.java","additions":81,"deletions":136,"binary":false,"changes":217,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.nio.file.Files;\n@@ -44,3 +43,0 @@\n-import java.io.IOException;\n-import java.io.UncheckedIOException;\n-\n@@ -95,23 +91,0 @@\n-        INVALID_MAC_JDK_BUNDLE(cmd -> {\n-            \/\/ Missing \"Contents\/MacOS\/libjli.dylib\"\n-            try {\n-                final Path runtimePath = TKit.createTempDirectory(\"invalid-jdk-bundle\");\n-                Files.createDirectories(runtimePath.resolve(\"Contents\/Home\"));\n-                Files.createFile(runtimePath.resolve(\"Contents\/Info.plist\"));\n-                return runtimePath.toAbsolutePath().toString();\n-            } catch (IOException ex) {\n-                throw new UncheckedIOException(ex);\n-            }\n-        }),\n-        INVALID_JDK_IMAGE(cmd -> {\n-            \/\/ Missing \"\"lib\/*\/libjli.dylib\"\"\n-            try {\n-                final Path runtimePath = TKit.createTempDirectory(\"invalid-jdk-image\");\n-                Files.createDirectories(runtimePath.resolve(\"jmods\"));\n-                Files.createDirectories(runtimePath.resolve(\"lib\"));\n-                Files.createFile(runtimePath.resolve(\"lib\/src.zip\"));\n-                return runtimePath.toAbsolutePath().toString();\n-            } catch (IOException ex) {\n-                throw new UncheckedIOException(ex);\n-            }\n-        }),\n@@ -633,13 +606,1 @@\n-                        }, Token.JAVA_HOME.token())),\n-                testSpec().noAppDesc().nativeType()\n-                        .addArgs(\"--runtime-image\", Token.INVALID_MAC_JDK_BUNDLE.token())\n-                        .error(\"message.runtime-image-invalid\", JPackageCommand.cannedArgument(cmd -> {\n-                            return Path.of(cmd.getArgumentValue(\"--runtime-image\"));\n-                        }, Token.INVALID_MAC_JDK_BUNDLE.token()))\n-                        .error(\"message.runtime-image-invalid.advice\"),\n-                testSpec().noAppDesc().nativeType()\n-                        .addArgs(\"--runtime-image\", Token.INVALID_JDK_IMAGE.token())\n-                        .error(\"message.runtime-image-invalid\", JPackageCommand.cannedArgument(cmd -> {\n-                            return Path.of(cmd.getArgumentValue(\"--runtime-image\"));\n-                        }, Token.INVALID_JDK_IMAGE.token()))\n-                        .error(\"message.runtime-image-invalid.advice\")\n+                        }, Token.JAVA_HOME.token()))\n","filename":"test\/jdk\/tools\/jpackage\/share\/ErrorTest.java","additions":1,"deletions":40,"binary":false,"changes":41,"status":"modified"}]}