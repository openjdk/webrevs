{"files":[{"patch":"@@ -72,1 +72,1 @@\n-        if (StandardBundlerParam.getPredefinedAppImage(params) != null) {\n+        if (StandardBundlerParam.hasPredefinedAppImage(params)) {\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacAppBundler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-    public String validatedBundleIdentifier() throws ConfigException {\n+    private String validatedBundleIdentifier() throws ConfigException {\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacApplicationBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+import java.io.UncheckedIOException;\n@@ -155,1 +156,1 @@\n-            final var bundleIdentifier = appBuilder.validatedBundleIdentifier();\n+            final var bundleIdentifier = appBuilder.create().bundleIdentifier();\n@@ -219,5 +220,5 @@\n-        return IOUtils.exists(path1)\n-                && path1.toFile().list() != null\n-                && path1.toFile().list().length > 0\n-                && IOUtils.exists(path2)\n-                && IOUtils.exists(path3);\n+        return Files.exists(path1) &&\n+                    Optional.ofNullable(path1.toFile().list())\n+                            .map(list -> list.length > 0).orElse(false) &&\n+                    Files.exists(path2) &&\n+                    Files.exists(path3);\n@@ -234,1 +235,1 @@\n-            return IOUtils.exists(jli);\n+            return Files.exists(jli);\n@@ -238,1 +239,1 @@\n-            throw new RuntimeException(ex);\n+            throw new UncheckedIOException(ex);\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacFromParams.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-        return MacPackage.create(pkg, new MacPackageMixin.Stub(pkg.predefinedAppImage().map(v -> predefinedAppImageSigned)));\n+        return MacPackage.create(pkg, new MacPackageMixin.Stub(pkg.predefinedAppOrRuntimeImage().map(v -> predefinedAppImageSigned)));\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPackageBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,3 +120,3 @@\n-                    final var isRuntimeInstaller = pkg.map(Package::isRuntimeInstaller).orElse(false);\n-                    final var withPredefinedAppImage = pkg.flatMap(Package::predefinedAppImage).isPresent();\n-                    return new TaskContextProxy(appContext, false, isRuntimeInstaller || withPredefinedAppImage);\n+                    final var withPredefinedAppOrRuntimeImage =\n+                        pkg.flatMap(Package::predefinedAppOrRuntimeImage).isPresent();\n+                    return new TaskContextProxy(appContext, false, withPredefinedAppOrRuntimeImage);\n@@ -169,1 +169,1 @@\n-                .appImageAction(MacPackagingPipeline::signApplicationBundle)\n+                .appImageAction(MacPackagingPipeline::sign)\n@@ -175,1 +175,1 @@\n-                .appImageAction(MacPackagingPipeline::signApplicationBundle)\n+                .appImageAction(MacPackagingPipeline::sign)\n@@ -211,1 +211,1 @@\n-                            .packageAction(MacPackagingPipeline::signRuntimeBundle)\n+                            .appImageAction(MacPackagingPipeline::sign)\n@@ -233,1 +233,1 @@\n-            return new PackageBuilder(app, SignAppImagePackageType.VALUE).predefinedAppImage(\n+            return new PackageBuilder(app, SignAppImagePackageType.VALUE).predefinedAppOrRuntimeImage(\n@@ -361,10 +361,1 @@\n-    private static void signRuntimeBundle(PackageBuildEnv<MacPackage, AppImageLayout> env) throws IOException {\n-        sign(env.pkg().app(), env.env(), env.resolvedLayout().rootDirectory());\n-    }\n-\n-    private static void signApplicationBundle(AppImageBuildEnv<MacApplication, MacApplicationLayout> env) throws IOException {\n-        sign(env.app(), env.env(), env.resolvedLayout().rootDirectory());\n-    }\n-\n-    private static void sign(final MacApplication app,\n-            final BuildEnv env, final Path appImageDir) throws IOException {\n+    private static void sign(AppImageBuildEnv<MacApplication, AppImageLayout> env) throws IOException {\n@@ -373,1 +364,1 @@\n-        app.signingConfig().ifPresent(codesignConfigBuilder::from);\n+        env.app().signingConfig().ifPresent(codesignConfigBuilder::from);\n@@ -375,2 +366,2 @@\n-        if (app.sign() && app.signingConfig().flatMap(AppImageSigningConfig::entitlements).isEmpty()) {\n-            final var entitlementsDefaultResource = app.signingConfig().map(\n+        if (env.app().sign() && env.app().signingConfig().flatMap(AppImageSigningConfig::entitlements).isEmpty()) {\n+            final var entitlementsDefaultResource = env.app().signingConfig().map(\n@@ -379,1 +370,2 @@\n-            final var entitlementsFile = env.configDir().resolve(app.name() + \".entitlements\");\n+            final var entitlementsFile = env.env().configDir()\n+                    .resolve(env.app().name() + \".entitlements\");\n@@ -381,1 +373,1 @@\n-            env.createResource(entitlementsDefaultResource)\n+            env.env().createResource(entitlementsDefaultResource)\n@@ -389,1 +381,3 @@\n-            AppImageSigner.createSigner(app, codesignConfigBuilder.create()).accept(appImageDir);\n+            AppImageSigner\n+                    .createSigner(env.app(), codesignConfigBuilder.create())\n+                    .accept(env.resolvedLayout().rootDirectory());\n@@ -392,3 +386,7 @@\n-        app.signingConfig().flatMap(AppImageSigningConfig::keychain).map(Keychain::new).ifPresentOrElse(keychain -> {\n-            toBiConsumer(TempKeychain::withKeychain).accept(unused -> signAction.run(), keychain);\n-        }, signAction);\n+        env.app().signingConfig()\n+                .flatMap(AppImageSigningConfig::keychain)\n+                .map(Keychain::new)\n+                .ifPresentOrElse(keychain -> {\n+                    toBiConsumer(TempKeychain::withKeychain)\n+                            .accept(unused -> signAction.run(), keychain);\n+                }, signAction);\n@@ -471,1 +469,1 @@\n-            Path runtimeImage = ((MacPackage)pkg).app().runtimeImageDir().orElseThrow();\n+            Path runtimeImage = pkg.predefinedAppOrRuntimeImage().orElseThrow();\n@@ -493,1 +491,1 @@\n-            Path runtimeImage = ((MacPackage)pkg).app().runtimeImageDir().orElseThrow();\n+            Path runtimeImage = pkg.predefinedAppOrRuntimeImage().orElseThrow();\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPackagingPipeline.java","additions":26,"deletions":28,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -78,1 +78,0 @@\n-                Optional.ofNullable(runtimeImageDir),\n@@ -151,5 +150,0 @@\n-    ApplicationBuilder runtimeImageDir(Path v) {\n-        runtimeImageDir = v;\n-        return this;\n-    }\n-\n@@ -196,1 +190,0 @@\n-    private Path runtimeImageDir;\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/ApplicationBuilder.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-            builder.appImageDir(StandardBundlerParam.getPredefinedAppImage(params));\n+            builder.appImageDir(StandardBundlerParam.getPredefinedAppOrRuntimeImage(params));\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/BuildEnvFromParams.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-import static jdk.jpackage.internal.StandardBundlerParam.getPredefinedAppImage;\n+import static jdk.jpackage.internal.StandardBundlerParam.getPredefinedAppOrRuntimeImage;\n@@ -90,1 +90,0 @@\n-        PREDEFINED_RUNTIME_IMAGE.copyInto(params, appBuilder::runtimeImageDir);\n@@ -147,1 +146,1 @@\n-        builder.predefinedAppImage(getPredefinedAppImage(params));\n+        builder.predefinedAppOrRuntimeImage(getPredefinedAppOrRuntimeImage(params));\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/FromParams.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Optional.ofNullable(predefinedAppImage),\n+                Optional.ofNullable(predefinedAppOrRuntimeImage),\n@@ -146,2 +146,2 @@\n-    PackageBuilder predefinedAppImage(Path v) {\n-        predefinedAppImage = v;\n+    PackageBuilder predefinedAppOrRuntimeImage(Path v) {\n+        predefinedAppOrRuntimeImage = v;\n@@ -151,2 +151,2 @@\n-    Optional<Path> predefinedAppImage() {\n-        return Optional.ofNullable(predefinedAppImage);\n+    Optional<Path> predefinedAppOrRuntimeImage() {\n+        return Optional.ofNullable(predefinedAppOrRuntimeImage);\n@@ -244,1 +244,1 @@\n-    private Path predefinedAppImage;\n+    private Path predefinedAppOrRuntimeImage;\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/PackageBuilder.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -440,9 +440,3 @@\n-            srcAppImageDesc = new AppImageDesc(pkg.app().imageLayout(), pkg.predefinedAppImage().orElseGet(() -> {\n-                \/\/ No predefined app image and no runtime builder.\n-                \/\/ This should be runtime packaging.\n-                if (pkg.isRuntimeInstaller()) {\n-                    return env.appImageDir();\n-                } else {\n-                    \/\/ Can't create app image without runtime builder.\n-                    throw new UnsupportedOperationException();\n-                }\n+            srcAppImageDesc = new AppImageDesc(pkg.app().imageLayout(), pkg.predefinedAppOrRuntimeImage().orElseGet(() -> {\n+                \/\/ Can't create app image without runtime builder.\n+                throw new UnsupportedOperationException();\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/PackagingPipeline.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-                    var appImage = getPredefinedAppImage(params);\n+                    var appImage = getPredefinedAppOrRuntimeImage(params);\n@@ -536,3 +536,5 @@\n-    static Path getPredefinedAppImage(Map<String, ? super Object> params) {\n-        Path applicationImage = PREDEFINED_APP_IMAGE.fetchFrom(params);\n-        if (applicationImage != null && !IOUtils.exists(applicationImage)) {\n+    \/\/ Returns predefined application image or in case of runtime installer\n+    \/\/ returns predefined runtime image.\n+    static Path getPredefinedAppOrRuntimeImage(Map<String, ? super Object> params) {\n+        Path appOrRuntimeImage = PREDEFINED_APP_IMAGE.fetchFrom(params);\n+        if (appOrRuntimeImage != null && !Files.exists(appOrRuntimeImage)) {\n@@ -543,1 +545,3 @@\n-                            applicationImage.toString()));\n+                            appOrRuntimeImage.toString()));\n+        } else if (isRuntimeInstaller(params)) {\n+            return PREDEFINED_RUNTIME_IMAGE.fetchFrom(params);\n@@ -545,1 +549,1 @@\n-        return applicationImage;\n+        return appOrRuntimeImage;\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/StandardBundlerParam.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -91,11 +91,0 @@\n-    \/**\n-     * Gets the runtime image directory of this runtime image or bundle if\n-     * available or an empty {@link Optional} instance.\n-     * <p>\n-     * Runtime image directory is a directory with the runtime image or bundle\n-     * for runtime installers.\n-     *\n-     * @return the runtime image directory of this runtime image or bundle\n-     *\/\n-    Optional<Path> runtimeImageDir();\n-\n@@ -259,1 +248,1 @@\n-            Optional<Path> runtimeImageDir, List<Path> contentDirs, AppImageLayout imageLayout, Optional<RuntimeBuilder> runtimeBuilder,\n+            List<Path> contentDirs, AppImageLayout imageLayout, Optional<RuntimeBuilder> runtimeBuilder,\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/model\/Application.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -151,2 +151,3 @@\n-     * Gets the path to a directory with the application app image of this package\n-     * if available or an empty {@link Optional} instance otherwise.\n+     * Gets the path to a directory with the application app image or runtime\n+     * image of this package if available or an empty {@link Optional} instance\n+     * otherwise.\n@@ -157,1 +158,1 @@\n-    Optional<Path> predefinedAppImage();\n+    Optional<Path> predefinedAppOrRuntimeImage();\n@@ -328,1 +329,1 @@\n-            Optional<String> aboutURL, Optional<Path> licenseFile, Optional<Path> predefinedAppImage,\n+            Optional<String> aboutURL, Optional<Path> licenseFile, Optional<Path> predefinedAppOrRuntimeImage,\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/model\/Package.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-                pkg.predefinedAppImage(),\n+                pkg.predefinedAppOrRuntimeImage(),\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/model\/WinExePackage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}