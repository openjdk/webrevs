{"files":[{"patch":"@@ -49,1 +49,1 @@\n-        return MacPackage.create(pkg, new MacPackageMixin.Stub(pkg.predefinedAppOrRuntimeImage().map(v -> predefinedAppImageSigned)));\n+        return MacPackage.create(pkg, new MacPackageMixin.Stub(pkg.predefinedAppImage().map(v -> predefinedAppImageSigned)));\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPackageBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,3 +120,3 @@\n-                    final var withPredefinedAppOrRuntimeImage =\n-                        pkg.flatMap(Package::predefinedAppOrRuntimeImage).isPresent();\n-                    return new TaskContextProxy(appContext, false, withPredefinedAppOrRuntimeImage);\n+                    final var withpredefinedAppImage =\n+                        pkg.flatMap(Package::predefinedAppImage).isPresent();\n+                    return new TaskContextProxy(appContext, false, withpredefinedAppImage);\n@@ -233,1 +233,1 @@\n-            return new PackageBuilder(app, SignAppImagePackageType.VALUE).predefinedAppOrRuntimeImage(\n+            return new PackageBuilder(app, SignAppImagePackageType.VALUE).predefinedAppImage(\n@@ -363,0 +363,2 @@\n+        final var app = env.app();\n+\n@@ -364,1 +366,1 @@\n-        env.app().signingConfig().ifPresent(codesignConfigBuilder::from);\n+        app.signingConfig().ifPresent(codesignConfigBuilder::from);\n@@ -366,2 +368,2 @@\n-        if (env.app().sign() && env.app().signingConfig().flatMap(AppImageSigningConfig::entitlements).isEmpty()) {\n-            final var entitlementsDefaultResource = env.app().signingConfig().map(\n+        if (app.sign() && app.signingConfig().flatMap(AppImageSigningConfig::entitlements).isEmpty()) {\n+            final var entitlementsDefaultResource = app.signingConfig().map(\n@@ -370,2 +372,1 @@\n-            final var entitlementsFile = env.env().configDir()\n-                    .resolve(env.app().name() + \".entitlements\");\n+            final var entitlementsFile = env.env().configDir().resolve(app.name() + \".entitlements\");\n@@ -381,3 +382,2 @@\n-            AppImageSigner\n-                    .createSigner(env.app(), codesignConfigBuilder.create())\n-                    .accept(env.resolvedLayout().rootDirectory());\n+            final var appImageDir = env.resolvedLayout().rootDirectory();\n+            AppImageSigner.createSigner(app, codesignConfigBuilder.create()).accept(appImageDir);\n@@ -386,7 +386,3 @@\n-        env.app().signingConfig()\n-                .flatMap(AppImageSigningConfig::keychain)\n-                .map(Keychain::new)\n-                .ifPresentOrElse(keychain -> {\n-                    toBiConsumer(TempKeychain::withKeychain)\n-                            .accept(unused -> signAction.run(), keychain);\n-                }, signAction);\n+        app.signingConfig().flatMap(AppImageSigningConfig::keychain).map(Keychain::new).ifPresentOrElse(keychain -> {\n+            toBiConsumer(TempKeychain::withKeychain).accept(unused -> signAction.run(), keychain);\n+        }, signAction);\n@@ -469,1 +465,1 @@\n-            Path runtimeImage = pkg.predefinedAppOrRuntimeImage().orElseThrow();\n+            Path runtimeImage = pkg.predefinedAppImage().orElseThrow();\n@@ -491,1 +487,1 @@\n-            Path runtimeImage = pkg.predefinedAppOrRuntimeImage().orElseThrow();\n+            Path runtimeImage = pkg.predefinedAppImage().orElseThrow();\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPackagingPipeline.java","additions":17,"deletions":21,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-            builder.appImageDir(StandardBundlerParam.getPredefinedAppOrRuntimeImage(params));\n+            builder.appImageDir(StandardBundlerParam.getpredefinedAppImage(params));\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/BuildEnvFromParams.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-import static jdk.jpackage.internal.StandardBundlerParam.getPredefinedAppOrRuntimeImage;\n+import static jdk.jpackage.internal.StandardBundlerParam.getpredefinedAppImage;\n@@ -146,1 +146,1 @@\n-        builder.predefinedAppOrRuntimeImage(getPredefinedAppOrRuntimeImage(params));\n+        builder.predefinedAppImage(getpredefinedAppImage(params));\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/FromParams.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Optional.ofNullable(predefinedAppOrRuntimeImage),\n+                Optional.ofNullable(predefinedAppImage),\n@@ -146,2 +146,2 @@\n-    PackageBuilder predefinedAppOrRuntimeImage(Path v) {\n-        predefinedAppOrRuntimeImage = v;\n+    PackageBuilder predefinedAppImage(Path v) {\n+        predefinedAppImage = v;\n@@ -151,2 +151,2 @@\n-    Optional<Path> predefinedAppOrRuntimeImage() {\n-        return Optional.ofNullable(predefinedAppOrRuntimeImage);\n+    Optional<Path> predefinedAppImage() {\n+        return Optional.ofNullable(predefinedAppImage);\n@@ -244,1 +244,1 @@\n-    private Path predefinedAppOrRuntimeImage;\n+    private Path predefinedAppImage;\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/PackageBuilder.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -440,1 +440,1 @@\n-            srcAppImageDesc = new AppImageDesc(pkg.app().imageLayout(), pkg.predefinedAppOrRuntimeImage().orElseGet(() -> {\n+            srcAppImageDesc = new AppImageDesc(pkg.app().imageLayout(), pkg.predefinedAppImage().orElseGet(() -> {\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/PackagingPipeline.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-                    var appImage = getPredefinedAppOrRuntimeImage(params);\n+                    var appImage = getpredefinedAppImage(params);\n@@ -538,1 +538,1 @@\n-    static Path getPredefinedAppOrRuntimeImage(Map<String, ? super Object> params) {\n+    static Path getpredefinedAppImage(Map<String, ? super Object> params) {\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/StandardBundlerParam.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -151,3 +151,10 @@\n-     * Gets the path to a directory with the application app image or runtime\n-     * image of this package if available or an empty {@link Optional} instance\n-     * otherwise.\n+     * Gets the path to a directory with the predefined app image of this package if\n+     * available or an empty {@link Optional} instance otherwise.\n+     * <p>\n+     * If {@link #isRuntimeInstaller()} returns {@code true}, the method returns the\n+     * path to a directory with the predefined runtime. The layout of this directory\n+     * should be of {@link RuntimeLayout} type.\n+     * <p>\n+     * If {@link #isRuntimeInstaller()} returns {@code false}, the method returns\n+     * the path to a directory with the predefined application image. The layout of\n+     * this directory should be of {@link ApplicationLayout} type.\n@@ -158,1 +165,1 @@\n-    Optional<Path> predefinedAppOrRuntimeImage();\n+    Optional<Path> predefinedAppImage();\n@@ -329,1 +336,1 @@\n-            Optional<String> aboutURL, Optional<Path> licenseFile, Optional<Path> predefinedAppOrRuntimeImage,\n+            Optional<String> aboutURL, Optional<Path> licenseFile, Optional<Path> predefinedAppImage,\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/model\/Package.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-                pkg.predefinedAppOrRuntimeImage(),\n+                pkg.predefinedAppImage(),\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/model\/WinExePackage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}