{"files":[{"patch":"@@ -47,1 +47,3 @@\n-            throw new IllegalArgumentException(\"Signing identity and identifier prefix mismatch\");\n+            throw new IllegalArgumentException(\n+                \"Signing identity (\" + identity + \") and identifier prefix (\" +\n+                identifierPrefix + \") mismatch\");\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/CodesignConfig.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-        if (StandardBundlerParam.getPredefinedAppImage(params) != null) {\n+        if (StandardBundlerParam.hasPredefinedAppImage(params)) {\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacAppBundler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jpackage.internal;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Objects;\n+import jdk.jpackage.internal.model.AppImageLayout;\n+\n+\/**\n+ * An abstraction of macOS Application bundle.\n+ *\n+ * @see <a href=\"https:\/\/en.wikipedia.org\/wiki\/Bundle_(macOS)#Application_bundles\">https:\/\/en.wikipedia.org\/wiki\/Bundle_(macOS)#Application_bundles<\/a>\n+ *\/\n+record MacBundle(Path root) {\n+\n+    MacBundle {\n+        Objects.requireNonNull(root);\n+    }\n+\n+    boolean isValid() {\n+        return Files.isDirectory(contentsDir()) && Files.isDirectory(macOsDir()) && Files.isRegularFile(infoPlistFile());\n+    }\n+\n+    boolean isSigned() {\n+        return Files.isDirectory(contentsDir().resolve(\"_CodeSignature\"));\n+    }\n+\n+    Path contentsDir() {\n+        return root.resolve(\"Contents\");\n+    }\n+\n+    Path homeDir() {\n+        return contentsDir().resolve(\"Home\");\n+    }\n+\n+    Path macOsDir() {\n+        return contentsDir().resolve(\"MacOS\");\n+    }\n+\n+    Path resourcesDir() {\n+        return contentsDir().resolve(\"Resources\");\n+    }\n+\n+    Path infoPlistFile() {\n+        return contentsDir().resolve(\"Info.plist\");\n+    }\n+\n+    static boolean isDirectoryMacBundle(Path dir) {\n+        return new MacBundle(dir).isValid();\n+    }\n+\n+    static MacBundle fromAppImageLayout(AppImageLayout layout) {\n+        return new MacBundle(layout.rootDirectory());\n+    }\n+}\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacBundle.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -150,1 +150,9 @@\n-            app.mainLauncher().flatMap(Launcher::startupInfo).ifPresent(signingBuilder::signingIdentifierPrefix);\n+            final var bundleIdentifier = appBuilder.create().bundleIdentifier();\n+            app.mainLauncher().flatMap(Launcher::startupInfo).ifPresentOrElse(\n+                signingBuilder::signingIdentifierPrefix,\n+                () -> {\n+                    \/\/ Runtime installer does not have main launcher, so use\n+                    \/\/ 'bundleIdentifier' as prefix by default.\n+                    signingBuilder.signingIdentifierPrefix(\n+                        bundleIdentifier + \".\");\n+                });\n@@ -171,0 +179,6 @@\n+        PREDEFINED_RUNTIME_IMAGE.findIn(params)\n+                .map(MacBundle::new)\n+                .filter(MacBundle::isValid)\n+                .map(MacBundle::isSigned)\n+                .ifPresent(builder::predefinedAppImageSigned);\n+\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacFromParams.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import java.nio.file.LinkOption;\n@@ -75,0 +76,1 @@\n+import jdk.jpackage.internal.util.FileUtils;\n@@ -94,0 +96,1 @@\n+        COPY_RUNTIME_JLILIB,\n@@ -118,1 +121,1 @@\n-                        .applicationAction(MacPackagingPipeline::writeApplicationRuntimeInfoPlist)\n+                        .appImageAction(MacPackagingPipeline::writeRuntimeInfoPlist)\n@@ -121,1 +124,1 @@\n-                        .applicationAction(MacPackagingPipeline::copyJliLib)\n+                        .appImageAction(MacPackagingPipeline::copyJliLib)\n@@ -141,0 +144,5 @@\n+                        .appImageAction(MacPackagingPipeline::writeRuntimeInfoPlist)\n+                        .addDependencies(CopyAppImageTaskID.COPY)\n+                        .addDependents(PrimaryTaskID.COPY_APP_IMAGE).add()\n+                .task(MacCopyAppImageTaskID.COPY_RUNTIME_JLILIB)\n+                        .noaction()\n@@ -147,1 +155,1 @@\n-                        .applicationAction(MacPackagingPipeline::writeAppInfoPlist)\n+                        .applicationAction(MacPackagingPipeline::writeApplicationInfoPlist)\n@@ -175,1 +183,2 @@\n-                builder.task(MacCopyAppImageTaskID.REPLACE_APP_IMAGE_FILE).applicationAction(createWriteAppImageFileAction()).add();\n+                builder.task(MacCopyAppImageTaskID.REPLACE_APP_IMAGE_FILE)\n+                        .applicationAction(createWriteAppImageFileAction()).add();\n@@ -177,3 +186,26 @@\n-            } else if (p.isRuntimeInstaller() || ((MacPackage)p).predefinedAppImageSigned().orElse(false)) {\n-                \/\/ If this is a runtime package or a signed predefined app image,\n-                \/\/ don't create \".package\" file and don't sign it.\n+            } else if (p.isRuntimeInstaller()) {\n+\n+                builder.task(MacCopyAppImageTaskID.COPY_RUNTIME_JLILIB)\n+                        .appImageAction(MacPackagingPipeline::copyJliLib).add();\n+\n+                final var predefinedRuntimeBundle = Optional.of(\n+                        new MacBundle(p.predefinedAppImage().orElseThrow())).filter(MacBundle::isValid);\n+\n+                \/\/ Don't create \".package\" file.\n+                disabledTasks.add(MacCopyAppImageTaskID.COPY_PACKAGE_FILE);\n+\n+                if (predefinedRuntimeBundle.isPresent()) {\n+                    \/\/ The predefined app image is a macOS bundle.\n+                    \/\/ Disable all alterations of the input bundle, but keep the signing enabled.\n+                    disabledTasks.addAll(List.of(MacCopyAppImageTaskID.values()));\n+                    disabledTasks.remove(MacCopyAppImageTaskID.COPY_SIGN);\n+                }\n+\n+                if (predefinedRuntimeBundle.map(MacBundle::isSigned).orElse(false) && !((MacPackage)p).app().sign()) {\n+                    \/\/ The predefined app image is a signed bundle; explicit signing is not requested for the package.\n+                    \/\/ Disable the signing, i.e. don't re-sign the input bundle.\n+                    disabledTasks.add(MacCopyAppImageTaskID.COPY_SIGN);\n+                }\n+            } else if (((MacPackage)p).predefinedAppImageSigned().orElse(false)) {\n+                \/\/ This is a signed predefined app image.\n+                \/\/ Don't create \".package\" file.\n@@ -181,0 +213,1 @@\n+                \/\/ Don't sign the image.\n@@ -182,3 +215,0 @@\n-\/\/                if (p.isRuntimeInstaller()) {\n-\/\/                    builder.task(MacCopyAppImageTaskID.COPY_RUNTIME_INFO_PLIST).packageAction(MacPackagingPipeline::writeRuntimeRuntimeInfoPlist).add();\n-\/\/                }\n@@ -211,1 +241,15 @@\n-        PackagingPipeline.copyAppImage(srcAppImage, dstAppImage, !pkg.predefinedAppImageSigned().orElse(false));\n+\n+        boolean predefinedAppImageSigned = pkg.predefinedAppImageSigned().orElse(false);\n+\n+        var inputRootDirectory = srcAppImage.resolvedAppImagelayout().rootDirectory();\n+\n+        if (pkg.isRuntimeInstaller() && MacBundle.isDirectoryMacBundle(inputRootDirectory)) {\n+            \/\/ Building runtime package from the input runtime bundle.\n+            \/\/ Copy the input bundle verbatim.\n+            FileUtils.copyRecursive(\n+                    inputRootDirectory,\n+                    dstAppImage.resolvedAppImagelayout().rootDirectory(),\n+                    LinkOption.NOFOLLOW_LINKS);\n+        } else {\n+            PackagingPipeline.copyAppImage(srcAppImage, dstAppImage, !predefinedAppImageSigned);\n+        }\n@@ -215,1 +259,1 @@\n-            AppImageBuildEnv<MacApplication, MacApplicationLayout> env) throws IOException {\n+            AppImageBuildEnv<MacApplication, AppImageLayout> env) throws IOException {\n@@ -217,1 +261,1 @@\n-        final var runtimeMacOSDir = env.resolvedLayout().runtimeRootDirectory().resolve(\"Contents\/MacOS\");\n+        final var runtimeBundle = runtimeBundle(env);\n@@ -226,2 +270,2 @@\n-            Files.createDirectories(runtimeMacOSDir);\n-            Files.copy(jli, runtimeMacOSDir.resolve(jliName));\n+            Files.createDirectories(runtimeBundle.macOsDir());\n+            Files.copy(jli, runtimeBundle.macOsDir().resolve(jliName));\n@@ -250,8 +294,2 @@\n-    private static void writeRuntimeRuntimeInfoPlist(PackageBuildEnv<MacPackage, AppImageLayout> env) throws IOException {\n-        writeRuntimeInfoPlist(env.pkg().app(), env.env(), env.resolvedLayout().rootDirectory());\n-    }\n-\n-    private static void writeApplicationRuntimeInfoPlist(\n-            AppImageBuildEnv<MacApplication, MacApplicationLayout> env) throws IOException {\n-        writeRuntimeInfoPlist(env.app(), env.env(), env.resolvedLayout().runtimeRootDirectory());\n-    }\n+    private static void writeRuntimeInfoPlist(\n+            AppImageBuildEnv<MacApplication, AppImageLayout> env) throws IOException {\n@@ -259,1 +297,1 @@\n-    private static void writeRuntimeInfoPlist(MacApplication app, BuildEnv env, Path runtimeRootDirectory) throws IOException {\n+        final var app = env.app();\n@@ -266,0 +304,17 @@\n+        if (app.isRuntime()) {\n+            data.put(\"CF_BUNDLE_VENDOR\", app.vendor());\n+        }\n+\n+        final String template;\n+        final String publicName;\n+        final String category;\n+\n+        if (app.isRuntime()) {\n+            template = \"Runtime-Info.plist.template\";\n+            publicName = \"Info.plist\";\n+            category = \"resource.runtime-info-plist\";\n+        } else {\n+            template = \"ApplicationRuntime-Info.plist.template\";\n+            publicName = \"Runtime-Info.plist\";\n+            category = \"resource.app-runtime-info-plist\";\n+        }\n@@ -267,3 +322,3 @@\n-        env.createResource(\"Runtime-Info.plist.template\")\n-                .setPublicName(\"Runtime-Info.plist\")\n-                .setCategory(I18N.getString(\"resource.runtime-info-plist\"))\n+        env.env().createResource(template)\n+                .setPublicName(publicName)\n+                .setCategory(I18N.getString(category))\n@@ -271,1 +326,1 @@\n-                .saveToFile(runtimeRootDirectory.resolve(\"Contents\/Info.plist\"));\n+                .saveToFile(runtimeBundle(env).infoPlistFile());\n@@ -274,1 +329,1 @@\n-    private static void writeAppInfoPlist(\n+    private static void writeApplicationInfoPlist(\n@@ -279,1 +334,1 @@\n-        final var infoPlistFile = env.resolvedLayout().contentDirectory().resolve(\"Info.plist\");\n+        final var infoPlistFile = MacBundle.fromAppImageLayout(env.resolvedLayout()).infoPlistFile();\n@@ -311,1 +366,1 @@\n-    private static void sign(AppImageBuildEnv<MacApplication, MacApplicationLayout> env) throws IOException {\n+    private static void sign(AppImageBuildEnv<MacApplication, AppImageLayout> env) throws IOException {\n@@ -413,0 +468,8 @@\n+    private static MacBundle runtimeBundle(AppImageBuildEnv<MacApplication, AppImageLayout> env) {\n+        if (env.app().isRuntime()) {\n+            return new MacBundle(env.resolvedLayout().rootDirectory());\n+        } else {\n+            return new MacBundle(((MacApplicationLayout)env.resolvedLayout()).runtimeRootDirectory());\n+        }\n+    }\n+\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPackagingPipeline.java","additions":94,"deletions":31,"binary":false,"changes":125,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+        final String suffix;\n@@ -58,1 +59,1 @@\n-            return Application.super.appImageDirName();\n+            suffix = \".jdk\";\n@@ -60,1 +61,1 @@\n-            return Path.of(Application.super.appImageDirName().toString() + \".app\");\n+            suffix = \".app\";\n@@ -62,0 +63,1 @@\n+        return Path.of(Application.super.appImageDirName().toString() + suffix);\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/model\/MacApplication.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/ApplicationRuntime-Info.plist.template","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/Runtime-Info.plist.template","status":"copied"},{"patch":"@@ -44,0 +44,1 @@\n+resource.app-runtime-info-plist=Embedded Java Runtime Info.plist\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -23,0 +23,15 @@\n+        <key>NSMicrophoneUsageDescription<\/key>\n+        <string>The application is requesting access to the microphone.<\/string>\n+        <key>JavaVM<\/key>\n+        <dict>\n+                <key>JVMCapabilities<\/key>\n+                <array>\n+                        <string>CommandLine<\/string>\n+                <\/array>\n+                <key>JVMPlatformVersion<\/key>\n+                <string>CF_BUNDLE_VERSION<\/string>\n+                <key>JVMVendor<\/key>\n+                <string>CF_BUNDLE_VENDOR<\/string>\n+                <key>JVMVersion<\/key>\n+                <string>CF_BUNDLE_VERSION<\/string>\n+        <\/dict>\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/Runtime-Info.plist.template","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import static jdk.jpackage.internal.StandardBundlerParam.PREDEFINED_APP_IMAGE;\n@@ -49,1 +50,0 @@\n-import static jdk.jpackage.internal.StandardBundlerParam.getPredefinedAppImage;\n@@ -146,1 +146,2 @@\n-        builder.predefinedAppImage(getPredefinedAppImage(params));\n+        PREDEFINED_APP_IMAGE.findIn(params).ifPresent(builder::predefinedAppImage);\n+        PREDEFINED_RUNTIME_IMAGE.findIn(params).ifPresent(builder::predefinedAppImage);\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/FromParams.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -440,10 +440,2 @@\n-            srcAppImageDesc = new AppImageDesc(pkg.app().imageLayout(), pkg.predefinedAppImage().orElseGet(() -> {\n-                \/\/ No predefined app image and no runtime builder.\n-                \/\/ This should be runtime packaging.\n-                if (pkg.isRuntimeInstaller()) {\n-                    return env.appImageDir();\n-                } else {\n-                    \/\/ Can't create app image without runtime builder.\n-                    throw new UnsupportedOperationException();\n-                }\n-            }));\n+            srcAppImageDesc = new AppImageDesc(pkg.app().imageLayout(),\n+                    pkg.predefinedAppImage().orElseThrow(UnsupportedOperationException::new));\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/PackagingPipeline.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -151,2 +151,10 @@\n-     * Gets the path to a directory with the application app image of this package\n-     * if available or an empty {@link Optional} instance otherwise.\n+     * Gets the path to a directory with the predefined app image of this package if\n+     * available or an empty {@link Optional} instance otherwise.\n+     * <p>\n+     * If {@link #isRuntimeInstaller()} returns {@code true}, the method returns the\n+     * path to a directory with the predefined runtime. The layout of this directory\n+     * should be of {@link RuntimeLayout} type.\n+     * <p>\n+     * If {@link #isRuntimeInstaller()} returns {@code false}, the method returns\n+     * the path to a directory with the predefined application image. The layout of\n+     * this directory should be of {@link ApplicationLayout} type.\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/model\/Package.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1085,5 +1085,1 @@\n-                if (cmd.isRuntime()) {\n-                    TKit.assertPathExists(libjliPath, false);\n-                } else {\n-                    TKit.assertFileExists(libjliPath);\n-                }\n+                TKit.assertFileExists(libjliPath);\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -337,1 +337,1 @@\n-        return installLocation.resolve(cmd.name() + (cmd.isRuntime() ? \"\" : \".app\"));\n+        return installLocation.resolve(cmd.name() + (cmd.isRuntime() ? \".jdk\" : \".app\"));\n@@ -403,0 +403,8 @@\n+    private static Set<Path> createBundleContents(String... customItems) {\n+        return Stream.concat(Stream.of(customItems), Stream.of(\n+                \"MacOS\",\n+                \"Info.plist\",\n+                \"_CodeSignature\"\n+        )).map(Path::of).collect(toSet());\n+    }\n+\n@@ -408,3 +416,1 @@\n-    private static final Set<Path> APP_BUNDLE_CONTENTS = Stream.of(\n-            \"Info.plist\",\n-            \"MacOS\",\n+    private static final Set<Path> APP_BUNDLE_CONTENTS = createBundleContents(\n@@ -414,3 +420,2 @@\n-            \"PkgInfo\",\n-            \"_CodeSignature\"\n-    ).map(Path::of).collect(toSet());\n+            \"PkgInfo\"\n+    );\n@@ -418,1 +423,1 @@\n-    private static final Set<Path> RUNTIME_BUNDLE_CONTENTS = Stream.of(\n+    private static final Set<Path> RUNTIME_BUNDLE_CONTENTS = createBundleContents(\n@@ -420,1 +425,1 @@\n-    ).map(Path::of).collect(toSet());\n+    );\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacHelper.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n- * \"jpackage.openjdk.java.net\" can be over-ridden by systerm property\n+ * \"jpackage.openjdk.java.net\" can be over-ridden by system property\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageFromTwoStepAppImageTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- * \"jpackage.openjdk.java.net\" can be over-ridden by systerm property\n+ * \"jpackage.openjdk.java.net\" can be over-ridden by system property\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n- * \"jpackage.openjdk.java.net\" can be over-ridden by systerm property\n+ * \"jpackage.openjdk.java.net\" can be over-ridden by system property\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageTwoStepTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,211 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+import jdk.jpackage.test.Annotations.Parameter;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.Executor;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.JavaTool;\n+import jdk.jpackage.test.MacHelper;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.PackageType;\n+import jdk.jpackage.test.TKit;\n+\n+\/**\n+ * Tests generation of dmg and pkg with --mac-sign and related arguments.\n+ * Test will generate pkg and verifies its signature. It verifies that dmg\n+ * is not signed, but runtime image inside dmg is signed.\n+ *\n+ * Note: Specific UNICODE signing is not tested, since it is shared code\n+ * with app image signing and it will be covered by SigningPackageTest.\n+ *\n+ * Following combinations are tested:\n+ * 1) \"--runtime-image\" points to unsigned JDK bundle and --mac-sign is not\n+ * provided. Expected result: runtime image ad-hoc signed.\n+ * 2) \"--runtime-image\" points to unsigned JDK bundle and --mac-sign is\n+ * provided. Expected result: Everything is signed with provided certificate.\n+ * 3) \"--runtime-image\" points to signed JDK bundle and --mac-sign is not\n+ * provided. Expected result: runtime image is signed with original certificate.\n+ * 4) \"--runtime-image\" points to signed JDK bundle and --mac-sign is provided.\n+ * Expected result: runtime image is signed with provided certificate.\n+ * 5) \"--runtime-image\" points to JDK image and --mac-sign is not provided.\n+ * Expected result: runtime image ad-hoc signed.\n+ * 6) \"--runtime-image\" points to JDK image and --mac-sign is provided.\n+ * Expected result: Everything is signed with provided certificate.\n+ *\n+ * This test requires that the machine is configured with test certificate for\n+ * \"Developer ID Installer: jpackage.openjdk.java.net\" in\n+ * jpackagerTest keychain with\n+ * always allowed access to this keychain for user which runs test.\n+ * note:\n+ * \"jpackage.openjdk.java.net\" can be over-ridden by system property\n+ * \"jpackage.mac.signing.key.user.name\", and\n+ * \"jpackagerTest\" can be over-ridden by system property\n+ * \"jpackage.mac.signing.keychain\"\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary jpackage with --type pkg,dmg --runtime-image --mac-sign\n+ * @library \/test\/jdk\/tools\/jpackage\/helpers\n+ * @library base\n+ * @key jpackagePlatformPackage\n+ * @build SigningBase\n+ * @build jdk.jpackage.test.*\n+ * @build SigningRuntimeImagePackageTest\n+ * @requires (jpackage.test.MacSignTests == \"run\")\n+ * @run main\/othervm\/timeout=720 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=SigningRuntimeImagePackageTest\n+ *  --jpt-before-run=SigningBase.verifySignTestEnvReady\n+ *\/\n+public class SigningRuntimeImagePackageTest {\n+\n+    private static JPackageCommand addSignOptions(JPackageCommand cmd, int certIndex) {\n+        if (certIndex != SigningBase.CertIndex.INVALID_INDEX.value()) {\n+            cmd.addArguments(\n+                    \"--mac-sign\",\n+                    \"--mac-signing-keychain\", SigningBase.getKeyChain(),\n+                    \"--mac-signing-key-user-name\", SigningBase.getDevName(certIndex));\n+        }\n+        return cmd;\n+    }\n+\n+    private static Path createInputRuntimeImage() throws IOException {\n+\n+        final Path runtimeImageDir;\n+\n+        if (JPackageCommand.DEFAULT_RUNTIME_IMAGE != null) {\n+            runtimeImageDir = JPackageCommand.DEFAULT_RUNTIME_IMAGE;\n+        } else {\n+            runtimeImageDir = TKit.createTempDirectory(\"runtime-image\").resolve(\"data\");\n+\n+            new Executor().setToolProvider(JavaTool.JLINK)\n+                    .dumpOutput()\n+                    .addArguments(\n+                            \"--output\", runtimeImageDir.toString(),\n+                            \"--add-modules\", \"java.desktop\",\n+                            \"--strip-debug\",\n+                            \"--no-header-files\",\n+                            \"--no-man-pages\")\n+                    .execute();\n+        }\n+\n+        return runtimeImageDir;\n+    }\n+\n+    private static Path createInputRuntimeBundle(int certIndex) throws IOException {\n+\n+        final var runtimeImage = createInputRuntimeImage();\n+\n+        final var runtimeBundleWorkDir = TKit.createTempDirectory(\"runtime-bundle\");\n+\n+        final var unpackadeRuntimeBundleDir = runtimeBundleWorkDir.resolve(\"unpacked\");\n+\n+        var cmd = new JPackageCommand()\n+                .useToolProvider(true)\n+                .ignoreDefaultRuntime(true)\n+                .dumpOutput(true)\n+                .setPackageType(PackageType.MAC_DMG)\n+                .setArgumentValue(\"--name\", \"foo\")\n+                .addArguments(\"--runtime-image\", runtimeImage)\n+                .addArguments(\"--dest\", runtimeBundleWorkDir);\n+\n+        addSignOptions(cmd, certIndex);\n+\n+        cmd.execute();\n+\n+        MacHelper.withExplodedDmg(cmd, dmgImage -> {\n+            if (dmgImage.endsWith(cmd.appInstallationDirectory().getFileName())) {\n+                Executor.of(\"cp\", \"-R\")\n+                        .addArgument(dmgImage)\n+                        .addArgument(unpackadeRuntimeBundleDir)\n+                        .execute(0);\n+            }\n+        });\n+\n+        return unpackadeRuntimeBundleDir;\n+    }\n+\n+    @Test\n+    \/\/ useJDKBundle  - If \"true\" predefined runtime image will be converted to\n+    \/\/                 JDK bundle. If \"false\" JDK image will be used.\n+    \/\/ JDKBundleCert - Certificate to sign JDK bundle before calling jpackage.\n+    \/\/ signCert      - Certificate to sign bundle produced by jpackage.\n+    \/\/ 1) unsigned JDK bundle and --mac-sign is not provided\n+    @Parameter({\"true\", \"INVALID_INDEX\", \"INVALID_INDEX\"})\n+    \/\/ 2) unsigned JDK bundle and --mac-sign is provided\n+    @Parameter({\"true\", \"INVALID_INDEX\", \"ASCII_INDEX\"})\n+    \/\/ 3) signed JDK bundle and --mac-sign is not provided\n+    @Parameter({\"true\", \"UNICODE_INDEX\", \"INVALID_INDEX\"})\n+    \/\/ 4) signed JDK bundle and --mac-sign is provided\n+    @Parameter({\"true\", \"UNICODE_INDEX\", \"ASCII_INDEX\"})\n+    \/\/ 5) JDK image and --mac-sign is not provided\n+    @Parameter({\"false\", \"INVALID_INDEX\", \"INVALID_INDEX\"})\n+    \/\/ 6) JDK image and --mac-sign is provided\n+    @Parameter({\"false\", \"INVALID_INDEX\", \"ASCII_INDEX\"})\n+    public static void test(boolean useJDKBundle,\n+                            SigningBase.CertIndex jdkBundleCert,\n+                            SigningBase.CertIndex signCert) throws Exception {\n+\n+        final Path inputRuntime[] = new Path[1];\n+\n+        new PackageTest()\n+                .addRunOnceInitializer(() -> {\n+                    if (useJDKBundle) {\n+                        inputRuntime[0] = createInputRuntimeBundle(jdkBundleCert.value());\n+                    } else {\n+                        inputRuntime[0] = createInputRuntimeImage();\n+                    }\n+                })\n+                .addInitializer(cmd -> {\n+                    cmd.addArguments(\"--runtime-image\", inputRuntime[0]);\n+                    \/\/ Remove --input parameter from jpackage command line as we don't\n+                    \/\/ create input directory in the test and jpackage fails\n+                    \/\/ if --input references non existent directory.\n+                    cmd.removeArgumentWithValue(\"--input\");\n+                    addSignOptions(cmd, signCert.value());\n+                })\n+                .addInstallVerifier(cmd -> {\n+                    final var certIndex = Stream.of(signCert, jdkBundleCert)\n+                            .filter(Predicate.isEqual(SigningBase.CertIndex.INVALID_INDEX).negate())\n+                            .findFirst().orElse(SigningBase.CertIndex.INVALID_INDEX).value();\n+\n+                    final var signed = certIndex != SigningBase.CertIndex.INVALID_INDEX.value();\n+\n+                    final var unfoldedBundleDir = cmd.appRuntimeDirectory();\n+\n+                    final var libjli = unfoldedBundleDir.resolve(\"Contents\/MacOS\/libjli.dylib\");\n+\n+                    SigningBase.verifyCodesign(libjli, signed, certIndex);\n+                    SigningBase.verifyCodesign(unfoldedBundleDir, signed, certIndex);\n+                    if (signed) {\n+                        SigningBase.verifySpctl(unfoldedBundleDir, \"exec\", certIndex);\n+                    }\n+                })\n+                .run();\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningRuntimeImagePackageTest.java","additions":211,"deletions":0,"binary":false,"changes":211,"status":"added"}]}