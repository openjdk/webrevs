{"files":[{"patch":"@@ -541,0 +541,2 @@\n+    LXVP_OPCODE    = ( 6u << OPCODE_SHIFT             ),\n+    STXVP_OPCODE   = ( 6u << OPCODE_SHIFT |    1u     ),\n@@ -1246,0 +1248,5 @@\n+  static int vsrtp(     int         x)  {\n+    assert((x & 1) == 0, \"must be even\");\n+    return opp_u_field((x & 0x1F) >> 1, 9, 6) | opp_u_field((x & 0x20) >> 5, 10, 10);\n+  }\n+  static int vsrsp(     int         x)  { return  vsrtp(x); }\n@@ -1254,0 +1261,2 @@\n+  static int vsrtp(  VectorSRegister r)  { return  vsrtp(r->encoding());}\n+  static int vsrsp(  VectorSRegister r)  { return  vsrsp(r->encoding());}\n@@ -2361,0 +2370,2 @@\n+  inline void lxvp(     VectorSRegister d, int si16, Register a);\n+  inline void stxvp(    VectorSRegister d, int si16, Register a);\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -865,2 +865,4 @@\n-inline void Assembler::lxv(     VectorSRegister d, int ui16, Register a)     { assert(is_aligned(ui16, 16), \"displacement must be a multiple of 16\"); emit_int32( LXV_OPCODE  | vsrt_dq(d) | ra0mem(a) | uimm(ui16, 16)); }\n-inline void Assembler::stxv(    VectorSRegister d, int ui16, Register a)     { assert(is_aligned(ui16, 16), \"displacement must be a multiple of 16\"); emit_int32( STXV_OPCODE  | vsrs_dq(d) | ra0mem(a) | uimm(ui16, 16)); }\n+inline void Assembler::lxv(     VectorSRegister d, int si16, Register a)     { assert(is_aligned(si16, 16), \"displacement must be a multiple of 16\"); emit_int32( LXV_OPCODE   | vsrt_dq(d) | ra0mem(a) | simm(si16, 16)); }\n+inline void Assembler::stxv(    VectorSRegister d, int si16, Register a)     { assert(is_aligned(si16, 16), \"displacement must be a multiple of 16\"); emit_int32( STXV_OPCODE  | vsrs_dq(d) | ra0mem(a) | simm(si16, 16)); }\n+inline void Assembler::lxvp(    VectorSRegister d, int si16, Register a)     { assert(is_aligned(si16, 16), \"displacement must be a multiple of 16\"); emit_int32( LXVP_OPCODE  | vsrtp(d)   | ra0mem(a) | simm(si16, 16)); }\n+inline void Assembler::stxvp(   VectorSRegister d, int si16, Register a)     { assert(is_aligned(si16, 16), \"displacement must be a multiple of 16\"); emit_int32( STXVP_OPCODE | vsrsp(d)   | ra0mem(a) | simm(si16, 16)); }\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.inline.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -777,4 +777,0 @@\n-\/\/ Uses ordering which corresponds to ABI:\n-\/\/    _savegpr0_14:  std  r14,-144(r1)\n-\/\/    _savegpr0_15:  std  r15,-136(r1)\n-\/\/    _savegpr0_16:  std  r16,-128(r1)\n@@ -796,5 +792,12 @@\n-    Register spill_addr = R0;\n-    for (int i = 20; i < 32; i++) {\n-      addi(spill_addr, dst, offset);\n-      stxvd2x(as_VectorRegister(i)->to_vsr(), spill_addr);\n-      offset += 16;\n+    if (PowerArchitecturePPC64 >= 10) {\n+      for (int i = 20; i < 32; i += 2) {\n+        stxvp(as_VectorRegister(i)->to_vsr(), offset, dst);\n+        offset += 32;\n+      }\n+    } else {\n+      Register spill_addr = R0;\n+      for (int i = 20; i < 32; i++) {\n+        addi(spill_addr, dst, offset);\n+        stxvd2x(as_VectorRegister(i)->to_vsr(), spill_addr);\n+        offset += 16;\n+      }\n@@ -805,4 +808,0 @@\n-\/\/ Uses ordering which corresponds to ABI:\n-\/\/    _restgpr0_14:  ld   r14,-144(r1)\n-\/\/    _restgpr0_15:  ld   r15,-136(r1)\n-\/\/    _restgpr0_16:  ld   r16,-128(r1)\n@@ -824,5 +823,12 @@\n-    Register spill_addr = R0;\n-    for (int i = 20; i < 32; i++) {\n-      addi(spill_addr, src, offset);\n-      lxvd2x(as_VectorRegister(i)->to_vsr(), spill_addr);\n-      offset += 16;\n+    if (PowerArchitecturePPC64 >= 10) {\n+      for (int i = 20; i < 32; i += 2) {\n+        lxvp(as_VectorRegister(i)->to_vsr(), offset, src);\n+        offset += 32;\n+      }\n+    } else {\n+      Register spill_addr = R0;\n+      for (int i = 20; i < 32; i++) {\n+        addi(spill_addr, src, offset);\n+        lxvd2x(as_VectorRegister(i)->to_vsr(), spill_addr);\n+        offset += 16;\n+      }\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":24,"deletions":18,"binary":false,"changes":42,"status":"modified"}]}