{"files":[{"patch":"@@ -4383,0 +4383,9 @@\n+\/\/ Long Immediate: 16-bit, 16-aligned\n+operand immL16Alg16() %{\n+  predicate(Assembler::is_simm(n->get_long(), 16) && ((n->get_long() & 0xf) == 0));\n+  match(ConL);\n+  op_cost(0);\n+  format %{ %}\n+  interface(CONST_INTER);\n+%}\n+\n@@ -4901,0 +4910,14 @@\n+\/\/ Indirect with 16-aligned Offset\n+operand indOffset16Alg16(iRegPsrc reg, immL16Alg16 offset) %{\n+  constraint(ALLOC_IN_RC(bits64_reg_ro));\n+  match(AddP reg offset);\n+  op_cost(100);\n+  format %{ \"[$reg + $offset]\" %}\n+  interface(MEMORY_INTER) %{\n+    base($reg);\n+    index(0x0);\n+    scale(0x0);\n+    disp($offset);\n+  %}\n+%}\n+\n@@ -5110,0 +5133,1 @@\n+opclass memoryAlg16(indirect, indOffset16Alg16);\n@@ -5664,1 +5688,1 @@\n-instruct loadV16_Power9(vecX dst, indirect mem) %{\n+instruct loadV16_Power9(vecX dst, memoryAlg16 mem) %{\n@@ -5672,1 +5696,1 @@\n-    __ lxv($dst$$VectorSRegister, 0, $mem$$Register);\n+    __ lxv($dst$$VectorSRegister, $mem$$disp, $mem$$Register);\n@@ -6704,1 +6728,1 @@\n-instruct storeV16_Power9(indirect mem, vecX src) %{\n+instruct storeV16_Power9(memoryAlg16 mem, vecX src) %{\n@@ -6712,1 +6736,1 @@\n-    __ stxv($src$$VectorSRegister, 0, $mem$$Register);\n+    __ stxv($src$$VectorSRegister, $mem$$disp, $mem$$Register);\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":28,"deletions":4,"binary":false,"changes":32,"status":"modified"}]}