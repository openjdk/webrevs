{"files":[{"patch":"@@ -349,1 +349,1 @@\n-      map->set_callee_saved(VMRegImpl::stack2reg(offset>>2),\n+      map->set_callee_saved(VMRegImpl::stack2reg(offset >> 2),\n@@ -351,1 +351,1 @@\n-      map->set_callee_saved(VMRegImpl::stack2reg((offset + half_reg_size)>>2),\n+      map->set_callee_saved(VMRegImpl::stack2reg((offset + half_reg_size) >> 2),\n@@ -357,0 +357,4 @@\n+  \/\/ Note that generate_oop_map in the following loops is only used for the\n+  \/\/ polling_page_vectors_safepoint_handler_blob.\n+  \/\/ The order in which the vector contents are stored depends on Endianess and\n+  \/\/ the utilized instructions (PowerArchitecturePPC64).\n@@ -360,1 +364,1 @@\n-      int reg_num  = RegisterSaver_LiveVSRegs[i].reg_num;\n+      int reg_num = RegisterSaver_LiveVSRegs[i].reg_num;\n@@ -366,4 +370,5 @@\n-        map->set_callee_saved(VMRegImpl::stack2reg(offset >> 2),\n-                              RegisterSaver_LiveVSRegs[i].vmreg);\n-        map->set_callee_saved(VMRegImpl::stack2reg((offset + vs_reg_size) >> 2),\n-                              RegisterSaver_LiveVSRegs[i + 1].vmreg);\n+        VMReg vsr = RegisterSaver_LiveVSRegs[i].vmreg;\n+        for (int j = 0; j < 8; j++) {\n+          map->set_callee_saved(VMRegImpl::stack2reg((offset >> 2) + j), vsr);\n+          vsr = vsr->next();\n+        }\n@@ -375,1 +380,1 @@\n-      int reg_num  = RegisterSaver_LiveVSRegs[i].reg_num;\n+      int reg_num = RegisterSaver_LiveVSRegs[i].reg_num;\n@@ -381,2 +386,5 @@\n-        map->set_callee_saved(VMRegImpl::stack2reg(offset >> 2),\n-                              RegisterSaver_LiveVSRegs[i].vmreg);\n+        VMReg vsr = RegisterSaver_LiveVSRegs[i].vmreg;\n+        for (int j = 0; j < 4; j++) {\n+          map->set_callee_saved(VMRegImpl::stack2reg((offset >> 2) + j), vsr);\n+          vsr = vsr->next();\n+        }\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":18,"deletions":10,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -70,1 +70,6 @@\n-  return is_even(value());\n+  if (is_Register() || is_FloatRegister()) return is_even(value());\n+  if (is_VectorSRegister()) {\n+    int base = value() - ConcreteRegisterImpl::max_fpr;\n+    return (base & 3) == 0;\n+  }\n+  return true;\n","filename":"src\/hotspot\/cpu\/ppc\/vmreg_ppc.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}