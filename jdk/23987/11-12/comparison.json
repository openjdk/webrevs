{"files":[{"patch":"@@ -538,1 +538,0 @@\n-    LXVL_OPCODE    = (31u << OPCODE_SHIFT |  269u << 1),\n@@ -540,1 +539,2 @@\n-    STXVL_OPCODE   = (31u << OPCODE_SHIFT |  397u << 1),\n+    LXVX_OPCODE    = (31u << OPCODE_SHIFT |   12u << 1 | 4u << 7),\n+    STXVX_OPCODE   = (31u << OPCODE_SHIFT |  396u << 1),\n@@ -543,0 +543,2 @@\n+    LXVL_OPCODE    = (31u << OPCODE_SHIFT |  269u << 1),\n+    STXVL_OPCODE   = (31u << OPCODE_SHIFT |  397u << 1),\n@@ -2368,6 +2370,1 @@\n-  inline void lxv(      VectorSRegister d, int si16, Register a);\n-  inline void stxv(     VectorSRegister d, int si16, Register a);\n-  inline void lxvp(     VectorSRegister d, int si16, Register a);\n-  inline void stxvp(    VectorSRegister d, int si16, Register a);\n-  inline void lxvl(     VectorSRegister d, Register a, Register b);\n-  inline void stxvl(    VectorSRegister d, Register a, Register b);\n+  \/\/ Power8\n@@ -2378,0 +2375,13 @@\n+\n+  \/\/ Power9\n+  inline void lxv(      VectorSRegister d, int si16, Register a);\n+  inline void stxv(     VectorSRegister d, int si16, Register a);\n+  inline void lxvx(     VectorSRegister d, Register a, Register b);\n+  inline void stxvx(    VectorSRegister d, Register a, Register b);\n+  inline void lxvl(     VectorSRegister d, Register a, Register b);\n+  inline void stxvl(    VectorSRegister d, Register a, Register b);\n+\n+  \/\/ Power10\n+  inline void lxvp(     VectorSRegister d, int si16, Register a);\n+  inline void stxvp(    VectorSRegister d, int si16, Register a);\n+\n@@ -2494,0 +2504,3 @@\n+  inline void lxvx( VectorSRegister d, Register b);\n+  inline void stxvx(VectorSRegister d, Register b);\n+\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.hpp","additions":21,"deletions":8,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -867,0 +867,2 @@\n+inline void Assembler::lxvx(    VectorSRegister d, Register a, Register b)   { emit_int32( LXVX_OPCODE    | vsrt(d) | ra0mem(a)  | rb(b)); }\n+inline void Assembler::stxvx(   VectorSRegister d, Register a, Register b)   { emit_int32( STXVX_OPCODE   | vsrs(d) | ra0mem(a)  | rb(b)); }\n@@ -1145,0 +1147,4 @@\n+inline void Assembler::lxvx( VectorSRegister d, Register b) { emit_int32( LXVX_OPCODE  | vsrt(d) | rb(b)); }\n+inline void Assembler::stxvx(VectorSRegister d, Register b) { emit_int32( STXVX_OPCODE | vsrs(d) | rb(b)); }\n+\n+\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.inline.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -800,1 +800,0 @@\n-      Register spill_addr = R0;\n@@ -802,2 +801,7 @@\n-        addi(spill_addr, dst, offset);\n-        stxvd2x(as_VectorRegister(i)->to_vsr(), spill_addr);\n+        if (PowerArchitecturePPC64 >= 9) {\n+          stxv(as_VectorRegister(i)->to_vsr(), offset, dst);\n+        } else {\n+          Register spill_addr = R0;\n+          addi(spill_addr, dst, offset);\n+          stxvd2x(as_VectorRegister(i)->to_vsr(), spill_addr);\n+        }\n@@ -835,1 +839,0 @@\n-      Register spill_addr = R0;\n@@ -837,2 +840,7 @@\n-        addi(spill_addr, src, offset);\n-        lxvd2x(as_VectorRegister(i)->to_vsr(), spill_addr);\n+        if (PowerArchitecturePPC64 >= 9) {\n+          lxv(as_VectorRegister(i)->to_vsr(), offset, src);\n+        } else {\n+          Register spill_addr = R0;\n+          addi(spill_addr, src, offset);\n+          lxvd2x(as_VectorRegister(i)->to_vsr(), spill_addr);\n+        }\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2012,3 +2012,12 @@\n-      if (PowerArchitecturePPC64 >= 9 && is_aligned(dst_offset, 16)) {\n-        if (masm) {\n-          __ stxv(Rsrc, dst_offset, R1_SP);\n+      if (PowerArchitecturePPC64 >= 9) {\n+        if (is_aligned(dst_offset, 16)) {\n+          if (masm) {\n+            __ stxv(Rsrc, dst_offset, R1_SP); \/\/ matches storeV16_Power9\n+          }\n+          size += 4;\n+        } else {\n+          if (masm) {\n+            __ addi(R0, R1_SP, dst_offset);\n+            __ stxvx(Rsrc, R0); \/\/ matches storeV16_Power9 (regarding element ordering)\n+          }\n+          size += 8;\n@@ -2016,1 +2025,0 @@\n-        size += 4;\n@@ -2020,1 +2028,1 @@\n-          __ stxvd2x(Rsrc, R0);\n+          __ stxvd2x(Rsrc, R0); \/\/ matches storeV16_Power8\n@@ -2029,3 +2037,12 @@\n-      if (PowerArchitecturePPC64 >= 9 && is_aligned(src_offset, 16)) {\n-        if (masm) {\n-          __ lxv(Rdst, src_offset, R1_SP);\n+      if (PowerArchitecturePPC64 >= 9) {\n+        if (is_aligned(src_offset, 16)) {\n+          if (masm) {\n+            __ lxv(Rdst, src_offset, R1_SP);\n+          }\n+          size += 4;\n+        } else {\n+          if (masm) {\n+            __ addi(R0, R1_SP, src_offset);\n+            __ lxvx(Rdst, R0);\n+          }\n+          size += 8;\n@@ -2033,1 +2050,0 @@\n-        size += 4;\n@@ -5634,2 +5650,3 @@\n-instruct loadV16(vecX dst, indirect mem) %{\n-  predicate(n->as_LoadVector()->memory_size() == 16);\n+\/\/ Note: The Power8 instruction loads the contents in a special order in Little Endian mode.\n+instruct loadV16_Power8(vecX dst, indirect mem) %{\n+  predicate(n->as_LoadVector()->memory_size() == 16 && PowerArchitecturePPC64 == 8);\n@@ -5647,0 +5664,13 @@\n+instruct loadV16_Power9(vecX dst, indirect mem) %{\n+  predicate(n->as_LoadVector()->memory_size() == 16 && PowerArchitecturePPC64 >= 9);\n+  match(Set dst (LoadVector mem));\n+  ins_cost(MEMORY_REF_COST);\n+\n+  format %{ \"LXV      $dst, $mem \\t\/\/ load 16-byte Vector\" %}\n+  size(4);\n+  ins_encode %{\n+    __ lxv($dst$$VectorSRegister, 0, $mem$$Register);\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n@@ -6660,2 +6690,3 @@\n-instruct storeV16(indirect mem, vecX src) %{\n-  predicate(n->as_StoreVector()->memory_size() == 16);\n+\/\/ Note: The Power8 instruction stores the contents in a special order in Little Endian mode.\n+instruct storeV16_Power8(indirect mem, vecX src) %{\n+  predicate(n->as_StoreVector()->memory_size() == 16 && PowerArchitecturePPC64 == 8);\n@@ -6673,0 +6704,13 @@\n+instruct storeV16_Power9(indirect mem, vecX src) %{\n+  predicate(n->as_StoreVector()->memory_size() == 16 && PowerArchitecturePPC64 >= 9);\n+  match(Set mem (StoreVector mem src));\n+  ins_cost(MEMORY_REF_COST);\n+\n+  format %{ \"STXV     $mem, $src \\t\/\/ store 16-byte Vector\" %}\n+  size(4);\n+  ins_encode %{\n+    __ stxv($src$$VectorSRegister, 0, $mem$$Register);\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":57,"deletions":13,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -351,2 +351,0 @@\n-      map->set_callee_saved(VMRegImpl::stack2reg((offset + half_reg_size) >> 2),\n-                            RegisterSaver_LiveRegs[i].vmreg->next());\n@@ -357,1 +355,1 @@\n-  \/\/ Note that generate_oop_map in the following loops is only used for the\n+  \/\/ Note that generate_oop_map in the following loop is only used for the\n@@ -363,0 +361,1 @@\n+    assert(is_even(vsregstosave_num), \"expectation\");\n@@ -368,1 +367,1 @@\n-\n+      \/\/ Note: The contents were read in the same order (see loadV16_Power9 node in ppc.ad).\n@@ -370,5 +369,2 @@\n-        VMReg vsr = RegisterSaver_LiveVSRegs[i].vmreg;\n-        for (int j = 0; j < 8; j++) {\n-          map->set_callee_saved(VMRegImpl::stack2reg((offset >> 2) + j), vsr);\n-          vsr = vsr->next();\n-        }\n+        map->set_callee_saved(VMRegImpl::stack2reg(offset >> 2), RegisterSaver_LiveVSRegs[i].vmreg);\n+        map->set_callee_saved(VMRegImpl::stack2reg((offset + vs_reg_size) >> 2), RegisterSaver_LiveVSRegs[i + 1].vmreg);\n@@ -382,3 +378,7 @@\n-      __ li(R31, offset);\n-      __ stxvd2x(as_VectorSRegister(reg_num), R31, R1_SP);\n-\n+      if (PowerArchitecturePPC64 >= 9) {\n+        __ stxv(as_VectorSRegister(reg_num), offset, R1_SP);\n+      } else {\n+        __ li(R31, offset);\n+        __ stxvd2x(as_VectorSRegister(reg_num), R31, R1_SP);\n+      }\n+      \/\/ Note: The contents were read in the same order (see loadV16_Power8 \/ loadV16_Power9 node in ppc.ad).\n@@ -387,4 +387,1 @@\n-        for (int j = 0; j < 4; j++) {\n-          map->set_callee_saved(VMRegImpl::stack2reg((offset >> 2) + j), vsr);\n-          vsr = vsr->next();\n-        }\n+        map->set_callee_saved(VMRegImpl::stack2reg(offset >> 2), vsr);\n@@ -470,2 +467,6 @@\n-      __ li(R31, offset);\n-      __ lxvd2x(as_VectorSRegister(reg_num), R31, R1_SP);\n+      if (PowerArchitecturePPC64 >= 9) {\n+        __ lxv(as_VectorSRegister(reg_num), offset, R1_SP);\n+      } else {\n+        __ li(R31, offset);\n+        __ lxvd2x(as_VectorSRegister(reg_num), R31, R1_SP);\n+      }\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"}]}