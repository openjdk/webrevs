{"files":[{"patch":"@@ -465,1 +465,2 @@\n-  if (method_data() != nullptr && method_data()->is_mature()) {\n+  \/\/ take CounterData regardless of maturity.\n+  if (method_data() != nullptr) {\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+import java.util.ArrayList;\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+\n+\/*\n+ * @test\n+ * @bug 8325681\n+ * @summary C2 inliner rejects to inline a deeper callee because the methoddata of caller is immature.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.TestUnderProfiledSubprocedure\n+ *\/\n+public class TestUnderProfiledSubprocedure {\n+    @Test\n+    @Arguments(setup = \"setupCondition\")\n+    @IR(failOn = {IRNode.ALLOC_OF, \"ArrayList\"})\n+    public void allocationExample(boolean cond) {\n+        \/\/ We expect Iterative EA of C2 marks x and its associative array non-escaped.\n+        var x = new ArrayList<Integer>();\n+        if (cond) { \/\/ The branch is only taken with possibility ODD%.\n+          x.add(0); \/\/ ArrayList::add(E) is a subprocedure. It calls ArrayList::add(E, Object[], int).\n+                    \/\/ when C2 compiles method 'allocateExample', it's possible that the methoddata of ArrayList::add(E) hasn't been mature yet.\n+                    \/\/ If C2 doesn't inline ArrayList.add, x is ArgEscaped.\n+        }\n+    }\n+\n+    \/\/ The tipping point is ProfileMaturityPercentage.\n+    \/\/ When ODD < ProfileMaturityPercentage, it's likely that HotSpot brings method bar() to c2 with premature methoddata.\n+    private static final int ODD = 10;\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+    private static int val = RANDOM.nextInt(100);\n+\n+    @Setup\n+    Object[] setupCondition() {\n+        \/\/ return true with ODD% possibility.\n+        return new Object[]{Boolean.valueOf(RANDOM.nextInt(100) < ODD)};\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setupCondition\")\n+    @IR(failOn = {IRNode.STATIC_CALL_OF_METHOD, \"bar\"})\n+    @IR(failOn = {IRNode.STATIC_CALL_OF_METHOD, \"baz\"})\n+    public void foo(boolean cond) {\n+        if (cond) {\n+            bar();\n+        }\n+    }\n+\n+    public void bar() {\n+        baz();\n+    }\n+\n+    \/\/ method baz must be greater than 6 bytecodes(MaxTrivialSize), or it will be inlined as a trivia\n+    public int baz() {\n+        val = (val-1) * (val+1);\n+        return val;\n+    }\n+\n+    public static void main(String[] args)  {\n+        TestFramework.run();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestUnderProfiledSubprocedure.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}