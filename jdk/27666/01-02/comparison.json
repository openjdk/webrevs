{"files":[{"patch":"@@ -49,0 +49,7 @@\n+    \/\/ The IR framework is not powerful enough to directly check\n+    \/\/ wether invariants are moved out of a loop so tests below rely on\n+    \/\/ some side effect that can be observed by the IR framework.\n+\n+    \/\/ Once a + (b + i) is transformed into i + (a + b), the a + b\n+    \/\/ before the loop and the one from inside the loop common and one\n+    \/\/ Add is removed.\n@@ -60,0 +67,6 @@\n+    \/\/ Range Check Elimination only happens once a + (b + i) is\n+    \/\/ transformed into i + (a + b). With the range check eliminated,\n+    \/\/ the loop can be removed. At this point, C2 doesn't support\n+    \/\/ removal of long counted loop. The long counted loop is\n+    \/\/ transformed into a loop nest with an inner int counted\n+    \/\/ loop. That one is empty and is removed.\n@@ -70,0 +83,1 @@\n+    \/\/ Same here for an int counted loop with long range checks\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestReassociateInvariants.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"}]}