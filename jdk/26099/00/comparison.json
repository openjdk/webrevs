{"files":[{"patch":"@@ -580,1 +580,1 @@\n-    public static final Binary SUADD = binary(\"SUADD\", \"+\", VectorSupport.VECTOR_OP_SUADD, VO_NOFP);\n+    public static final Associative SUADD = assoc(\"SUADD\", \"+\", VectorSupport.VECTOR_OP_SUADD, VO_NOFP+VO_ASSOC);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorOperators.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -408,0 +408,20 @@\n+    static void assertArraysEqualsAssociative(byte[] rl, byte[] rr, byte[] a, byte[] b, byte[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n@@ -1031,0 +1051,5 @@\n+    static final List<List<IntFunction<byte[]>>> BYTE_SATURATING_GENERATOR_TRIPLETS =\n+           Stream.of(BYTE_GENERATOR_PAIRS.get(0)).\n+                   flatMap(pair -> BYTE_SATURATING_GENERATORS.stream().map(f -> List.of(pair.get(0), pair.get(1), f))).\n+                   collect(Collectors.toList());\n+\n@@ -1067,0 +1092,7 @@\n+    @DataProvider\n+    public Object[][] byteSaturatingBinaryOpAssocProvider() {\n+        return BYTE_SATURATING_GENERATOR_TRIPLETS.stream().map(List::toArray).\n+                toArray(Object[][]::new);\n+    }\n+\n+\n@@ -3423,0 +3455,20 @@\n+    @Test(dataProvider = \"byteSaturatingBinaryOpAssocProvider\")\n+    static void SUADDAssocByte128VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb, IntFunction<byte[]> fc) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] c = fc.apply(SPECIES.length());\n+        byte[] rl = fr.apply(SPECIES.length());\n+        byte[] rr = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                ByteVector cv = ByteVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.SUADD, bv).lanewise(VectorOperators.SUADD, cv).intoArray(rl, i);\n+                av.lanewise(VectorOperators.SUADD, bv.lanewise(VectorOperators.SUADD, cv)).intoArray(rr, i);\n+            }\n+        }\n+\n+        assertArraysEqualsAssociative(rl, rr, a, b, c, Byte128VectorTests::SUADD);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -408,0 +408,20 @@\n+    static void assertArraysEqualsAssociative(byte[] rl, byte[] rr, byte[] a, byte[] b, byte[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n@@ -1031,0 +1051,5 @@\n+    static final List<List<IntFunction<byte[]>>> BYTE_SATURATING_GENERATOR_TRIPLETS =\n+           Stream.of(BYTE_GENERATOR_PAIRS.get(0)).\n+                   flatMap(pair -> BYTE_SATURATING_GENERATORS.stream().map(f -> List.of(pair.get(0), pair.get(1), f))).\n+                   collect(Collectors.toList());\n+\n@@ -1067,0 +1092,7 @@\n+    @DataProvider\n+    public Object[][] byteSaturatingBinaryOpAssocProvider() {\n+        return BYTE_SATURATING_GENERATOR_TRIPLETS.stream().map(List::toArray).\n+                toArray(Object[][]::new);\n+    }\n+\n+\n@@ -3423,0 +3455,20 @@\n+    @Test(dataProvider = \"byteSaturatingBinaryOpAssocProvider\")\n+    static void SUADDAssocByte256VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb, IntFunction<byte[]> fc) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] c = fc.apply(SPECIES.length());\n+        byte[] rl = fr.apply(SPECIES.length());\n+        byte[] rr = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                ByteVector cv = ByteVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.SUADD, bv).lanewise(VectorOperators.SUADD, cv).intoArray(rl, i);\n+                av.lanewise(VectorOperators.SUADD, bv.lanewise(VectorOperators.SUADD, cv)).intoArray(rr, i);\n+            }\n+        }\n+\n+        assertArraysEqualsAssociative(rl, rr, a, b, c, Byte256VectorTests::SUADD);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -408,0 +408,20 @@\n+    static void assertArraysEqualsAssociative(byte[] rl, byte[] rr, byte[] a, byte[] b, byte[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n@@ -1031,0 +1051,5 @@\n+    static final List<List<IntFunction<byte[]>>> BYTE_SATURATING_GENERATOR_TRIPLETS =\n+           Stream.of(BYTE_GENERATOR_PAIRS.get(0)).\n+                   flatMap(pair -> BYTE_SATURATING_GENERATORS.stream().map(f -> List.of(pair.get(0), pair.get(1), f))).\n+                   collect(Collectors.toList());\n+\n@@ -1067,0 +1092,7 @@\n+    @DataProvider\n+    public Object[][] byteSaturatingBinaryOpAssocProvider() {\n+        return BYTE_SATURATING_GENERATOR_TRIPLETS.stream().map(List::toArray).\n+                toArray(Object[][]::new);\n+    }\n+\n+\n@@ -3423,0 +3455,20 @@\n+    @Test(dataProvider = \"byteSaturatingBinaryOpAssocProvider\")\n+    static void SUADDAssocByte512VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb, IntFunction<byte[]> fc) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] c = fc.apply(SPECIES.length());\n+        byte[] rl = fr.apply(SPECIES.length());\n+        byte[] rr = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                ByteVector cv = ByteVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.SUADD, bv).lanewise(VectorOperators.SUADD, cv).intoArray(rl, i);\n+                av.lanewise(VectorOperators.SUADD, bv.lanewise(VectorOperators.SUADD, cv)).intoArray(rr, i);\n+            }\n+        }\n+\n+        assertArraysEqualsAssociative(rl, rr, a, b, c, Byte512VectorTests::SUADD);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -408,0 +408,20 @@\n+    static void assertArraysEqualsAssociative(byte[] rl, byte[] rr, byte[] a, byte[] b, byte[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n@@ -1031,0 +1051,5 @@\n+    static final List<List<IntFunction<byte[]>>> BYTE_SATURATING_GENERATOR_TRIPLETS =\n+           Stream.of(BYTE_GENERATOR_PAIRS.get(0)).\n+                   flatMap(pair -> BYTE_SATURATING_GENERATORS.stream().map(f -> List.of(pair.get(0), pair.get(1), f))).\n+                   collect(Collectors.toList());\n+\n@@ -1067,0 +1092,7 @@\n+    @DataProvider\n+    public Object[][] byteSaturatingBinaryOpAssocProvider() {\n+        return BYTE_SATURATING_GENERATOR_TRIPLETS.stream().map(List::toArray).\n+                toArray(Object[][]::new);\n+    }\n+\n+\n@@ -3423,0 +3455,20 @@\n+    @Test(dataProvider = \"byteSaturatingBinaryOpAssocProvider\")\n+    static void SUADDAssocByte64VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb, IntFunction<byte[]> fc) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] c = fc.apply(SPECIES.length());\n+        byte[] rl = fr.apply(SPECIES.length());\n+        byte[] rr = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                ByteVector cv = ByteVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.SUADD, bv).lanewise(VectorOperators.SUADD, cv).intoArray(rl, i);\n+                av.lanewise(VectorOperators.SUADD, bv.lanewise(VectorOperators.SUADD, cv)).intoArray(rr, i);\n+            }\n+        }\n+\n+        assertArraysEqualsAssociative(rl, rr, a, b, c, Byte64VectorTests::SUADD);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -413,0 +413,20 @@\n+    static void assertArraysEqualsAssociative(byte[] rl, byte[] rr, byte[] a, byte[] b, byte[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n@@ -1036,0 +1056,5 @@\n+    static final List<List<IntFunction<byte[]>>> BYTE_SATURATING_GENERATOR_TRIPLETS =\n+           Stream.of(BYTE_GENERATOR_PAIRS.get(0)).\n+                   flatMap(pair -> BYTE_SATURATING_GENERATORS.stream().map(f -> List.of(pair.get(0), pair.get(1), f))).\n+                   collect(Collectors.toList());\n+\n@@ -1072,0 +1097,7 @@\n+    @DataProvider\n+    public Object[][] byteSaturatingBinaryOpAssocProvider() {\n+        return BYTE_SATURATING_GENERATOR_TRIPLETS.stream().map(List::toArray).\n+                toArray(Object[][]::new);\n+    }\n+\n+\n@@ -3428,0 +3460,20 @@\n+    @Test(dataProvider = \"byteSaturatingBinaryOpAssocProvider\")\n+    static void SUADDAssocByteMaxVectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb, IntFunction<byte[]> fc) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] c = fc.apply(SPECIES.length());\n+        byte[] rl = fr.apply(SPECIES.length());\n+        byte[] rr = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                ByteVector cv = ByteVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.SUADD, bv).lanewise(VectorOperators.SUADD, cv).intoArray(rl, i);\n+                av.lanewise(VectorOperators.SUADD, bv.lanewise(VectorOperators.SUADD, cv)).intoArray(rr, i);\n+            }\n+        }\n+\n+        assertArraysEqualsAssociative(rl, rr, a, b, c, ByteMaxVectorTests::SUADD);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -426,0 +426,20 @@\n+    static void assertArraysEqualsAssociative(double[] rl, double[] rr, double[] a, double[] b, double[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -426,0 +426,20 @@\n+    static void assertArraysEqualsAssociative(double[] rl, double[] rr, double[] a, double[] b, double[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -426,0 +426,20 @@\n+    static void assertArraysEqualsAssociative(double[] rl, double[] rr, double[] a, double[] b, double[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -426,0 +426,20 @@\n+    static void assertArraysEqualsAssociative(double[] rl, double[] rr, double[] a, double[] b, double[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -431,0 +431,20 @@\n+    static void assertArraysEqualsAssociative(double[] rl, double[] rr, double[] a, double[] b, double[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -426,0 +426,20 @@\n+    static void assertArraysEqualsAssociative(float[] rl, float[] rr, float[] a, float[] b, float[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -426,0 +426,20 @@\n+    static void assertArraysEqualsAssociative(float[] rl, float[] rr, float[] a, float[] b, float[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -426,0 +426,20 @@\n+    static void assertArraysEqualsAssociative(float[] rl, float[] rr, float[] a, float[] b, float[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -426,0 +426,20 @@\n+    static void assertArraysEqualsAssociative(float[] rl, float[] rr, float[] a, float[] b, float[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -429,0 +429,20 @@\n+    }\n+\n+    static void assertArraysEqualsAssociative(float[] rl, float[] rr, float[] a, float[] b, float[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -408,0 +408,20 @@\n+    static void assertArraysEqualsAssociative(int[] rl, int[] rr, int[] a, int[] b, int[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n@@ -1021,0 +1041,5 @@\n+    static final List<List<IntFunction<int[]>>> INT_SATURATING_GENERATOR_TRIPLETS =\n+           Stream.of(INT_GENERATOR_PAIRS.get(0)).\n+                   flatMap(pair -> INT_SATURATING_GENERATORS.stream().map(f -> List.of(pair.get(0), pair.get(1), f))).\n+                   collect(Collectors.toList());\n+\n@@ -1057,0 +1082,7 @@\n+    @DataProvider\n+    public Object[][] intSaturatingBinaryOpAssocProvider() {\n+        return INT_SATURATING_GENERATOR_TRIPLETS.stream().map(List::toArray).\n+                toArray(Object[][]::new);\n+    }\n+\n+\n@@ -3467,0 +3499,20 @@\n+    @Test(dataProvider = \"intSaturatingBinaryOpAssocProvider\")\n+    static void SUADDAssocInt128VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb, IntFunction<int[]> fc) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] c = fc.apply(SPECIES.length());\n+        int[] rl = fr.apply(SPECIES.length());\n+        int[] rr = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                IntVector cv = IntVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.SUADD, bv).lanewise(VectorOperators.SUADD, cv).intoArray(rl, i);\n+                av.lanewise(VectorOperators.SUADD, bv.lanewise(VectorOperators.SUADD, cv)).intoArray(rr, i);\n+            }\n+        }\n+\n+        assertArraysEqualsAssociative(rl, rr, a, b, c, Int128VectorTests::SUADD);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -408,0 +408,20 @@\n+    static void assertArraysEqualsAssociative(int[] rl, int[] rr, int[] a, int[] b, int[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n@@ -1021,0 +1041,5 @@\n+    static final List<List<IntFunction<int[]>>> INT_SATURATING_GENERATOR_TRIPLETS =\n+           Stream.of(INT_GENERATOR_PAIRS.get(0)).\n+                   flatMap(pair -> INT_SATURATING_GENERATORS.stream().map(f -> List.of(pair.get(0), pair.get(1), f))).\n+                   collect(Collectors.toList());\n+\n@@ -1057,0 +1082,7 @@\n+    @DataProvider\n+    public Object[][] intSaturatingBinaryOpAssocProvider() {\n+        return INT_SATURATING_GENERATOR_TRIPLETS.stream().map(List::toArray).\n+                toArray(Object[][]::new);\n+    }\n+\n+\n@@ -3467,0 +3499,20 @@\n+    @Test(dataProvider = \"intSaturatingBinaryOpAssocProvider\")\n+    static void SUADDAssocInt256VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb, IntFunction<int[]> fc) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] c = fc.apply(SPECIES.length());\n+        int[] rl = fr.apply(SPECIES.length());\n+        int[] rr = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                IntVector cv = IntVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.SUADD, bv).lanewise(VectorOperators.SUADD, cv).intoArray(rl, i);\n+                av.lanewise(VectorOperators.SUADD, bv.lanewise(VectorOperators.SUADD, cv)).intoArray(rr, i);\n+            }\n+        }\n+\n+        assertArraysEqualsAssociative(rl, rr, a, b, c, Int256VectorTests::SUADD);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -408,0 +408,20 @@\n+    static void assertArraysEqualsAssociative(int[] rl, int[] rr, int[] a, int[] b, int[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n@@ -1021,0 +1041,5 @@\n+    static final List<List<IntFunction<int[]>>> INT_SATURATING_GENERATOR_TRIPLETS =\n+           Stream.of(INT_GENERATOR_PAIRS.get(0)).\n+                   flatMap(pair -> INT_SATURATING_GENERATORS.stream().map(f -> List.of(pair.get(0), pair.get(1), f))).\n+                   collect(Collectors.toList());\n+\n@@ -1057,0 +1082,7 @@\n+    @DataProvider\n+    public Object[][] intSaturatingBinaryOpAssocProvider() {\n+        return INT_SATURATING_GENERATOR_TRIPLETS.stream().map(List::toArray).\n+                toArray(Object[][]::new);\n+    }\n+\n+\n@@ -3467,0 +3499,20 @@\n+    @Test(dataProvider = \"intSaturatingBinaryOpAssocProvider\")\n+    static void SUADDAssocInt512VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb, IntFunction<int[]> fc) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] c = fc.apply(SPECIES.length());\n+        int[] rl = fr.apply(SPECIES.length());\n+        int[] rr = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                IntVector cv = IntVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.SUADD, bv).lanewise(VectorOperators.SUADD, cv).intoArray(rl, i);\n+                av.lanewise(VectorOperators.SUADD, bv.lanewise(VectorOperators.SUADD, cv)).intoArray(rr, i);\n+            }\n+        }\n+\n+        assertArraysEqualsAssociative(rl, rr, a, b, c, Int512VectorTests::SUADD);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -408,0 +408,20 @@\n+    static void assertArraysEqualsAssociative(int[] rl, int[] rr, int[] a, int[] b, int[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n@@ -1021,0 +1041,5 @@\n+    static final List<List<IntFunction<int[]>>> INT_SATURATING_GENERATOR_TRIPLETS =\n+           Stream.of(INT_GENERATOR_PAIRS.get(0)).\n+                   flatMap(pair -> INT_SATURATING_GENERATORS.stream().map(f -> List.of(pair.get(0), pair.get(1), f))).\n+                   collect(Collectors.toList());\n+\n@@ -1057,0 +1082,7 @@\n+    @DataProvider\n+    public Object[][] intSaturatingBinaryOpAssocProvider() {\n+        return INT_SATURATING_GENERATOR_TRIPLETS.stream().map(List::toArray).\n+                toArray(Object[][]::new);\n+    }\n+\n+\n@@ -3467,0 +3499,20 @@\n+    @Test(dataProvider = \"intSaturatingBinaryOpAssocProvider\")\n+    static void SUADDAssocInt64VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb, IntFunction<int[]> fc) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] c = fc.apply(SPECIES.length());\n+        int[] rl = fr.apply(SPECIES.length());\n+        int[] rr = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                IntVector cv = IntVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.SUADD, bv).lanewise(VectorOperators.SUADD, cv).intoArray(rl, i);\n+                av.lanewise(VectorOperators.SUADD, bv.lanewise(VectorOperators.SUADD, cv)).intoArray(rr, i);\n+            }\n+        }\n+\n+        assertArraysEqualsAssociative(rl, rr, a, b, c, Int64VectorTests::SUADD);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -413,0 +413,20 @@\n+    static void assertArraysEqualsAssociative(int[] rl, int[] rr, int[] a, int[] b, int[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n@@ -1026,0 +1046,5 @@\n+    static final List<List<IntFunction<int[]>>> INT_SATURATING_GENERATOR_TRIPLETS =\n+           Stream.of(INT_GENERATOR_PAIRS.get(0)).\n+                   flatMap(pair -> INT_SATURATING_GENERATORS.stream().map(f -> List.of(pair.get(0), pair.get(1), f))).\n+                   collect(Collectors.toList());\n+\n@@ -1062,0 +1087,7 @@\n+    @DataProvider\n+    public Object[][] intSaturatingBinaryOpAssocProvider() {\n+        return INT_SATURATING_GENERATOR_TRIPLETS.stream().map(List::toArray).\n+                toArray(Object[][]::new);\n+    }\n+\n+\n@@ -3472,0 +3504,20 @@\n+    @Test(dataProvider = \"intSaturatingBinaryOpAssocProvider\")\n+    static void SUADDAssocIntMaxVectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb, IntFunction<int[]> fc) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] c = fc.apply(SPECIES.length());\n+        int[] rl = fr.apply(SPECIES.length());\n+        int[] rr = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                IntVector cv = IntVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.SUADD, bv).lanewise(VectorOperators.SUADD, cv).intoArray(rl, i);\n+                av.lanewise(VectorOperators.SUADD, bv.lanewise(VectorOperators.SUADD, cv)).intoArray(rr, i);\n+            }\n+        }\n+\n+        assertArraysEqualsAssociative(rl, rr, a, b, c, IntMaxVectorTests::SUADD);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -365,0 +365,20 @@\n+    static void assertArraysEqualsAssociative(long[] rl, long[] rr, long[] a, long[] b, long[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n@@ -1011,0 +1031,5 @@\n+    static final List<List<IntFunction<long[]>>> LONG_SATURATING_GENERATOR_TRIPLETS =\n+           Stream.of(LONG_GENERATOR_PAIRS.get(0)).\n+                   flatMap(pair -> LONG_SATURATING_GENERATORS.stream().map(f -> List.of(pair.get(0), pair.get(1), f))).\n+                   collect(Collectors.toList());\n+\n@@ -1047,0 +1072,7 @@\n+    @DataProvider\n+    public Object[][] longSaturatingBinaryOpAssocProvider() {\n+        return LONG_SATURATING_GENERATOR_TRIPLETS.stream().map(List::toArray).\n+                toArray(Object[][]::new);\n+    }\n+\n+\n@@ -3489,0 +3521,20 @@\n+    @Test(dataProvider = \"longSaturatingBinaryOpAssocProvider\")\n+    static void SUADDAssocLong128VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb, IntFunction<long[]> fc) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] c = fc.apply(SPECIES.length());\n+        long[] rl = fr.apply(SPECIES.length());\n+        long[] rr = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                LongVector cv = LongVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.SUADD, bv).lanewise(VectorOperators.SUADD, cv).intoArray(rl, i);\n+                av.lanewise(VectorOperators.SUADD, bv.lanewise(VectorOperators.SUADD, cv)).intoArray(rr, i);\n+            }\n+        }\n+\n+        assertArraysEqualsAssociative(rl, rr, a, b, c, Long128VectorTests::SUADD);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -365,0 +365,20 @@\n+    static void assertArraysEqualsAssociative(long[] rl, long[] rr, long[] a, long[] b, long[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n@@ -1011,0 +1031,5 @@\n+    static final List<List<IntFunction<long[]>>> LONG_SATURATING_GENERATOR_TRIPLETS =\n+           Stream.of(LONG_GENERATOR_PAIRS.get(0)).\n+                   flatMap(pair -> LONG_SATURATING_GENERATORS.stream().map(f -> List.of(pair.get(0), pair.get(1), f))).\n+                   collect(Collectors.toList());\n+\n@@ -1047,0 +1072,7 @@\n+    @DataProvider\n+    public Object[][] longSaturatingBinaryOpAssocProvider() {\n+        return LONG_SATURATING_GENERATOR_TRIPLETS.stream().map(List::toArray).\n+                toArray(Object[][]::new);\n+    }\n+\n+\n@@ -3489,0 +3521,20 @@\n+    @Test(dataProvider = \"longSaturatingBinaryOpAssocProvider\")\n+    static void SUADDAssocLong256VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb, IntFunction<long[]> fc) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] c = fc.apply(SPECIES.length());\n+        long[] rl = fr.apply(SPECIES.length());\n+        long[] rr = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                LongVector cv = LongVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.SUADD, bv).lanewise(VectorOperators.SUADD, cv).intoArray(rl, i);\n+                av.lanewise(VectorOperators.SUADD, bv.lanewise(VectorOperators.SUADD, cv)).intoArray(rr, i);\n+            }\n+        }\n+\n+        assertArraysEqualsAssociative(rl, rr, a, b, c, Long256VectorTests::SUADD);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -365,0 +365,20 @@\n+    static void assertArraysEqualsAssociative(long[] rl, long[] rr, long[] a, long[] b, long[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n@@ -1011,0 +1031,5 @@\n+    static final List<List<IntFunction<long[]>>> LONG_SATURATING_GENERATOR_TRIPLETS =\n+           Stream.of(LONG_GENERATOR_PAIRS.get(0)).\n+                   flatMap(pair -> LONG_SATURATING_GENERATORS.stream().map(f -> List.of(pair.get(0), pair.get(1), f))).\n+                   collect(Collectors.toList());\n+\n@@ -1047,0 +1072,7 @@\n+    @DataProvider\n+    public Object[][] longSaturatingBinaryOpAssocProvider() {\n+        return LONG_SATURATING_GENERATOR_TRIPLETS.stream().map(List::toArray).\n+                toArray(Object[][]::new);\n+    }\n+\n+\n@@ -3489,0 +3521,20 @@\n+    @Test(dataProvider = \"longSaturatingBinaryOpAssocProvider\")\n+    static void SUADDAssocLong512VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb, IntFunction<long[]> fc) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] c = fc.apply(SPECIES.length());\n+        long[] rl = fr.apply(SPECIES.length());\n+        long[] rr = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                LongVector cv = LongVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.SUADD, bv).lanewise(VectorOperators.SUADD, cv).intoArray(rl, i);\n+                av.lanewise(VectorOperators.SUADD, bv.lanewise(VectorOperators.SUADD, cv)).intoArray(rr, i);\n+            }\n+        }\n+\n+        assertArraysEqualsAssociative(rl, rr, a, b, c, Long512VectorTests::SUADD);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -365,0 +365,20 @@\n+    static void assertArraysEqualsAssociative(long[] rl, long[] rr, long[] a, long[] b, long[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n@@ -1011,0 +1031,5 @@\n+    static final List<List<IntFunction<long[]>>> LONG_SATURATING_GENERATOR_TRIPLETS =\n+           Stream.of(LONG_GENERATOR_PAIRS.get(0)).\n+                   flatMap(pair -> LONG_SATURATING_GENERATORS.stream().map(f -> List.of(pair.get(0), pair.get(1), f))).\n+                   collect(Collectors.toList());\n+\n@@ -1047,0 +1072,7 @@\n+    @DataProvider\n+    public Object[][] longSaturatingBinaryOpAssocProvider() {\n+        return LONG_SATURATING_GENERATOR_TRIPLETS.stream().map(List::toArray).\n+                toArray(Object[][]::new);\n+    }\n+\n+\n@@ -3489,0 +3521,20 @@\n+    @Test(dataProvider = \"longSaturatingBinaryOpAssocProvider\")\n+    static void SUADDAssocLong64VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb, IntFunction<long[]> fc) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] c = fc.apply(SPECIES.length());\n+        long[] rl = fr.apply(SPECIES.length());\n+        long[] rr = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                LongVector cv = LongVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.SUADD, bv).lanewise(VectorOperators.SUADD, cv).intoArray(rl, i);\n+                av.lanewise(VectorOperators.SUADD, bv.lanewise(VectorOperators.SUADD, cv)).intoArray(rr, i);\n+            }\n+        }\n+\n+        assertArraysEqualsAssociative(rl, rr, a, b, c, Long64VectorTests::SUADD);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -370,0 +370,20 @@\n+    static void assertArraysEqualsAssociative(long[] rl, long[] rr, long[] a, long[] b, long[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n@@ -1016,0 +1036,5 @@\n+    static final List<List<IntFunction<long[]>>> LONG_SATURATING_GENERATOR_TRIPLETS =\n+           Stream.of(LONG_GENERATOR_PAIRS.get(0)).\n+                   flatMap(pair -> LONG_SATURATING_GENERATORS.stream().map(f -> List.of(pair.get(0), pair.get(1), f))).\n+                   collect(Collectors.toList());\n+\n@@ -1052,0 +1077,7 @@\n+    @DataProvider\n+    public Object[][] longSaturatingBinaryOpAssocProvider() {\n+        return LONG_SATURATING_GENERATOR_TRIPLETS.stream().map(List::toArray).\n+                toArray(Object[][]::new);\n+    }\n+\n+\n@@ -3494,0 +3526,20 @@\n+    @Test(dataProvider = \"longSaturatingBinaryOpAssocProvider\")\n+    static void SUADDAssocLongMaxVectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb, IntFunction<long[]> fc) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] c = fc.apply(SPECIES.length());\n+        long[] rl = fr.apply(SPECIES.length());\n+        long[] rr = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                LongVector cv = LongVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.SUADD, bv).lanewise(VectorOperators.SUADD, cv).intoArray(rl, i);\n+                av.lanewise(VectorOperators.SUADD, bv.lanewise(VectorOperators.SUADD, cv)).intoArray(rr, i);\n+            }\n+        }\n+\n+        assertArraysEqualsAssociative(rl, rr, a, b, c, LongMaxVectorTests::SUADD);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -408,0 +408,20 @@\n+    static void assertArraysEqualsAssociative(short[] rl, short[] rr, short[] a, short[] b, short[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n@@ -1021,0 +1041,5 @@\n+    static final List<List<IntFunction<short[]>>> SHORT_SATURATING_GENERATOR_TRIPLETS =\n+           Stream.of(SHORT_GENERATOR_PAIRS.get(0)).\n+                   flatMap(pair -> SHORT_SATURATING_GENERATORS.stream().map(f -> List.of(pair.get(0), pair.get(1), f))).\n+                   collect(Collectors.toList());\n+\n@@ -1057,0 +1082,7 @@\n+    @DataProvider\n+    public Object[][] shortSaturatingBinaryOpAssocProvider() {\n+        return SHORT_SATURATING_GENERATOR_TRIPLETS.stream().map(List::toArray).\n+                toArray(Object[][]::new);\n+    }\n+\n+\n@@ -3414,0 +3446,20 @@\n+    @Test(dataProvider = \"shortSaturatingBinaryOpAssocProvider\")\n+    static void SUADDAssocShort128VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb, IntFunction<short[]> fc) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] c = fc.apply(SPECIES.length());\n+        short[] rl = fr.apply(SPECIES.length());\n+        short[] rr = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                ShortVector cv = ShortVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.SUADD, bv).lanewise(VectorOperators.SUADD, cv).intoArray(rl, i);\n+                av.lanewise(VectorOperators.SUADD, bv.lanewise(VectorOperators.SUADD, cv)).intoArray(rr, i);\n+            }\n+        }\n+\n+        assertArraysEqualsAssociative(rl, rr, a, b, c, Short128VectorTests::SUADD);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -408,0 +408,20 @@\n+    static void assertArraysEqualsAssociative(short[] rl, short[] rr, short[] a, short[] b, short[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n@@ -1021,0 +1041,5 @@\n+    static final List<List<IntFunction<short[]>>> SHORT_SATURATING_GENERATOR_TRIPLETS =\n+           Stream.of(SHORT_GENERATOR_PAIRS.get(0)).\n+                   flatMap(pair -> SHORT_SATURATING_GENERATORS.stream().map(f -> List.of(pair.get(0), pair.get(1), f))).\n+                   collect(Collectors.toList());\n+\n@@ -1057,0 +1082,7 @@\n+    @DataProvider\n+    public Object[][] shortSaturatingBinaryOpAssocProvider() {\n+        return SHORT_SATURATING_GENERATOR_TRIPLETS.stream().map(List::toArray).\n+                toArray(Object[][]::new);\n+    }\n+\n+\n@@ -3414,0 +3446,20 @@\n+    @Test(dataProvider = \"shortSaturatingBinaryOpAssocProvider\")\n+    static void SUADDAssocShort256VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb, IntFunction<short[]> fc) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] c = fc.apply(SPECIES.length());\n+        short[] rl = fr.apply(SPECIES.length());\n+        short[] rr = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                ShortVector cv = ShortVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.SUADD, bv).lanewise(VectorOperators.SUADD, cv).intoArray(rl, i);\n+                av.lanewise(VectorOperators.SUADD, bv.lanewise(VectorOperators.SUADD, cv)).intoArray(rr, i);\n+            }\n+        }\n+\n+        assertArraysEqualsAssociative(rl, rr, a, b, c, Short256VectorTests::SUADD);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -408,0 +408,20 @@\n+    static void assertArraysEqualsAssociative(short[] rl, short[] rr, short[] a, short[] b, short[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n@@ -1021,0 +1041,5 @@\n+    static final List<List<IntFunction<short[]>>> SHORT_SATURATING_GENERATOR_TRIPLETS =\n+           Stream.of(SHORT_GENERATOR_PAIRS.get(0)).\n+                   flatMap(pair -> SHORT_SATURATING_GENERATORS.stream().map(f -> List.of(pair.get(0), pair.get(1), f))).\n+                   collect(Collectors.toList());\n+\n@@ -1057,0 +1082,7 @@\n+    @DataProvider\n+    public Object[][] shortSaturatingBinaryOpAssocProvider() {\n+        return SHORT_SATURATING_GENERATOR_TRIPLETS.stream().map(List::toArray).\n+                toArray(Object[][]::new);\n+    }\n+\n+\n@@ -3414,0 +3446,20 @@\n+    @Test(dataProvider = \"shortSaturatingBinaryOpAssocProvider\")\n+    static void SUADDAssocShort512VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb, IntFunction<short[]> fc) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] c = fc.apply(SPECIES.length());\n+        short[] rl = fr.apply(SPECIES.length());\n+        short[] rr = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                ShortVector cv = ShortVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.SUADD, bv).lanewise(VectorOperators.SUADD, cv).intoArray(rl, i);\n+                av.lanewise(VectorOperators.SUADD, bv.lanewise(VectorOperators.SUADD, cv)).intoArray(rr, i);\n+            }\n+        }\n+\n+        assertArraysEqualsAssociative(rl, rr, a, b, c, Short512VectorTests::SUADD);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -408,0 +408,20 @@\n+    static void assertArraysEqualsAssociative(short[] rl, short[] rr, short[] a, short[] b, short[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n@@ -1021,0 +1041,5 @@\n+    static final List<List<IntFunction<short[]>>> SHORT_SATURATING_GENERATOR_TRIPLETS =\n+           Stream.of(SHORT_GENERATOR_PAIRS.get(0)).\n+                   flatMap(pair -> SHORT_SATURATING_GENERATORS.stream().map(f -> List.of(pair.get(0), pair.get(1), f))).\n+                   collect(Collectors.toList());\n+\n@@ -1057,0 +1082,7 @@\n+    @DataProvider\n+    public Object[][] shortSaturatingBinaryOpAssocProvider() {\n+        return SHORT_SATURATING_GENERATOR_TRIPLETS.stream().map(List::toArray).\n+                toArray(Object[][]::new);\n+    }\n+\n+\n@@ -3414,0 +3446,20 @@\n+    @Test(dataProvider = \"shortSaturatingBinaryOpAssocProvider\")\n+    static void SUADDAssocShort64VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb, IntFunction<short[]> fc) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] c = fc.apply(SPECIES.length());\n+        short[] rl = fr.apply(SPECIES.length());\n+        short[] rr = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                ShortVector cv = ShortVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.SUADD, bv).lanewise(VectorOperators.SUADD, cv).intoArray(rl, i);\n+                av.lanewise(VectorOperators.SUADD, bv.lanewise(VectorOperators.SUADD, cv)).intoArray(rr, i);\n+            }\n+        }\n+\n+        assertArraysEqualsAssociative(rl, rr, a, b, c, Short64VectorTests::SUADD);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -413,0 +413,20 @@\n+    static void assertArraysEqualsAssociative(short[] rl, short[] rr, short[] a, short[] b, short[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n@@ -1026,0 +1046,5 @@\n+    static final List<List<IntFunction<short[]>>> SHORT_SATURATING_GENERATOR_TRIPLETS =\n+           Stream.of(SHORT_GENERATOR_PAIRS.get(0)).\n+                   flatMap(pair -> SHORT_SATURATING_GENERATORS.stream().map(f -> List.of(pair.get(0), pair.get(1), f))).\n+                   collect(Collectors.toList());\n+\n@@ -1062,0 +1087,7 @@\n+    @DataProvider\n+    public Object[][] shortSaturatingBinaryOpAssocProvider() {\n+        return SHORT_SATURATING_GENERATOR_TRIPLETS.stream().map(List::toArray).\n+                toArray(Object[][]::new);\n+    }\n+\n+\n@@ -3419,0 +3451,20 @@\n+    @Test(dataProvider = \"shortSaturatingBinaryOpAssocProvider\")\n+    static void SUADDAssocShortMaxVectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb, IntFunction<short[]> fc) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] c = fc.apply(SPECIES.length());\n+        short[] rl = fr.apply(SPECIES.length());\n+        short[] rr = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                ShortVector cv = ShortVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.SUADD, bv).lanewise(VectorOperators.SUADD, cv).intoArray(rl, i);\n+                av.lanewise(VectorOperators.SUADD, bv.lanewise(VectorOperators.SUADD, cv)).intoArray(rr, i);\n+            }\n+        }\n+\n+        assertArraysEqualsAssociative(rl, rr, a, b, c, ShortMaxVectorTests::SUADD);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+saturating_binary_assocative=\"SaturatingBinary-op-associative\"\n@@ -329,0 +330,5 @@\n+function gen_saturating_binary_op_associative {\n+  echo \"Generating saturating binary associative op $1 ($2)...\"\n+  gen_op_tmpl $saturating_binary_assocative \"$@\"\n+}\n+\n@@ -490,0 +496,1 @@\n+gen_saturating_binary_op_associative \"SUADD\" \"VectorMath.addSaturatingUnsigned(a, b)\" \"BITWISE\"\n","filename":"test\/jdk\/jdk\/incubator\/vector\/gen-template.sh","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,15 @@\n+        $type$[] a = fa.apply(SPECIES.length());\n+        $type$[] b = fb.apply(SPECIES.length());\n+        $type$[] c = fc.apply(SPECIES.length());\n+        $type$[] rl = fr.apply(SPECIES.length());\n+        $type$[] rr = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                $Type$Vector av = $Type$Vector.fromArray(SPECIES, a, i);\n+                $Type$Vector bv = $Type$Vector.fromArray(SPECIES, b, i);\n+                $Type$Vector cv = $Type$Vector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.SUADD, bv).lanewise(VectorOperators.SUADD, cv).intoArray(rl, i);\n+                av.lanewise(VectorOperators.SUADD, bv.lanewise(VectorOperators.SUADD, cv)).intoArray(rr, i);\n+            }\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Kernel-SaturatingBinary-op-associative.template","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -0,0 +1,5 @@\n+    @Test(dataProvider = \"$type$SaturatingBinaryOpAssocProvider\")\n+    static void [[TEST]]Assoc$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb, IntFunction<$type$[]> fc) {\n+[[KERNEL]]\n+        assertArraysEqualsAssociative(rl, rr, a, b, c, $vectorteststype$::[[TEST]]);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-SaturatingBinary-op-associative.template","additions":5,"deletions":0,"binary":false,"changes":5,"status":"added"},{"patch":"@@ -505,0 +505,20 @@\n+    static void assertArraysEqualsAssociative($type$[] rl, $type$[] rr, $type$[] a, $type$[] b, $type$[] c, FBinOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i++) {\n+                \/\/Left associative\n+                Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]));\n+\n+                \/\/Right associative\n+                Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])));\n+\n+                \/\/Results equal sanity check\n+                Assert.assertEquals(rl[i], rr[i]);\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rl[i], f.apply(f.apply(a[i], b[i]), c[i]), \"left associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rr[i], f.apply(a[i], f.apply(b[i], c[i])), \"right associative test at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", input3 = \" + c[i]);\n+            Assert.assertEquals(rl[i], rr[i], \"Result checks not equal at index #\" + i + \"leftRes = \" + rl[i] + \", rightRes = \" + rr[i]);\n+        }\n+    }\n+\n@@ -1295,0 +1315,5 @@\n+    static final List<List<IntFunction<$type$[]>>> $TYPE$_SATURATING_GENERATOR_TRIPLETS =\n+           Stream.of($TYPE$_GENERATOR_PAIRS.get(0)).\n+                   flatMap(pair -> $TYPE$_SATURATING_GENERATORS.stream().map(f -> List.of(pair.get(0), pair.get(1), f))).\n+                   collect(Collectors.toList());\n+\n@@ -1333,0 +1358,7 @@\n+    @DataProvider\n+    public Object[][] $type$SaturatingBinaryOpAssocProvider() {\n+        return $TYPE$_SATURATING_GENERATOR_TRIPLETS.stream().map(List::toArray).\n+                toArray(Object[][]::new);\n+    }\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"}]}