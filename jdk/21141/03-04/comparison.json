{"files":[{"patch":"@@ -619,0 +619,3 @@\n+        if (kflag && !xflag) {\n+            warn(formatMsg(\"warn.option.is.ignored\", \"--keep-old-files\/-k\/k\"));\n+        }\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/Main.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -146,0 +146,2 @@\n+warn.option.is.ignored=\\\n+        Warning: The {0} option is not valid with current usage, will be ignored.\n@@ -169,1 +171,1 @@\n-        \\ \\ skipped: {0}\n+        \\ \\ skipped: {0} exists\n@@ -253,1 +255,1 @@\n-\\                             overwriting (replacing) earlier copies.\n+\\                             overwriting (replacing) earlier copies unless -k is specified.\n@@ -319,2 +321,5 @@\n-\\                             In particular, if a file appears more than once in an\\n\\\n-\\                             archive, later copies will not overwrite earlier copies.\n+\\                             If a file with the same name exists in the target\\n\\\n+\\                             directory, skip the extraction of that file.\\n\\\n+\\                             As a result, if a file appears more than once in an\\n\\\n+\\                             archive, later copies will not overwrite earlier copies.\\n\\\n+\\                             Also note that some file system can be case insensitive.\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/resources\/jar.properties","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run junit ExtractFilesTest\n+ * @run junit\/othervm ExtractFilesTest\n@@ -48,1 +48,0 @@\n-import java.nio.file.Paths;\n@@ -52,1 +51,0 @@\n-import java.util.zip.ZipException;\n@@ -123,1 +121,1 @@\n-                \"  skipped: testfile1\" + nl +\n+                \"  skipped: testfile1 exists\" + nl +\n@@ -141,2 +139,2 @@\n-                \"  skipped: testfile1\" + nl +\n-                \"  skipped: testfile2\" + nl;\n+                \"  skipped: testfile1 exists\" + nl +\n+                \"  skipped: testfile2 exists\" + nl;\n@@ -160,1 +158,1 @@\n-                \"  skipped: testfile2\" + nl;\n+                \"  skipped: testfile2 exists\" + nl;\n@@ -167,0 +165,17 @@\n+    \/**\n+     * Test jar will issue warning when use keep option in non-extraction mode.\n+     *\/\n+    @Test\n+    public void testWarningOnInvalidKeepOption() throws IOException {\n+        var err = jar(\"tkf test.jar\");\n+        println();\n+\n+        String output = \"META-INF\/\" + nl +\n+                \"META-INF\/MANIFEST.MF\" + nl +\n+                \"testfile1\" + nl +\n+                \"testfile2\" + nl;\n+\n+        Assertions.assertArrayEquals(baos.toByteArray(), output.getBytes());\n+        Assertions.assertEquals(\"Warning: The --keep-old-files\/-k\/k option is not valid with current usage, will be ignored.\" + nl, err);\n+    }\n+\n@@ -168,1 +183,1 @@\n-        return Arrays.stream(args).map(d -> Paths.get(\".\", d.split(\"\/\")));\n+        return Arrays.stream(args).map(d -> Path.of(\".\", d.split(\"\/\")));\n@@ -196,1 +211,1 @@\n-            var p = Paths.get(\".\", path.split(\"\/\"));\n+            var p = Path.of(\".\", path.split(\"\/\"));\n@@ -206,2 +221,1 @@\n-            var p = Paths.get(\".\", path.split(\"\/\"));\n-            return String.join(nl, Files.readAllLines(p));\n+            return Files.readString(Path.of(path));\n@@ -228,1 +242,1 @@\n-    private void jar(String cmdline) throws IOException {\n+    private String jar(String cmdline) throws IOException {\n@@ -237,6 +251,4 @@\n-        int rc = JAR_TOOL.run(out, err, cmdline.split(\" +\"));\n-        System.setErr(saveErr);\n-        if (rc != 0) {\n-            String s = baes.toString();\n-            if (s.startsWith(\"java.util.zip.ZipException: duplicate entry: \")) {\n-                throw new ZipException(s);\n+        try {\n+            int rc = JAR_TOOL.run(out, err, cmdline.split(\" +\"));\n+            if (rc != 0) {\n+                throw new IOException(baes.toString());\n@@ -244,1 +256,2 @@\n-            throw new IOException(s);\n+        } finally {\n+            System.setErr(saveErr);\n@@ -246,0 +259,1 @@\n+        return baes.toString();\n","filename":"test\/jdk\/tools\/jar\/ExtractFilesTest.java","additions":33,"deletions":19,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run junit MultipleManifestTest\n+ * @run junit\/othervm MultipleManifestTest\n@@ -41,1 +41,0 @@\n-import org.junit.jupiter.api.MethodOrderer.MethodName;\n@@ -45,1 +44,0 @@\n-import org.junit.jupiter.api.TestMethodOrder;\n@@ -53,1 +51,0 @@\n-import java.nio.file.Paths;\n@@ -61,1 +58,0 @@\n-import java.util.zip.ZipException;\n@@ -67,1 +63,0 @@\n-@TestMethodOrder(MethodName.class)\n@@ -174,1 +169,1 @@\n-                \"  skipped: META-INF\/MANIFEST.MF\" + nl +\n+                \"  skipped: META-INF\/MANIFEST.MF exists\" + nl +\n@@ -176,1 +171,1 @@\n-                \"  skipped: META-INF\/MANIFEST.MF\" + nl +\n+                \"  skipped: META-INF\/MANIFEST.MF exists\" + nl +\n@@ -182,1 +177,1 @@\n-        try (var is = Files.newInputStream(Paths.get(JarFile.MANIFEST_NAME))) {\n+        try (var is = Files.newInputStream(Path.of(JarFile.MANIFEST_NAME))) {\n@@ -197,6 +192,4 @@\n-        int rc = JAR_TOOL.run(jarOut, err, cmdline.split(\" +\"));\n-        System.setErr(saveErr);\n-        if (rc != 0) {\n-            String s = baes.toString();\n-            if (s.startsWith(\"java.util.zip.ZipException: duplicate entry: \")) {\n-                throw new ZipException(s);\n+        try {\n+            int rc = JAR_TOOL.run(jarOut, err, cmdline.split(\" +\"));\n+            if (rc != 0) {\n+                throw new IOException(baes.toString());\n@@ -204,1 +197,2 @@\n-            throw new IOException(s);\n+        } finally {\n+            System.setErr(saveErr);\n@@ -213,1 +207,1 @@\n-        return Arrays.stream(args).map(d -> Paths.get(\".\", d.split(\"\/\")));\n+        return Arrays.stream(args).map(d -> Path.of(\".\", d.split(\"\/\")));\n","filename":"test\/jdk\/tools\/jar\/MultipleManifestTest.java","additions":11,"deletions":17,"binary":false,"changes":28,"status":"modified"}]}