{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -215,0 +215,7 @@\n+            \/\/ Extract options\n+            new Option(false, OptionType.EXTRACT, \"--keep-old-files\", \"-k\") {\n+                void process(Main jartool, String opt, String arg) {\n+                    jartool.kflag = true;\n+                }\n+            },\n+\n@@ -257,0 +264,1 @@\n+        EXTRACT(\"extract\"),\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/GNUStyleOptions.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -158,0 +158,1 @@\n+     * kflag: keep existing file\n@@ -159,1 +160,1 @@\n-    boolean cflag, uflag, xflag, tflag, vflag, flag0, Mflag, iflag, pflag, dflag, validate;\n+    boolean cflag, uflag, xflag, tflag, vflag, flag0, Mflag, iflag, pflag, dflag, kflag, validate;\n@@ -585,0 +586,3 @@\n+                        case 'k':\n+                            kflag = true;\n+                            break;\n@@ -1455,0 +1459,6 @@\n+            if (f.exists() && kflag) {\n+                if (vflag) {\n+                    output(formatMsg(\"out.kept\", name));\n+                }\n+                return rc;\n+            }\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/Main.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -168,0 +168,2 @@\n+out.kept=\\\n+        \\ \\ skipped: {0}\n@@ -248,1 +250,4 @@\n-\\  -x, --extract              Extract named (or all) files from the archive\n+\\  -x, --extract              Extract named (or all) files from the archive.\\n\\\n+\\                             If a file with the same name appears more than once in\\n\\\n+\\                             the archive, each copy will be extracted, with later copies\\n\\\n+\\                             overwriting (replacing) earlier copies.\n@@ -310,0 +315,6 @@\n+main.help.opt.extract=\\\n+\\ Operation modifiers valid only in extract mode:\\n\n+main.help.opt.extract.keep-old-files=\\\n+\\  -k, --keep-old-files       Do not overwrite existing files.\\n\\\n+\\                             In particular, if a file appears more than once in an\\n\\\n+\\                             archive, later copies will not overwrite earlier copies.\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/resources\/jar.properties","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,251 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8335912\n+ * @summary test extract jar files overwrite existing files behavior\n+ * @library \/test\/lib\n+ * @modules jdk.jartool\n+ * @build jdk.test.lib.Platform\n+ *        jdk.test.lib.util.FileUtils\n+ * @run junit ExtractFilesTest\n+ *\/\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.api.TestInstance.Lifecycle;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.spi.ToolProvider;\n+import java.util.stream.Stream;\n+import java.util.zip.ZipException;\n+\n+import jdk.test.lib.util.FileUtils;\n+\n+ @TestInstance(Lifecycle.PER_CLASS)\n+ public class ExtractFilesTest {\n+    private static final ToolProvider JAR_TOOL = ToolProvider.findFirst(\"jar\")\n+        .orElseThrow(() ->\n+            new RuntimeException(\"jar tool not found\")\n+        );\n+\n+    private final String nl = System.lineSeparator();\n+    private final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    private final PrintStream out = new PrintStream(baos);\n+\n+    @BeforeAll\n+    public void setupJar() throws IOException {\n+        mkdir(\"test1 test2\");\n+        echo(\"testfile1\", \"test1\/testfile1\");\n+        echo(\"testfile2\", \"test2\/testfile2\");\n+        jar(\"cf test.jar -C test1 . -C test2 .\");\n+        rm(\"test1 test2\");\n+    }\n+\n+    @AfterAll\n+    public void cleanup() {\n+        rm(\"test.jar\");\n+    }\n+\n+    \/**\n+     * Regular clean extract with expected output.\n+     *\/\n+    @Test\n+    public void testExtract() throws IOException {\n+        jar(\"xvf test.jar\");\n+        println();\n+        String output = \"  created: META-INF\/\" + nl +\n+                \" inflated: META-INF\/MANIFEST.MF\" + nl +\n+                \" inflated: testfile1\" + nl +\n+                \" inflated: testfile2\" + nl;\n+        rm(\"META-INF testfile1 testfile2\");\n+        Assertions.assertArrayEquals(baos.toByteArray(), output.getBytes());\n+    }\n+\n+    \/**\n+     * Extract should overwrite existing file as default behavior.\n+     *\/\n+    @Test\n+    public void testOverwrite() throws IOException {\n+        touch(\"testfile1\");\n+        jar(\"xvf test.jar\");\n+        println();\n+        String output = \"  created: META-INF\/\" + nl +\n+                \" inflated: META-INF\/MANIFEST.MF\" + nl +\n+                \" inflated: testfile1\" + nl +\n+                \" inflated: testfile2\" + nl;\n+        Assertions.assertEquals(\"testfile1\", cat(\"testfile1\"));\n+        rm(\"META-INF testfile1 testfile2\");\n+        Assertions.assertArrayEquals(baos.toByteArray(), output.getBytes());\n+    }\n+\n+    \/**\n+     * Extract with legacy style option `k` should preserve existing files.\n+     *\/\n+    @Test\n+    public void testKeptOldFile() throws IOException {\n+        touch(\"testfile1\");\n+        jar(\"xkvf test.jar\");\n+        println();\n+        String output = \"  created: META-INF\/\" + nl +\n+                \" inflated: META-INF\/MANIFEST.MF\" + nl +\n+                \"  skipped: testfile1\" + nl +\n+                \" inflated: testfile2\" + nl;\n+        Assertions.assertEquals(\"\", cat(\"testfile1\"));\n+        Assertions.assertEquals(\"testfile2\", cat(\"testfile2\"));\n+        rm(\"META-INF testfile1 testfile2\");\n+        Assertions.assertArrayEquals(baos.toByteArray(), output.getBytes());\n+    }\n+\n+    \/**\n+     * Extract with gnu style -k should preserve existing files.\n+     *\/\n+    @Test\n+    public void testGnuOptionsKeptOldFile() throws IOException {\n+        touch(\"testfile1 testfile2\");\n+        jar(\"-x -k -v -f test.jar\");\n+        println();\n+        String output = \"  created: META-INF\/\" + nl +\n+                \" inflated: META-INF\/MANIFEST.MF\" + nl +\n+                \"  skipped: testfile1\" + nl +\n+                \"  skipped: testfile2\" + nl;\n+        Assertions.assertEquals(\"\", cat(\"testfile1\"));\n+        Assertions.assertEquals(\"\", cat(\"testfile2\"));\n+        rm(\"META-INF testfile1 testfile2\");\n+        Assertions.assertArrayEquals(baos.toByteArray(), output.getBytes());\n+    }\n+\n+    \/**\n+     * Extract with gnu style long option --keep-old-files should preserve existing files.\n+     *\/\n+    @Test\n+    public void testGnuLongOptionsKeptOldFile() throws IOException {\n+        touch(\"testfile2\");\n+        jar(\"-x --keep-old-files -v -f test.jar\");\n+        println();\n+        String output = \"  created: META-INF\/\" + nl +\n+                \" inflated: META-INF\/MANIFEST.MF\" + nl +\n+                \" inflated: testfile1\" + nl +\n+                \"  skipped: testfile2\" + nl;\n+        Assertions.assertEquals(\"testfile1\", cat(\"testfile1\"));\n+        Assertions.assertEquals(\"\", cat(\"testfile2\"));\n+        rm(\"META-INF testfile1 testfile2\");\n+        Assertions.assertArrayEquals(baos.toByteArray(), output.getBytes());\n+    }\n+\n+    private Stream<Path> mkpath(String... args) {\n+        return Arrays.stream(args).map(d -> Paths.get(\".\", d.split(\"\/\")));\n+    }\n+\n+    private void mkdir(String cmdline) {\n+        System.out.println(\"mkdir -p \" + cmdline);\n+        mkpath(cmdline.split(\" +\")).forEach(p -> {\n+            try {\n+                Files.createDirectories(p);\n+            } catch (IOException x) {\n+                throw new UncheckedIOException(x);\n+            }\n+        });\n+    }\n+\n+    private void touch(String cmdline) {\n+        System.out.println(\"touch \" + cmdline);\n+        mkpath(cmdline.split(\" +\")).forEach(p -> {\n+            try {\n+                Files.createFile(p);\n+            } catch (IOException x) {\n+                throw new UncheckedIOException(x);\n+            }\n+        });\n+    }\n+\n+    private void echo(String text, String path) {\n+        System.out.println(\"echo '\" + text + \"' > \" + path);\n+        try {\n+            var p = Paths.get(\".\", path.split(\"\/\"));\n+            Files.writeString(p, text);\n+        } catch (IOException x) {\n+            throw new UncheckedIOException(x);\n+        }\n+    }\n+\n+    private String cat(String path) {\n+        System.out.println(\"cat \" + path);\n+        try {\n+            var p = Paths.get(\".\", path.split(\"\/\"));\n+            return String.join(nl, Files.readAllLines(p));\n+        } catch (IOException x) {\n+            throw new UncheckedIOException(x);\n+        }\n+    }\n+\n+    private void rm(String cmdline) {\n+        System.out.println(\"rm -rf \" + cmdline);\n+        mkpath(cmdline.split(\" +\")).forEach(p -> {\n+            try {\n+                if (Files.isDirectory(p)) {\n+                    FileUtils.deleteFileTreeWithRetry(p);\n+                } else {\n+                    FileUtils.deleteFileIfExistsWithRetry(p);\n+                }\n+            } catch (IOException x) {\n+                throw new UncheckedIOException(x);\n+            }\n+        });\n+    }\n+\n+    private void jar(String cmdline) throws IOException {\n+        System.out.println(\"jar \" + cmdline);\n+        baos.reset();\n+\n+        \/\/ the run method catches IOExceptions, we need to expose them\n+        ByteArrayOutputStream baes = new ByteArrayOutputStream();\n+        PrintStream err = new PrintStream(baes);\n+        PrintStream saveErr = System.err;\n+        System.setErr(err);\n+        int rc = JAR_TOOL.run(out, err, cmdline.split(\" +\"));\n+        System.setErr(saveErr);\n+        if (rc != 0) {\n+            String s = baes.toString();\n+            if (s.startsWith(\"java.util.zip.ZipException: duplicate entry: \")) {\n+                throw new ZipException(s);\n+            }\n+            throw new IOException(s);\n+        }\n+    }\n+\n+    private void println() throws IOException {\n+        System.out.println(new String(baos.toByteArray()));\n+    }\n+}\n","filename":"test\/jdk\/tools\/jar\/ExtractFilesTest.java","additions":251,"deletions":0,"binary":false,"changes":251,"status":"added"},{"patch":"@@ -0,0 +1,230 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8335912\n+ * @summary test extract jar with multpile manifest files\n+ * @library \/test\/lib\n+ * @modules jdk.jartool\n+ * @build jdk.test.lib.Platform\n+ *        jdk.test.lib.util.FileUtils\n+ * @run junit MultipleManifestTest\n+ *\/\n+\n+import java.io.ByteArrayOutputStream;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer.MethodName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.api.TestInstance.Lifecycle;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.jar.Attributes;\n+import java.util.jar.JarFile;\n+import java.util.jar.Manifest;\n+import java.util.spi.ToolProvider;\n+import java.util.stream.Stream;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipException;\n+import java.util.zip.ZipOutputStream;\n+\n+import jdk.test.lib.util.FileUtils;\n+\n+@TestInstance(Lifecycle.PER_CLASS)\n+@TestMethodOrder(MethodName.class)\n+class MultipleManifestTest {\n+    private static final ToolProvider JAR_TOOL = ToolProvider.findFirst(\"jar\")\n+        .orElseThrow(() ->\n+            new RuntimeException(\"jar tool not found\")\n+        );\n+\n+    private final String nl = System.lineSeparator();\n+    private final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    private final PrintStream jarOut = new PrintStream(baos);\n+\n+    static final Path zip = Path.of(\"MultipleManifestTest.jar\");\n+    static final String jdkVendor = System.getProperty(\"java.vendor\");\n+    static final String jdkVersion = System.getProperty(\"java.version\");\n+    static final String MANIFEST1 = \"Manifest-Version: 1.0\"\n+            + System.lineSeparator()\n+            + \"Created-By: \" + jdkVersion + \" (\" + jdkVendor + \")\";\n+    static final String MANIFEST2 = \"Manifest-Version: 2.0\"\n+            + System.lineSeparator()\n+            + \"Created-By: \" + jdkVersion + \" (\" + jdkVendor + \")\";\n+    static final String MANIFEST3 = \"Manifest-Version: 3.0\"\n+            + System.lineSeparator()\n+            + \"Created-By: \" + jdkVersion + \" (\" + jdkVendor + \")\";\n+    private static final String META_INF = \"META-INF\/\";\n+\n+    \/**\n+     * Delete the ZIP file produced by this test\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @AfterAll\n+    public void cleanup() throws IOException {\n+        Files.deleteIfExists(zip);\n+    }\n+\n+    \/**\n+     * Create a JAR with the Manifest as the 1st, 2nd and 4th entry\n+     *\n+     * @throws IOException if an error occurs\n+     *\/\n+    @BeforeAll\n+    public void writeManifestAsFirstSecondAndFourthEntry() throws IOException {\n+        int locPosA, locPosB, cenPos;\n+        System.out.printf(\"%n%n*****Creating Jar with the Manifest as the 1st, 2nd and 4th entry*****%n%n\");\n+        var out = new ByteArrayOutputStream(1024);\n+        try (var zos = new ZipOutputStream(out)) {\n+            zos.putNextEntry(new ZipEntry(JarFile.MANIFEST_NAME));\n+            zos.write(MANIFEST1.getBytes(StandardCharsets.UTF_8));\n+            zos.closeEntry();\n+            locPosA = out.size();\n+            zos.putNextEntry(new ZipEntry(META_INF + \"AANIFEST.MF\"));\n+            zos.write(MANIFEST2.getBytes(StandardCharsets.UTF_8));\n+            zos.putNextEntry(new ZipEntry(\"entry1.txt\"));\n+            zos.write(\"entry1\".getBytes(StandardCharsets.UTF_8));\n+            zos.closeEntry();\n+            locPosB = out.size();\n+            zos.putNextEntry(new ZipEntry(META_INF + \"BANIFEST.MF\"));\n+            zos.write(MANIFEST3.getBytes(StandardCharsets.UTF_8));\n+            zos.putNextEntry(new ZipEntry(\"entry2.txt\"));\n+            zos.write(\"hello entry2\".getBytes(StandardCharsets.UTF_8));\n+            zos.flush();\n+            cenPos = out.size();\n+        }\n+        var template = out.toByteArray();\n+        \/\/ ISO_8859_1 to keep the 8-bit value\n+        var s = new String(template, StandardCharsets.ISO_8859_1);\n+        \/\/ change META-INF\/AANIFEST.MF to META-INF\/MANIFEST.MF\n+        var loc = s.indexOf(\"AANIFEST.MF\", locPosA);\n+        var cen = s.indexOf(\"AANIFEST.MF\", cenPos);\n+        template[loc] = template[cen] = (byte) 'M';\n+        \/\/ change META-INF\/BANIFEST.MF to META-INF\/MANIFEST.MF\n+        loc = s.indexOf(\"BANIFEST.MF\", locPosB);\n+        cen = s.indexOf(\"BANIFEST.MF\", cenPos);\n+        template[loc] = template[cen] = (byte) 'M';\n+        Files.write(zip, template);\n+    }\n+\n+    @AfterEach\n+    public void removeExtractedFiles() {\n+        rm(\"META-INF entry1.txt entry2.txt\");\n+    }\n+\n+    \/**\n+     * Extract by default should have the last manifest.\n+     *\/\n+    @Test\n+    public void testOverwrite() throws IOException {\n+        jar(\"xvf \" + zip.toString());\n+        println();\n+        Assertions.assertEquals(\"3.0\", getManifestVersion());\n+        String output = \" inflated: META-INF\/MANIFEST.MF\" + nl +\n+                \" inflated: META-INF\/MANIFEST.MF\" + nl +\n+                \" inflated: entry1.txt\" + nl +\n+                \" inflated: META-INF\/MANIFEST.MF\" + nl +\n+                \" inflated: entry2.txt\" + nl;\n+        Assertions.assertArrayEquals(baos.toByteArray(), output.getBytes());\n+    }\n+\n+    \/**\n+     * Extract with k option should have first manifest.\n+     *\/\n+    @Test\n+    public void testKeptOldFile() throws IOException {\n+        jar(\"xkvf \" + zip.toString());\n+        println();\n+        Assertions.assertEquals(\"1.0\", getManifestVersion());\n+        String output = \" inflated: META-INF\/MANIFEST.MF\" + nl +\n+                \"  skipped: META-INF\/MANIFEST.MF\" + nl +\n+                \" inflated: entry1.txt\" + nl +\n+                \"  skipped: META-INF\/MANIFEST.MF\" + nl +\n+                \" inflated: entry2.txt\" + nl;\n+        Assertions.assertArrayEquals(baos.toByteArray(), output.getBytes());\n+    }\n+\n+    private String getManifestVersion() throws IOException {\n+        try (var is = Files.newInputStream(Paths.get(JarFile.MANIFEST_NAME))) {\n+            var manifest = new Manifest(is);\n+            return manifest.getMainAttributes().getValue(Attributes.Name.MANIFEST_VERSION);\n+        }\n+    }\n+\n+    private void jar(String cmdline) throws IOException {\n+        System.out.println(\"jar \" + cmdline);\n+        baos.reset();\n+\n+        \/\/ the run method catches IOExceptions, we need to expose them\n+        ByteArrayOutputStream baes = new ByteArrayOutputStream();\n+        PrintStream err = new PrintStream(baes);\n+        PrintStream saveErr = System.err;\n+        System.setErr(err);\n+        int rc = JAR_TOOL.run(jarOut, err, cmdline.split(\" +\"));\n+        System.setErr(saveErr);\n+        if (rc != 0) {\n+            String s = baes.toString();\n+            if (s.startsWith(\"java.util.zip.ZipException: duplicate entry: \")) {\n+                throw new ZipException(s);\n+            }\n+            throw new IOException(s);\n+        }\n+    }\n+\n+    private void println() throws IOException {\n+        System.out.println(new String(baos.toByteArray()));\n+    }\n+\n+    private Stream<Path> mkpath(String... args) {\n+        return Arrays.stream(args).map(d -> Paths.get(\".\", d.split(\"\/\")));\n+    }\n+\n+    private void rm(String cmdline) {\n+        System.out.println(\"rm -rf \" + cmdline);\n+        mkpath(cmdline.split(\" +\")).forEach(p -> {\n+            try {\n+                if (Files.isDirectory(p)) {\n+                    FileUtils.deleteFileTreeWithRetry(p);\n+                } else {\n+                    FileUtils.deleteFileIfExistsWithRetry(p);\n+                }\n+            } catch (IOException x) {\n+                throw new UncheckedIOException(x);\n+            }\n+        });\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/tools\/jar\/MultipleManifestTest.java","additions":230,"deletions":0,"binary":false,"changes":230,"status":"added"}]}