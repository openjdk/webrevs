{"files":[{"patch":"@@ -696,1 +696,1 @@\n-      pacer()->claim_for_alloc(words, true);\n+      pacer()->claim_for_alloc<true>(words);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -192,1 +192,2 @@\n-bool ShenandoahPacer::claim_for_alloc(size_t words, bool force) {\n+template<bool FORCE>\n+bool ShenandoahPacer::claim_for_alloc(size_t words) {\n@@ -201,1 +202,1 @@\n-    if (cur < tax && !force) {\n+    if (cur < tax && !FORCE) {\n@@ -210,0 +211,3 @@\n+template bool ShenandoahPacer::claim_for_alloc<true>(size_t words);\n+template bool ShenandoahPacer::claim_for_alloc<false>(size_t words);\n+\n@@ -230,1 +234,1 @@\n-  bool claimed = claim_for_alloc(words, false);\n+  bool claimed = claim_for_alloc<false>(words);\n@@ -235,7 +239,0 @@\n-  \/\/ Forcefully claim the budget: it may go negative at this point, and\n-  \/\/ GC should replenish for this and subsequent allocations. After this claim,\n-  \/\/ we would wait a bit until our claim is matched by additional progress,\n-  \/\/ or the time budget depletes.\n-  claimed = claim_for_alloc(words, true);\n-  assert(claimed, \"Should always succeed\");\n-\n@@ -252,0 +249,1 @@\n+    claim_for_alloc<true>(words);\n@@ -255,6 +253,3 @@\n-  double start = os::elapsedTime();\n-\n-  size_t max_ms = ShenandoahPacingMaxDelay;\n-  size_t total_ms = 0;\n-\n-  while (true) {\n+  jlong const max_delay = ShenandoahPacingMaxDelay * NANOSECS_PER_MILLISEC;\n+  jlong const start_time = os::elapsed_counter();\n+  while (!claimed && (os::elapsed_counter() - start_time) < max_delay) {\n@@ -262,15 +257,9 @@\n-    size_t cur_ms = (max_ms > total_ms) ? (max_ms - total_ms) : 1;\n-    wait(cur_ms);\n-\n-    double end = os::elapsedTime();\n-    total_ms = (size_t)((end - start) * 1000);\n-\n-    if (total_ms > max_ms || Atomic::load(&_budget) >= 0) {\n-      \/\/ Exiting if either:\n-      \/\/  a) Spent local time budget to wait for enough GC progress.\n-      \/\/     Breaking out and allocating anyway, which may mean we outpace GC,\n-      \/\/     and start Degenerated GC cycle.\n-      \/\/  b) The budget had been replenished, which means our claim is satisfied.\n-      ShenandoahThreadLocalData::add_paced_time(JavaThread::current(), end - start);\n-      break;\n-    }\n+    wait(1);\n+    claimed = claim_for_alloc<false>(words);\n+  }\n+  if (!claimed) {\n+    \/\/ Spent local time budget to wait for enough GC progress.\n+    \/\/ Force allocating anyway, which may mean we outpace GC,\n+    \/\/ and start Degenerated GC cycle.\n+    claimed = claim_for_alloc<true>(words);\n+    assert(claimed, \"Should always succeed\");\n@@ -278,0 +267,1 @@\n+  ShenandoahThreadLocalData::add_paced_time(current, (double)(os::elapsed_counter() - start_time) \/ NANOSECS_PER_SEC);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahPacer.cpp","additions":21,"deletions":31,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -110,1 +110,3 @@\n-  bool claim_for_alloc(size_t words, bool force);\n+  template<bool FORCE>\n+  bool claim_for_alloc(size_t words);\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahPacer.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}