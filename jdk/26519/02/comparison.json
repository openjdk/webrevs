{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.ref.WeakReference;\n@@ -230,1 +231,1 @@\n-            if (mark.unused) {\n+            if (mark.get() == null) {\n@@ -245,1 +246,1 @@\n-            if (mark.unused) {\n+            if (mark.get() == null) {\n@@ -281,1 +282,1 @@\n-            if (mark.unused) {\n+            if (mark.get() == null) {\n@@ -306,1 +307,1 @@\n-            if(ref.rec.unused) {\n+            if(ref.rec.get() == null) {\n@@ -326,1 +327,1 @@\n-    static final class PosRec {\n+    static final class PosRec extends WeakReference<StickyPosition> {\n@@ -328,1 +329,2 @@\n-        PosRec(int offset) {\n+        PosRec(int offset, StickyPosition position) {\n+            super(position);\n@@ -333,1 +335,0 @@\n-        boolean unused;\n@@ -336,6 +337,0 @@\n-    \/**\n-     * This really wants to be a weak reference but\n-     * in 1.1 we don't have a 100% pure solution for\n-     * this... so this class tries to hack a solution\n-     * to causing the marks to be collected.\n-     *\/\n@@ -345,1 +340,1 @@\n-            rec = new PosRec(offset);\n+            rec = new PosRec(offset, this);\n@@ -353,7 +348,0 @@\n-        @SuppressWarnings(\"removal\")\n-        protected void finalize() throws Throwable {\n-            \/\/ schedule the record to be removed later\n-            \/\/ on another thread.\n-            rec.unused = true;\n-        }\n-\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/StringContent.java","additions":9,"deletions":21,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.text.BadLocationException;\n+import javax.swing.text.Position;\n+import javax.swing.text.StringContent;\n+\n+\/*\n+ * @test\n+ * @summary test that StringContent Position APIs behave as expected.\n+ *\/\n+\n+public class StringContentPositionTest {\n+\n+    static final int SIZE = 20;\n+    static final String TEXT = \"hello\";\n+    static final int LEN = TEXT.length();\n+    static final StringContent SC = new StringContent();\n+\n+    public static void main(String[] args) throws BadLocationException {\n+\n+        for (int i = 0; i < 1000; i++) {\n+            test();\n+            System.gc();\n+        }\n+    }\n+\n+    static void test() throws BadLocationException {\n+\n+        Position[] positions = new Position[SIZE];\n+\n+        for (int i = 0; i < SIZE; i++) {\n+            SC.insertString(0, TEXT);\n+            positions[i] = SC.createPosition(LEN);\n+        }\n+        for (int i = 0; i < SIZE; i++) {\n+           int expected = ((SIZE - i) * LEN);\n+           if (positions[i].getOffset() != expected) {\n+               throw new RuntimeException(\"insert: Bad offset i=\" + i + \" off=\" + positions[i].getOffset());\n+           }\n+        }\n+        SC.remove(0, SIZE * LEN);\n+        for (int i = 0; i < SIZE; i++) {\n+            if (positions[i].getOffset() != 0) {\n+               throw new RuntimeException(\"remove: Bad offset i=\" + i + \" off=\" + positions[i].getOffset());\n+            }\n+        }\n+     }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/AbstractDocument\/StringContentPositionTest.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}