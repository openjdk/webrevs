{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import java.nio.CharBuffer;\n@@ -271,2 +272,1 @@\n-        private char[] cb;\n-        private int nChars;\n+        private StringBuilder cb;\n@@ -278,2 +278,1 @@\n-            this.cb = new char[initialSize];\n-            this.nChars = initialSize;\n+            this.cb = new StringBuilder(initialSize);\n@@ -283,18 +282,0 @@\n-        \/**\n-         * Grow char array to fit an additional len characters if needed.\n-         * If possible, it grows by len+1 to avoid flushing when len chars\n-         * are added.\n-         *\n-         * This method should only be called while holding the lock.\n-         *\/\n-        private void growIfNeeded(int len) {\n-            int neededSize = nextChar + len + 1;\n-            if (neededSize < 0)\n-                neededSize = Integer.MAX_VALUE;\n-            if (neededSize > nChars && nChars < maxChars) {\n-                int newSize = min(neededSize, maxChars);\n-                cb = Arrays.copyOf(cb, newSize);\n-                nChars = newSize;\n-            }\n-        }\n-\n@@ -304,1 +285,1 @@\n-            if (nextChar == 0)\n+            if (cb.isEmpty())\n@@ -306,2 +287,7 @@\n-            out.write(cb, 0, nextChar);\n-            nextChar = 0;\n+            CharBuffer wrap = CharBuffer.wrap(cb);\n+            if (out instanceof OutputStreamWriter w) {\n+                w.se.write(wrap);\n+            } else {\n+                out.append(wrap);\n+            }\n+            cb.setLength(0);\n@@ -318,2 +304,1 @@\n-            growIfNeeded(1);\n-            if (nextChar >= nChars)\n+            if (cb.length() >= maxChars)\n@@ -321,1 +306,1 @@\n-            cb[nextChar++] = (char) c;\n+            cb.append(c);\n@@ -362,10 +347,2 @@\n-            growIfNeeded(len);\n-            int b = off, t = off + len;\n-            while (b < t) {\n-                int d = min(nChars - nextChar, t - b);\n-                System.arraycopy(cbuf, b, cb, nextChar, d);\n-                b += d;\n-                nextChar += d;\n-                if (nextChar >= nChars) {\n-                    flushBuffer();\n-                }\n+            if (len + cb.length() >= maxChars) {\n+                flushBuffer();\n@@ -373,0 +350,2 @@\n+\n+            cb.append(cbuf, off, len);\n@@ -401,9 +380,7 @@\n-            growIfNeeded(len);\n-            int b = off, t = off + len;\n-            while (b < t) {\n-                int d = min(nChars - nextChar, t - b);\n-                s.getChars(b, b + d, cb, nextChar);\n-                b += d;\n-                nextChar += d;\n-                if (nextChar >= nChars)\n-                    flushBuffer();\n+            if (len >= maxChars) {\n+                \/* If the request length exceeds the max size of the output buffer,\n+                   flush the buffer and then write the data directly.  In this\n+                   way buffered streams will cascade harmlessly. *\/\n+                flushBuffer();\n+                out.write(s, off, len);\n+                return;\n@@ -411,0 +388,6 @@\n+\n+            if (len + cb.length() >= maxChars) {\n+                flushBuffer();\n+            }\n+\n+            cb.append(s, off, len);\n","filename":"src\/java.base\/share\/classes\/java\/io\/BufferedWriter.java","additions":30,"deletions":47,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -2218,0 +2218,4 @@\n+\n+    final int encodeUTF8(int sp, int sl, byte[] dst, int dp) {\n+        return String.encodeUTF8(this.getCoder(), this.value, sp, sl, dst, dp);\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1308,2 +1308,5 @@\n-        byte[] val = this.value;\n-        if (!isLatin1()) {\n+        return encodeUTF8(this.coder(), this.value, sp, sl, dst, dp);\n+    }\n+\n+    static int encodeUTF8(byte coder, byte[] val, int sp, int sl, byte[] dst, int dp) {\n+        if (coder != LATIN1) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2216,0 +2216,4 @@\n+            public int encodeUTF8(StringBuilder sb, int sp, int sl, byte[] dst, int dp) {\n+                return sb.encodeUTF8(sp, sl, dst, dp);\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,0 +184,5 @@\n+\n+    @Override\n+    Object base() {\n+        return str;\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/nio\/StringCharBuffer.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -492,0 +492,2 @@\n+    int encodeUTF8(StringBuilder sb, int sp, int sl, byte[] dst, int dp);\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}