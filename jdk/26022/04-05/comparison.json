{"files":[{"patch":"@@ -29,1 +29,0 @@\n-import java.nio.CharBuffer;\n@@ -272,1 +271,2 @@\n-        private StringBuilder cb;\n+        private char[] cb;\n+        private int nChars;\n@@ -278,1 +278,2 @@\n-            this.cb = new StringBuilder(initialSize);\n+            this.cb = new char[initialSize];\n+            this.nChars = initialSize;\n@@ -282,0 +283,18 @@\n+        \/**\n+         * Grow char array to fit an additional len characters if needed.\n+         * If possible, it grows by len+1 to avoid flushing when len chars\n+         * are added.\n+         *\n+         * This method should only be called while holding the lock.\n+         *\/\n+        private void growIfNeeded(int len) {\n+            int neededSize = nextChar + len + 1;\n+            if (neededSize < 0)\n+                neededSize = Integer.MAX_VALUE;\n+            if (neededSize > nChars && nChars < maxChars) {\n+                int newSize = min(neededSize, maxChars);\n+                cb = Arrays.copyOf(cb, newSize);\n+                nChars = newSize;\n+            }\n+        }\n+\n@@ -285,1 +304,1 @@\n-            if (cb.isEmpty())\n+            if (nextChar == 0)\n@@ -287,7 +306,2 @@\n-            CharBuffer wrap = CharBuffer.wrap(cb);\n-            if (out instanceof OutputStreamWriter w) {\n-                w.se.write(wrap);\n-            } else {\n-                out.append(wrap);\n-            }\n-            cb.setLength(0);\n+            out.write(cb, 0, nextChar);\n+            nextChar = 0;\n@@ -304,1 +318,2 @@\n-            if (cb.length() >= maxChars)\n+            growIfNeeded(1);\n+            if (nextChar >= nChars)\n@@ -306,1 +321,1 @@\n-            cb.append(c);\n+            cb[nextChar++] = (char) c;\n@@ -347,2 +362,10 @@\n-            if (len + cb.length() >= maxChars) {\n-                flushBuffer();\n+            growIfNeeded(len);\n+            int b = off, t = off + len;\n+            while (b < t) {\n+                int d = min(nChars - nextChar, t - b);\n+                System.arraycopy(cbuf, b, cb, nextChar, d);\n+                b += d;\n+                nextChar += d;\n+                if (nextChar >= nChars) {\n+                    flushBuffer();\n+                }\n@@ -350,2 +373,0 @@\n-\n-            cb.append(cbuf, off, len);\n@@ -380,7 +401,9 @@\n-            if (len >= maxChars) {\n-                \/* If the request length exceeds the max size of the output buffer,\n-                   flush the buffer and then write the data directly.  In this\n-                   way buffered streams will cascade harmlessly. *\/\n-                flushBuffer();\n-                out.write(s, off, len);\n-                return;\n+            growIfNeeded(len);\n+            int b = off, t = off + len;\n+            while (b < t) {\n+                int d = min(nChars - nextChar, t - b);\n+                s.getChars(b, b + d, cb, nextChar);\n+                b += d;\n+                nextChar += d;\n+                if (nextChar >= nChars)\n+                    flushBuffer();\n@@ -388,6 +411,0 @@\n-\n-            if (len + cb.length() >= maxChars) {\n-                flushBuffer();\n-            }\n-\n-            cb.append(s, off, len);\n","filename":"src\/java.base\/share\/classes\/java\/io\/BufferedWriter.java","additions":47,"deletions":30,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -2218,4 +2218,0 @@\n-\n-    final int encodeUTF8(int sp, int sl, byte[] dst, int dp) {\n-        return String.encodeUTF8(this.getCoder(), this.value, sp, sl, dst, dp);\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1308,5 +1308,2 @@\n-        return encodeUTF8(this.coder(), this.value, sp, sl, dst, dp);\n-    }\n-\n-    static int encodeUTF8(byte coder, byte[] val, int sp, int sl, byte[] dst, int dp) {\n-        if (coder != LATIN1) {\n+        byte[] val = this.value;\n+        if (!isLatin1()) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2216,4 +2216,0 @@\n-            public int encodeUTF8(StringBuilder sb, int sp, int sl, byte[] dst, int dp) {\n-                return sb.encodeUTF8(sp, sl, dst, dp);\n-            }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,5 +184,0 @@\n-\n-    @Override\n-    Object base() {\n-        return str;\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/nio\/StringCharBuffer.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -492,2 +492,0 @@\n-    int encodeUTF8(StringBuilder sb, int sp, int sl, byte[] dst, int dp);\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}