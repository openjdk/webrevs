{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -416,1 +416,1 @@\n-    private <T,U> void testThrowing(String name, String uri, boolean sameClient,\n+    <T,U> void testThrowing(String name, String uri, boolean sameClient,\n@@ -588,2 +588,1 @@\n-    private static Throwable findCause(Throwable x,\n-                                       Predicate<Throwable> filter) {\n+    static Throwable findCause(Throwable x, Predicate<Throwable> filter) {\n","filename":"test\/jdk\/java\/net\/httpclient\/AbstractThrowingSubscribers.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Verifies the behavior of `limiting()` on unexpected exceptions\n+ *          thrown at various places (`onSubscriber()`, `onNext()`, etc.) when\n+ *          the request is performed _synchronously_ using `HttpClient::send`.\n+ *          Even though throwing exceptions at such points is against the\n+ *          Reactive Streams contract, we make sure that `HttpClient` gets its\n+ *          resources released on such misbehaving user code.\n+ * @library \/test\/jdk\/java\/net\/httpclient\/lib\n+ *          \/test\/lib\n+ * @build AbstractThrowingSubscribers\n+ *        ReferenceTracker\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n+ *        jdk.test.lib.net.SimpleSSLContext\n+ * @run testng\/othervm -Djdk.internal.httpclient.debug=true ThrowingSubscribersAsLimiting\n+ *\/\n+\n+import org.testng.annotations.Test;\n+\n+import java.net.http.HttpResponse;\n+import java.util.function.Supplier;\n+import java.util.stream.Stream;\n+\n+public class ThrowingSubscribersAsLimiting extends AbstractThrowingSubscribers {\n+\n+    @Test(dataProvider = \"variants\")\n+    public void test(String uri, boolean sameClient, Thrower thrower) throws Exception {\n+        test(uri, sameClient, thrower, false);\n+    }\n+\n+    void test(String uri, boolean sameClient, Thrower thrower, boolean async) throws Exception {\n+        uri = uri + \"-\" + URICOUNT.incrementAndGet();\n+        String name = String.format(\n+                \"testThrowingAsLimiting%s(%s, %b, %s)\",\n+                (async ? \"Async\" : \"\"), uri, sameClient, thrower);\n+        Supplier<HttpResponse.BodyHandler<Stream<String>>> handlerSupplier =\n+                () -> HttpResponse.BodyHandlers.limiting(\n+                        HttpResponse.BodyHandlers.ofLines(),\n+                        \/\/ A big enough capacity to allow a minimal response with basic headers and such\n+                        1024);\n+        testThrowing(\n+                name,\n+                uri,\n+                sameClient,\n+                handlerSupplier,\n+                this::finish,\n+                thrower,\n+                async,\n+                excludes(SubscriberType.OFFLINE));\n+    }\n+\n+    private Void finish(Where where, HttpResponse<Stream<String>> response, Thrower thrower) {\n+        switch (where) {\n+            case BODY_HANDLER:\n+            case GET_BODY:\n+            case BODY_CF:\n+                return shouldHaveThrown(where, response, thrower);\n+        }\n+        try {\n+            \/\/ noinspection ResultOfMethodCallIgnored\n+            response.body().toList();\n+        } catch (Error | Exception throwable) {\n+            Throwable cause = findCause(throwable, thrower);\n+            if (cause != null) {\n+                System.out.println(now() + \"Got expected exception in \" + where + \": \" + cause);\n+                return null;\n+            }\n+            throw causeNotFound(where, throwable);\n+        }\n+        return shouldHaveThrown(where, response, thrower);\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/ThrowingSubscribersAsLimiting.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Verifies the behavior of `limiting()` on unexpected exceptions\n+ *          thrown at various places (`onSubscriber()`, `onNext()`, etc.) when\n+ *          the request is performed _asynchronously_ using `HttpClient::sendAsync`.\n+ *          Even though throwing exceptions at such points is against the\n+ *          Reactive Streams contract, we make sure that `HttpClient` gets its\n+ *          resources released on such misbehaving user code.\n+ * @library \/test\/jdk\/java\/net\/httpclient\/lib\n+ *          \/test\/lib\n+ * @build AbstractThrowingSubscribers\n+ *        ReferenceTracker\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n+ *        jdk.test.lib.net.SimpleSSLContext\n+ * @run testng\/othervm -Djdk.internal.httpclient.debug=true ThrowingSubscribersAsLimitingAsync\n+ *\/\n+\n+import org.testng.annotations.Test;\n+\n+public class ThrowingSubscribersAsLimitingAsync extends ThrowingSubscribersAsLimiting {\n+\n+    @Override\n+    @Test(dataProvider = \"variants\")\n+    public void test(String uri, boolean sameClient, Thrower thrower) throws Exception {\n+        test(uri, sameClient, thrower, true);\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/ThrowingSubscribersAsLimitingAsync.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"}]}