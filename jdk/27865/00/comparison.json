{"files":[{"patch":"@@ -55,1 +55,1 @@\n-  _space->initialize(committed_region, \/* clear_space = *\/ true, \/* mangle_space = *\/ true);\n+  _space->initialize(committed_region, \/* clear_space = *\/ true);\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -300,3 +300,3 @@\n-  from()->initialize(fromMR, from()->is_empty(), SpaceDecorator::Mangle);\n-  to()->initialize(toMR, true, SpaceDecorator::Mangle);\n-  eden()->initialize(edenMR, true, SpaceDecorator::Mangle);\n+  from()->initialize(fromMR, from()->is_empty());\n+  to()->initialize(toMR, true);\n+  eden()->initialize(edenMR, true);\n@@ -343,1 +343,1 @@\n-  eden()->initialize(eden_mr, eden()->is_empty(), SpaceDecorator::Mangle);\n+  eden()->initialize(eden_mr, eden()->is_empty());\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -317,1 +317,1 @@\n-  _the_space->initialize(MemRegion(bottom, end), SpaceDecorator::Clear, SpaceDecorator::Mangle);\n+  _the_space->initialize(MemRegion(bottom, end), SpaceDecorator::Clear);\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,2 +47,1 @@\n-                                 bool clear_space,\n-                                 bool mangle_space) {\n+                                 bool clear_space) {\n@@ -58,1 +57,1 @@\n-  if (ZapUnusedHeapArea && mangle_space) {\n+  if (ZapUnusedHeapArea) {\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-  void initialize(MemRegion mr, bool clear_space, bool mangle_space);\n+  void initialize(MemRegion mr, bool clear_space);\n","filename":"src\/hotspot\/share\/gc\/shared\/space.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}