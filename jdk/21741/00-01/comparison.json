{"files":[{"patch":"@@ -24,0 +24,2 @@\n+import java.io.IOException;\n+import java.nio.file.Files;\n@@ -25,1 +27,0 @@\n-import jdk.jpackage.internal.ApplicationLayout;\n@@ -33,0 +34,5 @@\n+import static java.util.stream.Collectors.joining;\n+import java.util.stream.Stream;\n+import jdk.jpackage.internal.IOUtils;\n+import jdk.jpackage.test.Functional.ThrowingFunction;\n+import jdk.jpackage.test.JPackageCommand;\n@@ -54,8 +60,12 @@\n-    private static final String TEST_JAVA = TKit.TEST_SRC_ROOT.resolve(\n-            \"apps\/PrintEnv.java\").toString();\n-    private static final String TEST_DUKE = TKit.TEST_SRC_ROOT.resolve(\n-            \"apps\/dukeplug.png\").toString();\n-    private static final String TEST_DIR = TKit.TEST_SRC_ROOT.resolve(\n-            \"apps\").toString();\n-    private static final String TEST_BAD = TKit.TEST_SRC_ROOT.resolve(\n-            \"non-existant\").toString();\n+    private static final String TEST_JAVA = \"apps\/PrintEnv.java\";\n+    private static final String TEST_DUKE = \"apps\/dukeplug.png\";\n+    private static final String TEST_DIR = \"apps\";\n+    private static final String TEST_BAD = \"non-existant\";\n+\n+    \/\/ On OSX `--app-content` paths will be copied into the \"Contents\" folder\n+    \/\/ of the output app image.\n+    \/\/ \"codesign\" imposes restrictions on the directory structure of \"Contents\" folder.\n+    \/\/ In particular, random files should be placed in \"Contents\/Resources\" folder\n+    \/\/ otherwise \"codesign\" will fail to sign.\n+    \/\/ Need to prepare arguments for `--app-content` accordingly.\n+    private final static boolean copyInResources = TKit.isOSX();\n@@ -88,0 +98,2 @@\n+        var appContentInitializer = new AppContentInitializer(testPathArgs);\n+\n@@ -89,5 +101,2 @@\n-            .addInitializer(cmd -> {\n-                for (String arg : testPathArgs) {\n-                    cmd.addArguments(\"--app-content\", arg);\n-                }\n-            })\n+            .addRunOnceInitializer(appContentInitializer::initAppContent)\n+            .addInitializer(appContentInitializer::applyTo)\n@@ -95,2 +104,1 @@\n-                ApplicationLayout appLayout = cmd.appLayout();\n-                Path contentDir = appLayout.contentDirectory();\n+                Path baseDir = getAppContentRoot(cmd);\n@@ -101,1 +109,1 @@\n-                        TKit.assertPathExists(contentDir.resolve(name), true);\n+                        TKit.assertPathExists(baseDir.resolve(name), true);\n@@ -108,0 +116,16 @@\n+    }\n+\n+    private static Path getAppContentRoot(JPackageCommand cmd) {\n+        Path contentDir = cmd.appLayout().contentDirectory();\n+        if (copyInResources) {\n+            return contentDir.resolve(\"Resources\");\n+        } else {\n+            return contentDir;\n+        }\n+    }\n+\n+    private static final class AppContentInitializer {\n+        AppContentInitializer(List<String> appContentArgs) {\n+            appContentPathGroups = appContentArgs.stream().map(arg -> {\n+                return Stream.of(arg.split(\",\")).map(Path::of).toList();\n+            }).toList();\n@@ -109,0 +133,44 @@\n+\n+        void initAppContent() {\n+            jpackageArgs = appContentPathGroups.stream()\n+                    .map(AppContentInitializer::initAppContentPaths)\n+                    .<String>mapMulti((appContentPaths, consumer) -> {\n+                        consumer.accept(\"--app-content\");\n+                        consumer.accept(\n+                        appContentPaths.stream().map(Path::toString).collect(\n+                                joining(\",\")));\n+                    }).toList();\n+        }\n+\n+        void applyTo(JPackageCommand cmd) {\n+            cmd.addArguments(jpackageArgs);\n+        }\n+\n+        private static Path copyAppContentPath(Path appContentPath) throws IOException {\n+            var appContentArg = TKit.createTempDirectory(\"app-content\").resolve(\"Resources\");\n+            var srcPath = TKit.TEST_SRC_ROOT.resolve(appContentPath);\n+            var dstPath = appContentArg.resolve(srcPath.getFileName());\n+            Files.createDirectories(dstPath.getParent());\n+            IOUtils.copyRecursive(srcPath, dstPath);\n+            return appContentArg;\n+        }\n+\n+        private static List<Path> initAppContentPaths(List<Path> appContentPaths) {\n+            if (copyInResources) {\n+                return appContentPaths.stream().map(appContentPath -> {\n+                    if (appContentPath.endsWith(TEST_BAD)) {\n+                        return appContentPath;\n+                    } else {\n+                        return ThrowingFunction.toFunction(\n+                                AppContentInitializer::copyAppContentPath).apply(\n+                                        appContentPath);\n+                    }\n+                }).toList();\n+            } else {\n+                return appContentPaths.stream().map(TKit.TEST_SRC_ROOT::resolve).toList();\n+            }\n+        }\n+\n+        private List<String> jpackageArgs;\n+        private final List<List<Path>> appContentPathGroups;\n+    }\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppContentTest.java","additions":85,"deletions":17,"binary":false,"changes":102,"status":"modified"}]}