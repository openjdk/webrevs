{"files":[{"patch":"@@ -2738,14 +2738,1 @@\n-Handle java_lang_Throwable::get_cause_with_stack_trace(Handle throwable, TRAPS) {\n-  \/\/ Call to JVM to fill in the stack trace and clear declaringClassObject to\n-  \/\/ not keep classes alive in the stack trace.\n-  \/\/ call this:  public StackTraceElement[] getStackTrace()\n-  assert(throwable.not_null(), \"shouldn't be\");\n-\n-  JavaValue result(T_ARRAY);\n-  JavaCalls::call_virtual(&result, throwable,\n-                          vmClasses::Throwable_klass(),\n-                          vmSymbols::getStackTrace_name(),\n-                          vmSymbols::getStackTrace_signature(),\n-                          CHECK_NH);\n-  Handle stack_trace(THREAD, result.get_oop());\n-  assert(stack_trace->is_objArray(), \"Should be an array\");\n+Handle java_lang_Throwable::create_initialization_error(JavaThread* current, Handle throwable) {\n@@ -2758,1 +2745,1 @@\n-  ResourceMark rm(THREAD);\n+  ResourceMark rm(current);\n@@ -2763,1 +2750,1 @@\n-    st.print(\"[in thread \\\"%s\\\"]\", THREAD->name());\n+    st.print(\"[in thread \\\"%s\\\"]\", current->name());\n@@ -2765,1 +2752,1 @@\n-    st.print(\"%s [in thread \\\"%s\\\"]\", message->as_C_string(), THREAD->name());\n+    st.print(\"%s [in thread \\\"%s\\\"]\", message->as_C_string(), current->name());\n@@ -2769,3 +2756,3 @@\n-  Handle h_cause = Exceptions::new_exception(THREAD, exception_name, st.as_string());\n-\n-  \/\/ If new_exception returns a different exception while creating the exception, return null.\n+  Handle h_cause = Exceptions::new_exception(current, exception_name, st.as_string());\n+  \/\/ If new_exception returns a different exception while creating the exception,\n+  \/\/ try to report the cause despite all of the above\n@@ -2774,2 +2761,2 @@\n-                          h_cause->klass()->external_name());\n-    return Handle();\n+                        h_cause->klass()->external_name());\n+    return throwable;\n@@ -2777,3 +2764,19 @@\n-  java_lang_Throwable::set_stacktrace(h_cause(), stack_trace());\n-  \/\/ Clear backtrace because the stacktrace should be used instead.\n-  set_backtrace(h_cause(), nullptr);\n+\n+  \/\/ Call to java to fill in the stack trace and clear declaringClassObject to\n+  \/\/ not keep classes alive in the stack trace.\n+  \/\/ call this:  public StackTraceElement[] getStackTrace()\n+  assert(throwable.not_null(), \"shouldn't be\");\n+  JavaValue result(T_ARRAY);\n+  JavaCalls::call_virtual(&result, throwable,\n+                          vmClasses::Throwable_klass(),\n+                          vmSymbols::getStackTrace_name(),\n+                          vmSymbols::getStackTrace_signature(),\n+                          current);\n+  if (!current->has_pending_exception()){\n+    Handle stack_trace(current, result.get_oop());\n+    assert(stack_trace->is_objArray(), \"Should be an array\");\n+    java_lang_Throwable::set_stacktrace(h_cause(), stack_trace());\n+    \/\/ Clear backtrace because the stacktrace should be used instead.\n+    set_backtrace(h_cause(), nullptr);\n+  }\n+\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":28,"deletions":25,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -618,1 +618,1 @@\n-  static Handle get_cause_with_stack_trace(Handle throwable, TRAPS);\n+  static Handle create_initialization_error(JavaThread* current, Handle throwable);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -983,5 +983,1 @@\n-  Handle cause = java_lang_Throwable::get_cause_with_stack_trace(exception, THREAD);\n-  if (HAS_PENDING_EXCEPTION || cause.is_null()) {\n-    CLEAR_PENDING_EXCEPTION;\n-    return;\n-  }\n+  Handle cause = java_lang_Throwable::create_initialization_error(current, exception);\n@@ -991,1 +987,1 @@\n-  bool created = false;\n+  bool created;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2023, Azul Systems. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8302491\n+ * @summary Test that StackOverflowError is correctly reported in stack trace\n+ *          as underlying cause of NoClassDefFoundError\n+ * @run main\/othervm -Xcomp -Xss256k TestNoClassDefFoundCause\n+ *\/\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+\n+\n+public class TestNoClassDefFoundCause {\n+\n+    static class ClassThrowsSOE {\n+\n+        private static ClassLoader cl = ClassLoader.getSystemClassLoader();\n+        private static String className = \"TestNoClassDefFoundCause$CantBeLoaded\";\n+        private static ClassThrowsSOE b;\n+\n+        static {\n+            try {\n+                b = new ClassThrowsSOE();\n+            } catch (Throwable tt) {\n+                b = null;\n+            }\n+        }\n+\n+        public ClassThrowsSOE() throws Throwable {\n+            try {\n+                new ClassThrowsSOE();\n+            } catch (StackOverflowError se) {\n+                try {\n+                    Object inst = cl.loadClass(className).newInstance();\n+                } catch (Throwable e) {\n+                    throw e;\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void verifyStack(Throwable e, String cause) throws Exception {\n+        ByteArrayOutputStream byteOS = new ByteArrayOutputStream();\n+        PrintStream printStream = new PrintStream(byteOS);\n+        e.printStackTrace(printStream);\n+        printStream.close();\n+        String stackTrace = byteOS.toString(\"ASCII\");\n+        if (!stackTrace.contains(cause)) {\n+            throw new RuntimeException(\" \\\"\" + cause + \"\\\" missing from stacktrace\");\n+        }\n+    }\n+\n+    public static void main(String args[]) throws Exception{\n+        try {\n+            ClassThrowsSOE b = new ClassThrowsSOE();\n+            throw new RuntimeException(\"Error: Any expected exception wasn't thrown\");\n+        }catch (NoClassDefFoundError t){\n+            System.err.println(\"Check results:\");\n+            verifyStack(t, \"Caused by: java.lang.StackOverflowError\");\n+            System.err.println(\"Exception stack trace for \" + t.toString() + \" is ok\");\n+        } catch (Throwable t) {\n+            System.err.println(\"Exception NoClassDefFoundError wasn't thrown\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassInitErrors\/TestNoClassDefFoundCause.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}