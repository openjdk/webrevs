{"files":[{"patch":"@@ -2738,14 +2738,1 @@\n-Handle java_lang_Throwable::get_cause_with_stack_trace(Handle throwable, TRAPS) {\n-  \/\/ Call to JVM to fill in the stack trace and clear declaringClassObject to\n-  \/\/ not keep classes alive in the stack trace.\n-  \/\/ call this:  public StackTraceElement[] getStackTrace()\n-  assert(throwable.not_null(), \"shouldn't be\");\n-\n-  JavaValue result(T_ARRAY);\n-  JavaCalls::call_virtual(&result, throwable,\n-                          vmClasses::Throwable_klass(),\n-                          vmSymbols::getStackTrace_name(),\n-                          vmSymbols::getStackTrace_signature(),\n-                          CHECK_NH);\n-  Handle stack_trace(THREAD, result.get_oop());\n-  assert(stack_trace->is_objArray(), \"Should be an array\");\n+Handle java_lang_Throwable::create_initialization_error(JavaThread* current, Handle throwable) {\n@@ -2758,1 +2745,1 @@\n-  ResourceMark rm(THREAD);\n+  ResourceMark rm(current);\n@@ -2763,1 +2750,1 @@\n-    st.print(\"[in thread \\\"%s\\\"]\", THREAD->name());\n+    st.print(\"[in thread \\\"%s\\\"]\", current->name());\n@@ -2765,1 +2752,1 @@\n-    st.print(\"%s [in thread \\\"%s\\\"]\", message->as_C_string(), THREAD->name());\n+    st.print(\"%s [in thread \\\"%s\\\"]\", message->as_C_string(), current->name());\n@@ -2769,3 +2756,5 @@\n-  Handle h_cause = Exceptions::new_exception(THREAD, exception_name, st.as_string());\n-\n-  \/\/ If new_exception returns a different exception while creating the exception, return null.\n+  Handle h_cause = Exceptions::new_exception(current, exception_name, st.as_string());\n+  \/\/ If new_exception returns a different exception while creating the exception,\n+  \/\/ abandon the attempts to save initialization error and return null.\n+  \/\/ We can't just return an original throwable (that is get passed as a parameter),\n+  \/\/ because it would keep all the caller classes alive.\n@@ -2774,1 +2763,1 @@\n-                          h_cause->klass()->external_name());\n+                        h_cause->klass()->external_name());\n@@ -2777,3 +2766,23 @@\n-  java_lang_Throwable::set_stacktrace(h_cause(), stack_trace());\n-  \/\/ Clear backtrace because the stacktrace should be used instead.\n-  set_backtrace(h_cause(), nullptr);\n+\n+  \/\/ Call to java to fill in the stack trace and clear declaringClassObject to\n+  \/\/ not keep classes alive in the stack trace.\n+  \/\/ call this:  public StackTraceElement[] getStackTrace()\n+  assert(throwable.not_null(), \"shouldn't be\");\n+  JavaValue result(T_ARRAY);\n+  JavaCalls::call_virtual(&result, throwable,\n+                          vmClasses::Throwable_klass(),\n+                          vmSymbols::getStackTrace_name(),\n+                          vmSymbols::getStackTrace_signature(),\n+                          current);\n+  if (!current->has_pending_exception()){\n+    Handle stack_trace(current, result.get_oop());\n+    assert(stack_trace->is_objArray(), \"Should be an array\");\n+    java_lang_Throwable::set_stacktrace(h_cause(), stack_trace());\n+    \/\/ Clear backtrace because the stacktrace should be used instead.\n+    set_backtrace(h_cause(), nullptr);\n+  } else {\n+    log_info(class, init)(\"Exception thrown while getting stack trace for initialization exception %s\",\n+                        h_cause->klass()->external_name());\n+    current->clear_pending_exception();\n+  }\n+\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":33,"deletions":24,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -618,1 +618,1 @@\n-  static Handle get_cause_with_stack_trace(Handle throwable, TRAPS);\n+  static Handle create_initialization_error(JavaThread* current, Handle throwable);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -983,5 +983,1 @@\n-  Handle cause = java_lang_Throwable::get_cause_with_stack_trace(exception, THREAD);\n-  if (HAS_PENDING_EXCEPTION || cause.is_null()) {\n-    CLEAR_PENDING_EXCEPTION;\n-    return;\n-  }\n+  Handle cause = java_lang_Throwable::create_initialization_error(current, exception);\n@@ -991,1 +987,1 @@\n-  bool created = false;\n+  bool created;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"}]}