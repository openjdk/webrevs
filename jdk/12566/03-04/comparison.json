{"files":[{"patch":"@@ -2758,1 +2758,3 @@\n-  \/\/ try to report the cause despite all of the above\n+  \/\/ abandon the attempts to save initialization error and return null.\n+  \/\/ We can't just return an original throwable (that is get passed as a parameter),\n+  \/\/ because it would keep all the caller classes alive.\n@@ -2762,1 +2764,1 @@\n-    return throwable;\n+    return Handle();\n@@ -2781,0 +2783,4 @@\n+  } else {\n+    log_info(class, init)(\"Exception thrown while getting stack trace for initialization exception %s\",\n+                        h_cause->klass()->external_name());\n+    current->clear_pending_exception();\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,87 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Azul Systems. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8302491\n- * @summary Test that StackOverflowError is correctly reported in stack trace\n- *          as underlying cause of NoClassDefFoundError\n- * @run main\/othervm -Xcomp -Xss256k TestNoClassDefFoundCause\n- *\/\n-import java.io.ByteArrayOutputStream;\n-import java.io.PrintStream;\n-\n-\n-public class TestNoClassDefFoundCause {\n-\n-    static class ClassThrowsSOE {\n-\n-        private static ClassLoader cl = ClassLoader.getSystemClassLoader();\n-        private static String className = \"TestNoClassDefFoundCause$CantBeLoaded\";\n-        private static ClassThrowsSOE b;\n-\n-        static {\n-            try {\n-                b = new ClassThrowsSOE();\n-            } catch (Throwable tt) {\n-                b = null;\n-            }\n-        }\n-\n-        public ClassThrowsSOE() throws Throwable {\n-            try {\n-                new ClassThrowsSOE();\n-            } catch (StackOverflowError se) {\n-                try {\n-                    Object inst = cl.loadClass(className).newInstance();\n-                } catch (Throwable e) {\n-                    throw e;\n-                }\n-            }\n-        }\n-    }\n-\n-    private static void verifyStack(Throwable e, String cause) throws Exception {\n-        ByteArrayOutputStream byteOS = new ByteArrayOutputStream();\n-        PrintStream printStream = new PrintStream(byteOS);\n-        e.printStackTrace(printStream);\n-        printStream.close();\n-        String stackTrace = byteOS.toString(\"ASCII\");\n-        if (!stackTrace.contains(cause)) {\n-            throw new RuntimeException(\" \\\"\" + cause + \"\\\" missing from stacktrace\");\n-        }\n-    }\n-\n-    public static void main(String args[]) throws Exception{\n-        try {\n-            ClassThrowsSOE b = new ClassThrowsSOE();\n-            throw new RuntimeException(\"Error: Any expected exception wasn't thrown\");\n-        }catch (NoClassDefFoundError t){\n-            System.err.println(\"Check results:\");\n-            verifyStack(t, \"Caused by: java.lang.StackOverflowError\");\n-            System.err.println(\"Exception stack trace for \" + t.toString() + \" is ok\");\n-        } catch (Throwable t) {\n-            System.err.println(\"Exception NoClassDefFoundError wasn't thrown\");\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassInitErrors\/TestNoClassDefFoundCause.java","additions":0,"deletions":87,"binary":false,"changes":87,"status":"deleted"}]}