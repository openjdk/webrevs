{"files":[{"patch":"@@ -2739,3 +2739,4 @@\n-\n-  \/\/ Throw ExceptionInInitializerError as the cause with this exception in\n-  \/\/ the message and stack trace.\n+  \/\/ Creates an ExceptionInInitializerError to be recorded as the initialization error when class initialization\n+  \/\/ failed due to the passed in 'throwable'. We cannot save 'throwable' directly due to issues with keeping alive\n+  \/\/ all objects referenced via its stacktrace. So instead we save a new EIIE instance, with the same message and\n+  \/\/ symbolic stacktrace of 'throwable'.\n@@ -2756,1 +2757,1 @@\n-  Handle h_cause = Exceptions::new_exception(current, exception_name, st.as_string());\n+  Handle h_eiie = Exceptions::new_exception(current, exception_name, st.as_string());\n@@ -2758,4 +2759,2 @@\n-  \/\/ abandon the attempts to save initialization error and return null.\n-  \/\/ We can't just return an original throwable (that is get passed as a parameter),\n-  \/\/ because it would keep all the caller classes alive.\n-  if (h_cause->klass()->name() != exception_name) {\n+  \/\/ abandon the attempts to save the initialization error and return null.\n+  if (h_eiie->klass()->name() != exception_name) {\n@@ -2763,1 +2762,1 @@\n-                        h_cause->klass()->external_name());\n+                        h_eiie->klass()->external_name());\n@@ -2780,1 +2779,1 @@\n-    java_lang_Throwable::set_stacktrace(h_cause(), stack_trace());\n+    java_lang_Throwable::set_stacktrace(h_eiie(), stack_trace());\n@@ -2782,1 +2781,1 @@\n-    set_backtrace(h_cause(), nullptr);\n+    set_backtrace(h_eiie(), nullptr);\n@@ -2785,1 +2784,1 @@\n-                        h_cause->klass()->external_name());\n+                        h_eiie->klass()->external_name());\n@@ -2789,1 +2788,1 @@\n-  return h_cause;\n+  return h_eiie;\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -983,1 +983,6 @@\n-  Handle cause = java_lang_Throwable::create_initialization_error(current, exception);\n+  Handle init_error = java_lang_Throwable::create_initialization_error(current, exception);\n+\n+  if ( init_error.is_null()) {\n+    log_trace(class, init)(\"Initialization error is null for class %s\", external_name());\n+    return;\n+  }\n@@ -986,1 +991,1 @@\n-  OopHandle elem = OopHandle(Universe::vm_global(), cause());\n+  OopHandle elem = OopHandle(Universe::vm_global(), init_error());\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"}]}