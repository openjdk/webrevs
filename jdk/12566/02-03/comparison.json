{"files":[{"patch":"@@ -2738,1 +2738,1 @@\n-Handle java_lang_Throwable::get_cause(Handle throwable, bool with_stack_trace, TRAPS) {\n+Handle java_lang_Throwable::create_initialization_error(JavaThread* current, Handle throwable) {\n@@ -2745,1 +2745,1 @@\n-  ResourceMark rm(THREAD);\n+  ResourceMark rm(current);\n@@ -2750,1 +2750,1 @@\n-    st.print(\"[in thread \\\"%s\\\"]\", THREAD->name());\n+    st.print(\"[in thread \\\"%s\\\"]\", current->name());\n@@ -2752,1 +2752,1 @@\n-    st.print(\"%s [in thread \\\"%s\\\"]\", message->as_C_string(), THREAD->name());\n+    st.print(\"%s [in thread \\\"%s\\\"]\", message->as_C_string(), current->name());\n@@ -2756,21 +2756,21 @@\n-  Handle h_cause = Exceptions::new_exception(THREAD, exception_name, st.as_string());\n-\n-  if (with_stack_trace) {\n-    \/\/ If new_exception returns a different exception while creating the exception, return null.\n-    if (h_cause->klass()->name() != exception_name) {\n-      log_info(class, init)(\"Exception thrown while saving initialization exception %s\",\n-                          h_cause->klass()->external_name());\n-      return Handle();\n-  }\n-    \/\/ Call to java to fill in the stack trace and clear declaringClassObject to\n-    \/\/ not keep classes alive in the stack trace.\n-    \/\/ call this:  public StackTraceElement[] getStackTrace()\n-    assert(throwable.not_null(), \"shouldn't be\");\n-\n-    JavaValue result(T_ARRAY);\n-    JavaCalls::call_virtual(&result, throwable,\n-                            vmClasses::Throwable_klass(),\n-                            vmSymbols::getStackTrace_name(),\n-                            vmSymbols::getStackTrace_signature(),\n-                            CHECK_NH);\n-    Handle stack_trace(THREAD, result.get_oop());\n+  Handle h_cause = Exceptions::new_exception(current, exception_name, st.as_string());\n+  \/\/ If new_exception returns a different exception while creating the exception,\n+  \/\/ try to report the cause despite all of the above\n+  if (h_cause->klass()->name() != exception_name) {\n+    log_info(class, init)(\"Exception thrown while saving initialization exception %s\",\n+                        h_cause->klass()->external_name());\n+    return throwable;\n+  }\n+\n+  \/\/ Call to java to fill in the stack trace and clear declaringClassObject to\n+  \/\/ not keep classes alive in the stack trace.\n+  \/\/ call this:  public StackTraceElement[] getStackTrace()\n+  assert(throwable.not_null(), \"shouldn't be\");\n+  JavaValue result(T_ARRAY);\n+  JavaCalls::call_virtual(&result, throwable,\n+                          vmClasses::Throwable_klass(),\n+                          vmSymbols::getStackTrace_name(),\n+                          vmSymbols::getStackTrace_signature(),\n+                          current);\n+  if (!current->has_pending_exception()){\n+    Handle stack_trace(current, result.get_oop());\n@@ -2778,1 +2778,0 @@\n-\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":25,"deletions":26,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -618,2 +618,2 @@\n-  static Handle get_cause(Handle throwable, bool with_stack_trace, TRAPS);\n-  \n+  static Handle create_initialization_error(JavaThread* current, Handle throwable);\n+\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -475,9 +475,0 @@\n-  \/\/ Try to discover the cause\n-  oop cause = java_lang_Throwable::cause(PENDING_EXCEPTION);\n-  Symbol* cause_sym = nullptr;\n-  Symbol* cause_msg = nullptr;\n-\n-  if (cause != NULL ) {\n-    cause_sym = cause->klass()->name();\n-    cause_msg = java_lang_Throwable::detail_message(cause);\n-  }\n@@ -485,1 +476,1 @@\n-  SystemDictionary::add_resolution_error(cpool, index, error, message, cause_sym, cause_msg);\n+  SystemDictionary::add_resolution_error(cpool, index, error, message);\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -983,6 +983,1 @@\n-  Handle cause = java_lang_Throwable::get_cause(exception, true, THREAD);\n-  if (HAS_PENDING_EXCEPTION || cause.is_null()) {\n-    \/\/ Retry with the simple method\n-    CLEAR_PENDING_EXCEPTION;\n-    cause = java_lang_Throwable::get_cause(exception, false, THREAD);\n-  }\n+  Handle cause = java_lang_Throwable::create_initialization_error(current, exception);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @requires vm.compMode != \"Xint\"\n@@ -38,1 +37,1 @@\n-    static class CrashWithSOE {\n+    static class ClassThrowsSOE {\n@@ -42,1 +41,1 @@\n-        private static CrashWithSOE b;\n+        private static ClassThrowsSOE b;\n@@ -46,1 +45,1 @@\n-                b = new CrashWithSOE();\n+                b = new ClassThrowsSOE();\n@@ -52,1 +51,1 @@\n-        public CrashWithSOE() throws Throwable {\n+        public ClassThrowsSOE() throws Throwable {\n@@ -54,1 +53,1 @@\n-                new CrashWithSOE();\n+                new ClassThrowsSOE();\n@@ -65,1 +64,1 @@\n-    private static void verify_stack(Throwable e, String cause) throws Exception {\n+    private static void verifyStack(Throwable e, String cause) throws Exception {\n@@ -78,1 +77,1 @@\n-            CrashWithSOE b = new CrashWithSOE();\n+            ClassThrowsSOE b = new ClassThrowsSOE();\n@@ -82,1 +81,1 @@\n-            verify_stack(t, \"Caused by: java.lang.StackOverflowError\");\n+            verifyStack(t, \"Caused by: java.lang.StackOverflowError\");\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassInitErrors\/TestNoClassDefFoundCause.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"}]}