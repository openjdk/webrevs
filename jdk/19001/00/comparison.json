{"files":[{"patch":"@@ -3111,2 +3111,2 @@\n-    assert(shift_out >= 0, \"must be positive\");\n-    return true;\n+    \/\/ The shift must be positive:\n+    return shift_out >= 0;\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -190,0 +190,4 @@\n+\n+        testGroups.put(\"test700\", new HashMap<String,TestFunction>());\n+        testGroups.get(\"test700\").put(\"test700R\", (_,i) -> { return test700R(aI.clone(), i); });\n+        testGroups.get(\"test700\").put(\"test700a\", (_,i) -> { return test700a(aI.clone(), i); });\n@@ -223,1 +227,2 @@\n-                 \"test600a\"})\n+                 \"test600a\",\n+                 \"test700a\"})\n@@ -1299,0 +1304,18 @@\n+    @DontCompile\n+    static Object[] test700R(int[] a, long v1) {\n+        a[0] = (int)(v1 >> -1);\n+        a[1] = (int)(v1 >> -2);\n+        return new Object[]{ a };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.STORE_B_OF_CLASS, \"int\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+                  IRNode.STORE_C_OF_CLASS, \"int\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+                  IRNode.STORE_I_OF_CLASS, \"int\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"2\",\n+                  IRNode.STORE_L_OF_CLASS, \"int\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\"})\n+    static Object[] test700a(int[] a, long v1) {\n+        \/\/ Negative shift: cannot optimize\n+        a[0] = (int)(v1 >> -1);\n+        a[1] = (int)(v1 >> -2);\n+        return new Object[]{ a };\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestMergeStores.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"}]}