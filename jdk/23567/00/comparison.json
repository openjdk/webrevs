{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,0 +91,1 @@\n+            MTD_Object_Object = MethodTypeDescImpl.ofValidated(CD_Object, CD_Object),\n@@ -766,2 +767,15 @@\n-                cob.checkcast(referenceClassDesc(type))\n-                   .areturn();\n+                if (Modifier.isPublic(accessFlags) && !Modifier.isPublic(type.getModifiers())) {\n+                    \/\/ Happens when a superinterface returns an inaccessible package-private type\n+                    cob.getstatic(methodField)\n+                       .invokevirtual(CD_Method, \"getReturnType\", MTD_Class)\n+                       .swap()\n+                       .invokevirtual(CD_Class, \"cast\", MTD_Object_Object);\n+                    if (type.isArray()) {\n+                        \/\/ Verifier shouts without this cast\n+                        assert Object[].class.isAssignableFrom(type) : \"No primitive arrays\";\n+                        cob.checkcast(CD_Object_array);\n+                    }\n+                } else {\n+                    cob.checkcast(referenceClassDesc(type));\n+                }\n+                cob.areturn();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.annotation.Repeatable;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+\/*\n+ * @test\n+ * @bug 8349716\n+ * @summary Test container annotations for repeatable package private annotations\n+ * @run junit PackagePrivateContainerTest\n+ *\/\n+\n+final class PackagePrivateContainerTest {\n+    \/\/ Note: Anno class must be package private\n+    \/\/ But the container can be public (it is a member of interface)\n+    @Anno\n+    @Anno(1)\n+    @Repeatable(Anno.Container.class)\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @interface Anno {\n+        int value() default 0;\n+\n+        @Retention(RetentionPolicy.RUNTIME)\n+        @interface Container {\n+            Anno[] value();\n+        }\n+    }\n+\n+    @Test\n+    void testGetRepeatable() {\n+        var annos = Anno.class.getDeclaredAnnotationsByType(Anno.class);\n+        confirmAnnos(annos);\n+    }\n+\n+    @Test\n+    void testGetContainer() {\n+        var container = Anno.class.getDeclaredAnnotation(Anno.Container.class);\n+        confirmAnnos(container.value()); \/\/ should not crash\n+    }\n+\n+    static void confirmAnnos(Anno[] annos) {\n+        assertEquals(2, annos.length);\n+        assertEquals(0, annos[0].value());\n+        assertEquals(1, annos[1].value());\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/annotation\/repeatingAnnotations\/PackagePrivateContainerTest.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8333854\n+ * @bug 8333854 8349716\n@@ -36,1 +36,1 @@\n-import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -47,0 +47,8 @@\n+    public interface PublicWorkFactory {\n+        NonPublicWorker createWorker();\n+    }\n+\n+    public interface PublicManyWorkFactory {\n+        NonPublicWorker[] createWorkers();\n+    }\n+\n@@ -48,1 +56,1 @@\n-    public void test() {\n+    public void testArgument() {\n@@ -59,0 +67,39 @@\n+\n+    @Test\n+    public void testReturnSuccessful() {\n+        PublicWorkFactory proxy = (PublicWorkFactory) Proxy.newProxyInstance(\n+                NonPublicMethodTypeTest.class.getClassLoader(),\n+                new Class[] {PublicWorkFactory.class},\n+                (_, _, _) -> (NonPublicWorker) () -> {});\n+        assertNotSame(NonPublicWorker.class.getPackage(),\n+                proxy.getClass().getPackage(),\n+                \"Proxy class should not be able to access method return \" +\n+                        \"NonPublic type's package\");\n+        assertNotNull(proxy.createWorker(), \"Missing object to access check\"); \/\/ Call should not fail\n+    }\n+\n+    @Test\n+    public void testReturnCast() {\n+        PublicWorkFactory proxy = (PublicWorkFactory) Proxy.newProxyInstance(\n+                NonPublicMethodTypeTest.class.getClassLoader(),\n+                new Class[] {PublicWorkFactory.class},\n+                (_, _, _) -> (Runnable) () -> {});\n+        assertNotSame(NonPublicWorker.class.getPackage(),\n+                proxy.getClass().getPackage(),\n+                \"Proxy class should not be able to access method return \" +\n+                        \"NonPublic type's package\");\n+        assertThrows(ClassCastException.class, proxy::createWorker, \"Missing object cast\");\n+    }\n+\n+    @Test\n+    public void testReturnArray() {\n+        PublicManyWorkFactory proxy = (PublicManyWorkFactory) Proxy.newProxyInstance(\n+                NonPublicMethodTypeTest.class.getClassLoader(),\n+                new Class[] {PublicManyWorkFactory.class},\n+                (_, _, _) -> new NonPublicWorker[] {() -> {}});\n+        assertNotSame(NonPublicWorker.class.getPackage(),\n+                proxy.getClass().getPackage(),\n+                \"Proxy class should not be able to access method return \" +\n+                        \"NonPublic component type's package\");\n+        assertEquals(1, proxy.createWorkers().length, \"Sanity check\"); \/\/ Call should not fail\n+    }\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/NonPublicMethodTypeTest.java","additions":51,"deletions":4,"binary":false,"changes":55,"status":"modified"}]}