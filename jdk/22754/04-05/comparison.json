{"files":[{"patch":"@@ -1529,1 +1529,1 @@\n-  return *(uint*)(&_f);\n+  return *(jshort*)(&_f);\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,0 +56,14 @@\n+    private static Random r = jdk.test.lib.Utils.getRandomInstance();\n+\n+    private static final Float16 RANDOM1 = Float16.valueOf(r.nextFloat() * MAX_VALUE.floatValue());\n+    private static final Float16 RANDOM2 = Float16.valueOf(r.nextFloat() * MAX_VALUE.floatValue());\n+    private static final Float16 RANDOM3 = Float16.valueOf(r.nextFloat() * MAX_VALUE.floatValue());\n+    private static final Float16 RANDOM4 = Float16.valueOf(r.nextFloat() * MAX_VALUE.floatValue());\n+    private static final Float16 RANDOM5 = Float16.valueOf(r.nextFloat() * MAX_VALUE.floatValue());\n+\n+    private static Float16 RANDOM1_VAR = RANDOM1;\n+    private static Float16 RANDOM2_VAR = RANDOM2;\n+    private static Float16 RANDOM3_VAR = RANDOM3;\n+    private static Float16 RANDOM4_VAR = RANDOM4;\n+    private static Float16 RANDOM5_VAR = RANDOM5;\n+\n@@ -57,1 +71,3 @@\n-        TestFramework.runWithFlags(\"--add-modules=jdk.incubator.vector\");\n+        Scenario s0 = new Scenario(0, \"--add-modules=jdk.incubator.vector\", \"-Xint\");\n+        Scenario s1 = new Scenario(1, \"--add-modules=jdk.incubator.vector\");\n+        new TestFramework().addScenarios(s1).start();\n@@ -63,1 +79,0 @@\n-        Random r = jdk.test.lib.Utils.getRandomInstance();\n@@ -65,1 +80,1 @@\n-            src[i] = Float.floatToFloat16(r.nextFloat());\n+            src[i] = Float.floatToFloat16(r.nextFloat() * MAX_VALUE.floatValue());\n@@ -216,1 +231,1 @@\n-        Float16 actual = valueOf(0.0f);\n+        Float16 res = valueOf(0.0f);\n@@ -220,1 +235,1 @@\n-            actual = add(actual, divide(dividend, divisor));\n+            res = add(res, divide(dividend, divisor));\n@@ -222,1 +237,1 @@\n-            actual = add(actual, divide(dividend, divisor));\n+            res = add(res, divide(dividend, divisor));\n@@ -224,1 +239,1 @@\n-            actual = add(actual, divide(dividend, divisor));\n+            res = add(res, divide(dividend, divisor));\n@@ -226,8 +241,1 @@\n-        float expected = 0.0f;\n-        for (int i = 0; i < 50; i++) {\n-            float dividend = Float.float16ToFloat(src[i]);\n-            expected += dividend \/ 8.0f;\n-            expected += dividend \/ 16.0f;\n-            expected += dividend \/ 32.0f;\n-        }\n-        assertResult(Math.round(actual.floatValue()), Math.round(expected), \"testDivByPOT\");\n+        dst[0] = float16ToRawShortBits(res);\n@@ -500,0 +508,77 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_HF, IRNode.SUB_HF, IRNode.MUL_HF, IRNode.DIV_HF, IRNode.SQRT_HF, IRNode.FMA_HF},\n+        applyIfCPUFeature = {\"avx512_fp16\", \"true\"})\n+    public void testRounding1() {\n+        dst[0] = float16ToRawShortBits(add(RANDOM1, RANDOM2));\n+        dst[1] = float16ToRawShortBits(subtract(RANDOM2, RANDOM3));\n+        dst[2] = float16ToRawShortBits(multiply(RANDOM4, RANDOM5));\n+        dst[3] = float16ToRawShortBits(sqrt(RANDOM2));\n+        dst[4] = float16ToRawShortBits(fma(RANDOM3, RANDOM4, RANDOM5));\n+        dst[5] = float16ToRawShortBits(divide(RANDOM5, RANDOM4));\n+    }\n+\n+    @Check(test = \"testRounding1\", when = CheckAt.COMPILED)\n+    public void checkRounding1() {\n+        assertResult(dst[0], Float.floatToFloat16(RANDOM1.floatValue() + RANDOM2.floatValue()),\n+                     \"testRounding1 case1a\");\n+        assertResult(dst[0], float16ToRawShortBits(add(RANDOM1, RANDOM2)), \"testRounding1 case1b\");\n+\n+        assertResult(dst[1], Float.floatToFloat16(RANDOM2.floatValue() - RANDOM3.floatValue()),\n+                     \"testRounding1 case2a\");\n+        assertResult(dst[1], float16ToRawShortBits(subtract(RANDOM2, RANDOM3)), \"testRounding1 case2b\");\n+\n+        assertResult(dst[2], Float.floatToFloat16(RANDOM4.floatValue() * RANDOM5.floatValue()),\n+                     \"testRounding1 case3a\");\n+        assertResult(dst[2], float16ToRawShortBits(multiply(RANDOM4, RANDOM5)), \"testRounding1 cast3b\");\n+\n+        assertResult(dst[3], Float.floatToFloat16((float)Math.sqrt(RANDOM2.floatValue())), \"testRounding1 case4a\");\n+        assertResult(dst[3], float16ToRawShortBits(sqrt(RANDOM2)), \"testRounding1 case4a\");\n+\n+        assertResult(dst[4], Float.floatToFloat16(Math.fma(RANDOM3.floatValue(), RANDOM4.floatValue(),\n+                     RANDOM5.floatValue())), \"testRounding1 case5a\");\n+        assertResult(dst[4], float16ToRawShortBits(fma(RANDOM3, RANDOM4, RANDOM5)), \"testRounding1 case5b\");\n+\n+        assertResult(dst[5], Float.floatToFloat16(RANDOM5.floatValue() \/ RANDOM4.floatValue()),\n+                     \"testRounding1 case6a\");\n+        assertResult(dst[5], float16ToRawShortBits(divide(RANDOM5, RANDOM4)), \"testRounding1 case6b\");\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ADD_HF, \" >0 \", IRNode.SUB_HF, \" >0 \", IRNode.MUL_HF, \" >0 \",\n+                  IRNode.DIV_HF, \" >0 \", IRNode.SQRT_HF, \" >0 \", IRNode.FMA_HF, \" >0 \"},\n+        applyIfCPUFeature = {\"avx512_fp16\", \"true\"})\n+    public void testRounding2() {\n+        dst[0] = float16ToRawShortBits(add(RANDOM1_VAR, RANDOM2_VAR));\n+        dst[1] = float16ToRawShortBits(subtract(RANDOM2_VAR, RANDOM3_VAR));\n+        dst[2] = float16ToRawShortBits(multiply(RANDOM4_VAR, RANDOM5_VAR));\n+        dst[3] = float16ToRawShortBits(sqrt(RANDOM2_VAR));\n+        dst[4] = float16ToRawShortBits(fma(RANDOM3_VAR, RANDOM4_VAR, RANDOM5_VAR));\n+        dst[5] = float16ToRawShortBits(divide(RANDOM5_VAR, RANDOM4_VAR));\n+    }\n+\n+    @Check(test = \"testRounding2\", when = CheckAt.COMPILED)\n+    public void checkRounding2() {\n+        assertResult(dst[0], Float.floatToFloat16(RANDOM1_VAR.floatValue() + RANDOM2_VAR.floatValue()),\n+                     \"testRounding2 case1a\");\n+        assertResult(dst[0], float16ToRawShortBits(add(RANDOM1_VAR, RANDOM2_VAR)), \"testRounding2 case1b\");\n+\n+        assertResult(dst[1], Float.floatToFloat16(RANDOM2_VAR.floatValue() - RANDOM3_VAR.floatValue()),\n+                     \"testRounding2 case2a\");\n+        assertResult(dst[1], float16ToRawShortBits(subtract(RANDOM2_VAR, RANDOM3_VAR)), \"testRounding2 case2b\");\n+\n+        assertResult(dst[2], Float.floatToFloat16(RANDOM4_VAR.floatValue() * RANDOM5_VAR.floatValue()),\n+                     \"testRounding2 case3a\");\n+        assertResult(dst[2], float16ToRawShortBits(multiply(RANDOM4_VAR, RANDOM5_VAR)), \"testRounding2 cast3b\");\n+\n+        assertResult(dst[3], Float.floatToFloat16((float)Math.sqrt(RANDOM2_VAR.floatValue())), \"testRounding2 case4a\");\n+        assertResult(dst[3], float16ToRawShortBits(sqrt(RANDOM2_VAR)), \"testRounding2 case4a\");\n+\n+        assertResult(dst[4], Float.floatToFloat16(Math.fma(RANDOM3_VAR.floatValue(), RANDOM4_VAR.floatValue(),\n+                     RANDOM5_VAR.floatValue())), \"testRounding2 case5a\");\n+        assertResult(dst[4], float16ToRawShortBits(fma(RANDOM3_VAR, RANDOM4_VAR, RANDOM5_VAR)), \"testRounding2 case5b\");\n+\n+        assertResult(dst[5], Float.floatToFloat16(RANDOM5_VAR.floatValue() \/ RANDOM4_VAR.floatValue()),\n+                     \"testRounding2 case6a\");\n+        assertResult(dst[5], float16ToRawShortBits(divide(RANDOM5_VAR, RANDOM4_VAR)), \"testRounding2 case6b\");\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestFloat16ScalarOperations.java","additions":100,"deletions":15,"binary":false,"changes":115,"status":"modified"},{"patch":"@@ -222,1 +222,1 @@\n-        assertArraysEquals(res, farr, (fp16) ->  Float.isInfinite(fp16.floatValue()));\n+        assertArraysEquals(res, farr, (fp16) -> Float.isInfinite(fp16.floatValue()));\n@@ -234,1 +234,1 @@\n-        assertArraysEquals(res, farr, (fp16) ->  Float.isFinite(fp16.floatValue()));\n+        assertArraysEquals(res, farr, (fp16) -> Float.isFinite(fp16.floatValue()));\n@@ -246,1 +246,1 @@\n-        assertArraysEquals(res, farr, (fp16) ->  Float.isNaN(fp16.floatValue()));\n+        assertArraysEquals(res, farr, (fp16) -> Float.isNaN(fp16.floatValue()));\n@@ -260,1 +260,1 @@\n-        assertArraysEquals(res, farr1, farr2, (fp16_val1, fp16_val2) ->  valueOf(fp16_val1.floatValue() + fp16_val2.floatValue()));\n+        assertArraysEquals(res, farr1, farr2, (fp16_val1, fp16_val2) -> valueOf(fp16_val1.floatValue() + fp16_val2.floatValue()));\n@@ -274,1 +274,1 @@\n-        assertArraysEquals(res, farr1, farr2, (fp16_val1, fp16_val2) ->  valueOf(fp16_val1.floatValue() - fp16_val2.floatValue()));\n+        assertArraysEquals(res, farr1, farr2, (fp16_val1, fp16_val2) -> valueOf(fp16_val1.floatValue() - fp16_val2.floatValue()));\n@@ -288,1 +288,1 @@\n-        assertArraysEquals(res, farr1, farr2, (fp16_val1, fp16_val2) ->  valueOf(fp16_val1.floatValue() * fp16_val2.floatValue()));\n+        assertArraysEquals(res, farr1, farr2, (fp16_val1, fp16_val2) -> valueOf(fp16_val1.floatValue() * fp16_val2.floatValue()));\n@@ -302,1 +302,1 @@\n-        assertArraysEquals(res, farr1, farr2, (fp16_val1, fp16_val2) ->  valueOf(fp16_val1.floatValue() \/ fp16_val2.floatValue()));\n+        assertArraysEquals(res, farr1, farr2, (fp16_val1, fp16_val2) -> valueOf(fp16_val1.floatValue() \/ fp16_val2.floatValue()));\n@@ -316,1 +316,1 @@\n-        assertArraysEquals(res, farr1, farr2,  (fp16_val1, fp16_val2) ->  valueOf(Float.max(fp16_val1.floatValue(), fp16_val2.floatValue())));\n+        assertArraysEquals(res, farr1, farr2,  (fp16_val1, fp16_val2) -> valueOf(Float.max(fp16_val1.floatValue(), fp16_val2.floatValue())));\n@@ -330,1 +330,1 @@\n-        assertArraysEquals(res, farr1, farr2, (fp16_val1, fp16_val2) ->  valueOf(Float.min(fp16_val1.floatValue(), fp16_val2.floatValue())));\n+        assertArraysEquals(res, farr1, farr2, (fp16_val1, fp16_val2) -> valueOf(Float.min(fp16_val1.floatValue(), fp16_val2.floatValue())));\n@@ -345,1 +345,1 @@\n-        assertArraysEquals(res, farr1, farr2, farr3, (fp16_val1, fp16_val2, fp16_val3) ->  valueOf(Math.fma(fp16_val1.floatValue(), fp16_val2.floatValue(), fp16_val3.floatValue())));\n+        assertArraysEquals(res, farr1, farr2, farr3, (fp16_val1, fp16_val2, fp16_val3) -> valueOf(Math.fma(fp16_val1.floatValue(), fp16_val2.floatValue(), fp16_val3.floatValue())));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ScalarFloat16OperationsTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"}]}