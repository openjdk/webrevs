{"files":[{"patch":"@@ -114,0 +114,34 @@\n+    \/**\n+     * This will execute the test logic, but first change the param\n+     * to be mixed case\n+     * Additionally it will input a nonsensical input testing if\n+     * the execution should be successful, but no debug output expected\n+     *\n+     * @param paramName   name of the parameter e.g. -Djava.security.debug=\n+     * @param paramVal    value of the parameter\n+     * @param expected    expected output\n+     * @param notExpected not expected output\n+     *\/\n+    public void testMixedCaseBrokenParameter(String paramName,\n+                                             String paramVal,\n+                                             String notExpected) throws Exception {\n+\n+        final String formattedParam = makeFirstAndLastLetterUppercase(paramVal);\n+\n+        final String nonsenseParam = formattedParam.substring(0,formattedParam.length()-2) +\n+                                     \"NONSENSE\" +\n+                                     formattedParam.substring(formattedParam.length()-2);\n+\n+        System.out.printf(\"Executing: {%s%s DebugOptions}%n\",\n+                paramName,\n+                nonsenseParam);\n+\n+        final OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(\n+                paramName + \"NONSENSE\" + nonsenseParam + \"NONSENSE\",\n+                \"DebugOptions\");\n+\n+        \/\/ shouldn't fail, but shouldn't give 'properties:' back\n+        outputAnalyzer.shouldHaveExitValue(0)\n+                .shouldNotMatch(notExpected);\n+    }\n+\n@@ -176,0 +210,38 @@\n+    \/**\n+     * This test will run all options in parallel with all param names\n+     * However all params will be automatically adjusted to be broken\n+     * the expectation is to have a complete execution, but no debug output\n+     *\/\n+    @Test\n+    public void debugOptionsBrokenTest() throws Exception {\n+\n+        try (final ExecutorService executorService = Executors.newVirtualThreadPerTaskExecutor()) {\n+            final List<Callable<Void>> testsCallables = new ArrayList<>();\n+\n+            patternMatches.forEach(params -> {\n+                testsCallables.add(() -> {\n+                    testMixedCaseBrokenParameter(\n+                            \"-Djava.security.debug=\",\n+                            params[0],\n+                            params[2]);\n+                    return null;\n+                });\n+                testsCallables.add(() -> {\n+                    testMixedCaseBrokenParameter(\n+                            \"-Djava.security.auth.debug=\",\n+                            params[0],\n+                            params[2]);\n+                    return null;\n+                });\n+\n+                System.out.println(\"Option added to all broken case tests \" + Arrays.toString(params));\n+            });\n+\n+            System.out.println(\"Starting all the threads\");\n+            final List<Future<Void>> res = executorService.invokeAll(testsCallables);\n+            for (final Future<Void> future : res) {\n+                future.get();\n+            }\n+        }\n+    }\n+\n","filename":"test\/jdk\/sun\/security\/util\/Debug\/DebugOptions.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"modified"}]}