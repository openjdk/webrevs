{"files":[{"patch":"@@ -172,0 +172,11 @@\n+<a id=\"FileHandler\"><\/a>\n+<H2>File URL stream protocol handler properties<\/H2>\n+<P>The following properties are used to configure the handler for URLs with the {@code file:\/\/} scheme:<\/P>\n+<UL>\n+\t<LI><P><B>{@systemProperty jdk.net.file.ftpfallback}<\/B> (default: &lt;false&gt;)<BR>\n+\t\tThe {@code file:\/\/} handler by default rejects any non-local file URL (as defined by RFC 8089)\n+\t\tas invalid. Setting this property to <B>true<\/B> enables a legacy feature where\n+\t\tthe handler instead opens an FTP connection for such non-local URLs.<\/P>\n+\t\t<P>Any modern code should use explicit {@code ftp:\/\/} URLs instead and not rely on\n+\t\t\tenabling this legacy FTP fallback feature.<\/P>\n+<\/UL>\n","filename":"src\/java.base\/share\/classes\/java\/net\/doc-files\/net-properties.html","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.net.MalformedURLException;\n@@ -49,0 +50,6 @@\n+    \/\/ The feature of falling back to FTP for non-local file URLs is disabled\n+    \/\/ by default and can be re-enabled by setting a system property\n+    private static boolean FTP_FALLBACK_ENABLED = \"true\".equalsIgnoreCase(\n+            System.getProperty(\"jdk.net.file.ftpfallback\", \"false\")\n+    );\n+\n@@ -225,0 +232,13 @@\n+\n+    \/**\n+     * Throw {@link MalformedURLException} if the FTP fallback feature for non-local\n+     * file URLs is not explicitly enabled via system property.\n+     *\n+     * @see #FTP_FALLBACK_ENABLED\n+     * @throws MalformedURLException if FTP fallback is not enabled\n+     *\/\n+     static void requireFtpFallbackEnabled() throws MalformedURLException {\n+        if (!FTP_FALLBACK_ENABLED) {\n+            throw new MalformedURLException(\"Unsupported non-local file URL\");\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/file\/FileURLConnection.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -75,0 +75,1 @@\n+        FileURLConnection.requireFtpFallbackEnabled();\n","filename":"src\/java.base\/unix\/classes\/sun\/net\/www\/protocol\/file\/Handler.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -91,0 +91,1 @@\n+        FileURLConnection.requireFtpFallbackEnabled();\n","filename":"src\/java.base\/windows\/classes\/sun\/net\/www\/protocol\/file\/Handler.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-    private static final String badUnc = \"file:\/\/h7qbp368oix47\/not-exist.txt\";\n@@ -41,1 +40,0 @@\n-        testUnc();\n@@ -48,7 +46,0 @@\n-    static void testUnc() throws IOException {\n-        boolean isWindows = System.getProperty(\"os.name\").startsWith(\"Windows\");\n-        if (isWindows) {\n-            checkThrows(badUnc);\n-        }\n-    }\n-\n@@ -65,1 +56,0 @@\n-\n","filename":"test\/jdk\/java\/net\/URL\/OpenStream.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import static org.junit.Assert.assertThrows;\n@@ -48,3 +49,4 @@\n- * @bug 8353662\n- * @summary Verify long-standing behavior of resolving non-local file URLs using FTP.\n- * @run junit NonLocalFtpFallback\n+ * @bug 8353662 8202708\n+ * @summary Verify long-standing, disabled by default behavior of resolving non-local\n+ *          file URLs using FTP.\n+ * @run junit\/othervm -Djdk.net.file.ftpfallback=true NonLocalFtpFallback\n@@ -115,3 +117,2 @@\n-     * The non-local file URL used here is of the form file:\/\/127.0.0.1\/path. Since the\n-     * host component here is not equal to \"localhost\", this is considered a non-local\n-     * URL.\n+     * The non-local file URL used here is of the form 'file:\/\/remotehost\/path'. Since the\n+     * host component is not equal to 'localhost', this is considered a non-local URL.\n@@ -145,0 +146,41 @@\n+\n+    \/**\n+     * Sanity check that a local file URL (with a host component equal to 'localhost')\n+     * does not open any FtpURLConnection when the FTP fallback feature is enabled.\n+     *\n+     * @throws Exception\n+     *\/\n+    @Test\n+    public void verifyLocalFileURL() throws Exception {\n+        URL localURL = file.toUri().toURL();\n+        URL nonLocalURL = new URL(\"file\", \"localhost\", localURL.getFile());\n+\n+        \/\/ Open the local file: URL connection supplying a proxy\n+        Proxy proxy = new Proxy(Proxy.Type.HTTP,\n+                new InetSocketAddress(proxyServer.getAddress().getAddress(),\n+                        proxyServer.getAddress().getPort()));\n+        URLConnection con = nonLocalURL.openConnection(proxy);\n+\n+        \/\/ Assert that the expected file content is read\n+        try (InputStream in = con.getInputStream()) {\n+            byte[] retrived = in.readAllBytes();\n+            assertArrayEquals(Files.readAllBytes(file), retrived);\n+        }\n+\n+        \/\/ Assert that no FTP URIs were requested in the HTTP proxy\n+        assertEquals(0, uris.size());\n+    }\n+\n+    \/**\n+     * Verify that opening a stream on a non-proxy URLConnection for a non-local\n+     * file URL with an unknown host fails with UnknownHostException\n+     * when the fallback FtpURLConnection attempts to connect to the non-existing\n+     * FTP server.\n+     *\/\n+    @Test\n+    public void verifyFtpUnknownHost() throws IOException {\n+        URL url  = new URL(\"file:\/\/nonexistinghost\/not-exist.txt\");\n+        assertThrows(UnknownHostException.class, () -> {\n+            InputStream in = url.openConnection(Proxy.NO_PROXY).getInputStream();\n+        });\n+    }\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/file\/NonLocalFtpFallback.java","additions":48,"deletions":6,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+\n+import static org.junit.Assert.assertThrows;\n+\n+\/**\n+ * @test\n+ * @bug 8353440\n+ * @summary Verify that non-local file URLs are rejected by default\n+ * @run junit\/othervm NonLocalFtpFallbackDisabled\n+ * @run junit\/othervm -Djdk.net.file.ftpfallback=false NonLocalFtpFallbackDisabled\n+ * @run junit\/othervm -Djdk.net.file.ftpfallback NonLocalFtpFallbackDisabled\n+ *\/\n+public class NonLocalFtpFallbackDisabled {\n+\n+    \/\/ The file requested in this test\n+    private Path file = Path.of(\"ftp-file.txt\");\n+\n+    \/**\n+     * Verifies that the long-standing and unspecified FTP fallback feature\n+     * where the file URL scheme handler attempts an FTP connection for non-local\n+     * files is disabled by default and that opening connections for such URLs\n+     * is rejected with a MalformedURLException.\n+     *\n+     * @throws MalformedURLException if an unexpected URL exception occurs\n+     *\/\n+    @Test\n+    public void verifyNonLocalFtpFallback() throws MalformedURLException {\n+        URL localURL = file.toUri().toURL();\n+        \/\/ We can use a fake host name here, no actual FTP request will be made\n+        String hostname = \"remotehost\";\n+        URL nonLocalURL = new URL(\"file\", hostname, localURL.getFile());\n+\n+        assertThrows(MalformedURLException.class, () -> {\n+            nonLocalURL.openConnection();\n+        });\n+    }\n+}\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/file\/NonLocalFtpFallbackDisabled.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"}]}