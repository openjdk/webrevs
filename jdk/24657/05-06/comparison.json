{"files":[{"patch":"@@ -37,1 +37,0 @@\n-    private static final String badUnc = \"file:\/\/h7qbp368oix47\/not-exist.txt\";\n@@ -41,1 +40,0 @@\n-        testUnc();\n@@ -48,7 +46,0 @@\n-    static void testUnc() throws IOException {\n-        boolean isWindows = System.getProperty(\"os.name\").startsWith(\"Windows\");\n-        if (isWindows) {\n-            checkThrows(badUnc);\n-        }\n-    }\n-\n@@ -65,1 +56,0 @@\n-\n","filename":"test\/jdk\/java\/net\/URL\/OpenStream.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import static org.junit.Assert.assertThrows;\n@@ -48,1 +49,1 @@\n- * @bug 8353662\n+ * @bug 8353662 8202708\n@@ -116,3 +117,2 @@\n-     * The non-local file URL used here is of the form file:\/\/127.0.0.1\/path. Since the\n-     * host component here is not equal to \"localhost\", this is considered a non-local\n-     * URL.\n+     * The non-local file URL used here is of the form 'file:\/\/remotehost\/path'. Since the\n+     * host component is not equal to 'localhost', this is considered a non-local URL.\n@@ -146,0 +146,41 @@\n+\n+    \/**\n+     * Sanity check that a local file URL (with a host component equal to 'localhost')\n+     * does not open any FtpURLConnection when the FTP fallback feature is enabled.\n+     *\n+     * @throws Exception\n+     *\/\n+    @Test\n+    public void verifyLocalFileURL() throws Exception {\n+        URL localURL = file.toUri().toURL();\n+        URL nonLocalURL = new URL(\"file\", \"localhost\", localURL.getFile());\n+\n+        \/\/ Open the local file: URL connection supplying a proxy\n+        Proxy proxy = new Proxy(Proxy.Type.HTTP,\n+                new InetSocketAddress(proxyServer.getAddress().getAddress(),\n+                        proxyServer.getAddress().getPort()));\n+        URLConnection con = nonLocalURL.openConnection(proxy);\n+\n+        \/\/ Assert that the expected file content is read\n+        try (InputStream in = con.getInputStream()) {\n+            byte[] retrived = in.readAllBytes();\n+            assertArrayEquals(Files.readAllBytes(file), retrived);\n+        }\n+\n+        \/\/ Assert that no FTP URIs were requested in the HTTP proxy\n+        assertEquals(0, uris.size());\n+    }\n+\n+    \/**\n+     * Verify that opening a stream on a non-proxy URLConnection for a non-local\n+     * file URL with an unknown host fails with UnknownHostException\n+     * when the fallback FtpURLConnection attempts to connect to the non-existing\n+     * FTP server.\n+     *\/\n+    @Test\n+    public void verifyFtpUnknownHost() throws IOException {\n+        URL url  = new URL(\"file:\/\/nonexistinghost\/not-exist.txt\");\n+        assertThrows(UnknownHostException.class, () -> {\n+            InputStream in = url.openConnection(Proxy.NO_PROXY).getInputStream();\n+        });\n+    }\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/file\/NonLocalFtpFallback.java","additions":45,"deletions":4,"binary":false,"changes":49,"status":"modified"}]}