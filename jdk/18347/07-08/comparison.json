{"files":[{"patch":"@@ -3520,32 +3520,11 @@\n-      \/\/ Ensure that vector types match\n-      const TypeVect* vect_type = as_StoreVector()->vect_type();\n-      const TypeVect* mem_vect_type = mem->as_StoreVector()->vect_type();\n-      if (vect_type == mem_vect_type) {\n-        \/\/ Handle StoreVector with offsets and masks\n-        \/\/ Ensure offsets match\n-        if (is_StoreVectorScatter()) {\n-          const Node* offsets = as_StoreVectorScatter()->in(StoreVectorScatterNode::Offsets);\n-          if (offsets->eqv_uncast(mem->as_StoreVectorScatter()->in(StoreVectorScatterNode::Offsets))) {\n-            result = mem;\n-          }\n-        \/\/ Ensure masks match\n-        } else if (is_StoreVectorMasked()) {\n-          const Node* mask = as_StoreVectorMasked()->in(StoreVectorMaskedNode::Mask);\n-          if (mask->eqv_uncast(mem->as_StoreVectorMasked()->in(StoreVectorMaskedNode::Mask))) {\n-            result = mem;\n-          }\n-        \/\/ Ensure offsets and masks match\n-        } else if (is_StoreVectorScatterMasked()) {\n-          const StoreVectorScatterMaskedNode* stv = as_StoreVectorScatterMasked();\n-          const Node* offsets = stv->in(StoreVectorScatterMaskedNode::Offsets);\n-          const Node* mask = stv->in(StoreVectorScatterMaskedNode::Mask);\n-          const StoreVectorScatterMaskedNode* svgm = mem->as_StoreVectorScatterMasked();\n-          if (offsets->eqv_uncast(svgm->in(StoreVectorScatterMaskedNode::Offsets)) &&\n-              mask->eqv_uncast(svgm->in(StoreVectorScatterMaskedNode::Mask))) {\n-            result = mem;\n-          }\n-        \/\/ Regular store (no offsets or mask)\n-        } else {\n-          assert(Opcode() == Op_StoreVector, \"just a plain vector store, no offset or mask\");\n-          result = mem;\n-        }\n+      const StoreVectorNode* store_vector = as_StoreVector();\n+      const StoreVectorNode* mem_vector = mem->as_StoreVector();\n+      const Node* store_offsets = store_vector->offsets();\n+      const Node* mem_offsets = mem_vector->offsets();\n+      const Node* store_mask = store_vector->mask();\n+      const Node* mem_mask = mem_vector->mask();\n+      \/\/ Ensure types, offsets, and masks match\n+      if (store_vector->vect_type() == mem_vector->vect_type() &&\n+          (store_offsets == mem_offsets ||  store_offsets->eqv_uncast(mem_offsets)) &&\n+          (store_mask == mem_mask ||  store_mask->eqv_uncast(mem_mask))) {\n+        result = mem;\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":11,"deletions":32,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -950,0 +950,2 @@\n+  virtual Node* mask() const { return nullptr; }\n+  virtual Node* offsets() const { return nullptr; }\n@@ -977,0 +979,1 @@\n+   virtual Node* offsets() const { return in(Offsets); }\n@@ -997,0 +1000,1 @@\n+  virtual Node* mask() const { return in(Mask); }\n@@ -1075,0 +1079,2 @@\n+   virtual Node* mask() const { return in(Mask); }\n+   virtual Node* offsets() const { return in(Offsets); }\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}