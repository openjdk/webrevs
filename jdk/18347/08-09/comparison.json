{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import java.nio.ByteOrder;\n@@ -181,0 +182,8 @@\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testOneLongVectorLoadMasked() {\n+        LongVector res = LongVector.fromArray(L_SPECIES, longArray, 0);\n+        LongVector res2 = LongVector.fromArray(L_SPECIES, longArray, 0, longVectorMask);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n@@ -256,0 +265,8 @@\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_I, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testOneIntVectorLoadMasked() {\n+        IntVector res = IntVector.fromArray(I_SPECIES, intArray, 0);\n+        IntVector res2 = IntVector.fromArray(I_SPECIES, intArray, 0, intVectorMask);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n@@ -331,0 +348,8 @@\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_D, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testOneDoubleVectorLoadMasked() {\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, doubleArray, 0);\n+        DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleVectorMask);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n@@ -406,0 +431,8 @@\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_F, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testOneFloatVectorLoadMasked() {\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, floatArray, 0);\n+        FloatVector res2 = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatVectorMask);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n@@ -489,0 +522,10 @@\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.STORE_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneLongVectorStoreMasked() {\n+        long[] res = new long[L_SPECIES.length()];\n+        long[] res2 = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0);\n+        longVector.intoArray(res2, 0, longVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n@@ -582,0 +625,10 @@\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.STORE_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneIntVectorStoreMasked() {\n+        int[] res = new int[I_SPECIES.length()];\n+        int[] res2 = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0);\n+        intVector.intoArray(res2, 0, intVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n@@ -675,0 +728,10 @@\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.STORE_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneDoubleVectorStoreMasked() {\n+        double[] res = new double[D_SPECIES.length()];\n+        double[] res2 = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0);\n+        doubleVector.intoArray(res2, 0, doubleVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n@@ -768,0 +831,10 @@\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.STORE_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneFloatVectorStoreMasked() {\n+        float[] res = new float[F_SPECIES.length()];\n+        float[] res2 = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0);\n+        floatVector.intoArray(res2, 0, floatVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n@@ -829,1 +902,1 @@\n-    \/\/ LOAD - STORE tests\n+    \/\/ STORE - LOAD tests\n@@ -833,0 +906,36 @@\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneLongVectorStoreLoadGather() {\n+        long[] array = new long[L_SPECIES.length()];\n+        longVector.intoArray(array, 0);\n+        LongVector res = LongVector.fromArray(L_SPECIES, array, 0, longOffsets, 0);\n+        Asserts.assertNotEquals(res, longVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_L, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneLongVectorStoreScatterLoad() {\n+        long[] array = new long[L_SPECIES.length()];\n+        longVector.intoArray(array, 0, longOffsets, 0);\n+        LongVector res = LongVector.fromArray(L_SPECIES, array, 0);\n+        Asserts.assertNotEquals(res, longVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneLongVectorStoreLoadMasked() {\n+        long[] array = new long[L_SPECIES.length()];\n+        longVector.intoArray(array, 0);\n+        LongVector res = LongVector.fromArray(L_SPECIES, array, 0, longVectorMask);\n+        Asserts.assertNotEquals(res, longVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_L, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneLongVectorStoreMaskedLoad() {\n+        long[] array = new long[L_SPECIES.length()];\n+        longVector.intoArray(array, 0, longVectorMask);\n+        LongVector res = LongVector.fromArray(L_SPECIES, array, 0);\n+        Asserts.assertNotEquals(res, longVector);\n+    }\n+\n@@ -851,0 +960,9 @@\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_L, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testStoreLoadLongVectorDifferentSpeciesVector() {\n+        long[] res = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0);\n+        LongVector res2 = LongVector.fromArray(LongVector.SPECIES_64, res, 0);\n+        Asserts.assertNotEquals(res2, longVector);\n+    }\n+\n@@ -854,0 +972,36 @@\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneIntVectorStoreLoadGather() {\n+        int[] array = new int[I_SPECIES.length()];\n+        intVector.intoArray(array, 0);\n+        IntVector res = IntVector.fromArray(I_SPECIES, array, 0, intOffsets, 0);\n+        Asserts.assertNotEquals(res, intVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_I, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneIntVectorStoreScatterLoad() {\n+        int[] array = new int[I_SPECIES.length()];\n+        intVector.intoArray(array, 0, intOffsets, 0);\n+        IntVector res = IntVector.fromArray(I_SPECIES, array, 0);\n+        Asserts.assertNotEquals(res, intVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneIntVectorStoreLoadMasked() {\n+        int[] array = new int[I_SPECIES.length()];\n+        intVector.intoArray(array, 0);\n+        IntVector res = IntVector.fromArray(I_SPECIES, array, 0, intVectorMask);\n+        Asserts.assertNotEquals(res, intVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_I, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneIntVectorStoreMaskedLoad() {\n+        int[] array = new int[I_SPECIES.length()];\n+        intVector.intoArray(array, 0, intVectorMask);\n+        IntVector res = IntVector.fromArray(I_SPECIES, array, 0);\n+        Asserts.assertNotEquals(res, intVector);\n+    }\n+\n@@ -872,0 +1026,9 @@\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_I, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testStoreLoadIntVectorDifferentSpeciesVector() {\n+        int[] res = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0);\n+        IntVector res2 = IntVector.fromArray(IntVector.SPECIES_64, res, 0);\n+        Asserts.assertNotEquals(res2, intVector);\n+    }\n+\n@@ -875,0 +1038,36 @@\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneDoubleVectorStoreLoadGather() {\n+        double[] array = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(array, 0);\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, array, 0, doubleOffsets, 0);\n+        Asserts.assertNotEquals(res, doubleVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_D, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneDoubleVectorStoreScatterLoad() {\n+        double[] array = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(array, 0, doubleOffsets, 0);\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, array, 0);\n+        Asserts.assertNotEquals(res, doubleVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneDoubleVectorStoreLoadMasked() {\n+        double[] array = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(array, 0);\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, array, 0, doubleVectorMask);\n+        Asserts.assertNotEquals(res, doubleVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_D, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneDoubleVectorStoreMaskedLoad() {\n+        double[] array = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(array, 0, doubleVectorMask);\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, array, 0);\n+        Asserts.assertNotEquals(res, doubleVector);\n+    }\n+\n@@ -893,0 +1092,9 @@\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_D, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testStoreLoadDoubleVectorDifferentSpeciesVector() {\n+        double[] res = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0);\n+        DoubleVector res2 = DoubleVector.fromArray(DoubleVector.SPECIES_64, res, 0);\n+        Asserts.assertNotEquals(res2, doubleVector);\n+    }\n+\n@@ -896,0 +1104,36 @@\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneFloatVectorStoreLoadGather() {\n+        float[] array = new float[F_SPECIES.length()];\n+        floatVector.intoArray(array, 0);\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, array, 0, floatOffsets, 0);\n+        Asserts.assertNotEquals(res, floatVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_F, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneFloatVectorStoreScatterLoad() {\n+        float[] array = new float[F_SPECIES.length()];\n+        floatVector.intoArray(array, 0, floatOffsets, 0);\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, array, 0);\n+        Asserts.assertNotEquals(res, floatVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneFloatVectorStoreLoadMasked() {\n+        float[] array = new float[F_SPECIES.length()];\n+        floatVector.intoArray(array, 0);\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, array, 0, floatVectorMask);\n+        Asserts.assertNotEquals(res, floatVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_F, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneFloatVectorStoreMaskedLoad() {\n+        float[] array = new float[F_SPECIES.length()];\n+        floatVector.intoArray(array, 0, floatVectorMask);\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, array, 0);\n+        Asserts.assertNotEquals(res, floatVector);\n+    }\n+\n@@ -914,0 +1158,239 @@\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_F, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testStoreLoadFloatVectorDifferentSpeciesVector() {\n+        float[] res = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0);\n+        FloatVector res2 = FloatVector.fromArray(FloatVector.SPECIES_64, res, 0);\n+        Asserts.assertNotEquals(res2, floatVector);\n+    }\n+\n+\n+    \/\/ LOAD - STORE tests\n+\n+    \/\/ LongVector tests\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneLongVectorLoadGatherStore() {\n+        long[] res = new long[L_SPECIES.length()];\n+        LongVector vector = LongVector.fromArray(L_SPECIES, longArray, 0, longOffsets, 0);\n+        vector.intoArray(res, 0);\n+        Asserts.assertFalse(Arrays.equals(res, longArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_L, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneLongVectorLoadStoreScatter() {\n+        long[] res = new long[L_SPECIES.length()];\n+        LongVector vector = LongVector.fromArray(L_SPECIES, longArray, 0);\n+        vector.intoArray(res, 0, longOffsets, 0);\n+        Asserts.assertFalse(Arrays.equals(res, longArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneLongVectorLoadMaskedStore() {\n+        long[] res = new long[L_SPECIES.length()];\n+        LongVector vector = LongVector.fromArray(L_SPECIES, longArray, 0, longVectorMask);\n+        vector.intoArray(res, 0);\n+        Asserts.assertFalse(Arrays.equals(res, longArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_L, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneLongVectorLoadStoreMasked() {\n+        long[] res = new long[L_SPECIES.length()];\n+        LongVector vector = LongVector.fromArray(L_SPECIES, longArray, 0);\n+        vector.intoArray(res, 0, longVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, longArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testLongVectorStoreScatterLoadGatherDuplicateOffsetsVector() {\n+        long[] res = new long[L_SPECIES.length()];\n+        LongVector vector = LongVector.fromArray(L_SPECIES, longArray, 0, duplicateLongOffsets, 0);\n+        vector.intoArray(res, 0, duplicateLongOffsets, 0);\n+        Asserts.assertFalse(Arrays.equals(res, longArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testLongVectorLoadMaskedStoreVector() {\n+        long[] res = new long[L_SPECIES.length()];\n+        LongVector vector = LongVector.fromArray(L_SPECIES, longArray, 0, longVectorMask);\n+        vector.intoArray(res, 0, longVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, longArray));\n+    }\n+\n+\n+    \/\/ IntVector tests\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneIntVectorLoadGatherStore() {\n+        int[] res = new int[I_SPECIES.length()];\n+        IntVector vector = IntVector.fromArray(I_SPECIES, intArray, 0, intOffsets, 0);\n+        vector.intoArray(res, 0);\n+        Asserts.assertFalse(Arrays.equals(res, intArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_I, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneIntVectorLoadStoreScatter() {\n+        int[] res = new int[I_SPECIES.length()];\n+        IntVector vector = IntVector.fromArray(I_SPECIES, intArray, 0);\n+        vector.intoArray(res, 0, intOffsets, 0);\n+        Asserts.assertFalse(Arrays.equals(res, intArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneIntVectorLoadMaskedStore() {\n+        int[] res = new int[I_SPECIES.length()];\n+        IntVector vector = IntVector.fromArray(I_SPECIES, intArray, 0, intVectorMask);\n+        vector.intoArray(res, 0);\n+        Asserts.assertFalse(Arrays.equals(res, intArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_I, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneIntVectorLoadStoreMasked() {\n+        int[] res = new int[I_SPECIES.length()];\n+        IntVector vector = IntVector.fromArray(I_SPECIES, intArray, 0);\n+        vector.intoArray(res, 0, intVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, intArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testIntVectorStoreScatterLoadGatherDuplicateOffsetsVector() {\n+        int[] res = new int[I_SPECIES.length()];\n+        IntVector vector = IntVector.fromArray(I_SPECIES, intArray, 0, duplicateIntOffsets, 0);\n+        vector.intoArray(res, 0, duplicateIntOffsets, 0);\n+        Asserts.assertFalse(Arrays.equals(res, intArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testIntVectorLoadMaskedStoreVector() {\n+        int[] res = new int[I_SPECIES.length()];\n+        IntVector vector = IntVector.fromArray(I_SPECIES, intArray, 0, intVectorMask);\n+        vector.intoArray(res, 0, intVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, intArray));\n+    }\n+\n+\n+    \/\/ DoubleVector tests\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneDoubleVectorLoadGatherStore() {\n+        double[] res = new double[D_SPECIES.length()];\n+        DoubleVector vector = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleOffsets, 0);\n+        vector.intoArray(res, 0);\n+        Asserts.assertFalse(Arrays.equals(res, doubleArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_D, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneDoubleVectorLoadStoreScatter() {\n+        double[] res = new double[D_SPECIES.length()];\n+        DoubleVector vector = DoubleVector.fromArray(D_SPECIES, doubleArray, 0);\n+        vector.intoArray(res, 0, doubleOffsets, 0);\n+        Asserts.assertFalse(Arrays.equals(res, doubleArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneDoubleVectorLoadMaskedStore() {\n+        double[] res = new double[D_SPECIES.length()];\n+        DoubleVector vector = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleVectorMask);\n+        vector.intoArray(res, 0);\n+        Asserts.assertFalse(Arrays.equals(res, doubleArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_D, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneDoubleVectorLoadStoreMasked() {\n+        double[] res = new double[D_SPECIES.length()];\n+        DoubleVector vector = DoubleVector.fromArray(D_SPECIES, doubleArray, 0);\n+        vector.intoArray(res, 0, doubleVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, doubleArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testDoubleVectorStoreScatterLoadGatherDuplicateOffsetsVector() {\n+        double[] res = new double[D_SPECIES.length()];\n+        DoubleVector vector = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, duplicateDoubleOffsets, 0);\n+        vector.intoArray(res, 0, duplicateDoubleOffsets, 0);\n+        Asserts.assertFalse(Arrays.equals(res, doubleArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testDoubleVectorLoadMaskedStoreVector() {\n+        double[] res = new double[D_SPECIES.length()];\n+        DoubleVector vector = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleVectorMask);\n+        vector.intoArray(res, 0, doubleVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, doubleArray));\n+    }\n+\n+\n+    \/\/ FloatVector tests\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneFloatVectorLoadGatherStore() {\n+        float[] res = new float[F_SPECIES.length()];\n+        FloatVector vector = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatOffsets, 0);\n+        vector.intoArray(res, 0);\n+        Asserts.assertFalse(Arrays.equals(res, floatArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_F, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneFloatVectorLoadStoreScatter() {\n+        float[] res = new float[F_SPECIES.length()];\n+        FloatVector vector = FloatVector.fromArray(F_SPECIES, floatArray, 0);\n+        vector.intoArray(res, 0, floatOffsets, 0);\n+        Asserts.assertFalse(Arrays.equals(res, floatArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneFloatVectorLoadMaskedStore() {\n+        float[] res = new float[F_SPECIES.length()];\n+        FloatVector vector = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatVectorMask);\n+        vector.intoArray(res, 0);\n+        Asserts.assertFalse(Arrays.equals(res, floatArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_F, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneFloatVectorLoadStoreMasked() {\n+        float[] res = new float[F_SPECIES.length()];\n+        FloatVector vector = FloatVector.fromArray(F_SPECIES, floatArray, 0);\n+        vector.intoArray(res, 0, floatVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, floatArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testFloatVectorStoreScatterLoadGatherDuplicateOffsetsVector() {\n+        float[] res = new float[F_SPECIES.length()];\n+        FloatVector vector = FloatVector.fromArray(F_SPECIES, floatArray, 0, duplicateFloatOffsets, 0);\n+        vector.intoArray(res, 0, duplicateFloatOffsets, 0);\n+        Asserts.assertFalse(Arrays.equals(res, floatArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testFloatVectorLoadMaskedStoreVector() {\n+        float[] res = new float[F_SPECIES.length()];\n+        FloatVector vector = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatVectorMask);\n+        vector.intoArray(res, 0, floatVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, floatArray));\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorGatherMaskFoldingTest.java","additions":484,"deletions":1,"binary":false,"changes":485,"status":"modified"}]}