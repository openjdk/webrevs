{"files":[{"patch":"@@ -3505,1 +3505,4 @@\n-    result = mem;\n+    \/\/ Ensure vector type is the same\n+    if (!is_StoreVector() || as_StoreVector()->vect_type() == mem->as_LoadVector()->vect_type()) {\n+      result = mem;\n+    }\n@@ -3514,1 +3517,18 @@\n-    result = mem;\n+    if (!is_StoreVector()) {\n+      result = mem;\n+    } else {\n+      const StoreVectorNode* store_vector = as_StoreVector();\n+      const StoreVectorNode* mem_vector = mem->as_StoreVector();\n+      const Node* store_indices = store_vector->indices();\n+      const Node* mem_indices = mem_vector->indices();\n+      const Node* store_mask = store_vector->mask();\n+      const Node* mem_mask = mem_vector->mask();\n+      \/\/ Ensure types, indices, and masks match\n+      if (store_vector->vect_type() == mem_vector->vect_type() &&\n+          ((store_indices == nullptr) == (mem_indices == nullptr) &&\n+           (store_indices == nullptr || store_indices->eqv_uncast(mem_indices))) &&\n+          ((store_mask == nullptr) == (mem_mask == nullptr) &&\n+           (store_mask == nullptr || store_mask->eqv_uncast(mem_mask)))) {\n+        result = mem;\n+      }\n+    }\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -183,0 +183,1 @@\n+class LoadVectorGatherMaskedNode;\n@@ -185,0 +186,1 @@\n+class StoreVectorScatterMaskedNode;\n@@ -999,0 +1001,2 @@\n+  DEFINE_CLASS_QUERY(LoadVectorMasked)\n+  DEFINE_CLASS_QUERY(LoadVectorGatherMasked)\n@@ -1001,0 +1005,2 @@\n+  DEFINE_CLASS_QUERY(StoreVectorMasked)\n+  DEFINE_CLASS_QUERY(StoreVectorScatterMasked)\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -913,0 +913,4 @@\n+  virtual int store_Opcode() const {\n+    \/\/ Ensure it is different from any store opcode to avoid folding when indices are used\n+    return -1;\n+  }\n@@ -945,0 +949,2 @@\n+  virtual Node* mask() const { return nullptr; }\n+  virtual Node* indices() const { return nullptr; }\n@@ -960,0 +966,1 @@\n+   enum { Indices = 4 };\n@@ -971,0 +978,1 @@\n+   virtual Node* indices() const { return in(Indices); }\n@@ -977,0 +985,1 @@\n+  enum { Mask = 4 };\n@@ -990,0 +999,1 @@\n+  virtual Node* mask() const { return in(Mask); }\n@@ -1010,0 +1020,4 @@\n+  virtual int store_Opcode() const {\n+    \/\/ Ensure it is different from any store opcode to avoid folding when a mask is used\n+    return -1;\n+  }\n@@ -1033,0 +1047,4 @@\n+  virtual int store_Opcode() const {\n+    \/\/ Ensure it is different from any store opcode to avoid folding when indices and mask are used\n+    return -1;\n+  }\n@@ -1039,0 +1057,3 @@\n+   enum { Indices = 4,\n+          Mask\n+   };\n@@ -1053,0 +1074,2 @@\n+   virtual Node* mask() const { return in(Mask); }\n+   virtual Node* indices() const { return in(Indices); }\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -758,0 +758,5 @@\n+    public static final String LOAD_VECTOR_MASKED = PREFIX + \"LOAD_VECTOR_MASKED\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(LOAD_VECTOR_MASKED, \"LoadVectorMasked\");\n+    }\n+\n@@ -1457,0 +1462,5 @@\n+    public static final String STORE_VECTOR_MASKED = PREFIX + \"STORE_VECTOR_MASKED\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(STORE_VECTOR_MASKED, \"StoreVectorMasked\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,1404 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi;\n+\n+import compiler.lib.ir_framework.*;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.incubator.vector.*;\n+import java.util.Arrays;\n+import java.nio.ByteOrder;\n+\n+\/**\n+ * @test\n+ * @bug 8325520\n+ * @library \/test\/lib \/\n+ * @summary Don't allow folding of Load\/Store vectors when using incompatible indices or masks\n+ * @modules jdk.incubator.vector\n+ *\n+ * @run driver compiler.vectorapi.VectorGatherMaskFoldingTest\n+ *\/\n+\n+public class VectorGatherMaskFoldingTest {\n+    \/\/ Species\n+    private static final VectorSpecies<Long> L_SPECIES = LongVector.SPECIES_MAX;\n+    private static final VectorSpecies<Integer> I_SPECIES = IntVector.SPECIES_MAX;\n+    private static final VectorSpecies<Float> F_SPECIES = FloatVector.SPECIES_MAX;\n+    private static final VectorSpecies<Double> D_SPECIES = DoubleVector.SPECIES_MAX;\n+    \/\/ Vectors\n+    private static final LongVector longVector;\n+    private static final LongVector longVector2;\n+    private static final IntVector intVector;\n+    private static final IntVector intVector2;\n+    private static final DoubleVector doubleVector;\n+    private static final DoubleVector doubleVector2;\n+    private static final FloatVector floatVector;\n+    private static final FloatVector floatVector2;\n+    \/\/ Arrays\n+    private static final long[] longArray = new long[L_SPECIES.length()];\n+    private static final long[] longArray2 = new long[L_SPECIES.length()];\n+    private static final int[] intArray = new int[I_SPECIES.length()];\n+    private static final int[] intArray2 = new int[I_SPECIES.length()];\n+    private static final double[] doubleArray = new double[D_SPECIES.length()];\n+    private static final double[] doubleArray2 = new double[D_SPECIES.length()];\n+    private static final float[] floatArray = new float[F_SPECIES.length()];\n+    private static final float[] floatArray2 = new float[F_SPECIES.length()];\n+    \/\/ Indices\n+    private static final int[] longIndices = new int[L_SPECIES.length()];\n+    private static final int[] longIndices2 = new int[L_SPECIES.length()];\n+    private static final int[] duplicateLongIndices = new int[L_SPECIES.length()];\n+    private static final int[] intIndices = new int[I_SPECIES.length()];\n+    private static final int[] intIndices2 = new int[I_SPECIES.length()];\n+    private static final int[] duplicateIntIndices = new int[I_SPECIES.length()];\n+    private static final int[] doubleIndices = new int[D_SPECIES.length()];\n+    private static final int[] doubleIndices2 = new int[D_SPECIES.length()];\n+    private static final int[] duplicateDoubleIndices = new int[D_SPECIES.length()];\n+    private static final int[] floatIndices = new int[F_SPECIES.length()];\n+    private static final int[] floatIndices2 = new int[F_SPECIES.length()];\n+    private static final int[] duplicateFloatIndices = new int[F_SPECIES.length()];\n+    \/\/ Masks\n+    private static final boolean[] longMask = new boolean[L_SPECIES.length()];\n+    private static final boolean[] longMask2 = new boolean[L_SPECIES.length()];\n+    private static final boolean[] intMask = new boolean[I_SPECIES.length()];\n+    private static final boolean[] intMask2 = new boolean[I_SPECIES.length()];\n+    private static final boolean[] doubleMask = new boolean[D_SPECIES.length()];\n+    private static final boolean[] doubleMask2 = new boolean[D_SPECIES.length()];\n+    private static final boolean[] floatMask = new boolean[F_SPECIES.length()];\n+    private static final boolean[] floatMask2 = new boolean[F_SPECIES.length()];\n+    private static final VectorMask<Long> longVectorMask;\n+    private static final VectorMask<Long> longVectorMask2;\n+    private static final VectorMask<Integer> intVectorMask;\n+    private static final VectorMask<Integer> intVectorMask2;\n+    private static final VectorMask<Double> doubleVectorMask;\n+    private static final VectorMask<Double> doubleVectorMask2;\n+    private static final VectorMask<Float> floatVectorMask;\n+    private static final VectorMask<Float> floatVectorMask2;\n+\n+    \/\/ Filling vectors\/indices\/masks\n+    static {\n+        for (int i = 0; i < L_SPECIES.length(); i++) {\n+            longArray[i] = i + 1;\n+            longArray2[i] = L_SPECIES.length() - i + 1;\n+            longMask[i] = i % 2 == 0;\n+            longMask2[i] = i >= L_SPECIES.length() \/ 2;\n+            longIndices[i] = (i + L_SPECIES.length() \/ 2) % L_SPECIES.length();\n+            longIndices2[i] = (L_SPECIES.length() - i) % L_SPECIES.length();\n+            duplicateLongIndices[i] = longIndices[i] \/ 2;\n+        }\n+        longVector = LongVector.fromArray(L_SPECIES, longArray, 0);\n+        longVector2 = LongVector.fromArray(L_SPECIES, longArray2, 0);\n+        longVectorMask = VectorMask.fromArray(L_SPECIES, longMask, 0);\n+        longVectorMask2 = VectorMask.fromArray(L_SPECIES, longMask2, 0);\n+        for (int i = 0; i < I_SPECIES.length(); i++) {\n+            intArray[i] = i + 1;\n+            intArray2[i] = I_SPECIES.length() - i + 1;\n+            intMask[i] = i % 2 == 0;\n+            intMask2[i] = i >= I_SPECIES.length() \/ 2;\n+            intIndices[i] = (i + I_SPECIES.length() \/ 2) % I_SPECIES.length();\n+            intIndices2[i] = (I_SPECIES.length() - i) % I_SPECIES.length();\n+            duplicateIntIndices[i] = intIndices[i] \/ 2;\n+        }\n+        intVector = IntVector.fromArray(I_SPECIES, intArray, 0);\n+        intVector2 = IntVector.fromArray(I_SPECIES, intArray2, 0);\n+        intVectorMask = VectorMask.fromArray(I_SPECIES, intMask, 0);\n+        intVectorMask2 = VectorMask.fromArray(I_SPECIES, intMask2, 0);\n+        for (int i = 0; i < D_SPECIES.length(); i++) {\n+            doubleArray[i] = (double) i + 1.0;\n+            doubleArray2[i] = (double) (D_SPECIES.length() - i) + 1.0;\n+            doubleMask[i] = i % 2 == 0;\n+            doubleMask2[i] = i >= D_SPECIES.length() \/ 2;\n+            doubleIndices[i] = (i + D_SPECIES.length() \/ 2) % D_SPECIES.length();\n+            doubleIndices2[i] = (D_SPECIES.length() - i) % D_SPECIES.length();\n+            duplicateDoubleIndices[i] = doubleIndices[i] \/ 2;\n+        }\n+        doubleVector = DoubleVector.fromArray(D_SPECIES, doubleArray, 0);\n+        doubleVector2 = DoubleVector.fromArray(D_SPECIES, doubleArray2, 0);\n+        doubleVectorMask = VectorMask.fromArray(D_SPECIES, doubleMask, 0);\n+        doubleVectorMask2 = VectorMask.fromArray(D_SPECIES, doubleMask2, 0);\n+        for (int i = 0; i < F_SPECIES.length(); i++) {\n+            floatArray[i] = i + 1.0f;\n+            floatArray2[i] = F_SPECIES.length() - i + 1.0f;\n+            floatMask[i] = i % 2 == 0;\n+            floatMask2[i] = i >= F_SPECIES.length() \/ 2;\n+            floatIndices[i] = (i + F_SPECIES.length() \/ 2) % F_SPECIES.length();\n+            floatIndices2[i] = (F_SPECIES.length() - i) % F_SPECIES.length();\n+            duplicateFloatIndices[i] = floatIndices[i] \/ 2;\n+        }\n+        floatVector = FloatVector.fromArray(F_SPECIES, floatArray, 0);\n+        floatVector2 = FloatVector.fromArray(F_SPECIES, floatArray2, 0);\n+        floatVectorMask = VectorMask.fromArray(F_SPECIES, floatMask, 0);\n+        floatVectorMask2 = VectorMask.fromArray(F_SPECIES, floatMask2, 0);\n+    }\n+\n+    \/\/ LOAD TESTS\n+\n+    \/\/ LongVector tests\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorLoadGatherNotEqualArray() {\n+        LongVector res = LongVector.fromArray(L_SPECIES, longArray, 0, longIndices, 0);\n+        LongVector res2 = LongVector.fromArray(L_SPECIES, longArray2, 0, longIndices, 0);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorLoadGatherNotEqualIndices() {\n+        LongVector res = LongVector.fromArray(L_SPECIES, longArray, 0, longIndices, 0);\n+        LongVector res2 = LongVector.fromArray(L_SPECIES, longArray, 0, longIndices2, 0);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testOneLongVectorLoadGather() {\n+        LongVector res = LongVector.fromArray(L_SPECIES, longArray, 0);\n+        LongVector res2 = LongVector.fromArray(L_SPECIES, longArray, 0, longIndices, 0);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testOneLongVectorLoadMasked() {\n+        LongVector res = LongVector.fromArray(L_SPECIES, longArray, 0);\n+        LongVector res2 = LongVector.fromArray(L_SPECIES, longArray, 0, longVectorMask);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorLoadGatherEquals() {\n+        LongVector res = LongVector.fromArray(L_SPECIES, longArray, 0, longIndices, 0);\n+        LongVector res2 = LongVector.fromArray(L_SPECIES, longArray, 0, longIndices, 0);\n+        Asserts.assertEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorLoadMaskedEquals() {\n+        LongVector res = LongVector.fromArray(L_SPECIES, longArray, 0, longVectorMask);\n+        LongVector res2 = LongVector.fromArray(L_SPECIES, longArray, 0, longVectorMask);\n+        Asserts.assertEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorLoadMaskedNotEqualMask() {\n+        LongVector res = LongVector.fromArray(L_SPECIES, longArray, 0, longVectorMask);\n+        LongVector res2 = LongVector.fromArray(L_SPECIES, longArray, 0, longVectorMask2);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorLoadGatherMaskedEquals() {\n+        LongVector res = LongVector.fromArray(L_SPECIES, longArray, 0, longIndices, 0, longVectorMask);\n+        LongVector res2 = LongVector.fromArray(L_SPECIES, longArray, 0, longIndices, 0, longVectorMask);\n+        Asserts.assertEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorLoadGatherMaskedNotEqualMask() {\n+        LongVector res = LongVector.fromArray(L_SPECIES, longArray, 0, longIndices, 0, longVectorMask);\n+        LongVector res2 = LongVector.fromArray(L_SPECIES, longArray, 0, longIndices, 0, longVectorMask2);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorLoadGatherMaskedNotEqualIndices() {\n+        LongVector res = LongVector.fromArray(L_SPECIES, longArray, 0, longIndices, 0, longVectorMask);\n+        LongVector res2 = LongVector.fromArray(L_SPECIES, longArray, 0, longIndices2, 0, longVectorMask);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+\n+    \/\/ IntVector tests\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorLoadGatherNotEqualArray() {\n+        IntVector res = IntVector.fromArray(I_SPECIES, intArray, 0, intIndices, 0);\n+        IntVector res2 = IntVector.fromArray(I_SPECIES, intArray2, 0, intIndices, 0);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorLoadGatherNotEqualIndices() {\n+        IntVector res = IntVector.fromArray(I_SPECIES, intArray, 0, intIndices, 0);\n+        IntVector res2 = IntVector.fromArray(I_SPECIES, intArray, 0, intIndices2, 0);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_I, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testOneIntVectorLoadGather() {\n+        IntVector res = IntVector.fromArray(I_SPECIES, intArray, 0);\n+        IntVector res2 = IntVector.fromArray(I_SPECIES, intArray, 0, intIndices, 0);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_I, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testOneIntVectorLoadMasked() {\n+        IntVector res = IntVector.fromArray(I_SPECIES, intArray, 0);\n+        IntVector res2 = IntVector.fromArray(I_SPECIES, intArray, 0, intVectorMask);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorLoadGatherEquals() {\n+        IntVector res = IntVector.fromArray(I_SPECIES, intArray, 0, intIndices, 0);\n+        IntVector res2 = IntVector.fromArray(I_SPECIES, intArray, 0, intIndices, 0);\n+        Asserts.assertEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorLoadMaskedEquals() {\n+        IntVector res = IntVector.fromArray(I_SPECIES, intArray, 0, intVectorMask);\n+        IntVector res2 = IntVector.fromArray(I_SPECIES, intArray, 0, intVectorMask);\n+        Asserts.assertEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorLoadMaskedNotEqualMask() {\n+        IntVector res = IntVector.fromArray(I_SPECIES, intArray, 0, intVectorMask);\n+        IntVector res2 = IntVector.fromArray(I_SPECIES, intArray, 0, intVectorMask2);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorLoadGatherMaskedEquals() {\n+        IntVector res = IntVector.fromArray(I_SPECIES, intArray, 0, intIndices, 0, intVectorMask);\n+        IntVector res2 = IntVector.fromArray(I_SPECIES, intArray, 0, intIndices, 0, intVectorMask);\n+        Asserts.assertEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorLoadGatherMaskedNotEqualMask() {\n+        IntVector res = IntVector.fromArray(I_SPECIES, intArray, 0, intIndices, 0, intVectorMask);\n+        IntVector res2 = IntVector.fromArray(I_SPECIES, intArray, 0, intIndices, 0, intVectorMask2);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorLoadGatherMaskedNotEqualIndices() {\n+        IntVector res = IntVector.fromArray(I_SPECIES, intArray, 0, intIndices, 0, intVectorMask);\n+        IntVector res2 = IntVector.fromArray(I_SPECIES, intArray, 0, intIndices2, 0, intVectorMask);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+\n+    \/\/ DoubleVector tests\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorLoadGatherNotEqualArray() {\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleIndices, 0);\n+        DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, doubleArray2, 0, doubleIndices, 0);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorLoadGatherNotEqualIndices() {\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleIndices, 0);\n+        DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleIndices2, 0);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_D, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testOneDoubleVectorLoadGather() {\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, doubleArray, 0);\n+        DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleIndices, 0);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_D, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testOneDoubleVectorLoadMasked() {\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, doubleArray, 0);\n+        DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleVectorMask);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorLoadGatherEquals() {\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleIndices, 0);\n+        DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleIndices, 0);\n+        Asserts.assertEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorLoadMaskedEquals() {\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleVectorMask);\n+        DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleVectorMask);\n+        Asserts.assertEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorLoadMaskedNotEqualMask() {\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleVectorMask);\n+        DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleVectorMask2);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorLoadGatherMaskedEquals() {\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleIndices, 0, doubleVectorMask);\n+        DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleIndices, 0, doubleVectorMask);\n+        Asserts.assertEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorLoadGatherMaskedNotEqualMask() {\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleIndices, 0, doubleVectorMask);\n+        DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleIndices, 0, doubleVectorMask2);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorLoadGatherMaskedNotEqualIndices() {\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleIndices, 0, doubleVectorMask);\n+        DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleIndices2, 0, doubleVectorMask);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+\n+    \/\/ FloatVector tests\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorLoadGatherNotEqualArray() {\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatIndices, 0);\n+        FloatVector res2 = FloatVector.fromArray(F_SPECIES, floatArray2, 0, floatIndices, 0);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorLoadGatherNotEqualIndices() {\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatIndices, 0);\n+        FloatVector res2 = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatIndices2, 0);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_F, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testOneFloatVectorLoadGather() {\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, floatArray, 0);\n+        FloatVector res2 = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatIndices, 0);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_F, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testOneFloatVectorLoadMasked() {\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, floatArray, 0);\n+        FloatVector res2 = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatVectorMask);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorLoadGatherEquals() {\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatIndices, 0);\n+        FloatVector res2 = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatIndices, 0);\n+        Asserts.assertEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorLoadMaskedEquals() {\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatVectorMask);\n+        FloatVector res2 = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatVectorMask);\n+        Asserts.assertEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorLoadMaskedNotEqualMask() {\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatVectorMask);\n+        FloatVector res2 = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatVectorMask2);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorLoadGatherMaskedEquals() {\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatIndices, 0, floatVectorMask);\n+        FloatVector res2 = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatIndices, 0, floatVectorMask);\n+        Asserts.assertEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorLoadGatherMaskedNotEqualMask() {\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatIndices, 0, floatVectorMask);\n+        FloatVector res2 = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatIndices, 0, floatVectorMask2);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorLoadGatherMaskedNotEqualIndices() {\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatIndices, 0, floatVectorMask);\n+        FloatVector res2 = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatIndices2, 0, floatVectorMask);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+\n+    \/\/ STORE TESTS\n+\n+    \/\/ LongVector tests\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorStoreScatterNotEqualVector() {\n+        long[] res = new long[L_SPECIES.length()];\n+        long[] res2 = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0, longIndices, 0);\n+        longVector2.intoArray(res2, 0, longIndices, 0);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorStoreScatterNotEqualIndices() {\n+        long[] res = new long[L_SPECIES.length()];\n+        long[] res2 = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0, longIndices, 0);\n+        longVector.intoArray(res2, 0, longIndices2, 0);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.STORE_VECTOR_SCATTER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneLongVectorStoreScatter() {\n+        long[] res = new long[L_SPECIES.length()];\n+        long[] res2 = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0);\n+        longVector.intoArray(res2, 0, longIndices, 0);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.STORE_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneLongVectorStoreMasked() {\n+        long[] res = new long[L_SPECIES.length()];\n+        long[] res2 = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0);\n+        longVector.intoArray(res2, 0, longVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorStoreScatterEquals() {\n+        long[] res = new long[L_SPECIES.length()];\n+        long[] res2 = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0, longIndices, 0);\n+        longVector.intoArray(res2, 0, longIndices, 0);\n+        Asserts.assertTrue(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorStoreMaskedEquals() {\n+        long[] res = new long[L_SPECIES.length()];\n+        long[] res2 = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0, longVectorMask);\n+        longVector.intoArray(res2, 0, longVectorMask);\n+        Asserts.assertTrue(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorStoreMaskedNotEqualMask() {\n+        long[] res = new long[L_SPECIES.length()];\n+        long[] res2 = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0, longVectorMask);\n+        longVector.intoArray(res2, 0, longVectorMask2);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorStoreScatterMaskedEquals() {\n+        long[] res = new long[L_SPECIES.length()];\n+        long[] res2 = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0, longIndices, 0, longVectorMask);\n+        longVector.intoArray(res2, 0, longIndices, 0, longVectorMask);\n+        Asserts.assertTrue(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorStoreScatterMaskedNotEqualMask() {\n+        long[] res = new long[L_SPECIES.length()];\n+        long[] res2 = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0, longIndices, 0, longVectorMask);\n+        longVector.intoArray(res2, 0, longIndices, 0, longVectorMask2);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorStoreScatterMaskedNotEqualIndices() {\n+        long[] res = new long[L_SPECIES.length()];\n+        long[] res2 = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0, longIndices, 0, longVectorMask);\n+        longVector.intoArray(res2, 0, longIndices2, 0, longVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+\n+    \/\/ IntVector tests\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorStoreScatterNotEqualVector() {\n+        int[] res = new int[I_SPECIES.length()];\n+        int[] res2 = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0, intIndices, 0);\n+        intVector2.intoArray(res2, 0, intIndices, 0);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorStoreScatterNotEqualIndices() {\n+        int[] res = new int[I_SPECIES.length()];\n+        int[] res2 = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0, intIndices, 0);\n+        intVector.intoArray(res2, 0, intIndices2, 0);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.STORE_VECTOR_SCATTER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneIntVectorStoreScatter() {\n+        int[] res = new int[I_SPECIES.length()];\n+        int[] res2 = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0);\n+        intVector.intoArray(res2, 0, intIndices, 0);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.STORE_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneIntVectorStoreMasked() {\n+        int[] res = new int[I_SPECIES.length()];\n+        int[] res2 = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0);\n+        intVector.intoArray(res2, 0, intVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorStoreScatterEquals() {\n+        int[] res = new int[I_SPECIES.length()];\n+        int[] res2 = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0, intIndices, 0);\n+        intVector.intoArray(res2, 0, intIndices, 0);\n+        Asserts.assertTrue(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorStoreMaskedEquals() {\n+        int[] res = new int[I_SPECIES.length()];\n+        int[] res2 = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0, intVectorMask);\n+        intVector.intoArray(res2, 0, intVectorMask);\n+        Asserts.assertTrue(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorStoreMaskedNotEqualMask() {\n+        int[] res = new int[I_SPECIES.length()];\n+        int[] res2 = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0, intVectorMask);\n+        intVector.intoArray(res2, 0, intVectorMask2);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorStoreScatterMaskedEquals() {\n+        int[] res = new int[I_SPECIES.length()];\n+        int[] res2 = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0, intIndices, 0, intVectorMask);\n+        intVector.intoArray(res2, 0, intIndices, 0, intVectorMask);\n+        Asserts.assertTrue(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorStoreScatterMaskedNotEqualMask() {\n+        int[] res = new int[I_SPECIES.length()];\n+        int[] res2 = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0, intIndices, 0, intVectorMask);\n+        intVector.intoArray(res2, 0, intIndices, 0, intVectorMask2);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorStoreScatterMaskedNotEqualIndices() {\n+        int[] res = new int[I_SPECIES.length()];\n+        int[] res2 = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0, intIndices, 0, intVectorMask);\n+        intVector.intoArray(res2, 0, intIndices2, 0, intVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+\n+    \/\/ DoubleVector tests\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorStoreScatterNotEqualVector() {\n+        double[] res = new double[D_SPECIES.length()];\n+        double[] res2 = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0, doubleIndices, 0);\n+        doubleVector2.intoArray(res2, 0, doubleIndices, 0);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorStoreScatterNotEqualIndices() {\n+        double[] res = new double[D_SPECIES.length()];\n+        double[] res2 = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0, doubleIndices, 0);\n+        doubleVector.intoArray(res2, 0, doubleIndices2, 0);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.STORE_VECTOR_SCATTER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneDoubleVectorStoreScatter() {\n+        double[] res = new double[D_SPECIES.length()];\n+        double[] res2 = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0);\n+        doubleVector.intoArray(res2, 0, doubleIndices, 0);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.STORE_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneDoubleVectorStoreMasked() {\n+        double[] res = new double[D_SPECIES.length()];\n+        double[] res2 = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0);\n+        doubleVector.intoArray(res2, 0, doubleVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorStoreScatterEquals() {\n+        double[] res = new double[D_SPECIES.length()];\n+        double[] res2 = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0, doubleIndices, 0);\n+        doubleVector.intoArray(res2, 0, doubleIndices, 0);\n+        Asserts.assertTrue(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorStoreMaskedEquals() {\n+        double[] res = new double[D_SPECIES.length()];\n+        double[] res2 = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0, doubleVectorMask);\n+        doubleVector.intoArray(res2, 0, doubleVectorMask);\n+        Asserts.assertTrue(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorStoreMaskedNotEqualMask() {\n+        double[] res = new double[D_SPECIES.length()];\n+        double[] res2 = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0, doubleVectorMask);\n+        doubleVector.intoArray(res2, 0, doubleVectorMask2);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorStoreScatterMaskedEquals() {\n+        double[] res = new double[D_SPECIES.length()];\n+        double[] res2 = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0, doubleIndices, 0, doubleVectorMask);\n+        doubleVector.intoArray(res2, 0, doubleIndices, 0, doubleVectorMask);\n+        Asserts.assertTrue(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorStoreScatterMaskedNotEqualMask() {\n+        double[] res = new double[D_SPECIES.length()];\n+        double[] res2 = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0, doubleIndices, 0, doubleVectorMask);\n+        doubleVector.intoArray(res2, 0, doubleIndices, 0, doubleVectorMask2);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorStoreScatterMaskedNotEqualIndices() {\n+        double[] res = new double[D_SPECIES.length()];\n+        double[] res2 = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0, doubleIndices, 0, doubleVectorMask);\n+        doubleVector.intoArray(res2, 0, doubleIndices2, 0, doubleVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+\n+    \/\/ FloatVector tests\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorStoreScatterNotEqualVector() {\n+        float[] res = new float[F_SPECIES.length()];\n+        float[] res2 = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0, floatIndices, 0);\n+        floatVector2.intoArray(res2, 0, floatIndices, 0);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorStoreScatterNotEqualIndices() {\n+        float[] res = new float[F_SPECIES.length()];\n+        float[] res2 = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0, floatIndices, 0);\n+        floatVector.intoArray(res2, 0, floatIndices2, 0);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.STORE_VECTOR_SCATTER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneFloatVectorStoreScatter() {\n+        float[] res = new float[F_SPECIES.length()];\n+        float[] res2 = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0);\n+        floatVector.intoArray(res2, 0, floatIndices, 0);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.STORE_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneFloatVectorStoreMasked() {\n+        float[] res = new float[F_SPECIES.length()];\n+        float[] res2 = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0);\n+        floatVector.intoArray(res2, 0, floatVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorStoreScatterEquals() {\n+        float[] res = new float[F_SPECIES.length()];\n+        float[] res2 = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0, floatIndices, 0);\n+        floatVector.intoArray(res2, 0, floatIndices, 0);\n+        Asserts.assertTrue(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorStoreMaskedEquals() {\n+        float[] res = new float[F_SPECIES.length()];\n+        float[] res2 = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0, floatVectorMask);\n+        floatVector.intoArray(res2, 0, floatVectorMask);\n+        Asserts.assertTrue(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorStoreMaskedNotEqualMask() {\n+        float[] res = new float[F_SPECIES.length()];\n+        float[] res2 = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0, floatVectorMask);\n+        floatVector.intoArray(res2, 0, floatVectorMask2);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorStoreScatterMaskedEquals() {\n+        float[] res = new float[F_SPECIES.length()];\n+        float[] res2 = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0, floatIndices, 0, floatVectorMask);\n+        floatVector.intoArray(res2, 0, floatIndices, 0, floatVectorMask);\n+        Asserts.assertTrue(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorStoreScatterMaskedNotEqualMask() {\n+        float[] res = new float[F_SPECIES.length()];\n+        float[] res2 = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0, floatIndices, 0, floatVectorMask);\n+        floatVector.intoArray(res2, 0, floatIndices, 0, floatVectorMask2);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorStoreScatterMaskedNotEqualIndices() {\n+        float[] res = new float[F_SPECIES.length()];\n+        float[] res2 = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0, floatIndices, 0, floatVectorMask);\n+        floatVector.intoArray(res2, 0, floatIndices2, 0, floatVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+\n+    \/\/ STORE - LOAD tests\n+\n+    \/\/ LongVector tests\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneLongVectorStoreLoadGather() {\n+        long[] array = new long[L_SPECIES.length()];\n+        longVector.intoArray(array, 0);\n+        LongVector res = LongVector.fromArray(L_SPECIES, array, 0, longIndices, 0);\n+        Asserts.assertNotEquals(res, longVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_L, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneLongVectorStoreScatterLoad() {\n+        long[] array = new long[L_SPECIES.length()];\n+        longVector.intoArray(array, 0, longIndices, 0);\n+        LongVector res = LongVector.fromArray(L_SPECIES, array, 0);\n+        Asserts.assertNotEquals(res, longVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneLongVectorStoreLoadMasked() {\n+        long[] array = new long[L_SPECIES.length()];\n+        longVector.intoArray(array, 0);\n+        LongVector res = LongVector.fromArray(L_SPECIES, array, 0, longVectorMask);\n+        Asserts.assertNotEquals(res, longVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_L, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneLongVectorStoreMaskedLoad() {\n+        long[] array = new long[L_SPECIES.length()];\n+        longVector.intoArray(array, 0, longVectorMask);\n+        LongVector res = LongVector.fromArray(L_SPECIES, array, 0);\n+        Asserts.assertNotEquals(res, longVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testLongVectorLoadGatherStoreScatterDuplicateIndicesVector() {\n+        long[] res = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0, duplicateLongIndices, 0);\n+        LongVector res2 = LongVector.fromArray(L_SPECIES, res, 0, duplicateLongIndices, 0);\n+        Asserts.assertNotEquals(res2, longVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testLongVectorStoreLoadMaskedVector() {\n+        long[] res = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0, longVectorMask);\n+        LongVector res2 = LongVector.fromArray(L_SPECIES, res, 0, longVectorMask);\n+        Asserts.assertNotEquals(res2, longVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_L, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testStoreLoadLongVectorDifferentSpeciesVector() {\n+        long[] res = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0);\n+        LongVector res2 = LongVector.fromArray(LongVector.SPECIES_64, res, 0);\n+        Asserts.assertNotEquals(res2, longVector);\n+    }\n+\n+\n+    \/\/ IntVector tests\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneIntVectorStoreLoadGather() {\n+        int[] array = new int[I_SPECIES.length()];\n+        intVector.intoArray(array, 0);\n+        IntVector res = IntVector.fromArray(I_SPECIES, array, 0, intIndices, 0);\n+        Asserts.assertNotEquals(res, intVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_I, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneIntVectorStoreScatterLoad() {\n+        int[] array = new int[I_SPECIES.length()];\n+        intVector.intoArray(array, 0, intIndices, 0);\n+        IntVector res = IntVector.fromArray(I_SPECIES, array, 0);\n+        Asserts.assertNotEquals(res, intVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneIntVectorStoreLoadMasked() {\n+        int[] array = new int[I_SPECIES.length()];\n+        intVector.intoArray(array, 0);\n+        IntVector res = IntVector.fromArray(I_SPECIES, array, 0, intVectorMask);\n+        Asserts.assertNotEquals(res, intVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_I, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneIntVectorStoreMaskedLoad() {\n+        int[] array = new int[I_SPECIES.length()];\n+        intVector.intoArray(array, 0, intVectorMask);\n+        IntVector res = IntVector.fromArray(I_SPECIES, array, 0);\n+        Asserts.assertNotEquals(res, intVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testIntVectorLoadGatherStoreScatterDuplicateIndicesVector() {\n+        int[] res = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0, duplicateIntIndices, 0);\n+        IntVector res2 = IntVector.fromArray(I_SPECIES, res, 0, duplicateIntIndices, 0);\n+        Asserts.assertNotEquals(res2, intVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testIntVectorStoreLoadMaskedVector() {\n+        int[] res = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0, intVectorMask);\n+        IntVector res2 = IntVector.fromArray(I_SPECIES, res, 0, intVectorMask);\n+        Asserts.assertNotEquals(res2, intVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_I, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testStoreLoadIntVectorDifferentSpeciesVector() {\n+        int[] res = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0);\n+        IntVector res2 = IntVector.fromArray(IntVector.SPECIES_64, res, 0);\n+        Asserts.assertNotEquals(res2, intVector);\n+    }\n+\n+\n+    \/\/ DoubleVector tests\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneDoubleVectorStoreLoadGather() {\n+        double[] array = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(array, 0);\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, array, 0, doubleIndices, 0);\n+        Asserts.assertNotEquals(res, doubleVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_D, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneDoubleVectorStoreScatterLoad() {\n+        double[] array = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(array, 0, doubleIndices, 0);\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, array, 0);\n+        Asserts.assertNotEquals(res, doubleVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneDoubleVectorStoreLoadMasked() {\n+        double[] array = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(array, 0);\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, array, 0, doubleVectorMask);\n+        Asserts.assertNotEquals(res, doubleVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_D, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneDoubleVectorStoreMaskedLoad() {\n+        double[] array = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(array, 0, doubleVectorMask);\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, array, 0);\n+        Asserts.assertNotEquals(res, doubleVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testDoubleVectorLoadGatherStoreScatterDuplicateIndicesVector() {\n+        double[] res = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0, duplicateDoubleIndices, 0);\n+        DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, res, 0, duplicateDoubleIndices, 0);\n+        Asserts.assertNotEquals(res2, doubleVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testDoubleVectorStoreLoadMaskedVector() {\n+        double[] res = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0, doubleVectorMask);\n+        DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, res, 0, doubleVectorMask);\n+        Asserts.assertNotEquals(res2, doubleVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_D, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testStoreLoadDoubleVectorDifferentSpeciesVector() {\n+        double[] res = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0);\n+        DoubleVector res2 = DoubleVector.fromArray(DoubleVector.SPECIES_64, res, 0);\n+        Asserts.assertNotEquals(res2, doubleVector);\n+    }\n+\n+\n+    \/\/ FloatVector tests\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneFloatVectorStoreLoadGather() {\n+        float[] array = new float[F_SPECIES.length()];\n+        floatVector.intoArray(array, 0);\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, array, 0, floatIndices, 0);\n+        Asserts.assertNotEquals(res, floatVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_F, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneFloatVectorStoreScatterLoad() {\n+        float[] array = new float[F_SPECIES.length()];\n+        floatVector.intoArray(array, 0, floatIndices, 0);\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, array, 0);\n+        Asserts.assertNotEquals(res, floatVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneFloatVectorStoreLoadMasked() {\n+        float[] array = new float[F_SPECIES.length()];\n+        floatVector.intoArray(array, 0);\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, array, 0, floatVectorMask);\n+        Asserts.assertNotEquals(res, floatVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_F, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneFloatVectorStoreMaskedLoad() {\n+        float[] array = new float[F_SPECIES.length()];\n+        floatVector.intoArray(array, 0, floatVectorMask);\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, array, 0);\n+        Asserts.assertNotEquals(res, floatVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testFloatVectorLoadGatherStoreScatterDuplicateIndicesVector() {\n+        float[] res = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0, duplicateFloatIndices, 0);\n+        FloatVector res2 = FloatVector.fromArray(F_SPECIES, res, 0, duplicateFloatIndices, 0);\n+        Asserts.assertNotEquals(res2, floatVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testFloatVectorStoreLoadMaskedVector() {\n+        float[] res = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0, floatVectorMask);\n+        FloatVector res2 = FloatVector.fromArray(F_SPECIES, res, 0, floatVectorMask);\n+        Asserts.assertNotEquals(res2, floatVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_F, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testStoreLoadFloatVectorDifferentSpeciesVector() {\n+        float[] res = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0);\n+        FloatVector res2 = FloatVector.fromArray(FloatVector.SPECIES_64, res, 0);\n+        Asserts.assertNotEquals(res2, floatVector);\n+    }\n+\n+\n+    \/\/ LOAD - STORE tests\n+\n+    \/\/ LongVector tests\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneLongVectorLoadGatherStore() {\n+        long[] res = new long[L_SPECIES.length()];\n+        LongVector vector = LongVector.fromArray(L_SPECIES, longArray, 0, longIndices, 0);\n+        vector.intoArray(res, 0);\n+        Asserts.assertFalse(Arrays.equals(res, longArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_L, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneLongVectorLoadStoreScatter() {\n+        long[] res = new long[L_SPECIES.length()];\n+        LongVector vector = LongVector.fromArray(L_SPECIES, longArray, 0);\n+        vector.intoArray(res, 0, longIndices, 0);\n+        Asserts.assertFalse(Arrays.equals(res, longArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneLongVectorLoadMaskedStore() {\n+        long[] res = new long[L_SPECIES.length()];\n+        LongVector vector = LongVector.fromArray(L_SPECIES, longArray, 0, longVectorMask);\n+        vector.intoArray(res, 0);\n+        Asserts.assertFalse(Arrays.equals(res, longArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_L, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneLongVectorLoadStoreMasked() {\n+        long[] res = new long[L_SPECIES.length()];\n+        LongVector vector = LongVector.fromArray(L_SPECIES, longArray, 0);\n+        vector.intoArray(res, 0, longVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, longArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testLongVectorStoreScatterLoadGatherDuplicateIndicesVector() {\n+        long[] res = new long[L_SPECIES.length()];\n+        LongVector vector = LongVector.fromArray(L_SPECIES, longArray, 0, duplicateLongIndices, 0);\n+        vector.intoArray(res, 0, duplicateLongIndices, 0);\n+        Asserts.assertFalse(Arrays.equals(res, longArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testLongVectorLoadMaskedStoreVector() {\n+        long[] res = new long[L_SPECIES.length()];\n+        LongVector vector = LongVector.fromArray(L_SPECIES, longArray, 0, longVectorMask);\n+        vector.intoArray(res, 0, longVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, longArray));\n+    }\n+\n+\n+    \/\/ IntVector tests\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneIntVectorLoadGatherStore() {\n+        int[] res = new int[I_SPECIES.length()];\n+        IntVector vector = IntVector.fromArray(I_SPECIES, intArray, 0, intIndices, 0);\n+        vector.intoArray(res, 0);\n+        Asserts.assertFalse(Arrays.equals(res, intArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_I, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneIntVectorLoadStoreScatter() {\n+        int[] res = new int[I_SPECIES.length()];\n+        IntVector vector = IntVector.fromArray(I_SPECIES, intArray, 0);\n+        vector.intoArray(res, 0, intIndices, 0);\n+        Asserts.assertFalse(Arrays.equals(res, intArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneIntVectorLoadMaskedStore() {\n+        int[] res = new int[I_SPECIES.length()];\n+        IntVector vector = IntVector.fromArray(I_SPECIES, intArray, 0, intVectorMask);\n+        vector.intoArray(res, 0);\n+        Asserts.assertFalse(Arrays.equals(res, intArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_I, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneIntVectorLoadStoreMasked() {\n+        int[] res = new int[I_SPECIES.length()];\n+        IntVector vector = IntVector.fromArray(I_SPECIES, intArray, 0);\n+        vector.intoArray(res, 0, intVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, intArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testIntVectorStoreScatterLoadGatherDuplicateIndicesVector() {\n+        int[] res = new int[I_SPECIES.length()];\n+        IntVector vector = IntVector.fromArray(I_SPECIES, intArray, 0, duplicateIntIndices, 0);\n+        vector.intoArray(res, 0, duplicateIntIndices, 0);\n+        Asserts.assertFalse(Arrays.equals(res, intArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testIntVectorLoadMaskedStoreVector() {\n+        int[] res = new int[I_SPECIES.length()];\n+        IntVector vector = IntVector.fromArray(I_SPECIES, intArray, 0, intVectorMask);\n+        vector.intoArray(res, 0, intVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, intArray));\n+    }\n+\n+\n+    \/\/ DoubleVector tests\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneDoubleVectorLoadGatherStore() {\n+        double[] res = new double[D_SPECIES.length()];\n+        DoubleVector vector = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleIndices, 0);\n+        vector.intoArray(res, 0);\n+        Asserts.assertFalse(Arrays.equals(res, doubleArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_D, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneDoubleVectorLoadStoreScatter() {\n+        double[] res = new double[D_SPECIES.length()];\n+        DoubleVector vector = DoubleVector.fromArray(D_SPECIES, doubleArray, 0);\n+        vector.intoArray(res, 0, doubleIndices, 0);\n+        Asserts.assertFalse(Arrays.equals(res, doubleArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneDoubleVectorLoadMaskedStore() {\n+        double[] res = new double[D_SPECIES.length()];\n+        DoubleVector vector = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleVectorMask);\n+        vector.intoArray(res, 0);\n+        Asserts.assertFalse(Arrays.equals(res, doubleArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_D, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneDoubleVectorLoadStoreMasked() {\n+        double[] res = new double[D_SPECIES.length()];\n+        DoubleVector vector = DoubleVector.fromArray(D_SPECIES, doubleArray, 0);\n+        vector.intoArray(res, 0, doubleVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, doubleArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testDoubleVectorStoreScatterLoadGatherDuplicateIndicesVector() {\n+        double[] res = new double[D_SPECIES.length()];\n+        DoubleVector vector = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, duplicateDoubleIndices, 0);\n+        vector.intoArray(res, 0, duplicateDoubleIndices, 0);\n+        Asserts.assertFalse(Arrays.equals(res, doubleArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testDoubleVectorLoadMaskedStoreVector() {\n+        double[] res = new double[D_SPECIES.length()];\n+        DoubleVector vector = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleVectorMask);\n+        vector.intoArray(res, 0, doubleVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, doubleArray));\n+    }\n+\n+\n+    \/\/ FloatVector tests\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneFloatVectorLoadGatherStore() {\n+        float[] res = new float[F_SPECIES.length()];\n+        FloatVector vector = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatIndices, 0);\n+        vector.intoArray(res, 0);\n+        Asserts.assertFalse(Arrays.equals(res, floatArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_F, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneFloatVectorLoadStoreScatter() {\n+        float[] res = new float[F_SPECIES.length()];\n+        FloatVector vector = FloatVector.fromArray(F_SPECIES, floatArray, 0);\n+        vector.intoArray(res, 0, floatIndices, 0);\n+        Asserts.assertFalse(Arrays.equals(res, floatArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneFloatVectorLoadMaskedStore() {\n+        float[] res = new float[F_SPECIES.length()];\n+        FloatVector vector = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatVectorMask);\n+        vector.intoArray(res, 0);\n+        Asserts.assertFalse(Arrays.equals(res, floatArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_F, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneFloatVectorLoadStoreMasked() {\n+        float[] res = new float[F_SPECIES.length()];\n+        FloatVector vector = FloatVector.fromArray(F_SPECIES, floatArray, 0);\n+        vector.intoArray(res, 0, floatVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, floatArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testFloatVectorStoreScatterLoadGatherDuplicateIndicesVector() {\n+        float[] res = new float[F_SPECIES.length()];\n+        FloatVector vector = FloatVector.fromArray(F_SPECIES, floatArray, 0, duplicateFloatIndices, 0);\n+        vector.intoArray(res, 0, duplicateFloatIndices, 0);\n+        Asserts.assertFalse(Arrays.equals(res, floatArray));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testFloatVectorLoadMaskedStoreVector() {\n+        float[] res = new float[F_SPECIES.length()];\n+        FloatVector vector = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatVectorMask);\n+        vector.intoArray(res, 0, floatVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, floatArray));\n+    }\n+\n+\n+    public static void main(String[] args) {\n+        TestFramework testFramework = new TestFramework();\n+        testFramework.setDefaultWarmup(10000)\n+                     .addFlags(\"--add-modules=jdk.incubator.vector\", \"-XX:+IncrementalInlineForceCleanup\")\n+                     .start();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorGatherMaskFoldingTest.java","additions":1404,"deletions":0,"binary":false,"changes":1404,"status":"added"}]}