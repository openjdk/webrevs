{"files":[{"patch":"@@ -3506,1 +3506,4 @@\n-    result = mem;\n+    \/\/ Ensure vector type is the same\n+    if (!is_StoreVector() || as_StoreVector()->vect_type() == mem->as_LoadVector()->vect_type()) {\n+      result = mem;\n+    }\n@@ -3515,22 +3518,33 @@\n-    \/\/ Handle StoreVector with offsets and masks\n-    \/\/ Ensure offsets match\n-    if (is_StoreVectorScatter()) {\n-      const Node* offsets = as_StoreVectorScatter()->in(StoreVectorScatterNode::Offsets);\n-      if (mem->is_StoreVectorScatter() && offsets->eqv_uncast(mem->as_StoreVectorScatter()->in(StoreVectorScatterNode::Offsets))) {\n-        result = mem;\n-      }\n-    \/\/ Ensure masks match\n-    } else if (is_StoreVectorMasked()) {\n-      const Node* mask = as_StoreVectorMasked()->in(StoreVectorMaskedNode::Mask);\n-      if (mem->is_StoreVectorMasked() && mask->eqv_uncast(mem->as_StoreVectorMasked()->in(StoreVectorMaskedNode::Mask))) {\n-        result = mem;\n-      }\n-    \/\/ Ensure offsets and masks match\n-    } else if (is_StoreVectorScatterMasked()) {\n-      const StoreVectorScatterMaskedNode* stv = as_StoreVectorScatterMasked();\n-      const Node* offsets = stv->in(StoreVectorScatterMaskedNode::Offsets);\n-      const Node* mask = stv->in(StoreVectorScatterMaskedNode::Mask);\n-      if (mem->is_StoreVectorScatterMasked()) {\n-        const StoreVectorScatterMaskedNode* svgm = mem->as_StoreVectorScatterMasked();\n-        if (offsets->eqv_uncast(svgm->in(StoreVectorScatterMaskedNode::Offsets)) &&\n-          mask->eqv_uncast(svgm->in(StoreVectorScatterMaskedNode::Mask))) {\n+    \/\/ Not a vector\n+    if (!is_StoreVector()) {\n+      result = mem;\n+    } else {\n+      \/\/ Ensure that vector types match\n+      const TypeVect* vect_type = as_StoreVector()->vect_type();\n+      const TypeVect* mem_vect_type = mem->as_StoreVector()->vect_type();\n+      if (vect_type == mem_vect_type) {\n+        \/\/ Handle StoreVector with offsets and masks\n+        \/\/ Ensure offsets match\n+        if (is_StoreVectorScatter()) {\n+          const Node* offsets = as_StoreVectorScatter()->in(StoreVectorScatterNode::Offsets);\n+          if (offsets->eqv_uncast(mem->as_StoreVectorScatter()->in(StoreVectorScatterNode::Offsets))) {\n+            result = mem;\n+          }\n+        \/\/ Ensure masks match\n+        } else if (is_StoreVectorMasked()) {\n+          const Node* mask = as_StoreVectorMasked()->in(StoreVectorMaskedNode::Mask);\n+          if (mask->eqv_uncast(mem->as_StoreVectorMasked()->in(StoreVectorMaskedNode::Mask))) {\n+            result = mem;\n+          }\n+        \/\/ Ensure offsets and masks match\n+        } else if (is_StoreVectorScatterMasked()) {\n+          const StoreVectorScatterMaskedNode* stv = as_StoreVectorScatterMasked();\n+          const Node* offsets = stv->in(StoreVectorScatterMaskedNode::Offsets);\n+          const Node* mask = stv->in(StoreVectorScatterMaskedNode::Mask);\n+          const StoreVectorScatterMaskedNode* svgm = mem->as_StoreVectorScatterMasked();\n+          if (offsets->eqv_uncast(svgm->in(StoreVectorScatterMaskedNode::Offsets)) &&\n+            mask->eqv_uncast(svgm->in(StoreVectorScatterMaskedNode::Mask))) {\n+            result = mem;\n+          }\n+        \/\/ Regular store (no offsets or mask)\n+        } else {\n@@ -3540,3 +3554,0 @@\n-    \/\/ Regular store (no offsets or mask)\n-    } else {\n-      result = mem;\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":37,"deletions":26,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -916,1 +916,1 @@\n-    return Op_LoadVectorGather;\n+    return -1;\n@@ -1020,1 +1020,1 @@\n-    return Op_LoadVectorMasked;\n+    return -1;\n@@ -1050,1 +1050,1 @@\n-    return Op_LoadVectorGatherMasked;\n+    return -1;\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}