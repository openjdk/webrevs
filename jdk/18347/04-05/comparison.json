{"files":[{"patch":"@@ -69,0 +69,1 @@\n+    private static final int[] duplicateLongOffsets = new int[L_SPECIES.length()];\n@@ -71,0 +72,1 @@\n+    private static final int[] duplicateIntOffsets = new int[I_SPECIES.length()];\n@@ -73,0 +75,1 @@\n+    private static final int[] duplicateDoubleOffsets = new int[D_SPECIES.length()];\n@@ -75,0 +78,1 @@\n+    private static final int[] duplicateFloatOffsets = new int[F_SPECIES.length()];\n@@ -102,0 +106,1 @@\n+            duplicateLongOffsets[i] = longOffsets[i] \/ 2;\n@@ -114,0 +119,1 @@\n+            duplicateIntOffsets[i] = intOffsets[i] \/ 2;\n@@ -117,1 +123,0 @@\n-\n@@ -127,0 +132,1 @@\n+            duplicateDoubleOffsets[i] = doubleOffsets[i] \/ 2;\n@@ -139,0 +145,1 @@\n+            duplicateFloatOffsets[i] = floatOffsets[i] \/ 2;\n@@ -822,0 +829,86 @@\n+    \/\/ LOAD - STORE tests\n+\n+    \/\/ LongVector tests\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testLongVectorLoadGatherStoreScatterDuplicateOffsetsVector() {\n+        long[] res = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0, duplicateLongOffsets, 0);\n+        LongVector res2 = LongVector.fromArray(L_SPECIES, res, 0, duplicateLongOffsets, 0);\n+        Asserts.assertNotEquals(res2, longVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testLongVectorStoreLoadMaskedVector() {\n+        long[] res = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0, longVectorMask);\n+        LongVector res2 = LongVector.fromArray(L_SPECIES, res, 0, longVectorMask);\n+        Asserts.assertNotEquals(res2, longVector);\n+    }\n+\n+\n+    \/\/ IntVector tests\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testIntVectorLoadGatherStoreScatterDuplicateOffsetsVector() {\n+        int[] res = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0, duplicateIntOffsets, 0);\n+        IntVector res2 = IntVector.fromArray(I_SPECIES, res, 0, duplicateIntOffsets, 0);\n+        Asserts.assertNotEquals(res2, intVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testIntVectorStoreLoadMaskedVector() {\n+        int[] res = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0, intVectorMask);\n+        IntVector res2 = IntVector.fromArray(I_SPECIES, res, 0, intVectorMask);\n+        Asserts.assertNotEquals(res2, intVector);\n+    }\n+\n+\n+    \/\/ DoubleVector tests\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testDoubleVectorLoadGatherStoreScatterDuplicateOffsetsVector() {\n+        double[] res = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0, duplicateDoubleOffsets, 0);\n+        DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, res, 0, duplicateDoubleOffsets, 0);\n+        Asserts.assertNotEquals(res2, doubleVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testDoubleVectorStoreLoadMaskedVector() {\n+        double[] res = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0, doubleVectorMask);\n+        DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, res, 0, doubleVectorMask);\n+        Asserts.assertNotEquals(res2, doubleVector);\n+    }\n+\n+\n+    \/\/ FloatVector tests\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testFloatVectorLoadGatherStoreScatterDuplicateOffsetsVector() {\n+        float[] res = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0, duplicateFloatOffsets, 0);\n+        FloatVector res2 = FloatVector.fromArray(F_SPECIES, res, 0, duplicateFloatOffsets, 0);\n+        Asserts.assertNotEquals(res2, floatVector);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\", IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testFloatVectorStoreLoadMaskedVector() {\n+        float[] res = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0, floatVectorMask);\n+        FloatVector res2 = FloatVector.fromArray(F_SPECIES, res, 0, floatVectorMask);\n+        Asserts.assertNotEquals(res2, floatVector);\n+    }\n+\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorGatherMaskFoldingTest.java","additions":94,"deletions":1,"binary":false,"changes":95,"status":"modified"}]}