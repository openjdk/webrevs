{"files":[{"patch":"@@ -1166,1 +1166,1 @@\n-      \/\/ LoadVector\/StoreVector needs additional check to ensure the types match.\n+      \/\/ LoadVector\/StoreVector need additional checks\n@@ -1168,0 +1168,1 @@\n+        \/\/ Ensure that types match\n@@ -1173,0 +1174,25 @@\n+        \/\/ Ensure offsets match\n+        if (st->is_StoreVectorScatter()) {\n+          const Node* offsets = st->as_StoreVectorScatter()->in(StoreVectorScatterNode::Offsets);\n+          if (!is_LoadVectorGather() || !offsets->eqv_uncast(as_LoadVectorGather()->in(LoadVectorGatherNode::Offsets))) {\n+            return nullptr;\n+          }\n+        \/\/ Ensure masks match\n+        } else if (st->is_StoreVectorMasked()) {\n+          const Node* mask = st->as_StoreVectorMasked()->in(StoreVectorMaskedNode::Mask);\n+          if (!is_LoadVectorMasked() || !mask->eqv_uncast(as_LoadVectorMasked()->in(LoadVectorMaskedNode::Mask))) {\n+            return nullptr;\n+          }\n+        \/\/ Ensure offsets and masks match\n+        } else if (st->is_StoreVectorScatterMasked()) {\n+          const StoreVectorScatterMaskedNode* stv = st->as_StoreVectorScatterMasked();\n+          const Node* offsets = stv->in(StoreVectorScatterMaskedNode::Offsets);\n+          const Node* mask = stv->in(StoreVectorScatterMaskedNode::Mask);\n+          if (!is_LoadVectorGatherMasked() ||\n+              !offsets->eqv_uncast(as_LoadVectorGatherMasked()->in(LoadVectorGatherMaskedNode::Offsets)) ||\n+              !mask->eqv_uncast(as_LoadVectorGatherMasked()->in(LoadVectorGatherMaskedNode::Mask))) {\n+            return nullptr;\n+          }\n+        } else {\n+          return nullptr;\n+        }\n@@ -2804,1 +2830,30 @@\n-    result = mem;\n+        \/\/ Handle StoreVector with offsets and masks\n+        \/\/ Ensure offsets match\n+        if (is_StoreVectorScatter()) {\n+          const Node* offsets_store = as_StoreVectorScatter()->in(StoreVectorScatterNode::Offsets);\n+          const Node* offsets_load = val->as_LoadVectorGather()->in(LoadVectorGatherNode::Offsets);\n+          if (offsets_store->eqv_uncast(offsets_load)) {\n+            result = mem;\n+          }\n+        \/\/ Ensure masks match\n+        } else if (is_StoreVectorMasked()) {\n+          const Node* mask = as_StoreVectorMasked()->in(StoreVectorMaskedNode::Mask);\n+          if (val->is_LoadVectorMasked() && mask->eqv_uncast(val->as_LoadVectorMasked()->in(LoadVectorMaskedNode::Mask))) {\n+            result = mem;\n+          }\n+        \/\/ Ensure offsets and masks match\n+        } else if (is_StoreVectorScatterMasked()) {\n+          const StoreVectorScatterMaskedNode* stv = as_StoreVectorScatterMasked();\n+          const Node* offsets = stv->in(StoreVectorScatterMaskedNode::Offsets);\n+          const Node* mask = stv->in(StoreVectorScatterMaskedNode::Mask);\n+          if (val->is_LoadVectorGatherMasked()) {\n+            const LoadVectorGatherMaskedNode* lvgm = val->as_LoadVectorGatherMasked();\n+            if (offsets->eqv_uncast(lvgm->in(LoadVectorGatherMaskedNode::Offsets)) &&\n+              mask->eqv_uncast(lvgm->in(LoadVectorGatherMaskedNode::Mask))) {\n+              result = mem;\n+            }\n+          }\n+        \/\/ Regular store (no offsets or mask)\n+        } else {\n+          result = mem;\n+        }\n@@ -2813,1 +2868,29 @@\n-    result = mem;\n+    \/\/ Handle StoreVector with offsets and masks\n+    \/\/ Ensure offsets match\n+    if (is_StoreVectorScatter()) {\n+      const Node* offsets = as_StoreVectorScatter()->in(StoreVectorScatterNode::Offsets);\n+      if (mem->is_StoreVectorScatter() && offsets->eqv_uncast(mem->as_StoreVectorScatter()->in(StoreVectorScatterNode::Offsets))) {\n+        result = mem;\n+      }\n+    \/\/ Ensure masks match\n+    } else if (is_StoreVectorMasked()) {\n+      const Node* mask = as_StoreVectorMasked()->in(StoreVectorMaskedNode::Mask);\n+      if (mem->is_StoreVectorMasked() && mask->eqv_uncast(mem->as_StoreVectorMasked()->in(StoreVectorMaskedNode::Mask))) {\n+        result = mem;\n+      }\n+    \/\/ Ensure offsets and masks match\n+    } else if (is_StoreVectorScatterMasked()) {\n+      const StoreVectorScatterMaskedNode* stv = as_StoreVectorScatterMasked();\n+      const Node* offsets = stv->in(StoreVectorScatterMaskedNode::Offsets);\n+      const Node* mask = stv->in(StoreVectorScatterMaskedNode::Mask);\n+      if (mem->is_StoreVectorScatterMasked()) {\n+        const StoreVectorScatterMaskedNode* svgm = mem->as_StoreVectorScatterMasked();\n+        if (offsets->eqv_uncast(svgm->in(StoreVectorScatterMaskedNode::Offsets)) &&\n+          mask->eqv_uncast(svgm->in(StoreVectorScatterMaskedNode::Mask))) {\n+          result = mem;\n+        }\n+      }\n+    \/\/ Regular store (no offsets or mask)\n+    } else {\n+      result = mem;\n+    }\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":86,"deletions":3,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -179,0 +179,1 @@\n+class LoadVectorGatherMaskedNode;\n@@ -181,0 +182,1 @@\n+class StoreVectorScatterMaskedNode;\n@@ -984,0 +986,2 @@\n+  DEFINE_CLASS_QUERY(LoadVectorMasked)\n+  DEFINE_CLASS_QUERY(LoadVectorGatherMasked)\n@@ -986,0 +990,2 @@\n+  DEFINE_CLASS_QUERY(StoreVectorMasked)\n+  DEFINE_CLASS_QUERY(StoreVectorScatterMasked)\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -893,0 +893,1 @@\n+  enum { Offsets = 3 };\n@@ -950,0 +951,1 @@\n+   enum { Offsets = 4 };\n@@ -967,0 +969,1 @@\n+  enum { Mask = 4 };\n@@ -986,0 +989,1 @@\n+  enum { Mask = 3 };\n@@ -1006,0 +1010,3 @@\n+  enum { Offsets = 3,\n+         Mask\n+  };\n@@ -1026,0 +1033,3 @@\n+   enum { Offsets = 4,\n+          Mask\n+   };\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -758,0 +758,5 @@\n+    public static final String LOAD_VECTOR_MASKED = PREFIX + \"LOAD_VECTOR_MASKED\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(LOAD_VECTOR_MASKED, \"LoadVectorMasked\");\n+    }\n+\n@@ -1427,0 +1432,5 @@\n+    public static final String STORE_VECTOR_MASKED = PREFIX + \"STORE_VECTOR_MASKED\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(STORE_VECTOR_MASKED, \"StoreVectorMasked\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,897 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi;\n+\n+import compiler.lib.ir_framework.*;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.incubator.vector.*;\n+import java.util.Arrays;\n+\n+\/**\n+ * @test\n+ * @bug 8325520\n+ * @library \/test\/lib \/\n+ * @summary Don't allow folding of Load\/Store vectors when using incompatible indices or masks\n+ * @modules jdk.incubator.vector\n+ *\n+ * @run driver compiler.vectorapi.VectorGatherMaskFoldingTest\n+ *\/\n+\n+public class VectorGatherMaskFoldingTest {\n+    \/\/ Species\n+    private static final VectorSpecies<Long> L_SPECIES = LongVector.SPECIES_MAX;\n+    private static final VectorSpecies<Integer> I_SPECIES = IntVector.SPECIES_MAX;\n+    private static final VectorSpecies<Float> F_SPECIES = FloatVector.SPECIES_MAX;\n+    private static final VectorSpecies<Double> D_SPECIES = DoubleVector.SPECIES_MAX;\n+    \/\/ Vectors\n+    private static final LongVector longVector;\n+    private static final LongVector longVector2;\n+    private static final IntVector intVector;\n+    private static final IntVector intVector2;\n+    private static final DoubleVector doubleVector;\n+    private static final DoubleVector doubleVector2;\n+    private static final FloatVector floatVector;\n+    private static final FloatVector floatVector2;\n+    \/\/ Arrays\n+    private static final long[] longArray = new long[L_SPECIES.length()];\n+    private static final long[] longArray2 = new long[L_SPECIES.length()];\n+    private static final int[] intArray = new int[I_SPECIES.length()];\n+    private static final int[] intArray2 = new int[I_SPECIES.length()];\n+    private static final double[] doubleArray = new double[D_SPECIES.length()];\n+    private static final double[] doubleArray2 = new double[D_SPECIES.length()];\n+    private static final float[] floatArray = new float[F_SPECIES.length()];\n+    private static final float[] floatArray2 = new float[F_SPECIES.length()];\n+    \/\/ Offsets\n+    private static final int[] longOffsets = new int[L_SPECIES.length()];\n+    private static final int[] longOffsets2 = new int[L_SPECIES.length()];\n+    private static final int[] intOffsets = new int[I_SPECIES.length()];\n+    private static final int[] intOffsets2 = new int[I_SPECIES.length()];\n+    private static final int[] doubleOffsets = new int[D_SPECIES.length()];\n+    private static final int[] doubleOffsets2 = new int[D_SPECIES.length()];\n+    private static final int[] floatOffsets = new int[F_SPECIES.length()];\n+    private static final int[] floatOffsets2 = new int[F_SPECIES.length()];\n+    \/\/ Masks\n+    private static final boolean[] longMask = new boolean[L_SPECIES.length()];\n+    private static final boolean[] longMask2 = new boolean[L_SPECIES.length()];\n+    private static final boolean[] intMask = new boolean[I_SPECIES.length()];\n+    private static final boolean[] intMask2 = new boolean[I_SPECIES.length()];\n+    private static final boolean[] doubleMask = new boolean[D_SPECIES.length()];\n+    private static final boolean[] doubleMask2 = new boolean[D_SPECIES.length()];\n+    private static final boolean[] floatMask = new boolean[F_SPECIES.length()];\n+    private static final boolean[] floatMask2 = new boolean[F_SPECIES.length()];\n+    private static final VectorMask<Long> longVectorMask;\n+    private static final VectorMask<Long> longVectorMask2;\n+    private static final VectorMask<Integer> intVectorMask;\n+    private static final VectorMask<Integer> intVectorMask2;\n+    private static final VectorMask<Double> doubleVectorMask;\n+    private static final VectorMask<Double> doubleVectorMask2;\n+    private static final VectorMask<Float> floatVectorMask;\n+    private static final VectorMask<Float> floatVectorMask2;\n+\n+    \/\/ Filling vectors\/offsets\/masks\n+    static {\n+        for (int i = 0; i < L_SPECIES.length(); i++) {\n+            longArray[i] = i + 1;\n+            longArray2[i] = L_SPECIES.length() - i + 1;\n+            longMask[i] = i % 2 == 0;\n+            longMask2[i] = i >= L_SPECIES.length() \/ 2;\n+            longOffsets[i] = (i + L_SPECIES.length() \/ 2) % L_SPECIES.length();\n+            longOffsets2[i] = (L_SPECIES.length() - i) % L_SPECIES.length();\n+        }\n+        longVector = LongVector.fromArray(L_SPECIES, longArray, 0);\n+        longVector2 = LongVector.fromArray(L_SPECIES, longArray2, 0);\n+        longVectorMask = VectorMask.fromArray(L_SPECIES, longMask, 0);\n+        longVectorMask2 = VectorMask.fromArray(L_SPECIES, longMask2, 0);\n+        for (int i = 0; i < I_SPECIES.length(); i++) {\n+            intArray[i] = i + 1;\n+            intArray2[i] = I_SPECIES.length() - i + 1;\n+            intMask[i] = i % 2 == 0;\n+            intMask2[i] = i >= I_SPECIES.length() \/ 2;\n+            intOffsets[i] = (i + I_SPECIES.length() \/ 2) % I_SPECIES.length();\n+            intOffsets2[i] = (I_SPECIES.length() - i) % I_SPECIES.length();\n+        }\n+        intVector = IntVector.fromArray(I_SPECIES, intArray, 0);\n+        intVector2 = IntVector.fromArray(I_SPECIES, intArray2, 0);\n+\n+        intVectorMask = VectorMask.fromArray(I_SPECIES, intMask, 0);\n+        intVectorMask2 = VectorMask.fromArray(I_SPECIES, intMask2, 0);\n+        for (int i = 0; i < D_SPECIES.length(); i++) {\n+            doubleArray[i] = (double) i + 1.0;\n+            doubleArray2[i] = (double) (D_SPECIES.length() - i) + 1.0;\n+            doubleMask[i] = i % 2 == 0;\n+            doubleMask2[i] = i >= D_SPECIES.length() \/ 2;\n+            doubleOffsets[i] = (i + D_SPECIES.length() \/ 2) % D_SPECIES.length();\n+            doubleOffsets2[i] = (D_SPECIES.length() - i) % D_SPECIES.length();\n+        }\n+        doubleVector = DoubleVector.fromArray(D_SPECIES, doubleArray, 0);\n+        doubleVector2 = DoubleVector.fromArray(D_SPECIES, doubleArray2, 0);\n+        doubleVectorMask = VectorMask.fromArray(D_SPECIES, doubleMask, 0);\n+        doubleVectorMask2 = VectorMask.fromArray(D_SPECIES, doubleMask2, 0);\n+        for (int i = 0; i < F_SPECIES.length(); i++) {\n+            floatArray[i] = i + 1.0f;\n+            floatArray2[i] = F_SPECIES.length() - i + 1.0f;\n+            floatMask[i] = i % 2 == 0;\n+            floatMask2[i] = i >= F_SPECIES.length() \/ 2;\n+            floatOffsets[i] = (i + F_SPECIES.length() \/ 2) % F_SPECIES.length();\n+            floatOffsets2[i] = (F_SPECIES.length() - i) % F_SPECIES.length();\n+        }\n+        floatVector = FloatVector.fromArray(F_SPECIES, floatArray, 0);\n+        floatVector2 = FloatVector.fromArray(F_SPECIES, floatArray2, 0);\n+        floatVectorMask = VectorMask.fromArray(F_SPECIES, floatMask, 0);\n+        floatVectorMask2 = VectorMask.fromArray(F_SPECIES, floatMask2, 0);\n+    }\n+\n+    \/\/ LOAD TESTS\n+\n+    \/\/ LongVector tests\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorLoadGatherNotEqualArray() {\n+        LongVector res = LongVector.fromArray(L_SPECIES, longArray, 0, longOffsets, 0);\n+        LongVector res2 = LongVector.fromArray(L_SPECIES, longArray2, 0, longOffsets, 0);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorLoadGatherNotEqualOffsets() {\n+        LongVector res = LongVector.fromArray(L_SPECIES, longArray, 0, longOffsets, 0);\n+        LongVector res2 = LongVector.fromArray(L_SPECIES, longArray, 0, longOffsets2, 0);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testOneLongVectorLoadGather() {\n+        LongVector res = LongVector.fromArray(L_SPECIES, longArray, 0);\n+        LongVector res2 = LongVector.fromArray(L_SPECIES, longArray, 0, longOffsets, 0);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorLoadGatherEquals() {\n+        LongVector res = LongVector.fromArray(L_SPECIES, longArray, 0, longOffsets, 0);\n+        LongVector res2 = LongVector.fromArray(L_SPECIES, longArray, 0, longOffsets, 0);\n+        Asserts.assertEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorLoadMaskedEquals() {\n+        LongVector res = LongVector.fromArray(L_SPECIES, longArray, 0, longVectorMask);\n+        LongVector res2 = LongVector.fromArray(L_SPECIES, longArray, 0, longVectorMask);\n+        Asserts.assertEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorLoadMaskedNotEqualMask() {\n+        LongVector res = LongVector.fromArray(L_SPECIES, longArray, 0, longVectorMask);\n+        LongVector res2 = LongVector.fromArray(L_SPECIES, longArray, 0, longVectorMask2);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorLoadGatherMaskedEquals() {\n+        LongVector res = LongVector.fromArray(L_SPECIES, longArray, 0, longOffsets, 0, longVectorMask);\n+        LongVector res2 = LongVector.fromArray(L_SPECIES, longArray, 0, longOffsets, 0, longVectorMask);\n+        Asserts.assertEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorLoadGatherMaskedNotEqualMask() {\n+        LongVector res = LongVector.fromArray(L_SPECIES, longArray, 0, longOffsets, 0, longVectorMask);\n+        LongVector res2 = LongVector.fromArray(L_SPECIES, longArray, 0, longOffsets, 0, longVectorMask2);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorLoadGatherMaskedNotEqualOffsets() {\n+        LongVector res = LongVector.fromArray(L_SPECIES, longArray, 0, longOffsets, 0, longVectorMask);\n+        LongVector res2 = LongVector.fromArray(L_SPECIES, longArray, 0, longOffsets2, 0, longVectorMask);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+\n+    \/\/ IntVector tests\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorLoadGatherNotEqualArray() {\n+        IntVector res = IntVector.fromArray(I_SPECIES, intArray, 0, intOffsets, 0);\n+        IntVector res2 = IntVector.fromArray(I_SPECIES, intArray2, 0, intOffsets, 0);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorLoadGatherNotEqualOffsets() {\n+        IntVector res = IntVector.fromArray(I_SPECIES, intArray, 0, intOffsets, 0);\n+        IntVector res2 = IntVector.fromArray(I_SPECIES, intArray, 0, intOffsets2, 0);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_I, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testOneIntVectorLoadGather() {\n+        IntVector res = IntVector.fromArray(I_SPECIES, intArray, 0);\n+        IntVector res2 = IntVector.fromArray(I_SPECIES, intArray, 0, intOffsets, 0);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorLoadGatherEquals() {\n+        IntVector res = IntVector.fromArray(I_SPECIES, intArray, 0, intOffsets, 0);\n+        IntVector res2 = IntVector.fromArray(I_SPECIES, intArray, 0, intOffsets, 0);\n+        Asserts.assertEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorLoadMaskedEquals() {\n+        IntVector res = IntVector.fromArray(I_SPECIES, intArray, 0, intVectorMask);\n+        IntVector res2 = IntVector.fromArray(I_SPECIES, intArray, 0, intVectorMask);\n+        Asserts.assertEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorLoadMaskedNotEqualMask() {\n+        IntVector res = IntVector.fromArray(I_SPECIES, intArray, 0, intVectorMask);\n+        IntVector res2 = IntVector.fromArray(I_SPECIES, intArray, 0, intVectorMask2);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorLoadGatherMaskedEquals() {\n+        IntVector res = IntVector.fromArray(I_SPECIES, intArray, 0, intOffsets, 0, intVectorMask);\n+        IntVector res2 = IntVector.fromArray(I_SPECIES, intArray, 0, intOffsets, 0, intVectorMask);\n+        Asserts.assertEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorLoadGatherMaskedNotEqualMask() {\n+        IntVector res = IntVector.fromArray(I_SPECIES, intArray, 0, intOffsets, 0, intVectorMask);\n+        IntVector res2 = IntVector.fromArray(I_SPECIES, intArray, 0, intOffsets, 0, intVectorMask2);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorLoadGatherMaskedNotEqualOffsets() {\n+        IntVector res = IntVector.fromArray(I_SPECIES, intArray, 0, intOffsets, 0, intVectorMask);\n+        IntVector res2 = IntVector.fromArray(I_SPECIES, intArray, 0, intOffsets2, 0, intVectorMask);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+\n+    \/\/ DoubleVector tests\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorLoadGatherNotEqualArray() {\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleOffsets, 0);\n+        DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, doubleArray2, 0, doubleOffsets, 0);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorLoadGatherNotEqualOffsets() {\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleOffsets, 0);\n+        DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleOffsets2, 0);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_D, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testOneDoubleVectorLoadGather() {\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, doubleArray, 0);\n+        DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleOffsets, 0);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorLoadGatherEquals() {\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleOffsets, 0);\n+        DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleOffsets, 0);\n+        Asserts.assertEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorLoadMaskedEquals() {\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleVectorMask);\n+        DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleVectorMask);\n+        Asserts.assertEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorLoadMaskedNotEqualMask() {\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleVectorMask);\n+        DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleVectorMask2);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorLoadGatherMaskedEquals() {\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleOffsets, 0, doubleVectorMask);\n+        DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleOffsets, 0, doubleVectorMask);\n+        Asserts.assertEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorLoadGatherMaskedNotEqualMask() {\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleOffsets, 0, doubleVectorMask);\n+        DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleOffsets, 0, doubleVectorMask2);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorLoadGatherMaskedNotEqualOffsets() {\n+        DoubleVector res = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleOffsets, 0, doubleVectorMask);\n+        DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, doubleArray, 0, doubleOffsets2, 0, doubleVectorMask);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+\n+    \/\/ FloatVector tests\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorLoadGatherNotEqualArray() {\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatOffsets, 0);\n+        FloatVector res2 = FloatVector.fromArray(F_SPECIES, floatArray2, 0, floatOffsets, 0);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorLoadGatherNotEqualOffsets() {\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatOffsets, 0);\n+        FloatVector res2 = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatOffsets2, 0);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_F, \">= 1\", IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testOneFloatVectorLoadGather() {\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, floatArray, 0);\n+        FloatVector res2 = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatOffsets, 0);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorLoadGatherEquals() {\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatOffsets, 0);\n+        FloatVector res2 = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatOffsets, 0);\n+        Asserts.assertEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorLoadMaskedEquals() {\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatVectorMask);\n+        FloatVector res2 = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatVectorMask);\n+        Asserts.assertEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorLoadMaskedNotEqualMask() {\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatVectorMask);\n+        FloatVector res2 = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatVectorMask2);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorLoadGatherMaskedEquals() {\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatOffsets, 0, floatVectorMask);\n+        FloatVector res2 = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatOffsets, 0, floatVectorMask);\n+        Asserts.assertEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorLoadGatherMaskedNotEqualMask() {\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatOffsets, 0, floatVectorMask);\n+        FloatVector res2 = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatOffsets, 0, floatVectorMask2);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.LOAD_VECTOR_GATHER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorLoadGatherMaskedNotEqualOffsets() {\n+        FloatVector res = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatOffsets, 0, floatVectorMask);\n+        FloatVector res2 = FloatVector.fromArray(F_SPECIES, floatArray, 0, floatOffsets2, 0, floatVectorMask);\n+        Asserts.assertNotEquals(res, res2);\n+    }\n+\n+\n+    \/\/ STORE TESTS\n+\n+    \/\/ LongVector tests\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorStoreScatterNotEqualVector() {\n+        long[] res = new long[L_SPECIES.length()];\n+        long[] res2 = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0, longOffsets, 0);\n+        longVector2.intoArray(res2, 0, longOffsets, 0);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorStoreScatterNotEqualOffsets() {\n+        long[] res = new long[L_SPECIES.length()];\n+        long[] res2 = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0, longOffsets, 0);\n+        longVector.intoArray(res2, 0, longOffsets2, 0);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.STORE_VECTOR_SCATTER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneLongVectorStoreScatter() {\n+        long[] res = new long[L_SPECIES.length()];\n+        long[] res2 = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0);\n+        longVector.intoArray(res2, 0, longOffsets, 0);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorStoreScatterEquals() {\n+        long[] res = new long[L_SPECIES.length()];\n+        long[] res2 = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0, longOffsets, 0);\n+        longVector.intoArray(res2, 0, longOffsets, 0);\n+        Asserts.assertTrue(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorStoreMaskedEquals() {\n+        long[] res = new long[L_SPECIES.length()];\n+        long[] res2 = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0, longVectorMask);\n+        longVector.intoArray(res2, 0, longVectorMask);\n+        Asserts.assertTrue(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorStoreMaskedNotEqualMask() {\n+        long[] res = new long[L_SPECIES.length()];\n+        long[] res2 = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0, longVectorMask);\n+        longVector.intoArray(res2, 0, longVectorMask2);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorStoreScatterMaskedEquals() {\n+        long[] res = new long[L_SPECIES.length()];\n+        long[] res2 = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0, longOffsets, 0, longVectorMask);\n+        longVector.intoArray(res2, 0, longOffsets, 0, longVectorMask);\n+        Asserts.assertTrue(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorStoreScatterMaskedNotEqualMask() {\n+        long[] res = new long[L_SPECIES.length()];\n+        long[] res2 = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0, longOffsets, 0, longVectorMask);\n+        longVector.intoArray(res2, 0, longOffsets, 0, longVectorMask2);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoLongVectorStoreScatterMaskedNotEqualOffsets() {\n+        long[] res = new long[L_SPECIES.length()];\n+        long[] res2 = new long[L_SPECIES.length()];\n+        longVector.intoArray(res, 0, longOffsets, 0, longVectorMask);\n+        longVector.intoArray(res2, 0, longOffsets2, 0, longVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+\n+    \/\/ IntVector tests\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorStoreScatterNotEqualVector() {\n+        int[] res = new int[I_SPECIES.length()];\n+        int[] res2 = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0, intOffsets, 0);\n+        intVector2.intoArray(res2, 0, intOffsets, 0);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorStoreScatterNotEqualOffsets() {\n+        int[] res = new int[I_SPECIES.length()];\n+        int[] res2 = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0, intOffsets, 0);\n+        intVector.intoArray(res2, 0, intOffsets2, 0);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.STORE_VECTOR_SCATTER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneIntVectorStoreScatter() {\n+        int[] res = new int[I_SPECIES.length()];\n+        int[] res2 = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0);\n+        intVector.intoArray(res2, 0, intOffsets, 0);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorStoreScatterEquals() {\n+        int[] res = new int[I_SPECIES.length()];\n+        int[] res2 = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0, intOffsets, 0);\n+        intVector.intoArray(res2, 0, intOffsets, 0);\n+        Asserts.assertTrue(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorStoreMaskedEquals() {\n+        int[] res = new int[I_SPECIES.length()];\n+        int[] res2 = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0, intVectorMask);\n+        intVector.intoArray(res2, 0, intVectorMask);\n+        Asserts.assertTrue(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorStoreMaskedNotEqualMask() {\n+        int[] res = new int[I_SPECIES.length()];\n+        int[] res2 = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0, intVectorMask);\n+        intVector.intoArray(res2, 0, intVectorMask2);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorStoreScatterMaskedEquals() {\n+        int[] res = new int[I_SPECIES.length()];\n+        int[] res2 = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0, intOffsets, 0, intVectorMask);\n+        intVector.intoArray(res2, 0, intOffsets, 0, intVectorMask);\n+        Asserts.assertTrue(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorStoreScatterMaskedNotEqualMask() {\n+        int[] res = new int[I_SPECIES.length()];\n+        int[] res2 = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0, intOffsets, 0, intVectorMask);\n+        intVector.intoArray(res2, 0, intOffsets, 0, intVectorMask2);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoIntVectorStoreScatterMaskedNotEqualOffsets() {\n+        int[] res = new int[I_SPECIES.length()];\n+        int[] res2 = new int[I_SPECIES.length()];\n+        intVector.intoArray(res, 0, intOffsets, 0, intVectorMask);\n+        intVector.intoArray(res2, 0, intOffsets2, 0, intVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+\n+    \/\/ DoubleVector tests\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorStoreScatterNotEqualVector() {\n+        double[] res = new double[D_SPECIES.length()];\n+        double[] res2 = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0, doubleOffsets, 0);\n+        doubleVector2.intoArray(res2, 0, doubleOffsets, 0);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorStoreScatterNotEqualOffsets() {\n+        double[] res = new double[D_SPECIES.length()];\n+        double[] res2 = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0, doubleOffsets, 0);\n+        doubleVector.intoArray(res2, 0, doubleOffsets2, 0);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.STORE_VECTOR_SCATTER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneDoubleVectorStoreScatter() {\n+        double[] res = new double[D_SPECIES.length()];\n+        double[] res2 = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0);\n+        doubleVector.intoArray(res2, 0, doubleOffsets, 0);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorStoreScatterEquals() {\n+        double[] res = new double[D_SPECIES.length()];\n+        double[] res2 = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0, doubleOffsets, 0);\n+        doubleVector.intoArray(res2, 0, doubleOffsets, 0);\n+        Asserts.assertTrue(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorStoreMaskedEquals() {\n+        double[] res = new double[D_SPECIES.length()];\n+        double[] res2 = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0, doubleVectorMask);\n+        doubleVector.intoArray(res2, 0, doubleVectorMask);\n+        Asserts.assertTrue(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorStoreMaskedNotEqualMask() {\n+        double[] res = new double[D_SPECIES.length()];\n+        double[] res2 = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0, doubleVectorMask);\n+        doubleVector.intoArray(res2, 0, doubleVectorMask2);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorStoreScatterMaskedEquals() {\n+        double[] res = new double[D_SPECIES.length()];\n+        double[] res2 = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0, doubleOffsets, 0, doubleVectorMask);\n+        doubleVector.intoArray(res2, 0, doubleOffsets, 0, doubleVectorMask);\n+        Asserts.assertTrue(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorStoreScatterMaskedNotEqualMask() {\n+        double[] res = new double[D_SPECIES.length()];\n+        double[] res2 = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0, doubleOffsets, 0, doubleVectorMask);\n+        doubleVector.intoArray(res2, 0, doubleOffsets, 0, doubleVectorMask2);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoDoubleVectorStoreScatterMaskedNotEqualOffsets() {\n+        double[] res = new double[D_SPECIES.length()];\n+        double[] res2 = new double[D_SPECIES.length()];\n+        doubleVector.intoArray(res, 0, doubleOffsets, 0, doubleVectorMask);\n+        doubleVector.intoArray(res2, 0, doubleOffsets2, 0, doubleVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+\n+    \/\/ FloatVector tests\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorStoreScatterNotEqualVector() {\n+        float[] res = new float[F_SPECIES.length()];\n+        float[] res2 = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0, floatOffsets, 0);\n+        floatVector2.intoArray(res2, 0, floatOffsets, 0);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorStoreScatterNotEqualOffsets() {\n+        float[] res = new float[F_SPECIES.length()];\n+        float[] res2 = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0, floatOffsets, 0);\n+        floatVector.intoArray(res2, 0, floatOffsets2, 0);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR, \">= 1\", IRNode.STORE_VECTOR_SCATTER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testOneFloatVectorStoreScatter() {\n+        float[] res = new float[F_SPECIES.length()];\n+        float[] res2 = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0);\n+        floatVector.intoArray(res2, 0, floatOffsets, 0);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorStoreScatterEquals() {\n+        float[] res = new float[F_SPECIES.length()];\n+        float[] res2 = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0, floatOffsets, 0);\n+        floatVector.intoArray(res2, 0, floatOffsets, 0);\n+        Asserts.assertTrue(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorStoreMaskedEquals() {\n+        float[] res = new float[F_SPECIES.length()];\n+        float[] res2 = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0, floatVectorMask);\n+        floatVector.intoArray(res2, 0, floatVectorMask);\n+        Asserts.assertTrue(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorStoreMaskedNotEqualMask() {\n+        float[] res = new float[F_SPECIES.length()];\n+        float[] res2 = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0, floatVectorMask);\n+        floatVector.intoArray(res2, 0, floatVectorMask2);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER_MASKED, \">= 1\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorStoreScatterMaskedEquals() {\n+        float[] res = new float[F_SPECIES.length()];\n+        float[] res2 = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0, floatOffsets, 0, floatVectorMask);\n+        floatVector.intoArray(res2, 0, floatOffsets, 0, floatVectorMask);\n+        Asserts.assertTrue(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorStoreScatterMaskedNotEqualMask() {\n+        float[] res = new float[F_SPECIES.length()];\n+        float[] res2 = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0, floatOffsets, 0, floatVectorMask);\n+        floatVector.intoArray(res2, 0, floatOffsets, 0, floatVectorMask2);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.STORE_VECTOR_SCATTER_MASKED, \">= 2\" }, applyIfCPUFeatureOr = {\"avx512\", \"true\", \"sve\", \"true\"})\n+    public static void testTwoFloatVectorStoreScatterMaskedNotEqualOffsets() {\n+        float[] res = new float[F_SPECIES.length()];\n+        float[] res2 = new float[F_SPECIES.length()];\n+        floatVector.intoArray(res, 0, floatOffsets, 0, floatVectorMask);\n+        floatVector.intoArray(res2, 0, floatOffsets2, 0, floatVectorMask);\n+        Asserts.assertFalse(Arrays.equals(res, res2));\n+    }\n+\n+\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"--add-modules=jdk.incubator.vector\", \"-XX:+IncrementalInlineForceCleanup\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorGatherMaskFoldingTest.java","additions":897,"deletions":0,"binary":false,"changes":897,"status":"added"}]}