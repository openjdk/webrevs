{"files":[{"patch":"@@ -204,2 +204,1 @@\n-            PrettyWriter prettyWriter = new PrettyWriter(pw);\n-            prettyWriter.setShowIds(showIds);\n+            MetadataWriter metadataWriter = new MetadataWriter(pw, showIds);\n@@ -218,1 +217,1 @@\n-                            prettyWriter.printType(type);\n+                            metadataWriter.printType(type);\n@@ -222,1 +221,1 @@\n-                    prettyWriter.printType(type);\n+                    metadataWriter.printType(type);\n@@ -225,1 +224,1 @@\n-            prettyWriter.flush(true);\n+            metadataWriter.flush(true);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Metadata.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,172 @@\n+\/*\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.tool;\n+\n+import java.io.PrintWriter;\n+import java.util.List;\n+import java.util.StringJoiner;\n+import jdk.jfr.AnnotationElement;\n+import jdk.jfr.Name;\n+import jdk.jfr.ValueDescriptor;\n+import jdk.jfr.internal.Type;\n+import jdk.jfr.internal.PrivateAccess;\n+\n+\/**\n+* Print event metadata in a human-readable format.\n+*\/\n+final class MetadataWriter extends StructuredWriter {\n+    private final boolean showIds;\n+\n+    public MetadataWriter(PrintWriter p, boolean showIds) {\n+        super(p);\n+        this.showIds = showIds;\n+    }\n+\n+    public void printType(Type t) {\n+        if (showIds) {\n+            print(\"\/\/ id: \");\n+            println(String.valueOf(t.getId()));\n+        }\n+        int commentIndex = t.getName().length() + 10;\n+        String typeName = t.getName();\n+        int index = typeName.lastIndexOf(\".\");\n+        if (index != -1) {\n+            println(\"@Name(\\\"\" + typeName + \"\\\")\");\n+        }\n+        printAnnotations(commentIndex, t.getAnnotationElements());\n+        print(\"class \" + typeName.substring(index + 1));\n+        String superType = t.getSuperType();\n+        if (superType != null) {\n+            print(\" extends \" + superType);\n+        }\n+        println(\" {\");\n+        indent();\n+        boolean first = true;\n+        for (ValueDescriptor v : t.getFields()) {\n+            printField(commentIndex, v, first);\n+            first = false;\n+        }\n+        retract();\n+        println(\"}\");\n+        println();\n+    }\n+\n+    private void printField(int commentIndex, ValueDescriptor v, boolean first) {\n+        if (!first) {\n+            println();\n+        }\n+        printAnnotations(commentIndex, v.getAnnotationElements());\n+        printIndent();\n+        Type vType = PrivateAccess.getInstance().getType(v);\n+        if (Type.SUPER_TYPE_SETTING.equals(vType.getSuperType())) {\n+            print(\"static \");\n+        }\n+        print(makeSimpleType(v.getTypeName()));\n+        if (v.isArray()) {\n+            print(\"[]\");\n+        }\n+        print(\" \");\n+        print(v.getName());\n+        print(\";\");\n+        printCommentRef(commentIndex, v.getTypeId());\n+    }\n+\n+    private void printCommentRef(int commentIndex, long typeId) {\n+        if (showIds) {\n+            int column = getColumn();\n+            if (column > commentIndex) {\n+                print(\"  \");\n+            } else {\n+                while (column < commentIndex) {\n+                    print(\" \");\n+                    column++;\n+                }\n+            }\n+            println(\" \/\/ id=\" + typeId);\n+        } else {\n+            println();\n+        }\n+    }\n+\n+    private void printAnnotations(int commentIndex, List<AnnotationElement> annotations) {\n+        for (AnnotationElement a : annotations) {\n+            if (!Name.class.getName().equals(a.getTypeName())) {\n+                printIndent();\n+                print(\"@\");\n+                print(makeSimpleType(a.getTypeName()));\n+                List<ValueDescriptor> vs = a.getValueDescriptors();\n+                if (!vs.isEmpty()) {\n+                    printAnnotation(a);\n+                    printCommentRef(commentIndex, a.getTypeId());\n+                } else {\n+                    println();\n+                }\n+            }\n+        }\n+    }\n+\n+    private void printAnnotation(AnnotationElement a) {\n+        StringJoiner sj = new StringJoiner(\", \", \"(\", \")\");\n+        List<ValueDescriptor> vs = a.getValueDescriptors();\n+        for (ValueDescriptor v : vs) {\n+            Object o = a.getValue(v.getName());\n+            if (vs.size() == 1 && v.getName().equals(\"value\")) {\n+                sj.add(textify(o));\n+            } else {\n+                sj.add(v.getName() + \"=\" + textify(o));\n+            }\n+        }\n+        print(sj.toString());\n+    }\n+\n+    private String textify(Object o) {\n+        if (o.getClass().isArray()) {\n+            Object[] array = (Object[]) o;\n+            if (array.length == 1) {\n+                return quoteIfNeeded(array[0]);\n+            }\n+            StringJoiner s = new StringJoiner(\", \", \"{\", \"}\");\n+            for (Object ob : array) {\n+                s.add(quoteIfNeeded(ob));\n+            }\n+            return s.toString();\n+        } else {\n+            return quoteIfNeeded(o);\n+        }\n+    }\n+\n+    private String quoteIfNeeded(Object o) {\n+        if (o instanceof String) {\n+            return \"\\\"\" + o + \"\\\"\";\n+        } else {\n+            return String.valueOf(o);\n+        }\n+    }\n+\n+    private String makeSimpleType(String typeName) {\n+        int index = typeName.lastIndexOf(\".\");\n+        return typeName.substring(index + 1);\n+    }\n+}\n\\ No newline at end of file\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/MetadataWriter.java","additions":172,"deletions":0,"binary":false,"changes":172,"status":"added"},{"patch":"@@ -36,1 +36,0 @@\n-import jdk.jfr.AnnotationElement;\n@@ -40,1 +39,0 @@\n-import jdk.jfr.Name;\n@@ -51,1 +49,0 @@\n-import jdk.jfr.internal.PrivateAccess;\n@@ -66,1 +63,0 @@\n-    private boolean showIds;\n@@ -86,126 +82,0 @@\n-    public void printType(Type t) {\n-        if (showIds) {\n-            print(\"\/\/ id: \");\n-            println(String.valueOf(t.getId()));\n-        }\n-        int commentIndex = t.getName().length() + 10;\n-        String typeName = t.getName();\n-        int index = typeName.lastIndexOf(\".\");\n-        if (index != -1) {\n-            println(\"@Name(\\\"\" + typeName + \"\\\")\");\n-        }\n-        printAnnotations(commentIndex, t.getAnnotationElements());\n-        print(\"class \" + typeName.substring(index + 1));\n-        String superType = t.getSuperType();\n-        if (superType != null) {\n-            print(\" extends \" + superType);\n-        }\n-        println(\" {\");\n-        indent();\n-        boolean first = true;\n-        for (ValueDescriptor v : t.getFields()) {\n-            printField(commentIndex, v, first);\n-            first = false;\n-        }\n-        retract();\n-        println(\"}\");\n-        println();\n-    }\n-\n-    private void printField(int commentIndex, ValueDescriptor v, boolean first) {\n-        if (!first) {\n-            println();\n-        }\n-        printAnnotations(commentIndex, v.getAnnotationElements());\n-        printIndent();\n-        Type vType = PrivateAccess.getInstance().getType(v);\n-        if (Type.SUPER_TYPE_SETTING.equals(vType.getSuperType())) {\n-            print(\"static \");\n-        }\n-        print(makeSimpleType(v.getTypeName()));\n-        if (v.isArray()) {\n-            print(\"[]\");\n-        }\n-        print(\" \");\n-        print(v.getName());\n-        print(\";\");\n-        printCommentRef(commentIndex, v.getTypeId());\n-    }\n-\n-    private void printCommentRef(int commentIndex, long typeId) {\n-        if (showIds) {\n-            int column = getColumn();\n-            if (column > commentIndex) {\n-                print(\"  \");\n-            } else {\n-                while (column < commentIndex) {\n-                    print(\" \");\n-                    column++;\n-                }\n-            }\n-            println(\" \/\/ id=\" + typeId);\n-        } else {\n-            println();\n-        }\n-    }\n-\n-    private void printAnnotations(int commentIndex, List<AnnotationElement> annotations) {\n-        for (AnnotationElement a : annotations) {\n-            if (!Name.class.getName().equals(a.getTypeName())) {\n-                printIndent();\n-                print(\"@\");\n-                print(makeSimpleType(a.getTypeName()));\n-                List<ValueDescriptor> vs = a.getValueDescriptors();\n-                if (!vs.isEmpty()) {\n-                    printAnnotation(a);\n-                    printCommentRef(commentIndex, a.getTypeId());\n-                } else {\n-                    println();\n-                }\n-            }\n-        }\n-    }\n-\n-    private void printAnnotation(AnnotationElement a) {\n-        StringJoiner sj = new StringJoiner(\", \", \"(\", \")\");\n-        List<ValueDescriptor> vs = a.getValueDescriptors();\n-        for (ValueDescriptor v : vs) {\n-            Object o = a.getValue(v.getName());\n-            if (vs.size() == 1 && v.getName().equals(\"value\")) {\n-                sj.add(textify(o));\n-            } else {\n-                sj.add(v.getName() + \"=\" + textify(o));\n-            }\n-        }\n-        print(sj.toString());\n-    }\n-\n-    private String textify(Object o) {\n-        if (o.getClass().isArray()) {\n-            Object[] array = (Object[]) o;\n-            if (array.length == 1) {\n-                return quoteIfNeeded(array[0]);\n-            }\n-            StringJoiner s = new StringJoiner(\", \", \"{\", \"}\");\n-            for (Object ob : array) {\n-                s.add(quoteIfNeeded(ob));\n-            }\n-            return s.toString();\n-        } else {\n-            return quoteIfNeeded(o);\n-        }\n-    }\n-\n-    private String quoteIfNeeded(Object o) {\n-        if (o instanceof String) {\n-            return \"\\\"\" + o + \"\\\"\";\n-        } else {\n-            return String.valueOf(o);\n-        }\n-    }\n-\n-    private String makeSimpleType(String typeName) {\n-        int index = typeName.lastIndexOf(\".\");\n-        return typeName.substring(index + 1);\n-    }\n-\n@@ -607,4 +477,0 @@\n-\n-    public void setShowIds(boolean showIds) {\n-        this.showIds = showIds;\n-    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/PrettyWriter.java","additions":0,"deletions":134,"binary":false,"changes":134,"status":"modified"}]}