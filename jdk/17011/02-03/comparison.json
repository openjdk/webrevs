{"files":[{"patch":"@@ -226,1 +226,1 @@\n-JVM_VirtualThreadCriticalLock\n+JVM_VirtualThreadDisableSuspend\n","filename":"make\/data\/hotspot-symbols\/symbols-unix","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -600,1 +600,1 @@\n-  do_intrinsic(_notifyJvmtiVThreadCriticalLock, java_lang_VirtualThread, notifyJvmtiCriticalLock_name, bool_void_signature, F_RN) \\\n+  do_intrinsic(_notifyJvmtiVThreadDisableSuspend, java_lang_VirtualThread, notifyJvmtiDisableSuspend_name, bool_void_signature, F_RN) \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -424,1 +424,1 @@\n-  template(notifyJvmtiCriticalLock_name,              \"notifyJvmtiCriticalLock\")                  \\\n+  template(notifyJvmtiDisableSuspend_name,            \"notifyJvmtiDisableSuspend\")                \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1158,1 +1158,1 @@\n-JVM_VirtualThreadCriticalLock(JNIEnv* env, jobject vthread, jboolean enter);\n+JVM_VirtualThreadDisableSuspend(JNIEnv* env, jobject vthread, jboolean enter);\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -223,1 +223,1 @@\n-  JVMTI_ONLY(nonstatic_field(JavaThread,       _is_in_critical_section,                       bool))                                 \\\n+  JVMTI_ONLY(nonstatic_field(JavaThread,       _is_disable_suspend,                           bool))                                 \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -825,1 +825,1 @@\n-  case vmIntrinsics::_notifyJvmtiVThreadCriticalLock:\n+  case vmIntrinsics::_notifyJvmtiVThreadDisableSuspend:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -495,2 +495,2 @@\n-  case vmIntrinsics::_notifyJvmtiVThreadHideFrames: return inline_native_notify_jvmti_hide();\n-  case vmIntrinsics::_notifyJvmtiVThreadCriticalLock: return inline_native_notify_jvmti_sync();\n+  case vmIntrinsics::_notifyJvmtiVThreadHideFrames:     return inline_native_notify_jvmti_hide();\n+  case vmIntrinsics::_notifyJvmtiVThreadDisableSuspend: return inline_native_notify_jvmti_sync();\n@@ -2954,1 +2954,1 @@\n-\/\/ Always update the is_in_critical_section bit.\n+\/\/ Always update the is_disable_suspend bit.\n@@ -2962,1 +2962,1 @@\n-    \/\/ unconditionally update the is_in_critical_section bit in current JavaThread\n+    \/\/ unconditionally update the is_disable_suspend bit in current JavaThread\n@@ -2964,2 +2964,2 @@\n-    Node* arg = _gvn.transform(argument(1)); \/\/ argument for critical section notification\n-    Node* addr = basic_plus_adr(thread, in_bytes(JavaThread::is_in_critical_section_offset()));\n+    Node* arg = _gvn.transform(argument(1)); \/\/ argument for notification\n+    Node* addr = basic_plus_adr(thread, in_bytes(JavaThread::is_disable_suspend_offset()));\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -4011,1 +4011,1 @@\n-\/\/ Notification from VirtualThread about entering\/exiting sync critical section.\n+\/\/ Notification from VirtualThread about disabling JVMTI Suspend in a sync critical section.\n@@ -4013,1 +4013,1 @@\n-JVM_ENTRY(void, JVM_VirtualThreadCriticalLock(JNIEnv* env, jobject vthread, jboolean enter))\n+JVM_ENTRY(void, JVM_VirtualThreadDisableSuspend(JNIEnv* env, jobject vthread, jboolean enter))\n@@ -4019,2 +4019,2 @@\n-  assert(thread->is_in_critical_section() != (bool)enter, \"sanity check\");\n-  thread->toggle_is_in_critical_section();\n+  assert(thread->is_disable_suspend() != (bool)enter, \"recursive disable suspend is not allowed\");\n+  thread->toggle_is_disable_suspend();\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -490,2 +490,2 @@\n-  if (allow_suspend && _handshakee->is_in_critical_section()) {\n-    \/\/ avoid dealocks between VT critical sections and JVMTI suspend mechanism\n+  if (allow_suspend && _handshakee->is_disable_suspend()) {\n+    \/\/ filter out suspend operations while JavaThread is in disable_suspend mode\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -443,1 +443,1 @@\n-  _is_in_critical_section(false),\n+  _is_disable_suspend(false),\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -320,1 +320,1 @@\n-  bool                  _is_in_critical_section;         \/\/ thread is in a locking critical section\n+  bool                  _is_disable_suspend;             \/\/ JVMTI suspend is temporarily disabled; used on current thread only\n@@ -651,2 +651,2 @@\n-  bool is_in_critical_section() const            { return _is_in_critical_section; }\n-  void toggle_is_in_critical_section()           { _is_in_critical_section = !_is_in_critical_section; };\n+  bool is_disable_suspend() const                { return _is_disable_suspend; }\n+  void toggle_is_disable_suspend()               { _is_disable_suspend = !_is_disable_suspend; };\n@@ -818,1 +818,1 @@\n-  static ByteSize is_in_critical_section_offset()    { return byte_offset_of(JavaThread, _is_in_critical_section); }\n+  static ByteSize is_disable_suspend_offset()        { return byte_offset_of(JavaThread, _is_disable_suspend); }\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -361,7 +361,4 @@\n-            try {\n-                notifyJvmtiCriticalLock(true);\n-                synchronized (interruptLock) {\n-                    \/\/ need to recheck interrupt status\n-                    if (!interrupted) {\n-                        carrier.clearInterrupt();\n-                    }\n+            synchronized (interruptLock) {\n+                \/\/ need to recheck interrupt status\n+                if (!interrupted) {\n+                    carrier.clearInterrupt();\n@@ -369,2 +366,0 @@\n-            } finally {\n-                notifyJvmtiCriticalLock(false);\n@@ -389,8 +384,3 @@\n-        try {\n-            notifyJvmtiCriticalLock(true);\n-            \/\/ break connection to carrier thread, synchronized with interrupt\n-            synchronized (interruptLock) {\n-                setCarrierThread(null);\n-            }\n-        } finally {\n-            notifyJvmtiCriticalLock(false);\n+        \/\/ break connection to carrier thread, synchronized with interrupt\n+        synchronized (interruptLock) {\n+            setCarrierThread(null);\n@@ -756,1 +746,1 @@\n-                    notifyJvmtiCriticalLock(true);\n+                    notifyJvmtiDisableSuspend(true);\n@@ -765,1 +755,1 @@\n-                    notifyJvmtiCriticalLock(false);\n+                    notifyJvmtiDisableSuspend(false);\n@@ -863,1 +853,1 @@\n-                notifyJvmtiCriticalLock(true);\n+                notifyJvmtiDisableSuspend(true);\n@@ -876,1 +866,1 @@\n-                notifyJvmtiCriticalLock(false);\n+                notifyJvmtiDisableSuspend(false);\n@@ -896,1 +886,1 @@\n-                notifyJvmtiCriticalLock(true);\n+                notifyJvmtiDisableSuspend(true);\n@@ -902,1 +892,1 @@\n-                notifyJvmtiCriticalLock(false);\n+                notifyJvmtiDisableSuspend(false);\n@@ -927,1 +917,1 @@\n-                    notifyJvmtiCriticalLock(true);\n+                    notifyJvmtiDisableSuspend(true);\n@@ -936,1 +926,1 @@\n-                    notifyJvmtiCriticalLock(false);\n+                    notifyJvmtiDisableSuspend(false);\n@@ -1052,1 +1042,1 @@\n-                notifyJvmtiCriticalLock(true);\n+                notifyJvmtiDisableSuspend(true);\n@@ -1064,1 +1054,1 @@\n-                notifyJvmtiCriticalLock(false);\n+                notifyJvmtiDisableSuspend(false);\n@@ -1164,1 +1154,1 @@\n-    private native void notifyJvmtiCriticalLock(boolean enter);\n+    private native void notifyJvmtiDisableSuspend(boolean enter);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/VirtualThread.java","additions":18,"deletions":28,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -35,6 +35,6 @@\n-    { \"notifyJvmtiStart\",        \"()V\",  (void *)&JVM_VirtualThreadStart },\n-    { \"notifyJvmtiEnd\",          \"()V\",  (void *)&JVM_VirtualThreadEnd },\n-    { \"notifyJvmtiMount\",        \"(Z)V\", (void *)&JVM_VirtualThreadMount },\n-    { \"notifyJvmtiUnmount\",      \"(Z)V\", (void *)&JVM_VirtualThreadUnmount },\n-    { \"notifyJvmtiHideFrames\",   \"(Z)V\", (void *)&JVM_VirtualThreadHideFrames },\n-    { \"notifyJvmtiCriticalLock\", \"(Z)V\", (void *)&JVM_VirtualThreadCriticalLock },\n+    { \"notifyJvmtiStart\",          \"()V\",  (void *)&JVM_VirtualThreadStart },\n+    { \"notifyJvmtiEnd\",            \"()V\",  (void *)&JVM_VirtualThreadEnd },\n+    { \"notifyJvmtiMount\",          \"(Z)V\", (void *)&JVM_VirtualThreadMount },\n+    { \"notifyJvmtiUnmount\",        \"(Z)V\", (void *)&JVM_VirtualThreadUnmount },\n+    { \"notifyJvmtiHideFrames\",     \"(Z)V\", (void *)&JVM_VirtualThreadHideFrames },\n+    { \"notifyJvmtiDisableSuspend\", \"(Z)V\", (void *)&JVM_VirtualThreadDisableSuspend },\n","filename":"src\/java.base\/share\/native\/libjava\/VirtualThread.c","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -25,1 +25,10 @@\n- * @test\n+ * @test id=default\n+ * @summary Do not suspend virtual threads in a critical section.\n+ * @bug 8311218\n+ * @requires vm.continuations\n+ * @library \/testlibrary\n+ * @run main\/othervm SuspendWithInterruptLock\n+ *\/\n+\n+\/**\n+ * @test id=xint\n@@ -36,1 +45,1 @@\n-    static boolean done;\n+    static volatile boolean done;\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/SuspendWithInterruptLock\/SuspendWithInterruptLock.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"}]}