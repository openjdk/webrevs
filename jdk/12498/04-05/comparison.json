{"files":[{"patch":"@@ -466,0 +466,21 @@\n+    \/\/ Optimization for enum sets -- all package-private\n+\n+    boolean isRegularEnumSetCompatible() {\n+        return false;\n+    }\n+\n+    boolean isJumboEnumSetCompatible() {\n+        return false;\n+    }\n+\n+    Class<E> enumElementType() {\n+        throw new InternalError(\"cannot be called\");\n+    }\n+\n+    long regularEnumElements() {\n+        throw new InternalError(\"cannot be called\");\n+    }\n+\n+    long[] jumboEnumElements() {\n+        throw new InternalError(\"cannot be called\");\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/util\/AbstractCollection.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1046,1 +1046,1 @@\n-    static class UnmodifiableCollection<E> implements Collection<E>, Serializable {\n+    static class UnmodifiableCollection<E> extends AbstractCollection<E> implements Serializable {\n@@ -1150,3 +1150,1 @@\n-        if (s.getClass() == UnmodifiableSet.class\n-                || s.getClass() == UnmodifiableRegularEnumSet.class\n-                || s.getClass() == UnmodifiableJumboEnumSet.class) {\n+        if (s.getClass() == UnmodifiableSet.class) {\n@@ -1155,6 +1153,0 @@\n-        if (s instanceof RegularEnumSetCompatible<?> res) {\n-            return (Set<T>)new UnmodifiableRegularEnumSet<>(res);\n-        }\n-        if (s instanceof JumboEnumSetCompatible<?> jes) {\n-            return (Set<T>)new UnmodifiableJumboEnumSet<>(jes);\n-        }\n@@ -1176,27 +1168,0 @@\n-        @java.io.Serial\n-        private Object readResolve() {\n-            if (c instanceof RegularEnumSetCompatible<?> es) {\n-                return new UnmodifiableRegularEnumSet<>(es);\n-            }\n-            if (c instanceof JumboEnumSetCompatible<?> es) {\n-                return new UnmodifiableJumboEnumSet<>(es);\n-            }\n-            return this;\n-        }\n-    }\n-\n-    \/**\n-     * @serial include\n-     *\/\n-    static final class UnmodifiableRegularEnumSet<E extends Enum<E>> extends UnmodifiableSet<E>\n-            implements RegularEnumSetCompatible<E> {\n-        @java.io.Serial\n-        private static final long serialVersionUID = -1110577510253015312L;\n-\n-        final RegularEnumSetCompatible<E> es;\n-\n-        UnmodifiableRegularEnumSet(RegularEnumSetCompatible<E> es) {\n-            super(es);\n-            this.es = es;\n-        }\n-\n@@ -1204,2 +1169,3 @@\n-        public Class<E> elementType() {\n-            return es.elementType();\n+        boolean isRegularEnumSetCompatible() {\n+            return getClass() == UnmodifiableSet.class\n+                && c instanceof AbstractCollection<?> ac && ac.isRegularEnumSetCompatible();\n@@ -1209,23 +1175,3 @@\n-        public long elements() {\n-            return es.elements();\n-        }\n-\n-        @java.io.Serial\n-        private Object writeReplace() {\n-            return new UnmodifiableSet<>(es);\n-        }\n-    }\n-\n-    \/**\n-     * @serial include\n-     *\/\n-    static final class UnmodifiableJumboEnumSet<E extends Enum<E>> extends UnmodifiableSet<E>\n-            implements JumboEnumSetCompatible<E> {\n-        @java.io.Serial\n-        private static final long serialVersionUID = 1730197349714300593L;\n-\n-        final JumboEnumSetCompatible<E> es;\n-\n-        UnmodifiableJumboEnumSet(JumboEnumSetCompatible<E> es) {\n-            super(es);\n-            this.es = es;\n+        boolean isJumboEnumSetCompatible() {\n+            return getClass() == UnmodifiableSet.class\n+                && c instanceof AbstractCollection<?> ac && ac.isJumboEnumSetCompatible();\n@@ -1235,2 +1181,7 @@\n-        public Class<E> elementType() {\n-            return es.elementType();\n+        @SuppressWarnings(\"unchecked\")\n+        Class<E> enumElementType() {\n+            if (getClass() == UnmodifiableSet.class && c instanceof AbstractCollection<?> ac) {\n+                return (Class<E>)ac.enumElementType();\n+            } else {\n+                throw new InternalError(\"cannot be called\");\n+            }\n@@ -1240,2 +1191,6 @@\n-        public long[] elements() {\n-            return es.elements();\n+        long regularEnumElements() {\n+            if (getClass() == UnmodifiableSet.class && c instanceof AbstractCollection<?> ac) {\n+                return ac.regularEnumElements();\n+            } else {\n+                throw new InternalError(\"cannot be called\");\n+            }\n@@ -1244,3 +1199,7 @@\n-        @java.io.Serial\n-        private Object writeReplace() {\n-            return new UnmodifiableSet<>(es);\n+        @Override\n+        long[] jumboEnumElements() {\n+            if (getClass() == UnmodifiableSet.class && c instanceof AbstractCollection<?> ac) {\n+                return ac.jumboEnumElements();\n+            } else {\n+                throw new InternalError(\"cannot be called\");\n+            }\n@@ -2159,1 +2118,1 @@\n-    static class SynchronizedCollection<E> implements Collection<E>, Serializable {\n+    static class SynchronizedCollection<E> extends AbstractCollection<E> implements Serializable {\n@@ -2280,1 +2239,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -2282,6 +2240,0 @@\n-        if (s instanceof RegularEnumSetCompatible<?> es) {\n-            return (Set<T>)new SynchronizedRegularEnumSet<>(es);\n-        }\n-        if (s instanceof JumboEnumSetCompatible<?> es) {\n-            return (Set<T>)new SynchronizedJumboEnumSet<>(es);\n-        }\n@@ -2291,1 +2243,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -2293,6 +2244,0 @@\n-        if (s instanceof RegularEnumSetCompatible<?> es) {\n-            return (Set<T>)new SynchronizedRegularEnumSet<>(es, mutex);\n-        }\n-        if (s instanceof JumboEnumSetCompatible<?> es) {\n-            return (Set<T>)new SynchronizedJumboEnumSet<>(es, mutex);\n-        }\n@@ -2327,31 +2272,4 @@\n-        @java.io.Serial\n-        private Object readResolve() {\n-            if (c instanceof RegularEnumSetCompatible<?> es) {\n-                return new SynchronizedRegularEnumSet<>(es);\n-            }\n-            if (c instanceof JumboEnumSetCompatible<?> es) {\n-                return new SynchronizedJumboEnumSet<>(es);\n-            }\n-            return this;\n-        }\n-    }\n-\n-    \/**\n-     * @serial include\n-     *\/\n-    static final class SynchronizedRegularEnumSet<E extends Enum<E>>\n-          extends SynchronizedSet<E>\n-          implements RegularEnumSetCompatible<E> {\n-        @java.io.Serial\n-        private static final long serialVersionUID = -5185717517664879222L;\n-\n-        final RegularEnumSetCompatible<E> es;\n-\n-        SynchronizedRegularEnumSet(RegularEnumSetCompatible<E> es) {\n-            super(es);\n-            this.es = es;\n-        }\n-\n-        SynchronizedRegularEnumSet(RegularEnumSetCompatible<E> es, Object mutex) {\n-            super(es, mutex);\n-            this.es = es;\n+        @Override\n+        boolean isRegularEnumSetCompatible() {\n+            return getClass() == SynchronizedSet.class\n+                && c instanceof AbstractCollection<?> ac && ac.isRegularEnumSetCompatible();\n@@ -2361,3 +2279,3 @@\n-        public Class<E> elementType() {\n-            \/\/ No need to be synchronized since elementType is never modified.\n-            return es.elementType();\n+        boolean isJumboEnumSetCompatible() {\n+            return getClass() == SynchronizedSet.class\n+                && c instanceof AbstractCollection<?> ac && ac.isJumboEnumSetCompatible();\n@@ -2367,3 +2285,6 @@\n-        public long elements() {\n-            synchronized (mutex) {\n-                return es.elements();\n+        @SuppressWarnings(\"unchecked\")\n+        Class<E> enumElementType() {\n+            if (getClass() == SynchronizedSet.class && c instanceof AbstractCollection<?> ac) {\n+                return (Class<E>)ac.enumElementType();\n+            } else {\n+                throw new InternalError(\"cannot be called\");\n@@ -2373,27 +2294,0 @@\n-        @java.io.Serial\n-        private Object writeReplace() {\n-            return new SynchronizedSet<E>(es);\n-        }\n-    }\n-\n-    \/**\n-     * @serial include\n-     *\/\n-    static final class SynchronizedJumboEnumSet<E extends Enum<E>>\n-          extends SynchronizedSet<E>\n-          implements JumboEnumSetCompatible<E> {\n-        @java.io.Serial\n-        private static final long serialVersionUID = -2197803204861808334L;\n-\n-        final JumboEnumSetCompatible<E> es;\n-\n-        SynchronizedJumboEnumSet(JumboEnumSetCompatible<E> es) {\n-            super(es);\n-            this.es = es;\n-        }\n-\n-        SynchronizedJumboEnumSet(JumboEnumSetCompatible<E> es, Object mutex) {\n-            super(es, mutex);\n-            this.es = es;\n-        }\n-\n@@ -2401,3 +2295,8 @@\n-        public Class<E> elementType() {\n-            \/\/ No need to be synchronized since elementType is never modified.\n-            return es.elementType();\n+        long regularEnumElements() {\n+            if (getClass() == SynchronizedSet.class && c instanceof AbstractCollection<?> ac) {\n+                synchronized (mutex) {\n+                    return ac.regularEnumElements();\n+                }\n+            } else {\n+                throw new InternalError(\"cannot be called\");\n+            }\n@@ -2407,3 +2306,7 @@\n-        public long[] elements() {\n-            synchronized (mutex) {\n-                return es.elements().clone();   \/\/ defensive copy\n+        long[] jumboEnumElements() {\n+            if (getClass() == SynchronizedSet.class && c instanceof AbstractCollection<?> ac) {\n+                synchronized (mutex) {\n+                    return ac.jumboEnumElements().clone();\n+                }\n+            } else {\n+                throw new InternalError(\"cannot be called\");\n@@ -2412,5 +2315,0 @@\n-\n-        @java.io.Serial\n-        private Object writeReplace() {\n-            return new SynchronizedSet<>(es);\n-        }\n@@ -3527,8 +3425,0 @@\n-        \/\/ All implementing classes of RegularEnumSetCompatible and JumboEnumSetCompatible\n-        \/\/ always reject wrong types.\n-        if (s instanceof RegularEnumSetCompatible<?> es && type == es.elementType()) {\n-            return s;\n-        }\n-        if (s instanceof JumboEnumSetCompatible<?> es && type == es.elementType()) {\n-            return s;\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/Collections.java","additions":57,"deletions":167,"binary":false,"changes":224,"status":"modified"},{"patch":"@@ -413,0 +413,5 @@\n+    @Override\n+    Class<E> enumElementType() {\n+        return elementType;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/EnumSet.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -925,1 +925,1 @@\n-            return (Set<E>)new ImmutableRegularEnumSet<>(res.elements(), res.elementType());\n+            return (Set<E>)new ImmutableRegularEnumSet<>(res.regularEnumElements(), res.enumElementType());\n@@ -928,1 +928,1 @@\n-            return (Set<E>)new ImmutableJumboEnumSet<>(jes.elements(), jes.elementType(), jes.size());\n+            return (Set<E>)new ImmutableJumboEnumSet<>(jes.jumboEnumElements(), jes.enumElementType(), jes.size());\n@@ -1117,2 +1117,2 @@\n-        \/\/ Overrides elementType() in RegularEnumSetCompatible and JumboEnumSetCompatible\n-        public final Class<E> elementType() {\n+        @Override\n+        final Class<E> enumElementType() {\n@@ -1173,1 +1173,1 @@\n-            implements RegularEnumSetCompatible<E>, Serializable {\n+            implements Serializable {\n@@ -1183,1 +1183,6 @@\n-        public long elements() {\n+        boolean isRegularEnumSetCompatible() {\n+            return true;\n+        }\n+\n+        @Override\n+        long regularEnumElements() {\n@@ -1230,3 +1235,3 @@\n-            if ((c instanceof RegularEnumSetCompatible<?> es)) {\n-                if (es.elementType() != elementType)\n-                    return es.isEmpty();\n+            if (c instanceof AbstractCollection<?> ac && ac.isRegularEnumSetCompatible()) {\n+                if (ac.enumElementType() != elementType)\n+                    return ac.isEmpty();\n@@ -1234,1 +1239,1 @@\n-                return (es.elements() & ~elements) == 0;\n+                return (ac.regularEnumElements() & ~elements) == 0;\n@@ -1242,1 +1247,1 @@\n-            if (!(o instanceof RegularEnumSetCompatible<?> es))\n+            if (!(o instanceof AbstractCollection<?> ac && ac.isRegularEnumSetCompatible()))\n@@ -1245,3 +1250,3 @@\n-            if (es.elementType() != elementType)\n-                return elements == 0 && es.elements() == 0;\n-            return es.elements() == elements;\n+            if (ac.enumElementType() != elementType)\n+                return elements == 0 && ac.regularEnumElements() == 0;\n+            return ac.regularEnumElements() == elements;\n@@ -1263,1 +1268,1 @@\n-            implements JumboEnumSetCompatible<E>, Serializable {\n+            implements Serializable {\n@@ -1276,0 +1281,4 @@\n+        boolean isJumboEnumSetCompatible() {\n+            return true;\n+        }    \n+\n@@ -1277,1 +1286,1 @@\n-        public long[] elements() {\n+        long[] jumboEnumElements() {\n@@ -1330,1 +1339,1 @@\n-            if (!(c instanceof JumboEnumSetCompatible<?> es))\n+            if (!(c instanceof AbstractCollection<?> ac && ac.isJumboEnumSetCompatible()))\n@@ -1333,2 +1342,2 @@\n-            if (es.elementType() != elementType)\n-                return es.isEmpty();\n+            if (ac.enumElementType() != elementType)\n+                return ac.isEmpty();\n@@ -1336,1 +1345,1 @@\n-            long[] esElements = es.elements();\n+            long[] esElements = ac.jumboEnumElements();\n@@ -1345,1 +1354,1 @@\n-            if (!(o instanceof JumboEnumSetCompatible<?> es))\n+            if (!(o instanceof AbstractCollection<?> ac && ac.isJumboEnumSetCompatible()))\n@@ -1348,2 +1357,2 @@\n-            if (es.elementType() != elementType)\n-                return size == 0 && es.size() == 0;\n+            if (ac.enumElementType() != elementType)\n+                return size == 0 && ac.size() == 0;\n@@ -1351,1 +1360,1 @@\n-            return Arrays.equals(es.elements(), elements);\n+            return Arrays.equals(ac.jumboEnumElements(), elements);\n","filename":"src\/java.base\/share\/classes\/java\/util\/ImmutableCollections.java","additions":33,"deletions":24,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-final class JumboEnumSet<E extends Enum<E>> extends EnumSet<E> implements JumboEnumSetCompatible<E> {\n+final class JumboEnumSet<E extends Enum<E>> extends EnumSet<E> {\n@@ -48,2 +48,2 @@\n-    public long[] elements() {\n-        return elements;\n+    boolean isJumboEnumSetCompatible() {\n+        return true;\n@@ -53,2 +53,2 @@\n-    public Class<E> elementType() {\n-        return elementType;\n+    long[] jumboEnumElements() {\n+        return elements;\n@@ -261,1 +261,1 @@\n-        if (!(c instanceof JumboEnumSetCompatible<?> es))\n+        if (!(c instanceof AbstractCollection<?> ac && ac.isJumboEnumSetCompatible()))\n@@ -264,2 +264,2 @@\n-        if (es.elementType() != elementType)\n-            return es.isEmpty();\n+        if (ac.enumElementType() != elementType)\n+            return ac.isEmpty();\n@@ -267,1 +267,1 @@\n-        long[] esElements = es.elements();\n+        long[] esElements = ac.jumboEnumElements();\n@@ -283,1 +283,1 @@\n-        if (!(c instanceof JumboEnumSetCompatible<?> es))\n+        if (!(c instanceof AbstractCollection<?> ac && ac.isJumboEnumSetCompatible()))\n@@ -286,2 +286,2 @@\n-        if (es.elementType() != elementType) {\n-            if (es.isEmpty())\n+        if (ac.enumElementType() != elementType) {\n+            if (ac.isEmpty())\n@@ -291,1 +291,1 @@\n-                    es.elementType() + \" != \" + elementType);\n+                    ac.enumElementType() + \" != \" + elementType);\n@@ -294,1 +294,1 @@\n-        long[] esElements = es.elements();\n+        long[] esElements = ac.jumboEnumElements();\n@@ -309,1 +309,1 @@\n-        if (!(c instanceof JumboEnumSetCompatible<?> es))\n+        if (!(c instanceof AbstractCollection<?> ac && ac.isJumboEnumSetCompatible()))\n@@ -312,1 +312,1 @@\n-        if (es.elementType() != elementType)\n+        if (ac.enumElementType() != elementType)\n@@ -315,1 +315,1 @@\n-        long[] esElements = es.elements();\n+        long[] esElements = ac.jumboEnumElements();\n@@ -330,1 +330,1 @@\n-        if (!(c instanceof JumboEnumSetCompatible<?> es))\n+        if (!(c instanceof AbstractCollection<?> ac && ac.isJumboEnumSetCompatible()))\n@@ -333,1 +333,1 @@\n-        if (es.elementType() != elementType) {\n+        if (ac.enumElementType() != elementType) {\n@@ -339,1 +339,1 @@\n-        long[] esElements = es.elements();\n+        long[] esElements = ac.jumboEnumElements();\n@@ -363,1 +363,1 @@\n-        if (!(o instanceof JumboEnumSetCompatible<?> es))\n+        if (!(o instanceof AbstractCollection<?> ac && ac.isJumboEnumSetCompatible()))\n@@ -366,2 +366,2 @@\n-        if (es.elementType() != elementType)\n-            return size == 0 && es.size() == 0;\n+        if (ac.enumElementType() != elementType)\n+            return size == 0 && ac.size() == 0;\n@@ -369,1 +369,1 @@\n-        return Arrays.equals(es.elements(), elements);\n+        return Arrays.equals(ac.jumboEnumElements(), elements);\n","filename":"src\/java.base\/share\/classes\/java\/util\/JumboEnumSet.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.util;\n-\n-import java.io.Serializable;\n-\n-\/\/ Implementing classes are compatible with JumboEnumSet.\n-sealed interface JumboEnumSetCompatible<E extends Enum<E>>\n-        extends Set<E>, Serializable\n-        permits JumboEnumSet,\n-                Collections.UnmodifiableJumboEnumSet,\n-                Collections.SynchronizedJumboEnumSet,\n-                ImmutableCollections.ImmutableJumboEnumSet {\n-    Class<E> elementType();\n-\n-    \/\/ Note that this method may return a mutable array, so\n-    \/\/ defensive copies should be made if immutable or thread-safe\n-    \/\/ set is needed.\n-    long[] elements();\n-}\n","filename":"src\/java.base\/share\/classes\/java\/util\/JumboEnumSetCompatible.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -36,1 +36,1 @@\n-final class RegularEnumSet<E extends Enum<E>> extends EnumSet<E> implements RegularEnumSetCompatible<E> {\n+final class RegularEnumSet<E extends Enum<E>> extends EnumSet<E> {\n@@ -46,2 +46,2 @@\n-    public long elements() {\n-        return elements;\n+    boolean isRegularEnumSetCompatible() {\n+        return true;\n@@ -51,2 +51,2 @@\n-    public Class<E> elementType() {\n-        return elementType;\n+    long regularEnumElements() {\n+        return elements;\n@@ -209,1 +209,1 @@\n-        if (!(c instanceof RegularEnumSetCompatible<?> es))\n+        if (!(c instanceof AbstractCollection<?> ac && ac.isRegularEnumSetCompatible()))\n@@ -212,2 +212,2 @@\n-        if (es.elementType() != elementType)\n-            return es.isEmpty();\n+        if (ac.enumElementType() != elementType)\n+            return ac.isEmpty();\n@@ -215,1 +215,1 @@\n-        return (es.elements() & ~elements) == 0;\n+        return (ac.regularEnumElements() & ~elements) == 0;\n@@ -227,1 +227,1 @@\n-        if (!(c instanceof RegularEnumSetCompatible<?> es))\n+        if (!(c instanceof AbstractCollection<?> ac && ac.isRegularEnumSetCompatible()))\n@@ -230,2 +230,2 @@\n-        if (es.elementType() != elementType) {\n-            if (es.isEmpty())\n+        if (ac.enumElementType() != elementType) {\n+            if (ac.isEmpty())\n@@ -235,1 +235,1 @@\n-                    es.elementType() + \" != \" + elementType);\n+                    ac.enumElementType() + \" != \" + elementType);\n@@ -239,1 +239,1 @@\n-        elements |= es.elements();\n+        elements |= ac.regularEnumElements();\n@@ -252,1 +252,1 @@\n-        if (!(c instanceof RegularEnumSetCompatible<?> es))\n+        if (!(c instanceof AbstractCollection<?> ac && ac.isRegularEnumSetCompatible()))\n@@ -255,1 +255,1 @@\n-        if (es.elementType() != elementType)\n+        if (ac.enumElementType() != elementType)\n@@ -259,1 +259,1 @@\n-        elements &= ~es.elements();\n+        elements &= ~ac.regularEnumElements();\n@@ -272,1 +272,1 @@\n-        if (!(c instanceof RegularEnumSetCompatible<?> es))\n+        if (!(c instanceof AbstractCollection<?> ac && ac.isRegularEnumSetCompatible()))\n@@ -275,1 +275,1 @@\n-        if (es.elementType() != elementType) {\n+        if (ac.enumElementType() != elementType) {\n@@ -282,1 +282,1 @@\n-        elements &= es.elements();\n+        elements &= ac.regularEnumElements();\n@@ -303,1 +303,1 @@\n-        if (!(o instanceof RegularEnumSetCompatible<?> es))\n+        if (!(o instanceof AbstractCollection<?> ac && ac.isRegularEnumSetCompatible()))\n@@ -306,3 +306,3 @@\n-        if (es.elementType() != elementType)\n-            return elements == 0 && es.elements() == 0;\n-        return es.elements() == elements;\n+        if (ac.enumElementType() != elementType)\n+            return elements == 0 && ac.regularEnumElements() == 0;\n+        return ac.regularEnumElements() == elements;\n","filename":"src\/java.base\/share\/classes\/java\/util\/RegularEnumSet.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -1,39 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.util;\n-\n-import java.io.Serializable;\n-\n-\/\/ Implementing classes are compatible with RegularEnumSet.\n-sealed interface RegularEnumSetCompatible<E extends Enum<E>>\n-        extends Set<E>, Serializable\n-        permits RegularEnumSet,\n-                Collections.UnmodifiableRegularEnumSet,\n-                Collections.SynchronizedRegularEnumSet,\n-                ImmutableCollections.ImmutableRegularEnumSet {\n-    Class<E> elementType();\n-    long elements();\n-}\n","filename":"src\/java.base\/share\/classes\/java\/util\/RegularEnumSetCompatible.java","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -727,1 +727,1 @@\n-    @SuppressWarnings(\"unchecked\")\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n@@ -735,5 +735,9 @@\n-        if (coll instanceof RegularEnumSetCompatible<?> res && res.size() > 2) {\n-            return (Set<E>)new ImmutableCollections.ImmutableRegularEnumSet<>(res.elements(), res.elementType());\n-        }\n-        if (coll instanceof JumboEnumSetCompatible<?> jes && jes.size() > 2) {\n-            return (Set<E>)new ImmutableCollections.ImmutableJumboEnumSet<>(jes.elements().clone(), jes.elementType(), jes.size());\n+        if (coll instanceof AbstractCollection<?> ac && ac.size() > 2) {\n+            if (ac.isRegularEnumSetCompatible()) {\n+                return (Set<E>)\n+                    new ImmutableCollections.ImmutableRegularEnumSet(ac.regularEnumElements(), ac.enumElementType());\n+            }\n+            if (ac.isJumboEnumSetCompatible()) {\n+                return (Set<E>)\n+                    new ImmutableCollections.ImmutableJumboEnumSet(ac.jumboEnumElements().clone(), ac.enumElementType(), ac.size());\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/util\/Set.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"}]}