{"files":[{"patch":"@@ -845,0 +845,3 @@\n+\/\/ Return true if the execution after the provided bytecode continues at the\n+\/\/ next bytecode in the code. This is not the case for gotos, returns, and\n+\/\/ throws.\n@@ -847,2 +850,0 @@\n-    \/\/ List may be incomplete.  Here we really only care about bytecodes where compiled code\n-    \/\/ can deoptimize.\n@@ -852,0 +853,7 @@\n+    case Bytecodes::_areturn:\n+    case Bytecodes::_dreturn:\n+    case Bytecodes::_freturn:\n+    case Bytecodes::_ireturn:\n+    case Bytecodes::_lreturn:\n+    case Bytecodes::_ret:\n+    case Bytecodes::_return:\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package compiler.interpreter.verifyStack;\n+\n+import compiler.interpreter.verifyStack.B;\n+\n+public class A {\n+    public static B val = null;\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/interpreter\/verifyStack\/A.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -25,3 +25,6 @@\n-module com.needsfoosaddexport {\n-    requires com.foos;\n-    exports com.needsfoosaddexport;\n+package compiler.interpreter.verifyStack;\n+\n+public class B {\n+  public int val = 0;\n+\n+  B(int v) { this.val = v; }\n","filename":"test\/hotspot\/jtreg\/compiler\/interpreter\/verifyStack\/B.java","additions":6,"deletions":3,"binary":false,"changes":9,"previous_filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/modulepath\/src\/com.needsfoosaddexport\/module-info.java","status":"copied"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package compiler\/interpreter\/verifyStack;\n+\n+super class TestImpl version 49:0\n+{\n+    public Method \"<init>\":\"()V\"\n+        stack  1 locals  1\n+    {\n+           aload_0;\n+           invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+           return;\n+    }\n+    public static Method testAreturn:\"()Ljava\/lang\/Object;\"\n+        stack 1 locals 0\n+    {\n+        \/\/ If A not loaded -> trap for A unloaded\n+        \/\/ If a loaded, but B not -> assume A.val null, else trap.\n+        \/\/   -> \"null_assert_or_unreached0\"\n+        getstatic    Field compiler\/interpreter\/verifyStack\/A.val:\"Lcompiler\/interpreter\/verifyStack\/B;\";\n+        areturn;\n+\n+        \/\/ some unreachable instruction after return\n+        iconst_0;\n+    }\n+    public static Method testReturn:\"()V\"\n+        stack  1 locals  0\n+    {\n+        getstatic   Field compiler\/interpreter\/verifyStack\/A.val:\"Lcompiler\/interpreter\/verifyStack\/B;\";\n+        return;\n+        \/\/ unreachable\n+        iconst_0;\n+    }\n+    public static Method testGoto:\"()V\"\n+        stack  1 locals  0\n+    {\n+        getstatic   Field compiler\/interpreter\/verifyStack\/A.val:\"Lcompiler\/interpreter\/verifyStack\/B;\";\n+        goto There;\n+        \/\/ unreachable\n+        iconst_0;\n+    There:\n+        return;\n+    }\n+    public static Method testGotow:\"()V\"\n+        stack  1 locals  0\n+    {\n+        getstatic   Field compiler\/interpreter\/verifyStack\/A.val:\"Lcompiler\/interpreter\/verifyStack\/B;\";\n+        goto_w There;\n+        \/\/ unreachable\n+        iconst_0;\n+    There:\n+        return;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/interpreter\/verifyStack\/TestImpl.jasm","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test id=return\n+ * @bug 8336906\n+ * @summary Ensure VerifyStack does not crash on bytecodes in unreachable basic blocks after return.\n+ * @compile B.java A.java TestImpl.jasm TestVerifyStackWithUnreachableBytecode.java\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+VerifyStack -Xcomp\n+ *      -XX:CompileCommand=compileonly,compiler\/interpreter\/verifyStack\/TestImpl.test*\n+ *      compiler.interpreter.verifyStack.TestVerifyStackWithUnreachableBytecode return\n+ *\/\n+\n+\/*\n+ * @test id=areturn\n+ * @bug 8336906\n+ * @summary Ensure VerifyStack does not crash on bytecodes in unreachable basic blocks after areturn.\n+ * @compile B.java A.java TestImpl.jasm TestVerifyStackWithUnreachableBytecode.java\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+VerifyStack -Xcomp\n+ *      -XX:CompileCommand=compileonly,compiler\/interpreter\/verifyStack\/TestImpl.test*\n+ *      compiler.interpreter.verifyStack.TestVerifyStackWithUnreachableBytecode areturn\n+ *\/\n+\n+\/*\n+ * @test id=goto\n+ * @bug 8336906 8271055\n+ * @summary Ensure VerifyStack does not crash on bytecodes in unreachable basic blocks after goto.\n+ * @compile B.java A.java TestImpl.jasm TestVerifyStackWithUnreachableBytecode.java\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+VerifyStack -Xcomp\n+ *      -XX:CompileCommand=compileonly,compiler\/interpreter\/verifyStack\/TestImpl.test*\n+ *      compiler.interpreter.verifyStack.TestVerifyStackWithUnreachableBytecode goto\n+ *\/\n+\n+\/*\n+ * @test id=gotow\n+ * @bug 8336906 8271055\n+ * @summary Ensure VerifyStack does not crash on bytecodes in unreachable basic blocks after gotow.\n+ * @compile B.java A.java TestImpl.jasm TestVerifyStackWithUnreachableBytecode.java\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+VerifyStack -Xcomp\n+ *      -XX:CompileCommand=compileonly,compiler\/interpreter\/verifyStack\/TestImpl.test*\n+ *      compiler.interpreter.verifyStack.TestVerifyStackWithUnreachableBytecode gotow\n+ *\/\n+\n+package compiler.interpreter.verifyStack;\n+\n+import compiler.interpreter.verifyStack.*;\n+\n+public class TestVerifyStackWithUnreachableBytecode {\n+    public static void main(String[] args) {\n+        TestCase t = testCaseFromString(args[0]);\n+\n+        \/\/ The following is designed to cause a deopt with the reason `null_assert_or_unreached0`\n+        \/\/ when accessing A.val using getstatic due to the class B not being loaded and the consequent\n+        \/\/ assumption of A.val == null.\n+        A.val = null;\n+        dispatchTest(t);\n+        A.val = new B(42);\n+        dispatchTest(t);\n+    }\n+\n+    private enum TestCase {\n+        ARETURN,\n+        GOTO,\n+        GOTOW,\n+        RETURN;\n+    }\n+\n+    private static TestCase testCaseFromString(String s) {\n+        return switch (s) {\n+            case \"areturn\" -> TestCase.ARETURN;\n+            case \"return\" -> TestCase.RETURN;\n+            case \"goto\" -> TestCase.GOTO;\n+            case \"gotow\" -> TestCase.GOTOW;\n+            default -> throw new RuntimeException(\"Test argument not recognized: \" + s);\n+        };\n+    }\n+\n+    private static void dispatchTest(TestCase testCase) {\n+        switch (testCase) {\n+            case ARETURN -> TestImpl.testAreturn();\n+            case RETURN -> TestImpl.testReturn();\n+            case GOTO -> TestImpl.testGoto();\n+            case GOTOW -> TestImpl.testGotow();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/interpreter\/verifyStack\/TestVerifyStackWithUnreachableBytecode.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"}]}