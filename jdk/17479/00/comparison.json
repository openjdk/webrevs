{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1146,1 +1146,1 @@\n-        new Command(\"jstack\", \"jstack [-v]\", false) {\n+        new Command(\"jstack\", \"jstack [-v] [-l]\", false) {\n@@ -1149,2 +1149,11 @@\n-                if (t.countTokens() > 0 && t.nextToken().equals(\"-v\")) {\n-                    verbose = true;\n+                boolean concurrentLocks = false;\n+                while (t.countTokens() > 0) {\n+                    String arg = t.nextToken();\n+                    if (arg.equals(\"-v\")) {\n+                        verbose = true;\n+                    } else if (arg.equals(\"-l\")) {\n+                        concurrentLocks = true;\n+                    } else {\n+                        usage();\n+                        return;\n+                    }\n@@ -1152,1 +1161,1 @@\n-                StackTrace jstack = new StackTrace(verbose, true);\n+                StackTrace jstack = new StackTrace(verbose, concurrentLocks);\n@@ -1204,1 +1213,1 @@\n-        new Command(\"pstack\", \"pstack [-v]\", false) {\n+        new Command(\"pstack\", \"pstack [-v] [-l]\", false) {\n@@ -1207,2 +1216,11 @@\n-                if (t.countTokens() > 0 && t.nextToken().equals(\"-v\")) {\n-                    verbose = true;\n+                boolean concurrentLocks = false;\n+                while (t.countTokens() > 0) {\n+                    String arg = t.nextToken();\n+                    if (arg.equals(\"-v\")) {\n+                        verbose = true;\n+                    } else if (arg.equals(\"-l\")) {\n+                        concurrentLocks = true;\n+                    } else {\n+                        usage();\n+                        return;\n+                    }\n@@ -1210,1 +1228,1 @@\n-                PStack pstack = new PStack(verbose, true, debugger.getAgent());\n+                PStack pstack = new PStack(verbose, concurrentLocks, debugger.getAgent());\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/CommandProcessor.java","additions":27,"deletions":9,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+    private PrintStream tty;\n@@ -35,1 +36,2 @@\n-    public ConcurrentLocksPrinter() {\n+    public ConcurrentLocksPrinter(PrintStream tty) {\n+        this.tty = tty;\n@@ -39,1 +41,1 @@\n-    public void print(JavaThread jthread, PrintStream tty) {\n+    public void print(JavaThread jthread) {\n@@ -69,0 +71,1 @@\n+            tty.println(\"Finding concurrent locks. This might take a while...\");\n@@ -80,0 +83,1 @@\n+            tty.println();\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/ConcurrentLocksPrinter.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-            concLocksPrinter = new ConcurrentLocksPrinter();\n+            concLocksPrinter = new ConcurrentLocksPrinter(out);\n@@ -195,1 +195,1 @@\n-                   concLocksPrinter.print(jthread, out);\n+                   concLocksPrinter.print(jthread);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/tools\/PStack.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,1 @@\n-                concLocksPrinter = new ConcurrentLocksPrinter();\n+                concLocksPrinter = new ConcurrentLocksPrinter(tty);\n@@ -126,1 +126,2 @@\n-                        concLocksPrinter.print(cur, tty);\n+                        concLocksPrinter.print(cur);\n+                        tty.println();\n@@ -128,1 +129,0 @@\n-                    tty.println();\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/tools\/StackTrace.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,0 +54,1 @@\n+serviceability\/sa\/ClhsdbJstackWithConcurrentLock.java         8307393   generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList-generational-zgc.txt","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+serviceability\/sa\/ClhsdbJstackWithConcurrentLock.java         8276539   generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList-zgc.txt","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8324066\n+ * @summary Test the clhsdb 'jstack -l' command for printing concurrent lock information\n+ * @requires vm.hasSA\n+ * @library \/test\/lib\n+ * @run main\/othervm ClhsdbJstackWithConcurrentLock\n+ *\/\n+\n+import java.util.List;\n+import jdk.test.lib.apps.LingeredApp;\n+import jtreg.SkippedException;\n+\n+public class ClhsdbJstackWithConcurrentLock {\n+\n+    public static void main(String[] args) throws Exception {\n+        System.out.println(\"Starting the ClhsdbJstackWithConcurrentLock test\");\n+\n+        LingeredApp theApp = null;\n+        try {\n+            ClhsdbLauncher test = new ClhsdbLauncher();\n+\n+            theApp = new LingeredAppWithConcurrentLock();\n+            \/\/ Use a small heap so the scan is quick.\n+            LingeredApp.startApp(theApp, \"-Xmx4m\");\n+            System.out.println(\"Started LingeredApp with pid \" + theApp.getPid());\n+\n+            \/\/ Run the 'jstack -l' command to get the stack and have java.util.concurrent\n+            \/\/ lock information included.\n+            List<String> cmds = List.of(\"jstack -l\");\n+            String jstackOutput = test.run(theApp.getPid(), cmds, null, null);\n+\n+            \/\/ We are looking for:\n+            \/\/   Locked ownable synchronizers:\n+            \/\/    - <0x00000000ffc2ed70>, (a java\/util\/concurrent\/locks\/ReentrantLock$NonfairSync)\n+            \/\/ We want to fetch the address from this line.\n+            String key = \", (a java\/util\/concurrent\/locks\/ReentrantLock$NonfairSync)\";\n+            String[] lines = jstackOutput.split(\"\\\\R\");\n+            String addressString = null;\n+            for (String line : lines) {\n+                if (line.contains(key)) {\n+                    String[] words = line.split(key + \"|[, ]\");\n+                    for (String word : words) {\n+                        word = word.replace(\"<\",\"\").replace(\">\",\"\");\n+                        if (word.startsWith(\"0x\")) {\n+                            addressString = word;\n+                            break;\n+                        }\n+                    }\n+                    if (addressString != null)\n+                        break;\n+                }\n+            }\n+            if (addressString == null) {\n+                throw new RuntimeException(\"Token '\" + key + \"' not found in jstack output\");\n+            }\n+\n+            \/\/ We are looking for the following java frame:\n+            \/\/  - jdk.internal.misc.Unsafe.park(boolean, long)...\n+            \/\/      - parking to wait for <0x00000000ffc2ed70> (a java\/util\/concurrent\/locks\/ReentrantLock$NonfairSync)\n+            \/\/ Note the address matches the one we found above.\n+            key = \"- parking to wait for <\" + addressString +\n+                \"> (a java\/util\/concurrent\/locks\/ReentrantLock$NonfairSync)\";\n+            boolean found = false;\n+            for (String line : lines) {\n+                if (line.contains(key)) {\n+                    found = true;\n+                    break;\n+                }\n+            }\n+            if (!found) {\n+                throw new RuntimeException(\"Token '\" + key + \"' not found in jstack output\");\n+            }\n+        } catch (SkippedException e) {\n+            throw e;\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Test ERROR \" + ex, ex);\n+        } finally {\n+            LingeredApp.stopApp(theApp);\n+            System.out.println(\"OUTPUT: \" + theApp.getOutput());\n+        }\n+        System.out.println(\"Test PASSED\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbJstackWithConcurrentLock.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.apps.LingeredApp;\n+\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+\n+public class LingeredAppWithConcurrentLock extends LingeredApp {\n+\n+    private static final Lock lock = new ReentrantLock();\n+\n+    public static void lockMethod(Lock lock) {\n+        lock.lock();\n+        synchronized (lock) {\n+            try {\n+                Thread.sleep(300000);\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    public static void main(String args[]) {\n+        Thread classLock1 = new Thread(() -> lockMethod(lock));\n+        Thread classLock2 = new Thread(() -> lockMethod(lock));\n+        Thread classLock3 = new Thread(() -> lockMethod(lock));\n+\n+        classLock1.start();\n+        classLock2.start();\n+        classLock3.start();\n+\n+        \/\/ Wait until all threads have reached their blocked or timed wait state\n+        while ((classLock1.getState() != Thread.State.WAITING &&\n+                classLock1.getState() != Thread.State.TIMED_WAITING) ||\n+               (classLock2.getState() != Thread.State.WAITING &&\n+                classLock2.getState() != Thread.State.TIMED_WAITING) ||\n+               (classLock3.getState() != Thread.State.WAITING &&\n+                classLock3.getState() != Thread.State.TIMED_WAITING)) {\n+            try {\n+                Thread.sleep(100);\n+            } catch (InterruptedException ex) {\n+            }\n+        }\n+        System.out.println(\"classLock1 state: \" + classLock1.getState());\n+        System.out.println(\"classLock2 state: \" + classLock2.getState());\n+        System.out.println(\"classLock3 state: \" + classLock3.getState());\n+\n+        LingeredApp.main(args);\n+    }\n+ }\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/LingeredAppWithConcurrentLock.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,1 +82,1 @@\n- *   output = a.getAppOutput();\n+ *   output = a.getOutput();\n","filename":"test\/lib\/jdk\/test\/lib\/apps\/LingeredApp.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}