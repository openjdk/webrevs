{"files":[{"patch":"@@ -55,0 +55,2 @@\n+    record ConcurrencyConfig(Config config, int concurrencyLevel) {}\n+\n@@ -59,0 +61,3 @@\n+    static final Stream<Integer> concurrencyLevels() { return Stream.of(1, 2, 3, 10,\n+            1000); }\n+\n@@ -69,0 +74,4 @@\n+    static final Stream<ConcurrencyConfig> concurrencyConfigurations() {\n+        return configurations().flatMap( c -> concurrencyLevels().map( l -> new ConcurrencyConfig(c, l)) );\n+    }\n+\n@@ -109,0 +118,36 @@\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false } )\n+    public void rethrowsSubtypesOfRuntimeExceptionsUnwrapped(boolean parallel) {\n+        final var stream = parallel ? Stream.of(1).parallel() : Stream.of(1);\n+\n+        var exception =\n+                assertThrows(\n+                        IllegalStateException.class,\n+                        () -> stream.gather(\n+                                Gatherers.<Integer, Integer>mapConcurrent(2, x -> {\n+                                    throw new IllegalStateException(\"expected\");\n+                                })\n+                        ).toList()\n+                );\n+        assertEquals(\"expected\", exception.getMessage());\n+        assertNull(exception.getCause());\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false } )\n+    public void rethrowsErrorsWrappedAsRuntimeExceptions(boolean parallel) {\n+        final var stream = parallel ? Stream.of(1).parallel() : Stream.of(1);\n+\n+        var exception =\n+                assertThrows(\n+                        RuntimeException.class,\n+                        () -> stream.gather(\n+                                Gatherers.<Integer, Integer>mapConcurrent(2, x -> {\n+                                    throw new Error(\"expected\");\n+                                })\n+                        ).toList()\n+                );\n+        assertEquals(\"expected\", exception.getCause().getMessage());\n+        assertEquals(Error.class, exception.getCause().getClass());\n+    }\n+\n@@ -242,6 +287,5 @@\n-    @MethodSource(\"configurations\")\n-    public void behavesAsExpected(Config config) {\n-        for (var concurrency : List.of(1, 2, 3, 10, 1000)) {\n-            final var expectedResult = config.stream()\n-                    .map(x -> x * x)\n-                    .toList();\n+    @MethodSource(\"concurrencyConfigurations\")\n+    public void behavesAsExpected(ConcurrencyConfig cc) {\n+        final var expectedResult = cc.config().stream()\n+                .map(x -> x * x)\n+                .toList();\n@@ -249,3 +293,3 @@\n-            final var result = config.stream()\n-                    .gather(Gatherers.mapConcurrent(concurrency, x -> x * x))\n-                    .toList();\n+        final var result = cc.config().stream()\n+                .gather(Gatherers.mapConcurrent(cc.concurrencyLevel(), x -> x * x))\n+                .toList();\n@@ -253,2 +297,1 @@\n-            assertEquals(expectedResult, result);\n-        }\n+        assertEquals(expectedResult, result);\n@@ -258,10 +301,3 @@\n-    @MethodSource(\"configurations\")\n-    public void behavesAsExpectedWhenShortCircuited(Config config) {\n-        \/\/ Test short-circuiting\n-        for (var concurrency : List.of(1, 2, 3, 10, 1000)) {\n-            final var limitTo = Math.max(config.streamSize() \/ 2, 1);\n-\n-            final var expectedResult = config.stream()\n-                    .map(x -> x * x)\n-                    .limit(limitTo)\n-                    .toList();\n+    @MethodSource(\"concurrencyConfigurations\")\n+    public void behavesAsExpectedWhenShortCircuited(ConcurrencyConfig cc) {\n+        final var limitTo = Math.max(cc.config().streamSize() \/ 2, 1);\n@@ -269,4 +305,4 @@\n-            final var result = config.stream()\n-                    .gather(Gatherers.mapConcurrent(concurrency, x -> x * x))\n-                    .limit(limitTo)\n-                    .toList();\n+        final var expectedResult = cc.config().stream()\n+                .map(x -> x * x)\n+                .limit(limitTo)\n+                .toList();\n@@ -274,2 +310,6 @@\n-            assertEquals(expectedResult, result);\n-        }\n+        final var result = cc.config().stream()\n+                .gather(Gatherers.mapConcurrent(cc.concurrencyLevel(), x -> x * x))\n+                .limit(limitTo)\n+                .toList();\n+\n+        assertEquals(expectedResult, result);\n","filename":"test\/jdk\/java\/util\/stream\/GatherersMapConcurrentTest.java","additions":67,"deletions":27,"binary":false,"changes":94,"status":"modified"}]}