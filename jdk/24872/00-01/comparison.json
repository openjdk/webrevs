{"files":[{"patch":"@@ -535,0 +535,1 @@\n+  { \"PerfDataSamplingInterval\",     JDK_Version::undefined(), JDK_Version::jdk(25), JDK_Version::jdk(26) },\n@@ -538,1 +539,0 @@\n-  { \"PerfDataSamplingInterval\",     JDK_Version::undefined(), JDK_Version::jdk(25), JDK_Version::undefined() },\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -419,2 +419,2 @@\n-  #ifdef ASSERT\n-    ResourceMark rm(THREAD);\n+#ifdef ASSERT\n+  ResourceMark rm(THREAD);\n@@ -422,2 +422,2 @@\n-    \/\/ setup the arguments to getProperty\n-    Handle key_str   = java_lang_String::create_from_str(name, CHECK);\n+  \/\/ setup the arguments to getProperty\n+  Handle key_str   = java_lang_String::create_from_str(name, CHECK);\n@@ -425,2 +425,2 @@\n-    \/\/ return value\n-    JavaValue result(T_OBJECT);\n+  \/\/ return value\n+  JavaValue result(T_OBJECT);\n@@ -428,7 +428,4 @@\n-    \/\/ public static String getProperty(String key, String def);\n-    JavaCalls::call_static(&result,\n-                           vmClasses::System_klass(),\n-                           vmSymbols::getProperty_name(),\n-                           vmSymbols::string_string_signature(),\n-                           key_str,\n-                           CHECK);\n+  \/\/ public static String getProperty(String key, String def);\n+  JavaCalls::call_static(&result, vmClasses::System_klass(),\n+                         vmSymbols::getProperty_name(),\n+                         vmSymbols::string_string_signature(), key_str, CHECK);\n@@ -436,2 +433,2 @@\n-    oop value_oop = result.get_oop();\n-    assert(value_oop != nullptr, \"property must have a value\");\n+  oop value_oop = result.get_oop();\n+  assert(value_oop != nullptr, \"property must have a value\");\n@@ -439,2 +436,2 @@\n-    \/\/ convert Java String to utf8 string\n-    char* system_value = java_lang_String::as_utf8_string(value_oop);\n+  \/\/ convert Java String to utf8 string\n+  char *system_value = java_lang_String::as_utf8_string(value_oop);\n@@ -442,4 +439,4 @@\n-    assert(strcmp(value, system_value) == 0, \"property value mustn't differ from System.getProperty. Our value is: %s, System.getProperty is: %s\",\n-           value, system_value);\n-  #endif \/\/ ASSERT\n-  }\n+  assert(strcmp(value, system_value) == 0, \"property value mustn't differ from System.getProperty. Our value is: %s, System.getProperty is: %s\",\n+         value, system_value);\n+#endif \/\/ ASSERT\n+}\n@@ -455,4 +452,3 @@\n-  if (value != nullptr) {\n-    \/\/ create the property counter\n-    PerfDataManager::create_string_constant(name_space, name, value, CHECK);\n-  }\n+\n+  \/\/ create the property counter\n+  PerfDataManager::create_string_constant(name_space, name, value, CHECK);\n","filename":"src\/hotspot\/share\/runtime\/perfData.cpp","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -852,1 +852,1 @@\n-  PerfDataManager::create_misc_perfdata();\n+  if (UsePerfData)         PerfDataManager::create_misc_perfdata();\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}