{"files":[{"patch":"@@ -519,3 +519,0 @@\n-  create_constant(SUN_OS, \"hrt.now\", PerfData::U_Hertz,\n-    os::elapsed_frequency(), CHECK);\n-\n","filename":"src\/hotspot\/share\/runtime\/perfData.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -247,5 +247,3 @@\n-     * gross synchronization works by polling for the hotspot.rt.hrt.ticks\n-     * counter, which is the last counter created by the StatSampler\n-     * initialization code. The counter is updated when the watcher thread\n-     * starts scheduling tasks, which is the last thing done in vm\n-     * initialization.\n+     * gross synchronization works by polling for the hotspot.rt.hrt.frequency\n+     * constant, which is created by the PerfData initialization code. The\n+     * creation of constants is one of the last things done in vm initialization.\n@@ -261,1 +259,1 @@\n-        String name = \"hotspot.rt.hrt.ticks\";\n+        String name = \"hotspot.rt.hrt.frequency\";\n","filename":"src\/jdk.internal.jvmstat\/share\/classes\/sun\/jvmstat\/perfdata\/monitor\/v1_0\/PerfDataBuffer.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -544,2 +544,0 @@\n-alias sun.os.hrt.ticks                            \/\/ 1.5.0 b39\n-\thotspot.rt.hrt.ticks                      \/\/ 1.4.1\n","filename":"src\/jdk.internal.jvmstat\/share\/classes\/sun\/jvmstat\/perfdata\/resources\/aliasmap","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}