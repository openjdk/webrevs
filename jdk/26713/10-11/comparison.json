{"files":[{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary Test verifies that MethodExit event is correctly posted\n- * if exception occured in the current thread.\n- *\n- * @bug 8365192\n- * @run main\/othervm\/native -agentlib:ExceptionOccurred ExceptionOccurred\n- *\/\n-public class ExceptionOccurred {\n-\n-    private static native void enable();\n-    private static native void disableAndCheck();\n-\n-    static String exceptionExit() {\n-        throw new RuntimeException(\"MyRuntimeException\");\n-    }\n-\n-\n-    \/\/ Called from ExceptionExit MethodExit callback via JNI\n-    static String upCall() {\n-        return \"MyNewString\";\n-    }\n-\n-    public static void main(String[] args) throws InterruptedException {\n-        System.loadLibrary(\"ExceptionOccurred\");\n-        try {\n-            enable();\n-            exceptionExit();\n-        } catch (RuntimeException e){\n-            disableAndCheck();\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MethodExit\/ExceptionOccurred.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test verifies that MethodExit event is correctly posted\n+ * if exception occured in the current thread.\n+ *\n+ * @bug 8365192\n+ * @run main\/othervm\/native -agentlib:TestMethodExitWithPendingException TestMethodExitWithPendingException\n+ *\/\n+public class TestMethodExitWithPendingException {\n+\n+    private static native void enable();\n+    private static native void disableAndCheck();\n+\n+    static String exceptionExit() {\n+        throw new RuntimeException(\"MyRuntimeException\");\n+    }\n+\n+\n+    \/\/ Called from ExceptionExit MethodExit callback via JNI\n+    static String upCall() {\n+        return \"MyNewString\";\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException {\n+        System.loadLibrary(\"TestMethodExitWithPendingException\");\n+        try {\n+            enable();\n+            exceptionExit();\n+        } catch (RuntimeException e){\n+            disableAndCheck();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MethodExit\/PendingException\/TestMethodExitWithPendingException.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -61,1 +61,1 @@\n-  jclass main_class = jni->FindClass(\"ExceptionOccurred\");\n+  jclass main_class = jni->FindClass(\"TestMethodExitWithPendingException\");\n@@ -63,1 +63,1 @@\n-    fatal(jni,\"Can't find ExceptionOccurred class.\");\n+    fatal(jni,\"Can't find TestMethodExitWithPendingException class.\");\n@@ -110,1 +110,1 @@\n-Java_ExceptionOccurred_enable(JNIEnv *jni, jclass clazz) {\n+Java_TestMethodExitWithPendingException_enable(JNIEnv *jni, jclass clazz) {\n@@ -117,1 +117,1 @@\n-Java_ExceptionOccurred_disableAndCheck(JNIEnv *jni, jclass clazz) {\n+Java_TestMethodExitWithPendingException_disableAndCheck(JNIEnv *jni, jclass clazz) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MethodExit\/PendingException\/libTestMethodExitWithPendingException.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MethodExit\/ExceptionOccurred\/libExceptionOccurred.cpp","status":"renamed"}]}