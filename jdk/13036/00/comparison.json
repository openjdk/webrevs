{"files":[{"patch":"@@ -1386,11 +1386,0 @@\n-void CodeCache::make_marked_nmethods_deoptimized() {\n-  RelaxedCompiledMethodIterator iter(RelaxedCompiledMethodIterator::only_not_unloading);\n-  while(iter.next()) {\n-    CompiledMethod* nm = iter.method();\n-    if (nm->is_marked_for_deoptimization() && !nm->has_been_deoptimized() && nm->can_be_deoptimized()) {\n-      nm->make_not_entrant();\n-      nm->make_deoptimized();\n-    }\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -310,1 +310,0 @@\n-  static void make_marked_nmethods_deoptimized();\n","filename":"src\/hotspot\/share\/code\/codeCache.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+    _next_deoptimization_link(nullptr),\n@@ -71,0 +72,1 @@\n+    _next_deoptimization_link(nullptr),\n","filename":"src\/hotspot\/share\/code\/compiledMethod.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+  friend class DeoptimizationScopeIterator;\n@@ -154,0 +155,3 @@\n+  \/\/ Used to link deoptimization marked methods.\n+  \/\/ Invariant: all methods in the list have the same deoptimization generation.\n+  CompiledMethod*               _next_deoptimization_link;\n","filename":"src\/hotspot\/share\/code\/compiledMethod.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -101,3 +101,4 @@\n-uint64_t DeoptimizationScope::_committed_deopt_gen = 0;\n-uint64_t DeoptimizationScope::_active_deopt_gen    = 1;\n-bool     DeoptimizationScope::_committing_in_progress = false;\n+uint64_t        DeoptimizationScope::_committed_deopt_gen = 0;\n+uint64_t        DeoptimizationScope::_active_deopt_gen    = 1;\n+bool            DeoptimizationScope::_committing_in_progress = false;\n+CompiledMethod* DeoptimizationScope::_root_deoptimization_link = nullptr;\n@@ -137,0 +138,3 @@\n+\n+  cm->_next_deoptimization_link = DeoptimizationScope::_root_deoptimization_link;\n+  DeoptimizationScope::_root_deoptimization_link = cm;\n@@ -149,0 +153,71 @@\n+class DeoptimizationScopeIterator {\n+  CompiledMethod* _cursor;\n+  CompiledMethod* _method;\n+  DEBUG_ONLY(uint64_t _committing_gen);\n+ public:\n+  DeoptimizationScopeIterator(CompiledMethod* root, uint64_t committing_gen);\n+  bool next();\n+  CompiledMethod* method();\n+};\n+\n+DeoptimizationScopeIterator::DeoptimizationScopeIterator(CompiledMethod* root, uint64_t committing_gen) :\n+    _cursor(root), _method(nullptr) {\n+  DEBUG_ONLY(_committing_gen = committing_gen);\n+}\n+\n+bool DeoptimizationScopeIterator::next() {\n+  _method = _cursor;\n+  if (_method == nullptr) {\n+    return false;\n+  }\n+  _cursor = _cursor->_next_deoptimization_link;\n+  assert(_method->_deoptimization_generation == _committing_gen, \"Bad deoptimization generation in list\");\n+  return true;\n+}\n+\n+CompiledMethod* DeoptimizationScopeIterator::method() {\n+  return _method;\n+}\n+\n+class DeoptimizeMarkedClosure : public HandshakeClosure {\n+ public:\n+  DeoptimizeMarkedClosure() : HandshakeClosure(\"Deoptimize\") {}\n+  void do_thread(Thread* thread) {\n+    JavaThread* jt = JavaThread::cast(thread);\n+    jt->deoptimize_marked_methods();\n+  }\n+};\n+\n+static void deoptimize_all(DeoptimizationScopeIterator iter) {\n+  ResourceMark rm;\n+\n+  \/\/ Make the dependent methods not entrant\n+  while(iter.next()) {\n+    CompiledMethod* nm = iter.method();\n+    if (nm->is_marked_for_deoptimization() && !nm->has_been_deoptimized() && nm->can_be_deoptimized()) {\n+      nm->make_not_entrant();\n+      nm->make_deoptimized();\n+    }\n+  }\n+\n+  DeoptimizeMarkedClosure deopt;\n+  if (SafepointSynchronize::is_at_safepoint()) {\n+    Threads::java_threads_do(&deopt);\n+  } else {\n+    Handshake::execute(&deopt);\n+  }\n+}\n+\n+void DeoptimizationScope::verify_marked_nmethods_deoptimized(uint64_t committed_gen) {\n+#ifdef ASSERT\n+  RelaxedCompiledMethodIterator iter(RelaxedCompiledMethodIterator::only_not_unloading);\n+  while(iter.next()) {\n+    CompiledMethod* nm = iter.method();\n+    if (nm->_deoptimization_generation != committed_gen) {\n+      continue;\n+    }\n+    assert(!nm->can_be_deoptimized() || nm->has_been_deoptimized(), \"Missed deoptimization\");\n+  }\n+#endif\n+}\n+\n@@ -160,0 +235,1 @@\n+    DeoptimizationScopeIterator iter(DeoptimizationScope::_root_deoptimization_link, DeoptimizationScope::_active_deopt_gen);\n@@ -162,1 +238,3 @@\n-    Deoptimization::deoptimize_all_marked();\n+    DeoptimizationScope::_root_deoptimization_link = nullptr;\n+    deoptimize_all(iter);\n+    verify_marked_nmethods_deoptimized(DeoptimizationScope::_committed_deopt_gen);\n@@ -167,0 +245,1 @@\n+  CompiledMethod* root = nullptr;\n@@ -181,0 +260,1 @@\n+        root = DeoptimizationScope::_root_deoptimization_link;\n@@ -183,0 +263,1 @@\n+        DeoptimizationScope::_root_deoptimization_link = nullptr;\n@@ -196,1 +277,3 @@\n-      Deoptimization::deoptimize_all_marked(); \/\/ May safepoint and an additional deopt may have occurred.\n+      DeoptimizationScopeIterator iter(root, comitting);\n+      deoptimize_all(iter); \/\/ May safepoint and an additional deopt may have occurred.\n+      verify_marked_nmethods_deoptimized(comitting);\n@@ -1024,23 +1107,0 @@\n-class DeoptimizeMarkedClosure : public HandshakeClosure {\n- public:\n-  DeoptimizeMarkedClosure() : HandshakeClosure(\"Deoptimize\") {}\n-  void do_thread(Thread* thread) {\n-    JavaThread* jt = JavaThread::cast(thread);\n-    jt->deoptimize_marked_methods();\n-  }\n-};\n-\n-void Deoptimization::deoptimize_all_marked() {\n-  ResourceMark rm;\n-\n-  \/\/ Make the dependent methods not entrant\n-  CodeCache::make_marked_nmethods_deoptimized();\n-\n-  DeoptimizeMarkedClosure deopt;\n-  if (SafepointSynchronize::is_at_safepoint()) {\n-    Threads::java_threads_do(&deopt);\n-  } else {\n-    Handshake::execute(&deopt);\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":88,"deletions":28,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+class CompiledMethod;\n@@ -51,0 +52,2 @@\n+  \/\/ List of methods in the deopt scope with active gen\n+  static CompiledMethod* _root_deoptimization_link;\n@@ -56,0 +59,2 @@\n+  void verify_marked_nmethods_deoptimized(uint64_t committed_gen);\n+\n@@ -177,5 +182,0 @@\n-  \/\/ Make all nmethods that are marked_for_deoptimization not_entrant and deoptimize any live\n-  \/\/ activations using those nmethods. Scan of the code cache is done to\n-  \/\/ find all marked nmethods and they are made not_entrant.\n-  static void deoptimize_all_marked();\n-\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}