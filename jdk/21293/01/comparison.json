{"files":[{"patch":"@@ -32,4 +32,1 @@\n-import java.awt.AWTException;\n-import java.awt.EventQueue;\n-import java.awt.Robot;\n-import java.awt.event.KeyEvent;\n+\n@@ -39,0 +36,4 @@\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n@@ -42,0 +43,1 @@\n+    static volatile int counter = 0;\n@@ -43,2 +45,1 @@\n-    static int counter = 0;\n-    static TestThread robotThread;\n+    static TestThread testThread;\n@@ -46,0 +47,2 @@\n+    static CountDownLatch progressLatch;\n+    static Robot robot;\n@@ -49,23 +52,18 @@\n-\n-        createTestUI();\n-\n-        monitor = new ProgressMonitor(frame, \"Progress\", null, 0, 100);\n-\n-        robotThread = new TestThread();\n-        robotThread.start();\n-\n-        for (counter = 0; counter <= 100; counter += 10) {\n-            Thread.sleep(1000);\n-\n-            EventQueue.invokeAndWait(new Runnable() {\n-                @Override\n-                public void run() {\n-                    if (!monitor.isCanceled()) {\n-                        monitor.setProgress(counter);\n-                        System.out.println(\"Progress bar is in progress\");\n-                    }\n-                }\n-            });\n-\n-            if (monitor.isCanceled()) {\n-                break;\n+        try {\n+            progressLatch = new CountDownLatch(20);\n+            createTestUI();\n+            robot = new Robot();\n+            robot.setAutoDelay(50);\n+            robot.setAutoWaitForIdle(true);\n+            testThread = new TestThread();\n+            testThread.start();\n+            Thread.sleep(100);\n+            if (progressLatch.await(15, TimeUnit.SECONDS)) {\n+                System.out.println(\"Progress monitor completed 20%, lets press Esc...\");\n+                robot.keyPress(KeyEvent.VK_ESCAPE);\n+                robot.keyRelease(KeyEvent.VK_ESCAPE);\n+                System.out.println(\"ESC pressed....\");\n+            } else {\n+                System.out.println(\"Failure : No status available from Progress monitor...\");\n+                throw new RuntimeException(\n+                        \"Can't get the status from Progress monitor even after waiting too long..\");\n@@ -73,3 +71,0 @@\n-        }\n-\n-        disposeTestUI();\n@@ -77,2 +72,6 @@\n-        if (counter >= monitor.getMaximum()) {\n-            throw new RuntimeException(\"Escape key did not cancel the ProgressMonitor\");\n+            if (counter >= monitor.getMaximum()) {\n+                throw new RuntimeException(\"Escape key did not cancel the ProgressMonitor\");\n+            }\n+            System.out.println(\"Test Passed...\");\n+        } finally {\n+            disposeTestUI();\n@@ -82,10 +81,9 @@\n-     private static void createTestUI() throws Exception {\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-           @Override\n-           public void run() {\n-                frame = new JFrame(\"Test\");\n-                frame.setSize(300, 300);\n-                frame.setLocationByPlatform(true);\n-                frame.setVisible(true);\n-              }});\n-     }\n+    private static void createTestUI() throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            frame = new JFrame(\"Test\");\n+            frame.setSize(300, 300);\n+            monitor = new ProgressMonitor(frame, \"Progress\", \"1\", 0, 100);\n+            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+            frame.setLocationByPlatform(true);\n+        });\n+    }\n@@ -103,8 +101,0 @@\n-\n-    Robot testRobot;\n-\n-    TestThread() throws AWTException {\n-        super();\n-        testRobot = new Robot();\n-    }\n-\n@@ -113,10 +103,17 @@\n-        try {\n-            \/\/ Sleep for 5 seconds - so that the ProgressMonitor starts\n-            Thread.sleep(5000);\n-\n-            \/\/ Press and release Escape key\n-            testRobot.keyPress(KeyEvent.VK_ESCAPE);\n-            testRobot.delay(20);\n-            testRobot.keyRelease(KeyEvent.VK_ESCAPE);\n-        } catch (InterruptedException ex) {\n-            throw new RuntimeException(\"Exception in TestThread\");\n+        System.out.println(\"TestThread started.........\");\n+        for (ProgressMonitorEscapeKeyPress.counter = 0;\n+             ProgressMonitorEscapeKeyPress.counter <= 100;\n+             ProgressMonitorEscapeKeyPress.counter += 1) {\n+            ProgressMonitorEscapeKeyPress.robot.delay(100);\n+            ProgressMonitor monitor = ProgressMonitorEscapeKeyPress.monitor;\n+            if (!monitor.isCanceled()) {\n+                monitor.setNote(\"\" + ProgressMonitorEscapeKeyPress.counter);\n+                monitor.setProgress(ProgressMonitorEscapeKeyPress.counter);\n+                ProgressMonitorEscapeKeyPress.progressLatch.countDown();\n+                System.out.println(\"Progress bar is in progress.....\"\n+                        + ProgressMonitorEscapeKeyPress.counter + \"%\");\n+            }\n+            if (monitor.isCanceled()) {\n+                System.out.println(\"$$$$$$$$$$$$$$$ Monitor canceled\");\n+                break;\n+            }\n","filename":"test\/jdk\/javax\/swing\/ProgressMonitor\/ProgressMonitorEscapeKeyPress.java","additions":59,"deletions":62,"binary":false,"changes":121,"status":"modified"}]}