{"files":[{"patch":"@@ -1,71 +0,0 @@\n-package jdk.internal.util;\n-\n-import jdk.internal.misc.Unsafe;\n-import jdk.internal.vm.annotation.ForceInline;\n-import jdk.internal.vm.annotation.Stable;\n-\n-import java.util.function.Consumer;\n-import java.util.function.Supplier;\n-\n-final class SingleElementPoolImpl2<T> {\n-\n-    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n-\n-    private static final long LOCKED_OFFSET =\n-            UNSAFE.objectFieldOffset(SingleElementPoolImpl2.class, \"locked\");\n-    private static final long CLOSED_OFFSET =\n-            UNSAFE.objectFieldOffset(SingleElementPoolImpl2.class, \"closed\");\n-\n-    @Stable\n-    private final Supplier<? extends T> factory;\n-    @Stable\n-    private final Consumer<? super T> recycler;\n-    @Stable\n-    private final T pooledElement;\n-    \/\/ Using an int lock is faster than CASing a reference field\n-    private int locked;\n-    private int closed;\n-\n-    public SingleElementPoolImpl2(T pooledElement,\n-                                 Supplier<? extends T> factory,\n-                                 Consumer<? super T> recycler) {\n-        this.factory = factory;\n-        this.recycler = recycler;\n-        this.pooledElement = pooledElement;\n-    }\n-\n-    \/\/ Used reflectively\n-    @ForceInline\n-    public T take() {\n-        return lock() ? pooledElement : factory.get();\n-    }\n-\n-    \/\/ Used reflectively\n-    @ForceInline\n-    public void release(T element) {\n-        if (element == pooledElement) {\n-            unlock();\n-        } else {\n-            recycler.accept(element);\n-        }\n-    }\n-\n-    \/\/ This method is called by a separate cleanup thread when the associated\n-    \/\/ platform thread is dead.\n-    public void close() {\n-        if (!UNSAFE.compareAndSetInt(this, CLOSED_OFFSET, 0, 1)) {\n-            recycler.accept(pooledElement);\n-        }\n-    }\n-\n-    @ForceInline\n-    private boolean lock() {\n-        return UNSAFE.getAndSetInt(this, LOCKED_OFFSET, 1) == 0;\n-    }\n-\n-    @ForceInline\n-    private void unlock() {\n-        UNSAFE.putIntVolatile(this, LOCKED_OFFSET, 0);\n-    }\n-\n-}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/SingleElementPoolImpl2.java","additions":0,"deletions":71,"binary":false,"changes":71,"status":"deleted"}]}