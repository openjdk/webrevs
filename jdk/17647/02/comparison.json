{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+\n@@ -36,0 +37,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -78,2 +80,11 @@\n-    private record Deallocator(long address, long size, int capacity) implements Runnable {\n-        private Deallocator {\n+    private static final class Deallocator implements Runnable {\n+\n+        private static final long INVOKED_OFFSET = Unsafe.getUnsafe()\n+                .objectFieldOffset(Deallocator.class, \"invoked\");\n+\n+        private final long address;\n+        private final long size;\n+        private final int capacity;\n+        private int invoked;\n+\n+        private Deallocator(long address, long size, int capacity) {\n@@ -81,0 +92,3 @@\n+            this.address = address;\n+            this.size = size;\n+            this.capacity = capacity;\n@@ -84,2 +98,5 @@\n-            UNSAFE.freeMemory(address);\n-            Bits.unreserveMemory(size, capacity);\n+            \/\/ Ensure idempotency (paranoia)\n+            if (Unsafe.getUnsafe().compareAndSetInt(this, INVOKED_OFFSET, 0, 1)) {\n+                UNSAFE.freeMemory(address);\n+                Bits.unreserveMemory(size, capacity);\n+            }\n@@ -87,0 +104,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":23,"deletions":5,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,0 +50,1 @@\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n@@ -1159,0 +1160,3 @@\n+        private static final long INVOKED_OFFSET = Unsafe.getUnsafe()\n+                .objectFieldOffset(Unmapper.class, \"invoked\");\n+\n@@ -1164,0 +1168,1 @@\n+        private int invoked;\n@@ -1177,1 +1182,1 @@\n-        public long address() {\n+        public final long address() {\n@@ -1182,1 +1187,1 @@\n-        public FileDescriptor fileDescriptor() {\n+        public final FileDescriptor fileDescriptor() {\n@@ -1187,1 +1192,1 @@\n-        public void run() {\n+        public final void run() {\n@@ -1191,1 +1196,1 @@\n-        public long capacity() {\n+        public final long capacity() {\n@@ -1195,2 +1200,4 @@\n-        public void unmap() {\n-            nd.unmap(address, size);\n+        public final void unmap() {\n+            \/\/ Ensure idempotency (paranoia)\n+            if (Unsafe.getUnsafe().compareAndSetInt(this, INVOKED_OFFSET, 0, 1)) {\n+                nd.unmap(address, size);\n@@ -1198,6 +1205,7 @@\n-            \/\/ if this mapping has a valid file descriptor then we close it\n-            if (fd.valid()) {\n-                try {\n-                    nd.close(fd);\n-                } catch (IOException ignore) {\n-                    \/\/ nothing we can do\n+                \/\/ if this mapping has a valid file descriptor then we close it\n+                if (fd.valid()) {\n+                    try {\n+                        nd.close(fd);\n+                    } catch (IOException ignore) {\n+                        \/\/ nothing we can do\n+                    }\n@@ -1205,1 +1213,0 @@\n-            }\n@@ -1207,1 +1214,2 @@\n-            decrementStats();\n+                decrementStats();\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":23,"deletions":15,"binary":false,"changes":38,"status":"modified"}]}