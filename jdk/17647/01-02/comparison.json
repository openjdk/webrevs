{"files":[{"patch":"@@ -34,1 +34,1 @@\n-import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n@@ -37,0 +37,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -81,2 +82,2 @@\n-        private static final AtomicIntegerFieldUpdater<Deallocator> UPDATER =\n-                AtomicIntegerFieldUpdater.newUpdater(Deallocator.class, \"invoked\");\n+        private static final long INVOKED_OFFSET = Unsafe.getUnsafe()\n+                .objectFieldOffset(Deallocator.class, \"invoked\");\n@@ -87,1 +88,1 @@\n-        private volatile int invoked;\n+        private int invoked;\n@@ -94,1 +95,0 @@\n-            this.invoked = 0;\n@@ -99,1 +99,1 @@\n-            if (UPDATER.compareAndSet(this, 0, 1)) {\n+            if (Unsafe.getUnsafe().compareAndSetInt(this, INVOKED_OFFSET, 0, 1)) {\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1160,2 +1160,2 @@\n-        private static final AtomicIntegerFieldUpdater<Unmapper> UPDATER =\n-                AtomicIntegerFieldUpdater.newUpdater(Unmapper.class, \"invoked\");\n+        private static final long INVOKED_OFFSET = Unsafe.getUnsafe()\n+                .objectFieldOffset(Unmapper.class, \"invoked\");\n@@ -1168,1 +1168,1 @@\n-        private volatile int invoked;\n+        private int invoked;\n@@ -1179,1 +1179,0 @@\n-            this.invoked = 0;\n@@ -1203,1 +1202,1 @@\n-            if (UPDATER.compareAndSet(this, 0, 1)) {\n+            if (Unsafe.getUnsafe().compareAndSetInt(this, INVOKED_OFFSET, 0, 1)) {\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"}]}