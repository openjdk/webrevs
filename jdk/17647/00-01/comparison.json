{"files":[{"patch":"@@ -34,1 +34,1 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n@@ -79,1 +79,1 @@\n-    private record Deallocator(long address, long size, int capacity, AtomicBoolean invoked) implements Runnable {\n+    private static final class Deallocator implements Runnable {\n@@ -81,1 +81,9 @@\n-        private Deallocator {\n+        private static final AtomicIntegerFieldUpdater<Deallocator> UPDATER =\n+                AtomicIntegerFieldUpdater.newUpdater(Deallocator.class, \"invoked\");\n+\n+        private final long address;\n+        private final long size;\n+        private final int capacity;\n+        private volatile int invoked;\n+\n+        private Deallocator(long address, long size, int capacity) {\n@@ -83,0 +91,4 @@\n+            this.address = address;\n+            this.size = size;\n+            this.capacity = capacity;\n+            this.invoked = 0;\n@@ -87,1 +99,1 @@\n-            if (invoked.compareAndSet(false, true)) {\n+            if (UPDATER.compareAndSet(this, 0, 1)) {\n@@ -92,0 +104,1 @@\n+\n@@ -133,1 +146,1 @@\n-            cleaner = Cleaner.create(this, new Deallocator(base, size, cap, new AtomicBoolean()));\n+            cleaner = Cleaner.create(this, new Deallocator(base, size, cap));\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":18,"deletions":5,"binary":false,"changes":23,"status":"modified"}]}