{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import jdk.internal.misc.ThreadTracker;\n@@ -136,0 +137,12 @@\n+    private static class ThreadTrackHolder {\n+        static final ThreadTracker TRACKER = new ThreadTracker();\n+    }\n+\n+    private static Object tryBeginLookup() {\n+        return ThreadTrackHolder.TRACKER.tryBegin();\n+    }\n+\n+    private static void endLookup(Object key) {\n+        ThreadTrackHolder.TRACKER.end(key);\n+    }\n+\n@@ -144,6 +157,13 @@\n-        \/\/ Avoid a bootstrap issue where the commitEvent attempts to\n-        \/\/ trigger early loading of System Logger but where\n-        \/\/ the verification process still has JarFiles locked\n-        if (securityLogger == null && !JUJA.isInitializing()) {\n-            LOGGER_HANDLE.compareAndSet( null, System.getLogger(SECURITY_LOGGER_NAME));\n-            loggingSecurity = securityLogger.isLoggable(LOG_LEVEL);\n+        Object key;\n+        \/\/ Avoid bootstrap issues where\n+        \/\/ * commitEvent triggers early loading of System Logger but where\n+        \/\/   the verification process still has JarFiles locked\n+        \/\/ * the loading of the logging libraries involves recursive\n+        \/\/   calls to security libraries triggering recursion\n+        if (securityLogger == null && !JUJA.isInitializing() && (key = tryBeginLookup()) != null) {\n+            try {\n+                LOGGER_HANDLE.compareAndSet(null, System.getLogger(SECURITY_LOGGER_NAME));\n+                loggingSecurity = securityLogger.isLoggable(LOG_LEVEL);\n+            } finally {\n+                endLookup(key);\n+            }\n@@ -153,1 +173,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/EventHelper.java","additions":27,"deletions":8,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.logging.*;\n+\n+import jdk.internal.event.EventHelper;\n+\n+\/*\n+ * @test\n+ * @bug 8329013\n+ * @summary StackOverflowError when starting Apache Tomcat with signed jar\n+ * @modules java.base\/jdk.internal.event:+open\n+ * @run main\/othervm -Xmx32m -Djava.util.logging.manager=RecursiveEventHelper RecursiveEventHelper\n+ *\/\n+public class RecursiveEventHelper extends LogManager {\n+    public static void main(String[] args) throws Exception {\n+        String classname = System.getProperty(\"java.util.logging.manager\");\n+        if (!classname.equals(\"RecursiveEventHelper\")) {\n+            throw new RuntimeException(\"java.util.logging.manager not set\");\n+        }\n+\n+        \/\/ this call will trigger initialization of logging framework\n+        \/\/ which will call into our custom LogManager and use the\n+        \/\/ custom getProperty method below. EventHelper.isLoggingSecurity()\n+        \/\/ is also on the code path of original report and triggers\n+        \/\/ similar recursion.\n+        System.getLogger(\"testLogger\");\n+    }\n+\n+    @Override\n+    public String getProperty(String p) {\n+        \/\/ this call mimics issue reported in initial bug report where\n+        \/\/ opening of a signed jar during System logger initialization triggered\n+        \/\/ a recursive call (via EventHelper.isLoggingSecurity) back into\n+        \/\/ logger API\n+        EventHelper.isLoggingSecurity();\n+        return super.getProperty(p);\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/jdk\/security\/logging\/RecursiveEventHelper.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"}]}