{"files":[{"patch":"@@ -716,1 +716,1 @@\n-\/\/ Helper, on 32bit, for os::has_allocatable_memory_limit\n+\/\/ Helper, on 32bit, for os::commit_memory_limit\n@@ -734,0 +734,5 @@\n+bool os::commit_memory_limit(size_t& limit) {\n+  \/\/ On POSIX systems, the amount of allocatable memory is limited by the\n+  \/\/ size of the virtual address space.\n+  size_t as_limit = reserve_memory_limit();\n+  bool as_is_limited = as_limit != SIZE_MAX;\n@@ -735,12 +740,0 @@\n-bool os::has_allocatable_memory_limit(size_t* limit) {\n-  struct rlimit rlim;\n-  int getrlimit_res = getrlimit(RLIMIT_AS, &rlim);\n-  \/\/ if there was an error when calling getrlimit, assume that there is no limitation\n-  \/\/ on virtual memory.\n-  bool result;\n-  if ((getrlimit_res != 0) || (rlim.rlim_cur == RLIM_INFINITY)) {\n-    result = false;\n-  } else {\n-    *limit = (size_t)rlim.rlim_cur;\n-    result = true;\n-  }\n@@ -748,1 +741,6 @@\n-  return result;\n+  if (as_is_limited) {\n+    limit = as_limit;\n+    return true;\n+  }\n+\n+  return false;\n@@ -754,2 +752,2 @@\n-  if (result) {\n-    *limit = MIN2(*limit, max_virtual_limit);\n+  if (as_is_limited) {\n+    as_limit = MIN2(as_limit, max_virtual_limit);\n@@ -757,1 +755,1 @@\n-    *limit = max_virtual_limit;\n+    as_limit = max_virtual_limit;\n@@ -772,1 +770,1 @@\n-  size_t upper_limit = *limit;\n+  size_t upper_limit = as_limit;\n@@ -776,1 +774,1 @@\n-    *limit = upper_limit;\n+    limit = upper_limit;\n@@ -780,1 +778,1 @@\n-    *limit = min_allocation_size;\n+    limit = min_allocation_size;\n@@ -793,1 +791,1 @@\n-    *limit = lower_limit;\n+    limit = lower_limit;\n@@ -795,0 +793,1 @@\n+\n@@ -799,0 +798,18 @@\n+size_t os::reserve_memory_limit() {\n+  struct rlimit rlim;\n+  int getrlimit_res = getrlimit(RLIMIT_AS, &rlim);\n+\n+  \/\/ If there was an error calling getrlimit, conservatively assume no limit.\n+  if (getrlimit_res != 0) {\n+    return SIZE_MAX;\n+  }\n+\n+  \/\/ If the current limit is not infinity, there is a limit.\n+  if (rlim.rlim_cur != RLIM_INFINITY) {\n+    return (size_t)rlim.rlim_cur;\n+  }\n+\n+  \/\/ No limit\n+  return SIZE_MAX;\n+}\n+\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":38,"deletions":21,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -900,7 +900,0 @@\n-bool os::has_allocatable_memory_limit(size_t* limit) {\n-  MEMORYSTATUSEX ms;\n-  ms.dwLength = sizeof(ms);\n-  GlobalMemoryStatusEx(&ms);\n-  *limit = (size_t)ms.ullAvailVirtual;\n-  return true;\n-}\n@@ -3306,0 +3299,13 @@\n+bool os::commit_memory_limit(size_t& limit) {\n+  MEMORYSTATUSEX ms;\n+  ms.dwLength = sizeof(ms);\n+  GlobalMemoryStatusEx(&ms);\n+  limit = (size_t)ms.ullAvailVirtual;\n+  return true;\n+}\n+\n+size_t os::reserve_memory_limit() {\n+  \/\/ Virtual address space cannot be limited on Windows.\n+  return SIZE_MAX;\n+}\n+\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -33,11 +33,0 @@\n-static size_t address_space_limit() {\n-  size_t limit = 0;\n-\n-  if (os::has_allocatable_memory_limit(&limit)) {\n-    return limit;\n-  }\n-\n-  \/\/ No limit\n-  return SIZE_MAX;\n-}\n-\n@@ -46,1 +35,1 @@\n-  const size_t limit = address_space_limit() \/ MaxVirtMemFraction;\n+  const size_t limit = os::reserve_memory_limit() \/ MaxVirtMemFraction;\n@@ -51,1 +40,1 @@\n-  const size_t limit = address_space_limit();\n+  const size_t limit = os::reserve_memory_limit();\n","filename":"src\/hotspot\/share\/gc\/z\/zAddressSpaceLimit.cpp","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1492,1 +1492,1 @@\n-  if (os::has_allocatable_memory_limit(&max_allocatable)) {\n+  if (os::commit_memory_limit(max_allocatable)) {\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -343,1 +343,0 @@\n-  static bool has_allocatable_memory_limit(size_t* limit);\n@@ -452,0 +451,10 @@\n+  \/\/ Returns an upper limit beyond which reserve_memory() calls are guaranteed\n+  \/\/ to fail. It is not guaranteed that reserving less memory than this will\n+  \/\/ succeed, however.\n+  static size_t reserve_memory_limit();\n+\n+  \/\/ Returns an upper limit beyond which commit_memory() calls are guaranteed\n+  \/\/ to fail. It is not guaranteed that committing less memory than this will\n+  \/\/ succeed, however.\n+  static bool commit_memory_limit(size_t& limit);\n+\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"}]}