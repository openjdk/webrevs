{"files":[{"patch":"@@ -63,4 +63,8 @@\n-COMPARE_EXCEPTIONS_INCLUDE=\"$TOPDIR\/make\/scripts\/compare_exceptions.sh.incl\"\n-if [ ! -e \"$COMPARE_EXCEPTIONS_INCLUDE\" ]; then\n-    echo \"Error: Cannot locate the exceptions file, it should have been here: $COMPARE_EXCEPTIONS_INCLUDE\"\n-    exit 1\n+\n+if [ \"$OPENJDK_TARGET_OS\" = \"windows\" ]; then\n+  # We ship a pdb file inside a published zip. Such files can never be built\n+  # reproducibly, so ignore it.\n+  ACCEPTED_JARZIP_CONTENTS=\"\/modules_libs\/java.security.jgss\/w2k_lsa_auth.dll.pdb\"\n+elif [ \"$OPENJDK_TARGET_OS\" = \"macosx\" ]; then\n+  # Due to signing, we can never get a byte-by-byte identical build on macOS\n+  STRIP_TESTS_BEFORE_COMPARE=\"true\"\n@@ -68,2 +72,0 @@\n-# Include exception definitions\n-. \"$COMPARE_EXCEPTIONS_INCLUDE\"\n@@ -120,29 +122,0 @@\n-    if test \"x$SUFFIX\" = \"xclass\"; then\n-        if [ \"$NAME\" = \"SystemModules\\$all.class\" ] \\\n-           || [ \"$NAME\" = \"SystemModules\\$default.class\" ]; then\n-            # The SystemModules\\$*.classes are not comparable as they contain the\n-            # module hashes which would require a whole other level of\n-            # reproducible builds to get reproducible. There is also random\n-            # order of map initialization.\n-            TMP=\"\"\n-        elif [ \"$NAME\" = \"module-info.class\" ]; then\n-            # The module-info.class have several issues with random ordering of\n-            # elements in HashSets.\n-            MODULES_CLASS_FILTER=\"$SED \\\n-                -e 's\/,$\/\/' \\\n-                -e 's\/;$\/\/' \\\n-                -e 's\/^ *[0-9]*:\/\/' \\\n-                -e 's\/#[0-9]* *\/#\/' \\\n-                -e 's\/ *\\\/\\\/\/ \\\/\\\/\/' \\\n-                -e 's\/aload *[0-9]*\/aload X\/' \\\n-                -e 's\/ldc_w\/ldc  \/' \\\n-                | $SORT \\\n-                \"\n-            $JAVAP -c -constants -l -p \"${OTHER_FILE}\" \\\n-                | eval \"$MODULES_CLASS_FILTER\" >  ${OTHER_FILE}.javap &\n-            $JAVAP -c -constants -l -p \"${THIS_FILE}\" \\\n-                | eval \"$MODULES_CLASS_FILTER\" > ${THIS_FILE}.javap &\n-            wait\n-            TMP=$($DIFF ${OTHER_FILE}.javap ${THIS_FILE}.javap)\n-        fi\n-    fi\n@@ -315,1 +288,1 @@\n-# Compare the rest of the files\n+# Find all files to compare and separate them into different categories\n@@ -317,1 +290,1 @@\n-compare_general_files() {\n+locate_files() {\n@@ -319,2 +292,2 @@\n-    OTHER_DIR=$2\n-    WORK_DIR=$3\n+    TEMP_DIR=$COMPARE_ROOT\/support\n+    $MKDIR -p $TEMP_DIR\n@@ -322,9 +295,2 @@\n-    GENERAL_FILES=$(cd $THIS_DIR && $FIND . -type f ! -name \"*.so\" ! -name \"*.jar\" \\\n-        ! -name \"*.zip\" ! -name \"*.debuginfo\" ! -name \"*.dylib\" ! -name \"jexec\" \\\n-        ! -name \"modules\" ! -name \"ct.sym\" ! -name \"*.diz\" ! -name \"*.dll\" \\\n-        ! -name \"*.cpl\" ! -name \"*.pdb\" ! -name \"*.exp\" ! -name \"*.ilk\" \\\n-        ! -name \"*.lib\" ! -name \"*.jmod\" ! -name \"*.exe\" \\\n-        ! -name \"*.obj\" ! -name \"*.o\" ! -name \"jspawnhelper\" ! -name \"*.a\" \\\n-        ! -name \"*.tar.gz\" ! -name \"gtestLauncher\" \\\n-        ! -name \"*.map\" \\\n-        | $GREP -v \".\/bin\/\"  | $SORT | $FILTER)\n+    ALL_FILES_PATH=$TEMP_DIR\/all_files.txt\n+    cd $THIS_DIR && $FIND . -type f | $SORT | $FILTER > $ALL_FILES_PATH\n@@ -332,50 +298,18 @@\n-    echo Other files with binary differences...\n-    for f in $GENERAL_FILES\n-    do\n-        # Skip all files in test\/*\/native\n-        if [[ \"$f\" == *\/native\/* ]]; then\n-            continue\n-        fi\n-        if [ -e $OTHER_DIR\/$f ]; then\n-            SUFFIX=\"${f##*.}\"\n-            if [ \"$(basename $f)\" = \"release\" ]; then\n-                # In release file, ignore differences in source rev numbers\n-                OTHER_FILE=$WORK_DIR\/$f.other\n-                THIS_FILE=$WORK_DIR\/$f.this\n-                $MKDIR -p $(dirname $OTHER_FILE)\n-                $MKDIR -p $(dirname $THIS_FILE)\n-                RELEASE_FILTER=\"$SED -e 's\/SOURCE=\".*\"\/SOURCE=<src-rev>\/g'\"\n-                $CAT $OTHER_DIR\/$f | eval \"$RELEASE_FILTER\" > $OTHER_FILE\n-                $CAT $THIS_DIR\/$f  | eval \"$RELEASE_FILTER\" > $THIS_FILE\n-            elif [ \"$SUFFIX\" = \"svg\" ]; then\n-                # GraphViz has non-determinism when generating svg files\n-                OTHER_FILE=$WORK_DIR\/$f.other\n-                THIS_FILE=$WORK_DIR\/$f.this\n-                $MKDIR -p $(dirname $OTHER_FILE) $(dirname $THIS_FILE)\n-                SVG_FILTER=\"$SED \\\n-                    -e 's\/edge[0-9][0-9]*\/edgeX\/g'\n-                    \"\n-                $CAT $OTHER_DIR\/$f | eval \"$SVG_FILTER\" > $OTHER_FILE\n-                $CAT $THIS_DIR\/$f | eval \"$SVG_FILTER\" > $THIS_FILE\n-            elif [ \"$SUFFIX\" = \"jar_contents\" ]; then\n-                # The jar_contents files may have some lines in random order\n-                OTHER_FILE=$WORK_DIR\/$f.other\n-                THIS_FILE=$WORK_DIR\/$f.this\n-                $MKDIR -p $(dirname $OTHER_FILE) $(dirname $THIS_FILE)\n-                $RM $OTHER_FILE $THIS_FILE\n-                $CAT $OTHER_DIR\/$f | $SORT > $OTHER_FILE\n-                $CAT $THIS_DIR\/$f  | $SORT > $THIS_FILE\n-            else\n-                OTHER_FILE=$OTHER_DIR\/$f\n-                THIS_FILE=$THIS_DIR\/$f\n-            fi\n-            DIFF_OUT=$($DIFF $OTHER_FILE $THIS_FILE 2>&1)\n-            if [ -n \"$DIFF_OUT\" ]; then\n-                echo $f\n-                REGRESSIONS=true\n-                if [ \"$SHOW_DIFFS\" = \"true\" ]; then\n-                    echo \"$DIFF_OUT\"\n-                fi\n-            fi\n-        fi\n-    done\n+    ZIP_FILES_PATH=$TEMP_DIR\/zip_files.txt\n+    ZIP_FILTER=\"-e '\\.zip$' -e '\\.tar.gz$'\"\n+    $CAT \"$ALL_FILES_PATH\" | eval $GREP $ZIP_FILTER > $ZIP_FILES_PATH\n+\n+    JMOD_FILES_PATH=$TEMP_DIR\/jmod_files.txt\n+    JMOD_FILTER=\"-e '\\.jmod$'\"\n+    $CAT \"$ALL_FILES_PATH\" | eval $GREP $JMOD_FILTER > $JMOD_FILES_PATH\n+\n+    JAR_FILES_PATH=$TEMP_DIR\/jar_files.txt\n+    JAR_FILTER=\"-e '\\.jar$' -e '\\.war$' -e '\/module$'\"\n+    $CAT \"$ALL_FILES_PATH\" | eval $GREP $JAR_FILTER > $JAR_FILES_PATH\n+\n+    LIB_FILES_PATH=$TEMP_DIR\/lib_files.txt\n+    LIB_FILTER=\"-e '\\.dylib$' -e '\/lib.*\\.so$' -e '\\.dll$' -e '\\.obj$' -e '\\.o$' -e '\\.a$' -e '\\.cpl$'\"\n+    # On macos, filter out the dSYM debug symbols files. They are identically named .dylib files that reside\n+    # under a *.dSYM directory\n+    LIB_EXCLUDE=\"-e '\/lib.*\\.dSYM\/'\"\n+    $CAT \"$ALL_FILES_PATH\" | eval $GREP $LIB_FILTER | eval $GREP -v $LIB_EXCLUDE > $LIB_FILES_PATH\n@@ -383,0 +317,12 @@\n+    DEBUG_FILES_PATH=$TEMP_DIR\/debug_files.txt\n+    DEBUG_FILTER=\"-e '\\.dSYM\/' -e '\\.debuginfo$' -e '\\.diz$' -e '\\.pdb$' -e '\\.map$'\"\n+    $CAT \"$ALL_FILES_PATH\" | eval $GREP $DEBUG_FILTER > $DEBUG_FILES_PATH\n+\n+    EXEC_FILES_PATH=$TEMP_DIR\/exec_files.txt\n+    if [ \"$OPENJDK_TARGET_OS\" = \"windows\" ]; then\n+      EXEC_FILTER=\"-e '\\.exe$'\"\n+      $CAT \"$ALL_FILES_PATH\" | eval $GREP $EXEC_FILTER > $EXEC_FILES_PATH\n+    else\n+      # Find all files with the executable bit set\n+      cd $THIS_DIR && $FIND . -type f -perm -100 | $SORT | $FILTER > $EXEC_FILES_PATH\n+    fi\n@@ -384,0 +330,12 @@\n+    OTHER_FILES_PATH=$TEMP_DIR\/other_files.txt\n+    ACCOUNTED_FILES_PATH=$TEMP_DIR\/accounted_files.txt\n+    $CAT $ZIP_FILES_PATH $JMOD_FILES_PATH $JAR_FILES_PATH $LIB_FILES_PATH $DEBUG_FILES_PATH $EXEC_FILES_PATH > $ACCOUNTED_FILES_PATH\n+    $CAT $ACCOUNTED_FILES_PATH $ALL_FILES_PATH | $SORT | $UNIQ -u > $OTHER_FILES_PATH\n+\n+    ALL_ZIP_FILES=$($CAT $ZIP_FILES_PATH)\n+    ALL_JMOD_FILES=$($CAT $JMOD_FILES_PATH)\n+    ALL_JAR_FILES=$($CAT $JAR_FILES_PATH)\n+    ALL_LIB_FILES=$($CAT $LIB_FILES_PATH)\n+    ALL_DEBUG_FILES=$($CAT $DEBUG_FILES_PATH)\n+    ALL_EXEC_FILES=$($CAT $EXEC_FILES_PATH)\n+    ALL_OTHER_FILES=$($CAT $OTHER_FILES_PATH)\n@@ -453,0 +411,1 @@\n+        REGRESSIONS=true\n@@ -459,0 +418,1 @@\n+        REGRESSIONS=true\n@@ -487,0 +447,1 @@\n+            REGRESSIONS=true\n@@ -511,0 +472,1 @@\n+                REGRESSIONS=true\n@@ -550,0 +512,1 @@\n+        REGRESSIONS=true\n@@ -556,0 +519,1 @@\n+        REGRESSIONS=true\n@@ -570,2 +534,1 @@\n-    ZIPS=$(cd $THIS_DIR && $FIND . -type f -name \"*.zip\" -o -name \"*.tar.gz\" \\\n-        | $SORT | $FILTER )\n+    locate_files $THIS_DIR\n@@ -573,1 +536,1 @@\n-    if [ -n \"$ZIPS\" ]; then\n+    if [ -n \"$ALL_ZIP_FILES\" ]; then\n@@ -577,1 +540,1 @@\n-        for f in $ZIPS; do\n+        for f in $ALL_ZIP_FILES; do\n@@ -581,1 +544,0 @@\n-                    return_value=1\n@@ -583,0 +545,1 @@\n+                    return_value=1\n@@ -599,1 +562,1 @@\n-    JMODS=$(cd $THIS_DIR && $FIND . -type f -name \"*.jmod\" | $SORT | $FILTER )\n+    locate_files $THIS_DIR\n@@ -601,1 +564,1 @@\n-    if [ -n \"$JMODS\" ]; then\n+    if [ -n \"$ALL_JMOD_FILES\" ]; then\n@@ -605,1 +568,1 @@\n-        for f in $JMODS; do\n+        for f in $ALL_JMOD_FILES; do\n@@ -609,1 +572,0 @@\n-                    return_value=1\n@@ -611,0 +573,1 @@\n+                    return_value=1\n@@ -627,3 +590,1 @@\n-    # TODO filter?\n-    ZIPS=$(cd $THIS_DIR && $FIND . -type f -name \"*.jar\" -o -name \"*.war\" \\\n-        -o -name \"modules\" | $SORT | $FILTER)\n+    locate_files $THIS_DIR\n@@ -631,1 +592,1 @@\n-    if [ -n \"$ZIPS\" ]; then\n+    if [ -n \"$ALL_JAR_FILES\" ]; then\n@@ -635,1 +596,1 @@\n-        for f in $ZIPS; do\n+        for f in $ALL_JAR_FILES; do\n@@ -639,1 +600,0 @@\n-                    return_value=1\n@@ -641,0 +601,1 @@\n+                    return_value=1\n@@ -1052,9 +1013,1 @@\n-    LIBS=$(cd $THIS_DIR && $FIND . -type f \\( -name 'lib*.so' -o -name '*.dylib' \\\n-        -o -name '*.dll' -o -name '*.obj' -o -name '*.o' -o -name '*.a' \\\n-        -o -name '*.cpl' \\) | $SORT | $FILTER)\n-\n-    # On macos, filter out the dSYM debug symbols files as they are also\n-    # named *.dylib.\n-    if [ \"$OPENJDK_TARGET_OS\" = \"macosx\" ]; then\n-        LIBS=$(echo \"$LIBS\" | $GREP -v '\\.dSYM\/')\n-    fi\n+    locate_files $THIS_DIR\n@@ -1062,1 +1015,1 @@\n-    if [ -n \"$LIBS\" ]; then\n+    if [ -n \"$ALL_LIB_FILES\" ]; then\n@@ -1065,1 +1018,1 @@\n-        for l in $LIBS; do\n+        for l in $ALL_LIB_FILES; do\n@@ -1069,0 +1022,1 @@\n+                    REGRESSIONS=true\n@@ -1086,19 +1040,1 @@\n-    if [ \"$OPENJDK_TARGET_OS\" = \"windows\" ]; then\n-        EXECS=$(cd $THIS_DIR && $FIND . -type f -name '*.exe' | $SORT | $FILTER)\n-    else\n-        EXECS=$(cd $THIS_DIR && $FIND . -name db -prune -o -type f -perm -100 \\! \\\n-            \\( -name '*.so' -o -name '*.dylib' -o -name '*.dll' -o -name '*.cgi' \\\n-            -o -name '*.jar' -o -name '*.diz' -o -name 'jcontrol' -o -name '*.properties' \\\n-            -o -name '*.data' -o -name '*.bfc' -o -name '*.src' -o -name '*.txt' \\\n-            -o -name '*.cfg' -o -name 'meta-index' -o -name '*.properties.ja' \\\n-            -o -name '*.xml' -o -name '*.html' -o -name '*.png' -o -name 'README' \\\n-            -o -name '*.zip' -o -name '*.jimage' -o -name '*.java' -o -name '*.mf' \\\n-            -o -name '*.jpg' -o -name '*.wsdl' -o -name '*.js' -o -name '*.sh' \\\n-            -o -name '*.bat' -o -name '*LICENSE' -o -name '*.d' -o -name '*store' \\\n-            -o -name 'blocked' -o -name '*certs' -o -name '*.ttf' \\\n-            -o -name '*.jfc' -o -name '*.dat'  -o -name 'release' -o -name '*.dir'\\\n-            -o -name '*.sym' -o -name '*.idl' -o -name '*.h' -o -name '*.access' \\\n-            -o -name '*.template' -o -name '*.policy' -o -name '*.security' \\\n-            -o -name 'COPYRIGHT' -o -name '*.1' -o -name '*.debuginfo' \\\n-            -o -name 'classlist' \\) | $SORT | $FILTER)\n-    fi\n+    locate_files $THIS_DIR\n@@ -1106,1 +1042,1 @@\n-    if [ -n \"$EXECS\" ]; then\n+    if [ -n \"$ALL_EXEC_FILES\" ]; then\n@@ -1109,1 +1045,1 @@\n-        for e in $EXECS; do\n+        for e in $ALL_EXEC_FILES; do\n@@ -1113,0 +1049,1 @@\n+                    REGRESSIONS=true\n@@ -1122,0 +1059,89 @@\n+################################################################################\n+# Compare native debug symbol files\n+\n+compare_all_debug_files() {\n+    THIS_DIR=$1\n+    OTHER_DIR=$2\n+    WORK_DIR=$3\n+\n+    locate_files $THIS_DIR\n+\n+    echo Debug symbol files with binary differences...\n+    for f in $ALL_DEBUG_FILES\n+    do\n+        if [ -e $OTHER_DIR\/$f ]; then\n+            SUFFIX=\"${f##*.}\"\n+            if [ \"$SUFFIX\" = \"pdb\" ]; then\n+              # pdb files are never reproducible\n+              DIFF_OUT=\"\"\n+            else\n+              OTHER_FILE=$OTHER_DIR\/$f\n+              THIS_FILE=$THIS_DIR\/$f\n+              DIFF_OUT=$($DIFF $OTHER_FILE $THIS_FILE 2>&1)\n+            fi\n+\n+            if [ -n \"$DIFF_OUT\" ]; then\n+                echo $f\n+                REGRESSIONS=true\n+                if [ \"$SHOW_DIFFS\" = \"true\" ]; then\n+                    echo \"$DIFF_OUT\"\n+                fi\n+            fi\n+        fi\n+    done\n+}\n+\n+################################################################################\n+# Compare the rest of the files\n+\n+compare_all_other_files() {\n+    THIS_DIR=$1\n+    OTHER_DIR=$2\n+    WORK_DIR=$3\n+\n+    locate_files $THIS_DIR\n+\n+    echo Other files with binary differences...\n+    for f in $ALL_OTHER_FILES\n+    do\n+        # Skip all files in test\/*\/native\n+        if [[ \"$f\" == *\/native\/* ]]; then\n+            continue\n+        fi\n+        if [ -e $OTHER_DIR\/$f ]; then\n+            SUFFIX=\"${f##*.}\"\n+            if [ \"$(basename $f)\" = \"release\" ]; then\n+                # In release file, ignore differences in source rev numbers\n+                OTHER_FILE=$WORK_DIR\/$f.other\n+                THIS_FILE=$WORK_DIR\/$f.this\n+                $MKDIR -p $(dirname $OTHER_FILE)\n+                $MKDIR -p $(dirname $THIS_FILE)\n+                RELEASE_FILTER=\"$SED -e 's\/SOURCE=\".*\"\/SOURCE=<src-rev>\/g'\"\n+                $CAT $OTHER_DIR\/$f | eval \"$RELEASE_FILTER\" > $OTHER_FILE\n+                $CAT $THIS_DIR\/$f  | eval \"$RELEASE_FILTER\" > $THIS_FILE\n+            elif [ \"$SUFFIX\" = \"jar_contents\" ]; then\n+                # The jar_contents files are generated by the build and may have\n+                # some lines in random order. They are only included for demos,\n+                # which they shouldn't really...\n+                OTHER_FILE=$WORK_DIR\/$f.other\n+                THIS_FILE=$WORK_DIR\/$f.this\n+                $MKDIR -p $(dirname $OTHER_FILE) $(dirname $THIS_FILE)\n+                $RM $OTHER_FILE $THIS_FILE\n+                $CAT $OTHER_DIR\/$f | $SORT > $OTHER_FILE\n+                $CAT $THIS_DIR\/$f  | $SORT > $THIS_FILE\n+            else\n+                OTHER_FILE=$OTHER_DIR\/$f\n+                THIS_FILE=$THIS_DIR\/$f\n+            fi\n+            DIFF_OUT=$($DIFF $OTHER_FILE $THIS_FILE 2>&1)\n+            if [ -n \"$DIFF_OUT\" ]; then\n+                echo $f\n+                REGRESSIONS=true\n+                if [ \"$SHOW_DIFFS\" = \"true\" ]; then\n+                    echo \"$DIFF_OUT\"\n+                fi\n+            fi\n+        fi\n+    done\n+}\n+\n@@ -1520,1 +1546,3 @@\n-        compare_general_files $THIS_JDK $OTHER_JDK $COMPARE_ROOT\/jdk\n+        compare_all_other_files $THIS_JDK $OTHER_JDK $COMPARE_ROOT\/jdk\n+        echo -n \"JDK \"\n+        compare_all_debug_files $THIS_JDK $OTHER_JDK $COMPARE_ROOT\/jdk\n@@ -1524,1 +1552,3 @@\n-        compare_general_files $THIS_JDK_BUNDLE $OTHER_JDK_BUNDLE $COMPARE_ROOT\/jdk-bundle\n+        compare_all_other_files $THIS_JDK_BUNDLE $OTHER_JDK_BUNDLE $COMPARE_ROOT\/jdk-bundle\n+        echo -n \"JDK Bundle \"\n+        compare_all_debug_files $THIS_JDK_BUNDLE $OTHER_JDK_BUNDLE $COMPARE_ROOT\/jdk-bundle\n@@ -1528,1 +1558,3 @@\n-        compare_general_files $THIS_DOCS $OTHER_DOCS $COMPARE_ROOT\/docs\n+        compare_all_other_files $THIS_DOCS $OTHER_DOCS $COMPARE_ROOT\/docs\n+        echo -n \"Docs \"\n+        compare_all_debug_files $THIS_DOCS $OTHER_DOCS $COMPARE_ROOT\/docs\n@@ -1532,1 +1564,3 @@\n-        compare_general_files $THIS_TEST $OTHER_TEST $COMPARE_ROOT\/test\n+        compare_all_other_files $THIS_TEST $OTHER_TEST $COMPARE_ROOT\/test\n+        echo -n \"Test \"\n+        compare_all_debug_files $THIS_TEST $OTHER_TEST $COMPARE_ROOT\/test\n@@ -1535,1 +1569,2 @@\n-        compare_general_files $THIS_BASE_DIR $OTHER_BASE_DIR $COMPARE_ROOT\/base_dir\n+        compare_all_other_files $THIS_BASE_DIR $OTHER_BASE_DIR $COMPARE_ROOT\/base_dir\n+        compare_all_debug_files $THIS_BASE_DIR $OTHER_BASE_DIR $COMPARE_ROOT\/base_dir\n","filename":"make\/scripts\/compare.sh","additions":185,"deletions":150,"binary":false,"changes":335,"status":"modified"},{"patch":"@@ -1,65 +0,0 @@\n-#!\/bin\/bash\n-#\n-# Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# This script is not to be run as stand-alone, it should be included from\n-# compare.sh.\n-\n-##########################################################################################\n-# Check that we are run via inclusion from compare.sh and not as stand-alone.\n-if [ -z \"$COMPARE_EXCEPTIONS_INCLUDE\" ]; then\n-    echo \"Error: This script should not be run as stand-alone. It is included by compare.sh\"\n-    exit 1\n-fi\n-\n-##########################################################################################\n-# Diff exceptions\n-\n-if [ \"$OPENJDK_TARGET_OS\" = \"linux\" ]; then\n-  if [ \"$USE_PRECOMPILED_HEADER\" = \"true\" ]; then\n-    ACCEPTED_BIN_DIFF=\"\n-        .\/lib\/server\/libjvm.so\n-        .\/hotspot\/gtest\/server\/libjvm.so\n-        \"\n-    STRIP_BEFORE_COMPARE=\"\n-        .\/hotspot\/gtest\/server\/libjvm.so\n-        \"\n-   fi\n-elif [ \"$OPENJDK_TARGET_OS\" = \"windows\" ]; then\n-  SKIP_BIN_DIFF=\"true\"\n-  SKIP_FULLDUMP_DIFF=\"true\"\n-  ACCEPTED_JARZIP_CONTENTS=\"\n-      \/modules_libs\/java.security.jgss\/w2k_lsa_auth.dll.pdb\n-      \/modules_libs\/java.security.jgss\/w2k_lsa_auth.dll.map\n-      \/modules_libs\/java.security.jgss\/w2k_lsa_auth.dll\n-      \"\n-elif [ \"$OPENJDK_TARGET_OS\" = \"macosx\" ]; then\n-  ACCEPTED_BIN_DIFF=\"\n-      .\/lib\/libawt_lwawt.dylib\n-      .\/lib\/libosxapp.dylib\n-      .\/lib\/libosxui.dylib\n-      .\/lib\/server\/libjvm.dylib\n-      .\/hotspot\/gtest\/server\/libjvm.dylib\n-      \"\n-  STRIP_TESTS_BEFORE_COMPARE=\"true\"\n-fi\n","filename":"make\/scripts\/compare_exceptions.sh.incl","additions":0,"deletions":65,"binary":false,"changes":65,"status":"modified"}]}