{"files":[{"patch":"@@ -50,2 +50,4 @@\n-                Files.writeString(Path.of(\"c\"), \"\"));\n-        Asserts.assertEquals(Set.of(\"a\", \"b1\", \"b2\", \"bx\/x\", \"c\"), content(\"a.jar\"));\n+                Files.writeString(Path.of(\"c\"), \"\"),\n+                Files.writeString(Path.of(\"e1\"), \"\"),\n+                Files.writeString(Path.of(\"e2\"), \"\"));\n+        checkContent(\"a\", \"b1\", \"b2\", \"bx\/x\", \"c\", \"e1\", \"e2\");\n@@ -54,1 +56,1 @@\n-        Asserts.assertEquals(Set.of(\"b1\", \"b2\", \"bx\/x\", \"c\"), content(\"a.jar\"));\n+        checkContent(\"b1\", \"b2\", \"bx\/x\", \"c\", \"e1\", \"e2\");\n@@ -58,1 +60,9 @@\n-        Asserts.assertEquals(Set.of(\"c\"), content(\"a.jar\"));\n+        checkContent(\"c\", \"e1\", \"e2\");\n+\n+        \/\/ d* does not match\n+        JarUtils.deleteEntries(Path.of(\"a.jar\"), \"d*\");\n+        checkContent(\"c\", \"e1\", \"e2\");\n+\n+        \/\/ multiple patterns\n+        JarUtils.deleteEntries(Path.of(\"a.jar\"), \"d*\", \"e*\");\n+        checkContent(\"c\");\n@@ -61,3 +71,4 @@\n-    static Set<String> content(String name) throws IOException {\n-        try (var jf = new JarFile(name)) {\n-            return jf.stream().map(JarEntry::getName).collect(Collectors.toSet());\n+    static void checkContent(String... expected) throws IOException {\n+        try (var jf = new JarFile(\"a.jar\")) {\n+            Asserts.assertEquals(Set.of(expected),\n+                    jf.stream().map(JarEntry::getName).collect(Collectors.toSet()));\n","filename":"test\/lib-test\/jdk\/test\/lib\/util\/JarUtilsTest.java","additions":18,"deletions":7,"binary":false,"changes":25,"status":"modified"}]}