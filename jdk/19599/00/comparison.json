{"files":[{"patch":"@@ -200,0 +200,1 @@\n+    private boolean hasNonexistentEntries = false;\n@@ -738,0 +739,1 @@\n+        Map<String,Set<String>> entriesInSF = new HashMap<>();\n@@ -785,0 +787,1 @@\n+                                entriesInSF.put(alias, sf.getEntries().keySet());\n@@ -884,0 +887,3 @@\n+                        for (var signed : entriesInSF.values()) {\n+                            signed.remove(name);\n+                        }\n@@ -1079,0 +1085,7 @@\n+                        var signed = entriesInSF.get(s);\n+                        if (!signed.isEmpty()) {\n+                            if (verbose != null) {\n+                                System.out.println(rb.getString(\"history.nonexistent.entries\") + signed);\n+                            }\n+                            hasNonexistentEntries = true;\n+                        }\n@@ -1314,0 +1327,4 @@\n+        if (hasNonexistentEntries) {\n+            warnings.add(rb.getString(\"nonexistent.entries.found\"));\n+        }\n+\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -167,0 +167,1 @@\n+        {\"history.nonexistent.entries\", \"    Warning: nonexistent signed entries: \"},\n@@ -181,0 +182,1 @@\n+        {\"nonexistent.entries.found\", \"Nonexistent signed entries detected. See details in -verbose output.\"},\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Resources.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8309841\n+ * @summary Jarsigner should print a warning if an entry is removed\n+ * @library \/test\/lib\n+ *\/\n+\n+import jdk.test.lib.SecurityTools;\n+import jdk.test.lib.util.JarUtils;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class RemovedFiles {\n+    public static void main(String[] args) throws Exception {\n+        JarUtils.createJarFile(\n+                Path.of(\"a.jar\"),\n+                Path.of(\".\"),\n+                Files.writeString(Path.of(\"a\"), \"a\"),\n+                Files.writeString(Path.of(\"b\"), \"b\"));\n+        SecurityTools.keytool(\"-genkeypair -storepass changeit -keystore ks -alias x -dname CN=x -keyalg ed25519\");\n+        SecurityTools.jarsigner(\"-storepass changeit -keystore ks a.jar x\");\n+\n+        \/\/ All is fine at the beginning.\n+        SecurityTools.jarsigner(\"-verify a.jar\")\n+                .shouldNotContain(\"Nonexistent signed entries detected. See details in -verbose output.\");\n+\n+        \/\/ Remove an entry after signing. There will be a warning.\n+        JarUtils.deleteEntries(Path.of(\"a.jar\"), \"a\");\n+        SecurityTools.jarsigner(\"-verify a.jar\")\n+                .shouldContain(\"Nonexistent signed entries detected. See details in -verbose output.\");\n+        SecurityTools.jarsigner(\"-verify -verbose a.jar\")\n+                .shouldContain(\"Nonexistent signed entries detected. See details in -verbose output.\")\n+                .shouldContain(\"Warning: nonexistent signed entries: [a]\");\n+\n+        \/\/ Re-sign will not clear the warning.\n+        SecurityTools.jarsigner(\"-storepass changeit -keystore ks a.jar x\");\n+        SecurityTools.jarsigner(\"-verify a.jar\")\n+                .shouldContain(\"Nonexistent signed entries detected. See details in -verbose output.\");\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/RemovedFiles.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -323,0 +323,39 @@\n+    \/**\n+     * Remove entries from a ZIP file.\n+     *\n+     * Each entry can be a name or a name ending with \"*\".\n+     *\/\n+    public static void deleteEntries(Path jarfile, String... patterns)\n+            throws IOException\n+    {\n+        Path tmpfile = Files.createTempFile(\"jar\", \"jar\");\n+\n+        try (OutputStream out = Files.newOutputStream(tmpfile);\n+             JarOutputStream jos = new JarOutputStream(out)) {\n+            try (JarFile jf = new JarFile(jarfile.toString())) {\n+                Enumeration<JarEntry> jentries = jf.entries();\n+                top: while (jentries.hasMoreElements()) {\n+                    JarEntry jentry = jentries.nextElement();\n+                    String name = jentry.getName();\n+                    for (String pattern : patterns) {\n+                        if (pattern.endsWith(\"*\")) {\n+                            if (name.startsWith(pattern.substring(\n+                                    0, pattern.length() - 1))) {\n+                                continue top;\n+                            }\n+                        } else {\n+                            if (name.equals(pattern)) {\n+                                continue top;\n+                            }\n+                        }\n+                    }\n+                    jos.putNextEntry(copyEntry(jentry));\n+                    jf.getInputStream(jentry).transferTo(jos);\n+                }\n+            }\n+        }\n+\n+        \/\/ replace the original JAR file\n+        Files.move(tmpfile, jarfile, StandardCopyOption.REPLACE_EXISTING);\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/util\/JarUtils.java","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"}]}