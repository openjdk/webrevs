{"files":[{"patch":"@@ -1209,0 +1209,5 @@\n+  \/\/ Mod by zero?  Throw exception at runtime!\n+  if (t2 == TypeInteger::zero(bt)) {\n+    return Type::TOP;\n+  }\n+\n@@ -1218,5 +1223,0 @@\n-  \/\/ Mod by zero?  Throw exception at runtime!\n-  if (t2 == TypeInteger::zero(bt)) {\n-    return Type::TOP;\n-  }\n-\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8367967\n+ * @summary Ensure ModI\/LNode::Value is monotonic with potential division by 0\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:CompileOnly=compiler.c2.TestModValueMonotonic::test*\n+ *                   -XX:+StressCCP -XX:RepeatCompilation=100 -Xcomp compiler.c2.TestModValueMonotonic\n+ * @run main compiler.c2.TestModValueMonotonic\n+ *\/\n+package compiler.c2;\n+\n+public class TestModValueMonotonic {\n+    static int iFld;\n+    static long lFld;\n+    static int limit = 1000;\n+    static boolean flag;\n+\n+    public static void main(String[] args) {\n+        testInt();\n+        testLong();\n+    }\n+\n+    static void testInt() {\n+        int zero = 0;\n+\n+        \/\/ Make sure loop is not counted such that it is not removed. Created a more complex graph for CCP.\n+        for (int i = 1; i < limit; i*=4) {\n+            zero = 34;\n+        }\n+        int three = flag ? 0 : 3;\n+        iFld = three % zero; \/\/ phi[0..3] % phi[0..34]\n+    }\n+\n+    static void testLong() {\n+        long zero = 0;\n+\n+        \/\/ Make sure loop is not counted such that it is not removed. Created a more complex graph for CCP.\n+        for (int i = 1; i < limit; i*=4) {\n+            zero = 34;\n+        }\n+        long three = flag ? 0 : 3;\n+        lFld = three % zero; \/\/ phi[0..3] % phi[0..34]\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestModValueMonotonic.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}