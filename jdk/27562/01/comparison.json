{"files":[{"patch":"@@ -188,46 +188,0 @@\n-  \/\/ Frozen standard extensions\n-  \/\/ I RV64I\n-  \/\/ M Integer Multiplication and Division\n-  \/\/ A Atomic Instructions\n-  \/\/ F Single-Precision Floating-Point\n-  \/\/ D Single-Precision Floating-Point\n-  \/\/ (G = M + A + F + D)\n-  \/\/ Q Quad-Precision Floating-Point\n-  \/\/ C Compressed Instructions\n-  \/\/ H Hypervisor\n-  \/\/\n-  \/\/ Others, open and non-standard\n-  \/\/ V Vector\n-  \/\/\n-  \/\/ Cache Management Operations\n-  \/\/ Zicbom Cache Block Management Operations\n-  \/\/ Zicboz Cache Block Zero Operations\n-  \/\/ Zicbop Cache Block Prefetch Operations\n-  \/\/\n-  \/\/ Bit-manipulation\n-  \/\/ Zba Address generation instructions\n-  \/\/ Zbb Basic bit-manipulation\n-  \/\/ Zbc Carry-less multiplication\n-  \/\/ Zbs Single-bit instructions\n-  \/\/\n-  \/\/ Zfh Half-Precision Floating-Point instructions\n-  \/\/ Zfhmin Minimal Half-Precision Floating-Point instructions\n-  \/\/\n-  \/\/ Zicond Conditional operations\n-  \/\/\n-  \/\/ Zicsr Control and Status Register (CSR) Instructions\n-  \/\/ Zifencei Instruction-Fetch Fence\n-  \/\/ Zic64b Cache blocks must be 64 bytes in size, naturally aligned in the address space.\n-  \/\/ Zihintpause Pause instruction HINT\n-  \/\/\n-  \/\/ Zc  Code Size Reduction - Additional compressed instructions.\n-  \/\/ Zcb Simple code-size saving instructions\n-  \/\/\n-  \/\/ Other features and settings\n-  \/\/ mvendorid Manufactory JEDEC id encoded, ISA vol 2 3.1.2..\n-  \/\/ marchid   Id for microarch. Mvendorid plus marchid uniquely identify the microarch.\n-  \/\/ mimpid    A unique encoding of the version of the processor implementation.\n-  \/\/ unaligned_scalar Performance of misaligned scalar accesses (unknown, emulated, slow, fast, unsupported)\n-  \/\/ unaligned_vector Performance of misaligned vector accesses (unknown, unspported, slow, fast)\n-  \/\/ satp mode SATP bits (number of virtual addr bits) mbare, sv39, sv48, sv57, sv64\n-\n@@ -243,2 +197,1 @@\n-  decl(ext_I            ,  i           ,     ('I' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n-  decl(ext_M            ,  m           ,     ('M' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  \/* A Atomic Instructions *\/                                                                                              \\\n@@ -246,2 +199,1 @@\n-  decl(ext_F            ,  f           ,     ('F' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n-  decl(ext_D            ,  d           ,     ('D' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  \/* C Compressed Instructions *\/                                                                                          \\\n@@ -249,1 +201,5 @@\n-  decl(ext_Q            ,  q           ,     ('Q' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  \/* D Single-Precision Floating-Point *\/                                                                                  \\\n+  decl(ext_D            ,  d           ,     ('D' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  \/* F Single-Precision Floating-Point *\/                                                                                  \\\n+  decl(ext_F            ,  f           ,     ('F' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  \/* H Hypervisor *\/                                                                                                       \\\n@@ -251,0 +207,7 @@\n+  \/* I RV64I *\/                                                                                                            \\\n+  decl(ext_I            ,  i           ,     ('I' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  \/* M Integer Multiplication and Division *\/                                                                              \\\n+  decl(ext_M            ,  m           ,     ('M' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  \/* Q Quad-Precision Floating-Point *\/                                                                                    \\\n+  decl(ext_Q            ,  q           ,     ('Q' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  \/* V Vector *\/                                                                                                           \\\n@@ -252,3 +215,6 @@\n-  decl(ext_Zicbom       ,  Zicbom      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicbom))                              \\\n-  decl(ext_Zicboz       ,  Zicboz      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicboz))                              \\\n-  decl(ext_Zicbop       ,  Zicbop      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicbop))                              \\\n+                                                                                                                           \\\n+  \/* ----------------------- Other extensions ----------------------- *\/                                                   \\\n+                                                                                                                           \\\n+  \/* Atomic compare-and-swap (CAS) instructions *\/                                                                         \\\n+  decl(ext_Zacas        ,  Zacas       ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZacas))                               \\\n+  \/* Zba Address generation instructions *\/                                                                                \\\n@@ -256,0 +222,1 @@\n+  \/* Zbb Basic bit-manipulation *\/                                                                                         \\\n@@ -257,0 +224,1 @@\n+  \/* Zbc Carry-less multiplication *\/                                                                                      \\\n@@ -258,1 +226,1 @@\n-  decl(ext_Zbs          ,  Zbs         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZbs))                                 \\\n+  \/* Bitmanip instructions for Cryptography *\/                                                                             \\\n@@ -260,0 +228,3 @@\n+  \/* Zbs Single-bit instructions *\/                                                                                        \\\n+  decl(ext_Zbs          ,  Zbs         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZbs))                                 \\\n+  \/* Zcb Simple code-size saving instructions *\/                                                                           \\\n@@ -261,0 +232,1 @@\n+  \/* Additional Floating-Point instructions *\/                                                                             \\\n@@ -262,0 +234,1 @@\n+  \/* Zfh Half-Precision Floating-Point instructions *\/                                                                     \\\n@@ -263,0 +236,1 @@\n+  \/* Zfhmin Minimal Half-Precision Floating-Point instructions *\/                                                          \\\n@@ -264,1 +238,7 @@\n-  decl(ext_Zicsr        ,  Zicsr       ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  \/* Zicbom Cache Block Management Operations *\/                                                                           \\\n+  decl(ext_Zicbom       ,  Zicbom      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicbom))                              \\\n+  \/* Zicbop Cache Block Prefetch Operations *\/                                                                             \\\n+  decl(ext_Zicbop       ,  Zicbop      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicbop))                              \\\n+  \/* Zicboz Cache Block Zero Operations *\/                                                                                 \\\n+  decl(ext_Zicboz       ,  Zicboz      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicboz))                              \\\n+  \/* Base Counters and Timers *\/                                                                                           \\\n@@ -266,1 +246,5 @@\n-  decl(ext_Zifencei     ,  Zifencei    ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  \/* Zicond Conditional operations *\/                                                                                      \\\n+  decl(ext_Zicond       ,  Zicond      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicond))                              \\\n+  \/* Zicsr Control and Status Register (CSR) Instructions *\/                                                               \\\n+  decl(ext_Zicsr        ,  Zicsr       ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  \/* Zic64b Cache blocks must be 64 bytes in size, naturally aligned in the address space. *\/                              \\\n@@ -268,1 +252,3 @@\n-  decl(ext_Ztso         ,  Ztso        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZtso))                                \\\n+  \/* Zifencei Instruction-Fetch Fence *\/                                                                                   \\\n+  decl(ext_Zifencei     ,  Zifencei    ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  \/* Zihintpause Pause instruction HINT *\/                                                                                 \\\n@@ -270,1 +256,3 @@\n-  decl(ext_Zacas        ,  Zacas       ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZacas))                               \\\n+  \/* Total Store Ordering *\/                                                                                               \\\n+  decl(ext_Ztso         ,  Ztso        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZtso))                                \\\n+  \/* Vector Basic Bit-manipulation *\/                                                                                      \\\n@@ -272,0 +260,1 @@\n+  \/* Vector Carryless Multiplication *\/                                                                                    \\\n@@ -273,0 +262,1 @@\n+  \/* Vector Extension for Half-Precision Floating-Point *\/                                                                 \\\n@@ -274,0 +264,1 @@\n+  \/* Shorthand for Zvkned + Zvknhb + Zvkb + Zvkt *\/                                                                        \\\n@@ -275,1 +266,0 @@\n-  decl(ext_Zicond       ,  Zicond      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicond))                              \\\n@@ -291,0 +281,1 @@\n+  \/* Manufactory JEDEC id encoded, ISA vol 2 3.1.2.. *\/                                        \\\n@@ -292,0 +283,1 @@\n+  \/* Id for microarch. Mvendorid plus marchid uniquely identify the microarch. *\/              \\\n@@ -293,0 +285,1 @@\n+  \/* A unique encoding of the version of the processor implementation. *\/                      \\\n@@ -294,0 +287,1 @@\n+  \/* SATP bits (number of virtual addr bits) mbare, sv39, sv48, sv57, sv64 *\/                  \\\n@@ -295,0 +289,1 @@\n+  \/* Performance of misaligned scalar accesses (unknown, emulated, slow, fast, unsupported) *\/ \\\n@@ -296,0 +291,1 @@\n+  \/* Performance of misaligned vector accesses (unknown, unspported, slow, fast) *\/            \\\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":56,"deletions":60,"binary":false,"changes":116,"status":"modified"}]}