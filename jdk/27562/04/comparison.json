{"files":[{"patch":"@@ -38,2 +38,2 @@\n-#define DEF_RV_EXT_FEATURE(NAME, PRETTY, LINUX_BIT, FSTRING, FLAGF) \\\n-VM_Version::NAME##RVExtFeatureValue VM_Version::NAME;\n+#define DEF_RV_EXT_FEATURE(PRETTY, LINUX_BIT, FSTRING, FLAGF) \\\n+VM_Version::ext_##PRETTY##RVExtFeatureValue VM_Version::ext_##PRETTY;\n@@ -43,2 +43,2 @@\n-#define DEF_RV_NON_EXT_FEATURE(NAME, PRETTY, LINUX_BIT, FSTRING, FLAGF) \\\n-VM_Version::NAME##RVNonExtFeatureValue VM_Version::NAME;\n+#define DEF_RV_NON_EXT_FEATURE(PRETTY, LINUX_BIT, FSTRING, FLAGF) \\\n+VM_Version::PRETTY##RVNonExtFeatureValue VM_Version::PRETTY;\n@@ -48,4 +48,4 @@\n-#define ADD_RV_EXT_FEATURE_IN_LIST(NAME, PRETTY, LINUX_BIT, FSTRING, FLAGF) \\\n-     &VM_Version::NAME,\n-#define ADD_RV_NON_EXT_FEATURE_IN_LIST(NAME, PRETTY, LINUX_BIT, FSTRING, FLAGF) \\\n-     &VM_Version::NAME,\n+#define ADD_RV_EXT_FEATURE_IN_LIST(PRETTY, LINUX_BIT, FSTRING, FLAGF) \\\n+     &VM_Version::ext_##PRETTY,\n+#define ADD_RV_NON_EXT_FEATURE_IN_LIST(PRETTY, LINUX_BIT, FSTRING, FLAGF) \\\n+     &VM_Version::PRETTY,\n@@ -151,1 +151,1 @@\n-  if (UseRVC && !ext_C.enabled()) {\n+  if (UseRVC && !ext_c.enabled()) {\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -188,46 +188,0 @@\n-  \/\/ Frozen standard extensions\n-  \/\/ I RV64I\n-  \/\/ M Integer Multiplication and Division\n-  \/\/ A Atomic Instructions\n-  \/\/ F Single-Precision Floating-Point\n-  \/\/ D Single-Precision Floating-Point\n-  \/\/ (G = M + A + F + D)\n-  \/\/ Q Quad-Precision Floating-Point\n-  \/\/ C Compressed Instructions\n-  \/\/ H Hypervisor\n-  \/\/\n-  \/\/ Others, open and non-standard\n-  \/\/ V Vector\n-  \/\/\n-  \/\/ Cache Management Operations\n-  \/\/ Zicbom Cache Block Management Operations\n-  \/\/ Zicboz Cache Block Zero Operations\n-  \/\/ Zicbop Cache Block Prefetch Operations\n-  \/\/\n-  \/\/ Bit-manipulation\n-  \/\/ Zba Address generation instructions\n-  \/\/ Zbb Basic bit-manipulation\n-  \/\/ Zbc Carry-less multiplication\n-  \/\/ Zbs Single-bit instructions\n-  \/\/\n-  \/\/ Zfh Half-Precision Floating-Point instructions\n-  \/\/ Zfhmin Minimal Half-Precision Floating-Point instructions\n-  \/\/\n-  \/\/ Zicond Conditional operations\n-  \/\/\n-  \/\/ Zicsr Control and Status Register (CSR) Instructions\n-  \/\/ Zifencei Instruction-Fetch Fence\n-  \/\/ Zic64b Cache blocks must be 64 bytes in size, naturally aligned in the address space.\n-  \/\/ Zihintpause Pause instruction HINT\n-  \/\/\n-  \/\/ Zc  Code Size Reduction - Additional compressed instructions.\n-  \/\/ Zcb Simple code-size saving instructions\n-  \/\/\n-  \/\/ Other features and settings\n-  \/\/ mvendorid Manufactory JEDEC id encoded, ISA vol 2 3.1.2..\n-  \/\/ marchid   Id for microarch. Mvendorid plus marchid uniquely identify the microarch.\n-  \/\/ mimpid    A unique encoding of the version of the processor implementation.\n-  \/\/ unaligned_scalar Performance of misaligned scalar accesses (unknown, emulated, slow, fast, unsupported)\n-  \/\/ unaligned_vector Performance of misaligned vector accesses (unknown, unspported, slow, fast)\n-  \/\/ satp mode SATP bits (number of virtual addr bits) mbare, sv39, sv48, sv57, sv64\n-\n@@ -242,42 +196,78 @@\n-  #define RV_EXT_FEATURE_FLAGS(decl)                                                                                       \\\n-  decl(ext_I            ,  i           ,     ('I' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n-  decl(ext_M            ,  m           ,     ('M' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n-  decl(ext_A            ,  a           ,     ('A' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n-  decl(ext_F            ,  f           ,     ('F' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n-  decl(ext_D            ,  d           ,     ('D' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n-  decl(ext_C            ,  c           ,     ('C' - 'A'),  true ,  UPDATE_DEFAULT(UseRVC))                                 \\\n-  decl(ext_Q            ,  q           ,     ('Q' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n-  decl(ext_H            ,  h           ,     ('H' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n-  decl(ext_V            ,  v           ,     ('V' - 'A'),  true ,  UPDATE_DEFAULT(UseRVV))                                 \\\n-  decl(ext_Zicbom       ,  Zicbom      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicbom))                              \\\n-  decl(ext_Zicboz       ,  Zicboz      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicboz))                              \\\n-  decl(ext_Zicbop       ,  Zicbop      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicbop))                              \\\n-  decl(ext_Zba          ,  Zba         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZba))                                 \\\n-  decl(ext_Zbb          ,  Zbb         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZbb))                                 \\\n-  decl(ext_Zbc          ,  Zbc         ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                                      \\\n-  decl(ext_Zbs          ,  Zbs         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZbs))                                 \\\n-  decl(ext_Zbkb         ,  Zbkb        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZbkb))                                \\\n-  decl(ext_Zcb          ,  Zcb         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZcb))                                 \\\n-  decl(ext_Zfa          ,  Zfa         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZfa))                                 \\\n-  decl(ext_Zfh          ,  Zfh         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZfh))                                 \\\n-  decl(ext_Zfhmin       ,  Zfhmin      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZfhmin))                              \\\n-  decl(ext_Zicsr        ,  Zicsr       ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                                      \\\n-  decl(ext_Zicntr       ,  Zicntr      ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                                      \\\n-  decl(ext_Zifencei     ,  Zifencei    ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                                      \\\n-  decl(ext_Zic64b       ,  Zic64b      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZic64b))                              \\\n-  decl(ext_Ztso         ,  Ztso        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZtso))                                \\\n-  decl(ext_Zihintpause  ,  Zihintpause ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZihintpause))                         \\\n-  decl(ext_Zacas        ,  Zacas       ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZacas))                               \\\n-  decl(ext_Zvbb         ,  Zvbb        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT_DEP(UseZvbb, &ext_V, nullptr))           \\\n-  decl(ext_Zvbc         ,  Zvbc        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT_DEP(UseZvbc, &ext_V, nullptr))           \\\n-  decl(ext_Zvfh         ,  Zvfh        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT_DEP(UseZvfh, &ext_V, &ext_Zfh, nullptr)) \\\n-  decl(ext_Zvkn         ,  Zvkn        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT_DEP(UseZvkn, &ext_V, nullptr))           \\\n-  decl(ext_Zicond       ,  Zicond      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicond))                              \\\n-\n-  #define DECLARE_RV_EXT_FEATURE(NAME, PRETTY, LINUX_BIT, FSTRING, FLAGF)               \\\n-  struct NAME##RVExtFeatureValue : public RVExtFeatureValue {                           \\\n-    NAME##RVExtFeatureValue() :                                                         \\\n-      RVExtFeatureValue(#PRETTY, LINUX_BIT, RVExtFeatures::CPU_##NAME, FSTRING) {}      \\\n-    FLAGF;                                                                              \\\n-  };                                                                                    \\\n-  static NAME##RVExtFeatureValue NAME;                                                  \\\n+  #define RV_EXT_FEATURE_FLAGS(decl)                                                                   \\\n+  \/* A Atomic Instructions *\/                                                                          \\\n+  decl(a           ,     ('A' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  \/* C Compressed Instructions *\/                                                                      \\\n+  decl(c           ,     ('C' - 'A'),  true ,  UPDATE_DEFAULT(UseRVC))                                 \\\n+  \/* D Single-Precision Floating-Point *\/                                                              \\\n+  decl(d           ,     ('D' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  \/* F Single-Precision Floating-Point *\/                                                              \\\n+  decl(f           ,     ('F' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  \/* H Hypervisor *\/                                                                                   \\\n+  decl(h           ,     ('H' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  \/* I RV64I *\/                                                                                        \\\n+  decl(i           ,     ('I' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  \/* M Integer Multiplication and Division *\/                                                          \\\n+  decl(m           ,     ('M' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  \/* Q Quad-Precision Floating-Point *\/                                                                \\\n+  decl(q           ,     ('Q' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  \/* V Vector *\/                                                                                       \\\n+  decl(v           ,     ('V' - 'A'),  true ,  UPDATE_DEFAULT(UseRVV))                                 \\\n+                                                                                                       \\\n+  \/* ----------------------- Other extensions ----------------------- *\/                               \\\n+                                                                                                       \\\n+  \/* Atomic compare-and-swap (CAS) instructions *\/                                                     \\\n+  decl(Zacas       ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZacas))                               \\\n+  \/* Zba Address generation instructions *\/                                                            \\\n+  decl(Zba         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZba))                                 \\\n+  \/* Zbb Basic bit-manipulation *\/                                                                     \\\n+  decl(Zbb         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZbb))                                 \\\n+  \/* Zbc Carry-less multiplication *\/                                                                  \\\n+  decl(Zbc         ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  \/* Bitmanip instructions for Cryptography *\/                                                         \\\n+  decl(Zbkb        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZbkb))                                \\\n+  \/* Zbs Single-bit instructions *\/                                                                    \\\n+  decl(Zbs         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZbs))                                 \\\n+  \/* Zcb Simple code-size saving instructions *\/                                                       \\\n+  decl(Zcb         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZcb))                                 \\\n+  \/* Additional Floating-Point instructions *\/                                                         \\\n+  decl(Zfa         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZfa))                                 \\\n+  \/* Zfh Half-Precision Floating-Point instructions *\/                                                 \\\n+  decl(Zfh         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZfh))                                 \\\n+  \/* Zfhmin Minimal Half-Precision Floating-Point instructions *\/                                      \\\n+  decl(Zfhmin      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZfhmin))                              \\\n+  \/* Zicbom Cache Block Management Operations *\/                                                       \\\n+  decl(Zicbom      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicbom))                              \\\n+  \/* Zicbop Cache Block Prefetch Operations *\/                                                         \\\n+  decl(Zicbop      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicbop))                              \\\n+  \/* Zicboz Cache Block Zero Operations *\/                                                             \\\n+  decl(Zicboz      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicboz))                              \\\n+  \/* Base Counters and Timers *\/                                                                       \\\n+  decl(Zicntr      ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  \/* Zicond Conditional operations *\/                                                                  \\\n+  decl(Zicond      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicond))                              \\\n+  \/* Zicsr Control and Status Register (CSR) Instructions *\/                                           \\\n+  decl(Zicsr       ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  \/* Zic64b Cache blocks must be 64 bytes in size, naturally aligned in the address space. *\/          \\\n+  decl(Zic64b      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZic64b))                              \\\n+  \/* Zifencei Instruction-Fetch Fence *\/                                                               \\\n+  decl(Zifencei    ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  \/* Zihintpause Pause instruction HINT *\/                                                             \\\n+  decl(Zihintpause ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZihintpause))                         \\\n+  \/* Total Store Ordering *\/                                                                           \\\n+  decl(Ztso        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZtso))                                \\\n+  \/* Vector Basic Bit-manipulation *\/                                                                  \\\n+  decl(Zvbb        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT_DEP(UseZvbb, &ext_v, nullptr))           \\\n+  \/* Vector Carryless Multiplication *\/                                                                \\\n+  decl(Zvbc        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT_DEP(UseZvbc, &ext_v, nullptr))           \\\n+  \/* Vector Extension for Half-Precision Floating-Point *\/                                             \\\n+  decl(Zvfh        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT_DEP(UseZvfh, &ext_v, &ext_Zfh, nullptr)) \\\n+  \/* Shorthand for Zvkned + Zvknhb + Zvkb + Zvkt *\/                                                    \\\n+  decl(Zvkn        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT_DEP(UseZvkn, &ext_v, nullptr))           \\\n+\n+  #define DECLARE_RV_EXT_FEATURE(PRETTY, LINUX_BIT, FSTRING, FLAGF)                             \\\n+  struct ext_##PRETTY##RVExtFeatureValue : public RVExtFeatureValue {                           \\\n+    ext_##PRETTY##RVExtFeatureValue() :                                                         \\\n+      RVExtFeatureValue(#PRETTY, LINUX_BIT, RVExtFeatures::CPU_##ext_##PRETTY, FSTRING) {}      \\\n+    FLAGF;                                                                                      \\\n+  };                                                                                            \\\n+  static ext_##PRETTY##RVExtFeatureValue ext_##PRETTY;                                          \\\n@@ -291,11 +281,17 @@\n-  decl(mvendorid        ,  VendorId        ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)      \\\n-  decl(marchid          ,  ArchId          ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)      \\\n-  decl(mimpid           ,  ImpId           ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)      \\\n-  decl(satp_mode        ,  SATP            ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)      \\\n-  decl(unaligned_scalar ,  UnalignedScalar ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)      \\\n-  decl(unaligned_vector ,  UnalignedVector ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)      \\\n-  decl(zicboz_block_size,  ZicbozBlockSize ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)      \\\n-\n-  #define DECLARE_RV_NON_EXT_FEATURE(NAME, PRETTY, LINUX_BIT, FSTRING, FLAGF)      \\\n-  struct NAME##RVNonExtFeatureValue : public RVNonExtFeatureValue {                \\\n-    NAME##RVNonExtFeatureValue() :                                                 \\\n+  \/* Id for microarch. Mvendorid plus marchid uniquely identify the microarch. *\/              \\\n+  decl(marchid          ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)                         \\\n+  \/* A unique encoding of the version of the processor implementation. *\/                      \\\n+  decl(mimpid           ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)                         \\\n+  \/* SATP bits (number of virtual addr bits) mbare, sv39, sv48, sv57, sv64 *\/                  \\\n+  decl(satp_mode            ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)                     \\\n+  \/* Performance of misaligned scalar accesses (unknown, emulated, slow, fast, unsupported) *\/ \\\n+  decl(unaligned_scalar ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)                         \\\n+  \/* Performance of misaligned vector accesses (unknown, unspported, slow, fast) *\/            \\\n+  decl(unaligned_vector ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)                         \\\n+  \/* Manufactory JEDEC id encoded, ISA vol 2 3.1.2.. *\/                                        \\\n+  decl(mvendorid        ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)                         \\\n+  decl(zicboz_block_size ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)                        \\\n+\n+  #define DECLARE_RV_NON_EXT_FEATURE(PRETTY, LINUX_BIT, FSTRING, FLAGF)            \\\n+  struct PRETTY##RVNonExtFeatureValue : public RVNonExtFeatureValue {              \\\n+    PRETTY##RVNonExtFeatureValue() :                                               \\\n@@ -305,1 +301,1 @@\n-  static NAME##RVNonExtFeatureValue NAME;                                          \\\n+  static PRETTY##RVNonExtFeatureValue PRETTY;                                      \\\n@@ -315,1 +311,1 @@\n-      #define DECLARE_RV_FEATURE_ENUM(NAME, PRETTY, LINUX_BIT, FSTRING, FLAGF) CPU_##NAME,\n+      #define DECLARE_RV_FEATURE_ENUM(PRETTY, LINUX_BIT, FSTRING, FLAGF) CPU_##ext_##PRETTY,\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":97,"deletions":101,"binary":false,"changes":198,"status":"modified"},{"patch":"@@ -180,3 +180,3 @@\n-    VM_Version::ext_I.enable_feature();\n-    VM_Version::ext_M.enable_feature();\n-    VM_Version::ext_A.enable_feature();\n+    VM_Version::ext_i.enable_feature();\n+    VM_Version::ext_m.enable_feature();\n+    VM_Version::ext_a.enable_feature();\n@@ -185,2 +185,2 @@\n-    VM_Version::ext_F.enable_feature();\n-    VM_Version::ext_D.enable_feature();\n+    VM_Version::ext_f.enable_feature();\n+    VM_Version::ext_d.enable_feature();\n@@ -189,1 +189,1 @@\n-    VM_Version::ext_C.enable_feature();\n+    VM_Version::ext_c.enable_feature();\n@@ -202,1 +202,1 @@\n-      VM_Version::ext_V.enable_feature();\n+      VM_Version::ext_v.enable_feature();\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/riscv_hwprobe.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -108,9 +108,9 @@\n-  assert(ext_I.feature_bit() == HWCAP_ISA_I, \"Bit for I must follow Linux HWCAP\");\n-  assert(ext_M.feature_bit() == HWCAP_ISA_M, \"Bit for M must follow Linux HWCAP\");\n-  assert(ext_A.feature_bit() == HWCAP_ISA_A, \"Bit for A must follow Linux HWCAP\");\n-  assert(ext_F.feature_bit() == HWCAP_ISA_F, \"Bit for F must follow Linux HWCAP\");\n-  assert(ext_D.feature_bit() == HWCAP_ISA_D, \"Bit for D must follow Linux HWCAP\");\n-  assert(ext_C.feature_bit() == HWCAP_ISA_C, \"Bit for C must follow Linux HWCAP\");\n-  assert(ext_Q.feature_bit() == HWCAP_ISA_Q, \"Bit for Q must follow Linux HWCAP\");\n-  assert(ext_H.feature_bit() == HWCAP_ISA_H, \"Bit for H must follow Linux HWCAP\");\n-  assert(ext_V.feature_bit() == HWCAP_ISA_V, \"Bit for V must follow Linux HWCAP\");\n+  assert(ext_i.feature_bit() == HWCAP_ISA_I, \"Bit for I must follow Linux HWCAP\");\n+  assert(ext_m.feature_bit() == HWCAP_ISA_M, \"Bit for M must follow Linux HWCAP\");\n+  assert(ext_a.feature_bit() == HWCAP_ISA_A, \"Bit for A must follow Linux HWCAP\");\n+  assert(ext_f.feature_bit() == HWCAP_ISA_F, \"Bit for F must follow Linux HWCAP\");\n+  assert(ext_d.feature_bit() == HWCAP_ISA_D, \"Bit for D must follow Linux HWCAP\");\n+  assert(ext_c.feature_bit() == HWCAP_ISA_C, \"Bit for C must follow Linux HWCAP\");\n+  assert(ext_q.feature_bit() == HWCAP_ISA_Q, \"Bit for Q must follow Linux HWCAP\");\n+  assert(ext_h.feature_bit() == HWCAP_ISA_H, \"Bit for H must follow Linux HWCAP\");\n+  assert(ext_v.feature_bit() == HWCAP_ISA_V, \"Bit for V must follow Linux HWCAP\");\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/vm_version_linux_riscv.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}