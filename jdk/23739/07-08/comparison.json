{"files":[{"patch":"@@ -801,2 +801,2 @@\n-  G1ConcurrentRefineWorkState& refine_state = concurrent_refine()->refine_state();\n-  if (refine_state.is_in_progress()) {\n+  G1ConcurrentRefineSweepState& sweep_state = concurrent_refine()->sweep_state();\n+  if (sweep_state.is_in_progress()) {\n@@ -804,2 +804,2 @@\n-    policy()->record_refinement_stats(refine_state.stats());\n-    refine_state.complete(false \/* concurrent *\/, false \/* print_log *\/);\n+    policy()->record_refinement_stats(sweep_state.stats());\n+    sweep_state.complete_work(false \/* concurrent *\/, false \/* print_log *\/);\n@@ -807,1 +807,1 @@\n-  refine_state.reset_stats();\n+  sweep_state.reset_stats();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-G1ConcurrentRefineWorkState::G1ConcurrentRefineWorkState(uint max_reserved_regions) :\n+G1ConcurrentRefineSweepState::G1ConcurrentRefineSweepState(uint max_reserved_regions) :\n@@ -127,1 +127,1 @@\n-  _refine_work_epoch(0),\n+  _sweep_start_epoch(0),\n@@ -134,1 +134,1 @@\n-G1ConcurrentRefineWorkState::~G1ConcurrentRefineWorkState() {\n+G1ConcurrentRefineSweepState::~G1ConcurrentRefineSweepState() {\n@@ -138,1 +138,1 @@\n-void G1ConcurrentRefineWorkState::set_state_start_time() {\n+void G1ConcurrentRefineSweepState::set_state_start_time() {\n@@ -142,1 +142,1 @@\n-Tickspan G1ConcurrentRefineWorkState::get_duration(State start, State end) {\n+Tickspan G1ConcurrentRefineSweepState::get_duration(State start, State end) {\n@@ -146,1 +146,1 @@\n-void G1ConcurrentRefineWorkState::reset_stats() {\n+void G1ConcurrentRefineSweepState::reset_stats() {\n@@ -150,1 +150,1 @@\n-void G1ConcurrentRefineWorkState::add_yield_duration(jlong duration) {\n+void G1ConcurrentRefineSweepState::add_yield_duration(jlong duration) {\n@@ -154,1 +154,1 @@\n-size_t G1ConcurrentRefineWorkState::refinement_epoch() {\n+size_t G1ConcurrentRefineSweepState::refinement_epoch() {\n@@ -158,2 +158,2 @@\n-bool G1ConcurrentRefineWorkState::advance_state(State next_state) {\n-  bool result = _refine_work_epoch == refinement_epoch();\n+bool G1ConcurrentRefineSweepState::advance_state(State next_state) {\n+  bool result = _sweep_start_epoch == refinement_epoch();\n@@ -168,1 +168,1 @@\n-void G1ConcurrentRefineWorkState::assert_state(State expected) {\n+void G1ConcurrentRefineSweepState::assert_state(State expected) {\n@@ -172,1 +172,1 @@\n-void G1ConcurrentRefineWorkState::start_refine_work() {\n+void G1ConcurrentRefineSweepState::start_work() {\n@@ -177,1 +177,1 @@\n-  _refine_work_epoch = refinement_epoch();\n+  _sweep_start_epoch = refinement_epoch();\n@@ -184,1 +184,1 @@\n-bool G1ConcurrentRefineWorkState::swap_global_card_table() {\n+bool G1ConcurrentRefineSweepState::swap_global_card_table() {\n@@ -203,1 +203,1 @@\n-bool G1ConcurrentRefineWorkState::swap_java_threads_ct() {\n+bool G1ConcurrentRefineSweepState::swap_java_threads_ct() {\n@@ -220,1 +220,0 @@\n-\n@@ -227,1 +226,1 @@\n-bool G1ConcurrentRefineWorkState::swap_gc_threads_ct() {\n+bool G1ConcurrentRefineSweepState::swap_gc_threads_ct() {\n@@ -262,1 +261,1 @@\n-void G1ConcurrentRefineWorkState::snapshot_heap(bool concurrent) {\n+void G1ConcurrentRefineSweepState::snapshot_heap(bool concurrent) {\n@@ -279,1 +278,1 @@\n-void G1ConcurrentRefineWorkState::sweep_rt_start() {\n+void G1ConcurrentRefineSweepState::sweep_refinement_table_start() {\n@@ -285,1 +284,1 @@\n-bool G1ConcurrentRefineWorkState::sweep_rt_step() {\n+bool G1ConcurrentRefineSweepState::sweep_refinement_table_step() {\n@@ -301,1 +300,1 @@\n-bool G1ConcurrentRefineWorkState::complete(bool concurrent, bool print_log) {\n+bool G1ConcurrentRefineSweepState::complete_work(bool concurrent, bool print_log) {\n@@ -341,1 +340,1 @@\n-void G1ConcurrentRefineWorkState::snapshot_heap_into(G1CardTableClaimTable* sweep_table) {\n+void G1ConcurrentRefineSweepState::snapshot_heap_into(G1CardTableClaimTable* sweep_table) {\n@@ -367,1 +366,1 @@\n-bool G1ConcurrentRefineWorkState::is_in_progress() const {\n+bool G1ConcurrentRefineSweepState::is_in_progress() const {\n@@ -391,1 +390,1 @@\n-  _refine_state(g1h->max_reserved_regions())\n+  _sweep_state(g1h->max_reserved_regions())\n@@ -398,2 +397,2 @@\n-G1ConcurrentRefineWorkState& G1ConcurrentRefine::refine_state_for_merge() {\n-  bool has_sweep_claims = refine_state().complete(false);\n+G1ConcurrentRefineSweepState& G1ConcurrentRefine::sweep_state_for_merge() {\n+  bool has_sweep_claims = sweep_state().complete_work(false);\n@@ -410,1 +409,1 @@\n-    refine_state().snapshot_heap(false \/* concurrent *\/);\n+    sweep_state().snapshot_heap(false \/* concurrent *\/);\n@@ -412,1 +411,1 @@\n-  return refine_state();\n+  return sweep_state();\n@@ -421,2 +420,2 @@\n-  if (_refine_state.is_in_progress()) {\n-    _refine_state.sweep_table()->claim_all_cards(r->hrm_index());\n+  if (_sweep_state.is_in_progress()) {\n+    _sweep_state.sweep_table()->claim_all_cards(r->hrm_index());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.cpp","additions":29,"deletions":30,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -82,3 +82,28 @@\n-\/\/ Tracks the current refinement state from idle to completion (and reset back\n-\/\/ to idle).\n-class G1ConcurrentRefineWorkState {\n+\/\/ Tracks the current state of re-examining the dirty cards from idle to completion\n+\/\/ (and reset back to idle).\n+\/\/\n+\/\/ The process steps are as follows:\n+\/\/\n+\/\/ 1) Swap global card table pointers\n+\/\/\n+\/\/ 2) Swap Java Thread's card table pointers\n+\/\/\n+\/\/ 3) Synchronize GC Threads\n+\/\/      Ensures memory visibility\n+\/\/\n+\/\/ After this point mutator threads should not mark the refinement table.\n+\/\/\n+\/\/ 4) Snapshot the heap\n+\/\/      Determines which regions need to be swept.\n+\/\/\n+\/\/ 5) Sweep Refinement table\n+\/\/      Examines non-Clean cards on the refinement table.\n+\/\/\n+\/\/ 6) Completion Work\n+\/\/      Calculates statistics about the process to be used in various parts of\n+\/\/      the garbage collection.\n+\/\/\n+\/\/ All but step 4 are interruptible by safepoints. In case of a garbage collection,\n+\/\/ the garbage collection will interrupt this process, and go to Idle state.\n+\/\/\n+class G1ConcurrentRefineSweepState {\n@@ -100,3 +125,3 @@\n-      \"Swap Global CT\",\n-      \"Swap JavaThread CT\",\n-      \"Swap GC Thread CT\",\n+      \"Swap Global Card Table\",\n+      \"Swap JavaThread Card Table\",\n+      \"Synchronize GC Threads\",\n@@ -104,2 +129,2 @@\n-      \"Sweep RT\",\n-      \"Complete Refine Work\"\n+      \"Sweep Refinement Table\",\n+      \"Complete Sweep Work\"\n@@ -111,1 +136,1 @@\n-  \/\/ Current epoch the work has been started; used to determine if there has been\n+  \/\/ The epoch the sweep has started; used to determine if there has been\n@@ -113,1 +138,1 @@\n-  size_t _refine_work_epoch;\n+  size_t _sweep_start_epoch;\n@@ -134,0 +159,2 @@\n+  static void snapshot_heap_into(G1CardTableClaimTable* sweep_table);\n+\n@@ -135,2 +162,2 @@\n-  G1ConcurrentRefineWorkState(uint max_reserved_regions);\n-  ~G1ConcurrentRefineWorkState();\n+  G1ConcurrentRefineSweepState(uint max_reserved_regions);\n+  ~G1ConcurrentRefineSweepState();\n@@ -138,1 +165,1 @@\n-  void start_refine_work();\n+  void start_work();\n@@ -144,4 +171,2 @@\n-  void sweep_rt_start();\n-  bool sweep_rt_step();\n-\n-  bool complete(bool concurrent, bool print_log = true);\n+  void sweep_refinement_table_start();\n+  bool sweep_refinement_table_step();\n@@ -149,1 +174,1 @@\n-  static void snapshot_heap_into(G1CardTableClaimTable* sweep_table);\n+  bool complete_work(bool concurrent, bool print_log = true);\n@@ -198,1 +223,1 @@\n-  G1ConcurrentRefineWorkState _refine_state;\n+  G1ConcurrentRefineSweepState _sweep_state;\n@@ -233,1 +258,1 @@\n-  G1ConcurrentRefineWorkState& refine_state() { return _refine_state; }\n+  G1ConcurrentRefineSweepState& sweep_state() { return _sweep_state; }\n@@ -235,1 +260,1 @@\n-  G1ConcurrentRefineWorkState& refine_state_for_merge();\n+  G1ConcurrentRefineSweepState& sweep_state_for_merge();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.hpp","additions":46,"deletions":21,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-  G1ConcurrentRefineWorkState& state = _cr->refine_state();\n+  G1ConcurrentRefineSweepState& state = _cr->sweep_state();\n@@ -142,1 +142,1 @@\n-  state.start_refine_work();\n+  state.start_work();\n@@ -181,1 +181,1 @@\n-  state.sweep_rt_start();\n+  state.sweep_refinement_table_start();\n@@ -183,1 +183,1 @@\n-    bool completed = state.sweep_rt_step();\n+    bool completed = state.sweep_refinement_table_step();\n@@ -209,1 +209,1 @@\n-    state.complete(true);\n+    state.complete_work(true);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineThread.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -67,2 +67,2 @@\n-  \/\/ Attempt to do some refinement work.\n-  \/\/ precondition: this is the current thread.\n+  \/\/ Swap card table and do a complete re-examination\/refinement pass over the\n+  \/\/ refinement table.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineThread.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -940,1 +940,1 @@\n-    G1ConcurrentRefineStats* stats = _g1h->concurrent_refine()->refine_state().stats();\n+    G1ConcurrentRefineStats* stats = _g1h->concurrent_refine()->sweep_state().stats();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1233,1 +1233,1 @@\n-  G1ConcurrentRefineWorkState& state = g1h->concurrent_refine()->refine_state_for_merge();\n+  G1ConcurrentRefineSweepState& state = g1h->concurrent_refine()->sweep_state_for_merge();\n@@ -1260,1 +1260,1 @@\n-  G1ConcurrentRefineWorkState& state = g1h->concurrent_refine()->refine_state();\n+  G1ConcurrentRefineSweepState& state = g1h->concurrent_refine()->sweep_state();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}