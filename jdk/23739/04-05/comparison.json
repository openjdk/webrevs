{"files":[{"patch":"@@ -106,1 +106,1 @@\n-  __ jcc(Assembler::equal, done);\n+  __ jcc(Assembler::zero, done);\n@@ -132,2 +132,4 @@\n-  __ cmpb(Address(addr, 0), G1CardTable::clean_card_val());\n-  __ jcc(Assembler::equal, is_clean_card);\n+  if (UseCondCardMark) {\n+    __ cmpb(Address(addr, 0), G1CardTable::clean_card_val());\n+    __ jcc(Assembler::equal, is_clean_card);\n+  }\n@@ -323,1 +325,1 @@\n-  assert_different_registers(store_addr, new_val, thread, tmp1 \/*, tmp2 unused *\/, noreg);\n+  assert_different_registers(store_addr, new_val, thread, tmp1 \/*, tmp2 unused for x86 *\/, noreg);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/g1\/g1BarrierSetAssembler_x86.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  reset_all_claims_to_unclaimed();\n+  reset_all_to_unclaimed();\n@@ -52,2 +52,2 @@\n-void G1CardTableClaimTable::reset_all_claims_to_unclaimed() {\n-  for (size_t i = 0; i < _max_reserved_regions; i++) {\n+void G1CardTableClaimTable::reset_all_to_unclaimed() {\n+  for (uint i = 0; i < _max_reserved_regions; i++) {\n@@ -58,2 +58,2 @@\n-void G1CardTableClaimTable::reset_all_claims_to_claimed() {\n-  for (size_t i = 0; i < _max_reserved_regions; i++) {\n+void G1CardTableClaimTable::reset_all_to_claimed() {\n+  for (uint i = 0; i < _max_reserved_regions; i++) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardTableClaimTable.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -62,2 +62,2 @@\n-  void reset_all_claims_to_unclaimed();\n-  void reset_all_claims_to_claimed();\n+  void reset_all_to_unclaimed();\n+  void reset_all_to_claimed();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardTableClaimTable.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -349,1 +349,1 @@\n-  sweep_table->reset_all_claims_to_claimed();\n+  sweep_table->reset_all_to_claimed();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -271,1 +271,1 @@\n-    _card_claim_table.reset_all_claims_to_unclaimed();\n+    _card_claim_table.reset_all_to_unclaimed();\n@@ -832,2 +832,2 @@\n-        size_t* refinement_cur_card = (size_t*)refinement_table->byte_for_index(start_idx);\n-        size_t* const refinement_end_card = refinement_cur_card + claim.size() \/ (sizeof(size_t) \/ sizeof(G1CardTable::CardValue));\n+        size_t* refinement_cur_word = (size_t*)refinement_table->byte_for_index(start_idx);\n+        size_t* const refinement_end_word = refinement_cur_word + claim.size() \/ (sizeof(size_t) \/ sizeof(G1CardTable::CardValue));\n@@ -835,3 +835,3 @@\n-        for (; refinement_cur_card < refinement_end_card; ++refinement_cur_card, ++card_cur_word) {\n-          size_t value = *refinement_cur_card;\n-          *refinement_cur_card = G1CardTable::WordAllClean;\n+        for (; refinement_cur_word < refinement_end_word; ++refinement_cur_word, ++card_cur_word) {\n+          size_t value = *refinement_cur_word;\n+          *refinement_cur_word = G1CardTable::WordAllClean;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -94,0 +94,6 @@\n+#ifdef ASSERT\n+  static G1CardTable::CardValue* get_byte_map_base(Thread* thread) {\n+    return data(thread)->_byte_map_base;\n+  }\n+#endif\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ThreadLocalData.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -833,1 +833,0 @@\n-  volatile bool _non_java_threads_claim;\n@@ -840,1 +839,1 @@\n-    : G1AbstractSubTask(G1GCPhaseTimes::ResizeThreadLABs), _claimer(ThreadsPerWorker), _non_java_threads_claim(false)\n+    : G1AbstractSubTask(G1GCPhaseTimes::ResizeThreadLABs), _claimer(ThreadsPerWorker)\n@@ -843,1 +842,0 @@\n-  }\n@@ -845,2 +843,2 @@\n-  void do_work(uint worker_id) override {\n-    class SwapCardTableClosure : public ThreadClosure {\n+#ifdef ASSERT\n+    class AssertCardTableBaseNull : public ThreadClosure {\n@@ -848,0 +846,1 @@\n+\n@@ -849,3 +848,1 @@\n-        \/\/ The global card table references have already been swapped.\n-        G1CardTable::CardValue* new_card_table_base = G1CollectedHeap::heap()->card_table_base();\n-        G1ThreadLocalData::set_byte_map_base(thread, new_card_table_base);\n+        assert(G1ThreadLocalData::get_byte_map_base(thread) == nullptr, \"thread \" PTR_FORMAT \" (%s) has non-null card table base\", p2i(thread), thread->name());\n@@ -853,1 +850,4 @@\n-    } swap_cl;\n+    } assert_cl;\n+    Threads::non_java_threads_do(&assert_cl);\n+#endif\n+  }\n@@ -855,5 +855,1 @@\n-    \/\/ We do not expect too many non-Java threads compared to Java threads, so just\n-    \/\/ let one worker claim that work.\n-    if (!_non_java_threads_claim && !Atomic::cmpxchg(&_non_java_threads_claim, false, true, memory_order_relaxed)) {\n-      Threads::non_java_threads_do(&swap_cl);\n-    }\n+  void do_work(uint worker_id) override {\n@@ -862,2 +858,0 @@\n-    SwapCardTableClosure _cl;\n-\n@@ -865,0 +859,1 @@\n+\n@@ -869,1 +864,4 @@\n-        _cl.do_thread(thread);\n+\n+        \/\/ The global card table references have already been swapped.\n+        G1CardTable::CardValue* new_card_table_base = G1CollectedHeap::heap()->card_table_base();\n+        G1ThreadLocalData::set_byte_map_base(thread, new_card_table_base);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":15,"deletions":17,"binary":false,"changes":32,"status":"modified"}]}