{"files":[{"patch":"@@ -40,1 +40,1 @@\n-static double cost_per_logged_card_ms_defaults[] = {\n+static double cost_per_pending_card_ms_defaults[] = {\n@@ -104,2 +104,2 @@\n-  _concurrent_refine_rate_ms_seq.add(1\/cost_per_logged_card_ms_defaults[0]);\n-  \/\/ Some applications have very low rates for logging cards.\n+  _concurrent_refine_rate_ms_seq.add(1\/cost_per_pending_card_ms_defaults[0]);\n+  \/\/ Some applications have very low rates for dirtying cards.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Analytics.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -250,1 +250,0 @@\n-  uint max_parallel_refinement_threads = G1ConcRefinementThreads;\n@@ -252,1 +251,1 @@\n-  if (max_parallel_refinement_threads > UINT_MAX \/ divisor) {\n+  if (G1ConcRefinementThreads > UINT_MAX \/ divisor) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Arguments.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-      assert(false, \"should have early-returned\");\n+      ShouldNotReachHere();\n@@ -121,1 +121,1 @@\n-      assert(false, \"should have early-returned\");\n+      ShouldNotReachHere();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardTableClaimTable.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -216,1 +216,1 @@\n-      G1SwapThreadCardTableClosure() : HandshakeClosure(\"G1 Swap JT card table\") { }\n+      G1SwapThreadCardTableClosure() : HandshakeClosure(\"G1 Java Thread CT swap\") { }\n@@ -280,1 +280,1 @@\n-    snapshot_heap_into(_sweep_table);\n+    snapshot_heap_inner();\n@@ -287,1 +287,1 @@\n-    snapshot_heap_into(_sweep_table);\n+    snapshot_heap_inner();\n@@ -355,1 +355,1 @@\n-void G1ConcurrentRefineSweepState::snapshot_heap_into(G1CardTableClaimTable* sweep_table) {\n+void G1ConcurrentRefineSweepState::snapshot_heap_inner() {\n@@ -361,1 +361,1 @@\n-  sweep_table->reset_all_to_claimed();\n+  _sweep_table->reset_all_to_claimed();\n@@ -380,1 +380,1 @@\n-  } cl(sweep_table);\n+  } cl(_sweep_table);\n@@ -480,2 +480,2 @@\n-void G1ConcurrentRefine::update_pending_cards_target(double logged_cards_time_ms,\n-                                                     size_t processed_logged_cards,\n+void G1ConcurrentRefine::update_pending_cards_target(double pending_cards_time_ms,\n+                                                     size_t processed_pending_cards,\n@@ -484,1 +484,1 @@\n-  if ((processed_logged_cards < minimum) || (logged_cards_time_ms == 0.0)) {\n+  if ((processed_pending_cards < minimum) || (pending_cards_time_ms == 0.0)) {\n@@ -486,1 +486,1 @@\n-                                _pending_cards_target, processed_logged_cards, minimum, logged_cards_time_ms);\n+                                _pending_cards_target, processed_pending_cards, minimum, pending_cards_time_ms);\n@@ -491,1 +491,1 @@\n-  double rate = processed_logged_cards \/ logged_cards_time_ms;\n+  double rate = processed_pending_cards \/ pending_cards_time_ms;\n@@ -503,2 +503,2 @@\n-void G1ConcurrentRefine::adjust_after_gc(double logged_cards_time_ms,\n-                                         size_t processed_logged_cards,\n+void G1ConcurrentRefine::adjust_after_gc(double pending_cards_time_ms,\n+                                         size_t processed_pending_cards,\n@@ -510,2 +510,2 @@\n-  update_pending_cards_target(logged_cards_time_ms,\n-                              processed_logged_cards,\n+  update_pending_cards_target(pending_cards_time_ms,\n+                              processed_pending_cards,\n@@ -567,1 +567,1 @@\n-  return (_num_threads_wanted > 0) && !wait_for_heap_lock();\n+  return (_num_threads_wanted > 0) && !heap_was_locked();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -154,1 +154,1 @@\n-  static void snapshot_heap_into(G1CardTableClaimTable* sweep_table);\n+  void snapshot_heap_inner();\n@@ -238,2 +238,2 @@\n-  void update_pending_cards_target(double logged_cards_scan_time_ms,\n-                                   size_t processed_logged_cards,\n+  void update_pending_cards_target(double pending_cards_scan_time_ms,\n+                                   size_t processed_pending_cards,\n@@ -271,2 +271,2 @@\n-  void adjust_after_gc(double logged_cards_scan_time_ms,\n-                       size_t processed_logged_cards,\n+  void adjust_after_gc(double pending_cards_scan_time_ms,\n+                       size_t processed_pending_cards,\n@@ -301,1 +301,1 @@\n-  bool wait_for_heap_lock() const { return _heap_was_locked; }\n+  bool heap_was_locked() const { return _heap_was_locked; }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-                              BOOL_TO_STR(cr()->wait_for_heap_lock()),\n+                              BOOL_TO_STR(cr()->heap_was_locked()),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-  _gc_par_phases[ClearCardTable] = new WorkerDataArray<double>(\"ClearLoggedCards\", \"Clear Logged Cards (ms):\", max_gc_threads);\n+  _gc_par_phases[ClearCardTable] = new WorkerDataArray<double>(\"ClearPendingCards\", \"Clear Pending Cards (ms):\", max_gc_threads);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -771,1 +771,1 @@\n-double G1Policy::logged_cards_processing_time() const {\n+double G1Policy::pending_cards_processing_time() const {\n@@ -773,2 +773,2 @@\n-  size_t logged_dirty_cards = phase_times()->sum_thread_work_items(G1GCPhaseTimes::ScanHR, G1GCPhaseTimes::ScanHRPendingCards) +\n-                              phase_times()->sum_thread_work_items(G1GCPhaseTimes::OptScanHR, G1GCPhaseTimes::ScanHRPendingCards);\n+  size_t pending_cards = phase_times()->sum_thread_work_items(G1GCPhaseTimes::ScanHR, G1GCPhaseTimes::ScanHRPendingCards) +\n+                         phase_times()->sum_thread_work_items(G1GCPhaseTimes::OptScanHR, G1GCPhaseTimes::ScanHRPendingCards);\n@@ -778,1 +778,1 @@\n-  double merge_logged_cards_time = phase_times()->cur_merge_refinement_table_time();\n+  double merge_pending_cards_time = phase_times()->cur_merge_refinement_table_time();\n@@ -780,2 +780,2 @@\n-  \/\/ Approximate the time spent processing cards from log buffers by scaling\n-  \/\/ the total processing time by the ratio of logged cards to total cards\n+  \/\/ Approximate the time spent processing cards from pending cards by scaling\n+  \/\/ the total processing time by the ratio of pending cards to total cards\n@@ -787,3 +787,3 @@\n-  \/\/ all of the time to the logged cards unless there are more total cards.\n-  if (logged_dirty_cards >= scan_heap_roots_cards) {\n-    return all_cards_processing_time + merge_logged_cards_time;\n+  \/\/ all of the time to the pending cards unless there are more total cards.\n+  if (pending_cards >= scan_heap_roots_cards) {\n+    return all_cards_processing_time + merge_pending_cards_time;\n@@ -791,1 +791,1 @@\n-  return (all_cards_processing_time * logged_dirty_cards \/ scan_heap_roots_cards) + merge_logged_cards_time;\n+  return (all_cards_processing_time * pending_cards \/ scan_heap_roots_cards) + merge_pending_cards_time;\n@@ -1005,1 +1005,1 @@\n-  double logged_cards_time_goal_ms = _mmu_tracker->max_gc_time() * MILLIUNITS * G1RSetUpdatingPauseTimePercent \/ 100.0;\n+  double pending_cards_time_goal_ms = _mmu_tracker->max_gc_time() * MILLIUNITS * G1RSetUpdatingPauseTimePercent \/ 100.0;\n@@ -1007,3 +1007,3 @@\n-  double const logged_cards_time_ms = logged_cards_processing_time();\n-  size_t logged_cards = phase_times()->sum_thread_work_items(G1GCPhaseTimes::ScanHR, G1GCPhaseTimes::ScanHRPendingCards) +\n-                        phase_times()->sum_thread_work_items(G1GCPhaseTimes::OptScanHR, G1GCPhaseTimes::ScanHRPendingCards);\n+  double const pending_cards_time_ms = pending_cards_processing_time();\n+  size_t pending_cards = phase_times()->sum_thread_work_items(G1GCPhaseTimes::ScanHR, G1GCPhaseTimes::ScanHRPendingCards) +\n+                         phase_times()->sum_thread_work_items(G1GCPhaseTimes::OptScanHR, G1GCPhaseTimes::ScanHRPendingCards);\n@@ -1011,1 +1011,1 @@\n-  bool exceeded_goal = logged_cards_time_goal_ms < logged_cards_time_ms;\n+  bool exceeded_goal = pending_cards_time_goal_ms < pending_cards_time_ms;\n@@ -1017,3 +1017,3 @@\n-            logged_cards_time_goal_ms,\n-            logged_cards,\n-            logged_cards_time_ms,\n+            pending_cards_time_goal_ms,\n+            pending_cards,\n+            pending_cards_time_ms,\n@@ -1022,3 +1022,3 @@\n-  cr->adjust_after_gc(logged_cards_time_ms,\n-                      logged_cards,\n-                      logged_cards_time_goal_ms);\n+  cr->adjust_after_gc(pending_cards_time_ms,\n+                      pending_cards,\n+                      pending_cards_time_goal_ms);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-  double logged_cards_processing_time() const;\n+  double pending_cards_processing_time() const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -180,1 +180,1 @@\n-        new LogMessageWithLevel(\"Clear Logged Cards \\\\(ms\\\\):\", Level.DEBUG),\n+        new LogMessageWithLevel(\"Clear Pending Cards \\\\(ms\\\\):\", Level.DEBUG),\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestGCLogMessages.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-            \"ClearLoggedCards\",\n+            \"ClearPendingCards\",\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/collection\/TestG1ParallelPhases.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}