{"files":[{"patch":"@@ -31,0 +31,1 @@\n+#include \"gc\/g1\/g1ConcurrentRefineSweepTask.hpp\"\n@@ -32,1 +33,0 @@\n-#include \"gc\/g1\/g1ConcurrentRefineWorkTask.hpp\"\n@@ -289,1 +289,1 @@\n-  G1ConcurrentRefineWorkTask task(_sweep_table, &_stats, cr->num_threads_wanted());\n+  G1ConcurrentRefineSweepTask task(_sweep_table, &_stats, cr->num_threads_wanted());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"gc\/g1\/g1ConcurrentRefineWorkTask.hpp\"\n+#include \"gc\/g1\/g1ConcurrentRefineSweepTask.hpp\"\n@@ -140,1 +140,1 @@\n-                               \n+\n@@ -163,1 +163,1 @@\n-G1ConcurrentRefineWorkTask::G1ConcurrentRefineWorkTask(G1CardTableClaimTable* scan_state,\n+G1ConcurrentRefineSweepTask::G1ConcurrentRefineSweepTask(G1CardTableClaimTable* scan_state,\n@@ -173,1 +173,1 @@\n-void G1ConcurrentRefineWorkTask::work(uint worker_id) {\n+void G1ConcurrentRefineSweepTask::work(uint worker_id) {\n@@ -187,1 +187,1 @@\n-bool G1ConcurrentRefineWorkTask::sweep_completed() const { return _sweep_completed; }\n\\ No newline at end of file\n+bool G1ConcurrentRefineSweepTask::sweep_completed() const { return _sweep_completed; }\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineSweepTask.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineWorkTask.cpp","status":"renamed"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_G1_G1CONCURRENTREFINESWEEPTASK_HPP\n+#define SHARE_GC_G1_G1CONCURRENTREFINESWEEPTASK_HPP\n+\n+#include \"gc\/g1\/g1ConcurrentRefineStats.hpp\"\n+#include \"gc\/shared\/workerThread.hpp\"\n+\n+class G1CardTableClaimTable;\n+\n+class G1ConcurrentRefineSweepTask : public WorkerTask {\n+  G1CardTableClaimTable* _scan_state;\n+  G1ConcurrentRefineStats* _stats;\n+  uint _max_workers;\n+  bool _sweep_completed;\n+\n+public:\n+\n+  G1ConcurrentRefineSweepTask(G1CardTableClaimTable* scan_state, G1ConcurrentRefineStats* stats, uint max_workers);\n+\n+  void work(uint worker_id) override;\n+\n+  bool sweep_completed() const;\n+};\n+\n+#endif \/* SHARE_GC_G1_G1CONCURRENTREFINESWEEPTASK_HPP *\/\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineSweepTask.hpp","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/g1\/g1ConcurrentRefineSweepTask.hpp\"\n@@ -30,1 +31,0 @@\n-#include \"gc\/g1\/g1ConcurrentRefineWorkTask.hpp\"\n@@ -78,5 +78,5 @@\n-        log_debug(gc,refine)(\"Concurrent Refine Adjust Only (#threads wanted: %u adjustment_needed: %s wait_for_heap_lock: %s) %.2fms\",\n-                             cr()->num_threads_wanted(),\n-                             BOOL_TO_STR(cr()->is_thread_adjustment_needed()),\n-                             BOOL_TO_STR(cr()->wait_for_heap_lock()),\n-                             (Ticks::now() - adjust_start).seconds() * MILLIUNITS);\n+        log_debug(gc, refine)(\"Concurrent Refine Adjust Only (#threads wanted: %u adjustment_needed: %s wait_for_heap_lock: %s) %.2fms\",\n+                              cr()->num_threads_wanted(),\n+                              BOOL_TO_STR(cr()->is_thread_adjustment_needed()),\n+                              BOOL_TO_STR(cr()->wait_for_heap_lock()),\n+                              (Ticks::now() - adjust_start).seconds() * MILLIUNITS);\n@@ -143,1 +143,1 @@\n-  log_debug(gc,refine)(\"Concurrent Refine Work Start (threads wanted: %u)\", _cr->num_threads_wanted());\n+  log_debug(gc, refine)(\"Concurrent Refine Work Start (threads wanted: %u)\", _cr->num_threads_wanted());\n@@ -159,1 +159,1 @@\n-  log_debug(gc,refine)(\"Concurrent Refine Java Thread CT swap\");\n+  log_debug(gc, refine)(\"Concurrent Refine Java Thread CT swap\");\n@@ -166,1 +166,1 @@\n-  log_debug(gc,refine)(\"Concurrent Refine GC Thread CT swap\");\n+  log_debug(gc, refine)(\"Concurrent Refine GC Thread CT swap\");\n@@ -176,1 +176,1 @@\n-  log_debug(gc,refine)(\"Concurrent Refine Snapshot Heap\");\n+  log_debug(gc, refine)(\"Concurrent Refine Snapshot Heap\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineThread.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_G1_G1CONCURRENTREFINEWORKTASK_HPP\n-#define SHARE_GC_G1_G1CONCURRENTREFINEWORKTASK_HPP\n-\n-#include \"gc\/g1\/g1ConcurrentRefineStats.hpp\"\n-#include \"gc\/shared\/workerThread.hpp\"\n-\n-class G1CardTableClaimTable;\n-\n-class G1ConcurrentRefineWorkTask : public WorkerTask {\n-  G1CardTableClaimTable* _scan_state;\n-  G1ConcurrentRefineStats* _stats;\n-  uint _max_workers;\n-  bool _sweep_completed;\n-\n-public:\n-\n-  G1ConcurrentRefineWorkTask(G1CardTableClaimTable* scan_state, G1ConcurrentRefineStats* stats, uint max_workers);\n-\n-  void work(uint worker_id) override;\n-\n-  bool sweep_completed() const;\n-};\n-\n-#endif \/* SHARE_GC_G1_G1CONCURRENTREFINEWORKTASK_HPP *\/\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineWorkTask.hpp","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -35,1 +35,1 @@\n-#include \"gc\/g1\/g1ConcurrentRefineWorkTask.hpp\"\n+#include \"gc\/g1\/g1ConcurrentRefineSweepTask.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}