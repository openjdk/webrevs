{"files":[{"patch":"@@ -37,0 +37,6 @@\n+\n+  G1CollectedHeap* g1h = G1CollectedHeap::heap();\n+  G1HeapRegion* r = g1h->heap_region_containing(mr.start());\n+\n+  assert(r == g1h->heap_region_containing(mr.last()), \"MemRegion crosses region\");\n+\n@@ -43,2 +49,0 @@\n-        G1CollectedHeap* g1h = G1CollectedHeap::heap();\n-        G1HeapRegion* r = g1h->heap_region_containing(mr.start());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardTable.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-  return a ^ ((a ^ b) & mask);\n+  return (a & ~mask) | (b & mask);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardTable.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -916,1 +916,1 @@\n-  jlong synchronized_duration() const { return _safepoint_duration; }\n+  jlong safepoint_duration() const { return _safepoint_duration; }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -333,2 +333,2 @@\n-                          s->cards_still_refer_to_cset(),\n-                          percent_of(s->cards_still_refer_to_cset(), s->cards_not_clean()),\n+                          s->cards_already_refer_to_cset(),\n+                          percent_of(s->cards_already_refer_to_cset(), s->cards_not_clean()),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+class G1CardTableClaimTable;\n@@ -42,1 +43,0 @@\n-class G1CardTableClaimTable;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-  _cards_still_refer_to_cset(0),\n+  _cards_already_refer_to_cset(0),\n@@ -48,1 +48,1 @@\n-  Atomic::add(&_cards_still_refer_to_cset, other->_cards_still_refer_to_cset, memory_order_relaxed);\n+  Atomic::add(&_cards_already_refer_to_cset, other->_cards_already_refer_to_cset, memory_order_relaxed);\n@@ -63,1 +63,1 @@\n-  _cards_still_refer_to_cset += other._cards_still_refer_to_cset;\n+  _cards_already_refer_to_cset += other._cards_already_refer_to_cset;\n@@ -84,1 +84,1 @@\n-  _cards_still_refer_to_cset = saturated_sub(_cards_still_refer_to_cset, other._cards_still_refer_to_cset);\n+  _cards_already_refer_to_cset = saturated_sub(_cards_already_refer_to_cset, other._cards_already_refer_to_cset);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineStats.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,2 +43,2 @@\n-  size_t _cards_still_refer_to_cset;  \/\/ Number of cards marked still young.\n-  size_t _cards_refer_to_cset;        \/\/ Number of dirty cards that contain a to-cset reference.\n+  size_t _cards_already_refer_to_cset;\/\/ Number of cards marked found to be already young.\n+  size_t _cards_refer_to_cset;        \/\/ Number of dirty cards that were recently found to contain a to-cset reference.\n@@ -65,1 +65,1 @@\n-  size_t cards_still_refer_to_cset() const { return _cards_still_refer_to_cset; }\n+  size_t cards_already_refer_to_cset() const { return _cards_already_refer_to_cset; }\n@@ -70,1 +70,1 @@\n-  size_t cards_pending() const { return cards_not_clean() - _cards_still_refer_to_cset; }\n+  size_t cards_pending() const { return cards_not_clean() - _cards_already_refer_to_cset; }\n@@ -72,1 +72,1 @@\n-  size_t cards_to_cset() const { return _cards_still_refer_to_cset + _cards_refer_to_cset; }\n+  size_t cards_to_cset() const { return _cards_already_refer_to_cset + _cards_refer_to_cset; }\n@@ -81,1 +81,1 @@\n-  void inc_cards_still_refer_to_cset() { _cards_still_refer_to_cset++; }\n+  void inc_cards_already_refer_to_cset() { _cards_already_refer_to_cset++; }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineStats.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-  jlong synchronize_duration_at_sweep_start = g1h->synchronized_duration();\n+  jlong synchronize_duration_at_sweep_start = g1h->safepoint_duration();\n@@ -207,1 +207,1 @@\n-    state.add_yield_duration(G1CollectedHeap::heap()->synchronized_duration() - synchronize_duration_at_sweep_start);\n+    state.add_yield_duration(G1CollectedHeap::heap()->safepoint_duration() - synchronize_duration_at_sweep_start);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-      _refine_stats.inc_cards_still_refer_to_cset();\n+      _refine_stats.inc_cards_already_refer_to_cset();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineWorkTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}