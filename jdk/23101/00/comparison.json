{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -106,1 +106,0 @@\n-import com.sun.tools.javac.util.JCDiagnostic.DiagnosticFlag;\n@@ -154,1 +153,0 @@\n-    private final boolean allowRequiresTransitiveJavaBase;\n@@ -210,5 +208,0 @@\n-        Preview preview = Preview.instance(context);\n-\n-        allowRequiresTransitiveJavaBase =\n-                Feature.JAVA_BASE_TRANSITIVE.allowedInSource(source) &&\n-                 (!preview.isPreview(Feature.JAVA_BASE_TRANSITIVE) || preview.isEnabled());\n@@ -825,1 +818,0 @@\n-                        !allowRequiresTransitiveJavaBase &&\n@@ -828,3 +820,2 @@\n-                            log.error(DiagnosticFlag.SOURCE_LEVEL,\n-                                      tree.pos(),\n-                                      Feature.JAVA_BASE_TRANSITIVE.error(source.name));\n+                            preview.checkSourceLevel(tree.pos(),\n+                                                     Feature.JAVA_BASE_TRANSITIVE);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Modules.java","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8328481 8332236 8332890 8344647\n+ * @bug 8328481 8332236 8332890 8344647 8347646\n@@ -42,0 +42,1 @@\n+import java.lang.classfile.ClassFile;\n@@ -969,0 +970,80 @@\n+\n+    @Test \/\/JDK-8347646\n+    public void testRequiresTransitiveJavaBase(Path base) throws Exception {\n+        Path current = base.resolve(\".\");\n+        Path src = current.resolve(\"src\");\n+        Path classes = current.resolve(\"classes\");\n+        Path ma = src.resolve(\"ma\");\n+        Path maClasses = classes.resolve(\"ma\");\n+        tb.writeJavaFiles(ma,\n+                          \"\"\"\n+                          module ma {\n+                             requires transitive java.base;\n+                          }\n+                          \"\"\");\n+        Path test = src.resolve(\"test\");\n+        tb.writeJavaFiles(test,\n+                          \"\"\"\n+                          module test {\n+                              requires ma;\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          import module ma;\n+                          public class Test {\n+                              public static void main(String... args) {\n+                                  System.out.println(List.of(\"Hello\"));\n+                              }\n+                          }\n+                          \"\"\");\n+\n+        Files.createDirectories(maClasses);\n+\n+        List<String> actualErrors = new JavacTask(tb)\n+                .options(\"-XDrawDiagnostics\")\n+                .outdir(maClasses)\n+                .files(tb.findJavaFiles(ma))\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        List<String> expectedErrors = List.of(\n+                \"module-info.java:2:4: compiler.err.preview.feature.disabled.plural: (compiler.misc.feature.java.base.transitive)\",\n+                \"1 error\"\n+        );\n+\n+        if (!Objects.equals(expectedErrors, actualErrors)) {\n+            throw new AssertionError(\"Incorrect Output, expected: \" + expectedErrors +\n+                                      \", actual: \" + actualErrors);\n+\n+        }\n+\n+        new JavacTask(tb)\n+            .options(\"-XDrawDiagnostics\",\n+                     \"--source\", \"9\")\n+            .outdir(maClasses)\n+            .files(tb.findJavaFiles(ma))\n+            .run()\n+            .writeAll();\n+\n+        Path maModuleInfo = maClasses.resolve(\"module-info.class\");\n+\n+        if (ClassFile.of().parse(maModuleInfo).minorVersion() == ClassFile.PREVIEW_MINOR_VERSION) {\n+            throw new AssertionError(\"wrong minor version\");\n+        }\n+\n+        new JavacTask(tb)\n+            .options(\"-XDrawDiagnostics\",\n+                     \"--enable-preview\", \"--release\", SOURCE_VERSION)\n+            .outdir(maClasses)\n+            .files(tb.findJavaFiles(ma))\n+            .run()\n+            .writeAll();\n+\n+        Path maModuleInfo2 = maClasses.resolve(\"module-info.class\");\n+\n+        if (ClassFile.of().parse(maModuleInfo2).minorVersion() != ClassFile.PREVIEW_MINOR_VERSION) {\n+            throw new AssertionError(\"wrong minor version\");\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/ImportModule.java","additions":83,"deletions":2,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-\/\/ key: compiler.err.feature.not.supported.in.source.plural\n+\/\/ key: compiler.err.preview.feature.disabled.plural\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ModifierNotAllowed\/module-info.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -169,1 +169,1 @@\n-                    : \"compiler.err.feature.not.supported.in.source.plural: (compiler.misc.feature.java.base.transitive)\";\n+                    : \"compiler.err.preview.feature.disabled.plural: (compiler.misc.feature.java.base.transitive)\";\n","filename":"test\/langtools\/tools\/javac\/modules\/JavaBaseTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}