{"files":[{"patch":"@@ -405,2 +405,1 @@\n-    uses sun.util.resources.LocaleData.CommonResourceBundleProvider;\n-    uses sun.util.resources.LocaleData.SupplementaryResourceBundleProvider;\n+    uses sun.util.resources.LocaleData.LocaleDataResourceBundleProvider;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,0 @@\n-\/*\n- *\/\n-\n@@ -82,1 +79,1 @@\n-import sun.util.resources.ParallelListResourceBundle;\n+import sun.util.resources.OpenListResourceBundle;\n@@ -84,1 +81,1 @@\n-public class FormatData extends ParallelListResourceBundle {\n+public class FormatData extends OpenListResourceBundle {\n@@ -86,1 +83,1 @@\n-     * Overrides ListResourceBundle\n+     * Overrides OpenListResourceBundle\n@@ -122,0 +119,103 @@\n+        \/\/ Moved from JavaTimeSupplementary\n+        final String[] sharedQuarterNames = {\n+            \"Q1\",\n+            \"Q2\",\n+            \"Q3\",\n+            \"Q4\",\n+        };\n+\n+        final String[] sharedQuarterNarrows = {\n+            \"1\",\n+            \"2\",\n+            \"3\",\n+            \"4\",\n+        };\n+\n+        final String[] sharedDatePatterns = {\n+            \"GGGG y MMMM d, EEEE\",\n+            \"GGGG y MMMM d\",\n+            \"GGGG y MMM d\",\n+            \"G y-MM-dd\",\n+        };\n+\n+        final String[] sharedDayAbbrs = {\n+            \"Sun\",\n+            \"Mon\",\n+            \"Tue\",\n+            \"Wed\",\n+            \"Thu\",\n+            \"Fri\",\n+            \"Sat\",\n+        };\n+\n+        final String[] sharedDayNarrows = {\n+            \"S\",\n+            \"M\",\n+            \"T\",\n+            \"W\",\n+            \"T\",\n+            \"F\",\n+            \"S\",\n+        };\n+\n+        final String[] sharedEras = {\n+            \"\",\n+            \"AH\",\n+        };\n+\n+        final String[] sharedMonthNarrows = {\n+            \"1\",\n+            \"2\",\n+            \"3\",\n+            \"4\",\n+            \"5\",\n+            \"6\",\n+            \"7\",\n+            \"8\",\n+            \"9\",\n+            \"10\",\n+            \"11\",\n+            \"12\",\n+            \"\",\n+        };\n+\n+        final String[] sharedTimePatterns = {\n+            \"HH:mm:ss zzzz\",\n+            \"HH:mm:ss z\",\n+            \"HH:mm:ss\",\n+            \"HH:mm\",\n+        };\n+\n+        final String[] sharedAmPmMarkers = {\n+            \"AM\",\n+            \"PM\",\n+        };\n+\n+        final String[] sharedJavaTimeDatePatterns = {\n+            \"G y MMMM d, EEEE\",\n+            \"G y MMMM d\",\n+            \"G y MMM d\",\n+            \"GGGGG y-MM-dd\",\n+        };\n+\n+        final String[] sharedShortEras = {\n+            \"Before R.O.C.\",\n+            \"R.O.C.\",\n+        };\n+\n+        final String[] sharedMonthAbbrs = {\n+            \"Jan\",\n+            \"Feb\",\n+            \"Mar\",\n+            \"Apr\",\n+            \"May\",\n+            \"Jun\",\n+            \"Jul\",\n+            \"Aug\",\n+            \"Sep\",\n+            \"Oct\",\n+            \"Nov\",\n+            \"Dec\",\n+            \"\",\n+        };\n+\n@@ -141,16 +241,1 @@\n-                new String[] {\n-                    \"Jan\", \/\/ abb january\n-                    \"Feb\", \/\/ abb february\n-                    \"Mar\", \/\/ abb march\n-                    \"Apr\", \/\/ abb april\n-                    \"May\", \/\/ abb may\n-                    \"Jun\", \/\/ abb june\n-                    \"Jul\", \/\/ abb july\n-                    \"Aug\", \/\/ abb august\n-                    \"Sep\", \/\/ abb september\n-                    \"Oct\", \/\/ abb october\n-                    \"Nov\", \/\/ abb november\n-                    \"Dec\", \/\/ abb december\n-                    \"\" \/\/ abb month 13 if applicable\n-                }\n-            },\n+                sharedMonthAbbrs },\n@@ -158,16 +243,1 @@\n-                new String[] {\n-                    \"1\",\n-                    \"2\",\n-                    \"3\",\n-                    \"4\",\n-                    \"5\",\n-                    \"6\",\n-                    \"7\",\n-                    \"8\",\n-                    \"9\",\n-                    \"10\",\n-                    \"11\",\n-                    \"12\",\n-                    \"\",\n-                }\n-            },\n+                sharedMonthNarrows },\n@@ -186,10 +256,1 @@\n-                new String[] {\n-                    \"Sun\", \/\/ abb Sunday\n-                    \"Mon\", \/\/ abb Monday\n-                    \"Tue\", \/\/ abb Tuesday\n-                    \"Wed\", \/\/ abb Wednesday\n-                    \"Thu\", \/\/ abb Thursday\n-                    \"Fri\", \/\/ abb Friday\n-                    \"Sat\" \/\/ abb Saturday\n-                }\n-            },\n+                sharedDayAbbrs },\n@@ -197,10 +258,1 @@\n-                new String[] {\n-                    \"S\",\n-                    \"M\",\n-                    \"T\",\n-                    \"W\",\n-                    \"T\",\n-                    \"F\",\n-                    \"S\",\n-                }\n-            },\n+                sharedDayNarrows },\n@@ -208,5 +260,1 @@\n-                new String[] {\n-                    \"AM\", \/\/ am marker\n-                    \"PM\" \/\/ pm marker\n-                }\n-            },\n+                sharedAmPmMarkers },\n@@ -230,2 +278,1 @@\n-              buddhistEras\n-            },\n+                buddhistEras },\n@@ -233,2 +280,1 @@\n-              buddhistEras\n-            },\n+                buddhistEras },\n@@ -236,2 +282,1 @@\n-              buddhistEras\n-            },\n+                buddhistEras },\n@@ -241,2 +286,1 @@\n-                japaneseEraAbbrs\n-            },\n+                japaneseEraAbbrs },\n@@ -244,2 +288,1 @@\n-                japaneseEraAbbrs\n-            },\n+                japaneseEraAbbrs },\n@@ -901,0 +944,158 @@\n+\n+            \/\/ Moved from JavaTimeSupplementary\n+            { \"QuarterAbbreviations\",\n+                sharedQuarterNames },\n+            { \"QuarterNames\",\n+                sharedQuarterNames },\n+            { \"QuarterNarrows\",\n+                sharedQuarterNarrows },\n+            { \"field.dayperiod\",\n+                \"Dayperiod\" },\n+            { \"field.era\",\n+                \"Era\" },\n+            { \"field.hour\",\n+                \"Hour\" },\n+            { \"field.minute\",\n+                \"Minute\" },\n+            { \"field.month\",\n+                \"Month\" },\n+            { \"field.second\",\n+                \"Second\" },\n+            { \"field.week\",\n+                \"Week\" },\n+            { \"field.weekday\",\n+                \"Day of the Week\" },\n+            { \"field.year\",\n+                \"Year\" },\n+            { \"field.zone\",\n+                \"Zone\" },\n+            { \"islamic.DatePatterns\",\n+                sharedDatePatterns },\n+            { \"islamic.DayAbbreviations\",\n+                sharedDayAbbrs },\n+            { \"islamic.DayNames\",\n+                sharedDayAbbrs },\n+            { \"islamic.DayNarrows\",\n+                sharedDayNarrows },\n+            { \"islamic.Eras\",\n+                sharedEras },\n+            { \"islamic.MonthAbbreviations\",\n+                new String[] {\n+                    \"Muh.\",\n+                    \"Saf.\",\n+                    \"Rab. I\",\n+                    \"Rab. II\",\n+                    \"Jum. I\",\n+                    \"Jum. II\",\n+                    \"Raj.\",\n+                    \"Sha.\",\n+                    \"Ram.\",\n+                    \"Shaw.\",\n+                    \"Dhuʻl-Q.\",\n+                    \"Dhuʻl-H.\",\n+                    \"\",\n+                }\n+            },\n+            { \"islamic.MonthNames\",\n+                new String[] {\n+                    \"Muharram\",\n+                    \"Safar\",\n+                    \"Rabiʻ I\",\n+                    \"Rabiʻ II\",\n+                    \"Jumada I\",\n+                    \"Jumada II\",\n+                    \"Rajab\",\n+                    \"Shaʻban\",\n+                    \"Ramadan\",\n+                    \"Shawwal\",\n+                    \"Dhuʻl-Qiʻdah\",\n+                    \"Dhuʻl-Hijjah\",\n+                    \"\",\n+                }\n+            },\n+            { \"islamic.MonthNarrows\",\n+                sharedMonthNarrows },\n+            { \"islamic.QuarterNames\",\n+                sharedQuarterNames },\n+            { \"islamic.QuarterNarrows\",\n+                sharedQuarterNarrows },\n+            { \"islamic.TimePatterns\",\n+                sharedTimePatterns },\n+            { \"islamic.abbreviated.AmPmMarkers\",\n+                sharedAmPmMarkers },\n+            { \"islamic.long.Eras\",\n+                sharedEras },\n+            { \"islamic.narrow.Eras\",\n+                sharedEras },\n+            { \"islamic.short.Eras\",\n+                sharedEras },\n+            { \"java.time.buddhist.DatePatterns\",\n+                sharedJavaTimeDatePatterns },\n+            { \"java.time.buddhist.long.Eras\",\n+                new String[] {\n+                    \"BC\",\n+                    \"BE\",\n+                }\n+            },\n+            { \"java.time.buddhist.short.Eras\",\n+                buddhistEras },\n+            { \"java.time.islamic.DatePatterns\",\n+                sharedJavaTimeDatePatterns },\n+            { \"java.time.japanese.DatePatterns\",\n+                new String[] {\n+                    \"G y MMMM d (EEEE)\",\n+                    \"G y MMMM d\",\n+                    \"G y MMM d\",\n+                    \"GGGGGy.MM.dd\",\n+                }\n+            },\n+            { \"java.time.japanese.long.Eras\",\n+                japaneseEras },\n+            { \"java.time.japanese.short.Eras\",\n+                japaneseEras },\n+            { \"java.time.long.Eras\",\n+                new String[] {\n+                    \"BCE\",\n+                    \"CE\",\n+                }\n+            },\n+            { \"java.time.roc.DatePatterns\",\n+                sharedJavaTimeDatePatterns },\n+            { \"java.time.short.Eras\",\n+                julianEras },\n+            { \"roc.AmPmMarkers\",\n+                sharedAmPmMarkers },\n+            { \"roc.DatePatterns\",\n+                sharedDatePatterns },\n+            { \"roc.DayNames\",\n+                sharedDayAbbrs },\n+            { \"roc.DayNarrows\",\n+                sharedDayNarrows },\n+            { \"roc.Eras\",\n+                sharedShortEras },\n+            { \"roc.MonthAbbreviations\",\n+                sharedMonthAbbrs },\n+            { \"roc.MonthNames\",\n+                sharedMonthAbbrs },\n+            { \"roc.MonthNarrows\",\n+                sharedMonthNarrows },\n+            { \"roc.QuarterNames\",\n+                sharedQuarterNames },\n+            { \"roc.QuarterNarrows\",\n+                sharedQuarterNarrows },\n+            { \"roc.TimePatterns\",\n+                sharedTimePatterns },\n+            { \"roc.abbreviated.AmPmMarkers\",\n+                sharedAmPmMarkers },\n+            { \"roc.long.Eras\",\n+                sharedShortEras },\n+            { \"roc.narrow.AmPmMarkers\",\n+                sharedAmPmMarkers },\n+            { \"roc.narrow.Eras\",\n+                sharedShortEras },\n+            { \"roc.short.Eras\",\n+                sharedShortEras },\n+            { \"timezone.gmtFormat\",\n+                \"GMT{0}\" },\n+            { \"timezone.hourFormat\",\n+                \"+HH:mm;-HH:mm\" },\n","filename":"src\/java.base\/share\/classes\/sun\/text\/resources\/FormatData.java","additions":275,"deletions":74,"binary":false,"changes":349,"status":"modified"},{"patch":"@@ -1,353 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * COPYRIGHT AND PERMISSION NOTICE\n- *\n- * Copyright (C) 1991-2016 Unicode, Inc. All rights reserved.\n- * Distributed under the Terms of Use in\n- * http:\/\/www.unicode.org\/copyright.html.\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining\n- * a copy of the Unicode data files and any associated documentation\n- * (the \"Data Files\") or Unicode software and any associated documentation\n- * (the \"Software\") to deal in the Data Files or Software\n- * without restriction, including without limitation the rights to use,\n- * copy, modify, merge, publish, distribute, and\/or sell copies of\n- * the Data Files or Software, and to permit persons to whom the Data Files\n- * or Software are furnished to do so, provided that\n- * (a) this copyright and permission notice appear with all copies\n- * of the Data Files or Software,\n- * (b) this copyright and permission notice appear in associated\n- * documentation, and\n- * (c) there is clear notice in each modified Data File or in the Software\n- * as well as in the documentation associated with the Data File(s) or\n- * Software that the data or software has been modified.\n- *\n- * THE DATA FILES AND SOFTWARE ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF\n- * ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n- * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n- * NONINFRINGEMENT OF THIRD PARTY RIGHTS.\n- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS\n- * NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL\n- * DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,\n- * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\n- * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n- * PERFORMANCE OF THE DATA FILES OR SOFTWARE.\n- *\n- * Except as contained in this notice, the name of a copyright holder\n- * shall not be used in advertising or otherwise to promote the sale,\n- * use or other dealings in these Data Files or Software without prior\n- * written authorization of the copyright holder.\n- *\/\n-\n-\/\/  Note: this file has been generated by a tool.\n-\n-package sun.text.resources;\n-\n-import sun.util.resources.OpenListResourceBundle;\n-\n-public class JavaTimeSupplementary extends OpenListResourceBundle {\n-    @Override\n-    protected final Object[][] getContents() {\n-        final String[] sharedQuarterNames = {\n-            \"Q1\",\n-            \"Q2\",\n-            \"Q3\",\n-            \"Q4\",\n-        };\n-\n-        final String[] sharedQuarterNarrows = {\n-            \"1\",\n-            \"2\",\n-            \"3\",\n-            \"4\",\n-        };\n-\n-        final String[] sharedDatePatterns = {\n-            \"GGGG y MMMM d, EEEE\",\n-            \"GGGG y MMMM d\",\n-            \"GGGG y MMM d\",\n-            \"G y-MM-dd\",\n-        };\n-\n-        final String[] sharedDayNames = {\n-            \"Sun\",\n-            \"Mon\",\n-            \"Tue\",\n-            \"Wed\",\n-            \"Thu\",\n-            \"Fri\",\n-            \"Sat\",\n-        };\n-\n-        final String[] sharedDayNarrows = {\n-            \"S\",\n-            \"M\",\n-            \"T\",\n-            \"W\",\n-            \"T\",\n-            \"F\",\n-            \"S\",\n-        };\n-\n-        final String[] sharedEras = {\n-            \"\",\n-            \"AH\",\n-        };\n-\n-        final String[] sharedMonthNarrows = {\n-            \"1\",\n-            \"2\",\n-            \"3\",\n-            \"4\",\n-            \"5\",\n-            \"6\",\n-            \"7\",\n-            \"8\",\n-            \"9\",\n-            \"10\",\n-            \"11\",\n-            \"12\",\n-            \"\",\n-        };\n-\n-        final String[] sharedTimePatterns = {\n-            \"HH:mm:ss zzzz\",\n-            \"HH:mm:ss z\",\n-            \"HH:mm:ss\",\n-            \"HH:mm\",\n-        };\n-\n-        final String[] sharedAmPmMarkers = {\n-            \"AM\",\n-            \"PM\",\n-        };\n-\n-        final String[] sharedJavaTimeDatePatterns = {\n-            \"G y MMMM d, EEEE\",\n-            \"G y MMMM d\",\n-            \"G y MMM d\",\n-            \"GGGGG y-MM-dd\",\n-        };\n-\n-        final String[] sharedJavaTimeLongEras = {\n-            \"\",\n-            \"Meiji\",\n-            \"Taisho\",\n-            \"Showa\",\n-            \"Heisei\",\n-            \"Reiwa\",\n-        };\n-\n-        final String[] sharedShortEras = {\n-            \"Before R.O.C.\",\n-            \"R.O.C.\",\n-        };\n-\n-        final String[] sharedMonthNames = {\n-            \"Jan\",\n-            \"Feb\",\n-            \"Mar\",\n-            \"Apr\",\n-            \"May\",\n-            \"Jun\",\n-            \"Jul\",\n-            \"Aug\",\n-            \"Sep\",\n-            \"Oct\",\n-            \"Nov\",\n-            \"Dec\",\n-            \"\",\n-        };\n-\n-        return new Object[][] {\n-            { \"QuarterAbbreviations\",\n-                sharedQuarterNames },\n-            { \"QuarterNames\",\n-                sharedQuarterNames },\n-            { \"QuarterNarrows\",\n-                sharedQuarterNarrows },\n-            { \"field.dayperiod\",\n-                \"Dayperiod\" },\n-            { \"field.era\",\n-                \"Era\" },\n-            { \"field.hour\",\n-                \"Hour\" },\n-            { \"field.minute\",\n-                \"Minute\" },\n-            { \"field.month\",\n-                \"Month\" },\n-            { \"field.second\",\n-                \"Second\" },\n-            { \"field.week\",\n-                \"Week\" },\n-            { \"field.weekday\",\n-                \"Day of the Week\" },\n-            { \"field.year\",\n-                \"Year\" },\n-            { \"field.zone\",\n-                \"Zone\" },\n-            { \"islamic.DatePatterns\",\n-                sharedDatePatterns },\n-            { \"islamic.DayAbbreviations\",\n-                sharedDayNames },\n-            { \"islamic.DayNames\",\n-                sharedDayNames },\n-            { \"islamic.DayNarrows\",\n-                sharedDayNarrows },\n-            { \"islamic.Eras\",\n-                sharedEras },\n-            { \"islamic.MonthAbbreviations\",\n-                new String[] {\n-                    \"Muh.\",\n-                    \"Saf.\",\n-                    \"Rab. I\",\n-                    \"Rab. II\",\n-                    \"Jum. I\",\n-                    \"Jum. II\",\n-                    \"Raj.\",\n-                    \"Sha.\",\n-                    \"Ram.\",\n-                    \"Shaw.\",\n-                    \"Dhuʻl-Q.\",\n-                    \"Dhuʻl-H.\",\n-                    \"\",\n-                }\n-            },\n-            { \"islamic.MonthNames\",\n-                new String[] {\n-                    \"Muharram\",\n-                    \"Safar\",\n-                    \"Rabiʻ I\",\n-                    \"Rabiʻ II\",\n-                    \"Jumada I\",\n-                    \"Jumada II\",\n-                    \"Rajab\",\n-                    \"Shaʻban\",\n-                    \"Ramadan\",\n-                    \"Shawwal\",\n-                    \"Dhuʻl-Qiʻdah\",\n-                    \"Dhuʻl-Hijjah\",\n-                    \"\",\n-                }\n-            },\n-            { \"islamic.MonthNarrows\",\n-                sharedMonthNarrows },\n-            { \"islamic.QuarterNames\",\n-                sharedQuarterNames },\n-            { \"islamic.QuarterNarrows\",\n-                sharedQuarterNarrows },\n-            { \"islamic.TimePatterns\",\n-                sharedTimePatterns },\n-            { \"islamic.abbreviated.AmPmMarkers\",\n-                sharedAmPmMarkers },\n-            { \"islamic.long.Eras\",\n-                sharedEras },\n-            { \"islamic.narrow.Eras\",\n-                sharedEras },\n-            { \"islamic.short.Eras\",\n-                sharedEras },\n-            { \"java.time.buddhist.DatePatterns\",\n-                sharedJavaTimeDatePatterns },\n-            { \"java.time.buddhist.long.Eras\",\n-                new String[] {\n-                    \"BC\",\n-                    \"BE\",\n-                }\n-            },\n-            { \"java.time.buddhist.short.Eras\",\n-                new String[] {\n-                    \"BC\",\n-                    \"B.E.\",\n-                }\n-            },\n-            { \"java.time.islamic.DatePatterns\",\n-                sharedJavaTimeDatePatterns },\n-            { \"java.time.japanese.DatePatterns\",\n-                new String[] {\n-                    \"G y MMMM d (EEEE)\",\n-                    \"G y MMMM d\",\n-                    \"G y MMM d\",\n-                    \"GGGGGy.MM.dd\",\n-                }\n-            },\n-            { \"java.time.japanese.long.Eras\",\n-                sharedJavaTimeLongEras },\n-            { \"java.time.japanese.short.Eras\",\n-                sharedJavaTimeLongEras },\n-            { \"java.time.long.Eras\",\n-                new String[] {\n-                    \"BCE\",\n-                    \"CE\",\n-                }\n-            },\n-            { \"java.time.roc.DatePatterns\",\n-                sharedJavaTimeDatePatterns },\n-            { \"java.time.short.Eras\",\n-                new String[] {\n-                    \"BC\",\n-                    \"AD\",\n-                }\n-            },\n-            { \"roc.AmPmMarkers\",\n-                sharedAmPmMarkers },\n-            { \"roc.DatePatterns\",\n-                sharedDatePatterns },\n-            { \"roc.DayNames\",\n-                sharedDayNames },\n-            { \"roc.DayNarrows\",\n-                sharedDayNarrows },\n-            { \"roc.Eras\",\n-                sharedShortEras },\n-            { \"roc.MonthAbbreviations\",\n-                sharedMonthNames },\n-            { \"roc.MonthNames\",\n-                sharedMonthNames },\n-            { \"roc.MonthNarrows\",\n-                sharedMonthNarrows },\n-            { \"roc.QuarterNames\",\n-                sharedQuarterNames },\n-            { \"roc.QuarterNarrows\",\n-                sharedQuarterNarrows },\n-            { \"roc.TimePatterns\",\n-                sharedTimePatterns },\n-            { \"roc.abbreviated.AmPmMarkers\",\n-                sharedAmPmMarkers },\n-            { \"roc.long.Eras\",\n-                sharedShortEras },\n-            { \"roc.narrow.AmPmMarkers\",\n-                sharedAmPmMarkers },\n-            { \"roc.narrow.Eras\",\n-                sharedShortEras },\n-            { \"roc.short.Eras\",\n-                sharedShortEras },\n-            { \"timezone.gmtFormat\",\n-                \"GMT{0}\" },\n-            { \"timezone.hourFormat\",\n-                \"+HH:mm;-HH:mm\" },\n-        };\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/text\/resources\/JavaTimeSupplementary.java","additions":0,"deletions":353,"binary":false,"changes":353,"status":"deleted"},{"patch":"@@ -1,35 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.text.resources;\n-\n-import java.util.spi.ResourceBundleProvider;\n-\n-\/**\n- * An interface for the internal locale data provider for which {@code ResourceBundle}\n- * searches.\n- *\/\n-public interface JavaTimeSupplementaryProvider extends ResourceBundleProvider {\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/text\/resources\/JavaTimeSupplementaryProvider.java","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,0 @@\n-import sun.util.resources.ParallelListResourceBundle;\n@@ -582,5 +581,1 @@\n-        ResourceBundle rb = localeData.getDateFormatData(locale);\n-        if (rb instanceof ParallelListResourceBundle) {\n-            localeData.setSupplementary((ParallelListResourceBundle) rb);\n-        }\n-        return rb;\n+        return localeData.getDateFormatData(locale);\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/provider\/LocaleResources.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,0 @@\n-import java.util.MissingResourceException;\n@@ -146,24 +145,0 @@\n-    public void setSupplementary(ParallelListResourceBundle formatData) {\n-        if (!formatData.areParallelContentsComplete()) {\n-            String suppName = type.getTextResourcesPackage() + \".JavaTimeSupplementary\";\n-            setSupplementary(suppName, formatData);\n-        }\n-    }\n-\n-    private boolean setSupplementary(String suppName, ParallelListResourceBundle formatData) {\n-        ParallelListResourceBundle parent = (ParallelListResourceBundle) formatData.getParent();\n-        boolean resetKeySet = false;\n-        if (parent != null) {\n-            resetKeySet = setSupplementary(suppName, parent);\n-        }\n-        OpenListResourceBundle supp = getSupplementary(suppName, formatData.getLocale());\n-        formatData.setParallelContents(supp);\n-        resetKeySet |= supp != null;\n-        \/\/ If any parents or this bundle has parallel data, reset keyset to create\n-        \/\/ a new keyset with the data.\n-        if (resetKeySet) {\n-            formatData.resetKeySet();\n-        }\n-        return resetKeySet;\n-    }\n-\n@@ -182,12 +157,1 @@\n-    private static OpenListResourceBundle getSupplementary(final String baseName, final Locale locale) {\n-       OpenListResourceBundle rb = null;\n-       try {\n-           rb = (OpenListResourceBundle) Bundles.of(baseName, locale,\n-                                                    SupplementaryStrategy.INSTANCE);\n-       } catch (MissingResourceException e) {\n-           \/\/ return null if no supplementary is available\n-       }\n-       return rb;\n-    }\n-\n-    private abstract static class LocaleDataResourceBundleProvider\n+    public abstract static class LocaleDataResourceBundleProvider\n@@ -215,14 +179,0 @@\n-    \/**\n-     * A ResourceBundleProvider implementation for loading locale data\n-     * resource bundles except for the java.time supplementary data.\n-     *\/\n-    public abstract static class CommonResourceBundleProvider extends LocaleDataResourceBundleProvider {\n-    }\n-\n-    \/**\n-     * A ResourceBundleProvider implementation for loading supplementary\n-     * resource bundles for java.time.\n-     *\/\n-    public abstract static class SupplementaryResourceBundleProvider extends LocaleDataResourceBundleProvider {\n-    }\n-\n@@ -257,2 +207,2 @@\n-                candidates = adapter instanceof ResourceBundleBasedAdapter ?\n-                    ((ResourceBundleBasedAdapter)adapter).getCandidateLocales(baseName, locale) :\n+                candidates = adapter instanceof ResourceBundleBasedAdapter rbba ?\n+                    rbba.getCandidateLocales(baseName, locale) :\n@@ -264,5 +214,7 @@\n-                Set<String> langtags = ((JRELocaleProviderAdapter)adapter).getLanguageTagSet(category);\n-                if (!langtags.isEmpty()) {\n-                    for (Iterator<Locale> itr = candidates.iterator(); itr.hasNext();) {\n-                        if (!adapter.isSupportedProviderLocale(itr.next(), langtags)) {\n-                            itr.remove();\n+                if (adapter instanceof JRELocaleProviderAdapter jlpa) {\n+                    var langtags = jlpa.getLanguageTagSet(category);\n+                    if (!langtags.isEmpty()) {\n+                        for (Iterator<Locale> itr = candidates.iterator(); itr.hasNext();) {\n+                            if (!jlpa.isSupportedProviderLocale(itr.next(), langtags)) {\n+                                itr.remove();\n+                            }\n@@ -305,30 +257,1 @@\n-                        null : CommonResourceBundleProvider.class;\n-        }\n-    }\n-\n-    private static class SupplementaryStrategy extends LocaleDataStrategy {\n-        private static final SupplementaryStrategy INSTANCE\n-                = new SupplementaryStrategy();\n-        \/\/ TODO: avoid hard-coded Locales\n-        private static final Set<Locale> JAVA_BASE_LOCALES\n-            = Set.of(Locale.ROOT, Locale.ENGLISH, Locale.US);\n-\n-        private SupplementaryStrategy() {\n-        }\n-\n-        @Override\n-        public List<Locale> getCandidateLocales(String baseName, Locale locale) {\n-            \/\/ Specify only the given locale\n-            return List.of(locale);\n-        }\n-\n-        @Override\n-        public Class<? extends ResourceBundleProvider> getResourceBundleProviderType(String baseName,\n-                                                                                     Locale locale) {\n-            return inJavaBaseModule(baseName, locale) ?\n-                    null : SupplementaryResourceBundleProvider.class;\n-        }\n-\n-        @Override\n-        boolean inJavaBaseModule(String baseName, Locale locale) {\n-            return JAVA_BASE_LOCALES.contains(locale);\n+                        null : LocaleDataResourceBundleProvider.class;\n","filename":"src\/java.base\/share\/classes\/sun\/util\/resources\/LocaleData.java","additions":12,"deletions":89,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -1,259 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.util.resources;\n-\n-import java.util.AbstractSet;\n-import java.util.Collections;\n-import java.util.Enumeration;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.NoSuchElementException;\n-import java.util.ResourceBundle;\n-import java.util.Set;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n-import java.util.concurrent.atomic.AtomicMarkableReference;\n-\n-\/**\n- * ParallelListResourceBundle is another variant of ListResourceBundle\n- * supporting \"parallel\" contents provided by another resource bundle\n- * (OpenListResourceBundle). Parallel contents, if any, are added into this\n- * bundle on demand.\n- *\n- * @author Masayoshi Okutsu\n- *\/\n-public abstract class ParallelListResourceBundle extends ResourceBundle {\n-    private volatile ConcurrentMap<String, Object> lookup;\n-    private volatile Set<String> keyset;\n-    private final AtomicMarkableReference<Object[][]> parallelContents\n-            = new AtomicMarkableReference<>(null, false);\n-\n-    \/**\n-     * Sole constructor.  (For invocation by subclass constructors, typically\n-     * implicit.)\n-     *\/\n-    protected ParallelListResourceBundle() {\n-    }\n-\n-    \/**\n-     * Returns an array in which each item is a pair of objects in an\n-     * Object array. The first element of each pair is the key, which\n-     * must be a String, and the second element is the value\n-     * associated with that key. See the class description for\n-     * details.\n-     *\n-     * @return an array of an Object array representing a key-value pair.\n-     *\/\n-    protected abstract Object[][] getContents();\n-\n-    \/**\n-     * Returns the parent of this resource bundle or null if there's no parent.\n-     *\n-     * @return the parent or null if no parent\n-     *\/\n-    ResourceBundle getParent() {\n-        return parent;\n-    }\n-\n-    \/**\n-     * Sets the parallel contents to the data given by rb. If rb is null, this\n-     * bundle will be marked as `complete'.\n-     *\n-     * @param rb an OpenResourceBundle for parallel contents, or null indicating\n-     * there are no parallel contents for this bundle\n-     *\/\n-    public void setParallelContents(OpenListResourceBundle rb) {\n-        if (rb == null) {\n-            parallelContents.compareAndSet(null, null, false, true);\n-        } else {\n-            parallelContents.compareAndSet(null, rb.getContents(), false, false);\n-        }\n-    }\n-\n-    \/**\n-     * Returns true if any parallel contents have been set or if this bundle is\n-     * marked as complete.\n-     *\n-     * @return true if any parallel contents have been processed\n-     *\/\n-    boolean areParallelContentsComplete() {\n-        \/\/ Quick check for `complete'\n-        if (parallelContents.isMarked()) {\n-            return true;\n-        }\n-        boolean[] done = new boolean[1];\n-        Object[][] data = parallelContents.get(done);\n-        return data != null || done[0];\n-    }\n-\n-    @Override\n-    protected Object handleGetObject(String key) {\n-        if (key == null) {\n-            throw new NullPointerException();\n-        }\n-\n-        loadLookupTablesIfNecessary();\n-        return lookup.get(key);\n-    }\n-\n-    @Override\n-    public Enumeration<String> getKeys() {\n-        return Collections.enumeration(keySet());\n-    }\n-\n-    @Override\n-    public boolean containsKey(String key) {\n-        return keySet().contains(key);\n-    }\n-\n-    @Override\n-    protected Set<String> handleKeySet() {\n-        loadLookupTablesIfNecessary();\n-        return lookup.keySet();\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"UnusedAssignment\")\n-    public Set<String> keySet() {\n-        Set<String> ks;\n-        while ((ks = keyset) == null) {\n-            ks = new KeySet(handleKeySet(), parent);\n-            synchronized (this) {\n-                if (keyset == null) {\n-                    keyset = ks;\n-                }\n-            }\n-        }\n-        return ks;\n-    }\n-\n-    \/**\n-     * Discards any cached keyset value. This method is called from\n-     * LocaleData for re-creating a KeySet.\n-     *\/\n-    synchronized void resetKeySet() {\n-        keyset = null;\n-    }\n-\n-    \/**\n-     * Loads the lookup table if they haven't been loaded already.\n-     *\/\n-    void loadLookupTablesIfNecessary() {\n-        ConcurrentMap<String, Object> map = lookup;\n-        if (map == null) {\n-            map = new ConcurrentHashMap<>();\n-            for (Object[] item : getContents()) {\n-                map.put((String) item[0], item[1]);\n-            }\n-        }\n-\n-        \/\/ If there's any parallel contents data, merge the data into map.\n-        Object[][] data = parallelContents.getReference();\n-        if (data != null) {\n-            for (Object[] item : data) {\n-                map.putIfAbsent((String) item[0], item[1]);\n-            }\n-            parallelContents.set(null, true);\n-        }\n-        if (lookup == null) {\n-            synchronized (this) {\n-                if (lookup == null) {\n-                    lookup = map;\n-                }\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * This class implements the Set interface for\n-     * ParallelListResourceBundle methods.\n-     *\/\n-    private static class KeySet extends AbstractSet<String> {\n-        private final Set<String> set;\n-        private final ResourceBundle parent;\n-\n-        private KeySet(Set<String> set, ResourceBundle parent) {\n-            this.set = set;\n-            this.parent = parent;\n-        }\n-\n-        @Override\n-        public boolean contains(Object o) {\n-            if (set.contains(o)) {\n-                return true;\n-            }\n-            return (parent != null) ? parent.containsKey((String) o) : false;\n-        }\n-\n-        @Override\n-        public Iterator<String> iterator() {\n-            if (parent == null) {\n-                return set.iterator();\n-            }\n-            return new Iterator<>() {\n-                private Iterator<String> itr = set.iterator();\n-                private boolean usingParent;\n-\n-                @Override\n-                public boolean hasNext() {\n-                    if (itr.hasNext()) {\n-                        return true;\n-                    }\n-                    if (!usingParent) {\n-                        Set<String> nextset = new HashSet<>(parent.keySet());\n-                        nextset.removeAll(set);\n-                        itr = nextset.iterator();\n-                        usingParent = true;\n-                    }\n-                    return itr.hasNext();\n-                }\n-\n-                @Override\n-                public String next() {\n-                    if (hasNext()) {\n-                        return itr.next();\n-                    }\n-                    throw new NoSuchElementException();\n-                }\n-\n-                @Override\n-                public void remove() {\n-                    throw new UnsupportedOperationException();\n-                }\n-            };\n-        }\n-\n-        @Override\n-        public int size() {\n-            if (parent == null) {\n-                return set.size();\n-            }\n-            Set<String> allset = new HashSet<>(set);\n-            allset.addAll(parent.keySet());\n-            return allset.size();\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/util\/resources\/ParallelListResourceBundle.java","additions":0,"deletions":259,"binary":false,"changes":259,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-    provides sun.util.resources.LocaleData.CommonResourceBundleProvider with\n+    provides sun.util.resources.LocaleData.LocaleDataResourceBundleProvider with\n","filename":"src\/jdk.localedata\/share\/classes\/module-info.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import sun.util.resources.ParallelListResourceBundle;\n+import sun.util.resources.OpenListResourceBundle;\n@@ -30,1 +30,1 @@\n-public class FormatData extends ParallelListResourceBundle {\n+public class FormatData extends OpenListResourceBundle {\n","filename":"src\/jdk.localedata\/share\/classes\/sun\/text\/resources\/ext\/FormatData.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,1 +79,1 @@\n-import sun.util.resources.ParallelListResourceBundle;\n+import sun.util.resources.OpenListResourceBundle;\n@@ -81,1 +81,1 @@\n-public class FormatData_ja extends ParallelListResourceBundle {\n+public class FormatData_ja extends OpenListResourceBundle {\n@@ -83,1 +83,1 @@\n-     * Overrides ParallelListResourceBundle\n+     * Overrides OpenListResourceBundle\n","filename":"src\/jdk.localedata\/share\/classes\/sun\/text\/resources\/ext\/FormatData_ja.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-public class LocaleDataProvider extends LocaleData.CommonResourceBundleProvider {\n+public class LocaleDataProvider extends LocaleData.LocaleDataResourceBundleProvider {\n","filename":"src\/jdk.localedata\/share\/classes\/sun\/util\/resources\/provider\/LocaleDataProvider.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}