{"files":[{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+package jdk.internal.loader;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+\n+class ClassLoaderHelper {\n+\n+    private ClassLoaderHelper() {}\n+\n+    \/**\n+     * Shared objects may be loaded from .a archive object on AIX and .so may not exist.\n+     * This method returns false so that loading of shared library continues if\n+     * libname.so is not present.\n+     *\/\n+    static boolean loadLibraryOnlyIfPresent() {\n+        return false;\n+    }\n+    \n+    \/**\n+     * AIX implementation of JVM_LoadLibrary handles the alternate path name mapping.\n+     * If loading of the given library name with \".so\" suffix fails, it will attempt\n+     * to load the library of the same name with \".a\" suffix as the alternate name.\n+     * This method simply returns null.  It could implement the alternate name\n+     * converting \".so\" with \".a\" suffix but redundant.\n+     *\/\n+    static File mapAlternativeName(File lib) {\n+        return null;\n+    }\n+\n+    \/**\n+     * Parse a PATH env variable.\n+     *\n+     * Empty elements will be replaced by dot.\n+     *\/\n+    static String[] parsePath(String ldPath) {\n+        char ps = File.pathSeparatorChar;\n+        ArrayList<String> paths = new ArrayList<>();\n+        int pathStart = 0;\n+        int pathEnd;\n+        while ((pathEnd = ldPath.indexOf(ps, pathStart)) >= 0) {\n+            paths.add((pathStart < pathEnd) ?\n+                    ldPath.substring(pathStart, pathEnd) : \".\");\n+            pathStart = pathEnd + 1;\n+        }\n+        int ldLen = ldPath.length();\n+        paths.add((pathStart < ldLen) ?\n+                ldPath.substring(pathStart, ldLen) : \".\");\n+        return paths.toArray(new String[paths.size()]);\n+    }\n+}\n","filename":"src\/java.base\/aix\/classes\/jdk\/internal\/loader\/ClassLoaderHelper.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2024, IBM Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import jdk.test.lib.process.ProcessTools;\n+\n+\/**\n+ * @test\n+ * @bug 8319516\n+ * @summary verify that System.loadLibrary on AIX is able to load libraries from \".a\" (archive) file\n+ * @requires os.family == \"aix\"\n+ * @library \/test\/lib\/\n+ * @build jdk.test.lib.process.ProcessTools\n+ * @run  main\/othervm   LoadAIXLibraryFromArchiveObject\n+ *\/\n+public class LoadAIXLibraryFromArchiveObject {\n+\n+    private static final String TEST_LIBRARY_NAME = \"foobar\";\n+    \/\/ creates a \".a\" archive file in a test specific directory and then\n+    \/\/ launches a java application passing this directory through \"-Djava.library.path\".\n+    \/\/ the java application then attempts to load the library using System.loadLibrary()\n+    public static void main(final String[] args) throws Exception {\n+        final String javaHome = System.getProperty(\"java.home\");\n+        final Path libj2pcscSo = Path.of(javaHome).resolve(\"lib\", \"libj2pcsc.so\");\n+        if (!Files.exists(libj2pcscSo)) {\n+            throw new AssertionError(libj2pcscSo + \" is missing\");\n+        }\n+        final String archiveFileName = \"lib\" + TEST_LIBRARY_NAME + \".a\";\n+        \/\/ copy over libj2pcsc.so as an archive file to test specific scratch dir\n+        final Path testNativeLibDir = Path.of(\"native\").toAbsolutePath();\n+        Files.createDirectories(testNativeLibDir);\n+        final Path libDummyArchive = testNativeLibDir.resolve(archiveFileName);\n+        Files.copy(libj2pcscSo, libDummyArchive);\n+        \/\/ launch a java application which calls System.loadLibrary and is passed\n+        \/\/ the directory containing the native library archive file, through\n+        \/\/ -Djava.library.path\n+        final ProcessBuilder processBuilder = ProcessTools.createTestJavaProcessBuilder(\n+                \"-Djava.library.path=\" + testNativeLibDir,\n+                LoadAIXLibraryFromArchiveObject.LoadLibraryApp.class.getName());\n+        ProcessTools.executeCommand(processBuilder).shouldHaveExitValue(0);\n+    }\n+\n+    static class LoadLibraryApp {\n+        public static void main(final String[] args) throws Exception {\n+            System.out.println(\"attempting to load library \" + TEST_LIBRARY_NAME);\n+            System.loadLibrary(TEST_LIBRARY_NAME);\n+            System.out.println(TEST_LIBRARY_NAME + \" successfully loaded\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/RuntimeTests\/loadLibrary\/aix\/LoadAIXLibraryFromArchiveObject.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}