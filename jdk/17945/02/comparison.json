{"files":[{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+package jdk.internal.loader;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+\n+class ClassLoaderHelper {\n+\n+    private ClassLoaderHelper() {}\n+\n+\n+     \/**\n+      * Returns true if loading a native library only if\n+      * it's present on the file system.\n+      *\/\n+      static boolean loadLibraryOnlyIfPresent() {\n+          return true;\n+      }\n+\n+    \/**\n+     * Returns an alternate path name for the given file\n+     * such that if the original pathname did not exist, then the\n+     * file may be located at the alternate location.\n+     * For AIX, this replaces the final .so suffix with .a\n+     * If the path name has a member, we place the member name after \n+     * .a.\n+     *\/\n+    static File mapAlternativeName(File lib) {\n+        String name = lib.toString();\n+        \/\/ Checking if there is a member object mentioned.\n+        if(name.contains(\"(\")){\n+            int openBracketIndex = name.lastIndexOf('(');\n+            int closeBracketIndex = name.lastIndexOf(')');\n+            long openBracketCount = name.chars().filter(ch -> ch == '(').count();\n+            long closeBracketCount = name.chars().filter(ch -> ch == ')').count();\n+            \/\/Checking if the format is correct.\n+            if (openBracketCount > 1 || closeBracketCount > 1 || openBracketIndex > closeBracketIndex)\n+            {\n+                return null;\n+            }\n+            int dotIndex = name.lastIndexOf('.');\n+            String memberName = name.substring(openBracketIndex,dotIndex);\n+            \/\/Reconstruct <libname>.so(<member_name>) as <libname>.a(<member_name>)\n+            String reconstructedFileName = name.substring(0, openBracketIndex) + \".a\"+ memberName;\n+            return new File(reconstructedFileName);\n+        }\n+        int index = name.lastIndexOf('.');\n+        if (index < 0) {\n+            return null;\n+        }\n+        return new File(name.substring(0, index) + \".a\");\n+    }\n+\n+    \/**\n+     * Parse a PATH env variable.\n+     *\n+     * Empty elements will be replaced by dot.\n+     *\/\n+    static String[] parsePath(String ldPath) {\n+        char ps = File.pathSeparatorChar;\n+        ArrayList<String> paths = new ArrayList<>();\n+        int pathStart = 0;\n+        int pathEnd;\n+        while ((pathEnd = ldPath.indexOf(ps, pathStart)) >= 0) {\n+            paths.add((pathStart < pathEnd) ?\n+                    ldPath.substring(pathStart, pathEnd) : \".\");\n+            pathStart = pathEnd + 1;\n+        }\n+        int ldLen = ldPath.length();\n+        paths.add((pathStart < ldLen) ?\n+                ldPath.substring(pathStart, ldLen) : \".\");\n+        return paths.toArray(new String[paths.size()]);\n+    }\n+}\n","filename":"src\/java.base\/aix\/classes\/jdk\/internal\/loader\/ClassLoaderHelper.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -120,0 +120,1 @@\n+\n@@ -127,0 +128,12 @@\n+                                \/\/Remove member name in brackets from file pathname, as such pathnames do not exist.\n+                                \/\/Original pathname with bracket is returned,which is handled by dlopen() in AIX.\n+                                if (file.getName().contains(\"(\")){\n+                                    String pathWithMember = file.getCanonicalPath();\n+                                    int openBracketIndex = pathWithMember.lastIndexOf(\"(\");\n+                                    String newFileName = pathWithMember.substring(0, openBracketIndex);\n+                                    File file2 = new File(newFileName);\n+                                    file.renameTo(file2);\n+                                    if (file2.exists()){\n+                                        return pathWithMember;\n+                                    }\n+                                }\n@@ -248,1 +261,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/NativeLibraries.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"}]}