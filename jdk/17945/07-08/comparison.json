{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,2 +37,2 @@\n-     * Returns true if loading a native library only if\n-     * it's present on the file system.\n+    * Shared objects may be loaded from .a archive object on AIX and .so may not exist.\n+    * This method returns false so that loading of shared library continues if libname.so is not present.\n@@ -44,4 +44,4 @@\n-    * Returns an alternate path name for the given file\n-    * such that if the original pathname did not exist, then the\n-    * file may be located at the alternate location.\n-    * For most platforms, this behavior is not supported and returns null.\n+    * AIX implementation of JVM_LoadLibrary handles the alternate path name mapping.\n+    * If loading of the given library name with \".so\" suffix fails, it will attempt to load the library of\n+    * the same name with \".a\" suffix as the alternate name.\n+    * This method simply returns null.  It could implement the alternate name converting \".so\" with \".a\" suffix but redundant.\n@@ -54,3 +54,3 @@\n-     * Parse a PATH env variable.\n-     *\n-     * Empty elements will be replaced by dot.\n+    * Parse a PATH env variable.\n+    *\n+    * Empty elements will be replaced by dot.\n","filename":"src\/java.base\/aix\/classes\/jdk\/internal\/loader\/ClassLoaderHelper.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"}]}