{"files":[{"patch":"@@ -2551,1 +2551,1 @@\n-void G1CollectedHeap::verify_region_attr_remset_is_tracked() {\n+void G1CollectedHeap::verify_region_attr_is_remset_tracked() {\n@@ -2556,2 +2556,2 @@\n-      bool const remset_is_tracked = g1h->region_attr(r->bottom()).remset_is_tracked();\n-      assert(r->rem_set()->is_tracked() == remset_is_tracked,\n+      const bool is_remset_tracked = g1h->region_attr(r->bottom()).is_remset_tracked();\n+      assert(r->rem_set()->is_tracked() == is_remset_tracked,\n@@ -2559,1 +2559,1 @@\n-             r->hrm_index(), BOOL_TO_STR(r->rem_set()->is_tracked()), BOOL_TO_STR(remset_is_tracked));\n+             r->hrm_index(), BOOL_TO_STR(r->rem_set()->is_tracked()), BOOL_TO_STR(is_remset_tracked));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -669,1 +669,1 @@\n-  void verify_region_attr_remset_is_tracked() PRODUCT_RETURN;\n+  void verify_region_attr_is_remset_tracked() PRODUCT_RETURN;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-  _region_attr.set_remset_is_tracked(r->hrm_index(), r->rem_set()->is_tracked());\n+  _region_attr.set_is_remset_tracked(r->hrm_index(), r->rem_set()->is_tracked());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -727,1 +727,1 @@\n-  _g1h->verify_region_attr_remset_is_tracked();\n+  _g1h->verify_region_attr_is_remset_tracked();\n@@ -748,1 +748,1 @@\n-  _g1h->verify_region_attr_remset_is_tracked();\n+  _g1h->verify_region_attr_is_remset_tracked();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-  \/\/ remset_is_tracked_t is essentially bool, but we need precise control\n+  \/\/ is_remset_tracked_t is essentially bool, but we need precise control\n@@ -38,1 +38,1 @@\n-  typedef uint8_t remset_is_tracked_t;\n+  typedef uint8_t is_remset_tracked_t;\n@@ -44,1 +44,1 @@\n-  remset_is_tracked_t _remset_is_tracked;\n+  is_remset_tracked_t _is_remset_tracked;\n@@ -66,2 +66,2 @@\n-  G1HeapRegionAttr(region_type_t type = NotInCSet, bool remset_is_tracked = false, bool is_pinned = false) :\n-    _remset_is_tracked(remset_is_tracked ? 1 : 0), _type(type), _is_pinned(is_pinned ? 1 : 0) {\n+  G1HeapRegionAttr(region_type_t type = NotInCSet, bool is_remset_tracked = false, bool is_pinned = false) :\n+    _is_remset_tracked(is_remset_tracked ? 1 : 0), _type(type), _is_pinned(is_pinned ? 1 : 0) {\n@@ -85,1 +85,1 @@\n-  bool remset_is_tracked() const     { return _remset_is_tracked != 0; }\n+  bool is_remset_tracked() const     { return _is_remset_tracked != 0; }\n@@ -95,1 +95,1 @@\n-  void set_remset_is_tracked(bool value)      { _remset_is_tracked = value ? 1 : 0; }\n+  void set_is_remset_tracked(bool value)      { _is_remset_tracked = value ? 1 : 0; }\n@@ -128,1 +128,1 @@\n-  void set_optional(uintptr_t index, bool remset_is_tracked) {\n+  void set_optional(uintptr_t index, bool is_remset_tracked) {\n@@ -131,1 +131,1 @@\n-    set_by_index(index, G1HeapRegionAttr(G1HeapRegionAttr::Optional, remset_is_tracked));\n+    set_by_index(index, G1HeapRegionAttr(G1HeapRegionAttr::Optional, is_remset_tracked));\n@@ -144,1 +144,1 @@\n-    const bool remset_is_tracked = true;\n+    const bool is_remset_tracked = true;\n@@ -147,1 +147,1 @@\n-    set_by_index(index, G1HeapRegionAttr(G1HeapRegionAttr::HumongousCandidate, remset_is_tracked, region_is_pinned));\n+    set_by_index(index, G1HeapRegionAttr(G1HeapRegionAttr::HumongousCandidate, is_remset_tracked, region_is_pinned));\n@@ -158,2 +158,2 @@\n-  void set_remset_is_tracked(uintptr_t index, bool remset_is_tracked) {\n-    get_ref_by_index(index)->set_remset_is_tracked(remset_is_tracked);\n+  void set_is_remset_tracked(uintptr_t index, bool is_remset_tracked) {\n+    get_ref_by_index(index)->set_is_remset_tracked(is_remset_tracked);\n@@ -172,1 +172,1 @@\n-  void set_in_old(uintptr_t index, bool remset_is_tracked, bool is_pinned) {\n+  void set_in_old(uintptr_t index, bool is_remset_tracked, bool is_pinned) {\n@@ -175,1 +175,1 @@\n-    set_by_index(index, G1HeapRegionAttr(G1HeapRegionAttr::Old, remset_is_tracked, is_pinned));\n+    set_by_index(index, G1HeapRegionAttr(G1HeapRegionAttr::Old, is_remset_tracked, is_pinned));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionAttr.hpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -154,1 +154,1 @@\n-  assert(region_attr.remset_is_tracked() == hr_obj->rem_set()->is_tracked(),\n+  assert(region_attr.is_remset_tracked() == hr_obj->rem_set()->is_tracked(),\n@@ -156,1 +156,1 @@\n-         BOOL_TO_STR(region_attr.remset_is_tracked()),\n+         BOOL_TO_STR(region_attr.is_remset_tracked()),\n@@ -160,1 +160,1 @@\n-  if (!region_attr.remset_is_tracked()) {\n+  if (!region_attr.is_remset_tracked()) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}