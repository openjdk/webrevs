{"files":[{"patch":"@@ -784,0 +784,4 @@\n+  product(bool, LoopAwaredSpilling, true, DIAGNOSTIC,                       \\\n+          \"Eagerly spill or reload live ranges at loop entry if it seems\"   \\\n+          \"beneficial\")                                                     \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -486,0 +486,6 @@\n+enum class SpillAction {\n+  None,\n+  Spill,\n+  Reload\n+};\n+\n@@ -487,1 +493,1 @@\n-static bool should_spill_before_loop(const PhaseCFG& cfg, PhaseChaitin& chaitin, CFGLoop* loop, uint lrg_idx, const LRG& lrg) {\n+static SpillAction should_spill_before_loop(const PhaseCFG& cfg, PhaseChaitin& chaitin, CFGLoop* loop, uint lrg_idx, const LRG& lrg) {\n@@ -492,1 +498,2 @@\n-  bool spilt = false;\n+  double entry_freq = cfg.get_block_for_node(loop->head()->pred(LoopNode::EntryControl))->_freq;\n+  double head_freq = loop->head()->_freq;\n@@ -495,0 +502,1 @@\n+  bool spilt_uncommon = false;\n@@ -503,1 +511,1 @@\n-      \/\/ If a node needs to be spilt in a child loop, we can spill it at the child entry, too. Choose the best option.\n+      \/\/ If a node needs spilling in a child loop, we can spill it at the child entry, too. Choose the best option.\n@@ -509,1 +517,1 @@\n-      if (spill_freq > loop->head()->_freq * uncommon_threshold) {\n+      if (spill_freq > head_freq * uncommon_threshold) {\n@@ -511,2 +519,2 @@\n-        return true;\n-      } else {\n+        return SpillAction::Spill;\n+      } else if (spill_freq > entry_freq) {\n@@ -514,1 +522,1 @@\n-        spilt = true;\n+        spilt_uncommon = true;\n@@ -519,5 +527,2 @@\n-  if (!spilt) {\n-    return false;\n-  }\n-\n-  \/\/ Whether the lrg is used in the common path\n+  \/\/ Whether the lrg is used in the loop\n+  bool reloaded_uncommon = false;\n@@ -529,8 +534,23 @@\n-    if (b->_freq > loop->head()->_freq * uncommon_threshold) {\n-      for (uint nidx = 0; nidx < b->number_of_nodes(); nidx++) {\n-        Node* n = b->get_node(nidx);\n-        for (uint i = 1; i < n->req(); i++) {\n-          Node* in = n->in(i);\n-          if (in != nullptr && chaitin._lrg_map.find_id(in) == lrg_idx) {\n-            return false;\n-          }\n+\n+    \/\/ If a node needs reloading in a child loop, we can reload it at the child entry, too. Choose the best option.\n+    double reload_freq = b->_freq;\n+    for (CFGLoop* l = b->_loop; l != loop; l = l->parent()) {\n+      Block* l_entry = cfg.get_block_for_node(l->head()->pred(LoopNode::EntryControl));\n+      reload_freq = MIN2(reload_freq, l_entry->_freq);\n+    }\n+\n+    for (uint nidx = 0; nidx < b->number_of_nodes(); nidx++) {\n+      Node* n = b->get_node(nidx);\n+      if (!n->is_Mach()) {\n+        continue;\n+      }\n+      for (uint i = 1; i < n->req(); i++) {\n+        Node* in = n->in(i);\n+        \/\/ Check if n use lrg and lrg must be in register there\n+        if (in == nullptr || chaitin._lrg_map.find_id(in) != lrg_idx || !n->in_RegMask(i).is_UP()) {\n+          continue;\n+        }\n+        if (reload_freq > head_freq * uncommon_threshold) {\n+          return SpillAction::Reload;\n+        } else if (reload_freq > entry_freq) {\n+          reloaded_uncommon = true;\n@@ -541,1 +561,8 @@\n-  return true;\n+\n+  if (spilt_uncommon) {\n+    return SpillAction::Spill;\n+  } else if (reloaded_uncommon) {\n+    return SpillAction::Reload;\n+  } else {\n+    return SpillAction::None;\n+  }\n@@ -562,1 +589,1 @@\n-  Node                *n1, *n2, *n3;\n+  Node                *n1, *n2;\n@@ -564,1 +591,1 @@\n-  bool                 u1, u2, u3;\n+  bool                 u1, u2;\n@@ -658,1 +685,1 @@\n-    for( slidx = 0; slidx < spill_cnt; slidx++ ) {\n+    for (slidx = 0; slidx < spill_cnt; slidx++) {\n@@ -664,2 +691,1 @@\n-      if( lrgs(lidx).is_singledef() &&\n-          lrgs(lidx)._def->rematerialize() ) {\n+      if (lrgs(lidx).is_singledef() && lrgs(lidx)._def->rematerialize()) {\n@@ -685,2 +711,2 @@\n-      Node **Ltmp = Reaches[pidx];\n-      bool  *Utmp = UP[pidx];\n+      Node** Ltmp = Reaches[pidx];\n+      bool* Utmp = UP[pidx];\n@@ -689,3 +715,3 @@\n-      \/\/ Initialize node for saving type info\n-      n3 = n1;\n-      u3 = u1;\n+      \/\/ Preserve a non-null predecessor for later type referencing\n+      Node* n_any = n1;\n+      bool u_any = u1;\n@@ -694,1 +720,1 @@\n-      for( inpidx = 2; inpidx < b->num_preds(); inpidx++ ) {\n+      for (inpidx = 2; inpidx < b->num_preds(); inpidx++) {\n@@ -705,1 +731,1 @@\n-        if( n1 != n2 ) {\n+        if (n1 != n2) {\n@@ -709,1 +735,1 @@\n-        if( n1 && n2 && (u1 != u2) ) {\n+        if (n1 != nullptr && n2 != nullptr && (u1 != u2)) {\n@@ -715,4 +741,3 @@\n-        \/\/ Preserve a non-null predecessor for later type referencing\n-        if( (n3 == nullptr) && (n2 != nullptr) ){\n-          n3 = n2;\n-          u3 = u2;\n+        if (n_any == nullptr && n2 != nullptr) {\n+          n_any = n2;\n+          u_any = u2;\n@@ -723,1 +748,1 @@\n-      for( insidx = 1; insidx <= b->end_idx(); insidx++ ) {\n+      for (insidx = 1; insidx <= b->end_idx(); insidx++) {\n@@ -727,1 +752,1 @@\n-        if( phi == nullptr ) {\n+        if (phi == nullptr) {\n@@ -745,1 +770,1 @@\n-      if( needs_phi || has_phi ) {\n+      if (needs_phi || has_phi) {\n@@ -747,1 +772,1 @@\n-        if( needs_phi ) {\n+        if (needs_phi) {\n@@ -750,2 +775,2 @@\n-          guarantee(n3, \"No non-null reaching DEF for a Phi\");\n-          phi = new PhiNode(b->head(), n3->bottom_type());\n+          guarantee(n_any != nullptr, \"No non-null reaching DEF for a Phi\");\n+          phi = new PhiNode(b->head(), n_any->bottom_type());\n@@ -765,17 +790,26 @@\n-        \/\/ PhiNodes should either force the LRG UP or DOWN depending\n-        \/\/ on its inputs and the register pressure in the Phi's block.\n-        UPblock[slidx] = true;  \/\/ Assume new DEF is UP\n-        \/\/ If entering a high-pressure area with no immediate use,\n-        \/\/ assume Phi is DOWN\n-        if (is_high_pressure( b, &lrgs(lidx), b->end_idx()) && !prompt_use(b,lidx)) {\n-          UPblock[slidx] = false;\n-        }\n-        \/\/ If we are not split up\/down and all inputs are down, then we\n-        \/\/ are down\n-        if (!needs_split && !u3) {\n-          UPblock[slidx] = false;\n-        }\n-        \/\/ If we enter a loop and will spill there, try to spill in the loop entry, except if we\n-        \/\/ are reassigned in the loop anyway\n-        if (!has_phi && b->head()->is_Loop() && should_spill_before_loop(_cfg, *this, b->_loop, lidx, lrgs(lidx))) {\n-          UPblock[slidx] = false;\n+\n+        if (LoopAwaredSpilling && !has_phi && b->head()->is_Loop()) {\n+          \/\/ Loop will always have needs_phi because the LoopBack block has not been processed yet\n+          assert(needs_phi, \"must be\");\n+          SpillAction action = should_spill_before_loop(_cfg, *this, b->_loop, lidx, lrgs(lidx));\n+          if (action == SpillAction::Spill) {\n+            UPblock[slidx] = false;\n+          } else if (action == SpillAction::Reload) {\n+            UPblock[slidx] = true;\n+          } else {\n+            UPblock[slidx] = u_any;\n+          }\n+        } else {\n+          \/\/ PhiNodes should either force the LRG UP or DOWN depending\n+          \/\/ on its inputs and the register pressure in the Phi's block.\n+          UPblock[slidx] = true;  \/\/ Assume new DEF is UP\n+          \/\/ If entering a high-pressure area with no immediate use,\n+          \/\/ assume Phi is DOWN\n+          if (is_high_pressure( b, &lrgs(lidx), b->end_idx()) && !prompt_use(b,lidx)) {\n+            UPblock[slidx] = false;\n+          }\n+          \/\/ If we are not split up\/down and all inputs are down, then we\n+          \/\/ are down\n+          if (!needs_split && !u_any) {\n+            UPblock[slidx] = false;\n+          }\n","filename":"src\/hotspot\/share\/opto\/reg_split.cpp","additions":95,"deletions":61,"binary":false,"changes":156,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n-@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n-@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n@@ -35,0 +35,2 @@\n+    static final int SIZE = 1000;\n+\n@@ -36,1 +38,17 @@\n-    long[] src, dest;\n+    long[] src, dst;\n+\n+    @State(Scope.Benchmark)\n+    public static class UncommonTest {\n+        @Param({\"0.0\", \"0.01\", \"0.1\", \"0.2\", \"0.5\"})\n+        double prob;\n+\n+        boolean[] test;\n+\n+        @Setup\n+        public void setup() {\n+            test = new boolean[SIZE];\n+            for (int i = 0; i < SIZE * prob; i++) {\n+                test[i] = true;\n+            }\n+        }\n+    }\n@@ -40,1 +58,0 @@\n-        final int SIZE = 1000;\n@@ -42,1 +59,1 @@\n-        dest = new long[SIZE];\n+        dst = new long[SIZE];\n@@ -46,0 +63,10 @@\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    private static void call() {}\n+\n+    @CompilerControl(CompilerControl.Mode.INLINE)\n+    private static void spillEverything() {\n+        for (int i = 0; i < 100; i++) {\n+            call();\n+        }\n+    }\n+\n@@ -49,1 +76,1 @@\n-            dest[i] = src[i];\n+            dst[i] = src[i];\n@@ -51,1 +78,1 @@\n-        return dest;\n+        return dst;\n@@ -58,1 +85,27 @@\n-            dest[i] = src[i];\n+            dst[i] = src[i];\n+        }\n+        return dst;\n+    }\n+\n+    @Benchmark\n+    public long[] reloadAtEntry_ret() {\n+        int inc = increment;\n+        long[] dst = this.dst;\n+        long[] src = this.src;\n+        spillEverything();\n+        for (int i = 0; i < src.length; i += inc) {\n+            dst[i] = src[i];\n+        }\n+        return dst;\n+    }\n+\n+    @Benchmark\n+    public long[] spillUncommon_ret(UncommonTest param) {\n+        int inc = increment;\n+        long[] dst = this.dst;\n+        long[] src = this.src;\n+        for (int i = 0; i < src.length; i += inc) {\n+            if (param.test[i]) {\n+                spillEverything();\n+            }\n+            dst[i] = src[i];\n@@ -60,1 +113,1 @@\n-        return dest;\n+        return dst;\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/LoopCounterBench.java","additions":62,"deletions":9,"binary":false,"changes":71,"status":"modified"}]}