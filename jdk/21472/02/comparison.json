{"files":[{"patch":"@@ -475,2 +475,0 @@\n-  bool is_high_pressure( Block *b, LRG *lrg, uint insidx );\n-\n","filename":"src\/hotspot\/share\/opto\/chaitin.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2303,3 +2303,0 @@\n-  if (depth == b_depth) {\n-    return true;\n-  }\n","filename":"src\/hotspot\/share\/opto\/gcm.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -434,1 +434,1 @@\n-bool PhaseChaitin::is_high_pressure( Block *b, LRG *lrg, uint insidx ) {\n+static bool is_high_pressure(const Block* b, const LRG* lrg, uint insidx) {\n@@ -460,1 +460,0 @@\n-\n@@ -487,0 +486,58 @@\n+\/\/ Check if a live range would be spilt in a loop nest so that we will eagerly spill it\n+static bool should_spill_before_loop(const PhaseCFG& cfg, PhaseChaitin& chaitin, CFGLoop* loop, uint lrg_idx, const LRG& lrg) {\n+  \/\/ Don't be eager spilling something that will only be spilt uncommonly and is used in the common path\n+  \/\/ as it leads to excessive reloads\n+  constexpr double uncommon_threshold = 0.1;\n+  assert(&chaitin.lrgs(lrg_idx) == &lrg, \"must be\");\n+  bool spilt = false;\n+\n+  \/\/ Whether the lrg is spilt inside the loop\n+  for (uint bidx = 0; bidx < cfg.number_of_blocks(); bidx++) {\n+    Block* b = cfg.get_block(bidx);\n+    if (!loop->in_loop_nest(b)) {\n+      continue;\n+    }\n+\n+    \/\/ Implementation details: high pressure only records the start idx, not the end idx\n+    if (is_high_pressure(b, &lrg, b->end_idx())) {\n+      \/\/ If a node needs to be spilt in a child loop, we can spill it at the child entry, too. Choose the best option.\n+      double spill_freq = b->_freq;\n+      for (CFGLoop* l = b->_loop; l != loop; l = l->parent()) {\n+        Block* l_entry = cfg.get_block_for_node(l->head()->pred(LoopNode::EntryControl));\n+        spill_freq = MIN2(spill_freq, l_entry->_freq);\n+      }\n+      if (spill_freq > loop->head()->_freq * uncommon_threshold) {\n+        \/\/ Spilt in the common path, spill eagerly regardless\n+        return true;\n+      } else {\n+        \/\/ Uncommon path, need to check if it is used in the common path\n+        spilt = true;\n+      }\n+    }\n+  }\n+\n+  if (!spilt) {\n+    return false;\n+  }\n+\n+  \/\/ Whether the lrg is used in the common path\n+  for (uint i = 0; i < cfg.number_of_blocks(); i++) {\n+    Block* b = cfg.get_block(i);\n+    if (!loop->in_loop_nest(b)) {\n+      continue;\n+    }\n+    if (b->_freq > loop->head()->_freq * uncommon_threshold) {\n+      for (uint nidx = 0; nidx < b->number_of_nodes(); nidx++) {\n+        Node* n = b->get_node(nidx);\n+        for (uint i = 1; i < n->req(); i++) {\n+          Node* in = n->in(i);\n+          if (in != nullptr && chaitin._lrg_map.find_id(in) == lrg_idx) {\n+            return false;\n+          }\n+        }\n+      }\n+    }\n+  }\n+  return true;\n+}\n+\n@@ -713,1 +770,1 @@\n-        if( is_high_pressure( b, &lrgs(lidx), b->end_idx()) && !prompt_use(b,lidx) )\n+        if (is_high_pressure( b, &lrgs(lidx), b->end_idx()) && !prompt_use(b,lidx)) {\n@@ -715,0 +772,1 @@\n+        }\n@@ -717,1 +775,1 @@\n-        if( !needs_split && !u3 )\n+        if (!needs_split && !u3) {\n@@ -719,0 +777,6 @@\n+        }\n+        \/\/ If we enter a loop and will spill there, try to spill in the loop entry, except if we\n+        \/\/ are reassigned in the loop anyway\n+        if (!has_phi && b->head()->is_Loop() && should_spill_before_loop(_cfg, *this, b->_loop, lidx, lrgs(lidx))) {\n+          UPblock[slidx] = false;\n+        }\n","filename":"src\/hotspot\/share\/opto\/reg_split.cpp","additions":68,"deletions":4,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler;\n+\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.*;\n+\n+@State(Scope.Thread)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(1)\n+public class LoopCounterBench {\n+    int increment;\n+    long[] src, dest;\n+\n+    @Setup\n+    public void setup() {\n+        final int SIZE = 1000;\n+        src = new long[SIZE];\n+        dest = new long[SIZE];\n+        increment = 1;\n+    }\n+\n+    @Benchmark\n+    public long[] field_ret() {\n+        for (int i = 0; i < src.length; i = i + increment) {\n+            dest[i] = src[i];\n+        }\n+        return dest;\n+    }\n+\n+    @Benchmark\n+    public long[] localVar_ret() {\n+        final int inc = increment;\n+        for (int i = 0; i < src.length; i = i + inc) {\n+            dest[i] = src[i];\n+        }\n+        return dest;\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/LoopCounterBench.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"}]}