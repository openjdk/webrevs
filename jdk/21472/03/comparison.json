{"files":[{"patch":"@@ -784,0 +784,4 @@\n+  product(bool, LoopAwaredSpilling, true, DIAGNOSTIC,                       \\\n+          \"Eagerly spill or reload live ranges at loop entry if it seems\"   \\\n+          \"beneficial\")                                                     \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -475,2 +475,0 @@\n-  bool is_high_pressure( Block *b, LRG *lrg, uint insidx );\n-\n","filename":"src\/hotspot\/share\/opto\/chaitin.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2303,3 +2303,0 @@\n-  if (depth == b_depth) {\n-    return true;\n-  }\n","filename":"src\/hotspot\/share\/opto\/gcm.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -434,1 +434,1 @@\n-bool PhaseChaitin::is_high_pressure( Block *b, LRG *lrg, uint insidx ) {\n+static bool is_high_pressure(const Block* b, const LRG* lrg, uint insidx) {\n@@ -460,1 +460,0 @@\n-\n@@ -487,0 +486,85 @@\n+enum class SpillAction {\n+  None,\n+  Spill,\n+  Reload\n+};\n+\n+\/\/ Check if a live range would be spilt in a loop nest so that we will eagerly spill it\n+static SpillAction should_spill_before_loop(const PhaseCFG& cfg, PhaseChaitin& chaitin, CFGLoop* loop, uint lrg_idx, const LRG& lrg) {\n+  \/\/ Don't be eager spilling something that will only be spilt uncommonly and is used in the common path\n+  \/\/ as it leads to excessive reloads\n+  constexpr double uncommon_threshold = 0.1;\n+  assert(&chaitin.lrgs(lrg_idx) == &lrg, \"must be\");\n+  double entry_freq = cfg.get_block_for_node(loop->head()->pred(LoopNode::EntryControl))->_freq;\n+  double head_freq = loop->head()->_freq;\n+\n+  \/\/ Whether the lrg is spilt inside the loop\n+  bool spilt_uncommon = false;\n+  for (uint bidx = 0; bidx < cfg.number_of_blocks(); bidx++) {\n+    Block* b = cfg.get_block(bidx);\n+    if (!loop->in_loop_nest(b)) {\n+      continue;\n+    }\n+\n+    \/\/ Implementation details: high pressure only records the start idx, not the end idx\n+    if (is_high_pressure(b, &lrg, b->end_idx())) {\n+      \/\/ If a node needs spilling in a child loop, we can spill it at the child entry, too. Choose the best option.\n+      double spill_freq = b->_freq;\n+      for (CFGLoop* l = b->_loop; l != loop; l = l->parent()) {\n+        Block* l_entry = cfg.get_block_for_node(l->head()->pred(LoopNode::EntryControl));\n+        spill_freq = MIN2(spill_freq, l_entry->_freq);\n+      }\n+      if (spill_freq > head_freq * uncommon_threshold) {\n+        \/\/ Spilt in the common path, spill eagerly regardless\n+        return SpillAction::Spill;\n+      } else if (spill_freq > entry_freq) {\n+        \/\/ Uncommon path, need to check if it is used in the common path\n+        spilt_uncommon = true;\n+      }\n+    }\n+  }\n+\n+  \/\/ Whether the lrg is used in the loop\n+  bool reloaded_uncommon = false;\n+  for (uint i = 0; i < cfg.number_of_blocks(); i++) {\n+    Block* b = cfg.get_block(i);\n+    if (!loop->in_loop_nest(b)) {\n+      continue;\n+    }\n+\n+    \/\/ If a node needs reloading in a child loop, we can reload it at the child entry, too. Choose the best option.\n+    double reload_freq = b->_freq;\n+    for (CFGLoop* l = b->_loop; l != loop; l = l->parent()) {\n+      Block* l_entry = cfg.get_block_for_node(l->head()->pred(LoopNode::EntryControl));\n+      reload_freq = MIN2(reload_freq, l_entry->_freq);\n+    }\n+\n+    for (uint nidx = 0; nidx < b->number_of_nodes(); nidx++) {\n+      Node* n = b->get_node(nidx);\n+      if (!n->is_Mach()) {\n+        continue;\n+      }\n+      for (uint i = 1; i < n->req(); i++) {\n+        Node* in = n->in(i);\n+        \/\/ Check if n use lrg and lrg must be in register there\n+        if (in == nullptr || chaitin._lrg_map.find_id(in) != lrg_idx || !n->in_RegMask(i).is_UP()) {\n+          continue;\n+        }\n+        if (reload_freq > head_freq * uncommon_threshold) {\n+          return SpillAction::Reload;\n+        } else if (reload_freq > entry_freq) {\n+          reloaded_uncommon = true;\n+        }\n+      }\n+    }\n+  }\n+\n+  if (spilt_uncommon) {\n+    return SpillAction::Spill;\n+  } else if (reloaded_uncommon) {\n+    return SpillAction::Reload;\n+  } else {\n+    return SpillAction::None;\n+  }\n+}\n+\n@@ -505,1 +589,1 @@\n-  Node                *n1, *n2, *n3;\n+  Node                *n1, *n2;\n@@ -507,1 +591,1 @@\n-  bool                 u1, u2, u3;\n+  bool                 u1, u2;\n@@ -601,1 +685,1 @@\n-    for( slidx = 0; slidx < spill_cnt; slidx++ ) {\n+    for (slidx = 0; slidx < spill_cnt; slidx++) {\n@@ -607,2 +691,1 @@\n-      if( lrgs(lidx).is_singledef() &&\n-          lrgs(lidx)._def->rematerialize() ) {\n+      if (lrgs(lidx).is_singledef() && lrgs(lidx)._def->rematerialize()) {\n@@ -628,2 +711,2 @@\n-      Node **Ltmp = Reaches[pidx];\n-      bool  *Utmp = UP[pidx];\n+      Node** Ltmp = Reaches[pidx];\n+      bool* Utmp = UP[pidx];\n@@ -632,3 +715,3 @@\n-      \/\/ Initialize node for saving type info\n-      n3 = n1;\n-      u3 = u1;\n+      \/\/ Preserve a non-null predecessor for later type referencing\n+      Node* n_any = n1;\n+      bool u_any = u1;\n@@ -637,1 +720,1 @@\n-      for( inpidx = 2; inpidx < b->num_preds(); inpidx++ ) {\n+      for (inpidx = 2; inpidx < b->num_preds(); inpidx++) {\n@@ -648,1 +731,1 @@\n-        if( n1 != n2 ) {\n+        if (n1 != n2) {\n@@ -652,1 +735,1 @@\n-        if( n1 && n2 && (u1 != u2) ) {\n+        if (n1 != nullptr && n2 != nullptr && (u1 != u2)) {\n@@ -658,4 +741,3 @@\n-        \/\/ Preserve a non-null predecessor for later type referencing\n-        if( (n3 == nullptr) && (n2 != nullptr) ){\n-          n3 = n2;\n-          u3 = u2;\n+        if (n_any == nullptr && n2 != nullptr) {\n+          n_any = n2;\n+          u_any = u2;\n@@ -666,1 +748,1 @@\n-      for( insidx = 1; insidx <= b->end_idx(); insidx++ ) {\n+      for (insidx = 1; insidx <= b->end_idx(); insidx++) {\n@@ -670,1 +752,1 @@\n-        if( phi == nullptr ) {\n+        if (phi == nullptr) {\n@@ -688,1 +770,1 @@\n-      if( needs_phi || has_phi ) {\n+      if (needs_phi || has_phi) {\n@@ -690,1 +772,1 @@\n-        if( needs_phi ) {\n+        if (needs_phi) {\n@@ -693,2 +775,2 @@\n-          guarantee(n3, \"No non-null reaching DEF for a Phi\");\n-          phi = new PhiNode(b->head(), n3->bottom_type());\n+          guarantee(n_any != nullptr, \"No non-null reaching DEF for a Phi\");\n+          phi = new PhiNode(b->head(), n_any->bottom_type());\n@@ -708,11 +790,27 @@\n-        \/\/ PhiNodes should either force the LRG UP or DOWN depending\n-        \/\/ on its inputs and the register pressure in the Phi's block.\n-        UPblock[slidx] = true;  \/\/ Assume new DEF is UP\n-        \/\/ If entering a high-pressure area with no immediate use,\n-        \/\/ assume Phi is DOWN\n-        if( is_high_pressure( b, &lrgs(lidx), b->end_idx()) && !prompt_use(b,lidx) )\n-          UPblock[slidx] = false;\n-        \/\/ If we are not split up\/down and all inputs are down, then we\n-        \/\/ are down\n-        if( !needs_split && !u3 )\n-          UPblock[slidx] = false;\n+\n+        if (LoopAwaredSpilling && !has_phi && b->head()->is_Loop()) {\n+          \/\/ Loop will always have needs_phi because the LoopBack block has not been processed yet\n+          assert(needs_phi, \"must be\");\n+          SpillAction action = should_spill_before_loop(_cfg, *this, b->_loop, lidx, lrgs(lidx));\n+          if (action == SpillAction::Spill) {\n+            UPblock[slidx] = false;\n+          } else if (action == SpillAction::Reload) {\n+            UPblock[slidx] = true;\n+          } else {\n+            UPblock[slidx] = u_any;\n+          }\n+        } else {\n+          \/\/ PhiNodes should either force the LRG UP or DOWN depending\n+          \/\/ on its inputs and the register pressure in the Phi's block.\n+          UPblock[slidx] = true;  \/\/ Assume new DEF is UP\n+          \/\/ If entering a high-pressure area with no immediate use,\n+          \/\/ assume Phi is DOWN\n+          if (is_high_pressure( b, &lrgs(lidx), b->end_idx()) && !prompt_use(b,lidx)) {\n+            UPblock[slidx] = false;\n+          }\n+          \/\/ If we are not split up\/down and all inputs are down, then we\n+          \/\/ are down\n+          if (!needs_split && !u_any) {\n+            UPblock[slidx] = false;\n+          }\n+        }\n","filename":"src\/hotspot\/share\/opto\/reg_split.cpp","additions":134,"deletions":36,"binary":false,"changes":170,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler;\n+\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.*;\n+\n+@State(Scope.Thread)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(1)\n+public class LoopCounterBench {\n+    static final int SIZE = 1000;\n+\n+    int increment;\n+    long[] src, dst;\n+\n+    @State(Scope.Benchmark)\n+    public static class UncommonTest {\n+        @Param({\"0.0\", \"0.01\", \"0.1\", \"0.2\", \"0.5\"})\n+        double prob;\n+\n+        boolean[] test;\n+\n+        @Setup\n+        public void setup() {\n+            test = new boolean[SIZE];\n+            for (int i = 0; i < SIZE * prob; i++) {\n+                test[i] = true;\n+            }\n+        }\n+    }\n+\n+    @Setup\n+    public void setup() {\n+        src = new long[SIZE];\n+        dst = new long[SIZE];\n+        increment = 1;\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    private static void call() {}\n+\n+    @CompilerControl(CompilerControl.Mode.INLINE)\n+    private static void spillEverything() {\n+        for (int i = 0; i < 100; i++) {\n+            call();\n+        }\n+    }\n+\n+    @Benchmark\n+    public long[] field_ret() {\n+        for (int i = 0; i < src.length; i = i + increment) {\n+            dst[i] = src[i];\n+        }\n+        return dst;\n+    }\n+\n+    @Benchmark\n+    public long[] localVar_ret() {\n+        final int inc = increment;\n+        for (int i = 0; i < src.length; i = i + inc) {\n+            dst[i] = src[i];\n+        }\n+        return dst;\n+    }\n+\n+    @Benchmark\n+    public long[] reloadAtEntry_ret() {\n+        int inc = increment;\n+        long[] dst = this.dst;\n+        long[] src = this.src;\n+        spillEverything();\n+        for (int i = 0; i < src.length; i += inc) {\n+            dst[i] = src[i];\n+        }\n+        return dst;\n+    }\n+\n+    @Benchmark\n+    public long[] spillUncommon_ret(UncommonTest param) {\n+        int inc = increment;\n+        long[] dst = this.dst;\n+        long[] src = this.src;\n+        for (int i = 0; i < src.length; i += inc) {\n+            if (param.test[i]) {\n+                spillEverything();\n+            }\n+            dst[i] = src[i];\n+        }\n+        return dst;\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/LoopCounterBench.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"}]}