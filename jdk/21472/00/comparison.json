{"files":[{"patch":"@@ -475,2 +475,0 @@\n-  bool is_high_pressure( Block *b, LRG *lrg, uint insidx );\n-\n","filename":"src\/hotspot\/share\/opto\/chaitin.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -434,1 +434,1 @@\n-bool PhaseChaitin::is_high_pressure( Block *b, LRG *lrg, uint insidx ) {\n+bool is_high_pressure(const Block* b, const LRG* lrg, uint insidx) {\n@@ -460,1 +460,0 @@\n-\n@@ -487,0 +486,12 @@\n+\/\/ Check if a live range would be spilt in a loop nest\n+static bool is_spilt_in_loop_nest(const PhaseCFG& cfg, CFGLoop* loop, const LRG& lrg) {\n+  for (uint i = 0; i < cfg.number_of_blocks(); i++) {\n+    Block* b = cfg.get_block(i);\n+    \/\/ Implementation details: high pressure only records the start idx, not the end idx\n+    if (loop->in_loop_nest(b) && is_high_pressure(b, &lrg, b->end_idx())) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+\n@@ -713,1 +724,1 @@\n-        if( is_high_pressure( b, &lrgs(lidx), b->end_idx()) && !prompt_use(b,lidx) )\n+        if (is_high_pressure( b, &lrgs(lidx), b->end_idx()) && !prompt_use(b,lidx)) {\n@@ -715,0 +726,1 @@\n+        }\n@@ -717,1 +729,1 @@\n-        if( !needs_split && !u3 )\n+        if (!needs_split && !u3) {\n@@ -719,0 +731,6 @@\n+        }\n+        \/\/ If we enter a loop and will spill there, try to spill in the loop entry, except if we\n+        \/\/ are reassigned in the loop anyway\n+        if (!has_phi && b->head()->is_Loop() && is_spilt_in_loop_nest(_cfg, b->_loop, lrgs(lidx))) {\n+          UPblock[slidx] = false;\n+        }\n","filename":"src\/hotspot\/share\/opto\/reg_split.cpp","additions":22,"deletions":4,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler;\n+\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.*;\n+\n+@State(Scope.Thread)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(1)\n+public class LoopCounterBench {\n+    int increment;\n+    long[] src, dest;\n+\n+    @Setup\n+    public void setup() {\n+        final int SIZE = 1000;\n+        src = new long[SIZE];\n+        dest = new long[SIZE];\n+        increment = 1;\n+    }\n+\n+    @Benchmark\n+    public long[] field_ret() {\n+        for (int i = 0; i < src.length; i = i + increment) {\n+            dest[i] = src[i];\n+        }\n+        return dest;\n+    }\n+\n+    @Benchmark\n+    public long[] localVar_ret() {\n+        final int inc = increment;\n+        for (int i = 0; i < src.length; i = i + inc) {\n+            dest[i] = src[i];\n+        }\n+        return dest;\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/LoopCounterBench.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"}]}