{"files":[{"patch":"@@ -488,0 +488,3 @@\n+  \/\/ Don't be eager spilling something that will only be spilt uncommonly and is used in the common path\n+  \/\/ as it leads to excessive reloads\n+  constexpr double uncommon_threshold = 0.1;\n@@ -490,3 +493,4 @@\n-  bool used_in_common_path = false;\n-  for (uint i = 0; i < cfg.number_of_blocks(); i++) {\n-    Block* b = cfg.get_block(i);\n+\n+  \/\/ Whether the lrg is spilt inside the loop\n+  for (uint bidx = 0; bidx < cfg.number_of_blocks(); bidx++) {\n+    Block* b = cfg.get_block(bidx);\n@@ -497,2 +501,0 @@\n-    \/\/ Don't be eager spilling something that will only be spilt uncommonly and is used in the common path\n-    constexpr double uncommon_threshold = 0.1;\n@@ -504,1 +506,0 @@\n-        assert(l != nullptr, \"\");\n@@ -509,0 +510,1 @@\n+        \/\/ Spilt in the common path, spill eagerly regardless\n@@ -511,0 +513,1 @@\n+        \/\/ Uncommon path, need to check if it is used in the common path\n@@ -514,0 +517,5 @@\n+  }\n+\n+  if (!spilt) {\n+    return false;\n+  }\n@@ -515,1 +523,6 @@\n-    \/\/ If lrg is used in the common path\n+  \/\/ Whether the lrg is used in the common path\n+  for (uint i = 0; i < cfg.number_of_blocks(); i++) {\n+    Block* b = cfg.get_block(i);\n+    if (!loop->in_loop_nest(b)) {\n+      continue;\n+    }\n@@ -517,4 +530,4 @@\n-      for (uint i = 0; !used_in_common_path && i < b->number_of_nodes(); i++) {\n-        Node* n = b->get_node(i);\n-        for (uint j = 1; j < n->req(); j++) {\n-          Node* in = n->in(j);\n+      for (uint nidx = 0; nidx < b->number_of_nodes(); nidx++) {\n+        Node* n = b->get_node(nidx);\n+        for (uint i = 1; i < n->req(); i++) {\n+          Node* in = n->in(i);\n@@ -522,2 +535,1 @@\n-            used_in_common_path = true;\n-            break;\n+            return false;\n@@ -529,1 +541,1 @@\n-  return spilt && !used_in_common_path;\n+  return true;\n","filename":"src\/hotspot\/share\/opto\/reg_split.cpp","additions":26,"deletions":14,"binary":false,"changes":40,"status":"modified"}]}