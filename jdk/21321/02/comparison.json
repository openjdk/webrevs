{"files":[{"patch":"@@ -0,0 +1,200 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6255196\n+ * @summary Verifies the supported actions on different platforms.\n+ * @library \/test\/lib\n+ * @run main\/othervm ActionSupportTest\n+ *\/\n+\n+import java.awt.Desktop;\n+import java.io.File;\n+import java.net.URI;\n+import javax.swing.JMenuBar;\n+import jtreg.SkippedException;\n+\n+import static java.awt.desktop.QuitStrategy.NORMAL_EXIT;\n+\n+public class ActionSupportTest {\n+\n+    public static void main(String[] args) {\n+        final File file = new File(\"nonExistentFile\");\n+        final URI uri = URI.create(\"nonExistentSchema:anything\");\n+        final StringBuilder error = new StringBuilder();\n+\n+        if (!Desktop.isDesktopSupported()) {\n+            throw new SkippedException(\"Class java.awt.Desktop is not supported on \" +\n+                    \"current platform. Farther testing will not be performed\");\n+        }\n+\n+        Desktop desktop = Desktop.getDesktop();\n+        for (Desktop.Action action : Desktop.Action.values()) {\n+            boolean supported = desktop.isSupported(action);\n+\n+            try {\n+                switch (action) {\n+                    case OPEN:\n+                        \/\/ if not supported, an UnsupportedOperationException will be thrown.\n+                        \/\/ if supported, other exception might be thrown.\n+                        desktop.open(file);\n+                        break;\n+                    case EDIT:\n+                        \/\/ if not supported, an UnsupportedOperationException will be thrown.\n+                        \/\/ if supported, other exception might be thrown.\n+                        desktop.edit(file);\n+                        break;\n+                    case PRINT:\n+                        \/\/ if not supported, an UnsupportedOperationException will be thrown.\n+                        \/\/ if supported, other exception might be thrown.\n+                        desktop.print(file);\n+                        break;\n+                    case MAIL:\n+                        \/\/ if not supported, an UnsupportedOperationException will be thrown.\n+                        \/\/ if supported, other exception might be thrown.\n+                        desktop.mail(uri);\n+                        break;\n+                    case BROWSE:\n+                        if (supported) {\n+                            continue; \/\/ prevent native message about strange schema\n+                        }\n+                        \/\/ if not supported, an UnsupportedOperationException will be thrown.\n+                        \/\/ if supported, other exception might be thrown.\n+                        desktop.browse(uri);\n+                        break;\n+                    case APP_EVENT_FOREGROUND:\n+                    case APP_EVENT_HIDDEN:\n+                    case APP_EVENT_REOPENED:\n+                    case APP_EVENT_SCREEN_SLEEP:\n+                    case APP_EVENT_SYSTEM_SLEEP:\n+                    case APP_EVENT_USER_SESSION:\n+                        continue; \/\/ Has no effect if SystemEventListener's sub-type\n+                        \/\/ is unsupported on the current platform.\n+                    case APP_ABOUT:\n+                        \/\/ if not supported, an UnsupportedOperationException will be thrown.\n+                        \/\/ if supported, other exception might be thrown.\n+                        desktop.setAboutHandler(e -> {\n+                        });\n+                        break;\n+                    case APP_PREFERENCES:\n+                        \/\/ if not supported, an UnsupportedOperationException will be thrown.\n+                        \/\/ if supported, other exception might be thrown.\n+                        desktop.setPreferencesHandler(e -> {\n+                        });\n+                        break;\n+                    case APP_OPEN_FILE:\n+                        \/\/ if not supported, an UnsupportedOperationException will be thrown.\n+                        \/\/ if supported, other exception might be thrown.\n+                        desktop.setOpenFileHandler(e -> {\n+                        });\n+                        break;\n+                    case APP_PRINT_FILE:\n+                        \/\/ if not supported, an UnsupportedOperationException will be thrown.\n+                        \/\/ if supported, other exception might be thrown.\n+                        desktop.setPrintFileHandler(e -> {\n+                        });\n+                        break;\n+                    case APP_OPEN_URI:\n+                        \/\/ if not supported, an UnsupportedOperationException will be thrown.\n+                        \/\/ if supported, other exception might be thrown.\n+                        desktop.setOpenURIHandler(e -> {\n+                        });\n+                        break;\n+                    case APP_QUIT_HANDLER:\n+                        \/\/ if not supported, an UnsupportedOperationException will be thrown.\n+                        \/\/ if supported, other exception might be thrown.\n+                        desktop.setQuitHandler((e, response) -> {\n+                        });\n+                        break;\n+                    case APP_QUIT_STRATEGY:\n+                        \/\/ if not supported, an UnsupportedOperationException will be thrown.\n+                        \/\/ if supported, other exception might be thrown.\n+                        desktop.setQuitStrategy(NORMAL_EXIT);\n+                        break;\n+                    case APP_SUDDEN_TERMINATION:\n+                        \/\/ if not supported, an UnsupportedOperationException will be thrown.\n+                        \/\/ if supported, other exception might be thrown.\n+                        desktop.enableSuddenTermination();\n+                        break;\n+                    case APP_REQUEST_FOREGROUND:\n+                        \/\/ if not supported, an UnsupportedOperationException will be thrown.\n+                        \/\/ if supported, other exception might be thrown.\n+                        desktop.requestForeground(true);\n+                        break;\n+                    case APP_HELP_VIEWER:\n+                        if (supported) {\n+                            continue; \/\/ prevent open separate window\n+                        }\n+                        \/\/ if not supported, an UnsupportedOperationException will be thrown.\n+                        \/\/ if supported, other exception might be thrown.\n+                        desktop.openHelpViewer();\n+                        break;\n+                    case APP_MENU_BAR:\n+                        \/\/ if not supported, an UnsupportedOperationException will be thrown.\n+                        \/\/ if supported, other exception might be thrown.\n+                        desktop.setDefaultMenuBar(new JMenuBar());\n+                        break;\n+                    case BROWSE_FILE_DIR:\n+                        \/\/ if not supported, an UnsupportedOperationException will be thrown.\n+                        \/\/ if supported, other exception might be thrown.\n+                        desktop.browseFileDirectory(file);\n+                        break;\n+                    case MOVE_TO_TRASH:\n+                        \/\/ if not supported, an UnsupportedOperationException will be thrown.\n+                        \/\/ if supported, other exception might be thrown.\n+                        desktop.moveToTrash(file);\n+                        break;\n+                }\n+                \/\/ no exception has been thrown.\n+                if (!supported) {\n+                    error.append(\"Action \" + action.name() + \" is an \" +\n+                            \"unsupported operation, but no exception has been thrown\\n\");\n+                }\n+            } catch (UnsupportedOperationException uoe) {\n+                if (!supported) {\n+                    System.out.println(\"Action \" + action.name() + \"is not supported.\");\n+                } else {\n+                    error.append(\"Action \" + action.name() + \" is a \" +\n+                            \"supported operation, \" +\n+                            \"but UnsupportedOperationException has been thrown\\n\");\n+                }\n+            } catch (Exception e) {\n+                if (supported) {\n+                    System.out.println(\"Action \" + action.name() + \"supported.\");\n+                } else {\n+                    error.append(\"Action \" + action.name() + \" is an \" +\n+                            \"unsupported operation, but \" +\n+                            \"UnsupportedOperationException has not been thrown\\n\");\n+                }\n+            }\n+        }\n+\n+        if (!error.isEmpty()) {\n+            System.err.println(error);\n+            throw new RuntimeException(\"One or more tests failed. \" +\n+                    \"Look at the error output for details\");\n+        }\n+        System.out.println(\"Test completed\");\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Desktop\/ActionSupportTest\/ActionSupportTest.java","additions":200,"deletions":0,"binary":false,"changes":200,"status":"added"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6255196\n+ * @summary  Verifies the function of method browse(java.net.URI uri).\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual BrowseTest\n+ *\/\n+\n+import java.awt.Desktop;\n+import java.io.File;\n+import java.lang.reflect.InvocationTargetException;\n+import java.net.URI;\n+import javax.swing.JPanel;\n+\n+public class BrowseTest extends JPanel {\n+    static final String INSTRUCTIONS = \"\"\"\n+            This test could launch default file manager to open user's home\n+            directory, and default web browser to show the URL of java vendor.\n+            After test execution close the native file manager and web browser\n+            windows if they were launched by test.\n+            Also check output for any unexpected EXCEPTIONS,\n+            if you see any failure messages press Fail otherwise press Pass.\n+            \"\"\";\n+\n+    public BrowseTest() {\n+        if (!Desktop.isDesktopSupported()) {\n+            PassFailJFrame.log(\"Class java.awt.Desktop is not supported on \" +\n+                    \"current platform. Farther testing will not be performed\");\n+            PassFailJFrame.forcePass();\n+        }\n+\n+        Desktop desktop = Desktop.getDesktop();\n+\n+        URI dirURI = new File(System.getProperty(\"user.home\")).toURI();\n+        URI webURI = URI.create(System.getProperty(\"java.vendor.url\", \"http:\/\/www.java.com\"));\n+        boolean failed = false;\n+        try {\n+            PassFailJFrame.log(\"Try to browse \" + dirURI + \" ...\");\n+            desktop.browse(dirURI);\n+            PassFailJFrame.log(\"Succeed.\\n\");\n+        } catch (Exception e) {\n+            PassFailJFrame.log(\"EXCEPTION: \" + e.getMessage());\n+        }\n+\n+        try {\n+            PassFailJFrame.log(\"Try to browse \" + webURI + \" ...\");\n+            desktop.browse(webURI);\n+            PassFailJFrame.log(\"Succeed.\\n\");\n+        } catch (Exception e) {\n+            PassFailJFrame.log(\"EXCEPTION: \" + e.getMessage());\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Browser Test\")\n+                .splitUI(BrowseTest::new)\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(40)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Desktop\/BrowseTest\/BrowseTest.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6255196\n+ * @key headful\n+ * @summary Verifies if class Desktop is supported on current platform.\n+ * @run main DesktopSupportTest\n+ *\/\n+\n+import java.awt.Desktop;\n+\n+public class DesktopSupportTest {\n+    public static void main(String[] args) {\n+        boolean supported = Desktop.isDesktopSupported();\n+        try {\n+            Desktop desktop = Desktop.getDesktop();\n+            if (!supported) {\n+                throw new RuntimeException(\"UnsupportedOperationException \" +\n+                        \"should be thrown, as this class is not supported \" +\n+                        \"on current platform.\");\n+            }\n+        } catch (UnsupportedOperationException uoe) {\n+            if (supported) {\n+                throw new RuntimeException(\"UnsupportedOperationException \" +\n+                        \"should NOT be thrown, as this class is supported \" +\n+                        \"on current platform.\");\n+            }\n+        } catch (Exception e) {\n+            if (!supported) {\n+                throw new RuntimeException(\"UnsupportedOperationException \" +\n+                        \"should be thrown, as this class is not supported \" +\n+                        \"on current platform. But \" + e.getClass().getName() +\n+                        \" has been thrown instead.\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Desktop\/DesktopSupportTest\/DesktopSupportTest.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6255196\n+ * @summary Verifies the function of methods mail() and mail(java.net.URI uri).\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MailTest\n+ *\/\n+\n+import java.awt.Desktop;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.net.URI;\n+import javax.swing.JPanel;\n+\n+public class MailTest extends JPanel {\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+            This test could launch the mail client to compose mail\n+            with and without filling the message fields.\n+            After test execution close the mail composing windows if they\n+            were launched by test.\n+            If you see any unexpected EXCEPTION messages in the output\n+            press Fail. Otherwise press Pass.\n+            \"\"\";\n+\n+    private MailTest() {\n+        if (!Desktop.isDesktopSupported()) {\n+            PassFailJFrame.log(\"Class java.awt.Desktop is not supported on \" +\n+                    \"current platform. Farther testing will not be performed\");\n+            PassFailJFrame.forcePass();\n+        }\n+\n+        Desktop desktop = Desktop.getDesktop();\n+        if (!desktop.isSupported(Desktop.Action.MAIL)) {\n+            PassFailJFrame.log(\"Action.MAIL is not supported.\");\n+            PassFailJFrame.forcePass();\n+        }\n+\n+        \/*\n+         * Part 1: launch the mail composing window without a mailto URI.\n+         *\/\n+        try {\n+            desktop.mail();\n+        } catch (IOException e) {\n+            PassFailJFrame.log(\"EXCEPTION: \" + e.getMessage());\n+        }\n+\n+        \/*\n+         * Part 2: launch the mail composing window with a mailto URI.\n+         *\/\n+        URI testURI = null;\n+        try {\n+            testURI = new URI(\"mailto\", \"foo@bar.com?subject=test subject\" +\n+                    \"&cc=foocc@bar.com&body=test body\", null);\n+            desktop.mail(testURI);\n+        } catch (IOException e) {\n+            PassFailJFrame.log(\"EXCEPTION: \" + e.getMessage());\n+        } catch (java.net.URISyntaxException use) {\n+            \/\/ Should not reach here.\n+            PassFailJFrame.log(\"EXCEPTION: \" + use.getMessage());\n+        }\n+\n+        \/*\n+         * Part 3: try to launch the mail composing window with a URI with a\n+         * scheme which is not \"mailto\":\n+         *   http:\/\/java.net.\n+         * An IOException should be thrown in this case.\n+         *\/\n+        try {\n+            testURI = URI.create(\"http:\/\/java.com\");\n+            PassFailJFrame.log(\"Try to mail: \" + testURI);\n+            desktop.mail(testURI);\n+        } catch (IllegalArgumentException e) {\n+            PassFailJFrame.log(\"Caught expected IllegalArgumentException\");\n+        } catch (IOException ioe) {\n+            PassFailJFrame.log(\"EXCEPTION: \" + ioe.getMessage());\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Mail Test\")\n+                .splitUI(MailTest::new)\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(40)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Desktop\/MailTest\/MailTest.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6255196\n+ * @summary Verifies the function of method open(java.io.File file).\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual\/othervm OpenTest\n+ *\/\n+\n+import java.awt.Desktop;\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.JPanel;\n+\n+public class OpenTest extends JPanel {\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+            This test could open the user's home directory and a .txt file.\n+            After test execution, close the native application windows that\n+            are used to open the directory and .txt file if they were launched\n+            by the test.\n+            If you see any unexpected EXCEPTION messages in the output press Fail.\n+            Otherwise press Pass.\n+            \"\"\";\n+\n+    public OpenTest() {\n+        if (!Desktop.isDesktopSupported()) {\n+            PassFailJFrame.log(\"Class java.awt.Desktop is not supported on \" +\n+                    \"current platform. Further testing will not be performed\");\n+            PassFailJFrame.forcePass();\n+        }\n+\n+        Desktop desktop = Desktop.getDesktop();\n+\n+        \/*\n+         * Part 1: open a directory, which should launch the system default\n+         * file explorer.\n+         *\n+         * On Windows platforms, the default file explorer is explorer;\n+         * on UNIX platforms with Gnome installed and running, the default\n+         * file explorer is Nautilus.\n+         *\/\n+        File userHome = new File(System.getProperty(\"user.home\"));\n+\n+        try {\n+            PassFailJFrame.log(\"Try to open \" + userHome);\n+            desktop.open(userHome);\n+            PassFailJFrame.log(\"Succeed.\");\n+        } catch (IOException e) {\n+            PassFailJFrame.log(\"EXCEPTION: \" + e.getMessage());\n+        }\n+\n+        \/*\n+         * Part 2: open a normal .txt file, which should launch the registered\n+         * application for .txt files.\n+         *\/\n+        \/\/ Create a temp .txt file for test.\n+        File testFile = null;\n+        try {\n+            PassFailJFrame.log(\"Creating temporary file\");\n+            testFile = File.createTempFile(\"JDIC-test\", \".txt\",\n+                    new File(System.getProperty(\"java.io.tmpdir\")));\n+            testFile.deleteOnExit();\n+        } catch (java.io.IOException ioe) {\n+            PassFailJFrame.log(\"EXCEPTION: \" + ioe.getMessage());\n+            PassFailJFrame.log(\"Failed to create test file\");\n+        }\n+\n+        try {\n+            PassFailJFrame.log(\"Try to open \" + testFile);\n+            desktop.open(testFile);\n+            PassFailJFrame.log(\"Succeed.\");\n+        } catch (IOException e) {\n+            PassFailJFrame.log(\"EXCEPTION: \" + e.getMessage());\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Mail Test\")\n+                .splitUI(OpenTest::new)\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(40)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Desktop\/OpenTest\/OpenTest.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}