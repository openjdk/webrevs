{"files":[{"patch":"@@ -486,3 +486,0 @@\n-  using CardValue = CardTable::CardValue;\n-\n-  G1CollectedHeap* _g1h;\n@@ -490,1 +487,0 @@\n-\n@@ -492,1 +488,0 @@\n-\n@@ -495,3 +490,5 @@\n-  G1CardTable *_ct;\n-\n-  bool has_failures() const { return _num_failures != 0; }\n+  \/\/ Increases the failure counter and return whether this has been the first failure.\n+  bool record_failure() {\n+    _num_failures++;\n+    return _num_failures == 1;\n+  }\n@@ -499,1 +496,1 @@\n-  void print_object(outputStream* out, oop obj) {\n+  static void print_object(outputStream* out, oop obj) {\n@@ -507,3 +504,39 @@\n-  template<class T>\n-  bool verify_liveness(T* p, oop obj) {\n-    bool is_in_heap = _g1h->is_in(obj);\n+  template <class T>\n+  class Checker {\n+  public:\n+    G1CollectedHeap* _g1h;\n+    G1VerifyLiveAndRemSetClosure* _cl;\n+    oop _containing_obj;\n+    T* _p;\n+    oop _obj;\n+\n+    Checker(G1VerifyLiveAndRemSetClosure* cl, oop containing_obj, T* p, oop obj) :\n+      _g1h(G1CollectedHeap::heap()),\n+      _cl(cl),\n+      _containing_obj(containing_obj),\n+      _p(p),\n+      _obj(obj) { }\n+\n+    void print_containing_obj(outputStream* out, HeapRegion* from) {\n+      log_error(gc, verify)(\"Field \" PTR_FORMAT \" of obj \" PTR_FORMAT \" in region \" HR_FORMAT,\n+                            p2i(_p), p2i(_containing_obj), HR_FORMAT_PARAMS(from));\n+      print_object(out, _containing_obj);\n+    }\n+\n+    void print_referenced_obj(outputStream* out, HeapRegion* to, const char* explanation) {\n+      log_error(gc, verify)(\"points to %sobj \" PTR_FORMAT \" in region \" HR_FORMAT \" remset %s\",\n+                            explanation, p2i(_obj), HR_FORMAT_PARAMS(to), to->rem_set()->get_state_str());\n+      print_object(out, _obj);\n+    }\n+  };\n+\n+  template <class T>\n+  class LiveChecker : public Checker<T> {\n+  public:\n+    VerifyOption _vo;\n+    bool _is_in_heap;\n+\n+    LiveChecker(G1VerifyLiveAndRemSetClosure* cl, oop containing_obj, T* p, oop obj, VerifyOption vo) : Checker<T>(cl, containing_obj, p, obj) {\n+      _vo = vo;\n+      _is_in_heap = this->_g1h->is_in(obj);\n+    }\n@@ -511,1 +544,5 @@\n-    if (!is_in_heap || _g1h->is_obj_dead_cond(obj, _vo)) {\n+    bool failed() const {\n+      return !_is_in_heap || this->_g1h->is_obj_dead_cond(this->_obj, _vo);\n+    }\n+\n+    void report_error() {\n@@ -518,1 +555,1 @@\n-      if (!has_failures()) {\n+      if (this->_cl->record_failure()) {\n@@ -522,4 +559,2 @@\n-      HeapRegion* from = _g1h->heap_region_containing(p);\n-      log.error(\"Field \" PTR_FORMAT \" of live obj \" PTR_FORMAT \" in region \" HR_FORMAT,\n-                p2i(p), p2i(_containing_obj), HR_FORMAT_PARAMS(from));\n-      print_object(&ls, _containing_obj);\n+      HeapRegion* from = this->_g1h->heap_region_containing(this->_p);\n+      this->print_containing_obj(&ls, from);\n@@ -527,2 +562,2 @@\n-      if (!is_in_heap) {\n-        log.error(\"points to address \" PTR_FORMAT \" outside of heap\", p2i(obj));\n+      if (!_is_in_heap) {\n+        log.error(\"points to address \" PTR_FORMAT \" outside of heap\", p2i(this->_obj));\n@@ -530,4 +565,2 @@\n-        HeapRegion* to = _g1h->heap_region_containing(obj);\n-        log.error(\"points to dead obj \" PTR_FORMAT \" in region \" HR_FORMAT \" remset %s\",\n-                  p2i(obj), HR_FORMAT_PARAMS(to), to->rem_set()->get_state_str());\n-        print_object(&ls, obj);\n+        HeapRegion* to = this->_g1h->heap_region_containing(this->_obj);\n+        this->print_referenced_obj(&ls, to, \"dead \");\n@@ -536,2 +569,0 @@\n-      _num_failures++;\n-      return false;\n@@ -539,2 +570,1 @@\n-    return true;\n-  }\n+  };\n@@ -543,8 +573,17 @@\n-  void verify_remset(T* p, oop obj) {\n-    HeapRegion* from = _g1h->heap_region_containing(p);\n-    HeapRegion* to = _g1h->heap_region_containing(obj);\n-    if (from != to && !from->is_young() && to->rem_set()->is_complete()) {\n-\n-      CardValue cv_obj = *_ct->byte_for_const(_containing_obj);\n-      CardValue cv_field = *_ct->byte_for_const(p);\n-      const CardValue dirty = G1CardTable::dirty_card_val();\n+  class RemSetChecker : public Checker<T> {\n+  public:\n+    using CardValue = CardTable::CardValue;\n+\n+    HeapRegion* _from;\n+    HeapRegion* _to;\n+    CardValue _cv_obj;\n+    CardValue _cv_field;\n+\n+    RemSetChecker(G1VerifyLiveAndRemSetClosure* cl, oop containing_obj, T* p, oop obj) : Checker<T>(cl, containing_obj, p, obj) {\n+      _from = this->_g1h->heap_region_containing(p);\n+      _to = this->_g1h->heap_region_containing(obj);\n+\n+      CardTable* ct = this->_g1h->card_table();\n+      _cv_obj = *ct->byte_for_const(this->_containing_obj);\n+      _cv_field = *ct->byte_for_const(p);\n+    }\n@@ -552,4 +591,10 @@\n-      bool is_bad = !(to->rem_set()->contains_reference(p) ||\n-                      (_containing_obj->is_objArray() ?\n-                       cv_field == dirty :\n-                       cv_obj == dirty || cv_field == dirty));\n+    bool failed() const {\n+      if (this->_from != this->_to && !this->_from->is_young() && this->_to->rem_set()->is_complete()) {\n+        const CardValue dirty = G1CardTable::dirty_card_val();\n+        return !(this->_to->rem_set()->contains_reference(this->_p) ||\n+                 (this->_containing_obj->is_objArray() ?\n+                  _cv_field == dirty :\n+                  _cv_obj == dirty || _cv_field == dirty));\n+      }\n+      return false;\n+    }\n@@ -557,4 +602,4 @@\n-      if (is_bad) {\n-        ResourceMark rm;\n-        Log(gc, verify) log;\n-        LogStream ls(log.error());\n+    void report_error() {\n+      ResourceMark rm;\n+      Log(gc, verify) log;\n+      LogStream ls(log.error());\n@@ -562,1 +607,1 @@\n-        MutexLocker x(G1RareEvent_lock, Mutex::_no_safepoint_check_flag);\n+      MutexLocker x(G1RareEvent_lock, Mutex::_no_safepoint_check_flag);\n@@ -564,11 +609,1 @@\n-        if (!has_failures()) {\n-          log.error(\"----------\");\n-        }\n-        log.error(\"Missing rem set entry:\");\n-        log.error(\"Field \" PTR_FORMAT \" of obj \" PTR_FORMAT \" in region \" HR_FORMAT,\n-                  p2i(p), p2i(_containing_obj), HR_FORMAT_PARAMS(from));\n-        _containing_obj->print_on(&ls);\n-        log.error(\"points to obj \" PTR_FORMAT \" in region \" HR_FORMAT \" remset %s\",\n-                  p2i(obj), HR_FORMAT_PARAMS(to), to->rem_set()->get_state_str());\n-        print_object(&ls, obj);\n-        log.error(\"Obj head CTE = %d, field CTE = %d.\", cv_obj, cv_field);\n+      if (this->_cl->record_failure()) {\n@@ -576,1 +611,0 @@\n-        _num_failures++;\n@@ -578,0 +612,5 @@\n+      log.error(\"Missing rem set entry:\");\n+      this->print_containing_obj(&ls, _from);\n+      this->print_referenced_obj(&ls, _to, \"\");\n+      log.error(\"Obj head CV = %d, field CV = %d.\", _cv_obj, _cv_field);\n+      log.error(\"----------\");\n@@ -579,1 +618,1 @@\n-  }\n+  };\n@@ -584,1 +623,1 @@\n-    assert(!_g1h->is_obj_dead_cond(_containing_obj, _vo), \"Precondition\");\n+    assert(!G1CollectedHeap::heap()->is_obj_dead_cond(_containing_obj, _vo), \"Precondition\");\n@@ -592,3 +631,10 @@\n-    bool is_live = verify_liveness(p, obj);\n-    if (is_live) {\n-      verify_remset(p, obj);\n+    LiveChecker<T> live_check(this, _containing_obj, p, obj, _vo);\n+    if (live_check.failed()) {\n+      live_check.report_error();\n+      \/\/ There is no point in doing remset verification if the reference is bad.\n+      return;\n+    }\n+\n+    RemSetChecker<T> remset_check(this, _containing_obj, p, obj);\n+    if (remset_check.failed()) {\n+      remset_check.report_error();\n@@ -600,1 +646,0 @@\n-    _g1h(G1CollectedHeap::heap()),\n@@ -603,2 +648,1 @@\n-    _num_failures(0),\n-    _ct(_g1h->card_table()) { }\n+    _num_failures(0) { }\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":109,"deletions":65,"binary":false,"changes":174,"status":"modified"}]}