{"files":[{"patch":"@@ -196,2 +196,1 @@\n-        jdk.jlink,\n-        jdk.jshell;\n+        jdk.jlink;\n@@ -382,1 +381,4 @@\n-\n+    exports jdk.internal.classfile to\n+        jdk.jshell;\n+    exports jdk.internal.classfile.instruction to\n+        jdk.jshell;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.ConstantDescs;\n+import java.lang.constant.MethodTypeDesc;\n@@ -32,6 +35,3 @@\n-import jdk.internal.org.objectweb.asm.ClassReader;\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.ClassTransform;\n+import jdk.internal.classfile.instruction.BranchInstruction;\n@@ -77,0 +77,5 @@\n+    private static final String CANCEL_CLASS = \"REPL.$Cancel$\";\n+    private static final ClassDesc CD_Cancel = ClassDesc.of(CANCEL_CLASS);\n+    private static final ClassDesc CD_ThreadDeath = ClassDesc.of(\"java.lang.ThreadDeath\");\n+    private static final MethodTypeDesc MTD_void = MethodTypeDesc.of(ConstantDescs.CD_void);\n+\n@@ -78,15 +83,6 @@\n-        var reader  = new ClassReader(classFile);\n-        var writer = new ClassWriter(reader, 0);\n-        reader.accept(new ClassVisitor(Opcodes.ASM9, writer) {\n-            @Override\n-            public MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions) {\n-                return new MethodVisitor(Opcodes.ASM9, super.visitMethod(access, name, descriptor, signature, exceptions)) {\n-                    @Override\n-                    public void visitJumpInsn(int opcode, Label label) {\n-                        visitMethodInsn(Opcodes.INVOKESTATIC, \"REPL\/$Cancel$\", \"stopCheck\", \"()V\", false);\n-                        super.visitJumpInsn(opcode, label);\n-                    }\n-                };\n-            }\n-        }, 0);\n-        return writer.toByteArray();\n+        return Classfile.parse(classFile)\n+                        .transform(ClassTransform.transformingMethodBodies((cob, coe) -> {\n+                            if (coe instanceof BranchInstruction)\n+                                cob.invokestatic(CD_Cancel, \"stopCheck\", MTD_void);\n+                            cob.with(coe);\n+                        }));\n@@ -96,18 +92,10 @@\n-        var cancelWriter = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);\n-        cancelWriter.visit(Opcodes.V19, Opcodes.ACC_PUBLIC, \"REPL\/$Cancel$\", null, \"java\/lang\/Object\", null);\n-        cancelWriter.visitField(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC | Opcodes.ACC_VOLATILE, \"allStop\", \"Z\", null, null);\n-        var checkVisitor = cancelWriter.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC, \"stopCheck\", \"()V\", null, null);\n-            checkVisitor.visitCode();\n-            checkVisitor.visitFieldInsn(Opcodes.GETSTATIC, \"REPL\/$Cancel$\", \"allStop\", \"Z\");\n-            var skip = new Label();\n-            checkVisitor.visitJumpInsn(Opcodes.IFEQ, skip);\n-            checkVisitor.visitTypeInsn(Opcodes.NEW, \"java\/lang\/ThreadDeath\");\n-            checkVisitor.visitInsn(Opcodes.DUP);\n-            checkVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, \"java\/lang\/ThreadDeath\", \"<init>\", \"()V\", false);\n-            checkVisitor.visitInsn(Opcodes.ATHROW);\n-            checkVisitor.visitLabel(skip);\n-            checkVisitor.visitInsn(Opcodes.RETURN);\n-            checkVisitor.visitMaxs(0, 0);\n-            checkVisitor.visitEnd();\n-        cancelWriter.visitEnd();\n-        return new ClassBytecodes(\"REPL.$Cancel$\", cancelWriter.toByteArray());\n+        return new ClassBytecodes(CANCEL_CLASS, Classfile.build(CD_Cancel, clb ->\n+             clb.withFlags(Classfile.ACC_PUBLIC)\n+                .withField(\"allStop\", ConstantDescs.CD_boolean, Classfile.ACC_PUBLIC | Classfile.ACC_STATIC | Classfile.ACC_VOLATILE)\n+                .withMethodBody(\"stopCheck\", MTD_void, Classfile.ACC_PUBLIC | Classfile.ACC_STATIC, cob ->\n+                        cob.getstatic(CD_Cancel, \"allStop\", ConstantDescs.CD_boolean)\n+                           .ifThenElse(tb -> tb.new_(CD_ThreadDeath)\n+                                               .dup()\n+                                               .invokespecial(CD_ThreadDeath, \"<init>\", MTD_void)\n+                                               .athrow(),\n+                                       eb -> eb.return_()))));\n@@ -121,1 +109,1 @@\n-            allStop = findClass(\"REPL.$Cancel$\").getDeclaredField(\"allStop\");\n+            allStop = findClass(CANCEL_CLASS).getDeclaredField(\"allStop\");\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/LocalExecutionControl.java","additions":28,"deletions":40,"binary":false,"changes":68,"status":"modified"}]}