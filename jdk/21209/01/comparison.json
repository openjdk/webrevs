{"files":[{"patch":"@@ -35,1 +35,0 @@\n-import java.util.function.Consumer;\n@@ -79,5 +78,62 @@\n-            Consumer<Runnable> check = c -> {\n-                try {\n-                    c.run();\n-                } catch (VerifyError|Exception e) {\n-                    errors.add(new VerifyError(\"%s at constant pool index %d in %s\".formatted(e.getMessage(), cpe.index(), toString(classModel))));\n+            try {\n+                switch (cpe) {\n+                    case DoubleEntry de -> de.doubleValue();\n+                    case FloatEntry fe -> fe.floatValue();\n+                    case IntegerEntry ie -> ie.intValue();\n+                    case LongEntry le -> le.longValue();\n+                    case Utf8Entry ue -> ue.stringValue();\n+                    case ConstantDynamicEntry cde -> cde.asSymbol();\n+                    case InvokeDynamicEntry ide -> ide.asSymbol();\n+                    case ClassEntry ce -> ce.asSymbol();\n+                    case StringEntry se -> se.stringValue();\n+                    case MethodHandleEntry mhe -> mhe.asSymbol();\n+                    case MethodTypeEntry mte -> mte.asSymbol();\n+                    case FieldRefEntry fre -> {\n+                        try {\n+                            fre.owner().asSymbol();\n+                        } catch (VerifyError|Exception e) {\n+                            errors.add(cpeVerifyError(cpe, e));\n+                        }\n+                        try {\n+                            fre.typeSymbol();\n+                        } catch (VerifyError|Exception e) {\n+                            errors.add(cpeVerifyError(cpe, e));\n+                        }\n+                        verifyFieldName(fre.name().stringValue());\n+                    }\n+                    case InterfaceMethodRefEntry imre -> {\n+                        try {\n+                            imre.owner().asSymbol();\n+                        } catch (VerifyError|Exception e) {\n+                            errors.add(cpeVerifyError(cpe, e));\n+                        }\n+                        try {\n+                            imre.typeSymbol();\n+                        } catch (VerifyError|Exception e) {\n+                            errors.add(cpeVerifyError(cpe, e));\n+                        }\n+                        verifyMethodName(imre.name().stringValue());\n+                    }\n+                    case MethodRefEntry mre -> {\n+                        try {\n+                            mre.owner().asSymbol();\n+                        } catch (VerifyError|Exception e) {\n+                            errors.add(cpeVerifyError(cpe, e));\n+                        }\n+                        try {\n+                            mre.typeSymbol();\n+                        } catch (VerifyError|Exception e) {\n+                            errors.add(cpeVerifyError(cpe, e));\n+                        }\n+                        verifyMethodName(mre.name().stringValue());\n+                    }\n+                    case ModuleEntry me -> me.asSymbol();\n+                    case NameAndTypeEntry nate -> {\n+                        try {\n+                            nate.name().stringValue();\n+                        } catch (VerifyError|Exception e) {\n+                            errors.add(cpeVerifyError(cpe, e));\n+                        }\n+                        nate.type().stringValue();\n+                    }\n+                    case PackageEntry pe -> pe.asSymbol();\n@@ -85,35 +141,3 @@\n-            };\n-            check.accept(switch (cpe) {\n-                case DoubleEntry de -> de::doubleValue;\n-                case FloatEntry fe -> fe::floatValue;\n-                case IntegerEntry ie -> ie::intValue;\n-                case LongEntry le -> le::longValue;\n-                case Utf8Entry ue -> ue::stringValue;\n-                case ConstantDynamicEntry cde -> cde::asSymbol;\n-                case InvokeDynamicEntry ide -> ide::asSymbol;\n-                case ClassEntry ce -> ce::asSymbol;\n-                case StringEntry se -> se::stringValue;\n-                case MethodHandleEntry mhe -> mhe::asSymbol;\n-                case MethodTypeEntry mte -> mte::asSymbol;\n-                case FieldRefEntry fre -> {\n-                    check.accept(fre.owner()::asSymbol);\n-                    check.accept(fre::typeSymbol);\n-                    yield () -> verifyFieldName(fre.name().stringValue());\n-                }\n-                case InterfaceMethodRefEntry imre -> {\n-                    check.accept(imre.owner()::asSymbol);\n-                    check.accept(imre::typeSymbol);\n-                    yield () -> verifyMethodName(imre.name().stringValue());\n-                }\n-                case MethodRefEntry mre -> {\n-                    check.accept(mre.owner()::asSymbol);\n-                    check.accept(mre::typeSymbol);\n-                    yield () -> verifyMethodName(mre.name().stringValue());\n-                }\n-                case ModuleEntry me -> me::asSymbol;\n-                case NameAndTypeEntry nate -> {\n-                    check.accept(nate.name()::stringValue);\n-                    yield () -> nate.type().stringValue();\n-                }\n-                case PackageEntry pe -> pe::asSymbol;\n-            });\n+            } catch (VerifyError|Exception e) {\n+                errors.add(cpeVerifyError(cpe, e));\n+            }\n@@ -123,0 +147,4 @@\n+    private VerifyError cpeVerifyError(final PoolEntry cpe, final Throwable e) {\n+        return new VerifyError(\"%s at constant pool index %d in %s\".formatted(e.getMessage(), cpe.index(), toString(classModel)));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/ParserVerifier.java","additions":69,"deletions":41,"binary":false,"changes":110,"status":"modified"}]}