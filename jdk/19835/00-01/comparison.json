{"files":[{"patch":"@@ -222,1 +222,1 @@\n-  print_hex_dump(st, pc - 32, pc + 32, sizeof(char), false);\n+  print_hex_dump(st, pc - 32, pc + 32, sizeof(char), \/* print_ascii=*\/false);\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/os_windows_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1276,1 +1276,1 @@\n-      os::print_hex_dump(&lsh, base, top, unitsize, true, 32, requested_base);\n+      os::print_hex_dump(&lsh, base, top, unitsize, \/* print_ascii=*\/true, \/* bytes_per_line=*\/32, requested_base);\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2018, 2020, Red Hat, Inc. All rights reserved.\n@@ -49,1 +49,1 @@\n-    os::print_hex_dump(&ss, start, end, 4, true);\n+    os::print_hex_dump(&ss, start, end, 4);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAsserts.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,1 +95,1 @@\n-    os::print_hex_dump(tty, (address)n, (address)n + sizeof(Node), 1, true);\n+    os::print_hex_dump(tty, (address)n, (address)n + sizeof(Node), 1);\n","filename":"src\/hotspot\/share\/memory\/metaspace\/blockTree.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-    os::print_hex_dump(st, from1, to1, 1, true);\n+    os::print_hex_dump(st, from1, to1, 1);\n@@ -61,1 +61,1 @@\n-    os::print_hex_dump(st, from2, to2, 1, true);\n+    os::print_hex_dump(st, from2, to2, 1);\n@@ -64,1 +64,1 @@\n-    os::print_hex_dump(st, from1, to2, 1, true);\n+    os::print_hex_dump(st, from1, to2, 1);\n","filename":"src\/hotspot\/share\/nmt\/mallocHeader.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -944,3 +944,4 @@\n-ATTRIBUTE_NO_ASAN static bool read_safely_from(const uint8_t* p, uintptr_t* result) {\n-  const intptr_t errval = 0x1717;\n-  intptr_t i = SafeFetchN((intptr_t*)p, errval);\n+ATTRIBUTE_NO_ASAN static bool read_safely_from(const uintptr_t* p, uintptr_t* result) {\n+  DEBUG_ONLY(*result = 0xAAAA;)\n+  const uintptr_t errval = 0x1717;\n+  uintptr_t i = (uintptr_t)SafeFetchN((intptr_t*)p, errval);\n@@ -948,1 +949,1 @@\n-    i = SafeFetchN((intptr_t*)p, ~errval);\n+    i = (uintptr_t)SafeFetchN((intptr_t*)p, ~errval);\n@@ -966,1 +967,1 @@\n-    ascii_form.put(isprint(c) && isascii(c) ? c : '_');\n+    ascii_form.put(isprint(c) && isascii(c) ? c : '.');\n@@ -971,1 +972,1 @@\n-static void print_hex_location(outputStream* st, const uint8_t* p, int unitsize, stringStream& ascii_form) {\n+static void print_hex_location(outputStream* st, const_address p, int unitsize, stringStream& ascii_form) {\n@@ -973,1 +974,1 @@\n-  const uint8_t* pa = align_down(p, sizeof(intptr_t));\n+  const uintptr_t* pa = (const uintptr_t*) align_down(p, sizeof(intptr_t));\n@@ -979,1 +980,1 @@\n-        read_safely_from(pa + sizeof(uintptr_t), &i2)) {\n+        read_safely_from(pa + 1, &i2)) {\n@@ -997,1 +998,1 @@\n-    const int offset = (int)(p - (address)pa);\n+    const int offset = (int)(p - (const_address)pa);\n@@ -1020,2 +1021,2 @@\n-void os::print_hex_dump(outputStream* st, const uint8_t* start, const uint8_t* end, int unitsize,\n-                        bool print_ascii, int bytes_per_line, const uint8_t* logical_start) {\n+void os::print_hex_dump(outputStream* st, const_address start, const_address end, int unitsize,\n+                        bool print_ascii, int bytes_per_line, const_address logical_start) {\n@@ -1034,2 +1035,2 @@\n-  const uint8_t* p = start;\n-  const uint8_t* logical_p = logical_start;\n+  const_address p = start;\n+  const_address logical_p = logical_start;\n@@ -1082,1 +1083,1 @@\n-  print_hex_dump(st, sp, sp + 512, sizeof(intptr_t), true);\n+  print_hex_dump(st, sp, sp + 512, sizeof(intptr_t));\n@@ -1087,1 +1088,1 @@\n-  print_hex_dump(st, pc - 256, pc + 256, unitsize, false);\n+  print_hex_dump(st, pc - 256, pc + 256, unitsize, \/* print_ascii=*\/false);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -858,3 +858,3 @@\n-  static void print_hex_dump(outputStream* st, const uint8_t* start, const uint8_t* end, int unitsize, bool print_ascii,\n-                             int bytes_per_line, const uint8_t* logical_start);\n-  static void print_hex_dump(outputStream* st, const uint8_t* start, const uint8_t* end, int unitsize, bool print_ascii = true) {\n+  static void print_hex_dump(outputStream* st, const_address start, const_address end, int unitsize, bool print_ascii,\n+                             int bytes_per_line, const_address logical_start);\n+  static void print_hex_dump(outputStream* st, const_address start, const_address end, int unitsize, bool print_ascii = true) {\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -458,0 +458,1 @@\n+typedef const u_char* const_address;\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -170,2 +170,2 @@\n-static void do_test_print_hex_dump(const uint8_t* from, const uint8_t* to, int unitsize, int bytes_per_line,\n-                                   const uint8_t* logical_start, const char* expected) {\n+static void do_test_print_hex_dump(const_address from, const_address to, int unitsize, int bytes_per_line,\n+                                   const_address logical_start, const char* expected) {\n@@ -175,1 +175,1 @@\n-  os::print_hex_dump(&ss, from, to, unitsize, true, bytes_per_line, logical_start);\n+  os::print_hex_dump(&ss, from, to, unitsize, \/* print_ascii=*\/true, bytes_per_line, logical_start);\n@@ -191,2 +191,2 @@\n-#define ASCII_1  \"____#_jdk\/internal\/loader\/Native\"\n-#define ASCII_2  \"Libraries_______\"\n+#define ASCII_1  \"....#.jdk\/internal\/loader\/Native\"\n+#define ASCII_2  \"Libraries.......\"\n@@ -239,3 +239,3 @@\n-  const uint8_t* const from = (const uint8_t*) two_pages + ps - 32;\n-  const uint8_t* const to = (const uint8_t*) from + 32 + sizeof(bytes);\n-  const uint8_t* const logical_start = (const uint8_t*) LP64_ONLY(0xAAAAAAAAAA00ULL) NOT_LP64(0xAAAAAA00ULL);\n+  const const_address from = (const_address) two_pages + ps - 32;\n+  const const_address to = (const_address) from + 32 + sizeof(bytes);\n+  const const_address logical_start = (const_address) LP64_ONLY(0xAAAAAAAAAA00ULL) NOT_LP64(0xAAAAAA00ULL);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-                            (address)(align_up(end, 0x10) + 0x10), 1, true);\n+                            (address)(align_up(end, 0x10) + 0x10), 1);\n","filename":"test\/hotspot\/gtest\/testutils.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}