{"files":[{"patch":"@@ -54,3 +54,4 @@\n-char* CDSConfig::_default_archive_path = nullptr;\n-char* CDSConfig::_static_archive_path = nullptr;\n-char* CDSConfig::_dynamic_archive_path = nullptr;\n+const char* CDSConfig::_default_archive_path = nullptr;\n+const char* CDSConfig::_input_static_archive_path = nullptr;\n+const char* CDSConfig::_input_dynamic_archive_path = nullptr;\n+const char* CDSConfig::_output_archive_path = nullptr;\n@@ -69,1 +70,5 @@\n-void CDSConfig::initialize() {\n+DEBUG_ONLY(static bool _cds_ergo_initialize_started = false);\n+\n+void CDSConfig::ergo_initialize() {\n+  DEBUG_ONLY(_cds_ergo_initialize_started = true);\n+\n@@ -86,2 +91,0 @@\n-  \/\/\n-  \/\/ UseSharedSpaces may be disabled if -XX:SharedArchiveFile is invalid.\n@@ -89,1 +92,5 @@\n-    init_shared_archive_paths();\n+    if (new_aot_flags_used()) {\n+      ergo_init_aot_paths();\n+    } else {\n+      ergo_init_classic_archive_paths();\n+    }\n@@ -97,1 +104,4 @@\n-char* CDSConfig::default_archive_path() {\n+const char* CDSConfig::default_archive_path() {\n+  \/\/ The path depends on UseCompressedOops, etc, which are set by GC ergonomics just\n+  \/\/ before CDSConfig::ergo_initialize() is called.\n+  assert(_cds_ergo_initialize_started, \"sanity\");\n@@ -119,2 +129,2 @@\n-int CDSConfig::num_archives(const char* archive_path) {\n-  if (archive_path == nullptr) {\n+int CDSConfig::num_archive_paths(const char* path_spec) {\n+  if (path_spec == nullptr) {\n@@ -124,1 +134,1 @@\n-  char* p = (char*)archive_path;\n+  char* p = (char*)path_spec;\n@@ -134,3 +144,3 @@\n-void CDSConfig::extract_shared_archive_paths(const char* archive_path,\n-                                             char** base_archive_path,\n-                                             char** top_archive_path) {\n+void CDSConfig::extract_archive_paths(const char* archive_path,\n+                                      const char** base_archive_path,\n+                                      const char** top_archive_path) {\n@@ -160,1 +170,2 @@\n-void CDSConfig::init_shared_archive_paths() {\n+void CDSConfig::ergo_init_classic_archive_paths() {\n+  assert(_cds_ergo_initialize_started, \"sanity\");\n@@ -175,1 +186,4 @@\n-    _static_archive_path = default_archive_path();\n+    _input_static_archive_path = default_archive_path();\n+    if (is_dumping_static_archive()) {\n+      _output_archive_path = _input_static_archive_path;\n+    }\n@@ -177,2 +191,2 @@\n-    int archives = num_archives(SharedArchiveFile);\n-    assert(archives > 0, \"must be\");\n+    int num_archives = num_archive_paths(SharedArchiveFile);\n+    assert(num_archives > 0, \"must be\");\n@@ -180,1 +194,1 @@\n-    if (is_dumping_archive() && archives > 1) {\n+    if (is_dumping_archive() && num_archives > 1) {\n@@ -186,1 +200,1 @@\n-      assert(archives == 1, \"must be\");\n+      assert(num_archives == 1, \"just checked above\");\n@@ -188,2 +202,2 @@\n-      \/\/ will be overwritten no matter regardless of its contents\n-      _static_archive_path = os::strdup_check_oom(SharedArchiveFile, mtArguments);\n+      \/\/ will be overwritten regardless of its contents\n+      _output_archive_path = SharedArchiveFile;\n@@ -200,1 +214,1 @@\n-      if (archives > 2) {\n+      if (num_archives > 2) {\n@@ -204,2 +218,3 @@\n-      if (archives == 1) {\n-        char* base_archive_path = nullptr;\n+\n+      if (num_archives == 1) {\n+        const char* base_archive_path = nullptr;\n@@ -212,3 +227,3 @@\n-            enable_dumping_dynamic_archive();\n-            ArchiveClassesAtExit = const_cast<char *>(SharedArchiveFile);\n-            _static_archive_path = default_archive_path();\n+            enable_dumping_dynamic_archive(SharedArchiveFile);\n+            ArchiveClassesAtExit = SharedArchiveFile;\n+            _input_static_archive_path = default_archive_path();\n@@ -216,1 +231,1 @@\n-          } else {\n+         } else {\n@@ -221,1 +236,1 @@\n-            log_error(cds)(\"Not a valid %s (%s)\", new_aot_flags_used() ? \"AOT cache\" : \"archive\", SharedArchiveFile);\n+            log_error(cds)(\"Not a valid archive (%s)\", SharedArchiveFile);\n@@ -226,1 +241,1 @@\n-          _static_archive_path = const_cast<char *>(SharedArchiveFile);\n+          _input_static_archive_path = SharedArchiveFile;\n@@ -229,2 +244,2 @@\n-          _dynamic_archive_path = const_cast<char *>(SharedArchiveFile);\n-          _static_archive_path = base_archive_path; \/\/ has been c-heap allocated.\n+          _input_dynamic_archive_path = SharedArchiveFile;\n+          _input_static_archive_path = base_archive_path; \/\/ has been c-heap allocated.\n@@ -233,4 +248,4 @@\n-        extract_shared_archive_paths((const char*)SharedArchiveFile,\n-                                      &_static_archive_path, &_dynamic_archive_path);\n-        if (_static_archive_path == nullptr) {\n-          assert(_dynamic_archive_path == nullptr, \"must be\");\n+        extract_archive_paths(SharedArchiveFile,\n+                              &_input_static_archive_path, &_input_dynamic_archive_path);\n+        if (_input_static_archive_path == nullptr) {\n+          assert(_input_dynamic_archive_path == nullptr, \"must be\");\n@@ -241,1 +256,1 @@\n-      if (_dynamic_archive_path != nullptr) {\n+      if (_input_dynamic_archive_path != nullptr) {\n@@ -356,1 +371,1 @@\n-#define CHECK_ALIAS(f) check_flag_alias(FLAG_IS_DEFAULT(f), #f)\n+#define CHECK_NEW_FLAG(f) check_new_flag(FLAG_IS_DEFAULT(f), #f)\n@@ -358,2 +373,2 @@\n-void CDSConfig::check_flag_alias(bool alias_is_default, const char* alias_name) {\n-  if (old_cds_flags_used() && !alias_is_default) {\n+void CDSConfig::check_new_flag(bool new_flag_is_default, const char* new_flag_name) {\n+  if (old_cds_flags_used() && !new_flag_is_default) {\n@@ -363,1 +378,9 @@\n-                                          alias_name));\n+                                          new_flag_name));\n+  }\n+}\n+\n+#define CHECK_SINGLE_PATH(f) check_flag_single_path(#f, f)\n+\n+void CDSConfig::check_flag_single_path(const char* flag_name, const char* value) {\n+  if (value != nullptr && num_archive_paths(value) != 1) {\n+    vm_exit_during_initialization(err_msg(\"Option %s must specify a single file name\", flag_name));\n@@ -374,3 +397,7 @@\n-  CHECK_ALIAS(AOTCache);\n-  CHECK_ALIAS(AOTConfiguration);\n-  CHECK_ALIAS(AOTMode);\n+  \/\/ \"New\" AOT flags must not be mixed with \"classic\" flags such as -Xshare:dump\n+  CHECK_NEW_FLAG(AOTCache);\n+  CHECK_NEW_FLAG(AOTConfiguration);\n+  CHECK_NEW_FLAG(AOTMode);\n+\n+  CHECK_SINGLE_PATH(AOTCache);\n+  CHECK_SINGLE_PATH(AOTConfiguration);\n@@ -414,5 +441,0 @@\n-  if (!FLAG_IS_DEFAULT(AOTCache)) {\n-    assert(FLAG_IS_DEFAULT(SharedArchiveFile), \"already checked\");\n-    FLAG_SET_ERGO(SharedArchiveFile, AOTCache);\n-  }\n-\n@@ -433,4 +455,0 @@\n-  assert(FLAG_IS_DEFAULT(DumpLoadedClassList), \"already checked\");\n-  assert(FLAG_IS_DEFAULT(SharedArchiveFile), \"already checked\");\n-  FLAG_SET_ERGO(SharedArchiveFile, AOTConfiguration);\n-  FLAG_SET_ERGO(DumpLoadedClassList, nullptr);\n@@ -452,2 +470,0 @@\n-  assert(FLAG_IS_DEFAULT(SharedArchiveFile), \"already checked\");\n-\n@@ -455,1 +471,0 @@\n-  FLAG_SET_ERGO(SharedArchiveFile, AOTConfiguration);\n@@ -466,0 +481,20 @@\n+void CDSConfig::ergo_init_aot_paths() {\n+  assert(_cds_ergo_initialize_started, \"sanity\");\n+  if (is_dumping_static_archive()) {\n+    if (is_dumping_preimage_static_archive()) {\n+      _output_archive_path = AOTConfiguration;\n+    } else {\n+      assert(is_dumping_final_static_archive(), \"must be\");\n+      _input_static_archive_path = AOTConfiguration;\n+      _output_archive_path = AOTCache;\n+    }\n+  } else if (is_using_archive()) {\n+    if (FLAG_IS_DEFAULT(AOTCache)) {\n+      \/\/ Only -XX:AOTMode={auto,on} is specified\n+      _input_static_archive_path = default_archive_path();\n+    } else {\n+      _input_static_archive_path = AOTCache;\n+    }\n+  }\n+}\n+\n@@ -467,0 +502,2 @@\n+  assert(!_cds_ergo_initialize_started, \"This is called earlier than CDSConfig::ergo_initialize()\");\n+\n@@ -517,1 +554,1 @@\n-    enable_dumping_dynamic_archive();\n+    enable_dumping_dynamic_archive(ArchiveClassesAtExit);\n@@ -549,0 +586,28 @@\n+void CDSConfig::prepare_for_dumping() {\n+  assert(CDSConfig::is_dumping_archive(), \"sanity\");\n+\n+  if (is_dumping_dynamic_archive() && !is_using_archive()) {\n+    assert(!is_dumping_static_archive(), \"cannot be dumping both static and dynamic archives\");\n+\n+    \/\/ This could happen if SharedArchiveFile has failed to load:\n+    \/\/ - -Xshare:off was specified\n+    \/\/ - SharedArchiveFile points to an non-existent file.\n+    \/\/ - SharedArchiveFile points to an archive that has failed CRC check\n+    \/\/ - SharedArchiveFile is not specified and the VM doesn't have a compatible default archive\n+\n+#define __THEMSG \" is unsupported when base CDS archive is not loaded. Run with -Xlog:cds for more info.\"\n+    if (RecordDynamicDumpInfo) {\n+      log_error(cds)(\"-XX:+RecordDynamicDumpInfo%s\", __THEMSG);\n+      MetaspaceShared::unrecoverable_loading_error();\n+    } else {\n+      assert(ArchiveClassesAtExit != nullptr, \"sanity\");\n+      log_warning(cds)(\"-XX:ArchiveClassesAtExit\" __THEMSG);\n+    }\n+#undef __THEMSG\n+    disable_dumping_dynamic_archive();\n+    return;\n+  }\n+\n+  check_unsupported_dumping_module_options();\n+}\n+\n@@ -563,0 +628,8 @@\n+void CDSConfig::enable_dumping_dynamic_archive(const char* output_path) {\n+  _is_dumping_dynamic_archive = true;\n+  if (output_path != nullptr) {\n+    \/\/ Comment -- why can this be null?\n+    _output_archive_path = os::strdup_check_oom(output_path, mtArguments);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":131,"deletions":58,"binary":false,"changes":189,"status":"modified"},{"patch":"@@ -45,3 +45,4 @@\n-  static char* _default_archive_path;\n-  static char* _static_archive_path;\n-  static char* _dynamic_archive_path;\n+  const static char* _default_archive_path;\n+  const static char* _input_static_archive_path;\n+  const static char* _input_dynamic_archive_path;\n+  const static char* _output_archive_path;\n@@ -56,4 +57,5 @@\n-  static void extract_shared_archive_paths(const char* archive_path,\n-                                           char** base_archive_path,\n-                                           char** top_archive_path);\n-  static void init_shared_archive_paths();\n+  static void extract_archive_paths(const char* archive_path,\n+                                    const char** base_archive_path,\n+                                    const char** top_archive_path);\n+  static int num_archive_paths(const char* path_spec);\n+  static void check_flag_single_path(const char* flag_name, const char* value);\n@@ -61,1 +63,2 @@\n-  static void check_flag_alias(bool alias_is_default, const char* alias_name);\n+  \/\/ Checks before Arguments::apply_ergo()\n+  static void check_new_flag(bool new_flag_is_default, const char* new_flag_name);\n@@ -67,0 +70,5 @@\n+  static void check_unsupported_dumping_module_options();\n+\n+  \/\/ Called after Arguments::apply_ergo() has started\n+  static void ergo_init_classic_archive_paths();\n+  static void ergo_init_aot_paths();\n@@ -79,1 +87,1 @@\n-  static void initialize() NOT_CDS_RETURN;\n+  static void ergo_initialize() NOT_CDS_RETURN;\n@@ -85,1 +93,0 @@\n-  static void check_unsupported_dumping_module_options() NOT_CDS_RETURN;\n@@ -90,0 +97,1 @@\n+  static void prepare_for_dumping();\n@@ -95,0 +103,2 @@\n+\n+  \/\/ input archive(s)\n@@ -96,1 +106,0 @@\n-  static int num_archives(const char* archive_path)          NOT_CDS_RETURN_(0);\n@@ -128,1 +137,1 @@\n-  static void enable_dumping_dynamic_archive()               { CDS_ONLY(_is_dumping_dynamic_archive = true); }\n+  static void enable_dumping_dynamic_archive(const char* output_path) NOT_CDS_RETURN;\n@@ -150,6 +159,5 @@\n-  \/\/ Points to the classes.jsa in $JAVA_HOME\n-  static char* default_archive_path()                        NOT_CDS_RETURN_(nullptr);\n-  \/\/ The actual static archive  (if any) selected at runtime\n-  static const char* static_archive_path()                   { return CDS_ONLY(_static_archive_path) NOT_CDS(nullptr); }\n-  \/\/ The actual dynamic archive  (if any) selected at runtime\n-  static const char* dynamic_archive_path()                  { return CDS_ONLY(_dynamic_archive_path) NOT_CDS(nullptr); }\n+  \/\/ Points to the classes.jsa in $JAVA_HOME (could be input or output)\n+  static const char* default_archive_path()                  NOT_CDS_RETURN_(nullptr);\n+  static const char* input_static_archive_path()             { return CDS_ONLY(_input_static_archive_path) NOT_CDS(nullptr); }\n+  static const char* input_dynamic_archive_path()            { return CDS_ONLY(_input_dynamic_archive_path) NOT_CDS(nullptr); }\n+  static const char* output_archive_path()                   { return CDS_ONLY(_output_archive_path) NOT_CDS(nullptr); }\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.hpp","additions":26,"deletions":18,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -100,2 +100,0 @@\n-  DynamicArchiveBuilder() : ArchiveBuilder() { }\n-\n@@ -351,1 +349,1 @@\n-  dynamic_info->open_for_write();\n+  dynamic_info->open_as_output();\n@@ -479,21 +477,0 @@\n-void DynamicArchive::check_for_dynamic_dump() {\n-  if (CDSConfig::is_dumping_dynamic_archive() && !CDSConfig::is_using_archive()) {\n-    \/\/ This could happen if SharedArchiveFile has failed to load:\n-    \/\/ - -Xshare:off was specified\n-    \/\/ - SharedArchiveFile points to an non-existent file.\n-    \/\/ - SharedArchiveFile points to an archive that has failed CRC check\n-    \/\/ - SharedArchiveFile is not specified and the VM doesn't have a compatible default archive\n-\n-#define __THEMSG \" is unsupported when base CDS archive is not loaded. Run with -Xlog:cds for more info.\"\n-    if (RecordDynamicDumpInfo) {\n-      log_error(cds)(\"-XX:+RecordDynamicDumpInfo%s\", __THEMSG);\n-      MetaspaceShared::unrecoverable_loading_error();\n-    } else {\n-      assert(ArchiveClassesAtExit != nullptr, \"sanity\");\n-      log_warning(cds)(\"-XX:ArchiveClassesAtExit\" __THEMSG);\n-    }\n-#undef __THEMSG\n-    CDSConfig::disable_dumping_dynamic_archive();\n-  }\n-}\n-\n@@ -510,1 +487,1 @@\n-void DynamicArchive::dump_at_exit(JavaThread* current, const char* archive_name) {\n+void DynamicArchive::dump_at_exit(JavaThread* current) {\n@@ -515,0 +492,1 @@\n+  const char* archive_name = CDSConfig::output_archive_path();\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":3,"deletions":25,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -66,1 +66,0 @@\n-  static void check_for_dynamic_dump();\n@@ -68,1 +67,1 @@\n-  static void dump_at_exit(JavaThread* current, const char* archive_name);\n+  static void dump_at_exit(JavaThread* current);\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -176,1 +176,1 @@\n-    const char* current_base_archive_name = CDSConfig::static_archive_path();\n+    const char* current_base_archive_name = CDSConfig::input_static_archive_path();\n@@ -212,1 +212,1 @@\n-    copy_base_archive_name(CDSConfig::static_archive_path());\n+    copy_base_archive_name(CDSConfig::input_static_archive_path());\n@@ -566,1 +566,1 @@\n-                                                    char** base_archive_name) {\n+                                                    const char** base_archive_name) {\n@@ -622,1 +622,1 @@\n-        log_warning(cds)(\"Not a valid %s %s\", file_type, _full_path);\n+        log_warning(cds)(\"Not a valid %s (%s)\", file_type, _full_path);\n@@ -732,1 +732,1 @@\n-void FileMapInfo::open_for_write() {\n+void FileMapInfo::open_as_output() {\n@@ -1762,1 +1762,1 @@\n-bool FileMapInfo::initialize() {\n+bool FileMapInfo::open_as_input() {\n@@ -1777,1 +1777,1 @@\n-      log_info(cds)(\"Initialize static archive failed.\");\n+      log_info(cds)(\"Loading static archive failed.\");\n@@ -1780,1 +1780,1 @@\n-      log_info(cds)(\"Initialize dynamic archive failed.\");\n+      log_info(cds)(\"Loading dynamic archive failed.\");\n@@ -1782,2 +1782,1 @@\n-        CDSConfig::enable_dumping_dynamic_archive();\n-        ArchiveClassesAtExit = CDSConfig::dynamic_archive_path();\n+        CDSConfig::enable_dumping_dynamic_archive(_full_path);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -271,1 +271,1 @@\n-                                                char** base_archive_name);\n+                                                const char** base_archive_name);\n@@ -349,3 +349,2 @@\n-  bool  initialize() NOT_CDS_RETURN_(false);\n-  bool  open_for_read();\n-  void  open_for_write();\n+  bool  open_as_input() NOT_CDS_RETURN_(false);\n+  void  open_as_output();\n@@ -428,0 +427,1 @@\n+  bool  open_for_read();\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -681,1 +681,0 @@\n-  const char* static_archive;\n@@ -683,4 +682,1 @@\n-    static_archive = AOTCache;\n-    FileMapInfo::free_current_info();\n-  } else {\n-    static_archive = CDSConfig::static_archive_path();\n+    FileMapInfo::free_current_info(); \/\/ FIXME: should not free current info\n@@ -688,1 +684,2 @@\n-  assert(static_archive != nullptr, \"SharedArchiveFile not set?\");\n+  const char* static_archive = CDSConfig::output_archive_path();\n+  assert(static_archive != nullptr, \"sanity\");\n@@ -792,5 +789,0 @@\n-void MetaspaceShared::prepare_for_dumping() {\n-  assert(CDSConfig::is_dumping_archive(), \"sanity\");\n-  CDSConfig::check_unsupported_dumping_module_options();\n-}\n-\n@@ -1026,1 +1018,1 @@\n-  map_info->open_for_write();\n+  map_info->open_as_output();\n@@ -1217,1 +1209,1 @@\n-  const char* static_archive = CDSConfig::static_archive_path();\n+  const char* static_archive = CDSConfig::input_static_archive_path();\n@@ -1220,1 +1212,1 @@\n-  if (!mapinfo->initialize()) {\n+  if (!mapinfo->open_as_input()) {\n@@ -1231,1 +1223,1 @@\n-  const char* dynamic_archive = CDSConfig::dynamic_archive_path();\n+  const char* dynamic_archive = CDSConfig::input_dynamic_archive_path();\n@@ -1237,1 +1229,1 @@\n-  if (!mapinfo->initialize()) {\n+  if (!mapinfo->open_as_input()) {\n@@ -1820,1 +1812,1 @@\n-      tty->print_cr(\"\\n\\nBase archive name: %s\", CDSConfig::static_archive_path());\n+      tty->print_cr(\"\\n\\nBase archive name: %s\", CDSConfig::input_static_archive_path());\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -74,1 +74,0 @@\n-  static void prepare_for_dumping() NOT_CDS_RETURN;\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -900,1 +900,0 @@\n-  DynamicArchive::check_for_dynamic_dump();\n@@ -907,1 +906,1 @@\n-    MetaspaceShared::prepare_for_dumping();\n+    CDSConfig::prepare_for_dumping();\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3711,1 +3711,1 @@\n-  CDSConfig::initialize();\n+  CDSConfig::ergo_initialize();\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -429,1 +429,1 @@\n-  DynamicArchive::dump_at_exit(thread, ArchiveClassesAtExit);\n+  DynamicArchive::dump_at_exit(thread);\n@@ -433,1 +433,0 @@\n-\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -268,1 +268,1 @@\n-#define SHARED_ARCHIVE_PATH_SYM \"_ZN9CDSConfig20_static_archive_pathE\"\n+#define SHARED_ARCHIVE_PATH_SYM \"_ZN9CDSConfig26_input_static_archive_pathE\"\n@@ -276,1 +276,1 @@\n-#define SHARED_ARCHIVE_PATH_SYM \"__ZN9CDSConfig20_static_archive_pathE\"\n+#define SHARED_ARCHIVE_PATH_SYM \"__ZN9CDSConfig26_input_static_archive_pathE\"\n","filename":"src\/jdk.hotspot.agent\/share\/native\/libsaproc\/ps_core_common.c","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.cds\n+ * @requires vm.cds & vm.compMode != \"Xcomp\"\n@@ -35,0 +35,1 @@\n+import java.io.File;\n@@ -301,0 +302,54 @@\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Cannot use multiple paths in AOTConfiguration\");\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile + File.pathSeparator + \"dummy\",\n+            \"-cp\", \"noSuchJar.jar\");\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"Option AOTConfiguration must specify a single file name\");\n+        out.shouldHaveExitValue(1);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Cannot use multiple paths in AOTCache\");\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCache=\" + aotCacheFile + File.pathSeparator + \"dummy\",\n+            \"-cp\", \"noSuchJar.jar\");\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"Option AOTCache must specify a single file name\");\n+        out.shouldHaveExitValue(1);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Cannot use a dynamic CDS archive for -XX:AOTCache\");\n+        String staticArchive = \"static.jsa\";\n+        String dynamicArchive = \"dynamic.jsa\";\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-Xshare:dump\",\n+            \"-XX:SharedArchiveFile=\" + staticArchive);\n+        out = CDSTestUtils.executeAndLog(pb, \"static\");\n+        out.shouldHaveExitValue(0);\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:SharedArchiveFile=\" + staticArchive,\n+            \"-XX:ArchiveClassesAtExit=\" + dynamicArchive,\n+            \"--version\");\n+        out = CDSTestUtils.executeAndLog(pb, \"dynamic\");\n+        out.shouldHaveExitValue(0);\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-Xlog:cds\",\n+            \"-XX:AOTMode=on\",\n+            \"-XX:AOTCache=\" + dynamicArchive,\n+            \"--version\");\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"Unable to use AOT cache.\");\n+        out.shouldContain(\"Not a valid AOT cache (dynamic.jsa)\");\n+        out.shouldHaveExitValue(1);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/AOTFlags.java","additions":56,"deletions":1,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -340,1 +340,1 @@\n-                      .shouldContain(\"Initialize dynamic archive failed\")\n+                      .shouldContain(\"Loading dynamic archive failed\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/TestAutoCreateSharedArchive.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -115,1 +115,1 @@\n-                      .shouldContain(\"Initialize static archive failed\")\n+                      .shouldContain(\"Loading static archive failed\")\n@@ -135,1 +135,1 @@\n-                      .shouldContain(\"Initialize static archive failed\")\n+                      .shouldContain(\"Loading static archive failed\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/TestAutoCreateSharedArchiveNoDefaultArchive.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}