{"files":[{"patch":"@@ -32,1 +32,0 @@\n-#include <Windows.h>\n","filename":"src\/hotspot\/os\/windows\/safefetch_windows.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n-void* GuardedMemory::wrap_copy(const void* ptr, const size_t len,\n-                               const void* tag, const void* tag2) {\n+void* GuardedMemory::wrap_copy(const void* ptr, const size_t len, const void* tag) {\n@@ -33,1 +32,1 @@\n-    GuardedMemory guarded(outerp, len, tag, tag2);\n+    GuardedMemory guarded(outerp, len, tag);\n@@ -62,2 +61,2 @@\n-      \" tag=\" PTR_FORMAT \" tag2=\" PTR_FORMAT \" user_size=%zu user_data=\" PTR_FORMAT,\n-      p2i(this), p2i(_base_addr), p2i(get_tag()), p2i(get_tag2()), get_user_size(), p2i(get_user_ptr()));\n+      \" tag=\" PTR_FORMAT \" user_size=%zu user_data=\" PTR_FORMAT,\n+      p2i(this), p2i(_base_addr), p2i(get_tag()), get_user_size(), p2i(get_user_ptr()));\n","filename":"src\/hotspot\/share\/memory\/guardedMemory.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-#include \"runtime\/safefetch.hpp\"\n@@ -47,1 +46,0 @@\n- * |+sizeof(uintptr_t) | <tag2>               | Tag word       |\n@@ -54,1 +52,1 @@\n- *  - tag word and tag2 word are general purpose\n+ *  - tag word is general purpose\n@@ -119,5 +117,1 @@\n-        \/\/ We may not be able to dereference directly so use\n-        \/\/ SafeFetch. It doesn't matter if the value read happens\n-        \/\/ to be 0xFF as that is not what we expect anyway.\n-        u_char val = (u_char) SafeFetch32((int*)c, 0xFF);\n-        if (val != badResourceValue) {\n+        if (*c != badResourceValue) {\n@@ -146,1 +140,0 @@\n-    void* _tag2;\n@@ -154,4 +147,0 @@\n-    void set_tag2(const void* tag2) { _tag2 = (void*) tag2; }\n-    void* get_tag2() const { return _tag2; }\n-\n-\n@@ -176,1 +165,0 @@\n-   * @param tag2      optional second general purpose tag.\n@@ -178,3 +166,2 @@\n-  GuardedMemory(void* base_ptr, const size_t user_size,\n-                const void* tag = nullptr, const void* tag2 = nullptr) {\n-    wrap_with_guards(base_ptr, user_size, tag, tag2);\n+  GuardedMemory(void* base_ptr, const size_t user_size, const void* tag = nullptr) {\n+    wrap_with_guards(base_ptr, user_size, tag);\n@@ -205,1 +192,0 @@\n-   * @param tag2      optional second general purpose tag.\n@@ -209,2 +195,1 @@\n-  void* wrap_with_guards(void* base_ptr, size_t user_size,\n-                         const void* tag = nullptr, const void* tag2 = nullptr) {\n+  void* wrap_with_guards(void* base_ptr, size_t user_size, const void* tag = nullptr) {\n@@ -217,1 +202,0 @@\n-    set_tag2(tag2);\n@@ -249,14 +233,0 @@\n-  \/**\n-   * Set the second general purpose tag.\n-   *\n-   * @param tag general purpose tag.\n-   *\/\n-  void set_tag2(const void* tag) { get_head_guard()->set_tag2(tag); }\n-\n-  \/**\n-   * Return the second general purpose tag.\n-   *\n-   * @return the second general purpose tag, defaults to null.\n-   *\/\n-  void* get_tag2() const { return get_head_guard()->get_tag2(); }\n-\n@@ -335,1 +305,0 @@\n-   * @param tag2 optional general purpose tag (see GuardedMemory::get_tag2())\n@@ -339,2 +308,1 @@\n-  static void* wrap_copy(const void* p, const size_t len,\n-                         const void* tag = nullptr, const void* tag2 = nullptr);\n+  static void* wrap_copy(const void* p, const size_t len, const void* tag = nullptr);\n","filename":"src\/hotspot\/share\/memory\/guardedMemory.hpp","additions":7,"deletions":39,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -353,9 +353,0 @@\n-\/\/ Arbitrary (but well-known) tag for GetStringChars\n-const void* STRING_TAG = (void*)0x47114711;\n-\n-\/\/ Arbitrary (but well-known) tag for GetStringUTFChars\n-const void* STRING_UTF_TAG = (void*) 0x48124812;\n-\n-\/\/ Arbitrary (but well-known) tag for GetPrimitiveArrayCritical\n-const void* CRITICAL_TAG = (void*)0x49134913;\n-\n@@ -367,1 +358,1 @@\n-                                       void* orig_elements, jboolean is_critical = JNI_FALSE) {\n+    void* orig_elements) {\n@@ -373,1 +364,1 @@\n-    result = GuardedMemory::wrap_copy(orig_elements, len, orig_elements, is_critical ? CRITICAL_TAG : nullptr);\n+    result = GuardedMemory::wrap_copy(orig_elements, len, orig_elements);\n@@ -379,1 +370,1 @@\n-                                 void* obj, void* carray, size_t* rsz, jboolean is_critical) {\n+    void* obj, void* carray, size_t* rsz) {\n@@ -398,23 +389,0 @@\n-  if (orig_result == STRING_TAG || orig_result == STRING_UTF_TAG) {\n-    bool was_utf = orig_result == STRING_UTF_TAG;\n-    tty->print_cr(\"%s: called on something allocated by %s\",\n-                  fn_name, was_utf ? \"GetStringUTFChars\" : \"GetStringChars\");\n-    DEBUG_ONLY(guarded.print_on(tty);) \/\/ This may crash.\n-    NativeReportJNIFatalError(thr, err_msg(\"%s called on something allocated by %s\",\n-                                           fn_name, was_utf ? \"GetStringUTFChars\" : \"GetStringChars\"));\n-  }\n-\n-  if (is_critical && (guarded.get_tag2() != CRITICAL_TAG)) {\n-    tty->print_cr(\"%s: called on something not allocated by GetPrimitiveArrayCritical\", fn_name);\n-    DEBUG_ONLY(guarded.print_on(tty);) \/\/ This may crash.\n-    NativeReportJNIFatalError(thr, err_msg(\"%s called on something not allocated by GetPrimitiveArrayCritical\",\n-                                           fn_name));\n-  }\n-\n-  if (!is_critical && (guarded.get_tag2() == CRITICAL_TAG)) {\n-    tty->print_cr(\"%s: called on something allocated by GetPrimitiveArrayCritical\", fn_name);\n-    DEBUG_ONLY(guarded.print_on(tty);) \/\/ This may crash.\n-    NativeReportJNIFatalError(thr, err_msg(\"%s called on something allocated by GetPrimitiveArrayCritical\",\n-                                           fn_name));\n-  }\n-\n@@ -430,1 +398,1 @@\n-  void* orig_result = check_wrapped_array(thr, fn_name, obj, carray, &sz, is_critical);\n+  void* orig_result = check_wrapped_array(thr, fn_name, obj, carray, &sz);\n@@ -1465,0 +1433,3 @@\n+\/\/ Arbitrary (but well-known) tag\n+const void* STRING_TAG = (void*)0x47114711;\n+\n@@ -1567,0 +1538,3 @@\n+\/\/ Arbitrary (but well-known) tag - different than GetStringChars\n+const void* STRING_UTF_TAG = (void*) 0x48124812;\n+\n@@ -1888,1 +1862,1 @@\n-      result = check_jni_wrap_copy_array(thr, array, result, JNI_TRUE);\n+      result = check_jni_wrap_copy_array(thr, array, result);\n","filename":"src\/hotspot\/share\/prims\/jniCheck.cpp","additions":11,"deletions":37,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -1,129 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8357601\n- * @requires vm.flagless\n- * @library \/test\/lib\n- * @run main\/othervm\/native TestCharArrayReleasing 0 0\n- * @run main\/othervm\/native TestCharArrayReleasing 1 0\n- * @run main\/othervm\/native TestCharArrayReleasing 2 0\n- * @run main\/othervm\/native TestCharArrayReleasing 3 0\n- * @run main\/othervm\/native TestCharArrayReleasing 4 0\n- * @run main\/othervm\/native TestCharArrayReleasing 0 1\n- * @run main\/othervm\/native TestCharArrayReleasing 1 1\n- * @run main\/othervm\/native TestCharArrayReleasing 2 1\n- * @run main\/othervm\/native TestCharArrayReleasing 3 1\n- * @run main\/othervm\/native TestCharArrayReleasing 4 1\n- * @run main\/othervm\/native TestCharArrayReleasing 0 2\n- * @run main\/othervm\/native TestCharArrayReleasing 1 2\n- * @run main\/othervm\/native TestCharArrayReleasing 2 2\n- * @run main\/othervm\/native TestCharArrayReleasing 3 2\n- * @run main\/othervm\/native TestCharArrayReleasing 4 2\n- * @run main\/othervm\/native TestCharArrayReleasing 0 3\n- * @run main\/othervm\/native TestCharArrayReleasing 1 3\n- * @run main\/othervm\/native TestCharArrayReleasing 2 3\n- * @run main\/othervm\/native TestCharArrayReleasing 3 3\n- * @run main\/othervm\/native TestCharArrayReleasing 4 3\n- *\/\n-\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-\/\/ Test the behaviour of the JNI \"char\" releasing functions, under Xcheck:jni,\n-\/\/ when they are passed \"char\" arrays obtained from different sources:\n-\/\/ - source_mode indicates which array to use\n-\/\/   - 0: use a raw malloc'd array\n-\/\/   - 1: use an array from GetCharArrayElements\n-\/\/   - 2: use an array from GetStringChars\n-\/\/   - 3: use an array from GetStringUTFChars\n-\/\/   - 4: use an array from GetPrimitiveArrayCritical\n-\/\/ - release_mode indicates which releasing function to use\n-\/\/   - 0: ReleaseCharArrayElements\n-\/\/   - 1: ReleaseStringChars\n-\/\/   - 2: ReleaseStringUTFChars\n-\/\/   - 3: ReleasePrimitiveArrayCritical\n-\n-public class TestCharArrayReleasing {\n-\n-    static native void testIt(int srcMode, int releaseMode);\n-\n-    static class Driver {\n-\n-        static {\n-            System.loadLibrary(\"CharArrayReleasing\");\n-        }\n-\n-        public static void main(String[] args) {\n-            int srcMode = Integer.parseInt(args[0]);\n-            int relMode = Integer.parseInt(args[1]);\n-            testIt(srcMode, relMode);\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Throwable {\n-        int ABRT = Platform.isWindows() ? 1 : 134;\n-        int[][] errorCodes = new int[][] {\n-            { ABRT, 0, ABRT, ABRT, ABRT },\n-            { ABRT, ABRT, 0, ABRT, ABRT },\n-            { ABRT, ABRT, ABRT, 0, ABRT },\n-            { ABRT, ABRT, ABRT, ABRT, 0 },\n-        };\n-\n-        String rcae = \"ReleaseCharArrayElements called on something allocated by GetStringChars\";\n-        String rcaeUTF = \"ReleaseCharArrayElements called on something allocated by GetStringUTFChars\";\n-        String rcaeCrit = \"ReleaseCharArrayElements called on something allocated by GetPrimitiveArrayCritical\";\n-        String rcaeBounds = \"ReleaseCharArrayElements: release array failed bounds check\";\n-        String rsc = \"ReleaseStringChars called on something not allocated by GetStringChars\";\n-        String rscBounds = \"ReleaseStringChars: release chars failed bounds check\";\n-        String rsuc = \"ReleaseStringUTFChars called on something not allocated by GetStringUTFChars\";\n-        String rsucBounds = \"ReleaseStringUTFChars: release chars failed bounds check\";\n-        String rpac = \"ReleasePrimitiveArrayCritical called on something not allocated by GetPrimitiveArrayCritical\";\n-        String rpacBounds = \"ReleasePrimitiveArrayCritical: release array failed bounds check\";\n-        String rpacStr = \"ReleasePrimitiveArrayCritical called on something allocated by GetStringChars\";\n-        String rpacStrUTF = \"ReleasePrimitiveArrayCritical called on something allocated by GetStringUTFChars\";\n-\n-        String[][] errorMsgs = new String[][] {\n-            { rcaeBounds, \"\", rcae, rcaeUTF, rcaeCrit },\n-            { rscBounds, rsc, \"\", rsc, rsc },\n-            { rsucBounds, rsuc, rsuc, \"\", rsuc },\n-            { rpacBounds, rpac, rpacStr, rpacStrUTF, \"\" },\n-        };\n-\n-        int srcMode = Integer.parseInt(args[0]);\n-        int relMode = Integer.parseInt(args[1]);\n-\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-             \"-Djava.library.path=\" + System.getProperty(\"test.nativepath\"),\n-             \"--enable-native-access=ALL-UNNAMED\",\n-             \"-Xcheck:jni\",\n-             \"TestCharArrayReleasing$Driver\",\n-             args[0], args[1]);\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-        output.shouldHaveExitValue(errorCodes[relMode][srcMode]);\n-        output.shouldContain(errorMsgs[relMode][srcMode]);\n-    }\n-}\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/checked\/TestCharArrayReleasing.java","additions":0,"deletions":129,"binary":false,"changes":129,"status":"deleted"},{"patch":"@@ -1,126 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <string.h>\n-\n-#include \"jni.h\"\n-#include \"jni_util.h\"\n-\n-\/\/ Test the behaviour of the JNI \"char\" releasing functions, under Xcheck:jni,\n-\/\/ when they are passed \"char\" arrays obtained from different sources:\n-\/\/ - source_mode indicates which array to use\n-\/\/   - 0: use a raw malloc'd array\n-\/\/   - 1: use an array from GetCharArrayElements\n-\/\/   - 2: use an array from GetStringChars\n-\/\/   - 3: use an array from GetStringUTFChars\n-\/\/   - 4: use an array from GetPrimitiveArrayCritical\n-\/\/ - release_mode indicates which releasing function to use\n-\/\/   - 0: ReleaseCharArrayElements\n-\/\/   - 1: ReleaseStringChars\n-\/\/   - 2: ReleaseStringUTFChars\n-\/\/   - 3: ReleasePrimitiveArrayCritical\n-\/\/\n-\n-static char* source[] = {\n-  \"malloc\",\n-  \"GetCharArrayElements\",\n-  \"GetStringChars\",\n-  \"GetStringUTFChars\",\n-  \"GetPrimitiveArrayCritical\"\n-};\n-\n-static char* release_func[] = {\n-  \"ReleaseCharArrayElements\",\n-  \"ReleaseStringChars\",\n-  \"ReleaseStringUTFChars\",\n-  \"ReleasePrimitiveArrayCritical\"\n-};\n-\n-JNIEXPORT void JNICALL\n-Java_TestCharArrayReleasing_testIt(JNIEnv *env, jclass cls, jint source_mode,\n-                               jint release_mode) {\n-\n-  \/\/ First create some Java objects to be used as the sources for jchar[]\n-  \/\/ extraction.\n-  const int len = 10;\n-  jcharArray ca = (*env)->NewCharArray(env, len);\n-  jstring str = (*env)->NewStringUTF(env, \"A_String\");\n-\n-  jthrowable exc = (*env)->ExceptionOccurred(env);\n-  if (exc != NULL) {\n-    fprintf(stderr, \"ERROR: Unexpected exception during test set up:\\n\");\n-    (*env)->ExceptionDescribe(env);\n-    exit(2);\n-  }\n-\n-  fprintf(stdout, \"Testing release function %s with array from %s\\n\",\n-          release_func[release_mode], source[source_mode]);\n-  fflush(stdout);\n-\n-  jboolean is_copy = JNI_FALSE;\n-  jchar* to_release;\n-  switch(source_mode) {\n-  case 0: {\n-    to_release = malloc(10 * sizeof(jchar));\n-    break;\n-  }\n-  case 1: {\n-    to_release = (*env)->GetCharArrayElements(env, ca, &is_copy);\n-    break;\n-  }\n-  case 2: {\n-    to_release = (jchar*) (*env)->GetStringChars(env, str, &is_copy);\n-    break;\n-  }\n-  case 3: {\n-    to_release = (jchar*) (*env)->GetStringUTFChars(env, str, &is_copy);\n-    break;\n-  }\n-  case 4: {\n-    to_release = (jchar*) (*env)->GetPrimitiveArrayCritical(env, ca, &is_copy);\n-    break;\n-  }\n-  default: fprintf(stderr, \"Unexpected source_mode %d\\n\", source_mode);\n-    exit(1);\n-  }\n-\n-  switch (release_mode) {\n-  case 0:\n-    (*env)->ReleaseCharArrayElements(env, ca, to_release, 0);\n-    break;\n-  case 1:\n-    (*env)->ReleaseStringChars(env, str, to_release);\n-    break;\n-  case 2:\n-    (*env)->ReleaseStringUTFChars(env, str, (const char*)to_release);\n-    break;\n-  case 3:\n-    (*env)->ReleasePrimitiveArrayCritical(env, ca, to_release, 0);\n-    break;\n-  default: fprintf(stderr, \"Unexpected release_mode %d\\n\", source_mode);\n-    exit(1);\n-  }\n-\n-}\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/checked\/libCharArrayReleasing.c","additions":0,"deletions":126,"binary":false,"changes":126,"status":"deleted"}]}