{"files":[{"patch":"@@ -46,6 +46,3 @@\n-  ciFlags()                  { _flags = 0; _stable = false; _intialized_final_update = false; }\n-  ciFlags(AccessFlags flags, bool is_stable= false, bool is_initialized_final_update = false) {\n-    _flags = flags.as_int();\n-    _stable = is_stable;\n-    _intialized_final_update = is_initialized_final_update;\n-  }\n+  ciFlags() :_flags(0), _stable(false), _intialized_final_update(false) { }\n+  ciFlags(AccessFlags flags, bool is_stable = false, bool is_initialized_final_update = false) :\n+    _flags(flags.as_int()), _stable(is_stable), _intialized_final_update(is_initialized_final_update) { }\n","filename":"src\/hotspot\/share\/ci\/ciFlags.hpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1632,1 +1632,1 @@\n-      for(int i = 0; i < _temp_field_info->length(); i++) {\n+      for (int i = 0; i < _temp_field_info->length(); i++) {\n@@ -2012,1 +2012,1 @@\n-  \/\/ Setting the contended group also set the contended bit in field flags\n+    \/\/ Setting the contended group also sets the contended bit in field flags\n@@ -6023,2 +6023,6 @@\n-  _fieldinfo_stream = FieldInfoStream::create_FieldInfoStream(_temp_field_info, _java_fields_count, injected_fields_count, loader_data(), CHECK);\n-  _fields_status = MetadataFactory::new_array<FieldStatus>(_loader_data, _temp_field_info->length(), FieldStatus(0), CHECK);\n+  _fieldinfo_stream =\n+    FieldInfoStream::create_FieldInfoStream(_temp_field_info, _java_fields_count,\n+                                            injected_fields_count, loader_data(), CHECK);\n+  _fields_status =\n+    MetadataFactory::new_array<FieldStatus>(_loader_data, _temp_field_info->length(),\n+                                            FieldStatus(0), CHECK);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -554,2 +554,2 @@\n-    FieldInfo tfi = *it;\n-    if (tfi.access_flags().is_static()) {\n+    FieldInfo fieldinfo = *it;\n+    if (fieldinfo.access_flags().is_static()) {\n@@ -559,2 +559,2 @@\n-      if (tfi.field_flags().is_contended()) {\n-        int g = tfi.contended_group();\n+      if (fieldinfo.field_flags().is_contended()) {\n+        int g = fieldinfo.contended_group();\n@@ -572,1 +572,1 @@\n-    BasicType type = Signature::basic_type(tfi.signature(_constant_pool));\n+    BasicType type = Signature::basic_type(fieldinfo.signature(_constant_pool));\n","filename":"src\/hotspot\/share\/classfile\/fieldLayoutBuilder.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -873,1 +873,4 @@\n-      GrowableArray<FieldInfo>* fields = FieldInfoStream::create_FieldInfoArray(InstanceKlass::cast(k)->fieldinfo_stream(), &java_fields, &injected_fields);\n+      InstanceKlass* ik = InstanceKlass::cast(k);\n+      GrowableArray<FieldInfo>* fields =\n+        FieldInfoStream::create_FieldInfoArray(ik->fieldinfo_stream(),\n+                                               &java_fields, &injected_fields);\n@@ -880,1 +883,1 @@\n-      Array<u1>* old_stream = InstanceKlass::cast(k)->fieldinfo_stream();\n+      Array<u1>* old_stream = ik->fieldinfo_stream();\n@@ -883,1 +886,1 @@\n-      InstanceKlass::cast(k)->set_fieldinfo_stream(new_fis);\n+      ik->set_fieldinfo_stream(new_fis);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,1 +30,3 @@\n-  os->print_cr(\"index=%d name_index=%d name=%s signature_index=%d signature=%s offset=%d AccessFlags=%d FieldFlags=%d initval_index=%d gen_signature_index=%d, gen_signature=%s contended_group=%d\",\n+  os->print_cr(\"index=%d name_index=%d name=%s signature_index=%d signature=%s offset=%d \"\n+               \"AccessFlags=%d FieldFlags=%d \"\n+               \"initval_index=%d gen_signature_index=%d, gen_signature=%s contended_group=%d\",\n@@ -38,1 +40,2 @@\n-                generic_signature_index(), _field_flags.is_injected() ? lookup_symbol(generic_signature_index())->as_utf8() : cp->symbol_at(generic_signature_index())->as_utf8(),\n+                generic_signature_index(),\n+                _field_flags.is_injected() ? lookup_symbol(generic_signature_index())->as_utf8() : cp->symbol_at(generic_signature_index())->as_utf8(),\n@@ -120,1 +123,1 @@\n-  while(r.has_next()) {\n+  while (r.has_next()) {\n@@ -135,1 +138,1 @@\n-  while(r.has_next()) {\n+  while (r.has_next()) {\n@@ -140,1 +143,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -29,3 +29,0 @@\n-#include \"memory\/metadataFactory.hpp\"\n-#include \"oops\/constantPool.hpp\"\n-#include \"oops\/symbol.hpp\"\n@@ -33,0 +30,1 @@\n+#include \"utilities\/unsigned5.hpp\"\n@@ -165,14 +163,14 @@\n-  u4 index() const { return _index; }\n-  void set_index(u4 index) { _index = index; }\n-  u2 name_index() const { return _name_index; }\n-  void set_name_index(u2 index) { _name_index = index; }\n-  u2 signature_index() const { return _signature_index; }\n-  void set_signature_index(u2 index) { _signature_index = index; }\n-  u4 offset() const { return _offset; }\n-  void set_offset(u4 offset) { _offset = offset; }\n-  AccessFlags access_flags() const { return _access_flags; }\n-  FieldFlags field_flags() const { return _field_flags; }\n-  FieldInfo::FieldFlags* field_flags_addr() { return &_field_flags; }\n-  u2 initializer_index() const { return _initializer_index; }\n-  void set_initializer_index(u2 index) { _initializer_index = index; }\n-  u2 generic_signature_index() const { return _generic_signature_index; }\n+  u4 index() const                           { return _index; }\n+  void set_index(u4 index)                   { _index = index; }\n+  u2 name_index() const                      { return _name_index; }\n+  void set_name_index(u2 index)              { _name_index = index; }\n+  u2 signature_index() const                 { return _signature_index; }\n+  void set_signature_index(u2 index)         { _signature_index = index; }\n+  u4 offset() const                          { return _offset; }\n+  void set_offset(u4 offset)                 { _offset = offset; }\n+  AccessFlags access_flags() const           { return _access_flags; }\n+  FieldFlags field_flags() const             { return _field_flags; }\n+  FieldFlags* field_flags_addr()             { return &_field_flags; }\n+  u2 initializer_index() const               { return _initializer_index; }\n+  void set_initializer_index(u2 index)       { _initializer_index = index; }\n+  u2 generic_signature_index() const         { return _generic_signature_index; }\n@@ -180,1 +178,1 @@\n-  u2 contention_group() const { return _contention_group; }\n+  u2 contention_group() const                { return _contention_group; }\n@@ -200,7 +198,1 @@\n-  Symbol* name(ConstantPool* cp) const {\n-    int index = _name_index;\n-    if (_field_flags.is_injected()) {\n-      return lookup_symbol(index);\n-    }\n-    return cp->symbol_at(index);\n-  }\n+  inline Symbol* name(ConstantPool* cp) const;\n@@ -208,7 +200,1 @@\n-  Symbol* signature(ConstantPool* cp) const {\n-    int index = _signature_index;\n-    if (_field_flags.is_injected()) {\n-      return lookup_symbol(index);\n-    }\n-    return cp->symbol_at(index);\n-  }\n+  inline Symbol* signature(ConstantPool* cp) const;\n@@ -216,4 +202,1 @@\n-  Symbol* lookup_symbol(int symbol_index) const {\n-    assert(_field_flags.is_injected(), \"only injected fields\");\n-    return Symbol::vm_symbol_at(static_cast<vmSymbolID>(symbol_index));\n-  }\n+  inline Symbol* lookup_symbol(int symbol_index) const;\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.hpp","additions":19,"deletions":36,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -30,0 +30,25 @@\n+#include \"memory\/metadataFactory.hpp\"\n+#include \"oops\/constantPool.hpp\"\n+#include \"oops\/symbol.hpp\"\n+\n+inline Symbol* FieldInfo::name(ConstantPool* cp) const {\n+  int index = _name_index;\n+  if (_field_flags.is_injected()) {\n+    return lookup_symbol(index);\n+  }\n+  return cp->symbol_at(index);\n+}\n+\n+inline Symbol* FieldInfo::signature(ConstantPool* cp) const {\n+  int index = _signature_index;\n+  if (_field_flags.is_injected()) {\n+    return lookup_symbol(index);\n+  }\n+  return cp->symbol_at(index);\n+}\n+\n+inline Symbol* FieldInfo::lookup_symbol(int symbol_index) const {\n+  assert(_field_flags.is_injected(), \"only injected fields\");\n+  return Symbol::vm_symbol_at(static_cast<vmSymbolID>(symbol_index));\n+}\n+\n@@ -135,1 +160,1 @@\n-  } while(witness != old_flags);\n+  } while (witness != old_flags);\n@@ -155,1 +180,1 @@\n-inline void FieldStatus::update_initialized_final_update(bool z) {update_flag(_initialized_final_update, z); }\n+inline void FieldStatus::update_initialized_final_update(bool z) { update_flag(_initialized_final_update, z); }\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.inline.hpp","additions":27,"deletions":2,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"oops\/instanceKlass.inline.hpp\"\n+#include \"oops\/instanceKlass.hpp\"\n@@ -42,2 +42,2 @@\n-  const Array<u1>* _fieldinfo_stream;\n-  FieldInfoReader   _reader;\n+  const Array<u1>*    _fieldinfo_stream;\n+  FieldInfoReader     _reader;\n","filename":"src\/hotspot\/share\/oops\/fieldStreams.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"oops\/fieldInfo.inline.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"oops\/fieldInfo.hpp\"\n","filename":"src\/hotspot\/share\/oops\/fieldStreams.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,2 @@\n-#include \"oops\/fieldInfo.hpp\"\n+#include \"oops\/constantPool.hpp\"\n+#include \"oops\/fieldInfo.inline.hpp\"\n@@ -274,1 +275,1 @@\n-  Array<u1>* _fieldinfo_stream;\n+  Array<u1>*          _fieldinfo_stream;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3582,1 +3582,1 @@\n-    Array<u1>* old_stream = InstanceKlass::cast(scratch_class)->fieldinfo_stream();\n+    Array<u1>* old_stream = scratch_class->fieldinfo_stream();\n@@ -3585,1 +3585,1 @@\n-    InstanceKlass::cast(scratch_class)->set_fieldinfo_stream(new_fis);\n+    scratch_class->set_fieldinfo_stream(new_fis);\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"oops\/instanceKlass.inline.hpp\"\n@@ -71,0 +72,1 @@\n+int FieldStream::length() { return _klass->java_fields_count(); }\n","filename":"src\/hotspot\/share\/runtime\/reflectionUtils.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"oops\/instanceKlass.inline.hpp\"\n+#include \"oops\/instanceKlass.hpp\"\n@@ -123,1 +123,1 @@\n-  int length() { return _klass->java_fields_count(); }\n+  int length();\n","filename":"src\/hotspot\/share\/runtime\/reflectionUtils.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}