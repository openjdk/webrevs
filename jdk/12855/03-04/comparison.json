{"files":[{"patch":"@@ -1432,2 +1432,2 @@\n-    HotSpotJVMCI::FieldInfo::set_accessFlags(JVMCIENV, obj_h(), (jint)fieldinfo->access_flags().as_int());\n-    HotSpotJVMCI::FieldInfo::set_fieldFlags(JVMCIENV, obj_h(), (jint)fieldinfo->field_flags().as_uint());\n+    HotSpotJVMCI::FieldInfo::set_classfileFlags(JVMCIENV, obj_h(), (jint)fieldinfo->access_flags().as_int());\n+    HotSpotJVMCI::FieldInfo::set_internalFlags(JVMCIENV, obj_h(), (jint)fieldinfo->field_flags().as_uint());\n@@ -1439,1 +1439,1 @@\n-                                      JNIJVMCI::VMFlag::constructor(),\n+                                      JNIJVMCI::FieldInfo::constructor(),\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -149,1 +149,0 @@\n-extern JNIEXPORT jobjectArray c2v_getDeclaredFieldsInfo(JNIEnv* env, jobject, jobject, jlong);\n@@ -158,1 +157,0 @@\n-  friend jobjectArray c2v_getDeclaredFieldsInfo(JNIEnv* env, jobject, jobject, jlong);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,1 +77,0 @@\n-    int_field(HotSpotResolvedJavaFieldImpl, modifiers)                                                        \\\n@@ -83,2 +82,2 @@\n-    int_field(FieldInfo, accessFlags)                                                                         \\\n-    int_field(FieldInfo, fieldFlags)                                                                          \\\n+    int_field(FieldInfo, classfileFlags)                                                                      \\\n+    int_field(FieldInfo, internalFlags)                                                                       \\\n@@ -86,0 +85,1 @@\n+    jvmci_constructor(FieldInfo, \"(IIIIII)V\")                                                                 \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciJavaClasses.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -416,1 +416,0 @@\n-  declare_constant(FieldInfo::FieldFlags::_ff_generic)                    \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -91,9 +91,15 @@\n-    fieldInfoValues.nameIndex = crs.readInt(); \/\/ read name_index\n-    fieldInfoValues.signatureIndex = crs.readInt(); \/\/ read signature index\n-    fieldInfoValues.offset = crs.readInt(); \/\/ read offset\n-    fieldInfoValues.accessFlags = crs.readInt(); \/\/ read access flags\n-    fieldInfoValues.fieldFlags = crs.readInt();  \/\/ read field flags\n-    \/\/ Optional reads\n-    if (fieldIsInitialized(fieldInfoValues.fieldFlags)) fieldInfoValues.initialValueIndex = crs.readInt(); \/\/ read initial value index\n-    if (fieldIsGeneric(fieldInfoValues.fieldFlags))     fieldInfoValues.genericSignatureIndex = crs.readInt(); \/\/ read generic signature index\n-    if (fieldIsContended(fieldInfoValues.fieldFlags))   fieldInfoValues.contendedGroup = crs.readInt(); \/\/ read contended group\n+    fieldInfoValues.nameIndex = crs.readInt();                 \/\/ read name_index\n+    fieldInfoValues.signatureIndex = crs.readInt();            \/\/ read signature index\n+    fieldInfoValues.offset = crs.readInt();                    \/\/ read offset\n+    fieldInfoValues.accessFlags = crs.readInt();               \/\/ read access flags\n+    fieldInfoValues.fieldFlags = crs.readInt();                \/\/ read field flags\n+                                                               \/\/ Optional reads:\n+    if (fieldIsInitialized(fieldInfoValues.fieldFlags)) {\n+        fieldInfoValues.initialValueIndex = crs.readInt();     \/\/ read initial value index\n+    }\n+    if (fieldIsGeneric(fieldInfoValues.fieldFlags)) {\n+        fieldInfoValues.genericSignatureIndex = crs.readInt(); \/\/ read generic signature index\n+    }\n+    if (fieldIsContended(fieldInfoValues.fieldFlags)) {\n+        fieldInfoValues.contendedGroup = crs.readInt();        \/\/ read contended group\n+    }\n@@ -105,3 +111,3 @@\n-    int javafieldsCount = crs.readInt(); \/\/ read num_java_fields\n-    int VMFieldsCount = crs.readInt(); \/\/ read num_injected_fields;\n-    int numFields = javafieldsCount + VMFieldsCount;\n+    int numJavaFields = crs.readInt();     \/\/ read num_java_fields\n+    int numInjectedFields = crs.readInt(); \/\/ read num_injected_fields;\n+    int numFields = numJavaFields + numInjectedFields;\n@@ -136,1 +142,1 @@\n-  public short getNameIndex() { return (short)values.nameIndex; }\n+  public int getNameIndex() { return values.nameIndex; }\n@@ -172,1 +178,1 @@\n-  public short getSignatureIndex() { return (short)values.signatureIndex; }\n+  public int getSignatureIndex() { return values.signatureIndex; }\n@@ -174,1 +180,1 @@\n-  public short getGenericSignatureIndex() { return (short)values.genericSignatureIndex; }\n+  public int getGenericSignatureIndex() { return values.genericSignatureIndex; }\n@@ -177,1 +183,1 @@\n-  public short getInitialValueIndex()        { return (short)values.initialValueIndex; }\n+  public int getInitialValueIndex()        { return values.initialValueIndex; }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/Field.java","additions":22,"deletions":16,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-    fieldsCache = new HashMap<Address, Field[]>();\n+    fieldsCache = new WeakHashMap<Address, Field[]>();\n@@ -283,1 +283,1 @@\n-  public short getFieldNameIndex(int index) {\n+  public int getFieldNameIndex(int index) {\n@@ -285,1 +285,1 @@\n-    return (short)getField(index).getNameIndex();\n+    return getField(index).getNameIndex();\n@@ -301,1 +301,1 @@\n-  public short getFieldSignatureIndex(int index) {\n+  public int getFieldSignatureIndex(int index) {\n@@ -303,1 +303,1 @@\n-    return (short)getField(index).getGenericSignatureIndex();\n+    return getField(index).getGenericSignatureIndex();\n@@ -311,1 +311,1 @@\n-  public short getFieldGenericSignatureIndex(int index) {\n+  public int getFieldGenericSignatureIndex(int index) {\n@@ -319,1 +319,1 @@\n-  public short getFieldInitialValueIndex(int index) {\n+  public int getFieldInitialValueIndex(int index) {\n@@ -321,1 +321,1 @@\n-    return (short)getField(index).getInitialValueIndex();\n+    return getField(index).getInitialValueIndex();\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/InstanceKlass.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -380,1 +380,1 @@\n-            short nameIndex    = klass.getFieldNameIndex(index);\n+            int nameIndex    = klass.getFieldNameIndex(index);\n@@ -383,1 +383,1 @@\n-            short signatureIndex = klass.getFieldSignatureIndex(index);\n+            int signatureIndex = klass.getFieldSignatureIndex(index);\n@@ -392,1 +392,1 @@\n-            short initvalIndex = klass.getFieldInitialValueIndex(index);\n+            int initvalIndex = klass.getFieldInitialValueIndex(index);\n@@ -396,1 +396,1 @@\n-            short genSigIndex = klass.getFieldGenericSignatureIndex(index);\n+            int genSigIndex = klass.getFieldGenericSignatureIndex(index);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/tools\/jcore\/ClassWriter.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -464,3 +464,4 @@\n-     *     [ flags,  \/\/ fieldDescriptor::access_flags()\n-     *       offset, \/\/ fieldDescriptor::offset()\n-     *       index   \/\/ fieldDescriptor::index()\n+     *     [ aflags,  \/\/ fieldDescriptor::access_flags()\n+     *       offset,  \/\/ fieldDescriptor::offset()\n+     *       index,   \/\/ fieldDescriptor::index()\n+     *       fflags   \/\/ fieldDescriptor::field_flags()\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/CompilerToVM.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-    private final int modifiers;\n+    private final int classfileFlags;\n@@ -66,1 +66,1 @@\n-    private final int internalModifiers;\n+    private final int internalFlags;\n@@ -68,1 +68,1 @@\n-    HotSpotResolvedJavaFieldImpl(HotSpotResolvedObjectTypeImpl holder, JavaType type, int offset, int modifiers, int internalModifiers, int index) {\n+    HotSpotResolvedJavaFieldImpl(HotSpotResolvedObjectTypeImpl holder, JavaType type, int offset, int classfileFlags, int internalFlags, int index) {\n@@ -72,2 +72,2 @@\n-        this.modifiers = modifiers;\n-        this.internalModifiers = internalModifiers;\n+        this.classfileFlags = classfileFlags;\n+        this.internalFlags = internalFlags;\n@@ -100,6 +100,1 @@\n-        return modifiers & HotSpotModifiers.jvmFieldModifiers();\n-    }\n-\n-    @Override\n-    public int getInternalModifiers() {\n-        return internalModifiers;\n+        return classfileFlags & HotSpotModifiers.jvmFieldModifiers();\n@@ -110,1 +105,1 @@\n-        return (internalModifiers & (1 << config().jvmFieldFlagInternalShift)) != 0;\n+        return (internalFlags & (1 << config().jvmFieldFlagInternalShift)) != 0;\n@@ -179,1 +174,1 @@\n-        return (config().jvmAccSynthetic & modifiers) != 0;\n+        return (config().jvmAccSynthetic & classfileFlags) != 0;\n@@ -189,1 +184,1 @@\n-        return (1 << (config().jvmFieldFlagStableShift ) & internalModifiers) != 0;\n+        return (1 << (config().jvmFieldFlagStableShift ) & internalFlags) != 0;\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotResolvedJavaFieldImpl.java","additions":9,"deletions":14,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-     * Lazily initialized cache for FieldInfo\n+     * Lazily initialized cache for FieldInfo.\n@@ -584,2 +584,2 @@\n-    HotSpotResolvedJavaField createField(JavaType type, int offset, int rawFlags, int internFlags, int index) {\n-        return new HotSpotResolvedJavaFieldImpl(this, type, offset, rawFlags, internFlags, index);\n+    HotSpotResolvedJavaField createField(JavaType type, int offset, int classfileFlags, int internalFlags, int index) {\n+        return new HotSpotResolvedJavaFieldImpl(this, type, offset, classfileFlags, internalFlags, index);\n@@ -677,2 +677,2 @@\n-        private final int accessFlags;\n-        private final int fieldFlags;\n+        private final int classfileFlags;\n+        private final int internalFlags;\n@@ -687,2 +687,2 @@\n-         * @param accessFlags field's access flags (from the class file)\n-         * @param fieldFlags field's internal flags (from the VM)\n+         * @param classfileFlags field's access flags (from the class file)\n+         * @param internalFlags field's internal flags (from the VM)\n@@ -691,1 +691,1 @@\n-        FieldInfo(int nameIndex, int signatureIndex, int offset, int accessFlags, int fieldFlags, int initializerIndex) {\n+        FieldInfo(int nameIndex, int signatureIndex, int offset, int classfileFlags, int internalFlags, int initializerIndex) {\n@@ -695,2 +695,2 @@\n-            this.accessFlags = accessFlags;\n-            this.fieldFlags = fieldFlags;\n+            this.classfileFlags = classfileFlags;\n+            this.internalFlags = internalFlags;\n@@ -700,2 +700,2 @@\n-        private int getAccessFlags() {\n-            return accessFlags;\n+        private int getClassfileFlags() {\n+            return classfileFlags;\n@@ -704,2 +704,2 @@\n-        private int getFieldFlags() {\n-            return fieldFlags;\n+        private int getInternalFlags() {\n+            return internalFlags;\n@@ -760,1 +760,1 @@\n-            return (getFieldFlags() & (1 << config().jvmFieldFlagInternalShift)) != 0;\n+            return (getInternalFlags() & (1 << config().jvmFieldFlagInternalShift)) != 0;\n@@ -764,1 +764,1 @@\n-            return Modifier.isStatic(getAccessFlags());\n+            return Modifier.isStatic(getClassfileFlags());\n@@ -858,1 +858,1 @@\n-                HotSpotResolvedJavaField resolvedJavaField = createField(field.getType(this), offset, field.getAccessFlags(), field.getFieldFlags(), i);\n+                HotSpotResolvedJavaField resolvedJavaField = createField(field.getType(this), offset, field.getClassfileFlags(), field.getInternalFlags(), i);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotResolvedObjectTypeImpl.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -43,7 +43,0 @@\n-    \/**\n-     * {@inheritDoc}\n-     * <p>\n-     * Returns VM internal flags associated with this field\n-     *\/\n-    int getInternalModifiers();\n-\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/meta\/ResolvedJavaField.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,8 +25,0 @@\n-import static java.lang.reflect.Modifier.FINAL;\n-import static java.lang.reflect.Modifier.PRIVATE;\n-import static java.lang.reflect.Modifier.PROTECTED;\n-import static java.lang.reflect.Modifier.PUBLIC;\n-import static java.lang.reflect.Modifier.STATIC;\n-import static java.lang.reflect.Modifier.TRANSIENT;\n-import static java.lang.reflect.Modifier.VOLATILE;\n-\n@@ -41,0 +33,1 @@\n+import jdk.vm.ci.hotspot.HotSpotModifiers;\n@@ -42,1 +35,0 @@\n-import jdk.vm.ci.hotspot.HotSpotVMConfigAccess;\n@@ -66,0 +58,1 @@\n+    private static final Field internalFlagsField;\n@@ -69,1 +62,2 @@\n-        Field f = null;\n+        Field f1 = null;\n+        Field f2 = null;\n@@ -75,2 +69,4 @@\n-            f = fieldImpl.getDeclaredField(\"index\");\n-            f.setAccessible(true);\n+            f1 = fieldImpl.getDeclaredField(\"index\");\n+            f1.setAccessible(true);\n+            f2 = fieldImpl.getDeclaredField(\"internalFlags\");\n+            f2.setAccessible(true);\n@@ -82,13 +78,2 @@\n-        indexField = f;\n-    }\n-\n-    \/**\n-     * Same as {@code HotSpotModifiers.jvmFieldModifiers()} but works when using a JVMCI version\n-     * prior to the introduction of that method.\n-     *\/\n-    private int jvmFieldModifiers() {\n-        HotSpotJVMCIRuntime runtime = runtime();\n-        HotSpotVMConfigAccess access = new HotSpotVMConfigAccess(runtime.getConfigStore());\n-        int accEnum = access.getConstant(\"JVM_ACC_ENUM\", Integer.class, 0x4000);\n-        int accSynthetic = access.getConstant(\"JVM_ACC_SYNTHETIC\", Integer.class, 0x1000);\n-        return PUBLIC | PRIVATE | PROTECTED | STATIC | FINAL | VOLATILE | TRANSIENT | accEnum | accSynthetic;\n+        indexField = f1;\n+        internalFlagsField = f2;\n@@ -116,1 +101,1 @@\n-                    Assert.assertEquals(0, ~jvmFieldModifiers() & field.getModifiers());\n+                    Assert.assertEquals(0, ~HotSpotModifiers.jvmFieldModifiers() & field.getModifiers());\n@@ -123,1 +108,1 @@\n-     * Tests that {@code HotSpotResolvedObjectTypeImpl#createField(String, JavaType, long, int)}\n+     * Tests that {@code HotSpotResolvedObjectTypeImpl#createField(String, JavaType, int, int)}\n@@ -139,1 +124,2 @@\n-                    ResolvedJavaField actual = (ResolvedJavaField) createFieldMethod.invoke(type, expected.getType(), expected.getOffset(), expected.getModifiers(), expected.getInternalModifiers(), index);\n+                    int internalFlags = internalFlagsField.getInt(expected);\n+                    ResolvedJavaField actual = (ResolvedJavaField) createFieldMethod.invoke(type, expected.getType(), expected.getOffset(), expected.getModifiers(), internalFlags, index);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.hotspot.test\/src\/jdk\/vm\/ci\/hotspot\/test\/HotSpotResolvedJavaFieldTest.java","additions":14,"deletions":28,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -96,10 +96,0 @@\n-    @Test\n-    public void getInternalModifiersTest() {\n-        for (Map.Entry<Field, ResolvedJavaField> e : fields.entrySet()) {\n-            \/\/ Reflection currently doesn't export InternalModifiers, no way to test them for now\n-            \/\/ int expected = e.getKey().getInternalModifiers();\n-            int actual = e.getValue().getInternalModifiers();\n-            \/\/ assertEquals(expected, actual);\n-        }\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.runtime.test\/src\/jdk\/vm\/ci\/runtime\/test\/TestResolvedJavaField.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"}]}