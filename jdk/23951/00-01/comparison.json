{"files":[{"patch":"@@ -124,1 +124,4 @@\n-  \/\/ Allow resurrection of unreachable objects that are visited during concurrent class-unloading.\n+  \/\/ Allow runtime to see unreachable objects that are visited during concurrent class-unloading.\n+  \/\/ Note that this may also interfere with the DeadCounterClosure when visiting weak oop storage,\n+  \/\/ but it does not seem to be a problem in practice because the dead count callbacks do not care\n+  \/\/ about the precise number of dead objects (only that there are dead objects).\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.inline.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -820,10 +820,13 @@\n-  if (is_in_reserved(p)) {\n-    if (is_full_gc_move_in_progress()) {\n-      \/\/ Full GC move is running, we do not have a consistent region\n-      \/\/ information yet. But we know the pointer is in heap.\n-      return true;\n-    }\n-    \/\/ Now check if we point to a live section in active region.\n-    ShenandoahHeapRegion* r = heap_region_containing(p);\n-    return (r->is_active() && p < r->top());\n-  } else {\n+  if (!is_in_reserved(p)) {\n+    return false;\n+  }\n+\n+  if (is_full_gc_move_in_progress()) {\n+    \/\/ Full GC move is running, we do not have a consistent region\n+    \/\/ information yet. But we know the pointer is in heap.\n+    return true;\n+  }\n+\n+  \/\/ Now check if we point to a live section in active region.\n+  const ShenandoahHeapRegion* r = heap_region_containing(p);\n+  if (p >= r->top()) {\n@@ -832,0 +835,10 @@\n+\n+  if (r->is_active()) {\n+    return true;\n+  }\n+\n+  \/\/ The region is trash, but won't be recycled until after concurrent weak\n+  \/\/ roots. We also don't allow mutators to allocate from trash regions\n+  \/\/ during weak roots. Concurrent class unloading may access unmarked oops\n+  \/\/ in trash regions.\n+  return r->is_trash() && is_concurrent_weak_root_in_progress();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":23,"deletions":10,"binary":false,"changes":33,"status":"modified"}]}