{"files":[{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.security.CertUtils;\n+import sun.security.util.HexDumpEncoder;\n+\n+import java.io.FileInputStream;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.security.cert.X509Certificate;\n+import java.util.Arrays;\n+\n+\/*\n+ * @test\n+ * @bug 8349664\n+ * @summary HEX dump should always use ASCII or ISO_8859_1\n+ * @modules java.base\/sun.security.util\n+ * @library \/test\/lib\n+ *\/\n+public class HexDumpEncoderTests {\n+\n+    private final static String CERT_PATH = Path.of(System.getProperty(\"test.src\", \".\"))\n+            .resolve(\"HostnameChecker\")\n+            .resolve(\"cert5.crt\")\n+            .toString();\n+\n+    private static String[] getTestCommand(final String encoding) {\n+        return new String[]{\n+                \"--add-modules\", \"java.base\",\n+                \"--add-exports\", \"java.base\/sun.security.util=ALL-UNNAMED\",\n+                \"-Dfile.encoding=\" + encoding,\n+                HexDumpEncoderTests.HexDumpEncoderTest.class.getName(),\n+                CERT_PATH};\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        final var testCommandIso = getTestCommand(\"ISO-8859-1\");\n+\n+        final var resultIso = ProcessTools.executeTestJava(testCommandIso);\n+        resultIso.shouldHaveExitValue(0);\n+\n+        \/\/ This will take all available StandardCharsets and test them all comparing to the ISO_8859_1\n+        \/\/ Dome im parallel, as this is significantly faster\n+        Arrays.stream(StandardCharsets.class.getDeclaredFields())\n+                .parallel()\n+                .forEach(field -> {\n+                    if (java.lang.reflect.Modifier.isStatic(field.getModifiers())) {\n+                        try {\n+                            final var charset = (Charset) field.get(StandardCharsets.ISO_8859_1); \/\/ getting the charset to test\n+\n+                            final var testCommand = getTestCommand(charset.name());\n+\n+                            final var result = ProcessTools.executeTestJava(testCommand);\n+                            result.shouldHaveExitValue(0);\n+\n+                            \/\/ The outputs of the ISO encoding must be identical to the one tested\n+                            Asserts.assertEquals(resultIso.getStdout(),\n+                                    result.getStdout(),\n+                                    \"Encoding \" + charset.name());\n+                        } catch (Exception e) {\n+                            throw new RuntimeException(e);\n+                        }\n+                    }\n+                });\n+    }\n+\n+    public static class HexDumpEncoderTest {\n+\n+        \/**\n+         * This will test the encode and encode buffer functions at once,\n+         * as they are both representing the string in LATIN_1\n+         * <p>\n+         * The output is put as a system.out\n+         *\/\n+        public static void main(String[] args) throws Exception {\n+\n+            try (final FileInputStream fis = new FileInputStream(args[0])) {\n+                var cert = CertUtils.getCertFromStream(fis);\n+\n+                final var certEncodedWithEncodeBuffer = hexDumpEncoderEncodeBuffer(cert);\n+                final var certEncodedWithEncode = hexDumpEncoderEncode(cert);\n+                System.out.printf(\"\\nCert Encoded With Encode Buffer: %s\\n\", certEncodedWithEncodeBuffer);\n+                System.out.printf(\"\\nCert Encoded With Encode: %s\\n\", certEncodedWithEncode);\n+            }\n+        }\n+\n+        private static String hexDumpEncoderEncodeBuffer(final X509Certificate cert) {\n+\n+            final var encoder = new HexDumpEncoder();\n+            return encoder.encodeBuffer(cert.getSignature());\n+        }\n+\n+        private static String hexDumpEncoderEncode(final X509Certificate cert) {\n+\n+            final var encoder = new HexDumpEncoder();\n+            return encoder.encode(cert.getSignature());\n+        }\n+\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/util\/HexDumpEncoderTests.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"}]}