{"files":[{"patch":"@@ -1482,0 +1482,23 @@\n+  size_t max_for_compressed_oops = max_heap_for_compressed_oops();\n+  bool isExplicitlyDisabled = !FLAG_IS_DEFAULT(UseCompressedOops) && !UseCompressedOops;\n+\n+  double ratio = max_heap_size \/ (double) max_for_compressed_oops;\n+  if (!isExplicitlyDisabled && ratio > 1 && ratio < 1.02) {\n+    \/\/ User set max heap within 2% of the compressed oops limit. Assume they intended or at least\n+    \/\/ would benefit from a small reduction to allow enabling compressed oops. This is easily done by\n+    \/\/ accident, for example setting -Xmx32G is a tiny amount over the limit.\n+    \/\/ TODO: print human readable size\n+    warning(\"Heap size lowered from \" SIZE_FORMAT \"%s to \" SIZE_FORMAT \"%s to accommodate Compressed Oops\",\n+            byte_size_in_exact_unit(max_heap_size), exact_unit_for_byte_size (max_heap_size),\n+            byte_size_in_exact_unit(max_for_compressed_oops), exact_unit_for_byte_size (max_for_compressed_oops));\n+    max_heap_size = max_for_compressed_oops;\n+    if (!FLAG_IS_DEFAULT(MaxHeapSize) && MaxHeapSize > max_heap_size) {\n+      FLAG_SET_ERGO(MaxHeapSize, max_heap_size);\n+    }\n+    if (!FLAG_IS_DEFAULT(InitialHeapSize) && InitialHeapSize > max_heap_size) {\n+      FLAG_SET_ERGO(InitialHeapSize, max_heap_size);\n+    }\n+    if (!FLAG_IS_DEFAULT(MinHeapSize) && MinHeapSize > max_heap_size) {\n+      FLAG_SET_ERGO(MinHeapSize, max_heap_size);\n+    }\n+  }\n@@ -1483,1 +1506,1 @@\n-  if (max_heap_size <= max_heap_for_compressed_oops()) {\n+  if (max_heap_size <= max_for_compressed_oops) {\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -114,1 +114,3 @@\n-    checkUseCompressedOops(gcflags, maxHeapForCompressedOops + 1, false);\n+    checkUseCompressedOops(gcflags, maxHeapForCompressedOops + 1, true);\n+    checkUseCompressedOops(gcflags, (long) (maxHeapForCompressedOops * 1.02), true);\n+    checkUseCompressedOops(gcflags, (long) (maxHeapForCompressedOops * 1.02) + 1, false);\n@@ -119,1 +121,3 @@\n-    checkUseCompressedOops(join(gcflags, \"-XX:HeapBaseMinAddress=32G\"), maxHeapForCompressedOops + 1, false);\n+    checkUseCompressedOops(join(gcflags, \"-XX:HeapBaseMinAddress=32G\"), maxHeapForCompressedOops + 1, true);\n+    checkUseCompressedOops(join(gcflags, \"-XX:HeapBaseMinAddress=32G\"), (long) (maxHeapForCompressedOops * 1.02), true);\n+    checkUseCompressedOops(join(gcflags, \"-XX:HeapBaseMinAddress=32G\"), (long) (maxHeapForCompressedOops * 1.02) + 1, false);\n@@ -126,1 +130,3 @@\n-    checkUseCompressedOops(join(gcflags, \"-XX:ObjectAlignmentInBytes=16\"), maxHeapForCompressedOops + 1, false);\n+    checkUseCompressedOops(join(gcflags, \"-XX:ObjectAlignmentInBytes=16\"), maxHeapForCompressedOops + 1, true);\n+    checkUseCompressedOops(join(gcflags, \"-XX:ObjectAlignmentInBytes=16\"), (long) (maxHeapForCompressedOops * 1.02), true);\n+    checkUseCompressedOops(join(gcflags, \"-XX:ObjectAlignmentInBytes=16\"), (long) (maxHeapForCompressedOops * 1.02) + 1, false);\n@@ -134,1 +140,3 @@\n-    checkUseCompressedOops(join(gcflags, compressedClassSpaceSizeArg), maxHeapForCompressedOops + 1, false);\n+    checkUseCompressedOops(join(gcflags, compressedClassSpaceSizeArg), maxHeapForCompressedOops + 1, true);\n+    checkUseCompressedOops(join(gcflags, compressedClassSpaceSizeArg), (long) (maxHeapForCompressedOops * 1.02), true);\n+    checkUseCompressedOops(join(gcflags, compressedClassSpaceSizeArg), (long) (maxHeapForCompressedOops * 1.02) + 1, false);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestUseCompressedOopsErgoTools.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"}]}