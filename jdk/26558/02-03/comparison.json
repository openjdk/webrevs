{"files":[{"patch":"@@ -110,0 +110,1 @@\n+    t->jfr_thread_local()->set_written();\n@@ -118,1 +119,5 @@\n-    tc.do_thread(javathreads.next());\n+    JavaThread* const jt = javathreads.next();\n+    if (jt->jfr_thread_local()->should_write()) {\n+      tc.do_thread(jt);\n+      jt->jfr_thread_local()->set_written();\n+    }\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrType.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdEpoch.hpp\"\n@@ -78,0 +79,1 @@\n+  _generation(0),\n@@ -152,1 +154,4 @@\n-      JfrCheckpointManager::write_checkpoint(t);\n+      if (tl->should_write()) {\n+        JfrCheckpointManager::write_checkpoint(t);\n+        tl->set_written();\n+      }\n@@ -246,7 +251,13 @@\n-    JfrCheckpointManager::write_checkpoint(t);\n-  }\n-  if (t->is_Java_thread()) {\n-    JavaThread* const jt = JavaThread::cast(t);\n-    send_java_thread_end_event(jt, JfrThreadLocal::jvm_thread_id(jt));\n-    JfrCPUTimeThreadSampling::on_javathread_terminate(jt);\n-    JfrThreadCPULoadEvent::send_event_for_thread(jt);\n+    if (!t->is_Java_thread()) {\n+      JfrCheckpointManager::write_checkpoint(t);\n+    } else {\n+      JavaThread* const jt = JavaThread::cast(t);\n+      assert(jt->thread_state() == _thread_in_vm, \"invariant\");\n+      if (tl->should_write()) {\n+        JfrCheckpointManager::write_checkpoint(t);\n+        tl->set_written();\n+      }\n+      send_java_thread_end_event(jt, JfrThreadLocal::jvm_thread_id(jt));\n+      JfrCPUTimeThreadSampling::on_javathread_terminate(jt);\n+      JfrThreadCPULoadEvent::send_event_for_thread(jt);\n+    }\n@@ -442,0 +453,8 @@\n+bool JfrThreadLocal::should_write() const {\n+  return !JfrTraceIdEpoch::is_current_epoch_generation(Atomic::load(&_generation));\n+}\n+\n+void JfrThreadLocal::set_written() const {\n+  Atomic::store(&_generation, JfrTraceIdEpoch::epoch_generation());\n+}\n+\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.cpp","additions":27,"deletions":8,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -78,0 +78,1 @@\n+  mutable u2 _generation;\n@@ -351,0 +352,4 @@\n+  \/\/ Serialization state.\n+  bool should_write() const;\n+  void set_written() const;\n+\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}