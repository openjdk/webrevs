{"files":[{"patch":"@@ -109,1 +109,2 @@\n-    private static final Pattern TAG_PATTERN = Pattern.compile(\"(?s)(.+ )?(?<chapter>[1-9][0-9]*)(?<section>[0-9.]*)( .*)?$\");\n+    \/\/ Note: Matches special cases like @jvms 6.5.checkcast\n+    private static final Pattern TAG_PATTERN = Pattern.compile(\"(?s)(.+ )?(?<chapter>[1-9][0-9]*)(?<section>[0-9a-z_.]*)( .*)?$\");\n","filename":"make\/jdk\/src\/classes\/build\/tools\/taglet\/JSpec.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -105,1 +105,3 @@\n-         * Different types of constant values may share the same type of entry.\n+         * Different types of constant values may share the same type of entry\n+         * because they have the same {@linkplain TypeKind##computational-type\n+         * computational type}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AnnotationValue.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -265,1 +265,1 @@\n-        if (opcode.kind() != Opcode.Kind.BRANCH || opcode.primaryTypeKind() == TypeKind.VoidType) {\n+        if (opcode.kind() != Opcode.Kind.BRANCH || opcode.primaryTypeKind() == TypeKind.VOID) {\n@@ -315,1 +315,1 @@\n-        if (opcode.kind() != Opcode.Kind.BRANCH || opcode.primaryTypeKind() == TypeKind.VoidType) {\n+        if (opcode.kind() != Opcode.Kind.BRANCH || opcode.primaryTypeKind() == TypeKind.VOID) {\n@@ -553,1 +553,2 @@\n-     * @throws IllegalArgumentException for conversions of {@code VoidType} or {@code ReferenceType}\n+     * @throws IllegalArgumentException for conversions of {@link TypeKind#VOID void} or\n+     *         {@link TypeKind#REFERENCE reference}\n@@ -557,56 +558,47 @@\n-        return switch (fromType) {\n-            case IntType, ByteType, CharType, ShortType, BooleanType ->\n-                    switch (toType) {\n-                        case IntType -> this;\n-                        case LongType -> i2l();\n-                        case DoubleType -> i2d();\n-                        case FloatType -> i2f();\n-                        case ByteType -> i2b();\n-                        case CharType -> i2c();\n-                        case ShortType -> i2s();\n-                        case BooleanType -> iconst_1().iand();\n-                        case VoidType, ReferenceType ->\n-                            throw new IllegalArgumentException(String.format(\"convert %s -> %s\", fromType, toType));\n-                    };\n-            case LongType ->\n-                    switch (toType) {\n-                        case IntType -> l2i();\n-                        case LongType -> this;\n-                        case DoubleType -> l2d();\n-                        case FloatType -> l2f();\n-                        case ByteType -> l2i().i2b();\n-                        case CharType -> l2i().i2c();\n-                        case ShortType -> l2i().i2s();\n-                        case BooleanType -> l2i().iconst_1().iand();\n-                        case VoidType, ReferenceType ->\n-                            throw new IllegalArgumentException(String.format(\"convert %s -> %s\", fromType, toType));\n-                    };\n-            case DoubleType ->\n-                    switch (toType) {\n-                        case IntType -> d2i();\n-                        case LongType -> d2l();\n-                        case DoubleType -> this;\n-                        case FloatType -> d2f();\n-                        case ByteType -> d2i().i2b();\n-                        case CharType -> d2i().i2c();\n-                        case ShortType -> d2i().i2s();\n-                        case BooleanType -> d2i().iconst_1().iand();\n-                        case VoidType, ReferenceType ->\n-                            throw new IllegalArgumentException(String.format(\"convert %s -> %s\", fromType, toType));\n-                    };\n-            case FloatType ->\n-                    switch (toType) {\n-                        case IntType -> f2i();\n-                        case LongType -> f2l();\n-                        case DoubleType -> f2d();\n-                        case FloatType -> this;\n-                        case ByteType -> f2i().i2b();\n-                        case CharType -> f2i().i2c();\n-                        case ShortType -> f2i().i2s();\n-                        case BooleanType -> f2i().iconst_1().iand();\n-                        case VoidType, ReferenceType ->\n-                            throw new IllegalArgumentException(String.format(\"convert %s -> %s\", fromType, toType));\n-                    };\n-            case VoidType, ReferenceType ->\n-                throw new IllegalArgumentException(String.format(\"convert %s -> %s\", fromType, toType));\n-        };\n+        var computationalFrom = fromType.asLoadable();\n+        var computationalTo = toType.asLoadable();\n+        if (computationalFrom != computationalTo) {\n+            switch (computationalTo) {\n+                case INT -> {\n+                    switch (computationalFrom) {\n+                        case FLOAT -> f2i();\n+                        case LONG -> l2i();\n+                        case DOUBLE -> d2i();\n+                        default -> throw BytecodeHelpers.cannotConvertException(fromType, toType);\n+                    }\n+                }\n+                case FLOAT -> {\n+                    switch (computationalFrom) {\n+                        case INT -> i2f();\n+                        case LONG -> l2f();\n+                        case DOUBLE -> d2f();\n+                        default -> throw BytecodeHelpers.cannotConvertException(fromType, toType);\n+                    }\n+                }\n+                case LONG -> {\n+                    switch (computationalFrom) {\n+                        case INT -> i2l();\n+                        case FLOAT -> f2l();\n+                        case DOUBLE -> d2l();\n+                        default -> throw BytecodeHelpers.cannotConvertException(fromType, toType);\n+                    }\n+                }\n+                case DOUBLE -> {\n+                    switch (computationalFrom) {\n+                        case INT -> i2d();\n+                        case FLOAT -> f2d();\n+                        case LONG -> l2d();\n+                        default -> throw BytecodeHelpers.cannotConvertException(fromType, toType);\n+                    }\n+                }\n+            }\n+        }\n+        if (computationalTo == TypeKind.INT && toType != TypeKind.INT) {\n+            switch (toType) {\n+                case BOOLEAN -> iconst_1().iand();\n+                case BYTE -> i2b();\n+                case CHAR -> i2c();\n+                case SHORT -> i2s();\n+            }\n+        }\n+        return this;\n@@ -843,1 +835,1 @@\n-        return arrayLoad(TypeKind.ReferenceType);\n+        return arrayLoad(TypeKind.REFERENCE);\n@@ -851,1 +843,1 @@\n-        return arrayStore(TypeKind.ReferenceType);\n+        return arrayStore(TypeKind.REFERENCE);\n@@ -864,1 +856,1 @@\n-        return loadLocal(TypeKind.ReferenceType, slot);\n+        return loadLocal(TypeKind.REFERENCE, slot);\n@@ -891,1 +883,1 @@\n-        return return_(TypeKind.ReferenceType);\n+        return return_(TypeKind.REFERENCE);\n@@ -912,1 +904,1 @@\n-        return storeLocal(TypeKind.ReferenceType, slot);\n+        return storeLocal(TypeKind.REFERENCE, slot);\n@@ -928,1 +920,1 @@\n-        return arrayLoad(TypeKind.ByteType);\n+        return arrayLoad(TypeKind.BYTE);\n@@ -936,1 +928,1 @@\n-        return arrayStore(TypeKind.ByteType);\n+        return arrayStore(TypeKind.BYTE);\n@@ -953,1 +945,1 @@\n-        return arrayLoad(TypeKind.CharType);\n+        return arrayLoad(TypeKind.CHAR);\n@@ -961,1 +953,1 @@\n-        return arrayStore(TypeKind.CharType);\n+        return arrayStore(TypeKind.CHAR);\n@@ -1020,1 +1012,1 @@\n-        return arrayLoad(TypeKind.DoubleType);\n+        return arrayLoad(TypeKind.DOUBLE);\n@@ -1028,1 +1020,1 @@\n-        return arrayStore(TypeKind.DoubleType);\n+        return arrayStore(TypeKind.DOUBLE);\n@@ -1081,1 +1073,1 @@\n-        return loadLocal(TypeKind.DoubleType, slot);\n+        return loadLocal(TypeKind.DOUBLE, slot);\n@@ -1113,1 +1105,1 @@\n-        return return_(TypeKind.DoubleType);\n+        return return_(TypeKind.DOUBLE);\n@@ -1126,1 +1118,1 @@\n-        return storeLocal(TypeKind.DoubleType, slot);\n+        return storeLocal(TypeKind.DOUBLE, slot);\n@@ -1224,1 +1216,1 @@\n-        return arrayLoad(TypeKind.FloatType);\n+        return arrayLoad(TypeKind.FLOAT);\n@@ -1232,1 +1224,1 @@\n-        return arrayStore(TypeKind.FloatType);\n+        return arrayStore(TypeKind.FLOAT);\n@@ -1293,1 +1285,1 @@\n-        return loadLocal(TypeKind.FloatType, slot);\n+        return loadLocal(TypeKind.FLOAT, slot);\n@@ -1325,1 +1317,1 @@\n-        return return_(TypeKind.FloatType);\n+        return return_(TypeKind.FLOAT);\n@@ -1338,1 +1330,1 @@\n-        return storeLocal(TypeKind.FloatType, slot);\n+        return storeLocal(TypeKind.FLOAT, slot);\n@@ -1479,1 +1471,1 @@\n-        return arrayLoad(TypeKind.IntType);\n+        return arrayLoad(TypeKind.INT);\n@@ -1495,1 +1487,1 @@\n-        return arrayStore(TypeKind.IntType);\n+        return arrayStore(TypeKind.INT);\n@@ -1726,1 +1718,1 @@\n-        return loadLocal(TypeKind.IntType, slot);\n+        return loadLocal(TypeKind.INT, slot);\n@@ -1955,1 +1947,1 @@\n-        return return_(TypeKind.IntType);\n+        return return_(TypeKind.INT);\n@@ -1984,1 +1976,1 @@\n-        return storeLocal(TypeKind.IntType, slot);\n+        return storeLocal(TypeKind.INT, slot);\n@@ -2058,1 +2050,1 @@\n-        return arrayLoad(TypeKind.LongType);\n+        return arrayLoad(TypeKind.LONG);\n@@ -2074,1 +2066,1 @@\n-        return arrayStore(TypeKind.LongType);\n+        return arrayStore(TypeKind.LONG);\n@@ -2149,1 +2141,1 @@\n-        return loadLocal(TypeKind.LongType, slot);\n+        return loadLocal(TypeKind.LONG, slot);\n@@ -2189,1 +2181,1 @@\n-        return return_(TypeKind.LongType);\n+        return return_(TypeKind.LONG);\n@@ -2218,1 +2210,1 @@\n-        return storeLocal(TypeKind.LongType, slot);\n+        return storeLocal(TypeKind.LONG, slot);\n@@ -2388,1 +2380,1 @@\n-        return return_(TypeKind.VoidType);\n+        return return_(TypeKind.VOID);\n@@ -2396,1 +2388,1 @@\n-        return arrayLoad(TypeKind.ShortType);\n+        return arrayLoad(TypeKind.SHORT);\n@@ -2404,1 +2396,1 @@\n-        return arrayStore(TypeKind.ShortType);\n+        return arrayStore(TypeKind.SHORT);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CodeBuilder.java","additions":83,"deletions":91,"binary":false,"changes":174,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    ACONST_NULL(ClassFile.ACONST_NULL, 1, Kind.CONSTANT, TypeKind.ReferenceType, 0, ConstantDescs.NULL),\n+    ACONST_NULL(ClassFile.ACONST_NULL, 1, Kind.CONSTANT, TypeKind.REFERENCE, 0, ConstantDescs.NULL),\n@@ -51,1 +51,1 @@\n-    ICONST_M1(ClassFile.ICONST_M1, 1, Kind.CONSTANT, TypeKind.IntType, 0, -1),\n+    ICONST_M1(ClassFile.ICONST_M1, 1, Kind.CONSTANT, TypeKind.INT, 0, -1),\n@@ -54,1 +54,1 @@\n-    ICONST_0(ClassFile.ICONST_0, 1, Kind.CONSTANT, TypeKind.IntType, 0, 0),\n+    ICONST_0(ClassFile.ICONST_0, 1, Kind.CONSTANT, TypeKind.INT, 0, 0),\n@@ -57,1 +57,1 @@\n-    ICONST_1(ClassFile.ICONST_1, 1, Kind.CONSTANT, TypeKind.IntType, 0, 1),\n+    ICONST_1(ClassFile.ICONST_1, 1, Kind.CONSTANT, TypeKind.INT, 0, 1),\n@@ -60,1 +60,1 @@\n-    ICONST_2(ClassFile.ICONST_2, 1, Kind.CONSTANT, TypeKind.IntType, 0, 2),\n+    ICONST_2(ClassFile.ICONST_2, 1, Kind.CONSTANT, TypeKind.INT, 0, 2),\n@@ -63,1 +63,1 @@\n-    ICONST_3(ClassFile.ICONST_3, 1, Kind.CONSTANT, TypeKind.IntType, 0, 3),\n+    ICONST_3(ClassFile.ICONST_3, 1, Kind.CONSTANT, TypeKind.INT, 0, 3),\n@@ -66,1 +66,1 @@\n-    ICONST_4(ClassFile.ICONST_4, 1, Kind.CONSTANT, TypeKind.IntType, 0, 4),\n+    ICONST_4(ClassFile.ICONST_4, 1, Kind.CONSTANT, TypeKind.INT, 0, 4),\n@@ -69,1 +69,1 @@\n-    ICONST_5(ClassFile.ICONST_5, 1, Kind.CONSTANT, TypeKind.IntType, 0, 5),\n+    ICONST_5(ClassFile.ICONST_5, 1, Kind.CONSTANT, TypeKind.INT, 0, 5),\n@@ -72,1 +72,1 @@\n-    LCONST_0(ClassFile.LCONST_0, 1, Kind.CONSTANT, TypeKind.LongType, 0, 0L),\n+    LCONST_0(ClassFile.LCONST_0, 1, Kind.CONSTANT, TypeKind.LONG, 0, 0L),\n@@ -75,1 +75,1 @@\n-    LCONST_1(ClassFile.LCONST_1, 1, Kind.CONSTANT, TypeKind.LongType, 0, 1L),\n+    LCONST_1(ClassFile.LCONST_1, 1, Kind.CONSTANT, TypeKind.LONG, 0, 1L),\n@@ -78,1 +78,1 @@\n-    FCONST_0(ClassFile.FCONST_0, 1, Kind.CONSTANT, TypeKind.FloatType, 0, 0.0f),\n+    FCONST_0(ClassFile.FCONST_0, 1, Kind.CONSTANT, TypeKind.FLOAT, 0, 0.0f),\n@@ -81,1 +81,1 @@\n-    FCONST_1(ClassFile.FCONST_1, 1, Kind.CONSTANT, TypeKind.FloatType, 0, 1.0f),\n+    FCONST_1(ClassFile.FCONST_1, 1, Kind.CONSTANT, TypeKind.FLOAT, 0, 1.0f),\n@@ -84,1 +84,1 @@\n-    FCONST_2(ClassFile.FCONST_2, 1, Kind.CONSTANT, TypeKind.FloatType, 0, 2.0f),\n+    FCONST_2(ClassFile.FCONST_2, 1, Kind.CONSTANT, TypeKind.FLOAT, 0, 2.0f),\n@@ -87,1 +87,1 @@\n-    DCONST_0(ClassFile.DCONST_0, 1, Kind.CONSTANT, TypeKind.DoubleType, 0, 0.0d),\n+    DCONST_0(ClassFile.DCONST_0, 1, Kind.CONSTANT, TypeKind.DOUBLE, 0, 0.0d),\n@@ -90,1 +90,1 @@\n-    DCONST_1(ClassFile.DCONST_1, 1, Kind.CONSTANT, TypeKind.DoubleType, 0, 1.0d),\n+    DCONST_1(ClassFile.DCONST_1, 1, Kind.CONSTANT, TypeKind.DOUBLE, 0, 1.0d),\n@@ -93,1 +93,1 @@\n-    BIPUSH(ClassFile.BIPUSH, 2, Kind.CONSTANT, TypeKind.ByteType),\n+    BIPUSH(ClassFile.BIPUSH, 2, Kind.CONSTANT, TypeKind.BYTE),\n@@ -96,1 +96,1 @@\n-    SIPUSH(ClassFile.SIPUSH, 3, Kind.CONSTANT, TypeKind.ShortType),\n+    SIPUSH(ClassFile.SIPUSH, 3, Kind.CONSTANT, TypeKind.SHORT),\n@@ -108,1 +108,1 @@\n-    ILOAD(ClassFile.ILOAD, 2, Kind.LOAD, TypeKind.IntType, -1),\n+    ILOAD(ClassFile.ILOAD, 2, Kind.LOAD, TypeKind.INT, -1),\n@@ -111,1 +111,1 @@\n-    LLOAD(ClassFile.LLOAD, 2, Kind.LOAD, TypeKind.LongType, -1),\n+    LLOAD(ClassFile.LLOAD, 2, Kind.LOAD, TypeKind.LONG, -1),\n@@ -114,1 +114,1 @@\n-    FLOAD(ClassFile.FLOAD, 2, Kind.LOAD, TypeKind.FloatType, -1),\n+    FLOAD(ClassFile.FLOAD, 2, Kind.LOAD, TypeKind.FLOAT, -1),\n@@ -117,1 +117,1 @@\n-    DLOAD(ClassFile.DLOAD, 2, Kind.LOAD, TypeKind.DoubleType, -1),\n+    DLOAD(ClassFile.DLOAD, 2, Kind.LOAD, TypeKind.DOUBLE, -1),\n@@ -120,1 +120,1 @@\n-    ALOAD(ClassFile.ALOAD, 2, Kind.LOAD, TypeKind.ReferenceType, -1),\n+    ALOAD(ClassFile.ALOAD, 2, Kind.LOAD, TypeKind.REFERENCE, -1),\n@@ -123,1 +123,1 @@\n-    ILOAD_0(ClassFile.ILOAD_0, 1, Kind.LOAD, TypeKind.IntType, 0),\n+    ILOAD_0(ClassFile.ILOAD_0, 1, Kind.LOAD, TypeKind.INT, 0),\n@@ -126,1 +126,1 @@\n-    ILOAD_1(ClassFile.ILOAD_1, 1, Kind.LOAD, TypeKind.IntType, 1),\n+    ILOAD_1(ClassFile.ILOAD_1, 1, Kind.LOAD, TypeKind.INT, 1),\n@@ -129,1 +129,1 @@\n-    ILOAD_2(ClassFile.ILOAD_2, 1, Kind.LOAD, TypeKind.IntType, 2),\n+    ILOAD_2(ClassFile.ILOAD_2, 1, Kind.LOAD, TypeKind.INT, 2),\n@@ -132,1 +132,1 @@\n-    ILOAD_3(ClassFile.ILOAD_3, 1, Kind.LOAD, TypeKind.IntType, 3),\n+    ILOAD_3(ClassFile.ILOAD_3, 1, Kind.LOAD, TypeKind.INT, 3),\n@@ -135,1 +135,1 @@\n-    LLOAD_0(ClassFile.LLOAD_0, 1, Kind.LOAD, TypeKind.LongType, 0),\n+    LLOAD_0(ClassFile.LLOAD_0, 1, Kind.LOAD, TypeKind.LONG, 0),\n@@ -138,1 +138,1 @@\n-    LLOAD_1(ClassFile.LLOAD_1, 1, Kind.LOAD, TypeKind.LongType, 1),\n+    LLOAD_1(ClassFile.LLOAD_1, 1, Kind.LOAD, TypeKind.LONG, 1),\n@@ -141,1 +141,1 @@\n-    LLOAD_2(ClassFile.LLOAD_2, 1, Kind.LOAD, TypeKind.LongType, 2),\n+    LLOAD_2(ClassFile.LLOAD_2, 1, Kind.LOAD, TypeKind.LONG, 2),\n@@ -144,1 +144,1 @@\n-    LLOAD_3(ClassFile.LLOAD_3, 1, Kind.LOAD, TypeKind.LongType, 3),\n+    LLOAD_3(ClassFile.LLOAD_3, 1, Kind.LOAD, TypeKind.LONG, 3),\n@@ -147,1 +147,1 @@\n-    FLOAD_0(ClassFile.FLOAD_0, 1, Kind.LOAD, TypeKind.FloatType, 0),\n+    FLOAD_0(ClassFile.FLOAD_0, 1, Kind.LOAD, TypeKind.FLOAT, 0),\n@@ -150,1 +150,1 @@\n-    FLOAD_1(ClassFile.FLOAD_1, 1, Kind.LOAD, TypeKind.FloatType, 1),\n+    FLOAD_1(ClassFile.FLOAD_1, 1, Kind.LOAD, TypeKind.FLOAT, 1),\n@@ -153,1 +153,1 @@\n-    FLOAD_2(ClassFile.FLOAD_2, 1, Kind.LOAD, TypeKind.FloatType, 2),\n+    FLOAD_2(ClassFile.FLOAD_2, 1, Kind.LOAD, TypeKind.FLOAT, 2),\n@@ -156,1 +156,1 @@\n-    FLOAD_3(ClassFile.FLOAD_3, 1, Kind.LOAD, TypeKind.FloatType, 3),\n+    FLOAD_3(ClassFile.FLOAD_3, 1, Kind.LOAD, TypeKind.FLOAT, 3),\n@@ -159,1 +159,1 @@\n-    DLOAD_0(ClassFile.DLOAD_0, 1, Kind.LOAD, TypeKind.DoubleType, 0),\n+    DLOAD_0(ClassFile.DLOAD_0, 1, Kind.LOAD, TypeKind.DOUBLE, 0),\n@@ -162,1 +162,1 @@\n-    DLOAD_1(ClassFile.DLOAD_1, 1, Kind.LOAD, TypeKind.DoubleType, 1),\n+    DLOAD_1(ClassFile.DLOAD_1, 1, Kind.LOAD, TypeKind.DOUBLE, 1),\n@@ -165,1 +165,1 @@\n-    DLOAD_2(ClassFile.DLOAD_2, 1, Kind.LOAD, TypeKind.DoubleType, 2),\n+    DLOAD_2(ClassFile.DLOAD_2, 1, Kind.LOAD, TypeKind.DOUBLE, 2),\n@@ -168,1 +168,1 @@\n-    DLOAD_3(ClassFile.DLOAD_3, 1, Kind.LOAD, TypeKind.DoubleType, 3),\n+    DLOAD_3(ClassFile.DLOAD_3, 1, Kind.LOAD, TypeKind.DOUBLE, 3),\n@@ -171,1 +171,1 @@\n-    ALOAD_0(ClassFile.ALOAD_0, 1, Kind.LOAD, TypeKind.ReferenceType, 0),\n+    ALOAD_0(ClassFile.ALOAD_0, 1, Kind.LOAD, TypeKind.REFERENCE, 0),\n@@ -174,1 +174,1 @@\n-    ALOAD_1(ClassFile.ALOAD_1, 1, Kind.LOAD, TypeKind.ReferenceType, 1),\n+    ALOAD_1(ClassFile.ALOAD_1, 1, Kind.LOAD, TypeKind.REFERENCE, 1),\n@@ -177,1 +177,1 @@\n-    ALOAD_2(ClassFile.ALOAD_2, 1, Kind.LOAD, TypeKind.ReferenceType, 2),\n+    ALOAD_2(ClassFile.ALOAD_2, 1, Kind.LOAD, TypeKind.REFERENCE, 2),\n@@ -180,1 +180,1 @@\n-    ALOAD_3(ClassFile.ALOAD_3, 1, Kind.LOAD, TypeKind.ReferenceType, 3),\n+    ALOAD_3(ClassFile.ALOAD_3, 1, Kind.LOAD, TypeKind.REFERENCE, 3),\n@@ -183,1 +183,1 @@\n-    IALOAD(ClassFile.IALOAD, 1, Kind.ARRAY_LOAD, TypeKind.IntType),\n+    IALOAD(ClassFile.IALOAD, 1, Kind.ARRAY_LOAD, TypeKind.INT),\n@@ -186,1 +186,1 @@\n-    LALOAD(ClassFile.LALOAD, 1, Kind.ARRAY_LOAD, TypeKind.LongType),\n+    LALOAD(ClassFile.LALOAD, 1, Kind.ARRAY_LOAD, TypeKind.LONG),\n@@ -189,1 +189,1 @@\n-    FALOAD(ClassFile.FALOAD, 1, Kind.ARRAY_LOAD, TypeKind.FloatType),\n+    FALOAD(ClassFile.FALOAD, 1, Kind.ARRAY_LOAD, TypeKind.FLOAT),\n@@ -192,1 +192,1 @@\n-    DALOAD(ClassFile.DALOAD, 1, Kind.ARRAY_LOAD, TypeKind.DoubleType),\n+    DALOAD(ClassFile.DALOAD, 1, Kind.ARRAY_LOAD, TypeKind.DOUBLE),\n@@ -195,1 +195,1 @@\n-    AALOAD(ClassFile.AALOAD, 1, Kind.ARRAY_LOAD, TypeKind.ReferenceType),\n+    AALOAD(ClassFile.AALOAD, 1, Kind.ARRAY_LOAD, TypeKind.REFERENCE),\n@@ -197,2 +197,2 @@\n-    \/** Load byte from array *\/\n-    BALOAD(ClassFile.BALOAD, 1, Kind.ARRAY_LOAD, TypeKind.ByteType),\n+    \/** Load byte or boolean from array *\/\n+    BALOAD(ClassFile.BALOAD, 1, Kind.ARRAY_LOAD, TypeKind.BYTE),\n@@ -201,1 +201,1 @@\n-    CALOAD(ClassFile.CALOAD, 1, Kind.ARRAY_LOAD, TypeKind.CharType),\n+    CALOAD(ClassFile.CALOAD, 1, Kind.ARRAY_LOAD, TypeKind.CHAR),\n@@ -204,1 +204,1 @@\n-    SALOAD(ClassFile.SALOAD, 1, Kind.ARRAY_LOAD, TypeKind.ShortType),\n+    SALOAD(ClassFile.SALOAD, 1, Kind.ARRAY_LOAD, TypeKind.SHORT),\n@@ -207,1 +207,1 @@\n-    ISTORE(ClassFile.ISTORE, 2, Kind.STORE, TypeKind.IntType, -1),\n+    ISTORE(ClassFile.ISTORE, 2, Kind.STORE, TypeKind.INT, -1),\n@@ -210,1 +210,1 @@\n-    LSTORE(ClassFile.LSTORE, 2, Kind.STORE, TypeKind.LongType, -1),\n+    LSTORE(ClassFile.LSTORE, 2, Kind.STORE, TypeKind.LONG, -1),\n@@ -213,1 +213,1 @@\n-    FSTORE(ClassFile.FSTORE, 2, Kind.STORE, TypeKind.FloatType, -1),\n+    FSTORE(ClassFile.FSTORE, 2, Kind.STORE, TypeKind.FLOAT, -1),\n@@ -216,1 +216,1 @@\n-    DSTORE(ClassFile.DSTORE, 2, Kind.STORE, TypeKind.DoubleType, -1),\n+    DSTORE(ClassFile.DSTORE, 2, Kind.STORE, TypeKind.DOUBLE, -1),\n@@ -219,1 +219,1 @@\n-    ASTORE(ClassFile.ASTORE, 2, Kind.STORE, TypeKind.ReferenceType, -1),\n+    ASTORE(ClassFile.ASTORE, 2, Kind.STORE, TypeKind.REFERENCE, -1),\n@@ -222,1 +222,1 @@\n-    ISTORE_0(ClassFile.ISTORE_0, 1, Kind.STORE, TypeKind.IntType, 0),\n+    ISTORE_0(ClassFile.ISTORE_0, 1, Kind.STORE, TypeKind.INT, 0),\n@@ -225,1 +225,1 @@\n-    ISTORE_1(ClassFile.ISTORE_1, 1, Kind.STORE, TypeKind.IntType, 1),\n+    ISTORE_1(ClassFile.ISTORE_1, 1, Kind.STORE, TypeKind.INT, 1),\n@@ -228,1 +228,1 @@\n-    ISTORE_2(ClassFile.ISTORE_2, 1, Kind.STORE, TypeKind.IntType, 2),\n+    ISTORE_2(ClassFile.ISTORE_2, 1, Kind.STORE, TypeKind.INT, 2),\n@@ -231,1 +231,1 @@\n-    ISTORE_3(ClassFile.ISTORE_3, 1, Kind.STORE, TypeKind.IntType, 3),\n+    ISTORE_3(ClassFile.ISTORE_3, 1, Kind.STORE, TypeKind.INT, 3),\n@@ -234,1 +234,1 @@\n-    LSTORE_0(ClassFile.LSTORE_0, 1, Kind.STORE, TypeKind.LongType, 0),\n+    LSTORE_0(ClassFile.LSTORE_0, 1, Kind.STORE, TypeKind.LONG, 0),\n@@ -237,1 +237,1 @@\n-    LSTORE_1(ClassFile.LSTORE_1, 1, Kind.STORE, TypeKind.LongType, 1),\n+    LSTORE_1(ClassFile.LSTORE_1, 1, Kind.STORE, TypeKind.LONG, 1),\n@@ -240,1 +240,1 @@\n-    LSTORE_2(ClassFile.LSTORE_2, 1, Kind.STORE, TypeKind.LongType, 2),\n+    LSTORE_2(ClassFile.LSTORE_2, 1, Kind.STORE, TypeKind.LONG, 2),\n@@ -243,1 +243,1 @@\n-    LSTORE_3(ClassFile.LSTORE_3, 1, Kind.STORE, TypeKind.LongType, 3),\n+    LSTORE_3(ClassFile.LSTORE_3, 1, Kind.STORE, TypeKind.LONG, 3),\n@@ -246,1 +246,1 @@\n-    FSTORE_0(ClassFile.FSTORE_0, 1, Kind.STORE, TypeKind.FloatType, 0),\n+    FSTORE_0(ClassFile.FSTORE_0, 1, Kind.STORE, TypeKind.FLOAT, 0),\n@@ -249,1 +249,1 @@\n-    FSTORE_1(ClassFile.FSTORE_1, 1, Kind.STORE, TypeKind.FloatType, 1),\n+    FSTORE_1(ClassFile.FSTORE_1, 1, Kind.STORE, TypeKind.FLOAT, 1),\n@@ -252,1 +252,1 @@\n-    FSTORE_2(ClassFile.FSTORE_2, 1, Kind.STORE, TypeKind.FloatType, 2),\n+    FSTORE_2(ClassFile.FSTORE_2, 1, Kind.STORE, TypeKind.FLOAT, 2),\n@@ -255,1 +255,1 @@\n-    FSTORE_3(ClassFile.FSTORE_3, 1, Kind.STORE, TypeKind.FloatType, 3),\n+    FSTORE_3(ClassFile.FSTORE_3, 1, Kind.STORE, TypeKind.FLOAT, 3),\n@@ -258,1 +258,1 @@\n-    DSTORE_0(ClassFile.DSTORE_0, 1, Kind.STORE, TypeKind.DoubleType, 0),\n+    DSTORE_0(ClassFile.DSTORE_0, 1, Kind.STORE, TypeKind.DOUBLE, 0),\n@@ -261,1 +261,1 @@\n-    DSTORE_1(ClassFile.DSTORE_1, 1, Kind.STORE, TypeKind.DoubleType, 1),\n+    DSTORE_1(ClassFile.DSTORE_1, 1, Kind.STORE, TypeKind.DOUBLE, 1),\n@@ -264,1 +264,1 @@\n-    DSTORE_2(ClassFile.DSTORE_2, 1, Kind.STORE, TypeKind.DoubleType, 2),\n+    DSTORE_2(ClassFile.DSTORE_2, 1, Kind.STORE, TypeKind.DOUBLE, 2),\n@@ -267,1 +267,1 @@\n-    DSTORE_3(ClassFile.DSTORE_3, 1, Kind.STORE, TypeKind.DoubleType, 3),\n+    DSTORE_3(ClassFile.DSTORE_3, 1, Kind.STORE, TypeKind.DOUBLE, 3),\n@@ -270,1 +270,1 @@\n-    ASTORE_0(ClassFile.ASTORE_0, 1, Kind.STORE, TypeKind.ReferenceType, 0),\n+    ASTORE_0(ClassFile.ASTORE_0, 1, Kind.STORE, TypeKind.REFERENCE, 0),\n@@ -273,1 +273,1 @@\n-    ASTORE_1(ClassFile.ASTORE_1, 1, Kind.STORE, TypeKind.ReferenceType, 1),\n+    ASTORE_1(ClassFile.ASTORE_1, 1, Kind.STORE, TypeKind.REFERENCE, 1),\n@@ -276,1 +276,1 @@\n-    ASTORE_2(ClassFile.ASTORE_2, 1, Kind.STORE, TypeKind.ReferenceType, 2),\n+    ASTORE_2(ClassFile.ASTORE_2, 1, Kind.STORE, TypeKind.REFERENCE, 2),\n@@ -279,1 +279,1 @@\n-    ASTORE_3(ClassFile.ASTORE_3, 1, Kind.STORE, TypeKind.ReferenceType, 3),\n+    ASTORE_3(ClassFile.ASTORE_3, 1, Kind.STORE, TypeKind.REFERENCE, 3),\n@@ -282,1 +282,1 @@\n-    IASTORE(ClassFile.IASTORE, 1, Kind.ARRAY_STORE, TypeKind.IntType),\n+    IASTORE(ClassFile.IASTORE, 1, Kind.ARRAY_STORE, TypeKind.INT),\n@@ -285,1 +285,1 @@\n-    LASTORE(ClassFile.LASTORE, 1, Kind.ARRAY_STORE, TypeKind.LongType),\n+    LASTORE(ClassFile.LASTORE, 1, Kind.ARRAY_STORE, TypeKind.LONG),\n@@ -288,1 +288,1 @@\n-    FASTORE(ClassFile.FASTORE, 1, Kind.ARRAY_STORE, TypeKind.FloatType),\n+    FASTORE(ClassFile.FASTORE, 1, Kind.ARRAY_STORE, TypeKind.FLOAT),\n@@ -291,1 +291,1 @@\n-    DASTORE(ClassFile.DASTORE, 1, Kind.ARRAY_STORE, TypeKind.DoubleType),\n+    DASTORE(ClassFile.DASTORE, 1, Kind.ARRAY_STORE, TypeKind.DOUBLE),\n@@ -294,1 +294,1 @@\n-    AASTORE(ClassFile.AASTORE, 1, Kind.ARRAY_STORE, TypeKind.ReferenceType),\n+    AASTORE(ClassFile.AASTORE, 1, Kind.ARRAY_STORE, TypeKind.REFERENCE),\n@@ -296,2 +296,2 @@\n-    \/** Store into byte array *\/\n-    BASTORE(ClassFile.BASTORE, 1, Kind.ARRAY_STORE, TypeKind.ByteType),\n+    \/** Store into byte or boolean array *\/\n+    BASTORE(ClassFile.BASTORE, 1, Kind.ARRAY_STORE, TypeKind.BYTE),\n@@ -300,1 +300,1 @@\n-    CASTORE(ClassFile.CASTORE, 1, Kind.ARRAY_STORE, TypeKind.CharType),\n+    CASTORE(ClassFile.CASTORE, 1, Kind.ARRAY_STORE, TypeKind.CHAR),\n@@ -303,1 +303,1 @@\n-    SASTORE(ClassFile.SASTORE, 1, Kind.ARRAY_STORE, TypeKind.ShortType),\n+    SASTORE(ClassFile.SASTORE, 1, Kind.ARRAY_STORE, TypeKind.SHORT),\n@@ -333,1 +333,1 @@\n-    IADD(ClassFile.IADD, 1, Kind.OPERATOR, TypeKind.IntType),\n+    IADD(ClassFile.IADD, 1, Kind.OPERATOR, TypeKind.INT),\n@@ -336,1 +336,1 @@\n-    LADD(ClassFile.LADD, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LADD(ClassFile.LADD, 1, Kind.OPERATOR, TypeKind.LONG),\n@@ -339,1 +339,1 @@\n-    FADD(ClassFile.FADD, 1, Kind.OPERATOR, TypeKind.FloatType),\n+    FADD(ClassFile.FADD, 1, Kind.OPERATOR, TypeKind.FLOAT),\n@@ -342,1 +342,1 @@\n-    DADD(ClassFile.DADD, 1, Kind.OPERATOR, TypeKind.DoubleType),\n+    DADD(ClassFile.DADD, 1, Kind.OPERATOR, TypeKind.DOUBLE),\n@@ -345,1 +345,1 @@\n-    ISUB(ClassFile.ISUB, 1, Kind.OPERATOR, TypeKind.IntType),\n+    ISUB(ClassFile.ISUB, 1, Kind.OPERATOR, TypeKind.INT),\n@@ -348,1 +348,1 @@\n-    LSUB(ClassFile.LSUB, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LSUB(ClassFile.LSUB, 1, Kind.OPERATOR, TypeKind.LONG),\n@@ -351,1 +351,1 @@\n-    FSUB(ClassFile.FSUB, 1, Kind.OPERATOR, TypeKind.FloatType),\n+    FSUB(ClassFile.FSUB, 1, Kind.OPERATOR, TypeKind.FLOAT),\n@@ -354,1 +354,1 @@\n-    DSUB(ClassFile.DSUB, 1, Kind.OPERATOR, TypeKind.DoubleType),\n+    DSUB(ClassFile.DSUB, 1, Kind.OPERATOR, TypeKind.DOUBLE),\n@@ -357,1 +357,1 @@\n-    IMUL(ClassFile.IMUL, 1, Kind.OPERATOR, TypeKind.IntType),\n+    IMUL(ClassFile.IMUL, 1, Kind.OPERATOR, TypeKind.INT),\n@@ -360,1 +360,1 @@\n-    LMUL(ClassFile.LMUL, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LMUL(ClassFile.LMUL, 1, Kind.OPERATOR, TypeKind.LONG),\n@@ -363,1 +363,1 @@\n-    FMUL(ClassFile.FMUL, 1, Kind.OPERATOR, TypeKind.FloatType),\n+    FMUL(ClassFile.FMUL, 1, Kind.OPERATOR, TypeKind.FLOAT),\n@@ -366,1 +366,1 @@\n-    DMUL(ClassFile.DMUL, 1, Kind.OPERATOR, TypeKind.DoubleType),\n+    DMUL(ClassFile.DMUL, 1, Kind.OPERATOR, TypeKind.DOUBLE),\n@@ -369,1 +369,1 @@\n-    IDIV(ClassFile.IDIV, 1, Kind.OPERATOR, TypeKind.IntType),\n+    IDIV(ClassFile.IDIV, 1, Kind.OPERATOR, TypeKind.INT),\n@@ -372,1 +372,1 @@\n-    LDIV(ClassFile.LDIV, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LDIV(ClassFile.LDIV, 1, Kind.OPERATOR, TypeKind.LONG),\n@@ -375,1 +375,1 @@\n-    FDIV(ClassFile.FDIV, 1, Kind.OPERATOR, TypeKind.FloatType),\n+    FDIV(ClassFile.FDIV, 1, Kind.OPERATOR, TypeKind.FLOAT),\n@@ -378,1 +378,1 @@\n-    DDIV(ClassFile.DDIV, 1, Kind.OPERATOR, TypeKind.DoubleType),\n+    DDIV(ClassFile.DDIV, 1, Kind.OPERATOR, TypeKind.DOUBLE),\n@@ -381,1 +381,1 @@\n-    IREM(ClassFile.IREM, 1, Kind.OPERATOR, TypeKind.IntType),\n+    IREM(ClassFile.IREM, 1, Kind.OPERATOR, TypeKind.INT),\n@@ -384,1 +384,1 @@\n-    LREM(ClassFile.LREM, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LREM(ClassFile.LREM, 1, Kind.OPERATOR, TypeKind.LONG),\n@@ -387,1 +387,1 @@\n-    FREM(ClassFile.FREM, 1, Kind.OPERATOR, TypeKind.FloatType),\n+    FREM(ClassFile.FREM, 1, Kind.OPERATOR, TypeKind.FLOAT),\n@@ -390,1 +390,1 @@\n-    DREM(ClassFile.DREM, 1, Kind.OPERATOR, TypeKind.DoubleType),\n+    DREM(ClassFile.DREM, 1, Kind.OPERATOR, TypeKind.DOUBLE),\n@@ -393,1 +393,1 @@\n-    INEG(ClassFile.INEG, 1, Kind.OPERATOR, TypeKind.IntType),\n+    INEG(ClassFile.INEG, 1, Kind.OPERATOR, TypeKind.INT),\n@@ -396,1 +396,1 @@\n-    LNEG(ClassFile.LNEG, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LNEG(ClassFile.LNEG, 1, Kind.OPERATOR, TypeKind.LONG),\n@@ -399,1 +399,1 @@\n-    FNEG(ClassFile.FNEG, 1, Kind.OPERATOR, TypeKind.FloatType),\n+    FNEG(ClassFile.FNEG, 1, Kind.OPERATOR, TypeKind.FLOAT),\n@@ -402,1 +402,1 @@\n-    DNEG(ClassFile.DNEG, 1, Kind.OPERATOR, TypeKind.DoubleType),\n+    DNEG(ClassFile.DNEG, 1, Kind.OPERATOR, TypeKind.DOUBLE),\n@@ -405,1 +405,1 @@\n-    ISHL(ClassFile.ISHL, 1, Kind.OPERATOR, TypeKind.IntType),\n+    ISHL(ClassFile.ISHL, 1, Kind.OPERATOR, TypeKind.INT),\n@@ -408,1 +408,1 @@\n-    LSHL(ClassFile.LSHL, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LSHL(ClassFile.LSHL, 1, Kind.OPERATOR, TypeKind.LONG),\n@@ -411,1 +411,1 @@\n-    ISHR(ClassFile.ISHR, 1, Kind.OPERATOR, TypeKind.IntType),\n+    ISHR(ClassFile.ISHR, 1, Kind.OPERATOR, TypeKind.INT),\n@@ -414,1 +414,1 @@\n-    LSHR(ClassFile.LSHR, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LSHR(ClassFile.LSHR, 1, Kind.OPERATOR, TypeKind.LONG),\n@@ -417,1 +417,1 @@\n-    IUSHR(ClassFile.IUSHR, 1, Kind.OPERATOR, TypeKind.IntType),\n+    IUSHR(ClassFile.IUSHR, 1, Kind.OPERATOR, TypeKind.INT),\n@@ -420,1 +420,1 @@\n-    LUSHR(ClassFile.LUSHR, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LUSHR(ClassFile.LUSHR, 1, Kind.OPERATOR, TypeKind.LONG),\n@@ -423,1 +423,1 @@\n-    IAND(ClassFile.IAND, 1, Kind.OPERATOR, TypeKind.IntType),\n+    IAND(ClassFile.IAND, 1, Kind.OPERATOR, TypeKind.INT),\n@@ -426,1 +426,1 @@\n-    LAND(ClassFile.LAND, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LAND(ClassFile.LAND, 1, Kind.OPERATOR, TypeKind.LONG),\n@@ -429,1 +429,1 @@\n-    IOR(ClassFile.IOR, 1, Kind.OPERATOR, TypeKind.IntType),\n+    IOR(ClassFile.IOR, 1, Kind.OPERATOR, TypeKind.INT),\n@@ -432,1 +432,1 @@\n-    LOR(ClassFile.LOR, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LOR(ClassFile.LOR, 1, Kind.OPERATOR, TypeKind.LONG),\n@@ -435,1 +435,1 @@\n-    IXOR(ClassFile.IXOR, 1, Kind.OPERATOR, TypeKind.IntType),\n+    IXOR(ClassFile.IXOR, 1, Kind.OPERATOR, TypeKind.INT),\n@@ -438,1 +438,1 @@\n-    LXOR(ClassFile.LXOR, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LXOR(ClassFile.LXOR, 1, Kind.OPERATOR, TypeKind.LONG),\n@@ -441,1 +441,1 @@\n-    IINC(ClassFile.IINC, 3, Kind.INCREMENT, TypeKind.IntType, -1),\n+    IINC(ClassFile.IINC, 3, Kind.INCREMENT, TypeKind.INT, -1),\n@@ -444,1 +444,1 @@\n-    I2L(ClassFile.I2L, 1, Kind.CONVERT, TypeKind.IntType, TypeKind.LongType),\n+    I2L(ClassFile.I2L, 1, Kind.CONVERT, TypeKind.INT, TypeKind.LONG),\n@@ -447,1 +447,1 @@\n-    I2F(ClassFile.I2F, 1, Kind.CONVERT, TypeKind.IntType, TypeKind.FloatType),\n+    I2F(ClassFile.I2F, 1, Kind.CONVERT, TypeKind.INT, TypeKind.FLOAT),\n@@ -450,1 +450,1 @@\n-    I2D(ClassFile.I2D, 1, Kind.CONVERT, TypeKind.IntType, TypeKind.DoubleType),\n+    I2D(ClassFile.I2D, 1, Kind.CONVERT, TypeKind.INT, TypeKind.DOUBLE),\n@@ -453,1 +453,1 @@\n-    L2I(ClassFile.L2I, 1, Kind.CONVERT, TypeKind.LongType, TypeKind.IntType),\n+    L2I(ClassFile.L2I, 1, Kind.CONVERT, TypeKind.LONG, TypeKind.INT),\n@@ -456,1 +456,1 @@\n-    L2F(ClassFile.L2F, 1, Kind.CONVERT, TypeKind.LongType, TypeKind.FloatType),\n+    L2F(ClassFile.L2F, 1, Kind.CONVERT, TypeKind.LONG, TypeKind.FLOAT),\n@@ -459,1 +459,1 @@\n-    L2D(ClassFile.L2D, 1, Kind.CONVERT, TypeKind.LongType, TypeKind.DoubleType),\n+    L2D(ClassFile.L2D, 1, Kind.CONVERT, TypeKind.LONG, TypeKind.DOUBLE),\n@@ -462,1 +462,1 @@\n-    F2I(ClassFile.F2I, 1, Kind.CONVERT, TypeKind.FloatType, TypeKind.IntType),\n+    F2I(ClassFile.F2I, 1, Kind.CONVERT, TypeKind.FLOAT, TypeKind.INT),\n@@ -465,1 +465,1 @@\n-    F2L(ClassFile.F2L, 1, Kind.CONVERT, TypeKind.FloatType, TypeKind.LongType),\n+    F2L(ClassFile.F2L, 1, Kind.CONVERT, TypeKind.FLOAT, TypeKind.LONG),\n@@ -468,1 +468,1 @@\n-    F2D(ClassFile.F2D, 1, Kind.CONVERT, TypeKind.FloatType, TypeKind.DoubleType),\n+    F2D(ClassFile.F2D, 1, Kind.CONVERT, TypeKind.FLOAT, TypeKind.DOUBLE),\n@@ -471,1 +471,1 @@\n-    D2I(ClassFile.D2I, 1, Kind.CONVERT, TypeKind.DoubleType, TypeKind.IntType),\n+    D2I(ClassFile.D2I, 1, Kind.CONVERT, TypeKind.DOUBLE, TypeKind.INT),\n@@ -474,1 +474,1 @@\n-    D2L(ClassFile.D2L, 1, Kind.CONVERT, TypeKind.DoubleType, TypeKind.LongType),\n+    D2L(ClassFile.D2L, 1, Kind.CONVERT, TypeKind.DOUBLE, TypeKind.LONG),\n@@ -477,1 +477,1 @@\n-    D2F(ClassFile.D2F, 1, Kind.CONVERT, TypeKind.DoubleType, TypeKind.FloatType),\n+    D2F(ClassFile.D2F, 1, Kind.CONVERT, TypeKind.DOUBLE, TypeKind.FLOAT),\n@@ -480,1 +480,1 @@\n-    I2B(ClassFile.I2B, 1, Kind.CONVERT, TypeKind.IntType, TypeKind.ByteType),\n+    I2B(ClassFile.I2B, 1, Kind.CONVERT, TypeKind.INT, TypeKind.BYTE),\n@@ -483,1 +483,1 @@\n-    I2C(ClassFile.I2C, 1, Kind.CONVERT, TypeKind.IntType, TypeKind.CharType),\n+    I2C(ClassFile.I2C, 1, Kind.CONVERT, TypeKind.INT, TypeKind.CHAR),\n@@ -486,1 +486,1 @@\n-    I2S(ClassFile.I2S, 1, Kind.CONVERT, TypeKind.IntType, TypeKind.ShortType),\n+    I2S(ClassFile.I2S, 1, Kind.CONVERT, TypeKind.INT, TypeKind.SHORT),\n@@ -489,1 +489,1 @@\n-    LCMP(ClassFile.LCMP, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LCMP(ClassFile.LCMP, 1, Kind.OPERATOR, TypeKind.LONG),\n@@ -492,1 +492,1 @@\n-    FCMPL(ClassFile.FCMPL, 1, Kind.OPERATOR, TypeKind.FloatType),\n+    FCMPL(ClassFile.FCMPL, 1, Kind.OPERATOR, TypeKind.FLOAT),\n@@ -495,1 +495,1 @@\n-    FCMPG(ClassFile.FCMPG, 1, Kind.OPERATOR, TypeKind.FloatType),\n+    FCMPG(ClassFile.FCMPG, 1, Kind.OPERATOR, TypeKind.FLOAT),\n@@ -498,1 +498,1 @@\n-    DCMPL(ClassFile.DCMPL, 1, Kind.OPERATOR, TypeKind.DoubleType),\n+    DCMPL(ClassFile.DCMPL, 1, Kind.OPERATOR, TypeKind.DOUBLE),\n@@ -501,1 +501,1 @@\n-    DCMPG(ClassFile.DCMPG, 1, Kind.OPERATOR, TypeKind.DoubleType),\n+    DCMPG(ClassFile.DCMPG, 1, Kind.OPERATOR, TypeKind.DOUBLE),\n@@ -504,1 +504,1 @@\n-    IFEQ(ClassFile.IFEQ, 3, Kind.BRANCH, TypeKind.IntType),\n+    IFEQ(ClassFile.IFEQ, 3, Kind.BRANCH, TypeKind.INT),\n@@ -507,1 +507,1 @@\n-    IFNE(ClassFile.IFNE, 3, Kind.BRANCH, TypeKind.IntType),\n+    IFNE(ClassFile.IFNE, 3, Kind.BRANCH, TypeKind.INT),\n@@ -510,1 +510,1 @@\n-    IFLT(ClassFile.IFLT, 3, Kind.BRANCH, TypeKind.IntType),\n+    IFLT(ClassFile.IFLT, 3, Kind.BRANCH, TypeKind.INT),\n@@ -513,1 +513,1 @@\n-    IFGE(ClassFile.IFGE, 3, Kind.BRANCH, TypeKind.IntType),\n+    IFGE(ClassFile.IFGE, 3, Kind.BRANCH, TypeKind.INT),\n@@ -516,1 +516,1 @@\n-    IFGT(ClassFile.IFGT, 3, Kind.BRANCH, TypeKind.IntType),\n+    IFGT(ClassFile.IFGT, 3, Kind.BRANCH, TypeKind.INT),\n@@ -519,1 +519,1 @@\n-    IFLE(ClassFile.IFLE, 3, Kind.BRANCH, TypeKind.IntType),\n+    IFLE(ClassFile.IFLE, 3, Kind.BRANCH, TypeKind.INT),\n@@ -522,1 +522,1 @@\n-    IF_ICMPEQ(ClassFile.IF_ICMPEQ, 3, Kind.BRANCH, TypeKind.IntType),\n+    IF_ICMPEQ(ClassFile.IF_ICMPEQ, 3, Kind.BRANCH, TypeKind.INT),\n@@ -525,1 +525,1 @@\n-    IF_ICMPNE(ClassFile.IF_ICMPNE, 3, Kind.BRANCH, TypeKind.IntType),\n+    IF_ICMPNE(ClassFile.IF_ICMPNE, 3, Kind.BRANCH, TypeKind.INT),\n@@ -528,1 +528,1 @@\n-    IF_ICMPLT(ClassFile.IF_ICMPLT, 3, Kind.BRANCH, TypeKind.IntType),\n+    IF_ICMPLT(ClassFile.IF_ICMPLT, 3, Kind.BRANCH, TypeKind.INT),\n@@ -531,1 +531,1 @@\n-    IF_ICMPGE(ClassFile.IF_ICMPGE, 3, Kind.BRANCH, TypeKind.IntType),\n+    IF_ICMPGE(ClassFile.IF_ICMPGE, 3, Kind.BRANCH, TypeKind.INT),\n@@ -534,1 +534,1 @@\n-    IF_ICMPGT(ClassFile.IF_ICMPGT, 3, Kind.BRANCH, TypeKind.IntType),\n+    IF_ICMPGT(ClassFile.IF_ICMPGT, 3, Kind.BRANCH, TypeKind.INT),\n@@ -537,1 +537,1 @@\n-    IF_ICMPLE(ClassFile.IF_ICMPLE, 3, Kind.BRANCH, TypeKind.IntType),\n+    IF_ICMPLE(ClassFile.IF_ICMPLE, 3, Kind.BRANCH, TypeKind.INT),\n@@ -540,1 +540,1 @@\n-    IF_ACMPEQ(ClassFile.IF_ACMPEQ, 3, Kind.BRANCH, TypeKind.ReferenceType),\n+    IF_ACMPEQ(ClassFile.IF_ACMPEQ, 3, Kind.BRANCH, TypeKind.REFERENCE),\n@@ -543,1 +543,1 @@\n-    IF_ACMPNE(ClassFile.IF_ACMPNE, 3, Kind.BRANCH, TypeKind.ReferenceType),\n+    IF_ACMPNE(ClassFile.IF_ACMPNE, 3, Kind.BRANCH, TypeKind.REFERENCE),\n@@ -546,1 +546,1 @@\n-    GOTO(ClassFile.GOTO, 3, Kind.BRANCH, TypeKind.VoidType),\n+    GOTO(ClassFile.GOTO, 3, Kind.BRANCH, TypeKind.VOID),\n@@ -567,1 +567,1 @@\n-    IRETURN(ClassFile.IRETURN, 1, Kind.RETURN, TypeKind.IntType),\n+    IRETURN(ClassFile.IRETURN, 1, Kind.RETURN, TypeKind.INT),\n@@ -570,1 +570,1 @@\n-    LRETURN(ClassFile.LRETURN, 1, Kind.RETURN, TypeKind.LongType),\n+    LRETURN(ClassFile.LRETURN, 1, Kind.RETURN, TypeKind.LONG),\n@@ -573,1 +573,1 @@\n-    FRETURN(ClassFile.FRETURN, 1, Kind.RETURN, TypeKind.FloatType),\n+    FRETURN(ClassFile.FRETURN, 1, Kind.RETURN, TypeKind.FLOAT),\n@@ -576,1 +576,1 @@\n-    DRETURN(ClassFile.DRETURN, 1, Kind.RETURN, TypeKind.DoubleType),\n+    DRETURN(ClassFile.DRETURN, 1, Kind.RETURN, TypeKind.DOUBLE),\n@@ -579,1 +579,1 @@\n-    ARETURN(ClassFile.ARETURN, 1, Kind.RETURN, TypeKind.ReferenceType),\n+    ARETURN(ClassFile.ARETURN, 1, Kind.RETURN, TypeKind.REFERENCE),\n@@ -582,1 +582,1 @@\n-    RETURN(ClassFile.RETURN, 1, Kind.RETURN, TypeKind.VoidType),\n+    RETURN(ClassFile.RETURN, 1, Kind.RETURN, TypeKind.VOID),\n@@ -624,1 +624,1 @@\n-    ARRAYLENGTH(ClassFile.ARRAYLENGTH, 1, Kind.OPERATOR, TypeKind.IntType),\n+    ARRAYLENGTH(ClassFile.ARRAYLENGTH, 1, Kind.OPERATOR, TypeKind.INT),\n@@ -645,1 +645,1 @@\n-    IFNULL(ClassFile.IFNULL, 3, Kind.BRANCH, TypeKind.ReferenceType),\n+    IFNULL(ClassFile.IFNULL, 3, Kind.BRANCH, TypeKind.REFERENCE),\n@@ -648,1 +648,1 @@\n-    IFNONNULL(ClassFile.IFNONNULL, 3, Kind.BRANCH, TypeKind.ReferenceType),\n+    IFNONNULL(ClassFile.IFNONNULL, 3, Kind.BRANCH, TypeKind.REFERENCE),\n@@ -651,1 +651,1 @@\n-    GOTO_W(ClassFile.GOTO_W, 5, Kind.BRANCH, TypeKind.VoidType),\n+    GOTO_W(ClassFile.GOTO_W, 5, Kind.BRANCH, TypeKind.VOID),\n@@ -660,1 +660,1 @@\n-    ILOAD_W((ClassFile.WIDE << 8) | ClassFile.ILOAD, 4, Kind.LOAD, TypeKind.IntType, -1),\n+    ILOAD_W((ClassFile.WIDE << 8) | ClassFile.ILOAD, 4, Kind.LOAD, TypeKind.INT, -1),\n@@ -663,1 +663,1 @@\n-    LLOAD_W((ClassFile.WIDE << 8) | ClassFile.LLOAD, 4, Kind.LOAD, TypeKind.LongType, -1),\n+    LLOAD_W((ClassFile.WIDE << 8) | ClassFile.LLOAD, 4, Kind.LOAD, TypeKind.LONG, -1),\n@@ -666,1 +666,1 @@\n-    FLOAD_W((ClassFile.WIDE << 8) | ClassFile.FLOAD, 4, Kind.LOAD, TypeKind.FloatType, -1),\n+    FLOAD_W((ClassFile.WIDE << 8) | ClassFile.FLOAD, 4, Kind.LOAD, TypeKind.FLOAT, -1),\n@@ -669,1 +669,1 @@\n-    DLOAD_W((ClassFile.WIDE << 8) | ClassFile.DLOAD, 4, Kind.LOAD, TypeKind.DoubleType, -1),\n+    DLOAD_W((ClassFile.WIDE << 8) | ClassFile.DLOAD, 4, Kind.LOAD, TypeKind.DOUBLE, -1),\n@@ -672,1 +672,1 @@\n-    ALOAD_W((ClassFile.WIDE << 8) | ClassFile.ALOAD, 4, Kind.LOAD, TypeKind.ReferenceType, -1),\n+    ALOAD_W((ClassFile.WIDE << 8) | ClassFile.ALOAD, 4, Kind.LOAD, TypeKind.REFERENCE, -1),\n@@ -675,1 +675,1 @@\n-    ISTORE_W((ClassFile.WIDE << 8) | ClassFile.ISTORE, 4, Kind.STORE, TypeKind.IntType, -1),\n+    ISTORE_W((ClassFile.WIDE << 8) | ClassFile.ISTORE, 4, Kind.STORE, TypeKind.INT, -1),\n@@ -678,1 +678,1 @@\n-    LSTORE_W((ClassFile.WIDE << 8) | ClassFile.LSTORE, 4, Kind.STORE, TypeKind.LongType, -1),\n+    LSTORE_W((ClassFile.WIDE << 8) | ClassFile.LSTORE, 4, Kind.STORE, TypeKind.LONG, -1),\n@@ -681,1 +681,1 @@\n-    FSTORE_W((ClassFile.WIDE << 8) | ClassFile.FSTORE, 4, Kind.STORE, TypeKind.FloatType, -1),\n+    FSTORE_W((ClassFile.WIDE << 8) | ClassFile.FSTORE, 4, Kind.STORE, TypeKind.FLOAT, -1),\n@@ -684,1 +684,1 @@\n-    DSTORE_W((ClassFile.WIDE << 8) | ClassFile.DSTORE, 4, Kind.STORE, TypeKind.DoubleType, -1),\n+    DSTORE_W((ClassFile.WIDE << 8) | ClassFile.DSTORE, 4, Kind.STORE, TypeKind.DOUBLE, -1),\n@@ -687,1 +687,1 @@\n-    ASTORE_W((ClassFile.WIDE << 8) | ClassFile.ASTORE, 4, Kind.STORE, TypeKind.ReferenceType, -1),\n+    ASTORE_W((ClassFile.WIDE << 8) | ClassFile.ASTORE, 4, Kind.STORE, TypeKind.REFERENCE, -1),\n@@ -696,1 +696,1 @@\n-    IINC_W((ClassFile.WIDE << 8) | ClassFile.IINC, 6, Kind.INCREMENT, TypeKind.IntType, -1);\n+    IINC_W((ClassFile.WIDE << 8) | ClassFile.IINC, 6, Kind.INCREMENT, TypeKind.INT, -1);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Opcode.java","additions":178,"deletions":178,"binary":false,"changes":356,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import java.lang.classfile.instruction.DiscontinuedInstruction;\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.ConstantDescs;\n@@ -30,0 +33,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -32,1 +36,7 @@\n- * Describes the types that can be part of a field or method descriptor.\n+ * Describes the data types Java Virtual Machine operates on.\n+ * This omits {@code returnAddress} (JVMS {@jvms 2.3.3}),\n+ * which is only used by discontinued {@link\n+ * DiscontinuedInstruction.JsrInstruction jsr} and {@link\n+ * DiscontinuedInstruction.RetInstruction ret} instructions,\n+ * and includes {@link #VOID void} (JVMS {@jvms 4.3.3}), which\n+ * appears as a method return type.\n@@ -34,0 +44,12 @@\n+ * <h2 id=\"computational-type\">Computational Type<\/h2>\n+ * In the {@code class} file format, local variables (JVMS {@jvms 2.6.1}),\n+ * and the operand stack (JVMS {@jvms 2.6.2}) of the Java Virtual Machine,\n+ * {@link #BOOLEAN boolean}, {@link #BYTE byte}, {@link #CHAR char},\n+ * {@link #SHORT short} types do not exist and are {@linkplain\n+ * #asLoadable() represented} by the {@link #INT int} computational type.\n+ * {@link #INT int}, {@link #FLOAT float}, {@link #REFERENCE reference},\n+ * {@code returnAddress}, {@link #LONG long}, and {@link #DOUBLE doule}\n+ * are the computational types of the Java Virtual Machine.\n+ *\n+ * @jvms 2.2 Data Types\n+ * @jvms 2.11.1 Types and the Java Virtual Machine\n@@ -38,20 +60,66 @@\n-    \/** the primitive type byte *\/\n-    ByteType(\"byte\", \"B\", 8),\n-    \/** the primitive type short *\/\n-    ShortType(\"short\", \"S\", 9),\n-    \/** the primitive type int *\/\n-    IntType(\"int\", \"I\", 10),\n-    \/** the primitive type float *\/\n-    FloatType(\"float\", \"F\", 6),\n-    \/** the primitive type long *\/\n-    LongType(\"long\", \"J\", 11),\n-    \/** the primitive type double *\/\n-    DoubleType(\"double\", \"D\", 7),\n-    \/** a reference type *\/\n-    ReferenceType(\"reference type\", \"L\", -1),\n-    \/** the primitive type char *\/\n-    CharType(\"char\", \"C\", 5),\n-    \/** the primitive type boolean *\/\n-    BooleanType(\"boolean\", \"Z\", 4),\n-    \/** void *\/\n-    VoidType(\"void\", \"V\", -1);\n+    \/\/ Elements are grouped so frequently used switch ranges such as\n+    \/\/ primitives (boolean - double) and computational (int - void) are together.\n+    \/\/ Begin primitive types\n+    \/**\n+     * The primitive type {@code boolean}. Its {@linkplain ##computational-type\n+     * computational type} is {@link #INT int}. {@code 0} represents {@code false},\n+     * and {@code 1} represents {@code true}. It is zero-extended to an {@code int}\n+     * when loaded onto the operand stack and narrowed by taking the bitwise AND\n+     * with {@code 1} when stored.\n+     *\n+     * @jvms 2.3.4 The {@code boolean} Type\n+     *\/\n+    BOOLEAN(1, 4),\n+    \/**\n+     * The primitive type {@code byte}. Its {@linkplain ##computational-type\n+     * computational type} is {@link #INT int}. It is sign-extended to an\n+     * {@code int} when loaded onto the operand stack and truncated when\n+     * stored.\n+     *\/\n+    BYTE(1, 8),\n+    \/**\n+     * The primitive type {@code char}. Its {@linkplain ##computational-type\n+     * computational type} is {@link #INT int}. It is zero-extended to an\n+     * {@code int} when loaded onto the operand stack and truncated when\n+     * stored.\n+     *\/\n+    CHAR(1, 5),\n+    \/**\n+     * The primitive type {@code short}. Its {@linkplain ##computational-type\n+     * computational type} is {@link #INT int}. It is sign-extended to an\n+     * {@code int} when loaded onto the operand stack and truncated when\n+     * stored.\n+     *\/\n+    SHORT(1, 9),\n+    \/\/ Begin computational types\n+    \/**\n+     * The primitive type {@code int}.\n+     *\/\n+    INT(1, 10),\n+    \/**\n+     * The primitive type {@code float}.\n+     *\/\n+    FLOAT(1, 6),\n+    \/**\n+     *  The primitive type {@code long}. It is of {@linkplain #slotSize() category} 2.\n+     *\/\n+    LONG(2, 11),\n+    \/**\n+     * The primitive type {@code double}. It is of {@linkplain #slotSize() category} 2.\n+     *\/\n+    DOUBLE(2, 7),\n+    \/\/ End primitive types\n+    \/**\n+     * A reference type.\n+     * @jvms 2.4 Reference Types and Values\n+     *\/\n+    REFERENCE(1, -1),\n+    \/**\n+     * The {@code void} type, for absence of a value. While this is not a data type,\n+     * this can be a method return type indicating no change in {@linkplain #slotSize()\n+     * operand stack depth}.\n+     *\n+     * @jvms 4.3.3 Method Descriptors\n+     *\/\n+    VOID(0, -1);\n+    \/\/ End computational types\n@@ -59,2 +127,2 @@\n-    private final String name;\n-    private final String descriptor;\n+    private @Stable ClassDesc upperBound;\n+    private final int slots;\n@@ -63,2 +131,4 @@\n-    \/** {@return the human-readable name corresponding to this type} *\/\n-    public String typeName() { return name; }\n+    TypeKind(int slots, int newarrayCode) {\n+        this.slots = slots;\n+        this.newarrayCode = newarrayCode;\n+    }\n@@ -66,2 +136,27 @@\n-    \/** {@return the field descriptor character corresponding to this type} *\/\n-    public String descriptor() { return descriptor; }\n+    \/**\n+     * {@return the most specific upper bound field descriptor that can store any value\n+     * of this type} This is the primitive class descriptor for primitive types and\n+     * {@link #VOID void} and {@link ConstantDescs#CD_Object Object} descriptor for\n+     * {@link #REFERENCE reference}.\n+     *\/\n+    public ClassDesc upperBound() {\n+        var upper = this.upperBound;\n+        if (upper == null)\n+            return this.upperBound = fetchUpperBound();\n+        return upper;\n+    }\n+\n+    private ClassDesc fetchUpperBound() {\n+        return switch (this) {\n+            case BOOLEAN -> ConstantDescs.CD_boolean;\n+            case BYTE -> ConstantDescs.CD_byte;\n+            case CHAR -> ConstantDescs.CD_char;\n+            case SHORT -> ConstantDescs.CD_short;\n+            case INT -> ConstantDescs.CD_int;\n+            case FLOAT -> ConstantDescs.CD_float;\n+            case LONG -> ConstantDescs.CD_long;\n+            case DOUBLE -> ConstantDescs.CD_double;\n+            case REFERENCE -> ConstantDescs.CD_Object;\n+            case VOID -> ConstantDescs.CD_void;\n+        };\n+    }\n@@ -70,1 +165,2 @@\n-     * {@return the code used by the {@code newarray} opcode corresponding to this type}\n+     * {@return the code used by the {@link Opcode#NEWARRAY newarray} instruction to create an array\n+     * of this component type, or {@code -1} if this type is not supported by {@code newarray}}\n@@ -72,0 +168,1 @@\n+     * @jvms 6.5.newarray <i>newarray<\/i>\n@@ -78,1 +175,6 @@\n-     * {@return the number of local variable slots consumed by this type}\n+     * {@return the number of local variable index or operand stack depth consumed by this type}\n+     * This is also the category of this type for instructions operating on the operand stack without\n+     * regard to type (JVMS {@jvms 2.11.1}), such as {@link Opcode#POP pop} versus {@link Opcode#POP2\n+     * pop2}.\n+     * @jvms 2.6.1 Local Variables\n+     * @jvms 2.6.2 Operand Stacks\n@@ -81,5 +183,1 @@\n-        return switch (this) {\n-            case VoidType -> 0;\n-            case LongType, DoubleType -> 2;\n-            default -> 1;\n-        };\n+        return this.slots;\n@@ -89,3 +187,2 @@\n-     * Erase this type kind to the type which will be used for xLOAD, xSTORE,\n-     * and xRETURN bytecodes\n-     * @return the erased type kind\n+     * {@return the {@linkplain ##computational-type computational type} for this type, or {@link #VOID void}\n+     * for {@code void}}\n@@ -94,10 +191,1 @@\n-        return switch (this) {\n-            case BooleanType, ByteType, CharType, ShortType -> TypeKind.IntType;\n-            default -> this;\n-        };\n-    }\n-\n-    TypeKind(String name, String descriptor, int newarrayCode) {\n-        this.name = name;\n-        this.descriptor = descriptor;\n-        this.newarrayCode = newarrayCode;\n+        return ordinal() < 4 ? INT : this;\n@@ -107,2 +195,2 @@\n-     * {@return the type kind associated with the array type described by the\n-     * array code used as an operand to {@code newarray}}\n+     * {@return the component type described by the array code used as an operand to {@link Opcode#NEWARRAY\n+     * newarray}}\n@@ -112,0 +200,1 @@\n+     * @jvms 6.5.newarray <i>newarray<\/i>\n@@ -115,8 +204,8 @@\n-            case 4 -> TypeKind.BooleanType;\n-            case 5 -> TypeKind.CharType;\n-            case 6 -> TypeKind.FloatType;\n-            case 7 -> TypeKind.DoubleType;\n-            case 8 -> TypeKind.ByteType;\n-            case 9 -> TypeKind.ShortType;\n-            case 10 -> TypeKind.IntType;\n-            case 11 -> TypeKind.LongType;\n+            case 4 -> BOOLEAN;\n+            case 5 -> CHAR;\n+            case 6 -> FLOAT;\n+            case 7 -> DOUBLE;\n+            case 8 -> BYTE;\n+            case 9 -> SHORT;\n+            case 10 -> INT;\n+            case 11 -> LONG;\n@@ -128,1 +217,1 @@\n-     * {@return the type kind associated with the specified field descriptor}\n+     * {@return the type associated with the specified field descriptor}\n@@ -137,10 +226,10 @@\n-            case '[', 'L' -> TypeKind.ReferenceType;\n-            case 'B' -> TypeKind.ByteType;\n-            case 'C' -> TypeKind.CharType;\n-            case 'Z' -> TypeKind.BooleanType;\n-            case 'S' -> TypeKind.ShortType;\n-            case 'I' -> TypeKind.IntType;\n-            case 'F' -> TypeKind.FloatType;\n-            case 'J' -> TypeKind.LongType;\n-            case 'D' -> TypeKind.DoubleType;\n-            case 'V' -> TypeKind.VoidType;\n+            case '[', 'L' -> REFERENCE;\n+            case 'B' -> BYTE;\n+            case 'C' -> CHAR;\n+            case 'Z' -> BOOLEAN;\n+            case 'S' -> SHORT;\n+            case 'I' -> INT;\n+            case 'F' -> FLOAT;\n+            case 'J' -> LONG;\n+            case 'D' -> DOUBLE;\n+            case 'V' -> VOID;\n@@ -152,1 +241,1 @@\n-     * {@return the type kind associated with the specified field descriptor}\n+     * {@return the type associated with the specified field descriptor}\n@@ -158,1 +247,1 @@\n-                : TypeKind.ReferenceType;\n+                : REFERENCE;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/TypeKind.java","additions":159,"deletions":70,"binary":false,"changes":229,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -184,1 +184,1 @@\n-                                                    storeStack.push(StoreInstruction.of(TypeKind.ReferenceType, slot++));\n+                                                    storeStack.push(StoreInstruction.of(TypeKind.REFERENCE, slot++));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/components\/snippet-files\/PackageSnippets.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-        return TypeKind.DoubleType;\n+        return TypeKind.DOUBLE;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/DoubleEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-        return TypeKind.FloatType;\n+        return TypeKind.FLOAT;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/FloatEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-        return TypeKind.IntType;\n+        return TypeKind.INT;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/IntegerEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-        return TypeKind.ReferenceType;\n+        return TypeKind.REFERENCE;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/LoadableConstantEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-        return TypeKind.LongType;\n+        return TypeKind.LONG;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/LongEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,3 @@\n-     * {@return the component type of the array}\n+     * {@return the component type of the array} The {@link TypeKind#BYTE byte}\n+     * type load instruction {@link Opcode#BALOAD baload} also operates on\n+     * {@link TypeKind#BOOLEAN boolean} arrays.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ArrayLoadInstruction.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,3 @@\n-     * {@return the component type of the array}\n+     * {@return the component type of the array} The {@link TypeKind#BYTE byte}\n+     * type store instruction {@link Opcode#BASTORE bastore} also operates on\n+     * {@link TypeKind#BOOLEAN boolean} arrays.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ArrayStoreInstruction.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-            throw new IllegalArgumentException(\"Illegal component type: \" + typeKind.typeName());\n+            throw new IllegalArgumentException(\"Illegal component type for primitive array: \" + typeKind.name());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NewPrimitiveArrayInstruction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -384,1 +384,1 @@\n-                                                    storeStack.push(StoreInstruction.of(TypeKind.ReferenceType, slot++));\n+                                                    storeStack.push(StoreInstruction.of(TypeKind.REFERENCE, slot++));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/snippet-files\/PackageSnippets.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -371,3 +371,3 @@\n-            case BooleanType -> emitReferenceCast(cob, Boolean.class, null);\n-            case CharType -> emitReferenceCast(cob, Character.class, null);\n-            case ByteType, DoubleType, FloatType, IntType, LongType, ShortType ->\n+            case BOOLEAN -> emitReferenceCast(cob, Boolean.class, null);\n+            case CHAR -> emitReferenceCast(cob, Character.class, null);\n+            case BYTE, DOUBLE, FLOAT, INT, LONG, SHORT ->\n@@ -446,1 +446,1 @@\n-            emitStoreInsn(cob, TypeKind.ReferenceType, writeBack.index());\n+            emitStoreInsn(cob, TypeKind.REFERENCE, writeBack.index());\n@@ -904,1 +904,1 @@\n-        emitStoreInsn(cob, TypeKind.ReferenceType, receiver.index());  \/\/ store the MH in the receiver slot\n+        emitStoreInsn(cob, TypeKind.REFERENCE, receiver.index());  \/\/ store the MH in the receiver slot\n@@ -916,1 +916,1 @@\n-        emitStoreInsn(cob, TypeKind.ReferenceType, receiver.index());  \/\/ store the MH in the receiver slot\n+        emitStoreInsn(cob, TypeKind.REFERENCE, receiver.index());  \/\/ store the MH in the receiver slot\n@@ -1154,1 +1154,1 @@\n-        emitStoreInsn(cob, TypeKind.ReferenceType, casesLocal);\n+        emitStoreInsn(cob, TypeKind.REFERENCE, casesLocal);\n@@ -1175,1 +1175,1 @@\n-            emitLoadInsn(cob, TypeKind.ReferenceType, casesLocal);\n+            emitLoadInsn(cob, TypeKind.REFERENCE, casesLocal);\n@@ -1314,1 +1314,1 @@\n-        emitStoreInsn(cob, TypeKind.ReferenceType, clauseDataIndex);\n+        emitStoreInsn(cob, TypeKind.REFERENCE, clauseDataIndex);\n@@ -1401,1 +1401,1 @@\n-        emitLoadInsn(cob, TypeKind.ReferenceType, clauseDataSlot);\n+        emitLoadInsn(cob, TypeKind.REFERENCE, clauseDataSlot);\n@@ -1500,1 +1500,1 @@\n-        if (from != to && from != TypeKind.BooleanType) try {\n+        if (from != to && from != TypeKind.BOOLEAN) try {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InvokerBytecodeGenerator.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -141,6 +141,6 @@\n-        L_TYPE('L', Object.class, Wrapper.OBJECT, TypeKind.ReferenceType), \/\/ all reference types\n-        I_TYPE('I', int.class,    Wrapper.INT,    TypeKind.IntType),\n-        J_TYPE('J', long.class,   Wrapper.LONG,   TypeKind.LongType),\n-        F_TYPE('F', float.class,  Wrapper.FLOAT,  TypeKind.FloatType),\n-        D_TYPE('D', double.class, Wrapper.DOUBLE, TypeKind.DoubleType),  \/\/ all primitive types\n-        V_TYPE('V', void.class,   Wrapper.VOID,   TypeKind.VoidType);    \/\/ not valid in all contexts\n+        L_TYPE('L', Object.class, Wrapper.OBJECT, TypeKind.REFERENCE), \/\/ all reference types\n+        I_TYPE('I', int.class,    Wrapper.INT,    TypeKind.INT),\n+        J_TYPE('J', long.class,   Wrapper.LONG,   TypeKind.LONG),\n+        F_TYPE('F', float.class,  Wrapper.FLOAT,  TypeKind.FLOAT),\n+        D_TYPE('D', double.class, Wrapper.DOUBLE, TypeKind.DOUBLE),  \/\/ all primitive types\n+        V_TYPE('V', void.class,   Wrapper.VOID,   TypeKind.VOID);    \/\/ not valid in all contexts\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaForm.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -52,2 +52,0 @@\n-import java.util.ArrayList;\n-import java.util.List;\n@@ -1422,5 +1420,5 @@\n-                        lengthSlot    = cb.allocateLocal(TypeKind.IntType),\n-                        coderSlot     = cb.allocateLocal(TypeKind.ByteType),\n-                        bufSlot       = cb.allocateLocal(TypeKind.ReferenceType),\n-                        constantsSlot = cb.allocateLocal(TypeKind.ReferenceType),\n-                        suffixSlot    = cb.allocateLocal(TypeKind.ReferenceType);\n+                        lengthSlot    = cb.allocateLocal(TypeKind.INT),\n+                        coderSlot     = cb.allocateLocal(TypeKind.BYTE),\n+                        bufSlot       = cb.allocateLocal(TypeKind.REFERENCE),\n+                        constantsSlot = cb.allocateLocal(TypeKind.REFERENCE),\n+                        suffixSlot    = cb.allocateLocal(TypeKind.REFERENCE);\n@@ -1450,1 +1448,1 @@\n-                            stringSlots[i] = cb.allocateLocal(TypeKind.ReferenceType);\n+                            stringSlots[i] = cb.allocateLocal(TypeKind.REFERENCE);\n@@ -1467,1 +1465,1 @@\n-                                    cb.loadLocal(TypeKind.CharType, cb.parameterSlot(i));\n+                                    cb.loadLocal(TypeKind.CHAR, cb.parameterSlot(i));\n@@ -1534,1 +1532,1 @@\n-                            kind = TypeKind.ReferenceType;\n+                            kind = TypeKind.REFERENCE;\n@@ -1685,1 +1683,1 @@\n-                            kind = TypeKind.ReferenceType;\n+                            kind = TypeKind.REFERENCE;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -72,8 +72,8 @@\n-        if (type == Integer.class)   return TypeKind.IntType;\n-        if (type == Long.class)      return TypeKind.LongType;\n-        if (type == Boolean.class)   return TypeKind.BooleanType;\n-        if (type == Short.class)     return TypeKind.ShortType;\n-        if (type == Byte.class)      return TypeKind.ByteType;\n-        if (type == Character.class) return TypeKind.CharType;\n-        if (type == Float.class)     return TypeKind.FloatType;\n-        if (type == Double.class)    return TypeKind.DoubleType;\n+        if (type == Integer.class)   return TypeKind.INT;\n+        if (type == Long.class)      return TypeKind.LONG;\n+        if (type == Boolean.class)   return TypeKind.BOOLEAN;\n+        if (type == Short.class)     return TypeKind.SHORT;\n+        if (type == Byte.class)      return TypeKind.BYTE;\n+        if (type == Character.class) return TypeKind.CHAR;\n+        if (type == Float.class)     return TypeKind.FLOAT;\n+        if (type == Double.class)    return TypeKind.DOUBLE;\n@@ -97,8 +97,8 @@\n-            case BooleanType -> cob.invokestatic(BoxHolder.BOX_BOOLEAN);\n-            case ByteType    -> cob.invokestatic(BoxHolder.BOX_BYTE);\n-            case CharType    -> cob.invokestatic(BoxHolder.BOX_CHAR);\n-            case DoubleType  -> cob.invokestatic(BoxHolder.BOX_DOUBLE);\n-            case FloatType   -> cob.invokestatic(BoxHolder.BOX_FLOAT);\n-            case IntType     -> cob.invokestatic(BoxHolder.BOX_INT);\n-            case LongType    -> cob.invokestatic(BoxHolder.BOX_LONG);\n-            case ShortType   -> cob.invokestatic(BoxHolder.BOX_SHORT);\n+            case BOOLEAN -> cob.invokestatic(BoxHolder.BOX_BOOLEAN);\n+            case BYTE -> cob.invokestatic(BoxHolder.BOX_BYTE);\n+            case CHAR -> cob.invokestatic(BoxHolder.BOX_CHAR);\n+            case DOUBLE -> cob.invokestatic(BoxHolder.BOX_DOUBLE);\n+            case FLOAT -> cob.invokestatic(BoxHolder.BOX_FLOAT);\n+            case INT -> cob.invokestatic(BoxHolder.BOX_INT);\n+            case LONG -> cob.invokestatic(BoxHolder.BOX_LONG);\n+            case SHORT -> cob.invokestatic(BoxHolder.BOX_SHORT);\n@@ -110,8 +110,8 @@\n-            case BooleanType -> cob.invokevirtual(BoxHolder.UNBOX_BOOLEAN);\n-            case ByteType    -> cob.invokevirtual(BoxHolder.UNBOX_BYTE);\n-            case CharType    -> cob.invokevirtual(BoxHolder.UNBOX_CHAR);\n-            case DoubleType  -> cob.invokevirtual(BoxHolder.UNBOX_DOUBLE);\n-            case FloatType   -> cob.invokevirtual(BoxHolder.UNBOX_FLOAT);\n-            case IntType     -> cob.invokevirtual(BoxHolder.UNBOX_INT);\n-            case LongType    -> cob.invokevirtual(BoxHolder.UNBOX_LONG);\n-            case ShortType   -> cob.invokevirtual(BoxHolder.UNBOX_SHORT);\n+            case BOOLEAN -> cob.invokevirtual(BoxHolder.UNBOX_BOOLEAN);\n+            case BYTE -> cob.invokevirtual(BoxHolder.UNBOX_BYTE);\n+            case CHAR -> cob.invokevirtual(BoxHolder.UNBOX_CHAR);\n+            case DOUBLE -> cob.invokevirtual(BoxHolder.UNBOX_DOUBLE);\n+            case FLOAT -> cob.invokevirtual(BoxHolder.UNBOX_FLOAT);\n+            case INT -> cob.invokevirtual(BoxHolder.UNBOX_INT);\n+            case LONG -> cob.invokevirtual(BoxHolder.UNBOX_LONG);\n+            case SHORT -> cob.invokevirtual(BoxHolder.UNBOX_SHORT);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/TypeConvertingMethodAdapter.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -53,0 +53,4 @@\n+    public static IllegalArgumentException cannotConvertException(TypeKind from, TypeKind to) {\n+        return new IllegalArgumentException(String.format(\"convert %s -> %s\", from, to));\n+    }\n+\n@@ -55,1 +59,1 @@\n-            case IntType, ShortType, ByteType, CharType, BooleanType -> switch (slot) {\n+            case INT, SHORT, BYTE, CHAR, BOOLEAN -> switch (slot) {\n@@ -62,1 +66,1 @@\n-            case LongType -> switch (slot) {\n+            case LONG -> switch (slot) {\n@@ -69,1 +73,1 @@\n-            case DoubleType -> switch (slot) {\n+            case DOUBLE -> switch (slot) {\n@@ -76,1 +80,1 @@\n-            case FloatType -> switch (slot) {\n+            case FLOAT -> switch (slot) {\n@@ -83,1 +87,1 @@\n-            case ReferenceType -> switch (slot) {\n+            case REFERENCE -> switch (slot) {\n@@ -90,1 +94,1 @@\n-            case VoidType -> throw new IllegalArgumentException(\"void\");\n+            case VOID -> throw new IllegalArgumentException(\"void\");\n@@ -96,1 +100,1 @@\n-            case IntType, ShortType, ByteType, CharType, BooleanType -> switch (slot) {\n+            case INT, SHORT, BYTE, CHAR, BOOLEAN -> switch (slot) {\n@@ -103,1 +107,1 @@\n-            case LongType -> switch (slot) {\n+            case LONG -> switch (slot) {\n@@ -110,1 +114,1 @@\n-            case DoubleType -> switch (slot) {\n+            case DOUBLE -> switch (slot) {\n@@ -117,1 +121,1 @@\n-            case FloatType -> switch (slot) {\n+            case FLOAT -> switch (slot) {\n@@ -124,1 +128,1 @@\n-            case ReferenceType -> switch (slot) {\n+            case REFERENCE -> switch (slot) {\n@@ -131,1 +135,1 @@\n-            case VoidType -> throw new IllegalArgumentException(\"void\");\n+            case VOID -> throw new IllegalArgumentException(\"void\");\n@@ -137,6 +141,6 @@\n-            case ByteType, ShortType, IntType, CharType, BooleanType -> Opcode.IRETURN;\n-            case FloatType -> Opcode.FRETURN;\n-            case LongType -> Opcode.LRETURN;\n-            case DoubleType -> Opcode.DRETURN;\n-            case ReferenceType -> Opcode.ARETURN;\n-            case VoidType -> Opcode.RETURN;\n+            case BYTE, SHORT, INT, CHAR, BOOLEAN -> Opcode.IRETURN;\n+            case FLOAT -> Opcode.FRETURN;\n+            case LONG -> Opcode.LRETURN;\n+            case DOUBLE -> Opcode.DRETURN;\n+            case REFERENCE -> Opcode.ARETURN;\n+            case VOID -> Opcode.RETURN;\n@@ -148,9 +152,9 @@\n-            case ByteType, BooleanType -> Opcode.BALOAD;\n-            case ShortType -> Opcode.SALOAD;\n-            case IntType -> Opcode.IALOAD;\n-            case FloatType -> Opcode.FALOAD;\n-            case LongType -> Opcode.LALOAD;\n-            case DoubleType -> Opcode.DALOAD;\n-            case ReferenceType -> Opcode.AALOAD;\n-            case CharType -> Opcode.CALOAD;\n-            case VoidType -> throw new IllegalArgumentException(\"void not an allowable array type\");\n+            case BYTE, BOOLEAN -> Opcode.BALOAD;\n+            case SHORT -> Opcode.SALOAD;\n+            case INT -> Opcode.IALOAD;\n+            case FLOAT -> Opcode.FALOAD;\n+            case LONG -> Opcode.LALOAD;\n+            case DOUBLE -> Opcode.DALOAD;\n+            case REFERENCE -> Opcode.AALOAD;\n+            case CHAR -> Opcode.CALOAD;\n+            case VOID -> throw new IllegalArgumentException(\"void not an allowable array type\");\n@@ -162,9 +166,9 @@\n-            case ByteType, BooleanType -> Opcode.BASTORE;\n-            case ShortType -> Opcode.SASTORE;\n-            case IntType -> Opcode.IASTORE;\n-            case FloatType -> Opcode.FASTORE;\n-            case LongType -> Opcode.LASTORE;\n-            case DoubleType -> Opcode.DASTORE;\n-            case ReferenceType -> Opcode.AASTORE;\n-            case CharType -> Opcode.CASTORE;\n-            case VoidType -> throw new IllegalArgumentException(\"void not an allowable array type\");\n+            case BYTE, BOOLEAN -> Opcode.BASTORE;\n+            case SHORT -> Opcode.SASTORE;\n+            case INT -> Opcode.IASTORE;\n+            case FLOAT -> Opcode.FASTORE;\n+            case LONG -> Opcode.LASTORE;\n+            case DOUBLE -> Opcode.DASTORE;\n+            case REFERENCE -> Opcode.AASTORE;\n+            case CHAR -> Opcode.CASTORE;\n+            case VOID -> throw new IllegalArgumentException(\"void not an allowable array type\");\n@@ -198,1 +202,1 @@\n-            case IntType ->\n+            case INT ->\n@@ -200,7 +204,7 @@\n-                        case LongType -> Opcode.I2L;\n-                        case FloatType -> Opcode.I2F;\n-                        case DoubleType -> Opcode.I2D;\n-                        case ByteType -> Opcode.I2B;\n-                        case CharType -> Opcode.I2C;\n-                        case ShortType -> Opcode.I2S;\n-                        default -> throw new IllegalArgumentException(String.format(\"convert %s -> %s\", from, to));\n+                        case LONG -> Opcode.I2L;\n+                        case FLOAT -> Opcode.I2F;\n+                        case DOUBLE -> Opcode.I2D;\n+                        case BYTE -> Opcode.I2B;\n+                        case CHAR -> Opcode.I2C;\n+                        case SHORT -> Opcode.I2S;\n+                        default -> throw cannotConvertException(from, to);\n@@ -208,1 +212,1 @@\n-            case LongType ->\n+            case LONG ->\n@@ -210,4 +214,4 @@\n-                        case FloatType -> Opcode.L2F;\n-                        case DoubleType -> Opcode.L2D;\n-                        case IntType -> Opcode.L2I;\n-                        default -> throw new IllegalArgumentException(String.format(\"convert %s -> %s\", from, to));\n+                        case FLOAT -> Opcode.L2F;\n+                        case DOUBLE -> Opcode.L2D;\n+                        case INT -> Opcode.L2I;\n+                        default -> throw cannotConvertException(from, to);\n@@ -215,1 +219,1 @@\n-            case DoubleType ->\n+            case DOUBLE ->\n@@ -217,4 +221,4 @@\n-                        case FloatType -> Opcode.D2F;\n-                        case LongType -> Opcode.D2L;\n-                        case IntType -> Opcode.D2I;\n-                        default -> throw new IllegalArgumentException(String.format(\"convert %s -> %s\", from, to));\n+                        case FLOAT -> Opcode.D2F;\n+                        case LONG -> Opcode.D2L;\n+                        case INT -> Opcode.D2I;\n+                        default -> throw cannotConvertException(from, to);\n@@ -222,1 +226,1 @@\n-            case FloatType ->\n+            case FLOAT ->\n@@ -224,4 +228,4 @@\n-                        case LongType -> Opcode.F2L;\n-                        case DoubleType -> Opcode.F2D;\n-                        case IntType -> Opcode.F2I;\n-                        default -> throw new IllegalArgumentException(String.format(\"convert %s -> %s\", from, to));\n+                        case LONG -> Opcode.F2L;\n+                        case DOUBLE -> Opcode.F2D;\n+                        case INT -> Opcode.F2I;\n+                        default -> throw cannotConvertException(from, to);\n@@ -229,1 +233,1 @@\n-            default -> throw new IllegalArgumentException(String.format(\"convert %s -> %s\", from, to));\n+            default -> throw cannotConvertException(from, to);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BytecodeHelpers.java","additions":64,"deletions":60,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -854,1 +854,1 @@\n-                                \"descriptor\", newa.typeKind().typeName()));\n+                                \"descriptor\", newa.typeKind().upperBound().displayName()));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassPrinterImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,1 @@\n-                        shift(cob, ii.slot(), TypeKind.IntType),\n+                        shift(cob, ii.slot(), TypeKind.INT),\n@@ -76,1 +76,1 @@\n-                                        : TypeKind.ReferenceType),\n+                                        : TypeKind.REFERENCE),\n@@ -86,1 +86,1 @@\n-        if (tk == TypeKind.VoidType)  throw new IllegalArgumentException(\"Illegal local void type\");\n+        if (tk == TypeKind.VOID)  throw new IllegalArgumentException(\"Illegal local void type\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeLocalsShifterImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -149,1 +149,1 @@\n-            if (type != TypeKind.VoidType) stack.push(type);\n+            if (type != TypeKind.VOID) stack.push(type);\n@@ -231,1 +231,1 @@\n-                pop(i.dimensions());push(TypeKind.ReferenceType);\n+                pop(i.dimensions());push(TypeKind.REFERENCE);\n@@ -234,1 +234,1 @@\n-                push(TypeKind.ReferenceType);\n+                push(TypeKind.REFERENCE);\n@@ -236,1 +236,1 @@\n-                pop(1);push(TypeKind.ReferenceType);\n+                pop(1);push(TypeKind.REFERENCE);\n@@ -239,1 +239,1 @@\n-                pop(1);push(TypeKind.ReferenceType);\n+                pop(1);push(TypeKind.REFERENCE);\n@@ -332,1 +332,1 @@\n-                        pop(1);push(TypeKind.ReferenceType);\n+                        pop(1);push(TypeKind.REFERENCE);\n@@ -335,1 +335,1 @@\n-                        pop(1);push(TypeKind.IntType);\n+                        pop(1);push(TypeKind.INT);\n@@ -340,1 +340,1 @@\n-                map.put(i.handler(), new Stack(new Item(TypeKind.ReferenceType, null), 1, 1));\n+                map.put(i.handler(), new Stack(new Item(TypeKind.REFERENCE, null), 1, 1));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeStackTrackerImpl.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -233,6 +233,6 @@\n-                    case BooleanType, ByteType, CharType, IntType, ShortType -> cve instanceof IntegerEntry;\n-                    case DoubleType -> cve instanceof DoubleEntry;\n-                    case FloatType -> cve instanceof FloatEntry;\n-                    case LongType -> cve instanceof LongEntry;\n-                    case ReferenceType -> type.equals(ConstantDescs.CD_String) && cve instanceof StringEntry;\n-                    case VoidType -> false;\n+                    case BOOLEAN, BYTE, CHAR, INT, SHORT -> cve instanceof IntegerEntry;\n+                    case DOUBLE -> cve instanceof DoubleEntry;\n+                    case FLOAT -> cve instanceof FloatEntry;\n+                    case LONG -> cve instanceof LongEntry;\n+                    case REFERENCE -> type.equals(ConstantDescs.CD_String) && cve instanceof StringEntry;\n+                    case VOID -> false;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/ParserVerifier.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -276,1 +276,1 @@\n-                    int scopeLocal = cb.allocateLocal(ReferenceType);\n+                    int scopeLocal = cb.allocateLocal(REFERENCE);\n@@ -279,1 +279,1 @@\n-                    cb.storeLocal(ReferenceType, scopeLocal); \/\/ need to initialize all scope locals here in case an exception occurs\n+                    cb.storeLocal(REFERENCE, scopeLocal); \/\/ need to initialize all scope locals here in case an exception occurs\n@@ -295,2 +295,2 @@\n-        contextIdx = cb.allocateLocal(ReferenceType);\n-        cb.storeLocal(ReferenceType, contextIdx);\n+        contextIdx = cb.allocateLocal(REFERENCE);\n+        cb.storeLocal(REFERENCE, contextIdx);\n@@ -303,2 +303,2 @@\n-            returnBufferIdx = cb.allocateLocal(ReferenceType);\n-            cb.storeLocal(ReferenceType, returnBufferIdx);\n+            returnBufferIdx = cb.allocateLocal(REFERENCE);\n+            cb.storeLocal(REFERENCE, returnBufferIdx);\n@@ -327,1 +327,1 @@\n-                    cb.loadLocal(ReferenceType, returnBufferIdx);\n+                    cb.loadLocal(REFERENCE, returnBufferIdx);\n@@ -342,2 +342,2 @@\n-                    returnBufferIdx = cb.allocateLocal(ReferenceType);\n-                    cb.storeLocal(ReferenceType, returnBufferIdx);\n+                    returnBufferIdx = cb.allocateLocal(REFERENCE);\n+                    cb.storeLocal(REFERENCE, returnBufferIdx);\n@@ -358,1 +358,1 @@\n-            cb.loadLocal(ReferenceType, 0); \/\/ load target arg\n+            cb.loadLocal(REFERENCE, 0); \/\/ load target arg\n@@ -509,1 +509,1 @@\n-            cb.loadLocal(ReferenceType, scopeSlots[i]);\n+            cb.loadLocal(REFERENCE, scopeSlots[i]);\n@@ -518,1 +518,1 @@\n-        cb.storeLocal(ReferenceType, nextScopeLocal); \/\/ store off one to release later\n+        cb.storeLocal(REFERENCE, nextScopeLocal); \/\/ store off one to release later\n@@ -532,1 +532,1 @@\n-            cb.loadLocal(ReferenceType, scopeLocal);\n+            cb.loadLocal(REFERENCE, scopeLocal);\n@@ -534,1 +534,1 @@\n-                ifCb.loadLocal(ReferenceType, scopeLocal);\n+                ifCb.loadLocal(REFERENCE, scopeLocal);\n@@ -554,1 +554,1 @@\n-        cb.loadLocal(ReferenceType, contextIdx);\n+        cb.loadLocal(REFERENCE, contextIdx);\n@@ -562,1 +562,1 @@\n-        cb.loadLocal(ReferenceType, contextIdx);\n+        cb.loadLocal(REFERENCE, contextIdx);\n@@ -567,1 +567,1 @@\n-        cb.loadLocal(ReferenceType, contextIdx);\n+        cb.loadLocal(REFERENCE, contextIdx);\n@@ -588,1 +588,1 @@\n-            cb.loadLocal(ReferenceType, returnAllocatorIdx);\n+            cb.loadLocal(REFERENCE, returnAllocatorIdx);\n@@ -621,4 +621,4 @@\n-            int longValueIdx = cb.allocateLocal(LongType);\n-            cb.storeLocal(LongType, longValueIdx);\n-            int writeAddrIdx = cb.allocateLocal(ReferenceType);\n-            cb.storeLocal(ReferenceType, writeAddrIdx);\n+            int longValueIdx = cb.allocateLocal(LONG);\n+            cb.storeLocal(LONG, longValueIdx);\n+            int writeAddrIdx = cb.allocateLocal(REFERENCE);\n+            cb.storeLocal(REFERENCE, writeAddrIdx);\n@@ -651,1 +651,1 @@\n-                cb.loadLocal(LongType, longValueIdx);\n+                cb.loadLocal(LONG, longValueIdx);\n@@ -665,1 +665,1 @@\n-                cb.loadLocal(ReferenceType, writeAddrIdx);\n+                cb.loadLocal(REFERENCE, writeAddrIdx);\n@@ -697,1 +697,1 @@\n-                cb.loadLocal(ReferenceType, returnBufferIdx);\n+                cb.loadLocal(REFERENCE, returnBufferIdx);\n@@ -717,1 +717,1 @@\n-                cb.loadLocal(ReferenceType, returnBufferIdx);\n+                cb.loadLocal(REFERENCE, returnBufferIdx);\n@@ -817,2 +817,2 @@\n-            int readAddrIdx = cb.allocateLocal(ReferenceType);\n-            cb.storeLocal(ReferenceType, readAddrIdx);\n+            int readAddrIdx = cb.allocateLocal(REFERENCE);\n+            cb.storeLocal(REFERENCE, readAddrIdx);\n@@ -821,2 +821,2 @@\n-            int resultIdx = cb.allocateLocal(LongType);\n-            cb.storeLocal(LongType, resultIdx);\n+            int resultIdx = cb.allocateLocal(LONG);\n+            cb.storeLocal(LONG, resultIdx);\n@@ -851,1 +851,1 @@\n-                cb.loadLocal(ReferenceType, readAddrIdx);\n+                cb.loadLocal(REFERENCE, readAddrIdx);\n@@ -866,1 +866,1 @@\n-                cb.loadLocal(LongType, resultIdx);\n+                cb.loadLocal(LONG, resultIdx);\n@@ -868,1 +868,1 @@\n-                cb.storeLocal(LongType, resultIdx);\n+                cb.storeLocal(LONG, resultIdx);\n@@ -874,1 +874,1 @@\n-            cb.loadLocal(LongType, resultIdx);\n+            cb.loadLocal(LONG, resultIdx);\n@@ -900,2 +900,2 @@\n-        int storeIdx = cb.allocateLocal(ReferenceType);\n-        cb.storeLocal(ReferenceType, storeIdx);\n+        int storeIdx = cb.allocateLocal(REFERENCE);\n+        cb.storeLocal(REFERENCE, storeIdx);\n@@ -906,1 +906,1 @@\n-        cb.loadLocal(ReferenceType, storeIdx);\n+        cb.loadLocal(REFERENCE, storeIdx);\n@@ -985,5 +985,5 @@\n-            case BooleanType, ByteType, ShortType, CharType, IntType -> cb.iconst_0();\n-            case LongType -> cb.lconst_0();\n-            case FloatType -> cb.fconst_0();\n-            case DoubleType -> cb.dconst_0();\n-            case ReferenceType -> cb.aconst_null();\n+            case BOOLEAN, BYTE, SHORT, CHAR, INT -> cb.iconst_0();\n+            case LONG -> cb.lconst_0();\n+            case FLOAT -> cb.fconst_0();\n+            case DOUBLE -> cb.dconst_0();\n+            case REFERENCE -> cb.aconst_null();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":42,"deletions":42,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-                    print(\" \" + instr.typeKind().typeName());\n+                    print(\" \" + instr.typeKind().upperBound().displayName());\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/CodeWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1565,1 +1565,1 @@\n-                   .newarray(TypeKind.ByteType);\n+                   .newarray(TypeKind.BYTE);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/SystemModulesPlugin.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,4 +88,4 @@\n-                                    builder.allocateLocal(TypeKind.ReferenceType);\n-                                    builder.allocateLocal(TypeKind.LongType);\n-                                    builder.allocateLocal(TypeKind.IntType);\n-                                    builder.allocateLocal(TypeKind.DoubleType);\n+                                    builder.allocateLocal(TypeKind.REFERENCE);\n+                                    builder.allocateLocal(TypeKind.LONG);\n+                                    builder.allocateLocal(TypeKind.INT);\n+                                    builder.allocateLocal(TypeKind.DOUBLE);\n@@ -327,1 +327,1 @@\n-                                                    storeStack.push(StoreInstruction.of(TypeKind.ReferenceType, slot++));\n+                                                    storeStack.push(StoreInstruction.of(TypeKind.REFERENCE, slot++));\n","filename":"test\/jdk\/jdk\/classfile\/AdvancedTransformationsTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,1 +91,1 @@\n-                                assertEquals(nai.typeKind(), TypeKind.DoubleType);\n+                                assertEquals(nai.typeKind(), TypeKind.DOUBLE);\n","filename":"test\/jdk\/jdk\/classfile\/ArrayTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -262,3 +262,3 @@\n-                              int slot1 = xb.allocateLocal(TypeKind.IntType);\n-                              int slot2 = xb.allocateLocal(TypeKind.LongType);\n-                              int slot3 = xb.allocateLocal(TypeKind.IntType);\n+                              int slot1 = xb.allocateLocal(TypeKind.INT);\n+                              int slot2 = xb.allocateLocal(TypeKind.LONG);\n+                              int slot3 = xb.allocateLocal(TypeKind.INT);\n@@ -280,3 +280,3 @@\n-                                  int slot1 = bb.allocateLocal(TypeKind.IntType);\n-                                  int slot2 = bb.allocateLocal(TypeKind.LongType);\n-                                  int slot3 = bb.allocateLocal(TypeKind.IntType);\n+                                  int slot1 = bb.allocateLocal(TypeKind.INT);\n+                                  int slot2 = bb.allocateLocal(TypeKind.LONG);\n+                                  int slot3 = bb.allocateLocal(TypeKind.INT);\n@@ -288,1 +288,1 @@\n-                              int slot4 = xb.allocateLocal(TypeKind.IntType);\n+                              int slot4 = xb.allocateLocal(TypeKind.INT);\n@@ -302,3 +302,3 @@\n-                                                int slot1 = bb.allocateLocal(TypeKind.IntType);\n-                                                int slot2 = bb.allocateLocal(TypeKind.LongType);\n-                                                int slot3 = bb.allocateLocal(TypeKind.IntType);\n+                                                int slot1 = bb.allocateLocal(TypeKind.INT);\n+                                                int slot2 = bb.allocateLocal(TypeKind.LONG);\n+                                                int slot3 = bb.allocateLocal(TypeKind.INT);\n@@ -311,1 +311,1 @@\n-                                                int slot1 = bb.allocateLocal(TypeKind.IntType);\n+                                                int slot1 = bb.allocateLocal(TypeKind.INT);\n@@ -315,1 +315,1 @@\n-                              int slot4 = xb.allocateLocal(TypeKind.IntType);\n+                              int slot4 = xb.allocateLocal(TypeKind.INT);\n@@ -338,1 +338,1 @@\n-                var i = cob.allocateLocal(TypeKind.IntType);\n+                var i = cob.allocateLocal(TypeKind.INT);\n@@ -376,2 +376,2 @@\n-                    int d = cob.allocateLocal(TypeKind.IntType);\n-                    int e = cob.allocateLocal(TypeKind.IntType);\n+                    int d = cob.allocateLocal(TypeKind.INT);\n+                    int e = cob.allocateLocal(TypeKind.INT);\n","filename":"test\/jdk\/jdk\/classfile\/BuilderBlockTest.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-                            int stringSlot = xb.allocateLocal(TypeKind.ReferenceType);\n+                            int stringSlot = xb.allocateLocal(TypeKind.REFERENCE);\n@@ -221,1 +221,1 @@\n-                            int stringSlot = xb.allocateLocal(TypeKind.ReferenceType);\n+                            int stringSlot = xb.allocateLocal(TypeKind.REFERENCE);\n@@ -226,1 +226,1 @@\n-                                int intSlot = tb.allocateLocal(TypeKind.IntType);\n+                                int intSlot = tb.allocateLocal(TypeKind.INT);\n@@ -243,1 +243,1 @@\n-                                    int doubleSlot = tb.allocateLocal(TypeKind.DoubleType);\n+                                    int doubleSlot = tb.allocateLocal(TypeKind.DOUBLE);\n@@ -253,1 +253,1 @@\n-                                    int refSlot = tb.allocateLocal(TypeKind.ReferenceType);\n+                                    int refSlot = tb.allocateLocal(TypeKind.REFERENCE);\n@@ -284,1 +284,1 @@\n-                            int stringSlot = xb.allocateLocal(TypeKind.ReferenceType);\n+                            int stringSlot = xb.allocateLocal(TypeKind.REFERENCE);\n","filename":"test\/jdk\/jdk\/classfile\/BuilderTryCatchTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-                var stackTracker = CodeStackTracker.of(DoubleType, FloatType); \/\/initial stack tracker pre-set\n+                var stackTracker = CodeStackTracker.of(DOUBLE, FLOAT); \/\/initial stack tracker pre-set\n@@ -50,1 +50,1 @@\n-                    assertIterableEquals(stackTracker.stack().get(), List.of(DoubleType, FloatType));\n+                    assertIterableEquals(stackTracker.stack().get(), List.of(DOUBLE, FLOAT));\n@@ -52,1 +52,1 @@\n-                    assertIterableEquals(stackTracker.stack().get(), List.of(ReferenceType, DoubleType, FloatType));\n+                    assertIterableEquals(stackTracker.stack().get(), List.of(REFERENCE, DOUBLE, FLOAT));\n@@ -54,1 +54,1 @@\n-                    assertIterableEquals(stackTracker.stack().get(), List.of(LongType, ReferenceType, DoubleType, FloatType));\n+                    assertIterableEquals(stackTracker.stack().get(), List.of(LONG, REFERENCE, DOUBLE, FLOAT));\n@@ -56,1 +56,1 @@\n-                        assertIterableEquals(stackTracker.stack().get(), List.of(LongType, ReferenceType, DoubleType, FloatType));\n+                        assertIterableEquals(stackTracker.stack().get(), List.of(LONG, REFERENCE, DOUBLE, FLOAT));\n@@ -58,1 +58,1 @@\n-                        assertIterableEquals(stackTracker.stack().get(), List.of(IntType, LongType, ReferenceType, DoubleType, FloatType));\n+                        assertIterableEquals(stackTracker.stack().get(), List.of(INT, LONG, REFERENCE, DOUBLE, FLOAT));\n@@ -60,1 +60,1 @@\n-                            assertIterableEquals(stackTracker.stack().get(), List.of(LongType, ReferenceType, DoubleType, FloatType));\n+                            assertIterableEquals(stackTracker.stack().get(), List.of(LONG, REFERENCE, DOUBLE, FLOAT));\n@@ -62,1 +62,1 @@\n-                            assertIterableEquals(stackTracker.stack().get(), List.of(ReferenceType, LongType, ReferenceType, DoubleType, FloatType));\n+                            assertIterableEquals(stackTracker.stack().get(), List.of(REFERENCE, LONG, REFERENCE, DOUBLE, FLOAT));\n@@ -66,1 +66,1 @@\n-                        assertIterableEquals(stackTracker.stack().get(), List.of(LongType, ReferenceType, DoubleType, FloatType));\n+                        assertIterableEquals(stackTracker.stack().get(), List.of(LONG, REFERENCE, DOUBLE, FLOAT));\n@@ -70,1 +70,1 @@\n-                        assertIterableEquals(stackTracker.stack().get(), List.of(ReferenceType));\n+                        assertIterableEquals(stackTracker.stack().get(), List.of(REFERENCE));\n","filename":"test\/jdk\/jdk\/classfile\/StackTrackerTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,0 @@\n-import static java.lang.classfile.Opcode.INVOKESPECIAL;\n-import static java.lang.classfile.TypeKind.VoidType;\n","filename":"test\/jdk\/jdk\/classfile\/TempConstantPoolBuilderTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,0 @@\n-import static java.lang.classfile.TypeKind.VoidType;\n","filename":"test\/jdk\/jdk\/classfile\/Utf8EntryTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -523,1 +523,1 @@\n-                        new ConstantPoolEntryRecord.CpClassRecord(\"[\" + cins.typeKind().descriptor()).hashCode() + 1;\n+                        new ConstantPoolEntryRecord.CpClassRecord(\"[\" + cins.typeKind().upperBound().descriptorString()).hashCode() + 1;\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/ClassRecord.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -222,8 +222,8 @@\n-                        case ByteType -> cob.baload();\n-                        case ShortType -> cob.saload();\n-                        case IntType -> cob.iaload();\n-                        case FloatType -> cob.faload();\n-                        case LongType -> cob.laload();\n-                        case DoubleType -> cob.daload();\n-                        case ReferenceType -> cob.aaload();\n-                        case CharType -> cob.caload();\n+                        case BYTE -> cob.baload();\n+                        case SHORT -> cob.saload();\n+                        case INT -> cob.iaload();\n+                        case FLOAT -> cob.faload();\n+                        case LONG -> cob.laload();\n+                        case DOUBLE -> cob.daload();\n+                        case REFERENCE -> cob.aaload();\n+                        case CHAR -> cob.caload();\n@@ -235,8 +235,8 @@\n-                        case ByteType -> cob.bastore();\n-                        case ShortType -> cob.sastore();\n-                        case IntType -> cob.iastore();\n-                        case FloatType -> cob.fastore();\n-                        case LongType -> cob.lastore();\n-                        case DoubleType -> cob.dastore();\n-                        case ReferenceType -> cob.aastore();\n-                        case CharType -> cob.castore();\n+                        case BYTE -> cob.bastore();\n+                        case SHORT -> cob.sastore();\n+                        case INT -> cob.iastore();\n+                        case FLOAT -> cob.fastore();\n+                        case LONG -> cob.lastore();\n+                        case DOUBLE -> cob.dastore();\n+                        case REFERENCE -> cob.aastore();\n+                        case CHAR -> cob.castore();\n@@ -307,1 +307,1 @@\n-                        case DoubleType -> {\n+                        case DOUBLE -> {\n@@ -309,3 +309,3 @@\n-                                case FloatType -> cob.d2f();\n-                                case IntType -> cob.d2i();\n-                                case LongType -> cob.d2l();\n+                                case FLOAT -> cob.d2f();\n+                                case INT -> cob.d2i();\n+                                case LONG -> cob.d2l();\n@@ -315,1 +315,1 @@\n-                        case FloatType -> {\n+                        case FLOAT -> {\n@@ -317,3 +317,3 @@\n-                                case DoubleType -> cob.f2d();\n-                                case IntType -> cob.f2i();\n-                                case LongType -> cob.f2l();\n+                                case DOUBLE -> cob.f2d();\n+                                case INT -> cob.f2i();\n+                                case LONG -> cob.f2l();\n@@ -323,1 +323,1 @@\n-                        case IntType -> {\n+                        case INT -> {\n@@ -325,6 +325,6 @@\n-                                case ByteType -> cob.i2b();\n-                                case CharType -> cob.i2c();\n-                                case DoubleType -> cob.i2d();\n-                                case FloatType -> cob.i2f();\n-                                case LongType -> cob.i2l();\n-                                case ShortType -> cob.i2s();\n+                                case BYTE -> cob.i2b();\n+                                case CHAR -> cob.i2c();\n+                                case DOUBLE -> cob.i2d();\n+                                case FLOAT -> cob.i2f();\n+                                case LONG -> cob.i2l();\n+                                case SHORT -> cob.i2s();\n@@ -334,1 +334,1 @@\n-                        case LongType -> {\n+                        case LONG -> {\n@@ -336,3 +336,3 @@\n-                                case DoubleType -> cob.l2d();\n-                                case FloatType -> cob.l2f();\n-                                case IntType -> cob.l2i();\n+                                case DOUBLE -> cob.l2d();\n+                                case FLOAT -> cob.l2f();\n+                                case INT -> cob.l2i();\n@@ -413,5 +413,5 @@\n-                        case IntType -> cob.iload(i.slot());\n-                        case FloatType -> cob.fload(i.slot());\n-                        case LongType -> cob.lload(i.slot());\n-                        case DoubleType -> cob.dload(i.slot());\n-                        case ReferenceType -> cob.aload(i.slot());\n+                        case INT -> cob.iload(i.slot());\n+                        case FLOAT -> cob.fload(i.slot());\n+                        case LONG -> cob.lload(i.slot());\n+                        case DOUBLE -> cob.dload(i.slot());\n+                        case REFERENCE -> cob.aload(i.slot());\n@@ -423,5 +423,5 @@\n-                        case IntType -> cob.istore(i.slot());\n-                        case FloatType -> cob.fstore(i.slot());\n-                        case LongType -> cob.lstore(i.slot());\n-                        case DoubleType -> cob.dstore(i.slot());\n-                        case ReferenceType -> cob.astore(i.slot());\n+                        case INT -> cob.istore(i.slot());\n+                        case FLOAT -> cob.fstore(i.slot());\n+                        case LONG -> cob.lstore(i.slot());\n+                        case DOUBLE -> cob.dstore(i.slot());\n+                        case REFERENCE -> cob.astore(i.slot());\n@@ -518,6 +518,6 @@\n-                        case IntType -> cob.ireturn();\n-                        case FloatType -> cob.freturn();\n-                        case LongType -> cob.lreturn();\n-                        case DoubleType -> cob.dreturn();\n-                        case ReferenceType -> cob.areturn();\n-                        case VoidType -> cob.return_();\n+                        case INT -> cob.ireturn();\n+                        case FLOAT -> cob.freturn();\n+                        case LONG -> cob.lreturn();\n+                        case DOUBLE -> cob.dreturn();\n+                        case REFERENCE -> cob.areturn();\n+                        case VOID -> cob.return_();\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/RebuildingTransformation.java","additions":51,"deletions":51,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.lang.classfile.TypeKind;\n@@ -145,1 +144,1 @@\n-                      .withCode(codeb -> codeb.loadLocal(TypeKind.ReferenceType, 0)\n+                      .withCode(codeb -> codeb.loadLocal(REFERENCE, 0)\n@@ -147,1 +146,1 @@\n-                                              .return_(VoidType)\n+                                              .return_(VOID)\n@@ -193,1 +192,1 @@\n-                          mb -> mb.withCode(codeb -> codeb.loadLocal(ReferenceType, 0)\n+                          mb -> mb.withCode(codeb -> codeb.loadLocal(REFERENCE, 0)\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/Write.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}