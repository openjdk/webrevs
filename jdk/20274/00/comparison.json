{"files":[{"patch":"@@ -304,1 +304,2 @@\n-        jdk.sctp;\n+        jdk.sctp,\n+        jdk.zipfs;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -206,0 +206,1 @@\n+    permission java.lang.RuntimePermission \"accessClassInPackage.sun.nio.ch\";\n","filename":"src\/java.base\/share\/lib\/security\/default.policy","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -66,0 +66,2 @@\n+import sun.nio.ch.FileChannelImpl;\n+\n@@ -178,0 +180,2 @@\n+        if (this.ch instanceof FileChannelImpl fci)\n+            fci.setUninterruptible();\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8316882\n+ * @run testng CallWithInterruptSet\n+ * @summary Test invoking ZipFS methods with the interrupt status set\n+ *\/\n+\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+public class CallWithInterruptSet {\n+\n+    @Test\n+    public void testReadAllBytes() throws Exception {\n+        Path file = Files.createTempFile(Path.of(\".\"), \"tmp\", \".zip\");\n+        try (var zout = new ZipOutputStream(Files.newOutputStream(file))) {\n+            zout.putNextEntry(new ZipEntry(\"entry\"));\n+            zout.write(\"HEHE\".getBytes(StandardCharsets.UTF_8), 0, 4);\n+            zout.closeEntry();\n+        }\n+        try (var zipfs = FileSystems.newFileSystem(file)) {\n+            var zippath = zipfs.getPath(\"entry\");\n+            Thread.currentThread().interrupt();\n+            assertEquals(\n+                    Files.readAllBytes(zippath),\n+                    \"HEHE\".getBytes(StandardCharsets.UTF_8));\n+        }\n+        assertTrue(Thread.interrupted()); \/\/ clear interrupt\n+    }\n+\n+}\n+\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/CallWithInterruptSet.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"}]}