{"files":[{"patch":"@@ -47,0 +47,1 @@\n+template <ShenandoahGenerationType GENERATION>\n@@ -64,2 +65,1 @@\n-    _cm->mark_loop(worker_id, _terminator, rp,\n-                   true \/*cancellable*\/,\n+    _cm->mark_loop(worker_id, _terminator, rp, GENERATION, true \/*cancellable*\/,\n@@ -93,0 +93,1 @@\n+template <ShenandoahGenerationType GENERATION>\n@@ -115,1 +116,1 @@\n-      ShenandoahSATBBufferClosure cl(q);\n+      ShenandoahSATBBufferClosure<GENERATION> cl(q);\n@@ -120,1 +121,1 @@\n-      ShenandoahMarkRefsClosure             mark_cl(q, rp);\n+      ShenandoahMarkRefsClosure<GENERATION> mark_cl(q, rp);\n@@ -125,2 +126,1 @@\n-    _cm->mark_loop(worker_id, _terminator, rp,\n-                   false \/*not cancellable*\/,\n+    _cm->mark_loop(worker_id, _terminator, rp, GENERATION, false \/*not cancellable*\/,\n@@ -137,0 +137,1 @@\n+template <ShenandoahGenerationType GENERATION>\n@@ -152,1 +153,2 @@\n-ShenandoahMarkConcurrentRootsTask::ShenandoahMarkConcurrentRootsTask(ShenandoahObjToScanQueueSet* qs,\n+template <ShenandoahGenerationType GENERATION>\n+ShenandoahMarkConcurrentRootsTask<GENERATION>::ShenandoahMarkConcurrentRootsTask(ShenandoahObjToScanQueueSet* qs,\n@@ -163,1 +165,2 @@\n-void ShenandoahMarkConcurrentRootsTask::work(uint worker_id) {\n+template <ShenandoahGenerationType GENERATION>\n+void ShenandoahMarkConcurrentRootsTask<GENERATION>::work(uint worker_id) {\n@@ -166,1 +169,1 @@\n-  ShenandoahMarkRefsClosure cl(q, _rp);\n+  ShenandoahMarkRefsClosure<GENERATION> cl(q, _rp);\n@@ -179,1 +182,1 @@\n-  ShenandoahMarkConcurrentRootsTask task(task_queues(), rp, ShenandoahPhaseTimings::conc_mark_roots, workers->active_workers());\n+  ShenandoahMarkConcurrentRootsTask<NON_GEN> task(task_queues(), rp, ShenandoahPhaseTimings::conc_mark_roots, workers->active_workers());\n@@ -207,1 +210,1 @@\n-    ShenandoahConcurrentMarkingTask task(this, &terminator);\n+    ShenandoahConcurrentMarkingTask<NON_GEN> task(this, &terminator);\n@@ -257,1 +260,1 @@\n-  ShenandoahFinalMarkingTask task(this, &terminator, ShenandoahStringDedup::is_enabled());\n+  ShenandoahFinalMarkingTask<NON_GEN> task(this, &terminator, ShenandoahStringDedup::is_enabled());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shenandoah\/shenandoahGenerationType.hpp\"\n@@ -30,0 +31,1 @@\n+template <ShenandoahGenerationType GENERATION>\n@@ -31,0 +33,1 @@\n+template <ShenandoahGenerationType GENERATION>\n@@ -34,2 +37,2 @@\n-  friend class ShenandoahConcurrentMarkingTask;\n-  friend class ShenandoahFinalMarkingTask;\n+  template <ShenandoahGenerationType GENERATION> friend class ShenandoahConcurrentMarkingTask;\n+  template <ShenandoahGenerationType GENERATION> friend class ShenandoahFinalMarkingTask;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_SHENANDOAH_SHENANDOAHGENERATIONTYPE_HPP\n+#define SHARE_GC_SHENANDOAH_SHENANDOAHGENERATIONTYPE_HPP\n+\n+enum ShenandoahGenerationType {\n+  NON_GEN           \/\/ non-generational\n+};\n+\n+inline const char* shenandoah_generation_name(ShenandoahGenerationType mode) {\n+  switch (mode) {\n+    case NON_GEN:\n+      return \"Non-Generational\";\n+    default:\n+      ShouldNotReachHere();\n+      return \"Unknown\";\n+  }\n+}\n+\n+#endif \/\/ SHARE_GC_SHENANDOAH_SHENANDOAHGENERATIONTYPE_HPP\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationType.hpp","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -69,1 +69,1 @@\n-template <bool CANCELLABLE, StringDedupMode STRING_DEDUP>\n+template <ShenandoahGenerationType GENERATION, bool CANCELLABLE, StringDedupMode STRING_DEDUP>\n@@ -79,1 +79,1 @@\n-    using Closure = ShenandoahMarkUpdateRefsClosure;\n+    using Closure = ShenandoahMarkUpdateRefsClosure<GENERATION>;\n@@ -81,1 +81,1 @@\n-    mark_loop_work<Closure, CANCELLABLE, STRING_DEDUP>(&cl, ld, w, t, req);\n+    mark_loop_work<Closure, GENERATION, CANCELLABLE, STRING_DEDUP>(&cl, ld, w, t, req);\n@@ -83,1 +83,1 @@\n-    using Closure = ShenandoahMarkRefsClosure;\n+    using Closure = ShenandoahMarkRefsClosure<GENERATION>;\n@@ -85,1 +85,1 @@\n-    mark_loop_work<Closure, CANCELLABLE, STRING_DEDUP>(&cl, ld, w, t, req);\n+    mark_loop_work<Closure, GENERATION, CANCELLABLE, STRING_DEDUP>(&cl, ld, w, t, req);\n@@ -91,0 +91,1 @@\n+template<bool CANCELLABLE, StringDedupMode STRING_DEDUP>\n@@ -92,1 +93,7 @@\n-               bool cancellable, StringDedupMode dedup_mode, StringDedup::Requests* const req) {\n+                               ShenandoahGenerationType generation, StringDedup::Requests* const req) {\n+  mark_loop_prework<NON_GEN, CANCELLABLE, STRING_DEDUP>(worker_id, terminator, rp, req);\n+}\n+\n+void ShenandoahMark::mark_loop(uint worker_id, TaskTerminator* terminator, ShenandoahReferenceProcessor *rp,\n+                               ShenandoahGenerationType generation, bool cancellable,  StringDedupMode dedup_mode,\n+                               StringDedup::Requests* const req) {\n@@ -96,1 +103,1 @@\n-        mark_loop_prework<true, NO_DEDUP>(worker_id, terminator, rp, req);\n+        mark_loop<true, NO_DEDUP>(worker_id, terminator, rp, generation, req);\n@@ -99,1 +106,1 @@\n-        mark_loop_prework<true, ENQUEUE_DEDUP>(worker_id, terminator, rp, req);\n+        mark_loop<true, ENQUEUE_DEDUP>(worker_id, terminator, rp, generation, req);\n@@ -102,1 +109,1 @@\n-        mark_loop_prework<true, ALWAYS_DEDUP>(worker_id, terminator, rp, req);\n+        mark_loop<true, ALWAYS_DEDUP>(worker_id, terminator, rp, generation, req);\n@@ -108,1 +115,1 @@\n-        mark_loop_prework<false, NO_DEDUP>(worker_id, terminator, rp, req);\n+        mark_loop<false, NO_DEDUP>(worker_id, terminator, rp, generation, req);\n@@ -111,1 +118,1 @@\n-        mark_loop_prework<false, ENQUEUE_DEDUP>(worker_id, terminator, rp, req);\n+        mark_loop<false, ENQUEUE_DEDUP>(worker_id, terminator, rp, generation, req);\n@@ -114,1 +121,1 @@\n-        mark_loop_prework<false, ALWAYS_DEDUP>(worker_id, terminator, rp, req);\n+        mark_loop<false, ALWAYS_DEDUP>(worker_id, terminator, rp, generation, req);\n@@ -120,1 +127,1 @@\n-template <class T, bool CANCELLABLE, StringDedupMode STRING_DEDUP>\n+template <class T, ShenandoahGenerationType GENERATION, bool CANCELLABLE, StringDedupMode STRING_DEDUP>\n@@ -149,1 +156,1 @@\n-        do_task<T, STRING_DEDUP>(q, cl, live_data, req, &t);\n+        do_task<T, GENERATION, STRING_DEDUP>(q, cl, live_data, req, &t);\n@@ -159,1 +166,1 @@\n-  ShenandoahSATBBufferClosure drain_satb(q);\n+  ShenandoahSATBBufferClosure<GENERATION> drain_satb(q);\n@@ -178,1 +185,1 @@\n-        do_task<T, STRING_DEDUP>(q, cl, live_data, req, &t);\n+        do_task<T, GENERATION, STRING_DEDUP>(q, cl, live_data, req, &t);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.cpp","additions":23,"deletions":16,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/shenandoah\/shenandoahGenerationType.hpp\"\n@@ -53,1 +54,1 @@\n-  template<class T>\n+  template<class T, ShenandoahGenerationType GENERATION>\n@@ -68,1 +69,1 @@\n-  template <class T, StringDedupMode STRING_DEDUP>\n+  template <class T, ShenandoahGenerationType GENERATION, StringDedupMode STRING_DEDUP>\n@@ -77,0 +78,1 @@\n+  template <ShenandoahGenerationType GENERATION>\n@@ -79,1 +81,1 @@\n-  template <class T, bool CANCELLABLE,StringDedupMode STRING_DEDUP>\n+  template <class T, ShenandoahGenerationType GENERATION, bool CANCELLABLE, StringDedupMode STRING_DEDUP>\n@@ -82,1 +84,1 @@\n-  template <bool CANCELLABLE, StringDedupMode STRING_DEDUP>\n+  template <ShenandoahGenerationType GENERATION, bool CANCELLABLE, StringDedupMode STRING_DEDUP>\n@@ -88,0 +90,1 @@\n+  template<bool CANCELLABLE, StringDedupMode STRING_DEDUP>\n@@ -89,1 +92,3 @@\n-                 bool cancellable, StringDedupMode dedup_mode, StringDedup::Requests* const req);\n+                 ShenandoahGenerationType generation, StringDedup::Requests* const req);\n+  void mark_loop(uint worker_id, TaskTerminator* terminator, ShenandoahReferenceProcessor *rp,\n+                 ShenandoahGenerationType generation, bool cancellable, StringDedupMode dedup_mode, StringDedup::Requests* const req);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.hpp","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-template <class T, StringDedupMode STRING_DEDUP>\n+template <class T, ShenandoahGenerationType GENERATION, StringDedupMode STRING_DEDUP>\n@@ -98,1 +98,1 @@\n-      count_liveness(live_data, obj);\n+      count_liveness<GENERATION>(live_data, obj);\n@@ -106,0 +106,1 @@\n+template <ShenandoahGenerationType GENERATION>\n@@ -233,0 +234,1 @@\n+template <ShenandoahGenerationType GENERATION>\n@@ -250,1 +252,1 @@\n-      ShenandoahMark::mark_through_ref<oop>(p, _queue, _mark_context, false);\n+      ShenandoahMark::mark_through_ref<oop, GENERATION>(p, _queue, _mark_context, false);\n@@ -255,1 +257,1 @@\n-template<class T>\n+template<class T, ShenandoahGenerationType GENERATION>\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/shenandoah\/shenandoahGenerationType.hpp\"\n@@ -43,1 +44,1 @@\n-  template <class T>\n+  template <class T, ShenandoahGenerationType GENERATION>\n@@ -67,1 +68,1 @@\n-  template <class T>\n+  template <class T, ShenandoahGenerationType GENERATION>\n@@ -78,0 +79,1 @@\n+template <ShenandoahGenerationType GENERATION>\n@@ -81,1 +83,1 @@\n-  inline void do_oop_work(T* p)     { work<T>(p); }\n+  inline void do_oop_work(T* p)     { work<T, GENERATION>(p); }\n@@ -91,0 +93,1 @@\n+template <ShenandoahGenerationType GENERATION>\n@@ -94,1 +97,1 @@\n-  inline void do_oop_work(T* p)     { work<T>(p); }\n+  inline void do_oop_work(T* p)     { work<T, GENERATION>(p); }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.hpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-template<class T>\n+template<class T, ShenandoahGenerationType GENERATION>\n@@ -35,1 +35,1 @@\n-  ShenandoahMark::mark_through_ref<T>(p, _queue, _mark_context, _weak);\n+  ShenandoahMark::mark_through_ref<T, GENERATION>(p, _queue, _mark_context, _weak);\n@@ -38,1 +38,1 @@\n-template<class T>\n+template<class T, ShenandoahGenerationType GENERATION>\n@@ -44,1 +44,1 @@\n-  ShenandoahMarkRefsSuperClosure::work<T>(p);\n+  ShenandoahMarkRefsSuperClosure::work<T, GENERATION>(p);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"gc\/shenandoah\/shenandoahGenerationType.hpp\"\n@@ -39,0 +40,1 @@\n+template<ShenandoahGenerationType GENERATION>\n@@ -53,1 +55,2 @@\n-ShenandoahInitMarkRootsClosure::ShenandoahInitMarkRootsClosure(ShenandoahObjToScanQueue* q) :\n+template <ShenandoahGenerationType GENERATION>\n+ShenandoahInitMarkRootsClosure<GENERATION>::ShenandoahInitMarkRootsClosure(ShenandoahObjToScanQueue* q) :\n@@ -58,0 +61,1 @@\n+template <ShenandoahGenerationType GENERATION>\n@@ -59,2 +63,2 @@\n-void ShenandoahInitMarkRootsClosure::do_oop_work(T* p) {\n-  ShenandoahMark::mark_through_ref<T>(p, _queue, _mark_context, false);\n+void ShenandoahInitMarkRootsClosure<GENERATION>::do_oop_work(T* p) {\n+  ShenandoahMark::mark_through_ref<T, GENERATION>(p, _queue, _mark_context, false);\n@@ -137,1 +141,1 @@\n-  ShenandoahInitMarkRootsClosure  init_mark(task_queues()->queue(worker_id));\n+  ShenandoahInitMarkRootsClosure<NON_GEN>  init_mark(task_queues()->queue(worker_id));\n@@ -147,2 +151,1 @@\n-  mark_loop(worker_id, &_terminator, rp,\n-            false \/* not cancellable *\/,\n+  mark_loop(worker_id, &_terminator, rp, NON_GEN, false \/* not cancellable *\/,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSTWMark.cpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"}]}