{"files":[{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package org.openjdk.bench.java.util.stream.tasks;\n-\n-import java.io.BufferedReader;\n-import java.io.IOException;\n-import java.io.InputStreamReader;\n-import java.util.stream.Stream;\n-\n-public class DataProviders {\n-    public static Stream<String> dictionary() throws IOException {\n-        BufferedReader r = new BufferedReader(new InputStreamReader(DataProviders.class.getResourceAsStream(\"cmudict-0.7b.txt\")));\n-        \/\/ Strip out the copyright notice and special chars\n-        return r.lines().filter(w -> w.charAt(0) >= 'A' && w.charAt(0) <= 'Z').map(w -> w.substring(0, w.indexOf(\" \"))).onClose(() -> {\n-            try {\n-                r.close();\n-            } catch (IOException e) {\n-                \/\/ swallow\n-            }\n-        });\n-    }\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/stream\/tasks\/DataProviders.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,150 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.bench.java.util.stream.tasks.DictionaryWordValue;\n-\n-import org.openjdk.jmh.annotations.Benchmark;\n-import org.openjdk.jmh.annotations.BenchmarkMode;\n-import org.openjdk.jmh.annotations.Fork;\n-import org.openjdk.jmh.annotations.Measurement;\n-import org.openjdk.jmh.annotations.Level;\n-import org.openjdk.jmh.annotations.Mode;\n-import org.openjdk.jmh.annotations.OutputTimeUnit;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.Setup;\n-import org.openjdk.jmh.annotations.State;\n-import org.openjdk.jmh.annotations.Warmup;\n-\n-import java.util.Arrays;\n-import java.util.concurrent.RecursiveTask;\n-import java.util.concurrent.TimeUnit;\n-import java.util.function.BinaryOperator;\n-import java.util.function.Function;\n-\n-\n-\/**\n- * Bulk scenario: searching max \"wordValue\" through the dictionary (array of strings).\n- *\/\n-@BenchmarkMode(Mode.Throughput)\n-@Warmup(iterations = 4, time = 2, timeUnit = TimeUnit.SECONDS)\n-@Measurement(iterations = 4, time = 2, timeUnit = TimeUnit.SECONDS)\n-@Fork(value = 3)\n-@OutputTimeUnit(TimeUnit.SECONDS)\n-@State(Scope.Benchmark)\n-public class Bulk {\n-\n-    @Setup(Level.Trial)\n-    public void loadData() {\n-        \/\/ cause classload and problem initialization\n-        DictionaryProblem.class.getName();\n-    }\n-\n-    @Benchmark\n-    public int hm_seq() {\n-        int max = 0;\n-        for (String s : DictionaryProblem.get()) {\n-            int v = DictionaryProblem.wordValue(s);\n-            if (v > max) {\n-                max = v;\n-            }\n-        }\n-        return max;\n-    }\n-\n-    @Benchmark\n-    public int hm_par() {\n-        return new Task(DictionaryProblem.get(), 0, DictionaryProblem.get().length).invoke();\n-    }\n-\n-    @Benchmark\n-    public int bulk_seq_inner() {\n-        return Arrays.stream(DictionaryProblem.get())\n-                .map(new Function<String, Integer>() {\n-                    @Override\n-                    public Integer apply(String s) {\n-                        return DictionaryProblem.wordValue(s);\n-                    }\n-                })\n-                .reduce(0, new BinaryOperator<Integer>() {\n-                    @Override\n-                    public Integer apply(Integer l, Integer r) {\n-                        return l > r ? l : r;\n-                    }\n-                });\n-    }\n-\n-    @Benchmark\n-    public int bulk_par_inner() {\n-        return Arrays.stream(DictionaryProblem.get()).parallel()\n-                .map(new Function<String, Integer>() {\n-                    @Override\n-                    public Integer apply(String s) {\n-                        return DictionaryProblem.wordValue(s);\n-                    }\n-                })\n-                .reduce(0, new BinaryOperator<Integer>() {\n-                    @Override\n-                    public Integer apply(Integer l, Integer r) {\n-                        return l > r ? l : r;\n-                    }\n-                });\n-    }\n-\n-\n-    public static class Task extends RecursiveTask<Integer> {\n-        private static final int FORK_LIMIT = 500;\n-\n-        private final String[] words;\n-        private final int start, end;\n-\n-        Task(String[] w, int start, int end) {\n-            this.words = w;\n-            this.start = start;\n-            this.end = end;\n-        }\n-\n-        @Override\n-        protected Integer compute() {\n-            int size = end - start;\n-            if (size > FORK_LIMIT) {\n-                int mid = start + size \/ 2;\n-                Task t1 = new Task(words, start, mid);\n-                Task t2 = new Task(words, mid, end);\n-                t1.fork();\n-                Integer v2 = t2.invoke();\n-                Integer v1 = t1.join();\n-                return Math.max(v1, v2);\n-            } else {\n-                int max = 0;\n-                for (int i = start; i < end; i++) {\n-                    int v = DictionaryProblem.wordValue(words[i]);\n-                    if (v > max) {\n-                        max = v;\n-                    }\n-                }\n-                return max;\n-            }\n-        }\n-    }\n-\n-\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/stream\/tasks\/DictionaryWordValue\/Bulk.java","additions":0,"deletions":150,"binary":false,"changes":150,"status":"deleted"},{"patch":"@@ -1,101 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.bench.java.util.stream.tasks.DictionaryWordValue;\n-\n-import org.openjdk.bench.java.util.stream.tasks.DataProviders;\n-\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-public class DictionaryProblem {\n-\n-    private static final int DICTIONARY_REPEAT_RATE = 40;\n-\n-    private static final String[] dict;\n-\n-    static {\n-        int size;\n-        int idx = 0;\n-        List<String> d = Collections.emptyList();\n-        try (Stream<String> s = DataProviders.dictionary()) {\n-            d = s.collect(Collectors.<String>toList());\n-        } catch (Exception e) {\n-            \/\/ ignore\n-        }\n-        size = d.size() * DICTIONARY_REPEAT_RATE;\n-        dict = new String[size];\n-        for (int i = 0; i < DICTIONARY_REPEAT_RATE; i++) {\n-            d.sort(new IdxComparator(i));\n-            for (String s : d) {\n-                \/\/ copy the whole string\n-                dict[idx++] = new String(s.toCharArray());\n-            }\n-        }\n-        assert (idx == dict.length);\n-    }\n-\n-    public static String[] get() {\n-        return dict;\n-    }\n-\n-    \/**\n-     * A word value is the sum of alphabet value of each characters in a word.\n-     *\n-     * @param word The word\n-     * @return The word value\n-     *\/\n-    public static int wordValue(String word) {\n-        char[] ar = word.toLowerCase().toCharArray();\n-        int value = 0;\n-        for (char c: ar) {\n-            int v = c - 'a' + 1;\n-            if (v < 1 || v > 26) {\n-                \/\/ skip non-alphabet\n-                continue;\n-            }\n-            value += (c - 'a' + 1);\n-        }\n-        return value;\n-    }\n-\n-    static class IdxComparator implements Comparator<String> {\n-        private final int index;\n-\n-        public IdxComparator(int i) {\n-            index = i;\n-        }\n-\n-        @Override\n-        public int compare(String a, String b) {\n-            if (a.length() > index && b.length() > index) {\n-                return (a.charAt(index) - b.charAt(index));\n-            } else {\n-                return (a.length() - b.length());\n-            }\n-        }\n-    }\n-\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/stream\/tasks\/DictionaryWordValue\/DictionaryProblem.java","additions":0,"deletions":101,"binary":false,"changes":101,"status":"deleted"},{"patch":"@@ -1,89 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.bench.java.util.stream.tasks.DictionaryWordValue;\n-\n-import org.openjdk.jmh.annotations.Benchmark;\n-import org.openjdk.jmh.annotations.BenchmarkMode;\n-import org.openjdk.jmh.annotations.Fork;\n-import org.openjdk.jmh.annotations.Measurement;\n-import org.openjdk.jmh.annotations.Level;\n-import org.openjdk.jmh.annotations.Mode;\n-import org.openjdk.jmh.annotations.OutputTimeUnit;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.Setup;\n-import org.openjdk.jmh.annotations.State;\n-import org.openjdk.jmh.annotations.Warmup;\n-\n-import java.util.Arrays;\n-import java.util.concurrent.TimeUnit;\n-\n-\/**\n- * Bulk scenario: searching max \"wordValue\" through the dictionary (array of strings).\n- *\/\n-@BenchmarkMode(Mode.Throughput)\n-@Warmup(iterations = 4, time = 2, timeUnit = TimeUnit.SECONDS)\n-@Measurement(iterations = 4, time = 2, timeUnit = TimeUnit.SECONDS)\n-@Fork(value = 3)\n-@OutputTimeUnit(TimeUnit.SECONDS)\n-@State(Scope.Benchmark)\n-public class Lambda {\n-\n-    @Setup(Level.Trial)\n-    public void loadData() {\n-        \/\/ cause classload and problem initialization\n-        DictionaryProblem.class.getName();\n-    }\n-\n-    public static Integer maxInt(Integer l, Integer r) {\n-        return l > r ? l : r;\n-    }\n-\n-    @Benchmark\n-    public int bulk_seq_lambda() {\n-        return Arrays.stream(DictionaryProblem.get())\n-                .map(s -> DictionaryProblem.wordValue(s))\n-                .reduce(0, (l, r) -> l > r ? l : r);\n-    }\n-\n-    @Benchmark\n-    public int bulk_seq_mref() {\n-        return Arrays.stream(DictionaryProblem.get())\n-                .map(DictionaryProblem::wordValue)\n-                .reduce(0, Lambda::maxInt);\n-    }\n-\n-    @Benchmark\n-    public int bulk_par_lambda() {\n-        return Arrays.stream(DictionaryProblem.get()).parallel()\n-                .map(s -> DictionaryProblem.wordValue(s))\n-                .reduce(0, (l, r) -> l > r ? l : r);\n-    }\n-\n-    @Benchmark\n-    public int bulk_par_mref() {\n-        return Arrays.stream(DictionaryProblem.get()).parallel()\n-                .map(DictionaryProblem::wordValue)\n-                .reduce(0, Lambda::maxInt);\n-    }\n-\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/stream\/tasks\/DictionaryWordValue\/Lambda.java","additions":0,"deletions":89,"binary":false,"changes":89,"status":"deleted"},{"patch":"@@ -1,229 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package org.openjdk.bench.java.util.stream.tasks.PhoneCode;\n-\n-import org.openjdk.jmh.annotations.Benchmark;\n-import org.openjdk.jmh.annotations.BenchmarkMode;\n-import org.openjdk.jmh.annotations.Fork;\n-import org.openjdk.jmh.annotations.Measurement;\n-import org.openjdk.jmh.annotations.Mode;\n-import org.openjdk.jmh.annotations.OutputTimeUnit;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.State;\n-import org.openjdk.jmh.annotations.Warmup;\n-\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.concurrent.TimeUnit;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n-import java.util.stream.Stream;\n-\n-import static org.openjdk.bench.java.util.stream.tasks.PhoneCode.PhoneCodeProblem.wordsForNumber;\n-\n-\/**\n- * This benchmark compare various strategies solving the phone code problem.\n- * The result should offer some insights on strength\/drawbacks of underlying\n- * implementation.\n- *\/\n-@BenchmarkMode(Mode.Throughput)\n-@Warmup(iterations = 4, time = 2, timeUnit = TimeUnit.SECONDS)\n-@Measurement(iterations = 4, time = 2, timeUnit = TimeUnit.SECONDS)\n-@Fork(value = 3)\n-@OutputTimeUnit(TimeUnit.MINUTES)\n-@State(Scope.Benchmark)\n-public class Bulk {\n-    \/\/ several method choke up with 6-digit problem\n-    private final static int SIZE = 5;\n-    private Stream<String> join(String head,\n-                                String tail,\n-                                Function<String, Stream<String>> encoder)\n-    {\n-        Stream<String> s = wordsForNumber(head).stream();\n-\n-        if (! tail.isEmpty()) {\n-            s = s.flatMap(h -> encoder.apply(tail).map(t -> h + \" \" + t));\n-        }\n-\n-        return s;\n-    }\n-\n-    private Stream<String> encode_par1(String number) {\n-        return IntStream.range(1, number.length() + 1)\n-                      .parallel()\n-                      .boxed()\n-                      .flatMap(i -> join(number.substring(0, i),\n-                              number.substring(i),\n-                              this::encode_par1));\n-    }\n-\n-    private Stream<String> encode_par2(String number) {\n-        return IntStream.range(1, number.length() + 1)\n-                      .boxed()\n-                      .parallel()\n-                      .flatMap(i -> join(number.substring(0, i),\n-                                         number.substring(i),\n-                                         this::encode_par2));\n-    }\n-\n-    private Stream<String> encode_ser(String number) {\n-        return IntStream.range(1, number.length() + 1)\n-                      .boxed()\n-                      .flatMap(i -> join(number.substring(0, i),\n-                                         number.substring(i),\n-                                         this::encode_ser));\n-    }\n-\n-    private Stream<String> encode_loop_concat(String number) {\n-        if (number.isEmpty()) {\n-            return Stream.empty();\n-        }\n-        \/\/ full number\n-        Stream<String> s = wordsForNumber(number).stream();\n-        \/\/ split\n-        for (int i = 1; i < number.length(); i++) {\n-            s = Stream.concat(s, join(number.substring(0, i),\n-                                       number.substring(i),\n-                                       this::encode_loop_concat));\n-        }\n-\n-        return s;\n-    }\n-\n-    private Collection<String> encode_loop_collect(String number) {\n-        if (number.isEmpty()) {\n-            return Collections.emptySet();\n-        }\n-\n-        Collection<String> rv = new HashSet<>();\n-\n-        for (int i = 1; i <= number.length(); i++) {\n-            join(number.substring(0, i),\n-                 number.substring(i),\n-                 s -> encode_loop_collect(s).stream()).forEach(rv::add);\n-        }\n-\n-        return rv;\n-    }\n-\n-    private Collection<String> encode_inline(String number) {\n-        if (number.isEmpty()) {\n-            return Collections.emptySet();\n-        }\n-\n-        Collection<String> rv = new HashSet<>();\n-\n-        for (int i = 1; i < number.length(); i++) {\n-            String front = number.substring(0, i);\n-            String rest = number.substring(i);\n-            wordsForNumber(front).stream()\n-                .flatMap(h -> encode_inline(rest).stream().map(t -> h + \" \" + t))\n-                .forEach(rv::add);\n-        }\n-\n-        rv.addAll(wordsForNumber(number));\n-\n-        return rv;\n-    }\n-\n-    @Benchmark\n-    public int bulk_par_range_concurrent() {\n-        \/\/ force collect\n-        return PhoneCodeProblem.get(SIZE)\n-                               .flatMap(this::encode_par1)\n-                               .collect(Collectors.toConcurrentMap(\n-                                    Function.identity(),\n-                                    Function.identity(),\n-                                    (l, r) -> l))\n-                               .keySet()\n-                               .size();\n-    }\n-\n-    @Benchmark\n-    public int bulk_par_boxed_range_concurrent() {\n-        \/\/ force collect\n-        return PhoneCodeProblem.get(SIZE)\n-                               .flatMap(this::encode_par2)\n-                               .collect(Collectors.toConcurrentMap(\n-                                       Function.identity(),\n-                                       Function.identity(),\n-                                       (l, r) -> l))\n-                               .keySet()\n-                               .size();\n-    }\n-\n-    @Benchmark\n-    public int bulk_par_range() {\n-        \/\/ force collect\n-        return PhoneCodeProblem.get(SIZE)\n-                               .flatMap(this::encode_par1)\n-                               .collect(Collectors.toSet())\n-                               .size();\n-    }\n-\n-    @Benchmark\n-    public int bulk_par_boxed_range() {\n-        \/\/ force collect\n-        return PhoneCodeProblem.get(SIZE)\n-                               .flatMap(this::encode_par2)\n-                               .collect(Collectors.toSet())\n-                               .size();\n-    }\n-\n-    @Benchmark\n-    public int bulk_ser_range() {\n-        \/\/ force collect\n-        return PhoneCodeProblem.get(SIZE)\n-                               .flatMap(this::encode_ser)\n-                               .collect(Collectors.toSet())\n-                               .size();\n-    }\n-\n-    @Benchmark\n-    public int bulk_ser_loop_concat() {\n-        \/\/ force collect\n-        return PhoneCodeProblem.get(SIZE)\n-                               .flatMap(this::encode_loop_concat)\n-                               .collect(Collectors.toSet())\n-                               .size();\n-    }\n-\n-    @Benchmark\n-    public int bulk_ser_loop_collect() {\n-        return PhoneCodeProblem.get(SIZE)\n-                               .map(this::encode_loop_collect)\n-                               .map(Collection::size)\n-                               .reduce(0, Integer::sum);\n-    }\n-\n-    @Benchmark\n-    public int bulk_ser_inline() {\n-        return PhoneCodeProblem.get(SIZE)\n-                               .map(this::encode_inline)\n-                               .map(Collection::size)\n-                               .reduce(0, Integer::sum);\n-    }\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/stream\/tasks\/PhoneCode\/Bulk.java","additions":0,"deletions":229,"binary":false,"changes":229,"status":"deleted"},{"patch":"@@ -1,104 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package org.openjdk.bench.java.util.stream.tasks.PhoneCode;\n-\n-import org.openjdk.bench.java.util.stream.tasks.DataProviders;\n-\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-\/**\n- * The phone coder problem is trying to find full list of possible\n- * mnemonic combination of numbers.\n- *\n- * The solution is based on Martin Odersky's devoxx 2010 scala talk,\n- * where numbers are not allowed in the result, which is not really\n- * correct, but we don't care.\n- *\/\n-public class PhoneCodeProblem {\n-    \/\/ Map Character 'A'-'Z' to digits \"2\"-\"9\", key is charCode\n-    private static final Map<Integer, String> CHAR_CODE;\n-    \/\/ Map a string of digits to a collection of dictionary words\n-    private static final Map<String, List<String>> WORD_CODES;\n-\n-    static {\n-        HashMap<String, String> mnemonics = new HashMap<>(8);\n-        mnemonics.put(\"2\", \"ABC\");\n-        mnemonics.put(\"3\", \"DEF\");\n-        mnemonics.put(\"4\", \"GHI\");\n-        mnemonics.put(\"5\", \"JKL\");\n-        mnemonics.put(\"6\", \"MNO\");\n-        mnemonics.put(\"7\", \"PQRS\");\n-        mnemonics.put(\"8\", \"TUV\");\n-        mnemonics.put(\"9\", \"WXYZ\");\n-\n-        CHAR_CODE = new ConcurrentHashMap<>();\n-        mnemonics.entrySet().stream().forEach(e ->\n-                e.getValue().chars().forEach(c ->\n-                    { CHAR_CODE.put(c, e.getKey()); } ));\n-\n-        WORD_CODES = loadDictionary();\n-        \/\/ System.out.println(\"Dictionary loaded with \" + WORD_CODES.size() + \" number entries\");\n-    }\n-\n-    \/\/ Convert a word to its number form\n-    private static String wordToNumber(String word) {\n-        return word.chars().mapToObj(CHAR_CODE::get)\n-                           .reduce(\"\", String::concat);\n-    }\n-\n-    \/\/ Prepare number -> word lookup table\n-    private static Map<String, List<String>> loadDictionary() {\n-        try (Stream<String> s = DataProviders.dictionary()) {\n-            return s.filter(w -> w.length() > 1)\n-                    .filter(w -> w.matches(\"[a-zA-Z]*\"))\n-                    .map(String::toUpperCase)\n-                    .collect(Collectors.groupingBy(PhoneCodeProblem::wordToNumber));\n-        } catch (Exception ex) {\n-            return Collections.emptyMap();\n-        }\n-    }\n-\n-    public static Collection<String> wordsForNumber(String number) {\n-        Collection<String> rv = WORD_CODES.get(number);\n-        return (null == rv) ? Collections.emptySet() : rv;\n-    }\n-\n-    public static Stream<String> get(int length) {\n-        String digits[] = { \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" };\n-\n-        Stream<String> s = Arrays.stream(digits);\n-        for (int i = 1; i < length; i++) {\n-            s = s.flatMap(d1 -> Arrays.stream(digits).map(d2 -> d1 + d2));\n-        }\n-        return s;\n-    }\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/stream\/tasks\/PhoneCode\/PhoneCodeProblem.java","additions":0,"deletions":104,"binary":false,"changes":104,"status":"deleted"}]}