{"files":[{"patch":"@@ -0,0 +1,31 @@\n+#\n+# Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+################################################################################\n+\n+COPY += \\\n+  $(TOPDIR)\/src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/runtimelink\/upgrade_files_java.base\n+\n+################################################################################\n","filename":"make\/modules\/jdk.jlink\/Java.gmk","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -48,0 +48,1 @@\n+import java.util.Set;\n@@ -79,0 +80,1 @@\n+    private final Set<String> upgradeableFiles;\n@@ -89,0 +91,2 @@\n+     * @param taskHelper The task helper instance.\n+     * @param upgradeableFiles The set of files that are allowed for upgrades.\n@@ -94,1 +98,2 @@\n-               TaskHelper taskHelper) {\n+               TaskHelper taskHelper,\n+               Set<String> upgradeableFiles) {\n@@ -108,0 +113,1 @@\n+        this.upgradeableFiles = upgradeableFiles;\n@@ -220,1 +226,2 @@\n-                        if (shaSumMismatch(path, m.hashOrTarget, m.symlink)) {\n+                        if (!isUpgradeableFile(m.resPath) &&\n+                                shaSumMismatch(path, m.hashOrTarget, m.symlink)) {\n@@ -242,0 +249,11 @@\n+    \/**\n+     * Certain files in the a module are considered upgradeable. That is,\n+     * their hash sums aren't checked.\n+     *\n+     * @param resPath The resource path of the file to check for upgradeability.\n+     * @return {@code true} iff the file is upgradeable. {@code false} otherwise.\n+     *\/\n+    private boolean isUpgradeableFile(String resPath) {\n+        return upgradeableFiles.contains(resPath);\n+    }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/JRTArchive.java","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.HashSet;\n@@ -32,0 +33,2 @@\n+import java.util.Scanner;\n+import java.util.Set;\n@@ -45,0 +48,3 @@\n+    \/\/ meta data for upgradable files\n+    private static final String UPGRADEABLE_FILES_PATTERN = \"jdk\/tools\/jlink\/internal\/runtimelink\/upgrade_files_%s.properties\";\n+    private static final Module JDK_JLINK_MOD = LinkableRuntimeImage.class.getModule();\n@@ -65,1 +71,32 @@\n-        return LinkableRuntimeImage.class.getModule().getResourceAsStream(resourceName);\n+        return JDK_JLINK_MOD.getResourceAsStream(resourceName);\n+    }\n+\n+    private static Set<String> upgradeableFiles(String module) {\n+        String resourceName = String.format(UPGRADEABLE_FILES_PATTERN, module);\n+        InputStream filesIn = null;\n+        try {\n+            filesIn = JDK_JLINK_MOD.getResourceAsStream(resourceName);\n+        } catch (IOException e) {\n+            throw new AssertionError(\"Unexpected IO error getting res stream\");\n+        }\n+        if (filesIn == null) {\n+            \/\/ no upgradeable files\n+            return Set.of();\n+        }\n+        Set<String> upgradeableFiles = new HashSet<>();\n+        final InputStream in = filesIn;\n+        try (in;\n+             Scanner scanner = new Scanner(filesIn)) {\n+            while (scanner.hasNextLine()) {\n+                String line = scanner.nextLine();\n+                if (line.trim().startsWith(\"#\")) {\n+                    \/\/ Skip comments\n+                    continue;\n+                }\n+                upgradeableFiles.add(scanner.nextLine());\n+            }\n+        } catch (IOException e) {\n+            throw new AssertionError(\"Failure to retrieve upgradeable files for \" +\n+                                     \"module \" + module, e);\n+        }\n+        return upgradeableFiles;\n@@ -84,1 +121,7 @@\n-        return new JRTArchive(module, path, !ignoreModifiedRuntime, perModuleDiff, taskHelper);\n+        Set<String> upgradeableFiles = upgradeableFiles(module);\n+        return new JRTArchive(module,\n+                              path,\n+                              !ignoreModifiedRuntime,\n+                              perModuleDiff,\n+                              taskHelper,\n+                              upgradeableFiles);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/LinkableRuntimeImage.java","additions":45,"deletions":2,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -0,0 +1,3 @@\n+# Resource paths of files allowed to be upgraded (in java.base)\n+lib\/tzdb.dat\n+lib\/security\/cacerts\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/runtimelink\/upgrade_files_java.base","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -0,0 +1,153 @@\n+\/*\n+ * Copyright (c) 2025, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Path;\n+import java.security.KeyStore;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import tests.Helper;\n+\n+\/*\n+ * @test\n+ * @summary Verify warnings are being produced when linking from the run-time\n+ *          image and files have been modified\n+ * @requires (vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n+ * @library ..\/..\/lib \/test\/lib\n+ * @modules java.base\/jdk.internal.jimage\n+ *          jdk.jlink\/jdk.tools.jlink.internal\n+ *          jdk.jlink\/jdk.tools.jlink.plugin\n+ *          jdk.jlink\/jdk.tools.jimage\n+ * @build tests.* jdk.test.lib.process.OutputAnalyzer\n+ *        jdk.test.lib.process.ProcessTools\n+ * @run main\/othervm -Xmx1g UpgradeableFileCacertsTest\n+ *\/\n+public class UpgradeableFileCacertsTest extends ModifiedFilesTest {\n+\n+    \/*\n+     * Generated with:\n+     * $ rm -f server.keystore && keytool -genkey -alias jlink-upgrade-test \\\n+     *                              -keyalg RSA -dname CN=jlink-upgrade-test \\\n+     *                              -storepass changeit -keysize 3072 -sigalg SHA512withRSA \\\n+     *                              -validity 7300 -keystore server.keystore\n+     * $ keytool -export -alias jlink-upgrade-test -storepass changeit \\\n+     *           -keystore server.keystore -rfc\n+     *\/\n+    private static final String CERT = \"\"\"\n+            -----BEGIN CERTIFICATE-----\n+            MIID3jCCAkagAwIBAgIJALiT\/+HXBkSIMA0GCSqGSIb3DQEBDQUAMB0xGzAZBgNV\n+            BAMTEmpsaW5rLXVwZ3JhZGUtdGVzdDAeFw0yNTA0MDQxMjA3MjJaFw00NTAzMzAx\n+            MjA3MjJaMB0xGzAZBgNVBAMTEmpsaW5rLXVwZ3JhZGUtdGVzdDCCAaIwDQYJKoZI\n+            hvcNAQEBBQADggGPADCCAYoCggGBANmrnCDKqSXEJRIiSi4yHWN97ILls3RqYjED\n+            la3AZTeXnZrrEIgSjVFUMxCztYqbWoVzKa2lov42Vue2BXVYffcQ8TKc2EJDNO+2\n+            uRKQZpsN7RI4QoVBR2Rq8emrO8CrdOQT7Hh4agxkN9AOvGKMFdt+fXeCIPIuflKP\n+            f+RfvhLfC2A70Y+Uu74C5uWgLloA\/HF0SsVxf9KmqS9fZBQaiTYhKyoDghCRlWpa\n+            nPIHB1XVaRdw8aSpCuzIOQzSCTTlLcammJkBjbFwMZdQG7eglTWzIYryZwe\/cyY2\n+            xctLVW3xhUHvnMFG+MajeFny2mxNu163Rxf\/rBu4e7jRC\/LGSU784nJGapq5K170\n+            WbaeceKp+YORJBviFFORrmkPIwIgE+iGCD6PD6Xwu8vcpeuTVDgsSWMlfgCL3NoI\n+            GXmdGiI2Xc\/hQX7uzu3UBF6IcPDMTcYr2JKYbgu3v2\/vDlJu3qO2ycUeePo5jhuG\n+            X2WgcHkb6uOU4W5qdbCA+wFPVZBuwQIDAQABoyEwHzAdBgNVHQ4EFgQUtMJM0+ct\n+            ssKqryRckk4YEWdYAZkwDQYJKoZIhvcNAQENBQADggGBAI8A6gJQ8wDx12sy2ZI4\n+            1q9b+WG6w3LcFEF6Fko5NBizhtfmVycQv4mBa\/NJgx4DZmd+5d60gJcTp\/hJXGY0\n+            LZyFilm\/AgxsLNUUQLbHAV6TWqd3ODWwswAuew9sFU6izl286a9W65tbMWL5r1EA\n+            t34ZYVWZYbCS9+czU98WomH4uarRAOlzcEUui3ZX6ZcQxWbz\/R2wtKcUPUAYnsqH\n+            JPivpE25G5xW2Dp\/yeQTrlffq9OLgZWVz0jtOguBUMnsUsgCcpQZtqZX08\/\/wtpz\n+            ohLHFGvpXTPbRumRasWWtnRR\/QqGRT66tYDqybXXz37UtKZ8VKW0sv2ypVbmAEs5\n+            pLkA\/3XiXlstJuCD6cW0Gfbpb5rrPPD46O3FDVlmqlTH3b\/MsiQREdydqGzqY7uG\n+            AA2GFVaKFASA5ls01CfHLAcrKxSVixditXvsjeIqhddB7Pnbsx20RdzPQoeo9\/hF\n+            WeIrh4zePDPZChuLR8ZyxeVJhLB71nTrTDDjwXarVez9Xw==\n+            -----END CERTIFICATE-----\n+            \"\"\";\n+\n+    private static final String CERT_ALIAS = \"jlink-upgrade-test\";\n+\n+    public static void main(String[] args) throws Exception {\n+        UpgradeableFileCacertsTest test = new UpgradeableFileCacertsTest();\n+        test.run();\n+    }\n+\n+    @Override\n+    String initialImageName() {\n+        return \"java-base-jlink-upgrade-cacerts\";\n+    }\n+\n+    @Override\n+    void testAndAssert(Path modifiedFile, Helper helper, Path initialImage) throws Exception {\n+        CapturingHandler handler = new CapturingHandler();\n+        jlinkUsingImage(new JlinkSpecBuilder()\n+                                .helper(helper)\n+                                .imagePath(initialImage)\n+                                .name(\"java-base-jlink-upgrade-cacerts-target\")\n+                                .addModule(\"java.base\")\n+                                .validatingModule(\"java.base\")\n+                                .build(), handler);\n+        OutputAnalyzer analyzer = handler.analyzer();\n+        \/\/ verify we don't get any modified warning\n+        analyzer.stdoutShouldNotContain(modifiedFile.toString() + \" has been modified\");\n+        analyzer.stdoutShouldNotContain(\"java.lang.IllegalArgumentException\");\n+        analyzer.stdoutShouldNotContain(\"IOException\");\n+    }\n+\n+    \/\/ Add an extra certificate in the cacerts file so that it no longer matches\n+    \/\/ the recorded hash sum at build time.\n+    protected Path modifyFileInImage(Path jmodLessImg)\n+            throws IOException, AssertionError {\n+        Path cacerts = jmodLessImg.resolve(Path.of(\"lib\", \"security\", \"cacerts\"));\n+        try (FileInputStream fin = new FileInputStream(cacerts.toFile())) {\n+            KeyStore certStore = KeyStore.getInstance(cacerts.toFile(),\n+                                                      (char[])null);\n+            certStore.load(fin, (char[])null);\n+            X509Certificate cert;\n+            try (ByteArrayInputStream bin = new ByteArrayInputStream(CERT.getBytes())) {\n+                cert = (X509Certificate)generateCertificate(bin);\n+            } catch (ClassCastException | CertificateException ce) {\n+                throw new AssertionError(\"Test failed unexpectedly\", ce);\n+            }\n+            certStore.setCertificateEntry(CERT_ALIAS, cert);\n+            ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+            certStore.store(bout, (char[])null);\n+            try (FileOutputStream fout = new FileOutputStream(cacerts.toFile())) {\n+                fout.write(bout.toByteArray());\n+            }\n+        } catch (Exception e) {\n+            throw new AssertionError(\"Test failed unexpectedly: \", e);\n+        }\n+        return cacerts;\n+    }\n+\n+    private Certificate generateCertificate(InputStream in)\n+            throws CertificateException, IOException {\n+        byte[] data = in.readAllBytes();\n+        return CertificateFactory.getInstance(\"X.509\")\n+                                 .generateCertificate(new ByteArrayInputStream(data));\n+    }\n+}\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/UpgradeableFileCacertsTest.java","additions":153,"deletions":0,"binary":false,"changes":153,"status":"added"}]}