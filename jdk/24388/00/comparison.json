{"files":[{"patch":"@@ -48,0 +48,1 @@\n+import java.util.Set;\n@@ -66,0 +67,4 @@\n+    \/\/ Set of files in java.base that are allowed to be upgradable.\n+    private static final Set<String> UPGRADEABLE_FILES = Set.of(\"lib\/tzdb.dat\",\n+                                                                \"lib\/security\/cacerts\");\n+    private static final String JAVA_BASE = \"java.base\";\n@@ -79,0 +84,1 @@\n+    private final Set<String> upgradeableFiles;\n@@ -89,0 +95,2 @@\n+     * @param taskHelper The task helper instance.\n+     * @param upgradeableFiles The set of files that are allowed for upgrades.\n@@ -94,1 +102,2 @@\n-               TaskHelper taskHelper) {\n+               TaskHelper taskHelper,\n+               Set<String> upgradeableFiles) {\n@@ -108,0 +117,1 @@\n+        this.upgradeableFiles = upgradeableFiles;\n@@ -220,1 +230,2 @@\n-                        if (shaSumMismatch(path, m.hashOrTarget, m.symlink)) {\n+                        if (!isUpgradeableFile(m.resPath) &&\n+                                shaSumMismatch(path, m.hashOrTarget, m.symlink)) {\n@@ -223,0 +234,8 @@\n+                                \/\/ Add hint for upgradeable files\n+                                if (JAVA_BASE.equals(module) &&\n+                                        UPGRADEABLE_FILES.contains(m.resPath)) {\n+                                    msg += System.lineSeparator();\n+                                    msg += taskHelper.getMessage(\"err.runtime.link.modified.file.upgrade.hint\",\n+                                                                 module,\n+                                                                 m.resPath);\n+                                }\n@@ -242,0 +261,13 @@\n+    \/**\n+     * Certain files in the java.base module are considered upgradeable. That is,\n+     * their hash sums aren't checked if so permitted with a CLI switch.\n+     *\n+     * @param resPath The resource path of the file to check for upgradeability.\n+     * @return {@code true} iff the file is upgradeable. {@code false} otherwise.\n+     *\/\n+    private boolean isUpgradeableFile(String resPath) {\n+        return JAVA_BASE.equals(module) &&\n+                upgradeableFiles.contains(resPath) &&\n+                UPGRADEABLE_FILES.contains(resPath);\n+    }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/JRTArchive.java","additions":34,"deletions":2,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -151,1 +151,1 @@\n-        private final boolean ignoreModifiedRuntime;\n+        private final LinkableRuntimeImage.Config runtimeImageConfig;\n@@ -165,1 +165,1 @@\n-                                  boolean ignoreModifiedRuntime,\n+                                  LinkableRuntimeImage.Config runtimeImageConfig,\n@@ -171,1 +171,1 @@\n-            this.ignoreModifiedRuntime = ignoreModifiedRuntime;\n+            this.runtimeImageConfig = runtimeImageConfig;\n@@ -201,2 +201,2 @@\n-        public boolean ignoreModifiedRuntime() {\n-            return ignoreModifiedRuntime;\n+        public LinkableRuntimeImage.Config runtimeImageConfig() {\n+            return runtimeImageConfig;\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/Jlink.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -194,1 +194,13 @@\n-        }, true, \"--generate-linkable-runtime\")\n+        }, true, \"--generate-linkable-runtime\"),\n+        new Option<JlinkTask>(true, (task, opt, arg) -> {\n+            \/\/ Allow multiple values, separated by comma in addition to\n+            \/\/ multiple times the same option.\n+            Arrays.asList(arg.split(\",\")).stream()\n+                .forEach(v -> {\n+                    \/\/ <module-name>\/<file-path>\n+                    String[] tokens = v.split(\"\/\", 2);\n+                    Set<String> moduleSet = task.options.upgradeableFiles.computeIfAbsent(tokens[0],\n+                                                                                          k -> new HashSet<>());\n+                    moduleSet.add(tokens[1]);\n+                });\n+        }, true, \"--upgrade-files\"),\n@@ -238,0 +250,1 @@\n+        final Map<String, Set<String>> upgradeableFiles = new HashMap<>();\n@@ -462,0 +475,3 @@\n+        LinkableRuntimeImage.Config linkableRuntimeConfig = new LinkableRuntimeImage.Config(\n+                options.ignoreModifiedRuntime,\n+                isLinkFromRuntime ? options.upgradeableFiles : null);\n@@ -466,1 +482,1 @@\n-                                      options.ignoreModifiedRuntime,\n+                                      linkableRuntimeConfig,\n@@ -791,1 +807,1 @@\n-            return LinkableRuntimeImage.newArchive(module, path, config.ignoreModifiedRuntime(), taskHelper);\n+            return LinkableRuntimeImage.newArchive(module, path, config.runtimeImageConfig(), taskHelper);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/JlinkTask.java","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Red Hat, Inc.\n+ * Copyright (c) 2024, 2025, Red Hat, Inc.\n@@ -32,0 +32,2 @@\n+import java.util.Map;\n+import java.util.Set;\n@@ -70,1 +72,1 @@\n-                                     boolean ignoreModifiedRuntime,\n+                                     Config config,\n@@ -84,1 +86,7 @@\n-        return new JRTArchive(module, path, !ignoreModifiedRuntime, perModuleDiff, taskHelper);\n+        return new JRTArchive(module,\n+                              path,\n+                              !config.ignoreModifiedRuntime,\n+                              perModuleDiff,\n+                              taskHelper,\n+                              \/\/ Empty set if no upgradable files for the module\n+                              config.upgradeableFiles.computeIfAbsent(module, k -> Set.of()));\n@@ -87,1 +95,2 @@\n-\n+    static record Config(boolean ignoreModifiedRuntime,\n+                         Map<String, Set<String>> upgradeableFiles) {}\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/LinkableRuntimeImage.java","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -128,0 +128,2 @@\n+err.runtime.link.modified.file.upgrade.hint=Hint: {1} is an upgradeable file.\\\n+\\ Add --upgrade-files={0}\/{1} to allow the upgrade.\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/jlink.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -162,1 +162,1 @@\n-                false \/* ignore modified runtime *\/,\n+                null \/* run-time image link config *\/,\n","filename":"test\/jdk\/tools\/jlink\/IntegrationTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -406,0 +406,11 @@\n+\n+        \/\/ Basic upgrade-files option parsing test\n+        {\n+            String imageDir = \"bug8353185\";\n+            JImageGenerator.getJLinkTask()\n+                    .output(helper.createNewImageDir(imageDir))\n+                    .addMods(\"java.base\")\n+                    .option(\"--upgrade-files=java.base\/foo\/bar,java.base\/lib\/security\/cacerts\")\n+                    .option(\"--upgrade-files=java.base\/lib\/tzdb.dat\")\n+                    .call().assertSuccess();\n+        }\n","filename":"test\/jdk\/tools\/jlink\/JLinkTest.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"}]}