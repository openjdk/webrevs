{"files":[{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2023, 2024, JetBrains s.r.o.. All rights reserved.\n+ * Copyright (c) 2022, 2024, JetBrains s.r.o.. All rights reserved.\n@@ -66,0 +66,2 @@\n+import java.io.File;\n+import java.io.FileOutputStream;\n@@ -67,0 +69,3 @@\n+import java.io.PrintWriter;\n+import java.nio.charset.Charset;\n+\n@@ -70,1 +75,0 @@\n-import java.util.Collections;\n@@ -86,0 +90,1 @@\n+import java.util.regex.Pattern;\n@@ -97,1 +102,2 @@\n-    private final static String VERSION = \"Render_Perf_Test 2023.12\";\n+    private final static String VERSION = \"Render_Perf_Test 2024.02\";\n+\n@@ -120,0 +126,1 @@\n+    \/\/ System properties:\n@@ -123,0 +130,1 @@\n+    private final static boolean DUMP_SAMPLES = \"true\".equalsIgnoreCase(System.getProperty(\"DUMP_SAMPLES\", \"false\"));\n@@ -135,0 +143,4 @@\n+    \/\/ time scale multiplier to get more samples so refined metrics:\n+    private final static int TIME_SCALE = Integer.getInteger(\"TIME_SCALE\", 1);\n+\n+    \/\/ default settings:\n@@ -136,0 +148,1 @@\n+    private static boolean VERBOSE_FONT_CONFIG = false;\n@@ -154,1 +167,2 @@\n-    private final static String TEST_TEXT = TEXT_VERSION ? VERSION : \"The quick brown fox jumps over the lazy dog\";\n+    \/\/ Test attributes:\n+    private static String TEXT_STR = TEXT_VERSION ? VERSION : \"The quick brown fox jumps over the lazy dog\";\n@@ -156,1 +170,5 @@\n-    private final static int COUNT = 600;\n+    private static String TEXT_FONT = \"Dialog\";\n+    private static int TEXT_SIZE_DEFAULT = 12;\n+    private static int TEXT_SIZE_LARGE = 32;\n+\n+    private final static int COUNT = 600 * TIME_SCALE;\n@@ -158,1 +176,3 @@\n-    private final static int WARMUP_COUNT = MIN_COUNT;\n+    private final static int MAX_SAMPLE_COUNT = 2 * COUNT;\n+\n+    private static int WARMUP_COUNT = MIN_COUNT;\n@@ -163,3 +183,3 @@\n-    private final static long MIN_MEASURE_TIME_NS = 1000L * 1000 * 1000;\n-    private final static long MAX_MEASURE_TIME_NS = 6000L * 1000 * 1000;\n-    private final static int MAX_FRAME_CYCLES = 3000 \/ CYCLE_DELAY;\n+    private final static long MIN_MEASURE_TIME_NS = 1000L * 1000 * 1000 * TIME_SCALE; \/\/ 1s min\n+    private final static long MAX_MEASURE_TIME_NS = 6000L * 1000 * 1000 * TIME_SCALE; \/\/ 6s max\n+    private final static int MAX_FRAME_CYCLES = 1000 * TIME_SCALE \/ CYCLE_DELAY;\n@@ -203,1 +223,1 @@\n-                            : RenderingHints.VALUE_TEXT_ANTIALIAS_DEFAULT);\n+                            : RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);\n@@ -408,1 +428,2 @@\n-        float r;\n+        final float r;\n+        final Font font;\n@@ -411,0 +432,4 @@\n+            this(r, TEXT_SIZE_DEFAULT);\n+        }\n+\n+        WhiteTextParticleRenderer(float r, int fontSize) {\n@@ -412,0 +437,1 @@\n+            font = new Font(TEXT_FONT, Font.PLAIN, fontSize);\n@@ -421,3 +447,4 @@\n-            g2d.drawString(TEST_TEXT, (int) (x[id] - r), (int) (y[id] - r));\n-            g2d.drawString(TEST_TEXT, (int) (x[id] - r), (int) y[id]);\n-            g2d.drawString(TEST_TEXT, (int) (x[id] - r), (int) (y[id] + r));\n+            g2d.setFont(font);\n+            g2d.drawString(TEXT_STR, (int) (x[id] - r), (int) (y[id] - r));\n+            g2d.drawString(TEXT_STR, (int) (x[id] - r), (int) y[id]);\n+            g2d.drawString(TEXT_STR, (int) (x[id] - r), (int) (y[id] + r));\n@@ -433,1 +460,5 @@\n-            super(r);\n+            this(n,r, TEXT_SIZE_DEFAULT);\n+        }\n+\n+        TextParticleRenderer(int n, float r, int fontSize) {\n+            super(r, fontSize);\n@@ -449,2 +480,0 @@\n-        private Font font = null;\n-\n@@ -452,1 +481,1 @@\n-            super(n, r);\n+            super(n, r, TEXT_SIZE_LARGE);\n@@ -457,1 +486,0 @@\n-            setPaint(g2d, id);\n@@ -459,7 +487,1 @@\n-            if (font == null) {\n-                font = new Font(\"LucidaGrande\", Font.PLAIN, 32);\n-            }\n-            g2d.setFont(font);\n-            g2d.drawString(TEST_TEXT, (int) (x[id] - r), (int) (y[id] - r));\n-            g2d.drawString(TEST_TEXT, (int) (x[id] - r), (int) y[id]);\n-            g2d.drawString(TEST_TEXT, (int) (x[id] - r), (int) (y[id] + r));\n+            super.render(g2d, id, x, y, vx, vy);\n@@ -982,0 +1004,12 @@\n+        protected final static int SCORE_MAIN = 0;\n+        protected final static int SCORE_ERROR = 1;\n+        protected final static int SCORE_OTHER = 2;\n+\n+        protected final static int PCT_00 = 0;\n+        protected final static int PCT_10 = 1;\n+        protected final static int PCT_25 = 2;\n+        protected final static int PCT_50 = 3;\n+        protected final static int PCT_75 = 4;\n+        protected final static int PCT_90 = 5;\n+        protected final static int PCT_100 = 6;\n+\n@@ -988,0 +1022,3 @@\n+        private static final AtomicInteger headerMark = new AtomicInteger(1);\n+\n+        \/* members *\/\n@@ -989,0 +1026,3 @@\n+        protected final boolean skipWait;\n+\n+        protected final AtomicInteger paintIdx = new AtomicInteger(0);\n@@ -990,0 +1030,1 @@\n+        protected final AtomicLong markerStartTime = new AtomicLong(0);\n@@ -994,1 +1035,0 @@\n-        protected final ArrayList<Long> testTime = new ArrayList<>(COUNT);\n@@ -996,3 +1036,8 @@\n-        protected final double[] scores = new double[3];\n-        protected final double[] results = new double[4];\n-        private int nData = 0;\n+        protected int frames = 0;\n+        \/\/ test timestamp data:\n+        protected long[] testTimestamp = new long[MAX_SAMPLE_COUNT];\n+        \/\/ test duration data (ns):\n+        protected long[] testTime = new long[MAX_SAMPLE_COUNT];\n+\n+        protected final double[] scores = new double[SCORE_OTHER + 1];\n+        protected final double[] results = new double[PCT_100 + 1];\n@@ -1000,1 +1045,2 @@\n-        protected PerfMeterExecutor(final FrameHandler fh) {\n+        protected PerfMeterExecutor(final boolean skipWait, final FrameHandler fh) {\n+            this.skipWait = skipWait;\n@@ -1011,0 +1057,1 @@\n+            paintIdx.set(0);\n@@ -1012,0 +1059,1 @@\n+            markerStartTime.set(0);\n@@ -1021,1 +1069,1 @@\n-            this.name = testName + \"[\" + fh.threadId + \"]\";\n+            this.name = testName + (isMultiThreads() ? (\"-\" + fh.threadId) : \"\");\n@@ -1051,9 +1099,12 @@\n-            \/\/ Warmup to prepare frame synchronization:\n-            for (int i = 0; i < WARMUP_COUNT; i++) {\n-                updateMarkerIdx();\n-                renderable.update();\n-                fh.repaintFrame();\n-                sleep(10);\n-                while (markerPaintTime.get() == 0) {\n-                    if (TRACE) System.out.print(\"-\");\n-                    sleep(1);\n+            if (WARMUP_COUNT > 0) {\n+                \/\/ Warmup to prepare frame synchronization:\n+                for (int i = 0; i < WARMUP_COUNT; i++) {\n+                    updateMarkerIdx();\n+                    renderable.update();\n+                    fh.repaintFrame();\n+                    sleep(10);\n+                    while (markerStartTime.get() == 0) {\n+                        if (TRACE) System.out.print(\"-\");\n+                        sleep(1);\n+                    }\n+                    markerStartTime.set(0);\n@@ -1061,1 +1112,2 @@\n-                markerPaintTime.set(0);\n+                \/\/ Reset before measurements:\n+                reset();\n@@ -1063,2 +1115,0 @@\n-            \/\/ Reset before measurements:\n-            reset();\n@@ -1067,5 +1117,0 @@\n-            int cycles = 0;\n-            int frames = 0;\n-            long paintTime = 0L;\n-            long lastFrameTime = 0L;\n-\n@@ -1081,0 +1126,6 @@\n+            int cycles = 0;\n+            frames = 0;\n+            long paintStartTime = 0L;\n+            long paintElapsedTime = 0L;\n+            long lastFrameTime = 0L;\n+\n@@ -1090,2 +1141,2 @@\n-                if ((t = markerPaintTime.getAndSet(0L)) > 0L) {\n-                    paintTime = t;\n+                if ((t = markerStartTime.getAndSet(0L)) > 0L) {\n+                    paintStartTime = t;\n@@ -1097,1 +1148,4 @@\n-                if (paintTime > 0L) {\n+                if (paintStartTime > 0L) {\n+                    \/\/ get optional elapsed time:\n+                    paintElapsedTime = markerPaintTime.get();\n+\n@@ -1099,1 +1153,1 @@\n-                    wait = false;\n+                    wait = !skipWait;\n@@ -1103,3 +1157,4 @@\n-                        final long duration = getElapsedTime(paintTime);\n-                        if (duration > 0L) {\n-                            testTime.add(duration);\n+                        final long durationNs = getElapsedTime((paintElapsedTime != 0L) ? paintElapsedTime : paintStartTime);\n+                        if ((durationNs > 0L) && (frames < MAX_SAMPLE_COUNT)) {\n+                            testTimestamp[frames] = paintStartTime - startTime;\n+                            testTime[frames] = durationNs;\n@@ -1112,1 +1167,2 @@\n-                        paintTime = 0;\n+                        paintStartTime = 0L;\n+                        paintElapsedTime = 0L;\n@@ -1120,1 +1176,2 @@\n-                        paintTime = 0;\n+                        paintStartTime = 0L;\n+                        paintElapsedTime = 0L;\n@@ -1163,3 +1220,2 @@\n-            if (!testTime.isEmpty()) {\n-                processTimes();\n-            }\n+            processTimes();\n+\n@@ -1169,0 +1225,5 @@\n+            \/\/ Log header once:\n+            if (headerMark.getAndDecrement() == 1) {\n+                System.err.println(getHeader());\n+            }\n+\n@@ -1195,3 +1256,27 @@\n-            nData = testTime.size();\n-\n-            if (!testTime.isEmpty()) {\n+            if (frames != 0) {\n+                frames = Math.min(frames, MAX_SAMPLE_COUNT);\n+\n+                if (DUMP_SAMPLES) {\n+                    \/\/ Dump all results:\n+                    final File file = new File(\".\/rp-\" + replaceNonFileNameChars(name) + \"-samples.csv\");\n+                    System.out.println(\"Writing samples to : \" + file.getAbsolutePath());\n+\n+                    try (final PrintWriter w = new PrintWriter(file, Charset.forName(\"UTF-8\"))) {\n+                        w.write(\"# \");\n+                        w.write(VERSION);\n+                        w.write(\" - \");\n+                        w.write(\"Test: \");\n+                        w.write(name);\n+                        w.write('\\n');\n+\n+                        for (int i = 0; i < frames; i++) {\n+                            w.write(Double.toString(millis(testTimestamp[i])));\n+                            w.write(',');\n+                            w.write(Double.toString(millis(testTime[i])));\n+                            w.write('\\n');\n+                        }\n+                    } catch (IOException ioe) {\n+                        System.err.println(\"IO exception:\");\n+                        ioe.printStackTrace();\n+                    }\n+                }\n@@ -1199,1 +1284,2 @@\n-                final int thIdx = (int) Math.ceil(testTime.size() * 0.10);\n+                final int first = (int) Math.floor(frames * 0.10);\n+                final int last = frames - 1;\n@@ -1201,4 +1287,2 @@\n-                final ArrayList<Long> times = new ArrayList<>(nData - thIdx);\n-                for (int i = thIdx; i < nData; i++) {\n-                    times.add(testTime.get(i));\n-                }\n+                \/\/ free testTimestamp to avoid any future usage:\n+                testTimestamp = null;\n@@ -1206,0 +1290,1 @@\n+                \/\/ note: testTime array is modified below:\n@@ -1207,2 +1292,1 @@\n-                Collections.sort(times);\n-                final int last = times.size() - 1;\n+                Arrays.sort(testTime, first, frames);\n@@ -1210,2 +1294,1 @@\n-                if (USE_FPS) {\n-                    scores[0] = fps(times.get(pctIndex(last, 0.5000))); \/\/    50% (median)\n+                final long[] pcts = getPercentiles(testTime, first, last);\n@@ -1213,4 +1296,1 @@\n-                    results[3] = fps(times.get(0)); \/\/ 0.0 (min)\n-                    results[2] = fps(times.get(pctIndex(last, 0.1587))); \/\/ 15.87% (-1 stddev)\n-                    results[1] = fps(times.get(pctIndex(last, 0.8413))); \/\/ 84.13% (+1 stddev)\n-                    results[0] = fps(times.get(pctIndex(last, 1.0000))); \/\/ 100% (max)\n+                final long median = pcts[PCT_50];\n@@ -1218,2 +1298,14 @@\n-                    scores[1] = (results[2] - results[1]) \/ 2.0;\n-                    scores[2] = millis(times.get(pctIndex(last, 0.5000))); \/\/    50% (median)\n+                if (USE_FPS) {\n+                    scores[SCORE_MAIN] = fps(median);\n+\n+                    results[PCT_100] = fps(pcts[PCT_00]);\n+                    results[PCT_90] = fps(pcts[PCT_10]);\n+                    results[PCT_75] = fps(pcts[PCT_25]);\n+                    results[PCT_50] = fps(pcts[PCT_50]);\n+                    results[PCT_25] = fps(pcts[PCT_75]);\n+                    results[PCT_10] = fps(pcts[PCT_90]);\n+                    results[PCT_00] = fps(pcts[PCT_100]);\n+\n+                    \/\/ STDDEV = IQR \/ 1.35 = (Q3 - Q1) * 20 \/ 27\n+                    scores[SCORE_ERROR] = (results[PCT_75] - results[PCT_25]) * 20L \/ 27L;\n+                    scores[SCORE_OTHER] = millis(median);\n@@ -1221,1 +1313,1 @@\n-                    scores[0] = millis(times.get(pctIndex(last, 0.5000))); \/\/    50% (median)\n+                    scores[SCORE_MAIN] = millis(median);\n@@ -1223,4 +1315,7 @@\n-                    results[0] = millis(times.get(0)); \/\/ 0.0 (min)\n-                    results[1] = millis(times.get(pctIndex(last, 0.1587))); \/\/ 15.87% (-1 stddev)\n-                    results[2] = millis(times.get(pctIndex(last, 0.8413))); \/\/ 84.13% (+1 stddev)\n-                    results[3] = millis(times.get(pctIndex(last, 1.0000))); \/\/ 100% (max)\n+                    results[PCT_00] = millis(pcts[PCT_00]);\n+                    results[PCT_10] = millis(pcts[PCT_10]);\n+                    results[PCT_25] = millis(pcts[PCT_25]);\n+                    results[PCT_50] = millis(pcts[PCT_50]);\n+                    results[PCT_75] = millis(pcts[PCT_75]);\n+                    results[PCT_90] = millis(pcts[PCT_90]);\n+                    results[PCT_100] = millis(pcts[PCT_100]);\n@@ -1228,2 +1323,17 @@\n-                    scores[1] = (results[2] - results[1]) \/ 2.0;\n-                    scores[2] = fps(times.get(pctIndex(last, 0.5000))); \/\/    50% (median)\n+                    \/\/ STDDEV = IQR \/ 1.35 = (Q3 - Q1) * 20 \/ 27 (normal distribution ?)\n+                    scores[SCORE_ERROR] = (results[PCT_75] - results[PCT_25]) * 20L \/ 27L;\n+                    scores[SCORE_OTHER] = fps(median);\n+\n+                    \/\/ System.out.println(\"stddev(IQR) = \" + scores[SCORE_ERROR]);\n+\n+                    \/\/ MAD = Median Absolute Deviation:\n+                    for (int i = first; i <= last; i++) {\n+                        testTime[i] = Math.abs(testTime[i] - median);\n+                    }\n+                    \/\/ Sort values to get percentiles:\n+                    Arrays.sort(testTime, first, frames);\n+\n+                    \/\/ STDDEV = 1.4826 * MAD (normal distribution ?)\n+                    scores[SCORE_ERROR] = 1.4826 * millis(testTime[pctIndex(first, last, 0.50)]); \/\/ 50% (median)\n+\n+                    \/\/ System.out.println(\"stddev(MAD) = \" + scores[SCORE_ERROR]);\n@@ -1231,0 +1341,2 @@\n+                \/\/ free testTime to avoid any future usage:\n+                testTime = null;\n@@ -1234,0 +1346,11 @@\n+        protected static String getHeader() {\n+            if (VERBOSE) {\n+                return String.format(\"%-25s : %s ± %s %s [%s] (p00: ... p10: ... p25: ... p50: ... p75: ... p90: ... p100: ... %s) (... frames)\",\n+                        \"Test Name\", (USE_FPS ? \"Median(FPS)\" : \"Median(TimeMs)\"), (USE_FPS ? \"Stddev(FPS)\" : \"Stddev(TimeMs)\"), \"Unit\",\n+                        (!USE_FPS ? \"Median(FPS)\" : \"Median(TimeMs)\"), \"Unit\");\n+            }\n+            return String.format(\"%-25s : %s ± %s %s\",\n+                    \"Test Name\", (USE_FPS ? \"Median(FPS)\" : \"Median(TimeMs)\"), (USE_FPS ? \"Stddev(FPS)\" : \"Stddev(TimeMs)\"), \"Unit\");\n+\n+        }\n+\n@@ -1239,6 +1362,6 @@\n-                return String.format(\"%-25s : %.3f (%.3f) %s [%.3f %s] (p00: %.3f p15: %.3f p50: %.3f p85: %.3f p100: %.3f %s) (%d frames)\",\n-                        name, scores[0], scores[1], (USE_FPS ? \"FPS\" : \"ms\"),\n-                        scores[2], (USE_FPS ? \"ms\" : \"FPS\"),\n-                        results[0], results[1], scores[0], results[2], results[3],\n-                        (USE_FPS ? \"FPS\" : \"ms\"),\n-                        nData);\n+                return String.format(\"%-25s : %.3f ± %.3f %s [%.3f %s] (p00: %.3f p10: %.3f p25: %.3f p50: %.3f p75: %.3f p90: %.3f p100: %.3f %s) (%d frames)\",\n+                    name, scores[SCORE_MAIN], scores[SCORE_ERROR], (USE_FPS ? \"FPS\" : \"ms\"),\n+                    scores[SCORE_OTHER], (USE_FPS ? \"ms\" : \"FPS\"),\n+                    results[PCT_00], results[PCT_10], results[PCT_25], results[PCT_50], results[PCT_75], results[PCT_90], results[PCT_100],\n+                    (USE_FPS ? \"FPS\" : \"ms\"),\n+                    frames);\n@@ -1246,1 +1369,2 @@\n-            return String.format(\"%-25s : %.3f (%.3f) %s\", name, scores[0], scores[1], (USE_FPS ? \"FPS\" : \"ms\"));\n+            return String.format(\"%-25s : %.3f ± %.3f %s\",\n+                     name, scores[SCORE_MAIN], scores[SCORE_ERROR], (USE_FPS ? \"FPS\" : \"ms\"));\n@@ -1257,2 +1381,14 @@\n-        protected int pctIndex(final int last, final double pct) {\n-            return (int) Math.round(last * pct);\n+        protected static long[] getPercentiles(final long[] data, final int first, final int last) {\n+            final long[] pcts = new long[PCT_100 + 1];\n+            pcts[PCT_00] = data[first]; \/\/ 0% (min)\n+            pcts[PCT_10] = data[pctIndex(first, last, 0.10)]; \/\/  10%\n+            pcts[PCT_25] = data[pctIndex(first, last, 0.25)]; \/\/  25% (Q1)\n+            pcts[PCT_50] = data[pctIndex(first, last, 0.50)]; \/\/  50% (Median)\n+            pcts[PCT_75] = data[pctIndex(first, last, 0.75)]; \/\/  75% (Q3)\n+            pcts[PCT_90] = data[pctIndex(first, last, 0.90)]; \/\/  90%\n+            pcts[PCT_100] = data[pctIndex(first, last, 1.00)]; \/\/ 100% (max)\n+            return pcts;\n+        }\n+\n+        protected static int pctIndex(final int min, final int last, final double pct) {\n+            return min + (int) Math.round((last - min) * pct);\n@@ -1264,1 +1400,2 @@\n-        private final ArrayList<Long> robotTime = (fh.calibrate) ? new ArrayList<>(COUNT) : null;\n+        private int nRobotTimes = 0;\n+        private long[] robotTime = (fh.calibrate) ? new long[COUNT] : null;\n@@ -1266,2 +1403,2 @@\n-        private long lastPaintTime = 0;\n-        private final ArrayList<Long> delayTime = new ArrayList<>(COUNT);\n+        private int nDelayTimes = 0;\n+        private long[] delayTime = (ROBOT_TIME_DELAY) ? null : new long[COUNT];\n@@ -1269,0 +1406,1 @@\n+        private long lastPaintTime = 0L;\n@@ -1274,1 +1412,1 @@\n-            super(fh);\n+            super(true, fh);\n@@ -1287,0 +1425,3 @@\n+            nRobotTimes = 0;\n+            nDelayTimes = 0;\n+            lastPaintTime = 0L;\n@@ -1301,0 +1442,3 @@\n+            \/\/ Update paintIdx:\n+            paintIdx.incrementAndGet();\n+\n@@ -1304,1 +1448,1 @@\n-                markerPaintTime.set(start);\n+                markerStartTime.set(start);\n@@ -1308,1 +1452,1 @@\n-        protected long getElapsedTime(long paintTime) {\n+        protected long getElapsedTime(final long paintTime) {\n@@ -1311,1 +1455,1 @@\n-            if (lastPaintTime != 0) {\n+            if (lastPaintTime != 0L) {\n@@ -1315,2 +1459,2 @@\n-                } else {\n-                    delayTime.add(delay);\n+                } else if (nDelayTimes < COUNT) {\n+                    delayTime[nDelayTimes++] = delay;\n@@ -1340,2 +1484,2 @@\n-            if (fh.calibrate) {\n-                robotTime.add((System.nanoTime() - beforeRobot));\n+            if ((fh.calibrate) && (nRobotTimes < COUNT)) {\n+                robotTime[nRobotTimes++] = System.nanoTime() - beforeRobot;\n@@ -1347,1 +1491,1 @@\n-            if (fh.calibrate && !robotTime.isEmpty()) {\n+            if (fh.calibrate && (nRobotTimes != 0)) {\n@@ -1350,2 +1494,3 @@\n-                Collections.sort(robotTime);\n-                final int last = robotTime.size() - 1;\n+                Arrays.sort(robotTime);\n+\n+                final long[] pcts = getPercentiles(robotTime, 0, nRobotTimes - 1);\n@@ -1353,6 +1498,2 @@\n-                final double[] robotStats = new double[5];\n-                robotStats[0] = millis(robotTime.get(0)); \/\/ 0.0 (min)\n-                robotStats[1] = millis(robotTime.get(pctIndex(last, 0.1587))); \/\/ 15.87% (-1 stddev)\n-                robotStats[2] = millis(robotTime.get(pctIndex(last, 0.5000))); \/\/    50% (median)\n-                robotStats[3] = millis(robotTime.get(pctIndex(last, 0.8413))); \/\/ 84.13% (+1 stddev)\n-                robotStats[4] = millis(robotTime.get(pctIndex(last, 1.0000))); \/\/   100% (max)\n+                \/\/ free testTime to avoid any future usage:\n+                testTime = null;\n@@ -1360,2 +1501,4 @@\n-                System.err.printf(\"%-25s : %.3f ms (p00: %.3f p15: %.3f p50: %.3f p85: %.3f p100: %.3f ms) (%d times)%n\",\n-                        \"Robot [\" + fh.threadId + \"]\", robotStats[2], robotStats[0], robotStats[1], robotStats[2], robotStats[3], robotStats[4], last + 1);\n+                System.err.printf(\"%-25s : %.3f ms (p00: %.3f p10: %.3f p25: %.3f p50: %.3f p75: %.3f p90: %.3f p100: %.3f ms) (%d times)%n\",\n+                        \"Robot\" + (isMultiThreads() ? (\"-\" + fh.threadId) : \"\"), millis(pcts[PCT_50]),\n+                        millis(pcts[PCT_00]), millis(pcts[PCT_10]), millis(pcts[PCT_25]), millis(pcts[PCT_50]),\n+                        millis(pcts[PCT_75]), millis(pcts[PCT_90]), millis(pcts[PCT_100]), nRobotTimes);\n@@ -1363,3 +1506,2 @@\n-            if (!delayTime.isEmpty()) {\n-                Collections.sort(delayTime);\n-                final int last = delayTime.size() - 1;\n+            if (nDelayTimes != 0) {\n+                Arrays.sort(delayTime);\n@@ -1367,6 +1509,1 @@\n-                final double[] delayStats = new double[5];\n-                delayStats[0] = millis(delayTime.get(0)); \/\/ 0.0 (min)\n-                delayStats[1] = millis(delayTime.get(pctIndex(last, 0.1587))); \/\/ 15.87% (-1 stddev)\n-                delayStats[2] = millis(delayTime.get(pctIndex(last, 0.5000))); \/\/    50% (median)\n-                delayStats[3] = millis(delayTime.get(pctIndex(last, 0.8413))); \/\/ 84.13% (+1 stddev)\n-                delayStats[4] = millis(delayTime.get(pctIndex(last, 1.0000))); \/\/   100% (max)\n+                final long[] pcts = getPercentiles(robotTime, 0, nDelayTimes - 1);\n@@ -1374,1 +1511,2 @@\n-                final double fps = fps(delayTime.get(pctIndex(last, 0.5000))); \/\/    50% (median)\n+                \/\/ free delayTime to avoid any future usage:\n+                delayTime = null;\n@@ -1376,2 +1514,4 @@\n-                System.err.printf(\"%-25s : %.3f ms [%.3f FPS] (p00: %.3f p15: %.3f p50: %.3f p85: %.3f p100: %.3f ms) (%d times)%n\",\n-                        \"DT-\" + name, delayStats[2], fps, delayStats[0], delayStats[1], delayStats[2], delayStats[3], delayStats[4], last + 1);\n+                System.err.printf(\"%-25s : %.3f ms [%.3f FPS] (p00: %.3f p10: %.3f p25: %.3f p50: %.3f p75: %.3f p90: %.3f p100: %.3f ms) (%d times)%n\",\n+                        \"DelayTime-\" + name + (isMultiThreads() ? (\"-\" + fh.threadId) : \"\"), millis(pcts[PCT_50]), fps(pcts[PCT_50]),\n+                        millis(pcts[PCT_00]), millis(pcts[PCT_10]), millis(pcts[PCT_25]), millis(pcts[PCT_50]),\n+                        millis(pcts[PCT_75]), millis(pcts[PCT_90]), millis(pcts[PCT_100]), nDelayTimes);\n@@ -1387,1 +1527,1 @@\n-            super(fh);\n+            super(false, fh);\n@@ -1412,0 +1552,7 @@\n+            final long now = System.nanoTime();\n+\n+            \/\/ Update paintIdx:\n+            paintIdx.incrementAndGet();\n+\n+            \/\/ publish start time:\n+            markerStartTime.set(start);\n@@ -1413,1 +1560,1 @@\n-            markerPaintTime.set(System.nanoTime() - start);\n+            markerPaintTime.set(now - start);\n@@ -1800,0 +1947,1 @@\n+        System.out.println(\"#\");\n@@ -1808,1 +1956,1 @@\n-        System.out.println(\"# -w<number> : use number of test frames (default: 1)\");\n+        System.out.println(\"# -w<number> : use number of test frames (default: 1) per screen\");\n@@ -1813,0 +1961,2 @@\n+        System.out.println(\"# -u<number> : set number of warmup iterations (default: \" + MIN_COUNT + \")\");\n+        System.out.println(\"#\");\n@@ -1846,1 +1996,3 @@\n-                            EXEC_MODE = arg.substring(2).toLowerCase();\n+                            if (arg.length() >= 3) {\n+                                EXEC_MODE = arg.substring(3).toLowerCase();\n+                            }\n@@ -1849,1 +2001,16 @@\n-                            USE_FPS = true;\n+                            if (arg.length() == 2) {\n+                                USE_FPS = true;\n+                            } else {\n+                                if ((arg.length() > 6) && \"font=\".equalsIgnoreCase(arg.substring(1, 6))) {\n+                                    TEXT_FONT = arg.substring(6);\n+                                    break;\n+                                }\n+                                if ((arg.length() > 10) && \"fontSize=\".equalsIgnoreCase(arg.substring(1, 10))) {\n+                                    TEXT_SIZE_DEFAULT = Integer.parseInt(arg.substring(10));\n+                                    break;\n+                                }\n+                                if ((arg.length() > 15) && \"fontSizeLarge=\".equalsIgnoreCase(arg.substring(1, 15))) {\n+                                    TEXT_SIZE_LARGE = Integer.parseInt(arg.substring(15));\n+                                    break;\n+                                }\n+                            }\n@@ -1852,1 +2019,3 @@\n-                            GC_MODE = arg.substring(3).toLowerCase();\n+                            if (arg.length() >= 3) {\n+                                GC_MODE = arg.substring(3).toLowerCase();\n+                            }\n@@ -1858,1 +2027,7 @@\n-                            VERBOSE_GRAPHICS_CONFIG = true;\n+                            if (arg.length() == 3) {\n+                                if (\"f\".equalsIgnoreCase(arg.substring(2, 3))) {\n+                                    VERBOSE_FONT_CONFIG = true;\n+                                } else if (\"g\".equalsIgnoreCase(arg.substring(2, 3))) {\n+                                    VERBOSE_GRAPHICS_CONFIG = true;\n+                                }\n+                            }\n@@ -1861,1 +2036,7 @@\n-                            USE_FPS = false;\n+                            if (arg.length() == 2) {\n+                                USE_FPS = false;\n+                            } else {\n+                                if ((arg.length() > 6) && \"text=\".equalsIgnoreCase(arg.substring(1, 6))) {\n+                                    TEXT_STR = arg.substring(6);\n+                                }\n+                            }\n@@ -1864,1 +2045,3 @@\n-                            N = Integer.parseInt(arg.substring(2));\n+                            if (arg.length() >= 3) {\n+                                N = Integer.parseInt(arg.substring(3));\n+                            }\n@@ -1867,1 +2050,3 @@\n-                            REPEATS = Integer.parseInt(arg.substring(2));\n+                            if (arg.length() >= 3) {\n+                                REPEATS = Integer.parseInt(arg.substring(3));\n+                            }\n@@ -1873,1 +2058,8 @@\n-                            NW = Integer.parseInt(arg.substring(2));\n+                            if (arg.length() >= 3) {\n+                                NW = Integer.parseInt(arg.substring(3));\n+                            }\n+                            break;\n+                        case \"u\":\n+                            if (arg.length() >= 3) {\n+                                WARMUP_COUNT = Integer.parseInt(arg.substring(3));\n+                            }\n@@ -1911,3 +2103,5 @@\n-            System.out.printf(\"# Repeats: %d\\n\", REPEATS);\n-            System.out.printf(\"# NW:      %d\\n\", NW);\n-            System.out.printf(\"# N:       %d\\n\", N);\n+            System.out.print(\"##############################################################\\n\");\n+            System.out.printf(\"# Repeats:      %d\\n\", REPEATS);\n+            System.out.printf(\"# NW:           %d\\n\", NW);\n+            System.out.printf(\"# N:            %d\\n\", N);\n+            System.out.printf(\"# WARMUP_COUNT: %d\\n\", WARMUP_COUNT);\n@@ -1916,0 +2110,5 @@\n+            System.out.printf(\"# Font: '%s'\\n\", TEXT_FONT);\n+            System.out.printf(\"# Text: '%s'\\n\", TEXT_STR);\n+            System.out.printf(\"# FontSize:      %s\\n\", TEXT_SIZE_DEFAULT);\n+            System.out.printf(\"# FontSizeLarge: %s\\n\", TEXT_SIZE_LARGE);\n+            System.out.print(\"##############################################################\\n\");\n@@ -1919,0 +2118,1 @@\n+        final Set<String> fontNames = new LinkedHashSet<>();\n@@ -1923,0 +2123,19 @@\n+\n+        for (Font f : ge.getAllFonts()) {\n+            fontNames.add(f.getName());\n+        }\n+        \/\/ Check font:\n+        if (!fontNames.contains(TEXT_FONT)) {\n+            System.err.println(\"Bad font name: [\" + TEXT_FONT + \"] ! (available values: \" + fontNames + \")\");\n+        }\n+\n+        if (VERBOSE_FONT_CONFIG) {\n+            System.out.println(\"Available Fonts:\");\n+\n+            for (String name : fontNames) {\n+                System.out.print(name);\n+                System.out.print(\" \");\n+            }\n+            System.out.println();\n+        }\n+\n@@ -1939,1 +2158,1 @@\n-                final String gcId = gdIdx + \":\" + gcIdx;\n+                final String gcId = gdIdx + \"-\" + gcIdx;\n@@ -1960,1 +2179,1 @@\n-                            System.err.println(\"Bad GraphicsConfiguration identifier [x:y] where x is GraphicsDevice ID \" +\n+                            System.err.println(\"Bad GraphicsConfiguration identifier 'x-y' where x is GraphicsDevice ID \" +\n@@ -2029,2 +2248,1 @@\n-                    if (TRACE_SYNC)\n-                        traceSync(\"Threads are ready => starting benchmark on \" + threadCount + \" threads now\");\n+                    if (TRACE_SYNC) traceSync(\"Threads are ready => starting benchmark on \" + threadCount + \" threads now\");\n@@ -2039,2 +2257,1 @@\n-                    if (TRACE_SYNC)\n-                        traceSync(\"Test completed on \" + threadCount + \" threads => stopping benchmark on all threads now\");\n+                    if (TRACE_SYNC) traceSync(\"Test completed on \" + threadCount + \" threads => stopping benchmark on all threads now\");\n@@ -2049,2 +2266,1 @@\n-                    if (TRACE_SYNC)\n-                        traceSync(\"Test exited on \" + threadCount + \" threads => finalize benchmark on all threads now\");\n+                    if (TRACE_SYNC) traceSync(\"Test exited on \" + threadCount + \" threads => finalize benchmark on all threads now\");\n@@ -2103,0 +2319,4 @@\n+    static boolean isMultiThreads() {\n+        return threadCount > 1;\n+    }\n+\n@@ -2165,1 +2385,1 @@\n-    private static void sleep(long millis) {\n+    private static void sleep(final long millis) {\n@@ -2174,0 +2394,7 @@\n+\n+    \/** regular expression used to match characters different than alpha\/numeric\/_\/-\/. (1..n) *\/\n+    private final static Pattern PATTERN_NON_FILE_NAME = Pattern.compile(\"[^a-zA-Z0-9\\\\-_\\\\.]\");\n+\n+    private static String replaceNonFileNameChars(final String value) {\n+        return PATTERN_NON_FILE_NAME.matcher(value).replaceAll(\"_\");\n+    }\n","filename":"test\/jdk\/performance\/client\/RenderPerfTest\/src\/renderperf\/RenderPerfTest.java","additions":379,"deletions":152,"binary":false,"changes":531,"status":"modified"}]}