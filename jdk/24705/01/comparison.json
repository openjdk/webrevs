{"files":[{"patch":"@@ -30,0 +30,2 @@\n+import java.lang.classfile.attribute.StackMapFrameInfo;\n+import java.lang.classfile.attribute.StackMapTableAttribute;\n@@ -51,0 +53,1 @@\n+import jdk.internal.classfile.impl.DirectCodeBuilder;\n@@ -106,0 +109,7 @@\n+    private static final List<StackMapFrameInfo.VerificationTypeInfo> TYPE_SWITCH_LOCALS = List.of(\n+            StackMapFrameInfo.ObjectVerificationTypeInfo.of(CD_Object), StackMapFrameInfo.SimpleVerificationTypeInfo.INTEGER\n+    );\n+    private static final List<StackMapFrameInfo.VerificationTypeInfo> TYPE_SWITCH_EXTRA_LOCALS = List.of(\n+            StackMapFrameInfo.ObjectVerificationTypeInfo.of(CD_Object), StackMapFrameInfo.SimpleVerificationTypeInfo.INTEGER,\n+            StackMapFrameInfo.ObjectVerificationTypeInfo.of(CD_BiPredicate), StackMapFrameInfo.ObjectVerificationTypeInfo.of(CD_List)\n+    );\n@@ -485,0 +495,2 @@\n+        var locals = enumDescs == null && extraClassLabels == null ? TYPE_SWITCH_LOCALS : TYPE_SWITCH_EXTRA_LOCALS;\n+\n@@ -487,0 +499,1 @@\n+            var stackMapFrames = new ArrayList<StackMapFrameInfo>(labelConstants.length * 2);\n@@ -497,0 +510,1 @@\n+            stackMapFrames.add(StackMapFrameInfo.of(nonNullLabel, locals, List.of()));\n@@ -499,1 +513,3 @@\n-                  .ireturn();\n+                  .ireturn()\n+                  .with(StackMapTableAttribute.of(stackMapFrames));\n+                DirectCodeBuilder.withMaxs(cb, 2, locals.size()); \/\/ checkIndex uses 2\n@@ -512,0 +528,1 @@\n+                stackMapFrames.add(StackMapFrameInfo.of(target, locals, List.of()));\n@@ -544,1 +561,1 @@\n-                            Label notNumber = cb.newLabel();\n+                            Label notNumber = cb.newLabel(); \/\/ this label may end up unbound\n@@ -573,2 +590,3 @@\n-                                  .labelBinding(notNumber)\n-                                  .aload(SELECTOR_OBJ)\n+                                  .labelBinding(notNumber);\n+                                stackMapFrames.add(StackMapFrameInfo.of(notNumber, locals, List.of()));\n+                                cb.aload(SELECTOR_OBJ)\n@@ -583,0 +601,1 @@\n+                                stackMapFrames.add(StackMapFrameInfo.of(compare, locals, List.of(StackMapFrameInfo.SimpleVerificationTypeInfo.INTEGER)));\n@@ -651,2 +670,3 @@\n-                      .labelBinding(notNumber)\n-                      .aload(SELECTOR_OBJ)\n+                      .labelBinding(notNumber);\n+                    stackMapFrames.add(StackMapFrameInfo.of(notNumber, locals, List.of()));\n+                    cb.aload(SELECTOR_OBJ)\n@@ -660,3 +680,3 @@\n-                      .labelBinding(compare)\n-\n-                      .loadConstant(integerLabel)\n+                      .labelBinding(compare);\n+                    stackMapFrames.add(StackMapFrameInfo.of(compare, locals, List.of(StackMapFrameInfo.SimpleVerificationTypeInfo.INTEGER)));\n+                    cb.loadConstant(integerLabel)\n@@ -691,0 +711,1 @@\n+            stackMapFrames.add(StackMapFrameInfo.of(dflt, locals, List.of()));\n@@ -693,1 +714,3 @@\n-              .ireturn();\n+              .ireturn()\n+              .with(StackMapTableAttribute.of(stackMapFrames));\n+            DirectCodeBuilder.withMaxs(cb, 3, locals.size()); \/\/ enum labels use 3 stack, others use 2\n@@ -705,1 +728,1 @@\n-        byte[] classBytes = ClassFile.of().build(ConstantUtils.binaryNameToDesc(typeSwitchClassName(caller.lookupClass())),\n+        byte[] classBytes = ClassFile.of(ClassFile.StackMapsOption.DROP_STACK_MAPS).build(ConstantUtils.binaryNameToDesc(typeSwitchClassName(caller.lookupClass())),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/SwitchBootstraps.java","additions":34,"deletions":11,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-    private static final DeferredLabel[] EMPTY_LABEL_ARRAY = {};\n@@ -54,1 +53,0 @@\n-    private static final AbstractPseudoInstruction.ExceptionCatchImpl[] EMPTY_HANDLER_ARRAY = {};\n@@ -77,0 +75,3 @@\n+    private int maxStackHint = -1;\n+    private int maxLocalsHint = -1;\n+\n@@ -176,0 +177,6 @@\n+    public static void withMaxs(CodeBuilder cob, int stacks, int locals) {\n+        var dcb = (DirectCodeBuilder) cob;\n+        dcb.maxStackHint = stacks;\n+        dcb.maxLocalsHint = locals;\n+    }\n+\n@@ -322,0 +329,2 @@\n+                } else if (maxLocalsHint >= 0 && maxStackHint >= 0) {\n+                    buf.writeU2U2(maxStackHint, maxLocalsHint);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"}]}