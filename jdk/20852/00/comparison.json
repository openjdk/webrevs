{"files":[{"patch":"@@ -1089,1 +1089,1 @@\n-    ThreadCritical tc;\n+    NmtGuard guard;\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1806,1 +1806,1 @@\n-    ThreadCritical tc;\n+    NmtGuard guard;\n","filename":"src\/hotspot\/os\/windows\/perfMemory_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-  \/\/ Use ThreadCritical to make sure that mtChunks don't get deallocated while the\n+  \/\/ Use NmtGuard to make sure that mtChunks don't get deallocated while the\n@@ -68,1 +68,1 @@\n-  ThreadCritical tc;\n+  NmtGuard guard;\n","filename":"src\/hotspot\/share\/nmt\/mallocTracker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-#include \"runtime\/threadCritical.hpp\"\n@@ -128,1 +127,1 @@\n-      ThreadCritical tc;\n+      NmtGuard guard;\n@@ -154,1 +153,1 @@\n-      ThreadCritical tc;\n+      NmtGuard guard;\n@@ -165,1 +164,1 @@\n-      ThreadCritical tc;\n+      NmtGuard guard;\n@@ -213,1 +212,1 @@\n-      ThreadCritical tc;\n+      NmtGuard guard;\n@@ -222,1 +221,1 @@\n-      ThreadCritical tc;\n+      NmtGuard guard;\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,3 @@\n+Semaphore NmtGuard::_nmt_semaphore(1);\n+intx volatile NmtGuard::_owner((intx) -1);\n+\n","filename":"src\/hotspot\/share\/nmt\/nmtCommon.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,0 +32,4 @@\n+#include \"runtime\/os.hpp\"\n+#include \"runtime\/atomic.hpp\"\n+#include \"runtime\/javaThread.hpp\"\n+#include \"runtime\/semaphore.hpp\"\n@@ -140,0 +144,27 @@\n+class NmtGuard : public StackObj {\n+private:\n+    static Semaphore _nmt_semaphore;\n+    static intx volatile _owner;\n+\n+public:\n+    NmtGuard() {\n+      intx const current =  os::current_thread_id();\n+      intx const owner = Atomic::load(&_owner);\n+      assert(current != owner, \"Lock is not reentrant\");\n+\n+      _nmt_semaphore.wait();\n+      Atomic::store(&_owner, current);\n+    }\n+\n+    ~NmtGuard() {\n+      assert_locked();\n+      Atomic::store(&_owner, (intx) -1);\n+      _nmt_semaphore.signal();\n+    }\n+\n+    static void assert_locked(){\n+      intx const current = os::current_thread_id();\n+      intx const owner = Atomic::load(&_owner);\n+      assert(current == owner, \"NMT lock should be acquired in this section.\");\n+    }\n+};\n","filename":"src\/hotspot\/share\/nmt\/nmtCommon.hpp","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"runtime\/threadCritical.hpp\"\n@@ -56,1 +55,1 @@\n-  ThreadCritical tc;\n+  NmtGuard guard;\n","filename":"src\/hotspot\/share\/nmt\/nmtUsage.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"runtime\/threadCritical.hpp\"\n@@ -56,1 +55,1 @@\n-  ThreadCritical tc;\n+  NmtGuard guard;\n@@ -66,1 +65,1 @@\n-  ThreadCritical tc;\n+  NmtGuard guard;\n","filename":"src\/hotspot\/share\/nmt\/threadStackTracker.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"runtime\/threadCritical.hpp\"\n@@ -624,0 +623,1 @@\n+    NmtGuard::assert_locked();\n@@ -664,1 +664,1 @@\n-  ThreadCritical tc;\n+  NmtGuard guard;\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2163,1 +2163,1 @@\n-    ThreadCritical tc;\n+    NmtGuard guard;\n@@ -2185,1 +2185,1 @@\n-    ThreadCritical tc;\n+    NmtGuard guard;\n@@ -2270,1 +2270,1 @@\n-    ThreadCritical tc;\n+    NmtGuard guard;\n@@ -2309,1 +2309,1 @@\n-    ThreadCritical tc;\n+    NmtGuard guard;\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}