{"files":[{"patch":"@@ -37,0 +37,1 @@\n+#include \"runtime\/mutexLocker.hpp\"\n@@ -1089,1 +1090,1 @@\n-    NmtGuard guard;\n+    NMTMutexLocker ml;\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"runtime\/mutexLocker.hpp\"\n@@ -1806,1 +1807,1 @@\n-    NmtGuard guard;\n+    NMTMutexLocker ml;\n","filename":"src\/hotspot\/os\/windows\/perfMemory_windows.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"runtime\/mutexLocker.hpp\"\n@@ -65,1 +66,1 @@\n-  \/\/ Use NmtGuard to make sure that mtChunks don't get deallocated while the\n+  \/\/ Use NMT_lock to make sure that mtChunks don't get deallocated while the\n@@ -68,1 +69,1 @@\n-  NmtGuard guard;\n+  NMTMutexLocker ml;\n","filename":"src\/hotspot\/share\/nmt\/mallocTracker.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"nmt\/nmtCommon.hpp\"\n@@ -33,0 +32,1 @@\n+#include \"runtime\/mutexLocker.hpp\"\n@@ -145,1 +145,1 @@\n-    NmtGuard guard;\n+    NMTMutexLocker ml;\n","filename":"src\/hotspot\/share\/nmt\/memBaseline.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"runtime\/mutexLocker.hpp\"\n@@ -468,1 +469,1 @@\n-    NmtGuard guard;\n+    NMTMutexLocker ml;\n","filename":"src\/hotspot\/share\/nmt\/memReporter.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-      NmtGuard guard;\n+      NMTMutexLocker ml;\n@@ -153,1 +153,1 @@\n-      NmtGuard guard;\n+      NMTMutexLocker ml;\n@@ -164,1 +164,1 @@\n-      NmtGuard guard;\n+      NMTMutexLocker ml;\n@@ -172,1 +172,1 @@\n-    NmtGuard guard;\n+    NMTMutexLocker ml;\n@@ -180,1 +180,1 @@\n-    NmtGuard guard;\n+    NMTMutexLocker ml;\n@@ -189,1 +189,1 @@\n-    NmtGuard guard;\n+    NMTMutexLocker ml;\n@@ -198,1 +198,1 @@\n-    NmtGuard guard;\n+    NMTMutexLocker ml;\n@@ -212,1 +212,1 @@\n-      NmtGuard guard;\n+      NMTMutexLocker ml;\n@@ -221,1 +221,1 @@\n-      NmtGuard guard;\n+      NMTMutexLocker ml;\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -39,9 +39,0 @@\n-\/\/ The underlying semaphore used by the NmtGuard lock. Set the count to 1 so that it can be used as a mutex.\n-Semaphore NmtGuard::_nmt_semaphore(1);\n-\n-\/\/ Track the lock's owner. -1 means the lock is free\/unowned.\n-intx volatile NmtGuard::_owner((intx) -1);\n-\n-\/\/ Allow reentrancy. Count the number of acquisitions.\n-size_t NmtGuard::_count(0);\n-\n","filename":"src\/hotspot\/share\/nmt\/nmtCommon.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -32,4 +32,0 @@\n-#include \"runtime\/atomic.hpp\"\n-#include \"runtime\/javaThread.hpp\"\n-#include \"runtime\/os.hpp\"\n-#include \"runtime\/semaphore.hpp\"\n@@ -144,41 +140,0 @@\n-class NmtGuard : public StackObj {\n-private:\n-    static Semaphore _nmt_semaphore;\n-    static intx volatile _owner;\n-    static size_t _count;\n-\n-public:\n-    NmtGuard() {\n-      intx const current =  os::current_thread_id();\n-      intx const owner = Atomic::load(&_owner);\n-\n-      if (owner != current) {\n-        _nmt_semaphore.wait();\n-        Atomic::store(&_owner, current);\n-      }\n-      _count++;\n-    }\n-\n-    ~NmtGuard() {\n-      assert_locked();\n-      _count--;\n-\n-      if (_count == 0) {\n-        Atomic::store(&_owner, (intx) -1);\n-        _nmt_semaphore.signal();\n-      }\n-    }\n-\n-    static bool is_owner() {\n-      intx const current = os::current_thread_id();\n-      intx const owner = Atomic::load(&_owner);\n-      return current == owner;\n-    }\n-\n-    static void assert_locked() {\n-#ifdef DEBUG\n-      assert(is_owner(), \"NMT lock should be acquired in this section. Current TID %ld, owner TID %ld\", os::current_thread_id(), Atomic::load(&_owner));\n-#endif\n-    }\n-};\n-\n","filename":"src\/hotspot\/share\/nmt\/nmtCommon.hpp","additions":0,"deletions":45,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"runtime\/mutexLocker.hpp\"\n@@ -55,1 +56,1 @@\n-  NmtGuard guard;\n+  NMTMutexLocker ml;\n","filename":"src\/hotspot\/share\/nmt\/nmtUsage.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"runtime\/mutexLocker.hpp\"\n@@ -55,1 +56,1 @@\n-  NmtGuard guard;\n+  NMTMutexLocker ml;\n@@ -65,1 +66,1 @@\n-  NmtGuard guard;\n+  NMTMutexLocker ml;\n","filename":"src\/hotspot\/share\/nmt\/threadStackTracker.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"runtime\/mutexLocker.hpp\"\n@@ -623,1 +624,1 @@\n-    NmtGuard::assert_locked();\n+    assert_lock_strong(NMT_lock);\n@@ -664,1 +665,1 @@\n-  NmtGuard guard;\n+  NMTMutexLocker ml;\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -139,0 +139,1 @@\n+Mutex*   NMT_lock                     = nullptr;\n@@ -298,1 +299,1 @@\n-  MUTEX_DEFN(SharedDecoder_lock              , PaddedMutex  , tty-1);\n+  MUTEX_DEFN(SharedDecoder_lock              , PaddedMutex  , service-5);\n@@ -302,0 +303,1 @@\n+  MUTEX_DEFN(NMT_lock                        , PaddedMutex  , service-4);\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"runtime\/thread.hpp\"\n@@ -118,0 +119,1 @@\n+extern Mutex*   NMT_lock;                        \/\/ guards NMT allocation updates\n@@ -195,1 +197,1 @@\n-    if (_mutex != nullptr) {\n+    if (_mutex != nullptr && Thread::current_or_null() != nullptr) {\n@@ -207,1 +209,1 @@\n-    if (_mutex != nullptr) {\n+    if (_mutex != nullptr && Thread::current_or_null() != nullptr) {\n@@ -217,1 +219,1 @@\n-    if (_mutex != nullptr) {\n+    if (_mutex != nullptr && Thread::current_or_null() != nullptr) {\n@@ -242,0 +244,9 @@\n+\/\/ Same as MutexLocker but can be used during VM init.\n+\/\/ Performs no action if given a null mutex or with detached threads.\n+class NMTMutexLocker: public MutexLockerImpl {\n+public:\n+    NMTMutexLocker() :\n+            MutexLockerImpl(NMT_lock, Mutex::_no_safepoint_check_flag) {\n+    }\n+};\n+\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2163,1 +2163,1 @@\n-    NmtGuard guard;\n+    NMTMutexLocker ml;\n@@ -2185,1 +2185,1 @@\n-    NmtGuard guard;\n+    NMTMutexLocker ml;\n@@ -2270,1 +2270,1 @@\n-    NmtGuard guard;\n+    NMTMutexLocker ml;\n@@ -2309,1 +2309,1 @@\n-    NmtGuard guard;\n+    NMTMutexLocker ml;\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -720,1 +720,2 @@\n-  if (MemTracker::enabled() && NmtGuard::is_owner()) {\n+  if (MemTracker::enabled() && NMT_lock != nullptr && NMT_lock->owned_by_self()) {\n+    \/\/ Avoid reentrancy due to mallocs in detailed mode.\n@@ -722,0 +723,2 @@\n+    \/\/ Manually unlock if already holding lock when upon entering error reporting.\n+    NMT_lock->unlock();\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}