{"files":[{"patch":"@@ -3785,1 +3785,1 @@\n-      fileStream fs(stderr);\n+      fileStream fs(stdout);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -197,1 +197,1 @@\n-    if (_mutex != nullptr && Thread::current_or_null() != nullptr) {\n+    if (_mutex != nullptr) {\n@@ -209,1 +209,1 @@\n-    if (_mutex != nullptr && Thread::current_or_null() != nullptr) {\n+    if (_mutex != nullptr) {\n@@ -219,1 +219,1 @@\n-    if (_mutex != nullptr && Thread::current_or_null() != nullptr) {\n+    if (_mutex != nullptr) {\n@@ -244,9 +244,0 @@\n-\/\/ Same as MutexLocker but can be used during VM init.\n-\/\/ Performs no action if given a null mutex or with detached threads.\n-class NMTMutexLocker: public MutexLockerImpl {\n-public:\n-    NMTMutexLocker() :\n-            MutexLockerImpl(NMT_lock, Mutex::_no_safepoint_check_flag) {\n-    }\n-};\n-\n@@ -268,0 +259,9 @@\n+\/\/ Same as MutexLocker but can be used during VM init.\n+\/\/ Performs no action if given a null mutex or with detached threads.\n+class NMTMutexLocker: public ConditionalMutexLocker {\n+public:\n+    NMTMutexLocker() :\n+            ConditionalMutexLocker(NMT_lock, Thread::current_or_null_safe() != nullptr, Mutex::_no_safepoint_check_flag) {\n+    }\n+};\n+\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"}]}