{"files":[{"patch":"@@ -1089,1 +1089,1 @@\n-    ThreadCritical tc;\n+    NmtGuard guard;\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1806,1 +1806,1 @@\n-    ThreadCritical tc;\n+    NmtGuard guard;\n","filename":"src\/hotspot\/os\/windows\/perfMemory_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-  \/\/ Use ThreadCritical to make sure that mtChunks don't get deallocated while the\n+  \/\/ Use NmtGuard to make sure that mtChunks don't get deallocated while the\n@@ -68,1 +68,1 @@\n-  ThreadCritical tc;\n+  NmtGuard guard;\n","filename":"src\/hotspot\/share\/nmt\/mallocTracker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"nmt\/nmtCommon.hpp\"\n@@ -144,1 +145,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtGuard guard;\n","filename":"src\/hotspot\/share\/nmt\/memBaseline.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -468,1 +468,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtGuard guard;\n","filename":"src\/hotspot\/share\/nmt\/memReporter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-#include \"runtime\/threadCritical.hpp\"\n@@ -128,1 +127,1 @@\n-      ThreadCritical tc;\n+      NmtGuard guard;\n@@ -154,1 +153,1 @@\n-      ThreadCritical tc;\n+      NmtGuard guard;\n@@ -165,1 +164,1 @@\n-      ThreadCritical tc;\n+      NmtGuard guard;\n@@ -173,1 +172,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtGuard guard;\n@@ -181,1 +180,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtGuard guard;\n@@ -190,1 +189,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtGuard guard;\n@@ -199,1 +198,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtGuard guard;\n@@ -213,1 +212,1 @@\n-      ThreadCritical tc;\n+      NmtGuard guard;\n@@ -222,1 +221,1 @@\n-      ThreadCritical tc;\n+      NmtGuard guard;\n@@ -272,0 +271,6 @@\n+  static void reduce_tracking_to_summary() {\n+    if (_tracking_level == NMT_detail) {\n+      _tracking_level = NMT_summary;\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"runtime\/mutex.hpp\"\n@@ -38,1 +37,0 @@\n-PlatformMutex* MemoryFileTracker::Instance::_mutex = nullptr;\n@@ -135,1 +133,0 @@\n-  _mutex = new PlatformMutex();\n@@ -196,8 +193,0 @@\n-\n-MemoryFileTracker::Instance::Locker::Locker() {\n-  MemoryFileTracker::Instance::_mutex->lock();\n-}\n-\n-MemoryFileTracker::Instance::Locker::~Locker() {\n-  MemoryFileTracker::Instance::_mutex->unlock();\n-}\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"runtime\/mutex.hpp\"\n@@ -84,1 +83,0 @@\n-    static PlatformMutex* _mutex;\n@@ -87,5 +85,0 @@\n-    class Locker : public StackObj {\n-    public:\n-      Locker();\n-      ~Locker();\n-    };\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,9 @@\n+\/\/ The underlying semaphore used by the NmtGuard lock. Set the count to 1 so that it can be used as a mutex.\n+Semaphore NmtGuard::_nmt_semaphore(1);\n+\n+\/\/ Track the lock's owner. -1 means the lock is free\/unowned.\n+intx volatile NmtGuard::_owner((intx) -1);\n+\n+\/\/ Allow reentrancy. Count the number of acquisitions.\n+size_t NmtGuard::_count(0);\n+\n","filename":"src\/hotspot\/share\/nmt\/nmtCommon.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -32,0 +32,4 @@\n+#include \"runtime\/atomic.hpp\"\n+#include \"runtime\/javaThread.hpp\"\n+#include \"runtime\/os.hpp\"\n+#include \"runtime\/semaphore.hpp\"\n@@ -140,0 +144,40 @@\n+class NmtGuard : public StackObj {\n+private:\n+    static Semaphore _nmt_semaphore;\n+    static intx volatile _owner;\n+    static size_t _count;\n+\n+public:\n+    NmtGuard() {\n+      intx const current =  os::current_thread_id();\n+      intx const owner = Atomic::load(&_owner);\n+\n+      if (owner != current) {\n+        _nmt_semaphore.wait();\n+        Atomic::store(&_owner, current);\n+      }\n+      _count++;\n+    }\n+\n+    ~NmtGuard() {\n+      assert_locked();\n+      _count--;\n+\n+      if (_count == 0) {\n+        Atomic::store(&_owner, (intx) -1);\n+        _nmt_semaphore.signal();\n+      }\n+    }\n+\n+    static bool is_owner() {\n+      intx const current = os::current_thread_id();\n+      intx const owner = Atomic::load(&_owner);\n+      return current == owner;\n+    }\n+\n+    static void assert_locked() {\n+#ifdef DEBUG\n+      assert(is_owner(), \"NMT lock should be acquired in this section. Current TID %ld, owner TID %ld\", os::current_thread_id(), Atomic::load(&_owner));\n+#endif\n+    }\n+};\n","filename":"src\/hotspot\/share\/nmt\/nmtCommon.hpp","additions":44,"deletions":0,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"runtime\/threadCritical.hpp\"\n@@ -56,1 +55,1 @@\n-  ThreadCritical tc;\n+  NmtGuard guard;\n","filename":"src\/hotspot\/share\/nmt\/nmtUsage.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"runtime\/threadCritical.hpp\"\n@@ -56,1 +55,1 @@\n-  ThreadCritical tc;\n+  NmtGuard guard;\n@@ -66,1 +65,1 @@\n-  ThreadCritical tc;\n+  NmtGuard guard;\n","filename":"src\/hotspot\/share\/nmt\/threadStackTracker.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"runtime\/threadCritical.hpp\"\n@@ -624,0 +623,1 @@\n+    NmtGuard::assert_locked();\n@@ -664,1 +664,1 @@\n-  ThreadCritical tc;\n+  NmtGuard guard;\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2163,1 +2163,1 @@\n-    ThreadCritical tc;\n+    NmtGuard guard;\n@@ -2185,1 +2185,1 @@\n-    ThreadCritical tc;\n+    NmtGuard guard;\n@@ -2270,1 +2270,1 @@\n-    ThreadCritical tc;\n+    NmtGuard guard;\n@@ -2309,1 +2309,1 @@\n-    ThreadCritical tc;\n+    NmtGuard guard;\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -720,0 +720,3 @@\n+  if (MemTracker::enabled() && NmtGuard::is_owner()) {\n+    MemTracker::reduce_tracking_to_summary();\n+  }\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}