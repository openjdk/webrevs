{"files":[{"patch":"@@ -1089,1 +1089,1 @@\n-    ThreadCritical tc;\n+    NmtVirtualMemoryLocker ml;\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3785,1 +3785,2 @@\n-      os::print_memory_mappings((char*)start, bytes, tty);\n+      fileStream fs(stdout);\n+      os::print_memory_mappings((char*)start, bytes, &fs);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1806,1 +1806,1 @@\n-    ThreadCritical tc;\n+    NmtVirtualMemoryLocker ml;\n","filename":"src\/hotspot\/os\/windows\/perfMemory_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtVirtualMemoryLocker ml;\n","filename":"src\/hotspot\/share\/nmt\/memBaseline.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -468,1 +468,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtVirtualMemoryLocker ml;\n","filename":"src\/hotspot\/share\/nmt\/memReporter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#include \"runtime\/threadCritical.hpp\"\n@@ -128,1 +127,1 @@\n-      ThreadCritical tc;\n+      NmtVirtualMemoryLocker ml;\n@@ -154,1 +153,1 @@\n-      ThreadCritical tc;\n+      NmtVirtualMemoryLocker ml;\n@@ -165,1 +164,1 @@\n-      ThreadCritical tc;\n+      NmtVirtualMemoryLocker ml;\n@@ -173,1 +172,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtVirtualMemoryLocker ml;\n@@ -181,1 +180,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtVirtualMemoryLocker ml;\n@@ -190,1 +189,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtVirtualMemoryLocker ml;\n@@ -199,1 +198,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtVirtualMemoryLocker ml;\n@@ -213,1 +212,1 @@\n-      ThreadCritical tc;\n+      NmtVirtualMemoryLocker ml;\n@@ -222,1 +221,1 @@\n-      ThreadCritical tc;\n+      NmtVirtualMemoryLocker ml;\n@@ -272,0 +271,6 @@\n+  static void reduce_tracking_to_summary() {\n+    if (_tracking_level == NMT_detail) {\n+      _tracking_level = NMT_summary;\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"runtime\/mutex.hpp\"\n@@ -38,1 +37,0 @@\n-PlatformMutex* MemoryFileTracker::Instance::_mutex = nullptr;\n@@ -135,1 +133,0 @@\n-  _mutex = new PlatformMutex();\n@@ -196,8 +193,0 @@\n-\n-MemoryFileTracker::Instance::Locker::Locker() {\n-  MemoryFileTracker::Instance::_mutex->lock();\n-}\n-\n-MemoryFileTracker::Instance::Locker::~Locker() {\n-  MemoryFileTracker::Instance::_mutex->unlock();\n-}\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"runtime\/mutex.hpp\"\n@@ -84,1 +83,0 @@\n-    static PlatformMutex* _mutex;\n@@ -87,5 +85,0 @@\n-    class Locker : public StackObj {\n-    public:\n-      Locker();\n-      ~Locker();\n-    };\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"runtime\/mutexLocker.hpp\"\n@@ -140,0 +141,8 @@\n+\/\/ Same as MutexLocker but can be used during VM init.\n+\/\/ Performs no action if given a null mutex or with detached threads.\n+class NmtVirtualMemoryLocker: public ConditionalMutexLocker {\n+public:\n+    NmtVirtualMemoryLocker() :\n+            ConditionalMutexLocker(NmtVirtualMemory_lock, Thread::current_or_null_safe() != nullptr, Mutex::_no_safepoint_check_flag) {\n+    }\n+};\n","filename":"src\/hotspot\/share\/nmt\/nmtCommon.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"runtime\/threadCritical.hpp\"\n@@ -56,1 +55,1 @@\n-  ThreadCritical tc;\n+  NmtVirtualMemoryLocker ml;\n@@ -66,1 +65,1 @@\n-  ThreadCritical tc;\n+  NmtVirtualMemoryLocker ml;\n","filename":"src\/hotspot\/share\/nmt\/threadStackTracker.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"runtime\/threadCritical.hpp\"\n@@ -624,0 +623,1 @@\n+    assert_lock_strong(NmtVirtualMemory_lock);\n@@ -664,1 +664,1 @@\n-  ThreadCritical tc;\n+  NmtVirtualMemoryLocker ml;\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -139,0 +139,1 @@\n+Mutex*   NmtVirtualMemory_lock          = nullptr;\n@@ -298,1 +299,1 @@\n-  MUTEX_DEFN(SharedDecoder_lock              , PaddedMutex  , tty-1);\n+  MUTEX_DEFN(SharedDecoder_lock              , PaddedMutex  , service-5);\n@@ -302,0 +303,1 @@\n+  MUTEX_DEFN(NmtVirtualMemory_lock           , PaddedMutex  , service-4);\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"runtime\/thread.hpp\"\n@@ -118,0 +119,1 @@\n+extern Mutex*   NmtVirtualMemory_lock;           \/\/ guards NMT virtual memory updates\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2163,1 +2163,1 @@\n-    ThreadCritical tc;\n+    NmtVirtualMemoryLocker ml;\n@@ -2185,1 +2185,1 @@\n-    ThreadCritical tc;\n+    NmtVirtualMemoryLocker ml;\n@@ -2270,1 +2270,1 @@\n-    ThreadCritical tc;\n+    NmtVirtualMemoryLocker ml;\n@@ -2309,1 +2309,1 @@\n-    ThreadCritical tc;\n+    NmtVirtualMemoryLocker ml;\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -720,0 +720,6 @@\n+  if (MemTracker::enabled() && NmtVirtualMemory_lock != nullptr && NmtVirtualMemory_lock->owned_by_self()) {\n+    \/\/ Avoid reentrancy due to mallocs in detailed mode.\n+    MemTracker::reduce_tracking_to_summary();\n+    \/\/ Manually unlock if already holding lock upon entering error reporting.\n+    NmtVirtualMemory_lock->unlock();\n+  }\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}