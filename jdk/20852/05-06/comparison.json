{"files":[{"patch":"@@ -37,1 +37,0 @@\n-#include \"runtime\/mutexLocker.hpp\"\n@@ -1090,1 +1089,1 @@\n-    NMTMutexLocker ml;\n+    NmtVirtualMemoryLocker ml;\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-#include \"runtime\/mutexLocker.hpp\"\n@@ -1807,1 +1806,1 @@\n-    NMTMutexLocker ml;\n+    NmtVirtualMemoryLocker ml;\n","filename":"src\/hotspot\/os\/windows\/perfMemory_windows.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-#include \"runtime\/mutexLocker.hpp\"\n@@ -66,1 +65,1 @@\n-  \/\/ Use NMT_lock to make sure that mtChunks don't get deallocated while the\n+  \/\/ Use ThreadCritical to make sure that mtChunks don't get deallocated while the\n@@ -69,1 +68,1 @@\n-  NMTMutexLocker ml;\n+  ThreadCritical tc;\n","filename":"src\/hotspot\/share\/nmt\/mallocTracker.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"runtime\/mutexLocker.hpp\"\n@@ -145,1 +144,1 @@\n-    NMTMutexLocker ml;\n+    NmtVirtualMemoryLocker ml;\n","filename":"src\/hotspot\/share\/nmt\/memBaseline.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#include \"runtime\/mutexLocker.hpp\"\n@@ -469,1 +468,1 @@\n-    NMTMutexLocker ml;\n+    NmtVirtualMemoryLocker ml;\n","filename":"src\/hotspot\/share\/nmt\/memReporter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-      NMTMutexLocker ml;\n+      NmtVirtualMemoryLocker ml;\n@@ -153,1 +153,1 @@\n-      NMTMutexLocker ml;\n+      NmtVirtualMemoryLocker ml;\n@@ -164,1 +164,1 @@\n-      NMTMutexLocker ml;\n+      NmtVirtualMemoryLocker ml;\n@@ -172,1 +172,1 @@\n-    NMTMutexLocker ml;\n+    NmtVirtualMemoryLocker ml;\n@@ -180,1 +180,1 @@\n-    NMTMutexLocker ml;\n+    NmtVirtualMemoryLocker ml;\n@@ -189,1 +189,1 @@\n-    NMTMutexLocker ml;\n+    NmtVirtualMemoryLocker ml;\n@@ -198,1 +198,1 @@\n-    NMTMutexLocker ml;\n+    NmtVirtualMemoryLocker ml;\n@@ -212,1 +212,1 @@\n-      NMTMutexLocker ml;\n+      NmtVirtualMemoryLocker ml;\n@@ -221,1 +221,1 @@\n-      NMTMutexLocker ml;\n+      NmtVirtualMemoryLocker ml;\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"runtime\/mutexLocker.hpp\"\n@@ -140,0 +141,8 @@\n+\/\/ Same as MutexLocker but can be used during VM init.\n+\/\/ Performs no action if given a null mutex or with detached threads.\n+class NmtVirtualMemoryLocker: public ConditionalMutexLocker {\n+public:\n+    NmtVirtualMemoryLocker() :\n+            ConditionalMutexLocker(NmtVirtualMemory_lock, Thread::current_or_null_safe() != nullptr, Mutex::_no_safepoint_check_flag) {\n+    }\n+};\n","filename":"src\/hotspot\/share\/nmt\/nmtCommon.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-#include \"runtime\/mutexLocker.hpp\"\n+#include \"runtime\/threadCritical.hpp\"\n@@ -56,1 +56,1 @@\n-  NMTMutexLocker ml;\n+  ThreadCritical tc;\n","filename":"src\/hotspot\/share\/nmt\/nmtUsage.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"runtime\/mutexLocker.hpp\"\n@@ -56,1 +55,1 @@\n-  NMTMutexLocker ml;\n+  NmtVirtualMemoryLocker ml;\n@@ -66,1 +65,1 @@\n-  NMTMutexLocker ml;\n+  NmtVirtualMemoryLocker ml;\n","filename":"src\/hotspot\/share\/nmt\/threadStackTracker.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"runtime\/mutexLocker.hpp\"\n@@ -624,1 +623,1 @@\n-    assert_lock_strong(NMT_lock);\n+    assert_lock_strong(NmtVirtualMemory_lock);\n@@ -665,1 +664,1 @@\n-  NMTMutexLocker ml;\n+  NmtVirtualMemoryLocker ml;\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-Mutex*   NMT_lock                     = nullptr;\n+Mutex*   NmtVirtualMemory_lock          = nullptr;\n@@ -303,1 +303,1 @@\n-  MUTEX_DEFN(NMT_lock                        , PaddedMutex  , service-4);\n+  MUTEX_DEFN(NmtVirtualMemory_lock           , PaddedMutex  , service-4);\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-extern Mutex*   NMT_lock;                        \/\/ guards NMT allocation updates\n+extern Mutex*   NmtVirtualMemory_lock;           \/\/ guards NMT virtual memory updates\n@@ -259,9 +259,0 @@\n-\/\/ Same as MutexLocker but can be used during VM init.\n-\/\/ Performs no action if given a null mutex or with detached threads.\n-class NMTMutexLocker: public ConditionalMutexLocker {\n-public:\n-    NMTMutexLocker() :\n-            ConditionalMutexLocker(NMT_lock, Thread::current_or_null_safe() != nullptr, Mutex::_no_safepoint_check_flag) {\n-    }\n-};\n-\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2163,1 +2163,1 @@\n-    NMTMutexLocker ml;\n+    NmtVirtualMemoryLocker ml;\n@@ -2185,1 +2185,1 @@\n-    NMTMutexLocker ml;\n+    NmtVirtualMemoryLocker ml;\n@@ -2270,1 +2270,1 @@\n-    NMTMutexLocker ml;\n+    NmtVirtualMemoryLocker ml;\n@@ -2309,1 +2309,1 @@\n-    NMTMutexLocker ml;\n+    NmtVirtualMemoryLocker ml;\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -720,1 +720,1 @@\n-  if (MemTracker::enabled() && NMT_lock != nullptr && NMT_lock->owned_by_self()) {\n+  if (MemTracker::enabled() && NmtVirtualMemory_lock != nullptr && NmtVirtualMemory_lock->owned_by_self()) {\n@@ -724,1 +724,1 @@\n-    NMT_lock->unlock();\n+    NmtVirtualMemory_lock->unlock();\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}