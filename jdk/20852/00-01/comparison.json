{"files":[{"patch":"@@ -31,0 +31,1 @@\n+#include \"nmt\/nmtCommon.hpp\"\n@@ -144,1 +145,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtGuard guard;\n","filename":"src\/hotspot\/share\/nmt\/memBaseline.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -468,1 +468,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtGuard guard;\n","filename":"src\/hotspot\/share\/nmt\/memReporter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtGuard guard;\n@@ -180,1 +180,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtGuard guard;\n@@ -189,1 +189,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtGuard guard;\n@@ -198,1 +198,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtGuard guard;\n@@ -271,0 +271,6 @@\n+  static void reduce_tracking_to_summary() {\n+    if (_tracking_level == NMT_detail) {\n+      _tracking_level = NMT_summary;\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"runtime\/mutex.hpp\"\n@@ -38,1 +37,0 @@\n-PlatformMutex* MemoryFileTracker::Instance::_mutex = nullptr;\n@@ -135,1 +133,0 @@\n-  _mutex = new PlatformMutex();\n@@ -196,8 +193,0 @@\n-\n-MemoryFileTracker::Instance::Locker::Locker() {\n-  MemoryFileTracker::Instance::_mutex->lock();\n-}\n-\n-MemoryFileTracker::Instance::Locker::~Locker() {\n-  MemoryFileTracker::Instance::_mutex->unlock();\n-}\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"runtime\/mutex.hpp\"\n@@ -84,1 +83,0 @@\n-    static PlatformMutex* _mutex;\n@@ -87,5 +85,0 @@\n-    class Locker : public StackObj {\n-    public:\n-      Locker();\n-      ~Locker();\n-    };\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+\/\/ The underlying semaphore used by the NmtGuard lock. Set the count to 1 so that it can be used as a mutex.\n@@ -40,0 +41,2 @@\n+\n+\/\/ Track the lock's owner. -1 means the lock is free\/unowned.\n@@ -42,0 +45,3 @@\n+\/\/ Allow reentrancy. Count the number of acquisitions.\n+size_t NmtGuard::_count(0);\n+\n","filename":"src\/hotspot\/share\/nmt\/nmtCommon.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"runtime\/os.hpp\"\n@@ -35,0 +34,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -148,0 +148,1 @@\n+    static size_t _count;\n@@ -153,1 +154,0 @@\n-      assert(current != owner, \"Lock is not reentrant\");\n@@ -155,2 +155,5 @@\n-      _nmt_semaphore.wait();\n-      Atomic::store(&_owner, current);\n+      if (owner != current) {\n+        _nmt_semaphore.wait();\n+        Atomic::store(&_owner, current);\n+      }\n+      _count++;\n@@ -161,2 +164,6 @@\n-      Atomic::store(&_owner, (intx) -1);\n-      _nmt_semaphore.signal();\n+      _count--;\n+\n+      if (_count == 0) {\n+        Atomic::store(&_owner, (intx) -1);\n+        _nmt_semaphore.signal();\n+      }\n@@ -165,1 +172,1 @@\n-    static void assert_locked(){\n+    static bool is_owner() {\n@@ -168,1 +175,7 @@\n-      assert(current == owner, \"NMT lock should be acquired in this section.\");\n+      return current == owner;\n+    }\n+\n+    static void assert_locked() {\n+#ifdef DEBUG\n+      assert(is_owner(), \"NMT lock should be acquired in this section. Current TID %ld, owner TID %ld\", os::current_thread_id(), Atomic::load(&_owner));\n+#endif\n","filename":"src\/hotspot\/share\/nmt\/nmtCommon.hpp","additions":21,"deletions":8,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -720,0 +720,3 @@\n+  if (MemTracker::enabled() && NmtGuard::is_owner()) {\n+    MemTracker::reduce_tracking_to_summary();\n+  }\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}