{"files":[{"patch":"@@ -551,2 +551,1 @@\n-                                param.charAt(0) == '-' && param.charAt(1) == '-' &&\n-                                !param.contains(\" \")) {\n+                                param.charAt(0) == '-' && param.charAt(1) == '-') {\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/TaskHelper.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import java.util.stream.Stream;\n@@ -28,0 +29,1 @@\n+import org.junit.jupiter.api.BeforeEach;\n@@ -29,0 +31,2 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -38,0 +42,1 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -58,1 +63,1 @@\n-            argValue = arg;\n+            mainArgValue = arg;\n@@ -61,0 +66,1 @@\n+            mainFlag = true;\n@@ -65,0 +71,4 @@\n+    private static String mainArgValue;\n+    private static boolean mainFlag = false;\n+\n+    public record ArgTestCase(String cmdLine, String[] tokens, String pluginArgValue, String mainArgValue, boolean mainFlagSet) {};\n@@ -106,10 +116,6 @@\n-    @Test\n-    public void testGnuStyleOptionAsArgValue() throws TaskHelper.BadArgs {\n-        var validFormats = new String[][] {\n-            { \"--main-expecting=--main-no-arg\", \"--main-no-arg\" },\n-            { \"--main-expecting\", \"--main-no-arg --list\", \"--main-no-arg\"},\n-            { \"--main-expecting\", \" --main-no-arg\", \"--main-no-arg\" },\n-            { \"--raw-arg-plugin=--main-no-arg\", \"--main-no-arg\" },\n-            { \"--raw-arg-plugin\", \"--main-no-arg --list\", \"--main-no-arg\"},\n-            { \"--raw-arg-plugin\", \" --main-no-arg\", \"--main-no-arg\" },\n-        };\n+    @BeforeEach\n+    public void reset() {\n+        argValue = null;\n+        mainArgValue = null;\n+        mainFlag = false;\n+    }\n@@ -117,12 +123,64 @@\n-        for (var args: validFormats) {\n-            var remaining = optionsHelper.handleOptions(this, args);\n-            try {\n-                \/\/ trigger Plugin::configure\n-                taskHelper.getPluginsConfig(null, null, null);\n-            } catch (IOException ex) {\n-                fail(\"Unexpected IOException\");\n-            }\n-            assertTrue(remaining.isEmpty());\n-            assertTrue(argValue.strip().startsWith(\"--main-no-arg\"));\n-            \/\/ reset\n-            argValue = null;\n+    public static Stream<ArgTestCase> gnuStyleUsages() {\n+        return Stream.of(\n+            new ArgTestCase(\n+                    \"--main-expecting=--main-no-arg --main-no-arg\",\n+                    new String[] { \"--main-expecting=--main-no-arg\", \"--main-no-arg\" },\n+                    null,\n+                    \"--main-no-arg\",\n+                    true\n+            ),\n+            new ArgTestCase(\n+                    \"--main-expecting ' --main-no-arg' --main-no-arg\",\n+                    new String[] { \"--main-expecting\", \" --main-no-arg\", \"--main-no-arg\" },\n+                    null,\n+                    \" --main-no-arg\",\n+                    true\n+            ),\n+            new ArgTestCase(\n+                    \"--raw-arg-plugin=--main-no-arg --main-no-arg\",\n+                    new String[] { \"--raw-arg-plugin=--main-no-arg\", \"--main-no-arg\" },\n+                    \"--main-no-arg\",\n+                    null,\n+                    true\n+            ),\n+            new ArgTestCase(\n+                    \"--raw-arg-plugin ' --main-no-arg' --main-no-arg\",\n+                    new String[] { \"--raw-arg-plugin\", \" --main-no-arg\", \"--main-no-arg\" },\n+                    \" --main-no-arg\",\n+                    null,\n+                    true\n+            ),\n+            new ArgTestCase(\n+                    \"--raw-arg-plugin=--main-expecting=value --main-no-arg\",\n+                    new String[] { \"--raw-arg-plugin=--main-expecting=value\", \"--main-no-arg\" },\n+                    \"--main-expecting=value\",\n+                    null,\n+                    true\n+            ),\n+            new ArgTestCase(\n+                    \"--raw-arg-plugin='--main-expecting value' --main-no-arg\",\n+                    new String[] { \"--raw-arg-plugin=--main-expecting value\", \"--main-no-arg\" },\n+                    \"--main-expecting value\",\n+                    null,\n+                    true\n+            ),\n+            new ArgTestCase(\n+                    \"--raw-arg-plugin='--main-expecting value' --main-expecting realValue\",\n+                    new String[] { \"--raw-arg-plugin=--main-expecting value\", \"--main-expecting\", \"realValue\" },\n+                    \"--main-expecting value\",\n+                    \"realValue\",\n+                    false\n+            ));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"gnuStyleUsages\")\n+    public void testGnuStyleOptionAsArgValue(ArgTestCase testCase) throws TaskHelper.BadArgs {\n+        System.out.println(\"Test cmdline: \" + testCase.cmdLine());\n+        var args = testCase.tokens();\n+        var remaining = optionsHelper.handleOptions(this, args);\n+        try {\n+            \/\/ trigger Plugin::configure\n+            taskHelper.getPluginsConfig(null, null, null);\n+        } catch (IOException ex) {\n+            fail(\"Unexpected IOException\");\n@@ -130,0 +188,4 @@\n+        assertTrue(remaining.isEmpty());\n+        assertEquals(testCase.mainFlagSet(), mainFlag);\n+        assertEquals(testCase.pluginArgValue(), argValue);\n+        assertEquals(testCase.mainArgValue(), mainArgValue);\n@@ -134,3 +196,6 @@\n-        var validFormats = new String[][] {\n-            { \"--main-expecting\", \"--main-no-arg\", \"--main-no-arg\"},\n-            { \"--raw-arg-plugin\", \"--main-no-arg\", \"--main-no-arg\"}\n+            var invalidFormat = new String[][] {\n+                { \"--main-expecting\", \"--main-no-arg --list\", \"--main-no-arg\" },\n+                { \"--main-expecting\", \"--main-no-arg\", \"--main-no-arg\" },\n+                { \"--raw-arg-plugin\", \"--main-no-arg --list\", \"--main-no-arg\" },\n+                { \"--raw-arg-plugin\", \"--main-no-arg\", \"--main-no-arg\" },\n+                { \"--raw-arg-plugin\", \"--main-expecting\", \"value\", \"--main-no-arg\" }\n@@ -139,1 +204,1 @@\n-        for (var args: validFormats) {\n+        for (var args: invalidFormat) {\n@@ -142,1 +207,1 @@\n-                fail(\"Should get missing argument value\");\n+                fail(\"Should get missing argument value or \");\n@@ -148,0 +213,7 @@\n+\n+    @Test\n+    public void testRemaining() throws BadArgs {\n+        String[] args = { \"--raw-arg-plugin=--main-expecting\", \"value\", \"--main-no-arg\" };\n+        var remaining = optionsHelper.handleOptions(this, args);\n+        assertEquals(2, remaining.size());\n+    }\n","filename":"test\/jdk\/tools\/jlink\/TaskHelperTest.java","additions":101,"deletions":29,"binary":false,"changes":130,"status":"modified"}]}