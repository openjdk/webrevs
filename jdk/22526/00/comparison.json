{"files":[{"patch":"@@ -538,0 +538,1 @@\n+                    boolean potentiallyGnuOption = false;\n@@ -543,0 +544,1 @@\n+                            potentiallyGnuOption = true;\n@@ -545,5 +547,7 @@\n-                        if (param == null || param.isEmpty()\n-                                || (param.length() >= 2 && param.charAt(0) == '-'\n-                                && param.charAt(1) == '-')) {\n-                            throw new BadArgs(\"err.missing.arg\", name).\n-                                    showUsage(true);\n+                        if (param == null || param.isEmpty()) {\n+                            throw new BadArgs(\"err.missing.arg\", name).showUsage(true);\n+                        }\n+                        if (potentiallyGnuOption && param.length() >= 2 &&\n+                            param.charAt(0) == '-' && param.charAt(1) == '-' &&\n+                            !param.contains(\" \")) {\n+                                throw new BadArgs(\"err.missing.arg\", name).showUsage(true);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/TaskHelper.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,148 @@\n+\/*\n+ * Copyright (c) 2024, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import jdk.tools.jlink.internal.PluginRepository;\n+import jdk.tools.jlink.internal.TaskHelper;\n+import jdk.tools.jlink.internal.TaskHelper.Option;\n+import jdk.tools.jlink.internal.TaskHelper.OptionsHelper;\n+import jdk.tools.jlink.plugin.Plugin;\n+import jdk.tools.jlink.plugin.ResourcePool;\n+import jdk.tools.jlink.plugin.ResourcePoolBuilder;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import jdk.tools.jlink.internal.TaskHelper.BadArgs;\n+\n+\/*\n+ * @test\n+ * @summary Test TaskHelper option parsing\n+ * @bug 8303884\n+ * @modules jdk.jlink\/jdk.tools.jlink.internal\n+ *          jdk.jlink\/jdk.tools.jlink.plugin\n+ * @run junit TaskHelperTest\n+ *\/\n+public class TaskHelperTest {\n+    private static TaskHelper taskHelper;\n+    private static OptionsHelper<TaskHelperTest> optionsHelper;\n+\n+    private static final List<Option<TaskHelperTest>> OPTIONS = List.of(\n+        new Option<>(true, (task, opt, arg) -> {\n+            System.out.println(arg);\n+            argValue = arg;\n+        }, true, \"--main-expecting\"),\n+        new Option<>(false, (task, opt, arg) -> {\n+        }, true, \"--main-no-arg\")\n+    );\n+\n+    private static String argValue;\n+\n+    public static class TestPluginWithRawOption implements Plugin {\n+        @Override\n+        public ResourcePool transform(ResourcePool in, ResourcePoolBuilder out) {\n+            return out.build();\n+        }\n+\n+        @Override\n+        public boolean hasArguments() {\n+            return true;\n+        }\n+\n+        @Override\n+        public boolean hasRawArgument() {\n+            return true;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return \"raw-arg-plugin\";\n+        }\n+\n+        @Override\n+        public void configure(Map<String, String> config) {\n+            config.forEach((k, v) -> {\n+                System.out.println(k + \" -> \" + v);\n+            });\n+            var v = config.get(getName());\n+            if (v == null)\n+                throw new AssertionError();\n+            argValue = v;\n+        }\n+    }\n+\n+    @BeforeAll\n+    public static void setup() {\n+        taskHelper = new TaskHelper(TaskHelper.JLINK_BUNDLE);\n+        optionsHelper = taskHelper.newOptionsHelper(TaskHelperTest.class, OPTIONS.toArray(Option[]::new));\n+        PluginRepository.registerPlugin(new TestPluginWithRawOption());\n+    }\n+\n+    @Test\n+    public void testGnuStyleOptionAsArgValue() throws TaskHelper.BadArgs {\n+        var validFormats = new String[][] {\n+            { \"--main-expecting=--main-no-arg\", \"--main-no-arg\" },\n+            { \"--main-expecting\", \"--main-no-arg --list\", \"--main-no-arg\"},\n+            { \"--main-expecting\", \" --main-no-arg\", \"--main-no-arg\" },\n+            { \"--raw-arg-plugin=--main-no-arg\", \"--main-no-arg\" },\n+            { \"--raw-arg-plugin\", \"--main-no-arg --list\", \"--main-no-arg\"},\n+            { \"--raw-arg-plugin\", \" --main-no-arg\", \"--main-no-arg\" },\n+        };\n+\n+        for (var args: validFormats) {\n+            var remaining = optionsHelper.handleOptions(this, args);\n+            try {\n+                \/\/ trigger Plugin::configure\n+                taskHelper.getPluginsConfig(null, null, null);\n+            } catch (IOException ex) {\n+                fail(\"Unexpected IOException\");\n+            }\n+            assertTrue(remaining.isEmpty());\n+            assertTrue(argValue.strip().startsWith(\"--main-no-arg\"));\n+            \/\/ reset\n+            argValue = null;\n+        }\n+    }\n+\n+    @Test\n+    public void testGnuStyleOptionAsArgValueMissing() {\n+        var validFormats = new String[][] {\n+            { \"--main-expecting\", \"--main-no-arg\", \"--main-no-arg\"},\n+            { \"--raw-arg-plugin\", \"--main-no-arg\", \"--main-no-arg\"}\n+        };\n+\n+        for (var args: validFormats) {\n+            try {\n+                optionsHelper.handleOptions(this, args);\n+                fail(\"Should get missing argument value\");\n+            } catch (BadArgs ex) {\n+                \/\/ expected\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/tools\/jlink\/TaskHelperTest.java","additions":148,"deletions":0,"binary":false,"changes":148,"status":"added"}]}