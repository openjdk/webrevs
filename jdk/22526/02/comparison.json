{"files":[{"patch":"@@ -538,0 +538,1 @@\n+                    boolean potentiallyGnuOption = false;\n@@ -543,0 +544,1 @@\n+                            potentiallyGnuOption = true;\n@@ -545,5 +547,6 @@\n-                        if (param == null || param.isEmpty()\n-                                || (param.length() >= 2 && param.charAt(0) == '-'\n-                                && param.charAt(1) == '-')) {\n-                            throw new BadArgs(\"err.missing.arg\", name).\n-                                    showUsage(true);\n+                        if (param == null || param.isEmpty()) {\n+                            throw new BadArgs(\"err.missing.arg\", name).showUsage(true);\n+                        }\n+                        if (potentiallyGnuOption && param.length() >= 2 &&\n+                                param.charAt(0) == '-' && param.charAt(1) == '-') {\n+                            throw new BadArgs(\"err.missing.arg\", name).showUsage(true);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/TaskHelper.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,220 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import jdk.tools.jlink.internal.PluginRepository;\n+import jdk.tools.jlink.internal.TaskHelper;\n+import jdk.tools.jlink.internal.TaskHelper.Option;\n+import jdk.tools.jlink.internal.TaskHelper.OptionsHelper;\n+import jdk.tools.jlink.plugin.Plugin;\n+import jdk.tools.jlink.plugin.ResourcePool;\n+import jdk.tools.jlink.plugin.ResourcePoolBuilder;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import jdk.tools.jlink.internal.TaskHelper.BadArgs;\n+\n+\/*\n+ * @test\n+ * @summary Test TaskHelper option parsing\n+ * @bug 8303884\n+ * @modules jdk.jlink\/jdk.tools.jlink.internal\n+ *          jdk.jlink\/jdk.tools.jlink.plugin\n+ * @run junit TaskHelperTest\n+ *\/\n+public class TaskHelperTest {\n+    private static TaskHelper taskHelper;\n+    private static OptionsHelper<TaskHelperTest> optionsHelper;\n+\n+    private static final List<Option<TaskHelperTest>> OPTIONS = List.of(\n+        new Option<>(true, (task, opt, arg) -> {\n+            System.out.println(arg);\n+            mainArgValue = arg;\n+        }, true, \"--main-expecting\"),\n+        new Option<>(false, (task, opt, arg) -> {\n+            mainFlag = true;\n+        }, true, \"--main-no-arg\")\n+    );\n+\n+    private static String argValue;\n+    private static String mainArgValue;\n+    private static boolean mainFlag = false;\n+\n+    public record ArgTestCase(String cmdLine, String[] tokens, String pluginArgValue, String mainArgValue, boolean mainFlagSet) {};\n+\n+    public static class TestPluginWithRawOption implements Plugin {\n+        @Override\n+        public ResourcePool transform(ResourcePool in, ResourcePoolBuilder out) {\n+            return out.build();\n+        }\n+\n+        @Override\n+        public boolean hasArguments() {\n+            return true;\n+        }\n+\n+        @Override\n+        public boolean hasRawArgument() {\n+            return true;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return \"raw-arg-plugin\";\n+        }\n+\n+        @Override\n+        public void configure(Map<String, String> config) {\n+            config.forEach((k, v) -> {\n+                System.out.println(k + \" -> \" + v);\n+            });\n+            var v = config.get(getName());\n+            if (v == null)\n+                throw new AssertionError();\n+            argValue = v;\n+        }\n+    }\n+\n+    @BeforeAll\n+    public static void setup() {\n+        taskHelper = new TaskHelper(TaskHelper.JLINK_BUNDLE);\n+        optionsHelper = taskHelper.newOptionsHelper(TaskHelperTest.class, OPTIONS.toArray(Option[]::new));\n+        PluginRepository.registerPlugin(new TestPluginWithRawOption());\n+    }\n+\n+    @BeforeEach\n+    public void reset() {\n+        argValue = null;\n+        mainArgValue = null;\n+        mainFlag = false;\n+    }\n+\n+    public static Stream<ArgTestCase> gnuStyleUsages() {\n+        return Stream.of(\n+            new ArgTestCase(\n+                    \"--main-expecting=--main-no-arg --main-no-arg\",\n+                    new String[] { \"--main-expecting=--main-no-arg\", \"--main-no-arg\" },\n+                    null,\n+                    \"--main-no-arg\",\n+                    true\n+            ),\n+            new ArgTestCase(\n+                    \"--main-expecting ' --main-no-arg' --main-no-arg\",\n+                    new String[] { \"--main-expecting\", \" --main-no-arg\", \"--main-no-arg\" },\n+                    null,\n+                    \" --main-no-arg\",\n+                    true\n+            ),\n+            new ArgTestCase(\n+                    \"--raw-arg-plugin=--main-no-arg --main-no-arg\",\n+                    new String[] { \"--raw-arg-plugin=--main-no-arg\", \"--main-no-arg\" },\n+                    \"--main-no-arg\",\n+                    null,\n+                    true\n+            ),\n+            new ArgTestCase(\n+                    \"--raw-arg-plugin ' --main-no-arg' --main-no-arg\",\n+                    new String[] { \"--raw-arg-plugin\", \" --main-no-arg\", \"--main-no-arg\" },\n+                    \" --main-no-arg\",\n+                    null,\n+                    true\n+            ),\n+            new ArgTestCase(\n+                    \"--raw-arg-plugin=--main-expecting=value --main-no-arg\",\n+                    new String[] { \"--raw-arg-plugin=--main-expecting=value\", \"--main-no-arg\" },\n+                    \"--main-expecting=value\",\n+                    null,\n+                    true\n+            ),\n+            new ArgTestCase(\n+                    \"--raw-arg-plugin='--main-expecting value' --main-no-arg\",\n+                    new String[] { \"--raw-arg-plugin=--main-expecting value\", \"--main-no-arg\" },\n+                    \"--main-expecting value\",\n+                    null,\n+                    true\n+            ),\n+            new ArgTestCase(\n+                    \"--raw-arg-plugin='--main-expecting value' --main-expecting realValue\",\n+                    new String[] { \"--raw-arg-plugin=--main-expecting value\", \"--main-expecting\", \"realValue\" },\n+                    \"--main-expecting value\",\n+                    \"realValue\",\n+                    false\n+            ));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"gnuStyleUsages\")\n+    public void testGnuStyleOptionAsArgValue(ArgTestCase testCase) throws TaskHelper.BadArgs {\n+        System.out.println(\"Test cmdline: \" + testCase.cmdLine());\n+        var args = testCase.tokens();\n+        var remaining = optionsHelper.handleOptions(this, args);\n+        try {\n+            \/\/ trigger Plugin::configure\n+            taskHelper.getPluginsConfig(null, null, null);\n+        } catch (IOException ex) {\n+            fail(\"Unexpected IOException\");\n+        }\n+        assertTrue(remaining.isEmpty());\n+        assertEquals(testCase.mainFlagSet(), mainFlag);\n+        assertEquals(testCase.pluginArgValue(), argValue);\n+        assertEquals(testCase.mainArgValue(), mainArgValue);\n+    }\n+\n+    @Test\n+    public void testGnuStyleOptionAsArgValueMissing() {\n+            var invalidFormat = new String[][] {\n+                { \"--main-expecting\", \"--main-no-arg --list\", \"--main-no-arg\" },\n+                { \"--main-expecting\", \"--main-no-arg\", \"--main-no-arg\" },\n+                { \"--raw-arg-plugin\", \"--main-no-arg --list\", \"--main-no-arg\" },\n+                { \"--raw-arg-plugin\", \"--main-no-arg\", \"--main-no-arg\" },\n+                { \"--raw-arg-plugin\", \"--main-expecting\", \"value\", \"--main-no-arg\" }\n+        };\n+\n+        for (var args: invalidFormat) {\n+            try {\n+                optionsHelper.handleOptions(this, args);\n+                fail(\"Should get missing argument value or \");\n+            } catch (BadArgs ex) {\n+                \/\/ expected\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testRemaining() throws BadArgs {\n+        String[] args = { \"--raw-arg-plugin=--main-expecting\", \"value\", \"--main-no-arg\" };\n+        var remaining = optionsHelper.handleOptions(this, args);\n+        assertEquals(2, remaining.size());\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/tools\/jlink\/TaskHelperTest.java","additions":220,"deletions":0,"binary":false,"changes":220,"status":"added"}]}