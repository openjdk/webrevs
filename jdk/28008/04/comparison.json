{"files":[{"patch":"@@ -1150,2 +1150,1 @@\n-    + align_up(debug_info->data_size()           , oopSize)\n-    + ImmutableDataReferencesCounterSize;\n+    + align_up(debug_info->data_size()           , oopSize);\n@@ -1156,0 +1155,1 @@\n+    immutable_data_size += ImmutableDataRefCountSize;\n@@ -1326,1 +1326,1 @@\n-    _immutable_data_reference_counter_offset = 0;\n+    _immutable_data_ref_count_offset = 0;\n@@ -1459,1 +1459,1 @@\n-  _immutable_data_reference_counter_offset = nm._immutable_data_reference_counter_offset;\n+  _immutable_data_ref_count_offset = nm._immutable_data_ref_count_offset;\n@@ -1464,1 +1464,1 @@\n-    set_immutable_data_references_counter(get_immutable_data_references_counter() + 1);\n+    inc_immutable_data_ref_count();\n@@ -1757,2 +1757,1 @@\n-    _immutable_data_reference_counter_offset = _speculations_offset + align_up(speculations_len, oopSize);\n-    DEBUG_ONLY( int immutable_data_end_offset = _immutable_data_reference_counter_offset + ImmutableDataReferencesCounterSize; )\n+    _immutable_data_ref_count_offset = _speculations_offset + align_up(speculations_len, oopSize);\n@@ -1760,2 +1759,1 @@\n-    _immutable_data_reference_counter_offset =  _scopes_data_offset + align_up(debug_info->data_size(), oopSize);\n-    DEBUG_ONLY( int immutable_data_end_offset = _immutable_data_reference_counter_offset + ImmutableDataReferencesCounterSize; )\n+    _immutable_data_ref_count_offset = _scopes_data_offset + align_up(debug_info->data_size(), oopSize);\n@@ -1763,0 +1761,1 @@\n+    DEBUG_ONLY( int immutable_data_end_offset = _immutable_data_ref_count_offset + ImmutableDataRefCountSize; )\n@@ -1794,1 +1793,1 @@\n-    set_immutable_data_references_counter(1);\n+    init_immutable_data_ref_count();\n@@ -2427,6 +2426,2 @@\n-    int reference_count = get_immutable_data_references_counter();\n-    assert(reference_count > 0, \"immutable data has no references\");\n-\n-    set_immutable_data_references_counter(reference_count - 1);\n-    \/\/ Free memory if this is the last nmethod referencing immutable data\n-    if (reference_count == 0) {\n+    \/\/ Free memory if this was the last nmethod referencing immutable data\n+    if (dec_immutable_data_ref_count() == 0) {\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":11,"deletions":16,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"runtime\/mutexLocker.hpp\"\n@@ -171,1 +172,1 @@\n-  #define ImmutableDataReferencesCounterSize ((int)sizeof(int))\n+  #define ImmutableDataRefCountSize ((int)sizeof(int))\n@@ -253,1 +254,1 @@\n-  int      _immutable_data_reference_counter_offset;\n+  int      _immutable_data_ref_count_offset;\n@@ -650,1 +651,1 @@\n-  address speculations_end      () const { return           _immutable_data + _immutable_data_reference_counter_offset ; }\n+  address speculations_end      () const { return           _immutable_data + _immutable_data_ref_count_offset ; }\n@@ -652,1 +653,1 @@\n-  address scopes_data_end       () const { return           _immutable_data + _immutable_data_reference_counter_offset ; }\n+  address scopes_data_end       () const { return           _immutable_data + _immutable_data_ref_count_offset ; }\n@@ -654,1 +655,1 @@\n-  address immutable_data_references_counter_begin () const { return _immutable_data + _immutable_data_reference_counter_offset ; }\n+  address immutable_data_ref_count_begin () const { return  _immutable_data + _immutable_data_ref_count_offset ; }\n@@ -965,2 +966,18 @@\n-  inline int  get_immutable_data_references_counter()           { return *((int*)immutable_data_references_counter_begin());  }\n-  inline void set_immutable_data_references_counter(int count)  { *((int*)immutable_data_references_counter_begin()) = count; }\n+  inline void init_immutable_data_ref_count() {\n+    assert(is_not_installed(), \"should be called in nmethod constructor\");\n+    *((int*)immutable_data_ref_count_begin()) = 1;\n+  }\n+\n+  inline int inc_immutable_data_ref_count() {\n+    assert_lock_strong(CodeCache_lock);\n+    int* ref_count = (int*)immutable_data_ref_count_begin();\n+    assert(*ref_count > 0, \"Must be positive\");\n+    return ++(*ref_count);\n+  }\n+\n+  inline int dec_immutable_data_ref_count() {\n+    assert_lock_strong(CodeCache_lock);\n+    int* ref_count = (int*)immutable_data_ref_count_begin();\n+    assert(*ref_count > 0, \"Must be positive\");\n+    return --(*ref_count);\n+  }\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":24,"deletions":7,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -541,0 +541,1 @@\n+  nonstatic_field(nmethod,                     _immutable_data_ref_count_offset,              int)                                   \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  private static long          immutableDataReferencesCounterSize;\n+  private static long          immutableDataRefCountSize;\n@@ -58,0 +58,1 @@\n+  private static CIntegerField immutableDataRefCountOffsetField;\n@@ -93,0 +94,1 @@\n+    immutableDataRefCountOffsetField   = type.getCIntegerField(\"_immutable_data_ref_count_offset\");\n@@ -100,1 +102,1 @@\n-    immutableDataReferencesCounterSize = VM.getVM().getIntSize();\n+    immutableDataRefCountSize          = VM.getVM().getIntSize();\n@@ -122,39 +124,40 @@\n-  public Address constantsBegin()       { return contentBegin();                                     }\n-  public Address constantsEnd()         { return codeBegin();                                        }\n-  public Address instsBegin()           { return codeBegin();                                        }\n-  public Address instsEnd()             { return headerBegin().addOffsetTo(getStubOffset());         }\n-  public Address exceptionBegin()       { return headerBegin().addOffsetTo(getExceptionOffset());    }\n-  public Address deoptHandlerBegin()    { return headerBegin().addOffsetTo(getDeoptHandlerOffset());   }\n-  public Address stubBegin()            { return headerBegin().addOffsetTo(getStubOffset());         }\n-  public Address stubEnd()              { return dataBegin();                                        }\n-  public Address oopsBegin()            { return dataBegin();                                        }\n-  public Address oopsEnd()              { return dataEnd();                                          }\n-\n-  public Address immutableDataBegin()   { return immutableDataField.getValue(addr);                         }\n-  public Address immutableDataEnd()     { return immutableDataBegin().addOffsetTo(getImmutableDataSize());  }\n-  public Address dependenciesBegin()    { return immutableDataBegin();                                      }\n-  public Address dependenciesEnd()      { return immutableDataBegin().addOffsetTo(getHandlerTableOffset()); }\n-  public Address handlerTableBegin()    { return immutableDataBegin().addOffsetTo(getHandlerTableOffset()); }\n-  public Address handlerTableEnd()      { return immutableDataBegin().addOffsetTo(getNulChkTableOffset());  }\n-  public Address nulChkTableBegin()     { return immutableDataBegin().addOffsetTo(getNulChkTableOffset());  }\n-  public Address nulChkTableEnd()       { return immutableDataBegin().addOffsetTo(getScopesDataOffset());   }\n-  public Address scopesDataBegin()      { return immutableDataBegin().addOffsetTo(getScopesDataOffset());   }\n-  public Address scopesDataEnd()        { return immutableDataBegin().addOffsetTo(getScopesPCsOffset());    }\n-  public Address scopesPCsBegin()       { return immutableDataBegin().addOffsetTo(getScopesPCsOffset());    }\n-  public Address scopesPCsEnd()         { return immutableDataEnd().addOffsetTo(-immutableDataReferencesCounterSize); }\n-\n-  public Address metadataBegin()        { return mutableDataBegin().addOffsetTo(getRelocationSize());   }\n-  public Address metadataEnd()          { return mutableDataEnd();                                      }\n-\n-  public int getImmutableDataSize()     { return (int) immutableDataSizeField.getValue(addr);        }\n-  public int constantsSize()            { return (int) constantsEnd()   .minus(constantsBegin());    }\n-  public int instsSize()                { return (int) instsEnd()       .minus(instsBegin());        }\n-  public int stubSize()                 { return (int) stubEnd()        .minus(stubBegin());         }\n-  public int oopsSize()                 { return (int) oopsEnd()        .minus(oopsBegin());         }\n-  public int metadataSize()             { return (int) metadataEnd()    .minus(metadataBegin());     }\n-  public int scopesDataSize()           { return (int) scopesDataEnd()  .minus(scopesDataBegin());   }\n-  public int scopesPCsSize()            { return (int) scopesPCsEnd()   .minus(scopesPCsBegin());    }\n-  public int dependenciesSize()         { return (int) dependenciesEnd().minus(dependenciesBegin()); }\n-  public int handlerTableSize()         { return (int) handlerTableEnd().minus(handlerTableBegin()); }\n-  public int nulChkTableSize()          { return (int) nulChkTableEnd() .minus(nulChkTableBegin());  }\n-  public int origPCOffset()             { return (int) origPCOffsetField.getValue(addr);             }\n+  public Address constantsBegin()             { return contentBegin();                                     }\n+  public Address constantsEnd()               { return codeBegin();                                        }\n+  public Address instsBegin()                 { return codeBegin();                                        }\n+  public Address instsEnd()                   { return headerBegin().addOffsetTo(getStubOffset());         }\n+  public Address exceptionBegin()             { return headerBegin().addOffsetTo(getExceptionOffset());    }\n+  public Address deoptHandlerBegin()          { return headerBegin().addOffsetTo(getDeoptHandlerOffset()); }\n+  public Address stubBegin()                  { return headerBegin().addOffsetTo(getStubOffset());         }\n+  public Address stubEnd()                    { return dataBegin();                                        }\n+  public Address oopsBegin()                  { return dataBegin();                                        }\n+  public Address oopsEnd()                    { return dataEnd();                                          }\n+\n+  public Address immutableDataBegin()         { return immutableDataField.getValue(addr);                         }\n+  public Address immutableDataEnd()           { return immutableDataBegin().addOffsetTo(getImmutableDataSize());  }\n+  public Address dependenciesBegin()          { return immutableDataBegin();                                      }\n+  public Address dependenciesEnd()            { return immutableDataBegin().addOffsetTo(getHandlerTableOffset()); }\n+  public Address handlerTableBegin()          { return immutableDataBegin().addOffsetTo(getHandlerTableOffset()); }\n+  public Address handlerTableEnd()            { return immutableDataBegin().addOffsetTo(getNulChkTableOffset());  }\n+  public Address nulChkTableBegin()           { return immutableDataBegin().addOffsetTo(getNulChkTableOffset());  }\n+  public Address nulChkTableEnd()             { return immutableDataBegin().addOffsetTo(getScopesDataOffset());   }\n+  public Address scopesDataBegin()            { return immutableDataBegin().addOffsetTo(getScopesDataOffset());   }\n+  public Address scopesDataEnd()              { return immutableDataBegin().addOffsetTo(getScopesPCsOffset());    }\n+  public Address scopesPCsBegin()             { return immutableDataBegin().addOffsetTo(getScopesPCsOffset());    }\n+  public Address scopesPCsEnd()               { return immutableDataBegin().addOffsetTo(getImmutableDataRefCountOffset()); }\n+  public Address immutableDataRefCountBegin() { return immutableDataBegin().addOffsetTo(getImmutableDataRefCountOffset()); }\n+\n+  public Address metadataBegin()              { return mutableDataBegin().addOffsetTo(getRelocationSize());   }\n+  public Address metadataEnd()                { return mutableDataEnd();                                      }\n+\n+  public int getImmutableDataSize()           { return (int) immutableDataSizeField.getValue(addr);        }\n+  public int constantsSize()                  { return (int) constantsEnd()   .minus(constantsBegin());    }\n+  public int instsSize()                      { return (int) instsEnd()       .minus(instsBegin());        }\n+  public int stubSize()                       { return (int) stubEnd()        .minus(stubBegin());         }\n+  public int oopsSize()                       { return (int) oopsEnd()        .minus(oopsBegin());         }\n+  public int metadataSize()                   { return (int) metadataEnd()    .minus(metadataBegin());     }\n+  public int scopesDataSize()                 { return (int) scopesDataEnd()  .minus(scopesDataBegin());   }\n+  public int scopesPCsSize()                  { return (int) scopesPCsEnd()   .minus(scopesPCsBegin());    }\n+  public int dependenciesSize()               { return (int) dependenciesEnd().minus(dependenciesBegin()); }\n+  public int handlerTableSize()               { return (int) handlerTableEnd().minus(handlerTableBegin()); }\n+  public int nulChkTableSize()                { return (int) nulChkTableEnd() .minus(nulChkTableBegin());  }\n+  public int origPCOffset()                   { return (int) origPCOffsetField.getValue(addr);             }\n@@ -168,0 +171,1 @@\n+\n@@ -169,1 +173,1 @@\n-    return\n+    int size =\n@@ -174,2 +178,7 @@\n-      nulChkTableSize()  +\n-      (int) immutableDataReferencesCounterSize;\n+      nulChkTableSize();\n+\n+    if (size > 0) {\n+      size += (int) immutableDataRefCountSize;\n+    }\n+\n+    return size;\n@@ -482,9 +491,10 @@\n-  private int getEntryBCI()           { return (int) entryBCIField          .getValue(addr); }\n-  private int getExceptionOffset()    { return (int) exceptionOffsetField   .getValue(addr); }\n-  private int getDeoptHandlerOffset()   { return (int) deoptHandlerOffsetField  .getValue(addr); }\n-  private int getStubOffset()         { return (int) stubOffsetField        .getValue(addr); }\n-  private int getScopesDataOffset()   { return (int) scopesDataOffsetField  .getValue(addr); }\n-  private int getScopesPCsOffset()    { return (int) scopesPCsOffsetField   .getValue(addr); }\n-  private int getHandlerTableOffset() { return (int) handlerTableOffsetField.getValue(addr); }\n-  private int getNulChkTableOffset()  { return (int) nulChkTableOffsetField .getValue(addr); }\n-  private int getCompLevel()          { return (int) compLevelField         .getValue(addr); }\n+  private int getEntryBCI()                     { return (int) entryBCIField                    .getValue(addr); }\n+  private int getExceptionOffset()              { return (int) exceptionOffsetField             .getValue(addr); }\n+  private int getDeoptHandlerOffset()           { return (int) deoptHandlerOffsetField          .getValue(addr); }\n+  private int getStubOffset()                   { return (int) stubOffsetField                  .getValue(addr); }\n+  private int getScopesDataOffset()             { return (int) scopesDataOffsetField            .getValue(addr); }\n+  private int getScopesPCsOffset()              { return (int) scopesPCsOffsetField             .getValue(addr); }\n+  private int getHandlerTableOffset()           { return (int) handlerTableOffsetField          .getValue(addr); }\n+  private int getNulChkTableOffset()            { return (int) nulChkTableOffsetField           .getValue(addr); }\n+  private int getCompLevel()                    { return (int) compLevelField                   .getValue(addr); }\n+  private int getImmutableDataRefCountOffset()  { return (int) immutableDataRefCountOffsetField .getValue(addr); }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/NMethod.java","additions":63,"deletions":53,"binary":false,"changes":116,"status":"modified"}]}