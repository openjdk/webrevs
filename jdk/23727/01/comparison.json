{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,5 @@\n+import java.io.FileOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n@@ -30,0 +35,1 @@\n+import java.security.PrivateKey;\n@@ -33,1 +39,0 @@\n-import java.util.Arrays;\n@@ -36,0 +41,3 @@\n+\n+import jdk.test.lib.SecurityTools;\n+import jdk.test.lib.security.KeyStoreUtils;\n@@ -38,0 +46,21 @@\n+\/*\n+ * @test id=certreplace\n+ * @bug 6948803\n+ * @summary CertPath validation regression caused by SHA1 replacement root and MD2 disable feature\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.security.validator\n+ *\n+ * @run main\/othervm CertReplace certreplace.jks certreplace.certs\n+ *\/\n+\n+\/*\n+ * @test id=samedn\n+ * @bug 6958869\n+ * @summary Regression: PKIXValidator fails when multiple trust anchors have same dn\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.security.validator\n+ *\n+ * @run main\/othervm CertReplace samedn.jks samedn1.certs\n+ * @run main\/othervm CertReplace samedn.jks samedn2.certs\n+ *\/\n+\n@@ -40,0 +69,131 @@\n+    private static final String SAMEDN_JKS = \"samedn.jks\";\n+    private static final String CERTREPLACE_JKS = \"certreplace.jks\";\n+    private static final String PASSWORD = \"changeit\";\n+\n+    \/**\n+     * This method creates certs for the Cert Replace test\n+     *\n+     * @throws Exception\n+     *\/\n+    private static void certReplace() throws Exception {\n+\n+        final String intAliase = \"int\";\n+        final String userAlias = \"user\";\n+        final String caAlias = \"ca\";\n+\n+        final String certplaceCerts = \"certreplace.certs\";\n+\n+        final String ktBaseParameters = \"-storepass \" + PASSWORD + \" \" +\n+                                        \"-keypass \" + PASSWORD + \" \" +\n+                                        \"-keystore \" + CERTREPLACE_JKS + \" \" +\n+                                        \"-keyalg rsa \";\n+\n+        final Path keystoreFilePath = Paths.get(CERTREPLACE_JKS);\n+        Files.deleteIfExists(keystoreFilePath);\n+\n+        \/\/ 1. Generate 3 aliases in a keystore: ca, int, user\n+        SecurityTools.keytool(ktBaseParameters +\n+                              \"-genkeypair -alias \" + caAlias + \" -dname CN=CA -keyalg rsa -sigalg md2withrsa -ext bc\");\n+        SecurityTools.keytool(ktBaseParameters +\n+                              \"-genkeypair -alias \" + intAliase + \" -dname CN=Int -keyalg rsa\");\n+        SecurityTools.keytool(ktBaseParameters +\n+                              \"-genkeypair -alias \" + userAlias + \" -dname CN=User -keyalg rsa\");\n+\n+        final KeyStore keyStore = KeyStoreUtils.loadKeyStore(CERTREPLACE_JKS, PASSWORD);\n+\n+        \/\/ 2. Signing: ca -> int -> user\n+        final String intReqFile = intAliase + \".req\";\n+        final String intCertFileName = intAliase + \".cert\";\n+\n+        SecurityTools.keytool(ktBaseParameters +\n+                              \"-certreq -alias \" + intAliase + \" -file \" + intReqFile);\n+        SecurityTools.keytool(ktBaseParameters +\n+                              \"-gencert -rfc -alias \" + caAlias + \" -ext bc -infile \" + intReqFile + \" \" +\n+                              \"-outfile \" + intCertFileName);\n+\n+        \/\/putting the certificate in the keystore\n+        final CertificateFactory certificateFactory = CertificateFactory.getInstance(\"X509\");\n+        final Certificate[] certs = new Certificate[]{\n+                certificateFactory.generateCertificate(\n+                        new FileInputStream(intCertFileName)\n+                )\n+        };\n+        final PrivateKey privateKey = (PrivateKey) keyStore.getKey(intAliase, PASSWORD.toCharArray());\n+        keyStore.setKeyEntry(intAliase, privateKey, PASSWORD.toCharArray(), certs);\n+        keyStore.store(new FileOutputStream(CERTREPLACE_JKS), PASSWORD.toCharArray());\n+\n+\n+        final String userReqFile = userAlias + \".req\";\n+        SecurityTools.keytool(ktBaseParameters +\n+                              \"-certreq -alias \" + userAlias + \" -file \" + userReqFile);\n+        SecurityTools.keytool(ktBaseParameters +\n+                              \"-gencert -rfc -alias \" + intAliase + \" \" +\n+                              \"-infile \" + userReqFile + \" \" +\n+                              \"-outfile \" + certplaceCerts); \/\/ this will create certreplace.certs which is later appended\n+\n+        \/\/ 3. Create the certchain file\n+        final Path certPath = Paths.get(certplaceCerts);\n+\n+        Files.write(certPath, Files.readAllBytes(Path.of(intCertFileName)), StandardOpenOption.APPEND);\n+\n+        final String outputCa = SecurityTools.keytool(ktBaseParameters +\n+                                                      \"-export -rfc -alias \" + caAlias).getOutput();\n+        Files.write(certPath, outputCa.getBytes(), StandardOpenOption.APPEND);\n+\n+        \/\/ 4. Upgrade ca from MD2withRSA to SHA256withRSA, remove other aliases and make this keystore the cacerts file\n+        SecurityTools.keytool(ktBaseParameters +\n+                              \"-selfcert -alias \" + caAlias);\n+        keyStore.deleteEntry(intAliase);\n+        keyStore.deleteEntry(userAlias);\n+    }\n+\n+    \/**\n+     * This method creates certs for the Same DN test\n+     *\n+     * @throws Exception\n+     *\/\n+    private static void sameDn() throws Exception {\n+\n+        final String ca1Alias = \"ca1\";\n+        final String ca2Alias = \"ca2\";\n+        final String userAlias = \"user\";\n+\n+        final String ktBaseParameters = \"-storepass \" + PASSWORD + \" \" +\n+                                        \"-keypass \" + PASSWORD + \" \" +\n+                                        \"-keystore \" + SAMEDN_JKS + \" \" +\n+                                        \"-keyalg rsa \";\n+\n+        final Path keystoreFilePath = Paths.get(SAMEDN_JKS);\n+        Files.deleteIfExists(keystoreFilePath);\n+\n+        \/\/ 1. Generate 3 aliases in a keystore: ca1, ca2, user. The CAs' startdate\n+        \/\/ is set to one year ago so that they are expired now\n+        SecurityTools.keytool(ktBaseParameters +\n+                              \"-genkeypair -alias \" + ca1Alias + \" -dname CN=CA -keyalg rsa \" +\n+                              \"-sigalg md5withrsa -ext bc -startdate -1y\");\n+        SecurityTools.keytool(ktBaseParameters +\n+                              \"-genkeypair -alias \" + ca2Alias + \" -dname CN=CA -keyalg rsa \" +\n+                              \"-sigalg sha1withrsa -ext bc -startdate -1y\");\n+        SecurityTools.keytool(ktBaseParameters +\n+                              \"-genkeypair -alias \" + userAlias + \" -dname CN=User -keyalg rsa\");\n+\n+        final KeyStore keyStore = KeyStoreUtils.loadKeyStore(SAMEDN_JKS, PASSWORD);\n+\n+        \/\/ 2. Signing: ca -> user. The startdate is set to 1 minute in the past to ensure the certificate\n+        \/\/ is valid at the time of validation and to prevent any issues with timing discrepancies\n+        \/\/ Automatically saves the certs to the certs files\n+\n+        final String userReqFile = userAlias + \".req\";\n+        SecurityTools.keytool(ktBaseParameters +\n+                              \"-certreq -alias \" + userAlias + \" -file \" + userReqFile);\n+        SecurityTools.keytool(ktBaseParameters +\n+                              \"-gencert -rfc -alias \" + ca1Alias + \" \" +\n+                              \"-startdate -1M -infile \" + userReqFile + \" -outfile samedn1.certs\");\n+        SecurityTools.keytool(ktBaseParameters +\n+                              \"-gencert -rfc -alias \" + ca2Alias + \" \" +\n+                              \"-startdate -1M -infile \" + userReqFile + \" -outfile samedn2.certs\");\n+\n+        \/\/ 3. Remove user for cacerts\n+        keyStore.deleteEntry(userAlias);\n+    }\n+\n@@ -45,0 +205,8 @@\n+        if (args[0].equals(CERTREPLACE_JKS)) {\n+            certReplace();\n+        } else if (args[0].equals(SAMEDN_JKS)) {\n+            sameDn();\n+        } else {\n+            throw new RuntimeException(\"Not recognised test \" + args[0]);\n+        }\n+\n","filename":"test\/jdk\/sun\/security\/validator\/CertReplace.java","additions":170,"deletions":2,"binary":false,"changes":172,"status":"modified"},{"patch":"@@ -1,88 +0,0 @@\n-#\n-# Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 6948803\n-# @summary CertPath validation regression caused by SHA1 replacement root\n-#  and MD2 disable feature\n-# @modules java.base\/sun.security.validator\n-#\n-\n-if [ \"${TESTSRC}\" = \"\" ] ; then\n-  TESTSRC=\".\"\n-fi\n-if [ \"${TESTJAVA}\" = \"\" ] ; then\n-  JAVAC_CMD=`which javac`\n-  TESTJAVA=`dirname $JAVAC_CMD`\/..\n-  COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-\n-# set platform-dependent variables\n-OS=`uname -s`\n-case \"$OS\" in\n-  Windows_* )\n-    FS=\"\\\\\"\n-    ;;\n-  * )\n-    FS=\"\/\"\n-    ;;\n-esac\n-\n-KT=\"$TESTJAVA${FS}bin${FS}keytool ${TESTTOOLVMOPTS} -storepass changeit \\\n-    -keypass changeit -keystore certreplace.jks -keyalg rsa\"\n-JAVAC=$COMPILEJAVA${FS}bin${FS}javac\n-JAVA=$TESTJAVA${FS}bin${FS}java\n-\n-rm -rf certreplace.jks 2> \/dev\/null\n-\n-# 1. Generate 3 aliases in a keystore: ca, int, user\n-\n-$KT -genkeypair -alias ca -dname CN=CA -keyalg rsa -sigalg md2withrsa -ext bc\n-$KT -genkeypair -alias int -dname CN=Int -keyalg rsa\n-$KT -genkeypair -alias user -dname CN=User -keyalg rsa\n-\n-# 2. Signing: ca -> int -> user\n-\n-$KT -certreq -alias int | $KT -gencert -rfc -alias ca -ext bc \\\n-    | $KT -import -alias int\n-$KT -certreq -alias user | $KT -gencert -rfc -alias int \\\n-    | $KT -import -alias user\n-\n-# 3. Create the certchain file\n-\n-$KT -export -alias user -rfc > certreplace.certs\n-$KT -export -rfc -alias int >> certreplace.certs\n-$KT -export -rfc -alias ca >> certreplace.certs\n-\n-# 4. Upgrade ca from MD2withRSA to SHA256withRSA, remove other aliases and\n-# make this keystore the cacerts file\n-\n-$KT -selfcert -alias ca\n-$KT -delete -alias int\n-$KT -delete -alias user\n-\n-# 5. Build and run test\n-\n-EXTRAOPTS=\"--add-exports java.base\/sun.security.validator=ALL-UNNAMED\"\n-$JAVAC ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} ${EXTRAOPTS} -d . ${TESTSRC}${FS}CertReplace.java\n-$JAVA ${TESTVMOPTS} ${TESTJAVAOPTS} ${EXTRAOPTS} CertReplace certreplace.jks certreplace.certs\n","filename":"test\/jdk\/sun\/security\/validator\/certreplace.sh","additions":0,"deletions":88,"binary":false,"changes":88,"status":"deleted"},{"patch":"@@ -1,86 +0,0 @@\n-#\n-# Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 6958869\n-# @summary regression: PKIXValidator fails when multiple trust anchors\n-# have same dn\n-# @modules java.base\/sun.security.validator\n-#\n-\n-if [ \"${TESTSRC}\" = \"\" ] ; then\n-  TESTSRC=\".\"\n-fi\n-if [ \"${TESTJAVA}\" = \"\" ] ; then\n-  JAVAC_CMD=`which javac`\n-  TESTJAVA=`dirname $JAVAC_CMD`\/..\n-  COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-\n-# set platform-dependent variables\n-OS=`uname -s`\n-case \"$OS\" in\n-  Windows_* )\n-    FS=\"\\\\\"\n-    ;;\n-  * )\n-    FS=\"\/\"\n-    ;;\n-esac\n-\n-KT=\"$TESTJAVA${FS}bin${FS}keytool ${TESTTOOLVMOPTS} -storepass changeit \\\n-    -keypass changeit -keystore samedn.jks -keyalg rsa\"\n-JAVAC=$COMPILEJAVA${FS}bin${FS}javac\n-JAVA=$TESTJAVA${FS}bin${FS}java\n-\n-rm -rf samedn.jks 2> \/dev\/null\n-\n-# 1. Generate 3 aliases in a keystore: ca1, ca2, user. The CAs' startdate\n-# is set to one year ago so that they are expired now\n-\n-$KT -genkeypair -alias ca1 -dname CN=CA -keyalg rsa -sigalg md5withrsa -ext bc -startdate -1y\n-$KT -genkeypair -alias ca2 -dname CN=CA -keyalg rsa -sigalg sha1withrsa -ext bc -startdate -1y\n-$KT -genkeypair -alias user -dname CN=User -keyalg rsa\n-\n-# 2. Signing: ca -> user. The startdate is set to 1 minute in the past to ensure the certificate\n-# is valid at the time of validation and to prevent any issues with timing discrepancies\n-\n-$KT -certreq -alias user | $KT -gencert -rfc -alias ca1 -startdate -1M > samedn1.certs\n-$KT -certreq -alias user | $KT -gencert -rfc -alias ca2 -startdate -1M > samedn2.certs\n-\n-# 3. Append the ca file\n-\n-$KT -export -rfc -alias ca1 >> samedn1.certs\n-$KT -export -rfc -alias ca2 >> samedn2.certs\n-\n-# 4. Remove user for cacerts\n-\n-$KT -delete -alias user\n-\n-# 5. Build and run test. Make sure the CA certs are ignored for validity check.\n-# Check both, one of them might be dropped out of map in old codes.\n-\n-EXTRAOPTS=\"--add-exports java.base\/sun.security.validator=ALL-UNNAMED\"\n-$JAVAC ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} ${EXTRAOPTS} -d . ${TESTSRC}${FS}CertReplace.java\n-$JAVA ${TESTVMOPTS} ${TESTJAVAOPTS} ${EXTRAOPTS} CertReplace samedn.jks samedn1.certs || exit 1\n-$JAVA ${TESTVMOPTS} ${TESTJAVAOPTS} ${EXTRAOPTS} CertReplace samedn.jks samedn2.certs || exit 2\n","filename":"test\/jdk\/sun\/security\/validator\/samedn.sh","additions":0,"deletions":86,"binary":false,"changes":86,"status":"deleted"}]}