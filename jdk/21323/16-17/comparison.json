{"files":[{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.math;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OperationsPerInvocation;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.math.BigInteger;\n+import java.math.BigDecimal;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 3)\n+public class BigDecimalStripTrailingZeros {\n+\n+    private BigDecimal xsPow, sPow, mPow, lPow, xlPow;\n+\n+    @Setup\n+    public void setup() {\n+        xsPow = new BigDecimal(BigInteger.TEN.pow(1 << 4));\n+        sPow = new BigDecimal(BigInteger.TEN.pow(1 << 5));\n+        mPow = new BigDecimal(BigInteger.TEN.pow(1 << 10));\n+        lPow = new BigDecimal(BigInteger.TEN.pow(1 << 15));\n+        xlPow = new BigDecimal(BigInteger.TEN.pow(1 << 20));\n+    }\n+\n+    \/** Test BigDecimal.stripTrailingZeros() with 10^16  *\/\n+    @Benchmark\n+    @OperationsPerInvocation(1)\n+    public void testXS(Blackhole bh) {\n+        bh.consume(xsPow.stripTrailingZeros());\n+    }\n+\n+    \/** Test BigDecimal.stripTrailingZeros() with 10^32 *\/\n+    @Benchmark\n+    @OperationsPerInvocation(1)\n+    public void testS(Blackhole bh) {\n+        bh.consume(sPow.stripTrailingZeros());\n+    }\n+\n+    \/** Test BigDecimal.stripTrailingZeros() with 10^1024 *\/\n+    @Benchmark\n+    @OperationsPerInvocation(1)\n+    public void testM(Blackhole bh) {\n+        bh.consume(mPow.stripTrailingZeros());\n+    }\n+\n+    \/** Test BigDecimal.stripTrailingZeros() with 10^32_768 *\/\n+    @Benchmark\n+    @OperationsPerInvocation(1)\n+    public void testL(Blackhole bh) {\n+        bh.consume(lPow.stripTrailingZeros());\n+    }\n+\n+    \/** Test BigDecimal.stripTrailingZeros() with 10^1_048_576 *\/\n+    @Benchmark\n+    @OperationsPerInvocation(1)\n+    public void testXL(Blackhole bh) {\n+        bh.consume(xlPow.stripTrailingZeros());\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigDecimalStripTrailingZeros.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"}]}