{"files":[{"patch":"@@ -3112,7 +3112,3 @@\n-        if (intCompact == 0 || (intVal != null && intVal.signum() == 0)) {\n-            return BigDecimal.ZERO;\n-        } else if (intCompact != INFLATED) {\n-            return createAndStripZerosToMatchScale(intCompact, scale, Long.MIN_VALUE);\n-        } else {\n-            return createAndStripZerosToMatchScale(intVal, scale, Long.MIN_VALUE);\n-        }\n+        return intCompact == 0 || (intVal != null && intVal.signum() == 0)\n+                ? BigDecimal.ZERO\n+                : stripZerosToMatchScale(intVal, intCompact, scale, Long.MIN_VALUE);\n@@ -5227,0 +5223,1 @@\n+     * Assumes {@code this != 0}.\n@@ -5233,0 +5230,9 @@\n+        \/\/ a multiple of 10^n must be a multiple of 2^n\n+        long remainingZeros = Math.min(scale - preferredScale, intVal.getLowestSetBit());\n+        if (remainingZeros <= 0L)\n+            return valueOf(intVal, scale, 0);\n+\n+        \/\/ pows[i] == 10^(2^i)\n+        BigInteger[] pows = new BigInteger[BigInteger.bitLengthForLong(remainingZeros)];\n+        pows[0] = BigInteger.TEN;\n+\n@@ -5234,9 +5240,27 @@\n-        while (intVal.compareMagnitude(BigInteger.TEN) >= 0\n-               && scale > preferredScale) {\n-            if (intVal.testBit(0))\n-                break; \/\/ odd number cannot end in 0\n-            qr = intVal.divideAndRemainder(BigInteger.TEN);\n-            if (qr[1].signum() != 0)\n-                break; \/\/ non-0 remainder\n-            intVal = qr[0];\n-            scale = checkScale(intVal,(long) scale - 1); \/\/ could Overflow\n+        boolean zeroR = true;\n+        for (int i = 0; zeroR && remainingZeros >= 1 << i; i++) {\n+            qr = intVal.divideAndRemainder(pows[i]);\n+            if (qr[1].signum() != 0) {\n+                zeroR = false; \/\/ non-0 remainder\n+            } else {\n+                long exp = 1L << i;\n+                intVal = qr[0];\n+                scale = checkScale(intVal, scale - exp); \/\/ could Overflow\n+                remainingZeros -= exp;\n+\n+                if (remainingZeros >= exp << 1)\n+                    pows[i + 1] = pows[i].multiply(pows[i]);\n+            }\n+        }\n+\n+        for (int i = BigInteger.bitLengthForLong(remainingZeros) - 1;\n+                i >= 0 && intVal.compareMagnitude(10L) >= 0; i--) {\n+            qr = intVal.divideAndRemainder(pows[i]);\n+            if (qr[1].signum() == 0) { \/\/ zero remainder\n+                long exp = 1L << i;\n+                intVal = qr[0];\n+                scale = checkScale(intVal, scale - exp); \/\/ could Overflow\n+                remainingZeros -= exp;\n+    \n+                i = BigInteger.bitLengthForLong(remainingZeros);\n+            }\n@@ -5244,0 +5268,1 @@\n+\n@@ -5252,0 +5277,1 @@\n+     * Assumes {@code this != 0 && intCompact != INFLATED}.\n@@ -5258,2 +5284,3 @@\n-        while (Math.abs(compactVal) >= 10L && scale > preferredScale) {\n-            if ((compactVal & 1L) != 0L)\n+        long mag = Math.abs(compactVal);\n+        while (mag >= 10L && scale > preferredScale) {\n+            if ((mag & 1L) != 0L)\n@@ -5261,1 +5288,1 @@\n-            long r = compactVal % 10L;\n+            long r = mag % 10L;\n@@ -5264,2 +5291,2 @@\n-            compactVal \/= 10;\n-            scale = checkScale(compactVal, (long) scale - 1); \/\/ could Overflow\n+            mag \/= 10L;\n+            scale = checkScale(mag, (long) scale - 1); \/\/ could Overflow\n@@ -5267,1 +5294,1 @@\n-        return valueOf(compactVal, scale);\n+        return valueOf(compactVal >= 0 ? mag : -mag, scale);\n@@ -5270,1 +5297,4 @@\n-    private static BigDecimal stripZerosToMatchScale(BigInteger intVal, long intCompact, int scale, int preferredScale) {\n+    \/**\n+     * Assumes {@code this != 0}.\n+     *\/\n+    private static BigDecimal stripZerosToMatchScale(BigInteger intVal, long intCompact, int scale, long preferredScale) {\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":53,"deletions":23,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -2782,0 +2782,7 @@\n+    \/**\n+     * Package private method to return bit length for a long.\n+     *\/\n+    static int bitLengthForLong(long n) {\n+        return 64 - Long.numberOfLeadingZeros(n);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}