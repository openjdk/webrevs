{"files":[{"patch":"@@ -5218,0 +5218,29 @@\n+    \/**\n+     * {@code FIVE_TO_2_TO[n] == 5^(2^n)}\n+     *\/\n+    \/\/ floor(log2(log5(2^Integer.MAX_VALUE))) == 29\n+    private static final BigInteger[] FIVE_TO_2_TO = new BigInteger[29];\n+\n+    private static int FIVE_TO_2_TO_LEN = 1;\n+\n+    static {\n+        FIVE_TO_2_TO[0] = BigInteger.valueOf(5L);\n+    }\n+\n+    \/**\n+     * @param n an integer such that {@code 0 <= n < POWERS_OF_5.length}\n+     * @return {@code 5^(2^n)}\n+     *\/\n+    private static BigInteger fiveToTwoToThe(int n) {\n+        if (n >= FIVE_TO_2_TO_LEN) {\n+            for (int i = FIVE_TO_2_TO_LEN; i <= n; i++) {\n+                BigInteger pow = FIVE_TO_2_TO[i - 1];\n+                FIVE_TO_2_TO[i] = pow.multiply(pow);\n+            }\n+\n+            FIVE_TO_2_TO_LEN = n + 1;\n+        }\n+\n+        return FIVE_TO_2_TO[n];\n+    }\n+\n@@ -5237,4 +5266,0 @@\n-        \/\/ pows[i] == 5^(2^i)\n-        BigInteger[] pows = new BigInteger[BigInteger.bitLengthForLong(remainingZeros)];\n-        pows[0] = BigInteger.valueOf(5L);\n-\n@@ -5242,0 +5267,1 @@\n+\n@@ -5244,2 +5270,2 @@\n-            final long exp = 1L << i;\n-            qr = intVal.divideAndRemainder(pows[i]);\n+            final int exp = 1 << i;\n+            qr = intVal.divideAndRemainder(fiveToTwoToThe(i));\n@@ -5248,1 +5274,1 @@\n-                remainingZeros = exp - 1L;\n+                remainingZeros = exp - 1;\n@@ -5251,1 +5277,1 @@\n-                scale = checkScale(intVal, scale - exp); \/\/ could Overflow\n+                scale = checkScale(intVal, (long) scale - exp); \/\/ could Overflow\n@@ -5254,3 +5280,0 @@\n-\n-                if (remainingZeros >= exp << 1)\n-                    pows[i + 1] = pows[i].multiply(pows[i]);\n@@ -5262,2 +5285,2 @@\n-            final long exp = 1L << i;\n-            qr = intVal.divideAndRemainder(pows[i]);\n+            final int exp = 1 << i;\n+            qr = intVal.divideAndRemainder(fiveToTwoToThe(i));\n@@ -5265,1 +5288,1 @@\n-                remainingZeros = exp - 1L;\n+                remainingZeros = exp - 1;\n@@ -5268,1 +5291,1 @@\n-                scale = checkScale(intVal, scale - exp); \/\/ could Overflow\n+                scale = checkScale(intVal, (long) scale - exp); \/\/ could Overflow\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":38,"deletions":15,"binary":false,"changes":53,"status":"modified"}]}