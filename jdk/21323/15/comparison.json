{"files":[{"patch":"@@ -3112,7 +3112,3 @@\n-        if (intCompact == 0 || (intVal != null && intVal.signum() == 0)) {\n-            return BigDecimal.ZERO;\n-        } else if (intCompact != INFLATED) {\n-            return createAndStripZerosToMatchScale(intCompact, scale, Long.MIN_VALUE);\n-        } else {\n-            return createAndStripZerosToMatchScale(intVal, scale, Long.MIN_VALUE);\n-        }\n+        return intCompact == 0 || (intVal != null && intVal.signum() == 0)\n+                ? BigDecimal.ZERO\n+                : stripZerosToMatchScale(intVal, intCompact, scale, Long.MIN_VALUE);\n@@ -5222,0 +5218,28 @@\n+    \/**\n+     * {@code FIVE_TO_2_TO[n] == 5^(2^n)}\n+     *\/\n+    \/\/ floor(log2(log5(2^Integer.MAX_VALUE))) == 29\n+    private static final BigInteger[] FIVE_TO_2_TO = new BigInteger[30];\n+\n+    private static int FIVE_TO_2_TO_LEN = 1;\n+\n+    static {\n+        FIVE_TO_2_TO[0] = BigInteger.valueOf(5L);\n+    }\n+\n+    \/**\n+     * @param n an integer such that {@code 0 <= n < FIVE_TO_2_TO.length}\n+     * @return {@code 5^(2^n)}\n+     *\/\n+    private static BigInteger fiveToTwoToThe(int n) {\n+        if (n >= FIVE_TO_2_TO_LEN) {\n+            BigInteger pow = FIVE_TO_2_TO[FIVE_TO_2_TO_LEN - 1];\n+            for (int i = FIVE_TO_2_TO_LEN; i <= n; i++)\n+                FIVE_TO_2_TO[i] = pow = pow.multiply(pow);\n+\n+            FIVE_TO_2_TO_LEN = n + 1;\n+        }\n+\n+        return FIVE_TO_2_TO[n];\n+    }\n+\n@@ -5227,0 +5251,1 @@\n+     * Assumes {@code this != 0}.\n@@ -5233,0 +5258,7 @@\n+        \/\/ a multiple of 10^n must be a multiple of 2^n\n+        int powsOf2 = intVal.getLowestSetBit();\n+        long remainingZeros = Math.min(scale - preferredScale, powsOf2);\n+        if (remainingZeros <= 0L)\n+            return valueOf(intVal, scale, 0);\n+\n+        intVal = intVal.shiftRight(powsOf2); \/\/ remove powers of 2\n@@ -5234,9 +5266,14 @@\n-        while (intVal.compareMagnitude(BigInteger.TEN) >= 0\n-               && scale > preferredScale) {\n-            if (intVal.testBit(0))\n-                break; \/\/ odd number cannot end in 0\n-            qr = intVal.divideAndRemainder(BigInteger.TEN);\n-            if (qr[1].signum() != 0)\n-                break; \/\/ non-0 remainder\n-            intVal = qr[0];\n-            scale = checkScale(intVal,(long) scale - 1); \/\/ could Overflow\n+\n+        boolean zeroR = true;\n+        for (int i = 0; zeroR && remainingZeros >= 1L << i; i++) {\n+            final int exp = 1 << i;\n+            qr = intVal.divideAndRemainder(fiveToTwoToThe(i));\n+            if (qr[1].signum() != 0) {\n+                zeroR = false; \/\/ non-0 remainder\n+                remainingZeros = exp - 1;\n+            } else {\n+                intVal = qr[0];\n+                scale = checkScale(intVal, (long) scale - exp); \/\/ could Overflow\n+                remainingZeros -= exp;\n+                powsOf2 -= exp;\n+            }\n@@ -5244,1 +5281,17 @@\n-        return valueOf(intVal, scale, 0);\n+\n+        for (int i = BigInteger.bitLengthForLong(remainingZeros) - 1; i >= 0; i--) {\n+            final int exp = 1 << i;\n+            qr = intVal.divideAndRemainder(fiveToTwoToThe(i));\n+            if (qr[1].signum() != 0) { \/\/ non-0 remainder\n+                remainingZeros = exp - 1;\n+            } else {\n+                intVal = qr[0];\n+                scale = checkScale(intVal, (long) scale - exp); \/\/ could Overflow\n+                remainingZeros -= exp;\n+                powsOf2 -= exp;\n+\n+                i = BigInteger.bitLengthForLong(remainingZeros);\n+            }\n+        }\n+\n+        return valueOf(intVal.shiftLeft(powsOf2), scale, 0);\n@@ -5252,0 +5305,1 @@\n+     * Assumes {@code this != 0 && intCompact != INFLATED}.\n@@ -5258,8 +5312,3 @@\n-        while (Math.abs(compactVal) >= 10L && scale > preferredScale) {\n-            if ((compactVal & 1L) != 0L)\n-                break; \/\/ odd number cannot end in 0\n-            long r = compactVal % 10L;\n-            if (r != 0L)\n-                break; \/\/ non-0 remainder\n-            compactVal \/= 10;\n-            scale = checkScale(compactVal, (long) scale - 1); \/\/ could Overflow\n+        while (compactVal % 10L == 0L && scale > preferredScale) {\n+            compactVal \/= 10L;\n+            scale = checkScale(compactVal, scale - 1L); \/\/ could Overflow\n@@ -5270,1 +5319,4 @@\n-    private static BigDecimal stripZerosToMatchScale(BigInteger intVal, long intCompact, int scale, int preferredScale) {\n+    \/**\n+     * Assumes {@code this != 0}.\n+     *\/\n+    private static BigDecimal stripZerosToMatchScale(BigInteger intVal, long intCompact, int scale, long preferredScale) {\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":78,"deletions":26,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -2782,0 +2782,7 @@\n+    \/**\n+     * Package private method to return bit length for a long.\n+     *\/\n+    static int bitLengthForLong(long n) {\n+        return 64 - Long.numberOfLeadingZeros(n);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}