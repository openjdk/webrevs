{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,0 @@\n-        extends WritableElement<Annotation>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Annotation.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-        extends WritableElement<AnnotationElement>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AnnotationElement.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-public sealed interface AnnotationValue extends WritableElement<AnnotationValue>\n+public sealed interface AnnotationValue\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AnnotationValue.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-        extends WritableElement<A>\n+        extends ClassFileElement\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Attribute.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,0 @@\n-        extends WritableElement<BootstrapMethodEntry>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/BootstrapMethodEntry.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,2 +27,0 @@\n-import java.util.List;\n-\n@@ -113,7 +111,0 @@\n-    \/**\n-     * Write the contents of another {@link BufWriter} to the buffer\n-     *\n-     * @param other the other {@linkplain BufWriter}\n-     *\/\n-    void writeBytes(BufWriter other);\n-\n@@ -169,20 +160,0 @@\n-    \/**\n-     * Write a list of entities to the buffer.  The length of the list is\n-     * written as a {@code u2}, followed by the bytes corresponding to each\n-     * element in the list.  Writing of the entities is delegated to the entry.\n-     *\n-     * @param list the entities\n-     * @param <T> the type of entity\n-     *\/\n-    <T extends WritableElement<?>> void writeList(List<T> list);\n-\n-    \/**\n-     * Write a list of constant pool entry indexes to the buffer.  The length\n-     * of the list is written as a {@code u2}, followed by a {@code u2} for each\n-     * entry in the list.\n-     *\n-     * @param list the list of entries\n-     * @throws IllegalArgumentException if any entry has invalid index\n-     *\/\n-    void writeListIndices(List<? extends PoolEntry> list);\n-\n@@ -193,10 +164,0 @@\n-\n-    \/**\n-     * Copy the contents of the buffer into a byte array.\n-     *\n-     * @param array the byte array\n-     * @param bufferOffset the offset into the array at which to write the\n-     *                     contents of the buffer\n-     * @throws IndexOutOfBoundsException if copying outside of the array bounds\n-     *\/\n-    void copyTo(byte[] array, int bufferOffset);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/BufWriter.java","additions":0,"deletions":39,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-        permits AttributedElement, CompoundElement, WritableElement,\n+        permits AttributedElement, CompoundElement, Attribute,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFileElement.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -192,15 +192,0 @@\n-\n-    \/**\n-     * Compare a range of bytes from the classfile to a range of bytes within\n-     * a {@link BufWriter}.\n-     *\n-     * @param bufWriter the {@linkplain BufWriter}\n-     * @param bufWriterOffset the offset within the {@linkplain BufWriter}\n-     * @param classReaderOffset the offset within the classfile\n-     * @param length the length of the range\n-     * @return whether the two ranges were identical\n-     *\/\n-    boolean compare(BufWriter bufWriter,\n-                    int bufWriterOffset,\n-                    int classReaderOffset,\n-                    int length);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassReader.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,6 +62,0 @@\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public final void writeTo(BufWriter buf) {\n-        mapper.writeAttribute(buf, (T) this);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CustomAttribute.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-        extends WritableElement<FieldModel>, CompoundElement<FieldElement>, AttributedElement, ClassElement\n+        extends CompoundElement<FieldElement>, AttributedElement, ClassElement\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/FieldModel.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-        extends WritableElement<MethodModel>, CompoundElement<MethodElement>, AttributedElement, ClassElement\n+        extends CompoundElement<MethodElement>, AttributedElement, ClassElement\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/MethodModel.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package java.lang.classfile;\n-\n-import java.lang.classfile.constantpool.ConstantPoolBuilder;\n-import java.lang.classfile.constantpool.PoolEntry;\n-import jdk.internal.classfile.impl.DirectFieldBuilder;\n-import jdk.internal.classfile.impl.DirectMethodBuilder;\n-import jdk.internal.javac.PreviewFeature;\n-\n-\/**\n- * A classfile element that can encode itself as a stream of bytes in the\n- * encoding expected by the classfile format.\n- *\n- * @param <T> the type of the entity\n- *\n- * @sealedGraph\n- * @since 22\n- *\/\n-@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n-public sealed interface WritableElement<T> extends ClassFileElement\n-        permits Annotation, AnnotationElement, AnnotationValue, Attribute,\n-                PoolEntry, BootstrapMethodEntry, FieldModel, MethodModel,\n-                ConstantPoolBuilder, DirectFieldBuilder, DirectMethodBuilder {\n-    \/**\n-     * Writes the element to the specified writer\n-     *\n-     * @param buf the writer\n-     *\/\n-    void writeTo(BufWriter buf);\n-}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/WritableElement.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -36,1 +36,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -42,1 +41,0 @@\n-import java.lang.classfile.WritableElement;\n@@ -64,1 +62,1 @@\n-        extends ConstantPool, WritableElement<ConstantPool>\n+        extends ConstantPool\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/ConstantPoolBuilder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.lang.classfile.WritableElement;\n@@ -37,1 +36,1 @@\n-public sealed interface PoolEntry extends WritableElement<PoolEntry>\n+public sealed interface PoolEntry\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/PoolEntry.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,3 +27,0 @@\n-import java.lang.constant.ClassDesc;\n-\n-import java.lang.classfile.BufWriter;\n@@ -37,0 +34,2 @@\n+import java.lang.constant.ClassDesc;\n+\n@@ -87,8 +86,0 @@\n-    \/**\n-     * Writes the local variable to the specified writer\n-     *\n-     * @param buf the writer\n-     * @return true if the variable has been written\n-     *\/\n-    boolean writeTo(BufWriter buf);\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LocalVariable.java","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -36,0 +35,1 @@\n+\n@@ -84,8 +84,0 @@\n-    \/**\n-     * Writes the local variable to the specified writer\n-     *\n-     * @param buf the writer\n-     * @return true if the variable has been written\n-     *\/\n-    boolean writeTo(BufWriter buf);\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LocalVariableType.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,1 +104,1 @@\n-            attr.defaultValue().writeTo(buf);\n+            AnnotationReader.writeAnnotationValue((BufWriterImpl) buf, attr.defaultValue());\n@@ -122,1 +122,5 @@\n-            buf.writeList(attr.bootstrapMethods());\n+            var b = (BufWriterImpl) buf;\n+            b.writeU2(attr.bootstrapMethodsSize());\n+            for (var bsm : attr.bootstrapMethods()) {\n+                ((BootstrapMethodEntryImpl) bsm).writeTo(b);\n+            }\n@@ -257,1 +261,1 @@\n-            buf.writeListIndices(attr.exceptions());\n+            Util.writeListIndices(buf, attr.exceptions());\n@@ -411,1 +415,1 @@\n-                buf.writeListIndices(export.exportsTo());\n+                Util.writeListIndices(buf, export.exportsTo());\n@@ -417,1 +421,1 @@\n-                buf.writeListIndices(open.opensTo());\n+                Util.writeListIndices(buf, open.opensTo());\n@@ -419,1 +423,1 @@\n-            buf.writeListIndices(attr.uses());\n+            Util.writeListIndices(buf, attr.uses());\n@@ -423,1 +427,1 @@\n-                buf.writeListIndices(provide.providesWith());\n+                Util.writeListIndices(buf, provide.providesWith());\n@@ -485,1 +489,1 @@\n-            buf.writeListIndices(attr.packages());\n+            Util.writeListIndices(buf, attr.packages());\n@@ -557,1 +561,1 @@\n-            buf.writeListIndices(attr.nestMembers());\n+            Util.writeListIndices(buf, attr.nestMembers());\n@@ -575,1 +579,1 @@\n-            buf.writeListIndices(attr.permittedSubclasses());\n+            Util.writeListIndices(buf, attr.permittedSubclasses());\n@@ -598,1 +602,1 @@\n-                buf.writeList(info.attributes());\n+                Util.writeAttributes((BufWriterImpl) buf, info.attributes());\n@@ -617,1 +621,1 @@\n-            buf.writeList(attr.annotations());\n+            AnnotationReader.writeAnnotations(buf, attr.annotations());\n@@ -638,1 +642,1 @@\n-                buf.writeList(list);\n+                AnnotationReader.writeAnnotations(buf, list);\n@@ -656,1 +660,1 @@\n-            buf.writeList(attr.annotations());\n+            AnnotationReader.writeAnnotations(buf, attr.annotations());\n@@ -674,1 +678,1 @@\n-            buf.writeList(attr.annotations());\n+            AnnotationReader.writeAnnotations(buf, attr.annotations());\n@@ -695,1 +699,1 @@\n-                buf.writeList(list);\n+                AnnotationReader.writeAnnotations(buf, list);\n@@ -713,1 +717,1 @@\n-            buf.writeList(attr.annotations());\n+            AnnotationReader.writeAnnotations(buf, attr.annotations());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper.java","additions":22,"deletions":18,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -32,1 +31,1 @@\n-        extends AbstractElement {\n+        extends AbstractElement implements Util.WritableLocalVariable {\n@@ -83,2 +82,3 @@\n-    public boolean writeTo(BufWriter b) {\n-        var lc = ((BufWriterImpl)b).labelContext();\n+    @Override\n+    public boolean writeLocalTo(BufWriterImpl b) {\n+        var lc = b.labelContext();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractBoundLocalVariable.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -126,0 +125,2 @@\n+    abstract void writeTo(BufWriterImpl buf);\n+\n@@ -410,1 +411,1 @@\n-        public void writeTo(BufWriter pool) {\n+        void writeTo(BufWriterImpl pool) {\n@@ -481,1 +482,1 @@\n-        public void writeTo(BufWriter pool) {\n+        void writeTo(BufWriterImpl pool) {\n@@ -511,1 +512,1 @@\n-        public void writeTo(BufWriter pool) {\n+        void writeTo(BufWriterImpl pool) {\n@@ -817,1 +818,1 @@\n-        public void writeTo(BufWriter pool) {\n+        void writeTo(BufWriterImpl pool) {\n@@ -922,1 +923,1 @@\n-        public void writeTo(BufWriter pool) {\n+        void writeTo(BufWriterImpl pool) {\n@@ -1072,1 +1073,1 @@\n-        public void writeTo(BufWriter pool) {\n+        void writeTo(BufWriterImpl pool) {\n@@ -1105,1 +1106,1 @@\n-        public void writeTo(BufWriter pool) {\n+        void writeTo(BufWriterImpl pool) {\n@@ -1137,1 +1138,1 @@\n-        public void writeTo(BufWriter pool) {\n+        void writeTo(BufWriterImpl pool) {\n@@ -1169,1 +1170,1 @@\n-        public void writeTo(BufWriter pool) {\n+        void writeTo(BufWriterImpl pool) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -157,1 +157,2 @@\n-    private abstract static sealed class AbstractLocalPseudo extends AbstractPseudoInstruction {\n+    private abstract static sealed class AbstractLocalPseudo extends AbstractPseudoInstruction\n+            implements Util.WritableLocalVariable {\n@@ -192,2 +193,3 @@\n-        public boolean writeTo(BufWriter b) {\n-            var lc = ((BufWriterImpl)b).labelContext();\n+        @Override\n+        public boolean writeLocalTo(BufWriterImpl b) {\n+            var lc = b.labelContext();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPseudoInstruction.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-        implements CompoundElement<E>, AttributedElement\n+        implements CompoundElement<E>, AttributedElement, Util.Writable\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractUnboundModel.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-public final class AnnotationImpl implements Annotation {\n+public final class AnnotationImpl implements Annotation, Util.Writable {\n@@ -56,1 +56,1 @@\n-    public void writeTo(BufWriter buf) {\n+    public void writeTo(BufWriterImpl buf) {\n@@ -58,1 +58,5 @@\n-        buf.writeList(elements());\n+        buf.writeU2(elements().size());\n+        for (var e : elements) {\n+            buf.writeIndex(e.name());\n+            AnnotationReader.writeAnnotationValue(buf, e.value());\n+        }\n@@ -84,1 +88,1 @@\n-            implements AnnotationElement {\n+            implements AnnotationElement, Util.Writable {\n@@ -87,1 +91,1 @@\n-        public void writeTo(BufWriter buf) {\n+        public void writeTo(BufWriterImpl buf) {\n@@ -89,1 +93,1 @@\n-            value().writeTo(buf);\n+            AnnotationReader.writeAnnotationValue(buf, value());\n@@ -93,1 +97,1 @@\n-    public sealed interface OfConstantImpl extends AnnotationValue.OfConstant\n+    public sealed interface OfConstantImpl extends AnnotationValue.OfConstant, Util.Writable\n@@ -101,1 +105,1 @@\n-        default void writeTo(BufWriter buf) {\n+        default void writeTo(BufWriterImpl buf) {\n@@ -240,1 +244,1 @@\n-            implements AnnotationValue.OfArray {\n+            implements AnnotationValue.OfArray, Util.Writable {\n@@ -252,1 +256,1 @@\n-        public void writeTo(BufWriter buf) {\n+        public void writeTo(BufWriterImpl buf) {\n@@ -254,1 +258,4 @@\n-            buf.writeList(values);\n+            buf.writeU2(values.size());\n+            for (var e : values) {\n+                AnnotationReader.writeAnnotationValue(buf, e);\n+            }\n@@ -260,1 +267,1 @@\n-            implements AnnotationValue.OfEnum {\n+            implements AnnotationValue.OfEnum, Util.Writable {\n@@ -267,1 +274,1 @@\n-        public void writeTo(BufWriter buf) {\n+        public void writeTo(BufWriterImpl buf) {\n@@ -276,1 +283,1 @@\n-            implements AnnotationValue.OfAnnotation {\n+            implements AnnotationValue.OfAnnotation, Util.Writable {\n@@ -283,1 +290,1 @@\n-        public void writeTo(BufWriter buf) {\n+        public void writeTo(BufWriterImpl buf) {\n@@ -285,1 +292,1 @@\n-            annotation.writeTo(buf);\n+            AnnotationReader.writeAnnotation(buf, annotation);\n@@ -291,1 +298,1 @@\n-            implements AnnotationValue.OfClass {\n+            implements AnnotationValue.OfClass, Util.Writable {\n@@ -298,1 +305,1 @@\n-        public void writeTo(BufWriter buf) {\n+        public void writeTo(BufWriterImpl buf) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationImpl.java","additions":26,"deletions":19,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.classfile.BufWriter;\n@@ -42,1 +43,1 @@\n-class AnnotationReader {\n+public final class AnnotationReader {\n@@ -283,0 +284,20 @@\n+\n+    public static void writeAnnotation(BufWriterImpl buf, Annotation annotation) {\n+        \/\/ handles annotations and type annotations\n+        \/\/ TODO annotation cleanup later\n+        ((Util.Writable) annotation).writeTo(buf);\n+    }\n+\n+    public static void writeAnnotations(BufWriter buf, List<? extends Annotation> list) {\n+        \/\/ handles annotations and type annotations\n+        var internalBuf = (BufWriterImpl) buf;\n+        internalBuf.writeU2(list.size());\n+        for (var e : list) {\n+            writeAnnotation(internalBuf, e);\n+        }\n+    }\n+\n+    public static void writeAnnotationValue(BufWriterImpl buf, AnnotationValue value) {\n+        \/\/ TODO annotation cleanup later\n+        ((Util.Writable) value).writeTo(buf);\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationReader.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -53,4 +52,2 @@\n-    public void writeTo(BufWriter buf) {\n-        buf.writeU2(attributes.size());\n-        for (Attribute<?> a : attributes)\n-            a.writeTo(buf);\n+    public void writeTo(BufWriterImpl buf) {\n+        Util.writeAttributes(buf, attributes);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AttributeHolder.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -90,2 +89,1 @@\n-    @Override\n-    public void writeTo(BufWriter writer) {\n+    void writeTo(BufWriterImpl writer) {\n@@ -93,1 +91,1 @@\n-        writer.writeListIndices(arguments());\n+        Util.writeListIndices(writer, arguments());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BootstrapMethodEntryImpl.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        implements Attribute<T> {\n+        implements Attribute<T>, Util.Writable {\n@@ -104,1 +104,1 @@\n-    public void writeTo(BufWriter buf) {\n+    public void writeTo(BufWriterImpl buf) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundAttribute.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.List;\n@@ -33,1 +32,0 @@\n-import java.lang.classfile.WritableElement;\n@@ -129,4 +127,2 @@\n-    @Override\n-    public void writeBytes(BufWriter other) {\n-        BufWriterImpl o = (BufWriterImpl) other;\n-        writeBytes(o.elems, 0, o.offset);\n+    public void writeBytes(BufWriterImpl other) {\n+        writeBytes(other.elems, 0, other.offset);\n@@ -178,1 +174,0 @@\n-    @Override\n@@ -201,16 +196,0 @@\n-\n-    @Override\n-    public<T extends WritableElement<?>> void writeList(List<T> list) {\n-        writeU2(list.size());\n-        for (T t : list) {\n-            t.writeTo(this);\n-        }\n-    }\n-\n-    @Override\n-    public void writeListIndices(List<? extends PoolEntry> list) {\n-        writeU2(list.size());\n-        for (PoolEntry info : list) {\n-            writeIndex(info);\n-        }\n-    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufWriterImpl.java","additions":2,"deletions":23,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -204,1 +203,2 @@\n-        public void writeTo(BufWriter buf) {\n+        @Override\n+        public void writeTo(BufWriterImpl buf) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedCodeBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-        public void writeTo(BufWriter buf) {\n+        public void writeTo(BufWriterImpl buf) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedFieldBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -214,1 +213,1 @@\n-        public void writeTo(BufWriter buf) {\n+        public void writeTo(BufWriterImpl buf) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedMethodBuilder.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -324,1 +324,1 @@\n-    boolean writeBootstrapMethods(BufWriter buf) {\n+    boolean writeBootstrapMethods(BufWriterImpl buf) {\n@@ -329,1 +329,2 @@\n-        a.get().writeTo(buf);\n+        \/\/ BootstrapMethodAttribute implementations are all internal writable\n+        ((Util.Writable) a.get()).writeTo(buf);\n@@ -468,2 +469,1 @@\n-    @Override\n-    public boolean compare(BufWriter bufWriter,\n+    public boolean compare(BufWriterImpl bufWriter,\n@@ -474,1 +474,1 @@\n-            return Arrays.equals(((BufWriterImpl) bufWriter).elems,\n+            return Arrays.equals(bufWriter.elems,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassReaderImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-    public void writeTo(BufWriter buf) {\n+    public void writeTo(BufWriterImpl buf) {\n@@ -157,1 +157,1 @@\n-                                    ((BufWriterImpl)buf).context(),\n+                                    buf.context(),\n@@ -213,1 +213,1 @@\n-    public boolean compareCodeBytes(BufWriter buf, int offset, int len) {\n+    public boolean compareCodeBytes(BufWriterImpl buf, int offset, int len) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -47,1 +46,0 @@\n-import java.lang.classfile.WritableElement;\n@@ -55,2 +53,2 @@\n-    private final List<WritableElement<FieldModel>> fields = new ArrayList<>();\n-    private final List<WritableElement<MethodModel>> methods = new ArrayList<>();\n+    private final List<Util.Writable> fields = new ArrayList<>();\n+    private final List<Util.Writable> methods = new ArrayList<>();\n@@ -81,1 +79,1 @@\n-            writeAttribute((CustomAttribute)element);\n+            writeAttribute((CustomAttribute<?>) element);\n@@ -123,1 +121,1 @@\n-    public ClassBuilder withField(WritableElement<FieldModel> field) {\n+    ClassBuilder withField(Util.Writable field) {\n@@ -128,1 +126,1 @@\n-    public ClassBuilder withMethod(WritableElement<MethodModel> method) {\n+    ClassBuilder withMethod(Util.Writable method) {\n@@ -175,1 +173,1 @@\n-        BufWriter head = new BufWriterImpl(constantPool, context, size);\n+        BufWriterImpl head = new BufWriterImpl(constantPool, context, size);\n@@ -180,2 +178,2 @@\n-        tail.writeList(fields);\n-        tail.writeList(methods);\n+        Util.writeList(tail, fields);\n+        Util.writeList(tail, methods);\n@@ -200,1 +198,1 @@\n-        head.writeListIndices(ies);\n+        Util.writeListIndices(head, ies);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectClassBuilder.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.lang.constant.MethodTypeDesc;\n@@ -39,1 +38,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -45,1 +43,0 @@\n-import java.lang.classfile.Instruction;\n@@ -52,1 +49,0 @@\n-import java.lang.classfile.attribute.StackMapTableAttribute;\n@@ -86,1 +82,1 @@\n-    final BufWriter bytecodesBufWriter;\n+    final BufWriterImpl bytecodesBufWriter;\n@@ -103,1 +99,1 @@\n-    public static Attribute<CodeAttribute> build(MethodInfo methodInfo,\n+    public static UnboundAttribute<CodeAttribute> build(MethodInfo methodInfo,\n@@ -147,1 +143,1 @@\n-            writeAttribute((CustomAttribute)element);\n+            writeAttribute((CustomAttribute<?>) element);\n@@ -196,1 +192,1 @@\n-    private Attribute<CodeAttribute> content = null;\n+    private UnboundAttribute<CodeAttribute> content = null;\n@@ -198,1 +194,1 @@\n-    private void writeExceptionHandlers(BufWriter buf) {\n+    private void writeExceptionHandlers(BufWriterImpl buf) {\n@@ -236,1 +232,1 @@\n-                    public void writeBody(BufWriter b) {\n+                    public void writeBody(BufWriterImpl b) {\n@@ -267,1 +263,1 @@\n-                    public void writeBody(BufWriter b) {\n+                    public void writeBody(BufWriterImpl b) {\n@@ -272,1 +268,1 @@\n-                            if (!l.writeTo(b)) {\n+                            if (!Util.writeLocalVariable(b, l)) {\n@@ -290,1 +286,1 @@\n-                    public void writeBody(BufWriter b) {\n+                    public void writeBody(BufWriterImpl b) {\n@@ -295,1 +291,1 @@\n-                            if (!l.writeTo(b)) {\n+                            if (!Util.writeLocalVariable(b, l)) {\n@@ -355,2 +351,1 @@\n-            public void writeBody(BufWriter b) {\n-                BufWriterImpl buf = (BufWriterImpl) b;\n+            public void writeBody(BufWriterImpl buf) {\n@@ -392,2 +387,2 @@\n-                writeExceptionHandlers(b);\n-                attributes.writeTo(b);\n+                writeExceptionHandlers(buf);\n+                attributes.writeTo(buf);\n@@ -430,1 +425,1 @@\n-        public void writeBody(BufWriter b) {\n+        public void writeBody(BufWriterImpl b) {\n@@ -435,1 +430,1 @@\n-        public void writeTo(BufWriter b) {\n+        public void writeTo(BufWriterImpl b) {\n@@ -450,1 +445,1 @@\n-                BufWriter bw = new BufWriterImpl(constantPool, context);\n+                var bw = new BufWriterImpl(constantPool, context);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":16,"deletions":21,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -35,1 +34,0 @@\n-import java.lang.classfile.WritableElement;\n@@ -40,1 +38,1 @@\n-        implements TerminalFieldBuilder, WritableElement<FieldModel> {\n+        implements TerminalFieldBuilder, Util.Writable {\n@@ -62,1 +60,1 @@\n-            writeAttribute((CustomAttribute)element);\n+            writeAttribute((CustomAttribute<?>) element);\n@@ -77,1 +75,1 @@\n-    public void writeTo(BufWriter buf) {\n+    public void writeTo(BufWriterImpl buf) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectFieldBuilder.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -40,1 +39,0 @@\n-import java.lang.classfile.WritableElement;\n@@ -45,1 +43,1 @@\n-        implements TerminalMethodBuilder, WritableElement<MethodModel> {\n+        implements TerminalMethodBuilder, Util.Writable {\n@@ -118,1 +116,1 @@\n-            writeAttribute((CustomAttribute)element);\n+            writeAttribute((CustomAttribute<?>) element);\n@@ -151,2 +149,1 @@\n-    public void writeTo(BufWriter b) {\n-        BufWriterImpl buf = (BufWriterImpl) b;\n+    public void writeTo(BufWriterImpl buf) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectMethodBuilder.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-        implements FieldModel {\n+        implements FieldModel, Util.Writable {\n@@ -81,1 +81,1 @@\n-    public void writeTo(BufWriter buf) {\n+    public void writeTo(BufWriterImpl buf) {\n@@ -89,1 +89,1 @@\n-            buf.writeList(attributes());\n+            Util.writeAttributes(buf, attributes());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/FieldImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-        implements MethodModel, MethodInfo {\n+        implements MethodModel, MethodInfo, Util.Writable {\n@@ -104,2 +104,1 @@\n-    public void writeTo(BufWriter b) {\n-        BufWriterImpl buf = (BufWriterImpl) b;\n+    public void writeTo(BufWriterImpl buf) {\n@@ -113,1 +112,1 @@\n-            buf.writeList(attributes());\n+            Util.writeAttributes(buf, attributes());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/MethodImpl.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.lang.classfile.Attribute;\n@@ -37,1 +36,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -138,1 +136,1 @@\n-    public boolean writeBootstrapMethods(BufWriter buf) {\n+    public boolean writeBootstrapMethods(BufWriterImpl buf) {\n@@ -151,1 +149,1 @@\n-            Attribute<BootstrapMethodsAttribute> a\n+            UnboundAttribute<BootstrapMethodsAttribute> a\n@@ -155,1 +153,1 @@\n-                public void writeBody(BufWriter b) {\n+                public void writeBody(BufWriterImpl b) {\n@@ -166,2 +164,1 @@\n-    @Override\n-    public void writeTo(BufWriter buf) {\n+    void writeTo(BufWriterImpl buf) {\n@@ -178,1 +175,1 @@\n-            PoolEntry info = entryByIndex(i);\n+            var info = (AbstractPoolEntry) entryByIndex(i);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SplitConstantPool.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-                ((BufWriterImpl) dcb.bytecodesBufWriter).asByteBuffer(),\n+                dcb.bytecodesBufWriter.asByteBuffer(),\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackCounter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-                ((BufWriterImpl) dcb.bytecodesBufWriter).asByteBuffer(),\n+                dcb.bytecodesBufWriter.asByteBuffer(),\n@@ -386,1 +386,1 @@\n-            public void writeBody(BufWriter b) {\n+            public void writeBody(BufWriterImpl b) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapGenerator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -192,5 +192,0 @@\n-\n-    @Override\n-    public void writeTo(BufWriter buf) {\n-        throw new UnsupportedOperationException();\n-    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TemporaryConstantPool.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -98,1 +97,1 @@\n-        implements Attribute<T> {\n+        implements Attribute<T>, Util.Writable {\n@@ -117,1 +116,1 @@\n-    public void writeTo(BufWriter buf) {\n+    public void writeTo(BufWriterImpl buf) {\n@@ -755,1 +754,1 @@\n-                                        List<AnnotationElement> elements) implements TypeAnnotation {\n+                                        List<AnnotationElement> elements) implements TypeAnnotation, Util.Writable {\n@@ -772,2 +771,2 @@\n-        public void writeTo(BufWriter buf) {\n-            LabelContext lr = ((BufWriterImpl) buf).labelContext();\n+        public void writeTo(BufWriterImpl buf) {\n+            LabelContext lr = buf.labelContext();\n@@ -821,1 +820,1 @@\n-                pair.value().writeTo(buf);\n+                AnnotationReader.writeAnnotationValue(buf, pair.value());\n@@ -907,1 +906,1 @@\n-        public abstract void writeBody(BufWriter b);\n+        public abstract void writeBody(BufWriterImpl b);\n@@ -910,1 +909,1 @@\n-        public void writeTo(BufWriter b) {\n+        public void writeTo(BufWriterImpl b) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/UnboundAttribute.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+import java.lang.classfile.CustomAttribute;\n+import java.lang.classfile.PseudoInstruction;\n+import java.lang.classfile.constantpool.PoolEntry;\n@@ -50,1 +53,0 @@\n-import java.lang.classfile.constantpool.ConstantPoolBuilder;\n@@ -191,0 +193,25 @@\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> void writeAttribute(BufWriterImpl writer, Attribute<?> attr) {\n+        if (attr instanceof CustomAttribute<?> ca) {\n+            var mapper = (AttributeMapper<T>) ca.attributeMapper();\n+            mapper.writeAttribute(writer, (T) ca);\n+        } else {\n+            assert attr instanceof BoundAttribute || attr instanceof UnboundAttribute;\n+            ((Writable) attr).writeTo(writer);\n+        }\n+    }\n+\n+    public static void writeAttributes(BufWriterImpl buf, List<? extends Attribute<?>> list) {\n+        buf.writeU2(list.size());\n+        for (var e : list) {\n+            writeAttribute(buf, e);\n+        }\n+    }\n+\n+    static void writeList(BufWriterImpl buf, List<Writable> list) {\n+        buf.writeU2(list.size());\n+        for (var e : list) {\n+            e.writeTo(buf);\n+        }\n+    }\n+\n@@ -219,1 +246,1 @@\n-                                public void writeBody(BufWriter b) {\n+                                public void writeBody(BufWriterImpl b) {\n@@ -240,0 +267,24 @@\n+\n+    public static void writeListIndices(BufWriter writer, List<? extends PoolEntry> list) {\n+        writer.writeU2(list.size());\n+        for (PoolEntry info : list) {\n+            writer.writeIndex(info);\n+        }\n+    }\n+\n+    public static boolean writeLocalVariable(BufWriterImpl buf, PseudoInstruction lvOrLvt) {\n+        return ((WritableLocalVariable) lvOrLvt).writeLocalTo(buf);\n+    }\n+\n+    \/**\n+     * A generic interface for objects to write to a\n+     * buf writer. Do not implement unless necessary,\n+     * as this writeTo is public, which can be troublesome.\n+     *\/\n+    interface Writable {\n+        void writeTo(BufWriterImpl writer);\n+    }\n+\n+    interface WritableLocalVariable {\n+        boolean writeLocalTo(BufWriterImpl buf);\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Util.java","additions":53,"deletions":2,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.classfile.impl.BufWriterImpl;\n@@ -37,1 +38,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -87,1 +87,1 @@\n-                public void writeBody(BufWriter b) {\n+                public void writeBody(BufWriterImpl b) {\n","filename":"test\/jdk\/jdk\/classfile\/BoundAttributeTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import jdk.internal.classfile.impl.BufWriterImpl;\n+import jdk.internal.classfile.impl.Util;\n@@ -88,1 +90,1 @@\n-                    public void writeBody(BufWriter b) {\n+                    public void writeBody(BufWriterImpl b) {\n@@ -96,1 +98,1 @@\n-                    public void writeBody(BufWriter b) {\n+                    public void writeBody(BufWriterImpl b) {\n@@ -98,1 +100,1 @@\n-                        lv.writeTo(b);\n+                        Util.writeLocalVariable(b, lv);\n@@ -103,1 +105,1 @@\n-                    public void writeBody(BufWriter b) {\n+                    public void writeBody(BufWriterImpl b) {\n@@ -105,1 +107,1 @@\n-                        lvt.writeTo(b);\n+                        Util.writeLocalVariable(b, lvt);\n","filename":"test\/jdk\/jdk\/classfile\/CorpusTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -47,0 +46,2 @@\n+\n+import jdk.internal.classfile.impl.BufWriterImpl;\n@@ -133,1 +134,1 @@\n-                                public void writeBody(BufWriter b) {\n+                                public void writeBody(BufWriterImpl b) {\n@@ -158,1 +159,1 @@\n-                                public void writeBody(BufWriter b) {\n+                                public void writeBody(BufWriterImpl b) {\n","filename":"test\/jdk\/jdk\/classfile\/LimitsTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,0 @@\n-import java.lang.classfile.Opcode;\n-import java.lang.classfile.TypeKind;\n@@ -46,1 +44,0 @@\n-import jdk.internal.classfile.impl.DirectClassBuilder;\n@@ -78,1 +75,1 @@\n-            cl.methods().forEach(m -> ((DirectClassBuilder) cb).withMethod(m));\n+            cl.methods().forEach(cb::with);\n","filename":"test\/jdk\/jdk\/classfile\/LowAdaptTest.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,2 +73,2 @@\n-            BufWriter buf = new BufWriterImpl(ConstantPoolBuilder.of(), (ClassFileImpl) ClassFile.of());\n-            attr.defaultValue().writeTo(buf);\n+            var buf = new BufWriterImpl(ConstantPoolBuilder.of(), (ClassFileImpl) ClassFile.of());\n+            AnnotationReader.writeAnnotationValue(buf, attr.defaultValue());\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/AnnotationDefault\/AnnotationDefaultVerifier.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}