{"files":[{"patch":"@@ -402,0 +402,1 @@\n+    \/\/ Null checks entry\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufWriterImpl.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -549,0 +549,1 @@\n+        int targetBci = labelToBci(target); \/\/ implicit null check\n@@ -550,1 +551,0 @@\n-        int targetBci = labelToBci(target);\n@@ -573,0 +573,1 @@\n+        Objects.requireNonNull(target); \/\/ before any write\n@@ -620,0 +621,11 @@\n+        cases = new ArrayList<>(cases); \/\/ cases may be untrusted\n+        for (var each : cases) {\n+            Objects.requireNonNull(each); \/\/ single null case may exist\n+        }\n+        cases.sort(new Comparator<>() {\n+            @Override\n+            public int compare(SwitchCase c1, SwitchCase c2) {\n+                return Integer.compare(c1.caseValue(), c2.caseValue());\n+            }\n+        });\n+        \/\/ validation end\n@@ -627,7 +639,0 @@\n-        cases = new ArrayList<>(cases);\n-        cases.sort(new Comparator<>() {\n-            @Override\n-            public int compare(SwitchCase c1, SwitchCase c2) {\n-                return Integer.compare(c1.caseValue(), c2.caseValue());\n-            }\n-        });\n@@ -642,0 +647,5 @@\n+        var caseMap = new HashMap<Integer, Label>(cases.size()); \/\/ cases may be untrusted\n+        for (var c : cases) {\n+            caseMap.put(c.caseValue(), c.target());\n+        }\n+        \/\/ validation end\n@@ -649,4 +659,0 @@\n-        var caseMap = new HashMap<Integer, Label>(cases.size());\n-        for (var c : cases) {\n-            caseMap.put(c.caseValue(), c.target());\n-        }\n@@ -931,0 +937,1 @@\n+            Util.checkKind(opcode, Opcode.Kind.INVOKE);\n@@ -962,1 +969,2 @@\n-        bytecodesBufWriter.writeIndex(opcode.bytecode(), ref);\n+        Util.checkKind(opcode, Opcode.Kind.FIELD_ACCESS);\n+        writeFieldAccess(opcode, ref);\n@@ -980,0 +988,1 @@\n+        Util.checkKind(op, Opcode.Kind.BRANCH);\n@@ -1643,0 +1652,2 @@\n+        Objects.requireNonNull(defaultTarget);\n+        \/\/ check cases when we sort them\n@@ -1802,0 +1813,1 @@\n+        BytecodeHelpers.validateMultiArrayDimensions(dims);\n@@ -1848,0 +1860,2 @@\n+        Objects.requireNonNull(defaultTarget);\n+        \/\/ check cases when we write them\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":27,"deletions":13,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8341277\n+ * @bug 8341277 8361102\n@@ -35,2 +35,1 @@\n-import java.lang.constant.ClassDesc;\n-import java.lang.reflect.Parameter;\n+import java.util.Collections;\n@@ -42,0 +41,1 @@\n+import helpers.TestUtil;\n@@ -45,1 +45,0 @@\n-import static java.lang.classfile.ClassFile.ACC_STATIC;\n@@ -47,0 +46,1 @@\n+import static helpers.TestConstants.*;\n@@ -53,0 +53,53 @@\n+    @Test\n+    void testOpcodeInCodeBuilder() {\n+        TestUtil.runCodeHandler(cob -> {\n+            var mref = cob.constantPool().methodRefEntry(CD_System, \"exit\", MTD_INT_VOID);\n+            var fref = cob.constantPool().fieldRefEntry(CD_System, \"out\", CD_PrintStream);\n+            var label = cob.newLabel();\n+\n+            \/\/ Sanity\n+            cob.iconst_0();\n+            assertDoesNotThrow(() -> cob.invoke(INVOKESTATIC, mref));\n+            assertDoesNotThrow(() -> cob.fieldAccess(GETSTATIC, fref));\n+            cob.pop();\n+            assertDoesNotThrow(() -> cob.branch(GOTO, label));\n+\n+            \/\/ Opcode NPE\n+            assertThrows(NullPointerException.class, () -> cob.invoke(null, mref));\n+            assertThrows(NullPointerException.class, () -> cob.fieldAccess(null, fref));\n+            assertThrows(NullPointerException.class, () -> cob.branch(null, label));\n+\n+            \/\/ Opcode IAE\n+            assertThrows(IllegalArgumentException.class, () -> cob.invoke(IFNE, mref));\n+            assertThrows(IllegalArgumentException.class, () -> cob.fieldAccess(JSR, fref));\n+            assertThrows(IllegalArgumentException.class, () -> cob.branch(CHECKCAST, label));\n+\n+            \/\/ Wrap up\n+            cob.labelBinding(label);\n+            cob.return_();\n+        });\n+    }\n+\n+    @Test\n+    void testLongJump() {\n+        TestUtil.runCodeHandler(cob -> {\n+            assertThrows(NullPointerException.class, () -> cob.goto_w(null));\n+            \/\/ Ensures nothing redundant is written in case of failure\n+            cob.return_();\n+        });\n+    }\n+\n+    @Test\n+    void testSwitch() {\n+        TestUtil.runCodeHandler(cob -> {\n+            assertThrows(NullPointerException.class, () -> cob.tableswitch(-1, 1, cob.startLabel(), null));\n+            assertThrows(NullPointerException.class, () -> cob.lookupswitch(cob.startLabel(), null));\n+            assertThrows(NullPointerException.class, () -> cob.tableswitch(-1, 1, cob.startLabel(), Collections.singletonList(null)));\n+            assertThrows(NullPointerException.class, () -> cob.lookupswitch(cob.startLabel(), Collections.singletonList(null)));\n+            assertThrows(NullPointerException.class, () -> cob.tableswitch(-1, 1, null, List.of()));\n+            assertThrows(NullPointerException.class, () -> cob.lookupswitch(null, List.of()));\n+            \/\/ Ensures nothing redundant is written in case of failure\n+            cob.return_();\n+        });\n+    }\n+\n@@ -66,0 +119,8 @@\n+\n+        TestUtil.runCodeHandler(cob -> {\n+            assertThrows(IllegalArgumentException.class, () -> cob.sipush((int) Short.MIN_VALUE - 1));\n+            assertThrows(IllegalArgumentException.class, () -> cob.sipush((int) Short.MAX_VALUE + 1));\n+            assertThrows(IllegalArgumentException.class, () -> cob.bipush((int) Byte.MIN_VALUE - 1));\n+            assertThrows(IllegalArgumentException.class, () -> cob.bipush((int) Byte.MAX_VALUE + 1));\n+            cob.return_();\n+        });\n@@ -166,1 +227,0 @@\n-        \/\/ Can fail with AssertionError instead of IAE\n@@ -168,2 +228,2 @@\n-            action.accept(cob);\n-            fail(\"Bad slot access did not fail fast: \"  + value);\n+            assertThrows(IllegalArgumentException.class, () -> action.accept(cob));\n+            cob.return_();\n@@ -171,15 +231,5 @@\n-        var cf = ClassFile.of();\n-        CodeTransform noopCodeTransform = CodeBuilder::with;\n-        \/\/ Direct builders\n-        assertThrows(IllegalArgumentException.class, () -> cf.build(ClassDesc.of(\"Test\"), clb -> clb\n-                .withMethodBody(\"test\", MTD_void, ACC_STATIC, checkedAction)));\n-        \/\/ Chained builders\n-        assertThrows(IllegalArgumentException.class, () -> cf.build(ClassDesc.of(\"Test\"), clb -> clb\n-                .withMethodBody(\"test\", MTD_void, ACC_STATIC, cob -> cob\n-                        .transforming(CodeTransform.ACCEPT_ALL, checkedAction))));\n-        var classTemplate = cf.build(ClassDesc.of(\"Test\"), clb -> clb\n-                .withMethodBody(\"test\", MTD_void, ACC_STATIC, CodeBuilder::return_));\n-        \/\/ Indirect builders\n-        assertThrows(IllegalArgumentException.class, () -> cf.transformClass(cf.parse(classTemplate),\n-                ClassTransform.transformingMethodBodies(CodeTransform.endHandler(checkedAction)\n-                        .andThen(noopCodeTransform))));\n+        try {\n+            TestUtil.runCodeHandler(checkedAction);\n+        } catch (Throwable _) {\n+            System.out.printf(\"Erroneous value %d%n\", value);\n+        }\n@@ -203,1 +253,4 @@\n-            ensureFailFast(i, cob -> cob.iinc(0, i));\n+            TestUtil.runCodeHandler(cob -> {\n+                assertThrows(IllegalArgumentException.class, () -> cob.iinc(0, i));\n+                cob.return_();\n+            });\n@@ -218,0 +271,9 @@\n+\n+        TestUtil.runCodeHandler(cob -> {\n+            assertThrows(IllegalArgumentException.class, () -> cob.multianewarray(ce, 0));\n+            assertThrows(IllegalArgumentException.class, () -> cob.multianewarray(ce, 0x100));\n+            assertThrows(IllegalArgumentException.class, () -> cob.multianewarray(ce, -1));\n+            assertThrows(IllegalArgumentException.class, () -> cob.multianewarray(ce, Integer.MIN_VALUE));\n+            assertThrows(IllegalArgumentException.class, () -> cob.multianewarray(ce, Integer.MAX_VALUE));\n+            cob.return_();\n+        });\n","filename":"test\/jdk\/jdk\/classfile\/InstructionValidationTest.java","additions":85,"deletions":23,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -5,1 +5,2 @@\n-    java.base\/jdk.internal.classfile.impl.verifier\n\\ No newline at end of file\n+    java.base\/jdk.internal.classfile.impl.verifier\n+lib.dirs = helpers\n","filename":"test\/jdk\/jdk\/classfile\/TEST.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,5 @@\n+\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeTransform;\n@@ -30,1 +35,1 @@\n-import java.io.FileOutputStream;\n+import java.lang.constant.ClassDesc;\n@@ -32,0 +37,1 @@\n+import java.util.function.Consumer;\n@@ -33,1 +39,2 @@\n-public class TestUtil {\n+import static java.lang.classfile.ClassFile.ACC_STATIC;\n+import static java.lang.constant.ConstantDescs.MTD_void;\n@@ -35,3 +42,1 @@\n-    public static void assertEmpty(Collection<?> col) {\n-        if (!col.isEmpty()) throw new AssertionError(col);\n-    }\n+public final class TestUtil {\n@@ -39,8 +44,15 @@\n-    public static void writeClass(byte[] bytes, String fn) {\n-        try {\n-            FileOutputStream out = new FileOutputStream(fn);\n-            out.write(bytes);\n-            out.close();\n-        } catch (Exception ex) {\n-            throw new InternalError(ex);\n-        }\n+    \/\/\/ Run a code handler in different builders.\n+    public static void runCodeHandler(Consumer<CodeBuilder> handler) {\n+        ClassFile cf = ClassFile.of();\n+        \/\/ Direct builders\n+        cf.build(ClassDesc.of(\"Test\"), clb -> clb.withMethodBody(\"test\", MTD_void, ACC_STATIC, handler));\n+        \/\/ Chained builders\n+        cf.build(ClassDesc.of(\"Test\"), clb -> clb\n+                .withMethodBody(\"test\", MTD_void, ACC_STATIC, cob -> cob\n+                        .transforming(CodeTransform.ACCEPT_ALL, handler)));\n+        \/\/ Indirect builders\n+        var classTemplate = cf.build(ClassDesc.of(\"Test\"), clb -> clb\n+                .withMethodBody(\"test\", MTD_void, ACC_STATIC, CodeBuilder::return_));\n+        cf.transformClass(cf.parse(classTemplate),\n+                ClassTransform.transformingMethodBodies(CodeTransform.endHandler(handler)\n+                        .andThen(CodeBuilder::with)));\n@@ -49,0 +61,3 @@\n+    public static void assertEmpty(Collection<?> col) {\n+        if (!col.isEmpty()) throw new AssertionError(col);\n+    }\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/TestUtil.java","additions":29,"deletions":14,"binary":false,"changes":43,"status":"modified"}]}