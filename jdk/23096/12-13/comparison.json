{"files":[{"patch":"@@ -90,1 +90,1 @@\n-    private static final String RESPONSE_HEADER_VALUE = \"!\".repeat(RESPONSE_BODY.length);\n+    private static final String RESPONSE_HEADER_VALUE = \"!\".repeat(RESPONSE_BODY.length + 1);\n@@ -113,1 +113,11 @@\n-            server.start();\n+            try {\n+                server.start();\n+            } catch (Exception serverException) {\n+                try {\n+                    client.close();\n+                } catch (Exception clientException) {\n+                    Exception localClientException = new RuntimeException(\"failed closing client\", clientException);\n+                    serverException.addSuppressed(localClientException);\n+                }\n+                throw new RuntimeException(\"failed closing server\", serverException);\n+            }\n@@ -177,3 +187,19 @@\n-        for (var pair : new ServerClientPair[]{HTTP1, HTTPS1, HTTP2, HTTPS2}) {\n-            pair.client.close();\n-            pair.server.stop();\n+        Exception[] exceptionRef = {null};\n+        Stream\n+                .of(HTTP1, HTTPS1, HTTP2, HTTPS2)\n+                .flatMap(pair -> Stream.<Runnable>of(\n+                        pair.client::close,\n+                        pair.server::stop))\n+                .forEach(closer -> {\n+                    try {\n+                        closer.run();\n+                    } catch (Exception exception) {\n+                        if (exceptionRef[0] == null) {\n+                            exceptionRef[0] = exception;\n+                        } else {\n+                            exceptionRef[0].addSuppressed(exception);\n+                        }\n+                    }\n+                });\n+        if (exceptionRef[0] != null) {\n+            throw new RuntimeException(\"failed closing one or more server-client pairs\", exceptionRef[0]);\n@@ -197,3 +223,1 @@\n-            byte[] responseBodyBuffer = new byte[RESPONSE_BODY.length];\n-            int responseBodyBufferLength = responseBodyStream.read(responseBodyBuffer);\n-            assertEquals(responseBodyBuffer.length, responseBodyBufferLength);\n+            byte[] responseBodyBuffer = responseBodyStream.readAllBytes();\n@@ -228,3 +252,1 @@\n-            var exception = assertThrows(\n-                    IOException.class,\n-                    () -> responseBodyStream.read(new byte[RESPONSE_BODY.length]));\n+            var exception = assertThrows(IOException.class, responseBodyStream::readAllBytes);\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpResponseLimitingTest.java","additions":33,"deletions":11,"binary":false,"changes":44,"status":"modified"}]}