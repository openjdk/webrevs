{"files":[{"patch":"@@ -1401,0 +1401,3 @@\n+            if (capacity < 0) {\n+                throw new IllegalArgumentException(\"was expecting \\\"capacity >= 0\\\", found: \" + capacity);\n+            }\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpResponse.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.util.concurrent.atomic.AtomicLong;\n@@ -55,1 +56,1 @@\n-    private long length;\n+    private final AtomicLong lengthRef = new AtomicLong();\n@@ -102,1 +103,2 @@\n-        if (allocateLength(buffers)) {\n+        boolean lengthAllocated = allocateLength(buffers);\n+        if (lengthAllocated) {\n@@ -107,4 +109,7 @@\n-        else if (stateRef.compareAndSet(subscribed, State.Terminated.INSTANCE)) {\n-            downstreamSubscriber.onError(new IOException(\n-                    \"the maximum number of bytes that are allowed to be consumed is exceeded\"));\n-            subscribed.subscription.cancel();\n+        else {\n+            boolean terminated = stateRef.compareAndSet(subscribed, State.Terminated.INSTANCE);\n+            if (terminated) {\n+                downstreamSubscriber.onError(new IOException(\n+                        \"the maximum number of bytes that are allowed to be consumed is exceeded\"));\n+                subscribed.subscription.cancel();\n+            }\n@@ -117,3 +122,9 @@\n-        long nextReceivedByteCount = Math.addExact(length, bufferLength);\n-        if (nextReceivedByteCount > capacity) {\n-            return false;\n+        while (true) {\n+            long length = lengthRef.get();\n+            long nextLength = Math.addExact(length, bufferLength);\n+            if (nextLength > capacity) {\n+                return false;\n+            }\n+            if (lengthRef.compareAndSet(length, nextLength)) {\n+                return true;\n+            }\n@@ -121,2 +132,0 @@\n-        length = nextReceivedByteCount;\n-        return true;\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/LimitingSubscriber.java","additions":20,"deletions":11,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -176,1 +176,1 @@\n-     * An HTTP server always returning an excessive response.\n+     * An HTTP server always returning a fixed response containing a non-empty body.\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpResponseLimitingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}