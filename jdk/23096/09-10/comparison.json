{"files":[{"patch":"@@ -754,2 +754,2 @@\n-         * {@return a {@code BodyHandler} limiting the number of body bytes\n-         * consumed and passed to the given downstream {@code BodyHandler}}\n+         * {@return a {@code BodyHandler} that limits the number of body bytes\n+         * that are delivered to the given {@code downstreamHandler}}\n@@ -1383,2 +1383,2 @@\n-         * {@return a {@code BodySubscriber} limiting the number of body bytes\n-         * consumed and passed to the given downstream {@code BodySubscriber}}\n+         * {@return a {@code BodySubscriber} that limits the number of body\n+         * bytes that are delivered to the given {@code downstreamSubscriber}}\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpResponse.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @key randomness\n@@ -30,2 +31,3 @@\n- * @build jdk.test.lib.net.SimpleSSLContext\n- *        jdk.httpclient.test.lib.common.HttpServerAdapters\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters\n+ *        jdk.test.lib.RandomFactory\n+ *        jdk.test.lib.net.SimpleSSLContext\n@@ -36,0 +38,1 @@\n+import jdk.test.lib.RandomFactory;\n@@ -52,1 +55,0 @@\n-import java.time.Duration;\n@@ -55,0 +57,1 @@\n+import java.util.Random;\n@@ -60,0 +63,1 @@\n+import static java.net.http.HttpClient.Builder.NO_PROXY;\n@@ -72,0 +76,2 @@\n+    private static final Random RANDOM = RandomFactory.getRandom();\n+\n@@ -82,1 +88,4 @@\n-        return capacityArgs(Long.MAX_VALUE, RESPONSE_BODY.length);\n+        long minExtremeCapacity = RESPONSE_BODY.length;\n+        long maxExtremeCapacity = Long.MAX_VALUE;\n+        long nonExtremeCapacity = RANDOM.nextLong(minExtremeCapacity + 1, maxExtremeCapacity);\n+        return capacityArgs(minExtremeCapacity, nonExtremeCapacity, maxExtremeCapacity);\n@@ -93,1 +102,41 @@\n-        return capacityArgs(0, RESPONSE_BODY.length - 1);\n+        long minExtremeCapacity = 0;\n+        long maxExtremeCapacity = RESPONSE_BODY.length - 1;\n+        long nonExtremeCapacity = RANDOM.nextLong(minExtremeCapacity + 1, maxExtremeCapacity);\n+        return capacityArgs(minExtremeCapacity, nonExtremeCapacity, maxExtremeCapacity);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"invalidCapacities\")\n+    void testFailureOnInvalidCapacityForHandler(long invalidCapacity) {\n+        var exception = assertThrows(\n+                IllegalArgumentException.class,\n+                () -> BodyHandlers.limiting(BodyHandlers.ofByteArray(), invalidCapacity));\n+        assertEquals(exception.getMessage(), \"capacity must not be negative: \" + invalidCapacity);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"invalidCapacities\")\n+    void testFailureOnInvalidCapacityForSubscriber(long invalidCapacity) {\n+        var exception = assertThrows(\n+                IllegalArgumentException.class,\n+                () -> BodySubscribers.limiting(BodySubscribers.ofByteArray(), invalidCapacity));\n+        assertEquals(exception.getMessage(), \"capacity must not be negative: \" + invalidCapacity);\n+    }\n+\n+    static long[] invalidCapacities() {\n+        long minExtremeCapacity = Long.MIN_VALUE;\n+        long maxExtremeCapacity = -1;\n+        long nonExtremeCapacity = RANDOM.nextLong(minExtremeCapacity + 1, maxExtremeCapacity);\n+        return new long[]{minExtremeCapacity, nonExtremeCapacity, maxExtremeCapacity};\n+    }\n+\n+    @Test\n+    void testFailureOnNullDownstreamHandler() {\n+        var exception = assertThrows(NullPointerException.class, () -> BodyHandlers.limiting(null, 0));\n+        assertEquals(exception.getMessage(), \"downstreamHandler\");\n+    }\n+\n+    @Test\n+    void testFailureOnNullDownstreamSubscriber() {\n+        var exception = assertThrows(NullPointerException.class, () -> BodySubscribers.limiting(null, 0));\n+        assertEquals(exception.getMessage(), \"downstreamSubscriber\");\n@@ -141,1 +190,1 @@\n-        try (var client = createClient(sslContext)) {\n+        try (var client = createClient(version, sslContext)) {\n@@ -144,4 +193,1 @@\n-            var request = HttpRequest\n-                    .newBuilder(requestUri)\n-                    .timeout(Duration.ofSeconds(5))\n-                    .build();\n+            var request = HttpRequest.newBuilder(requestUri).version(version).build();\n@@ -157,4 +203,2 @@\n-    private static HttpClient createClient(SSLContext sslContext) {\n-        HttpClient.Builder builder = HttpClient\n-                .newBuilder()\n-                .connectTimeout(Duration.ofSeconds(5));\n+    private static HttpClient createClient(HttpClient.Version version, SSLContext sslContext) {\n+        HttpClient.Builder builder = HttpClient.newBuilder().version(version).proxy(NO_PROXY);\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpResponseLimitingTest.java","additions":58,"deletions":14,"binary":false,"changes":72,"status":"modified"}]}