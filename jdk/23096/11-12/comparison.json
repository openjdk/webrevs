{"files":[{"patch":"@@ -52,0 +52,1 @@\n+import java.net.http.HttpHeaders;\n@@ -84,0 +85,7 @@\n+    private static final String RESPONSE_HEADER_NAME = \"X-Excessive-Data\";\n+\n+    \/**\n+     * A header value larger than {@link #RESPONSE_BODY} to verify that {@code limiting()} doesn't affect header parsing.\n+     *\/\n+    private static final String RESPONSE_HEADER_VALUE = \"!\".repeat(RESPONSE_BODY.length);\n+\n@@ -120,0 +128,1 @@\n+                        exchange.getResponseHeaders().addHeader(RESPONSE_HEADER_NAME, RESPONSE_HEADER_VALUE);\n@@ -178,0 +187,1 @@\n+        verifyHeaders(response.headers());\n@@ -185,0 +195,1 @@\n+        verifyHeaders(response.headers());\n@@ -203,3 +214,5 @@\n-        var exception = assertThrows(\n-                IOException.class,\n-                () -> pair.request(BodyHandlers.ofByteArray(), insufficientCapacity));\n+        BodyHandler<byte[]> handler = responseInfo -> {\n+            verifyHeaders(responseInfo.headers());\n+            return BodySubscribers.limiting(BodySubscribers.ofByteArray(), insufficientCapacity);\n+        };\n+        var exception = assertThrows(IOException.class, () -> pair.request(handler, insufficientCapacity));\n@@ -213,0 +226,1 @@\n+        verifyHeaders(response.headers());\n@@ -229,0 +243,5 @@\n+    private static void verifyHeaders(HttpHeaders responseHeaders) {\n+        List<String> responseHeaderValues = responseHeaders.allValues(RESPONSE_HEADER_NAME);\n+        assertEquals(List.of(RESPONSE_HEADER_VALUE), responseHeaderValues);\n+    }\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpResponseLimitingTest.java","additions":22,"deletions":3,"binary":false,"changes":25,"status":"modified"}]}