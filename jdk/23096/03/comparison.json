{"files":[{"patch":"@@ -54,0 +54,1 @@\n+import jdk.internal.net.http.LimitingSubscriber;\n@@ -751,0 +752,28 @@\n+\n+        \/**\n+         * {@return a {@code BodyHandler} limiting the number of bytes consumed\n+         * and passed to the given downstream {@code BodyHandler}}\n+         * <p>\n+         * If the number of bytes received exceeds the maximum number of bytes\n+         * desired as indicated by the given {@code capacity},\n+         * {@link BodySubscriber#onError(Throwable) onError} is called on the\n+         * downstream {@code BodySubscriber} with an {@link IOException}\n+         * indicating that the capacity is exceeded, and the upstream\n+         * subscription is cancelled.\n+         *\n+         * @param downstreamHandler the downstream handler to pass received data to\n+         * @param capacity the maximum number of bytes that are allowed\n+         * @throws IllegalArgumentException if {@code capacity < 0}\n+         * @since 25\n+         *\/\n+        public static <T> BodyHandler<T> limiting(BodyHandler<T> downstreamHandler, long capacity) {\n+            Objects.requireNonNull(downstreamHandler, \"downstreamHandler\");\n+            if (capacity < 0) {\n+                throw new IllegalArgumentException(\"was expecting \\\"capacity >= 0\\\", found: \" + capacity);\n+            }\n+            return responseInfo -> {\n+                BodySubscriber<T> downstreamSubscriber = downstreamHandler.apply(responseInfo);\n+                return BodySubscribers.limiting(downstreamSubscriber, capacity);\n+            };\n+        }\n+\n@@ -1353,0 +1382,25 @@\n+\n+        \/**\n+         * {@return a {@code BodySubscriber} limiting the number of bytes\n+         * consumed and passed to the given downstream {@code BodySubscriber}}\n+         * <p>\n+         * If the number of bytes received exceeds the maximum number of bytes\n+         * desired as indicated by the given {@code capacity},\n+         * {@link BodySubscriber#onError(Throwable) onError} is called on the\n+         * downstream {@code BodySubscriber} with an {@link IOException}\n+         * indicating that the capacity is exceeded, and the upstream\n+         * subscription is cancelled.\n+         *\n+         * @param downstreamSubscriber the downstream subscriber to pass received data to\n+         * @param capacity the maximum number of bytes that are allowed\n+         * @throws IllegalArgumentException if {@code capacity < 0}\n+         * @since 25\n+         *\/\n+        public static <T> BodySubscriber<T> limiting(BodySubscriber<T> downstreamSubscriber, long capacity) {\n+            Objects.requireNonNull(downstreamSubscriber, \"downstreamSubscriber\");\n+            if (capacity < 0) {\n+                throw new IllegalArgumentException(\"was expecting \\\"capacity >= 0\\\", found: \" + capacity);\n+            }\n+            return new LimitingSubscriber<>(downstreamSubscriber, capacity);\n+        }\n+\n@@ -1354,0 +1408,1 @@\n+\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpResponse.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -0,0 +1,159 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.net.http;\n+\n+import jdk.internal.net.http.ResponseSubscribers.TrustedSubscriber;\n+import jdk.internal.net.http.common.Utils;\n+\n+import java.io.IOException;\n+import java.net.http.HttpResponse.BodySubscriber;\n+import java.nio.Buffer;\n+import java.nio.ByteBuffer;\n+import java.util.List;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Subscription;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+\/**\n+ * A subscriber limiting the maximum number of bytes that are allowed to be consumed by a downstream subscriber.\n+ *\n+ * @param <T> the response type\n+ *\/\n+public final class LimitingSubscriber<T> implements TrustedSubscriber<T> {\n+\n+    private final BodySubscriber<T> downstreamSubscriber;\n+\n+    private final long capacity;\n+\n+    private final AtomicReference<State> stateRef = new AtomicReference<>();\n+\n+    private final AtomicLong lengthRef = new AtomicLong();\n+\n+    private interface State {\n+\n+        enum Terminated implements State { INSTANCE }\n+\n+        record Subscribed(Subscription subscription) implements State {}\n+\n+    }\n+\n+    \/**\n+     * @param downstreamSubscriber the downstream subscriber to pass received data to\n+     * @param capacity the maximum number of bytes that are allowed\n+     * @throws IllegalArgumentException if {@code capacity < 0}\n+     *\/\n+    public LimitingSubscriber(BodySubscriber<T> downstreamSubscriber, long capacity) {\n+        if (capacity < 0) {\n+            throw new IllegalArgumentException(\"was expecting \\\"capacity >= 0\\\", found: \" + capacity);\n+        }\n+        this.downstreamSubscriber = requireNonNull(downstreamSubscriber, \"downstreamSubscriber\");\n+        this.capacity = capacity;\n+    }\n+\n+    @Override\n+    public void onSubscribe(Subscription subscription) {\n+        requireNonNull(subscription, \"subscription\");\n+        boolean subscribed = stateRef.compareAndSet(null, new State.Subscribed(subscription));\n+        if (!subscribed) {\n+            subscription.cancel();\n+        } else {\n+            downstreamSubscriber.onSubscribe(subscription);\n+        }\n+    }\n+\n+    @Override\n+    public void onNext(List<ByteBuffer> buffers) {\n+\n+        \/\/ Check arguments\n+        requireNonNull(buffers, \"buffers\");\n+        assert Utils.hasRemaining(buffers);\n+\n+        \/\/ Short-circuit if not subscribed\n+        if (!(stateRef.get() instanceof State.Subscribed subscribed)) {\n+            return;\n+        }\n+\n+        \/\/ See if we may consume the input\n+        boolean lengthAllocated = allocateLength(buffers);\n+        if (lengthAllocated) {\n+            downstreamSubscriber.onNext(buffers);\n+        }\n+\n+        \/\/ Otherwise, trigger failure\n+        else {\n+            boolean terminated = stateRef.compareAndSet(subscribed, State.Terminated.INSTANCE);\n+            if (terminated) {\n+                downstreamSubscriber.onError(new IOException(\n+                        \"the maximum number of bytes that are allowed to be consumed is exceeded\"));\n+                subscribed.subscription.cancel();\n+            }\n+        }\n+\n+    }\n+\n+    private boolean allocateLength(List<ByteBuffer> buffers) {\n+        long bufferLength = buffers.stream().mapToLong(Buffer::remaining).sum();\n+        while (true) {\n+            long length = lengthRef.get();\n+            long nextLength = Math.addExact(length, bufferLength);\n+            if (nextLength > capacity) {\n+                return false;\n+            }\n+            if (lengthRef.compareAndSet(length, nextLength)) {\n+                return true;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void onError(Throwable throwable) {\n+        requireNonNull(throwable, \"throwable\");\n+        if (terminate()) {\n+            downstreamSubscriber.onError(throwable);\n+        }\n+    }\n+\n+    @Override\n+    public void onComplete() {\n+        if (terminate()) {\n+            downstreamSubscriber.onComplete();\n+        }\n+    }\n+\n+    private boolean terminate() {\n+        return stateRef.get() instanceof State.Subscribed subscribed &&\n+                stateRef.compareAndSet(subscribed, State.Terminated.INSTANCE);\n+    }\n+\n+    @Override\n+    public CompletionStage<T> getBody() {\n+        return downstreamSubscriber.getBody();\n+    }\n+\n+}\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/LimitingSubscriber.java","additions":159,"deletions":0,"binary":false,"changes":159,"status":"added"},{"patch":"@@ -0,0 +1,275 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8328919\n+ * @summary verifies `limiting()` behaviour in `HttpResponse.Body{Handlers,Subscribers}`\n+ * @library \/test\/lib\n+ * @run junit HttpResponseLimitingTest\n+ *\/\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.UncheckedIOException;\n+import java.net.InetAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.net.http.HttpResponse.BodyHandler;\n+import java.net.http.HttpResponse.BodyHandlers;\n+import java.net.http.HttpResponse.BodySubscriber;\n+import java.net.http.HttpResponse.BodySubscribers;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Subscription;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Arrays.copyOfRange;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+class HttpResponseLimitingTest {\n+\n+    private static final Charset CHARSET = StandardCharsets.UTF_8;\n+\n+    private static final HttpServer SERVER = new HttpServer();\n+\n+    private static final HttpRequest REQUEST = HttpRequest\n+            .newBuilder(URI.create(\"http:\/\/localhost:\" + SERVER.socket.getLocalPort()))\n+            .timeout(Duration.ofSeconds(5))\n+            .build();\n+\n+    private static final HttpClient CLIENT = HttpClient\n+            .newBuilder()\n+            .connectTimeout(Duration.ofSeconds(5))\n+            .build();\n+\n+    @AfterAll\n+    static void tearDown() throws Exception {\n+        CLIENT.close();\n+        SERVER.close();\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"sufficientCapacities\")\n+    void testSuccessOnSufficientCapacity(long sufficientCapacity) throws Exception {\n+        BodyHandler<byte[]> handler =\n+                BodyHandlers.limiting(BodyHandlers.ofByteArray(), sufficientCapacity);\n+        HttpResponse<byte[]> response = CLIENT.send(REQUEST, handler);\n+        assertArrayEquals(HttpServer.RESPONSE_BODY, response.body());\n+    }\n+\n+    static long[] sufficientCapacities() {\n+        return new long[]{Long.MAX_VALUE, HttpServer.RESPONSE_BODY.length};\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"insufficientCapacities\")\n+    void testFailureOnInsufficientCapacity(long insufficientCapacity) {\n+        assertThrows(\n+                IOException.class,\n+                () -> {\n+                    BodyHandler<byte[]> handler =\n+                            BodyHandlers.limiting(BodyHandlers.ofByteArray(), insufficientCapacity);\n+                    CLIENT.send(REQUEST, handler);\n+                },\n+                \"the maximum number of bytes that are allowed to be consumed is exceeded\");\n+    }\n+\n+    static long[] insufficientCapacities() {\n+        return new long[]{0, HttpServer.RESPONSE_BODY.length - 1};\n+    }\n+\n+    @Test\n+    void testSubscriberForCompleteConsumption() {\n+\n+        \/\/ Create the subscriber (with sufficient capacity)\n+        ObserverSubscriber downstreamSubscriber = new ObserverSubscriber();\n+        int sufficientCapacity = HttpServer.RESPONSE_BODY.length;\n+        BodySubscriber<String> subscriber = BodySubscribers.limiting(downstreamSubscriber, sufficientCapacity);\n+\n+        \/\/ Emit values\n+        subscriber.onSubscribe(DummySubscription.INSTANCE);\n+        byte[] responseBodyPart1 = {HttpServer.RESPONSE_BODY[0]};\n+        byte[] responseBodyPart2 = copyOfRange(HttpServer.RESPONSE_BODY, 1, HttpServer.RESPONSE_BODY.length);\n+        List<ByteBuffer> buffers = toByteBuffers(responseBodyPart1, responseBodyPart2);\n+        subscriber.onNext(buffers);\n+\n+        \/\/ Verify the downstream propagation\n+        assertSame(buffers, downstreamSubscriber.lastBuffers);\n+        assertNull(downstreamSubscriber.lastThrowable);\n+        assertFalse(downstreamSubscriber.completed);\n+\n+    }\n+\n+    @Test\n+    void testSubscriberForFailureOnExcess() {\n+\n+        \/\/ Create the subscriber (with insufficient capacity)\n+        ObserverSubscriber downstreamSubscriber = new ObserverSubscriber();\n+        int insufficientCapacity = 2;\n+        BodySubscriber<String> subscriber = BodySubscribers.limiting(downstreamSubscriber, insufficientCapacity);\n+\n+        \/\/ Emit values\n+        subscriber.onSubscribe(DummySubscription.INSTANCE);\n+        byte[] responseBodyPart1 = {HttpServer.RESPONSE_BODY[0]};\n+        byte[] responseBodyPart2 = copyOfRange(HttpServer.RESPONSE_BODY, 1, HttpServer.RESPONSE_BODY.length);\n+        List<ByteBuffer> buffers = toByteBuffers(responseBodyPart1, responseBodyPart2);\n+        subscriber.onNext(buffers);\n+\n+        \/\/ Verify the downstream propagation\n+        assertNull(downstreamSubscriber.lastBuffers);\n+        assertNotNull(downstreamSubscriber.lastThrowable);\n+        assertEquals(\n+                \"the maximum number of bytes that are allowed to be consumed is exceeded\",\n+                downstreamSubscriber.lastThrowable.getMessage());\n+        assertFalse(downstreamSubscriber.completed);\n+\n+    }\n+\n+    private static List<ByteBuffer> toByteBuffers(byte[]... buffers) {\n+        return Arrays.stream(buffers).map(ByteBuffer::wrap).collect(Collectors.toList());\n+    }\n+\n+    \/**\n+     * An HTTP server always returning a fixed response containing a non-empty body.\n+     *\/\n+    private static final class HttpServer implements Runnable, AutoCloseable {\n+\n+        private static final byte[] RESPONSE_BODY = \"random non-empty body\".getBytes(CHARSET);\n+\n+        private static final byte[] RESPONSE = (\n+                \"HTTP\/1.2 200 OK\\r\\n\" +\n+                        \"Content-Length: \" + RESPONSE_BODY.length + \"\\r\\n\" +\n+                        \"\\r\\n\" +\n+                        new String(RESPONSE_BODY, CHARSET))\n+                .getBytes(CHARSET);\n+\n+        private final ServerSocket socket;\n+\n+        private final Thread thread;\n+\n+        private HttpServer() {\n+            try {\n+                this.socket = new ServerSocket(0, 0, InetAddress.getLoopbackAddress());\n+            } catch (IOException exception) {\n+                throw new UncheckedIOException(exception);\n+            }\n+            this.thread = new Thread(this);\n+            thread.setDaemon(true);     \/\/ Avoid blocking JVM exit\n+            thread.start();\n+        }\n+\n+        @Override\n+        public void run() {\n+            while (!Thread.currentThread().isInterrupted()) {\n+                try (Socket clientSocket = socket.accept();\n+                     OutputStream outputStream = clientSocket.getOutputStream()) {\n+                    outputStream.write(RESPONSE);\n+                } catch (IOException _) {\n+                    \/\/ Do nothing\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public void close() throws Exception {\n+            socket.close();\n+            thread.interrupt();\n+        }\n+\n+    }\n+\n+    private static final class ObserverSubscriber implements BodySubscriber<String> {\n+\n+        private List<ByteBuffer> lastBuffers;\n+\n+        private Throwable lastThrowable;\n+\n+        private boolean completed;\n+\n+        @Override\n+        public CompletionStage<String> getBody() {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            subscription.request(Long.MAX_VALUE);\n+        }\n+\n+        @Override\n+        public void onNext(List<ByteBuffer> buffers) {\n+            lastBuffers = buffers;\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable) {\n+            lastThrowable = throwable;\n+        }\n+\n+        @Override\n+        public void onComplete() {\n+            completed = true;\n+        }\n+\n+    }\n+\n+    private enum DummySubscription implements Subscription {\n+\n+        INSTANCE;\n+\n+        @Override\n+        public void request(long n) {\n+            \/\/ Do nothing\n+        }\n+\n+        @Override\n+        public void cancel() {\n+            \/\/ Do nothing\n+        }\n+\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpResponseLimitingTest.java","additions":275,"deletions":0,"binary":false,"changes":275,"status":"added"}]}