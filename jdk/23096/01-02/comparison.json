{"files":[{"patch":"@@ -754,1 +754,9 @@\n-         * {@return a handler limiting the number of bytes consumed and passed to the given downstream}\n+         * {@return a {@code BodyHandler} limiting the number of bytes consumed\n+         * and passed to the given downstream {@code BodyHandler}}\n+         * <p>\n+         * If the number of bytes received exceeds the maximum number of bytes\n+         * desired as indicated by the given {@code capacity},\n+         * {@link BodySubscriber#onError(Throwable) onError} is called on the\n+         * downstream {@code BodySubscriber} with an {@link IOException}\n+         * indicating that the capacity is exceeded, and the upstream\n+         * subscription is cancelled.\n@@ -758,1 +766,0 @@\n-         * @param discardExcess if {@code true}, excessive input will be discarded; otherwise, it will throw an exception\n@@ -762,4 +769,1 @@\n-        public static <T> BodyHandler<T> limiting(\n-                BodyHandler<T> downstreamHandler,\n-                long capacity,\n-                boolean discardExcess) {\n+        public static <T> BodyHandler<T> limiting(BodyHandler<T> downstreamHandler, long capacity) {\n@@ -772,1 +776,1 @@\n-                return BodySubscribers.limiting(downstreamSubscriber, capacity, discardExcess);\n+                return BodySubscribers.limiting(downstreamSubscriber, capacity);\n@@ -1380,1 +1384,9 @@\n-         * {@return a subscriber limiting the number of bytes consumed and passed to the given downstream}\n+         * {@return a {@code BodySubscriber} limiting the number of bytes\n+         * consumed and passed to the given downstream {@code BodySubscriber}}\n+         * <p>\n+         * If the number of bytes received exceeds the maximum number of bytes\n+         * desired as indicated by the given {@code capacity},\n+         * {@link BodySubscriber#onError(Throwable) onError} is called on the\n+         * downstream {@code BodySubscriber} with an {@link IOException}\n+         * indicating that the capacity is exceeded, and the upstream\n+         * subscription is cancelled.\n@@ -1384,1 +1396,0 @@\n-         * @param discardExcess if {@code true}, excessive input will be discarded; otherwise, it will throw an exception\n@@ -1388,4 +1399,1 @@\n-        public static <T> BodySubscriber<T> limiting(\n-                BodySubscriber<T> downstreamSubscriber,\n-                long capacity,\n-                boolean discardExcess) {\n+        public static <T> BodySubscriber<T> limiting(BodySubscriber<T> downstreamSubscriber, long capacity) {\n@@ -1393,1 +1401,1 @@\n-            return new LimitingSubscriber<>(downstreamSubscriber, capacity, discardExcess);\n+            return new LimitingSubscriber<>(downstreamSubscriber, capacity);\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpResponse.java","additions":22,"deletions":14,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.io.IOException;\n@@ -34,1 +35,0 @@\n-import java.util.ArrayList;\n@@ -53,3 +53,1 @@\n-    private final boolean discardExcess;\n-\n-    private final AtomicReference<Subscription> subscriptionRef = new AtomicReference<>();\n+    private final AtomicReference<State> stateRef = new AtomicReference<>();\n@@ -59,0 +57,8 @@\n+    private interface State {\n+\n+        enum Terminated implements State { INSTANCE }\n+\n+        record Subscribed(Subscription subscription) implements State {}\n+\n+    }\n+\n@@ -62,1 +68,0 @@\n-     * @param discardExcess if {@code true}, excessive input will be discarded; otherwise, it will throw an exception\n@@ -65,1 +70,1 @@\n-    public LimitingSubscriber(BodySubscriber<T> downstreamSubscriber, long capacity, boolean discardExcess) {\n+    public LimitingSubscriber(BodySubscriber<T> downstreamSubscriber, long capacity) {\n@@ -71,1 +76,0 @@\n-        this.discardExcess = discardExcess;\n@@ -77,2 +81,2 @@\n-        boolean alreadySubscribed = !subscriptionRef.compareAndSet(null, subscription);\n-        if (alreadySubscribed) {\n+        boolean subscribed = stateRef.compareAndSet(null, new State.Subscribed(subscription));\n+        if (!subscribed) {\n@@ -81,1 +85,0 @@\n-            length = 0;\n@@ -93,6 +96,3 @@\n-        \/\/ See if we can consume the input completely\n-        boolean lengthAllocated = allocateLength(buffers);\n-        Subscription subscription = subscriptionRef.get();\n-        assert subscription != null;\n-        if (lengthAllocated) {\n-            downstreamSubscriber.onNext(buffers);\n+        \/\/ Short-circuit if not subscribed\n+        if (!(stateRef.get() instanceof State.Subscribed subscribed)) {\n+            return;\n@@ -101,8 +101,3 @@\n-        \/\/ See if we can consume the input partially\n-        else if (discardExcess) {\n-            List<ByteBuffer> retainedBuffers = removeExcess(buffers);\n-            if (!retainedBuffers.isEmpty()) {\n-                downstreamSubscriber.onNext(retainedBuffers);\n-            }\n-            downstreamSubscriber.onComplete();\n-            subscription.cancel();\n+        \/\/ See if we may consume the input\n+        if (allocateLength(buffers)) {\n+            downstreamSubscriber.onNext(buffers);\n@@ -111,3 +106,3 @@\n-        \/\/ Partial consumption is not allowed, trigger failure\n-        else {\n-            downstreamSubscriber.onError(new IllegalStateException(\n+        \/\/ Otherwise, trigger failure\n+        else if (stateRef.compareAndSet(subscribed, State.Terminated.INSTANCE)) {\n+            downstreamSubscriber.onError(new IOException(\n@@ -115,1 +110,1 @@\n-            subscription.cancel();\n+            subscribed.subscription.cancel();\n@@ -130,23 +125,0 @@\n-    private List<ByteBuffer> removeExcess(List<ByteBuffer> buffers) {\n-        List<ByteBuffer> retainedBuffers = new ArrayList<>(buffers.size());\n-        long remaining = capacity - length;\n-        for (ByteBuffer buffer : buffers) {\n-            \/\/ No capacity left; stop\n-            if (remaining < 1) {\n-                break;\n-            }\n-            \/\/ Buffer fits as is; keep it\n-            else if (buffer.remaining() <= remaining) {\n-                retainedBuffers.add(buffer);\n-                remaining -= buffer.remaining();\n-            }\n-            \/\/ There is capacity, but the buffer doesn't fit; truncate and keep it\n-            else {\n-                buffer.limit(Math.toIntExact(Math.addExact(buffer.position(), remaining)));\n-                retainedBuffers.add(buffer);\n-                remaining = 0;\n-            }\n-        }\n-        return retainedBuffers;\n-    }\n-\n@@ -156,1 +128,3 @@\n-        downstreamSubscriber.onError(throwable);\n+        if (terminate()) {\n+            downstreamSubscriber.onError(throwable);\n+        }\n@@ -161,1 +135,8 @@\n-        downstreamSubscriber.onComplete();\n+        if (terminate()) {\n+            downstreamSubscriber.onComplete();\n+        }\n+    }\n+\n+    private boolean terminate() {\n+        return stateRef.get() instanceof State.Subscribed subscribed &&\n+                stateRef.compareAndSet(subscribed, State.Terminated.INSTANCE);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/LimitingSubscriber.java","additions":34,"deletions":53,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @summary verifies `BodyHandlers.limiting()` behaviour\n+ * @summary verifies `limiting()` behaviour in `HttpResponse.Body{Handlers,Subscribers}`\n@@ -71,1 +71,0 @@\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -99,1 +98,1 @@\n-                BodyHandlers.limiting(BodyHandlers.ofByteArray(), sufficientCapacity, false);\n+                BodyHandlers.limiting(BodyHandlers.ofByteArray(), sufficientCapacity);\n@@ -115,1 +114,1 @@\n-                            BodyHandlers.limiting(BodyHandlers.ofByteArray(), insufficientCapacity, false);\n+                            BodyHandlers.limiting(BodyHandlers.ofByteArray(), insufficientCapacity);\n@@ -121,11 +120,0 @@\n-    @ParameterizedTest\n-    @MethodSource(\"insufficientCapacities\")\n-    void testTruncationOnInsufficientCapacity(long insufficientCapacity) throws Exception {\n-        BodyHandler<byte[]> handler =\n-                BodyHandlers.limiting(BodyHandlers.ofByteArray(), insufficientCapacity, true);\n-        HttpResponse<byte[]> response = CLIENT.send(REQUEST, handler);\n-        byte[] expectedResponseBody = new byte[(int) insufficientCapacity];\n-        System.arraycopy(HttpServer.RESPONSE_BODY, 0, expectedResponseBody, 0, expectedResponseBody.length);\n-        assertArrayEquals(expectedResponseBody, response.body());\n-    }\n-\n@@ -142,1 +130,1 @@\n-        BodySubscriber<String> subscriber = BodySubscribers.limiting(downstreamSubscriber, sufficientCapacity, false);\n+        BodySubscriber<String> subscriber = BodySubscribers.limiting(downstreamSubscriber, sufficientCapacity);\n@@ -158,28 +146,0 @@\n-    @Test\n-    void testSubscriberForTruncationOnExcess() {\n-\n-        \/\/ Create the subscriber (with insufficient capacity)\n-        ObserverSubscriber downstreamSubscriber = new ObserverSubscriber();\n-        int insufficientCapacity = 4;\n-        BodySubscriber<String> subscriber = BodySubscribers.limiting(downstreamSubscriber, insufficientCapacity, true);\n-\n-        \/\/ Emit values\n-        subscriber.onSubscribe(DummySubscription.INSTANCE);\n-        byte[] responseBodyPart1 = {HttpServer.RESPONSE_BODY[0]};\n-        byte[] responseBodyPart2 = {HttpServer.RESPONSE_BODY[1], HttpServer.RESPONSE_BODY[2]};\n-        byte[] responseBodyPart3 = copyOfRange(HttpServer.RESPONSE_BODY, 3, HttpServer.RESPONSE_BODY.length);\n-        List<ByteBuffer> buffers = toByteBuffers(responseBodyPart1, responseBodyPart2, responseBodyPart3);\n-        subscriber.onNext(buffers);\n-\n-        \/\/ Verify the downstream propagation\n-        assertNotNull(downstreamSubscriber.lastBuffers);\n-        List<ByteBuffer> expectedBuffers = toByteBuffers(\n-                responseBodyPart1,\n-                responseBodyPart2,\n-                copyOfRange(HttpServer.RESPONSE_BODY, 3, 4));\n-        assertEquals(expectedBuffers, downstreamSubscriber.lastBuffers);\n-        assertNull(downstreamSubscriber.lastThrowable);\n-        assertTrue(downstreamSubscriber.completed);\n-\n-    }\n-\n@@ -192,1 +152,1 @@\n-        BodySubscriber<String> subscriber = BodySubscribers.limiting(downstreamSubscriber, insufficientCapacity, false);\n+        BodySubscriber<String> subscriber = BodySubscribers.limiting(downstreamSubscriber, insufficientCapacity);\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpResponseLimitingTest.java","additions":5,"deletions":45,"binary":false,"changes":50,"status":"modified"}]}