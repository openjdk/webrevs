{"files":[{"patch":"@@ -1,1 +1,1 @@\n-\/*\n+g\/*\n@@ -81,4 +81,0 @@\n-typedef __uint128_t u128;\n-typedef uint64_t u64;\n-typedef uint32_t u32;\n-\n@@ -7258,0 +7254,1 @@\n+\n@@ -7310,1 +7307,1 @@\n-typedef AbstractRegSet<FloatRegister> vRegSet;\n+  typedef AbstractRegSet<FloatRegister> vRegSet;\n@@ -7312,6 +7309,6 @@\n-template <typename RegType>\n-class Regs {\n-public:\n-  RegType _regs[5];\n-  Regs(RegSetIterator<RegType> &it, int n) {\n-    for (int i = 0; i < n; i++) {\n+  template <typename RegType>\n+  class Regs {\n+  public:\n+    RegType _regs[5];\n+    Regs(RegSetIterator<RegType> &it, int n) {\n+      for (int i = 0; i < n; i++) {\n@@ -7319,0 +7316,4 @@\n+      }\n+    }\n+    Regs(RegType R0, RegType R1, RegType R2) {\n+      _regs[0] = R0, _regs[1] = R1, _regs[2] = R2;\n@@ -7320,4 +7321,0 @@\n-  }\n-  Regs(RegType R0, RegType R1, RegType R2) {\n-    _regs[0] = R0, _regs[1] = R1, _regs[2] = R2;\n-  }\n@@ -7325,2 +7322,2 @@\n-  RegType operator[](int n) { return _regs[n]; }\n-  RegType *operator *() { return _regs; }\n+    RegType operator[](int n) { return _regs[n]; }\n+    RegType *operator *() { return _regs; }\n@@ -7328,2 +7325,2 @@\n-  operator RegType*() { return _regs; }\n-};\n+    operator RegType*() { return _regs; }\n+  };\n@@ -7331,5 +7328,5 @@\n-class RegPairs {\n-public:\n-  RegPair _reg_pairs[3];\n-  RegPairs(RegSetIterator<Register> &it, int n) {\n-    for (int i = 0; i < n; i++) {\n+  class RegPairs {\n+  public:\n+    RegPair _reg_pairs[3];\n+    RegPairs(RegSetIterator<Register> &it, int n) {\n+      for (int i = 0; i < n; i++) {\n@@ -7338,0 +7335,1 @@\n+      }\n@@ -7339,3 +7337,2 @@\n-  }\n-  operator RegPair*() { return _reg_pairs; }\n-};\n+    operator RegPair*() { return _reg_pairs; }\n+  };\n@@ -7343,2 +7340,2 @@\n-typedef Regs<Register> CoreRegs;\n-typedef Regs<FloatRegister> VectorRegs;\n+  typedef Regs<Register> CoreRegs;\n+  typedef Regs<FloatRegister> VectorRegs;\n@@ -7346,2 +7343,2 @@\n-address generate_poly1305_processBlocks2() {\n-  static constexpr int POLY1305_BLOCK_LENGTH = 16;\n+  address generate_poly1305_processBlocks2() {\n+    static constexpr int POLY1305_BLOCK_LENGTH = 16;\n@@ -7349,4 +7346,4 @@\n-  __ align(CodeEntryAlignment);\n-  StubCodeMark mark(this, \"StubRoutines\", \"poly1305_processBlocks2\");\n-  address start = __ pc();\n-  Label here;\n+    __ align(CodeEntryAlignment);\n+    StubCodeMark mark(this, \"StubRoutines\", \"poly1305_processBlocks2\");\n+    address start = __ pc();\n+    Label here;\n@@ -7354,4 +7351,4 @@\n-  \/\/ __ set_last_Java_frame(sp, rfp, lr, rscratch1);\n-  __ enter();\n-  RegSet callee_saved = RegSet::range(r19, r28);\n-  __ push(callee_saved, sp);\n+    \/\/ __ set_last_Java_frame(sp, rfp, lr, rscratch1);\n+    __ enter();\n+    RegSet callee_saved = RegSet::range(r19, r28);\n+    __ push(callee_saved, sp);\n@@ -7359,2 +7356,2 @@\n-  \/\/ Arguments\n-  const Register input_start = c_rarg0, length = c_rarg1, acc_start = c_rarg2, r_start = c_rarg3;\n+    \/\/ Arguments\n+    const Register input_start = c_rarg0, length = c_rarg1, acc_start = c_rarg2, r_start = c_rarg3;\n@@ -7362,2 +7359,2 @@\n-  auto regs = (RegSet::range(c_rarg4, r28) - r18_tls - rscratch1 - rscratch2 + lr).begin();\n-  auto vregs = (vRegSet::range(v0, v7) + vRegSet::range(v16, v31)).begin();\n+    auto regs = (RegSet::range(c_rarg4, r28) - r18_tls - rscratch1 - rscratch2 + lr).begin();\n+    auto vregs = (vRegSet::range(v0, v7) + vRegSet::range(v16, v31)).begin();\n@@ -7365,3 +7362,3 @@\n-  \/\/ Rn is the key, packed into three registers\n-  CoreRegs R(regs, 3);\n-  __ pack_26(R[0], R[1], R[2], r_start);\n+    \/\/ Rn is the key, packed into three registers\n+    CoreRegs R(regs, 3);\n+    __ pack_26(R[0], R[1], R[2], r_start);\n@@ -7369,2 +7366,2 @@\n-  \/\/ Sn is to be the sum of Un and the next block of data\n-  CoreRegs S0(regs, 3), S1(regs, 3);\n+    \/\/ Sn is to be the sum of Un and the next block of data\n+    CoreRegs S0(regs, 3), S1(regs, 3);\n@@ -7372,2 +7369,2 @@\n-  \/\/ Un is the current checksum\n-  RegPairs u0(regs, 3), u1(regs, 3);\n+    \/\/ Un is the current checksum\n+    RegPairs u0(regs, 3), u1(regs, 3);\n@@ -7375,3 +7372,3 @@\n-  Register RR2 = *regs++;\n-  __ lsl(RR2, R[2], 26);\n-  __ add(RR2, RR2, RR2, __ LSL, 2);\n+    Register RR2 = *regs++;\n+    __ lsl(RR2, R[2], 26);\n+    __ add(RR2, RR2, RR2, __ LSL, 2);\n@@ -7379,1 +7376,1 @@\n-  int BLOCKS_PER_ITERATION = 6;\n+    int BLOCKS_PER_ITERATION = 6;\n@@ -7381,6 +7378,6 @@\n-  \/\/ Just one block?\n-  Label SMALL;\n-  {\n-    Label LARGE;\n-    __ subs(zr, length, POLY1305_BLOCK_LENGTH * BLOCKS_PER_ITERATION * 2);\n-    __ br(__ GT, LARGE);\n+    \/\/ Just one block?\n+    Label SMALL;\n+    {\n+      Label LARGE;\n+      __ subs(zr, length, POLY1305_BLOCK_LENGTH * BLOCKS_PER_ITERATION * 2);\n+      __ br(__ GT, LARGE);\n@@ -7388,3 +7385,3 @@\n-    \/\/ Load the initial state\n-    __ pack_26(u0[0]._lo, u0[1]._lo, u0[2]._lo, acc_start);\n-    __ b(SMALL);\n+      \/\/ Load the initial state\n+      __ pack_26(u0[0]._lo, u0[1]._lo, u0[2]._lo, acc_start);\n+      __ b(SMALL);\n@@ -7392,2 +7389,2 @@\n-    __ bind(LARGE);\n-  }\n+      __ bind(LARGE);\n+    }\n@@ -7395,5 +7392,5 @@\n-  \/\/ We're going to use R**6\n-  {\n-    \/\/ The low halves of u0 and u1\n-    CoreRegs u0_lo(u0[0]._lo, u0[1]._lo, u0[2]._lo);\n-    CoreRegs u1_lo(u1[0]._lo, u1[1]._lo, u1[2]._lo);\n+    \/\/ We're going to use R**6\n+    {\n+      \/\/ The low halves of u0 and u1\n+      CoreRegs u0_lo(u0[0]._lo, u0[1]._lo, u0[2]._lo);\n+      CoreRegs u1_lo(u1[0]._lo, u1[1]._lo, u1[2]._lo);\n@@ -7401,2 +7398,2 @@\n-    __ poly1305_field_multiply(u0, R, R, RR2, regs);\n-    \/\/ u0_lo = R**2\n+      __ poly1305_field_multiply(u0, R, R, RR2, regs);\n+      \/\/ u0_lo = R**2\n@@ -7404,2 +7401,2 @@\n-    __ poly1305_field_multiply(u1, u0_lo, R, RR2, regs);\n-    \/\/ u1_lo = R**3\n+      __ poly1305_field_multiply(u1, u0_lo, R, RR2, regs);\n+      \/\/ u1_lo = R**3\n@@ -7407,4 +7404,4 @@\n-    \/\/ RR2 = 5 * (R[2] << 26)\n-    __ copy_3_regs(R, u1_lo);\n-    __ lsl(RR2, R[2], 26);\n-    __ add(RR2, RR2, RR2, __ LSL, 2);\n+      \/\/ RR2 = 5 * (R[2] << 26)\n+      __ copy_3_regs(R, u1_lo);\n+      __ lsl(RR2, R[2], 26);\n+      __ add(RR2, RR2, RR2, __ LSL, 2);\n@@ -7412,2 +7409,2 @@\n-    __ poly1305_field_multiply(u1, R, R, RR2, regs);\n-    \/\/ u1_lo = R**6\n+      __ poly1305_field_multiply(u1, R, R, RR2, regs);\n+      \/\/ u1_lo = R**6\n@@ -7415,4 +7412,4 @@\n-    __ copy_3_regs(R, u1_lo);\n-    __ lsl(RR2, R[2], 26);\n-    __ add(RR2, RR2, RR2, __ LSL, 2);\n-  }\n+      __ copy_3_regs(R, u1_lo);\n+      __ lsl(RR2, R[2], 26);\n+      __ add(RR2, RR2, RR2, __ LSL, 2);\n+    }\n@@ -7420,2 +7417,2 @@\n-  \/\/ Load the initial state\n-  __ pack_26(u0[0]._lo, u0[1]._lo, u0[2]._lo, acc_start);\n+    \/\/ Load the initial state\n+    __ pack_26(u0[0]._lo, u0[1]._lo, u0[2]._lo, acc_start);\n@@ -7423,5 +7420,5 @@\n-  \/\/ u0 contains the initial state. Clear the others.\n-  for (int i = 0; i < 3; i++) {\n-    __ mov(u0[i]._hi, 0);\n-    __ mov(u1[i]._lo, 0); __ mov(u1[i]._hi, 0);\n-  }\n+    \/\/ u0 contains the initial state. Clear the others.\n+    for (int i = 0; i < 3; i++) {\n+      __ mov(u0[i]._hi, 0);\n+      __ mov(u1[i]._lo, 0); __ mov(u1[i]._hi, 0);\n+    }\n@@ -7429,20 +7426,4 @@\n-  VectorRegs v_u0(vregs, 5);\n-  VectorRegs v_s0(vregs, 3);\n-  VectorRegs v_u1(vregs, 5);\n-  VectorRegs v_s1(vregs, 3);\n-\n-  const FloatRegister zero = *vregs++;\n-\n-  __ movi(zero, __ T16B, 0);\n-\n-  \/\/ rr_v = r_v * 5\n-  VectorRegs r_v(vregs, 2);\n-  VectorRegs rr_v(vregs, 2);\n-  __ copy_3_regs_to_5_elements(r_v, R[0], R[1], R[2]);\n-  {\n-    FloatRegister vtmp = *vregs;\n-    __ shl(vtmp, __ T4S, r_v[0], 2);\n-    __ addv(rr_v[0], __ T4S, r_v[0], vtmp);\n-    __ shl(vtmp, __ T4S, r_v[1], 2);\n-    __ addv(rr_v[1], __ T4S, r_v[1], vtmp);\n-  }\n+    VectorRegs v_u0(vregs, 5);\n+    VectorRegs v_s0(vregs, 3);\n+    VectorRegs v_u1(vregs, 5);\n+    VectorRegs v_s1(vregs, 3);\n@@ -7450,4 +7431,1 @@\n-  for (int i = 0; i < 5; i++) {\n-    __ movi(v_u0[i], __ T16B, 0);\n-    __ movi(v_u1[i], __ T16B, 0);\n-  }\n+    const FloatRegister zero = *vregs++;\n@@ -7455,2 +7433,1 @@\n-  {\n-    Label DONE, LOOP;\n+    __ movi(zero, __ T16B, 0);\n@@ -7458,2 +7435,16 @@\n-    __ subsw(rscratch1, length, POLY1305_BLOCK_LENGTH * BLOCKS_PER_ITERATION * 2);\n-    __ br(Assembler::LT, DONE);\n+    \/\/ rr_v = r_v * 5\n+    VectorRegs r_v(vregs, 2);\n+    VectorRegs rr_v(vregs, 2);\n+    __ copy_3_regs_to_5_elements(r_v, R[0], R[1], R[2]);\n+    {\n+      FloatRegister vtmp = *vregs;\n+      __ shl(vtmp, __ T4S, r_v[0], 2);\n+      __ addv(rr_v[0], __ T4S, r_v[0], vtmp);\n+      __ shl(vtmp, __ T4S, r_v[1], 2);\n+      __ addv(rr_v[1], __ T4S, r_v[1], vtmp);\n+    }\n+\n+    for (int i = 0; i < 5; i++) {\n+      __ movi(v_u0[i], __ T16B, 0);\n+      __ movi(v_u1[i], __ T16B, 0);\n+    }\n@@ -7461,2 +7452,0 @@\n-    __ align(OptoLoopAlignment);\n-    __ bind(LOOP);\n@@ -7464,0 +7453,8 @@\n+      Label DONE, LOOP;\n+\n+      __ subsw(rscratch1, length, POLY1305_BLOCK_LENGTH * BLOCKS_PER_ITERATION * 2);\n+      __ br(Assembler::LT, DONE);\n+\n+      __ align(OptoLoopAlignment);\n+      __ bind(LOOP);\n+      {\n@@ -7509,5 +7506,1 @@\n-    }\n-\n-    __ subw(length, length, POLY1305_BLOCK_LENGTH * BLOCKS_PER_ITERATION);\n-    __ subsw(rscratch1, length, POLY1305_BLOCK_LENGTH * BLOCKS_PER_ITERATION * 2);\n-    __ br(Assembler::GE, LOOP);\n+      }\n@@ -7515,2 +7508,3 @@\n-    __ bind(DONE);\n-  }\n+      __ subw(length, length, POLY1305_BLOCK_LENGTH * BLOCKS_PER_ITERATION);\n+      __ subsw(rscratch1, length, POLY1305_BLOCK_LENGTH * BLOCKS_PER_ITERATION * 2);\n+      __ br(Assembler::GE, LOOP);\n@@ -7518,6 +7512,2 @@\n-  \/\/ Last six parallel blocks\n-  {\n-    \/\/ Load R**1\n-    __ pack_26(R[0], R[1], R[2], r_start);\n-    __ lsl(RR2, R[2], 26);\n-    __ add(RR2, RR2, RR2, __ LSL, 2);\n+      __ bind(DONE);\n+    }\n@@ -7525,35 +7515,42 @@\n-    __ poly1305_load(S0, input_start);\n-    __ poly1305_add(S0, u0);\n-    __ poly1305_field_multiply(u0, S0, R, RR2, regs);\n-\n-    __ poly1305_load(S0, input_start);\n-    __ poly1305_add(S0, u0);\n-    __ poly1305_add(S0, u1);\n-    __ poly1305_field_multiply(u0, S0, R, RR2, regs);\n-\n-    __ poly1305_load(S0, input_start);\n-    __ poly1305_add(S0, u0);\n-    __ poly1305_transfer(u1, v_u0, 0, *vregs);\n-    __ poly1305_add(S0, u1);\n-    __ poly1305_field_multiply(u0, S0, R, RR2, regs);\n-\n-    __ poly1305_load(S0, input_start);\n-    __ poly1305_add(S0, u0);\n-    __ poly1305_transfer(u1, v_u0, 1, *vregs);\n-    __ poly1305_add(S0, u1);\n-    __ poly1305_field_multiply(u0, S0, R, RR2, regs);\n-\n-    __ poly1305_load(S0, input_start);\n-    __ poly1305_add(S0, u0);\n-    __ poly1305_transfer(u1, v_u1, 0, *vregs);\n-    __ poly1305_add(S0, u1);\n-    __ poly1305_field_multiply(u0, S0, R, RR2, regs);\n-\n-    __ poly1305_load(S0, input_start);\n-    __ poly1305_add(S0, u0);\n-    __ poly1305_transfer(u1, v_u1, 1, *vregs);\n-    __ poly1305_add(S0, u1);\n-    __ poly1305_field_multiply(u0, S0, R, RR2, regs);\n-\n-    __ subw(length, length, POLY1305_BLOCK_LENGTH * BLOCKS_PER_ITERATION);\n-  }\n+    \/\/ Last six parallel blocks\n+    {\n+      \/\/ Load R**1\n+      __ pack_26(R[0], R[1], R[2], r_start);\n+      __ lsl(RR2, R[2], 26);\n+      __ add(RR2, RR2, RR2, __ LSL, 2);\n+\n+      __ poly1305_load(S0, input_start);\n+      __ poly1305_add(S0, u0);\n+      __ poly1305_field_multiply(u0, S0, R, RR2, regs);\n+\n+      __ poly1305_load(S0, input_start);\n+      __ poly1305_add(S0, u0);\n+      __ poly1305_add(S0, u1);\n+      __ poly1305_field_multiply(u0, S0, R, RR2, regs);\n+\n+      __ poly1305_load(S0, input_start);\n+      __ poly1305_add(S0, u0);\n+      __ poly1305_transfer(u1, v_u0, 0, *vregs);\n+      __ poly1305_add(S0, u1);\n+      __ poly1305_field_multiply(u0, S0, R, RR2, regs);\n+\n+      __ poly1305_load(S0, input_start);\n+      __ poly1305_add(S0, u0);\n+      __ poly1305_transfer(u1, v_u0, 1, *vregs);\n+      __ poly1305_add(S0, u1);\n+      __ poly1305_field_multiply(u0, S0, R, RR2, regs);\n+\n+      __ poly1305_load(S0, input_start);\n+      __ poly1305_add(S0, u0);\n+      __ poly1305_transfer(u1, v_u1, 0, *vregs);\n+      __ poly1305_add(S0, u1);\n+      __ poly1305_field_multiply(u0, S0, R, RR2, regs);\n+\n+      __ poly1305_load(S0, input_start);\n+      __ poly1305_add(S0, u0);\n+      __ poly1305_transfer(u1, v_u1, 1, *vregs);\n+      __ poly1305_add(S0, u1);\n+      __ poly1305_field_multiply(u0, S0, R, RR2, regs);\n+\n+      __ subw(length, length, POLY1305_BLOCK_LENGTH * BLOCKS_PER_ITERATION);\n+    }\n@@ -7561,4 +7558,4 @@\n-  \/\/ Maybe some last blocks\n-  __ bind(SMALL);\n-  {\n-    Label DONE, LOOP;\n+    \/\/ Maybe some last blocks\n+    __ bind(SMALL);\n+    {\n+      Label DONE, LOOP;\n@@ -7566,3 +7563,3 @@\n-    __ bind(LOOP);\n-    __ subsw(length, length, POLY1305_BLOCK_LENGTH);\n-    __ br(__ LT, DONE);\n+      __ bind(LOOP);\n+      __ subsw(length, length, POLY1305_BLOCK_LENGTH);\n+      __ br(__ LT, DONE);\n@@ -7570,2 +7567,2 @@\n-    __ poly1305_step(S0, u0, input_start);\n-    __ poly1305_field_multiply(u0, S0, R, RR2, regs);\n+      __ poly1305_step(S0, u0, input_start);\n+      __ poly1305_field_multiply(u0, S0, R, RR2, regs);\n@@ -7573,4 +7570,4 @@\n-    __ b(LOOP);\n-    __ bind(DONE);\n-  }\n-  __ poly1305_fully_reduce(S0, u0);\n+      __ b(LOOP);\n+      __ bind(DONE);\n+    }\n+    __ poly1305_fully_reduce(S0, u0);\n@@ -7578,4 +7575,4 @@\n-  \/\/ And store it all back\n-  __ ubfiz(rscratch1, S0[0], 0, 26);\n-  __ ubfx(rscratch2, S0[0], 26, 26);\n-  __ stp(rscratch1, rscratch2, Address(acc_start));\n+    \/\/ And store it all back\n+    __ ubfiz(rscratch1, S0[0], 0, 26);\n+    __ ubfx(rscratch2, S0[0], 26, 26);\n+    __ stp(rscratch1, rscratch2, Address(acc_start));\n@@ -7583,4 +7580,4 @@\n-  __ ubfx(rscratch1, S0[0], 52, 12);\n-  __ bfi(rscratch1, S0[1], 12, 14);\n-  __ ubfx(rscratch2, S0[1], 14, 26);\n-  __ stp(rscratch1, rscratch2, Address(acc_start, 2 * sizeof (jlong)));\n+    __ ubfx(rscratch1, S0[0], 52, 12);\n+    __ bfi(rscratch1, S0[1], 12, 14);\n+    __ ubfx(rscratch2, S0[1], 14, 26);\n+    __ stp(rscratch1, rscratch2, Address(acc_start, 2 * sizeof (jlong)));\n@@ -7588,2 +7585,2 @@\n-  __ extr(rscratch1, S0[2], S0[1], 40);\n-  __ str(rscratch1, Address(acc_start, 4 * sizeof (jlong)));\n+    __ extr(rscratch1, S0[2], S0[1], 40);\n+    __ str(rscratch1, Address(acc_start, 4 * sizeof (jlong)));\n@@ -7591,1 +7588,1 @@\n-  __ pop(callee_saved, sp);\n+    __ pop(callee_saved, sp);\n@@ -7593,2 +7590,2 @@\n-  __ leave();\n-  __ ret(lr);\n+    __ leave();\n+    __ ret(lr);\n@@ -7596,2 +7593,2 @@\n-  return start;\n-}\n+    return start;\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":195,"deletions":198,"binary":false,"changes":393,"status":"modified"}]}