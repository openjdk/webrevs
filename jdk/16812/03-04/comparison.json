{"files":[{"patch":"@@ -7315,1 +7315,1 @@\n-\t_regs[i] = *it++;\n+        _regs[i] = *it++;\n@@ -7333,2 +7333,2 @@\n-\tRegPair r(*it++, *it++);\n-\t_reg_pairs[i] = r;\n+        RegPair r(*it++, *it++);\n+        _reg_pairs[i] = r;\n@@ -7461,45 +7461,45 @@\n-\tconstexpr int COLS = 4;\n-\tAsmGenerator gen[COLS];\n-\n-\t__ poly1305_step(gen[0], S0, u0, input_start);\n-\t__ poly1305_field_multiply(gen[0], u0, S0, R, RR2, regs);\n-\n-\t__ poly1305_step(gen[1], S1, u1, input_start);\n-\t__ poly1305_field_multiply(gen[1], u1, S1, R, RR2, regs);\n-\n-\t__ poly1305_step_vec(gen[2], v_s0, v_u0, zero, input_start);\n-\t__ poly1305_field_multiply(gen[2], v_u0, v_s0, r_v, rr_v, zero,\n-\t\t\t\t   vregs.remaining());\n-\n-\t__ poly1305_step_vec(gen[3], v_s1, v_u1, zero, input_start);\n-\t__ poly1305_field_multiply(gen[3], v_u1, v_s1, r_v, rr_v, zero,\n-\t\t\t\t   vregs.remaining());\n-\n-\tAsmGenerator::Iterator it[COLS];\n-\tint len[COLS];\n-\n-\tint l_max = INT_MIN;\n-\tfor (int col = 0; col < COLS; col++) {\n-\t  it[col] = gen[col].iterator();\n-\t  len[col] = gen[col].length();\n-\t  l_max = MAX2(l_max, len[col]);\n-\t}\n-\n-\tint err[COLS];\n-\tfor (int col = 0; col < COLS; col++) {\n-\t  err[col] = 0;\n-\t}\n-\n-\tfor (int i = 0; i < l_max; i++) {\n-\t  for (int col = 0; col < COLS; col++) {\n-\t    err[col] -= len[col];\n-\t    if (err[col] < 0) {\n-\t      err[col] += l_max;\n-\t      (it[col]++)();\n-\t    }\n-\t  }\n-\t}\n-\n-\tfor (int col = 0; col < COLS; col++) {\n-\t  assert(*(it[col]) == nullptr, \"Make sure all generators are exhausted\");\n-\t}\n+        constexpr int COLS = 4;\n+        AsmGenerator gen[COLS];\n+\n+        __ poly1305_step(gen[0], S0, u0, input_start);\n+        __ poly1305_field_multiply(gen[0], u0, S0, R, RR2, regs);\n+\n+        __ poly1305_step(gen[1], S1, u1, input_start);\n+        __ poly1305_field_multiply(gen[1], u1, S1, R, RR2, regs);\n+\n+        __ poly1305_step_vec(gen[2], v_s0, v_u0, zero, input_start);\n+        __ poly1305_field_multiply(gen[2], v_u0, v_s0, r_v, rr_v, zero,\n+                                   vregs.remaining());\n+\n+        __ poly1305_step_vec(gen[3], v_s1, v_u1, zero, input_start);\n+        __ poly1305_field_multiply(gen[3], v_u1, v_s1, r_v, rr_v, zero,\n+                                   vregs.remaining());\n+\n+        AsmGenerator::Iterator it[COLS];\n+        int len[COLS];\n+\n+        int l_max = INT_MIN;\n+        for (int col = 0; col < COLS; col++) {\n+          it[col] = gen[col].iterator();\n+          len[col] = gen[col].length();\n+          l_max = MAX2(l_max, len[col]);\n+        }\n+\n+        int err[COLS];\n+        for (int col = 0; col < COLS; col++) {\n+          err[col] = 0;\n+        }\n+\n+        for (int i = 0; i < l_max; i++) {\n+          for (int col = 0; col < COLS; col++) {\n+            err[col] -= len[col];\n+            if (err[col] < 0) {\n+              err[col] += l_max;\n+              (it[col]++)();\n+            }\n+          }\n+        }\n+\n+        for (int col = 0; col < COLS; col++) {\n+          assert(*(it[col]) == nullptr, \"Make sure all generators are exhausted\");\n+        }\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":48,"deletions":48,"binary":false,"changes":96,"status":"modified"}]}