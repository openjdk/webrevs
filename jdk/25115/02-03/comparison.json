{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import jdk.jfr.internal.RemoveFields;\n@@ -37,0 +38,7 @@\n+@RemoveFields(\"duration\")\n+@StackFilter({\"jdk.internal.event.FinalFieldMutationEvent::offer\",\n+        \"java.lang.reflect.Field::postSetFinal\",\n+        \"java.lang.reflect.Field::setFinal\",\n+        \"java.lang.reflect.Field::checkAllowedToUnreflectFinalSetter\",\n+        \"java.lang.reflect.ReflectAccess::checkAllowedToUnreflectFinalSetter\",\n+        \"java.lang.invoke.MethodHandles$Lookup::unreflectField\"})\n@@ -47,1 +55,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/FinalFieldMutationEvent.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -123,1 +123,0 @@\n-      <setting name=\"threshold\">0 ms<\/setting>\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -123,1 +123,0 @@\n-      <setting name=\"threshold\">0 ms<\/setting>\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @modules jdk.jfr\/jdk.jfr.events\n@@ -34,1 +35,0 @@\n- * @run junit\/othervm --enable-native-access=ALL-UNNAMED FinalFieldMutationEventTest\n@@ -37,0 +37,1 @@\n+import java.lang.annotation.Annotation;\n@@ -39,0 +40,1 @@\n+import java.lang.reflect.Method;\n@@ -41,0 +43,1 @@\n+import java.util.stream.Stream;\n@@ -44,0 +47,1 @@\n+import jdk.jfr.consumer.RecordedMethod;\n@@ -45,0 +49,2 @@\n+import jdk.jfr.events.FinalFieldMutationEvent;\n+import jdk.jfr.events.StackFilter;\n@@ -71,1 +77,1 @@\n-            recording.enable(EVENT_NAME);\n+            recording.enable(EVENT_NAME).withStackTrace();\n@@ -92,1 +98,1 @@\n-                checkEvent(events.get(0), field);\n+                checkEvent(events.get(0), field, \"java.lang.reflect.Field::setInt\");\n@@ -108,1 +114,1 @@\n-            recording.enable(EVENT_NAME);\n+            recording.enable(EVENT_NAME).withStackTrace();\n@@ -126,1 +132,1 @@\n-                checkEvent(events.get(0), field);\n+                checkEvent(events.get(0), field, \"java.lang.invoke.MethodHandles$Lookup::unreflectSetter\");\n@@ -134,1 +140,2 @@\n-     * Test an event has the expected declaringClass and fieldName of the given Field.\n+     * Test that a FinalFieldMutationEvent event has the declaringClass and fieldName of\n+     * the given Field, and the expected top frame.\n@@ -136,1 +143,1 @@\n-    private void checkEvent(RecordedEvent e, Field f) {\n+    private void checkEvent(RecordedEvent e, Field f, String expectedTopFrame) {\n@@ -141,0 +148,30 @@\n+\n+        \/\/ check the top-frame of the stack trace\n+        RecordedMethod m = e.getStackTrace().getFrames().getFirst().getMethod();\n+        assertEquals(expectedTopFrame, m.getType().getName() + \"::\" + m.getName());\n+    }\n+\n+    \/**\n+     * Tests that FinalFieldMutationEvent's stack filter value names classes\/methods that\n+     * exist. This will help detect stale values when the implementation is refactored.\n+     *\/\n+    @Test\n+    void testFinalFieldMutationEventStackFilter() throws Exception {\n+        String[] filters = FinalFieldMutationEvent.class.getAnnotation(StackFilter.class).value();\n+        for (String filter : filters) {\n+            String[] classAndMethod = filter.split(\"::\");\n+            String cn = classAndMethod[0];\n+\n+            \/\/ throws if class not found\n+            Class<?> clazz = Class.forName(cn);\n+\n+            \/\/ if the filter has a method name then check a method of that name exists\n+            if (classAndMethod.length > 1) {\n+                String mn = classAndMethod[1];\n+                Method method = Stream.of(clazz.getDeclaredMethods())\n+                        .filter(m -> m.getName().equals(mn))\n+                        .findFirst()\n+                        .orElse(null);\n+                assertNotNull(method, cn + \"::\" + mn + \" not found\");\n+            }\n+        }\n","filename":"test\/jdk\/java\/lang\/reflect\/Field\/mutateFinals\/FinalFieldMutationEventTest.java","additions":44,"deletions":7,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -269,1 +269,0 @@\n-        settingValues.put(EventNames.FinalFieldMutation + \"#threshold\", \"0 ns\");\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestActiveSettingEvent.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}