{"files":[{"patch":"@@ -66,2 +66,1 @@\n-      libChangeSignalDisposition.c exePrintSignalDisposition.c \\\n-      libJNIAttachMutator.c\n+      libChangeSignalDisposition.c exePrintSignalDisposition.c\n","filename":"make\/test\/JtregNativeJdk.gmk","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -270,11 +270,1 @@\n-      assert(vmClasses::System_klass() != nullptr, \"Check once per vm\");\n-      if (k == vmClasses::System_klass()) {\n-        \/\/ Check offsets for case 2: System.in, System.out, or System.err\n-        if (_offset == java_lang_System::in_offset()  ||\n-            _offset == java_lang_System::out_offset() ||\n-            _offset == java_lang_System::err_offset()) {\n-          _is_constant = false;\n-          return;\n-        }\n-      }\n-      _is_constant = true;\n+      _is_constant = !fd->is_mutable_static_final();\n","filename":"src\/hotspot\/share\/ci\/ciField.cpp","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1870,1 +1870,1 @@\n-static void log_debug_if_final_static_field(JavaThread* thread, const char* func_name, Klass* klass, int offset) {\n+static void log_debug_if_final_static_field(JavaThread* current, const char* func_name, InstanceKlass* ik, int offset) {\n@@ -1873,1 +1873,1 @@\n-    bool found = InstanceKlass::cast(klass)->find_field_from_offset(offset, true, &fd);\n+    bool found = ik->find_field_from_offset(offset, true, &fd);\n@@ -1877,2 +1877,2 @@\n-      ResourceMark rm(thread);\n-      log_debug(jni)(\"%s mutated final static field %s.%s\", func_name, klass->external_name(), fd.name()->as_C_string());\n+      ResourceMark rm(current);\n+      log_debug(jni)(\"%s mutated final static field %s.%s\", func_name, ik->external_name(), fd.name()->as_C_string());\n@@ -1883,1 +1883,1 @@\n-static void log_debug_if_final_instance_field(JavaThread* thread, const char* func_name, Klass* klass, int offset) {\n+static void log_debug_if_final_instance_field(JavaThread* current, const char* func_name, InstanceKlass* ik, int offset) {\n@@ -1886,1 +1886,1 @@\n-    bool found = InstanceKlass::cast(klass)->find_field_from_offset(offset, false, &fd);\n+    bool found = ik->find_field_from_offset(offset, false, &fd);\n@@ -1890,2 +1890,2 @@\n-      ResourceMark rm(thread);\n-      log_debug(jni)(\"%s mutated final instance field %s.%s\", func_name, klass->external_name(), fd.name()->as_C_string());\n+      ResourceMark rm(current);\n+      log_debug(jni)(\"%s mutated final instance field %s.%s\", func_name, ik->external_name(), fd.name()->as_C_string());\n@@ -1908,1 +1908,1 @@\n-  log_debug_if_final_instance_field(thread, \"SetObjectField\", k, offset);\n+  log_debug_if_final_instance_field(thread, \"SetObjectField\", InstanceKlass::cast(k), offset);\n@@ -1931,1 +1931,1 @@\n-  log_debug_if_final_instance_field(thread, \"Set<Type>Field\", k, offset); \\\n+  log_debug_if_final_instance_field(thread, \"Set<Type>Field\", InstanceKlass::cast(k), offset); \\\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -236,1 +236,1 @@\n-checkStaticFieldID(JavaThread* thr, jfieldID fid, jclass cls, int ftype)\n+checkStaticFieldID(JavaThread* thr, jfieldID fid, jclass cls, int ftype, bool setter)\n@@ -261,0 +261,8 @@\n+\n+  \/* check if setting a final field *\/\n+  if (setter && fd.is_final() && !fd.is_mutable_static_final()) {\n+    ResourceMark rm(thr);\n+    stringStream ss;\n+    ss.print(\"SetStatic<Type>Field attempting to mutate final static field %s.%s\", k_oop->external_name(), fd.name()->as_C_string());\n+    ReportJNIFatalError(thr, ss.as_string());\n+  }\n@@ -264,1 +272,1 @@\n-checkInstanceFieldID(JavaThread* thr, jfieldID fid, jobject obj, int ftype)\n+checkInstanceFieldID(JavaThread* thr, jfieldID fid, jobject obj, int ftype, bool setter)\n@@ -290,2 +298,1 @@\n-  if (!InstanceKlass::cast(k_oop)->find_field_from_offset(offset,\n-                                                              false, &fd))\n+  if (!InstanceKlass::cast(k_oop)->find_field_from_offset(offset, false, &fd))\n@@ -298,0 +305,8 @@\n+\n+  \/* check if setting a final field *\/\n+  if (setter && fd.is_final()) {\n+    ResourceMark rm(thr);\n+    stringStream ss;\n+    ss.print(\"Set<Type>Field attempting to mutate final instance field %s.%s\", k_oop->external_name(), fd.name()->as_C_string());\n+    ReportJNIFatalError(thr, ss.as_string());\n+  }\n@@ -1207,1 +1222,1 @@\n-      checkInstanceFieldID(thr, fieldID, obj, FieldType); \\\n+      checkInstanceFieldID(thr, fieldID, obj, FieldType, false); \\\n@@ -1224,19 +1239,0 @@\n-static void checkCanSetInstanceField(JavaThread* thr, jfieldID fid, jobject obj) {\n-  oop o = JNIHandles::resolve_non_null(obj);\n-  Klass* k = o->klass();\n-  int offset = jfieldIDWorkaround::from_instance_jfieldID(k, fid);\n-\n-  fieldDescriptor fd;\n-  bool found = InstanceKlass::cast(k)->find_field_from_offset(offset, false, &fd);\n-  assert(found, \"bad field offset\");\n-  assert(!fd.is_static(), \"static\/instance mismatch\");\n-  if (!fd.is_final()) {\n-    return;\n-  }\n-\n-  ResourceMark rm(thr);\n-  stringStream ss;\n-  ss.print(\"Set<Type>Field attempting to mutate final instance field %s.%s\", k->external_name(), fd.name()->as_C_string());\n-  ReportJNIFatalError(thr, ss.as_string());\n-}\n-\n@@ -1251,2 +1247,1 @@\n-      checkInstanceFieldID(thr, fieldID, obj, FieldType); \\\n-      checkCanSetInstanceField(thr, fieldID, obj); \\\n+      checkInstanceFieldID(thr, fieldID, obj, FieldType, true); \\\n@@ -1418,1 +1413,1 @@\n-      checkStaticFieldID(thr, fieldID, clazz, FieldType); \\\n+      checkStaticFieldID(thr, fieldID, clazz, FieldType, false); \\\n@@ -1437,20 +1432,0 @@\n-static void checkCanSetStaticField(JavaThread* thr, jfieldID fid, jclass cls) {\n-  JNIid* id = jfieldIDWorkaround::from_static_jfieldID(fid);\n-  assert(id->is_static_field_id(), \"invalid static field id\");\n-  Klass* k = id->holder();\n-  int offset = id->offset();\n-\n-  fieldDescriptor fd;\n-  bool found = InstanceKlass::cast(k)->find_field_from_offset(offset, true, &fd);\n-  assert(found, \"bad field offset\");\n-  assert(fd.is_static(), \"static\/instance mismatch\");\n-  if (!fd.is_final() || fd.is_mutable_static_final()) {\n-     return;\n-  }\n-\n-  ResourceMark rm(thr);\n-  stringStream ss;\n-  ss.print(\"SetStatic<Type>Field attempting to mutate final static field %s.%s\", k->external_name(), fd.name()->as_C_string());\n-  ReportJNIFatalError(thr, ss.as_string());\n-}\n-\n@@ -1466,2 +1441,1 @@\n-      checkStaticFieldID(thr, fieldID, clazz, FieldType); \\\n-      checkCanSetStaticField(thr, fieldID, clazz); \\\n+      checkStaticFieldID(thr, fieldID, clazz, FieldType, true); \\\n","filename":"src\/hotspot\/share\/prims\/jniCheck.cpp","additions":23,"deletions":49,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -949,5 +949,3 @@\n-     * {@linkplain Field#set(Object, Object) reflectively set} a final field declared\n-     * in a class in the package, or\n-     * {@linkplain java.lang.invoke.MethodHandles.Lookup#unreflectSetter(Field) obtain\n-     * a method handle with write access} to a final field declared in a class in the\n-     * package.\n+     * {@linkplain Field#set(Object, Object) reflectively set} or {@linkplain\n+     * java.lang.invoke.MethodHandles.Lookup#unreflectSetter(Field) obtain a method\n+     * handle with write access} to a final field declared in a class in the package.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Module.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3449,1 +3449,1 @@\n-                if (!field.isStatic() && isAccessible && allowedModes != TRUSTED) {\n+                if (!field.isStatic() && isAccessible) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @requires (os.family == \"linux\" | os.family == \"mac\")\n","filename":"test\/jdk\/java\/lang\/reflect\/Field\/mutateFinals\/jni\/JNIAttachMutatorTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,0 +24,3 @@\n+#ifdef _WIN32\n+#include <windows.h>\n+#else\n@@ -25,0 +28,1 @@\n+#endif\n@@ -164,0 +168,7 @@\n+#ifdef _WIN32\n+static DWORD WINAPI win32_thread_main(void* p) {\n+    thread_main(p);\n+    return 0;\n+}\n+#endif\n+\n@@ -165,0 +176,6 @@\n+#ifdef _WIN32\n+    HANDLE handle = CreateThread(NULL, STACK_SIZE, win32_thread_main, NULL, 0, NULL);\n+    if (handle == NULL) {\n+        fprintf(stderr, \"CreateThread failed: %d\\n\", GetLastError());\n+    }\n+#else\n@@ -174,0 +191,1 @@\n+#endif\n","filename":"test\/jdk\/java\/lang\/reflect\/Field\/mutateFinals\/jni\/libJNIAttachMutator.c","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"}]}