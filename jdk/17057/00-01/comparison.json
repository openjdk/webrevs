{"files":[{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8054307 8311906\n+ * @bug 8054307 8311906 8321514\n@@ -28,0 +28,2 @@\n+ * @run main\/othervm -XX:+CompactStrings Chars\n+ * @run main\/othervm -XX:-CompactStrings Chars\n@@ -48,0 +50,1 @@\n+            testIntsSubrange(ccExp);\n@@ -107,0 +110,21 @@\n+    static void testIntsSubrange(int[] expected) {\n+        int[] offsets = { 7, 31 };   \/\/ offsets to test\n+        int LENGTH = 13;\n+        for (int i = 0; i < offsets.length; i++) {\n+            int offset = Math.max(0, offsets[i]);       \/\/ confine to the input array\n+            int count = Math.min(LENGTH, expected.length - offset);\n+            String str = new String(expected, offset, count);\n+            int[] actual = str.chars().toArray();\n+            int errOffset = Arrays.mismatch(actual, 0, actual.length,\n+                    expected, offset, offset + count);\n+            if (errOffset >= 0) {\n+                System.err.printf(\"expected[%d] (%d) != actual[%d] (%d)%n\",\n+                        offset + errOffset, expected[offset + errOffset],\n+                        errOffset, actual[errOffset]);\n+                System.err.println(\"expected: \" + Arrays.toString(expected));\n+                System.err.println(\"actual: \" + Arrays.toString(actual));\n+                throw new RuntimeException(\"testCharsSubrange failed!\");\n+            }\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/String\/Chars.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2023, BELLSOFT. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8311906 8321514\n- * @summary test UTF16 string construction from codepoints\n- * @run junit\/othervm -XX:-CompactStrings CodePoints\n- *\/\n-\n-import java.io.UnsupportedEncodingException;\n-import org.junit.jupiter.api.Test;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-\n-public class CodePoints {\n-\n-  private final String sUTF16 = \"\\u041e\\u0434\\u043d\\u0430\\u0436\\u0434\\u044b\";\n-\n-  @Test\n-  public void TestUTF16() throws UnsupportedEncodingException{\n-      int codePoints[] = sUTF16.codePoints().toArray();\n-      String cut = new String(codePoints, 3, 3);\n-      assertEquals(\"\\u0430\\u0436\\u0434\", cut);\n-  }\n-}\n","filename":"test\/jdk\/java\/lang\/String\/CodePoints.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"}]}