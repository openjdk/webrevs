{"files":[{"patch":"@@ -31,5 +31,3 @@\n- * the specified name can be found. This exception is also thrown if\n- * a type variable is read where no declaration of this type variable\n- * can be found. This exception differs from{@link ClassNotFoundException}\n- * in that {@code ClassNotFoundException} is a checked exception, whereas\n- * this exception is unchecked.\n+ * the specified name can be found. This exception differs from\n+ * {@link ClassNotFoundException} in that {@code ClassNotFoundException}\n+ * is a checked exception, whereas this exception is unchecked.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/TypeNotPresentException.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @library \/test\/lib\n@@ -27,0 +28,1 @@\n+ * @enablePreview\n@@ -28,1 +30,0 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n@@ -31,0 +32,1 @@\n+import jdk.test.lib.ByteCodeLoader;\n@@ -32,3 +34,4 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.Signature;\n+import java.lang.classfile.attribute.SignatureAttribute;\n+import java.lang.constant.ClassDesc;\n@@ -40,19 +43,10 @@\n-        ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n-        classWriter.visit(Opcodes.V17,\n-                Opcodes.ACC_PUBLIC,\n-                \"sample\/MissingVariable\",\n-                null,\n-                \"java\/lang\/Object\",\n-                null);\n-        classWriter.visitField(Opcodes.ACC_PUBLIC, \"f\", \"Ljava\/lang\/Object;\", \"TA;\", null).visitEnd();\n-        classWriter.visitEnd();\n-        byte[] bytes = classWriter.toByteArray();\n-        Class<?> missing = new ClassLoader() {\n-            @Override\n-            protected Class<?> findClass(String name) throws ClassNotFoundException {\n-                if (name.equals(\"sample.MissingVariable\")) {\n-                    return defineClass(name, bytes, 0, bytes.length);\n-                }\n-                return super.findClass(name);\n-            }\n-        }.findClass(\"sample.MissingVariable\");\n+        ClassFile cf = ClassFile.of();\n+        byte[] bytes = cf.build(\n+                ClassDesc.of(\"sample.MissingVariable\"),\n+                classBuilder -> {\n+                    classBuilder.withSuperclass(ClassDesc.of(\"java.lang.Object\"));\n+                    classBuilder.withField(\"f\",\n+                            ClassDesc.of(\"java.lang.Object\"),\n+                            fieldBuilder -> fieldBuilder.with(SignatureAttribute.of(Signature.parseFrom(\"TA;\"))));\n+                });\n+        Class<?> missing = ByteCodeLoader.load(\"sample.MissingVariable\", bytes);\n","filename":"test\/jdk\/java\/lang\/reflect\/Generics\/TestMissingTypeVariable.java","additions":17,"deletions":23,"binary":false,"changes":40,"status":"modified"}]}