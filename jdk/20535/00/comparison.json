{"files":[{"patch":"@@ -31,3 +31,5 @@\n- * the specified name can be found.   This exception differs from\n- * {@link ClassNotFoundException} in that {@code ClassNotFoundException} is a\n- * checked exception, whereas this exception is unchecked.\n+ * the specified name can be found. This exception is also thrown if\n+ * a type variable is read where no declaration of this type variable\n+ * can be found. This exception differs from{@link ClassNotFoundException}\n+ * in that {@code ClassNotFoundException} is a checked exception, whereas\n+ * this exception is unchecked.\n@@ -51,1 +53,1 @@\n-     * The type name.\n+     * The type name or the name of a type variable.\n@@ -56,2 +58,2 @@\n-     * Constructs a {@code TypeNotPresentException} for the named type\n-     * with the specified cause.\n+     * Constructs a {@code TypeNotPresentException} for the named type or\n+     * type variable with the specified cause.\n@@ -59,1 +61,1 @@\n-     * @param typeName the fully qualified name of the unavailable type\n+     * @param typeName the fully qualified name of the unavailable type or type variable\n@@ -69,1 +71,1 @@\n-     * Returns the fully qualified name of the unavailable type.\n+     * Returns the fully qualified name of the unavailable type or type variable name.\n@@ -71,1 +73,1 @@\n-     * @return the fully qualified name of the unavailable type\n+     * @return the fully qualified name of the unavailable type or type variable name\n","filename":"src\/java.base\/share\/classes\/java\/lang\/TypeNotPresentException.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -109,1 +109,5 @@\n-        return getScope().lookup(name);\n+        TypeVariable<?> variable = getScope().lookup(name);\n+        if (variable == null) {\n+            throw new TypeNotPresentException(name, null);\n+        }\n+        return variable;\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/generics\/factory\/CoreReflectionFactory.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8337302\n+ * @summary Tests that an exception is thrown if a type variable is not declared\n+ * @modules java.base\/jdk.internal.org.objectweb.asm\n+ *\/\n+\n+\n+import jdk.internal.org.objectweb.asm.ClassWriter;\n+import jdk.internal.org.objectweb.asm.Opcodes;\n+\n+import java.lang.reflect.Type;\n+\n+public class TestMissingTypeVariable {\n+\n+    public static void main(String[] args) throws Exception {\n+        ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n+        classWriter.visit(Opcodes.V17,\n+                Opcodes.ACC_PUBLIC,\n+                \"sample\/MissingVariable\",\n+                null,\n+                \"java\/lang\/Object\",\n+                null);\n+        classWriter.visitField(Opcodes.ACC_PUBLIC, \"f\", \"Ljava\/lang\/Object;\", \"TA;\", null).visitEnd();\n+        classWriter.visitEnd();\n+        byte[] bytes = classWriter.toByteArray();\n+        Class<?> missing = new ClassLoader() {\n+            @Override\n+            protected Class<?> findClass(String name) throws ClassNotFoundException {\n+                if (name.equals(\"sample.MissingVariable\")) {\n+                    return defineClass(name, bytes, 0, bytes.length);\n+                }\n+                return super.findClass(name);\n+            }\n+        }.findClass(\"sample.MissingVariable\");\n+        try {\n+            Type type = missing.getField(\"f\").getGenericType();\n+            throw new IllegalStateException(\"Expected TypeNotPresentException but got: \" + type);\n+        } catch (TypeNotPresentException e) {\n+            if (!\"A\".equals(e.typeName())) {\n+                throw new IllegalStateException(\"Unexpected name: \" + e.typeName());\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/Generics\/TestMissingTypeVariable.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}