{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,3 +31,3 @@\n- * the specified name can be found.   This exception differs from\n- * {@link ClassNotFoundException} in that {@code ClassNotFoundException} is a\n- * checked exception, whereas this exception is unchecked.\n+ * the specified name can be found. This exception differs from\n+ * {@link ClassNotFoundException} in that {@code ClassNotFoundException}\n+ * is a checked exception, whereas this exception is unchecked.\n@@ -51,1 +51,1 @@\n-     * The type name.\n+     * The type name or the name of a type variable.\n@@ -56,2 +56,2 @@\n-     * Constructs a {@code TypeNotPresentException} for the named type\n-     * with the specified cause.\n+     * Constructs a {@code TypeNotPresentException} for the named type or\n+     * type variable with the specified cause.\n@@ -59,1 +59,1 @@\n-     * @param typeName the fully qualified name of the unavailable type\n+     * @param typeName the fully qualified name of the unavailable type or type variable\n@@ -69,1 +69,1 @@\n-     * Returns the fully qualified name of the unavailable type.\n+     * Returns the fully qualified name of the unavailable type or type variable name.\n@@ -71,1 +71,1 @@\n-     * @return the fully qualified name of the unavailable type\n+     * @return the fully qualified name of the unavailable type or type variable name\n","filename":"src\/java.base\/share\/classes\/java\/lang\/TypeNotPresentException.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -109,1 +109,5 @@\n-        return getScope().lookup(name);\n+        TypeVariable<?> variable = getScope().lookup(name);\n+        if (variable == null) {\n+            throw new TypeNotPresentException(name, null);\n+        }\n+        return variable;\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/generics\/factory\/CoreReflectionFactory.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library \/test\/lib\n+ * @bug 8337302\n+ * @enablePreview\n+ * @summary Tests that an exception is thrown if a type variable is not declared\n+ *\/\n+\n+import jdk.test.lib.ByteCodeLoader;\n+\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.Signature;\n+import java.lang.classfile.attribute.SignatureAttribute;\n+import java.lang.constant.ClassDesc;\n+import java.lang.reflect.AccessFlag;\n+import java.lang.reflect.Type;\n+\n+public class TestMissingTypeVariable {\n+\n+    public static void main(String[] args) throws Exception {\n+        ClassFile cf = ClassFile.of();\n+        byte[] bytes = cf.build(\n+                ClassDesc.of(\"sample.MissingVariable\"),\n+                classBuilder -> {\n+                    classBuilder.withSuperclass(ClassDesc.of(\"java.lang.Object\"));\n+                    classBuilder.withFlags(AccessFlag.PUBLIC);\n+                    classBuilder.withField(\"f\",\n+                            ClassDesc.of(\"java.lang.Object\"),\n+                            fieldBuilder -> fieldBuilder.withFlags(AccessFlag.PUBLIC).with(SignatureAttribute.of(Signature.parseFrom(\"TA;\"))));\n+                });\n+        \/*\n+          package sample;\n+          public class MissingVariable {\n+            public A f; \/\/ undeclared type variable\n+          }\n+         *\/\n+        Class<?> missing = ByteCodeLoader.load(\"sample.MissingVariable\", bytes);\n+        try {\n+            Type type = missing.getField(\"f\").getGenericType();\n+            throw new IllegalStateException(\"Expected TypeNotPresentException but got: \" + type);\n+        } catch (TypeNotPresentException e) {\n+            if (!\"A\".equals(e.typeName())) {\n+                throw new IllegalStateException(\"Unexpected name: \" + e.typeName());\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/Generics\/TestMissingTypeVariable.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}