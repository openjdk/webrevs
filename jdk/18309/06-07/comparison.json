{"files":[{"patch":"@@ -4636,1 +4636,0 @@\n-\n@@ -4740,0 +4739,4 @@\n+void poo() {\n+  asm(\"nop\");\n+}\n+\n@@ -4770,0 +4773,4 @@\n+  if (getenv(\"APH_FOO_BAR\")) {\n+    call(RuntimeAddress(CAST_FROM_FN_PTR(address, poo)));\n+  }\n+\n@@ -4773,0 +4780,2 @@\n+  mov_metadata(r_super_klass, super_klass);\n+\n@@ -4786,2 +4795,12 @@\n-  }  \/\/ We test the MSB of r_array_index, i.e. its sign bit\n-  jcc(Assembler::positive, L_failure);\n+  }\n+\n+  if (InlineSecondarySupersTest) {\n+    \/\/ Get the first array index that can contain super_klass into r_array_index.\n+    if (bit != 0) {\n+      popcntq(r_array_index, r_array_index);\n+    } else {\n+      movl(r_array_index, (u1)1);\n+    }\n+\n+    movl(r_array_length, bit);\n+    call(RuntimeAddress(StubRoutines::_klass_subtype_fallback_stub));\n@@ -4789,3 +4808,0 @@\n-  \/\/ Get the first array index that can contain super_klass into r_array_index.\n-  if (bit != 0) {\n-    popcntq(r_array_index, r_array_index);\n@@ -4793,1 +4809,45 @@\n-    movl(r_array_index, (u1)1);\n+    \/\/ We test the MSB of r_array_index, i.e. its sign bit\n+    jcc(Assembler::positive, L_failure);\n+\n+    \/\/ Get the first array index that can contain super_klass into r_array_index.\n+    if (bit != 0) {\n+      popcntq(r_array_index, r_array_index);\n+    } else {\n+      movl(r_array_index, (u1)1);\n+    }\n+\n+    \/\/ We will consult the secondary-super array.\n+    movptr(r_array_base, Address(r_sub_klass, in_bytes(Klass::secondary_supers_offset())));\n+\n+    \/\/ We're asserting that the first word in an Array<Klass*> is the\n+    \/\/ length, and the second word is the first word of the data. If\n+    \/\/ that ever changes, r_array_base will have to be adjusted here.\n+    assert(Array<Klass*>::base_offset_in_bytes() == wordSize, \"Adjust this code\");\n+    assert(Array<Klass*>::length_offset_in_bytes() == 0, \"Adjust this code\");\n+\n+    cmpq(r_super_klass, Address(r_array_base, r_array_index, Address::times_8));\n+    jcc(Assembler::equal, L_success);\n+\n+    \/\/ Is there another entry to check? Consult the bitmap.\n+    btq(r_bitmap, (bit+1) & Klass::SEC_HASH_MASK);\n+    jcc(Assembler::carryClear, L_failure);\n+\n+    \/\/ Linear probe. Rotate the bitmap so that the next bit to test is\n+    \/\/ in Bit 0.\n+    if (bit != 0) {\n+      rorq(r_bitmap, bit);\n+    }\n+\n+    call(RuntimeAddress(StubRoutines::_klass_subtype_fallback_stub));\n+    \/\/ Result is in the Z flag\n+    jcc(Assembler::equal, L_success);\n+\n+    bind(L_failure);\n+    cmpptr(rsp, 0);\n+    movl(result, (u1)1);\n+    jmp(L_fallthrough);\n+\n+    bind(L_success);\n+    movl(result, (u1)0);\n+\n+    bind(L_fallthrough);\n@@ -4796,1 +4856,36 @@\n-  mov_metadata(r_super_klass, super_klass);\n+  verify_klass_subtype_slow_path(r_sub_klass, super_klass, r_super_klass,\n+                                 temp1, temp2, temp3, temp4, temp5, result);\n+  BLOCK_COMMENT(\"} hashed check_klass_subtype_slow_path\");\n+}\n+\n+void MacroAssembler::klass_subtype_fallback() {\n+  if (! InlineSecondarySupersTest) {\n+    klass_subtype_fallback_1();\n+  } else {\n+    klass_subtype_fallback_2();\n+  }\n+  ret(0);\n+}\n+\n+void MacroAssembler::klass_subtype_fallback_1() {\n+  const Register\n+    r_super_klass = rax,\n+    r_array_base = rbx,\n+    r_array_length = rcx,\n+    r_array_index = rdx,\n+    r_sub_klass = rsi,\n+    result = rdi,\n+    r_bitmap = r11;\n+\n+  CHECK_KLASS_SUBTYPE_SLOW_REGISTERS;\n+\n+  Label L_fallthrough, L_success, L_failure;\n+\n+  \/\/ At entry, rcx contains the hash slot of the superklass\n+  const Register r_bit = rcx;\n+\n+  \/\/ Linear probe. Rotate the bitmap so that the next bit to test is\n+  \/\/ in Bit 0.\n+  rorq(r_bitmap); \/\/ rcx = r_bit\n+  btq(r_bitmap, 0);\n+  jcc(Assembler::carryClear, L_failure);\n@@ -4811,1 +4906,1 @@\n-  btq(r_bitmap, (bit+1) & Klass::SEC_HASH_MASK);\n+  btq(r_bitmap, 1);\n@@ -4814,5 +4909,1 @@\n-  \/\/ Linear probe. Rotate the bitmap so that the next bit to test is\n-  \/\/ in Bit 0.\n-  if (bit != 0) {\n-    rorq(r_bitmap, bit);\n-  }\n+  klass_subtype_fallback_2();\n@@ -4820,1 +4911,0 @@\n-  call(RuntimeAddress(StubRoutines::_klass_subtype_fallback_stub));\n@@ -4832,2 +4922,0 @@\n-  BLOCK_COMMENT(\"} hashed check_klass_subtype_slow_path\");\n-\n@@ -4835,3 +4923,0 @@\n-\n-  verify_klass_subtype_slow_path(r_sub_klass, super_klass, r_super_klass,\n-                                 temp1, temp2, temp3, temp4, temp5, result);\n@@ -4843,1 +4928,1 @@\n-void MacroAssembler::klass_subtype_fallback() {\n+void MacroAssembler::klass_subtype_fallback_2() {\n@@ -4911,1 +4996,0 @@\n-  ret(0);\n@@ -4914,1 +4998,0 @@\n-  ret(0);\n@@ -4917,0 +5000,1 @@\n+\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":107,"deletions":23,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -669,0 +669,2 @@\n+  void klass_subtype_fallback_1();\n+  void klass_subtype_fallback_2();\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2010,0 +2010,3 @@\n+  product(bool, InlineSecondarySupersTest, false,                           \\\n+          \"Inline the secondary supers hash lookup.\")                       \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}