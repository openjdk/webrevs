{"files":[{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat, Inc.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.lang;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.*;\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 4, time = 2)\n+@Measurement(iterations = 4, time = 2)\n+@Fork(value = 3)\n+public class TypePollution {\n+\n+    static class DynamicInvocationHandler implements InvocationHandler {\n+\n+        @Override\n+            public Object invoke(Object proxy, Method method, Object[] args) {\n+            return null;\n+        }\n+    }\n+\n+    interface I01 {}\n+    interface I02 {}\n+    interface I03 {}\n+    interface I04 {}\n+    interface I05 {}\n+    interface I06 {}\n+    interface I07 {}\n+    interface I08 {}\n+    interface I09 {}\n+    interface I10 {}\n+    interface I11 {}\n+    interface I12 {}\n+    interface I13 {}\n+    interface I14 {}\n+    interface I15 {}\n+    interface I16 {}\n+    interface I17 {}\n+    interface I18 {}\n+    interface I19 {}\n+    interface I20 {}\n+    interface I21 {}\n+\n+    static Class<?>[] classes;\n+\n+    static {\n+        classes = new Class<?>[] { I01.class, I02.class, I03.class, I04.class, I05.class, I06.class, I07.class, I08.class, I09.class, I10.class,\n+                I11.class, I12.class, I13.class, I14.class, I15.class, I16.class, I17.class, I18.class, I19.class, I20.class };\n+\n+    }\n+    private static final int NOOFOBJECTS = 100;\n+\n+    public Object[] objectArray;\n+\n+    Random rand = new Random(0);\n+\n+    @Setup(Level.Trial)\n+    public void setup() {\n+        objectArray = new Object[100];\n+        var loader = getClass().getClassLoader();\n+        Class<?>[] someInterfaces = new Class<?>[0];\n+        for (int i = 0; i < objectArray.length; i++) {\n+            Set<Class<?>> aSet = new HashSet<Class<?>>();\n+            for (int j  = 0; j < 6; j++) {\n+                aSet.add(classes[rand.nextInt(classes.length)]);\n+            }\n+            Class<?>[] interfaceArray = new Class[aSet.size()];\n+            interfaceArray = aSet.toArray(interfaceArray);\n+            objectArray[i] = Proxy.newProxyInstance(loader, interfaceArray, new DynamicInvocationHandler());\n+        }\n+    }\n+\n+    @Benchmark\n+    public int instanceOfInterfaceSwitch() {\n+        int dummy = 0;\n+        for (int i = 0; i < objectArray.length; i++) {\n+            dummy += switch(objectArray[i]) {\n+            case I01 inst -> 1;\n+            case I02 inst -> 2;\n+            case I03 inst -> 3;\n+            case I04 inst -> 4;\n+            case I05 inst -> 5;\n+            case I06 inst -> 6;\n+            case I07 inst -> 7;\n+            case I08 inst -> 8;\n+            default -> 10;\n+            };\n+            dummy += switch(objectArray[i]) {\n+            case I08 inst -> 8;\n+            case I07 inst -> 7;\n+            case I06 inst -> 6;\n+            case I05 inst -> 5;\n+            case I04 inst -> 4;\n+            case I03 inst -> 3;\n+            case I02 inst -> 2;\n+            case I01 inst -> 1;\n+            default -> 0;\n+            };\n+        }\n+        return dummy;\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/lang\/TypePollution.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"}]}