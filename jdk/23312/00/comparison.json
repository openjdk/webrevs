{"files":[{"patch":"@@ -984,0 +984,1 @@\n+  Node* one = _igvn->intcon(1);\n@@ -995,1 +996,6 @@\n-      res_phi_input = _igvn->makecon(tcmp);\n+      if ((mask == BoolTest::mask::eq && tcmp == TypeInt::CC_EQ) ||\n+          (mask == BoolTest::mask::ne && tcmp == TypeInt::CC_GT)) {\n+        res_phi_input = one;\n+      } else {\n+        res_phi_input = zero;\n+      }\n@@ -1007,1 +1013,2 @@\n-  Node* new_cmp = _igvn->transform(new CmpINode(res_phi, zero));\n+  \/\/ This CMP always compares whether the output of \"res_phi\" is TRUE as far as the \"mask\".\n+  Node* new_cmp = _igvn->transform(new CmpINode(res_phi, (mask == BoolTest::mask::eq) ? one : zero));\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8347718\n+ * @summary Check that Reduce Allocation Merges correctly handle \"NE\" pointer comparisons.\n+ * @requires vm.flagless & vm.compiler2.enabled & vm.opt.final.EliminateAllocations\n+ * @run main\/othervm -XX:CompileCommand=compileonly,*TestReduceAllocationAndPointerComparisons*::*\n+ *                   -XX:CompileCommand=dontinline,*TestReduceAllocationAndPointerComparisons*::*\n+ *                   -XX:-TieredCompilation -Xcomp -server\n+ *                   compiler.c2.TestReduceAllocationAndPointerComparisons\n+ * @run main\/othervm compiler.c2.TestReduceAllocationAndPointerComparisons\n+ *\/\n+\n+package compiler.c2;\n+\n+public class TestReduceAllocationAndPointerComparisons {\n+    public static void main(String[] args) {\n+        for (int i=0; i<50000; i++) {\n+            if (test(true) == false) {\n+                throw new RuntimeException(\"Unexpected result.\");\n+            }\n+        }\n+    }\n+\n+    public static boolean test(boolean b) {\n+        MyClass obj = new MyClass();\n+\n+        for (int i = 0; i < 100_000; ++i) { }\n+\n+        obj = b ? obj : new MyClass();\n+        obj = b ? obj : new MyClass();\n+\n+        if (obj == null) {\n+            return false;\n+        }\n+\n+        return b;\n+    }\n+\n+    static class MyClass {\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestReduceAllocationAndPointerComparisons.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"}]}