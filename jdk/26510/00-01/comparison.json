{"files":[{"patch":"@@ -2790,3 +2790,3 @@\n-  HeapWord* aligned_end = align_up(end, ShenandoahHeapRegion::region_size_words());\n-  if (aligned_end > end) {\n-    fill_with_dummy_object(end, aligned_end, false);\n+  HeapWord* regions_end = align_up(end, ShenandoahHeapRegion::region_size_bytes());\n+  if (regions_end > end) {\n+    fill_with_dummy_object(end, regions_end, false);\n@@ -2800,1 +2800,1 @@\n-  while (cur < end) {\n+  while (cur < regions_end) {\n@@ -2806,0 +2806,4 @@\n+  assert(cur == regions_end,\n+         \"Should allocate entire region space to maintain heap parsability: \" PTR_FORMAT \" \" PTR_FORMAT,\n+         p2i(cur), p2i(regions_end));\n+\n@@ -2819,1 +2823,3 @@\n-    assert(r->top() == r->end(), \"All regions should be full\");\n+    assert(r->top() == r->end(),\n+           \"All regions should be full: \" PTR_FORMAT \" \" PTR_FORMAT,\n+           p2i(r->top()), p2i(r->end()));\n@@ -2821,1 +2827,2 @@\n-           \"Archive space start should be at the bottom of first region\");\n+           \"Archive space start should be at the bottom of first region: \" PTR_FORMAT \" \" PTR_FORMAT,\n+           p2i(r->bottom()), p2i(start));\n@@ -2823,1 +2830,2 @@\n-           \"Archive space end should be in the last region\");\n+           \"Archive space end should be in the last region: \" PTR_FORMAT \" \" PTR_FORMAT \" \" PTR_FORMAT,\n+           p2i(r->bottom()), p2i(end), p2i(r->top()));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"}]}