{"files":[{"patch":"@@ -1272,5 +1272,16 @@\n-  \/\/ retire_range_from_partition() will adjust bounds on Mutator free set if appropriate\n-  _partitions.retire_range_from_partition(ShenandoahFreeSetPartitionId::Mutator, beg, end);\n-\n-  size_t total_contiguous_size = ShenandoahHeapRegion::region_size_bytes() * num;\n-  _partitions.increase_used(ShenandoahFreeSetPartitionId::Mutator, total_contiguous_size);\n+  size_t total_used = 0;\n+  if (is_humongous) {\n+    \/\/ Humongous allocation retires all regions at once: no allocation is possible anymore.\n+    _partitions.retire_range_from_partition(ShenandoahFreeSetPartitionId::Mutator, beg, end);\n+    total_used = ShenandoahHeapRegion::region_size_bytes() * num;\n+  } else {\n+    \/\/ Non-humongous allocation retires only the regions that cannot be used for allocation anymore.\n+    for (idx_t i = beg; i <= end; i++) {\n+      ShenandoahHeapRegion* r = _heap->get_region(i);\n+      if (r->free() < PLAB::min_size() * HeapWordSize) {\n+        _partitions.retire_from_partition(ShenandoahFreeSetPartitionId::Mutator, i, r->used());\n+      }\n+      total_used += r->used();\n+    }\n+  }\n+  _partitions.increase_used(ShenandoahFreeSetPartitionId::Mutator, total_used);\n@@ -1278,0 +1289,1 @@\n+\n@@ -1279,1 +1291,1 @@\n-  if (remainder != 0) {\n+  if (remainder != 0 && is_humongous) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2780,6 +2780,0 @@\n-  \/\/ Plus, the objects loaded by CDS are likely old and would survive lots of collections.\n-  \/\/\n-  \/\/ We handle the whole thing by allocating the contiguous set of full regions for CDS load.\n-  \/\/ This simplifies accounting in GC code, and makes sure the CDS loaded object are segregated\n-  \/\/ by age from the rest of the allocations. We will insert the filler object when load\n-  \/\/ is complete.\n@@ -2791,2 +2785,1 @@\n-  size_t aligned_size = ShenandoahHeapRegion::required_regions(size) * ShenandoahHeapRegion::region_size_bytes();\n-  ShenandoahAllocRequest req = ShenandoahAllocRequest::for_cds(aligned_size);\n+  ShenandoahAllocRequest req = ShenandoahAllocRequest::for_cds(size);\n@@ -2801,0 +2794,2 @@\n+  \/\/ Nothing to do here, except checking that heap looks fine.\n+#ifdef ASSERT\n@@ -2804,8 +2799,0 @@\n-  \/\/ Fill the tail with the filler object.\n-  HeapWord* regions_end = align_up(end, ShenandoahHeapRegion::region_size_bytes());\n-  if (regions_end > end) {\n-    fill_with_dummy_object(end, regions_end, false);\n-  }\n-\n-  \/\/ Nothing else to do here, except checking that heap looks fine.\n-#ifdef ASSERT\n@@ -2815,1 +2802,1 @@\n-  while (cur < regions_end) {\n+  while (cur < end) {\n@@ -2821,4 +2808,0 @@\n-  assert(cur == regions_end,\n-         \"Should allocate entire region space to maintain heap parsability: \" PTR_FORMAT \" \" PTR_FORMAT,\n-         p2i(cur), p2i(regions_end));\n-\n@@ -2826,1 +2809,1 @@\n-  assert(cur >= end,\n+  assert(cur == end,\n@@ -2838,2 +2821,2 @@\n-    assert(r->top() == r->end(),\n-           \"All regions should be full: \" PTR_FORMAT \" \" PTR_FORMAT,\n+    assert(idx == end_reg_idx || r->top() == r->end(),\n+           \"All regions except the last one should be full: \" PTR_FORMAT \" \" PTR_FORMAT,\n@@ -2844,3 +2827,3 @@\n-    assert(idx != end_reg_idx || (r->bottom() < end && end <= r->top()),\n-           \"Archive space end should be in the last region: \" PTR_FORMAT \" \" PTR_FORMAT \" \" PTR_FORMAT,\n-           p2i(r->bottom()), p2i(end), p2i(r->top()));\n+    assert(idx != end_reg_idx || r->top() == end,\n+           \"Archive space end should be at the top of last region: \" PTR_FORMAT \" \" PTR_FORMAT,\n+           p2i(r->top()), p2i(end));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":10,"deletions":27,"binary":false,"changes":37,"status":"modified"}]}