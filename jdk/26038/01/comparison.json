{"files":[{"patch":"@@ -25,0 +25,1 @@\n+#include \"classfile\/classLoaderDataGraph.hpp\"\n@@ -41,0 +42,1 @@\n+#include \"gc\/shared\/oopStorageSet.inline.hpp\"\n@@ -43,0 +45,1 @@\n+#include \"gc\/shared\/scavengableNMethods.hpp\"\n@@ -608,1 +611,1 @@\n-    RootScanClosure root_cl{this};\n+    RootScanClosure oop_cl{this};\n@@ -611,3 +614,3 @@\n-    MarkingNMethodClosure code_cl(&root_cl,\n-                                  NMethodToOopClosure::FixRelocations,\n-                                  false \/* keepalive_nmethods *\/);\n+    MarkingNMethodClosure nmethod_cl(&oop_cl,\n+                                     NMethodToOopClosure::FixRelocations,\n+                                     false \/* keepalive_nmethods *\/);\n@@ -615,6 +618,2 @@\n-    HeapWord* saved_top_in_old_gen = _old_gen->space()->top();\n-    heap->process_roots(SerialHeap::SO_ScavengeCodeCache,\n-                        &root_cl,\n-                        &cld_cl,\n-                        &cld_cl,\n-                        &code_cl);\n+    \/\/ Processing old-to-young pointers before relocating other kinds of roots.\n+    _old_gen->scan_old_to_young_refs();\n@@ -622,1 +621,7 @@\n-    _old_gen->scan_old_to_young_refs(saved_top_in_old_gen);\n+    \/\/ During young-gc, visit all (strong+weak) clds with the same closure.\n+    ClassLoaderDataGraph::cld_do(&cld_cl);\n+\n+    Threads::oops_do(&oop_cl, &nmethod_cl);\n+    ScavengableNMethods::nmethods_do(&nmethod_cl);\n+\n+    OopStorageSet::strong_oops_do(&oop_cl);\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+#include \"gc\/shared\/oopStorageSet.inline.hpp\"\n@@ -69,0 +70,1 @@\n+#include \"runtime\/threads.hpp\"\n@@ -486,7 +488,9 @@\n-    CLDClosure* weak_cld_closure = ClassUnloading ? nullptr : &follow_cld_closure;\n-    MarkingNMethodClosure mark_code_closure(&follow_root_closure, !NMethodToOopClosure::FixRelocations, true);\n-    gch->process_roots(SerialHeap::SO_None,\n-                       &follow_root_closure,\n-                       &follow_cld_closure,\n-                       weak_cld_closure,\n-                       &mark_code_closure);\n+    MarkingNMethodClosure mark_code_closure(&follow_root_closure,\n+                                            !NMethodToOopClosure::FixRelocations,\n+                                            true);\n+\n+    ClassLoaderDataGraph::always_strong_cld_do(&follow_cld_closure);\n+\n+    Threads::oops_do(&follow_root_closure, &mark_code_closure);\n+\n+    OopStorageSet::strong_oops_do(&follow_root_closure);\n@@ -720,6 +724,8 @@\n-    NMethodToOopClosure code_closure(&adjust_pointer_closure, NMethodToOopClosure::FixRelocations);\n-    gch->process_roots(SerialHeap::SO_AllCodeCache,\n-                       &adjust_pointer_closure,\n-                       &adjust_cld_closure,\n-                       &adjust_cld_closure,\n-                       &code_closure);\n+    ClassLoaderDataGraph::cld_do(&adjust_cld_closure);\n+\n+    Threads::oops_do(&adjust_pointer_closure, nullptr);\n+\n+    OopStorageSet::strong_oops_do(&adjust_pointer_closure);\n+\n+    NMethodToOopClosure nmthod_cl(&adjust_pointer_closure, NMethodToOopClosure::FixRelocations);\n+    CodeCache::nmethods_do(&nmthod_cl);\n","filename":"src\/hotspot\/share\/gc\/serial\/serialFullGC.cpp","additions":19,"deletions":13,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -516,32 +516,0 @@\n-void SerialHeap::process_roots(ScanningOption so,\n-                               OopClosure* strong_roots,\n-                               CLDClosure* strong_cld_closure,\n-                               CLDClosure* weak_cld_closure,\n-                               NMethodToOopClosure* code_roots) {\n-  \/\/ General roots.\n-  assert(code_roots != nullptr, \"code root closure should always be set\");\n-\n-  ClassLoaderDataGraph::roots_cld_do(strong_cld_closure, weak_cld_closure);\n-\n-  \/\/ Only process code roots from thread stacks if we aren't visiting the entire CodeCache anyway\n-  NMethodToOopClosure* roots_from_code_p = (so & SO_AllCodeCache) ? nullptr : code_roots;\n-\n-  Threads::oops_do(strong_roots, roots_from_code_p);\n-\n-  OopStorageSet::strong_oops_do(strong_roots);\n-\n-  if (so & SO_ScavengeCodeCache) {\n-    assert(code_roots != nullptr, \"must supply closure for code cache\");\n-\n-    \/\/ We only visit parts of the CodeCache when scavenging.\n-    ScavengableNMethods::nmethods_do(code_roots);\n-  }\n-  if (so & SO_AllCodeCache) {\n-    assert(code_roots != nullptr, \"must supply closure for code cache\");\n-\n-    \/\/ CMSCollector uses this to do intermediate-strength collections.\n-    \/\/ We scan the entire code cache, since CodeCache::do_unloading is not called.\n-    CodeCache::nmethods_do(code_roots);\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":0,"deletions":32,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -223,9 +223,0 @@\n-  \/\/ The ScanningOption determines which of the roots\n-  \/\/ the closure is applied to:\n-  \/\/ \"SO_None\" does none;\n-  enum ScanningOption {\n-    SO_None                =  0x0,\n-    SO_AllCodeCache        =  0x8,\n-    SO_ScavengeCodeCache   = 0x10\n-  };\n-\n@@ -233,7 +224,0 @@\n-  \/\/ Apply closures on various roots in Young GC or marking\/adjust phases of Full GC.\n-  void process_roots(ScanningOption so,\n-                     OopClosure* strong_roots,\n-                     CLDClosure* strong_cld_closure,\n-                     CLDClosure* weak_cld_closure,\n-                     NMethodToOopClosure* code_roots);\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.hpp","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -280,2 +280,2 @@\n-void TenuredGeneration::scan_old_to_young_refs(HeapWord* saved_top_in_old_gen) {\n-  _rs->scan_old_to_young_refs(this, saved_top_in_old_gen);\n+void TenuredGeneration::scan_old_to_young_refs() {\n+  _rs->scan_old_to_young_refs(this, space()->top());\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-  void scan_old_to_young_refs(HeapWord* saved_top_in_old_gen);\n+  void scan_old_to_young_refs();\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}