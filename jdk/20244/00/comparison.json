{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.reflect.AccessFlag;\n@@ -47,1 +48,1 @@\n-        implements TerminalMethodBuilder, MethodInfo {\n+        implements TerminalMethodBuilder {\n@@ -62,0 +63,1 @@\n+                                 int flags,\n@@ -68,1 +70,1 @@\n-        this.flags = AccessFlags.ofMethod();\n+        this.flags = AccessFlags.ofMethod(flags);\n@@ -75,1 +77,1 @@\n-        if (element instanceof AccessFlags f) this.flags = f;\n+        if (element instanceof AccessFlags f) this.flags = checkFlags(f);\n@@ -79,0 +81,8 @@\n+    private AccessFlags checkFlags(AccessFlags updated) {\n+        boolean wasStatic = updated.has(AccessFlag.STATIC);\n+        boolean isStatic = flags.has(AccessFlag.STATIC);\n+        if (wasStatic != isStatic)\n+            throw new IllegalArgumentException(\"Cannot change ACC_STATIC flag of method\");\n+        return updated;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedMethodBuilder.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-                                                         name, descriptor, null)\n+                                                         name, descriptor, flags, null)\n@@ -91,1 +91,1 @@\n-                                                                  method.methodName(), method.methodType(), method);\n+                                                                  method.methodName(), method.methodType(), method.flags().flagsMask(), method);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ChainedClassBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-        implements TerminalMethodBuilder, WritableElement<MethodModel>, MethodInfo {\n+        implements TerminalMethodBuilder, WritableElement<MethodModel> {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectMethodBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,2 @@\n-public interface MethodInfo {\n+public sealed interface MethodInfo\n+        permits MethodImpl, TerminalMethodBuilder, BufferedMethodBuilder.Model {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/MethodInfo.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-        extends MethodBuilder\n+        extends MethodBuilder, MethodInfo\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TerminalMethodBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.internal.classfile.impl.ChainedClassBuilder;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.classfile.ClassBuilder;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.constant.ClassDesc;\n+\n+import static java.lang.classfile.ClassFile.ACC_PUBLIC;\n+import static java.lang.classfile.ClassFile.ACC_STATIC;\n+import static java.lang.constant.ConstantDescs.MTD_void;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\/*\n+ * @test\n+ * @bug 8336777\n+ * @summary Testing MethodBuilder correctly rejecting resetting the static\n+ *          access flag.\n+ * @run junit MethodBuilderStaticFlagTest\n+ *\/\n+class MethodBuilderStaticFlagTest {\n+\n+    void testClassBuilder(ClassBuilder clb) {\n+        clb.withMethod(\"staticToStatic\", MTD_void, ACC_STATIC, mb -> mb.withFlags(ACC_PUBLIC | ACC_STATIC));\n+        assertThrows(IllegalArgumentException.class, () ->\n+                clb.withMethod(\"staticToInstance\", MTD_void, ACC_STATIC, mb -> mb.withFlags(ACC_PUBLIC)));\n+        assertThrows(IllegalArgumentException.class, () ->\n+                clb.withMethod(\"instanceToStatic\", MTD_void, 0, mb -> mb.withFlags(ACC_PUBLIC | ACC_STATIC)));\n+        clb.withMethod(\"instanceToInstance\", MTD_void, 0, mb -> mb.withFlags(ACC_PUBLIC));\n+    }\n+\n+    @Test\n+    void testDirectBuilder() {\n+        ClassFile.of().build(ClassDesc.of(\"C1\"), this::testClassBuilder);\n+    }\n+\n+    @Test\n+    void testBufferedBuilder() {\n+        var cf = ClassFile.of();\n+        var bytes = cf.build(ClassDesc.of(\"C2\"), _ -> {});\n+        var cm = cf.parse(bytes);\n+\n+        cf.transformClass(cm, new ClassTransform() {\n+            @Override\n+            public void accept(ClassBuilder builder, ClassElement element) {\n+                builder.with(element);\n+            }\n+\n+            @Override\n+            public void atEnd(ClassBuilder clb) {\n+                assertInstanceOf(ChainedClassBuilder.class, clb);\n+                testClassBuilder(clb);\n+            }\n+        }.andThen(ClassBuilder::with));\n+    }\n+}\n","filename":"test\/jdk\/jdk\/classfile\/MethodBuilderStaticFlagTest.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"}]}