{"files":[{"patch":"@@ -34,2 +34,1 @@\n-#include \"castnode.hpp\"\n-#include \"loopnode.hpp\"\n+#include \"opto\/loopnode.hpp\"\n@@ -361,1 +360,1 @@\n-bool CastLLNode::used_at_inner_loop_exit_test() {\n+bool CastLLNode::used_at_inner_loop_exit_test() const {\n","filename":"src\/hotspot\/share\/opto\/castnode.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -142,3 +142,4 @@\n-  bool inner_loop_backedge(Node* proj);\n-  bool cmp_used_at_inner_loop_exit_test(Node* cmp);\n-  bool used_at_inner_loop_exit_test();\n+  static bool inner_loop_backedge(Node* proj);\n+\n+  static bool cmp_used_at_inner_loop_exit_test(Node* cmp);\n+  bool used_at_inner_loop_exit_test() const;\n","filename":"src\/hotspot\/share\/opto\/castnode.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1140,0 +1140,1 @@\n+\/\/ Make a copy of Parse\/Template Assertion predicates below existing predicates at the loop passed as argument\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-ParsePredicate ParsePredicate::clone_to_unswitched_loop(Node* new_control, const bool is_false_path_loop,\n+ParsePredicate ParsePredicate::clone_to_loop(Node* new_control, const bool rewire_uncommon_proj_phi_inputs,\n@@ -89,2 +89,2 @@\n-                                                                               Op_ParsePredicate, is_false_path_loop);\n-  NOT_PRODUCT(trace_cloned_parse_predicate(is_false_path_loop, success_proj));\n+                                                                               Op_ParsePredicate, rewire_uncommon_proj_phi_inputs);\n+  NOT_PRODUCT(trace_cloned_parse_predicate(rewire_uncommon_proj_phi_inputs, success_proj));\n","filename":"src\/hotspot\/share\/opto\/predicates.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -331,1 +331,1 @@\n-  ParsePredicate clone_to_unswitched_loop(Node* new_control, bool is_false_path_loop,\n+  ParsePredicate clone_to_loop(Node* new_control, bool rewire_uncommon_proj_phi_inputs,\n@@ -1177,3 +1177,3 @@\n-  void clone_parse_predicate(const ParsePredicate& parse_predicate, bool is_false_path_loop) {\n-    ParsePredicate cloned_parse_predicate = parse_predicate.clone_to_unswitched_loop(_old_target_loop_entry,\n-                                                                                     is_false_path_loop, _phase);\n+  void clone_parse_predicate(const ParsePredicate& parse_predicate, bool rewire_uncommon_proj_phi_inputs) {\n+    ParsePredicate cloned_parse_predicate = parse_predicate.clone_to_loop(_old_target_loop_entry,\n+                                                                          rewire_uncommon_proj_phi_inputs, _phase);\n","filename":"src\/hotspot\/share\/opto\/predicates.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2021, 2022, 2025 Red Hat, Inc. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestLongRangeChecks.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2025, Red Hat, Inc. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/longcountedloops\/TestShortLoopLostLimit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}