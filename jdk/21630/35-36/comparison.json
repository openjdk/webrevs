{"files":[{"patch":"@@ -31,0 +31,1 @@\n+#include \"opto\/loopnode.hpp\"\n@@ -35,1 +36,0 @@\n-#include \"opto\/loopnode.hpp\"\n","filename":"src\/hotspot\/share\/opto\/castnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1351,1 +1351,1 @@\n-    head->as_CountedLoop()->set_normal_loop();\n+    revert_to_normal_loop(head);\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1577,1 +1577,0 @@\n-  NOT_ZERO(JVMCI_ONLY(declare_constant(Deoptimization::Reason_aliasing)))                       \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2025, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.longcountedloops;\n+import jdk.internal.misc.Unsafe;\n+\n+import java.util.Objects;\n+\/*\n+ * @test\n+ * @bug 8342692\n+ * @summary C2: long counted loop\/long range checks: don't create loop-nest for short running loops\n+ * @modules java.base\/jdk.internal.misc\n+ * @run main\/othervm -XX:-BackgroundCompilation compiler.longcountedloops.TestShortRunningLongCountedLoopVectorization\n+ *\/\n+\n+public class TestShortRunningLongCountedLoopVectorization {\n+    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n+    private static volatile int volatileField;\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 20_000; i++) {\n+            test1();\n+        }\n+    }\n+\n+    static int size = 1024;\n+    static long longSize = size;\n+    static int[] intArray = new int[size];\n+\n+    public static void test1() {\n+        boolean doIt = true;\n+        int localSize = Integer.max(Integer.min(size, 10000), 0);\n+        int i = 0;\n+        while (true) {\n+            synchronized (new Object()) {};\n+            if (i >= localSize) {\n+                break;\n+            }\n+            if (doIt) {\n+                volatileField = 42;\n+                doIt = false;\n+            }\n+            long j = Objects.checkIndex(i, longSize);\n+            UNSAFE.putInt(intArray, Unsafe.ARRAY_INT_BASE_OFFSET + j * Unsafe.ARRAY_INT_INDEX_SCALE, 42);\n+            i++;\n+        }\n+    }\n+};\n","filename":"test\/hotspot\/jtreg\/compiler\/longcountedloops\/TestShortRunningLongCountedLoopVectorization.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}