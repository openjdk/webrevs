{"files":[{"patch":"@@ -292,4 +292,11 @@\n-    \/\/ compress paths and change unreachable cycles to TOP\n-    \/\/ If not, we can update the input infinitely along a MergeMem cycle\n-    \/\/ Equivalent code in PhiNode::Ideal\n-    Node* m  = phase->transform(mmem);\n+    \/\/ IGVN _delay_transform may be set to true and if that is the case and mmem\n+    \/\/ is already a registered node then the validation inside transform will\n+    \/\/ complain.\n+    Node* m = mmem;\n+    PhaseIterGVN* igvn = phase->is_IterGVN();\n+    if (igvn == nullptr || !igvn->delay_transform()) {\n+      \/\/ compress paths and change unreachable cycles to TOP\n+      \/\/ If not, we can update the input infinitely along a MergeMem cycle\n+      \/\/ Equivalent code in PhiNode::Ideal\n+      m = phase->transform(mmem);\n+    }\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8352681\n+ * @summary Check that RAM does not crash when split load through phi\n+ *          tries to register an old node twice with IGVN.\n+ * @run main\/othervm -XX:CompileCommand=compileonly,*TestReduceAllocationAndSetTypeTwice*::*\n+ *                   -XX:CompileCommand=dontinline,*TestReduceAllocationAndSetTypeTwice*::*\n+ *                   -Xcomp compiler.escapeAnalysis.TestReduceAllocationAndSetTypeTwice\n+ * @run main compiler.escapeAnalysis.TestReduceAllocationAndSetTypeTwice\n+ *\/\n+\n+package compiler.escapeAnalysis;\n+\n+public class TestReduceAllocationAndSetTypeTwice {\n+    public static double dummy() {\n+        return 3.1415;\n+    }\n+\n+    public static double test(double param) {\n+        Double double_1 = -26.335025324149626D;\n+        Double double_2 = 87.9546734116494D;\n+\n+        for (int i = 0, j = 0; i < 256; i++) {\n+            if (param != param) {\n+                j--;\n+            } else if (dummy() > 0) {\n+                return (j < 1234 ? double_1 : double_2);\n+            }\n+        }\n+\n+        return 10.0;\n+    }\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 512; i++) {\n+            test(-3.1415);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/escapeAnalysis\/TestReduceAllocationAndSetTypeTwice.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"}]}