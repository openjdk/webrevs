{"files":[{"patch":"@@ -64,9 +64,0 @@\n-class ArchiveHeapWriterConsts : AllStatic {\n-public:\n-  \/\/ The minimum region size of all collectors that are supported by CDS.\n-  \/\/ Currently only G1 is supported. G1's region size depends on -Xmx,\n-  \/\/ but can never be smaller than 1 * M.\n-  \/\/ (TODO: Perhaps change to 256K to be compatible with Shenandoah)\n-  static constexpr int MIN_GC_REGION_ALIGNMENT = 1 * M;\n-};\n-\n@@ -74,1 +65,1 @@\n-class ArchiveHeapWriter : ArchiveHeapWriterConsts {\n+class ArchiveHeapWriter : AllStatic {\n@@ -124,0 +115,6 @@\n+  \/\/ The minimum region size of all collectors that are supported by CDS in\n+  \/\/ ArchiveHeapLoader::can_map() mode. Currently only G1 is supported. G1's region size\n+  \/\/ depends on -Xmx, but can never be smaller than 1 * M.\n+  \/\/ (TODO: Perhaps change to 256K to be compatible with Shenandoah)\n+  static constexpr int MIN_GC_REGION_ALIGNMENT = 1 * M;\n+\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.hpp","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2506,1 +2506,1 @@\n-  if (ShenandoahHeapRegion::region_size_bytes() < ArchiveHeapWriterConsts::MIN_GC_REGION_ALIGNMENT) {\n+  if (ShenandoahHeapRegion::region_size_bytes() < ArchiveHeapWriter::MIN_GC_REGION_ALIGNMENT) {\n@@ -2522,7 +2522,0 @@\n-  \/\/ If the trailing region is not full, we need to adjust its top.\n-  size_t tail = (size % ShenandoahHeapRegion::region_size_words());\n-  if (tail > 0) {\n-    ShenandoahHeapRegion* tail_reg = get_region(start_idx + num_regions);\n-    tail_reg->set_new_top(tail_reg->bottom() + tail);\n-  }\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"}]}