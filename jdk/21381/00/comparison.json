{"files":[{"patch":"@@ -2724,1 +2724,1 @@\n-      \/\/ Fix up any out-of-range offsets.\n+      \/* Fix up any out-of-range offsets. *\/\n@@ -2765,5 +2765,1 @@\n-      \/\/ Fix up any out-of-range offsets.\n-      assert_different_registers(rscratch1, base);\n-      Address addr = Address(base, disp);\n-      addr = __ legitimize_address(addr, (1 << T), rscratch1);\n-      (masm->*insn)(reg, T, addr);\n+      (masm->*insn)(reg, T, Address(base, disp));\n@@ -2824,1 +2820,1 @@\n-  enc_class aarch64_enc_ldrsbw(iRegI dst, memory mem) %{\n+  enc_class aarch64_enc_ldrsbw(iRegI dst, memory1 mem) %{\n@@ -2832,1 +2828,1 @@\n-  enc_class aarch64_enc_ldrsb(iRegI dst, memory mem) %{\n+  enc_class aarch64_enc_ldrsb(iRegI dst, memory1 mem) %{\n@@ -2840,1 +2836,1 @@\n-  enc_class aarch64_enc_ldrb(iRegI dst, memory mem) %{\n+  enc_class aarch64_enc_ldrb(iRegI dst, memory1 mem) %{\n@@ -2848,1 +2844,1 @@\n-  enc_class aarch64_enc_ldrb(iRegL dst, memory mem) %{\n+  enc_class aarch64_enc_ldrb(iRegL dst, memory1 mem) %{\n@@ -2856,1 +2852,1 @@\n-  enc_class aarch64_enc_ldrshw(iRegI dst, memory mem) %{\n+  enc_class aarch64_enc_ldrshw(iRegI dst, memory2 mem) %{\n@@ -2864,1 +2860,1 @@\n-  enc_class aarch64_enc_ldrsh(iRegI dst, memory mem) %{\n+  enc_class aarch64_enc_ldrsh(iRegI dst, memory2 mem) %{\n@@ -2872,1 +2868,1 @@\n-  enc_class aarch64_enc_ldrh(iRegI dst, memory mem) %{\n+  enc_class aarch64_enc_ldrh(iRegI dst, memory2 mem) %{\n@@ -2880,1 +2876,1 @@\n-  enc_class aarch64_enc_ldrh(iRegL dst, memory mem) %{\n+  enc_class aarch64_enc_ldrh(iRegL dst, memory2 mem) %{\n@@ -2888,1 +2884,1 @@\n-  enc_class aarch64_enc_ldrw(iRegI dst, memory mem) %{\n+  enc_class aarch64_enc_ldrw(iRegI dst, memory4 mem) %{\n@@ -2896,1 +2892,1 @@\n-  enc_class aarch64_enc_ldrw(iRegL dst, memory mem) %{\n+  enc_class aarch64_enc_ldrw(iRegL dst, memory4 mem) %{\n@@ -2904,1 +2900,1 @@\n-  enc_class aarch64_enc_ldrsw(iRegL dst, memory mem) %{\n+  enc_class aarch64_enc_ldrsw(iRegL dst, memory4 mem) %{\n@@ -2912,1 +2908,1 @@\n-  enc_class aarch64_enc_ldr(iRegL dst, memory mem) %{\n+  enc_class aarch64_enc_ldr(iRegL dst, memory8 mem) %{\n@@ -2920,1 +2916,1 @@\n-  enc_class aarch64_enc_ldrs(vRegF dst, memory mem) %{\n+  enc_class aarch64_enc_ldrs(vRegF dst, memory4 mem) %{\n@@ -2928,1 +2924,1 @@\n-  enc_class aarch64_enc_ldrd(vRegD dst, memory mem) %{\n+  enc_class aarch64_enc_ldrd(vRegD dst, memory8 mem) %{\n@@ -2936,1 +2932,1 @@\n-  enc_class aarch64_enc_strb(iRegI src, memory mem) %{\n+  enc_class aarch64_enc_strb(iRegI src, memory1 mem) %{\n@@ -2944,1 +2940,1 @@\n-  enc_class aarch64_enc_strb0(memory mem) %{\n+  enc_class aarch64_enc_strb0(memory1 mem) %{\n@@ -2951,1 +2947,1 @@\n-  enc_class aarch64_enc_strh(iRegI src, memory mem) %{\n+  enc_class aarch64_enc_strh(iRegI src, memory2 mem) %{\n@@ -2959,1 +2955,1 @@\n-  enc_class aarch64_enc_strh0(memory mem) %{\n+  enc_class aarch64_enc_strh0(memory2 mem) %{\n@@ -2966,1 +2962,1 @@\n-  enc_class aarch64_enc_strw(iRegI src, memory mem) %{\n+  enc_class aarch64_enc_strw(iRegI src, memory4 mem) %{\n@@ -2974,1 +2970,1 @@\n-  enc_class aarch64_enc_strw0(memory mem) %{\n+  enc_class aarch64_enc_strw0(memory4 mem) %{\n@@ -2981,1 +2977,1 @@\n-  enc_class aarch64_enc_str(iRegL src, memory mem) %{\n+  enc_class aarch64_enc_str(iRegL src, memory8 mem) %{\n@@ -2996,1 +2992,1 @@\n-  enc_class aarch64_enc_str0(memory mem) %{\n+  enc_class aarch64_enc_str0(memory8 mem) %{\n@@ -3003,1 +2999,1 @@\n-  enc_class aarch64_enc_strs(vRegF src, memory mem) %{\n+  enc_class aarch64_enc_strs(vRegF src, memory4 mem) %{\n@@ -3011,1 +3007,1 @@\n-  enc_class aarch64_enc_strd(vRegD src, memory mem) %{\n+  enc_class aarch64_enc_strd(vRegD src, memory8 mem) %{\n@@ -3019,1 +3015,1 @@\n-  enc_class aarch64_enc_strb0_ordered(memory mem) %{\n+  enc_class aarch64_enc_strb0_ordered(memory4 mem) %{\n@@ -3221,1 +3217,1 @@\n-  enc_class aarch64_enc_ldaxr(iRegL dst, memory mem) %{\n+  enc_class aarch64_enc_ldaxr(iRegL dst, memory8 mem) %{\n@@ -3249,1 +3245,1 @@\n-  enc_class aarch64_enc_stlxr(iRegLNoSp src, memory mem) %{\n+  enc_class aarch64_enc_stlxr(iRegLNoSp src, memory8 mem) %{\n@@ -4177,1 +4173,1 @@\n-\/\/ Offset for immediate loads and stores\n+\/\/ Offset for scaled or unscaled immediate loads and stores\n@@ -4180,1 +4176,51 @@\n-  predicate(n->get_int() >= -256 && n->get_int() <= 65520);\n+  predicate(Address::offset_ok_for_immed(n->get_int(), 0));\n+  match(ConI);\n+\n+  op_cost(0);\n+  format %{ %}\n+  interface(CONST_INTER);\n+%}\n+\n+operand immIOffset1()\n+%{\n+  predicate(Address::offset_ok_for_immed(n->get_int(), 0));\n+  match(ConI);\n+\n+  op_cost(0);\n+  format %{ %}\n+  interface(CONST_INTER);\n+%}\n+\n+operand immIOffset2()\n+%{\n+  predicate(Address::offset_ok_for_immed(n->get_int(), 1));\n+  match(ConI);\n+\n+  op_cost(0);\n+  format %{ %}\n+  interface(CONST_INTER);\n+%}\n+\n+operand immIOffset4()\n+%{\n+  predicate(Address::offset_ok_for_immed(n->get_int(), 2));\n+  match(ConI);\n+\n+  op_cost(0);\n+  format %{ %}\n+  interface(CONST_INTER);\n+%}\n+\n+operand immIOffset8()\n+%{\n+  predicate(Address::offset_ok_for_immed(n->get_int(), 3));\n+  match(ConI);\n+\n+  op_cost(0);\n+  format %{ %}\n+  interface(CONST_INTER);\n+%}\n+\n+operand immIOffset16()\n+%{\n+  predicate(Address::offset_ok_for_immed(n->get_int(), 4));\n@@ -4198,0 +4244,50 @@\n+operand immLoffset1()\n+%{\n+  predicate(Address::offset_ok_for_immed(n->get_long(), 0));\n+  match(ConL);\n+\n+  op_cost(0);\n+  format %{ %}\n+  interface(CONST_INTER);\n+%}\n+\n+operand immLoffset2()\n+%{\n+  predicate(Address::offset_ok_for_immed(n->get_long(), 1));\n+  match(ConL);\n+\n+  op_cost(0);\n+  format %{ %}\n+  interface(CONST_INTER);\n+%}\n+\n+operand immLoffset4()\n+%{\n+  predicate(Address::offset_ok_for_immed(n->get_long(), 2));\n+  match(ConL);\n+\n+  op_cost(0);\n+  format %{ %}\n+  interface(CONST_INTER);\n+%}\n+\n+operand immLoffset8()\n+%{\n+  predicate(Address::offset_ok_for_immed(n->get_long(), 3));\n+  match(ConL);\n+\n+  op_cost(0);\n+  format %{ %}\n+  interface(CONST_INTER);\n+%}\n+\n+operand immLoffset16()\n+%{\n+  predicate(Address::offset_ok_for_immed(n->get_long(), 4));\n+  match(ConL);\n+\n+  op_cost(0);\n+  format %{ %}\n+  interface(CONST_INTER);\n+%}\n+\n@@ -5110,1 +5206,15 @@\n-operand indOffI(iRegP reg, immIOffset off)\n+operand indOffI1(iRegP reg, immIOffset1 off)\n+%{\n+  constraint(ALLOC_IN_RC(ptr_reg));\n+  match(AddP reg off);\n+  op_cost(0);\n+  format %{ \"[$reg, $off]\" %}\n+  interface(MEMORY_INTER) %{\n+    base($reg);\n+    index(0xffffffff);\n+    scale(0x0);\n+    disp($off);\n+  %}\n+%}\n+\n+operand indOffI2(iRegP reg, immIOffset2 off)\n@@ -5124,1 +5234,99 @@\n-operand indOffL(iRegP reg, immLOffset off)\n+operand indOffI4(iRegP reg, immIOffset4 off)\n+%{\n+  constraint(ALLOC_IN_RC(ptr_reg));\n+  match(AddP reg off);\n+  op_cost(0);\n+  format %{ \"[$reg, $off]\" %}\n+  interface(MEMORY_INTER) %{\n+    base($reg);\n+    index(0xffffffff);\n+    scale(0x0);\n+    disp($off);\n+  %}\n+%}\n+\n+operand indOffI8(iRegP reg, immIOffset8 off)\n+%{\n+  constraint(ALLOC_IN_RC(ptr_reg));\n+  match(AddP reg off);\n+  op_cost(0);\n+  format %{ \"[$reg, $off]\" %}\n+  interface(MEMORY_INTER) %{\n+    base($reg);\n+    index(0xffffffff);\n+    scale(0x0);\n+    disp($off);\n+  %}\n+%}\n+\n+operand indOffI16(iRegP reg, immIOffset16 off)\n+%{\n+  constraint(ALLOC_IN_RC(ptr_reg));\n+  match(AddP reg off);\n+  op_cost(0);\n+  format %{ \"[$reg, $off]\" %}\n+  interface(MEMORY_INTER) %{\n+    base($reg);\n+    index(0xffffffff);\n+    scale(0x0);\n+    disp($off);\n+  %}\n+%}\n+\n+operand indOffL1(iRegP reg, immLoffset1 off)\n+%{\n+  constraint(ALLOC_IN_RC(ptr_reg));\n+  match(AddP reg off);\n+  op_cost(0);\n+  format %{ \"[$reg, $off]\" %}\n+  interface(MEMORY_INTER) %{\n+    base($reg);\n+    index(0xffffffff);\n+    scale(0x0);\n+    disp($off);\n+  %}\n+%}\n+\n+operand indOffL2(iRegP reg, immLoffset2 off)\n+%{\n+  constraint(ALLOC_IN_RC(ptr_reg));\n+  match(AddP reg off);\n+  op_cost(0);\n+  format %{ \"[$reg, $off]\" %}\n+  interface(MEMORY_INTER) %{\n+    base($reg);\n+    index(0xffffffff);\n+    scale(0x0);\n+    disp($off);\n+  %}\n+%}\n+\n+operand indOffL4(iRegP reg, immLoffset4 off)\n+%{\n+  constraint(ALLOC_IN_RC(ptr_reg));\n+  match(AddP reg off);\n+  op_cost(0);\n+  format %{ \"[$reg, $off]\" %}\n+  interface(MEMORY_INTER) %{\n+    base($reg);\n+    index(0xffffffff);\n+    scale(0x0);\n+    disp($off);\n+  %}\n+%}\n+\n+operand indOffL8(iRegP reg, immLoffset8 off)\n+%{\n+  constraint(ALLOC_IN_RC(ptr_reg));\n+  match(AddP reg off);\n+  op_cost(0);\n+  format %{ \"[$reg, $off]\" %}\n+  interface(MEMORY_INTER) %{\n+    base($reg);\n+    index(0xffffffff);\n+    scale(0x0);\n+    disp($off);\n+  %}\n+%}\n+\n+operand indOffL16(iRegP reg, immLoffset16 off)\n@@ -5500,1 +5708,4 @@\n-opclass vmem(indirect, indIndex, indOffI, indOffL, indOffIN, indOffLN);\n+opclass vmem2(indirect, indIndex, indOffI2, indOffL2);\n+opclass vmem4(indirect, indIndex, indOffI4, indOffL4);\n+opclass vmem8(indirect, indIndex, indOffI8, indOffL8);\n+opclass vmem16(indirect, indIndex, indOffI16, indOffL16);\n@@ -5512,3 +5723,17 @@\n-opclass memory(indirect, indIndexScaled, indIndexScaledI2L, indIndexI2L, indIndex, indOffI, indOffL,\n-               indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN, indOffIN,\n-               indOffLN, indirectX2P, indOffX2P);\n+opclass memory1(indirect, indIndexScaled, indIndexScaledI2L, indIndexI2L, indIndex, indOffI1, indOffL1,\n+                indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN, indirectX2P, indOffX2P);\n+\n+opclass memory2(indirect, indIndexScaled, indIndexScaledI2L, indIndexI2L, indIndex, indOffI2, indOffL2,\n+                indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN, indirectX2P, indOffX2P);\n+\n+opclass memory4(indirect, indIndexScaled, indIndexScaledI2L, indIndexI2L, indIndex, indOffI4, indOffL4,\n+                indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN, indOffIN, indOffLN, indirectX2P, indOffX2P);\n+\n+opclass memory8(indirect, indIndexScaled, indIndexScaledI2L, indIndexI2L, indIndex, indOffI8, indOffL8,\n+                indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN, indOffIN, indOffLN, indirectX2P, indOffX2P);\n+\n+\/\/ All of the memory operands. For the pipeline description.\n+opclass memory(indirect, indIndexScaled, indIndexScaledI2L, indIndexI2L, indIndex,\n+               indOffI1, indOffL1, indOffI2, indOffL2, indOffI4, indOffL4, indOffI8, indOffL8,\n+               indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN, indOffIN, indOffLN, indirectX2P, indOffX2P);\n+\n@@ -6216,1 +6441,1 @@\n-instruct loadB(iRegINoSp dst, memory mem)\n+instruct loadB(iRegINoSp dst, memory1 mem)\n@@ -6230,1 +6455,1 @@\n-instruct loadB2L(iRegLNoSp dst, memory mem)\n+instruct loadB2L(iRegLNoSp dst, memory1 mem)\n@@ -6244,1 +6469,1 @@\n-instruct loadUB(iRegINoSp dst, memory mem)\n+instruct loadUB(iRegINoSp dst, memory1 mem)\n@@ -6258,1 +6483,1 @@\n-instruct loadUB2L(iRegLNoSp dst, memory mem)\n+instruct loadUB2L(iRegLNoSp dst, memory1 mem)\n@@ -6272,1 +6497,1 @@\n-instruct loadS(iRegINoSp dst, memory mem)\n+instruct loadS(iRegINoSp dst, memory2 mem)\n@@ -6286,1 +6511,1 @@\n-instruct loadS2L(iRegLNoSp dst, memory mem)\n+instruct loadS2L(iRegLNoSp dst, memory2 mem)\n@@ -6300,1 +6525,1 @@\n-instruct loadUS(iRegINoSp dst, memory mem)\n+instruct loadUS(iRegINoSp dst, memory2 mem)\n@@ -6314,1 +6539,1 @@\n-instruct loadUS2L(iRegLNoSp dst, memory mem)\n+instruct loadUS2L(iRegLNoSp dst, memory2 mem)\n@@ -6328,1 +6553,1 @@\n-instruct loadI(iRegINoSp dst, memory mem)\n+instruct loadI(iRegINoSp dst, memory4 mem)\n@@ -6342,1 +6567,1 @@\n-instruct loadI2L(iRegLNoSp dst, memory mem)\n+instruct loadI2L(iRegLNoSp dst, memory4 mem)\n@@ -6356,1 +6581,1 @@\n-instruct loadUI2L(iRegLNoSp dst, memory mem, immL_32bits mask)\n+instruct loadUI2L(iRegLNoSp dst, memory4 mem, immL_32bits mask)\n@@ -6370,1 +6595,1 @@\n-instruct loadL(iRegLNoSp dst, memory mem)\n+instruct loadL(iRegLNoSp dst, memory8 mem)\n@@ -6384,1 +6609,1 @@\n-instruct loadRange(iRegINoSp dst, memory mem)\n+instruct loadRange(iRegINoSp dst, memory4 mem)\n@@ -6397,1 +6622,1 @@\n-instruct loadP(iRegPNoSp dst, memory mem)\n+instruct loadP(iRegPNoSp dst, memory8 mem)\n@@ -6411,1 +6636,1 @@\n-instruct loadN(iRegNNoSp dst, memory mem)\n+instruct loadN(iRegNNoSp dst, memory4 mem)\n@@ -6425,1 +6650,1 @@\n-instruct loadKlass(iRegPNoSp dst, memory mem)\n+instruct loadKlass(iRegPNoSp dst, memory8 mem)\n@@ -6439,1 +6664,1 @@\n-instruct loadNKlass(iRegNNoSp dst, memory mem)\n+instruct loadNKlass(iRegNNoSp dst, memory4 mem)\n@@ -6453,1 +6678,1 @@\n-instruct loadF(vRegF dst, memory mem)\n+instruct loadF(vRegF dst, memory4 mem)\n@@ -6467,1 +6692,1 @@\n-instruct loadD(vRegD dst, memory mem)\n+instruct loadD(vRegD dst, memory8 mem)\n@@ -6671,1 +6896,1 @@\n-instruct storeimmCM0(immI0 zero, memory mem)\n+instruct storeimmCM0(immI0 zero, memory1 mem)\n@@ -6686,1 +6911,1 @@\n-instruct storeimmCM0_ordered(immI0 zero, memory mem)\n+instruct storeimmCM0_ordered(immI0 zero, memory1 mem)\n@@ -6701,1 +6926,1 @@\n-instruct storeB(iRegIorL2I src, memory mem)\n+instruct storeB(iRegIorL2I src, memory1 mem)\n@@ -6715,1 +6940,1 @@\n-instruct storeimmB0(immI0 zero, memory mem)\n+instruct storeimmB0(immI0 zero, memory1 mem)\n@@ -6729,1 +6954,1 @@\n-instruct storeC(iRegIorL2I src, memory mem)\n+instruct storeC(iRegIorL2I src, memory2 mem)\n@@ -6742,1 +6967,1 @@\n-instruct storeimmC0(immI0 zero, memory mem)\n+instruct storeimmC0(immI0 zero, memory2 mem)\n@@ -6757,1 +6982,1 @@\n-instruct storeI(iRegIorL2I src, memory mem)\n+instruct storeI(iRegIorL2I src, memory4 mem)\n@@ -6770,1 +6995,1 @@\n-instruct storeimmI0(immI0 zero, memory mem)\n+instruct storeimmI0(immI0 zero, memory4 mem)\n@@ -6784,1 +7009,1 @@\n-instruct storeL(iRegL src, memory mem)\n+instruct storeL(iRegL src, memory8 mem)\n@@ -6798,1 +7023,1 @@\n-instruct storeimmL0(immL0 zero, memory mem)\n+instruct storeimmL0(immL0 zero, memory8 mem)\n@@ -6812,1 +7037,1 @@\n-instruct storeP(iRegP src, memory mem)\n+instruct storeP(iRegP src, memory8 mem)\n@@ -6826,1 +7051,1 @@\n-instruct storeimmP0(immP0 zero, memory mem)\n+instruct storeimmP0(immP0 zero, memory8 mem)\n@@ -6840,1 +7065,1 @@\n-instruct storeN(iRegN src, memory mem)\n+instruct storeN(iRegN src, memory4 mem)\n@@ -6853,1 +7078,1 @@\n-instruct storeImmN0(immN0 zero, memory mem)\n+instruct storeImmN0(immN0 zero, memory4 mem)\n@@ -6867,1 +7092,1 @@\n-instruct storeF(vRegF src, memory mem)\n+instruct storeF(vRegF src, memory4 mem)\n@@ -6884,1 +7109,1 @@\n-instruct storeD(vRegD src, memory mem)\n+instruct storeD(vRegD src, memory8 mem)\n@@ -6898,1 +7123,1 @@\n-instruct storeNKlass(iRegN src, memory mem)\n+instruct storeNKlass(iRegN src, memory4 mem)\n@@ -6917,1 +7142,1 @@\n-instruct prefetchalloc( memory mem ) %{\n+instruct prefetchalloc( memory8 mem ) %{\n@@ -7489,1 +7714,1 @@\n-instruct popCountI_mem(iRegINoSp dst, memory mem, vRegF tmp) %{\n+instruct popCountI_mem(iRegINoSp dst, memory4 mem, vRegF tmp) %{\n@@ -7530,1 +7755,1 @@\n-instruct popCountL_mem(iRegINoSp dst, memory mem, vRegD tmp) %{\n+instruct popCountL_mem(iRegINoSp dst, memory8 mem, vRegD tmp) %{\n@@ -16683,1 +16908,1 @@\n-instruct compressBitsI_memcon(iRegINoSp dst, memory mem, immI mask,\n+instruct compressBitsI_memcon(iRegINoSp dst, memory4 mem, immI mask,\n@@ -16720,1 +16945,1 @@\n-instruct compressBitsL_memcon(iRegLNoSp dst, memory mem, immL mask,\n+instruct compressBitsL_memcon(iRegLNoSp dst, memory8 mem, immL mask,\n@@ -16757,1 +16982,1 @@\n-instruct expandBitsI_memcon(iRegINoSp dst, memory mem, immI mask,\n+instruct expandBitsI_memcon(iRegINoSp dst, memory4 mem, immI mask,\n@@ -16795,1 +17020,1 @@\n-instruct expandBitsL_memcon(iRegINoSp dst, memory mem, immL mask,\n+instruct expandBitsL_memcon(iRegINoSp dst, memory8 mem, immL mask,\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":309,"deletions":84,"binary":false,"changes":393,"status":"modified"},{"patch":"@@ -348,1 +348,1 @@\n-instruct loadV2(vReg dst, vmem mem) %{\n+instruct loadV2(vReg dst, vmem2 mem) %{\n@@ -357,1 +357,1 @@\n-instruct storeV2(vReg src, vmem mem) %{\n+instruct storeV2(vReg src, vmem2 mem) %{\n@@ -366,1 +366,1 @@\n-instruct loadV4(vReg dst, vmem mem) %{\n+instruct loadV4(vReg dst, vmem4 mem) %{\n@@ -375,1 +375,1 @@\n-instruct storeV4(vReg src, vmem mem) %{\n+instruct storeV4(vReg src, vmem4 mem) %{\n@@ -384,1 +384,1 @@\n-instruct loadV8(vReg dst, vmem mem) %{\n+instruct loadV8(vReg dst, vmem8 mem) %{\n@@ -393,1 +393,1 @@\n-instruct storeV8(vReg src, vmem mem) %{\n+instruct storeV8(vReg src, vmem8 mem) %{\n@@ -402,1 +402,1 @@\n-instruct loadV16(vReg dst, vmem mem) %{\n+instruct loadV16(vReg dst, vmem16 mem) %{\n@@ -411,1 +411,1 @@\n-instruct storeV16(vReg src, vmem mem) %{\n+instruct storeV16(vReg src, vmem16 mem) %{\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -341,1 +341,1 @@\n-instruct $1V$2(vReg $3, vmem mem) %{\n+instruct $1V$2(vReg $3, vmem$2 mem) %{\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-  enc_class aarch64_enc_$2($1 dst, memory mem) %{dnl\n+  enc_class aarch64_enc_$2($1 dst, memory$5 mem) %{dnl\n@@ -56,1 +56,1 @@\n-  enc_class aarch64_enc_$2($1 src, memory mem) %{dnl\n+  enc_class aarch64_enc_$2($1 src, memory$5 mem) %{dnl\n@@ -61,1 +61,1 @@\n-  enc_class aarch64_enc_$2`'0(memory mem) %{\n+  enc_class aarch64_enc_$2`'0(memory$4 mem) %{\n@@ -85,1 +85,1 @@\n-  enc_class aarch64_enc_strb0_ordered(memory mem) %{\n+  enc_class aarch64_enc_strb0_ordered(memory4 mem) %{\n","filename":"src\/hotspot\/cpu\/aarch64\/ad_encode.m4","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-instruct xLoadP(iRegPNoSp dst, memory mem, rFlagsReg cr)\n+instruct xLoadP(iRegPNoSp dst, memory8 mem, rFlagsReg cr)\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/x\/x_aarch64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-instruct zLoadP(iRegPNoSp dst, memory mem, rFlagsReg cr)\n+instruct zLoadP(iRegPNoSp dst, memory8 mem, rFlagsReg cr)\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/z_aarch64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,0 +49,9 @@\n+    public static long lseed = 1;\n+    public static int iseed = 2;\n+    public static short sseed = 3;\n+    public static byte bseed = 4;\n+    public static long lres = lseed;\n+    public static int ires = iseed;\n+    public static short sres = sseed;\n+    public static byte bres = bseed;\n+\n@@ -53,1 +62,1 @@\n-        private static final long lseed = 1;\n+        private static final long data;\n@@ -63,0 +72,1 @@\n+            lres += UNSAFE.getLongUnaligned(BYTES, 1030);\n@@ -64,1 +74,2 @@\n-            UNSAFE.putLongUnaligned(BYTES, 127, rawdata+lseed);\n+            UNSAFE.putLongUnaligned(BYTES, 127, lres);\n+            lres += UNSAFE.getLongUnaligned(BYTES, 127);\n@@ -66,1 +77,2 @@\n-            UNSAFE.putLongUnaligned(BYTES, 1096, rawdata-lseed);\n+            UNSAFE.putLongUnaligned(BYTES, 1096, lres);\n+            data = UNSAFE.getLongUnaligned(BYTES, 1096);\n@@ -75,1 +87,1 @@\n-        private static final int iseed = 2;\n+        private static final int data;\n@@ -84,0 +96,1 @@\n+            ires += UNSAFE.getIntUnaligned(BYTES, 274);\n@@ -85,1 +98,2 @@\n-            UNSAFE.putIntUnaligned(BYTES, 255, rawdata + iseed);\n+            UNSAFE.putIntUnaligned(BYTES, 255, ires);\n+            ires += UNSAFE.getIntUnaligned(BYTES, 255);\n@@ -87,1 +101,2 @@\n-            UNSAFE.putIntUnaligned(BYTES, 528, rawdata - iseed);\n+            UNSAFE.putIntUnaligned(BYTES, 528, ires);\n+            data = UNSAFE.getIntUnaligned(BYTES, 528);\n@@ -96,1 +111,1 @@\n-        private static final short sseed = 3;\n+        private static final short data;\n@@ -105,0 +120,1 @@\n+            sres = (short) (sres + UNSAFE.getShortUnaligned(BYTES, 257));\n@@ -106,1 +122,2 @@\n-            UNSAFE.putShortUnaligned(BYTES, 253, (short) (rawdata + sseed));\n+            UNSAFE.putShortUnaligned(BYTES, 253, sres);\n+            sres = (short) (sres + UNSAFE.getShortUnaligned(BYTES, 253));\n@@ -108,1 +125,2 @@\n-            UNSAFE.putShortUnaligned(BYTES, 272, (short) (rawdata - sseed));\n+            UNSAFE.putShortUnaligned(BYTES, 272, sres);\n+            data = UNSAFE.getShortUnaligned(BYTES, 272);\n@@ -117,1 +135,1 @@\n-        private static final byte bseed = 4;\n+        private static final byte data;\n@@ -126,0 +144,1 @@\n+            bres = (byte) (bres + UNSAFE.getByte(BYTES, 272));\n@@ -127,1 +146,2 @@\n-            UNSAFE.putByte(BYTES, 53, (byte) (rawdata + bseed));\n+            UNSAFE.putByte(BYTES, 53, bres);\n+            bres = (byte) (bres + UNSAFE.getByte(BYTES, 53));\n@@ -129,1 +149,2 @@\n-            UNSAFE.putByte(BYTES, 1027, (byte) (rawdata - bseed));\n+            UNSAFE.putByte(BYTES, 1027, bres);\n+            data = UNSAFE.getByte(BYTES, 1027);\n@@ -136,3 +157,1 @@\n-        Asserts.assertEquals(UNSAFE.getLongUnaligned(ta.BYTES, 1030), ta.rawdata, \"putUnaligned long failed!\");\n-        Asserts.assertEquals(UNSAFE.getLongUnaligned(ta.BYTES, 127), ta.rawdata + ta.lseed, \"putUnaligned long failed!\");\n-        Asserts.assertEquals(UNSAFE.getLongUnaligned(ta.BYTES, 1096), ta.rawdata - ta.lseed, \"putUnaligned long failed!\");\n+        Asserts.assertEquals(ta.data, (ta.rawdata + lseed) * 2, \"putUnaligned long failed!\");\n@@ -141,3 +160,1 @@\n-        Asserts.assertEquals(UNSAFE.getIntUnaligned(tb.BYTES, 274), tb.rawdata, \"putUnaligned int failed!\");\n-        Asserts.assertEquals(UNSAFE.getIntUnaligned(tb.BYTES, 255), tb.rawdata + tb.iseed, \"putUnaligned int failed!\");\n-        Asserts.assertEquals(UNSAFE.getIntUnaligned(tb.BYTES, 528), tb.rawdata - tb.iseed, \"putUnaligned int failed!\");\n+        Asserts.assertEquals(tb.data, (tb.rawdata + iseed) * 2, \"putUnaligned int failed!\");\n@@ -146,3 +163,1 @@\n-        Asserts.assertEquals(UNSAFE.getShortUnaligned(tc.BYTES, 257), tc.rawdata, \"putUnaligned short failed!\");\n-        Asserts.assertEquals(UNSAFE.getShortUnaligned(tc.BYTES, 253), (short) (tc.rawdata + tc.sseed), \"putUnaligned short failed!\");\n-        Asserts.assertEquals(UNSAFE.getShortUnaligned(tc.BYTES, 272), (short) (tc.rawdata - tc.sseed), \"putUnaligned short failed!\");\n+        Asserts.assertEquals(tc.data, (short) (((short) (tc.rawdata + sseed)) * 2), \"putUnaligned short failed!\");\n@@ -151,3 +166,1 @@\n-        Asserts.assertEquals(UNSAFE.getByte(td.BYTES, 272), td.rawdata, \"put byte failed!\");\n-        Asserts.assertEquals(UNSAFE.getByte(td.BYTES, 53), (byte) (td.rawdata + td.bseed), \"put byte failed!\");\n-        Asserts.assertEquals(UNSAFE.getByte(td.BYTES, 1027), (byte) (td.rawdata - td.bseed), \"put byte failed!\");\n+        Asserts.assertEquals(td.data, (byte) (((byte) (td.rawdata + bseed)) * 2), \"put byte failed!\");\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestUnalignedAccess.java","additions":37,"deletions":24,"binary":false,"changes":61,"status":"modified"}]}