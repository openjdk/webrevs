{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,0 +125,1 @@\n+    OPENJDK_TARGET_OS_TYPE := unix\n@@ -126,1 +127,0 @@\n-    LD_OUT_OPTION := -o$(SPACE)\n","filename":"make\/Hsdis.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+LIB := @BUILD_LIB@\n","filename":"make\/autoconf\/buildjdk-spec.gmk.template","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,1 +96,1 @@\n-    BASIC_LDFLAGS=\"-nologo -opt:ref\"\n+    BASIC_LDFLAGS=\"-opt:ref\"\n","filename":"make\/autoconf\/flags-ldflags.m4","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,3 +36,0 @@\n-  elif test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n-    # lib.exe is used as AR to create static libraries.\n-    ARFLAGS=\"-nologo -NODEFAULTLIB:MSVCRT\"\n@@ -46,0 +43,12 @@\n+AC_DEFUN([FLAGS_SETUP_LIBFLAGS],\n+[\n+    # LIB is used to create static libraries on Windows\n+  if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n+    LIBFLAGS=\"-nodefaultlib:msvcrt\"\n+  else\n+    LIBFLAGS=\"\"\n+  fi\n+\n+  AC_SUBST(LIBFLAGS)\n+])\n+\n","filename":"make\/autoconf\/flags-other.m4","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -367,2 +367,0 @@\n-    LD_OUT_OPTION=-out:\n-    AR_OUT_OPTION=-out:\n@@ -373,8 +371,0 @@\n-    # When linking, how to specify the output\n-    LD_OUT_OPTION='-o$(SPACE)'\n-    # When archiving, how to specify the destination static archive.\n-    if test \"x$OPENJDK_TARGET_OS\" = xmacosx; then\n-      AR_OUT_OPTION='-r -cs$(SPACE)'\n-    else\n-      AR_OUT_OPTION='-rcs$(SPACE)'\n-    fi\n@@ -383,2 +373,0 @@\n-  AC_SUBST(LD_OUT_OPTION)\n-  AC_SUBST(AR_OUT_OPTION)\n@@ -426,0 +414,1 @@\n+  FLAGS_SETUP_LIBFLAGS\n","filename":"make\/autoconf\/flags.m4","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -501,2 +501,0 @@\n-LD_OUT_OPTION := @LD_OUT_OPTION@\n-AR_OUT_OPTION := @AR_OUT_OPTION@\n@@ -607,1 +605,0 @@\n-# AR is used to create a static library (is ar in unix, lib.exe in windows)\n@@ -610,1 +607,2 @@\n-\n+LIB := @LIB@\n+LIBFLAGS := @LIBFLAGS@\n","filename":"make\/autoconf\/spec.gmk.template","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -735,1 +735,1 @@\n-  # Setup the archiver (AR)\n+  # Setup tools for creating static libraries (AR\/LIB)\n@@ -738,2 +738,1 @@\n-    # The corresponding ar tool is lib.exe (used to create static libraries)\n-    UTIL_LOOKUP_TOOLCHAIN_PROGS(AR, lib)\n+    UTIL_LOOKUP_TOOLCHAIN_PROGS(LIB, lib)\n","filename":"make\/autoconf\/toolchain.m4","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -42,1 +42,2 @@\n-include native\/Link.gmk\n+include native\/LinkUnix.gmk\n+include native\/LinkWindows.gmk\n@@ -75,1 +76,2 @@\n-#   ARFLAGS the archiver flags to be used\n+#   ARFLAGS the archiver flags to be used on unix platforms\n+#   LIBFLAGS the flags for the lib tool used on windows\n@@ -201,1 +203,3 @@\n-  $$(eval $$(call SetupLinking,$1))\n+  ifeq ($(call isTargetOsType, unix), true)\n+    $$(eval $$(call SetupLinkingUnix,$1))\n+  endif\n@@ -206,1 +210,5 @@\n-  $$(eval $$(call CreateLinkedResult,$1))\n+  ifeq ($(call isTargetOsType, unix), true)\n+    $$(eval $$(call CreateLinkedResultUnix,$1))\n+  else\n+    $$(eval $$(call CreateLinkedResultWindows,$1))\n+  endif\n","filename":"make\/common\/NativeCompilation.gmk","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1,262 +0,0 @@\n-#\n-# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-################################################################################\n-# This file contains functionality related to linking a native binary;\n-# creating either a dynamic library, a static library or an executable.\n-\n-\n-################################################################################\n-# GetEntitlementsFile\n-# Find entitlements file for executable when signing on macosx. If no\n-# specialized file is found, returns the default file.\n-# This macro might be called from custom makefiles.\n-# $1 Executable to find entitlements file for.\n-ENTITLEMENTS_DIR := $(TOPDIR)\/make\/data\/macosxsigning\n-ifeq ($(MACOSX_CODESIGN_MODE), debug)\n-  CODESIGN_PLIST_SUFFIX := -debug\n-else\n-  CODESIGN_PLIST_SUFFIX :=\n-endif\n-DEFAULT_ENTITLEMENTS_FILE := $(ENTITLEMENTS_DIR)\/default$(CODESIGN_PLIST_SUFFIX).plist\n-\n-GetEntitlementsFile = \\\n-    $(foreach f, $(ENTITLEMENTS_DIR)\/$(strip $(notdir $1))$(CODESIGN_PLIST_SUFFIX).plist, \\\n-      $(if $(wildcard $f), $f, $(DEFAULT_ENTITLEMENTS_FILE)) \\\n-    )\n-\n-################################################################################\n-define SetupLinking\n-  ifneq ($(DISABLE_MAPFILES), true)\n-    $1_REAL_MAPFILE := $$($1_MAPFILE)\n-  endif\n-\n-  ifneq ($$($1_REAL_MAPFILE), )\n-    $1_EXTRA_LDFLAGS += $(call SET_SHARED_LIBRARY_MAPFILE,$$($1_REAL_MAPFILE))\n-  endif\n-\n-  # Unless specifically set, stripping should only happen if symbols are also\n-  # being copied.\n-  $$(call SetIfEmpty, $1_STRIP_SYMBOLS, $$($1_COPY_DEBUG_SYMBOLS))\n-\n-  ifneq ($$($1_STRIP_SYMBOLS), false)\n-    ifneq ($$($1_STRIP), )\n-      # Default to using the global STRIPFLAGS. Allow for overriding with an empty value\n-      $1_STRIPFLAGS ?= $(STRIPFLAGS)\n-      $1_STRIP_CMD := $$($1_STRIP) $$($1_STRIPFLAGS) $$($1_TARGET)\n-    endif\n-  endif\n-endef\n-\n-################################################################################\n-define CreateLinkedResult\n-  ifeq ($$($1_TYPE), STATIC_LIBRARY)\n-    $$(eval $$(call CreateStaticLibrary,$1))\n-  else\n-    $$(eval $$(call CreateDynamicLibraryOrExecutable,$1))\n-  endif\n-endef\n-\n-################################################################################\n-define CreateStaticLibrary\n-  # Include partial linking when building the static library with clang on linux.\n-  ifeq ($(call isTargetOs, linux), true)\n-    ifneq ($(findstring $(TOOLCHAIN_TYPE), clang), )\n-      $1_ENABLE_PARTIAL_LINKING := true\n-    endif\n-  endif\n-\n-  $1_VARDEPS := $$($1_AR) $$(ARFLAGS) $$($1_ARFLAGS) $$($1_LIBS) \\\n-      $$($1_EXTRA_LIBS)\n-  ifeq ($$($1_ENABLE_PARTIAL_LINKING), true)\n-    $1_VARDEPS += $$($1_LD) $$($1_SYSROOT_LDFLAGS)\n-  endif\n-  $1_VARDEPS_FILE := $$(call DependOnVariable, $1_VARDEPS, \\\n-      $$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).vardeps)\n-\n-  # Generating a static library, ie object file archive.\n-  ifeq ($(STATIC_BUILD), true)\n-    ifeq ($$($1_USE_MAPFILE_FOR_SYMBOLS), true)\n-      STATIC_MAPFILE_DEP := $$($1_MAPFILE)\n-    endif\n-  endif\n-\n-  $1_TARGET_DEPS := $$($1_ALL_OBJS) $$($1_RES) $$($1_VARDEPS_FILE) $$(STATIC_MAPFILE_DEP)\n-\n-  $1_AR_OBJ_ARG := $$($1_LD_OBJ_ARG)\n-  # With clang on linux, partial linking is enabled and 'AR' takes the output\n-  # object from the partial linking step.\n-  ifeq ($$($1_ENABLE_PARTIAL_LINKING), true)\n-    $1_TARGET_RELOCATABLE := $$($1_OBJECT_DIR)\/$$($1_PREFIX)$$($1_NAME)_relocatable$(OBJ_SUFFIX)\n-    $1_AR_OBJ_ARG := $$($1_TARGET_RELOCATABLE)\n-  endif\n-\n-  $$($1_TARGET): $$($1_TARGET_DEPS)\n-        ifneq ($$($1_OBJ_FILE_LIST), )\n-          ifeq ($$($1_LINK_OBJS_RELATIVE), true)\n-\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS_RELATIVE, $$($1_OBJ_FILE_LIST)))\n-          else\n-\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS, $$($1_OBJ_FILE_LIST)))\n-          endif\n-        endif\n-\t$$(call LogInfo, Building static library $$($1_BASENAME))\n-\t$$(call MakeDir, $$($1_OUTPUT_DIR) $$($1_SYMBOLS_DIR))\n-        # Do partial linking.\n-        ifeq ($$($1_ENABLE_PARTIAL_LINKING), true)\n-\t  $$(call ExecuteWithLog, $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_partial_link, \\\n-\t    $(if $$($1_LINK_OBJS_RELATIVE), $$(CD) $$(OUTPUTDIR) ; ) \\\n-\t      $$($1_LD) $(LDFLAGS_CXX_PARTIAL_LINKING) $$($1_SYSROOT_LDFLAGS) \\\n-\t        $(LD_OUT_OPTION)$$($1_TARGET_RELOCATABLE) \\\n-\t        $$($1_LD_OBJ_ARG))\n-        endif\n-\t$$(call ExecuteWithLog, $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_link, \\\n-\t  $(if $$($1_LINK_OBJS_RELATIVE), $$(CD) $$(OUTPUTDIR) ; ) \\\n-\t    $$($1_AR) $$(ARFLAGS) $$($1_ARFLAGS) $(AR_OUT_OPTION)$$($1_TARGET) $$($1_AR_OBJ_ARG) \\\n-\t        $$($1_RES))\n-        ifeq ($(STATIC_BUILD), true)\n-          ifeq ($$($1_USE_MAPFILE_FOR_SYMBOLS), true)\n-\t    $(CP) $$($1_MAPFILE) $$(@D)\/$$(basename $$(@F)).symbols\n-          else\n-            # get the exported symbols from mapfiles and if there\n-            # is no mapfile, get them from the archive\n-\t    $(RM) $$(@D)\/$$(basename $$(@F)).symbols; \\\n-\t    if [ ! -z $$($1_MAPFILE) -a -e $$($1_MAPFILE) ]; then \\\n-\t      $(ECHO) \"Getting symbols from mapfile $$($1_MAPFILE)\"; \\\n-\t      $(AWK) '\/global:\/','\/local:\/' $$($1_MAPFILE) | \\\n-\t\t  $(SED) -e 's\/#.*\/\/;s\/global:\/\/;s\/local:\/\/;s\/\\;\/\/;s\/^[ \t]*\/_\/;\/^_$$$$\/d' | \\\n-\t\t  $(EGREP) -v \"JNI_OnLoad|JNI_OnUnload|Agent_OnLoad|Agent_OnUnload|Agent_OnAttach\" > \\\n-\t\t  $$(@D)\/$$(basename $$(@F)).symbols || true; \\\n-\t      $(NM) $(NMFLAGS) $$($1_TARGET) | $(GREP)  \" T \" | \\\n-\t\t  $(EGREP) \"JNI_OnLoad|JNI_OnUnload|Agent_OnLoad|Agent_OnUnload|Agent_OnAttach\" | \\\n-\t\t  $(CUT) -d ' ' -f 3 >>  $$(@D)\/$$(basename $$(@F)).symbols || true;\\\n-\t    else \\\n-\t      $(ECHO) \"Getting symbols from nm\"; \\\n-\t      $(NM) $(NMFLAGS) -m $$($1_TARGET) | $(GREP)  \"__TEXT\" | \\\n-\t\t  $(EGREP) -v \"non-external|private extern|__TEXT,__eh_frame\" | \\\n-\t\t  $(SED) -e  's\/.* \/\/' > $$(@D)\/$$(basename $$(@F)).symbols; \\\n-\t    fi\n-          endif\n-        endif\n-endef\n-\n-################################################################################\n-define CreateDynamicLibraryOrExecutable\n-  # A shared dynamic library or an executable binary has been specified\n-  ifeq ($$($1_TYPE), LIBRARY)\n-    # Generating a dynamic library.\n-    $1_EXTRA_LDFLAGS += $$(call SET_SHARED_LIBRARY_NAME,$$($1_BASENAME))\n-\n-    # Create loadmap on AIX. Helps in diagnosing some problems.\n-    ifneq ($(COMPILER_BINDCMD_FILE_FLAG), )\n-      $1_EXTRA_LDFLAGS += $(COMPILER_BINDCMD_FILE_FLAG)$$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).loadmap\n-    endif\n-  endif\n-\n-  ifeq ($(call isTargetOs, windows), true)\n-    ifeq ($$($1_EMBED_MANIFEST), true)\n-      $1_EXTRA_LDFLAGS += -manifest:embed\n-    endif\n-\n-    $1_IMPORT_LIBRARY := $$($1_OBJECT_DIR)\/$$($1_NAME).lib\n-    $1_EXTRA_LDFLAGS += \"-implib:$$($1_IMPORT_LIBRARY)\"\n-    ifeq ($$($1_TYPE), LIBRARY)\n-      # To properly trigger downstream dependants of the import library, just as\n-      # for debug files, we must have a recipe in the rule. To avoid rerunning\n-      # the recipe every time have it touch the target. If an import library\n-      # file is deleted by something external, explicitly delete the target to\n-      # trigger a rebuild of both.\n-      ifneq ($$(wildcard $$($1_IMPORT_LIBRARY)), $$($1_IMPORT_LIBRARY))\n-        $$(call LogDebug, Deleting $$($1_BASENAME) because import library is missing)\n-        $$(shell $(RM) $$($1_TARGET))\n-      endif\n-      $$($1_IMPORT_LIBRARY): $$($1_TARGET)\n-\t$(TOUCH) $$@\n-\n-      $1 += $$($1_IMPORT_LIBRARY)\n-    endif\n-  endif\n-\n-  $1_VARDEPS := $$($1_LD) $$($1_SYSROOT_LDFLAGS) $$($1_LDFLAGS) $$($1_EXTRA_LDFLAGS) \\\n-      $$($1_LIBS) $$($1_EXTRA_LIBS) $$($1_MT) \\\n-      $$($1_CREATE_DEBUGINFO_CMDS) $$($1_MANIFEST_VERSION) \\\n-      $$($1_STRIP_CMD) $$($1_CREATE_DEBUGLINK_CMDS)\n-  $1_VARDEPS_FILE := $$(call DependOnVariable, $1_VARDEPS, \\\n-      $$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).vardeps)\n-\n-  $1_TARGET_DEPS := $$($1_ALL_OBJS) $$($1_RES) $$($1_MANIFEST) \\\n-      $$($1_REAL_MAPFILE) $$($1_VARDEPS_FILE)\n-\n-  $$($1_TARGET): $$($1_TARGET_DEPS)\n-        ifneq ($$($1_OBJ_FILE_LIST), )\n-          ifeq ($$($1_LINK_OBJS_RELATIVE), true)\n-\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS_RELATIVE, $$($1_OBJ_FILE_LIST)))\n-          else\n-\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS, $$($1_OBJ_FILE_LIST)))\n-          endif\n-        endif\n-        # Keep as much as possible on one execution line for best performance\n-        # on Windows\n-\t$$(call LogInfo, Linking $$($1_BASENAME))\n-\t$$(call MakeDir, $$($1_OUTPUT_DIR) $$($1_SYMBOLS_DIR))\n-        ifeq ($(call isTargetOs, windows), true)\n-\t  $$(call ExecuteWithLog, $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_link, \\\n-\t      $$($1_LD) $$($1_LDFLAGS) $$($1_EXTRA_LDFLAGS) $$($1_SYSROOT_LDFLAGS) \\\n-\t          $(LD_OUT_OPTION)$$($1_TARGET) $$($1_LD_OBJ_ARG) $$($1_RES) \\\n-\t          $$($1_LIBS) $$($1_EXTRA_LIBS)) \\\n-\t      | $(GREP) -v \"^   Creating library .*\\.lib and object .*\\.exp\" || \\\n-\t          test \"$$$$?\" = \"1\" ; \\\n-\t  $$($1_CREATE_DEBUGINFO_CMDS)\n-\t  $$($1_STRIP_CMD)\n-\t  $$($1_CREATE_DEBUGLINK_CMDS)\n-          ifeq ($(call isBuildOsEnv, windows.wsl2), true)\n-\t    $$(CHMOD) +x $$($1_TARGET)\n-          endif\n-        else\n-\t  $$(call ExecuteWithLog, $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_link, \\\n-\t      $$(if $$($1_LINK_OBJS_RELATIVE), $$(CD) $$(OUTPUTDIR) ; ) \\\n-\t      $$($1_LD) $$($1_LDFLAGS) $$($1_EXTRA_LDFLAGS) $$($1_SYSROOT_LDFLAGS) \\\n-\t          $(LD_OUT_OPTION)$$($1_TARGET) $$($1_LD_OBJ_ARG) $$($1_RES) \\\n-\t          $$($1_LIBS) $$($1_EXTRA_LIBS)) ; \\\n-\t  $$($1_CREATE_DEBUGINFO_CMDS)\n-\t  $$($1_STRIP_CMD)\n-\t  $$($1_CREATE_DEBUGLINK_CMDS)\n-        endif\n-        ifeq ($(call isTargetOs, windows), true)\n-          ifneq ($$($1_MANIFEST), )\n-\t    $$($1_MT) -nologo -manifest $$($1_MANIFEST) -identity:\"$$($1_NAME).exe, version=$$($1_MANIFEST_VERSION)\" -outputresource:$$@;#1\n-          endif\n-        endif\n-        # On macosx, optionally run codesign on every binary.\n-        # Remove signature explicitly first to avoid warnings if the linker\n-        # added a default adhoc signature.\n-        ifeq ($(MACOSX_CODESIGN_MODE), hardened)\n-\t  $(CODESIGN) --remove-signature $$@\n-\t  $(CODESIGN) -f -s \"$(MACOSX_CODESIGN_IDENTITY)\" --timestamp --options runtime \\\n-\t      --entitlements $$(call GetEntitlementsFile, $$@) $$@\n-        else ifeq ($(MACOSX_CODESIGN_MODE), debug)\n-\t  $(CODESIGN) --remove-signature $$@\n-\t  $(CODESIGN) -f -s - --entitlements $$(call GetEntitlementsFile, $$@) $$@\n-        endif\n-endef\n","filename":"make\/common\/native\/Link.gmk","additions":0,"deletions":262,"binary":false,"changes":262,"status":"deleted"},{"patch":"@@ -0,0 +1,216 @@\n+#\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+################################################################################\n+# This file contains functionality related to linking a native binary;\n+# creating either a dynamic library, a static library or an executable.\n+\n+\n+################################################################################\n+# GetEntitlementsFile\n+# Find entitlements file for executable when signing on macosx. If no\n+# specialized file is found, returns the default file.\n+# This macro might be called from custom makefiles.\n+# $1 Executable to find entitlements file for.\n+ENTITLEMENTS_DIR := $(TOPDIR)\/make\/data\/macosxsigning\n+ifeq ($(MACOSX_CODESIGN_MODE), debug)\n+  CODESIGN_PLIST_SUFFIX := -debug\n+else\n+  CODESIGN_PLIST_SUFFIX :=\n+endif\n+DEFAULT_ENTITLEMENTS_FILE := $(ENTITLEMENTS_DIR)\/default$(CODESIGN_PLIST_SUFFIX).plist\n+\n+GetEntitlementsFile = \\\n+    $(foreach f, $(ENTITLEMENTS_DIR)\/$(strip $(notdir $1))$(CODESIGN_PLIST_SUFFIX).plist, \\\n+      $(if $(wildcard $f), $f, $(DEFAULT_ENTITLEMENTS_FILE)) \\\n+    )\n+\n+################################################################################\n+define SetupLinkingUnix\n+  ifneq ($(DISABLE_MAPFILES), true)\n+    $1_REAL_MAPFILE := $$($1_MAPFILE)\n+  endif\n+\n+  ifneq ($$($1_REAL_MAPFILE), )\n+    $1_EXTRA_LDFLAGS += $(call SET_SHARED_LIBRARY_MAPFILE,$$($1_REAL_MAPFILE))\n+  endif\n+\n+  # Unless specifically set, stripping should only happen if symbols are also\n+  # being copied.\n+  $$(call SetIfEmpty, $1_STRIP_SYMBOLS, $$($1_COPY_DEBUG_SYMBOLS))\n+\n+  ifneq ($$($1_STRIP_SYMBOLS), false)\n+    # Default to using the global STRIPFLAGS. Allow for overriding with an\n+    # empty value\n+    $1_STRIPFLAGS ?= $(STRIPFLAGS)\n+    $1_STRIP_CMD := $$($1_STRIP) $$($1_STRIPFLAGS) $$($1_TARGET)\n+  endif\n+endef\n+\n+################################################################################\n+define CreateLinkedResultUnix\n+  ifeq ($$($1_TYPE), STATIC_LIBRARY)\n+    $$(eval $$(call CreateStaticLibraryUnix,$1))\n+  else\n+    $$(eval $$(call CreateDynamicLibraryOrExecutableUnix,$1))\n+  endif\n+endef\n+\n+################################################################################\n+define CreateStaticLibraryUnix\n+  # Include partial linking when building the static library with clang on linux\n+  ifeq ($(call isTargetOs, linux), true)\n+    ifneq ($(findstring $(TOOLCHAIN_TYPE), clang), )\n+      $1_ENABLE_PARTIAL_LINKING := true\n+    endif\n+  endif\n+\n+  $1_VARDEPS := $$($1_AR) $$(ARFLAGS) $$($1_ARFLAGS) $$($1_LIBS) \\\n+      $$($1_EXTRA_LIBS)\n+  ifeq ($$($1_ENABLE_PARTIAL_LINKING), true)\n+    $1_VARDEPS += $$($1_LD) $$($1_SYSROOT_LDFLAGS)\n+  endif\n+  $1_VARDEPS_FILE := $$(call DependOnVariable, $1_VARDEPS, \\\n+      $$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).vardeps)\n+\n+  # Generating a static library, ie object file archive.\n+  ifeq ($(STATIC_BUILD), true)\n+    ifeq ($$($1_USE_MAPFILE_FOR_SYMBOLS), true)\n+      STATIC_MAPFILE_DEP := $$($1_MAPFILE)\n+    endif\n+  endif\n+\n+  $1_TARGET_DEPS := $$($1_ALL_OBJS) $$($1_RES) $$($1_VARDEPS_FILE) \\\n+      $$(STATIC_MAPFILE_DEP)\n+\n+  $1_AR_OBJ_ARG := $$($1_LD_OBJ_ARG)\n+  # With clang on linux, partial linking is enabled and 'AR' takes the output\n+  # object from the partial linking step.\n+  ifeq ($$($1_ENABLE_PARTIAL_LINKING), true)\n+    $1_TARGET_RELOCATABLE := $$($1_OBJECT_DIR)\/$$($1_PREFIX)$$($1_NAME)_relocatable$(OBJ_SUFFIX)\n+    $1_AR_OBJ_ARG := $$($1_TARGET_RELOCATABLE)\n+  endif\n+\n+  $$($1_TARGET): $$($1_TARGET_DEPS)\n+        ifneq ($$($1_OBJ_FILE_LIST), )\n+          ifeq ($$($1_LINK_OBJS_RELATIVE), true)\n+\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS_RELATIVE, $$($1_OBJ_FILE_LIST)))\n+          else\n+\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS, $$($1_OBJ_FILE_LIST)))\n+          endif\n+        endif\n+\t$$(call LogInfo, Building static library $$($1_BASENAME))\n+\t$$(call MakeDir, $$($1_OUTPUT_DIR) $$($1_SYMBOLS_DIR))\n+        # Do partial linking.\n+        ifeq ($$($1_ENABLE_PARTIAL_LINKING), true)\n+\t  $$(call ExecuteWithLog, $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_partial_link, \\\n+\t    $(if $$($1_LINK_OBJS_RELATIVE), $$(CD) $$(OUTPUTDIR) ; ) \\\n+\t      $$($1_LD) $(LDFLAGS_CXX_PARTIAL_LINKING) $$($1_SYSROOT_LDFLAGS) \\\n+\t        -o $$($1_TARGET_RELOCATABLE) \\\n+\t        $$($1_LD_OBJ_ARG))\n+        endif\n+\t$$(call ExecuteWithLog, $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_link, \\\n+\t  $(if $$($1_LINK_OBJS_RELATIVE), $$(CD) $$(OUTPUTDIR) ; ) \\\n+\t    $$($1_AR) $$(ARFLAGS) $$($1_ARFLAGS) -r -cs $$($1_TARGET) \\\n+\t        $$($1_AR_OBJ_ARG) $$($1_RES))\n+        ifeq ($(STATIC_BUILD), true)\n+          ifeq ($$($1_USE_MAPFILE_FOR_SYMBOLS), true)\n+\t    $(CP) $$($1_MAPFILE) $$(@D)\/$$(basename $$(@F)).symbols\n+          else\n+            # get the exported symbols from mapfiles and if there\n+            # is no mapfile, get them from the archive\n+\t    $(RM) $$(@D)\/$$(basename $$(@F)).symbols; \\\n+\t    if [ ! -z $$($1_MAPFILE) -a -e $$($1_MAPFILE) ]; then \\\n+\t      $(ECHO) \"Getting symbols from mapfile $$($1_MAPFILE)\"; \\\n+\t      $(AWK) '\/global:\/','\/local:\/' $$($1_MAPFILE) | \\\n+\t\t  $(SED) -e 's\/#.*\/\/;s\/global:\/\/;s\/local:\/\/;s\/\\;\/\/;s\/^[ \t]*\/_\/;\/^_$$$$\/d' | \\\n+\t\t  $(EGREP) -v \"JNI_OnLoad|JNI_OnUnload|Agent_OnLoad|Agent_OnUnload|Agent_OnAttach\" > \\\n+\t\t  $$(@D)\/$$(basename $$(@F)).symbols || true; \\\n+\t      $(NM) $(NMFLAGS) $$($1_TARGET) | $(GREP)  \" T \" | \\\n+\t\t  $(EGREP) \"JNI_OnLoad|JNI_OnUnload|Agent_OnLoad|Agent_OnUnload|Agent_OnAttach\" | \\\n+\t\t  $(CUT) -d ' ' -f 3 >>  $$(@D)\/$$(basename $$(@F)).symbols || true;\\\n+\t    else \\\n+\t      $(ECHO) \"Getting symbols from nm\"; \\\n+\t      $(NM) $(NMFLAGS) -m $$($1_TARGET) | $(GREP)  \"__TEXT\" | \\\n+\t\t  $(EGREP) -v \"non-external|private extern|__TEXT,__eh_frame\" | \\\n+\t\t  $(SED) -e  's\/.* \/\/' > $$(@D)\/$$(basename $$(@F)).symbols; \\\n+\t    fi\n+          endif\n+        endif\n+endef\n+\n+################################################################################\n+define CreateDynamicLibraryOrExecutableUnix\n+  # A shared dynamic library or an executable binary has been specified\n+  ifeq ($$($1_TYPE), LIBRARY)\n+    # Generating a dynamic library.\n+    $1_EXTRA_LDFLAGS += $$(call SET_SHARED_LIBRARY_NAME,$$($1_BASENAME))\n+\n+    # Create loadmap on AIX. Helps in diagnosing some problems.\n+    ifneq ($(COMPILER_BINDCMD_FILE_FLAG), )\n+      $1_EXTRA_LDFLAGS += $(COMPILER_BINDCMD_FILE_FLAG)$$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).loadmap\n+    endif\n+  endif\n+\n+  $1_VARDEPS := $$($1_LD) $$($1_SYSROOT_LDFLAGS) $$($1_LDFLAGS) \\\n+      $$($1_EXTRA_LDFLAGS) $$($1_LIBS) $$($1_EXTRA_LIBS) \\\n+      $$($1_CREATE_DEBUGINFO_CMDS) $$($1_STRIP_CMD) $$($1_CREATE_DEBUGLINK_CMDS)\n+  $1_VARDEPS_FILE := $$(call DependOnVariable, $1_VARDEPS, \\\n+      $$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).vardeps)\n+\n+  $1_TARGET_DEPS := $$($1_ALL_OBJS) $$($1_REAL_MAPFILE) $$($1_VARDEPS_FILE)\n+\n+  $$($1_TARGET): $$($1_TARGET_DEPS)\n+        ifneq ($$($1_OBJ_FILE_LIST), )\n+          ifeq ($$($1_LINK_OBJS_RELATIVE), true)\n+\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS_RELATIVE, $$($1_OBJ_FILE_LIST)))\n+          else\n+\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS, $$($1_OBJ_FILE_LIST)))\n+          endif\n+        endif\n+\t$$(call LogInfo, Linking $$($1_BASENAME))\n+\t$$(call MakeDir, $$($1_OUTPUT_DIR) $$($1_SYMBOLS_DIR))\n+\t$$(call ExecuteWithLog, $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_link, \\\n+\t    $$(if $$($1_LINK_OBJS_RELATIVE), $$(CD) $$(OUTPUTDIR) ; ) \\\n+\t    $$($1_LD) $$($1_LDFLAGS) $$($1_EXTRA_LDFLAGS) \\\n+\t        $$($1_SYSROOT_LDFLAGS) -o $$($1_TARGET) $$($1_LD_OBJ_ARG) \\\n+\t        $$($1_LIBS) $$($1_EXTRA_LIBS))\n+\t$$($1_CREATE_DEBUGINFO_CMDS)\n+\t$$($1_STRIP_CMD)\n+\t$$($1_CREATE_DEBUGLINK_CMDS)\n+        # On macosx, optionally run codesign on every binary.\n+        # Remove signature explicitly first to avoid warnings if the linker\n+        # added a default adhoc signature.\n+        ifeq ($(MACOSX_CODESIGN_MODE), hardened)\n+\t  $(CODESIGN) --remove-signature $$@\n+\t  $(CODESIGN) -f -s \"$(MACOSX_CODESIGN_IDENTITY)\" --timestamp \\\n+\t      --options runtime --entitlements \\\n+\t      $$(call GetEntitlementsFile, $$@) $$@\n+        else ifeq ($(MACOSX_CODESIGN_MODE), debug)\n+\t  $(CODESIGN) --remove-signature $$@\n+\t  $(CODESIGN) -f -s - --entitlements \\\n+\t      $$(call GetEntitlementsFile, $$@) $$@\n+        endif\n+endef\n","filename":"make\/common\/native\/LinkUnix.gmk","additions":216,"deletions":0,"binary":false,"changes":216,"status":"added"},{"patch":"@@ -0,0 +1,117 @@\n+#\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+################################################################################\n+# This file contains functionality related to linking a native binary;\n+# creating either a dynamic library, a static library or an executable.\n+\n+\n+################################################################################\n+define CreateLinkedResultWindows\n+  ifeq ($$($1_TYPE), STATIC_LIBRARY)\n+    $$(eval $$(call CreateStaticLibraryWindows,$1))\n+  else\n+    $$(eval $$(call CreateDynamicLibraryOrExecutablWindows,$1))\n+  endif\n+endef\n+\n+################################################################################\n+define CreateStaticLibraryWindows\n+  $1_VARDEPS := $$($1_LIB) $$(LIBFLAGS) $$($1_LIBFLAGS) $$($1_LIBS) \\\n+      $$($1_EXTRA_LIBS)\n+  $1_VARDEPS_FILE := $$(call DependOnVariable, $1_VARDEPS, \\\n+      $$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).vardeps)\n+\n+  $$($1_TARGET): $$($1_ALL_OBJS) $$($1_RES) $$($1_VARDEPS_FILE)\n+        ifneq ($$($1_OBJ_FILE_LIST), )\n+          $$(eval $$(call ListPathsSafely, $1_ALL_OBJS, $$($1_OBJ_FILE_LIST)))\n+        endif\n+\t$$(call LogInfo, Building static library $$($1_BASENAME))\n+\t$$(call MakeDir, $$($1_OUTPUT_DIR) $$($1_SYMBOLS_DIR))\n+\t$$(call ExecuteWithLog, $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_link, \\\n+\t  $(if $$($1_LINK_OBJS_RELATIVE), $$(CD) $$(OUTPUTDIR) ; ) \\\n+\t    $$($1_LIB) -nologo $$(LIBFLAGS) $$($1_LIBFLAGS) -out:$$($1_TARGET) \\\n+\t        $$($1_LD_OBJ_ARG) $$($1_RES))\n+        endif\n+endef\n+\n+################################################################################\n+define CreateDynamicLibraryOrExecutablWindows\n+  ifeq ($$($1_EMBED_MANIFEST), true)\n+    $1_EXTRA_LDFLAGS += -manifest:embed\n+  endif\n+\n+  $1_IMPORT_LIBRARY := $$($1_OBJECT_DIR)\/$$($1_NAME).lib\n+  $1_EXTRA_LDFLAGS += \"-implib:$$($1_IMPORT_LIBRARY)\"\n+\n+  ifeq ($$($1_TYPE), LIBRARY)\n+    # To properly trigger downstream dependants of the import library, just as\n+    # for debug files, we must have a recipe in the rule. To avoid rerunning\n+    # the recipe every time have it touch the target. If an import library\n+    # file is deleted by something external, explicitly delete the target to\n+    # trigger a rebuild of both.\n+    ifneq ($$(wildcard $$($1_IMPORT_LIBRARY)), $$($1_IMPORT_LIBRARY))\n+      $$(call LogDebug, Deleting $$($1_BASENAME) because import library is missing)\n+      $$(shell $(RM) $$($1_TARGET))\n+    endif\n+    $$($1_IMPORT_LIBRARY): $$($1_TARGET)\n+\t$(TOUCH) $$@\n+\n+    $1 += $$($1_IMPORT_LIBRARY)\n+  endif\n+\n+  $1_VARDEPS := $$($1_LD) $$($1_SYSROOT_LDFLAGS) $$($1_LDFLAGS) \\\n+      $$($1_EXTRA_LDFLAGS) $$($1_LIBS) $$($1_EXTRA_LIBS) $$($1_MT) \\\n+      $$($1_MANIFEST_VERSION)\n+\n+  $1_VARDEPS_FILE := $$(call DependOnVariable, $1_VARDEPS, \\\n+      $$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).vardeps)\n+\n+  $1_TARGET_DEPS := $$($1_ALL_OBJS) $$($1_RES) $$($1_MANIFEST) \\\n+      $$($1_VARDEPS_FILE)\n+\n+  $$($1_TARGET): $$($1_TARGET_DEPS)\n+        ifneq ($$($1_OBJ_FILE_LIST), )\n+          $$(eval $$(call ListPathsSafely, $1_ALL_OBJS, $$($1_OBJ_FILE_LIST)))\n+        endif\n+        # Keep as much as possible on one execution line for best performance\n+        # on Windows\n+\t$$(call LogInfo, Linking $$($1_BASENAME))\n+\t$$(call MakeDir, $$($1_OUTPUT_DIR) $$($1_SYMBOLS_DIR))\n+\t$$(call ExecuteWithLog, $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_link, \\\n+\t    $$($1_LD) -nologo $$($1_LDFLAGS) $$($1_EXTRA_LDFLAGS) \\\n+\t        $$($1_SYSROOT_LDFLAGS) -out:$$($1_TARGET) $$($1_LD_OBJ_ARG) \\\n+\t        $$($1_RES) $$($1_LIBS) $$($1_EXTRA_LIBS)) \\\n+\t    | $(GREP) -v \"^   Creating library .*\\.lib and object .*\\.exp\" || \\\n+\t        test \"$$$$?\" = \"1\" ; \\\n+        ifeq ($(call isBuildOsEnv, windows.wsl2), true)\n+\t  $$(CHMOD) +x $$($1_TARGET) ; \\\n+        endif\n+        ifneq ($$($1_MANIFEST), )\n+\t  $$($1_MT) -nologo -manifest $$($1_MANIFEST) \\\n+\t      -identity:\"$$($1_NAME).exe, version=$$($1_MANIFEST_VERSION)\" \\\n+\t      -outputresource:$$@;#1\n+        endif\n+endef\n","filename":"make\/common\/native\/LinkWindows.gmk","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -42,0 +42,1 @@\n+#   LIB - lib, a Windows for creating static libraries\n@@ -59,0 +60,1 @@\n+    $$(call SetIfEmpty, $1_LIB, $$($$($1_EXTENDS)_LIB))\n@@ -75,0 +77,1 @@\n+    LIB := $(LIB), \\\n@@ -97,0 +100,1 @@\n+    LIB := $(BUILD_LIB), \\\n@@ -118,0 +122,1 @@\n+  $$(call SetIfEmpty, $1_LIB, $$($$($1_TOOLCHAIN)_LIB))\n","filename":"make\/common\/native\/ToolchainDefinitions.gmk","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,0 @@\n-    ADLC_LDFLAGS += -nologo\n","filename":"make\/hotspot\/gensrc\/GensrcAdlc.gmk","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}