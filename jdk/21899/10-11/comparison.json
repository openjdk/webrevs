{"files":[{"patch":"@@ -988,1 +988,0 @@\n-  delete _print_inlining_stream;\n@@ -4412,1 +4411,1 @@\n-  inline_printer()->dump(tty);\n+  inline_printer()->print_on(tty);\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-outputStream* InlinePrinter::record(ciMethod* method, JVMState* state, InliningResult result, const char* msg) {\n+outputStream* InlinePrinter::record(ciMethod* callee, JVMState* state, InliningResult result, const char* msg) {\n@@ -41,1 +41,1 @@\n-  auto attempt = locate_call(state, method)->add(result);\n+  IPInlineAttempt* attempt = locate(state, callee)->add(result);\n@@ -48,1 +48,1 @@\n-void InlinePrinter::dump(outputStream* tty) {\n+void InlinePrinter::print_on(outputStream* tty) {\n@@ -55,1 +55,1 @@\n-InlinePrinter::IPInlineSite* InlinePrinter::locate_call(JVMState* state, ciMethod* create_for) {\n+InlinePrinter::IPInlineSite* InlinePrinter::locate(JVMState* state, ciMethod* callee) {\n@@ -60,1 +60,1 @@\n-  return locate_call(state->caller(), nullptr)->at_bci(state->bci(), create_for);\n+  return locate(state->caller(), nullptr)->at_bci(state->bci(), callee);\n@@ -63,1 +63,1 @@\n-InlinePrinter::IPInlineSite* InlinePrinter::IPInlineSite::at_bci(int bci, ciMethod* create_for) {\n+InlinePrinter::IPInlineSite* InlinePrinter::IPInlineSite::at_bci(int bci, ciMethod* callee) {\n@@ -65,2 +65,2 @@\n-    assert(create_for != nullptr, \"an inline call is missing in the chain up to the root\");\n-    auto child = new (_arena) IPInlineSite(create_for, _arena);\n+    assert(callee != nullptr, \"an inline call is missing in the chain up to the root\");\n+    auto child = new (_arena) IPInlineSite(callee, _arena);\n@@ -73,1 +73,1 @@\n-  auto child = new (_arena) IPInlineSite(create_for, _arena);\n+  auto child = new (_arena) IPInlineSite(callee, _arena);\n","filename":"src\/hotspot\/share\/opto\/printinlining.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -37,27 +37,0 @@\n-public:\n-  \/**\n-   * @param If enabled is false, all method calls are no-ops.\n-   *\/\n-  InlinePrinter(Arena* arena, bool enabled);\n-\n-  \/**\n-   * Saves the result of an inline attempt of `method` at `state`.\n-   * @param method The method that was attempted to inline\n-   * @param state Where the attempt was made.\n-   * @param result Whether the inline was successful.\n-   * @param msg An optional string message with more details that is copied to the stream for this attempt. Pointer is not captured.\n-   * @returns An output stream which stores the message associated with this attempt. The buffer stays valid until InlinePrinter is deallocated.\n-   *          You can print arbitrary information to this stream but do not add line breaks, as this will break formatting.\n-   *\/\n-  outputStream* record(ciMethod* method, JVMState* state, InliningResult result, const char* msg = nullptr);\n-\n-  \/**\n-   * Prints all collected inlining information to the given output stream.\n-   *\/\n-  void dump(outputStream* tty);\n-\n-  \/**\n-   * Whether inline printing is enabled. If not enabled, all method calls are no-ops.\n-   *\/\n-  bool is_enabled() const { return _enabled; }\n-\n@@ -72,0 +45,6 @@\n+  private:\n+    Arena* const _arena;\n+    ciMethod* const _method;\n+    GrowableArray<IPInlineAttempt*> _attempts;\n+    GrowableArray<IPInlineSite*> _children;\n+\n@@ -74,1 +53,1 @@\n-     * @param The method being called. May be null iff this is the root of the tree.\n+     * Method may be null iff this is the root of the tree.\n@@ -81,4 +60,1 @@\n-     * @param If the method is allowed to create a missing inline site inside this inline, provide\n-     *        the method which is being inline. If no new inline site should be created, provide\n-     *        null.\n-     * @param arena\n+     * If this is a new site, provide the callee otherwise null.\n@@ -86,1 +62,1 @@\n-    IPInlineSite* at_bci(int bci, ciMethod* create_for);\n+    IPInlineSite* at_bci(int bci, ciMethod* callee);\n@@ -90,6 +66,0 @@\n-\n-  private:\n-    Arena* const _arena;\n-    ciMethod* const _method;\n-    GrowableArray<IPInlineAttempt*> _attempts;\n-    GrowableArray<IPInlineSite*> _children;\n@@ -106,1 +76,1 @@\n-   * Locates the IPCall node that corresponds to this JVM state.\n+   * Locates the IPInlineSite node that corresponds to this JVM state.\n@@ -108,3 +78,1 @@\n-   * @param Set is_leaf to true if you call this method to add an new inline attempt.\n-   *        Must be false for recursive calls.\n-   * @param create_for\n+   * If this is a new site, provide the callee otherwise null.\n@@ -112,1 +80,1 @@\n-  IPInlineSite* locate_call(JVMState* state, ciMethod* create_for);\n+  IPInlineSite* locate(JVMState* state, ciMethod* callee);\n@@ -115,0 +83,21 @@\n+\n+public:\n+  InlinePrinter(Arena* arena, bool enabled);\n+\n+  \/**\n+   * Saves the result of an inline attempt of method at state.\n+   * An optional string message with more details that is copied to the stream for this attempt. Pointer is not captured.\n+   * Returns an output stream which stores the message associated with this attempt. The buffer stays valid until InlinePrinter is deallocated.\n+   * You can print arbitrary information to this stream but do not add line breaks, as this will break formatting.\n+   *\/\n+  outputStream* record(ciMethod* callee, JVMState* state, InliningResult result, const char* msg = nullptr);\n+\n+  \/**\n+   * Prints all collected inlining information to the given output stream.\n+   *\/\n+  void print_on(outputStream* tty);\n+\n+  \/**\n+   * Whether inline printing is enabled. If not enabled, all method calls are no-ops.\n+   *\/\n+  bool is_enabled() const { return _enabled; }\n","filename":"src\/hotspot\/share\/opto\/printinlining.hpp","additions":33,"deletions":44,"binary":false,"changes":77,"status":"modified"}]}