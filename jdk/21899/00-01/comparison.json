{"files":[{"patch":"@@ -447,0 +447,4 @@\n+  print_inlining_inner_message(st, result, msg);\n+}\n+\n+void CompileTask::print_inlining_inner_message(outputStream* st, InliningResult result, const char* msg) {\n","filename":"src\/hotspot\/share\/compiler\/compileTask.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -239,0 +239,1 @@\n+  static void print_inlining_inner_message(outputStream* st, InliningResult result, const char* msg);\n","filename":"src\/hotspot\/share\/compiler\/compileTask.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -357,9 +357,0 @@\n-  virtual void print_inlining_late(InliningResult result, const char* msg) {\n-    CallNode* call = call_node();\n-    Compile* C = Compile::current();\n-    C->print_inlining_assert_ready();\n-    C->print_inlining(method(), call->jvms()->depth()-1, call->jvms()->bci(), result, msg);\n-    C->print_inlining_move_to(this);\n-    C->print_inlining_update_delayed(this);\n-  }\n-\n@@ -503,9 +494,0 @@\n-  virtual void print_inlining_late(InliningResult result, const char* msg) {\n-    CallNode* call = call_node();\n-    Compile* C = Compile::current();\n-    C->print_inlining_assert_ready();\n-    C->print_inlining(method(), call->jvms()->depth()-1, call->jvms()->bci(), result, msg);\n-    C->print_inlining_move_to(this);\n-    C->print_inlining_update_delayed(this);\n-  }\n-\n@@ -717,1 +699,0 @@\n-      C->print_inlining_reset();\n@@ -719,1 +700,1 @@\n-        print_inlining_late(InliningResult::SUCCESS, \"late inline (method handle)\");\n+        C->print_inlining_append_late(this, InliningResult::SUCCESS, \"late inline succeeded (method handle)\");\n@@ -721,1 +702,1 @@\n-        print_inlining_late(InliningResult::SUCCESS, \"late inline (string method)\");\n+        C->print_inlining_append_late(this, InliningResult::SUCCESS, \"late inline succeeded (string method)\");\n@@ -723,1 +704,1 @@\n-        print_inlining_late(InliningResult::SUCCESS, \"late inline (boxing method)\");\n+        C->print_inlining_append_late(this, InliningResult::SUCCESS, \"late inline succeeded (boxing method)\");\n@@ -725,1 +706,1 @@\n-        print_inlining_late(InliningResult::SUCCESS, \"late inline (vector reboxing method)\");\n+        C->print_inlining_append_late(this, InliningResult::SUCCESS, \"late inline succeeded (vector reboxing method)\");\n@@ -727,1 +708,1 @@\n-        print_inlining_late(InliningResult::SUCCESS, \"late inline\");\n+        C->print_inlining_append_late(this, InliningResult::SUCCESS, \"late inline succeeded\");\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":5,"deletions":24,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -176,2 +176,0 @@\n-  virtual void print_inlining_late(InliningResult result, const char* msg) { ShouldNotReachHere(); }\n-\n","filename":"src\/hotspot\/share\/opto\/callGenerator.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2112,1 +2112,1 @@\n-              cg->print_inlining_late(InliningResult::FAILURE, msg);\n+              print_inlining_append_late(cg, InliningResult::FAILURE, msg);\n@@ -4456,0 +4456,38 @@\n+void Compile::print_inlining_append_late(CallGenerator* cg, InliningResult result, const char* msg) {\n+  assert(print_inlining() || print_intrinsics(), \"PrintInlining off?\");\n+  C->print_inlining_assert_ready();\n+  C->print_inlining_move_to(cg);\n+\n+  stringStream* old = _print_inlining_list->at(_print_inlining_idx)->ss();\n+\n+  auto old_size = old->size();\n+  bool found_line_break = false;\n+  while (!found_line_break && old_size > 0) {\n+    if (old->base()[old_size - 1] == '\\n') {\n+      found_line_break = true;\n+    }\n+    old_size--;\n+  }\n+\n+  if (old_size == 0) {\n+    CallNode* call = cg->call_node();\n+    print_inlining(cg->method(), call->jvms()->depth() - 1, call->jvms()->bci(), result, msg);\n+    print_inlining_update_delayed(cg);\n+  } else {\n+    \/\/ This is very similar to the previous branch with print_inlining_update_delayed with the difference that\n+    \/\/ we are copying the old contents without the line break.\n+\n+    auto buffer = new PrintInliningBuffer();\n+    buffer->ss()->write(old->base(), old_size);\n+\n+    const char* sep = \"; \";\n+    buffer->ss()->write(sep, strlen(sep));\n+\n+    \/\/ Note that print_inlining_inner_message already added a line break\n+    CompileTask::print_inlining_inner_message(buffer->ss(), result, msg);\n+\n+    _print_inlining_list->at_put(_print_inlining_idx, buffer);\n+    print_inlining_reset();\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":39,"deletions":1,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -528,0 +528,1 @@\n+  void print_inlining_append_late(CallGenerator* cg, InliningResult result, const char* msg);\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}