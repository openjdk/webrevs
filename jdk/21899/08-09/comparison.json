{"files":[{"patch":"@@ -96,4 +96,4 @@\n-  ciMethod* caller = jvms->method();\n-  int bci = jvms->bci();\n-  Bytecodes::Code bytecode = caller->java_code_at_bci(bci);\n-  ciMethod* orig_callee = caller->get_method_at_bci(bci);\n+  ciMethod*       caller      = jvms->method();\n+  int             bci         = jvms->bci();\n+  Bytecodes::Code bytecode    = caller->java_code_at_bci(bci);\n+  ciMethod*       orig_callee = caller->get_method_at_bci(bci);\n@@ -127,2 +127,2 @@\n-    int rid = (receiver_count >= 0) ? log->identify(profile.receiver(0)) : -1;\n-    int r2id = (rid != -1 && profile.has_receiver(1)) ? log->identify(profile.receiver(1)) : -1;\n+    int rid = (receiver_count >= 0)? log->identify(profile.receiver(0)): -1;\n+    int r2id = (rid != -1 && profile.has_receiver(1))? log->identify(profile.receiver(1)):-1;\n@@ -131,6 +131,2 @@\n-    if (call_does_dispatch) {\n-      log->print(\" virtual='1'\");\n-    }\n-    if (allow_inline) {\n-      log->print(\" inline='1'\");\n-    }\n+    if (call_does_dispatch)  log->print(\" virtual='1'\");\n+    if (allow_inline)     log->print(\" inline='1'\");\n@@ -159,1 +155,1 @@\n-                                                        vtable_index, call_does_dispatch, jvms, allow_inline, prof_factor, speculative_receiver_type, false);\n+              vtable_index, call_does_dispatch, jvms, allow_inline, prof_factor, speculative_receiver_type, false);\n@@ -210,1 +206,1 @@\n-                                                                    Deoptimization::Reason_receiver_constraint, Deoptimization::Action_none);\n+              Deoptimization::Reason_receiver_constraint, Deoptimization::Action_none);\n@@ -236,1 +232,1 @@\n-      bool have_major_receiver = profile.has_receiver(0) && (100. * profile.receiver_prob(0) >= (float)TypeProfileMajorReceiverPercent);\n+      bool have_major_receiver = profile.has_receiver(0) && (100.*profile.receiver_prob(0) >= (float)TypeProfileMajorReceiverPercent);\n@@ -265,1 +261,1 @@\n-                                                 profile.receiver(0));\n+                                                      profile.receiver(0));\n@@ -270,1 +266,1 @@\n-                                                     vtable_index, !call_does_dispatch, jvms, allow_inline, prof_factor);\n+              vtable_index, !call_does_dispatch, jvms, allow_inline, prof_factor);\n@@ -277,1 +273,1 @@\n-                                                          profile.receiver(1));\n+                                                               profile.receiver(1));\n@@ -280,2 +276,2 @@\n-                                                 vtable_index, !call_does_dispatch, jvms,\n-                                                 allow_inline, prof_factor);\n+                                  vtable_index, !call_does_dispatch, jvms,\n+                                  allow_inline, prof_factor);\n@@ -284,2 +280,2 @@\n-                \/\/ Skip if we can't inline second receiver's method\n-                next_hit_cg = nullptr;\n+                  \/\/ Skip if we can't inline second receiver's method\n+                  next_hit_cg = nullptr;\n@@ -291,2 +287,2 @@\n-                                                    ? Deoptimization::Reason_bimorphic\n-                                                    : Deoptimization::reason_class_check(speculative_receiver_type != nullptr));\n+                                               ? Deoptimization::Reason_bimorphic\n+                                               : Deoptimization::reason_class_check(speculative_receiver_type != nullptr));\n@@ -294,1 +290,2 @@\n-              !too_many_traps_or_recompiles(caller, bci, reason)) {\n+              !too_many_traps_or_recompiles(caller, bci, reason)\n+             ) {\n@@ -298,1 +295,1 @@\n-                                                       Deoptimization::Action_maybe_recompile);\n+                        Deoptimization::Action_maybe_recompile);\n@@ -358,1 +355,1 @@\n-                                                 vtable_index, !call_does_dispatch, jvms, allow_inline, prof_factor);\n+              vtable_index, !call_does_dispatch, jvms, allow_inline, prof_factor);\n@@ -362,1 +359,1 @@\n-                                                                    Deoptimization::Reason_class_check, Deoptimization::Action_none);\n+              Deoptimization::Reason_class_check, Deoptimization::Action_none);\n@@ -401,1 +398,1 @@\n-                                                                Deoptimization::Reason_receiver_constraint, Deoptimization::Action_none);\n+          Deoptimization::Reason_receiver_constraint, Deoptimization::Action_none);\n@@ -422,27 +419,30 @@\n-    case vmIntrinsics::_StringBuilder_void:\n-    case vmIntrinsics::_StringBuilder_int:\n-    case vmIntrinsics::_StringBuilder_String:\n-    case vmIntrinsics::_StringBuilder_append_char:\n-    case vmIntrinsics::_StringBuilder_append_int:\n-    case vmIntrinsics::_StringBuilder_append_String:\n-    case vmIntrinsics::_StringBuilder_toString:\n-    case vmIntrinsics::_StringBuffer_void:\n-    case vmIntrinsics::_StringBuffer_int:\n-    case vmIntrinsics::_StringBuffer_String:\n-    case vmIntrinsics::_StringBuffer_append_char:\n-    case vmIntrinsics::_StringBuffer_append_int:\n-    case vmIntrinsics::_StringBuffer_append_String:\n-    case vmIntrinsics::_StringBuffer_toString:\n-    case vmIntrinsics::_Integer_toString:\n-      return true;\n-\n-    case vmIntrinsics::_String_String: {\n-      Node* receiver = jvms->map()->in(jvms->argoff() + 1);\n-      if (receiver->is_Proj() && receiver->in(0)->is_CallStaticJava()) {\n-        CallStaticJavaNode* csj = receiver->in(0)->as_CallStaticJava();\n-        ciMethod* m = csj->method();\n-        if (m != nullptr &&\n-            (m->intrinsic_id() == vmIntrinsics::_StringBuffer_toString ||\n-             m->intrinsic_id() == vmIntrinsics::_StringBuilder_toString)) {\n-          \/\/ Delay String.<init>(new SB())\n-          return true;\n+      case vmIntrinsics::_StringBuilder_void:\n+      case vmIntrinsics::_StringBuilder_int:\n+      case vmIntrinsics::_StringBuilder_String:\n+      case vmIntrinsics::_StringBuilder_append_char:\n+      case vmIntrinsics::_StringBuilder_append_int:\n+      case vmIntrinsics::_StringBuilder_append_String:\n+      case vmIntrinsics::_StringBuilder_toString:\n+      case vmIntrinsics::_StringBuffer_void:\n+      case vmIntrinsics::_StringBuffer_int:\n+      case vmIntrinsics::_StringBuffer_String:\n+      case vmIntrinsics::_StringBuffer_append_char:\n+      case vmIntrinsics::_StringBuffer_append_int:\n+      case vmIntrinsics::_StringBuffer_append_String:\n+      case vmIntrinsics::_StringBuffer_toString:\n+      case vmIntrinsics::_Integer_toString:\n+        return true;\n+\n+      case vmIntrinsics::_String_String:\n+        {\n+          Node* receiver = jvms->map()->in(jvms->argoff() + 1);\n+          if (receiver->is_Proj() && receiver->in(0)->is_CallStaticJava()) {\n+            CallStaticJavaNode* csj = receiver->in(0)->as_CallStaticJava();\n+            ciMethod* m = csj->method();\n+            if (m != nullptr &&\n+                (m->intrinsic_id() == vmIntrinsics::_StringBuffer_toString ||\n+                 m->intrinsic_id() == vmIntrinsics::_StringBuilder_toString))\n+              \/\/ Delay String.<init>(new SB())\n+              return true;\n+          }\n+          return false;\n@@ -450,3 +450,0 @@\n-      }\n-      return false;\n-    }\n@@ -454,2 +451,2 @@\n-    default:\n-      return false;\n+      default:\n+        return false;\n@@ -478,1 +475,1 @@\n-bool Parse::can_not_compile_call_site(ciMethod* dest_method, ciInstanceKlass* klass) {\n+bool Parse::can_not_compile_call_site(ciMethod *dest_method, ciInstanceKlass* klass) {\n@@ -483,1 +480,1 @@\n-  assert(dest_method->is_loaded(), \"ciTypeFlow should not let us get here\");\n+  assert( dest_method->is_loaded(), \"ciTypeFlow should not let us get here\" );\n@@ -509,2 +506,1 @@\n-    jvms->method()->get_method_at_bci(jvms->bci())->print();\n-    tty->cr();\n+    jvms->method()->get_method_at_bci(jvms->bci())->print(); tty->cr();\n@@ -512,2 +508,1 @@\n-    cg->method()->print();\n-    tty->cr();\n+    cg->method()->print(); tty->cr();\n@@ -534,3 +529,3 @@\n-  bool will_link;\n-  ciSignature* declared_signature = nullptr;\n-  ciMethod* orig_callee = iter().get_method(will_link, &declared_signature); \/\/ callee in the bytecode\n+  bool             will_link;\n+  ciSignature*     declared_signature = nullptr;\n+  ciMethod*        orig_callee  = iter().get_method(will_link, &declared_signature);  \/\/ callee in the bytecode\n@@ -538,1 +533,1 @@\n-  ciKlass* holder = iter().get_declared_method_holder();\n+  ciKlass*         holder       = iter().get_declared_method_holder();\n@@ -545,1 +540,1 @@\n-    C->set_max_node_limit(3 * MaxNodeLimit);\n+    C->set_max_node_limit(3*MaxNodeLimit);\n@@ -552,4 +547,2 @@\n-      method()->print_name();\n-      tty->print_cr(\" can not compile call at bci %d to:\", bci());\n-      orig_callee->print_name();\n-      tty->cr();\n+      method()->print_name(); tty->print_cr(\" can not compile call at bci %d to:\", bci());\n+      orig_callee->print_name(); tty->cr();\n@@ -560,3 +553,3 @@\n-  \/\/ assert((bc_callee->is_static() || is_invokedynamic) == !has_receiver , \"must match bc\");  \/\/ XXX invokehandle (cur_bc_raw)\n-  \/\/  Note: this takes into account invokeinterface of methods declared in java\/lang\/Object,\n-  \/\/  which should be invokevirtuals but according to the VM spec may be invokeinterfaces\n+  \/\/assert((bc_callee->is_static() || is_invokedynamic) == !has_receiver , \"must match bc\");  \/\/ XXX invokehandle (cur_bc_raw)\n+  \/\/ Note: this takes into account invokeinterface of methods declared in java\/lang\/Object,\n+  \/\/ which should be invokevirtuals but according to the VM spec may be invokeinterfaces\n@@ -588,3 +581,3 @@\n-  ciMethod* callee = orig_callee;\n-  int vtable_index = Method::invalid_vtable_index;\n-  bool call_does_dispatch = false;\n+  ciMethod* callee             = orig_callee;\n+  int       vtable_index       = Method::invalid_vtable_index;\n+  bool      call_does_dispatch = false;\n@@ -595,1 +588,1 @@\n-    Node* receiver_node = stack(sp() - nargs);\n+    Node* receiver_node             = stack(sp() - nargs);\n@@ -606,1 +599,1 @@\n-                                      call_does_dispatch, vtable_index); \/\/ out-parameters\n+                                      call_does_dispatch, vtable_index);  \/\/ out-parameters\n@@ -646,1 +639,1 @@\n-  dec_sp(nargs); \/\/ Temporarily pop args for JVM state of call\n+  dec_sp(nargs);              \/\/ Temporarily pop args for JVM state of call\n@@ -675,1 +668,1 @@\n-  assert(jvms_in_sync(), \"jvms must carry full info into CG\");\n+  assert(jvms_in_sync(),       \"jvms must carry full info into CG\");\n@@ -694,3 +687,1 @@\n-    if (failing()) {\n-      return;\n-    }\n+    if (failing())  return;\n@@ -747,1 +738,1 @@\n-          pop_node(rt); \/\/ whatever it was, pop it\n+          pop_node(rt);  \/\/ whatever it was, pop it\n@@ -755,1 +746,1 @@\n-            const Type* sig_type = TypeOopPtr::make_from_klass(ctype->as_klass());\n+            const Type*       sig_type = TypeOopPtr::make_from_klass(ctype->as_klass());\n@@ -786,4 +777,2 @@\n-        method()->print_name();\n-        tty->print_cr(\" asserting nullness of result at bci: %d\", bci());\n-        cg->method()->print_name();\n-        tty->cr();\n+        method()->print_name(); tty->print_cr(\" asserting nullness of result at bci: %d\", bci());\n+        cg->method()->print_name(); tty->cr();\n@@ -829,3 +818,3 @@\n-    ciExceptionHandler* h = handlers.handler();\n-    int h_bci = h->handler_bci();\n-    ciInstanceKlass* h_klass = h->is_catch_all() ? env()->Throwable_klass() : h->catch_klass();\n+    ciExceptionHandler* h       = handlers.handler();\n+    int                 h_bci   = h->handler_bci();\n+    ciInstanceKlass*    h_klass = h->is_catch_all() ? env()->Throwable_klass() : h->catch_klass();\n@@ -863,2 +852,2 @@\n-  CatchNode* cn = new CatchNode(control(), i_o, len + 1);\n-  Node* catch_ = _gvn.transform(cn);\n+  CatchNode *cn = new CatchNode(control(), i_o, len+1);\n+  Node *catch_ = _gvn.transform(cn);\n@@ -868,1 +857,1 @@\n-  for (int i = 0; i < len; i++) {\n+  for(int i=0; i < len; i++) {\n@@ -874,1 +863,1 @@\n-    Node* ctrl = _gvn.transform(new CatchProjNode(catch_, i + 1, handler_bci));\n+    Node* ctrl = _gvn.transform( new CatchProjNode(catch_, i+1,handler_bci));\n@@ -876,3 +865,1 @@\n-    if (ctrl == top()) {\n-      continue;\n-    }\n+    if (ctrl == top())  continue;\n@@ -893,2 +880,1 @@\n-        method()->print_name();\n-        tty->cr();\n+        method()->print_name(); tty->cr();\n@@ -899,2 +885,1 @@\n-        method()->print_name();\n-        tty->cr();\n+        method()->print_name(); tty->cr();\n@@ -914,1 +899,1 @@\n-    if (handler_bci < 0) { \/\/ merge with corresponding rethrow node\n+    if (handler_bci < 0) {     \/\/ merge with corresponding rethrow node\n@@ -916,2 +901,2 @@\n-    } else {               \/\/ Else jump to corresponding handle\n-      push_ex_oop(ex_oop); \/\/ Clear stack and push just the oop.\n+    } else {                      \/\/ Else jump to corresponding handle\n+      push_ex_oop(ex_oop);        \/\/ Clear stack and push just the oop.\n@@ -924,1 +909,1 @@\n-  set_control(_gvn.transform(new CatchProjNode(catch_, CatchProjNode::fall_through_index, CatchProjNode::no_handler_bci)));\n+  set_control(_gvn.transform( new CatchProjNode(catch_, CatchProjNode::fall_through_index, CatchProjNode::no_handler_bci)));\n@@ -927,0 +912,1 @@\n+\n@@ -948,2 +934,2 @@\n-  NOT_PRODUCT(if (ex_type == nullptr) tty->print_cr(\"*** Exception not InstPtr\"));\n-  if (ex_type == nullptr) {\n+  NOT_PRODUCT(if (ex_type==nullptr) tty->print_cr(\"*** Exception not InstPtr\"));\n+  if (ex_type == nullptr)\n@@ -951,1 +937,0 @@\n-  }\n@@ -965,1 +950,1 @@\n-    Node* p = basic_plus_adr(ex_node, ex_node, oopDesc::klass_offset_in_bytes());\n+    Node* p = basic_plus_adr( ex_node, ex_node, oopDesc::klass_offset_in_bytes());\n@@ -984,2 +969,2 @@\n-        Node* k = _gvn.transform(LoadKlassNode::make(_gvn, nullptr, immutable_memory(), p, TypeInstPtr::KLASS, TypeInstKlassPtr::OBJECT));\n-        ex_klass_node->init_req(i, k);\n+        Node* k = _gvn.transform( LoadKlassNode::make(_gvn, nullptr, immutable_memory(), p, TypeInstPtr::KLASS, TypeInstKlassPtr::OBJECT));\n+        ex_klass_node->init_req( i, k );\n@@ -1000,1 +985,1 @@\n-  for (; !handlers.is_done(); handlers.next()) {\n+  for (;!handlers.is_done(); handlers.next()) {\n@@ -1016,1 +1001,1 @@\n-      push_ex_oop(ex_node); \/\/ Push exception oop for handler\n+      push_ex_oop(ex_node);        \/\/ Push exception oop for handler\n@@ -1023,1 +1008,1 @@\n-      return;                       \/\/ No more handling to be done here!\n+      return;                   \/\/ No more handling to be done here!\n@@ -1029,1 +1014,1 @@\n-    if (!klass->is_loaded()) { \/\/ klass is not loaded?\n+    if (!klass->is_loaded()) {  \/\/ klass is not loaded?\n@@ -1035,3 +1020,2 @@\n-    if (klass->is_interface()) { \/\/ should not happen, but...\n-      break;                     \/\/ bail out\n-    }\n+    if (klass->is_interface())  \/\/ should not happen, but...\n+      break;                    \/\/ bail out\n@@ -1040,1 +1024,1 @@\n-    const TypeKlassPtr* tk = TypeKlassPtr::make(klass);\n+    const TypeKlassPtr *tk = TypeKlassPtr::make(klass);\n@@ -1048,1 +1032,1 @@\n-      push_ex_oop(ex_oop); \/\/ Push exception oop for handler\n+      push_ex_oop(ex_oop);      \/\/ Push exception oop for handler\n@@ -1084,0 +1068,1 @@\n+\n@@ -1086,0 +1071,1 @@\n+\n@@ -1088,2 +1074,2 @@\n-  if (CountCompiledCalls) {\n-    if (at_method_entry) {\n+  if( CountCompiledCalls ) {\n+    if( at_method_entry ) {\n@@ -1099,6 +1085,2 @@\n-      case Bytecodes::_invokevirtual:\n-        increment_counter(SharedRuntime::nof_inlined_calls_addr());\n-        break;\n-      case Bytecodes::_invokeinterface:\n-        increment_counter(SharedRuntime::nof_inlined_interface_calls_addr());\n-        break;\n+      case Bytecodes::_invokevirtual:   increment_counter(SharedRuntime::nof_inlined_calls_addr()); break;\n+      case Bytecodes::_invokeinterface: increment_counter(SharedRuntime::nof_inlined_interface_calls_addr()); break;\n@@ -1107,5 +1089,2 @@\n-      case Bytecodes::_invokespecial:\n-        increment_counter(SharedRuntime::nof_inlined_static_calls_addr());\n-        break;\n-      default:\n-        fatal(\"unexpected call bytecode\");\n+      case Bytecodes::_invokespecial:   increment_counter(SharedRuntime::nof_inlined_static_calls_addr()); break;\n+      default: fatal(\"unexpected call bytecode\");\n@@ -1115,6 +1094,2 @@\n-      case Bytecodes::_invokevirtual:\n-        increment_counter(SharedRuntime::nof_normal_calls_addr());\n-        break;\n-      case Bytecodes::_invokeinterface:\n-        increment_counter(SharedRuntime::nof_interface_calls_addr());\n-        break;\n+      case Bytecodes::_invokevirtual:   increment_counter(SharedRuntime::nof_normal_calls_addr()); break;\n+      case Bytecodes::_invokeinterface: increment_counter(SharedRuntime::nof_interface_calls_addr()); break;\n@@ -1123,5 +1098,2 @@\n-      case Bytecodes::_invokespecial:\n-        increment_counter(SharedRuntime::nof_static_calls_addr());\n-        break;\n-      default:\n-        fatal(\"unexpected call bytecode\");\n+      case Bytecodes::_invokespecial:   increment_counter(SharedRuntime::nof_static_calls_addr()); break;\n+      default: fatal(\"unexpected call bytecode\");\n@@ -1132,1 +1104,2 @@\n-#endif \/\/ PRODUCT\n+#endif \/\/PRODUCT\n+\n@@ -1141,1 +1114,1 @@\n-  vtable_index = Method::invalid_vtable_index;\n+  vtable_index       = Method::invalid_vtable_index;\n@@ -1149,1 +1122,1 @@\n-    callee = optimized_virtual_method;\n+    callee             = optimized_virtual_method;\n@@ -1202,1 +1175,1 @@\n-  ciInstanceKlass* calling_klass = caller->holder();\n+  ciInstanceKlass*   calling_klass = caller->holder();\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":129,"deletions":156,"binary":false,"changes":285,"status":"modified"}]}