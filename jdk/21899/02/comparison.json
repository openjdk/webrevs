{"files":[{"patch":"@@ -447,0 +447,4 @@\n+  print_inlining_inner_message(st, result, msg);\n+}\n+\n+void CompileTask::print_inlining_inner_message(outputStream* st, InliningResult result, const char* msg) {\n","filename":"src\/hotspot\/share\/compiler\/compileTask.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -239,0 +239,1 @@\n+  static void print_inlining_inner_message(outputStream* st, InliningResult result, const char* msg);\n","filename":"src\/hotspot\/share\/compiler\/compileTask.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -357,9 +357,0 @@\n-  virtual void print_inlining_late(InliningResult result, const char* msg) {\n-    CallNode* call = call_node();\n-    Compile* C = Compile::current();\n-    C->print_inlining_assert_ready();\n-    C->print_inlining(method(), call->jvms()->depth()-1, call->jvms()->bci(), result, msg);\n-    C->print_inlining_move_to(this);\n-    C->print_inlining_update_delayed(this);\n-  }\n-\n@@ -503,9 +494,0 @@\n-  virtual void print_inlining_late(InliningResult result, const char* msg) {\n-    CallNode* call = call_node();\n-    Compile* C = Compile::current();\n-    C->print_inlining_assert_ready();\n-    C->print_inlining(method(), call->jvms()->depth()-1, call->jvms()->bci(), result, msg);\n-    C->print_inlining_move_to(this);\n-    C->print_inlining_update_delayed(this);\n-  }\n-\n@@ -715,0 +697,15 @@\n+    bool do_print_inlining = C->print_inlining() || C->print_intrinsics();\n+    if (do_print_inlining) {\n+      if (is_mh_late_inline()) {\n+        C->print_inlining_append_late(this, InliningResult::SUCCESS, \"late inline succeeded (method handle)\");\n+      } else if (is_string_late_inline()) {\n+        C->print_inlining_append_late(this, InliningResult::SUCCESS, \"late inline succeeded (string method)\");\n+      } else if (is_boxing_late_inline()) {\n+        C->print_inlining_append_late(this, InliningResult::SUCCESS, \"late inline succeeded (boxing method)\");\n+      } else if (is_vector_reboxing_late_inline()) {\n+        C->print_inlining_append_late(this, InliningResult::SUCCESS, \"late inline succeeded (vector reboxing method)\");\n+      } else {\n+        C->print_inlining_append_late(this, InliningResult::SUCCESS, \"late inline succeeded\");\n+      }\n+    }\n+\n@@ -786,0 +783,2 @@\n+  virtual bool is_boxing_late_inline() const { return true; }\n+\n@@ -814,0 +813,2 @@\n+  virtual bool is_vector_reboxing_late_inline() const { return true; }\n+\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,0 +78,2 @@\n+  virtual bool      is_boxing_late_inline() const  { return false; }\n+  virtual bool      is_vector_reboxing_late_inline() const  { return false; }\n@@ -174,2 +176,0 @@\n-  virtual void print_inlining_late(InliningResult result, const char* msg) { ShouldNotReachHere(); }\n-\n","filename":"src\/hotspot\/share\/opto\/callGenerator.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2112,1 +2112,1 @@\n-              cg->print_inlining_late(InliningResult::FAILURE, msg);\n+              print_inlining_append_late(cg, InliningResult::FAILURE, msg);\n@@ -4456,0 +4456,38 @@\n+void Compile::print_inlining_append_late(CallGenerator* cg, InliningResult result, const char* msg) {\n+  assert(print_inlining() || print_intrinsics(), \"PrintInlining off?\");\n+  C->print_inlining_assert_ready();\n+  C->print_inlining_move_to(cg);\n+\n+  stringStream* old = _print_inlining_list->at(_print_inlining_idx)->ss();\n+\n+  auto old_size = old->size();\n+  bool found_line_break = false;\n+  while (!found_line_break && old_size > 0) {\n+    if (old->base()[old_size - 1] == '\\n') {\n+      found_line_break = true;\n+    }\n+    old_size--;\n+  }\n+\n+  if (old_size == 0) {\n+    CallNode* call = cg->call_node();\n+    print_inlining(cg->method(), call->jvms()->depth() - 1, call->jvms()->bci(), result, msg);\n+    print_inlining_update_delayed(cg);\n+  } else {\n+    \/\/ This is very similar to the previous branch with print_inlining_update_delayed with the difference that\n+    \/\/ we are copying the old contents without the line break.\n+\n+    auto buffer = new PrintInliningBuffer();\n+    buffer->ss()->write(old->base(), old_size);\n+\n+    const char* sep = \"; \";\n+    buffer->ss()->write(sep, strlen(sep));\n+\n+    \/\/ Note that print_inlining_inner_message already added a line break\n+    CompileTask::print_inlining_inner_message(buffer->ss(), result, msg);\n+\n+    _print_inlining_list->at_put(_print_inlining_idx, buffer);\n+    print_inlining_reset();\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":39,"deletions":1,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -528,0 +528,1 @@\n+  void print_inlining_append_late(CallGenerator* cg, InliningResult result, const char* msg);\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/**\n+ * @test\n+ * @bug 8319850\n+ * @summary PrintInlining should print which methods are late inlines\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @requires vm.flagless\n+ *\n+ * @run driver compiler.inlining.LateInlinePrinting\n+ *\/\n+\n+package compiler.inlining;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class LateInlinePrinting {\n+    public static class TestLateInlining {\n+        public static void main(String[] args) {\n+            for (int i = 0; i < 20_000; i++) {\n+                test1();\n+            }\n+        }\n+\n+        private static void test1() {\n+            inlined1();\n+        }\n+\n+        private static void inlined1() {}\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:-TieredCompilation\", \"-XX:-UseOnStackReplacement\", \"-XX:-BackgroundCompilation\",\n+            \"-XX:+PrintCompilation\",\n+            \"-XX:CompileCommand=compileonly,compiler.inlining.LateInlinePrinting$TestLateInlining::test1\",\n+            \"-XX:CompileCommand=quiet\", \"-XX:+PrintInlining\", \"-XX:+AlwaysIncrementalInline\",\n+            TestLateInlining.class.getName()\n+        );\n+\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+        analyzer.shouldHaveExitValue(0);\n+\n+        String re = \".*TestLateInlining::inlined1 \\\\(1 bytes\\\\)\\\\s*inline \\\\(hot\\\\);\\\\s*late inline succeeded.*\";\n+        boolean foundMessage = analyzer.asLines().stream()\n+                .anyMatch(s -> s.matches(re));\n+\n+        if (!foundMessage) {\n+            analyzer.outputTo(System.out);\n+            throw new Exception(\"late inline message not printed\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/inlining\/LateInlinePrinting.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"}]}