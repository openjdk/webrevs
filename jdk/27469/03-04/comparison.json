{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.net.http.HttpClient.Version;\n@@ -33,0 +34,1 @@\n+import java.util.concurrent.Executor;\n@@ -222,3 +224,1 @@\n-    public CompletableFuture<T> readBodyAsync(\n-            HttpResponse.BodyHandler<T> handler,\n-            Runnable preTerminationCallback) {\n+    public CompletableFuture<T> readBodyAsync(HttpResponse.BodyHandler<T> handler) {\n@@ -232,1 +232,1 @@\n-        return exchImpl.readBodyAsync(handler, preTerminationCallback, !request.isWebSocket(), parentExecutor)\n+        return exchImpl.readBodyAsync(handler, !request.isWebSocket(), parentExecutor)\n@@ -690,1 +690,1 @@\n-            return e.readBodyAsync(this::ignoreBody, null, false, parentExecutor)\n+            return e.readBodyAsync(this::ignoreBody, false, parentExecutor)\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Exchange.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -592,1 +592,0 @@\n-                                                Runnable preTerminationCallback,\n@@ -597,12 +596,6 @@\n-     * {@return a new {@code HttpBodySubscriberWrapper} decorating the\n-     * {@link HttpResponse.BodySubscriber} obtained using the given {@link\n-     * HttpResponse.BodyHandler} and the {@link ResponseInfo}}\n-     *\n-     * <p>An {@code HttpBodySubscriberWrapper} decorates a response body\n-     * subscriber such that:\n-     * <ul>\n-     * <li>It is ensured that {@code onComplete}\/{@code onError} are called\n-     * only once\n-     * <li>It is ensured that {@code onSubscribe} is called before {@code\n-     * onError}. This is useful when errors occur asynchronously, and most\n-     * typically when the error occurs before the {@code BodySubscriber} has\n+     * Creates and wraps an {@link HttpResponse.BodySubscriber} from a {@link\n+     * HttpResponse.BodyHandler} for the given {@link ResponseInfo}.\n+     * An {@code HttpBodySubscriberWrapper} wraps a response body subscriber and makes\n+     * sure its completed\/onError methods are called only once, and that its onSusbscribe\n+     * is called before onError. This is useful when errors occur asynchronously, and\n+     * most typically when the error occurs before the {@code BodySubscriber} has\n@@ -610,8 +603,2 @@\n-     * <li>A pre-termination callback is invoked before\n-     * {@code onComplete}\/{@code onError}\n-     * <\/ul>\n-     *\n-     * @param handler  a response body handler to wrap\n-     * @param responseInfo a response info to create the subscriber from\n-     * @param preTerminationCallback a callback to be invoked before\n-     *                               completion with either success or failure\n+     * @param handler  a body handler\n+     * @param response a response info\n@@ -621,5 +608,2 @@\n-            HttpResponse.BodyHandler<T> handler,\n-            ResponseInfo responseInfo,\n-            Runnable preTerminationCallback) {\n-        var subscriber = handler.apply(responseInfo);\n-        return new HttpBodySubscriberWrapper<>(subscriber, preTerminationCallback);\n+            HttpResponse.BodyHandler<T> handler, ResponseInfo response) {\n+        return new HttpBodySubscriberWrapper<>(handler.apply(response));\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/ExchangeImpl.java","additions":10,"deletions":26,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -209,6 +209,2 @@\n-\n-        Http1ResponseBodySubscriber(\n-                BodySubscriber<U> userSubscriber,\n-                Runnable preTerminationCallback,\n-                Http1Exchange<U> exchange) {\n-            super(userSubscriber, preTerminationCallback);\n+        Http1ResponseBodySubscriber(BodySubscriber<U> userSubscriber, Http1Exchange<U> exchange) {\n+            super(userSubscriber);\n@@ -227,0 +223,6 @@\n+\n+        @Override\n+        protected void onTermination() {\n+            exchange.exchange.multi.cancelTimer();\n+        }\n+\n@@ -451,1 +453,0 @@\n-                                       Runnable preTerminationCallback,\n@@ -457,1 +458,1 @@\n-        BodySubscriber<T> bs = createResponseSubscriber(handler, responseInfo, preTerminationCallback);\n+        BodySubscriber<T> bs = createResponseSubscriber(handler, responseInfo);\n@@ -465,4 +466,1 @@\n-    Http1ResponseBodySubscriber<T> createResponseSubscriber(\n-            BodyHandler<T> handler,\n-            ResponseInfo response,\n-            Runnable preTerminationCallback) {\n+    Http1ResponseBodySubscriber<T> createResponseSubscriber(BodyHandler<T> handler, ResponseInfo response) {\n@@ -470,1 +468,3 @@\n-        return new Http1ResponseBodySubscriber<>(subscriber, preTerminationCallback, this);\n+        Http1ResponseBodySubscriber<T> bs =\n+                new Http1ResponseBodySubscriber<T>(subscriber, this);\n+        return bs;\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http1Exchange.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -557,2 +557,2 @@\n-        Http3StreamResponseSubscriber(BodySubscriber<U> subscriber, Runnable preTerminationCallback) {\n-            super(subscriber, preTerminationCallback);\n+        Http3StreamResponseSubscriber(BodySubscriber<U> subscriber) {\n+            super(subscriber);\n@@ -571,0 +571,5 @@\n+        @Override\n+        protected void onTermination() {\n+            exchange.multi.cancelTimer();\n+        }\n+\n@@ -588,0 +593,1 @@\n+\n@@ -590,2 +596,1 @@\n-                                                              ResponseInfo response,\n-                                                              Runnable preTerminationCallback) {\n+                                                              ResponseInfo response) {\n@@ -593,1 +598,3 @@\n-        return new Http3StreamResponseSubscriber<>(handler.apply(response), preTerminationCallback);\n+        Http3StreamResponseSubscriber<T> subscriber =\n+                new Http3StreamResponseSubscriber<>(handler.apply(response));\n+        return subscriber;\n@@ -598,1 +605,0 @@\n-                                       Runnable preTerminationCallback,\n@@ -607,1 +613,1 @@\n-                    createResponseSubscriber(handler, new ResponseInfoImpl(response), preTerminationCallback);\n+                    createResponseSubscriber(handler, new ResponseInfoImpl(response));\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http3ExchangeImpl.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -232,2 +232,2 @@\n-        Http3PushStreamResponseSubscriber(BodySubscriber<U> subscriber, Runnable preTerminationCallback) {\n-            super(subscriber, preTerminationCallback);\n+        Http3PushStreamResponseSubscriber(BodySubscriber<U> subscriber) {\n+            super(subscriber);\n@@ -245,0 +245,6 @@\n+\n+        @Override\n+        protected void onTermination() {\n+            exchange.multi.cancelTimer();\n+        }\n+\n@@ -247,4 +253,2 @@\n-    Http3PushStreamResponseSubscriber<T> createResponseSubscriber(\n-            BodyHandler<T> handler,\n-            Runnable preTerminationCallback,\n-            ResponseInfo response) {\n+    Http3PushStreamResponseSubscriber<T> createResponseSubscriber(BodyHandler<T> handler,\n+                                                              ResponseInfo response) {\n@@ -252,1 +256,1 @@\n-        return new Http3PushStreamResponseSubscriber<>(handler.apply(response), preTerminationCallback);\n+        return new Http3PushStreamResponseSubscriber<>(handler.apply(response));\n@@ -374,1 +378,1 @@\n-        start.thenCompose( v -> readBodyAsync(getPushHandler(), null, false, getExchange().executor()))\n+        start.thenCompose( v -> readBodyAsync(getPushHandler(), false, getExchange().executor()))\n@@ -449,1 +453,0 @@\n-                                       Runnable preTerminationCallback,\n@@ -456,1 +459,1 @@\n-                    createResponseSubscriber(handler, preTerminationCallback, new ResponseInfoImpl(response));\n+                    createResponseSubscriber(handler, new ResponseInfoImpl(response));\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http3PushPromiseStream.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -256,1 +256,1 @@\n-    private void cancelTimer() {\n+    public void cancelTimer() {\n@@ -414,1 +414,1 @@\n-                        return exch.readBodyAsync(responseHandler, this::cancelTimer)\n+                        return exch.readBodyAsync(responseHandler)\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/MultiExchange.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -369,1 +369,0 @@\n-                                       Runnable preTerminationCallback,\n@@ -376,2 +375,2 @@\n-            var bodySubscriber = createResponseSubscriber(\n-                    handler, new ResponseInfoImpl(response), preTerminationCallback);\n+            Http2StreamResponseSubscriber<T> bodySubscriber =\n+                    createResponseSubscriber(handler, new ResponseInfoImpl(response));\n@@ -394,5 +393,4 @@\n-    Http2StreamResponseSubscriber<T> createResponseSubscriber(\n-            BodyHandler<T> handler,\n-            ResponseInfo response,\n-            Runnable preTerminationCallback) {\n-        return new Http2StreamResponseSubscriber<>(handler.apply(response), preTerminationCallback);\n+    Http2StreamResponseSubscriber<T> createResponseSubscriber(BodyHandler<T> handler, ResponseInfo response) {\n+        Http2StreamResponseSubscriber<T> subscriber =\n+                new Http2StreamResponseSubscriber<>(handler.apply(response));\n+        return subscriber;\n@@ -1723,1 +1721,0 @@\n-                Runnable preTerminationCallback,\n@@ -1727,1 +1724,1 @@\n-            return super.readBodyAsync(handler, preTerminationCallback, returnConnectionToPool, executor)\n+            return super.readBodyAsync(handler, returnConnectionToPool, executor)\n@@ -1737,1 +1734,1 @@\n-            start.thenCompose( v -> readBodyAsync(getPushHandler(), null, false, getExchange().executor()))\n+            start.thenCompose( v -> readBodyAsync(getPushHandler(), false, getExchange().executor()))\n@@ -1961,2 +1958,2 @@\n-        Http2StreamResponseSubscriber(BodySubscriber<U> subscriber, Runnable preTerminationCallback) {\n-            super(subscriber, preTerminationCallback);\n+        Http2StreamResponseSubscriber(BodySubscriber<U> subscriber) {\n+            super(subscriber);\n@@ -1975,0 +1972,5 @@\n+        @Override\n+        protected void onTermination() {\n+            exchange.multi.cancelTimer();\n+        }\n+\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Stream.java","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -68,1 +68,0 @@\n-    private final Runnable preTerminationCallback;\n@@ -73,0 +72,3 @@\n+    public HttpBodySubscriberWrapper(BodySubscriber<T> userSubscriber) {\n+        this.userSubscriber = userSubscriber;\n+    }\n@@ -75,5 +77,3 @@\n-     * Creates a new instance using provided details.\n-     *\n-     * @param userSubscriber a subscriber to wrap and delegate to\n-     * @param preTerminationCallback a callback to be invoked before completion\n-     *                              with either success or failure, can be null\n+     * A callback to be invoked before termination, whether due to the\n+     * completion or failure of the subscriber, or cancellation of the\n+     * subscription.\n@@ -81,3 +81,2 @@\n-    public HttpBodySubscriberWrapper(BodySubscriber<T> userSubscriber, Runnable preTerminationCallback) {\n-        this.userSubscriber = Objects.requireNonNull(userSubscriber);\n-        this.preTerminationCallback = preTerminationCallback;\n+    protected void onTermination() {\n+        \/\/ Do nothing\n@@ -103,3 +102,1 @@\n-                        if (preTerminationCallback != null) {\n-                            preTerminationCallback.run();\n-                        }\n+                        onTermination();\n@@ -298,3 +295,1 @@\n-            if (preTerminationCallback != null) {\n-                preTerminationCallback.run();\n-            }\n+            onTermination();\n@@ -413,1 +408,0 @@\n-\n@@ -423,1 +417,0 @@\n-\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/HttpBodySubscriberWrapper.java","additions":10,"deletions":17,"binary":false,"changes":27,"status":"modified"}]}