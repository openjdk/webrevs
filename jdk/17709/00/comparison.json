{"files":[{"patch":"@@ -676,6 +676,9 @@\n-\n-void DefNewGeneration::space_iterate(SpaceClosure* blk,\n-                                     bool usedOnly) {\n-  blk->do_space(eden());\n-  blk->do_space(from());\n-  blk->do_space(to());\n+HeapWord* DefNewGeneration::block_start(const void* p) const {\n+  if (eden()->is_in_reserved(p)) {\n+    return eden()->block_start_const(p);\n+  }\n+  if (from()->is_in_reserved(p)) {\n+    return from()->block_start_const(p);\n+  }\n+  assert(to()->is_in_reserved(p), \"inv\");\n+  return to()->block_start_const(p);\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -211,1 +211,1 @@\n-  void space_iterate(SpaceClosure* blk, bool usedOnly = false);\n+  HeapWord* block_start(const void* p) const;\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -125,22 +125,0 @@\n-\n-\/\/ Some of these are mediocre general implementations.  Should be\n-\/\/ overridden to get better performance.\n-\n-class GenerationBlockStartClosure : public SpaceClosure {\n- public:\n-  const void* _p;\n-  HeapWord* _start;\n-  virtual void do_space(Space* s) {\n-    if (_start == nullptr && s->is_in_reserved(_p)) {\n-      _start = s->block_start(_p);\n-    }\n-  }\n-  GenerationBlockStartClosure(const void* p) { _p = p; _start = nullptr; }\n-};\n-\n-HeapWord* Generation::block_start(const void* p) const {\n-  GenerationBlockStartClosure blk(p);\n-  \/\/ Cast away const\n-  ((Generation*)this)->space_iterate(&blk);\n-  return blk._start;\n-}\n","filename":"src\/hotspot\/share\/gc\/serial\/generation.cpp","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -121,3 +121,0 @@\n-  \/\/ Iteration - do not use for time critical operations\n-  virtual void space_iterate(SpaceClosure* blk, bool usedOnly = false) = 0;\n-\n@@ -205,8 +202,0 @@\n-  \/\/ Block abstraction.\n-\n-  \/\/ Returns the address of the start of the \"block\" that contains the\n-  \/\/ address \"addr\".  We say \"blocks\" instead of \"object\" since some heaps\n-  \/\/ may not pack objects densely; a chunk may either be an object or a\n-  \/\/ non-object.\n-  virtual HeapWord* block_start(const void* addr) const;\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/generation.hpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -266,3 +266,2 @@\n-void TenuredGeneration::space_iterate(SpaceClosure* blk,\n-                                                 bool usedOnly) {\n-  blk->do_space(space());\n+HeapWord* TenuredGeneration::block_start(const void* p) const {\n+  return space()->block_start_const(p);\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-  void space_iterate(SpaceClosure* blk, bool usedOnly = false);\n+  HeapWord* block_start(const void* p) const;\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}