{"files":[{"patch":"@@ -453,1 +453,4 @@\n-        StringBuilder sb = new StringBuilder(0);\n+\n+        int writePos = 0;\n+        int fragPos = -1;\n+        int fragLen = 0;\n@@ -458,4 +461,5 @@\n-        while ((n = read(cb, 0, cb.length)) != -1) {\n-            int pos = 0;\n-            while (pos < n) {\n-                \/\/ find next line terminator; if none found, \"term\" equals \"n\"\n+        while ((n = read(cb, writePos, cb.length - writePos)) != -1) {\n+            int pos = writePos;\n+            int limit = pos + n;\n+            while (pos < limit) {\n+                \/\/ find next line terminator\n@@ -463,1 +467,1 @@\n-                while (term < n) {\n+                while (term < limit) {\n@@ -470,1 +474,1 @@\n-                if (term < n) { \/\/ line terminator\n+                if (term < limit) { \/\/ line terminator\n@@ -474,3 +478,3 @@\n-                        if (sb.isEmpty()) {\n-                            \/\/ avoid the StringBuilder if possible\n-                            lines.add(new String(cb, pos, term - pos));\n+                        if (fragPos != -1) {\n+                            lines.add(new String(cb, fragPos, term - fragPos));\n+                            fragPos = -1;\n@@ -478,3 +482,1 @@\n-                            sb.append(cb, pos, term - pos);\n-                            lines.add(sb.toString());\n-                            sb.setLength(0);\n+                            lines.add(new String(cb, pos, term - pos));\n@@ -484,0 +486,2 @@\n+                    if (pos == limit)\n+                        writePos = 0;\n@@ -486,2 +490,19 @@\n-                    sb.append(cb, pos, n - pos);\n-                    pos = n;\n+                    int len = term - pos;\n+                    if (fragPos == -1) {\n+                        fragPos = pos;\n+                        fragLen = len;\n+                    } else {\n+                        fragLen += len;\n+                    }\n+                    if (fragLen >= cb.length\/2) {\n+                        \/\/ allocate larger buffer and copy chars to beginning\n+                        char[] tmp = new char[2*cb.length];\n+                        System.arraycopy(cb, fragPos, tmp, 0, fragLen);\n+                        cb = tmp;\n+                    } else if (fragPos != 0) {\n+                        \/\/ move fragment to beginning of buffer\n+                        System.arraycopy(cb, fragPos, cb, 0, fragLen);\n+                    }\n+                    writePos = fragLen;\n+                    fragPos = 0;\n+                    pos = limit;\n@@ -494,2 +515,2 @@\n-        if (!sb.isEmpty())\n-            lines.add(sb.toString());\n+        if (fragPos != -1)\n+            lines.add(new String(cb, fragPos, fragLen));\n","filename":"src\/java.base\/share\/classes\/java\/io\/Reader.java","additions":38,"deletions":17,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -97,0 +97,8 @@\n+\n+        strings.add(PHRASE.repeat((4096 + plen - 1)\/plen) + \"\\n\" +\n+                    \" \".repeat(8192) + PHRASE);\n+        strings.add(\"x\".repeat(8191) + \"\\n\");\n+        strings.add(\"x\".repeat(9000) + \"\\n\" + \"y\".repeat(100));\n+        strings.add(\"x\".repeat(8200) + \"y\".repeat(8200) + \"x\".repeat(8200) +\n+                    PHRASE + \"\\n\");\n+\n","filename":"test\/jdk\/java\/io\/Reader\/ReadAll.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-            int lineLen = 40 + rnd.nextInt(40);\n+            int lineLen = 40 + rnd.nextInt(8192);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/io\/ReaderReadAllLines.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}