{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Collections;\n@@ -451,4 +452,1 @@\n-        char[] cb = new char[TRANSFER_BUFFER_SIZE];\n-        int pos = 0;\n-        List<String> lines = new ArrayList<String>();\n-\n+        List<String> lines = new ArrayList<>();\n@@ -456,8 +454,8 @@\n-        int n = read(cb, 0, cb.length);\n-        boolean eos = (n == -1);\n-        while (!eos) {\n-            boolean eol = false;\n-            boolean stringAdded = false;\n-            while (!eol) {\n-                \/\/ Find the next line terminator. If none is found,\n-                \/\/ \"term\" will equal \"n\".\n+\n+        char[] cb = new char[TRANSFER_BUFFER_SIZE];\n+        boolean skipLF = false;\n+        int n;\n+        while ((n = read(cb, 0, cb.length)) != -1) {\n+            int pos = 0;\n+            while (pos < n) {\n+                \/\/ find next line terminator; if none found, \"term\" equals \"n\"\n@@ -467,1 +465,1 @@\n-                    if (c == '\\r' || c == '\\n')\n+                    if (c == '\\n' || c == '\\r')\n@@ -472,22 +470,12 @@\n-                \/\/ Terminator found so at EOL.\n-                if (term < n)\n-                    eol = true;\n-\n-                if (term == pos) {\n-                    \/\/ Current position is terminator so skip it.\n-                    pos++;\n-                } else { \/\/ term > pos\n-                    if (eol && sb.length() == 0) {\n-                        \/\/ Create and add a string to avoid the StringBuilder.\n-                        lines.add(new String(cb, pos, term - pos));\n-                        stringAdded = true;\n-                    } else\n-                        sb.append(cb, pos, term - pos);\n-                    pos = term + 1;\n-                }\n-\n-                if (pos >= n) {\n-                    \/\/ Buffer content consumed so reload it.\n-                    if ((n = read(cb, 0, cb.length)) < 0) {\n-                        eos = eol = true;\n-                        break;\n+                if (term < n) { \/\/ line terminator\n+                    boolean isCR = (cb[term] == '\\r');\n+                    if (isCR || !(skipLF && term == pos)) {\n+                        \/\/ line terminator is a CR or an LF just after a CR\n+                        if (sb.length() == 0) {\n+                            \/\/ avoid the StringBuilder if possible\n+                            lines.add(new String(cb, pos, term - pos));\n+                        } else {\n+                            sb.append(cb, pos, term - pos);\n+                            lines.add(sb.toString());\n+                            sb.setLength(0);\n+                        }\n@@ -495,1 +483,4 @@\n-                    pos = 0;\n+                    skipLF = isCR;\n+                } else { \/\/ no line terminator\n+                    sb.append(cb, pos, n - pos);\n+                    skipLF = false;\n@@ -497,1 +488,0 @@\n-            }\n@@ -499,4 +489,1 @@\n-            if (!stringAdded) {\n-                \/\/ Derive a string and add it to the list.\n-                lines.add(sb.toString());\n-                sb.setLength(0);\n+                pos = term + 1;\n@@ -504,2 +491,0 @@\n-\n-            eol = false;\n@@ -508,1 +493,5 @@\n-        return lines;\n+        \/\/ add a string if EOS terminates the last line\n+        if (sb.length() > 0)\n+            lines.add(sb.toString());\n+\n+        return Collections.unmodifiableList(lines);\n","filename":"src\/java.base\/share\/classes\/java\/io\/Reader.java","additions":33,"deletions":44,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -69,1 +69,2 @@\n-        List<String> strings = new ArrayList<String>(size);\n+        StringBuilder sb = new StringBuilder(plen);\n+        List<String> strings = new ArrayList<>(size);\n@@ -73,1 +74,22 @@\n-            strings.add(PHRASE.substring(fromIndex, toIndex));\n+            String s = PHRASE.substring(fromIndex, toIndex);\n+            sb.append(s);\n+            int bound = toIndex - fromIndex;\n+            if (bound > 0) {\n+                int offset = bound\/2;\n+                int n = rnd.nextInt(0, bound);\n+                for (int i = 0; i < n; i++) {\n+                    String f = null;\n+                    switch (rnd.nextInt(7)) {\n+                    case 0 -> f = \"\";\n+                    case 1 -> f = \"\\r\";\n+                    case 2 -> f = \"\\n\";\n+                    case 3 -> f = \"\\r\\n\";\n+                    case 4 -> f = \"\\r\\r\";\n+                    case 5 -> f = \"\\n\\n\";\n+                    case 6 -> f = \" \";\n+                    }\n+                    sb.insert(offset, f);\n+                }\n+            }\n+            strings.add(sb.toString());\n+            sb.setLength(0);\n@@ -88,0 +110,1 @@\n+        System.out.println(\"Reader implementation\");\n@@ -95,1 +118,12 @@\n-        assertEquals(linesExpected, lines);\n+        int count = linesExpected.size();\n+        if (lines.size() != count)\n+            throw new RuntimeException(\"Size mismatch: \" + lines.size() + \" != \" + count);\n+        for (int i = 0; i < count; i++) {\n+            String expected = linesExpected.get(i);\n+            String actual = lines.get(i);\n+            if (!actual.equals(expected)) {\n+                String msg = String.format(\"%d: \\\"%s\\\" != \\\"%s\\\"\",\n+                                           i, actual, expected);\n+                throw new RuntimeException(msg);\n+            }\n+        }\n@@ -98,0 +132,1 @@\n+        System.out.println(\"Reader.of implementation\");\n@@ -106,1 +141,12 @@\n-        assertEquals(linesExpected, lines);\n+        count = linesExpected.size();\n+        if (lines.size() != count)\n+            throw new RuntimeException(\"Size mismatch: \" + lines.size() + \" != \" + count);\n+        for (int i = 0; i < count; i++) {\n+            String expected = linesExpected.get(i);\n+            String actual = lines.get(i);\n+            if (!actual.equals(expected)) {\n+                String msg = String.format(\"%d: \\\"%s\\\" != \\\"%s\\\"\",\n+                                           i, actual, expected);\n+                throw new RuntimeException(msg);\n+            }\n+        }\n","filename":"test\/jdk\/java\/io\/Reader\/ReadAll.java","additions":50,"deletions":4,"binary":false,"changes":54,"status":"modified"}]}