{"files":[{"patch":"@@ -0,0 +1,220 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.PopupMenu;\n+import java.awt.Robot;\n+\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+import java.util.Hashtable;\n+\n+\/*\n+ * @test\n+ * @bug 4214550\n+ * @summary Tests that there is no seg fault on repeatedly showing\n+ *          PopupMenu by right-clicking Label, Panel or Button\n+ * @key headful\n+ * @run main ActivePopupCrashTest\n+ *\/\n+\n+public class ActivePopupCrashTest {\n+    private static Frame f;\n+    private static Label l;\n+    private static Button b;\n+    private static Panel p;\n+\n+    private static volatile Point labelCenter;\n+    private static volatile Point buttonCenter;\n+    private static volatile Point panelCenter;\n+\n+    public static void main(String[] args) throws Exception {\n+        final int REPEAT_COUNT = 5;\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(50);\n+            EventQueue.invokeAndWait(ActivePopupCrashTest::createAndShowUI);\n+            robot.delay(1000);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                labelCenter = getCenterPoint(l);\n+                buttonCenter = getCenterPoint(b);\n+                panelCenter = getCenterPoint(p);\n+            });\n+\n+            for (int i = 0; i < REPEAT_COUNT; i++) {\n+                robot.mouseMove(labelCenter.x, labelCenter.y);\n+                robot.mousePress(InputEvent.BUTTON3_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON3_DOWN_MASK);\n+\n+                robot.mouseMove(buttonCenter.x, buttonCenter.y);\n+                robot.mousePress(InputEvent.BUTTON3_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON3_DOWN_MASK);\n+\n+                robot.mouseMove(panelCenter.x, panelCenter.y);\n+                robot.mousePress(InputEvent.BUTTON3_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON3_DOWN_MASK);\n+            }\n+\n+            \/\/ To close the popup, otherwise test fails on windows with timeout error\n+            robot.mouseMove(panelCenter.x - 5, panelCenter.y - 5);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static Point getCenterPoint(Component component) {\n+        Point p = component.getLocationOnScreen();\n+        Dimension size = component.getSize();\n+        return new Point(p.x + size.width \/ 2, p.y + size.height \/ 2);\n+    }\n+\n+    public static void createAndShowUI() {\n+        f = new Frame(\"ActivePopupCrashTest Test\");\n+        MenuItem item = new MenuItem(\"file-1\");\n+        item.addActionListener(ActivePopupCrashTest::logActionEvent);\n+        Menu m = new Menu(\"file\");\n+        m.add(item);\n+        item = new MenuItem(\"file-2\");\n+        m.add(item);\n+        MenuBar mb = new MenuBar();\n+        mb.add(m);\n+\n+        f.setMenuBar(mb);\n+        f.setSize(200, 200);\n+        f.setLayout(new BorderLayout());\n+\n+        l = new Label(\"label\");\n+        addPopup(l, \"label\");\n+        f.add(l, BorderLayout.NORTH);\n+\n+        p = new Panel();\n+        addPopup(p, \"panel\");\n+        f.add(p, BorderLayout.CENTER);\n+\n+        b = new Button(\"button\");\n+        addPopup(b, \"button\");\n+        f.add(b, BorderLayout.SOUTH);\n+\n+        f.setSize(400, 300);\n+        f.setLocationRelativeTo(null);\n+        f.setVisible(true);\n+    }\n+\n+    static void addPopup(Component c, String name) {\n+        PopupMenu pm = new PopupMenu();\n+        MenuItem mi = new MenuItem(name + \"-1\");\n+        mi.addActionListener(ActivePopupCrashTest::logActionEvent);\n+        pm.add(mi);\n+\n+        mi = new MenuItem(name + \"-2\");\n+        pm.add(mi);\n+\n+        setHash(c, pm);\n+        c.add(pm);\n+        c.addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mouseClicked (MouseEvent e) {\n+                mouseAction(\"mouseClicked\", e);\n+            }\n+\n+            @Override\n+            public void mousePressed (MouseEvent e) {\n+                mouseAction(\"mousePressed\", e);\n+            }\n+\n+            @Override\n+            public void mouseReleased (MouseEvent e) {\n+                mouseAction(\"mouseReleased\", e);\n+            }\n+        });\n+    }\n+\n+    static void logActionEvent(ActionEvent e) {\n+        System.out.println(\"actionPerformed, event=\" + e + \", mod=\" + getMods(e));\n+        System.out.println(\"command=\" + e.getActionCommand());\n+        System.out.println(\"param=\" + e.paramString());\n+        System.out.println(\"source=\" + e.getSource());\n+    }\n+\n+    static String getMods(ActionEvent e) { return getMods(e.getModifiers()); }\n+\n+    static String getMods(MouseEvent e) { return getMods(e.getModifiers()); }\n+\n+    static String getMods(int mods) {\n+        String modstr = \"\";\n+        if ((mods & ActionEvent.SHIFT_MASK) == ActionEvent.SHIFT_MASK) {\n+            modstr += (\" SHIFT\");\n+        } else if ((mods & ActionEvent.ALT_MASK) == ActionEvent.ALT_MASK) {\n+            modstr += (\" ALT\");\n+        } else if ((mods & ActionEvent.CTRL_MASK) == ActionEvent.CTRL_MASK) {\n+            modstr += (\" CTRL\");\n+        } else if ((mods & ActionEvent.META_MASK) == ActionEvent.META_MASK) {\n+            modstr += (\" META\");\n+        }\n+        return modstr;\n+    }\n+\n+    static void mouseAction(String which, MouseEvent e) {\n+        Component c = e.getComponent();\n+        System.out.println(which + \" e = \" + e + \" , mods = \" + getMods(e) +\n+                \" , component = \" + c);\n+        if (e.isPopupTrigger()) {\n+            System.out.println(\"isPopup\");\n+            PopupMenu pm = getHash(c);\n+            pm.show(c, c.getWidth() \/ 2, c.getHeight() \/ 2);\n+        }\n+    }\n+\n+    static Hashtable<Component, PopupMenu> popupTable = new Hashtable<>();\n+\n+    static void setHash(Component c, PopupMenu p) {\n+        popupTable.put(c, p);\n+    }\n+\n+    static PopupMenu getHash(Component c) {\n+        return popupTable.get(c);\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/PopupMenu\/ActivePopupCrashTest.java","additions":220,"deletions":0,"binary":false,"changes":220,"status":"added"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.Menu;\n+import java.awt.MenuItem;\n+import java.awt.Point;\n+import java.awt.PopupMenu;\n+import java.awt.Robot;\n+\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+\/*\n+ * @test\n+ * @bug 5021183\n+ * @summary Tests Key Traversal doesn't crash PopupMenu\n+ * @key headful\n+ * @run main KeyTraversalCrash\n+ *\/\n+\n+public class KeyTraversalCrash {\n+    private static Frame f;\n+    private static Label label;\n+\n+    private static volatile Point loc;\n+    private static volatile Dimension dim;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(100);\n+            EventQueue.invokeAndWait(KeyTraversalCrash::createAndShowUI);\n+            robot.delay(1000);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                loc = label.getLocationOnScreen();\n+                dim = label.getSize();\n+            });\n+\n+            robot.mouseMove(loc.x + 20, loc.y + 20);\n+            robot.mousePress(InputEvent.BUTTON3_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON3_DOWN_MASK);\n+\n+            robot.mouseMove(loc.x + 25, loc.y + 25);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            robot.keyPress(KeyEvent.VK_LEFT);\n+            robot.keyRelease(KeyEvent.VK_LEFT);\n+\n+            robot.keyPress(KeyEvent.VK_DOWN);\n+            robot.keyRelease(KeyEvent.VK_DOWN);\n+\n+            \/\/ To close the popup, otherwise test fails on windows with timeout error\n+            robot.mouseMove(loc.x + dim.width - 20, loc.y + dim.height - 20);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void createAndShowUI() {\n+        f = new Frame(\"KeyTraversalCrash Test\");\n+        final PopupMenu popup = new PopupMenu();\n+        for (int i = 0; i < 10; i++) {\n+            Menu menu = new Menu(\"Menu \" + i);\n+            for(int j = 0; j < 10; j++) {\n+                MenuItem menuItem = new MenuItem(\"MenuItem \" + j);\n+                menu.add(menuItem);\n+            }\n+            popup.add(menu);\n+        }\n+        label = new Label(\"Label\");\n+        f.add(label);\n+        f.add(popup);\n+        label.addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mousePressed(MouseEvent me) {\n+                if (me.isPopupTrigger()) {\n+                    popup.show(me.getComponent(), me.getX(), me.getY());\n+                }\n+            }\n+\n+            @Override\n+            public void mouseReleased(MouseEvent me) {\n+                if (me.isPopupTrigger()) {\n+                    popup.show(me.getComponent(), me.getX(), me.getY());\n+                }\n+            }\n+        });\n+        f.setSize(200, 200);\n+        f.setLocationRelativeTo(null);\n+        f.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/PopupMenu\/KeyTraversalCrash.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.Button;\n+import java.awt.Frame;\n+import java.awt.MenuItem;\n+import java.awt.PopupMenu;\n+\n+import java.awt.event.MouseEvent;\n+\n+\/*\n+ * @test\n+ * @bug 4186663 4265525\n+ * @summary Tests that plural PopupMenus can not appear at the same time\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MultiplePopupMenusTest\n+ *\/\n+\n+public class MultiplePopupMenusTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                Click the right mouse button on the button\n+                If multiple popups appear at the same time the\n+                test fails else passes.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"MultiplePopupMenusTest Instruction\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(30)\n+                .testUI(MultiplePopupMenusTest::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createUI() {\n+        Frame fr = new Frame(\"MultiplePopupMenusTest Test\");\n+        TestButton button = new TestButton(\"button\");\n+        fr.add(button);\n+        fr.setSize(200, 200);\n+        return fr;\n+    }\n+\n+    static class TestButton extends Button {\n+        public TestButton(String title) {\n+            super(title);\n+            enableEvents(AWTEvent.MOUSE_EVENT_MASK);\n+        }\n+\n+        @Override\n+        public void processMouseEvent(MouseEvent e) {\n+            if (e.isPopupTrigger()) {\n+                for (int i = 0; i < 10; i++) {\n+                    PopupMenu pm = new PopupMenu(\"Popup \" + i);\n+                    pm.add(new MenuItem(\"item 1\"));\n+                    pm.add(new MenuItem(\"item 2\"));\n+                    add(pm);\n+                    pm.show(this, e.getX() + i * 5, e.getY() + i * 5);\n+                }\n+            }\n+            super.processMouseEvent(e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/PopupMenu\/MultiplePopupMenusTest.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.MenuItem;\n+import java.awt.PopupMenu;\n+\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+\/*\n+ * @test\n+ * @bug 4281273\n+ * @summary PopupMenu crashed in Java. Simplified testcase.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @requires (os.family == \"windows\")\n+ * @run main\/manual PopupMenuCrash\n+ *\/\n+\n+public class PopupMenuCrash {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                This tests a windows specific problem.\n+                When you see a frame titled \"PopupMenuCrash Test\", right-click on it a lot\n+                for a few seconds. Then wait about 10 seconds before the PopupMenus\n+                start to appear. Then dispose them one by one by clicking on them.\n+                When PopupMenus do not appear anymore, press Pass.\n+                In case of a failure, you'll see a crash.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"PopupMenuCrash Instruction\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(PopupMenuCrash::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createUI() {\n+        final Frame f = new Frame(\"PopupMenuCrash Test\");\n+        f.setLayout(new FlowLayout());\n+        f.add(new Label(\"Press right mouse button inside this frame.\"));\n+        f.add(new Label(\"A pop-up menu should appear.\"));\n+        f.addMouseListener(new MouseAdapter() {\n+            PopupMenu popup;\n+            boolean firstPress = true;\n+\n+            @Override\n+            public void mousePressed(MouseEvent evt) {\n+                if (firstPress) {\n+                    firstPress = false;\n+                    try {\n+                        Thread.sleep(15000);\n+                    } catch (InterruptedException ignored) {\n+                    }\n+                }\n+\n+                if ((evt.getModifiers() & InputEvent.BUTTON3_MASK) != 0) {\n+                    popup = new PopupMenu(\"Popup Menu Title\");\n+                    MenuItem mi = new MenuItem(\"MenuItem\");\n+                    popup.add(mi);\n+                    f.add(popup);\n+                    popup.show(evt.getComponent(), evt.getX(), evt.getY());\n+                }\n+            }\n+\n+            @Override\n+            public void mouseReleased(MouseEvent evt) {\n+                if ((evt.getModifiers() & InputEvent.BUTTON3_MASK) != 0) {\n+                    if (popup != null) {\n+                        f.remove(popup);\n+                        popup = null;\n+                    }\n+                }\n+            }\n+        });\n+\n+        f.setSize(400, 350);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/PopupMenu\/PopupMenuCrash.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -0,0 +1,142 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.MenuItem;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.PopupMenu;\n+import java.awt.Robot;\n+\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+\/*\n+ * @test\n+ * @bug 4083400\n+ * @key headful\n+ * @summary Tests that excessive popping up and down does not crash or\n+ *          throw an exception.\n+ * @run main StressTest\n+ *\/\n+\n+public class StressTest {\n+    private static Frame fr;\n+    private static PopupTestPanel panel;\n+\n+    private static volatile Point panelCenter;\n+\n+    public static void main(String[] args) throws Exception {\n+        final int REPEAT_COUNT = 5;\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(50);\n+            EventQueue.invokeAndWait(StressTest::createAndShowUI);\n+            robot.delay(1000);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                Point loc = panel.getLocationOnScreen();\n+                Dimension dim = panel.getSize();\n+                panelCenter = new Point(loc.x + dim.width \/ 2, loc.y + dim.height \/ 2);\n+            });\n+\n+            for (int i = 0; i < REPEAT_COUNT; i++) {\n+                robot.mouseMove(panelCenter.x + i * 2, panelCenter.y + i * 2);\n+\n+                robot.mousePress(InputEvent.BUTTON3_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON3_DOWN_MASK);\n+\n+                robot.mouseMove(panelCenter.x - i * 2, panelCenter.y - i * 2);\n+\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (fr != null) {\n+                    fr.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void createAndShowUI() {\n+        fr = new Frame(\"PopupMenu Test\");\n+        panel = new PopupTestPanel();\n+        fr.add(panel);\n+        fr.setSize(300, 200);\n+        fr.setVisible(true);\n+    }\n+\n+    static class PopupTestPanel extends Panel {\n+\n+        static class Item extends MenuItem {\n+            public Item(String text) {\n+                super(text);\n+            }\n+\n+            public boolean isEnabled() {\n+                try {\n+                    Thread.sleep(100);\n+                } catch (InterruptedException ignored) {\n+                }\n+                return super.isEnabled();\n+            }\n+        }\n+\n+        final PopupMenu popup;\n+\n+        public PopupTestPanel() {\n+            popup = new PopupMenu();\n+            popup.add(new Item(\"Soap\"));\n+            popup.add(new Item(\"Sponge\"));\n+            popup.add(new Item(\"Flannel\"));\n+            popup.add(new Item(\"Mat\"));\n+            popup.add(new Item(\"Towel\"));\n+            add(popup);\n+            addMouseListener(new MouseAdapter() {\n+                @Override\n+                public void mousePressed(MouseEvent e) {\n+                    if (e.isPopupTrigger()) {\n+                        showPopup(e);\n+                    }\n+                }\n+\n+                @Override\n+                public void mouseReleased(MouseEvent e) {\n+                    if (e.isPopupTrigger()) {\n+                        showPopup(e);\n+                    }\n+                }\n+\n+                private void showPopup(MouseEvent e) {\n+                    popup.show((Component) e.getSource(), e.getX(), e.getY());\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/PopupMenu\/StressTest.java","additions":142,"deletions":0,"binary":false,"changes":142,"status":"added"}]}