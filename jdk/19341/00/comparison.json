{"files":[{"patch":"@@ -0,0 +1,155 @@\n+\/*\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 4211731 4214512\n+ * @summary\n+ *     This test checks if menu bars lay out correctly when their\n+ *     ComponentOrientation property is set to RIGHT_TO_LEFT.  This test is\n+ *     manual.  The tester is asked to compare left-to-right and\n+ *     right-to-left menu bars and judge whether they are mirror images of each\n+ *     other.\n+ * @library \/test\/jdk\/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual RightLeftOrientation\n+ *\/\n+\n+import java.awt.ComponentOrientation;\n+import java.awt.Point;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import javax.swing.ButtonGroup;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JPanel;\n+import javax.swing.JRadioButton;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+public class RightLeftOrientation {\n+\n+    static JFrame ltrFrame;\n+    static JFrame rtlFrame;\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+        This test checks menu bars for correct Right-To-Left Component Orientation.\n+\n+        You should see two frames, each containing a menu bar.\n+\n+        One frame will be labelled \"Left To Right\" and will contain\n+        a menu bar with menus starting on its left side.\n+        The other frame will be labelled \"Right To Left\" and will\n+        contain a menu bar with menus starting on its right side.\n+\n+        The test will also contain radio buttons that can be used to set\n+        the look and feel of the menu bars.\n+        For each look and feel, you should compare the two menu\n+        bars and make sure they are mirror images of each other. \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                 .title(\"RTL test Instructions\")\n+                 .instructions(INSTRUCTIONS)\n+                 .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                 .columns(30)\n+                 .testUI(RightLeftOrientation::createTestUI)\n+                 .build()\n+                 .awaitAndCheck();\n+    }\n+\n+    private static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"RightLeftOrientation\");\n+        JPanel panel = new JPanel();\n+\n+        ButtonGroup group = new ButtonGroup();\n+        JRadioButton rb;\n+        ActionListener plafChanger = new PlafChanger();\n+\n+        UIManager.LookAndFeelInfo[] lafInfos = UIManager.getInstalledLookAndFeels();\n+        for (int i = 0; i < lafInfos.length; i++) {\n+            rb = new JRadioButton(lafInfos[i].getName());\n+            rb.setActionCommand(lafInfos[i].getClassName());\n+            rb.addActionListener(plafChanger);\n+            group.add(rb);\n+            panel.add(rb);\n+            if (i == 0) {\n+                rb.setSelected(true);\n+            }\n+        }\n+\n+        frame.add(panel);\n+\n+\n+        ltrFrame = new JFrame(\"Left To Right\");\n+        ltrFrame.setJMenuBar(createMenuBar(ComponentOrientation.LEFT_TO_RIGHT));\n+        ltrFrame.setSize(400, 100);\n+        ltrFrame.setLocation(new Point(10, 10));\n+        ltrFrame.setVisible(true);\n+\n+        rtlFrame = new JFrame(\"Right To Left\");\n+        rtlFrame.setJMenuBar(createMenuBar(ComponentOrientation.RIGHT_TO_LEFT));\n+        rtlFrame.setSize(400, 100);\n+        rtlFrame.setLocation(new Point(10, 120));\n+        rtlFrame.setVisible(true);\n+        frame.pack();\n+        return frame;\n+    }\n+\n+    static class PlafChanger implements ActionListener {\n+        public void actionPerformed(ActionEvent e) {\n+            String lnfName = e.getActionCommand();\n+\n+            try {\n+                UIManager.setLookAndFeel(lnfName);\n+                SwingUtilities.updateComponentTreeUI(ltrFrame);\n+                SwingUtilities.updateComponentTreeUI(rtlFrame);\n+            }\n+            catch (Exception exc) {\n+                System.err.println(\"Could not load LookAndFeel: \" + lnfName);\n+            }\n+\n+        }\n+    }\n+\n+\n+    static JMenuBar createMenuBar(ComponentOrientation o) {\n+        JMenuBar menuBar = new JMenuBar();\n+        menuBar.setComponentOrientation(o);\n+\n+        JMenu menu = new JMenu(\"One\");\n+        menu.setComponentOrientation(o);\n+        menuBar.add(menu);\n+\n+        menu = new JMenu(\"Two\");\n+        menu.setComponentOrientation(o);\n+        menuBar.add(menu);\n+\n+        menu = new JMenu(\"Three\");\n+        menu.setComponentOrientation(o);\n+        menuBar.add(menu);\n+\n+        return menuBar;\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenuBar\/RightLeftOrientation.java","additions":155,"deletions":0,"binary":false,"changes":155,"status":"added"},{"patch":"@@ -0,0 +1,173 @@\n+\/*\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 4214514\n+ * @summary\n+ *     This test checks if tool bars lay out correctly when their\n+ *     ComponentOrientation property is set to RIGHT_TO_LEFT.  This test is\n+ *     manual.  The tester is asked to compare left-to-right and\n+ *     right-to-left tool bars and judge whether they are mirror images of each\n+ *     other.\n+ * @library \/test\/jdk\/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual RightLeftOrientation\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.ComponentOrientation;\n+import java.awt.Container;\n+import java.awt.Point;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import javax.swing.ButtonGroup;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JRadioButton;\n+import javax.swing.JToolBar;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+public class RightLeftOrientation {\n+\n+    static JFrame ltrFrame;\n+    static JFrame rtlFrame;\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+        This test checks tool bars for correct Right-To-Left Component Orientation.\n+\n+        You should see two frames, each containing a tool bar.\n+\n+        One frame will be labelled \"Left To Right\" and will contain\n+        a tool bar with buttons starting on its left side.\n+        The other frame will be labelled \"Right To Left\" and will\n+        contain a tool bar with buttons starting on its right side.\n+\n+        The test will also contain radio buttons that can be used to set\n+        the look and feel of the tool bars.\n+        For each look and feel, you should compare the two tool bars and\n+        make sure they are mirror images of each other.\n+        You should also drag the tool bars to each corner of the frame\n+        to make sure the docking behavior is consistent between the two frames.\"\"\";\n+\n+     public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                 .title(\"RTL test Instructions\")\n+                 .instructions(INSTRUCTIONS)\n+                 .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                 .columns(35)\n+                 .testUI(RightLeftOrientation::createTestUI)\n+                 .build()\n+                 .awaitAndCheck();\n+    }\n+\n+    private static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"RightLeftOrientation\");\n+        JPanel panel = new JPanel();\n+\n+        ButtonGroup group = new ButtonGroup();\n+        JRadioButton rb;\n+        ActionListener plafChanger = new PlafChanger();\n+\n+        UIManager.LookAndFeelInfo[] lafInfos = UIManager.getInstalledLookAndFeels();\n+        for (int i = 0; i < lafInfos.length; i++) {\n+            rb = new JRadioButton(lafInfos[i].getName());\n+            rb.setActionCommand(lafInfos[i].getClassName());\n+            rb.addActionListener(plafChanger);\n+            group.add(rb);\n+            panel.add(rb);\n+            if (i == 0) {\n+                rb.setSelected(true);\n+            }\n+        }\n+\n+        frame.add(panel);\n+\n+\n+        ltrFrame = new JFrame(\"Left To Right\");\n+        Container contentPane = ltrFrame.getContentPane();\n+        contentPane.setLayout(new BorderLayout());\n+        panel = new JPanel();\n+        panel.setBackground( Color.white );\n+        contentPane.add(\"Center\",panel);\n+        contentPane.add(\"North\",\n+                        createToolBar(ComponentOrientation.LEFT_TO_RIGHT));\n+        ltrFrame.setSize(400, 140);\n+        ltrFrame.setLocation(new Point(10, 10));\n+        ltrFrame.setVisible(true);\n+\n+        rtlFrame = new JFrame(\"Right To Left\");\n+        contentPane = rtlFrame.getContentPane();\n+        contentPane.setLayout(new BorderLayout());\n+        panel = new JPanel();\n+        panel.setBackground( Color.white );\n+        contentPane.add(\"Center\",panel);\n+        contentPane.add(\"North\",\n+                        createToolBar(ComponentOrientation.RIGHT_TO_LEFT));\n+        rtlFrame.setSize(400, 140);\n+        rtlFrame.setLocation(new Point(420, 10));\n+        rtlFrame.setVisible(true);\n+\n+        frame.pack();\n+        return frame;\n+    }\n+\n+    static class PlafChanger implements ActionListener {\n+        public void actionPerformed(ActionEvent e) {\n+            String lnfName = e.getActionCommand();\n+\n+            try {\n+                UIManager.setLookAndFeel(lnfName);\n+                SwingUtilities.updateComponentTreeUI(ltrFrame);\n+                SwingUtilities.updateComponentTreeUI(rtlFrame);\n+            }\n+            catch (Exception exc) {\n+                System.err.println(\"Could not load LookAndFeel: \" + lnfName);\n+            }\n+\n+        }\n+    }\n+\n+\n+    static JToolBar createToolBar(ComponentOrientation o) {\n+        JToolBar toolBar = new JToolBar();\n+        toolBar.setComponentOrientation(o);\n+\n+        JButton button = new JButton(\"One\");\n+        button.setComponentOrientation(o);\n+        toolBar.add(button);\n+\n+        button = new JButton(\"Two\");\n+        button.setComponentOrientation(o);\n+        toolBar.add(button);\n+\n+        button = new JButton(\"Three\");\n+        button.setComponentOrientation(o);\n+        toolBar.add(button);\n+\n+        return toolBar;\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JToolBar\/RightLeftOrientation.java","additions":173,"deletions":0,"binary":false,"changes":173,"status":"added"}]}