{"files":[{"patch":"@@ -412,0 +412,1 @@\n+ -runtime\/cds\/appcds\/aotCode \\\n@@ -511,0 +512,1 @@\n+ -runtime\/cds\/appcds\/aotCode \\\n@@ -588,0 +590,1 @@\n+  runtime\/cds\/appcds\/aotCode \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Sanity test of combinations of the AOT Code Caching diagnostic flags\n+ * @requires vm.cds\n+ * @comment work around JDK-8345635\n+ * @requires !vm.jvmci.enabled\n+ * @library \/test\/lib \/test\/setup_aot\n+ * @build AOTCodeFlags JavacBenchApp\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar\n+ *                 JavacBenchApp\n+ *                 JavacBenchApp$ClassFile\n+ *                 JavacBenchApp$FileManager\n+ *                 JavacBenchApp$SourceFile\n+ * @run driver AOTCodeFlags\n+ *\/\n+\n+import jdk.test.lib.cds.CDSAppTester;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class AOTCodeFlags {\n+    public static int flag_sign = 0;\n+    public static void main(String... args) throws Exception {\n+        Tester t = new Tester();\n+        for (int i = 0; i < 2; i++) {\n+            flag_sign = i;\n+            t.run(new String[] {\"AOT\"});\n+        }\n+    }\n+    static class Tester extends CDSAppTester {\n+        public Tester() {\n+            super(\"AOTCodeFlags\" + flag_sign);\n+        }\n+\n+        @Override\n+        public String classpath(RunMode runMode) {\n+            return \"app.jar\";\n+        }\n+\n+        @Override\n+        public String[] vmArgs(RunMode runMode) {\n+            switch (runMode) {\n+            case RunMode.ASSEMBLY:\n+            case RunMode.PRODUCTION:\n+                return new String[] {\n+                    \"-XX:+UnlockDiagnosticVMOptions\",\n+                    \"-XX:\" + (flag_sign == 0 ? \"-\" : \"+\") + \"AOTAdapterCaching\",\n+                    \"-Xlog:aot+codecache+init\",\n+                    \"-Xlog:aot+codecache+exit\",\n+                };\n+            }\n+            return new String[] {};\n+        }\n+\n+        @Override\n+        public String[] appCommandLine(RunMode runMode) {\n+            return new String[] {\n+                \"JavacBenchApp\", \"10\"\n+            };\n+        }\n+\n+        @Override\n+        public void checkExecution(OutputAnalyzer out, RunMode runMode) throws Exception {\n+            if (flag_sign == 0) {\n+                switch (runMode) {\n+                case RunMode.ASSEMBLY:\n+                    out.shouldNotContain(\"Adapters:  total\");\n+                    break;\n+                case RunMode.PRODUCTION:\n+                    out.shouldNotContain(\"entries table at offset\");\n+                    break;\n+                }\n+\n+            } else {\n+                switch (runMode) {\n+                case RunMode.ASSEMBLY:\n+                    out.shouldContain(\"Adapters:  total\");\n+                    break;\n+                case RunMode.PRODUCTION:\n+                    out.shouldContain(\"entries table at offset\");\n+                    break;\n+                }\n+            }\n+        }\n+\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCode\/AOTCodeFlags.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"}]}