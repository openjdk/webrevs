{"files":[{"patch":"@@ -392,4 +392,0 @@\n-  if (method()->is_synchronized()) {\n-    set_has_monitors(true);\n-  }\n-\n@@ -584,1 +580,1 @@\n-, _has_monitors(false)\n+, _has_monitors(method->is_synchronized() || method->has_monitor_bytecodes())\n","filename":"src\/hotspot\/share\/c1\/c1_Compilation.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2319,1 +2319,0 @@\n-  compilation()->set_has_monitors(true);\n@@ -3509,0 +3508,9 @@\n+static void set_flags_for_inlined_callee(Compilation* compilation, ciMethod* callee) {\n+  if (callee->has_reserved_stack_access()) {\n+    compilation->set_has_reserved_stack_access(true);\n+  }\n+  if (callee->is_synchronized() || callee->has_monitor_bytecodes()) {\n+    compilation->set_has_monitors(true);\n+  }\n+}\n+\n@@ -3525,3 +3533,1 @@\n-      if (callee->has_reserved_stack_access()) {\n-        compilation()->set_has_reserved_stack_access(true);\n-      }\n+      set_flags_for_inlined_callee(compilation(), callee);\n@@ -3538,3 +3544,1 @@\n-      if (callee->has_reserved_stack_access()) {\n-        compilation()->set_has_reserved_stack_access(true);\n-      }\n+      set_flags_for_inlined_callee(compilation(), callee);\n@@ -3558,3 +3562,1 @@\n-    if (callee->has_reserved_stack_access()) {\n-      compilation()->set_has_reserved_stack_access(true);\n-    }\n+    set_flags_for_inlined_callee(compilation(), callee);\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -182,2 +182,0 @@\n-  C->set_has_monitors(true);\n-\n@@ -201,4 +199,0 @@\n-  \/\/ need to set it for monitor exit as well.\n-  \/\/ OSR compiled methods can start with lock taken\n-  C->set_has_monitors(true);\n-\n","filename":"src\/hotspot\/share\/opto\/locknode.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -426,1 +426,1 @@\n-  if (parse_method->is_synchronized()) {\n+  if (parse_method->is_synchronized() || parse_method->has_monitor_bytecodes()) {\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1501,15 +1501,15 @@\n-\/\/ static bool monitors_on_stack(JavaThread* thread) {\n-\/\/   ContinuationEntry* ce = thread->last_continuation();\n-\/\/   RegisterMap map(thread,\n-\/\/                   RegisterMap::UpdateMap::include,\n-\/\/                   RegisterMap::ProcessFrames::include,\n-\/\/                   RegisterMap::WalkContinuation::skip);\n-\/\/   map.set_include_argument_oops(false);\n-\/\/   for (frame f = thread->last_frame(); Continuation::is_frame_in_continuation(ce, f); f = f.sender(&map)) {\n-\/\/     if ((f.is_interpreted_frame() && ContinuationHelper::InterpretedFrame::is_owning_locks(f)) ||\n-\/\/         (f.is_compiled_frame() && ContinuationHelper::CompiledFrame::is_owning_locks(map.thread(), &map, f))) {\n-\/\/       return true;\n-\/\/     }\n-\/\/   }\n-\/\/   return false;\n-\/\/ }\n+static bool monitors_on_stack(JavaThread* thread) {\n+  ContinuationEntry* ce = thread->last_continuation();\n+  RegisterMap map(thread,\n+                  RegisterMap::UpdateMap::include,\n+                  RegisterMap::ProcessFrames::include,\n+                  RegisterMap::WalkContinuation::skip);\n+  map.set_include_argument_oops(false);\n+  for (frame f = thread->last_frame(); Continuation::is_frame_in_continuation(ce, f); f = f.sender(&map)) {\n+    if ((f.is_interpreted_frame() && ContinuationHelper::InterpretedFrame::is_owning_locks(f)) ||\n+        (f.is_compiled_frame() && ContinuationHelper::CompiledFrame::is_owning_locks(map.thread(), &map, f))) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n@@ -1578,2 +1578,2 @@\n-  \/\/ assert(monitors_on_stack(current) == ((current->held_monitor_count() - current->jni_monitor_count()) > 0),\n-  \/\/        \"Held monitor count and locks on stack invariant: \" INT64_FORMAT \" JNI: \" INT64_FORMAT, (int64_t)current->held_monitor_count(), (int64_t)current->jni_monitor_count());\n+  assert(monitors_on_stack(current) == ((current->held_monitor_count() - current->jni_monitor_count()) > 0),\n+         \"Held monitor count and locks on stack invariant: \" INT64_FORMAT \" JNI: \" INT64_FORMAT, (int64_t)current->held_monitor_count(), (int64_t)current->jni_monitor_count());\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"}]}