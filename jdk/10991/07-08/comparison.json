{"files":[{"patch":"@@ -170,5 +170,6 @@\n-        return String.format(\"(%s)%s\",\n-                             Stream.of(parameterArray())\n-                                   .map(ClassDesc::descriptorString)\n-                                   .collect(Collectors.joining()),\n-                             returnType().descriptorString());\n+        var sb = new StringBuilder();\n+        sb.append('(');\n+        for (int i=0; i<parameterCount(); i++) {\n+            sb.append(parameterType(i).descriptorString());\n+        }\n+        return sb.append(')').append(returnType().descriptorString()).toString();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/MethodTypeDesc.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -74,2 +74,6 @@\n-        ClassDesc[] paramTypes = types.stream().skip(1).map(ClassDesc::ofDescriptor).toArray(ClassDesc[]::new);\n-        return new MethodTypeDescImpl(ClassDesc.ofDescriptor(types.get(0)), paramTypes);\n+        ClassDesc[] paramTypes = new ClassDesc[types.size() - 1];\n+        var ret = ClassDesc.ofDescriptor(types.get(0));\n+        for (int i = 0; i < paramTypes.length; i++) {\n+            paramTypes[i] = ClassDesc.ofDescriptor(types.get(i + 1));\n+        }\n+        return new MethodTypeDescImpl(ret, paramTypes);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/MethodTypeDescImpl.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import jdk.internal.classfile.impl.AbstractPoolEntry.ClassEntryImpl;\n@@ -160,1 +161,3 @@\n-        return classEntry(utf8Entry(classDesc.isArray() ? classDesc.descriptorString() : Util.toInternalName(classDesc)));\n+        ClassEntryImpl ret = (ClassEntryImpl)classEntry(utf8Entry(classDesc.isArray() ? classDesc.descriptorString() : Util.toInternalName(classDesc)));\n+        ret.sym = classDesc;\n+        return ret;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ConstantPoolBuilder.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -559,0 +559,2 @@\n+        public ClassDesc sym = null;\n+\n@@ -565,1 +567,7 @@\n-            return cp.canWriteDirect(constantPool) ? this : cp.classEntry(ref1);\n+            if (cp.canWriteDirect(constantPool)) {\n+                return this;\n+            } else {\n+                ClassEntryImpl ret = (ClassEntryImpl)cp.classEntry(ref1);\n+                ret.sym = sym;\n+                return ret;\n+            }\n@@ -570,1 +578,4 @@\n-            return Util.toClassDesc(asInternalName());\n+            if (sym == null) {\n+                sym = Util.toClassDesc(asInternalName());\n+            }\n+            return sym;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"}]}