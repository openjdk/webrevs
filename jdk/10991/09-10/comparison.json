{"files":[{"patch":"@@ -183,0 +183,2 @@\n+    record RawExceptionCatch(int start, int end, int handler, Type catchType) {}\n+\n@@ -190,1 +192,2 @@\n-    private final List<AbstractPseudoInstruction.ExceptionCatchImpl> exceptionTable;\n+    private final List<AbstractPseudoInstruction.ExceptionCatchImpl> handlers;\n+    private final List<RawExceptionCatch> rawHandlers;\n@@ -228,1 +231,2 @@\n-        this.exceptionTable = handlers;\n+        this.handlers = handlers;\n+        this.rawHandlers = new ArrayList<>(handlers.size());\n@@ -251,6 +255,3 @@\n-    private int getFrameIndexFromOffset(int offset) {\n-        int i = 0;\n-        for (; i < frames.size(); i++) {\n-            if (frames.get(i).offset == offset) {\n-                return i;\n-            }\n+    private Frame getFrame(int offset) {\n+        for (var f : frames) {\n+            if (f.offset == offset) return f;\n@@ -258,1 +259,1 @@\n-        return i;\n+        return null;\n@@ -262,2 +263,1 @@\n-        int index = getFrameIndexFromOffset(target);\n-        frame.checkAssignableTo(frames.get(index));\n+        frame.checkAssignableTo(getFrame(target));\n@@ -278,1 +278,1 @@\n-        for (var exhandler : exceptionTable) {\n+        for (var exhandler : handlers) {\n@@ -281,2 +281,9 @@\n-            if (start_pc < exMin) exMin = start_pc;\n-            if (end_pc > exMax) exMax = end_pc;\n+            int handler_pc = labelContext.labelToBci(exhandler.handler());\n+            if (start_pc >= 0 && end_pc >= 0 && end_pc > start_pc && handler_pc >= 0) {\n+                if (start_pc < exMin) exMin = start_pc;\n+                if (end_pc > exMax) exMax = end_pc;\n+                var catchType = exhandler.catchType();\n+                rawHandlers.add(new RawExceptionCatch(start_pc, end_pc, handler_pc,\n+                        catchType.isPresent() ? cpIndexToType(catchType.get().index(), cp)\n+                                              : Type.THROWABLE_TYPE));\n+            }\n@@ -320,1 +327,1 @@\n-        var it = exceptionTable.listIterator();\n+        var it = handlers.listIterator();\n@@ -651,2 +658,2 @@\n-        for (var exhandler : exceptionTable) {\n-            if (bci >= labelContext.labelToBci(exhandler.tryStart()) && bci < labelContext.labelToBci(exhandler.tryEnd())) {\n+        for (var ex : rawHandlers) {\n+            if (bci == ex.start || (currentFrame.localsChanged && bci > ex.start && bci < ex.end)) {\n@@ -655,5 +662,2 @@\n-                Frame newFrame = currentFrame.frameInExceptionHandler(flags);\n-                var catchType = exhandler.catchType();\n-                newFrame.pushStack(catchType.isPresent() ? cpIndexToType(catchType.get().index(), cp) : Type.THROWABLE_TYPE);\n-                int handler = labelContext.labelToBci(exhandler.handler());\n-                if (handler != -1) checkJumpTarget(newFrame, handler);\n+                Frame newFrame = currentFrame.frameInExceptionHandler(flags, ex.catchType);\n+                checkJumpTarget(newFrame, ex.handler);\n@@ -662,0 +666,1 @@\n+        currentFrame.localsChanged = false;\n@@ -943,2 +948,2 @@\n-        for (var exhandler : exceptionTable) try {\n-            offsets.set(labelContext.labelToBci(exhandler.handler()));\n+        for (var exhandler : rawHandlers) try {\n+            offsets.set(exhandler.handler());\n@@ -959,0 +964,1 @@\n+        boolean localsChanged = true;\n@@ -1028,2 +1034,2 @@\n-        Frame frameInExceptionHandler(int flags) {\n-            return new Frame(offset, flags, localsSize, 0, locals, new Type[] {Type.TOP_TYPE}, classHierarchy);\n+        Frame frameInExceptionHandler(int flags, Type excType) {\n+            return new Frame(offset, flags, localsSize, 1, locals, new Type[] {excType}, classHierarchy);\n@@ -1037,0 +1043,1 @@\n+                    localsChanged = true;\n@@ -1054,0 +1061,1 @@\n+                localsChanged = true;\n@@ -1058,0 +1066,1 @@\n+                localsChanged = true;\n@@ -1077,0 +1086,1 @@\n+            localsChanged = true;\n@@ -1122,0 +1132,1 @@\n+            localsChanged = true;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapGenerator.java","additions":37,"deletions":26,"binary":false,"changes":63,"status":"modified"}]}