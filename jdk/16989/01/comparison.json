{"files":[{"patch":"@@ -5631,1 +5631,1 @@\n-operand cmpOpUEqNeLtGe()\n+operand cmpOpUEqNeLeGt()\n@@ -5636,4 +5636,4 @@\n-  predicate(n->as_Bool()->_test._test == BoolTest::eq\n-            || n->as_Bool()->_test._test == BoolTest::ne\n-            || n->as_Bool()->_test._test == BoolTest::lt\n-            || n->as_Bool()->_test._test == BoolTest::ge);\n+  predicate(n->as_Bool()->_test._test == BoolTest::eq ||\n+            n->as_Bool()->_test._test == BoolTest::ne ||\n+            n->as_Bool()->_test._test == BoolTest::le ||\n+            n->as_Bool()->_test._test == BoolTest::gt);\n@@ -5645,4 +5645,4 @@\n-    less(0xb, \"lt\");\n-    greater_equal(0xa, \"ge\");\n-    less_equal(0xd, \"le\");\n-    greater(0xc, \"gt\");\n+    less(0x3, \"lo\");\n+    greater_equal(0x2, \"hs\");\n+    less_equal(0x9, \"ls\");\n+    greater(0x8, \"hi\");\n@@ -15688,1 +15688,1 @@\n-instruct cmpUI_imm0_branch(cmpOpUEqNeLtGe cmp, iRegIorL2I op1, immI0 op2, label labl, rFlagsRegU cr) %{\n+instruct cmpUI_imm0_branch(cmpOpUEqNeLeGt cmp, iRegIorL2I op1, immI0 op2, label labl) %{\n@@ -15697,1 +15697,1 @@\n-    if (cond == Assembler::EQ || cond == Assembler::LS)\n+    if (cond == Assembler::EQ || cond == Assembler::LS) {\n@@ -15699,1 +15699,2 @@\n-    else\n+    } else {\n+      assert(cond == Assembler::NE || cond == Assembler::HI, \"unexpected condition\");\n@@ -15701,0 +15702,1 @@\n+    }\n@@ -15705,1 +15707,1 @@\n-instruct cmpUL_imm0_branch(cmpOpUEqNeLtGe cmp, iRegL op1, immL0 op2, label labl, rFlagsRegU cr) %{\n+instruct cmpUL_imm0_branch(cmpOpUEqNeLeGt cmp, iRegL op1, immL0 op2, label labl) %{\n@@ -15714,1 +15716,1 @@\n-    if (cond == Assembler::EQ || cond == Assembler::LS)\n+    if (cond == Assembler::EQ || cond == Assembler::LS) {\n@@ -15716,1 +15718,2 @@\n-    else\n+    } else {\n+      assert(cond == Assembler::NE || cond == Assembler::HI, \"unexpected condition\");\n@@ -15718,0 +15721,1 @@\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":19,"deletions":15,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2024, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @bug 8321308\n+ * @summary AArch64: Fix matching predication for cbz\/cbnz\n+ * @requires os.arch==\"aarch64\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.TestArrLenCheckOptimization\n+ *\/\n+\n+public class TestArrLenCheckOptimization {\n+\n+    int result = 0;\n+\n+    @Test\n+    @IR(counts = {IRNode.CBZW_LS, \"1\"})\n+    void test_le_int(int ia[]) {\n+        result += ia[0];\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CBNZW_HI, \"1\"})\n+    void test_gt_int(int ia[]) {\n+        if (ia.length > 0) {\n+            result += 0x88;\n+        } else {\n+            result -= 1;\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CBZ_LS, \"1\"})\n+    void test_le_long(int ia[]) {\n+        if (Long.compareUnsigned(ia.length, 0) > 0) {\n+            result += 0x80;\n+        } else {\n+            result -= 1;\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CBZ_HI, \"1\"})\n+    void test_gt_long(int ia[]) {\n+        if (Long.compareUnsigned(ia.length, 0) > 0) {\n+            result += 0x82;\n+        } else {\n+            result -= 1;\n+        }\n+    }\n+\n+    @Run(test = {\"test_le_int\", \"test_gt_int\", \"test_le_long\", \"test_gt_long\"},\n+         mode = RunMode.STANDALONE)\n+    public void test_runner() {\n+        for (int i = 0; i < 10_000; i++) {\n+            test_le_int(new int[1]);\n+            test_gt_int(new int[0]);\n+            test_le_long(new int[1]);\n+            test_gt_long(new int[0]);\n+        }\n+    }\n+\n+    public static void main(String [] args) {\n+        TestFramework.run();\n+    }\n+ }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestArrLenCheckOptimization.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -381,0 +381,20 @@\n+    public static final String CBNZW_HI = PREFIX + \"CBNZW_HI\" + POSTFIX;\n+    static {\n+        optoOnly(CBNZW_HI, \"cbwhi\");\n+    }\n+\n+    public static final String CBZW_LS = PREFIX + \"CBZW_LS\" + POSTFIX;\n+    static {\n+        optoOnly(CBZW_LS, \"cbwls\");\n+    }\n+\n+    public static final String CBZ_LS = PREFIX + \"CBZ_LS\" + POSTFIX;\n+    static {\n+        optoOnly(CBZ_LS, \"cbls\");\n+    }\n+\n+    public static final String CBZ_HI = PREFIX + \"CBZ_HI\" + POSTFIX;\n+    static {\n+        optoOnly(CBZ_HI, \"cbhi\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"}]}