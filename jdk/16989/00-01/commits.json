[{"commit":{"message":"Redefine the interface for cmpOpUEqNeLeGt"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestArrLenCheckOptimization.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java"}],"sha":"c49553b9773f7d8ad876abcfa66f94e7814575ca"},{"commit":{"message":"Merge branch 'master' into fg8321308"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java"}],"sha":"6883ba928f46f36ce8d2c7d8dcca9f21ae3eec4a"},{"commit":{"message":"8321308: AArch64: Fix matching predication for cbz\/cbnz\n\nFor array length check like:\n```\n  if (a.length > 0) {\n    [Block 1]\n  } else {\n    [Block 2]\n  }\n```\n\nSince `a.length` is unsigned, it's semantically equivalent to:\n```\n  if (a.length != 0) {\n    [Block 1]\n  } else {\n    [Block 2]\n  }\n```\n\nOn aarch64 port, we can do the conversion like above, during c2\ncompiler instruction matching, for certain unsigned integral\ncomparisons.\n\nFor example,\n```\ncmpw  w11, #0 # unsigned\nbls   label   # unsigned\n[Block 1]\n\nlabel:\n[Block 2]\n```\n\ncan be converted to:\n```\ncbz  w11, label\n[Block 1]\n\nlabel:\n[Block 2]\n```\n\nCurrently, we have some matching rules to do the conversion[1].\nBut the predicate here[2] matches wrong `BoolTest` masks,\nso these rules fail to convert. I guess it's a typo introduced\nin JDK-8160006. The patch fixes it.\n\n[1] https:\/\/github.com\/openjdk\/jdk\/blob\/master\/src\/hotspot\/cpu\/aarch64\/aarch64.ad#L16179\n[2] https:\/\/github.com\/openjdk\/jdk\/blob\/master\/src\/hotspot\/cpu\/aarch64\/aarch64.ad#L6140"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestArrLenCheckOptimization.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java"}],"sha":"066134a25d958ce0f0e79b4590b95b76ea91012d"}]