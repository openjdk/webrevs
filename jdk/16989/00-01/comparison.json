{"files":[{"patch":"@@ -5645,4 +5645,4 @@\n-    less(0xb, \"lt\");\n-    greater_equal(0xa, \"ge\");\n-    less_equal(0xd, \"le\");\n-    greater(0xc, \"gt\");\n+    less(0x3, \"lo\");\n+    greater_equal(0x2, \"hs\");\n+    less_equal(0x9, \"ls\");\n+    greater(0x8, \"hi\");\n@@ -15697,1 +15697,1 @@\n-    if (cond == Assembler::EQ || cond == Assembler::LE)\n+    if (cond == Assembler::EQ || cond == Assembler::LS) {\n@@ -15699,1 +15699,2 @@\n-    else\n+    } else {\n+      assert(cond == Assembler::NE || cond == Assembler::HI, \"unexpected condition\");\n@@ -15701,0 +15702,1 @@\n+    }\n@@ -15714,1 +15716,1 @@\n-    if (cond == Assembler::EQ || cond == Assembler::LE)\n+    if (cond == Assembler::EQ || cond == Assembler::LS) {\n@@ -15716,1 +15718,2 @@\n-    else\n+    } else {\n+      assert(cond == Assembler::NE || cond == Assembler::HI, \"unexpected condition\");\n@@ -15718,0 +15721,1 @@\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Arm Limited. All rights reserved.\n+ * Copyright (c) 2024, Arm Limited. All rights reserved.\n@@ -43,1 +43,1 @@\n-    @IR(counts = {IRNode.CBZW_LE, \"1\"})\n+    @IR(counts = {IRNode.CBZW_LS, \"1\"})\n@@ -49,1 +49,1 @@\n-    @IR(counts = {IRNode.CBNZW_GT, \"1\"})\n+    @IR(counts = {IRNode.CBNZW_HI, \"1\"})\n@@ -59,1 +59,1 @@\n-    @IR(counts = {IRNode.CBZ_LE, \"1\"})\n+    @IR(counts = {IRNode.CBZ_LS, \"1\"})\n@@ -61,3 +61,14 @@\n-        int limit = ia.length-1;\n-        for (int i = 0; i < ia.length; i += 1) {\n-            ia[limit-i] = -123;\n+        if (Long.compareUnsigned(ia.length, 0) > 0) {\n+            result += 0x80;\n+        } else {\n+            result -= 1;\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CBZ_HI, \"1\"})\n+    void test_gt_long(int ia[]) {\n+        if (Long.compareUnsigned(ia.length, 0) > 0) {\n+            result += 0x82;\n+        } else {\n+            result -= 1;\n@@ -67,1 +78,2 @@\n-    @Run(test = {\"test_le_int\", \"test_gt_int\", \"test_le_long\"}, mode = RunMode.STANDALONE)\n+    @Run(test = {\"test_le_int\", \"test_gt_int\", \"test_le_long\", \"test_gt_long\"},\n+         mode = RunMode.STANDALONE)\n@@ -72,1 +84,2 @@\n-            test_le_long(new int[i]);\n+            test_le_long(new int[1]);\n+            test_gt_long(new int[0]);\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestArrLenCheckOptimization.java","additions":22,"deletions":9,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -381,1 +381,1 @@\n-    public static final String CBNZW_GT = PREFIX + \"CBNZW_GT\" + POSTFIX;\n+    public static final String CBNZW_HI = PREFIX + \"CBNZW_HI\" + POSTFIX;\n@@ -383,1 +383,1 @@\n-        optoOnly(CBNZW_GT, \"cbwgt\");\n+        optoOnly(CBNZW_HI, \"cbwhi\");\n@@ -386,1 +386,1 @@\n-    public static final String CBZW_LE = PREFIX + \"CBZW_LE\" + POSTFIX;\n+    public static final String CBZW_LS = PREFIX + \"CBZW_LS\" + POSTFIX;\n@@ -388,1 +388,1 @@\n-        optoOnly(CBZW_LE, \"cbwle\");\n+        optoOnly(CBZW_LS, \"cbwls\");\n@@ -391,1 +391,1 @@\n-    public static final String CBZ_LE = PREFIX + \"CBZ_LE\" + POSTFIX;\n+    public static final String CBZ_LS = PREFIX + \"CBZ_LS\" + POSTFIX;\n@@ -393,1 +393,6 @@\n-        optoOnly(CBZ_LE, \"cble\");\n+        optoOnly(CBZ_LS, \"cbls\");\n+    }\n+\n+    public static final String CBZ_HI = PREFIX + \"CBZ_HI\" + POSTFIX;\n+    static {\n+        optoOnly(CBZ_HI, \"cbhi\");\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"}]}