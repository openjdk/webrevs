{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -110,0 +110,10 @@\n+        @Override\n+        public void writeTo(DirectClassBuilder builder) {\n+            builder.withField(name, desc, new Consumer<FieldBuilder>() {\n+                @Override\n+                public void accept(FieldBuilder fieldBuilder) {\n+                    elements.forEach(fieldBuilder);\n+                }\n+            });\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedFieldBuilder.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8304937\n+ * @compile -parameters ClassBuildingTest.java\n+ * @summary Ensure that class transform chaining works.\n+ * @run junit ClassBuildingTest\n+ *\/\n+\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.ClassTransform;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.MethodTransform;\n+import jdk.internal.classfile.attribute.MethodParametersAttribute;\n+import jdk.internal.classfile.attribute.SignatureAttribute;\n+import jdk.internal.classfile.components.ClassRemapper;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.constant.ClassDesc;\n+import java.lang.invoke.MethodHandles;\n+import java.util.Comparator;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class ClassBuildingTest {\n+    @Test\n+    public void test() throws Throwable {\n+        ClassModel cm;\n+        try (var in = ClassBuildingTest.class.getResourceAsStream(\"\/Outer$1Local.class\")) {\n+            cm = Classfile.parse(Objects.requireNonNull(in).readAllBytes());\n+        }\n+\n+        ClassTransform transform = ClassRemapper.of(Map.of(ClassDesc.of(\"Outer\"), ClassDesc.of(\"Router\")));\n+        transform = transform.andThen(ClassTransform.transformingMethods(MethodTransform.dropping(me\n+                -> me instanceof MethodParametersAttribute)));\n+        transform = transform.andThen(ClassTransform.transformingMethods(MethodTransform.dropping(me\n+                -> me instanceof SignatureAttribute)));\n+\n+        MethodHandles.lookup().defineClass(cm.transform(transform));\n+    }\n+}\n+\n+class Outer {\n+    void method(int p) {\n+        class Local<V> {\n+            Local(V value, int q, Comparator<Integer> p2) {\n+                System.out.println(p + q);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/classfile\/ClassBuildingTest.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}