{"files":[{"patch":"@@ -73,1 +73,1 @@\n-#include \"runtime\/synchronizer.inline.hpp\"\n+#include \"runtime\/synchronizer.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-#include \"runtime\/synchronizer.inline.hpp\"\n+#include \"runtime\/synchronizer.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,1 +88,0 @@\n-#include \"runtime\/synchronizer.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-#include \"runtime\/synchronizer.inline.hpp\"\n+#include \"runtime\/synchronizer.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/lockStack.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-#include \"runtime\/synchronizer.inline.hpp\"\n+#include \"runtime\/synchronizer.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,0 @@\n-#include \"runtime\/synchronizer.inline.hpp\"\n@@ -2580,0 +2579,12 @@\n+ObjectMonitor* ObjectSynchronizer::read_monitor(markWord mark) {\n+  return mark.monitor();\n+}\n+\n+ObjectMonitor* ObjectSynchronizer::read_monitor(Thread* current, oop obj, markWord mark) {\n+  if (!UseObjectMonitorTable) {\n+    return read_monitor(mark);\n+  } else {\n+    return ObjectSynchronizer::get_monitor_from_table(current, obj);\n+  }\n+}\n+\n@@ -2640,0 +2651,12 @@\n+\n+bool ObjectSynchronizer::quick_enter(oop obj, BasicLock* lock, JavaThread* current) {\n+  assert(current->thread_state() == _thread_in_Java, \"invariant\");\n+  NoSafepointVerifier nsv;\n+  if (obj == nullptr) return false;       \/\/ Need to throw NPE\n+\n+  if (obj->klass()->is_value_based()) {\n+    return false;\n+  }\n+\n+  return ObjectSynchronizer::quick_enter_internal(obj, lock, current);\n+}\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-  static inline bool quick_enter(oop obj, BasicLock* Lock, JavaThread* current);\n+  static bool quick_enter(oop obj, BasicLock* Lock, JavaThread* current);\n@@ -128,2 +128,2 @@\n-  inline static ObjectMonitor* read_monitor(markWord mark);\n-  inline static ObjectMonitor* read_monitor(Thread* current, oop obj, markWord mark);\n+  static ObjectMonitor* read_monitor(markWord mark);\n+  static ObjectMonitor* read_monitor(Thread* current, oop obj, markWord mark);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_RUNTIME_SYNCHRONIZER_INLINE_HPP\n-#define SHARE_RUNTIME_SYNCHRONIZER_INLINE_HPP\n-\n-#include \"runtime\/synchronizer.hpp\"\n-\n-#include \"runtime\/safepointVerifiers.hpp\"\n-\n-inline ObjectMonitor* ObjectSynchronizer::read_monitor(markWord mark) {\n-  return mark.monitor();\n-}\n-\n-inline ObjectMonitor* ObjectSynchronizer::read_monitor(Thread* current, oop obj, markWord mark) {\n-  if (!UseObjectMonitorTable) {\n-    return read_monitor(mark);\n-  } else {\n-    return ObjectSynchronizer::get_monitor_from_table(current, obj);\n-  }\n-}\n-\n-inline bool ObjectSynchronizer::quick_enter(oop obj, BasicLock* lock, JavaThread* current) {\n-  assert(current->thread_state() == _thread_in_Java, \"invariant\");\n-  NoSafepointVerifier nsv;\n-  if (obj == nullptr) return false;       \/\/ Need to throw NPE\n-\n-  if (obj->klass()->is_value_based()) {\n-    return false;\n-  }\n-\n-  return ObjectSynchronizer::quick_enter_internal(obj, lock, current);\n-}\n-\n-#endif \/\/ SHARE_RUNTIME_SYNCHRONIZER_INLINE_HPP\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.inline.hpp","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"},{"patch":"@@ -51,1 +51,1 @@\n-#include \"runtime\/synchronizer.inline.hpp\"\n+#include \"runtime\/synchronizer.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/vframe.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-#include \"runtime\/synchronizer.inline.hpp\"\n+#include \"runtime\/synchronizer.hpp\"\n","filename":"src\/hotspot\/share\/services\/threadService.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}