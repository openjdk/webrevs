{"files":[{"patch":"@@ -680,0 +680,2 @@\n+  int invocation() const { return _invocation; }\n+\n","filename":"src\/hotspot\/share\/opto\/escape.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"opto\/c2compiler.hpp\"\n@@ -38,0 +39,1 @@\n+#include \"opto\/escape.hpp\"\n@@ -819,0 +821,10 @@\n+    \/\/ If scalarize operation is adding too many nodes, bail out\n+    \/*if (C->live_nodes() + NodeLimitFudgeFactor > C->max_node_limit()) {\n+      if (C->do_escape_analysis() == true && !C->failing()) {\n+        \/\/ Retry compilation without escape analysis.\n+        \/\/ If this is the first failure, the sentinel string will \"stick\"\n+        \/\/ to the Compile object, and the C2Compiler will see it and retry.\n+        C->record_failure(C->congraph()->invocation() > 0 ? C2Compiler::retry_no_iterative_escape_analysis() : C2Compiler::retry_no_escape_analysis());\n+      }\n+      return nullptr;\n+    }*\/\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8315916\n+ * @summary Test early bailout during the creation of graph nodes for the scalarization of array fields, rather than during code generation.\n+ * @run main\/othervm -Xcomp\n+ *                   -XX:-TieredCompilation\n+ *                   -XX:EliminateAllocationArraySizeLimit=32000\n+ *                   -XX:MaxNodeLimit=20000\n+ *                   -XX:CompileCommand=dontinline,compiler.escapeAnalysis.TestScalarizeBailout::initializeArray\n+ *                   -XX:CompileCommand=compileonly,compiler.escapeAnalysis.TestScalarizeBailout::*\n+ *                   compiler.escapeAnalysis.TestScalarizeBailout\n+ *\/\n+\n+package compiler.escapeAnalysis;\n+\n+public class TestScalarizeBailout {\n+    static Object var1;\n+\n+    public static void main(String[] args) {\n+        \/\/ The test is designed to trigger a bailout during the scalarization of array fields.\n+        \/\/ The array size is set to 16K, which is below the threshold for scalarization (MaxNodeLimit=20000).\n+        var1 = new long[16 * 1024];\n+        long[] a1 = new long[16 * 1024];\n+        TestScalarizeBailout test = new TestScalarizeBailout();\n+        test.initializeArray(a1);\n+    }\n+\n+    \/\/ This method is used to initialize the array with values from 0 to length - 1.\n+    \/\/ Esape analysis should be able to eliminate the allocation of the array as the size 16k is\n+    \/\/ below the EliminateAllocationArraySizeLimit=32000.\n+    private void initializeArray(long[] a1) {\n+        for (int i = 0; i < a1.length; i++) {\n+            a1[i] = i;\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/escapeAnalysis\/TestScalarizeBailout.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"}]}