{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,3 @@\n- * @run main\/othervm -Xcomp\n+ * @run main\/othervm\/timeout=240000 \n+ *                   -Xcomp\n+ *                   -XX:-TieredCompilation\n@@ -36,12 +38,19 @@\n-  static Object var1;\n-  public static void main(String[] args) throws Exception {\n-    var1 = new long[48 * 1024];\n-    long[] a1 = new long[48 * 1024];\n-    try {\n-      \/\/ load the class to initialize the static object and trigger the EA\n-      Class <?> Class37 = Class.forName(\"compiler.escapeAnalysis.TestScalarizeBailout\");\n-      for (int i = 0; i < a1.length; i++) {\n-        a1[i] = (i + 0);\n-      }\n-    } catch (Exception e){throw new RuntimeException(e);}\n-  }\n+    static Object var1;\n+\n+    public static void main(String[] args) {\n+        \/\/ The test is designed to trigger a bailout during the scalarization of array fields.\n+        \/\/ The array size is set to 48K, which is below the threshold for scalarization.\n+        var1 = new long[48 * 1024];\n+        long[] a1 = new long[48 * 1024];\n+        TestScalarizeBailout test = new TestScalarizeBailout();\n+        test.initializeArray(a1);\n+    }\n+\n+    \/\/ This method is used to initialize the array with values from 0 to length - 1.\n+    \/\/ Esape analysis should be able to eliminate the allocation of the array as the size 48k is\n+    \/\/ below the EliminateAllocationArraySizeLimit=60240.\n+    private void initializeArray(long[] a1) {\n+        for (int i = 0; i < a1.length; i++) {\n+            a1[i] = i;\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/escapeAnalysis\/TestScalarizeBailout.java","additions":23,"deletions":14,"binary":false,"changes":37,"status":"modified"}]}