{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,8 @@\n- * Event field annotation, specifies that the value is a boolean flag, a {@code true} or\n- * {@code false} value.\n+ * Event field annotation, specifies that the value is a boolean flag, a\n+ * {@code true} or {@code false} value.\n+ * <p>\n+ * The following example shows how the {@code BooleanFlag} annotation can be\n+ * used to describe that a setting is a boolean value. This information can be\n+ * used by a graphical user interface to display the setting as a checkbox.\n+ *\n+ * {@snippet class = \"Snippets\" region = \"BooleanFlagOverview\"}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/BooleanFlag.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,5 @@\n+ * <p>\n+ * The following example shows how the {@code Configuration} class can be used\n+ * to list available configurations and how to pass a configuration object to a\n+ * {@code Recording}.\n+ * {@snippet class = \"Snippets\" region = \"ConfigurationxsOverview\"}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/Configuration.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,5 @@\n+ * <p>\n+ * The following example shows how the {@code DataAmount} annotation can be used to\n+ * set the units {@code BITS} and {@code BYTES} to event fields.\n+ *\n+ * {@snippet class=\"Snippets\" region=\"DataAmountOverview\"}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/DataAmount.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,13 @@\n- * If an event doesn't have the annotation, then by default the event is enabled.\n+ * If an event doesn't have the annotation, then by default the event is\n+ * enabled.\n+ * <p>\n+ * The following example shows how the {@code Enabled} annotation can be used to\n+ * create a disabled event. A disabled event will at most have the overhead of\n+ * an allocation, or none if the runtime JIT compiler is able to eliminate it.\n+ *\n+ * {@snippet class = \"Snippets\" region = \"EnabledOverview\"}\n+ *\n+ * The event can be enabled programmatically, or on command line when needed,\n+ * for example:\n+ *\n+ * {@snippet class = \"Snippets\" region = \"EnabledOverviewCommandLine\"}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/Enabled.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,5 @@\n+ * <p>\n+ * The following example shows how the {@code EventType} class can\n+ * be used to print metadata about an event.\n+ *\n+ * {@snippet class=\"Snippets\" region=\"EventTypeOverview\"}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/EventType.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,5 @@\n+ * <p>\n+ * The following example shows how the {@code Period} annotation can be used\n+ * to emit events at different intervals.\n+ *\n+ * {@snippet class = \"Snippets\" region = \"PeriodOverview\"}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/Period.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,5 @@\n+ * <p>\n+ * The following example shows how the {@code ValueDescriptor} class can\n+ * be used to list field information of all types.\n+ *\n+ * {@snippet class=\"Snippets\" region=\"ValueDescriptorOverview\"}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/ValueDescriptor.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.jfr.BooleanFlag;\n@@ -30,0 +31,1 @@\n+import jdk.jfr.EventType;\n@@ -33,0 +35,1 @@\n+import jdk.jfr.DataAmount;\n@@ -34,0 +37,1 @@\n+import jdk.jfr.Enabled;\n@@ -42,0 +46,1 @@\n+import jdk.jfr.consumer.RecordingStream;\n@@ -56,0 +61,1 @@\n+import java.util.LinkedHashMap;\n@@ -57,0 +63,1 @@\n+import java.util.Map;\n@@ -58,0 +65,2 @@\n+import java.util.StringJoiner;\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -59,1 +68,0 @@\n-import java.util.stream.Collectors;\n@@ -86,0 +94,71 @@\n+    \/\/ @start region=\"BooleanFlagOverview\"\n+    @BooleanFlag\n+    @Name(\"example.Rollback\")\n+    @Label(\"Rollback\")\n+    @Description(\"Include transactions that are rollbacked\")\n+    public static class RollbackSetting extends SettingControl {\n+        private boolean value = true;\n+\n+        @Override\n+        public String combine(Set<String> values) {\n+            return values.contains(\"true\") ? \"true\" : \"false\";\n+        }\n+\n+        @Override\n+        public void setValue(String settingValue) {\n+            value = \"true\".equals(settingValue);\n+        }\n+\n+        @Override\n+        public String getValue() {\n+            return Boolean.toString(value);\n+        }\n+\n+        public boolean shouldEmit() {\n+            return value;\n+        }\n+    }\n+\n+    @Name(\"example.Transaction\")\n+    public static class TransactionEvent extends Event {\n+        @Label(\"Context\")\n+        String context;\n+\n+        @Label(\"Rollback\")\n+        boolean rollback;\n+\n+        @SettingDefinition\n+        @Name(\"rollback\")\n+        public boolean rollback(RollbackSetting rollbackSetting) {\n+            return rollback && rollbackSetting.shouldEmit();\n+        }\n+    }\n+    \/\/ @end\n+\n+    static class ConfigurationOverview {\n+    \/\/ @start region=\"ConfigurationxsOverview\"\n+    public static void main(String... args) throws Exception {\n+        if (args.length == 0) {\n+            System.out.println(\"Configurations:\");\n+            for (Configuration c : Configuration.getConfigurations()) {\n+                System.out.println(\"Name: \" + c.getName());\n+                System.out.println(\"Label: \" + c.getLabel());\n+                System.out.println(\"Description: \" + c.getDescription());\n+                System.out.println(\"Provider: \" + c.getProvider());\n+                System.out.println();\n+            }\n+        } else {\n+            String name = args[0];\n+            Configuration c = Configuration.getConfiguration(name);\n+            try (Recording r = new Recording(c)) {\n+                System.out.println(\"Starting recording with settings:\");\n+                for (Map.Entry<String, String> setting : c.getSettings().entrySet()) {\n+                    System.out.println(setting.getKey() + \" = \" + setting.getValue());\n+                }\n+                r.start();\n+            }\n+        }\n+    }\n+    \/\/ @end\n+    }\n+\n@@ -164,0 +243,41 @@\n+    \/\/ @start region=\"DataAmountOverview\"\n+    @Name(\"com.example.ImageRender\")\n+    @Label(\"Image Render\")\n+    public class ImageRender extends Event {\n+        @Label(\"Height\")\n+        long height;\n+\n+        @Label(\"Width\")\n+        long width;\n+\n+        @Label(\"Color Depth\")\n+        @DataAmount(DataAmount.BITS)\n+        int colorDepth;\n+\n+        @Label(\"Memory Size\")\n+        @DataAmount \/\/ bytes by default\n+        long memorySize;\n+    }\n+    \/\/ @end\n+\n+    \/\/ @start region=\"EnabledOverview\"\n+    @Name(\"StopWatch\")\n+    @Label(\"Stop Watch\")\n+    @Category(\"Debugging\")\n+    @StackTrace(false)\n+    @Enabled(false)\n+    static public class StopWatchEvent extends Event {\n+    }\n+\n+    public void update() {\n+        StopWatchEvent e = new StopWatchEvent();\n+        e.begin();\n+        code: \/\/ @replace regex='code:' replacement=\"...\"\n+        e.commit();\n+    }\n+    \/\/ @end\n+    \/*\n+    \/\/ @start region=\"EnabledOverviewCommandLine\"\n+    java -XX:StartFlightRecording:StopWatch#enabled=true ...\n+    \/\/ @end\n+    *\/\n@@ -208,10 +328,34 @@\n-        Recording r = new Recording();\n-        r.enable(\"jdk.CPULoad\")\n-         .withPeriod(Duration.ofSeconds(1));\n-        r.enable(\"jdk.FileWrite\")\n-         .withoutStackTrace()\n-         .withThreshold(Duration.ofNanos(10));\n-        r.start();\n-        Thread.sleep(10_000);\n-        r.stop();\n-        r.dump(Files.createTempFile(\"recording\", \".jfr\"));\n+        try (Recording r = new Recording()) {\n+            r.enable(\"jdk.CPULoad\")\n+             .withPeriod(Duration.ofSeconds(1));\n+            r.enable(\"jdk.FileWrite\")\n+             .withoutStackTrace()\n+             .withThreshold(Duration.ofNanos(10));\n+            r.start();\n+            Thread.sleep(10_000);\n+            r.stop();\n+            r.dump(Files.createTempFile(\"recording\", \".jfr\"));\n+        }\n+        \/\/ @end\n+    }\n+    void EventTypeOverview() {\n+        \/\/ @start region=\"EventTypeOverview\"\n+        for (EventType eventType : FlightRecorder.getFlightRecorder().getEventTypes()) {\n+            System.out.println(\"Event Type: \" + eventType.getName());\n+            if (eventType.getLabel() != null) {\n+                System.out.println(\"Label: \" + eventType.getLabel());\n+            }\n+            if (eventType.getDescription() != null) {\n+                System.out.println(\"Description: \" + eventType.getDescription());\n+            }\n+            StringJoiner s = new StringJoiner(\" \/ \");\n+            for (String category : eventType.getCategoryNames()) {\n+                s.add(category);\n+            }\n+            System.out.println(\"Category: \" + s);\n+            System.out.println(\"Fields: \" + eventType.getFields().size());\n+            System.out.println(\"Annotations: \" + eventType.getAnnotationElements().size());\n+            System.out.println(\"Settings: \" + eventType.getSettingDescriptors().size());\n+            System.out.println(\"Enabled: \" + eventType.isEnabled());\n+            System.out.println();\n+        }\n@@ -264,0 +408,48 @@\n+    void PeriodOverview() {\n+        \/\/ @start region = \"PeriodOverview\"\n+        @Period(\"1 s\")\n+        @Name(\"Counter\")\n+        class CountEvent extends Event {\n+            int count;\n+        }\n+        @Period(\"3 s\")\n+        @Name(\"Fizz\")\n+        class FizzEvent extends Event {\n+        }\n+        @Period(\"5 s\")\n+        @Name(\"Buzz\")\n+        class BuzzEvent extends Event {\n+        }\n+\n+        var counter = new AtomicInteger();\n+        FlightRecorder.addPeriodicEvent(CountEvent.class, () -> {\n+            CountEvent event = new CountEvent();\n+            event.count = counter.incrementAndGet();\n+            event.commit();\n+        });\n+        FlightRecorder.addPeriodicEvent(FizzEvent.class, () -> {\n+            new FizzEvent().commit();\n+        });\n+        FlightRecorder.addPeriodicEvent(BuzzEvent.class, () -> {\n+            new BuzzEvent().commit();\n+        });\n+\n+        var sb = new StringBuilder();\n+        var last = new AtomicInteger();\n+        var current = new AtomicInteger();\n+        try (var r = new RecordingStream()) {\n+            r.onEvent(\"Counter\", e -> current.set(e.getValue(\"count\")));\n+            r.onEvent(\"Fizz\", e -> sb.append(\"Fizz\"));\n+            r.onEvent(\"Buzz\", e -> sb.append(\"Buzz\"));\n+            r.onFlush(() -> {\n+                if (current.get() != last.get()) {\n+                    System.out.println(sb.isEmpty() ? current : sb);\n+                    last.set(current.get());\n+                    sb.setLength(0);\n+                }\n+            });\n+            r.start();\n+        }\n+        \/\/ @end\n+    }\n+\n@@ -306,6 +498,7 @@\n-     Recording r = new Recording(c);\n-     r.start();\n-     System.gc();\n-     Thread.sleep(5000);\n-     r.stop();\n-     r.dump(Files.createTempFile(\"my-recording\", \".jfr\"));\n+     try (Recording r = new Recording(c)) {\n+         r.start();\n+         System.gc();\n+         Thread.sleep(5000);\n+         r.stop();\n+         r.dump(Files.createTempFile(\"my-recording\", \".jfr\"));\n+     }\n@@ -413,0 +606,38 @@\n+\n+ static class ValueDsecriptorOverview {\n+     \/\/ @start region=\"ValueDescriptorOverview\"\n+     void printTypes() {\n+         Map<String, List<ValueDescriptor>> typeMap = new LinkedHashMap<>();\n+         for (EventType eventType : FlightRecorder.getFlightRecorder().getEventTypes()) {\n+             findTypes(typeMap, eventType.getName(), eventType.getFields());\n+         }\n+         for (String type : typeMap.keySet()) {\n+             System.out.println(\"Type: \" + type);\n+             for (ValueDescriptor field : typeMap.get(type)) {\n+                 System.out.println(\" Field: \" + field.getName());\n+                 String arrayBrackets = field.isArray() ? \"[]\" : \"\";\n+                 System.out.println(\"  Type: \" + field.getTypeName() + arrayBrackets);\n+                 if (field.getLabel() != null) {\n+                     System.out.println(\"  Label: \" + field.getLabel());\n+                 }\n+                 if (field.getDescription() != null) {\n+                     System.out.println(\"  Description: \" + field.getDescription());\n+                 }\n+                 if (field.getContentType() != null) {\n+                     System.out.println(\"  Content Types: \" + field.getContentType());\n+                 }\n+             }\n+             System.out.println();\n+         }\n+     }\n+\n+     void findTypes(Map<String, List<ValueDescriptor>> typeMap, String typeName, List<ValueDescriptor> fields) {\n+         if (!typeMap.containsKey(typeName)) {\n+             typeMap.put(typeName, fields);\n+             for (ValueDescriptor subField : fields) {\n+                 findTypes(typeMap, subField.getTypeName(), subField.getFields());\n+             }\n+         }\n+     }\n+     \/\/ @end\n+ }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/snippet-files\/Snippets.java","additions":248,"deletions":17,"binary":false,"changes":265,"status":"modified"}]}