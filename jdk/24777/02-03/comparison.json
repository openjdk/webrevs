{"files":[{"patch":"@@ -33,7 +33,7 @@\n- * by the HotSpot VM (see {@code LibraryCallKit::try_to_inline} in {@code\n- * library_call.cpp}) if an intrinsic is available.  Intrinsification replaces a\n- * candidate method's body, bytecode or native, with handwritten platform\n- * assembly and\/or compiler IR.  Many Java library methods have properties that\n- * cannot be deduced by the compiler for optimization, or can utilize specific\n- * hardware instructions not modeled by the compiler IR, making intrinsics\n- * necessary.\n+ * by the HotSpot VM.  (See {@code LibraryCallKit::try_to_inline} in {@code\n+ * library_call.cpp} for logic that checks if an intrinsic is available and\n+ * applicable at a given call site.)  Intrinsification replaces a candidate\n+ * method's body, bytecode or native, with handwritten platform assembly and\/or\n+ * compiler IR.  Many Java library methods have properties that cannot be\n+ * deduced by the compiler for optimization, or can utilize specific hardware\n+ * instructions not modeled by the compiler IR, making intrinsics necessary.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/annotation\/IntrinsicCandidate.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}