{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-    final int blockSize;\n+    private final int blockSize;\n@@ -140,4 +140,0 @@\n-    protected final void engineUpdate(byte[] buf) {\n-        engineUpdate(buf, 0, buf.length);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/DigestBase.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -71,4 +71,0 @@\n-    \/\/ Number of bytes in the state buffer that has been used in squeezing.\n-    \/\/ Initialized as -1, becomes 0 when squeezing starts.\n-    private int squeezeOffset = -1;\n-\n@@ -104,9 +100,0 @@\n-    void finishAbsorb() {\n-        int numOfPadding =\n-                setPaddingBytes(suffix, buffer, (int)(bytesProcessed % buffer.length));\n-        if (numOfPadding < 1) {\n-            throw new ProviderException(\"Incorrect pad size: \" + numOfPadding);\n-        }\n-        implCompress(buffer, 0);\n-    }\n-\n@@ -118,3 +105,4 @@\n-        if (engineGetDigestLength() == 0) {\n-            \/\/ this is an XOF, so the digest() call is illegal\n-            throw new ProviderException(\"Calling digest() is not allowed in an XOF\");\n+        int numOfPadding =\n+            setPaddingBytes(suffix, buffer, (int)(bytesProcessed % buffer.length));\n+        if (numOfPadding < 1) {\n+            throw new ProviderException(\"Incorrect pad size: \" + numOfPadding);\n@@ -122,2 +110,2 @@\n-        finishAbsorb();\n-        int availableBytes = blockSize;\n+        implCompress(buffer, 0);\n+        int availableBytes = buffer.length;\n@@ -134,35 +122,0 @@\n-    void implSqueeze(byte[]output, int offset, int numBytes) {\n-        if (engineGetDigestLength() != 0) {\n-            \/\/ this is not an XOF, so the squeeze() call is illegal\n-            throw new ProviderException(\"Squeezing is only allowed in XOF mode\");\n-        }\n-\n-        if (squeezeOffset == -1) {\n-            finishAbsorb();\n-            squeezeOffset = 0;\n-        }\n-        int availableBytes = blockSize - squeezeOffset;\n-        while (numBytes > availableBytes) {\n-            System.arraycopy(state, squeezeOffset, output, offset, availableBytes);\n-            numBytes -= availableBytes;\n-            offset += availableBytes;\n-            squeezeOffset = 0;\n-            availableBytes = blockSize;\n-            keccak();\n-        }\n-        System.arraycopy(state, squeezeOffset, output, offset, numBytes);\n-        squeezeOffset += numBytes;\n-        if (squeezeOffset == blockSize) {\n-            squeezeOffset = 0;\n-            keccak();\n-        }\n-    }\n-\n-    byte[] implSqueeze(int numBytes) {\n-        byte[] result = new byte[numBytes];\n-        implSqueeze(result, 0, numBytes);\n-        return result;\n-    }\n-\n-\n-\n@@ -175,1 +128,0 @@\n-        squeezeOffset = -1;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SHA3.java","additions":6,"deletions":54,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * The SHAKE256 extendable output function.\n+ * The SHAKE128 extendable output function.\n@@ -31,3 +31,0 @@\n-    \/\/ d is the required number of output bytes\n-    \/\/ If this constructor is used with d > 0, the squeezing methods will\n-    \/\/ throw a ProviderException.\n@@ -38,7 +35,0 @@\n-    \/\/ If this constructor is used to get an instance of the class, then, after\n-    \/\/ the last update, one can get the generated bytes using the squeezing\n-    \/\/ methods. Calling a digest method will throw a ProviderException.\n-    public SHAKE128() {\n-        super(\"SHAKE128\", 0, (byte) 0x1F, 32);\n-    }\n-\n@@ -52,4 +42,0 @@\n-    public void update(byte[] in) {\n-        engineUpdate(in);\n-    }\n-\n@@ -60,7 +46,0 @@\n-    public void squeeze(byte[] output, int offset, int numBytes) {\n-        implSqueeze(output, offset, numBytes);\n-    }\n-    public byte[] squeeze(int numBytes) {\n-        return implSqueeze(numBytes);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SHAKE128.java","additions":1,"deletions":22,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,3 +31,0 @@\n-    \/\/ d is the required number of output bytes\n-    \/\/ If this constructor is used with d > 0, the squeezing methods will\n-    \/\/ throw a ProviderException.\n@@ -38,7 +35,0 @@\n-    \/\/ If this constructor is used to get an instance of the class, then, after\n-    \/\/ the last update, one can get the generated bytes using the squeezing\n-    \/\/ methods. Calling a digest method will throw a ProviderException.\n-    public SHAKE256() {\n-        super(\"SHAKE256\", 0, (byte) 0x1F, 64);\n-    }\n-\n@@ -52,4 +42,0 @@\n-    public void update(byte[] in) {\n-        engineUpdate(in);\n-    }\n-\n@@ -60,7 +46,0 @@\n-    public void squeeze(byte[] output, int offset, int numBytes) {\n-        implSqueeze(output, offset, numBytes);\n-    }\n-    public byte[] squeeze(int numBytes) {\n-        return implSqueeze(numBytes);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SHAKE256.java","additions":1,"deletions":22,"binary":false,"changes":23,"status":"modified"}]}