{"files":[{"patch":"@@ -37,3 +37,3 @@\n-  VectorSet vtn_dependencies; \/\/ Shared, but cleared for every vtnode.\n-  build_inputs_for_vector_vtnodes(vtn_dependencies);\n-  build_inputs_for_scalar_vtnodes(vtn_dependencies);\n+  VectorSet vtn_memory_dependencies; \/\/ Shared, but cleared for every vtnode.\n+  build_inputs_for_vector_vtnodes(vtn_memory_dependencies);\n+  build_inputs_for_scalar_vtnodes(vtn_memory_dependencies);\n@@ -61,1 +61,1 @@\n-void SuperWordVTransformBuilder::build_inputs_for_vector_vtnodes(VectorSet& vtn_dependencies) {\n+void SuperWordVTransformBuilder::build_inputs_for_vector_vtnodes(VectorSet& vtn_memory_dependencies) {\n@@ -68,1 +68,1 @@\n-    vtn_dependencies.clear(); \/\/ Add every dependency only once per vtn.\n+    vtn_memory_dependencies.clear(); \/\/ Add every memory dependency only once per vtn.\n@@ -71,1 +71,4 @@\n-      set_req_with_scalar(p0,   vtn, vtn_dependencies, MemNode::Address);\n+      set_req_with_scalar(p0,   vtn, MemNode::Address);\n+      for (uint k = 0; k < pack->size(); k++) {\n+        add_memory_dependencies_of_node_to_vtnode(pack->at(k), vtn, vtn_memory_dependencies);\n+      }\n@@ -73,2 +76,5 @@\n-      set_req_with_scalar(p0,   vtn, vtn_dependencies, MemNode::Address);\n-      set_req_with_vector(pack, vtn, vtn_dependencies, MemNode::ValueIn);\n+      set_req_with_scalar(p0,   vtn, MemNode::Address);\n+      set_req_with_vector(pack, vtn, MemNode::ValueIn);\n+      for (uint k = 0; k < pack->size(); k++) {\n+        add_memory_dependencies_of_node_to_vtnode(pack->at(k), vtn, vtn_memory_dependencies);\n+      }\n@@ -76,2 +82,2 @@\n-      set_req_with_scalar(p0,   vtn, vtn_dependencies, 1); \/\/ scalar init\n-      set_req_with_vector(pack, vtn, vtn_dependencies, 2); \/\/ vector\n+      set_req_with_scalar(p0,   vtn, 1); \/\/ scalar init\n+      set_req_with_vector(pack, vtn, 2); \/\/ vector\n@@ -83,2 +89,2 @@\n-        set_req_with_vector(pack, vtn, vtn_dependencies, 1);\n-        set_req_with_scalar(p0,   vtn, vtn_dependencies, 2); \/\/ constant rotation\n+        set_req_with_vector(pack, vtn, 1);\n+        set_req_with_scalar(p0,   vtn, 2); \/\/ constant rotation\n@@ -86,2 +92,2 @@\n-        set_req_with_vector(pack, vtn, vtn_dependencies, 1);\n-        set_req_with_scalar(p0,   vtn, vtn_dependencies, 2); \/\/ constant rounding mode\n+        set_req_with_vector(pack, vtn, 1);\n+        set_req_with_scalar(p0,   vtn, 2); \/\/ constant rounding mode\n@@ -90,1 +96,1 @@\n-        set_all_req_with_vectors(pack, vtn, vtn_dependencies);\n+        set_all_req_with_vectors(pack, vtn);\n@@ -96,1 +102,1 @@\n-        set_all_req_with_vectors(pack, vtn, vtn_dependencies);\n+        set_all_req_with_vectors(pack, vtn);\n@@ -99,4 +105,0 @@\n-\n-    for (uint k = 0; k < pack->size(); k++) {\n-      add_dependencies_of_node_to_vtnode(pack->at(k), vtn, vtn_dependencies);\n-    }\n@@ -106,1 +108,1 @@\n-void SuperWordVTransformBuilder::build_inputs_for_scalar_vtnodes(VectorSet& vtn_dependencies) {\n+void SuperWordVTransformBuilder::build_inputs_for_scalar_vtnodes(VectorSet& vtn_memory_dependencies) {\n@@ -111,1 +113,1 @@\n-    vtn_dependencies.clear(); \/\/ Add every dependency only once per vtn.\n+    vtn_memory_dependencies.clear(); \/\/ Add every dependency only once per vtn.\n@@ -114,1 +116,2 @@\n-      set_req_with_scalar(n, vtn, vtn_dependencies, MemNode::Address);\n+      set_req_with_scalar(n, vtn, MemNode::Address);\n+      add_memory_dependencies_of_node_to_vtnode(n, vtn, vtn_memory_dependencies);\n@@ -116,2 +119,3 @@\n-      set_req_with_scalar(n, vtn, vtn_dependencies, MemNode::Address);\n-      set_req_with_scalar(n, vtn, vtn_dependencies, MemNode::ValueIn);\n+      set_req_with_scalar(n, vtn, MemNode::Address);\n+      set_req_with_scalar(n, vtn, MemNode::ValueIn);\n+      add_memory_dependencies_of_node_to_vtnode(n, vtn, vtn_memory_dependencies);\n@@ -123,1 +127,1 @@\n-      set_req_with_scalar(n, vtn, vtn_dependencies, 0);\n+      set_req_with_scalar(n, vtn, 0);\n@@ -126,1 +130,1 @@\n-      set_all_req_with_scalars(n, vtn, vtn_dependencies);\n+      set_all_req_with_scalars(n, vtn);\n@@ -128,2 +132,0 @@\n-\n-    add_dependencies_of_node_to_vtnode(n, vtn, vtn_dependencies);\n@@ -178,1 +180,1 @@\n-void SuperWordVTransformBuilder::set_req_with_scalar(Node* n, VTransformNode* vtn, VectorSet& vtn_dependencies, const int index) {\n+void SuperWordVTransformBuilder::set_req_with_scalar(Node* n, VTransformNode* vtn, const int index) {\n@@ -181,1 +183,0 @@\n-  vtn_dependencies.set(req->_idx);\n@@ -276,1 +277,1 @@\n-void SuperWordVTransformBuilder::set_req_with_vector(const Node_List* pack, VTransformNode* vtn, VectorSet& vtn_dependencies, int j) {\n+void SuperWordVTransformBuilder::set_req_with_vector(const Node_List* pack, VTransformNode* vtn, int j) {\n@@ -279,1 +280,0 @@\n-  vtn_dependencies.set(req->_idx);\n@@ -282,1 +282,1 @@\n-void SuperWordVTransformBuilder::set_all_req_with_scalars(Node* n, VTransformNode* vtn, VectorSet& vtn_dependencies) {\n+void SuperWordVTransformBuilder::set_all_req_with_scalars(Node* n, VTransformNode* vtn) {\n@@ -287,1 +287,1 @@\n-    set_req_with_scalar(n, vtn, vtn_dependencies, j);\n+    set_req_with_scalar(n, vtn, j);\n@@ -291,1 +291,1 @@\n-void SuperWordVTransformBuilder::set_all_req_with_vectors(const Node_List* pack, VTransformNode* vtn, VectorSet& vtn_dependencies) {\n+void SuperWordVTransformBuilder::set_all_req_with_vectors(const Node_List* pack, VTransformNode* vtn) {\n@@ -298,1 +298,1 @@\n-    set_req_with_vector(pack, vtn, vtn_dependencies, j);\n+    set_req_with_vector(pack, vtn, j);\n@@ -302,1 +302,1 @@\n-void SuperWordVTransformBuilder::add_dependencies_of_node_to_vtnode(Node*n, VTransformNode* vtn, VectorSet& vtn_dependencies) {\n+void SuperWordVTransformBuilder::add_memory_dependencies_of_node_to_vtnode(Node*n, VTransformNode* vtn, VectorSet& vtn_memory_dependencies) {\n@@ -306,0 +306,1 @@\n+    if (!preds.is_current_memory_edge()) { continue; }\n@@ -307,3 +308,1 @@\n-    \/\/ Only add memory dependencies to memory nodes. All others are taken care of with the req.\n-    if (n->is_Mem() && !pred->is_Mem()) { continue; }\n-\n+    \/\/ Only track every memory edge once.\n@@ -311,0 +310,1 @@\n+    if (vtn_memory_dependencies.test_set(dependency->_idx)) { continue; }\n@@ -312,5 +312,2 @@\n-    \/\/ Reduction self-cycle?\n-    if (vtn == dependency && _vloop_analyzer.reductions().is_marked_reduction(n)) { continue; }\n-\n-    if (vtn_dependencies.test_set(dependency->_idx)) { continue; }\n-    vtn->add_dependency(dependency); \/\/ Add every dependency only once per vtn.\n+    assert(n->is_Mem() && pred->is_Mem(), \"only memory edges\");\n+    vtn->add_memory_dependency(dependency); \/\/ Add every dependency only once per vtn.\n","filename":"src\/hotspot\/share\/opto\/superwordVTransformBuilder.cpp","additions":43,"deletions":46,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -57,2 +57,2 @@\n-  void build_inputs_for_vector_vtnodes(VectorSet& vtn_dependencies);\n-  void build_inputs_for_scalar_vtnodes(VectorSet& vtn_dependencies);\n+  void build_inputs_for_vector_vtnodes(VectorSet& vtn_memory_dependencies);\n+  void build_inputs_for_scalar_vtnodes(VectorSet& vtn_memory_dependencies);\n@@ -80,5 +80,5 @@\n-  void set_req_with_scalar(Node* n, VTransformNode* vtn, VectorSet& vtn_dependencies, const int index);\n-  void set_req_with_vector(const Node_List* pack, VTransformNode* vtn, VectorSet& vtn_dependencies, const int index);\n-  void set_all_req_with_scalars(Node* n, VTransformNode* vtn, VectorSet& vtn_dependencies);\n-  void set_all_req_with_vectors(const Node_List* pack, VTransformNode* vtn, VectorSet& vtn_dependencies);\n-  void add_dependencies_of_node_to_vtnode(Node* n, VTransformNode* vtn, VectorSet& vtn_dependencies);\n+  void set_req_with_scalar(Node* n, VTransformNode* vtn, const int index);\n+  void set_req_with_vector(const Node_List* pack, VTransformNode* vtn, const int index);\n+  void set_all_req_with_scalars(Node* n, VTransformNode* vtn);\n+  void set_all_req_with_vectors(const Node_List* pack, VTransformNode* vtn);\n+  void add_memory_dependencies_of_node_to_vtnode(Node* n, VTransformNode* vtn, VectorSet& vtn_memory_dependencies);\n","filename":"src\/hotspot\/share\/opto\/superwordVTransformBuilder.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -402,0 +402,1 @@\n+    _is_current_memory_edge(false),\n@@ -421,0 +422,1 @@\n+    _is_current_memory_edge = false;\n@@ -424,0 +426,1 @@\n+    _is_current_memory_edge = true;\n@@ -426,0 +429,1 @@\n+    _is_current_memory_edge = false;\n","filename":"src\/hotspot\/share\/opto\/vectorization.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -651,0 +651,1 @@\n+    bool _is_current_memory_edge;\n@@ -668,0 +669,4 @@\n+    bool is_current_memory_edge() const {\n+      assert(!done(), \"not done yet\");\n+      return _is_current_memory_edge;\n+    }\n","filename":"src\/hotspot\/share\/opto\/vectorization.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -267,1 +267,2 @@\n-  \/\/ _in is split into required inputs (_req), and additional dependencies.\n+  \/\/ _in is split into required inputs (_req, i.e. all data dependencies),\n+  \/\/ and memory dependencies.\n@@ -297,1 +298,1 @@\n-  void add_dependency(VTransformNode* n) {\n+  void add_memory_dependency(VTransformNode* n) {\n","filename":"src\/hotspot\/share\/opto\/vtransform.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}