{"files":[{"patch":"@@ -35,0 +35,2 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n@@ -119,2 +121,2 @@\n-     * Verify that ZipFileInputStream.available() returns\n-     * the number of remaining uncompressed bytes.\n+     * Verify that ZipFileInputStream|ZipFileInflaterInputStream.available()\n+     * return the number of remaining uncompressed bytes.\n@@ -126,17 +128,3 @@\n-    @Test\n-    public void testZipFileInputStream() throws IOException {\n-        try (ZipFile zfile = new ZipFile(zip.toFile())) {\n-            assertRemainingUncompressedBytes(zfile, \"stored.txt\");\n-        }\n-    }\n-\n-    \/**\n-     * Verify that ZipFileInflaterInputStream.available() returns\n-     * the number of remaining uncompressed bytes.\n-     *\n-     * This verifies unspecified, but long-standing behavior. See 4401122.\n-     *\n-     * @throws IOException if an unexpected error occurs\n-     *\/\n-    @Test\n-    public void testZipFileInflaterInputStream() throws IOException {\n+    @ParameterizedTest\n+    @ValueSource(strings = { \"stored.txt\", \"deflated.txt\" })\n+    public void testZipFileStreamsRemainingBytes(String entryName) throws IOException {\n@@ -144,3 +132,3 @@\n-            assertRemainingUncompressedBytes(zfile, \"deflated.txt\");\n-        }\n-    }\n+            ZipEntry entry = zfile.getEntry(entryName);\n+            \/\/ Could be ZipFileInputStream or ZipFileInflaterInputStream\n+            InputStream in = zfile.getInputStream(entry);\n@@ -148,12 +136,1 @@\n-    \/**\n-     * Assert that calling available() on a an InputStream obtained\n-     * from ZipFile.getInputStream for the given entry\n-     * returns the number of remaining uncompressed bytes in the stream.\n-     *\n-     * @param zfile the ZipFile to read an entry from\n-     * @param name the name of the entry to read\n-     * @throws IOException if an unexpected error occurs\n-     *\/\n-    private void assertRemainingUncompressedBytes(ZipFile zfile, String name) throws IOException {\n-        ZipEntry entry = zfile.getEntry(name);\n-        InputStream in = zfile.getInputStream(entry);\n+            int initialAvailable = in.available();\n@@ -161,1 +138,2 @@\n-        int initialAvailable = in.available();\n+            \/\/ Initally, the number of remaining uncompressed bytes is the entry size\n+            assertEquals(entry.getSize(), initialAvailable);\n@@ -163,2 +141,6 @@\n-        \/\/ Initally, the number of remaining uncompressed bytes is the entry size\n-        assertEquals(entry.getSize(), in.available());\n+            \/\/ Read all bytes one by one\n+            for (int i = initialAvailable; i > 0; i--) {\n+                \/\/ Reading a single byte should decrement available by 1\n+                in.read();\n+                assertEquals(i - 1, in.available(), \"Available not decremented\");\n+            }\n@@ -166,4 +148,2 @@\n-        \/\/ Reading a single byte should decrement available by 1\n-        in.read();\n-        assertEquals(initialAvailable - 1, in.available(),\n-                \"Available not decremented\");\n+            \/\/ No remaining uncompressed bytes\n+            assertEquals(0, in.available());\n@@ -171,3 +151,3 @@\n-        \/\/ Read all bytes one by one\n-        for (int i=0; i < initialAvailable-1; i++) {\n-            in.read();\n+            \/\/ available() should still return 0 after close\n+            in.close();\n+            assertEquals(0, in.available());\n@@ -175,7 +155,0 @@\n-\n-        \/\/ No remaining uncompressed bytes\n-        assertEquals(0, in.available());\n-\n-        \/\/ available() should still return 0 after close\n-        in.close();\n-        assertEquals(0, in.available());\n","filename":"test\/jdk\/java\/util\/zip\/Available.java","additions":24,"deletions":51,"binary":false,"changes":75,"status":"modified"}]}