{"files":[{"patch":"@@ -113,1 +113,1 @@\n-    \/\/ Start readOnly (safe mode) and maybe reset at end of initialization.\n+    \/\/ Starts in readOnly (safe mode), but might be reset at the end of initialization.\n@@ -144,3 +144,0 @@\n-    \/\/ If it's decided to try and make access mode common to other file systems,\n-    \/\/ this could exist somewhere common, but if it's definitely never going to\n-    \/\/ be shared, it could be made public here.\n@@ -159,3 +156,2 @@\n-        \/\/ Parses the file system permission from an environmental parameter. While\n-        \/\/ the FileSystemAccessMode is private, we don't need to check if it was\n-        \/\/ given as an enum value. Returns null to indicate default behaviour.\n+        \/\/ Parses the access mode from an environmental parameter.\n+        \/\/ Returns null for missing value to indicate default behavior.\n@@ -163,12 +159,6 @@\n-            switch (value) {\n-                case null -> {\n-                    return null;\n-                }\n-                case String label when READ_WRITE.label.equals(label) -> {\n-                    return READ_WRITE;\n-                }\n-                case String label when READ_ONLY.label.equals(label) -> {\n-                    return READ_ONLY;\n-                }\n-                default -> {\n-                }\n+            if (value == null) {\n+                return null;\n+            } else if (READ_WRITE.label.equals(value)) {\n+                return AccessMode.READ_WRITE;\n+            } else if (READ_ONLY.label.equals(value)) {\n+                return AccessMode.READ_ONLY;\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":9,"deletions":19,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -157,4 +157,1 @@\n- *       new ZIP or JAR file if it does not exist. The resulting file system\n- *       will always be opened <em>read-write<\/em> (see {@code \"accessMode\"}\n- *       below), regardless of whether the underlying ZIP already existed or\n- *       not.\n+ *       new ZIP or JAR file if it does not exist.\n@@ -276,6 +273,3 @@\n- *       A value defining the desired read\/write access mode of the file system\n- *       (either <em>read-write<\/em> or <em>read-only<\/em>).\n- *       <p>\n- *       Even if a zip file system is writable ({@code fs.isReadOnly() == false}),\n- *       this says nothing about whether individual files can be created or\n- *       modified, simply that it might be possible.\n+ *       A value defining the desired access mode of the file system.\n+ *       ZIP file systems can be created to allow for <em>read-write<\/em> or\n+ *       <em>read-only<\/em> access.\n","filename":"src\/jdk.zipfs\/share\/classes\/module-info.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -40,1 +40,6 @@\n-import static org.testng.Assert.*;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n@@ -176,2 +181,3 @@\n-     * Validate that without {@code \"create\" = true}, a ZIP file system cannot\n-     * be opened if the underlying file is missing.\n+     * Validate that without {@code \"create\" = true}, a ZIP file system cannot be\n+     * opened if the underlying file is missing, but even with this set, a ZIP\n+     * file system cannot be opened for conflicting or invalid access modes.\n@@ -179,9 +185,9 @@\n-    @Test\n-    public void testNoSuchFileFailure() {\n-        Path noSuchZip = Path.of(\"no_such.zip\");\n-        assertThrows(NoSuchFileException.class,\n-                () -> FileSystems.newFileSystem(noSuchZip, Map.of()));\n-        assertThrows(NoSuchFileException.class,\n-                () -> FileSystems.newFileSystem(noSuchZip, Map.of(\"accessMode\", \"readOnly\")));\n-        assertThrows(NoSuchFileException.class,\n-                () -> FileSystems.newFileSystem(noSuchZip, Map.of(\"accessMode\", \"readWrite\")));\n+    @DataProvider(name = \"badEnvMap\")\n+    protected Object[][] badEnvMap() {\n+        return new Object[][]{\n+                {Map.of(), NoSuchFileException.class},\n+                {Map.of(\"accessMode\", \"readOnly\"), NoSuchFileException.class},\n+                {Map.of(\"accessMode\", \"readWrite\"), NoSuchFileException.class},\n+                {Map.of(\"create\", true, \"accessMode\", \"readOnly\"), IllegalArgumentException.class},\n+                {Map.of(\"create\", true, \"accessMode\", \"badValue\"), IllegalArgumentException.class},\n+        };\n@@ -189,17 +195,3 @@\n-\n-    \/**\n-     * Validate that even with {@code \"create\" = true}, a ZIP file system cannot\n-     * be opened for badly specified arguments. These errors occur before any\n-     * missing file checks.\n-     *\/\n-    @Test\n-    public void badArgumentsFailure() throws IOException {\n-        Path noSuchZip = Path.of(\"no_such.zip\");\n-        assertThrows(IllegalArgumentException.class,\n-                () -> FileSystems.newFileSystem(\n-                        noSuchZip,\n-                        Map.of(\"create\", true, \"accessMode\", \"readOnly\")));\n-        assertThrows(IllegalArgumentException.class,\n-                () -> FileSystems.newFileSystem(\n-                        noSuchZip,\n-                        Map.of(\"create\", true, \"accessMode\", \"badValue\")));\n+    @Test(dataProvider = \"badEnvMap\")\n+    public void badArgumentsFailure(Map<String, String> env, Class<? extends Throwable> exception) throws IOException {\n+        assertThrows(exception, () -> FileSystems.newFileSystem(Path.of(\"no_such.zip\"), env));\n@@ -219,1 +211,1 @@\n-                throw new RuntimeException(\"unexpected file content\");\n+                fail(\"unexpected file content\");\n@@ -247,1 +239,1 @@\n-                throw new RuntimeException(\"unexpected file content\");\n+                fail(\"unexpected file content\");\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/NewFileSystemTests.java","additions":23,"deletions":31,"binary":false,"changes":54,"status":"modified"}]}