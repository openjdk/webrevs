{"files":[{"patch":"@@ -210,1 +210,1 @@\n-        \/\/ sm and existence check\n+        \/\/ Existence check\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -289,2 +289,3 @@\n- *               Specifying both will cause an {@code IllegalArgumentException}\n- *               to be thrown when the Zip filesystem is created\n+ *               Specifying {@code create} as {@code true} and {@code accessMode} as\n+ *               {@code readOnly} will cause an {@code IllegalArgumentException}\n+ *               to be thrown when the ZIP filesystem is created.\n@@ -304,2 +305,2 @@\n- *       The access mode has no effect on reported POSIX file permissions (in cases\n- *       where POSIX support is enabled).\n+ *       The {@code accessMode} property has no effect on reported POSIX file\n+ *       permissions (in cases where POSIX support is enabled).\n","filename":"src\/jdk.zipfs\/share\/classes\/module-info.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-import static org.testng.Assert.fail;\n@@ -210,3 +209,4 @@\n-            if (!\"Default version\".equals(Files.readString(fs.getPath(\"file.txt\"), UTF_8))) {\n-                fail(\"unexpected file content\");\n-            }\n+            assertEquals(\n+                    Files.readString(fs.getPath(\"file.txt\"), UTF_8),\n+                    \"Default version\",\n+                    \"unexpected file content\");\n@@ -238,3 +238,4 @@\n-            if (!\"First version\".equals(Files.readString(fs.getPath(\"file.txt\"), UTF_8))) {\n-                fail(\"unexpected file content\");\n-            }\n+            assertEquals(\n+                    Files.readString(fs.getPath(\"file.txt\"), UTF_8),\n+                    \"First version\",\n+                    \"unexpected file content\");\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/NewFileSystemTests.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,2 @@\n- * Copyright (c) 2019, 2025, SAP SE. All rights reserved.\n+ * Copyright (c) 2019, 2024, SAP SE. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/TestPosix.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,2 @@\n-import java.nio.file.*;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -48,1 +49,2 @@\n-     * @param entries a list of JAR entries to be populated with random bytes.\n+     * @param entries entries JAR file entry names, whose content will be populated\n+     *                with random bytes\n@@ -52,1 +54,1 @@\n-        Path jarFile = Paths.get(name);\n+        Path jarFile = Path.of(name);\n@@ -78,2 +80,2 @@\n-     * @param entries a map of relative file name path strings to file content\n-     *               (stored as UTF-8 encoded bytes).\n+     * @param entries a map of JAR file entry names to entry content (stored as\n+     *                UTF-8 encoded bytes).\n@@ -83,1 +85,1 @@\n-        Path jarFile = Paths.get(name);\n+        Path jarFile = Path.of(name);\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/Utils.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"}]}