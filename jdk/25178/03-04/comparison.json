{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -144,1 +144,1 @@\n-    private enum AccessMode {\n+    private enum ZipAccessMode {\n@@ -152,1 +152,1 @@\n-        AccessMode(String label) {\n+        ZipAccessMode(String label) {\n@@ -158,1 +158,1 @@\n-        static AccessMode from(Object value) {\n+        static ZipAccessMode from(Object value) {\n@@ -162,1 +162,1 @@\n-                return AccessMode.READ_WRITE;\n+                return ZipAccessMode.READ_WRITE;\n@@ -164,1 +164,1 @@\n-                return AccessMode.READ_ONLY;\n+                return ZipAccessMode.READ_ONLY;\n@@ -182,2 +182,2 @@\n-        AccessMode accessMode = AccessMode.from(env.get(PROPERTY_ACCESS_MODE));\n-        boolean forceReadOnly = (accessMode == AccessMode.READ_ONLY);\n+        ZipAccessMode accessMode = ZipAccessMode.from(env.get(PROPERTY_ACCESS_MODE));\n+        boolean forceReadOnly = (accessMode == ZipAccessMode.READ_ONLY);\n@@ -211,1 +211,1 @@\n-        zfpath.getFileSystem().provider().checkAccess(zfpath, java.nio.file.AccessMode.READ);\n+        zfpath.getFileSystem().provider().checkAccess(zfpath, AccessMode.READ);\n@@ -226,0 +226,1 @@\n+        this.rootdir = new ZipPath(this, new byte[]{'\/'});\n@@ -228,3 +229,0 @@\n-        \/\/ It requires 'entryLookup' and 'readOnly' to have safe defaults (which\n-        \/\/ is why they are the only non-final fields), and it requires that the\n-        \/\/ inode map has been initialized.\n@@ -240,6 +238,5 @@\n-        if (readOnly && accessMode == AccessMode.READ_WRITE) {\n-            String reason = Files.isWritable(zfpath)\n-                    ? \"A multi-release JAR file opened with a specified version is not writable\"\n-                    : \"The underlying ZIP file is not writable\";\n-            throw new IOException(\n-                    \"A writable ZIP file system could not be opened for: \" + zfpath + \"\\n\" + reason);\n+        if (readOnly && accessMode == ZipAccessMode.READ_WRITE) {\n+            String reason = multiReleaseVersion.isPresent()\n+                    ? \"the multi-release JAR file is not writable\"\n+                    : \"the ZIP file is not writable\";\n+            throw new IOException(reason);\n@@ -247,3 +244,0 @@\n-\n-        \/\/ Pass \"this\" as a parameter after everything else is set up.\n-        this.rootdir = new ZipPath(this, new byte[]{'\/'});\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":15,"deletions":21,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -263,1 +263,2 @@\n- *               an {@code IllegalArgumentException} will be thrown.\n+ *               an {@code IllegalArgumentException} will be thrown when the Zip\n+ *               filesystem is created.\n@@ -289,1 +290,1 @@\n- *               to be thrown.\n+ *               to be thrown when the Zip filesystem is created\n@@ -295,1 +296,2 @@\n- *               system cannot be created, an {@code IOException} will be thrown.\n+ *               system cannot be created, an {@code IOException} will be thrown\n+ *               when the Zip filesystem is created.\n@@ -299,1 +301,1 @@\n- *               to be thrown.\n+ *               to be thrown when the Zip filesystem is created.\n","filename":"src\/jdk.zipfs\/share\/classes\/module-info.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/NewFileSystemTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, SAP SE. All rights reserved.\n+ * Copyright (c) 2019, 2025, SAP SE. All rights reserved.\n@@ -471,0 +471,15 @@\n+        try (FileSystem zip = FileSystems.newFileSystem(ZIP_FILE, ENV_DEFAULT)) {\n+            checkEntries(zip, checkExpects.permsInZip);\n+        }\n+        \/\/ check entries on zipfs with posix options\n+        try (FileSystem zip = FileSystems.newFileSystem(ZIP_FILE, ENV_POSIX)) {\n+            checkEntries(zip, checkExpects.permsPosix);\n+        }\n+    }\n+\n+    \/**\n+     * As {@code testDefault()} but with {@code \"accessMode\"=\"readOnly\"}.\n+     *\/\n+    @Test\n+    public void testDefaultReadOnly() throws IOException {\n+        \/\/ check entries on zipfs with read-only options\n@@ -475,1 +490,1 @@\n-        \/\/ check entries on zipfs with posix options\n+        \/\/ check entries on zipfs with posix and read-only options\n@@ -493,0 +508,17 @@\n+        try (FileSystem zip = FileSystems.newFileSystem(ZIP_FILE, ENV_DEFAULT)) {\n+            checkEntries(zip, checkExpects.permsInZip);\n+        }\n+        \/\/ check entries on zipfs with posix options\n+        try (FileSystem zip = FileSystems.newFileSystem(ZIP_FILE, ENV_POSIX)) {\n+            checkEntries(zip, checkExpects.permsPosix);\n+        }\n+    }\n+\n+    \/**\n+     * As {@code testPosix()} but with {@code \"accessMode\"=\"readOnly\"}.\n+     *\/\n+    @Test\n+    public void testPosixReadOnly() throws IOException {\n+        \/\/ create zip file using zipfs with posix option\n+        createTestZipFile(ZIP_FILE, ENV_POSIX).close();\n+        \/\/ check entries on zipfs with read-only options\n@@ -497,1 +529,1 @@\n-        \/\/ check entries on zipfs with posix options\n+        \/\/ check entries on zipfs with posix and read-only options\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/TestPosix.java","additions":35,"deletions":3,"binary":false,"changes":38,"status":"modified"}]}