{"files":[{"patch":"@@ -1535,2 +1535,6 @@\n-        case lir_add: __ z_agfi(lreg, c);  break;\n-        case lir_sub: __ z_agfi(lreg, -c); break; \/\/ note: -min_jint == min_jint\n+        case lir_add:\n+                      __ add2reg_32(lreg, c);\n+                      break;\n+        case lir_sub:\n+                      __ add2reg_32(lreg, java_negate(c));\n+                      break;\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRAssembler_s390.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -660,1 +660,1 @@\n-      z_lgr(r1, r2);\n+      lgr_if_needed(r1, r2);\n@@ -684,0 +684,48 @@\n+void MacroAssembler::add2reg_32(Register r1, int64_t imm, Register r2) {\n+  assert(Immediate::is_simm32(imm), \"probably an implicit conversion went wrong\");\n+\n+  if (r2 == noreg) { r2 = r1; }\n+\n+  \/\/ Handle special case imm == 0.\n+  if (imm == 0) {\n+    lr_if_needed(r1, r2);\n+    \/\/ Nothing else to do.\n+    return;\n+  }\n+\n+  if (!PreferLAoverADD || (r2 == Z_R0)) {\n+    bool distinctOpnds = VM_Version::has_DistinctOpnds();\n+\n+    if (Immediate::is_simm16(imm)) {\n+      if (r1 == r2){\n+        z_ahi(r1, imm);\n+        return;\n+      }\n+      if (distinctOpnds) {\n+        z_ahik(r1, r2, imm);\n+        return;\n+      }\n+      lr_if_needed(r1, r2);\n+      z_ahi(r1, imm);\n+      return;\n+    }\n+  } else {\n+    \/\/ Can we encode imm in 12 bits unsigned?\n+    if (Displacement::is_shortDisp(imm)) {\n+      z_la(r1, imm, r2);\n+      return;\n+    }\n+    \/\/ Can we encode imm in 20 bits signed?\n+    if (Displacement::is_validDisp(imm)) {\n+      \/\/ Always use LAY instruction, so we don't need the tmp register.\n+      z_lay(r1, imm, r2);\n+      return;\n+    }\n+\n+  }\n+\n+  \/\/ imm is simm32\n+  lr_if_needed(r1, r2);\n+  z_afi(r1, imm);\n+}\n+\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":49,"deletions":1,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -159,1 +159,3 @@\n-  void add2reg(Register r1, int64_t imm, Register r2 = noreg);\n+  void add2reg   (Register r1, int64_t imm, Register r2 = noreg);\n+  void add2reg_32(Register r1, int64_t imm, Register r2 = noreg);\n+\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}