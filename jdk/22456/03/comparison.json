{"files":[{"patch":"@@ -1535,2 +1535,6 @@\n-        case lir_add: __ z_agfi(lreg, c);  break;\n-        case lir_sub: __ z_agfi(lreg, -c); break; \/\/ note: -min_jint == min_jint\n+        case lir_add:\n+                      __ add2reg_32(lreg, c);\n+                      break;\n+        case lir_sub:\n+                      __ z_afi(lreg, java_negate(c));\n+                      break;\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRAssembler_s390.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -684,0 +684,11 @@\n+void MacroAssembler::add2reg_32(Register r1, int64_t imm) {\n+  assert(Immediate::is_simm32(imm), \"probably an implicit conversion went wrong\");\n+\n+  if (Immediate::is_simm16(imm)) {\n+    z_ahi(r1, imm);\n+    return;\n+  }\n+  \/\/ imm is simm32\n+  z_afi(r1, imm);\n+}\n+\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -159,1 +159,3 @@\n-  void add2reg(Register r1, int64_t imm, Register r2 = noreg);\n+  void add2reg   (Register r1, int64_t imm, Register r2 = noreg);\n+  void add2reg_32(Register r1, int64_t imm);\n+\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}