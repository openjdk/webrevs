{"files":[{"patch":"@@ -282,0 +282,28 @@\n+void CastIINode::remove_range_check_cast(Compile* C) {\n+  if (has_range_check()) {\n+    \/\/ Range check CastII nodes feed into an address computation subgraph. Remove them to let that subgraph float freely.\n+    \/\/ For memory access or integer divisions nodes that depend on the cast, record the dependency on the cast's control\n+    \/\/ as a precedence edge, so they can't float above the cast in case that cast's narrowed type helped eliminate a\n+    \/\/ range check or a null divisor check.\n+    assert(in(0) != nullptr, \"All RangeCheck CastII must have a control dependency\");\n+    ResourceMark rm;\n+    Unique_Node_List wq;\n+    wq.push(this);\n+    for (uint next = 0; next < wq.size(); ++next) {\n+      Node* m = wq.at(next);\n+      for (DUIterator_Fast imax, i = m->fast_outs(imax); i < imax; i++) {\n+        Node* use = m->fast_out(i);\n+        if (use->is_Mem() || use->is_div_or_mod(T_INT) || use->is_div_or_mod(T_LONG)) {\n+          use->ensure_control_or_add_prec(in(0));\n+        } else if (!use->is_CFG() && !use->is_Phi()) {\n+          wq.push(use);\n+        }\n+      }\n+    }\n+    subsume_by(in(1), C);\n+    if (outcnt() == 0) {\n+      disconnect_inputs(C);\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/castnode.cpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -125,0 +125,1 @@\n+  void remove_range_check_cast(Compile* C);\n","filename":"src\/hotspot\/share\/opto\/castnode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3434,1 +3434,1 @@\n-    remove_range_check_cast(n->as_CastII());\n+    n->as_CastII()->remove_range_check_cast(this);\n@@ -3801,28 +3801,0 @@\n-void Compile::remove_range_check_cast(CastIINode* cast) {\n-  if (cast->has_range_check()) {\n-    \/\/ Range check CastII nodes feed into an address computation subgraph. Remove them to let that subgraph float freely.\n-    \/\/ For memory access or integer divisions nodes that depend on the cast, record the dependency on the cast's control\n-    \/\/ as a precedence edge, so they can't float above the cast in case that cast's narrowed type helped eliminate a\n-    \/\/ range check or a null divisor check.\n-    assert(cast->in(0) != nullptr, \"All RangeCheck CastII must have a control dependency\");\n-    ResourceMark rm;\n-    Unique_Node_List wq;\n-    wq.push(cast);\n-    for (uint next = 0; next < wq.size(); ++next) {\n-      Node* m = wq.at(next);\n-      for (DUIterator_Fast imax, i = m->fast_outs(imax); i < imax; i++) {\n-        Node* use = m->fast_out(i);\n-        if (use->is_Mem() || use->is_div_or_mod(T_INT) || use->is_div_or_mod(T_LONG)) {\n-          use->ensure_control_or_add_prec(cast->in(0));\n-        } else if (!use->is_CFG() && !use->is_Phi()) {\n-          wq.push(use);\n-        }\n-      }\n-    }\n-    cast->subsume_by(cast->in(1), this);\n-    if (cast->outcnt() == 0) {\n-      cast->disconnect_inputs(this);\n-    }\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":1,"deletions":29,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1349,2 +1349,0 @@\n-\n-  void remove_range_check_cast(CastIINode* cast);\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n- * @bug 8324517\n- * @summary C2: out of bound array load because of dependency on removed range check CastIIs\n+ * @bug 8332827\n+ * @summary [REDO] C2: crash in compiled code because of dependency on removed range check CastIIs\n","filename":"test\/hotspot\/jtreg\/compiler\/rangechecks\/TestArrayAccessAboveRCAfterRCCastIIEliminated.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- *\n+ * @run main\/othervm TestRangeCheckCastIISplitThruPhi\n","filename":"test\/hotspot\/jtreg\/compiler\/rangechecks\/TestRangeCheckCastIISplitThruPhi.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @requires vm.compiler2.enabled\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestVectorizationNegativeScale.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}