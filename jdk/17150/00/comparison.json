{"files":[{"patch":"@@ -159,2 +159,0 @@\n-  const ImmutableOopMap* get_oop_map() const;\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -362,14 +362,0 @@\n-inline const ImmutableOopMap* frame::get_oop_map() const {\n-  if (_cb == nullptr) return nullptr;\n-  if (_cb->oop_maps() != nullptr) {\n-    NativePostCallNop* nop = nativePostCallNop_at(_pc);\n-    if (nop != nullptr && nop->displacement() != 0) {\n-      int slot = ((nop->displacement() >> 24) & 0xff);\n-      return _cb->oop_map_for_slot(slot, _pc);\n-    }\n-    const ImmutableOopMap* oop_map = OopMapSet::find_map(this);\n-    return oop_map;\n-  }\n-  return nullptr;\n-}\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -563,1 +563,5 @@\n-void NativePostCallNop::patch(jint diff) {\n+bool NativePostCallNop::patch(int32_t oopmap_slot, int32_t cb_offset) {\n+  if (((oopmap_slot & 0xff) != oopmap_slot) || ((cb_offset & 0xffffff) != cb_offset)) {\n+    return false; \/\/ cannot encode\n+  }\n+  uint32_t data = (oopmap_slot << 24) | cb_offset;\n@@ -565,1 +569,1 @@\n-  assert(diff != 0, \"must be\");\n+  assert(data != 0, \"must be\");\n@@ -571,2 +575,2 @@\n-  uint32_t lo = diff & 0xffff;\n-  uint32_t hi = (uint32_t)diff >> 16;\n+  uint32_t lo = data & 0xffff;\n+  uint32_t hi = data >> 16;\n@@ -575,0 +579,1 @@\n+  return true; \/\/ successfully encoded\n","filename":"src\/hotspot\/cpu\/aarch64\/nativeInst_aarch64.cpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -694,1 +694,1 @@\n-  jint displacement() const {\n+  bool decode(int32_t& oopmap_slot, int32_t& cb_offset) const {\n@@ -698,3 +698,7 @@\n-    uint32_t result = (hi << 16) | lo;\n-\n-    return (jint)result;\n+    uint32_t data = (hi << 16) | lo;\n+    if (data == 0) {\n+      return false; \/\/ no information encoded\n+    }\n+    cb_offset = (data & 0xffffff);\n+    oopmap_slot = (data >> 24) & 0xff;\n+    return true; \/\/ decoding succeeded\n@@ -703,1 +707,1 @@\n-  void patch(jint diff);\n+  bool patch(int32_t oopmap_slot, int32_t cb_offset);\n","filename":"src\/hotspot\/cpu\/aarch64\/nativeInst_aarch64.hpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -102,2 +102,0 @@\n-  const ImmutableOopMap* get_oop_map() const;\n-\n","filename":"src\/hotspot\/cpu\/arm\/frame_arm.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -221,14 +221,0 @@\n-inline const ImmutableOopMap* frame::get_oop_map() const {\n-  if (_cb == nullptr) return nullptr;\n-  if (_cb->oop_maps() != nullptr) {\n-    NativePostCallNop* nop = nativePostCallNop_at(_pc);\n-    if (nop != nullptr && nop->displacement() != 0) {\n-      int slot = ((nop->displacement() >> 24) & 0xff);\n-      return _cb->oop_map_for_slot(slot, _pc);\n-    }\n-    const ImmutableOopMap* oop_map = OopMapSet::find_map(this);\n-    return oop_map;\n-  }\n-  return nullptr;\n-}\n-\n","filename":"src\/hotspot\/cpu\/arm\/frame_arm.inline.hpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -344,4 +344,0 @@\n-void NativePostCallNop::patch(jint diff) {\n-  \/\/ unsupported for now\n-}\n-\n","filename":"src\/hotspot\/cpu\/arm\/nativeInst_arm_32.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -441,2 +441,2 @@\n-  int displacement() const { return 0; }\n-  void patch(jint diff);\n+  bool decode(int32_t& oopmap_slot, int32_t& cb_offset) const { return false; }\n+  bool patch(int32_t oopmap_slot, int32_t cb_offset) { return false; }\n","filename":"src\/hotspot\/cpu\/arm\/nativeInst_arm_32.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -403,2 +403,0 @@\n-  const ImmutableOopMap* get_oop_map() const;\n-\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -364,14 +364,0 @@\n-inline const ImmutableOopMap* frame::get_oop_map() const {\n-  if (_cb == nullptr) return nullptr;\n-  if (_cb->oop_maps() != nullptr) {\n-    NativePostCallNop* nop = nativePostCallNop_at(_pc);\n-    if (nop != nullptr && nop->displacement() != 0) {\n-      int slot = ((nop->displacement() >> 24) & 0xff);\n-      return _cb->oop_map_for_slot(slot, _pc);\n-    }\n-    const ImmutableOopMap* oop_map = OopMapSet::find_map(this);\n-    return oop_map;\n-  }\n-  return nullptr;\n-}\n-\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.inline.hpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -432,4 +432,0 @@\n-void NativePostCallNop::patch(jint diff) {\n-  \/\/ unsupported for now\n-}\n-\n","filename":"src\/hotspot\/cpu\/ppc\/nativeInst_ppc.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -511,2 +511,2 @@\n-  int displacement() const { return 0; }\n-  void patch(jint diff);\n+  bool decode(int32_t& oopmap_slot, int32_t& cb_offset) const { return false; }\n+  bool patch(int32_t oopmap_slot, int32_t cb_offset) { return false; }\n","filename":"src\/hotspot\/cpu\/ppc\/nativeInst_ppc.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -192,2 +192,0 @@\n-  const ImmutableOopMap* get_oop_map() const;\n-\n","filename":"src\/hotspot\/cpu\/riscv\/frame_riscv.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -348,14 +348,0 @@\n-inline const ImmutableOopMap* frame::get_oop_map() const {\n-  if (_cb == nullptr) return nullptr;\n-  if (_cb->oop_maps() != nullptr) {\n-    NativePostCallNop* nop = nativePostCallNop_at(_pc);\n-    if (nop != nullptr && nop->displacement() != 0) {\n-      int slot = ((nop->displacement() >> 24) & 0xff);\n-      return _cb->oop_map_for_slot(slot, _pc);\n-    }\n-    const ImmutableOopMap* oop_map = OopMapSet::find_map(this);\n-    return oop_map;\n-  }\n-  return nullptr;\n-}\n-\n","filename":"src\/hotspot\/cpu\/riscv\/frame_riscv.inline.hpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -454,1 +454,1 @@\n-int NativePostCallNop::displacement() const {\n+bool NativePostCallNop::decode(int32_t& oopmap_slot, int32_t& cb_offset) const {\n@@ -456,1 +456,7 @@\n-  return (int)(intptr_t)MacroAssembler::get_target_of_li32(addr_at(4));\n+  int32_t data = (int32_t)(intptr_t)MacroAssembler::get_target_of_li32(addr_at(4));\n+  if (data == 0) {\n+    return false; \/\/ no information encoded\n+  }\n+  cb_offset = (data & 0xffffff);\n+  oopmap_slot = (data >> 24) & 0xff;\n+  return true; \/\/ decoding succeeded\n@@ -459,2 +465,6 @@\n-void NativePostCallNop::patch(jint diff) {\n-  assert(diff != 0, \"must be\");\n+bool NativePostCallNop::patch(int32_t oopmap_slot, int32_t cb_offset) {\n+  if (((oopmap_slot & 0xff) != oopmap_slot) || ((cb_offset & 0xffffff) != cb_offset)) {\n+    return false; \/\/ cannot encode\n+  }\n+  int32_t data = (oopmap_slot << 24) | cb_offset;\n+  assert(data != 0, \"must be\");\n@@ -463,1 +473,2 @@\n-  MacroAssembler::patch_imm_in_li32(addr_at(4), diff);\n+  MacroAssembler::patch_imm_in_li32(addr_at(4), data);\n+  return true; \/\/ successfully encoded\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.cpp","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -594,2 +594,2 @@\n-  int displacement() const;\n-  void patch(jint diff);\n+  bool decode(int32_t& oopmap_slot, int32_t& cb_offset) const;\n+  bool patch(int32_t oopmap_slot, int32_t cb_offset);\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -468,1 +468,0 @@\n-  const ImmutableOopMap* get_oop_map() const;\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -295,14 +295,0 @@\n-inline const ImmutableOopMap* frame::get_oop_map() const {\n-  if (_cb == nullptr) return nullptr;\n-  if (_cb->oop_maps() != nullptr) {\n-    NativePostCallNop* nop = nativePostCallNop_at(_pc);\n-    if (nop != nullptr && nop->displacement() != 0) {\n-      int slot = ((nop->displacement() >> 24) & 0xff);\n-      return _cb->oop_map_for_slot(slot, _pc);\n-    }\n-    const ImmutableOopMap* oop_map = OopMapSet::find_map(this);\n-    return oop_map;\n-  }\n-  return nullptr;\n-}\n-\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.inline.hpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -660,3 +660,3 @@\n-  int displacement() const { return 0; }\n-  void patch(jint diff) { Unimplemented(); }\n-  void make_deopt() { Unimplemented(); }\n+  bool decode(int32_t& oopmap_slot, int32_t& cb_offset) const { return false; }\n+  bool patch(int32_t oopmap_slot, int32_t cb_offset) { Unimplemented() ; return false; }\n+  void make_deopt();\n","filename":"src\/hotspot\/cpu\/s390\/nativeInst_s390.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -152,2 +152,0 @@\n-  const ImmutableOopMap* get_oop_map() const;\n-\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -346,14 +346,0 @@\n-inline const ImmutableOopMap* frame::get_oop_map() const {\n-  if (_cb == nullptr) return nullptr;\n-  if (_cb->oop_maps() != nullptr) {\n-    NativePostCallNop* nop = nativePostCallNop_at(_pc);\n-    if (nop != nullptr && nop->displacement() != 0) {\n-      int slot = ((nop->displacement() >> 24) & 0xff);\n-      return _cb->oop_map_for_slot(slot, _pc);\n-    }\n-    const ImmutableOopMap* oop_map = OopMapSet::find_map(this);\n-    return oop_map;\n-  }\n-  return nullptr;\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.inline.hpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -687,2 +687,6 @@\n-void NativePostCallNop::patch(jint diff) {\n-  assert(diff != 0, \"must be\");\n+bool NativePostCallNop::patch(int32_t oopmap_slot, int32_t cb_offset) {\n+  if (((oopmap_slot & 0xff) != oopmap_slot) || ((cb_offset & 0xffffff) != cb_offset)) {\n+    return false; \/\/ cannot encode\n+  }\n+  int32_t data = (oopmap_slot << 24) | cb_offset;\n+  assert(data != 0, \"must be\");\n@@ -690,1 +694,2 @@\n-  *((int32_t *)(code_pos)) = (int32_t) diff;\n+  *((int32_t *)(code_pos)) = (int32_t) data;\n+  return true; \/\/ successfully encoded\n","filename":"src\/hotspot\/cpu\/x86\/nativeInst_x86.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -738,2 +738,10 @@\n-  int displacement() const { return (jint) int_at(displacement_offset); }\n-  void patch(jint diff);\n+  bool decode(int32_t& oopmap_slot, int32_t& cb_offset) const {\n+    int32_t data = int_at(displacement_offset);\n+    if (data == 0) {\n+      return false; \/\/ no information encoded\n+    }\n+    cb_offset = (data & 0xffffff);\n+    oopmap_slot = (data >> 24) & 0xff;\n+    return true; \/\/ decoding succeeded\n+  }\n+  bool patch(int32_t oopmap_slot, int32_t cb_offset);\n","filename":"src\/hotspot\/cpu\/x86\/nativeInst_x86.hpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -47,2 +47,0 @@\n- const ImmutableOopMap* get_oop_map() const;\n-\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -179,5 +179,0 @@\n-inline const ImmutableOopMap* frame::get_oop_map() const {\n-  Unimplemented();\n-  return nullptr;\n-}\n-\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.inline.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -217,2 +217,2 @@\n-  int displacement() const { Unimplemented(); return 0; }\n-  void patch(jint diff) { Unimplemented(); }\n+  bool decode(int32_t& oopmap_slot, int32_t& cb_offset) const { Unimplemented(); return false; }\n+  bool patch(int32_t oopmap_slot, int32_t cb_offset) { Unimplemented(); return false; }\n","filename":"src\/hotspot\/cpu\/zero\/nativeInst_zero.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,2 +40,2 @@\n-  if (nop != nullptr && nop->displacement() != 0) {\n-    int offset = (nop->displacement() & 0xffffff);\n+  int offset;\n+  if (nop != nullptr && nop->decode(slot, offset)) {\n@@ -43,1 +43,0 @@\n-    slot = ((nop->displacement() >> 24) & 0xff);\n@@ -55,3 +54,6 @@\n-  return (nop != nullptr && nop->displacement() != 0)\n-      ? ((nop->displacement() >> 24) & 0xff)\n-      : -1;\n+  int oopmap_slot;\n+  int cb_offset;\n+  if (nop != nullptr && nop->decode(oopmap_slot, cb_offset)) {\n+    return oopmap_slot;\n+  }\n+  return -1;\n","filename":"src\/hotspot\/share\/code\/codeCache.inline.hpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1140,4 +1140,1 @@\n-  } else if (((oopmap_slot & 0xff) == oopmap_slot) && ((offset & 0xffffff) == offset)) {\n-    jint value = (oopmap_slot << 24) | (jint) offset;\n-    nop->patch(value);\n-  } else {\n+  } else if (!nop->patch(oopmap_slot, offset)) {\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -93,0 +93,2 @@\n+  const ImmutableOopMap* get_oop_map() const;\n+\n","filename":"src\/hotspot\/share\/runtime\/frame.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -107,0 +107,15 @@\n+inline const ImmutableOopMap* frame::get_oop_map() const {\n+  if (_cb == nullptr) return nullptr;\n+  if (_cb->oop_maps() != nullptr) {\n+    NativePostCallNop* nop = nativePostCallNop_at(_pc);\n+    int oopmap_slot;\n+    int cb_offset;\n+    if (nop != nullptr && nop->decode(oopmap_slot, cb_offset)) {\n+      return _cb->oop_map_for_slot(oopmap_slot, _pc);\n+    }\n+    const ImmutableOopMap* oop_map = OopMapSet::find_map(this);\n+    return oop_map;\n+  }\n+  return nullptr;\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/frame.inline.hpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}