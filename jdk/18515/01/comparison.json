{"files":[{"patch":"@@ -3260,2 +3260,3 @@\n-  const TypeKlassPtr *tk = _gvn.type(superklass)->is_klassptr()->try_improve();\n-  const TypeOopPtr *toop = tk->cast_to_exactness(false)->as_instance_type();\n+  const TypeKlassPtr* klass_ptr_type = _gvn.type(superklass)->is_klassptr();\n+  const TypeKlassPtr* improved_klass_ptr_type = klass_ptr_type->try_improve();\n+  const TypeOopPtr* toop = improved_klass_ptr_type->cast_to_exactness(false)->as_instance_type();\n@@ -3269,1 +3270,1 @@\n-  if (tk->singleton()) {\n+  if (improved_klass_ptr_type->singleton()) {\n@@ -3272,1 +3273,1 @@\n-      switch (C->static_subtype_check(tk, objtp->as_klass_type())) {\n+      switch (C->static_subtype_check(improved_klass_ptr_type, objtp->as_klass_type())) {\n@@ -3338,1 +3339,1 @@\n-  if (tk->klass_is_exact()) {\n+  if (improved_klass_ptr_type->klass_is_exact()) {\n@@ -3348,1 +3349,1 @@\n-      cast_obj = maybe_cast_profiled_receiver(not_null_obj, tk, spec_obj_type, safe_for_replace);\n+      cast_obj = maybe_cast_profiled_receiver(not_null_obj, improved_klass_ptr_type, spec_obj_type, safe_for_replace);\n@@ -3360,1 +3361,9 @@\n-    Node* not_subtype_ctrl = gen_subtype_check(not_null_obj, superklass );\n+    Node* improved_superklass = superklass;\n+    if (improved_klass_ptr_type != klass_ptr_type) {\n+      if (improved_klass_ptr_type->singleton()) {\n+        improved_superklass = makecon(improved_klass_ptr_type);\n+      } else {\n+        improved_superklass = _gvn.transform(new CastPPNode(nullptr, superklass, improved_klass_ptr_type));\n+      }\n+    }\n+    Node* not_subtype_ctrl = gen_subtype_check(not_null_obj, improved_superklass);\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8328480\n+ * @summary Test that SubTypeCheckNode takes improved unique concrete klass constant in order to fold consecutive sub\n+ *          type checks.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.types.TestSubTypeCheckUniqueSubclass\n+ *\/\n+\n+package compiler.types;\n+\n+import compiler.lib.ir_framework.*;\n+\n+public class TestSubTypeCheckUniqueSubclass {\n+    static Object o = new C(); \/\/ Make sure C is loaded.\n+    static Object o2 = new C2(); \/\/ Make sure C2 is loaded while NeverLoaded is not.\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Test\n+    @Warmup(0)\n+    @IR(counts = {IRNode.SUBTYPE_CHECK, \"1\"},\n+        phase = CompilePhase.ITER_GVN1)\n+    static void testAbstractAbstract() {\n+         A a = (A)o;\n+         A a2 = (B)o;\n+    }\n+\n+    @Test\n+    @Warmup(0)\n+    @IR(counts = {IRNode.SUBTYPE_CHECK, \"1\"},\n+            phase = CompilePhase.ITER_GVN1)\n+    static void testAbstractAbstractWithUnloaded() {\n+        A2 a = (A2)o2;\n+        A2 a2 = (B2)o2;\n+    }\n+}\n+\n+abstract class A {}\n+abstract class B extends A {}\n+class C extends B {}\n+\n+abstract class A2 {}\n+abstract class B2 extends A2 {}\n+class C2 extends B2 {}\n+\n+\/\/ Class never loaded -> C2 looks like unique sub class.\n+class NeverLoaded extends B2 {}\n","filename":"test\/hotspot\/jtreg\/compiler\/types\/TestSubTypeCheckUniqueSubclass.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}