{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,9 @@\n+ * @apiNote\n+ * Not all modifiers that are syntactic Java language modifiers are\n+ * represented in this class, only those modifiers that <em>also<\/em>\n+ * have a corresponding JVM {@linkplain AccessFlag access flag} are\n+ * included. In particular the {@code default} method modifier (JLS\n+ * {@jls 9.4.3}) and the {@code sealed} and {@code non-sealed} class\n+ * (JLS {@jls 8.1.1.2}) and interface (JLS {@jls 9.1.1.4}) modifiers\n+ * are <em>not<\/em> represented in this class.\n+ *\n@@ -211,0 +220,1 @@\n+     *\n@@ -224,0 +234,16 @@\n+     * @apiNote\n+     * To make a high-fidelity representation of the Java source\n+     * modifiers of a class or member, source-level modifiers that do\n+     * <em>not<\/em> have a constant in this class should be\n+     * included and appear in an order consistent with the full recommended\n+     * ordering for that kind of declaration as given in <cite>The\n+     * Java Language Specification<\/cite>. For example, for a\n+     * {@linkplain Method#toGenericString() method} the \"{@link\n+     * Method#isDefault() default}\" modifier is ordered immediately\n+     * before \"{@code static}\" (JLS {@jls 9.4}). For a {@linkplain\n+     * Class#toGenericString() class object}, the \"{@link\n+     * Class#isSealed() sealed}\" or {@code \"non-sealed\"} modifier is\n+     * ordered immediately after \"{@code final}\" for a class (JLS\n+     * {@jls 8.1.1}) and immediately after \"{@code static}\" for an\n+     * interface (JLS {@jls 9.1.1}).\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Modifier.java","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"}]}