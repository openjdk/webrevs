{"files":[{"patch":"@@ -106,0 +106,3 @@\n+        expectPass(Assertion.NEQBA, b1, b2);\n+        expectPass(Assertion.NEQBA, b1, (byte[])null);\n+        expectPass(Assertion.NEQBA, (byte[])null, b1);\n@@ -110,0 +113,3 @@\n+        expectFail(Assertion.NEQBA, b1, b1);\n+        expectFail(Assertion.NEQBA, b1, b11);\n+        expectFail(Assertion.NEQBA, (byte[])null, (byte[])null);\n@@ -215,4 +221,9 @@\n-        Asserts.assertTrue(assertion == Assertion.EQBA);\n-        String msg = \"Expected \" + Assertion.asString(\"assertEqualsByteArray\",\n-                Arrays.toString(b1), Arrays.toString(b2)) + \" to pass\";\n-        Asserts.assertEqualsByteArray(b1, b2, msg);\n+        if (assertion == Assertion.EQBA) {\n+            String msg = \"Expected \" + Assertion.asString(\"assertEqualsByteArray\",\n+                    Arrays.toString(b1), Arrays.toString(b2)) + \" to pass\";\n+            Asserts.assertEqualsByteArray(b1, b2, msg);\n+        } else {\n+            String msg = \"Expected \" + Assertion.asString(\"assertNotEqualsByteArray\",\n+                    Arrays.toString(b1), Arrays.toString(b2)) + \" to pass\";\n+            Asserts.assertNotEqualsByteArray(b1, b2, msg);\n+        }\n@@ -223,5 +234,20 @@\n-        Asserts.assertTrue(assertion == Assertion.EQBA);\n-        try {\n-            Asserts.assertEqualsByteArray(b1, b2);\n-        } catch (RuntimeException e) {\n-            return;\n+        if (assertion == Assertion.EQBA) {\n+            try {\n+                Asserts.assertEqualsByteArray(b1, b2);\n+            } catch (RuntimeException e) {\n+                return;\n+            }\n+            throw new Exception(\"Expected \"\n+                    + Assertion.asString(\"assertEqualsByteArray\",\n+                    Arrays.toString(b1), Arrays.toString(b2))\n+                    + \" to throw a RuntimeException\");\n+        } else {\n+            try {\n+                Asserts.assertNotEqualsByteArray(b1, b2);\n+            } catch (RuntimeException e) {\n+                return;\n+            }\n+            throw new Exception(\"Expected \"\n+                    + Assertion.asString(\"assertNotEqualsByteArray\",\n+                    Arrays.toString(b1), Arrays.toString(b2))\n+                    + \" to throw a RuntimeException\");\n@@ -229,4 +255,0 @@\n-        throw new Exception(\"Expected \"\n-                + Assertion.asString(\"assertEqualsByteArray\",\n-                Arrays.toString(b1), Arrays.toString(b2))\n-                + \" to throw a RuntimeException\");\n@@ -237,1 +259,1 @@\n-    LT, LTE, EQ, EQBA, GTE, GT, NE, NULL, NOTNULL, FALSE, TRUE;\n+    LT, LTE, EQ, EQBA, NEQBA, GTE, GT, NE, NULL, NOTNULL, FALSE, TRUE;\n","filename":"test\/lib-test\/jdk\/test\/lib\/AssertsTest.java","additions":36,"deletions":14,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -251,0 +251,12 @@\n+    \/**\n+     * Asserts that {@code lhs} is not the same byte array as {@code rhs}.\n+     *\n+     * @param lhs The left hand side of the comparison.\n+     * @param rhs The right hand side of the comparison.\n+     * @throws RuntimeException if the assertion is not true.\n+     * @see #assertEqualsByteArray(byte[], byte[], String)\n+     *\/\n+    public static void assertNotEqualsByteArray(byte[] lhs, byte[] rhs) {\n+        assertNotEqualsByteArray(lhs, rhs, null);\n+    }\n+\n@@ -264,0 +276,17 @@\n+            fail(msg);\n+        }\n+    }\n+\n+    \/**\n+     * Asserts that {@code lhs} is not the same byte array as {@code rhs}.\n+     *\n+     * @param lhs The left hand side of the comparison.\n+     * @param rhs The right hand side of the comparison.\n+     * @param msg A description of the assumption; {@code null} for a default message.\n+     * @throws RuntimeException if the assertion is not true.\n+     *\/\n+    public static void assertNotEqualsByteArray(byte[] lhs, byte[] rhs, String msg) {\n+        if (Arrays.equals(lhs, rhs)) {\n+            msg = Objects.toString(msg, \"assertEqualsByteArray\")\n+                    + \": expected \" + HexFormat.of().formatHex(lhs)\n+                    + \" to equal \" + HexFormat.of().formatHex(rhs);\n","filename":"test\/lib\/jdk\/test\/lib\/Asserts.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"}]}