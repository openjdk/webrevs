{"files":[{"patch":"@@ -1300,1 +1300,1 @@\n-#define VFLR_ZOPC  (unsigned long)(0xe7L << 40 | 0xC5L << 0)    \/\/ V1 := sqrt of V2, element size = 2**m\n+#define VFLR_ZOPC  (unsigned long)(0xe7L << 40 | 0xC5L << 0)    \/\/ vector fp load rounded, element size = 2**m\n@@ -2494,0 +2494,1 @@\n+  inline void z_vl(    VectorRegister v1, const Address& a);\n@@ -2498,1 +2499,0 @@\n-  inline void z_vl(VectorRegister v1, const Address& a);\n@@ -2623,0 +2623,1 @@\n+  inline void z_vst(   VectorRegister v1, const Address& a);\n@@ -2628,1 +2629,0 @@\n-  inline void z_vst(VectorRegister v1, const Address& a);\n@@ -2684,10 +2684,10 @@\n-  inline void z_vml(    VectorRegister v1, VectorRegister v2, VectorRegister v3, int64_t m4);\n-  inline void z_vmlb(    VectorRegister v1, VectorRegister v2, VectorRegister v3);\n-  inline void z_vmlhw(    VectorRegister v1, VectorRegister v2, VectorRegister v3);\n-  inline void z_vmlf(    VectorRegister v1, VectorRegister v2, VectorRegister v3);\n-  inline void z_vmh(    VectorRegister v1, VectorRegister v2, VectorRegister v3, int64_t m4);\n-  inline void z_vmlh(   VectorRegister v1, VectorRegister v2, VectorRegister v3, int64_t m4);\n-  inline void z_vme(    VectorRegister v1, VectorRegister v2, VectorRegister v3, int64_t m4);\n-  inline void z_vmle(   VectorRegister v1, VectorRegister v2, VectorRegister v3, int64_t m4);\n-  inline void z_vmo(    VectorRegister v1, VectorRegister v2, VectorRegister v3, int64_t m4);\n-  inline void z_vmlo(   VectorRegister v1, VectorRegister v2, VectorRegister v3, int64_t m4);\n+  inline void z_vml(  VectorRegister v1, VectorRegister v2, VectorRegister v3, int64_t m4);\n+  inline void z_vmlb( VectorRegister v1, VectorRegister v2, VectorRegister v3);\n+  inline void z_vmlhw(VectorRegister v1, VectorRegister v2, VectorRegister v3);\n+  inline void z_vmlf( VectorRegister v1, VectorRegister v2, VectorRegister v3);\n+  inline void z_vmh(  VectorRegister v1, VectorRegister v2, VectorRegister v3, int64_t m4);\n+  inline void z_vmlh( VectorRegister v1, VectorRegister v2, VectorRegister v3, int64_t m4);\n+  inline void z_vme(  VectorRegister v1, VectorRegister v2, VectorRegister v3, int64_t m4);\n+  inline void z_vmle( VectorRegister v1, VectorRegister v2, VectorRegister v3, int64_t m4);\n+  inline void z_vmo(  VectorRegister v1, VectorRegister v2, VectorRegister v3, int64_t m4);\n+  inline void z_vmlo( VectorRegister v1, VectorRegister v2, VectorRegister v3, int64_t m4);\n@@ -2821,4 +2821,4 @@\n-  inline void z_vpopctb( VectorRegister v1, VectorRegister v2);\n-  inline void z_vpopcth( VectorRegister v1, VectorRegister v2);\n-  inline void z_vpopctf( VectorRegister v1, VectorRegister v2);\n-  inline void z_vpopctg( VectorRegister v1, VectorRegister v2);\n+  inline void z_vpopctb(VectorRegister v1, VectorRegister v2);\n+  inline void z_vpopcth(VectorRegister v1, VectorRegister v2);\n+  inline void z_vpopctf(VectorRegister v1, VectorRegister v2);\n+  inline void z_vpopctg(VectorRegister v1, VectorRegister v2);\n@@ -2916,1 +2916,1 @@\n-  inline void z_vfa(VectorRegister v1, VectorRegister v2, VectorRegister v3, int64_t m4);\n+  inline void z_vfa(  VectorRegister v1, VectorRegister v2, VectorRegister v3, int64_t m4);\n@@ -2921,1 +2921,1 @@\n-  inline void z_vfs(VectorRegister v1, VectorRegister v2, VectorRegister v3, int64_t m4);\n+  inline void z_vfs(  VectorRegister v1, VectorRegister v2, VectorRegister v3, int64_t m4);\n@@ -2926,1 +2926,1 @@\n-  inline void z_vfm(VectorRegister v1, VectorRegister v2, VectorRegister v3, int64_t m4);\n+  inline void z_vfm(  VectorRegister v1, VectorRegister v2, VectorRegister v3, int64_t m4);\n@@ -2931,1 +2931,1 @@\n-  inline void z_vfd(VectorRegister v1, VectorRegister v2, VectorRegister v3, int64_t m4);\n+  inline void z_vfd(  VectorRegister v1, VectorRegister v2, VectorRegister v3, int64_t m4);\n@@ -2936,1 +2936,1 @@\n-  inline void z_vfsq(VectorRegister v1, VectorRegister v2, int64_t m3);\n+  inline void z_vfsq(  VectorRegister v1, VectorRegister v2, int64_t m3);\n@@ -2941,1 +2941,1 @@\n-  inline void z_vflr( VectorRegister v1, VectorRegister v2, int64_t m3, int64_t m5);\n+  inline void z_vflr(  VectorRegister v1, VectorRegister v2, int64_t m3, int64_t m5);\n@@ -2944,1 +2944,1 @@\n-  \/\/ Vector Floatingpoint instructions\n+  \/\/ Floatingpoint instructions\n","filename":"src\/hotspot\/cpu\/s390\/assembler_s390.hpp","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -1197,1 +1197,1 @@\n-\/\/Add\n+\/\/ ADD\n@@ -1202,2 +1202,1 @@\n-\/\/SUB\n-\/\/----------------\n+\/\/ SUB\n@@ -1207,2 +1206,2 @@\n-                                                                                                                                             \/\/\n-\/\/MUL\n+\n+\/\/ MUL\n@@ -1213,1 +1212,1 @@\n-\/\/DIV\n+\/\/ DIV\n@@ -1219,1 +1218,0 @@\n-\/\/---------------\n@@ -1224,0 +1222,1 @@\n+\/\/ vector fp load rounded\n","filename":"src\/hotspot\/cpu\/s390\/assembler_s390.inline.hpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -264,1 +264,1 @@\n-  \/\/ live vector registers (optional, only these ones are used by C2):\n+  \/\/ live vector registers (optional, only these are used by C2):\n@@ -296,1 +296,0 @@\n-\n@@ -415,1 +414,1 @@\n-  for (int i = 0; i < vregstosave_num; i++) {\n+  for (int i = 0; i < vregstosave_num; i++, offset += v_reg_size) {\n@@ -421,1 +420,0 @@\n-    offset += v_reg_size;\n@@ -570,1 +568,1 @@\n-  for (int i = 0; i < vregstosave_num; i++) {\n+  for (int i = 0; i < vregstosave_num; i++, offset += v_reg_size) {\n@@ -574,2 +572,0 @@\n-\n-    offset += v_reg_size;\n","filename":"src\/hotspot\/cpu\/s390\/sharedRuntime_s390.cpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"}]}