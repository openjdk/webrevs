{"files":[{"patch":"@@ -114,1 +114,1 @@\n-  product(bool, UseSFPV, false,                                               \\\n+  product(bool, UseSFPV, false, DIAGNOSTIC,                                               \\\n","filename":"src\/hotspot\/cpu\/s390\/globals_s390.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,0 @@\n-    max_slots_per_register  = 2,\n@@ -174,1 +173,0 @@\n-    max_slots_per_register  = 2,\n@@ -292,1 +290,0 @@\n-    max_slots_per_register  = 4,\n@@ -390,3 +387,3 @@\n-    max_gpr = Register::number_of_registers * Register::max_slots_per_register,\n-    max_fpr = max_gpr + FloatRegister::number_of_registers * FloatRegister::max_slots_per_register,\n-    max_vr  = max_fpr + VectorRegister::number_of_registers * VectorRegister::max_slots_per_register,\n+    max_gpr = Register::number_of_registers * 2,\n+    max_fpr = max_gpr + FloatRegister::number_of_registers * 2,\n+    max_vr  = max_fpr + VectorRegister::number_of_registers,\n","filename":"src\/hotspot\/cpu\/s390\/register_s390.hpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -192,159 +192,32 @@\n-  reg_def Z_VR0   ( SOC, SOC, Op_RegF, 0, VMRegImpl::Bad());\n-  reg_def Z_VR0_H ( SOC, SOC, Op_RegF, 0, VMRegImpl::Bad());\n-  reg_def Z_VR0_J ( SOC, SOC, Op_RegF, 0, VMRegImpl::Bad());\n-  reg_def Z_VR0_K ( SOC, SOC, Op_RegF, 0, VMRegImpl::Bad());\n-\n-  reg_def Z_VR1   ( SOC, SOC, Op_RegF, 1, VMRegImpl::Bad());\n-  reg_def Z_VR1_H ( SOC, SOC, Op_RegF, 1, VMRegImpl::Bad());\n-  reg_def Z_VR1_J ( SOC, SOC, Op_RegF, 1, VMRegImpl::Bad());\n-  reg_def Z_VR1_K ( SOC, SOC, Op_RegF, 1, VMRegImpl::Bad());\n-\n-  reg_def Z_VR2   ( SOC, SOC, Op_RegF, 2, VMRegImpl::Bad());\n-  reg_def Z_VR2_H ( SOC, SOC, Op_RegF, 2, VMRegImpl::Bad());\n-  reg_def Z_VR2_J ( SOC, SOC, Op_RegF, 2, VMRegImpl::Bad());\n-  reg_def Z_VR2_K ( SOC, SOC, Op_RegF, 2, VMRegImpl::Bad());\n-\n-  reg_def Z_VR3   ( SOC, SOC, Op_RegF, 3, VMRegImpl::Bad());\n-  reg_def Z_VR3_H ( SOC, SOC, Op_RegF, 3, VMRegImpl::Bad());\n-  reg_def Z_VR3_J ( SOC, SOC, Op_RegF, 3, VMRegImpl::Bad());\n-  reg_def Z_VR3_K ( SOC, SOC, Op_RegF, 3, VMRegImpl::Bad());\n-\n-  reg_def Z_VR4   ( SOC, SOC, Op_RegF, 4, VMRegImpl::Bad());\n-  reg_def Z_VR4_H ( SOC, SOC, Op_RegF, 4, VMRegImpl::Bad());\n-  reg_def Z_VR4_J ( SOC, SOC, Op_RegF, 4, VMRegImpl::Bad());\n-  reg_def Z_VR4_K ( SOC, SOC, Op_RegF, 4, VMRegImpl::Bad());\n-\n-  reg_def Z_VR5   ( SOC, SOC, Op_RegF, 5, VMRegImpl::Bad());\n-  reg_def Z_VR5_H ( SOC, SOC, Op_RegF, 5, VMRegImpl::Bad());\n-  reg_def Z_VR5_J ( SOC, SOC, Op_RegF, 5, VMRegImpl::Bad());\n-  reg_def Z_VR5_K ( SOC, SOC, Op_RegF, 5, VMRegImpl::Bad());\n-\n-  reg_def Z_VR6   ( SOC, SOC, Op_RegF, 6, VMRegImpl::Bad());\n-  reg_def Z_VR6_H ( SOC, SOC, Op_RegF, 6, VMRegImpl::Bad());\n-  reg_def Z_VR6_J ( SOC, SOC, Op_RegF, 6, VMRegImpl::Bad());\n-  reg_def Z_VR6_K ( SOC, SOC, Op_RegF, 6, VMRegImpl::Bad());\n-\n-  reg_def Z_VR7   ( SOC, SOC, Op_RegF, 7, VMRegImpl::Bad());\n-  reg_def Z_VR7_H ( SOC, SOC, Op_RegF, 7, VMRegImpl::Bad());\n-  reg_def Z_VR7_J ( SOC, SOC, Op_RegF, 7, VMRegImpl::Bad());\n-  reg_def Z_VR7_K ( SOC, SOC, Op_RegF, 7, VMRegImpl::Bad());\n-\n-  reg_def Z_VR8   ( SOC, SOC, Op_RegF, 8, VMRegImpl::Bad());\n-  reg_def Z_VR8_H ( SOC, SOC, Op_RegF, 8, VMRegImpl::Bad());\n-  reg_def Z_VR8_J ( SOC, SOC, Op_RegF, 8, VMRegImpl::Bad());\n-  reg_def Z_VR8_K ( SOC, SOC, Op_RegF, 8, VMRegImpl::Bad());\n-\n-  reg_def Z_VR9   ( SOC, SOC, Op_RegF, 9, VMRegImpl::Bad());\n-  reg_def Z_VR9_H ( SOC, SOC, Op_RegF, 9, VMRegImpl::Bad());\n-  reg_def Z_VR9_J ( SOC, SOC, Op_RegF, 9, VMRegImpl::Bad());\n-  reg_def Z_VR9_K ( SOC, SOC, Op_RegF, 9, VMRegImpl::Bad());\n-\n-  reg_def Z_VR10   ( SOC, SOC, Op_RegF, 10, VMRegImpl::Bad());\n-  reg_def Z_VR10_H ( SOC, SOC, Op_RegF, 10, VMRegImpl::Bad());\n-  reg_def Z_VR10_J ( SOC, SOC, Op_RegF, 10, VMRegImpl::Bad());\n-  reg_def Z_VR10_K ( SOC, SOC, Op_RegF, 10, VMRegImpl::Bad());\n-\n-  reg_def Z_VR11   ( SOC, SOC, Op_RegF, 11, VMRegImpl::Bad());\n-  reg_def Z_VR11_H ( SOC, SOC, Op_RegF, 11, VMRegImpl::Bad());\n-  reg_def Z_VR11_J ( SOC, SOC, Op_RegF, 11, VMRegImpl::Bad());\n-  reg_def Z_VR11_K ( SOC, SOC, Op_RegF, 11, VMRegImpl::Bad());\n-\n-  reg_def Z_VR12   ( SOC, SOC, Op_RegF, 12, VMRegImpl::Bad());\n-  reg_def Z_VR12_H ( SOC, SOC, Op_RegF, 12, VMRegImpl::Bad());\n-  reg_def Z_VR12_J ( SOC, SOC, Op_RegF, 12, VMRegImpl::Bad());\n-  reg_def Z_VR12_K ( SOC, SOC, Op_RegF, 12, VMRegImpl::Bad());\n-\n-  reg_def Z_VR13   ( SOC, SOC, Op_RegF, 13, VMRegImpl::Bad());\n-  reg_def Z_VR13_H ( SOC, SOC, Op_RegF, 13, VMRegImpl::Bad());\n-  reg_def Z_VR13_J ( SOC, SOC, Op_RegF, 13, VMRegImpl::Bad());\n-  reg_def Z_VR13_K ( SOC, SOC, Op_RegF, 13, VMRegImpl::Bad());\n-\n-  reg_def Z_VR14   ( SOC, SOC, Op_RegF, 14, VMRegImpl::Bad());\n-  reg_def Z_VR14_H ( SOC, SOC, Op_RegF, 14, VMRegImpl::Bad());\n-  reg_def Z_VR14_J ( SOC, SOC, Op_RegF, 14, VMRegImpl::Bad());\n-  reg_def Z_VR14_K ( SOC, SOC, Op_RegF, 14, VMRegImpl::Bad());\n-\n-  reg_def Z_VR15   ( SOC, SOC, Op_RegF, 15, VMRegImpl::Bad());\n-  reg_def Z_VR15_H ( SOC, SOC, Op_RegF, 15, VMRegImpl::Bad());\n-  reg_def Z_VR15_J ( SOC, SOC, Op_RegF, 15, VMRegImpl::Bad());\n-  reg_def Z_VR15_K ( SOC, SOC, Op_RegF, 15, VMRegImpl::Bad());\n-\n-  reg_def Z_VR16   ( SOC, SOC, Op_RegF, 16, Z_V16->as_VMReg()          );\n-  reg_def Z_VR16_H ( SOC, SOC, Op_RegF, 16, Z_V16->as_VMReg()->next()  );\n-  reg_def Z_VR16_J ( SOC, SOC, Op_RegF, 16, Z_V16->as_VMReg()->next(2) );\n-  reg_def Z_VR16_K ( SOC, SOC, Op_RegF, 16, Z_V16->as_VMReg()->next(3) );\n-\n-  reg_def Z_VR17   ( SOC, SOC, Op_RegF, 17, Z_V17->as_VMReg()          );\n-  reg_def Z_VR17_H ( SOC, SOC, Op_RegF, 17, Z_V17->as_VMReg()->next()  );\n-  reg_def Z_VR17_J ( SOC, SOC, Op_RegF, 17, Z_V17->as_VMReg()->next(2) );\n-  reg_def Z_VR17_K ( SOC, SOC, Op_RegF, 17, Z_V17->as_VMReg()->next(3) );\n-\n-  reg_def Z_VR18   ( SOC, SOC, Op_RegF, 18, Z_V18->as_VMReg()          );\n-  reg_def Z_VR18_H ( SOC, SOC, Op_RegF, 18, Z_V18->as_VMReg()->next()  );\n-  reg_def Z_VR18_J ( SOC, SOC, Op_RegF, 18, Z_V18->as_VMReg()->next(2) );\n-  reg_def Z_VR18_K ( SOC, SOC, Op_RegF, 18, Z_V18->as_VMReg()->next(3) );\n-\n-  reg_def Z_VR19   ( SOC, SOC, Op_RegF, 19, Z_V19->as_VMReg()          );\n-  reg_def Z_VR19_H ( SOC, SOC, Op_RegF, 19, Z_V19->as_VMReg()->next()  );\n-  reg_def Z_VR19_J ( SOC, SOC, Op_RegF, 19, Z_V19->as_VMReg()->next(2) );\n-  reg_def Z_VR19_K ( SOC, SOC, Op_RegF, 19, Z_V19->as_VMReg()->next(3) );\n-\n-  reg_def Z_VR20   ( SOC, SOC, Op_RegF, 20, Z_V20->as_VMReg()          );\n-  reg_def Z_VR20_H ( SOC, SOC, Op_RegF, 20, Z_V20->as_VMReg()->next()  );\n-  reg_def Z_VR20_J ( SOC, SOC, Op_RegF, 20, Z_V20->as_VMReg()->next(2) );\n-  reg_def Z_VR20_K ( SOC, SOC, Op_RegF, 20, Z_V20->as_VMReg()->next(3) );\n-\n-  reg_def Z_VR21   ( SOC, SOC, Op_RegF, 21, Z_V21->as_VMReg()          );\n-  reg_def Z_VR21_H ( SOC, SOC, Op_RegF, 21, Z_V21->as_VMReg()->next()  );\n-  reg_def Z_VR21_J ( SOC, SOC, Op_RegF, 21, Z_V21->as_VMReg()->next(2) );\n-  reg_def Z_VR21_K ( SOC, SOC, Op_RegF, 21, Z_V21->as_VMReg()->next(3) );\n-\n-  reg_def Z_VR22   ( SOC, SOC, Op_RegF, 22, Z_V22->as_VMReg()          );\n-  reg_def Z_VR22_H ( SOC, SOC, Op_RegF, 22, Z_V22->as_VMReg()->next()  );\n-  reg_def Z_VR22_J ( SOC, SOC, Op_RegF, 22, Z_V22->as_VMReg()->next(2) );\n-  reg_def Z_VR22_K ( SOC, SOC, Op_RegF, 22, Z_V22->as_VMReg()->next(3) );\n-\n-  reg_def Z_VR23   ( SOC, SOC, Op_RegF, 23, Z_V23->as_VMReg()          );\n-  reg_def Z_VR23_H ( SOC, SOC, Op_RegF, 23, Z_V23->as_VMReg()->next()  );\n-  reg_def Z_VR23_J ( SOC, SOC, Op_RegF, 23, Z_V23->as_VMReg()->next(2) );\n-  reg_def Z_VR23_K ( SOC, SOC, Op_RegF, 23, Z_V23->as_VMReg()->next(3) );\n-\n-  reg_def Z_VR24   ( SOC, SOC, Op_RegF, 24, Z_V24->as_VMReg()          );\n-  reg_def Z_VR24_H ( SOC, SOC, Op_RegF, 24, Z_V24->as_VMReg()->next()  );\n-  reg_def Z_VR24_J ( SOC, SOC, Op_RegF, 24, Z_V24->as_VMReg()->next(2) );\n-  reg_def Z_VR24_K ( SOC, SOC, Op_RegF, 24, Z_V24->as_VMReg()->next(3) );\n-\n-  reg_def Z_VR25   ( SOC, SOC, Op_RegF, 25, Z_V25->as_VMReg()          );\n-  reg_def Z_VR25_H ( SOC, SOC, Op_RegF, 25, Z_V25->as_VMReg()->next()  );\n-  reg_def Z_VR25_J ( SOC, SOC, Op_RegF, 25, Z_V25->as_VMReg()->next(2) );\n-  reg_def Z_VR25_K ( SOC, SOC, Op_RegF, 25, Z_V25->as_VMReg()->next(3) );\n-\n-  reg_def Z_VR26   ( SOC, SOC, Op_RegF, 26, Z_V26->as_VMReg()          );\n-  reg_def Z_VR26_H ( SOC, SOC, Op_RegF, 26, Z_V26->as_VMReg()->next()  );\n-  reg_def Z_VR26_J ( SOC, SOC, Op_RegF, 26, Z_V26->as_VMReg()->next(2) );\n-  reg_def Z_VR26_K ( SOC, SOC, Op_RegF, 26, Z_V26->as_VMReg()->next(3) );\n-\n-  reg_def Z_VR27   ( SOC, SOC, Op_RegF, 27, Z_V27->as_VMReg()          );\n-  reg_def Z_VR27_H ( SOC, SOC, Op_RegF, 27, Z_V27->as_VMReg()->next()  );\n-  reg_def Z_VR27_J ( SOC, SOC, Op_RegF, 27, Z_V27->as_VMReg()->next(2) );\n-  reg_def Z_VR27_K ( SOC, SOC, Op_RegF, 27, Z_V27->as_VMReg()->next(3) );\n-\n-  reg_def Z_VR28   ( SOC, SOC, Op_RegF, 28, Z_V28->as_VMReg()          );\n-  reg_def Z_VR28_H ( SOC, SOC, Op_RegF, 28, Z_V28->as_VMReg()->next()  );\n-  reg_def Z_VR28_J ( SOC, SOC, Op_RegF, 28, Z_V28->as_VMReg()->next(2) );\n-  reg_def Z_VR28_K ( SOC, SOC, Op_RegF, 28, Z_V28->as_VMReg()->next(3) );\n-\n-  reg_def Z_VR29   ( SOC, SOC, Op_RegF, 29, Z_V29->as_VMReg()          );\n-  reg_def Z_VR29_H ( SOC, SOC, Op_RegF, 29, Z_V29->as_VMReg()->next()  );\n-  reg_def Z_VR29_J ( SOC, SOC, Op_RegF, 29, Z_V29->as_VMReg()->next(2) );\n-  reg_def Z_VR29_K ( SOC, SOC, Op_RegF, 29, Z_V29->as_VMReg()->next(3) );\n-\n-  reg_def Z_VR30   ( SOC, SOC, Op_RegF, 30, Z_V30->as_VMReg()          );\n-  reg_def Z_VR30_H ( SOC, SOC, Op_RegF, 30, Z_V30->as_VMReg()->next()  );\n-  reg_def Z_VR30_J ( SOC, SOC, Op_RegF, 30, Z_V30->as_VMReg()->next(2) );\n-  reg_def Z_VR30_K ( SOC, SOC, Op_RegF, 30, Z_V30->as_VMReg()->next(3) );\n-\n-  reg_def Z_VR31   ( SOC, SOC, Op_RegF, 31, Z_V31->as_VMReg()          );\n-  reg_def Z_VR31_H ( SOC, SOC, Op_RegF, 31, Z_V31->as_VMReg()->next()  );\n-  reg_def Z_VR31_J ( SOC, SOC, Op_RegF, 31, Z_V31->as_VMReg()->next(2) );\n-  reg_def Z_VR31_K ( SOC, SOC, Op_RegF, 31, Z_V31->as_VMReg()->next(3) );\n+  reg_def Z_VR0   ( SOC, SOC, Op_VecX, 0, VMRegImpl::Bad());\n+  reg_def Z_VR1   ( SOC, SOC, Op_VecX, 1, VMRegImpl::Bad());\n+  reg_def Z_VR2   ( SOC, SOC, Op_VecX, 2, VMRegImpl::Bad());\n+  reg_def Z_VR3   ( SOC, SOC, Op_VecX, 3, VMRegImpl::Bad());\n+  reg_def Z_VR4   ( SOC, SOC, Op_VecX, 4, VMRegImpl::Bad());\n+  reg_def Z_VR5   ( SOC, SOC, Op_VecX, 5, VMRegImpl::Bad());\n+  reg_def Z_VR6   ( SOC, SOC, Op_VecX, 6, VMRegImpl::Bad());\n+  reg_def Z_VR7   ( SOC, SOC, Op_VecX, 7, VMRegImpl::Bad());\n+  reg_def Z_VR8   ( SOC, SOC, Op_VecX, 8, VMRegImpl::Bad());\n+  reg_def Z_VR9   ( SOC, SOC, Op_VecX, 9, VMRegImpl::Bad());\n+  reg_def Z_VR10   ( SOC, SOC, Op_VecX, 10, VMRegImpl::Bad());\n+  reg_def Z_VR11   ( SOC, SOC, Op_VecX, 11, VMRegImpl::Bad());\n+  reg_def Z_VR12   ( SOC, SOC, Op_VecX, 12, VMRegImpl::Bad());\n+  reg_def Z_VR13   ( SOC, SOC, Op_VecX, 13, VMRegImpl::Bad());\n+  reg_def Z_VR14   ( SOC, SOC, Op_VecX, 14, VMRegImpl::Bad());\n+  reg_def Z_VR15   ( SOC, SOC, Op_VecX, 15, VMRegImpl::Bad());\n+  reg_def Z_VR16   ( SOC, SOC, Op_VecX, 16, Z_V16->as_VMReg());\n+  reg_def Z_VR17   ( SOC, SOC, Op_VecX, 17, Z_V17->as_VMReg());\n+  reg_def Z_VR18   ( SOC, SOC, Op_VecX, 18, Z_V18->as_VMReg());\n+  reg_def Z_VR19   ( SOC, SOC, Op_VecX, 19, Z_V19->as_VMReg());\n+  reg_def Z_VR20   ( SOC, SOC, Op_VecX, 20, Z_V20->as_VMReg());\n+  reg_def Z_VR21   ( SOC, SOC, Op_VecX, 21, Z_V21->as_VMReg());\n+  reg_def Z_VR22   ( SOC, SOC, Op_VecX, 22, Z_V22->as_VMReg());\n+  reg_def Z_VR23   ( SOC, SOC, Op_VecX, 23, Z_V23->as_VMReg());\n+  reg_def Z_VR24   ( SOC, SOC, Op_VecX, 24, Z_V24->as_VMReg());\n+  reg_def Z_VR25   ( SOC, SOC, Op_VecX, 25, Z_V25->as_VMReg());\n+  reg_def Z_VR26   ( SOC, SOC, Op_VecX, 26, Z_V26->as_VMReg());\n+  reg_def Z_VR27   ( SOC, SOC, Op_VecX, 27, Z_V27->as_VMReg());\n+  reg_def Z_VR28   ( SOC, SOC, Op_VecX, 28, Z_V28->as_VMReg());\n+  reg_def Z_VR29   ( SOC, SOC, Op_VecX, 29, Z_V29->as_VMReg());\n+  reg_def Z_VR30   ( SOC, SOC, Op_VecX, 30, Z_V30->as_VMReg());\n+  reg_def Z_VR31   ( SOC, SOC, Op_VecX, 31, Z_V31->as_VMReg());\n@@ -436,32 +309,32 @@\n-  Z_VR0, Z_VR0_H, Z_VR0_J, Z_VR0_K,\n-  Z_VR1, Z_VR1_H, Z_VR1_J, Z_VR1_K,\n-  Z_VR2, Z_VR2_H, Z_VR2_J, Z_VR2_K,\n-  Z_VR3, Z_VR3_H, Z_VR3_J, Z_VR3_K,\n-  Z_VR4, Z_VR4_H, Z_VR4_J, Z_VR4_K,\n-  Z_VR5, Z_VR5_H, Z_VR5_J, Z_VR5_K,\n-  Z_VR6, Z_VR6_H, Z_VR6_J, Z_VR6_K,\n-  Z_VR7, Z_VR7_H, Z_VR7_J, Z_VR7_K,\n-  Z_VR8, Z_VR8_H, Z_VR8_J, Z_VR8_K,\n-  Z_VR9, Z_VR9_H, Z_VR9_J, Z_VR9_K,\n-  Z_VR10, Z_VR10_H, Z_VR10_J, Z_VR10_K,\n-  Z_VR11, Z_VR11_H, Z_VR11_J, Z_VR11_K,\n-  Z_VR12, Z_VR12_H, Z_VR12_J, Z_VR12_K,\n-  Z_VR13, Z_VR13_H, Z_VR13_J, Z_VR13_K,\n-  Z_VR14, Z_VR14_H, Z_VR14_J, Z_VR14_K,\n-  Z_VR15, Z_VR15_H, Z_VR15_J, Z_VR15_K,\n-  Z_VR16, Z_VR16_H, Z_VR16_J, Z_VR16_K,\n-  Z_VR17, Z_VR17_H, Z_VR17_J, Z_VR17_K,\n-  Z_VR18, Z_VR18_H, Z_VR18_J, Z_VR18_K,\n-  Z_VR19, Z_VR19_H, Z_VR19_J, Z_VR19_K,\n-  Z_VR20, Z_VR20_H, Z_VR20_J, Z_VR20_K,\n-  Z_VR21, Z_VR21_H, Z_VR21_J, Z_VR21_K,\n-  Z_VR22, Z_VR22_H, Z_VR22_J, Z_VR22_K,\n-  Z_VR23, Z_VR23_H, Z_VR23_J, Z_VR23_K,\n-  Z_VR24, Z_VR24_H, Z_VR24_J, Z_VR24_K,\n-  Z_VR25, Z_VR25_H, Z_VR25_J, Z_VR25_K,\n-  Z_VR26, Z_VR26_H, Z_VR26_J, Z_VR26_K,\n-  Z_VR27, Z_VR27_H, Z_VR27_J, Z_VR27_K,\n-  Z_VR28, Z_VR28_H, Z_VR28_J, Z_VR28_K,\n-  Z_VR29, Z_VR29_H, Z_VR29_J, Z_VR29_K,\n-  Z_VR30, Z_VR30_H, Z_VR30_J, Z_VR30_K,\n-  Z_VR31, Z_VR31_H, Z_VR31_J, Z_VR31_K,\n+  Z_VR0,\n+  Z_VR1,\n+  Z_VR2,\n+  Z_VR3,\n+  Z_VR4,\n+  Z_VR5,\n+  Z_VR6,\n+  Z_VR7,\n+  Z_VR8,\n+  Z_VR9,\n+  Z_VR10,\n+  Z_VR11,\n+  Z_VR12,\n+  Z_VR13,\n+  Z_VR14,\n+  Z_VR15,\n+  Z_VR16,\n+  Z_VR17,\n+  Z_VR18,\n+  Z_VR19,\n+  Z_VR20,\n+  Z_VR21,\n+  Z_VR22,\n+  Z_VR23,\n+  Z_VR24,\n+  Z_VR25,\n+  Z_VR26,\n+  Z_VR27,\n+  Z_VR28,\n+  Z_VR29,\n+  Z_VR30,\n+  Z_VR31\n@@ -746,16 +619,16 @@\n-  Z_VR16, Z_VR16_H, Z_VR16_J, Z_VR16_K,\n-  Z_VR17, Z_VR17_H, Z_VR17_J, Z_VR17_K,\n-  Z_VR18, Z_VR18_H, Z_VR18_J, Z_VR18_K,\n-  Z_VR19, Z_VR19_H, Z_VR19_J, Z_VR19_K,\n-  Z_VR20, Z_VR20_H, Z_VR20_J, Z_VR20_K,\n-  Z_VR21, Z_VR21_H, Z_VR21_J, Z_VR21_K,\n-  Z_VR22, Z_VR22_H, Z_VR22_J, Z_VR22_K,\n-  Z_VR23, Z_VR23_H, Z_VR23_J, Z_VR23_K,\n-  Z_VR24, Z_VR24_H, Z_VR24_J, Z_VR24_K,\n-  Z_VR25, Z_VR25_H, Z_VR25_J, Z_VR25_K,\n-  Z_VR26, Z_VR26_H, Z_VR26_J, Z_VR26_K,\n-  Z_VR27, Z_VR27_H, Z_VR27_J, Z_VR27_K,\n-  Z_VR28, Z_VR28_H, Z_VR28_J, Z_VR28_K,\n-  Z_VR29, Z_VR29_H, Z_VR29_J, Z_VR29_K,\n-  Z_VR30, Z_VR30_H, Z_VR30_J, Z_VR30_K,\n-  Z_VR31, Z_VR31_H, Z_VR31_J, Z_VR31_K,\n+  Z_VR16,\n+  Z_VR17,\n+  Z_VR18,\n+  Z_VR19,\n+  Z_VR20,\n+  Z_VR21,\n+  Z_VR22,\n+  Z_VR23,\n+  Z_VR24,\n+  Z_VR25,\n+  Z_VR26,\n+  Z_VR27,\n+  Z_VR28,\n+  Z_VR29,\n+  Z_VR30,\n+  Z_VR31\n@@ -1209,1 +1082,1 @@\n-  if (reg < 32+32+128) {\n+  if (reg < 32+32+32) {\n@@ -1214,1 +1087,1 @@\n-  assert(OptoReg::is_stack(reg) || reg < 64+64+128, \"blow up if spilling flags\");\n+  assert(OptoReg::is_stack(reg) || reg < 32+32+32, \"blow up if spilling flags\");\n@@ -1288,2 +1161,2 @@\n-  if (bottom_type()->isa_vect() != NULL && ideal_reg() == Op_VecX) {\n-        if (src_lo_rc == rc_stack && dst_lo_rc == rc_stack) {\n+  if (bottom_type()->isa_vect() != nullptr && ideal_reg() == Op_VecX) {\n+    if (src_lo_rc == rc_stack && dst_lo_rc == rc_stack) {\n@@ -1293,1 +1166,1 @@\n-        }\n+      }\n@@ -1295,1 +1168,1 @@\n-      } else if (src_lo_rc == rc_vector && dst_lo_rc == rc_stack) {\n+    } else if (src_lo_rc == rc_vector && dst_lo_rc == rc_stack) {\n@@ -1302,1 +1175,1 @@\n-      } else if (src_lo_rc == rc_stack && dst_lo_rc == rc_vector) {\n+    } else if (src_lo_rc == rc_stack && dst_lo_rc == rc_vector) {\n@@ -1309,1 +1182,1 @@\n-      } else if (src_lo_rc == rc_vector && dst_lo_rc == rc_vector) {\n+    } else if (src_lo_rc == rc_vector && dst_lo_rc == rc_vector) {\n@@ -1317,3 +1190,3 @@\n-      } else {\n-        ShouldNotReachHere();\n-      }\n+    } else {\n+      ShouldNotReachHere();\n+    }\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":91,"deletions":218,"binary":false,"changes":309,"status":"modified"},{"patch":"@@ -417,1 +417,0 @@\n-    \/\/int reg_type = RegisterSaver_LiveVRegs[i].reg_type;\n@@ -421,8 +420,1 @@\n-    map->set_callee_saved(VMRegImpl::stack2reg(offset>>2),\n-        RegisterSaver_LiveVRegs[i].vmreg);\n-    map->set_callee_saved(VMRegImpl::stack2reg((offset + half_reg_size ) >> 2),\n-        RegisterSaver_LiveVRegs[i].vmreg->next());\n-    map->set_callee_saved(VMRegImpl::stack2reg((offset + (half_reg_size * 2)) >> 2),\n-        RegisterSaver_LiveVRegs[i].vmreg->next(2));\n-    map->set_callee_saved(VMRegImpl::stack2reg((offset + (half_reg_size * 3)) >> 2),\n-        RegisterSaver_LiveVRegs[i].vmreg->next(3));\n+    map->set_callee_saved(VMRegImpl::stack2reg(offset>>2), RegisterSaver_LiveVRegs[i].vmreg);\n@@ -581,1 +573,0 @@\n-    \/\/int reg_type = RegisterSaver_LiveVRegs[i].reg_type;\n","filename":"src\/hotspot\/cpu\/s390\/sharedRuntime_s390.cpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -101,0 +101,1 @@\n+\n@@ -106,1 +107,1 @@\n-        FLAG_SET_ERGO(UseSFPV, true);\n+      FLAG_SET_ERGO(UseSFPV, true);\n@@ -108,2 +109,2 @@\n-        warning(\"UseSFPV specified, but needs at least Z14.\");\n-        FLAG_SET_DEFAULT(UseSFPV, false);\n+      warning(\"UseSFPV specified, but needs at least Z14.\");\n+      FLAG_SET_DEFAULT(UseSFPV, false);\n@@ -112,2 +113,2 @@\n-      warning(\"SuperwordUseVX specified, but needs at least Z13.\");\n-      FLAG_SET_DEFAULT(SuperwordUseVX, false);\n+    warning(\"SuperwordUseVX specified, but needs at least Z13.\");\n+    FLAG_SET_DEFAULT(SuperwordUseVX, false);\n","filename":"src\/hotspot\/cpu\/s390\/vm_version_s390.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -49,3 +49,0 @@\n-    regName[i++] = vreg->name();\n-    regName[i++] = vreg->name();\n-    regName[i++] = vreg->name();\n","filename":"src\/hotspot\/cpu\/s390\/vmreg_s390.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  return ::as_Register(value() \/ Register::max_slots_per_register);\n+  return ::as_Register(value() >> 1);\n@@ -50,2 +50,1 @@\n-  return ::as_FloatRegister((value() - ConcreteRegisterImpl::max_gpr)\n-          \/ FloatRegister::max_slots_per_register);\n+  return ::as_FloatRegister((value() - ConcreteRegisterImpl::max_gpr) >> 1);\n@@ -55,4 +54,2 @@\n-  assert(is_VectorRegister()\n-         && (value() % VectorRegister::max_slots_per_register == 0), \"must be\");\n-  return ::as_VectorRegister((value() - ConcreteRegisterImpl::max_fpr)\n-          \/ VectorRegister::max_slots_per_register);\n+  assert(is_VectorRegister(), \"must be\");\n+  return ::as_VectorRegister((value() - ConcreteRegisterImpl::max_fpr));\n@@ -63,9 +60,1 @@\n-  if (is_FloatRegister()) {\n-    int base = value() - ConcreteRegisterImpl::max_gpr;\n-    return (base % FloatRegister::max_slots_per_register) == 0;\n-  } else if (is_VectorRegister()) {\n-    int base = value() - ConcreteRegisterImpl::max_fpr;\n-    return (base % VectorRegister::max_slots_per_register) == 0;\n-  } else {\n-    return is_even(value());\n-  }\n+  return is_even(value());\n","filename":"src\/hotspot\/cpu\/s390\/vmreg_s390.hpp","additions":5,"deletions":16,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-  return VMRegImpl::as_VMReg(encoding() * Register::max_slots_per_register);\n+  return VMRegImpl::as_VMReg(encoding() << 1);\n@@ -34,2 +34,1 @@\n-  return VMRegImpl::as_VMReg((encoding() * FloatRegister::max_slots_per_register) +\n-                             ConcreteRegisterImpl::max_gpr);\n+  return VMRegImpl::as_VMReg((encoding() << 1) + ConcreteRegisterImpl::max_gpr);\n@@ -39,2 +38,1 @@\n-  return VMRegImpl::as_VMReg((encoding() * VectorRegister::max_slots_per_register) +\n-                             ConcreteRegisterImpl::max_fpr);\n+  return VMRegImpl::as_VMReg((encoding()) + ConcreteRegisterImpl::max_fpr);\n","filename":"src\/hotspot\/cpu\/s390\/vmreg_s390.inline.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"}]}