{"files":[{"patch":"@@ -2325,12 +2325,12 @@\n-  inline void z_sla( Register r1,              int64_t d2, Register b2=Z_R0); \/\/ shift left  r1 = r1 << ((d2+b2)&0x3f) ; int32, only 31 bits shifted, sign preserved!\n-  inline void z_slak(Register r1, Register r3, int64_t d2, Register b2=Z_R0); \/\/ shift left  r1 = r3 << ((d2+b2)&0x3f) ; int32, only 31 bits shifted, sign preserved!\n-  inline void z_slag(Register r1, Register r3, int64_t d2, Register b2=Z_R0); \/\/ shift left  r1 = r3 << ((d2+b2)&0x3f) ; int64, only 63 bits shifted, sign preserved!\n-  inline void z_sra( Register r1,              int64_t d2, Register b2=Z_R0); \/\/ shift right r1 = r1 >> ((d2+b2)&0x3f) ; int32, sign extended\n-  inline void z_srak(Register r1, Register r3, int64_t d2, Register b2=Z_R0); \/\/ shift right r1 = r3 >> ((d2+b2)&0x3f) ; int32, sign extended\n-  inline void z_srag(Register r1, Register r3, int64_t d2, Register b2=Z_R0); \/\/ shift right r1 = r3 >> ((d2+b2)&0x3f) ; int64, sign extended\n-  inline void z_sll( Register r1,              int64_t d2, Register b2=Z_R0); \/\/ shift left  r1 = r1 << ((d2+b2)&0x3f) ; int32, zeros added\n-  inline void z_sllk(Register r1, Register r3, int64_t d2, Register b2=Z_R0); \/\/ shift left  r1 = r3 << ((d2+b2)&0x3f) ; int32, zeros added\n-  inline void z_sllg(Register r1, Register r3, int64_t d2, Register b2=Z_R0); \/\/ shift left  r1 = r3 << ((d2+b2)&0x3f) ; int64, zeros added\n-  inline void z_srl( Register r1,              int64_t d2, Register b2=Z_R0); \/\/ shift right r1 = r1 >> ((d2+b2)&0x3f) ; int32, zero extended\n-  inline void z_srlk(Register r1, Register r3, int64_t d2, Register b2=Z_R0); \/\/ shift right r1 = r3 >> ((d2+b2)&0x3f) ; int32, zero extended\n-  inline void z_srlg(Register r1, Register r3, int64_t d2, Register b2=Z_R0); \/\/ shift right r1 = r3 >> ((d2+b2)&0x3f) ; int64, zero extended\n+  inline void z_sla( Register r1,              int64_t d2, Register b2 = Z_R0); \/\/ shift left  r1 = r1 << ((d2+b2)&0x3f) ; int32, only 31 bits shifted, sign preserved!\n+  inline void z_slak(Register r1, Register r3, int64_t d2, Register b2 = Z_R0); \/\/ shift left  r1 = r3 << ((d2+b2)&0x3f) ; int32, only 31 bits shifted, sign preserved!\n+  inline void z_slag(Register r1, Register r3, int64_t d2, Register b2 = Z_R0); \/\/ shift left  r1 = r3 << ((d2+b2)&0x3f) ; int64, only 63 bits shifted, sign preserved!\n+  inline void z_sra( Register r1,              int64_t d2, Register b2 = Z_R0); \/\/ shift right r1 = r1 >> ((d2+b2)&0x3f) ; int32, sign extended\n+  inline void z_srak(Register r1, Register r3, int64_t d2, Register b2 = Z_R0); \/\/ shift right r1 = r3 >> ((d2+b2)&0x3f) ; int32, sign extended\n+  inline void z_srag(Register r1, Register r3, int64_t d2, Register b2 = Z_R0); \/\/ shift right r1 = r3 >> ((d2+b2)&0x3f) ; int64, sign extended\n+  inline void z_sll( Register r1,              int64_t d2, Register b2 = Z_R0); \/\/ shift left  r1 = r1 << ((d2+b2)&0x3f) ; int32, zeros added\n+  inline void z_sllk(Register r1, Register r3, int64_t d2, Register b2 = Z_R0); \/\/ shift left  r1 = r3 << ((d2+b2)&0x3f) ; int32, zeros added\n+  inline void z_sllg(Register r1, Register r3, int64_t d2, Register b2 = Z_R0); \/\/ shift left  r1 = r3 << ((d2+b2)&0x3f) ; int64, zeros added\n+  inline void z_srl( Register r1,              int64_t d2, Register b2 = Z_R0); \/\/ shift right r1 = r1 >> ((d2+b2)&0x3f) ; int32, zero extended\n+  inline void z_srlk(Register r1, Register r3, int64_t d2, Register b2 = Z_R0); \/\/ shift right r1 = r3 >> ((d2+b2)&0x3f) ; int32, zero extended\n+  inline void z_srlg(Register r1, Register r3, int64_t d2, Register b2 = Z_R0); \/\/ shift right r1 = r3 >> ((d2+b2)&0x3f) ; int64, zero extended\n@@ -2339,2 +2339,2 @@\n-  inline void z_rll( Register r1, Register r3, int64_t d2, Register b2=Z_R0); \/\/ rot r1 = r3 << (d2+b2 & 0x3f) ; int32  -- z10\n-  inline void z_rllg(Register r1, Register r3, int64_t d2, Register b2=Z_R0); \/\/ rot r1 = r3 << (d2+b2 & 0x3f) ; int64  -- z10\n+  inline void z_rll( Register r1, Register r3, int64_t d2, Register b2 = Z_R0); \/\/ rot r1 = r3 << (d2+b2 & 0x3f) ; int32  -- z10\n+  inline void z_rllg(Register r1, Register r3, int64_t d2, Register b2 = Z_R0); \/\/ rot r1 = r3 << (d2+b2 & 0x3f) ; int64  -- z10\n@@ -2462,1 +2462,1 @@\n-  inline void z_mvcle(Register r1, Register r3, int64_t d2, Register b2=Z_R0);    \/\/ move region of memory\n+  inline void z_mvcle(Register r1, Register r3, int64_t d2, Register b2 = Z_R0);    \/\/ move region of memory\n@@ -2533,4 +2533,4 @@\n-  inline void z_vlvgb( VectorRegister v1, Register r3, int64_t d2, Register b2=Z_R0);\n-  inline void z_vlvgh( VectorRegister v1, Register r3, int64_t d2, Register b2=Z_R0);\n-  inline void z_vlvgf( VectorRegister v1, Register r3, int64_t d2, Register b2=Z_R0);\n-  inline void z_vlvgg( VectorRegister v1, Register r3, int64_t d2, Register b2=Z_R0);\n+  inline void z_vlvgb( VectorRegister v1, Register r3, int64_t d2, Register b2 = Z_R0);\n+  inline void z_vlvgh( VectorRegister v1, Register r3, int64_t d2, Register b2 = Z_R0);\n+  inline void z_vlvgf( VectorRegister v1, Register r3, int64_t d2, Register b2 = Z_R0);\n+  inline void z_vlvgg( VectorRegister v1, Register r3, int64_t d2, Register b2 = Z_R0);\n","filename":"src\/hotspot\/cpu\/s390\/assembler_s390.hpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -815,1 +815,1 @@\n-inline void Assembler::z_vlvg(   VectorRegister v1, Register r3, int64_t d2, Register b2, int64_t m4) {emit_48(VLVG_ZOPC  | vreg(v1,  8)     |  reg(r3, 12, 48) | rsmaskt_32(d2,     b2) | vesc_mask(m4, VRET_BYTE, VRET_DW, 32)); }\n+inline void Assembler::z_vlvg(   VectorRegister v1, Register r3, int64_t d2, Register b2, int64_t m4) {emit_48(VLVG_ZOPC  | vreg(v1,  8)     |  reg(r3, 12, 48) | rsmaskt_48(d2,     b2) | vesc_mask(m4, VRET_BYTE, VRET_DW, 32)); }\n","filename":"src\/hotspot\/cpu\/s390\/assembler_s390.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-  product(bool, UseSFPV, false, DIAGNOSTIC,                                               \\\n+  product(bool, UseSFPV, false, DIAGNOSTIC,                                   \\\n","filename":"src\/hotspot\/cpu\/s390\/globals_s390.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1081,1 +1081,1 @@\n-  \/\/ we have 32 vector register * 4 halves\n+  \/\/ we have 32 vector register\n@@ -7473,1 +7473,1 @@\n-  match(Set dst (SqrtF src));\n+  match(Set dst (ConvD2F (SqrtD (ConvF2D src))));\n@@ -7496,1 +7496,1 @@\n-  match(Set dst (SqrtF src));\n+  match(Set dst (ConvD2F (SqrtD (ConvF2D src))));\n@@ -10958,0 +10958,1 @@\n+\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -314,2 +314,2 @@\n-    const int vregstosave_num     = save_vectors ? (sizeof(RegisterSaver_LiveVRegs) \/\n-                                                   sizeof(RegisterSaver::LiveRegType))\n+  const int vregstosave_num     = save_vectors ? (sizeof(RegisterSaver_LiveVRegs) \/\n+                                                  sizeof(RegisterSaver::LiveRegType))\n@@ -487,2 +487,1 @@\n-  \/\/const int register_save_offset = live_reg_frame_size(reg_set) - live_reg_save_size(reg_set);\n-    \/\/ Calculate frame size.\n+  \/\/ Calculate frame size.\n@@ -490,1 +489,1 @@\n-                                                   sizeof(RegisterSaver::LiveRegType))\n+                                                  sizeof(RegisterSaver::LiveRegType))\n","filename":"src\/hotspot\/cpu\/s390\/sharedRuntime_s390.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"}]}