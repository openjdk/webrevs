{"files":[{"patch":"@@ -1818,3 +1818,0 @@\n-  if (dst->encoding() == src1->encoding()) {\n-    return cmovl(cc, dst, src2);\n-  }\n@@ -1822,1 +1819,1 @@\n-  evex_opcode_ndd_and_int16(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, 0x40 | cc, 0xC0, false);\n+  evex_opcode_and_int16_ndd(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, 0x40 | cc, 0xC0, false);\n@@ -1833,3 +1830,0 @@\n-  if (dst->encoding() == src1->encoding()) {\n-    return cmovl(cc, dst, src2);\n-  }\n@@ -1839,3 +1833,1 @@\n-  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes);\n-  emit_int8((0x40 | cc));\n-  emit_operand(src1, src2, 0);\n+  evex_prefix_int8_operand_ndd(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, (0x40 | cc));\n@@ -2531,1 +2523,1 @@\n-  evex_opcode_ndd_and_int16(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAF, 0xC0, no_flags);\n+  evex_opcode_and_int16_ndd(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAF, 0xC0, no_flags);\n@@ -2576,1 +2568,1 @@\n-  evex_imul_nf_and_int16(dst->encoding(), src->encoding(), value, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n+  evex_opcode_and_int16_nf(dst->encoding(), src->encoding(), value, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n@@ -4420,3 +4412,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n-    return orw(dst, src2);\n-  }\n@@ -6819,1 +6808,1 @@\n-  evex_opcode_ndd_int16(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xA5, 0xC0, no_flags);\n+  evex_opcode_int16_ndd(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xA5, 0xC0, no_flags);\n@@ -6829,1 +6818,1 @@\n-  evex_opcode_ndd_and_int24(dst->encoding(), src1->encoding(), src2->encoding(), imm8, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xA4, 0xC0, 0x24, no_flags);\n+  evex_opcode_int24_ndd(dst->encoding(), src1->encoding(), src2->encoding(), imm8, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xA4, 0xC0, 0x24, no_flags);\n@@ -6839,1 +6828,1 @@\n-  evex_opcode_ndd_int16(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAD, 0xC0, no_flags);\n+  evex_opcode_int16_ndd(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAD, 0xC0, no_flags);\n@@ -6849,1 +6838,1 @@\n-  evex_opcode_ndd_and_int24(dst->encoding(), src1->encoding(), src2->encoding(), imm8, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAC, 0xC0, 0x2C, no_flags);\n+  evex_opcode_int24_ndd(dst->encoding(), src1->encoding(), src2->encoding(), imm8, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAC, 0xC0, 0x2C, no_flags);\n@@ -6859,1 +6848,1 @@\n-  evex_opcode_ndd_and_int24(dst->encoding(), src1->encoding(), src2->encoding(), imm8, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xA4, 0xC0, 0x24, no_flags, true);\n+  evex_opcode_int24_ndd(dst->encoding(), src1->encoding(), src2->encoding(), imm8, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xA4, 0xC0, 0x24, no_flags, true);\n@@ -6869,1 +6858,1 @@\n-  evex_opcode_ndd_and_int24(dst->encoding(), src1->encoding(), src2->encoding(), imm8, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAC, 0xC0, 0x2C, no_flags, true);\n+  evex_opcode_int24_ndd(dst->encoding(), src1->encoding(), src2->encoding(), imm8, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAC, 0xC0, 0x2C, no_flags, true);\n@@ -12969,2 +12958,2 @@\n-void Assembler::evex_imul_nf_and_int16(int dst_enc, int src_enc, int value, VexSimdPrefix pre, VexOpcode opc,\n-                                       InstructionAttr *attributes, bool no_flags, bool use_prefixq) {\n+void Assembler::evex_opcode_and_int16_nf(int dst_enc, int src_enc, int value, VexSimdPrefix pre, VexOpcode opc,\n+                                         InstructionAttr *attributes, bool no_flags, bool use_prefixq) {\n@@ -12987,2 +12976,21 @@\n-void Assembler::evex_opcode_ndd_and_int24(int dst_enc, int nds_enc, int src_enc, int8_t imm8, VexSimdPrefix pre, VexOpcode opc,\n-                                          InstructionAttr *attributes, int byte1, int byte2, int byte1_ndd, bool no_flags, bool use_prefixq, bool is_map1) {\n+void Assembler::evex_prefix_int8_operand_ndd(Register dst, Register src1, Address src2, VexSimdPrefix pre, VexOpcode opc,\n+                                             InstructionAttr *attributes, int byte1, bool use_prefixq, bool no_flags, bool is_map1) {\n+  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n+    if (use_prefixq) {\n+      emit_prefix_and_int8(get_prefixq(src2, dst, is_map1), byte1);\n+    }\n+    else {\n+      prefix(src2, dst, false, is_map1);\n+      emit_int8(byte1);\n+    }\n+  }\n+  else {\n+    attributes->set_is_evex_instruction();\n+    vex_prefix(src2, dst->encoding(), src1->encoding(), pre, opc, attributes, \/* nds_is_ndd *\/ true, no_flags);\n+    emit_int8(byte1);\n+  }\n+  emit_operand(src1, src2, 0);\n+}\n+\n+void Assembler::evex_opcode_int24_ndd(int dst_enc, int nds_enc, int src_enc, int8_t imm8, VexSimdPrefix pre, VexOpcode opc,\n+                                      InstructionAttr *attributes, int byte1, int byte2, int byte1_ndd, bool no_flags, bool use_prefixq, bool is_map1) {\n@@ -13004,1 +13012,1 @@\n-void Assembler::evex_opcode_ndd_int16(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n+void Assembler::evex_opcode_int16_ndd(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n@@ -13011,1 +13019,1 @@\n-void Assembler::evex_opcode_ndd_and_int16(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n+void Assembler::evex_opcode_and_int16_ndd(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n@@ -13021,0 +13029,3 @@\n+    if (pre == VEX_SIMD_66) {\n+      emit_int8(0x66);\n+    }\n@@ -13028,1 +13039,1 @@\n-                           InstructionAttr *attributes, bool no_flags, bool use_prefixq) {\n+                                          InstructionAttr *attributes, bool no_flags, bool use_prefixq) {\n@@ -13034,1 +13045,1 @@\n-                           InstructionAttr *attributes, bool no_flags, bool use_prefixq) {\n+                                          InstructionAttr *attributes, bool no_flags, bool use_prefixq) {\n@@ -13044,1 +13055,1 @@\n-                           InstructionAttr *attributes, bool no_flags) {\n+                                          InstructionAttr *attributes, bool no_flags) {\n@@ -13050,1 +13061,1 @@\n-                           InstructionAttr *attributes, bool no_flags) {\n+                                         InstructionAttr *attributes, bool no_flags) {\n@@ -13056,1 +13067,1 @@\n-  InstructionAttr *attributes, bool no_flags, int op1, int op2, Register dst, int32_t imm32, bool use_prefixq) {\n+                                                 InstructionAttr *attributes, bool no_flags, int op1, int op2, Register dst, int32_t imm32, bool use_prefixq) {\n@@ -14832,1 +14843,1 @@\n-  evex_opcode_ndd_and_int16(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, 0x40 | cc, 0xC0, false, true);\n+  evex_opcode_and_int16_ndd(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, 0x40 | cc, 0xC0, false, true);\n@@ -14843,3 +14854,0 @@\n-  if (dst->encoding() == src1->encoding()) {\n-    return cmovq(cc, dst, src2);\n-  }\n@@ -14849,3 +14857,1 @@\n-  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes);\n-  emit_int8((0x40 | cc));\n-  emit_operand(src1, src2, 0);\n+  evex_prefix_int8_operand_ndd(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, (0x40 | cc), true);\n@@ -15049,1 +15055,1 @@\n-  evex_opcode_ndd_and_int16(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAF, 0xC0, no_flags, true);\n+  evex_opcode_and_int16_ndd(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAF, 0xC0, no_flags, true);\n@@ -15105,1 +15111,1 @@\n-  evex_imul_nf_and_int16(dst->encoding(), src->encoding(), value, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags, true);\n+  evex_opcode_and_int16_nf(dst->encoding(), src->encoding(), value, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags, true);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":47,"deletions":41,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -809,1 +809,1 @@\n-  void evex_opcode_ndd_int16(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n+  void evex_opcode_int16_ndd(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n@@ -812,1 +812,1 @@\n-  void evex_opcode_ndd_and_int16(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n+  void evex_opcode_and_int16_ndd(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n@@ -815,2 +815,2 @@\n-  void evex_opcode_ndd_and_int24(int dst_enc, int nds_enc, int src_enc, int8_t imm8, VexSimdPrefix pre, VexOpcode opc,\n-                                 InstructionAttr *attributes, int byte1, int byte2, int byte1_ndd, bool no_flags, bool use_prefixq = false, bool is_map1 = true);\n+  void evex_opcode_int24_ndd(int dst_enc, int nds_enc, int src_enc, int8_t imm8, VexSimdPrefix pre, VexOpcode opc,\n+                             InstructionAttr *attributes, int byte1, int byte2, int byte1_ndd, bool no_flags, bool use_prefixq = false, bool is_map1 = true);\n@@ -818,2 +818,5 @@\n-  void evex_imul_nf_and_int16(int dst_enc, int src_enc, int value, VexSimdPrefix pre, VexOpcode opc,\n-                              InstructionAttr *attributes, bool no_flags, bool use_prefixq = false);\n+  void evex_prefix_int8_operand_ndd(Register dst, Register src1, Address src2, VexSimdPrefix pre, VexOpcode opc,\n+                                    InstructionAttr *attributes, int byte1, bool use_prefixq = false, bool no_flags = false, bool is_map1 = true);\n+\n+  void evex_opcode_and_int16_nf(int dst_enc, int src_enc, int value, VexSimdPrefix pre, VexOpcode opc,\n+                                InstructionAttr *attributes, bool no_flags, bool use_prefixq = false);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -8582,1 +8582,0 @@\n-  predicate(!UseAPX);\n@@ -8594,14 +8593,0 @@\n-instruct mulI_rReg_mem_imm(rRegI dst, memory src1, immI src2, rFlagsReg cr)\n-%{\n-  predicate(UseAPX);\n-  match(Set dst (MulI (LoadI src1) src2));\n-  effect(KILL cr);\n-\n-  ins_cost(300);\n-  format %{ \"eimull   $dst, $src1, $src2\\t# int ndd\" %}\n-  ins_encode %{\n-    __ eimull($dst$$Register, $src1$$Address, $src2$$constant, false);\n-  %}\n-  ins_pipe(ialu_reg_mem_alu0);\n-%}\n-\n@@ -8648,1 +8633,0 @@\n-  predicate(!UseAPX);\n@@ -8660,14 +8644,0 @@\n-instruct mulL_rReg_rReg_imm_ndd(rRegL dst, rRegL src1, immL32 src2, rFlagsReg cr)\n-%{\n-  predicate(UseAPX);\n-  match(Set dst (MulL src1 src2));\n-  effect(KILL cr);\n-\n-  ins_cost(300);\n-  format %{ \"eimulq   $dst, $src1, $src2\\t# long ndd\" %}\n-  ins_encode %{\n-    __ eimulq($dst$$Register, $src1$$Register, $src2$$constant, false);\n-  %}\n-  ins_pipe(ialu_reg_reg_alu0);\n-%}\n-\n@@ -8704,1 +8674,0 @@\n-  predicate(!UseAPX);\n@@ -8716,14 +8685,0 @@\n-instruct mulL_rReg_mem_imm_ndd(rRegL dst, memory src1, immL32 src2, rFlagsReg cr)\n-%{\n-  predicate(UseAPX);\n-  match(Set dst (MulL (LoadL src1) src2));\n-  effect(KILL cr);\n-\n-  ins_cost(300);\n-  format %{ \"eimulq   $dst, $src1, $src2\\t# long ndd\" %}\n-  ins_encode %{\n-    __ eimulq($dst$$Register, $src1$$Address, $src2$$constant, false);\n-  %}\n-  ins_pipe(ialu_reg_mem_alu0);\n-%}\n-\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":0,"deletions":45,"binary":false,"changes":45,"status":"modified"}]}