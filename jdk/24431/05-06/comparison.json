{"files":[{"patch":"@@ -7045,3 +7045,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n-    return shldl(dst, src2);\n-  }\n@@ -7051,2 +7048,1 @@\n-  int encode = evex_prefix_and_encode_ndd(src2->encoding(), dst->encoding(), src1->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int16(0xA5, (0xC0 | encode));\n+  evex_opcode_prefix_and_encode_ndd_and_int16(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xA5, 0xC0, no_flags);\n@@ -7061,3 +7057,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n-    return shldl(dst, src2, imm8);\n-  }\n@@ -7065,4 +7058,1 @@\n-  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n-  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n-  int encode = evex_prefix_and_encode_ndd(src2->encoding(), dst->encoding(), src1->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int24(0x24, (0xC0 | encode), imm8);\n+  evex_opcode_prefix_and_encode_ndd_and_int24(dst->encoding(), src1->encoding(), src2->encoding(), imm8, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xA4, 0xC0, 0x24, no_flags);\n@@ -7077,3 +7067,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n-    return shrdl(dst, src2);\n-  }\n@@ -7081,4 +7068,1 @@\n-  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n-  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n-  int encode = evex_prefix_and_encode_ndd(src2->encoding(), dst->encoding(), src1->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int16(0xAD, (0xC0 | encode));\n+  evex_opcode_prefix_and_encode_ndd_and_int16(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAD, 0xC0, no_flags);\n@@ -7093,3 +7077,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n-    return shrdl(dst, src2, imm8);\n-  }\n@@ -7097,4 +7078,1 @@\n-  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n-  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n-  int encode = evex_prefix_and_encode_ndd(src2->encoding(), dst->encoding(), src1->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int24(0x2C, (0xC0 | encode), imm8);\n+  evex_opcode_prefix_and_encode_ndd_and_int24(dst->encoding(), src1->encoding(), src2->encoding(), imm8, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAC, 0xC0, 0x2C, no_flags);\n@@ -7110,3 +7088,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n-    return shldq(dst, src2, imm8);\n-  }\n@@ -7114,4 +7089,1 @@\n-  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n-  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n-  int encode = evex_prefix_and_encode_ndd(src2->encoding(), dst->encoding(), src1->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags, true);\n-  emit_int24(0x24, (0xC0 | encode), imm8);\n+  evex_opcode_prefix_and_encode_ndd_and_int24(dst->encoding(), src1->encoding(), src2->encoding(), imm8, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xA4, 0xC0, 0x24, no_flags, true);\n@@ -7126,3 +7098,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n-    return shrdq(dst, src2, imm8);\n-  }\n@@ -7130,4 +7099,1 @@\n-  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n-  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n-  int encode = evex_prefix_and_encode_ndd(src2->encoding(), dst->encoding(), src1->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags, true);\n-  emit_int24(0x2C, (0xC0 | encode), imm8);\n+  evex_opcode_prefix_and_encode_ndd_and_int24(dst->encoding(), src1->encoding(), src2->encoding(), imm8, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAC, 0xC0, 0x2C, no_flags, true);\n@@ -13734,0 +13700,22 @@\n+void Assembler::evex_opcode_prefix_and_encode_ndd_and_int16(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n+  InstructionAttr *attributes, int byte1, int byte2, bool no_flags, bool use_prefixq) {\n+  if (is_demotable(no_flags, dst_enc, nds_enc)) {\n+    int encode = use_prefixq ? prefixq_and_encode(src_enc, dst_enc, true \/* is_map1 *\/) : prefix_and_encode(src_enc, dst_enc, true \/* is_map1 *\/);\n+    return emit_opcode_prefix_and_encoding((unsigned char)byte1, byte2, encode);\n+  }\n+  attributes->set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(src_enc, dst_enc, nds_enc, pre, opc, attributes, \/* src_is_gpr *\/ true, \/* nds_is_ndd *\/ true, no_flags);\n+  emit_int16(byte1, (byte2 | encode));\n+}\n+\n+void Assembler::evex_opcode_prefix_and_encode_ndd_and_int24(int dst_enc, int nds_enc, int src_enc, int8_t imm8, VexSimdPrefix pre, VexOpcode opc,\n+  InstructionAttr *attributes, int byte1, int byte2, int byte1_ndd, bool no_flags, bool use_prefixq) {\n+  if (is_demotable(no_flags, dst_enc, nds_enc)) {\n+    int encode = use_prefixq ? prefixq_and_encode(src_enc, dst_enc, true \/* is_map1 *\/) : prefix_and_encode(src_enc, dst_enc, true \/* is_map1 *\/);\n+    return emit_opcode_prefix_and_encoding((unsigned char)byte1, byte2, encode, imm8);\n+  }\n+  attributes->set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(src_enc, dst_enc, nds_enc, pre, opc, attributes, \/* src_is_gpr *\/ true, \/* nds_is_ndd *\/ true, no_flags);\n+  emit_int24(byte1_ndd, (byte2 | encode), imm8);\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":28,"deletions":40,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -825,0 +825,6 @@\n+  void evex_opcode_prefix_and_encode_ndd_and_int16(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n+                                 InstructionAttr *attributes, int byte1, int byte2, bool no_flags, bool use_prefixq = false);\n+\n+  void evex_opcode_prefix_and_encode_ndd_and_int24(int dst_enc, int nds_enc, int src_enc, int8_t imm8, VexSimdPrefix pre, VexOpcode opc,\n+                                 InstructionAttr *attributes, int byte1, int byte2, int byte1_ndd, bool no_flags, bool use_prefixq = false);\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}