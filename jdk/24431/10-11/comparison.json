{"files":[{"patch":"@@ -2532,1 +2532,1 @@\n-  evex_imul_ndd_and_int16(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAF, 0xC0, no_flags);\n+  evex_opcode_ndd_and_int16(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAF, 0xC0, no_flags);\n@@ -12970,11 +12970,0 @@\n-void Assembler::evex_imul_ndd_and_int16(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n-  InstructionAttr *attributes, int byte1, int byte2, bool no_flags, bool use_prefixq) {\n-  if (is_demotable(no_flags, dst_enc, nds_enc)) {\n-    int encode = use_prefixq ? prefixq_and_encode(dst_enc, src_enc, true \/* is_map1 *\/) : prefix_and_encode(dst_enc, src_enc, true \/* is_map1 *\/);\n-    return emit_opcode_prefix_and_encoding((unsigned char)byte1, byte2, encode);\n-  }\n-  attributes->set_is_evex_instruction();\n-  int encode = vex_prefix_and_encode(nds_enc, dst_enc, src_enc, pre, opc, attributes, \/* src_is_gpr *\/ true, \/* nds_is_ndd *\/ true, no_flags);\n-  emit_int16(byte1, (byte2 | encode));\n-}\n-\n@@ -12982,1 +12971,1 @@\n-  InstructionAttr *attributes, bool no_flags, bool use_prefixq) {\n+                                       InstructionAttr *attributes, bool no_flags, bool use_prefixq) {\n@@ -12999,4 +12988,12 @@\n-void Assembler::evex_shift_ndd_and_int16(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n-  InstructionAttr *attributes, int byte1, int byte2, bool no_flags, bool use_prefixq) {\n-  if (is_demotable(no_flags, dst_enc, nds_enc)) {\n-    int encode = use_prefixq ? prefixq_and_encode(src_enc, dst_enc, true \/* is_map1 *\/) : prefix_and_encode(src_enc, dst_enc, true \/* is_map1 *\/);\n+void Assembler::evex_shift_ndd_and_int24(int dst_enc, int nds_enc, int src_enc, int8_t imm8, VexSimdPrefix pre, VexOpcode opc,\n+                                         InstructionAttr *attributes, int byte1, int byte2, int byte1_ndd, bool no_flags, bool use_prefixq, bool is_map1) {\n+  bool demote = is_demotable(no_flags, dst_enc, nds_enc);\n+  int encode = evex_prefix_and_encode_ndd(demote, src_enc, dst_enc, nds_enc, pre, opc, attributes, no_flags, use_prefixq, is_map1);\n+  if (demote) {\n+    return emit_opcode_prefix_and_encoding((unsigned char)byte1, byte2, encode, imm8);\n+  }\n+  emit_int24(byte1_ndd, (byte2 | encode), imm8);\n+}\n+\n+void Assembler::emit_demotable_int16(bool demote, int byte1, int byte2, int encode) {\n+  if (demote) {\n@@ -13005,2 +13002,0 @@\n-  attributes->set_is_evex_instruction();\n-  int encode = vex_prefix_and_encode(src_enc, dst_enc, nds_enc, pre, opc, attributes, \/* src_is_gpr *\/ true, \/* nds_is_ndd *\/ true, no_flags);\n@@ -13010,5 +13005,18 @@\n-void Assembler::evex_shift_ndd_and_int24(int dst_enc, int nds_enc, int src_enc, int8_t imm8, VexSimdPrefix pre, VexOpcode opc,\n-  InstructionAttr *attributes, int byte1, int byte2, int byte1_ndd, bool no_flags, bool use_prefixq) {\n-  if (is_demotable(no_flags, dst_enc, nds_enc)) {\n-    int encode = use_prefixq ? prefixq_and_encode(src_enc, dst_enc, true \/* is_map1 *\/) : prefix_and_encode(src_enc, dst_enc, true \/* is_map1 *\/);\n-    return emit_opcode_prefix_and_encoding((unsigned char)byte1, byte2, encode, imm8);\n+void Assembler::evex_shift_ndd_and_int16(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n+                                         InstructionAttr *attributes, int byte1, int byte2, bool no_flags, bool use_prefixq, bool is_map1) {\n+  bool demote = is_demotable(no_flags, dst_enc, nds_enc);\n+  int encode = evex_prefix_and_encode_ndd(demote, src_enc, dst_enc, nds_enc, pre, opc, attributes, no_flags, use_prefixq, is_map1);\n+  emit_demotable_int16(demote, byte1, byte2, encode);\n+}\n+\n+void Assembler::evex_opcode_ndd_and_int16(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n+                                          InstructionAttr *attributes, int byte1, int byte2, bool no_flags, bool use_prefixq, bool is_map1) {\n+  bool demote = is_demotable(no_flags, dst_enc, nds_enc);\n+  int encode = evex_prefix_and_encode_ndd(demote, nds_enc, dst_enc, src_enc, pre, opc, attributes, no_flags, use_prefixq, is_map1);\n+  emit_demotable_int16(demote, byte1, byte2, encode);\n+}\n+\n+int Assembler::evex_prefix_and_encode_ndd(bool demote, int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n+                                          InstructionAttr *attributes, bool no_flags, bool use_prefixq, bool is_map1) {\n+  if (demote) {\n+    return use_prefixq ? prefixq_and_encode(dst_enc, src_enc, is_map1) : prefix_and_encode(dst_enc, src_enc, is_map1);\n@@ -13017,2 +13025,1 @@\n-  int encode = vex_prefix_and_encode(src_enc, dst_enc, nds_enc, pre, opc, attributes, \/* src_is_gpr *\/ true, \/* nds_is_ndd *\/ true, no_flags);\n-  emit_int24(byte1_ndd, (byte2 | encode), imm8);\n+  return vex_prefix_and_encode(dst_enc, nds_enc, src_enc, pre, opc, attributes, \/* src_is_gpr *\/ true, \/* nds_is_ndd *\/ true, no_flags);\n@@ -13023,6 +13030,2 @@\n-  \/\/ Demote RegRegReg instructions\n-  if (is_demotable(no_flags, dst_enc, nds_enc)) {\n-    return use_prefixq ? prefixq_and_encode(dst_enc, src_enc) : prefix_and_encode(dst_enc, src_enc);\n-  }\n-  attributes->set_is_evex_instruction();\n-  return vex_prefix_and_encode(dst_enc, nds_enc, src_enc, pre, opc, attributes, \/* src_is_gpr *\/ true, \/* nds_is_ndd *\/ true, no_flags);\n+  bool demote = is_demotable(no_flags, dst_enc, nds_enc);\n+  return evex_prefix_and_encode_ndd(demote, dst_enc, nds_enc, src_enc, pre, opc, attributes, no_flags, use_prefixq);\n@@ -13033,1 +13036,1 @@\n-  \/\/ Demote RegReg and RegRegImm instructions\n+  \/\/Demote RegReg and RegRegImm instructions\n@@ -14829,3 +14832,0 @@\n-  if (dst->encoding() == src1->encoding()) {\n-    return cmovq(cc, dst, src2);\n-  }\n@@ -14833,2 +14833,1 @@\n-  int encode = evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, false, true);\n-  emit_int16((0x40 | cc), (0xC0 | encode));\n+  evex_opcode_ndd_and_int16(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, 0x40 | cc, 0xC0, false, true);\n@@ -15051,1 +15050,1 @@\n-  evex_imul_ndd_and_int16(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAF, 0xC0, no_flags, true);\n+  evex_opcode_ndd_and_int16(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAF, 0xC0, no_flags, true);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":38,"deletions":39,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -791,0 +791,3 @@\n+  int  evex_prefix_and_encode_ndd(bool demote, int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n+                                  InstructionAttr *attributes, bool no_flags, bool use_prefixq, bool is_map1 = false);\n+\n@@ -807,1 +810,1 @@\n-                                InstructionAttr *attributes, int byte1, int byte2, bool no_flags, bool use_prefixq = false);\n+                                InstructionAttr *attributes, int byte1, int byte2, bool no_flags, bool use_prefixq = false, bool is_map1 = true);\n@@ -810,1 +813,1 @@\n-                                InstructionAttr *attributes, int byte1, int byte2, int byte1_ndd, bool no_flags, bool use_prefixq = false);\n+                                InstructionAttr *attributes, int byte1, int byte2, int byte1_ndd, bool no_flags, bool use_prefixq = false, bool is_map1 = true);\n@@ -812,2 +815,2 @@\n-  void evex_imul_ndd_and_int16(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n-                               InstructionAttr *attributes, int byte1, int byte2, bool no_flags, bool use_prefixq = false);\n+  void evex_opcode_ndd_and_int16(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n+                               InstructionAttr *attributes, int byte1, int byte2, bool no_flags, bool use_prefixq = false, bool is_map1 = true);\n@@ -826,0 +829,1 @@\n+  void emit_demotable_int16(bool demote, int byte1, int byte2, int encode);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"}]}