{"files":[{"patch":"@@ -309,1 +309,1 @@\n-void Assembler::emit_arith(int op1, int op2, Register dst, int32_t imm32) {\n+void Assembler::emit_arith(int op1, int op2, Register dst, int32_t imm32, bool demote) {\n@@ -316,1 +316,1 @@\n-  } else if (dst == rax) {\n+  } else if (demote && dst == rax) {\n@@ -335,15 +335,0 @@\n-void Assembler::emit_arith_ndd(int op1, int op2, Register dst, int32_t imm32) {\n-  assert(isByte(op1) && isByte(op2), \"wrong opcode\");\n-  assert(op1 == 0x81, \"Unexpected opcode\");\n-  \/\/ This code cache friendly optimization saves 3 bytes per encoding, which offsets the EVEX encoding penalty.\n-  if (is8bit(imm32)) {\n-    emit_int24(op1 | 0x02,        \/\/ set sign bit\n-               op2 | encode(dst),\n-               imm32 & 0xFF);\n-  }\n-  else {\n-    emit_int16(op1, (op2 | encode(dst)));\n-    emit_int32(imm32);\n-  }\n-}\n-\n@@ -1478,2 +1463,1 @@\n-  (void) evex_prefix_and_encode_ndd(dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_arith_ndd(0x81, 0xC0, src, imm32);\n+  evex_prefix_and_encode_arith_ndd(dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags, 0x81, 0xC0, src, imm32);\n@@ -1708,2 +1692,1 @@\n-  (void) evex_prefix_and_encode_ndd(dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_arith_ndd(0x81, 0xE0, src, imm32);\n+  evex_prefix_and_encode_arith_ndd(dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags, 0x81, 0xE0, src, imm32);\n@@ -4590,2 +4573,1 @@\n-  evex_prefix_and_encode_ndd(dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_arith_ndd(0x81, 0xC8, src, imm32);\n+  evex_prefix_and_encode_arith_ndd(dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags, 0x81, 0xC8, src, imm32);\n@@ -7207,2 +7189,1 @@\n-  (void) evex_prefix_and_encode_ndd(dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_arith_ndd(0x81, 0xE8, src, imm32);\n+  evex_prefix_and_encode_arith_ndd(dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags, 0x81, 0xE8, src, imm32);\n@@ -7544,2 +7525,1 @@\n-  evex_prefix_and_encode_ndd(dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_arith_ndd(0x81, 0xF0, src, imm32);\n+  evex_prefix_and_encode_arith_ndd(dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags, 0x81, 0xF0, src, imm32);\n@@ -13768,0 +13748,13 @@\n+void Assembler::evex_prefix_and_encode_arith_ndd(int dst_enc, int nds_enc, VexSimdPrefix pre, VexOpcode opc,\n+  InstructionAttr *attributes, bool no_flags, int op1, int op2, Register dst, int32_t imm32, bool use_prefixq) {\n+  bool demote = is_demotable(no_flags, dst_enc, nds_enc);\n+  if (demote) {\n+    use_prefixq ? prefixq_and_encode(dst_enc) : prefix_and_encode(dst_enc);\n+  }\n+  else {\n+    attributes->set_is_evex_instruction();\n+    vex_prefix_and_encode(0, dst_enc, nds_enc, pre, opc, attributes, \/* src_is_gpr *\/ true, \/* nds_is_ndd *\/ true, no_flags);\n+  }\n+  emit_arith(op1, op2, dst, imm32, demote);\n+}\n+\n@@ -15286,2 +15279,1 @@\n-  (void) evex_prefix_and_encode_ndd(dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags, true);\n-  emit_arith_ndd(0x81, 0xC0, src, imm32);\n+  evex_prefix_and_encode_arith_ndd(dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags, 0x81, 0xC0, src, imm32, true);\n@@ -15385,2 +15377,1 @@\n-  evex_prefix_and_encode_ndd(dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags, true);\n-  emit_arith_ndd(0x81, 0xE0, src, imm32);\n+  evex_prefix_and_encode_arith_ndd(dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags, 0x81, 0xE0, src, imm32, true);\n@@ -16265,2 +16256,1 @@\n-  evex_prefix_and_encode_ndd(dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags, true);\n-  emit_arith_ndd(0x81, 0xC8, src, imm32);\n+  evex_prefix_and_encode_arith_ndd(dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags, 0x81, 0xC8, src, imm32, true);\n@@ -16949,2 +16939,1 @@\n-  (void) evex_prefix_and_encode_ndd(dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags, true);\n-  emit_arith_ndd(0x81, 0xE8, src, imm32);\n+  evex_prefix_and_encode_arith_ndd(dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags, 0x81, 0xE8, src, imm32, true);\n@@ -17072,2 +17061,1 @@\n-  evex_prefix_and_encode_ndd(dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags, true);\n-  emit_arith_ndd(0x81, 0xF0, src, imm32);\n+  evex_prefix_and_encode_arith_ndd(dst->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags, 0x81, 0xF0, src, imm32, true);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":25,"deletions":37,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -825,0 +825,3 @@\n+  void evex_prefix_and_encode_arith_ndd(int dst_enc, int nds_enc, VexSimdPrefix pre, VexOpcode opc,\n+                                        InstructionAttr *attributes, bool no_flags, int op1, int op2, Register dst, int32_t imm32, bool use_prefixq = false);\n+\n@@ -847,2 +850,1 @@\n-  void emit_arith(int op1, int op2, Register dst, int32_t imm32);\n-  void emit_arith_ndd(int op1, int op2, Register dst, int32_t imm32);\n+  void emit_arith(int op1, int op2, Register dst, int32_t imm32, bool demote = true);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}