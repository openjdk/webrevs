{"files":[{"patch":"@@ -2631,3 +2631,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n-    return imull(dst, src2);\n-  }\n@@ -2635,2 +2632,1 @@\n-  int encode = evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int16((unsigned char)0xAF, (0xC0 | encode));\n+  evex_imul_ndd_and_int16(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAF, 0xC0, no_flags);\n@@ -2680,3 +2676,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src->encoding())) {\n-    return imull(dst, src, value);\n-  }\n@@ -2684,7 +2677,1 @@\n-  int encode = evex_prefix_and_encode_nf(dst->encoding(), 0, src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  if (is8bit(value)) {\n-    emit_int24(0x6B, (0xC0 | encode), value & 0xFF);\n-  } else {\n-    emit_int16(0x69, (0xC0 | encode));\n-    emit_int32(value);\n-  }\n+  evex_imul_nf_and_int16(dst->encoding(), src->encoding(), value, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n@@ -7046,3 +7033,1 @@\n-  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n-  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n-  evex_opcode_prefix_and_encode_ndd_and_int16(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xA5, 0xC0, no_flags);\n+  evex_shift_ndd_and_int16(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xA5, 0xC0, no_flags);\n@@ -7058,1 +7043,1 @@\n-  evex_opcode_prefix_and_encode_ndd_and_int24(dst->encoding(), src1->encoding(), src2->encoding(), imm8, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xA4, 0xC0, 0x24, no_flags);\n+  evex_shift_ndd_and_int24(dst->encoding(), src1->encoding(), src2->encoding(), imm8, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xA4, 0xC0, 0x24, no_flags);\n@@ -7068,1 +7053,1 @@\n-  evex_opcode_prefix_and_encode_ndd_and_int16(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAD, 0xC0, no_flags);\n+  evex_shift_ndd_and_int16(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAD, 0xC0, no_flags);\n@@ -7078,1 +7063,1 @@\n-  evex_opcode_prefix_and_encode_ndd_and_int24(dst->encoding(), src1->encoding(), src2->encoding(), imm8, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAC, 0xC0, 0x2C, no_flags);\n+  evex_shift_ndd_and_int24(dst->encoding(), src1->encoding(), src2->encoding(), imm8, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAC, 0xC0, 0x2C, no_flags);\n@@ -7089,1 +7074,1 @@\n-  evex_opcode_prefix_and_encode_ndd_and_int24(dst->encoding(), src1->encoding(), src2->encoding(), imm8, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xA4, 0xC0, 0x24, no_flags, true);\n+  evex_shift_ndd_and_int24(dst->encoding(), src1->encoding(), src2->encoding(), imm8, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xA4, 0xC0, 0x24, no_flags, true);\n@@ -7099,1 +7084,1 @@\n-  evex_opcode_prefix_and_encode_ndd_and_int24(dst->encoding(), src1->encoding(), src2->encoding(), imm8, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAC, 0xC0, 0x2C, no_flags, true);\n+  evex_shift_ndd_and_int24(dst->encoding(), src1->encoding(), src2->encoding(), imm8, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAC, 0xC0, 0x2C, no_flags, true);\n@@ -13700,1 +13685,30 @@\n-void Assembler::evex_opcode_prefix_and_encode_ndd_and_int16(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n+void Assembler::evex_imul_ndd_and_int16(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n+  InstructionAttr *attributes, int byte1, int byte2, bool no_flags, bool use_prefixq) {\n+  if (is_demotable(no_flags, dst_enc, nds_enc)) {\n+    int encode = use_prefixq ? prefixq_and_encode(dst_enc, src_enc, true \/* is_map1 *\/) : prefix_and_encode(dst_enc, src_enc, true \/* is_map1 *\/);\n+    return emit_opcode_prefix_and_encoding((unsigned char)byte1, byte2, encode);\n+  }\n+  attributes->set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(nds_enc, dst_enc, src_enc, pre, opc, attributes, \/* src_is_gpr *\/ true, \/* nds_is_ndd *\/ true, no_flags);\n+  emit_int16(byte1, (byte2 | encode));\n+}\n+\n+void Assembler::evex_imul_nf_and_int16(int dst_enc, int src_enc, int value, VexSimdPrefix pre, VexOpcode opc,\n+  InstructionAttr *attributes, bool no_flags, bool use_prefixq) {\n+  int encode;\n+  if (is_demotable(no_flags, dst_enc, src_enc)) {\n+    encode = use_prefixq ? prefixq_and_encode(dst_enc, src_enc) : prefix_and_encode(dst_enc, src_enc);\n+  }\n+  else {\n+    attributes->set_is_evex_instruction();\n+    encode = vex_prefix_and_encode(dst_enc, 0, src_enc, pre, opc, attributes, \/* src_is_gpr *\/ true, \/* nds_is_ndd *\/ false, no_flags);\n+  }\n+  if (is8bit(value)) {\n+    emit_int24(0x6B, (0xC0 | encode), value & 0xFF);\n+  } else {\n+    emit_int16(0x69, (0xC0 | encode));\n+    emit_int32(value);\n+  }\n+}\n+\n+void Assembler::evex_shift_ndd_and_int16(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n@@ -13711,1 +13725,1 @@\n-void Assembler::evex_opcode_prefix_and_encode_ndd_and_int24(int dst_enc, int nds_enc, int src_enc, int8_t imm8, VexSimdPrefix pre, VexOpcode opc,\n+void Assembler::evex_shift_ndd_and_int24(int dst_enc, int nds_enc, int src_enc, int8_t imm8, VexSimdPrefix pre, VexOpcode opc,\n@@ -15776,3 +15790,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n-    return imulq(dst, src2);\n-  }\n@@ -15780,2 +15791,1 @@\n-  int encode = evex_prefix_and_encode_ndd(src1->encoding(), dst->encoding(), src2->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags, true);\n-  emit_int16((unsigned char)0xAF, (0xC0 | encode));\n+  evex_imul_ndd_and_int16(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, 0xAF, 0xC0, no_flags, true);\n@@ -15836,3 +15846,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src->encoding())) {\n-    return imulq(dst, src, value);\n-  }\n@@ -15840,7 +15847,1 @@\n-  int encode = evex_prefix_and_encode_nf(dst->encoding(), 0, src->encoding(), VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  if (is8bit(value)) {\n-    emit_int24(0x6B, (0xC0 | encode), (value & 0xFF));\n-  } else {\n-    emit_int16(0x69, (0xC0 | encode));\n-    emit_int32(value);\n-  }\n+  evex_imul_nf_and_int16(dst->encoding(), src->encoding(), value, VEX_SIMD_NONE, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags, true);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":41,"deletions":40,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -825,2 +825,2 @@\n-  void evex_opcode_prefix_and_encode_ndd_and_int16(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n-                                 InstructionAttr *attributes, int byte1, int byte2, bool no_flags, bool use_prefixq = false);\n+  void evex_shift_ndd_and_int16(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n+                                InstructionAttr *attributes, int byte1, int byte2, bool no_flags, bool use_prefixq = false);\n@@ -828,2 +828,8 @@\n-  void evex_opcode_prefix_and_encode_ndd_and_int24(int dst_enc, int nds_enc, int src_enc, int8_t imm8, VexSimdPrefix pre, VexOpcode opc,\n-                                 InstructionAttr *attributes, int byte1, int byte2, int byte1_ndd, bool no_flags, bool use_prefixq = false);\n+  void evex_shift_ndd_and_int24(int dst_enc, int nds_enc, int src_enc, int8_t imm8, VexSimdPrefix pre, VexOpcode opc,\n+                                InstructionAttr *attributes, int byte1, int byte2, int byte1_ndd, bool no_flags, bool use_prefixq = false);\n+\n+  void evex_imul_ndd_and_int16(int dst_enc, int nds_enc, int src_enc, VexSimdPrefix pre, VexOpcode opc,\n+                               InstructionAttr *attributes, int byte1, int byte2, bool no_flags, bool use_prefixq = false);\n+\n+  void evex_imul_nf_and_int16(int dst_enc, int src_enc, int value, VexSimdPrefix pre, VexOpcode opc,\n+                                InstructionAttr *attributes, bool no_flags, bool use_prefixq = false);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"}]}