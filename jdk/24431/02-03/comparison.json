{"files":[{"patch":"@@ -1490,3 +1490,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n-    return addl(dst, src2);\n-  }\n@@ -1494,5 +1491,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n-  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int8(0x03);\n-  emit_operand(src1, src2, 0);\n+  evex_prefix_ndd_and_int8(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C, 0x03, no_flags);\n@@ -1734,3 +1727,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n-    return andl(dst, src2);\n-  }\n@@ -1738,5 +1728,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n-  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int8(0x23);\n-  emit_operand(src1, src2, 0);\n+  evex_prefix_ndd_and_int8(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C, 0x23, no_flags);\n@@ -2715,3 +2701,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n-    return imull(dst, src2);\n-  }\n@@ -2719,5 +2702,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n-  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int8((unsigned char)0xAF);\n-  emit_operand(src1, src2, 0);\n+  evex_prefix_ndd_and_int8(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C, (unsigned char)0xAF, no_flags, true \/* is_map1 *\/);\n@@ -4636,3 +4615,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n-    return orl(dst, src2);\n-  }\n@@ -4640,5 +4616,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n-  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int8(0x0B);\n-  emit_operand(src1, src2, 0);\n+  evex_prefix_ndd_and_int8(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C, 0x0B, no_flags);\n@@ -7308,3 +7280,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n-    return subl(dst, src2);\n-  }\n@@ -7312,5 +7281,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n-  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int8(0x2B);\n-  emit_operand(src1, src2, 0);\n+  evex_prefix_ndd_and_int8(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C, 0x2B, no_flags);\n@@ -7640,3 +7605,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n-    return xorl(dst, src2);\n-  }\n@@ -7644,5 +7606,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n-  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int8(0x33);\n-  emit_operand(src1, src2, 0);\n+  evex_prefix_ndd_and_int8(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C, 0x33, no_flags);\n@@ -13704,0 +13662,27 @@\n+void Assembler::evex_prefix_ndd_and_int8_common(Register dst, Register src1, Address src2, VexSimdPrefix pre, VexOpcode opc, int b1, bool no_flags, int input_size_in_bits, bool vex_w) {\n+  InstructionAttr attributes(AVX_128bit, vex_w, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, input_size_in_bits);\n+  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), pre, opc, &attributes, no_flags);\n+  emit_int8(b1);\n+  emit_operand(src1, src2, 0);\n+}\n+\n+void Assembler::evex_prefix_ndd_and_int8(Register dst, Register src1, Address src2, VexSimdPrefix pre, VexOpcode opc, int b1, bool no_flags, bool is_map1) {\n+  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n+    prefix(src2, dst, false, is_map1);\n+    emit_int8(b1);\n+    emit_operand(dst, src2, 0);\n+    return;\n+  }\n+  evex_prefix_ndd_and_int8_common(dst, src1, src2, pre, opc, b1, no_flags, EVEX_32bit, \/* vex_w *\/ false);\n+}\n+\n+void Assembler::evex_prefixq_ndd_and_int8(Register dst, Register src1, Address src2, VexSimdPrefix pre, VexOpcode opc, int b1, bool no_flags, bool is_map1) {\n+  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n+    emit_prefix_and_int8(get_prefixq(src2, dst, is_map1), b1);\n+    emit_operand(dst, src2, 0);\n+    return;\n+  }\n+  evex_prefix_ndd_and_int8_common(dst, src1, src2, pre, opc, b1, no_flags, EVEX_64bit, \/* vex_w *\/ true);\n+}\n+\n@@ -15328,3 +15313,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n-    return addq(dst, src2);\n-  }\n@@ -15332,5 +15314,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n-  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int8(0x03);\n-  emit_operand(src1, src2, 0);\n+  evex_prefixq_ndd_and_int8(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C, 0x03, no_flags);\n@@ -15434,3 +15412,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n-    return andq(dst, src2);\n-  }\n@@ -15438,5 +15413,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n-  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int8(0x23);\n-  emit_operand(src1, src2, 0);\n+  evex_prefixq_ndd_and_int8(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C, 0x23, no_flags);\n@@ -15926,3 +15897,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n-    return imulq(dst, src2);\n-  }\n@@ -15930,5 +15898,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_32bit);\n-  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int8((unsigned char)0xAF);\n-  emit_operand(src1, src2, 0);\n+  evex_prefixq_ndd_and_int8(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C, (unsigned char)0xAF, no_flags, true \/* is_map1 *\/);\n@@ -16352,3 +16316,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n-    return orq(dst, src2);\n-  }\n@@ -16356,5 +16317,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n-  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int8(0x0B);\n-  emit_operand(src1, src2, 0);\n+  evex_prefixq_ndd_and_int8(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C, 0x0B, no_flags);\n@@ -17044,3 +17001,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n-    return subq(dst, src2);\n-  }\n@@ -17048,5 +17002,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n-  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int8(0x2B);\n-  emit_operand(src1, src2, 0);\n+  evex_prefixq_ndd_and_int8(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C, 0x2B, no_flags);\n@@ -17140,3 +17090,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n-    return xorq(dst, src2);\n-  }\n@@ -17144,5 +17091,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_64bit);\n-  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int8(0x33);\n-  emit_operand(src1, src2, 0);\n+  evex_prefixq_ndd_and_int8(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C, 0x33, no_flags);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":39,"deletions":96,"binary":false,"changes":135,"status":"modified"},{"patch":"@@ -800,0 +800,9 @@\n+  void evex_prefix_ndd_and_int8_common(Register dst, Register src1, Address src2, VexSimdPrefix pre, VexOpcode opc,\n+                       int b1, bool no_flags, int input_size_in_bits, bool vex_w);\n+\n+  void evex_prefix_ndd_and_int8(Register dst, Register src1, Address src2, VexSimdPrefix pre, VexOpcode opc,\n+                       int b1, bool no_flags = false, bool is_map1 = false);\n+\n+  void evex_prefixq_ndd_and_int8(Register dst, Register src1, Address src2, VexSimdPrefix pre, VexOpcode opc,\n+                       int b1, bool no_flags = false, bool is_map1 = false);\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}