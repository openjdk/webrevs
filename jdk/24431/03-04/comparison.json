{"files":[{"patch":"@@ -7646,3 +7646,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n-    return xorb(dst, src2);\n-  }\n@@ -7650,5 +7647,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_8bit);\n-  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int8(0x32);\n-  emit_operand(src1, src2, 0);\n+  evex_prefix_ndd_and_int8(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C, 0x32, no_flags, false \/* is_map1 *\/, EVEX_8bit);\n@@ -7682,3 +7675,0 @@\n-  if (is_demotable(no_flags, dst->encoding(), src1->encoding())) {\n-    return xorw(dst, src2);\n-  }\n@@ -7686,7 +7676,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, \/* input_size_in_bits *\/ EVEX_16bit);\n-  \/\/ NDD shares its encoding bits with NDS bits for regular EVEX instruction.\n-  \/\/ Therefore, DST is passed as the second argument to minimize changes in the leaf level routine.\n-  evex_prefix_ndd(src2, dst->encoding(), src1->encoding(), VEX_SIMD_66, \/* MAP4 *\/VEX_OPCODE_0F_3C, &attributes, no_flags);\n-  emit_int8(0x33);\n-  emit_operand(src1, src2, 0);\n+  evex_prefix_ndd_and_int8(dst, src1, src2, VEX_SIMD_66, VEX_OPCODE_0F_3C, 0x33, no_flags, false \/* is_map1 *\/, EVEX_16bit);\n@@ -13670,1 +13654,1 @@\n-void Assembler::evex_prefix_ndd_and_int8(Register dst, Register src1, Address src2, VexSimdPrefix pre, VexOpcode opc, int b1, bool no_flags, bool is_map1) {\n+void Assembler::evex_prefix_ndd_and_int8(Register dst, Register src1, Address src2, VexSimdPrefix pre, VexOpcode opc, int b1, bool no_flags, bool is_map1, int input_size_in_bits) {\n@@ -13672,0 +13656,3 @@\n+    if (input_size_in_bits == EVEX_16bit) {\n+      emit_int8(0x66);\n+    }\n@@ -13677,1 +13664,1 @@\n-  evex_prefix_ndd_and_int8_common(dst, src1, src2, pre, opc, b1, no_flags, EVEX_32bit, \/* vex_w *\/ false);\n+  evex_prefix_ndd_and_int8_common(dst, src1, src2, pre, opc, b1, no_flags, input_size_in_bits, \/* vex_w *\/ false);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":7,"deletions":20,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -804,1 +804,1 @@\n-                       int b1, bool no_flags = false, bool is_map1 = false);\n+                       int b1, bool no_flags = false, bool is_map1 = false, int input_size_in_bits = EVEX_32bit);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}