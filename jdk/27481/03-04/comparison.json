{"files":[{"patch":"@@ -393,5 +393,4 @@\n-      \/\/ On architectures that do not support the predicate feature, vector\n-      \/\/ mask is stored in a normal vector with the type of \"TypeVect\" varing\n-      \/\/ from \"TypeVectA\" to \"TypeVectZ\" based on the vector length in bytes.\n-      \/\/ It cannot be a \"TypeVectMask\".\n-      assert(vt->isa_vectmask() == nullptr, \"mask type not match\");\n+      \/\/ On architectures that do not support predicate, masks are stored in\n+      \/\/ general vector registers (TypeVect) with sizes ranging from TypeVectA\n+      \/\/ to TypeVectX based on the vector size in bytes.\n+      assert(vt->isa_vectmask() == nullptr, \"mask type is not matched\");\n@@ -401,1 +400,1 @@\n-    assert(vt->isa_vectmask(), \"The mask type must be a TypeVectMask on SVE\");\n+    assert(vt->isa_vectmask() != nullptr, \"expected TypeVectMask on SVE\");\n@@ -405,4 +404,4 @@\n-        \/\/ SVE does not have native predicate instructions for these two ops.\n-        \/\/ Instead, they are implemented with vector instructions. Hence, to\n-        \/\/ improve the performance, we prefer saving the mask in a vector as\n-        \/\/ the input\/output of these IRs.\n+        \/\/ These operations lack native SVE predicate instructions and are\n+        \/\/ implemented using general vector instructions instead. Use vector\n+        \/\/ registers rather than predicate registers to save the mask for\n+        \/\/ better performance.\n@@ -411,1 +410,1 @@\n-        \/\/ By default, all the mask operations are implemented with predicate\n+        \/\/ By default, the mask operations are implemented with predicate\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -383,5 +383,4 @@\n-      \/\/ On architectures that do not support the predicate feature, vector\n-      \/\/ mask is stored in a normal vector with the type of \"TypeVect\" varing\n-      \/\/ from \"TypeVectA\" to \"TypeVectZ\" based on the vector length in bytes.\n-      \/\/ It cannot be a \"TypeVectMask\".\n-      assert(vt->isa_vectmask() == nullptr, \"mask type not match\");\n+      \/\/ On architectures that do not support predicate, masks are stored in\n+      \/\/ general vector registers (TypeVect) with sizes ranging from TypeVectA\n+      \/\/ to TypeVectX based on the vector size in bytes.\n+      assert(vt->isa_vectmask() == nullptr, \"mask type is not matched\");\n@@ -391,1 +390,1 @@\n-    assert(vt->isa_vectmask(), \"The mask type must be a TypeVectMask on SVE\");\n+    assert(vt->isa_vectmask() != nullptr, \"expected TypeVectMask on SVE\");\n@@ -395,4 +394,4 @@\n-        \/\/ SVE does not have native predicate instructions for these two ops.\n-        \/\/ Instead, they are implemented with vector instructions. Hence, to\n-        \/\/ improve the performance, we prefer saving the mask in a vector as\n-        \/\/ the input\/output of these IRs.\n+        \/\/ These operations lack native SVE predicate instructions and are\n+        \/\/ implemented using general vector instructions instead. Use vector\n+        \/\/ registers rather than predicate registers to save the mask for\n+        \/\/ better performance.\n@@ -401,1 +400,1 @@\n-        \/\/ By default, all the mask operations are implemented with predicate\n+        \/\/ By default, the mask operations are implemented with predicate\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -336,3 +336,4 @@\n-  \/\/ Identify if a vector mask operation requires the input\/output mask to be\n-  \/\/ saved with a predicate type (i.e. TypeVectMask) or not. Return true if it\n-  \/\/ requires a predicate type. And return false if it requires a vector type.\n+  \/\/ Identify if a vector mask operation prefers the input\/output mask to be\n+  \/\/ saved with a predicate type or not.\n+  \/\/ - Return true if it prefers a predicate type (i.e. TypeVectMask).\n+  \/\/ - Return false if it prefers a general vector type (i.e. TypeVectA to TypeVectZ).\n","filename":"src\/hotspot\/share\/opto\/matcher.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}