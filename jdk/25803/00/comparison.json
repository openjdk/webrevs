{"files":[{"patch":"@@ -346,24 +346,0 @@\n-    \/**\n-     * Compares this descriptor to the given object.  The objects are equal if\n-     * the given object is also a Descriptor, and if the two Descriptors have\n-     * the same field names (possibly differing in case) and the same\n-     * associated values.  The respective values for a field in the two\n-     * Descriptors are equal if the following conditions hold:\n-     *\n-     * <ul>\n-     * <li>If one value is null then the other must be too.<\/li>\n-     * <li>If one value is a primitive array then the other must be a primitive\n-     * array of the same type with the same elements.<\/li>\n-     * <li>If one value is an object array then the other must be too and\n-     * {@link Arrays#deepEquals(Object[],Object[])} must return true.<\/li>\n-     * <li>Otherwise {@link Object#equals(Object)} must return true.<\/li>\n-     * <\/ul>\n-     *\n-     * @param o the object to compare with.\n-     *\n-     * @return {@code true} if the objects are the same; {@code false}\n-     * otherwise.\n-     *\n-     *\/\n-    \/\/ Note: this Javadoc is copied from javax.management.Descriptor\n-    \/\/       due to 6369229.\n@@ -397,22 +373,0 @@\n-    \/**\n-     * <p>Returns the hash code value for this descriptor.  The hash\n-     * code is computed as the sum of the hash codes for each field in\n-     * the descriptor.  The hash code of a field with name {@code n}\n-     * and value {@code v} is {@code n.toLowerCase().hashCode() ^ h}.\n-     * Here {@code h} is the hash code of {@code v}, computed as\n-     * follows:<\/p>\n-     *\n-     * <ul>\n-     * <li>If {@code v} is null then {@code h} is 0.<\/li>\n-     * <li>If {@code v} is a primitive array then {@code h} is computed using\n-     * the appropriate overloading of {@code java.util.Arrays.hashCode}.<\/li>\n-     * <li>If {@code v} is an object array then {@code h} is computed using\n-     * {@link Arrays#deepHashCode(Object[])}.<\/li>\n-     * <li>Otherwise {@code h} is {@code v.hashCode()}.<\/li>\n-     * <\/ul>\n-     *\n-     * @return A hash code value for this object.\n-     *\n-     *\/\n-    \/\/ Note: this Javadoc is copied from javax.management.Descriptor\n-    \/\/       due to 6369229.\n","filename":"src\/java.management\/share\/classes\/javax\/management\/ImmutableDescriptor.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -699,25 +699,0 @@\n-    \/**\n-     * Compares this descriptor to the given object.  The objects are equal if\n-     * the given object is also a Descriptor, and if the two Descriptors have\n-     * the same field names (possibly differing in case) and the same\n-     * associated values.  The respective values for a field in the two\n-     * Descriptors are equal if the following conditions hold:\n-     *\n-     * <ul>\n-     * <li>If one value is null then the other must be too.<\/li>\n-     * <li>If one value is a primitive array then the other must be a primitive\n-     * array of the same type with the same elements.<\/li>\n-     * <li>If one value is an object array then the other must be too and\n-     * {@link java.util.Arrays#deepEquals(Object[],Object[]) Arrays.deepEquals}\n-     * must return true.<\/li>\n-     * <li>Otherwise {@link Object#equals(Object)} must return true.<\/li>\n-     * <\/ul>\n-     *\n-     * @param o the object to compare with.\n-     *\n-     * @return {@code true} if the objects are the same; {@code false}\n-     * otherwise.\n-     *\n-     *\/\n-    \/\/ Note: this Javadoc is copied from javax.management.Descriptor\n-    \/\/       due to 6369229.\n@@ -735,22 +710,0 @@\n-    \/**\n-     * <p>Returns the hash code value for this descriptor.  The hash\n-     * code is computed as the sum of the hash codes for each field in\n-     * the descriptor.  The hash code of a field with name {@code n}\n-     * and value {@code v} is {@code n.toLowerCase().hashCode() ^ h}.\n-     * Here {@code h} is the hash code of {@code v}, computed as\n-     * follows:<\/p>\n-     *\n-     * <ul>\n-     * <li>If {@code v} is null then {@code h} is 0.<\/li>\n-     * <li>If {@code v} is a primitive array then {@code h} is computed using\n-     * the appropriate overloading of {@code java.util.Arrays.hashCode}.<\/li>\n-     * <li>If {@code v} is an object array then {@code h} is computed using\n-     * {@link java.util.Arrays#deepHashCode(Object[]) Arrays.deepHashCode}.<\/li>\n-     * <li>Otherwise {@code h} is {@code v.hashCode()}.<\/li>\n-     * <\/ul>\n-     *\n-     * @return A hash code value for this object.\n-     *\n-     *\/\n-    \/\/ Note: this Javadoc is copied from javax.management.Descriptor\n-    \/\/       due to 6369229.\n","filename":"src\/java.management\/share\/classes\/javax\/management\/modelmbean\/DescriptorSupport.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"modified"}]}