{"files":[{"patch":"@@ -448,1 +448,2 @@\n-        private boolean eof = false;\n+        private boolean compressedEof;\n+        private boolean eof;\n@@ -475,0 +476,17 @@\n+        \/\/ Override read(byte[], int, int) method to track EOF\n+        \/\/ and release the Inflater when it's no longer needed\n+        @Override\n+        public int read(byte[] b, int off, int len) throws IOException {\n+            if (eof && !closeRequested) {\n+                \/\/ Inflater has been released, avoid reading\n+                return -1;\n+            }\n+            int read = super.read(b, off, len);\n+            if (read == -1) {\n+                \/\/ Release Inflater back to the pool\n+                cleanable.clean();\n+                eof = true;\n+            }\n+            return read;\n+        }\n+\n@@ -479,1 +497,1 @@\n-            if (eof) {\n+            if (compressedEof) {\n@@ -486,1 +504,1 @@\n-                eof = true;\n+                compressedEof = true;\n@@ -492,1 +510,1 @@\n-            if (closeRequested)\n+            if (closeRequested || eof)\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":22,"deletions":4,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 8340814\n+   @summary Verify that ZipFileInputStream releases its Inflater after encountering EOF\n+   @modules java.base\/java.util.zip:+open\n+   @run junit ReleaseInflaterOnEOF\n+ *\/\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.lang.reflect.Field;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.zip.*;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+\n+public class ReleaseInflaterOnEOF {\n+\n+    \/\/ ZIP file produced during tests\n+    private Path zip = Path.of(\"release-zip-inflaters.zip\");\n+\n+    \/**\n+     * Create a sample ZIP file for use by tests\n+     * @param name name of the ZIP file to create\n+     * @return a sample ZIP file\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    private Path createZip(String name) throws IOException {\n+        Path zip = Path.of(name);\n+\n+        try (OutputStream out = Files.newOutputStream(zip);\n+             ZipOutputStream zo = new ZipOutputStream(out)) {\n+            zo.putNextEntry(new ZipEntry(\"deflated.txt\"));\n+            zo.write(\"hello\".getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        return zip;\n+    }\n+\n+    \/**\n+     * Delete the ZIP file produced after each test method\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @AfterEach\n+    public void cleanup() throws IOException {\n+        Files.deleteIfExists(zip);\n+    }\n+\n+    \/**\n+     * Verify that ZipFileInflaterInputStream releases its Inflater to the\n+     * pool after the stream has been fully consumed.\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void shouldReleaseInflaterAfterEof() throws Exception {\n+        zip = createZip(\"release-inflater.zip\");\n+        try (var zf = new ZipFile(zip.toFile())) {\n+\n+            ZipEntry entry = new ZipEntry(\"deflated.txt\");\n+\n+            Inflater initialInflater;\n+\n+            \/\/ Open an input stream\n+            try (var in = zf.getInputStream(entry)) {\n+                \/\/ Record its Inflater instance\n+                initialInflater = getInflater(in);\n+            }\n+            \/\/ Closing the input stream releases the Inflater back to the cache\n+            \/\/ The Inflater cache now has a single entry\n+\n+            for (int i = 0; i < 100; i++) {\n+                var is = zf.getInputStream(entry);\n+                \/\/ Assert that the ZipFileInflaterInputStream reused the cached Inflater instance\n+                assertSame(initialInflater, getInflater(is));\n+                \/\/ Fully consume the stream to allow ZipFileInflaterInputStream to observe the EOF\n+                is.transferTo(OutputStream.nullOutputStream());\n+            }\n+        }\n+    }\n+\n+    \/\/ Use reflection to get the ZipFileInflaterInputStream's Inflater instance\n+    private Inflater getInflater(InputStream in) throws IllegalAccessException, NoSuchFieldException {\n+        Field field = InflaterInputStream.class.getDeclaredField(\"inf\");\n+        field.setAccessible(true);\n+        return (Inflater) field.get(in);\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/ReleaseInflaterOnEOF.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"}]}