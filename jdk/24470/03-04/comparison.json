{"files":[{"patch":"@@ -503,1 +503,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -135,0 +135,39 @@\n+    @Warmup(iterations = 3, time = 5, timeUnit = TimeUnit.SECONDS)\n+    @Measurement(iterations = 4, time = 5, timeUnit = TimeUnit.SECONDS)\n+    @Fork(2)\n+    @BenchmarkMode(Mode.Throughput)\n+    @State(Scope.Thread)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    public static class CbrtPerfSpecialValues {\n+        public double double0           = 0.0;\n+        public double doubleNegative0   = -0.0;\n+        public double doubleInf         = Double.POSITIVE_INFINITY;\n+        public double doubleNegativeInf = Double.NEGATIVE_INFINITY;\n+        public double doubleNaN         = Double.NaN;\n+\n+        @Benchmark\n+        public double  cbrtDouble0() {\n+            return  Math.cbrt(double0);\n+        }\n+\n+        @Benchmark\n+        public double  cbrtDoubleNegative0() {\n+            return  Math.cbrt(doubleNegative0);\n+        }\n+\n+        @Benchmark\n+        public double  cbrtDoubleInf() {\n+            return  Math.cbrt(doubleInf);\n+        }\n+\n+        @Benchmark\n+        public double  cbrtDoubleNegativeInf() {\n+            return  Math.cbrt(doubleNegativeInf);\n+        }\n+\n+        @Benchmark\n+        public double  cbrtDoubleNaN() {\n+            return  Math.cbrt(doubleNaN);\n+        }\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/CbrtPerf.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"}]}