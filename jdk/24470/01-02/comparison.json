{"files":[{"patch":"@@ -0,0 +1,148 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.annotations.OperationsPerInvocation;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.Random;\n+\n+public class CbrtPerf {\n+\n+    @Warmup(iterations = 3, time = 5, timeUnit = TimeUnit.MILLISECONDS)\n+    @Measurement(iterations = 4, time = 5, timeUnit = TimeUnit.MILLISECONDS)\n+    @Fork(2)\n+    @BenchmarkMode(Mode.Throughput)\n+    @State(Scope.Thread)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    public static class CbrtPerfRanges {\n+        public static int cbrtInputCount = 2048;\n+\n+        @Param({\"0\", \"1\"})\n+        public int cbrtRangeIndex;\n+\n+        public double [] cbrtPosRandInputs;\n+        public double [] cbrtNegRandInputs;\n+        public int       cbrtInputIndex = 0;\n+        public double    cbrtRangeInputs[][] = { {0.0, 0x1.0P-1022}, {0x1.0P-1022, 1.7976931348623157E308} };\n+\n+        @Setup\n+        public void setupValues() {\n+            Random random = new Random(1023);\n+\n+            \/\/ Fill the positive and negative cbrt vectors with random values\n+            cbrtPosRandInputs = new double[cbrtInputCount];\n+            cbrtNegRandInputs = new double[cbrtInputCount];\n+\n+            for (int i = 0; i < cbrtInputCount; i++) {\n+                double cbrtLowerBound = cbrtRangeInputs[cbrtRangeIndex][0];\n+                double cbrtUpperBound = cbrtRangeInputs[cbrtRangeIndex][1];\n+                cbrtPosRandInputs[i] = random.nextDouble(cbrtLowerBound, cbrtUpperBound);\n+                cbrtNegRandInputs[i] = random.nextDouble(-cbrtUpperBound, -cbrtLowerBound);\n+            }\n+        }\n+\n+        @Benchmark\n+        @OperationsPerInvocation(2048)\n+        public double  cbrtPosRangeDouble() {\n+            double res = 0.0;\n+            for (int i = 0; i < cbrtInputCount; i++) {\n+                res += Math.cbrt(cbrtPosRandInputs[i]);\n+            }\n+            return res;\n+        }\n+\n+        @Benchmark\n+        @OperationsPerInvocation(2048)\n+        public double  cbrtNegRangeDouble() {\n+            double res = 0.0;\n+            for (int i = 0; i < cbrtInputCount; i++) {\n+                res += Math.cbrt(cbrtNegRandInputs[i]);\n+            }\n+            return res;\n+        }\n+    }\n+\n+    @Warmup(iterations = 3, time = 5, timeUnit = TimeUnit.SECONDS)\n+    @Measurement(iterations = 4, time = 5, timeUnit = TimeUnit.SECONDS)\n+    @Fork(2)\n+    @BenchmarkMode(Mode.Throughput)\n+    @State(Scope.Thread)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    public static class CbrtPerfConstant {\n+        public static final double constDouble0   = 0.0;\n+        public static final double constDouble1   = 1.0;\n+        public static final double constDouble27  = 27.0;\n+        public static final double constDouble512 = 512.0;\n+\n+        @Benchmark\n+        public double  cbrtConstDouble0() {\n+            return  Math.cbrt(constDouble0);\n+        }\n+\n+        @Benchmark\n+        public double  cbrtConstDouble1() {\n+            return  Math.cbrt(constDouble1);\n+        }\n+\n+        @Benchmark\n+        public double  cbrtConstDouble27() {\n+            return  Math.cbrt(constDouble27);\n+        }\n+\n+        @Benchmark\n+        public double  cbrtConstDouble512() {\n+            return  Math.cbrt(constDouble512);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws RunnerException {\n+        Options opt = new OptionsBuilder()\n+                .include(CbrtPerfRanges.class.getSimpleName())\n+                .build();\n+\n+        new Runner(opt).run();\n+\n+        opt = new OptionsBuilder()\n+                .include(CbrtPerfConstant.class.getSimpleName())\n+                .build();\n+\n+        new Runner(opt).run();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/CbrtPerf.java","additions":148,"deletions":0,"binary":false,"changes":148,"status":"added"}]}