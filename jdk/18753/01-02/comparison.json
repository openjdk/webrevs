{"files":[{"patch":"@@ -390,1 +390,1 @@\n-#define CHECK_EXCEPTION_FAIL() \\\n+#define CHECK_EXCEPTION_CONTINUE_OR_FAIL() \\\n@@ -392,1 +392,2 @@\n-        if ((*env)->ExceptionOccurred(env)) { \\\n+        jobject pendingException = (*env)->ExceptionOccurred(env); \\\n+        if (pendingException) { \\\n@@ -394,1 +395,11 @@\n-            return 0; \\\n+            jclass pendingExceptionClass = \\\n+                (*env)->GetObjectClass(env, pendingException); \\\n+            jclass noSuchMethodErrorClass = \\\n+                FindBootStrapClass(env, \"java\/lang\/NoSuchMethodError\"); \\\n+            if ((*env)->IsSameObject(env, pendingExceptionClass, \\\n+                                     noSuchMethodErrorClass)) { \\\n+                return 1; \\\n+            } else { \\\n+                (*env)->Throw(env, pendingException); \\\n+                return 0; \\\n+            } \\\n@@ -398,1 +409,0 @@\n-\n@@ -400,2 +410,3 @@\n- * Invoke a static main with arguments. Returns 1 (true) if successful otherwise\n- * processes the pending exception from GetStaticMethodID and returns 0 (false).\n+ * Invoke a static main with arguments. Returns 1 (true) if processing should\n+ * continue with another main variant, returns 0 (false) otherwise. An exception\n+ * may be pending in either case.\n@@ -407,1 +418,1 @@\n-    CHECK_EXCEPTION_FAIL();\n+    CHECK_EXCEPTION_CONTINUE_OR_FAIL();\n@@ -409,1 +420,1 @@\n-    return 1;\n+    return 0;\n@@ -413,2 +424,3 @@\n- * Invoke an instance main with arguments. Returns 1 (true) if successful otherwise\n- * processes the pending exception from GetMethodID and returns 0 (false).\n+ * Invoke an instance main with arguments. Returns 1 (true) if processing should\n+ * continue with another main variant, returns 0 (false) otherwise. An exception\n+ * may be pending in either case.\n@@ -418,2 +430,0 @@\n-    jmethodID constructor = (*env)->GetMethodID(env, mainClass, \"<init>\", \"()V\");\n-    CHECK_EXCEPTION_FAIL();\n@@ -422,1 +432,3 @@\n-    CHECK_EXCEPTION_FAIL();\n+    CHECK_EXCEPTION_CONTINUE_OR_FAIL();\n+    jmethodID constructor = (*env)->GetMethodID(env, mainClass, \"<init>\", \"()V\");\n+    CHECK_EXCEPTION_CONTINUE_OR_FAIL();\n@@ -425,4 +437,4 @@\n-        \/\/new instance construction failed, don't call the main method,\n-        \/\/and don't continue with the next variant;\n-        \/\/leave any exception pending, so that it is visible to the caller:\n-        return 1;\n+        \/\/ new instance construction failed, don't call the main method,\n+        \/\/ and don't continue with the next variant;\n+        \/\/ leave any exception pending, so that it is visible to the caller:\n+        return 0;\n@@ -431,1 +443,1 @@\n-    return 1;\n+    return 0;\n@@ -435,2 +447,3 @@\n- * Invoke a static main without arguments. Returns 1 (true) if successful otherwise\n- * processes the pending exception from GetStaticMethodID and returns 0 (false).\n+ * Invoke a static main without arguments.  Returns 1 (true) if processing should\n+ * continue with another main variant, returns 0 (false) otherwise. An exception\n+ * may be pending in either case.\n@@ -442,1 +455,1 @@\n-    CHECK_EXCEPTION_FAIL();\n+    CHECK_EXCEPTION_CONTINUE_OR_FAIL();\n@@ -444,1 +457,1 @@\n-    return 1;\n+    return 0;\n@@ -448,2 +461,3 @@\n- * Invoke an instance main without arguments. Returns 1 (true) if successful otherwise\n- * processes the pending exception from GetMethodID and returns 0 (false).\n+ * Invoke an instance main without arguments.  Returns 1 (true) if processing should\n+ * continue with another main variant, returns 0 (false) otherwise. An exception\n+ * may be pending in either case.\n@@ -453,2 +467,0 @@\n-    jmethodID constructor = (*env)->GetMethodID(env, mainClass, \"<init>\", \"()V\");\n-    CHECK_EXCEPTION_FAIL();\n@@ -457,1 +469,3 @@\n-    CHECK_EXCEPTION_FAIL();\n+    CHECK_EXCEPTION_CONTINUE_OR_FAIL();\n+    jmethodID constructor = (*env)->GetMethodID(env, mainClass, \"<init>\", \"()V\");\n+    CHECK_EXCEPTION_CONTINUE_OR_FAIL();\n@@ -460,3 +474,3 @@\n-        \/\/new instance construction failed, don't call the main method,\n-        \/\/and don't continue with the next variant;\n-        \/\/leave any exception pending, so that it is visible to the caller:\n+        \/\/ new instance construction failed, don't call the main method,\n+        \/\/ and don't continue with the next variant;\n+        \/\/ leave any exception pending, so that it is visible to the caller:\n@@ -466,1 +480,1 @@\n-    return 1;\n+    return 0;\n@@ -623,4 +637,4 @@\n-    if (!invokeStaticMainWithArgs(env, mainClass, mainArgs) &&\n-        !invokeInstanceMainWithArgs(env, mainClass, mainArgs) &&\n-        !invokeStaticMainWithoutArgs(env, mainClass) &&\n-        !invokeInstanceMainWithoutArgs(env, mainClass)) {\n+    if (invokeStaticMainWithArgs(env, mainClass, mainArgs) &&\n+        invokeInstanceMainWithArgs(env, mainClass, mainArgs) &&\n+        invokeStaticMainWithoutArgs(env, mainClass) &&\n+        invokeInstanceMainWithoutArgs(env, mainClass)) {\n@@ -1564,0 +1578,1 @@\n+\n","filename":"src\/java.base\/share\/native\/libjli\/java.c","additions":50,"deletions":35,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-            performTest(source, tr -> {\n+            performTest(source, true, tr -> {\n@@ -194,1 +194,7 @@\n-    record TestCase(String sourceCode, List<String> expectedOutput) {}\n+    record TestCase(String sourceCode, boolean enablePreview, List<String> expectedOutput) {\n+\n+        public TestCase(String sourceCode, List<String> expectedOutput) {\n+            this(sourceCode, true, expectedOutput);\n+        }\n+\n+    }\n@@ -223,1 +229,1 @@\n-            performTest(testCase.sourceCode, tr -> {\n+            performTest(testCase.sourceCode, testCase.enablePreview(), tr -> {\n@@ -279,1 +285,46 @@\n-                             \"\\tat MainClass.<init>(MainClass.java:5)\"))\n+                             \"\\tat MainClass.<init>(MainClass.java:5)\")),\n+        new TestCase(\"\"\"\n+                     public class MainClass {\n+                         static {\n+                             System.out.println(\"static init called!\");\n+                             if (true) throw new Error();\n+                         }\n+                         public static void main(String... args) {\n+                             System.out.println(\"main called!\");\n+                         }\n+                     }\n+                     \"\"\",\n+                     false,\n+                     List.of(\"static init called!\",\n+                             \"Exception in thread \\\"main\\\" java.lang.Error\",\n+                             \"\\tat MainClass.<clinit>(MainClass.java:4)\")),\n+        new TestCase(\"\"\"\n+                     public class MainClass {\n+                         static {\n+                             System.out.println(\"static init called!\");\n+                             if (true) throw new Error();\n+                         }\n+                         public static void main(String... args) {\n+                             System.out.println(\"main called!\");\n+                         }\n+                     }\n+                     \"\"\",\n+                     true,\n+                     List.of(\"static init called!\",\n+                             \"Exception in thread \\\"main\\\" java.lang.Error\",\n+                             \"\\tat MainClass.<clinit>(MainClass.java:4)\")),\n+        new TestCase(\"\"\"\n+                     public class MainClass {\n+                         static {\n+                             System.out.println(\"static init called!\");\n+                             if (true) throw new Error();\n+                         }\n+                         public void main(String... args) {\n+                             System.out.println(\"main called!\");\n+                         }\n+                     }\n+                     \"\"\",\n+                     true,\n+                     List.of(\"static init called!\",\n+                             \"Exception in thread \\\"main\\\" java.lang.Error\",\n+                             \"\\tat MainClass.<clinit>(MainClass.java:4)\")),\n@@ -284,1 +335,1 @@\n-            performTest(testCase.sourceCode, tr -> {\n+            performTest(testCase.sourceCode, testCase.enablePreview(), tr -> {\n@@ -299,1 +350,1 @@\n-    private static void performTest(String source, Consumer<TestResult> validator) throws Exception {\n+    private static void performTest(String source, boolean enablePreview, Consumer<TestResult> validator) throws Exception {\n@@ -303,1 +354,3 @@\n-        var trSource = doExec(javaCmd, \"--enable-preview\", \"--source\", version, \"MainClass.java\");\n+        var previewRuntime = enablePreview ? \"--enable-preview\" : \"-DtestNoPreview\";\n+        var previewCompile = enablePreview ? \"--enable-preview\" : \"-XDtestNoPreview\";\n+        var trSource = doExec(javaCmd, previewRuntime, \"--source\", version, \"MainClass.java\");\n@@ -305,1 +358,1 @@\n-        compile(\"--enable-preview\", \"--source\", version, \"MainClass.java\");\n+        compile(previewCompile, \"--source\", version, \"MainClass.java\");\n@@ -307,1 +360,1 @@\n-        var trCompile = doExec(javaCmd, \"--enable-preview\", \"--class-path\", cp, \"MainClass\");\n+        var trCompile = doExec(javaCmd, previewRuntime, \"--class-path\", cp, \"MainClass\");\n","filename":"test\/jdk\/tools\/launcher\/InstanceMainTest.java","additions":62,"deletions":9,"binary":false,"changes":71,"status":"modified"}]}