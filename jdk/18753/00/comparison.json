{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -399,1 +399,1 @@\n-#define CHECK_EXCEPTION_NULL_FAIL(mainObject) \\\n+#define CHECK_EXCEPTION_NULL_PASS(mainObject) \\\n@@ -402,2 +402,2 @@\n-            (*env)->ExceptionClear(env); \\\n-            return 0; \\\n+            \/*leave the exception pending, so that it is reported eventually*\/ \\\n+            return 1; \\\n@@ -405,1 +405,1 @@\n-            return 0; \\\n+            return 1; \\\n@@ -430,2 +430,0 @@\n-    jobject mainObject = (*env)->NewObject(env, mainClass, constructor);\n-    CHECK_EXCEPTION_NULL_FAIL(mainObject);\n@@ -435,0 +433,2 @@\n+    jobject mainObject = (*env)->NewObject(env, mainClass, constructor);\n+    CHECK_EXCEPTION_NULL_PASS(mainObject);\n@@ -460,2 +460,0 @@\n-    jobject mainObject = (*env)->NewObject(env, mainClass, constructor);\n-    CHECK_EXCEPTION_NULL_FAIL(mainObject);\n@@ -465,0 +463,2 @@\n+    jobject mainObject = (*env)->NewObject(env, mainClass, constructor);\n+    CHECK_EXCEPTION_NULL_PASS(mainObject);\n","filename":"src\/java.base\/share\/native\/libjli\/java.c","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,3 @@\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Consumer;\n@@ -28,1 +31,2 @@\n- * @summary test execution priority of main methods\n+ * @bug 8329420\n+ * @summary test execution priority and behavior of main methods\n@@ -178,1 +182,1 @@\n-    public static void main(String... args) throws Exception {\n+    private static void testMethodOrder() throws Exception {\n@@ -180,8 +184,46 @@\n-            Files.writeString(Path.of(\"MainClass.java\"), source);\n-            var version = System.getProperty(\"java.specification.version\");\n-            var tr = doExec(javaCmd, \"--enable-preview\", \"--source\", version, \"MainClass.java\");\n-            if (!tr.isOK()) {\n-                System.err.println(source);\n-                System.err.println(tr);\n-                throw new AssertionError();\n-            }\n+            performTest(source, tr -> {\n+                if (!tr.isOK()) {\n+                    System.err.println(source);\n+                    System.err.println(tr);\n+                    throw new AssertionError();\n+                }\n+            });\n+        }\n+    }\n+\n+    record TestCase(String sourceCode, List<String> expectedOutput) {}\n+\n+    private static final TestCase[] EXECUTION_ORDER = new TestCase[] {\n+        new TestCase(\"\"\"\n+                     public class MainClass {\n+                         public MainClass() {\n+                             System.out.println(\"Constructor called!\");\n+                         }\n+                         public static void main() {\n+                             System.out.println(\"main called!\");\n+                         }\n+                     }\n+                     \"\"\",\n+                     List.of(\"main called!\")),\n+        new TestCase(\"\"\"\n+                     public class MainClass {\n+                         public MainClass() {\n+                             System.out.println(\"Constructor called!\");\n+                         }\n+                         public void main() {\n+                             System.out.println(\"main called!\");\n+                         }\n+                     }\n+                     \"\"\",\n+                     List.of(\"Constructor called!\", \"main called!\"))\n+    };\n+\n+    private static void testExecutionOrder() throws Exception {\n+        for (TestCase testCase : EXECUTION_ORDER) {\n+            performTest(testCase.sourceCode, tr -> {\n+                if (!Objects.equals(testCase.expectedOutput, tr.testOutput)) {\n+                    throw new AssertionError(\"Unexpected output, \" +\n+                                             \"expected: \" + testCase.expectedOutput +\n+                                             \", actual: \" + tr.testOutput);\n+                }\n+            });\n@@ -190,0 +232,84 @@\n+\n+    private static final TestCase[] EXECUTION_ERRORS = new TestCase[] {\n+        new TestCase(\"\"\"\n+                     public class MainClass {\n+                         public MainClass() {\n+                             System.out.println(\"Constructor called!\");\n+                             if (true) throw new Error();\n+                         }\n+                         public void main(String... args) {\n+                             System.out.println(\"main called!\");\n+                         }\n+                     }\n+                     \"\"\",\n+                     List.of(\"Constructor called!\",\n+                             \"Exception in thread \\\"main\\\" java.lang.Error\",\n+                             \"\\tat MainClass.<init>(MainClass.java:4)\")),\n+        new TestCase(\"\"\"\n+                     public class MainClass {\n+                         public MainClass() {\n+                             System.out.println(\"Constructor called!\");\n+                             if (true) throw new Error();\n+                         }\n+                         public void main() {\n+                             System.out.println(\"main called!\");\n+                         }\n+                     }\n+                     \"\"\",\n+                     List.of(\"Constructor called!\",\n+                             \"Exception in thread \\\"main\\\" java.lang.Error\",\n+                             \"\\tat MainClass.<init>(MainClass.java:4)\")),\n+        new TestCase(\"\"\"\n+                     public class MainClass {\n+                         static int idx;\n+                         public MainClass() {\n+                             System.out.println(\"Constructor called!\");\n+                             if (idx++ == 0) throw new Error();\n+                         }\n+                         public void main(String... args) {\n+                             System.out.println(\"main called!\");\n+                         }\n+                         public void main() {\n+                             System.out.println(\"main called!\");\n+                         }\n+                     }\n+                     \"\"\",\n+                     List.of(\"Constructor called!\",\n+                             \"Exception in thread \\\"main\\\" java.lang.Error\",\n+                             \"\\tat MainClass.<init>(MainClass.java:5)\"))\n+    };\n+\n+    private static void testExecutionErrors() throws Exception {\n+        for (TestCase testCase : EXECUTION_ERRORS) {\n+            performTest(testCase.sourceCode, tr -> {\n+                for (int i = 0; i < testCase.expectedOutput.size(); i++) {\n+                    if (i >= tr.testOutput.size() ||\n+                        !Objects.equals(testCase.expectedOutput.get(i),\n+                                    tr.testOutput.get(i))) {\n+                        throw new AssertionError(\"Unexpected output, \" +\n+                                                 \"expected: \" + testCase.expectedOutput +\n+                                                 \", actual: \" + tr.testOutput +\n+                                                 \", failed comparison at index: \" + i);\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void performTest(String source, Consumer<TestResult> validator) throws Exception {\n+        Path mainClass = Path.of(\"MainClass.java\");\n+        Files.writeString(mainClass, source);\n+        var version = System.getProperty(\"java.specification.version\");\n+        var trSource = doExec(javaCmd, \"--enable-preview\", \"--source\", version, \"MainClass.java\");\n+        validator.accept(trSource);\n+        compile(\"--enable-preview\", \"--source\", version, \"MainClass.java\");\n+        String cp = mainClass.toAbsolutePath().getParent().toString();\n+        var trCompile = doExec(javaCmd, \"--enable-preview\", \"--class-path\", cp, \"MainClass\");\n+        validator.accept(trCompile);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        testMethodOrder();\n+        testExecutionOrder();\n+        testExecutionErrors();\n+    }\n","filename":"test\/jdk\/tools\/launcher\/InstanceMainTest.java","additions":137,"deletions":11,"binary":false,"changes":148,"status":"modified"}]}