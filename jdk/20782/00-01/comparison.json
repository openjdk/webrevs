{"files":[{"patch":"@@ -557,39 +557,6 @@\n-bool AttachOperation::read_request(RequestReader* reader) {\n-  uint ver = reader->read_uint();\n-  int buffer_size = 0;\n-  \/\/ Read conditions:\n-  int min_str_count = 0; \/\/ expected number of strings in the request\n-  int min_read_size = 1; \/\/ expected size of the request data (by default 1 symbol for terminating '\\0')\n-  switch (ver) {\n-  case ATTACH_API_V1: \/\/ <ver>0<cmd>0<arg>0<arg>0<arg>0\n-    \/\/ Always contain a command (up to name_length_max symbols)\n-    \/\/ and arg_count_max(3) arguments (each up to arg_length_max symbols).\n-    buffer_size = (name_length_max + 1) + arg_count_max * (arg_length_max + 1);\n-    min_str_count = 1 \/*name*\/ + arg_count_max;\n-    break;\n-  case ATTACH_API_V2: \/\/ <ver>0<size>0<cmd>0<arg>0<arg>0<arg>0\n-    if (AttachListener::get_supported_version() < 2) {\n-        log_error(attach)(\"Failed to read request: v2 is unsupported ot disabled\");\n-        return false;\n-    }\n-\n-    \/\/ read size of the data\n-    buffer_size = reader->read_uint();\n-    if (buffer_size < 0) {\n-      return false;\n-    }\n-    log_debug(attach)(\"v2 request, data size = %d\", buffer_size);\n-\n-    \/\/ Sanity check: max request size is 256K.\n-    if (buffer_size > 256 * 1024) {\n-      log_error(attach)(\"Failed to read request: too big\");\n-      return false;\n-    }\n-    \/\/ Must contain exact 'buffer_size' bytes.\n-    min_read_size = buffer_size;\n-    break;\n-  default:\n-    log_error(attach)(\"Failed to read request: unknown version (%d)\", ver);\n-    return false;\n-  }\n-\n+\/\/ Reads operation name and arguments.\n+\/\/ buffer_size: maximum data size;\n+\/\/ min_str_count: minimum number of strings in the request (name + arguments);\n+\/\/ min_read_size: minimum data size.\n+bool AttachOperation::read_request_data(AttachOperation::RequestReader* reader,\n+                                        int buffer_size, int min_str_count, int min_read_size) {\n@@ -651,0 +618,42 @@\n+bool AttachOperation::read_request(RequestReader* reader) {\n+  uint ver = reader->read_uint();\n+  int buffer_size = 0;\n+  \/\/ Read conditions:\n+  int min_str_count = 0; \/\/ expected number of strings in the request\n+  int min_read_size = 1; \/\/ expected size of the request data (by default 1 symbol for terminating '\\0')\n+  switch (ver) {\n+  case ATTACH_API_V1: \/\/ <ver>0<cmd>0<arg>0<arg>0<arg>0\n+    \/\/ Always contain a command (up to name_length_max symbols)\n+    \/\/ and arg_count_max(3) arguments (each up to arg_length_max symbols).\n+    buffer_size = (name_length_max + 1) + arg_count_max * (arg_length_max + 1);\n+    min_str_count = 1 \/*name*\/ + arg_count_max;\n+    break;\n+  case ATTACH_API_V2: \/\/ <ver>0<size>0<cmd>0<arg>0<arg>0<arg>0\n+    if (AttachListener::get_supported_version() < 2) {\n+        log_error(attach)(\"Failed to read request: v2 is unsupported ot disabled\");\n+        return false;\n+    }\n+\n+    \/\/ read size of the data\n+    buffer_size = reader->read_uint();\n+    if (buffer_size < 0) {\n+      return false;\n+    }\n+    log_debug(attach)(\"v2 request, data size = %d\", buffer_size);\n+\n+    \/\/ Sanity check: max request size is 256K.\n+    if (buffer_size > 256 * 1024) {\n+      log_error(attach)(\"Failed to read request: too big\");\n+      return false;\n+    }\n+    \/\/ Must contain exact 'buffer_size' bytes.\n+    min_read_size = buffer_size;\n+    break;\n+  default:\n+    log_error(attach)(\"Failed to read request: unknown version (%d)\", ver);\n+    return false;\n+  }\n+\n+  return read_request_data(reader, buffer_size, min_str_count, min_read_size);\n+}\n+\n","filename":"src\/hotspot\/share\/services\/attachListener.cpp","additions":48,"deletions":39,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -261,0 +261,3 @@\n+private:\n+  bool read_request_data(AttachOperation::RequestReader* reader, int buffer_size, int min_str_count, int min_read_size);\n+\n","filename":"src\/hotspot\/share\/services\/attachListener.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    private int ver = VERSION_1;        \/\/ updated by detectVersion on attach\n+    private int ver = VERSION_1;        \/\/ updated in ctor depending on detectVersion result\n","filename":"src\/jdk.attach\/windows\/classes\/sun\/tools\/attach\/VirtualMachineImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}