{"files":[{"patch":"@@ -2148,0 +2148,2 @@\n+  const TypeInt* cnt_type = cnt->bottom_type()->isa_int();\n+\n@@ -2150,1 +2152,0 @@\n-  const TypeInt* cnt_type = cnt->bottom_type()->isa_int();\n@@ -2719,1 +2720,1 @@\n-    log_if_needed(\"  ** unbox failed v1=%s\",\n+    log_if_needed(\"  ** unbox failed v2=%s\",\n@@ -2725,1 +2726,1 @@\n-    log_if_needed(\"  ** unbox failed v1=%s\",\n+    log_if_needed(\"  ** unbox failed v3=%s\",\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2116,1 +2116,0 @@\n-  assert(!is_floating_point_type(index_elem_bt), \"\");\n@@ -2119,1 +2118,1 @@\n-  \/\/ are held in a byte vector which are later massaged to target specific permutation\n+  \/\/ are held in a byte vector which are later transformed to target specific permutation\n@@ -2130,1 +2129,1 @@\n-  ConINode* pred_node = (ConINode*)phase->makecon(TypeInt::make(pred));\n+  ConINode* pred_node = phase->makecon(TypeInt::make(pred))->as_ConI();\n@@ -2137,1 +2136,1 @@\n-  \/\/ Load indexes from byte vector and appropriatly massage them to target specific\n+  \/\/ Load indexes from byte vector and appropriatly transform them to target specific\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1616,2 +1616,2 @@\n-\/\/ Selects elements from second and third vector based on the indices held in\n-\/\/ first vector two input vectors based on the indexes held in first vector.\n+\/\/ Select elements from two source vectors based on the wrapped indexes held in\n+\/\/ the first vector.\n@@ -1620,2 +1620,5 @@\n-  SelectFromTwoVectorNode(Node* index, Node* src1, Node* src2, const TypeVect* vt)\n-  : VectorNode(index, src1, src2, vt) {}\n+  SelectFromTwoVectorNode(Node* indexes, Node* src1, Node* src2, const TypeVect* vt)\n+  : VectorNode(indexes, src1, src2, vt) {\n+      assert(is_integral_type(indexes->bottom_type()->is_vect()->element_basic_type()),\n+             \"indexes must be an integral vector\");\n+  }\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2597,5 +2597,5 @@\n-        int twoVectorLen = length() * 2;\n-        ByteVector wrapped_indexes = this.lanewise(VectorOperators.AND, twoVectorLen - 1);\n-        return (ByteVector)VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass, byte.class, byte.class,\n-                                                              length(), wrapped_indexes, v1, v2,\n-                                                              (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n+        int twoVectorLenMask = (length() << 1) - 1;\n+        ByteVector wrapped_indexes = this.lanewise(VectorOperators.AND, twoVectorLenMask);\n+        return VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass, byte.class, byte.class,\n+                                                   length(), wrapped_indexes, v1, v2,\n+                                                   (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2439,7 +2439,6 @@\n-        int twoVectorLen = length() * 2;\n-        LongVector wrapped_indexes = this.convert(VectorOperators.D2L, 0)\n-                                                   .lanewise(VectorOperators.AND, twoVectorLen - 1)\n-                                                   .reinterpretAsLongs();\n-        return (DoubleVector)VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass , double.class,\n-                                                              long.class, length(), wrapped_indexes, v1, v2,\n-                                                              (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n+        int twoVectorLenMask = (length() << 1) - 1;\n+        Vector<Long> wrapped_indexes = this.convert(VectorOperators.D2L, 0)\n+                                                   .lanewise(VectorOperators.AND, twoVectorLenMask);\n+        return VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass , double.class, long.class,\n+                                                   length(), wrapped_indexes, v1, v2,\n+                                                   (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2451,7 +2451,6 @@\n-        int twoVectorLen = length() * 2;\n-        IntVector wrapped_indexes = this.convert(VectorOperators.F2I, 0)\n-                                                   .lanewise(VectorOperators.AND, twoVectorLen - 1)\n-                                                   .reinterpretAsInts();\n-        return (FloatVector)VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass , float.class,\n-                                                              int.class, length(), wrapped_indexes, v1, v2,\n-                                                              (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n+        int twoVectorLenMask = (length() << 1) - 1;\n+        Vector<Integer> wrapped_indexes = this.convert(VectorOperators.F2I, 0)\n+                                                   .lanewise(VectorOperators.AND, twoVectorLenMask);\n+        return VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass , float.class, int.class,\n+                                                   length(), wrapped_indexes, v1, v2,\n+                                                   (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2582,5 +2582,5 @@\n-        int twoVectorLen = length() * 2;\n-        IntVector wrapped_indexes = this.lanewise(VectorOperators.AND, twoVectorLen - 1);\n-        return (IntVector)VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass, int.class, int.class,\n-                                                              length(), wrapped_indexes, v1, v2,\n-                                                              (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n+        int twoVectorLenMask = (length() << 1) - 1;\n+        IntVector wrapped_indexes = this.lanewise(VectorOperators.AND, twoVectorLenMask);\n+        return VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass, int.class, int.class,\n+                                                   length(), wrapped_indexes, v1, v2,\n+                                                   (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2448,5 +2448,5 @@\n-        int twoVectorLen = length() * 2;\n-        LongVector wrapped_indexes = this.lanewise(VectorOperators.AND, twoVectorLen - 1);\n-        return (LongVector)VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass, long.class, long.class,\n-                                                              length(), wrapped_indexes, v1, v2,\n-                                                              (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n+        int twoVectorLenMask = (length() << 1) - 1;\n+        LongVector wrapped_indexes = this.lanewise(VectorOperators.AND, twoVectorLenMask);\n+        return VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass, long.class, long.class,\n+                                                   length(), wrapped_indexes, v1, v2,\n+                                                   (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2598,5 +2598,5 @@\n-        int twoVectorLen = length() * 2;\n-        ShortVector wrapped_indexes = this.lanewise(VectorOperators.AND, twoVectorLen - 1);\n-        return (ShortVector)VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass, short.class, short.class,\n-                                                              length(), wrapped_indexes, v1, v2,\n-                                                              (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n+        int twoVectorLenMask = (length() << 1) - 1;\n+        ShortVector wrapped_indexes = this.lanewise(VectorOperators.AND, twoVectorLenMask);\n+        return VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass, short.class, short.class,\n+                                                   length(), wrapped_indexes, v1, v2,\n+                                                   (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2974,1 +2974,1 @@\n-        int twoVectorLen = length() * 2;\n+        int twoVectorLenMask = (length() << 1) - 1;\n@@ -2976,6 +2976,5 @@\n-        $abstractbitsvectortype$ wrapped_indexes = this.convert(VectorOperators.{#if[intOrFloat]?F2I:D2L}, 0)\n-                                                   .lanewise(VectorOperators.AND, twoVectorLen - 1)\n-                                                   .reinterpretAs$Bitstype$s();\n-        return ($Type$Vector)VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass , $type$.class,\n-                                                              $bitstype$.class, length(), wrapped_indexes, v1, v2,\n-                                                              (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n+        Vector<$Boxbitstype$> wrapped_indexes = this.convert(VectorOperators.{#if[intOrFloat]?F2I:D2L}, 0)\n+                                                   .lanewise(VectorOperators.AND, twoVectorLenMask);\n+        return VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass , $type$.class, $bitstype$.class,\n+                                                   length(), wrapped_indexes, v1, v2,\n+                                                   (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n@@ -2984,4 +2983,4 @@\n-        $abstractvectortype$ wrapped_indexes = this.lanewise(VectorOperators.AND, twoVectorLen - 1);\n-        return ($Type$Vector)VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass, $type$.class, $type$.class,\n-                                                              length(), wrapped_indexes, v1, v2,\n-                                                              (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n+        $abstractvectortype$ wrapped_indexes = this.lanewise(VectorOperators.AND, twoVectorLenMask);\n+        return VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass, $type$.class, $type$.class,\n+                                                   length(), wrapped_indexes, v1, v2,\n+                                                   (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -318,0 +318,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -321,3 +323,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -328,4 +331,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1013,1 +1013,1 @@\n-                            i -> (byte)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (byte)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -318,0 +318,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -321,3 +323,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -328,4 +331,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1013,1 +1013,1 @@\n-                            i -> (byte)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (byte)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -318,0 +318,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -321,3 +323,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -328,4 +331,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1013,1 +1013,1 @@\n-                            i -> (byte)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (byte)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -318,0 +318,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -321,3 +323,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -328,4 +331,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1013,1 +1013,1 @@\n-                            i -> (byte)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (byte)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -323,0 +323,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -326,3 +328,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -333,4 +336,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1018,1 +1018,1 @@\n-                            i -> (byte)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (byte)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -335,0 +335,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -338,3 +340,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -345,4 +348,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1157,1 +1157,1 @@\n-                            i -> (double)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (double)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -335,0 +335,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -338,3 +340,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -345,4 +348,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1157,1 +1157,1 @@\n-                            i -> (double)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (double)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -335,0 +335,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -338,3 +340,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -345,4 +348,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1157,1 +1157,1 @@\n-                            i -> (double)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (double)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -335,0 +335,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -338,3 +340,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -345,4 +348,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1157,1 +1157,1 @@\n-                            i -> (double)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (double)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -340,0 +340,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -343,3 +345,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -350,4 +353,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1162,1 +1162,1 @@\n-                            i -> (double)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (double)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -335,0 +335,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -338,3 +340,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -345,4 +348,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1168,1 +1168,1 @@\n-                            i -> (float)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (float)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -335,0 +335,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -338,3 +340,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -345,4 +348,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1168,1 +1168,1 @@\n-                            i -> (float)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (float)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -335,0 +335,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -338,3 +340,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -345,4 +348,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1168,1 +1168,1 @@\n-                            i -> (float)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (float)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -335,0 +335,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -338,3 +340,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -345,4 +348,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1168,1 +1168,1 @@\n-                            i -> (float)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (float)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -340,0 +340,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -343,3 +345,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -350,4 +353,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1173,1 +1173,1 @@\n-                            i -> (float)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (float)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -318,0 +318,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -321,3 +323,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -328,4 +331,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1003,1 +1003,1 @@\n-                            i -> (int)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (int)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -318,0 +318,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -321,3 +323,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -328,4 +331,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1003,1 +1003,1 @@\n-                            i -> (int)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (int)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -318,0 +318,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -321,3 +323,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -328,4 +331,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1003,1 +1003,1 @@\n-                            i -> (int)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (int)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -318,0 +318,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -321,3 +323,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -328,4 +331,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1003,1 +1003,1 @@\n-                            i -> (int)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (int)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -323,0 +323,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -326,3 +328,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -333,4 +336,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1008,1 +1008,1 @@\n-                            i -> (int)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (int)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -275,0 +275,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -278,3 +280,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -285,4 +288,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -993,1 +993,1 @@\n-                            i -> (long)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (long)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -275,0 +275,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -278,3 +280,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -285,4 +288,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -993,1 +993,1 @@\n-                            i -> (long)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (long)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -275,0 +275,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -278,3 +280,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -285,4 +288,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -993,1 +993,1 @@\n-                            i -> (long)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (long)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -275,0 +275,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -278,3 +280,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -285,4 +288,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -993,1 +993,1 @@\n-                            i -> (long)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (long)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -280,0 +280,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -283,3 +285,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -290,4 +293,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -998,1 +998,1 @@\n-                            i -> (long)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (long)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -318,0 +318,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -321,3 +323,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -328,4 +331,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1003,1 +1003,1 @@\n-                            i -> (short)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (short)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -318,0 +318,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -321,3 +323,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -328,4 +331,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1003,1 +1003,1 @@\n-                            i -> (short)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (short)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -318,0 +318,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -321,3 +323,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -328,4 +331,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1003,1 +1003,1 @@\n-                            i -> (short)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (short)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -318,0 +318,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -321,3 +323,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -328,4 +331,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1003,1 +1003,1 @@\n-                            i -> (short)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (short)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -323,0 +323,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -326,3 +328,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -333,4 +336,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1008,1 +1008,1 @@\n-                            i -> (short)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> (short)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -401,0 +401,2 @@\n+        boolean is_exceptional_idx = false;\n+        int idx = 0, wrapped_index = 0, oidx = 0;\n@@ -404,3 +406,4 @@\n-                    int idx = i + j;\n-                    boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-                    int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n+                    idx = i + j;\n+                    wrapped_index =(((int)order[idx]) & (2 * vector_len -1));\n+                    is_exceptional_idx = wrapped_index >= vector_len;\n+                    oidx = is_exceptional_idx ? (wrapped_index - vector_len) : wrapped_index;\n@@ -411,4 +414,1 @@\n-            int idx = i + j;\n-            boolean is_exceptional_idx = (int)order[idx] >= vector_len;\n-            int oidx = is_exceptional_idx ? ((int)order[idx] - vector_len) : (int)order[idx];\n-            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + (int)order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n+            Assert.assertEquals(r[idx], (is_exceptional_idx ? b[i + oidx] : a[i + oidx]), \"at index #\" + idx + \", order = \" + order[idx] + \", a = \" + a[i + oidx] + \", b = \" + b[i + oidx]);\n@@ -1260,1 +1260,1 @@\n-                            i -> ($type$)(RAND.nextInt(SPECIES.length() * 2)));\n+                            i -> ($type$)(RAND.nextInt()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}