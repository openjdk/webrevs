{"files":[{"patch":"@@ -180,4 +180,0 @@\n-  static bool vector_indexes_needs_pruning(BasicType bt, int vlen) {\n-    return false;\n-  }\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/matcher_aarch64.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -173,4 +173,0 @@\n-  static bool vector_indexes_needs_pruning(BasicType bt, int vlen) {\n-    return false;\n-  }\n-\n","filename":"src\/hotspot\/cpu\/arm\/matcher_arm.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -182,4 +182,0 @@\n-  static bool vector_indexes_needs_pruning(BasicType bt, int vlen) {\n-    return false;\n-  }\n-\n","filename":"src\/hotspot\/cpu\/ppc\/matcher_ppc.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -179,4 +179,0 @@\n-  static bool vector_indexes_needs_pruning(BasicType bt, int vlen) {\n-    return false;\n-  }\n-\n","filename":"src\/hotspot\/cpu\/riscv\/matcher_riscv.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -171,4 +171,0 @@\n-  static bool vector_indexes_needs_pruning(BasicType bt, int vlen) {\n-    return false;\n-  }\n-\n","filename":"src\/hotspot\/cpu\/s390\/matcher_s390.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6462,1 +6462,0 @@\n-      vcvttps2dq(dst, dst, vlen_enc);\n@@ -6466,1 +6465,0 @@\n-      evcvttpd2qq(dst, dst, vlen_enc);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -215,12 +215,0 @@\n-  static bool vector_indexes_needs_pruning(BasicType bt, int vlen) {\n-     switch(bt) {\n-       default:\n-         return false;\n-       case T_SHORT:\n-         return !VM_Version::supports_avx512bw();\n-       case T_LONG:\n-       case T_DOUBLE:\n-         return !VM_Version::supports_avx512vl();\n-     }\n-  }\n-\n","filename":"src\/hotspot\/cpu\/x86\/matcher_x86.hpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1948,4 +1948,1 @@\n-       if ((bt == T_INT || bt == T_FLOAT) && !VM_Version::supports_evex()) {\n-         return false;\n-       }\n-       if (bt == T_DOUBLE && !VM_Version::supports_avx512dq()) {\n+       if ((bt == T_INT || bt == T_FLOAT || bt == T_DOUBLE) && !VM_Version::supports_evex()) {\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -981,0 +981,2 @@\n+                                            \"Ljava\/lang\/Class;\"                                                                                \\\n+                                            \"Ljava\/lang\/Class;\"                                                                                \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2635,6 +2635,9 @@\n-\/\/ public static\n-\/\/ <V extends Vector<E>,\n-\/\/  E>\n-\/\/ V selectFromTwoVectorOp(Class<? extends V> vClass, Class<E> eClass, int length,\n-\/\/                         V v1, V v2, V v3,\n-\/\/                         SelectFromTwoVector<V> defaultImpl)\n+\/\/  public static\n+\/\/  <V extends Vector<E1>,\n+\/\/   VI extends Vector<E2>,\n+\/\/   E1,\n+\/\/   E2>\n+\/\/  V selectFromTwoVectorOp(Class<? extends V> vClass, Class<? extends VI> viClass,\n+\/\/                          Class<E1> eClass, Class<E2> iClass, int length,\n+\/\/                          VI v1, V v2, V v3,\n+\/\/                          SelectFromTwoVector<V> defaultImpl)\n@@ -2643,7 +2646,10 @@\n-  const TypeInstPtr* elem_klass   = gvn().type(argument(1))->isa_instptr();\n-  const TypeInt*     vlen         = gvn().type(argument(2))->isa_int();\n-\n-  if (vector_klass == nullptr || elem_klass == nullptr ||  vlen == nullptr ||\n-      vector_klass->const_oop() == nullptr || elem_klass->const_oop() == nullptr ||\n-      !vlen->is_con()) {\n-    log_if_needed(\"  ** missing constant: vclass=%s etype=%s vlen=%s\",\n+  const TypeInstPtr* index_vector_klass = gvn().type(argument(1))->isa_instptr();\n+  const TypeInstPtr* elem_klass = gvn().type(argument(2))->isa_instptr();\n+  const TypeInstPtr* index_elem_klass = gvn().type(argument(3))->isa_instptr();\n+  const TypeInt* vlen = gvn().type(argument(4))->isa_int();\n+\n+  if (vector_klass == nullptr || index_vector_klass == nullptr || elem_klass == nullptr ||\n+      index_elem_klass == nullptr || vlen == nullptr || vector_klass->const_oop() == nullptr ||\n+      index_vector_klass->const_oop() == nullptr || elem_klass->const_oop() == nullptr ||\n+      index_elem_klass->const_oop() == nullptr || !vlen->is_con()) {\n+    log_if_needed(\"  ** missing constant: vclass=%s viclass = %s etype=%s itype = %s vlen=%s\",\n@@ -2652,1 +2658,3 @@\n-                    NodeClassNames[argument(2)->Opcode()]);\n+                    NodeClassNames[argument(2)->Opcode()],\n+                    NodeClassNames[argument(3)->Opcode()],\n+                    NodeClassNames[argument(4)->Opcode()]);\n@@ -2661,0 +2669,5 @@\n+  if (!is_klass_initialized(index_vector_klass)) {\n+    log_if_needed(\"  ** klass argument not initialized\");\n+    return false;\n+  }\n+\n@@ -2667,0 +2680,6 @@\n+  ciType* index_elem_type = index_elem_klass->const_oop()->as_instance()->java_mirror_type();\n+  if (!index_elem_type->is_primitive_type()) {\n+    log_if_needed(\"  ** index element not a primitive bt=%d\", index_elem_type->basic_type());\n+    return false; \/\/ should be primitive type\n+  }\n+\n@@ -2669,0 +2688,2 @@\n+  BasicType index_elem_bt = index_elem_type->basic_type();\n+  assert(!is_floating_point_type(index_elem_bt), \"floating point index element type\");\n@@ -2671,9 +2692,8 @@\n-    int opc = VectorSupport::vop2ideal(VectorSupport::VECTOR_OP_SUB, elem_bt);\n-    int sopc = VectorNode::opcode(opc, elem_bt);\n-    if (!arch_supports_vector(Op_VectorMaskCmp, num_elem, elem_bt, VecMaskNotUsed)   ||\n-        !arch_supports_vector(Op_VectorBlend, num_elem, elem_bt, VecMaskUseLoad)     ||\n-        !arch_supports_vector(Op_VectorRearrange, num_elem, elem_bt, VecMaskNotUsed) ||\n-        (!is_integral_type(elem_bt) &&\n-          ((elem_bt == T_FLOAT && !arch_supports_vector(Op_VectorCastF2X, num_elem, T_INT, VecMaskNotUsed))     ||\n-           (elem_bt == T_DOUBLE && !arch_supports_vector(Op_VectorCastD2X, num_elem, T_LONG, VecMaskNotUsed)))) ||\n-        !arch_supports_vector(sopc, num_elem, elem_bt, VecMaskNotUsed)) {\n+    int cast_vopc = VectorCastNode::opcode(-1, index_elem_bt, true);\n+    if (!arch_supports_vector(Op_VectorMaskCmp, num_elem, T_BYTE, VecMaskNotUsed)            ||\n+        !arch_supports_vector(Op_AndV, num_elem, T_BYTE, VecMaskNotUsed)                     ||\n+        !arch_supports_vector(Op_VectorBlend, num_elem, elem_bt, VecMaskUseLoad)             ||\n+        !arch_supports_vector(Op_VectorRearrange, num_elem, elem_bt, VecMaskNotUsed)         ||\n+        !arch_supports_vector(cast_vopc, num_elem, T_BYTE, VecMaskNotUsed)                   ||\n+        !arch_supports_vector(Op_VectorLoadShuffle, num_elem, index_elem_bt, VecMaskNotUsed) ||\n+        !arch_supports_vector(Op_Replicate, num_elem, T_BYTE, VecMaskNotUsed)) {\n@@ -2687,0 +2707,1 @@\n+  ciKlass* index_vbox_klass = index_vector_klass->const_oop()->as_instance()->java_lang_Class_klass();\n@@ -2688,0 +2709,1 @@\n+  const TypeInstPtr* index_vbox_type = TypeInstPtr::make_exact(TypePtr::NotNull, index_vbox_klass);\n@@ -2689,1 +2711,1 @@\n-  Node* opd1 = unbox_vector(argument(3), vbox_type, elem_bt, num_elem);\n+  Node* opd1 = unbox_vector(argument(5), index_vbox_type, index_elem_bt, num_elem);\n@@ -2692,1 +2714,1 @@\n-                  NodeClassNames[argument(3)->Opcode()]);\n+                  NodeClassNames[argument(5)->Opcode()]);\n@@ -2695,1 +2717,1 @@\n-  Node* opd2 = unbox_vector(argument(4), vbox_type, elem_bt, num_elem);\n+  Node* opd2 = unbox_vector(argument(6), vbox_type, elem_bt, num_elem);\n@@ -2698,1 +2720,1 @@\n-                  NodeClassNames[argument(4)->Opcode()]);\n+                  NodeClassNames[argument(6)->Opcode()]);\n@@ -2701,1 +2723,1 @@\n-  Node* opd3 = unbox_vector(argument(5), vbox_type, elem_bt, num_elem);\n+  Node* opd3 = unbox_vector(argument(7), vbox_type, elem_bt, num_elem);\n@@ -2704,1 +2726,1 @@\n-                  NodeClassNames[argument(5)->Opcode()]);\n+                  NodeClassNames[argument(7)->Opcode()]);\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":51,"deletions":29,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -2090,0 +2090,1 @@\n+\n@@ -2094,0 +2095,1 @@\n+\n@@ -2101,2 +2103,2 @@\n-  \/\/         (VectorRearrange SRC1 INDEX)\n-  \/\/         (VectorRearrange SRC2 NORM_INDEX)\n+  \/\/         (VectorRearrange SRC1 (WRAPED_INDEX AND (VLEN-1))\n+  \/\/         (VectorRearrange SRC2 (WRAPED_INDEX AND (VLEN-1))\n@@ -2104,0 +2106,3 @@\n+  \/\/ Where\n+  \/\/   incoming WRAPED_INDEX is within two vector index range [0, VLEN*2) and\n+  \/\/   MASK = WRAPED_INDEX < VLEN\n@@ -2105,3 +2110,1 @@\n-  \/\/ MASK = INDEX < num_elem\n-  \/\/\n-  \/\/ This shall prevent an intrinsification failure and associated argument\n+  \/\/ IR lowering prevents intrinsification failure and associated argument\n@@ -2109,3 +2112,1 @@\n-  \/\/ Here, MASK lanes corresponding to INDEX values greater than or equal to\n-  \/\/ vector length (VELEN) are set and are used to select the elements from\n-  \/\/ second source (SRC2) vector.\n+  \/\/\n@@ -2113,16 +2114,3 @@\n-  const Type* lane_count_type = nullptr;\n-  switch(elem_bt) {\n-    case T_BYTE:\n-    case T_SHORT:\n-    case T_INT:\n-    case T_FLOAT:\n-      lane_count_type = TypeInt::make(num_elem);\n-      break;\n-    case T_DOUBLE:\n-    case T_LONG:\n-      lane_count_type = TypeLong::make(num_elem);\n-      break;\n-    default:\n-      fatal(\"Unsupported vectortype (%s)\", type2name(elem_bt));\n-      break;\n-  }\n+  const TypeVect* index_vect_type = index_vec->bottom_type()->is_vect();\n+  BasicType index_elem_bt = index_vect_type->element_basic_type();\n+  assert(!is_floating_point_type(index_elem_bt), \"\");\n@@ -2130,9 +2118,5 @@\n-  BasicType integral_elem_bt = elem_bt;\n-  Node* integral_index_vec = index_vec;\n-  if (elem_bt == T_FLOAT) {\n-      integral_elem_bt = T_INT;\n-      integral_index_vec = phase->transform(new VectorCastF2XNode(index_vec, TypeVect::make(integral_elem_bt, num_elem)));\n-  } else if (elem_bt == T_DOUBLE) {\n-      integral_elem_bt = T_LONG;\n-      integral_index_vec = phase->transform(new VectorCastD2XNode(index_vec, TypeVect::make(integral_elem_bt, num_elem)));\n-  }\n+  \/\/ Downcast index vector to a type agnostic shuffle representation, shuffle indices\n+  \/\/ are held in a byte vector which are later massaged to target specific permutation\n+  \/\/ index format by subsequent VectorLoadShuffle.\n+  int cast_vopc = VectorCastNode::opcode(0, index_elem_bt, true);\n+  Node* index_byte_vec = phase->transform(VectorCastNode::make(cast_vopc, index_vec, T_BYTE, num_elem));\n@@ -2140,2 +2124,2 @@\n-  int opc = VectorSupport::vop2ideal(VectorSupport::VECTOR_OP_SUB, integral_elem_bt);\n-  int sopc = VectorNode::opcode(opc, integral_elem_bt);\n+  Node* lane_cnt_m1 = phase->makecon(TypeInt::make(num_elem - 1));\n+  Node* bcast_lane_cnt_m1_vec = phase->transform(VectorNode::scalar2vector(lane_cnt_m1, num_elem, Type::get_const_basic_type(T_BYTE), false));\n@@ -2143,1 +2127,3 @@\n-  BoolTest::mask pred = BoolTest::lt;\n+  \/\/ Compute the blend mask for merging two indipendently permututed vectors\n+  \/\/ using shuff index in two vector index range [0, VLEN * 2).\n+  BoolTest::mask pred = BoolTest::le;\n@@ -2145,2 +2131,5 @@\n-  Node* lane_cnt = phase->makecon(lane_count_type);\n-  Node* bcast_lane_cnt_vec = phase->transform(VectorNode::scalar2vector(lane_cnt, num_elem, Type::get_const_basic_type(integral_elem_bt), false));\n+  const TypeVect* vmask_type = TypeVect::makemask(T_BYTE, num_elem);\n+  Node* mask = phase->transform(new VectorMaskCmpNode(pred, index_byte_vec, bcast_lane_cnt_m1_vec, pred_node, vmask_type));\n+\n+  \/\/ Rearrange expects the indexes to lie within single vector index range [0, VLEN).\n+  index_byte_vec = phase->transform(VectorNode::make(Op_AndV, index_byte_vec, bcast_lane_cnt_m1_vec, index_byte_vec->bottom_type()->is_vect()));\n@@ -2148,4 +2137,3 @@\n-  \/\/ Comparison over integral vectors weeds out emitting additional\n-  \/\/ instructions for checking special floating point values.\n-  const TypeVect* vmask_type = TypeVect::makemask(integral_elem_bt, num_elem);\n-  Node* mask = phase->transform(new VectorMaskCmpNode(pred, integral_index_vec, bcast_lane_cnt_vec, pred_node, vmask_type));\n+  \/\/ Load indexes from byte vector and appropriatly massage them to target specific\n+  \/\/ permutation index format.\n+  index_vec = phase->transform(new VectorLoadShuffleNode(index_byte_vec, index_vect_type));\n@@ -2156,3 +2144,2 @@\n-  Node* p1 = phase->transform(new VectorRearrangeNode(src1, integral_index_vec));\n-  Node* normalized_index_vec = phase->transform(VectorNode::make(sopc, integral_index_vec, bcast_lane_cnt_vec, vect_type()));\n-  Node* p2 = phase->transform(new VectorRearrangeNode(src2, normalized_index_vec));\n+  Node* p1 = phase->transform(new VectorRearrangeNode(src1, index_vec));\n+  Node* p2 = phase->transform(new VectorRearrangeNode(src2, index_vec));\n@@ -2163,27 +2150,0 @@\n-Node* VectorRearrangeNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n-  BasicType elem_bt = vect_type()->element_basic_type();\n-  int num_elem = vect_type()->length();\n-  if (in(2)->Opcode() != Op_VectorUnbox &&\n-      in(2)->Opcode() != Op_VectorLoadShuffle &&\n-      Matcher::match_rule_supported_vector(Op_VectorRearrange, num_elem, elem_bt) &&\n-      Matcher::vector_indexes_needs_pruning(elem_bt, num_elem)) {\n-\n-    BasicType integral_elem_bt = elem_bt;\n-    if (elem_bt == T_FLOAT) {\n-      integral_elem_bt = T_INT;\n-    } else if (elem_bt == T_DOUBLE) {\n-      integral_elem_bt = T_LONG;\n-    }\n-\n-    \/\/ Targets emulating unsupported permutation for certain vector types\n-    \/\/ may need to massage the indexes to match the users intent.\n-    \/\/ Lowering index vector to a bytevector followed by an explicit loadshuffle\n-    \/\/ will bring the indexes in the consumable format.\n-    int cast_opc = VectorCastNode::opcode(-1, elem_bt, true);\n-    Node* pack_shuf = phase->transform(VectorCastNode::make(cast_opc, in(2), T_BYTE, num_elem));\n-    const TypeVect* newvt = TypeVect::make(integral_elem_bt, num_elem);\n-    Node* unpack_shuf = phase->transform(new VectorLoadShuffleNode(pack_shuf, newvt));\n-    return new VectorRearrangeNode(in(1), unpack_shuf);\n-  }\n-  return nullptr;\n-}\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":32,"deletions":72,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -1610,1 +1610,0 @@\n-  Node* Ideal(PhaseGVN* phase, bool can_reshape);\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -386,2 +386,2 @@\n-    public interface SelectFromTwoVector<V extends Vector<?>> {\n-        V apply(V v1, V v2, V v3);\n+    public interface SelectFromTwoVector<V extends Vector<?>, VI extends Vector<?>> {\n+        V apply(VI v1, V v2, V v3);\n@@ -392,5 +392,8 @@\n-    <V extends Vector<E>,\n-     E>\n-    V selectFromTwoVectorOp(Class<? extends V> vClass, Class<E> eClass, int length,\n-                             V v1, V v2, V v3,\n-                             SelectFromTwoVector<V> defaultImpl) {\n+    <V extends Vector<E1>,\n+     VI extends Vector<E2>,\n+     E1,\n+     E2>\n+    V selectFromTwoVectorOp(Class<? extends V> vClass, Class<? extends VI> viClass,\n+                            Class<E1> eClass, Class<E2> iClass, int length,\n+                            VI v1, V v2, V v3,\n+                            SelectFromTwoVector<V,VI> defaultImpl) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate((Byte128Vector) v1, (Byte128Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate(Byte128Vector.class, (Byte128Vector) v1, (Byte128Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate((Byte256Vector) v1, (Byte256Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate(Byte256Vector.class, (Byte256Vector) v1, (Byte256Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate((Byte512Vector) v1, (Byte512Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate(Byte512Vector.class, (Byte512Vector) v1, (Byte512Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate((Byte64Vector) v1, (Byte64Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate(Byte64Vector.class, (Byte64Vector) v1, (Byte64Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate((ByteMaxVector) v1, (ByteMaxVector) v2);  \/\/ specialize\n+            super.selectFromTemplate(ByteMaxVector.class, (ByteMaxVector) v1, (ByteMaxVector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -542,3 +542,3 @@\n-        byte[] vpayload1 = ((ByteVector)v1).vec();\n-        byte[] vpayload2 = ((ByteVector)v2).vec();\n-        byte[] vpayload3 = ((ByteVector)v3).vec();\n+        byte[] vecPayload1 = ((ByteVector)v1).vec();\n+        byte[] vecPayload2 = ((ByteVector)v2).vec();\n+        byte[] vecPayload3 = ((ByteVector)v3).vec();\n@@ -546,2 +546,2 @@\n-            int index = ((int)vpayload1[i]);\n-            res[i] = index >= vlen ? vpayload3[index & (vlen - 1)] : vpayload2[index];\n+            int index = ((int)vecPayload1[i]);\n+            res[i] = index >= vlen ? vecPayload3[index & (vlen - 1)] : vecPayload2[index];\n@@ -549,1 +549,1 @@\n-        return ((ByteVector)v1).vectorFactory(res);\n+        return ((ByteVector)v2).vectorFactory(res);\n@@ -2592,0 +2592,1 @@\n+\n@@ -2594,1 +2595,2 @@\n-    final ByteVector selectFromTemplate(ByteVector v1, ByteVector v2) {\n+    final ByteVector selectFromTemplate(Class<? extends Vector<Byte>> indexVecClass,\n+                                                  ByteVector v1, ByteVector v2) {\n@@ -2597,2 +2599,3 @@\n-        return (ByteVector)VectorSupport.selectFromTwoVectorOp(getClass(), byte.class, length(), wrapped_indexes, v1, v2,\n-            (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n+        return (ByteVector)VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass, byte.class, byte.class,\n+                                                              length(), wrapped_indexes, v1, v2,\n+                                                              (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-            super.selectFromTemplate((Double128Vector) v1, (Double128Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate(Long128Vector.class, (Double128Vector) v1, (Double128Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-            super.selectFromTemplate((Double256Vector) v1, (Double256Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate(Long256Vector.class, (Double256Vector) v1, (Double256Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-            super.selectFromTemplate((Double512Vector) v1, (Double512Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate(Long512Vector.class, (Double512Vector) v1, (Double512Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-            super.selectFromTemplate((Double64Vector) v1, (Double64Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate(Long64Vector.class, (Double64Vector) v1, (Double64Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-            super.selectFromTemplate((DoubleMaxVector) v1, (DoubleMaxVector) v2);  \/\/ specialize\n+            super.selectFromTemplate(LongMaxVector.class, (DoubleMaxVector) v1, (DoubleMaxVector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -528,1 +528,1 @@\n-    static DoubleVector selectFromTwoVectorHelper(Vector<Double> v1, Vector<Double> v2, Vector<Double> v3) {\n+    static DoubleVector selectFromTwoVectorHelper(Vector<Long> v1, Vector<Double> v2, Vector<Double> v3) {\n@@ -531,3 +531,3 @@\n-        double[] vpayload1 = ((DoubleVector)v1).vec();\n-        double[] vpayload2 = ((DoubleVector)v2).vec();\n-        double[] vpayload3 = ((DoubleVector)v3).vec();\n+        long[] vecPayload1 = ((LongVector)v1).vec();\n+        double[] vecPayload2 = ((DoubleVector)v2).vec();\n+        double[] vecPayload3 = ((DoubleVector)v3).vec();\n@@ -535,2 +535,2 @@\n-            int index = ((int)vpayload1[i]);\n-            res[i] = index >= vlen ? vpayload3[index & (vlen - 1)] : vpayload2[index];\n+            int index = ((int)vecPayload1[i]);\n+            res[i] = index >= vlen ? vecPayload3[index & (vlen - 1)] : vecPayload2[index];\n@@ -538,1 +538,1 @@\n-        return ((DoubleVector)v1).vectorFactory(res);\n+        return ((DoubleVector)v2).vectorFactory(res);\n@@ -2434,0 +2434,1 @@\n+\n@@ -2436,1 +2437,2 @@\n-    final DoubleVector selectFromTemplate(DoubleVector v1, DoubleVector v2) {\n+    final DoubleVector selectFromTemplate(Class<? extends Vector<Long>> indexVecClass,\n+                                                  DoubleVector v1, DoubleVector v2) {\n@@ -2438,7 +2440,6 @@\n-        DoubleVector wrapped_indexes = this.convert(VectorOperators.D2I, 0)\n-                                               .lanewise(VectorOperators.AND, twoVectorLen - 1)\n-                                               .reinterpretAsInts()\n-                                               .convert(VectorOperators.I2D, 0)\n-                                               .reinterpretAsDoubles();\n-        return (DoubleVector)VectorSupport.selectFromTwoVectorOp(getClass(), double.class, length(), wrapped_indexes, v1, v2,\n-            (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n+        LongVector wrapped_indexes = this.convert(VectorOperators.D2L, 0)\n+                                                   .lanewise(VectorOperators.AND, twoVectorLen - 1)\n+                                                   .reinterpretAsLongs();\n+        return (DoubleVector)VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass , double.class,\n+                                                              long.class, length(), wrapped_indexes, v1, v2,\n+                                                              (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-            super.selectFromTemplate((Float128Vector) v1, (Float128Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate(Int128Vector.class, (Float128Vector) v1, (Float128Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-            super.selectFromTemplate((Float256Vector) v1, (Float256Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate(Int256Vector.class, (Float256Vector) v1, (Float256Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-            super.selectFromTemplate((Float512Vector) v1, (Float512Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate(Int512Vector.class, (Float512Vector) v1, (Float512Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-            super.selectFromTemplate((Float64Vector) v1, (Float64Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate(Int64Vector.class, (Float64Vector) v1, (Float64Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-            super.selectFromTemplate((FloatMaxVector) v1, (FloatMaxVector) v2);  \/\/ specialize\n+            super.selectFromTemplate(IntMaxVector.class, (FloatMaxVector) v1, (FloatMaxVector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -528,1 +528,1 @@\n-    static FloatVector selectFromTwoVectorHelper(Vector<Float> v1, Vector<Float> v2, Vector<Float> v3) {\n+    static FloatVector selectFromTwoVectorHelper(Vector<Integer> v1, Vector<Float> v2, Vector<Float> v3) {\n@@ -531,3 +531,3 @@\n-        float[] vpayload1 = ((FloatVector)v1).vec();\n-        float[] vpayload2 = ((FloatVector)v2).vec();\n-        float[] vpayload3 = ((FloatVector)v3).vec();\n+        int[] vecPayload1 = ((IntVector)v1).vec();\n+        float[] vecPayload2 = ((FloatVector)v2).vec();\n+        float[] vecPayload3 = ((FloatVector)v3).vec();\n@@ -535,2 +535,2 @@\n-            int index = ((int)vpayload1[i]);\n-            res[i] = index >= vlen ? vpayload3[index & (vlen - 1)] : vpayload2[index];\n+            int index = ((int)vecPayload1[i]);\n+            res[i] = index >= vlen ? vecPayload3[index & (vlen - 1)] : vecPayload2[index];\n@@ -538,1 +538,1 @@\n-        return ((FloatVector)v1).vectorFactory(res);\n+        return ((FloatVector)v2).vectorFactory(res);\n@@ -2446,0 +2446,1 @@\n+\n@@ -2448,1 +2449,2 @@\n-    final FloatVector selectFromTemplate(FloatVector v1, FloatVector v2) {\n+    final FloatVector selectFromTemplate(Class<? extends Vector<Integer>> indexVecClass,\n+                                                  FloatVector v1, FloatVector v2) {\n@@ -2450,7 +2452,6 @@\n-        FloatVector wrapped_indexes = this.convert(VectorOperators.F2I, 0)\n-                                               .lanewise(VectorOperators.AND, twoVectorLen - 1)\n-                                               .reinterpretAsInts()\n-                                               .convert(VectorOperators.I2F, 0)\n-                                               .reinterpretAsFloats();\n-        return (FloatVector)VectorSupport.selectFromTwoVectorOp(getClass(), float.class, length(), wrapped_indexes, v1, v2,\n-            (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n+        IntVector wrapped_indexes = this.convert(VectorOperators.F2I, 0)\n+                                                   .lanewise(VectorOperators.AND, twoVectorLen - 1)\n+                                                   .reinterpretAsInts();\n+        return (FloatVector)VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass , float.class,\n+                                                              int.class, length(), wrapped_indexes, v1, v2,\n+                                                              (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate((Int128Vector) v1, (Int128Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate(Int128Vector.class, (Int128Vector) v1, (Int128Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate((Int256Vector) v1, (Int256Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate(Int256Vector.class, (Int256Vector) v1, (Int256Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate((Int512Vector) v1, (Int512Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate(Int512Vector.class, (Int512Vector) v1, (Int512Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate((Int64Vector) v1, (Int64Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate(Int64Vector.class, (Int64Vector) v1, (Int64Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate((IntMaxVector) v1, (IntMaxVector) v2);  \/\/ specialize\n+            super.selectFromTemplate(IntMaxVector.class, (IntMaxVector) v1, (IntMaxVector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -542,3 +542,3 @@\n-        int[] vpayload1 = ((IntVector)v1).vec();\n-        int[] vpayload2 = ((IntVector)v2).vec();\n-        int[] vpayload3 = ((IntVector)v3).vec();\n+        int[] vecPayload1 = ((IntVector)v1).vec();\n+        int[] vecPayload2 = ((IntVector)v2).vec();\n+        int[] vecPayload3 = ((IntVector)v3).vec();\n@@ -546,2 +546,2 @@\n-            int index = ((int)vpayload1[i]);\n-            res[i] = index >= vlen ? vpayload3[index & (vlen - 1)] : vpayload2[index];\n+            int index = ((int)vecPayload1[i]);\n+            res[i] = index >= vlen ? vecPayload3[index & (vlen - 1)] : vecPayload2[index];\n@@ -549,1 +549,1 @@\n-        return ((IntVector)v1).vectorFactory(res);\n+        return ((IntVector)v2).vectorFactory(res);\n@@ -2577,0 +2577,1 @@\n+\n@@ -2579,1 +2580,2 @@\n-    final IntVector selectFromTemplate(IntVector v1, IntVector v2) {\n+    final IntVector selectFromTemplate(Class<? extends Vector<Integer>> indexVecClass,\n+                                                  IntVector v1, IntVector v2) {\n@@ -2582,2 +2584,3 @@\n-        return (IntVector)VectorSupport.selectFromTwoVectorOp(getClass(), int.class, length(), wrapped_indexes, v1, v2,\n-            (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n+        return (IntVector)VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass, int.class, int.class,\n+                                                              length(), wrapped_indexes, v1, v2,\n+                                                              (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -504,1 +504,1 @@\n-            super.selectFromTemplate((Long128Vector) v1, (Long128Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate(Long128Vector.class, (Long128Vector) v1, (Long128Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -504,1 +504,1 @@\n-            super.selectFromTemplate((Long256Vector) v1, (Long256Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate(Long256Vector.class, (Long256Vector) v1, (Long256Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -504,1 +504,1 @@\n-            super.selectFromTemplate((Long512Vector) v1, (Long512Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate(Long512Vector.class, (Long512Vector) v1, (Long512Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -504,1 +504,1 @@\n-            super.selectFromTemplate((Long64Vector) v1, (Long64Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate(Long64Vector.class, (Long64Vector) v1, (Long64Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -504,1 +504,1 @@\n-            super.selectFromTemplate((LongMaxVector) v1, (LongMaxVector) v2);  \/\/ specialize\n+            super.selectFromTemplate(LongMaxVector.class, (LongMaxVector) v1, (LongMaxVector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -542,3 +542,3 @@\n-        long[] vpayload1 = ((LongVector)v1).vec();\n-        long[] vpayload2 = ((LongVector)v2).vec();\n-        long[] vpayload3 = ((LongVector)v3).vec();\n+        long[] vecPayload1 = ((LongVector)v1).vec();\n+        long[] vecPayload2 = ((LongVector)v2).vec();\n+        long[] vecPayload3 = ((LongVector)v3).vec();\n@@ -546,2 +546,2 @@\n-            int index = ((int)vpayload1[i]);\n-            res[i] = index >= vlen ? vpayload3[index & (vlen - 1)] : vpayload2[index];\n+            int index = ((int)vecPayload1[i]);\n+            res[i] = index >= vlen ? vecPayload3[index & (vlen - 1)] : vecPayload2[index];\n@@ -549,1 +549,1 @@\n-        return ((LongVector)v1).vectorFactory(res);\n+        return ((LongVector)v2).vectorFactory(res);\n@@ -2443,0 +2443,1 @@\n+\n@@ -2445,1 +2446,2 @@\n-    final LongVector selectFromTemplate(LongVector v1, LongVector v2) {\n+    final LongVector selectFromTemplate(Class<? extends Vector<Long>> indexVecClass,\n+                                                  LongVector v1, LongVector v2) {\n@@ -2448,2 +2450,3 @@\n-        return (LongVector)VectorSupport.selectFromTwoVectorOp(getClass(), long.class, length(), wrapped_indexes, v1, v2,\n-            (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n+        return (LongVector)VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass, long.class, long.class,\n+                                                              length(), wrapped_indexes, v1, v2,\n+                                                              (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate((Short128Vector) v1, (Short128Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate(Short128Vector.class, (Short128Vector) v1, (Short128Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate((Short256Vector) v1, (Short256Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate(Short256Vector.class, (Short256Vector) v1, (Short256Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate((Short512Vector) v1, (Short512Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate(Short512Vector.class, (Short512Vector) v1, (Short512Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate((Short64Vector) v1, (Short64Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate(Short64Vector.class, (Short64Vector) v1, (Short64Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate((ShortMaxVector) v1, (ShortMaxVector) v2);  \/\/ specialize\n+            super.selectFromTemplate(ShortMaxVector.class, (ShortMaxVector) v1, (ShortMaxVector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -542,3 +542,3 @@\n-        short[] vpayload1 = ((ShortVector)v1).vec();\n-        short[] vpayload2 = ((ShortVector)v2).vec();\n-        short[] vpayload3 = ((ShortVector)v3).vec();\n+        short[] vecPayload1 = ((ShortVector)v1).vec();\n+        short[] vecPayload2 = ((ShortVector)v2).vec();\n+        short[] vecPayload3 = ((ShortVector)v3).vec();\n@@ -546,2 +546,2 @@\n-            int index = ((int)vpayload1[i]);\n-            res[i] = index >= vlen ? vpayload3[index & (vlen - 1)] : vpayload2[index];\n+            int index = ((int)vecPayload1[i]);\n+            res[i] = index >= vlen ? vecPayload3[index & (vlen - 1)] : vecPayload2[index];\n@@ -549,1 +549,1 @@\n-        return ((ShortVector)v1).vectorFactory(res);\n+        return ((ShortVector)v2).vectorFactory(res);\n@@ -2593,0 +2593,1 @@\n+\n@@ -2595,1 +2596,2 @@\n-    final ShortVector selectFromTemplate(ShortVector v1, ShortVector v2) {\n+    final ShortVector selectFromTemplate(Class<? extends Vector<Short>> indexVecClass,\n+                                                  ShortVector v1, ShortVector v2) {\n@@ -2598,2 +2600,3 @@\n-        return (ShortVector)VectorSupport.selectFromTwoVectorOp(getClass(), short.class, length(), wrapped_indexes, v1, v2,\n-            (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n+        return (ShortVector)VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass, short.class, short.class,\n+                                                              length(), wrapped_indexes, v1, v2,\n+                                                              (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -553,1 +553,1 @@\n-    static $abstractvectortype$ selectFromTwoVectorHelper(Vector<$Boxtype$> v1, Vector<$Boxtype$> v2, Vector<$Boxtype$> v3) {\n+    static $abstractvectortype$ selectFromTwoVectorHelper(Vector<$Boxbitstype$> v1, Vector<$Boxtype$> v2, Vector<$Boxtype$> v3) {\n@@ -556,1 +556,1 @@\n-        $type$[] vecPayload1 = (($abstractvectortype$)v1).vec();\n+        $bitstype$[] vecPayload1 = (($abstractbitsvectortype$)v1).vec();\n@@ -563,1 +563,1 @@\n-        return (($abstractvectortype$)v1).vectorFactory(res);\n+        return (($abstractvectortype$)v2).vectorFactory(res);\n@@ -2969,0 +2969,1 @@\n+\n@@ -2971,1 +2972,2 @@\n-    final $abstractvectortype$ selectFromTemplate($abstractvectortype$ v1, $abstractvectortype$ v2) {\n+    final $abstractvectortype$ selectFromTemplate(Class<? extends Vector<$Boxbitstype$>> indexVecClass,\n+                                                  $abstractvectortype$ v1, $abstractvectortype$ v2) {\n@@ -2974,13 +2976,7 @@\n-#if[intOrFloat]\n-        $abstractvectortype$ wrapped_indexes = this.convert(VectorOperators.F2I, 0)\n-                                               .lanewise(VectorOperators.AND, twoVectorLen - 1)\n-                                               .reinterpretAsInts()\n-                                               .convert(VectorOperators.I2F, 0)\n-                                               .reinterpretAsFloats();\n-#else[intOrFloat]\n-        $abstractvectortype$ wrapped_indexes = this.convert(VectorOperators.D2I, 0)\n-                                               .lanewise(VectorOperators.AND, twoVectorLen - 1)\n-                                               .reinterpretAsInts()\n-                                               .convert(VectorOperators.I2D, 0)\n-                                               .reinterpretAsDoubles();\n-#end[intOrFloat]\n+        $abstractbitsvectortype$ wrapped_indexes = this.convert(VectorOperators.{#if[intOrFloat]?F2I:D2L}, 0)\n+                                                   .lanewise(VectorOperators.AND, twoVectorLen - 1)\n+                                                   .reinterpretAs$Bitstype$s();\n+        return ($Type$Vector)VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass , $type$.class,\n+                                                              $bitstype$.class, length(), wrapped_indexes, v1, v2,\n+                                                              (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n+        );\n@@ -2989,3 +2985,3 @@\n-#end[FP]\n-        return ($Type$Vector)VectorSupport.selectFromTwoVectorOp(getClass(), $type$.class, length(), wrapped_indexes, v1, v2,\n-            (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n+        return ($Type$Vector)VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass, $type$.class, $type$.class,\n+                                                              length(), wrapped_indexes, v1, v2,\n+                                                              (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n@@ -2993,0 +2989,1 @@\n+#end[FP]\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":17,"deletions":20,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -520,1 +520,1 @@\n-            super.selectFromTemplate(($vectortype$) v1, ($vectortype$) v2);  \/\/ specialize\n+            super.selectFromTemplate($Bitstype$$bits$Vector.class, ($vectortype$) v1, ($vectortype$) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}