{"files":[{"patch":"@@ -539,2 +539,2 @@\n-    static ByteVector selectFromTwoVectorHelper(Vector<Byte> v1, Vector<Byte> v2, Vector<Byte> v3) {\n-        int vlen = v1.length();\n+    static ByteVector selectFromTwoVectorHelper(Vector<Byte> wrappedIndex, Vector<Byte> src1, Vector<Byte> src2) {\n+        int vlen = wrappedIndex.length();\n@@ -542,3 +542,3 @@\n-        byte[] vecPayload1 = ((ByteVector)v1).vec();\n-        byte[] vecPayload2 = ((ByteVector)v2).vec();\n-        byte[] vecPayload3 = ((ByteVector)v3).vec();\n+        byte[] vecPayload1 = ((ByteVector)wrappedIndex).vec();\n+        byte[] vecPayload2 = ((ByteVector)src1).vec();\n+        byte[] vecPayload3 = ((ByteVector)src2).vec();\n@@ -547,1 +547,1 @@\n-            res[i] = index >= vlen ? vecPayload3[index & (vlen - 1)] : vecPayload2[index];\n+            res[i] = index >= vlen ? vecPayload3[index - vlen] : vecPayload2[index];\n@@ -549,1 +549,1 @@\n-        return ((ByteVector)v2).vectorFactory(res);\n+        return ((ByteVector)src1).vectorFactory(res);\n@@ -2597,1 +2597,3 @@\n-        int twoVectorLenMask = (length() << 1) - 1;\n+        int vlen = length();\n+        assert ((vlen & (vlen -1)) == 0);\n+        int twoVectorLenMask = (vlen << 1) - 1;\n@@ -2600,1 +2602,1 @@\n-                                                   length(), wrapped_indexes, v1, v2,\n+                                                   vlen, wrapped_indexes, v1, v2,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -528,2 +528,2 @@\n-    static DoubleVector selectFromTwoVectorHelper(Vector<Long> v1, Vector<Double> v2, Vector<Double> v3) {\n-        int vlen = v1.length();\n+    static DoubleVector selectFromTwoVectorHelper(Vector<Long> wrappedIndex, Vector<Double> src1, Vector<Double> src2) {\n+        int vlen = wrappedIndex.length();\n@@ -531,3 +531,3 @@\n-        long[] vecPayload1 = ((LongVector)v1).vec();\n-        double[] vecPayload2 = ((DoubleVector)v2).vec();\n-        double[] vecPayload3 = ((DoubleVector)v3).vec();\n+        long[] vecPayload1 = ((LongVector)wrappedIndex).vec();\n+        double[] vecPayload2 = ((DoubleVector)src1).vec();\n+        double[] vecPayload3 = ((DoubleVector)src2).vec();\n@@ -536,1 +536,1 @@\n-            res[i] = index >= vlen ? vecPayload3[index & (vlen - 1)] : vecPayload2[index];\n+            res[i] = index >= vlen ? vecPayload3[index - vlen] : vecPayload2[index];\n@@ -538,1 +538,1 @@\n-        return ((DoubleVector)v2).vectorFactory(res);\n+        return ((DoubleVector)src1).vectorFactory(res);\n@@ -2439,1 +2439,3 @@\n-        int twoVectorLenMask = (length() << 1) - 1;\n+        int vlen = length();\n+        assert ((vlen & (vlen -1)) == 0);\n+        int twoVectorLenMask = (vlen << 1) - 1;\n@@ -2443,1 +2445,1 @@\n-                                                   length(), wrapped_indexes, v1, v2,\n+                                                   vlen, wrapped_indexes, v1, v2,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -528,2 +528,2 @@\n-    static FloatVector selectFromTwoVectorHelper(Vector<Integer> v1, Vector<Float> v2, Vector<Float> v3) {\n-        int vlen = v1.length();\n+    static FloatVector selectFromTwoVectorHelper(Vector<Integer> wrappedIndex, Vector<Float> src1, Vector<Float> src2) {\n+        int vlen = wrappedIndex.length();\n@@ -531,3 +531,3 @@\n-        int[] vecPayload1 = ((IntVector)v1).vec();\n-        float[] vecPayload2 = ((FloatVector)v2).vec();\n-        float[] vecPayload3 = ((FloatVector)v3).vec();\n+        int[] vecPayload1 = ((IntVector)wrappedIndex).vec();\n+        float[] vecPayload2 = ((FloatVector)src1).vec();\n+        float[] vecPayload3 = ((FloatVector)src2).vec();\n@@ -536,1 +536,1 @@\n-            res[i] = index >= vlen ? vecPayload3[index & (vlen - 1)] : vecPayload2[index];\n+            res[i] = index >= vlen ? vecPayload3[index - vlen] : vecPayload2[index];\n@@ -538,1 +538,1 @@\n-        return ((FloatVector)v2).vectorFactory(res);\n+        return ((FloatVector)src1).vectorFactory(res);\n@@ -2451,1 +2451,3 @@\n-        int twoVectorLenMask = (length() << 1) - 1;\n+        int vlen = length();\n+        assert ((vlen & (vlen -1)) == 0);\n+        int twoVectorLenMask = (vlen << 1) - 1;\n@@ -2455,1 +2457,1 @@\n-                                                   length(), wrapped_indexes, v1, v2,\n+                                                   vlen, wrapped_indexes, v1, v2,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -539,2 +539,2 @@\n-    static IntVector selectFromTwoVectorHelper(Vector<Integer> v1, Vector<Integer> v2, Vector<Integer> v3) {\n-        int vlen = v1.length();\n+    static IntVector selectFromTwoVectorHelper(Vector<Integer> wrappedIndex, Vector<Integer> src1, Vector<Integer> src2) {\n+        int vlen = wrappedIndex.length();\n@@ -542,3 +542,3 @@\n-        int[] vecPayload1 = ((IntVector)v1).vec();\n-        int[] vecPayload2 = ((IntVector)v2).vec();\n-        int[] vecPayload3 = ((IntVector)v3).vec();\n+        int[] vecPayload1 = ((IntVector)wrappedIndex).vec();\n+        int[] vecPayload2 = ((IntVector)src1).vec();\n+        int[] vecPayload3 = ((IntVector)src2).vec();\n@@ -547,1 +547,1 @@\n-            res[i] = index >= vlen ? vecPayload3[index & (vlen - 1)] : vecPayload2[index];\n+            res[i] = index >= vlen ? vecPayload3[index - vlen] : vecPayload2[index];\n@@ -549,1 +549,1 @@\n-        return ((IntVector)v2).vectorFactory(res);\n+        return ((IntVector)src1).vectorFactory(res);\n@@ -2582,1 +2582,3 @@\n-        int twoVectorLenMask = (length() << 1) - 1;\n+        int vlen = length();\n+        assert ((vlen & (vlen -1)) == 0);\n+        int twoVectorLenMask = (vlen << 1) - 1;\n@@ -2585,1 +2587,1 @@\n-                                                   length(), wrapped_indexes, v1, v2,\n+                                                   vlen, wrapped_indexes, v1, v2,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -539,2 +539,2 @@\n-    static LongVector selectFromTwoVectorHelper(Vector<Long> v1, Vector<Long> v2, Vector<Long> v3) {\n-        int vlen = v1.length();\n+    static LongVector selectFromTwoVectorHelper(Vector<Long> wrappedIndex, Vector<Long> src1, Vector<Long> src2) {\n+        int vlen = wrappedIndex.length();\n@@ -542,3 +542,3 @@\n-        long[] vecPayload1 = ((LongVector)v1).vec();\n-        long[] vecPayload2 = ((LongVector)v2).vec();\n-        long[] vecPayload3 = ((LongVector)v3).vec();\n+        long[] vecPayload1 = ((LongVector)wrappedIndex).vec();\n+        long[] vecPayload2 = ((LongVector)src1).vec();\n+        long[] vecPayload3 = ((LongVector)src2).vec();\n@@ -547,1 +547,1 @@\n-            res[i] = index >= vlen ? vecPayload3[index & (vlen - 1)] : vecPayload2[index];\n+            res[i] = index >= vlen ? vecPayload3[index - vlen] : vecPayload2[index];\n@@ -549,1 +549,1 @@\n-        return ((LongVector)v2).vectorFactory(res);\n+        return ((LongVector)src1).vectorFactory(res);\n@@ -2448,1 +2448,3 @@\n-        int twoVectorLenMask = (length() << 1) - 1;\n+        int vlen = length();\n+        assert ((vlen & (vlen -1)) == 0);\n+        int twoVectorLenMask = (vlen << 1) - 1;\n@@ -2451,1 +2453,1 @@\n-                                                   length(), wrapped_indexes, v1, v2,\n+                                                   vlen, wrapped_indexes, v1, v2,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -539,2 +539,2 @@\n-    static ShortVector selectFromTwoVectorHelper(Vector<Short> v1, Vector<Short> v2, Vector<Short> v3) {\n-        int vlen = v1.length();\n+    static ShortVector selectFromTwoVectorHelper(Vector<Short> wrappedIndex, Vector<Short> src1, Vector<Short> src2) {\n+        int vlen = wrappedIndex.length();\n@@ -542,3 +542,3 @@\n-        short[] vecPayload1 = ((ShortVector)v1).vec();\n-        short[] vecPayload2 = ((ShortVector)v2).vec();\n-        short[] vecPayload3 = ((ShortVector)v3).vec();\n+        short[] vecPayload1 = ((ShortVector)wrappedIndex).vec();\n+        short[] vecPayload2 = ((ShortVector)src1).vec();\n+        short[] vecPayload3 = ((ShortVector)src2).vec();\n@@ -547,1 +547,1 @@\n-            res[i] = index >= vlen ? vecPayload3[index & (vlen - 1)] : vecPayload2[index];\n+            res[i] = index >= vlen ? vecPayload3[index - vlen] : vecPayload2[index];\n@@ -549,1 +549,1 @@\n-        return ((ShortVector)v2).vectorFactory(res);\n+        return ((ShortVector)src1).vectorFactory(res);\n@@ -2598,1 +2598,3 @@\n-        int twoVectorLenMask = (length() << 1) - 1;\n+        int vlen = length();\n+        assert ((vlen & (vlen -1)) == 0);\n+        int twoVectorLenMask = (vlen << 1) - 1;\n@@ -2601,1 +2603,1 @@\n-                                                   length(), wrapped_indexes, v1, v2,\n+                                                   vlen, wrapped_indexes, v1, v2,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2788,5 +2788,11 @@\n-     * and {@code wrapIndex} computes the result of\n-     * {@code Math.floorMod(E, 2 * VLENGTH)},\n-     * where {@code E} is the index to be wrapped.\n-     * As long as {@code VLENGTH} is a power of two, then the result\n-     * is also equal to {@code E & (2 * VLENGTH - 1)}.\n+     * and for integral values {@code wrapIndex} computes the result of\n+     * {@code Math.floorMod(E, 2 * VLENGTH)}, where {@code E} is the index\n+     * to be wrapped. As long as {@code VLENGTH} is a power of two, then the\n+     * result is also equal to {@code E & (2 * VLENGTH - 1)}.\n+     *\n+     * For floating point values {@code wrapIndex} computes\n+     * {@code Math.floorMod(convert(E), 2 * VLENGTH)}, where {@code convert}\n+     * converts the floating point value to an integral value with the same\n+     * number of representational bits - as in converting a double value to\n+     * a long value ({@code (long)doubleVal}), or a float value to an int value\n+     * ({@code (int)floatVal}).\n@@ -2798,1 +2804,1 @@\n-     * The result is the same as the expression\n+     * The result for integral values is the same as the expression\n@@ -2805,0 +2811,5 @@\n+     * The lane-wise {@code AND} operation results in a vector whose\n+     * elements are in the range {@code [0, 2 * VLENGTH - 1])}. The shuffle\n+     * conversion results in a partially wrapped shuffle whose indexes are\n+     * in the range {@code [-VLENGTH, VLENGTH - 1])}, where exceptional\n+     * indexes are used to select elements in the third vector.\n@@ -2809,1 +2820,1 @@\n-     * @see #rearrange(VectorShuffle, Vector)\n+     * @see #rearrange(VectorShuffle,Vector)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Vector.java","additions":18,"deletions":7,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -553,2 +553,2 @@\n-    static $abstractvectortype$ selectFromTwoVectorHelper(Vector<$Boxbitstype$> v1, Vector<$Boxtype$> v2, Vector<$Boxtype$> v3) {\n-        int vlen = v1.length();\n+    static $abstractvectortype$ selectFromTwoVectorHelper(Vector<$Boxbitstype$> wrappedIndex, Vector<$Boxtype$> src1, Vector<$Boxtype$> src2) {\n+        int vlen = wrappedIndex.length();\n@@ -556,3 +556,3 @@\n-        $bitstype$[] vecPayload1 = (($abstractbitsvectortype$)v1).vec();\n-        $type$[] vecPayload2 = (($abstractvectortype$)v2).vec();\n-        $type$[] vecPayload3 = (($abstractvectortype$)v3).vec();\n+        $bitstype$[] vecPayload1 = (($abstractbitsvectortype$)wrappedIndex).vec();\n+        $type$[] vecPayload2 = (($abstractvectortype$)src1).vec();\n+        $type$[] vecPayload3 = (($abstractvectortype$)src2).vec();\n@@ -561,1 +561,1 @@\n-            res[i] = index >= vlen ? vecPayload3[index & (vlen - 1)] : vecPayload2[index];\n+            res[i] = index >= vlen ? vecPayload3[index - vlen] : vecPayload2[index];\n@@ -563,1 +563,1 @@\n-        return (($abstractvectortype$)v2).vectorFactory(res);\n+        return (($abstractvectortype$)src1).vectorFactory(res);\n@@ -2974,1 +2974,3 @@\n-        int twoVectorLenMask = (length() << 1) - 1;\n+        int vlen = length();\n+        assert ((vlen & (vlen -1)) == 0);\n+        int twoVectorLenMask = (vlen << 1) - 1;\n@@ -2979,1 +2981,1 @@\n-                                                   length(), wrapped_indexes, v1, v2,\n+                                                   vlen, wrapped_indexes, v1, v2,\n@@ -2985,1 +2987,1 @@\n-                                                   length(), wrapped_indexes, v1, v2,\n+                                                   vlen, wrapped_indexes, v1, v2,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"}]}