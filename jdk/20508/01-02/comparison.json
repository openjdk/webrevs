{"files":[{"patch":"@@ -514,1 +514,9 @@\n-            super.selectFromTemplate((Byte128Vector) v1, (Byte128Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Byte128Vector) v1, (Byte128Vector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public Byte128Vector selectFrom(Vector<Byte> v1,\n+                                   Vector<Byte> v2, boolean wrap) {\n+        return (Byte128Vector)\n+            super.selectFromTemplate((Byte128Vector) v1, (Byte128Vector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -514,1 +514,9 @@\n-            super.selectFromTemplate((Byte256Vector) v1, (Byte256Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Byte256Vector) v1, (Byte256Vector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public Byte256Vector selectFrom(Vector<Byte> v1,\n+                                   Vector<Byte> v2, boolean wrap) {\n+        return (Byte256Vector)\n+            super.selectFromTemplate((Byte256Vector) v1, (Byte256Vector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -514,1 +514,9 @@\n-            super.selectFromTemplate((Byte512Vector) v1, (Byte512Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Byte512Vector) v1, (Byte512Vector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public Byte512Vector selectFrom(Vector<Byte> v1,\n+                                   Vector<Byte> v2, boolean wrap) {\n+        return (Byte512Vector)\n+            super.selectFromTemplate((Byte512Vector) v1, (Byte512Vector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -514,1 +514,9 @@\n-            super.selectFromTemplate((Byte64Vector) v1, (Byte64Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Byte64Vector) v1, (Byte64Vector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public Byte64Vector selectFrom(Vector<Byte> v1,\n+                                   Vector<Byte> v2, boolean wrap) {\n+        return (Byte64Vector)\n+            super.selectFromTemplate((Byte64Vector) v1, (Byte64Vector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -514,1 +514,9 @@\n-            super.selectFromTemplate((ByteMaxVector) v1, (ByteMaxVector) v2);  \/\/ specialize\n+            super.selectFromTemplate((ByteMaxVector) v1, (ByteMaxVector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public ByteMaxVector selectFrom(Vector<Byte> v1,\n+                                   Vector<Byte> v2, boolean wrap) {\n+        return (ByteMaxVector)\n+            super.selectFromTemplate((ByteMaxVector) v1, (ByteMaxVector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2584,0 +2584,7 @@\n+    \/**\n+     * {@inheritDoc} <!--workaround-->\n+     *\/\n+    @Override\n+    public abstract\n+    ByteVector selectFrom(Vector<Byte> v1, Vector<Byte> v2, boolean wrap);\n+\n@@ -2586,1 +2593,1 @@\n-    final ByteVector selectFromTemplate(ByteVector v1, ByteVector v2) {\n+    final ByteVector selectFromTemplate(ByteVector v1, ByteVector v2, boolean wrap) {\n@@ -2588,1 +2595,2 @@\n-        if (this.compare(VectorOperators.UNSIGNED_GT, twovectorlen - 1).anyTrue()) {\n+        ByteVector wrapped_indexes = this;\n+        if (!wrap && this.compare(VectorOperators.UNSIGNED_GT, twovectorlen - 1).anyTrue()) {\n@@ -2591,1 +2599,2 @@\n-        return (ByteVector)VectorSupport.selectFromTwoVectorOp(getClass(), byte.class, length(), this, v1, v2,\n+        wrapped_indexes = this.lanewise(VectorOperators.AND, twovectorlen - 1);\n+        return (ByteVector)VectorSupport.selectFromTwoVectorOp(getClass(), byte.class, length(), wrapped_indexes, v1, v2,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -501,1 +501,9 @@\n-            super.selectFromTemplate((Double128Vector) v1, (Double128Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Double128Vector) v1, (Double128Vector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public Double128Vector selectFrom(Vector<Double> v1,\n+                                   Vector<Double> v2, boolean wrap) {\n+        return (Double128Vector)\n+            super.selectFromTemplate((Double128Vector) v1, (Double128Vector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -501,1 +501,9 @@\n-            super.selectFromTemplate((Double256Vector) v1, (Double256Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Double256Vector) v1, (Double256Vector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public Double256Vector selectFrom(Vector<Double> v1,\n+                                   Vector<Double> v2, boolean wrap) {\n+        return (Double256Vector)\n+            super.selectFromTemplate((Double256Vector) v1, (Double256Vector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -501,1 +501,9 @@\n-            super.selectFromTemplate((Double512Vector) v1, (Double512Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Double512Vector) v1, (Double512Vector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public Double512Vector selectFrom(Vector<Double> v1,\n+                                   Vector<Double> v2, boolean wrap) {\n+        return (Double512Vector)\n+            super.selectFromTemplate((Double512Vector) v1, (Double512Vector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -501,1 +501,9 @@\n-            super.selectFromTemplate((Double64Vector) v1, (Double64Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Double64Vector) v1, (Double64Vector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public Double64Vector selectFrom(Vector<Double> v1,\n+                                   Vector<Double> v2, boolean wrap) {\n+        return (Double64Vector)\n+            super.selectFromTemplate((Double64Vector) v1, (Double64Vector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -501,1 +501,9 @@\n-            super.selectFromTemplate((DoubleMaxVector) v1, (DoubleMaxVector) v2);  \/\/ specialize\n+            super.selectFromTemplate((DoubleMaxVector) v1, (DoubleMaxVector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public DoubleMaxVector selectFrom(Vector<Double> v1,\n+                                   Vector<Double> v2, boolean wrap) {\n+        return (DoubleMaxVector)\n+            super.selectFromTemplate((DoubleMaxVector) v1, (DoubleMaxVector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2426,0 +2426,7 @@\n+    \/**\n+     * {@inheritDoc} <!--workaround-->\n+     *\/\n+    @Override\n+    public abstract\n+    DoubleVector selectFrom(Vector<Double> v1, Vector<Double> v2, boolean wrap);\n+\n@@ -2428,1 +2435,1 @@\n-    final DoubleVector selectFromTemplate(DoubleVector v1, DoubleVector v2) {\n+    final DoubleVector selectFromTemplate(DoubleVector v1, DoubleVector v2, boolean wrap) {\n@@ -2430,2 +2437,5 @@\n-        if (!this.test(VectorOperators.IS_FINITE).allTrue() ||\n-            this.compare(VectorOperators.LT, 0).or(this.compare(VectorOperators.GE, twovectorlen)).anyTrue()) {\n+        DoubleVector wrapped_indexes = this;\n+        if (!wrap &&\n+               (!this.test(VectorOperators.IS_FINITE).allTrue() ||\n+                 this.compare(VectorOperators.LT, 0)\n+                 .or(this.compare(VectorOperators.GE, twovectorlen)).anyTrue())) {\n@@ -2434,1 +2444,6 @@\n-        return (DoubleVector)VectorSupport.selectFromTwoVectorOp(getClass(), double.class, length(), this, v1, v2,\n+        wrapped_indexes = wrapped_indexes.convert(VectorOperators.D2I, 0)\n+                          .lanewise(VectorOperators.AND, twovectorlen - 1)\n+                          .reinterpretAsInts()\n+                          .convert(VectorOperators.I2D, 0)\n+                          .reinterpretAsDoubles();\n+        return (DoubleVector)VectorSupport.selectFromTwoVectorOp(getClass(), double.class, length(), wrapped_indexes, v1, v2,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -501,1 +501,9 @@\n-            super.selectFromTemplate((Float128Vector) v1, (Float128Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Float128Vector) v1, (Float128Vector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public Float128Vector selectFrom(Vector<Float> v1,\n+                                   Vector<Float> v2, boolean wrap) {\n+        return (Float128Vector)\n+            super.selectFromTemplate((Float128Vector) v1, (Float128Vector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -501,1 +501,9 @@\n-            super.selectFromTemplate((Float256Vector) v1, (Float256Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Float256Vector) v1, (Float256Vector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public Float256Vector selectFrom(Vector<Float> v1,\n+                                   Vector<Float> v2, boolean wrap) {\n+        return (Float256Vector)\n+            super.selectFromTemplate((Float256Vector) v1, (Float256Vector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -501,1 +501,9 @@\n-            super.selectFromTemplate((Float512Vector) v1, (Float512Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Float512Vector) v1, (Float512Vector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public Float512Vector selectFrom(Vector<Float> v1,\n+                                   Vector<Float> v2, boolean wrap) {\n+        return (Float512Vector)\n+            super.selectFromTemplate((Float512Vector) v1, (Float512Vector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -501,1 +501,9 @@\n-            super.selectFromTemplate((Float64Vector) v1, (Float64Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Float64Vector) v1, (Float64Vector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public Float64Vector selectFrom(Vector<Float> v1,\n+                                   Vector<Float> v2, boolean wrap) {\n+        return (Float64Vector)\n+            super.selectFromTemplate((Float64Vector) v1, (Float64Vector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -501,1 +501,9 @@\n-            super.selectFromTemplate((FloatMaxVector) v1, (FloatMaxVector) v2);  \/\/ specialize\n+            super.selectFromTemplate((FloatMaxVector) v1, (FloatMaxVector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public FloatMaxVector selectFrom(Vector<Float> v1,\n+                                   Vector<Float> v2, boolean wrap) {\n+        return (FloatMaxVector)\n+            super.selectFromTemplate((FloatMaxVector) v1, (FloatMaxVector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2438,0 +2438,7 @@\n+    \/**\n+     * {@inheritDoc} <!--workaround-->\n+     *\/\n+    @Override\n+    public abstract\n+    FloatVector selectFrom(Vector<Float> v1, Vector<Float> v2, boolean wrap);\n+\n@@ -2440,1 +2447,1 @@\n-    final FloatVector selectFromTemplate(FloatVector v1, FloatVector v2) {\n+    final FloatVector selectFromTemplate(FloatVector v1, FloatVector v2, boolean wrap) {\n@@ -2442,2 +2449,5 @@\n-        if (!this.test(VectorOperators.IS_FINITE).allTrue() ||\n-            this.compare(VectorOperators.LT, 0).or(this.compare(VectorOperators.GE, twovectorlen)).anyTrue()) {\n+        FloatVector wrapped_indexes = this;\n+        if (!wrap &&\n+               (!this.test(VectorOperators.IS_FINITE).allTrue() ||\n+                 this.compare(VectorOperators.LT, 0)\n+                 .or(this.compare(VectorOperators.GE, twovectorlen)).anyTrue())) {\n@@ -2446,1 +2456,6 @@\n-        return (FloatVector)VectorSupport.selectFromTwoVectorOp(getClass(), float.class, length(), this, v1, v2,\n+        wrapped_indexes = wrapped_indexes.convert(VectorOperators.F2I, 0)\n+                          .lanewise(VectorOperators.AND, twovectorlen - 1)\n+                          .reinterpretAsInts()\n+                          .convert(VectorOperators.I2F, 0)\n+                          .reinterpretAsFloats();\n+        return (FloatVector)VectorSupport.selectFromTwoVectorOp(getClass(), float.class, length(), wrapped_indexes, v1, v2,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -514,1 +514,9 @@\n-            super.selectFromTemplate((Int128Vector) v1, (Int128Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Int128Vector) v1, (Int128Vector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public Int128Vector selectFrom(Vector<Integer> v1,\n+                                   Vector<Integer> v2, boolean wrap) {\n+        return (Int128Vector)\n+            super.selectFromTemplate((Int128Vector) v1, (Int128Vector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -514,1 +514,9 @@\n-            super.selectFromTemplate((Int256Vector) v1, (Int256Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Int256Vector) v1, (Int256Vector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public Int256Vector selectFrom(Vector<Integer> v1,\n+                                   Vector<Integer> v2, boolean wrap) {\n+        return (Int256Vector)\n+            super.selectFromTemplate((Int256Vector) v1, (Int256Vector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -514,1 +514,9 @@\n-            super.selectFromTemplate((Int512Vector) v1, (Int512Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Int512Vector) v1, (Int512Vector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public Int512Vector selectFrom(Vector<Integer> v1,\n+                                   Vector<Integer> v2, boolean wrap) {\n+        return (Int512Vector)\n+            super.selectFromTemplate((Int512Vector) v1, (Int512Vector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -514,1 +514,9 @@\n-            super.selectFromTemplate((Int64Vector) v1, (Int64Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Int64Vector) v1, (Int64Vector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public Int64Vector selectFrom(Vector<Integer> v1,\n+                                   Vector<Integer> v2, boolean wrap) {\n+        return (Int64Vector)\n+            super.selectFromTemplate((Int64Vector) v1, (Int64Vector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -514,1 +514,9 @@\n-            super.selectFromTemplate((IntMaxVector) v1, (IntMaxVector) v2);  \/\/ specialize\n+            super.selectFromTemplate((IntMaxVector) v1, (IntMaxVector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public IntMaxVector selectFrom(Vector<Integer> v1,\n+                                   Vector<Integer> v2, boolean wrap) {\n+        return (IntMaxVector)\n+            super.selectFromTemplate((IntMaxVector) v1, (IntMaxVector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2569,0 +2569,7 @@\n+    \/**\n+     * {@inheritDoc} <!--workaround-->\n+     *\/\n+    @Override\n+    public abstract\n+    IntVector selectFrom(Vector<Integer> v1, Vector<Integer> v2, boolean wrap);\n+\n@@ -2571,1 +2578,1 @@\n-    final IntVector selectFromTemplate(IntVector v1, IntVector v2) {\n+    final IntVector selectFromTemplate(IntVector v1, IntVector v2, boolean wrap) {\n@@ -2573,1 +2580,2 @@\n-        if (this.compare(VectorOperators.UNSIGNED_GT, twovectorlen - 1).anyTrue()) {\n+        IntVector wrapped_indexes = this;\n+        if (!wrap && this.compare(VectorOperators.UNSIGNED_GT, twovectorlen - 1).anyTrue()) {\n@@ -2576,1 +2584,2 @@\n-        return (IntVector)VectorSupport.selectFromTwoVectorOp(getClass(), int.class, length(), this, v1, v2,\n+        wrapped_indexes = this.lanewise(VectorOperators.AND, twovectorlen - 1);\n+        return (IntVector)VectorSupport.selectFromTwoVectorOp(getClass(), int.class, length(), wrapped_indexes, v1, v2,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -504,1 +504,9 @@\n-            super.selectFromTemplate((Long128Vector) v1, (Long128Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Long128Vector) v1, (Long128Vector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public Long128Vector selectFrom(Vector<Long> v1,\n+                                   Vector<Long> v2, boolean wrap) {\n+        return (Long128Vector)\n+            super.selectFromTemplate((Long128Vector) v1, (Long128Vector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -504,1 +504,9 @@\n-            super.selectFromTemplate((Long256Vector) v1, (Long256Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Long256Vector) v1, (Long256Vector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public Long256Vector selectFrom(Vector<Long> v1,\n+                                   Vector<Long> v2, boolean wrap) {\n+        return (Long256Vector)\n+            super.selectFromTemplate((Long256Vector) v1, (Long256Vector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -504,1 +504,9 @@\n-            super.selectFromTemplate((Long512Vector) v1, (Long512Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Long512Vector) v1, (Long512Vector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public Long512Vector selectFrom(Vector<Long> v1,\n+                                   Vector<Long> v2, boolean wrap) {\n+        return (Long512Vector)\n+            super.selectFromTemplate((Long512Vector) v1, (Long512Vector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -504,1 +504,9 @@\n-            super.selectFromTemplate((Long64Vector) v1, (Long64Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Long64Vector) v1, (Long64Vector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public Long64Vector selectFrom(Vector<Long> v1,\n+                                   Vector<Long> v2, boolean wrap) {\n+        return (Long64Vector)\n+            super.selectFromTemplate((Long64Vector) v1, (Long64Vector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -504,1 +504,9 @@\n-            super.selectFromTemplate((LongMaxVector) v1, (LongMaxVector) v2);  \/\/ specialize\n+            super.selectFromTemplate((LongMaxVector) v1, (LongMaxVector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public LongMaxVector selectFrom(Vector<Long> v1,\n+                                   Vector<Long> v2, boolean wrap) {\n+        return (LongMaxVector)\n+            super.selectFromTemplate((LongMaxVector) v1, (LongMaxVector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2435,0 +2435,7 @@\n+    \/**\n+     * {@inheritDoc} <!--workaround-->\n+     *\/\n+    @Override\n+    public abstract\n+    LongVector selectFrom(Vector<Long> v1, Vector<Long> v2, boolean wrap);\n+\n@@ -2437,1 +2444,1 @@\n-    final LongVector selectFromTemplate(LongVector v1, LongVector v2) {\n+    final LongVector selectFromTemplate(LongVector v1, LongVector v2, boolean wrap) {\n@@ -2439,1 +2446,2 @@\n-        if (this.compare(VectorOperators.UNSIGNED_GT, twovectorlen - 1).anyTrue()) {\n+        LongVector wrapped_indexes = this;\n+        if (!wrap && this.compare(VectorOperators.UNSIGNED_GT, twovectorlen - 1).anyTrue()) {\n@@ -2442,1 +2450,2 @@\n-        return (LongVector)VectorSupport.selectFromTwoVectorOp(getClass(), long.class, length(), this, v1, v2,\n+        wrapped_indexes = this.lanewise(VectorOperators.AND, twovectorlen - 1);\n+        return (LongVector)VectorSupport.selectFromTwoVectorOp(getClass(), long.class, length(), wrapped_indexes, v1, v2,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -514,1 +514,9 @@\n-            super.selectFromTemplate((Short128Vector) v1, (Short128Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Short128Vector) v1, (Short128Vector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public Short128Vector selectFrom(Vector<Short> v1,\n+                                   Vector<Short> v2, boolean wrap) {\n+        return (Short128Vector)\n+            super.selectFromTemplate((Short128Vector) v1, (Short128Vector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -514,1 +514,9 @@\n-            super.selectFromTemplate((Short256Vector) v1, (Short256Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Short256Vector) v1, (Short256Vector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public Short256Vector selectFrom(Vector<Short> v1,\n+                                   Vector<Short> v2, boolean wrap) {\n+        return (Short256Vector)\n+            super.selectFromTemplate((Short256Vector) v1, (Short256Vector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -514,1 +514,9 @@\n-            super.selectFromTemplate((Short512Vector) v1, (Short512Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Short512Vector) v1, (Short512Vector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public Short512Vector selectFrom(Vector<Short> v1,\n+                                   Vector<Short> v2, boolean wrap) {\n+        return (Short512Vector)\n+            super.selectFromTemplate((Short512Vector) v1, (Short512Vector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -514,1 +514,9 @@\n-            super.selectFromTemplate((Short64Vector) v1, (Short64Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Short64Vector) v1, (Short64Vector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public Short64Vector selectFrom(Vector<Short> v1,\n+                                   Vector<Short> v2, boolean wrap) {\n+        return (Short64Vector)\n+            super.selectFromTemplate((Short64Vector) v1, (Short64Vector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -514,1 +514,9 @@\n-            super.selectFromTemplate((ShortMaxVector) v1, (ShortMaxVector) v2);  \/\/ specialize\n+            super.selectFromTemplate((ShortMaxVector) v1, (ShortMaxVector) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public ShortMaxVector selectFrom(Vector<Short> v1,\n+                                   Vector<Short> v2, boolean wrap) {\n+        return (ShortMaxVector)\n+            super.selectFromTemplate((ShortMaxVector) v1, (ShortMaxVector) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2585,0 +2585,7 @@\n+    \/**\n+     * {@inheritDoc} <!--workaround-->\n+     *\/\n+    @Override\n+    public abstract\n+    ShortVector selectFrom(Vector<Short> v1, Vector<Short> v2, boolean wrap);\n+\n@@ -2587,1 +2594,1 @@\n-    final ShortVector selectFromTemplate(ShortVector v1, ShortVector v2) {\n+    final ShortVector selectFromTemplate(ShortVector v1, ShortVector v2, boolean wrap) {\n@@ -2589,1 +2596,2 @@\n-        if (this.compare(VectorOperators.UNSIGNED_GT, twovectorlen - 1).anyTrue()) {\n+        ShortVector wrapped_indexes = this;\n+        if (!wrap && this.compare(VectorOperators.UNSIGNED_GT, twovectorlen - 1).anyTrue()) {\n@@ -2592,1 +2600,2 @@\n-        return (ShortVector)VectorSupport.selectFromTwoVectorOp(getClass(), short.class, length(), this, v1, v2,\n+        wrapped_indexes = this.lanewise(VectorOperators.AND, twovectorlen - 1);\n+        return (ShortVector)VectorSupport.selectFromTwoVectorOp(getClass(), short.class, length(), wrapped_indexes, v1, v2,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2769,1 +2769,0 @@\n-\n@@ -2793,0 +2792,24 @@\n+    \/**\n+     * Rearranges the lane elements of two vectors, selecting lanes\n+     * under the control of a specific index vector (the current vector)\n+     * holding indexes in valid index range of two vectors i.e. {@code [0, VLENGTH*2)}.\n+     *\n+     * This is a cross-lane operation that rearranges the lane\n+     * elements of the two input vectors {@code v1} and a second vector {@code v2}).\n+     *\n+     * For each lane {@code N} of the index vector (the current vector), and\n+     * for each lane source index {@code I=this.laneSource(N)} in the index vector,\n+     * the output lane {@code N} obtains the value from the first vector at lane {@code I}\n+     * if {@code I>=0 && I < VLENGTH}. Otherwise, index vector lane is used to index\n+     * the <em>second<\/em> vector, at index {@code I-VLENGTH}.\n+     *\n+     * @param v1 the first input vector\n+     * @param v2 the second input vector\n+     * @param wrap wrap the indexes to valied index range of two vectors.\n+     * @return the rearrangement of lane elements of first and\n+     *         the second input vector\n+     * @throws IndexOutOfBoundsException if any invalid\n+     *         source indexes are found in {@code this}\n+     *\/\n+    public abstract Vector<E> selectFrom(Vector<E> v1, Vector<E> v2, boolean wrap);\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Vector.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2961,0 +2961,7 @@\n+    \/**\n+     * {@inheritDoc} <!--workaround-->\n+     *\/\n+    @Override\n+    public abstract\n+    $abstractvectortype$ selectFrom(Vector<$Boxtype$> v1, Vector<$Boxtype$> v2, boolean wrap);\n+\n@@ -2963,1 +2970,1 @@\n-    final $abstractvectortype$ selectFromTemplate($abstractvectortype$ v1, $abstractvectortype$ v2) {\n+    final $abstractvectortype$ selectFromTemplate($abstractvectortype$ v1, $abstractvectortype$ v2, boolean wrap) {\n@@ -2965,0 +2972,1 @@\n+        $abstractvectortype$ wrapped_indexes = this;\n@@ -2966,2 +2974,4 @@\n-        if (!this.test(VectorOperators.IS_FINITE).allTrue() ||\n-            this.compare(VectorOperators.LT, 0).or(this.compare(VectorOperators.GE, twovectorlen)).anyTrue()) {\n+        if (!wrap &&\n+               (!this.test(VectorOperators.IS_FINITE).allTrue() ||\n+                 this.compare(VectorOperators.LT, 0)\n+                 .or(this.compare(VectorOperators.GE, twovectorlen)).anyTrue())) {\n@@ -2970,0 +2980,13 @@\n+#if[intOrFloat]\n+        wrapped_indexes = wrapped_indexes.convert(VectorOperators.F2I, 0)\n+                          .lanewise(VectorOperators.AND, twovectorlen - 1)\n+                          .reinterpretAsInts()\n+                          .convert(VectorOperators.I2F, 0)\n+                          .reinterpretAsFloats();\n+#else[intOrFloat]\n+        wrapped_indexes = wrapped_indexes.convert(VectorOperators.D2I, 0)\n+                          .lanewise(VectorOperators.AND, twovectorlen - 1)\n+                          .reinterpretAsInts()\n+                          .convert(VectorOperators.I2D, 0)\n+                          .reinterpretAsDoubles();\n+#end[intOrFloat]\n@@ -2971,1 +2994,1 @@\n-        if (this.compare(VectorOperators.UNSIGNED_GT, twovectorlen - 1).anyTrue()) {\n+        if (!wrap && this.compare(VectorOperators.UNSIGNED_GT, twovectorlen - 1).anyTrue()) {\n@@ -2974,0 +2997,1 @@\n+        wrapped_indexes = this.lanewise(VectorOperators.AND, twovectorlen - 1);\n@@ -2975,1 +2999,1 @@\n-        return ($Type$Vector)VectorSupport.selectFromTwoVectorOp(getClass(), $type$.class, length(), this, v1, v2,\n+        return ($Type$Vector)VectorSupport.selectFromTwoVectorOp(getClass(), $type$.class, length(), wrapped_indexes, v1, v2,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":29,"deletions":5,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -520,1 +520,9 @@\n-            super.selectFromTemplate(($vectortype$) v1, ($vectortype$) v2);  \/\/ specialize\n+            super.selectFromTemplate(($vectortype$) v1, ($vectortype$) v2, true);  \/\/ specialize\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public $vectortype$ selectFrom(Vector<$Boxtype$> v1,\n+                                   Vector<$Boxtype$> v2, boolean wrap) {\n+        return ($vectortype$)\n+            super.selectFromTemplate(($vectortype$) v1, ($vectortype$) v2, wrap);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -61,0 +61,10 @@\n+    float[] floatindex;\n+    float[] floatsrc1;\n+    float[] floatsrc2;\n+    float[] floatres;\n+\n+    double[] doubleindex;\n+    double[] doublesrc1;\n+    double[] doublesrc2;\n+    double[] doubleres;\n+\n@@ -84,0 +94,10 @@\n+        floatindex = new float[size];\n+        floatsrc1 = new float[size];\n+        floatsrc2 = new float[size];\n+        floatres = new float[size];\n+\n+        doubleindex = new double[size];\n+        doublesrc1 = new double[size];\n+        doublesrc2 = new double[size];\n+        doubleres = new double[size];\n+\n@@ -96,0 +116,6 @@\n+        Arrays.fill(floatsrc1, 1.0f);\n+        Arrays.fill(floatsrc2, 2.0f);\n+\n+        Arrays.fill(doublesrc1, 1.0);\n+        Arrays.fill(doublesrc2, 2.0);\n+\n@@ -101,0 +127,2 @@\n+            floatindex[i] = (float)((FloatVector.SPECIES_PREFERRED.length() - 1) & i);\n+            doubleindex[i] = (double)((DoubleVector.SPECIES_PREFERRED.length() - 1) & i);\n@@ -118,1 +146,1 @@\n-                .rearrange(VectorShuffle.fromArray(ByteVector.SPECIES_PREFERRED, intindex, j),\n+                .rearrange(ByteVector.fromArray(ByteVector.SPECIES_PREFERRED, byteindex, j).toShuffle(),\n@@ -138,1 +166,1 @@\n-                .rearrange(VectorShuffle.fromArray(ShortVector.SPECIES_PREFERRED, intindex, j),\n+                .rearrange(ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, shortindex, j).toShuffle(),\n@@ -158,1 +186,1 @@\n-                .rearrange(VectorShuffle.fromArray(IntVector.SPECIES_PREFERRED, intindex, j),\n+                .rearrange(IntVector.fromArray(IntVector.SPECIES_PREFERRED, intindex, j).toShuffle(),\n@@ -178,1 +206,1 @@\n-                .rearrange(VectorShuffle.fromArray(LongVector.SPECIES_PREFERRED, intindex, j),\n+                .rearrange(LongVector.fromArray(LongVector.SPECIES_PREFERRED, longindex, j).toShuffle(),\n@@ -183,0 +211,40 @@\n+\n+    @Benchmark\n+    public void selectFromFloatVector() {\n+        for (int j = 0; j < size; j += FloatVector.SPECIES_PREFERRED.length()) {\n+            FloatVector.fromArray(FloatVector.SPECIES_PREFERRED, floatindex, j)\n+                .selectFrom(FloatVector.fromArray(FloatVector.SPECIES_PREFERRED, floatsrc1, j),\n+                            FloatVector.fromArray(FloatVector.SPECIES_PREFERRED, floatsrc2, j))\n+                .intoArray(floatres, j);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void rearrangeFromFloatVector() {\n+        for (int j = 0; j < size; j += FloatVector.SPECIES_PREFERRED.length()) {\n+            FloatVector.fromArray(FloatVector.SPECIES_PREFERRED, floatsrc1, j)\n+                .rearrange(FloatVector.fromArray(FloatVector.SPECIES_PREFERRED, floatindex, j).toShuffle(),\n+                           FloatVector.fromArray(FloatVector.SPECIES_PREFERRED, floatsrc2, j))\n+                .intoArray(floatres, j);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void selectFromDoubleVector() {\n+        for (int j = 0; j < size; j += DoubleVector.SPECIES_PREFERRED.length()) {\n+            DoubleVector.fromArray(DoubleVector.SPECIES_PREFERRED, doubleindex, j)\n+                .selectFrom(DoubleVector.fromArray(DoubleVector.SPECIES_PREFERRED, doublesrc1, j),\n+                            DoubleVector.fromArray(DoubleVector.SPECIES_PREFERRED, doublesrc2, j))\n+                .intoArray(doubleres, j);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void rearrangeFromDoubleVector() {\n+        for (int j = 0; j < size; j += DoubleVector.SPECIES_PREFERRED.length()) {\n+            DoubleVector.fromArray(DoubleVector.SPECIES_PREFERRED, doublesrc1, j)\n+                .rearrange(DoubleVector.fromArray(DoubleVector.SPECIES_PREFERRED, doubleindex, j).toShuffle(),\n+                           DoubleVector.fromArray(DoubleVector.SPECIES_PREFERRED, doublesrc2, j))\n+                .intoArray(doubleres, j);\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/SelectFromBenchmark.java","additions":72,"deletions":4,"binary":false,"changes":76,"status":"modified"}]}