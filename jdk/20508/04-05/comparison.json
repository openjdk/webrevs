{"files":[{"patch":"@@ -539,0 +539,13 @@\n+    static ByteVector selectFromHelper(Vector<Byte> v1, Vector<Byte> v2, Vector<Byte> v3) {\n+        int vlen = v1.length();\n+        byte[] res = new byte[vlen];\n+        byte[] vpayload1 = ((ByteVector)v1).vec();\n+        byte[] vpayload2 = ((ByteVector)v2).vec();\n+        byte[] vpayload3 = ((ByteVector)v3).vec();\n+        for (int i = 0; i < vlen; i++) {\n+            int index = ((int)vpayload1[i]);\n+            res[i] = index >= vlen ? vpayload3[index & (vlen - 1)] : vpayload2[index];\n+        }\n+        return ((ByteVector)v1).vectorFactory(res);\n+    }\n+\n@@ -2585,3 +2598,1 @@\n-            (vec1, vec2, vec3) -> {\n-                return vec2.rearrange(vec1.toShuffle(), vec3);\n-            }\n+            (vec1, vec2, vec3) -> selectFromHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -528,0 +528,13 @@\n+    static DoubleVector selectFromHelper(Vector<Double> v1, Vector<Double> v2, Vector<Double> v3) {\n+        int vlen = v1.length();\n+        double[] res = new double[vlen];\n+        double[] vpayload1 = ((DoubleVector)v1).vec();\n+        double[] vpayload2 = ((DoubleVector)v2).vec();\n+        double[] vpayload3 = ((DoubleVector)v3).vec();\n+        for (int i = 0; i < vlen; i++) {\n+            int index = ((int)vpayload1[i]);\n+            res[i] = index >= vlen ? vpayload3[index & (vlen - 1)] : vpayload2[index];\n+        }\n+        return ((DoubleVector)v1).vectorFactory(res);\n+    }\n+\n@@ -2431,3 +2444,1 @@\n-            (vec1, vec2, vec3) -> {\n-                return vec2.rearrange(vec1.toShuffle(), vec3);\n-            }\n+            (vec1, vec2, vec3) -> selectFromHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -528,0 +528,13 @@\n+    static FloatVector selectFromHelper(Vector<Float> v1, Vector<Float> v2, Vector<Float> v3) {\n+        int vlen = v1.length();\n+        float[] res = new float[vlen];\n+        float[] vpayload1 = ((FloatVector)v1).vec();\n+        float[] vpayload2 = ((FloatVector)v2).vec();\n+        float[] vpayload3 = ((FloatVector)v3).vec();\n+        for (int i = 0; i < vlen; i++) {\n+            int index = ((int)vpayload1[i]);\n+            res[i] = index >= vlen ? vpayload3[index & (vlen - 1)] : vpayload2[index];\n+        }\n+        return ((FloatVector)v1).vectorFactory(res);\n+    }\n+\n@@ -2443,3 +2456,1 @@\n-            (vec1, vec2, vec3) -> {\n-                return vec2.rearrange(vec1.toShuffle(), vec3);\n-            }\n+            (vec1, vec2, vec3) -> selectFromHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -539,0 +539,13 @@\n+    static IntVector selectFromHelper(Vector<Integer> v1, Vector<Integer> v2, Vector<Integer> v3) {\n+        int vlen = v1.length();\n+        int[] res = new int[vlen];\n+        int[] vpayload1 = ((IntVector)v1).vec();\n+        int[] vpayload2 = ((IntVector)v2).vec();\n+        int[] vpayload3 = ((IntVector)v3).vec();\n+        for (int i = 0; i < vlen; i++) {\n+            int index = ((int)vpayload1[i]);\n+            res[i] = index >= vlen ? vpayload3[index & (vlen - 1)] : vpayload2[index];\n+        }\n+        return ((IntVector)v1).vectorFactory(res);\n+    }\n+\n@@ -2570,3 +2583,1 @@\n-            (vec1, vec2, vec3) -> {\n-                return vec2.rearrange(vec1.toShuffle(), vec3);\n-            }\n+            (vec1, vec2, vec3) -> selectFromHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -539,0 +539,13 @@\n+    static LongVector selectFromHelper(Vector<Long> v1, Vector<Long> v2, Vector<Long> v3) {\n+        int vlen = v1.length();\n+        long[] res = new long[vlen];\n+        long[] vpayload1 = ((LongVector)v1).vec();\n+        long[] vpayload2 = ((LongVector)v2).vec();\n+        long[] vpayload3 = ((LongVector)v3).vec();\n+        for (int i = 0; i < vlen; i++) {\n+            int index = ((int)vpayload1[i]);\n+            res[i] = index >= vlen ? vpayload3[index & (vlen - 1)] : vpayload2[index];\n+        }\n+        return ((LongVector)v1).vectorFactory(res);\n+    }\n+\n@@ -2436,3 +2449,1 @@\n-            (vec1, vec2, vec3) -> {\n-                return vec2.rearrange(vec1.toShuffle(), vec3);\n-            }\n+            (vec1, vec2, vec3) -> selectFromHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -539,0 +539,13 @@\n+    static ShortVector selectFromHelper(Vector<Short> v1, Vector<Short> v2, Vector<Short> v3) {\n+        int vlen = v1.length();\n+        short[] res = new short[vlen];\n+        short[] vpayload1 = ((ShortVector)v1).vec();\n+        short[] vpayload2 = ((ShortVector)v2).vec();\n+        short[] vpayload3 = ((ShortVector)v3).vec();\n+        for (int i = 0; i < vlen; i++) {\n+            int index = ((int)vpayload1[i]);\n+            res[i] = index >= vlen ? vpayload3[index & (vlen - 1)] : vpayload2[index];\n+        }\n+        return ((ShortVector)v1).vectorFactory(res);\n+    }\n+\n@@ -2586,3 +2599,1 @@\n-            (vec1, vec2, vec3) -> {\n-                return vec2.rearrange(vec1.toShuffle(), vec3);\n-            }\n+            (vec1, vec2, vec3) -> selectFromHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -553,0 +553,13 @@\n+    static $abstractvectortype$ selectFromHelper(Vector<$Boxtype$> v1, Vector<$Boxtype$> v2, Vector<$Boxtype$> v3) {\n+        int vlen = v1.length();\n+        $type$[] res = new $type$[vlen];\n+        $type$[] vpayload1 = (($abstractvectortype$)v1).vec();\n+        $type$[] vpayload2 = (($abstractvectortype$)v2).vec();\n+        $type$[] vpayload3 = (($abstractvectortype$)v3).vec();\n+        for (int i = 0; i < vlen; i++) {\n+            int index = ((int)vpayload1[i]);\n+            res[i] = index >= vlen ? vpayload3[index & (vlen - 1)] : vpayload2[index];\n+        }\n+        return (($abstractvectortype$)v1).vectorFactory(res);\n+    }\n+\n@@ -2978,3 +2991,1 @@\n-            (vec1, vec2, vec3) -> {\n-                return vec2.rearrange(vec1.toShuffle(), vec3);\n-            }\n+            (vec1, vec2, vec3) -> selectFromHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"}]}