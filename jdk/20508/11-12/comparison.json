{"files":[{"patch":"@@ -981,2 +981,0 @@\n-                                            \"Ljava\/lang\/Class;\"                                                                                \\\n-                                            \"Ljava\/lang\/Class;\"                                                                                \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2637,7 +2637,4 @@\n-\/\/  <V extends Vector<E1>,\n-\/\/   VI extends Vector<E2>,\n-\/\/   E1,\n-\/\/   E2>\n-\/\/  V selectFromTwoVectorOp(Class<? extends V> vClass, Class<? extends VI> viClass,\n-\/\/                          Class<E1> eClass, Class<E2> iClass, int length,\n-\/\/                          VI v1, V v2, V v3,\n+\/\/  <V extends Vector<E>,\n+\/\/   E>\n+\/\/  V selectFromTwoVectorOp(Class<? extends V> vClass, Class<E> eClass, int length,\n+\/\/                          V v1, V v2, V v3,\n@@ -2647,10 +2644,6 @@\n-  const TypeInstPtr* index_vector_klass = gvn().type(argument(1))->isa_instptr();\n-  const TypeInstPtr* elem_klass = gvn().type(argument(2))->isa_instptr();\n-  const TypeInstPtr* index_elem_klass = gvn().type(argument(3))->isa_instptr();\n-  const TypeInt* vlen = gvn().type(argument(4))->isa_int();\n-\n-  if (vector_klass == nullptr || index_vector_klass == nullptr || elem_klass == nullptr ||\n-      index_elem_klass == nullptr || vlen == nullptr || vector_klass->const_oop() == nullptr ||\n-      index_vector_klass->const_oop() == nullptr || elem_klass->const_oop() == nullptr ||\n-      index_elem_klass->const_oop() == nullptr || !vlen->is_con()) {\n-    log_if_needed(\"  ** missing constant: vclass=%s viclass = %s etype=%s itype = %s vlen=%s\",\n+  const TypeInstPtr* elem_klass = gvn().type(argument(1))->isa_instptr();\n+  const TypeInt* vlen = gvn().type(argument(2))->isa_int();\n+\n+  if (vector_klass == nullptr || elem_klass == nullptr || vlen == nullptr || vector_klass->const_oop() == nullptr ||\n+      elem_klass->const_oop() == nullptr ||!vlen->is_con()) {\n+    log_if_needed(\"  ** missing constant: vclass=%s etype=%s vlen=%s\",\n@@ -2659,3 +2652,1 @@\n-                    NodeClassNames[argument(2)->Opcode()],\n-                    NodeClassNames[argument(3)->Opcode()],\n-                    NodeClassNames[argument(4)->Opcode()]);\n+                    NodeClassNames[argument(2)->Opcode()]);\n@@ -2670,5 +2661,0 @@\n-  if (!is_klass_initialized(index_vector_klass)) {\n-    log_if_needed(\"  ** klass argument not initialized\");\n-    return false;\n-  }\n-\n@@ -2681,4 +2667,4 @@\n-  ciType* index_elem_type = index_elem_klass->const_oop()->as_instance()->java_mirror_type();\n-  if (!index_elem_type->is_primitive_type()) {\n-    log_if_needed(\"  ** index element not a primitive bt=%d\", index_elem_type->basic_type());\n-    return false; \/\/ should be primitive type\n+  int num_elem = vlen->get_con();\n+  if (!is_power_of_2(num_elem)) {\n+    log_if_needed(\"  ** vlen is not power of two=%d\", num_elem);\n+    return false;\n@@ -2687,1 +2673,0 @@\n-  int num_elem = vlen->get_con();\n@@ -2689,2 +2674,6 @@\n-  BasicType index_elem_bt = index_elem_type->basic_type();\n-  assert(!is_floating_point_type(index_elem_bt), \"floating point index element type\");\n+  BasicType index_elem_bt = elem_bt;\n+  if (elem_bt == T_FLOAT) {\n+    index_elem_bt = T_INT;\n+  } else if (elem_bt == T_DOUBLE) {\n+    index_elem_bt = T_LONG;\n+  }\n@@ -2693,1 +2682,1 @@\n-    int cast_vopc = VectorCastNode::opcode(-1, index_elem_bt, true);\n+    int cast_vopc = VectorCastNode::opcode(-1, elem_bt, true);\n@@ -2707,0 +2696,12 @@\n+  int cast_vopc = VectorCastNode::opcode(-1, elem_bt, true);\n+  if (is_floating_point_type(elem_bt)) {\n+    index_elem_bt = elem_bt == T_FLOAT ? T_INT : T_LONG;\n+    if (!arch_supports_vector(Op_AndV, num_elem, index_elem_bt, VecMaskNotUsed)              ||\n+        !arch_supports_vector(cast_vopc, num_elem, index_elem_bt, VecMaskNotUsed)            ||\n+        !arch_supports_vector(Op_Replicate, num_elem, index_elem_bt, VecMaskNotUsed)) {\n+      log_if_needed(\"  ** index wrapping not supported: vlen=%d etype=%s\" ,\n+                     num_elem, type2name(elem_bt));\n+      return false; \/\/ not supported\n+    }\n+  }\n+\n@@ -2708,1 +2709,0 @@\n-  ciKlass* index_vbox_klass = index_vector_klass->const_oop()->as_instance()->java_lang_Class_klass();\n@@ -2710,1 +2710,0 @@\n-  const TypeInstPtr* index_vbox_type = TypeInstPtr::make_exact(TypePtr::NotNull, index_vbox_klass);\n@@ -2712,1 +2711,1 @@\n-  Node* opd1 = unbox_vector(argument(5), index_vbox_type, index_elem_bt, num_elem);\n+  Node* opd1 = unbox_vector(argument(3), vbox_type, elem_bt, num_elem);\n@@ -2715,1 +2714,1 @@\n-                  NodeClassNames[argument(5)->Opcode()]);\n+                  NodeClassNames[argument(3)->Opcode()]);\n@@ -2718,1 +2717,1 @@\n-  Node* opd2 = unbox_vector(argument(6), vbox_type, elem_bt, num_elem);\n+  Node* opd2 = unbox_vector(argument(4), vbox_type, elem_bt, num_elem);\n@@ -2721,1 +2720,1 @@\n-                  NodeClassNames[argument(6)->Opcode()]);\n+                  NodeClassNames[argument(4)->Opcode()]);\n@@ -2724,1 +2723,1 @@\n-  Node* opd3 = unbox_vector(argument(7), vbox_type, elem_bt, num_elem);\n+  Node* opd3 = unbox_vector(argument(5), vbox_type, elem_bt, num_elem);\n@@ -2727,1 +2726,1 @@\n-                  NodeClassNames[argument(7)->Opcode()]);\n+                  NodeClassNames[argument(5)->Opcode()]);\n@@ -2731,0 +2730,9 @@\n+  if (index_elem_bt != elem_bt) {\n+    opd1 = gvn().transform(VectorCastNode::make(cast_vopc, opd1, index_elem_bt, num_elem));\n+  }\n+\n+  int indexRangeMask = 2 * num_elem - 1;\n+  Node* wrap_mask = gvn().makecon(TypeInteger::make(indexRangeMask, indexRangeMask, Type::WidenMin, index_elem_bt != T_LONG ? T_INT : index_elem_bt));\n+  Node* wrap_mask_vec = gvn().transform(VectorNode::scalar2vector(wrap_mask, num_elem, Type::get_const_basic_type(index_elem_bt), false));\n+  opd1 = gvn().transform(VectorNode::make(Op_AndV, opd1, wrap_mask_vec, opd1->bottom_type()->is_vect()));\n+\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":49,"deletions":41,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -386,2 +386,2 @@\n-    public interface SelectFromTwoVector<V extends Vector<?>, VI extends Vector<?>> {\n-        V apply(VI v1, V v2, V v3);\n+    public interface SelectFromTwoVector<V extends Vector<?>> {\n+        V apply(V v1, V v2, V v3);\n@@ -392,8 +392,5 @@\n-    <V extends Vector<E1>,\n-     VI extends Vector<E2>,\n-     E1,\n-     E2>\n-    V selectFromTwoVectorOp(Class<? extends V> vClass, Class<? extends VI> viClass,\n-                            Class<E1> eClass, Class<E2> iClass, int length,\n-                            VI v1, V v2, V v3,\n-                            SelectFromTwoVector<V,VI> defaultImpl) {\n+    <V extends Vector<E>,\n+     E>\n+    V selectFromTwoVectorOp(Class<? extends V> vClass, Class<E> eClass, int length,\n+                            V v1, V v2, V v3,\n+                            SelectFromTwoVector<V> defaultImpl) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate(Byte128Vector.class, (Byte128Vector) v1, (Byte128Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Byte128Vector) v1, (Byte128Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate(Byte256Vector.class, (Byte256Vector) v1, (Byte256Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Byte256Vector) v1, (Byte256Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate(Byte512Vector.class, (Byte512Vector) v1, (Byte512Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Byte512Vector) v1, (Byte512Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate(Byte64Vector.class, (Byte64Vector) v1, (Byte64Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Byte64Vector) v1, (Byte64Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate(ByteMaxVector.class, (ByteMaxVector) v1, (ByteMaxVector) v2);  \/\/ specialize\n+            super.selectFromTemplate((ByteMaxVector) v1, (ByteMaxVector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -539,2 +539,2 @@\n-    static ByteVector selectFromTwoVectorHelper(Vector<Byte> wrappedIndex, Vector<Byte> src1, Vector<Byte> src2) {\n-        int vlen = wrappedIndex.length();\n+    static ByteVector selectFromTwoVectorHelper(Vector<Byte> indexes, Vector<Byte> src1, Vector<Byte> src2) {\n+        int vlen = indexes.length();\n@@ -542,1 +542,1 @@\n-        byte[] vecPayload1 = ((ByteVector)wrappedIndex).vec();\n+        byte[] vecPayload1 = ((ByteVector)indexes).vec();\n@@ -546,2 +546,2 @@\n-            int index = ((int)vecPayload1[i]);\n-            res[i] = index >= vlen ? vecPayload3[index - vlen] : vecPayload2[index];\n+            int wrapped_index = VectorIntrinsics.wrapToRange((int)vecPayload1[i], 2 * vlen);\n+            res[i] = wrapped_index >= vlen ? vecPayload3[wrapped_index - vlen] : vecPayload2[wrapped_index];\n@@ -2595,10 +2595,3 @@\n-    final ByteVector selectFromTemplate(Class<? extends Vector<Byte>> indexVecClass,\n-                                                  ByteVector v1, ByteVector v2) {\n-        int vlen = length();\n-        assert ((vlen & (vlen -1)) == 0);\n-        int twoVectorLenMask = (vlen << 1) - 1;\n-        ByteVector wrapped_indexes = this.lanewise(VectorOperators.AND, twoVectorLenMask);\n-        return VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass, byte.class, byte.class,\n-                                                   vlen, wrapped_indexes, v1, v2,\n-                                                   (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n-        );\n+    final ByteVector selectFromTemplate(ByteVector v1, ByteVector v2) {\n+        return VectorSupport.selectFromTwoVectorOp(getClass(), byte.class, length(), this, v1, v2,\n+                                                   (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":8,"deletions":15,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-            super.selectFromTemplate(Long128Vector.class, (Double128Vector) v1, (Double128Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Double128Vector) v1, (Double128Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-            super.selectFromTemplate(Long256Vector.class, (Double256Vector) v1, (Double256Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Double256Vector) v1, (Double256Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-            super.selectFromTemplate(Long512Vector.class, (Double512Vector) v1, (Double512Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Double512Vector) v1, (Double512Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-            super.selectFromTemplate(Long64Vector.class, (Double64Vector) v1, (Double64Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Double64Vector) v1, (Double64Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-            super.selectFromTemplate(LongMaxVector.class, (DoubleMaxVector) v1, (DoubleMaxVector) v2);  \/\/ specialize\n+            super.selectFromTemplate((DoubleMaxVector) v1, (DoubleMaxVector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -528,2 +528,2 @@\n-    static DoubleVector selectFromTwoVectorHelper(Vector<Long> wrappedIndex, Vector<Double> src1, Vector<Double> src2) {\n-        int vlen = wrappedIndex.length();\n+    static DoubleVector selectFromTwoVectorHelper(Vector<Double> indexes, Vector<Double> src1, Vector<Double> src2) {\n+        int vlen = indexes.length();\n@@ -531,1 +531,1 @@\n-        long[] vecPayload1 = ((LongVector)wrappedIndex).vec();\n+        double[] vecPayload1 = ((DoubleVector)indexes).vec();\n@@ -535,2 +535,2 @@\n-            int index = ((int)vecPayload1[i]);\n-            res[i] = index >= vlen ? vecPayload3[index - vlen] : vecPayload2[index];\n+            int wrapped_index = VectorIntrinsics.wrapToRange((int)vecPayload1[i], 2 * vlen);\n+            res[i] = wrapped_index >= vlen ? vecPayload3[wrapped_index - vlen] : vecPayload2[wrapped_index];\n@@ -2437,11 +2437,3 @@\n-    final DoubleVector selectFromTemplate(Class<? extends Vector<Long>> indexVecClass,\n-                                                  DoubleVector v1, DoubleVector v2) {\n-        int vlen = length();\n-        assert ((vlen & (vlen -1)) == 0);\n-        int twoVectorLenMask = (vlen << 1) - 1;\n-        Vector<Long> wrapped_indexes = this.convert(VectorOperators.D2L, 0)\n-                                                   .lanewise(VectorOperators.AND, twoVectorLenMask);\n-        return VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass , double.class, long.class,\n-                                                   vlen, wrapped_indexes, v1, v2,\n-                                                   (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n-        );\n+    final DoubleVector selectFromTemplate(DoubleVector v1, DoubleVector v2) {\n+        return VectorSupport.selectFromTwoVectorOp(getClass(), double.class, length(), this, v1, v2,\n+                                                   (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":8,"deletions":16,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-            super.selectFromTemplate(Int128Vector.class, (Float128Vector) v1, (Float128Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Float128Vector) v1, (Float128Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-            super.selectFromTemplate(Int256Vector.class, (Float256Vector) v1, (Float256Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Float256Vector) v1, (Float256Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-            super.selectFromTemplate(Int512Vector.class, (Float512Vector) v1, (Float512Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Float512Vector) v1, (Float512Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-            super.selectFromTemplate(Int64Vector.class, (Float64Vector) v1, (Float64Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Float64Vector) v1, (Float64Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-            super.selectFromTemplate(IntMaxVector.class, (FloatMaxVector) v1, (FloatMaxVector) v2);  \/\/ specialize\n+            super.selectFromTemplate((FloatMaxVector) v1, (FloatMaxVector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -528,2 +528,2 @@\n-    static FloatVector selectFromTwoVectorHelper(Vector<Integer> wrappedIndex, Vector<Float> src1, Vector<Float> src2) {\n-        int vlen = wrappedIndex.length();\n+    static FloatVector selectFromTwoVectorHelper(Vector<Float> indexes, Vector<Float> src1, Vector<Float> src2) {\n+        int vlen = indexes.length();\n@@ -531,1 +531,1 @@\n-        int[] vecPayload1 = ((IntVector)wrappedIndex).vec();\n+        float[] vecPayload1 = ((FloatVector)indexes).vec();\n@@ -535,2 +535,2 @@\n-            int index = ((int)vecPayload1[i]);\n-            res[i] = index >= vlen ? vecPayload3[index - vlen] : vecPayload2[index];\n+            int wrapped_index = VectorIntrinsics.wrapToRange((int)vecPayload1[i], 2 * vlen);\n+            res[i] = wrapped_index >= vlen ? vecPayload3[wrapped_index - vlen] : vecPayload2[wrapped_index];\n@@ -2449,11 +2449,3 @@\n-    final FloatVector selectFromTemplate(Class<? extends Vector<Integer>> indexVecClass,\n-                                                  FloatVector v1, FloatVector v2) {\n-        int vlen = length();\n-        assert ((vlen & (vlen -1)) == 0);\n-        int twoVectorLenMask = (vlen << 1) - 1;\n-        Vector<Integer> wrapped_indexes = this.convert(VectorOperators.F2I, 0)\n-                                                   .lanewise(VectorOperators.AND, twoVectorLenMask);\n-        return VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass , float.class, int.class,\n-                                                   vlen, wrapped_indexes, v1, v2,\n-                                                   (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n-        );\n+    final FloatVector selectFromTemplate(FloatVector v1, FloatVector v2) {\n+        return VectorSupport.selectFromTwoVectorOp(getClass(), float.class, length(), this, v1, v2,\n+                                                   (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":8,"deletions":16,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate(Int128Vector.class, (Int128Vector) v1, (Int128Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Int128Vector) v1, (Int128Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate(Int256Vector.class, (Int256Vector) v1, (Int256Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Int256Vector) v1, (Int256Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate(Int512Vector.class, (Int512Vector) v1, (Int512Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Int512Vector) v1, (Int512Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate(Int64Vector.class, (Int64Vector) v1, (Int64Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Int64Vector) v1, (Int64Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate(IntMaxVector.class, (IntMaxVector) v1, (IntMaxVector) v2);  \/\/ specialize\n+            super.selectFromTemplate((IntMaxVector) v1, (IntMaxVector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -539,2 +539,2 @@\n-    static IntVector selectFromTwoVectorHelper(Vector<Integer> wrappedIndex, Vector<Integer> src1, Vector<Integer> src2) {\n-        int vlen = wrappedIndex.length();\n+    static IntVector selectFromTwoVectorHelper(Vector<Integer> indexes, Vector<Integer> src1, Vector<Integer> src2) {\n+        int vlen = indexes.length();\n@@ -542,1 +542,1 @@\n-        int[] vecPayload1 = ((IntVector)wrappedIndex).vec();\n+        int[] vecPayload1 = ((IntVector)indexes).vec();\n@@ -546,2 +546,2 @@\n-            int index = ((int)vecPayload1[i]);\n-            res[i] = index >= vlen ? vecPayload3[index - vlen] : vecPayload2[index];\n+            int wrapped_index = VectorIntrinsics.wrapToRange((int)vecPayload1[i], 2 * vlen);\n+            res[i] = wrapped_index >= vlen ? vecPayload3[wrapped_index - vlen] : vecPayload2[wrapped_index];\n@@ -2580,10 +2580,3 @@\n-    final IntVector selectFromTemplate(Class<? extends Vector<Integer>> indexVecClass,\n-                                                  IntVector v1, IntVector v2) {\n-        int vlen = length();\n-        assert ((vlen & (vlen -1)) == 0);\n-        int twoVectorLenMask = (vlen << 1) - 1;\n-        IntVector wrapped_indexes = this.lanewise(VectorOperators.AND, twoVectorLenMask);\n-        return VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass, int.class, int.class,\n-                                                   vlen, wrapped_indexes, v1, v2,\n-                                                   (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n-        );\n+    final IntVector selectFromTemplate(IntVector v1, IntVector v2) {\n+        return VectorSupport.selectFromTwoVectorOp(getClass(), int.class, length(), this, v1, v2,\n+                                                   (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":8,"deletions":15,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -504,1 +504,1 @@\n-            super.selectFromTemplate(Long128Vector.class, (Long128Vector) v1, (Long128Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Long128Vector) v1, (Long128Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -504,1 +504,1 @@\n-            super.selectFromTemplate(Long256Vector.class, (Long256Vector) v1, (Long256Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Long256Vector) v1, (Long256Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -504,1 +504,1 @@\n-            super.selectFromTemplate(Long512Vector.class, (Long512Vector) v1, (Long512Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Long512Vector) v1, (Long512Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -504,1 +504,1 @@\n-            super.selectFromTemplate(Long64Vector.class, (Long64Vector) v1, (Long64Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Long64Vector) v1, (Long64Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -504,1 +504,1 @@\n-            super.selectFromTemplate(LongMaxVector.class, (LongMaxVector) v1, (LongMaxVector) v2);  \/\/ specialize\n+            super.selectFromTemplate((LongMaxVector) v1, (LongMaxVector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -539,2 +539,2 @@\n-    static LongVector selectFromTwoVectorHelper(Vector<Long> wrappedIndex, Vector<Long> src1, Vector<Long> src2) {\n-        int vlen = wrappedIndex.length();\n+    static LongVector selectFromTwoVectorHelper(Vector<Long> indexes, Vector<Long> src1, Vector<Long> src2) {\n+        int vlen = indexes.length();\n@@ -542,1 +542,1 @@\n-        long[] vecPayload1 = ((LongVector)wrappedIndex).vec();\n+        long[] vecPayload1 = ((LongVector)indexes).vec();\n@@ -546,2 +546,2 @@\n-            int index = ((int)vecPayload1[i]);\n-            res[i] = index >= vlen ? vecPayload3[index - vlen] : vecPayload2[index];\n+            int wrapped_index = VectorIntrinsics.wrapToRange((int)vecPayload1[i], 2 * vlen);\n+            res[i] = wrapped_index >= vlen ? vecPayload3[wrapped_index - vlen] : vecPayload2[wrapped_index];\n@@ -2446,10 +2446,3 @@\n-    final LongVector selectFromTemplate(Class<? extends Vector<Long>> indexVecClass,\n-                                                  LongVector v1, LongVector v2) {\n-        int vlen = length();\n-        assert ((vlen & (vlen -1)) == 0);\n-        int twoVectorLenMask = (vlen << 1) - 1;\n-        LongVector wrapped_indexes = this.lanewise(VectorOperators.AND, twoVectorLenMask);\n-        return VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass, long.class, long.class,\n-                                                   vlen, wrapped_indexes, v1, v2,\n-                                                   (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n-        );\n+    final LongVector selectFromTemplate(LongVector v1, LongVector v2) {\n+        return VectorSupport.selectFromTwoVectorOp(getClass(), long.class, length(), this, v1, v2,\n+                                                   (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":8,"deletions":15,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate(Short128Vector.class, (Short128Vector) v1, (Short128Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Short128Vector) v1, (Short128Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate(Short256Vector.class, (Short256Vector) v1, (Short256Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Short256Vector) v1, (Short256Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate(Short512Vector.class, (Short512Vector) v1, (Short512Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Short512Vector) v1, (Short512Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate(Short64Vector.class, (Short64Vector) v1, (Short64Vector) v2);  \/\/ specialize\n+            super.selectFromTemplate((Short64Vector) v1, (Short64Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            super.selectFromTemplate(ShortMaxVector.class, (ShortMaxVector) v1, (ShortMaxVector) v2);  \/\/ specialize\n+            super.selectFromTemplate((ShortMaxVector) v1, (ShortMaxVector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -539,2 +539,2 @@\n-    static ShortVector selectFromTwoVectorHelper(Vector<Short> wrappedIndex, Vector<Short> src1, Vector<Short> src2) {\n-        int vlen = wrappedIndex.length();\n+    static ShortVector selectFromTwoVectorHelper(Vector<Short> indexes, Vector<Short> src1, Vector<Short> src2) {\n+        int vlen = indexes.length();\n@@ -542,1 +542,1 @@\n-        short[] vecPayload1 = ((ShortVector)wrappedIndex).vec();\n+        short[] vecPayload1 = ((ShortVector)indexes).vec();\n@@ -546,2 +546,2 @@\n-            int index = ((int)vecPayload1[i]);\n-            res[i] = index >= vlen ? vecPayload3[index - vlen] : vecPayload2[index];\n+            int wrapped_index = VectorIntrinsics.wrapToRange((int)vecPayload1[i], 2 * vlen);\n+            res[i] = wrapped_index >= vlen ? vecPayload3[wrapped_index - vlen] : vecPayload2[wrapped_index];\n@@ -2596,10 +2596,3 @@\n-    final ShortVector selectFromTemplate(Class<? extends Vector<Short>> indexVecClass,\n-                                                  ShortVector v1, ShortVector v2) {\n-        int vlen = length();\n-        assert ((vlen & (vlen -1)) == 0);\n-        int twoVectorLenMask = (vlen << 1) - 1;\n-        ShortVector wrapped_indexes = this.lanewise(VectorOperators.AND, twoVectorLenMask);\n-        return VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass, short.class, short.class,\n-                                                   vlen, wrapped_indexes, v1, v2,\n-                                                   (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n-        );\n+    final ShortVector selectFromTemplate(ShortVector v1, ShortVector v2) {\n+        return VectorSupport.selectFromTwoVectorOp(getClass(), short.class, length(), this, v1, v2,\n+                                                   (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":8,"deletions":15,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -553,2 +553,2 @@\n-    static $abstractvectortype$ selectFromTwoVectorHelper(Vector<$Boxbitstype$> wrappedIndex, Vector<$Boxtype$> src1, Vector<$Boxtype$> src2) {\n-        int vlen = wrappedIndex.length();\n+    static $abstractvectortype$ selectFromTwoVectorHelper(Vector<$Boxtype$> indexes, Vector<$Boxtype$> src1, Vector<$Boxtype$> src2) {\n+        int vlen = indexes.length();\n@@ -556,1 +556,1 @@\n-        $bitstype$[] vecPayload1 = (($abstractbitsvectortype$)wrappedIndex).vec();\n+        $type$[] vecPayload1 = (($abstractvectortype$)indexes).vec();\n@@ -560,2 +560,2 @@\n-            int index = ((int)vecPayload1[i]);\n-            res[i] = index >= vlen ? vecPayload3[index - vlen] : vecPayload2[index];\n+            int wrapped_index = VectorIntrinsics.wrapToRange((int)vecPayload1[i], 2 * vlen);\n+            res[i] = wrapped_index >= vlen ? vecPayload3[wrapped_index - vlen] : vecPayload2[wrapped_index];\n@@ -2972,19 +2972,3 @@\n-    final $abstractvectortype$ selectFromTemplate(Class<? extends Vector<$Boxbitstype$>> indexVecClass,\n-                                                  $abstractvectortype$ v1, $abstractvectortype$ v2) {\n-        int vlen = length();\n-        assert ((vlen & (vlen -1)) == 0);\n-        int twoVectorLenMask = (vlen << 1) - 1;\n-#if[FP]\n-        Vector<$Boxbitstype$> wrapped_indexes = this.convert(VectorOperators.{#if[intOrFloat]?F2I:D2L}, 0)\n-                                                   .lanewise(VectorOperators.AND, twoVectorLenMask);\n-        return VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass , $type$.class, $bitstype$.class,\n-                                                   vlen, wrapped_indexes, v1, v2,\n-                                                   (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n-        );\n-#else[FP]\n-        $abstractvectortype$ wrapped_indexes = this.lanewise(VectorOperators.AND, twoVectorLenMask);\n-        return VectorSupport.selectFromTwoVectorOp(getClass(), indexVecClass, $type$.class, $type$.class,\n-                                                   vlen, wrapped_indexes, v1, v2,\n-                                                   (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n-        );\n-#end[FP]\n+    final $abstractvectortype$ selectFromTemplate($abstractvectortype$ v1, $abstractvectortype$ v2) {\n+        return VectorSupport.selectFromTwoVectorOp(getClass(), $type$.class, length(), this, v1, v2,\n+                                                   (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":8,"deletions":24,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -520,1 +520,1 @@\n-            super.selectFromTemplate($Bitstype$$bits$Vector.class, ($vectortype$) v1, ($vectortype$) v2);  \/\/ specialize\n+            super.selectFromTemplate(($vectortype$) v1, ($vectortype$) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}