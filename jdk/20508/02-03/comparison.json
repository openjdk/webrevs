{"files":[{"patch":"@@ -514,9 +514,1 @@\n-            super.selectFromTemplate((Byte128Vector) v1, (Byte128Vector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Byte128Vector selectFrom(Vector<Byte> v1,\n-                                   Vector<Byte> v2, boolean wrap) {\n-        return (Byte128Vector)\n-            super.selectFromTemplate((Byte128Vector) v1, (Byte128Vector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((Byte128Vector) v1, (Byte128Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -514,9 +514,1 @@\n-            super.selectFromTemplate((Byte256Vector) v1, (Byte256Vector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Byte256Vector selectFrom(Vector<Byte> v1,\n-                                   Vector<Byte> v2, boolean wrap) {\n-        return (Byte256Vector)\n-            super.selectFromTemplate((Byte256Vector) v1, (Byte256Vector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((Byte256Vector) v1, (Byte256Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -514,9 +514,1 @@\n-            super.selectFromTemplate((Byte512Vector) v1, (Byte512Vector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Byte512Vector selectFrom(Vector<Byte> v1,\n-                                   Vector<Byte> v2, boolean wrap) {\n-        return (Byte512Vector)\n-            super.selectFromTemplate((Byte512Vector) v1, (Byte512Vector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((Byte512Vector) v1, (Byte512Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -514,9 +514,1 @@\n-            super.selectFromTemplate((Byte64Vector) v1, (Byte64Vector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Byte64Vector selectFrom(Vector<Byte> v1,\n-                                   Vector<Byte> v2, boolean wrap) {\n-        return (Byte64Vector)\n-            super.selectFromTemplate((Byte64Vector) v1, (Byte64Vector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((Byte64Vector) v1, (Byte64Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -514,9 +514,1 @@\n-            super.selectFromTemplate((ByteMaxVector) v1, (ByteMaxVector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public ByteMaxVector selectFrom(Vector<Byte> v1,\n-                                   Vector<Byte> v2, boolean wrap) {\n-        return (ByteMaxVector)\n-            super.selectFromTemplate((ByteMaxVector) v1, (ByteMaxVector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((ByteMaxVector) v1, (ByteMaxVector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2584,7 +2584,0 @@\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    public abstract\n-    ByteVector selectFrom(Vector<Byte> v1, Vector<Byte> v2, boolean wrap);\n-\n@@ -2593,1 +2586,1 @@\n-    final ByteVector selectFromTemplate(ByteVector v1, ByteVector v2, boolean wrap) {\n+    final ByteVector selectFromTemplate(ByteVector v1, ByteVector v2) {\n@@ -2595,5 +2588,1 @@\n-        ByteVector wrapped_indexes = this;\n-        if (!wrap && this.compare(VectorOperators.UNSIGNED_GT, twovectorlen - 1).anyTrue()) {\n-            throw checkIndexFailed(this, twovectorlen);\n-        }\n-        wrapped_indexes = this.lanewise(VectorOperators.AND, twovectorlen - 1);\n+        ByteVector wrapped_indexes = this.lanewise(VectorOperators.AND, twovectorlen - 1);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -501,9 +501,1 @@\n-            super.selectFromTemplate((Double128Vector) v1, (Double128Vector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Double128Vector selectFrom(Vector<Double> v1,\n-                                   Vector<Double> v2, boolean wrap) {\n-        return (Double128Vector)\n-            super.selectFromTemplate((Double128Vector) v1, (Double128Vector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((Double128Vector) v1, (Double128Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -501,9 +501,1 @@\n-            super.selectFromTemplate((Double256Vector) v1, (Double256Vector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Double256Vector selectFrom(Vector<Double> v1,\n-                                   Vector<Double> v2, boolean wrap) {\n-        return (Double256Vector)\n-            super.selectFromTemplate((Double256Vector) v1, (Double256Vector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((Double256Vector) v1, (Double256Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -501,9 +501,1 @@\n-            super.selectFromTemplate((Double512Vector) v1, (Double512Vector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Double512Vector selectFrom(Vector<Double> v1,\n-                                   Vector<Double> v2, boolean wrap) {\n-        return (Double512Vector)\n-            super.selectFromTemplate((Double512Vector) v1, (Double512Vector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((Double512Vector) v1, (Double512Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -501,9 +501,1 @@\n-            super.selectFromTemplate((Double64Vector) v1, (Double64Vector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Double64Vector selectFrom(Vector<Double> v1,\n-                                   Vector<Double> v2, boolean wrap) {\n-        return (Double64Vector)\n-            super.selectFromTemplate((Double64Vector) v1, (Double64Vector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((Double64Vector) v1, (Double64Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -501,9 +501,1 @@\n-            super.selectFromTemplate((DoubleMaxVector) v1, (DoubleMaxVector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public DoubleMaxVector selectFrom(Vector<Double> v1,\n-                                   Vector<Double> v2, boolean wrap) {\n-        return (DoubleMaxVector)\n-            super.selectFromTemplate((DoubleMaxVector) v1, (DoubleMaxVector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((DoubleMaxVector) v1, (DoubleMaxVector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2426,7 +2426,0 @@\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    public abstract\n-    DoubleVector selectFrom(Vector<Double> v1, Vector<Double> v2, boolean wrap);\n-\n@@ -2435,1 +2428,1 @@\n-    final DoubleVector selectFromTemplate(DoubleVector v1, DoubleVector v2, boolean wrap) {\n+    final DoubleVector selectFromTemplate(DoubleVector v1, DoubleVector v2) {\n@@ -2437,12 +2430,5 @@\n-        DoubleVector wrapped_indexes = this;\n-        if (!wrap &&\n-               (!this.test(VectorOperators.IS_FINITE).allTrue() ||\n-                 this.compare(VectorOperators.LT, 0)\n-                 .or(this.compare(VectorOperators.GE, twovectorlen)).anyTrue())) {\n-            throw checkIndexFailed(this, twovectorlen);\n-        }\n-        wrapped_indexes = wrapped_indexes.convert(VectorOperators.D2I, 0)\n-                          .lanewise(VectorOperators.AND, twovectorlen - 1)\n-                          .reinterpretAsInts()\n-                          .convert(VectorOperators.I2D, 0)\n-                          .reinterpretAsDoubles();\n+        DoubleVector wrapped_indexes = this.convert(VectorOperators.D2I, 0)\n+                                               .lanewise(VectorOperators.AND, twovectorlen - 1)\n+                                               .reinterpretAsInts()\n+                                               .convert(VectorOperators.I2D, 0)\n+                                               .reinterpretAsDoubles();\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":6,"deletions":20,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -501,9 +501,1 @@\n-            super.selectFromTemplate((Float128Vector) v1, (Float128Vector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Float128Vector selectFrom(Vector<Float> v1,\n-                                   Vector<Float> v2, boolean wrap) {\n-        return (Float128Vector)\n-            super.selectFromTemplate((Float128Vector) v1, (Float128Vector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((Float128Vector) v1, (Float128Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -501,9 +501,1 @@\n-            super.selectFromTemplate((Float256Vector) v1, (Float256Vector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Float256Vector selectFrom(Vector<Float> v1,\n-                                   Vector<Float> v2, boolean wrap) {\n-        return (Float256Vector)\n-            super.selectFromTemplate((Float256Vector) v1, (Float256Vector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((Float256Vector) v1, (Float256Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -501,9 +501,1 @@\n-            super.selectFromTemplate((Float512Vector) v1, (Float512Vector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Float512Vector selectFrom(Vector<Float> v1,\n-                                   Vector<Float> v2, boolean wrap) {\n-        return (Float512Vector)\n-            super.selectFromTemplate((Float512Vector) v1, (Float512Vector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((Float512Vector) v1, (Float512Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -501,9 +501,1 @@\n-            super.selectFromTemplate((Float64Vector) v1, (Float64Vector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Float64Vector selectFrom(Vector<Float> v1,\n-                                   Vector<Float> v2, boolean wrap) {\n-        return (Float64Vector)\n-            super.selectFromTemplate((Float64Vector) v1, (Float64Vector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((Float64Vector) v1, (Float64Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -501,9 +501,1 @@\n-            super.selectFromTemplate((FloatMaxVector) v1, (FloatMaxVector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public FloatMaxVector selectFrom(Vector<Float> v1,\n-                                   Vector<Float> v2, boolean wrap) {\n-        return (FloatMaxVector)\n-            super.selectFromTemplate((FloatMaxVector) v1, (FloatMaxVector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((FloatMaxVector) v1, (FloatMaxVector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2438,7 +2438,0 @@\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    public abstract\n-    FloatVector selectFrom(Vector<Float> v1, Vector<Float> v2, boolean wrap);\n-\n@@ -2447,1 +2440,1 @@\n-    final FloatVector selectFromTemplate(FloatVector v1, FloatVector v2, boolean wrap) {\n+    final FloatVector selectFromTemplate(FloatVector v1, FloatVector v2) {\n@@ -2449,12 +2442,5 @@\n-        FloatVector wrapped_indexes = this;\n-        if (!wrap &&\n-               (!this.test(VectorOperators.IS_FINITE).allTrue() ||\n-                 this.compare(VectorOperators.LT, 0)\n-                 .or(this.compare(VectorOperators.GE, twovectorlen)).anyTrue())) {\n-            throw checkIndexFailed(this, twovectorlen);\n-        }\n-        wrapped_indexes = wrapped_indexes.convert(VectorOperators.F2I, 0)\n-                          .lanewise(VectorOperators.AND, twovectorlen - 1)\n-                          .reinterpretAsInts()\n-                          .convert(VectorOperators.I2F, 0)\n-                          .reinterpretAsFloats();\n+        FloatVector wrapped_indexes = this.convert(VectorOperators.F2I, 0)\n+                                               .lanewise(VectorOperators.AND, twovectorlen - 1)\n+                                               .reinterpretAsInts()\n+                                               .convert(VectorOperators.I2F, 0)\n+                                               .reinterpretAsFloats();\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":6,"deletions":20,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -514,9 +514,1 @@\n-            super.selectFromTemplate((Int128Vector) v1, (Int128Vector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Int128Vector selectFrom(Vector<Integer> v1,\n-                                   Vector<Integer> v2, boolean wrap) {\n-        return (Int128Vector)\n-            super.selectFromTemplate((Int128Vector) v1, (Int128Vector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((Int128Vector) v1, (Int128Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -514,9 +514,1 @@\n-            super.selectFromTemplate((Int256Vector) v1, (Int256Vector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Int256Vector selectFrom(Vector<Integer> v1,\n-                                   Vector<Integer> v2, boolean wrap) {\n-        return (Int256Vector)\n-            super.selectFromTemplate((Int256Vector) v1, (Int256Vector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((Int256Vector) v1, (Int256Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -514,9 +514,1 @@\n-            super.selectFromTemplate((Int512Vector) v1, (Int512Vector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Int512Vector selectFrom(Vector<Integer> v1,\n-                                   Vector<Integer> v2, boolean wrap) {\n-        return (Int512Vector)\n-            super.selectFromTemplate((Int512Vector) v1, (Int512Vector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((Int512Vector) v1, (Int512Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -514,9 +514,1 @@\n-            super.selectFromTemplate((Int64Vector) v1, (Int64Vector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Int64Vector selectFrom(Vector<Integer> v1,\n-                                   Vector<Integer> v2, boolean wrap) {\n-        return (Int64Vector)\n-            super.selectFromTemplate((Int64Vector) v1, (Int64Vector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((Int64Vector) v1, (Int64Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -514,9 +514,1 @@\n-            super.selectFromTemplate((IntMaxVector) v1, (IntMaxVector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public IntMaxVector selectFrom(Vector<Integer> v1,\n-                                   Vector<Integer> v2, boolean wrap) {\n-        return (IntMaxVector)\n-            super.selectFromTemplate((IntMaxVector) v1, (IntMaxVector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((IntMaxVector) v1, (IntMaxVector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2569,7 +2569,0 @@\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    public abstract\n-    IntVector selectFrom(Vector<Integer> v1, Vector<Integer> v2, boolean wrap);\n-\n@@ -2578,1 +2571,1 @@\n-    final IntVector selectFromTemplate(IntVector v1, IntVector v2, boolean wrap) {\n+    final IntVector selectFromTemplate(IntVector v1, IntVector v2) {\n@@ -2580,5 +2573,1 @@\n-        IntVector wrapped_indexes = this;\n-        if (!wrap && this.compare(VectorOperators.UNSIGNED_GT, twovectorlen - 1).anyTrue()) {\n-            throw checkIndexFailed(this, twovectorlen);\n-        }\n-        wrapped_indexes = this.lanewise(VectorOperators.AND, twovectorlen - 1);\n+        IntVector wrapped_indexes = this.lanewise(VectorOperators.AND, twovectorlen - 1);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -504,9 +504,1 @@\n-            super.selectFromTemplate((Long128Vector) v1, (Long128Vector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Long128Vector selectFrom(Vector<Long> v1,\n-                                   Vector<Long> v2, boolean wrap) {\n-        return (Long128Vector)\n-            super.selectFromTemplate((Long128Vector) v1, (Long128Vector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((Long128Vector) v1, (Long128Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -504,9 +504,1 @@\n-            super.selectFromTemplate((Long256Vector) v1, (Long256Vector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Long256Vector selectFrom(Vector<Long> v1,\n-                                   Vector<Long> v2, boolean wrap) {\n-        return (Long256Vector)\n-            super.selectFromTemplate((Long256Vector) v1, (Long256Vector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((Long256Vector) v1, (Long256Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -504,9 +504,1 @@\n-            super.selectFromTemplate((Long512Vector) v1, (Long512Vector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Long512Vector selectFrom(Vector<Long> v1,\n-                                   Vector<Long> v2, boolean wrap) {\n-        return (Long512Vector)\n-            super.selectFromTemplate((Long512Vector) v1, (Long512Vector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((Long512Vector) v1, (Long512Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -504,9 +504,1 @@\n-            super.selectFromTemplate((Long64Vector) v1, (Long64Vector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Long64Vector selectFrom(Vector<Long> v1,\n-                                   Vector<Long> v2, boolean wrap) {\n-        return (Long64Vector)\n-            super.selectFromTemplate((Long64Vector) v1, (Long64Vector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((Long64Vector) v1, (Long64Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -504,9 +504,1 @@\n-            super.selectFromTemplate((LongMaxVector) v1, (LongMaxVector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public LongMaxVector selectFrom(Vector<Long> v1,\n-                                   Vector<Long> v2, boolean wrap) {\n-        return (LongMaxVector)\n-            super.selectFromTemplate((LongMaxVector) v1, (LongMaxVector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((LongMaxVector) v1, (LongMaxVector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2435,7 +2435,0 @@\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    public abstract\n-    LongVector selectFrom(Vector<Long> v1, Vector<Long> v2, boolean wrap);\n-\n@@ -2444,1 +2437,1 @@\n-    final LongVector selectFromTemplate(LongVector v1, LongVector v2, boolean wrap) {\n+    final LongVector selectFromTemplate(LongVector v1, LongVector v2) {\n@@ -2446,5 +2439,1 @@\n-        LongVector wrapped_indexes = this;\n-        if (!wrap && this.compare(VectorOperators.UNSIGNED_GT, twovectorlen - 1).anyTrue()) {\n-            throw checkIndexFailed(this, twovectorlen);\n-        }\n-        wrapped_indexes = this.lanewise(VectorOperators.AND, twovectorlen - 1);\n+        LongVector wrapped_indexes = this.lanewise(VectorOperators.AND, twovectorlen - 1);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -514,9 +514,1 @@\n-            super.selectFromTemplate((Short128Vector) v1, (Short128Vector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Short128Vector selectFrom(Vector<Short> v1,\n-                                   Vector<Short> v2, boolean wrap) {\n-        return (Short128Vector)\n-            super.selectFromTemplate((Short128Vector) v1, (Short128Vector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((Short128Vector) v1, (Short128Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -514,9 +514,1 @@\n-            super.selectFromTemplate((Short256Vector) v1, (Short256Vector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Short256Vector selectFrom(Vector<Short> v1,\n-                                   Vector<Short> v2, boolean wrap) {\n-        return (Short256Vector)\n-            super.selectFromTemplate((Short256Vector) v1, (Short256Vector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((Short256Vector) v1, (Short256Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -514,9 +514,1 @@\n-            super.selectFromTemplate((Short512Vector) v1, (Short512Vector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Short512Vector selectFrom(Vector<Short> v1,\n-                                   Vector<Short> v2, boolean wrap) {\n-        return (Short512Vector)\n-            super.selectFromTemplate((Short512Vector) v1, (Short512Vector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((Short512Vector) v1, (Short512Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -514,9 +514,1 @@\n-            super.selectFromTemplate((Short64Vector) v1, (Short64Vector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Short64Vector selectFrom(Vector<Short> v1,\n-                                   Vector<Short> v2, boolean wrap) {\n-        return (Short64Vector)\n-            super.selectFromTemplate((Short64Vector) v1, (Short64Vector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((Short64Vector) v1, (Short64Vector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -514,9 +514,1 @@\n-            super.selectFromTemplate((ShortMaxVector) v1, (ShortMaxVector) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public ShortMaxVector selectFrom(Vector<Short> v1,\n-                                   Vector<Short> v2, boolean wrap) {\n-        return (ShortMaxVector)\n-            super.selectFromTemplate((ShortMaxVector) v1, (ShortMaxVector) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate((ShortMaxVector) v1, (ShortMaxVector) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2585,7 +2585,0 @@\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    public abstract\n-    ShortVector selectFrom(Vector<Short> v1, Vector<Short> v2, boolean wrap);\n-\n@@ -2594,1 +2587,1 @@\n-    final ShortVector selectFromTemplate(ShortVector v1, ShortVector v2, boolean wrap) {\n+    final ShortVector selectFromTemplate(ShortVector v1, ShortVector v2) {\n@@ -2596,5 +2589,1 @@\n-        ShortVector wrapped_indexes = this;\n-        if (!wrap && this.compare(VectorOperators.UNSIGNED_GT, twovectorlen - 1).anyTrue()) {\n-            throw checkIndexFailed(this, twovectorlen);\n-        }\n-        wrapped_indexes = this.lanewise(VectorOperators.AND, twovectorlen - 1);\n+        ShortVector wrapped_indexes = this.lanewise(VectorOperators.AND, twovectorlen - 1);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2792,24 +2792,0 @@\n-    \/**\n-     * Rearranges the lane elements of two vectors, selecting lanes\n-     * under the control of a specific index vector (the current vector)\n-     * holding indexes in valid index range of two vectors i.e. {@code [0, VLENGTH*2)}.\n-     *\n-     * This is a cross-lane operation that rearranges the lane\n-     * elements of the two input vectors {@code v1} and a second vector {@code v2}).\n-     *\n-     * For each lane {@code N} of the index vector (the current vector), and\n-     * for each lane source index {@code I=this.laneSource(N)} in the index vector,\n-     * the output lane {@code N} obtains the value from the first vector at lane {@code I}\n-     * if {@code I>=0 && I < VLENGTH}. Otherwise, index vector lane is used to index\n-     * the <em>second<\/em> vector, at index {@code I-VLENGTH}.\n-     *\n-     * @param v1 the first input vector\n-     * @param v2 the second input vector\n-     * @param wrap wrap the indexes to valied index range of two vectors.\n-     * @return the rearrangement of lane elements of first and\n-     *         the second input vector\n-     * @throws IndexOutOfBoundsException if any invalid\n-     *         source indexes are found in {@code this}\n-     *\/\n-    public abstract Vector<E> selectFrom(Vector<E> v1, Vector<E> v2, boolean wrap);\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Vector.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2961,7 +2961,0 @@\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    public abstract\n-    $abstractvectortype$ selectFrom(Vector<$Boxtype$> v1, Vector<$Boxtype$> v2, boolean wrap);\n-\n@@ -2970,1 +2963,1 @@\n-    final $abstractvectortype$ selectFromTemplate($abstractvectortype$ v1, $abstractvectortype$ v2, boolean wrap) {\n+    final $abstractvectortype$ selectFromTemplate($abstractvectortype$ v1, $abstractvectortype$ v2) {\n@@ -2972,1 +2965,0 @@\n-        $abstractvectortype$ wrapped_indexes = this;\n@@ -2974,6 +2966,0 @@\n-        if (!wrap &&\n-               (!this.test(VectorOperators.IS_FINITE).allTrue() ||\n-                 this.compare(VectorOperators.LT, 0)\n-                 .or(this.compare(VectorOperators.GE, twovectorlen)).anyTrue())) {\n-            throw checkIndexFailed(this, twovectorlen);\n-        }\n@@ -2981,5 +2967,5 @@\n-        wrapped_indexes = wrapped_indexes.convert(VectorOperators.F2I, 0)\n-                          .lanewise(VectorOperators.AND, twovectorlen - 1)\n-                          .reinterpretAsInts()\n-                          .convert(VectorOperators.I2F, 0)\n-                          .reinterpretAsFloats();\n+        $abstractvectortype$ wrapped_indexes = this.convert(VectorOperators.F2I, 0)\n+                                               .lanewise(VectorOperators.AND, twovectorlen - 1)\n+                                               .reinterpretAsInts()\n+                                               .convert(VectorOperators.I2F, 0)\n+                                               .reinterpretAsFloats();\n@@ -2987,5 +2973,5 @@\n-        wrapped_indexes = wrapped_indexes.convert(VectorOperators.D2I, 0)\n-                          .lanewise(VectorOperators.AND, twovectorlen - 1)\n-                          .reinterpretAsInts()\n-                          .convert(VectorOperators.I2D, 0)\n-                          .reinterpretAsDoubles();\n+        $abstractvectortype$ wrapped_indexes = this.convert(VectorOperators.D2I, 0)\n+                                               .lanewise(VectorOperators.AND, twovectorlen - 1)\n+                                               .reinterpretAsInts()\n+                                               .convert(VectorOperators.I2D, 0)\n+                                               .reinterpretAsDoubles();\n@@ -2994,4 +2980,1 @@\n-        if (!wrap && this.compare(VectorOperators.UNSIGNED_GT, twovectorlen - 1).anyTrue()) {\n-            throw checkIndexFailed(this, twovectorlen);\n-        }\n-        wrapped_indexes = this.lanewise(VectorOperators.AND, twovectorlen - 1);\n+        $abstractvectortype$ wrapped_indexes = this.lanewise(VectorOperators.AND, twovectorlen - 1);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":12,"deletions":29,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -520,9 +520,1 @@\n-            super.selectFromTemplate(($vectortype$) v1, ($vectortype$) v2, true);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public $vectortype$ selectFrom(Vector<$Boxtype$> v1,\n-                                   Vector<$Boxtype$> v2, boolean wrap) {\n-        return ($vectortype$)\n-            super.selectFromTemplate(($vectortype$) v1, ($vectortype$) v2, wrap);  \/\/ specialize\n+            super.selectFromTemplate(($vectortype$) v1, ($vectortype$) v2);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"}]}