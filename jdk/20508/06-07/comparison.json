{"files":[{"patch":"@@ -180,1 +180,1 @@\n-  static bool vector_indexes_needs_massaging(BasicType ety, int vlen) {\n+  static bool vector_indexes_needs_pruning(BasicType bt, int vlen) {\n","filename":"src\/hotspot\/cpu\/aarch64\/matcher_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -173,1 +173,1 @@\n-  static bool vector_indexes_needs_massaging(BasicType ety, int vlen) {\n+  static bool vector_indexes_needs_pruning(BasicType bt, int vlen) {\n","filename":"src\/hotspot\/cpu\/arm\/matcher_arm.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-  static bool vector_indexes_needs_massaging(BasicType ety, int vlen) {\n+  static bool vector_indexes_needs_pruning(BasicType bt, int vlen) {\n","filename":"src\/hotspot\/cpu\/ppc\/matcher_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-  static bool vector_indexes_needs_massaging(BasicType ety, int vlen) {\n+  static bool vector_indexes_needs_pruning(BasicType bt, int vlen) {\n","filename":"src\/hotspot\/cpu\/riscv\/matcher_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-  static bool vector_indexes_needs_massaging(BasicType ety, int vlen) {\n+  static bool vector_indexes_needs_pruning(BasicType bt, int vlen) {\n","filename":"src\/hotspot\/cpu\/s390\/matcher_s390.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6446,2 +6446,2 @@\n-void C2_MacroAssembler::select_from_two_vector_evex(BasicType elem_bt, XMMRegister dst, XMMRegister src1,\n-                                                    XMMRegister src2, int vlen_enc) {\n+void C2_MacroAssembler::select_from_two_vectors_evex(BasicType elem_bt, XMMRegister dst, XMMRegister src1,\n+                                                     XMMRegister src2, int vlen_enc) {\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -508,1 +508,1 @@\n-  void select_from_two_vector_evex(BasicType elem_bt, XMMRegister dst, XMMRegister src1, XMMRegister src2, int vlen_enc);\n+  void select_from_two_vectors_evex(BasicType elem_bt, XMMRegister dst, XMMRegister src1, XMMRegister src2, int vlen_enc);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -215,2 +215,2 @@\n-  static bool vector_indexes_needs_massaging(BasicType ety, int vlen) {\n-     switch(ety) {\n+  static bool vector_indexes_needs_pruning(BasicType bt, int vlen) {\n+     switch(bt) {\n","filename":"src\/hotspot\/cpu\/x86\/matcher_x86.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -10490,1 +10490,1 @@\n-instruct selectFromTwoVec_evex(vec dst, vec src1, vec src2)\n+instruct vector_selectfrom_twovectors_reg_evex(vec index, vec src1, vec src2)\n@@ -10492,3 +10492,3 @@\n-  match(Set dst (SelectFromTwoVector (Binary dst src1) src2));\n-  effect(TEMP dst);\n-  format %{ \"select_from_two_vector $dst, $src1, $src2 \\t!\" %}\n+  match(Set index (SelectFromTwoVector (Binary index src1) src2));\n+  effect(TEMP index);\n+  format %{ \"select_from_two_vector $index, $src1, $src2 \\t!\" %}\n@@ -10498,1 +10498,1 @@\n-    __ select_from_two_vector_evex(bt, $dst$$XMMRegister, $src1$$XMMRegister, $src2$$XMMRegister, vlen_enc);\n+    __ select_from_two_vectors_evex(bt, $index$$XMMRegister, $src1$$XMMRegister, $src2$$XMMRegister, vlen_enc);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2090,0 +2090,1 @@\n+  \/\/ Keep the node if it is supported, else lower it to other nodes.\n@@ -2094,2 +2095,2 @@\n-  Node* src1  = in(2);\n-  Node* src2  = in(3);\n+  Node* src1 = in(2);\n+  Node* src2 = in(3);\n@@ -2100,2 +2101,2 @@\n-  \/\/         (VectorRearrange SRC1, INDEX)\n-  \/\/         (VectorRearrange SRC2, NORM_INDEX)\n+  \/\/         (VectorRearrange SRC1 INDEX)\n+  \/\/         (VectorRearrange SRC2 NORM_INDEX)\n@@ -2103,0 +2104,3 @@\n+  \/\/\n+  \/\/ MASK = INDEX < num_elem\n+  \/\/\n@@ -2105,0 +2109,3 @@\n+  \/\/ Here, MASK lanes corresponding to INDEX values greater than or equal to\n+  \/\/ vector length (VELEN) are set and are used to select the elements from\n+  \/\/ second source (SRC2) vector.\n@@ -2106,20 +2113,11 @@\n-  auto lane_count_type = [&]() {\n-    switch(elem_bt) {\n-      case T_BYTE:\n-      case T_SHORT:\n-      case T_INT:\n-      case T_FLOAT:\n-        return static_cast<const Type*>(TypeInt::make(num_elem));\n-      case T_DOUBLE:\n-      case T_LONG:\n-        return static_cast<const Type*>(TypeLong::make(num_elem));\n-      default:\n-        fatal(\"Unsupported vectortype (%s)\", type2name(elem_bt));\n-        return static_cast<const Type*>(nullptr);\n-    }\n-  };\n-\n-  auto make_integral_index_vec = [&](Node* index_vec) {\n-    switch(elem_bt) {\n-      case T_FLOAT:\n-        return phase->transform(new VectorCastF2XNode(index_vec, TypeVect::make(T_INT, num_elem)));\n+  const Type* lane_count_type = nullptr;\n+  switch(elem_bt) {\n+    case T_BYTE:\n+    case T_SHORT:\n+    case T_INT:\n+    case T_FLOAT:\n+      lane_count_type = TypeInt::make(num_elem);\n+      break;\n+    case T_DOUBLE:\n+    case T_LONG:\n+      lane_count_type = TypeLong::make(num_elem);\n@@ -2127,2 +2125,2 @@\n-      case T_DOUBLE:\n-        return phase->transform(new VectorCastD2XNode(index_vec, TypeVect::make(T_LONG, num_elem)));\n+    default:\n+      fatal(\"Unsupported vectortype (%s)\", type2name(elem_bt));\n@@ -2130,4 +2128,1 @@\n-      default:\n-        return index_vec;\n-    }\n-  };\n+  }\n@@ -2135,7 +2130,9 @@\n-  auto get_integal_type = [&](BasicType elem_bt) {\n-    switch(elem_bt) {\n-      case T_FLOAT:  return T_INT;\n-      case T_DOUBLE: return T_LONG;\n-      default: return elem_bt;\n-    }\n-  };\n+  BasicType integral_elem_bt = elem_bt;\n+  Node* integral_index_vec = index_vec;\n+  if (elem_bt == T_FLOAT) {\n+      integral_elem_bt = T_INT;\n+      integral_index_vec = phase->transform(new VectorCastF2XNode(index_vec, TypeVect::make(integral_elem_bt, num_elem)));\n+  } else if (elem_bt == T_DOUBLE) {\n+      integral_elem_bt = T_LONG;\n+      integral_index_vec = phase->transform(new VectorCastD2XNode(index_vec, TypeVect::make(integral_elem_bt, num_elem)));\n+  }\n@@ -2143,1 +2140,0 @@\n-  BasicType integral_elem_bt = get_integal_type(elem_bt);\n@@ -2149,1 +2145,1 @@\n-  Node* lane_cnt = phase->makecon(lane_count_type());\n+  Node* lane_cnt = phase->makecon(lane_count_type);\n@@ -2151,1 +2147,0 @@\n-  Node* integral_index_vec = make_integral_index_vec(index_vec);\n@@ -2174,8 +2169,9 @@\n-      Matcher::vector_indexes_needs_massaging(elem_bt, num_elem)) {\n-    auto get_integal_type = [&](BasicType elem_bt) {\n-      switch(elem_bt) {\n-        case T_FLOAT:  return T_INT;\n-        case T_DOUBLE: return T_LONG;\n-        default: return elem_bt;\n-      }\n-    };\n+      Matcher::vector_indexes_needs_pruning(elem_bt, num_elem)) {\n+\n+    BasicType integral_elem_bt = elem_bt;\n+    if (elem_bt == T_FLOAT) {\n+      integral_elem_bt = T_INT;\n+    } else if (elem_bt == T_DOUBLE) {\n+      integral_elem_bt = T_LONG;\n+    }\n+\n@@ -2183,1 +2179,1 @@\n-    \/\/ may need to message the indexes to match the users intent.\n+    \/\/ may need to massage the indexes to match the users intent.\n@@ -2188,1 +2184,1 @@\n-    const TypeVect* newvt = TypeVect::make(get_integal_type(elem_bt), num_elem);\n+    const TypeVect* newvt = TypeVect::make(integral_elem_bt, num_elem);\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":46,"deletions":50,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -1272,1 +1272,0 @@\n-\n@@ -1618,0 +1617,2 @@\n+\/\/ Selects elements from second and third vector based on the indices held in\n+\/\/ first vector two input vectors based on the indexes held in first vector.\n@@ -1620,2 +1621,2 @@\n-  SelectFromTwoVectorNode(Node* in1, Node* in2, Node* in3, const TypeVect* vt)\n-  : VectorNode(in1, in2, in3, vt) {}\n+  SelectFromTwoVectorNode(Node* index, Node* src1, Node* src2, const TypeVect* vt)\n+  : VectorNode(index, src1, src2, vt) {}\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -539,1 +539,1 @@\n-    static ByteVector selectFromHelper(Vector<Byte> v1, Vector<Byte> v2, Vector<Byte> v3) {\n+    static ByteVector selectFromTwoVectorHelper(Vector<Byte> v1, Vector<Byte> v2, Vector<Byte> v3) {\n@@ -2595,2 +2595,2 @@\n-        int twovectorlen = length() * 2;\n-        ByteVector wrapped_indexes = this.lanewise(VectorOperators.AND, twovectorlen - 1);\n+        int twoVectorLen = length() * 2;\n+        ByteVector wrapped_indexes = this.lanewise(VectorOperators.AND, twoVectorLen - 1);\n@@ -2598,1 +2598,1 @@\n-            (vec1, vec2, vec3) -> selectFromHelper(vec1, vec2, vec3)\n+            (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -528,1 +528,1 @@\n-    static DoubleVector selectFromHelper(Vector<Double> v1, Vector<Double> v2, Vector<Double> v3) {\n+    static DoubleVector selectFromTwoVectorHelper(Vector<Double> v1, Vector<Double> v2, Vector<Double> v3) {\n@@ -2437,1 +2437,1 @@\n-        int twovectorlen = length() * 2;\n+        int twoVectorLen = length() * 2;\n@@ -2439,1 +2439,1 @@\n-                                               .lanewise(VectorOperators.AND, twovectorlen - 1)\n+                                               .lanewise(VectorOperators.AND, twoVectorLen - 1)\n@@ -2444,1 +2444,1 @@\n-            (vec1, vec2, vec3) -> selectFromHelper(vec1, vec2, vec3)\n+            (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -528,1 +528,1 @@\n-    static FloatVector selectFromHelper(Vector<Float> v1, Vector<Float> v2, Vector<Float> v3) {\n+    static FloatVector selectFromTwoVectorHelper(Vector<Float> v1, Vector<Float> v2, Vector<Float> v3) {\n@@ -2449,1 +2449,1 @@\n-        int twovectorlen = length() * 2;\n+        int twoVectorLen = length() * 2;\n@@ -2451,1 +2451,1 @@\n-                                               .lanewise(VectorOperators.AND, twovectorlen - 1)\n+                                               .lanewise(VectorOperators.AND, twoVectorLen - 1)\n@@ -2456,1 +2456,1 @@\n-            (vec1, vec2, vec3) -> selectFromHelper(vec1, vec2, vec3)\n+            (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -539,1 +539,1 @@\n-    static IntVector selectFromHelper(Vector<Integer> v1, Vector<Integer> v2, Vector<Integer> v3) {\n+    static IntVector selectFromTwoVectorHelper(Vector<Integer> v1, Vector<Integer> v2, Vector<Integer> v3) {\n@@ -2580,2 +2580,2 @@\n-        int twovectorlen = length() * 2;\n-        IntVector wrapped_indexes = this.lanewise(VectorOperators.AND, twovectorlen - 1);\n+        int twoVectorLen = length() * 2;\n+        IntVector wrapped_indexes = this.lanewise(VectorOperators.AND, twoVectorLen - 1);\n@@ -2583,1 +2583,1 @@\n-            (vec1, vec2, vec3) -> selectFromHelper(vec1, vec2, vec3)\n+            (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -539,1 +539,1 @@\n-    static LongVector selectFromHelper(Vector<Long> v1, Vector<Long> v2, Vector<Long> v3) {\n+    static LongVector selectFromTwoVectorHelper(Vector<Long> v1, Vector<Long> v2, Vector<Long> v3) {\n@@ -2446,2 +2446,2 @@\n-        int twovectorlen = length() * 2;\n-        LongVector wrapped_indexes = this.lanewise(VectorOperators.AND, twovectorlen - 1);\n+        int twoVectorLen = length() * 2;\n+        LongVector wrapped_indexes = this.lanewise(VectorOperators.AND, twoVectorLen - 1);\n@@ -2449,1 +2449,1 @@\n-            (vec1, vec2, vec3) -> selectFromHelper(vec1, vec2, vec3)\n+            (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -539,1 +539,1 @@\n-    static ShortVector selectFromHelper(Vector<Short> v1, Vector<Short> v2, Vector<Short> v3) {\n+    static ShortVector selectFromTwoVectorHelper(Vector<Short> v1, Vector<Short> v2, Vector<Short> v3) {\n@@ -2596,2 +2596,2 @@\n-        int twovectorlen = length() * 2;\n-        ShortVector wrapped_indexes = this.lanewise(VectorOperators.AND, twovectorlen - 1);\n+        int twoVectorLen = length() * 2;\n+        ShortVector wrapped_indexes = this.lanewise(VectorOperators.AND, twoVectorLen - 1);\n@@ -2599,1 +2599,1 @@\n-            (vec1, vec2, vec3) -> selectFromHelper(vec1, vec2, vec3)\n+            (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -553,1 +553,1 @@\n-    static $abstractvectortype$ selectFromHelper(Vector<$Boxtype$> v1, Vector<$Boxtype$> v2, Vector<$Boxtype$> v3) {\n+    static $abstractvectortype$ selectFromTwoVectorHelper(Vector<$Boxtype$> v1, Vector<$Boxtype$> v2, Vector<$Boxtype$> v3) {\n@@ -556,3 +556,3 @@\n-        $type$[] vpayload1 = (($abstractvectortype$)v1).vec();\n-        $type$[] vpayload2 = (($abstractvectortype$)v2).vec();\n-        $type$[] vpayload3 = (($abstractvectortype$)v3).vec();\n+        $type$[] vecPayload1 = (($abstractvectortype$)v1).vec();\n+        $type$[] vecPayload2 = (($abstractvectortype$)v2).vec();\n+        $type$[] vecPayload3 = (($abstractvectortype$)v3).vec();\n@@ -560,2 +560,2 @@\n-            int index = ((int)vpayload1[i]);\n-            res[i] = index >= vlen ? vpayload3[index & (vlen - 1)] : vpayload2[index];\n+            int index = ((int)vecPayload1[i]);\n+            res[i] = index >= vlen ? vecPayload3[index & (vlen - 1)] : vecPayload2[index];\n@@ -2972,1 +2972,1 @@\n-        int twovectorlen = length() * 2;\n+        int twoVectorLen = length() * 2;\n@@ -2976,1 +2976,1 @@\n-                                               .lanewise(VectorOperators.AND, twovectorlen - 1)\n+                                               .lanewise(VectorOperators.AND, twoVectorLen - 1)\n@@ -2982,1 +2982,1 @@\n-                                               .lanewise(VectorOperators.AND, twovectorlen - 1)\n+                                               .lanewise(VectorOperators.AND, twoVectorLen - 1)\n@@ -2988,1 +2988,1 @@\n-        $abstractvectortype$ wrapped_indexes = this.lanewise(VectorOperators.AND, twovectorlen - 1);\n+        $abstractvectortype$ wrapped_indexes = this.lanewise(VectorOperators.AND, twoVectorLen - 1);\n@@ -2991,1 +2991,1 @@\n-            (vec1, vec2, vec3) -> selectFromHelper(vec1, vec2, vec3)\n+            (vec1, vec2, vec3) -> selectFromTwoVectorHelper(vec1, vec2, vec3)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"}]}