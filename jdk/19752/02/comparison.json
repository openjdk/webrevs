{"files":[{"patch":"@@ -58,0 +58,1 @@\n+import java.security.Permissions;\n@@ -59,0 +60,1 @@\n+import java.security.ProtectionDomain;\n@@ -3218,4 +3220,0 @@\n-\n-    \/** protection domain returned when the internal domain is null *\/\n-    private static java.security.ProtectionDomain allPermDomain;\n-\n@@ -3242,1 +3240,1 @@\n-    public java.security.ProtectionDomain getProtectionDomain() {\n+    public ProtectionDomain getProtectionDomain() {\n@@ -3251,0 +3249,10 @@\n+    \/** Holder for the protection domain returned when the internal domain is null *\/\n+    private static class Holder {\n+        private static final ProtectionDomain allPermDomain;\n+        static {\n+            Permissions perms = new Permissions();\n+            perms.add(SecurityConstants.ALL_PERMISSION);\n+            allPermDomain = new ProtectionDomain(null, perms);\n+        }\n+    }\n+\n@@ -3252,2 +3260,2 @@\n-    java.security.ProtectionDomain protectionDomain() {\n-        java.security.ProtectionDomain pd = getProtectionDomain0();\n+    ProtectionDomain protectionDomain() {\n+        ProtectionDomain pd = getProtectionDomain0();\n@@ -3255,8 +3263,3 @@\n-            if (allPermDomain == null) {\n-                java.security.Permissions perms =\n-                    new java.security.Permissions();\n-                perms.add(SecurityConstants.ALL_PERMISSION);\n-                allPermDomain =\n-                    new java.security.ProtectionDomain(null, perms);\n-            }\n-            pd = allPermDomain;\n+            return Holder.allPermDomain;\n+        } else {\n+            return pd;\n@@ -3264,1 +3267,0 @@\n-        return pd;\n@@ -3270,1 +3272,1 @@\n-    private native java.security.ProtectionDomain getProtectionDomain0();\n+    private native ProtectionDomain getProtectionDomain0();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":19,"deletions":17,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8334394\n+ * @summary ensure there is no race condition in Class::protectionDomain\n+ * @run main\/othervm ProtectionDomainRace\n+ *\/\n+import javax.security.auth.Subject;\n+import java.security.PrivilegedAction;\n+\n+\/**\n+ * Without the code fix, this test would fail with\n+ * java.lang.AssertionError: sun.security.util.ResourcesMgr (PD)\n+ *         at java.base\/java.lang.invoke.MethodHandleImpl$BindCaller.checkInjectedInvoker(MethodHandleImpl.java:1209)\n+ *         at java.base\/java.lang.invoke.MethodHandleImpl$BindCaller.makeInjectedInvoker(MethodHandleImpl.java:1110)\n+ *         at java.base\/java.lang.invoke.MethodHandleImpl$BindCaller$1.computeValue(MethodHandleImpl.java:1117)\n+ *         at java.base\/java.lang.invoke.MethodHandleImpl$BindCaller$1.computeValue(MethodHandleImpl.java:1114)\n+ *         at java.base\/java.lang.ClassValue.getFromHashMap(ClassValue.java:229)\n+ *         at java.base\/java.lang.ClassValue.getFromBackup(ClassValue.java:211)\n+ *         at java.base\/java.lang.ClassValue.get(ClassValue.java:117)\n+ *         at java.base\/java.lang.invoke.MethodHandleImpl$BindCaller.bindCallerWithInjectedInvoker(MethodHandleImpl.java:1089)\n+ *         at java.base\/java.lang.invoke.MethodHandleImpl$BindCaller.bindCaller(MethodHandleImpl.java:1077)\n+ *         at java.base\/java.lang.invoke.MethodHandleImpl.bindCaller(MethodHandleImpl.java:1032)\n+ *         at java.base\/java.lang.invoke.MethodHandles$Lookup.maybeBindCaller(MethodHandles.java:4149)\n+ *         at java.base\/java.lang.invoke.MethodHandles$Lookup.getDirectMethodCommon(MethodHandles.java:4133)\n+ *         at java.base\/java.lang.invoke.MethodHandles$Lookup.getDirectMethodNoSecurityManager(MethodHandles.java:4077)\n+ *         at java.base\/java.lang.invoke.MethodHandles$Lookup.getDirectMethodForConstant(MethodHandles.java:4326)\n+ *         at java.base\/java.lang.invoke.MethodHandles$Lookup.linkMethodHandleConstant(MethodHandles.java:4274)\n+ *         at java.base\/java.lang.invoke.MethodHandleNatives.linkMethodHandleConstant(MethodHandleNatives.java:628)\n+ *         at java.base\/sun.security.util.ResourcesMgr.getBundle(ResourcesMgr.java:54)\n+ *         at java.base\/sun.security.util.ResourcesMgr.getString(ResourcesMgr.java:40)\n+ *         at java.base\/javax.security.auth.Subject.doAs(Subject.java:517)\n+ *         ...\n+ * as the Class::protectionDomain might assign different objects to the (original) allPermDomain field.\n+ *\/\n+public class ProtectionDomainRace {\n+    private static volatile Throwable failed = null;\n+    public static void main(String[] args) throws Throwable {\n+        PrivilegedAction<?> pa = () -> null;\n+        Thread[] threads = new Thread[100];\n+        for (int i = 0; i < 100; i++) {\n+            threads[i] = new Thread(() -> {\n+                try {\n+                    Subject.doAs(null, pa);\n+                } catch (Throwable t) {\n+                    failed = t;\n+                }\n+            });\n+            threads[i].start();\n+        }\n+        for (int i = 0; i < 100; i++) {\n+            threads[i].join();\n+        }\n+        if (failed != null) {\n+            throw failed;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Class\/ProtectionDomainRace.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"}]}