{"files":[{"patch":"@@ -920,2 +920,4 @@\n-     * Currently, arrays are initialized to be just large enough to\n-     * avoid resizing in most tree-structured tasks. (Maintenance note:\n+     * Currently, arrays for workers are initialized to be just large\n+     * enough to avoid resizing in most tree-structured tasks, but\n+     * larger for external queues where both false-sharing problems\n+     * and the need for resizing are more common. (Maintenance note:\n@@ -1010,0 +1012,6 @@\n+    \/**\n+     * Initial capacity of work-stealing queue array for external queues.\n+     * Must be a power of two, at least 2. See above.\n+     *\/\n+    static final int INITIAL_EXTERNAL_QUEUE_CAPACITY = 1 << 9;\n+\n@@ -1185,1 +1193,3 @@\n-            array = new ForkJoinTask<?>[INITIAL_QUEUE_CAPACITY];\n+            array = new ForkJoinTask<?>[owner == null ?\n+                                        INITIAL_EXTERNAL_QUEUE_CAPACITY :\n+                                        INITIAL_QUEUE_CAPACITY];\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -238,1 +238,2 @@\n-     * Peforms any associated cleanup on resetThreadLocals\n+     * Performs any further cleanup after ThreadLocals are cleared in\n+     * method resetThreadLocals\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinWorkerThread.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}