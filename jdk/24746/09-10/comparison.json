{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.util.LinkedHashMap;\n@@ -35,1 +36,1 @@\n-import java.util.concurrent.ConcurrentHashMap;\n+import java.util.Set;\n@@ -125,1 +126,1 @@\n-    private static final Map<String, LintCategory> map = new ConcurrentHashMap<>(20);\n+    private static final Map<String, LintCategory> map = new LinkedHashMap<>(40);\n@@ -423,1 +424,1 @@\n-            this.optionList.forEach(string -> map.put(string, this));\n+            this.optionList.forEach(ident -> map.put(ident, this));\n@@ -436,0 +437,7 @@\n+        \/**\n+         * Get all lint category option strings and aliases.\n+         *\/\n+        public static Set<String> options() {\n+            return Collections.unmodifiableSet(map.keySet());\n+        }\n+\n@@ -509,14 +517,0 @@\n-    \/**\n-     * Retrieve the recognized lint categories suppressed by the given @SuppressWarnings annotation.\n-     *\n-     * @param annotation @SuppressWarnings annotation, or null\n-     * @return set of lint categories, possibly empty but never null\n-     *\/\n-    private EnumSet<LintCategory> suppressionsFrom(JCAnnotation annotation) {\n-        initializeSymbolsIfNeeded();\n-        if (annotation == null)\n-            return LintCategory.newEmptySet();\n-        Assert.check(annotation.attribute.type.tsym == syms.suppressWarningsType.tsym);\n-        return suppressionsFrom(Stream.of(annotation).map(anno -> anno.attribute));\n-    }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":11,"deletions":17,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-import java.util.List;\n@@ -498,15 +497,4 @@\n-            for (LintCategory lc : LintCategory.values()) {\n-                log.printRawLines(WriterKind.STDOUT,\n-                                  String.format(LINT_KEY_FORMAT,\n-                                                lc.option,\n-                                                log.localize(PrefixKind.JAVAC,\n-                                                             \"opt.Xlint.desc.\" + lc.option)));\n-                int numOptions = lc.optionList.size();\n-                if (numOptions > 1) {\n-                    String aliases = lc.optionList.subList(1, numOptions).stream().collect(Collectors.joining(\", \"));\n-                    log.printRawLines(WriterKind.STDOUT,\n-                                      String.format(LINT_KEY_FORMAT,\n-                                                    \"\",\n-                                                    (numOptions > 2 ? \"Aliases\" : \"Alias\") + \": \" + aliases));\n-                }\n-            }\n+            LintCategory.options().forEach(ident -> log.printRawLines(WriterKind.STDOUT,\n+                              String.format(LINT_KEY_FORMAT,\n+                                            ident,\n+                                            log.localize(PrefixKind.JAVAC, \"opt.Xlint.desc.\" + ident))));\n@@ -1399,2 +1387,1 @@\n-        Stream.of(Lint.LintCategory.values())\n-          .flatMap(lc -> lc.optionList.stream())\n+        Lint.LintCategory.options().stream()\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/Option.java","additions":5,"deletions":18,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -294,0 +294,6 @@\n+javac.opt.Xlint.desc.synchronization=\\\n+    Warn about synchronization attempts on instances of value-based classes.\\n\\\n+\\                         This key is a deprecated alias for ''identity'', which has the same uses and\\n\\\n+\\                         effects. Users are encouraged to use the ''identity'' category for all future\\n\\\n+\\                         and existing uses of ''synchronization''.\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/javac.properties","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -190,4 +190,5 @@\n- * <tr><th scope=\"row\">{@code synchronization}      <td>synchronization attempts on instances of value-based classes,\n- *                                                      superseded by the {@code identity} warning category which has the same\n- *                                                      uses and effects. Users are encouraged to use the {@code identity}\n- *                                                      category for all future an existing uses of {@code synchronization}\n+ * <tr><th scope=\"row\">{@code synchronization}      <td>synchronization attempts on instances of value-based classes;\n+ *                                                      this key is a deprecated alias for {@code identity}, which has\n+ *                                                      the same uses and effects. Users are encouraged to use the\n+ *                                                      {@code identity} category for all future and existing uses of\n+ *                                                      {@code synchronization}\n","filename":"src\/jdk.compiler\/share\/classes\/module-info.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -652,1 +652,1 @@\n-        of value-based classes. Superseded by the `identity` warning category\n+        of value-based classes. This key is a deprecated alias for `identity`,\n@@ -654,1 +654,1 @@\n-        `identity` category for all future an existing uses of `synchronization`.\n+        `identity` category for all future and existing uses of `synchronization`.\n","filename":"src\/jdk.compiler\/share\/man\/javac.md","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -96,1 +96,0 @@\n-        ignore(\"com\/sun\/tools\/javac\/code\/Lint$LintCategory\", \"alias\");\n","filename":"test\/langtools\/tools\/javac\/T8003967\/DetectMutableStaticFields.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.util.stream.Stream;\n@@ -178,8 +179,1 @@\n-                boolean found = false;\n-\n-                for (LintCategory lc : LintCategory.values()) {\n-                    if (option.equals(lc.option))\n-                        found = true;\n-                }\n-\n-                if (found)\n+                if (LintCategory.options().contains(option))\n","filename":"test\/langtools\/tools\/javac\/diags\/CheckResourceKeys.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"}]}