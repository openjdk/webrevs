{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import java.util.ArrayList;\n@@ -29,0 +30,1 @@\n+import java.util.Collections;\n@@ -30,0 +32,1 @@\n+import java.util.List;\n@@ -152,1 +155,1 @@\n-        if (options.isSet(Option.XLINT) || options.isSet(Option.XLINT_CUSTOM, \"all\")) {\n+        if (options.isSet(Option.XLINT) || options.isSet(Option.XLINT_CUSTOM, Option.LINT_CUSTOM_ALL)) {\n@@ -155,1 +158,1 @@\n-        } else if (options.isSet(Option.XLINT_CUSTOM, \"none\")) {\n+        } else if (options.isSet(Option.XLINT_CUSTOM, Option.LINT_CUSTOM_NONE)) {\n@@ -182,2 +185,1 @@\n-            if (options.isSet(Option.XLINT_CUSTOM, lc.option) ||\n-                    (lc.alias != null && options.isSet(Option.XLINT_CUSTOM, lc.alias))) {\n+            if (options.isExplicitlyEnabled(Option.XLINT, lc)) {\n@@ -185,2 +187,1 @@\n-            } else if (options.isSet(Option.XLINT_CUSTOM, \"-\" + lc.option) ||\n-                    (lc.alias != null && options.isSet(Option.XLINT_CUSTOM, \"-\" + lc.alias))) {\n+            } else if (options.isExplicitlyDisabled(Option.XLINT, lc)) {\n@@ -269,1 +270,1 @@\n-        IDENTITY(\"identity\", \"synchronization\"),\n+        IDENTITY(\"identity\", true, \"synchronization\"),\n@@ -415,9 +416,1 @@\n-        LintCategory(String option, boolean annotationSuppression) {\n-            this(option, annotationSuppression, null);\n-        }\n-\n-        LintCategory(String option, String alias) {\n-            this(option, true, alias);\n-        }\n-\n-        LintCategory(String option, boolean annotationSuppression, String alias) {\n+        LintCategory(String option, boolean annotationSuppression, String... aliases) {\n@@ -426,6 +419,5 @@\n-            this.alias = alias;\n-            map.put(option, this);\n-            \/\/ we need to do this as forward references are not allowed\n-            if (alias != null) {\n-                map.put(alias, this);\n-            }\n+            ArrayList<String> optionList = new ArrayList<>(1 + aliases.length);\n+            optionList.add(option);\n+            Stream.of(aliases).forEach(optionList::add);\n+            this.optionList = Collections.unmodifiableList(optionList);\n+            this.optionList.forEach(string -> map.put(string, this));\n@@ -448,1 +440,1 @@\n-        \/** Get the string representing this category in @SuppressAnnotations and -Xlint options. *\/\n+        \/** Get the \"canonical\" string representing this category in @SuppressAnnotations and -Xlint options. *\/\n@@ -451,0 +443,3 @@\n+        \/** Get a list containing \"option\" followed by zero or more aliases. *\/\n+        public final List<String> optionList;\n+\n@@ -453,2 +448,0 @@\n-\n-        public String alias;\n@@ -516,0 +509,14 @@\n+    \/**\n+     * Retrieve the recognized lint categories suppressed by the given @SuppressWarnings annotation.\n+     *\n+     * @param annotation @SuppressWarnings annotation, or null\n+     * @return set of lint categories, possibly empty but never null\n+     *\/\n+    private EnumSet<LintCategory> suppressionsFrom(JCAnnotation annotation) {\n+        initializeSymbolsIfNeeded();\n+        if (annotation == null)\n+            return LintCategory.newEmptySet();\n+        Assert.check(annotation.attribute.type.tsym == syms.suppressWarningsType.tsym);\n+        return suppressionsFrom(Stream.of(annotation).map(anno -> anno.attribute));\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":32,"deletions":25,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -208,1 +208,1 @@\n-        lintOptions = options.isUnset(Option.XLINT_CUSTOM, \"-\" + LintCategory.OPTIONS.option);\n+        lintOptions = !options.isExplicitlyDisabled(Option.XLINT, LintCategory.OPTIONS);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Modules.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -506,2 +506,1 @@\n-                    boolean lintPaths = options.isUnset(Option.XLINT_CUSTOM,\n-                            \"-\" + LintCategory.PATH.option);\n+                    boolean lintPaths = !options.isExplicitlyDisabled(Option.XLINT, LintCategory.PATH);\n@@ -580,1 +579,1 @@\n-        boolean lintOptions = options.isUnset(Option.XLINT_CUSTOM, \"-\" + LintCategory.OPTIONS.option);\n+        boolean lintOptions = !options.isExplicitlyDisabled(Option.XLINT, LintCategory.OPTIONS);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/Arguments.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.util.List;\n@@ -49,0 +50,1 @@\n+import java.util.stream.Stream;\n@@ -494,1 +496,1 @@\n-                                            \"all\",\n+                                            LINT_CUSTOM_ALL,\n@@ -502,1 +504,3 @@\n-                if (lc.alias != null) {\n+                int numOptions = lc.optionList.size();\n+                if (numOptions > 1) {\n+                    String aliases = lc.optionList.subList(1, numOptions).stream().collect(Collectors.joining(\", \"));\n@@ -504,4 +508,3 @@\n-                            String.format(LINT_KEY_FORMAT,\n-                                    lc.alias,\n-                                    log.localize(PrefixKind.JAVAC,\n-                                            \"opt.Xlint.desc.\" + lc.alias)));\n+                                      String.format(LINT_KEY_FORMAT,\n+                                                    \"\",\n+                                                    (numOptions > 2 ? \"Aliases\" : \"Alias\") + \": \" + aliases));\n@@ -512,1 +515,1 @@\n-                                            \"none\",\n+                                            LINT_CUSTOM_NONE,\n@@ -845,0 +848,10 @@\n+    \/**\n+     * Special lint category key meaning \"all lint categories\".\n+     *\/\n+    public static final String LINT_CUSTOM_ALL = \"all\";\n+\n+    \/**\n+     * Special lint category key meaning \"no lint categories\".\n+     *\/\n+    public static final String LINT_CUSTOM_NONE = \"none\";\n+\n@@ -1091,0 +1104,11 @@\n+    \/**\n+     * If this option is named {@code FOO}, obtain the option named {@code FOO_CUSTOM}.\n+     *\n+     * @param option regular option\n+     * @return corresponding custom option\n+     * @throws IllegalArgumentException if no such option exists\n+     *\/\n+    public Option getCustom() {\n+        return Option.valueOf(name() + \"_CUSTOM\");\n+    }\n+\n@@ -1374,10 +1398,6 @@\n-        choices.add(\"all\");\n-        for (Lint.LintCategory c : Lint.LintCategory.values()) {\n-            choices.add(c.option);\n-            choices.add(\"-\" + c.option);\n-            if (c.alias != null) {\n-                choices.add(c.alias);\n-                choices.add(\"-\" + c.alias);\n-            }\n-        }\n-        choices.add(\"none\");\n+        choices.add(LINT_CUSTOM_ALL);\n+        Stream.of(Lint.LintCategory.values())\n+          .flatMap(lc -> lc.optionList.stream())\n+          .flatMap(ident -> Stream.of(ident, \"-\" + ident))\n+          .forEach(choices::add);\n+        choices.add(LINT_CUSTOM_NONE);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/Option.java","additions":37,"deletions":17,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -294,6 +294,0 @@\n-javac.opt.Xlint.desc.synchronization=\\\n-    Warn about synchronization attempts on instances of value-based classes.\\n\\\n-    Superseded by the `identity` warning category which has the same uses and\\n\\\n-    effects. Users are encouraged to use the `identity` category for all future\\n\\\n-    an existing uses of `synchronization`.\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/javac.properties","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import com.sun.tools.javac.code.Lint.LintCategory;\n@@ -173,0 +174,52 @@\n+    \/**\n+     * Check whether the given lint category is explicitly enabled or disabled.\n+     *\n+     * <p>\n+     * If the category is neither enabled nor disabled, return the given default value.\n+     *\n+     * @param option the plain (non-custom) option\n+     * @param lc the {@link LintCategory} in question\n+     * @param defaultValue presumed default value\n+     * @return true if {@code lc} would be included\n+     *\/\n+    public boolean isSet(Option option, LintCategory lc, boolean defaultValue) {\n+        Option customOption = option.getCustom();\n+        if (lc.optionList.stream().anyMatch(alias -> isSet(customOption, alias))) {\n+            return true;\n+        }\n+        if (lc.optionList.stream().anyMatch(alias -> isSet(customOption, \"-\" + alias))) {\n+            return false;\n+        }\n+        if (isSet(option) || isSet(customOption, Option.LINT_CUSTOM_ALL)) {\n+            return true;\n+        }\n+        if (isSet(customOption, Option.LINT_CUSTOM_NONE)) {\n+            return false;\n+        }\n+        return defaultValue;\n+    }\n+\n+    \/**\n+     * Determine if a specific {@link LintCategory} was explicitly enabled via a custom option flag\n+     * of the form {@code -Flag:all} or {@code -Flag:key}.\n+     *\n+     * @param option the option\n+     * @param lc the {@link LintCategory} in question\n+     * @return true if {@code lc} has been explicitly enabled\n+     *\/\n+    public boolean isExplicitlyEnabled(Option option, LintCategory lc) {\n+        return isSet(option, lc, false);\n+    }\n+\n+    \/**\n+     * Determine if a specific {@link LintCategory} was explicitly disabled via a custom option flag\n+     * of the form {@code -Flag:none} or {@code -Flag:-key}.\n+     *\n+     * @param option the option\n+     * @param lc the {@link LintCategory} in question\n+     * @return true if {@code lc} has been explicitly disabled\n+     *\/\n+    public boolean isExplicitlyDisabled(Option option, LintCategory lc) {\n+        return !isSet(option, lc, true);\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Options.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-                    if (option.equals(lc.option) || (lc.alias != null && option.equals(lc.alias)))\n+                    if (option.equals(lc.option))\n","filename":"test\/langtools\/tools\/javac\/diags\/CheckResourceKeys.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}