{"files":[{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\n+#include \"cds\/aotOopChecker.hpp\"\n+#include \"cds\/heapShared.hpp\"\n+#include \"cds\/metaspaceShared.hpp\"\n+#include \"classfile\/symbolTable.hpp\"\n+#include \"classfile\/javaClasses.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n+#include \"oops\/instanceKlass.inline.hpp\"\n+#include \"runtime\/fieldDescriptor.inline.hpp\"\n+#include \"utilities\/debug.hpp\"\n+\n+oop AOTOopChecker::get_oop_field(oop obj, const char* name, const char* sig) {\n+  Symbol* name_sym = SymbolTable::probe(name, checked_cast<int>(strlen(name)));\n+  assert(name_sym != nullptr, \"Symbol must have been resolved for an existing field of this obj\");\n+  Symbol* sig_sym = SymbolTable::probe(sig, checked_cast<int>(strlen(sig)));\n+  assert(sig_sym != nullptr, \"Symbol must have been resolved for an existing field of this obj\");\n+\n+  fieldDescriptor fd;\n+  Klass* k = InstanceKlass::cast(obj->klass())->find_field(name_sym, sig_sym, &fd);\n+  assert(k != nullptr, \"field must exist\");\n+  precond(!fd.is_static());\n+  precond(fd.field_type() == T_OBJECT || fd.field_type() == T_ARRAY);\n+  return obj->obj_field(fd.offset());\n+}\n+\n+\/\/ Make sure we are not caching objects with assumptions that can be violated in\n+\/\/ the production run.\n+void AOTOopChecker::check(oop obj) {\n+  precond(vmClasses::URL_klass()->is_final());\n+\n+  if (obj->klass()->is_subclass_of(vmClasses::URL_klass())) {\n+    \/\/ URLs are referenced by the CodeSources\/ProtectDomains that are cached\n+    \/\/ for AOT-linked classes loaded by the platform\/app loaders.\n+    \/\/\n+    \/\/ Do not cache any URLs whose URLStreamHandler can be overridden by the application.\n+    \/\/ - \"jrt\" and \"file\" will always use the built-in URLStreamHandler. See\n+    \/\/   java.net.URL::isOverrideable().\n+    \/\/ -  When an AOT-linked class is loaded from a JAR file, its URL is something\n+    \/\/    like file:HelloWorl.jar, and does NOT use the \"jar\" protocol.\n+    oop protocol = get_oop_field(obj, \"protocol\", \"Ljava\/lang\/String;\");\n+    if (!java_lang_String::equals(protocol, \"jrt\", 3) &&\n+        !java_lang_String::equals(protocol, \"file\", 4)) {\n+      ResourceMark rm;\n+      log_error(aot)(\"Must cache only URLs with jrt\/file protocols but got: %s\",\n+                     java_lang_String::as_quoted_ascii(protocol));\n+      HeapShared::debug_trace();\n+      MetaspaceShared::unrecoverable_writing_error();\n+    }\n+  }\n+}\n","filename":"src\/hotspot\/share\/cds\/aotOopChecker.cpp","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_CDS_AOTOOPCHECKER_HPP\n+#define SHARE_CDS_AOTOOPCHECKER_HPP\n+\n+#include \"memory\/allStatic.hpp\"\n+#include \"oops\/oopsHierarchy.hpp\"\n+\n+class AOTOopChecker : AllStatic {\n+  static oop get_oop_field(oop obj, const char* name, const char* sig);\n+\n+public:\n+  \/\/ obj is an object that's about to be stored into the AOT cache. Check if it\n+  \/\/ can be safely cached.\n+  static void check(oop obj);\n+};\n+\n+#endif \/\/ SHARE_CDS_AOTOOPCHECKER_HPP\n","filename":"src\/hotspot\/share\/cds\/aotOopChecker.hpp","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"cds\/aotOopChecker.hpp\"\n@@ -303,0 +304,2 @@\n+    AOTOopChecker::check(obj); \/\/ Make sure contents of this oop are safe.\n+\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}