{"files":[{"patch":"@@ -134,1 +134,1 @@\n-      if ((opcode == Op_VectorCastD2X && bt == T_INT) ||\n+      if ((opcode == Op_VectorCastD2X && (bt == T_INT || bt == T_SHORT)) ||\n@@ -4703,1 +4703,1 @@\n-      \/\/ 4HF to 4F\n+      \/\/ 2HF to 2F, 4HF to 4F\n@@ -4719,1 +4719,1 @@\n-  format %{ \"vcvtFtoHF_neon $dst, $src\\t# 4F to 4HF\" %}\n+  format %{ \"vcvtFtoHF_neon $dst, $src\\t# 2F\/4F to 2HF\/4HF\" %}\n@@ -4721,1 +4721,1 @@\n-    \/\/ 4F to 4HF\n+    \/\/ 2F to 2HF, 4F to 4HF\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-      if ((opcode == Op_VectorCastD2X && bt == T_INT) ||\n+      if ((opcode == Op_VectorCastD2X && (bt == T_INT || bt == T_SHORT)) ||\n@@ -2955,1 +2955,1 @@\n-      \/\/ 4HF to 4F\n+      \/\/ 2HF to 2F, 4HF to 4F\n@@ -2971,1 +2971,1 @@\n-  format %{ \"vcvtFtoHF_neon $dst, $src\\t# 4F to 4HF\" %}\n+  format %{ \"vcvtFtoHF_neon $dst, $src\\t# 2F\/4F to 2HF\/4HF\" %}\n@@ -2973,1 +2973,1 @@\n-    \/\/ 4F to 4HF\n+    \/\/ 2F to 2HF, 4F to 4HF\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,0 +87,3 @@\n+    @IR(counts = {IRNode.VECTOR_CAST_F2HF, IRNode.VECTOR_SIZE_2, \"> 0\"},\n+        applyIfOr = {\"UseCompactObjectHeaders\", \"false\", \"AlignVector\", \"false\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n@@ -88,3 +91,3 @@\n-        for (int i = 0; i < finp.length; i+= 4) {\n-            sout[i+0] = Float.floatToFloat16(finp[i+0]);\n-            sout[i+1] = Float.floatToFloat16(finp[i+1]);\n+        for (int i = 0; i < finp.length; i += 4) {\n+            sout[i] = Float.floatToFloat16(finp[i]);\n+            sout[i + 1] = Float.floatToFloat16(finp[i + 1]);\n@@ -127,1 +130,1 @@\n-        for (int i = 0; i < ARRLEN; i++) {\n+        for (int i = 0; i < ARRLEN; i += 4) {\n@@ -129,0 +132,1 @@\n+            Asserts.assertEquals(Float.floatToFloat16(finp[i + 1]), sout[i + 1]);\n@@ -155,1 +159,13 @@\n-    @Run(test = {\"test_float16_float\", \"test_float16_float_strided\"}, mode = RunMode.STANDALONE)\n+    @Test\n+    @IR(counts = {IRNode.VECTOR_CAST_HF2F, IRNode.VECTOR_SIZE_2, \"> 0\"},\n+        applyIfOr = {\"UseCompactObjectHeaders\", \"false\", \"AlignVector\", \"false\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public void test_float16_float_short_vector(float[] fout, short[] sinp) {\n+        for (int i = 0; i < sinp.length; i += 4) {\n+            fout[i] = Float.float16ToFloat(sinp[i]);\n+            fout[i + 1] = Float.float16ToFloat(sinp[i + 1]);\n+        }\n+    }\n+\n+    @Run(test = {\"test_float16_float\", \"test_float16_float_strided\",\n+                 \"test_float16_float_short_vector\"}, mode = RunMode.STANDALONE)\n@@ -181,0 +197,10 @@\n+\n+        for (int i = 0; i < ITERS; i++) {\n+            test_float16_float_short_vector(fout, sinp);\n+        }\n+\n+        \/\/ Verifying the result\n+        for (int i = 0; i < ARRLEN; i += 4) {\n+            Asserts.assertEquals(Float.float16ToFloat(sinp[i]), fout[i]);\n+            Asserts.assertEquals(Float.float16ToFloat(sinp[i + 1]), fout[i + 1]);\n+        }\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestFloatConversionsVector.java","additions":32,"deletions":6,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -255,1 +255,1 @@\n-    @IR(applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"},\n+    @IR(applyIfCPUFeature = {\"rvv\", \"true\"},\n@@ -258,0 +258,3 @@\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\"},\n+        applyIf = {\"MaxVectorSize\", \">=16\"},\n+        counts = {IRNode.VECTOR_CAST_S2D, IRNode.VECTOR_SIZE + \"min(max_short, max_double)\", \">0\"})\n@@ -377,1 +380,1 @@\n-    @IR(applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"},\n+    @IR(applyIfCPUFeature = {\"rvv\", \"true\"},\n@@ -380,0 +383,3 @@\n+    @IR(applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx\", \"true\"},\n+        applyIf = {\"MaxVectorSize\", \">=16\"},\n+        counts = {IRNode.VECTOR_CAST_D2S, IRNode.VECTOR_SIZE + \"min(max_double, max_short)\", \">0\"})\n@@ -389,1 +395,1 @@\n-    @IR(applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"},\n+    @IR(applyIfCPUFeature = {\"rvv\", \"true\"},\n@@ -392,0 +398,3 @@\n+    @IR(applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx\", \"true\"},\n+        applyIf = {\"MaxVectorSize\", \">=16\"},\n+        counts = {IRNode.VECTOR_CAST_D2S, IRNode.VECTOR_SIZE + \"min(max_double, max_char)\", \">0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/ArrayTypeConvertTest.java","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"}]}