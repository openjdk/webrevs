{"files":[{"patch":"@@ -374,11 +374,4 @@\n-        \/** Check to see if the property is managed by the security manager **\/\n-        String propertyValue = (_xmlSecurityManager != null) ?\n-                _xmlSecurityManager.getLimitAsString(name) : null;\n-        if (propertyValue != null) {\n-            return propertyValue;\n-        } else {\n-            propertyValue = (_xmlSecurityPropertyMgr != null) ?\n-                _xmlSecurityPropertyMgr.getValue(name) : null;\n-            if (propertyValue != null) {\n-                return propertyValue;\n-            }\n+        \/\/check if the property is managed by security manager\n+        String value;\n+        if ((value = JdkXmlUtils.getProperty(_xmlSecurityManager, _xmlSecurityPropertyMgr, name)) != null) {\n+            return value;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/trax\/TransformerFactoryImpl.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import javax.xml.catalog.CatalogFeatures;\n@@ -34,1 +33,0 @@\n-import jdk.xml.internal.FeaturePropertyBase;\n@@ -36,1 +34,0 @@\n-import jdk.xml.internal.JdkProperty;\n@@ -191,12 +188,5 @@\n-        \/**\n-         * Check to see if the property is managed by the security manager *\n-         *\/\n-        String propertyValue = (fSecurityManager != null)\n-                ? fSecurityManager.getLimitAsString(property) : null;\n-        \/**\n-         * Check to see if the property is managed by the security property\n-         * manager\n-         *\/\n-        if (propertyValue == null) {\n-            propertyValue = (fSecurityPropertyMgr != null)\n-                    ? fSecurityPropertyMgr.getValue(property) : null;\n+\n+        \/\/check if the property is managed by security manager\n+        String value;\n+        if ((value = JdkXmlUtils.getProperty(fSecurityManager, fSecurityPropertyMgr, property)) != null) {\n+            return value;\n@@ -204,1 +194,1 @@\n-        return propertyValue != null ? propertyValue : supportedProps.get(property);\n+        return supportedProps.get(property);\n@@ -253,9 +243,3 @@\n-        \/\/check if the property is managed by security manager\n-        if (fSecurityManager == null\n-                || !fSecurityManager.setLimit(property, JdkProperty.State.APIPROPERTY, value)) {\n-            \/\/check if the property is managed by security property manager\n-            if (fSecurityPropertyMgr == null\n-                    || !fSecurityPropertyMgr.setValue(property, FeaturePropertyBase.State.APIPROPERTY, value)) {\n-                \/\/fall back to the existing property manager\n-                supportedProps.put(property, value);\n-            }\n+        if (!JdkXmlUtils.setProperty(fSecurityManager, fSecurityPropertyMgr, property, value)) {\n+            \/\/fall back to the existing property manager\n+            supportedProps.put(property, value);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/PropertyManager.java","additions":9,"deletions":25,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import jdk.xml.internal.JdkProperty;\n+import jdk.xml.internal.JdkXmlUtils;\n@@ -117,7 +117,4 @@\n-        \/\/check if the property is managed by security manager\n-        String pName;\n-        if ((pName = fSecurityManager.find(name)) != null) {\n-            \/\/ as the qName is deprecated, let the manager decide whether the\n-            \/\/ value shall be changed\n-            fSecurityManager.setLimit(name, JdkProperty.State.APIPROPERTY, value);\n-            attributes.put(pName, fSecurityManager.getLimitAsString(pName));\n+        if (JdkXmlUtils.setProperty(fSecurityManager, fSecurityPropertyMgr, name, value)) {\n+            \/\/ necessary as DocumentBuilder recreate property manager\n+            \/\/ remove this line once that's changed\n+            attributes.put(name, value);\n@@ -126,3 +123,0 @@\n-        } else if ((pName = fSecurityPropertyMgr.find(name)) != null) {\n-            attributes.put(pName, value);\n-            return;\n@@ -130,1 +124,0 @@\n-\n@@ -149,1 +142,0 @@\n-\n@@ -151,5 +143,3 @@\n-        String pName;\n-        if ((pName = fSecurityManager.find(name)) != null) {\n-            return fSecurityManager.getLimitAsString(pName);\n-        } else if ((pName = fSecurityPropertyMgr.find(name)) != null) {\n-            return attributes.get(pName);\n+        String value;\n+        if ((value = JdkXmlUtils.getProperty(fSecurityManager, fSecurityPropertyMgr, name)) != null) {\n+            return value;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/DocumentBuilderFactoryImpl.java","additions":8,"deletions":18,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-import jdk.xml.internal.JdkProperty;\n+import jdk.xml.internal.JdkXmlUtils;\n@@ -300,9 +300,3 @@\n-                     \/\/check if the property is managed by security manager\n-                     if (fSecurityManager == null ||\n-                             !fSecurityManager.setLimit(name, JdkProperty.State.APIPROPERTY, val)) {\n-                         \/\/check if the property is managed by security property manager\n-                         if (fSecurityPropertyMgr == null ||\n-                                 !fSecurityPropertyMgr.setValue(name, State.APIPROPERTY, val)) {\n-                             \/\/fall back to the existing property manager\n-                             domParser.setProperty(name, val);\n-                         }\n+                     if (!JdkXmlUtils.setProperty(fSecurityManager, fSecurityPropertyMgr, name, val)) {\n+                         \/\/fall back to the existing property manager\n+                         domParser.setProperty(name, val);\n@@ -310,1 +304,0 @@\n-\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/DocumentBuilderImpl.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-import jdk.xml.internal.JdkProperty;\n+import jdk.xml.internal.JdkXmlUtils;\n@@ -572,11 +572,4 @@\n-            \/\/check if the property is managed by security manager\n-            if (fSecurityManager == null ||\n-                    !fSecurityManager.setLimit(name, JdkProperty.State.APIPROPERTY, value)) {\n-                \/\/check if the property is managed by security property manager\n-                if (fSecurityPropertyMgr == null ||\n-                        !fSecurityPropertyMgr.setValue(name, FeaturePropertyBase.State.APIPROPERTY, value)) {\n-                    \/\/fall back to the existing property manager\n-                    if (!fInitProperties.containsKey(name)) {\n-                        fInitProperties.put(name, super.getProperty(name));\n-                    }\n-                    super.setProperty(name, value);\n+            if (!JdkXmlUtils.setProperty(fSecurityManager, fSecurityPropertyMgr, name, value)) {\n+                \/\/fall back to the existing property manager\n+                if (!fInitProperties.containsKey(name)) {\n+                    fInitProperties.put(name, super.getProperty(name));\n@@ -584,0 +577,1 @@\n+                super.setProperty(name, value);\n@@ -585,1 +579,0 @@\n-\n@@ -599,11 +592,3 @@\n-            \/** Check to see if the property is managed by the security manager **\/\n-            String propertyValue = (fSecurityManager != null) ?\n-                    fSecurityManager.getLimitAsString(name) : null;\n-            if (propertyValue != null) {\n-                return propertyValue;\n-            } else {\n-                propertyValue = (fSecurityPropertyMgr != null) ?\n-                    fSecurityPropertyMgr.getValue(name) : null;\n-                if (propertyValue != null) {\n-                    return propertyValue;\n-                }\n+            String value;\n+            if ((value = JdkXmlUtils.getProperty(fSecurityManager, fSecurityPropertyMgr, name)) != null) {\n+                return value;\n@@ -611,1 +596,0 @@\n-\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/SAXParserImpl.java","additions":9,"deletions":25,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import javax.xml.catalog.CatalogFeatures.Feature;\n@@ -407,4 +406,5 @@\n-            String propertyValue = (fSecurityManager != null) ?\n-                    fSecurityManager.getLimitAsString(name) : null;\n-            return propertyValue != null ? propertyValue :\n-                    fXMLSchemaLoader.getProperty(name);\n+            String value;\n+            if ((value = JdkXmlUtils.getProperty(fSecurityManager, fSecurityPropertyMgr, name)) != null) {\n+                return value;\n+            }\n+            return fXMLSchemaLoader.getProperty(name);\n@@ -516,9 +516,3 @@\n-            \/\/check if the property is managed by security manager\n-            if (fSecurityManager == null ||\n-                    !fSecurityManager.setLimit(name, JdkProperty.State.APIPROPERTY, object)) {\n-                \/\/check if the property is managed by security property manager\n-                if (fSecurityPropertyMgr == null ||\n-                        !fSecurityPropertyMgr.setValue(name, FeaturePropertyBase.State.APIPROPERTY, object)) {\n-                    \/\/fall back to the existing property manager\n-                    fXMLSchemaLoader.setProperty(name, object);\n-                }\n+            if (!JdkXmlUtils.setProperty(fSecurityManager, fSecurityPropertyMgr, name, object)) {\n+                \/\/fall back to the existing property manager\n+                fXMLSchemaLoader.setProperty(name, object);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/validation\/XMLSchemaFactory.java","additions":8,"deletions":14,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-import jdk.xml.internal.JdkProperty;\n+import jdk.xml.internal.JdkXmlUtils;\n@@ -356,1 +356,1 @@\n-     * @param state The requested state of the feature (true or false).\n+     * @param value The value of the feature (true or false).\n@@ -364,1 +364,1 @@\n-        else if (value == false && (VALIDATION.equals(featureId) || SCHEMA_VALIDATION.equals(featureId))) {\n+        else if (!value && (VALIDATION.equals(featureId) || SCHEMA_VALIDATION.equals(featureId))) {\n@@ -455,11 +455,4 @@\n-        \/\/check if the property is managed by security manager\n-        if (fInitSecurityManager == null ||\n-                !fInitSecurityManager.setLimit(propertyId, JdkProperty.State.APIPROPERTY, value)) {\n-            \/\/check if the property is managed by security property manager\n-            if (fSecurityPropertyMgr == null ||\n-                    !fSecurityPropertyMgr.setValue(propertyId, FeaturePropertyBase.State.APIPROPERTY, value)) {\n-                \/\/fall back to the existing property manager\n-                if (!fInitProperties.containsKey(propertyId)) {\n-                    fInitProperties.put(propertyId, super.getProperty(propertyId));\n-                }\n-                super.setProperty(propertyId, value);\n+        if (!JdkXmlUtils.setProperty(fInitSecurityManager, fSecurityPropertyMgr, propertyId, value)) {\n+            \/\/fall back to the existing property manager\n+            if (!fInitProperties.containsKey(propertyId)) {\n+                fInitProperties.put(propertyId, super.getProperty(propertyId));\n@@ -467,0 +460,1 @@\n+            super.setProperty(propertyId, value);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/validation\/XMLSchemaValidatorComponentManager.java","additions":8,"deletions":14,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,0 +101,41 @@\n+    \/**\n+     * Sets the property if it's managed by either XMLSecurityManager or XMLSecurityPropertyManager.\n+     * @param xsm the XMLSecurityManager\n+     * @param xspm the XMLSecurityPropertyManager\n+     * @param property the property\n+     * @param value the value\n+     * @return true if the property is managed by either XMLSecurityManager or\n+     * XMLSecurityPropertyManager, false otherwise\n+     *\/\n+    public static boolean setProperty(XMLSecurityManager xsm, XMLSecurityPropertyManager xspm,\n+            String property, Object value) {\n+        if (xsm != null && xsm.find(property) != null) {\n+            return xsm.setLimit(property, JdkProperty.State.APIPROPERTY, value);\n+\n+        } else if (xspm != null && xspm.find(property) != null) {\n+            return xspm.setValue(property, FeaturePropertyBase.State.APIPROPERTY, value);\n+        }\n+        return false;\n+    }\n+\n+    \/**\n+     * Returns the value of the property if it's managed by either XMLSecurityManager\n+     * or XMLSecurityPropertyManager.\n+     * @param xsm the XMLSecurityManager\n+     * @param xspm the XMLSecurityPropertyManager\n+     * @param property the property\n+     * @return the value of the property if it's managed by either XMLSecurityManager\n+     * or XMLSecurityPropertyManager, null otherwise\n+     *\/\n+    public static String getProperty(XMLSecurityManager xsm, XMLSecurityPropertyManager xspm,\n+            String property) {\n+        String value = null;\n+        if (xsm != null && (value = xsm.getLimitAsString(property)) != null) {\n+            return value;\n+        }\n+        if (xspm != null) {\n+            value = xspm.getValue(property);\n+        }\n+        return value;\n+    }\n+\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/JdkXmlUtils.java","additions":42,"deletions":1,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -364,1 +364,1 @@\n-                return limit.systemProperty();\n+                return (limit.systemProperty != null) ? limit.systemProperty : limit.apiProperty;\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/XMLSecurityManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,0 +35,13 @@\n+    \/\/ as in the Processors table in java.xml module summary\n+    public enum Processor {\n+        DOM,\n+        SAX,\n+        XMLREADER,\n+        StAX,\n+        VALIDATION,\n+        TRANSFORM,\n+        XSLTC,\n+        DOMLS,\n+        XPATH\n+    };\n+\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/libs\/jaxp\/library\/JUnitTestUtil.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,162 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.validation.SchemaFactory;\n+import java.util.EnumSet;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+import jaxp.library.JUnitTestUtil.Processor;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.xml.sax.XMLReader;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+\/*\n+ * @test\n+ * @bug 8354774\n+ * @summary Verifies JAXP API Properties as specified in the java.xml module.\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest \/test\/lib\n+ * @run junit\/othervm common.PropertiesTest\n+ *\/\n+public class PropertiesTest {\n+    private static final String ACCESS_EXTERNAL_DTD = XMLConstants.ACCESS_EXTERNAL_DTD;\n+    private static final String ACCESS_EXTERNAL_SCHEMA = XMLConstants.ACCESS_EXTERNAL_SCHEMA;\n+    private static final String ACCESS_EXTERNAL_STYLESHEET = XMLConstants.ACCESS_EXTERNAL_STYLESHEET;\n+    private static final String SP_ACCESS_EXTERNAL_DTD = \"javax.xml.accessExternalDTD\";\n+    private static final String SP_ACCESS_EXTERNAL_SCHEMA = \"javax.xml.accessExternalSchema\";\n+    private static final String SP_ACCESS_EXTERNAL_STYLESHEET = \"javax.xml.accessExternalStylesheet\";\n+    private static final String DEFAULT_VALUE = \"all\";\n+    \/**\n+     * Returns test data for testAccessExternalProperties\n+     * @return test data for testAccessExternalProperties\n+     *\/\n+    private static Stream<Arguments> testData() {\n+        \/\/ Supported processors for Access External Properties\n+        Set<Processor> supportedProcessors1 = EnumSet.of(Processor.DOM, Processor.SAX, Processor.XMLREADER,\n+                Processor.StAX, Processor.VALIDATION);\n+        Set<Processor> supportedProcessors2 = EnumSet.of(Processor.TRANSFORM);\n+\n+        return Stream.of(\n+                Arguments.of(supportedProcessors1, ACCESS_EXTERNAL_DTD, null, SP_ACCESS_EXTERNAL_DTD, null, DEFAULT_VALUE),\n+                Arguments.of(supportedProcessors1, ACCESS_EXTERNAL_DTD, \"http\", SP_ACCESS_EXTERNAL_DTD, null, \"http\"),\n+                Arguments.of(supportedProcessors1, ACCESS_EXTERNAL_DTD, null, SP_ACCESS_EXTERNAL_DTD, \"https\", \"https\"),\n+                Arguments.of(supportedProcessors1, ACCESS_EXTERNAL_DTD, \"http\", SP_ACCESS_EXTERNAL_DTD, \"https\", \"http\"),\n+                Arguments.of(supportedProcessors1, ACCESS_EXTERNAL_SCHEMA, null, SP_ACCESS_EXTERNAL_SCHEMA, null, DEFAULT_VALUE),\n+                Arguments.of(supportedProcessors1, ACCESS_EXTERNAL_SCHEMA, \"http\", SP_ACCESS_EXTERNAL_SCHEMA, null, \"http\"),\n+                Arguments.of(supportedProcessors1, ACCESS_EXTERNAL_SCHEMA, null, SP_ACCESS_EXTERNAL_SCHEMA, \"https\", \"https\"),\n+                Arguments.of(supportedProcessors1, ACCESS_EXTERNAL_SCHEMA, \"http\", SP_ACCESS_EXTERNAL_SCHEMA, \"https\", \"http\"),\n+                Arguments.of(supportedProcessors2, ACCESS_EXTERNAL_STYLESHEET, null, SP_ACCESS_EXTERNAL_STYLESHEET, null, DEFAULT_VALUE),\n+                Arguments.of(supportedProcessors2, ACCESS_EXTERNAL_STYLESHEET, \"http\", SP_ACCESS_EXTERNAL_STYLESHEET, null, \"http\"),\n+                Arguments.of(supportedProcessors2, ACCESS_EXTERNAL_STYLESHEET, null, SP_ACCESS_EXTERNAL_STYLESHEET, \"https\", \"https\"),\n+                Arguments.of(supportedProcessors2, ACCESS_EXTERNAL_STYLESHEET, \"http\", SP_ACCESS_EXTERNAL_STYLESHEET, \"https\", \"http\")\n+        );\n+    }\n+\n+    \/**\n+     * Verifies that the Access External Properties are supported throughout the\n+     * JAXP APIs.\n+     * @param supportedProcessors the supported processors for the property\n+     * @param apiProperty the API property\n+     * @param apiValue the value of the API property\n+     * @param sysProperty the System property corresponding to the API property\n+     * @param sysValue the value of the System property\n+     * @param expected the expected result\n+     * @throws Exception if the test fails due to test configuration issues other\n+     * than the expected result\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"testData\")\n+    public void testAccessExternalProperties(Set<Processor> supportedProcessors,\n+           String apiProperty, String apiValue, String sysProperty, String sysValue,\n+           String expected) throws Exception {\n+        for (Processor p : supportedProcessors) {\n+            testProperties(p, apiProperty, apiValue, sysProperty, sysValue,\n+                    expected);\n+        }\n+    }\n+\n+    \/**\n+     * Verifies that properties can be set via the JAXP APIs and their corresponding\n+     * System Properties.\n+     * @param processor the processor type\n+     * @param apiProperty the API property\n+     * @param apiValue the value to be set via the API property\n+     * @param sysProperty the System Property\n+     * @param sysValue the value to be set via the System property\n+     * @param expected the expected result\n+     * @throws Exception if the test fails, which can only happen if the property\n+     * is set incorrectly.\n+     *\/\n+    void testProperties(Processor processor, String apiProperty, String apiValue,\n+            String sysProperty, String sysValue, String expected)\n+            throws Exception {\n+        Object ret1 = null;\n+        if (sysValue != null) {\n+            System.setProperty(sysProperty, sysValue);\n+        }\n+        switch (processor) {\n+            case DOM:\n+                DocumentBuilderFactory dbf = DocumentBuilderFactory.newDefaultInstance();\n+                if (apiValue != null) dbf.setAttribute(apiProperty, apiValue);\n+                ret1 = dbf.getAttribute(apiProperty);\n+                break;\n+            case SAX:\n+                SAXParser sp = SAXParserFactory.newDefaultInstance().newSAXParser();\n+                if (apiValue != null) sp.setProperty(apiProperty, apiValue);\n+                ret1 = sp.getProperty(apiProperty);\n+                break;\n+            case XMLREADER:\n+                XMLReader reader = SAXParserFactory.newDefaultInstance().newSAXParser().getXMLReader();\n+                if (apiValue != null) reader.setProperty(apiProperty, apiValue);\n+                ret1 = reader.getProperty(apiProperty);\n+                break;\n+            case StAX:\n+                XMLInputFactory xif = XMLInputFactory.newDefaultFactory();\n+                if (apiValue != null) xif.setProperty(apiProperty, apiValue);\n+                ret1 = xif.getProperty(apiProperty);\n+                break;\n+            case VALIDATION:\n+                SchemaFactory sf = SchemaFactory.newDefaultInstance();\n+                if (apiValue != null) sf.setProperty(apiProperty, apiValue);\n+                ret1 = sf.getProperty(apiProperty);\n+                break;\n+            case TRANSFORM:\n+                TransformerFactory tf = TransformerFactory.newDefaultInstance();\n+                if (apiValue != null) tf.setAttribute(apiProperty, apiValue);\n+                ret1 = tf.getAttribute(apiProperty);\n+                break;\n+        }\n+\n+        if (sysValue != null) System.clearProperty(sysProperty);\n+        \/\/ property value is as expected\n+        assertEquals(expected, ret1);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/PropertiesTest.java","additions":162,"deletions":0,"binary":false,"changes":162,"status":"added"}]}