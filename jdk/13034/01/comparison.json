{"files":[{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8303697\n+ * @summary Test verifies that ProcessTools.startProcess() print all lines even the last line doesn't end with '\\n'\n+ * @library \/test\/lib\n+ * @run main ProcessToolsLastLineTest\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.Asserts;\n+\n+public class ProcessToolsLastLineTest {\n+\n+    static void test(String output) throws Exception {\n+        final StringBuffer sb = new StringBuffer();\n+        Process p = ProcessTools.startProcess(\"process\",\n+                ProcessTools.createJavaProcessBuilder(ProcessToolsLastLineTest.class.getName(), output),\n+                line -> { sb.append(line);});\n+        p.waitFor();\n+        String expectedOutput = output.replace(\"\\n\", \"\");\n+        Asserts.assertEQ(sb.toString(), expectedOutput);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ The line which exceeds internal StreamPumper buffer (256 bytes)\n+        String VERY_LONG_LINE = \"VERYLONGLINE\".repeat(30);\n+        if (args.length > 0) {\n+            System.out.print(args[0]);\n+        } else {\n+            test(\"ARG1\");\n+            test(\"ARG1\\nARG2\");\n+            test(\"ARG1\\nARG2\\n\");\n+            test(\"\\nARG1\\nARG2\\n\");\n+            test(\"\\nARG1\\n\" + VERY_LONG_LINE + \"\\nARG2\\n\");\n+            test(\"\\nARG1\\n\" + VERY_LONG_LINE);\n+        }\n+\n+    }\n+}\n","filename":"test\/lib-test\/jdk\/test\/lib\/process\/ProcessToolsLastLineTest.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,2 +103,2 @@\n-        try (BufferedInputStream is = new BufferedInputStream(in)) {\n-            ByteArrayOutputStream lineBos = new ByteArrayOutputStream();\n+        try (BufferedInputStream is = new BufferedInputStream(in);\n+            ByteArrayOutputStream lineBos = new ByteArrayOutputStream()) {\n@@ -145,1 +145,4 @@\n-\n+            final String line = lineBos.toString();\n+            if (!line.isEmpty()) {\n+                linePumps.forEach((lp) -> lp.processLine(line));\n+            }\n","filename":"test\/lib\/jdk\/test\/lib\/process\/StreamPumper.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"}]}