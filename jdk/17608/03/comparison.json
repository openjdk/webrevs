{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,23 @@\n-\/**\n+import javax.print.Doc;\n+import javax.print.DocFlavor;\n+import javax.print.DocPrintJob;\n+import javax.print.PrintService;\n+import javax.print.PrintServiceLookup;\n+import javax.print.attribute.DocAttributeSet;\n+import javax.print.attribute.HashPrintRequestAttributeSet;\n+import javax.print.attribute.standard.Copies;\n+import javax.print.attribute.standard.SheetCollate;\n+import java.awt.Button;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Panel;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+import java.io.InputStream;\n+import java.io.Reader;\n+\n+\/*\n@@ -29,0 +51,2 @@\n+ * @library \/test\/lib \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n@@ -31,8 +55,0 @@\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.print.*;\n-import javax.print.attribute.standard.*;\n-import javax.print.attribute.*;\n-import javax.print.*;\n-import java.io.*;\n-\n@@ -40,1 +56,1 @@\n-    extends Frame implements Doc, Printable, ActionListener {\n+        extends Frame implements Doc, Printable, ActionListener {\n@@ -42,5 +58,5 @@\n-        Button print2D = new Button(\"2D Print\");\n-        Button printMerlin = new Button(\"PrintService\");\n-        PrinterJob pj = PrinterJob.getPrinterJob();\n-        PrintService defService = null;\n-        HashPrintRequestAttributeSet prSet = new HashPrintRequestAttributeSet();\n+    Button print2D = new Button(\"2D Print\");\n+    Button printMerlin = new Button(\"PrintService\");\n+    PrinterJob pj = PrinterJob.getPrinterJob();\n+    PrintService defService = null;\n+    HashPrintRequestAttributeSet prSet = new HashPrintRequestAttributeSet();\n@@ -55,5 +71,0 @@\n-        addWindowListener (new WindowAdapter() {\n-            public void windowClosing (WindowEvent e) {\n-                dispose();\n-            }\n-        });\n@@ -75,1 +86,0 @@\n-        setVisible(true);\n@@ -78,1 +88,0 @@\n-\n@@ -80,1 +89,1 @@\n-          throws PrinterException {\n+            throws PrinterException {\n@@ -89,1 +98,1 @@\n-    public void actionPerformed (ActionEvent ae) {\n+    public void actionPerformed(ActionEvent ae) {\n@@ -99,1 +108,0 @@\n-            System.out.println (\"DONE\");\n@@ -101,1 +109,1 @@\n-            e.printStackTrace();\n+            PassFailJFrame.forceFail( ae.getActionCommand() + \" test Failed\");\n@@ -126,24 +134,18 @@\n-  public static void main( String[] args) {\n-\n-  String[] instructions =\n-        {\n-         \"You must have a printer available to perform this test\",\n-         \"The print result should be collated.\"\n-       };\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n-\n-     new Collate2DPrintingTest();\n-  }\n-}\n-\n-\n-class Sysout {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.setVisible(true);\n-      println( \"Any messages for the tester will display here.\" );\n+    private static final String INSTRUCTIONS =\n+            \"Click on the '2D Print' button.\\n\" +\n+            \"Choose copies as '2' with 'Collated' checkbox and Print\\n\" +\n+            \"\\n\" +\n+            \"Click on the 'PrintService', should get a print from default printer\\n\" +\n+            \"\\n\" +\n+            \"If you get only one copy or non 'Collated' prints from any of the above case, \" +\n+            \"test failed\";\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .testUI(Collate2DPrintingTest::new)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(45)\n+                .build()\n+                .awaitAndCheck();\n@@ -151,103 +153,1 @@\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.setVisible(true);\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      setVisible(true);\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n- }\/\/ TestDialog  class\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/Collate2DPrintingTest.java","additions":54,"deletions":154,"binary":false,"changes":208,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,17 @@\n-\/**\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Rectangle;\n+import java.awt.RenderingHints;\n+import java.awt.geom.AffineTransform;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.BufferedImageOp;\n+import java.awt.image.RescaleOp;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n@@ -29,0 +45,2 @@\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame jtreg.SkippedException\n@@ -31,0 +49,1 @@\n+public class DrawImage {\n@@ -32,15 +51,1 @@\n-import java.util.*;\n-import java.text.*;\n-import java.io.*;\n-import java.net.*;\n-import java.awt.*;\n-import java.awt.font.*;\n-import java.awt.geom.*;\n-import java.awt.print.*;\n-import java.awt.event.*;\n-import java.awt.image.*;\n-import java.awt.image.renderable.*;\n-import javax.swing.*;\n-import javax.swing.text.*;\n-import javax.swing.border.*;\n-import javax.swing.event.*;\n+    protected static final int objectBorder = 15;\n@@ -48,7 +53,1 @@\n-public class DrawImage\n-{\n-    protected static final double _hwBorder = 72 \/ 4;       \/\/ 1\/4 inch\n-    protected static final double _border = 72 \/ 4;         \/\/ 1\/4 inch\n-    protected static final int _objectBorder = 15;\n-    protected static final int _verticalGap = 20;\n-    protected static final int _textIndent = 150;\n+    private final BufferedImage image;\n@@ -56,3 +55,1 @@\n-    protected BufferedImage _image;\n-\n-    protected PageFormat  _pageFormat;\n+    private final PageFormat pageFormat;\n@@ -61,1 +58,1 @@\n-        _image = image;\n+        this.image = image;\n@@ -63,1 +60,2 @@\n-        _pageFormat = pj.defaultPage();\n+        pageFormat = pj.defaultPage();\n+    }\n@@ -65,1 +63,6 @@\n- }\n+    protected int printImage(Graphics g, PageFormat pf, int pageIndex) {\n+        if (pageIndex == 0) {\n+            return Printable.NO_SUCH_PAGE;\n+        }\n+        Graphics2D g2D = (Graphics2D) g;\n+        g2D.transform(new AffineTransform(pageFormat.getMatrix()));\n@@ -67,0 +70,2 @@\n+        int paperW = (int) pageFormat.getImageableWidth();\n+        int paperH = (int) pageFormat.getImageableHeight();\n@@ -68,3 +73,3 @@\n-    protected int printImage(Graphics g, PageFormat pf, BufferedImage image) {\n-        Graphics2D g2D = (Graphics2D)g;\n-        g2D.transform(new AffineTransform(_pageFormat.getMatrix()));\n+        int x = (int) pageFormat.getImageableX();\n+        int y = (int) pageFormat.getImageableY();\n+        g2D.setClip(x, y, paperW, paperH);\n@@ -72,2 +77,3 @@\n-        int paperW = (int)pf.getImageableWidth(), paperH =\n-            (int)pf.getImageableHeight();\n+        \/\/ make slightly smaller (25) than max possible width\n+        float scaleFactor = ((float) ((paperW - 25) - objectBorder -\n+                objectBorder) \/ (float) (image.getWidth()));\n@@ -75,2 +81,2 @@\n-        int x = (int)pf.getImageableX(), y = (int)pf.getImageableY();\n-        g2D.setClip(x, y, paperW, paperH);\n+        BufferedImageOp scaleOp = new RescaleOp(scaleFactor, 0, null);\n+        g2D.drawImage(image, scaleOp, x + objectBorder, y + objectBorder);\n@@ -78,16 +84,1 @@\n-        \/\/ print images\n-        if (image != null ) {\n-            int imageH = image.getHeight(), imageW = image.getWidth();\n-            \/\/ make slightly smaller (25) than max possible width\n-            float scaleFactor = ((float)((paperW - 25) - _objectBorder -\n-                                         _objectBorder) \/ (float)(imageW));\n-            int scaledW = (int)(imageW * scaleFactor),\n-                scaledH = (int)(imageH *scaleFactor);\n-            BufferedImageOp scaleOp = new RescaleOp(scaleFactor, 0, null);\n-            g2D.drawImage(image, scaleOp, x + _objectBorder, y + _objectBorder);\n-            y += _objectBorder + scaledH + _objectBorder;\n-            return Printable.PAGE_EXISTS;\n-        }\n-        else {\n-            return Printable.NO_SUCH_PAGE;\n-        }\n+        return Printable.PAGE_EXISTS;\n@@ -96,2 +87,1 @@\n-    public void print() {\n-        try {\n+    public void print() throws PrinterException {\n@@ -100,9 +90,1 @@\n-            pj.setPrintable(new Printable() {\n-                public int print(Graphics g, PageFormat pf, int pageIndex) {\n-                    int result = NO_SUCH_PAGE;\n-                    if (pageIndex == 0) {\n-                        result = printImage(g, _pageFormat, _image);\n-                    }\n-                    return result;\n-                }\n-            });\n+            pj.setPrintable(this::printImage);\n@@ -110,4 +92,1 @@\n-                try { pj.print(); }\n-                catch (PrinterException e) {\n-                    System.out.println(e);\n-                }\n+                pj.print();\n@@ -115,5 +94,0 @@\n-\n-        }\n-        catch (Exception e) {\n-            e.printStackTrace(System.out);\n-        }\n@@ -122,7 +96,5 @@\n-    public static void main(String[] args) {\n-                                String[] instructions =\n-           {\n-            \"You must have a printer available to perform this test.\",\n-            \"The test passes if you get a printout of a gray rectangle\",\n-                                                \"with white text without any exception.\"\n-          };\n+    private static final String INSTRUCTIONS =\n+            \"You must have a printer available to perform this test.\\n\" +\n+            \"\\n\" +\n+            \"The test passes if you get a printout of a gray rectangle\\n\" +\n+            \"with white text without any exception.\";\n@@ -130,2 +102,5 @@\n-         Sysout.createDialog( );\n-         Sysout.printInstructions( instructions );\n+    public static void main(String[] args) throws Exception {\n+\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\");\n+        }\n@@ -134,0 +109,10 @@\n+        if (image == null) {\n+            throw new RuntimeException(\"Image creation failed\");\n+        }\n+\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(45)\n+                .build();\n+\n@@ -136,1 +121,1 @@\n-        \/\/      System.exit(0);\n+        passFailJFrame.awaitAndCheck();\n@@ -139,2 +124,0 @@\n-\n-\n@@ -144,1 +127,1 @@\n-                                                 BufferedImage.TYPE_BYTE_GRAY);\n+                BufferedImage.TYPE_BYTE_GRAY);\n@@ -146,1 +129,1 @@\n-        Graphics2D g2D = (Graphics2D)result.getGraphics();\n+        Graphics2D g2D = (Graphics2D) result.getGraphics();\n@@ -148,1 +131,1 @@\n-                             RenderingHints.VALUE_ANTIALIAS_OFF);\n+                RenderingHints.VALUE_ANTIALIAS_OFF);\n@@ -156,1 +139,0 @@\n-        AffineTransform original = g2D.getTransform();\n@@ -158,1 +140,1 @@\n-5, h \/ 5);\n+                5.0, h \/ 5.0);\n@@ -161,1 +143,0 @@\n-\n@@ -163,0 +144,1 @@\n+        g2D.dispose();\n@@ -166,2 +148,0 @@\n-\n-\n@@ -169,114 +149,0 @@\n-\n-class Sysout {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n- }\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/DrawImage.java","additions":73,"deletions":207,"binary":false,"changes":280,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,15 @@\n-\/**\n+import java.awt.Color;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.font.FontRenderContext;\n+import java.awt.print.Book;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterJob;\n+import java.text.AttributedCharacterIterator;\n+import java.text.AttributedString;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n@@ -29,1 +43,3 @@\n- *          work for printer graphics objects.\n+ * work for printer graphics objects.\n+ * @library \/test\/lib \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame jtreg.SkippedException\n@@ -32,0 +48,1 @@\n+public class DrawStringMethods implements Printable {\n@@ -33,4 +50,6 @@\n-import java.awt.*;\n-import java.text.*;\n-import java.awt.font.*;\n-import java.awt.print.*;\n+    private static final String INSTRUCTIONS =\n+            \" This test will automatically initiate a print\\n\" +\n+            \"\\n\" +\n+            \" Confirm that the methods are printed.\\n\" +\n+            \" For Graphics: drawString, drawString, drawChars, drawBytes\\n\" +\n+            \" For Graphics2D: drawString, drawString, drawGlyphVector\";\n@@ -38,1 +57,1 @@\n-public class DrawStringMethods implements Printable {\n+    public static void main(String[] args) throws Exception {\n@@ -40,8 +59,3 @@\n-    public static void main(String args[]) {\n-        String[] instructions =\n-        {\n-            \"Confirm that the methods are printed.\",\n-            \" For Graphics: drawString, drawString, drawChars, drawBytes\",\n-            \" For Graphics2D: drawString, drawString, drawGlyphVector\"\n-        };\n-        Sysout.createDialogWithInstructions( instructions );\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\");\n+        }\n@@ -49,0 +63,5 @@\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(45)\n+                .build();\n@@ -56,0 +75,1 @@\n+        pjob.print();\n@@ -57,5 +77,1 @@\n-        try {\n-            pjob.print();\n-        } catch (PrinterException e) {\n-            throw new RuntimeException(e.getMessage());\n-        }\n+        passFailJFrame.awaitAndCheck();\n@@ -96,1 +112,1 @@\n-        byte data[] = new byte[s.length()];\n+        byte[] data = new byte[s.length()];\n@@ -119,1 +135,1 @@\n-                           \"float x, float y)\";\n+                \"float x, float y)\";\n@@ -136,116 +152,0 @@\n-\n-class Sysout\n- {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n- }\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog\n- {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"South\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-     \/\/chop up each into pieces maxSringLength long\n-     remainingStr = instructions[ i ];\n-     while( remainingStr.length() > 0 )\n-      {\n-        \/\/if longer than max then chop off first max chars to print\n-        if( remainingStr.length() >= maxStringLength )\n-         {\n-           \/\/Try to chop on a word boundary\n-           int posOfSpace = remainingStr.\n-          lastIndexOf( ' ', maxStringLength - 1 );\n-\n-           if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-           printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-           remainingStr = remainingStr.substring( posOfSpace + 1 );\n-         }\n-        \/\/else just print\n-        else\n-         {\n-           printStr = remainingStr;\n-           remainingStr = \"\";\n-         }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-      }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n- }\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/DrawStringMethods.java","additions":39,"deletions":139,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,16 @@\n-\/**\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Panel;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Paper;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n@@ -29,0 +44,2 @@\n+ * @library \/test\/lib \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame jtreg.SkippedException\n@@ -31,5 +48,0 @@\n-\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.print.*;\n-\n@@ -38,22 +50,20 @@\n-  PrinterJob pJob;\n-  PageFormat pf;\n-\n-  public InvalidPage() {\n-    super (\"Validate Page Test\");\n-    pJob = PrinterJob.getPrinterJob();\n-    pf = pJob.defaultPage();\n-    Paper p = pf.getPaper();\n-    p.setImageableArea(0,0,p.getWidth(), p.getHeight());\n-    pf.setPaper(p);\n-    setLayout(new FlowLayout());\n-    Panel panel = new Panel();\n-    Button printButton = new Button (\"Print\");\n-    printButton.addActionListener(new ActionListener() {\n-                public void actionPerformed (ActionEvent e) {\n-                    try {\n-                         if (pJob.printDialog()) {\n-                             pJob.setPrintable(InvalidPage.this, pf);\n-                             pJob.print();\n-                    }\n-                    } catch (PrinterException pe ) {\n-                    }\n+    PrinterJob pJob;\n+    PageFormat pf;\n+\n+    public InvalidPage() {\n+        super(\"Validate Page Test\");\n+        pJob = PrinterJob.getPrinterJob();\n+        pf = pJob.defaultPage();\n+        Paper p = pf.getPaper();\n+        p.setImageableArea(0, 0, p.getWidth(), p.getHeight());\n+        pf.setPaper(p);\n+        setLayout(new FlowLayout());\n+        Panel panel = new Panel();\n+        Button printButton = new Button(\"Print\");\n+        printButton.addActionListener(e -> {\n+            if (pJob.printDialog()) {\n+                pJob.setPrintable(InvalidPage.this, pf);\n+                try {\n+                    pJob.print();\n+                } catch (PrinterException pe) {\n+                    PassFailJFrame.forceFail(\"Test Failed\");\n@@ -61,94 +71,5 @@\n-    });\n-    panel.add (printButton);\n-    add(panel);\n-\n-    addWindowListener (new WindowAdapter() {\n-         public void windowClosing (WindowEvent e) {\n-            dispose();\n-            System.exit (0);\n-         }\n-\n-      });\n-      setSize (200, 200);\n-      setVisible (true);\n-  }\n-\n-  public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) {\n-\n-     if (pageIndex > 1) {\n-        return Printable.NO_SUCH_PAGE;\n-     }\n-\n-     Graphics2D g2d = (Graphics2D)graphics;\n-\n-     g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());\n-     g2d.drawString(\"ORIGIN\", 30, 30);\n-     g2d.drawString(\"X THIS WAY\", 200, 50);\n-     g2d.drawString(\"Y THIS WAY\", 60 , 200);\n-     g2d.drawRect(0,0,(int)pageFormat.getImageableWidth(),\n-                      (int)pageFormat.getImageableHeight());\n-     if (pageIndex == 0) {\n-        g2d.setColor(Color.black);\n-     } else {\n-        g2d.setColor(new Color(0,0,0,128));\n-     }\n-     g2d.drawRect(1,1,(int)pageFormat.getImageableWidth()-2,\n-                      (int)pageFormat.getImageableHeight()-2);\n-\n-     g2d.drawLine(0,0,\n-                  (int)pageFormat.getImageableWidth(),\n-                  (int)pageFormat.getImageableHeight());\n-     g2d.drawLine((int)pageFormat.getImageableWidth(),0,\n-                   0,(int)pageFormat.getImageableHeight());\n-     return  Printable.PAGE_EXISTS;\n-  }\n-\n-  public static void main( String[] args) {\n-  String[] instructions =\n-        {\n-         \"You must have a printer available to perform this test\",\n-         \"Press the print button, which brings up a print dialog and\",\n-         \"in the dialog select a printer and press the print button\",\n-         \"in the dialog. Repeat for as many printers as you have installed\",\n-         \"On solaris and linux just one printer is sufficient\",\n-         \"Collect the output and examine it, each print job has two pages\",\n-         \"of very similar output, except that the 2nd page of the job may\",\n-         \"appear in a different colour, and the output near the edge of\",\n-         \"the page may be clipped. This is OK. Hold up both pieces of paper\",\n-         \"to the light and confirm that the lines and text (where present)\",\n-         \"are positioned identically on both pages\",\n-         \"The test fails if the JRE crashes, or if the output from the two\",\n-         \"pages of a job is aligned differently\"\n-       };\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n-\n-     new InvalidPage();\n-  }\n-\n-}\n-\n-class Sysout {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n+            }\n+        });\n+        panel.add(printButton);\n+        add(panel);\n+        pack();\n@@ -157,4 +78,31 @@\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n+    public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) {\n+\n+        if (pageIndex > 1) {\n+            return Printable.NO_SUCH_PAGE;\n+        }\n+\n+        Graphics2D g2d = (Graphics2D) graphics;\n+\n+        g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());\n+        g2d.drawString(\"ORIGIN\", 30, 30);\n+        g2d.drawString(\"X THIS WAY\", 200, 50);\n+        g2d.drawString(\"Y THIS WAY\", 60, 200);\n+        g2d.drawRect(0, 0,\n+                (int) pageFormat.getImageableWidth(),\n+                (int) pageFormat.getImageableHeight());\n+        if (pageIndex == 0) {\n+            g2d.setColor(Color.black);\n+        } else {\n+            g2d.setColor(new Color(0, 0, 0, 128));\n+        }\n+        g2d.drawRect(1, 1,\n+                (int) pageFormat.getImageableWidth() - 2,\n+                (int) pageFormat.getImageableHeight() - 2);\n+\n+        g2d.drawLine(0, 0,\n+                (int) pageFormat.getImageableWidth(),\n+                (int) pageFormat.getImageableHeight());\n+        g2d.drawLine((int) pageFormat.getImageableWidth(), 0,\n+                0, (int) pageFormat.getImageableHeight());\n+\n+        return Printable.PAGE_EXISTS;\n@@ -163,78 +111,28 @@\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n+    private static final String INSTRUCTIONS =\n+            \" You must have a printer available to perform this test\\n\" +\n+            \" Press the print button, which brings up a print dialog.\\n\" +\n+            \" In the dialog select a printer and press the print button.\\n\" +\n+            \" Repeat for all the printers as you have installed\\n\" +\n+            \" On Solaris and Linux just one printer is sufficient.\\n\" +\n+            \" Collect the output and examine it, each print job has two pages\\n\" +\n+            \" of very similar output, except that the 2nd page of the job may\\n\" +\n+            \" appear in a different colour, and the output near the edge of\\n\" +\n+            \" the page may be clipped. This is OK. Hold up both pieces of paper\\n\" +\n+            \" to the light and confirm that the lines and text (where present)\\n\" +\n+            \" are positioned identically on both pages\\n\" +\n+            \" The test fails if the output from the two\\n\" +\n+            \" pages of a job is aligned differently\";\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\");\n+        }\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .testUI(InvalidPage::new)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(45)\n+                .build()\n+                .awaitAndCheck();\n@@ -242,2 +140,1 @@\n-\n- }\/\/ TestDialog  class\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/InvalidPage.java","additions":104,"deletions":207,"binary":false,"changes":311,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,9 @@\n-\/**\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterJob;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n@@ -29,0 +37,2 @@\n+ * @library \/test\/lib \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame jtreg.SkippedException\n@@ -31,4 +41,0 @@\n-\n-import java.awt.*;\n-import java.awt.print.*;\n-\n@@ -37,0 +43,1 @@\n+    private static final String THE_NAME = \"Testing the Jobname setting\";\n@@ -38,1 +45,4 @@\n-  static String theName = \"Testing the Jobname setting\";\n+    private static final String INSTRUCTIONS =\n+            \"You must have a printer available to perform this test\\n\" +\n+            \"This test prints a page with a banner\/job name of\\n\" +\n+            THE_NAME;\n@@ -40,1 +50,1 @@\n-  public static void main(String[] args) {\n+    public static void main(String[] args) throws Exception {\n@@ -42,6 +52,3 @@\n-       String[] instructions =\n-        {\n-         \"You must have a printer available to perform this test\",\n-         \"This test prints a page with a banner\/job name of\",\n-          theName\n-       };\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\");\n+        }\n@@ -49,14 +56,5 @@\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n-\n-      PrinterJob job = PrinterJob.getPrinterJob();\n-      job.setJobName(theName);\n-      job.setPrintable(new PrinterJobName());\n-      try {\n-          job.print();\n-          System.out.println(\"PRINTING DONE.\");\n-      }\n-      catch (Exception exc) {\n-          System.out.println(\"Printer Exception\");\n-      }\n-  }\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(45)\n+                .build();\n@@ -64,0 +62,6 @@\n+        PrinterJob job = PrinterJob.getPrinterJob();\n+        job.setJobName(THE_NAME);\n+        job.setPrintable(new PrinterJobName());\n+        job.print();\n+        passFailJFrame.awaitAndCheck();\n+    }\n@@ -66,10 +70,8 @@\n-      if (pgIndex > 0 ) {\n-          return Printable.NO_SUCH_PAGE;\n-      }\n-\n-      double iw = pgFmt.getImageableWidth();\n-      double ih = pgFmt.getImageableHeight();\n-      Graphics2D g2d = (Graphics2D)g;\n-      g2d.translate(pgFmt.getImageableX(), pgFmt.getImageableY());\n-      g2d.drawString(\"Name is: \"+theName,20,20 );\n-      return Printable.PAGE_EXISTS;\n+        if (pgIndex > 0) {\n+            return Printable.NO_SUCH_PAGE;\n+        }\n+\n+        Graphics2D g2d = (Graphics2D) g;\n+        g2d.translate(pgFmt.getImageableX(), pgFmt.getImageableY());\n+        g2d.drawString(\"Name is: \" + THE_NAME, 20, 20);\n+        return Printable.PAGE_EXISTS;\n@@ -77,1 +79,0 @@\n-\n@@ -79,115 +80,0 @@\n-\n-\n-class Sysout {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n- }\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/JobName\/PrinterJobName.java","additions":40,"deletions":154,"binary":false,"changes":194,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,10 @@\n-\/**\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n@@ -29,0 +38,2 @@\n+ * @library \/test\/lib \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame jtreg.SkippedException\n@@ -31,4 +42,0 @@\n-\n-import java.awt.*;\n-import java.awt.print.*;\n-\n@@ -37,0 +44,6 @@\n+    private static final String INSTRUCTIONS =\n+            \"You must have a printer available to perform this test\\n\" +\n+            \"This test should print four pages, which are \\n\" +\n+            \"two copies of each page with the text :-\\n\" +\n+            \"'This is page number N', where N is 0 and 1.\\n\" +\n+            \"The pages should be uncollated.\";\n@@ -38,1 +51,1 @@\n-  public static void main(String[] args) {\n+    public static void main(String[] args) throws Exception {\n@@ -40,10 +53,3 @@\n-  String[] instructions =\n-        {\n-         \"You must have a printer available to perform this test\",\n-         \"This test should print a total of four pages which are two\",\n-         \" copies of each of two pages which consist of the text :-\",\n-         \"'This is page number N', where N is 0 and 1.\",\n-         \"The pages should be uncollated.\"\n-       };\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\");\n+        }\n@@ -51,4 +57,9 @@\n-    PrinterJob job = PrinterJob.getPrinterJob();\n-    job.setCopies(2);\n-    job.setPrintable(new NumCopies());\n-    try {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(45)\n+                .build();\n+\n+        PrinterJob job = PrinterJob.getPrinterJob();\n+        job.setCopies(2);\n+        job.setPrintable(new NumCopies());\n@@ -56,0 +67,1 @@\n+        passFailJFrame.awaitAndCheck();\n@@ -57,4 +69,0 @@\n-    catch (Exception exc) {\n-        System.out.println(\"Printer Exception\");\n-    }\n-  }\n@@ -62,2 +70,2 @@\n-  public int print(Graphics g, PageFormat pf, int pageIndex)\n-                   throws PrinterException {\n+    public int print(Graphics g, PageFormat pf, int pageIndex)\n+            throws PrinterException {\n@@ -65,2 +73,7 @@\n-    if (pageIndex > 1) {\n-         return NO_SUCH_PAGE;\n+        if (pageIndex > 1) {\n+            return NO_SUCH_PAGE;\n+        }\n+        g.translate((int) pf.getImageableX(), (int) pf.getImageableY());\n+        g.setColor(Color.black);\n+        g.drawString(\"This is page number \" + pageIndex, 50, 50);\n+        return PAGE_EXISTS;\n@@ -68,6 +81,0 @@\n-    g.translate((int)pf.getImageableX(), (int)pf.getImageableY());\n-    g.setColor(Color.black);\n-    g.drawString(\"This is page number \" + Integer.toString(pageIndex), 50, 50);\n-    return PAGE_EXISTS ;\n-   }\n-\n@@ -75,115 +82,0 @@\n-\n-class Sysout\n- {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n- }\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n- }\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/NumCopies.java","additions":42,"deletions":150,"binary":false,"changes":192,"status":"modified"}]}