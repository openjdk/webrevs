{"files":[{"patch":"@@ -26,6 +26,3 @@\n-\/\/ no precompiled headers\n-\n-#include \"memory\/allocation.inline.hpp\"\n-#include \"runtime\/handles.inline.hpp\"\n-#include \"runtime\/mutexLocker.hpp\"\n-#include \"runtime\/os.hpp\"\n+#include \"precompiled.hpp\"\n+#include \"memory\/allocation.hpp\"\n+#include \"runtime\/mutex.hpp\"\n@@ -33,10 +30,0 @@\n-#include \"runtime\/safepoint.hpp\"\n-#include \"runtime\/vmThread.hpp\"\n-\n-void OSThread::pd_initialize() {\n-  _thread_id        = 0;\n-  _kernel_thread_id = 0;\n-  _siginfo = nullptr;\n-  _ucontext = nullptr;\n-  _expanding_stack = 0;\n-  _alt_sig_stack = nullptr;\n@@ -44,1 +31,1 @@\n-  _last_cpu_times.sys = _last_cpu_times.user = 0L;\n+#include <signal.h>\n@@ -46,0 +33,12 @@\n+OSThread::OSThread()\n+  : _thread_id(0),\n+    _thread_type(),\n+    _kernel_thread_id(0),\n+    _caller_sigmask(),\n+    sr(),\n+    _siginfo(nullptr),\n+    _ucontext(nullptr),\n+    _expanding_stack(0),\n+    _alt_sig_stack(nullptr),\n+    _last_cpu_times(),\n+    _startThread_lock(new Monitor(Mutex::event, \"startThread_lock\")) {\n@@ -47,3 +46,0 @@\n-\n-  _startThread_lock = new Monitor(Mutex::event, \"startThread_lock\");\n-  assert(_startThread_lock != nullptr, \"check\");\n@@ -52,1 +48,1 @@\n-void OSThread::pd_destroy() {\n+OSThread::~OSThread() {\n","filename":"src\/hotspot\/os\/aix\/osThread_aix.cpp","additions":17,"deletions":21,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -29,5 +29,3 @@\n- public:\n-  typedef pthread_t thread_id_t;\n-\n- private:\n-  int _thread_type;\n+#include \"runtime\/osThreadBase.hpp\"\n+#include \"suspendResume_posix.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -35,1 +33,2 @@\n- public:\n+class OSThread : public OSThreadBase {\n+  friend class VMStructs;\n@@ -37,6 +36,1 @@\n-  int thread_type() const {\n-    return _thread_type;\n-  }\n-  void set_thread_type(int type) {\n-    _thread_type = type;\n-  }\n+  typedef pthread_t thread_id_t;\n@@ -44,1 +38,2 @@\n- private:\n+  thread_id_t _thread_id;\n+  int _thread_type;\n@@ -57,0 +52,9 @@\n+  OSThread();\n+  ~OSThread();\n+\n+  int thread_type() const {\n+    return _thread_type;\n+  }\n+  void set_thread_type(int type) {\n+    _thread_type = type;\n+  }\n@@ -62,4 +66,7 @@\n-#ifndef PRODUCT\n-  \/\/ Used for debugging, return a unique integer for each thread.\n-  int thread_identifier() const   { return _thread_id; }\n-#endif\n+  thread_id_t thread_id() const {\n+    return _thread_id;\n+  }\n+  void set_thread_id(thread_id_t id) {\n+    _thread_id = id;\n+  }\n+\n@@ -74,1 +81,1 @@\n-    \/\/ Here: same as OSThread::thread_id()\n+    \/\/ Here: same as thread_id()\n@@ -82,1 +89,0 @@\n- public:\n@@ -128,11 +134,0 @@\n-  \/\/ ***************************************************************\n-  \/\/ Platform dependent initialization and cleanup\n-  \/\/ ***************************************************************\n-\n- private:\n-\n-  void pd_initialize();\n-  void pd_destroy();\n-\n- public:\n-\n@@ -146,0 +141,6 @@\n+  \/\/ Printing\n+  uintx thread_id_for_printing() const override {\n+    return (uintx)_thread_id;\n+  }\n+};\n+\n","filename":"src\/hotspot\/os\/aix\/osThread_aix.hpp","additions":31,"deletions":30,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -32,3 +32,14 @@\n-#define VM_STRUCTS_OS(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field)\n-\n-#define VM_TYPES_OS(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type)\n+#define VM_STRUCTS_OS(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field) \\\n+                                                                                                                                     \\\n+  \/******************************\/                                                                                                   \\\n+  \/* Threads (NOTE: incomplete) *\/                                                                                                   \\\n+  \/******************************\/                                                                                                   \\\n+  nonstatic_field(OSThread,                      _thread_id,                                      pthread_t)                         \\\n+\n+#define VM_TYPES_OS(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type) \\\n+                                                                          \\\n+  \/**********************\/                                                \\\n+  \/* Posix Thread IDs   *\/                                                \\\n+  \/**********************\/                                                \\\n+                                                                          \\\n+  declare_unsigned_integer_type(pthread_t)\n","filename":"src\/hotspot\/os\/aix\/vmStructs_aix.hpp","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -25,3 +25,3 @@\n-\/\/ no precompiled headers\n-#include \"memory\/allocation.inline.hpp\"\n-#include \"runtime\/mutexLocker.hpp\"\n+#include \"precompiled.hpp\"\n+#include \"memory\/allocation.hpp\"\n+#include \"runtime\/mutex.hpp\"\n@@ -32,1 +32,2 @@\n-void OSThread::pd_initialize() {\n+OSThread::OSThread()\n+  : _thread_id(\n@@ -34,1 +35,1 @@\n-  _thread_id        = 0;\n+        0\n@@ -36,1 +37,1 @@\n-  _thread_id        = nullptr;\n+        nullptr\n@@ -38,7 +39,11 @@\n-  _unique_thread_id = 0;\n-  _pthread_id       = nullptr;\n-  _siginfo          = nullptr;\n-  _ucontext         = nullptr;\n-  _expanding_stack  = 0;\n-  _alt_sig_stack    = nullptr;\n-\n+    ),\n+    _thread_type(),\n+    _pthread_id(nullptr),\n+    _unique_thread_id(0),\n+    _caller_sigmask(),\n+    sr(),\n+    _siginfo(nullptr),\n+    _ucontext(nullptr),\n+    _expanding_stack(0),\n+    _alt_sig_stack(nullptr),\n+    _startThread_lock(new Monitor(Mutex::event, \"startThread_lock\")) {\n@@ -46,3 +51,0 @@\n-\n-  _startThread_lock = new Monitor(Mutex::event, \"startThread_lock\");\n-  assert(_startThread_lock !=nullptr, \"check\");\n@@ -67,1 +69,1 @@\n-void OSThread::pd_destroy() {\n+OSThread::~OSThread() {\n","filename":"src\/hotspot\/os\/bsd\/osThread_bsd.cpp","additions":19,"deletions":17,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -28,2 +28,3 @@\n- private:\n-  int _thread_type;\n+#include \"runtime\/osThreadBase.hpp\"\n+#include \"suspendResume_posix.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -31,10 +32,2 @@\n- public:\n-\n-  int thread_type() const {\n-    return _thread_type;\n-  }\n-  void set_thread_type(int type) {\n-    _thread_type = type;\n-  }\n-\n- private:\n+class OSThread : public OSThreadBase {\n+  friend class VMStructs;\n@@ -48,0 +41,3 @@\n+  thread_id_t _thread_id;\n+  int _thread_type;\n+\n@@ -60,0 +56,9 @@\n+  OSThread();\n+  ~OSThread();\n+\n+  int thread_type() const {\n+    return _thread_type;\n+  }\n+  void set_thread_type(int type) {\n+    _thread_type = type;\n+  }\n@@ -65,4 +70,6 @@\n-#ifndef PRODUCT\n-  \/\/ Used for debugging, return a unique integer for each thread.\n-  intptr_t thread_identifier() const   { return (intptr_t)_pthread_id; }\n-#endif\n+  thread_id_t thread_id() const {\n+    return _thread_id;\n+  }\n+  void set_thread_id(thread_id_t id) {\n+    _thread_id = id;\n+  }\n@@ -83,1 +90,0 @@\n-public:\n@@ -129,12 +135,4 @@\n-  \/\/ ***************************************************************\n-  \/\/ Platform dependent initialization and cleanup\n-  \/\/ ***************************************************************\n-\n-private:\n-\n-  void pd_initialize();\n-  void pd_destroy();\n-\n-\/\/ Reconciliation History\n-\/\/ osThread_solaris.hpp 1.24 99\/08\/27 13:11:54\n-\/\/ End\n+  uintx thread_id_for_printing() const override {\n+    return (uintx)_thread_id;\n+  }\n+};\n","filename":"src\/hotspot\/os\/bsd\/osThread_bsd.hpp","additions":27,"deletions":29,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -34,3 +34,15 @@\n-#define VM_STRUCTS_OS(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field)\n-\n-#define VM_TYPES_OS(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type)\n+#define VM_STRUCTS_OS(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field) \\\n+                                                                                                                                     \\\n+  \/******************************\/                                                                                                   \\\n+  \/* Threads (NOTE: incomplete) *\/                                                                                                   \\\n+  \/******************************\/                                                                                                   \\\n+  nonstatic_field(OSThread,                      _thread_id,                                      OSThread::thread_id_t)             \\\n+  nonstatic_field(OSThread,                      _unique_thread_id,                               uint64_t)\n+\n+#define VM_TYPES_OS(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type) \\\n+                                                                          \\\n+  \/**********************\/                                                \\\n+  \/* Thread IDs         *\/                                                \\\n+  \/**********************\/                                                \\\n+                                                                          \\\n+  declare_unsigned_integer_type(OSThread::thread_id_t)\n","filename":"src\/hotspot\/os\/bsd\/vmStructs_bsd.hpp","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -25,2 +25,2 @@\n-\/\/ no precompiled headers\n-#include \"memory\/allocation.inline.hpp\"\n+#include \"precompiled.hpp\"\n+#include \"memory\/allocation.hpp\"\n@@ -32,8 +32,11 @@\n-void OSThread::pd_initialize() {\n-  _thread_id        = 0;\n-  _pthread_id       = 0;\n-  _siginfo = nullptr;\n-  _ucontext = nullptr;\n-  _expanding_stack = 0;\n-  _alt_sig_stack = nullptr;\n-\n+OSThread::OSThread()\n+  : _thread_id(0),\n+    _thread_type(),\n+    _pthread_id(0),\n+    _caller_sigmask(),\n+    sr(),\n+    _siginfo(nullptr),\n+    _ucontext(nullptr),\n+    _expanding_stack(0),\n+    _alt_sig_stack(nullptr),\n+    _startThread_lock(new Monitor(Mutex::event, \"startThread_lock\")) {\n@@ -41,3 +44,0 @@\n-\n-  _startThread_lock = new Monitor(Mutex::event, \"startThread_lock\");\n-  assert(_startThread_lock !=nullptr, \"check\");\n@@ -46,1 +46,1 @@\n-void OSThread::pd_destroy() {\n+OSThread::~OSThread() {\n","filename":"src\/hotspot\/os\/linux\/osThread_linux.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -27,1 +27,8 @@\n- public:\n+\n+#include \"runtime\/osThreadBase.hpp\"\n+#include \"suspendResume_posix.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+class OSThread : public OSThreadBase {\n+  friend class VMStructs;\n+\n@@ -30,1 +37,1 @@\n- private:\n+  thread_id_t _thread_id;\n@@ -33,0 +40,6 @@\n+  \/\/ _pthread_id is the pthread id, which is used by library calls\n+  \/\/ (e.g. pthread_kill).\n+  pthread_t _pthread_id;\n+\n+  sigset_t _caller_sigmask; \/\/ Caller's signal mask\n+\n@@ -34,0 +47,2 @@\n+  OSThread();\n+  ~OSThread();\n@@ -42,8 +57,0 @@\n-  \/\/ _pthread_id is the pthread id, which is used by library calls\n-  \/\/ (e.g. pthread_kill).\n-  pthread_t _pthread_id;\n-\n-  sigset_t _caller_sigmask; \/\/ Caller's signal mask\n-\n- public:\n-\n@@ -54,4 +61,6 @@\n-#ifndef PRODUCT\n-  \/\/ Used for debugging, return a unique integer for each thread.\n-  int thread_identifier() const   { return _thread_id; }\n-#endif\n+  thread_id_t thread_id() const {\n+    return _thread_id;\n+  }\n+  void set_thread_id(thread_id_t id) {\n+    _thread_id = id;\n+  }\n@@ -70,1 +79,0 @@\n-public:\n@@ -116,12 +124,5 @@\n-  \/\/ ***************************************************************\n-  \/\/ Platform dependent initialization and cleanup\n-  \/\/ ***************************************************************\n-\n-private:\n-\n-  void pd_initialize();\n-  void pd_destroy();\n-\n-\/\/ Reconciliation History\n-\/\/ osThread_solaris.hpp 1.24 99\/08\/27 13:11:54\n-\/\/ End\n+  \/\/ Printing\n+  uintx thread_id_for_printing() const override {\n+    return (uintx)_thread_id;\n+  }\n+};\n","filename":"src\/hotspot\/os\/linux\/osThread_linux.hpp","additions":28,"deletions":27,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -820,1 +820,1 @@\n-  osthread->set_thread_id(checked_cast<OSThread::thread_id_t>(os::current_thread_id()));\n+  osthread->set_thread_id(checked_cast<pid_t>(os::current_thread_id()));\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,3 +34,16 @@\n-#define VM_STRUCTS_OS(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field)\n-\n-#define VM_TYPES_OS(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type)\n+#define VM_STRUCTS_OS(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field) \\\n+                                                                                                                                     \\\n+  \/******************************\/                                                                                                   \\\n+  \/* Threads (NOTE: incomplete) *\/                                                                                                   \\\n+  \/******************************\/                                                                                                   \\\n+  nonstatic_field(OSThread,                      _thread_id,                                      pid_t)                             \\\n+  nonstatic_field(OSThread,                      _pthread_id,                                     pthread_t)\n+\n+#define VM_TYPES_OS(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type) \\\n+                                                                          \\\n+  \/**********************\/                                                \\\n+  \/* Posix Thread IDs   *\/                                                \\\n+  \/**********************\/                                                \\\n+                                                                          \\\n+  declare_integer_type(pid_t)                                             \\\n+  declare_unsigned_integer_type(pthread_t)\n","filename":"src\/hotspot\/os\/linux\/vmStructs_linux.hpp","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -25,2 +25,1 @@\n-\/\/ no precompiled headers\n-#include \"runtime\/os.hpp\"\n+#include \"precompiled.hpp\"\n@@ -29,5 +28,6 @@\n-void OSThread::pd_initialize() {\n-  set_thread_handle(nullptr);\n-  set_thread_id(0);\n-  set_interrupt_event(nullptr);\n-}\n+#include <Windows.h>\n+\n+OSThread::OSThread()\n+  : _thread_id(0),\n+    _thread_handle(nullptr),\n+    _interrupt_event(nullptr) {}\n@@ -35,1 +35,1 @@\n-void OSThread::pd_destroy() {\n+OSThread::~OSThread() {\n","filename":"src\/hotspot\/os\/windows\/osThread_windows.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,2 +28,6 @@\n-  typedef void* HANDLE;\n- public:\n+#include \"runtime\/osThreadBase.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+class OSThread : public OSThreadBase {\n+  friend class VMStructs;\n+\n@@ -31,0 +35,3 @@\n+  typedef void* HANDLE;\n+\n+  thread_id_t _thread_id;\n@@ -32,1 +39,0 @@\n- private:\n@@ -39,0 +45,6 @@\n+  OSThread();\n+  ~OSThread();\n+\n+  thread_id_t thread_id() const                    { return _thread_id; }\n+  void set_thread_id(thread_id_t id)               { _thread_id = id; }\n+\n@@ -48,8 +60,4 @@\n-#ifndef PRODUCT\n-  \/\/ Used for debugging, return a unique integer for each thread.\n-  int thread_identifier() const                    { return _thread_id; }\n-#endif\n-\n- private:\n-  void pd_initialize();\n-  void pd_destroy();\n+  uintx thread_id_for_printing() const override {\n+    return (uintx)_thread_id;\n+  }\n+};\n","filename":"src\/hotspot\/os\/windows\/osThread_windows.hpp","additions":19,"deletions":11,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+#include \"runtime\/suspendedThreadTask.hpp\"\n@@ -5968,1 +5969,1 @@\n-                                            OSThread::thread_id_t tid) {\n+                                            DWORD tid) {\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,3 +32,12 @@\n-#define VM_STRUCTS_OS(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field)\n-\n-#define VM_TYPES_OS(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type)\n+#define VM_STRUCTS_OS(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field) \\\n+                                                                                                                                     \\\n+  \/******************************\/                                                                                                   \\\n+  \/* Threads (NOTE: incomplete) *\/                                                                                                   \\\n+  \/******************************\/                                                                                                   \\\n+                                                                                                                                     \\\n+  nonstatic_field(OSThread,                    _thread_id,                                    OSThread::thread_id_t)                 \\\n+  unchecked_nonstatic_field(OSThread,          _thread_handle,                                sizeof(HANDLE)) \/* NOTE: no type *\/\n+\n+#define VM_TYPES_OS(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type) \\\n+                                                                          \\\n+  declare_unsigned_integer_type(OSThread::thread_id_t)\n","filename":"src\/hotspot\/os\/windows\/vmStructs_windows.hpp","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -33,6 +33,1 @@\n-#define VM_STRUCTS_OS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field) \\\n-                                                                                                                                     \\\n-  \/******************************\/                                                                                                   \\\n-  \/* Threads (NOTE: incomplete) *\/                                                                                                   \\\n-  \/******************************\/                                                                                                   \\\n-  nonstatic_field(OSThread,                      _thread_id,                                      pthread_t)                         \\\n+#define VM_STRUCTS_OS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field)\n@@ -40,8 +35,1 @@\n-\n-#define VM_TYPES_OS_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type) \\\n-                                                                          \\\n-  \/**********************\/                                                \\\n-  \/* Posix Thread IDs   *\/                                                \\\n-  \/**********************\/                                                \\\n-                                                                          \\\n-  declare_unsigned_integer_type(pthread_t)\n+#define VM_TYPES_OS_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type)\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/vmStructs_aix_ppc.hpp","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -34,7 +34,1 @@\n-#define VM_STRUCTS_OS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field) \\\n-                                                                                                                                     \\\n-  \/******************************\/                                                                                                   \\\n-  \/* Threads (NOTE: incomplete) *\/                                                                                                   \\\n-  \/******************************\/                                                                                                   \\\n-  nonstatic_field(OSThread,                      _thread_id,                                      OSThread::thread_id_t)             \\\n-  nonstatic_field(OSThread,                      _unique_thread_id,                               uint64_t)\n+#define VM_STRUCTS_OS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field)\n@@ -42,8 +36,1 @@\n-\n-#define VM_TYPES_OS_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type) \\\n-                                                                          \\\n-  \/**********************\/                                                \\\n-  \/* Thread IDs         *\/                                                \\\n-  \/**********************\/                                                \\\n-                                                                          \\\n-  declare_unsigned_integer_type(OSThread::thread_id_t)\n+#define VM_TYPES_OS_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type)\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/vmStructs_bsd_aarch64.hpp","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -32,7 +32,1 @@\n-#define VM_STRUCTS_OS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field) \\\n-                                                                                                                                     \\\n-  \/******************************\/                                                                                                   \\\n-  \/* Threads (NOTE: incomplete) *\/                                                                                                   \\\n-  \/******************************\/                                                                                                   \\\n-  nonstatic_field(OSThread,                      _thread_id,                                      OSThread::thread_id_t)             \\\n-  nonstatic_field(OSThread,                      _unique_thread_id,                               uint64_t)\n+#define VM_STRUCTS_OS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field)\n@@ -40,8 +34,1 @@\n-\n-#define VM_TYPES_OS_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type) \\\n-                                                                          \\\n-  \/**********************\/                                                \\\n-  \/* Thread IDs         *\/                                                \\\n-  \/**********************\/                                                \\\n-                                                                          \\\n-  declare_unsigned_integer_type(OSThread::thread_id_t)\n+#define VM_TYPES_OS_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type)\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/vmStructs_bsd_x86.hpp","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -33,7 +33,1 @@\n-#define VM_STRUCTS_OS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field) \\\n-                                                                                                                                     \\\n-  \/******************************\/                                                                                                   \\\n-  \/* Threads (NOTE: incomplete) *\/                                                                                                   \\\n-  \/******************************\/                                                                                                   \\\n-  nonstatic_field(OSThread,                      _thread_id,                                      OSThread::thread_id_t)             \\\n-  nonstatic_field(OSThread,                      _pthread_id,                                     pthread_t)\n+#define VM_STRUCTS_OS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field)\n@@ -41,9 +35,1 @@\n-\n-#define VM_TYPES_OS_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type) \\\n-                                                                          \\\n-  \/**********************\/                                                \\\n-  \/* Posix Thread IDs   *\/                                                \\\n-  \/**********************\/                                                \\\n-                                                                          \\\n-  declare_integer_type(OSThread::thread_id_t)                             \\\n-  declare_unsigned_integer_type(pthread_t)\n+#define VM_TYPES_OS_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type)\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/vmStructs_linux_aarch64.hpp","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -32,7 +32,1 @@\n-#define VM_STRUCTS_OS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field) \\\n-                                                                                                                                     \\\n-  \/******************************\/                                                                                                   \\\n-  \/* Threads (NOTE: incomplete) *\/                                                                                                   \\\n-  \/******************************\/                                                                                                   \\\n-  nonstatic_field(OSThread,                      _thread_id,                                      OSThread::thread_id_t)             \\\n-  nonstatic_field(OSThread,                      _pthread_id,                                     pthread_t)\n+#define VM_STRUCTS_OS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field)\n@@ -40,8 +34,1 @@\n-#define VM_TYPES_OS_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type) \\\n-                                                                          \\\n-  \/**********************\/                                                \\\n-  \/* Posix Thread IDs   *\/                                                \\\n-  \/**********************\/                                                \\\n-                                                                          \\\n-  declare_integer_type(OSThread::thread_id_t)                             \\\n-  declare_unsigned_integer_type(pthread_t)\n+#define VM_TYPES_OS_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type)\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/vmStructs_linux_arm.hpp","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -33,7 +33,1 @@\n-#define VM_STRUCTS_OS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field) \\\n-                                                                                                                                     \\\n-  \/******************************\/                                                                                                   \\\n-  \/* Threads (NOTE: incomplete) *\/                                                                                                   \\\n-  \/******************************\/                                                                                                   \\\n-  nonstatic_field(OSThread,                      _thread_id,                                      pid_t)                             \\\n-  nonstatic_field(OSThread,                      _pthread_id,                                     pthread_t)\n+#define VM_STRUCTS_OS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field)\n@@ -41,9 +35,1 @@\n-\n-#define VM_TYPES_OS_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type) \\\n-                                                                          \\\n-  \/**********************\/                                                \\\n-  \/* Posix Thread IDs   *\/                                                \\\n-  \/**********************\/                                                \\\n-                                                                          \\\n-  declare_integer_type(pid_t)                                             \\\n-  declare_unsigned_integer_type(pthread_t)\n+#define VM_TYPES_OS_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type)\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/vmStructs_linux_ppc.hpp","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -33,7 +33,1 @@\n-#define VM_STRUCTS_OS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field) \\\n-                                                                                                                                     \\\n-  \/******************************\/                                                                                                   \\\n-  \/* Threads (NOTE: incomplete) *\/                                                                                                   \\\n-  \/******************************\/                                                                                                   \\\n-  nonstatic_field(OSThread,                      _thread_id,                                      OSThread::thread_id_t)             \\\n-  nonstatic_field(OSThread,                      _pthread_id,                                     pthread_t)\n+#define VM_STRUCTS_OS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field)\n@@ -41,9 +35,1 @@\n-\n-#define VM_TYPES_OS_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type) \\\n-                                                                          \\\n-  \/**********************\/                                                \\\n-  \/* Posix Thread IDs   *\/                                                \\\n-  \/**********************\/                                                \\\n-                                                                          \\\n-  declare_integer_type(OSThread::thread_id_t)                             \\\n-  declare_unsigned_integer_type(pthread_t)\n+#define VM_TYPES_OS_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type)\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/vmStructs_linux_riscv.hpp","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -33,7 +33,1 @@\n-#define VM_STRUCTS_OS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field) \\\n-                                                                                                                                     \\\n-  \/******************************\/                                                                                                   \\\n-  \/* Threads (NOTE: incomplete) *\/                                                                                                   \\\n-  \/******************************\/                                                                                                   \\\n-  nonstatic_field(OSThread,                      _thread_id,                                      pid_t)                             \\\n-  nonstatic_field(OSThread,                      _pthread_id,                                     pthread_t)\n+#define VM_STRUCTS_OS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field)\n@@ -41,9 +35,1 @@\n-\n-#define VM_TYPES_OS_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type) \\\n-                                                                          \\\n-  \/**********************\/                                                \\\n-  \/* Posix Thread IDs   *\/                                                \\\n-  \/**********************\/                                                \\\n-                                                                          \\\n-  declare_integer_type(pid_t)                                             \\\n-  declare_unsigned_integer_type(pthread_t)\n+#define VM_TYPES_OS_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type)\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/vmStructs_linux_s390.hpp","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -32,7 +32,1 @@\n-#define VM_STRUCTS_OS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field) \\\n-                                                                                                                                     \\\n-  \/******************************\/                                                                                                   \\\n-  \/* Threads (NOTE: incomplete) *\/                                                                                                   \\\n-  \/******************************\/                                                                                                   \\\n-  nonstatic_field(OSThread,                      _thread_id,                                      OSThread::thread_id_t)             \\\n-  nonstatic_field(OSThread,                      _pthread_id,                                     pthread_t)\n+#define VM_STRUCTS_OS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field)\n@@ -40,9 +34,1 @@\n-\n-#define VM_TYPES_OS_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type) \\\n-                                                                          \\\n-  \/**********************\/                                                \\\n-  \/* Posix Thread IDs   *\/                                                \\\n-  \/**********************\/                                                \\\n-                                                                          \\\n-  declare_integer_type(OSThread::thread_id_t)                             \\\n-  declare_unsigned_integer_type(pthread_t)\n+#define VM_TYPES_OS_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type)\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/vmStructs_linux_x86.hpp","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -32,8 +32,1 @@\n-#define VM_STRUCTS_OS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field) \\\n-                                                                                                                                     \\\n-  \/******************************\/                                                                                                   \\\n-  \/* Threads (NOTE: incomplete) *\/                                                                                                   \\\n-  \/******************************\/                                                                                                   \\\n-                                                                                                                                     \\\n-  nonstatic_field(OSThread,                    _thread_id,                                    OSThread::thread_id_t)                 \\\n-  unchecked_nonstatic_field(OSThread,          _thread_handle,                                sizeof(HANDLE)) \/* NOTE: no type *\/\n+#define VM_STRUCTS_OS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field)\n@@ -41,3 +34,1 @@\n-#define VM_TYPES_OS_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type) \\\n-                                                                          \\\n-  declare_unsigned_integer_type(OSThread::thread_id_t)\n+#define VM_TYPES_OS_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type)\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/vmStructs_windows_aarch64.hpp","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,8 +32,1 @@\n-#define VM_STRUCTS_OS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field) \\\n-                                                                                                                                     \\\n-  \/******************************\/                                                                                                   \\\n-  \/* Threads (NOTE: incomplete) *\/                                                                                                   \\\n-  \/******************************\/                                                                                                   \\\n-                                                                                                                                     \\\n-  nonstatic_field(OSThread,                    _thread_id,                                    OSThread::thread_id_t)                 \\\n-  unchecked_nonstatic_field(OSThread,          _thread_handle,                                sizeof(HANDLE)) \/* NOTE: no type *\/\n+#define VM_STRUCTS_OS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field)\n@@ -41,3 +34,1 @@\n-#define VM_TYPES_OS_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type) \\\n-                                                                          \\\n-  declare_unsigned_integer_type(OSThread::thread_id_t)\n+#define VM_TYPES_OS_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type)\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/vmStructs_windows_x86.hpp","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-      st->print(\"[%ld] \", (long) Thread::current()->osthread()->thread_id());\n+      st->print(\"[\" UINTX_FORMAT \"] \", Thread::current()->osthread()->thread_id_for_printing());\n@@ -131,1 +131,1 @@\n-      st->print(\"[%ld] \", (long) Thread::current()->osthread()->thread_id());\n+      st->print(\"[\" UINTX_FORMAT  \"] \", Thread::current()->osthread()->thread_id_for_printing());\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeTracer.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"runtime\/objectMonitor.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"oops\/oop.inline.hpp\"\n-#include \"runtime\/osThread.hpp\"\n-\n-OSThread::OSThread() {\n-  pd_initialize();\n-}\n-\n-OSThread::~OSThread() {\n-  pd_destroy();\n-}\n-\n-\/\/ Printing\n-void OSThread::print_on(outputStream *st) const {\n-  st->print(\"nid=\" UINT64_FORMAT \" \", (uint64_t)thread_id());\n-  switch (_state) {\n-    case ALLOCATED:               st->print(\"allocated \");                 break;\n-    case INITIALIZED:             st->print(\"initialized \");               break;\n-    case RUNNABLE:                st->print(\"runnable \");                  break;\n-    case MONITOR_WAIT:            st->print(\"waiting for monitor entry \"); break;\n-    case CONDVAR_WAIT:            st->print(\"waiting on condition \");      break;\n-    case OBJECT_WAIT:             st->print(\"in Object.wait() \");          break;\n-    case BREAKPOINTED:            st->print(\"at breakpoint\");               break;\n-    case SLEEPING:                st->print(\"sleeping\");                    break;\n-    case ZOMBIE:                  st->print(\"zombie\");                      break;\n-    default:                      st->print(\"unknown state %d\", _state); break;\n-  }\n-}\n-\n-void OSThread::print() const { print_on(tty); }\n","filename":"src\/hotspot\/share\/runtime\/osThread.cpp","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -28,5 +28,0 @@\n-#include \"runtime\/frame.hpp\"\n-#include \"runtime\/handles.hpp\"\n-#include \"runtime\/javaFrameAnchor.hpp\"\n-#include \"runtime\/objectMonitor.hpp\"\n-#include \"runtime\/suspendedThreadTask.hpp\"\n@@ -34,50 +29,1 @@\n-\n-#if defined(LINUX) || defined(AIX) || defined(BSD)\n-#include \"suspendResume_posix.hpp\"\n-#endif\n-\n-class Monitor;\n-\n-\/\/ The OSThread class holds OS-specific thread information.  It is equivalent\n-\/\/ to the sys_thread_t structure of the classic JVM implementation.\n-\n-\/\/ The thread states represented by the ThreadState values are platform-specific\n-\/\/ and are likely to be only approximate, because most OSes don't give you access\n-\/\/ to precise thread state information.\n-\n-\/\/ Note: the ThreadState is legacy code and is not correctly implemented.\n-\/\/ Uses of ThreadState need to be replaced by the state in the JavaThread.\n-\n-enum ThreadState {\n-  ALLOCATED,                    \/\/ Memory has been allocated but not initialized\n-  INITIALIZED,                  \/\/ The thread has been initialized but yet started\n-  RUNNABLE,                     \/\/ Has been started and is runnable, but not necessarily running\n-  MONITOR_WAIT,                 \/\/ Waiting on a contended monitor lock\n-  CONDVAR_WAIT,                 \/\/ Waiting on a condition variable\n-  OBJECT_WAIT,                  \/\/ Waiting on an Object.wait() call\n-  BREAKPOINTED,                 \/\/ Suspended at breakpoint\n-  SLEEPING,                     \/\/ Thread.sleep()\n-  ZOMBIE                        \/\/ All done, but not reclaimed yet\n-};\n-\n-typedef int (*OSThreadStartFunc)(void*);\n-\n-class OSThread: public CHeapObj<mtThread> {\n-  friend class VMStructs;\n-  friend class JVMCIVMStructs;\n- private:\n-  volatile ThreadState _state;    \/\/ Thread state *hint*\n-\n-  \/\/ Methods\n- public:\n-  void set_state(ThreadState state)                { _state = state; }\n-  ThreadState get_state()                          { return _state; }\n-\n-  OSThread();\n-  ~OSThread();\n-\n-  \/\/ Printing\n-  void print_on(outputStream* st) const;\n-  void print() const;\n-\n-  \/\/ Platform dependent stuff\n+\/\/ The actual class declaration is platform specific.\n@@ -86,49 +32,0 @@\n- public:\n-\n-  thread_id_t thread_id() const                   { return _thread_id; }\n-\n-  void set_thread_id(thread_id_t id)              { _thread_id = id; }\n-\n- private:\n-  \/\/ _thread_id is kernel thread id (similar to LWP id on Solaris). Each\n-  \/\/ thread has a unique thread_id (BsdThreads or NPTL). It can be used\n-  \/\/ to access \/proc.\n-  thread_id_t _thread_id;\n-};\n-\n-\n-\/\/ Utility class for use with condition variables:\n-class OSThreadWaitState : public StackObj {\n-  OSThread*   _osthread;\n-  ThreadState _old_state;\n- public:\n-  OSThreadWaitState(OSThread* osthread, bool is_object_wait) {\n-    _osthread  = osthread;\n-    _old_state = osthread->get_state();\n-    if (is_object_wait) {\n-      osthread->set_state(OBJECT_WAIT);\n-    } else {\n-      osthread->set_state(CONDVAR_WAIT);\n-    }\n-  }\n-  ~OSThreadWaitState() {\n-    _osthread->set_state(_old_state);\n-  }\n-};\n-\n-\n-\/\/ Utility class for use with contended monitors:\n-class OSThreadContendState : public StackObj {\n-  OSThread*   _osthread;\n-  ThreadState _old_state;\n- public:\n-  OSThreadContendState(OSThread* osthread) {\n-    _osthread  = osthread;\n-    _old_state = osthread->get_state();\n-    osthread->set_state(MONITOR_WAIT);\n-  }\n-  ~OSThreadContendState() {\n-    _osthread->set_state(_old_state);\n-  }\n-};\n-\n","filename":"src\/hotspot\/share\/runtime\/osThread.hpp","additions":1,"deletions":104,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"oops\/oop.inline.hpp\"\n+#include \"runtime\/osThreadBase.hpp\"\n+\n+\/\/ Printing\n+void OSThreadBase::print_on(outputStream *st) const {\n+  st->print(\"nid=\" UINTX_FORMAT \" \", thread_id_for_printing());\n+  switch (_state) {\n+    case ALLOCATED:               st->print(\"allocated \");                 break;\n+    case INITIALIZED:             st->print(\"initialized \");               break;\n+    case RUNNABLE:                st->print(\"runnable \");                  break;\n+    case MONITOR_WAIT:            st->print(\"waiting for monitor entry \"); break;\n+    case CONDVAR_WAIT:            st->print(\"waiting on condition \");      break;\n+    case OBJECT_WAIT:             st->print(\"in Object.wait() \");          break;\n+    case BREAKPOINTED:            st->print(\"at breakpoint\");               break;\n+    case SLEEPING:                st->print(\"sleeping\");                    break;\n+    case ZOMBIE:                  st->print(\"zombie\");                      break;\n+    default:                      st->print(\"unknown state %d\", _state); break;\n+  }\n+}\n+\n+void OSThreadBase::print() const { print_on(tty); }\n","filename":"src\/hotspot\/share\/runtime\/osThreadBase.cpp","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_RUNTIME_OSTHREAD_BASE_HPP\n+#define SHARE_RUNTIME_OSTHREAD_BASE_HPP\n+\n+#include \"memory\/allocation.hpp\"\n+\n+class Monitor;\n+\n+\/\/ The OSThread class holds OS-specific thread information.  It is equivalent\n+\/\/ to the sys_thread_t structure of the classic JVM implementation.\n+\n+\/\/ The thread states represented by the ThreadState values are platform-specific\n+\/\/ and are likely to be only approximate, because most OSes don't give you access\n+\/\/ to precise thread state information.\n+\n+\/\/ Note: the ThreadState is legacy code and is not correctly implemented.\n+\/\/ Uses of ThreadState need to be replaced by the state in the JavaThread.\n+\n+enum ThreadState {\n+  ALLOCATED,                    \/\/ Memory has been allocated but not initialized\n+  INITIALIZED,                  \/\/ The thread has been initialized but yet started\n+  RUNNABLE,                     \/\/ Has been started and is runnable, but not necessarily running\n+  MONITOR_WAIT,                 \/\/ Waiting on a contended monitor lock\n+  CONDVAR_WAIT,                 \/\/ Waiting on a condition variable\n+  OBJECT_WAIT,                  \/\/ Waiting on an Object.wait() call\n+  BREAKPOINTED,                 \/\/ Suspended at breakpoint\n+  SLEEPING,                     \/\/ Thread.sleep()\n+  ZOMBIE                        \/\/ All done, but not reclaimed yet\n+};\n+\n+typedef int (*OSThreadStartFunc)(void*);\n+\n+class OSThreadBase: public CHeapObj<mtThread> {\n+  friend class VMStructs;\n+  friend class JVMCIVMStructs;\n+ private:\n+  volatile ThreadState _state;    \/\/ Thread state *hint*\n+\n+  \/\/ Methods\n+ public:\n+  OSThreadBase() {}\n+  virtual ~OSThreadBase() {}\n+  NONCOPYABLE(OSThreadBase);\n+\n+  void set_state(ThreadState state)                { _state = state; }\n+  ThreadState get_state()                          { return _state; }\n+\n+\n+  virtual uintx thread_id_for_printing() const = 0;\n+\n+  \/\/ Printing\n+  void print_on(outputStream* st) const;\n+  void print() const;\n+};\n+\n+\n+\/\/ Utility class for use with condition variables:\n+class OSThreadWaitState : public StackObj {\n+  OSThreadBase* _osthread;\n+  ThreadState _old_state;\n+ public:\n+  OSThreadWaitState(OSThreadBase* osthread, bool is_object_wait) {\n+    _osthread  = osthread;\n+    _old_state = osthread->get_state();\n+    if (is_object_wait) {\n+      osthread->set_state(OBJECT_WAIT);\n+    } else {\n+      osthread->set_state(CONDVAR_WAIT);\n+    }\n+  }\n+  ~OSThreadWaitState() {\n+    _osthread->set_state(_old_state);\n+  }\n+};\n+\n+\n+\/\/ Utility class for use with contended monitors:\n+class OSThreadContendState : public StackObj {\n+  OSThreadBase* _osthread;\n+  ThreadState _old_state;\n+ public:\n+  OSThreadContendState(OSThreadBase* osthread) {\n+    _osthread  = osthread;\n+    _old_state = osthread->get_state();\n+    osthread->set_state(MONITOR_WAIT);\n+  }\n+  ~OSThreadContendState() {\n+    _osthread->set_state(_old_state);\n+  }\n+};\n+\n+#endif \/\/ SHARE_RUNTIME_OSTHREAD_BASE_HPP\n","filename":"src\/hotspot\/share\/runtime\/osThreadBase.hpp","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"}]}