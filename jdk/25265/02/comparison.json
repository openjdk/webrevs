{"files":[{"patch":"@@ -53,1 +53,0 @@\n-import java.io.InputStreamReader;\n@@ -257,1 +256,1 @@\n-    private Integer getGnomeShellMajorVersion() {\n+    public Integer getGnomeShellMajorVersion() {\n@@ -262,3 +261,1 @@\n-            try (InputStreamReader isr = new InputStreamReader(process.getInputStream());\n-                 BufferedReader reader = new BufferedReader(isr)) {\n-\n+            try (BufferedReader reader = process.inputReader()) {\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/UNIXToolkit.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+import sun.awt.screencast.XdgDesktopPortal;\n@@ -42,3 +43,0 @@\n-    private static final String screenshotMethod;\n-    private static final String METHOD_X11 = \"x11\";\n-    private static final String METHOD_SCREENCAST = \"dbusScreencast\";\n@@ -52,13 +50,0 @@\n-\n-        boolean isOnWayland = false;\n-\n-        if (Toolkit.getDefaultToolkit() instanceof SunToolkit sunToolkit) {\n-            isOnWayland = sunToolkit.isRunningOnWayland();\n-        }\n-\n-        screenshotMethod = System.getProperty(\n-                        \"awt.robot.screenshotMethod\",\n-                        isOnWayland\n-                            ? METHOD_SCREENCAST\n-                            : METHOD_X11\n-                );\n@@ -89,0 +74,5 @@\n+        if (XdgDesktopPortal.isRemoteDesktop() && ScreencastHelper.isAvailable()) {\n+            \/\/ We still call mouseMoveImpl on purpose to change the mouse position\n+            \/\/ within the XWayland server so that we can retrieve it later.\n+            ScreencastHelper.remoteDesktopMouseMove(xgc.scaleUp(x), xgc.scaleUp(y));\n+        }\n@@ -93,1 +83,5 @@\n-        mousePressImpl(buttons);\n+        if (XdgDesktopPortal.isRemoteDesktop() && ScreencastHelper.isAvailable()) {\n+            ScreencastHelper.remoteDesktopMouseButton(true, buttons);\n+        } else {\n+            mousePressImpl(buttons);\n+        }\n@@ -98,1 +92,5 @@\n-        mouseReleaseImpl(buttons);\n+        if (XdgDesktopPortal.isRemoteDesktop() && ScreencastHelper.isAvailable()) {\n+            ScreencastHelper.remoteDesktopMouseButton(false, buttons);\n+        } else {\n+            mouseReleaseImpl(buttons);\n+        }\n@@ -103,1 +101,5 @@\n-        mouseWheelImpl(wheelAmt);\n+        if (XdgDesktopPortal.isRemoteDesktop() && ScreencastHelper.isAvailable()) {\n+            ScreencastHelper.remoteDesktopMouseWheel(wheelAmt);\n+        } else {\n+            mouseWheelImpl(wheelAmt);\n+        }\n@@ -108,1 +110,5 @@\n-        keyPressImpl(keycode);\n+        if (XdgDesktopPortal.isRemoteDesktop() && ScreencastHelper.isAvailable()) {\n+            ScreencastHelper.remoteDesktopKey(true, keycode);\n+        } else {\n+            keyPressImpl(keycode);\n+        }\n@@ -113,1 +119,5 @@\n-        keyReleaseImpl(keycode);\n+        if (XdgDesktopPortal.isRemoteDesktop() && ScreencastHelper.isAvailable()) {\n+            ScreencastHelper.remoteDesktopKey(false, keycode);\n+        } else {\n+            keyReleaseImpl(keycode);\n+        }\n@@ -119,3 +129,2 @@\n-        if (screenshotMethod.equals(METHOD_SCREENCAST)\n-            && ScreencastHelper.isAvailable()) {\n-\n+        if ((XdgDesktopPortal.isScreencast()\n+                || XdgDesktopPortal.isRemoteDesktop()) && ScreencastHelper.isAvailable()) {\n@@ -132,2 +141,2 @@\n-        if (screenshotMethod.equals(METHOD_SCREENCAST)\n-            && ScreencastHelper.isAvailable()) {\n+        if ((XdgDesktopPortal.isScreencast()\n+                || XdgDesktopPortal.isRemoteDesktop()) && ScreencastHelper.isAvailable()) {\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XRobotPeer.java","additions":36,"deletions":27,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -141,0 +141,2 @@\n+import sun.awt.screencast.ScreencastHelper;\n+import sun.awt.screencast.XdgDesktopPortal;\n@@ -1524,9 +1526,2 @@\n-                numberOfButtons = getNumberOfButtonsImpl();\n-                numberOfButtons = (numberOfButtons > MAX_BUTTONS_SUPPORTED)? MAX_BUTTONS_SUPPORTED : numberOfButtons;\n-                \/\/4th and 5th buttons are for wheel and shouldn't be reported as buttons.\n-                \/\/If we have more than 3 physical buttons and a wheel, we report N-2 buttons.\n-                \/\/If we have 3 physical buttons and a wheel, we report 3 buttons.\n-                \/\/If we have 1,2,3 physical buttons, we report it as is i.e. 1,2 or 3 respectively.\n-                if (numberOfButtons >=5) {\n-                    numberOfButtons -= 2;\n-                } else if (numberOfButtons == 4 || numberOfButtons ==5){\n+                if (XdgDesktopPortal.isRemoteDesktop()\n+                        && ScreencastHelper.isAvailable()) {\n@@ -1534,0 +1529,12 @@\n+                } else {\n+                    numberOfButtons = getNumberOfButtonsImpl();\n+                    numberOfButtons = (numberOfButtons > MAX_BUTTONS_SUPPORTED) ? MAX_BUTTONS_SUPPORTED : numberOfButtons;\n+                    \/\/4th and 5th buttons are for wheel and shouldn't be reported as buttons.\n+                    \/\/If we have more than 3 physical buttons and a wheel, we report N-2 buttons.\n+                    \/\/If we have 3 physical buttons and a wheel, we report 3 buttons.\n+                    \/\/If we have 1,2,3 physical buttons, we report it as is i.e. 1,2 or 3 respectively.\n+                    if (numberOfButtons >= 5) {\n+                        numberOfButtons -= 2;\n+                    } else if (numberOfButtons == 4 || numberOfButtons == 5) {\n+                        numberOfButtons = 3;\n+                    }\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XToolkit.java","additions":17,"deletions":10,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+import java.util.function.Function;\n@@ -54,1 +55,0 @@\n-\n@@ -58,0 +58,4 @@\n+    private static final int NO_STREAMS = -13;\n+\n+    private static final int XDG_METHOD_SCREENCAST = 0;\n+    private static final int XDG_METHOD_REMOTE_DESKTOP = 1;\n@@ -66,2 +70,1 @@\n-    private ScreencastHelper() {\n-    }\n+    private ScreencastHelper() {}\n@@ -74,0 +77,7 @@\n+        boolean shouldLoadNative = XdgDesktopPortal.isRemoteDesktop()\n+                || XdgDesktopPortal.isScreencast();\n+\n+        int methodId = XdgDesktopPortal.isScreencast()\n+                ? XDG_METHOD_SCREENCAST\n+                : XDG_METHOD_REMOTE_DESKTOP;\n+\n@@ -76,1 +86,1 @@\n-              || !loadPipewire(SCREENCAST_DEBUG)) {\n+              || !(shouldLoadNative && loadPipewire(methodId, SCREENCAST_DEBUG))) {\n@@ -92,1 +102,1 @@\n-    private static native boolean loadPipewire(boolean screencastDebug);\n+    private static native boolean loadPipewire(int method, boolean isDebug);\n@@ -189,1 +199,1 @@\n-            } else if (!checkReturnValue(retVal)) {\n+            } else if (!checkReturnValue(retVal, true)) {\n@@ -203,1 +213,1 @@\n-        checkReturnValue(retVal);\n+        checkReturnValue(retVal, true);\n@@ -206,1 +216,2 @@\n-    private static boolean checkReturnValue(int retVal) {\n+    private static boolean checkReturnValue(int retVal,\n+                                            boolean throwException) {\n@@ -208,4 +219,9 @@\n-            \/\/ user explicitly denied the capture, no more tries.\n-            throw new SecurityException(\n-                    \"Screen Capture in the selected area was not allowed\"\n-            );\n+            if (SCREENCAST_DEBUG) {\n+                System.err.println(\"robot action: access denied by user.\");\n+            }\n+            if (throwException) {\n+                \/\/ user explicitly denied the capture, no more tries.\n+                throw new SecurityException(\n+                        \"Screen Capture in the selected area was not allowed\"\n+                );\n+            }\n@@ -214,1 +230,1 @@\n-                System.err.println(\"Screen capture failed.\");\n+                System.err.println(\"robot action: failed.\");\n@@ -221,0 +237,4 @@\n+        } else if (retVal == NO_STREAMS) {\n+            if (SCREENCAST_DEBUG) {\n+                System.err.println(\"robot action: no streams available\");\n+            }\n@@ -224,0 +244,37 @@\n+\n+    private static void performWithToken(Function<String, Integer> func) {\n+        if (!XdgDesktopPortal.isRemoteDesktop() || !IS_NATIVE_LOADED) return;\n+\n+        timerCloseSessionRestart();\n+\n+        for (TokenItem tokenItem : TokenStorage.getTokens(getSystemScreensBounds())) {\n+            int retVal = func.apply(tokenItem.token);\n+\n+            if (retVal >= 0 || !checkReturnValue(retVal, false)) {\n+                return;\n+            }\n+        }\n+\n+        checkReturnValue(func.apply(null), false);\n+    }\n+\n+    public static synchronized void remoteDesktopMouseMove(int x, int y) {\n+        performWithToken((token) -> remoteDesktopMouseMoveImpl(x, y, token));\n+    }\n+\n+    public static synchronized void remoteDesktopMouseButton(boolean isPress, int buttons) {\n+        performWithToken((token) -> remoteDesktopMouseButtonImpl(isPress, buttons, token));\n+    }\n+\n+    public static synchronized void remoteDesktopMouseWheel(int wheel) {\n+        performWithToken((token) -> remoteDesktopMouseWheelImpl(wheel, token));\n+    }\n+\n+    public static synchronized void remoteDesktopKey(boolean isPress, int key) {\n+        performWithToken((token) -> remoteDesktopKeyImpl(isPress, key, token));\n+    }\n+\n+    private static synchronized native int remoteDesktopMouseMoveImpl(int x, int y, String token);\n+    private static synchronized native int remoteDesktopMouseButtonImpl(boolean isPress, int buttons, String token);\n+    private static synchronized native int remoteDesktopMouseWheelImpl(int wheelAmt, String token);\n+    private static synchronized native int remoteDesktopKeyImpl(boolean isPress, int key, String token);\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/screencast\/ScreencastHelper.java","additions":71,"deletions":14,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,0 +70,3 @@\n+    private static final String REL_RD_NAME =\n+            \".java\/robot\/remote-desktop-tokens.properties\";\n+\n@@ -75,3 +78,1 @@\n-        Path propsPath = setupPath();\n-\n-        PROPS_PATH = propsPath;\n+        PROPS_PATH = setupPath();\n@@ -98,2 +99,9 @@\n-        Path path = Path.of(userHome, REL_NAME);\n-        Path secondaryPath = Path.of(userHome, REL_NAME_SECONDARY);\n+        Path path;\n+        Path secondaryPath = null;\n+\n+        if (XdgDesktopPortal.isRemoteDesktop()) {\n+            path = Path.of(userHome, REL_RD_NAME);\n+        } else {\n+            path = Path.of(userHome, REL_NAME);\n+            secondaryPath = Path.of(userHome, REL_NAME_SECONDARY);\n+        }\n@@ -102,1 +110,1 @@\n-                && Files.isWritable(secondaryPath);\n+                && secondaryPath != null && Files.isWritable(secondaryPath);\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/screencast\/TokenStorage.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.awt.screencast;\n+\n+import sun.awt.SunToolkit;\n+import sun.awt.UNIXToolkit;\n+\n+import java.awt.Toolkit;\n+\n+public class XdgDesktopPortal {\n+    private static final String METHOD_X11 = \"x11\";\n+    private static final String METHOD_SCREENCAST = \"dbusScreencast\";\n+    private static final String METHOD_REMOTE_DESKTOP = \"dbusRemoteDesktop\";\n+\n+    private static final String method;\n+    private static final boolean isRemoteDesktop;\n+    private static final boolean isScreencast;\n+\n+    private XdgDesktopPortal() {}\n+\n+    static {\n+        boolean isOnWayland = false;\n+\n+        if (Toolkit.getDefaultToolkit() instanceof SunToolkit sunToolkit) {\n+            isOnWayland = sunToolkit.isRunningOnWayland();\n+        }\n+\n+        String defaultMethod = METHOD_X11;\n+        if (isOnWayland) {\n+            Integer gnomeShellVersion = null;\n+\n+            UNIXToolkit toolkit = (UNIXToolkit) Toolkit.getDefaultToolkit();\n+            if (\"gnome\".equals(toolkit.getDesktop())) {\n+                gnomeShellVersion = toolkit.getGnomeShellMajorVersion();\n+            }\n+\n+            defaultMethod = (gnomeShellVersion != null && gnomeShellVersion >= 47)\n+                    ? METHOD_REMOTE_DESKTOP\n+                    : METHOD_SCREENCAST;\n+        }\n+\n+        String m = System.getProperty(\"awt.robot.screenshotMethod\", defaultMethod);\n+\n+        if (!METHOD_REMOTE_DESKTOP.equals(m)\n+                && !METHOD_SCREENCAST.equals(m)\n+                && !METHOD_X11.equals(m)) {\n+            m = defaultMethod;\n+        }\n+\n+        isRemoteDesktop = METHOD_REMOTE_DESKTOP.equals(m);\n+        isScreencast = METHOD_SCREENCAST.equals(m);\n+        method = m;\n+\n+    }\n+\n+    public static String getMethod() {\n+        return method;\n+    }\n+\n+    public static boolean isRemoteDesktop() {\n+        return isRemoteDesktop;\n+    }\n+\n+    public static boolean isScreencast() {\n+        return isScreencast;\n+    }\n+}\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/screencast\/XdgDesktopPortal.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -620,0 +620,1 @@\n+            \/\/ those function are called only by Screencast \/ Remote desktop\n@@ -623,0 +624,1 @@\n+            fp_g_variant_print = dl_symbol(\"g_variant_print\"); \/\/ since 2.24\n@@ -625,0 +627,1 @@\n+        fp_g_strconcat = dl_symbol(\"g_strconcat\");\n@@ -3105,0 +3108,1 @@\n+    gtk->g_variant_print = fp_g_variant_print;\n@@ -3129,0 +3133,1 @@\n+    gtk->g_strconcat = fp_g_strconcat;\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/gtk3_interface.c","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -402,0 +402,1 @@\n+static gchar* (*fp_g_strconcat)(const gchar* string1, ...);\n@@ -741,0 +742,2 @@\n+static gchar *(*fp_g_variant_print) (GVariant* value, gboolean type_annotate);\n+\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/gtk3_interface.h","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -681,0 +681,1 @@\n+    gchar *(*g_variant_print)(GVariant* value, gboolean type_annotate);\n@@ -737,0 +738,2 @@\n+    gchar* (*g_strconcat)(const gchar* string1, ...);\n+\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/gtk_interface.h","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -97,0 +97,1 @@\n+#include \"canvas.h\"\n@@ -111,0 +112,1 @@\n+gboolean isRemoteDesktop = FALSE;\n@@ -201,1 +203,1 @@\n-static gboolean initScreencast(const gchar *token,\n+static gboolean initPortal(const gchar *token,\n@@ -228,2 +230,2 @@\n-        || (pw.pwFd = getPipewireFd(token,\n-                                    affectedBounds,\n+        || !initAndStartSession(token, &pw.pwFd)\n+        || (pw.pwFd = getPipewireFd(affectedBounds,\n@@ -861,1 +863,1 @@\n-        JNIEnv *env, jclass cls, jboolean screencastDebug\n+        JNIEnv *env, jclass cls, jint method, jboolean screencastDebug\n@@ -865,0 +867,9 @@\n+    if (method != XDG_METHOD_SCREENCAST\n+        && method != XDG_METHOD_REMOTE_DESKTOP) {\n+        return JNI_FALSE;\n+    }\n+\n+    isRemoteDesktop = method == XDG_METHOD_REMOTE_DESKTOP;\n+\n+    DEBUG_SCREENCAST(\"method %d\\n\", method)\n+\n@@ -937,1 +948,1 @@\n-    if (!initScreencast(token, affectedScreenBounds, affectedBoundsLength)) {\n+    if (!initPortal(token, affectedScreenBounds, affectedBoundsLength)) {\n@@ -1100,0 +1111,121 @@\n+\n+\/*\n+ * Class:     sun_awt_screencast_ScreencastHelper\n+ * Method:    remoteDesktopMouseMove\n+ * Signature: (IILjava\/lang\/String;)I\n+ *\/\n+JNIEXPORT jint JNICALL Java_sun_awt_screencast_ScreencastHelper_remoteDesktopMouseMoveImpl\n+        (JNIEnv *env, jclass cls, jint jx, jint jy, jstring jtoken) {\n+\n+\n+    const gchar *token = jtoken\n+                         ? (*env)->GetStringUTFChars(env, jtoken, NULL)\n+                         : NULL;\n+\n+\n+    DEBUG_SCREENCAST(\"moving mouse to\\n\\t%d %d\\n\\twith token |%s|\\n\", jx, jy, token);\n+\n+    gboolean result = initPortal(token, NULL, 0);\n+    DEBUG_SCREENCAST(\"init result %b, moving to %d %d\\n\", result, jx, jy)\n+\n+    if (result) {\n+        if (!remoteDesktopMouseMove(jx, jy)) {\n+            releaseToken(env, jtoken, token);\n+            return RESULT_DENIED;\n+        }\n+    }\n+\n+    releaseToken(env, jtoken, token);\n+\n+    return result ? RESULT_OK : pw.pwFd;\n+}\n+\n+\/*\n+ * Class:     sun_awt_screencast_ScreencastHelper\n+ * Method:    remoteDesktopMouseButtonImpl\n+ * Signature: (ZILjava\/lang\/String;)I\n+ *\/\n+JNIEXPORT jint JNICALL Java_sun_awt_screencast_ScreencastHelper_remoteDesktopMouseButtonImpl\n+        (JNIEnv *env, jclass cls, jboolean isPress, jint buttons, jstring jtoken) {\n+\n+    const gchar *token = jtoken\n+                         ? (*env)->GetStringUTFChars(env, jtoken, NULL)\n+                         : NULL;\n+\n+    gboolean result = initPortal(token, NULL, 0);\n+    DEBUG_SCREENCAST(\"init result %b, mouse pressing %d\\n\", result, buttons)\n+\n+    if (result) {\n+        if (!remoteDesktopMouse(isPress, buttons)) {\n+            releaseToken(env, jtoken, token);\n+            return RESULT_DENIED;\n+        }\n+    }\n+\n+    releaseToken(env, jtoken, token);\n+\n+    return result ? RESULT_OK : pw.pwFd;\n+}\n+\n+\/*\n+ * Class:     sun_awt_screencast_ScreencastHelper\n+ * Method:    remoteDesktopMouseWheelImpl\n+ * Signature: (ILjava\/lang\/String;)I\n+ *\/\n+JNIEXPORT jint JNICALL Java_sun_awt_screencast_ScreencastHelper_remoteDesktopMouseWheelImpl\n+        (JNIEnv *env, jclass cls, jint jWheelAmt, jstring jtoken) {\n+\n+    const gchar *token = jtoken\n+                         ? (*env)->GetStringUTFChars(env, jtoken, NULL)\n+                         : NULL;\n+\n+    gboolean result = initPortal(token, NULL, 0);\n+    DEBUG_SCREENCAST(\"init result %b, mouse wheel %d\\n\", result, jWheelAmt)\n+\n+    if (result) {\n+        if (!remoteDesktopMouseWheel(jWheelAmt)) {\n+            releaseToken(env, jtoken, token);\n+            return RESULT_DENIED;\n+        }\n+    }\n+\n+    releaseToken(env, jtoken, token);\n+\n+    return result ? RESULT_OK : pw.pwFd;\n+}\n+\n+\/*\n+ * Class:     sun_awt_screencast_ScreencastHelper\n+ * Method:    remoteDesktopKeyImpl\n+ * Signature: (ZILjava\/lang\/String;)I\n+ *\/\n+JNIEXPORT jint JNICALL Java_sun_awt_screencast_ScreencastHelper_remoteDesktopKeyImpl\n+        (JNIEnv *env, jclass cls, jboolean isPress, jint jkey, jstring jtoken) {\n+\n+    AWT_LOCK();\n+    int key = awt_getX11KeySym(jkey);\n+    AWT_UNLOCK();\n+\n+    if (key == NoSymbol) {\n+        return RESULT_ERROR;\n+    }\n+\n+    const gchar *token = jtoken\n+                         ? (*env)->GetStringUTFChars(env, jtoken, NULL)\n+                         : NULL;\n+\n+    gboolean result = initPortal(token, NULL, 0);\n+    DEBUG_SCREENCAST(\"init result %b, key %d -> %d isPress %b\\n\", result, jkey, key, isPress)\n+\n+    if (result) {\n+        if (!remoteDesktopKey(isPress, key)) {\n+            releaseToken(env, jtoken, token);\n+            return RESULT_DENIED;\n+        }\n+    }\n+\n+    releaseToken(env, jtoken, token);\n+\n+    return result ? RESULT_OK : pw.pwFd;\n+}\n+\n@@ -1102,2 +1234,1 @@\n-Java_sun_awt_screencast_ScreencastHelper_closeSession(JNIEnv *env, jclass cls) {\n-}\n+Java_sun_awt_screencast_ScreencastHelper_closeSession(JNIEnv *env, jclass cls) {}\n@@ -1120,1 +1251,1 @@\n-        JNIEnv *env, jclass cls, jboolean screencastDebug\n+        JNIEnv *env, jclass cls, jint method, jboolean screencastDebug\n@@ -1124,0 +1255,20 @@\n+\n+JNIEXPORT jint JNICALL Java_sun_awt_screencast_ScreencastHelper_remoteDesktopMouseMoveImpl\n+        (JNIEnv *env, jclass cls, jint jx, jint jy, jstring token) {\n+    return -1;\n+}\n+\n+JNIEXPORT jint JNICALL Java_sun_awt_screencast_ScreencastHelper_remoteDesktopMouseButtonImpl\n+        (JNIEnv *env, jclass cls, jboolean isPress, jint buttons, jstring jtoken) {\n+    return -1;\n+}\n+\n+JNIEXPORT jint JNICALL Java_sun_awt_screencast_ScreencastHelper_remoteDesktopMouseWheelImpl\n+        (JNIEnv *env, jclass cls, jint jWheelAmt, jstring jtoken) {\n+    return -1;\n+}\n+\n+JNIEXPORT jint JNICALL Java_sun_awt_screencast_ScreencastHelper_remoteDesktopKeyImpl\n+        (JNIEnv *env, jclass cls, jboolean isPress, jint jkey, jstring jtoken) {\n+    return -1;\n+}\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/screencast_pipewire.c","additions":159,"deletions":8,"binary":false,"changes":167,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,2 @@\n+void print_gvariant_content(gchar *caption, GVariant *response);\n+\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/screencast_pipewire.h","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,0 @@\n-#include <sys\/stat.h>\n-#include <fcntl.h>\n@@ -30,2 +28,2 @@\n-#include <pwd.h>\n-#include <unistd.h>\n+\n+#include \"java_awt_event_InputEvent.h\"\n@@ -39,0 +37,1 @@\n+extern gboolean isRemoteDesktop;\n@@ -43,0 +42,5 @@\n+extern int DEBUG_SCREENCAST_ENABLED;\n+\n+GDBusProxy *getProxy() {\n+    return isRemoteDesktop ? portal->remoteDesktopProxy : portal->screenCastProxy;\n+}\n@@ -173,2 +177,3 @@\n- * Checks screencast protocol version\n- * @return FALSE if version < 4, or could not be determined\n+ * Checks the version of the Screencast\/Remote Desktop protocol\n+ * to determine whether it supports the restore_token.\n+ * @return FALSE if version is below required, or could not be determined\n@@ -178,0 +183,5 @@\n+\n+    const gchar *interface = isRemoteDesktop\n+            ? PORTAL_IFACE_REMOTE_DESKTOP\n+            : PORTAL_IFACE_SCREENCAST;\n+\n@@ -180,0 +190,1 @@\n+\n@@ -181,1 +192,1 @@\n-                portal->screenCastProxy,\n+                getProxy(),\n@@ -184,1 +195,1 @@\n-                                   \"org.freedesktop.portal.ScreenCast\",\n+                                   interface,\n@@ -190,0 +201,6 @@\n+        if (isRemoteDesktop) {\n+            print_gvariant_content(\"checkVersion Remote Desktop\", retVersion);\n+        } else {\n+            print_gvariant_content(\"checkVersion ScreenCast\", retVersion);\n+        }\n+\n@@ -191,2 +208,1 @@\n-            DEBUG_SCREENCAST(\"!!! could not detect the screencast version\\n\",\n-                             NULL);\n+            DEBUG_SCREENCAST(\"!!! could not detect the %s version\\n\", interface);\n@@ -203,2 +219,1 @@\n-            DEBUG_SCREENCAST(\"!!! could not get the screencast version\\n\",\n-                             NULL);\n+            DEBUG_SCREENCAST(\"!!! could not get the %s version\\n\", interface);\n@@ -215,3 +230,6 @@\n-    DEBUG_SCREENCAST(\"ScreenCast protocol version %d\\n\", version);\n-    if (version < 4) {\n-        DEBUG_SCREENCAST(\"!!! ScreenCast protocol version %d < 4,\"\n+    gboolean isVersionOk = isRemoteDesktop\n+            ? version >= PORTAL_MIN_VERSION_REMOTE_DESKTOP\n+            : version >= PORTAL_MIN_VERSION_SCREENCAST;\n+\n+    if (!isVersionOk) {\n+        DEBUG_SCREENCAST(\"!!! %s protocol version %d < %d,\"\n@@ -219,1 +237,6 @@\n-                         version);\n+                         interface,\n+                         version,\n+                         isRemoteDesktop\n+                             ? PORTAL_MIN_VERSION_REMOTE_DESKTOP\n+                             : PORTAL_MIN_VERSION_SCREENCAST\n+                         );\n@@ -222,3 +245,1 @@\n-    \/\/ restore_token was added in version 4, without it,\n-    \/\/ user confirmation is required for every screenshot.\n-    return version >= 4;\n+    return isVersionOk;\n@@ -269,3 +290,3 @@\n-            \"org.freedesktop.portal.Desktop\",\n-            \"\/org\/freedesktop\/portal\/desktop\",\n-            \"org.freedesktop.portal.ScreenCast\",\n+            PORTAL_DESKTOP_BUS_NAME,\n+            PORTAL_DESKTOP_OBJECT_PATH,\n+            PORTAL_IFACE_SCREENCAST,\n@@ -280,0 +301,23 @@\n+    } else {\n+        DEBUG_SCREENCAST(\"%s: connection\/sender name %s \/ %s\\n\",\n+                         \"ScreenCast\", name,\n+                         portal->senderName);\n+    }\n+\n+    if (isRemoteDesktop) {\n+        portal->remoteDesktopProxy = gtk->g_dbus_proxy_new_sync(\n+                portal->connection,\n+                G_DBUS_PROXY_FLAGS_NONE,\n+                NULL,\n+                PORTAL_DESKTOP_BUS_NAME,\n+                PORTAL_DESKTOP_OBJECT_PATH,\n+                PORTAL_IFACE_REMOTE_DESKTOP,\n+                NULL,\n+                &err\n+        );\n+\n+        if (err) {\n+            DEBUG_SCREENCAST(\"Failed to get Remote Desktop portal: %s\", err->message);\n+            ERR_HANDLE(err);\n+            return FALSE;\n+        }\n@@ -340,2 +384,2 @@\n-            \"org.freedesktop.portal.Desktop\",\n-            \"org.freedesktop.portal.Request\",\n+            PORTAL_DESKTOP_BUS_NAME,\n+            PORTAL_IFACE_REQUEST,\n@@ -386,1 +430,2 @@\n-        gtk->g_variant_lookup(result, \"session_handle\", \"s\", helper->data);\n+        gboolean returned = gtk->g_variant_lookup(result, \"session_handle\", \"s\", helper->data);\n+        DEBUG_SCREENCAST(\"session_handle returned %b %p\\n\", returned, helper->data)\n@@ -433,0 +478,3 @@\n+\n+    DEBUG_SCREENCAST(\"sessionToken %s \\n\", sessionToken)\n+\n@@ -440,0 +488,6 @@\n+    DEBUG_SCREENCAST(\"portalScreenCastCreateSession: proxy %s %p (rd: %p \/ sc: %p)\\n\",\n+                     isRemoteDesktop ? \"remoteDesktop\" : \"screencast\",\n+                     getProxy(),\n+                     portal->remoteDesktopProxy,\n+                     portal->screenCastProxy);\n+\n@@ -441,1 +495,1 @@\n-            portal->screenCastProxy,\n+            getProxy(),\n@@ -450,0 +504,2 @@\n+    print_gvariant_content(\"CreateSession\", response);\n+\n@@ -458,0 +514,2 @@\n+    DEBUG_SCREENCAST(\"portal->screenCastSessionHandle %s\\n\", portal->screenCastSessionHandle);\n+\n@@ -503,0 +561,33 @@\n+static void callbackRemoteDesktopSelectDevices(\n+        GDBusConnection *connection,\n+        const char *senderName,\n+        const char *objectPath,\n+        const char *interfaceName,\n+        const char *signalName,\n+        GVariant *parameters,\n+        void *data\n+) {\n+    struct DBusCallbackHelper *helper = data;\n+\n+    helper->data = (void *) 0;\n+\n+    uint32_t status;\n+    GVariant* result = NULL;\n+\n+    gtk->g_variant_get(parameters, \"(u@a{sv})\", &status, &result);\n+\n+    if (status != 0) {\n+        DEBUG_SCREENCAST(\"Failed select devices: %u\\n\", status);\n+    } else {\n+        helper->data = (void *) 1;\n+    }\n+\n+    helper->isDone = TRUE;\n+\n+    if (result) {\n+        gtk->g_variant_unref(result);\n+    }\n+\n+    callbackEnd();\n+}\n+\n@@ -548,0 +639,3 @@\n+    \/\/ In the case of Remote Desktop,\n+    \/\/ we add the restore_token and persist_mode to the SelectDevices call.\n+\n@@ -551,8 +645,1 @@\n-    gtk->g_variant_builder_add(\n-            &builder,\n-            \"{sv}\",\n-            \"persist_mode\",\n-            gtk->g_variant_new_uint32(2)\n-    );\n-\n-    if (validateToken(token)) {\n+    if (!isRemoteDesktop) {\n@@ -562,2 +649,2 @@\n-                \"restore_token\",\n-                gtk->g_variant_new_string(token)\n+                \"persist_mode\",\n+                gtk->g_variant_new_uint32(2)\n@@ -567,0 +654,12 @@\n+    if (!isRemoteDesktop) {\n+        if (validateToken(token)) {\n+            DEBUG_SCREENCAST(\">>> adding token %s\\n\", token);\n+            gtk->g_variant_builder_add(\n+                    &builder,\n+                    \"{sv}\",\n+                    \"restore_token\",\n+                    gtk->g_variant_new_string(token)\n+            );\n+        }\n+    }\n+\n@@ -577,0 +676,2 @@\n+    print_gvariant_content(\"SelectSources\", response);\n+\n@@ -627,0 +728,9 @@\n+    print_gvariant_content(\"Streams\", streams);\n+\n+    if (!streams) {\n+        DEBUG_SCREENCAST(\"No streams available with current token\\n\",  NULL);\n+        startHelper->result = RESULT_NO_STREAMS;\n+        helper->isDone = TRUE;\n+        return;\n+    }\n+\n@@ -664,3 +774,1 @@\n-    if (streams) {\n-        gtk->g_variant_unref(streams);\n-    }\n+    gtk->g_variant_unref(streams);\n@@ -709,1 +817,1 @@\n-            portal->screenCastProxy,\n+            getProxy(),\n@@ -718,0 +826,2 @@\n+    print_gvariant_content(\"Start\", response);\n+\n@@ -811,1 +921,1 @@\n-                \"org.freedesktop.portal.Desktop\",\n+                PORTAL_DESKTOP_BUS_NAME,\n@@ -813,1 +923,1 @@\n-                \"org.freedesktop.portal.Session\",\n+                PORTAL_IFACE_SESSION,\n@@ -892,0 +1002,98 @@\n+gboolean remoteDesktopSelectDevicesIfNeeded(const gchar* token) {\n+    if (!isRemoteDesktop || !portal->remoteDesktopProxy) {\n+        DEBUG_SCREENCAST(\"Skipping, remote desktop is not selected \\n\", NULL);\n+        return TRUE;\n+    }\n+\n+    GError* err = NULL;\n+\n+    gchar *requestPath = NULL;\n+    gchar *requestToken = NULL;\n+\n+    struct DBusCallbackHelper helper = {0};\n+\n+\n+    updateRequestPath(\n+            &requestPath,\n+            &requestToken\n+    );\n+\n+    registerScreenCastCallback(\n+            requestPath,\n+            &helper,\n+            callbackRemoteDesktopSelectDevices\n+    );\n+\n+    GVariantBuilder builder;\n+\n+    gtk->g_variant_builder_init(\n+            &builder,\n+            G_VARIANT_TYPE_VARDICT\n+    );\n+\n+    gtk->g_variant_builder_add(\n+            &builder,\n+            \"{sv}\", \"handle_token\",\n+            gtk->g_variant_new_string(requestToken)\n+    );\n+\n+    \/\/ 1: KEYBOARD\n+    \/\/ 2: POINTER\n+    \/\/ 4: TOUCHSCREEN\n+    gtk->g_variant_builder_add(\n+            &builder, \"{sv}\", \"types\",\n+            gtk->g_variant_new_uint32(1 | 2)\n+    );\n+\n+    \/\/ 0: Do not persist (default)\n+    \/\/ 1: Permissions persist as long as the application is running\n+    \/\/ 2: Permissions persist until explicitly revoked\n+    gtk->g_variant_builder_add(\n+            &builder,\n+            \"{sv}\",\n+            \"persist_mode\",\n+            gtk->g_variant_new_uint32(2)\n+    );\n+\n+    if (validateToken(token)) {\n+        gtk->g_variant_builder_add(\n+                &builder,\n+                \"{sv}\",\n+                \"restore_token\",\n+                gtk->g_variant_new_string(token)\n+        );\n+    }\n+\n+    GVariant *response = gtk->g_dbus_proxy_call_sync(\n+            portal->remoteDesktopProxy,\n+            \"SelectDevices\",\n+            gtk->g_variant_new(\"(oa{sv})\", portal->screenCastSessionHandle, &builder),\n+            G_DBUS_CALL_FLAGS_NONE,\n+            -1,\n+            NULL,\n+            &err\n+    );\n+\n+    print_gvariant_content(\"SelectDevices\", response);\n+\n+    if (err) {\n+        DEBUG_SCREENCAST(\"Failed to call SelectDevices: %s\\n\", err->message);\n+        ERR_HANDLE(err);\n+    } else {\n+        waitForCallback(&helper);\n+    }\n+\n+    unregisterScreenCastCallback(&helper);\n+    if (response) {\n+        gtk->g_variant_unref(response);\n+    }\n+\n+    free(requestPath);\n+    free(requestToken);\n+\n+    return helper.data != NULL;\n+}\n+\n+gboolean initAndStartSession(const gchar *token, int *retVal) {\n+\n+    *retVal = RESULT_ERROR;\n@@ -893,3 +1101,0 @@\n-int getPipewireFd(const gchar *token,\n-                  GdkRectangle *affectedBounds,\n-                  gint affectedBoundsLength) {\n@@ -898,1 +1103,1 @@\n-        return RESULT_ERROR;\n+        return FALSE;\n@@ -903,1 +1108,5 @@\n-        return RESULT_ERROR;\n+        return FALSE;\n+    }\n+\n+    if (!remoteDesktopSelectDevicesIfNeeded(token)) {\n+        return FALSE;\n@@ -908,0 +1117,1 @@\n+\n@@ -909,10 +1119,17 @@\n-        DEBUG_SCREENCAST(\"Failed to start\\n\", NULL);\n-        return startResult;\n-    } else {\n-        if (!checkCanCaptureAllRequiredScreens(affectedBounds,\n-                                               affectedBoundsLength)) {\n-            DEBUG_SCREENCAST(\"The location of the screens has changed, \"\n-                             \"the capture area is outside the allowed \"\n-                             \"area.\\n\", NULL)\n-            return RESULT_OUT_OF_BOUNDS;\n-        }\n+        DEBUG_SCREENCAST(\"Failed to start %d\\n\", startResult);\n+        *retVal = startResult;\n+        return FALSE;\n+    }\n+\n+    *retVal = RESULT_OK;\n+    return TRUE;\n+}\n+\n+int getPipewireFd(GdkRectangle *affectedBounds,\n+                  gint affectedBoundsLength) {\n+    if (!checkCanCaptureAllRequiredScreens(affectedBounds,\n+                                           affectedBoundsLength)) {\n+        DEBUG_SCREENCAST(\"The location of the screens has changed, \"\n+                         \"the capture area is outside the allowed \"\n+                         \"area.\\n\", NULL)\n+        return RESULT_OUT_OF_BOUNDS;\n@@ -931,0 +1148,178 @@\n+\n+\n+void print_gvariant_content(gchar *caption, GVariant *response) {\n+    if (!DEBUG_SCREENCAST_ENABLED) {\n+        return;\n+    }\n+\n+    gchar *str = NULL;\n+    if (response != NULL) {\n+        str = gtk->g_variant_print(response, TRUE);\n+    }\n+\n+    DEBUG_SCREENCAST(\"%s response:\\n\\t%s\\n\",\n+                     caption, str);\n+\n+    gtk->g_free(str);\n+}\n+\n+static gboolean callRemoteDesktop(const gchar* methodName, GVariant *params) {\n+    GError *err = NULL;\n+    GVariantBuilder builder;\n+    gtk->g_variant_builder_init (&builder, G_VARIANT_TYPE_VARDICT);\n+\n+    GVariant *response = gtk->g_dbus_proxy_call_sync(\n+            portal->remoteDesktopProxy,\n+            methodName,\n+            params,\n+            G_DBUS_CALL_FLAGS_NONE,\n+            -1,\n+            NULL,\n+            &err\n+    );\n+\n+    gchar * caption = gtk->g_strconcat(\"callRemoteDesktop \", methodName, NULL);\n+    print_gvariant_content(caption, response);\n+    gtk->g_free(caption);\n+\n+    DEBUG_SCREENCAST(\"%s: response %p err %p\\n\", methodName, response, err);\n+\n+    if (err) {\n+        DEBUG_SCREENCAST(\"Failed to call %s: %s\\n\", methodName, err->message);\n+        ERR_HANDLE(err);\n+\n+        \/\/ e.g. user denied mouse keyboard\/interaction\n+        return FALSE;\n+    }\n+\n+    return TRUE;\n+}\n+\n+void clampCoordsIfNeeded(int *x, int *y) {\n+    if (screenSpace.screenCount <= 0 || x == NULL || y == NULL) {\n+        return;\n+    }\n+\n+    GdkRectangle s0 = screenSpace.screens[0].bounds;\n+    int minX = s0.x;\n+    int minY = s0.y;\n+    int maxX = s0.x + s0.width;\n+    int maxY = s0.y + s0.height;\n+\n+    for (int i = 1; i < screenSpace.screenCount; ++i) {\n+        GdkRectangle s = screenSpace.screens[i].bounds;\n+        if (s.x < minX) minX = s.x;\n+        if (s.y < minY) minY = s.y;\n+        if (s.x + s.width > maxX) maxX = s.x + s.width;\n+        if (s.y + s.height > maxY) maxY = s.y + s.height;\n+    }\n+\n+    if (*x < minX) {\n+        *x = minX;\n+    } else if (*x > maxX) {\n+        *x = maxX - 1;\n+    }\n+\n+    if (*y < minY) {\n+        *y = minY;\n+    } else if (*y > maxY) {\n+        *y = maxY - 1;\n+    }\n+}\n+\n+gboolean remoteDesktopMouseMove(int x, int y) {\n+    guint32 streamId = 0;\n+    int relX = -1;\n+    int relY = -1;\n+\n+    DEBUG_SCREENCAST(\"mouseMove %d %d\\n\", x, y);\n+    clampCoordsIfNeeded(&x, &y);\n+    DEBUG_SCREENCAST(\"after clamping %d %d\\n\", x, y);\n+\n+    for (int i = 0; i < screenSpace.screenCount; ++i) {\n+        struct ScreenProps *screenProps = &screenSpace.screens[i];\n+        GdkRectangle rect = screenProps->bounds;\n+\n+        if (x >= rect.x &&\n+             y >= rect.y &&\n+             x <  rect.x + rect.width &&\n+             y <  rect.y + rect.height) {\n+            streamId = screenProps->id;\n+            relX = x - rect.x;\n+            relY = y - rect.y;\n+\n+            DEBUG_SCREENCAST(\"screenId#%i point %dx%d (rel %i %i) inside of screen (%d, %d, %d, %d)\\n\",\n+                             streamId,\n+                             x, y, relX, relY,\n+                             rect.x, rect.y, rect.width, rect.height);\n+\n+            break;\n+        }\n+    }\n+\n+    if (streamId == 0) {\n+        DEBUG_SCREENCAST(\"outside of available screens\\n\", NULL);\n+        return TRUE;\n+    }\n+\n+    GVariantBuilder builder;\n+    gtk->g_variant_builder_init (&builder, G_VARIANT_TYPE_VARDICT);\n+    GVariant *params = gtk->g_variant_new(\"(oa{sv}udd)\", portal->screenCastSessionHandle, &builder,\n+                                          streamId, (double) relX, (double) relY);\n+    return callRemoteDesktop(\"NotifyPointerMotionAbsolute\", params);\n+}\n+\n+gboolean callRemoteDesktopNotifyPointerButton(gboolean isPress, int evdevButton) {\n+    DEBUG_SCREENCAST(\"isPress %d evdevButton %d\\n\", isPress, evdevButton);\n+\n+    GVariantBuilder builder;\n+    gtk->g_variant_builder_init(&builder, G_VARIANT_TYPE_VARDICT);\n+    GVariant *params = gtk->g_variant_new(\"(oa{sv}iu)\",\n+                                          portal->screenCastSessionHandle, &builder, evdevButton, isPress);\n+    return callRemoteDesktop(\"NotifyPointerButton\", params);\n+}\n+\n+gboolean remoteDesktopMouse(gboolean isPress, int buttons) {\n+    DEBUG_SCREENCAST(\"isPress %d awt buttons mask %d\\n\", isPress, buttons);\n+\n+    if (buttons & java_awt_event_InputEvent_BUTTON1_MASK\n+        || buttons & java_awt_event_InputEvent_BUTTON1_DOWN_MASK) {\n+        if (!callRemoteDesktopNotifyPointerButton(isPress, 0x110)) { \/\/ BTN_LEFT\n+            return FALSE;\n+        }\n+    }\n+    if (buttons & java_awt_event_InputEvent_BUTTON2_MASK\n+        || buttons & java_awt_event_InputEvent_BUTTON2_DOWN_MASK) {\n+        if (!callRemoteDesktopNotifyPointerButton(isPress, 0x112)) { \/\/ BTN_MIDDLE\n+            return FALSE;\n+        }\n+\n+    }\n+    if (buttons & java_awt_event_InputEvent_BUTTON3_MASK\n+        || buttons & java_awt_event_InputEvent_BUTTON3_DOWN_MASK) {\n+        if (!callRemoteDesktopNotifyPointerButton(isPress, 0x111)) { \/\/ BTN_RIGHT\n+            return FALSE;\n+        }\n+    }\n+\n+    return TRUE;\n+}\n+\n+gboolean remoteDesktopMouseWheel(int wheelAmt) {\n+    DEBUG_SCREENCAST(\"MouseWheel %d\\n\", wheelAmt);\n+\n+    GVariantBuilder builder;\n+    gtk->g_variant_builder_init(&builder, G_VARIANT_TYPE_VARDICT);\n+    GVariant *params = gtk->g_variant_new(\"(oa{sv}ui)\", portal->screenCastSessionHandle, &builder, 0, wheelAmt);\n+    return callRemoteDesktop(\"NotifyPointerAxisDiscrete\", params);\n+}\n+\n+gboolean remoteDesktopKey(gboolean isPress, int key) {\n+    DEBUG_SCREENCAST(\"Key%s key %d -> \\n\", isPress ? \"Press\" : \"Release\", key);\n+\n+    GVariantBuilder builder;\n+    gtk->g_variant_builder_init(&builder, G_VARIANT_TYPE_VARDICT);\n+    GVariant *params = gtk->g_variant_new (\"(oa{sv}iu)\", portal->screenCastSessionHandle, &builder, key, isPress);\n+    return callRemoteDesktop(\"NotifyKeyboardKeysym\", params);\n+}\n+\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/screencast_portal.c","additions":453,"deletions":58,"binary":false,"changes":511,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,11 @@\n+#define PORTAL_DESKTOP_BUS_NAME \"org.freedesktop.portal.Desktop\"\n+#define PORTAL_DESKTOP_OBJECT_PATH \"\/org\/freedesktop\/portal\/desktop\"\n+\n+#define PORTAL_IFACE_REQUEST \"org.freedesktop.portal.Request\"\n+#define PORTAL_IFACE_SESSION \"org.freedesktop.portal.Session\"\n+#define PORTAL_IFACE_SCREENCAST \"org.freedesktop.portal.ScreenCast\"\n+#define PORTAL_IFACE_REMOTE_DESKTOP \"org.freedesktop.portal.RemoteDesktop\"\n+\n+#define PORTAL_MIN_VERSION_SCREENCAST 4\n+#define PORTAL_MIN_VERSION_REMOTE_DESKTOP 2\n+\n@@ -41,3 +52,2 @@\n-int getPipewireFd(const gchar *token,\n-                  GdkRectangle *affectedBounds,\n-                  gint affectedBoundsLength);\n+gboolean initAndStartSession(const gchar *token, int *retVal);\n+int getPipewireFd(GdkRectangle *affectedBounds, gint affectedBoundsLength);\n@@ -51,0 +61,5 @@\n+gboolean remoteDesktopMouseMove(int x, int y);\n+gboolean remoteDesktopMouseWheel(int wheelAmt);\n+gboolean remoteDesktopMouse(gboolean isPress, int buttons);\n+gboolean remoteDesktopKey(gboolean isPress, int key);\n+\n@@ -53,0 +68,1 @@\n+    GDBusProxy *remoteDesktopProxy;\n@@ -69,0 +85,1 @@\n+    RESULT_NO_STREAMS = -13,\n@@ -71,0 +88,6 @@\n+typedef enum {\n+    XDG_METHOD_SCREENCAST = 0,\n+    XDG_METHOD_REMOTE_DESKTOP = 1,\n+} XdgPortalMethod;\n+\n+\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/screencast_portal.h","additions":27,"deletions":4,"binary":false,"changes":31,"status":"modified"}]}