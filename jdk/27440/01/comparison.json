{"files":[{"patch":"@@ -25,1 +25,1 @@\n- * @bug 8154364 8365626 8366254\n+ * @bug 8154364 8365626 8366254 8368156\n@@ -28,1 +28,0 @@\n- * @build IsSameFile jdk.test.lib.util.FileUtils\n@@ -45,2 +44,0 @@\n-import jdk.test.lib.util.FileUtils;\n-\n@@ -67,1 +64,0 @@\n-    private List<Path> allFiles;\n@@ -73,1 +69,2 @@\n-        home = Files.createTempDirectory(\"TestIsSameFile\");\n+        Path cwd = Path.of(System.getProperty(\"user.dir\"));\n+        home = Files.createTempDirectory(cwd, IsSameFile.class.getSimpleName());\n@@ -75,5 +72,4 @@\n-        allFiles = new ArrayList();\n-        allFiles.add(a = home.resolve(\"a\"));\n-        allFiles.add(aa = home.resolve(\"a\"));\n-        allFiles.add(b = home.resolve(\"b\"));\n-        allFiles.add(c = home.resolve(\"c\"));\n+        a = home.resolve(\"a\");\n+        aa = home.resolve(\"a\");\n+        b = home.resolve(\"b\");\n+        c = home.resolve(\"c\");\n@@ -89,1 +85,1 @@\n-        for (Path p : allFiles)\n+        for (Path p : Files.list(home).toList())\n@@ -152,1 +148,2 @@\n-    private Stream<Arguments> obj2ZipSource() throws IOException {\n+    @Test\n+    public void obj2Zip() throws IOException {\n@@ -156,11 +153,3 @@\n-        FileSystem zipfs = FileSystems.newFileSystem(b);\n-        List<Arguments> list = new ArrayList<Arguments>();\n-        list.add(Arguments.of(false, a, zipfs.getPath(b.toString())));\n-        return list.stream();\n-    }\n-\n-    @ParameterizedTest\n-    @MethodSource(\"obj2ZipSource\")\n-    public void obj2Zip(boolean expect, Path x, Path y)\n-        throws IOException {\n-        test(expect, x, y);\n+        try (FileSystem zipfs = FileSystems.newFileSystem(b)) {\n+            test(false, a, zipfs.getPath(b.toString()));\n+        }\n@@ -260,1 +249,0 @@\n-        allFiles.add(target);\n@@ -262,1 +250,1 @@\n-        Path L2 = Path.of(\"link2\");\n+        Path L2 = home.resolve(\"link2\");\n@@ -264,1 +252,0 @@\n-        allFiles.add(L2);\n@@ -266,1 +253,1 @@\n-        Path L1 = Path.of(\"link1\");\n+        Path L1 = home.resolve(\"link1\");\n@@ -268,1 +255,0 @@\n-        allFiles.add(L1);\n@@ -270,1 +256,1 @@\n-        Path L4 = Path.of(\"link4\");\n+        Path L4 = home.resolve(\"link4\");\n@@ -272,1 +258,0 @@\n-        allFiles.add(L4);\n@@ -274,1 +259,1 @@\n-        Path L3 = Path.of(\"link3\");\n+        Path L3 = home.resolve(\"link3\");\n@@ -276,1 +261,0 @@\n-        allFiles.add(L3);\n@@ -299,1 +283,0 @@\n-        allFiles.add(target);\n@@ -301,1 +284,1 @@\n-        Path L2 = Path.of(\"link2\");\n+        Path L2 = home.resolve(\"link2\");\n@@ -303,1 +286,0 @@\n-        allFiles.add(L2);\n@@ -305,1 +287,1 @@\n-        Path L1 = Path.of(\"link1\");\n+        Path L1 = home.resolve(\"link1\");\n@@ -307,1 +289,0 @@\n-        allFiles.add(L1);\n@@ -311,1 +292,0 @@\n-        allFiles.add(cible);\n@@ -313,1 +293,1 @@\n-        Path L4 = Path.of(\"link4\");\n+        Path L4 = home.resolve(\"link4\");\n@@ -315,1 +295,0 @@\n-        allFiles.add(L4);\n@@ -317,1 +296,1 @@\n-        Path L3 = Path.of(\"link3\");\n+        Path L3 = home.resolve(\"link3\");\n@@ -319,1 +298,0 @@\n-        allFiles.add(L3);\n@@ -341,1 +319,1 @@\n-        Path doesNotExist = Path.of(\"doesNotExist\");\n+        Path doesNotExist = home.resolve(\"doesNotExist\");\n@@ -343,1 +321,1 @@\n-        Path L2 = Path.of(\"link2\");\n+        Path L2 = home.resolve(\"link2\");\n@@ -345,1 +323,0 @@\n-        allFiles.add(L2);\n@@ -347,1 +324,1 @@\n-        Path L1 = Path.of(\"link1\");\n+        Path L1 = home.resolve(\"link1\");\n@@ -349,1 +326,0 @@\n-        allFiles.add(L1);\n@@ -351,1 +327,1 @@\n-        Path L4 = Path.of(\"link4\");\n+        Path L4 = home.resolve(\"link4\");\n@@ -353,1 +329,0 @@\n-        allFiles.add(L4);\n@@ -355,1 +330,1 @@\n-        Path L3 = Path.of(\"link3\");\n+        Path L3 = home.resolve(\"link3\");\n@@ -357,1 +332,0 @@\n-        allFiles.add(L3);\n@@ -381,1 +355,0 @@\n-        allFiles.add(target);\n@@ -383,2 +356,1 @@\n-        links[3] = Files.createSymbolicLink(Path.of(\"link4\"), target);\n-        allFiles.add(links[3]);\n+        links[3] = Files.createSymbolicLink(home.resolve(\"link4\"), target);\n@@ -386,2 +358,1 @@\n-            links[i-1] = Files.createSymbolicLink(Path.of(\"link\"+i), links[i]);\n-            allFiles.add(links[i-1]);\n+            links[i-1] = Files.createSymbolicLink(home.resolve(\"link\"+i), links[i]);\n@@ -417,1 +388,0 @@\n-        allFiles.add(target);\n@@ -419,2 +389,1 @@\n-        links[3] = Files.createSymbolicLink(Path.of(\"link4\"), target);\n-        allFiles.add(links[3]);\n+        links[3] = Files.createSymbolicLink(home.resolve(\"link4\"), target);\n@@ -422,1 +391,0 @@\n-        allFiles.remove(target);\n@@ -424,2 +392,1 @@\n-            links[i-1] = Files.createSymbolicLink(Path.of(\"link\"+i), links[i]);\n-            allFiles.add(links[i-1]);\n+            links[i-1] = Files.createSymbolicLink(home.resolve(\"link\"+i), links[i]);\n@@ -457,3 +424,3 @@\n-        allFiles.add(Files.createSymbolicLink(link1, link2));\n-        allFiles.add(Files.createSymbolicLink(link2, link3));\n-        allFiles.add(Files.createSymbolicLink(link3, link1));\n+        Files.createSymbolicLink(link1, link2);\n+        Files.createSymbolicLink(link2, link3);\n+        Files.createSymbolicLink(link3, link1);\n","filename":"test\/jdk\/java\/nio\/file\/Files\/IsSameFile.java","additions":33,"deletions":66,"binary":false,"changes":99,"status":"modified"}]}