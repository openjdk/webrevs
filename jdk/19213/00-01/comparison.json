{"files":[{"patch":"@@ -69,0 +69,1 @@\n+import jdk.internal.misc.VM;\n@@ -70,0 +71,1 @@\n+import jdk.internal.module.ModuleBootstrap.IllegalNativeAccess;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Module.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -115,8 +115,9 @@\n-        if (VM.isModuleSystemInited()) {\n-            \/\/ if there is no caller class, act as if the call came from unnamed module of system class loader\n-            Module module = currentClass != null ?\n-                    currentClass.getModule() :\n-                    ClassLoader.getSystemClassLoader().getUnnamedModule();\n-            class Holder {\n-                static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n-            }\n+        \/\/ if there is no caller class, act as if the call came from unnamed module of system class loader\n+        Module module = currentClass != null ?\n+                currentClass.getModule() :\n+                ClassLoader.getSystemClassLoader().getUnnamedModule();\n+        class Holder {\n+            static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n+        }\n+        if (module != null) {\n+            \/\/ not in init phase\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/Reflection.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"}]}