{"files":[{"patch":"@@ -27,211 +27,211 @@\n- *   Provides the management interfaces for monitoring and management of the\n- *   Java virtual machine and other components in the Java runtime.\n- *   It allows both local and remote\n- *   monitoring and management of the running Java virtual machine.\n- *\n- *   <h2><a id=\"MXBean\">Platform MXBean<\/a><\/h2>\n- *   <p>\n- *   A platform MXBean is a <i>managed bean<\/i> that\n- *   conforms to the {@linkplain javax.management JMX}\n- *   Instrumentation Specification and only uses a set of basic data types.\n- *   Each platform MXBean is a {@link java.lang.management.PlatformManagedObject}\n- *   with a unique\n- *   {@linkplain java.lang.management.PlatformManagedObject#getObjectName name}.\n- *   <h2>ManagementFactory<\/h2>\n- *\n- *   <p>The {@link java.lang.management.ManagementFactory} class is the management\n- *   factory class for the Java platform.  This class provides a set of\n- *   static factory methods to obtain the MXBeans for the Java platform\n- *   to allow an application to access the MXBeans directly.\n- *\n- *   <p>A <em>platform MBeanServer<\/em> can be accessed with the\n- *   {@link java.lang.management.ManagementFactory#getPlatformMBeanServer\n- *    getPlatformMBeanServer} method.  On the first call to this method,\n- *   it creates the platform MBeanServer and registers all platform MXBeans\n- *   including {@linkplain java.lang.management.PlatformManagedObject\n- *   platform MXBeans}.\n- *   Each platform MXBean is registered with a unique name defined in\n- *   the specification of the management interface.\n- *   This is a single MBeanServer that can be shared by different managed\n- *   components running within the same Java virtual machine.\n- *\n- *   <h2>Interoperability<\/h2>\n- *\n- *   <p>A management application and a platform MBeanServer of a running\n- *   virtual machine can interoperate\n- *   without requiring classes used by the platform MXBean interfaces.\n- *   The data types being transmitted between the JMX connector\n- *   server and the connector client are JMX\n- *   {@linkplain javax.management.openmbean.OpenType open types} and\n- *   this allows interoperation across versions.\n- *   A data type used by the MXBean interfaces are mapped to an\n- *   open type when being accessed via MBeanServer interface.\n- *   See the <a href=\"{@docRoot}\/java.management\/javax\/management\/MXBean.html#MXBean-spec\">\n- *   MXBean<\/a> specification for details.\n- *\n- *   <h2><a id=\"examples\">Ways to Access MXBeans<\/a><\/h2>\n- *\n- *   <p>An application can monitor the instrumentation of the\n- *   Java virtual machine and the runtime in the following ways:\n- *   <p>\n- *   <b>1. Direct access to an MXBean interface<\/b>\n- *   <ul>\n- *   <li>Get an MXBean instance locally in the running Java virtual machine:\n- *   <pre>\n- *      RuntimeMXBean mxbean = ManagementFactory.getRuntimeMXBean();\n- *\n- *      \/\/ Get the standard attribute \"VmVendor\"\n- *      String vendor = mxbean.getVmVendor();\n- *   <\/pre>\n- *   <p>Or by calling the\n- *           {@link java.lang.management.ManagementFactory#getPlatformMXBean(Class)\n- *                  getPlatformMXBean} or\n- *           {@link java.lang.management.ManagementFactory#getPlatformMXBeans(Class)\n- *                  getPlatformMXBeans} method:\n- *   <pre>\n- *      RuntimeMXBean mxbean = ManagementFactory.getPlatformMXBean(RuntimeMXBean.class);\n- *\n- *      \/\/ Get the standard attribute \"VmVendor\"\n- *      String vendor = mxbean.getVmVendor();\n- *   <\/pre>\n- *   <\/li>\n- *   <li>Construct an MXBean proxy instance that forwards the\n- *       method calls to a given MBeanServer:\n- *   <pre>\n- *      MBeanServerConnection mbs;\n- *\n- *      \/\/ Connect to a running JVM (or itself) and get MBeanServerConnection\n- *      \/\/ that has the JVM MBeans registered in it\n- *      ...\n- *\n- *      \/\/ Get a MBean proxy for RuntimeMXBean interface\n- *      RuntimeMXBean proxy =\n- *          {@link java.lang.management.ManagementFactory#getPlatformMXBean(MBeanServerConnection, Class)\n- *          ManagementFactory.getPlatformMXBean}(mbs,\n- *                                              RuntimeMXBean.class);\n- *      \/\/ Get standard attribute \"VmVendor\"\n- *      String vendor = proxy.getVmVendor();\n- *   <\/pre>\n- *   <p>A proxy is typically used to access an MXBean\n- *      in a remote Java virtual machine.\n- *      An alternative way to create an MXBean proxy is:\n- *   <pre>\n- *      RuntimeMXBean proxy =\n- *          {@link java.lang.management.ManagementFactory#newPlatformMXBeanProxy\n- *                 ManagementFactory.newPlatformMXBeanProxy}(mbs,\n- *                                                   ManagementFactory.RUNTIME_MXBEAN_NAME,\n- *                                                   RuntimeMXBean.class);\n- *   <\/pre>\n- *   <\/li>\n- *   <\/ul>\n- *   <p>\n- *   <b>2. Indirect access to an MXBean interface via MBeanServer<\/b>\n- *   <ul>\n- *   <li>Go through the\n- *       {@link java.lang.management.ManagementFactory#getPlatformMBeanServer\n- *       platform MBeanServer} to access MXBeans locally or\n- *       a specific {@code MBeanServerConnection} to access\n- *       MXBeans remotely.\n- *       The attributes and operations of an MXBean use only\n- *       <em>JMX open types<\/em> which include basic data types,\n- *       {@link javax.management.openmbean.CompositeData CompositeData},\n- *       and {@link javax.management.openmbean.TabularData TabularData}\n- *       defined in {@link javax.management.openmbean.OpenType OpenType}.\n- *   <pre>\n- *      MBeanServerConnection mbs;\n- *\n- *      \/\/ Connect to a running JVM (or itself) and get MBeanServerConnection\n- *      \/\/ that has the JVM MXBeans registered in it\n- *      ...\n- *\n- *      try {\n- *          \/\/ Assuming the RuntimeMXBean has been registered in mbs\n- *          ObjectName oname = new ObjectName(ManagementFactory.RUNTIME_MXBEAN_NAME);\n- *\n- *          \/\/ Get standard attribute \"VmVendor\"\n- *          String vendor = (String) mbs.getAttribute(oname, \"VmVendor\");\n- *      } catch (....) {\n- *          \/\/ Catch the exceptions thrown by ObjectName constructor\n- *          \/\/ and MBeanServer.getAttribute method\n- *          ...\n- *      }\n- *   <\/pre>\n- *   <\/li>\n- *   <\/ul>\n- *\n- *\n- *   <h2><a id=\"extension\">Platform Extension<\/a><\/h2>\n- *\n- *   <p>A Java virtual machine implementation may add its platform extension to\n- *   the management interface by defining platform-dependent\n- *   interfaces that extend the standard management interfaces to include\n- *   platform-specific metrics and management operations.\n- *   The static factory methods in the <code>ManagementFactory<\/code> class will\n- *   return the MXBeans with the platform extension.\n- *\n- *   <p>\n- *   It is recommended to name the platform-specific attributes with\n- *   a vendor-specific prefix such as the vendor's name to\n- *   avoid collisions of the attribute name between the future extension\n- *   to the standard management interface and the platform extension.\n- *   If the future extension to the standard management interface defines\n- *   a new attribute for a management interface and the attribute name\n- *   is happened to be same as some vendor-specific attribute's name,\n- *   the applications accessing that vendor-specific attribute would have\n- *   to be modified to cope with versioning and compatibility issues.\n- *\n- *   <p>Below is an example showing how to access an attribute\n- *   from the platform extension:\n- *\n- *   <p>\n- *   1) Direct access to the Oracle-specific MXBean interface\n- *   <blockquote>\n- *   <pre>\n- *      List&lt;com.sun.management.GarbageCollectorMXBean&gt; mxbeans =\n- *          ManagementFactory.getPlatformMXBeans(com.sun.management.GarbageCollectorMXBean.class);\n- *\n- *      for (com.sun.management.GarbageCollectorMXBean gc : mxbeans) {\n- *          \/\/ Get the standard attribute \"CollectionCount\"\n- *          String count = mxbean.getCollectionCount();\n- *\n- *          \/\/ Get the platform-specific attribute \"LastGcInfo\"\n- *          GcInfo gcinfo = gc.getLastGcInfo();\n- *          ...\n- *      }\n- *   <\/pre>\n- *   <\/blockquote>\n- *\n- *   <p>\n- *   2) Access the Oracle-specific MXBean interface via <code>MBeanServer<\/code>\n- *      through proxy\n- *\n- *   <blockquote><pre>\n- *      MBeanServerConnection mbs;\n- *\n- *      \/\/ Connect to a running JVM (or itself) and get MBeanServerConnection\n- *      \/\/ that has the JVM MXBeans registered in it\n- *      ...\n- *\n- *      List&lt;com.sun.management.GarbageCollectorMXBean&gt; mxbeans =\n- *          ManagementFactory.getPlatformMXBeans(mbs, com.sun.management.GarbageCollectorMXBean.class);\n- *\n- *      for (com.sun.management.GarbageCollectorMXBean gc : mxbeans) {\n- *          \/\/ Get the standard attribute \"CollectionCount\"\n- *          String count = mxbean.getCollectionCount();\n- *\n- *          \/\/ Get the platform-specific attribute \"LastGcInfo\"\n- *          GcInfo gcinfo = gc.getLastGcInfo();\n- *          ...\n- *      }\n- *   <\/pre><\/blockquote>\n- *\n- *   <p> Unless otherwise noted, passing a <code>null<\/code> argument to a constructor\n- *   or method in any class or interface in this package will cause a {@link\n- *   java.lang.NullPointerException NullPointerException} to be thrown.\n- *\n- *   <p> The java.lang.management API is thread-safe.\n- *\n- *   @see javax.management JMX Specification\n- *\n- *   @author  Mandy Chung\n- *   @since   1.5\n+ * Provides the management interfaces for monitoring and management of the\n+ * Java virtual machine and other components in the Java runtime.\n+ * It allows both local and remote\n+ * monitoring and management of the running Java virtual machine.\n+ *\n+ * <h2><a id=\"MXBean\">Platform MXBean<\/a><\/h2>\n+ * <p>\n+ * A platform MXBean is a <i>managed bean<\/i> that\n+ * conforms to the {@linkplain javax.management JMX}\n+ * Instrumentation Specification and only uses a set of basic data types.\n+ * Each platform MXBean is a {@link java.lang.management.PlatformManagedObject}\n+ * with a unique\n+ * {@linkplain java.lang.management.PlatformManagedObject#getObjectName name}.\n+ * <h2>ManagementFactory<\/h2>\n+ *\n+ * <p>The {@link java.lang.management.ManagementFactory} class is the management\n+ * factory class for the Java platform.  This class provides a set of\n+ * static factory methods to obtain the MXBeans for the Java platform\n+ * to allow an application to access the MXBeans directly.\n+ *\n+ * <p>A <em>platform MBeanServer<\/em> can be accessed with the\n+ * {@link java.lang.management.ManagementFactory#getPlatformMBeanServer\n+ * getPlatformMBeanServer} method.  On the first call to this method,\n+ * it creates the platform MBeanServer and registers all platform MXBeans\n+ * including {@linkplain java.lang.management.PlatformManagedObject\n+ * platform MXBeans}.\n+ * Each platform MXBean is registered with a unique name defined in\n+ * the specification of the management interface.\n+ * This is a single MBeanServer that can be shared by different managed\n+ * components running within the same Java virtual machine.\n+ *\n+ * <h2>Interoperability<\/h2>\n+ *\n+ * <p>A management application and a platform MBeanServer of a running\n+ * virtual machine can interoperate\n+ * without requiring classes used by the platform MXBean interfaces.\n+ * The data types being transmitted between the JMX connector\n+ * server and the connector client are JMX\n+ * {@linkplain javax.management.openmbean.OpenType open types} and\n+ * this allows interoperation across versions.\n+ * A data type used by the MXBean interfaces are mapped to an\n+ * open type when being accessed via MBeanServer interface.\n+ * See the <a href=\"{@docRoot}\/java.management\/javax\/management\/MXBean.html#MXBean-spec\">\n+ * MXBean<\/a> specification for details.\n+ *\n+ * <h2><a id=\"examples\">Ways to Access MXBeans<\/a><\/h2>\n+ *\n+ * <p>An application can monitor the instrumentation of the\n+ * Java virtual machine and the runtime in the following ways:\n+ * <p>\n+ * <b>1. Direct access to an MXBean interface<\/b>\n+ * <ul>\n+ * <li>Get an MXBean instance locally in the running Java virtual machine:\n+ * <pre>\n+ *    RuntimeMXBean mxbean = ManagementFactory.getRuntimeMXBean();\n+ *\n+ *    \/\/ Get the standard attribute \"VmVendor\"\n+ *    String vendor = mxbean.getVmVendor();\n+ * <\/pre>\n+ * <p>Or by calling the\n+ *         {@link java.lang.management.ManagementFactory#getPlatformMXBean(Class)\n+ *                getPlatformMXBean} or\n+ *         {@link java.lang.management.ManagementFactory#getPlatformMXBeans(Class)\n+ *                getPlatformMXBeans} method:\n+ * <pre>\n+ *    RuntimeMXBean mxbean = ManagementFactory.getPlatformMXBean(RuntimeMXBean.class);\n+ *\n+ *    \/\/ Get the standard attribute \"VmVendor\"\n+ *    String vendor = mxbean.getVmVendor();\n+ * <\/pre>\n+ * <\/li>\n+ * <li>Construct an MXBean proxy instance that forwards the\n+ *     method calls to a given MBeanServer:\n+ * <pre>\n+ *    MBeanServerConnection mbs;\n+ *\n+ *    \/\/ Connect to a running JVM (or itself) and get MBeanServerConnection\n+ *    \/\/ that has the JVM MBeans registered in it\n+ *    ...\n+ *\n+ *    \/\/ Get a MBean proxy for RuntimeMXBean interface\n+ *    RuntimeMXBean proxy =\n+ *        {@link java.lang.management.ManagementFactory#getPlatformMXBean(MBeanServerConnection, Class)\n+ *        ManagementFactory.getPlatformMXBean}(mbs,\n+ *                                            RuntimeMXBean.class);\n+ *    \/\/ Get standard attribute \"VmVendor\"\n+ *    String vendor = proxy.getVmVendor();\n+ * <\/pre>\n+ * <p>A proxy is typically used to access an MXBean\n+ *    in a remote Java virtual machine.\n+ *    An alternative way to create an MXBean proxy is:\n+ * <pre>\n+ *    RuntimeMXBean proxy =\n+ *        {@link java.lang.management.ManagementFactory#newPlatformMXBeanProxy\n+ *               ManagementFactory.newPlatformMXBeanProxy}(mbs,\n+ *                                                 ManagementFactory.RUNTIME_MXBEAN_NAME,\n+ *                                                 RuntimeMXBean.class);\n+ * <\/pre>\n+ * <\/li>\n+ * <\/ul>\n+ * <p>\n+ * <b>2. Indirect access to an MXBean interface via MBeanServer<\/b>\n+ * <ul>\n+ * <li>Go through the\n+ *     {@link java.lang.management.ManagementFactory#getPlatformMBeanServer\n+ *     platform MBeanServer} to access MXBeans locally or\n+ *     a specific {@code MBeanServerConnection} to access\n+ *     MXBeans remotely.\n+ *     The attributes and operations of an MXBean use only\n+ *     <em>JMX open types<\/em> which include basic data types,\n+ *     {@link javax.management.openmbean.CompositeData CompositeData},\n+ *     and {@link javax.management.openmbean.TabularData TabularData}\n+ *     defined in {@link javax.management.openmbean.OpenType OpenType}.\n+ * <pre>\n+ *    MBeanServerConnection mbs;\n+ *\n+ *    \/\/ Connect to a running JVM (or itself) and get MBeanServerConnection\n+ *    \/\/ that has the JVM MXBeans registered in it\n+ *    ...\n+ *\n+ *    try {\n+ *        \/\/ Assuming the RuntimeMXBean has been registered in mbs\n+ *        ObjectName oname = new ObjectName(ManagementFactory.RUNTIME_MXBEAN_NAME);\n+ *\n+ *        \/\/ Get standard attribute \"VmVendor\"\n+ *        String vendor = (String) mbs.getAttribute(oname, \"VmVendor\");\n+ *    } catch (....) {\n+ *        \/\/ Catch the exceptions thrown by ObjectName constructor\n+ *        \/\/ and MBeanServer.getAttribute method\n+ *        ...\n+ *    }\n+ * <\/pre>\n+ * <\/li>\n+ * <\/ul>\n+ *\n+ *\n+ * <h2><a id=\"extension\">Platform Extension<\/a><\/h2>\n+ *\n+ * <p>A Java virtual machine implementation may add its platform extension to\n+ * the management interface by defining platform-dependent\n+ * interfaces that extend the standard management interfaces to include\n+ * platform-specific metrics and management operations.\n+ * The static factory methods in the <code>ManagementFactory<\/code> class will\n+ * return the MXBeans with the platform extension.\n+ *\n+ * <p>\n+ * It is recommended to name the platform-specific attributes with\n+ * a vendor-specific prefix such as the vendor's name to\n+ * avoid collisions of the attribute name between the future extension\n+ * to the standard management interface and the platform extension.\n+ * If the future extension to the standard management interface defines\n+ * a new attribute for a management interface and the attribute name\n+ * is happened to be same as some vendor-specific attribute's name,\n+ * the applications accessing that vendor-specific attribute would have\n+ * to be modified to cope with versioning and compatibility issues.\n+ *\n+ * <p>Below is an example showing how to access an attribute\n+ * from the platform extension:\n+ *\n+ * <p>\n+ * 1) Direct access to the Oracle-specific MXBean interface\n+ * <blockquote>\n+ * <pre>\n+ *    List&lt;com.sun.management.GarbageCollectorMXBean&gt; mxbeans =\n+ *        ManagementFactory.getPlatformMXBeans(com.sun.management.GarbageCollectorMXBean.class);\n+ *\n+ *    for (com.sun.management.GarbageCollectorMXBean gc : mxbeans) {\n+ *        \/\/ Get the standard attribute \"CollectionCount\"\n+ *        String count = mxbean.getCollectionCount();\n+ *\n+ *        \/\/ Get the platform-specific attribute \"LastGcInfo\"\n+ *        GcInfo gcinfo = gc.getLastGcInfo();\n+ *        ...\n+ *    }\n+ * <\/pre>\n+ * <\/blockquote>\n+ *\n+ * <p>\n+ * 2) Access the Oracle-specific MXBean interface via <code>MBeanServer<\/code>\n+ *    through proxy\n+ *\n+ * <blockquote><pre>\n+ *    MBeanServerConnection mbs;\n+ *\n+ *    \/\/ Connect to a running JVM (or itself) and get MBeanServerConnection\n+ *    \/\/ that has the JVM MXBeans registered in it\n+ *    ...\n+ *\n+ *    List&lt;com.sun.management.GarbageCollectorMXBean&gt; mxbeans =\n+ *        ManagementFactory.getPlatformMXBeans(mbs, com.sun.management.GarbageCollectorMXBean.class);\n+ *\n+ *    for (com.sun.management.GarbageCollectorMXBean gc : mxbeans) {\n+ *        \/\/ Get the standard attribute \"CollectionCount\"\n+ *        String count = mxbean.getCollectionCount();\n+ *\n+ *        \/\/ Get the platform-specific attribute \"LastGcInfo\"\n+ *        GcInfo gcinfo = gc.getLastGcInfo();\n+ *        ...\n+ *    }\n+ * <\/pre><\/blockquote>\n+ *\n+ * <p> Unless otherwise noted, passing a <code>null<\/code> argument to a constructor\n+ * or method in any class or interface in this package will cause a {@link\n+ * java.lang.NullPointerException NullPointerException} to be thrown.\n+ *\n+ * <p> The java.lang.management API is thread-safe.\n+ *\n+ * @see javax.management JMX Specification\n+ *\n+ * @author Mandy Chung\n+ * @since 1.5\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/package-info.java","additions":211,"deletions":211,"binary":false,"changes":422,"status":"modified"}]}