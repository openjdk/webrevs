{"files":[{"patch":"@@ -0,0 +1,239 @@\n+\/*\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * Provides the management interfaces for monitoring and management of the\n+ * Java virtual machine and other components in the Java runtime.\n+ * It allows both local and remote\n+ * monitoring and management of the running Java virtual machine.\n+ *\n+ * <h2><a id=\"MXBean\">Platform MXBean<\/a><\/h2>\n+ * <p>\n+ * A platform MXBean is a <i>managed bean<\/i> that\n+ * conforms to the {@linkplain javax.management JMX}\n+ * Instrumentation Specification and only uses a set of basic data types.\n+ * Each platform MXBean is a {@link java.lang.management.PlatformManagedObject}\n+ * with a unique\n+ * {@linkplain java.lang.management.PlatformManagedObject#getObjectName name}.\n+ * <h2>ManagementFactory<\/h2>\n+ *\n+ * <p>The {@link java.lang.management.ManagementFactory} class is the management\n+ * factory class for the Java platform.  This class provides a set of\n+ * static factory methods to obtain the MXBeans for the Java platform\n+ * to allow an application to access the MXBeans directly.\n+ *\n+ * <p>A <em>platform MBeanServer<\/em> can be accessed with the\n+ * {@link java.lang.management.ManagementFactory#getPlatformMBeanServer\n+ * getPlatformMBeanServer} method.  On the first call to this method,\n+ * it creates the platform MBeanServer and registers all platform MXBeans\n+ * including {@linkplain java.lang.management.PlatformManagedObject\n+ * platform MXBeans}.\n+ * Each platform MXBean is registered with a unique name defined in\n+ * the specification of the management interface.\n+ * This is a single MBeanServer that can be shared by different managed\n+ * components running within the same Java virtual machine.\n+ *\n+ * <h2>Interoperability<\/h2>\n+ *\n+ * <p>A management application and a platform MBeanServer of a running\n+ * virtual machine can interoperate\n+ * without requiring classes used by the platform MXBean interfaces.\n+ * The data types being transmitted between the JMX connector\n+ * server and the connector client are JMX\n+ * {@linkplain javax.management.openmbean.OpenType open types} and\n+ * this allows interoperation across versions.\n+ * A data type used by the MXBean interfaces are mapped to an\n+ * open type when being accessed via MBeanServer interface.\n+ * See the <a href=\"{@docRoot}\/java.management\/javax\/management\/MXBean.html#MXBean-spec\">\n+ * MXBean<\/a> specification for details.\n+ *\n+ * <h2><a id=\"examples\">Ways to Access MXBeans<\/a><\/h2>\n+ *\n+ * <p>An application can monitor the instrumentation of the\n+ * Java virtual machine and the runtime in the following ways:\n+ * <p>\n+ * <b>1. Direct access to an MXBean interface<\/b>\n+ * <ul>\n+ * <li>Get an MXBean instance locally in the running Java virtual machine:\n+ * <pre>\n+ *    RuntimeMXBean mxbean = ManagementFactory.getRuntimeMXBean();\n+ *\n+ *    \/\/ Get the standard attribute \"VmVendor\"\n+ *    String vendor = mxbean.getVmVendor();\n+ * <\/pre>\n+ * <p>Or by calling the\n+ *         {@link java.lang.management.ManagementFactory#getPlatformMXBean(Class)\n+ *                getPlatformMXBean} or\n+ *         {@link java.lang.management.ManagementFactory#getPlatformMXBeans(Class)\n+ *                getPlatformMXBeans} method:\n+ * <pre>\n+ *    RuntimeMXBean mxbean = ManagementFactory.getPlatformMXBean(RuntimeMXBean.class);\n+ *\n+ *    \/\/ Get the standard attribute \"VmVendor\"\n+ *    String vendor = mxbean.getVmVendor();\n+ * <\/pre>\n+ * <\/li>\n+ * <li>Construct an MXBean proxy instance that forwards the\n+ *     method calls to a given MBeanServer:\n+ * <pre>\n+ *    MBeanServerConnection mbs;\n+ *\n+ *    \/\/ Connect to a running JVM (or itself) and get MBeanServerConnection\n+ *    \/\/ that has the JVM MBeans registered in it\n+ *    ...\n+ *\n+ *    \/\/ Get a MBean proxy for RuntimeMXBean interface\n+ *    RuntimeMXBean proxy =\n+ *        {@link java.lang.management.ManagementFactory#getPlatformMXBean(MBeanServerConnection, Class)\n+ *        ManagementFactory.getPlatformMXBean}(mbs,\n+ *                                            RuntimeMXBean.class);\n+ *    \/\/ Get standard attribute \"VmVendor\"\n+ *    String vendor = proxy.getVmVendor();\n+ * <\/pre>\n+ * <p>A proxy is typically used to access an MXBean\n+ *    in a remote Java virtual machine.\n+ *    An alternative way to create an MXBean proxy is:\n+ * <pre>\n+ *    RuntimeMXBean proxy =\n+ *        {@link java.lang.management.ManagementFactory#newPlatformMXBeanProxy\n+ *               ManagementFactory.newPlatformMXBeanProxy}(mbs,\n+ *                                                 ManagementFactory.RUNTIME_MXBEAN_NAME,\n+ *                                                 RuntimeMXBean.class);\n+ * <\/pre>\n+ * <\/li>\n+ * <\/ul>\n+ * <p>\n+ * <b>2. Indirect access to an MXBean interface via MBeanServer<\/b>\n+ * <ul>\n+ * <li>Go through the\n+ *     {@link java.lang.management.ManagementFactory#getPlatformMBeanServer\n+ *     platform MBeanServer} to access MXBeans locally or\n+ *     a specific {@code MBeanServerConnection} to access\n+ *     MXBeans remotely.\n+ *     The attributes and operations of an MXBean use only\n+ *     <em>JMX open types<\/em> which include basic data types,\n+ *     {@link javax.management.openmbean.CompositeData CompositeData},\n+ *     and {@link javax.management.openmbean.TabularData TabularData}\n+ *     defined in {@link javax.management.openmbean.OpenType OpenType}.\n+ * <pre>\n+ *    MBeanServerConnection mbs;\n+ *\n+ *    \/\/ Connect to a running JVM (or itself) and get MBeanServerConnection\n+ *    \/\/ that has the JVM MXBeans registered in it\n+ *    ...\n+ *\n+ *    try {\n+ *        \/\/ Assuming the RuntimeMXBean has been registered in mbs\n+ *        ObjectName oname = new ObjectName(ManagementFactory.RUNTIME_MXBEAN_NAME);\n+ *\n+ *        \/\/ Get standard attribute \"VmVendor\"\n+ *        String vendor = (String) mbs.getAttribute(oname, \"VmVendor\");\n+ *    } catch (....) {\n+ *        \/\/ Catch the exceptions thrown by ObjectName constructor\n+ *        \/\/ and MBeanServer.getAttribute method\n+ *        ...\n+ *    }\n+ * <\/pre>\n+ * <\/li>\n+ * <\/ul>\n+ *\n+ *\n+ * <h2><a id=\"extension\">Platform Extension<\/a><\/h2>\n+ *\n+ * <p>A Java virtual machine implementation may add its platform extension to\n+ * the management interface by defining platform-dependent\n+ * interfaces that extend the standard management interfaces to include\n+ * platform-specific metrics and management operations.\n+ * The static factory methods in the <code>ManagementFactory<\/code> class will\n+ * return the MXBeans with the platform extension.\n+ *\n+ * <p>\n+ * It is recommended to name the platform-specific attributes with\n+ * a vendor-specific prefix such as the vendor's name to\n+ * avoid collisions of the attribute name between the future extension\n+ * to the standard management interface and the platform extension.\n+ * If the future extension to the standard management interface defines\n+ * a new attribute for a management interface and the attribute name\n+ * is happened to be same as some vendor-specific attribute's name,\n+ * the applications accessing that vendor-specific attribute would have\n+ * to be modified to cope with versioning and compatibility issues.\n+ *\n+ * <p>Below is an example showing how to access an attribute\n+ * from the platform extension:\n+ *\n+ * <p>\n+ * 1) Direct access to the Oracle-specific MXBean interface\n+ * <blockquote>\n+ * <pre>\n+ *    List&lt;com.sun.management.GarbageCollectorMXBean&gt; mxbeans =\n+ *        ManagementFactory.getPlatformMXBeans(com.sun.management.GarbageCollectorMXBean.class);\n+ *\n+ *    for (com.sun.management.GarbageCollectorMXBean gc : mxbeans) {\n+ *        \/\/ Get the standard attribute \"CollectionCount\"\n+ *        String count = mxbean.getCollectionCount();\n+ *\n+ *        \/\/ Get the platform-specific attribute \"LastGcInfo\"\n+ *        GcInfo gcinfo = gc.getLastGcInfo();\n+ *        ...\n+ *    }\n+ * <\/pre>\n+ * <\/blockquote>\n+ *\n+ * <p>\n+ * 2) Access the Oracle-specific MXBean interface via <code>MBeanServer<\/code>\n+ *    through proxy\n+ *\n+ * <blockquote><pre>\n+ *    MBeanServerConnection mbs;\n+ *\n+ *    \/\/ Connect to a running JVM (or itself) and get MBeanServerConnection\n+ *    \/\/ that has the JVM MXBeans registered in it\n+ *    ...\n+ *\n+ *    List&lt;com.sun.management.GarbageCollectorMXBean&gt; mxbeans =\n+ *        ManagementFactory.getPlatformMXBeans(mbs, com.sun.management.GarbageCollectorMXBean.class);\n+ *\n+ *    for (com.sun.management.GarbageCollectorMXBean gc : mxbeans) {\n+ *        \/\/ Get the standard attribute \"CollectionCount\"\n+ *        String count = mxbean.getCollectionCount();\n+ *\n+ *        \/\/ Get the platform-specific attribute \"LastGcInfo\"\n+ *        GcInfo gcinfo = gc.getLastGcInfo();\n+ *        ...\n+ *    }\n+ * <\/pre><\/blockquote>\n+ *\n+ * <p> Unless otherwise noted, passing a <code>null<\/code> argument to a constructor\n+ * or method in any class or interface in this package will cause a {@link\n+ * java.lang.NullPointerException NullPointerException} to be thrown.\n+ *\n+ * <p> The java.lang.management API is thread-safe.\n+ *\n+ * @see javax.management JMX Specification\n+ *\n+ * @author Mandy Chung\n+ * @since 1.5\n+ *\/\n+package java.lang.management;\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/package-info.java","additions":239,"deletions":0,"binary":false,"changes":239,"status":"added"},{"patch":"@@ -1,243 +0,0 @@\n-<!--\n- Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.  Oracle designates this\n- particular file as subject to the \"Classpath\" exception as provided\n- by Oracle in the LICENSE file that accompanied this code.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<!DOCTYPE HTML PUBLIC \"-\/\/W3C\/\/DTD HTML 3.2 Final\/\/EN\">\n-<html>\n-<body bgcolor=\"white\">\n-\n-Provides the management interfaces for monitoring and management of the\n-Java virtual machine and other components in the Java runtime.\n-It allows both local and remote\n-monitoring and management of the running Java virtual machine.\n-\n-<h2><a id=\"MXBean\">Platform MXBean<\/a><\/h2>\n-<p>\n-A platform MXBean is a <i>managed bean<\/i> that\n-conforms to the {@linkplain javax.management JMX}\n-Instrumentation Specification and only uses a set of basic data types.\n-Each platform MXBean is a {@link java.lang.management.PlatformManagedObject}\n-with a unique\n-{@linkplain java.lang.management.PlatformManagedObject#getObjectName name}.\n-<h2>ManagementFactory<\/h2>\n-\n-<p>The {@link java.lang.management.ManagementFactory} class is the management\n-factory class for the Java platform.  This class provides a set of\n-static factory methods to obtain the MXBeans for the Java platform\n-to allow an application to access the MXBeans directly.\n-\n-<p>A <em>platform MBeanServer<\/em> can be accessed with the\n-{@link java.lang.management.ManagementFactory#getPlatformMBeanServer\n- getPlatformMBeanServer} method.  On the first call to this method,\n-it creates the platform MBeanServer and registers all platform MXBeans\n-including {@linkplain java.lang.management.PlatformManagedObject\n-platform MXBeans}.\n-Each platform MXBean is registered with a unique name defined in\n-the specification of the management interface.\n-This is a single MBeanServer that can be shared by different managed\n-components running within the same Java virtual machine.\n-\n-<h2>Interoperability<\/h2>\n-\n-<p>A management application and a platform MBeanServer of a running\n-virtual machine can interoperate\n-without requiring classes used by the platform MXBean interfaces.\n-The data types being transmitted between the JMX connector\n-server and the connector client are JMX\n-{@linkplain javax.management.openmbean.OpenType open types} and\n-this allows interoperation across versions.\n-A data type used by the MXBean interfaces are mapped to an\n-open type when being accessed via MBeanServer interface.\n-See the <a href=\"{@docRoot}\/java.management\/javax\/management\/MXBean.html#MXBean-spec\">\n-MXBean<\/a> specification for details.\n-\n-<h2><a id=\"examples\">Ways to Access MXBeans<\/a><\/h2>\n-\n-<p>An application can monitor the instrumentation of the\n-Java virtual machine and the runtime in the following ways:\n-<p>\n-<b>1. Direct access to an MXBean interface<\/b>\n-<ul>\n-<li>Get an MXBean instance locally in the running Java virtual machine:\n-<pre>\n-   RuntimeMXBean mxbean = ManagementFactory.getRuntimeMXBean();\n-\n-   \/\/ Get the standard attribute \"VmVendor\"\n-   String vendor = mxbean.getVmVendor();\n-<\/pre>\n-<p>Or by calling the\n-        {@link java.lang.management.ManagementFactory#getPlatformMXBean(Class)\n-               getPlatformMXBean} or\n-        {@link java.lang.management.ManagementFactory#getPlatformMXBeans(Class)\n-               getPlatformMXBeans} method:\n-<pre>\n-   RuntimeMXBean mxbean = ManagementFactory.getPlatformMXBean(RuntimeMXBean.class);\n-\n-   \/\/ Get the standard attribute \"VmVendor\"\n-   String vendor = mxbean.getVmVendor();\n-<\/pre>\n-<\/li>\n-<li>Construct an MXBean proxy instance that forwards the\n-    method calls to a given MBeanServer:\n-<pre>\n-   MBeanServerConnection mbs;\n-\n-   \/\/ Connect to a running JVM (or itself) and get MBeanServerConnection\n-   \/\/ that has the JVM MBeans registered in it\n-   ...\n-\n-   \/\/ Get a MBean proxy for RuntimeMXBean interface\n-   RuntimeMXBean proxy =\n-       {@link java.lang.management.ManagementFactory#getPlatformMXBean(MBeanServerConnection, Class)\n-       ManagementFactory.getPlatformMXBean}(mbs,\n-                                           RuntimeMXBean.class);\n-   \/\/ Get standard attribute \"VmVendor\"\n-   String vendor = proxy.getVmVendor();\n-<\/pre>\n-<p>A proxy is typically used to access an MXBean\n-   in a remote Java virtual machine.\n-   An alternative way to create an MXBean proxy is:\n-<pre>\n-   RuntimeMXBean proxy =\n-       {@link java.lang.management.ManagementFactory#newPlatformMXBeanProxy\n-              ManagementFactory.newPlatformMXBeanProxy}(mbs,\n-                                                ManagementFactory.RUNTIME_MXBEAN_NAME,\n-                                                RuntimeMXBean.class);\n-<\/pre>\n-<\/li>\n-<\/ul>\n-<p>\n-<b>2. Indirect access to an MXBean interface via MBeanServer<\/b>\n-<ul>\n-<li>Go through the\n-    {@link java.lang.management.ManagementFactory#getPlatformMBeanServer\n-    platform MBeanServer} to access MXBeans locally or\n-    a specific {@code MBeanServerConnection} to access\n-    MXBeans remotely.\n-    The attributes and operations of an MXBean use only\n-    <em>JMX open types<\/em> which include basic data types,\n-    {@link javax.management.openmbean.CompositeData CompositeData},\n-    and {@link javax.management.openmbean.TabularData TabularData}\n-    defined in {@link javax.management.openmbean.OpenType OpenType}.\n-<pre>\n-   MBeanServerConnection mbs;\n-\n-   \/\/ Connect to a running JVM (or itself) and get MBeanServerConnection\n-   \/\/ that has the JVM MXBeans registered in it\n-   ...\n-\n-   try {\n-       \/\/ Assuming the RuntimeMXBean has been registered in mbs\n-       ObjectName oname = new ObjectName(ManagementFactory.RUNTIME_MXBEAN_NAME);\n-\n-       \/\/ Get standard attribute \"VmVendor\"\n-       String vendor = (String) mbs.getAttribute(oname, \"VmVendor\");\n-   } catch (....) {\n-       \/\/ Catch the exceptions thrown by ObjectName constructor\n-       \/\/ and MBeanServer.getAttribute method\n-       ...\n-   }\n-<\/pre>\n-<\/li>\n-<\/ul>\n-\n-\n-<h2><a id=\"extension\">Platform Extension<\/a><\/h2>\n-\n-<p>A Java virtual machine implementation may add its platform extension to\n-the management interface by defining platform-dependent\n-interfaces that extend the standard management interfaces to include\n-platform-specific metrics and management operations.\n-The static factory methods in the <code>ManagementFactory<\/code> class will\n-return the MXBeans with the platform extension.\n-\n-<p>\n-It is recommended to name the platform-specific attributes with\n-a vendor-specific prefix such as the vendor's name to\n-avoid collisions of the attribute name between the future extension\n-to the standard management interface and the platform extension.\n-If the future extension to the standard management interface defines\n-a new attribute for a management interface and the attribute name\n-is happened to be same as some vendor-specific attribute's name,\n-the applications accessing that vendor-specific attribute would have\n-to be modified to cope with versioning and compatibility issues.\n-\n-<p>Below is an example showing how to access an attribute\n-from the platform extension:\n-\n-<p>\n-1) Direct access to the Oracle-specific MXBean interface\n-<blockquote>\n-<pre>\n-   List&lt;com.sun.management.GarbageCollectorMXBean&gt; mxbeans =\n-       ManagementFactory.getPlatformMXBeans(com.sun.management.GarbageCollectorMXBean.class);\n-\n-   for (com.sun.management.GarbageCollectorMXBean gc : mxbeans) {\n-       \/\/ Get the standard attribute \"CollectionCount\"\n-       String count = mxbean.getCollectionCount();\n-\n-       \/\/ Get the platform-specific attribute \"LastGcInfo\"\n-       GcInfo gcinfo = gc.getLastGcInfo();\n-       ...\n-   }\n-<\/pre>\n-<\/blockquote>\n-\n-<p>\n-2) Access the Oracle-specific MXBean interface via <code>MBeanServer<\/code>\n-   through proxy\n-\n-<blockquote><pre>\n-   MBeanServerConnection mbs;\n-\n-   \/\/ Connect to a running JVM (or itself) and get MBeanServerConnection\n-   \/\/ that has the JVM MXBeans registered in it\n-   ...\n-\n-   List&lt;com.sun.management.GarbageCollectorMXBean&gt; mxbeans =\n-       ManagementFactory.getPlatformMXBeans(mbs, com.sun.management.GarbageCollectorMXBean.class);\n-\n-   for (com.sun.management.GarbageCollectorMXBean gc : mxbeans) {\n-       \/\/ Get the standard attribute \"CollectionCount\"\n-       String count = mxbean.getCollectionCount();\n-\n-       \/\/ Get the platform-specific attribute \"LastGcInfo\"\n-       GcInfo gcinfo = gc.getLastGcInfo();\n-       ...\n-   }\n-<\/pre><\/blockquote>\n-\n-<p> Unless otherwise noted, passing a <code>null<\/code> argument to a constructor\n-or method in any class or interface in this package will cause a {@link\n-java.lang.NullPointerException NullPointerException} to be thrown.\n-\n-<p> The java.lang.management API is thread-safe.\n-\n-@see javax.management JMX Specification\n-\n-@author  Mandy Chung\n-@since   1.5\n-\n-<\/body>\n-<\/html>\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/package.html","additions":0,"deletions":243,"binary":false,"changes":243,"status":"deleted"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * <p>Provides the classes which implement advanced dynamic\n+ * loading.  See the chapter <em>Advanced Dynamic Loading<\/em> in\n+ * the <a href=\"#spec\">JMX Specification<\/a>.<\/p>\n+ *\n+ * <p>An MBean that is of a subclass of {@link\n+ * java.lang.ClassLoader} can be used as a class loader to create\n+ * other MBeans via the method {@link\n+ * javax.management.MBeanServer#createMBean(String, ObjectName,\n+ * ObjectName, Object[], String[])}, and to instantiate arbitrary\n+ * objects via the method {@link\n+ * javax.management.MBeanServer#instantiate(String, ObjectName,\n+ * Object[], String[])}.<\/p>\n+ *\n+ * <p>Every MBean Server has a <em>class loader repository<\/em>\n+ * containing all MBeans registered in that MBean Server that\n+ * are of a subclass of {@link java.lang.ClassLoader}.  The class\n+ * loader repository is used by the forms of the\n+ * <code>createMBean<\/code> and <code>instantiate<\/code> methods\n+ * in the {@link javax.management.MBeanServer MBeanServer}\n+ * interface that do not have an explicit loader parameter.<\/p>\n+ *\n+ * <p>If an MBean implements the interface {@link\n+ * javax.management.loading.PrivateClassLoader PrivateClassLoader},\n+ * then it is not added to the class loader repository.<\/p>\n+ *\n+ * @see <a id=\"spec\" href=\"https:\/\/jcp.org\/aboutJava\/communityprocess\/mrel\/jsr160\/index2.html\">\n+ * JMX Specification, version 1.4<\/a>\n+ *\n+ * @since 1.5\n+ *\/\n+package javax.management.loading;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/loading\/package-info.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -1,61 +0,0 @@\n-<html>\n-<head>\n-<title>javax.management.loading package<\/title>\n-<!--\n-Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n-DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n-This code is free software; you can redistribute it and\/or modify it\n-under the terms of the GNU General Public License version 2 only, as\n-published by the Free Software Foundation.  Oracle designates this\n-particular file as subject to the \"Classpath\" exception as provided\n-by Oracle in the LICENSE file that accompanied this code.\n-\n-This code is distributed in the hope that it will be useful, but WITHOUT\n-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-version 2 for more details (a copy is included in the LICENSE file that\n-accompanied this code).\n-\n-You should have received a copy of the GNU General Public License version\n-2 along with this work; if not, write to the Free Software Foundation,\n-Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n-Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-or visit www.oracle.com if you need additional information or have any\n-questions.\n--->\n-<\/head>\n-<body bgcolor=\"white\">\n-\n-      <p>Provides the classes which implement advanced dynamic\n-\tloading.  See the chapter <em>Advanced Dynamic Loading<\/em> in\n-\tthe <a href=\"#spec\">JMX Specification<\/a>.<\/p>\n-\n-      <p>An MBean that is of a subclass of {@link\n-\tjava.lang.ClassLoader} can be used as a class loader to create\n-\tother MBeans via the method {@link\n-\tjavax.management.MBeanServer#createMBean(String, ObjectName,\n-\tObjectName, Object[], String[])}, and to instantiate arbitrary\n-\tobjects via the method {@link\n-\tjavax.management.MBeanServer#instantiate(String, ObjectName,\n-\tObject[], String[])}.<\/p>\n-\n-      <p>Every MBean Server has a <em>class loader repository<\/em>\n-\tcontaining all MBeans registered in that MBean Server that\n-\tare of a subclass of {@link java.lang.ClassLoader}.  The class\n-\tloader repository is used by the forms of the\n-\t<code>createMBean<\/code> and <code>instantiate<\/code> methods\n-\tin the {@link javax.management.MBeanServer MBeanServer}\n-\tinterface that do not have an explicit loader parameter.<\/p>\n-\n-      <p>If an MBean implements the interface {@link\n-\tjavax.management.loading.PrivateClassLoader PrivateClassLoader},\n-\tthen it is not added to the class loader repository.<\/p>\n-\n-    @see <a id=\"spec\" href=\"https:\/\/jcp.org\/aboutJava\/communityprocess\/mrel\/jsr160\/index2.html\">\n-      JMX Specification, version 1.4<\/a>\n-\n-      @since 1.5\n-<\/BODY>\n-<\/HTML>\n","filename":"src\/java.management\/share\/classes\/javax\/management\/loading\/package.html","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/**\n+ * <p>Provides the definition of the ModelMBean classes.  A Model\n+ * MBean is an MBean that acts as a bridge between the management\n+ * interface and the underlying managed resource.  Both the\n+ * management interface and the managed resource are specified as\n+ * Java objects.  The same Model MBean implementation can be\n+ * reused many times with different management interfaces and\n+ * managed resources, and it can provide common functionality\n+ * such as persistence and caching.<\/p>\n+ *\n+ * <p>A Model MBean implements the {@link\n+ * javax.management.modelmbean.ModelMBean ModelMBean} interface.\n+ * It is a {@link javax.management.DynamicMBean DynamicMBean}\n+ * whose {@link javax.management.DynamicMBean#getMBeanInfo()\n+ * getMBeanInfo} method returns an object implementing {@link\n+ * javax.management.modelmbean.ModelMBeanInfo\n+ * ModelMBeanInfo}.<\/p>\n+ *\n+ * <p>Every MBean has an {@link javax.management.MBeanInfo\n+ * MBeanInfo} with information about the MBean itself, and its\n+ * attributes, operations, constructors, and notifications.  A\n+ * Model MBean augments this <code>MBeanInfo<\/code> with {@link\n+ * javax.management.Descriptor Descriptor}s that encode\n+ * additional information in the form of (key,value) pairs.\n+ * Usually, <code>Descriptor<\/code>s are instances of {@link\n+ * javax.management.modelmbean.DescriptorSupport\n+ * DescriptorSupport}.<\/p>\n+ *\n+ * <p>The class {@link\n+ * javax.management.modelmbean.RequiredModelMBean\n+ * RequiredModelMBean} provides a standard Model MBean\n+ * implementation.<\/p>\n+ *\n+ * <p>The following example shows a Model MBean being used to make\n+ * the <code>get<\/code> method of a <code>HashMap<\/code>\n+ * available for management through an MBean server.  No other\n+ * methods are available through the MBean server.  There is\n+ * nothing special about <code>HashMap<\/code> here.  Public\n+ * methods from any public class can be exposed for management in\n+ * the same way.<\/p>\n+ *\n+ * <pre>\n+ * import java.lang.reflect.Method;\n+ * import java.util.HashMap;\n+ * import javax.management.*;\n+ * import javax.management.modelmbean.*;\n+ *\n+ * \/\/ ...\n+ *\n+ * MBeanServer mbs = MBeanServerFactory.createMBeanServer();\n+ * \/\/ The MBean Server\n+ *\n+ * HashMap map = new HashMap();\n+ * \/\/ The resource that will be managed\n+ *\n+ * \/\/ Construct the management interface for the Model MBean\n+ * Method getMethod = HashMap.class.getMethod(\"get\", new Class[] {Object.class});\n+ * ModelMBeanOperationInfo getInfo =\n+ *     new ModelMBeanOperationInfo(\"Get value for key\", getMethod);\n+ * ModelMBeanInfo mmbi =\n+ *     new ModelMBeanInfoSupport(HashMap.class.getName(),\n+ *                   \"Map of keys and values\",\n+ *                   null,  \/\/ no attributes\n+ *                   null,  \/\/ no constructors\n+ *                   new ModelMBeanOperationInfo[] {getInfo},\n+ *                   null); \/\/ no notifications\n+ *\n+ * \/\/ Make the Model MBean and link it to the resource\n+ * ModelMBean mmb = new RequiredModelMBean(mmbi);\n+ * mmb.setManagedResource(map, \"ObjectReference\");\n+ *\n+ * \/\/ Register the Model MBean in the MBean Server\n+ * ObjectName mapName = new ObjectName(\":type=Map,name=whatever\");\n+ * mbs.registerMBean(mmb, mapName);\n+ *\n+ * \/\/ Resource can evolve independently of the MBean\n+ * map.put(\"key\", \"value\");\n+ *\n+ * \/\/ Can access the \"get\" method through the MBean Server\n+ * mbs.invoke(mapName, \"get\", new Object[] {\"key\"}, new String[] {Object.class.getName()});\n+ * \/\/ returns \"value\"\n+ *     <\/pre>\n+ *\n+ * <h2><a id=\"spec\">Package Specification<\/a><\/h2>\n+ *\n+ * <ul>\n+ *   <li>See the <i>JMX 1.4 Specification<\/i>\n+ *      <a href=\"https:\/\/jcp.org\/aboutJava\/communityprocess\/mrel\/jsr160\/index2.html\">\n+ *          JMX Specification, version 1.4<\/a>\n+ * <\/ul>\n+ *\n+ * @since 1.5\n+ *\/\n+package javax.management.modelmbean;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/modelmbean\/package-info.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"},{"patch":"@@ -1,124 +0,0 @@\n-<html>\n-<head>\n-<title>javax.management.modelmbean package<\/title>\n-<!--\n-Copyright (c) 2000, 2017, Oracle and\/or its affiliates. All rights reserved.\n-DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n-This code is free software; you can redistribute it and\/or modify it\n-under the terms of the GNU General Public License version 2 only, as\n-published by the Free Software Foundation.  Oracle designates this\n-particular file as subject to the \"Classpath\" exception as provided\n-by Oracle in the LICENSE file that accompanied this code.\n-\n-This code is distributed in the hope that it will be useful, but WITHOUT\n-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-version 2 for more details (a copy is included in the LICENSE file that\n-accompanied this code).\n-\n-You should have received a copy of the GNU General Public License version\n-2 along with this work; if not, write to the Free Software Foundation,\n-Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n-Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-or visit www.oracle.com if you need additional information or have any\n-questions.\n--->\n-<\/head>\n-<body bgcolor=\"white\">\n-\n-    <p>Provides the definition of the ModelMBean classes.  A Model\n-      MBean is an MBean that acts as a bridge between the management\n-      interface and the underlying managed resource.  Both the\n-      management interface and the managed resource are specified as\n-      Java objects.  The same Model MBean implementation can be\n-      reused many times with different management interfaces and\n-      managed resources, and it can provide common functionality\n-      such as persistence and caching.<\/p>\n-\n-    <p>A Model MBean implements the {@link\n-      javax.management.modelmbean.ModelMBean ModelMBean} interface.\n-      It is a {@link javax.management.DynamicMBean DynamicMBean}\n-      whose {@link javax.management.DynamicMBean#getMBeanInfo()\n-      getMBeanInfo} method returns an object implementing {@link\n-      javax.management.modelmbean.ModelMBeanInfo\n-      ModelMBeanInfo}.<\/p>\n-\n-    <p>Every MBean has an {@link javax.management.MBeanInfo\n-      MBeanInfo} with information about the MBean itself, and its\n-      attributes, operations, constructors, and notifications.  A\n-      Model MBean augments this <code>MBeanInfo<\/code> with {@link\n-      javax.management.Descriptor Descriptor}s that encode\n-      additional information in the form of (key,value) pairs.\n-      Usually, <code>Descriptor<\/code>s are instances of {@link\n-      javax.management.modelmbean.DescriptorSupport\n-      DescriptorSupport}.<\/p>\n-\n-    <p>The class {@link\n-      javax.management.modelmbean.RequiredModelMBean\n-      RequiredModelMBean} provides a standard Model MBean\n-      implementation.<\/p>\n-\n-    <p>The following example shows a Model MBean being used to make\n-      the <code>get<\/code> method of a <code>HashMap<\/code>\n-      available for management through an MBean server.  No other\n-      methods are available through the MBean server.  There is\n-      nothing special about <code>HashMap<\/code> here.  Public\n-      methods from any public class can be exposed for management in\n-      the same way.<\/p>\n-\n-    <pre>\n-import java.lang.reflect.Method;\n-import java.util.HashMap;\n-import javax.management.*;\n-import javax.management.modelmbean.*;\n-\n-\/\/ ...\n-\n-MBeanServer mbs = MBeanServerFactory.createMBeanServer();\n-\/\/ The MBean Server\n-\n-HashMap map = new HashMap();\n-\/\/ The resource that will be managed\n-\n-\/\/ Construct the management interface for the Model MBean\n-Method getMethod = HashMap.class.getMethod(\"get\", new Class[] {Object.class});\n-ModelMBeanOperationInfo getInfo =\n-    new ModelMBeanOperationInfo(\"Get value for key\", getMethod);\n-ModelMBeanInfo mmbi =\n-    new ModelMBeanInfoSupport(HashMap.class.getName(),\n-\t\t\t      \"Map of keys and values\",\n-\t\t\t      null,  \/\/ no attributes\n-\t\t\t      null,  \/\/ no constructors\n-\t\t\t      new ModelMBeanOperationInfo[] {getInfo},\n-\t\t\t      null); \/\/ no notifications\n-\n-\/\/ Make the Model MBean and link it to the resource\n-ModelMBean mmb = new RequiredModelMBean(mmbi);\n-mmb.setManagedResource(map, \"ObjectReference\");\n-\n-\/\/ Register the Model MBean in the MBean Server\n-ObjectName mapName = new ObjectName(\":type=Map,name=whatever\");\n-mbs.registerMBean(mmb, mapName);\n-\n-\/\/ Resource can evolve independently of the MBean\n-map.put(\"key\", \"value\");\n-\n-\/\/ Can access the \"get\" method through the MBean Server\n-mbs.invoke(mapName, \"get\", new Object[] {\"key\"}, new String[] {Object.class.getName()});\n-\/\/ returns \"value\"\n-    <\/pre>\n-\n-    <h2><a id=\"spec\">Package Specification<\/a><\/h2>\n-\n-    <ul>\n-\t  <li>See the <i>JMX 1.4 Specification<\/i>\n-\t     <a href=\"https:\/\/jcp.org\/aboutJava\/communityprocess\/mrel\/jsr160\/index2.html\">\n-             JMX Specification, version 1.4<\/a>\n-    <\/ul>\n-\n-    @since 1.5\n-\n-  <\/BODY>\n-<\/HTML>\n","filename":"src\/java.management\/share\/classes\/javax\/management\/modelmbean\/package.html","additions":0,"deletions":124,"binary":false,"changes":124,"status":"deleted"},{"patch":"@@ -0,0 +1,187 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * <p>Provides the definition of the monitor classes.  A Monitor is\n+ * an MBean that periodically observes the value of an attribute in\n+ * one or more other MBeans.  If the attribute meets a certain\n+ * condition, the Monitor emits a {@link\n+ * javax.management.monitor.MonitorNotification\n+ * MonitorNotification}. When the monitor MBean periodically calls\n+ * {@link javax.management.MBeanServer#getAttribute getAttribute}\n+ * to retrieve the value of the attribute being monitored it does\n+ * so within the access control context of the\n+ * {@link javax.management.monitor.Monitor#start} caller.<\/p>\n+ *\n+ * <p id=\"complex\">The value being monitored can be a simple value\n+ * contained within a complex type. For example, the {@link\n+ * java.lang.management.MemoryMXBean MemoryMXBean} defined in\n+ * {@code java.lang.management} has an attribute\n+ * {@code HeapMemoryUsage} of type {@link\n+ * java.lang.management.MemoryUsage MemoryUsage}. To monitor the\n+ * amount of <i>used<\/i> memory, described by the {@code used}\n+ * property of {@code MemoryUsage}, you could monitor\n+ * \"{@code HeapMemoryUsage.used}\". That string would be the\n+ * argument to {@link\n+ * javax.management.monitor.MonitorMBean#setObservedAttribute(String)\n+ * setObservedAttribute}.<\/p>\n+ *\n+ * <p>The rules used to interpret an {@code ObservedAttribute} like\n+ * {@code \"HeapMemoryUsage.used\"} are as follows. Suppose the string is\n+ * <i>A.e<\/i> (so <i>A<\/i> would be {@code \"HeapMemoryUsage\"} and <i>e<\/i>\n+ * would be {@code \"used\"} in the example).<\/p>\n+ *\n+ * <p>First the value of the attribute <i>A<\/i> is obtained. Call it\n+ * <i>v<\/i>. A value <i>x<\/i> is extracted from <i>v<\/i> as follows:<\/p>\n+ *\n+ *   <ul>\n+ *\n+ *   <li>If <i>v<\/i> is a {@link javax.management.openmbean.CompositeData\n+ *   CompositeData} and if <i>v<\/i>.{@link\n+ *   javax.management.openmbean.CompositeData#get(String) get}(<i>e<\/i>)\n+ *   returns a value then <i>x<\/i> is that value.<\/li>\n+ *   <li>If <i>v<\/i> is an array and <i>e<\/i> is the string {@code \"length\"}\n+ *   then <i>x<\/i> is the length of the array.<\/li>\n+ *\n+ *   <li>If the above rules do not produce a value, and if introspection, as\n+ *   if by calling <a href=\"{@docRoot}\/java.desktop\/java\/beans\/Introspector.html#getBeanInfo(java.lang.Class)\">Introspector.getBeanInfo<\/a>\n+ *   , for the class of <i>v<\/i>\n+ *   (<i>v<\/i>.{@code getClass()}) identifies a property with the name\n+ *   <i>e<\/i>, then <i>x<\/i> is the result of reading the property value. <\/li>\n+ *\n+ *   <\/ul>\n+ *\n+ *   <p>The third rule means for example that if the attribute\n+ *   {@code HeapMemoryUsage} is a {@code MemoryUsage}, monitoring\n+ *   {@code \"HeapMemoryUsage.used\"} will obtain the observed value by\n+ *   calling {@code MemoryUsage.getUsed()}.<\/p>\n+ *\n+ *   <p>If the {@code ObservedAttribute} contains more than one period,\n+ *   for example {@code \"ConnectionPool.connectionStats.length\"}, then the\n+ *   above rules are applied iteratively. Here, <i>v<\/i> would initially be\n+ *   the value of the attribute {@code ConnectionPool}, and <i>x<\/i> would\n+ *   be derived by applying the above rules with <i>e<\/i> equal to\n+ *   {@code \"connectionStats\"}. Then <i>v<\/i> would be set to this <i>x<\/i>\n+ *   and a new <i>x<\/i> derived by applying the rules again with <i>e<\/i>\n+ *   equal to {@code \"length\"}.<\/p>\n+ *\n+ *   <p>Although it is recommended that attribute names be valid Java\n+ *   identifiers, it is possible for an attribute to be called\n+ *   {@code HeapMemoryUsage.used}. This means that an\n+ *   {@code ObservedAttribute} that is {@code HeapMemoryUsage.used}\n+ *   could mean that the value to observe is either an attribute of that\n+ *   name, or the property {@code used} within an attribute called\n+ *   {@code HeapMemoryUsage}. So for compatibility reasons, when the\n+ *   {@code ObservedAttribute} contains a period ({@code .}), the monitor\n+ *   will check whether an attribute exists whose name is the full\n+ *   {@code ObservedAttribute} string ({@code HeapMemoryUsage.used} in the\n+ *   example). It does this by calling {@link\n+ *   javax.management.MBeanServer#getMBeanInfo(javax.management.ObjectName)\n+ *   getMBeanInfo} for the observed MBean and looking for a contained {@link\n+ *   javax.management.MBeanAttributeInfo MBeanAttributeInfo} with the given\n+ *   name. If one is found, then that is what is monitored. If more than one\n+ *   MBean is being observed, the behavior is unspecified if some of them have\n+ *   a {@code HeapMemoryUsage.used} attribute and others do not. An\n+ *   implementation may therefore call {@code getMBeanInfo} on just one of\n+ *   the MBeans in this case. The behavior is also unspecified if the result\n+ *   of the check changes while the monitor is active.<\/p>\n+ *\n+ *   <p>The exact behavior of monitors is detailed in the\n+ * <a href=\"#spec\">JMX Specification<\/a>.  What follows is a\n+ * summary.<\/p>\n+ *\n+ *   <p>There are three kinds of Monitors:<\/p>\n+ *\n+ *   <ul>\n+ * <li>\n+ *\n+ *   <p>A {@link javax.management.monitor.CounterMonitor\n+ *     CounterMonitor} observes attributes of integer\n+ *     type.  The attributes are assumed to be non-negative, and\n+ *     monotonically increasing except for a possible\n+ *     <em>roll-over<\/em> at a specified <em>modulus<\/em>.  Each\n+ *     observed attribute has an associated <em>threshold<\/em>\n+ *     value.  A notification is sent when the attribute exceeds\n+ *     its threshold.<\/p>\n+ *\n+ *   <p>An <em>offset<\/em> value can be specified.  When an\n+ *     observed value exceeds its threshold, the threshold is\n+ *     incremented by the offset, or by a multiple of the offset\n+ *     sufficient to make the threshold greater than the new\n+ *     observed value.<\/p>\n+ *\n+ *   <p>A <code>CounterMonitor<\/code> can operate in\n+ *     <em>difference mode<\/em>.  In this mode, the value\n+ *     compared against the threshold is the difference between\n+ *     two successive observations of an attribute.<\/p>\n+ *\n+ * <\/li>\n+ * <li>\n+ *\n+ *   <p>A {@link javax.management.monitor.GaugeMonitor\n+ *     GaugeMonitor} observes attributes of numerical type.  Each\n+ *     observed attribute has an associated <em>high\n+ *       threshold<\/em> and <em>low threshold<\/em>.<\/p>\n+ *\n+ *   <p>When an observed attribute crosses the high threshold, if\n+ *     the <em>notify high<\/em> flag is true, then a notification\n+ *     is sent.  Subsequent crossings of the high threshold value\n+ *     will not trigger further notifications until the gauge value\n+ *     becomes less than or equal to the low threshold.<\/p>\n+ *\n+ *   <p>When an observed attribute crosses the low threshold, if\n+ *     the <em>notify low<\/em> flag is true, then a notification\n+ *     is sent.  Subsequent crossings of the low threshold value\n+ *     will not trigger further notifications until the gauge\n+ *     value becomes greater than or equal to the high\n+ *     threshold.<\/p>\n+ *\n+ *   <p>Typically, only one of the notify high and notify low\n+ *     flags is set.  The other threshold is used to provide a\n+ *     <em>hysteresis<\/em> mechanism to avoid the repeated\n+ *     triggering of notifications when an attribute makes small\n+ *     oscillations around the threshold value.<\/p>\n+ *\n+ *   <p>A <code>GaugeMonitor<\/code> can operate in <em>difference\n+ *       mode<\/em>.  In this mode, the value compared against the\n+ *     high and low thresholds is the difference between two\n+ *     successive observations of an attribute.<\/p>\n+ *\n+ * <\/li>\n+ * <li>\n+ *\n+ *   <p>A {@link javax.management.monitor.StringMonitor\n+ *     StringMonitor} observes attributes of type\n+ *     <code>String<\/code>.  A notification is sent when an\n+ *     observed attribute becomes equal and\/or not equal to a\n+ *     given string.<\/p>\n+ *\n+ * <\/li>\n+ *   <\/ul>\n+ * @see <a id=\"spec\" href=\"https:\/\/jcp.org\/aboutJava\/communityprocess\/mrel\/jsr160\/index2.html\">\n+ *   JMX Specification, version 1.4<\/a>\n+ *   @since 1.5\n+ *\/\n+package javax.management.monitor;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/monitor\/package-info.java","additions":187,"deletions":0,"binary":false,"changes":187,"status":"added"},{"patch":"@@ -1,191 +0,0 @@\n-<html>\n-<head>\n-<title>javax.management.monitor package<\/title>\n-<!--\n-Copyright (c) 1999, 2017, Oracle and\/or its affiliates. All rights reserved.\n-DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n-This code is free software; you can redistribute it and\/or modify it\n-under the terms of the GNU General Public License version 2 only, as\n-published by the Free Software Foundation.  Oracle designates this\n-particular file as subject to the \"Classpath\" exception as provided\n-by Oracle in the LICENSE file that accompanied this code.\n-\n-This code is distributed in the hope that it will be useful, but WITHOUT\n-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-version 2 for more details (a copy is included in the LICENSE file that\n-accompanied this code).\n-\n-You should have received a copy of the GNU General Public License version\n-2 along with this work; if not, write to the Free Software Foundation,\n-Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n-Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-or visit www.oracle.com if you need additional information or have any\n-questions.\n--->\n-<\/head>\n-<body bgcolor=\"white\">\n-      <p>Provides the definition of the monitor classes.  A Monitor is\n-      an MBean that periodically observes the value of an attribute in\n-      one or more other MBeans.  If the attribute meets a certain\n-      condition, the Monitor emits a {@link\n-      javax.management.monitor.MonitorNotification\n-      MonitorNotification}. When the monitor MBean periodically calls\n-      {@link javax.management.MBeanServer#getAttribute getAttribute}\n-      to retrieve the value of the attribute being monitored it does\n-      so within the access control context of the\n-      {@link javax.management.monitor.Monitor#start} caller.<\/p>\n-\n-      <p id=\"complex\">The value being monitored can be a simple value\n-      contained within a complex type. For example, the {@link\n-      java.lang.management.MemoryMXBean MemoryMXBean} defined in\n-      {@code java.lang.management} has an attribute\n-      {@code HeapMemoryUsage} of type {@link\n-      java.lang.management.MemoryUsage MemoryUsage}. To monitor the\n-      amount of <i>used<\/i> memory, described by the {@code used}\n-      property of {@code MemoryUsage}, you could monitor\n-      \"{@code HeapMemoryUsage.used}\". That string would be the\n-      argument to {@link\n-      javax.management.monitor.MonitorMBean#setObservedAttribute(String)\n-      setObservedAttribute}.<\/p>\n-\n-      <p>The rules used to interpret an {@code ObservedAttribute} like\n-      {@code \"HeapMemoryUsage.used\"} are as follows. Suppose the string is\n-      <i>A.e<\/i> (so <i>A<\/i> would be {@code \"HeapMemoryUsage\"} and <i>e<\/i>\n-      would be {@code \"used\"} in the example).<\/p>\n-\n-      <p>First the value of the attribute <i>A<\/i> is obtained. Call it\n-      <i>v<\/i>. A value <i>x<\/i> is extracted from <i>v<\/i> as follows:<\/p>\n-\n-      <ul>\n-          \n-      <li>If <i>v<\/i> is a {@link javax.management.openmbean.CompositeData\n-      CompositeData} and if <i>v<\/i>.{@link\n-      javax.management.openmbean.CompositeData#get(String) get}(<i>e<\/i>)\n-      returns a value then <i>x<\/i> is that value.<\/li>\n-      <li>If <i>v<\/i> is an array and <i>e<\/i> is the string {@code \"length\"}\n-      then <i>x<\/i> is the length of the array.<\/li>\n-      \n-      <li>If the above rules do not produce a value, and if introspection, as\n-      if by calling {@link java.beans.Introspector#getBeanInfo(Class) \n-      Introspector.getBeanInfo}, for the class of <i>v<\/i> \n-      (<i>v<\/i>.{@code getClass()}) identifies a property with the name \n-      <i>e<\/i>, then <i>x<\/i> is the result of reading the property value. <\/li>\n-      \n-      <\/ul>\n-\n-      <p>The third rule means for example that if the attribute\n-      {@code HeapMemoryUsage} is a {@code MemoryUsage}, monitoring\n-      {@code \"HeapMemoryUsage.used\"} will obtain the observed value by\n-      calling {@code MemoryUsage.getUsed()}.<\/p>\n-\n-      <p>If the {@code ObservedAttribute} contains more than one period,\n-      for example {@code \"ConnectionPool.connectionStats.length\"}, then the\n-      above rules are applied iteratively. Here, <i>v<\/i> would initially be\n-      the value of the attribute {@code ConnectionPool}, and <i>x<\/i> would\n-      be derived by applying the above rules with <i>e<\/i> equal to\n-      {@code \"connectionStats\"}. Then <i>v<\/i> would be set to this <i>x<\/i>\n-      and a new <i>x<\/i> derived by applying the rules again with <i>e<\/i>\n-      equal to {@code \"length\"}.<\/p>\n-\n-      <p>Although it is recommended that attribute names be valid Java\n-      identifiers, it is possible for an attribute to be called\n-      {@code HeapMemoryUsage.used}. This means that an\n-      {@code ObservedAttribute} that is {@code HeapMemoryUsage.used}\n-      could mean that the value to observe is either an attribute of that\n-      name, or the property {@code used} within an attribute called\n-      {@code HeapMemoryUsage}. So for compatibility reasons, when the\n-      {@code ObservedAttribute} contains a period ({@code .}), the monitor\n-      will check whether an attribute exists whose name is the full\n-      {@code ObservedAttribute} string ({@code HeapMemoryUsage.used} in the\n-      example). It does this by calling {@link\n-      javax.management.MBeanServer#getMBeanInfo(javax.management.ObjectName)\n-      getMBeanInfo} for the observed MBean and looking for a contained {@link\n-      javax.management.MBeanAttributeInfo MBeanAttributeInfo} with the given\n-      name. If one is found, then that is what is monitored. If more than one\n-      MBean is being observed, the behavior is unspecified if some of them have\n-      a {@code HeapMemoryUsage.used} attribute and others do not. An\n-      implementation may therefore call {@code getMBeanInfo} on just one of\n-      the MBeans in this case. The behavior is also unspecified if the result\n-      of the check changes while the monitor is active.<\/p>\n-\n-      <p>The exact behavior of monitors is detailed in the\n-\t<a href=\"#spec\">JMX Specification<\/a>.  What follows is a\n-\tsummary.<\/p>\n-\n-      <p>There are three kinds of Monitors:<\/p>\n-\n-      <ul>\n-\t<li>\n-\n-\t  <p>A {@link javax.management.monitor.CounterMonitor\n-\t    CounterMonitor} observes attributes of integer\n-\t    type.  The attributes are assumed to be non-negative, and\n-\t    monotonically increasing except for a possible\n-\t    <em>roll-over<\/em> at a specified <em>modulus<\/em>.  Each\n-\t    observed attribute has an associated <em>threshold<\/em>\n-\t    value.  A notification is sent when the attribute exceeds\n-\t    its threshold.<\/p>\n-\t  \n-\t  <p>An <em>offset<\/em> value can be specified.  When an\n-\t    observed value exceeds its threshold, the threshold is\n-\t    incremented by the offset, or by a multiple of the offset\n-\t    sufficient to make the threshold greater than the new\n-\t    observed value.<\/p>\n-\n-\t  <p>A <code>CounterMonitor<\/code> can operate in\n-\t    <em>difference mode<\/em>.  In this mode, the value\n-\t    compared against the threshold is the difference between\n-\t    two successive observations of an attribute.<\/p>\n-\t  \n-\t<\/li>\n-\t<li>\n-\n-\t  <p>A {@link javax.management.monitor.GaugeMonitor\n-\t    GaugeMonitor} observes attributes of numerical type.  Each\n-\t    observed attribute has an associated <em>high\n-\t      threshold<\/em> and <em>low threshold<\/em>.<\/p>\n-\n-\t  <p>When an observed attribute crosses the high threshold, if\n-\t    the <em>notify high<\/em> flag is true, then a notification\n-\t    is sent.  Subsequent crossings of the high threshold value\n-\t    will not trigger further notifications until the gauge value\n-\t    becomes less than or equal to the low threshold.<\/p>\n-\n-\t  <p>When an observed attribute crosses the low threshold, if\n-\t    the <em>notify low<\/em> flag is true, then a notification\n-\t    is sent.  Subsequent crossings of the low threshold value\n-\t    will not trigger further notifications until the gauge\n-\t    value becomes greater than or equal to the high\n-\t    threshold.<\/p>\n-\n-\t  <p>Typically, only one of the notify high and notify low\n-\t    flags is set.  The other threshold is used to provide a\n-\t    <em>hysteresis<\/em> mechanism to avoid the repeated\n-\t    triggering of notifications when an attribute makes small\n-\t    oscillations around the threshold value.<\/p>\n-\n-\t  <p>A <code>GaugeMonitor<\/code> can operate in <em>difference\n-\t      mode<\/em>.  In this mode, the value compared against the\n-\t    high and low thresholds is the difference between two\n-\t    successive observations of an attribute.<\/p>\n-\n-\t<\/li>\n-\t<li>\n-\n-\t  <p>A {@link javax.management.monitor.StringMonitor\n-\t    StringMonitor} observes attributes of type\n-\t    <code>String<\/code>.  A notification is sent when an\n-\t    observed attribute becomes equal and\/or not equal to a\n-\t    given string.<\/p>\n-\n-\t<\/li>\n-      <\/ul>\n-    @see <a id=\"spec\" href=\"https:\/\/jcp.org\/aboutJava\/communityprocess\/mrel\/jsr160\/index2.html\">\n-      JMX Specification, version 1.4<\/a>\n-      @since 1.5\n-\n-<\/BODY>\n-<\/HTML>\n","filename":"src\/java.management\/share\/classes\/javax\/management\/monitor\/package.html","additions":0,"deletions":191,"binary":false,"changes":191,"status":"deleted"},{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * <p>Provides the open data types and Open MBean descriptor classes.\n+ * An <em>Open MBean<\/em> is an MBean where the types of attributes\n+ * and of operation parameters and return values are built using a\n+ * small set of predefined Java classes.  Open MBeans facilitate\n+ * operation with remote management programs that do not necessarily\n+ * have access to application-specific types, including non-Java\n+ * programs.<\/p>\n+ *\n+ * <p>Every MBean has an {@link javax.management.MBeanInfo\n+ * MBeanInfo} with information about the MBean itself, and its\n+ * attributes, operations, constructors, and notifications.  In an\n+ * Open MBean, this <code>MBeanInfo<\/code> implements the {@link\n+ * javax.management.openmbean.OpenMBeanInfo OpenMBeanInfo}\n+ * interface, usually by being an instance of {@link\n+ * javax.management.openmbean.OpenMBeanInfoSupport\n+ * OpenMBeanInfoSupport}.<\/p>\n+ *\n+ * <p>The attribute information returned by {@link\n+ * javax.management.MBeanInfo#getAttributes()\n+ * MBeanInfo.getAttributes} for an Open MBean is an array of\n+ * objects implementing {@link\n+ * javax.management.openmbean.OpenMBeanAttributeInfo\n+ * OpenMBeanAttributeInfo}, usually instances of {@link\n+ * javax.management.openmbean.OpenMBeanAttributeInfoSupport\n+ * OpenMBeanAttributeInfoSupport}.  In addition to the usual\n+ * information about attributes, an\n+ * <code>OpenMBeanAttributeInfo<\/code> specifies the {@link\n+ * javax.management.openmbean.OpenType OpenType} of the attribute.\n+ * The possible <code>OpenType<\/code> values are predefined, which\n+ * is what ensures that remote managers will understand them.<\/p>\n+ *\n+ * <p>Similar remarks apply to the parameter types of operations and\n+ * constructors, and to the return types of operations.<\/p>\n+ *\n+ * <p>There is a distinction between an attribute's Java language\n+ * type, as returned by {@link\n+ * javax.management.MBeanAttributeInfo#getType() getType()}, and\n+ * its <code>OpenType<\/code>, as returned by {@link\n+ * javax.management.openmbean.OpenMBeanAttributeInfo#getOpenType()\n+ * getOpenType()}.  For example, if the Java language type is\n+ * <code>java.lang.String<\/code>, the <code>OpenType<\/code> will be\n+ * {@link javax.management.openmbean.SimpleType#STRING\n+ * SimpleType.String}.  If the Java language type is {@link\n+ * javax.management.openmbean.CompositeData}, the\n+ * <code>OpenType<\/code> will be a {@link\n+ * javax.management.openmbean.CompositeType CompositeType} that\n+ * describes the items in the <code>CompositeData<\/code> instances\n+ * for the attribute.<\/p>\n+ *\n+ * <h2><a id=\"constraints\">Default values and constraints<\/a><\/h2>\n+ *\n+ * <p>In Open MBeans, attributes and parameters can have default values\n+ * and\/or constraints associated with them in the {@code\n+ * OpenMBeanAttributeInfo} or {@code OpenMBeanParameterInfo}.\n+ * There are two ways to specify these constraints.  Either the\n+ * values are directly specified as parameters to one of the\n+ * constructors of {@code OpenMBeanAttributeInfoSupport} or\n+ * {@code OpenMBeanParameterInfoSupport}, for example\n+ * {@link\n+ * javax.management.openmbean.OpenMBeanParameterInfoSupport#OpenMBeanParameterInfoSupport(\n+ *String, String, OpenType, Object, Object[])}; or the values are\n+ * specified in a {@link javax.management.Descriptor Descriptor} given\n+ * as a parameter to one of the constructors.<\/p>\n+ *\n+ * <p>When a {@code Descriptor} is used, the fields of interest are\n+ * these:<\/p>\n+ *\n+ * <ul>\n+ *\n+ *   <li>{@code defaultValue} defines the value returned by\n+ * {@link javax.management.openmbean.OpenMBeanParameterInfo#getDefaultValue()\n+ * getDefaultValue()};\n+ *\n+ *   <li>{@code minValue} defines the value returned by {@link\n+ * javax.management.openmbean.OpenMBeanParameterInfo#getMinValue() getMinValue()};\n+ *\n+ *   <li>{@code maxValue} defines the value returned by {@link\n+ * javax.management.openmbean.OpenMBeanParameterInfo#getMaxValue() getMaxValue()};\n+ *\n+ *   <li>{@code legalValues} defines the values returned by {@link\n+ * javax.management.openmbean.OpenMBeanParameterInfo#getLegalValues() getLegalValues()}.\n+ *\n+ * <\/ul>\n+ *\n+ * <p>For {@code defaultValue}, {@code minValue}, and {@code\n+ *   maxValue}, the associated value must either be of the Java type\n+ *   corresponding to {@code openType}, or be a string that can be\n+ *   converted into that type.  The conversion uses the static method\n+ *   {@code valueOf(String)} if it finds one; otherwise a constructor\n+ *   with a single {@code String} parameter if it finds one; otherwise\n+ *   it fails.<\/p>\n+ *\n+ * <p>For {@code legalValues}, the associated value must be either\n+ *   an array or a {@code Set}, and the elements of the array or set\n+ *   must be convertible as described for {@code defaultValue} etc.<\/p>\n+ *\n+ * <p>The following conditions must be met for these fields:<\/p>\n+ *\n+ * <ul>\n+ *   <li>the values must be of the appropriate type, or be strings\n+ * that can be converted to the appropriate type as explained\n+ * above;\n+ *\n+ *   <li>if {@code legalValues} is present then neither {@code\n+ * minValue} nor {@code maxValue} must be present;\n+ *\n+ *   <li>if {@code defaultValue} is present then it must satisfy the\n+ * constraints defined by {@code legalValues}, {@code minValue}, or\n+ * {@code maxValue} when any of these is also present;\n+ *\n+ *   <li>if {@code minValue} and {@code maxValue} are both present\n+ * then {@code minValue} must not be greater than {@code maxValue}.\n+ * <\/ul>\n+ *\n+ * @see <a href=\"https:\/\/jcp.org\/aboutJava\/communityprocess\/mrel\/jsr160\/index2.html\">\n+ *   JMX Specification, version 1.4<\/a>\n+ *\n+ * @since 1.5\n+ *\/\n+package javax.management.openmbean;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/openmbean\/package-info.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"},{"patch":"@@ -1,151 +0,0 @@\n-<html>\n-<head>\n-<title>javax.management.openmbean package<\/title>\n-<!--\n-Copyright (c) 2001, 2017, Oracle and\/or its affiliates. All rights reserved.\n-DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n-This code is free software; you can redistribute it and\/or modify it\n-under the terms of the GNU General Public License version 2 only, as\n-published by the Free Software Foundation.  Oracle designates this\n-particular file as subject to the \"Classpath\" exception as provided\n-by Oracle in the LICENSE file that accompanied this code.\n-\n-This code is distributed in the hope that it will be useful, but WITHOUT\n-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-version 2 for more details (a copy is included in the LICENSE file that\n-accompanied this code).\n-\n-You should have received a copy of the GNU General Public License version\n-2 along with this work; if not, write to the Free Software Foundation,\n-Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n-Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-or visit www.oracle.com if you need additional information or have any\n-questions.\n--->\n-<\/head>\n-<body bgcolor=\"white\">\n-\n-    <p>Provides the open data types and Open MBean descriptor classes.\n-      An <em>Open MBean<\/em> is an MBean where the types of attributes\n-      and of operation parameters and return values are built using a\n-      small set of predefined Java classes.  Open MBeans facilitate\n-      operation with remote management programs that do not necessarily\n-      have access to application-specific types, including non-Java\n-      programs.<\/p>\n-\n-    <p>Every MBean has an {@link javax.management.MBeanInfo\n-      MBeanInfo} with information about the MBean itself, and its\n-      attributes, operations, constructors, and notifications.  In an\n-      Open MBean, this <code>MBeanInfo<\/code> implements the {@link\n-      javax.management.openmbean.OpenMBeanInfo OpenMBeanInfo}\n-      interface, usually by being an instance of {@link\n-      javax.management.openmbean.OpenMBeanInfoSupport\n-      OpenMBeanInfoSupport}.<\/p>\n-\n-    <p>The attribute information returned by {@link\n-      javax.management.MBeanInfo#getAttributes()\n-      MBeanInfo.getAttributes} for an Open MBean is an array of\n-      objects implementing {@link\n-      javax.management.openmbean.OpenMBeanAttributeInfo\n-      OpenMBeanAttributeInfo}, usually instances of {@link\n-      javax.management.openmbean.OpenMBeanAttributeInfoSupport\n-      OpenMBeanAttributeInfoSupport}.  In addition to the usual\n-      information about attributes, an\n-      <code>OpenMBeanAttributeInfo<\/code> specifies the {@link\n-      javax.management.openmbean.OpenType OpenType} of the attribute.\n-      The possible <code>OpenType<\/code> values are predefined, which\n-      is what ensures that remote managers will understand them.<\/p>\n-\n-    <p>Similar remarks apply to the parameter types of operations and\n-      constructors, and to the return types of operations.<\/p>\n-\n-    <p>There is a distinction between an attribute's Java language\n-      type, as returned by {@link\n-      javax.management.MBeanAttributeInfo#getType() getType()}, and\n-      its <code>OpenType<\/code>, as returned by {@link\n-      javax.management.openmbean.OpenMBeanAttributeInfo#getOpenType()\n-      getOpenType()}.  For example, if the Java language type is\n-      <code>java.lang.String<\/code>, the <code>OpenType<\/code> will be\n-      {@link javax.management.openmbean.SimpleType#STRING\n-      SimpleType.String}.  If the Java language type is {@link\n-      javax.management.openmbean.CompositeData}, the\n-      <code>OpenType<\/code> will be a {@link\n-      javax.management.openmbean.CompositeType CompositeType} that\n-      describes the items in the <code>CompositeData<\/code> instances\n-      for the attribute.<\/p>\n-\n-    <h2><a id=\"constraints\">Default values and constraints<\/a><\/h2>\n-\n-    <p>In Open MBeans, attributes and parameters can have default values\n-      and\/or constraints associated with them in the {@code\n-      OpenMBeanAttributeInfo} or {@code OpenMBeanParameterInfo}.\n-      There are two ways to specify these constraints.  Either the\n-      values are directly specified as parameters to one of the\n-      constructors of {@code OpenMBeanAttributeInfoSupport} or\n-      {@code OpenMBeanParameterInfoSupport}, for example\n-      {@link\n-      javax.management.openmbean.OpenMBeanParameterInfoSupport#OpenMBeanParameterInfoSupport(\n-      String, String, OpenType, Object, Object[])}; or the values are\n-      specified in a {@link javax.management.Descriptor Descriptor} given\n-      as a parameter to one of the constructors.<\/p>\n-\n-    <p>When a {@code Descriptor} is used, the fields of interest are\n-      these:<\/p>\n-\n-    <ul>\n-\n-      <li>{@code defaultValue} defines the value returned by\n-\t{@link javax.management.openmbean.OpenMBeanParameterInfo#getDefaultValue()\n-\tgetDefaultValue()};\n-\n-      <li>{@code minValue} defines the value returned by {@link\n-\tjavax.management.openmbean.OpenMBeanParameterInfo#getMinValue() getMinValue()};\n-\n-      <li>{@code maxValue} defines the value returned by {@link\n-\tjavax.management.openmbean.OpenMBeanParameterInfo#getMaxValue() getMaxValue()};\n-\n-      <li>{@code legalValues} defines the values returned by {@link\n-\tjavax.management.openmbean.OpenMBeanParameterInfo#getLegalValues() getLegalValues()}.\n-\n-    <\/ul>\n-\n-    <p>For {@code defaultValue}, {@code minValue}, and {@code\n-      maxValue}, the associated value must either be of the Java type\n-      corresponding to {@code openType}, or be a string that can be\n-      converted into that type.  The conversion uses the static method\n-      {@code valueOf(String)} if it finds one; otherwise a constructor\n-      with a single {@code String} parameter if it finds one; otherwise\n-      it fails.<\/p>\n-\n-    <p>For {@code legalValues}, the associated value must be either\n-      an array or a {@code Set}, and the elements of the array or set\n-      must be convertible as described for {@code defaultValue} etc.<\/p>\n-\n-    <p>The following conditions must be met for these fields:<\/p>\n-\n-    <ul>\n-      <li>the values must be of the appropriate type, or be strings\n-\tthat can be converted to the appropriate type as explained\n-\tabove;\n-\n-      <li>if {@code legalValues} is present then neither {@code\n-\tminValue} nor {@code maxValue} must be present;\n-\n-      <li>if {@code defaultValue} is present then it must satisfy the\n-\tconstraints defined by {@code legalValues}, {@code minValue}, or\n-\t{@code maxValue} when any of these is also present;\n-\n-      <li>if {@code minValue} and {@code maxValue} are both present\n-\tthen {@code minValue} must not be greater than {@code maxValue}.\n-    <\/ul>\n-\n-    @see <a href=\"https:\/\/jcp.org\/aboutJava\/communityprocess\/mrel\/jsr160\/index2.html\">\n-      JMX Specification, version 1.4<\/a>\n-\n-    @since 1.5\n-\n-<\/BODY>\n-<\/HTML>\n","filename":"src\/java.management\/share\/classes\/javax\/management\/openmbean\/package.html","additions":0,"deletions":151,"binary":false,"changes":151,"status":"deleted"},{"patch":"@@ -0,0 +1,393 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * <p>Provides the core classes for the Java Management Extensions.<\/p>\n+ *\n+ * <p>The Java Management Extensions\n+ * (JMX) API is a standard\n+ * API for management and monitoring.  Typical uses include:<\/p>\n+ *\n+ *     <ul>\n+ *         <li>consulting and changing application configuration<\/li>\n+ *\n+ *         <li>accumulating statistics about application behavior and\n+ *         making them available<\/li>\n+ *\n+ *         <li>notifying of state changes and erroneous conditions.<\/li>\n+ *     <\/ul>\n+ *\n+ *     <p>The JMX API can also be used as part of a solution for\n+ *     managing systems, networks, and so on.<\/p>\n+ *\n+ *     <p>The API includes remote access, so a remote management\n+ *         program can interact with a running application for these\n+ *     purposes.<\/p>\n+ *\n+ *     <h2>MBeans<\/h2>\n+ *\n+ *     <p>The fundamental notion of the JMX API is the <em>MBean<\/em>.\n+ *         An MBean is a named <em>managed object<\/em> representing a\n+ *         resource.  It has a <em id=\"mgIface\">management interface<\/em>\n+ *         which must be <em>public<\/em> and consist of:<\/p>\n+ *\n+ *     <ul>\n+ *         <li>named and typed attributes that can be read and\/or\n+ *         written<\/li>\n+ *\n+ *         <li>named and typed operations that can be invoked<\/li>\n+ *\n+ *         <li>typed notifications that can be emitted by the MBean.<\/li>\n+ *     <\/ul>\n+ *\n+ *     <p>For example, an MBean representing an application's\n+ *         configuration could have attributes representing the different\n+ *         configuration items.  Reading the <code>CacheSize<\/code>\n+ *         attribute would return the current value of that item.\n+ *         Writing it would update the item, potentially changing the\n+ *         behavior of the running application.  An operation such as\n+ *         <code>save<\/code> could store the current configuration\n+ *         persistently.  A notification such as\n+ *         <code>ConfigurationChangedNotification<\/code> could be sent\n+ *     every time the configuration is changed.<\/p>\n+ *\n+ *     <p>In the standard usage of the JMX API, MBeans are implemented\n+ *         as Java objects.  However, as explained below, these objects are\n+ *     not usually referenced directly.<\/p>\n+ *\n+ *\n+ *     <h3>Standard MBeans<\/h3>\n+ *\n+ *     <p>To make MBean implementation simple, the JMX API includes the\n+ *         notion of <em>Standard MBeans<\/em>.  A Standard MBean is one\n+ *         whose attributes and operations are deduced from a Java\n+ *         interface using certain naming patterns, similar to those used\n+ *         by JavaBeans.  For example, consider an interface like this:<\/p>\n+ *\n+ *     <pre>\n+ * public interface ConfigurationMBean {\n+ *      public int getCacheSize();\n+ *      public void setCacheSize(int size);\n+ *      public long getLastChangedTime();\n+ *      public void save();\n+ * }\n+ *     <\/pre>\n+ *\n+ *     <p>The methods <code>getCacheSize<\/code> and\n+ *         <code>setCacheSize<\/code> define a read-write attribute of\n+ *         type <code>int<\/code> called <code>CacheSize<\/code> (with an\n+ *     initial capital, unlike the JavaBeans convention).<\/p>\n+ *\n+ *     <p>The method <code>getLastChangedTime<\/code> defines an\n+ *         attribute of type <code>long<\/code> called\n+ *         <code>LastChangedTime<\/code>.  This is a read-only attribute,\n+ *     since there is no method <code>setLastChangedTime<\/code>.<\/p>\n+ *\n+ *     <p>The method <code>save<\/code> defines an operation called\n+ *         <code>save<\/code>.  It is not an attribute, since its name\n+ *         does not begin with <code>get<\/code>, <code>set<\/code>, or\n+ *     <code>is<\/code>.<\/p>\n+ *\n+ *     <p>The exact naming patterns for Standard MBeans are detailed in\n+ *     the <a href=\"#spec\">JMX Specification<\/a>.<\/p>\n+ *\n+ *     <p>There are two ways to make a Java object that is an MBean\n+ *         with this management interface.  One is for the object to be\n+ *         of a class that has exactly the same name as the Java\n+ *         interface but without the <code>MBean<\/code> suffix.  So in\n+ *         the example the object would be of the class\n+ *         <code>Configuration<\/code>, in the same Java package as\n+ *         <code>ConfigurationMBean<\/code>.  The second way is to use the\n+ *         {@link javax.management.StandardMBean StandardMBean}\n+ *     class.<\/p>\n+ *\n+ *\n+ *     <h3>MXBeans<\/h3>\n+ *\n+ *     <p>An <em>MXBean<\/em> is a variant of Standard MBean where complex\n+ *         types are mapped to a standard set of types defined in the\n+ *         {@link javax.management.openmbean} package.  MXBeans are appropriate\n+ *         if you would otherwise need to reference application-specific\n+ *         classes in your MBean interface.  They are described in detail\n+ *     in the specification for {@link javax.management.MXBean MXBean}.<\/p>\n+ *\n+ *\n+ *     <h3>Dynamic MBeans<\/h3>\n+ *\n+ *     <p>A <em>Dynamic MBean<\/em> is an MBean that defines its\n+ *         management interface at run-time.  For example, a configuration\n+ *         MBean could determine the names and types of the attributes it\n+ *     exposes by parsing an XML file.<\/p>\n+ *\n+ *     <p>Any Java object of a class that implements the {@link\n+ *         javax.management.DynamicMBean DynamicMBean} interface is a\n+ *     Dynamic MBean.<\/p>\n+ *\n+ *\n+ *     <h3>Open MBeans<\/h3>\n+ *\n+ *     <p>An <em>Open MBean<\/em> is a kind of Dynamic MBean where the\n+ *         types of attributes and of operation parameters and return\n+ *         values are built using a small set of predefined Java classes.\n+ *         Open MBeans facilitate operation with remote management programs\n+ *         that do not necessarily have access to application-specific\n+ *         types, including non-Java programs.  Open MBeans are defined by\n+ *         the package <a href=\"openmbean\/package-summary.html\"><code>\n+ *     javax.management.openmbean<\/code><\/a>.<\/p>\n+ *\n+ *\n+ *     <h3>Model MBeans<\/h3>\n+ *\n+ *     <p>A <em>Model MBean<\/em> is a kind of Dynamic MBean that acts\n+ *         as a bridge between the management interface and the\n+ *         underlying managed resource.  Both the management interface and\n+ *         the managed resource are specified as Java objects.  The same\n+ *         Model MBean implementation can be reused many times with\n+ *         different management interfaces and managed resources, and it can\n+ *         provide common functionality such as persistence and caching.\n+ *         Model MBeans are defined by the package\n+ *         <a href=\"modelmbean\/package-summary.html\"><code>\n+ *     javax.management.modelmbean<\/code><\/a>.<\/p>\n+ *\n+ *\n+ *     <h2>MBean Server<\/h2>\n+ *\n+ *     <p>To be useful, an MBean must be registered in an <em>MBean\n+ *         Server<\/em>.  An MBean Server is a repository of MBeans.\n+ *         Usually the only access to the MBeans is through the MBean\n+ *         Server.  In other words, code no longer accesses the Java\n+ *         object implementing the MBean directly, but instead accesses\n+ *         the MBean by name through the MBean Server.  Each MBean has a\n+ *         unique name within the MBean Server, defined by the {@link\n+ *     javax.management.ObjectName ObjectName} class.<\/p>\n+ *\n+ *     <p>An MBean Server is an object implementing the interface\n+ *         {@link javax.management.MBeanServer MBeanServer}.\n+ *         The most convenient MBean Server to use is the\n+ *         <em>Platform MBean Server<\/em>.  This is a\n+ *         single MBean Server that can be shared by different managed\n+ *         components running within the same Java Virtual Machine.  The\n+ *         Platform MBean Server is accessed with the method {@link\n+ *     java.lang.management.ManagementFactory#getPlatformMBeanServer()}.<\/p>\n+ *\n+ *     <p>Application code can also create a new MBean Server, or\n+ *         access already-created MBean Servers, using the {@link\n+ *     javax.management.MBeanServerFactory MBeanServerFactory} class.<\/p>\n+ *\n+ *\n+ *     <h3>Creating MBeans in the MBean Server<\/h3>\n+ *\n+ *     <p>There are two ways to create an MBean.  One is to construct a\n+ *         Java object that will be the MBean, then use the {@link\n+ *         javax.management.MBeanServer#registerMBean registerMBean}\n+ *         method to register it in the MBean Server.  The other is to\n+ *         create and register the MBean in a single operation using one\n+ *         of the {@link javax.management.MBeanServer#createMBean(String,\n+ *     javax.management.ObjectName) createMBean} methods.<\/p>\n+ *\n+ *     <p>The <code>registerMBean<\/code> method is simpler for local\n+ *         use, but cannot be used remotely.  The\n+ *         <code>createMBean<\/code> method can be used remotely, but\n+ *     sometimes requires attention to class loading issues.<\/p>\n+ *\n+ *     <p>An MBean can perform actions when it is registered in or\n+ *         unregistered from an MBean Server if it implements the {@link\n+ *         javax.management.MBeanRegistration MBeanRegistration}\n+ *     interface.<\/p>\n+ *\n+ *\n+ *     <h3>Accessing MBeans in the MBean Server<\/h3>\n+ *\n+ *     <p>Given an <code>ObjectName<\/code> <code>name<\/code> and an\n+ *         <code>MBeanServer<\/code> <code>mbs<\/code>, you can access\n+ *     attributes and operations as in this example:<\/p>\n+ *\n+ *     <pre>\n+ * int cacheSize = mbs.getAttribute(name, \"CacheSize\");\n+ * {@link javax.management.Attribute Attribute} newCacheSize =\n+ *      new Attribute(\"CacheSize\", new Integer(2000));\n+ * mbs.setAttribute(name, newCacheSize);\n+ * mbs.invoke(name, \"save\", new Object[0], new Class[0]);\n+ *     <\/pre>\n+ *\n+ *     <p id=\"proxy\">Alternatively, if you have a Java interface that\n+ *         corresponds to the management interface for the MBean, you can use an\n+ *     <em>MBean proxy<\/em> like this:<\/p>\n+ *\n+ *     <pre>\n+ * ConfigurationMBean conf =\n+ *     {@link javax.management.JMX#newMBeanProxy\n+ *         JMX.newMBeanProxy}(mbs, name, ConfigurationMBean.class);\n+ * int cacheSize = conf.getCacheSize();\n+ * conf.setCacheSize(2000);\n+ * conf.save();\n+ *     <\/pre>\n+ *\n+ *     <p>Using an MBean proxy is just a convenience.  The second\n+ *         example ends up calling the same <code>MBeanServer<\/code>\n+ *     operations as the first one.<\/p>\n+ *\n+ *     <p>An MBean Server can be queried for MBeans whose names match\n+ *         certain patterns and\/or whose attributes meet certain\n+ *         constraints.  Name patterns are constructed using the {@link\n+ *         javax.management.ObjectName ObjectName} class and constraints\n+ *         are constructed using the {@link javax.management.Query Query}\n+ *         class.  The methods {@link\n+ *         javax.management.MBeanServer#queryNames queryNames} and {@link\n+ *         javax.management.MBeanServer#queryMBeans queryMBeans} then\n+ *     perform the query.<\/p>\n+ *\n+ *\n+ *     <h3>MBean lifecycle<\/h3>\n+ *\n+ *     <p>An MBean can implement the {@link javax.management.MBeanRegistration\n+ *         MBeanRegistration} interface in order to be told when it is registered\n+ *         and unregistered in the MBean Server. Additionally, the {@link\n+ *         javax.management.MBeanRegistration#preRegister preRegister} method\n+ *         allows the MBean to get a reference to the <code>MBeanServer<\/code>\n+ *         object and to get its <code>ObjectName<\/code> within the MBean\n+ *     Server.<\/p>\n+ *\n+ *\n+ *     <h2>Notifications<\/h2>\n+ *\n+ *     <p>A <em>notification<\/em> is an instance of the {@link\n+ *         javax.management.Notification Notification} class or a\n+ *         subclass.  In addition to its Java class, it has a\n+ *         <em>type<\/em> string that can distinguish it from other\n+ *     notifications of the same class.<\/p>\n+ *\n+ *     <p>An MBean that will emit notifications must implement the\n+ *         {@link javax.management.NotificationBroadcaster\n+ *         NotificationBroadcaster} or {@link\n+ *         javax.management.NotificationEmitter NotificationEmitter}\n+ *         interface.  Usually, it does this by subclassing\n+ *         {@link javax.management.NotificationBroadcasterSupport\n+ *         NotificationBroadcasterSupport} or delegating to an instance of\n+ *     that class. Here is an example:<\/p>\n+ *\n+ *     <pre>\n+ * public class Configuration <b>extends NotificationBroadcasterSupport<\/b>\n+ *         implements ConfigurationMBean {\n+ *     ...\n+ *     private void updated() {\n+ *         Notification n = new Notification(...);\n+ *         <b>{@link javax.management.NotificationBroadcasterSupport#sendNotification\n+ *         sendNotification}(n)<\/b>;\n+ *     }\n+ * }\n+ *     <\/pre>\n+ *\n+ *\n+ *     <p>Notifications can be received by a <em>listener<\/em>, which\n+ *         is an object that implements the {@link\n+ *         javax.management.NotificationListener NotificationListener}\n+ *         interface.  You can add a listener to an MBean with the method\n+ *         {@link\n+ *         javax.management.MBeanServer#addNotificationListener(ObjectName,\n+ *         NotificationListener, NotificationFilter, Object)}.\n+ *         You can optionally supply a <em>filter<\/em> to this method, to\n+ *         select only notifications of interest.  A filter is an object\n+ *         that implements the {@link javax.management.NotificationFilter\n+ *     NotificationFilter} interface.<\/p>\n+ *\n+ *     <p>An MBean can be a listener for notifications emitted by other\n+ *         MBeans in the same MBean Server.  In this case, it implements\n+ *         {@link javax.management.NotificationListener\n+ *         NotificationListener} and the method {@link\n+ *         javax.management.MBeanServer#addNotificationListener(ObjectName,\n+ *     ObjectName, NotificationFilter, Object)} is used to listen.<\/p>\n+ *\n+ *\n+ *     <h2>Remote Access to MBeans<\/h2>\n+ *\n+ *     <p>An MBean Server can be accessed remotely through a\n+ *         <em>connector<\/em>.  A connector allows a remote Java\n+ *         application to access an MBean Server in essentially the same\n+ *         way as a local one.  The package\n+ *         <a href=\"remote\/package-summary.html\"><code>\n+ *     javax.management.remote<\/code><\/a> defines connectors.<\/p>\n+ *\n+ *     <p>The JMX specification also defines the notion of an\n+ *         <em>adaptor<\/em>.  An adaptor translates between requests in a\n+ *         protocol such as SNMP or HTML and accesses to an MBean Server.\n+ *         So for example an SNMP GET operation might result in a\n+ *     <code>getAttribute<\/code> on the MBean Server.<\/p>\n+ *\n+ * <h3 id=\"interop\">Interoperability between versions of the JMX\n+ *   specification<\/h3>\n+ *\n+ *     <p>When a client connects to a server using the JMX Remote\n+ *         API, it is possible that they do not have the same version\n+ *         of the JMX specification.  The version of the JMX\n+ *         specification described here is version 1.4.  Previous\n+ *         versions were 1.0, 1.1, and 1.2.  (There was no 1.3.)\n+ *         The standard JMX Remote API is defined to work with version\n+ *         1.2 onwards, so in standards-based deployment the only\n+ *         interoperability questions that arise concern version 1.2\n+ *     onwards.<\/p>\n+ *\n+ *     <p>Every version of the JMX specification continues to\n+ *         implement the features of previous versions.  So when the\n+ *         client is running an earlier version than the server, there\n+ *         should not be any interoperability concerns.<\/p>\n+ *\n+ *     <p>When the client is running a later version than the server,\n+ *         certain newer features may not be available, as detailed in\n+ *         the next sections.  The client can determine the server's\n+ *         version by examining the {@link\n+ *         javax.management.MBeanServerDelegateMBean#getSpecificationVersion\n+ *         SpecificationVersion} attribute of the {@code\n+ *     MBeanServerDelegate}.<\/p>\n+ *\n+ *     <h4 id=\"interop-1.2\">If the remote MBean Server is 1.2<\/h4>\n+ *\n+ * <ul>\n+ *\n+ *         <li><p>You cannot use wildcards in a key property of an\n+ *             {@link javax.management.ObjectName ObjectName}, for\n+ *             example {@code domain:type=Foo,name=*}. Wildcards that\n+ *             match whole properties are still allowed, for example\n+ *         {@code *:*} or {@code *:type=Foo,*}.<\/p>\n+ *\n+ *         <li><p>You cannot use {@link\n+ *             javax.management.Query#isInstanceOf Query.isInstanceOf}\n+ *         in a query.<\/p>\n+ *\n+ *         <li><p>You cannot use dot syntax such as {@code\n+ *             HeapMemoryUsage.used} in the {@linkplain\n+ *             javax.management.monitor.Monitor#setObservedAttribute\n+ *             observed attribute} of a monitor, as described in the\n+ *             documentation for the {@link javax.management.monitor}\n+ *         package.<\/p>\n+ *\n+ *     <\/ul>\n+ *\n+ *     @see <a id=\"spec\" href=\"https:\/\/jcp.org\/aboutJava\/communityprocess\/mrel\/jsr160\/index2.html\">\n+ *     JMX Specification, version 1.4<\/a>\n+ *\n+ *     @since 1.5\n+ *\/\n+package javax.management;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/package-info.java","additions":393,"deletions":0,"binary":false,"changes":393,"status":"added"},{"patch":"@@ -1,397 +0,0 @@\n-<html>\n-    <head>\n-        <title>javax.management package<\/title>\n-        <!--\n-Copyright (c) 1999, 2017, Oracle and\/or its affiliates. All rights reserved.\n-DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n-This code is free software; you can redistribute it and\/or modify it\n-under the terms of the GNU General Public License version 2 only, as\n-published by the Free Software Foundation.  Oracle designates this\n-particular file as subject to the \"Classpath\" exception as provided\n-by Oracle in the LICENSE file that accompanied this code.\n-\n-This code is distributed in the hope that it will be useful, but WITHOUT\n-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-version 2 for more details (a copy is included in the LICENSE file that\n-accompanied this code).\n-\n-You should have received a copy of the GNU General Public License version\n-2 along with this work; if not, write to the Free Software Foundation,\n-Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n-Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-or visit www.oracle.com if you need additional information or have any\n-questions.\n-        -->\n-    <\/head>\n-    <body bgcolor=\"white\">\n-        <p>Provides the core classes for the Java Management Extensions.<\/p>\n-\n-        <p>The Java Management Extensions\n-            (JMX) API is a standard\n-        API for management and monitoring.  Typical uses include:<\/p>\n-\n-        <ul>\n-            <li>consulting and changing application configuration<\/li>\n-\n-            <li>accumulating statistics about application behavior and\n-            making them available<\/li>\n-\n-            <li>notifying of state changes and erroneous conditions.<\/li>\n-        <\/ul>\n-\n-        <p>The JMX API can also be used as part of a solution for\n-        managing systems, networks, and so on.<\/p>\n-\n-        <p>The API includes remote access, so a remote management\n-            program can interact with a running application for these\n-        purposes.<\/p>\n-\n-        <h2>MBeans<\/h2>\n-\n-        <p>The fundamental notion of the JMX API is the <em>MBean<\/em>.\n-            An MBean is a named <em>managed object<\/em> representing a\n-            resource.  It has a <em id=\"mgIface\">management interface<\/em>\n-            which must be <em>public<\/em> and consist of:<\/p>\n-\n-        <ul>\n-            <li>named and typed attributes that can be read and\/or\n-            written<\/li>\n-\n-            <li>named and typed operations that can be invoked<\/li>\n-\n-            <li>typed notifications that can be emitted by the MBean.<\/li>\n-        <\/ul>\n-\n-        <p>For example, an MBean representing an application's\n-            configuration could have attributes representing the different\n-            configuration items.  Reading the <code>CacheSize<\/code>\n-            attribute would return the current value of that item.\n-            Writing it would update the item, potentially changing the\n-            behavior of the running application.  An operation such as\n-            <code>save<\/code> could store the current configuration\n-            persistently.  A notification such as\n-            <code>ConfigurationChangedNotification<\/code> could be sent\n-        every time the configuration is changed.<\/p>\n-\n-        <p>In the standard usage of the JMX API, MBeans are implemented\n-            as Java objects.  However, as explained below, these objects are\n-        not usually referenced directly.<\/p>\n-\n-\n-        <h3>Standard MBeans<\/h3>\n-\n-        <p>To make MBean implementation simple, the JMX API includes the\n-            notion of <em>Standard MBeans<\/em>.  A Standard MBean is one\n-            whose attributes and operations are deduced from a Java\n-            interface using certain naming patterns, similar to those used\n-            by JavaBeans.  For example, consider an interface like this:<\/p>\n-\n-        <pre>\n-    public interface ConfigurationMBean {\n-         public int getCacheSize();\n-         public void setCacheSize(int size);\n-         public long getLastChangedTime();\n-         public void save();\n-    }\n-        <\/pre>\n-\n-        <p>The methods <code>getCacheSize<\/code> and\n-            <code>setCacheSize<\/code> define a read-write attribute of\n-            type <code>int<\/code> called <code>CacheSize<\/code> (with an\n-        initial capital, unlike the JavaBeans convention).<\/p>\n-\n-        <p>The method <code>getLastChangedTime<\/code> defines an\n-            attribute of type <code>long<\/code> called\n-            <code>LastChangedTime<\/code>.  This is a read-only attribute,\n-        since there is no method <code>setLastChangedTime<\/code>.<\/p>\n-\n-        <p>The method <code>save<\/code> defines an operation called\n-            <code>save<\/code>.  It is not an attribute, since its name\n-            does not begin with <code>get<\/code>, <code>set<\/code>, or\n-        <code>is<\/code>.<\/p>\n-\n-        <p>The exact naming patterns for Standard MBeans are detailed in\n-        the <a href=\"#spec\">JMX Specification<\/a>.<\/p>\n-\n-        <p>There are two ways to make a Java object that is an MBean\n-            with this management interface.  One is for the object to be\n-            of a class that has exactly the same name as the Java\n-            interface but without the <code>MBean<\/code> suffix.  So in\n-            the example the object would be of the class\n-            <code>Configuration<\/code>, in the same Java package as\n-            <code>ConfigurationMBean<\/code>.  The second way is to use the\n-            {@link javax.management.StandardMBean StandardMBean}\n-        class.<\/p>\n-\n-\n-        <h3>MXBeans<\/h3>\n-\n-        <p>An <em>MXBean<\/em> is a variant of Standard MBean where complex\n-            types are mapped to a standard set of types defined in the\n-            {@link javax.management.openmbean} package.  MXBeans are appropriate\n-            if you would otherwise need to reference application-specific\n-            classes in your MBean interface.  They are described in detail\n-        in the specification for {@link javax.management.MXBean MXBean}.<\/p>\n-\n-\n-        <h3>Dynamic MBeans<\/h3>\n-\n-        <p>A <em>Dynamic MBean<\/em> is an MBean that defines its\n-            management interface at run-time.  For example, a configuration\n-            MBean could determine the names and types of the attributes it\n-        exposes by parsing an XML file.<\/p>\n-\n-        <p>Any Java object of a class that implements the {@link\n-            javax.management.DynamicMBean DynamicMBean} interface is a\n-        Dynamic MBean.<\/p>\n-\n-\n-        <h3>Open MBeans<\/h3>\n-\n-        <p>An <em>Open MBean<\/em> is a kind of Dynamic MBean where the\n-            types of attributes and of operation parameters and return\n-            values are built using a small set of predefined Java classes.\n-            Open MBeans facilitate operation with remote management programs\n-            that do not necessarily have access to application-specific\n-            types, including non-Java programs.  Open MBeans are defined by\n-            the package <a href=\"openmbean\/package-summary.html\"><code>\n-        javax.management.openmbean<\/code><\/a>.<\/p>\n-\n-\n-        <h3>Model MBeans<\/h3>\n-\n-        <p>A <em>Model MBean<\/em> is a kind of Dynamic MBean that acts\n-            as a bridge between the management interface and the\n-            underlying managed resource.  Both the management interface and\n-            the managed resource are specified as Java objects.  The same\n-            Model MBean implementation can be reused many times with\n-            different management interfaces and managed resources, and it can\n-            provide common functionality such as persistence and caching.\n-            Model MBeans are defined by the package\n-            <a href=\"modelmbean\/package-summary.html\"><code>\n-        javax.management.modelmbean<\/code><\/a>.<\/p>\n-\n-\n-        <h2>MBean Server<\/h2>\n-\n-        <p>To be useful, an MBean must be registered in an <em>MBean\n-            Server<\/em>.  An MBean Server is a repository of MBeans.\n-            Usually the only access to the MBeans is through the MBean\n-            Server.  In other words, code no longer accesses the Java\n-            object implementing the MBean directly, but instead accesses\n-            the MBean by name through the MBean Server.  Each MBean has a\n-            unique name within the MBean Server, defined by the {@link\n-        javax.management.ObjectName ObjectName} class.<\/p>\n-\n-        <p>An MBean Server is an object implementing the interface\n-            {@link javax.management.MBeanServer MBeanServer}.\n-            The most convenient MBean Server to use is the\n-            <em>Platform MBean Server<\/em>.  This is a\n-            single MBean Server that can be shared by different managed\n-            components running within the same Java Virtual Machine.  The\n-            Platform MBean Server is accessed with the method {@link\n-        java.lang.management.ManagementFactory#getPlatformMBeanServer()}.<\/p>\n-\n-        <p>Application code can also create a new MBean Server, or\n-            access already-created MBean Servers, using the {@link\n-        javax.management.MBeanServerFactory MBeanServerFactory} class.<\/p>\n-\n-\n-        <h3>Creating MBeans in the MBean Server<\/h3>\n-\n-        <p>There are two ways to create an MBean.  One is to construct a\n-            Java object that will be the MBean, then use the {@link\n-            javax.management.MBeanServer#registerMBean registerMBean}\n-            method to register it in the MBean Server.  The other is to\n-            create and register the MBean in a single operation using one\n-            of the {@link javax.management.MBeanServer#createMBean(String,\n-        javax.management.ObjectName) createMBean} methods.<\/p>\n-\n-        <p>The <code>registerMBean<\/code> method is simpler for local\n-            use, but cannot be used remotely.  The\n-            <code>createMBean<\/code> method can be used remotely, but\n-        sometimes requires attention to class loading issues.<\/p>\n-\n-        <p>An MBean can perform actions when it is registered in or\n-            unregistered from an MBean Server if it implements the {@link\n-            javax.management.MBeanRegistration MBeanRegistration}\n-        interface.<\/p>\n-\n-\n-        <h3>Accessing MBeans in the MBean Server<\/h3>\n-\n-        <p>Given an <code>ObjectName<\/code> <code>name<\/code> and an\n-            <code>MBeanServer<\/code> <code>mbs<\/code>, you can access\n-        attributes and operations as in this example:<\/p>\n-\n-        <pre>\n-    int cacheSize = mbs.getAttribute(name, \"CacheSize\");\n-    {@link javax.management.Attribute Attribute} newCacheSize =\n-         new Attribute(\"CacheSize\", new Integer(2000));\n-    mbs.setAttribute(name, newCacheSize);\n-    mbs.invoke(name, \"save\", new Object[0], new Class[0]);\n-        <\/pre>\n-\n-        <p id=\"proxy\">Alternatively, if you have a Java interface that\n-            corresponds to the management interface for the MBean, you can use an\n-        <em>MBean proxy<\/em> like this:<\/p>\n-\n-        <pre>\n-    ConfigurationMBean conf =\n-        {@link javax.management.JMX#newMBeanProxy\n-            JMX.newMBeanProxy}(mbs, name, ConfigurationMBean.class);\n-    int cacheSize = conf.getCacheSize();\n-    conf.setCacheSize(2000);\n-    conf.save();\n-        <\/pre>\n-\n-        <p>Using an MBean proxy is just a convenience.  The second\n-            example ends up calling the same <code>MBeanServer<\/code>\n-        operations as the first one.<\/p>\n-\n-        <p>An MBean Server can be queried for MBeans whose names match\n-            certain patterns and\/or whose attributes meet certain\n-            constraints.  Name patterns are constructed using the {@link\n-            javax.management.ObjectName ObjectName} class and constraints\n-            are constructed using the {@link javax.management.Query Query}\n-            class.  The methods {@link\n-            javax.management.MBeanServer#queryNames queryNames} and {@link\n-            javax.management.MBeanServer#queryMBeans queryMBeans} then\n-        perform the query.<\/p>\n-\n-\n-        <h3>MBean lifecycle<\/h3>\n-\n-        <p>An MBean can implement the {@link javax.management.MBeanRegistration\n-            MBeanRegistration} interface in order to be told when it is registered\n-            and unregistered in the MBean Server. Additionally, the {@link\n-            javax.management.MBeanRegistration#preRegister preRegister} method\n-            allows the MBean to get a reference to the <code>MBeanServer<\/code>\n-            object and to get its <code>ObjectName<\/code> within the MBean\n-        Server.<\/p>\n-\n-\n-        <h2>Notifications<\/h2>\n-\n-        <p>A <em>notification<\/em> is an instance of the {@link\n-            javax.management.Notification Notification} class or a\n-            subclass.  In addition to its Java class, it has a\n-            <em>type<\/em> string that can distinguish it from other\n-        notifications of the same class.<\/p>\n-\n-        <p>An MBean that will emit notifications must implement the\n-            {@link javax.management.NotificationBroadcaster\n-            NotificationBroadcaster} or {@link\n-            javax.management.NotificationEmitter NotificationEmitter}\n-            interface.  Usually, it does this by subclassing\n-            {@link javax.management.NotificationBroadcasterSupport\n-            NotificationBroadcasterSupport} or delegating to an instance of\n-        that class. Here is an example:<\/p>\n-\n-        <pre>\n-    public class Configuration <b>extends NotificationBroadcasterSupport<\/b>\n-            implements ConfigurationMBean {\n-        ...\n-        private void updated() {\n-            Notification n = new Notification(...);\n-            <b>{@link javax.management.NotificationBroadcasterSupport#sendNotification\n-            sendNotification}(n)<\/b>;\n-        }\n-    }\n-        <\/pre>\n-\n-\n-        <p>Notifications can be received by a <em>listener<\/em>, which\n-            is an object that implements the {@link\n-            javax.management.NotificationListener NotificationListener}\n-            interface.  You can add a listener to an MBean with the method\n-            {@link\n-            javax.management.MBeanServer#addNotificationListener(ObjectName,\n-            NotificationListener, NotificationFilter, Object)}.\n-            You can optionally supply a <em>filter<\/em> to this method, to\n-            select only notifications of interest.  A filter is an object\n-            that implements the {@link javax.management.NotificationFilter\n-        NotificationFilter} interface.<\/p>\n-\n-        <p>An MBean can be a listener for notifications emitted by other\n-            MBeans in the same MBean Server.  In this case, it implements\n-            {@link javax.management.NotificationListener\n-            NotificationListener} and the method {@link\n-            javax.management.MBeanServer#addNotificationListener(ObjectName,\n-        ObjectName, NotificationFilter, Object)} is used to listen.<\/p>\n-\n-\n-        <h2>Remote Access to MBeans<\/h2>\n-\n-        <p>An MBean Server can be accessed remotely through a\n-            <em>connector<\/em>.  A connector allows a remote Java\n-            application to access an MBean Server in essentially the same\n-            way as a local one.  The package\n-            <a href=\"remote\/package-summary.html\"><code>\n-        javax.management.remote<\/code><\/a> defines connectors.<\/p>\n-\n-        <p>The JMX specification also defines the notion of an\n-            <em>adaptor<\/em>.  An adaptor translates between requests in a\n-            protocol such as SNMP or HTML and accesses to an MBean Server.\n-            So for example an SNMP GET operation might result in a\n-        <code>getAttribute<\/code> on the MBean Server.<\/p>\n-\n-\t<h3 id=\"interop\">Interoperability between versions of the JMX\n-\t  specification<\/h3>\n-\n-        <p>When a client connects to a server using the JMX Remote\n-            API, it is possible that they do not have the same version\n-            of the JMX specification.  The version of the JMX\n-            specification described here is version 1.4.  Previous\n-            versions were 1.0, 1.1, and 1.2.  (There was no 1.3.)\n-            The standard JMX Remote API is defined to work with version\n-            1.2 onwards, so in standards-based deployment the only\n-            interoperability questions that arise concern version 1.2\n-        onwards.<\/p>\n-\n-        <p>Every version of the JMX specification continues to\n-            implement the features of previous versions.  So when the\n-            client is running an earlier version than the server, there\n-            should not be any interoperability concerns.<\/p>\n-\n-        <p>When the client is running a later version than the server,\n-            certain newer features may not be available, as detailed in\n-            the next sections.  The client can determine the server's\n-            version by examining the {@link\n-            javax.management.MBeanServerDelegateMBean#getSpecificationVersion\n-            SpecificationVersion} attribute of the {@code\n-        MBeanServerDelegate}.<\/p>\n-\n-        <h4 id=\"interop-1.2\">If the remote MBean Server is 1.2<\/h4>\n-\n-\t<ul>\n-\n-            <li><p>You cannot use wildcards in a key property of an\n-                {@link javax.management.ObjectName ObjectName}, for\n-                example {@code domain:type=Foo,name=*}. Wildcards that\n-                match whole properties are still allowed, for example\n-            {@code *:*} or {@code *:type=Foo,*}.<\/p>\n-\n-            <li><p>You cannot use {@link\n-                javax.management.Query#isInstanceOf Query.isInstanceOf}\n-            in a query.<\/p>\n-\n-            <li><p>You cannot use dot syntax such as {@code\n-                HeapMemoryUsage.used} in the {@linkplain\n-                javax.management.monitor.Monitor#setObservedAttribute\n-                observed attribute} of a monitor, as described in the\n-                documentation for the {@link javax.management.monitor}\n-            package.<\/p>\n-\n-        <\/ul>\n-\n-        @see <a id=\"spec\" href=\"https:\/\/jcp.org\/aboutJava\/communityprocess\/mrel\/jsr160\/index2.html\">\n-        JMX Specification, version 1.4<\/a>\n-\n-        @since 1.5\n-\n-    <\/body>\n-<\/html>\n","filename":"src\/java.management\/share\/classes\/javax\/management\/package.html","additions":0,"deletions":397,"binary":false,"changes":397,"status":"deleted"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/**\n+ * <p>Provides the definition of the Relation Service.  The\n+ * Relation Service is used to record relationships between\n+ * MBeans in an MBean Server.  The Relation Service is itself an\n+ * MBean.  More than one instance of a {@link\n+ * javax.management.relation.RelationService RelationService}\n+ * MBean can be registered in an MBean Server.<\/p>\n+ *\n+ * <p>A <em>relation type<\/em> defines a relationship between MBeans.\n+ * It contains <em>roles<\/em> that the MBeans play in the\n+ * relationship.  Usually there are at least two roles in a\n+ * relation type.<\/p>\n+ *\n+ * <p>A <em>relation<\/em> is a named instance of a relation type,\n+ * where specific MBeans appear in the roles, represented by\n+ * their {@link javax.management.ObjectName ObjectName}s.<\/p>\n+ *\n+ * <p>For example, suppose there are <code>Module<\/code> MBeans,\n+ * representing modules within an application.  A\n+ * <code>DependsOn<\/code> relation type could express the\n+ * relationship that some modules depend on others, which could\n+ * be used to determine the order in which the modules are\n+ * started or stopped.  The <code>DependsOn<\/code> relation type\n+ * would have two roles, <code>dependent<\/code> and\n+ * <code>dependedOn<\/code>.<\/p>\n+ *\n+ * <p>Every role is <em>typed<\/em>, meaning that an MBean that\n+ * appears in that role must be an instance of the role's type.\n+ * In the <code>DependsOn<\/code> example, both roles would be of\n+ * type <code>Module<\/code>.<\/p>\n+ *\n+ * <p>Every role has a <em>cardinality<\/em>, which provides lower\n+ * and upper bounds on the number of MBeans that can appear in\n+ * that role in a given relation instance.  Usually, the lower\n+ * and upper bounds are both 1, with exactly one MBean appearing\n+ * in the role.  The cardinality only limits the number of MBeans\n+ * in the role per relation instance.  The same MBean can appear\n+ * in the same role in any number of instances of a relation\n+ * type.  In the <code>DependsOn<\/code> example, a given module\n+ * can depend on many other modules, and be depended on by many\n+ * others, but any given relation instance links exactly one\n+ * <code>dependent<\/code> module with exactly one\n+ * <code>dependedOn<\/code> module.<\/p>\n+ *\n+ * <p>A relation type can be created explicitly, as an object\n+ * implementing the {@link javax.management.relation.RelationType\n+ * RelationType} interface, typically a {@link\n+ * javax.management.relation.RelationTypeSupport\n+ * RelationTypeSupport}.  Alternatively, it can be created\n+ * implicitly using the Relation Service's {@link\n+ * javax.management.relation.RelationServiceMBean#createRelationType(String,\n+ * RoleInfo[]) createRelationType} method.<\/p>\n+ *\n+ * <p>A relation instance can be created explicitly, as an object\n+ * implementing the {@link javax.management.relation.Relation\n+ * Relation} interface, typically a {@link\n+ * javax.management.relation.RelationSupport RelationSupport}.\n+ * (A <code>RelationSupport<\/code> is itself a valid MBean, so it\n+ * can be registered in the MBean Server, though this is not\n+ * required.)  Alternatively, a relation instance can be created\n+ * implicitly using the Relation Service's {@link\n+ * javax.management.relation.RelationServiceMBean#createRelation(String,\n+ * String, RoleList) createRelation} method.<\/p>\n+ *\n+ * <p>The <code>DependsOn<\/code> example might be coded as follows.<\/p>\n+ *\n+ * <pre>\n+ * import java.util.*;\n+ * import javax.management.*;\n+ * import javax.management.relation.*;\n+ *\n+ * \/\/ ...\n+ * MBeanServer mbs = ...;\n+ *\n+ * \/\/ Create the Relation Service MBean\n+ * ObjectName relSvcName = new ObjectName(\":type=RelationService\");\n+ * RelationService relSvcObject = new RelationService(true);\n+ * mbs.registerMBean(relSvcObject, relSvcName);\n+ *\n+ * \/\/ Create an MBean proxy for easier access to the Relation Service\n+ * RelationServiceMBean relSvc =\n+ *     MBeanServerInvocationHandler.newProxyInstance(mbs, relSvcName,\n+ *                           RelationServiceMBean.class,\n+ *                           false);\n+ *\n+ * \/\/ Define the DependsOn relation type\n+ * RoleInfo[] dependsOnRoles = {\n+ *     new RoleInfo(\"dependent\", Module.class.getName()),\n+ *     new RoleInfo(\"dependedOn\", Module.class.getName())\n+ * };\n+ * relSvc.createRelationType(\"DependsOn\", dependsOnRoles);\n+ *\n+ * \/\/ Now define a relation instance \"moduleA DependsOn moduleB\"\n+ *\n+ * ObjectName moduleA = new ObjectName(\":type=Module,name=A\");\n+ * ObjectName moduleB = new ObjectName(\":type=Module,name=B\");\n+ *\n+ * Role dependent = new Role(\"dependent\", Collections.singletonList(moduleA));\n+ * Role dependedOn = new Role(\"dependedOn\", Collections.singletonList(moduleB));\n+ * Role[] roleArray = {dependent, dependedOn};\n+ * RoleList roles = new RoleList(Arrays.asList(roleArray));\n+ * relSvc.createRelation(\"A-DependsOn-B\", \"DependsOn\", roles);\n+ *\n+ * \/\/ Query the Relation Service to find what modules moduleA depends on\n+ * Map&lt;ObjectName,List&lt;String&gt;&gt; dependentAMap =\n+ *     relSvc.findAssociatedMBeans(moduleA, \"DependsOn\", \"dependent\");\n+ * Set&lt;ObjectName&gt; dependentASet = dependentAMap.keySet();\n+ * \/\/ Set of ObjectName containing moduleB\n+ * <\/pre>\n+ *\n+ * @see <a href=\"https:\/\/jcp.org\/aboutJava\/communityprocess\/mrel\/jsr160\/index2.html\">\n+ * JMX Specification, version 1.4<\/a>\n+ *\n+ * @since 1.5\n+ *\/\n+package javax.management.relation;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/relation\/package-info.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"},{"patch":"@@ -1,145 +0,0 @@\n-<html>\n-<head>\n-<title>javax.management.relation package<\/title>\n-<!--\n-Copyright (c) 2000, 2017, Oracle and\/or its affiliates. All rights reserved.\n-DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n-This code is free software; you can redistribute it and\/or modify it\n-under the terms of the GNU General Public License version 2 only, as\n-published by the Free Software Foundation.  Oracle designates this\n-particular file as subject to the \"Classpath\" exception as provided\n-by Oracle in the LICENSE file that accompanied this code.\n-\n-This code is distributed in the hope that it will be useful, but WITHOUT\n-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-version 2 for more details (a copy is included in the LICENSE file that\n-accompanied this code).\n-\n-You should have received a copy of the GNU General Public License version\n-2 along with this work; if not, write to the Free Software Foundation,\n-Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n-Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-or visit www.oracle.com if you need additional information or have any\n-questions.\n--->\n-<\/head>\n-<body bgcolor=\"white\">\n-      <p>Provides the definition of the Relation Service.  The\n-\tRelation Service is used to record relationships between\n-\tMBeans in an MBean Server.  The Relation Service is itself an\n-\tMBean.  More than one instance of a {@link\n-\tjavax.management.relation.RelationService RelationService}\n-\tMBean can be registered in an MBean Server.<\/p>\n-\n-      <p>A <em>relation type<\/em> defines a relationship between MBeans.\n-\tIt contains <em>roles<\/em> that the MBeans play in the\n-\trelationship.  Usually there are at least two roles in a\n-\trelation type.<\/p>\n-\n-      <p>A <em>relation<\/em> is a named instance of a relation type,\n-\twhere specific MBeans appear in the roles, represented by\n-\ttheir {@link javax.management.ObjectName ObjectName}s.<\/p>\n-\n-      <p>For example, suppose there are <code>Module<\/code> MBeans,\n-\trepresenting modules within an application.  A\n-\t<code>DependsOn<\/code> relation type could express the\n-\trelationship that some modules depend on others, which could\n-\tbe used to determine the order in which the modules are\n-\tstarted or stopped.  The <code>DependsOn<\/code> relation type\n-\twould have two roles, <code>dependent<\/code> and\n-\t<code>dependedOn<\/code>.<\/p>\n-\n-      <p>Every role is <em>typed<\/em>, meaning that an MBean that\n-\tappears in that role must be an instance of the role's type.\n-\tIn the <code>DependsOn<\/code> example, both roles would be of\n-\ttype <code>Module<\/code>.<\/p>\n-\n-      <p>Every role has a <em>cardinality<\/em>, which provides lower\n-\tand upper bounds on the number of MBeans that can appear in\n-\tthat role in a given relation instance.  Usually, the lower\n-\tand upper bounds are both 1, with exactly one MBean appearing\n-\tin the role.  The cardinality only limits the number of MBeans\n-\tin the role per relation instance.  The same MBean can appear\n-\tin the same role in any number of instances of a relation\n-\ttype.  In the <code>DependsOn<\/code> example, a given module\n-\tcan depend on many other modules, and be depended on by many\n-\tothers, but any given relation instance links exactly one\n-\t<code>dependent<\/code> module with exactly one\n-\t<code>dependedOn<\/code> module.<\/p>\n-\n-      <p>A relation type can be created explicitly, as an object\n-\timplementing the {@link javax.management.relation.RelationType\n-\tRelationType} interface, typically a {@link\n-\tjavax.management.relation.RelationTypeSupport\n-\tRelationTypeSupport}.  Alternatively, it can be created\n-\timplicitly using the Relation Service's {@link\n-\tjavax.management.relation.RelationServiceMBean#createRelationType(String,\n-\tRoleInfo[]) createRelationType} method.<\/p>\n-\n-      <p>A relation instance can be created explicitly, as an object\n-\timplementing the {@link javax.management.relation.Relation\n-\tRelation} interface, typically a {@link\n-\tjavax.management.relation.RelationSupport RelationSupport}.\n-\t(A <code>RelationSupport<\/code> is itself a valid MBean, so it\n-\tcan be registered in the MBean Server, though this is not\n-\trequired.)  Alternatively, a relation instance can be created\n-\timplicitly using the Relation Service's {@link\n-\tjavax.management.relation.RelationServiceMBean#createRelation(String,\n-\tString, RoleList) createRelation} method.<\/p>\n-\n-      <p>The <code>DependsOn<\/code> example might be coded as follows.<\/p>\n-\n-<pre>\n-import java.util.*;\n-import javax.management.*;\n-import javax.management.relation.*;\n-\n-\/\/ ...\n-MBeanServer mbs = ...;\n-\n-\/\/ Create the Relation Service MBean\n-ObjectName relSvcName = new ObjectName(\":type=RelationService\");\n-RelationService relSvcObject = new RelationService(true);\n-mbs.registerMBean(relSvcObject, relSvcName);\n-\n-\/\/ Create an MBean proxy for easier access to the Relation Service\n-RelationServiceMBean relSvc =\n-    MBeanServerInvocationHandler.newProxyInstance(mbs, relSvcName,\n-\t\t\t\t\t\t  RelationServiceMBean.class,\n-\t\t\t\t\t\t  false);\n-\n-\/\/ Define the DependsOn relation type\n-RoleInfo[] dependsOnRoles = {\n-    new RoleInfo(\"dependent\", Module.class.getName()),\n-    new RoleInfo(\"dependedOn\", Module.class.getName())\n-};\n-relSvc.createRelationType(\"DependsOn\", dependsOnRoles);\n-\n-\/\/ Now define a relation instance \"moduleA DependsOn moduleB\"\n-\n-ObjectName moduleA = new ObjectName(\":type=Module,name=A\");\n-ObjectName moduleB = new ObjectName(\":type=Module,name=B\");\n-\n-Role dependent = new Role(\"dependent\", Collections.singletonList(moduleA));\n-Role dependedOn = new Role(\"dependedOn\", Collections.singletonList(moduleB));\n-Role[] roleArray = {dependent, dependedOn};\n-RoleList roles = new RoleList(Arrays.asList(roleArray));\n-relSvc.createRelation(\"A-DependsOn-B\", \"DependsOn\", roles);\n-\n-\/\/ Query the Relation Service to find what modules moduleA depends on\n-Map&lt;ObjectName,List&lt;String&gt;&gt; dependentAMap =\n-    relSvc.findAssociatedMBeans(moduleA, \"DependsOn\", \"dependent\");\n-Set&lt;ObjectName&gt; dependentASet = dependentAMap.keySet();\n-\/\/ Set of ObjectName containing moduleB\n-<\/pre>\n-\n-    @see <a href=\"https:\/\/jcp.org\/aboutJava\/communityprocess\/mrel\/jsr160\/index2.html\">\n-      JMX Specification, version 1.4<\/a>\n-\n-      @since 1.5\n-\n-<\/BODY>\n-<\/HTML>\n","filename":"src\/java.management\/share\/classes\/javax\/management\/relation\/package.html","additions":0,"deletions":145,"binary":false,"changes":145,"status":"deleted"},{"patch":"@@ -0,0 +1,197 @@\n+\/*\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * <p>Interfaces for remote access to\n+ * JMX MBean servers.\n+ * This package defines the essential interfaces for making a JMX\n+ * MBean server manageable remotely. The specification of this\n+ * functionality is completed by Part III of the\n+ * <a href=\"https:\/\/jcp.org\/aboutJava\/communityprocess\/mrel\/jsr160\/index2.html\">\n+ * JMX Specification, version 1.4<\/a><\/p>\n+ *\n+ * <p>The JMX specification defines the notion of <b>connectors<\/b>.\n+ * A connector is attached to a JMX API MBean server and makes it\n+ * accessible to remote Java clients. The client end of a\n+ * connector exports essentially the same interface as the MBean\n+ * server, specifically the {@link\n+ * javax.management.MBeanServerConnection MBeanServerConnection}\n+ * interface.<\/p>\n+ *\n+ * <p>A connector makes an MBean server remotely accessible through\n+ * a given protocol. The JMX Remote API allows the use of different\n+ * type of connectors:\n+ *\n+ *       <ul>\n+ *        <li>The JMX Remote API defines a standard connector,\n+ *     the <b>RMI Connector<\/b>, which provides remote access to an\n+ *         MBeanServer through RMI.\n+ *\n+ *        <li>The JMX Remote API also defines an optional connector called\n+ *         <b>JMXMP Connector<\/b> implementing the JMX Message Protocol\n+ *     (JMXMP). As it is optional, it is not part of this bundle (see\n+ *     note below).\n+ *\n+ *        <li>User-defined connector protocols are also possible using the\n+ *     {@link javax.management.remote.JMXConnectorFactory\n+ *     JMXConnectorFactory} and, optionally, the Generic Connector\n+ *     (not part of this bundle, see note below).\n+ *       <\/ul>\n+ *\n+ *       <p><u>Note<\/u>: the optional packages implementing\n+ *         the optional part of the <em>JMX Remote API<\/em>\n+ *         are not included in the <em>Java SE Platform<\/em>\n+ *         but are available from the <em>JMX Remote API\n+ *     <a href=\"https:\/\/www.oracle.com\/technetwork\/java\/javasebusiness\/downloads\/java-archive-downloads-java-plat-419418.html\">\n+ *     Reference Implementation<\/a><\/em>.<\/p>\n+ *\n+ *\n+ *       <h2>Connector addresses<\/h2>\n+ *\n+ *       <p>Typically, a connector server has an address, represented by the\n+ *     class {@link javax.management.remote.JMXServiceURL\n+ *     JMXServiceURL}.  An address for the RMI Connector can look\n+ *     like this:<\/p>\n+ *\n+ *       <pre>\n+ *       service:jmx:rmi:\/\/\/jndi\/rmi:\/\/myhost:1099\/myname\n+ *       <\/pre>\n+ *\n+ *       <p>In this <code>JMXServiceURL<\/code>, the first <code>rmi:<\/code>\n+ *         specifies the RMI connector, while the second <code>rmi:<\/code>\n+ *         specifies the RMI registry into which the RMI connector server\n+ *         has stored its stub.\n+ *\n+ *       <p>The example above shows only one form of address.\n+ *         An address for the RMI Connector can take several forms,\n+ *     as detailed in the documentation for the package\n+ *     <code><a href=\"{@docRoot}\/java.management.rmi\/javax\/management\/remote\/rmi\/package-summary.html\">javax.management.remote.rmi<\/a><\/code>.<\/p>\n+ *\n+ *       <h2>Creating a connector server<\/h2>\n+ *\n+ *       <p>A connector server is created by constructing an instance of\n+ *     a subclass of {@link\n+ *     javax.management.remote.JMXConnectorServer\n+ *     JMXConnectorServer}.  Usually, this instance is created\n+ *         using the method {@link\n+ *         javax.management.remote.JMXConnectorServerFactory#newJMXConnectorServer(JMXServiceURL,\n+ *         java.util.Map, javax.management.MBeanServer)\n+ *     JMXConnectorServerFactory.newJMXConnectorServer}.<\/p>\n+ *\n+ *       <p>Typically, a connector server is associated with an MBean\n+ *     server either by registering it in that MBean server, or by\n+ *     supplying the MBean server as a parameter when creating the\n+ *     connector server.<\/p>\n+ *\n+ *       <h2>Creating a connector client<\/h2>\n+ *\n+ *       <p>A connector client is usually created by supplying the\n+ *     <code>JMXServiceURL<\/code> of the connector server to connect to\n+ *         to the {@link\n+ *     javax.management.remote.JMXConnectorFactory#connect(JMXServiceURL)\n+ *     JMXConnectorFactory.connect} method.<\/p>\n+ *\n+ *       <p>For more specialized uses, a connector client can be created\n+ *     by directly instantiating a class that implements the {@link\n+ *     javax.management.remote.JMXConnector JMXConnector} interface,\n+ *     for example the class <a href=\"{@docRoot}\/java.management.rmi\/javax\/management\/remote\/rmi\/RMIConnector.html\">RMIConnector<\/a>.<\/p>\n+ *\n+ *       <h2>Additional client or server parameters<\/h2>\n+ *\n+ *       <p>When creating a connector client or server, it is possible to\n+ *     supply an object of type {@link java.util.Map Map} that defines\n+ *     additional parameters.  Each entry in this Map has a key that is\n+ *     a string and an associated value whose type is appropriate for\n+ *     that key.  The standard keys defined by the JMX Remote API all\n+ *     begin with the string \"<code>jmx.remote.<\/code>\".  The document\n+ *     <em>JMX Remote API<\/em> lists these standard keys.<\/p>\n+ *\n+ *       <h2>Connection identifiers<\/h2>\n+ *\n+ *       <p>Every connection opened by a connector server has a string\n+ *     identifier, called its <b>connection id<\/b>.  This identifier\n+ *     appears in the {@link\n+ *     javax.management.remote.JMXConnectionNotification\n+ *     JMXConnectionNotification} events emitted by the connector\n+ *     server, in the list returned by {@link\n+ *     javax.management.remote.JMXConnectorServerMBean#getConnectionIds()\n+ *     getConnectionIds()}, and in the value\n+ *     returned by the client's {@link\n+ *     javax.management.remote.JMXConnector#getConnectionId()\n+ *     getConnectionId()} method.<\/p>\n+ *\n+ *       <p>As an example, a connection ID can look something like this:<\/p>\n+ *\n+ *       <pre>\n+ * rmi:\/\/192.18.1.9 username 1\n+ *       <\/pre>\n+ *\n+ *       <p>The formal grammar for connection ids that follow this\n+ *          convention is as follows (using the grammar notation from section 2.4 of\n+ *          <em>The Java Language Specification<\/em>):<\/p>\n+ *       <pre>\n+ * <em>ConnectionId:<\/em>\n+ *     <em>Protocol<\/em> : <em>ClientAddress<sub>opt<\/sub><\/em> Space <em>ClientId<sub>opt<\/sub><\/em> Space <em>ArbitraryText<\/em>\n+ *\n+ * <em>ClientAddress:<\/em>\n+ *     \/\/ <em>HostAddress<\/em> <em>ClientPort<sub>opt<\/sub><\/em>\n+ *\n+ * <em>ClientPort<\/em>\n+ *     : <em>HostPort<\/em>\n+ *       <\/pre>\n+ *\n+ *       <p>The <code><em>Protocol<\/em><\/code> is a protocol that would\n+ *     be recognized by {@link\n+ *     javax.management.remote.JMXConnectorFactory\n+ *     JMXConnectorFactory}.<\/p>\n+ *\n+ *       <p>The <code><em>ClientAddress<\/em><\/code> is the\n+ *     address and port of the connecting client, if these can be\n+ *     determined, otherwise nothing.  The\n+ *     <code><em>HostAddress<\/em><\/code> is the Internet address of\n+ *     the host that the client is connecting from, in numeric or DNS\n+ *     form.  Numeric IPv6 addresses are enclosed in square brackets\n+ *     <code>[]<\/code>.  The <code><em>HostPort<\/em><\/code> is the\n+ *     decimal port number that the client is connecting from.<\/p>\n+ *\n+ *       <p>The <code><em>ClientId<\/em><\/code> is the identity of the\n+ *     client entity, typically a string returned by {@link\n+ *     javax.management.remote.JMXPrincipal#getName()\n+ *     JMXPrincipal.getName()}.  This string must not contain\n+ *     spaces.<\/p>\n+ *\n+ *       <p>The <code><em>ArbitraryText<\/em><\/code> is any additional\n+ *     text that the connector server adds when creating the client id.\n+ *     At a minimum, it must be enough to distinguish this connection\n+ *     ID from the ID of any other connection currently opened by this\n+ *     connector server.<\/p>\n+ *\n+ *\n+ *     @see <a href=\"https:\/\/jcp.org\/aboutJava\/communityprocess\/mrel\/jsr160\/index2.html\">\n+ *       JMX Specification, version 1.4<\/a>\n+ *\n+ *     @since 1.5\n+ *\/\n+package javax.management.remote;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/remote\/package-info.java","additions":197,"deletions":0,"binary":false,"changes":197,"status":"added"},{"patch":"@@ -1,203 +0,0 @@\n-<html>\n-<head>\n-    <title>JMX Remote API.<\/title>\n-<!--\n-Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n-DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n-This code is free software; you can redistribute it and\/or modify it\n-under the terms of the GNU General Public License version 2 only, as\n-published by the Free Software Foundation.  Oracle designates this\n-particular file as subject to the \"Classpath\" exception as provided\n-by Oracle in the LICENSE file that accompanied this code.\n-\n-This code is distributed in the hope that it will be useful, but WITHOUT\n-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-version 2 for more details (a copy is included in the LICENSE file that\n-accompanied this code).\n-\n-You should have received a copy of the GNU General Public License version\n-2 along with this work; if not, write to the Free Software Foundation,\n-Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n-Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-or visit www.oracle.com if you need additional information or have any\n-questions.\n--->\n-<\/head>\n-<body bgcolor=\"white\">\n-      <p>Interfaces for remote access to\n-\tJMX MBean servers.\n-\tThis package defines the essential interfaces for making a JMX\n-\tMBean server manageable remotely. The specification of this \n-        functionality is completed by Part III of the \n-       <a href=\"https:\/\/jcp.org\/aboutJava\/communityprocess\/mrel\/jsr160\/index2.html\">\n-\tJMX Specification, version 1.4<\/a><\/p>\n-\n-      <p>The JMX specification defines the notion of <b>connectors<\/b>.\n-\tA connector is attached to a JMX API MBean server and makes it\n-\taccessible to remote Java clients. The client end of a\n-\tconnector exports essentially the same interface as the MBean\n-\tserver, specifically the {@link\n-\tjavax.management.MBeanServerConnection MBeanServerConnection}\n-\tinterface.<\/p>\n-\n-      <p>A connector makes an MBean server remotely accessible through\n-\ta given protocol. The JMX Remote API allows the use of different \n-        type of connectors:\n-\n-      <ul>\n-       <li>The JMX Remote API defines a standard connector,\n-\tthe <b>RMI Connector<\/b>, which provides remote access to an\n-        MBeanServer through RMI.\n-\n-       <li>The JMX Remote API also defines an optional connector called \n-        <b>JMXMP Connector<\/b> implementing the JMX Message Protocol \n-\t(JMXMP). As it is optional, it is not part of this bundle (see\n-\tnote below).\n-\n-       <li>User-defined connector protocols are also possible using the \n-\t{@link javax.management.remote.JMXConnectorFactory\n-\tJMXConnectorFactory} and, optionally, the Generic Connector\n-\t(not part of this bundle, see note below).\n-      <\/ul>\n-\n-      <p><u>Note<\/u>: the optional packages implementing\n-        the optional part of the <em>JMX Remote API<\/em>\n-        are not included in the <em>Java SE Platform<\/em> \n-        but are available from the <em>JMX Remote API \n-\t<a href=\"https:\/\/www.oracle.com\/technetwork\/java\/javasebusiness\/downloads\/java-archive-downloads-java-plat-419418.html\">\n-\tReference Implementation<\/a><\/em>.<\/p>\n-\n-\n-      <h2>Connector addresses<\/h2>\n-\n-      <p>Typically, a connector server has an address, represented by the\n-\tclass {@link javax.management.remote.JMXServiceURL\n-\tJMXServiceURL}.  An address for the RMI Connector can look\n-\tlike this:<\/p>\n-\n-      <pre>\n-      service:jmx:rmi:\/\/\/jndi\/rmi:\/\/myhost:1099\/myname\n-      <\/pre>\n-\n-      <p>In this <code>JMXServiceURL<\/code>, the first <code>rmi:<\/code>\n-        specifies the RMI connector, while the second <code>rmi:<\/code> \n-        specifies the RMI registry into which the RMI connector server \n-        has stored its stub.\n-\n-      <p>The example above shows only one form of address.\n-        An address for the RMI Connector can take several forms,\n-\tas detailed in the documentation for the package\n-\t<code>{@link javax.management.remote.rmi}<\/code>.<\/p>\n-\n-      <h2>Creating a connector server<\/h2>\n-\n-      <p>A connector server is created by constructing an instance of\n-\ta subclass of {@link\n-\tjavax.management.remote.JMXConnectorServer\n-\tJMXConnectorServer}.  Usually, this instance is created\n-        using the method {@link\n-        javax.management.remote.JMXConnectorServerFactory#newJMXConnectorServer(JMXServiceURL,\n-        java.util.Map, javax.management.MBeanServer)\n-\tJMXConnectorServerFactory.newJMXConnectorServer}.<\/p>\n-\n-      <p>Typically, a connector server is associated with an MBean\n-\tserver either by registering it in that MBean server, or by\n-\tsupplying the MBean server as a parameter when creating the\n-\tconnector server.<\/p>\n-\n-      <h2>Creating a connector client<\/h2>\n-\n-      <p>A connector client is usually created by supplying the\n-\t<code>JMXServiceURL<\/code> of the connector server to connect to \n-        to the {@link\n-\tjavax.management.remote.JMXConnectorFactory#connect(JMXServiceURL)\n-\tJMXConnectorFactory.connect} method.<\/p>\n-\n-      <p>For more specialized uses, a connector client can be created\n-\tby directly instantiating a class that implements the {@link\n-\tjavax.management.remote.JMXConnector JMXConnector} interface,\n-\tfor example the class {@link\n-\tjavax.management.remote.rmi.RMIConnector\n-\tRMIConnector}.<\/p>\n-\n-      <h2>Additional client or server parameters<\/h2>\n-\n-      <p>When creating a connector client or server, it is possible to\n-\tsupply an object of type {@link java.util.Map Map} that defines\n-\tadditional parameters.  Each entry in this Map has a key that is\n-\ta string and an associated value whose type is appropriate for\n-\tthat key.  The standard keys defined by the JMX Remote API all\n-\tbegin with the string \"<code>jmx.remote.<\/code>\".  The document\n-\t<em>JMX Remote API<\/em> lists these standard keys.<\/p>\n-\n-      <h2>Connection identifiers<\/h2>\n-\n-      <p>Every connection opened by a connector server has a string\n-\tidentifier, called its <b>connection id<\/b>.  This identifier\n-\tappears in the {@link\n-\tjavax.management.remote.JMXConnectionNotification\n-\tJMXConnectionNotification} events emitted by the connector\n-\tserver, in the list returned by {@link\n-\tjavax.management.remote.JMXConnectorServerMBean#getConnectionIds()\n-\tgetConnectionIds()}, and in the value\n-\treturned by the client's {@link\n-\tjavax.management.remote.JMXConnector#getConnectionId()\n-\tgetConnectionId()} method.<\/p>\n-\n-      <p>As an example, a connection ID can look something like this:<\/p>\n-\n-      <pre>\n-rmi:\/\/192.18.1.9 username 1\n-      <\/pre>\n-\n-      <p>The formal grammar for connection ids that follow this\n-         convention is as follows (using the grammar notation from section 2.4 of \n-         <em>The Java Language Specification<\/em>):<\/p>\n-      <pre>\n-<em>ConnectionId:<\/em>\n-    <em>Protocol<\/em> : <em>ClientAddress<sub>opt<\/sub><\/em> Space <em>ClientId<sub>opt<\/sub><\/em> Space <em>ArbitraryText<\/em>\n-\n-<em>ClientAddress:<\/em>\n-    \/\/ <em>HostAddress<\/em> <em>ClientPort<sub>opt<\/sub><\/em>\n-\n-<em>ClientPort<\/em>\n-    : <em>HostPort<\/em>\n-      <\/pre>\n-\n-      <p>The <code><em>Protocol<\/em><\/code> is a protocol that would\n-\tbe recognized by {@link\n-\tjavax.management.remote.JMXConnectorFactory\n-\tJMXConnectorFactory}.<\/p>\n-\n-      <p>The <code><em>ClientAddress<\/em><\/code> is the\n-\taddress and port of the connecting client, if these can be\n-\tdetermined, otherwise nothing.  The\n-\t<code><em>HostAddress<\/em><\/code> is the Internet address of\n-\tthe host that the client is connecting from, in numeric or DNS\n-\tform.  Numeric IPv6 addresses are enclosed in square brackets\n-\t<code>[]<\/code>.  The <code><em>HostPort<\/em><\/code> is the\n-\tdecimal port number that the client is connecting from.<\/p>\n-\n-      <p>The <code><em>ClientId<\/em><\/code> is the identity of the\n-\tclient entity, typically a string returned by {@link\n-\tjavax.management.remote.JMXPrincipal#getName()\n-\tJMXPrincipal.getName()}.  This string must not contain\n-\tspaces.<\/p>\n-\n-      <p>The <code><em>ArbitraryText<\/em><\/code> is any additional\n-\ttext that the connector server adds when creating the client id.\n-\tAt a minimum, it must be enough to distinguish this connection\n-\tID from the ID of any other connection currently opened by this\n-\tconnector server.<\/p>\n-\n-\n-    @see <a href=\"https:\/\/jcp.org\/aboutJava\/communityprocess\/mrel\/jsr160\/index2.html\">\n-      JMX Specification, version 1.4<\/a>\n-    \n-    @since 1.5\n-\n-    <\/body>\n-<\/html>\n","filename":"src\/java.management\/share\/classes\/javax\/management\/remote\/package.html","additions":0,"deletions":203,"binary":false,"changes":203,"status":"deleted"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * <p>Provides the definition of the Timer MBean.  A Timer MBean\n+ * maintains a list of scheduled notifications and, because it is a\n+ * {@link javax.management.NotificationBroadcaster\n+ * NotificationBroadcaster}, a list of listeners for those\n+ * notifications.  Whenever the time for one of the scheduled\n+ * notifications is reached, each listener receives the\n+ * notification.  Notifications can be repeated at a fixed\n+ * interval, and the number of repetitions can be bounded.<\/p>\n+ *\n+ * <p>A listener for a Timer MBean can itself be an MBean, using\n+ * the method {@link\n+ * javax.management.MBeanServer#addNotificationListener(ObjectName,\n+ * ObjectName, NotificationFilter, Object)}.  In this way, a\n+ * management application can create an MBean representing a task,\n+ * then schedule that task using a Timer MBean.<\/p>\n+ *\n+ * @since 1.5\n+ *\/\n+package javax.management.timer;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/timer\/package-info.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -1,50 +0,0 @@\n-<html>\n-<head>\n-<title>javax.management.timer package<\/title>\n-<!--\n-Copyright (c) 1999, 2003, Oracle and\/or its affiliates. All rights reserved.\n-DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n-This code is free software; you can redistribute it and\/or modify it\n-under the terms of the GNU General Public License version 2 only, as\n-published by the Free Software Foundation.  Oracle designates this\n-particular file as subject to the \"Classpath\" exception as provided\n-by Oracle in the LICENSE file that accompanied this code.\n-\n-This code is distributed in the hope that it will be useful, but WITHOUT\n-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-version 2 for more details (a copy is included in the LICENSE file that\n-accompanied this code).\n-\n-You should have received a copy of the GNU General Public License version\n-2 along with this work; if not, write to the Free Software Foundation,\n-Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n-Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-or visit www.oracle.com if you need additional information or have any\n-questions.\n--->\n-<\/head>\n-<body bgcolor=\"white\">\n-\n-      <p>Provides the definition of the Timer MBean.  A Timer MBean\n-      maintains a list of scheduled notifications and, because it is a\n-      {@link javax.management.NotificationBroadcaster\n-      NotificationBroadcaster}, a list of listeners for those\n-      notifications.  Whenever the time for one of the scheduled\n-      notifications is reached, each listener receives the\n-      notification.  Notifications can be repeated at a fixed\n-      interval, and the number of repetitions can be bounded.<\/p>\n-\n-      <p>A listener for a Timer MBean can itself be an MBean, using\n-      the method {@link\n-      javax.management.MBeanServer#addNotificationListener(ObjectName,\n-      ObjectName, NotificationFilter, Object)}.  In this way, a\n-      management application can create an MBean representing a task,\n-      then schedule that task using a Timer MBean.<\/p>\n-\n-    @since 1.5\n-\n-<\/BODY>\n-<\/HTML>\n","filename":"src\/java.management\/share\/classes\/javax\/management\/timer\/package.html","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"}]}