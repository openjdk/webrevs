{"files":[{"patch":"@@ -226,6 +226,3 @@\n-    \/\/ If dumping static archive then don't fall back to the old verifier on\n-    \/\/ verification failure. If a class fails verification with the split verifier,\n-    \/\/ it might fail the CDS runtime verifier constraint check. In that case, we\n-    \/\/ don't want to share the class. We only archive classes that pass the split\n-    \/\/ verifier.\n-    bool can_failover = !CDSConfig::is_dumping_static_archive() &&\n+    \/\/ If dumping {classic, final} static archive, don't bother to run the old verifier, as\n+    \/\/ the class will be excluded from the archive anyway.\n+    bool can_failover = !(CDSConfig::is_dumping_classic_static_archive() || CDSConfig::is_dumping_final_static_archive()) &&\n@@ -240,3 +237,4 @@\n-      \/\/ Exclude any classes that fail over during dynamic dumping\n-      if (CDSConfig::is_dumping_dynamic_archive()) {\n-        SystemDictionaryShared::warn_excluded(klass, \"Failed over class verification while dynamic dumping\");\n+      \/\/ Exclude any classes that are verified with the old verifier, as the old verifier\n+      \/\/ doesn't call SystemDictionaryShared::add_verification_constraint()\n+      if (CDSConfig::is_dumping_archive()) {\n+        SystemDictionaryShared::warn_excluded(klass, \"Verified with old verifier\");\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Sanity test for AOTCache\n+ * @requires vm.cds.supports.aot.class.linking\n+ * @comment work around JDK-8345635\n+ * @requires !vm.jvmci.enabled\n+ * @library \/test\/lib\n+ * @build VerifierFailOver_Helper\n+ * @build VerifierFailOver\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar VerifierFailOverApp VerifierFailOver_Helper\n+ * @run driver VerifierFailOver\n+ *\/\n+\n+import jdk.test.lib.cds.SimpleCDSAppTester;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class VerifierFailOver {\n+    public static void main(String... args) throws Exception {\n+        SimpleCDSAppTester.of(\"VerifierFailOver\")\n+            .addVmArgs(\"-Xlog:cds+class=debug\")\n+            .classpath(\"app.jar\")\n+            .appCommandLine(\"VerifierFailOverApp\")\n+            .setTrainingChecker((OutputAnalyzer out) -> {\n+                    out.shouldContain(\"Skipping VerifierFailOver_Helper: Verified with old verifier\");\n+                })\n+            .setAssemblyChecker((OutputAnalyzer out) -> {\n+                    \/\/ classes verified with fail-over mode should not be cached.\n+                    out.shouldMatch(\"class.* klasses.* VerifierFailOverApp\");\n+                    out.shouldNotMatch(\"class.* klasses.* VerifierFailOver_Helper\");\n+                })\n+            .runAOTWorkflow();\n+    }\n+}\n+\n+class VerifierFailOverApp {\n+    public static void main(String[] args) throws Throwable {\n+        Class goodClass = Class.forName(\"VerifierFailOver_Helper\");\n+        Object obj = goodClass.newInstance();\n+        System.out.println(\"Successfully loaded: \" + obj.getClass().getName());\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/VerifierFailOver.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/\/ This class should be rejected by the new verifier, but will be accepted by the old verifier.\n+\n+class VerifierFailOver_Helper {\n+  0xCAFEBABE;\n+  0;\n+  50;\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #3 #5; \/\/ #1    \n+    Utf8 \"StackMapTable\"; \/\/ #2    \n+    class #4; \/\/ #3    \n+    Utf8 \"java\/lang\/Object\"; \/\/ #4    \n+    NameAndType #12 #7; \/\/ #5    \n+    Utf8 \"SourceFile\"; \/\/ #6    \n+    Utf8 \"()V\"; \/\/ #7    \n+    class #9; \/\/ #8    \n+    Utf8 \"VerifierFailOver_Helper\"; \/\/ #9    \n+    Utf8 \"Code\"; \/\/ #10    \n+    Utf8 \"VerifierFailOver_Helper.jasm\"; \/\/ #11    \n+    Utf8 \"<init>\"; \/\/ #12    \n+    Utf8 \"stackmap\"; \/\/ #13\n+  } \/\/ Constant Pool\n+\n+  0x0000; \/\/ access\n+  #8;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ fields\n+  } \/\/ fields\n+\n+  [] { \/\/ methods\n+    { \/\/ Member\n+      0x0001; \/\/ access\n+      #12; \/\/ name_cpx\n+      #7; \/\/ sig_cpx\n+      [] { \/\/ Attributes\n+        Attr(#10) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B100B1;\n+          };\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+\/* right:\n+            Attr(#2) { \/\/ StackMap\n+end right *\/\n+\/\/ wrong:\n+            Attr(#13) { \/\/ stackmap\n+\/\/ end wrong\n+              [] { \/\/ \n+                255b,  5, []{I}, []{};\n+              }\n+            } \/\/ end StackMap\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#6) { \/\/ SourceFile\n+      #11;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class stackmap00303m1n\n+\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/VerifierFailOver_Helper.jcod","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -54,0 +54,1 @@\n+    private BiConsumer<OutputAnalyzer, RunMode> trainingChecker;\n@@ -103,0 +104,5 @@\n+    public SimpleCDSAppTester setTrainingChecker(BiConsumer<OutputAnalyzer, RunMode> checker) {\n+        this.trainingChecker = checker;\n+        return this;\n+    }\n+\n@@ -113,0 +119,6 @@\n+    public SimpleCDSAppTester setTrainingChecker(Consumer<OutputAnalyzer> checker) {\n+        this.trainingChecker = (OutputAnalyzer out, RunMode runMode) -> {\n+            checker.accept(out);\n+        };\n+        return this;\n+    }\n@@ -155,1 +167,5 @@\n-            if (isDumping(runMode) && runMode != RunMode.TRAINING) {\n+            if (runMode == RunMode.TRAINING) {\n+                if (trainingChecker != null) {\n+                    trainingChecker.accept(out, runMode);\n+                }\n+            } else if (isDumping(runMode)) {\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/SimpleCDSAppTester.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"}]}