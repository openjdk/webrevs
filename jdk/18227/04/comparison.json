{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,3 +66,1 @@\n- * <p> The following is an example of a GET request that prints the response\n- * body as a String:\n- *\n+ * <p> The following is an example of an asynchronous POST:\n@@ -74,0 +72,1 @@\n+ *         .POST(BodyPublishers.ofString(\"request body text\"))\n@@ -79,1 +78,2 @@\n- *         .join(); }\n+ *         .join();\n+ *  }\n@@ -85,0 +85,12 @@\n+ * <p> The builder can be avoided for simple GET requests as the following example\n+ * shows:\n+ * {@snippet :\n+ *   HttpClient client = HttpClient.newHttpClient();\n+ *\n+ *   HttpRequest request = HttpRequest.GET(\"https:\/\/www.foo.com\/\");\n+ *   String response = client.send(request, BodyHandlers.ofString())\n+ *                           .bodyWhen(r -> r.statusCode() == 200)\n+ *                           .orElse(\"ERROR\");\n+ *   System.out.println(response);\n+ * }\n+ *\n@@ -328,0 +340,16 @@\n+    \/**\n+     * Convenience method which returns a GET HttpRequest for the given URI string.\n+     *\n+     * @param uristring the URI string to get\n+     * @return a HttpRequest\n+     * @throws IllegalArgumentException if the URI scheme is not supported\n+     *         or if the provided {@code uristring} is not a valid URI.\n+     *\/\n+    public static HttpRequest GET(String uristring) {\n+        URI uri = URI.create(uristring);\n+        return HttpRequest.newBuilder()\n+            .uri(uri)\n+            .GET()\n+            .build();\n+    }\n+\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpRequest.java","additions":33,"deletions":5,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+import java.util.function.Predicate;\n@@ -146,0 +147,8 @@\n+    \/**\n+     * Returns the body if the given predicate is satisfied.\n+     *\n+     * @param predicate the Predicate to test\n+     * @return an Optional containing the response body if the predicate returns true\n+     *\/\n+    public Optional<T> bodyWhen(Predicate<ResponseInfo> predicate) throws IOException;\n+\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpResponse.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.function.Predicate;\n@@ -55,0 +56,1 @@\n+    final ResponseInfo rinfo;\n@@ -71,0 +73,1 @@\n+        this.rinfo = new ResponseInfoImpl(response);\n@@ -98,0 +101,9 @@\n+    @Override\n+    public Optional<T> bodyWhen(Predicate<ResponseInfo> predicate) {\n+        if (predicate.test(rinfo)) {\n+            return Optional.of(body());\n+        } else {\n+            return Optional.empty();\n+        }\n+    }\n+\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpResponseImpl.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8327796\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters jdk.test.lib.net.SimpleSSLContext\n+ * @run main\/othervm GETTest\n+ * @summary GET Test\n+ *\/\n+\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.test.lib.net.SimpleSSLContext;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpClient.Version;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpRequest.BodyPublishers;\n+import java.net.http.HttpResponse;\n+import java.net.http.HttpResponse.BodyHandlers;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import javax.net.ssl.SSLContext;\n+\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+\n+public class GETTest implements HttpServerAdapters {\n+\n+    static volatile boolean ok;\n+    static final String RESPONSE = \"Hello world\";\n+\n+    public static void main(String[] args) throws Exception {\n+        test(Version.HTTP_1_1, false);\n+        test(Version.HTTP_2, false);\n+        test(Version.HTTP_1_1, true);\n+        test(Version.HTTP_2, true);\n+    }\n+\n+    public static void test(Version version, boolean secure) throws Exception {\n+\n+        ExecutorService e = Executors.newCachedThreadPool();\n+        Handler h = new Handler();\n+        SSLContext sslContext = secure ? new SimpleSSLContext().get() : null;\n+        HttpTestServer server = HttpTestServer.create(version, sslContext, e);\n+        HttpTestContext serverContext = server.addHandler(h, \"\/test\/\");\n+        server.start();\n+\n+        var clientBuilder = HttpClient.newBuilder();\n+        if (sslContext != null) clientBuilder.sslContext(sslContext);\n+        HttpClient client = clientBuilder.build();\n+\n+        try {\n+            String scheme = sslContext == null ? \"http\" : \"https\";\n+            String uri = scheme + \":\/\/\" + server.serverAuthority() + \"\/test\/foo\/\"+version;\n+            HttpRequest req = HttpRequest.GET(uri);\n+\n+            System.out.println(\"\\n\\nSending request: \" + req);\n+            String resp = client.send(req, BodyHandlers.ofString())\n+                                      .bodyWhen(r -> r.statusCode() == 200)\n+                                      .orElseThrow(() -> new RuntimeException(\"Failed\"));\n+            \/\/ try some invalid URIs\n+            uri = \"http!@:\/\/foo\";\n+            try {\n+                req = HttpRequest.GET(uri);\n+                throw new RuntimeException(\"Invalid URI accepted\");\n+            } catch (IllegalArgumentException ex1) {}\n+\n+            uri = \"ftp:\/\/foo.com\/\";\n+            try {\n+                req = HttpRequest.GET(uri);\n+                throw new RuntimeException(\"Invalid URI accepted\");\n+            } catch (IllegalArgumentException ex2) {}\n+        } finally {\n+            server.stop();\n+            e.shutdownNow();\n+        }\n+        System.out.println(\"OK\");\n+    }\n+\n+   static class Handler implements HttpTestHandler {\n+        static volatile boolean ok;\n+\n+        @Override\n+        public void handle(HttpTestExchange he) throws IOException {\n+            String method = he.getRequestMethod();\n+            InputStream is = he.getRequestBody();\n+            if (!method.equalsIgnoreCase(\"GET\")) {\n+                he.sendResponseHeaders(500, 0);\n+                ok = false;\n+            } else { \/\/ GET\n+                he.sendResponseHeaders(200, RESPONSE.length());\n+                OutputStream os = he.getResponseBody();\n+                os.write(RESPONSE.getBytes(US_ASCII));\n+                os.close();\n+                ok = true;\n+            }\n+        }\n+   }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/GETTest.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"}]}