{"files":[{"patch":"@@ -91,2 +91,4 @@\n- *   String response = client.send(request, BodyHandlers.ofString()).body();\n- *   System.out.println(response.body());\n+ *   String response = client.send(request, BodyHandlers.ofString())\n+ *                           .bodyWhen(r -> r.statusCode() == 200)\n+ *                           .orElse(\"ERROR\");\n+ *   System.out.println(response);\n@@ -344,1 +346,1 @@\n-     *         or is otherwise invalid.\n+     *         or if the uristring is invalid.\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpRequest.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+import java.util.function.Predicate;\n@@ -146,0 +147,8 @@\n+    \/**\n+     * Returns the body if the given predicate is satisfied. \n+     * \n+     * @param predicate the Predicate to test\n+     * @return an Optional containing the response body if the predicate returns true\n+     *\/\n+    public Optional<T> bodyWhen(Predicate<ResponseInfo> predicate) throws IOException;\n+\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpResponse.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.function.Predicate;\n@@ -55,0 +56,1 @@\n+    final ResponseInfo rinfo;\n@@ -71,0 +73,1 @@\n+        this.rinfo = new ResponseInfoImpl(response);\n@@ -98,0 +101,9 @@\n+    @Override\n+    public Optional<T> bodyWhen(Predicate<ResponseInfo> predicate) {\n+        if (predicate.test(rinfo)) {\n+            return Optional.of(body());\n+        } else {\n+            return Optional.empty();\n+        }\n+    }\n+\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpResponseImpl.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -83,6 +83,3 @@\n-            HttpResponse resp = client.send(req, BodyHandlers.ofString());\n-            ok = resp.statusCode() == 200 && resp.body().equals(RESPONSE);\n-\n-            if (!ok)\n-                throw new RuntimeException(\"Test failed:\");\n-\n+            String resp = client.send(req, BodyHandlers.ofString())\n+                                      .bodyWhen(r -> r.statusCode() == 200)\n+                                      .orElseThrow(() -> new RuntimeException(\"Failed\"));\n","filename":"test\/jdk\/java\/net\/httpclient\/GETTest.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"}]}