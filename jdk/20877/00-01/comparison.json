{"files":[{"patch":"@@ -3163,1 +3163,1 @@\n-void Compile::handle_div_mod_op(Node* n, int div_op, int div_mod_op, bool is_unsigned) {\n+void Compile::handle_div_mod_op(Node* n, BasicType bt, bool is_unsigned) {\n@@ -3169,1 +3169,1 @@\n-  Node* d = n->find_similar(div_op);\n+  Node* d = n->find_similar(Op_DivIL(bt, is_unsigned));\n@@ -3174,2 +3174,0 @@\n-  BasicType bt = div_op == Op_DivI || div_op == Op_UDivI ? T_INT : T_LONG;\n-\n@@ -3177,1 +3175,1 @@\n-  if (Matcher::has_match_rule(div_mod_op)) {\n+  if (Matcher::has_match_rule(Op_DivModIL(bt, is_unsigned))) {\n@@ -3637,1 +3635,1 @@\n-    handle_div_mod_op(n, Op_DivI, Op_DivModI, false);\n+    handle_div_mod_op(n, T_INT, false);\n@@ -3641,1 +3639,1 @@\n-    handle_div_mod_op(n, Op_DivL, Op_DivModL, false);\n+    handle_div_mod_op(n, T_LONG, false);\n@@ -3645,1 +3643,1 @@\n-    handle_div_mod_op(n, Op_UDivI, Op_UDivModI, true);\n+    handle_div_mod_op(n, T_INT, true);\n@@ -3649,1 +3647,1 @@\n-    handle_div_mod_op(n, Op_UDivL, Op_UDivModL, true);\n+    handle_div_mod_op(n, T_LONG, true);\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1219,1 +1219,1 @@\n-  void handle_div_mod_op(Node* n, int div_op, int div_mod_op, bool is_unsigned);\n+  void handle_div_mod_op(Node* n, BasicType bt, bool is_unsigned);\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2069,0 +2069,32 @@\n+inline int Op_DivIL(BasicType bt, bool is_unsigned) {\n+  assert(bt == T_INT || bt == T_LONG, \"only for int or longs\");\n+  if (bt == T_INT) {\n+    if (is_unsigned) {\n+      return Op_UDivI;\n+    } else {\n+      return Op_DivI;\n+    }\n+  }\n+  if (is_unsigned) {\n+    return Op_UDivL;\n+  } else {\n+    return Op_DivL;\n+  }\n+}\n+\n+inline int Op_DivModIL(BasicType bt, bool is_unsigned) {\n+  assert(bt == T_INT || bt == T_LONG, \"only for int or longs\");\n+  if (bt == T_INT) {\n+    if (is_unsigned) {\n+      return Op_UDivModI;\n+    } else {\n+      return Op_DivModI;\n+    }\n+  }\n+  if (is_unsigned) {\n+    return Op_UDivModL;\n+  } else {\n+    return Op_DivModL;\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -36,1 +36,2 @@\n- * @run driver compiler.c2.TestDivModNodes\n+ * @run main\/othervm -XX:+UseDivMod compiler.c2.TestDivModNodes\n+ * @run main\/othervm -XX:-UseDivMod compiler.c2.TestDivModNodes\n@@ -45,1 +46,2 @@\n-    @IR(counts = {IRNode.DIV_MOD_I, \"1\" })\n+    @IR(counts = {IRNode.DIV_MOD_I, \"1\" }, applyIf = {\"UseDivMod\", \"true\"})\n+    @IR(failOn = {IRNode.DIV_MOD_I}, applyIf = {\"UseDivMod\", \"false\"})\n@@ -55,1 +57,2 @@\n-    @IR(counts = {IRNode.DIV_MOD_L, \"1\" })\n+    @IR(counts = {IRNode.DIV_MOD_L, \"1\" }, applyIf = {\"UseDivMod\", \"true\"})\n+    @IR(failOn = {IRNode.DIV_MOD_L}, applyIf = {\"UseDivMod\", \"false\"})\n@@ -65,1 +68,2 @@\n-    @IR(counts = {IRNode.UDIV_MOD_I, \"1\" })\n+    @IR(counts = {IRNode.UDIV_MOD_I, \"1\" }, applyIf = {\"UseDivMod\", \"true\"})\n+    @IR(failOn = {IRNode.UDIV_MOD_I}, applyIf = {\"UseDivMod\", \"false\"})\n@@ -75,1 +79,2 @@\n-    @IR(counts = {IRNode.UDIV_MOD_L, \"1\" })\n+    @IR(counts = {IRNode.UDIV_MOD_L, \"1\" }, applyIf = {\"UseDivMod\", \"true\"})\n+    @IR(failOn = {IRNode.UDIV_MOD_L}, applyIf = {\"UseDivMod\", \"false\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestDivModNodes.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"}]}