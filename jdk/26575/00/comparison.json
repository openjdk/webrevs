{"files":[{"patch":"@@ -52,1 +52,3 @@\n-        nextStream();\n+        if (!nextStream()) {\n+            throw new IOException(\"Recording data missing on disk.\");\n+        }\n@@ -65,2 +67,10 @@\n-        if (!nextChunk()) {\n-            return false;\n+        while (nextChunk()) {\n+            try {\n+                stream = new BufferedInputStream(Files.newInputStream(currentChunk.getFile()));\n+                unstreamedSize -= currentChunk.getSize();\n+                return true;\n+            } catch (IOException e) {\n+                Logger.log(LogTag.JFR, LogLevel.INFO, \"Could not open chunk file for stream: \" + e.getMessage() + \". Skipping.\");\n+                \/\/ Release chunk if it can't be found\/accessed.\n+                closeChunk();\n+            }\n@@ -68,4 +78,1 @@\n-\n-        stream = new BufferedInputStream(Files.newInputStream(currentChunk.getFile()));\n-        unstreamedSize -= currentChunk.getSize();\n-        return true;\n+        return false;\n@@ -129,3 +136,7 @@\n-        if (stream != null) {\n-            stream.close();\n-            stream = null;\n+        try {\n+            if (stream != null) {\n+                stream.close();\n+                stream = null;\n+            }\n+        } finally {\n+            closeChunk();\n@@ -133,1 +144,0 @@\n-        closeChunk();\n@@ -146,5 +156,3 @@\n-        while (currentChunk != null) {\n-            closeChunk();\n-            if (!nextChunk()) {\n-                return;\n-            }\n+        while (chunks.hasNext()) {\n+            RepositoryChunk c = chunks.next();\n+            c.release();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/ChunkInputStream.java","additions":24,"deletions":16,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.api.recording.misc;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.text.ParseException;\n+import java.util.List;\n+import java.util.function.BiConsumer;\n+\n+import jdk.jfr.Configuration;\n+import jdk.jfr.Event;\n+import jdk.jfr.Recording;\n+\n+\/**\n+ * @test\n+ * @summary Verify that resources are not leaked in case of failure\n+ * @requires vm.flagless\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @run main\/othervm jdk.jfr.api.recording.misc.TestGetStreamWithFailure\n+ *\/\n+public class TestGetStreamWithFailure {\n+    private interface TestCase {\n+        void execute(Recording recording, List<Path> chunks) throws Exception;\n+    }\n+\n+    private static class FillerEvent extends Event {\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        testMissingChunk();\n+        testClosedStream();\n+        testNoChunks();\n+    }\n+\n+    \/\/ Simulates a user deleting all chunks for a recording\n+    private static void testNoChunks() throws Exception {\n+        testStream((r, chunks) -> {\n+            deleteAllChunks();\n+            try {\n+                InputStream is = r.getStream(null, null);\n+                throw new Exception(\"Expected exception when all chunks are missing\");\n+            } catch (IOException ioe) {\n+                if (!ioe.getMessage().equals(\"Recording data missing on disk.\")) {\n+                    throw new Exception(\"Unexpected exception: \" + ioe.getMessage());\n+                }\n+            }\n+        });\n+    }\n+\n+    private static void deleteAllChunks() throws Exception {\n+        for (Path chunk : findChunks()) {\n+            Files.delete(chunk);\n+        }\n+    }\n+\n+    \/\/ Simulates a user deleting a single chunk file on disk.\n+    private static void testMissingChunk() throws Exception {\n+        testStream((r, chunks) -> {\n+            Files.delete(chunks.get(1));\n+            try (InputStream is = r.getStream(null, null)) {\n+                is.readAllBytes();\n+            }\n+        });\n+    }\n+\n+    \/\/ Simulates a user closing a stream before all the data has been read, for\n+    \/\/ example, if InputStream::read throws an IOException.\n+    private static void testClosedStream() throws Exception {\n+        testStream((r, chunks) -> {\n+            int size = (int) (r.getSize());\n+            try (InputStream is = r.getStream(null, null)) {\n+                is.readNBytes(size \/ 2);\n+            }\n+        });\n+    }\n+\n+    private static void testStream(TestCase testCase) throws Exception {\n+        try (Recording r = createRecordingData()) {\n+            List<Path> chunks = findChunks();\n+            if (chunks.size() < 3) {\n+                throw new Exception(\"Expected recording to have at least three chunks\");\n+            }\n+            testCase.execute(r, chunks);\n+            r.close();\n+            if (!findChunks().isEmpty()) {\n+                throw new Exception(\"Chunks left behind.\");\n+            }\n+            deleteAllChunks();\n+        }\n+    }\n+\n+    private static List<Path> findChunks() throws Exception {\n+        String repository = System.getProperty(\"jdk.jfr.repository\");\n+        if (repository == null) {\n+            throw new Exception(\"No system property for JFR repository\");\n+        }\n+        Path dir = Path.of(repository);\n+        return Files.walk(dir).filter(p -> p.toString().endsWith(\".jfr\")).toList();\n+    }\n+\n+    private static Recording createRecordingData() throws IOException, ParseException, InterruptedException {\n+        Configuration c = Configuration.getConfiguration(\"default\");\n+        Recording r = new Recording();\n+        r.start();\n+        emitEvents(); \/\/ Chunk 1\n+        try (Recording s = new Recording()) {\n+            s.start();\n+            emitEvents(); \/\/ Chunk 2\n+        }\n+        emitEvents(); \/\/ Chunk 3\n+        r.stop();\n+        return r;\n+    }\n+\n+    private static void emitEvents() throws InterruptedException {\n+        for (int i = 0; i < 100_000; i++) {\n+            FillerEvent e = new FillerEvent();\n+            e.commit();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/api\/recording\/misc\/TestGetStreamWithFailure.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"}]}