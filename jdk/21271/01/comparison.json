{"files":[{"patch":"@@ -0,0 +1,141 @@\n+\/*\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.ComponentAdapter;\n+import java.awt.event.ComponentEvent;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4009555\n+ * @summary Unit test for a new method in Container class: getMousePosition(boolean)\n+ *          while Container resized.\n+ *\/\n+\n+public class ContainerResizeMousePositionTest {\n+    private static Frame frame;\n+    private static Button button;\n+    private static Robot robot;\n+    private static volatile Point frameLocation;\n+    private static volatile Point newLoc;\n+    private static boolean testSucceeded = false;\n+\n+    private static final CountDownLatch eventCaught = new CountDownLatch(1);\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            robot = new Robot();\n+            EventQueue.invokeAndWait(() -> createAndShowUI());\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            testUI();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowUI() {\n+        frame = new Frame(\"Testing getMousePosition() after resize\");\n+        button = new Button(\"Button\");\n+        frame.setLayout(new BorderLayout());\n+        frame.add(button);\n+        frame.setSize(200, 200);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    private static void testUI() throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            frameLocation = frame.getLocationOnScreen();\n+            newLoc = new Point(frame.getWidth() + 10, frame.getHeight() + 10);\n+        });\n+\n+        robot.mouseMove(frameLocation.x + newLoc.x, frameLocation.y + newLoc.y);\n+        EventQueue.invokeAndWait(() -> {\n+            button.addComponentListener(new ResizeAdapter());\n+            frame.setSize(frame.getWidth() * 2, frame.getHeight() * 2);\n+            frame.validate();\n+        });\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+        if (!eventCaught.await(2, TimeUnit.SECONDS)) {\n+            throw new RuntimeException(\"componentResized Event isn't\"\n+                                       + \" received within a timeout\");\n+        }\n+\n+        if (!testSucceeded) {\n+            throw new RuntimeException(\"Container.getMousePosition(boolean)\"\n+                                       + \" returned incorrect result while Container resized\");\n+        }\n+    }\n+\n+    static class ResizeAdapter extends ComponentAdapter {\n+        int testStageCounter = 0;\n+        @Override\n+        public void componentResized(ComponentEvent e) {\n+            Point pTrue = frame.getMousePosition(true);\n+            if (frame.getMousePosition(false) == null) {\n+                testStageCounter++;\n+                System.out.println(\"\"\"\n+                                    TEST STAGE 1 PASSED:\n+                                    Container.getMousePosition(false)\n+                                    returned NULL over Child Component\n+                                    during resize.\n+                                    \"\"\");\n+            }\n+            if (pTrue != null) {\n+                testStageCounter++;\n+                System.out.println(\"\"\"\n+                                    TEST STAGE 2 PASSED:\n+                                    Container.getMousePosition(true)\n+                                    returned NON-NULL over Child Component\n+                                    during resize.\n+                                    \"\"\");\n+            }\n+            if (pTrue != null && pTrue.x == newLoc.x && pTrue.y == newLoc.y) {\n+                testStageCounter++;\n+                System.out.println(\"\"\"\n+                                    TEST STAGE 3 PASSED:\n+                                    Container.getMousePosition(true)\n+                                    returned correct result over Child Component\n+                                    during resize.\n+                                    \"\"\");\n+            }\n+            testSucceeded = testStageCounter == 3;\n+            eventCaught.countDown();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/MouseInfo\/ContainerResizeMousePositionTest.java","additions":141,"deletions":0,"binary":false,"changes":141,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/XAWTDifference\/XAWTColors.jpg","binary":true,"status":"added"},{"patch":"@@ -0,0 +1,223 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Canvas;\n+import java.awt.Checkbox;\n+import java.awt.Choice;\n+import java.awt.Component;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Image;\n+import java.awt.Label;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.Panel;\n+import java.awt.PopupMenu;\n+import java.awt.ScrollPane;\n+import java.awt.Scrollbar;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+import java.awt.Window;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.swing.ImageIcon;\n+import javax.swing.JLabel;\n+\n+\/*\n+ * @test\n+ * @bug 5092883 6513478 7154025\n+ * @requires (os.family == \"linux\")\n+ * @summary REGRESSION: SystemColor class gives back wrong values under Linux\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual XAWTDifference\n+ *\/\n+\n+public class XAWTDifference {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+                You would see a frame with title \"XAWTDifference Test Frame\".\n+\n+                Test Frame (1)\n+\n+                a) It has three columns in it. The 1st one with ordinary components.\n+                   The 2nd one with disabled components.\n+                   The 3rd one with uneditable components (only text components\n+                   are there). Verify that the difference between different states\n+                   is visible.\n+\n+                Standard Frame (2)\n+\n+                b) You would also see a frame named StandardFrame (2)\n+                   with a lot of components in it. Actually this is just a jpg-image\n+                   in a frame. Verify that every component in the frame (1) looks\n+                   similar to the same component in (2).\n+\n+                   They might differ in colors and be darker or brighter but\n+                   the whole picture should be the same.\n+\n+                c) Also check the color of the MenuBar Items in the MenuBar and\n+                   the PopupMenu assigned to TextArea.\n+                   As you can't compare the colors of menu items with the picture\n+                   so just look if the are adequate enough.\n+                \"\"\";\n+    private static final int HGAP = 20;\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                      .title(\"Test Instructions\")\n+                      .instructions(INSTRUCTIONS)\n+                      .columns(40)\n+                      .testUI(XAWTDifference::createAndShowUI)\n+                      .positionTestUI(XAWTDifference::positionMultiTestUI)\n+                      .build()\n+                      .awaitAndCheck();\n+    }\n+\n+    private static Panel addComponentsIntoPanel(boolean enabled, boolean editable) {\n+        TextField tf = new TextField(\"TextField\");\n+        TextArea ta = new TextArea(\"TextArea\", 10, 10);\n+\n+        Choice levelChooser = new Choice();\n+        levelChooser.add(\"Item #1\");\n+        levelChooser.add(\"Item #2\");\n+\n+        Button b = new Button(\"BUTTON\");\n+        Label label = new Label(\"LABEL\");\n+        java.awt.List list = new java.awt.List(4, false);\n+        list.add(\"one\");\n+        list.add(\"two\");\n+        list.add(\"three\");\n+\n+        Checkbox chb = new Checkbox();\n+        Scrollbar sb = new Scrollbar(Scrollbar.HORIZONTAL);\n+        ScrollPane sp = new ScrollPane(ScrollPane.SCROLLBARS_ALWAYS);\n+        sp.add(new TextArea(\"this is a textarea in scrollpane\"));\n+        sp.setSize(200, 200);\n+        Canvas canvas = new Canvas();\n+        canvas.setSize(100, 100);\n+\n+        \/\/add popup menu to Button\n+        final PopupMenu pm = new PopupMenu();\n+        MenuItem i1 = new MenuItem(\"Item1\");\n+        MenuItem i2 = new MenuItem(\"Item2\");\n+        MenuItem i3 = new MenuItem(\"Item3\");\n+        i3.setEnabled(false);\n+        pm.add(i1);\n+        pm.add(i2);\n+        pm.add(i3);\n+        canvas.add(pm);\n+\n+        ta.add(pm);\n+        ta.addMouseListener(new MouseAdapter() {\n+                public void mousePressed(MouseEvent me) {\n+                    if (me.isPopupTrigger()) {\n+                        pm.show(me.getComponent(), me.getX(), me.getY());\n+                    }\n+                }\n+            });\n+\n+        ArrayList<Component> componentList = new ArrayList<>();\n+\n+        componentList.add(tf);\n+        componentList.add(ta);\n+        if (editable){\n+            componentList.add(levelChooser);\n+            componentList.add(b);\n+            componentList.add(label);\n+            componentList.add(list);\n+            componentList.add(chb);\n+            componentList.add(sb);\n+            componentList.add(sp);\n+            componentList.add(canvas);\n+        } else {\n+            tf.setEditable(false);\n+            ta.setEditable(false);\n+        }\n+\n+        Panel panel = new Panel();\n+        panel.setLayout(new GridLayout(0, 1));\n+        for (Component c : componentList) {\n+            if (!enabled) {\n+                c.setEnabled(false);\n+            }\n+            panel.add(c);\n+        }\n+        return panel;\n+    }\n+\n+    private static List<Window> createAndShowUI() {\n+        Frame testFrame = new Frame(\"XAWTDifference Test Frame\");\n+        StandardFrame standardFrame = new StandardFrame(\"StandardFrame\");\n+        standardFrame.pack();\n+\n+        testFrame.setLayout(new GridLayout(1, 3));\n+        testFrame.add(addComponentsIntoPanel(true, true));\n+        testFrame.add(addComponentsIntoPanel(false, true));\n+        testFrame.add(addComponentsIntoPanel(true, false));\n+\n+        MenuItem mi1 = new MenuItem(\"Item1\");\n+        MenuItem mi2 = new MenuItem(\"Item2\");\n+        MenuItem mi3 = new MenuItem(\"Disabled Item3\");\n+        mi3.setEnabled(false);\n+\n+        MenuBar mb = new MenuBar();\n+        Menu enabledMenu = new Menu(\"Enabled Menu\");\n+        Menu disabledMenu = new Menu(\"Disabled Menu\");\n+        disabledMenu.setEnabled(false);\n+        mb.add(enabledMenu);\n+        mb.add(disabledMenu);\n+        enabledMenu.add(mi1);\n+        enabledMenu.add(mi2);\n+        enabledMenu.add(mi3);\n+\n+        testFrame.setMenuBar(mb);\n+        testFrame.setSize(standardFrame.getWidth(), standardFrame.getHeight());\n+        return List.of(testFrame, standardFrame);\n+    }\n+\n+    private static void positionMultiTestUI(List<? extends Window> windows,\n+                                            PassFailJFrame.InstructionUI instructionUI) {\n+        int x = instructionUI.getLocation().x + instructionUI.getSize().width + HGAP;\n+        for (Window w : windows) {\n+            w.setLocation(x, instructionUI.getLocation().y);\n+            x += w.getWidth() + HGAP;\n+        }\n+    }\n+\n+    private static class StandardFrame extends Frame {\n+        public StandardFrame(String name) {\n+            super(name);\n+            String testPath = System.getProperty(\"test.src\", \".\");\n+            Panel panel = new Panel();\n+            panel.add(new JLabel(new ImageIcon(testPath + File.separator + \"XAWTColors.jpg\")));\n+            add(panel);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/color\/XAWTDifference\/XAWTDifference.java","additions":223,"deletions":0,"binary":false,"changes":223,"status":"added"}]}