{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+\n+COPY += .ico\n","filename":"make\/modules\/jdk.httpserver\/Java.gmk","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,0 +60,3 @@\n+    private static final String FAVICON_RESOURCE_PATH =\n+            \"\/sun\/net\/httpserver\/simpleserver\/resources\/favicon.ico\";\n+    private static final String FAVICON_LAST_MODIFIED = \"Mon, 23 May 1995 11:11:11 GMT\";\n@@ -253,0 +256,25 @@\n+    private static boolean isFavIconRequest(HttpExchange exchange) {\n+        return \"\/favicon.ico\".equals(exchange.getRequestURI().getPath());\n+    }\n+\n+    private void serveDefaultFavIcon(HttpExchange exchange, boolean writeBody)\n+            throws IOException\n+    {\n+        var respHdrs = exchange.getResponseHeaders();\n+        try (var stream = getClass().getModule().getResourceAsStream(FAVICON_RESOURCE_PATH)) {\n+            var bytes = stream.readAllBytes();\n+            respHdrs.set(\"Content-Type\", \"image\/x-icon\");\n+            respHdrs.set(\"Last-Modified\", FAVICON_LAST_MODIFIED);\n+            if (writeBody) {\n+                exchange.sendResponseHeaders(200, bytes.length);\n+                try (OutputStream os = exchange.getResponseBody()) {\n+                    os.write(bytes);\n+                }\n+            } else {\n+                respHdrs.set(\"Content-Length\", Integer.toString(bytes.length));\n+                exchange.sendResponseHeaders(200, -1);\n+            }\n+        }\n+    }\n+\n+\n@@ -374,0 +402,1 @@\n+            boolean isHeadRequest = exchange.getRequestMethod().equals(\"HEAD\");\n@@ -379,1 +408,1 @@\n-                } else if (exchange.getRequestMethod().equals(\"HEAD\")) {\n+                } else if (isHeadRequest) {\n@@ -385,0 +414,8 @@\n+                if (isFavIconRequest(exchange)) {\n+                    try {\n+                        serveDefaultFavIcon(exchange, !isHeadRequest);\n+                        return;\n+                    } catch (IOException ignore) {\n+                        \/\/ fall through to send the not-found response\n+                    }\n+                }\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/simpleserver\/FileServerHandler.java","additions":39,"deletions":2,"binary":false,"changes":41,"status":"modified"},{"filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/simpleserver\/resources\/favicon.ico","binary":true,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,0 +79,2 @@\n+    static final String EXPECTED_LAST_MODIFIED_OF_FAVICON = \"Mon, 23 May 1995 11:11:11 GMT\";\n+\n@@ -145,0 +147,59 @@\n+    @Test\n+    public void testFavIconGET() throws Exception {\n+        var root = Files.createDirectory(TEST_DIR.resolve(\"testFavIconGET\"));\n+\n+        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n+        server.start();\n+        try {\n+            \/\/ expect built-in icon\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"favicon.ico\")).build();\n+            var response = client.send(request, BodyHandlers.ofString());\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.headers().firstValue(\"content-type\").get(), \"image\/x-icon\");\n+            assertEquals(response.headers().firstValue(\"last-modified\").get(), EXPECTED_LAST_MODIFIED_OF_FAVICON);\n+\n+            \/\/ expect custom (and broken) icon\n+            var file = Files.writeString(root.resolve(\"favicon.ico\"), \"broken icon\", CREATE);\n+            try {\n+                var lastModified = getLastModified(file);\n+                var expectedLength = Long.toString(Files.size(file));\n+                response = client.send(request, BodyHandlers.ofString());\n+                assertEquals(response.statusCode(), 200);\n+                assertEquals(response.headers().firstValue(\"content-type\").get(), \"application\/octet-stream\");\n+                assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n+                assertEquals(response.headers().firstValue(\"last-modified\").get(), lastModified);\n+            } finally {\n+                Files.delete(file);\n+            }\n+\n+            \/\/ expect built-in icon\n+            response = client.send(request, BodyHandlers.ofString());\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.headers().firstValue(\"content-type\").get(), \"image\/x-icon\");\n+            assertEquals(response.headers().firstValue(\"last-modified\").get(), EXPECTED_LAST_MODIFIED_OF_FAVICON);\n+        } finally {\n+            server.stop(0);\n+        }\n+    }\n+\n+    @Test\n+    public void testFavIconHEAD() throws Exception {\n+        var root = Files.createDirectory(TEST_DIR.resolve(\"testFavIconHEAD\"));\n+\n+        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n+        server.start();\n+        try {\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"favicon.ico\"))\n+                    .method(\"HEAD\", BodyPublishers.noBody()).build();\n+            var response = client.send(request, BodyHandlers.ofString());\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.headers().firstValue(\"content-type\").get(), \"image\/x-icon\");\n+            assertEquals(response.headers().firstValue(\"last-modified\").get(), EXPECTED_LAST_MODIFIED_OF_FAVICON);\n+            assertEquals(response.body(), \"\");\n+        } finally {\n+            server.stop(0);\n+        }\n+    }\n+\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/SimpleFileServerTest.java","additions":62,"deletions":1,"binary":false,"changes":63,"status":"modified"}]}