{"files":[{"patch":"@@ -1239,1 +1239,1 @@\n-\/\/ - check recv_klass (actual object class) is a subtype of resolved_klass from CompiledICHolder\n+\/\/ - check recv_klass (actual object class) is a subtype of resolved_klass from CompiledICData\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -741,1 +741,1 @@\n-  Register holder = rscratch2;\n+  Register data = rscratch2;\n@@ -757,1 +757,1 @@\n-    __ ldr(rmethod, Address(holder, CompiledICData::speculated_method_offset()));\n+    __ ldr(rmethod, Address(data, CompiledICData::speculated_method_offset()));\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -177,1 +177,1 @@\n-  const Register holder_klass_reg   = r16; \/\/ declaring interface klass (DECC)\n+  const Register holder_klass_reg   = r16; \/\/ declaring interface klass (DEFC)\n@@ -181,1 +181,1 @@\n-  const Register icholder_reg       = rscratch2;\n+  const Register icdata_reg         = rscratch2;\n@@ -185,2 +185,2 @@\n-  __ ldr(resolved_klass_reg, Address(icholder_reg, CompiledICData::itable_refc_klass_offset()));\n-  __ ldr(holder_klass_reg,   Address(icholder_reg, CompiledICData::itable_defc_klass_offset()));\n+  __ ldr(resolved_klass_reg, Address(icdata_reg, CompiledICData::itable_refc_klass_offset()));\n+  __ ldr(holder_klass_reg,   Address(icdata_reg, CompiledICData::itable_defc_klass_offset()));\n","filename":"src\/hotspot\/cpu\/aarch64\/vtableStubs_aarch64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1175,2 +1175,2 @@\n-  \/\/ inline_cache contains a compiledICHolder\n-  const Register ic             = R19_method;\n+  \/\/ inline_cache contains a CompiledICData\n+  const Register ic             = R19_inline_cache_reg;\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,1 +54,0 @@\n-const Register IC_Klass    = t1;    \/\/ where the IC klass is cached\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-    \/\/ CompiledDirectCall::to_interp_stub_size() (14) + CompiledStaticCall::to_trampoline_stub_size() (1 + 3 + address)\n+    \/\/ CompiledDirectCall::to_interp_stub_size() (14) + CompiledDirectCall::to_trampoline_stub_size() (1 + 3 + address)\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2546,1 +2546,1 @@\n-\/\/ - check recv_klass (actual object class) is a subtype of resolved_klass from CompiledICHolder\n+\/\/ - check recv_klass (actual object class) is a subtype of resolved_klass from CompiledICData\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -623,2 +623,0 @@\n-  Label ok;\n-\n@@ -626,1 +624,1 @@\n-  const Register holder = t1;\n+  const Register data = t1;\n@@ -642,1 +640,1 @@\n-    __ ld(xmethod, Address(holder, CompiledICData::speculated_method_offset()));\n+    __ ld(xmethod, Address(data, CompiledICData::speculated_method_offset()));\n@@ -644,4 +642,0 @@\n-    __ bind(ok);\n-    \/\/ Method might have been compiled since the call site was patched to\n-    \/\/ interpreted; if that is the case treat it as a miss so we can get\n-    \/\/ the call site corrected.\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-  \/\/  t1: CompiledICHolder\n+  \/\/  t1: CompiledICData\n@@ -180,1 +180,1 @@\n-  const Register holder_klass_reg   = x19; \/\/ declaring interface klass (DECC)\n+  const Register holder_klass_reg   = x19; \/\/ declaring interface klass (DEFC)\n@@ -184,1 +184,1 @@\n-  const Register icholder_reg       = t1;\n+  const Register icdata_reg         = t1;\n@@ -188,2 +188,2 @@\n-  __ ld(resolved_klass_reg, Address(icholder_reg, CompiledICData::itable_refc_klass_offset()));\n-  __ ld(holder_klass_reg,   Address(icholder_reg, CompiledICData::itable_defc_klass_offset()));\n+  __ ld(resolved_klass_reg, Address(icdata_reg, CompiledICData::itable_refc_klass_offset()));\n+  __ ld(holder_klass_reg,   Address(icdata_reg, CompiledICData::itable_defc_klass_offset()));\n","filename":"src\/hotspot\/cpu\/riscv\/vtableStubs_riscv.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2321,1 +2321,1 @@\n-    __ z_lg(Z_method, Address(Z_method, CompiledICData::speculated_method_offset()));\n+    __ z_lg(Z_method, Address(Z_inline_cache, CompiledICData::speculated_method_offset()));\n","filename":"src\/hotspot\/cpu\/s390\/sharedRuntime_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -946,1 +946,1 @@\n-  Register holder = rax;\n+  Register data = rax;\n@@ -952,1 +952,1 @@\n-    __ movptr(rbx, Address(holder, CompiledICData::speculated_method_offset()));\n+    __ movptr(rbx, Address(data, CompiledICData::speculated_method_offset()));\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1002,1 +1002,1 @@\n-  Register holder = rax;\n+  Register data = rax;\n@@ -1008,1 +1008,1 @@\n-    __ movptr(rbx, Address(holder, CompiledICData::speculated_method_offset()));\n+    __ movptr(rbx, Address(data, CompiledICData::speculated_method_offset()));\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-  \/\/  rax: CompiledICHolder\n+  \/\/  rax: CompiledICData\n@@ -185,1 +185,1 @@\n-  const Register holder_klass_reg   = rax; \/\/ declaring interface klass (DECC)\n+  const Register holder_klass_reg   = rax; \/\/ declaring interface klass (DEFC)\n@@ -189,1 +189,1 @@\n-  const Register icholder_reg       = rax;\n+  const Register icdata_reg         = rax;\n@@ -192,2 +192,2 @@\n-  __ movptr(resolved_klass_reg, Address(icholder_reg, CompiledICData::itable_refc_klass_offset()));\n-  __ movptr(holder_klass_reg,   Address(icholder_reg, CompiledICData::itable_defc_klass_offset()));\n+  __ movptr(resolved_klass_reg, Address(icdata_reg, CompiledICData::itable_refc_klass_offset()));\n+  __ movptr(holder_klass_reg,   Address(icdata_reg, CompiledICData::itable_defc_klass_offset()));\n","filename":"src\/hotspot\/cpu\/x86\/vtableStubs_x86_32.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-  const Register icholder_reg       = rax;\n+  const Register icdata_reg         = rax;\n@@ -184,2 +184,2 @@\n-  __ movptr(resolved_klass_reg, Address(icholder_reg, CompiledICData::itable_refc_klass_offset()));\n-  __ movptr(holder_klass_reg,   Address(icholder_reg, CompiledICData::itable_defc_klass_offset()));\n+  __ movptr(resolved_klass_reg, Address(icdata_reg, CompiledICData::itable_refc_klass_offset()));\n+  __ movptr(holder_klass_reg,   Address(icdata_reg, CompiledICData::itable_defc_klass_offset()));\n","filename":"src\/hotspot\/cpu\/x86\/vtableStubs_x86_64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -172,5 +172,1 @@\n-  RelocIterator iter(nm, call_site, call_site + 1);\n-  iter.next();\n-  CompiledIC* c_ic = new CompiledIC(&iter);\n-  c_ic->verify();\n-  return c_ic;\n+  return CompiledIC_at(nm, call_site);\n@@ -182,3 +178,1 @@\n-  CompiledIC* c_ic = new CompiledIC(&iter);\n-  c_ic->verify();\n-  return c_ic;\n+  return CompiledIC_at(&iter);\n@@ -190,5 +184,1 @@\n-  RelocIterator iter(cm, call_site, call_site + 1);\n-  iter.next();\n-  CompiledIC* c_ic = new CompiledIC(&iter);\n-  c_ic->verify();\n-  return c_ic;\n+  return CompiledIC_at(cm, call_site);\n","filename":"src\/hotspot\/share\/code\/compiledIC.cpp","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-class CompiledICData : public CHeapObj<mtCompiler> {\n+class CompiledICData : public CHeapObj<mtCode> {\n@@ -64,0 +64,1 @@\n+  friend class JVMCIVMStructs;\n","filename":"src\/hotspot\/share\/code\/compiledIC.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -410,13 +410,0 @@\n-\/\/ Clear IC callsites\n-\/\/ as well as any associated CompiledICHolders.\n-void CompiledMethod::purge_ic_callsites() {\n-  ResourceMark rm;\n-  RelocIterator iter(this);\n-  while(iter.next()) {\n-    if (iter.type() == relocInfo::virtual_call_type) {\n-      CompiledIC* ic = CompiledIC_at(&iter);\n-      delete ic->data();\n-    }\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/code\/compiledMethod.cpp","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -376,1 +376,0 @@\n-  void purge_ic_callsites();\n@@ -381,1 +380,0 @@\n-  \/\/ Verify and count cached icholder relocations.\n","filename":"src\/hotspot\/share\/code\/compiledMethod.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -643,0 +643,1 @@\n+  _compiled_ic_data(nullptr),\n@@ -787,0 +788,1 @@\n+  _compiled_ic_data(nullptr),\n@@ -1148,0 +1150,2 @@\n+  GrowableArray<NativeMovConstReg*> virtual_call_data;\n+\n@@ -1155,1 +1159,1 @@\n-      value->set_data((intptr_t)new CompiledICData());\n+      virtual_call_data.append(value);\n@@ -1162,0 +1166,11 @@\n+\n+  if (virtual_call_data.length() > 0) {\n+    \/\/ We allocate a block of CompiledICData per nmethod so the GC can purge this faster.\n+    _compiled_ic_data = new CompiledICData[virtual_call_data.length()];\n+    CompiledICData* next_data = _compiled_ic_data;\n+\n+    for (NativeMovConstReg* value : virtual_call_data) {\n+      value->set_data((intptr_t)next_data);\n+      next_data++;\n+    }\n+  }\n@@ -1467,1 +1482,1 @@\n-  purge_ic_callsites();\n+  delete[] _compiled_ic_data;\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+class CompiledICData;\n@@ -199,0 +200,1 @@\n+  CompiledICData* _compiled_ic_data;\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -286,7 +286,0 @@\n-bool VtableStubs::is_icholder_entry(address pc) {\n-  assert(contains(pc), \"must contain all vtable blobs\");\n-  VtableStub* stub = (VtableStub*)(pc - VtableStub::entry_offset());\n-  \/\/ itable stubs use CompiledICHolder.\n-  return stub->is_itable_stub();\n-}\n-\n","filename":"src\/hotspot\/share\/code\/vtableStubs.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -110,1 +110,0 @@\n-  static bool        is_icholder_entry(address pc);                  \/\/ is the blob containing pc (which must be a vtable blob) an icholder?\n","filename":"src\/hotspot\/share\/code\/vtableStubs.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"code\/compiledIC.hpp\"\n@@ -147,0 +148,5 @@\n+  volatile_nonstatic_field(CompiledICData,     _speculated_method,                     Method*)                                      \\\n+  volatile_nonstatic_field(CompiledICData,     _speculated_klass,                      uintptr_t)                                    \\\n+  nonstatic_field(CompiledICData,              _itable_defc_klass,                     Klass*)                                       \\\n+  nonstatic_field(CompiledICData,              _itable_refc_klass,                     Klass*)                                       \\\n+                                                                                                                                     \\\n@@ -433,0 +439,1 @@\n+  declare_toplevel_type(CompiledICData)                                   \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -183,2 +183,0 @@\n-class   CompiledICHolder;\n-\n","filename":"src\/hotspot\/share\/oops\/oopsHierarchy.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.oops;\n-\n-import java.io.*;\n-import java.util.*;\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.runtime.*;\n-import sun.jvm.hotspot.types.*;\n-import sun.jvm.hotspot.utilities.Observable;\n-import sun.jvm.hotspot.utilities.Observer;\n-\n-public class CompiledICHolder extends VMObject {\n-  static {\n-    VM.registerVMInitializedObserver(new Observer() {\n-        public void update(Observable o, Object data) {\n-          initialize(VM.getVM().getTypeDataBase());\n-        }\n-      });\n-  }\n-\n-  private static synchronized void initialize(TypeDataBase db) throws WrongTypeException {\n-    Type type      = db.lookupType(\"CompiledICHolder\");\n-    holderMetadata = new MetadataField(type.getAddressField(\"_holder_metadata\"), 0);\n-    holderKlass    = new MetadataField(type.getAddressField(\"_holder_klass\"), 0);\n-    headerSize     = type.getSize();\n-  }\n-\n-  public CompiledICHolder(Address addr) {\n-      super(addr);\n-  }\n-\n-  public boolean isCompiledICHolder()  { return true; }\n-\n-  private static long headerSize;\n-\n-  \/\/ Fields\n-  private static MetadataField holderMetadata;\n-  private static MetadataField holderKlass;\n-\n-  \/\/ Accessors for declared fields\n-  public Metadata getHolderMetadata() { return holderMetadata.getValue(this); }\n-  public Klass    getHolderKlass()    { return (Klass)    holderKlass.getValue(this); }\n-\n-  public void printValueOn(PrintStream tty) {\n-    tty.print(\"CompiledICHolder\");\n-  }\n-  }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/CompiledICHolder.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"}]}