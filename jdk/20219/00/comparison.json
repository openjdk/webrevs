{"files":[{"patch":"@@ -97,0 +97,6 @@\n+static void requireNotInHotSpot(const char* caller, JVMCI_TRAPS) {\n+    if (JVMCIENV->is_hotspot()) {\n+        JVMCI_THROW_MSG(IllegalStateException, err_msg(\"Cannot call %s from HotSpot\", caller));\n+    }\n+}\n+\n@@ -705,0 +711,8 @@\n+C2V_VMENTRY_0(jlong, getJObjectValue, (JNIEnv* env, jobject, jobject constant_jobject))\n+    requireNotInHotSpot(\"getJObjectValue\", JVMCI_CHECK_0);\n+    JVMCIObject constant = JVMCIENV->wrap(constant_jobject);\n+    Handle constant_value = JVMCIENV->asConstant(constant, JVMCI_CHECK_0);\n+    jobject jni_handle = JNIHandles::make_local(THREAD, constant_value());\n+    return reinterpret_cast<jlong>(jni_handle);\n+C2V_END\n+\n@@ -3257,0 +3271,1 @@\n+  {CC \"getJObjectValue\",                              CC \"(\" OBJECTCONSTANT \")J\",                                                           FN_PTR(getJObjectValue)},\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -292,0 +292,6 @@\n+    \/**\n+     * Gets the {@code jobject} value wrapped by {@code peerObject}.\n+     * Must not be called if {@link Services#IS_IN_NATIVE_IMAGE} is {@code false}.\n+     *\/\n+    native long getJObjectValue(HotSpotObjectConstantImpl peerObject);\n+\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/CompilerToVM.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -929,5 +929,2 @@\n-     * only valid as long as {@code peerObject} is valid. Note that the latter may be shorter than\n-     * the lifetime of {@code peerObject}. As such, this method should only be used to pass an\n-     * object parameter across a JNI call from the JVMCI shared library to HotSpot. This method must\n-     * only be called from within the JVMCI shared library.\n-     *\n+     * a JNI local reference, which is valid for the duration of a JVMCI shared library call. This\n+     * method must only be called from within the JVMCI shared library.\n@@ -938,0 +935,1 @@\n+     * @throws IllegalStateException if not called from within the JVMCI shared library\n@@ -940,5 +938,1 @@\n-        if (peerObject instanceof IndirectHotSpotObjectConstantImpl) {\n-            IndirectHotSpotObjectConstantImpl remote = (IndirectHotSpotObjectConstantImpl) peerObject;\n-            return remote.getHandle();\n-        }\n-        throw new IllegalArgumentException(\"Cannot get jobject value for \" + peerObject + \" (\" + peerObject.getClass().getName() + \")\");\n+        return compilerToVm.getJObjectValue((HotSpotObjectConstantImpl)peerObject);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotJVMCIRuntime.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"}]}