{"files":[{"patch":"@@ -399,1 +399,1 @@\n-  Node* serial_additions = convert_serial_additions(phase, can_reshape, bt);\n+  Node* serial_additions = convert_serial_additions(phase, bt);\n@@ -407,2 +407,3 @@\n-\/\/ Convert a + a + ... + a into a*n\n-Node* AddNode::convert_serial_additions(PhaseGVN* phase, bool can_reshape, BasicType bt) {\n+\/\/ Try to convert a serial of additions into a single multiplication. Also convert `(a * CON) + a` to `(CON + 1) * a` as\n+\/\/ a side effect. On success, a new MulNode is returned.\n+Node* AddNode::convert_serial_additions(PhaseGVN* phase, BasicType bt) {\n@@ -419,0 +420,3 @@\n+\n+  \/\/ While multiplications can be potentially optimized to power-of-2 subtractions (e.g., a * 7 => (a << 3) - a),\n+  \/\/ (x - y) + y => x is already handled by the Identity() methods. So, we don't need to check for that pattern here.\n@@ -422,2 +426,1 @@\n-      || find_power_of_two_addition_pattern(in1, bt, &multiplier) == in2\n-      || find_power_of_two_subtraction_pattern(in1, bt, &multiplier) == in2) {\n+      || find_power_of_two_addition_pattern(in1, bt, &multiplier) == in2) {\n@@ -429,1 +432,1 @@\n-    return MulNode::make(con, in(2), bt);\n+    return MulNode::make(con, in2, bt);\n@@ -435,1 +438,2 @@\n-\/\/ Match `a + a`, extract `a` and `2`\n+\/\/ Try to match `a + a`. On success, return `a` and set `2` as `multiplier`.\n+\/\/ The method matches `n` to for pattern: AddNode(a, a).\n@@ -437,1 +441,0 @@\n-  \/\/ Look for pattern: AddNode(a, a)\n@@ -446,1 +449,3 @@\n-\/\/ Match `a << CON`, extract `a` and `1 << CON`\n+\/\/ Try to match `a << CON`. On success, return `a` and set `1 << CON` as `multiplier`.\n+\/\/ Match `n` for pattern: LShiftNode(a, CON).\n+\/\/ Note that the power-of-2 multiplication optimization could potentially convert a MulNode to this pattern.\n@@ -448,1 +453,0 @@\n-  \/\/ Look for pattern: LShiftNode(a, CON)\n@@ -463,1 +467,4 @@\n-\/\/ Match `CON * a`, extract `a` and `CON`\n+\/\/ Try to match `CON * a`. On success, return `a` and set `CON` as `multiplier`.\n+\/\/ Match `n` for patterns:\n+\/\/     - MulNode(CON, a)\n+\/\/     - MulNode(a, CON)\n@@ -465,4 +472,1 @@\n-  \/\/ Look for patterns:\n-  \/\/     - MulNode(CON, a)\n-  \/\/     - MulNode(a, CON)\n-  \/\/ This optimization technically only produces MulNode(CON, a), but we might as well transform (a * CON) + a, too.\n+  \/\/ This optimization technically only produces MulNode(CON, a), but we might as match MulNode(a, CON), too.\n@@ -489,2 +493,7 @@\n-\/\/ Match `(a << CON1) + (a << CON2)`, extract `a` and `(1 << CON1) + (1 << CON2)`\n-\/\/ Note that one of the term of the addition could simply be `a` (i.e., a << 0)\n+\/\/ Try to match `(a << CON1) + (a << CON2)`. On success, return `a` and set `(1 << CON1) + (1 << CON2)` as `multiplier`.\n+\/\/ Match `n` for patterns:\n+\/\/     - AddNode(LShiftNode(a, CON), LShiftNode(a, CON)\/a)\n+\/\/     - AddNode(LShiftNode(a, CON)\/a, LShiftNode(a, CON))\n+\/\/ given that lhs is different from rhs.\n+\/\/ Note that one of the term of the addition could simply be `a` (i.e., a << 0). Calling this function with `multiplier`\n+\/\/ being null is safe.\n@@ -492,4 +501,0 @@\n-  \/\/ Look for patterns:\n-  \/\/     - AddNode(LShiftNode(a, CON), LShiftNode(a, CON)\/a)\n-  \/\/     - AddNode(LShiftNode(a, CON)\/a, LShiftNode(a, CON))\n-  \/\/ given that lhs is different from rhs\n@@ -542,1 +547,0 @@\n-\n@@ -545,26 +549,0 @@\n-\n-  return nullptr;\n-}\n-\n-\/\/ Match `(a << CON) - a`, extract `a` and `(1 << CON) - 1`\n-Node* AddNode::find_power_of_two_subtraction_pattern(Node* n, BasicType bt, jlong* multiplier) {\n-  \/\/ Look for pattern: SubNode(LShiftNode(a, CON), a)\n-  if (n->Opcode() == Op_Sub(bt) && n->in(1)->Opcode() == Op_LShift(bt) && n->in(1)->in(2)->is_Con()) {\n-    Node* lshift = n->in(1);\n-    Node* base = n->in(2);\n-\n-    Node* lshift_base = lshift->in(1);\n-    if (lshift_base != base) {\n-      return nullptr;\n-    }\n-\n-    Node* con = lshift->in(2);\n-    if (con->is_top()) {\n-      return nullptr;\n-    }\n-\n-    \/\/ We can't simply return the lshift node even if ((a << CON) - a) + a cancels out. Ideal() must return a new node.\n-    *multiplier = ((jlong) 1 << con->get_int()) - 1;\n-    return base;\n-  }\n-\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":26,"deletions":48,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -46,2 +46,1 @@\n-private:\n-  Node* convert_serial_additions(PhaseGVN* phase, bool can_reshape, BasicType bt);\n+  Node* convert_serial_additions(PhaseGVN* phase, BasicType bt);\n@@ -52,1 +51,0 @@\n-  static Node* find_power_of_two_subtraction_pattern(Node* n, BasicType bt, jlong* multiplier);\n","filename":"src\/hotspot\/share\/opto\/addnode.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import compiler.lib.ir_framework.*;\n@@ -28,0 +27,5 @@\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+\n+import java.util.Random;\n@@ -37,0 +41,2 @@\n+    private static final Random RNG = Utils.getRandomInstance();\n+\n@@ -41,5 +47,40 @@\n-    @DontInline\n-    private static void verifyResult(int base, int factor, int observed) {\n-        int expected = base * factor; \/\/ compute expected result here while making sure not inlined in callers\n-        if (expected != observed) {\n-            throw new AssertionError(\"Expected \" + expected + \" but got \" + observed);\n+    @Run(test = { \/\/\n+            \"addTo2\", \/\/\n+            \"addTo3\", \/\/\n+            \"addTo4\", \/\/\n+            \"shiftAndAddTo4\", \/\/\n+            \"mulAndAddTo4\", \/\/\n+            \"addTo5\", \/\/\n+            \"addTo6\", \/\/\n+            \"addTo7\", \/\/\n+            \"addTo8\", \/\/\n+            \"addTo16\", \/\/\n+            \"addAndShiftTo16\", \/\/\n+            \"addTo42\", \/\/\n+            \"mulAndAddTo42\", \/\/\n+            \"mulAndAddToMax\", \/\/\n+            \"mulAndAddToOverflow\", \/\/\n+            \"mulAndAddToZero\", \/\/\n+            \"mulAndAddToMinus1\", \/\/\n+            \"mulAndAddToMinus42\" \/\/\n+    })\n+    private void runIntTests() {\n+        for (int a : new int[] { 0, 1, Integer.MIN_VALUE, Integer.MAX_VALUE, RNG.nextInt() }) {\n+            Asserts.assertEQ(a * 2, addTo2(a));\n+            Asserts.assertEQ(a * 3, addTo3(a));\n+            Asserts.assertEQ(a * 4, addTo4(a));\n+            Asserts.assertEQ(a * 4, shiftAndAddTo4(a));\n+            Asserts.assertEQ(a * 4, mulAndAddTo4(a));\n+            Asserts.assertEQ(a * 5, addTo5(a));\n+            Asserts.assertEQ(a * 6, addTo6(a));\n+            Asserts.assertEQ(a * 7, addTo7(a));\n+            Asserts.assertEQ(a * 8, addTo8(a));\n+            Asserts.assertEQ(a * 16, addTo16(a));\n+            Asserts.assertEQ(a * 16, addAndShiftTo16(a));\n+            Asserts.assertEQ(a * 42, addTo42(a));\n+            Asserts.assertEQ(a * 42, mulAndAddTo42(a));\n+            Asserts.assertEQ(a * Integer.MAX_VALUE, mulAndAddToMax(a));\n+            Asserts.assertEQ(a * Integer.MIN_VALUE, mulAndAddToOverflow(a));\n+            Asserts.assertEQ(0, mulAndAddToZero(a));\n+            Asserts.assertEQ(a * -1, mulAndAddToMinus1(a));\n+            Asserts.assertEQ(a * -42, mulAndAddToMinus42(a));\n@@ -49,5 +90,10 @@\n-    @DontInline\n-    private static void verifyResult(long base, long factor, long observed) {\n-        long expected = base * factor;\n-        if (expected != observed) {\n-            throw new AssertionError(\"Expected \" + expected + \" but got \" + observed);\n+    @Run(test = { \/\/\n+            \"mulAndAddToIntOverflowL\", \/\/\n+            \"mulAndAddToMaxL\", \/\/\n+            \"mulAndAddToOverflowL\" \/\/\n+    })\n+    private void runLongTests() {\n+        for (long a : new long[] { 0, 1, Long.MIN_VALUE, Long.MAX_VALUE, RNG.nextLong() }) {\n+            Asserts.assertEQ(a * (Integer.MAX_VALUE + 1L), mulAndAddToIntOverflowL(a));\n+            Asserts.assertEQ(a * Long.MAX_VALUE, mulAndAddToMaxL(a));\n+            Asserts.assertEQ(a * Long.MIN_VALUE, mulAndAddToOverflowL(a));\n@@ -59,1 +105,0 @@\n-    @Arguments(values = {Argument.RANDOM_EACH})\n@@ -61,4 +106,3 @@\n-    @IR(failOn = {IRNode.LSHIFT_I})\n-    private static void addTo2(int a) {\n-        int sum = a + a; \/\/ Simple additions like a + a should be kept as-is\n-        verifyResult(a, 2, sum);\n+    @IR(failOn = IRNode.LSHIFT_I)\n+    private static int addTo2(int a) {\n+        return a + a; \/\/ Simple additions like a + a should be kept as-is\n@@ -68,6 +112,3 @@\n-    @Arguments(values = {Argument.RANDOM_EACH})\n-    @IR(counts = { IRNode.ADD_I, \"1\" })\n-    @IR(counts = {IRNode.LSHIFT_I, \"1\"})\n-    private static void addTo3(int a) {\n-        int sum = a + a + a; \/\/ a*3 => (a<<1) + a\n-        verifyResult(a, 3, sum);\n+    @IR(counts = { IRNode.ADD_I, \"1\", IRNode.LSHIFT_I, \"1\" })\n+    private static int addTo3(int a) {\n+        return a + a + a; \/\/ a*3 => (a<<1) + a\n@@ -77,1 +118,0 @@\n-    @Arguments(values = {Argument.RANDOM_EACH})\n@@ -79,4 +119,3 @@\n-    @IR(counts = {IRNode.LSHIFT_I, \"1\"})\n-    private static void addTo4(int a) {\n-        int sum = a + a + a + a; \/\/ a*4 => a<<2\n-        verifyResult(a, 4, sum);\n+    @IR(counts = { IRNode.LSHIFT_I, \"1\" })\n+    private static int addTo4(int a) {\n+        return a + a + a + a; \/\/ a*4 => a<<2\n@@ -86,1 +125,0 @@\n-    @Arguments(values = {Argument.RANDOM_EACH})\n@@ -88,4 +126,3 @@\n-    @IR(counts = {IRNode.LSHIFT_I, \"1\"})\n-    private static void shiftAndAddTo4(int a) {\n-        int sum = (a << 1) + a + a; \/\/ a*2 + a + a => a*3 + a => a*4 => a<<2\n-        verifyResult(a, 4, sum);\n+    @IR(counts = { IRNode.LSHIFT_I, \"1\" })\n+    private static int shiftAndAddTo4(int a) {\n+        return (a << 1) + a + a; \/\/ a*2 + a + a => a*3 + a => a*4 => a<<2\n@@ -95,1 +132,0 @@\n-    @Arguments(values = {Argument.RANDOM_EACH})\n@@ -97,4 +133,3 @@\n-    @IR(counts = {IRNode.LSHIFT_I, \"1\"})\n-    private static void mulAndAddTo4(int a) {\n-        int sum = a * 3 + a; \/\/ a*4 => a<<2\n-        verifyResult(a, 4, sum);\n+    @IR(counts = { IRNode.LSHIFT_I, \"1\" })\n+    private static int mulAndAddTo4(int a) {\n+        return a * 3 + a; \/\/ a*4 => a<<2\n@@ -104,6 +139,3 @@\n-    @Arguments(values = {Argument.RANDOM_EACH})\n-    @IR(counts = { IRNode.ADD_I, \"1\" })\n-    @IR(counts = {IRNode.LSHIFT_I, \"1\"})\n-    private static void addTo5L(int a) {\n-        int sum = a + a + a + a + a; \/\/ a*5 => (a<<2) + a\n-        verifyResult(a, 5, sum);\n+    @IR(counts = { IRNode.ADD_I, \"1\", IRNode.LSHIFT_I, \"1\" })\n+    private static int addTo5(int a) {\n+        return a + a + a + a + a; \/\/ a*5 => (a<<2) + a\n@@ -113,6 +145,3 @@\n-    @Arguments(values = {Argument.RANDOM_EACH})\n-    @IR(counts = { IRNode.ADD_I, \"1\" })\n-    @IR(counts = {IRNode.LSHIFT_I, \"2\"})\n-    private static void addTo6L(int a) {\n-        int sum = a + a + a + a + a + a; \/\/ a*6 => (a<<1) + (a<<2)\n-        verifyResult(a, 6, sum);\n+    @IR(counts = { IRNode.ADD_I, \"1\", IRNode.LSHIFT_I, \"2\" })\n+    private static int addTo6(int a) {\n+        return a + a + a + a + a + a; \/\/ a*6 => (a<<1) + (a<<2)\n@@ -122,1 +151,0 @@\n-    @Arguments(values = {Argument.RANDOM_EACH})\n@@ -124,5 +152,3 @@\n-    @IR(counts = {IRNode.LSHIFT_I, \"1\"})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    private static void addTo7(int a) {\n-        int sum = a + a + a + a + a + a + a; \/\/ a*7 => (a<<3) - a\n-        verifyResult(a, 7, sum);\n+    @IR(counts = { IRNode.LSHIFT_I, \"1\", IRNode.SUB_I, \"1\" })\n+    private static int addTo7(int a) {\n+        return a + a + a + a + a + a + a; \/\/ a*7 => (a<<3) - a\n@@ -132,1 +158,0 @@\n-    @Arguments(values = {Argument.RANDOM_EACH})\n@@ -134,4 +159,3 @@\n-    @IR(counts = {IRNode.LSHIFT_I, \"1\"})\n-    private static void addTo8(int a) {\n-        int sum = a + a + a + a + a + a + a + a; \/\/ a*8 => a<<3\n-        verifyResult(a, 8, sum);\n+    @IR(counts = { IRNode.LSHIFT_I, \"1\" })\n+    private static int addTo8(int a) {\n+        return a + a + a + a + a + a + a + a; \/\/ a*8 => a<<3\n@@ -141,1 +165,0 @@\n-    @Arguments(values = {Argument.RANDOM_EACH})\n@@ -143,3 +166,3 @@\n-    @IR(counts = {IRNode.LSHIFT_I, \"1\"})\n-    private static void addTo16(int a) {\n-        int sum = a + a + a + a + a + a + a + a + a + a\n+    @IR(counts = { IRNode.LSHIFT_I, \"1\" })\n+    private static int addTo16(int a) {\n+        return a + a + a + a + a + a + a + a + a + a \/\/\n@@ -147,1 +170,0 @@\n-        verifyResult(a, 16, sum);\n@@ -151,1 +173,0 @@\n-    @Arguments(values = {Argument.RANDOM_EACH})\n@@ -153,4 +174,3 @@\n-    @IR(counts = {IRNode.LSHIFT_I, \"1\"})\n-    private static void addAndShiftTo16(int a) {\n-        int sum = (a + a) << 3; \/\/ a<<(3 + 1) => a<<4\n-        verifyResult(a, 16, sum);\n+    @IR(counts = { IRNode.LSHIFT_I, \"1\" })\n+    private static int addAndShiftTo16(int a) {\n+        return (a + a) << 3; \/\/ a<<(3 + 1) => a<<4\n@@ -160,1 +180,0 @@\n-    @Arguments(values = {Argument.RANDOM_EACH})\n@@ -163,5 +182,5 @@\n-    private static void addTo42(int a) {\n-        int sum = a + a + a + a + a + a + a + a + a + a\n-                + a + a + a + a + a + a + a + a + a + a\n-                + a + a + a + a + a + a + a + a + a + a\n-                + a + a + a + a + a + a + a + a + a + a\n+    private static int addTo42(int a) {\n+        return a + a + a + a + a + a + a + a + a + a \/\/\n+                + a + a + a + a + a + a + a + a + a + a \/\/\n+                + a + a + a + a + a + a + a + a + a + a \/\/\n+                + a + a + a + a + a + a + a + a + a + a \/\/\n@@ -169,1 +188,0 @@\n-        verifyResult(a, 42, sum);\n@@ -173,1 +191,0 @@\n-    @Arguments(values = {Argument.RANDOM_EACH})\n@@ -176,3 +193,2 @@\n-    private static void mulAndAddTo42(int a) {\n-        int sum = a * 40 + a + a; \/\/ a*41 + a => a*42\n-        verifyResult(a, 42, sum);\n+    private static int mulAndAddTo42(int a) {\n+        return a * 40 + a + a; \/\/ a*41 + a => a*42\n@@ -184,1 +200,0 @@\n-    @Arguments(values = {Argument.RANDOM_EACH})\n@@ -186,5 +201,3 @@\n-    @IR(counts = { IRNode.LSHIFT_I, \"1\" })\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    private static void mulAndAddToMax(int a) {\n-        int sum = a * INT_MAX_MINUS_ONE + a; \/\/ a*MAX => a*(MIN-1) => a*MIN - 1 => (a<<31) - 1\n-        verifyResult(a, Integer.MAX_VALUE, sum);\n+    @IR(counts = { IRNode.LSHIFT_I, \"1\", IRNode.SUB_I, \"1\" })\n+    private static int mulAndAddToMax(int a) {\n+        return a * INT_MAX_MINUS_ONE + a; \/\/ a*MAX => a*(MIN-1) => a*MIN - a => (a<<31) - a\n@@ -194,1 +207,0 @@\n-    @Arguments(values = {Argument.RANDOM_EACH})\n@@ -197,3 +209,2 @@\n-    private static void mulAndAddToOverflow(int a) {\n-        int sum = a * Integer.MAX_VALUE + a; \/\/ a*(MAX+1) => a*(MIN) => a<<31\n-        verifyResult(a, Integer.MIN_VALUE, sum);\n+    private static int mulAndAddToOverflow(int a) {\n+        return a * Integer.MAX_VALUE + a; \/\/ a*(MAX+1) => a*(MIN) => a<<31\n@@ -203,1 +214,0 @@\n-    @Arguments(values = {Argument.RANDOM_EACH})\n@@ -206,3 +216,2 @@\n-    private static void mulAndAddToZero(int a) {\n-        int sum = a*-1 + a; \/\/ 0\n-        verifyResult(a, 0, sum);\n+    private static int mulAndAddToZero(int a) {\n+        return a * -1 + a; \/\/ 0\n@@ -212,1 +221,0 @@\n-    @Arguments(values = {Argument.RANDOM_EACH})\n@@ -214,5 +222,3 @@\n-    @IR(counts = { IRNode.LSHIFT_I, \"1\" })\n-    @IR(counts = { IRNode.SUB_I, \"1\" })\n-    private static void mulAndAddToMinus1(int a) {\n-        int sum = a*-2 + a; \/\/ a*-1 => a - (a<<1)\n-        verifyResult(a, -1, sum);\n+    @IR(counts = { IRNode.LSHIFT_I, \"1\", IRNode.SUB_I, \"1\" })\n+    private static int mulAndAddToMinus1(int a) {\n+        return a * -2 + a; \/\/ a*-1 => a - (a<<1)\n@@ -222,1 +228,0 @@\n-    @Arguments(values = {Argument.RANDOM_EACH})\n@@ -225,3 +230,2 @@\n-    private static void mulAndAddToMinus42(int a) {\n-        int sum = a*-43 + a; \/\/ a*-42\n-        verifyResult(a, -42, sum);\n+    private static int mulAndAddToMinus42(int a) {\n+        return a * -43 + a; \/\/ a*-42\n@@ -231,2 +235,0 @@\n-    private static final long INT_MAX_PLUS_ONE = (long) Integer.MAX_VALUE + 1;\n-\n@@ -234,1 +236,0 @@\n-    @Arguments(values = {Argument.RANDOM_EACH})\n@@ -237,3 +238,2 @@\n-    private static void mulAndAddToIntOverflowL(long a) {\n-        long sum = a * Integer.MAX_VALUE + a; \/\/ a*(INT_MAX+1)\n-        verifyResult(a, INT_MAX_PLUS_ONE, sum);\n+    private static long mulAndAddToIntOverflowL(long a) {\n+        return a * Integer.MAX_VALUE + a; \/\/ a*(INT_MAX+1)\n@@ -245,1 +245,0 @@\n-    @Arguments(values = {Argument.RANDOM_EACH})\n@@ -247,5 +246,3 @@\n-    @IR(counts = { IRNode.LSHIFT_L, \"1\" })\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    private static void mulAndAddToMaxL(long a) {\n-        long sum = a * LONG_MAX_MINUS_ONE + a; \/\/ a*MAX => a*(MIN-1) => a*MIN - 1 => (a<<63) - 1\n-        verifyResult(a, Long.MAX_VALUE, sum);\n+    @IR(counts = { IRNode.LSHIFT_L, \"1\", IRNode.SUB_L, \"1\" })\n+    private static long mulAndAddToMaxL(long a) {\n+        return a * LONG_MAX_MINUS_ONE + a; \/\/ a*MAX => a*(MIN-1) => a*MIN - 1 => (a<<63) - 1\n@@ -255,1 +252,0 @@\n-    @Arguments(values = {Argument.RANDOM_EACH})\n@@ -258,3 +254,2 @@\n-    private static void mulAndAddToOverflowL(long a) {\n-        long sum = a * Long.MAX_VALUE + a; \/\/ a*(MAX+1) => a*(MIN) => a<<63\n-        verifyResult(a, Long.MIN_VALUE, sum);\n+    private static long mulAndAddToOverflowL(long a) {\n+        return a * Long.MAX_VALUE + a; \/\/ a*(MAX+1) => a*(MIN) => a<<63\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestSerialAdditions.java","additions":116,"deletions":121,"binary":false,"changes":237,"status":"modified"}]}