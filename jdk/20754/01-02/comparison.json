{"files":[{"patch":"@@ -413,1 +413,1 @@\n-  jlong factor = extract_base_operand_from_serial_additions(phase, this, &base, can_reshape ? 5 : -1);\n+  jlong factor = extract_base_operand_from_serial_additions(phase, this, bt, can_reshape ? 5 : -1, &base);\n@@ -422,1 +422,1 @@\n-      || is_optimized_multiplication(this, base)\n+      || is_optimized_multiplication(this, bt, base)\n@@ -428,1 +428,1 @@\n-  Node* mul = MulNode::make(base, con, bt);\n+  Node* mul = MulNode::make(con, base, bt);\n@@ -439,1 +439,3 @@\n-bool AddNode::is_optimized_multiplication(Node* node, Node* base) {\n+bool AddNode::is_optimized_multiplication(Node* node, BasicType bt, Node* base) {\n+  int op = node->Opcode();\n+\n@@ -441,1 +443,1 @@\n-  if (node->is_LShift() && node->in(2)->is_Con()) {\n+  if (op == Op_LShift(bt) && node->in(2)->is_Con()) {\n@@ -448,2 +450,2 @@\n-  \/\/ giving that lhs is different from rhs\n-  if (node->is_Add()\n+  \/\/ given that lhs is different from rhs\n+  if (op == Op_Add(bt)\n@@ -455,2 +457,2 @@\n-    Node* a1 = node->in(1)->is_LShift() ? node->in(1)->in(1) : node->in(1);\n-    Node* a2 = node->in(2)->is_LShift() ? node->in(2)->in(1) : node->in(2);\n+    Node* lhs = node->in(1);\n+    Node* rhs = node->in(2);\n@@ -458,1 +460,9 @@\n-    return a1 == a2 && base == a1;\n+    Node* lhs_base = lhs->is_LShift() ? lhs->in(1) : lhs;\n+    Node* rhs_base = rhs->is_LShift() ? rhs->in(1) : rhs;\n+\n+    if (lhs == rhs_base || rhs == lhs_base) {\n+      return (lhs == rhs_base && lhs == base)\n+          || (rhs == lhs_base && rhs == base);\n+    }\n+\n+    return lhs_base == rhs_base && base == lhs_base;\n@@ -462,1 +472,1 @@\n-  if (node->is_Sub() && node->in(1)->is_LShift() && node->in(1)->in(2)->is_Con()) {\n+  if (op == Op_Sub(bt) && node->in(1)->Opcode() == Op_LShift(bt) && node->in(1)->in(2)->is_Con()) {\n@@ -473,1 +483,1 @@\n-jlong AddNode::extract_base_operand_from_serial_additions(PhaseGVN* phase, Node* node, Node** base, int depth_limit) {\n+jlong AddNode::extract_base_operand_from_serial_additions(PhaseGVN* phase, Node* node, BasicType bt, int depth_limit, Node** base) {\n@@ -480,0 +490,2 @@\n+  int op = node->Opcode();\n+\n@@ -481,2 +493,1 @@\n-  if (node->is_Mul()\n-      && node->Opcode() != Op_AndI && node->Opcode() != Op_AndL \/\/ AndNode extends MulNode for some reason\n+  if (op == Op_Mul(bt)\n@@ -486,1 +497,1 @@\n-    BasicType bt = phase->type(const_node)->basic_type();\n+    BasicType const_bt = phase->type(const_node)->basic_type();\n@@ -488,1 +499,1 @@\n-    if (bt == T_INT || bt == T_LONG) { \/\/ const could potentially be void type\n+    if (const_bt == T_INT || const_bt == T_LONG) { \/\/ const could potentially be void type\n@@ -490,1 +501,1 @@\n-      jlong multiplier = extract_base_operand_from_serial_additions(phase, operand_node, &mul_base, depth_limit - 1);\n+      jlong multiplier = extract_base_operand_from_serial_additions(phase, operand_node, bt, depth_limit - 1, &mul_base);\n@@ -493,1 +504,1 @@\n-      return multiplier * const_node->get_integer_as_long(bt);\n+      return multiplier * const_node->get_integer_as_long(const_bt);\n@@ -498,1 +509,1 @@\n-  if (node->is_LShift() && node->isa_LShift()->in(2)->is_Con()) {\n+  if (op == Op_LShift(bt) && node->in(2)->is_Con()) {\n@@ -501,1 +512,1 @@\n-    BasicType bt = phase->type(const_node)->basic_type();\n+    BasicType const_bt = phase->type(const_node)->basic_type();\n@@ -503,1 +514,1 @@\n-    if (bt == T_INT || bt == T_LONG) { \/\/ const could potentially be void type\n+    if (const_bt == T_INT || const_bt == T_LONG) { \/\/ const could potentially be void type\n@@ -505,1 +516,1 @@\n-      jlong multiplier = extract_base_operand_from_serial_additions(phase, operand_node, &shift_base, depth_limit - 1);\n+      jlong multiplier = extract_base_operand_from_serial_additions(phase, operand_node, bt, depth_limit - 1, &shift_base);\n@@ -508,1 +519,1 @@\n-      return multiplier * ((jlong) 1 << const_node->get_integer_as_long(bt)); \/\/ const could be void type\n+      return multiplier * ((jlong) 1 << const_node->get_integer_as_long(const_bt)); \/\/ const could be void type\n@@ -514,1 +525,1 @@\n-  if (node->is_Add() || node->is_Sub()) {\n+  if (op == Op_Add(bt) || op == Op_Sub(bt)) {\n@@ -520,4 +531,4 @@\n-    jlong multiplier_left = extract_base_operand_from_serial_additions(phase, operand_node_left, &base_left,\n-                                                                       depth_limit - 1);\n-    jlong multiplier_right = extract_base_operand_from_serial_additions(phase, operand_node_right, &base_right,\n-                                                                        depth_limit - 1);\n+    jlong multiplier_left = extract_base_operand_from_serial_additions(phase, operand_node_left, bt,\n+                                                                       depth_limit - 1, &base_left);\n+    jlong multiplier_right = extract_base_operand_from_serial_additions(phase, operand_node_right, bt,\n+                                                                        depth_limit - 1, &base_right);\n@@ -527,1 +538,1 @@\n-      return node->is_Add() ? multiplier_left + multiplier_right : multiplier_left - multiplier_right;\n+      return op == Op_Add(bt) ? multiplier_left + multiplier_right : multiplier_left - multiplier_right;\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":40,"deletions":29,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -48,2 +48,2 @@\n-  static bool is_optimized_multiplication(Node* node, Node* base);\n-  static jlong extract_base_operand_from_serial_additions(PhaseGVN* phase, Node* node, Node** base, int depth_limit);\n+  static bool is_optimized_multiplication(Node* node, BasicType bt, Node* base);\n+  static jlong extract_base_operand_from_serial_additions(PhaseGVN* phase, Node* node, BasicType bt, int depth_limit, Node** base);\n","filename":"src\/hotspot\/share\/opto\/addnode.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}