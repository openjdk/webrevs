{"files":[{"patch":"@@ -22,0 +22,1 @@\n+ *\n@@ -24,2 +25,2 @@\n-module panama_jni_def_module {\n-    exports org.openjdk.jni.def;\n+public class BootChild extends BootSuper {\n+    \/\/ Does not override BootSuper::doit()\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\/redefineClasses\/BootChild.java","additions":3,"deletions":2,"binary":false,"changes":5,"previous_filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_jni_def_module\/module-info.java","status":"copied"},{"patch":"@@ -22,0 +22,1 @@\n+ *\n@@ -24,2 +25,4 @@\n-module org.lib {\n-    exports org.lib;\n+public class BootSuper {\n+    public String doit() {\n+        return \"Hello\";\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\/redefineClasses\/BootSuper.java","additions":5,"deletions":2,"binary":false,"changes":7,"previous_filename":"test\/langtools\/tools\/jnativescan\/cases\/modules\/org.lib\/module-info.java","status":"copied"},{"patch":"@@ -22,0 +22,1 @@\n+ *\n@@ -24,2 +25,2 @@\n-module panama_jni_def_module {\n-    exports org.openjdk.jni.def;\n+public class NewChild extends OldSuper {\n+    \/\/ Does not override BootSuper::doit()\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\/redefineClasses\/NewChild.java","additions":3,"deletions":2,"binary":false,"changes":5,"previous_filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_jni_def_module\/module-info.java","status":"copied"},{"patch":"@@ -47,3 +47,0 @@\n-    public static String bootClasses[] = {\n-        \"jdk.test.whitebox.WhiteBox\",\n-    };\n@@ -56,1 +53,1 @@\n-    public static String sharedClasses[] = TestCommon.concat(bootClasses, appClasses);\n+    public static String sharedClasses[] = TestCommon.concat(appClasses);\n@@ -68,2 +65,0 @@\n-        String bootJar =\n-            ClassFileInstaller.writeJar(\"OldClassAndRedefineClassBoot.jar\", bootClasses);\n@@ -77,2 +72,0 @@\n-        String bootCP = \"-Xbootclasspath\/a:\" + bootJar;\n-\n@@ -81,1 +74,1 @@\n-        OutputAnalyzer out = TestCommon.testDump(appJar, sharedClasses, bootCP, \"-Xlog:cds,cds+class=debug\");\n+        OutputAnalyzer out = TestCommon.testDump(appJar, sharedClasses, \"-Xlog:cds,cds+class=debug\");\n@@ -87,1 +80,0 @@\n-                bootCP,\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\/redefineClasses\/OldClassAndRedefineClass.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+import java.io.File;\n+import java.lang.instrument.ClassDefinition;\n+import java.lang.instrument.Instrumentation;\n+\n+public class RedefineBootClassApp {\n+    public static void main(String args[]) throws Throwable {\n+        File bootJar = new File(args[0]);\n+\n+        Class superCls = Thread.currentThread().getContextClassLoader().loadClass(\"BootSuper\");\n+        System.out.println(\"BootSuper>> loader = \" + superCls.getClassLoader());\n+\n+        {\n+            BootSuper obj = (BootSuper)superCls.newInstance();\n+            System.out.println(\"(before transform) BootSuper>> doit() = \" + obj.doit());\n+        }\n+\n+        \/\/ Redefine the class\n+        Instrumentation instrumentation = InstrumentationRegisterClassFileTransformer.getInstrumentation();\n+        byte[] bytes = Util.getClassFileFromJar(bootJar, \"BootSuper\");\n+        Util.replace(bytes, \"Hello\", \"HELLO\");\n+        instrumentation.redefineClasses(new ClassDefinition(superCls, bytes));\n+\n+        {\n+            BootSuper obj = (BootSuper)superCls.newInstance();\n+            String s = obj.doit();\n+            System.out.println(\"(after transform) BootSuper>> doit() = \" + s);\n+            if (!s.equals(\"HELLO\")) {\n+                throw new RuntimeException(\"BootSuper doit() should be HELLO but got \" + s);\n+            }\n+        }\n+\n+        Class childCls = Thread.currentThread().getContextClassLoader().loadClass(\"BootChild\");\n+        System.out.println(\"BootChild>> loader = \" + childCls.getClassLoader());\n+\n+\n+        {\n+            BootSuper obj = (BootSuper)childCls.newInstance();\n+            String s = obj.doit();\n+            System.out.println(\"(after transform) BootChild>> doit() = \" + s);\n+            if (!s.equals(\"HELLO\")) {\n+                throw new RuntimeException(\"BootChild doit() should be HELLO but got \" + s);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\/redefineClasses\/RedefineBootClassApp.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8342303\n+ * @summary Redefine a shared super class loaded by the boot loader. The vtable of its archived child class must be updated\n+ * @library \/test\/lib\n+ *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\n+ * @requires vm.jvmti\n+ * @build RedefineBootClassTest\n+ *        RedefineBootClassApp\n+ *        BootSuper BootChild\n+ *        InstrumentationClassFileTransformer\n+ *        InstrumentationRegisterClassFileTransformer\n+ * @run driver RedefineBootClassTest\n+ *\/\n+\n+import com.sun.tools.attach.VirtualMachine;\n+import com.sun.tools.attach.VirtualMachineDescriptor;\n+import java.io.File;\n+import java.util.List;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.cds.CDSOptions;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class RedefineBootClassTest {\n+    public static String bootClasses[] = {\n+        \"BootSuper\",\n+        \"BootChild\",\n+    };\n+    public static String appClasses[] = {\n+        \"RedefineBootClassApp\",\n+    };\n+    public static String sharedClasses[] = TestCommon.concat(bootClasses, appClasses);\n+\n+    public static String agentClasses[] = {\n+        \"InstrumentationClassFileTransformer\",\n+        \"InstrumentationRegisterClassFileTransformer\",\n+        \"Util\",\n+    };\n+\n+    public static void main(String[] args) throws Throwable {\n+        runTest();\n+    }\n+\n+    public static void runTest() throws Throwable {\n+        String bootJar =\n+            ClassFileInstaller.writeJar(\"RedefineClassBoot.jar\", bootClasses);\n+        String appJar =\n+            ClassFileInstaller.writeJar(\"RedefineClassApp.jar\", appClasses);\n+        String agentJar =\n+            ClassFileInstaller.writeJar(\"InstrumentationAgent.jar\",\n+                                        ClassFileInstaller.Manifest.fromSourceFile(\"..\/InstrumentationAgent.mf\"),\n+                                        agentClasses);\n+\n+        String bootCP = \"-Xbootclasspath\/a:\" + bootJar;\n+        String agentCmdArg = \"-javaagent:\" + agentJar;\n+\n+        TestCommon.testDump(appJar, sharedClasses, bootCP, \"-Xlog:cds,cds+class=debug\");\n+\n+        OutputAnalyzer out = TestCommon.execAuto(\"-cp\", appJar,\n+                bootCP,\n+                \"-XX:+UnlockDiagnosticVMOptions\",\n+                \"-Xlog:cds=info,class+load\",\n+                agentCmdArg,\n+               \"RedefineBootClassApp\", bootJar);\n+        out.reportDiagnosticSummary();\n+        TestCommon.checkExec(out);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\/redefineClasses\/RedefineBootClassTest.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+import java.io.File;\n+import java.lang.instrument.ClassDefinition;\n+import java.lang.instrument.Instrumentation;\n+\n+public class RedefineOldSuperApp {\n+    public static void main(String args[]) throws Throwable {\n+        File bootJar = new File(args[0]);\n+\n+        Class superCls = Thread.currentThread().getContextClassLoader().loadClass(\"OldSuper\");\n+        System.out.println(\"OldSuper>> loader = \" + superCls.getClassLoader());\n+\n+        {\n+            OldSuper obj = (OldSuper)superCls.newInstance();\n+            System.out.println(\"(before transform) OldSuper>> doit() = \" + obj.doit());\n+        }\n+\n+        \/\/ Redefine the class\n+        Instrumentation instrumentation = InstrumentationRegisterClassFileTransformer.getInstrumentation();\n+        byte[] bytes = Util.getClassFileFromJar(bootJar, \"OldSuper\");\n+        Util.replace(bytes, \"Hello\", \"HELLO\");\n+        instrumentation.redefineClasses(new ClassDefinition(superCls, bytes));\n+\n+        {\n+            OldSuper obj = (OldSuper)superCls.newInstance();\n+            String s = obj.doit();\n+            System.out.println(\"(after transform) OldSuper>> doit() = \" + s);\n+            if (!s.equals(\"HELLO\")) {\n+                throw new RuntimeException(\"OldSuper doit() should be HELLO but got \" + s);\n+            }\n+        }\n+\n+        Class childCls = Thread.currentThread().getContextClassLoader().loadClass(\"NewChild\");\n+        System.out.println(\"NewChild>> loader = \" + childCls.getClassLoader());\n+\n+\n+        {\n+            OldSuper obj = (OldSuper)childCls.newInstance();\n+            String s = obj.doit();\n+            System.out.println(\"(after transform) NewChild>> doit() = \" + s);\n+            if (!s.equals(\"HELLO\")) {\n+                throw new RuntimeException(\"NewChild doit() should be HELLO but got \" + s);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\/redefineClasses\/RedefineOldSuperApp.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8342303\n+ * @summary Redefine a shared old super class loaded by the app loader. The vtable of its archived child class must be updated\n+ * @library \/test\/lib\n+ *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\n+ * @requires vm.jvmti\n+ * @compile ..\/..\/test-classes\/OldSuper.jasm\n+ * @build RedefineOldSuperTest\n+ *        RedefineOldSuperApp\n+ *        NewChild\n+ *        InstrumentationClassFileTransformer\n+ *        InstrumentationRegisterClassFileTransformer\n+ * @run driver RedefineOldSuperTest\n+ *\/\n+\n+import com.sun.tools.attach.VirtualMachine;\n+import com.sun.tools.attach.VirtualMachineDescriptor;\n+import java.io.File;\n+import java.util.List;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.cds.CDSOptions;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class RedefineOldSuperTest {\n+    public static String appClasses[] = {\n+        \"OldSuper\",\n+        \"NewChild\",\n+        \"RedefineOldSuperApp\",\n+    };\n+    public static String sharedClasses[] = TestCommon.concat(appClasses);\n+\n+    public static String agentClasses[] = {\n+        \"InstrumentationClassFileTransformer\",\n+        \"InstrumentationRegisterClassFileTransformer\",\n+        \"Util\",\n+    };\n+\n+    public static void main(String[] args) throws Throwable {\n+        runTest();\n+    }\n+\n+    public static void runTest() throws Throwable {\n+        String appJar =\n+            ClassFileInstaller.writeJar(\"RedefineClassApp.jar\", appClasses);\n+        String agentJar =\n+            ClassFileInstaller.writeJar(\"InstrumentationAgent.jar\",\n+                                        ClassFileInstaller.Manifest.fromSourceFile(\"..\/InstrumentationAgent.mf\"),\n+                                        agentClasses);\n+\n+        String agentCmdArg = \"-javaagent:\" + agentJar;\n+\n+        TestCommon.testDump(appJar, sharedClasses, \"-Xlog:cds,cds+class=debug\");\n+\n+        OutputAnalyzer out = TestCommon.execAuto(\"-cp\", appJar,\n+                \"-XX:+UnlockDiagnosticVMOptions\",\n+                \"-Xlog:cds=info,class+load\",\n+                agentCmdArg,\n+               \"RedefineOldSuperApp\", appJar);\n+        out.reportDiagnosticSummary();\n+        TestCommon.checkExec(out);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\/redefineClasses\/RedefineOldSuperTest.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"}]}