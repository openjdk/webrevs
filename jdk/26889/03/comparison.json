{"files":[{"patch":"@@ -86,12 +86,2 @@\n-    static UnixFileAttributes getIfExists(UnixPath path)\n-        throws UnixException\n-    {\n-        UnixFileAttributes attrs = new UnixFileAttributes();\n-        int errno = UnixNativeDispatcher.stat2(path, attrs);\n-        if (errno == 0) {\n-            return attrs;\n-        } else if (errno == UnixConstants.ENOENT) {\n-            return null;\n-        } else {\n-            throw new UnixException(errno);\n-        }\n+    static UnixFileAttributes getIfExists(UnixPath path) throws UnixException {\n+        return getIfExists(path, true);\n@@ -107,11 +97,8 @@\n-        try {\n-            UnixNativeDispatcher.fstatat(UnixConstants.AT_FDCWD,\n-                                         path.asByteArray(), flag, attrs);\n-        } catch (UnixException x) {\n-            if (x.errno() == UnixConstants.ENOENT)\n-                return null;\n-\n-            throw x;\n-        }\n-\n-        return attrs;\n+        int errno = UnixNativeDispatcher.fstatat2(UnixConstants.AT_FDCWD,\n+                                                  path, flag, attrs);\n+        if (errno == 0)\n+            return attrs;\n+        else if (errno == UnixConstants.ENOENT)\n+            return null;\n+        else\n+            throw new UnixException(errno);\n@@ -133,1 +120,1 @@\n-        UnixNativeDispatcher.fstatat(dfd, path.asByteArray(), flag, attrs);\n+        UnixNativeDispatcher.fstatat(dfd, path, flag, attrs);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileAttributes.java","additions":11,"deletions":24,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -259,0 +259,1 @@\n+    private static native int stat0(long pathAddress, UnixFileAttributes attrs);\n@@ -260,0 +261,1 @@\n+    \/\/ Variant of stat() returning errno instead of throwing UnixException\n@@ -266,2 +268,0 @@\n-    private static native int stat0(long pathAddress, UnixFileAttributes attrs);\n-\n@@ -291,1 +291,1 @@\n-    static void fstatat(int dfd, byte[] path, int flag, UnixFileAttributes attrs)\n+    static void fstatat(int dfd, UnixPath path, int flag, UnixFileAttributes attrs)\n@@ -294,2 +294,14 @@\n-        try (NativeBuffer buffer = NativeBuffers.asNativeBuffer(path)) {\n-            fstatat0(dfd, buffer.address(), flag, attrs);\n+        try (NativeBuffer buffer = copyToNativeBuffer(path)) {\n+            int errno = fstatat0(dfd, buffer.address(), flag, attrs);\n+            if (errno != 0) {\n+                throw new UnixException(errno);\n+            }\n+        }\n+    }\n+    private static native int fstatat0(int dfd, long pathAddress, int flag,\n+        UnixFileAttributes attrs);\n+\n+    \/\/ Variant of fstatat() returning errno instead of throwing UnixException\n+    static int fstatat2(int dfd, UnixPath path, int flag, UnixFileAttributes attrs) {\n+        try (NativeBuffer buffer = copyToNativeBuffer(path)) {\n+            return fstatat0(dfd, buffer.address(), flag, attrs);\n@@ -298,2 +310,0 @@\n-    private static native void fstatat0(int dfd, long pathAddress, int flag,\n-        UnixFileAttributes attrs) throws UnixException;\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixNativeDispatcher.java","additions":17,"deletions":7,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -744,1 +744,1 @@\n-JNIEXPORT void JNICALL\n+JNIEXPORT jint JNICALL\n@@ -764,0 +764,1 @@\n+            return 0;\n@@ -765,1 +766,1 @@\n-            throwUnixException(env, errno);\n+            return errno;\n@@ -767,2 +768,0 @@\n-        \/\/ statx was available, so return now\n-        return;\n@@ -774,1 +773,1 @@\n-        return;\n+        return ENOTSUP;\n@@ -777,3 +776,1 @@\n-    if (err == -1) {\n-        throwUnixException(env, errno);\n-    } else {\n+    if (err == 0) {\n@@ -781,0 +778,3 @@\n+        return 0;\n+    } else {\n+        return errno;\n","filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixNativeDispatcher.c","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}