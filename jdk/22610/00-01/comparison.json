{"files":[{"patch":"@@ -51,1 +51,0 @@\n-        Utils.checkAllocationSizeAndAlign(byteSize, byteAlignment);\n@@ -53,0 +52,1 @@\n+        \/\/ Must be called after SegmentFactories.allocateNative to avoid class initialization cycles\n@@ -58,1 +58,0 @@\n-        Utils.checkAllocationSizeAndAlign(byteSize, byteAlignment);\n@@ -60,0 +59,1 @@\n+        \/\/ Must be called after SegmentFactories.allocateNative to avoid class initialization cycles\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/ArenaImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -182,0 +182,1 @@\n+        Utils.checkAllocationSizeAndAlign(byteSize, byteAlignment);\n@@ -186,1 +187,1 @@\n-        \/\/ Align up to 8 so we can init the memory with longs\n+        \/\/ Align the allocation size up to a multiple of 8 so we can init the memory with longs\n@@ -189,0 +190,3 @@\n+        long allocationSize;\n+        long allocationBase;\n+        long result;\n@@ -190,2 +194,4 @@\n-            return allocateNativeOveraligned(byteSize, byteAlignment, sessionImpl, shouldReserve, init, alignedSize);\n-        }\n+            allocationSize = alignedSize + byteAlignment - MAX_MALLOC_ALIGN;\n+            if (shouldReserve) {\n+                AbstractMemorySegmentImpl.NIO_ACCESS.reserveMemory(allocationSize, byteSize);\n+            }\n@@ -193,14 +199,6 @@\n-        if (shouldReserve) {\n-            AbstractMemorySegmentImpl.NIO_ACCESS.reserveMemory(alignedSize, byteSize);\n-        }\n-        long address = allocateMemoryWrapper(alignedSize);\n-        if (init) {\n-            initNativeMemory(address, alignedSize);\n-        }\n-        sessionImpl.addOrCleanupIfFail(new MemorySessionImpl.ResourceList.ResourceCleanup() {\n-            @Override\n-            public void cleanup() {\n-                UNSAFE.freeMemory(address);\n-                if (shouldReserve) {\n-                    AbstractMemorySegmentImpl.NIO_ACCESS.unreserveMemory(alignedSize, byteSize);\n-                }\n+            allocationBase = allocateMemoryWrapper(allocationSize);\n+            result = Utils.alignUp(allocationBase, byteAlignment);\n+        } else {\n+            allocationSize = alignedSize;\n+            if (shouldReserve) {\n+                AbstractMemorySegmentImpl.NIO_ACCESS.reserveMemory(allocationSize, byteSize);\n@@ -208,3 +206,0 @@\n-        });\n-        return address;\n-    }\n@@ -212,6 +207,2 @@\n-    @DontInline\n-    private static long allocateNativeOveraligned(long byteSize, long byteAlignment, MemorySessionImpl sessionImpl,\n-                                                  boolean shouldReserve, boolean init, long alignedSize) {\n-        long allocSize = alignedSize + byteAlignment - MAX_MALLOC_ALIGN;\n-        if (shouldReserve) {\n-            AbstractMemorySegmentImpl.NIO_ACCESS.reserveMemory(allocSize, byteSize);\n+            allocationBase = allocateMemoryWrapper(allocationSize);\n+            result = allocationBase;\n@@ -219,2 +210,1 @@\n-        long base = allocateMemoryWrapper(allocSize);\n-        long res = Utils.alignUp(base, byteAlignment);\n+\n@@ -222,1 +212,1 @@\n-            initNativeMemory(res, alignedSize);\n+            initNativeMemory(result, alignedSize);\n@@ -227,1 +217,1 @@\n-                UNSAFE.freeMemory(base);\n+                UNSAFE.freeMemory(allocationBase);\n@@ -229,1 +219,1 @@\n-                    AbstractMemorySegmentImpl.NIO_ACCESS.unreserveMemory(allocSize, byteSize);\n+                    AbstractMemorySegmentImpl.NIO_ACCESS.unreserveMemory(allocationSize, byteSize);\n@@ -233,1 +223,1 @@\n-        return res;\n+        return result;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SegmentFactories.java","additions":22,"deletions":32,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -69,1 +69,0 @@\n-        static final long ADDRESS_SIZE;\n@@ -73,1 +72,0 @@\n-            ADDRESS_SIZE = AddressLayout.ADDRESS.byteSize();\n@@ -78,21 +76,9 @@\n-            if (ADDRESS_SIZE == Long.BYTES) {\n-                CALLOC = linker.downcallHandle(callocAddr, FunctionDescriptor.of(ValueLayout.JAVA_LONG, ValueLayout.JAVA_LONG, ValueLayout.JAVA_LONG));\n-                FREE = linker.downcallHandle(freeAddr, FunctionDescriptor.ofVoid(ValueLayout.JAVA_LONG));\n-                CLEANUP = ms -> {\n-                    try {\n-                        FREE.invokeExact(ms.address());\n-                    } catch (Throwable e) {\n-                        throw new AssertionError(e);\n-                    }\n-                };\n-            } else {\n-                CALLOC = linker.downcallHandle(callocAddr, FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT));\n-                FREE = linker.downcallHandle(freeAddr, FunctionDescriptor.ofVoid(ValueLayout.JAVA_INT));\n-                CLEANUP = ms -> {\n-                    try {\n-                        FREE.invokeExact((int)ms.address());\n-                    } catch (Throwable e) {\n-                        throw new AssertionError(e);\n-                    }\n-                };\n-            }\n+            CALLOC = linker.downcallHandle(callocAddr, FunctionDescriptor.of(ValueLayout.JAVA_LONG, ValueLayout.JAVA_LONG, ValueLayout.JAVA_LONG));\n+            FREE = linker.downcallHandle(freeAddr, FunctionDescriptor.ofVoid(ValueLayout.JAVA_LONG));\n+            CLEANUP = ms -> {\n+                try {\n+                    FREE.invokeExact(ms.address());\n+                } catch (Throwable e) {\n+                    throw new AssertionError(e);\n+                }\n+            };\n@@ -103,5 +89,1 @@\n-                if (ADDRESS_SIZE == Long.BYTES) {\n-                    return (long)CALLOC.invokeExact(1L, size);\n-                } else {\n-                    return (int)CALLOC.invokeExact(1, (int)size);\n-                }\n+                return (long)CALLOC.invokeExact(1L, size);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/AllocTest.java","additions":10,"deletions":28,"binary":false,"changes":38,"status":"modified"}]}