{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import org.junit.jupiter.api.BeforeEach;\n@@ -36,0 +37,1 @@\n+import java.text.DateFormat;\n@@ -37,0 +39,1 @@\n+import java.util.Date;\n@@ -39,0 +42,1 @@\n+import java.util.TimeZone;\n@@ -48,3 +52,10 @@\n-    \/\/ Sample AM\/PM Hours\n-    private static final int AM_HOUR = 3;\n-    private static final int PM_HOUR = 15;\n+    \/\/ Various calendars to test against\n+    private static final List<Calendar> calendars = List.of(\n+            \/\/ GMT, daylight savings free\n+            new GregorianCalendar(TimeZone.getTimeZone(\"GMT\")),\n+            \/\/ Daylight savings observing calendars\n+            new GregorianCalendar(TimeZone.getTimeZone(\"America\/Chicago\")),\n+            new GregorianCalendar(TimeZone.getTimeZone(\"America\/Chicago\")),\n+            new GregorianCalendar(TimeZone.getTimeZone(\"America\/Los_Angeles\")),\n+            new GregorianCalendar(TimeZone.getTimeZone(\"America\/Los_Angeles\"))\n+    );\n@@ -52,12 +63,22 @@\n-    \/\/ Roll the HOUR_OF_DAY field. AM\/PM specific calendar does not matter.\n-    @ParameterizedTest\n-    @FieldSource(\"hours\")\n-    void HourOfDayTest(int hour) {\n-        var cal = new GregorianCalendar(2005, 8, 12, PM_HOUR, 30, 45);\n-        \/\/ E.g. For hour +50 -> (50 + 15) % 24 = 17\n-        \/\/      For hour -50 -> (24 + (15 - 50) % 24) % 24\n-        \/\/                   -> (24 + - 11) % 24 = 13\n-        var expectedHourOfDay = (hour >= 0 ? (PM_HOUR + hour) : (24 + (PM_HOUR + hour) % 24)) % 24 ;\n-        cal.roll(Calendar.HOUR_OF_DAY, hour);\n-        assertEquals(expectedHourOfDay, cal.get(Calendar.HOUR_OF_DAY),\n-                cal.getTime() + \" incorrectly rolled \" + hour);\n+    \/\/ Reset the times of each calendar. These calendars provide testing under\n+    \/\/ daylight savings transitions (or the lack thereof) and different AM\/PM hours.\n+    @BeforeEach\n+    void clear() {\n+        \/\/ Reset all calendars each iteration for clean slate\n+        calendars.forEach(Calendar::clear);\n+\n+        \/\/ Basic test, independent of daylight savings transitions\n+        calendars.get(0).set(2005, 8, 20, 12, 10, 25);\n+\n+        \/\/ Transition to daylight savings time (CST\/CDT) ---\n+        \/\/ Day of transition: 03\/13\/2016 (Sunday)\n+        \/\/      Most interesting test case due to 2 AM skip\n+        calendars.get(1).set(2016, 2, 13, 3, 30, 55);\n+        \/\/ Day before transition: 03\/12\/2016 (Saturday)\n+        calendars.get(2).set(2016, 2, 12, 15, 20, 45);\n+\n+        \/\/ Transition back to standard time (PST\/PDT) ----\n+        \/\/ Day of transition: 11\/06\/2016 (Sunday)\n+        calendars.get(3).set(2016, 10, 6, 4, 15, 20);\n+        \/\/ Day before transition: 11\/05\/2016 (Saturday)\n+        calendars.get(4).set(2016, 10, 5, 12, 25, 30);\n@@ -66,1 +87,1 @@\n-    \/\/ Roll the HOUR field for an AM calendar.\n+    \/\/ Rolling the HOUR_OF_DAY field.\n@@ -69,6 +90,9 @@\n-    void AMHourTest(int hour) {\n-        var cal = new GregorianCalendar(2005, 8, 12, AM_HOUR, 30, 45);\n-        var expectedAMHour = (hour >= 0 ? (AM_HOUR + hour) : (12 + (AM_HOUR + hour) % 12)) % 12;\n-        cal.roll(Calendar.HOUR, hour);\n-        assertEquals(expectedAMHour, cal.get(Calendar.HOUR),\n-                cal.getTime() + \" incorrectly rolled \" + hour);\n+    void HourOfDayTest(int hoursToRoll) {\n+        for (var cal : calendars) {\n+            var savedTime = cal.getTime();\n+            var savedHour = cal.get(Calendar.HOUR_OF_DAY);\n+            cal.roll(Calendar.HOUR_OF_DAY, hoursToRoll);\n+            assertEquals(getExpectedHour(hoursToRoll, savedHour, 24, cal, savedTime),\n+                    cal.get(Calendar.HOUR_OF_DAY),\n+                    getMessage(cal.getTimeZone(), savedTime, hoursToRoll));\n+        }\n@@ -77,1 +101,1 @@\n-    \/\/ Roll the HOUR field for a PM calendar.\n+    \/\/ Rolling the HOUR field.\n@@ -80,6 +104,34 @@\n-    void PMHourTest(int hour) {\n-        var cal = new GregorianCalendar(2005, 8, 12, PM_HOUR, 30, 45);\n-        var expectedPMHour = (hour >= 0 ? (PM_HOUR + hour) : (12 + (PM_HOUR + hour) % 12)) % 12;\n-        cal.roll(Calendar.HOUR, hour);\n-        assertEquals(expectedPMHour, cal.get(Calendar.HOUR),\n-                cal.getTime() + \" incorrectly rolled \" + hour);\n+    void HourTest(int hoursToRoll) {\n+        for (var cal : calendars) {\n+            var savedTime = cal.getTime();\n+            var savedHour = cal.get(Calendar.HOUR_OF_DAY);\n+            cal.roll(Calendar.HOUR, hoursToRoll);\n+            assertEquals(getExpectedHour(hoursToRoll, savedHour, 12, cal, savedTime),\n+                    cal.get(Calendar.HOUR),\n+                    getMessage(cal.getTimeZone(), savedTime, hoursToRoll));\n+        }\n+    }\n+\n+    \/\/ Gets the expected hour after rolling by X hours. Supports 12\/24-hour cycle.\n+    \/\/ Special handling for non-existent 2 AM case on transition day.\n+    private static int getExpectedHour(int roll, int hour, int hourCycle, Calendar cal, Date oldDate) {\n+        \/\/ For example with HOUR_OF_DAY at 15 and a 24-hour cycle\n+        \/\/ For rolling forwards 50 hours -> (50 + 15) % 24 = 17\n+        \/\/ For hour backwards 50 hours -> (24 + (15 - 50) % 24) % 24\n+        \/\/                             -> (24 - 11) % 24 = 13\n+        var result = (roll >= 0 ? (hour + roll) : (hourCycle + (hour + roll) % hourCycle)) % hourCycle;\n+\n+        \/\/ 2 AM does not exist on transition day. Calculate normalized value accordingly\n+        if (cal.getTimeZone().inDaylightTime(oldDate) && cal.get(Calendar.MONTH) == Calendar.MARCH && result == 2) {\n+            return roll > 0 ? result + 1 : result - 1;\n+        } else {\n+            \/\/ Normal return value\n+            return result;\n+        }\n+    }\n+\n+    \/\/ Get a TimeZone adapted error message\n+    private static String getMessage(TimeZone tz, Date date, int hoursToRoll) {\n+        var fmt = DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL);\n+        fmt.setTimeZone(tz);\n+        return fmt.format(date) + \" incorrectly rolled \" + hoursToRoll;\n","filename":"test\/jdk\/java\/util\/Calendar\/RollHoursTest.java","additions":81,"deletions":29,"binary":false,"changes":110,"status":"modified"}]}