{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1217,2 +1217,4 @@\n-                \/\/ If we stay on the same wall-clock time, try the next or previous hour.\n-                if (internalGet(HOUR_OF_DAY) == d.getHours()) {\n+                \/\/ If the rolled amount is not a full HOUR\/HOUR_OF_DAY (12\/24-hour) cycle and\n+                \/\/ if we stay on the same wall-clock time, try the next or previous hour.\n+                if (((field == HOUR_OF_DAY && amount % 24 != 0) || (field == HOUR && amount % 12 != 0))\n+                        && internalGet(HOUR_OF_DAY) == d.getHours()) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/GregorianCalendar.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8367901\n+ * @summary Ensure hour rolling is correct. Particularly, when the HOUR\/HOUR_OF_DAY\n+ *          amount rolled would cause the calendar to originate on the same hour as before\n+ *          the call.\n+ * @run junit RollHoursTest\n+ *\/\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.FieldSource;\n+\n+import java.util.Calendar;\n+import java.util.GregorianCalendar;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class RollHoursTest {\n+\n+    \/\/ Should trigger multiple full HOUR\/HOUR_OF_DAY cycles\n+    private static final List<Integer> hours =\n+            IntStream.rangeClosed(-55, 55).boxed().toList();\n+    \/\/ Sample AM\/PM Hours\n+    private static final int AM_HOUR = 3;\n+    private static final int PM_HOUR = 15;\n+\n+    \/\/ Roll the HOUR_OF_DAY field. AM\/PM specific calendar does not matter.\n+    @ParameterizedTest\n+    @FieldSource(\"hours\")\n+    void HourOfDayTest(int hour) {\n+        var cal = new GregorianCalendar(2005, 8, 12, PM_HOUR, 30, 45);\n+        \/\/ E.g. For hour +50 -> (50 + 15) % 24 = 17\n+        \/\/      For hour -50 -> (24 + (15 - 50) % 24) % 24\n+        \/\/                   -> (24 + - 11) % 24 = 13\n+        var expectedHourOfDay = (hour >= 0 ? (PM_HOUR + hour) : (24 + (PM_HOUR + hour) % 24)) % 24 ;\n+        cal.roll(Calendar.HOUR_OF_DAY, hour);\n+        assertEquals(expectedHourOfDay, cal.get(Calendar.HOUR_OF_DAY),\n+                cal.getTime() + \" incorrectly rolled \" + hour);\n+    }\n+\n+    \/\/ Roll the HOUR field for an AM calendar.\n+    @ParameterizedTest\n+    @FieldSource(\"hours\")\n+    void AMHourTest(int hour) {\n+        var cal = new GregorianCalendar(2005, 8, 12, AM_HOUR, 30, 45);\n+        var expectedAMHour = (hour >= 0 ? (AM_HOUR + hour) : (12 + (AM_HOUR + hour) % 12)) % 12;\n+        cal.roll(Calendar.HOUR, hour);\n+        assertEquals(expectedAMHour, cal.get(Calendar.HOUR),\n+                cal.getTime() + \" incorrectly rolled \" + hour);\n+    }\n+\n+    \/\/ Roll the HOUR field for a PM calendar.\n+    @ParameterizedTest\n+    @FieldSource(\"hours\")\n+    void PMHourTest(int hour) {\n+        var cal = new GregorianCalendar(2005, 8, 12, PM_HOUR, 30, 45);\n+        var expectedPMHour = (hour >= 0 ? (PM_HOUR + hour) : (12 + (PM_HOUR + hour) % 12)) % 12;\n+        cal.roll(Calendar.HOUR, hour);\n+        assertEquals(expectedPMHour, cal.get(Calendar.HOUR),\n+                cal.getTime() + \" incorrectly rolled \" + hour);\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Calendar\/RollHoursTest.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}