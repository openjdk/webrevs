{"files":[{"patch":"@@ -106,2 +106,2 @@\n-  static const int self_forwarded_bits            = 1;\n-  static const int max_hash_bits                  = BitsPerWord - age_bits - lock_bits - self_forwarded_bits;\n+  static const int self_fwd_bits                  = 1;\n+  static const int max_hash_bits                  = BitsPerWord - age_bits - lock_bits - self_fwd_bits;\n@@ -112,2 +112,2 @@\n-  static const int self_forwarded_shift           = lock_shift + lock_bits;\n-  static const int age_shift                      = self_forwarded_shift + self_forwarded_bits;\n+  static const int self_fwd_shift                 = lock_shift + lock_bits;\n+  static const int age_shift                      = self_fwd_shift + self_fwd_bits;\n@@ -118,2 +118,2 @@\n-  static const uintptr_t self_forwarded_mask      = right_n_bits(self_forwarded_bits);\n-  static const uintptr_t self_forwarded_mask_in_place = self_forwarded_mask << self_forwarded_shift;\n+  static const uintptr_t self_fwd_mask            = right_n_bits(self_fwd_bits);\n+  static const uintptr_t self_fwd_mask_in_place   = self_fwd_mask << self_fwd_shift;\n@@ -149,0 +149,3 @@\n+  bool is_forwarded() const {\n+    return is_marked();\n+  }\n@@ -268,1 +271,1 @@\n-    return mask_bits(value(), self_forwarded_mask_in_place) != 0;\n+    return mask_bits(value(), self_fwd_mask_in_place) != 0;\n@@ -272,1 +275,1 @@\n-    return markWord(value() | self_forwarded_mask_in_place | marked_value);\n+    return markWord(value() | self_fwd_mask_in_place | marked_value);\n","filename":"src\/hotspot\/share\/oops\/markWord.hpp","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -67,1 +67,3 @@\n- public:\n+  inline oop cas_set_forwardee(markWord new_mark, markWord old_mark, atomic_memory_order order);\n+\n+public:\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -282,4 +282,2 @@\n-oop oopDesc::forward_to_atomic(oop p, markWord compare, atomic_memory_order order) {\n-  markWord m = markWord::encode_pointer_as_mark(p);\n-  assert(forwardee(m) == p, \"encoding must be reversible\");\n-  markWord old_mark = cas_set_mark(m, compare, order);\n+oop oopDesc::cas_set_forwardee(markWord new_mark, markWord compare, atomic_memory_order order) {\n+  markWord old_mark = cas_set_mark(new_mark, compare, order);\n@@ -289,1 +287,1 @@\n-    assert(old_mark.is_marked(), \"must be marked here\");\n+    assert(old_mark.is_forwarded(), \"must be forwarded here\");\n@@ -294,0 +292,6 @@\n+oop oopDesc::forward_to_atomic(oop p, markWord compare, atomic_memory_order order) {\n+  markWord m = markWord::encode_pointer_as_mark(p);\n+  assert(forwardee(m) == p, \"encoding must be reversible\");\n+  return cas_set_forwardee(m, compare, order);\n+}\n+\n@@ -297,7 +301,1 @@\n-  markWord old_mark = cas_set_mark(new_mark, compare, order);\n-  if (old_mark == compare) {\n-    return nullptr;\n-  } else {\n-    assert(old_mark.is_marked(), \"must be marked here\");\n-    return forwardee(old_mark);\n-  }\n+  return cas_set_forwardee(new_mark, compare, order);\n@@ -305,0 +303,1 @@\n+\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -32,1 +32,4 @@\n-  alignas(ObjectAlignmentInBytes) oopDesc _oop;\n+  \/\/ Align at least to 8 bytes, otherwise the lowest address bit\n+  \/\/ could be interpreted as 'self-forwarded' when encoded as\n+  \/\/ forwardee in the mark-word.\n+  alignas(BytesPerLong) oopDesc _oop;\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_preservedMarks.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}