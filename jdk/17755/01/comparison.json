{"files":[{"patch":"@@ -231,1 +231,1 @@\n-      forwardee = cast_to_oop(m.decode_pointer());\n+      forwardee = obj->forwardee();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1OopClosures.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -215,1 +215,1 @@\n-    obj = cast_to_oop(m.decode_pointer());\n+    obj = obj->forwardee();\n@@ -630,1 +630,1 @@\n-  oop forward_ptr = old->forward_to_atomic(old, m, memory_order_relaxed);\n+  oop forward_ptr = old->forward_to_self_atomic(m, memory_order_relaxed);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -328,1 +328,1 @@\n-  if (obj->forward_to_atomic(obj, obj_mark) == nullptr) {\n+  if (obj->forward_to_self_atomic(obj_mark) == nullptr) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionManager.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-    return cast_to_oop(m.decode_pointer());\n+    return o->forwardee(m);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionManager.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -903,1 +903,1 @@\n-  old->forward_to(old);\n+  old->forward_to_self();\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-\/\/             hash:25 ------------>| age:4  unused_gap:1  lock:2 (normal object)\n+\/\/             hash:25 ------------>| age:4  self-fwd:1  lock:2 (normal object)\n@@ -44,1 +44,1 @@\n-\/\/  unused:25 hash:31 -->| unused_gap:1  age:4  unused_gap:1  lock:2 (normal object)\n+\/\/  unused:25 hash:31 -->| unused_gap:1  age:4  self-fwd:1  lock:2 (normal object)\n@@ -106,2 +106,2 @@\n-  static const int first_unused_gap_bits          = 1;\n-  static const int max_hash_bits                  = BitsPerWord - age_bits - lock_bits - first_unused_gap_bits;\n+  static const int self_forwarded_bits            = 1;\n+  static const int max_hash_bits                  = BitsPerWord - age_bits - lock_bits - self_forwarded_bits;\n@@ -109,1 +109,1 @@\n-  static const int second_unused_gap_bits         = LP64_ONLY(1) NOT_LP64(0);\n+  static const int unused_gap_bits                = LP64_ONLY(1) NOT_LP64(0);\n@@ -112,2 +112,3 @@\n-  static const int age_shift                      = lock_bits + first_unused_gap_bits;\n-  static const int hash_shift                     = age_shift + age_bits + second_unused_gap_bits;\n+  static const int self_forwarded_shift           = lock_shift + lock_bits;\n+  static const int age_shift                      = self_forwarded_shift + self_forwarded_bits;\n+  static const int hash_shift                     = age_shift + age_bits + unused_gap_bits;\n@@ -117,0 +118,2 @@\n+  static const uintptr_t self_forwarded_mask      = right_n_bits(self_forwarded_bits);\n+  static const uintptr_t self_forwarded_mask_in_place = self_forwarded_mask << self_forwarded_shift;\n@@ -263,0 +266,8 @@\n+\n+  inline bool self_forwarded() const {\n+    return mask_bits(value(), self_forwarded_mask_in_place) != 0;\n+  }\n+\n+  inline markWord set_self_forwarded() const {\n+    return markWord(value() | self_forwarded_mask_in_place | marked_value);\n+  }\n","filename":"src\/hotspot\/share\/oops\/markWord.hpp","additions":18,"deletions":7,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -263,0 +263,1 @@\n+  inline void forward_to_self();\n@@ -269,0 +270,1 @@\n+  inline oop forward_to_self_atomic(markWord compare, atomic_memory_order order = memory_order_conservative);\n@@ -271,0 +273,1 @@\n+  inline oop forwardee(markWord header) const;\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -278,0 +278,4 @@\n+void oopDesc::forward_to_self() {\n+  set_mark(markWord::prototype().set_self_forwarded());\n+}\n+\n@@ -280,1 +284,1 @@\n-  assert(m.decode_pointer() == p, \"encoding must be reversible\");\n+  assert(forwardee(m) == p, \"encoding must be reversible\");\n@@ -285,1 +289,22 @@\n-    return cast_to_oop(old_mark.decode_pointer());\n+    assert(old_mark.is_marked(), \"must be marked here\");\n+    return forwardee(old_mark);\n+  }\n+}\n+\n+oop oopDesc::forward_to_self_atomic(markWord compare, atomic_memory_order order) {\n+  markWord new_mark = markWord::prototype().set_self_forwarded();\n+  assert(forwardee(new_mark) == cast_to_oop(this), \"encoding must be reversible\");\n+  markWord old_mark = cas_set_mark(new_mark, compare, order);\n+  if (old_mark == compare) {\n+    return nullptr;\n+  } else {\n+    assert(old_mark.is_marked(), \"must be marked here\");\n+    return forwardee(old_mark);\n+  }\n+}\n+oop oopDesc::forwardee(markWord mark) const {\n+  assert(mark.is_marked(), \"only decode when actually forwarded\");\n+  if (mark.self_forwarded()) {\n+    return cast_to_oop(this);\n+  } else {\n+    return cast_to_oop(mark.decode_pointer());\n@@ -294,1 +319,1 @@\n-  return cast_to_oop(mark().decode_pointer());\n+  return forwardee(mark());\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":28,"deletions":3,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-  oopDesc _oop;\n+  alignas(ObjectAlignmentInBytes) oopDesc _oop;\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_preservedMarks.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}