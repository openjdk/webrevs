{"files":[{"patch":"@@ -30,0 +30,1 @@\n+#include \"opto\/addnode.hpp\"\n@@ -1637,2 +1638,6 @@\n-  \/\/ If changed AddP inputs, check Stores for loop invariant\n-  if( use_op == Op_AddP ) {\n+  \/\/ If changed AddP inputs:\n+  \/\/ - check Stores for loop invariant, and\n+  \/\/ - if the changed input is the offset, check constant-offset AddP users for\n+  \/\/   address expression flattening.\n+  if (use_op == Op_AddP) {\n+    bool offset_changed = n == use->in(AddPNode::Offset);\n@@ -1641,1 +1646,1 @@\n-      if (u->is_Mem())\n+      if (u->is_Mem()) {\n@@ -1643,0 +1648,3 @@\n+      } else if (offset_changed && u->is_AddP() && u->in(AddPNode::Offset)->is_Con()) {\n+        worklist.push(u);\n+      }\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests.igvn;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8343067\n+ * @requires os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\"\n+ * @requires vm.compiler2.enabled\n+ * @summary Test that chains of AddP nodes with constant offsets are idealized\n+ *          when their offset input changes.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.igvn.TestCombineAddPWithConstantOffsets\n+ *\/\n+public class TestCombineAddPWithConstantOffsets {\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Test\n+    @IR(applyIfPlatform = {\"x64\", \"true\"}, failOn = {IRNode.ADD_P_OF, \".*\"})\n+    @IR(applyIfPlatform = {\"aarch64\", \"true\"}, failOn = {IRNode.ADD_P_OF, \"reg_imm\"})\n+    static void testCombineAddPWithConstantOffsets(int[] arr) {\n+        for (long i = 6; i < 14; i++) {\n+            arr[(int)i] = 1;\n+        }\n+    }\n+\n+    @Run(test = {\"testCombineAddPWithConstantOffsets\"})\n+    public void runTests() {\n+        testCombineAddPWithConstantOffsets(new int[14]);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/igvn\/TestCombineAddPWithConstantOffsets.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -277,0 +277,6 @@\n+    public static final String ADD_P_OF = COMPOSITE_PREFIX + \"ADD_P_OF\" + POSTFIX;\n+    static {\n+        String regex = START + \"addP_\" + IS_REPLACED + MID + \".*\" + END;\n+        machOnly(ADD_P_OF, regex);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}