{"files":[{"patch":"@@ -339,0 +339,4 @@\n+    public PackageTest forTypes(PackageType type, Consumer<PackageTest> action) {\n+        return forTypes(List.of(type), () -> action.accept(this));\n+    }\n+\n@@ -349,0 +353,4 @@\n+    public PackageTest notForTypes(PackageType type, Consumer<PackageTest> action) {\n+        return notForTypes(List.of(type), () -> action.accept(this));\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/PackageTest.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -24,0 +24,5 @@\n+import static jdk.internal.util.OperatingSystem.LINUX;\n+import static jdk.internal.util.OperatingSystem.MACOS;\n+import static jdk.jpackage.test.TKit.assertFalse;\n+import static jdk.jpackage.test.TKit.assertTrue;\n+\n@@ -27,2 +32,1 @@\n-import java.util.HashSet;\n-import java.util.Set;\n+import java.util.Objects;\n@@ -30,7 +34,1 @@\n-import java.util.stream.Collectors;\n-import jdk.jpackage.test.PackageType;\n-import jdk.jpackage.test.RunnablePackageTest.Action;\n-import jdk.jpackage.test.PackageTest;\n-import jdk.jpackage.test.JPackageCommand;\n-import jdk.jpackage.test.TKit;\n-import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.internal.util.function.ThrowingSupplier;\n@@ -38,0 +36,1 @@\n+import jdk.jpackage.test.Annotations.Test;\n@@ -39,0 +38,1 @@\n+import jdk.jpackage.test.JPackageCommand;\n@@ -41,3 +41,5 @@\n-import static jdk.jpackage.test.TKit.assertTrue;\n-import static jdk.jpackage.test.TKit.assertFalse;\n-import static jdk.internal.util.OperatingSystem.LINUX;\n+import jdk.jpackage.test.MacHelper;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.PackageType;\n+import jdk.jpackage.test.RunnablePackageTest.Action;\n+import jdk.jpackage.test.TKit;\n@@ -88,0 +90,5 @@\n+    @Test(ifOS = MACOS)\n+    public static void testFromBundle() {\n+        init(RuntimePackageTest::createInputRuntimeBundle).run();\n+    }\n+\n@@ -110,0 +117,8 @@\n+        return init(RuntimePackageTest::createInputRuntimeImage);\n+    }\n+\n+    private static PackageTest init(ThrowingSupplier<Path> createRuntime) {\n+        Objects.requireNonNull(createRuntime);\n+\n+        final Path[] runtimeImageDir = new Path[1];\n+\n@@ -111,0 +126,3 @@\n+        .addRunOnceInitializer(() -> {\n+            runtimeImageDir[0] = createRuntime.get();\n+        })\n@@ -112,19 +130,1 @@\n-            final Path runtimeImageDir;\n-\n-            if (JPackageCommand.DEFAULT_RUNTIME_IMAGE != null) {\n-                runtimeImageDir = JPackageCommand.DEFAULT_RUNTIME_IMAGE;\n-            } else {\n-                runtimeImageDir = TKit.createTempDirectory(\"runtime\").resolve(\"data\");\n-\n-                new Executor()\n-                .setToolProvider(JavaTool.JLINK)\n-                .dumpOutput()\n-                .addArguments(\n-                        \"--output\", runtimeImageDir.toString(),\n-                        \"--add-modules\", \"java.desktop\",\n-                        \"--strip-debug\",\n-                        \"--no-header-files\",\n-                        \"--no-man-pages\")\n-                .execute();\n-            }\n-            cmd.addArguments(\"--runtime-image\", runtimeImageDir);\n+            cmd.addArguments(\"--runtime-image\", runtimeImageDir[0]);\n@@ -137,1 +137,1 @@\n-            Set<Path> srcRuntime = listFiles(Path.of(cmd.getArgumentValue(\"--runtime-image\")));\n+            var src = TKit.assertDirectoryContentRecursive(inputRuntimeDir(cmd)).items();\n@@ -142,1 +142,0 @@\n-            Set<Path> dstRuntime = listFiles(dest);\n@@ -144,8 +143,1 @@\n-            Set<Path> intersection = new HashSet<>(srcRuntime);\n-            intersection.retainAll(dstRuntime);\n-\n-            srcRuntime.removeAll(intersection);\n-            dstRuntime.removeAll(intersection);\n-\n-            assertFileListEmpty(srcRuntime, \"Missing\");\n-            assertFileListEmpty(dstRuntime, \"Unexpected\");\n+            TKit.assertDirectoryContentRecursive(dest).match(src);\n@@ -153,16 +145,17 @@\n-        .forTypes(PackageType.LINUX_DEB)\n-        .addInstallVerifier(cmd -> {\n-            String installDir = cmd.getArgumentValue(\"--install-dir\", () -> \"\/opt\");\n-            Path copyright = Path.of(\"\/usr\/share\/doc\",\n-                    LinuxHelper.getPackageName(cmd), \"copyright\");\n-            boolean withCopyright = LinuxHelper.getPackageFiles(cmd).anyMatch(\n-                    Predicate.isEqual(copyright));\n-            if (installDir.startsWith(\"\/usr\/\") || installDir.equals(\"\/usr\")) {\n-                assertTrue(withCopyright, String.format(\n-                        \"Check the package delivers [%s] copyright file\",\n-                        copyright));\n-            } else {\n-                assertFalse(withCopyright, String.format(\n-                        \"Check the package doesn't deliver [%s] copyright file\",\n-                        copyright));\n-            }\n+        .forTypes(PackageType.LINUX_DEB, test -> {\n+            test.addInstallVerifier(cmd -> {\n+                String installDir = cmd.getArgumentValue(\"--install-dir\", () -> \"\/opt\");\n+                Path copyright = Path.of(\"\/usr\/share\/doc\",\n+                        LinuxHelper.getPackageName(cmd), \"copyright\");\n+                boolean withCopyright = LinuxHelper.getPackageFiles(cmd).anyMatch(\n+                        Predicate.isEqual(copyright));\n+                if (installDir.startsWith(\"\/usr\/\") || installDir.equals(\"\/usr\")) {\n+                    assertTrue(withCopyright, String.format(\n+                            \"Check the package delivers [%s] copyright file\",\n+                            copyright));\n+                } else {\n+                    assertFalse(withCopyright, String.format(\n+                            \"Check the package doesn't deliver [%s] copyright file\",\n+                            copyright));\n+                }\n+            });\n@@ -172,8 +165,7 @@\n-    private static Set<Path> listFiles(Path root) throws IOException {\n-        try (var files = Files.walk(root)) {\n-            \/\/ Ignore files created by system prefs if any.\n-            final Path prefsDir = Path.of(\".systemPrefs\");\n-            return files.map(root::relativize)\n-                    .filter(x -> !x.startsWith(prefsDir))\n-                    .filter(x -> !x.endsWith(\".DS_Store\"))\n-                    .collect(Collectors.toSet());\n+    private static Path inputRuntimeDir(JPackageCommand cmd) {\n+        var path = Path.of(cmd.getArgumentValue(\"--runtime-image\"));\n+        if (TKit.isOSX()) {\n+            var bundleHome = path.resolve(\"Contents\/Home\");\n+            if (Files.isDirectory(bundleHome)) {\n+                return bundleHome;\n+            }\n@@ -181,0 +173,1 @@\n+        return path;\n@@ -183,9 +176,49 @@\n-    private static void assertFileListEmpty(Set<Path> paths, String msg) {\n-        TKit.assertTrue(paths.isEmpty(), String.format(\n-                \"Check there are no %s files in installed image\",\n-                msg.toLowerCase()), () -> {\n-            String msg2 = String.format(\"%s %d files\", msg, paths.size());\n-            TKit.trace(msg2 + \":\");\n-            paths.stream().map(Path::toString).sorted().forEachOrdered(\n-                    TKit::trace);\n-            TKit.trace(\"Done\");\n+    private static Path createInputRuntimeImage() throws IOException {\n+\n+        final Path runtimeImageDir;\n+\n+        if (JPackageCommand.DEFAULT_RUNTIME_IMAGE != null) {\n+            runtimeImageDir = JPackageCommand.DEFAULT_RUNTIME_IMAGE;\n+        } else {\n+            runtimeImageDir = TKit.createTempDirectory(\"runtime-image\").resolve(\"data\");\n+\n+            new Executor().setToolProvider(JavaTool.JLINK)\n+                    .dumpOutput()\n+                    .addArguments(\n+                            \"--output\", runtimeImageDir.toString(),\n+                            \"--add-modules\", \"java.desktop\",\n+                            \"--strip-debug\",\n+                            \"--no-header-files\",\n+                            \"--no-man-pages\")\n+                    .execute();\n+        }\n+\n+        return runtimeImageDir;\n+    }\n+\n+    private static Path createInputRuntimeBundle() throws IOException {\n+\n+        final var runtimeImage = createInputRuntimeImage();\n+\n+        final var runtimeBundleWorkDir = TKit.createTempDirectory(\"runtime-bundle\");\n+\n+        final var unpackadeRuntimeBundleDir = runtimeBundleWorkDir.resolve(\"unpacked\");\n+\n+        var cmd = new JPackageCommand()\n+                .useToolProvider(true)\n+                .ignoreDefaultRuntime(true)\n+                .dumpOutput(true)\n+                .setPackageType(PackageType.MAC_DMG)\n+                .setArgumentValue(\"--name\", \"foo\")\n+                .addArguments(\"--runtime-image\", runtimeImage)\n+                .addArguments(\"--dest\", runtimeBundleWorkDir);\n+\n+        cmd.execute();\n+\n+        MacHelper.withExplodedDmg(cmd, dmgImage -> {\n+            if (dmgImage.endsWith(cmd.appInstallationDirectory().getFileName())) {\n+                Executor.of(\"cp\", \"-R\")\n+                        .addArgument(dmgImage)\n+                        .addArgument(unpackadeRuntimeBundleDir)\n+                        .execute(0);\n+            }\n@@ -193,0 +226,2 @@\n+\n+        return unpackadeRuntimeBundleDir;\n","filename":"test\/jdk\/tools\/jpackage\/share\/RuntimePackageTest.java","additions":109,"deletions":74,"binary":false,"changes":183,"status":"modified"}]}