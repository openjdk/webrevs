{"files":[{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.compiler;\n-\n-import java.io.PrintStream;\n-import java.util.*;\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.runtime.*;\n-import sun.jvm.hotspot.oops.*;\n-import sun.jvm.hotspot.prims.JvmtiExport;\n-import sun.jvm.hotspot.types.*;\n-import sun.jvm.hotspot.utilities.Observable;\n-import sun.jvm.hotspot.utilities.Observer;\n-\n-public class CompileTask extends VMObject {\n-  static {\n-    VM.registerVMInitializedObserver(new Observer() {\n-        public void update(Observable o, Object data) {\n-          initialize(VM.getVM().getTypeDataBase());\n-        }\n-      });\n-  }\n-\n-  private static synchronized void initialize(TypeDataBase db) throws WrongTypeException {\n-    Type type      = db.lookupType(\"CompileTask\");\n-    methodField = type.getAddressField(\"_method\");\n-    osrBciField = new CIntField(type.getCIntegerField(\"_osr_bci\"), 0);\n-    compLevelField = new CIntField(type.getCIntegerField(\"_comp_level\"), 0);\n-  }\n-\n-  private static AddressField methodField;\n-  private static CIntField osrBciField;\n-  private static CIntField compLevelField;\n-\n-  public CompileTask(Address addr) {\n-    super(addr);\n-  }\n-\n-  public Method method() {\n-    Address oh =  methodField.getValue(getAddress());\n-    return (Method)Metadata.instantiateWrapperFor(oh);\n-  }\n-\n-  public int osrBci() {\n-    return (int)osrBciField.getValue(getAddress());\n-  }\n-\n-  public int compLevel() {\n-      return (int)compLevelField.getValue(getAddress());\n-  }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/compiler\/CompileTask.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"}]}