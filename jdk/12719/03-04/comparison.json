{"files":[{"patch":"@@ -256,2 +256,41 @@\n-    private DoubleStream equiDoubles(double left, double right,\n-            boolean isLeftIncluded, boolean isRightIncluded) {\n+    \/**\n+     * Returns an effectively unlimited stream of pseudorandomly chosen\n+     * {@code double} values, where each value is between the specified\n+     * {@code left} boundary and the specified {@code right} boundary.\n+     * The {@code left} boundary is included as indicated by\n+     * {@code isLeftIncluded}; similarly, the {@code right} boundary is included\n+     * as indicated by {@code isRightIncluded}.\n+     *\n+     * <p>The stream potentially produces all multiples <i>k<\/i>&delta;\n+     * (<i>k<\/i> integer) lying in the interval specified by the parameters,\n+     * where &delta; > 0 is the smallest number for which all these multiples\n+     * are exact {@code double}s.\n+     * They are therefore all equidistant.\n+     *\n+     * <p>The uniformity of the distribution of the {@code double}s produced by\n+     * the stream is as good as the one of {@link #nextLong(long)}.\n+     *\n+     * @param left the left boundary\n+     * @param right the right boundary\n+     * @param isLeftIncluded whether the {@code left} boundary is included\n+     * @param isRightIncluded whether the {@code right} boundary is included\n+     *\n+     * @return a stream of pseudorandomly chosen {@code double} values, each\n+     *         between {@code left} and {@code right}, as specified above.\n+     *         The stream never produces {@code -0.0}, although it may produce\n+     *         {@code 0.0} if the specified interval contains 0.\n+     *\n+     * @throws IllegalArgumentException if {@code left} is not finite,\n+     *         or {@code right} is not finite, or if the specified interval\n+     *         is empty.\n+     *\/\n+    default DoubleStream equiDoubles(double left, double right,\n+        boolean isLeftIncluded, boolean isRightIncluded) {\n+        if (!(Double.NEGATIVE_INFINITY < left\n+                && right < Double.POSITIVE_INFINITY\n+                && (isLeftIncluded ? left : nextUp(left))\n+                    <= (isRightIncluded ? right : nextDown(right)))) {\n+            throw new IllegalArgumentException(\n+                    \"the boundaries must be finite and the interval must not be empty\");\n+        }\n+\n@@ -277,2 +316,2 @@\n-        double delta;\n-        long kl;\n+        double delta;  \/\/ captured\n+        long kl;  \/\/ captured\n@@ -280,1 +319,1 @@\n-        long n;\n+        long n;  \/\/ captured\n@@ -369,42 +408,0 @@\n-    \/**\n-     * Returns an effectively unlimited stream of pseudorandomly chosen\n-     * {@code double} values, where each value is between the specified\n-     * {@code left} boundary and the specified {@code right} boundary.\n-     * The {@code left} boundary is included as indicated by\n-     * {@code isLeftIncluded}; similarly, the {@code right} boundary is included\n-     * as indicated by {@code isRightIncluded}.\n-     *\n-     * <p>The stream potentially produces all multiples <i>k<\/i>&delta;\n-     * (<i>k<\/i> integer) lying in the interval specified by the parameters,\n-     * where &delta; > 0 is the smallest number for which all these multiples\n-     * are exact {@code double}s.\n-     * They are therefore all equidistant.\n-     *\n-     * <p>The uniformity of the distribution of the {@code double}s produced by\n-     * the stream is as good as the one of {@link #nextLong(long)}.\n-     *\n-     * @param left the left boundary\n-     * @param right the right boundary\n-     * @param isLeftIncluded whether the {@code left} boundary is included\n-     * @param isRightIncluded whether the {@code right} boundary is included\n-     *\n-     * @return a stream of pseudorandomly chosen {@code double} values, each\n-     *         between {@code left} and {@code right}, as specified above.\n-     *         The stream never produces {@code -0.0}, although it may produce\n-     *         {@code 0.0} if the specified interval contains 0.\n-     *\n-     * @throws IllegalArgumentException if {@code left} is not finite,\n-     *         or {@code right} is not finite, or if the specified interval\n-     *         is empty.\n-     *\/\n-    default DoubleStream equiDoublesLeftClosedRightOpen(double left, double right,\n-        boolean isLeftIncluded, boolean isRightIncluded) {\n-        if (!((isLeftIncluded ? left : nextUp(left)) < (isRightIncluded ? nextUp(right) : right)\n-                && Double.NEGATIVE_INFINITY < left\n-                && right < Double.POSITIVE_INFINITY)) {\n-            throw new IllegalArgumentException(\n-                    \"the boundaries must be finite and the interval must not be empty\");\n-        }\n-        return equiDoubles(left, right, isLeftIncluded, isRightIncluded);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/random\/RandomGenerator.java","additions":44,"deletions":47,"binary":false,"changes":91,"status":"modified"}]}