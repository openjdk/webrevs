[{"commit":{"message":"8369111\n\nHi all,\n\n  please review this change that fixes an inconsistency between requesting a concurrent start garbage collection during humongous object allocation and then actually starting it.\n\nI.e. in `G1CollectedHeap::attempt_allocation_humongous` we check whether the allocation would cross the IHOP threshold taking the current allocation into account, and if so, see if G1 should start a concurrent marking, eventually starting a GC pause.\n\nThat GC pause did not take the prospective allocation into account, so we could do that GC for nothing (i.e. not start a concurrent marking although we already knew that the allocation would cause one).\n\nThis, in conjunction with JDK-8368959 can cause hundreds of extra GCs for the test in the CR (without eager reclaim of humongous arrays with references); otherwise it could cause the marking starting too late.\n\nThere is a second bug in the calculation whether G1 crossed the threshold: for humongous objects it only takes the actual size into account, not the size that is needed for allocating it. The same issue existed for determining to start a concurrent mark after young collection.\n\nThe change also tries to unify naming of the parameter to pass the allocation size (`alloc_word_size` -> `allocation_word_size`) and the order where this size is passed along in multiple related methods.\n\nTesting: mentioned test case now behaving correctly, tier1-3\n\nThanks,\n  Thomas"},"files":[{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1PeriodicGCTask.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1VMOperations.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1VMOperations.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp"}],"sha":"c8aff5cb08459b03f6256aeaa80918e0c8dfb6ce"}]