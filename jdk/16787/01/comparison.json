{"files":[{"patch":"@@ -1,144 +0,0 @@\n-#!\/bin\/sh\n-\n-# Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 6332666 6863624 7180362 8003846 8074350 8074351 8130246 8149735 7102969\n-#      8157138 8190904\n-# @summary tests the capability of replacing the currency data with user\n-#     specified currency properties file\n-# @build PropertiesTest\n-# @run shell\/timeout=600 PropertiesTest.sh\n-\n-if [ \"${TESTSRC}\" = \"\" ]\n-then\n-  echo \"TESTSRC not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-echo \"TESTSRC=${TESTSRC}\"\n-if [ \"${TESTJAVA}\" = \"\" ]\n-then\n-  echo \"TESTJAVA not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-echo \"TESTJAVA=${TESTJAVA}\"\n-if [ \"${TESTCLASSES}\" = \"\" ]\n-then\n-  echo \"TESTCLASSES not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-echo \"TESTCLASSES=${TESTCLASSES}\"\n-echo \"CLASSPATH=${CLASSPATH}\"\n-\n-# set platform-dependent variables\n-OS=`uname -s`\n-case \"$OS\" in\n-  Linux | Darwin | AIX )\n-    PS=\":\"\n-    FS=\"\/\"\n-    ;;\n-  Windows* )\n-    PS=\";\"\n-    FS=\"\/\"\n-    ;;\n-  CYGWIN*|MSYS*|MINGW* )\n-    PS=\";\"\n-    FS=\"\/\"\n-    TESTJAVA=`cygpath -u ${TESTJAVA}`\n-    ;;\n-  * )\n-    echo \"Unrecognized system!\"\n-    exit 1;\n-    ;;\n-esac\n-\n-failures=0\n-\n-run() {\n-    echo ''\n-    ${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} ${TESTJAVAOPTS} -cp ${TESTCLASSES} $* 2>&1\n-    if [ $? != 0 ]; then failures=`expr $failures + 1`; fi\n-}\n-\n-PROPS=${TESTSRC}${FS}currency.properties\n-\n-\n-# Dump built-in currency data\n-\n-run PropertiesTest -d dump1\n-if [ ! -f dump1 ]; then  echo \"file dump1 not created. Test cannot execute.  Failed.\"; exit 1; fi\n-\n-# Dump built-in currency data + overrides in properties file specified\n-# by system property.\n-\n-run -Djava.util.currency.data=${PROPS} PropertiesTest -d dump2\n-if [ ! -f dump2 ]; then  echo \"file dump2 not created. Test cannot execute.  Failed.\"; exit 1; fi\n-run PropertiesTest -c dump1 dump2 ${PROPS}\n-\n-\n-# Dump built-in currency data + overrides in properties file copied into\n-# JRE image.\n-\n-# Make a private copy of the jdk so we can write to the properties file location\n-# without disturbing other users, including concurrently executing tests.\n-WRITABLEJDK=.${FS}testjava\n-cp -H -R $TESTJAVA $WRITABLEJDK || exit 1\n-PROPLOCATION=${WRITABLEJDK}${FS}lib\n-chmod -R u+w $WRITABLEJDK || exit 1\n-cp ${PROPS} $PROPLOCATION || exit 1\n-echo \"Properties location: ${PROPLOCATION}\"\n-\n-# run\n-echo ''\n-${WRITABLEJDK}${FS}bin${FS}java ${TESTVMOPTS} ${TESTJAVAOPTS} -cp ${TESTCLASSES} PropertiesTest -d dump3\n-if [ $? != 0 ]; then failures=`expr $failures + 1`; fi\n-if [ ! -f dump3 ]; then  echo \"file dump3 not created. Test cannot execute.  Failed.\"; exit 1; fi\n-\n-# run bug7102969 test\n-echo ''\n-${WRITABLEJDK}${FS}bin${FS}java ${TESTVMOPTS} ${TESTJAVAOPTS} -cp ${TESTCLASSES} PropertiesTest bug7102969\n-if [ $? != 0 ]; then failures=`expr $failures + 1`; fi\n-\n-# run bug8157138 test\n-echo ''\n-${WRITABLEJDK}${FS}bin${FS}java ${TESTVMOPTS} ${TESTJAVAOPTS} -cp ${TESTCLASSES} PropertiesTest bug8157138\n-if [ $? != 0 ]; then failures=`expr $failures + 1`; fi\n-\n-# run bug8190904 test\n-echo ''\n-${WRITABLEJDK}${FS}bin${FS}java ${TESTVMOPTS} ${TESTJAVAOPTS} -cp ${TESTCLASSES} PropertiesTest bug8190904\n-if [ $? != 0 ]; then failures=`expr $failures + 1`; fi\n-\n-# Cleanup\n-rm -rf $WRITABLEJDK\n-\n-# compare the two dump files\n-run PropertiesTest -c dump1 dump3 ${PROPS}\n-\n-\n-# Results\n-echo ''\n-if [ $failures -gt 0 ];\n-  then echo \"$failures tests failed\";\n-  else echo \"All tests passed\"; fi\n-exit $failures\n","filename":"test\/jdk\/java\/util\/Currency\/PropertiesTest.sh","additions":0,"deletions":144,"binary":false,"changes":144,"status":"deleted"},{"patch":"@@ -0,0 +1,157 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6332666 6863624 7180362 8003846 8074350 8074351 8130246 8149735 7102969\n+ *      8157138 8190904 8210410\n+ * @summary Tests the capability of replacing the currency data with a user\n+ *          specified currency properties file in lib directory (old way) or\n+ *          via the system property in the cmdline (new way).\n+ * @library \/test\/lib\n+ * @build PropertiesTest\n+ * @run junit PropertiesTestRun\n+ *\/\n+\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.util.Arrays;\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class PropertiesTestRun {\n+\n+    \/\/ String paths used for the cmdline processes\n+    private static final String TEST_JDK = Utils.TEST_JDK;\n+    private static final String TEST_PROPS =\n+            Utils.TEST_SRC+Utils.FILE_SEPARATOR+\"currency.properties\";\n+    private static final String WRITABLE_JDK =\n+            \".\"+Utils.FILE_SEPARATOR+\"WRITABLE_JDK\";\n+    private static final String WRITABLE_JDK_LIB =\n+            WRITABLE_JDK+Utils.FILE_SEPARATOR+\"lib\";\n+    private static final String WRITABLE_JDK_BIN =\n+            WRITABLE_JDK+Utils.FILE_SEPARATOR+\"bin\";\n+    private static final String WRITABLE_JDK_JAVA_PATH =\n+            WRITABLE_JDK_BIN + Utils.FILE_SEPARATOR + \"java\";\n+\n+    \/\/ Create a writable JDK and set up dumps 1-3\n+    @BeforeAll\n+    static void setUp() throws Throwable {\n+        \/\/ Create separate JDK to supersede currencies via lib directory\n+        createWritableJDK();\n+        \/\/ Create dump without user defined prop file\n+        executeTestJDKMethod(\"PropertiesTest\", \"-d\", \"dump1\");\n+        \/\/ Create dump with user defined prop file (via system property)\n+        executeTestJDKMethod(\"-Djava.util.currency.data=\"+TEST_PROPS,\n+                \"PropertiesTest\", \"-d\", \"dump2\");\n+        \/\/ Create dump with user defined prop file (via lib)\n+        executeWritableJDKMethod(\"PropertiesTest\", \"-d\", \"dump3\");\n+    }\n+\n+    \/\/ Need to create a separate JDK to insert the user defined properties file\n+    \/\/ into the lib folder. Create separate JDK to not disturb current TEST JDK.\n+    private static void createWritableJDK() throws Throwable {\n+        \/\/ Copy Test JDK into a separate JDK folder\n+        executeProcess(new String[]{\"cp\", \"-H\", \"-R\", TEST_JDK, WRITABLE_JDK});\n+        \/\/ Make the separate JDK writable\n+        executeProcess(new String[]{\"chmod\", \"-R\", \"u+w\", WRITABLE_JDK_LIB});\n+        \/\/ Copy the properties file into the writable JDK lib folder\n+        executeProcess(new String[]{\"cp\", TEST_PROPS, WRITABLE_JDK_LIB});\n+    }\n+\n+    \/\/ Compares the dumped output is expected between the default currencies\n+    \/\/ and the user-defined custom currencies\n+    @Test\n+    void compareDumps() throws Throwable {\n+        \/\/ Compare dump (from sys prop)\n+        executeTestJDKMethod(\"PropertiesTest\", \"-c\", \"dump1\", \"dump2\",\n+                TEST_PROPS);\n+        \/\/ Compare dump (from lib)\n+        executeTestJDKMethod(\"PropertiesTest\", \"-c\", \"dump1\", \"dump3\",\n+                TEST_PROPS);\n+    }\n+\n+    \/\/ Launch a test from PropertiesTest. See PropertiesTest.java for more\n+    \/\/ detail regarding a specific test that was launched.\n+    @ParameterizedTest\n+    @MethodSource(\"PropertiesTestMethods\")\n+    void launchPropertiesTests(String methodName) throws Throwable {\n+        \/\/ Test via both the lib and system property\n+        executeWritableJDKMethod(\"PropertiesTest\", methodName);\n+        executeTestJDKMethod(\"-Djava.util.currency.data=\"+TEST_PROPS,\n+                \"PropertiesTest\", methodName);\n+    }\n+\n+    private static Stream<String> PropertiesTestMethods() {\n+        return Stream.of(\"bug7102969\", \"bug8157138\", \"bug8190904\");\n+    }\n+\n+    \/\/ Launch a PropertiesTest method using the TEST JDK\n+    private static void executeTestJDKMethod(String... params) throws Throwable {\n+        int exitStatus = ProcessTools.executeTestJvm(params).getExitValue();\n+        if (exitStatus != 0) {\n+            fail(\"Process started with: \" + Arrays.toString(params) + \" failed\");\n+        }\n+    }\n+\n+    \/\/ Launch a PropertiesTest method using the WRITABLE JDK\n+    private static void executeWritableJDKMethod(String... params) throws Throwable {\n+        \/\/ Need to include WritableJDK javapath, TEST JDK classpath\n+        String[] allParams = new String[3+params.length+Utils.getTestJavaOpts().length];\n+        \/\/ We don't use executeTestJvm() because we want to point to separate JDK java path\n+        allParams[0] = WRITABLE_JDK_JAVA_PATH;\n+        allParams[1] = \"-cp\";\n+        allParams[2] = System.getProperty(\"java.class.path\");\n+        \/\/ Add test.vm.opts and test.java.opts\n+        System.arraycopy(Utils.getTestJavaOpts(), 0, allParams, 3,\n+                Utils.getTestJavaOpts().length);\n+        \/\/ Add the rest of the actual arguments\n+        System.arraycopy(params, 0, allParams, Utils.getTestJavaOpts().length+3,\n+                params.length);\n+        \/\/ Launch the actual test method with all parameters set\n+        executeProcess(allParams);\n+    }\n+\n+    \/\/ Execute a process and fail if the command is not successful\n+    private static void executeProcess(String[] params) throws Throwable {\n+        System.out.println(\"Command line: \" + Arrays.toString(params));\n+        int exitStatus = ProcessTools.executeProcess(params).getExitValue();\n+        if (exitStatus != 0) {\n+            fail(\"Process started with: \" + Arrays.toString(params) + \" failed\");\n+        }\n+    }\n+\n+    @AfterAll\n+    static void tearDown() throws Throwable {\n+        \/\/ Remove the copied writable JDK image from scratch folder\n+        executeProcess(new String[]{\"rm\", \"-rf\", WRITABLE_JDK});\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Currency\/PropertiesTestRun.java","additions":157,"deletions":0,"binary":false,"changes":157,"status":"added"}]}