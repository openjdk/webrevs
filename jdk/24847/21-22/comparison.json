{"files":[{"patch":"@@ -26,0 +26,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -158,0 +159,7 @@\n+  if (CDSConfig::is_dumping_dynamic_archive()) {\n+    \/\/ We cannot use search table; in case of dynamic archives it should be sorted by \"requested\" addresses,\n+    \/\/ but Symbol* addresses are coming from _constants, which has \"buffered\" addresses.\n+    \/\/ For background, see new comments inside allocate_node_impl in symbolTable.cpp\n+    return nullptr;\n+  }\n+\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -42,0 +42,6 @@\n+  \/\/ Based on the max_key and max_value we figure out the number of bits required to store\n+  \/\/ key and value; imagine that only as bits (not aligned to byte boundary... yet).\n+  \/\/ Then we concatenate the bits for key and value, and 'add' 1-7 padding zeroes\n+  \/\/ (high-order bits) to align on bytes.\n+  \/\/ In the end we have each element in the table consuming 1-8 bytes (case with 0 bits for key\n+  \/\/ is ruled out).\n@@ -62,0 +68,1 @@\n+  \/\/ See PackedTableBase constructor for details.\n@@ -95,0 +102,1 @@\n+  \/\/ See PackedTableBase constructor for details.\n","filename":"src\/hotspot\/share\/utilities\/packedTable.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}