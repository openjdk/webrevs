{"files":[{"patch":"@@ -3741,0 +3741,1 @@\n+  this_klass->set_fieldinfo_search_table(_fieldinfo_search_table);\n@@ -5056,0 +5057,1 @@\n+  assert(nullptr == _fieldinfo_search_table, \"invariant\");\n@@ -5276,0 +5278,1 @@\n+  _fieldinfo_search_table(nullptr),\n@@ -5352,0 +5355,1 @@\n+  _fieldinfo_search_table = nullptr;\n@@ -5374,0 +5378,1 @@\n+  MetadataFactory::free_array<u1>(_loader_data, _fieldinfo_search_table);\n@@ -5774,0 +5779,1 @@\n+  _fieldinfo_search_table = FieldInfoStream::create_search_table(_cp, _fieldinfo_stream, _loader_data, CHECK);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -126,0 +126,1 @@\n+  Array<u1>* _fieldinfo_search_table;\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -304,1 +304,1 @@\n-    for (AllFieldStream fs(ik->fieldinfo_stream(), ik->constants()); !fs.done(); fs.next()) {\n+    for (AllFieldStream fs(ik); !fs.done(); fs.next()) {\n@@ -464,1 +464,1 @@\n-          for (AllFieldStream fs(ik->fieldinfo_stream(), ik->constants()); !fs.done(); fs.next()) {\n+          for (AllFieldStream fs(ik); !fs.done(); fs.next()) {\n","filename":"src\/hotspot\/share\/classfile\/fieldLayoutBuilder.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -969,0 +969,5 @@\n+\n+      Array<u1> *old_table = ik->fieldinfo_search_table();\n+      Array<u1>* search_table = FieldInfoStream::create_search_table(ik->constants(), new_fis, k->class_loader_data(), CHECK);\n+      ik->set_fieldinfo_search_table(search_table);\n+      MetadataFactory::free_array<u1>(k->class_loader_data(), old_table);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"memory\/resourceArea.hpp\"\n@@ -40,2 +41,4 @@\n-                _field_flags.is_injected() ? lookup_symbol(generic_signature_index())->as_utf8() : cp->symbol_at(generic_signature_index())->as_utf8(),\n-                contended_group());\n+                _field_flags.is_generic() ? (_field_flags.is_injected() ?\n+                  lookup_symbol(generic_signature_index())->as_utf8() : cp->symbol_at(generic_signature_index())->as_utf8()\n+                  ) : \"\",\n+                is_contended() ? contended_group() : 0);\n@@ -65,0 +68,2 @@\n+  assert(fields->length() == java_fields + injected_fields, \"must be\");\n+\n@@ -71,1 +76,3 @@\n-  int storage_size = sizer.consumer()->position() + 1;\n+  \/\/ Originally there was an extra byte with 0 terminating the reading;\n+  \/\/ now we check limits instead.\n+  int storage_size = sizer.consumer()->position();\n@@ -82,2 +89,1 @@\n-    FieldInfo* fi = fields->adr_at(i);\n-    writer.map_field_info(*fi);\n+    writer.map_field_info(fields->at(i));\n@@ -88,1 +94,2 @@\n-  int jfc = r.next_uint();\n+  int jfc, ifc;\n+  r.read_field_counts(&jfc, &ifc);\n@@ -90,1 +97,0 @@\n-  int ifc = r.next_uint();\n@@ -116,0 +122,70 @@\n+Array<u1>* FieldInfoStream::create_search_table(ConstantPool* cp, const Array<u1>* fis, ClassLoaderData* loader_data, TRAPS) {\n+  FieldInfoReader r(fis);\n+  int java_fields;\n+  int injected_fields;\n+  r.read_field_counts(&java_fields, &injected_fields);\n+  if (java_fields <= SEARCH_TABLE_THRESHOLD) {\n+    return nullptr;\n+  }\n+\n+  \/\/ We use fixed width to let us skip through the table during binary search.\n+  \/\/ With the max of 65536 fields (and at most tens of bytes per field),\n+  \/\/ 3-byte offsets would suffice. In the common case with < 64kB stream 2-byte offsets are enough.\n+  int position_width = fis->length() > UINT16_MAX + 1 ? 3 : 2;\n+  int index_width = java_fields > UINT8_MAX + 1 ? 2 : 1;\n+  int item_width = position_width + index_width;\n+\n+  Array<u1>* table = MetadataFactory::new_array<u1>(loader_data, java_fields * item_width, CHECK_NULL);\n+\n+  ResourceMark rm;\n+  \/\/ We use both name and signature during the comparison; while JLS require unique\n+  \/\/ names for fields, JVMS requires only unique name + signature combination.\n+  typedef struct {\n+    Symbol *name;\n+    Symbol *signature;\n+    int index;\n+    int position;\n+  } field_pos_t;\n+  field_pos_t *positions = nullptr;\n+\n+  positions = NEW_RESOURCE_ARRAY(field_pos_t, java_fields);\n+  for (int i = 0; i < java_fields; ++i) {\n+    assert(r.has_next(), \"number of fields must match\");\n+\n+    positions[i].position = r.position();\n+    FieldInfo fi;\n+    r.read_field_info(fi);\n+\n+    positions[i].name = fi.name(cp);\n+    positions[i].signature = fi.signature(cp);\n+    positions[i].index = i;\n+  }\n+  auto compare_pair = [](const void *v1, const void *v2) {\n+    int name_result = reinterpret_cast<const field_pos_t *>(v1)->name->fast_compare(\n+                      reinterpret_cast<const field_pos_t *>(v2)->name);\n+    if (name_result != 0) {\n+      return name_result;\n+    }\n+    return reinterpret_cast<const field_pos_t *>(v1)->signature->fast_compare(\n+           reinterpret_cast<const field_pos_t *>(v2)->signature);\n+  };\n+  qsort(positions, java_fields, sizeof(field_pos_t), compare_pair);\n+\n+  auto write_position = position_width == 2 ?\n+    [](u1 *ptr, int position) { *reinterpret_cast<u2*>(ptr) = checked_cast<u2>(position); } :\n+    [](u1 *ptr, int position) {\n+      ptr[0] = static_cast<u1>(position);\n+      ptr[1] = static_cast<u1>(position >> 8);\n+      ptr[2] = checked_cast<u1>(position >> 16);\n+    };\n+  auto write_index = index_width == 1 ?\n+    [](u1 *ptr, int index) { *ptr = checked_cast<u1>(index); } :\n+    [](u1 *ptr, int index) { *reinterpret_cast<u2 *>(ptr) = checked_cast<u2>(index); };\n+  for (int i = 0; i < java_fields; ++i) {\n+    u1 *ptr = table->adr_at(item_width * i);\n+    write_position(ptr, positions[i].position);\n+    write_index(ptr + position_width, positions[i].index);\n+  }\n+  return table;\n+}\n+\n@@ -117,2 +193,0 @@\n-  int length = FieldInfoStream::num_total_fields(fis);\n-  GrowableArray<FieldInfo>* array = new GrowableArray<FieldInfo>(length);\n@@ -120,2 +194,4 @@\n-  *java_fields_count = r.next_uint();\n-  *injected_fields_count = r.next_uint();\n+  r.read_field_counts(java_fields_count, injected_fields_count);\n+  int length = *java_fields_count + *injected_fields_count;\n+\n+  GrowableArray<FieldInfo>* array = new GrowableArray<FieldInfo>(length);\n@@ -128,1 +204,0 @@\n-  assert(array->length() == *java_fields_count + *injected_fields_count, \"Must be\");\n@@ -133,1 +208,0 @@\n-  int length = FieldInfoStream::num_total_fields(fis);\n@@ -135,2 +209,3 @@\n-  int java_field_count = r.next_uint();\n-  int injected_fields_count = r.next_uint();\n+  int java_fields_count;\n+  int injected_fields_count;\n+  r.read_field_counts(&java_fields_count, &injected_fields_count);\n@@ -143,0 +218,42 @@\n+\n+int FieldInfoReader::search_table_lookup(const Array<u1> *search_table, const Symbol *name, const Symbol *signature, ConstantPool *cp, int java_fields) {\n+  UNSIGNED5::Reader<const u1*, int> r2(_r.array());\n+  int low = 0, high = java_fields - 1;\n+  int position_width = _r.limit() > UINT16_MAX + 1 ? 3 : 2;\n+  int item_width = position_width  + (java_fields > UINT8_MAX + 1 ? 2 : 1);\n+  auto read_position = _r.limit() > UINT16_MAX + 1 ?\n+    [](const u1 *ptr) { return (int) ptr[0] + (((int) ptr[1] << 8)) + (((int) ptr[2]) << 16); } :\n+    [](const u1 *ptr) { return (int) *reinterpret_cast<const u2 *>(ptr); };\n+  while (low <= high) {\n+    int mid = low + (high - low) \/ 2;\n+    const u1 *ptr = search_table->data() + item_width * mid;\n+    int position = read_position(ptr);\n+    r2.set_position(position);\n+    Symbol *mid_name = cp->symbol_at(checked_cast<u2>(r2.next_uint()));\n+    Symbol *mid_sig = cp->symbol_at(checked_cast<u2>(r2.next_uint()));\n+\n+    if (mid_name == name && mid_sig == signature) {\n+      _r.set_position(position);\n+      _next_index = java_fields > UINT8_MAX + 1 ?\n+        *reinterpret_cast<const u2 *>(ptr + position_width) : ptr[position_width];\n+      return _next_index;\n+    }\n+\n+    int cmp = name->fast_compare(mid_name);\n+    if (cmp < 0) {\n+      high = mid - 1;\n+      continue;\n+    } else if (cmp > 0) {\n+      low = mid + 1;\n+      continue;\n+    }\n+    cmp = signature->fast_compare(mid_sig);\n+    assert(cmp != 0, \"Equality check above did not match\");\n+    if (cmp < 0) {\n+      high = mid - 1;\n+    } else {\n+      low = mid + 1;\n+    }\n+  }\n+  return -1;\n+}\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.cpp","additions":132,"deletions":15,"binary":false,"changes":147,"status":"modified"},{"patch":"@@ -223,1 +223,0 @@\n-\n@@ -226,5 +225,0 @@\n-  friend class FieldInfoStream;\n-  friend class ClassFileParser;\n-  friend class FieldStreamBase;\n-  friend class FieldInfo;\n-\n@@ -234,1 +228,1 @@\n-  public:\n+public:\n@@ -237,2 +231,1 @@\n-  private:\n-  uint32_t next_uint() { return _r.next_uint(); }\n+private:\n@@ -242,3 +235,4 @@\n-  int has_next() { return _r.has_next(); }\n-  int position() { return _r.position(); }\n-  int next_index() { return _next_index; }\n+  void read_field_counts(int *java_fields, int *injected_fields);\n+  int has_next() const { return _r.position() < _r.limit(); }\n+  int position() const { return _r.position(); }\n+  int next_index() const { return _next_index; }\n@@ -246,0 +240,3 @@\n+\n+  int search_table_lookup(const Array<u1> *search_table, const Symbol *name, const Symbol *signature, ConstantPool *cp, int java_fields);\n+\n@@ -274,0 +271,3 @@\n+  \/\/ Don't generate the table for small classes at all.\n+  static const int SEARCH_TABLE_THRESHOLD = 16;\n+\n@@ -279,1 +279,2 @@\n-                                                          ClassLoaderData* loader_data, TRAPS);\n+                                           ClassLoaderData* loader_data, TRAPS);\n+  static Array<u1>* create_search_table(ConstantPool* cp, const Array<u1>* fis, ClassLoaderData* loader_data, TRAPS);\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.hpp","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -59,2 +59,4 @@\n-  fir.skip(1);\n-  return fir.next_uint();\n+  int java_fields_count;\n+  int injected_fields_count;\n+  fir.read_field_counts(&java_fields_count, &injected_fields_count);\n+  return injected_fields_count;\n@@ -65,1 +67,4 @@\n-  return fir.next_uint() + fir.next_uint();\n+  int java_fields_count;\n+  int injected_fields_count;\n+  fir.read_field_counts(&java_fields_count, &injected_fields_count);\n+  return java_fields_count + injected_fields_count;\n@@ -68,1 +73,7 @@\n-inline int FieldInfoStream::num_java_fields(const Array<u1>* fis) { return FieldInfoReader(fis).next_uint(); }\n+inline int FieldInfoStream::num_java_fields(const Array<u1>* fis) {\n+  FieldInfoReader fir(fis);\n+  int java_fields_count;\n+  int injected_fields_count;\n+  fir.read_field_counts(&java_fields_count, &injected_fields_count);\n+  return java_fields_count;\n+}\n@@ -97,1 +108,1 @@\n-  : _r(fi->data(), 0),\n+  : _r(fi->data(), fi->length()),\n@@ -100,0 +111,5 @@\n+inline void FieldInfoReader::read_field_counts(int *java_fields, int *injected_fields) {\n+  *java_fields = _r.next_uint();\n+  *injected_fields = _r.next_uint();\n+}\n+\n@@ -102,5 +118,5 @@\n-  fi._name_index = checked_cast<u2>(next_uint());\n-  fi._signature_index = checked_cast<u2>(next_uint());\n-  fi._offset = next_uint();\n-  fi._access_flags = AccessFlags(checked_cast<u2>(next_uint()));\n-  fi._field_flags = FieldInfo::FieldFlags(next_uint());\n+  fi._name_index = checked_cast<u2>(_r.next_uint());\n+  fi._signature_index = checked_cast<u2>(_r.next_uint());\n+  fi._offset = _r.next_uint();\n+  fi._access_flags = AccessFlags(checked_cast<u2>(_r.next_uint()));\n+  fi._field_flags = FieldInfo::FieldFlags(_r.next_uint());\n@@ -108,1 +124,1 @@\n-    fi._initializer_index = checked_cast<u2>(next_uint());\n+    fi._initializer_index = checked_cast<u2>(_r.next_uint());\n@@ -113,1 +129,1 @@\n-    fi._generic_signature_index = checked_cast<u2>(next_uint());\n+    fi._generic_signature_index = checked_cast<u2>(_r.next_uint());\n@@ -118,1 +134,1 @@\n-    fi._contention_group = checked_cast<u2>(next_uint());\n+    fi._contention_group = checked_cast<u2>(_r.next_uint());\n@@ -128,1 +144,1 @@\n-  FieldInfo::FieldFlags ff(next_uint());\n+  FieldInfo::FieldFlags ff(_r.next_uint());\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.inline.hpp","additions":30,"deletions":14,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  inline FieldStreamBase(Array<u1>* fieldinfo_stream, ConstantPool* constants);\n+  inline FieldStreamBase(const Array<u1>* fieldinfo_stream, ConstantPool* constants);\n@@ -61,1 +61,1 @@\n-  private:\n+ private:\n@@ -63,3 +63,8 @@\n-    int java_fields_count = _reader.next_uint();\n-    int injected_fields_count = _reader.next_uint();\n-    assert( _limit <= java_fields_count + injected_fields_count, \"Safety check\");\n+    int java_fields_count;\n+    int injected_fields_count;\n+    _reader.read_field_counts(&java_fields_count, &injected_fields_count);\n+    if (_limit < _index) {\n+      _limit = java_fields_count + injected_fields_count;\n+    } else {\n+      assert( _limit <= java_fields_count + injected_fields_count, \"Safety check\");\n+    }\n@@ -71,0 +76,1 @@\n+\n@@ -141,0 +147,2 @@\n+ private:\n+  Array<u1> *_search_table;\n@@ -142,1 +150,2 @@\n-  JavaFieldStream(const InstanceKlass* k): FieldStreamBase(k->fieldinfo_stream(), k->constants(), 0, k->java_fields_count()) {}\n+  JavaFieldStream(const InstanceKlass* k): FieldStreamBase(k->fieldinfo_stream(), k->constants(), 0, k->java_fields_count()),\n+    _search_table(k->fieldinfo_search_table()) {}\n@@ -152,1 +161,0 @@\n-    return -1;\n@@ -167,0 +175,4 @@\n+\n+  \/\/ Performs either a linear search or binary search through the stream\n+  \/\/ looking for a matchin name\/signature combo\n+  bool lookup(const Symbol *name, const Symbol *signature);\n@@ -179,1 +191,0 @@\n-  AllFieldStream(Array<u1>* fieldinfo, ConstantPool* constants): FieldStreamBase(fieldinfo, constants) {}\n","filename":"src\/hotspot\/share\/oops\/fieldStreams.hpp","additions":19,"deletions":8,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -36,7 +36,3 @@\n-         _constants(constantPoolHandle(Thread::current(), constants)), _index(start) {\n-  _index = start;\n-  if (limit < start) {\n-    _limit = FieldInfoStream::num_total_fields(_fieldinfo_stream);\n-  } else {\n-    _limit = limit;\n-  }\n+         _constants(constantPoolHandle(Thread::current(), constants)),\n+         _index(start),\n+         _limit(limit) {\n@@ -46,1 +42,1 @@\n-FieldStreamBase::FieldStreamBase(Array<u1>* fieldinfo_stream, ConstantPool* constants) :\n+FieldStreamBase::FieldStreamBase(const Array<u1>* fieldinfo_stream, ConstantPool* constants) :\n@@ -51,1 +47,1 @@\n-        _limit(FieldInfoStream::num_total_fields(_fieldinfo_stream)) {\n+        _limit(-1) {\n@@ -60,1 +56,1 @@\n-         _limit(FieldInfoStream::num_total_fields(_fieldinfo_stream)) {\n+         _limit(-1) {\n@@ -65,0 +61,19 @@\n+inline bool JavaFieldStream::lookup(const Symbol *name, const Symbol *signature) {\n+  if (_search_table != nullptr) {\n+    int index = _reader.search_table_lookup(_search_table, name, signature, _constants(), _limit);\n+    if (index >= 0) {\n+      assert(index < _limit, \"must be\");\n+      _index = index;\n+      _reader.read_field_info(_fi_buf);\n+      return true;\n+    }\n+  } else {\n+    for (; !done(); next()) {\n+      if (this->name() == name && this->signature() == signature) {\n+        return true;\n+      }\n+    }\n+  }\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/fieldStreams.inline.hpp","additions":25,"deletions":10,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -689,0 +689,5 @@\n+  if (fieldinfo_search_table() != nullptr && !fieldinfo_search_table()->is_shared()) {\n+    MetadataFactory::free_array<u1>(loader_data, fieldinfo_search_table());\n+  }\n+  set_fieldinfo_search_table(nullptr);\n+\n@@ -1783,7 +1788,6 @@\n-  for (JavaFieldStream fs(this); !fs.done(); fs.next()) {\n-    Symbol* f_name = fs.name();\n-    Symbol* f_sig  = fs.signature();\n-    if (f_name == name && f_sig == sig) {\n-      fd->reinitialize(const_cast<InstanceKlass*>(this), fs.to_FieldInfo());\n-      return true;\n-    }\n+  JavaFieldStream fs(this);\n+  if (fs.lookup(name, sig)) {\n+    assert(fs.name() == name, \"name must match\");\n+    assert(fs.signature() == sig, \"signature must match\");\n+    fd->reinitialize(const_cast<InstanceKlass*>(this), fs.to_FieldInfo());\n+    return true;\n@@ -2606,0 +2610,1 @@\n+  it->push(&_fieldinfo_search_table);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -279,0 +279,1 @@\n+  Array<u1>*          _fieldinfo_search_table;\n@@ -407,0 +408,3 @@\n+  Array<u1>* fieldinfo_search_table() const { return _fieldinfo_search_table; }\n+  void set_fieldinfo_search_table(Array<u1> *table) { _fieldinfo_search_table = table; }\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3561,0 +3561,5 @@\n+\n+    Array<u1>* old_table = scratch_class->fieldinfo_search_table();\n+    Array<u1>* search_table = FieldInfoStream::create_search_table(scratch_class->constants(), new_fis, scratch_class->class_loader_data(), CHECK);\n+    scratch_class->set_fieldinfo_search_table(search_table);\n+    MetadataFactory::free_array<u1>(scratch_class->class_loader_data(), old_table);\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -264,1 +264,1 @@\n-    int next_length() {\n+    int next_length() const {\n@@ -273,1 +273,1 @@\n-    bool has_next() {\n+    bool has_next() const {\n@@ -287,2 +287,3 @@\n-    OFF limit() { return _limit; }\n-    OFF position() { return _position; }\n+    OFF limit() const { return _limit; }\n+    OFF position() const { return _position; }\n+    void set_limit(OFF limit) { _limit = limit; }\n","filename":"src\/hotspot\/share\/utilities\/unsigned5.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}