{"files":[{"patch":"@@ -132,1 +132,1 @@\n-typedef struct {\n+struct field_pos {\n@@ -137,1 +137,1 @@\n-} field_pos;\n+};\n@@ -230,1 +230,0 @@\n-private:\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -75,1 +75,0 @@\n- public:\n@@ -77,0 +76,1 @@\n+ public:\n","filename":"src\/hotspot\/share\/oops\/fieldStreams.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,5 +26,0 @@\n-\/\/ MSVC++ does not have an appropriate builtin, use library version\n-#ifdef _MSC_VER\n-# define __builtin_memcpy memcpy\n-#endif\n-\n@@ -60,1 +55,1 @@\n-  for (; offset + sizeof(uint64_t) <= table_length && supplier.next(&key, &value); offset += _element_bytes) {\n+  for (; offset <= table_length && supplier.next(&key, &value); offset += _element_bytes) {\n@@ -63,5 +58,0 @@\n-    uint64_t element = static_cast<uint64_t>(key) | (static_cast<uint64_t>(value) << _value_shift);\n-    __builtin_memcpy(table + offset, &element, _element_bytes);\n-  }\n-  \/\/ last bytes\n-  for (; offset < table_length && supplier.next(&key, &value); offset += _element_bytes) {\n@@ -70,1 +60,2 @@\n-      table[offset + i] = static_cast<u1>(0xFF & (element >> (8 * i)));\n+      table[offset + i] = static_cast<u1>(0xFF & element);\n+      element >>= 8;\n@@ -80,1 +71,3 @@\n-  __builtin_memcpy(&element, _table + offset, _element_bytes);\n+  for (unsigned int i = 0; i < _element_bytes; ++i) {\n+    element |= static_cast<uint64_t>(_table[offset + i]) << (8 * i);\n+  }\n","filename":"src\/hotspot\/share\/utilities\/packedTable.cpp","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -74,1 +74,0 @@\n-private:\n","filename":"src\/hotspot\/share\/utilities\/packedTable.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,4 +28,4 @@\n-private:\n-    uint32_t* _keys;\n-    uint32_t* _values;\n-    size_t _num_keys;\n+  uint32_t* _keys;\n+  uint32_t* _values;\n+  size_t _num_keys;\n+\n@@ -33,2 +33,2 @@\n-    Supplier(uint32_t* keys, uint32_t* values, size_t num_keys):\n-        _keys(keys), _values(values), _num_keys(num_keys) {}\n+  Supplier(uint32_t* keys, uint32_t* values, size_t num_keys):\n+    _keys(keys), _values(values), _num_keys(num_keys) {}\n@@ -36,15 +36,15 @@\n-    bool next(uint32_t* key, uint32_t* value) override {\n-        if (_num_keys == 0) {\n-            return false;\n-        }\n-        *key = *_keys;\n-        ++_keys;\n-        if (_values != nullptr) {\n-            *value = *_values;\n-            ++_values;\n-        } else {\n-            *value = 0;\n-        }\n-        --_num_keys;\n-        return true;\n-    }\n+  bool next(uint32_t* key, uint32_t* value) override {\n+    if (_num_keys == 0) {\n+      return false;\n+    }\n+    *key = *_keys;\n+    ++_keys;\n+    if (_values != nullptr) {\n+      *value = *_values;\n+      ++_values;\n+    } else {\n+      *value = 0;\n+    }\n+    --_num_keys;\n+    return true;\n+  }\n@@ -54,2 +54,2 @@\n-private:\n-    uint32_t _current;\n+  uint32_t _current;\n+\n@@ -57,3 +57,3 @@\n-    int compare_to(uint32_t key) override {\n-        return _current < key ? -1 : (_current > key ? 1 : 0);\n-    }\n+  int compare_to(uint32_t key) override {\n+    return _current < key ? -1 : (_current > key ? 1 : 0);\n+  }\n@@ -61,3 +61,3 @@\n-    void reset(uint32_t key) DEBUG_ONLY(override) {\n-        _current = key;\n-    }\n+  void reset(uint32_t key) DEBUG_ONLY(override) {\n+    _current = key;\n+  }\n@@ -67,7 +67,7 @@\n-    if (length > max_key + 1) {\n-        \/\/ can't generate more keys, as keys must be unique\n-        return;\n-    }\n-    PackedTableBuilder builder(max_key, max_value);\n-    size_t table_length = length * builder.element_bytes();\n-    u1* table = new u1[table_length];\n+  if (length > max_key + 1) {\n+    \/\/ can't generate more keys, as keys must be unique\n+    return;\n+  }\n+  PackedTableBuilder builder(max_key, max_value);\n+  size_t table_length = length * builder.element_bytes();\n+  u1* table = new u1[table_length];\n@@ -75,10 +75,10 @@\n-    uint32_t* keys = new uint32_t[length];\n-    uint32_t* values = max_value != 0 ? new uint32_t[length] : nullptr;\n-    for (unsigned int i = 0; i < length; ++i) {\n-        keys[i] = i;\n-        if (values != nullptr) {\n-            values[i] = i % max_value;\n-        }\n-    }\n-    Supplier sup(keys, values, length);\n-    builder.fill(table, table_length, sup);\n+  uint32_t* keys = new uint32_t[length];\n+  uint32_t* values = max_value != 0 ? new uint32_t[length] : nullptr;\n+  for (unsigned int i = 0; i < length; ++i) {\n+    keys[i] = i;\n+    if (values != nullptr) {\n+      values[i] = i % max_value;\n+    }\n+  }\n+  Supplier sup(keys, values, length);\n+  builder.fill(table, table_length, sup);\n@@ -86,2 +86,2 @@\n-    Comparator comparator;\n-    PackedTableLookup lookup(max_key, max_value, table, table_length);\n+  Comparator comparator;\n+  PackedTableLookup lookup(max_key, max_value, table, table_length);\n@@ -89,1 +89,1 @@\n-    lookup.validate_order(comparator);\n+  lookup.validate_order(comparator);\n@@ -92,11 +92,11 @@\n-    for (unsigned int i = 0; i < length; ++i) {\n-        uint32_t key, value;\n-        comparator.reset(keys[i]);\n-        EXPECT_TRUE(lookup.search(comparator, &key, &value));\n-        EXPECT_EQ(key, keys[i]);\n-        if (values != nullptr) {\n-            EXPECT_EQ(value, values[i]);\n-        } else {\n-            EXPECT_EQ(value, 0U);\n-        }\n-    }\n+  for (unsigned int i = 0; i < length; ++i) {\n+    uint32_t key, value;\n+    comparator.reset(keys[i]);\n+    EXPECT_TRUE(lookup.search(comparator, &key, &value));\n+    EXPECT_EQ(key, keys[i]);\n+    if (values != nullptr) {\n+      EXPECT_EQ(value, values[i]);\n+    } else {\n+      EXPECT_EQ(value, 0U);\n+    }\n+  }\n@@ -104,2 +104,2 @@\n-    delete[] keys;\n-    delete[] values;\n+  delete[] keys;\n+  delete[] values;\n@@ -109,5 +109,5 @@\n-    \/\/ Some small sizes\n-    for (unsigned int i = 0; i <= 100; ++i) {\n-        test(max_key, max_value, i);\n-    }\n-    test(max_key, max_value, 10000);\n+  \/\/ Some small sizes\n+  for (unsigned int i = 0; i <= 100; ++i) {\n+    test(max_key, max_value, i);\n+  }\n+  test(max_key, max_value, 10000);\n@@ -117,5 +117,4 @@\n-    for (int key_bits = 1; key_bits <= 32; ++key_bits) {\n-        for (int value_bits = 0; value_bits <= 32; ++value_bits) {\n-            test_with_bits(static_cast<uint32_t>((1ULL << key_bits) - 1),\n-                           static_cast<uint32_t>((1ULL << value_bits) - 1));\n-        }\n+  for (int key_bits = 1; key_bits <= 32; ++key_bits) {\n+    for (int value_bits = 0; value_bits <= 32; ++value_bits) {\n+      test_with_bits(static_cast<uint32_t>((1ULL << key_bits) - 1),\n+                     static_cast<uint32_t>((1ULL << value_bits) - 1));\n@@ -123,0 +122,1 @@\n+  }\n@@ -126,32 +126,32 @@\n-    {\n-        PackedTableBuilder builder(1, 0);\n-        EXPECT_EQ(builder.element_bytes(), 1U);\n-    }\n-    {\n-        PackedTableBuilder builder(15, 15);\n-        EXPECT_EQ(builder.element_bytes(), 1U);\n-    }\n-    {\n-        PackedTableBuilder builder(15, 16);\n-        EXPECT_EQ(builder.element_bytes(), 2U);\n-    }\n-    {\n-        PackedTableBuilder builder(31, 7);\n-        EXPECT_EQ(builder.element_bytes(), 1U);\n-    }\n-    {\n-        PackedTableBuilder builder(32, 7);\n-        EXPECT_EQ(builder.element_bytes(), 2U);\n-    }\n-    {\n-        PackedTableBuilder builder(-1, 0);\n-        EXPECT_EQ(builder.element_bytes(), 4U);\n-    }\n-    {\n-        PackedTableBuilder builder(-1, 1);\n-        EXPECT_EQ(builder.element_bytes(), 5U);\n-    }\n-    {\n-        PackedTableBuilder builder(-1, -1);\n-        EXPECT_EQ(builder.element_bytes(), 8U);\n-    }\n+  {\n+    PackedTableBuilder builder(1, 0);\n+    EXPECT_EQ(builder.element_bytes(), 1U);\n+  }\n+  {\n+    PackedTableBuilder builder(15, 15);\n+    EXPECT_EQ(builder.element_bytes(), 1U);\n+  }\n+  {\n+    PackedTableBuilder builder(15, 16);\n+    EXPECT_EQ(builder.element_bytes(), 2U);\n+  }\n+  {\n+    PackedTableBuilder builder(31, 7);\n+    EXPECT_EQ(builder.element_bytes(), 1U);\n+  }\n+  {\n+    PackedTableBuilder builder(32, 7);\n+    EXPECT_EQ(builder.element_bytes(), 2U);\n+  }\n+  {\n+    PackedTableBuilder builder(-1, 0);\n+    EXPECT_EQ(builder.element_bytes(), 4U);\n+  }\n+  {\n+    PackedTableBuilder builder(-1, 1);\n+    EXPECT_EQ(builder.element_bytes(), 5U);\n+  }\n+  {\n+    PackedTableBuilder builder(-1, -1);\n+    EXPECT_EQ(builder.element_bytes(), 8U);\n+  }\n","filename":"test\/hotspot\/gtest\/utilities\/test_packedTable.cpp","additions":104,"deletions":104,"binary":false,"changes":208,"status":"modified"}]}