{"files":[{"patch":"@@ -3751,0 +3751,2 @@\n+  DEBUG_ONLY(FieldInfoStream::validate_search_table(_cp, _fieldinfo_stream, _fieldinfo_search_table));\n+\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -974,0 +974,2 @@\n+\n+      DEBUG_ONLY(FieldInfoStream::validate_search_table(ik->constants(), new_fis, search_table));\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -122,0 +122,5 @@\n+int FieldInfoStream::compare_name_and_sig(const Symbol* n1, const Symbol* s1, const Symbol* n2, const Symbol* s2) {\n+  int cmp = n1->fast_compare(n2);\n+  return cmp != 0 ? cmp : s1->fast_compare(s2);\n+}\n+\n@@ -134,2 +139,2 @@\n-  int position_width = fis->length() > UINT16_MAX + 1 ? 3 : 2;\n-  int index_width = java_fields > UINT8_MAX + 1 ? 2 : 1;\n+  int position_width = search_table_position_width(fis->length());\n+  int index_width = search_table_index_width(java_fields);\n@@ -164,7 +169,3 @@\n-    int name_result = reinterpret_cast<const field_pos_t *>(v1)->name->fast_compare(\n-                      reinterpret_cast<const field_pos_t *>(v2)->name);\n-    if (name_result != 0) {\n-      return name_result;\n-    }\n-    return reinterpret_cast<const field_pos_t *>(v1)->signature->fast_compare(\n-           reinterpret_cast<const field_pos_t *>(v2)->signature);\n+    const field_pos_t *p1 = reinterpret_cast<const field_pos_t *>(v1);\n+    const field_pos_t *p2 = reinterpret_cast<const field_pos_t *>(v2);\n+    return compare_name_and_sig(p1->name, p1->signature, p2->name, p2->signature);\n@@ -219,0 +220,30 @@\n+#ifdef ASSERT\n+void FieldInfoStream::validate_search_table(ConstantPool* cp, const Array<u1>* fis, const Array<u1> *search_table) {\n+  if (search_table == nullptr) {\n+    return;\n+  }\n+  UNSIGNED5::Reader<const u1*, int> reader(fis->data(), fis->length());\n+  int java_fields = reader.next_uint();\n+  int position_width = search_table_position_width(fis->length());\n+  int item_width = position_width  + search_table_index_width(java_fields);\n+  auto read_position = position_width == 3 ?\n+    [](const u1 *ptr) { return (int) ptr[0] + (((int) ptr[1] << 8)) + (((int) ptr[2]) << 16); } :\n+    [](const u1 *ptr) { return (int) *reinterpret_cast<const u2 *>(ptr); };\n+\n+  const Symbol* prev_name = nullptr;\n+  const Symbol* prev_sig = nullptr;\n+  const u1* ptr = search_table->data();\n+  for (int i = 0; i < java_fields; ++i, ptr += item_width) {\n+    reader.set_position(read_position(ptr));\n+    const Symbol* name = cp->symbol_at(reader.next_uint());\n+    const Symbol* signature = cp->symbol_at(reader.next_uint());\n+\n+    if (prev_name != nullptr && prev_sig != nullptr) {\n+      assert(compare_name_and_sig(name, signature, prev_name, prev_sig) > 0, \"not sorted\");\n+    }\n+    prev_name = name;\n+    prev_sig = signature;\n+  }\n+}\n+#endif\n+\n@@ -222,3 +253,3 @@\n-  int position_width = _r.limit() > UINT16_MAX + 1 ? 3 : 2;\n-  int item_width = position_width  + (java_fields > UINT8_MAX + 1 ? 2 : 1);\n-  auto read_position = _r.limit() > UINT16_MAX + 1 ?\n+  int position_width = FieldInfoStream::search_table_position_width(_r.limit());\n+  int item_width = position_width  + FieldInfoStream::search_table_index_width(java_fields);\n+  auto read_position = position_width == 3 ?\n@@ -235,1 +266,2 @@\n-    if (mid_name == name && mid_sig == signature) {\n+    int cmp = FieldInfoStream::compare_name_and_sig(name, signature, mid_name, mid_sig);\n+    if (cmp == 0) {\n@@ -237,1 +269,1 @@\n-      _next_index = java_fields > UINT8_MAX + 1 ?\n+      _next_index = item_width == 2 ?\n@@ -240,13 +272,1 @@\n-    }\n-\n-    int cmp = name->fast_compare(mid_name);\n-    if (cmp < 0) {\n-      high = mid - 1;\n-      continue;\n-    } else if (cmp > 0) {\n-      low = mid + 1;\n-      continue;\n-    }\n-    cmp = signature->fast_compare(mid_sig);\n-    assert(cmp != 0, \"Equality check above did not match\");\n-    if (cmp < 0) {\n+    } else if (cmp < 0) {\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.cpp","additions":47,"deletions":27,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -269,0 +269,1 @@\n+  friend class FieldInfoReader;\n@@ -270,1 +271,1 @@\n- public:\n+ private:\n@@ -274,0 +275,11 @@\n+  static inline int search_table_position_width(int stream_length) {\n+    assert(stream_length <= (1 << 24), \"stream too long\");\n+    return stream_length > UINT16_MAX + 1 ? 3 : 2;\n+  }\n+  static inline int search_table_index_width(int java_fields) {\n+    assert(java_fields <= (1 << 16), \"too many fields\");\n+    return java_fields > UINT8_MAX + 1 ? 2 : 1;\n+  }\n+  static int compare_name_and_sig(const Symbol* n1, const Symbol* s1, const Symbol* n2, const Symbol* s2);\n+\n+ public:\n@@ -283,0 +295,2 @@\n+\n+  DEBUG_ONLY(static void validate_search_table(ConstantPool* cp, const Array<u1>* fis, const Array<u1> *search_table);)\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.hpp","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2709,0 +2709,2 @@\n+\n+  DEBUG_ONLY(FieldInfoStream::validate_search_table(_constants, _fieldinfo_stream, _fieldinfo_search_table));\n@@ -2815,0 +2817,2 @@\n+\n+  DEBUG_ONLY(FieldInfoStream::validate_search_table(_constants, _fieldinfo_stream, _fieldinfo_search_table));\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3566,0 +3566,2 @@\n+\n+    DEBUG_ONLY(FieldInfoStream::validate_search_table(scratch_class->constants(), new_fis, search_table));\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}