{"files":[{"patch":"@@ -63,1 +63,0 @@\n-              $build_dir\/make\/hs_err* \\\n","filename":".github\/actions\/do-build\/action.yml","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -228,1 +228,0 @@\n-friend class FieldInfoStream;\n@@ -275,29 +274,1 @@\n-  uint32_t err_pivot = -1;\n-  if (!lookup.validate_order(comparator, search_table, &err_pivot)) {\n-    assert(err_pivot < (uint32_t) fis->length(), \"invalid pivot %u\", err_pivot);\n-\n-    lookup.dump(search_table);\n-\n-    ResourceMark rm;\n-    fprintf(stderr, \"ACTUAL FIELDS (%d + %d) -> %d, %d:\\n\", java_fields, injected_fields, fis->length(), search_table->length());\n-    int i = 0;\n-    while (reader.has_next()) {\n-      FieldInfo fi;\n-      int pos = reader.position();\n-      reader.read_field_info(fi);\n-      fprintf(stderr, \"FIELD %2d|%3d %s(%p) %s(%p)\\n\", i++, pos, fi.name(cp)->as_C_string(), fi.name(cp), fi.signature(cp)->as_C_string(), fi.signature(cp));\n-    }\n-\n-    char *msg;\n-    {\n-      reader.set_position_and_next_index(err_pivot, -1);\n-      FieldInfo fi;\n-      reader.read_field_info(fi);\n-      if (asprintf(&msg, \"Invalid order %s(%p) %s(%p) vs. %s(%p) %s(%p)\",\n-        comparator._name->as_C_string(), comparator._name, comparator._signature->as_C_string(), comparator._signature,\n-        fi.name(cp)->as_C_string(), fi.name(cp), fi.signature(cp)->as_C_string(), fi.signature(cp)) < 0) {\n-          msg = const_cast<char *>(\"cannot format\");\n-      }\n-      report_vm_error(__FILE__, __LINE__, msg);\n-    }\n-  }\n+  lookup.validate_order(comparator, search_table);\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.cpp","additions":1,"deletions":30,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-  assert((value & ~((uint64_t) _pivot_mask | ((uint64_t) _payload_mask << _payload_shift))) == 0);\n+  assert((value & ~((uint64_t) _pivot_mask | ((uint64_t) _payload_mask << _payload_shift))) == 0, \"read too much\");\n@@ -99,1 +99,1 @@\n-bool PackedTableLookup::validate_order(Comparator &comparator, const Array<u1> *search_table, uint32_t *err_pivot) const {\n+void PackedTableLookup::validate_order(Comparator &comparator, const Array<u1> *search_table) const {\n@@ -106,3 +106,2 @@\n-    if (offset != 0 && comparator.compare_to(pivot) >= 0) {\n-      *err_pivot = pivot;\n-      return false;\n+    if (offset != 0) {\n+      assert(comparator.compare_to(pivot) < 0, \"not sorted\");\n@@ -112,15 +111,0 @@\n-  return true;\n-}\n-\n-void PackedTableLookup::dump(const Array<u1> *search_table) const {\n-  fprintf(stderr, \"TABLE %u bytes\/item, pivot mask %x, payload shift %u mask %x\\n\",\n-    _element_bytes, _pivot_mask, _payload_shift, _payload_mask);\n-  const u1* data = search_table->data();\n-  size_t length = static_cast<size_t>(search_table->length());\n-  for (size_t offset = 0; offset < length; offset += _element_bytes) {\n-    uint64_t value = read_value(data, length, offset);\n-    uint32_t pivot = value & _pivot_mask;\n-    uint32_t payload = (value >> _payload_shift) & _payload_mask;\n-\n-    fprintf(stderr, \"%zu: %u (0x%x) %u (0x%x)\\n\", offset, pivot, pivot, payload, payload);\n-  }\n","filename":"src\/hotspot\/share\/utilities\/packedTable.cpp","additions":4,"deletions":20,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -75,2 +75,1 @@\n-  DEBUG_ONLY(bool validate_order(Comparator &comparator, const Array<u1> *search_table, uint32_t *err_pivot) const);\n-  DEBUG_ONLY(void dump(const Array<u1> *search_table) const);\n+  DEBUG_ONLY(void validate_order(Comparator &comparator, const Array<u1> *search_table) const);\n","filename":"src\/hotspot\/share\/utilities\/packedTable.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}