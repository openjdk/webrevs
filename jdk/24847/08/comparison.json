{"files":[{"patch":"@@ -3741,0 +3741,1 @@\n+  this_klass->set_fieldinfo_search_table(_fieldinfo_search_table);\n@@ -3750,0 +3751,2 @@\n+  DEBUG_ONLY(FieldInfoStream::validate_search_table(_cp, _fieldinfo_stream, _fieldinfo_search_table));\n+\n@@ -5056,0 +5059,1 @@\n+  assert(nullptr == _fieldinfo_search_table, \"invariant\");\n@@ -5276,0 +5280,1 @@\n+  _fieldinfo_search_table(nullptr),\n@@ -5352,0 +5357,1 @@\n+  _fieldinfo_search_table = nullptr;\n@@ -5374,0 +5380,1 @@\n+  MetadataFactory::free_array<u1>(_loader_data, _fieldinfo_search_table);\n@@ -5774,0 +5781,1 @@\n+  _fieldinfo_search_table = FieldInfoStream::create_search_table(_cp, _fieldinfo_stream, _loader_data, CHECK);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -126,0 +126,1 @@\n+  Array<u1>* _fieldinfo_search_table;\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -304,1 +304,1 @@\n-    for (AllFieldStream fs(ik->fieldinfo_stream(), ik->constants()); !fs.done(); fs.next()) {\n+    for (AllFieldStream fs(ik); !fs.done(); fs.next()) {\n@@ -464,1 +464,1 @@\n-          for (AllFieldStream fs(ik->fieldinfo_stream(), ik->constants()); !fs.done(); fs.next()) {\n+          for (AllFieldStream fs(ik); !fs.done(); fs.next()) {\n","filename":"src\/hotspot\/share\/classfile\/fieldLayoutBuilder.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -969,0 +969,7 @@\n+\n+      Array<u1> *old_table = ik->fieldinfo_search_table();\n+      Array<u1>* search_table = FieldInfoStream::create_search_table(ik->constants(), new_fis, k->class_loader_data(), CHECK);\n+      ik->set_fieldinfo_search_table(search_table);\n+      MetadataFactory::free_array<u1>(k->class_loader_data(), old_table);\n+\n+      DEBUG_ONLY(FieldInfoStream::validate_search_table(ik->constants(), new_fis, search_table));\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"memory\/resourceArea.hpp\"\n@@ -40,2 +41,4 @@\n-                _field_flags.is_injected() ? lookup_symbol(generic_signature_index())->as_utf8() : cp->symbol_at(generic_signature_index())->as_utf8(),\n-                contended_group());\n+                _field_flags.is_generic() ? (_field_flags.is_injected() ?\n+                  lookup_symbol(generic_signature_index())->as_utf8() : cp->symbol_at(generic_signature_index())->as_utf8()\n+                  ) : \"\",\n+                is_contended() ? contended_group() : 0);\n@@ -65,0 +68,2 @@\n+  assert(fields->length() == java_fields + injected_fields, \"must be\");\n+\n@@ -71,1 +76,3 @@\n-  int storage_size = sizer.consumer()->position() + 1;\n+  \/\/ Originally there was an extra byte with 0 terminating the reading;\n+  \/\/ now we check limits instead.\n+  int storage_size = sizer.consumer()->position();\n@@ -82,2 +89,1 @@\n-    FieldInfo* fi = fields->adr_at(i);\n-    writer.map_field_info(*fi);\n+    writer.map_field_info(fields->at(i));\n@@ -88,1 +94,2 @@\n-  int jfc = r.next_uint();\n+  int jfc, ifc;\n+  r.read_field_counts(&jfc, &ifc);\n@@ -90,1 +97,0 @@\n-  int ifc = r.next_uint();\n@@ -116,0 +122,72 @@\n+int FieldInfoStream::compare_name_and_sig(const Symbol* n1, const Symbol* s1, const Symbol* n2, const Symbol* s2) {\n+  int cmp = n1->fast_compare(n2);\n+  return cmp != 0 ? cmp : s1->fast_compare(s2);\n+}\n+\n+Array<u1>* FieldInfoStream::create_search_table(ConstantPool* cp, const Array<u1>* fis, ClassLoaderData* loader_data, TRAPS) {\n+  FieldInfoReader r(fis);\n+  int java_fields;\n+  int injected_fields;\n+  r.read_field_counts(&java_fields, &injected_fields);\n+  assert(java_fields >= 0, \"must be\");\n+  if (static_cast<uint>(java_fields) < BinarySearchThreshold) {\n+    return nullptr;\n+  }\n+\n+  \/\/ We use fixed width to let us skip through the table during binary search.\n+  \/\/ With the max of 65536 fields (and at most tens of bytes per field),\n+  \/\/ 3-byte offsets would suffice. In the common case with < 64kB stream 2-byte offsets are enough.\n+  int position_width = search_table_position_width(fis->length());\n+  int index_width = search_table_index_width(java_fields);\n+  int item_width = position_width + index_width;\n+\n+  Array<u1>* table = MetadataFactory::new_array<u1>(loader_data, java_fields * item_width, CHECK_NULL);\n+\n+  ResourceMark rm;\n+  \/\/ We use both name and signature during the comparison; while JLS require unique\n+  \/\/ names for fields, JVMS requires only unique name + signature combination.\n+  typedef struct {\n+    Symbol *name;\n+    Symbol *signature;\n+    int index;\n+    int position;\n+  } field_pos_t;\n+  field_pos_t *positions = nullptr;\n+\n+  positions = NEW_RESOURCE_ARRAY(field_pos_t, java_fields);\n+  for (int i = 0; i < java_fields; ++i) {\n+    assert(r.has_next(), \"number of fields must match\");\n+\n+    positions[i].position = r.position();\n+    FieldInfo fi;\n+    r.read_field_info(fi);\n+\n+    positions[i].name = fi.name(cp);\n+    positions[i].signature = fi.signature(cp);\n+    positions[i].index = i;\n+  }\n+  auto compare_pair = [](const void *v1, const void *v2) {\n+    const field_pos_t *p1 = reinterpret_cast<const field_pos_t *>(v1);\n+    const field_pos_t *p2 = reinterpret_cast<const field_pos_t *>(v2);\n+    return compare_name_and_sig(p1->name, p1->signature, p2->name, p2->signature);\n+  };\n+  qsort(positions, java_fields, sizeof(field_pos_t), compare_pair);\n+\n+  auto write_position = position_width == 2 ?\n+    [](u1 *ptr, int position) { *reinterpret_cast<u2*>(ptr) = checked_cast<u2>(position); } :\n+    [](u1 *ptr, int position) {\n+      ptr[0] = static_cast<u1>(position);\n+      ptr[1] = static_cast<u1>(position >> 8);\n+      ptr[2] = checked_cast<u1>(position >> 16);\n+    };\n+  auto write_index = index_width == 1 ?\n+    [](u1 *ptr, int index) { *ptr = checked_cast<u1>(index); } :\n+    [](u1 *ptr, int index) { *reinterpret_cast<u2 *>(ptr) = checked_cast<u2>(index); };\n+  for (int i = 0; i < java_fields; ++i) {\n+    u1 *ptr = table->adr_at(item_width * i);\n+    write_position(ptr, positions[i].position);\n+    write_index(ptr + position_width, positions[i].index);\n+  }\n+  return table;\n+}\n+\n@@ -117,2 +195,0 @@\n-  int length = FieldInfoStream::num_total_fields(fis);\n-  GrowableArray<FieldInfo>* array = new GrowableArray<FieldInfo>(length);\n@@ -120,2 +196,4 @@\n-  *java_fields_count = r.next_uint();\n-  *injected_fields_count = r.next_uint();\n+  r.read_field_counts(java_fields_count, injected_fields_count);\n+  int length = *java_fields_count + *injected_fields_count;\n+\n+  GrowableArray<FieldInfo>* array = new GrowableArray<FieldInfo>(length);\n@@ -128,1 +206,0 @@\n-  assert(array->length() == *java_fields_count + *injected_fields_count, \"Must be\");\n@@ -133,1 +210,0 @@\n-  int length = FieldInfoStream::num_total_fields(fis);\n@@ -135,2 +211,3 @@\n-  int java_field_count = r.next_uint();\n-  int injected_fields_count = r.next_uint();\n+  int java_fields_count;\n+  int injected_fields_count;\n+  r.read_field_counts(&java_fields_count, &injected_fields_count);\n@@ -143,0 +220,97 @@\n+\n+#ifdef ASSERT\n+void FieldInfoStream::validate_search_table(ConstantPool* cp, const Array<u1>* fis, const Array<u1> *search_table) {\n+  if (search_table == nullptr) {\n+    return;\n+  }\n+  FieldInfoReader reader(fis);\n+  int java_fields, injected_fields;\n+  reader.read_field_counts(&java_fields, &injected_fields);\n+  unsigned int position_width = search_table_position_width(fis->length());\n+  unsigned int item_width = position_width + search_table_index_width(java_fields);\n+  assert(item_width * java_fields == static_cast<unsigned int>(search_table->length()), \"size matches\");\n+  auto read_position = position_width == 3 ?\n+    [](const u1 *ptr) { return (int) ptr[0] + (((int) ptr[1] << 8)) + (((int) ptr[2]) << 16); } :\n+    [](const u1 *ptr) { return (int) *reinterpret_cast<const u2 *>(ptr); };\n+\n+  \/\/ Check 1: assert that elements have the correct order based on the comparison function\n+  const Symbol* prev_name = nullptr;\n+  const Symbol* prev_sig = nullptr;\n+  const u1* ptr = search_table->data();\n+  for (int i = 0; i < java_fields; ++i, ptr += item_width) {\n+    int position = read_position(ptr);\n+    reader.set_position_and_next_index(position, -1);\n+    FieldInfo fi;\n+    reader.read_field_info(fi);\n+    const Symbol* name = fi.name(cp);\n+    const Symbol* signature = fi.signature(cp);\n+\n+    if (prev_name != nullptr && prev_sig != nullptr) {\n+      assert(compare_name_and_sig(name, signature, prev_name, prev_sig) > 0, \"not sorted\");\n+    }\n+    prev_name = name;\n+    prev_sig = signature;\n+  }\n+\n+  \/\/ Check 2: Iterate through the original stream (not just search_table) and try if lookup works as expected\n+  reader.set_position_and_next_index(0, 0);\n+  reader.read_field_counts(&java_fields, &injected_fields);\n+  while (reader.has_next()) {\n+    int field_start = reader.position();\n+    FieldInfo fi;\n+    reader.read_field_info(fi);\n+    if (fi.field_flags().is_injected()) {\n+      \/\/ checking only java fields that precede injected ones\n+      break;\n+    }\n+\n+    FieldInfoReader r2(fis);\n+    int index = r2.search_table_lookup(search_table, fi.name(cp), fi.signature(cp), cp, java_fields);\n+    assert(index == static_cast<int>(fi.index()), \"wrong index: %d != %u\", index, fi.index());\n+    assert(index == r2.next_index(), \"index should match\");\n+    assert(field_start == r2.position(), \"must find the same position\");\n+  }\n+}\n+#endif\n+\n+int FieldInfoReader::search_table_lookup(const Array<u1> *search_table, const Symbol *name, const Symbol *signature, ConstantPool *cp, int java_fields) {\n+  assert(java_fields >= 0, \"must be\");\n+  if (java_fields == 0) {\n+    return -1;\n+  }\n+  FieldInfoReader r2(*this);\n+  unsigned int low = 0, high = java_fields;\n+  assert(low < high, \"must be\");\n+  unsigned int position_width = FieldInfoStream::search_table_position_width(_r.limit());\n+  unsigned int index_width = FieldInfoStream::search_table_index_width(java_fields);\n+  unsigned int item_width = position_width + index_width;\n+  auto read_position = position_width == 3 ?\n+    [](const u1 *ptr) { return (int) ptr[0] + (((int) ptr[1] << 8)) + (((int) ptr[2]) << 16); } :\n+    [](const u1 *ptr) { return (int) *reinterpret_cast<const u2 *>(ptr); };\n+  while (low < high) {\n+    unsigned int mid = low + (high - low) \/ 2;\n+    assert(mid >= low && mid < high, \"integer overflow?\");\n+    const u1 *ptr = search_table->data() + item_width * mid;\n+\n+    int position = read_position(ptr);\n+    assert(position >= 0 && position < _r.limit(), \"position out of bounds\");\n+    r2.set_position_and_next_index(position, -1);\n+    u2 name_index, sig_index;\n+    r2.read_name_and_signature(&name_index, &sig_index);\n+    Symbol *mid_name = cp->symbol_at(name_index);\n+    Symbol *mid_sig = cp->symbol_at(sig_index);\n+\n+    int cmp = FieldInfoStream::compare_name_and_sig(name, signature, mid_name, mid_sig);\n+    if (cmp == 0) {\n+      _r.set_position(position);\n+      _next_index = index_width == 2 ?\n+        *reinterpret_cast<const u2 *>(ptr + position_width) : ptr[position_width];\n+      return _next_index;\n+    } else if (cmp < 0) {\n+      high = mid;\n+    } else {\n+      low = mid + 1;\n+    }\n+  }\n+  return -1;\n+}\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.cpp","additions":189,"deletions":15,"binary":false,"changes":204,"status":"modified"},{"patch":"@@ -223,1 +223,0 @@\n-\n@@ -226,5 +225,0 @@\n-  friend class FieldInfoStream;\n-  friend class ClassFileParser;\n-  friend class FieldStreamBase;\n-  friend class FieldInfo;\n-\n@@ -234,1 +228,1 @@\n-  public:\n+public:\n@@ -237,2 +231,1 @@\n-  private:\n-  uint32_t next_uint() { return _r.next_uint(); }\n+private:\n@@ -242,3 +235,5 @@\n-  int has_next() { return _r.has_next(); }\n-  int position() { return _r.position(); }\n-  int next_index() { return _next_index; }\n+  void read_field_counts(int *java_fields, int *injected_fields);\n+  int has_next() const { return _r.position() < _r.limit(); }\n+  int position() const { return _r.position(); }\n+  int next_index() const { return _next_index; }\n+  void read_name_and_signature(u2 *name_index, u2 *signature_index);\n@@ -246,0 +241,3 @@\n+\n+  int search_table_lookup(const Array<u1> *search_table, const Symbol *name, const Symbol *signature, ConstantPool *cp, int java_fields);\n+\n@@ -272,0 +270,12 @@\n+  friend class FieldInfoReader;\n+\n+ private:\n+  static inline unsigned int search_table_position_width(int stream_length) {\n+    assert(stream_length >= 0 && stream_length <= (1 << 24), \"stream too long\");\n+    return stream_length > UINT16_MAX + 1 ? 3 : 2;\n+  }\n+  static inline unsigned int search_table_index_width(int java_fields) {\n+    assert(java_fields >= 0 && java_fields <= (1 << 16), \"too many fields\");\n+    return java_fields > UINT8_MAX + 1 ? 2 : 1;\n+  }\n+  static int compare_name_and_sig(const Symbol* n1, const Symbol* s1, const Symbol* n2, const Symbol* s2);\n@@ -279,1 +289,2 @@\n-                                                          ClassLoaderData* loader_data, TRAPS);\n+                                           ClassLoaderData* loader_data, TRAPS);\n+  static Array<u1>* create_search_table(ConstantPool* cp, const Array<u1>* fis, ClassLoaderData* loader_data, TRAPS);\n@@ -282,0 +293,2 @@\n+\n+  DEBUG_ONLY(static void validate_search_table(ConstantPool* cp, const Array<u1>* fis, const Array<u1> *search_table);)\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.hpp","additions":26,"deletions":13,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -59,2 +59,4 @@\n-  fir.skip(1);\n-  return fir.next_uint();\n+  int java_fields_count;\n+  int injected_fields_count;\n+  fir.read_field_counts(&java_fields_count, &injected_fields_count);\n+  return injected_fields_count;\n@@ -65,1 +67,4 @@\n-  return fir.next_uint() + fir.next_uint();\n+  int java_fields_count;\n+  int injected_fields_count;\n+  fir.read_field_counts(&java_fields_count, &injected_fields_count);\n+  return java_fields_count + injected_fields_count;\n@@ -68,1 +73,7 @@\n-inline int FieldInfoStream::num_java_fields(const Array<u1>* fis) { return FieldInfoReader(fis).next_uint(); }\n+inline int FieldInfoStream::num_java_fields(const Array<u1>* fis) {\n+  FieldInfoReader fir(fis);\n+  int java_fields_count;\n+  int injected_fields_count;\n+  fir.read_field_counts(&java_fields_count, &injected_fields_count);\n+  return java_fields_count;\n+}\n@@ -97,1 +108,1 @@\n-  : _r(fi->data(), 0),\n+  : _r(fi->data(), fi->length()),\n@@ -100,0 +111,10 @@\n+inline void FieldInfoReader::read_field_counts(int *java_fields, int *injected_fields) {\n+  *java_fields = _r.next_uint();\n+  *injected_fields = _r.next_uint();\n+}\n+\n+inline void FieldInfoReader::read_name_and_signature(u2 *name_index, u2 *signature_index) {\n+  *name_index = checked_cast<u2>(_r.next_uint());\n+  *signature_index = checked_cast<u2>(_r.next_uint());\n+}\n+\n@@ -102,5 +123,4 @@\n-  fi._name_index = checked_cast<u2>(next_uint());\n-  fi._signature_index = checked_cast<u2>(next_uint());\n-  fi._offset = next_uint();\n-  fi._access_flags = AccessFlags(checked_cast<u2>(next_uint()));\n-  fi._field_flags = FieldInfo::FieldFlags(next_uint());\n+  read_name_and_signature(&fi._name_index, &fi._signature_index);\n+  fi._offset = _r.next_uint();\n+  fi._access_flags = AccessFlags(checked_cast<u2>(_r.next_uint()));\n+  fi._field_flags = FieldInfo::FieldFlags(_r.next_uint());\n@@ -108,1 +128,1 @@\n-    fi._initializer_index = checked_cast<u2>(next_uint());\n+    fi._initializer_index = checked_cast<u2>(_r.next_uint());\n@@ -113,1 +133,1 @@\n-    fi._generic_signature_index = checked_cast<u2>(next_uint());\n+    fi._generic_signature_index = checked_cast<u2>(_r.next_uint());\n@@ -118,1 +138,1 @@\n-    fi._contention_group = checked_cast<u2>(next_uint());\n+    fi._contention_group = checked_cast<u2>(_r.next_uint());\n@@ -128,1 +148,1 @@\n-  FieldInfo::FieldFlags ff(next_uint());\n+  FieldInfo::FieldFlags ff(_r.next_uint());\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.inline.hpp","additions":34,"deletions":14,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  inline FieldStreamBase(Array<u1>* fieldinfo_stream, ConstantPool* constants);\n+  inline FieldStreamBase(const Array<u1>* fieldinfo_stream, ConstantPool* constants);\n@@ -61,1 +61,1 @@\n-  private:\n+ private:\n@@ -63,3 +63,8 @@\n-    int java_fields_count = _reader.next_uint();\n-    int injected_fields_count = _reader.next_uint();\n-    assert( _limit <= java_fields_count + injected_fields_count, \"Safety check\");\n+    int java_fields_count;\n+    int injected_fields_count;\n+    _reader.read_field_counts(&java_fields_count, &injected_fields_count);\n+    if (_limit < _index) {\n+      _limit = java_fields_count + injected_fields_count;\n+    } else {\n+      assert( _limit <= java_fields_count + injected_fields_count, \"Safety check\");\n+    }\n@@ -71,0 +76,1 @@\n+\n@@ -141,0 +147,2 @@\n+ private:\n+  Array<u1> *_search_table;\n@@ -142,1 +150,2 @@\n-  JavaFieldStream(const InstanceKlass* k): FieldStreamBase(k->fieldinfo_stream(), k->constants(), 0, k->java_fields_count()) {}\n+  JavaFieldStream(const InstanceKlass* k): FieldStreamBase(k->fieldinfo_stream(), k->constants(), 0, k->java_fields_count()),\n+    _search_table(k->fieldinfo_search_table()) {}\n@@ -152,1 +161,0 @@\n-    return -1;\n@@ -167,0 +175,4 @@\n+\n+  \/\/ Performs either a linear search or binary search through the stream\n+  \/\/ looking for a matchin name\/signature combo\n+  bool lookup(const Symbol *name, const Symbol *signature);\n@@ -179,1 +191,0 @@\n-  AllFieldStream(Array<u1>* fieldinfo, ConstantPool* constants): FieldStreamBase(fieldinfo, constants) {}\n","filename":"src\/hotspot\/share\/oops\/fieldStreams.hpp","additions":19,"deletions":8,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -36,7 +36,3 @@\n-         _constants(constantPoolHandle(Thread::current(), constants)), _index(start) {\n-  _index = start;\n-  if (limit < start) {\n-    _limit = FieldInfoStream::num_total_fields(_fieldinfo_stream);\n-  } else {\n-    _limit = limit;\n-  }\n+         _constants(constantPoolHandle(Thread::current(), constants)),\n+         _index(start),\n+         _limit(limit) {\n@@ -46,1 +42,1 @@\n-FieldStreamBase::FieldStreamBase(Array<u1>* fieldinfo_stream, ConstantPool* constants) :\n+FieldStreamBase::FieldStreamBase(const Array<u1>* fieldinfo_stream, ConstantPool* constants) :\n@@ -51,1 +47,1 @@\n-        _limit(FieldInfoStream::num_total_fields(_fieldinfo_stream)) {\n+        _limit(-1) {\n@@ -60,1 +56,1 @@\n-         _limit(FieldInfoStream::num_total_fields(_fieldinfo_stream)) {\n+         _limit(-1) {\n@@ -65,0 +61,19 @@\n+inline bool JavaFieldStream::lookup(const Symbol *name, const Symbol *signature) {\n+  if (_search_table != nullptr) {\n+    int index = _reader.search_table_lookup(_search_table, name, signature, _constants(), _limit);\n+    if (index >= 0) {\n+      assert(index < _limit, \"must be\");\n+      _index = index;\n+      _reader.read_field_info(_fi_buf);\n+      return true;\n+    }\n+  } else {\n+    for (; !done(); next()) {\n+      if (this->name() == name && this->signature() == signature) {\n+        return true;\n+      }\n+    }\n+  }\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/fieldStreams.inline.hpp","additions":25,"deletions":10,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -689,0 +689,5 @@\n+  if (fieldinfo_search_table() != nullptr && !fieldinfo_search_table()->is_shared()) {\n+    MetadataFactory::free_array<u1>(loader_data, fieldinfo_search_table());\n+  }\n+  set_fieldinfo_search_table(nullptr);\n+\n@@ -1783,7 +1788,6 @@\n-  for (JavaFieldStream fs(this); !fs.done(); fs.next()) {\n-    Symbol* f_name = fs.name();\n-    Symbol* f_sig  = fs.signature();\n-    if (f_name == name && f_sig == sig) {\n-      fd->reinitialize(const_cast<InstanceKlass*>(this), fs.to_FieldInfo());\n-      return true;\n-    }\n+  JavaFieldStream fs(this);\n+  if (fs.lookup(name, sig)) {\n+    assert(fs.name() == name, \"name must match\");\n+    assert(fs.signature() == sig, \"signature must match\");\n+    fd->reinitialize(const_cast<InstanceKlass*>(this), fs.to_FieldInfo());\n+    return true;\n@@ -2606,0 +2610,1 @@\n+  it->push(&_fieldinfo_search_table);\n@@ -2704,0 +2709,2 @@\n+\n+  DEBUG_ONLY(FieldInfoStream::validate_search_table(_constants, _fieldinfo_stream, _fieldinfo_search_table));\n@@ -2810,0 +2817,2 @@\n+\n+  DEBUG_ONLY(FieldInfoStream::validate_search_table(_constants, _fieldinfo_stream, _fieldinfo_search_table));\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -279,0 +279,1 @@\n+  Array<u1>*          _fieldinfo_search_table;\n@@ -407,0 +408,3 @@\n+  Array<u1>* fieldinfo_search_table() const { return _fieldinfo_search_table; }\n+  void set_fieldinfo_search_table(Array<u1> *table) { _fieldinfo_search_table = table; }\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3561,0 +3561,7 @@\n+\n+    Array<u1>* old_table = scratch_class->fieldinfo_search_table();\n+    Array<u1>* search_table = FieldInfoStream::create_search_table(scratch_class->constants(), new_fis, scratch_class->class_loader_data(), CHECK);\n+    scratch_class->set_fieldinfo_search_table(search_table);\n+    MetadataFactory::free_array<u1>(scratch_class->class_loader_data(), old_table);\n+\n+    DEBUG_ONLY(FieldInfoStream::validate_search_table(scratch_class->constants(), new_fis, search_table));\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2005,0 +2005,4 @@\n+                                                                            \\\n+  develop(uint, BinarySearchThreshold, 16,                                  \\\n+          \"Minimal number of elements in a sorted collection to prefer\"     \\\n+          \"binary search over simple linear search.\" )                      \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -264,1 +264,1 @@\n-    int next_length() {\n+    int next_length() const {\n@@ -273,1 +273,1 @@\n-    bool has_next() {\n+    bool has_next() const {\n@@ -287,2 +287,3 @@\n-    OFF limit() { return _limit; }\n-    OFF position() { return _position; }\n+    OFF limit() const { return _limit; }\n+    OFF position() const { return _position; }\n+    void set_limit(OFF limit) { _limit = limit; }\n","filename":"src\/hotspot\/share\/utilities\/unsigned5.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+\n+import static org.objectweb.asm.ClassWriter.COMPUTE_FRAMES;\n+import static org.objectweb.asm.ClassWriter.COMPUTE_MAXS;\n+import static org.objectweb.asm.Opcodes.*;\n+\n+\/*\n+ * @test id=defaults\n+ * @bug 8352075\n+ * @library \/test\/lib\n+ * @library \/testlibrary\/asm\n+ * @run main\/othervm LocalFieldLookupTest\n+ *\/\n+\/*\n+ * @test id=custom-threshold\n+ * @bug 8352075\n+ * @library \/test\/lib\n+ * @library \/testlibrary\/asm\n+ * @requires vm.debug == true\n+ * @run main\/othervm LocalFieldLookupTest\n+ * @run main\/othervm -XX:BinarySearchThreshold=0 LocalFieldLookupTest\n+ * @run main\/othervm -XX:BinarySearchThreshold=1 LocalFieldLookupTest\n+ * @run main\/othervm -XX:BinarySearchThreshold=15 LocalFieldLookupTest\n+ * @run main\/othervm -XX:BinarySearchThreshold=100000 LocalFieldLookupTest\n+ *\/\n+public class LocalFieldLookupTest {\n+    private static final String TEST_CLASS_NAME = \"Test\";\n+    private static final int MAX_FIELDS_IN_METHOD = 10000;\n+\n+    public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException {\n+        \/\/ Test small classes, covering the tested thresholds\n+        for (int i = 0; i <= 33; ++i) {\n+            makeClass(i).newInstance();\n+        }\n+        \/\/ Test classes around 256 fields (index encoding 1\/2 bytes) to check off-by-one errors\n+        for (int i = 254; i <= 259; ++i) {\n+            makeClass(255).newInstance();\n+        }\n+        \/\/ We would like to test #fields that create have the stream about 65536 bytes long;\n+        \/\/ this value is not exposed, though, so these are rather experimentally found values,\n+        \/\/ hence fragile. Moreover, since the stream length is incremented by about 8 bytes\n+        \/\/ for each field we cannot test for off-by-one errors reliably.\n+        for (int i = 8433; i <= 8437; ++i) {\n+            makeClass(i).newInstance();\n+        }\n+        \/\/ The largest class we can create - this one has 65533 entries in the constant pool\n+        makeClass(26205).newInstance();\n+    }\n+\n+    public static Class<?> makeClass(int fields) throws ClassNotFoundException {\n+        ClassWriter writer = new ClassWriter(COMPUTE_MAXS | COMPUTE_FRAMES);\n+        writer.visit(49, Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER, TEST_CLASS_NAME,null, \"java\/lang\/Object\", null);\n+\n+        for (int i = 0; i < fields; i += 2) {\n+            writer.visitField(ACC_PUBLIC, \"f\" + i, \"I\",  null, null);\n+            \/\/ Let's use duplicate names to confirm search takes signatures into account\n+            if (i + 1 < fields) {\n+                writer.visitField(ACC_PUBLIC, \"f\" + i, \"J\",  null, null);\n+            }\n+        }\n+        \/\/ We initialize fields in multiple methods to avoid running into bytecode limit per method\n+        MethodVisitor fi = null;\n+        for (int i = 0; i < fields; i+= 2) {\n+            if (fi == null) {\n+                fi = writer.visitMethod(ACC_PRIVATE, \"init\" + i, \"()V\", null, null);\n+                fi.visitCode();\n+            }\n+            fi.visitVarInsn(Opcodes.ALOAD, 0);\n+            fi.visitInsn(Opcodes.ICONST_2);\n+            fi.visitFieldInsn(PUTFIELD, TEST_CLASS_NAME, \"f\" + i, \"I\");\n+            if (i + 1 < fields) {\n+                fi.visitVarInsn(Opcodes.ALOAD, 0);\n+                fi.visitInsn(Opcodes.LCONST_1);\n+                fi.visitFieldInsn(PUTFIELD, TEST_CLASS_NAME, \"f\" + i, \"J\");\n+            }\n+            if (i % MAX_FIELDS_IN_METHOD == MAX_FIELDS_IN_METHOD - 2) {\n+                fi.visitInsn(Opcodes.RETURN);\n+                fi.visitMaxs(0, 0);\n+                fi.visitEnd();\n+                fi = null;\n+            }\n+        }\n+        if (fi != null) {\n+            fi.visitInsn(Opcodes.RETURN);\n+            fi.visitMaxs(0, 0);\n+            fi.visitEnd();\n+        }\n+        {\n+            MethodVisitor mv = writer.visitMethod(ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n+            mv.visitCode();\n+            mv.visitVarInsn(ALOAD, 0);\n+            mv.visitMethodInsn(INVOKESPECIAL, \"java\/lang\/Object\", \"<init>\", \"()V\", false);\n+            for (int i = 0; i < fields; i += MAX_FIELDS_IN_METHOD) {\n+                mv.visitVarInsn(ALOAD, 0);\n+                mv.visitMethodInsn(INVOKESPECIAL, TEST_CLASS_NAME, \"init\" + i, \"()V\", false);\n+            }\n+            mv.visitInsn(RETURN);\n+            mv.visitMaxs(0, 0);\n+            mv.visitEnd();\n+        }\n+        writer.visitEnd();\n+\n+        byte[] bytecode = writer.toByteArray();\n+        ClassLoader cl = new ClassLoader() {\n+            @Override\n+            protected Class<?> findClass(String name) throws ClassNotFoundException {\n+                if (!TEST_CLASS_NAME.equals(name)) {\n+                    throw new ClassNotFoundException();\n+                }\n+                return defineClass(TEST_CLASS_NAME, bytecode, 0, bytecode.length);\n+            }\n+        };\n+        return cl.loadClass(TEST_CLASS_NAME);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/8352075\/LocalFieldLookupTest.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"}]}