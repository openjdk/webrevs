{"files":[{"patch":"@@ -108,2 +108,1 @@\n-  bool will_dump_core = !(!FLAG_IS_DEFAULT(CreateCoredumpOnCrash) && !CreateCoredumpOnCrash);\n-  if (!will_dump_core) {\n+  if (!FLAG_IS_DEFAULT(CreateCoredumpOnCrash) && !CreateCoredumpOnCrash) {\n@@ -111,0 +110,1 @@\n+    VMError::record_coredump_status(buffer, false);\n@@ -112,0 +112,3 @@\n+    struct rlimit rlim;\n+    bool success = true;\n+    bool warn = true;\n@@ -113,6 +116,2 @@\n-    if (os::get_core_path(core_path, PATH_MAX) <= 0) {\n-      jio_snprintf(buffer, bufferSize, \"core.%d (may not exist)\", os::current_process_id());\n-      if (!check_only) {\n-        \/\/ TODO: why is this true for general case?\n-        will_dump_core = true;\n-      }\n+    if (get_core_path(core_path, PATH_MAX) <= 0) {\n+      jio_snprintf(buffer, bufferSize, \"core.%d (may not exist)\", current_process_id());\n@@ -122,1 +121,0 @@\n-      will_dump_core = true;\n@@ -124,0 +122,2 @@\n+    } else if (getrlimit(RLIMIT_CORE, &rlim) != 0) {\n+      jio_snprintf(buffer, bufferSize, \"%s (may not exist)\", core_path);\n@@ -125,26 +125,12 @@\n-      struct rlimit rlim;\n-      if (getrlimit(RLIMIT_CORE, &rlim) != 0) {\n-        jio_snprintf(buffer, bufferSize, \"%s (may not exist)\", core_path);\n-        if (!check_only) {\n-          \/\/ TODO: why is this true for general case?\n-          will_dump_core = true;\n-        }\n-      } else {\n-        switch(rlim.rlim_cur) {\n-          case RLIM_INFINITY:\n-            jio_snprintf(buffer, bufferSize, \"%s\", core_path);\n-            will_dump_core = true;\n-            break;\n-          case 0:\n-            jio_snprintf(buffer, bufferSize, \"Core dumps have been disabled. To enable core dumping, try \\\"ulimit -c unlimited\\\" before starting Java again\");\n-            will_dump_core = false;\n-            break;\n-          default:\n-            jio_snprintf(buffer, bufferSize, \"%s (max size \" UINT64_FORMAT \" k). To ensure a full core dump, try \\\"ulimit -c unlimited\\\" before starting Java again\", core_path, uint64_t(rlim.rlim_cur) \/ K);\n-            if (!check_only) {\n-              will_dump_core = true;\n-            } else {\n-              will_dump_core = uint64_t(rlim.rlim_cur) > uint64_t(4*MaxHeapSize);\n-            }\n-            break;\n-        }\n+      switch(rlim.rlim_cur) {\n+        case RLIM_INFINITY:\n+          jio_snprintf(buffer, bufferSize, \"%s\", core_path);\n+          warn = false;\n+          break;\n+        case 0:\n+          jio_snprintf(buffer, bufferSize, \"Core dumps have been disabled. To enable core dumping, try \\\"ulimit -c unlimited\\\" before starting Java again\");\n+          success = false;\n+          break;\n+        default:\n+          jio_snprintf(buffer, bufferSize, \"%s (max size \" UINT64_FORMAT \" k). To ensure a full core dump, try \\\"ulimit -c unlimited\\\" before starting Java again\", core_path, uint64_t(rlim.rlim_cur) \/ K);\n+          break;\n@@ -153,6 +139,3 @@\n-  }\n-\n-  if (!check_only) {\n-    VMError::record_coredump_status(buffer, will_dump_core);\n-  } else {\n-    if (!will_dump_core) {\n+    if (!check_only) {\n+      VMError::record_coredump_status(buffer, success);\n+    } else if (warn) {\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":24,"deletions":41,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -1291,2 +1291,1 @@\n-  bool will_dump_core = !(!FLAG_IS_DEFAULT(CreateCoredumpOnCrash) && !CreateCoredumpOnCrash);\n-  if (!will_dump_core) {\n+  if (!FLAG_IS_DEFAULT(CreateCoredumpOnCrash) && !CreateCoredumpOnCrash) {\n@@ -1294,0 +1293,1 @@\n+    VMError::record_coredump_status(buffer, false);\n@@ -1295,0 +1295,2 @@\n+    bool success = true;\n+    bool warn = true;\n@@ -1296,3 +1298,4 @@\n-    will_dump_core = !(FLAG_IS_DEFAULT(CreateCoredumpOnCrash) && !os::win32::is_windows_server());\n-    if (!will_dump_core) {\n-      jio_snprintf(buffer, bufferSize, \"Minidumps are not enabled by default on client versions of Windows\");\n+    if (!os::win32::is_windows_server() && FLAG_IS_DEFAULT(CreateCoredumpOnCrash)) {\n+      jio_snprintf(buffer, buffsz, \"Minidumps are not enabled by default on client versions of Windows\");\n+      success = false;\n+      warn = true;\n@@ -1301,1 +1304,2 @@\n-    if (will_dump_core) {\n+\n+    if (success) {\n@@ -1305,1 +1309,1 @@\n-        jio_snprintf(buffer, bufferSize, \"%s\\\\hs_err_pid%u.mdmp\", cwd, pid);\n+        jio_snprintf(buffer, buffsz, \"%s\\\\hs_err_pid%u.mdmp\", cwd, pid);\n@@ -1307,1 +1311,1 @@\n-        jio_snprintf(buffer, bufferSize, \".\\\\hs_err_pid%u.mdmp\", pid);\n+        jio_snprintf(buffer, buffsz, \".\\\\hs_err_pid%u.mdmp\", pid);\n@@ -1310,11 +1314,5 @@\n-      if (!check_only) {\n-        will_dump_core = !(dumpFile == nullptr &&\n-                           (dumpFile = CreateFile(buffer, GENERIC_WRITE, 0, nullptr, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, nullptr))\n-                             == INVALID_HANDLE_VALUE);\n-        if (!will_dump_core) {\n-          jio_snprintf(buffer, bufferSize, \"Failed to create minidump file (0x%x).\", GetLastError());\n-        }\n-      } else {\n-        \/\/ For check_only, which is done at the startup, we DO NOT want to create a file,\n-        \/\/ which would slow startup down, so simply assume here that we can do it\n-        will_dump_core = true;\n+      if (!check_only && dumpFile == nullptr &&\n+          (dumpFile = CreateFile(buffer, GENERIC_WRITE, 0, nullptr, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, nullptr))\n+          == INVALID_HANDLE_VALUE) {\n+        jio_snprintf(buffer, buffsz, \"Failed to create minidump file (0x%x).\", GetLastError());\n+        success = false;\n@@ -1323,7 +1321,3 @@\n-  }\n-\n-  if (!check_only) {\n-    VMError::record_coredump_status(buffer, will_dump_core);\n-  } else {\n-    if (!will_dump_core) {\n-      \/\/ The code logic is provided, but currently there is no path to get here on Windows\n+    if (!check_only) {\n+      VMError::record_coredump_status(buffer, success);\n+    } else if (warn) {\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":20,"deletions":26,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,2 @@\n+import java.lang.Runtime;\n+\n@@ -40,4 +42,12 @@\n-    private static class Crasher {\n-        public static void main(String[] args) {\n-            Unsafe.getUnsafe().putInt(0L, 0);\n-        }\n+  private static class Crasher {\n+    public static void main(String[] args) {\n+      Unsafe.getUnsafe().putInt(0L, 0);\n+    }\n+  }\n+\n+  private static String ulimitString(int limit) {\n+    String string = \"ulimit -c \";\n+    if (limit != Integer.MAX_VALUE) {\n+      string += limit;\n+    } else {\n+      string += \"unlimited\";\n@@ -45,0 +55,18 @@\n+    return string+\";\";\n+  }\n+\n+  public static void main(String[] args) throws Exception {\n+    runTest(\"-XX:-CreateCoredumpOnCrash\").shouldContain(\"CreateCoredumpOnCrash turned off, no core file dumped\")\n+    .shouldNotHaveExitValue(0);\n+\n+    if (Platform.isWindows()) {\n+      \/\/ The old CreateMinidumpOnCrash option should still work\n+      runTest(\"-XX:-CreateMinidumpOnCrash\").shouldContain(\"CreateCoredumpOnCrash turned off, no core file dumped\")\n+      .shouldNotHaveExitValue(0);\n+    } else {\n+      OutputAnalyzer oa = new OutputAnalyzer(Runtime.getRuntime().exec(\"ulimit -c\"));\n+      oa.shouldHaveExitValue(0);\n+      if (!oa.contains(\"0\\n\")) {\n+        oa = runTest(\"-XX:+CreateCoredumpOnCrash\");\n+        oa.shouldContain(\"Core dump will be written.\");\n+        oa.shouldNotHaveExitValue(0);\n@@ -46,3 +74,4 @@\n-    public static void main(String[] args) throws Exception {\n-        runTest(\"-XX:-CreateCoredumpOnCrash\").shouldContain(\"CreateCoredumpOnCrash turned off, no core file dumped\")\n-                                             .shouldNotHaveExitValue(0);\n+        oa = runTest(\"-XX:+CreateCoredumpOnCrash\", ulimitString(1024));\n+        oa.shouldContain(\"warning: CreateCoredumpOnCrash specified, but\");\n+        oa.shouldContain(\"To ensure a full core dump\");\n+        oa.shouldNotHaveExitValue(0);\n@@ -50,10 +79,8 @@\n-        if (Platform.isWindows()) {\n-            \/\/ The old CreateMinidumpOnCrash option should still work\n-            runTest(\"-XX:-CreateMinidumpOnCrash\").shouldContain(\"CreateCoredumpOnCrash turned off, no core file dumped\")\n-                                                 .shouldNotHaveExitValue(0);\n-        } else {\n-          OutputAnalyzer oa = runTest(\"-XX:+CreateCoredumpOnCrash\");\n-          oa.reportDiagnosticSummary();\n-          oa.shouldContain(\"core dump info\").shouldNotContain(\"CreateCoredumpOnCrash turned off, no core file dumped\").\n-                  shouldNotHaveExitValue(0);\n-        }\n+        \/\/ Do \"ulimit -c 0\" last, as once we decrease it, we cannot increase it\n+        oa = runTest(\"-XX:+CreateCoredumpOnCrash\", ulimitString(0));\n+        oa.shouldContain(\"warning: CreateCoredumpOnCrash specified, but\");\n+        oa.shouldContain(\"To enable core dumping\");\n+        oa.shouldNotHaveExitValue(0);\n+      } else {\n+        throw new Exception(\"ulimit is not set correctly, try 'ulimit -c unlimited' and re-run.\");\n+      }\n@@ -61,0 +88,1 @@\n+  }\n@@ -62,5 +90,10 @@\n-    public static OutputAnalyzer runTest(String option) throws Exception {\n-        return new OutputAnalyzer(\n-            ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-Xmx128m\", \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\", \"-Xlog:os=info:stdout\", option, Crasher.class.getName())\n-            .start());\n+  public static OutputAnalyzer runTest(String option) throws Exception {\n+    return runTest(option, \"\");\n+  }\n+  public static OutputAnalyzer runTest(String option, String limit) throws Exception {\n+    ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xmx128m\",\n+                                                                         \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\",\n+                                                                         option, new String(\"'\"+Crasher.class.getName()+\"'\"));\n+    String args = \"\";\n+    for (String s:pb.command()) {\n+      args += s+\" \";\n@@ -68,0 +101,3 @@\n+    String exec_cmd[] = {\"\/bin\/sh\", \"-c\", limit+args};\n+    return new OutputAnalyzer(Runtime.getRuntime().exec(exec_cmd));\n+  }\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/CreateCoredumpOnCrash.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"}]}