{"files":[{"patch":"@@ -1322,1 +1322,1 @@\n-        \/\/ For now on Windows, there is no more checks that we can do\n+        \/\/ For now on Windows, there are no more checks that we can do\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,2 +39,0 @@\n-import java.lang.Runtime;\n-\n@@ -42,3 +40,4 @@\n-  private static class Crasher {\n-    public static void main(String[] args) {\n-      Unsafe.getUnsafe().putInt(0L, 0);\n+    private static class Crasher {\n+        public static void main(String[] args) {\n+            Unsafe.getUnsafe().putInt(0L, 0);\n+        }\n@@ -46,1 +45,0 @@\n-  }\n@@ -48,6 +46,8 @@\n-  private static String ulimitString(int limit) {\n-    String string = \"ulimit -c \";\n-    if (limit != Integer.MAX_VALUE) {\n-      string += limit;\n-    } else {\n-      string += \"unlimited\";\n+    private static String ulimitString(int limit) {\n+        String string = \"ulimit -c \";\n+        if (limit != Integer.MAX_VALUE) {\n+            string += limit;\n+        } else {\n+            string += \"unlimited\";\n+        }\n+        return string+\";\";\n@@ -55,2 +55,0 @@\n-    return string+\";\";\n-  }\n@@ -58,3 +56,3 @@\n-  public static void main(String[] args) throws Exception {\n-    runTest(\"-XX:-CreateCoredumpOnCrash\").shouldContain(\"CreateCoredumpOnCrash turned off, no core file dumped\")\n-    .shouldNotHaveExitValue(0);\n+    public static void main(String[] args) throws Exception {\n+        runTest(\"-XX:-CreateCoredumpOnCrash\").shouldContain(\"CreateCoredumpOnCrash turned off, no core file dumped\")\n+        .shouldNotHaveExitValue(0);\n@@ -62,11 +60,11 @@\n-    if (Platform.isWindows()) {\n-      \/\/ The old CreateMinidumpOnCrash option should still work\n-      runTest(\"-XX:-CreateMinidumpOnCrash\").shouldContain(\"CreateCoredumpOnCrash turned off, no core file dumped\")\n-      .shouldNotHaveExitValue(0);\n-    } else {\n-      OutputAnalyzer oa = new OutputAnalyzer(Runtime.getRuntime().exec(\"ulimit -c\"));\n-      oa.shouldHaveExitValue(0);\n-      if (!oa.contains(\"0\\n\")) {\n-        oa = runTest(\"-XX:+CreateCoredumpOnCrash\");\n-        oa.shouldContain(\"Core dump will be written.\");\n-        oa.shouldNotHaveExitValue(0);\n+        if (Platform.isWindows()) {\n+            \/\/ The old CreateMinidumpOnCrash option should still work\n+            runTest(\"-XX:-CreateMinidumpOnCrash\").shouldContain(\"CreateCoredumpOnCrash turned off, no core file dumped\")\n+            .shouldNotHaveExitValue(0);\n+        } else {\n+            OutputAnalyzer oa = new OutputAnalyzer(Runtime.getRuntime().exec(\"ulimit -c\"));\n+            oa.shouldHaveExitValue(0);\n+            if (!oa.contains(\"0\\n\")) {\n+                oa = runTest(\"-XX:+CreateCoredumpOnCrash\");\n+                oa.shouldContain(\"Core dump will be written.\");\n+                oa.shouldNotHaveExitValue(0);\n@@ -74,4 +72,4 @@\n-        oa = runTest(\"-XX:+CreateCoredumpOnCrash\", ulimitString(1024));\n-        oa.shouldContain(\"warning: CreateCoredumpOnCrash specified, but\");\n-        oa.shouldContain(\"To ensure a full core dump\");\n-        oa.shouldNotHaveExitValue(0);\n+                oa = runTest(\"-XX:+CreateCoredumpOnCrash\", ulimitString(1024));\n+                oa.shouldContain(\"warning: CreateCoredumpOnCrash specified, but\");\n+                oa.shouldContain(\"To ensure a full core dump\");\n+                oa.shouldNotHaveExitValue(0);\n@@ -79,8 +77,8 @@\n-        \/\/ Do \"ulimit -c 0\" last, as once we decrease it, we cannot increase it\n-        oa = runTest(\"-XX:+CreateCoredumpOnCrash\", ulimitString(0));\n-        oa.shouldContain(\"warning: CreateCoredumpOnCrash specified, but\");\n-        oa.shouldContain(\"To enable core dumping\");\n-        oa.shouldNotHaveExitValue(0);\n-      } else {\n-        throw new Exception(\"ulimit is not set correctly, try 'ulimit -c unlimited' and re-run.\");\n-      }\n+                oa = runTest(\"-XX:+CreateCoredumpOnCrash\", ulimitString(0));\n+                oa.shouldContain(\"warning: CreateCoredumpOnCrash specified, but\");\n+                oa.shouldContain(\"To enable core dumping\");\n+                oa.shouldNotHaveExitValue(0);\n+            } else {\n+                throw new Exception(\"ulimit is not set correctly, try 'ulimit -c unlimited' and re-run.\");\n+            }\n+        }\n@@ -88,1 +86,0 @@\n-  }\n@@ -90,13 +87,16 @@\n-  public static OutputAnalyzer runTest(String option) throws Exception {\n-    ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xmx128m\",\n-                                                                         \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\",\n-                                                                         option, Crasher.class.getName());\n-    return new OutputAnalyzer(pb.start());\n-  }\n-  public static OutputAnalyzer runTest(String option, String limit) throws Exception {\n-    ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xmx128m\",\n-                                                                         \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\",\n-                                                                         option, new String(\"'\"+Crasher.class.getName()+\"'\"));\n-    String args = \"\";\n-    for (String s:pb.command()) {\n-      args += s+\" \";\n+    public static OutputAnalyzer runTest(String option) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xmx128m\",\n+                                                                             \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\",\n+                                                                             option, Crasher.class.getName());\n+        return new OutputAnalyzer(pb.start());\n+    }\n+    public static OutputAnalyzer runTest(String option, String limit) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xmx128m\",\n+                                                                             \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\",\n+                                                                             option, new String(\"'\"+Crasher.class.getName()+\"'\"));\n+        String args = \"\";\n+        for (String s:pb.command()) {\n+            args += s+\" \";\n+        }\n+        String exec_cmd[] = {\"\/bin\/sh\", \"-c\", limit+args};\n+        return new OutputAnalyzer(Runtime.getRuntime().exec(exec_cmd));\n@@ -104,3 +104,0 @@\n-    String exec_cmd[] = {\"\/bin\/sh\", \"-c\", limit+args};\n-    return new OutputAnalyzer(Runtime.getRuntime().exec(exec_cmd));\n-  }\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/CreateCoredumpOnCrash.java","additions":54,"deletions":57,"binary":false,"changes":111,"status":"modified"}]}