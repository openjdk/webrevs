{"files":[{"patch":"@@ -107,1 +107,1 @@\n-void os::check_dump_limit(char* buffer, size_t bufferSize) {\n+void os::check_core_dump_prerequisites(char* buffer, size_t bufferSize, bool check_only) {\n@@ -111,13 +111,7 @@\n-    return;\n-  }\n-\n-  int n;\n-  struct rlimit rlim;\n-  bool success;\n-\n-  char core_path[PATH_MAX];\n-  n = get_core_path(core_path, PATH_MAX);\n-\n-  if (n <= 0) {\n-    jio_snprintf(buffer, bufferSize, \"core.%d (may not exist)\", current_process_id());\n-    success = true;\n+  } else {\n+    struct rlimit rlim;\n+    bool success = true;\n+    bool warn = true;\n+    char core_path[PATH_MAX];\n+    if (get_core_path(core_path, PATH_MAX) <= 0) {\n+      jio_snprintf(buffer, bufferSize, \"core.%d (may not exist)\", current_process_id());\n@@ -125,3 +119,2 @@\n-  } else if (core_path[0] == '\"') { \/\/ redirect to user process\n-    jio_snprintf(buffer, bufferSize, \"Core dumps may be processed with %s\", core_path);\n-    success = true;\n+    } else if (core_path[0] == '\"') { \/\/ redirect to user process\n+      jio_snprintf(buffer, bufferSize, \"Core dumps may be processed with %s\", core_path);\n@@ -129,17 +122,21 @@\n-  } else if (getrlimit(RLIMIT_CORE, &rlim) != 0) {\n-    jio_snprintf(buffer, bufferSize, \"%s (may not exist)\", core_path);\n-    success = true;\n-  } else {\n-    switch(rlim.rlim_cur) {\n-      case RLIM_INFINITY:\n-        jio_snprintf(buffer, bufferSize, \"%s\", core_path);\n-        success = true;\n-        break;\n-      case 0:\n-        jio_snprintf(buffer, bufferSize, \"Core dumps have been disabled. To enable core dumping, try \\\"ulimit -c unlimited\\\" before starting Java again\");\n-        success = false;\n-        break;\n-      default:\n-        jio_snprintf(buffer, bufferSize, \"%s (max size \" UINT64_FORMAT \" k). To ensure a full core dump, try \\\"ulimit -c unlimited\\\" before starting Java again\", core_path, uint64_t(rlim.rlim_cur) \/ K);\n-        success = true;\n-        break;\n+    } else if (getrlimit(RLIMIT_CORE, &rlim) != 0) {\n+      jio_snprintf(buffer, bufferSize, \"%s (may not exist)\", core_path);\n+    } else {\n+      switch(rlim.rlim_cur) {\n+        case RLIM_INFINITY:\n+          jio_snprintf(buffer, bufferSize, \"%s\", core_path);\n+          warn = false;\n+          break;\n+        case 0:\n+          jio_snprintf(buffer, bufferSize, \"Core dumps have been disabled. To enable core dumping, try \\\"ulimit -c unlimited\\\" before starting Java again\");\n+          success = false;\n+          break;\n+        default:\n+          jio_snprintf(buffer, bufferSize, \"%s (max size \" UINT64_FORMAT \" k). To ensure a full core dump, try \\\"ulimit -c unlimited\\\" before starting Java again\", core_path, uint64_t(rlim.rlim_cur) \/ K);\n+          break;\n+      }\n+    }\n+    if (!check_only) {\n+      VMError::record_coredump_status(buffer, success);\n+    } else if (warn) {\n+      warning(\"CreateCoredumpOnCrash specified, but %s\", buffer);\n@@ -148,2 +145,0 @@\n-\n-  VMError::record_coredump_status(buffer, success);\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":31,"deletions":36,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -1289,3 +1289,2 @@\n-\/\/ Check if dump file can be created.\n-void os::check_dump_limit(char* buffer, size_t buffsz) {\n-  bool status = true;\n+\/\/ Check if core dump is active and if a core dump file can be created\n+void os::check_core_dump_prerequisites(char* buffer, size_t bufferSize, bool check_only) {\n@@ -1293,4 +1292,5 @@\n-    jio_snprintf(buffer, buffsz, \"CreateCoredumpOnCrash is disabled from command line\");\n-    status = false;\n-  }\n-\n+    jio_snprintf(buffer, bufferSize, \"CreateCoredumpOnCrash is disabled from command line\");\n+    VMError::record_coredump_status(buffer, false);\n+  } else {\n+    bool success = true;\n+    bool warn = true;\n@@ -1298,4 +1298,5 @@\n-  if (!os::win32::is_windows_server() && FLAG_IS_DEFAULT(CreateCoredumpOnCrash)) {\n-    jio_snprintf(buffer, buffsz, \"Minidumps are not enabled by default on client versions of Windows\");\n-    status = false;\n-  }\n+    if (!os::win32::is_windows_server() && FLAG_IS_DEFAULT(CreateCoredumpOnCrash)) {\n+      jio_snprintf(buffer, bufferSize, \"Minidumps are not enabled by default on client versions of Windows\");\n+      success = false;\n+      warn = true;\n+    }\n@@ -1304,7 +1305,20 @@\n-  if (status) {\n-    const char* cwd = get_current_directory(nullptr, 0);\n-    int pid = current_process_id();\n-    if (cwd != nullptr) {\n-      jio_snprintf(buffer, buffsz, \"%s\\\\hs_err_pid%u.mdmp\", cwd, pid);\n-    } else {\n-      jio_snprintf(buffer, buffsz, \".\\\\hs_err_pid%u.mdmp\", pid);\n+    if (success) {\n+      if (!check_only) {\n+        const char* cwd = get_current_directory(nullptr, 0);\n+        int pid = current_process_id();\n+        if (cwd != nullptr) {\n+          jio_snprintf(buffer, bufferSize, \"%s\\\\hs_err_pid%u.mdmp\", cwd, pid);\n+        } else {\n+          jio_snprintf(buffer, bufferSize, \".\\\\hs_err_pid%u.mdmp\", pid);\n+        }\n+\n+        if (dumpFile == nullptr &&\n+            (dumpFile = CreateFile(buffer, GENERIC_WRITE, 0, nullptr, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, nullptr))\n+            == INVALID_HANDLE_VALUE) {\n+          jio_snprintf(buffer, bufferSize, \"Failed to create minidump file (0x%x).\", GetLastError());\n+          success = false;\n+        }\n+      } else {\n+        \/\/ For now on Windows, there are no more checks that we can do\n+        warn = false;\n+      }\n@@ -1313,5 +1327,4 @@\n-    if (dumpFile == nullptr &&\n-       (dumpFile = CreateFile(buffer, GENERIC_WRITE, 0, nullptr, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, nullptr))\n-                 == INVALID_HANDLE_VALUE) {\n-      jio_snprintf(buffer, buffsz, \"Failed to create minidump file (0x%x).\", GetLastError());\n-      status = false;\n+    if (!check_only) {\n+      VMError::record_coredump_status(buffer, success);\n+    } else if (warn) {\n+      warning(\"CreateCoredumpOnCrash specified, but %s\", buffer);\n@@ -1320,1 +1333,0 @@\n-  VMError::record_coredump_status(buffer, status);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":36,"deletions":24,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -942,1 +942,1 @@\n-  static void check_dump_limit(char* buffer, size_t bufferSize);\n+  static void check_core_dump_prerequisites(char* buffer, size_t bufferSize, bool check_only = false);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+#include \"runtime\/globals_extension.hpp\"\n@@ -668,0 +669,5 @@\n+  if (!FLAG_IS_DEFAULT(CreateCoredumpOnCrash) && CreateCoredumpOnCrash) {\n+    char buffer[2*JVM_MAXPATHLEN];\n+    os::check_core_dump_prerequisites(buffer, sizeof(buffer), true);\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1699,1 +1699,1 @@\n-    os::check_dump_limit(buffer, sizeof(buffer));\n+    os::check_core_dump_prerequisites(buffer, sizeof(buffer));\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,0 +46,10 @@\n+    private static String ulimitString(int limit) {\n+        String string = \"ulimit -c \";\n+        if (limit != Integer.MAX_VALUE) {\n+            string += limit;\n+        } else {\n+            string += \"unlimited\";\n+        }\n+        return string+\";\";\n+    }\n+\n@@ -48,1 +58,1 @@\n-                                             .shouldNotHaveExitValue(0);\n+        .shouldNotHaveExitValue(0);\n@@ -53,1 +63,1 @@\n-                                                 .shouldNotHaveExitValue(0);\n+            .shouldNotHaveExitValue(0);\n@@ -55,3 +65,6 @@\n-            runTest(\"-XX:+CreateCoredumpOnCrash\").shouldNotContain(\"CreateCoredumpOnCrash turned off, no core file dumped\")\n-                                                 .shouldNotHaveExitValue(0);\n-        }\n+            OutputAnalyzer oa = new OutputAnalyzer(Runtime.getRuntime().exec(\"ulimit -c\"));\n+            oa.shouldHaveExitValue(0);\n+            if (!oa.contains(\"0\\n\")) {\n+                oa = runTest(\"-XX:+CreateCoredumpOnCrash\");\n+                oa.shouldContain(\"Core dump will be written.\");\n+                oa.shouldNotHaveExitValue(0);\n@@ -59,0 +72,13 @@\n+                oa = runTest(\"-XX:+CreateCoredumpOnCrash\", ulimitString(1024));\n+                oa.shouldContain(\"warning: CreateCoredumpOnCrash specified, but\");\n+                oa.shouldContain(\"To ensure a full core dump\");\n+                oa.shouldNotHaveExitValue(0);\n+\n+                oa = runTest(\"-XX:+CreateCoredumpOnCrash\", ulimitString(0));\n+                oa.shouldContain(\"warning: CreateCoredumpOnCrash specified, but\");\n+                oa.shouldContain(\"To enable core dumping\");\n+                oa.shouldNotHaveExitValue(0);\n+            } else {\n+                throw new Exception(\"ulimit is not set correctly, try 'ulimit -c unlimited' and re-run.\");\n+            }\n+        }\n@@ -60,0 +86,1 @@\n+\n@@ -61,4 +88,15 @@\n-        return new OutputAnalyzer(\n-            ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-Xmx128m\", \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\", option, Crasher.class.getName())\n-            .start());\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xmx128m\",\n+                                                                             \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\",\n+                                                                             option, Crasher.class.getName());\n+        return new OutputAnalyzer(pb.start());\n+    }\n+    public static OutputAnalyzer runTest(String option, String limit) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xmx128m\",\n+                                                                             \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\",\n+                                                                             option, new String(\"'\"+Crasher.class.getName()+\"'\"));\n+        String args = \"\";\n+        for (String s:pb.command()) {\n+            args += s+\" \";\n+        }\n+        String exec_cmd[] = {\"\/bin\/sh\", \"-c\", limit+args};\n+        return new OutputAnalyzer(Runtime.getRuntime().exec(exec_cmd));\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/CreateCoredumpOnCrash.java","additions":47,"deletions":9,"binary":false,"changes":56,"status":"modified"}]}