{"files":[{"patch":"@@ -107,1 +107,2 @@\n-void os::check_dump_limit(char* buffer, size_t bufferSize) {\n+void os::check_core_prerequisites(char* buffer, size_t bufferSize, bool check_only) {\n+  bool status = true;\n@@ -110,2 +111,1 @@\n-    VMError::record_coredump_status(buffer, false);\n-    return;\n+    status = false;\n@@ -114,10 +114,4 @@\n-  int n;\n-  struct rlimit rlim;\n-  bool success;\n-\n-  char core_path[PATH_MAX];\n-  n = get_core_path(core_path, PATH_MAX);\n-\n-  if (n <= 0) {\n-    jio_snprintf(buffer, bufferSize, \"core.%d (may not exist)\", current_process_id());\n-    success = true;\n+  if (status) {\n+    char core_path[PATH_MAX];\n+    if (os::get_core_path(core_path, PATH_MAX) <= 0) {\n+      jio_snprintf(buffer, bufferSize, \"core.%d (may not exist)\", os::current_process_id());\n@@ -125,3 +119,2 @@\n-  } else if (core_path[0] == '\"') { \/\/ redirect to user process\n-    jio_snprintf(buffer, bufferSize, \"Core dumps may be processed with %s\", core_path);\n-    success = true;\n+    } else if (core_path[0] == '\"') { \/\/ redirect to user process\n+      jio_snprintf(buffer, bufferSize, \"Core dumps may be processed with %s\", core_path);\n@@ -129,17 +122,18 @@\n-  } else if (getrlimit(RLIMIT_CORE, &rlim) != 0) {\n-    jio_snprintf(buffer, bufferSize, \"%s (may not exist)\", core_path);\n-    success = true;\n-  } else {\n-    switch(rlim.rlim_cur) {\n-      case RLIM_INFINITY:\n-        jio_snprintf(buffer, bufferSize, \"%s\", core_path);\n-        success = true;\n-        break;\n-      case 0:\n-        jio_snprintf(buffer, bufferSize, \"Core dumps have been disabled. To enable core dumping, try \\\"ulimit -c unlimited\\\" before starting Java again\");\n-        success = false;\n-        break;\n-      default:\n-        jio_snprintf(buffer, bufferSize, \"%s (max size \" UINT64_FORMAT \" k). To ensure a full core dump, try \\\"ulimit -c unlimited\\\" before starting Java again\", core_path, uint64_t(rlim.rlim_cur) \/ K);\n-        success = true;\n-        break;\n+    } else {\n+      struct rlimit rlim;\n+      if (getrlimit(RLIMIT_CORE, &rlim) != 0) {\n+        jio_snprintf(buffer, bufferSize, \"%s (may not exist)\", core_path);\n+      } else {\n+        switch(rlim.rlim_cur) {\n+          case RLIM_INFINITY:\n+            jio_snprintf(buffer, bufferSize, \"%s\", core_path);\n+            break;\n+          case 0:\n+            jio_snprintf(buffer, bufferSize, \"Core dumps have been disabled. To enable core dumping, try \\\"ulimit -c unlimited\\\" before starting Java again\");\n+            status = false;\n+            break;\n+          default:\n+            jio_snprintf(buffer, bufferSize, \"%s (max size \" UINT64_FORMAT \" k). To ensure a full core dump, try \\\"ulimit -c unlimited\\\" before starting Java again\", core_path, uint64_t(rlim.rlim_cur) \/ K);\n+            break;\n+        }\n+      }\n@@ -149,1 +143,1 @@\n-  VMError::record_coredump_status(buffer, success);\n+  VMError::record_coredump_status(buffer, status);\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":28,"deletions":34,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -1290,1 +1290,1 @@\n-void os::check_dump_limit(char* buffer, size_t buffsz) {\n+void os::check_core_prerequisites(char* buffer, size_t bufferSize, bool check_only) {\n@@ -1298,1 +1298,1 @@\n-  if (!os::win32::is_windows_server() && FLAG_IS_DEFAULT(CreateCoredumpOnCrash)) {\n+  if (status && FLAG_IS_DEFAULT(CreateCoredumpOnCrash) && !os::win32::is_windows_server()) {\n@@ -1313,1 +1313,1 @@\n-    if (dumpFile == nullptr &&\n+    if (check_only == false && dumpFile == nullptr &&\n@@ -1320,0 +1320,1 @@\n+\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -942,1 +942,1 @@\n-  static void check_dump_limit(char* buffer, size_t bufferSize);\n+  static void check_core_prerequisites(char* buffer, size_t bufferSize, bool check_only = false);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -666,0 +666,5 @@\n+  if (log_is_enabled(Info, os)) {\n+    char buffer[2*PATH_MAX];\n+    os::check_core_prerequisites(buffer, sizeof(buffer), true);\n+    log_info(os)(\"core dump info: %s\", buffer);\n+  }\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1699,1 +1699,1 @@\n-    os::check_dump_limit(buffer, sizeof(buffer));\n+    os::check_core_prerequisites(buffer, sizeof(buffer));\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,2 +55,4 @@\n-            runTest(\"-XX:+CreateCoredumpOnCrash\").shouldNotContain(\"CreateCoredumpOnCrash turned off, no core file dumped\")\n-                                                 .shouldNotHaveExitValue(0);\n+          OutputAnalyzer oa = runTest(\"-XX:+CreateCoredumpOnCrash\");\n+          oa.reportDiagnosticSummary();\n+          oa.shouldContain(\"core dump info\").shouldNotContain(\"CreateCoredumpOnCrash turned off, no core file dumped\").\n+                  shouldNotHaveExitValue(0);\n@@ -58,1 +60,0 @@\n-\n@@ -60,0 +61,1 @@\n+\n@@ -63,1 +65,1 @@\n-            \"-Xmx128m\", \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\", option, Crasher.class.getName())\n+            \"-Xmx128m\", \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\", \"-Xlog:os=info:stdout\", option, Crasher.class.getName())\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/CreateCoredumpOnCrash.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"}]}