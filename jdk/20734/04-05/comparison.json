{"files":[{"patch":"@@ -107,3 +107,3 @@\n-void os::check_core_prerequisites(char* buffer, size_t bufferSize, bool check_only) {\n-  bool status = true;\n-  if (!FLAG_IS_DEFAULT(CreateCoredumpOnCrash) && !CreateCoredumpOnCrash) {\n+void os::check_core_dump_prerequisites(char* buffer, size_t bufferSize, bool check_only) {\n+  bool will_dump_core = !(!FLAG_IS_DEFAULT(CreateCoredumpOnCrash) && !CreateCoredumpOnCrash);\n+  if (!will_dump_core) {\n@@ -111,4 +111,1 @@\n-    status = false;\n-  }\n-\n-  if (status) {\n+  } else {\n@@ -118,0 +115,4 @@\n+      if (!check_only) {\n+        \/\/ TODO: why is this true for general case?\n+        will_dump_core = true;\n+      }\n@@ -121,0 +122,1 @@\n+      will_dump_core = true;\n@@ -126,0 +128,4 @@\n+        if (!check_only) {\n+          \/\/ TODO: why is this true for general case?\n+          will_dump_core = true;\n+        }\n@@ -130,0 +136,1 @@\n+            will_dump_core = true;\n@@ -133,1 +140,1 @@\n-            status = false;\n+            will_dump_core = false;\n@@ -137,0 +144,5 @@\n+            if (!check_only) {\n+              will_dump_core = true;\n+            } else {\n+              will_dump_core = uint64_t(rlim.rlim_cur) > uint64_t(4*MaxHeapSize);\n+            }\n@@ -144,1 +156,5 @@\n-    VMError::record_coredump_status(buffer, status);\n+    VMError::record_coredump_status(buffer, will_dump_core);\n+  } else {\n+    if (!will_dump_core) {\n+      warning(\"CreateCoredumpOnCrash specified, but %s\", buffer);\n+    }\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":25,"deletions":9,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1289,4 +1289,4 @@\n-\/\/ Check if dump file can be created.\n-void os::check_core_prerequisites(char* buffer, size_t bufferSize, bool check_only) {\n-  bool status = true;\n-  if (!FLAG_IS_DEFAULT(CreateCoredumpOnCrash) && !CreateCoredumpOnCrash) {\n+\/\/ Check if core dump is active and if a core dump file can be created\n+void os::check_core_dump_prerequisites(char* buffer, size_t bufferSize, bool check_only) {\n+  bool will_dump_core = !(!FLAG_IS_DEFAULT(CreateCoredumpOnCrash) && !CreateCoredumpOnCrash);\n+  if (!will_dump_core) {\n@@ -1294,3 +1294,1 @@\n-    status = false;\n-  }\n-\n+  } else {\n@@ -1298,13 +1296,3 @@\n-  if (status && FLAG_IS_DEFAULT(CreateCoredumpOnCrash) && !os::win32::is_windows_server()) {\n-    jio_snprintf(buffer, bufferSize, \"Minidumps are not enabled by default on client versions of Windows\");\n-    status = false;\n-  }\n-#endif\n-\n-  if (status) {\n-    const char* cwd = get_current_directory(nullptr, 0);\n-    int pid = current_process_id();\n-    if (cwd != nullptr) {\n-      jio_snprintf(buffer, bufferSize, \"%s\\\\hs_err_pid%u.mdmp\", cwd, pid);\n-    } else {\n-      jio_snprintf(buffer, bufferSize, \".\\\\hs_err_pid%u.mdmp\", pid);\n+    will_dump_core = !(FLAG_IS_DEFAULT(CreateCoredumpOnCrash) && !os::win32::is_windows_server());\n+    if (!will_dump_core) {\n+      jio_snprintf(buffer, bufferSize, \"Minidumps are not enabled by default on client versions of Windows\");\n@@ -1312,0 +1300,9 @@\n+#endif\n+    if (will_dump_core) {\n+      const char* cwd = get_current_directory(nullptr, 0);\n+      int pid = current_process_id();\n+      if (cwd != nullptr) {\n+        jio_snprintf(buffer, bufferSize, \"%s\\\\hs_err_pid%u.mdmp\", cwd, pid);\n+      } else {\n+        jio_snprintf(buffer, bufferSize, \".\\\\hs_err_pid%u.mdmp\", pid);\n+      }\n@@ -1313,5 +1310,12 @@\n-    if (!check_only && dumpFile == nullptr &&\n-       (dumpFile = CreateFile(buffer, GENERIC_WRITE, 0, nullptr, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, nullptr))\n-                 == INVALID_HANDLE_VALUE) {\n-      jio_snprintf(buffer, bufferSize, \"Failed to create minidump file (0x%x).\", GetLastError());\n-      status = false;\n+      if (!check_only) {\n+        will_dump_core = !(dumpFile == nullptr &&\n+                           (dumpFile = CreateFile(buffer, GENERIC_WRITE, 0, nullptr, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, nullptr))\n+                             == INVALID_HANDLE_VALUE);\n+        if (!will_dump_core) {\n+          jio_snprintf(buffer, bufferSize, \"Failed to create minidump file (0x%x).\", GetLastError());\n+        }\n+      } else {\n+        \/\/ For check_only, which is done at the startup, we DO NOT want to create a file,\n+        \/\/ which would slow startup down, so simply assume here that we can do it\n+        will_dump_core = true;\n+      }\n@@ -1322,1 +1326,6 @@\n-    VMError::record_coredump_status(buffer, status);\n+    VMError::record_coredump_status(buffer, will_dump_core);\n+  } else {\n+    if (!will_dump_core) {\n+      \/\/ The code logic is provided, but currently there is no path to get here on Windows\n+      warning(\"CreateCoredumpOnCrash specified, but %s\", buffer);\n+    }\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":35,"deletions":26,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -942,1 +942,1 @@\n-  static void check_core_prerequisites(char* buffer, size_t bufferSize, bool check_only = false);\n+  static void check_core_dump_prerequisites(char* buffer, size_t bufferSize, bool check_only = false);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+#include \"runtime\/globals_extension.hpp\"\n@@ -666,1 +667,2 @@\n-  if (log_is_enabled(Info, os)) {\n+\n+  if (!FLAG_IS_DEFAULT(CreateCoredumpOnCrash) && CreateCoredumpOnCrash) {\n@@ -668,2 +670,1 @@\n-    os::check_core_prerequisites(buffer, sizeof(buffer), true);\n-    log_info(os)(\"core dump info: %s\", buffer);\n+    os::check_core_dump_prerequisites(buffer, sizeof(buffer), true);\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1699,1 +1699,1 @@\n-    os::check_core_prerequisites(buffer, sizeof(buffer));\n+    os::check_core_dump_prerequisites(buffer, sizeof(buffer));\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}