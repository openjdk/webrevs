{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,0 +69,7 @@\n+    \/\/ True if the channel's socket has been forced into non-blocking mode\n+    \/\/ by a virtual thread. It cannot be reset. When the channel is in\n+    \/\/ blocking mode and the channel's socket is in non-blocking mode then\n+    \/\/ operations that don't complete immediately will poll the socket and\n+    \/\/ preserve the semantics of blocking operations.\n+    private volatile boolean forcedNonBlocking;\n+\n@@ -82,1 +89,0 @@\n-        IOUtil.configureBlocking(fd, false);\n@@ -87,0 +93,24 @@\n+    \/**\n+     * Checks that the channel is open.\n+     *\n+     * @throws ClosedChannelException if channel is closed (or closing)\n+     *\/\n+    private void ensureOpen() throws ClosedChannelException {\n+        if (!isOpen())\n+            throw new ClosedChannelException();\n+    }\n+\n+    \/**\n+     * Ensures that the socket is configured non-blocking when on a virtual thread.\n+     *\/\n+    private void configureSocketNonBlockingIfVirtualThread() throws IOException {\n+        assert writeLock.isHeldByCurrentThread();\n+        if (!forcedNonBlocking && Thread.currentThread().isVirtual()) {\n+            synchronized (stateLock) {\n+                ensureOpen();\n+                IOUtil.configureBlocking(fd, false);\n+                forcedNonBlocking = true;\n+            }\n+        }\n+    }\n+\n@@ -186,3 +216,5 @@\n-                if (!isOpen())\n-                    throw new ClosedChannelException();\n-                IOUtil.configureBlocking(fd, block);\n+                ensureOpen();\n+                \/\/ do nothing if virtual thread has forced the socket to be non-blocking\n+                if (!forcedNonBlocking) {\n+                    IOUtil.configureBlocking(fd, block);\n+                }\n@@ -244,2 +276,1 @@\n-            if (!isOpen())\n-                throw new ClosedChannelException();\n+            ensureOpen();\n@@ -282,0 +313,1 @@\n+                configureSocketNonBlockingIfVirtualThread();\n@@ -309,0 +341,1 @@\n+                configureSocketNonBlockingIfVirtualThread();\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/SinkChannelImpl.java","additions":40,"deletions":7,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,0 +69,7 @@\n+    \/\/ True if the channel's socket has been forced into non-blocking mode\n+    \/\/ by a virtual thread. It cannot be reset. When the channel is in\n+    \/\/ blocking mode and the channel's socket is in non-blocking mode then\n+    \/\/ operations that don't complete immediately will poll the socket and\n+    \/\/ preserve the semantics of blocking operations.\n+    private volatile boolean forcedNonBlocking;\n+\n@@ -82,1 +89,0 @@\n-        IOUtil.configureBlocking(fd, false);\n@@ -87,0 +93,24 @@\n+    \/**\n+     * Checks that the channel is open.\n+     *\n+     * @throws ClosedChannelException if channel is closed (or closing)\n+     *\/\n+    private void ensureOpen() throws ClosedChannelException {\n+        if (!isOpen())\n+            throw new ClosedChannelException();\n+    }\n+\n+    \/**\n+     * Ensures that the socket is configured non-blocking when on a virtual thread.\n+     *\/\n+    private void configureSocketNonBlockingIfVirtualThread() throws IOException {\n+        assert readLock.isHeldByCurrentThread();\n+        if (!forcedNonBlocking && Thread.currentThread().isVirtual()) {\n+            synchronized (stateLock) {\n+                ensureOpen();\n+                IOUtil.configureBlocking(fd, false);\n+                forcedNonBlocking = true;\n+            }\n+        }\n+    }\n+\n@@ -186,3 +216,5 @@\n-                if (!isOpen())\n-                    throw new ClosedChannelException();\n-                IOUtil.configureBlocking(fd, block);\n+                ensureOpen();\n+                \/\/ do nothing if virtual thread has forced the socket to be non-blocking\n+                if (!forcedNonBlocking) {\n+                    IOUtil.configureBlocking(fd, block);\n+                }\n@@ -244,2 +276,1 @@\n-            if (!isOpen())\n-                throw new ClosedChannelException();\n+            ensureOpen();\n@@ -282,0 +313,1 @@\n+                configureSocketNonBlockingIfVirtualThread();\n@@ -309,0 +341,1 @@\n+                configureSocketNonBlockingIfVirtualThread();\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/SourceChannelImpl.java","additions":40,"deletions":7,"binary":false,"changes":47,"status":"modified"}]}