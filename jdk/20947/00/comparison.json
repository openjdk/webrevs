{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,2 +251,1 @@\n-    page->verify_remset_cleared_current();\n-    page->verify_remset_cleared_previous();\n+    page->remset_delete();\n@@ -264,0 +263,1 @@\n+    _page_table.remove(page);\n@@ -265,3 +265,1 @@\n-      \/\/ The remset of pages should be clean when installed into the page\n-      \/\/ cache.\n-      page->remset_clear();\n+      page->remset_delete();\n@@ -269,1 +267,0 @@\n-    _page_table.remove(page);\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.cpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,2 +81,2 @@\n-void ZPage::remset_initialize() {\n-  \/\/ Remsets should only be initialized once and only for old pages.\n+void ZPage::remset_alloc() {\n+  \/\/ Remsets should only be allocated\/initialized once and only for old pages.\n@@ -89,13 +89,2 @@\n-void ZPage::remset_initialize_or_verify_cleared() {\n-  assert(is_old(), \"Only old pages need a remset\");\n-\n-  if (_remembered_set.is_initialized()) {\n-    verify_remset_cleared_current();\n-    verify_remset_cleared_previous();\n-  } else {\n-    remset_initialize();\n-  }\n-}\n-\n-void ZPage::remset_clear() {\n-  _remembered_set.clear_all();\n+void ZPage::remset_delete() {\n+  _remembered_set.delete_all();\n@@ -126,1 +115,0 @@\n-  _remembered_set.resize(size());\n@@ -219,4 +207,0 @@\n-void ZPage::clear_remset_current() {\n-  _remembered_set.clear_current();\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zPage.cpp","additions":5,"deletions":21,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -158,3 +158,2 @@\n-  void remset_initialize();\n-  void remset_initialize_or_verify_cleared();\n-  void remset_clear();\n+  void remset_alloc();\n+  void remset_delete();\n@@ -185,1 +184,0 @@\n-  void clear_remset_current();\n","filename":"src\/hotspot\/share\/gc\/z\/zPage.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -736,1 +736,1 @@\n-    page->remset_initialize_or_verify_cleared();\n+    page->remset_alloc();\n","filename":"src\/hotspot\/share\/gc\/z\/zPageAllocator.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -851,1 +851,1 @@\n-      to_page->remset_initialize();\n+      to_page->remset_alloc();\n@@ -946,1 +946,1 @@\n-  void clear_remset_before_reuse(ZPage* page, bool in_place) {\n+  void clear_remset_before_in_place_reuse(ZPage* page) {\n@@ -952,23 +952,3 @@\n-    if (in_place) {\n-      \/\/ Clear 'previous' remset bits. For in-place relocated pages, the previous\n-      \/\/ remset bits are always used, even when active_remset_is_current().\n-      page->clear_remset_previous();\n-\n-      return;\n-    }\n-\n-    \/\/ Normal relocate\n-\n-    \/\/ Clear active remset bits\n-    if (active_remset_is_current()) {\n-      page->clear_remset_current();\n-    } else {\n-      page->clear_remset_previous();\n-    }\n-\n-    \/\/ Verify that inactive remset bits are all cleared\n-    if (active_remset_is_current()) {\n-      page->verify_remset_cleared_previous();\n-    } else {\n-      page->verify_remset_cleared_current();\n-    }\n+    \/\/ Clear 'previous' remset bits. For in-place relocated pages, the previous\n+    \/\/ remset bits are always used, even when active_remset_is_current().\n+    page->clear_remset_previous();\n@@ -1020,1 +1000,1 @@\n-      clear_remset_before_reuse(page, true \/* in_place *\/);\n+      clear_remset_before_in_place_reuse(page);\n@@ -1032,5 +1012,0 @@\n-      \/\/ Ensure that all remset bits are cleared\n-      \/\/ Note: cleared after detach_page, when we know that\n-      \/\/ the young generation isn't scanning the remset.\n-      clear_remset_before_reuse(page, false \/* in_place *\/);\n-\n@@ -1295,1 +1270,1 @@\n-        new_page->remset_initialize();\n+        new_page->remset_alloc();\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocate.cpp","additions":7,"deletions":32,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,12 +58,4 @@\n-void ZRememberedSet::resize(size_t page_size) {\n-  \/\/ The bitmaps only need to be resized if remset has been\n-  \/\/ initialized, and hence the bitmaps have been initialized.\n-  if (is_initialized()) {\n-    const BitMap::idx_t size_in_bits = to_bit_size(page_size);\n-\n-    \/\/ The bitmaps need to be cleared when free, but since this function is\n-    \/\/ only used for shrinking the clear argument is correct but not crucial.\n-    assert(size_in_bits <= _bitmap[0].size(), \"Only used for shrinking\");\n-    _bitmap[0].resize(size_in_bits, true \/* clear *\/);\n-    _bitmap[1].resize(size_in_bits, true \/* clear *\/);\n-  }\n+void ZRememberedSet::delete_all() {\n+  assert(is_initialized(), \"precondition\");\n+  _bitmap[0].resize(0);\n+  _bitmap[1].resize(0);\n@@ -80,9 +72,0 @@\n-void ZRememberedSet::clear_all() {\n-  _bitmap[0].clear_large();\n-  _bitmap[1].clear_large();\n-}\n-\n-void ZRememberedSet::clear_current() {\n-  current()->clear_large();\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zRememberedSet.cpp","additions":5,"deletions":22,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,2 +117,1 @@\n-\n-  void resize(size_t page_size);\n+  void delete_all();\n@@ -136,2 +135,0 @@\n-  void clear_all();\n-  void clear_current();\n","filename":"src\/hotspot\/share\/gc\/z\/zRememberedSet.hpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"}]}