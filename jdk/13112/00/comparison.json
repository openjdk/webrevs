{"files":[{"patch":"@@ -2378,0 +2378,4 @@\n+const int Matcher::superword_max_vector_size(const BasicType bt) {\n+  return Matcher::max_vector_size(bt);\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1077,0 +1077,4 @@\n+const int Matcher::superword_max_vector_size(const BasicType bt) {\n+  return Matcher::max_vector_size(bt);\n+}\n+\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2242,0 +2242,4 @@\n+const int Matcher::superword_max_vector_size(const BasicType bt) {\n+  return Matcher::max_vector_size(bt);\n+}\n+\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1948,0 +1948,4 @@\n+const int Matcher::superword_max_vector_size(const BasicType bt) {\n+  return Matcher::max_vector_size(bt);\n+}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1574,0 +1574,4 @@\n+const int Matcher::superword_max_vector_size(const BasicType bt) {\n+  return Matcher::max_vector_size(bt);\n+}\n+\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1315,21 +1315,0 @@\n-#if defined(COMPILER2)\n-  if (FLAG_IS_DEFAULT(SuperWordMaxVectorSize)) {\n-    if (FLAG_IS_DEFAULT(UseAVX) && UseAVX > 2 &&\n-        is_intel_skylake() && _stepping >= 5) {\n-      \/\/ Limit auto vectorization to 256 bit (32 byte) by default on Cascade Lake\n-      FLAG_SET_DEFAULT(SuperWordMaxVectorSize, MIN2(MaxVectorSize, (intx)32));\n-    } else {\n-      FLAG_SET_DEFAULT(SuperWordMaxVectorSize, MaxVectorSize);\n-    }\n-  } else {\n-    if (SuperWordMaxVectorSize > MaxVectorSize) {\n-      warning(\"SuperWordMaxVectorSize cannot be greater than MaxVectorSize %i\", (int) MaxVectorSize);\n-      FLAG_SET_DEFAULT(SuperWordMaxVectorSize, MaxVectorSize);\n-    }\n-    if (!is_power_of_2(SuperWordMaxVectorSize)) {\n-      warning(\"SuperWordMaxVectorSize must be a power of 2, setting to MaxVectorSize: %i\", (int) MaxVectorSize);\n-      FLAG_SET_DEFAULT(SuperWordMaxVectorSize, MaxVectorSize);\n-    }\n-  }\n-#endif\n-\n@@ -2097,0 +2076,11 @@\n+#ifdef COMPILER2\n+\/\/ Determine if it's running on Cascade Lake using default options.\n+bool VM_Version::is_default_intel_cascade_lake() {\n+  return FLAG_IS_DEFAULT(UseAVX) &&\n+         FLAG_IS_DEFAULT(MaxVectorSize) &&\n+         UseAVX > 2 &&\n+         is_intel_skylake() &&\n+         _stepping >= 5;\n+}\n+#endif\n+\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":11,"deletions":21,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -714,0 +714,5 @@\n+#ifdef COMPILER2\n+  \/\/ Determine if it's running on Cascade Lake using default options.\n+  static bool is_default_intel_cascade_lake();\n+#endif\n+\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2299,0 +2299,9 @@\n+const int Matcher::superword_max_vector_size(const BasicType bt) {\n+  \/\/ Limit the max vector size for auto vectorization to 256 bits (32 bytes)\n+  \/\/ by default on Cascade Lake\n+  if (VM_Version::is_default_intel_cascade_lake()) {\n+    return MIN2(Matcher::max_vector_size(bt), 32 \/ type2aelembytes(bt));\n+  }\n+  return Matcher::max_vector_size(bt);\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -85,5 +85,0 @@\n-  product(intx, SuperWordMaxVectorSize, 64, DIAGNOSTIC,                     \\\n-          \"Vector size limit in bytes for superword, \"                      \\\n-          \"superword vector size limit in bytes\")                           \\\n-          range(0, max_jint)                                                \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -354,0 +354,2 @@\n+  \/\/ Limits on max vector size (number of elements) for auto-vectorization.\n+  static const int superword_max_vector_size(const BasicType bt);\n","filename":"src\/hotspot\/share\/opto\/matcher.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -201,10 +201,0 @@\n-\/\/------------------------------max vector size------------------------------\n-int SuperWord::max_vector_size(BasicType bt) {\n-  int max_vector = Matcher::max_vector_size(bt);\n-  int sw_max_vector_limit = SuperWordMaxVectorSize \/ type2aelembytes(bt);\n-  if (max_vector > sw_max_vector_limit) {\n-    max_vector = sw_max_vector_limit;\n-  }\n-  return max_vector;\n-}\n-\n@@ -229,1 +219,1 @@\n-  int max_vector = max_vector_size(T_BYTE);\n+  int max_vector = Matcher::superword_max_vector_size(T_BYTE);\n@@ -364,1 +354,1 @@\n-      int cur_max_vector = max_vector_size(bt);\n+      int cur_max_vector = Matcher::superword_max_vector_size(bt);\n@@ -1057,1 +1047,1 @@\n-      vw = MIN2(max_vector_size(btype)*type2aelembytes(btype), vw * 2);\n+      vw = MIN2(Matcher::superword_max_vector_size(btype)*type2aelembytes(btype), vw * 2);\n@@ -1063,1 +1053,1 @@\n-  if (vectsize < max_vector_size(btype)) {\n+  if (vectsize < Matcher::superword_max_vector_size(btype)) {\n@@ -1257,2 +1247,2 @@\n-  if (max_vector_size(bt1) < 2 ||\n-      (longer_bt != T_ILLEGAL && max_vector_size(longer_bt) < 2)) {\n+  if (Matcher::superword_max_vector_size(bt1) < 2 ||\n+      (longer_bt != T_ILLEGAL && Matcher::superword_max_vector_size(longer_bt) < 2)) {\n@@ -3672,1 +3662,1 @@\n-  int max = max_vector_size(vt);\n+  int max = Matcher::superword_max_vector_size(vt);\n@@ -3675,1 +3665,1 @@\n-  return max < 2 ? max_vector_size(bt) : max;\n+  return max < 2 ? Matcher::superword_max_vector_size(bt) : max;\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":8,"deletions":18,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -332,2 +332,0 @@\n-  int max_vector_size(BasicType bt);\n-\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -301,3 +301,4 @@\n-bool VectorNode::vector_size_supported(BasicType bt, uint vlen) {\n-  return (Matcher::vector_size_supported(bt, vlen) &&\n-          (vlen * type2aelembytes(bt) <= (uint)SuperWordMaxVectorSize));\n+\/\/ Limits on vector size (number of elements) for auto-vectorization.\n+bool VectorNode::vector_size_supported_superword(const BasicType bt, int size) {\n+  return Matcher::superword_max_vector_size(bt) >= size &&\n+         Matcher::min_vector_size(bt) <= size;\n@@ -311,1 +312,1 @@\n-      vector_size_supported(bt, vlen)) {\n+      vector_size_supported_superword(bt, vlen)) {\n@@ -1382,1 +1383,1 @@\n-      VectorNode::vector_size_supported(dst_type, vlen)) {\n+      VectorNode::vector_size_supported_superword(dst_type, vlen)) {\n@@ -1476,1 +1477,1 @@\n-      VectorNode::vector_size_supported(bt, vlen)) {\n+      VectorNode::vector_size_supported_superword(bt, vlen)) {\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -95,1 +95,3 @@\n-  static bool vector_size_supported(BasicType bt, uint vlen);\n+\n+  \/\/ Limits on vector size (number of elements) for auto-vectorization.\n+  static bool vector_size_supported_superword(const BasicType bt, int size);\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}