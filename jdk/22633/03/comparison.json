{"files":[{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2012 SAP SE. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024 SAP SE. All rights reserved.\n@@ -29,2 +29,1 @@\n-import java.nio.channels.spi.AsynchronousChannelProvider;\n-import sun.nio.ch.Pollset;\n+import java.io.FileDescriptor;\n@@ -32,2 +31,1 @@\n-import java.util.HashSet;\n-import java.util.Iterator;\n+import java.nio.channels.spi.AsynchronousChannelProvider;\n@@ -35,1 +33,0 @@\n-import java.util.concurrent.RejectedExecutionException;\n@@ -38,0 +35,5 @@\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import sun.nio.ch.IOUtil;\n+import sun.nio.ch.Pollset;\n@@ -144,0 +146,2 @@\n+            \/\/ make the reading part of the socket nonblocking, so the drain (drain_all) method works\n+            IOUtil.configureBlocking(IOUtil.newFD(sv[0]), false);\n@@ -274,14 +278,11 @@\n-        synchronized (controlQueue) {\n-            \/\/ On Aix it is only possible to set the event\n-            \/\/ bits on the first call of pollsetCtl. Later\n-            \/\/ calls only add bits, but cannot remove them.\n-            \/\/ Therefore, we always remove the file\n-            \/\/ descriptor ignoring the error and then add it.\n-            Iterator<ControlEvent> iter = controlQueue.iterator();\n-            while (iter.hasNext()) {\n-                ControlEvent ev = iter.next();\n-                Pollset.pollsetCtl(pollset, Pollset.PS_DELETE, ev.fd(), 0);\n-                if (!ev.removeOnly()) {\n-                    ev.setError(Pollset.pollsetCtl(pollset, Pollset.PS_MOD, ev.fd(), ev.events()));\n-                }\n-                iter.remove();\n+        \/\/ On Aix it is only possible to set the event\n+        \/\/ bits on the first call of pollsetCtl. Later\n+        \/\/ calls only add bits, but cannot remove them.\n+        \/\/ Therefore, we always remove the file\n+        \/\/ descriptor ignoring the error and then add it.\n+        Iterator<ControlEvent> iter = controlQueue.iterator();\n+        while (iter.hasNext()) {\n+            ControlEvent ev = iter.next();\n+            Pollset.pollsetCtl(pollset, Pollset.PS_DELETE, ev.fd(), 0);\n+            if (!ev.removeOnly()) {\n+                ev.setError(Pollset.pollsetCtl(pollset, Pollset.PS_MOD, ev.fd(), ev.events()));\n@@ -289,1 +290,1 @@\n-            controlQueue.notifyAll();\n+            iter.remove();\n@@ -291,0 +292,1 @@\n+        controlQueue.notifyAll();\n@@ -309,1 +311,2 @@\n-                        n = Pollset.pollsetPoll(pollset, address,\n+                        int m;\n+                        m = n = Pollset.pollsetPoll(pollset, address,\n@@ -311,0 +314,12 @@\n+                        while (m-- > 0) {\n+                            long eventAddress = Pollset.getEvent(address, m);\n+                            int fd = Pollset.getDescriptor(eventAddress);\n+\n+                            \/\/ To emulate one shot semantic we need to remove\n+                            \/\/ the file descriptor here.\n+                            if (fd != sp[0] && fd != ctlSp[0]) {\n+                                synchronized (controlQueue) {\n+                                    Pollset.pollsetCtl(pollset, Pollset.PS_DELETE, fd, 0);\n+                                }\n+                            }\n+                        }\n@@ -326,8 +341,0 @@\n-                            \/\/ To emulate one shot semantic we need to remove\n-                            \/\/ the file descriptor here.\n-                            if (fd != sp[0] && fd != ctlSp[0]) {\n-                                synchronized (controlQueue) {\n-                                    Pollset.pollsetCtl(pollset, Pollset.PS_DELETE, fd, 0);\n-                                }\n-                            }\n-\n@@ -353,1 +360,1 @@\n-                                    Pollset.drain1(ctlSp[0]);\n+                                    IOUtil.drain(ctlSp[0]);\n","filename":"src\/java.base\/aix\/classes\/sun\/nio\/ch\/AixPollPort.java","additions":39,"deletions":32,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -588,2 +588,0 @@\n-java\/nio\/channels\/AsynchronousSocketChannel\/StressLoopback.java 8211851 aix-ppc64\n-\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}