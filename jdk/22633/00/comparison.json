{"files":[{"patch":"@@ -144,0 +144,2 @@\n+            \/\/ make the reading part of the socket nonblocking, so the drain (drain_all) method works\n+            Pollset.configureBlocking(sv[0], false);\n@@ -306,1 +308,1 @@\n-                    int n;\n+                    int n, m;\n@@ -309,1 +311,1 @@\n-                        n = Pollset.pollsetPoll(pollset, address,\n+                        m = n = Pollset.pollsetPoll(pollset, address,\n@@ -311,0 +313,12 @@\n+                        while (m-- > 0) {\n+                            long eventAddress = Pollset.getEvent(address, m);\n+                            int fd = Pollset.getDescriptor(eventAddress);\n+\n+                            \/\/ To emulate one shot semantic we need to remove\n+                            \/\/ the file descriptor here.\n+                            if (fd != sp[0] && fd != ctlSp[0]) {\n+                                synchronized (controlQueue) {\n+                                    Pollset.pollsetCtl(pollset, Pollset.PS_DELETE, fd, 0);\n+                                }\n+                            }\n+                        }\n@@ -326,8 +340,0 @@\n-                            \/\/ To emulate one shot semantic we need to remove\n-                            \/\/ the file descriptor here.\n-                            if (fd != sp[0] && fd != ctlSp[0]) {\n-                                synchronized (controlQueue) {\n-                                    Pollset.pollsetCtl(pollset, Pollset.PS_DELETE, fd, 0);\n-                                }\n-                            }\n-\n@@ -353,1 +359,1 @@\n-                                    Pollset.drain1(ctlSp[0]);\n+                                    Pollset.drain(ctlSp[0]);\n","filename":"src\/java.base\/aix\/classes\/sun\/nio\/ch\/AixPollPort.java","additions":17,"deletions":11,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -123,0 +123,1 @@\n+    public static native void drain(int fd) throws IOException;\n@@ -124,0 +125,1 @@\n+    public static native void configureBlocking(int fd, boolean blocking) throws IOException;\n","filename":"src\/java.base\/aix\/classes\/sun\/nio\/ch\/Pollset.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -164,0 +164,17 @@\n+JNIEXPORT void JNICALL\n+Java_sun_nio_ch_Pollset_drain(JNIEnv *env, jclass cl, jint fd)\n+{\n+    char buf[16];\n+\n+    for (;;) {\n+        int n = read(fd, buf, sizeof(buf));\n+        if ((n < 0) && (errno != EAGAIN && errno != EWOULDBLOCK)) {\n+            JNU_ThrowIOExceptionWithLastError(env, \"Drain\");\n+        }\n+        if (n != (int)sizeof(buf)) {\n+            break;\n+        }\n+    }\n+    return;\n+}\n+\n@@ -169,0 +186,12 @@\n+\n+JNIEXPORT void JNICALL\n+Java_sun_nio_ch_Pollset_configureBlocking(JNIEnv *env, jclass c, jint fd, jboolean blocking) {\n+    int flags = fcntl(fd, F_GETFL);\n+    int newflags = blocking ? (flags & ~O_NONBLOCK) : (flags | O_NONBLOCK);\n+\n+    if (flags != newflags) {\n+        if (fcntl(fd, F_SETFL, newflags) < 0) {\n+            JNU_ThrowIOExceptionWithLastError(env, \"Configure blocking failed\");\n+        }\n+    }\n+}\n","filename":"src\/java.base\/aix\/native\/libnio\/ch\/Pollset.c","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -588,2 +588,0 @@\n-java\/nio\/channels\/AsynchronousSocketChannel\/StressLoopback.java 8211851 aix-ppc64\n-\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}