{"files":[{"patch":"@@ -29,3 +29,0 @@\n-import java.nio.channels.spi.AsynchronousChannelProvider;\n-import sun.nio.ch.Pollset;\n-import sun.nio.ch.IOUtil;\n@@ -34,2 +31,1 @@\n-import java.util.HashSet;\n-import java.util.Iterator;\n+import java.nio.channels.spi.AsynchronousChannelProvider;\n@@ -37,1 +33,0 @@\n-import java.util.concurrent.RejectedExecutionException;\n@@ -40,0 +35,5 @@\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import sun.nio.ch.IOUtil;\n+import sun.nio.ch.Pollset;\n@@ -278,14 +278,11 @@\n-        synchronized (controlQueue) {\n-            \/\/ On Aix it is only possible to set the event\n-            \/\/ bits on the first call of pollsetCtl. Later\n-            \/\/ calls only add bits, but cannot remove them.\n-            \/\/ Therefore, we always remove the file\n-            \/\/ descriptor ignoring the error and then add it.\n-            Iterator<ControlEvent> iter = controlQueue.iterator();\n-            while (iter.hasNext()) {\n-                ControlEvent ev = iter.next();\n-                Pollset.pollsetCtl(pollset, Pollset.PS_DELETE, ev.fd(), 0);\n-                if (!ev.removeOnly()) {\n-                    ev.setError(Pollset.pollsetCtl(pollset, Pollset.PS_MOD, ev.fd(), ev.events()));\n-                }\n-                iter.remove();\n+        \/\/ On Aix it is only possible to set the event\n+        \/\/ bits on the first call of pollsetCtl. Later\n+        \/\/ calls only add bits, but cannot remove them.\n+        \/\/ Therefore, we always remove the file\n+        \/\/ descriptor ignoring the error and then add it.\n+        Iterator<ControlEvent> iter = controlQueue.iterator();\n+        while (iter.hasNext()) {\n+            ControlEvent ev = iter.next();\n+            Pollset.pollsetCtl(pollset, Pollset.PS_DELETE, ev.fd(), 0);\n+            if (!ev.removeOnly()) {\n+                ev.setError(Pollset.pollsetCtl(pollset, Pollset.PS_MOD, ev.fd(), ev.events()));\n@@ -293,1 +290,1 @@\n-            controlQueue.notifyAll();\n+            iter.remove();\n@@ -295,0 +292,1 @@\n+        controlQueue.notifyAll();\n@@ -310,1 +308,1 @@\n-                    int n, m;\n+                    int n;\n@@ -313,0 +311,1 @@\n+                        int m;\n@@ -361,1 +360,1 @@\n-                                    Pollset.drain(ctlSp[0]);\n+                                    IOUtil.drain(ctlSp[0]);\n","filename":"src\/java.base\/aix\/classes\/sun\/nio\/ch\/AixPollPort.java","additions":22,"deletions":23,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -123,1 +123,0 @@\n-    public static native void drain(int fd) throws IOException;\n","filename":"src\/java.base\/aix\/classes\/sun\/nio\/ch\/Pollset.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -164,17 +164,0 @@\n-JNIEXPORT void JNICALL\n-Java_sun_nio_ch_Pollset_drain(JNIEnv *env, jclass cl, jint fd)\n-{\n-    char buf[16];\n-\n-    for (;;) {\n-        int n = read(fd, buf, sizeof(buf));\n-        if ((n < 0) && (errno != EAGAIN && errno != EWOULDBLOCK)) {\n-            JNU_ThrowIOExceptionWithLastError(env, \"Drain\");\n-        }\n-        if (n != (int)sizeof(buf)) {\n-            break;\n-        }\n-    }\n-    return;\n-}\n-\n","filename":"src\/java.base\/aix\/native\/libnio\/ch\/Pollset.c","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"}]}