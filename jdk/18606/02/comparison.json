{"files":[{"patch":"@@ -109,1 +109,0 @@\n-import com.sun.tools.javac.util.JCDiagnostic;\n@@ -499,1 +498,0 @@\n-            boolean primitiveSelector = seltype.isPrimitive();\n@@ -505,0 +503,3 @@\n+            if (target.usesReferenceOnlySelectorTypes())\n+                resolvedSelectorType = syms.objectType;\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -229,0 +229,6 @@\n+\n+    \/** Releases prior to JDK 23 expect a less precise SwitchBootstraps.typeSwitch signature on the selectorType\n+     *\/\n+    public boolean usesReferenceOnlySelectorTypes() {\n+        return compareTo(Target.JDK1_23) < 0;\n+    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Target.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8328747\n+ * @summary WrongMethodTypeException with pattern matching on switch on sealed classes\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jdeps\/com.sun.tools.javap\n+ * @build toolbox.ToolBox toolbox.JavapTask\n+ * @compile T8328747.java\n+ * @run main T8328747\n+ *\/\n+\n+import toolbox.*;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class T8328747 extends TestRunner  {\n+    private ToolBox tb;\n+\n+    public static void main(String... args) throws Exception {\n+        new T8328747().runTests();\n+    }\n+\n+    T8328747() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public void runTests() throws Exception {\n+        runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    @Test\n+    public void test(Path base) throws Exception {\n+        Path current = base.resolve(\".\");\n+        Path src = current.resolve(\"src\");\n+        Path classes = current.resolve(\"classes\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                package test;\n+                public class Test {\n+                   public static void main(String[] args) {\n+                     f(new P());\n+                     f(new O());\n+                   }\n+\n+                   private static void f(I info) {\n+                     switch (info) {\n+                       case P p -> System.err.println(p);\n+                       case O o -> System.err.println(o);\n+                     }\n+                   }\n+\n+                   static sealed interface I permits P, O {}\n+                   private abstract static class A {}\n+                   static final class P extends A implements I {}\n+                   static final class O extends A implements I {}\n+                }\n+                \"\"\");\n+\n+        Files.createDirectories(classes);\n+\n+        {\/\/with --release:\n+            new JavacTask(tb)\n+                    .options(\"--release\", \"21\")\n+                    .outdir(classes)\n+                    .files(tb.findJavaFiles(src))\n+                    .run(Task.Expect.SUCCESS)\n+                    .writeAll();\n+\n+            String javapOut = new JavapTask(tb)\n+                    .options(\"-v\")\n+                    .classpath(classes.toString())\n+                    .classes(\"test.Test\")\n+                    .run()\n+                    .getOutput(Task.OutputKind.DIRECT);\n+\n+            if (!javapOut.contains(\"#25 = InvokeDynamic      #0:#26         \/\/ #0:typeSwitch:(Ljava\/lang\/Object;I)I\"))\n+                throw new AssertionError(\"typeSwitch for a version less than 23 should accept a static type of java.lang.Object\");\n+        }\n+\n+        {\/\/without:\n+            new JavacTask(tb)\n+                    .outdir(classes)\n+                    .files(tb.findJavaFiles(src))\n+                    .run(Task.Expect.SUCCESS)\n+                    .writeAll();\n+\n+            String javapOut = new JavapTask(tb)\n+                    .options(\"-v\")\n+                    .classpath(classes.toString())\n+                    .classes(\"test.Test\")\n+                    .run()\n+                    .getOutput(Task.OutputKind.DIRECT);\n+\n+            if (!javapOut.contains(\"#25 = InvokeDynamic      #0:#26         \/\/ #0:typeSwitch:(Ltest\/Test$I;I)I\"))\n+                throw new AssertionError(\"typeSwitch from version 23 and beyond should accept a precise selector type\");\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/T8328747.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"}]}