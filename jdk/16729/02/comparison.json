{"files":[{"patch":"@@ -300,2 +300,1 @@\n-DirectiveSet::DirectiveSet(CompilerDirectives* d) :_inlinematchers(nullptr), _directive(d) {\n-  _ideal_phase_name_mask = 0;\n+DirectiveSet::DirectiveSet(CompilerDirectives* d) :_inlinematchers(nullptr), _directive(d), _ideal_phase_name_set(PHASE_NUM_TYPES, mtCompiler) {\n@@ -437,2 +436,1 @@\n-        uint64_t mask = 0;\n-        PhaseNameValidator validator(option, mask);\n+        PhaseNameValidator validator(option);\n@@ -440,2 +438,2 @@\n-          assert(mask != 0, \"Must be set\");\n-          set.cloned()->_ideal_phase_name_mask = mask;\n+          assert(!validator.phase_name_set().is_empty(), \"Phase name set must be non-empty\");\n+          set.cloned()->set_ideal_phase_name_set(validator);\n@@ -624,1 +622,1 @@\n-  set->_ideal_phase_name_mask = src->_ideal_phase_name_mask;\n+  set->_ideal_phase_name_set.set_from(src->_ideal_phase_name_set);\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.cpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+#include \"opto\/phasetype.hpp\"\n+#include \"utilities\/bitMap.hpp\"\n@@ -131,1 +133,1 @@\n-  uint64_t _ideal_phase_name_mask;\n+  CHeapBitMap _ideal_phase_name_set;\n@@ -200,2 +202,6 @@\n-  void set_ideal_phase_mask(uint64_t mask) { _ideal_phase_name_mask = mask; };\n-  uint64_t ideal_phase_mask() { return _ideal_phase_name_mask; };\n+  void set_ideal_phase_name_set(const PhaseNameValidator& v) {\n+    _ideal_phase_name_set.set_from(v.phase_name_set());\n+  };\n+  bool should_print_phase(const CompilerPhaseType cpt) const {\n+    return _ideal_phase_name_set.at(cpt);\n+  };\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.hpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -780,2 +780,1 @@\n-        uint64_t mask = 0;\n-        PhaseNameValidator validator(value, mask);\n+        PhaseNameValidator validator(value);\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -339,2 +339,1 @@\n-          uint64_t mask = 0;\n-          PhaseNameValidator validator(s, mask);\n+          PhaseNameValidator validator(s);\n@@ -344,1 +343,1 @@\n-            set->set_ideal_phase_mask(mask);\n+            set->set_ideal_phase_name_set(validator);\n","filename":"src\/hotspot\/share\/compiler\/directivesParser.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -5144,1 +5144,1 @@\n-  if ((_directive->ideal_phase_mask() & CompilerPhaseTypeHelper::to_bitmask(cpt)) != 0) {\n+  if (_directive->should_print_phase(cpt)) {\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+#include \"utilities\/bitMap.inline.hpp\"\n+\n@@ -103,3 +105,0 @@\n-  static uint64_t to_bitmask(CompilerPhaseType cpt) {\n-    return (UINT64_C(1) << cpt);\n-  }\n@@ -160,0 +159,1 @@\n+  CHeapBitMap _phase_name_set;\n@@ -163,0 +163,1 @@\n+\n@@ -164,1 +165,5 @@\n-  PhaseNameValidator(ccstrlist option, uint64_t& mask) : _valid(true), _bad(nullptr) {\n+  PhaseNameValidator(ccstrlist option) :\n+    _phase_name_set(PHASE_NUM_TYPES, mtCompiler),\n+    _valid(true),\n+    _bad(nullptr)\n+  {\n@@ -175,1 +180,1 @@\n-        mask = ~(UINT64_C(0));\n+        _phase_name_set.set_range(0, PHASE_NUM_TYPES);\n@@ -177,2 +182,2 @@\n-        assert(cpt < 64, \"out of bounds\");\n-        mask |= CompilerPhaseTypeHelper::to_bitmask(cpt);\n+        assert(cpt < PHASE_NUM_TYPES, \"out of bounds\");\n+        _phase_name_set.set_bit(cpt);\n@@ -189,6 +194,3 @@\n-  bool is_valid() const {\n-    return _valid;\n-  }\n-\n-  const char* what() const {\n-    return _bad;\n+  const BitMap& phase_name_set() const {\n+    assert(is_valid(), \"Use of invalid phase name set\");\n+    return _phase_name_set;\n@@ -196,0 +198,2 @@\n+  bool is_valid() const { return _valid; }\n+  const char* what() const { return _bad; }\n","filename":"src\/hotspot\/share\/opto\/phasetype.hpp","additions":17,"deletions":13,"binary":false,"changes":30,"status":"modified"}]}