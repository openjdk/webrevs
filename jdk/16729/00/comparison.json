{"files":[{"patch":"@@ -300,2 +300,1 @@\n-DirectiveSet::DirectiveSet(CompilerDirectives* d) :_inlinematchers(nullptr), _directive(d) {\n-  _ideal_phase_name_mask = 0;\n+DirectiveSet::DirectiveSet(CompilerDirectives* d) :_inlinematchers(nullptr), _directive(d), _ideal_phase_name_mask(PHASE_NUM_TYPES, mtCompiler) {\n@@ -437,2 +436,1 @@\n-        uint64_t mask = 0;\n-        PhaseNameValidator validator(option, mask);\n+        PhaseNameValidator validator(option);\n@@ -440,2 +438,2 @@\n-          assert(mask != 0, \"Must be set\");\n-          set.cloned()->_ideal_phase_name_mask = mask;\n+          assert(validator.is_mask_set(), \"Must be set\");\n+          set.cloned()->set_ideal_phase_mask(validator);\n@@ -624,1 +622,1 @@\n-  set->_ideal_phase_name_mask = src->_ideal_phase_name_mask;\n+  set->_ideal_phase_name_mask.set_from(src->_ideal_phase_name_mask);\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.cpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+#include \"opto\/phasetype.hpp\"\n+#include \"utilities\/bitMap.hpp\"\n@@ -131,1 +133,1 @@\n-  uint64_t _ideal_phase_name_mask;\n+  CHeapBitMap _ideal_phase_name_mask;\n@@ -200,2 +202,6 @@\n-  void set_ideal_phase_mask(uint64_t mask) { _ideal_phase_name_mask = mask; };\n-  uint64_t ideal_phase_mask() { return _ideal_phase_name_mask; };\n+  void set_ideal_phase_mask(const PhaseNameValidator& v) {\n+    _ideal_phase_name_mask.set_from(v.mask());\n+  };\n+  bool should_print_phase(const CompilerPhaseType cpt) const {\n+    return _ideal_phase_name_mask.at(cpt);\n+  };\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.hpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -780,2 +780,1 @@\n-        uint64_t mask = 0;\n-        PhaseNameValidator validator(value, mask);\n+        PhaseNameValidator validator(value);\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -339,2 +339,1 @@\n-          uint64_t mask = 0;\n-          PhaseNameValidator validator(s, mask);\n+          PhaseNameValidator validator(s);\n@@ -344,1 +343,1 @@\n-            set->set_ideal_phase_mask(mask);\n+            set->set_ideal_phase_mask(validator);\n","filename":"src\/hotspot\/share\/compiler\/directivesParser.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -5144,1 +5144,1 @@\n-  if ((_directive->ideal_phase_mask() & CompilerPhaseTypeHelper::to_bitmask(cpt)) != 0) {\n+  if (_directive->should_print_phase(cpt)) {\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+#include \"utilities\/bitMap.inline.hpp\"\n+\n@@ -103,3 +105,0 @@\n-  static uint64_t to_bitmask(CompilerPhaseType cpt) {\n-    return (UINT64_C(1) << cpt);\n-  }\n@@ -160,0 +159,1 @@\n+  CHeapBitMap _mask;\n@@ -161,0 +161,1 @@\n+  bool _set;\n@@ -163,0 +164,1 @@\n+\n@@ -164,1 +166,6 @@\n-  PhaseNameValidator(ccstrlist option, uint64_t& mask) : _valid(true), _bad(nullptr) {\n+  PhaseNameValidator(ccstrlist option)\n+                    : _mask(PHASE_NUM_TYPES, mtCompiler),\n+                      _valid(true),\n+                      _set(false),\n+                      _bad(nullptr)\n+  {\n@@ -175,1 +182,2 @@\n-        mask = ~(UINT64_C(0));\n+        _mask.set_range(0,PHASE_NUM_TYPES);\n+        _set = true;\n@@ -177,2 +185,3 @@\n-        assert(cpt < 64, \"out of bounds\");\n-        mask |= CompilerPhaseTypeHelper::to_bitmask(cpt);\n+        assert(cpt < PHASE_NUM_TYPES, \"out of bounds\");\n+        _mask.set_bit(cpt);\n+        _set = true;\n@@ -189,7 +198,4 @@\n-  bool is_valid() const {\n-    return _valid;\n-  }\n-\n-  const char* what() const {\n-    return _bad;\n-  }\n+  const BitMap& mask() const { return _mask; }\n+  bool is_valid() const { return _valid; }\n+  bool is_mask_set() const { return _set; }\n+  const char* what() const { return _bad; }\n","filename":"src\/hotspot\/share\/opto\/phasetype.hpp","additions":20,"deletions":14,"binary":false,"changes":34,"status":"modified"}]}