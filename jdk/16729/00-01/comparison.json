{"files":[{"patch":"@@ -300,1 +300,1 @@\n-DirectiveSet::DirectiveSet(CompilerDirectives* d) :_inlinematchers(nullptr), _directive(d), _ideal_phase_name_mask(PHASE_NUM_TYPES, mtCompiler) {\n+DirectiveSet::DirectiveSet(CompilerDirectives* d) :_inlinematchers(nullptr), _directive(d), _ideal_phase_name_set(PHASE_NUM_TYPES, mtCompiler) {\n@@ -438,2 +438,2 @@\n-          assert(validator.is_mask_set(), \"Must be set\");\n-          set.cloned()->set_ideal_phase_mask(validator);\n+          assert(!validator.is_phase_name_set_empty(), \"Phase name set must be non-empty\");\n+          set.cloned()->set_ideal_phase_name_set(validator);\n@@ -622,1 +622,1 @@\n-  set->_ideal_phase_name_mask.set_from(src->_ideal_phase_name_mask);\n+  set->_ideal_phase_name_set.set_from(src->_ideal_phase_name_set);\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-  CHeapBitMap _ideal_phase_name_mask;\n+  CHeapBitMap _ideal_phase_name_set;\n@@ -202,2 +202,2 @@\n-  void set_ideal_phase_mask(const PhaseNameValidator& v) {\n-    _ideal_phase_name_mask.set_from(v.mask());\n+  void set_ideal_phase_name_set(const PhaseNameValidator& v) {\n+    _ideal_phase_name_set.set_from(v.phase_name_set());\n@@ -206,1 +206,1 @@\n-    return _ideal_phase_name_mask.at(cpt);\n+    return _ideal_phase_name_set.at(cpt);\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -343,1 +343,1 @@\n-            set->set_ideal_phase_mask(validator);\n+            set->set_ideal_phase_name_set(validator);\n","filename":"src\/hotspot\/share\/compiler\/directivesParser.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -159,1 +159,1 @@\n-  CHeapBitMap _mask;\n+  CHeapBitMap _phase_name_set;\n@@ -161,1 +161,0 @@\n-  bool _set;\n@@ -166,5 +165,4 @@\n-  PhaseNameValidator(ccstrlist option)\n-                    : _mask(PHASE_NUM_TYPES, mtCompiler),\n-                      _valid(true),\n-                      _set(false),\n-                      _bad(nullptr)\n+  PhaseNameValidator(ccstrlist option) :\n+    _phase_name_set(PHASE_NUM_TYPES, mtCompiler),\n+    _valid(true),\n+    _bad(nullptr)\n@@ -182,2 +180,1 @@\n-        _mask.set_range(0,PHASE_NUM_TYPES);\n-        _set = true;\n+        _phase_name_set.set_range(0, PHASE_NUM_TYPES);\n@@ -186,2 +183,1 @@\n-        _mask.set_bit(cpt);\n-        _set = true;\n+        _phase_name_set.set_bit(cpt);\n@@ -198,1 +194,4 @@\n-  const BitMap& mask() const { return _mask; }\n+  const BitMap& phase_name_set() const {\n+    assert(is_valid(), \"Use of invalid phase name set\");\n+    return _phase_name_set;\n+  }\n@@ -200,1 +199,1 @@\n-  bool is_mask_set() const { return _set; }\n+  bool is_phase_name_set_empty() const { return _phase_name_set.is_empty(); }\n","filename":"src\/hotspot\/share\/opto\/phasetype.hpp","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"}]}