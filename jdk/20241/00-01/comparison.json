{"files":[{"patch":"@@ -135,1 +135,5 @@\n-        return VerifierImpl.verify(model, classHierarchyResolverOption().classHierarchyResolver(), null);\n+        try {\n+            return VerifierImpl.verify(model, classHierarchyResolverOption().classHierarchyResolver(), null);\n+        } catch (IllegalArgumentException verifierInitializationError) {\n+            return List.of(new VerifyError(verifierInitializationError.getMessage()));\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassFileImpl.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -113,0 +113,8 @@\n+    @Test\n+    void testInvalidClassNameEntry() {\n+        var cc = ClassFile.of();\n+        var bytes = ClassFile.of().parse(new byte[]{(byte)0xCA, (byte)0xFE, (byte)0xBA, (byte)0xBE,\n+            0, 0, 0, 0, 0, 2, ClassFile.TAG_INTEGER, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});\n+        assertTrue(cc.verify(bytes).stream().anyMatch(e -> e.getMessage().contains(\"expected ClassEntry\")));\n+    }\n+\n","filename":"test\/jdk\/jdk\/classfile\/VerifierSelfTest.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}