{"files":[{"patch":"@@ -1253,4 +1253,13 @@\n-\/\/ Return the tail of the _entry_list. If the tail is currently not\n-\/\/ known, find it by walking from the head of _entry_list, and while\n-\/\/ doing so assign the _prev pointers to create a doubly linked list.\n-ObjectWaiter* ObjectMonitor::entry_list_tail(JavaThread* current) {\n+\/\/ Convert entry_list into a doubly linked list by assigning the prev\n+\/\/ pointers and the entry_list_tail pointer. Within the entry_list the\n+\/\/ next pointers always form a consistent singly linked list. The\n+\/\/ entry_list can be in either of these forms:\n+\/\/   1. Empty.\n+\/\/   2. Only singly linked.\n+\/\/   3. Only doubly linked.\n+\/\/   4. Starting as singly linked (from the head), but ending as doubly\n+\/\/      linked (at the tail).\n+\/\/ Number four is because new threads has pushed themself to the\n+\/\/ entry_list head after the entry_list was last converted into a\n+\/\/ doubly linked list.\n+void ObjectMonitor::entry_list_build_dll(JavaThread* current) {\n@@ -1258,12 +1267,0 @@\n-  ObjectWaiter* w = _entry_list_tail;\n-  if (w != nullptr) {\n-    return w;\n-  }\n-  \/\/ Need acquire here to match the implicit release of the cmpxchg\n-  \/\/ that updated _entry_list, so we can access w->_next.\n-  w = Atomic::load_acquire(&_entry_list);\n-  assert(w != nullptr, \"invariant\");\n-  if (w->next() == nullptr) {\n-    _entry_list_tail = w;\n-    return w;\n-  }\n@@ -1271,0 +1268,3 @@\n+  \/\/ Need acquire here to match the implicit release of the cmpxchg\n+  \/\/ that updated entry_list, so we can access w->prev().\n+  ObjectWaiter* w = Atomic::load_acquire(&_entry_list);\n@@ -1273,0 +1273,4 @@\n+    assert(w->prev() == nullptr || w->prev() == prev, \"should be\");\n+    if (w->prev() != nullptr) {\n+      break;\n+    }\n@@ -1277,2 +1281,40 @@\n-  _entry_list_tail = prev;\n-  return prev;\n+  if (w == nullptr) {\n+    \/\/ We converted the entire entry_list from a singly linked list\n+    \/\/ into a doubly linked list. Now we just need to set the tail\n+    \/\/ pointer.\n+    assert(prev == nullptr || prev->next() == nullptr, \"should be\");\n+    assert(_entry_list_tail == nullptr || _entry_list_tail == prev, \"should be\");\n+    _entry_list_tail = prev;\n+  } else {\n+    \/\/ We stopped iterating through the _entry_list when we found a\n+    \/\/ node that had its prev pointer set. I.e. we converted the first\n+    \/\/ part of the entry_list from a singly linked list into a doubly\n+    \/\/ linked list. Now we just want to make sure the rest of the list\n+    \/\/ is doubly linked. But first we check that we have a tail\n+    \/\/ pointer, because if the end of the entry_list is doubly linked\n+    \/\/ and we don't have the tail pointer, something is broken.\n+    assert(_entry_list_tail != nullptr, \"should be\");\n+#ifdef ASSERT\n+    while (w != nullptr) {\n+      assert(w->TState == ObjectWaiter::TS_ENTER, \"invariant\");\n+      assert(w->prev() == prev, \"should be\");\n+      prev = w;\n+      w = w->next();\n+    }\n+    assert(_entry_list_tail == prev, \"should be\");\n+#endif\n+  }\n+}\n+\n+\/\/ Return the tail of the _entry_list. If the tail is currently not\n+\/\/ known, it can be found by first calling entry_list_build_dll().\n+ObjectWaiter* ObjectMonitor::entry_list_tail(JavaThread* current) {\n+  assert(has_owner(current), \"invariant\");\n+  ObjectWaiter* w = _entry_list_tail;\n+  if (w != nullptr) {\n+    return w;\n+  }\n+  entry_list_build_dll(current);\n+  w = _entry_list_tail;\n+  assert(w != nullptr, \"should be\");\n+  return w;\n@@ -1312,2 +1354,1 @@\n-      _entry_list_tail = nullptr;\n-      entry_list_tail(current);\n+      entry_list_build_dll(current);\n@@ -1315,0 +1356,1 @@\n+      assert(_entry_list_tail == currentNode, \"must be\");\n@@ -1358,2 +1400,1 @@\n-    _entry_list_tail = nullptr;\n-    entry_list_tail(current);\n+    entry_list_build_dll(current);\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":63,"deletions":22,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -444,0 +444,1 @@\n+  void      entry_list_build_dll(JavaThread* current);\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}