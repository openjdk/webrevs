{"files":[{"patch":"@@ -1254,10 +1254,5 @@\n-\/\/ pointers and the entry_list_tail pointer. Within the entry_list the\n-\/\/ next pointers always form a consistent singly linked list. The\n-\/\/ entry_list can be in any of these forms:\n-\/\/   1. Only singly linked.\n-\/\/   2. Only doubly linked.\n-\/\/   3. Starting as singly linked (from the head), but ending as doubly\n-\/\/      linked (at the tail).\n-\/\/ Number three is because new threads has pushed themself to the\n-\/\/ entry_list head after the entry_list was last converted into a\n-\/\/ doubly linked list.\n+\/\/ pointers and the entry_list_tail pointer (if needed). Within the\n+\/\/ entry_list the next pointers always form a consistent singly linked\n+\/\/ list. When this function is called, the entry_list will be either\n+\/\/ singly linked, or starting as singly linked (at the head), but\n+\/\/ ending as doubly linked (at the tail).\n@@ -1270,3 +1265,1 @@\n-  \/\/ This function should only be called when we know that the\n-  \/\/ entry_list is not empty.\n-  assert(w != nullptr, \"invariant\");\n+  assert(w != nullptr, \"should only be called when entry list is not empty\");\n@@ -1287,1 +1280,1 @@\n-    assert(prev == nullptr || prev->next() == nullptr, \"invariant\");\n+    assert(prev != nullptr && prev->next() == nullptr, \"invariant\");\n@@ -1321,1 +1314,1 @@\n-  assert(w != nullptr, \"should be\");\n+  assert(w != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":8,"deletions":15,"binary":false,"changes":23,"status":"modified"}]}