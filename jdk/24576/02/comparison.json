{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -479,0 +479,6 @@\n+            \/\/ engineReset (final in DigestBase) skips implReset if there's\n+            \/\/ no update. This works for MessageDigest, since digest() always\n+            \/\/ resets. But for XOF, squeeze() may be called without update,\n+            \/\/ and still modifies state. So we always call implReset here\n+            \/\/ to ensure correct behavior.\n+            implReset();\n@@ -482,0 +488,13 @@\n+    public static final class SHAKE128Hash extends SHA3 {\n+        public SHAKE128Hash() {\n+            super(\"SHAKE128-256\", 32, (byte) 0x1F, 32);\n+        }\n+    }\n+\n+    public static final class SHAKE256Hash extends SHA3 {\n+        public SHAKE256Hash() {\n+            super(\"SHAKE256-512\", 64, (byte) 0x1F, 64);\n+        }\n+    }\n+\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SHA3.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -267,0 +267,4 @@\n+        addWithAlias(p, \"MessageDigest\", \"SHAKE128-256\",\n+                \"sun.security.provider.SHA3$SHAKE128Hash\", attrs);\n+        addWithAlias(p, \"MessageDigest\", \"SHAKE256-512\",\n+                \"sun.security.provider.SHA3$SHAKE256Hash\", attrs);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SunEntries.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -155,2 +155,2 @@\n-    SHAKE128(\"2.16.840.1.101.3.4.2.11\"),\n-    SHAKE256(\"2.16.840.1.101.3.4.2.12\"),\n+    SHAKE128_256(\"2.16.840.1.101.3.4.2.11\", \"SHAKE128-256\", \"SHAKE128\"),\n+    SHAKE256_512(\"2.16.840.1.101.3.4.2.12\", \"SHAKE256-512\", \"SHAKE256\"),\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KnownOIDs.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8354305\n+ * @summary Ensure SHAKE message digest algorithms behave the same\n+ *      as correspondent XOF of the same output size\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.security.provider\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.security.SeededSecureRandom;\n+import sun.security.provider.SHA3;\n+\n+import java.security.MessageDigest;\n+\n+public class SHAKEhash {\n+    public static void main(String[] args) throws Exception {\n+        var random = SeededSecureRandom.one();\n+        var s1 = new SHA3.SHAKE128();\n+        var m1 = MessageDigest.getInstance(\"SHAKE128-256\"); \/\/ use standard name\n+        var s2 = new SHA3.SHAKE256();\n+        var m2 = MessageDigest.getInstance(\"SHAKE256\"); \/\/ use alias\n+        for (var i = 0; i < 1_000_000; i++) {\n+            var msg = random.nBytes(random.nextInt(100));\n+            s1.update(msg);\n+            m1.update(msg);\n+            Asserts.assertEqualsByteArray(s1.squeeze(32), m1.digest());\n+            s2.update(msg);\n+            m2.update(msg);\n+            Asserts.assertEqualsByteArray(s2.squeeze(64), m2.digest());\n+            s1.reset();\n+            s2.reset();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/provider\/MessageDigest\/SHAKEhash.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,12 @@\n+        resetFix();\n+        random();\n+    }\n+\n+    static void resetFix() throws Exception {\n+        var s = new SHA3.SHAKE256();\n+        var d1 = s.squeeze(10);\n+        s.reset();\n+        Asserts.assertEqualsByteArray(d1, s.squeeze(10));\n+    }\n+\n+    static void random() throws Exception {\n","filename":"test\/jdk\/sun\/security\/provider\/MessageDigest\/SHAKEsqueeze.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"}]}