{"files":[{"patch":"@@ -97,7 +97,0 @@\n-#ifdef _WIN64\n-const juint  float_sign_mask  = 0x7FFFFFFF;\n-const juint  float_infinity   = 0x7F800000;\n-const julong double_sign_mask = CONST64(0x7FFFFFFFFFFFFFFF);\n-const julong double_infinity  = CONST64(0x7FF0000000000000);\n-#endif\n-\n@@ -105,12 +98,0 @@\n-#ifdef _WIN64\n-  \/\/ 64-bit Windows on amd64 returns the wrong values for\n-  \/\/ infinity operands.\n-  juint xbits = PrimitiveConversions::cast<juint>(x);\n-  juint ybits = PrimitiveConversions::cast<juint>(y);\n-  \/\/ x Mod Infinity == x unless x is infinity\n-  if (((xbits & float_sign_mask) != float_infinity) &&\n-       ((ybits & float_sign_mask) == float_infinity) ) {\n-    return x;\n-  }\n-  return ((jfloat)fmod_winx64((double)x, (double)y));\n-#else\n@@ -123,1 +104,0 @@\n-#endif\n@@ -127,10 +107,0 @@\n-#ifdef _WIN64\n-  julong xbits = PrimitiveConversions::cast<julong>(x);\n-  julong ybits = PrimitiveConversions::cast<julong>(y);\n-  \/\/ x Mod Infinity == x unless x is infinity\n-  if (((xbits & double_sign_mask) != double_infinity) &&\n-       ((ybits & double_sign_mask) == double_infinity) ) {\n-    return x;\n-  }\n-  return ((jdouble)fmod_winx64((double)x, (double)y));\n-#else\n@@ -141,1 +111,0 @@\n-#endif\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86.cpp","additions":0,"deletions":31,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -287,0 +287,7 @@\n+#ifdef _WIN64\n+const juint  float_sign_mask  = 0x7FFFFFFF;\n+const juint  float_infinity   = 0x7F800000;\n+const julong double_sign_mask = CONST64(0x7FFFFFFFFFFFFFFF);\n+const julong double_infinity  = CONST64(0x7FF0000000000000);\n+#endif\n+\n@@ -289,0 +296,12 @@\n+#ifdef _WIN64\n+  \/\/ 64-bit Windows on amd64 returns the wrong values for\n+  \/\/ infinity operands.\n+  juint xbits = PrimitiveConversions::cast<juint>(x);\n+  juint ybits = PrimitiveConversions::cast<juint>(y);\n+  \/\/ x Mod Infinity == x unless x is infinity\n+  if (((xbits & float_sign_mask) != float_infinity) &&\n+       ((ybits & float_sign_mask) == float_infinity) ) {\n+    return x;\n+  }\n+  return ((jfloat)fmod_winx64((double)x, (double)y));\n+#else\n@@ -290,0 +309,1 @@\n+#endif\n@@ -293,0 +313,10 @@\n+#ifdef _WIN64\n+  julong xbits = PrimitiveConversions::cast<julong>(x);\n+  julong ybits = PrimitiveConversions::cast<julong>(y);\n+  \/\/ x Mod Infinity == x unless x is infinity\n+  if (((xbits & double_sign_mask) != double_infinity) &&\n+       ((ybits & double_sign_mask) == double_infinity) ) {\n+    return x;\n+  }\n+  return ((jdouble)fmod_winx64((double)x, (double)y));\n+#else\n@@ -294,0 +324,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"}]}