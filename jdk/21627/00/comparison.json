{"files":[{"patch":"@@ -97,0 +97,7 @@\n+#ifdef _WIN64\n+const juint  float_sign_mask  = 0x7FFFFFFF;\n+const juint  float_infinity   = 0x7F800000;\n+const julong double_sign_mask = CONST64(0x7FFFFFFFFFFFFFFF);\n+const julong double_infinity  = CONST64(0x7FF0000000000000);\n+#endif\n+\n@@ -98,0 +105,12 @@\n+#ifdef _WIN64\n+  \/\/ 64-bit Windows on amd64 returns the wrong values for\n+  \/\/ infinity operands.\n+  juint xbits = PrimitiveConversions::cast<juint>(x);\n+  juint ybits = PrimitiveConversions::cast<juint>(y);\n+  \/\/ x Mod Infinity == x unless x is infinity\n+  if (((xbits & float_sign_mask) != float_infinity) &&\n+       ((ybits & float_sign_mask) == float_infinity) ) {\n+    return x;\n+  }\n+  return ((jfloat)fmod_winx64((double)x, (double)y));\n+#else\n@@ -104,0 +123,1 @@\n+#endif\n@@ -107,0 +127,10 @@\n+#ifdef _WIN64\n+  julong xbits = PrimitiveConversions::cast<julong>(x);\n+  julong ybits = PrimitiveConversions::cast<julong>(y);\n+  \/\/ x Mod Infinity == x unless x is infinity\n+  if (((xbits & double_sign_mask) != double_infinity) &&\n+       ((ybits & double_sign_mask) == double_infinity) ) {\n+    return x;\n+  }\n+  return ((jdouble)fmod_winx64((double)x, (double)y));\n+#else\n@@ -111,0 +141,1 @@\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86.cpp","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+#ifndef _WIN64\n@@ -81,0 +82,1 @@\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/upcallLinker_x86_64.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -178,1 +178,1 @@\n-    st->print(\"%#11llx\", reinterpret_cast<const unsigned long long>(mem_info.BaseAddress) - reinterpret_cast<const unsigned long long>(mem_info.AllocationBase));\n+    st->print(\"%#11llx\", reinterpret_cast<unsigned long long>(mem_info.BaseAddress) - reinterpret_cast<unsigned long long>(mem_info.AllocationBase));\n","filename":"src\/hotspot\/os\/windows\/memMapPrinter_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -287,7 +287,0 @@\n-#ifdef _WIN64\n-const juint  float_sign_mask  = 0x7FFFFFFF;\n-const juint  float_infinity   = 0x7F800000;\n-const julong double_sign_mask = CONST64(0x7FFFFFFFFFFFFFFF);\n-const julong double_infinity  = CONST64(0x7FF0000000000000);\n-#endif\n-\n@@ -296,12 +289,0 @@\n-#ifdef _WIN64\n-  \/\/ 64-bit Windows on amd64 returns the wrong values for\n-  \/\/ infinity operands.\n-  juint xbits = PrimitiveConversions::cast<juint>(x);\n-  juint ybits = PrimitiveConversions::cast<juint>(y);\n-  \/\/ x Mod Infinity == x unless x is infinity\n-  if (((xbits & float_sign_mask) != float_infinity) &&\n-       ((ybits & float_sign_mask) == float_infinity) ) {\n-    return x;\n-  }\n-  return ((jfloat)fmod_winx64((double)x, (double)y));\n-#else\n@@ -309,1 +290,0 @@\n-#endif\n@@ -313,10 +293,0 @@\n-#ifdef _WIN64\n-  julong xbits = PrimitiveConversions::cast<julong>(x);\n-  julong ybits = PrimitiveConversions::cast<julong>(y);\n-  \/\/ x Mod Infinity == x unless x is infinity\n-  if (((xbits & double_sign_mask) != double_infinity) &&\n-       ((ybits & double_sign_mask) == double_infinity) ) {\n-    return x;\n-  }\n-  return ((jdouble)fmod_winx64((double)x, (double)y));\n-#else\n@@ -324,1 +294,0 @@\n-#endif\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":0,"deletions":31,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -766,1 +766,1 @@\n-      ASSERT_EQ(mapping_info.committed_size, 0);\n+      ASSERT_EQ(mapping_info.committed_size, 0U);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -795,1 +795,1 @@\n-    EXPECT_EQ(decided_size, 0) << \"Expected decided size to be 0 when large page is not supported by the processor\";\n+    EXPECT_EQ(decided_size, 0U) << \"Expected decided size to be 0 when large page is not supported by the processor\";\n@@ -817,1 +817,1 @@\n-    EXPECT_EQ(decided_size, 0) << \"Expected decided size to be 0 for large pages bigger than 4mb on IA32 or AMD64\";\n+    EXPECT_EQ(decided_size, 0U) << \"Expected decided size to be 0 for large pages bigger than 4mb on IA32 or AMD64\";\n@@ -830,1 +830,1 @@\n-  EXPECT_EQ(decided_size, 0) << \"Expected decided size to default to 0 when LargePageSizeInBytes is not a multiple of minimum size\";\n+  EXPECT_EQ(decided_size, 0U) << \"Expected decided size to default to 0 when LargePageSizeInBytes is not a multiple of minimum size\";\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_windows.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}