{"files":[{"patch":"@@ -255,0 +255,1 @@\n+doclet.unexpectedRedirect=Unexpected redirection for URL {0} to {1}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/resources\/doclets.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -671,2 +671,7 @@\n-            configuration.getReporter().print(Kind.WARNING,\n-                    resources.getText(\"doclet.urlRedirected\", url, conn.getURL()));\n+            if (!getLastPathComponent(conn.getURL()).equals(getLastPathComponent(url))) {\n+                configuration.getReporter().print(Kind.ERROR,\n+                        resources.getText(\"doclet.unexpectedRedirect\", url, conn.getURL()));\n+            } else {\n+                configuration.getReporter().print(Kind.WARNING,\n+                        resources.getText(\"doclet.urlRedirected\", url, conn.getURL()));\n+            }\n@@ -678,0 +683,6 @@\n+    private String getLastPathComponent(URL u) {\n+        var path = u.getPath();\n+        var sep = path.lastIndexOf('\/');\n+        return sep == -1 ? path : path.substring(sep + 1);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Extern.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,179 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug     8299627\n+ * @summary Fix\/improve handling of \"missing\" element-list file\n+ * @library \/tools\/lib ..\/..\/lib\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build   toolbox.ToolBox javadoc.tester.*\n+ * @run main TestExternRedirects\n+ *\/\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.InetSocketAddress;\n+import java.net.MalformedURLException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+public class TestExternRedirects extends JavadocTester {\n+    public static void main(String... args) throws Exception {\n+        var tester = new TestExternRedirects();\n+        tester.runTests();\n+    }\n+\n+    private final ToolBox tb = new ToolBox();\n+    private HttpServer httpServer;\n+\n+    @Override\n+    public void runTests() throws Exception {\n+        httpServer = startServer();\n+        var address = httpServer.getAddress();\n+        out.println(\"server running at \" + address);\n+        try {\n+            super.runTests();\n+        } finally {\n+            httpServer.stop(0);\n+        }\n+    }\n+\n+    private HttpServer startServer() throws IOException {\n+        HttpServer server = HttpServer.create(new InetSocketAddress(\"localhost\", 0), 0);\n+        server.createContext(\"\/docs\", new MyHandler());\n+        server.setExecutor(null); \/\/ creates a default executor\n+        server.start();\n+        return server;\n+    }\n+\n+    private class MyHandler implements HttpHandler {\n+        @Override\n+        public void handle(HttpExchange t) throws IOException {\n+            out.println(\"MyHandler: \" + t.getRequestMethod() + \" \" + t.getRequestURI());\n+            assert t.getRequestMethod().equals(\"GET\");\n+            var uriPath = t.getRequestURI().getPath();\n+            if (uriPath.contains(\"no-redirect\")) {\n+                respond(t, HttpURLConnection.HTTP_OK, \"\");\n+            } else if (uriPath.matches(\".*\/redirect-[1-9]\/.*\")) {\n+                Matcher m = Pattern.compile(\"redirect-([1-9])\").matcher(uriPath);\n+                if (m.find()) {\n+                    var count = Integer.parseInt(m.group(1));\n+                    var u = t.getRequestURI().toString();\n+                    var u2 = u.replace(\"redirect-\" + count,\n+                            (count == 1) ? \"no-redirect\" : \"redirect-\" + (count - 1));\n+                    t.getResponseHeaders().add(\"Location\", u2);\n+                    respond(t, HttpURLConnection.HTTP_MOVED_PERM, \"\");\n+                } else {\n+                    throw new IOException(\"internal error\");\n+                }\n+            } else if (uriPath.contains(\"bad-redirect\")){\n+                var u = t.getRequestURI().toString();\n+                var u2 = u.replace(\"bad-redirect\", \"no-redirect\")\n+                                .replaceAll(\"[^\/]+-list$\", \"not-found.html\");\n+                t.getResponseHeaders().add(\"Location\", u2);\n+                respond(t, HttpURLConnection.HTTP_MOVED_PERM, \"\");\n+            } else {\n+                respond(t, HttpURLConnection.HTTP_NOT_FOUND, \"\");\n+            }\n+        }\n+    }\n+\n+    private void respond(HttpExchange t, int code, String body) throws IOException {\n+        out.println(\"  respond: \" + code);\n+        t.getResponseHeaders().forEach((k, v) -> out.println(\"  header: \" + k + \": \" + v));\n+        body.lines().map(l -> \"  body \" + l).forEach(out::println);\n+\n+        t.sendResponseHeaders(code, body.length());\n+        try (var os = t.getResponseBody()) {\n+            os.write(body.getBytes());\n+        }\n+    }\n+\n+    @Test\n+    public void testNoRedirect(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"package p; public class C { }\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"-Xdoclint:none\",\n+                \"-link\", getURL(\"no-redirect\").toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+    }\n+\n+    @Test\n+    public void testSomeRedirect(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"package p; public class C { }\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"-Xdoclint:none\",\n+                \"-link\", getURL(\"redirect-3\").toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        new OutputChecker(Output.OUT)\n+                .check(Pattern.compile(\"warning: URL .*\/docs\/redirect-3\/element-list\" +\n+                        \" was redirected to .*\/docs\/no-redirect\/element-list\"));\n+    }\n+\n+    @Test\n+    public void testBadRedirect(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"package p; public class C { }\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"-Xdoclint:none\",\n+                \"-link\", getURL(\"bad-redirect\").toString(),\n+                \"p\");\n+        checkExit(Exit.ERROR);\n+\n+        checkOutput(Output.OUT, true,\n+                \"error: Unexpected redirection for URL\");\n+    }\n+\n+    private URL getURL(String key) throws URISyntaxException, MalformedURLException {\n+        return new URI(\"http\",\n+                null,  \/\/ user-info\n+                httpServer.getAddress().getHostName(),\n+                httpServer.getAddress().getPort(),\n+                \"\/docs\/\" + key,\n+                null, \/\/ query\n+                null \/\/ fragment\n+                ).toURL();\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/testExternRedirects\/TestExternRedirects.java","additions":179,"deletions":0,"binary":false,"changes":179,"status":"added"}]}