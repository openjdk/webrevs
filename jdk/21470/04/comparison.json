{"files":[{"patch":"@@ -723,1 +723,1 @@\n-                                                      Deoptimization::Action_none));\n+                                                         Deoptimization::Action_none));\n@@ -729,0 +729,6 @@\n+    if (!con.is_loaded()) {\n+      trap(str, nullptr, Deoptimization::make_trap_request(Deoptimization::Reason_unloaded,\n+                                                           Deoptimization::Action_reinterpret,\n+                                                           cp_index));\n+      return;\n+    }\n@@ -2210,1 +2216,0 @@\n-    \/\/ %%% FIXME: ldc of Class can generate an exception\n@@ -2214,1 +2219,1 @@\n-      return str.is_in_error();\n+      return str.is_in_error() || !str.get_constant().is_loaded();\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1961,0 +1961,2 @@\n+    \/\/ ciTypeFlow should trap if the ldc is in error state or if the constant is not loaded\n+    assert(!iter().is_in_error(), \"ldc is in error state\");\n@@ -1962,19 +1964,4 @@\n-    if (constant.is_loaded()) {\n-      const Type* con_type = Type::make_from_constant(constant);\n-      if (con_type != nullptr) {\n-        push_node(con_type->basic_type(), makecon(con_type));\n-      }\n-    } else {\n-      \/\/ If the constant is unresolved or in error state, run this BC in the interpreter.\n-      if (iter().is_in_error()) {\n-        uncommon_trap(Deoptimization::make_trap_request(Deoptimization::Reason_unhandled,\n-                                                        Deoptimization::Action_none),\n-                      nullptr, \"constant in error state\", true \/* must_throw *\/);\n-\n-      } else {\n-        int index = iter().get_constant_pool_index();\n-        uncommon_trap(Deoptimization::make_trap_request(Deoptimization::Reason_unloaded,\n-                                                        Deoptimization::Action_reinterpret,\n-                                                        index),\n-                      nullptr, \"unresolved constant\", false \/* must_throw *\/);\n-      }\n+    assert(constant.is_loaded(), \"constant is not loaded\");\n+    const Type* con_type = Type::make_from_constant(constant);\n+    if (con_type != nullptr) {\n+      push_node(con_type->basic_type(), makecon(con_type));\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":6,"deletions":19,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -58,2 +58,0 @@\n-\n-runtime\/condy\/escapeAnalysis\/TestEscapeCondy.java 8339694 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList-Xcomp.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8339694\n+ * @summary Test compilation of unresolved constant dynamics.\n+ * @library \/test\/lib\n+ * @compile TestUnresolvedConstantDynamicHelper.jasm\n+ * @run driver TestUnresolvedConstantDynamic\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileCommand=compileonly,TestUnresolvedConstantDynamicHelper::test* TestUnresolvedConstantDynamic\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+\n+public class TestUnresolvedConstantDynamic {\n+\n+    public static void main(String[] args) {\n+        Asserts.assertEquals(TestUnresolvedConstantDynamicHelper.testBooleanArray(true)[0], true);\n+        Asserts.assertEquals(TestUnresolvedConstantDynamicHelper.testStringArray(\"42\")[0], \"42\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestUnresolvedConstantDynamic.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+public class TestUnresolvedConstantDynamicHelper version 55:0 {\n+    public Method \"<init>\":\"()V\" stack 1 locals 1 {\n+        aload_0;\n+        invokespecial Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+    }\n+\n+    private static Method newBooleanArray:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/Class;)[Z\" stack 1 locals 3 {\n+        iconst_1;\n+        newarray boolean;\n+        areturn;\n+    }\n+\n+    private static Method newStringArray:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/Class;)[Ljava\/lang\/String;\" stack 1 locals 3 {\n+        iconst_1;\n+        anewarray class java\/lang\/String;\n+        areturn;\n+    }\n+\n+    public static Method testBooleanArray:\"(Z)[Z\" stack 4 locals 2 {\n+        ldc Dynamic REF_invokeStatic:TestUnresolvedConstantDynamicHelper.newBooleanArray:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/Class;)[Z\":name:\"[Z\";\n+        dup;\n+        iconst_0;\n+        iload_0;\n+        bastore;\n+        areturn;\n+    }\n+\n+    public static Method testStringArray:\"(Ljava\/lang\/String;)[Ljava\/lang\/String;\" stack 4 locals 2 {\n+        ldc Dynamic REF_invokeStatic:TestUnresolvedConstantDynamicHelper.newStringArray:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/Class;)[Ljava\/lang\/String;\":name:\"[Ljava\/lang\/String;\";\n+        dup;\n+        iconst_0;\n+        aload_0;\n+        aastore;\n+        areturn;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestUnresolvedConstantDynamicHelper.jasm","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}