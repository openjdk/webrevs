{"files":[{"patch":"@@ -94,5 +94,0 @@\n-  \/\/ Canonicalize the node by moving constants to the right input.\n-  if (in(Condition)->is_Bool() && phase->type(in(IfFalse))->singleton() && !phase->type(in(IfTrue))->singleton()) {\n-    BoolNode* b = in(Condition)->as_Bool()->negate(phase);\n-    return make(in(Control), phase->transform(b), in(IfTrue), in(IfFalse), _type);\n-  }\n@@ -100,0 +95,2 @@\n+  \/\/ Check for Min\/Max patterns. This is called before constants are pushed to the right input, as that transform can\n+  \/\/ make BoolTests non-canonical.\n@@ -105,0 +102,6 @@\n+  \/\/ Canonicalize the node by moving constants to the right input.\n+  if (in(Condition)->is_Bool() && phase->type(in(IfFalse))->singleton() && !phase->type(in(IfTrue))->singleton()) {\n+    BoolNode* b = in(Condition)->as_Bool()->negate(phase);\n+    return make(in(Control), phase->transform(b), in(IfTrue), in(IfFalse), _type);\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/movenode.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @bug 8324655 8329797\n+ * @bug 8324655 8329797 8331090\n@@ -508,1 +508,21 @@\n-    @Run(test = { \"testMinI1\", \"testMinI2\", \"testMaxI1\", \"testMaxI2\", \"testMinI1E\", \"testMinI2E\", \"testMaxI1E\", \"testMaxI2E\" })\n+    @Test\n+    @IR(failOn = { IRNode.IF }, counts = { IRNode.MIN_I, \"1\" })\n+    public int testMinIConst(int a) {\n+        if (a > 65535) {\n+            a = 65535;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Test\n+    @IR(phase = { CompilePhase.BEFORE_MACRO_EXPANSION }, failOn = { IRNode.IF }, counts = { IRNode.MIN_L, \"1\" })\n+    public long testMinLConst(long a) {\n+        if (a > 65535) {\n+            a = 65535;\n+        }\n+\n+        return a;\n+    }\n+\n+    @Run(test = { \"testMinI1\", \"testMinI2\", \"testMaxI1\", \"testMaxI2\", \"testMinI1E\", \"testMinI2E\", \"testMaxI1E\", \"testMaxI2E\", \"testMinIConst\" })\n@@ -529,0 +549,3 @@\n+\n+        Asserts.assertEQ(a > 65535 ? 65535 : a, testMinIConst(a));\n+        Asserts.assertEQ(b > 65535 ? 65535 : b, testMinIConst(b));\n@@ -531,1 +554,1 @@\n-    @Run(test = { \"testMinL1\", \"testMinL2\", \"testMaxL1\", \"testMaxL2\", \"testMinL1E\", \"testMinL2E\", \"testMaxL1E\", \"testMaxL2E\" })\n+    @Run(test = { \"testMinL1\", \"testMinL2\", \"testMaxL1\", \"testMaxL2\", \"testMinL1E\", \"testMinL2E\", \"testMaxL1E\", \"testMaxL2E\", \"testMinLConst\" })\n@@ -554,0 +577,3 @@\n+\n+        Asserts.assertEQ(a > 65535L ? 65535L : a, testMinLConst(a));\n+        Asserts.assertEQ(b > 65535L ? 65535L : b, testMinLConst(b));\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestIfMinMax.java","additions":29,"deletions":3,"binary":false,"changes":32,"status":"modified"}]}