{"files":[{"patch":"@@ -2599,1 +2599,1 @@\n-  if (!MethodFlushing || is_native_method() || is_not_installed()) {\n+  if (!MethodFlushing || (is_native_method() && is_in_use()) || is_not_installed()) {\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package gc.NativeWrapperCollection;\n+\n+\/*\n+ * @test TestNativeWrapperCollection\n+ * @summary Test that native wrappers are collected after becoming not entrant\n+ * @requires vm.compiler1.enabled\n+ * @library \/test\/lib\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm\/native -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                          gc.NativeWrapperCollection.TestNativeWrapperCollection\n+ *\/\n+\n+import java.lang.reflect.Method;\n+import java.util.Iterator;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.dcmd.JMXExecutor;\n+import jdk.test.lib.dcmd.CommandExecutor;\n+import jdk.test.whitebox.WhiteBox;\n+\n+public class TestNativeWrapperCollection {\n+\n+    static {\n+        System.loadLibrary(\"nativeWrapperCollection\");\n+    }\n+\n+    private static final WhiteBox WB = WhiteBox.getWhiteBox();\n+\n+    static native void method();\n+    static native void callRegisterNatives(int index);\n+\n+    public static void main(String[] args) throws Exception {\n+        Method method = TestNativeWrapperCollection.class.getDeclaredMethod(\"method\");\n+\n+        callRegisterNatives(0);\n+\n+        WB.enqueueMethodForCompilation(method, 1 \/* compLevel *\/);\n+        while (WB.isMethodQueuedForCompilation(method)) {\n+            Thread.onSpinWait();\n+        }\n+\n+        callRegisterNatives(1);\n+\n+        WB.enqueueMethodForCompilation(method, 1 \/* compLevel *\/);\n+        while (WB.isMethodQueuedForCompilation(method)) {\n+            Thread.onSpinWait();\n+        }\n+\n+        WB.fullGC(); \/\/ mark the nmethod as not on stack\n+        WB.fullGC(); \/\/ reclaim the nmethod\n+\n+        OutputAnalyzer output = new JMXExecutor().execute(\"Compiler.codelist\");\n+        Iterator<String> lines = output.asLines().iterator();\n+\n+        boolean foundOne = false;\n+        while (lines.hasNext()) {\n+            String line = lines.next();\n+            if (!line.contains(\"TestNativeWrapperCollection.method\")) {\n+                continue;\n+            }\n+            if (foundOne) {\n+                throw new AssertionError(\"Expected one CodeCache entry for \" +\n+                        \"'TestNativeWrapperCollection.method', found at least 2\");\n+            }\n+\n+            String[] parts = line.split(\" \");\n+            int codeState = Integer.parseInt(parts[2]);\n+            if (codeState == 1 \/* not_entrant *\/) {\n+                throw new AssertionError(\"Unexpected not-entrant entry for \" +\n+                        \"'TestNativeWrapperCollection.method'\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/NativeWrapperCollection\/TestNativeWrapperCollection.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"jni.h\"\n+\n+static void method0(JNIEnv* env, jclass cls) {}\n+static void method1(JNIEnv* env, jclass cls) {}\n+\n+JNIEXPORT void JNICALL\n+Java_gc_NativeWrapperCollection_TestNativeWrapperCollection_callRegisterNatives\n+(JNIEnv *env, jclass cls, jint index) {\n+  JNINativeMethod nativeMethods[] = {\n+    {\n+      (char*) \"method\",                        \/\/ name\n+      (char*) \"()V\",                           \/\/ sig\n+      (void*) (index == 0 ? method0 : method1) \/\/ native method ptr\n+    }\n+  };\n+  (*env)->RegisterNatives(env, cls, nativeMethods, 1);\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/NativeWrapperCollection\/libnativeWrapperCollection.c","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"}]}