{"files":[{"patch":"@@ -47,2 +47,2 @@\n-  \/\/ Shrink period avoids constantly polling regions for shrinking.\n-  \/\/ Having a period 10x lower than the delay would mean we hit the\n+  \/\/ poll_interval avoids constantly polling regions for shrinking.\n+  \/\/ Having an interval 10x lower than the delay would mean we hit the\n@@ -51,2 +51,3 @@\n-  double shrink_period = (double)ShenandoahUncommitDelay \/ 1000 \/ 10;\n-  double last_shrink_time = os::elapsedTime();\n+  const int64_t poll_interval = int64_t(ShenandoahUncommitDelay) \/ 10;\n+  const double shrink_period = double(ShenandoahUncommitDelay) \/ 1000;\n+  bool timed_out = false;\n@@ -54,1 +55,0 @@\n-    double current = os::elapsedTime();\n@@ -58,1 +58,2 @@\n-    if (soft_max_changed || explicit_gc_requested || current - last_shrink_time > shrink_period) {\n+    if (soft_max_changed || explicit_gc_requested || timed_out) {\n+      double current = os::elapsedTime();\n@@ -62,1 +63,1 @@\n-              current - ((double) ShenandoahUncommitDelay \/ 1000.0);\n+              current - shrink_period;\n@@ -69,1 +70,0 @@\n-        last_shrink_time = current;\n@@ -75,1 +75,1 @@\n-        locker.wait((int64_t)shrink_period);\n+        timed_out = locker.wait(poll_interval);\n@@ -136,1 +136,0 @@\n-  size_t committed_start = _heap->committed();\n@@ -177,1 +176,0 @@\n-  size_t committed_end = _heap->committed();\n@@ -179,2 +177,2 @@\n-  log_info(gc)(\"%s \" PROPERFMT \"(\" PROPERFMT \") %.3fms\",\n-               msg, PROPERFMTARGS(committed_start - committed_end), PROPERFMTARGS(_heap->capacity()),\n+  log_info(gc)(\"%s \" PROPERFMT \" (\" PROPERFMT \") %.3fms\",\n+               msg, PROPERFMTARGS(count * ShenandoahHeapRegion::region_size_bytes()), PROPERFMTARGS(_heap->capacity()),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUncommitThread.cpp","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"}]}