{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,3 +60,0 @@\n-\n-import java.io.PrintStream;\n-\n@@ -65,5 +62,0 @@\n-        int exitCode = run(args, System.out);\n-        System.exit(exitCode + 95);\n-    }\n-\n-    public static int run(String args[], PrintStream out) {\n@@ -72,2 +64,1 @@\n-        out.println(\"Maximal depth: \" + test.maxdepth);\n-        return 0;\n+        System.out.println(\"Maximal depth: \" + test.maxdepth);\n@@ -82,6 +73,2 @@\n-        } catch (Error error) {\n-            if (!(error instanceof StackOverflowError) &&\n-                    !(error instanceof OutOfMemoryError))\n-                throw error;\n-\n-            if (maxdepth == depth)\n+        } catch (StackOverflowError | OutOfMemoryError e) {\n+            if (maxdepth == depth) {\n@@ -89,0 +76,1 @@\n+            }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/stack\/stack001.java","additions":5,"deletions":17,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,3 +61,0 @@\n-\n-import java.io.PrintStream;\n-\n@@ -68,6 +65,1 @@\n-        int exitCode = run(args, System.out);\n-        System.exit(exitCode + 95);\n-    }\n-\n-    public static int run(String args[], PrintStream out) {\n-        Tester tester = new Tester(out);\n+        Tester tester = new Tester();\n@@ -81,2 +73,2 @@\n-                e.printStackTrace(out);\n-                return 2;\n+                e.printStackTrace();\n+                throw new RuntimeException(e);\n@@ -85,2 +77,1 @@\n-        out.println(\"Maximal depth: \" + tester.maxdepth);\n-        return 0;\n+        System.out.println(\"Maximal depth: \" + tester.maxdepth);\n@@ -91,1 +82,0 @@\n-        PrintStream out;\n@@ -94,2 +84,1 @@\n-        public Tester(PrintStream out) {\n-            this.out = out;\n+        public Tester() {\n@@ -111,4 +100,1 @@\n-            } catch (Error error) {\n-                if (!(error instanceof StackOverflowError) &&\n-                        !(error instanceof OutOfMemoryError))\n-                    throw error;\n+            } catch (StackOverflowError | OutOfMemoryError e) {\n@@ -132,1 +118,1 @@\n-                    this.sleep(1000);\n+                    Thread.sleep(1000);\n@@ -134,1 +120,1 @@\n-                    e.printStackTrace(tester.out);\n+                    e.printStackTrace();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/stack\/stack002.java","additions":9,"deletions":23,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,3 +55,0 @@\n-\n-import java.io.PrintStream;\n-\n@@ -63,3 +60,0 @@\n-        int exitCode = run(args, System.out);\n-        System.exit(exitCode + 95);\n-    }\n@@ -67,1 +61,0 @@\n-    public static int run(String args[], PrintStream out) {\n@@ -69,1 +62,1 @@\n-        for (depth = 1; ; depth += INCREMENT)\n+        for (depth = 1; ; depth += INCREMENT) {\n@@ -72,3 +65,1 @@\n-            } catch (StackOverflowError soe) {\n-                break;\n-            } catch (OutOfMemoryError oome) {\n+            } catch (StackOverflowError | OutOfMemoryError err) {\n@@ -77,2 +68,3 @@\n-        out.println(\"Max. depth: \" + depth);\n-        for (int i = 0; i < ITERATIONS; i++)\n+        }\n+        System.out.println(\"Max. depth: \" + depth);\n+        for (int i = 0; i < ITERATIONS; i++) {\n@@ -81,2 +73,2 @@\n-                out.println(\"?\");\n-            } catch (StackOverflowError soe) {\n+                System.out.println(\"?\");\n+            } catch (StackOverflowError | OutOfMemoryError err) {\n@@ -84,2 +76,0 @@\n-            } catch (OutOfMemoryError oome) {\n-                \/\/ Also OK.\n@@ -87,1 +77,1 @@\n-        return 0;\n+        }\n@@ -91,1 +81,1 @@\n-        if (depth > 0)\n+        if (depth > 0) {\n@@ -93,0 +83,1 @@\n+        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/stack\/stack003.java","additions":11,"deletions":20,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -55,3 +55,0 @@\n-\n-import java.io.PrintStream;\n-\n@@ -60,5 +57,0 @@\n-        int exitCode = run(args, System.out);\n-        System.exit(exitCode + 95);\n-    }\n-\n-    public static int run(String args[], PrintStream out) {\n@@ -66,2 +58,1 @@\n-        int exitCode = test.doRun(args, out);\n-        return exitCode;\n+        test.doRun();\n@@ -70,1 +61,1 @@\n-    public int doRun(String args[], PrintStream out) {\n+    public void doRun() {\n@@ -72,1 +63,1 @@\n-        for (depth = 100; ; depth += 100)\n+        for (depth = 100; ; depth += 100) {\n@@ -75,3 +66,1 @@\n-            } catch (StackOverflowError soe) {\n-                break;\n-            } catch (OutOfMemoryError oome) {\n+            } catch (StackOverflowError | OutOfMemoryError err) {\n@@ -80,2 +69,3 @@\n-        out.println(\"Max. depth: \" + depth);\n-        for (int i = 0; i < 100; i++)\n+        }\n+        System.out.println(\"Max. depth: \" + depth);\n+        for (int i = 0; i < 100; i++) {\n@@ -84,2 +74,2 @@\n-                out.println(\"?\");\n-            } catch (StackOverflowError soe) {\n+                System.out.println(\"?\");\n+            } catch (StackOverflowError | OutOfMemoryError err) {\n@@ -87,2 +77,0 @@\n-            } catch (OutOfMemoryError oome) {\n-                \/\/ Also OK.\n@@ -90,1 +78,1 @@\n-        return 0;\n+        }\n@@ -94,1 +82,1 @@\n-        if (depth > 0)\n+        if (depth > 0) {\n@@ -96,0 +84,1 @@\n+        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/stack\/stack004.java","additions":12,"deletions":23,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,3 +55,0 @@\n-\n-import java.io.PrintStream;\n-\n@@ -60,5 +57,0 @@\n-        int exitCode = run(args, System.out);\n-        System.exit(exitCode + 95);\n-    }\n-\n-    public static int run(String args[], PrintStream out) {\n@@ -67,1 +59,1 @@\n-        for (depth = 100; ; depth += 100)\n+        for (depth = 100; ; depth += 100) {\n@@ -70,3 +62,1 @@\n-            } catch (StackOverflowError soe) {\n-                break;\n-            } catch (OutOfMemoryError oome) {\n+            } catch (StackOverflowError | OutOfMemoryError soe) {\n@@ -75,2 +65,3 @@\n-        out.println(\"Max. depth: \" + depth);\n-        for (int i = 0; i < 100; i++)\n+        }\n+        System.out.println(\"Max. depth: \" + depth);\n+        for (int i = 0; i < 100; i++) {\n@@ -79,2 +70,2 @@\n-                out.println(\"?\");\n-            } catch (StackOverflowError soe) {\n+                System.out.println(\"?\");\n+            } catch (StackOverflowError | OutOfMemoryError err) {\n@@ -82,2 +73,0 @@\n-            } catch (OutOfMemoryError oome) {\n-                \/\/ Also OK.\n@@ -85,1 +74,1 @@\n-        return 0;\n+        }\n@@ -89,1 +78,1 @@\n-        if (depth > 0)\n+        if (depth > 0) {\n@@ -91,0 +80,1 @@\n+        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/stack\/stack005.java","additions":11,"deletions":21,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,3 +55,0 @@\n-\n-import java.io.PrintStream;\n-\n@@ -60,5 +57,0 @@\n-        int exitCode = run(args, System.out);\n-        System.exit(exitCode + 95);\n-    }\n-\n-    public static int run(String args[], PrintStream out) {\n@@ -67,1 +59,1 @@\n-        for (depth = 100; ; depth += 100)\n+        for (depth = 100; ; depth += 100) {\n@@ -70,3 +62,1 @@\n-            } catch (StackOverflowError soe) {\n-                break;\n-            } catch (OutOfMemoryError oome) {\n+            } catch (StackOverflowError | OutOfMemoryError err) {\n@@ -75,2 +65,3 @@\n-        out.println(\"Max. depth: \" + depth);\n-        for (int i = 0; i < 100; i++)\n+        }\n+        System.out.println(\"Max. depth: \" + depth);\n+        for (int i = 0; i < 100; i++) {\n@@ -79,2 +70,2 @@\n-                out.println(\"?\");\n-            } catch (StackOverflowError soe) {\n+                System.out.println(\"?\");\n+            } catch (StackOverflowError | OutOfMemoryError err) {\n@@ -82,2 +73,0 @@\n-            } catch (OutOfMemoryError oome) {\n-                \/\/ Also OK.\n@@ -85,1 +74,1 @@\n-        return 0;\n+        }\n@@ -89,1 +78,1 @@\n-        if (depth > 0)\n+        if (depth > 0) {\n@@ -91,0 +80,1 @@\n+        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/stack\/stack006.java","additions":11,"deletions":21,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,3 +54,0 @@\n-\n-import java.io.PrintStream;\n-\n@@ -62,5 +59,0 @@\n-        int exitCode = run(args, System.out);\n-        System.exit(exitCode + 95);\n-    }\n-\n-    public static int run(String args[], PrintStream out) {\n@@ -69,1 +61,1 @@\n-        for (depth = 100; ; depth += INCREMENT)\n+        for (depth = 100; ; depth += INCREMENT) {\n@@ -72,3 +64,1 @@\n-            } catch (StackOverflowError soe) {\n-                break;\n-            } catch (OutOfMemoryError oome) {\n+            } catch (StackOverflowError | OutOfMemoryError err) {\n@@ -77,2 +67,3 @@\n-        out.println(\"Max. depth: \" + depth);\n-        for (int i = 0; i < ITERATIONS; i++)\n+        }\n+        System.out.println(\"Max. depth: \" + depth);\n+        for (int i = 0; i < ITERATIONS; i++) {\n@@ -81,2 +72,2 @@\n-                out.println(\"?\");\n-            } catch (StackOverflowError soe) {\n+                System.out.println(\"?\");\n+            } catch (StackOverflowError | OutOfMemoryError err) {\n@@ -84,2 +75,0 @@\n-            } catch (OutOfMemoryError oome) {\n-                \/\/ Also OK.\n@@ -87,1 +76,1 @@\n-        return 0;\n+        }\n@@ -91,1 +80,1 @@\n-        if (depth > 0)\n+        if (depth > 0) {\n@@ -93,0 +82,1 @@\n+        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/stack\/stack007.java","additions":11,"deletions":21,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,2 +56,0 @@\n-\n-import java.io.PrintStream;\n@@ -63,5 +61,0 @@\n-        int exitCode = run(args, System.out);\n-        System.exit(exitCode + 95);\n-    }\n-\n-    public static int run(String args[], PrintStream out) {\n@@ -72,1 +65,1 @@\n-        for (depth = 100; ; depth += 100)\n+        for (depth = 100; ; depth += 100) {\n@@ -80,4 +73,2 @@\n-                target.printStackTrace(out);\n-                if (target instanceof ThreadDeath)\n-                    throw (ThreadDeath) target;\n-                return 2;\n+                target.printStackTrace();\n+                throw new RuntimeException(exception);\n@@ -85,1 +76,2 @@\n-        out.println(\"Max. depth: \" + depth);\n+        }\n+        System.out.println(\"Max. depth: \" + depth);\n@@ -89,1 +81,1 @@\n-        for (int i = 0; i < 100; i++)\n+        for (int i = 0; i < 100; i++) {\n@@ -92,1 +84,1 @@\n-\/\/              out.println(\"?\");\n+\/\/              System.out.println(\"?\");\n@@ -98,4 +90,2 @@\n-                target.printStackTrace(out);\n-                if (target instanceof ThreadDeath)\n-                    throw (ThreadDeath) target;\n-                return 2;\n+                target.printStackTrace();\n+                throw new RuntimeException(exception);\n@@ -103,1 +93,1 @@\n-        return 0;\n+        }\n@@ -143,1 +133,1 @@\n-        if (depth > 0)\n+        if (depth > 0) {\n@@ -148,0 +138,1 @@\n+        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/stack\/stack008.java","additions":13,"deletions":22,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,3 +55,0 @@\n-\n-import java.io.PrintStream;\n-\n@@ -60,6 +57,1 @@\n-        int exitCode = run(args, System.out);\n-        System.exit(exitCode + 95);\n-    }\n-\n-    public static int run(String args[], PrintStream out) {\n-        for (int depth = 100; ; depth += 100)\n+        for (int depth = 100; ; depth += 100) {\n@@ -68,4 +60,1 @@\n-            } catch (Error error1) {\n-                if (!(error1 instanceof StackOverflowError) &&\n-                        !(error1 instanceof OutOfMemoryError))\n-                    throw error1;\n+            } catch (StackOverflowError | OutOfMemoryError error1)  {\n@@ -73,1 +62,1 @@\n-                out.println(\"Max. depth: \" + depth);\n+                System.out.println(\"Max. depth: \" + depth);\n@@ -77,7 +66,3 @@\n-                    out.println(\"?\");\n-                } catch (Error error2) {\n-                    if (!(error2 instanceof StackOverflowError) &&\n-                            !(error2 instanceof OutOfMemoryError))\n-                        throw error2;\n-\n-                    \/\/ Stack overflow is OK here.\n+                    System.out.println(\"?\");\n+                } catch (StackOverflowError | OutOfMemoryError error2) {\n+                    \/\/ ignore\n@@ -85,1 +70,0 @@\n-\n@@ -88,1 +72,1 @@\n-        return 0;\n+        }\n@@ -92,1 +76,1 @@\n-        if (depth > 0)\n+        if (depth > 0) {\n@@ -94,0 +78,1 @@\n+        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/stack\/stack009.java","additions":10,"deletions":25,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,3 +55,0 @@\n-\n-import java.io.PrintStream;\n-\n@@ -59,2 +56,2 @@\n-    final static int THREADS = 10;\n-    final static int CYCLES = 10;\n+    final static int THREADS = 1;\n+    final static int CYCLES = 1;\n@@ -63,5 +60,0 @@\n-        int exitCode = run(args, System.out);\n-        System.exit(exitCode + 95);\n-    }\n-\n-    public static int run(String args[], PrintStream out) {\n@@ -72,1 +64,1 @@\n-        for (int depth = 10; ; depth += 10)\n+        for (int depth = 10; ; depth += 10) {\n@@ -76,3 +68,1 @@\n-            } catch (StackOverflowError soe) {\n-                break;\n-            } catch (OutOfMemoryError oome) {\n+            } catch (StackOverflowError | OutOfMemoryError err) {\n@@ -81,1 +71,2 @@\n-        out.println(\"Max. depth: \" + maxDepth);\n+        }\n+        System.out.println(\"Max. depth: \" + maxDepth);\n@@ -89,1 +80,1 @@\n-            threads[i].depthToTry = 10 * maxDepth;\n+            threads[i].depthToTry = 100 * maxDepth;\n@@ -92,2 +83,2 @@\n-        for (int i = 0; i < threads.length; i++)\n-            if (threads[i].isAlive())\n+        for (int i = 0; i < threads.length; i++) {\n+            if (threads[i].isAlive()) {\n@@ -97,2 +88,1 @@\n-                    exception.printStackTrace(out);\n-                    return 2;\n+                    throw new RuntimeException(exception);\n@@ -100,1 +90,2 @@\n-\n+            }\n+        }\n@@ -104,2 +95,1 @@\n-        int exitCode = 0;\n-        for (int i = 0; i < threads.length; i++)\n+        for (int i = 0; i < threads.length; i++) {\n@@ -107,2 +97,2 @@\n-                threads[i].thrown.printStackTrace(out);\n-                exitCode = 2;\n+                threads[i].thrown.printStackTrace();\n+                throw new RuntimeException(\"Exception in the thread \" + threads[i], threads[i].thrown);\n@@ -110,4 +100,1 @@\n-\n-        if (exitCode != 0)\n-            out.println(\"# TEST FAILED\");\n-        return exitCode;\n+        }\n@@ -120,1 +107,1 @@\n-        for (int i = 0; i < CYCLES; i++)\n+        for (int i = 0; i < CYCLES; i++) {\n@@ -122,0 +109,1 @@\n+                System.out.println(\"depth = \" +depthToTry);\n@@ -127,5 +115,2 @@\n-            } catch (StackOverflowError soe) {\n-                \/\/ It's OK: stack overflow was expected.\n-            } catch (OutOfMemoryError oome) {\n-                \/\/ Also OK: out of memory may indacate stack overflow.\n-\n+            } catch (StackOverflowError | OutOfMemoryError err) {\n+                \/\/ It's OK\n@@ -133,2 +118,0 @@\n-                if (throwable instanceof ThreadDeath)\n-                    throw (ThreadDeath) throwable;\n@@ -139,0 +122,1 @@\n+        }\n@@ -142,1 +126,1 @@\n-        if (depth > 0)\n+        if (depth > 0) {\n@@ -144,0 +128,1 @@\n+        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/stack\/stack010.java","additions":24,"deletions":39,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,3 +55,0 @@\n-\n-import java.io.PrintStream;\n-\n@@ -63,5 +60,0 @@\n-        int exitCode = run(args, System.out);\n-        System.exit(exitCode + 95);\n-    }\n-\n-    public static int run(String args[], PrintStream out) {\n@@ -72,1 +64,1 @@\n-        for (int depth = 10; ; depth += 10)\n+        for (int depth = 10; ; depth += 10) {\n@@ -76,3 +68,1 @@\n-            } catch (StackOverflowError soe) {\n-                break;\n-            } catch (OutOfMemoryError oome) {\n+            } catch (StackOverflowError | OutOfMemoryError soe) {\n@@ -81,1 +71,2 @@\n-        out.println(\"Max. depth: \" + maxDepth);\n+        }\n+        System.out.println(\"Max. depth: \" + maxDepth);\n@@ -92,2 +83,2 @@\n-        for (int i = 0; i < threads.length; i++)\n-            if (threads[i].isAlive())\n+        for (int i = 0; i < threads.length; i++) {\n+            if (threads[i].isAlive()) {\n@@ -97,2 +88,1 @@\n-                    exception.printStackTrace(out);\n-                    return 2;\n+                    throw new RuntimeException(exception);\n@@ -100,1 +90,2 @@\n-\n+            }\n+        }\n@@ -104,2 +95,1 @@\n-        int exitCode = 0;\n-        for (int i = 0; i < threads.length; i++)\n+        for (int i = 0; i < threads.length; i++) {\n@@ -107,2 +97,2 @@\n-                threads[i].thrown.printStackTrace(out);\n-                exitCode = 2;\n+                threads[i].thrown.printStackTrace();\n+                throw new RuntimeException(\"Exception in the thread \" + threads[i], threads[i].thrown);\n@@ -110,4 +100,1 @@\n-\n-        if (exitCode != 0)\n-            out.println(\"# TEST FAILED\");\n-        return exitCode;\n+        }\n@@ -120,1 +107,1 @@\n-        for (int i = 0; i < CYCLES; i++)\n+        for (int i = 0; i < CYCLES; i++) {\n@@ -127,5 +114,2 @@\n-            } catch (StackOverflowError error) {\n-                \/\/ It's OK: stack overflow was expected.\n-            } catch (OutOfMemoryError oome) {\n-                \/\/ Also OK: recursion may result in memory lack.\n-\n+            } catch (StackOverflowError | OutOfMemoryError err) {\n+                \/\/ It's OK\n@@ -133,2 +117,0 @@\n-                if (throwable instanceof ThreadDeath)\n-                    throw (ThreadDeath) throwable;\n@@ -139,0 +121,1 @@\n+        }\n@@ -142,1 +125,1 @@\n-        if (depth > 0)\n+        if (depth > 0) {\n@@ -144,0 +127,1 @@\n+        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/stack\/stack011.java","additions":20,"deletions":36,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,3 +56,0 @@\n-\n-import java.io.PrintStream;\n-\n@@ -64,5 +61,0 @@\n-        int exitCode = run(args, System.out);\n-        System.exit(exitCode + 95);\n-    }\n-\n-    public static int run(String args[], PrintStream out) {\n@@ -74,1 +66,1 @@\n-        for (int depth = 10; ; depth += 10)\n+        for (int depth = 10; ; depth += 10) {\n@@ -78,3 +70,1 @@\n-            } catch (StackOverflowError soe) {\n-                break;\n-            } catch (OutOfMemoryError oome) {\n+            } catch (StackOverflowError | OutOfMemoryError err) {\n@@ -83,1 +73,2 @@\n-        out.println(\"Max. depth: \" + maxDepth);\n+        }\n+        System.out.println(\"Max. depth: \" + maxDepth);\n@@ -94,2 +85,2 @@\n-        for (int i = 0; i < threads.length; i++)\n-            if (threads[i].isAlive())\n+        for (int i = 0; i < threads.length; i++) {\n+            if (threads[i].isAlive()) {\n@@ -99,2 +90,1 @@\n-                    exception.printStackTrace(out);\n-                    return 2;\n+                    throw new RuntimeException(exception);\n@@ -102,1 +92,2 @@\n-\n+            }\n+        }\n@@ -106,2 +97,1 @@\n-        int exitCode = 0;\n-        for (int i = 0; i < threads.length; i++)\n+        for (int i = 0; i < threads.length; i++) {\n@@ -109,2 +99,2 @@\n-                threads[i].thrown.printStackTrace(out);\n-                exitCode = 2;\n+                threads[i].thrown.printStackTrace();\n+                throw new RuntimeException(\"Exception in the thread \" + threads[i], threads[i].thrown);\n@@ -112,4 +102,1 @@\n-\n-        if (exitCode != 0)\n-            out.println(\"# TEST FAILED\");\n-        return exitCode;\n+        }\n@@ -122,1 +109,1 @@\n-        for (int i = 0; i < CYCLES; i++)\n+        for (int i = 0; i < CYCLES; i++) {\n@@ -129,5 +116,2 @@\n-            } catch (StackOverflowError error) {\n-                \/\/ It's OK: stack overflow was expected.\n-            } catch (OutOfMemoryError oome) {\n-                \/\/ Also OK: invocation may result in out of memory.\n-\n+            } catch (StackOverflowError | OutOfMemoryError err) {\n+                \/\/ It's OK\n@@ -135,2 +119,0 @@\n-                if (throwable instanceof ThreadDeath)\n-                    throw (ThreadDeath) throwable;\n@@ -141,0 +123,1 @@\n+        }\n@@ -144,1 +127,1 @@\n-        if (depth > 0)\n+        if (depth > 0) {\n@@ -146,0 +129,1 @@\n+        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/stack\/stack012.java","additions":20,"deletions":36,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,3 +55,0 @@\n-\n-import java.io.PrintStream;\n-\n@@ -63,5 +60,0 @@\n-        int exitCode = run(args, System.out);\n-        System.exit(exitCode + 95);\n-    }\n-\n-    public static int run(String args[], PrintStream out) {\n@@ -73,1 +65,1 @@\n-        for (int depth = 10; ; depth += 10)\n+        for (int depth = 10; ; depth += 10) {\n@@ -77,3 +69,1 @@\n-            } catch (StackOverflowError soe) {\n-                break;\n-            } catch (OutOfMemoryError oome) {\n+            } catch (StackOverflowError | OutOfMemoryError err) {\n@@ -82,1 +72,2 @@\n-        out.println(\"Max. depth: \" + maxDepth);\n+        }\n+        System.out.println(\"Max. depth: \" + maxDepth);\n@@ -94,2 +85,2 @@\n-        for (int i = 0; i < threads.length; i++)\n-            if (threads[i].isAlive())\n+        for (int i = 0; i < threads.length; i++) {\n+            if (threads[i].isAlive()) {\n@@ -99,2 +90,1 @@\n-                    exception.printStackTrace(out);\n-                    return 2;\n+                    throw new RuntimeException(exception);\n@@ -102,1 +92,2 @@\n-\n+            }\n+        }\n@@ -106,2 +97,1 @@\n-        int exitCode = 0;\n-        for (int i = 0; i < threads.length; i++)\n+        for (int i = 0; i < threads.length; i++) {\n@@ -109,2 +99,2 @@\n-                threads[i].thrown.printStackTrace(out);\n-                exitCode = 2;\n+                threads[i].thrown.printStackTrace();\n+                throw new RuntimeException(\"Exception in the thread \" + threads[i], threads[i].thrown);\n@@ -112,4 +102,1 @@\n-\n-        if (exitCode != 0)\n-            out.println(\"# TEST FAILED\");\n-        return exitCode;\n+        }\n@@ -119,1 +106,1 @@\n-        if (depth > 0)\n+        if (depth > 0) {\n@@ -121,0 +108,1 @@\n+        }\n@@ -138,1 +126,1 @@\n-        for (int i = 0; i < cycles; i++)\n+        for (int i = 0; i < cycles; i++) {\n@@ -145,5 +133,2 @@\n-            } catch (StackOverflowError error) {\n-                \/\/ It's OK: stack overflow was expected.\n-            } catch (OutOfMemoryError oome) {\n-                \/\/ Also OK: out of memory is eligible here.\n-\n+            } catch (StackOverflowError | OutOfMemoryError err) {\n+                \/\/ It's OK\n@@ -151,2 +136,0 @@\n-                if (throwable instanceof ThreadDeath)\n-                    throw (ThreadDeath) throwable;\n@@ -157,0 +140,1 @@\n+        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/stack\/stack013.java","additions":20,"deletions":36,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,3 +58,0 @@\n-\n-import java.io.PrintStream;\n-\n@@ -66,5 +63,0 @@\n-        int exitCode = run(args, System.out);\n-        System.exit(exitCode + 95);\n-    }\n-\n-    public static int run(String args[], PrintStream out) {\n@@ -76,1 +68,1 @@\n-        for (int depth = 10; ; depth += 10)\n+        for (int depth = 10; ; depth += 10) {\n@@ -80,3 +72,1 @@\n-            } catch (StackOverflowError soe) {\n-                break;\n-            } catch (OutOfMemoryError oome) {\n+            } catch (StackOverflowError | OutOfMemoryError err) {\n@@ -85,1 +75,2 @@\n-        out.println(\"Max. depth: \" + maxDepth);\n+        }\n+        System.out.println(\"Max. depth: \" + maxDepth);\n@@ -97,2 +88,2 @@\n-        for (int i = 0; i < threads.length; i++)\n-            if (threads[i].isAlive())\n+        for (int i = 0; i < threads.length; i++) {\n+            if (threads[i].isAlive()) {\n@@ -102,2 +93,1 @@\n-                    exception.printStackTrace(out);\n-                    return 2;\n+                    throw new RuntimeException(exception);\n@@ -105,1 +95,2 @@\n-\n+            }\n+        }\n@@ -109,2 +100,1 @@\n-        int exitCode = 0;\n-        for (int i = 0; i < threads.length; i++)\n+        for (int i = 0; i < threads.length; i++) {\n@@ -112,2 +102,2 @@\n-                threads[i].thrown.printStackTrace(out);\n-                exitCode = 2;\n+                threads[i].thrown.printStackTrace();\n+                throw new RuntimeException(\"Exception in the thread \" + threads[i], threads[i].thrown);\n@@ -115,4 +105,1 @@\n-\n-        if (exitCode != 0)\n-            out.println(\"# TEST FAILED\");\n-        return exitCode;\n+        }\n@@ -122,1 +109,1 @@\n-        if (depth > 0)\n+        if (depth > 0) {\n@@ -124,0 +111,1 @@\n+        }\n@@ -141,1 +129,1 @@\n-        for (int i = 0; i < cycles; i++)\n+        for (int i = 0; i < cycles; i++) {\n@@ -148,5 +136,2 @@\n-            } catch (StackOverflowError error) {\n-                \/\/ It's OK: stack overflow was expected.\n-            } catch (OutOfMemoryError oome) {\n-                \/\/ Also OK: if there is no memory for stack expansion.\n-\n+            } catch (StackOverflowError | OutOfMemoryError err) {\n+                \/\/ It's OK\n@@ -154,2 +139,0 @@\n-                if (throwable instanceof ThreadDeath)\n-                    throw (ThreadDeath) throwable;\n@@ -160,0 +143,1 @@\n+        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/stack\/stack014.java","additions":20,"deletions":36,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,3 +56,0 @@\n-\n-import java.io.PrintStream;\n-\n@@ -66,5 +63,0 @@\n-        int exitCode = run(args, System.out);\n-        System.exit(exitCode + 95);\n-    }\n-\n-    public static int run(String args[], PrintStream out) {\n@@ -82,1 +74,1 @@\n-        for (int depth = 0; ; depth += STEP)\n+        for (int depth = 0; ; depth += STEP) {\n@@ -86,3 +78,1 @@\n-            } catch (StackOverflowError soe) {\n-                break;\n-            } catch (OutOfMemoryError oome) {\n+            } catch (StackOverflowError | OutOfMemoryError err) {\n@@ -91,1 +81,2 @@\n-        out.println(\"Max. depth: \" + maxDepth);\n+        }\n+        System.out.println(\"Max. depth: \" + maxDepth);\n@@ -102,2 +93,2 @@\n-        for (int i = 0; i < threads.length; i++)\n-            if (threads[i].isAlive())\n+        for (int i = 0; i < threads.length; i++) {\n+            if (threads[i].isAlive()) {\n@@ -107,2 +98,1 @@\n-                    exception.printStackTrace(out);\n-                    return 2;\n+                    throw new RuntimeException(exception);\n@@ -110,1 +100,2 @@\n-\n+            }\n+        }\n@@ -114,2 +105,1 @@\n-        int exitCode = 0;\n-        for (int i = 0; i < threads.length; i++)\n+        for (int i = 0; i < threads.length; i++) {\n@@ -117,2 +107,2 @@\n-                threads[i].thrown.printStackTrace(out);\n-                exitCode = 2;\n+                threads[i].thrown.printStackTrace();\n+                throw new RuntimeException(\"Exception in the thread \" + threads[i], threads[i].thrown);\n@@ -120,4 +110,1 @@\n-\n-        if (exitCode != 0)\n-            out.println(\"# TEST FAILED\");\n-        return exitCode;\n+        }\n@@ -127,1 +114,1 @@\n-        if (depth > 0)\n+        if (depth > 0) {\n@@ -129,0 +116,1 @@\n+        }\n@@ -146,1 +134,1 @@\n-        if (depth > 0)\n+        if (depth > 0) {\n@@ -148,0 +136,1 @@\n+        }\n@@ -159,1 +148,1 @@\n-        for (int i = 0; i < stack015.CYCLES; i++)\n+        for (int i = 0; i < stack015.CYCLES; i++) {\n@@ -170,5 +159,2 @@\n-            } catch (StackOverflowError error) {\n-                \/\/ It's OK: stack overflow was expected.\n-            } catch (OutOfMemoryError oome) {\n-                \/\/ Also OK: there may be no memory for stack expansion.\n-\n+            } catch (StackOverflowError | OutOfMemoryError err) {\n+                \/\/ It's OK\n@@ -176,2 +162,0 @@\n-                if (throwable instanceof ThreadDeath)\n-                    throw (ThreadDeath) throwable;\n@@ -182,0 +166,1 @@\n+        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/stack\/stack015.java","additions":22,"deletions":37,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,2 +64,0 @@\n-import java.io.PrintStream;\n-\n@@ -74,5 +72,0 @@\n-        int exitCode = run(args, System.out);\n-        System.exit(exitCode + 95);\n-    }\n-\n-    public static int run(String args[], PrintStream out) {\n@@ -81,1 +74,1 @@\n-        for (int i = 0; i < args.length; i++)\n+        for (int i = 0; i < args.length; i++) {\n@@ -86,1 +79,2 @@\n-        if (!eager)\n+        }\n+        if (!eager) {\n@@ -88,1 +82,1 @@\n-        stack016.out = out;\n+        }\n@@ -90,1 +84,1 @@\n-        return test.doRun();\n+        test.doRun();\n@@ -94,1 +88,0 @@\n-    private static PrintStream out;\n@@ -97,1 +90,1 @@\n-        if (!verbose)\n+        if (!verbose) {\n@@ -99,2 +92,0 @@\n-        synchronized (out) {\n-            out.println(message.toString());\n@@ -102,0 +93,1 @@\n+        System.out.println(message.toString());\n@@ -104,1 +96,1 @@\n-    private int doRun() {\n+    private void doRun() {\n@@ -117,1 +109,1 @@\n-        out.println(\"Maximal recursion depth: \" + maxDepth);\n+        System.out.println(\"Maximal recursion depth: \" + maxDepth);\n@@ -134,2 +126,1 @@\n-                    exception.printStackTrace(out);\n-                    return 2;\n+                    throw new RuntimeException(exception);\n@@ -143,1 +134,0 @@\n-        int exitCode = 0;\n@@ -146,2 +136,2 @@\n-                threads[i].thrown.printStackTrace(out);\n-                exitCode = 2;\n+                threads[i].thrown.printStackTrace();\n+                throw new RuntimeException(\"Exception in the thread \" + threads[i], threads[i].thrown);\n@@ -150,3 +140,0 @@\n-        if (exitCode != 0)\n-            out.println(\"# TEST FAILED\");\n-        return exitCode;\n@@ -164,5 +151,1 @@\n-            } catch (Error error) {\n-                if (!(error instanceof StackOverflowError) &&\n-                        !(error instanceof OutOfMemoryError))\n-                    throw error;\n-\n+            } catch (StackOverflowError | OutOfMemoryError error) {\n@@ -183,1 +166,1 @@\n-        if (depth > 0)\n+        if (depth > 0) {\n@@ -185,0 +168,1 @@\n+        }\n@@ -197,5 +181,2 @@\n-            } catch (StackOverflowError error) {\n-                \/\/ It's OK: stack overflow was expected.\n-            } catch (OutOfMemoryError oome) {\n-                \/\/ Also OK, if there is no memory for stack expansion.\n-\n+            } catch (StackOverflowError | OutOfMemoryError err) {\n+                \/\/ It's OK\n@@ -203,2 +184,0 @@\n-                if (throwable instanceof ThreadDeath)\n-                    throw (ThreadDeath) throwable;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/stack\/stack016.java","additions":18,"deletions":39,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -55,2 +55,0 @@\n-import java.io.PrintStream;\n-\n@@ -63,6 +61,0 @@\n-        int exitCode = run(args, System.out);\n-        System.exit(exitCode + 95);\n-    }\n-\n-    public static int run(String args[], PrintStream out) {\n-        verbose = false;\n@@ -70,4 +62,2 @@\n-        for (int i = 0; i < args.length; i++)\n-            if (args[i].toLowerCase().equals(\"-verbose\"))\n-                verbose = true;\n-            else if (args[i].toLowerCase().equals(\"-eager\"))\n+        for (int i = 0; i < args.length; i++) {\n+            if (args[i].toLowerCase().equals(\"-eager\")) {\n@@ -75,1 +65,3 @@\n-        if (!eager)\n+            }\n+        }\n+        if (!eager) {\n@@ -77,13 +69,0 @@\n-        stack017.out = out;\n-        stack017 test = new stack017();\n-        return test.doRun();\n-    }\n-\n-    private static boolean verbose;\n-    private static PrintStream out;\n-\n-    private void display(Object message) {\n-        if (!verbose)\n-            return;\n-        synchronized (out) {\n-            out.println(message.toString());\n@@ -91,0 +70,2 @@\n+        stack017 test = new stack017();\n+        test.doRun();\n@@ -95,1 +76,1 @@\n-    private int doRun() {\n+    private void doRun() {\n@@ -101,2 +82,1 @@\n-        } catch (StackOverflowError soe) {\n-        } catch (OutOfMemoryError oome) {\n+        } catch (StackOverflowError | OutOfMemoryError err) {\n@@ -104,1 +84,1 @@\n-        out.println(\"Maximal recursion depth: \" + maxDepth);\n+        System.out.println(\"Maximal recursion depth: \" + maxDepth);\n@@ -116,2 +96,2 @@\n-        for (int i = 0; i < threads.length; i++)\n-            if (threads[i].isAlive())\n+        for (int i = 0; i < threads.length; i++) {\n+            if (threads[i].isAlive()) {\n@@ -121,2 +101,1 @@\n-                    exception.printStackTrace(out);\n-                    return 2;\n+                    throw new RuntimeException(exception);\n@@ -124,1 +103,2 @@\n-\n+            }\n+        }\n@@ -128,2 +108,1 @@\n-        int exitCode = 0;\n-        for (int i = 0; i < threads.length; i++)\n+        for (int i = 0; i < threads.length; i++) {\n@@ -131,2 +110,2 @@\n-                threads[i].thrown.printStackTrace(out);\n-                exitCode = 2;\n+                threads[i].thrown.printStackTrace();\n+                throw new RuntimeException(\"Exception in the thread \" + threads[i], threads[i].thrown);\n@@ -134,4 +113,1 @@\n-\n-        if (exitCode != 0)\n-            out.println(\"# TEST FAILED\");\n-        return exitCode;\n+        }\n@@ -151,5 +127,1 @@\n-        } catch (Error error) {\n-            if (!(error instanceof StackOverflowError) &&\n-                    !(error instanceof OutOfMemoryError))\n-                throw error;\n-\n+        } catch (StackOverflowError | OutOfMemoryError error) {\n@@ -172,1 +144,1 @@\n-                display(threadName + \", iteration: \" + i + \"\/\" + CYCLES);\n+                System.out.println(threadName + \", iteration: \" + i + \"\/\" + CYCLES);\n@@ -177,5 +149,2 @@\n-            } catch (StackOverflowError oome) {\n-                \/\/ It's OK: stack overflow was expected.\n-            } catch (OutOfMemoryError oome) {\n-                \/\/ Also OK, if there is no memory for stack expansion.\n-\n+            } catch (StackOverflowError | OutOfMemoryError err) {\n+                \/\/ It's OK\n@@ -183,2 +152,0 @@\n-                if (throwable instanceof ThreadDeath)\n-                    throw (ThreadDeath) throwable;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/stack\/stack017.java","additions":23,"deletions":56,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -60,1 +60,0 @@\n-import java.io.PrintStream;\n@@ -71,6 +70,0 @@\n-        int exitCode = run(args, System.out);\n-        System.exit(exitCode + 95);\n-    }\n-\n-    public static int run(String args[], PrintStream out) {\n-        verbose = false;\n@@ -78,4 +71,2 @@\n-        for (int i = 0; i < args.length; i++)\n-            if (args[i].toLowerCase().equals(\"-verbose\"))\n-                verbose = true;\n-            else if (args[i].toLowerCase().equals(\"-eager\"))\n+        for (int i = 0; i < args.length; i++) {\n+            if (args[i].toLowerCase().equals(\"-eager\")) {\n@@ -83,1 +74,3 @@\n-        if (!eager)\n+            }\n+        }\n+        if (!eager) {\n@@ -85,13 +78,0 @@\n-        stack018.out = out;\n-        stack018 test = new stack018();\n-        return test.doRun();\n-    }\n-\n-    private static boolean verbose;\n-    private static PrintStream out;\n-\n-    private void display(Object message) {\n-        if (!verbose)\n-            return;\n-        synchronized (out) {\n-            out.println(message.toString());\n@@ -99,0 +79,2 @@\n+        stack018 test = new stack018();\n+        test.doRun();\n@@ -101,1 +83,1 @@\n-    private int doRun() {\n+    private void doRun() {\n@@ -115,4 +97,2 @@\n-                target.printStackTrace(out);\n-                if (target instanceof ThreadDeath)\n-                    throw (ThreadDeath) target;\n-                return 2;\n+                target.printStackTrace();\n+                throw new RuntimeException(exception);\n@@ -126,1 +106,1 @@\n-        out.println(\"Maximal recursion depth: \" + maxDepth);\n+        System.out.println(\"Maximal recursion depth: \" + maxDepth);\n@@ -138,2 +118,2 @@\n-        for (int i = 0; i < threads.length; i++)\n-            if (threads[i].isAlive())\n+        for (int i = 0; i < threads.length; i++) {\n+            if (threads[i].isAlive()) {\n@@ -143,2 +123,1 @@\n-                    exception.printStackTrace(out);\n-                    return 2;\n+                    throw new RuntimeException(exception);\n@@ -146,1 +125,2 @@\n-\n+            }\n+        }\n@@ -151,1 +131,1 @@\n-        for (int i = 0; i < threads.length; i++)\n+        for (int i = 0; i < threads.length; i++) {\n@@ -153,1 +133,1 @@\n-                out.println(\"# \" + threads[i].getName()\n+                System.out.println(\"# \" + threads[i].getName()\n@@ -155,1 +135,1 @@\n-                exitCode = 2;\n+                throw new RuntimeException(\"Exception in the thread \" + threads[i], threads[i].thrown);\n@@ -157,4 +137,1 @@\n-\n-        if (exitCode != 0)\n-            out.println(\"# TEST FAILED\");\n-        return exitCode;\n+        }\n@@ -170,1 +147,1 @@\n-                display(threadName + \", iteration: \" + i + \"\/\" + CYCLES);\n+                System.out.println(threadName + \", iteration: \" + i + \"\/\" + CYCLES);\n@@ -179,2 +156,0 @@\n-                if (target instanceof ThreadDeath)\n-                    throw (ThreadDeath) target;\n@@ -218,1 +193,1 @@\n-        if (depth > 0)\n+        if (depth > 0) {\n@@ -223,0 +198,1 @@\n+        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/stack\/stack018.java","additions":23,"deletions":47,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-\n@@ -56,2 +55,0 @@\n-import java.io.PrintStream;\n-\n@@ -63,6 +60,1 @@\n-        int exitCode = run(args, System.out);\n-        System.exit(exitCode + 95);\n-    }\n-\n-    public static int run(String args[], PrintStream out) {\n-        boolean verbose = false, eager = false;\n+        boolean eager = false;\n@@ -70,3 +62,1 @@\n-            if (args[i].toLowerCase().equals(\"-verbose\"))\n-                verbose = true;\n-            else if (args[i].toLowerCase().equals(\"-eager\"))\n+             if (args[i].toLowerCase().equals(\"-eager\"))\n@@ -74,1 +64,1 @@\n-        if (!eager)\n+        if (!eager) {\n@@ -76,0 +66,1 @@\n+        }\n@@ -81,2 +72,1 @@\n-        } catch (StackOverflowError soe) {\n-        } catch (OutOfMemoryError oome) {\n+        } catch (StackOverflowError | OutOfMemoryError err) {\n@@ -84,1 +74,1 @@\n-        out.println(\"Maximal recursion depth: \" + maxDepth);\n+        System.out.println(\"Maximal recursion depth: \" + maxDepth);\n@@ -92,1 +82,1 @@\n-                out.println(\"Iteration: \" + i + \"\/\" + CYCLES);\n+                System.out.println(\"Iteration: \" + i + \"\/\" + CYCLES);\n@@ -94,7 +84,3 @@\n-                out.println(\"# TEST_BUG: stack overflow was expected!\");\n-                return 2;\n-\n-            } catch (StackOverflowError error) {\n-            } catch (OutOfMemoryError oome) {\n-                \/\/ It's OK: stack overflow was expected.\n-\n+                throw new RuntimeException(\"# TEST_BUG: stack overflow was expected!\");\n+            } catch (StackOverflowError | OutOfMemoryError error) {\n+                \/\/ It's OK\n@@ -102,4 +88,1 @@\n-                if (throwable instanceof ThreadDeath)\n-                    throw (ThreadDeath) throwable;\n-                throwable.printStackTrace(out);\n-                return 2;\n+                throw new RuntimeException(throwable);\n@@ -108,1 +91,0 @@\n-        return 0;\n@@ -123,5 +105,1 @@\n-        } catch (Error error) {\n-            if (!(error instanceof StackOverflowError) &&\n-                    !(error instanceof OutOfMemoryError))\n-                throw error;\n-\n+        } catch (StackOverflowError | OutOfMemoryError error){\n@@ -132,1 +110,1 @@\n-            if (depth < depthToTry - PROBES)\n+            if (depth < depthToTry - PROBES) {\n@@ -134,0 +112,1 @@\n+            }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/stack\/stack019.java","additions":14,"deletions":35,"binary":false,"changes":49,"status":"modified"}]}