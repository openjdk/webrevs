{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.security.SecureRandom;\n-import java.security.InvalidParameterException;\n@@ -31,1 +29,2 @@\n-import java.security.InvalidKeyException;\n+import java.security.InvalidParameterException;\n+import java.security.SecureRandom;\n@@ -37,0 +36,1 @@\n+\n@@ -40,1 +40,1 @@\n- * This class generates a AES key.\n+ * This class generates an AES key.\n@@ -108,1 +108,1 @@\n-        SecretKeySpec aesKey = null;\n+        SecretKeySpec aesKey;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/AESKeyGenerator.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,5 @@\n-import java.util.Arrays;\n-import java.security.*;\n-import java.security.spec.*;\n-import javax.crypto.*;\n-import javax.crypto.spec.*;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidKeyException;\n+import java.security.MessageDigest;\n+import javax.crypto.IllegalBlockSizeException;\n+\n@@ -69,1 +69,1 @@\n-    };\n+    }\n@@ -77,1 +77,1 @@\n-    };\n+    }\n@@ -115,1 +115,1 @@\n-    };\n+    }\n@@ -118,1 +118,1 @@\n-    \/\/ no support for multi-part encryption\n+    \/\/ no support for multipart encryption\n@@ -122,1 +122,1 @@\n-    };\n+    }\n@@ -124,1 +124,1 @@\n-    \/\/ no support for multi-part decryption\n+    \/\/ no support for multipart decryption\n@@ -128,1 +128,1 @@\n-    };\n+    }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/AESKeyWrap.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidKeyException;\n@@ -30,4 +32,2 @@\n-import java.security.*;\n-import java.security.spec.*;\n-import javax.crypto.*;\n-import javax.crypto.spec.*;\n+import javax.crypto.IllegalBlockSizeException;\n+\n@@ -52,1 +52,1 @@\n-    \/\/ set the first semiblock of dest with iv and inLen\n+    \/\/ set the first semi-block of dest with iv and inLen\n@@ -63,1 +63,1 @@\n-    \/\/ validate the recovered internal ivAndLen semiblock against iv and\n+    \/\/ validate the recovered internal ivAndLen semi-block against iv and\n@@ -106,1 +106,1 @@\n-    };\n+    }\n@@ -114,1 +114,1 @@\n-    };\n+    }\n@@ -154,1 +154,1 @@\n-    };\n+    }\n@@ -156,1 +156,1 @@\n-    \/\/ no support for multi-part encryption\n+    \/\/ no support for multipart encryption\n@@ -160,1 +160,1 @@\n-    };\n+    }\n@@ -162,1 +162,1 @@\n-    \/\/ no support for multi-part decryption\n+    \/\/ no support for multipart decryption\n@@ -166,1 +166,1 @@\n-    };\n+    }\n@@ -202,1 +202,1 @@\n-            \/\/ overwrite the first semiblock with iv and input length\n+            \/\/ overwrite the first semi-block with iv and input length\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/AESKeyWrapPadded.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        if (mode.equalsIgnoreCase(\"ECB\") == false) {\n+        if (!mode.equalsIgnoreCase(\"ECB\")) {\n@@ -126,1 +126,1 @@\n-        if (padding.equalsIgnoreCase(\"NoPadding\") == false) {\n+        if (!padding.equalsIgnoreCase(\"NoPadding\")) {\n@@ -204,1 +204,1 @@\n-        if (\"RAW\".equals(key.getFormat()) == false) {\n+        if (!\"RAW\".equals(key.getFormat())) {\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ARCFOURCipher.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -159,1 +159,1 @@\n-        if (mode.equalsIgnoreCase(\"None\") == false) {\n+        if (!mode.equalsIgnoreCase(\"None\")) {\n@@ -177,1 +177,1 @@\n-        if (padding.equalsIgnoreCase(\"NoPadding\") == false) {\n+        if (!padding.equalsIgnoreCase(\"NoPadding\")) {\n@@ -329,1 +329,1 @@\n-        byte[] newNonce = null;\n+        byte[] newNonce;\n@@ -363,1 +363,1 @@\n-     * format.  This cipher does supports initialization with\n+     * format.  This cipher supports initialization with\n@@ -621,1 +621,1 @@\n-        if (\"RAW\".equals(key.getFormat()) == false) {\n+        if (!\"RAW\".equals(key.getFormat())) {\n@@ -678,1 +678,1 @@\n-        int bytesUpdated = 0;\n+        int bytesUpdated;\n@@ -766,1 +766,1 @@\n-        int bytesUpdated = 0;\n+        int bytesUpdated;\n@@ -950,4 +950,0 @@\n-     * @throws IllegalArgumentException if the key or nonce are not in\n-     *      their proper lengths (32 bytes for the key, 12 bytes for the\n-     *      nonce).\n-     * @throws InvalidKeyException if the key does not support an encoded form.\n@@ -955,1 +951,1 @@\n-    private void setInitialState() throws InvalidKeyException {\n+    private void setInitialState() {\n@@ -1260,2 +1256,0 @@\n-     * @throws ShortBufferException if there is insufficient room to\n-     *      write the tag.\n@@ -1264,1 +1258,1 @@\n-            byte[] out, int outOff) throws ShortBufferException {\n+            byte[] out, int outOff) {\n@@ -1303,1 +1297,1 @@\n-     * @note it is the caller's responsibility to provide an array large\n+     * @implNote it is the caller's responsibility to provide an array large\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ChaCha20Cipher.java","additions":11,"deletions":17,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -209,3 +209,2 @@\n-        StringBuilder sb = new StringBuilder(LINE_SEP + \"nonce:\" +\n-                LINE_SEP + \"[\" + encoder.encodeBuffer(nonce) + \"]\");\n-        return sb.toString();\n+        return LINE_SEP + \"nonce:\" +\n+                LINE_SEP + \"[\" + encoder.encodeBuffer(nonce) + \"]\";\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ChaCha20Poly1305Parameters.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -183,1 +183,1 @@\n-     * (This check is omitted here, to avoid double checking.)\n+     * (This check is omitted here, to avoid double-checking.)\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/CipherBlockChaining.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,1 +70,1 @@\n-    private int unitBytes = 0;\n+    private int unitBytes;\n@@ -94,1 +94,1 @@\n-    private int diffBlocksize = 0;\n+    private int diffBlocksize;\n@@ -99,1 +99,1 @@\n-    private Padding padding = null;\n+    private Padding padding;\n@@ -104,1 +104,1 @@\n-    private FeedbackCipher cipher = null;\n+    private FeedbackCipher cipher;\n@@ -139,1 +139,1 @@\n-         * In decryption mode, it also hold the possible padding block.\n+         * In decryption mode, it also holds the possible padding block.\n@@ -337,1 +337,1 @@\n-        AlgorithmParameters params = null;\n+        AlgorithmParameters params;\n@@ -548,1 +548,1 @@\n-        byte[] output = null;\n+        byte[] output;\n@@ -874,1 +874,0 @@\n-        int totalLen = len;\n@@ -878,2 +877,2 @@\n-            if (totalLen < diffBlocksize) {\n-                paddingLen = diffBlocksize - totalLen;\n+            if (len < diffBlocksize) {\n+                paddingLen = diffBlocksize - len;\n@@ -882,1 +881,1 @@\n-                    ((totalLen - diffBlocksize) % blockSize);\n+                    ((len - diffBlocksize) % blockSize);\n@@ -885,1 +884,1 @@\n-            paddingLen = padding.padLength(totalLen);\n+            paddingLen = padding.padLength(len);\n@@ -970,1 +969,1 @@\n-        throws IllegalBlockSizeException, ShortBufferException {\n+        throws IllegalBlockSizeException {\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/CipherCore.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import javax.crypto.ShortBufferException;\n@@ -156,1 +155,1 @@\n-     * (This check is omitted here, to avoid double checking.)\n+     * (This check is omitted here, to avoid double-checking.)\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/CipherTextStealing.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-        PublicKey key = null;\n+        PublicKey key;\n@@ -91,1 +91,1 @@\n-        PrivateKey key = null;\n+        PrivateKey key;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ConstructKeys.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-    private static final int s0p[] = {\n+    private static final int[] s0p = {\n@@ -59,1 +59,1 @@\n-    private static final int s1p[] = {\n+    private static final int[] s1p = {\n@@ -75,1 +75,1 @@\n-    private static final int s2p[] = {\n+    private static final int[] s2p = {\n@@ -91,1 +91,1 @@\n-    private static final int s3p[] = {\n+    private static final int[] s3p = {\n@@ -107,1 +107,1 @@\n-    private static final int s4p[] = {\n+    private static final int[] s4p = {\n@@ -123,1 +123,1 @@\n-    private static final int s5p[] = {\n+    private static final int[] s5p = {\n@@ -139,1 +139,1 @@\n-    private static final int s6p[] = {\n+    private static final int[] s6p = {\n@@ -155,1 +155,1 @@\n-    private static final int s7p[] = {\n+    private static final int[] s7p = {\n@@ -171,1 +171,1 @@\n-    private static final int permRight0[] = {\n+    private static final int[] permRight0 = {\n@@ -178,1 +178,1 @@\n-    private static final int permLeft1[] = {\n+    private static final int[] permLeft1 = {\n@@ -185,1 +185,1 @@\n-    private static final int permRight2[] = {\n+    private static final int[] permRight2 = {\n@@ -192,1 +192,1 @@\n-    private static final int permLeft3[] = {\n+    private static final int[] permLeft3 = {\n@@ -199,1 +199,1 @@\n-    private static final int permRight4[] = {\n+    private static final int[] permRight4 = {\n@@ -206,1 +206,1 @@\n-    private static final int permLeft5[] = {\n+    private static final int[] permLeft5 = {\n@@ -213,1 +213,1 @@\n-    private static final int permRight6[] = {\n+    private static final int[] permRight6 = {\n@@ -220,1 +220,1 @@\n-    private static final int permLeft7[] = {\n+    private static final int[] permLeft7 = {\n@@ -227,1 +227,1 @@\n-    private static final int permRight8[] = {\n+    private static final int[] permRight8 = {\n@@ -234,1 +234,1 @@\n-    private static final int permLeft9[] = {\n+    private static final int[] permLeft9 = {\n@@ -241,1 +241,1 @@\n-    private static final int permRightA[] = {\n+    private static final int[] permRightA = {\n@@ -248,1 +248,1 @@\n-    private static final int permLeftB[] = {\n+    private static final int[] permLeftB = {\n@@ -255,1 +255,1 @@\n-    private static final int permRightC[] = {\n+    private static final int[] permRightC = {\n@@ -262,1 +262,1 @@\n-    private static final int permLeftD[] = {\n+    private static final int[] permLeftD = {\n@@ -269,1 +269,1 @@\n-    private static final int permRightE[] = {\n+    private static final int[] permRightE = {\n@@ -276,1 +276,1 @@\n-    private static final int permLeftF[] = {\n+    private static final int[] permLeftF = {\n@@ -286,1 +286,1 @@\n-    private static final int initPermLeft0[] = {\n+    private static final int[] initPermLeft0 = {\n@@ -293,1 +293,1 @@\n-    private static final int initPermRight0[] = {\n+    private static final int[] initPermRight0 = {\n@@ -300,1 +300,1 @@\n-    private static final int initPermLeft1[] = {\n+    private static final int[] initPermLeft1 = {\n@@ -307,1 +307,1 @@\n-    private static final int initPermRight1[] = {\n+    private static final int[] initPermRight1 = {\n@@ -314,1 +314,1 @@\n-    private static final int initPermLeft2[] = {\n+    private static final int[] initPermLeft2 = {\n@@ -321,1 +321,1 @@\n-    private static final int initPermRight2[] = {\n+    private static final int[] initPermRight2 = {\n@@ -328,1 +328,1 @@\n-    private static final int initPermLeft3[] = {\n+    private static final int[] initPermLeft3 = {\n@@ -335,1 +335,1 @@\n-    private static final int initPermRight3[] = {\n+    private static final int[] initPermRight3 = {\n@@ -342,1 +342,1 @@\n-    private static final int initPermLeft4[] = {\n+    private static final int[] initPermLeft4 = {\n@@ -349,1 +349,1 @@\n-    private static final int initPermRight4[] = {\n+    private static final int[] initPermRight4 = {\n@@ -356,1 +356,1 @@\n-    private static final int initPermLeft5[] = {\n+    private static final int[] initPermLeft5 = {\n@@ -363,1 +363,1 @@\n-    private static final int initPermRight5[] = {\n+    private static final int[] initPermRight5 = {\n@@ -370,1 +370,1 @@\n-    private static final int initPermLeft6[] = {\n+    private static final int[] initPermLeft6 = {\n@@ -377,1 +377,1 @@\n-    private static final int initPermRight6[] = {\n+    private static final int[] initPermRight6 = {\n@@ -384,1 +384,1 @@\n-    private static final int initPermLeft7[] = {\n+    private static final int[] initPermLeft7 = {\n@@ -391,1 +391,1 @@\n-    private static final int initPermRight7[] = {\n+    private static final int[] initPermRight7 = {\n@@ -398,1 +398,1 @@\n-    private static final int initPermLeft8[] = {\n+    private static final int[] initPermLeft8 = {\n@@ -405,1 +405,1 @@\n-    private static final int initPermRight8[] = {\n+    private static final int[] initPermRight8 = {\n@@ -412,1 +412,1 @@\n-    private static final int initPermLeft9[] = {\n+    private static final int[] initPermLeft9 = {\n@@ -419,1 +419,1 @@\n-    private static final int initPermRight9[] = {\n+    private static final int[] initPermRight9 = {\n@@ -426,1 +426,1 @@\n-    private static final int initPermLeftA[] = {\n+    private static final int[] initPermLeftA = {\n@@ -433,1 +433,1 @@\n-    private static final int initPermRightA[] = {\n+    private static final int[] initPermRightA = {\n@@ -440,1 +440,1 @@\n-    private static final int initPermLeftB[] = {\n+    private static final int[] initPermLeftB = {\n@@ -447,1 +447,1 @@\n-    private static final int initPermRightB[] = {\n+    private static final int[] initPermRightB = {\n@@ -454,1 +454,1 @@\n-    private static final int initPermLeftC[] = {\n+    private static final int[] initPermLeftC = {\n@@ -461,1 +461,1 @@\n-    private static final int initPermRightC[] = {\n+    private static final int[] initPermRightC = {\n@@ -468,1 +468,1 @@\n-    private static final int initPermLeftD[] = {\n+    private static final int[] initPermLeftD = {\n@@ -475,1 +475,1 @@\n-    private static final int initPermRightD[] = {\n+    private static final int[] initPermRightD = {\n@@ -482,1 +482,1 @@\n-    private static final int initPermLeftE[] = {\n+    private static final int[] initPermLeftE = {\n@@ -489,1 +489,1 @@\n-    private static final int initPermRightE[] = {\n+    private static final int[] initPermRightE = {\n@@ -496,1 +496,1 @@\n-    private static final int initPermLeftF[] = {\n+    private static final int[] initPermLeftF = {\n@@ -503,1 +503,1 @@\n-    private static final int initPermRightF[] = {\n+    private static final int[] initPermRightF = {\n@@ -589,1 +589,1 @@\n-        byte key[];\n+        byte[] key;\n@@ -641,1 +641,1 @@\n-                             byte out[], int offset) {\n+                             byte[] out, int offset) {\n@@ -690,1 +690,1 @@\n-    private static int initialPermutationLeft(byte block[], int offset) {\n+    private static int initialPermutationLeft(byte[] block, int offset) {\n@@ -712,1 +712,1 @@\n-    private static int initialPermutationRight(byte block[], int offset) {\n+    private static int initialPermutationRight(byte[] block, int offset) {\n@@ -734,1 +734,1 @@\n-    void expandKey(byte key[]) {\n+    void expandKey(byte[] key) {\n@@ -736,1 +736,1 @@\n-        byte ek[] = new byte[128];\n+        byte[] ek = new byte[128];\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DESCrypt.java","additions":63,"deletions":63,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -107,1 +107,1 @@\n-            if ((key instanceof SecretKey)\n+            if ((key != null)\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DESKeyFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -106,1 +106,1 @@\n-            if ((key instanceof SecretKey)\n+            if ((key != null)\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DESedeKeyFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -133,1 +133,1 @@\n-        DESedeKey desEdeKey = null;\n+        DESedeKey desEdeKey;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DESedeKeyGenerator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -140,1 +140,1 @@\n-        int result = 0;\n+        int result;\n@@ -146,1 +146,1 @@\n-        return (result < 0? 0:result);\n+        return (Math.max(result, 0));\n@@ -213,1 +213,1 @@\n-        byte[] currIv = null;\n+        byte[] currIv;\n@@ -383,1 +383,1 @@\n-     * parameters or when it has not be set, e.g. initialized with\n+     * parameters or when it has not been set, e.g. initialized with\n@@ -559,1 +559,0 @@\n-            int offset = keyValLen;\n@@ -561,1 +560,1 @@\n-                if (buffer2[offset + i] != cks[i]) {\n+                if (buffer2[keyValLen + i] != cks[i]) {\n@@ -591,1 +590,1 @@\n-        MessageDigest md = null;\n+        MessageDigest md;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DESedeWrapCipher.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,6 +27,0 @@\n-import sun.security.jca.JCAUtil;\n-import sun.security.ssl.HKDF;\n-import sun.security.util.*;\n-\n-import javax.crypto.*;\n-import javax.crypto.spec.SecretKeySpec;\n@@ -36,1 +30,0 @@\n-import java.nio.charset.StandardCharsets;\n@@ -38,1 +31,4 @@\n-import java.security.interfaces.*;\n+import java.security.interfaces.ECKey;\n+import java.security.interfaces.ECPublicKey;\n+import java.security.interfaces.XECKey;\n+import java.security.interfaces.XECPublicKey;\n@@ -42,0 +38,6 @@\n+import javax.crypto.*;\n+import javax.crypto.spec.SecretKeySpec;\n+\n+import sun.security.jca.JCAUtil;\n+import sun.security.ssl.HKDF;\n+import sun.security.util.*;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DHKEM.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.util.*;\n-import java.lang.*;\n@@ -31,8 +29,1 @@\n-import java.security.AccessController;\n-import java.security.InvalidAlgorithmParameterException;\n-import java.security.InvalidKeyException;\n-import java.security.Key;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.SecureRandom;\n-import java.security.PrivilegedAction;\n-import java.security.ProviderException;\n+import java.security.*;\n@@ -40,1 +31,1 @@\n-import java.security.spec.InvalidKeySpecException;\n+import java.util.Arrays;\n@@ -42,1 +33,0 @@\n-import javax.crypto.ShortBufferException;\n@@ -44,1 +34,3 @@\n-import javax.crypto.spec.*;\n+import javax.crypto.ShortBufferException;\n+import javax.crypto.spec.DHParameterSpec;\n+import javax.crypto.spec.SecretKeySpec;\n@@ -183,1 +175,1 @@\n-     * @param lastPhase flag which indicates whether or not this is the last\n+     * @param lastPhase flag which indicates whether this is the last\n@@ -230,1 +222,1 @@\n-        if (lastPhase == false) {\n+        if (!lastPhase) {\n@@ -296,1 +288,1 @@\n-        if (generateSecret == false) {\n+        if (!generateSecret) {\n@@ -416,1 +408,1 @@\n-            SecretKeySpec skey = new SecretKeySpec(secret, 0, keysize,\n+            return new SecretKeySpec(secret, 0, keysize,\n@@ -418,1 +410,0 @@\n-            return skey;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DHKeyAgreement.java","additions":10,"deletions":19,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.security.spec.InvalidParameterSpecException;\n@@ -33,1 +32,0 @@\n-import javax.crypto.spec.DHGenParameterSpec;\n@@ -36,0 +34,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DHKeyPairGenerator.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,1 @@\n-import sun.security.util.ArrayUtil;\n-import java.util.Objects;\n+\n@@ -33,0 +32,1 @@\n+import sun.security.util.ArrayUtil;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ElectronicCodeBook.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -160,1 +160,1 @@\n-         throws IllegalBlockSizeException, ShortBufferException {\n+         throws IllegalBlockSizeException {\n@@ -202,1 +202,1 @@\n-         throws IllegalBlockSizeException, ShortBufferException {\n+         throws IllegalBlockSizeException {\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/FeedbackCipher.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,2 +82,1 @@\n-        long blocksLeft = (1L << 32) - ctr32;\n-        return blocksLeft;\n+        return (1L << 32) - ctr32;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/GCTR.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -193,1 +193,0 @@\n-            int processed = inLen;\n@@ -195,1 +194,1 @@\n-            return processed;\n+            return inLen;\n@@ -276,1 +275,1 @@\n-     * throw exceptions or allocate arrays as it will breaking intrinsics\n+     * throw exceptions or allocate arrays as it will break intrinsics\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/GHASH.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,15 +28,0 @@\n-import jdk.internal.access.JavaNioAccess;\n-import jdk.internal.access.SharedSecrets;\n-import jdk.internal.misc.Unsafe;\n-import sun.nio.ch.DirectBuffer;\n-import sun.security.jca.JCAUtil;\n-import sun.security.util.ArrayUtil;\n-\n-import javax.crypto.AEADBadTagException;\n-import javax.crypto.BadPaddingException;\n-import javax.crypto.Cipher;\n-import javax.crypto.CipherSpi;\n-import javax.crypto.IllegalBlockSizeException;\n-import javax.crypto.NoSuchPaddingException;\n-import javax.crypto.ShortBufferException;\n-import javax.crypto.spec.GCMParameterSpec;\n@@ -47,8 +32,1 @@\n-import java.security.AlgorithmParameters;\n-import java.security.InvalidAlgorithmParameterException;\n-import java.security.InvalidKeyException;\n-import java.security.Key;\n-import java.security.MessageDigest;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.ProviderException;\n-import java.security.SecureRandom;\n+import java.security.*;\n@@ -58,0 +36,2 @@\n+import javax.crypto.*;\n+import javax.crypto.spec.GCMParameterSpec;\n@@ -59,0 +39,3 @@\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n+import jdk.internal.misc.Unsafe;\n@@ -60,0 +43,3 @@\n+import sun.nio.ch.DirectBuffer;\n+import sun.security.jca.JCAUtil;\n+import sun.security.util.ArrayUtil;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/GaloisCounterMode.java","additions":10,"deletions":24,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.util.Arrays;\n-\n@@ -31,1 +29,3 @@\n-\n+import java.security.*;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.util.Arrays;\n@@ -34,4 +34,0 @@\n-import java.security.*;\n-import java.security.spec.*;\n-\n-import sun.security.x509.AlgorithmId;\n@@ -90,2 +86,1 @@\n-                    } catch (NoSuchAlgorithmException nsae) {\n-                        continue;\n+                    } catch (NoSuchAlgorithmException ignored) {\n@@ -172,1 +167,1 @@\n-        if (first == true) {\n+        if (first) {\n@@ -190,2 +185,2 @@\n-    protected void engineUpdate(byte input[], int offset, int len) {\n-        if (first == true) {\n+    protected void engineUpdate(byte[] input, int offset, int len) {\n+        if (first) {\n@@ -208,1 +203,1 @@\n-        if (first == true) {\n+        if (first) {\n@@ -224,1 +219,1 @@\n-        if (first == true) {\n+        if (first) {\n@@ -253,1 +248,1 @@\n-        if (first == false) {\n+        if (!first) {\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HmacCore.java","additions":11,"deletions":16,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,1 @@\n-import java.nio.ByteBuffer;\n-\n-import javax.crypto.MacSpi;\n-import javax.crypto.SecretKey;\n-import java.security.*;\n-import java.security.spec.*;\n+import java.security.NoSuchAlgorithmException;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HmacMD5.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.security.SecureRandom;\n-import java.security.InvalidParameterException;\n@@ -31,0 +29,1 @@\n+import java.security.SecureRandom;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HmacMD5KeyGenerator.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,1 @@\n-import java.nio.ByteBuffer;\n-\n-import javax.crypto.MacSpi;\n-import javax.crypto.SecretKey;\n-import java.security.*;\n-import java.security.spec.*;\n+import java.security.NoSuchAlgorithmException;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HmacSHA1.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.security.SecureRandom;\n-import java.security.InvalidParameterException;\n@@ -31,0 +29,1 @@\n+import java.security.SecureRandom;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HmacSHA1KeyGenerator.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -122,2 +122,1 @@\n-        int paddingOctet = blockSize - (len % blockSize);\n-        return paddingOctet;\n+        return blockSize - (len % blockSize);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ISO10126Padding.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,1 +78,1 @@\n-    };\n+    }\n@@ -96,1 +96,1 @@\n-    };\n+    }\n@@ -122,1 +122,1 @@\n-        Key key = null;\n+        Key key;\n@@ -655,1 +655,1 @@\n-                byte digest[] = md.digest();\n+                byte[] digest = md.digest();\n@@ -694,2 +694,2 @@\n-            ByteArrayInputStream bais = null;\n-            byte[] encoded = null;\n+            ByteArrayInputStream bais;\n+            byte[] encoded;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/JceKeyStore.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,4 +29,0 @@\n-import java.security.*;\n-import java.security.spec.*;\n-import javax.crypto.*;\n-import javax.crypto.spec.*;\n@@ -61,1 +57,1 @@\n-        \/\/ overwrite the first block of in with the icv semiblock\n+        \/\/ overwrite the first block of in with the icv semi-block\n@@ -96,1 +92,1 @@\n-     * @param ivOut buffer for holding the recovered ICV semiblock\n+     * @param ivOut buffer for holding the recovered ICV semi-block\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/KWUtil.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,1 +101,1 @@\n-            } catch (NumberFormatException e) {}\n+            } catch (NumberFormatException ignored) {}\n@@ -372,1 +372,1 @@\n-            SealedObjectForKeyProtector soForKeyProtector = null;\n+            SealedObjectForKeyProtector soForKeyProtector;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/KeyProtector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -288,1 +288,1 @@\n-            \/\/ then add the first semiblock and padLen to result\n+            \/\/ then add the first semi-block and padLen to result\n@@ -342,1 +342,1 @@\n-            implInit(opmode, key, (byte[])null, random);\n+            implInit(opmode, key, null, random);\n@@ -397,1 +397,1 @@\n-                AlgorithmParameterSpec spec =\n+                IvParameterSpec spec =\n@@ -399,1 +399,1 @@\n-                iv = ((IvParameterSpec)spec).getIV();\n+                iv = spec.getIV();\n@@ -465,1 +465,1 @@\n-            \/\/ the first semiblock is for iv, store data after it\n+            \/\/ the first semi-block is for iv, store data after it\n@@ -598,2 +598,2 @@\n-    \/\/ 'inBuf' = semiblock | plain text | extra bytes if padding is used\n-    \/\/ 'inLen' = semiblock length + plain text length\n+    \/\/ 'inBuf' = semi-block | plain text | extra bytes if padding is used\n+    \/\/ 'inLen' = semi-block length + plain text length\n@@ -649,1 +649,1 @@\n-        AlgorithmParameters params = null;\n+        AlgorithmParameters params;\n@@ -714,1 +714,1 @@\n-        \/\/ reserve the first semiblock and do not write data\n+        \/\/ reserve the first semi-block and do not write data\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/KeyWrapCipher.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -228,6 +228,4 @@\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"MD: \" + mdName + \"\\n\");\n-        sb.append(\"MGF: MGF1\" + mgfSpec.getDigestAlgorithm() + \"\\n\");\n-        sb.append(\"PSource: PSpecified \" +\n-            (p.length==0? \"\":Debug.toHexString(new BigInteger(p))) + \"\\n\");\n-        return sb.toString();\n+        return \"MD: \" + mdName + \"\\n\" +\n+                \"MGF: MGF1\" + mgfSpec.getDigestAlgorithm() + \"\\n\" +\n+                \"PSource: PSpecified \" +\n+                (p.length == 0 ? \"\" : Debug.toHexString(new BigInteger(p))) + \"\\n\";\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/OAEPParameters.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-     * number of bytes for each stream unit, defaults to the blocksize\n+     * number of bytes for each stream unit, defaults to the block size\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/OutputFeedback.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -264,1 +264,1 @@\n-        if ((key instanceof SecretKey)\n+        if ((key != null)\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBEKeyFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -164,1 +164,1 @@\n-        AlgorithmParameters params = null;\n+        AlgorithmParameters params;\n@@ -306,1 +306,1 @@\n-            byte[] toBeHashed = null;\n+            byte[] toBeHashed;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBES1Core.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -134,2 +134,2 @@\n-        String kdfAlgo = null;\n-        String cipherAlgo = null;\n+        String kdfAlgo;\n+        String cipherAlgo;\n@@ -213,2 +213,2 @@\n-        String kdfAlgo = null;\n-        String cipherAlgo = null;\n+        String kdfAlgo;\n+        String cipherAlgo;\n@@ -242,2 +242,2 @@\n-        this.pbes2AlgorithmName = new StringBuilder().append(\"PBEWith\")\n-            .append(kdfAlgo).append(\"And\").append(cipherAlgo).toString();\n+        this.pbes2AlgorithmName = \"PBEWith\" +\n+                kdfAlgo + \"And\" + cipherAlgo;\n@@ -308,1 +308,1 @@\n-        String cipherAlgo = null;\n+        String cipherAlgo;\n@@ -402,1 +402,1 @@\n-     * The algorithn name pattern is: \"PBEWith<prf>And<encryption>\"\n+     * The algorithm name pattern is: \"PBEWith<prf>And<encryption>\"\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBES2Parameters.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,4 @@\n-import java.io.*;\n-import java.lang.ref.Reference;\n+import java.io.IOException;\n+import java.io.InvalidObjectException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectStreamException;\n@@ -31,0 +33,1 @@\n+import java.lang.ref.Reference;\n@@ -33,4 +36,0 @@\n-import java.util.Arrays;\n-import java.util.Locale;\n-import java.security.MessageDigest;\n-import java.security.KeyRep;\n@@ -38,0 +37,2 @@\n+import java.security.KeyRep;\n+import java.security.MessageDigest;\n@@ -40,0 +41,2 @@\n+import java.util.Arrays;\n+import java.util.Locale;\n@@ -44,2 +47,0 @@\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n@@ -48,0 +49,2 @@\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBKDF2KeyImpl.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-        PBKDF2Core kdf = null;\n+        PBKDF2Core kdf;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBMAC1Core.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -123,2 +123,1 @@\n-        int paddingOctet = blockSize - (len % blockSize);\n-        return paddingOctet;\n+        return blockSize - (len % blockSize);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PKCS5Padding.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import java.security.Key;\n@@ -31,0 +30,1 @@\n+import java.security.Key;\n@@ -35,3 +35,0 @@\n-import sun.security.util.math.*;\n-import sun.security.util.math.intpoly.*;\n-import jdk.internal.vm.annotation.IntrinsicCandidate;\n@@ -39,0 +36,5 @@\n+import jdk.internal.vm.annotation.IntrinsicCandidate;\n+import sun.security.util.math.IntegerFieldModuloP;\n+import sun.security.util.math.IntegerModuloP;\n+import sun.security.util.math.MutableIntegerModuloP;\n+import sun.security.util.math.intpoly.IntegerPolynomial1305;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/Poly1305.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,1 +111,1 @@\n-        if (algorithm.equals(\"RC2\") == false) {\n+        if (!algorithm.equals(\"RC2\")) {\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/RC2Crypt.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -224,2 +224,1 @@\n-            sb.append(LINE_SEP + \"version:\" + LINE_SEP\n-                + version + LINE_SEP);\n+            sb.append(LINE_SEP).append(\"version:\").append(LINE_SEP).append(version).append(LINE_SEP);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/RC2Parameters.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import java.util.Objects;\n@@ -129,1 +130,1 @@\n-        if (mode.equalsIgnoreCase(\"ECB\") == false) {\n+        if (!mode.equalsIgnoreCase(\"ECB\")) {\n@@ -275,1 +276,1 @@\n-        if (paddingType == PAD_NONE) {\n+        if (Objects.equals(paddingType, PAD_NONE)) {\n@@ -282,1 +283,1 @@\n-        } else if (paddingType == PAD_PKCS1) {\n+        } else if (Objects.equals(paddingType, PAD_PKCS1)) {\n@@ -471,1 +472,1 @@\n-        byte[] encoded = null;\n+        byte[] encoded;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/RSACipher.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,3 +29,0 @@\n-\n-import javax.crypto.MacSpi;\n-import javax.crypto.SecretKey;\n@@ -34,0 +31,2 @@\n+import javax.crypto.MacSpi;\n+import javax.crypto.SecretKey;\n@@ -112,1 +111,1 @@\n-        if (first == true) {\n+        if (first) {\n@@ -131,2 +130,2 @@\n-    void update(byte input[], int offset, int len) {\n-        if (first == true) {\n+    void update(byte[] input, int offset, int len) {\n+        if (first) {\n@@ -144,1 +143,1 @@\n-        if (first == true) {\n+        if (first) {\n@@ -161,1 +160,1 @@\n-        if (first == true) {\n+        if (first) {\n@@ -192,1 +191,1 @@\n-        if (first == false) {\n+        if (!first) {\n@@ -214,1 +213,1 @@\n-        protected void engineUpdate(byte input[], int offset, int len) {\n+        protected void engineUpdate(byte[] input, int offset, int len) {\n@@ -247,1 +246,1 @@\n-        protected void engineUpdate(byte input[], int offset, int len) {\n+        protected void engineUpdate(byte[] input, int offset, int len) {\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/SslMacCore.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-        if (params instanceof TlsKeyMaterialParameterSpec == false) {\n+        if (!(params instanceof TlsKeyMaterialParameterSpec)) {\n@@ -69,1 +69,1 @@\n-        if (\"RAW\".equals(spec.getMasterSecret().getFormat()) == false) {\n+        if (!\"RAW\".equals(spec.getMasterSecret().getFormat())) {\n@@ -108,2 +108,2 @@\n-        SecretKey clientCipherKey = null;\n-        SecretKey serverCipherKey = null;\n+        SecretKey clientCipherKey;\n+        SecretKey serverCipherKey;\n@@ -198,1 +198,1 @@\n-            if (isExportable == false) {\n+            if (!isExportable) {\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/TlsKeyMaterialGenerator.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -135,1 +135,1 @@\n-        if (params instanceof TlsPrfParameterSpec == false) {\n+        if (!(params instanceof TlsPrfParameterSpec)) {\n@@ -140,1 +140,1 @@\n-        if ((key != null) && (\"RAW\".equals(key.getFormat()) == false)) {\n+        if ((key != null) && (!\"RAW\".equals(key.getFormat()))) {\n@@ -381,1 +381,1 @@\n-     * we could use.  Therefore for TLS 1.2, we are updating JSSE to request\n+     * we could use.  Therefore, for TLS 1.2, we are updating JSSE to request\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/TlsPrfGenerator.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}