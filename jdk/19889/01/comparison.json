{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,0 +100,21 @@\n+ * <h2>Instruction Factories<\/h2>\n+ * {@code CodeBuilder} provides convenience methods to create instructions (See\n+ * JVMS {@jvms 6.5} Instructions) by their mnemonic, taking necessary operands.\n+ * <ul>\n+ * <li>Instructions that encode their operands in their opcode, such as {@code\n+ * aload_<n>}, share their factories with their generic version like {@link\n+ * #aload aload}. Note that some constant instructions, such as {@link #iconst_1\n+ * iconst_1}, do not have generic versions, and thus have their own factories.\n+ * <li>Instructions that accept wide operands, such as {@code ldc2_w} or {@code\n+ * wide}, share their factories with their regular version like {@link #ldc}. Note\n+ * that {@link #goto_w goto_w} has its own factory to avoid {@linkplain\n+ * ClassFile.ShortJumpsOption short jumps}.\n+ * <li>The {@code goto}, {@code instanceof}, {@code new}, and {@code return}\n+ * instructions' factories are named {@link #goto_ goto_}, {@link #instanceOf\n+ * instanceOf}, {@link #new_ new_}, and {@link #return_() return_} respectively,\n+ * due to clashes with keywords in the Java programming language.\n+ * <li>Factories are not provided for instructions {@code jsr}, {@code jsr_w},\n+ * {@code ret}, and {@code wide ret}, which cannot appear in class files with\n+ * major version {@value ClassFile#JAVA_7_VERSION} or higher. (JVMS {@jvms 4.9.1})\n+ * <\/ul>\n+ *\n@@ -133,1 +154,1 @@\n-     * @throws IllegalStateException if this is not a static method\n+     * @throws IllegalStateException if this is a static method\n@@ -702,1 +723,1 @@\n-        return with(ExceptionCatch.of(handler, start, end, Optional.of(catchType)));\n+        return with(ExceptionCatch.of(handler, start, end, Optional.ofNullable(catchType)));\n@@ -840,0 +861,4 @@\n+     *\n+     * <p>This may also generate {@code aload_<N>} and\n+     * {@code wide aload} instructions.\n+     *\n@@ -884,0 +909,4 @@\n+     *\n+     * <p>This may also generate {@code astore_<N>} and\n+     * {@code wide astore} instructions.\n+     *\n@@ -1049,0 +1078,4 @@\n+     *\n+     * <p>This may also generate {@code dload_<N>} and\n+     * {@code wide dload} instructions.\n+     *\n@@ -1090,0 +1123,4 @@\n+     *\n+     * <p>This may also generate {@code dstore_<N>} and\n+     * {@code wide dstore} instructions.\n+     *\n@@ -1253,0 +1290,4 @@\n+     *\n+     * <p>This may also generate {@code fload_<N>} and\n+     * {@code wide fload} instructions.\n+     *\n@@ -1294,0 +1335,4 @@\n+     *\n+     * <p>This may also generate {@code fstore_<N>} and\n+     * {@code wide fstore} instructions.\n+     *\n@@ -1353,0 +1398,9 @@\n+     *\n+     * <p>This may also generate {@code goto_w} instructions if the {@link\n+     * ClassFile.ShortJumpsOption#FIX_SHORT_JUMPS FIX_SHORT_JUMPS} option\n+     * is set.\n+     *\n+     * @apiNote The instruction's name is {@code goto}, which coincides with a\n+     * reserved keyword of the Java programming language, thus this method is\n+     * named with an extra {@code _} suffix instead.\n+     *\n@@ -1590,1 +1644,1 @@\n-    default CodeBuilder if_nonnull(Label target) {\n+    default CodeBuilder ifnonnull(Label target) {\n@@ -1599,1 +1653,1 @@\n-    default CodeBuilder if_null(Label target) {\n+    default CodeBuilder ifnull(Label target) {\n@@ -1669,0 +1723,4 @@\n+     *\n+     * <p>This may also generate {@code iload_<N>} and\n+     * {@code wide iload} instructions.\n+     *\n@@ -1694,0 +1752,5 @@\n+     *\n+     * @apiNote The instruction's name is {@code instanceof}, which coincides with a\n+     * reserved keyword of the Java programming language, thus this method is\n+     * named with camel case instead.\n+     *\n@@ -1704,0 +1767,5 @@\n+     *\n+     * @apiNote The instruction's name is {@code instanceof}, which coincides with a\n+     * reserved keyword of the Java programming language, thus this method is\n+     * named with camel case instead.\n+     *\n@@ -1913,0 +1981,4 @@\n+     *\n+     * <p>This may also generate {@code istore_<N>} and\n+     * {@code wide istore} instructions.\n+     *\n@@ -2036,0 +2108,6 @@\n+     *\n+     * <p>This may also generate {@code ldc_w} and {@code ldc2_w} instructions.\n+     *\n+     * @apiNote {@link #loadConstant(ConstantDesc) loadConstant} generates more optimal instructions\n+     * and should be used for general constants if an {@code ldc} instruction is not strictly required.\n+     *\n@@ -2045,0 +2123,3 @@\n+     *\n+     * <p>This may also generate {@code ldc_w} and {@code ldc2_w} instructions.\n+     *\n@@ -2065,0 +2146,4 @@\n+     *\n+     * <p>This may also generate {@code lload_<N>} and\n+     * {@code wide lload} instructions.\n+     *\n@@ -2130,0 +2215,4 @@\n+     *\n+     * <p>This may also generate {@code lstore_<N>} and\n+     * {@code wide lstore} instructions.\n+     *\n@@ -2200,0 +2289,5 @@\n+     *\n+     * @apiNote The instruction's name is {@code new}, which coincides with a\n+     * reserved keyword of the Java programming language, thus this method is\n+     * named with an extra {@code _} suffix instead.\n+     *\n@@ -2209,0 +2303,5 @@\n+     *\n+     * @apiNote The instruction's name is {@code new}, which coincides with a\n+     * reserved keyword of the Java programming language, thus this method is\n+     * named with an extra {@code _} suffix instead.\n+     *\n@@ -2286,0 +2385,5 @@\n+     *\n+     * @apiNote The instruction's name is {@code return}, which coincides with a\n+     * reserved keyword of the Java programming language, thus this method is\n+     * named with an extra {@code _} suffix instead.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CodeBuilder.java","additions":109,"deletions":5,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,2 +61,1 @@\n-     * {@return the position of the {@code Label} in the {@code codeArray}\n-     * or -1 if the {@code Label} does not point to the {@code codeArray}}\n+     * {@return the position of the {@code label} in the {@link #codeArray codeArray}}\n@@ -64,0 +63,1 @@\n+     * @throws IllegalArgumentException if the {@code label} is not from this attribute\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/CodeAttribute.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -425,1 +425,1 @@\n-            cb.if_nonnull(nonNullLabel);\n+            cb.ifnonnull(nonNullLabel);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/SwitchBootstraps.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        public LabelImpl(LabelContext labelContext, int bci) {\n+    public LabelImpl(LabelContext labelContext, int bci) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/LabelImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -464,1 +464,1 @@\n-                    catchAllHandler.if_null(rethrow);\n+                    catchAllHandler.ifnull(rethrow);\n@@ -489,1 +489,1 @@\n-                codeBuilder.if_null(fail);\n+                codeBuilder.ifnull(fail);\n@@ -528,1 +528,1 @@\n-                    codeBuilder.if_null(fail);\n+                    codeBuilder.ifnull(fail);\n@@ -741,1 +741,1 @@\n-                codeBuilder.if_null(nullLabel);\n+                codeBuilder.ifnull(nullLabel);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventInstrumentation.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -260,2 +260,2 @@\n-                        case IFNONNULL -> cob.if_nonnull(target);\n-                        case IFNULL -> cob.if_null(target);\n+                        case IFNONNULL -> cob.ifnonnull(target);\n+                        case IFNULL -> cob.ifnull(target);\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/RebuildingTransformation.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}