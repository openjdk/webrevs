{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,1 +92,1 @@\n-        model.forEachElement(resolved.consumer());\n+        model.forEach(resolved.consumer());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFileBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n- * a streaming view (e.g., {@link #elements()}), or via random access (e.g.,\n+ * a streaming view, or via random access (e.g.,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassModel.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,1 @@\n- * of the method body are accessed via a streaming view (e.g., {@link\n- * #elements()}).\n+ * of the method body are accessed via a streaming view.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CodeModel.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n- * (e.g., {@link #elements()}, {@link #forEachElement(Consumer)}, etc.)\n+ * (e.g., {@link #forEach(Consumer)}, etc.)\n@@ -58,9 +58,2 @@\n-    void forEachElement(Consumer<E> consumer);\n-\n-    \/**\n-     * {@return an {@link Iterable} describing all the elements contained in this\n-     * compound element}\n-     *\/\n-    default Iterable<E> elements() {\n-        return elementList();\n-    }\n+    @Override\n+    void forEach(Consumer<? super E> consumer);\n@@ -74,1 +67,1 @@\n-        return elements().iterator();\n+        return elementList().iterator();\n@@ -94,1 +87,1 @@\n-        forEachElement(new Consumer<>() {\n+        forEach(new Consumer<>() {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CompoundElement.java","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n- * a streaming view (e.g., {@link #elements()}), or via random access (e.g.,\n+ * a streaming view, or via random access (e.g.,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/FieldModel.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n- * a streaming view (e.g., {@link #elements()}), or via random access (e.g.,\n+ * a streaming view, or via random access (e.g.,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/MethodModel.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-    public void forEachElement(Consumer<E> consumer) {\n+    public void forEach(Consumer<? super E> consumer) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractUnboundModel.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -204,1 +204,1 @@\n-                    forEachElement(cb);\n+                    forEach(cb);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedCodeBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -203,1 +203,1 @@\n-                    forEachElement(mb);\n+                    forEach(mb);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedMethodBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -159,1 +159,1 @@\n-    public void forEachElement(Consumer<ClassElement> consumer) {\n+    public void forEach(Consumer<? super ClassElement> consumer) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -100,2 +100,1 @@\n-                        fm.fieldTypeSymbol()), fb ->\n-                                fm.forEachElement(asFieldTransform().resolve(fb).consumer()));\n+                        fm.fieldTypeSymbol()), fb -> fb.transform(fm, asFieldTransform()));\n@@ -104,2 +103,1 @@\n-                        mm.methodTypeSymbol()), mm.flags().flagsMask(), mb ->\n-                                mm.forEachElement(asMethodTransform().resolve(mb).consumer()));\n+                        mm.methodTypeSymbol()), mm.flags().flagsMask(), mb -> mb.transform(mm, asMethodTransform()));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassRemapperImpl.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.util.Objects;\n@@ -152,1 +153,1 @@\n-                                            forEachElement(cb);\n+                                            forEach(cb);\n@@ -169,1 +170,2 @@\n-    public void forEachElement(Consumer<CodeElement> consumer) {\n+    public void forEach(Consumer<? super CodeElement> consumer) {\n+        Objects.requireNonNull(consumer);\n@@ -332,1 +334,1 @@\n-    private void generateCatchTargets(Consumer<CodeElement> consumer) {\n+    private void generateCatchTargets(Consumer<? super CodeElement> consumer) {\n@@ -346,1 +348,1 @@\n-    private void generateDebugElements(Consumer<CodeElement> consumer) {\n+    private void generateDebugElements(Consumer<? super CodeElement> consumer) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeImpl.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-                    FieldImpl.this.forEachElement(fb);\n+                    FieldImpl.this.forEach(fb);\n@@ -111,1 +111,1 @@\n-    public void forEachElement(Consumer<FieldElement> consumer) {\n+    public void forEach(Consumer<? super FieldElement> consumer) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/FieldImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-    public void forEachElement(Consumer<MethodElement> consumer) {\n+    public void forEach(Consumer<? super MethodElement> consumer) {\n@@ -143,1 +143,1 @@\n-                    MethodImpl.this.forEachElement(mb);\n+                    MethodImpl.this.forEach(mb);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/MethodImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -175,1 +175,1 @@\n-        cm.forEachElement(attrs);\n+        cm.forEach(attrs);\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/FingerPrint.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -225,1 +225,1 @@\n-        for (ClassElement ce : classModel.elements()) {\n+        for (ClassElement ce : classModel) {\n@@ -263,1 +263,1 @@\n-            for (var me : m.elements()) {\n+            for (var me : m) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventInstrumentation.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,0 @@\n-import java.lang.classfile.ClassModel;\n@@ -371,3 +370,3 @@\n-                ClassFile.of().parse(bytes).forEachElement(cle -> {\n-                    if (cle instanceof MethodModel mm) mm.forEachElement(me -> {\n-                        if (me instanceof CodeModel com) com.forEachElement(coe -> {\n+                ClassFile.of().parse(bytes).forEach(cle -> {\n+                    if (cle instanceof MethodModel mm) mm.forEach(me -> {\n+                        if (me instanceof CodeModel com) com.forEach(coe -> {\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jimage\/JImageTask.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-                    builder.withMethod(newName, mt, mm.flags().flagsMask(), mm::forEachElement);\n+                    builder.withMethod(newName, mt, mm.flags().flagsMask(), mm::forEach);\n","filename":"test\/jdk\/java\/lang\/instrument\/asmlib\/Instrumentor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n-             cb.withMethod(\"nemo\", mm.methodTypeSymbol(), mm.flags().flagsMask(), mm::forEachElement);\n+             cb.withMethod(\"nemo\", mm.methodTypeSymbol(), mm.flags().flagsMask(), mm::forEach);\n","filename":"test\/jdk\/java\/lang\/invoke\/8022701\/MHIllegalAccess.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,1 +103,1 @@\n-        for (var inst : code.elements()) {\n+        for (var inst : code) {\n","filename":"test\/jdk\/java\/lang\/invoke\/lambda\/LambdaAsm.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-        byte[] newBytes = cc.build(cm.thisClass().asSymbol(), cb -> cm.forEachElement(cb));\n+        byte[] newBytes = cc.build(cm.thisClass().asSymbol(), cm::forEach);\n","filename":"test\/jdk\/jdk\/classfile\/AdaptCodeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-            cc.build(classModel.thisClass().asSymbol(), cb -> classModel.forEachElement(cb));\n+            cc.build(classModel.thisClass().asSymbol(), classModel::forEach);\n","filename":"test\/jdk\/jdk\/classfile\/BasicBlockTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-                                mb.withCode(cob -> cm.forEachElement(cob));\n+                                mb.withCode(cm::forEach);\n","filename":"test\/jdk\/jdk\/classfile\/ClassHierarchyInfoTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-                classModel::forEachElement);\n+                classModel::forEach);\n","filename":"test\/jdk\/jdk\/classfile\/CorpusTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-        co.forEachElement(e -> {\n+        co.forEach(e -> {\n@@ -201,1 +201,1 @@\n-        co.forEachElement(e -> {\n+        co.forEach(e -> {\n@@ -307,1 +307,1 @@\n-        c.forEachElement(e -> {\n+        c.forEach(e -> {\n@@ -309,1 +309,1 @@\n-                m.forEachElement(el -> {\n+                m.forEach(el -> {\n@@ -311,1 +311,1 @@\n-                        cm.forEachElement(elem -> {\n+                        cm.forEach(elem -> {\n","filename":"test\/jdk\/jdk\/classfile\/LvtTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-        if (e instanceof CompoundElement ce) ce.forEachElement(ee -> testNoUnstable(path, (ClassFileElement)ee));\n+        if (e instanceof CompoundElement ce) ce.forEach(ee -> testNoUnstable(path, (ClassFileElement)ee));\n","filename":"test\/jdk\/jdk\/classfile\/OptionsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -273,1 +273,1 @@\n-                                                   classModel.forEachElement(cb);\n+                                                   classModel.forEach(cb);\n","filename":"test\/jdk\/jdk\/classfile\/StackMapsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-        cm.forEachElement((ce) -> {\n+        cm.forEach((ce) -> {\n","filename":"test\/jdk\/jdk\/classfile\/TestRecordComponent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-                                mb.withCode(cob -> cm.forEachElement(cob));\n+                                mb.withCode(cob -> cm.forEach(cob));\n","filename":"test\/jdk\/jdk\/classfile\/VerifierSelfTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-                                                com.forEachElement(cob4::with);\n+                                                com.forEach(cob4::with);\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/RebuildingTransformation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n-                                xm.forEachElement(new Consumer<>() {\n+                                xm.forEach(new Consumer<>() {\n@@ -273,1 +273,1 @@\n-                                       cm.forEachElement(cb);\n+                                       cm.forEach(cb);\n@@ -304,1 +304,1 @@\n-                                       cm.forEachElement(element -> {\n+                                       cm.forEach(element -> {\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/Transforms.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -393,1 +393,1 @@\n-                for (var ce : com.elements()) {\n+                for (var ce : com) {\n","filename":"test\/jdk\/jdk\/jfr\/event\/compiler\/TestCompilerInlining.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,1 +104,1 @@\n-            cm.forEachElement(ce -> {\n+            cm.forEach(ce -> {\n@@ -106,1 +106,1 @@\n-                    mm.forEachElement(me -> {\n+                    mm.forEach(me -> {\n@@ -108,1 +108,1 @@\n-                            xm.forEachElement(xe -> {\n+                            xm.forEach(xe -> {\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/ReadDeep.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -207,1 +207,1 @@\n-                                xm.forEachElement(new Consumer<>() {\n+                                xm.forEach(new Consumer<>() {\n@@ -259,1 +259,1 @@\n-                                       cm.forEachElement(cb);\n+                                       cm.forEach(cb);\n@@ -290,1 +290,1 @@\n-                                       cm.forEachElement(element -> {\n+                                       cm.forEach(element -> {\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/Transforms.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}