{"files":[{"patch":"@@ -1894,0 +1894,3 @@\n+  INSN(vclz_v,  0b1010111, 0b010, 0b01100, 0b010010); \/\/ count leading zeros\n+  INSN(vctz_v,  0b1010111, 0b010, 0b01101, 0b010010); \/\/ count trailing zeros\n+\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -76,0 +76,2 @@\n+      case Op_CountTrailingZerosV:\n+      case Op_CountLeadingZerosV:\n@@ -3848,0 +3850,56 @@\n+\/\/ ------------------------------ CountLeadingZerosV --------------------------\n+\n+instruct vcountLeadingZeros_masked(vReg dst_src, vRegMask_V0 v0) %{\n+  match(Set dst_src (CountLeadingZerosV dst_src v0));\n+  ins_cost(VEC_COST);\n+  format %{ \"vcount_leading_zeros_masked $dst_src, $dst_src, v0\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    uint vlen = Matcher::vector_length(this);\n+    __ vsetvli_helper(bt, vlen);\n+    __ vclz_v(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcountLeadingZeros(vReg dst, vReg src) %{\n+  match(Set dst (CountLeadingZerosV src));\n+  ins_cost(VEC_COST);\n+  format %{ \"vcount_leading_zeros $dst, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    uint vlen = Matcher::vector_length(this);\n+    __ vsetvli_helper(bt, vlen);\n+    __ vclz_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ ------------------------------ CountTrailingZerosV --------------------------\n+\n+instruct vcountTrailingZeros_masked(vReg dst_src, vRegMask_V0 v0) %{\n+  match(Set dst_src (CountTrailingZerosV dst_src v0));\n+  ins_cost(VEC_COST);\n+  format %{ \"vcount_trailing_zeros_masked $dst_src, $dst_src, v0\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    uint vlen = Matcher::vector_length(this);\n+    __ vsetvli_helper(bt, vlen);\n+    __ vctz_v(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcountTrailingZeros(vReg dst, vReg src) %{\n+  match(Set dst (CountTrailingZerosV src));\n+  ins_cost(VEC_COST);\n+  format %{ \"vcount_trailing_zeros $dst, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    uint vlen = Matcher::vector_length(this);\n+    __ vsetvli_helper(bt, vlen);\n+    __ vctz_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":58,"deletions":0,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -30,1 +30,2 @@\n-*           (os.simpleArch == \"aarch64\" & vm.cpu.features ~= \".*sve.*\")\n+*           (os.simpleArch == \"aarch64\" & vm.cpu.features ~= \".*sve.*\") |\n+*           (os.simpleArch == \"riscv64\" & vm.cpu.features ~= \".*zvbb.*\")\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestNumberOfContinuousZeros.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}