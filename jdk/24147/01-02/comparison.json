{"files":[{"patch":"@@ -25,0 +25,1 @@\n+ * @bug 8351921 8352508\n@@ -27,1 +28,1 @@\n- *          This test simulates this behavior using Whitebox\/Unsafe methods\n+ *          This test simulates this behavior using Whitebox methods\n@@ -32,3 +33,2 @@\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc:+open\n- *          java.management\n+ * @library \/test\/lib \/\n+ * @modules java.management\n@@ -43,1 +43,1 @@\n-import jdk.internal.misc.Unsafe;\n+import gc.testlibrary.Helpers;\n@@ -52,1 +52,0 @@\n-    private static final jdk.internal.misc.Unsafe unsafe = Unsafe.getUnsafe();\n@@ -85,2 +84,9 @@\n-        \/\/ Do garbage collection to zap the data in the pinned region.\n-        wb.youngGC();\n+        \/\/ Full collection should not crash the VM in case of \"empty\" pinned regions.\n+        wb.fullGC();\n+\n+        \/\/ Do a young garbage collection to zap the data in the pinned region. This test\n+        \/\/ achieves that by executing a concurrent cycle that both performs both a young\n+        \/\/ garbage collection as well as checks that errorneous reclamation does not occur\n+        \/\/ in the Remark pause.\n+        wb.g1RunConcurrentGC();\n+        System.out.println(\"Done\");\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/pinnedobjs\/TestPinnedEvacEmpty.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"}]}