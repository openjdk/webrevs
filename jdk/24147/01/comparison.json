{"files":[{"patch":"@@ -1276,1 +1276,2 @@\n-                             || _cm->contains_live_object(hr->hrm_index());\n+                          || _cm->contains_live_object(hr->hrm_index())\n+                          || hr->has_pinned_objects();\n@@ -1293,1 +1294,3 @@\n-        if (hr->live_bytes() != 0) {\n+        const bool is_live = hr->live_bytes() != 0\n+                          || hr->has_pinned_objects();\n+        if (is_live) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -617,0 +617,6 @@\n+void G1ParScanThreadState::record_evacuation_failed_region(G1HeapRegion* r, uint worker_id, bool cause_pinned) {\n+  if (_evac_failure_regions->record(worker_id, r->hrm_index(), cause_pinned)) {\n+    G1HeapRegionPrinter::evac_failure(r);\n+  }\n+}\n+\n@@ -626,3 +632,1 @@\n-    if (_evac_failure_regions->record(_worker_id, r->hrm_index(), cause_pinned)) {\n-      G1HeapRegionPrinter::evac_failure(r);\n-    }\n+    record_evacuation_failed_region(r, _worker_id, cause_pinned);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -231,0 +231,1 @@\n+  void record_evacuation_failed_region(G1HeapRegion* r, uint worker_id, bool cause_pinned);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -663,7 +663,0 @@\n-\n-#ifdef ASSERT\n-  G1HeapRegion* r = _g1h->region_at(index);\n-  assert(live_bytes != 0,\n-         \"live bytes not set for %u used %zu garbage %zu cm-live %zu pinned %d\",\n-         index, r->used(), r->garbage_bytes(), live_bytes, r->has_pinned_objects());\n-#endif\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -590,0 +590,24 @@\n+\n+  \/\/ All pinned regions in the collection set must be registered as failed\n+  \/\/ regions as there is no guarantee that there is a reference reachable by\n+  \/\/ Java code (i.e. only by native code) that adds it to the evacuation failed\n+  \/\/ regions.\n+  void record_pinned_regions(G1ParScanThreadState* pss, uint worker_id) {\n+    class RecordPinnedRegionClosure : public G1HeapRegionClosure {\n+      G1ParScanThreadState* _pss;\n+      uint _worker_id;\n+\n+    public:\n+      RecordPinnedRegionClosure(G1ParScanThreadState* pss, uint worker_id) : _pss(pss), _worker_id(worker_id) { }\n+\n+      bool do_heap_region(G1HeapRegion* r) {\n+        if (r->has_pinned_objects()) {\n+          _pss->record_evacuation_failed_region(r, _worker_id, true \/* cause_pinned *\/);\n+        }\n+        return false;\n+      }\n+    } cl(pss, worker_id);\n+\n+    _g1h->collection_set_iterate_increment_from(&cl, worker_id);\n+  }\n+\n@@ -597,2 +621,0 @@\n-  uint _num_workers;\n-\n@@ -634,0 +656,3 @@\n+private:\n+  volatile bool _pinned_regions_recorded;\n+\n@@ -644,1 +669,1 @@\n-    _num_workers(num_workers)\n+    _pinned_regions_recorded(false)\n@@ -656,0 +681,3 @@\n+      if (!Atomic::cmpxchg(&_pinned_regions_recorded, false, true)) {\n+        record_pinned_regions(pss, worker_id);\n+      }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":31,"deletions":3,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @summary Test that pinned regions with no Java references into them\n+ *          do not make the garbage collector reclaim that region.\n+ *          This test simulates this behavior using Whitebox\/Unsafe methods\n+ *          to pin a Java object in a region with no other pinnable objects and\n+*           lose the reference to it before the garbage collection.\n+ * @requires vm.gc.G1\n+ * @requires vm.debug\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc:+open\n+ *          java.management\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UseG1GC\n+ *      -Xbootclasspath\/a:. -Xlog:gc=debug,gc+ergo+cset=trace,gc+phases=debug -XX:G1HeapRegionSize=1m -Xms30m  gc.g1.pinnedobjs.TestPinnedEvacEmpty\n+ *\/\n+\n+package gc.g1.pinnedobjs;\n+\n+import jdk.internal.misc.Unsafe;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.whitebox.WhiteBox;\n+\n+public class TestPinnedEvacEmpty {\n+\n+    private static final jdk.internal.misc.Unsafe unsafe = Unsafe.getUnsafe();\n+    private static final WhiteBox wb = WhiteBox.getWhiteBox();\n+\n+    private static final long objSize = wb.getObjectSize(new Object());\n+\n+    \/\/ How many j.l.Object should we allocate when creating garbage.\n+    private static final long numAllocations = 1024 * 1024 * 3 \/ objSize;\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Remove garbage from VM initialization.\n+        wb.fullGC();\n+\n+        \/\/ Allocate garbage so that the target object will be in a new region.\n+        for (int i = 0; i < numAllocations; i++) {\n+          Object z = new Object();\n+        }\n+        int[] o = new int[100];  \/\/ The target object to pin.\n+        \/\/ Further allocate garbage so that any additional allocations of potentially\n+        \/\/ pinned objects can not be allocated in the same region as the target object.\n+        for (int i = 0; i < numAllocations; i++) {\n+          Object z = new Object();\n+        }\n+\n+        Asserts.assertTrue(!wb.isObjectInOldGen(o), \"should not be in old gen already\");\n+\n+        \/\/ Pin the object.\n+        wb.pinObject(o);\n+\n+        \/\/ And forget the (Java) reference to the int array. After this, the garbage\n+        \/\/ collection should find a completely empty pinned region. The collector\n+        \/\/ must not collect\/free it.\n+        o = null;\n+\n+        \/\/ Do garbage collection to zap the data in the pinned region.\n+        wb.youngGC();\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/pinnedobjs\/TestPinnedEvacEmpty.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}