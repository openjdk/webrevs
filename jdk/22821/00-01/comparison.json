{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -248,0 +248,7 @@\n+    \/**\n+     * The {@code File} object representing the current directory.\n+     *\/\n+    private static final File CWD = new File(\".\");\n+    static File getCWD() {\n+        return CWD;\n+    }\n@@ -781,2 +788,1 @@\n-     * exists. If this abstract pathname is the empty abstract pathname then\n-     * this method returns {@code false}.\n+     * exists.\n","filename":"src\/java.base\/share\/classes\/java\/io\/File.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-\n@@ -37,0 +36,8 @@\n+    private String getPathForSysCalls(String path) {\n+        return path.isEmpty() ? File.getCWD().getPath() : path;\n+    }\n+\n+    private File getFileForSysCalls(File file) {\n+        return file.getPath().isEmpty() ? File.getCWD() : file;\n+    }\n+\n@@ -157,1 +164,1 @@\n-        return canonicalize0(path);\n+        return canonicalize0(getPathForSysCalls(path));\n@@ -167,1 +174,1 @@\n-        int rv = getBooleanAttributes0(f);\n+        int rv = getBooleanAttributes0(getFileForSysCalls(f));\n@@ -173,1 +180,1 @@\n-        int rv = getBooleanAttributes0(f);\n+        int rv = getBooleanAttributes0(getFileForSysCalls(f));\n@@ -186,1 +193,1 @@\n-        return checkAccess0(f, access);\n+        return checkAccess0(getFileForSysCalls(f), access);\n@@ -192,1 +199,1 @@\n-        return getLastModifiedTime0(f);\n+        return getLastModifiedTime0(getFileForSysCalls(f));\n@@ -198,1 +205,1 @@\n-        return getLength0(f);\n+        return getLength0(getFileForSysCalls(f));\n@@ -204,1 +211,1 @@\n-        return setPermission0(f, access, enable, owneronly);\n+        return setPermission0(getFileForSysCalls(f), access, enable, owneronly);\n@@ -218,1 +225,1 @@\n-        return delete0(f);\n+        return delete0(getFileForSysCalls(f));\n@@ -224,1 +231,1 @@\n-        return list0(f);\n+        return list0(getFileForSysCalls(f));\n@@ -230,1 +237,1 @@\n-        return createDirectory0(f);\n+        return createDirectory0(getFileForSysCalls(f));\n@@ -236,1 +243,1 @@\n-        return rename0(f1, f2);\n+        return rename0(getFileForSysCalls(f1), getFileForSysCalls(f2));\n@@ -242,1 +249,1 @@\n-        return setLastModifiedTime0(f, time);\n+        return setLastModifiedTime0(getFileForSysCalls(f), time);\n@@ -248,1 +255,1 @@\n-        return setReadOnly0(f);\n+        return setReadOnly0(getFileForSysCalls(f));\n@@ -263,1 +270,1 @@\n-        return getSpace0(f, t);\n+        return getSpace0(getFileForSysCalls(f), t);\n@@ -273,1 +280,1 @@\n-        long nameMax = getNameMax0(path);\n+        long nameMax = getNameMax0(getPathForSysCalls(path));\n","filename":"src\/java.base\/unix\/classes\/java\/io\/UnixFileSystem.java","additions":24,"deletions":17,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,0 +82,8 @@\n+    private String getPathForWin32Calls(String path) {\n+        return (path != null && path.isEmpty()) ? File.getCWD().getPath() : path;\n+    }\n+\n+    private File getFileForWin32Calls(File file) {\n+        return file.getPath().isEmpty() ? File.getCWD() : file;\n+    }\n+\n@@ -498,1 +506,1 @@\n-        return getBooleanAttributes0(f);\n+        return getBooleanAttributes0(getFileForWin32Calls(f));\n@@ -504,1 +512,1 @@\n-        return checkAccess0(f, access);\n+        return checkAccess0(getFileForWin32Calls(f), access);\n@@ -510,1 +518,1 @@\n-        return getLastModifiedTime0(f);\n+        return getLastModifiedTime0(getFileForWin32Calls(f));\n@@ -516,1 +524,1 @@\n-        return getLength0(f);\n+        return getLength0(getFileForWin32Calls(f));\n@@ -522,1 +530,1 @@\n-        return setPermission0(f, access, enable, owneronly);\n+        return setPermission0(getFileForWin32Calls(f), access, enable, owneronly);\n@@ -536,1 +544,1 @@\n-        return list0(f);\n+        return list0(getFileForWin32Calls(f));\n@@ -548,1 +556,1 @@\n-        return setLastModifiedTime0(f, time);\n+        return setLastModifiedTime0(getFileForWin32Calls(f), time);\n@@ -587,1 +595,1 @@\n-            return getSpace0(f, t);\n+            return getSpace0(getFileForWin32Calls(f), t);\n@@ -614,1 +622,1 @@\n-        return getNameMax0(s);\n+        return getNameMax0(getPathForWin32Calls(s));\n","filename":"src\/java.base\/windows\/classes\/java\/io\/WinNTFileSystem.java","additions":18,"deletions":10,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,3 @@\n-   @bug 4842706\n-   @summary Test some file operations with empty path\n+ * @bug 4842706 8024695\n+ * @summary Test some file operations with empty path\n+ * @run junit EmptyPath\n@@ -29,1 +30,6 @@\n-import java.io.*;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -31,0 +37,13 @@\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import org.junit.jupiter.api.condition.DisabledOnOs;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+@TestMethodOrder(OrderAnnotation.class)\n@@ -32,16 +51,178 @@\n-    public static void main(String [] args) throws Exception {\n-        File f = new File(\"\");\n-        f.mkdir();\n-        try {\n-            f.createNewFile();\n-            throw new RuntimeException(\"Expected exception not thrown\");\n-        } catch (IOException ioe) {\n-            \/\/ Correct result\n-        }\n-        try {\n-            FileInputStream fis = new FileInputStream(f);\n-            fis.close();\n-            throw new RuntimeException(\"Expected exception not thrown\");\n-        } catch (FileNotFoundException fnfe) {\n-            \/\/ Correct result\n-        }\n+    static File f;\n+\n+    @BeforeAll\n+    public static void init() {\n+        f = new File(\"\");\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void mkdir() {\n+        assertFalse(f.mkdir());\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void createNewFile() {\n+        assertThrows(IOException.class, () -> f.createNewFile());\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void close() throws FileNotFoundException {\n+        assertThrows(FileNotFoundException.class,\n+                     () -> new FileInputStream(f));\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void exists() {\n+        assertTrue(f.exists());\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void canExecute() {\n+        assertTrue(f.canExecute());\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void canRead() {\n+        assertTrue(f.canRead());\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void canWrite() {\n+        assertTrue(f.canWrite());\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void getFreeSpace() {\n+        assertTrue(f.getFreeSpace() > 0);\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void getTotalSpace() {\n+        assertTrue(f.getTotalSpace() > 0);\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void getUsableSpace() {\n+        assertTrue(f.getUsableSpace() > 0);\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void isDirectory() {\n+        assertTrue(f.isDirectory());\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void isFile() {\n+        assertFalse(f.isFile());\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void isHidden() {\n+        assertFalse(f.isHidden());\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void lastModified() {\n+        assertTrue(f.lastModified() > 0);\n+    }\n+\n+    @Test\n+    @Order(1)\n+    @DisabledOnOs({OS.WINDOWS})\n+    public void lengthUnix() throws IOException {\n+        assertTrue(f.length() > 0);\n+    }\n+\n+    \/\/ Note: On Windows, File.length() can return zero when run in a\n+    \/\/ scratch directory.\n+    @Test\n+    @Order(1)\n+    @EnabledOnOs({OS.WINDOWS})\n+    public void lengthWindows() throws IOException {\n+        long len = f.length();\n+        assertTrue(len > 0 || (len == 0 && Files.size(f.toPath()) == 0));\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void list() {\n+        String[] files = f.list();\n+        assertNotNull(files);\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void listFiles() {\n+        File[] files = f.listFiles();\n+        assertNotNull(files);\n+    }\n+\n+    \/\/ Note: Testing File.setExecutable is omitted because calling\n+    \/\/ File.setExecutable(false) makes it impossible to set the CWD to\n+    \/\/ exeuctable again which makes subsequent tests fail\n+\n+    @Test\n+    @Order(3)\n+    @DisabledOnOs({OS.WINDOWS})\n+    public void setReadable() {\n+        assertTrue(f.canRead());\n+        assertTrue(f.setReadable(false));\n+        assertFalse(f.canRead());\n+        assertTrue(f.setReadable(true));\n+        assertTrue(f.canRead());\n+    }\n+\n+    @Test\n+    @Order(3)\n+    @DisabledOnOs({OS.WINDOWS})\n+    public void setReadOnly() {\n+        assertTrue(f.canExecute());\n+        assertTrue(f.canRead());\n+        assertTrue(f.canWrite());\n+        assertTrue(f.setReadOnly());\n+        assertTrue(f.canRead());\n+        assertFalse(f.canWrite());\n+        assertTrue(f.setWritable(true));\n+        assertTrue(f.canWrite());\n+    }\n+\n+    @Test\n+    @Order(3)\n+    @DisabledOnOs({OS.WINDOWS})\n+    public void setWritable() {\n+        assertTrue(f.canWrite());\n+        assertTrue(f.setWritable(false));\n+        assertFalse(f.canWrite());\n+        assertTrue(f.setWritable(true));\n+        assertTrue(f.canWrite());\n+    }\n+\n+    @Test\n+    @Order(2)\n+    public void setLastModified() {\n+        long t0 = f.lastModified();\n+        long t = System.currentTimeMillis();\n+        assertTrue(f.setLastModified(t));\n+        assertEquals(t, f.lastModified());\n+        assertTrue(f.setLastModified(t0));\n+        assertEquals(t0, f.lastModified());\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void toURI() {\n+        assertEquals(f.toURI(), f.toPath().toUri());\n","filename":"test\/jdk\/java\/io\/File\/EmptyPath.java","additions":201,"deletions":20,"binary":false,"changes":221,"status":"modified"}]}