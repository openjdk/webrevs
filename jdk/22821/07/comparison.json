{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,16 @@\n+    \/* -- Current Working Directory --*\/\n+\n+    \/* lazy initialization of CWD object *\/\n+    private static class CurrentWorkingDirectoryHolder {\n+        static final File CURRENT_WORKING_DIRECTORY = currentWorkingDirectory();\n+\n+        private static final File currentWorkingDirectory() {\n+            return new File(\".\");\n+        }\n+    }\n+\n+    \/* CWD object accessor *\/\n+    static File getCWD() {\n+        return CurrentWorkingDirectoryHolder.CURRENT_WORKING_DIRECTORY;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileSystem.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-\n@@ -37,0 +36,8 @@\n+    private String getPathForSysCalls(String path) {\n+        return path.isEmpty() ? getCWD().getPath() : path;\n+    }\n+\n+    private File getFileForSysCalls(File file) {\n+        return file.getPath().isEmpty() ? getCWD() : file;\n+    }\n+\n@@ -157,1 +164,1 @@\n-        return canonicalize0(path);\n+        return canonicalize0(getPathForSysCalls(path));\n@@ -167,1 +174,1 @@\n-        int rv = getBooleanAttributes0(f);\n+        int rv = getBooleanAttributes0(getFileForSysCalls(f));\n@@ -173,1 +180,1 @@\n-        int rv = getBooleanAttributes0(f);\n+        int rv = getBooleanAttributes0(getFileForSysCalls(f));\n@@ -186,1 +193,1 @@\n-        return checkAccess0(f, access);\n+        return checkAccess0(getFileForSysCalls(f), access);\n@@ -192,1 +199,1 @@\n-        return getLastModifiedTime0(f);\n+        return getLastModifiedTime0(getFileForSysCalls(f));\n@@ -198,1 +205,1 @@\n-        return getLength0(f);\n+        return getLength0(getFileForSysCalls(f));\n@@ -204,1 +211,1 @@\n-        return setPermission0(f, access, enable, owneronly);\n+        return setPermission0(getFileForSysCalls(f), access, enable, owneronly);\n@@ -218,1 +225,1 @@\n-        return delete0(f);\n+        return delete0(getFileForSysCalls(f));\n@@ -224,1 +231,1 @@\n-        return list0(f);\n+        return list0(getFileForSysCalls(f));\n@@ -230,1 +237,1 @@\n-        return createDirectory0(f);\n+        return createDirectory0(getFileForSysCalls(f));\n@@ -236,1 +243,1 @@\n-        return rename0(f1, f2);\n+        return rename0(getFileForSysCalls(f1), getFileForSysCalls(f2));\n@@ -242,1 +249,1 @@\n-        return setLastModifiedTime0(f, time);\n+        return setLastModifiedTime0(getFileForSysCalls(f), time);\n@@ -248,1 +255,1 @@\n-        return setReadOnly0(f);\n+        return setReadOnly0(getFileForSysCalls(f));\n@@ -263,1 +270,1 @@\n-        return getSpace0(f, t);\n+        return getSpace0(getFileForSysCalls(f), t);\n@@ -273,1 +280,1 @@\n-        long nameMax = getNameMax0(path);\n+        long nameMax = getNameMax0(getPathForSysCalls(path));\n","filename":"src\/java.base\/unix\/classes\/java\/io\/UnixFileSystem.java","additions":24,"deletions":17,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -82,0 +82,8 @@\n+    private String getPathForWin32Calls(String path) {\n+        return (path != null && path.isEmpty()) ? getCWD().getPath() : path;\n+    }\n+\n+    private File getFileForWin32Calls(File file) {\n+        return file.getPath().isEmpty() ? getCWD() : file;\n+    }\n+\n@@ -498,1 +506,1 @@\n-        return getBooleanAttributes0(f);\n+        return getBooleanAttributes0(getFileForWin32Calls(f));\n@@ -504,1 +512,1 @@\n-        return checkAccess0(f, access);\n+        return checkAccess0(getFileForWin32Calls(f), access);\n@@ -510,1 +518,1 @@\n-        return getLastModifiedTime0(f);\n+        return getLastModifiedTime0(getFileForWin32Calls(f));\n@@ -516,1 +524,1 @@\n-        return getLength0(f);\n+        return getLength0(getFileForWin32Calls(f));\n@@ -522,1 +530,1 @@\n-        return setPermission0(f, access, enable, owneronly);\n+        return setPermission0(getFileForWin32Calls(f), access, enable, owneronly);\n@@ -536,1 +544,1 @@\n-        return list0(f);\n+        return list0(getFileForWin32Calls(f));\n@@ -548,1 +556,1 @@\n-        return setLastModifiedTime0(f, time);\n+        return setLastModifiedTime0(getFileForWin32Calls(f), time);\n@@ -594,1 +602,1 @@\n-            return getSpace0(f, t);\n+            return getSpace0(getFileForWin32Calls(f), t);\n@@ -621,1 +629,1 @@\n-        return getNameMax0(s);\n+        return getNameMax0(getPathForWin32Calls(s));\n","filename":"src\/java.base\/windows\/classes\/java\/io\/WinNTFileSystem.java","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,3 @@\n-   @bug 4842706\n-   @summary Test some file operations with empty path\n+ * @bug 4842706 8024695\n+ * @summary Test some file operations with empty path\n+ * @run junit EmptyPath\n@@ -29,1 +30,19 @@\n-import java.io.*;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.FileStore;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import org.junit.jupiter.api.condition.DisabledOnOs;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -32,3 +51,193 @@\n-    public static void main(String [] args) throws Exception {\n-        File f = new File(\"\");\n-        f.mkdir();\n+    private static final String EMPTY_STRING = \"\";\n+\n+    static File f;\n+    static Path p;\n+\n+    @BeforeAll\n+    public static void init() {\n+        f = new File(EMPTY_STRING);\n+        p = Path.of(EMPTY_STRING);\n+    }\n+\n+    @Test\n+    public void canExecute() {\n+        assertTrue(f.canExecute());\n+    }\n+\n+    @Test\n+    public void canRead() {\n+        assertTrue(f.canRead());\n+    }\n+\n+    @Test\n+    public void canWrite() {\n+        assertTrue(f.canWrite());\n+    }\n+\n+    @Test\n+    public void compareTo() {\n+        assertEquals(0, f.compareTo(p.toFile()));\n+    }\n+\n+    @Test\n+    public void createNewFile() {\n+        assertThrows(IOException.class, () -> f.createNewFile());\n+    }\n+\n+    @Test\n+    public void open() throws FileNotFoundException {\n+        assertThrows(FileNotFoundException.class,\n+                     () -> new FileInputStream(f));\n+    }\n+\n+    @Test\n+    public void delete() {\n+        assertFalse(f.delete());\n+    }\n+\n+    @Test\n+    public void equals() {\n+        assertTrue(f.equals(p.toFile()));\n+    }\n+\n+    @Test\n+    public void exists() {\n+        assertTrue(f.exists());\n+    }\n+\n+    @Test\n+    public void getAbsolutePath() {\n+        System.out.println(p.toAbsolutePath().toString() + \"\\n\" +\n+                           f.getAbsolutePath());\n+        assertEquals(p.toAbsolutePath().toString(), f.getAbsolutePath());\n+    }\n+\n+    private void checkSpace(long expected, long actual) {\n+        if (expected == 0) {\n+            assertEquals(0L, actual);\n+        } else {\n+            assertTrue(actual > 0);\n+        }\n+    }\n+\n+    @Test\n+    public void getFreeSpace() throws IOException {\n+        FileStore fs = Files.getFileStore(f.toPath());\n+        checkSpace(fs.getUnallocatedSpace(), f.getFreeSpace());\n+    }\n+\n+    @Test\n+    public void getName() {\n+        assertEquals(p.getFileName().toString(), f.getName());\n+    }\n+\n+    @Test\n+    public void getParent() {\n+        assertNull(f.getParent());\n+    }\n+\n+    @Test\n+    public void getPath() {\n+        assertEquals(p.toString(), f.getPath());\n+    }\n+\n+    @Test\n+    public void getTotalSpace() throws IOException {\n+        FileStore fs = Files.getFileStore(f.toPath());\n+        checkSpace(fs.getTotalSpace(), f.getTotalSpace());\n+    }\n+\n+    @Test\n+    public void getUsableSpace() throws IOException {\n+        FileStore fs = Files.getFileStore(f.toPath());\n+        checkSpace(fs.getUsableSpace(), f.getUsableSpace());\n+    }\n+\n+    @Test\n+    public void isNotAbsolute() {\n+        assertFalse(f.isAbsolute());\n+    }\n+\n+    @Test\n+    public void isAbsolute() {\n+        assertTrue(f.getAbsoluteFile().isAbsolute());\n+    }\n+\n+    @Test\n+    public void isDirectory() {\n+        assertTrue(f.isDirectory());\n+    }\n+\n+    @Test\n+    public void isFile() {\n+        assertFalse(f.isFile());\n+    }\n+\n+    @Test\n+    public void isHidden() {\n+        assertFalse(f.isHidden());\n+    }\n+\n+    @Test\n+    public void lastModified() {\n+        assertTrue(f.lastModified() > 0);\n+    }\n+\n+    @Test\n+    public void length() throws IOException {\n+        assertEquals(Files.size(f.toPath()), f.length());\n+    }\n+\n+    @Test\n+    public void list() throws IOException {\n+        String[] files = f.list();\n+        assertNotNull(files);\n+        Set<String> ioSet = new HashSet(Arrays.asList(files));\n+        Set<String> nioSet = new HashSet();\n+        Files.list(p).forEach((x) -> nioSet.add(x.toString()));\n+        assertEquals(nioSet, ioSet);\n+    }\n+\n+    @Test\n+    public void mkdir() {\n+        assertFalse(f.mkdir());\n+    }\n+\n+    @Test\n+    public void setLastModified() {\n+        long t0 = f.lastModified();\n+        long t = System.currentTimeMillis();\n+        try {\n+            assertTrue(f.setLastModified(t));\n+            assertEquals(t, f.lastModified());\n+            assertTrue(f.setLastModified(t0));\n+            assertEquals(t0, f.lastModified());\n+        } finally {\n+            f.setLastModified(t0);\n+        }\n+    }\n+\n+    \/\/ Note: Testing File.setExecutable is omitted because calling\n+    \/\/ File.setExecutable(false) makes it impossible to set the CWD to\n+    \/\/ executable again which makes subsequent tests fail\n+\n+    @Test\n+    @DisabledOnOs({OS.WINDOWS})\n+    public void setReadable() {\n+        assertTrue(f.canRead());\n+        try {\n+            assertTrue(f.setReadable(false));\n+            assertFalse(f.canRead());\n+            assertTrue(f.setReadable(true));\n+            assertTrue(f.canRead());\n+        } finally {\n+            f.setReadable(true);\n+        }\n+    }\n+\n+    @Test\n+    @DisabledOnOs({OS.WINDOWS})\n+    public void setReadOnly() {\n+        assertTrue(f.canExecute());\n+        assertTrue(f.canRead());\n+        assertTrue(f.canWrite());\n@@ -36,4 +245,7 @@\n-            f.createNewFile();\n-            throw new RuntimeException(\"Expected exception not thrown\");\n-        } catch (IOException ioe) {\n-            \/\/ Correct result\n+            assertTrue(f.setReadOnly());\n+            assertTrue(f.canRead());\n+            assertFalse(f.canWrite());\n+            assertTrue(f.setWritable(true, true));\n+            assertTrue(f.canWrite());\n+        } finally {\n+            f.setWritable(true, true);\n@@ -41,0 +253,6 @@\n+    }\n+\n+    @Test\n+    @DisabledOnOs({OS.WINDOWS})\n+    public void setWritable() {\n+        assertTrue(f.canWrite());\n@@ -42,5 +260,6 @@\n-            FileInputStream fis = new FileInputStream(f);\n-            fis.close();\n-            throw new RuntimeException(\"Expected exception not thrown\");\n-        } catch (FileNotFoundException fnfe) {\n-            \/\/ Correct result\n+            assertTrue(f.setWritable(false, true));\n+            assertFalse(f.canWrite());\n+            assertTrue(f.setWritable(true, true));\n+            assertTrue(f.canWrite());\n+        } finally {\n+            f.setWritable(true, true);\n@@ -49,0 +268,10 @@\n+\n+    @Test\n+    public void toPath() {\n+        assertEquals(p, f.toPath());\n+    }\n+\n+    @Test\n+    public void toURI() {\n+        assertEquals(f.toPath().toUri(), f.toURI());\n+    }\n","filename":"test\/jdk\/java\/io\/File\/EmptyPath.java","additions":245,"deletions":16,"binary":false,"changes":261,"status":"modified"}]}