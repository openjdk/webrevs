{"files":[{"patch":"@@ -37,0 +37,3 @@\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n@@ -52,0 +55,2 @@\n+    private static final String EMPTY_STRING = \"\";\n+\n@@ -53,0 +58,1 @@\n+    static Path p;\n@@ -56,1 +62,2 @@\n-        f = new File(\"\");\n+        f = new File(EMPTY_STRING);\n+        p = Path.of(EMPTY_STRING);\n@@ -61,2 +68,20 @@\n-    public void mkdir() {\n-        assertFalse(f.mkdir());\n+    public void canExecute() {\n+        assertTrue(f.canExecute());\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void canRead() {\n+        assertTrue(f.canRead());\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void canWrite() {\n+        assertTrue(f.canWrite());\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void compareTo() {\n+        assertEquals(0, f.compareTo(p.toFile()));\n@@ -73,1 +98,1 @@\n-    public void close() throws FileNotFoundException {\n+    public void open() throws FileNotFoundException {\n@@ -80,2 +105,2 @@\n-    public void exists() {\n-        assertTrue(f.exists());\n+    public void delete() {\n+        assertFalse(f.delete());\n@@ -86,2 +111,2 @@\n-    public void canExecute() {\n-        assertTrue(f.canExecute());\n+    public void equals() {\n+        assertTrue(f.equals(p.toFile()));\n@@ -92,2 +117,2 @@\n-    public void canRead() {\n-        assertTrue(f.canRead());\n+    public void exists() {\n+        assertTrue(f.exists());\n@@ -98,2 +123,4 @@\n-    public void canWrite() {\n-        assertTrue(f.canWrite());\n+    public void getAbsolutePath() {\n+        System.out.println(p.toAbsolutePath().toString() + \"\\n\" +\n+                           f.getAbsolutePath());\n+        assertEquals(p.toAbsolutePath().toString(), f.getAbsolutePath());\n@@ -119,0 +146,18 @@\n+    @Test\n+    @Order(1)\n+    public void getName() {\n+        assertEquals(p.getFileName().toString(), f.getName());\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void getParent() {\n+        assertNull(f.getParent());\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void getPath() {\n+        assertEquals(p.toString(), f.getPath());\n+    }\n+\n@@ -133,0 +178,12 @@\n+    @Test\n+    @Order(1)\n+    public void isNotAbsolute() {\n+        assertFalse(f.isAbsolute());\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void isAbsolute() {\n+        assertTrue(f.getAbsoluteFile().isAbsolute());\n+    }\n+\n@@ -160,1 +217,1 @@\n-        assertEquals(f.length(), Files.size(f.toPath()));\n+        assertEquals(Files.size(f.toPath()), f.length());\n@@ -165,1 +222,1 @@\n-    public void list() {\n+    public void list() throws IOException {\n@@ -168,0 +225,4 @@\n+        Set<String> ioSet = new HashSet(Arrays.asList(files));\n+        Set<String> nioSet = new HashSet();\n+        Files.list(p).forEach((x) -> nioSet.add(x.toString()));\n+        assertEquals(nioSet, ioSet);\n@@ -172,3 +233,13 @@\n-    public void listFiles() {\n-        File[] files = f.listFiles();\n-        assertNotNull(files);\n+    public void mkdir() {\n+        assertFalse(f.mkdir());\n+    }\n+\n+    @Test\n+    @Order(2)\n+    public void setLastModified() {\n+        long t0 = f.lastModified();\n+        long t = System.currentTimeMillis();\n+        assertTrue(f.setLastModified(t));\n+        assertEquals(t, f.lastModified());\n+        assertTrue(f.setLastModified(t0));\n+        assertEquals(t0, f.lastModified());\n@@ -179,1 +250,1 @@\n-    \/\/ exeuctable again which makes subsequent tests fail\n+    \/\/ executable again which makes subsequent tests fail\n@@ -218,8 +289,3 @@\n-    @Order(2)\n-    public void setLastModified() {\n-        long t0 = f.lastModified();\n-        long t = System.currentTimeMillis();\n-        assertTrue(f.setLastModified(t));\n-        assertEquals(t, f.lastModified());\n-        assertTrue(f.setLastModified(t0));\n-        assertEquals(t0, f.lastModified());\n+    @Order(1)\n+    public void toPath() {\n+        assertEquals(p, f.toPath());\n@@ -231,1 +297,1 @@\n-        assertEquals(f.toURI(), f.toPath().toUri());\n+        assertEquals(f.toPath().toUri(), f.toURI());\n","filename":"test\/jdk\/java\/io\/File\/EmptyPath.java","additions":93,"deletions":27,"binary":false,"changes":120,"status":"modified"}]}