{"files":[{"patch":"@@ -208,1 +208,1 @@\n-        VarHandle handle = Utils.makeSegmentViewVarHandle(valueLayout);\n+        VarHandle handle = Utils.makeRawSegmentViewVarHandle(valueLayout);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.foreign.MemoryLayout.PathElement;\n@@ -40,0 +41,2 @@\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n@@ -90,1 +93,22 @@\n-    public static VarHandle makeSegmentViewVarHandle(ValueLayout layout) {\n+    \/**\n+     * This method returns a <em>raw var handle<\/em>, that is, a var handle that does not perform any size\n+     * or alignment checks. Such checks are added (using adaptation) by {@link LayoutPath#dereferenceHandle()}.\n+     * <p>\n+     * We provide two level of caching of the generated var handles. First, the var handle associated\n+     * with a {@link ValueLayout#varHandle()} call is cached inside a stable field of the value layout implementation.\n+     * This optimizes common code idioms like {@code JAVA_INT.varHandle().getInt(...)}. A second layer of caching\n+     * is then provided by this method: after all, var handles constructed by {@link MemoryLayout#varHandle(PathElement...)}\n+     * will be obtained by adapting some raw var handle generated by this method.\n+     *\n+     * @param layout the value layout for which a raw memory segment var handle is to be created.\n+     * @return a raw memory segment var handle.\n+     *\/\n+    public static VarHandle makeRawSegmentViewVarHandle(ValueLayout layout) {\n+        final class VarHandleCache {\n+            private static final Map<ValueLayout, VarHandle> HANDLE_MAP = new ConcurrentHashMap<>();\n+        }\n+        return VarHandleCache.HANDLE_MAP\n+                .computeIfAbsent(layout.withoutName(), Utils::makeRawSegmentViewVarHandleInternal);\n+    }\n+\n+    private static VarHandle makeRawSegmentViewVarHandleInternal(ValueLayout layout) {\n@@ -111,1 +135,1 @@\n-                            pointeeByteSize(addressLayout), pointeeByteAlign(addressLayout)),\n+                                    pointeeByteSize(addressLayout), pointeeByteAlign(addressLayout)),\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":26,"deletions":2,"binary":false,"changes":28,"status":"modified"}]}