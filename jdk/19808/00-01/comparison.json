{"files":[{"patch":"@@ -104,4 +104,0 @@\n-  CastIINode(Node* n, const Type* t, DependencyType dependency = RegularDependency, bool range_check_dependency = false, const TypeTuple* types = nullptr)\n-    : ConstraintCastNode(nullptr, n, t, dependency, types), _range_check_dependency(range_check_dependency) {\n-    init_class_id(Class_CastII);\n-  }\n@@ -110,0 +106,1 @@\n+    assert(ctrl != nullptr, \"control should be set\");\n@@ -137,0 +134,1 @@\n+    assert(ctrl != nullptr, \"control should be set\");\n","filename":"src\/hotspot\/share\/opto\/castnode.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3007,1 +3007,1 @@\n-          max_value = new CastIINode(max_value, loop->_head->as_CountedLoop()->phi()->bottom_type());\n+          max_value = new CastIINode(loop_entry, max_value, loop->_head->as_CountedLoop()->phi()->bottom_type());\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2487,2 +2487,1 @@\n-      insert_val = gvn().transform(new ConvL2INode(insert_val));\n-      insert_val = gvn().transform(new CastIINode(insert_val, TypeInt::BYTE));\n+      insert_val = gvn().transform(new ConvL2INode(insert_val, TypeInt::BYTE));\n@@ -2491,2 +2490,1 @@\n-      insert_val = gvn().transform(new ConvL2INode(insert_val));\n-      insert_val = gvn().transform(new CastIINode(insert_val, TypeInt::SHORT));\n+      insert_val = gvn().transform(new ConvL2INode(insert_val, TypeInt::SHORT));\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}