{"files":[{"patch":"@@ -24,13 +24,0 @@\n-\/*\n- * @test\n- * @bug 6270015\n- * @library \/test\/lib\n- * @build jdk.test.lib.Asserts\n- *        jdk.test.lib.Utils\n- *        jdk.test.lib.net.SimpleSSLContext\n- *        jdk.test.lib.net.URIBuilder\n- * @run main\/othervm Test12\n- * @run main\/othervm -Djava.net.preferIPv6Addresses=true Test12\n- * @summary Light weight HTTP server\n- *\/\n-\n@@ -41,0 +28,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -52,3 +41,12 @@\n-\/* basic http\/s connectivity test\n- * Tests:\n- *      - same as Test1, but in parallel\n+\/*\n+ * @test\n+ * @bug 6270015 8359477\n+ * @summary Light weight HTTP server - basic http\/s connectivity test, same as Test1,\n+ *          but in parallel\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Asserts\n+ *        jdk.test.lib.Utils\n+ *        jdk.test.lib.net.SimpleSSLContext\n+ *        jdk.test.lib.net.URIBuilder\n+ * @run main\/othervm Test12\n+ * @run main\/othervm -Djava.net.preferIPv6Addresses=true Test12\n@@ -56,1 +54,0 @@\n-\n@@ -64,2 +61,0 @@\n-    static boolean fail = false;\n-\n@@ -93,1 +88,1 @@\n-            Runner r[] = new Runner[8];\n+            final Runner[] r = new Runner[8];\n@@ -102,3 +97,10 @@\n-            start (r);\n-            join (r);\n-            System.out.println (\"OK\");\n+            \/\/ submit the tasks\n+            final List<Future<Void>> futures = new ArrayList<>();\n+            for (Runner runner : r) {\n+                futures.add(executor.submit(runner));\n+            }\n+            \/\/ wait for the tasks' completion\n+            for (Future<Void> f : futures) {\n+                f.get();\n+            }\n+            System.out.println (\"All \" + futures.size() + \" tasks completed successfully\");\n@@ -111,17 +113,1 @@\n-                executor.shutdown ();\n-            Files.delete(smallFilePath);\n-            Files.delete(largeFilePath);\n-        }\n-    }\n-\n-    static void start (Runner[] x) {\n-        for (int i=0; i<x.length; i++) {\n-            x[i].start();\n-        }\n-    }\n-\n-    static void join (Runner[] x) {\n-        for (int i=0; i<x.length; i++) {\n-            try {\n-                x[i].join();\n-            } catch (InterruptedException e) {}\n+                executor.shutdown();\n@@ -131,2 +117,1 @@\n-\n-    static class Runner extends Thread {\n+    static class Runner implements Callable<Void> {\n@@ -139,1 +124,1 @@\n-        Runner (boolean fixedLen, String protocol, int port, Path filePath) {\n+        Runner(boolean fixedLen, String protocol, int port, Path filePath) {\n@@ -146,43 +131,17 @@\n-        public void run () {\n-            try {\n-                URL url = URIBuilder.newBuilder()\n-                          .scheme(protocol)\n-                          .loopback()\n-                          .port(port)\n-                          .path(\"\/\" + filePath.getFileName())\n-                          .toURL();\n-                HttpURLConnection urlc = (HttpURLConnection) url.openConnection(Proxy.NO_PROXY);\n-                if (urlc instanceof HttpsURLConnection) {\n-                    HttpsURLConnection urlcs = (HttpsURLConnection) urlc;\n-                    urlcs.setHostnameVerifier (new HostnameVerifier () {\n-                        public boolean verify (String s, SSLSession s1) {\n-                            return true;\n-                        }\n-                    });\n-                    urlcs.setSSLSocketFactory (ctx.getSocketFactory());\n-                }\n-                byte [] buf = new byte [4096];\n-\n-                if (fixedLen) {\n-                    urlc.setRequestProperty (\"XFixed\", \"yes\");\n-                }\n-                InputStream is = urlc.getInputStream();\n-                File temp = File.createTempFile (\"Test1\", null);\n-                temp.deleteOnExit();\n-                OutputStream fout = new BufferedOutputStream (new FileOutputStream(temp));\n-                int c, count = 0;\n-                while ((c=is.read(buf)) != -1) {\n-                    count += c;\n-                    fout.write (buf, 0, c);\n-                }\n-                is.close();\n-                fout.close();\n-\n-                if (count != filePath.toFile().length()) {\n-                    throw new RuntimeException (\"wrong amount of data returned\");\n-                }\n-                assertFileContentsEqual(filePath, temp.toPath());\n-                temp.delete();\n-            } catch (Exception e) {\n-                e.printStackTrace();\n-                fail = true;\n+        @Override\n+        public Void call() throws Exception {\n+            final URL url = URIBuilder.newBuilder()\n+                      .scheme(protocol)\n+                      .loopback()\n+                      .port(port)\n+                      .path(\"\/\" + filePath.getFileName())\n+                      .toURL();\n+            final HttpURLConnection urlc = (HttpURLConnection) url.openConnection(Proxy.NO_PROXY);\n+            if (urlc instanceof HttpsURLConnection) {\n+                HttpsURLConnection urlcs = (HttpsURLConnection) urlc;\n+                urlcs.setHostnameVerifier (new HostnameVerifier () {\n+                    public boolean verify (String s, SSLSession s1) {\n+                        return true;\n+                    }\n+                });\n+                urlcs.setSSLSocketFactory (ctx.getSocketFactory());\n@@ -190,0 +149,17 @@\n+            if (fixedLen) {\n+                urlc.setRequestProperty (\"XFixed\", \"yes\");\n+            }\n+            final Path temp = Files.createTempFile(Path.of(\".\"), \"Test12\", null);\n+            final long numReceived;\n+            try (InputStream is = urlc.getInputStream();\n+                 OutputStream fout = new BufferedOutputStream(new FileOutputStream(temp.toFile()))) {\n+                numReceived = is.transferTo(fout);\n+            }\n+            final long expected = filePath.toFile().length();\n+            if (numReceived != expected) {\n+                throw new RuntimeException (\"expected \" + expected + \" bytes, but received \"\n+                        + numReceived);\n+            }\n+            assertFileContentsEqual(filePath, temp);\n+            Files.delete(temp);\n+            return null;\n@@ -192,1 +168,0 @@\n-\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/Test12.java","additions":62,"deletions":87,"binary":false,"changes":149,"status":"modified"}]}