{"files":[{"patch":"@@ -817,16 +817,1 @@\n-  \/\/ Create input type (domain)\n-  int argcnt = NOT_LP64(3) LP64_ONLY(4);\n-  const Type** const domain_fields = TypeTuple::fields(argcnt);\n-  int argp = TypeFunc::Parms;\n-  domain_fields[argp++] = TypeInstPtr::NOTNULL;  \/\/ src\n-  domain_fields[argp++] = TypeInstPtr::NOTNULL;  \/\/ dst\n-  domain_fields[argp++] = TypeX_X;               \/\/ size lower\n-  LP64_ONLY(domain_fields[argp++] = Type::HALF); \/\/ size upper\n-  assert(argp == TypeFunc::Parms+argcnt, \"correct decoding\");\n-  const TypeTuple* const domain = TypeTuple::make(TypeFunc::Parms + argcnt, domain_fields);\n-\n-  \/\/ Create result type (range)\n-  const Type** const range_fields = TypeTuple::fields(0);\n-  const TypeTuple* const range = TypeTuple::make(TypeFunc::Parms + 0, range_fields);\n-\n-  return TypeFunc::make(domain, range);\n+  return OptoRuntime::clone_type_Type();\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/barrierSetC2.cpp","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -523,9 +523,1 @@\n-  const Type **fields = TypeTuple::fields(1);\n-  fields[TypeFunc::Parms+0] = TypeInstPtr::NOTNULL; \/\/ original field value\n-  const TypeTuple *domain = TypeTuple::make(TypeFunc::Parms+1, fields);\n-\n-  \/\/ create result type (range)\n-  fields = TypeTuple::fields(0);\n-  const TypeTuple *range = TypeTuple::make(TypeFunc::Parms+0, fields);\n-\n-  return TypeFunc::make(domain, range);\n+  return OptoRuntime::write_barrier_pre_Type();\n@@ -535,9 +527,1 @@\n-  const Type **fields = TypeTuple::fields(1);\n-  fields[TypeFunc::Parms+0] = TypeOopPtr::NOTNULL; \/\/ src oop\n-  const TypeTuple *domain = TypeTuple::make(TypeFunc::Parms+1, fields);\n-\n-  \/\/ create result type (range)\n-  fields = TypeTuple::fields(0);\n-  const TypeTuple *range = TypeTuple::make(TypeFunc::Parms+0, fields);\n-\n-  return TypeFunc::make(domain, range);\n+  return OptoRuntime::clone_barrier_Type();\n@@ -547,12 +531,1 @@\n-  const Type **fields = TypeTuple::fields(2);\n-  fields[TypeFunc::Parms+0] = TypeOopPtr::BOTTOM; \/\/ original field value\n-  fields[TypeFunc::Parms+1] = TypeRawPtr::BOTTOM; \/\/ original load address\n-\n-  const TypeTuple *domain = TypeTuple::make(TypeFunc::Parms+2, fields);\n-\n-  \/\/ create result type (range)\n-  fields = TypeTuple::fields(1);\n-  fields[TypeFunc::Parms+0] = TypeOopPtr::BOTTOM;\n-  const TypeTuple *range = TypeTuple::make(TypeFunc::Parms+1, fields);\n-\n-  return TypeFunc::make(domain, range);\n+  return OptoRuntime::load_reference_barrier_Type();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":3,"deletions":30,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -268,0 +268,6 @@\n+const TypeFunc* OptoRuntime::_clone_type_Type                     = nullptr;\n+#if INCLUDE_SHENANDOAHGC\n+const TypeFunc* OptoRuntime::_load_reference_barrier_Type         = nullptr;\n+const TypeFunc* OptoRuntime::_write_barrier_pre_Type              = nullptr;\n+const TypeFunc* OptoRuntime::_clone_barrier_Type                  = nullptr;\n+#endif \/\/ INCLUDE_SHENANDOAHGC\n@@ -2128,0 +2134,60 @@\n+static const TypeFunc* make_clone_type_Type() {\n+  \/\/ Create input type (domain)\n+  int argcnt = NOT_LP64(3) LP64_ONLY(4);\n+  const Type** const domain_fields = TypeTuple::fields(argcnt);\n+  int argp = TypeFunc::Parms;\n+  domain_fields[argp++] = TypeInstPtr::NOTNULL;  \/\/ src\n+  domain_fields[argp++] = TypeInstPtr::NOTNULL;  \/\/ dst\n+  domain_fields[argp++] = TypeX_X;               \/\/ size lower\n+  LP64_ONLY(domain_fields[argp++] = Type::HALF); \/\/ size upper\n+  assert(argp == TypeFunc::Parms+argcnt, \"correct decoding\");\n+  const TypeTuple* const domain = TypeTuple::make(TypeFunc::Parms + argcnt, domain_fields);\n+\n+  \/\/ Create result type (range)\n+  const Type** const range_fields = TypeTuple::fields(0);\n+  const TypeTuple* const range = TypeTuple::make(TypeFunc::Parms + 0, range_fields);\n+\n+  return TypeFunc::make(domain, range);\n+}\n+\n+#if INCLUDE_SHENANDOAHGC\n+static const TypeFunc* make_load_reference_barrier_Type() {\n+  const Type **fields = TypeTuple::fields(2);\n+  fields[TypeFunc::Parms+0] = TypeOopPtr::BOTTOM; \/\/ original field value\n+  fields[TypeFunc::Parms+1] = TypeRawPtr::BOTTOM; \/\/ original load address\n+\n+  const TypeTuple *domain = TypeTuple::make(TypeFunc::Parms+2, fields);\n+\n+  \/\/ create result type (range)\n+  fields = TypeTuple::fields(1);\n+  fields[TypeFunc::Parms+0] = TypeOopPtr::BOTTOM;\n+  const TypeTuple *range = TypeTuple::make(TypeFunc::Parms+1, fields);\n+\n+  return TypeFunc::make(domain, range);\n+}\n+\n+static const TypeFunc* make_write_barrier_pre_Type() {\n+  const Type **fields = TypeTuple::fields(1);\n+  fields[TypeFunc::Parms+0] = TypeInstPtr::NOTNULL; \/\/ original field value\n+  const TypeTuple *domain = TypeTuple::make(TypeFunc::Parms+1, fields);\n+\n+  \/\/ create result type (range)\n+  fields = TypeTuple::fields(0);\n+  const TypeTuple *range = TypeTuple::make(TypeFunc::Parms+0, fields);\n+\n+  return TypeFunc::make(domain, range);\n+}\n+\n+static const TypeFunc* make_clone_barrier_Type() {\n+  const Type **fields = TypeTuple::fields(1);\n+  fields[TypeFunc::Parms+0] = TypeOopPtr::NOTNULL; \/\/ src oop\n+  const TypeTuple *domain = TypeTuple::make(TypeFunc::Parms+1, fields);\n+\n+  \/\/ create result type (range)\n+  fields = TypeTuple::fields(0);\n+  const TypeTuple *range = TypeTuple::make(TypeFunc::Parms+0, fields);\n+\n+  return TypeFunc::make(domain, range);\n+}\n+#endif \/\/INCLUDE_SHENANDOAHGC\n+\n@@ -2293,0 +2359,6 @@\n+  _clone_type_Type                    = make_clone_type_Type();\n+#if INCLUDE_SHENANDOAHGC\n+  _load_reference_barrier_Type        = make_load_reference_barrier_Type();\n+  _write_barrier_pre_Type             = make_write_barrier_pre_Type();\n+  _clone_barrier_Type                 = make_clone_barrier_Type();\n+#endif \/\/ INCLUDE_SHENANDOAHGC\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":72,"deletions":0,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -202,0 +202,6 @@\n+  static const TypeFunc* _clone_type_Type;\n+#if INCLUDE_SHENANDOAHGC\n+  static const TypeFunc* _load_reference_barrier_Type;\n+  static const TypeFunc* _write_barrier_pre_Type;\n+  static const TypeFunc* _clone_barrier_Type;\n+#endif \/\/INCLUDE_SHENANDOAHGC\n@@ -740,0 +746,22 @@\n+  static inline const TypeFunc* clone_type_Type() {\n+    assert(_clone_type_Type != nullptr, \"should be initialized\");\n+    return _clone_type_Type;\n+  }\n+\n+#if INCLUDE_SHENANDOAHGC\n+  static inline const TypeFunc *clone_barrier_Type() {\n+    assert(_clone_barrier_Type != nullptr, \"should be initialized\");\n+    return _clone_barrier_Type;\n+  }\n+\n+  static inline const TypeFunc *write_barrier_pre_Type() {\n+    assert(_write_barrier_pre_Type != nullptr, \"should be initialized\");\n+    return _write_barrier_pre_Type;\n+  }\n+\n+  static inline const TypeFunc* load_reference_barrier_Type() {\n+    assert(_load_reference_barrier_Type != nullptr, \"should be initialized\");\n+    return _load_reference_barrier_Type;\n+  }\n+#endif \/\/INCLUDE_SHENANDOAHGC\n+\n","filename":"src\/hotspot\/share\/opto\/runtime.hpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"}]}