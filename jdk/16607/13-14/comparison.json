{"files":[{"patch":"@@ -141,2 +141,2 @@\n-    \/\/ This relies on the implementation of lightweight_unlock knowing that it\n-    \/\/ will clobber its thread when using EAX.\n+    \/\/ This relies on the implementation of lightweight_unlock being able to handle\n+    \/\/ that the reg_rax and thread Register parameters may alias each other.\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-  { \/\/ Restore held monitor and slow path.\n+  { \/\/ Restore held monitor count and slow path.\n@@ -128,1 +128,1 @@\n-    \/\/ Seen a successor after the release -> fence we have handed of the monitor\n+    \/\/ Observed a successor after the release -> fence we have handed off the monitor\n@@ -131,1 +131,1 @@\n-    \/\/ Try to relock, if it fail the monitor has been handed over\n+    \/\/ Try to relock, if it fails the monitor has been handed over\n","filename":"src\/hotspot\/cpu\/x86\/c2_CodeStubs_x86.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -561,1 +561,1 @@\n-  assert(LockingMode != LM_LIGHTWEIGHT, \"uses fast_lock_lightweight\");\n+  assert(LockingMode != LM_LIGHTWEIGHT, \"lightweight locking should use fast_lock_lightweight\");\n@@ -614,1 +614,1 @@\n-    assert(LockingMode == LM_LEGACY, \"\");\n+    assert(LockingMode == LM_LEGACY, \"must be\");\n@@ -759,1 +759,1 @@\n-  assert(LockingMode != LM_LIGHTWEIGHT, \"uses fast_unlock_lightweight\");\n+  assert(LockingMode != LM_LIGHTWEIGHT, \"lightweight locking should use fast_unlock_lightweight\");\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1314,2 +1314,2 @@\n-      \/\/ This relies on the implementation of lightweight_unlock knowing that it\n-      \/\/ will clobber its thread when using EAX.\n+    \/\/ This relies on the implementation of lightweight_unlock being able to handle\n+    \/\/ that the reg_rax and thread Register parameters may alias each other.\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -9930,1 +9930,1 @@\n-\/\/ thread: the thread, may be EAX on x86_32\n+\/\/ thread: the thread\n@@ -9932,0 +9932,3 @@\n+\/\/\n+\/\/ x86_32 Note: reg_rax and thread may alias each other due to limited register\n+\/\/              availiability.\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}