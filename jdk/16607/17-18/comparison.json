{"files":[{"patch":"@@ -1,109 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test TestLockStackCapacity\n- * @summary Tests the interaction between recursive lightweight locking and\n- *          when the lock stack capacity is exceeded.\n- * @requires vm.flagless\n- * @library \/testlibrary \/test\/lib\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xint -XX:LockingMode=2 TestLockStackCapacity\n- *\/\n-\n-import jdk.test.lib.Asserts;\n-import jdk.test.whitebox.WhiteBox;\n-import jtreg.SkippedException;\n-\n-public class TestLockStackCapacity {\n-    static final WhiteBox WB = WhiteBox.getWhiteBox();\n-    static final int LockingMode = WB.getIntVMFlag(\"LockingMode\").intValue();\n-    static final int LM_LIGHTWEIGHT = 2;\n-\n-    static class SynchronizedObject {\n-        static final SynchronizedObject OUTER = new SynchronizedObject();\n-        static final SynchronizedObject INNER = new SynchronizedObject();\n-        static final int LockStackCapacity = WB.getLockStackCapacity();\n-\n-        synchronized void runInner(int depth) {\n-            assertNotInflated();\n-            if (depth == 1) {\n-                return;\n-            } else {\n-                runInner(depth - 1);\n-            }\n-            assertNotInflated();\n-        }\n-\n-        synchronized void runOuter(int depth, SynchronizedObject inner) {\n-            assertNotInflated();\n-            if (depth == 1) {\n-                inner.runInner(LockStackCapacity);\n-            } else {\n-                runOuter(depth - 1, inner);\n-            }\n-            assertInflated();\n-        }\n-\n-        public static void runTest() {\n-            \/\/ Test Requires a capacity of at least 2.\n-            Asserts.assertGTE(LockStackCapacity, 2);\n-\n-            \/\/ Just checking\n-            OUTER.assertNotInflated();\n-            INNER.assertNotInflated();\n-\n-            synchronized(OUTER) {\n-                OUTER.assertNotInflated();\n-                INNER.assertNotInflated();\n-                OUTER.runOuter(LockStackCapacity - 1, INNER);\n-\n-                OUTER.assertInflated();\n-                INNER.assertNotInflated();\n-            }\n-        }\n-\n-        void assertNotInflated() {\n-            Asserts.assertFalse(WB.isMonitorInflated(this));\n-        }\n-\n-        void assertInflated() {\n-            Asserts.assertTrue(WB.isMonitorInflated(this));\n-        }\n-    }\n-\n-    public static void main(String... args) throws Exception {\n-        if (LockingMode != LM_LIGHTWEIGHT) {\n-            throw new SkippedException(\"Test only valid for LM_LIGHTWEIGHT\");\n-        }\n-\n-        if (!WB.supportsRecursiveLightweightLocking()) {\n-            throw new SkippedException(\"Test only valid is LM_LIGHTWEIGHT supports recursion\");\n-        }\n-\n-        SynchronizedObject.runTest();\n-    }\n-}\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/lockStack\/TestLockStackCapacity.java","additions":0,"deletions":109,"binary":false,"changes":109,"status":"modified"}]}