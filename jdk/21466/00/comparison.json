{"files":[{"patch":"@@ -463,0 +463,2 @@\n+java\/awt\/Dialog\/PrintToFileTest\/PrintToFileRevoked.java 8029249 macosx-all\n+java\/awt\/Dialog\/PrintToFileTest\/PrintToFileGranted.java 8029249 macosx-all\n","filename":"test\/jdk\/ProblemList.txt","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dialog;\n+import java.awt.Frame;\n+import java.awt.event.WindowListener;\n+import java.util.List;\n+\n+\/*\n+ * @test\n+ * @bug 4058953 4094035\n+ * @summary Test to verify system menu of a dialog on win32\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DialogSystemMenu\n+ *\/\n+\n+public class DialogSystemMenu {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Check the following on the first dialog window:\n+                    Right-clicking on the title bar\n+                    should bring up a system menu.\n+                    The system menu should not allow any\n+                    of the Maximize, Minimize and\n+                    Restore actions\n+\n+                2. The second dialog should be non-resizable\n+                    and have no application icon.\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(initialize())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static List<Dialog> initialize() {\n+        Frame frame = new java.awt.Frame(\"Parent Frame\");\n+        String txt = \"\"\"\n+                This is a resizable dialog\n+                Right-clicking on the title bar\n+                should bring up a system menu\n+                The system menu should not\n+                allow any\n+                of the Maximize, Minimize and\n+                Restore actions\n+                \"\"\";\n+        String txt_non = \"\"\"\n+                This is a non-resizable dialog\n+                It should be really non-resizable\n+                and have no application icon\n+                \"\"\";\n+        TestApp resizable = new TestApp(frame, \"Test for 4058953\", txt, true);\n+        resizable.setLocation(0, 0);\n+\n+        TestApp non_resizable = new TestApp(frame, \"Test for 4094035\", txt_non, false);\n+        non_resizable.setLocation(320, 0);\n+        return List.of(resizable, non_resizable);\n+    }\n+}\n+\n+\n+class TestApp extends Dialog implements WindowListener {\n+    public TestApp(java.awt.Frame parent, String title, String txt, boolean resize) {\n+        super(parent, title, false);\n+\n+        java.awt.TextArea ta = new java.awt.TextArea(txt);\n+        ta.setEditable(false);\n+        this.add(ta, \"Center\");\n+        this.addWindowListener(this);\n+        this.setSize(300, 200);\n+        this.setResizable(resize);\n+    }\n+\n+\n+    public void windowOpened(java.awt.event.WindowEvent myEvent) {\n+    }\n+\n+    public void windowClosed(java.awt.event.WindowEvent myEvent) {\n+    }\n+\n+    public void windowIconified(java.awt.event.WindowEvent myEvent) {\n+    }\n+\n+    public void windowDeiconified(java.awt.event.WindowEvent myEvent) {\n+    }\n+\n+    public void windowActivated(java.awt.event.WindowEvent myEvent) {\n+    }\n+\n+    public void windowDeactivated(java.awt.event.WindowEvent myEvent) {\n+    }\n+\n+    public void windowClosing(java.awt.event.WindowEvent myEvent) {\n+        this.dispose();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/DialogSystemMenu\/DialogSystemMenu.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"filename":"test\/jdk\/java\/awt\/Dialog\/DialogSystemMenu\/icon24x24.gif","binary":true,"status":"added"},{"filename":"test\/jdk\/java\/awt\/Dialog\/DialogSystemMenu\/iconone.gif","binary":true,"status":"added"},{"filename":"test\/jdk\/java\/awt\/Dialog\/DialogSystemMenu\/icontwo.gif","binary":true,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.FileDialog;\n+import java.awt.Frame;\n+import java.io.File;\n+import java.io.FilenameFilter;\n+\n+\/*\n+ * @test\n+ * @bug 4364256\n+ * @summary Test to File Dialog filter\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual FileDialogFilterTest\n+ *\/\n+\n+public class FileDialogFilterTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                   Run the test, make sure a file dialog\n+                   comes up with no crash. If the file dialog\n+                   comes up successfully then press PASS, else FAIL.\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(initialize())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static FileDialog initialize() {\n+        FileDialog fDlg = new FileDialog(new Frame());\n+        fDlg.addNotify();\n+        fDlg.setFilenameFilter(new MyFilter());\n+        return fDlg;\n+    }\n+}\n+\n+class MyFilter implements FilenameFilter {\n+    public boolean accept(File dir, String name) {\n+        return true;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/FileDialogFilterTest.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,40 @@\n+import java.awt.Button;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.PrintJob;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+class PrintToFileFrame extends Frame implements ActionListener {\n+    Button nativeDlg = new Button(\"Show print dialog\");\n+\n+    public PrintToFileFrame() {\n+        this.setLayout(new FlowLayout());\n+        add(nativeDlg);\n+        nativeDlg.addActionListener(this);\n+\n+        setSize(300, 300);\n+    }\n+\n+    @SuppressWarnings(\"removal\")\n+    public void actionPerformed(ActionEvent ae) {\n+        if (System.getSecurityManager() == null) {\n+            throw new RuntimeException(\"Security manager isn't installed.\");\n+        }\n+\n+        try {\n+            System.getSecurityManager().checkPrintJobAccess();\n+            System.out.println(\"checkPrintJobAccess - OK\");\n+        } catch (SecurityException e) {\n+            System.out.println(\"checkPrintJobAccess - ERROR \" + e);\n+        }\n+\n+        PrintJob printJob = getToolkit().getPrintJob(this, null, null);\n+\n+        if (printJob != null) {\n+            System.out.println(\"Print Job: \" + printJob);\n+        } else {\n+            System.out.println(\"Print Job is null.\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/PrintToFileTest\/PrintToFileFrame.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.print.PrinterJob;\n+\n+\/*\n+ * @test\n+ * @bug 6275359\n+ * @summary Test to verify system menu of a dialog on win32\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @compile PrintToFileFrame.java\n+ * @compile PrintToFileGranted.java\n+ * @run main\/manual\/policy=granted\/othervm PrintToFileGranted\n+ *\/\n+\n+public class PrintToFileGranted {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS;\n+        if (isPrintSupport()) {\n+            INSTRUCTIONS = \"\"\"\n+                    1. Click on 'Show file dialog' button A print dialog will come up\n+                    2. If checkbox 'Print to file' is enabled then the test passed\n+                       else the test failed\n+                    3. Close the print dialog before pressing PASS or FAIL buttons\n+                    \"\"\";\n+        } else {\n+            INSTRUCTIONS = \"\"\"\n+                    1. The test requires printer installed in your system,\n+                       but there is no printers found\n+                       Please install one and re-run the test\n+                    \"\"\";\n+        }\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(new PrintToFileFrame())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static boolean isPrintSupport() {\n+        PrinterJob pj = PrinterJob.getPrinterJob();\n+        return pj.getPrintService() != null;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/PrintToFileTest\/PrintToFileGranted.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.print.PrinterJob;\n+\n+\/*\n+ * @test\n+ * @bug 6275359\n+ * @summary Test to verify Printing ignores Security permissions\n+ *          using native dialog\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @compile PrintToFileRevoked.java\n+ * @run main\/manual\/policy=revoked\/othervm PrintToFileRevoked\n+ *\/\n+\n+public class PrintToFileRevoked {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS;\n+        if (isPrintSupport()) {\n+            INSTRUCTIONS = \"\"\"\n+                    1. Click on 'Show file dialog' button A print dialog will come up\n+                    2. If checkbox 'Print to file' is disabled then the test passed\n+                       else the test failed\n+                    3. Close the print dialog before pressing PASS or FAIL buttons\n+                    \"\"\";\n+        } else {\n+            INSTRUCTIONS = \"\"\"\n+                    1. The test requires printer installed in your system,\n+                       but there is no printers found\n+                       Please install one and re-run the test\n+                    \"\"\";\n+        }\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(new PrintToFileFrame())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static boolean isPrintSupport() {\n+        PrinterJob pj = PrinterJob.getPrinterJob();\n+        return pj.getPrintService() != null;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/PrintToFileTest\/PrintToFileRevoked.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,10 @@\n+\/* AUTOMATICALLY GENERATED ON Thu Jan 03 15:48:39 PST 2002*\/\n+\/* DO NOT EDIT *\/\n+\n+grant {\n+ permission java.lang.RuntimePermission \"queuePrintJob\";\n+ permission java.util.PropertyPermission \"*\", \"read\";\n+ permission java.io.FilePermission \"<<ALL FILES>>\", \"read\";\n+ permission java.io.FilePermission \"<<ALL FILES>>\", \"write\";\n+ permission java.lang.RuntimePermission \"accessClassInPackage.sun.util.locale.provider\";\n+};\n","filename":"test\/jdk\/java\/awt\/Dialog\/PrintToFileTest\/granted","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"},{"patch":"@@ -0,0 +1,9 @@\n+\/* AUTOMATICALLY GENERATED ON Thu Jan 03 15:48:39 PST 2002*\/\n+\/* DO NOT EDIT *\/\n+\n+grant {\n+ permission java.lang.RuntimePermission \"queuePrintJob\";\n+ permission java.util.PropertyPermission \"*\", \"read\";\n+ permission java.lang.RuntimePermission \"accessClassInPackage.sun.util.locale.provider\";\n+};\n+\n","filename":"test\/jdk\/java\/awt\/Dialog\/PrintToFileTest\/revoked","additions":9,"deletions":0,"binary":false,"changes":9,"status":"added"},{"patch":"@@ -0,0 +1,152 @@\n+\/*\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Dialog;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Window;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+\n+\/*\n+ * @test\n+ * @bug 4940645\n+ * @summary Test to verify setAlwaysOnTop(true) does\n+ *          work in modal dialog in Windows\n+ * @requires (os.family == \"windows\" | os.family == \"linux\" )\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual TopmostModalDialogTest\n+ *\/\n+\n+public class TopmostModalDialogTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                (This test verifies that modal dialog can be made always on top\n+                This test should only be run on the platforms which support always-on-top windows\n+                Such platforms are: Windows, Linux with GNOME2\/Metacity window manager,\n+                Solaris with GNOME2\/Metacity window manager\n+                If you are not running on any of these platforms, please select 'Pass' to skip testing\n+                If you are unsure on which platform you are running please select 'Pass')\n+\n+                1. After test started you see a frame with \\\\\"Main Frame\\\\\" title\n+                   It contains three buttons. Every button starts one of test stage\n+                   You should test all three stages\n+                2. After you press button to start the stage. It shows modal dialog\n+                   This modal dialog should be always-on-top window\n+                3. Since it's a modal the only way to test this is try to cover it\n+                   using some native window\n+                4. If you will able to cover it be native window - test FAILS, otherwise - PASS\n+\n+                Note: in stages #2 and #3 dialog is initially shown as regular modal dialogs\n+                You will see \\\\\"Let's wait\\\\\" message in the message area below\n+                Please wait until message \\\\\"Let's make it topmost\\\\\" will be printed in the area\n+                After that you can continue testing.\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(initialize())\n+                .logArea(8)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame initialize() {\n+        final Tester tester = new Tester();\n+        Frame frame = new Frame(\"Main Frame\");\n+        frame.setLayout(new GridLayout(3, 1));\n+        for (int i = 0; i < 3; i++) {\n+            Button btn = new Button(\"Stage #\" + i);\n+            frame.add(btn);\n+            btn.addActionListener(tester);\n+        }\n+        frame.pack();\n+        return frame;\n+    }\n+}\n+\n+class Tester implements ActionListener {\n+    public void actionPerformed(ActionEvent e) {\n+        String command = e.getActionCommand();\n+        PassFailJFrame.log(command);\n+        int cmd = Integer.parseInt(command.substring(command.length() - 1));\n+        PassFailJFrame.log(\"\" + cmd);\n+        Dialog dlg = new Dialog(new Frame(\"\"), \"Modal Dialog\", true);\n+        dlg.setBounds(100, 100, 100, 100);\n+        dlg.addWindowListener(new WindowAdapter() {\n+            public void windowClosing(WindowEvent we) {\n+                Window self = we.getWindow();\n+                Window owner = self.getOwner();\n+                if (owner != null) {\n+                    owner.dispose();\n+                } else {\n+                    self.dispose();\n+                }\n+            }\n+        });\n+\n+        switch (cmd) {\n+            case 0:\n+                dlg.setAlwaysOnTop(true);\n+                dlg.setVisible(true);\n+                break;\n+            case 1:\n+                (new Thread(new TopmostMaker(dlg))).start();\n+                dlg.setVisible(true);\n+                break;\n+            case 2:\n+                dlg.setFocusableWindowState(false);\n+                (new Thread(new TopmostMaker(dlg))).start();\n+                dlg.setVisible(true);\n+                break;\n+            default:\n+                PassFailJFrame.log(\"Unsupported operation :(\");\n+        }\n+    }\n+}\n+\n+class TopmostMaker implements Runnable {\n+    final Window wnd;\n+\n+    public TopmostMaker(Window wnd) {\n+        this.wnd = wnd;\n+    }\n+\n+    public void run() {\n+        PassFailJFrame.log(\"Let's wait\");\n+        try {\n+            Thread.sleep(1000);\n+        } catch (InterruptedException ie) {\n+            PassFailJFrame.log(\"Test was interrupted. \" + ie);\n+            ie.printStackTrace();\n+        }\n+        PassFailJFrame.log(\"Let's make it topmost\");\n+        wnd.setAlwaysOnTop(true);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/TopmostModalDialogTest.java","additions":152,"deletions":0,"binary":false,"changes":152,"status":"added"}]}