{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,7 @@\n+\/*\n+ * @test\n+ * @bug 6813340\n+ * @summary X509Factory should not depend on is.available()==0\n+ * @run main\/othervm SlowStream\n+ *\/\n+\n@@ -26,0 +33,1 @@\n+import java.util.concurrent.atomic.AtomicBoolean;\n@@ -27,2 +35,1 @@\n-class SlowStreamReader {\n-\n+public class SlowStream {\n@@ -30,6 +37,2 @@\n-        CertificateFactory factory = CertificateFactory.getInstance(\"X.509\");\n-        if (factory.generateCertificates(System.in).size() != 5) {\n-            throw new Exception(\"Not all certs read\");\n-        }\n-    }\n-}\n+        final var outputStream = new PipedOutputStream();\n+        final var inputStream = new PipedInputStream(outputStream);\n@@ -37,10 +40,39 @@\n-class SlowStreamWriter {\n-    public static void main(String[] args) throws Exception {\n-        for (int i=0; i<5; i++) {\n-            FileInputStream fin = new FileInputStream(new File(new File(\n-                    System.getProperty(\"test.src\", \".\"), \"openssl\"), \"pem\"));\n-            byte[] buffer = new byte[4096];\n-            while (true) {\n-                int len = fin.read(buffer);\n-                if (len < 0) break;\n-                System.out.write(buffer, 0, len);\n+        final var failed = new AtomicBoolean(false);\n+\n+        final var writer = new Thread(() -> {\n+            try {\n+                for (int i = 0; i < 5; i++) {\n+                    final var fin = new FileInputStream(new File(new File(\n+                            System.getProperty(\"test.src\", \".\"), \"openssl\"), \"pem\"));\n+                    final byte[] buffer = new byte[4096];\n+                    while (true) {\n+                        int len = fin.read(buffer);\n+                        if (len < 0) {\n+                            break;\n+                        }\n+                        outputStream.write(buffer, 0, len);\n+                    }\n+                    Thread.sleep(2000);\n+                }\n+                outputStream.close();\n+            } catch (final Exception e) {\n+                System.out.println(\"Writer Thread Error: \");\n+                e.printStackTrace(System.out);\n+                failed.set(true);\n+            }\n+        });\n+\n+        final var reader = new Thread(() -> {\n+            try {\n+                final var factory = CertificateFactory.getInstance(\"X.509\");\n+                final var factorySize = factory.generateCertificates(inputStream).size();\n+                if (factorySize != 5) {\n+                    throw new Exception(\n+                            String.format(\"Not all certs read. %d found 5 expected\", factorySize)\n+                    );\n+                }\n+                inputStream.close();\n+            } catch (final Exception e) {\n+                System.out.println(\"Reader Thread Error: \");\n+                e.printStackTrace(System.out);\n+                failed.set(true);\n@@ -48,1 +80,12 @@\n-            Thread.sleep(2000);\n+        });\n+\n+        writer.start();\n+        reader.start();\n+\n+        writer.join();\n+        reader.join();\n+\n+        if (failed.get()) {\n+            throw new RuntimeException(\n+                    \"The test failed, please check the reader and writer threads output\"\n+            );\n@@ -51,1 +94,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/security\/cert\/CertificateFactory\/SlowStream.java","additions":64,"deletions":21,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -1,54 +0,0 @@\n-#\n-# Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 6813340\n-# @summary X509Factory should not depend on is.available()==0\n-\n-if [ \"${TESTSRC}\" = \"\" ] ; then\n-  TESTSRC=\".\"\n-fi\n-if [ \"${TESTJAVA}\" = \"\" ] ; then\n-  echo \"TESTJAVA not set.  Test cannot execute.\"\n-  echo \"FAILED!!!\"\n-  exit 1\n-fi\n-if [ \"${COMPILEJAVA}\" = \"\" ]; then\n-  COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-\n-# set platform-dependent variables\n-OS=`uname -s`\n-case \"$OS\" in\n-  Windows_* )\n-    FS=\"\\\\\"\n-    ;;\n-  * )\n-    FS=\"\/\"\n-    ;;\n-esac\n-\n-${COMPILEJAVA}${FS}bin${FS}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} -d . \\\n-        ${TESTSRC}${FS}SlowStream.java\n-${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} ${TESTJAVAOPTS} -Dtest.src=${TESTSRC} SlowStreamWriter | \\\n-        ${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} ${TESTJAVAOPTS} SlowStreamReader\n","filename":"test\/jdk\/java\/security\/cert\/CertificateFactory\/slowstream.sh","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"}]}