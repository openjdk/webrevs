{"files":[{"patch":"@@ -102,7 +102,1 @@\n-            if (chc.localSupportedCertSignAlgs == null) {\n-                chc.localSupportedCertSignAlgs =\n-                        SignatureScheme.getSupportedAlgorithms(\n-                                chc.sslConfig,\n-                                chc.algorithmConstraints, chc.activeProtocols,\n-                                CERTIFICATE_SCOPE);\n-            }\n+            SignatureScheme.updateHandshakeLocalSupportedAlgs(chc);\n@@ -248,8 +242,1 @@\n-            if (shc.localSupportedCertSignAlgs == null) {\n-                shc.localSupportedCertSignAlgs =\n-                        SignatureScheme.getSupportedAlgorithms(\n-                                shc.sslConfig,\n-                                shc.algorithmConstraints,\n-                                List.of(shc.negotiatedProtocol),\n-                                CERTIFICATE_SCOPE);\n-            }\n+            SignatureScheme.updateHandshakeLocalSupportedAlgs(shc);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertSignAlgsExtension.java","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -639,15 +639,1 @@\n-            if (shc.localSupportedSignAlgs == null) {\n-                shc.localSupportedSignAlgs =\n-                        SignatureScheme.getSupportedAlgorithms(\n-                                shc.sslConfig,\n-                                shc.algorithmConstraints, shc.activeProtocols,\n-                                HANDSHAKE_SCOPE);\n-            }\n-\n-            if (shc.localSupportedCertSignAlgs == null) {\n-                shc.localSupportedCertSignAlgs =\n-                        SignatureScheme.getSupportedAlgorithms(\n-                                shc.sslConfig,\n-                                shc.algorithmConstraints, shc.activeProtocols,\n-                                CERTIFICATE_SCOPE);\n-            }\n+            SignatureScheme.updateHandshakeLocalSupportedAlgs(shc);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateRequest.java","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-import static sun.security.ssl.SignatureScheme.CERTIFICATE_SCOPE;\n@@ -448,7 +447,1 @@\n-        if (shc.localSupportedCertSignAlgs == null) {\n-            shc.localSupportedCertSignAlgs =\n-                    SignatureScheme.getSupportedAlgorithms(\n-                            shc.sslConfig,\n-                            shc.algorithmConstraints, shc.activeProtocols,\n-                            CERTIFICATE_SCOPE);\n-        }\n+        SignatureScheme.updateHandshakeLocalSupportedAlgs(shc);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/PreSharedKeyExtension.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,3 +28,0 @@\n-import static sun.security.ssl.SignatureScheme.CERTIFICATE_SCOPE;\n-import static sun.security.ssl.SignatureScheme.HANDSHAKE_SCOPE;\n-\n@@ -275,15 +272,1 @@\n-                if (shc.localSupportedSignAlgs == null) {\n-                    shc.localSupportedSignAlgs =\n-                        SignatureScheme.getSupportedAlgorithms(\n-                                shc.sslConfig,\n-                                shc.algorithmConstraints, shc.activeProtocols,\n-                                HANDSHAKE_SCOPE);\n-                }\n-\n-                if (shc.localSupportedCertSignAlgs == null) {\n-                    shc.localSupportedCertSignAlgs =\n-                            SignatureScheme.getSupportedAlgorithms(\n-                                    shc.sslConfig,\n-                                    shc.algorithmConstraints, shc.activeProtocols,\n-                                    CERTIFICATE_SCOPE);\n-                }\n+                SignatureScheme.updateHandshakeLocalSupportedAlgs(shc);\n@@ -530,15 +513,1 @@\n-                if (shc.localSupportedSignAlgs == null) {\n-                    shc.localSupportedSignAlgs =\n-                        SignatureScheme.getSupportedAlgorithms(\n-                                shc.sslConfig,\n-                                shc.algorithmConstraints, shc.activeProtocols,\n-                                HANDSHAKE_SCOPE);\n-                }\n-\n-                if (shc.localSupportedCertSignAlgs == null) {\n-                    shc.localSupportedCertSignAlgs =\n-                            SignatureScheme.getSupportedAlgorithms(\n-                                    shc.sslConfig,\n-                                    shc.algorithmConstraints, shc.activeProtocols,\n-                                    CERTIFICATE_SCOPE);\n-                }\n+                SignatureScheme.updateHandshakeLocalSupportedAlgs(shc);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ServerHello.java","additions":2,"deletions":33,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import static sun.security.ssl.SignatureScheme.CERTIFICATE_SCOPE;\n@@ -356,7 +355,1 @@\n-            if (chc.localSupportedCertSignAlgs == null) {\n-                chc.localSupportedCertSignAlgs =\n-                        SignatureScheme.getSupportedAlgorithms(\n-                                chc.sslConfig,\n-                                chc.algorithmConstraints, chc.activeProtocols,\n-                                CERTIFICATE_SCOPE);\n-            }\n+            SignatureScheme.updateHandshakeLocalSupportedAlgs(chc);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SessionTicketExtension.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -190,7 +190,1 @@\n-            if (chc.localSupportedSignAlgs == null) {\n-                chc.localSupportedSignAlgs =\n-                    SignatureScheme.getSupportedAlgorithms(\n-                            chc.sslConfig,\n-                            chc.algorithmConstraints, chc.activeProtocols,\n-                            HANDSHAKE_SCOPE);\n-            }\n+            SignatureScheme.updateHandshakeLocalSupportedAlgs(chc);\n@@ -420,6 +414,1 @@\n-            List<SignatureScheme> sigAlgs =\n-                    SignatureScheme.getSupportedAlgorithms(\n-                            shc.sslConfig,\n-                            shc.algorithmConstraints,\n-                            List.of(shc.negotiatedProtocol),\n-                            HANDSHAKE_SCOPE);\n+            SignatureScheme.updateHandshakeLocalSupportedAlgs(shc);\n@@ -427,1 +416,2 @@\n-            int vectorLen = SignatureScheme.sizeInRecord() * sigAlgs.size();\n+            int vectorLen = SignatureScheme.sizeInRecord()\n+                    * shc.localSupportedSignAlgs.size();\n@@ -431,1 +421,1 @@\n-            for (SignatureScheme ss : sigAlgs) {\n+            for (SignatureScheme ss : shc.localSupportedSignAlgs) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SignatureAlgorithmsExtension.java","additions":5,"deletions":15,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -377,0 +377,31 @@\n+    \/\/ Helper method to update all locally supported signature schemes for\n+    \/\/ a given HandshakeContext.\n+    static void updateHandshakeLocalSupportedAlgs(HandshakeContext hc) {\n+        \/\/ To improve performance we only update when necessary.\n+        \/\/ No need to do anything if we already computed the local supported\n+        \/\/ algorithms and either there is no negotiated protocol yet or the\n+        \/\/ only active protocol ends up to be the negotiated protocol.\n+        if (hc.localSupportedSignAlgs != null\n+                && hc.localSupportedCertSignAlgs != null\n+                && (hc.negotiatedProtocol == null\n+                || (hc.activeProtocols.size() == 1))) {\n+            return;\n+        }\n+\n+        List<ProtocolVersion> protocols = hc.negotiatedProtocol != null ?\n+                List.of(hc.negotiatedProtocol) :\n+                hc.activeProtocols;\n+\n+        hc.localSupportedSignAlgs = getSupportedAlgorithms(\n+                hc.sslConfig,\n+                hc.algorithmConstraints,\n+                protocols,\n+                HANDSHAKE_SCOPE);\n+\n+        hc.localSupportedCertSignAlgs = getSupportedAlgorithms(\n+                hc.sslConfig,\n+                hc.algorithmConstraints,\n+                protocols,\n+                CERTIFICATE_SCOPE);\n+    }\n+\n@@ -379,1 +410,1 @@\n-    static List<SignatureScheme> getSupportedAlgorithms(\n+    private static List<SignatureScheme> getSupportedAlgorithms(\n@@ -553,31 +584,0 @@\n-    \/\/ Convenience method to update all locally supported signature schemes for\n-    \/\/ a given HandshakeContext.\n-    static void updateHandshakeLocalSupportedAlgs(HandshakeContext hc) {\n-        \/\/ To improve performance we only update when necessary.\n-        \/\/ No need to do anything if we already computed the local supported\n-        \/\/ algorithms when the only active protocol ends up to be the\n-        \/\/ negotiated protocol.\n-        if (hc.localSupportedSignAlgs != null\n-                && hc.localSupportedCertSignAlgs != null\n-                && hc.activeProtocols.size() == 1\n-                && hc.activeProtocols.get(0).equals(hc.negotiatedProtocol)) {\n-            return;\n-        }\n-\n-        List<ProtocolVersion> protocols = hc.negotiatedProtocol != null ?\n-                List.of(hc.negotiatedProtocol) :\n-                hc.activeProtocols;\n-\n-        hc.localSupportedSignAlgs = getSupportedAlgorithms(\n-                hc.sslConfig,\n-                hc.algorithmConstraints,\n-                protocols,\n-                HANDSHAKE_SCOPE);\n-\n-        hc.localSupportedCertSignAlgs = getSupportedAlgorithms(\n-                hc.sslConfig,\n-                hc.algorithmConstraints,\n-                protocols,\n-                CERTIFICATE_SCOPE);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SignatureScheme.java","additions":32,"deletions":32,"binary":false,"changes":64,"status":"modified"}]}