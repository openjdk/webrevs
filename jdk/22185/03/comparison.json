{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,3 +34,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -43,1 +40,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -360,1 +356,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -370,10 +365,1 @@\n-        try {\n-            provider = AccessController.doPrivileged(new PrivilegedExceptionAction<>() {\n-                @Override\n-                public SyncProvider run() throws SyncFactoryException {\n-                    return SyncFactory.getInstance(DEFAULT_SYNC_PROVIDER);\n-                }\n-            }, null, new RuntimePermission(\"accessClassInPackage.com.sun.rowset.providers\"));\n-        } catch (PrivilegedActionException pae) {\n-            throw (SyncFactoryException) pae.getException();\n-        }\n+        provider = SyncFactory.getInstance(DEFAULT_SYNC_PROVIDER);\n@@ -2979,1 +2965,0 @@\n-                    ReflectUtil.checkPackageAccess(c);\n@@ -5729,1 +5714,0 @@\n-                    ReflectUtil.checkPackageAccess(c);\n","filename":"src\/java.sql.rowset\/share\/classes\/com\/sun\/rowset\/CachedRowSetImpl.java","additions":2,"deletions":18,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -578,1 +577,0 @@\n-                            ReflectUtil.checkPackageAccess(c);\n","filename":"src\/java.sql.rowset\/share\/classes\/com\/sun\/rowset\/internal\/CachedRowSetWriter.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -31,1 +29,0 @@\n-import java.util.PropertyPermission;\n@@ -34,1 +31,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -71,1 +67,1 @@\n-        String val = getSystemProperty(ROWSET_DEBUG_PROPERTY);\n+        String val = System.getProperty(ROWSET_DEBUG_PROPERTY);\n@@ -131,1 +127,2 @@\n-            factoryClassName = getSystemProperty(ROWSET_FACTORY_NAME);\n+\n+            factoryClassName = System.getProperty(ROWSET_FACTORY_NAME);\n@@ -196,5 +193,0 @@\n-        try {\n-            ReflectUtil.checkPackageAccess(factoryClassName);\n-        } catch (@SuppressWarnings(\"removal\") java.security.AccessControlException e) {\n-            throw new SQLException(\"Access Exception\",e);\n-        }\n@@ -228,8 +220,2 @@\n-    @SuppressWarnings(\"removal\")\n-    private static ClassLoader getContextClassLoader() throws SecurityException {\n-        return AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {\n-\n-            public ClassLoader run() {\n-                ClassLoader cl = null;\n-\n-                cl = Thread.currentThread().getContextClassLoader();\n+    private static ClassLoader getContextClassLoader() {\n+        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n@@ -237,3 +223,3 @@\n-                if (cl == null) {\n-                    cl = ClassLoader.getSystemClassLoader();\n-                }\n+        if (cl == null) {\n+            cl = ClassLoader.getSystemClassLoader();\n+        }\n@@ -241,3 +227,1 @@\n-                return cl;\n-            }\n-        });\n+        return cl;\n@@ -279,1 +263,0 @@\n-        ReflectUtil.checkPackageAccess(factoryClass);\n@@ -305,26 +288,0 @@\n-    \/**\n-     * Returns the requested System Property.  If a {@code SecurityException}\n-     * occurs, just return NULL\n-     * @param propName - System property to retrieve\n-     * @return The System property value or NULL if the property does not exist\n-     * or a {@code SecurityException} occurs.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    private static String getSystemProperty(final String propName) {\n-        String property = null;\n-        try {\n-            property = AccessController.doPrivileged(new PrivilegedAction<String>() {\n-\n-                public String run() {\n-                    return System.getProperty(propName);\n-                }\n-            }, null, new PropertyPermission(propName, \"read\"));\n-        } catch (SecurityException se) {\n-            trace(\"error getting \" + propName + \":  \"+ se);\n-            if (debug) {\n-                se.printStackTrace();\n-            }\n-        }\n-        return property;\n-    }\n-\n","filename":"src\/java.sql.rowset\/share\/classes\/javax\/sql\/rowset\/RowSetProvider.java","additions":10,"deletions":53,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -480,1 +479,0 @@\n-                    ReflectUtil.checkPackageAccess(c);\n","filename":"src\/java.sql.rowset\/share\/classes\/javax\/sql\/rowset\/serial\/SQLInputImpl.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,3 +33,0 @@\n-import jdk.internal.reflect.CallerSensitive;\n-import jdk.internal.reflect.Reflection;\n-import sun.reflect.misc.ReflectUtil;\n@@ -128,1 +125,0 @@\n-    @CallerSensitive\n@@ -132,13 +128,0 @@\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                \/*\n-                 * Check if the caller is allowed to access the specified class's package.\n-                 * If access is denied, throw a SecurityException.\n-                 *\/\n-                Class<?> caller = Reflection.getCallerClass();\n-                if (ReflectUtil.needsPackageAccessCheck(caller.getClassLoader(),\n-                                                        c.getClassLoader())) {\n-                    ReflectUtil.checkPackageAccess(c);\n-                }\n-            }\n","filename":"src\/java.sql.rowset\/share\/classes\/javax\/sql\/rowset\/serial\/SerialJavaObject.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -38,4 +38,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -44,1 +40,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -239,5 +234,0 @@\n-    \/**\n-     *  Permission required to invoke setJNDIContext and setLogger\n-     *\/\n-    private static final SQLPermission SET_SYNCFACTORY_PERMISSION =\n-            new SQLPermission(\"setSyncFactory\");\n@@ -358,11 +348,1 @@\n-                String strRowsetProperties;\n-                try {\n-                    strRowsetProperties = AccessController.doPrivileged(new PrivilegedAction<String>() {\n-                        public String run() {\n-                            return System.getProperty(\"rowset.properties\");\n-                        }\n-                    }, null, new PropertyPermission(\"rowset.properties\", \"read\"));\n-                } catch (Exception ex) {\n-                    System.out.println(\"errorget rowset.properties: \" + ex);\n-                    strRowsetProperties = null;\n-                };\n+                String strRowsetProperties = System.getProperty(\"rowset.properties\");\n@@ -388,18 +368,3 @@\n-                    AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n-                        InputStream in = SyncFactory.class.getModule().getResourceAsStream(ROWSET_PROPERTIES);\n-                        if (in == null) {\n-                            throw new SyncFactoryException(\"Resource \" + ROWSET_PROPERTIES + \" not found\");\n-                        }\n-                        try (in) {\n-                            properties.load(in);\n-                        }\n-                        return null;\n-                    });\n-                } catch (PrivilegedActionException ex) {\n-                    Throwable e = ex.getException();\n-                    if (e instanceof SyncFactoryException) {\n-                      throw (SyncFactoryException) e;\n-                    } else {\n-                        SyncFactoryException sfe = new SyncFactoryException();\n-                        sfe.initCause(ex.getException());\n-                        throw sfe;\n+                    InputStream in = SyncFactory.class.getModule().getResourceAsStream(ROWSET_PROPERTIES);\n+                    if (in == null) {\n+                        throw new SyncFactoryException(\"Resource \" + ROWSET_PROPERTIES + \" not found\");\n@@ -407,0 +372,7 @@\n+                    try (in) {\n+                        properties.load(in);\n+                    }\n+                } catch (IOException e) {\n+                    SyncFactoryException sfe = new SyncFactoryException();\n+                    sfe.initCause(e);\n+                    throw sfe;\n@@ -424,11 +396,1 @@\n-            String providerImpls;\n-            try {\n-                providerImpls = AccessController.doPrivileged(new PrivilegedAction<String>() {\n-                    public String run() {\n-                        return System.getProperty(ROWSET_SYNC_PROVIDER);\n-                    }\n-                }, null, new PropertyPermission(ROWSET_SYNC_PROVIDER, \"read\"));\n-            } catch (Exception ex) {\n-                providerImpls = null;\n-            }\n-\n+            String providerImpls = System.getProperty(ROWSET_SYNC_PROVIDER);\n@@ -566,8 +528,0 @@\n-        try {\n-            ReflectUtil.checkPackageAccess(providerID);\n-        } catch (@SuppressWarnings(\"removal\") java.security.AccessControlException e) {\n-            SyncFactoryException sfe = new SyncFactoryException();\n-            sfe.initCause(e);\n-            throw sfe;\n-        }\n-\n@@ -629,6 +583,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sec = System.getSecurityManager();\n-        if (sec != null) {\n-            sec.checkPermission(SET_SYNCFACTORY_PERMISSION);\n-        }\n-\n@@ -655,6 +603,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sec = System.getSecurityManager();\n-        if (sec != null) {\n-            sec.checkPermission(SET_SYNCFACTORY_PERMISSION);\n-        }\n-\n@@ -695,5 +637,1 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sec = System.getSecurityManager();\n-        if (sec != null) {\n-            sec.checkPermission(SET_SYNCFACTORY_PERMISSION);\n-        }\n+\n","filename":"src\/java.sql.rowset\/share\/classes\/javax\/sql\/rowset\/spi\/SyncFactory.java","additions":13,"deletions":75,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -101,16 +99,0 @@\n-    \/**\n-     * The {@code SQLPermission} constant that allows the\n-     * setting of the logging stream.\n-     * @since 1.3\n-     *\/\n-    static final SQLPermission SET_LOG_PERMISSION =\n-        new SQLPermission(\"setLog\");\n-\n-    \/**\n-     * The {@code SQLPermission} constant that allows the\n-     * un-register a registered JDBC driver.\n-     * @since 1.8\n-     *\/\n-    static final SQLPermission DEREGISTER_DRIVER_PERMISSION =\n-        new SQLPermission(\"deregisterDriver\");\n-\n@@ -143,8 +125,2 @@\n-\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sec = System.getSecurityManager();\n-        if (sec != null) {\n-            sec.checkPermission(SET_LOG_PERMISSION);\n-        }\n-            logStream = null;\n-            logWriter = out;\n+        logStream = null;\n+        logWriter = out;\n@@ -370,6 +346,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sec = System.getSecurityManager();\n-        if (sec != null) {\n-            sec.checkPermission(DEREGISTER_DRIVER_PERMISSION);\n-        }\n-\n@@ -480,7 +450,0 @@\n-\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sec = System.getSecurityManager();\n-        if (sec != null) {\n-            sec.checkPermission(SET_LOG_PERMISSION);\n-        }\n-\n@@ -552,1 +515,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -564,5 +526,1 @@\n-                drivers = AccessController.doPrivileged(new PrivilegedAction<String>() {\n-                    public String run() {\n-                        return System.getProperty(JDBC_DRIVERS_PROPERTY);\n-                    }\n-                });\n+                drivers = System.getProperty(JDBC_DRIVERS_PROPERTY);\n@@ -577,26 +535,19 @@\n-            AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                public Void run() {\n-\n-                    ServiceLoader<Driver> loadedDrivers = ServiceLoader.load(Driver.class);\n-                    Iterator<Driver> driversIterator = loadedDrivers.iterator();\n-\n-                    \/* Load these drivers, so that they can be instantiated.\n-                     * It may be the case that the driver class may not be there\n-                     * i.e. there may be a packaged driver with the service class\n-                     * as implementation of java.sql.Driver but the actual class\n-                     * may be missing. In that case a java.util.ServiceConfigurationError\n-                     * will be thrown at runtime by the VM trying to locate\n-                     * and load the service.\n-                     *\n-                     * Adding a try catch block to catch those runtime errors\n-                     * if driver not available in classpath but it's\n-                     * packaged as service and that service is there in classpath.\n-                     *\/\n-                    try {\n-                        while (driversIterator.hasNext()) {\n-                            driversIterator.next();\n-                        }\n-                    } catch (Throwable t) {\n-                        \/\/ Do nothing\n-                    }\n-                    return null;\n+\n+            ServiceLoader<Driver> loadedDrivers = ServiceLoader.load(Driver.class);\n+            Iterator<Driver> driversIterator = loadedDrivers.iterator();\n+\n+            \/* Load these drivers, so that they can be instantiated.\n+             * It may be the case that the driver class may not be there\n+             * i.e. there may be a packaged driver with the service class\n+             * as implementation of java.sql.Driver but the actual class\n+             * may be missing. In that case a java.util.ServiceConfigurationError\n+             * will be thrown at runtime by the VM trying to locate\n+             * and load the service.\n+             *\n+             * Adding a try catch block to catch those runtime errors\n+             * if driver not available in classpath but it's\n+             * packaged as service and that service is there in classpath.\n+             *\/\n+            try {\n+                while (driversIterator.hasNext()) {\n+                    driversIterator.next();\n@@ -604,1 +555,3 @@\n-            });\n+            } catch (Throwable t) {\n+                \/\/ Do nothing\n+            }\n","filename":"src\/java.sql\/share\/classes\/java\/sql\/DriverManager.java","additions":25,"deletions":72,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -1,150 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package util;\n-\n-import java.io.FilePermission;\n-import java.lang.reflect.ReflectPermission;\n-import java.security.AllPermission;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n-import java.security.SecurityPermission;\n-import java.sql.SQLPermission;\n-import java.util.Enumeration;\n-import java.util.PropertyPermission;\n-import java.util.StringJoiner;\n-import java.util.logging.LoggingPermission;\n-\n-\/*\n- * Simple Policy class that supports the required Permissions to validate the\n- * JDBC concrete classes\n- *\/\n-public class TestPolicy extends Policy {\n-    static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-    final PermissionCollection permissions = new Permissions();\n-\n-    \/**\n-     * Constructor which sets the minimum permissions allowing testNG to work\n-     * with a SecurityManager\n-     *\/\n-    public TestPolicy() {\n-        setMinimalPermissions();\n-    }\n-\n-    \/*\n-     * Constructor which determines which permissions are defined for this\n-     * Policy used by the JDBC tests Possible values are: all (ALLPermissions),\n-     * setLog (SQLPemission(\"setLog\"), deregisterDriver\n-     * (SQLPermission(\"deregisterDriver\") (SQLPermission(\"deregisterDriver\"),\n-     * setSyncFactory(SQLPermission(setSyncFactory), and also\n-     * LoggerPermission(\"control\", null) when setting a Level\n-     *\n-     * @param policy Permissions to set\n-     *\/\n-    public TestPolicy(String policy) {\n-\n-        switch (policy) {\n-            case \"all\":\n-                permissions.add(new AllPermission());\n-                break;\n-            case \"setLog\":\n-                setMinimalPermissions();\n-                permissions.add(new SQLPermission(\"setLog\"));\n-                break;\n-            case \"deregisterDriver\":\n-                setMinimalPermissions();\n-                permissions.add(new SQLPermission(\"deregisterDriver\"));\n-                break;\n-            case \"setSyncFactory\":\n-                setMinimalPermissions();\n-                permissions.add(new SQLPermission(\"setSyncFactory\"));\n-                break;\n-            case \"setSyncFactoryLogger\":\n-                setMinimalPermissions();\n-                permissions.add(new SQLPermission(\"setSyncFactory\"));\n-                permissions.add(new LoggingPermission(\"control\", null));\n-                break;\n-            default:\n-                setMinimalPermissions();\n-        }\n-    }\n-\n-    \/*\n-     * Defines the minimal permissions required by testNG when running these\n-     * tests\n-     *\/\n-    private void setMinimalPermissions() {\n-        permissions.add(new SecurityPermission(\"getPolicy\"));\n-        permissions.add(new SecurityPermission(\"setPolicy\"));\n-        permissions.add(new RuntimePermission(\"getClassLoader\"));\n-        permissions.add(new RuntimePermission(\"setSecurityManager\"));\n-        permissions.add(new RuntimePermission(\"createSecurityManager\"));\n-        permissions.add(new PropertyPermission(\"line.separator\", \"read\"));\n-        permissions.add(new PropertyPermission(\"fileStringBuffer\", \"read\"));\n-        permissions.add(new PropertyPermission(\"dataproviderthreadcount\", \"read\"));\n-        permissions.add(new PropertyPermission(\"java.io.tmpdir\", \"read\"));\n-        permissions.add(new PropertyPermission(\"testng.show.stack.frames\",\n-                \"read\"));\n-        permissions.add(new PropertyPermission(\"testng.thread.affinity\", \"read\"));\n-        permissions.add(new PropertyPermission(\"testng.memory.friendly\", \"read\"));\n-        permissions.add(new PropertyPermission(\"testng.mode.dryrun\", \"read\"));\n-        permissions.add(new PropertyPermission(\"testng.report.xml.name\", \"read\"));\n-        permissions.add(new PropertyPermission(\"testng.timezone\", \"read\"));\n-        permissions.add(new ReflectPermission(\"suppressAccessChecks\"));\n-        permissions.add(new FilePermission(\"<<ALL FILES>>\",\n-                \"read, write, delete\"));\n-    }\n-\n-    \/*\n-     * Overloaded methods from the Policy class\n-     *\/\n-    @Override\n-    public String toString() {\n-        StringJoiner sj = new StringJoiner(\"\\n\", \"policy: \", \"\");\n-        Enumeration<Permission> perms = permissions.elements();\n-        while (perms.hasMoreElements()) {\n-            sj.add(perms.nextElement().toString());\n-        }\n-        return sj.toString();\n-\n-    }\n-\n-    @Override\n-    public PermissionCollection getPermissions(ProtectionDomain domain) {\n-        return permissions;\n-    }\n-\n-    @Override\n-    public PermissionCollection getPermissions(CodeSource codesource) {\n-        return permissions;\n-    }\n-\n-    @Override\n-    public boolean implies(ProtectionDomain domain, Permission perm) {\n-        return permissions.implies(perm) || DEFAULT_POLICY.implies(domain, perm);\n-    }\n-}\n","filename":"test\/jdk\/java\/sql\/testng\/util\/TestPolicy.java","additions":0,"deletions":150,"binary":false,"changes":150,"status":"deleted"},{"patch":"@@ -74,2 +74,1 @@\n-               \"java\/lang\/Runtime#loadLibrary (Ljava\/lang\/String;)V\",\n-               \"javax\/sql\/rowset\/serial\/SerialJavaObject#getFields ()[Ljava\/lang\/reflect\/Field;\"\n+               \"java\/lang\/Runtime#loadLibrary (Ljava\/lang\/String;)V\"\n@@ -80,4 +79,1 @@\n-    private static Set<String> UNSUPPORTED_VIRTUAL_METHODS =\n-        Set.of(\"java\/io\/ObjectStreamField#getType (Ljava\/lang\/Class;)Ljava\/lang\/Class;\",\n-               \"javax\/sql\/rowset\/serial\/SerialJavaObject#getFields (Ljava\/lang\/Class;)[Ljava\/lang\/reflect\/Field;\"\n-        );\n+    private static Set<String> UNSUPPORTED_VIRTUAL_METHODS = Set.of();\n","filename":"test\/jdk\/jdk\/internal\/reflect\/CallerSensitive\/CheckCSMs.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"}]}