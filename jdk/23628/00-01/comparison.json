{"files":[{"patch":"@@ -0,0 +1,232 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.lang.foreign;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n+import java.util.concurrent.TimeUnit;\n+\n+import static java.lang.foreign.ValueLayout.JAVA_INT;\n+\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 3, time = 5, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 5, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 2, jvmArgsAppend = {\n+        \"-XX:+UnlockDiagnosticVMOptions\",\n+        \"-Xbatch\",\n+        \"-XX:MaxInlineLevel=15\",\n+        \"-XX:CompileCommand=PrintInlining,org.openjdk.bench.java.lang.foreign.AllocFromInlineTest::alloc15\"})\n+public class AllocFromInlineTest {\n+\n+    record FakeArena(MemorySegment segment) implements Arena {\n+\n+        public FakeArena() {\n+            this(Arena.global().allocate(JAVA_INT));\n+        }\n+\n+        @Override\n+        public MemorySegment allocate(long byteSize, long byteAlignment) {\n+            return segment;\n+        }\n+\n+        @Override\n+        public MemorySegment.Scope scope() {\n+            return Arena.global().scope();\n+        }\n+\n+        @Override\n+        public void close() {}\n+    }\n+\n+    private static final Arena ARENA = new FakeArena();\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    @Benchmark\n+    public MemorySegment alloc00() {\n+        return alloc_0();\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    @Benchmark\n+    public MemorySegment alloc01() {\n+            return alloc_1();\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    @Benchmark\n+    public MemorySegment alloc02() {\n+        return alloc_2();\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    @Benchmark\n+    public MemorySegment alloc03() {\n+        return alloc_3();\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    @Benchmark\n+    public MemorySegment alloc04() {\n+        return alloc_4();\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    @Benchmark\n+    public MemorySegment alloc05() {\n+        return alloc_5();\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    @Benchmark\n+    public MemorySegment alloc06() {\n+        return alloc_6();\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    @Benchmark\n+    public MemorySegment alloc07() {\n+        return alloc_7();\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    @Benchmark\n+    public MemorySegment alloc08() {\n+        return alloc_8();\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    @Benchmark\n+    public MemorySegment alloc09() {\n+        return alloc_9();\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    @Benchmark\n+    public MemorySegment alloc10() {\n+        return alloc_10();\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    @Benchmark\n+    public MemorySegment alloc11() {\n+        return alloc_11();\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    @Benchmark\n+    public MemorySegment alloc12() {\n+        return alloc_12();\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    @Benchmark\n+    public MemorySegment alloc13() {\n+        return alloc_13();\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    @Benchmark\n+    public MemorySegment alloc14() {\n+        return alloc_14();\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    @Benchmark\n+    public MemorySegment alloc15() {\n+        return alloc_15();\n+    }\n+\n+    private MemorySegment alloc_0() {\n+        return ARENA.allocateFrom(JAVA_INT, 42);\n+    }\n+\n+    private MemorySegment alloc_1() {\n+        return alloc_0();\n+    }\n+\n+    private MemorySegment alloc_2() {\n+        return alloc_1();\n+    }\n+\n+    private MemorySegment alloc_3() {\n+        return alloc_2();\n+    }\n+\n+    private MemorySegment alloc_4() {\n+        return alloc_3();\n+    }\n+\n+    private MemorySegment alloc_5() {\n+        return alloc_4();\n+    }\n+\n+    private MemorySegment alloc_6() {\n+        return alloc_5();\n+    }\n+\n+    private MemorySegment alloc_7() {\n+        return alloc_6();\n+    }\n+\n+    private MemorySegment alloc_8() {\n+        return alloc_7();\n+    }\n+\n+    private MemorySegment alloc_9() {\n+        return alloc_8();\n+    }\n+\n+    private MemorySegment alloc_10() {\n+        return alloc_9();\n+    }\n+\n+    private MemorySegment alloc_11() {\n+        return alloc_10();\n+    }\n+\n+    private MemorySegment alloc_12() {\n+        return alloc_11();\n+    }\n+\n+    private MemorySegment alloc_13() {\n+        return alloc_12();\n+    }\n+\n+    private MemorySegment alloc_14() {\n+        return alloc_13();\n+    }\n+\n+    private MemorySegment alloc_15() {\n+        return alloc_14();\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/AllocFromInlineTest.java","additions":232,"deletions":0,"binary":false,"changes":232,"status":"added"}]}