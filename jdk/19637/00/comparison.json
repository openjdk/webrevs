{"files":[{"patch":"@@ -1353,0 +1353,12 @@\n+static void clear_is_not_compilable_by(const methodHandle& method, AbstractCompiler* comp) {\n+  if (comp == nullptr) {\n+    return;\n+  }\n+\n+  if (comp->is_c1()) {\n+    method->clear_is_not_c1_compilable();\n+  } else if (comp->is_c2()) {\n+    method->clear_is_not_c2_compilable();\n+  }\n+}\n+\n@@ -1370,0 +1382,5 @@\n+\n+  \/\/ Compilation of a method not being compilable can be requested.\n+  \/\/ We clear its not compilable status. The status will be updated\n+  \/\/ as a result of the compilation.\n+  clear_is_not_compilable_by(method, comp);\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test ClearDirectivesTest\n+ * @bug 8333891\n+ * @summary Test Java methods with a directive disabling compilation can get\n+ *          compilable if the directive is removed.\n+ * @requires vm.compiler1.enabled & vm.compiler2.enabled\n+ * @library \/test\/lib \/\n+ * @modules java.base\/jdk.internal.misc\n+ *\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   serviceability.dcmd.compiler.ClearDirectivesTest\n+ *\/\n+\n+package serviceability.dcmd.compiler;\n+\n+import jdk.test.lib.dcmd.JMXExecutor;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.whitebox.WhiteBox;\n+\n+import java.lang.reflect.Method;\n+\n+import static jdk.test.lib.Asserts.assertEQ;\n+\n+import static compiler.whitebox.CompilerWhiteBoxTest.COMP_LEVEL_FULL_OPTIMIZATION;\n+import static compiler.whitebox.CompilerWhiteBoxTest.COMP_LEVEL_NONE;\n+import static compiler.whitebox.CompilerWhiteBoxTest.COMP_LEVEL_SIMPLE;\n+\n+public class ClearDirectivesTest {\n+\n+    static int calc(int v) {\n+        int result = 0;\n+        for (int i = 0; i < v; ++i) {\n+          result += result * v + i;\n+        }\n+        return result;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Method method = ClearDirectivesTest.class.getDeclaredMethod(\"calc\", int.class);\n+        String dirs = \"\"\"\n+        [{\n+           match: \"*::calc\",\n+           Exclude: true\n+        }]\"\"\";\n+        WhiteBox wb = WhiteBox.getWhiteBox();\n+        wb.addCompilerDirective(dirs);\n+        new JMXExecutor().execute(\"Compiler.directives_print\");\n+\n+        wb.enqueueMethodForCompilation(method, COMP_LEVEL_FULL_OPTIMIZATION);\n+        while (wb.isMethodQueuedForCompilation(method)) {\n+            Thread.onSpinWait();\n+        }\n+        assertEQ(COMP_LEVEL_NONE, wb.getMethodCompilationLevel(method), \"Compilation level\");\n+\n+        wb.enqueueMethodForCompilation(method, COMP_LEVEL_SIMPLE);\n+        while (wb.isMethodQueuedForCompilation(method)) {\n+            Thread.onSpinWait();\n+        }\n+        assertEQ(COMP_LEVEL_NONE, wb.getMethodCompilationLevel(method), \"Compilation level\");\n+\n+        new JMXExecutor().execute(\"Compiler.directives_clear\");\n+        new JMXExecutor().execute(\"Compiler.directives_print\");\n+\n+        wb.enqueueMethodForCompilation(method, COMP_LEVEL_FULL_OPTIMIZATION);\n+        while (wb.isMethodQueuedForCompilation(method)) {\n+            Thread.onSpinWait();\n+        }\n+        assertEQ(COMP_LEVEL_FULL_OPTIMIZATION, wb.getMethodCompilationLevel(method), \"Compilation level\");\n+\n+        wb.deoptimizeMethod(method);\n+        assertEQ(COMP_LEVEL_NONE, wb.getMethodCompilationLevel(method), \"Compilation level\");\n+\n+        wb.enqueueMethodForCompilation(method, COMP_LEVEL_SIMPLE);\n+        while (wb.isMethodQueuedForCompilation(method)) {\n+            Thread.onSpinWait();\n+        }\n+        assertEQ(COMP_LEVEL_SIMPLE, wb.getMethodCompilationLevel(method), \"Compilation level\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/compiler\/ClearDirectivesTest.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"}]}