{"files":[{"patch":"@@ -414,17 +414,0 @@\n-#ifdef ASSERT\n-PRAGMA_DIAG_PUSH\n-PRAGMA_FORMAT_NONLITERAL_IGNORED\n-void ClassFileParser::report_assert_property_failure(const char* msg, TRAPS) const {\n-  ResourceMark rm(THREAD);\n-  fatal(msg, _class_name->as_C_string());\n-}\n-\n-void ClassFileParser::report_assert_property_failure(const char* msg,\n-                                                     int index,\n-                                                     TRAPS) const {\n-  ResourceMark rm(THREAD);\n-  fatal(msg, index, _class_name->as_C_string());\n-}\n-PRAGMA_DIAG_POP\n-#endif\n-\n@@ -465,1 +448,1 @@\n-        check_property(valid_klass_reference_at(klass_ref_index),\n+        guarantee_property(valid_klass_reference_at(klass_ref_index),\n@@ -468,1 +451,1 @@\n-        check_property(valid_cp_range(name_and_type_ref_index, length) &&\n+        guarantee_property(valid_cp_range(name_and_type_ref_index, length) &&\n@@ -485,1 +468,1 @@\n-        check_property(\n+        guarantee_property(\n@@ -495,1 +478,1 @@\n-        check_property(valid_symbol_at(name_ref_index),\n+        guarantee_property(valid_symbol_at(name_ref_index),\n@@ -498,1 +481,1 @@\n-        check_property(valid_symbol_at(signature_ref_index),\n+        guarantee_property(valid_symbol_at(signature_ref_index),\n@@ -512,1 +495,1 @@\n-        check_property(valid_symbol_at(class_index),\n+        guarantee_property(valid_symbol_at(class_index),\n@@ -520,1 +503,1 @@\n-        check_property(valid_symbol_at(string_index),\n+        guarantee_property(valid_symbol_at(string_index),\n@@ -529,1 +512,1 @@\n-        check_property(valid_cp_range(ref_index, length),\n+        guarantee_property(valid_cp_range(ref_index, length),\n@@ -540,1 +523,1 @@\n-            check_property(\n+            guarantee_property(\n@@ -548,1 +531,1 @@\n-            check_property(\n+            guarantee_property(\n@@ -556,1 +539,1 @@\n-            check_property(\n+            guarantee_property(\n@@ -564,1 +547,1 @@\n-            check_property(\n+            guarantee_property(\n@@ -582,1 +565,1 @@\n-        check_property(valid_symbol_at(ref_index),\n+        guarantee_property(valid_symbol_at(ref_index),\n@@ -591,1 +574,1 @@\n-        check_property(valid_cp_range(name_and_type_ref_index, length) &&\n+        guarantee_property(valid_cp_range(name_and_type_ref_index, length) &&\n@@ -606,1 +589,1 @@\n-        check_property(valid_cp_range(name_and_type_ref_index, length) &&\n+        guarantee_property(valid_cp_range(name_and_type_ref_index, length) &&\n@@ -824,1 +807,1 @@\n-      check_property(\n+      guarantee_property(\n@@ -1258,4 +1241,4 @@\n-    check_property(valid_symbol_at(attribute_name_index),\n-                   \"Invalid field attribute index %u in class file %s\",\n-                   attribute_name_index,\n-                   CHECK);\n+    guarantee_property(valid_symbol_at(attribute_name_index),\n+                       \"Invalid field attribute index %u in class file %s\",\n+                       attribute_name_index,\n+                       CHECK);\n@@ -1270,1 +1253,1 @@\n-      check_property(\n+      guarantee_property(\n@@ -1416,1 +1399,1 @@\n-    check_property(valid_symbol_at(name_index),\n+    guarantee_property(valid_symbol_at(name_index),\n@@ -1423,1 +1406,1 @@\n-    check_property(valid_symbol_at(signature_index),\n+    guarantee_property(valid_symbol_at(signature_index),\n@@ -1601,1 +1584,1 @@\n-  check_property(\n+  guarantee_property(\n@@ -1791,1 +1774,1 @@\n-      check_property(\n+      guarantee_property(\n@@ -2140,1 +2123,1 @@\n-  check_property(\n+  guarantee_property(\n@@ -2238,1 +2221,1 @@\n-    check_property(\n+    guarantee_property(\n@@ -2313,4 +2296,4 @@\n-        check_property(valid_symbol_at(code_attribute_name_index),\n-                       \"Invalid code attribute name index %u in class file %s\",\n-                       code_attribute_name_index,\n-                       CHECK_NULL);\n+        guarantee_property(valid_symbol_at(code_attribute_name_index),\n+                           \"Invalid code attribute name index %u in class file %s\",\n+                           code_attribute_name_index,\n+                           CHECK_NULL);\n@@ -2801,1 +2784,1 @@\n-  check_property(\n+  guarantee_property(\n@@ -2815,1 +2798,1 @@\n-  check_property(\n+  guarantee_property(\n@@ -2962,1 +2945,1 @@\n-    check_property(\n+    guarantee_property(\n@@ -2968,1 +2951,1 @@\n-    check_property(\n+    guarantee_property(\n@@ -2982,1 +2965,1 @@\n-    check_property(\n+    guarantee_property(\n@@ -3058,1 +3041,1 @@\n-    check_property(\n+    guarantee_property(\n@@ -3091,1 +3074,1 @@\n-      check_property(\n+      guarantee_property(\n@@ -3140,1 +3123,1 @@\n-    check_property(valid_symbol_at(name_index),\n+    guarantee_property(valid_symbol_at(name_index),\n@@ -3147,1 +3130,1 @@\n-    check_property(valid_symbol_at(descriptor_index),\n+    guarantee_property(valid_symbol_at(descriptor_index),\n@@ -3170,1 +3153,1 @@\n-      check_property(\n+      guarantee_property(\n@@ -3268,1 +3251,1 @@\n-  check_property(\n+  guarantee_property(\n@@ -3326,1 +3309,1 @@\n-    check_property(\n+    guarantee_property(\n@@ -3343,1 +3326,1 @@\n-      check_property(\n+      guarantee_property(\n@@ -3404,1 +3387,1 @@\n-    check_property(\n+    guarantee_property(\n@@ -3516,1 +3499,1 @@\n-        check_property(valid_klass_reference_at(enclosing_method_class_index),\n+        guarantee_property(valid_klass_reference_at(enclosing_method_class_index),\n@@ -3583,1 +3566,1 @@\n-          check_property(\n+          guarantee_property(\n@@ -3792,4 +3775,4 @@\n-    check_property(_class_name == vmSymbols::java_lang_Object(),\n-                   \"Invalid superclass index %u in class file %s\",\n-                   super_class_index,\n-                   CHECK_NULL);\n+    guarantee_property(_class_name == vmSymbols::java_lang_Object(),\n+                       \"Invalid superclass index %u in class file %s\",\n+                       super_class_index,\n+                       CHECK_NULL);\n@@ -3797,4 +3780,4 @@\n-    check_property(valid_klass_reference_at(super_class_index),\n-                   \"Invalid superclass index %u in class file %s\",\n-                   super_class_index,\n-                   CHECK_NULL);\n+    guarantee_property(valid_klass_reference_at(super_class_index),\n+                       \"Invalid superclass index %u in class file %s\",\n+                       super_class_index,\n+                       CHECK_NULL);\n@@ -5546,1 +5529,1 @@\n-  check_property(\n+  guarantee_property(\n@@ -5727,3 +5710,3 @@\n-    check_property(_local_interfaces == Universe::the_empty_instance_klass_array(),\n-                   \"java.lang.Object cannot implement an interface in class file %s\",\n-                   CHECK);\n+    guarantee_property(_local_interfaces == Universe::the_empty_instance_klass_array(),\n+                       \"java.lang.Object cannot implement an interface in class file %s\",\n+                       CHECK);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":59,"deletions":76,"binary":false,"changes":135,"status":"modified"},{"patch":"@@ -381,38 +381,0 @@\n-  void report_assert_property_failure(const char* msg, TRAPS) const PRODUCT_RETURN;\n-  void report_assert_property_failure(const char* msg, int index, TRAPS) const PRODUCT_RETURN;\n-\n-  inline void assert_property(bool b, const char* msg, TRAPS) const {\n-#ifdef ASSERT\n-    if (!b) {\n-      report_assert_property_failure(msg, THREAD);\n-    }\n-#endif\n-  }\n-\n-  inline void assert_property(bool b, const char* msg, int index, TRAPS) const {\n-#ifdef ASSERT\n-    if (!b) {\n-      report_assert_property_failure(msg, index, THREAD);\n-    }\n-#endif\n-  }\n-\n-  inline void check_property(bool property,\n-                             const char* msg,\n-                             int index,\n-                             TRAPS) const {\n-    if (_need_verify) {\n-      guarantee_property(property, msg, index, CHECK);\n-    } else {\n-      assert_property(property, msg, index, CHECK);\n-    }\n-  }\n-\n-  inline void check_property(bool property, const char* msg, TRAPS) const {\n-    if (_need_verify) {\n-      guarantee_property(property, msg, CHECK);\n-    } else {\n-      assert_property(property, msg, CHECK);\n-    }\n-  }\n-\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":0,"deletions":38,"binary":false,"changes":38,"status":"modified"}]}