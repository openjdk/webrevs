{"files":[{"patch":"@@ -849,11 +849,0 @@\n-  static uint32_t encode_csrrw(Register Rd, const uint32_t csr, Register Rs1) {\n-    guarantee(is_uimm12(csr), \"csr is invalid\");\n-    uint32_t insn = 0;\n-    patch((address)&insn, 6, 0, 0b1110011);\n-    patch((address)&insn, 14, 12, 0b001);\n-    patch_reg((address)&insn, 7, Rd);\n-    patch_reg((address)&insn, 15, Rs1);\n-    patch((address)&insn, 31, 20, csr);\n-    return insn;\n-  }\n-\n@@ -928,0 +917,11 @@\n+  static uint32_t encode_csrrw(Register Rd, const uint32_t csr, Register Rs1) {\n+    guarantee(is_uimm12(csr), \"csr is invalid\");\n+    uint32_t insn = 0;\n+    patch((address)&insn, 6, 0, 0b1110011);\n+    patch((address)&insn, 14, 12, 0b001);\n+    patch_reg((address)&insn, 7, Rd);\n+    patch_reg((address)&insn, 15, Rs1);\n+    patch((address)&insn, 31, 20, csr);\n+    return insn;\n+  }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1005,1 +1005,1 @@\n-    address tr_call;\n+    address call_pc;\n@@ -1011,2 +1011,2 @@\n-      tr_call = __ reloc_call(resolve);\n-      if (tr_call == nullptr) {\n+      call_pc = __ reloc_call(resolve);\n+      if (call_pc == nullptr) {\n@@ -1021,1 +1021,1 @@\n-    address stub = CompiledDirectCall::emit_to_interp_stub(masm, tr_call);\n+    address stub = CompiledDirectCall::emit_to_interp_stub(masm, call_pc);\n@@ -1040,1 +1040,1 @@\n-  address tr_call;\n+  address call_pc;\n@@ -1046,2 +1046,2 @@\n-    tr_call = __ reloc_call(resolve);\n-    if (tr_call == nullptr) {\n+    call_pc = __ reloc_call(resolve);\n+    if (call_pc == nullptr) {\n@@ -1098,1 +1098,1 @@\n-  address stub = CompiledDirectCall::emit_to_interp_stub(masm, tr_call);\n+  address stub = CompiledDirectCall::emit_to_interp_stub(masm, call_pc);\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}