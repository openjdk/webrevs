{"files":[{"patch":"@@ -105,1 +105,0 @@\n-    private final DeferredAttr deferredAttr;\n@@ -133,1 +132,0 @@\n-        deferredAttr = DeferredAttr.instance(context);\n@@ -338,1 +336,1 @@\n-            List<JCTree> defs = tree.defs;\n+            List<JCTree> defs = tree.getTypeDecls();\n@@ -344,1 +342,1 @@\n-                if (peekTypeExists(env, syms.ioType.tsym)) {\n+                if (peekTypeExists(syms.ioType.tsym)) {\n@@ -351,6 +349,8 @@\n-        \/\/check if the given class exists, without producing side-effects:\n-        private boolean peekTypeExists(Env<AttrContext> env, TypeSymbol type) {\n-            JCExpression expr = make.Select(make.QualIdent(type), names._class);\n-            return !deferredAttr.attribSpeculative(expr, env, attr.unknownExprInfo)\n-                                .type\n-                                .isErroneous();\n+        private boolean peekTypeExists(TypeSymbol type) {\n+            try {\n+                type.complete();\n+                return !type.type.isErroneous();\n+            } catch (CompletionFailure cf) {\n+                \/\/does not exist\n+                return false;\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -245,0 +245,40 @@\n+\n+    @Test\n+    public void testWithExplicitImport(Path base) throws Exception {\n+        Path current = base.resolve(\".\");\n+        Path src = current.resolve(\"src\");\n+        Path classes = current.resolve(\"classes\");\n+        tb.writeFile(src.resolve(\"Test.java\"),\n+                     \"\"\"\n+                     import java.lang.*;\n+                     public static void main(String... args) {\n+                         List<String> l = new ArrayList<>();\n+                         System.out.println(l.getClass().getName());\n+                     }\n+                     \"\"\");\n+\n+        Files.createDirectories(classes);\n+\n+        new JavacTask(tb)\n+            .options(\"--enable-preview\", \"--release\", SOURCE_VERSION)\n+            .outdir(classes)\n+            .files(tb.findJavaFiles(src))\n+            .run(Task.Expect.SUCCESS)\n+            .writeAll();\n+\n+        var out = new JavaTask(tb)\n+                .classpath(classes.toString())\n+                .className(\"Test\")\n+                .vmOptions(\"--enable-preview\")\n+                .run()\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.STDOUT);\n+\n+        var expectedOut = List.of(\"java.util.ArrayList\");\n+\n+        if (!Objects.equals(expectedOut, out)) {\n+            throw new AssertionError(\"Incorrect Output, expected: \" + expectedOut +\n+                                      \", actual: \" + out);\n+\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/ImplicitClass\/ImplicitImports.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"}]}