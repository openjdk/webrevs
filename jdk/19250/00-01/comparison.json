{"files":[{"patch":"@@ -1830,1 +1830,1 @@\n-  BasicType basic_type = default_type != nullptr ? default_type->element_type()->basic_type() : T_ILLEGAL;\n+  BasicType basic_type = (default_type != nullptr) ? default_type->element_type()->basic_type() : T_ILLEGAL;\n@@ -1835,1 +1835,0 @@\n-  const int frame_resize = frame::native_abi_reg_args_size - sizeof(frame::java_abi); \/\/ C calls need larger frame.\n@@ -1841,1 +1840,1 @@\n-  if (op->expected_type() == nullptr) {\n+  if (default_type == nullptr) {\n@@ -1876,1 +1875,1 @@\n-  assert(default_type != nullptr && default_type->is_array_klass(), \"must be true at this point\");\n+  assert(default_type != nullptr && default_type->is_array_klass() && default_type->is_loaded(), \"must be true at this point\");\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -896,8 +896,1 @@\n-  CodeEmitInfo* info = nullptr;\n-  if (x->state_before() != nullptr && x->state_before()->force_reexecute()) {\n-    info = state_for(x, x->state_before());\n-    info->set_force_reexecute();\n-  } else {\n-    info = state_for(x, x->state());\n-  }\n-\n+  CodeEmitInfo* info = state_for(x, x->state());\n@@ -921,1 +914,7 @@\n-  CodeEmitInfo* info = state_for(x, x->state());\n+  CodeEmitInfo* info = nullptr;\n+  if (x->state_before() != nullptr && x->state_before()->force_reexecute()) {\n+    info = state_for(x, x->state_before());\n+    info->set_force_reexecute();\n+  } else {\n+    info = state_for(x, x->state());\n+  }\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRGenerator_ppc.cpp","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"}]}