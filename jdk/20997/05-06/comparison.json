{"files":[{"patch":"@@ -106,3 +106,0 @@\n-#define SPC_ERROR1      \"Error: Specifying an alternate JDK\/JRE version is no longer supported.\\n  The use of the flag '-version:' is no longer valid.\\n  Please download and execute the appropriate version.\"\n-#define SPC_ERROR2      \"Error: Specifying an alternate JDK\/JRE is no longer supported.\\n  The related flags -jre-restrict-search | -jre-no-restrict-search are also no longer valid.\"\n-\n","filename":"src\/java.base\/share\/native\/libjli\/emessages.h","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1220,6 +1220,0 @@\n-        } else if (JLI_StrCCmp(arg, \"-version:\") == 0) {\n-            REPORT_ERROR(NULL, SPC_ERROR1, arg);\n-        } else if (JLI_StrCmp(arg, \"-jre-restrict-search\") == 0) {\n-            REPORT_ERROR(NULL, SPC_ERROR2, arg);\n-        } else if (JLI_StrCmp(arg, \"-jre-no-restrict-search\") == 0) {\n-            REPORT_ERROR(NULL, SPC_ERROR2, arg);\n","filename":"src\/java.base\/share\/native\/libjli\/java.c","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,224 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8067437\n- * @summary Verify Multiple JRE version support has been removed.\n- * @modules jdk.compiler\n- *          jdk.zipfs\n- * @build TestHelper\n- * @run main MultipleJRERemoved\n- *\/\n-\n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.util.*;\n-import java.util.jar.Attributes;\n-import java.util.jar.JarOutputStream;\n-import java.util.jar.Manifest;\n-import java.util.regex.Pattern;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-import java.util.zip.ZipEntry;\n-\n-public class MultipleJRERemoved extends TestHelper {\n-\n-    public static final String VERSION_JAR = \"version.jar\";\n-    public static final String PRINT_VERSION_CLASS = \"PrintVersion\";\n-    private final File javaFile = new File(PRINT_VERSION_CLASS + \".java\");\n-    private final File clsFile = new File(PRINT_VERSION_CLASS + \".class\");\n-\n-    private MultipleJRERemoved() {\n-    }\n-\n-    \/**\n-     * @param args the command line arguments\n-     * @throws java.io.FileNotFoundException\n-     *\/\n-    public static void main(String[] args) throws Exception {\n-        MultipleJRERemoved a = new MultipleJRERemoved();\n-        a.run(args);\n-    }\n-\n-    \/**\n-     * Check all combinations of flags: \"-version:\", \"-jre-restrict-search\", \"-jre-no-restrict-search\". Test expects to see errors.\n-     *\/\n-    @Test\n-    public void allFlagCombinations() throws IOException {\n-        final Pattern newLine = Pattern.compile(\"\\n\");\n-        createJar(Collections.emptyMap());\n-\n-        for (Flag flag1 : Flag.values()) {\n-            for (Flag flag2 : Flag.values()) {\n-                for (Flag flag3 : Flag.values()) {\n-                    List<Flag> flags = Stream.of(flag1, flag2, flag3)\n-                            .filter(f -> !Flag.EMPTY.equals(f))\n-                            .collect(Collectors.toList());\n-\n-                    if (flags.size() == 0) continue;\n-\n-                    List<String> flagValues = flags.stream()\n-                            .map(Flag::value)\n-                            .collect(Collectors.toList());\n-\n-                    List<String> errorMessages = flags.stream()\n-                            .map(Flag::errorMessage)\n-                            .flatMap(newLine::splitAsStream)\n-                            .collect(Collectors.toList());\n-\n-                    List<String> jarCmd = new ArrayList<>();\n-                    jarCmd.add(javaCmd);\n-                    jarCmd.addAll(flagValues);\n-                    jarCmd.add(\"-jar\");\n-                    jarCmd.add(\"version.jar\");\n-\n-                    check(jarCmd, errorMessages);\n-\n-                    List<String> cmd = new ArrayList<>();\n-                    cmd.add(javaCmd);\n-                    cmd.addAll(flagValues);\n-                    cmd.add(PRINT_VERSION_CLASS);\n-\n-                    check(cmd, errorMessages);\n-                }\n-            }\n-        }\n-    }\n-\n-    private void check(List<String> cmd, List<String> errorMessages) {\n-        TestResult tr = doExec(cmd.toArray(new String[cmd.size()]));\n-        tr.checkNegative();\n-        tr.isNotZeroOutput();\n-        boolean foundAnyExpectedErrMsgs = false;\n-        for (String errMsg : errorMessages) {\n-            if (tr.contains(errMsg)) {\n-                foundAnyExpectedErrMsgs = true;\n-                break;\n-            }\n-        }\n-        if (!foundAnyExpectedErrMsgs) {\n-            errorMessages.forEach((errMsg) -> {\n-                tr.appendError(\"string <\" + errMsg + \"> not found\");\n-            });\n-        }\n-        if (!tr.testStatus) {\n-            System.out.println(tr);\n-            throw new RuntimeException(\"test case: failed\\n\" + cmd);\n-        }\n-    }\n-\n-    \/**\n-     * Verifies that java -help output doesn't contain information about \"mJRE\" flags.\n-     *\/\n-    @Test\n-    public void javaHelp() {\n-        TestResult tr = doExec(javaCmd, \"-help\");\n-        tr.checkPositive();\n-        tr.isNotZeroOutput();\n-        tr.notContains(\"-version:<value>\");\n-        tr.notContains(\"-jre-restrict-search\");\n-        tr.notContains(\"-jre-no-restrict-search\");\n-        tr.notContains(\"-no-jre-restrict-search\");  \/\/it's not a typo in flag name.\n-        if (!tr.testStatus) {\n-            System.out.println(tr);\n-            throw new RuntimeException(\"Failed. java -help output contains obsolete flags.\\n\");\n-        }\n-    }\n-\n-    \/**\n-     * Verifies that java -jar version.jar output ignores \"mJRE\" manifest directives.\n-     *\/\n-    @Test\n-    public void manifestDirectives() throws IOException {\n-        Map<String, String> manifest = new TreeMap<>();\n-        manifest.put(\"JRE-Version\", \"1.8\");\n-        manifest.put(\"JRE-Restrict-Search\", \"1.8\");\n-        createJar(manifest);\n-\n-        TestResult tr = doExec(javaCmd, \"-jar\", VERSION_JAR);\n-        tr.checkPositive();\n-        tr.contains(System.getProperty(\"java.version\"));\n-        if (!tr.testStatus) {\n-            System.out.println(tr);\n-            throw new RuntimeException(\"Failed.\\n\");\n-        }\n-    }\n-\n-    private void emitFile() throws IOException {\n-        List<String> scr = new ArrayList<>();\n-        scr.add(\"public class PrintVersion {\");\n-        scr.add(\"    public static void main(String... args) {\");\n-        scr.add(\"       System.out.println(System.getProperty(\\\"java.version\\\"));\");\n-        scr.add(\"    }\");\n-        scr.add(\"}\");\n-        createFile(javaFile, scr);\n-        compile(javaFile.getName());\n-    }\n-\n-    private void createJar(Map<String, String> manifestAttributes) throws IOException {\n-        emitFile();\n-\n-        Manifest manifest = new Manifest();\n-        final Attributes mainAttributes = manifest.getMainAttributes();\n-        mainAttributes.putValue(\"Manifest-Version\", \"1.0\");\n-        mainAttributes.putValue(\"Main-Class\", PRINT_VERSION_CLASS);\n-        manifestAttributes.forEach(mainAttributes::putValue);\n-\n-        try (JarOutputStream jar = new JarOutputStream(new FileOutputStream(VERSION_JAR), manifest)) {\n-            jar.putNextEntry(new ZipEntry(PRINT_VERSION_CLASS + \".class\"));\n-            jar.write(Files.readAllBytes(clsFile.toPath()));\n-            jar.closeEntry();\n-        } finally {\n-            javaFile.delete();\n-        }\n-    }\n-\n-    private enum Flag {\n-        EMPTY(\"\", \"\"),\n-        VERSION(\"-version:1.9\", \"Error: Specifying an alternate JDK\/JRE version is no longer supported.\\n\" +\n-                \"The use of the flag '-version:' is no longer valid.\\n\" +\n-                \"Please download and execute the appropriate version.\"),\n-        JRE_RESTRICT_SEARCH(\"-jre-restrict-search\", \"Error: Specifying an alternate JDK\/JRE is no longer supported.\\n\" +\n-                \"The related flags -jre-restrict-search | -jre-no-restrict-search are also no longer valid.\"),\n-        JRE_NO_RESTRICT_SEARCH(\"-jre-no-restrict-search\", \"Error: Specifying an alternate JDK\/JRE is no longer supported.\\n\" +\n-                \"The related flags -jre-restrict-search | -jre-no-restrict-search are also no longer valid.\");\n-        private final String flag;\n-        private final String errorMessage;\n-\n-        Flag(String flag, String errorMessage) {\n-            this.flag = flag;\n-            this.errorMessage = errorMessage;\n-        }\n-\n-        String value() {\n-            return flag;\n-        }\n-\n-        String errorMessage() {\n-            return errorMessage;\n-        }\n-    }\n-}\n","filename":"test\/jdk\/tools\/launcher\/MultipleJRERemoved.java","additions":0,"deletions":224,"binary":false,"changes":224,"status":"deleted"}]}