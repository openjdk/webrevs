{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,0 +86,3 @@\n+#ifdef _WIN32\n+static char * winGetEnv(const char * var_name);\n+#endif\n@@ -468,2 +471,0 @@\n-    char *env = getenv(var_name);\n-\n@@ -479,2 +480,11 @@\n-    if (NULL == env) {\n-        return JNI_FALSE;\n+#ifdef _WIN32\n+    char *env = winGetEnv(var_name);\n+#else\n+    char *env = getenv(var_name);\n+#endif\n+\n+    jboolean ret = JNI_FALSE;\n+\n+    if (NULL != env) {\n+        JLI_ReportMessage(ARG_INFO_ENVVAR, var_name, env);\n+        ret = expand(args, env, var_name);\n@@ -483,2 +493,6 @@\n-    JLI_ReportMessage(ARG_INFO_ENVVAR, var_name, env);\n-    return expand(args, env, var_name);\n+#ifdef _WIN32\n+    if (NULL != env) {\n+        JLI_MemFree(env);\n+    }\n+#endif\n+    return ret;\n@@ -586,0 +600,33 @@\n+#ifdef _WIN32\n+\/*\n+ * getenv() without best-fit mapping. The return value is constructed by converting\n+ * _wgetenv()'s return encoded in wide char to ANSI code page without best-fit map.\n+ *\/\n+static char * winGetEnv(const char * var_name) {\n+    char * mbEnvVar = NULL;\n+\n+    int wcCount = MultiByteToWideChar(CP_ACP, 0, var_name, -1, NULL, 0);\n+    if (wcCount > 0) {\n+        LPWSTR wcVarName = JLI_MemAlloc(wcCount * sizeof(wchar_t));\n+        if (MultiByteToWideChar(CP_ACP, 0, var_name, -1, wcVarName, wcCount) != 0) {\n+            LPWSTR wcEnvVar = _wgetenv(wcVarName);\n+            if (wcEnvVar != NULL) {\n+                int mbSize = WideCharToMultiByte(CP_ACP,\n+                    WC_NO_BEST_FIT_CHARS | WC_COMPOSITECHECK | WC_DEFAULTCHAR,\n+                    wcEnvVar, -1, NULL, 0, NULL, NULL);\n+                if (mbSize > 0) {\n+                    mbEnvVar = JLI_MemAlloc(mbSize);\n+                    if (WideCharToMultiByte(CP_ACP, WC_NO_BEST_FIT_CHARS | WC_COMPOSITECHECK | WC_DEFAULTCHAR,\n+                        wcEnvVar, -1, mbEnvVar, mbSize, NULL, NULL) == 0) {\n+                        JLI_MemFree(mbEnvVar);\n+                        mbEnvVar = NULL;\n+                    }\n+                }\n+            }\n+        }\n+        JLI_MemFree(wcVarName);\n+    }\n+    return mbEnvVar;\n+}\n+#endif\n+\n","filename":"src\/java.base\/share\/native\/libjli\/args.c","additions":54,"deletions":7,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,40 +31,0 @@\n-static jstring\n-environmentBlock9x(JNIEnv *env)\n-{\n-    int i;\n-    jmethodID String_init_ID;\n-    jbyteArray bytes;\n-    jbyte *blockA;\n-    jclass string_class;\n-\n-    string_class = JNU_ClassString(env);\n-    CHECK_NULL_RETURN(string_class, NULL);\n-\n-    String_init_ID =\n-        (*env)->GetMethodID(env, string_class, \"<init>\", \"([B)V\");\n-    CHECK_NULL_RETURN(String_init_ID, NULL);\n-\n-    blockA = (jbyte *) GetEnvironmentStringsA();\n-    if (blockA == NULL) {\n-        \/* Both GetEnvironmentStringsW and GetEnvironmentStringsA\n-         * failed.  Out of memory is our best guess.  *\/\n-        JNU_ThrowOutOfMemoryError(env, \"GetEnvironmentStrings failed\");\n-        return NULL;\n-    }\n-\n-    \/* Don't search for \"\\0\\0\", since an empty environment block may\n-       legitimately consist of a single \"\\0\". *\/\n-    for (i = 0; blockA[i];)\n-        while (blockA[i++])\n-            ;\n-\n-    if ((bytes = (*env)->NewByteArray(env, i)) == NULL) {\n-        FreeEnvironmentStringsA(blockA);\n-        return NULL;\n-    }\n-    (*env)->SetByteArrayRegion(env, bytes, 0, i, blockA);\n-    FreeEnvironmentStringsA(blockA);\n-    return (*env)->NewObject(env, string_class,\n-                             String_init_ID, bytes);\n-}\n-\n@@ -78,2 +38,5 @@\n-    if (blockW == NULL)\n-        return environmentBlock9x(env);\n+    if (blockW == NULL) {\n+        \/* Out of memory is our best guess. *\/\n+        JNU_ThrowOutOfMemoryError(env, \"GetEnvironmentStrings failed\");\n+        return NULL;\n+    }\n","filename":"src\/java.base\/windows\/native\/libjava\/ProcessEnvironment_md.c","additions":6,"deletions":43,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,4 @@\n- * @bug 8337506\n- * @summary Verify Command Line arguments are not mapped with\n- *     \"best-fit\" mappings on Windows\n+ * @bug 8337506 8349254\n+ * @summary Verify command line arguments, including ones from\n+ *          \"JDK_JAVA_OPTIONS\" environment variables are not mapped\n+ *          with \"best-fit\" mappings on Windows\n@@ -37,0 +38,1 @@\n+\n@@ -39,1 +41,0 @@\n-import org.junit.jupiter.api.Test;\n@@ -52,0 +53,2 @@\n+    private static final String TEST_ENV_VAR = \"JDK_JAVA_OPTIONS\";\n+    private static final String TEST_PROP_KEY = \"testProp\";\n@@ -55,1 +58,1 @@\n-    static Stream<Arguments> CMD_ARGS() {\n+    static Stream<Arguments> TEST_ARGS() {\n@@ -64,2 +67,2 @@\n-    @MethodSource(\"CMD_ARGS\")\n-    void testDisableBestFitMapping(String arg, String expected) throws Exception {\n+    @MethodSource(\"TEST_ARGS\")\n+    void testCommandLineArgument(String arg, String expected) throws Exception {\n@@ -71,2 +74,19 @@\n-        var result= ProcessTools.executeTestJava(\n-                DisableBestFitMappingTest.class.getSimpleName(), arg, expected);\n+        var result = ProcessTools.executeTestJava(\n+                DisableBestFitMappingTest.class.getSimpleName(), expected, arg);\n+        result.asLines().forEach(System.out::println);\n+        assertEquals(EXIT_SUCCESS, result.getExitValue(),\n+                \"Command line argument mapping failed\");\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"TEST_ARGS\")\n+    void testEnvironmentVariable(String propVal, String expected) throws Exception {\n+        \/\/ Only execute if the arg from the environment variable cannot be encoded\n+        assumeFalse(NATIVE_ENC.canEncode(propVal),\n+                \"native.encoding (%s) can encode the argument '%s'. Test ignored.\"\n+                        .formatted(NATIVE_ENC.charset(), propVal));\n+\n+        var pb = ProcessTools.createTestJavaProcessBuilder(\n+                DisableBestFitMappingTest.class.getSimpleName(), expected);\n+        pb.environment().put(TEST_ENV_VAR, \"-D\" + TEST_PROP_KEY + \"=\\\"\" + propVal + \"\\\"\");\n+        var result = ProcessTools.executeProcess(pb);\n@@ -75,1 +95,1 @@\n-                \"Disabling best-fit mapping failed\");\n+                \"Argument from JDK_JAVA_OPTIONS mapping failed\");\n@@ -79,3 +99,4 @@\n-        System.out.println(args[0]);\n-        System.out.println(args[1]);\n-        System.exit(args[0].equals(args[1]) ? EXIT_SUCCESS : EXIT_FAILURE);\n+        var expected = args[0];\n+        var actual = args.length > 1 ? args[1] : System.getProperty(TEST_PROP_KEY);\n+        System.out.printf(\"expected: %s, actual: %s%n\", expected, actual);\n+        System.exit(expected.equals(actual) ? EXIT_SUCCESS : EXIT_FAILURE);\n","filename":"test\/jdk\/tools\/launcher\/DisableBestFitMappingTest.java","additions":35,"deletions":14,"binary":false,"changes":49,"status":"modified"}]}