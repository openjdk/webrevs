{"files":[{"patch":"@@ -1091,2 +1091,2 @@\n-  \/\/ registers where op1 (instr[20:19]) == 11 and, (currently) only\n-  \/\/ use it for FPSR n.b msr has L (instr[21]) == 0 mrs has L == 1\n+  \/\/ registers where op1 (instr[20:19]) == 11\n+  \/\/ n.b msr has L (instr[21]) == 0 mrs has L == 1\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-    entry_frame_after_call_words                     = 27,\n+    entry_frame_after_call_words                     = 29,\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -574,0 +574,13 @@\n+  \/\/ FPCR : op1 == 011\n+  \/\/        CRn == 0100\n+  \/\/        CRm == 0100\n+  \/\/        op2 == 000\n+\n+  inline void get_fpcr(Register reg) {\n+    mrs(0b11, 0b0100, 0b0100, 0b000, reg);\n+  }\n+\n+  inline void set_fpcr(Register reg) {\n+    msr(0b011, 0b0100, 0b0100, 0b000, reg);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -144,1 +144,2 @@\n-  \/\/ -27 [ argument word 1      ]\n+  \/\/ -29 [ argument word 1      ]\n+  \/\/ -28 [ saved Floating-point Control Register ]\n@@ -176,1 +177,1 @@\n-    sp_after_call_off = -26,\n+    sp_after_call_off  = -28,\n@@ -178,0 +179,1 @@\n+    fpcr_off           = sp_after_call_off,\n@@ -207,1 +209,1 @@\n-    const Address sp_after_call(rfp, sp_after_call_off * wordSize);\n+    const Address sp_after_call (rfp, sp_after_call_off * wordSize);\n@@ -209,0 +211,1 @@\n+    const Address fpcr_save     (rfp, fpcr_off           * wordSize);\n@@ -257,0 +260,8 @@\n+    __ get_fpcr(rscratch1);\n+    __ str(rscratch1, fpcr_save);\n+    \/\/ Set FPCR to the state we need. We do want Round to Nearest. We\n+    \/\/ don't want non-IEEE rounding modes or floating-point traps.\n+    __ bfi(rscratch1, zr, 22, 4); \/\/ Clear DN, FZ, and Rmode\n+    __ bfi(rscratch1, zr, 8, 5);  \/\/ Clear exception-control bits (8-12)\n+    __ set_fpcr(rscratch1);\n+\n@@ -370,0 +381,4 @@\n+    \/\/ restore fpcr\n+    __ ldr(rscratch1,  fpcr_save);\n+    __ set_fpcr(rscratch1);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"}]}