{"files":[{"patch":"@@ -74,1 +74,2 @@\n-    private static final String OBJECT_TYPE_NAME = \"Object\";\n+     \/\/only used in erroneous\/non-standard circumstances; OK to use a FQN:\n+    private static final String OBJECT_TYPE_NAME = \"java.lang.Object\";\n@@ -397,2 +398,2 @@\n-                            ei.typeName = OBJECT_TYPE_NAME;\n-                            ei.accessibleTypeName = OBJECT_TYPE_NAME;\n+                            ei.typeName = varTypeName(syms.objectType, false, AnonymousTypeKind.SUPER);\n+                            ei.accessibleTypeName = ei.typeName;\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/ExpressionToTypeInfo.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -102,0 +102,4 @@\n+\n+    Stream<TypeDeclKey> typeDeclKeys() {\n+        return classMap.values().stream();\n+    }\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/KeyMap.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -161,0 +161,9 @@\n+        String simpleName = full.substring(full.lastIndexOf(\".\") + 1);\n+        Stream<String> declaredInSnippets = state.keyMap.typeDeclKeys()\n+                .map(key -> (TypeDeclSnippet) getSnippet(key))\n+                .map(decl -> decl.name());\n+        if (declaredInSnippets.anyMatch(clazz -> simpleName.equals(clazz))) {\n+            \/\/simple name of full clashes with a name of a user-defined class,\n+            \/\/use the fully-qualified name:\n+            return full;\n+        }\n@@ -168,1 +177,1 @@\n-                return full.substring(full.lastIndexOf(\".\")+1);\n+                return simpleName;\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/SnippetMaps.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -50,1 +50,2 @@\n-    private static final String OBJECT = \"Object\";\n+     \/\/only used in erroneous\/non-standard circumstances; OK to use a FQN:\n+    private static final String OBJECT = \"java.lang.Object\";\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/TypePrinter.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-                        \"    private static <\" + scratchName + \"> \" + scratchName +\" \", DOIT_METHOD_NAME + \"Aux\", \"() throws Throwable {\\n\",\n+                        \"    private static <\" + scratchName + \"> \" + scratchName +\" \", DOIT_METHOD_NAME + \"Aux\", \"() throws java.lang.Throwable {\\n\",\n@@ -118,1 +118,1 @@\n-                        \"        @SuppressWarnings(\\\"unchecked\\\") \", scratchName, \" \", scratchName, \"__ = (\", scratchName, \")\", scratchName, \"_;\\n\",\n+                        \"        @java.lang.SuppressWarnings(\\\"unchecked\\\") \", scratchName, \" \", scratchName, \"__ = (\", scratchName, \")\", scratchName, \"_;\\n\",\n@@ -553,1 +553,1 @@\n-            super(\"    public static Object \" + DOIT_METHOD_NAME + \"() throws Throwable {\\n\"\n+            super(\"    public static java.lang.Object \" + DOIT_METHOD_NAME + \"() throws java.lang.Throwable {\\n\"\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/Wrap.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8327512\n+ * @summary Clashes between java.lang classes and custom-defined classes with\n+ *          the same simple names\n+ * @modules jdk.jshell\/jdk.jshell\n+ * @build KullaTesting\n+ * @run testng JLCollisionTest\n+ *\/\n+\n+import org.testng.annotations.Test;\n+\n+@Test\n+public class JLCollisionTest extends KullaTesting {\n+\n+    public void testObject() {\n+        assertEval(\"class Object {}\");\n+        assertEval(\"1\");\n+        assertEval(\"null\");\n+        assertEval(\"$2 = \\\"\\\"\");\n+    }\n+\n+    public void testThrowable() {\n+        assertEval(\"class Throwable {}\");\n+        assertEval(\"1\");\n+        \/\/var with an \"enhanced\" (non-denotable) type:\n+        assertEval(\"var _ = new Object() {};\");\n+    }\n+\n+    public void testSuppressWarnings() {\n+        assertEval(\"class SuppressWarnings {}\");\n+        \/\/var with an \"enhanced\" (non-denotable) type:\n+        assertEval(\"var _ = new Object() {};\");\n+    }\n+\n+}\n","filename":"test\/langtools\/jdk\/jshell\/JLCollisionTest.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"}]}