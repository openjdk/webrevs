{"files":[{"patch":"@@ -74,0 +74,1 @@\n+    private LongFunction<LongStream> funIterateLongStream;\n@@ -75,0 +76,1 @@\n+    private IntFunction<IntStream> funIterateIntStream;\n@@ -76,0 +78,1 @@\n+    private DoubleFunction<DoubleStream> funIterateDoubleStream;\n@@ -103,0 +106,2 @@\n+        funIterateLongStream = new LongFunction<LongStream>() { @Override public LongStream apply(long l) {\n+            return LongStream.iterate(0L, i -> i + 1).limit(cachedSize); } };\n@@ -105,0 +110,2 @@\n+        funIterateIntStream = new IntFunction<IntStream>() { @Override public IntStream apply(int i) {\n+            return IntStream.iterate(0, ii -> ii + 1).limit(cachedSize); } };\n@@ -107,0 +114,2 @@\n+        funIterateDoubleStream = new DoubleFunction<DoubleStream>() { @Override public DoubleStream apply(double d) {\n+            return DoubleStream.iterate(0d, i -> i + 1d).limit(cachedSize); } };\n@@ -110,1 +119,1 @@\n-    public long seq_array() {\n+    public long seq_array_ref() {\n@@ -117,1 +126,1 @@\n-    public long par_array() {\n+    public long par_array_ref() {\n@@ -125,1 +134,1 @@\n-    public long seq_longstream() {\n+    public long seq_array_long() {\n@@ -132,1 +141,1 @@\n-    public long par_longstream() {\n+    public long par_array_long() {\n@@ -140,1 +149,1 @@\n-    public long seq_intstream() {\n+    public long seq_array_int() {\n@@ -147,1 +156,1 @@\n-    public long par_intstream() {\n+    public long par_array_int() {\n@@ -155,1 +164,1 @@\n-    public double seq_doublestream() {\n+    public double seq_array_double() {\n@@ -162,1 +171,1 @@\n-    public double par_doublestream() {\n+    public double par_array_double() {\n@@ -170,1 +179,1 @@\n-    public long seq_iterate() {\n+    public long seq_iterate_ref() {\n@@ -177,1 +186,1 @@\n-    public long par_iterate() {\n+    public long par_iterate_ref() {\n@@ -184,0 +193,46 @@\n+\n+    @Benchmark\n+    public long seq_iterate_long() {\n+        return funIterateLongStream.apply(0L)\n+                .flatMap(funIterateLongStream)\n+                .collect(LongAccumulator::new, LongAccumulator::add, LongAccumulator::merge).get();\n+    }\n+\n+    @Benchmark\n+    public long par_iterate_long() {\n+        return funIterateLongStream.apply(0L)\n+                .parallel()\n+                .flatMap(funIterateLongStream)\n+                .collect(LongAccumulator::new, LongAccumulator::add, LongAccumulator::merge).get();\n+    }\n+\n+    @Benchmark\n+    public long seq_iterate_int() {\n+        return funIterateIntStream.apply(0)\n+                .flatMap(funIterateIntStream)\n+                .collect(LongAccumulator::new, LongAccumulator::add, LongAccumulator::merge).get();\n+    }\n+\n+    @Benchmark\n+    public long par_iterate_int() {\n+        return funIterateIntStream.apply(0)\n+                .parallel()\n+                .flatMap(funIterateIntStream)\n+                .collect(LongAccumulator::new, LongAccumulator::add, LongAccumulator::merge).get();\n+    }\n+\n+    @Benchmark\n+    public double seq_iterate_double() {\n+        return funIterateDoubleStream.apply(0d)\n+                .flatMap(funIterateDoubleStream)\n+                .collect(DoubleAccumulator::new, DoubleAccumulator::add, DoubleAccumulator::merge).get();\n+    }\n+\n+    @Benchmark\n+    public double par_iterate_double() {\n+        return funIterateDoubleStream.apply(0d)\n+                .parallel()\n+                .flatMap(funIterateDoubleStream)\n+                .collect(DoubleAccumulator::new, DoubleAccumulator::add, DoubleAccumulator::merge).get();\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/stream\/ops\/ref\/FlatMap.java","additions":65,"deletions":10,"binary":false,"changes":75,"status":"modified"}]}