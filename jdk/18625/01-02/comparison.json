{"files":[{"patch":"@@ -266,1 +266,1 @@\n-                class FlatMap implements Sink.OfDouble, DoublePredicate {\n+                final class FlatMap implements Sink.OfDouble, DoublePredicate {\n@@ -274,8 +274,18 @@\n-                    public void accept(double input) {\n-                        try (DoubleStream result = mapper.apply(input)) {\n-                            if (result != null) {\n-                                if (shorts)\n-                                    result.sequential().allMatch(this);\n-                                else\n-                                    result.sequential().forEach(sink::accept);\n-                            }\n+                    public void accept(double e) {\n+                        if (shorts)\n+                            acceptShortCircuiting(e);\n+                        else\n+                            acceptFastPath(e);\n+                    }\n+\n+                    private void acceptFastPath(double e) {\n+                        try (var result = mapper.apply(e)) {\n+                            if (result != null)\n+                                result.sequential().forEach(sink::accept);\n+                        }\n+                    }\n+\n+                    private void acceptShortCircuiting(double e) {\n+                        try (var result = mapper.apply(e)) {\n+                            if (result != null)\n+                                result.sequential().allMatch(this);\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/DoublePipeline.java","additions":19,"deletions":9,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -300,1 +300,1 @@\n-                class FlatMap implements Sink.OfInt, IntPredicate {\n+                final class FlatMap implements Sink.OfInt, IntPredicate {\n@@ -308,8 +308,18 @@\n-                    public void accept(int input) {\n-                        try (IntStream result = mapper.apply(input)) {\n-                            if (result != null) {\n-                                if (shorts)\n-                                    result.sequential().allMatch(this);\n-                                else\n-                                    result.sequential().forEach(sink::accept);\n-                            }\n+                    public void accept(int e) {\n+                        if (shorts)\n+                            acceptShortCircuiting(e);\n+                        else\n+                            acceptFastPath(e);\n+                    }\n+\n+                    private void acceptFastPath(int e) {\n+                        try (var result = mapper.apply(e)) {\n+                            if (result != null)\n+                                result.sequential().forEach(sink::accept);\n+                        }\n+                    }\n+\n+                    private void acceptShortCircuiting(int e) {\n+                        try (var result = mapper.apply(e)) {\n+                            if (result != null)\n+                                result.sequential().allMatch(this);\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/IntPipeline.java","additions":19,"deletions":9,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -282,2 +282,1 @@\n-                final var shorts = isShortCircuitingPipeline();\n-                class FlatMap implements Sink.OfLong, LongPredicate {\n+                final class FlatMap implements Sink.OfLong, LongPredicate {\n@@ -285,0 +284,1 @@\n+                    final boolean shorts = isShortCircuitingPipeline();\n@@ -290,8 +290,18 @@\n-                    public void accept(long input) {\n-                        try (LongStream result = mapper.apply(input)) {\n-                            if (result != null) {\n-                                if (shorts)\n-                                    result.sequential().allMatch(this);\n-                                else\n-                                    result.sequential().forEach(sink::accept);\n-                            }\n+                    public void accept(long e) {\n+                        if (shorts)\n+                            acceptShortCircuiting(e);\n+                        else\n+                            acceptFastPath(e);\n+                    }\n+\n+                    private void acceptFastPath(long e) {\n+                        try (var result = mapper.apply(e)) {\n+                            if (result != null)\n+                                result.sequential().forEach(sink::accept);\n+                        }\n+                    }\n+\n+                    private void acceptShortCircuiting(long e) {\n+                        try (var result = mapper.apply(e)) {\n+                            if (result != null)\n+                                result.sequential().allMatch(this);\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/LongPipeline.java","additions":20,"deletions":10,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -280,1 +280,1 @@\n-                class FlatMap implements Sink<P_OUT>, Predicate<R> {\n+                final class FlatMap implements Sink<P_OUT>, Predicate<R> {\n@@ -288,8 +288,18 @@\n-                    public void accept(P_OUT u) {\n-                        try (Stream<? extends R> result = mapper.apply(u)) {\n-                            if (result != null) {\n-                                if (shorts)\n-                                    result.sequential().allMatch(this);\n-                                else\n-                                    result.sequential().forEach(sink::accept);\n-                            }\n+                    public void accept(P_OUT e) {\n+                        if (shorts)\n+                            acceptShortCircuiting(e);\n+                        else\n+                            acceptFastPath(e);\n+                    }\n+\n+                    private void acceptFastPath(P_OUT e) {\n+                        try (var result = mapper.apply(e)) {\n+                            if (result != null)\n+                                result.sequential().forEach(sink::accept);\n+                        }\n+                    }\n+\n+                    private void acceptShortCircuiting(P_OUT e) {\n+                        try (var result = mapper.apply(e)) {\n+                            if (result != null)\n+                                result.sequential().allMatch(this);\n@@ -326,1 +336,1 @@\n-                class FlatMap implements Sink<P_OUT>, IntPredicate {\n+                final class FlatMap implements Sink<P_OUT>, IntPredicate {\n@@ -334,8 +344,18 @@\n-                    public void accept(P_OUT u) {\n-                        try (IntStream result = mapper.apply(u)) {\n-                            if (result != null) {\n-                                if (shorts)\n-                                    result.sequential().allMatch(this);\n-                                else\n-                                    result.sequential().forEach(sink::accept);\n-                            }\n+                    public void accept(P_OUT e) {\n+                        if (shorts)\n+                            acceptShortCircuiting(e);\n+                        else\n+                            acceptFastPath(e);\n+                    }\n+\n+                    private void acceptFastPath(P_OUT e) {\n+                        try (var result = mapper.apply(e)) {\n+                            if (result != null)\n+                                result.sequential().forEach(sink::accept);\n+                        }\n+                    }\n+\n+                    private void acceptShortCircuiting(P_OUT e) {\n+                        try (var result = mapper.apply(e)) {\n+                            if (result != null)\n+                                result.sequential().allMatch(this);\n@@ -372,1 +392,1 @@\n-                class FlatMap implements Sink<P_OUT>, DoublePredicate {\n+                final class FlatMap implements Sink<P_OUT>, DoublePredicate {\n@@ -380,8 +400,18 @@\n-                    public void accept(P_OUT u) {\n-                        try (DoubleStream result = mapper.apply(u)) {\n-                            if (result != null) {\n-                                if (shorts)\n-                                    result.sequential().allMatch(this);\n-                                else\n-                                    result.sequential().forEach(sink::accept);\n-                            }\n+                    public void accept(P_OUT e) {\n+                        if (shorts)\n+                            acceptShortCircuiting(e);\n+                        else\n+                            acceptFastPath(e);\n+                    }\n+\n+                    private void acceptFastPath(P_OUT e) {\n+                        try (var result = mapper.apply(e)) {\n+                            if (result != null)\n+                                result.sequential().forEach(sink::accept);\n+                        }\n+                    }\n+\n+                    private void acceptShortCircuiting(P_OUT e) {\n+                        try (var result = mapper.apply(e)) {\n+                            if (result != null)\n+                                result.sequential().allMatch(this);\n@@ -419,1 +449,1 @@\n-                class FlatMap implements Sink<P_OUT>, LongPredicate {\n+                final class FlatMap implements Sink<P_OUT>, LongPredicate {\n@@ -427,8 +457,18 @@\n-                    public void accept(P_OUT u) {\n-                        try (LongStream result = mapper.apply(u)) {\n-                            if (result != null) {\n-                                if (shorts)\n-                                    result.sequential().allMatch(this);\n-                                else\n-                                    result.sequential().forEach(sink::accept);\n-                            }\n+                    public void accept(P_OUT e) {\n+                        if (shorts)\n+                            acceptShortCircuiting(e);\n+                        else\n+                            acceptFastPath(e);\n+                    }\n+\n+                    private void acceptFastPath(P_OUT e) {\n+                        try (var result = mapper.apply(e)) {\n+                            if (result != null)\n+                                result.sequential().forEach(sink::accept);\n+                        }\n+                    }\n+\n+                    private void acceptShortCircuiting(P_OUT e) {\n+                        try (var result = mapper.apply(e)) {\n+                            if (result != null)\n+                                result.sequential().allMatch(this);\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/ReferencePipeline.java","additions":76,"deletions":36,"binary":false,"changes":112,"status":"modified"}]}