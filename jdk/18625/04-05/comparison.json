{"files":[{"patch":"@@ -42,0 +42,1 @@\n+import java.util.function.IntConsumer;\n@@ -266,0 +267,6 @@\n+                final DoubleConsumer fastPath =\n+                        isShortCircuitingPipeline()\n+                                ? null\n+                                : (sink instanceof DoubleConsumer dc)\n+                                ? dc\n+                                : sink::accept;\n@@ -268,1 +275,0 @@\n-                    private final boolean shorts = isShortCircuitingPipeline();\n@@ -275,17 +281,7 @@\n-                        if (shorts)\n-                            acceptShortCircuiting(e);\n-                        else\n-                            acceptFastPath(e);\n-                    }\n-\n-                    private void acceptFastPath(double e) {\n-                        try (var result = mapper.apply(e)) {\n-                            if (result != null)\n-                                result.sequential().forEach(sink::accept);\n-                        }\n-                    }\n-\n-                    private void acceptShortCircuiting(double e) {\n-                        try (var result = mapper.apply(e)) {\n-                            if (result != null)\n-                                result.sequential().allMatch(this);\n+                        try (final var result = mapper.apply(e)) {\n+                            if (result != null) {\n+                                if (fastPath == null)\n+                                    result.sequential().allMatch(this);\n+                                else\n+                                    result.sequential().forEach(fastPath);\n+                            }\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/DoublePipeline.java","additions":14,"deletions":18,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -300,0 +300,6 @@\n+                final IntConsumer fastPath =\n+                        isShortCircuitingPipeline()\n+                                ? null\n+                                : (sink instanceof IntConsumer ic)\n+                                ? ic\n+                                : sink::accept;\n@@ -302,1 +308,0 @@\n-                    private final boolean shorts = isShortCircuitingPipeline();\n@@ -309,17 +314,7 @@\n-                        if (shorts)\n-                            acceptShortCircuiting(e);\n-                        else\n-                            acceptFastPath(e);\n-                    }\n-\n-                    private void acceptFastPath(int e) {\n-                        try (var result = mapper.apply(e)) {\n-                            if (result != null)\n-                                result.sequential().forEach(sink::accept);\n-                        }\n-                    }\n-\n-                    private void acceptShortCircuiting(int e) {\n-                        try (var result = mapper.apply(e)) {\n-                            if (result != null)\n-                                result.sequential().allMatch(this);\n+                        try (final var result = mapper.apply(e)) {\n+                            if (result != null) {\n+                                if (fastPath == null)\n+                                    result.sequential().allMatch(this);\n+                                else\n+                                    result.sequential().forEach(fastPath);\n+                            }\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/IntPipeline.java","additions":13,"deletions":18,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.util.function.IntConsumer;\n@@ -282,0 +283,6 @@\n+                final LongConsumer fastPath =\n+                        isShortCircuitingPipeline()\n+                                ? null\n+                                : (sink instanceof LongConsumer lc)\n+                                ? lc\n+                                : sink::accept;\n@@ -284,1 +291,0 @@\n-                    final boolean shorts = isShortCircuitingPipeline();\n@@ -291,17 +297,7 @@\n-                        if (shorts)\n-                            acceptShortCircuiting(e);\n-                        else\n-                            acceptFastPath(e);\n-                    }\n-\n-                    private void acceptFastPath(long e) {\n-                        try (var result = mapper.apply(e)) {\n-                            if (result != null)\n-                                result.sequential().forEach(sink::accept);\n-                        }\n-                    }\n-\n-                    private void acceptShortCircuiting(long e) {\n-                        try (var result = mapper.apply(e)) {\n-                            if (result != null)\n-                                result.sequential().allMatch(this);\n+                        try (final var result = mapper.apply(e)) {\n+                            if (result != null) {\n+                                if (fastPath == null)\n+                                    result.sequential().allMatch(this);\n+                                else\n+                                    result.sequential().forEach(fastPath);\n+                            }\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/LongPipeline.java","additions":14,"deletions":18,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -280,0 +280,1 @@\n+                final boolean shorts = isShortCircuitingPipeline();\n@@ -282,1 +283,0 @@\n-                    private final boolean shorts = isShortCircuitingPipeline();\n@@ -289,17 +289,7 @@\n-                        if (shorts)\n-                            acceptShortCircuiting(e);\n-                        else\n-                            acceptFastPath(e);\n-                    }\n-\n-                    private void acceptFastPath(P_OUT e) {\n-                        try (var result = mapper.apply(e)) {\n-                            if (result != null)\n-                                result.sequential().forEach(sink::accept);\n-                        }\n-                    }\n-\n-                    private void acceptShortCircuiting(P_OUT e) {\n-                        try (var result = mapper.apply(e)) {\n-                            if (result != null)\n-                                result.sequential().allMatch(this);\n+                        try (final var result = mapper.apply(e)) {\n+                            if (result != null) {\n+                                if (shorts)\n+                                    result.sequential().allMatch(this);\n+                                else\n+                                    result.sequential().forEach(sink);\n+                            }\n@@ -336,0 +326,6 @@\n+                final IntConsumer fastPath =\n+                        isShortCircuitingPipeline()\n+                                ? null\n+                                : (sink instanceof IntConsumer ic)\n+                                ? ic\n+                                : sink::accept;\n@@ -338,1 +334,0 @@\n-                    private final boolean shorts = isShortCircuitingPipeline();\n@@ -345,17 +340,7 @@\n-                        if (shorts)\n-                            acceptShortCircuiting(e);\n-                        else\n-                            acceptFastPath(e);\n-                    }\n-\n-                    private void acceptFastPath(P_OUT e) {\n-                        try (var result = mapper.apply(e)) {\n-                            if (result != null)\n-                                result.sequential().forEach(sink::accept);\n-                        }\n-                    }\n-\n-                    private void acceptShortCircuiting(P_OUT e) {\n-                        try (var result = mapper.apply(e)) {\n-                            if (result != null)\n-                                result.sequential().allMatch(this);\n+                        try (final var result = mapper.apply(e)) {\n+                            if (result != null) {\n+                                if (fastPath == null)\n+                                    result.sequential().allMatch(this);\n+                                else\n+                                    result.sequential().forEach(fastPath);\n+                            }\n@@ -392,0 +377,6 @@\n+                final DoubleConsumer fastPath =\n+                        isShortCircuitingPipeline()\n+                                ? null\n+                                : (sink instanceof DoubleConsumer dc)\n+                                ? dc\n+                                : sink::accept;\n@@ -393,1 +384,0 @@\n-                    private final boolean shorts = isShortCircuitingPipeline();\n@@ -401,17 +391,7 @@\n-                        if (shorts)\n-                            acceptShortCircuiting(e);\n-                        else\n-                            acceptFastPath(e);\n-                    }\n-\n-                    private void acceptFastPath(P_OUT e) {\n-                        try (var result = mapper.apply(e)) {\n-                            if (result != null)\n-                                result.sequential().forEach(sink::accept);\n-                        }\n-                    }\n-\n-                    private void acceptShortCircuiting(P_OUT e) {\n-                        try (var result = mapper.apply(e)) {\n-                            if (result != null)\n-                                result.sequential().allMatch(this);\n+                        try (final var result = mapper.apply(e)) {\n+                            if (result != null) {\n+                                if (fastPath == null)\n+                                    result.sequential().allMatch(this);\n+                                else\n+                                    result.sequential().forEach(fastPath);\n+                            }\n@@ -449,0 +429,6 @@\n+                final LongConsumer fastPath =\n+                        isShortCircuitingPipeline()\n+                                ? null\n+                                : (sink instanceof LongConsumer lc)\n+                                ? lc\n+                                : sink::accept;\n@@ -450,1 +436,0 @@\n-                    private final boolean shorts = isShortCircuitingPipeline();\n@@ -458,17 +443,7 @@\n-                        if (shorts)\n-                            acceptShortCircuiting(e);\n-                        else\n-                            acceptFastPath(e);\n-                    }\n-\n-                    private void acceptFastPath(P_OUT e) {\n-                        try (var result = mapper.apply(e)) {\n-                            if (result != null)\n-                                result.sequential().forEach(sink::accept);\n-                        }\n-                    }\n-\n-                    private void acceptShortCircuiting(P_OUT e) {\n-                        try (var result = mapper.apply(e)) {\n-                            if (result != null)\n-                                result.sequential().allMatch(this);\n+                        try (final var result = mapper.apply(e)) {\n+                            if (result != null) {\n+                                if (fastPath == null)\n+                                    result.sequential().allMatch(this);\n+                                else\n+                                    result.sequential().forEach(fastPath);\n+                            }\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/ReferencePipeline.java","additions":47,"deletions":72,"binary":false,"changes":119,"status":"modified"}]}