{"files":[{"patch":"@@ -42,0 +42,1 @@\n+import java.util.function.IntConsumer;\n@@ -268,1 +269,6 @@\n-                    private final boolean shorts = isShortCircuitingPipeline();\n+                    private final DoubleConsumer fastPath =\n+                            isShortCircuitingPipeline()\n+                                ? null\n+                                : (sink instanceof DoubleConsumer dc)\n+                                    ? dc\n+                                    : sink::accept;\n@@ -275,1 +281,1 @@\n-                        if (shorts)\n+                        if (fastPath == null)\n@@ -284,1 +290,1 @@\n-                                result.sequential().forEach(sink::accept);\n+                                result.sequential().forEach(fastPath);\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/DoublePipeline.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -302,1 +302,6 @@\n-                    private final boolean shorts = isShortCircuitingPipeline();\n+                    private final IntConsumer fastPath =\n+                            isShortCircuitingPipeline()\n+                                ? null\n+                                : (sink instanceof IntConsumer ic)\n+                                  ? ic\n+                                  : sink::accept;\n@@ -309,1 +314,1 @@\n-                        if (shorts)\n+                        if (fastPath == null)\n@@ -318,1 +323,1 @@\n-                                result.sequential().forEach(sink::accept);\n+                                result.sequential().forEach(fastPath);\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/IntPipeline.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.util.function.IntConsumer;\n@@ -284,1 +285,6 @@\n-                    final boolean shorts = isShortCircuitingPipeline();\n+                    private final LongConsumer fastPath =\n+                            isShortCircuitingPipeline()\n+                                ? null\n+                                : (sink instanceof LongConsumer lc)\n+                                    ? lc\n+                                    : sink::accept;\n@@ -291,1 +297,1 @@\n-                        if (shorts)\n+                        if (fastPath == null)\n@@ -300,1 +306,1 @@\n-                                result.sequential().forEach(sink::accept);\n+                                result.sequential().forEach(fastPath);\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/LongPipeline.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -298,1 +298,1 @@\n-                                result.sequential().forEach(sink::accept);\n+                                result.sequential().forEach(sink);\n@@ -338,1 +338,6 @@\n-                    private final boolean shorts = isShortCircuitingPipeline();\n+                    private final IntConsumer fastPath =\n+                            isShortCircuitingPipeline()\n+                                ? null\n+                                : (sink instanceof IntConsumer ic)\n+                                    ? ic\n+                                    : sink::accept;\n@@ -345,1 +350,1 @@\n-                        if (shorts)\n+                        if (fastPath == null)\n@@ -354,1 +359,1 @@\n-                                result.sequential().forEach(sink::accept);\n+                                result.sequential().forEach(fastPath);\n@@ -393,1 +398,0 @@\n-                    private final boolean shorts = isShortCircuitingPipeline();\n@@ -396,0 +400,7 @@\n+                    private final DoubleConsumer fastPath =\n+                            isShortCircuitingPipeline()\n+                                ? null\n+                                : (sink instanceof DoubleConsumer dc)\n+                                    ? dc\n+                                    : sink::accept;\n+\n@@ -401,1 +412,1 @@\n-                        if (shorts)\n+                        if (fastPath == null)\n@@ -410,1 +421,1 @@\n-                                result.sequential().forEach(sink::accept);\n+                                result.sequential().forEach(fastPath);\n@@ -450,1 +461,0 @@\n-                    private final boolean shorts = isShortCircuitingPipeline();\n@@ -452,0 +462,6 @@\n+                    private final LongConsumer fastPath =\n+                            isShortCircuitingPipeline()\n+                                ? null\n+                                : (sink instanceof LongConsumer lc)\n+                                    ? lc\n+                                    : sink::accept;\n@@ -458,1 +474,1 @@\n-                        if (shorts)\n+                        if (fastPath == null)\n@@ -467,1 +483,1 @@\n-                                result.sequential().forEach(sink::accept);\n+                                result.sequential().forEach(fastPath);\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/ReferencePipeline.java","additions":26,"deletions":10,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.util.stream.ops;\n+\n+public class DoubleAccumulator {\n+\n+    double acc;\n+\n+    public DoubleAccumulator() {\n+        acc = 0;\n+    }\n+\n+    public void add(double v) {\n+        acc += v;\n+    }\n+\n+    public void merge(DoubleAccumulator other) {\n+        acc += other.acc;\n+    }\n+\n+    public double get() {\n+        return acc;\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/stream\/ops\/DoubleAccumulator.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -25,0 +25,1 @@\n+import org.openjdk.bench.java.util.stream.ops.DoubleAccumulator;\n@@ -40,0 +41,3 @@\n+import java.util.function.IntFunction;\n+import java.util.function.LongFunction;\n+import java.util.function.DoubleFunction;\n@@ -41,0 +45,3 @@\n+import java.util.stream.DoubleStream;\n+import java.util.stream.LongStream;\n+import java.util.stream.IntStream;\n@@ -66,0 +73,3 @@\n+    private LongFunction<LongStream> funLongStream;\n+    private IntFunction<IntStream> funIntStream;\n+    private DoubleFunction<DoubleStream> funDoubleStream;\n@@ -67,1 +77,4 @@\n-    private Long[] cachedInputArray;\n+    private Long[] cachedRefArray;\n+    private int[] cachedIntArray;\n+    private long[] cachedLongArray;\n+    private double[] cachedDoubleArray;\n@@ -72,3 +85,10 @@\n-        cachedInputArray = new Long[cachedSize];\n-        for(int i = 0;i < cachedInputArray.length;++i)\n-            cachedInputArray[i] = Long.valueOf(i);\n+        cachedRefArray = new Long[cachedSize];\n+        cachedIntArray = new int[cachedSize];\n+        cachedLongArray = new long[cachedSize];\n+        cachedDoubleArray = new double[cachedSize];\n+        for(int i = 0;i < cachedRefArray.length;++i) {\n+            cachedRefArray[i]    = Long.valueOf(i);\n+            cachedIntArray[i]    = i;\n+            cachedLongArray[i]   = i;\n+            cachedDoubleArray[i] = i;\n+        }\n@@ -77,1 +97,1 @@\n-            return Arrays.stream(cachedInputArray);\n+            return Arrays.stream(cachedRefArray);\n@@ -80,2 +100,7 @@\n-            return Stream.iterate(0L, i -> i + 1).limit(cachedSize);\n-        } };\n+            return Stream.iterate(0L, i -> i + 1).limit(cachedSize); } };\n+        funLongStream = new LongFunction<LongStream>() { @Override public LongStream apply(long l) {\n+            return Arrays.stream(cachedLongArray); } };\n+        funIntStream = new IntFunction<IntStream>() { @Override public IntStream apply(int i) {\n+            return Arrays.stream(cachedIntArray); } };\n+        funDoubleStream = new DoubleFunction<DoubleStream>() { @Override public DoubleStream apply(double d) {\n+            return Arrays.stream(cachedDoubleArray); } };\n@@ -99,0 +124,45 @@\n+    @Benchmark\n+    public long seq_longstream() {\n+        return funLongStream.apply(0L)\n+                .flatMap(funLongStream)\n+                .collect(LongAccumulator::new, LongAccumulator::add, LongAccumulator::merge).get();\n+    }\n+\n+    @Benchmark\n+    public long par_longstream() {\n+        return funLongStream.apply(0L)\n+                .parallel()\n+                .flatMap(funLongStream)\n+                .collect(LongAccumulator::new, LongAccumulator::add, LongAccumulator::merge).get();\n+    }\n+\n+    @Benchmark\n+    public long seq_intstream() {\n+        return funIntStream.apply(0)\n+                .flatMap(funIntStream)\n+                .collect(LongAccumulator::new, LongAccumulator::add, LongAccumulator::merge).get();\n+    }\n+\n+    @Benchmark\n+    public long par_intstream() {\n+        return funIntStream.apply(0)\n+                .parallel()\n+                .flatMap(funIntStream)\n+                .collect(LongAccumulator::new, LongAccumulator::add, LongAccumulator::merge).get();\n+    }\n+\n+    @Benchmark\n+    public double seq_doublestream() {\n+        return funDoubleStream.apply(0d)\n+                .flatMap(funDoubleStream)\n+                .collect(DoubleAccumulator::new, DoubleAccumulator::add, DoubleAccumulator::merge).get();\n+    }\n+\n+    @Benchmark\n+    public double par_doublestream() {\n+        return funDoubleStream.apply(0d)\n+                .parallel()\n+                .flatMap(funDoubleStream)\n+                .collect(DoubleAccumulator::new, DoubleAccumulator::add, DoubleAccumulator::merge).get();\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/stream\/ops\/ref\/FlatMap.java","additions":77,"deletions":7,"binary":false,"changes":84,"status":"modified"}]}