{"files":[{"patch":"@@ -156,4 +156,1 @@\n-  {\n-    ShenandoahHeapLocker locker(heap->lock());\n-    heap->free_set()->log_status();\n-  }\n+  heap->free_set()->log_status_under_lock();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -150,4 +150,1 @@\n-      {\n-        ShenandoahHeapLocker locker(heap->lock());\n-        heap->free_set()->log_status();\n-      }\n+      heap->free_set()->log_status_under_lock();\n@@ -181,3 +178,1 @@\n-      {\n-        ShenandoahHeapLocker locker(heap->lock());\n-        heap->free_set()->log_status();\n+      heap->free_set()->log_status_under_lock();\n@@ -185,4 +180,4 @@\n-        \/\/ Notify Universe about new heap usage. This has implications for\n-        \/\/ global soft refs policy, and we better report it every time heap\n-        \/\/ usage goes down.\n-        heap->update_capacity_and_used_at_gc();\n+      \/\/ Notify Universe about new heap usage. This has implications for\n+      \/\/ global soft refs policy, and we better report it every time heap\n+      \/\/ usage goes down.\n+      heap->update_capacity_and_used_at_gc();\n@@ -190,3 +185,2 @@\n-        \/\/ Signal that we have completed a visit to all live objects.\n-        heap->record_whole_heap_examined_timestamp();\n-      }\n+      \/\/ Signal that we have completed a visit to all live objects.\n+      heap->record_whole_heap_examined_timestamp();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":8,"deletions":14,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1133,0 +1133,10 @@\n+void ShenandoahFreeSet::log_status_under_lock() {\n+  \/\/ Must not be heap locked, it acquires heap lock only when log is enabled\n+  shenandoah_assert_not_heaplocked();\n+  if (LogTarget(Info, gc, free)::is_enabled()\n+      DEBUG_ONLY(|| LogTarget(Debug, gc, free)::is_enabled())) {\n+    ShenandoahHeapLocker locker(_heap->lock());\n+    log_status();\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -321,0 +321,3 @@\n+  \/\/ log status, assuming lock has already been acquired by the caller.\n+  void log_status();\n+\n@@ -343,1 +346,2 @@\n-  void log_status();\n+  \/\/ Acquire heap lock and log status, assuming heap lock is not acquired by the caller.\n+  void log_status_under_lock();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}