{"files":[{"patch":"@@ -471,1 +471,3 @@\n-    assert(node_place != nullptr, \"rb-tree allocator must exit on failure\");\n+    if (node_place == nullptr) {\n+      return nullptr;\n+    }\n@@ -477,1 +479,3 @@\n-    assert(node_place != nullptr, \"rb-tree allocator must exit on failure\");\n+    if (node_place == nullptr) {\n+      return nullptr;\n+    }\n@@ -488,1 +492,2 @@\n-  void upsert(const K& key, const V& val, const RBNode<K, V>* hint_node = nullptr) {\n+  \/\/ Returns false if and only if allocation of a new node failed.\n+  bool upsert(const K& key, const V& val, const RBNode<K, V>* hint_node = nullptr) {\n@@ -493,1 +498,1 @@\n-      return;\n+      return true;\n@@ -497,0 +502,3 @@\n+    if (node == nullptr) {\n+      return false;\n+    }\n@@ -498,0 +506,1 @@\n+    return true;\n@@ -548,1 +557,1 @@\n-template <MemTag mem_tag>\n+template <MemTag mem_tag, AllocFailType strategy>\n@@ -553,1 +562,1 @@\n-    if (allocation == nullptr) {\n+    if (allocation == nullptr && strategy == AllocFailStrategy::EXIT_OOM) {\n@@ -563,2 +572,2 @@\n-template <typename K, typename V, typename COMPARATOR, MemTag mem_tag>\n-using RBTreeCHeap = RBTree<K, V, COMPARATOR, RBTreeCHeapAllocator<mem_tag>>;\n+template <typename K, typename V, typename COMPARATOR, MemTag mem_tag, AllocFailType strategy = AllocFailStrategy::EXIT_OOM>\n+using RBTreeCHeap = RBTree<K, V, COMPARATOR, RBTreeCHeapAllocator<mem_tag, strategy>>;\n","filename":"src\/hotspot\/share\/utilities\/rbTree.hpp","additions":17,"deletions":8,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -989,17 +989,17 @@\n-  typedef RBTree<int, unsigned, IntCmp, RBTreeCHeapAllocator<mtTest> > TreeType;\n-    TreeType tree;\n-    const int i1 = 82924;\n-    const char* const s1 = \"[82924] = 1\";\n-    const int i2 = -13591;\n-    const char* const s2 = \"[-13591] = 2\";\n-    const int i3 = 0;\n-    const char* const s3 = \"[0] = 3\";\n-    tree.upsert(i1, 1U);\n-    tree.upsert(i2, 2U);\n-    tree.upsert(i3, 3U);\n-    stringStream ss;\n-    tree.print_on(&ss);\n-    const char* const N = nullptr;\n-    ASSERT_NE(strstr(ss.base(), s1), N);\n-    ASSERT_NE(strstr(ss.base(), s2), N);\n-    ASSERT_NE(strstr(ss.base(), s3), N);\n+  using TreeType = RBTreeCHeap<int, unsigned, IntCmp, mtTest>;\n+  TreeType tree;\n+  const int i1 = 82924;\n+  const char* const s1 = \"[82924] = 1\";\n+  const int i2 = -13591;\n+  const char* const s2 = \"[-13591] = 2\";\n+  const int i3 = 0;\n+  const char* const s3 = \"[0] = 3\";\n+  tree.upsert(i1, 1U);\n+  tree.upsert(i2, 2U);\n+  tree.upsert(i3, 3U);\n+  stringStream ss;\n+  tree.print_on(&ss);\n+  const char* const N = nullptr;\n+  ASSERT_NE(strstr(ss.base(), s1), N);\n+  ASSERT_NE(strstr(ss.base(), s2), N);\n+  ASSERT_NE(strstr(ss.base(), s3), N);\n@@ -1082,0 +1082,12 @@\n+struct OomAllocator {\n+  void* allocate(size_t sz) {\n+    return nullptr;\n+  }\n+  void free(void* ptr) {}\n+};\n+TEST_VM_F(RBTreeTest, AllocatorMayReturnNull) {\n+  RBTree<int, int, Cmp, OomAllocator> rbtree;\n+  bool success = rbtree.upsert(5, 5);\n+  EXPECT_EQ(false, success);\n+  \/\/ The test didn't exit the VM, so it was succesful.\n+}\n","filename":"test\/hotspot\/gtest\/utilities\/test_rbtree.cpp","additions":29,"deletions":17,"binary":false,"changes":46,"status":"modified"}]}