{"files":[{"patch":"@@ -2723,5 +2723,1 @@\n-      \/\/ If we get an out-of-range offset it is a bug in the compiler,\n-      \/\/ so we assert here.\n-      assert(Address::offset_ok_for_immed(addr.offset(), exact_log2(size_in_memory)),\n-             \"c2 compiler bug\");\n-      \/* Fix up any out-of-range offsets. *\/\n+      \/\/ Fix up any out-of-range offsets.\n@@ -2752,4 +2748,1 @@\n-      \/* If we get an out-of-range offset it is a bug in the compiler,\n-         so we assert here. *\/\n-      assert(Address::offset_ok_for_immed(disp, exact_log2(size_in_memory)), \"c2 compiler bug\");\n-      \/* Fix up any out-of-range offsets. *\/\n+      \/\/ Fix up any out-of-range offsets.\n@@ -2771,1 +2764,5 @@\n-      (masm->*insn)(reg, T, Address(base, disp));\n+      \/\/ Fix up any out-of-range offsets.\n+      assert_different_registers(rscratch1, base);\n+      Address addr = Address(base, disp);\n+      addr = __ legitimize_address(addr, (1 << T), rscratch1);\n+      (masm->*insn)(reg, T, addr);\n@@ -2826,1 +2823,1 @@\n-  enc_class aarch64_enc_ldrsbw(iRegI dst, memory1 mem) %{\n+  enc_class aarch64_enc_ldrsbw(iRegI dst, memory mem) %{\n@@ -2834,1 +2831,1 @@\n-  enc_class aarch64_enc_ldrsb(iRegI dst, memory1 mem) %{\n+  enc_class aarch64_enc_ldrsb(iRegI dst, memory mem) %{\n@@ -2842,1 +2839,1 @@\n-  enc_class aarch64_enc_ldrb(iRegI dst, memory1 mem) %{\n+  enc_class aarch64_enc_ldrb(iRegI dst, memory mem) %{\n@@ -2850,1 +2847,1 @@\n-  enc_class aarch64_enc_ldrb(iRegL dst, memory1 mem) %{\n+  enc_class aarch64_enc_ldrb(iRegL dst, memory mem) %{\n@@ -2858,1 +2855,1 @@\n-  enc_class aarch64_enc_ldrshw(iRegI dst, memory2 mem) %{\n+  enc_class aarch64_enc_ldrshw(iRegI dst, memory mem) %{\n@@ -2866,1 +2863,1 @@\n-  enc_class aarch64_enc_ldrsh(iRegI dst, memory2 mem) %{\n+  enc_class aarch64_enc_ldrsh(iRegI dst, memory mem) %{\n@@ -2874,1 +2871,1 @@\n-  enc_class aarch64_enc_ldrh(iRegI dst, memory2 mem) %{\n+  enc_class aarch64_enc_ldrh(iRegI dst, memory mem) %{\n@@ -2882,1 +2879,1 @@\n-  enc_class aarch64_enc_ldrh(iRegL dst, memory2 mem) %{\n+  enc_class aarch64_enc_ldrh(iRegL dst, memory mem) %{\n@@ -2890,1 +2887,1 @@\n-  enc_class aarch64_enc_ldrw(iRegI dst, memory4 mem) %{\n+  enc_class aarch64_enc_ldrw(iRegI dst, memory mem) %{\n@@ -2898,1 +2895,1 @@\n-  enc_class aarch64_enc_ldrw(iRegL dst, memory4 mem) %{\n+  enc_class aarch64_enc_ldrw(iRegL dst, memory mem) %{\n@@ -2906,1 +2903,1 @@\n-  enc_class aarch64_enc_ldrsw(iRegL dst, memory4 mem) %{\n+  enc_class aarch64_enc_ldrsw(iRegL dst, memory mem) %{\n@@ -2914,1 +2911,1 @@\n-  enc_class aarch64_enc_ldr(iRegL dst, memory8 mem) %{\n+  enc_class aarch64_enc_ldr(iRegL dst, memory mem) %{\n@@ -2922,1 +2919,1 @@\n-  enc_class aarch64_enc_ldrs(vRegF dst, memory4 mem) %{\n+  enc_class aarch64_enc_ldrs(vRegF dst, memory mem) %{\n@@ -2930,1 +2927,1 @@\n-  enc_class aarch64_enc_ldrd(vRegD dst, memory8 mem) %{\n+  enc_class aarch64_enc_ldrd(vRegD dst, memory mem) %{\n@@ -2938,1 +2935,1 @@\n-  enc_class aarch64_enc_strb(iRegI src, memory1 mem) %{\n+  enc_class aarch64_enc_strb(iRegI src, memory mem) %{\n@@ -2946,1 +2943,1 @@\n-  enc_class aarch64_enc_strb0(memory1 mem) %{\n+  enc_class aarch64_enc_strb0(memory mem) %{\n@@ -2953,1 +2950,1 @@\n-  enc_class aarch64_enc_strh(iRegI src, memory2 mem) %{\n+  enc_class aarch64_enc_strh(iRegI src, memory mem) %{\n@@ -2961,1 +2958,1 @@\n-  enc_class aarch64_enc_strh0(memory2 mem) %{\n+  enc_class aarch64_enc_strh0(memory mem) %{\n@@ -2968,1 +2965,1 @@\n-  enc_class aarch64_enc_strw(iRegI src, memory4 mem) %{\n+  enc_class aarch64_enc_strw(iRegI src, memory mem) %{\n@@ -2976,1 +2973,1 @@\n-  enc_class aarch64_enc_strw0(memory4 mem) %{\n+  enc_class aarch64_enc_strw0(memory mem) %{\n@@ -2983,1 +2980,1 @@\n-  enc_class aarch64_enc_str(iRegL src, memory8 mem) %{\n+  enc_class aarch64_enc_str(iRegL src, memory mem) %{\n@@ -2998,1 +2995,1 @@\n-  enc_class aarch64_enc_str0(memory8 mem) %{\n+  enc_class aarch64_enc_str0(memory mem) %{\n@@ -3005,1 +3002,1 @@\n-  enc_class aarch64_enc_strs(vRegF src, memory4 mem) %{\n+  enc_class aarch64_enc_strs(vRegF src, memory mem) %{\n@@ -3013,1 +3010,1 @@\n-  enc_class aarch64_enc_strd(vRegD src, memory8 mem) %{\n+  enc_class aarch64_enc_strd(vRegD src, memory mem) %{\n@@ -3021,1 +3018,1 @@\n-  enc_class aarch64_enc_strb0_ordered(memory4 mem) %{\n+  enc_class aarch64_enc_strb0_ordered(memory mem) %{\n@@ -3223,1 +3220,1 @@\n-  enc_class aarch64_enc_ldaxr(iRegL dst, memory8 mem) %{\n+  enc_class aarch64_enc_ldaxr(iRegL dst, memory mem) %{\n@@ -3251,1 +3248,1 @@\n-  enc_class aarch64_enc_stlxr(iRegLNoSp src, memory8 mem) %{\n+  enc_class aarch64_enc_stlxr(iRegLNoSp src, memory mem) %{\n@@ -3355,1 +3352,5 @@\n-      __ prfm(Address(base, disp), PSTL1KEEP);\n+      \/\/ Fix up any out-of-range offsets.\n+      assert_different_registers(rscratch1, base);\n+      Address addr = Address(base, disp);\n+      addr = __ legitimize_address(addr, 8, rscratch1);\n+      __ prfm(addr, PSTL1KEEP);\n@@ -4175,22 +4176,2 @@\n-\/\/ Offset for scaled or unscaled immediate loads and stores\n-operand immIOffset1()\n-%{\n-  predicate(Address::offset_ok_for_immed(n->get_int(), 0));\n-  match(ConI);\n-\n-  op_cost(0);\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n-\n-operand immIOffset2()\n-%{\n-  predicate(Address::offset_ok_for_immed(n->get_int(), 1));\n-  match(ConI);\n-\n-  op_cost(0);\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n-\n-operand immIOffset4()\n+\/\/ Offset for immediate loads and stores\n+operand immIOffset()\n@@ -4198,1 +4179,1 @@\n-  predicate(Address::offset_ok_for_immed(n->get_int(), 2));\n+  predicate(n->get_int() >= -256 && n->get_int() <= 65520);\n@@ -4206,1 +4187,1 @@\n-operand immIOffset8()\n+operand immLOffset()\n@@ -4208,61 +4189,1 @@\n-  predicate(Address::offset_ok_for_immed(n->get_int(), 3));\n-  match(ConI);\n-\n-  op_cost(0);\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n-\n-operand immIOffset16()\n-%{\n-  predicate(Address::offset_ok_for_immed(n->get_int(), 4));\n-  match(ConI);\n-\n-  op_cost(0);\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n-\n-operand immLoffset1()\n-%{\n-  predicate(Address::offset_ok_for_immed(n->get_long(), 0));\n-  match(ConL);\n-\n-  op_cost(0);\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n-\n-operand immLoffset2()\n-%{\n-  predicate(Address::offset_ok_for_immed(n->get_long(), 1));\n-  match(ConL);\n-\n-  op_cost(0);\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n-\n-operand immLoffset4()\n-%{\n-  predicate(Address::offset_ok_for_immed(n->get_long(), 2));\n-  match(ConL);\n-\n-  op_cost(0);\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n-\n-operand immLoffset8()\n-%{\n-  predicate(Address::offset_ok_for_immed(n->get_long(), 3));\n-  match(ConL);\n-\n-  op_cost(0);\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n-\n-operand immLoffset16()\n-%{\n-  predicate(Address::offset_ok_for_immed(n->get_long(), 4));\n+  predicate(n->get_long() >= -256 && n->get_long() <= 65520);\n@@ -5188,17 +5109,1 @@\n-operand indOffI1(iRegP reg, iRegN regn, immIOffset1 off)\n-%{\n-  predicate(!n->in(2)->is_DecodeN() || CompressedOops::shift() == 0);\n-  constraint(ALLOC_IN_RC(ptr_reg));\n-  match(AddP reg off);\n-  match(AddP (DecodeN regn) off);\n-  op_cost(0);\n-  format %{ \"[$reg, $off]\" %}\n-  interface(MEMORY_INTER) %{\n-    base($reg);\n-    index(0xffffffff);\n-    scale(0x0);\n-    disp($off);\n-  %}\n-%}\n-\n-operand indOffI2(iRegP reg, iRegN regn, immIOffset2 off)\n+operand indOffI(iRegP reg, immIOffset off)\n@@ -5206,1 +5111,0 @@\n-  predicate(!n->in(2)->is_DecodeN() || CompressedOops::shift() == 0);\n@@ -5209,1 +5113,0 @@\n-  match(AddP (DecodeN regn) off);\n@@ -5220,111 +5123,1 @@\n-operand indOffI4(iRegP reg, iRegN regn, immIOffset4 off)\n-%{\n-  predicate(!n->in(2)->is_DecodeN() || CompressedOops::shift() == 0);\n-  constraint(ALLOC_IN_RC(ptr_reg));\n-  match(AddP reg off);\n-  match(AddP (DecodeN regn) off);\n-  op_cost(0);\n-  format %{ \"[$reg, $off]\" %}\n-  interface(MEMORY_INTER) %{\n-    base($reg);\n-    index(0xffffffff);\n-    scale(0x0);\n-    disp($off);\n-  %}\n-%}\n-\n-operand indOffI8(iRegP reg, iRegN regn, immIOffset8 off)\n-%{\n-  predicate(!n->in(2)->is_DecodeN() || CompressedOops::shift() == 0);\n-  constraint(ALLOC_IN_RC(ptr_reg));\n-  match(AddP reg off);\n-  match(AddP (DecodeN regn) off);\n-  op_cost(0);\n-  format %{ \"[$reg, $off]\" %}\n-  interface(MEMORY_INTER) %{\n-    base($reg);\n-    index(0xffffffff);\n-    scale(0x0);\n-    disp($off);\n-  %}\n-%}\n-\n-operand indOffI16(iRegP reg, immIOffset16 off)\n-%{\n-  constraint(ALLOC_IN_RC(ptr_reg));\n-  match(AddP reg off);\n-  op_cost(0);\n-  format %{ \"[$reg, $off]\" %}\n-  interface(MEMORY_INTER) %{\n-    base($reg);\n-    index(0xffffffff);\n-    scale(0x0);\n-    disp($off);\n-  %}\n-%}\n-\n-operand indOffL1(iRegP reg, iRegN regn, immLoffset1 off)\n-%{\n-  predicate(!n->in(2)->is_DecodeN() || CompressedOops::shift() == 0);\n-  constraint(ALLOC_IN_RC(ptr_reg));\n-  match(AddP reg off);\n-  match(AddP (DecodeN regn) off);\n-  op_cost(0);\n-  format %{ \"[$reg, $off]\" %}\n-  interface(MEMORY_INTER) %{\n-    base($reg);\n-    index(0xffffffff);\n-    scale(0x0);\n-    disp($off);\n-  %}\n-%}\n-\n-operand indOffL2(iRegP reg, iRegN regn, immLoffset2 off)\n-%{\n-  predicate(!n->in(2)->is_DecodeN() || CompressedOops::shift() == 0);\n-  constraint(ALLOC_IN_RC(ptr_reg));\n-  match(AddP reg off);\n-  match(AddP (DecodeN regn) off);\n-  op_cost(0);\n-  format %{ \"[$reg, $off]\" %}\n-  interface(MEMORY_INTER) %{\n-    base($reg);\n-    index(0xffffffff);\n-    scale(0x0);\n-    disp($off);\n-  %}\n-%}\n-\n-operand indOffL4(iRegP reg, iRegN regn, immLoffset4 off)\n-%{\n-  predicate(!n->in(2)->is_DecodeN() || CompressedOops::shift() == 0);\n-  constraint(ALLOC_IN_RC(ptr_reg));\n-  match(AddP reg off);\n-  match(AddP (DecodeN regn) off);\n-  op_cost(0);\n-  format %{ \"[$reg, $off]\" %}\n-  interface(MEMORY_INTER) %{\n-    base($reg);\n-    index(0xffffffff);\n-    scale(0x0);\n-    disp($off);\n-  %}\n-%}\n-\n-operand indOffL8(iRegP reg, iRegN regn, immLoffset8 off)\n-%{\n-  predicate(!n->in(2)->is_DecodeN() || CompressedOops::shift() == 0);\n-  constraint(ALLOC_IN_RC(ptr_reg));\n-  match(AddP reg off);\n-  match(AddP (DecodeN regn) off);\n-  op_cost(0);\n-  format %{ \"[$reg, $off]\" %}\n-  interface(MEMORY_INTER) %{\n-    base($reg);\n-    index(0xffffffff);\n-    scale(0x0);\n-    disp($off);\n-  %}\n-%}\n-\n-operand indOffL16(iRegP reg, immLoffset16 off)\n+operand indOffL(iRegP reg, immLOffset off)\n@@ -5419,0 +5212,31 @@\n+operand indOffIN(iRegN reg, immIOffset off)\n+%{\n+  predicate(CompressedOops::shift() == 0);\n+  constraint(ALLOC_IN_RC(ptr_reg));\n+  match(AddP (DecodeN reg) off);\n+  op_cost(0);\n+  format %{ \"[$reg, $off]\\t# narrow\" %}\n+  interface(MEMORY_INTER) %{\n+    base($reg);\n+    index(0xffffffff);\n+    scale(0x0);\n+    disp($off);\n+  %}\n+%}\n+\n+operand indOffLN(iRegN reg, immLOffset off)\n+%{\n+  predicate(CompressedOops::shift() == 0);\n+  constraint(ALLOC_IN_RC(ptr_reg));\n+  match(AddP (DecodeN reg) off);\n+  op_cost(0);\n+  format %{ \"[$reg, $off]\\t# narrow\" %}\n+  interface(MEMORY_INTER) %{\n+    base($reg);\n+    index(0xffffffff);\n+    scale(0x0);\n+    disp($off);\n+  %}\n+%}\n+\n+\n@@ -5636,4 +5460,1 @@\n-opclass vmem2(indirect, indIndex, indOffI2, indOffL2);\n-opclass vmem4(indirect, indIndex, indOffI4, indOffL4);\n-opclass vmem8(indirect, indIndex, indOffI8, indOffL8);\n-opclass vmem16(indirect, indIndex, indOffI16, indOffL16);\n+opclass vmem(indirect, indIndex, indOffI, indOffL, indOffIN, indOffLN);\n@@ -5651,16 +5472,2 @@\n-opclass memory1(indirect, indIndexScaled, indIndexScaledI2L, indIndexI2L, indIndex, indOffI1, indOffL1,\n-                indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN);\n-\n-opclass memory2(indirect, indIndexScaled, indIndexScaledI2L, indIndexI2L, indIndex, indOffI2, indOffL2,\n-                indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN);\n-\n-opclass memory4(indirect, indIndexScaled, indIndexScaledI2L, indIndexI2L, indIndex, indOffI4, indOffL4,\n-                indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN);\n-\n-opclass memory8(indirect, indIndexScaled, indIndexScaledI2L, indIndexI2L, indIndex, indOffI8, indOffL8,\n-                indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN);\n-\n-\/\/ All of the memory operands. For the pipeline description.\n-opclass memory(indirect, indIndexScaled, indIndexScaledI2L, indIndexI2L, indIndex,\n-               indOffI1, indOffL1, indOffI2, indOffL2, indOffI4, indOffL4, indOffI8, indOffL8,\n-               indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN);\n+opclass memory(indirect, indIndexScaled, indIndexScaledI2L, indIndexI2L, indIndex, indOffI, indOffL,\n+               indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN, indOffIN, indOffLN);\n@@ -6368,1 +6175,1 @@\n-instruct loadB(iRegINoSp dst, memory1 mem)\n+instruct loadB(iRegINoSp dst, memory mem)\n@@ -6382,1 +6189,1 @@\n-instruct loadB2L(iRegLNoSp dst, memory1 mem)\n+instruct loadB2L(iRegLNoSp dst, memory mem)\n@@ -6396,1 +6203,1 @@\n-instruct loadUB(iRegINoSp dst, memory1 mem)\n+instruct loadUB(iRegINoSp dst, memory mem)\n@@ -6410,1 +6217,1 @@\n-instruct loadUB2L(iRegLNoSp dst, memory1 mem)\n+instruct loadUB2L(iRegLNoSp dst, memory mem)\n@@ -6424,1 +6231,1 @@\n-instruct loadS(iRegINoSp dst, memory2 mem)\n+instruct loadS(iRegINoSp dst, memory mem)\n@@ -6438,1 +6245,1 @@\n-instruct loadS2L(iRegLNoSp dst, memory2 mem)\n+instruct loadS2L(iRegLNoSp dst, memory mem)\n@@ -6452,1 +6259,1 @@\n-instruct loadUS(iRegINoSp dst, memory2 mem)\n+instruct loadUS(iRegINoSp dst, memory mem)\n@@ -6466,1 +6273,1 @@\n-instruct loadUS2L(iRegLNoSp dst, memory2 mem)\n+instruct loadUS2L(iRegLNoSp dst, memory mem)\n@@ -6480,1 +6287,1 @@\n-instruct loadI(iRegINoSp dst, memory4 mem)\n+instruct loadI(iRegINoSp dst, memory mem)\n@@ -6494,1 +6301,1 @@\n-instruct loadI2L(iRegLNoSp dst, memory4 mem)\n+instruct loadI2L(iRegLNoSp dst, memory mem)\n@@ -6508,1 +6315,1 @@\n-instruct loadUI2L(iRegLNoSp dst, memory4 mem, immL_32bits mask)\n+instruct loadUI2L(iRegLNoSp dst, memory mem, immL_32bits mask)\n@@ -6522,1 +6329,1 @@\n-instruct loadL(iRegLNoSp dst, memory8 mem)\n+instruct loadL(iRegLNoSp dst, memory mem)\n@@ -6536,1 +6343,1 @@\n-instruct loadRange(iRegINoSp dst, memory4 mem)\n+instruct loadRange(iRegINoSp dst, memory mem)\n@@ -6549,1 +6356,1 @@\n-instruct loadP(iRegPNoSp dst, memory8 mem)\n+instruct loadP(iRegPNoSp dst, memory mem)\n@@ -6563,1 +6370,1 @@\n-instruct loadN(iRegNNoSp dst, memory4 mem)\n+instruct loadN(iRegNNoSp dst, memory mem)\n@@ -6577,1 +6384,1 @@\n-instruct loadKlass(iRegPNoSp dst, memory8 mem)\n+instruct loadKlass(iRegPNoSp dst, memory mem)\n@@ -6591,1 +6398,1 @@\n-instruct loadNKlass(iRegNNoSp dst, memory4 mem)\n+instruct loadNKlass(iRegNNoSp dst, memory mem)\n@@ -6605,1 +6412,1 @@\n-instruct loadF(vRegF dst, memory4 mem)\n+instruct loadF(vRegF dst, memory mem)\n@@ -6619,1 +6426,1 @@\n-instruct loadD(vRegD dst, memory8 mem)\n+instruct loadD(vRegD dst, memory mem)\n@@ -6823,1 +6630,1 @@\n-instruct storeimmCM0(immI0 zero, memory1 mem)\n+instruct storeimmCM0(immI0 zero, memory mem)\n@@ -6838,1 +6645,1 @@\n-instruct storeimmCM0_ordered(immI0 zero, memory1 mem)\n+instruct storeimmCM0_ordered(immI0 zero, memory mem)\n@@ -6853,1 +6660,1 @@\n-instruct storeB(iRegIorL2I src, memory1 mem)\n+instruct storeB(iRegIorL2I src, memory mem)\n@@ -6867,1 +6674,1 @@\n-instruct storeimmB0(immI0 zero, memory1 mem)\n+instruct storeimmB0(immI0 zero, memory mem)\n@@ -6881,1 +6688,1 @@\n-instruct storeC(iRegIorL2I src, memory2 mem)\n+instruct storeC(iRegIorL2I src, memory mem)\n@@ -6894,1 +6701,1 @@\n-instruct storeimmC0(immI0 zero, memory2 mem)\n+instruct storeimmC0(immI0 zero, memory mem)\n@@ -6909,1 +6716,1 @@\n-instruct storeI(iRegIorL2I src, memory4 mem)\n+instruct storeI(iRegIorL2I src, memory mem)\n@@ -6922,1 +6729,1 @@\n-instruct storeimmI0(immI0 zero, memory4 mem)\n+instruct storeimmI0(immI0 zero, memory mem)\n@@ -6936,1 +6743,1 @@\n-instruct storeL(iRegL src, memory8 mem)\n+instruct storeL(iRegL src, memory mem)\n@@ -6950,1 +6757,1 @@\n-instruct storeimmL0(immL0 zero, memory8 mem)\n+instruct storeimmL0(immL0 zero, memory mem)\n@@ -6964,1 +6771,1 @@\n-instruct storeP(iRegP src, memory8 mem)\n+instruct storeP(iRegP src, memory mem)\n@@ -6978,1 +6785,1 @@\n-instruct storeimmP0(immP0 zero, memory8 mem)\n+instruct storeimmP0(immP0 zero, memory mem)\n@@ -6992,1 +6799,1 @@\n-instruct storeN(iRegN src, memory4 mem)\n+instruct storeN(iRegN src, memory mem)\n@@ -7005,1 +6812,1 @@\n-instruct storeImmN0(immN0 zero, memory4 mem)\n+instruct storeImmN0(immN0 zero, memory mem)\n@@ -7019,1 +6826,1 @@\n-instruct storeF(vRegF src, memory4 mem)\n+instruct storeF(vRegF src, memory mem)\n@@ -7036,1 +6843,1 @@\n-instruct storeD(vRegD src, memory8 mem)\n+instruct storeD(vRegD src, memory mem)\n@@ -7050,1 +6857,1 @@\n-instruct storeNKlass(iRegN src, memory4 mem)\n+instruct storeNKlass(iRegN src, memory mem)\n@@ -7069,1 +6876,1 @@\n-instruct prefetchalloc( memory8 mem ) %{\n+instruct prefetchalloc( memory mem ) %{\n@@ -7638,1 +7445,1 @@\n-instruct popCountI_mem(iRegINoSp dst, memory4 mem, vRegF tmp) %{\n+instruct popCountI_mem(iRegINoSp dst, memory mem, vRegF tmp) %{\n@@ -7679,1 +7486,1 @@\n-instruct popCountL_mem(iRegINoSp dst, memory8 mem, vRegD tmp) %{\n+instruct popCountL_mem(iRegINoSp dst, memory mem, vRegD tmp) %{\n@@ -16815,1 +16622,1 @@\n-instruct compressBitsI_memcon(iRegINoSp dst, memory4 mem, immI mask,\n+instruct compressBitsI_memcon(iRegINoSp dst, memory mem, immI mask,\n@@ -16852,1 +16659,1 @@\n-instruct compressBitsL_memcon(iRegLNoSp dst, memory8 mem, immL mask,\n+instruct compressBitsL_memcon(iRegLNoSp dst, memory mem, immL mask,\n@@ -16889,1 +16696,1 @@\n-instruct expandBitsI_memcon(iRegINoSp dst, memory4 mem, immI mask,\n+instruct expandBitsI_memcon(iRegINoSp dst, memory mem, immI mask,\n@@ -16927,1 +16734,1 @@\n-instruct expandBitsL_memcon(iRegINoSp dst, memory8 mem, immL mask,\n+instruct expandBitsL_memcon(iRegINoSp dst, memory mem, immL mask,\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":123,"deletions":316,"binary":false,"changes":439,"status":"modified"},{"patch":"@@ -348,1 +348,1 @@\n-instruct loadV2(vReg dst, vmem2 mem) %{\n+instruct loadV2(vReg dst, vmem mem) %{\n@@ -357,1 +357,1 @@\n-instruct storeV2(vReg src, vmem2 mem) %{\n+instruct storeV2(vReg src, vmem mem) %{\n@@ -366,1 +366,1 @@\n-instruct loadV4(vReg dst, vmem4 mem) %{\n+instruct loadV4(vReg dst, vmem mem) %{\n@@ -375,1 +375,1 @@\n-instruct storeV4(vReg src, vmem4 mem) %{\n+instruct storeV4(vReg src, vmem mem) %{\n@@ -384,1 +384,1 @@\n-instruct loadV8(vReg dst, vmem8 mem) %{\n+instruct loadV8(vReg dst, vmem mem) %{\n@@ -393,1 +393,1 @@\n-instruct storeV8(vReg src, vmem8 mem) %{\n+instruct storeV8(vReg src, vmem mem) %{\n@@ -402,1 +402,1 @@\n-instruct loadV16(vReg dst, vmem16 mem) %{\n+instruct loadV16(vReg dst, vmem mem) %{\n@@ -411,1 +411,1 @@\n-instruct storeV16(vReg src, vmem16 mem) %{\n+instruct storeV16(vReg src, vmem mem) %{\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -341,1 +341,1 @@\n-instruct $1V$2(vReg $3, vmem$2 mem) %{\n+instruct $1V$2(vReg $3, vmem mem) %{\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-  enc_class aarch64_enc_$2($1 dst, memory$5 mem) %{dnl\n+  enc_class aarch64_enc_$2($1 dst, memory mem) %{dnl\n@@ -56,1 +56,1 @@\n-  enc_class aarch64_enc_$2($1 src, memory$5 mem) %{dnl\n+  enc_class aarch64_enc_$2($1 src, memory mem) %{dnl\n@@ -61,1 +61,1 @@\n-  enc_class aarch64_enc_$2`'0(memory$4 mem) %{\n+  enc_class aarch64_enc_$2`'0(memory mem) %{\n@@ -85,1 +85,1 @@\n-  enc_class aarch64_enc_strb0_ordered(memory4 mem) %{\n+  enc_class aarch64_enc_strb0_ordered(memory mem) %{\n","filename":"src\/hotspot\/cpu\/aarch64\/ad_encode.m4","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-instruct xLoadP(iRegPNoSp dst, memory8 mem, rFlagsReg cr)\n+instruct xLoadP(iRegPNoSp dst, memory mem, rFlagsReg cr)\n@@ -65,1 +65,7 @@\n-    const Address ref_addr = mem2address($mem->opcode(), as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+    Address ref_addr = mem2address($mem->opcode(), as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+    if (ref_addr.getMode() == Address::base_plus_offset) {\n+      \/\/ Fix up any out-of-range offsets.\n+      assert_different_registers(rscratch1, as_Register($mem$$base));\n+      assert_different_registers(rscratch1, $dst$$Register);\n+      ref_addr = __ legitimize_address(ref_addr, 8, rscratch1);\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/x\/x_aarch64.ad","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,1 +103,1 @@\n-instruct zLoadP(iRegPNoSp dst, memory8 mem, rFlagsReg cr)\n+instruct zLoadP(iRegPNoSp dst, memory mem, rFlagsReg cr)\n@@ -114,1 +114,7 @@\n-    const Address ref_addr = mem2address($mem->opcode(), as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+    Address ref_addr = mem2address($mem->opcode(), as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+    if (ref_addr.getMode() == Address::base_plus_offset) {\n+      \/\/ Fix up any out-of-range offsets.\n+      assert_different_registers(rscratch2, as_Register($mem$$base));\n+      assert_different_registers(rscratch2, $dst$$Register);\n+      ref_addr = __ legitimize_address(ref_addr, 8, rscratch2);\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/z_aarch64.ad","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -252,9 +252,0 @@\n-    \/\/ If there are multiple arguments, we need to insert\n-    \/\/ parentheses for predicate so that these arguments\n-    \/\/ can be chained together logically with \"&&\".\n-    if (op->_matrule &&\n-        !(op->_matrule->_lChild == nullptr &&\n-          op->_matrule->_rChild == nullptr)) {\n-      pred = InstructForm::build_predicate(op->_matrule, op->_predicate);\n-    }\n-\n@@ -308,1 +299,1 @@\n-    Predicate* pred  = InstructForm::build_predicate(instr->_matrule, instr->_predicate);\n+    Predicate *pred  =  instr->build_predicate();\n","filename":"src\/hotspot\/share\/adlc\/archDesc.cpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1528,5 +1528,4 @@\n-\/\/ Build predicates for instructions or operands.\n-\/\/\n-\/\/ If the user uses the same operand name twice, we need to check that\n-\/\/ the operands are pointer-equivalent in the DFA during the labeling process.\n-Predicate* InstructForm::build_predicate(MatchRule* matrule, Predicate* predicate) {\n+\/\/ Build instruction predicates.  If the user uses the same operand name\n+\/\/ twice, we need to check that the operands are pointer-eequivalent in\n+\/\/ the DFA during the labeling process.\n+Predicate *InstructForm::build_predicate() {\n@@ -1537,2 +1536,2 @@\n-  MatchNode* mnode =\n-    strcmp(matrule->_opType, \"Set\") ? matrule : matrule->_rChild;\n+  MatchNode *mnode =\n+    strcmp(_matrule->_opType, \"Set\") ? _matrule : _matrule->_rChild;\n@@ -1543,1 +1542,1 @@\n-  if (predicate) {\n+  if (_predicate) {\n@@ -1546,1 +1545,1 @@\n-    strncpy(s, predicate->_pred, buflen - strlen(s) - 1);\n+    strncpy(s, _predicate->_pred, buflen - strlen(s) - 1);\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -224,5 +224,4 @@\n-  \/\/ Build predicates for instructions or operands.\n-  \/\/\n-  \/\/ If the user uses the same operand name twice, we need to check that the\n-  \/\/ operands are pointer-equivalent in the DFA during the labeling process.\n-  static Predicate* build_predicate(MatchRule* matrule, Predicate* predicate);\n+  \/\/ Build instruction predicates.  If the user uses the same operand name\n+  \/\/ twice, we need to check that the operands are pointer-eequivalent in\n+  \/\/ the DFA during the labeling process.\n+  Predicate *build_predicate();\n","filename":"src\/hotspot\/share\/adlc\/formssel.hpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -4319,1 +4319,1 @@\n-      Predicate* pred  = InstructForm::build_predicate(instr->_matrule, instr->_predicate);\n+      Predicate *pred  =  instr->build_predicate();\n@@ -4340,1 +4340,1 @@\n-          Predicate* pred2  = InstructForm::build_predicate(instr2->_matrule, instr2->_predicate);\n+          Predicate *pred2  =  instr2->build_predicate();\n","filename":"src\/hotspot\/share\/adlc\/output_c.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,9 +49,0 @@\n-    public static long lseed = 1;\n-    public static int iseed = 2;\n-    public static short sseed = 3;\n-    public static byte bseed = 4;\n-    public static long lres = lseed;\n-    public static int ires = iseed;\n-    public static short sres = sseed;\n-    public static byte bres = bseed;\n-\n@@ -62,1 +53,1 @@\n-        private static final long data;\n+        private static final long lseed = 1;\n@@ -72,1 +63,0 @@\n-            lres += UNSAFE.getLongUnaligned(BYTES, 1030);\n@@ -74,2 +64,1 @@\n-            UNSAFE.putLongUnaligned(BYTES, 127, lres);\n-            lres += UNSAFE.getLongUnaligned(BYTES, 127);\n+            UNSAFE.putLongUnaligned(BYTES, 127, rawdata+lseed);\n@@ -77,2 +66,1 @@\n-            UNSAFE.putLongUnaligned(BYTES, 1096, lres);\n-            data = UNSAFE.getLongUnaligned(BYTES, 1096);\n+            UNSAFE.putLongUnaligned(BYTES, 1096, rawdata-lseed);\n@@ -87,1 +75,1 @@\n-        private static final int data;\n+        private static final int iseed = 2;\n@@ -96,1 +84,0 @@\n-            ires += UNSAFE.getIntUnaligned(BYTES, 274);\n@@ -98,2 +85,1 @@\n-            UNSAFE.putIntUnaligned(BYTES, 255, ires);\n-            ires += UNSAFE.getIntUnaligned(BYTES, 255);\n+            UNSAFE.putIntUnaligned(BYTES, 255, rawdata + iseed);\n@@ -101,2 +87,1 @@\n-            UNSAFE.putIntUnaligned(BYTES, 528, ires);\n-            data = UNSAFE.getIntUnaligned(BYTES, 528);\n+            UNSAFE.putIntUnaligned(BYTES, 528, rawdata - iseed);\n@@ -111,1 +96,1 @@\n-        private static final short data;\n+        private static final short sseed = 3;\n@@ -120,1 +105,0 @@\n-            sres = (short) (sres + UNSAFE.getShortUnaligned(BYTES, 257));\n@@ -122,2 +106,1 @@\n-            UNSAFE.putShortUnaligned(BYTES, 253, sres);\n-            sres = (short) (sres + UNSAFE.getShortUnaligned(BYTES, 253));\n+            UNSAFE.putShortUnaligned(BYTES, 253, (short) (rawdata + sseed));\n@@ -125,2 +108,1 @@\n-            UNSAFE.putShortUnaligned(BYTES, 272, sres);\n-            data = UNSAFE.getShortUnaligned(BYTES, 272);\n+            UNSAFE.putShortUnaligned(BYTES, 272, (short) (rawdata - sseed));\n@@ -135,1 +117,1 @@\n-        private static final byte data;\n+        private static final byte bseed = 4;\n@@ -144,1 +126,0 @@\n-            bres = (byte) (bres + UNSAFE.getByte(BYTES, 272));\n@@ -146,2 +127,1 @@\n-            UNSAFE.putByte(BYTES, 53, bres);\n-            bres = (byte) (bres + UNSAFE.getByte(BYTES, 53));\n+            UNSAFE.putByte(BYTES, 53, (byte) (rawdata + bseed));\n@@ -149,2 +129,1 @@\n-            UNSAFE.putByte(BYTES, 1027, bres);\n-            data = UNSAFE.getByte(BYTES, 1027);\n+            UNSAFE.putByte(BYTES, 1027, (byte) (rawdata - bseed));\n@@ -157,1 +136,3 @@\n-        Asserts.assertEquals(ta.data, (ta.rawdata + lseed) * 2, \"putUnaligned long failed!\");\n+        Asserts.assertEquals(UNSAFE.getLongUnaligned(ta.BYTES, 1030), ta.rawdata, \"putUnaligned long failed!\");\n+        Asserts.assertEquals(UNSAFE.getLongUnaligned(ta.BYTES, 127), ta.rawdata + ta.lseed, \"putUnaligned long failed!\");\n+        Asserts.assertEquals(UNSAFE.getLongUnaligned(ta.BYTES, 1096), ta.rawdata - ta.lseed, \"putUnaligned long failed!\");\n@@ -160,1 +141,3 @@\n-        Asserts.assertEquals(tb.data, (tb.rawdata + iseed) * 2, \"putUnaligned int failed!\");\n+        Asserts.assertEquals(UNSAFE.getIntUnaligned(tb.BYTES, 274), tb.rawdata, \"putUnaligned int failed!\");\n+        Asserts.assertEquals(UNSAFE.getIntUnaligned(tb.BYTES, 255), tb.rawdata + tb.iseed, \"putUnaligned int failed!\");\n+        Asserts.assertEquals(UNSAFE.getIntUnaligned(tb.BYTES, 528), tb.rawdata - tb.iseed, \"putUnaligned int failed!\");\n@@ -163,1 +146,3 @@\n-        Asserts.assertEquals(tc.data, (short) (((short) (tc.rawdata + sseed)) * 2), \"putUnaligned short failed!\");\n+        Asserts.assertEquals(UNSAFE.getShortUnaligned(tc.BYTES, 257), tc.rawdata, \"putUnaligned short failed!\");\n+        Asserts.assertEquals(UNSAFE.getShortUnaligned(tc.BYTES, 253), (short) (tc.rawdata + tc.sseed), \"putUnaligned short failed!\");\n+        Asserts.assertEquals(UNSAFE.getShortUnaligned(tc.BYTES, 272), (short) (tc.rawdata - tc.sseed), \"putUnaligned short failed!\");\n@@ -166,1 +151,3 @@\n-        Asserts.assertEquals(td.data, (byte) (((byte) (td.rawdata + bseed)) * 2), \"put byte failed!\");\n+        Asserts.assertEquals(UNSAFE.getByte(td.BYTES, 272), td.rawdata, \"put byte failed!\");\n+        Asserts.assertEquals(UNSAFE.getByte(td.BYTES, 53), (byte) (td.rawdata + td.bseed), \"put byte failed!\");\n+        Asserts.assertEquals(UNSAFE.getByte(td.BYTES, 1027), (byte) (td.rawdata - td.bseed), \"put byte failed!\");\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestUnalignedAccess.java","additions":24,"deletions":37,"binary":false,"changes":61,"status":"modified"}]}