{"files":[{"patch":"@@ -2723,0 +2723,4 @@\n+      \/\/ If we get an out-of-range offset it is a bug in the compiler,\n+      \/\/ so we assert here.\n+      assert(Address::offset_ok_for_immed(addr.offset(), exact_log2(size_in_memory)),\n+             \"c2 compiler bug\");\n@@ -4172,10 +4176,0 @@\n-operand immIOffset()\n-%{\n-  predicate(Address::offset_ok_for_immed(n->get_int(), 0));\n-  match(ConI);\n-\n-  op_cost(0);\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n-\n@@ -4232,10 +4226,0 @@\n-operand immLoffset()\n-%{\n-  predicate(Address::offset_ok_for_immed(n->get_long(), 0));\n-  match(ConL);\n-\n-  op_cost(0);\n-  format %{ %}\n-  interface(CONST_INTER);\n-%}\n-\n@@ -5204,1 +5188,1 @@\n-operand indOffI1(iRegP reg, immIOffset1 off)\n+operand indOffI1(iRegP reg, iRegN regn, immIOffset1 off)\n@@ -5206,0 +5190,1 @@\n+  predicate(!n->in(2)->is_DecodeN() || CompressedOops::shift() == 0);\n@@ -5208,0 +5193,1 @@\n+  match(AddP (DecodeN regn) off);\n@@ -5218,1 +5204,1 @@\n-operand indOffI2(iRegP reg, immIOffset2 off)\n+operand indOffI2(iRegP reg, iRegN regn, immIOffset2 off)\n@@ -5220,0 +5206,1 @@\n+  predicate(!n->in(2)->is_DecodeN() || CompressedOops::shift() == 0);\n@@ -5222,0 +5209,1 @@\n+  match(AddP (DecodeN regn) off);\n@@ -5232,1 +5220,1 @@\n-operand indOffI4(iRegP reg, immIOffset4 off)\n+operand indOffI4(iRegP reg, iRegN regn, immIOffset4 off)\n@@ -5234,0 +5222,1 @@\n+  predicate(!n->in(2)->is_DecodeN() || CompressedOops::shift() == 0);\n@@ -5236,0 +5225,1 @@\n+  match(AddP (DecodeN regn) off);\n@@ -5246,1 +5236,1 @@\n-operand indOffI8(iRegP reg, immIOffset8 off)\n+operand indOffI8(iRegP reg, iRegN regn, immIOffset8 off)\n@@ -5248,0 +5238,1 @@\n+  predicate(!n->in(2)->is_DecodeN() || CompressedOops::shift() == 0);\n@@ -5250,0 +5241,1 @@\n+  match(AddP (DecodeN regn) off);\n@@ -5274,1 +5266,1 @@\n-operand indOffL1(iRegP reg, immLoffset1 off)\n+operand indOffL1(iRegP reg, iRegN regn, immLoffset1 off)\n@@ -5276,0 +5268,1 @@\n+  predicate(!n->in(2)->is_DecodeN() || CompressedOops::shift() == 0);\n@@ -5278,0 +5271,1 @@\n+  match(AddP (DecodeN regn) off);\n@@ -5288,1 +5282,1 @@\n-operand indOffL2(iRegP reg, immLoffset2 off)\n+operand indOffL2(iRegP reg, iRegN regn, immLoffset2 off)\n@@ -5290,0 +5284,1 @@\n+  predicate(!n->in(2)->is_DecodeN() || CompressedOops::shift() == 0);\n@@ -5292,0 +5287,1 @@\n+  match(AddP (DecodeN regn) off);\n@@ -5302,1 +5298,1 @@\n-operand indOffL4(iRegP reg, immLoffset4 off)\n+operand indOffL4(iRegP reg, iRegN regn, immLoffset4 off)\n@@ -5304,0 +5300,1 @@\n+  predicate(!n->in(2)->is_DecodeN() || CompressedOops::shift() == 0);\n@@ -5306,0 +5303,1 @@\n+  match(AddP (DecodeN regn) off);\n@@ -5316,1 +5314,1 @@\n-operand indOffL8(iRegP reg, immLoffset8 off)\n+operand indOffL8(iRegP reg, iRegN regn, immLoffset8 off)\n@@ -5318,0 +5316,1 @@\n+  predicate(!n->in(2)->is_DecodeN() || CompressedOops::shift() == 0);\n@@ -5320,0 +5319,1 @@\n+  match(AddP (DecodeN regn) off);\n@@ -5419,31 +5419,0 @@\n-operand indOffIN(iRegN reg, immIOffset off)\n-%{\n-  predicate(CompressedOops::shift() == 0);\n-  constraint(ALLOC_IN_RC(ptr_reg));\n-  match(AddP (DecodeN reg) off);\n-  op_cost(0);\n-  format %{ \"[$reg, $off]\\t# narrow\" %}\n-  interface(MEMORY_INTER) %{\n-    base($reg);\n-    index(0xffffffff);\n-    scale(0x0);\n-    disp($off);\n-  %}\n-%}\n-\n-operand indOffLN(iRegN reg, immLoffset off)\n-%{\n-  predicate(CompressedOops::shift() == 0);\n-  constraint(ALLOC_IN_RC(ptr_reg));\n-  match(AddP (DecodeN reg) off);\n-  op_cost(0);\n-  format %{ \"[$reg, $off]\\t# narrow\" %}\n-  interface(MEMORY_INTER) %{\n-    base($reg);\n-    index(0xffffffff);\n-    scale(0x0);\n-    disp($off);\n-  %}\n-%}\n-\n-\n@@ -5683,1 +5652,1 @@\n-               indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN);\n+                indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN);\n@@ -5686,1 +5655,1 @@\n-               indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN);\n+                indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN);\n@@ -5689,1 +5658,1 @@\n-               indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN, indOffIN, indOffLN);\n+                indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN);\n@@ -5692,1 +5661,1 @@\n-               indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN, indOffIN, indOffLN);\n+                indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN);\n@@ -5697,1 +5666,1 @@\n-               indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN, indOffIN, indOffLN);\n+               indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":33,"deletions":64,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -252,0 +252,9 @@\n+    \/\/ If there are multiple arguments, we need to insert\n+    \/\/ parentheses for predicate so that these arguments\n+    \/\/ can be chained together logically with \"&&\".\n+    if (op->_matrule &&\n+        !(op->_matrule->_lChild == nullptr &&\n+          op->_matrule->_rChild == nullptr)) {\n+      pred = InstructForm::build_predicate(op->_matrule, op->_predicate);\n+    }\n+\n@@ -299,1 +308,1 @@\n-    Predicate *pred  =  instr->build_predicate();\n+    Predicate* pred  = InstructForm::build_predicate(instr->_matrule, instr->_predicate);\n","filename":"src\/hotspot\/share\/adlc\/archDesc.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1528,4 +1528,5 @@\n-\/\/ Build instruction predicates.  If the user uses the same operand name\n-\/\/ twice, we need to check that the operands are pointer-eequivalent in\n-\/\/ the DFA during the labeling process.\n-Predicate *InstructForm::build_predicate() {\n+\/\/ Build predicates for instructions or operands.\n+\/\/\n+\/\/ If the user uses the same operand name twice, we need to check that\n+\/\/ the operands are pointer-equivalent in the DFA during the labeling process.\n+Predicate* InstructForm::build_predicate(MatchRule* matrule, Predicate* predicate) {\n@@ -1536,2 +1537,2 @@\n-  MatchNode *mnode =\n-    strcmp(_matrule->_opType, \"Set\") ? _matrule : _matrule->_rChild;\n+  MatchNode* mnode =\n+    strcmp(matrule->_opType, \"Set\") ? matrule : matrule->_rChild;\n@@ -1542,1 +1543,1 @@\n-  if (_predicate) {\n+  if (predicate) {\n@@ -1545,1 +1546,1 @@\n-    strncpy(s, _predicate->_pred, buflen - strlen(s) - 1);\n+    strncpy(s, predicate->_pred, buflen - strlen(s) - 1);\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -224,4 +224,5 @@\n-  \/\/ Build instruction predicates.  If the user uses the same operand name\n-  \/\/ twice, we need to check that the operands are pointer-eequivalent in\n-  \/\/ the DFA during the labeling process.\n-  Predicate *build_predicate();\n+  \/\/ Build predicates for instructions or operands.\n+  \/\/\n+  \/\/ If the user uses the same operand name twice, we need to check that the\n+  \/\/ operands are pointer-equivalent in the DFA during the labeling process.\n+  static Predicate* build_predicate(MatchRule* matrule, Predicate* predicate);\n","filename":"src\/hotspot\/share\/adlc\/formssel.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -4328,1 +4328,1 @@\n-      Predicate *pred  =  instr->build_predicate();\n+      Predicate* pred  = InstructForm::build_predicate(instr->_matrule, instr->_predicate);\n@@ -4349,1 +4349,1 @@\n-          Predicate *pred2  =  instr2->build_predicate();\n+          Predicate* pred2  = InstructForm::build_predicate(instr2->_matrule, instr2->_predicate);\n","filename":"src\/hotspot\/share\/adlc\/output_c.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}