{"files":[{"patch":"@@ -227,4 +227,0 @@\n-size_t ZArguments::heap_virtual_to_physical_ratio() {\n-  return ZVirtualToPhysicalRatio;\n-}\n-\n@@ -235,0 +231,4 @@\n+size_t ZArguments::heap_virtual_to_physical_ratio() {\n+  return ZVirtualToPhysicalRatio;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zArguments.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-  virtual size_t heap_virtual_to_physical_ratio();\n@@ -43,0 +42,1 @@\n+  virtual size_t heap_virtual_to_physical_ratio();\n","filename":"src\/hotspot\/share\/gc\/z\/zArguments.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,0 +62,13 @@\n+  product(double, ZYoungCompactionLimit, 25.0,                              \\\n+          \"Maximum allowed garbage in young pages\")                         \\\n+          range(0, 100)                                                     \\\n+                                                                            \\\n+  product(double, ZCollectionIntervalMinor, -1,                             \\\n+          \"Force Minor GC at a fixed time interval (in seconds)\")           \\\n+                                                                            \\\n+  product(double, ZCollectionIntervalMajor, -1,                             \\\n+          \"Force GC at a fixed time interval (in seconds)\")                 \\\n+                                                                            \\\n+  product(bool, ZCollectionIntervalOnly, false,                             \\\n+          \"Only use timers for GC heuristics\")                              \\\n+                                                                            \\\n@@ -88,13 +101,0 @@\n-  product(double, ZYoungCompactionLimit, 25.0,                              \\\n-          \"Maximum allowed garbage in young pages\")                         \\\n-          range(0, 100)                                                     \\\n-                                                                            \\\n-  product(double, ZCollectionIntervalMinor, -1,                             \\\n-          \"Force Minor GC at a fixed time interval (in seconds)\")           \\\n-                                                                            \\\n-  product(double, ZCollectionIntervalMajor, -1,                             \\\n-          \"Force GC at a fixed time interval (in seconds)\")                 \\\n-                                                                            \\\n-  product(bool, ZCollectionIntervalOnly, false,                             \\\n-          \"Only use timers for GC heuristics\")                              \\\n-                                                                            \\\n@@ -118,3 +118,0 @@\n-  develop(bool, ZVerifyOops, false,                                         \\\n-          \"Verify accessed oops\")                                           \\\n-                                                                            \\\n@@ -125,0 +122,3 @@\n+  develop(bool, ZVerifyOops, false,                                         \\\n+          \"Verify accessed oops\")                                           \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/z\/z_globals.hpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -91,3 +91,1 @@\n-inline oop stackChunkOopDesc::cont() const                {\n-  return jdk_internal_vm_StackChunk::cont(as_oop());\n-}\n+inline oop stackChunkOopDesc::cont() const                { return jdk_internal_vm_StackChunk::cont(as_oop()); }\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.inline.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n- * @requires vm.gc.ZGC\n+ * @requires vm.gc.Z\n","filename":"test\/hotspot\/jtreg\/gc\/TestAlwaysPreTouchBehavior.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,5 +36,5 @@\n- * @comment This test assumes that no allocation happens during the sleep loop,   \\\n- *          which is something that we can't guarantee. With ZGC we see test      \\\n- *          timeouts because the main thread allocates and waits for the GC,      \\\n- *          which waits for the CSLocker, which waits for the main thread.        \\\n- * @requires !vm.gc.Z\n+ * @comment This test assumes that no allocation happens during the sleep loop,\n+ *          which is something that we can't guarantee. With ZGC we see test\n+ *          timeouts because the main thread allocates and waits for the GC,\n+ *          which waits for the CSLocker, which waits for the main thread.\n+ * @requires vm.gc != \"Z\"\n","filename":"test\/hotspot\/jtreg\/gc\/cslocker\/TestCSLocker.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @test id=ZG\n+ * @test id=Z\n","filename":"test\/jdk\/java\/awt\/Graphics2D\/LargeWindowPaintTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @requires !vm.gc.Z\n+ * @requires vm.gc != \"Z\"\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/CloseRace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}