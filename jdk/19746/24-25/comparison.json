{"files":[{"patch":"@@ -265,1 +265,1 @@\n-instruct g1CompareAndExchangeP(iRegPNoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp tmp1, iRegPNoSp tmp2, iRegPNoSp tmp3, rFlagsReg cr)\n+instruct g1CompareAndExchangeP(iRegPNoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp tmp1, iRegPNoSp tmp2, rFlagsReg cr)\n@@ -269,1 +269,1 @@\n-  effect(TEMP res, TEMP tmp1, TEMP tmp2, TEMP tmp3, KILL cr);\n+  effect(TEMP res, TEMP tmp1, TEMP tmp2, KILL cr);\n@@ -281,2 +281,2 @@\n-                      $tmp2$$Register \/* tmp1 *\/,\n-                      $tmp3$$Register \/* tmp2 *\/,\n+                      $tmp1$$Register \/* tmp1 *\/,\n+                      $tmp2$$Register \/* tmp2 *\/,\n@@ -285,3 +285,1 @@\n-    __ mov($tmp1$$Register, $oldval$$Register);\n-    __ mov($tmp2$$Register, $newval$$Register);\n-    __ cmpxchg($mem$$Register, $tmp1$$Register, $tmp2$$Register, Assembler::xword,\n+    __ cmpxchg($mem$$Register, $oldval$$Register, $newval$$Register, Assembler::xword,\n@@ -291,1 +289,1 @@\n-                       $tmp2$$Register \/* new_val *\/,\n+                       $newval$$Register \/* new_val *\/,\n@@ -293,1 +291,1 @@\n-                       $tmp3$$Register \/* tmp2 *\/);\n+                       $tmp2$$Register \/* tmp2 *\/);\n@@ -300,1 +298,1 @@\n-instruct g1CompareAndExchangePAcq(iRegPNoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp tmp1, iRegPNoSp tmp2, iRegPNoSp tmp3, rFlagsReg cr)\n+instruct g1CompareAndExchangePAcq(iRegPNoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp tmp1, iRegPNoSp tmp2, rFlagsReg cr)\n@@ -304,1 +302,1 @@\n-  effect(TEMP res, TEMP tmp1, TEMP tmp2, TEMP tmp3, KILL cr);\n+  effect(TEMP res, TEMP tmp1, TEMP tmp2, KILL cr);\n@@ -316,2 +314,2 @@\n-                      $tmp2$$Register \/* tmp1 *\/,\n-                      $tmp3$$Register \/* tmp2 *\/,\n+                      $tmp1$$Register \/* tmp1 *\/,\n+                      $tmp2$$Register \/* tmp2 *\/,\n@@ -320,3 +318,1 @@\n-    __ mov($tmp1$$Register, $oldval$$Register);\n-    __ mov($tmp2$$Register, $newval$$Register);\n-    __ cmpxchg($mem$$Register, $tmp1$$Register, $tmp2$$Register, Assembler::xword,\n+    __ cmpxchg($mem$$Register, $oldval$$Register, $newval$$Register, Assembler::xword,\n@@ -326,1 +322,1 @@\n-                       $tmp2$$Register \/* new_val *\/,\n+                       $newval$$Register \/* new_val *\/,\n@@ -328,1 +324,1 @@\n-                       $tmp3$$Register \/* tmp2 *\/);\n+                       $tmp2$$Register \/* tmp2 *\/);\n@@ -352,3 +348,1 @@\n-    __ mov($tmp1$$Register, $oldval$$Register);\n-    __ mov($tmp2$$Register, $newval$$Register);\n-    __ cmpxchg($mem$$Register, $tmp1$$Register, $tmp2$$Register, Assembler::word,\n+    __ cmpxchg($mem$$Register, $oldval$$Register, $newval$$Register, Assembler::word,\n@@ -356,1 +350,1 @@\n-    __ decode_heap_oop($tmp2$$Register);\n+    __ decode_heap_oop($tmp1$$Register, $newval$$Register);\n@@ -359,2 +353,2 @@\n-                       $tmp2$$Register \/* new_val *\/,\n-                       $tmp1$$Register \/* tmp1 *\/,\n+                       $tmp1$$Register \/* new_val *\/,\n+                       $tmp2$$Register \/* tmp1 *\/,\n@@ -385,3 +379,1 @@\n-    __ mov($tmp1$$Register, $oldval$$Register);\n-    __ mov($tmp2$$Register, $newval$$Register);\n-    __ cmpxchg($mem$$Register, $tmp1$$Register, $tmp2$$Register, Assembler::word,\n+    __ cmpxchg($mem$$Register, $oldval$$Register, $newval$$Register, Assembler::word,\n@@ -389,1 +381,1 @@\n-    __ decode_heap_oop($tmp2$$Register);\n+    __ decode_heap_oop($tmp1$$Register, $newval$$Register);\n@@ -392,2 +384,2 @@\n-                       $tmp2$$Register \/* new_val *\/,\n-                       $tmp1$$Register \/* tmp1 *\/,\n+                       $tmp1$$Register \/* new_val *\/,\n+                       $tmp2$$Register \/* tmp1 *\/,\n@@ -401,1 +393,1 @@\n-instruct g1CompareAndSwapP(iRegINoSp res, indirect mem, iRegP newval, iRegPNoSp tmp1, iRegPNoSp tmp2, iRegPNoSp tmp3, iRegP oldval, rFlagsReg cr)\n+instruct g1CompareAndSwapP(iRegINoSp res, indirect mem, iRegP newval, iRegPNoSp tmp1, iRegPNoSp tmp2, iRegP oldval, rFlagsReg cr)\n@@ -406,1 +398,1 @@\n-  effect(TEMP res, TEMP tmp1, TEMP tmp2, TEMP tmp3, KILL cr);\n+  effect(TEMP res, TEMP tmp1, TEMP tmp2, KILL cr);\n@@ -416,2 +408,2 @@\n-                      $tmp2$$Register \/* tmp1 *\/,\n-                      $tmp3$$Register \/* tmp2 *\/,\n+                      $tmp1$$Register \/* tmp1 *\/,\n+                      $tmp2$$Register \/* tmp2 *\/,\n@@ -420,3 +412,1 @@\n-    __ mov($tmp1$$Register, $oldval$$Register);\n-    __ mov($tmp2$$Register, $newval$$Register);\n-    __ cmpxchg($mem$$Register, $tmp1$$Register, $tmp2$$Register, Assembler::xword,\n+    __ cmpxchg($mem$$Register, $oldval$$Register, $newval$$Register, Assembler::xword,\n@@ -427,1 +417,1 @@\n-                       $tmp2$$Register \/* new_val *\/,\n+                       $newval$$Register \/* new_val *\/,\n@@ -429,1 +419,1 @@\n-                       $tmp3$$Register \/* tmp2 *\/);\n+                       $tmp2$$Register \/* tmp2 *\/);\n@@ -436,1 +426,1 @@\n-instruct g1CompareAndSwapPAcq(iRegINoSp res, indirect mem, iRegP newval, iRegPNoSp tmp1, iRegPNoSp tmp2, iRegPNoSp tmp3, iRegP oldval, rFlagsReg cr)\n+instruct g1CompareAndSwapPAcq(iRegINoSp res, indirect mem, iRegP newval, iRegPNoSp tmp1, iRegPNoSp tmp2, iRegP oldval, rFlagsReg cr)\n@@ -441,1 +431,1 @@\n-  effect(TEMP res, TEMP tmp1, TEMP tmp2, TEMP tmp3, KILL cr);\n+  effect(TEMP res, TEMP tmp1, TEMP tmp2, KILL cr);\n@@ -451,2 +441,2 @@\n-                      $tmp2$$Register \/* tmp1 *\/,\n-                      $tmp3$$Register \/* tmp2 *\/,\n+                      $tmp1$$Register \/* tmp1 *\/,\n+                      $tmp2$$Register \/* tmp2 *\/,\n@@ -455,3 +445,1 @@\n-    __ mov($tmp1$$Register, $oldval$$Register);\n-    __ mov($tmp2$$Register, $newval$$Register);\n-    __ cmpxchg($mem$$Register, $tmp1$$Register, $tmp2$$Register, Assembler::xword,\n+    __ cmpxchg($mem$$Register, $oldval$$Register, $newval$$Register, Assembler::xword,\n@@ -462,1 +450,1 @@\n-                       $tmp2$$Register \/* new_val *\/,\n+                       $newval$$Register \/* new_val *\/,\n@@ -464,1 +452,1 @@\n-                       $tmp3$$Register \/* tmp2 *\/);\n+                       $tmp2$$Register \/* tmp2 *\/);\n@@ -490,3 +478,1 @@\n-    __ mov($tmp1$$Register, $oldval$$Register);\n-    __ mov($tmp2$$Register, $newval$$Register);\n-    __ cmpxchg($mem$$Register, $tmp1$$Register, $tmp2$$Register, Assembler::word,\n+    __ cmpxchg($mem$$Register, $oldval$$Register, $newval$$Register, Assembler::word,\n@@ -495,1 +481,1 @@\n-    __ decode_heap_oop($tmp2$$Register);\n+    __ decode_heap_oop($tmp1$$Register, $newval$$Register);\n@@ -498,2 +484,2 @@\n-                       $tmp2$$Register \/* new_val *\/,\n-                       $tmp1$$Register \/* tmp1 *\/,\n+                       $tmp1$$Register \/* new_val *\/,\n+                       $tmp2$$Register \/* tmp1 *\/,\n@@ -526,3 +512,1 @@\n-    __ mov($tmp1$$Register, $oldval$$Register);\n-    __ mov($tmp2$$Register, $newval$$Register);\n-    __ cmpxchg($mem$$Register, $tmp1$$Register, $tmp2$$Register, Assembler::word,\n+    __ cmpxchg($mem$$Register, $oldval$$Register, $newval$$Register, Assembler::word,\n@@ -531,1 +515,1 @@\n-    __ decode_heap_oop($tmp2$$Register);\n+    __ decode_heap_oop($tmp1$$Register, $newval$$Register);\n@@ -534,2 +518,2 @@\n-                       $tmp2$$Register \/* new_val *\/,\n-                       $tmp1$$Register \/* tmp1 *\/,\n+                       $tmp1$$Register \/* new_val *\/,\n+                       $tmp2$$Register \/* tmp1 *\/,\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/g1\/g1_aarch64.ad","additions":44,"deletions":60,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-instruct g1CompareAndExchangeP$1(iRegPNoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp tmp1, iRegPNoSp tmp2, iRegPNoSp tmp3, rFlagsReg cr)\n+instruct g1CompareAndExchangeP$1(iRegPNoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp tmp1, iRegPNoSp tmp2, rFlagsReg cr)\n@@ -137,1 +137,1 @@\n-  effect(TEMP res, TEMP tmp1, TEMP tmp2, TEMP tmp3, KILL cr);\n+  effect(TEMP res, TEMP tmp1, TEMP tmp2, KILL cr);\n@@ -149,2 +149,2 @@\n-                      $tmp2$$Register \/* tmp1 *\/,\n-                      $tmp3$$Register \/* tmp2 *\/,\n+                      $tmp1$$Register \/* tmp1 *\/,\n+                      $tmp2$$Register \/* tmp2 *\/,\n@@ -153,3 +153,1 @@\n-    __ mov($tmp1$$Register, $oldval$$Register);\n-    __ mov($tmp2$$Register, $newval$$Register);\n-    __ cmpxchg($mem$$Register, $tmp1$$Register, $tmp2$$Register, Assembler::xword,\n+    __ cmpxchg($mem$$Register, $oldval$$Register, $newval$$Register, Assembler::xword,\n@@ -159,1 +157,1 @@\n-                       $tmp2$$Register \/* new_val *\/,\n+                       $newval$$Register \/* new_val *\/,\n@@ -161,1 +159,1 @@\n-                       $tmp3$$Register \/* tmp2 *\/);\n+                       $tmp2$$Register \/* tmp2 *\/);\n@@ -189,3 +187,1 @@\n-    __ mov($tmp1$$Register, $oldval$$Register);\n-    __ mov($tmp2$$Register, $newval$$Register);\n-    __ cmpxchg($mem$$Register, $tmp1$$Register, $tmp2$$Register, Assembler::word,\n+    __ cmpxchg($mem$$Register, $oldval$$Register, $newval$$Register, Assembler::word,\n@@ -193,1 +189,1 @@\n-    __ decode_heap_oop($tmp2$$Register);\n+    __ decode_heap_oop($tmp1$$Register, $newval$$Register);\n@@ -196,2 +192,2 @@\n-                       $tmp2$$Register \/* new_val *\/,\n-                       $tmp1$$Register \/* tmp1 *\/,\n+                       $tmp1$$Register \/* new_val *\/,\n+                       $tmp2$$Register \/* tmp1 *\/,\n@@ -209,1 +205,1 @@\n-instruct g1CompareAndSwapP$1(iRegINoSp res, indirect mem, iRegP newval, iRegPNoSp tmp1, iRegPNoSp tmp2, iRegPNoSp tmp3, iRegP oldval, rFlagsReg cr)\n+instruct g1CompareAndSwapP$1(iRegINoSp res, indirect mem, iRegP newval, iRegPNoSp tmp1, iRegPNoSp tmp2, iRegP oldval, rFlagsReg cr)\n@@ -214,1 +210,1 @@\n-  effect(TEMP res, TEMP tmp1, TEMP tmp2, TEMP tmp3, KILL cr);\n+  effect(TEMP res, TEMP tmp1, TEMP tmp2, KILL cr);\n@@ -224,2 +220,2 @@\n-                      $tmp2$$Register \/* tmp1 *\/,\n-                      $tmp3$$Register \/* tmp2 *\/,\n+                      $tmp1$$Register \/* tmp1 *\/,\n+                      $tmp2$$Register \/* tmp2 *\/,\n@@ -228,3 +224,1 @@\n-    __ mov($tmp1$$Register, $oldval$$Register);\n-    __ mov($tmp2$$Register, $newval$$Register);\n-    __ cmpxchg($mem$$Register, $tmp1$$Register, $tmp2$$Register, Assembler::xword,\n+    __ cmpxchg($mem$$Register, $oldval$$Register, $newval$$Register, Assembler::xword,\n@@ -235,1 +229,1 @@\n-                       $tmp2$$Register \/* new_val *\/,\n+                       $newval$$Register \/* new_val *\/,\n@@ -237,1 +231,1 @@\n-                       $tmp3$$Register \/* tmp2 *\/);\n+                       $tmp2$$Register \/* tmp2 *\/);\n@@ -267,3 +261,1 @@\n-    __ mov($tmp1$$Register, $oldval$$Register);\n-    __ mov($tmp2$$Register, $newval$$Register);\n-    __ cmpxchg($mem$$Register, $tmp1$$Register, $tmp2$$Register, Assembler::word,\n+    __ cmpxchg($mem$$Register, $oldval$$Register, $newval$$Register, Assembler::word,\n@@ -272,1 +264,1 @@\n-    __ decode_heap_oop($tmp2$$Register);\n+    __ decode_heap_oop($tmp1$$Register, $newval$$Register);\n@@ -275,2 +267,2 @@\n-                       $tmp2$$Register \/* new_val *\/,\n-                       $tmp1$$Register \/* tmp1 *\/,\n+                       $tmp1$$Register \/* new_val *\/,\n+                       $tmp2$$Register \/* tmp1 *\/,\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/g1\/g1_aarch64.m4","additions":22,"deletions":30,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -110,3 +110,0 @@\n-    assert(!in(operand_index(2))->is_Mach() ||\n-           (in(operand_index(2))->as_Mach()->ideal_Opcode() != Op_EncodeP),\n-           \"EncodeP src nodes should be matched with their corresponding StoreN nodes\");\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/g1\/g1_ppc.ad","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -112,3 +112,0 @@\n-    assert(!in(operand_index(2))->is_Mach() ||\n-           (in(operand_index(2))->as_Mach()->ideal_Opcode() != Op_EncodeP),\n-           \"EncodeP src nodes should be matched with their corresponding StoreN nodes\");\n","filename":"src\/hotspot\/cpu\/x86\/gc\/g1\/g1_x86_64.ad","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1597,4 +1597,6 @@\n-    if (Matcher::is_encode_and_store_pattern(n, m)) {\n-      \/\/ Make it possible to match \"encode and store\" patterns, regardless of\n-      \/\/ whether the encode operation is pinned to a control node (e.g. by\n-      \/\/ CastPP node removal in final graph reshaping).\n+    if (!shared && Matcher::is_encode_and_store_pattern(n, m)) {\n+      \/\/ Make it possible to match \"encode and store\" patterns with non-shared\n+      \/\/ encode operations that are pinned to a control node (e.g. by CastPP\n+      \/\/ node removal in final graph reshaping). The matched instruction cannot\n+      \/\/ float above the encode's control node because it is pinned to the\n+      \/\/ store's control node.\n@@ -1826,0 +1828,2 @@\n+    assert(C->node_arena()->contains(s->_leaf) || !has_new_node(s->_leaf),\n+           \"duplicating node that's already been matched\");\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"}]}