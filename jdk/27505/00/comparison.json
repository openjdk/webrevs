{"files":[{"patch":"@@ -35,0 +35,6 @@\n+\/**\n+ * ShenanoahAllocationRate maintains a truncated history of recently sampled allocation rates for the purpose of providing\n+ * informed estimates of current and future allocation rates based on weighted averages and standard deviations of the\n+ * truncated history.  More recently sampled allocations are weighted more heavily than older samples when computing\n+ * averages and standard deviations.\n+ *\/\n@@ -38,0 +44,2 @@\n+\n+  \/\/ Reset the _last_sample_value to zero, _last_sample_time to current time.\n@@ -40,0 +48,7 @@\n+  \/\/ Force an allocation rate sample to be taken, even if the time since last sample is not greater than\n+  \/\/ 1s\/ShenandoahAdaptiveSampleFrequencyHz, except when current_time - _last_sample_time < MinSampleTime (2 ms).\n+  \/\/ The sampled allocation rate is computed from (allocated - _last_sample_value) \/ (current_time - _last_sample_time).\n+  \/\/ Return the newly computed rate if the sample is taken, zero if it is not an appropriate time to add a sample.\n+  \/\/ In the case that a new sample is not take, overwrite unaccounted_bytes_allocated with bytes allocated since\n+  \/\/ the previous sample was taken (allocated - __last_sample_value).  Otherwise, overwrite unaccounted_byets_allocated\n+  \/\/ with 0.\n@@ -41,0 +56,4 @@\n+\n+  \/\/ Add an allocation rate sample if the time since last sample is greater than 1s\/ShenandoahAdaptiveSampleFrequencyHz.\n+  \/\/ The sampled allocation rate is computed from (allocated - _last_sample_value) \/ (current_time - _last_sample_time).\n+  \/\/ Return the newly computed rate if the sample is taken, zero if it is not an appropriate time to add a sample.\n@@ -43,0 +62,3 @@\n+  \/\/ Return an estimate of the upper bound on allocation rate, with the upper bound computed as the weighted average\n+  \/\/ of recently sampled instantaneous allocation rates added to sds times the standard deviation computed for the\n+  \/\/ sequence of recently sampled average allocation rates.\n@@ -44,0 +66,3 @@\n+\n+  \/\/ Test whether rate significantly diverges from the computed average allocation rate.  If so, return true.\n+  \/\/ Otherwise, return false.  Significant divergence is recognized if (rate - _rate.avg()) \/ _rate.sd() > threshold.\n@@ -48,0 +73,2 @@\n+  \/\/ Return the instantaneous rate calculated from from (allocated - _last_sample_value) \/ (time - _last_sample_time).\n+  \/\/ Return Sentinel vlue 0.0 if (time - _last_sample_time) == 0 or if (allocated <= _last_sample_value).\n@@ -50,0 +77,1 @@\n+  \/\/ Time at which previous allocation rate sample was collected.\n@@ -51,0 +79,2 @@\n+\n+  \/\/ Bytes allocated as of the time at which previous allocation rate sample was collected.\n@@ -52,0 +82,2 @@\n+\n+  \/\/ The desired interval of time between consecutive samples of the allocation rate.\n@@ -53,0 +85,2 @@\n+\n+  \/\/ Holds a sequence of the most recently sampled instantaneous allocation rates\n@@ -54,0 +88,3 @@\n+\n+  \/\/ Holds a sequence of the most recently computed weighted average of allocation rates, with each weighted average\n+  \/\/ computed immediately after an instantaneous rate was sampled\n@@ -157,0 +194,2 @@\n+  \/\/ Sample the allocation rate at GC trigger time if possible.  Return the number of allocated bytes that were\n+  \/\/ not accounted for in the sample.  This must be called before resetting bytes allocated since gc start.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -145,0 +145,5 @@\n+\n+  \/\/ Reset the bytes allocated within this generation since the start of GC.  The argument initial_bytes_allocated\n+  \/\/ is normally zero.  In the case that some memory was allocated following the last allocation rate sample that\n+  \/\/ precedes the start of GC, the number of bytes allocated is supplied as the initial value of bytes_allocated_since_gc_start.\n+  \/\/ We will behave as if these bytes were allocated after the start of GC.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}