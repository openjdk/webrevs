{"files":[{"patch":"@@ -128,0 +128,2 @@\n+\/\/ This method is called during universe_init()\n+\/\/ and does final AOT state and flags settings.\n@@ -200,0 +202,5 @@\n+static AOTCodeCache*  opened_cache = nullptr; \/\/ Use this until we verify the cache\n+AOTCodeCache* AOTCodeCache::_cache = nullptr;\n+\n+\/\/ This method is called after universe_init()\n+\/\/ when all GC settings are finalized.\n@@ -201,1 +208,1 @@\n-  if (!is_on()) {\n+  if (opened_cache == nullptr) {\n@@ -204,2 +211,3 @@\n-  if (!verify_vm_config()) {\n-    close();\n+  if (!opened_cache->verify_config()) {\n+    delete opened_cache;\n+    opened_cache = nullptr;\n@@ -207,0 +215,1 @@\n+    return;\n@@ -211,3 +220,4 @@\n-  init_extrs_table();\n-  init_early_stubs_table();\n-}\n+  AOTCodeAddressTable* table = opened_cache->_table;\n+  assert(table != nullptr, \"should be initialized already\");\n+  table->init_extrs();\n+  table->init_early_stubs();\n@@ -215,1 +225,3 @@\n-AOTCodeCache* AOTCodeCache::_cache = nullptr;\n+  \/\/ Now cache and address table are ready for AOT code generation\n+  _cache = opened_cache;\n+}\n@@ -218,4 +230,4 @@\n-  AOTCodeCache* cache = new AOTCodeCache(is_dumping, is_using);\n-  if (cache->failed()) {\n-    delete cache;\n-    _cache = nullptr;\n+  opened_cache = new AOTCodeCache(is_dumping, is_using);\n+  if (opened_cache->failed()) {\n+    delete opened_cache;\n+    opened_cache = nullptr;\n@@ -224,1 +236,0 @@\n-  _cache = cache;\n@@ -232,0 +243,1 @@\n+    opened_cache = nullptr;\n@@ -279,1 +291,1 @@\n-    if (!_load_header->verify_config(_load_size)) {\n+    if (!_load_header->verify(_load_size)) {\n@@ -303,14 +315,0 @@\n-void AOTCodeCache::init_extrs_table() {\n-  AOTCodeAddressTable* table = addr_table();\n-  if (table != nullptr) {\n-    table->init_extrs();\n-  }\n-}\n-\n-void AOTCodeCache::init_early_stubs_table() {\n-  AOTCodeAddressTable* table = addr_table();\n-  if (table != nullptr) {\n-    table->init_early_stubs();\n-  }\n-}\n-\n@@ -384,1 +382,0 @@\n-  _objectAlignment       = ObjectAlignmentInBytes;\n@@ -389,0 +386,1 @@\n+  \/\/ First checks affect all cached AOT code\n@@ -407,4 +405,0 @@\n-  if (((_flags & compressedOops) != 0) != UseCompressedOops) {\n-    log_debug(aot, codecache, init)(\"AOT Code Cache disabled: it was created with UseCompressedOops = %s\", UseCompressedOops ? \"false\" : \"true\");\n-    return false;\n-  }\n@@ -415,7 +409,2 @@\n-\n-  if (((_flags & systemClassAssertions) != 0) != JavaAssertions::systemClassDefault()) {\n-    log_debug(aot, codecache, init)(\"AOT Code Cache disabled: it was created with JavaAssertions::systemClassDefault() = %s\", JavaAssertions::systemClassDefault() ? \"disabled\" : \"enabled\");\n-    return false;\n-  }\n-  if (((_flags & userClassAssertions) != 0) != JavaAssertions::userClassDefault()) {\n-    log_debug(aot, codecache, init)(\"AOT Code Cache disabled: it was created with JavaAssertions::userClassDefault() = %s\", JavaAssertions::userClassDefault() ? \"disabled\" : \"enabled\");\n+  if (_compressedKlassShift != (uint)CompressedKlassPointers::shift()) {\n+    log_debug(aot, codecache, init)(\"AOT Code Cache disabled: it was created with CompressedKlassPointers::shift() = %d vs current %d\", _compressedKlassShift, CompressedKlassPointers::shift());\n@@ -425,7 +414,5 @@\n-  if (((_flags & enableContendedPadding) != 0) != EnableContended) {\n-    log_debug(aot, codecache, init)(\"AOT Code Cache disabled: it was created with EnableContended = %s\", EnableContended ? \"false\" : \"true\");\n-    return false;\n-  }\n-  if (((_flags & restrictContendedPadding) != 0) != RestrictContended) {\n-    log_debug(aot, codecache, init)(\"AOT Code Cache disabled: it was created with RestrictContended = %s\", RestrictContended ? \"false\" : \"true\");\n-    return false;\n+  \/\/ The following checks do not affect AOT adapters caching\n+\n+  if (((_flags & compressedOops) != 0) != UseCompressedOops) {\n+    log_debug(aot, codecache, init)(\"AOT Code Cache disabled: it was created with UseCompressedOops = %s\", UseCompressedOops ? \"false\" : \"true\");\n+    AOTStubCaching = false;\n@@ -435,13 +422,1 @@\n-    return false;\n-  }\n-  if (_compressedKlassShift != (uint)CompressedKlassPointers::shift()) {\n-    log_debug(aot, codecache, init)(\"AOT Code Cache disabled: it was created with CompressedKlassPointers::shift() = %d vs current %d\", _compressedKlassShift, CompressedKlassPointers::shift());\n-    return false;\n-  }\n-  if (_contendedPaddingWidth != (uint)ContendedPaddingWidth) {\n-    log_debug(aot, codecache, init)(\"AOT Code Cache disabled: it was created with ContendedPaddingWidth = %d vs current %d\", _contendedPaddingWidth, ContendedPaddingWidth);\n-    return false;\n-  }\n-  if (_objectAlignment != (uint)ObjectAlignmentInBytes) {\n-    log_debug(aot, codecache, init)(\"AOT Code Cache disabled: it was created with ObjectAlignmentInBytes = %d vs current %d\", _objectAlignment, ObjectAlignmentInBytes);\n-    return false;\n+    AOTStubCaching = false;\n@@ -459,1 +434,1 @@\n-bool AOTCodeCache::Header::verify_config(uint load_size) const {\n+bool AOTCodeCache::Header::verify(uint load_size) const {\n@@ -860,0 +835,4 @@\n+    if (!cache->failed()) {\n+      \/\/ We may miss an address in AOT table - skip this code blob.\n+      cache->set_write_position(entry_position);\n+    }\n@@ -988,0 +967,4 @@\n+\/\/ Can't use -1. It is valid value for jump to iteself destination\n+\/\/ used by static call stub: see NativeJump::jump_destination().\n+#define BAD_ADDRESS_ID -2\n+\n@@ -1004,1 +987,5 @@\n-        reloc_data.at_put(idx, _table->id_for_address(dest, iter, &code_blob));\n+        int id = _table->id_for_address(dest, iter, &code_blob);\n+        if (id == BAD_ADDRESS_ID) {\n+          return false;\n+        }\n+        reloc_data.at_put(idx, id);\n@@ -1008,2 +995,2 @@\n-        fatal(\"runtime_call_w_cp_type unimplemented\");\n-        break;\n+        log_debug(aot, codecache, reloc)(\"runtime_call_w_cp_type relocation is not implemented\");\n+        return false;\n@@ -1013,1 +1000,5 @@\n-        reloc_data.at_put(idx, _table->id_for_address(target, iter, &code_blob));\n+        int id = _table->id_for_address(target, iter, &code_blob);\n+        if (id == BAD_ADDRESS_ID) {\n+          return false;\n+        }\n+        reloc_data.at_put(idx, id);\n@@ -1023,1 +1014,2 @@\n-        fatal(\"relocation %d unimplemented\", (int)iter.type());\n+        log_debug(aot, codecache, reloc)(\"relocation %d unimplemented\", (int)iter.type());\n+        return false;\n@@ -1072,1 +1064,2 @@\n-        fatal(\"runtime_call_w_cp_type unimplemented\");\n+        \/\/ this relocation should not be in cache (see write_relocations)\n+        assert(false, \"runtime_call_w_cp_type relocation is not implemented\");\n@@ -1098,1 +1091,1 @@\n-        fatal(\"relocation %d unimplemented\", (int)iter.type());\n+        assert(false,\"relocation %d unimplemented\", (int)iter.type());\n@@ -1400,0 +1393,2 @@\n+\n+  \/\/ Divide _shared_blobs_addr array to chunks because they could be initialized in parrallel\n@@ -1402,1 +1397,3 @@\n-  _shared_blobs_length = _C1_blobs_length = 0;\n+\n+  _shared_blobs_length = 0;\n+  _C1_blobs_length = 0;\n@@ -1559,1 +1556,1 @@\n-      fatal(\"Number of C strings >= MAX_STR_COUNT\");\n+      assert(false, \"Number of C strings >= MAX_STR_COUNT\");\n@@ -1598,1 +1595,1 @@\n-  return -1;\n+  return BAD_ADDRESS_ID;\n@@ -1602,3 +1599,1 @@\n-  if (!_extrs_complete) {\n-    fatal(\"AOT Code Cache VM runtime addresses table is not complete\");\n-  }\n+  assert(_extrs_complete, \"AOT Code Cache VM runtime addresses table is not complete\");\n@@ -1615,0 +1610,1 @@\n+    return nullptr;\n@@ -1637,3 +1633,1 @@\n-  if (!_extrs_complete) {\n-    fatal(\"AOT Code Cache VM runtime addresses table is not complete\");\n-  }\n+  assert(_extrs_complete, \"AOT Code Cache VM runtime addresses table is not complete\");\n@@ -1658,1 +1652,1 @@\n-      fatal(\"Address \" INTPTR_FORMAT \" for Stub:%s is missing in AOT Code Cache addresses table\", p2i(addr), sub_name);\n+      assert(false, \"Address \" INTPTR_FORMAT \" for Stub:%s is missing in AOT Code Cache addresses table\", p2i(addr), sub_name);\n@@ -1669,1 +1663,1 @@\n-        fatal(\"Address \" INTPTR_FORMAT \" for Blob:%s is missing in AOT Code Cache addresses table\", p2i(addr), cb->name());\n+        assert(false, \"Address \" INTPTR_FORMAT \" for Blob:%s is missing in AOT Code Cache addresses table\", p2i(addr), cb->name());\n@@ -1690,0 +1684,1 @@\n+#ifdef ASSERT\n@@ -1693,1 +1688,2 @@\n-          fatal(\"Address \" INTPTR_FORMAT \" for runtime target '%s+%d' is missing in AOT Code Cache addresses table\", p2i(addr), func_name, offset);\n+          assert(false, \"Address \" INTPTR_FORMAT \" for runtime target '%s+%d' is missing in AOT Code Cache addresses table\", p2i(addr), func_name, offset);\n+#endif\n@@ -1695,0 +1691,1 @@\n+#ifdef ASSERT\n@@ -1699,1 +1696,2 @@\n-          fatal(\"Address \" INTPTR_FORMAT \" for <unknown>\/('%s') is missing in AOT Code Cache addresses table\", p2i(addr), (const char*)addr);\n+          assert(false, \"Address \" INTPTR_FORMAT \" for <unknown>\/('%s') is missing in AOT Code Cache addresses table\", p2i(addr), (const char*)addr);\n+#endif\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.cpp","additions":78,"deletions":80,"binary":false,"changes":158,"status":"modified"},{"patch":"@@ -172,1 +172,0 @@\n-    uint _objectAlignment;\n@@ -209,1 +208,1 @@\n-public:\n+  public:\n@@ -239,2 +238,2 @@\n-    bool verify_config(uint load_size)  const;\n-    bool verify_vm_config() const { \/\/ Called after Universe initialized\n+    bool verify(uint load_size)  const;\n+    bool verify_config() const { \/\/ Called after Universe initialized\n@@ -301,2 +300,0 @@\n-  static void init_extrs_table() NOT_CDS_RETURN;\n-  static void init_early_stubs_table() NOT_CDS_RETURN;\n@@ -355,3 +352,3 @@\n-  static bool verify_vm_config() {\n-    if (is_on_for_use()) {\n-      return _cache->_load_header->verify_vm_config();\n+  bool verify_config() {\n+    if (for_use()) {\n+      return _load_header->verify_config();\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.hpp","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"}]}