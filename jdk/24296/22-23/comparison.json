{"files":[{"patch":"@@ -2426,0 +2426,17 @@\n+\n+#if INCLUDE_JFR\n+  \/\/ We need to do a poll test after unwind\n+  \/\/ in case the sampler managed to sample the native frame.\n+  Label L_after_unwind, L_return;\n+  address poll_test_pc = __ pc();\n+  __ relocate(relocInfo::poll_return_type);\n+  __ testptr(Address(r15_thread, JavaThread::polling_word_offset()), 1);\n+  __ jcc(Assembler::zero, L_return);\n+  __ lea(rscratch1, InternalAddress(poll_test_pc));\n+  __ movptr(Address(r15_thread, JavaThread::saved_exception_pc_offset()), rscratch1);\n+  assert(SharedRuntime::polling_page_return_handler_blob() != nullptr,\n+    \"polling page return stub not created yet\");\n+  address stub = SharedRuntime::polling_page_return_handler_blob()->entry_point();\n+  __ jump(RuntimeAddress(stub));\n+  __ bind(L_return);\n+#endif \/\/ INCLUDE_JFR\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -73,0 +73,3 @@\n+#if INCLUDE_JFR\n+#include \"jfr\/jfr.hpp\"\n+#endif\n@@ -611,0 +614,1 @@\n+  JFR_ONLY(Jfr::check_and_process_sample_request(_thread);)\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -219,1 +219,0 @@\n-    _trace_flag             = 0x00000004U, \/\/ call tracing backend\n@@ -232,1 +231,0 @@\n-  bool is_trace_suspend()      { return (_suspend_flags & _trace_flag) != 0; }\n@@ -757,1 +755,1 @@\n-    return (_suspend_flags & (_obj_deopt JFR_ONLY(| _trace_flag))) != 0;\n+    return (_suspend_flags & _obj_deopt) != 0;\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}