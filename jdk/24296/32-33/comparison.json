{"files":[{"patch":"@@ -141,0 +141,5 @@\n+intptr_t* os::fetch_bcp_from_context(const void* ucVoid) {\n+  Unimplemented();\n+  return nullptr;\n+}\n+\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/os_aix_ppc.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -101,0 +101,2 @@\n+#define REG_BCP context_x[22]\n+\n@@ -182,0 +184,16 @@\n+#ifdef ASSERT\n+static bool is_interpreter(const ucontext_t* uc) {\n+  assert(uc != nullptr, \"invariant\");\n+  address pc = os::Posix::ucontext_get_pc(uc);\n+  assert(pc != nullptr, \"invariant\");\n+  return Interpreter::contains(pc);\n+}\n+#endif\n+\n+intptr_t* os::fetch_bcp_from_context(const void* ucVoid) {\n+  assert(ucVoid != nullptr, \"invariant\");\n+  const ucontext_t* uc = (const ucontext_t*)ucVoid;\n+  assert(is_interpreter(uc), \"invariant\");\n+  return reinterpret_cast<intptr_t*>(uc->REG_BCP);\n+}\n+\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/os_bsd_aarch64.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -92,0 +92,1 @@\n+#define REG_BCP context_r13\n@@ -352,0 +353,16 @@\n+#ifdef ASSERT\n+static bool is_interpreter(const ucontext_t* uc) {\n+  assert(uc != nullptr, \"invariant\");\n+  address pc = os::Posix::ucontext_get_pc(uc);\n+  assert(pc != nullptr, \"invariant\");\n+  return Interpreter::contains(pc);\n+}\n+#endif\n+\n+intptr_t* os::fetch_bcp_from_context(const void* ucVoid) {\n+  assert(ucVoid != nullptr, \"invariant\");\n+  const ucontext_t* uc = (const ucontext_t*)ucVoid;\n+  assert(is_interpreter(uc), \"invariant\");\n+  return reinterpret_cast<intptr_t*>(uc->REG_BCP);\n+}\n+\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/os_bsd_x86.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -112,0 +112,5 @@\n+intptr_t* os::fetch_bcp_from_context(const void* ucVoid) {\n+  ShouldNotCallThis();\n+  return nullptr;\n+}\n+\n","filename":"src\/hotspot\/os_cpu\/bsd_zero\/os_bsd_zero.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -78,0 +78,1 @@\n+#define REG_BCP 22\n@@ -151,0 +152,16 @@\n+#ifdef ASSERT\n+static bool is_interpreter(const ucontext_t* uc) {\n+  assert(uc != nullptr, \"invariant\");\n+  address pc = os::Posix::ucontext_get_pc(uc);\n+  assert(pc != nullptr, \"invariant\");\n+  return Interpreter::contains(pc);\n+}\n+#endif\n+\n+intptr_t* os::fetch_bcp_from_context(const void* ucVoid) {\n+  assert(ucVoid != nullptr, \"invariant\");\n+  const ucontext_t* uc = (const ucontext_t*)ucVoid;\n+  assert(is_interpreter(uc), \"invariant\");\n+  return reinterpret_cast<intptr_t*>(uc->uc_mcontext.regs[REG_BCP]);\n+}\n+\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -211,0 +211,5 @@\n+intptr_t* os::fetch_bcp_from_context(const void* ucVoid) {\n+  Unimplemented();\n+  return nullptr;\n+}\n+\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/os_linux_arm.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -173,0 +173,5 @@\n+intptr_t* os::fetch_bcp_from_context(const void* ucVoid) {\n+  Unimplemented();\n+  return nullptr;\n+}\n+\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/os_linux_ppc.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -160,0 +160,5 @@\n+intptr_t* os::fetch_bcp_from_context(const void* ucVoid) {\n+  Unimplemented();\n+  return nullptr;\n+}\n+\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/os_linux_riscv.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -158,0 +158,5 @@\n+intptr_t* os::fetch_bcp_from_context(const void* ucVoid) {\n+  Unimplemented();\n+  return nullptr;\n+}\n+\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/os_linux_s390.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -83,0 +83,1 @@\n+#define REG_BCP REG_R13\n@@ -160,0 +161,16 @@\n+#ifdef ASSERT\n+static bool is_interpreter(const ucontext_t* uc) {\n+  assert(uc != nullptr, \"invariant\");\n+  address pc = os::Posix::ucontext_get_pc(uc);\n+  assert(pc != nullptr, \"invariant\");\n+  return Interpreter::contains(pc);\n+}\n+#endif\n+\n+intptr_t* os::fetch_bcp_from_context(const void* ucVoid) {\n+  assert(ucVoid != nullptr, \"invariant\");\n+  const ucontext_t* uc = (const ucontext_t*)ucVoid;\n+  assert(is_interpreter(uc), \"invariant\");\n+  return reinterpret_cast<intptr_t*>(uc->uc_mcontext.gregs[REG_BCP]);\n+}\n+\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -214,0 +214,5 @@\n+intptr_t* os::fetch_bcp_from_context(const void* ucVoid) {\n+  ShouldNotCallThis();\n+  return nullptr;\n+}\n+\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/os_linux_zero.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -61,0 +61,2 @@\n+#define REG_BCP X22\n+\n@@ -100,0 +102,16 @@\n+#ifdef ASSERT\n+static bool is_interpreter(const CONTEXT* uc) {\n+  assert(uc != nullptr, \"invariant\");\n+  address pc = reinterpret_cast<address>(uc->Pc);\n+  assert(pc != nullptr, \"invariant\");\n+  return Interpreter::contains(pc);\n+}\n+#endif\n+\n+intptr_t* os::fetch_bcp_from_context(const void* ucVoid) {\n+  assert(ucVoid != nullptr, \"invariant\");\n+  CONTEXT* uc = (CONTEXT*)ucVoid;\n+  assert(is_interpreter(uc), \"invariant\");\n+  return reinterpret_cast<intptr_t*>(uc->REG_BCP);\n+}\n+\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/os_windows_aarch64.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+#define REG_BCP R13\n@@ -323,0 +324,16 @@\n+#ifdef ASSERT\n+static bool is_interpreter(const CONTEXT* uc) {\n+  assert(uc != nullptr, \"invariant\");\n+  address pc = reinterpret_cast<address>(uc->REG_PC);\n+  assert(pc != nullptr, \"invariant\");\n+  return Interpreter::contains(pc);\n+}\n+#endif\n+\n+intptr_t* os::fetch_bcp_from_context(const void* ucVoid) {\n+  assert(ucVoid != nullptr, \"invariant\");\n+  const CONTEXT* const uc = (CONTEXT*)ucVoid;\n+  assert(is_interpreter(uc), \"invariant\");\n+  return reinterpret_cast<intptr_t*>(uc->REG_BCP);\n+}\n+\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/os_windows_x86.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -198,0 +198,1 @@\n+                           const JfrThreadLocal* tl,\n@@ -199,0 +200,3 @@\n+  assert(tl != nullptr, \"invariant\");\n+  assert(jt != nullptr, \"invariant\");\n+  assert(jt->jfr_thread_local() == tl, \"invariant\");\n@@ -209,0 +213,8 @@\n+  if (is_interpreter(last_pc)) {\n+    if (tl->in_sampling_critical_section()) {\n+      return false;\n+    }\n+    request._sample_pc = last_pc;\n+    request._sample_bcp = jt->frame_anchor()->last_Java_fp();\n+    return build_for_interpreter(request, jt);\n+  }\n@@ -210,1 +222,33 @@\n-  return build(request, jt->frame_anchor()->last_Java_fp(), jt);\n+  return build(request, nullptr, jt);\n+}\n+\n+static bool build_from_context(JfrSampleRequest& request,\n+                               const SuspendedThreadTaskContext& context,\n+                               const JfrThreadLocal* tl,\n+                               JavaThread* jt) {\n+  assert(tl != nullptr, \"invariant\");\n+  assert(jt != nullptr, \"invariant\");\n+  assert(jt->jfr_thread_local() == tl, \"invariant\");\n+  assert(!jt->has_last_Java_frame(), \"invariant\");\n+  intptr_t* fp;\n+  request._sample_pc = os::fetch_frame_from_context(context.ucontext(), reinterpret_cast<intptr_t**>(&request._sample_sp), &fp);\n+  assert(sp_in_stack(request, jt), \"invariant\");\n+  if (is_interpreter(request)) {\n+    if (tl->in_sampling_critical_section() || !in_stack(fp, jt)) {\n+      return false;\n+    }\n+    if (frame::is_interpreter_frame_setup_at(fp, request._sample_sp)) {\n+      \/\/ Set fp as sp for interpreter frames.\n+      request._sample_sp = fp;\n+      void* bcp = os::fetch_bcp_from_context(context.ucontext());\n+      \/\/ Setting bcp = 1 marks the sample request to represent a native method.\n+      request._sample_bcp = bcp != nullptr ? bcp : reinterpret_cast<void*>(1);\n+      return true;\n+    }\n+    request._sample_bcp = fp;\n+    fp = sender_for_interpreter_frame(request, jt);\n+    if (request._sample_pc == nullptr || request._sample_sp == nullptr) {\n+      return false;\n+    }\n+  }\n+  return build(request, fp, jt);\n@@ -251,4 +295,0 @@\n-  if (tl->in_sampling_critical_section()) {\n-    return set_biased_java_sample(request, tl, jt);\n-  }\n-\n@@ -257,7 +297,3 @@\n-\n-  if (request._sample_sp == nullptr || !build_from_ljf(request, context, jt)) {\n-    intptr_t* fp;\n-    request._sample_pc = os::fetch_frame_from_context(context.ucontext(), reinterpret_cast<intptr_t**>(&request._sample_sp), &fp);\n-    assert(sp_in_stack(request, jt), \"invariant\");\n-    if (!build(request, fp, jt)) {\n-      return set_biased_java_sample(request, tl, jt);\n+  if (request._sample_sp != nullptr) {\n+    if (build_from_ljf(request, context, tl, jt)) {\n+      return set_unbiased_java_sample(request, tl, jt);\n@@ -265,0 +301,2 @@\n+  } else if (build_from_context(request, context, tl, jt)) {\n+    return set_unbiased_java_sample(request, tl, jt);\n@@ -266,1 +304,1 @@\n-  return set_unbiased_java_sample(request, tl, jt);\n+  return set_biased_java_sample(request, tl, jt);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrSampleRequest.cpp","additions":51,"deletions":13,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -626,0 +626,1 @@\n+  static intptr_t*  fetch_bcp_from_context(const void* ucVoid);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}