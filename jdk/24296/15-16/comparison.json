{"files":[{"patch":"@@ -111,0 +111,3 @@\n+  frame(intptr_t* sp, intptr_t* unextended_sp, intptr_t* fp, address pc, CodeBlob* cb, bool allow_cb_null = false);\n+\n+  void setup(address pc);\n","filename":"src\/hotspot\/cpu\/arm\/frame_arm.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"runtime\/sharedRuntime.hpp\"\n@@ -33,0 +34,52 @@\n+#if INCLUDE_JFR\n+\n+\/\/ Static helper routines\n+inline Method* frame::interpreter_method(const intptr_t* fp) {\n+  assert(fp != nullptr, \"invariant\");\n+  return reinterpret_cast<Method*>(fp[frame::interpreter_frame_method_offset]);\n+}\n+\n+inline address frame::interpreter_bcp(const intptr_t* fp) {\n+  assert(fp != nullptr, \"invariant\");\n+  return reinterpret_cast<address>(fp[frame::interpreter_frame_bcp_offset]);\n+}\n+\n+inline address frame::interpreter_return_address(const intptr_t* fp) {\n+  assert(fp != nullptr, \"invariant\");\n+  return reinterpret_cast<address>(fp[frame::return_addr_offset]);\n+}\n+\n+inline intptr_t* frame::interpreter_sender_sp(const intptr_t* fp) {\n+  assert(fp != nullptr, \"invariant\");\n+  return reinterpret_cast<intptr_t*>(fp[frame::interpreter_frame_sender_sp_offset]);\n+}\n+\n+inline bool frame::is_interpreter_frame_setup_at(const intptr_t* fp, const void* sp) {\n+  assert(fp != nullptr, \"invariant\");\n+  assert(sp != nullptr, \"invariant\");\n+  return sp <= fp + frame::interpreter_frame_initial_sp_offset;\n+}\n+\n+inline intptr_t* frame::sender_sp(intptr_t* fp) {\n+  assert(fp != nullptr, \"invariant\");\n+  return fp + frame::sender_sp_offset;\n+}\n+\n+inline intptr_t* frame::link(const intptr_t* fp) {\n+  assert(fp != nullptr, \"invariant\");\n+  return reinterpret_cast<intptr_t*>(fp[frame::link_offset]);\n+}\n+\n+inline address frame::return_address(const intptr_t* sp) {\n+  assert(sp != nullptr, \"invariant\");\n+  return reinterpret_cast<address>(sp[-1]);\n+}\n+\n+inline intptr_t* frame::fp(const intptr_t* sp) {\n+  assert(sp != nullptr, \"invariant\");\n+  return reinterpret_cast<intptr_t*>(sp[-2]);\n+}\n+\n+#endif \/\/ INCLUDE_JFR\n+\n+\n@@ -57,0 +110,2 @@\n+  _on_heap = false;\n+  _oop_map = nullptr;\n@@ -58,1 +113,0 @@\n-  adjust_unextended_sp();\n@@ -61,0 +115,6 @@\n+  setup(pc);\n+}\n+\n+inline void frame::setup(address pc) {\n+  adjust_unextended_sp();\n+\n@@ -64,2 +124,0 @@\n-    assert(_cb->as_nmethod()->insts_contains_inclusive(_pc),\n-           \"original PC must be in the main code section of the compiled method (or must be immediately following it)\");\n@@ -67,0 +125,2 @@\n+    assert(_cb == nullptr || _cb->as_nmethod()->insts_contains_inclusive(_pc),\n+           \"original PC must be in the main code section of the compiled method (or must be immediately following it)\");\n@@ -68,1 +128,5 @@\n-    _deopt_state = not_deoptimized;\n+    if (_cb == SharedRuntime::deopt_blob()) {\n+      _deopt_state = is_deoptimized;\n+    } else {\n+      _deopt_state = not_deoptimized;\n+    }\n@@ -70,2 +134,0 @@\n-  _on_heap = false;\n-  _oop_map = nullptr;\n@@ -88,0 +150,16 @@\n+inline frame::frame(intptr_t* sp, intptr_t* unextended_sp, intptr_t* fp, address pc, CodeBlob* cb, bool allow_cb_null) {\n+  intptr_t a = intptr_t(sp);\n+  intptr_t b = intptr_t(fp);\n+  _sp = sp;\n+  _unextended_sp = unextended_sp;\n+  _fp = fp;\n+  _pc = pc;\n+  assert(pc != nullptr, \"no pc?\");\n+  _cb = cb;\n+  _oop_map = nullptr;\n+  assert(_cb != nullptr || allow_cb_null, \"pc: \" INTPTR_FORMAT, p2i(pc));\n+  _on_heap = false;\n+  DEBUG_ONLY(_frame_index = -1;)\n+\n+  setup(pc);\n+}\n","filename":"src\/hotspot\/cpu\/arm\/frame_arm.inline.hpp","additions":84,"deletions":6,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+  JFR_ONLY(intptr_t* volatile _last_sender_Java_fp;) \/\/ specialized field for when JFR samples an interpreter frame\n@@ -46,0 +47,1 @@\n+    JFR_ONLY(_last_sender_Java_fp = nullptr;)\n@@ -56,1 +58,1 @@\n-    if (_last_Java_sp != src->_last_Java_sp)\n+    if (_last_Java_sp != src->_last_Java_sp) {\n@@ -58,0 +60,1 @@\n+    }\n@@ -60,0 +63,1 @@\n+    JFR_ONLY(_last_sender_Java_fp = src->_last_sender_Java_fp;)\n@@ -82,1 +86,4 @@\n-  intptr_t*   last_Java_fp(void)                 { return _last_Java_fp; }\n+  intptr_t*   last_Java_fp(void) const           { return _last_Java_fp; }\n+\n+  JFR_ONLY(intptr_t* last_sender_Java_fp() const { return _last_sender_Java_fp; })\n+  JFR_ONLY(static ByteSize last_sender_Java_fp_offset() { return byte_offset_of(JavaFrameAnchor, _last_sender_Java_fp); })\n","filename":"src\/hotspot\/cpu\/arm\/javaFrameAnchor_arm.hpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"}]}