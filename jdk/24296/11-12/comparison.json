{"files":[{"patch":"@@ -38,0 +38,47 @@\n+\/\/ Static helper routines\n+inline Method* frame::interpreter_method(const intptr_t* fp) {\n+  assert(fp != nullptr, \"invariant\");\n+  return reinterpret_cast<Method*>(fp[frame::interpreter_frame_method_offset]);\n+}\n+\n+inline address frame::interpreter_bcp(const intptr_t* fp) {\n+  assert(fp != nullptr, \"invariant\");\n+  return reinterpret_cast<address>(fp[frame::interpreter_frame_bcp_offset]);\n+}\n+\n+inline address frame::interpreter_return_address(const intptr_t* fp) {\n+  assert(fp != nullptr, \"invariant\");\n+  return reinterpret_cast<address>(fp[frame::return_addr_offset]);\n+}\n+\n+inline intptr_t* frame::interpreter_sender_sp(const intptr_t* fp) {\n+  assert(fp != nullptr, \"invariant\");\n+  return reinterpret_cast<intptr_t*>(fp[frame::interpreter_frame_sender_sp_offset]);\n+}\n+\n+inline bool frame::is_interpreter_frame_setup_at(const intptr_t* fp, const void* sp) {\n+  assert(fp != nullptr, \"invariant\");\n+  assert(sp != nullptr, \"invariant\");\n+  return sp <= fp + frame::interpreter_frame_initial_sp_offset;\n+}\n+\n+inline intptr_t* frame::sender_sp(intptr_t* fp) {\n+  assert(fp != nullptr, \"invariant\");\n+  return fp + frame::sender_sp_offset;\n+}\n+\n+inline intptr_t* frame::link(const intptr_t* fp) {\n+  assert(fp != nullptr, \"invariant\");\n+  return reinterpret_cast<intptr_t*>(fp[frame::link_offset]);\n+}\n+\n+inline address frame::return_address(const intptr_t* sp) {\n+  assert(sp != nullptr, \"invariant\");\n+  return reinterpret_cast<address>(sp[-1]);\n+}\n+\n+inline intptr_t* frame::fp(const intptr_t* sp) {\n+  assert(sp != nullptr, \"invariant\");\n+  return reinterpret_cast<intptr_t*>(sp[-2]);\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp","additions":47,"deletions":0,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -38,0 +38,47 @@\n+\/\/ Static helper routines\n+inline Method* frame::interpreter_method(const intptr_t* fp) {\n+  assert(fp != nullptr, \"invariant\");\n+  return reinterpret_cast<Method*>(fp[frame::interpreter_frame_method_offset]);\n+}\n+\n+inline address frame::interpreter_bcp(const intptr_t* fp) {\n+  assert(fp != nullptr, \"invariant\");\n+  return reinterpret_cast<address>(fp[frame::interpreter_frame_bcp_offset]);\n+}\n+\n+inline address frame::interpreter_return_address(const intptr_t* fp) {\n+  assert(fp != nullptr, \"invariant\");\n+  return reinterpret_cast<address>(fp[frame::return_addr_offset]);\n+}\n+\n+inline intptr_t* frame::interpreter_sender_sp(const intptr_t* fp) {\n+  assert(fp != nullptr, \"invariant\");\n+  return reinterpret_cast<intptr_t*>(fp[frame::interpreter_frame_sender_sp_offset]);\n+}\n+\n+inline bool frame::is_interpreter_frame_setup_at(const intptr_t* fp, const void* sp) {\n+  assert(fp != nullptr, \"invariant\");\n+  assert(sp != nullptr, \"invariant\");\n+  return sp <= fp + frame::interpreter_frame_initial_sp_offset;\n+}\n+\n+inline intptr_t* frame::sender_sp(intptr_t* fp) {\n+  assert(fp != nullptr, \"invariant\");\n+  return fp + frame::sender_sp_offset;\n+}\n+\n+inline intptr_t* frame::link(const intptr_t* fp) {\n+  assert(fp != nullptr, \"invariant\");\n+  return reinterpret_cast<intptr_t*>(fp[frame::link_offset]);\n+}\n+\n+inline address frame::return_address(const intptr_t* sp) {\n+  assert(sp != nullptr, \"invariant\");\n+  return reinterpret_cast<address>(sp[-1]);\n+}\n+\n+inline intptr_t* frame::fp(const intptr_t* sp) {\n+  assert(sp != nullptr, \"invariant\");\n+  return reinterpret_cast<intptr_t*>(sp[-2]);\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.inline.hpp","additions":47,"deletions":0,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -31,0 +31,47 @@\n+ \/\/ Static helper routines\n+inline Method* frame::interpreter_method(const intptr_t* fp) {\n+  assert(fp != nullptr, \"invariant\");\n+  return reinterpret_cast<Method*>(fp[frame::interpreter_frame_method_offset]);\n+}\n+\n+inline address frame::interpreter_bcp(const intptr_t* fp) {\n+  assert(fp != nullptr, \"invariant\");\n+  return reinterpret_cast<address>(fp[frame::interpreter_frame_bcp_offset]);\n+}\n+\n+inline address frame::interpreter_return_address(const intptr_t* fp) {\n+  assert(fp != nullptr, \"invariant\");\n+  return reinterpret_cast<address>(fp[frame::return_addr_offset]);\n+}\n+\n+inline intptr_t* frame::interpreter_sender_sp(const intptr_t* fp) {\n+  assert(fp != nullptr, \"invariant\");\n+  return reinterpret_cast<intptr_t*>(fp[frame::interpreter_frame_sender_sp_offset]);\n+}\n+\n+inline bool frame::is_interpreter_frame_setup_at(const intptr_t* fp, const void* sp) {\n+  assert(fp != nullptr, \"invariant\");\n+  assert(sp != nullptr, \"invariant\");\n+  return sp <= fp + frame::interpreter_frame_initial_sp_offset;\n+}\n+\n+inline intptr_t* frame::sender_sp(intptr_t* fp) {\n+  assert(fp != nullptr, \"invariant\");\n+  return fp + frame::sender_sp_offset;\n+}\n+\n+inline intptr_t* frame::link(const intptr_t* fp) {\n+  assert(fp != nullptr, \"invariant\");\n+  return reinterpret_cast<intptr_t*>(fp[frame::link_offset]);\n+}\n+\n+inline address frame::return_address(const intptr_t* sp) {\n+  assert(sp != nullptr, \"invariant\");\n+  return reinterpret_cast<address>(sp[-1]);\n+}\n+\n+inline intptr_t* frame::fp(const intptr_t* sp) {\n+  assert(sp != nullptr, \"invariant\");\n+  return reinterpret_cast<intptr_t*>(sp[-2]);\n+}\n+\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.inline.hpp","additions":47,"deletions":0,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -51,5 +51,0 @@\n-static inline Method* interpreter_frame_method(const intptr_t* fp) {\n-  assert(fp != nullptr, \"invariant\");\n-  return reinterpret_cast<Method*>(fp[frame::interpreter_frame_method_offset]);\n-}\n-\n@@ -57,6 +52,1 @@\n-  return interpreter_frame_method(static_cast<intptr_t*>(request._sample_bcp));\n-}\n-\n-static inline address interpreter_frame_bcp(const intptr_t* fp) {\n-  assert(fp != nullptr, \"invariant\");\n-  return reinterpret_cast<address>(fp[frame::interpreter_frame_bcp_offset]);\n+  return frame::interpreter_method(static_cast<intptr_t*>(request._sample_bcp));\n@@ -67,1 +57,1 @@\n-  return interpreter_frame_bcp(static_cast<intptr_t*>(request._sample_bcp));\n+  return frame::interpreter_bcp(static_cast<intptr_t*>(request._sample_bcp));\n@@ -83,7 +73,2 @@\n-static inline address interpreter_frame_return_address(const intptr_t* fp) {\n-  assert(fp != nullptr, \"invariant\");\n-  return reinterpret_cast<address>(fp[frame::return_addr_offset]);\n-}\n-\n-static inline void update_interpeter_frame_sender_pc(JfrSampleRequest& request, intptr_t* fp) {\n-  request._sample_pc = interpreter_frame_return_address(fp);\n+static inline void update_interpreter_frame_sender_pc(JfrSampleRequest& request, intptr_t* fp) {\n+  request._sample_pc = frame::interpreter_return_address(fp);\n@@ -95,1 +80,1 @@\n-  request._sample_pc = interpreter_frame_return_address(static_cast<intptr_t*>(request._sample_bcp));\n+  request._sample_pc = frame::interpreter_return_address(static_cast<intptr_t*>(request._sample_bcp));\n@@ -100,6 +85,1 @@\n-  return interpreter_frame_return_address(static_cast<intptr_t*>(request._sample_bcp));\n-}\n-\n-static inline intptr_t* interpreter_frame_sender_sp(const intptr_t* fp) {\n-  assert(fp != nullptr, \"invariant\");\n-  return reinterpret_cast<intptr_t*>(fp[frame::interpreter_frame_sender_sp_offset]);\n+  return frame::interpreter_return_address(static_cast<intptr_t*>(request._sample_bcp));\n@@ -126,5 +106,0 @@\n-static inline intptr_t* frame_sender_sp(intptr_t* fp) {\n-  assert(fp != nullptr, \"invariant\");\n-  return fp + frame::sender_sp_offset;\n-}\n-\n@@ -133,1 +108,1 @@\n-  return frame_sender_sp(static_cast<intptr_t*>(request._sample_bcp));\n+  return frame::sender_sp(static_cast<intptr_t*>(request._sample_bcp));\n@@ -141,6 +116,1 @@\n-  request._sample_sp = frame_sender_sp(fp);\n-}\n-\n-static inline intptr_t* frame_link(const intptr_t* fp) {\n-  assert(fp != nullptr, \"invariant\");\n-  return reinterpret_cast<intptr_t*>(fp[frame::link_offset]);\n+  request._sample_sp = frame::sender_sp(fp);\n@@ -150,1 +120,1 @@\n-  return frame_link(static_cast<intptr_t*>(request._sample_bcp));\n+  return frame::link(static_cast<intptr_t*>(request._sample_bcp));\n@@ -160,1 +130,1 @@\n-  request._sample_pc = address(static_cast<intptr_t**>(request._sample_sp)[-1]);\n+  request._sample_pc = frame::return_address(static_cast<intptr_t*>(request._sample_sp));\n@@ -165,5 +135,1 @@\n-  request._sample_bcp = is_interpreter(request) ? static_cast<intptr_t**>(request._sample_sp)[-2] : nullptr;\n-}\n-\n-static inline const intptr_t* frame_complete_offset(const JfrSampleRequest& request) {\n-  return static_cast<intptr_t*>(request._sample_bcp) + frame::interpreter_frame_initial_sp_offset;\n+  request._sample_bcp = is_interpreter(request) ? frame::fp(static_cast<intptr_t*>(request._sample_sp)) : nullptr;\n@@ -173,1 +139,1 @@\n-  return frame_complete_offset(request) >= static_cast<intptr_t*>(request._sample_sp);\n+  return frame::is_interpreter_frame_setup_at(static_cast<intptr_t*>(request._sample_bcp), request._sample_sp);\n@@ -288,1 +254,1 @@\n-    update_interpeter_frame_sender_pc(request, last_fp); \/\/ pick up return address\n+    update_interpreter_frame_sender_pc(request, last_fp); \/\/ pick up return address\n@@ -293,1 +259,1 @@\n-    if (is_continuation_frame(interpreter_frame_return_address(last_fp))) {\n+    if (is_continuation_frame(frame::interpreter_return_address(last_fp))) {\n@@ -308,1 +274,1 @@\n-    last_pc = address(static_cast<intptr_t**>(request._sample_sp)[-1]);\n+    last_pc = frame::return_address(static_cast<intptr_t*>(request._sample_sp));\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrSampleRequest.cpp","additions":15,"deletions":49,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -509,0 +509,11 @@\n+  \/\/ Static helper routines\n+  static Method* interpreter_method(const intptr_t* fp);\n+  static address interpreter_bcp(const intptr_t* fp);\n+  static address interpreter_return_address(const intptr_t* fp);\n+  static intptr_t* interpreter_sender_sp(const intptr_t* fp);\n+  static bool is_interpreter_frame_setup_at(const intptr_t* fp, const void* sp);\n+  static intptr_t* sender_sp(intptr_t* fp);\n+  static intptr_t* link(const intptr_t* fp);\n+  static address return_address(const intptr_t* sp);\n+  static intptr_t* fp(const intptr_t* sp);\n+\n","filename":"src\/hotspot\/share\/runtime\/frame.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"}]}