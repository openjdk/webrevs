{"files":[{"patch":"@@ -43,1 +43,1 @@\n-static void copy_frames(JfrStackFrames* lhs_frames, const JfrStackFrames* rhs_frames) {\n+static inline void copy_frames(JfrStackFrames* lhs_frames, const JfrStackFrames* rhs_frames) {\n@@ -48,2 +48,0 @@\n-  assert(lhs_frames->length() == 0, \"invariant\");\n-  lhs_frames->set_length(rhs_frames->length());\n@@ -51,1 +49,2 @@\n-  memcpy(&lhs_frames->first(), &rhs_frames->first(), rhs_frames->length() * sizeof(JfrStackFrame));\n+  assert(lhs_frames->capacity() == lhs_frames->length(), \"invariant\");\n+  memcpy(lhs_frames->adr_at(0), rhs_frames->adr_at(0), rhs_frames->length() * sizeof(JfrStackFrame));\n@@ -68,1 +67,1 @@\n-  _frames(new (mtInternal) JfrStackFrames(trace.number_of_frames(), mtInternal)), \/\/ CHeap\n+  _frames(new (mtTracing) JfrStackFrames(trace.number_of_frames(), trace.number_of_frames(), mtTracing)), \/\/ CHeap\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTrace.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -91,2 +91,0 @@\n-  void  set_length(int len)     { _len = len; }\n-\n@@ -410,0 +408,3 @@\n+  GrowableArrayWithAllocator(E* data, int capacity, int initial_len) :\n+    GrowableArrayView<E>(data, capacity, initial_len) {}\n+\n@@ -785,0 +786,9 @@\n+  \/\/ This constructor performs no default initialization, so be careful.\n+  GrowableArray(int initial_capacity, int initial_len, MemTag mem_tag) :\n+    GrowableArrayWithAllocator<E, GrowableArray>(\n+      allocate(initial_capacity, mem_tag),\n+      initial_capacity, initial_len),\n+    _metadata(mem_tag) {\n+    init_checks();\n+  }\n+\n","filename":"src\/hotspot\/share\/utilities\/growableArray.hpp","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"}]}