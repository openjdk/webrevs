{"files":[{"patch":"@@ -80,1 +80,1 @@\n-#include \"jfr\/jfr.hpp\"\n+#include \"jfr\/jfr.inline.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"jfr\/periodic\/sampling\/jfrThreadSampling.hpp\"\n@@ -153,11 +152,0 @@\n-\n-bool Jfr::has_sample_request(JavaThread* jt) {\n-  return jt->jfr_thread_local()->has_sample_request();\n-}\n-\n-void Jfr::check_and_process_sample_request(JavaThread* jt) {\n-  assert(jt != nullptr, \"invariant\");\n-  if (has_sample_request(jt)) {\n-    JfrThreadSampling::process_sample_request(jt);\n-  }\n-}\n","filename":"src\/hotspot\/share\/jfr\/jfr.cpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"jni.h\"\n@@ -39,0 +38,1 @@\n+struct JavaVMOption;\n","filename":"src\/hotspot\/share\/jfr\/jfr.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\r\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\r\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n+ *\r\n+ * This code is free software; you can redistribute it and\/or modify it\r\n+ * under the terms of the GNU General Public License version 2 only, as\r\n+ * published by the Free Software Foundation.\r\n+ *\r\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\r\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\n+ * version 2 for more details (a copy is included in the LICENSE file that\r\n+ * accompanied this code).\r\n+ *\r\n+ * You should have received a copy of the GNU General Public License version\r\n+ * 2 along with this work; if not, write to the Free Software Foundation,\r\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\r\n+ *\r\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\r\n+ * or visit www.oracle.com if you need additional information or have any\r\n+ * questions.\r\n+ *\r\n+ *\/\r\n+\r\n+#ifndef SHARE_JFR_JFR_INLINE_HPP\r\n+#define SHARE_JFR_JFR_INLINE_HPP\r\n+\r\n+#include \"jfr\/jfr.hpp\"\r\n+\r\n+#include \"jfr\/periodic\/sampling\/jfrThreadSampling.hpp\"\r\n+#include \"runtime\/javaThread.hpp\"\r\n+\r\n+inline bool Jfr::has_sample_request(JavaThread* jt) {\r\n+  assert(jt != nullptr, \"invariant\");\r\n+  return jt->jfr_thread_local()->has_sample_request();\r\n+}\r\n+\r\n+inline void Jfr::check_and_process_sample_request(JavaThread* jt) {\r\n+  if (has_sample_request(jt)) {\r\n+    JfrThreadSampling::process_sample_request(jt);\r\n+  }\r\n+}\r\n+\r\n+#endif \/\/ SHARE_JFR_JFR_INLINE_HPP\r\n","filename":"src\/hotspot\/share\/jfr\/jfr.inline.hpp","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -355,1 +355,1 @@\n-      if (!stacktrace.record_inner(jt, top_frame, 0 \/* skip level *\/)) {\n+      if (!stacktrace.record_inner(jt, top_frame, is_in_continuation(top_frame, jt), 0 \/* skip level *\/)) {\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampling.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -125,1 +125,0 @@\n-#ifdef ASSERT\n@@ -130,1 +129,0 @@\n-#endif\n@@ -162,1 +160,1 @@\n-  return record(jt, frame, 0, in_continuation);\n+  return record(jt, frame, in_continuation, 0);\n@@ -168,2 +166,5 @@\n-  const bool in_continuation = JfrThreadLocal::is_vthread(jt);\n-  return jt->has_last_Java_frame() ? record(jt, jt->last_frame(), skip, in_continuation, stack_filter_id) : false;\n+  if (!jt->has_last_Java_frame()) {\n+    return false;\n+  }\n+  const frame last_frame = jt->last_frame();\n+  return record(jt, last_frame, is_in_continuation(last_frame, jt), skip, stack_filter_id);\n@@ -172,1 +173,1 @@\n-bool JfrStackTrace::record(JavaThread* jt, const frame& frame, int skip, bool in_continuation \/* false *\/, int64_t stack_filter_id \/* -1 *\/) {\n+bool JfrStackTrace::record(JavaThread* jt, const frame& frame, bool in_continuation, int skip, int64_t stack_filter_id \/* -1 *\/) {\n@@ -179,1 +180,1 @@\n-bool JfrStackTrace::record_inner(JavaThread* jt, const frame& frame, int skip, bool in_continuation \/* false *\/, int64_t stack_filter_id \/* -1 *\/) {\n+bool JfrStackTrace::record_inner(JavaThread* jt, const frame& frame, bool in_continuation, int skip, int64_t stack_filter_id \/* -1 *\/) {\n@@ -220,1 +221,1 @@\n-    intptr_t* frame_id = vfs.frame_id();\n+    const intptr_t* const frame_id = vfs.frame_id();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTrace.cpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -73,2 +73,2 @@\n-  bool record_inner(JavaThread* jt, const frame& frame, int skip, bool in_continuation = false, int64_t stack_filter_id = -1);\n-  bool record(JavaThread* jt, const frame& frame, int skip, bool in_continatuion = false, int64_t stack_filter_id = -1);\n+  bool record_inner(JavaThread* jt, const frame& frame, bool in_continuation, int skip, int64_t stack_filter_id = -1);\n+  bool record(JavaThread* jt, const frame& frame, bool in_continuation, int skip, int64_t stack_filter_id = -1);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTrace.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -397,0 +397,1 @@\n+  assert(is_vthread(jt), \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-#include \"jfr\/jfr.hpp\"\n+#include \"jfr\/jfr.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-#include \"jfr\/jfr.hpp\"\n+#include \"jfr\/jfr.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-#include \"jfr\/jfr.hpp\"\n+#include \"jfr\/jfr.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/safepointMechanism.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-#include \"jfr\/jfr.hpp\"\n+#include \"jfr\/jfr.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/safepointMechanism.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-#include \"jfr\/jfr.hpp\"\n+#include \"jfr\/jfr.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}