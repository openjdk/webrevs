{"files":[{"patch":"@@ -133,1 +133,1 @@\n-  if (is_continuation_frame(request)) {\n+  if (is_continuation_frame(request) || is_entry_frame(request)) {\n@@ -139,1 +139,1 @@\n-  if (is_interpreter(request) || is_entry_frame(request)) {\n+  if (is_interpreter(request)) {\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrSampleRequest.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -74,0 +74,5 @@\n+static inline bool is_in_continuation(const frame& frame, JavaThread* jt) {\n+  return JfrThreadLocal::is_vthread(jt) &&\n+         (Continuation::is_frame_in_continuation(jt, frame) || Continuation::is_continuation_enterSpecial(frame));\n+}\n+\n@@ -87,1 +92,1 @@\n-static bool compute_sender_frame(JfrSampleRequest& request, frame& sender_frame, JavaThread* jt) {\n+static bool compute_sender_frame(JfrSampleRequest& request, frame& sender_frame, bool& in_continuation, JavaThread* jt) {\n@@ -112,0 +117,1 @@\n+      in_continuation = is_in_continuation(*frame, jt);\n@@ -119,0 +125,1 @@\n+      in_continuation = is_in_continuation(sender_frame, jt);\n@@ -128,0 +135,7 @@\n+\n+  \/\/ If the top frame is in a continuation, check that the sender frame is too.\n+  if (in_continuation && !is_in_continuation(*stream.current(), jt)) {\n+    \/\/ Leave sender frame empty.\n+    return true;\n+  }\n+\n@@ -148,1 +162,1 @@\n-static bool compute_top_frame(const JfrSampleRequest& request, frame& top_frame, JavaThread* jt) {\n+static bool compute_top_frame(const JfrSampleRequest& request, frame& top_frame, bool& in_continuation, JavaThread* jt) {\n@@ -156,1 +170,1 @@\n-    return compute_sender_frame(const_cast<JfrSampleRequest&>(request), top_frame, jt);\n+    return compute_sender_frame(const_cast<JfrSampleRequest&>(request), top_frame, in_continuation, jt);\n@@ -160,9 +174,3 @@\n-  if (sampled_pc == nullptr) {\n-    \/\/ A biased sample is requested.\n-    top_frame = jt->last_frame();\n-    return true;\n-  }\n-\n-  CodeBlob* const sampled_cb = CodeCache::find_blob(sampled_pc);\n-  if (sampled_cb == nullptr) {\n-    \/\/ No code blob... probably native code. Perform a biased sample.\n+  CodeBlob* sampled_cb;\n+  if (sampled_pc == nullptr || (sampled_cb = CodeCache::find_blob(sampled_pc)) == nullptr) {\n+    \/\/ A biased sample is requested or no code blob.\n@@ -170,0 +178,1 @@\n+    in_continuation = is_in_continuation(top_frame, jt);\n@@ -204,1 +213,1 @@\n-          const PcDesc* pc_desc = get_pc_desc(sampled_nm, sampled_pc);\n+          const PcDesc* const pc_desc = get_pc_desc(sampled_nm, sampled_pc);\n@@ -206,1 +215,0 @@\n-            assert(CodeCache::find_blob(pc_desc->real_pc(sampled_nm)) == sampled_nm, \"invariant\");\n@@ -209,0 +217,1 @@\n+            in_continuation = is_in_continuation(top_frame, jt);\n@@ -232,1 +241,1 @@\n-      return true;\n+      break;\n@@ -244,2 +253,0 @@\n-      top_frame = *current;\n-      return true;\n@@ -247,1 +254,1 @@\n-    \/\/ A mismatched sample in which case we trace from the sender.\n+    \/\/ Either a hit or a mismatched sample in which case we trace from the sender.\n@@ -251,1 +258,1 @@\n-    return true;\n+    break;\n@@ -254,2 +261,2 @@\n-  assert(false, \"Should not reach here\");\n-  return false;\n+  in_continuation = is_in_continuation(top_frame, jt);\n+  return true;\n@@ -258,1 +265,1 @@\n-static void record_thread_in_java(const JfrSampleRequest& request, const JfrTicks& now, JavaThread* jt, Thread* current) {\n+static void record_thread_in_java(const JfrSampleRequest& request, const JfrTicks& now, const JfrThreadLocal* tl, JavaThread* jt, Thread* current) {\n@@ -260,0 +267,1 @@\n+  assert(tl != nullptr, \"invariant\");\n@@ -261,0 +269,1 @@\n+\n@@ -262,1 +271,2 @@\n-  if (!compute_top_frame(request, top_frame, jt)) {\n+  bool in_continuation;\n+  if (!compute_top_frame(request, top_frame, in_continuation, jt)) {\n@@ -265,0 +275,1 @@\n+\n@@ -269,1 +280,1 @@\n-    if (!stacktrace.record(jt, top_frame, request)) {\n+    if (!stacktrace.record(jt, top_frame, in_continuation, request)) {\n@@ -276,1 +287,1 @@\n-  const traceid tid = JfrThreadLocal::thread_id(jt);\n+  const traceid tid = in_continuation ? tl->vthread_id_with_epoch_update(jt) : JfrThreadLocal::jvm_thread_id(jt);\n@@ -291,1 +302,1 @@\n-      record_thread_in_java(request, now, jt, current);\n+      record_thread_in_java(request, now, tl, jt, current);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampling.cpp","additions":37,"deletions":26,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -125,0 +125,7 @@\n+#ifdef ASSERT\n+static inline bool is_in_continuation(const frame& frame, JavaThread* jt) {\n+  return JfrThreadLocal::is_vthread(jt) &&\n+    (Continuation::is_frame_in_continuation(jt, frame) || Continuation::is_continuation_enterSpecial(frame));\n+}\n+#endif\n+\n@@ -147,16 +154,1 @@\n-static inline bool interpreter_top_frame_has_no_sender(const JfrSampleRequest& request, const frame& fr, JavaThread* jt) {\n-  if (fr.pc() == nullptr) {\n-    return true;\n-  }\n-  const Method* method = reinterpret_cast<Method*>(request._sample_pc);\n-  assert(method != nullptr, \"invariant\");\n-  if (method->intrinsic_id() == vmIntrinsicID::_Continuation_enterSpecial) {\n-    assert(JfrThreadLocal::is_vthread(jt), \"invariant\");\n-    const ContinuationEntry* const cont_entry = jt->last_continuation();\n-    assert(cont_entry != nullptr, \"invariant\");\n-    return cont_entry->is_virtual_thread();\n-  }\n-  return false;\n-}\n-\n-bool JfrStackTrace::record(JavaThread* jt, const frame& frame, const JfrSampleRequest& request) {\n+bool JfrStackTrace::record(JavaThread* jt, const frame& frame, bool in_continuation, const JfrSampleRequest& request) {\n@@ -165,1 +157,2 @@\n-    if (interpreter_top_frame_has_no_sender(request, frame, jt)) {\n+    if (frame.pc() == nullptr) {\n+      \/\/ No sender frame. Done.\n@@ -169,1 +162,1 @@\n-  return record(jt, frame, 0);\n+  return record(jt, frame, 0, in_continuation);\n@@ -175,1 +168,2 @@\n-  return jt->has_last_Java_frame() ? record(jt, jt->last_frame(), skip, stack_filter_id) : false;\n+  const bool in_continuation = JfrThreadLocal::is_vthread(jt);\n+  return jt->has_last_Java_frame() ? record(jt, jt->last_frame(), skip, in_continuation, stack_filter_id) : false;\n@@ -178,1 +172,1 @@\n-bool JfrStackTrace::record(JavaThread* jt, const frame& frame, int skip, int64_t stack_filter_id \/* -1 *\/) {\n+bool JfrStackTrace::record(JavaThread* jt, const frame& frame, int skip, bool in_continuation \/* false *\/, int64_t stack_filter_id \/* -1 *\/) {\n@@ -182,1 +176,1 @@\n-  return record_inner(jt, frame, skip, stack_filter_id);\n+  return record_inner(jt, frame, skip, in_continuation, stack_filter_id);\n@@ -185,1 +179,1 @@\n-bool JfrStackTrace::record_inner(JavaThread* jt, const frame& frame, int skip, int64_t stack_filter_id \/* -1 *\/) {\n+bool JfrStackTrace::record_inner(JavaThread* jt, const frame& frame, int skip, bool in_continuation \/* false *\/, int64_t stack_filter_id \/* -1 *\/) {\n@@ -190,0 +184,1 @@\n+  assert(!in_continuation || is_in_continuation(frame, jt), \"invariant\");\n@@ -192,1 +187,1 @@\n-  JfrVframeStream vfs(jt, frame, false);\n+  JfrVframeStream vfs(jt, frame, in_continuation, false);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTrace.cpp","additions":18,"deletions":23,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -73,2 +73,2 @@\n-  bool record_inner(JavaThread* jt, const frame& frame, int skip, int64_t stack_filter_id = -1);\n-  bool record(JavaThread* jt, const frame& frame, int skip, int64_t stack_filter_id = -1);\n+  bool record_inner(JavaThread* jt, const frame& frame, int skip, bool in_continuation = false, int64_t stack_filter_id = -1);\n+  bool record(JavaThread* jt, const frame& frame, int skip, bool in_continatuion = false, int64_t stack_filter_id = -1);\n@@ -88,1 +88,1 @@\n-  bool record(JavaThread* jt, const frame& frame, const JfrSampleRequest& request);\n+  bool record(JavaThread* jt, const frame& frame, bool in_continuation, const JfrSampleRequest& request);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTrace.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-JfrVframeStream::JfrVframeStream(JavaThread* jt, const frame& fr, bool stop_at_java_call_stub) :\n+JfrVframeStream::JfrVframeStream(JavaThread* jt, const frame& fr, bool in_continuation, bool stop_at_java_call_stub) :\n@@ -47,1 +47,2 @@\n-  _vthread(JfrThreadLocal::is_vthread(jt)), _cont_entry(_vthread ? jt->last_continuation() : nullptr) {\n+  _vthread(in_continuation), _cont_entry(_vthread ? jt->last_continuation() : nullptr) {\n+  assert(!_vthread || JfrThreadLocal::is_vthread(jt), \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrVframeStream.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-  JfrVframeStream(JavaThread* jt, const frame& fr, bool stop_at_java_call_stub);\n+  JfrVframeStream(JavaThread* jt, const frame& fr, bool in_continuation, bool stop_at_java_call_stub);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrVframeStream.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -396,0 +396,12 @@\n+traceid JfrThreadLocal::vthread_id_with_epoch_update(const JavaThread* jt) const {\n+  const traceid tid = vthread_id(jt);\n+  assert(tid != 0, \"invariant\");\n+  if (!is_vthread_excluded()) {\n+    const u2 current_epoch = AccessThreadTraceId::current_epoch();\n+    if (vthread_epoch(jt) != current_epoch) {\n+      set_vthread_epoch_checked(jt, tid, current_epoch);\n+    }\n+  }\n+  return tid;\n+}\n+\n@@ -411,13 +423,1 @@\n-  if (!is_vthread(jt)) {\n-    return jvm_thread_id(tl);\n-  }\n-  \/\/ virtual thread\n-  const traceid tid = vthread_id(jt);\n-  assert(tid != 0, \"invariant\");\n-  if (!tl->is_vthread_excluded()) {\n-    const u2 current_epoch = AccessThreadTraceId::current_epoch();\n-    if (vthread_epoch(jt) != current_epoch) {\n-      set_vthread_epoch_checked(jt, tid, current_epoch);\n-    }\n-  }\n-  return tid;\n+  return is_vthread(jt) ? tl->vthread_id_with_epoch_update(jt) : jvm_thread_id(tl);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -240,0 +240,1 @@\n+  traceid vthread_id_with_epoch_update(const JavaThread* jt) const;\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}