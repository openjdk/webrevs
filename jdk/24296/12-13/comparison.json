{"files":[{"patch":"@@ -38,0 +38,2 @@\n+#if INCLUDE_JFR\n+\n@@ -85,0 +87,2 @@\n+#endif \/\/ INCLUDE_JFR\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+#if INCLUDE_JFR\n+\n@@ -85,0 +87,2 @@\n+#endif \/\/ INCLUDE_JFR\n+\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.inline.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,47 +31,0 @@\n- \/\/ Static helper routines\n-inline Method* frame::interpreter_method(const intptr_t* fp) {\n-  assert(fp != nullptr, \"invariant\");\n-  return reinterpret_cast<Method*>(fp[frame::interpreter_frame_method_offset]);\n-}\n-\n-inline address frame::interpreter_bcp(const intptr_t* fp) {\n-  assert(fp != nullptr, \"invariant\");\n-  return reinterpret_cast<address>(fp[frame::interpreter_frame_bcp_offset]);\n-}\n-\n-inline address frame::interpreter_return_address(const intptr_t* fp) {\n-  assert(fp != nullptr, \"invariant\");\n-  return reinterpret_cast<address>(fp[frame::return_addr_offset]);\n-}\n-\n-inline intptr_t* frame::interpreter_sender_sp(const intptr_t* fp) {\n-  assert(fp != nullptr, \"invariant\");\n-  return reinterpret_cast<intptr_t*>(fp[frame::interpreter_frame_sender_sp_offset]);\n-}\n-\n-inline bool frame::is_interpreter_frame_setup_at(const intptr_t* fp, const void* sp) {\n-  assert(fp != nullptr, \"invariant\");\n-  assert(sp != nullptr, \"invariant\");\n-  return sp <= fp + frame::interpreter_frame_initial_sp_offset;\n-}\n-\n-inline intptr_t* frame::sender_sp(intptr_t* fp) {\n-  assert(fp != nullptr, \"invariant\");\n-  return fp + frame::sender_sp_offset;\n-}\n-\n-inline intptr_t* frame::link(const intptr_t* fp) {\n-  assert(fp != nullptr, \"invariant\");\n-  return reinterpret_cast<intptr_t*>(fp[frame::link_offset]);\n-}\n-\n-inline address frame::return_address(const intptr_t* sp) {\n-  assert(sp != nullptr, \"invariant\");\n-  return reinterpret_cast<address>(sp[-1]);\n-}\n-\n-inline intptr_t* frame::fp(const intptr_t* sp) {\n-  assert(sp != nullptr, \"invariant\");\n-  return reinterpret_cast<intptr_t*>(sp[-2]);\n-}\n-\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.inline.hpp","additions":0,"deletions":47,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -509,0 +509,1 @@\n+#if INCLUDE_JFR\n@@ -519,0 +520,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/runtime\/frame.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}