{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+ * @library \/test\/lib\n+ * @run junit TargetDirectory\n@@ -29,0 +31,4 @@\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.junit.jupiter.api.io.CleanupMode;\n+import org.junit.jupiter.api.condition.DisabledIf;\n@@ -43,0 +49,1 @@\n+import jdk.test.lib.Platform;\n@@ -44,4 +51,11 @@\n-public class TargetDirectory {\n-    public static void main(String[] args) throws Exception {\n-        \/\/ Target directory exists and is writable\n-        Path dir = Path.of(\"target\");\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class TargetDirectory {\n+\n+    @TempDir(cleanup = CleanupMode.ALWAYS)\n+    Path tempDir;\n+\n+    @Test\n+    void testWritableDirectory() throws Exception {\n+        Path dir = tempDir.resolve(\"target\");\n@@ -50,4 +64,8 @@\n-        if (!Files.exists(tmp.toPath())) {\n-            throw new RuntimeException(\"Temp file not created\");\n-        }\n-        tmp.delete();\n+        assertTrue(Files.exists(tmp.toPath()), \"Temp file not created\");\n+    }\n+\n+    @Test\n+    @DisabledIf(\"jdk.test.lib.Platform#isRoot\")\n+    void testReadOnlyDirectory() throws Exception {\n+        Path dir = tempDir.resolve(\"target\");\n+        File target = Files.createDirectory(dir).toFile();\n@@ -55,1 +73,1 @@\n-        \/\/ Make target directory read-only\n+        \/\/ Make 'target' read-only\n@@ -60,1 +78,1 @@\n-            perms.add(PosixFilePermission.valueOf(\"OWNER_READ\"));\n+            perms.add(PosixFilePermission.OWNER_READ);\n@@ -79,8 +97,3 @@\n-        \/\/ Target directory exists but is read-only\n-        try {\n-            File.createTempFile(\"readonly\", null, target);\n-            throw new RuntimeException(\"Exception not thrown for read-only target directory\");\n-        } catch (IOException expected) {\n-        } finally {\n-            target.delete();\n-        }\n+        assertThrows(IOException.class,\n+            () -> File.createTempFile(\"readonly\", null, target));\n+    }\n@@ -88,6 +101,5 @@\n-        \/\/ Target directory does not exist\n-        try {\n-            File.createTempFile(\"nonexistent\", null, new File(\"void\"));\n-            throw new RuntimeException(\"Exception not thrown for non-existent target directory\");\n-        } catch (IOException expected) {\n-        }\n+    @Test\n+    void testNonExistentDirectory() {\n+        assertThrows(IOException.class,\n+            () -> File.createTempFile(\"nonexistent\", null, new File(tempDir.toFile(), \"void\")));\n+    }\n@@ -95,9 +107,5 @@\n-        \/\/ Target is a file, not a directory\n-        target = Files.createFile(Path.of(\"file\")).toFile();\n-        try {\n-            File.createTempFile(\"file\", null, target);\n-            throw new RuntimeException(\"Exception not thrown for file target\");\n-        } catch (IOException expected) {\n-        } finally {\n-            target.delete();\n-        }\n+    @Test\n+    void testTargetIsFile() throws Exception {\n+        File target = Files.createFile(tempDir.resolve(\"file\")).toFile();\n+        assertThrows(IOException.class,\n+            () -> File.createTempFile(\"file\", null, target));\n","filename":"test\/jdk\/java\/io\/File\/createTempFile\/TargetDirectory.java","additions":42,"deletions":34,"binary":false,"changes":76,"status":"modified"}]}