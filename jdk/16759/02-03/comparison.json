{"files":[{"patch":"@@ -2598,2 +2598,2 @@\n-  DefaultClassUnloadingContext ctx(workers()->active_workers(),\n-                                   false \/* lock_codeblob_free_separately *\/);\n+  ClassUnloadingContext ctx(workers()->active_workers(),\n+                            false \/* lock_codeblob_free_separately *\/);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1771,2 +1771,2 @@\n-    DefaultClassUnloadingContext ctx(1 \/* num_nmethod_unlink_workers *\/,\n-                                     false \/* lock_codeblob_free_separately *\/);\n+    ClassUnloadingContext ctx(1 \/* num_nmethod_unlink_workers *\/,\n+                              false \/* lock_codeblob_free_separately *\/);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,13 +35,1 @@\n-ClassUnloadingContext::ClassUnloadingContext() {\n-  assert(_context == nullptr, \"context already set\");\n-  _context = this;\n-}\n-\n-ClassUnloadingContext::~ClassUnloadingContext() {\n-  assert(_context == this, \"context not set correctly\");\n-  _context = nullptr;\n-}\n-\n-\n-DefaultClassUnloadingContext::DefaultClassUnloadingContext(uint num_workers, bool lock_codeblob_free_separately) :\n-  ClassUnloadingContext(),\n+ClassUnloadingContext::ClassUnloadingContext(uint num_workers, bool lock_codeblob_free_separately) :\n@@ -53,0 +41,3 @@\n+  assert(_context == nullptr, \"context already set\");\n+  _context = this;\n+\n@@ -61,1 +52,1 @@\n-DefaultClassUnloadingContext::~DefaultClassUnloadingContext() {\n+ClassUnloadingContext::~ClassUnloadingContext() {\n@@ -66,0 +57,3 @@\n+\n+  assert(_context == this, \"context not set correctly\");\n+  _context = nullptr;\n@@ -68,1 +62,1 @@\n-bool DefaultClassUnloadingContext::has_unloaded_classes() const {\n+bool ClassUnloadingContext::has_unloaded_classes() const {\n@@ -72,1 +66,1 @@\n-void DefaultClassUnloadingContext::register_unloading_class_loader_data(ClassLoaderData* cld) {\n+void ClassUnloadingContext::register_unloading_class_loader_data(ClassLoaderData* cld) {\n@@ -81,1 +75,1 @@\n-void DefaultClassUnloadingContext::purge_class_loader_data() {\n+void ClassUnloadingContext::purge_class_loader_data() {\n@@ -91,1 +85,1 @@\n-void DefaultClassUnloadingContext::classes_unloading_do(void f(Klass* const)) {\n+void ClassUnloadingContext::classes_unloading_do(void f(Klass* const)) {\n@@ -99,1 +93,1 @@\n-void DefaultClassUnloadingContext::register_unlinked_nmethod(nmethod* nm) {\n+void ClassUnloadingContext::register_unlinked_nmethod(nmethod* nm) {\n@@ -113,1 +107,1 @@\n-void DefaultClassUnloadingContext::purge_nmethods() {\n+void ClassUnloadingContext::purge_nmethods() {\n@@ -120,2 +114,1 @@\n-    for (int j = 0; j < set->length(); ++j) {\n-      nmethod* nm = set->at(j);\n+    for (nmethod* nm : *set) {\n@@ -130,1 +123,1 @@\n-void DefaultClassUnloadingContext::free_code_blobs() {\n+void ClassUnloadingContext::free_code_blobs() {\n@@ -138,1 +131,1 @@\n-  bool is_parallel = _num_nmethod_unlink_workers != 1;\n+  bool is_parallel = _num_nmethod_unlink_workers > 1;\n@@ -165,6 +158,10 @@\n-  \/\/ And free.\n-  {\n-    ConditionalMutexLocker ml_outer(CodeCache_lock, !_lock_codeblob_free_separately, Mutex::_no_safepoint_check_flag);\n-    for (int i = 0; i < nmethod_set->length(); ++i) {\n-      ConditionalMutexLocker ml_inner(CodeCache_lock, _lock_codeblob_free_separately, Mutex::_no_safepoint_check_flag);\n-      CodeCache::free(nmethod_set->at(i));\n+  \/\/ And free. Duplicate loop for clarity depending on where we want the locking.\n+  if (_lock_codeblob_free_separately) {\n+    for (nmethod* nm : *nmethod_set) {\n+      MutexLocker ml(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n+      CodeCache::free(nm);\n+    }\n+  } else {\n+    MutexLocker ml(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n+    for (nmethod* nm : *nmethod_set) {\n+      CodeCache::free(nm);\n","filename":"src\/hotspot\/share\/gc\/shared\/classUnloadingContext.cpp","additions":27,"deletions":30,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"memory\/allocation.hpp\"\n@@ -35,1 +36,0 @@\n-protected:\n@@ -38,26 +38,0 @@\n-  ClassUnloadingContext();\n-  virtual ~ClassUnloadingContext();\n-\n-public:\n-  static ClassUnloadingContext* context() { assert(_context != nullptr, \"context not set\"); return _context; }\n-\n-  \/\/ Has class unloading occurred?\n-  virtual bool has_unloaded_classes() const = 0;\n-\n-  virtual void register_unloading_class_loader_data(ClassLoaderData* cld) = 0;\n-  virtual void purge_class_loader_data() = 0;\n-\n-  \/\/ Apply f on all Klasses of all unloading ClassLoaderDatas.\n-  virtual void classes_unloading_do(void f(Klass* const)) = 0;\n-\n-  virtual void register_unlinked_nmethod(nmethod* nm) = 0;\n-  virtual void purge_nmethods() = 0;\n-  virtual void free_code_blobs() = 0;\n-\n-  void purge_and_free_nmethods() {\n-    purge_nmethods();\n-    free_code_blobs();\n-  }\n-};\n-\n-class DefaultClassUnloadingContext : public ClassUnloadingContext {\n@@ -66,1 +40,1 @@\n-  uint _num_nmethod_unlink_workers;\n+  const uint _num_nmethod_unlink_workers;\n@@ -74,0 +48,2 @@\n+  static ClassUnloadingContext* context() { assert(_context != nullptr, \"context not set\"); return _context; }\n+\n@@ -77,4 +53,5 @@\n-  \/\/     the CodeCache_lock during the whole operation or per code blob free operation.\n-  DefaultClassUnloadingContext(uint num_nmethod_unlink_workers,\n-                               bool lock_codeblob_free_separately);\n-  ~DefaultClassUnloadingContext();\n+  \/\/     the CodeCache_lock during the whole operation (=false) or per code blob\n+  \/\/     free operation (=true).\n+  ClassUnloadingContext(uint num_nmethod_unlink_workers,\n+                        bool lock_codeblob_free_separately);\n+  ~ClassUnloadingContext();\n@@ -82,1 +59,1 @@\n-  bool has_unloaded_classes() const override;\n+  bool has_unloaded_classes() const;\n@@ -84,2 +61,2 @@\n-  void register_unloading_class_loader_data(ClassLoaderData* cld) override;\n-  void purge_class_loader_data() override;\n+  void register_unloading_class_loader_data(ClassLoaderData* cld);\n+  void purge_class_loader_data();\n@@ -87,1 +64,1 @@\n-  void classes_unloading_do(void f(Klass* const)) override;\n+  void classes_unloading_do(void f(Klass* const));\n@@ -90,3 +67,8 @@\n-  void register_unlinked_nmethod(nmethod* nm) override;\n-  void purge_nmethods() override;\n-  void free_code_blobs() override;\n+  void register_unlinked_nmethod(nmethod* nm);\n+  void purge_nmethods();\n+  void free_code_blobs();\n+\n+  void purge_and_free_nmethods() {\n+    purge_nmethods();\n+    free_code_blobs();\n+  }\n@@ -95,1 +77,1 @@\n-#endif \/\/ SHARE_GC_SHARED_CLASSUNLOADINGCONTEXT_HPP\n\\ No newline at end of file\n+#endif \/\/ SHARE_GC_SHARED_CLASSUNLOADINGCONTEXT_HPP\n","filename":"src\/hotspot\/share\/gc\/shared\/classUnloadingContext.hpp","additions":22,"deletions":40,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -542,2 +542,2 @@\n-    DefaultClassUnloadingContext ctx(1 \/* num_nmethod_unlink_workers *\/,\n-                                     false \/* lock_codeblob_free_separately *\/);\n+    ClassUnloadingContext ctx(1 \/* num_nmethod_unlink_workers *\/,\n+                              false \/* lock_codeblob_free_separately *\/);\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1828,2 +1828,2 @@\n-  DefaultClassUnloadingContext ctx(_workers->active_workers(),\n-                                   false \/* lock_codeblob_free_separately *\/);\n+  ClassUnloadingContext ctx(_workers->active_workers(),\n+                            false \/* lock_codeblob_free_separately *\/);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -142,2 +142,2 @@\n-  DefaultClassUnloadingContext ctx(heap->workers()->active_workers(),\n-                                   true \/* lock_codeblob_free_separately *\/);\n+  ClassUnloadingContext ctx(heap->workers()->active_workers(),\n+                            true \/* lock_codeblob_free_separately *\/);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUnload.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -324,2 +324,2 @@\n-  DefaultClassUnloadingContext ctx(_workers.active_workers(),\n-                                   true \/* lock_codeblob_free_separately *\/);\n+  ClassUnloadingContext ctx(_workers.active_workers(),\n+                            true \/* lock_codeblob_free_separately *\/);\n","filename":"src\/hotspot\/share\/gc\/x\/xHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1320,2 +1320,2 @@\n-  DefaultClassUnloadingContext ctx(_workers.active_workers(),\n-                                   true \/* lock_codeblob_free_separately *\/);\n+  ClassUnloadingContext ctx(_workers.active_workers(),\n+                            true \/* lock_codeblob_free_separately *\/);\n","filename":"src\/hotspot\/share\/gc\/z\/zGeneration.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}