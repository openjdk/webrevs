{"files":[{"patch":"@@ -57,3 +57,15 @@\n-  bool _present;       \/\/ whether this is an empty set\n-  RangeInt<U> _bounds; \/\/ The bounds must be in the same half of the integer domain (see TypeInt)\n-  KnownBits<U> _bits;\n+  const bool _present;       \/\/ whether this is an empty set\n+  const RangeInt<U> _bounds; \/\/ The bounds must be in the same half of the integer domain (see TypeInt)\n+  const KnownBits<U> _bits;\n+\n+  SimpleCanonicalResult(bool present, const RangeInt<U>& bounds, const KnownBits<U>& bits)\n+    : _present(present), _bounds(bounds), _bits(bits) {\n+    if (!present) {\n+      return;\n+    }\n+    \/\/ Do some verification\n+    assert(bits.is_satisfied_by(bounds._lo) && bits.is_satisfied_by(bounds._hi), \"must be canonical\");\n+    \/\/ 0b1000...\n+    constexpr U mid_point = (std::numeric_limits<U>::max() >> 1) + U(1);\n+    assert((bounds._lo < mid_point) == (bounds._hi < mid_point), \"must be a simple interval\");\n+  }\n@@ -66,1 +78,1 @@\n-    return {false, {}, {}};\n+    return SimpleCanonicalResult(false, {}, {});\n@@ -254,1 +266,1 @@\n-    U highest_bit = (std::numeric_limits<U>::max() >> 1) + U(1);\n+    constexpr U highest_bit = (std::numeric_limits<U>::max() >> 1) + U(1);\n@@ -401,1 +413,1 @@\n-      return {canonicalized_bounds._present, canonicalized_bounds._result, canonicalized_bits._result};\n+      return SimpleCanonicalResult<U>(canonicalized_bounds._present, canonicalized_bounds._result, canonicalized_bits._result);\n@@ -405,1 +417,1 @@\n-      return {canonicalized_bits._present, canonicalized_bounds._result, canonicalized_bits._result};\n+      return SimpleCanonicalResult<U>(canonicalized_bits._present, canonicalized_bounds._result, canonicalized_bits._result);\n","filename":"src\/hotspot\/share\/opto\/rangeinference.cpp","additions":19,"deletions":7,"binary":false,"changes":26,"status":"modified"}]}