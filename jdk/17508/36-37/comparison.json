{"files":[{"patch":"@@ -226,1 +226,1 @@\n-    juint first_violation = count_leading_zeros<U>(one_violation); \/\/ 1\n+    juint first_violation = count_leading_zeros(one_violation); \/\/ 1\n@@ -260,1 +260,1 @@\n-    juint first_violation = count_leading_zeros<U>(zero_violation);\n+    juint first_violation = count_leading_zeros(zero_violation);\n@@ -344,1 +344,1 @@\n-                                  : ~(std::numeric_limits<U>::max() >> count_leading_zeros<U>(mismatch));\n+                                  : ~(std::numeric_limits<U>::max() >> count_leading_zeros(mismatch));\n","filename":"src\/hotspot\/share\/opto\/rangeinference.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,2 @@\n-template <typename T> unsigned count_leading_zeros(T v) {\n+template <typename T, ENABLE_IF(std::is_arithmetic<T>::value)>\n+unsigned count_leading_zeros(T v) {\n","filename":"src\/hotspot\/share\/utilities\/count_leading_zeros.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  constexpr operator int() const {\n+  explicit constexpr operator int() const {\n@@ -63,8 +63,4 @@\n-  constexpr bool operator<(intn_t o) const {\n-    \/\/ Shift the highest bit of intn_t to the highest bit of the int representation\n-    int shift = 32 - n;\n-    return int(_v << shift) < int(o._v << shift);\n-  }\n-  constexpr bool operator>(intn_t o) const { return o < *this; }\n-  constexpr bool operator<=(intn_t o) const { return !(o < *this); }\n-  constexpr bool operator>=(intn_t o) const { return !(*this < o); }\n+  constexpr bool operator<(intn_t o) const { return int(*this) < int(o); }\n+  constexpr bool operator>(intn_t o) const { return int(*this) > int(o); }\n+  constexpr bool operator<=(intn_t o) const { return int(*this) <= int(o); }\n+  constexpr bool operator>=(intn_t o) const { return int(*this) >= int(o); }\n@@ -73,0 +69,3 @@\n+template <unsigned int n>\n+unsigned count_leading_zeros(uintn_t<n>);\n+\n@@ -84,2 +83,1 @@\n-  template <class T>\n-  friend unsigned count_leading_zeros(T);\n+  friend unsigned count_leading_zeros<n>(uintn_t<n>);\n@@ -93,1 +91,1 @@\n-  constexpr operator uint() const { return _v & _mask; }\n+  explicit constexpr operator uint() const { return _v & _mask; }\n@@ -100,1 +98,1 @@\n-  constexpr bool operator!=(uintn_t o) const { return !(*this == o); }\n+  constexpr bool operator!=(uintn_t o) const { return (_v & _mask) != (o._v & _mask); }\n@@ -102,3 +100,3 @@\n-  constexpr bool operator>(uintn_t o) const { return o < *this; }\n-  constexpr bool operator<=(uintn_t o) const { return !(o < *this); }\n-  constexpr bool operator>=(uintn_t o) const { return !(*this < o); }\n+  constexpr bool operator>(uintn_t o) const { return (_v & _mask) > (o._v & _mask); }\n+  constexpr bool operator<=(uintn_t o) const { return (_v & _mask) <= (o._v & _mask); }\n+  constexpr bool operator>=(uintn_t o) const { return (_v & _mask) >= (o._v & _mask); }\n@@ -138,18 +136,3 @@\n-template <>\n-inline unsigned count_leading_zeros<uintn_t<1>>(uintn_t<1> v) {\n-  return count_leading_zeros<unsigned int>(v._v & uintn_t<1>::_mask) - (32 - 1);\n-}\n-\n-template <>\n-inline unsigned count_leading_zeros<uintn_t<2>>(uintn_t<2> v) {\n-  return count_leading_zeros<unsigned int>(v._v & uintn_t<2>::_mask) - (32 - 2);\n-}\n-\n-template <>\n-inline unsigned count_leading_zeros<uintn_t<3>>(uintn_t<3> v) {\n-  return count_leading_zeros<unsigned int>(v._v & uintn_t<3>::_mask) - (32 - 3);\n-}\n-\n-template <>\n-inline unsigned count_leading_zeros<uintn_t<4>>(uintn_t<4> v) {\n-  return count_leading_zeros<unsigned int>(v._v & uintn_t<4>::_mask) - (32 - 4);\n+template <unsigned int n>\n+inline unsigned count_leading_zeros(uintn_t<n> v) {\n+  return count_leading_zeros<unsigned int>(v._v & uintn_t<n>::_mask) - (32 - n);\n","filename":"src\/hotspot\/share\/utilities\/intn_t.hpp","additions":17,"deletions":34,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"utilities\/intn_t.hpp\"\n+#include \"unittest.hpp\"\n+\n+template <unsigned int n>\n+static void test_intn_t() {\n+  static_assert(std::numeric_limits<intn_t<n>>::min() <= intn_t<n>(-1) && intn_t<n>(-1) < intn_t<n>(0) && intn_t<n>(0) <= std::numeric_limits<intn_t<n>>::max(), \"basic sanity\");\n+  for (int i = intn_t<n>::min; i <= intn_t<n>::max; i++) {\n+    ASSERT_EQ(i, int(intn_t<n>(i)));\n+    if (i > intn_t<n>::min) {\n+      ASSERT_TRUE(intn_t<n>(i - 1) < intn_t<n>(i));\n+    }\n+    if (i < intn_t<n>::max) {\n+      ASSERT_TRUE(intn_t<n>(i) < intn_t<n>(i + 1));\n+    }\n+  }\n+}\n+\n+TEST(utilities, intn_t) {\n+  test_intn_t<1>();\n+  test_intn_t<2>();\n+  test_intn_t<3>();\n+  test_intn_t<4>();\n+  test_intn_t<5>();\n+  test_intn_t<6>();\n+  test_intn_t<7>();\n+  test_intn_t<8>();\n+}\n","filename":"test\/hotspot\/gtest\/utilities\/test_intn_t.cpp","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"}]}