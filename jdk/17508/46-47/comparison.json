{"files":[{"patch":"@@ -251,1 +251,1 @@\n-    \/\/      lo = 1 0 0 1 0 0 1 0\n+    \/\/      lo = 1 1 0 0 0 1 1 0\n@@ -253,7 +253,7 @@\n-    \/\/    ones = 0 1 0 0 1 0 1 0\n-    \/\/   1-vio = 0 1 0 0 1 0 0 0\n-    \/\/   0-vio = 0 0 0 0 0 0 0 0\n-    \/\/ Since the result must have the 2nd bit set, it must be at least:\n-    \/\/           1 1 0 0 0 0 0 0\n-    \/\/ This value must satisfy zeros, because all bits before the 2nd bit have\n-    \/\/ already satisfied zeros, and all bits after the 2nd bit are all 0 now.\n+    \/\/    ones = 0 1 0 1 0 0 1 0\n+    \/\/   1-vio = 0 0 0 1 0 0 0 0\n+    \/\/   0-vio = 0 0 0 0 0 1 0 0\n+    \/\/ Since the result must have the 4th bit set, it must be at least:\n+    \/\/           1 1 0 1 0 0 0 0\n+    \/\/ This value must satisfy zeros, because all bits before the 4th bit have\n+    \/\/ already satisfied zeros, and all bits after the 4th bit are all 0 now.\n@@ -263,2 +263,2 @@\n-    \/\/ highest bit down (0-based), since i == 2, first_difference == 1\n-    juint first_violation = count_leading_zeros(one_violation); \/\/ 1\n+    \/\/ highest bit down (0-based), since i == 4, first_violation == 3\n+    juint first_violation = count_leading_zeros(one_violation);\n@@ -267,1 +267,4 @@\n-    \/\/           0 1 0 0 0 0 0 0\n+    \/\/ This is the bit at which we want to change the bit 0 in lo to a 1, and\n+    \/\/ all bits after to zero. This is similar to an operation that aligns lo\n+    \/\/ up to this modulo\n+    \/\/           0 0 0 1 0 0 0 0\n@@ -270,2 +273,3 @@\n-    \/\/ that the result should not be smaller than this\n-    \/\/           1 1 0 0 0 0 0 0\n+    \/\/ that the result should not be smaller than this. This is a standard\n+    \/\/ operation to align a value up to a certain power of 2\n+    \/\/           1 1 0 1 0 0 0 0\n@@ -273,1 +277,3 @@\n-    \/\/           1 1 0 0 1 0 1 0\n+    \/\/ Our current new_lo satisfies zeros, just OR it with ones to obtain the\n+    \/\/ correct result\n+    \/\/           1 1 0 1 0 0 1 0\n@@ -313,1 +319,2 @@\n-    \/\/ that satisfies bits._zeros\n+    \/\/ that satisfies bits._zeros. Similar to the above case, this is similar\n+    \/\/ to aligning lo upto alignment\n","filename":"src\/hotspot\/share\/opto\/rangeinference.cpp","additions":22,"deletions":15,"binary":false,"changes":37,"status":"modified"}]}