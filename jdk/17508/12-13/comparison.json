{"files":[{"patch":"@@ -991,2 +991,2 @@\n-    const Type* t1x = TypeInt::make(0, round_down_power_of_2(t1i->_hi) + (round_down_power_of_2(t1i->_hi) - 1), t1i->_widen);\n-    const Type* t2x = TypeInt::make(0, round_down_power_of_2(t2i->_hi) + (round_down_power_of_2(t2i->_hi) - 1), t2i->_widen);\n+    const TypeInt* t1x = TypeInt::make(0, round_down_power_of_2(t1i->_hi) + (round_down_power_of_2(t1i->_hi) - 1), t1i->_widen);\n+    const TypeInt* t2x = TypeInt::make(0, round_down_power_of_2(t2i->_hi) + (round_down_power_of_2(t2i->_hi) - 1), t2i->_widen);\n@@ -1076,2 +1076,2 @@\n-    const Type* t1x = TypeLong::make(0, round_down_power_of_2(t1l->_hi) + (round_down_power_of_2(t1l->_hi) - 1), t1l->_widen);\n-    const Type* t2x = TypeLong::make(0, round_down_power_of_2(t2l->_hi) + (round_down_power_of_2(t2l->_hi) - 1), t2l->_widen);\n+    const TypeLong* t1x = TypeLong::make(0, round_down_power_of_2(t1l->_hi) + (round_down_power_of_2(t1l->_hi) - 1), t1l->_widen);\n+    const TypeLong* t2x = TypeLong::make(0, round_down_power_of_2(t2l->_hi) + (round_down_power_of_2(t2l->_hi) - 1), t2l->_widen);\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -324,1 +324,1 @@\n-        const TypeInt* ti = TypeInt::make(checked_cast<jint>(tl->_lo), checked_cast<jint>(tl->_hi), tl->_widen)->is_int();\n+        const TypeInt* ti = TypeInt::make(checked_cast<jint>(tl->_lo), checked_cast<jint>(tl->_hi), tl->_widen);\n","filename":"src\/hotspot\/share\/opto\/castnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4485,1 +4485,1 @@\n-  const TypeInt* iidxtype = TypeInt::make(0, index_max, Type::WidenMax)->is_int();\n+  const TypeInt* iidxtype = TypeInt::make(0, index_max, Type::WidenMax);\n@@ -4502,1 +4502,1 @@\n-  const TypeLong* ltype = TypeLong::make(itype->_lo, itype->_hi, itype->_widen)->is_long();\n+  const TypeLong* ltype = TypeLong::make(itype->_lo, itype->_hi, itype->_widen);\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -651,2 +651,2 @@\n-  rx = TypeInteger::make(rxlo, rxhi, widen, out_bt)->is_integer(out_bt);\n-  ry = TypeInteger::make(rylo, ryhi, widen, out_bt)->is_integer(out_bt);\n+  rx = TypeInteger::make(rxlo, rxhi, widen, out_bt);\n+  ry = TypeInteger::make(rylo, ryhi, widen, out_bt);\n@@ -794,1 +794,1 @@\n-    ti = TypeInt::make((jint)tl->_lo, (jint)tl->_hi, tl->_widen)->is_int();\n+    ti = TypeInt::make((jint)tl->_lo, (jint)tl->_hi, tl->_widen);\n","filename":"src\/hotspot\/share\/opto\/convertnode.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3887,1 +3887,1 @@\n-      const TypeInt* tlcon = TypeInt::make(0, size_max, Type::WidenMin)->is_int();\n+      const TypeInt* tlcon = TypeInt::make(0, size_max, Type::WidenMin);\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -679,1 +679,1 @@\n-                  return TypeInt::make(val_t->_lo + 1, val_t->_hi, val_t->_widen)->is_int();\n+                  return TypeInt::make(val_t->_lo + 1, val_t->_hi, val_t->_widen);\n@@ -681,1 +681,1 @@\n-                  return TypeInt::make(val_t->_lo, val_t->_hi - 1, val_t->_widen)->is_int();\n+                  return TypeInt::make(val_t->_lo, val_t->_hi - 1, val_t->_widen);\n@@ -711,1 +711,1 @@\n-            const TypeInt* rtn_t = TypeInt::make(lo, hi, cmp2_t->_widen)->is_int();\n+            const TypeInt* rtn_t = TypeInt::make(lo, hi, cmp2_t->_widen);\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -801,1 +801,1 @@\n-      idx_type = TypeInt::make(limit_lo - stride, limit_hi - stride, limit_type->_widen)->is_int();\n+      idx_type = TypeInt::make(limit_lo - stride, limit_hi - stride, limit_type->_widen);\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -944,1 +944,1 @@\n-  const TypeInteger* inner_iters_actual_range = TypeInteger::make(0, iters_limit, Type::WidenMin, bt)->is_integer(bt);\n+  const TypeInteger* inner_iters_actual_range = TypeInteger::make(0, iters_limit, Type::WidenMin, bt);\n@@ -955,1 +955,1 @@\n-    const TypeInt* inner_iters_actual_int_range = TypeInt::make(0, iters_limit, Type::WidenMin)->is_int();\n+    const TypeInt* inner_iters_actual_int_range = TypeInt::make(0, iters_limit, Type::WidenMin);\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  const TypeLong* lidxtype = TypeLong::make(CONST64(0), index_max, Type::WidenMax)->is_long();\n+  const TypeLong* lidxtype = TypeLong::make(CONST64(0), index_max, Type::WidenMax);\n","filename":"src\/hotspot\/share\/opto\/macroArrayCopy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1400,1 +1400,1 @@\n-    const TypeInt* ti = TypeInt::make(lo, hi, MAX2(r1->_widen,r2->_widen))->is_int();\n+    const TypeInt* ti = TypeInt::make(lo, hi, MAX2(r1->_widen,r2->_widen));\n@@ -1470,1 +1470,1 @@\n-    const TypeLong* tl = TypeLong::make(lo, hi, MAX2(r1->_widen,r2->_widen))->is_long();\n+    const TypeLong* tl = TypeLong::make(lo, hi, MAX2(r1->_widen,r2->_widen));\n@@ -1656,1 +1656,1 @@\n-    const TypeInt* ti = TypeInt::make(lo, hi, MAX2(r1->_widen,r2->_widen))->is_int();\n+    const TypeInt* ti = TypeInt::make(lo, hi, MAX2(r1->_widen,r2->_widen));\n@@ -1803,1 +1803,1 @@\n-    const TypeLong* tl = TypeLong::make(lo, hi, MAX2(r1->_widen,r2->_widen))->is_long();\n+    const TypeLong* tl = TypeLong::make(lo, hi, MAX2(r1->_widen,r2->_widen));\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -489,1 +489,1 @@\n-    return CT::make(prototype, nt->_widen + 1);\n+    return CT::try_make(prototype, nt->_widen + 1);\n@@ -509,1 +509,1 @@\n-  return CT::make(prototype, Type::WidenMax);\n+  return CT::try_make(prototype, Type::WidenMax);\n","filename":"src\/hotspot\/share\/opto\/rangeinference.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -851,2 +851,2 @@\n-        const TypeInt* tr1 = TypeInt::make(lo_tr1, hi_tr1, w)->is_int();\n-        const TypeInt* tr2 = TypeInt::make(lo_tr2, hi_tr2, w)->is_int();\n+        const TypeInt* tr1 = TypeInt::make(lo_tr1, hi_tr1, w);\n+        const TypeInt* tr2 = TypeInt::make(lo_tr2, hi_tr2, w);\n@@ -1463,2 +1463,2 @@\n-        const TypeInt* tr1 = TypeInt::make(min_jint, hi_int, w)->is_int();\n-        const TypeInt* tr2 = TypeInt::make(lo_int, max_jint, w)->is_int();\n+        const TypeInt* tr1 = TypeInt::make(min_jint, hi_int, w);\n+        const TypeInt* tr2 = TypeInt::make(lo_int, max_jint, w);\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -477,17 +477,17 @@\n-  TypeInt::BOOL     = TypeInt::make( 0, 1, WidenMin)->is_int();  \/\/ 0 or 1, FALSE or TRUE.\n-  TypeInt::CC       = TypeInt::make(-1, 1, WidenMin)->is_int();  \/\/ -1, 0 or 1, condition codes\n-  TypeInt::CC_LT    = TypeInt::make(-1,-1, WidenMin)->is_int();  \/\/ == TypeInt::MINUS_1\n-  TypeInt::CC_GT    = TypeInt::make( 1, 1, WidenMin)->is_int();  \/\/ == TypeInt::ONE\n-  TypeInt::CC_EQ    = TypeInt::make( 0, 0, WidenMin)->is_int();  \/\/ == TypeInt::ZERO\n-  TypeInt::CC_NE    = TypeInt::make(TypeIntPrototype<jint, juint>{{-1, 1}, {1, max_juint}, {0, 1}}, WidenMin)->is_int();\n-  TypeInt::CC_LE    = TypeInt::make(-1, 0, WidenMin)->is_int();\n-  TypeInt::CC_GE    = TypeInt::make( 0, 1, WidenMin)->is_int();  \/\/ == TypeInt::BOOL\n-  TypeInt::BYTE     = TypeInt::make(-128, 127,     WidenMin)->is_int(); \/\/ Bytes\n-  TypeInt::UBYTE    = TypeInt::make(0, 255,        WidenMin)->is_int(); \/\/ Unsigned Bytes\n-  TypeInt::CHAR     = TypeInt::make(0, 65535,      WidenMin)->is_int(); \/\/ Java chars\n-  TypeInt::SHORT    = TypeInt::make(-32768, 32767, WidenMin)->is_int(); \/\/ Java shorts\n-  TypeInt::NON_ZERO = TypeInt::make(TypeIntPrototype<jint, juint>{{min_jint, max_jint}, {1, max_juint}, {0, 0}}, WidenMin)->is_int();\n-  TypeInt::POS      = TypeInt::make(0, max_jint,   WidenMin)->is_int(); \/\/ Non-neg values\n-  TypeInt::POS1     = TypeInt::make(1, max_jint,   WidenMin)->is_int(); \/\/ Positive values\n-  TypeInt::INT      = TypeInt::make(min_jint, max_jint, WidenMax)->is_int(); \/\/ 32-bit integers\n-  TypeInt::SYMINT   = TypeInt::make(-max_jint, max_jint, WidenMin)->is_int(); \/\/ symmetric range\n+  TypeInt::BOOL     = TypeInt::make( 0, 1, WidenMin);  \/\/ 0 or 1, FALSE or TRUE.\n+  TypeInt::CC       = TypeInt::make(-1, 1, WidenMin);  \/\/ -1, 0 or 1, condition codes\n+  TypeInt::CC_LT    = TypeInt::make(-1,-1, WidenMin);  \/\/ == TypeInt::MINUS_1\n+  TypeInt::CC_GT    = TypeInt::make( 1, 1, WidenMin);  \/\/ == TypeInt::ONE\n+  TypeInt::CC_EQ    = TypeInt::make( 0, 0, WidenMin);  \/\/ == TypeInt::ZERO\n+  TypeInt::CC_NE    = TypeInt::try_make(TypeIntPrototype<jint, juint>{{-1, 1}, {1, max_juint}, {0, 1}}, WidenMin)->is_int();\n+  TypeInt::CC_LE    = TypeInt::make(-1, 0, WidenMin);\n+  TypeInt::CC_GE    = TypeInt::make( 0, 1, WidenMin);  \/\/ == TypeInt::BOOL\n+  TypeInt::BYTE     = TypeInt::make(-128, 127,     WidenMin); \/\/ Bytes\n+  TypeInt::UBYTE    = TypeInt::make(0, 255,        WidenMin); \/\/ Unsigned Bytes\n+  TypeInt::CHAR     = TypeInt::make(0, 65535,      WidenMin); \/\/ Java chars\n+  TypeInt::SHORT    = TypeInt::make(-32768, 32767, WidenMin); \/\/ Java shorts\n+  TypeInt::NON_ZERO = TypeInt::try_make(TypeIntPrototype<jint, juint>{{min_jint, max_jint}, {1, max_juint}, {0, 0}}, WidenMin)->is_int();\n+  TypeInt::POS      = TypeInt::make(0, max_jint,   WidenMin); \/\/ Non-neg values\n+  TypeInt::POS1     = TypeInt::make(1, max_jint,   WidenMin); \/\/ Positive values\n+  TypeInt::INT      = TypeInt::make(min_jint, max_jint, WidenMax); \/\/ 32-bit integers\n+  TypeInt::SYMINT   = TypeInt::make(-max_jint, max_jint, WidenMin); \/\/ symmetric range\n@@ -508,6 +508,6 @@\n-  TypeLong::NON_ZERO = TypeLong::make(TypeIntPrototype<jlong, julong>{{min_jlong, max_jlong}, {1, max_julong}, {0, 0}}, WidenMin)->is_long();\n-  TypeLong::POS      = TypeLong::make(0, max_jlong, WidenMin)->is_long(); \/\/ Non-neg values\n-  TypeLong::NEG      = TypeLong::make(min_jlong, -1, WidenMin)->is_long();\n-  TypeLong::LONG     = TypeLong::make(min_jlong, max_jlong, WidenMax)->is_long(); \/\/ 64-bit integers\n-  TypeLong::INT      = TypeLong::make((jlong)min_jint, (jlong)max_jint,WidenMin)->is_long();\n-  TypeLong::UINT     = TypeLong::make(0, (jlong)max_juint, WidenMin)->is_long();\n+  TypeLong::NON_ZERO = TypeLong::try_make(TypeIntPrototype<jlong, julong>{{min_jlong, max_jlong}, {1, max_julong}, {0, 0}}, WidenMin)->is_long();\n+  TypeLong::POS      = TypeLong::make(0, max_jlong, WidenMin); \/\/ Non-neg values\n+  TypeLong::NEG      = TypeLong::make(min_jlong, -1, WidenMin);\n+  TypeLong::LONG     = TypeLong::make(min_jlong, max_jlong, WidenMax); \/\/ 64-bit integers\n+  TypeLong::INT      = TypeLong::make((jlong)min_jint, (jlong)max_jint,WidenMin);\n+  TypeLong::UINT     = TypeLong::make(0, (jlong)max_juint, WidenMin);\n@@ -1521,1 +1521,1 @@\n-const Type* TypeInteger::make(jlong lo, jlong hi, int w, BasicType bt) {\n+const TypeInteger* TypeInteger::make(jlong lo, jlong hi, int w, BasicType bt) {\n@@ -1601,1 +1601,1 @@\n-const Type* TypeInt::make(const TypeIntPrototype<jint, juint>& t, int w, bool dual) {\n+const Type* TypeInt::try_make(const TypeIntPrototype<jint, juint>& t, int w, bool dual) {\n@@ -1615,2 +1615,3 @@\n-const Type* TypeInt::make(jint lo, jint hi, int w) {\n-  return make(TypeIntPrototype<jint, juint>{{lo, hi}, {0, max_juint}, {0, 0}}, w);\n+const TypeInt* TypeInt::make(jint lo, jint hi, int w) {\n+  assert(lo <= hi, \"must be legal bounds\");\n+  return try_make(TypeIntPrototype<jint, juint>{{lo, hi}, {0, max_juint}, {0, 0}}, w)->is_int();\n@@ -1619,2 +1620,2 @@\n-const Type* TypeInt::make(const TypeIntPrototype<jint, juint>& t, int w) {\n-  return make(t, w, false);\n+const Type* TypeInt::try_make(const TypeIntPrototype<jint, juint>& t, int w) {\n+  return try_make(t, w, false);\n@@ -1637,1 +1638,1 @@\n-  return int_type_xmeet(this, t, TypeInt::make, _is_dual);\n+  return int_type_xmeet(this, t, TypeInt::try_make, _is_dual);\n@@ -1728,1 +1729,1 @@\n-const Type* TypeLong::make(const TypeIntPrototype<jlong, julong>& t, int w, bool dual) {\n+const Type* TypeLong::try_make(const TypeIntPrototype<jlong, julong>& t, int w, bool dual) {\n@@ -1742,2 +1743,3 @@\n-const Type* TypeLong::make(jlong lo, jlong hi, int w) {\n-  return make(TypeIntPrototype<jlong, julong>{{lo, hi}, {0, max_julong}, {0, 0}}, w);\n+const TypeLong* TypeLong::make(jlong lo, jlong hi, int w) {\n+  assert(lo <= hi, \"must be legal bounds\");\n+  return try_make(TypeIntPrototype<jlong, julong>{{lo, hi}, {0, max_julong}, {0, 0}}, w)->is_long();\n@@ -1746,2 +1748,2 @@\n-const Type* TypeLong::make(const TypeIntPrototype<jlong, julong>& t, int w) {\n-  return make(t, w, false);\n+const Type* TypeLong::try_make(const TypeIntPrototype<jlong, julong>& t, int w) {\n+  return try_make(t, w, false);\n@@ -1764,1 +1766,1 @@\n-  return int_type_xmeet(this, t, TypeLong::make, _is_dual);\n+  return int_type_xmeet(this, t, TypeLong::try_make, _is_dual);\n@@ -2074,1 +2076,1 @@\n-    return TypeInt::make(size->_lo, size->_hi, Type::WidenMin)->is_int();\n+    return TypeInt::make(size->_lo, size->_hi, Type::WidenMin);\n@@ -4545,1 +4547,1 @@\n-  return TypeInt::make(lo, hi, Type::WidenMin)->is_int();\n+  return TypeInt::make(lo, hi, Type::WidenMin);\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":40,"deletions":38,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -575,1 +575,1 @@\n-  static const Type* make(jlong lo, jlong hi, int w, BasicType bt);\n+  static const TypeInteger* make(jlong lo, jlong hi, int w, BasicType bt);\n@@ -590,1 +590,1 @@\n-  static const Type* make(const TypeIntPrototype<jint, juint>& t, int w, bool dual);\n+  static const Type* try_make(const TypeIntPrototype<jint, juint>& t, int w, bool dual);\n@@ -609,2 +609,2 @@\n-  static const Type* make(jint lo, jint hi, int w);\n-  static const Type* make(const TypeIntPrototype<jint, juint>& t, int w);\n+  static const TypeInt* make(jint lo, jint hi, int w);\n+  static const Type* try_make(const TypeIntPrototype<jint, juint>& t, int w);\n@@ -672,1 +672,1 @@\n-  static const Type* make(const TypeIntPrototype<jlong, julong>& t, int w, bool dual);\n+  static const Type* try_make(const TypeIntPrototype<jlong, julong>& t, int w, bool dual);\n@@ -692,2 +692,2 @@\n-  static const Type* make(jlong lo, jlong hi, int w);\n-  static const Type* make(const TypeIntPrototype<jlong, julong>& t, int w);\n+  static const TypeLong* make(jlong lo, jlong hi, int w);\n+  static const Type* try_make(const TypeIntPrototype<jlong, julong>& t, int w);\n","filename":"src\/hotspot\/share\/opto\/type.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"opto\/type.hpp\"\n@@ -47,0 +48,14 @@\n+static void test_canonicalize_constraints_trivial() {\n+  ASSERT_FALSE(TypeInt::NON_ZERO->contains(0));\n+  ASSERT_TRUE(TypeInt::NON_ZERO->contains(1));\n+  ASSERT_TRUE(TypeInt::NON_ZERO->contains(-1));\n+  ASSERT_TRUE(TypeInt::CC_NE->contains(-1));\n+  ASSERT_TRUE(TypeInt::CC_NE->contains(1));\n+  ASSERT_FALSE(TypeInt::CC_NE->contains(0));\n+  ASSERT_FALSE(TypeInt::CC_NE->contains(-2));\n+  ASSERT_FALSE(TypeInt::CC_NE->contains(2));\n+  ASSERT_FALSE(TypeLong::NON_ZERO->contains(0L));\n+  ASSERT_TRUE(TypeLong::NON_ZERO->contains(1L));\n+  ASSERT_TRUE(TypeLong::NON_ZERO->contains(-1L));\n+}\n+\n@@ -144,0 +159,1 @@\n+  test_canonicalize_constraints_trivial();\n","filename":"test\/hotspot\/gtest\/opto\/test_rangeinference.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}