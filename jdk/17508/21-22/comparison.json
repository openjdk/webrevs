{"files":[{"patch":"@@ -65,1 +65,4 @@\n-\/\/ Find the minimum value that is not less than lo and satisfies bits.\n+\/\/ Find the minimum value that is not less than lo and satisfies bits. If there\n+\/\/ does not exist one such number, the calculation will overflow and return a\n+\/\/ value < lo.\n+\/\/\n@@ -218,1 +221,1 @@\n-    lo = (lo & -alignment) + alignment;\n+    U new_lo = (lo & -alignment) + alignment;\n@@ -220,1 +223,3 @@\n-    return lo | bits._ones;\n+    new_lo |= bits._ones;\n+    assert(lo < new_lo, \"this case cannot overflow\");\n+    return new_lo;\n@@ -259,1 +264,1 @@\n-    lo = (lo & -alignment) + alignment;\n+    U new_lo = (lo & -alignment) + alignment;\n@@ -262,1 +267,3 @@\n-    return lo | bits._ones;\n+    new_lo |= bits._ones;\n+    assert(lo < new_lo || new_lo == bits._ones, \"overflow must return bits._ones\");\n+    return new_lo;\n","filename":"src\/hotspot\/share\/opto\/rangeinference.cpp","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"}]}