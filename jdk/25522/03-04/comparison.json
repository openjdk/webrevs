{"files":[{"patch":"@@ -78,0 +78,1 @@\n+#include \"utilities\/exceptions.hpp\"\n@@ -546,0 +547,3 @@\n+\n+  \/\/ Whenever a GC happens, clear the exception logging cache to avoid stale oop pointers.\n+  Exceptions::clear_logging_cache();\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"oops\/access.inline.hpp\"\n@@ -126,1 +127,1 @@\n-    maybe_log_call_stack();\n+    maybe_log_call_stack(h_exception);\n@@ -156,1 +157,1 @@\n-  maybe_log_call_stack();\n+  maybe_log_call_stack(h_exception);\n@@ -613,1 +614,1 @@\n-  maybe_log_call_stack();\n+  maybe_log_call_stack(exception);\n@@ -616,1 +617,5 @@\n-void Exceptions::maybe_log_call_stack() {\n+\/\/ We don't want to use an OopHandle, or else we may prevent this object from being collected.\n+\/\/ Whenever a GC happens, this will be cleared by Exceptions::clear_logging_cache().\n+static oop _last_logged_exception;\n+\n+void Exceptions::maybe_log_call_stack(Handle exception) {\n@@ -619,5 +624,9 @@\n-    Thread* t = Thread::current_or_null();\n-    if (t != nullptr && t->is_Java_thread()) { \/\/ sanity\n-      JavaThread* jt = JavaThread::current();\n-      if (jt->has_last_Java_frame()) {\n-        jt->print_active_stack_on(&st);\n+    oop exception_oop = exception();\n+    oop old_exception = NativeAccess<MO_SEQ_CST>::oop_atomic_xchg(&_last_logged_exception, exception_oop);\n+    if (old_exception != exception_oop) {\n+      Thread* t = Thread::current_or_null();\n+      if (t != nullptr && t->is_Java_thread()) { \/\/ sanity\n+        JavaThread* jt = JavaThread::current();\n+        if (jt->has_last_Java_frame()) {\n+          jt->print_active_stack_on(&st);\n+        }\n@@ -628,0 +637,4 @@\n+\n+void Exceptions::clear_logging_cache() {\n+  NativeAccess<>::oop_store(&_last_logged_exception, nullptr);\n+}\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":22,"deletions":9,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-  static void maybe_log_call_stack();\n+  static void maybe_log_call_stack(Handle exception);\n@@ -196,0 +196,2 @@\n+\n+  static void clear_logging_cache();\n","filename":"src\/hotspot\/share\/utilities\/exceptions.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n@@ -56,0 +58,11 @@\n+\n+        \/\/ To avoid verbosity, we shouldn't print the callstack of main->foo2->bar2 more than once\n+        String stdout = output.getStdout();\n+        Pattern p = Pattern.compile(\"foo2.*main\", Pattern.DOTALL);\n+        Matcher m = p.matcher(stdout);\n+        if (!m.find()) {\n+            throw new RuntimeException(\"Cannot find: \" + p);\n+        }\n+        if (m.find()) {\n+            throw new RuntimeException(\"Must not find \" + p + \" twice\");\n+        }\n@@ -90,0 +103,1 @@\n+            foo2();\n@@ -103,0 +117,12 @@\n+\n+        static void foo2() {\n+            try {\n+                bar2();\n+            } catch (Exception e) {\n+                System.out.println(\"Exception 2 caught.\");\n+            }\n+        }\n+\n+        static void bar2() {\n+            throw new RuntimeException(\"Test exception 2 for logging\");\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/ExceptionsTest.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"}]}