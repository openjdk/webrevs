{"files":[{"patch":"@@ -498,0 +498,4 @@\n+      bool is_throw_bytecode = false;\n+      if (!h_method->is_native()) {\n+        is_throw_bytecode = (Bytecodes::Code) *h_method->bcp_from(current_bci) == Bytecodes::_athrow;\n+      }\n@@ -501,1 +505,1 @@\n-      Exceptions::log_exception(h_exception, tempst.as_string());\n+      Exceptions::log_exception(h_exception, tempst.as_string(), is_throw_bytecode);\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-    maybe_log_call_stack(h_exception);\n+    maybe_log_call_stack(h_exception, false);\n@@ -157,1 +157,1 @@\n-  maybe_log_call_stack(h_exception);\n+  maybe_log_call_stack(h_exception, false);\n@@ -601,1 +601,1 @@\n-void Exceptions::log_exception(Handle exception, const char* message) {\n+void Exceptions::log_exception(Handle exception, const char* message, bool is_throw_bytecode) {\n@@ -614,1 +614,1 @@\n-  maybe_log_call_stack(exception);\n+  maybe_log_call_stack(exception, !is_throw_bytecode);\n@@ -622,1 +622,1 @@\n-void Exceptions::maybe_log_call_stack(Handle exception) {\n+void Exceptions::maybe_log_call_stack(Handle exception, bool omit_if_same) {\n@@ -627,1 +627,7 @@\n-    if (old_exception != exception_oop) {\n+    if (omit_if_same && old_exception == exception_oop) {\n+      \/\/ This is called again when InterpreterRuntime::exception_handler_for_exception() is looking for\n+      \/\/ an exception handler. Don't print the stack again to avoid excessive output.\n+      \/\/\n+      \/\/ TODO: we should cache one exception per JavaThread, or else concurrently thrown exceptions\n+      \/\/ may cause excessive logging (this is probably rare).\n+    } else {\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-  static void maybe_log_call_stack(Handle exception);\n+  static void maybe_log_call_stack(Handle exception, bool omit_if_same);\n@@ -195,1 +195,1 @@\n-  static void log_exception(Handle exception, const char* message);\n+  static void log_exception(Handle exception, const char* message, bool is_throw_bytecode = false);\n","filename":"src\/hotspot\/share\/utilities\/exceptions.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-        \/\/ To avoid verbosity, we shouldn't print the callstack of main->foo2->bar2 more than once\n+        \/\/ To avoid verbosity, stack trace for baz2() should be printed only once.\n@@ -61,3 +61,10 @@\n-        Pattern p = Pattern.compile(\"foo2.*main\", Pattern.DOTALL);\n-        Matcher m = p.matcher(stdout);\n-        if (!m.find()) {\n+        checkRegexp(stdout, \"baz2.*bar2.*baz2.*bar2\", false);\n+\n+        \/\/ Two stack traces should include foo2, as an exception is thrown at two different BCIs in this method.\n+        checkRegexp(stdout, \"foo2.*main.*foo2.*main\", true);\n+    }\n+\n+    static void checkRegexp(String text, String pattern, boolean expectMatch) {\n+        Pattern p = Pattern.compile(pattern, Pattern.DOTALL);\n+        Matcher m = p.matcher(text);\n+        if (expectMatch && !m.find()) {\n@@ -66,2 +73,2 @@\n-        if (m.find()) {\n-            throw new RuntimeException(\"Must not find \" + p + \" twice\");\n+        if (!expectMatch && m.find()) {\n+            throw new RuntimeException(\"Found unexpected match: \" + p);\n@@ -127,0 +134,8 @@\n+            try {\n+                baz2();\n+            } catch (RuntimeException e) {\n+                throw e; \/\/ Rethrow -- should print a new callstack.\n+            }\n+        }\n+\n+        static void baz2() {\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/ExceptionsTest.java","additions":21,"deletions":6,"binary":false,"changes":27,"status":"modified"}]}