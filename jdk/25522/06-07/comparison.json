{"files":[{"patch":"@@ -50,1 +50,0 @@\n-        System.out.println(output.getStdout());\n@@ -59,3 +58,6 @@\n-        \/\/ To avoid verbosity, stack trace for baz2() should be printed only once.\n-        String stdout = output.getStdout();\n-        checkRegexp(stdout, \"baz2.*bar2.*baz2.*bar2\", false);\n+        \/\/ Note: \"(?s)\" means that the \".\" in the regexp can match the newline character.\n+        \/\/ To avoid verbosity, stack trace for bar2()->baz2() should be printed only once:\n+        \/\/ - It should be printed when the exception is thrown inside bzz2()\n+        \/\/ - It should not be printed when the interpreter is looking for an exception handler inside bar2()\n+        output.shouldMatch(\"(?s)baz2.*bar2\");\n+        output.shouldNotMatch(\"(?s)baz2.*bar2,*baz2.*bar2\");\n@@ -63,13 +65,2 @@\n-        \/\/ Two stack traces should include foo2, as an exception is thrown at two different BCIs in this method.\n-        checkRegexp(stdout, \"foo2.*main.*foo2.*main\", true);\n-    }\n-\n-    static void checkRegexp(String text, String pattern, boolean expectMatch) {\n-        Pattern p = Pattern.compile(pattern, Pattern.DOTALL);\n-        Matcher m = p.matcher(text);\n-        if (expectMatch && !m.find()) {\n-            throw new RuntimeException(\"Cannot find: \" + p);\n-        }\n-        if (!expectMatch && m.find()) {\n-            throw new RuntimeException(\"Found unexpected match: \" + p);\n-        }\n+        \/\/ Two stack traces should include main()->foo2(), as an exception is thrown at two different BCIs in bar2().\n+        output.shouldMatch(\"(?s)foo2.*main.*foo2.*main\");\n@@ -142,0 +133,4 @@\n+            bzz2();\n+        }\n+\n+        static void bzz2() {\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/ExceptionsTest.java","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"}]}