{"files":[{"patch":"@@ -153,10 +153,8 @@\n-  if (log_is_enabled(Info, exceptions)) {\n-    \/\/ tracing (do this up front - so it works during boot strapping)\n-    \/\/ Note, the print_value_string() argument is not called unless logging is enabled!\n-    log_info(exceptions)(\"Exception <%.*s%s%.*s> (\" PTR_FORMAT \") \\n\"\n-                         \"thrown [%s, line %d]\\nfor thread \" PTR_FORMAT,\n-                         MAX_LEN, h_exception->print_value_string(),\n-                         message ? \": \" : \"\",\n-                         MAX_LEN, message ? message : \"\",\n-                         p2i(h_exception()), file, line, p2i(thread));\n-  }\n+  \/\/ tracing (do this up front - so it works during boot strapping)\n+  \/\/ Note, the print_value_string() argument is not called unless logging is enabled!\n+  log_info(exceptions)(\"Exception <%.*s%s%.*s> (\" PTR_FORMAT \") \\n\"\n+                       \"thrown [%s, line %d]\\nfor thread \" PTR_FORMAT,\n+                       MAX_LEN, h_exception->print_value_string(),\n+                       message ? \": \" : \"\",\n+                       MAX_LEN, message ? message : \"\",\n+                       p2i(h_exception()), file, line, p2i(thread));\n@@ -636,34 +634,2 @@\n-    \/\/ TODO: it would be nice to filter out exceptions re-thrown by finally blocks (which include\n-    \/\/ try-with-resource statements):\n-    \/\/\n-    \/\/ try {\n-    \/\/     nullObject.toString(); \/\/ throws NPE\n-    \/\/ } finally {\n-    \/\/     do_something();\n-    \/\/ }\n-    \/\/\n-    \/\/ The finally block is compiled like this:\n-    \/\/\n-    \/\/   8: astore_1            \/\/ the exception thrown in the try block\n-    \/\/   9: invokestatic #23    \/\/ Method: do_something()V\n-    \/\/  12: aload_1\n-    \/\/  13: athrow              \/\/ re-throw exception\n-    \/\/ Exception table:\n-    \/\/  from    to  target type\n-    \/\/   0     3     8   any\n-    \/\/\n-    \/\/ However, we need to distinguish with finally blocks whose last statement is a throw:\n-    \/\/\n-    \/\/ try {\n-    \/\/     nullObject.toString(); \/\/ throws NPE\n-    \/\/ } finally {\n-    \/\/     throw new RuntimeException(\"\");\n-    \/\/ }\n-    \/\/\n-    \/\/ To do this, we need to check that:\n-    \/\/    - bci is the last bytecode of an exception handler\n-    \/\/    - the previous bytecode is an aload_1\n-    \/\/    - the catch type is \"any\" (#0).\n-    \/\/\n-    \/\/ But, the \"end of exception handler\" is not defined in the classfile, so we need to use\n-    \/\/ abstract interpretation to find out. Let's do that later ...\n+    \/\/ TODO: try to find a way to avoid repeated stacktraces when an exception gets re-thrown\n+    \/\/ by a finally block\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":10,"deletions":44,"binary":false,"changes":54,"status":"modified"}]}