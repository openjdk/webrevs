{"files":[{"patch":"@@ -640,1 +640,1 @@\n-            endIndex, i - (digit < -1 ? 0 : 1));\n+            endIndex, i - (digit < -1 ? 0 : 1), radix);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -672,1 +672,1 @@\n-            endIndex, i - (digit < -1 ? 0 : 1));\n+            endIndex, i - (digit < -1 ? 0 : 1), radix);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -96,0 +96,16 @@\n+    \/**\n+     * Factory method for making a {@code NumberFormatException}\n+     * given the specified input which caused the error.\n+     *\n+     * <p>When {@code beginIndex} is 0 and {@code endIndex == s.length()}, this method\n+     * behaves exactly like {@link #forInputString(String, int)} in error handling,\n+     * including the format of thrown exceptions and diagnostic messages.\n+     *\/\n+    static NumberFormatException forCharSequence(CharSequence s,\n+            int beginIndex, int endIndex, int errorIndex, int radix) {\n+        if (s instanceof String && beginIndex == 0 && endIndex == s.length()) {\n+            return forInputString((String) s, radix);\n+        }\n+        return forCharSequence(s, beginIndex, endIndex, errorIndex);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/NumberFormatException.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}