{"files":[{"patch":"@@ -642,1 +642,1 @@\n-            endIndex, i - (digit < -1 ? 0 : 1), radix);\n+            endIndex, i - (digit < -1 ? 0 : 1));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -674,1 +674,1 @@\n-            endIndex, i - (digit < -1 ? 0 : 1), radix);\n+            endIndex, i - (digit < -1 ? 0 : 1));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -96,16 +96,0 @@\n-    \/**\n-     * Factory method for making a {@code NumberFormatException}\n-     * given the specified input which caused the error.\n-     *\n-     * <p>When {@code beginIndex} is 0 and {@code endIndex == s.length()}, this method\n-     * behaves exactly like {@link #forInputString(String, int)} in error handling,\n-     * including the format of thrown exceptions and diagnostic messages.\n-     *\/\n-    static NumberFormatException forCharSequence(CharSequence s,\n-            int beginIndex, int endIndex, int errorIndex, int radix) {\n-        if (s instanceof String && beginIndex == 0 && endIndex == s.length()) {\n-            return forInputString((String) s, radix);\n-        }\n-        return forCharSequence(s, beginIndex, endIndex, errorIndex);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/NumberFormatException.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-                .shouldContain(\"java.lang.NumberFormatException: For input string: \\\"8000000000000000\\\"\");\n+                .shouldContain(\"java.lang.NumberFormatException: Error at index 15 in: \\\"8000000000000000\\\"\");\n","filename":"test\/jdk\/com\/sun\/jdi\/JdbExprTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}