{"files":[{"patch":"@@ -92,0 +92,3 @@\n+    private static final int MULT_MIN_10 = Integer.MIN_VALUE \/ 10;\n+    private static final int MULT_MIN_100 = Integer.MIN_VALUE \/ 100;\n+\n@@ -519,13 +522,4 @@\n-        \/*\n-         * WARNING: This method may be invoked early during VM initialization\n-         * before IntegerCache is initialized. Care must be taken to not use\n-         * the valueOf method.\n-         *\/\n-\n-        if (s == null) {\n-            throw new NumberFormatException(\"Cannot parse null string\");\n-        }\n-\n-        if (radix < Character.MIN_RADIX) {\n-            throw new NumberFormatException(String.format(\n-                \"radix %s less than Character.MIN_RADIX\", radix));\n+        int len;\n+        byte[] value;\n+        if (s == null || radix != 10 || (len = (value = s.value()).length) == 0 || !s.isLatin1()) {\n+            return parseInt0(s, radix);\n@@ -533,9 +527,11 @@\n-\n-        if (radix > Character.MAX_RADIX) {\n-            throw new NumberFormatException(String.format(\n-                \"radix %s greater than Character.MAX_RADIX\", radix));\n-        }\n-\n-        int len = s.length();\n-        if (len == 0) {\n-            throw NumberFormatException.forInputString(\"\", radix);\n+        int result = 0, c, digit;\n+        boolean inRange;\n+        int neg;\n+        if ((neg = (c = value[0]) - '-') != 0\n+                && neg + 2 != 0 \/\/ firstChar != '+'\n+        ) {\n+            if (inRange = isDigitLatin1(c)) {\n+                result = '0' - c;\n+            }\n+        } else {\n+            inRange = len != 1;\n@@ -543,5 +539,11 @@\n-        int digit = ~0xFF;\n-        int i = 0;\n-        char firstChar = s.charAt(i++);\n-        if (firstChar != '-' && firstChar != '+') {\n-            digit = digit(firstChar, radix);\n+        int limit = MIN_VALUE + (neg != 0 ? 1 : 0);\n+        int i = 1;\n+        while (inRange\n+                && i + 1 < len\n+                && (digit = DecimalDigits.digit2(value, i)) != -1\n+        ) {\n+            \/\/ max digits is 19, no need to check inRange (result == MULT_MIN_100 && digit <= (MULT_MIN_100 * 100 - limit))\n+            if (inRange = (result >= MULT_MIN_100)) {\n+                result = result * 100 - digit;\n+                i += 2;\n+            }\n@@ -549,10 +551,7 @@\n-        if (digit >= 0 || digit == ~0xFF && len > 1) {\n-            int limit = firstChar != '-' ? MIN_VALUE + 1 : MIN_VALUE;\n-            int multmin = limit \/ radix;\n-            int result = -(digit & 0xFF);\n-            boolean inRange = true;\n-            \/* Accumulating negatively avoids surprises near MAX_VALUE *\/\n-            while (i < len && (digit = digit(s.charAt(i++), radix)) >= 0\n-                    && (inRange = result > multmin\n-                        || result == multmin && digit <= radix * multmin - limit)) {\n-                result = radix * result - digit;\n+        if (inRange && result <= 0) {\n+            if (i + 1 == len && isDigitLatin1((c = value[i]))) {\n+                digit = c - '0';\n+                if (result > MULT_MIN_10 || (result == MULT_MIN_10 && digit <= (MULT_MIN_10 * 10 - limit))) {\n+                    result = result * 10 - digit;\n+                    i++;\n+                }\n@@ -560,2 +559,2 @@\n-            if (inRange && i == len && digit >= 0) {\n-                return firstChar != '-' ? -result : result;\n+            if (i == len) {\n+                return neg != 0 ? -result : result;\n@@ -564,1 +563,16 @@\n-        throw NumberFormatException.forInputString(s, radix);\n+        throw NumberFormatException.forInputString(s);\n+    }\n+\n+    private static int parseInt0(String s, int radix) {\n+        if (s == null) {\n+            throw NumberFormatException.nullInput();\n+        }\n+        int len;\n+        if ((len = s.length()) == 0) {\n+            throw NumberFormatException.forInputString(s);\n+        }\n+        return parseInt(s, 0, len, radix);\n+    }\n+\n+    static boolean isDigitLatin1(int ch) {\n+        return CharacterDataLatin1.instance.isDigit(ch);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":54,"deletions":40,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,0 +92,3 @@\n+    private static final long MULT_MIN_10 = MIN_VALUE \/ 10;\n+    private static final long MULT_MIN_100 = MIN_VALUE \/ 100;\n+\n@@ -555,7 +558,4 @@\n-        if (s == null) {\n-            throw new NumberFormatException(\"Cannot parse null string\");\n-        }\n-\n-        if (radix < Character.MIN_RADIX) {\n-            throw new NumberFormatException(String.format(\n-                \"radix %s less than Character.MIN_RADIX\", radix));\n+        int len;\n+        byte[] value;\n+        if (s == null || radix != 10 || (len = (value = s.value()).length) == 0 || !s.isLatin1()) {\n+            return parseLong0(s, radix);\n@@ -563,9 +563,12 @@\n-\n-        if (radix > Character.MAX_RADIX) {\n-            throw new NumberFormatException(String.format(\n-                \"radix %s greater than Character.MAX_RADIX\", radix));\n-        }\n-\n-        int len = s.length();\n-        if (len == 0) {\n-            throw NumberFormatException.forInputString(\"\", radix);\n+        int c, digit;\n+        long result = 0;\n+        boolean inRange;\n+        int neg;\n+        if ((neg = (c = value[0]) - '-') != 0\n+                && neg + 2 != 0 \/\/ firstChar != '+'\n+        ) {\n+            if (inRange = Integer.isDigitLatin1(c)) {\n+                result = '0' - c;\n+            }\n+        } else {\n+            inRange = len != 1;\n@@ -573,5 +576,10 @@\n-        int digit = ~0xFF;\n-        int i = 0;\n-        char firstChar = s.charAt(i++);\n-        if (firstChar != '-' && firstChar != '+') {\n-            digit = digit(firstChar, radix);\n+        long limit = MIN_VALUE + (neg != 0 ? 1L : 0L);\n+        int i = 1;\n+        while (inRange\n+                && i + 1 < len\n+                && (digit = DecimalDigits.digit2(value, i)) != -1\n+        ) {\n+            if (inRange = (result > MULT_MIN_100 || (result == MULT_MIN_100 && digit <= (MULT_MIN_100 * 100 - limit)))) {\n+                result = result * 100 - digit;\n+                i += 2;\n+            }\n@@ -579,10 +587,8 @@\n-        if (digit >= 0 || digit == ~0xFF && len > 1) {\n-            long limit = firstChar != '-' ? MIN_VALUE + 1 : MIN_VALUE;\n-            long multmin = limit \/ radix;\n-            long result = -(digit & 0xFF);\n-            boolean inRange = true;\n-            \/* Accumulating negatively avoids surprises near MAX_VALUE *\/\n-            while (i < len && (digit = digit(s.charAt(i++), radix)) >= 0\n-                    && (inRange = result > multmin\n-                        || result == multmin && digit <= (int) (radix * multmin - limit))) {\n-                result = radix * result - digit;\n+        if (inRange) {\n+            if (i + 1 == len && Integer.isDigitLatin1((c = value[i]))) {\n+                digit = c - '0';\n+                \/\/ max digits is 20, no need to check inRange (result == MULT_MIN_10 && digit <= (MULT_MIN_10 * 10 - limit))\n+                if (result >= MULT_MIN_10) {\n+                    result = result * 10 - digit;\n+                    i++;\n+                }\n@@ -590,2 +596,2 @@\n-            if (inRange && i == len && digit >= 0) {\n-                return firstChar != '-' ? -result : result;\n+            if (i == len && result <= 0) {\n+                return neg != 0 ? -result : result;\n@@ -594,1 +600,12 @@\n-        throw NumberFormatException.forInputString(s, radix);\n+        throw NumberFormatException.forInputString(s);\n+    }\n+\n+    private static long parseLong0(String s, int radix) {\n+        if (s == null) {\n+            throw NumberFormatException.nullInput();\n+        }\n+        int len;\n+        if ((len = s.length()) == 0) {\n+            throw NumberFormatException.forInputString(s);\n+        }\n+        return parseLong(s, 0, len, radix);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":52,"deletions":35,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -57,0 +57,10 @@\n+    \/**\n+     * Factory method for making a {@code NumberFormatException}\n+     * given the specified input which caused the error.\n+     *\n+     * @param   s   the input causing the error\n+     *\/\n+    static NumberFormatException forInputString(String s) {\n+        return forInputString(s, 10);\n+    }\n+\n@@ -85,0 +95,4 @@\n+\n+    static NumberFormatException nullInput() {\n+        return new NumberFormatException(\"Cannot parse null string\");\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/NumberFormatException.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.internal.misc.Unsafe;\n+import jdk.internal.vm.annotation.ForceInline;\n@@ -36,0 +38,1 @@\n+    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n@@ -139,0 +142,48 @@\n+\n+    \/**\n+     * Determine whether the two strings in bytes are both numbers. If they are, return d0 * 10 + d1, otherwise return -1\n+     * @param str The input LATIN1 encoded String value\n+     * @param offset the offset\n+     * @return If both characters are numbers, return d0 * 10 + d1, otherwise return -1\n+     *\/\n+    @ForceInline\n+    public static int digit2(byte[] str, int offset) {\n+        \/*\n+            Here we are doing a 2-Byte Vector operation on the short type.\n+\n+            x & 0xF0 != 0x30\n+            ---------------\n+            0 0b0011_0000 & 0b1111_0000 = 0b0011_0000\n+            1 0b0011_0001 & 0b1111_0000 = 0b0011_0000\n+            2 0b0011_0010 & 0b1111_0000 = 0b0011_0000\n+            3 0b0011_0011 & 0b1111_0000 = 0b0011_0000\n+            4 0b0011_0100 & 0b1111_0000 = 0b0011_0000\n+            5 0b0011_0101 & 0b1111_0000 = 0b0011_0000\n+            6 0b0011_0110 & 0b1111_0000 = 0b0011_0000\n+            7 0b0011_0111 & 0b1111_0000 = 0b0011_0000\n+            8 0b0011_1000 & 0b1111_0000 = 0b0011_0000\n+            9 0b0011_1001 & 0b1111_0000 = 0b0011_0000\n+\n+            (((d = x & 0x0F) + 0x06) & 0xF0) != 0\n+            ---------------\n+            0 ((0b0011_0000) & 0b0000_1111 + 0b0110_0000) & 0b1111_0000 = 0b0110_0000\n+            1 ((0b0011_0001) & 0b0000_1111 + 0b0110_0000) & 0b1111_0000 = 0b0110_0000\n+            2 ((0b0011_0010) & 0b0000_1111 + 0b0110_0000) & 0b1111_0000 = 0b0110_0000\n+            3 ((0b0011_0011) & 0b0000_1111 + 0b0110_0000) & 0b1111_0000 = 0b0110_0000\n+            4 ((0b0011_0100) & 0b0000_1111 + 0b0110_0000) & 0b1111_0000 = 0b0110_0000\n+            5 ((0b0011_0101) & 0b0000_1111 + 0b0110_0000) & 0b1111_0000 = 0b0110_0000\n+            6 ((0b0011_0110) & 0b0000_1111 + 0b0110_0000) & 0b1111_0000 = 0b0110_0000\n+            7 ((0b0011_0111) & 0b0000_1111 + 0b0110_0000) & 0b1111_0000 = 0b0110_0000\n+            8 ((0b0011_1000) & 0b0000_1111 + 0b0110_0000) & 0b1111_0000 = 0b0110_0000\n+            9 ((0b0011_1001) & 0b0000_1111 + 0b0110_0000) & 0b1111_0000 = 0b0110_0000\n+         *\/\n+        int d;\n+        short x = UNSAFE.getShortUnaligned(str, Unsafe.ARRAY_BYTE_BASE_OFFSET + offset, false);\n+        if ((((x & 0xF0F0) - 0x3030)\n+                | (((d = x & 0x0F0F) + 0x0606) & 0xF0F0)) != 0\n+        ) {\n+            return -1;\n+        }\n+        return ((d & 0xF) << 3) + ((d & 0xF) << 1)  \/\/ (d & 0xF) * 10\n+                + (d >> 8);\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/DecimalDigits.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,0 +81,7 @@\n+    @Benchmark\n+    public void parseLong(Blackhole bh) {\n+        for (String s : strings) {\n+            bh.consume(Long.parseLong(s));\n+        }\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/Longs.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"}]}