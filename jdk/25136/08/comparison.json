{"files":[{"patch":"@@ -79,0 +79,1 @@\n+\t    -Xlog:aot=off \\\n@@ -84,0 +85,1 @@\n+\t    -Xlog:aot=off \\\n@@ -92,0 +94,1 @@\n+\t    -Xlog:aot=off \\\n@@ -106,0 +109,1 @@\n+\t    -Xlog:aot=off \\\n","filename":"make\/GenerateLinkOptData.gmk","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -757,1 +757,1 @@\n-\t        -Xlog:class+load,cds,cds+class=debug:file=$$($1_AOT_JDK_CONF).log  -Xlog:cds*=error \\\n+\t        -Xlog:class+load,aot,aot+class=debug:file=$$($1_AOT_JDK_CONF).log -Xlog:cds*=error -Xlog:aot*=error \\\n@@ -765,1 +765,1 @@\n-\t        $$($1_VM_OPTIONS) -Xlog:cds,cds+class=debug:file=$$($1_AOT_JDK_CACHE).log -Xlog:cds*=error \\\n+\t        $$($1_VM_OPTIONS) -Xlog:aot,aot+class=debug:file=$$($1_AOT_JDK_CACHE).log -Xlog:cds*=error -Xlog:aot*=error \\\n","filename":"make\/RunTests.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-        log_trace(cds, heap, mirror)(\n+        log_trace(aot, heap, mirror)(\n","filename":"src\/hotspot\/share\/cds\/aotArtifactFinder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-  if (log_is_enabled(Info, cds, aot, link)) {\n+  if (log_is_enabled(Info, aot, link)) {\n@@ -118,1 +118,1 @@\n-    log_info(cds, aot, link)(\"%s %s %p\", class_category_name(ik), ik->external_name(), ik);\n+    log_info(aot, link)(\"%s %s %p\", class_category_name(ik), ik->external_name(), ik);\n@@ -148,1 +148,1 @@\n-        log_warning(cds, aot, link)(\"%s cannot be aot-linked because it nest host is not aot-linked\", ik->external_name());\n+        log_warning(aot, link)(\"%s cannot be aot-linked because it nest host is not aot-linked\", ik->external_name());\n@@ -231,1 +231,1 @@\n-    log_info(cds, aot, link)(\"wrote %d class(es) for category %s\", list.length(), category);\n+    log_info(aot, link)(\"wrote %d class(es) for category %s\", list.length(), category);\n","filename":"src\/hotspot\/share\/cds\/aotClassLinker.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1032,2 +1032,1 @@\n-      log_warning(cds)(\"%s%s\", mismatch_msg, hint_msg);\n-      MetaspaceShared::report_loading_error(nullptr);\n+      MetaspaceShared::report_loading_error(\"%s%s\", mismatch_msg, hint_msg);\n","filename":"src\/hotspot\/share\/cds\/aotClassLocation.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-    if (log_is_enabled(Info, cds, aot, load)) {\n+    if (log_is_enabled(Info, aot, load)) {\n@@ -184,3 +184,3 @@\n-      log_info(cds, aot, load)(\"%-5s %s%s%s\", category_name, ik->external_name(),\n-                               ik->is_loaded() ? \" (already loaded)\" : \"\",\n-                               ik->is_hidden() ? \" (hidden)\" : \"\");\n+      log_info(aot, load)(\"%-5s %s%s%s\", category_name, ik->external_name(),\n+                          ik->is_loaded() ? \" (already loaded)\" : \"\",\n+                          ik->is_hidden() ? \" (hidden)\" : \"\");\n@@ -239,1 +239,1 @@\n-      if (log_is_enabled(Info, cds, aot, load)) {\n+      if (log_is_enabled(Info, aot, load)) {\n@@ -242,2 +242,2 @@\n-        log_info(cds, aot, load)(\"%s %s (initiated, defined by %s)\", category_name, ik->external_name(),\n-                                 defining_loader);\n+        log_info(aot, load)(\"%s %s (initiated, defined by %s)\", category_name, ik->external_name(),\n+                            defining_loader);\n","filename":"src\/hotspot\/share\/cds\/aotLinkedClassBulkLoader.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,167 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_CDS_AOTLOGGING_HPP\n+#define SHARE_CDS_AOTLOGGING_HPP\n+\n+#include \"cds\/cds_globals.hpp\"\n+#include \"cds\/cdsConfig.hpp\"\n+#include \"logging\/log.hpp\"\n+\n+\/\/ UL Logging for AOT\n+\/\/ ==================\n+\/\/\n+\/\/ The old \"CDS\" feature is rebranded as \"AOT\" in JEP 483. Therefore, UL logging\n+\/\/ related to the AOT features should be using the [aot] tag.\n+\/\/\n+\/\/ However, some old scripts may be using -Xlog:cds for diagnostic purposes. To\n+\/\/ provide a fair amount of backwards compatibility for such scripts, some AOT\n+\/\/ logs that are likely to be used by such scripts are printed using the macros\n+\/\/ in this header file.\n+\/\/\n+\/\/ NOTE: MOST of the AOT logs will be using the usual macros such as log_info(aot)(...).\n+\/\/ The information below does NOT apply to such logs.\n+\/\/\n+\/\/ CDS Compatibility Logs & Compatibility Macros\n+\/\/ =============================================\n+\/\/\n+\/\/ A subset of the original CDS logs (the \"CDS Compatibility Logs\") have been\n+\/\/ chosen in JDK 25. These logs are guarded using the aot_log_xxx compatibility\n+\/\/ macros. Before JDK 25, such code looked like this:\n+\/\/\n+\/\/      log_info(cds)(\"trying to map %s%s\", info, _full_path);\n+\/\/      log_warning(cds)(\"Unable to read the file header.\");\n+\/\/\n+\/\/ New code since JDK 25:\n+\/\/\n+\/\/      aot_log_info(aot)(\"trying to map %s%s\", info, _full_path);\n+\/\/      aot_log_warning(aot)(\"Unable to read the file header.\");\n+\/\/\n+\/\/ The messages printed with the log_aot_xxx() macros work as if they are\n+\/\/ using the [cds] tag when running with the \"classic\" CDS workflow (i.e.,\n+\/\/ new -XX:AOTxxx flags are not used).\n+\/\/\n+\/\/      $ java -Xlog:cds -XX:SharedArchiveFile=bad.jsa ...\n+\/\/      [0.020s][info][cds] trying to map bad.jsa\n+\/\/      [0.020s][warning][cds] Unable to read the file header\n+\/\/\n+\/\/ However, when running new AOT flags such as-XX:AOTCache, these messages are\n+\/\/ under the [aot] tag:\n+\/\/\n+\/\/      $ java -Xlog:aot -XX:AOTCache=bad.aot ...\n+\/\/      [0.020s][info][aot] trying to map bad.aot\n+\/\/      [0.020s][warning][aot] Unable to read the file header\n+\/\/\n+\/\/ Rules on selection and printing\n+\/\/\n+\/\/ [1] When using AOT cache\n+\/\/     - These logs are selected via the aot tag, and not the cds tag.\n+\/\/       They are always printed with [aot] decoration\n+\/\/\n+\/\/ [2] When using CDS archives\n+\/\/     - These logs are selected via the cds tag, and not the aot tag.\n+\/\/       They are always printed with [cds] decoration\n+\/\/\n+\/\/ Deprecation Process\n+\/\/ ===================\n+\/\/\n+\/\/ This is modeled after the deprecate\/obsolete\/expire process of VM options in arguments.cpp\n+\/\/\n+\/\/ JDK 25 - When no -XX:AOTxxx flags are used, the CDS Compatibility Logs must be selected\n+\/\/          with -Xlog:cds\n+\/\/\n+\/\/ JDK 26 - Same as above, except that when -Xlog:cds is specified in the command-line, a warning\n+\/\/          message is printed to indicate that -Xlog:cds is deprecated.\n+\/\/\n+\/\/ JDK 27 - The CDS Compatibility Logs must be selected with -Xlog:aot.\n+\/\/\n+\/\/          When -Xlog:cds is specified in the command-line, a warning message is printed to\n+\/\/          indicate that -Xlog:cds is obsolete.\n+\/\/\n+\/\/ JDK 28 - When -Xlog:cds is specified in the command-line, the VM will exit with an error message:\n+\/\/\n+\/\/          [0.002s][error][logging] Invalid tag 'cds' in log selection.\n+\/\/          Invalid -Xlog option '-Xlog:cds', see error log for details.\n+\/\/\n+\n+\/\/ The following macros are inspired by the same macros (without the aot_ prefix) in logging\/log.hpp\n+\n+#define aot_log_is_enabled(level, ...) (AOTLogImpl<LOG_TAGS(__VA_ARGS__)>::is_level(LogLevel::level))\n+\n+#define aot_log_error(...)    (!aot_log_is_enabled(Error, __VA_ARGS__))   ? (void)0 : AOTLogImpl<LOG_TAGS(__VA_ARGS__)>::write<LogLevel::Error>\n+#define aot_log_warning(...)  (!aot_log_is_enabled(Warning, __VA_ARGS__)) ? (void)0 : AOTLogImpl<LOG_TAGS(__VA_ARGS__)>::write<LogLevel::Warning>\n+#define aot_log_info(...)     (!aot_log_is_enabled(Info, __VA_ARGS__))    ? (void)0 : AOTLogImpl<LOG_TAGS(__VA_ARGS__)>::write<LogLevel::Info>\n+#define aot_log_debug(...)    (!aot_log_is_enabled(Debug, __VA_ARGS__))   ? (void)0 : AOTLogImpl<LOG_TAGS(__VA_ARGS__)>::write<LogLevel::Debug>\n+#define aot_log_trace(...)    (!aot_log_is_enabled(Trace, __VA_ARGS__))   ? (void)0 : AOTLogImpl<LOG_TAGS(__VA_ARGS__)>::write<LogLevel::Trace>\n+\n+template <LogTagType IGNORED, LogTagType T1 = LogTag::__NO_TAG, LogTagType T2 = LogTag::__NO_TAG, LogTagType T3 = LogTag::__NO_TAG,\n+          LogTagType T4 = LogTag::__NO_TAG, LogTagType GuardTag = LogTag::__NO_TAG>\n+class AOTLogImpl {\n+ public:\n+  \/\/ Make sure no more than the maximum number of tags have been given.\n+  \/\/ The GuardTag allows this to be detected if\/when it happens. If the GuardTag\n+  \/\/ is not __NO_TAG, the number of tags given exceeds the maximum allowed.\n+  STATIC_ASSERT(GuardTag == LogTag::__NO_TAG); \/\/ Number of logging tags exceeds maximum supported!\n+\n+  \/\/ Empty constructor to avoid warnings on MSVC about unused variables\n+  \/\/ when the log instance is only used for static functions.\n+  AOTLogImpl() {\n+  }\n+\n+  static bool is_level(LogLevelType level) {\n+    if (CDSConfig::new_aot_flags_used()) {\n+      return LogTagSetMapping<LogTag::_aot, T1, T2, T3, T4>::tagset().is_level(level);\n+    } else {\n+      return LogTagSetMapping<LogTag::_cds, T1, T2, T3, T4>::tagset().is_level(level);\n+    }\n+  }\n+\n+  ATTRIBUTE_PRINTF(2, 3)\n+  static void write(LogLevelType level, const char* fmt, ...) {\n+    va_list args;\n+    va_start(args, fmt);\n+    vwrite(level, fmt, args);\n+    va_end(args);\n+  }\n+\n+  template <LogLevelType Level>\n+  ATTRIBUTE_PRINTF(1, 2)\n+  static void write(const char* fmt, ...) {\n+    va_list args;\n+    va_start(args, fmt);\n+    vwrite(Level, fmt, args);\n+    va_end(args);\n+  }\n+\n+  ATTRIBUTE_PRINTF(2, 0)\n+  static void vwrite(LogLevelType level, const char* fmt, va_list args) {\n+    if (CDSConfig::new_aot_flags_used()) {\n+      LogTagSetMapping<LogTag::_aot, T1, T2, T3, T4>::tagset().vwrite(level, fmt, args);\n+    } else {\n+      LogTagSetMapping<LogTag::_cds, T1, T2, T3, T4>::tagset().vwrite(level, fmt, args);\n+    }\n+  }\n+};\n+\n+#endif\n","filename":"src\/hotspot\/share\/cds\/aotLogging.hpp","additions":167,"deletions":0,"binary":false,"changes":167,"status":"added"},{"patch":"@@ -200,1 +200,1 @@\n-      log_error(cds, heap)(\"Cannot archive reference object \" PTR_FORMAT \" of class %s\",\n+      log_error(aot, heap)(\"Cannot archive reference object \" PTR_FORMAT \" of class %s\",\n@@ -202,1 +202,1 @@\n-      log_error(cds, heap)(\"referent = \" PTR_FORMAT\n+      log_error(aot, heap)(\"referent = \" PTR_FORMAT\n@@ -207,1 +207,1 @@\n-      log_error(cds, heap)(\"This object requires special clean up as its queue is not ReferenceQueue::N\" \"ULL (\"\n+      log_error(aot, heap)(\"This object requires special clean up as its queue is not ReferenceQueue::N\" \"ULL (\"\n@@ -209,1 +209,1 @@\n-      log_error(cds, heap)(\"%s\", (referent == nullptr) ?\n+      log_error(aot, heap)(\"%s\", (referent == nullptr) ?\n@@ -215,1 +215,1 @@\n-    if (log_is_enabled(Info, cds, ref)) {\n+    if (log_is_enabled(Info, aot, ref)) {\n@@ -217,1 +217,1 @@\n-      log_info(cds, ref)(\"Reference obj:\"\n+      log_info(aot, ref)(\"Reference obj:\"\n","filename":"src\/hotspot\/share\/cds\/aotReferenceObjSupport.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cds\/aotLogging.hpp\"\n@@ -136,1 +137,1 @@\n-    log_trace(cds)(\"Ref: [\" PTR_FORMAT \"] -> \" PTR_FORMAT \" => \" PTR_FORMAT,\n+    log_trace(aot)(\"Ref: [\" PTR_FORMAT \"] -> \" PTR_FORMAT \" => \" PTR_FORMAT,\n@@ -254,1 +255,1 @@\n-  log_info(cds)(\"Gathering classes and symbols ... \");\n+  aot_log_info(aot)(\"Gathering classes and symbols ... \");\n@@ -284,1 +285,1 @@\n-    log_info(cds)(\"Sorting symbols ... \");\n+    aot_log_info(aot)(\"Sorting symbols ... \");\n@@ -306,1 +307,1 @@\n-  log_info(cds)(\"Sorting classes ... \");\n+  aot_log_info(aot)(\"Sorting classes ... \");\n@@ -318,1 +319,1 @@\n-    log_error(cds)(\"Failed to reserve %zu bytes of output buffer.\", buffer_size);\n+    aot_log_error(aot)(\"Failed to reserve %zu bytes of output buffer.\", buffer_size);\n@@ -325,1 +326,1 @@\n-  log_info(cds)(\"Reserved output buffer space at \" PTR_FORMAT \" [%zu bytes]\",\n+  aot_log_info(aot)(\"Reserved output buffer space at \" PTR_FORMAT \" [%zu bytes]\",\n@@ -367,3 +368,3 @@\n-    log_error(cds)(\"my_archive_requested_bottom = \" INTPTR_FORMAT, p2i(my_archive_requested_bottom));\n-    log_error(cds)(\"my_archive_requested_top    = \" INTPTR_FORMAT, p2i(my_archive_requested_top));\n-    log_error(cds)(\"SharedBaseAddress (\" INTPTR_FORMAT \") is too high. \"\n+    aot_log_error(aot)(\"my_archive_requested_bottom = \" INTPTR_FORMAT, p2i(my_archive_requested_bottom));\n+    aot_log_error(aot)(\"my_archive_requested_top    = \" INTPTR_FORMAT, p2i(my_archive_requested_top));\n+    aot_log_error(aot)(\"SharedBaseAddress (\" INTPTR_FORMAT \") is too high. \"\n@@ -427,1 +428,1 @@\n-      log_info(cds, hashtables)(\"Expanded _src_obj_table table to %d\", _src_obj_table.table_size());\n+      log_info(aot, hashtables)(\"Expanded _src_obj_table table to %d\", _src_obj_table.table_size());\n@@ -506,1 +507,1 @@\n-  log_info(cds)(\"Gathering all archivable objects ... \");\n+  aot_log_info(aot)(\"Gathering all archivable objects ... \");\n@@ -593,1 +594,1 @@\n-  log_info(cds)(\"Allocating RW objects ... \");\n+  aot_log_info(aot)(\"Allocating RW objects ... \");\n@@ -608,1 +609,1 @@\n-  log_info(cds)(\"Allocating RO objects ... \");\n+  aot_log_info(aot)(\"Allocating RO objects ... \");\n@@ -629,1 +630,1 @@\n-  log_info(cds)(\"done (%d objects)\", src_objs->objs()->length());\n+  aot_log_info(aot)(\"done (%d objects)\", src_objs->objs()->length());\n@@ -679,1 +680,1 @@\n-      log_info(cds, hashtables)(\"Expanded _buffered_to_src_table table to %d\", _buffered_to_src_table.table_size());\n+      log_info(aot, hashtables)(\"Expanded _buffered_to_src_table table to %d\", _buffered_to_src_table.table_size());\n@@ -689,1 +690,1 @@\n-  log_trace(cds)(\"Copy: \" PTR_FORMAT \" ==> \" PTR_FORMAT \" %d\", p2i(src), p2i(dest), bytes);\n+  log_trace(aot)(\"Copy: \" PTR_FORMAT \" ==> \" PTR_FORMAT \" %d\", p2i(src), p2i(dest), bytes);\n@@ -755,1 +756,1 @@\n-  log_info(cds)(\"Relocating embedded pointers in core regions ... \");\n+  aot_log_info(aot)(\"Relocating embedded pointers in core regions ... \");\n@@ -926,1 +927,1 @@\n-    if (log_is_enabled(Debug, cds, class)) {\n+    if (aot_log_is_enabled(Debug, aot, class)) {\n@@ -928,1 +929,1 @@\n-      log_debug(cds, class)(\"klasses[%5d] = \" PTR_FORMAT \" %-5s %s%s%s%s%s%s%s%s\", i,\n+      aot_log_debug(aot, class)(\"klasses[%5d] = \" PTR_FORMAT \" %-5s %s%s%s%s%s%s%s%s\", i,\n@@ -937,11 +938,11 @@\n-  log_info(cds)(\"Number of classes %d\", num_instance_klasses + num_obj_array_klasses + num_type_array_klasses);\n-  log_info(cds)(\"    instance classes   \" STATS_FORMAT, STATS_PARAMS(instance_klasses));\n-  log_info(cds)(\"      boot             \" STATS_FORMAT, STATS_PARAMS(boot_klasses));\n-  log_info(cds)(\"        vm             \" STATS_FORMAT, STATS_PARAMS(vm_klasses));\n-  log_info(cds)(\"      platform         \" STATS_FORMAT, STATS_PARAMS(platform_klasses));\n-  log_info(cds)(\"      app              \" STATS_FORMAT, STATS_PARAMS(app_klasses));\n-  log_info(cds)(\"      unregistered     \" STATS_FORMAT, STATS_PARAMS(unregistered_klasses));\n-  log_info(cds)(\"      (enum)           \" STATS_FORMAT, STATS_PARAMS(enum_klasses));\n-  log_info(cds)(\"      (hidden)         \" STATS_FORMAT, STATS_PARAMS(hidden_klasses));\n-  log_info(cds)(\"      (old)            \" STATS_FORMAT, STATS_PARAMS(old_klasses));\n-  log_info(cds)(\"      (unlinked)       = %5d, boot = %d, plat = %d, app = %d, unreg = %d\",\n+  aot_log_info(aot)(\"Number of classes %d\", num_instance_klasses + num_obj_array_klasses + num_type_array_klasses);\n+  aot_log_info(aot)(\"    instance classes   \" STATS_FORMAT, STATS_PARAMS(instance_klasses));\n+  aot_log_info(aot)(\"      boot             \" STATS_FORMAT, STATS_PARAMS(boot_klasses));\n+  aot_log_info(aot)(\"        vm             \" STATS_FORMAT, STATS_PARAMS(vm_klasses));\n+  aot_log_info(aot)(\"      platform         \" STATS_FORMAT, STATS_PARAMS(platform_klasses));\n+  aot_log_info(aot)(\"      app              \" STATS_FORMAT, STATS_PARAMS(app_klasses));\n+  aot_log_info(aot)(\"      unregistered     \" STATS_FORMAT, STATS_PARAMS(unregistered_klasses));\n+  aot_log_info(aot)(\"      (enum)           \" STATS_FORMAT, STATS_PARAMS(enum_klasses));\n+  aot_log_info(aot)(\"      (hidden)         \" STATS_FORMAT, STATS_PARAMS(hidden_klasses));\n+  aot_log_info(aot)(\"      (old)            \" STATS_FORMAT, STATS_PARAMS(old_klasses));\n+  aot_log_info(aot)(\"      (unlinked)       = %5d, boot = %d, plat = %d, app = %d, unreg = %d\",\n@@ -949,3 +950,3 @@\n-  log_info(cds)(\"    obj array classes  = %5d\", num_obj_array_klasses);\n-  log_info(cds)(\"    type array classes = %5d\", num_type_array_klasses);\n-  log_info(cds)(\"               symbols = %5d\", _symbols->length());\n+  aot_log_info(aot)(\"    obj array classes  = %5d\", num_obj_array_klasses);\n+  aot_log_info(aot)(\"    type array classes = %5d\", num_type_array_klasses);\n+  aot_log_info(aot)(\"               symbols = %5d\", _symbols->length());\n@@ -1053,1 +1054,1 @@\n-    log_debug(cds)(\"Relocating archive from [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] to \"\n+    aot_log_debug(aot)(\"Relocating archive from [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] to \"\n@@ -1577,2 +1578,2 @@\n-  if (log_is_enabled(Info, cds)) {\n-    log_info(cds)(\"Full module graph = %s\", CDSConfig::is_dumping_full_module_graph() ? \"enabled\" : \"disabled\");\n+  if (log_is_enabled(Info, aot)) {\n+    log_info(aot)(\"Full module graph = %s\", CDSConfig::is_dumping_full_module_graph() ? \"enabled\" : \"disabled\");\n@@ -1616,1 +1617,1 @@\n-  log_debug(cds)(\"total   : %9zu [100.0%% of total] out of %9zu bytes [%5.1f%% used]\",\n+  aot_log_debug(aot)(\"total   : %9zu [100.0%% of total] out of %9zu bytes [%5.1f%% used]\",\n@@ -1621,1 +1622,1 @@\n-  log_debug(cds)(\"bm space: %9zu [ %4.1f%% of total] out of %9zu bytes [100.0%% used]\",\n+  aot_log_debug(aot)(\"bm space: %9zu [ %4.1f%% of total] out of %9zu bytes [100.0%% used]\",\n@@ -1629,1 +1630,1 @@\n-  log_debug(cds)(\"hp space: %9zu [ %4.1f%% of total] out of %9zu bytes [100.0%% used] at \" INTPTR_FORMAT,\n+  aot_log_debug(aot)(\"hp space: %9zu [ %4.1f%% of total] out of %9zu bytes [100.0%% used] at \" INTPTR_FORMAT,\n@@ -1640,1 +1641,1 @@\n-  log_error(cds)(\"Unable to allocate from '%s' region: Please reduce the number of shared classes.\", name);\n+  log_error(aot)(\"Unable to allocate from '%s' region: Please reduce the number of shared classes.\", name);\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":41,"deletions":40,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -411,1 +411,1 @@\n-  log_info(cds, heap)(\"Verify all oops and pointers in loaded heap\");\n+  log_info(aot, heap)(\"Verify all oops and pointers in loaded heap\");\n@@ -462,1 +462,1 @@\n-    log_info(cds, heap)(\"Patching native pointers in heap region\");\n+    log_info(aot, heap)(\"Patching native pointers in heap region\");\n","filename":"src\/hotspot\/share\/cds\/archiveHeapLoader.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -250,1 +250,1 @@\n-    log_info(cds, heap)(\"archived obj root segment [%d] = %zu bytes, obj = \" PTR_FORMAT,\n+    log_info(aot, heap)(\"archived obj root segment [%d] = %zu bytes, obj = \" PTR_FORMAT,\n@@ -399,1 +399,1 @@\n-    log_info(cds, heap)(\"Inserting filler obj array of %d elements (%zu bytes total) @ buffer offset %zu\",\n+    log_info(aot, heap)(\"Inserting filler obj array of %d elements (%zu bytes total) @ buffer offset %zu\",\n@@ -477,1 +477,1 @@\n-      log_info(cds, heap)(\"Heap end = %p\", heap_end);\n+      log_info(aot, heap)(\"Heap end = %p\", heap_end);\n@@ -766,1 +766,1 @@\n-  log_info(cds, heap)(\"calculate_ptrmap: marked %d non-null native pointers for heap region (%zu bits)\",\n+  log_info(aot, heap)(\"calculate_ptrmap: marked %d non-null native pointers for heap region (%zu bits)\",\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -411,1 +411,1 @@\n-    \/\/ AOTCache\/AOTConfiguration\/AOTMode not used.\n+    \/\/ AOTCache\/AOTConfiguration\/AOTMode not used -> using the \"classic CDS\" workflow.\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-  log_info(cds, heap)(\"Archived enum obj @%d %s::%s (\" INTPTR_FORMAT \")\",\n+  log_info(aot, heap)(\"Archived enum obj @%d %s::%s (\" INTPTR_FORMAT \")\",\n@@ -116,1 +116,1 @@\n-  if (log_is_enabled(Info, cds, heap)) {\n+  if (log_is_enabled(Info, aot, heap)) {\n@@ -118,1 +118,1 @@\n-    log_info(cds, heap)(\"Initializing Enum class: %s\", k->external_name());\n+    log_info(aot, heap)(\"Initializing Enum class: %s\", k->external_name());\n","filename":"src\/hotspot\/share\/cds\/cdsEnumKlass.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -154,1 +154,1 @@\n-    log_error(cds, heap)(\"Scanned %d objects. Found %d case(s) where \"\n+    log_error(aot, heap)(\"Scanned %d objects. Found %d case(s) where \"\n@@ -157,1 +157,1 @@\n-    log_error(cds, heap)(\"Please see cdsHeapVerifier.cpp and aotClassInitializer.cpp for details\");\n+    log_error(aot, heap)(\"Please see cdsHeapVerifier.cpp and aotClassInitializer.cpp for details\");\n@@ -288,1 +288,1 @@\n-    LogStream ls(Log(cds, heap)::warning());\n+    LogStream ls(Log(aot, heap)::warning());\n","filename":"src\/hotspot\/share\/cds\/cdsHeapVerifier.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-  LogMessage(cds) msg;\n+  LogMessage(aot) msg;\n","filename":"src\/hotspot\/share\/cds\/dumpAllocStats.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"cds\/aotLogging.hpp\"\n@@ -339,1 +340,1 @@\n-      log_warning(cds)(\n+      aot_log_warning(aot)(\n@@ -345,1 +346,1 @@\n-        log_warning(cds)(\n+        aot_log_warning(aot)(\n@@ -400,1 +401,1 @@\n-      log_info(cds)(\"Specified %s not found (%s)\", CDSConfig::type_of_archive_being_loaded(), _archive_name);\n+      aot_log_info(aot)(\"Specified %s not found (%s)\", CDSConfig::type_of_archive_being_loaded(), _archive_name);\n@@ -417,1 +418,1 @@\n-      log_warning(cds)(\"Unable to read generic CDS file map header from %s\", file_type);\n+      aot_log_warning(aot)(\"Unable to read generic CDS file map header from %s\", file_type);\n@@ -424,1 +425,1 @@\n-      log_warning(cds)(\"The %s has a bad magic number: %#x\", file_type, gen_header._magic);\n+      aot_log_warning(aot)(\"The %s has a bad magic number: %#x\", file_type, gen_header._magic);\n@@ -429,1 +430,1 @@\n-      log_warning(cds)(\"Cannot handle %s version 0x%x. Must be at least 0x%x.\",\n+      aot_log_warning(aot)(\"Cannot handle %s version 0x%x. Must be at least 0x%x.\",\n@@ -435,1 +436,1 @@\n-      log_warning(cds)(\"The %s version 0x%x does not match the required version 0x%x.\",\n+      aot_log_warning(aot)(\"The %s version 0x%x does not match the required version 0x%x.\",\n@@ -441,1 +442,1 @@\n-      log_warning(cds)(\"Archive file header larger than archive file\");\n+      aot_log_warning(aot)(\"Archive file header larger than archive file\");\n@@ -451,1 +452,1 @@\n-      log_warning(cds)(\"Unable to read file map header from %s\", file_type);\n+      aot_log_warning(aot)(\"Unable to read file map header from %s\", file_type);\n@@ -496,3 +497,3 @@\n-        log_info(cds)(\"_crc expected: %d\", header->crc());\n-        log_info(cds)(\"       actual: %d\", actual_crc);\n-        log_warning(cds)(\"Header checksum verification failed.\");\n+        aot_log_info(aot)(\"_crc expected: %d\", header->crc());\n+        aot_log_info(aot)(\"       actual: %d\", actual_crc);\n+        aot_log_warning(aot)(\"Header checksum verification failed.\");\n@@ -511,1 +512,1 @@\n-      log_warning(cds)(\"base_archive_name offset\/size overflow: \" UINT32_FORMAT \"\/\" UINT32_FORMAT,\n+      aot_log_warning(aot)(\"base_archive_name offset\/size overflow: \" UINT32_FORMAT \"\/\" UINT32_FORMAT,\n@@ -518,1 +519,1 @@\n-        log_warning(cds)(\"static shared archive must have zero _base_archive_name_offset\");\n+        aot_log_warning(aot)(\"static shared archive must have zero _base_archive_name_offset\");\n@@ -522,1 +523,1 @@\n-        log_warning(cds)(\"static shared archive must have zero _base_archive_name_size\");\n+        aot_log_warning(aot)(\"static shared archive must have zero _base_archive_name_size\");\n@@ -530,1 +531,1 @@\n-        log_warning(cds)(\"Invalid base_archive_name offset\/size: \" UINT32_FORMAT \"\/\" UINT32_FORMAT,\n+        aot_log_warning(aot)(\"Invalid base_archive_name offset\/size: \" UINT32_FORMAT \"\/\" UINT32_FORMAT,\n@@ -536,1 +537,1 @@\n-          log_warning(cds)(\"Invalid base_archive_name offset\/size (out of range): \"\n+          aot_log_warning(aot)(\"Invalid base_archive_name offset\/size (out of range): \"\n@@ -543,1 +544,1 @@\n-          log_warning(cds)(\"Base archive name is damaged\");\n+          aot_log_warning(aot)(\"Base archive name is damaged\");\n@@ -547,1 +548,1 @@\n-          log_warning(cds)(\"Base archive %s does not exist\", name);\n+          aot_log_warning(aot)(\"Base archive %s does not exist\", name);\n@@ -582,1 +583,1 @@\n-     log_warning(cds)(\"AutoCreateSharedArchive is ignored because %s is a static archive\", archive_name);\n+     aot_log_warning(aot)(\"AutoCreateSharedArchive is ignored because %s is a static archive\", archive_name);\n@@ -610,1 +611,1 @@\n-    log_warning(cds)(\"Unable to read the file header.\");\n+    aot_log_warning(aot)(\"Unable to read the file header.\");\n@@ -622,1 +623,1 @@\n-        log_warning(cds)(\"Not a valid %s (%s)\", file_type, _full_path);\n+        aot_log_warning(aot)(\"Not a valid %s (%s)\", file_type, _full_path);\n@@ -624,1 +625,1 @@\n-        log_warning(cds)(\"Not a base shared archive: %s\", _full_path);\n+        aot_log_warning(aot)(\"Not a base shared archive: %s\", _full_path);\n@@ -630,1 +631,1 @@\n-      log_warning(cds)(\"Not a top shared archive: %s\", _full_path);\n+      aot_log_warning(aot)(\"Not a top shared archive: %s\", _full_path);\n@@ -640,1 +641,1 @@\n-    log_warning(cds)(\"Failed to read file header from the top archive file\\n\");\n+    aot_log_warning(aot)(\"Failed to read file header from the top archive file\\n\");\n@@ -645,3 +646,3 @@\n-    log_info(cds)(\"_version expected: 0x%x\", CURRENT_CDS_ARCHIVE_VERSION);\n-    log_info(cds)(\"           actual: 0x%x\", header()->version());\n-    log_warning(cds)(\"The %s has the wrong version.\", file_type);\n+    aot_log_info(aot)(\"_version expected: 0x%x\", CURRENT_CDS_ARCHIVE_VERSION);\n+    aot_log_info(aot)(\"           actual: 0x%x\", header()->version());\n+    aot_log_warning(aot)(\"The %s has the wrong version.\", file_type);\n@@ -656,4 +657,4 @@\n-      log_info(cds)(\"_header_size: \" UINT32_FORMAT, header_size);\n-      log_info(cds)(\"base_archive_name_size: \" UINT32_FORMAT, header()->base_archive_name_size());\n-      log_info(cds)(\"base_archive_name_offset: \" UINT32_FORMAT, header()->base_archive_name_offset());\n-      log_warning(cds)(\"The %s has an incorrect header size.\", file_type);\n+      aot_log_info(aot)(\"_header_size: \" UINT32_FORMAT, header_size);\n+      aot_log_info(aot)(\"base_archive_name_size: \" UINT32_FORMAT, header()->base_archive_name_size());\n+      aot_log_info(aot)(\"base_archive_name_offset: \" UINT32_FORMAT, header()->base_archive_name_offset());\n+      aot_log_warning(aot)(\"The %s has an incorrect header size.\", file_type);\n@@ -667,1 +668,1 @@\n-    log_warning(cds)(\"JVM version identifier is corrupted.\");\n+    aot_log_warning(aot)(\"JVM version identifier is corrupted.\");\n@@ -674,3 +675,3 @@\n-    log_info(cds)(\"_jvm_ident expected: %s\", expected_ident);\n-    log_info(cds)(\"             actual: %s\", actual_ident);\n-    log_warning(cds)(\"The %s was created by a different\"\n+    aot_log_info(aot)(\"_jvm_ident expected: %s\", expected_ident);\n+    aot_log_info(aot)(\"             actual: %s\", actual_ident);\n+    aot_log_warning(aot)(\"The %s was created by a different\"\n@@ -688,1 +689,1 @@\n-      log_warning(cds)(\"The %s has been truncated.\", file_type);\n+      aot_log_warning(aot)(\"The %s has been truncated.\", file_type);\n@@ -698,1 +699,1 @@\n-    log_error(cds)(\"Unable to seek to position %zu\", pos);\n+    aot_log_error(aot)(\"Unable to seek to position %zu\", pos);\n@@ -711,1 +712,1 @@\n-  log_info(cds)(\"trying to map %s%s\", info, _full_path);\n+  aot_log_info(aot)(\"trying to map %s%s\", info, _full_path);\n@@ -715,1 +716,1 @@\n-      log_info(cds)(\"Specified %s not found (%s)\", file_type, _full_path);\n+      aot_log_info(aot)(\"Specified %s not found (%s)\", file_type, _full_path);\n@@ -717,1 +718,1 @@\n-      log_warning(cds)(\"Failed to open %s (%s)\", file_type,\n+      aot_log_warning(aot)(\"Failed to open %s (%s)\", file_type,\n@@ -722,1 +723,1 @@\n-    log_info(cds)(\"Opened %s %s.\", file_type, _full_path);\n+    aot_log_info(aot)(\"Opened %s %s.\", file_type, _full_path);\n@@ -733,2 +734,1 @@\n-  LogMessage(cds) msg;\n-  if (msg.is_info()) {\n+  if (CDSConfig::new_aot_flags_used()) {\n@@ -736,1 +736,1 @@\n-      msg.info(\"Writing binary AOTConfiguration file: \");\n+      log_info(aot)(\"Writing binary AOTConfiguration file: %s\",  _full_path);\n@@ -738,1 +738,1 @@\n-      msg.info(\"Dumping shared data to file: \");\n+      log_info(aot)(\"Writing binary AOTConfiguration file: %s\",  _full_path);\n@@ -740,1 +740,2 @@\n-    msg.info(\"   %s\", _full_path);\n+  } else {\n+    log_info(cds)(\"Dumping shared data to file: %s\", _full_path);\n@@ -752,1 +753,1 @@\n-    log_error(cds)(\"Unable to create %s %s: (%s).\", CDSConfig::type_of_archive_being_written(), _full_path,\n+    aot_log_error(aot)(\"Unable to create %s %s: (%s).\", CDSConfig::type_of_archive_being_written(), _full_path,\n@@ -818,1 +819,1 @@\n-    log_warning(cds)(\"Checksum verification failed.\");\n+    aot_log_warning(aot)(\"Checksum verification failed.\");\n@@ -840,1 +841,1 @@\n-  log_debug(cds, reloc)(\"mapped %s relocation %smap @ \" INTPTR_FORMAT \" (%zu bits)\",\n+  aot_log_debug(aot, reloc)(\"mapped %s relocation %smap @ \" INTPTR_FORMAT \" (%zu bits)\",\n@@ -908,1 +909,1 @@\n-    log_info(cds)(\"Shared file region (%s) %d: %8zu\"\n+    aot_log_info(aot)(\"Shared file region (%s) %d: %8zu\"\n@@ -913,1 +914,1 @@\n-     log_info(cds)(\"Shared file region (%s) %d: %8zu\"\n+     aot_log_info(aot)(\"Shared file region (%s) %d: %8zu\"\n@@ -1104,1 +1105,1 @@\n-    log_error(cds)(\"Unable to remap shared readonly space (errno=%d).\", errno);\n+    aot_log_error(aot)(\"Unable to remap shared readonly space (errno=%d).\", errno);\n@@ -1108,1 +1109,1 @@\n-    log_error(cds)(\"Unable to remap shared readonly space (errno=%d).\", errno);\n+    aot_log_error(aot)(\"Unable to remap shared readonly space (errno=%d).\", errno);\n@@ -1139,1 +1140,1 @@\n-    log_info(cds)(\"Mapped %s region #%d at base \" INTPTR_FORMAT \" top \" INTPTR_FORMAT \" (%s)\", is_static() ? \"static \" : \"dynamic\",\n+    aot_log_info(aot)(\"Mapped %s region #%d at base \" INTPTR_FORMAT \" top \" INTPTR_FORMAT \" (%s)\", is_static() ? \"static \" : \"dynamic\",\n@@ -1156,1 +1157,1 @@\n-    log_info(cds)(\"Commit %s region #%d at base \" INTPTR_FORMAT \" top \" INTPTR_FORMAT \" (%s)%s\",\n+    aot_log_info(aot)(\"Commit %s region #%d at base \" INTPTR_FORMAT \" top \" INTPTR_FORMAT \" (%s)%s\",\n@@ -1160,1 +1161,1 @@\n-      log_error(cds)(\"Failed to commit %s region #%d (%s)\", is_static() ? \"static \" : \"dynamic\",\n+      aot_log_error(aot)(\"Failed to commit %s region #%d (%s)\", is_static() ? \"static \" : \"dynamic\",\n@@ -1209,1 +1210,1 @@\n-      log_info(cds)(\"Failed to read %s shared space into reserved space at \" INTPTR_FORMAT,\n+      aot_log_info(aot)(\"Failed to read %s shared space into reserved space at \" INTPTR_FORMAT,\n@@ -1223,1 +1224,1 @@\n-      log_info(cds)(\"Unable to map %s shared space at \" INTPTR_FORMAT,\n+      aot_log_info(aot)(\"Unable to map %s shared space at \" INTPTR_FORMAT,\n@@ -1263,1 +1264,1 @@\n-    log_error(cds)(\"relocation bitmap CRC error\");\n+    aot_log_error(aot)(\"relocation bitmap CRC error\");\n@@ -1272,1 +1273,1 @@\n-  log_info(cds)(\"Mapped %s region #%d at base \" INTPTR_FORMAT \" top \" INTPTR_FORMAT \" (%s)\",\n+  aot_log_info(aot)(\"Mapped %s region #%d at base \" INTPTR_FORMAT \" top \" INTPTR_FORMAT \" (%s)\",\n@@ -1289,1 +1290,1 @@\n-      log_info(cds)(\"Failed to read aot code shared space into reserved space at \" INTPTR_FORMAT,\n+      aot_log_info(aot)(\"Failed to read aot code shared space into reserved space at \" INTPTR_FORMAT,\n@@ -1302,1 +1303,1 @@\n-    log_info(cds)(\"failed to map aot code region\");\n+    aot_log_info(aot)(\"failed to map aot code region\");\n@@ -1308,1 +1309,1 @@\n-    log_info(cds)(\"Mapped static  region #%d at base \" INTPTR_FORMAT \" top \" INTPTR_FORMAT \" (%s)\",\n+    aot_log_info(aot)(\"Mapped static  region #%d at base \" INTPTR_FORMAT \" top \" INTPTR_FORMAT \" (%s)\",\n@@ -1344,1 +1345,1 @@\n-  log_debug(cds, reloc)(\"runtime archive relocation start\");\n+  aot_log_debug(aot, reloc)(\"runtime archive relocation start\");\n@@ -1391,1 +1392,1 @@\n-    log_debug(cds, reloc)(\"runtime archive relocation done\");\n+    aot_log_debug(aot, reloc)(\"runtime archive relocation done\");\n@@ -1440,1 +1441,1 @@\n-  log_info(cds)(\"Requested heap region [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] = %8zu bytes\",\n+  aot_log_info(aot)(\"Requested heap region [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] = %8zu bytes\",\n@@ -1470,1 +1471,1 @@\n-      log_error(cds)(\"%s has aot-linked classes but the archived \"\n+      aot_log_error(aot)(\"%s has aot-linked classes but the archived \"\n@@ -1504,1 +1505,1 @@\n-  log_info(cds)(\"CDS archive was created with max heap size = %zuM, and the following configuration:\",\n+  aot_log_info(aot)(\"CDS archive was created with max heap size = %zuM, and the following configuration:\",\n@@ -1506,1 +1507,1 @@\n-  log_info(cds)(\"    narrow_klass_base at mapping start address, narrow_klass_pointer_bits = %d, narrow_klass_shift = %d\",\n+  aot_log_info(aot)(\"    narrow_klass_base at mapping start address, narrow_klass_pointer_bits = %d, narrow_klass_shift = %d\",\n@@ -1508,1 +1509,1 @@\n-  log_info(cds)(\"    narrow_oop_mode = %d, narrow_oop_base = \" PTR_FORMAT \", narrow_oop_shift = %d\",\n+  aot_log_info(aot)(\"    narrow_oop_mode = %d, narrow_oop_base = \" PTR_FORMAT \", narrow_oop_shift = %d\",\n@@ -1510,1 +1511,1 @@\n-  log_info(cds)(\"The current max heap size = %zuM, G1HeapRegion::GrainBytes = %zu\",\n+  aot_log_info(aot)(\"The current max heap size = %zuM, G1HeapRegion::GrainBytes = %zu\",\n@@ -1512,1 +1513,1 @@\n-  log_info(cds)(\"    narrow_klass_base = \" PTR_FORMAT \", arrow_klass_pointer_bits = %d, narrow_klass_shift = %d\",\n+  aot_log_info(aot)(\"    narrow_klass_base = \" PTR_FORMAT \", arrow_klass_pointer_bits = %d, narrow_klass_shift = %d\",\n@@ -1514,1 +1515,1 @@\n-  log_info(cds)(\"    narrow_oop_mode = %d, narrow_oop_base = \" PTR_FORMAT \", narrow_oop_shift = %d\",\n+  aot_log_info(aot)(\"    narrow_oop_mode = %d, narrow_oop_base = \" PTR_FORMAT \", narrow_oop_shift = %d\",\n@@ -1516,1 +1517,1 @@\n-  log_info(cds)(\"    heap range = [\" PTR_FORMAT \" - \"  PTR_FORMAT \"]\",\n+  aot_log_info(aot)(\"    heap range = [\" PTR_FORMAT \" - \"  PTR_FORMAT \"]\",\n@@ -1634,1 +1635,1 @@\n-  log_info(cds)(\"Preferred address to map heap data (to avoid relocation) is \" INTPTR_FORMAT, p2i(requested_start));\n+  aot_log_info(aot)(\"Preferred address to map heap data (to avoid relocation) is \" INTPTR_FORMAT, p2i(requested_start));\n@@ -1655,1 +1656,1 @@\n-      log_error(cds)(\"Failed to read archived heap region into \" INTPTR_FORMAT, p2i(addr));\n+      aot_log_error(aot)(\"Failed to read archived heap region into \" INTPTR_FORMAT, p2i(addr));\n@@ -1666,1 +1667,1 @@\n-      log_info(cds)(\"UseSharedSpaces: Unable to map at required address in java heap. \"\n+      aot_log_info(aot)(\"UseSharedSpaces: Unable to map at required address in java heap. \"\n@@ -1704,1 +1705,1 @@\n-  log_info(cds)(\"Heap data mapped at \" INTPTR_FORMAT \", size = %8zu bytes\",\n+  aot_log_info(aot)(\"Heap data mapped at \" INTPTR_FORMAT \", size = %8zu bytes\",\n@@ -1706,1 +1707,1 @@\n-  log_info(cds)(\"CDS heap data relocation delta = %zd bytes\", delta);\n+  aot_log_info(aot)(\"CDS heap data relocation delta = %zd bytes\", delta);\n@@ -1766,1 +1767,1 @@\n-      log_info(cds)(\"Unmapping region #%d at base \" INTPTR_FORMAT \" (%s)\", i, p2i(mapped_base),\n+      aot_log_info(aot)(\"Unmapping region #%d at base \" INTPTR_FORMAT \" (%s)\", i, p2i(mapped_base),\n@@ -1771,1 +1772,1 @@\n-        log_info(cds)(\"Region #%d (%s) is in a reserved space, it will be freed when the space is released\", i, shared_region_name[i]);\n+        aot_log_info(aot)(\"Region #%d (%s) is in a reserved space, it will be freed when the space is released\", i, shared_region_name[i]);\n@@ -1838,1 +1839,1 @@\n-      log_error(cds)(\"%s has aot-linked classes. It cannot be used when JVMTI ClassFileLoadHook is in use.\",\n+      aot_log_error(aot)(\"%s has aot-linked classes. It cannot be used when JVMTI ClassFileLoadHook is in use.\",\n@@ -1843,1 +1844,1 @@\n-      log_error(cds)(\"%s has aot-linked classes. It cannot be used when JVMTI early vm start is in use.\",\n+      aot_log_error(aot)(\"%s has aot-linked classes. It cannot be used when JVMTI early vm start is in use.\",\n@@ -1848,1 +1849,1 @@\n-      log_error(cds)(\"%s has aot-linked classes. It cannot be used when archived full module graph is not used.\",\n+      aot_log_error(aot)(\"%s has aot-linked classes. It cannot be used when archived full module graph is not used.\",\n@@ -1855,1 +1856,1 @@\n-      log_error(cds)(\"%s has aot-linked classes. It cannot be used with -Djava.security.manager=%s.\",\n+      aot_log_error(aot)(\"%s has aot-linked classes. It cannot be used with -Djava.security.manager=%s.\",\n@@ -1862,1 +1863,1 @@\n-      log_error(cds)(\"%s has aot-linked classes. It cannot be used with JDWP agent\", archive_type);\n+      aot_log_error(aot)(\"%s has aot-linked classes. It cannot be used with JDWP agent\", archive_type);\n@@ -1904,1 +1905,1 @@\n-    log_info(cds)(\"The %s's ObjectAlignmentInBytes of %d\"\n+    aot_log_info(aot)(\"The %s's ObjectAlignmentInBytes of %d\"\n@@ -1910,1 +1911,1 @@\n-    log_info(cds)(\"The %s's CompactStrings setting (%s)\"\n+    aot_log_info(aot)(\"The %s's CompactStrings setting (%s)\"\n@@ -1922,1 +1923,1 @@\n-      log_error(cds)(\"%s has aot-linked classes. It cannot be used when the \"\n+      aot_log_error(aot)(\"%s has aot-linked classes. It cannot be used when the \"\n@@ -1926,1 +1927,1 @@\n-    log_warning(cds)(\"Archived non-system classes are disabled because the \"\n+    aot_log_warning(aot)(\"Archived non-system classes are disabled because the \"\n@@ -1935,1 +1936,1 @@\n-    log_info(cds)(\"The %s's BytecodeVerificationLocal setting (%s)\"\n+    aot_log_info(aot)(\"The %s's BytecodeVerificationLocal setting (%s)\"\n@@ -1947,1 +1948,1 @@\n-    log_info(cds)(\"The %s was created with less restrictive \"\n+    aot_log_info(aot)(\"The %s was created with less restrictive \"\n@@ -1959,1 +1960,1 @@\n-    log_warning(cds)(\"The setting of the AllowArchivingWithJavaAgent is different \"\n+    aot_log_warning(aot)(\"The setting of the AllowArchivingWithJavaAgent is different \"\n@@ -1965,1 +1966,1 @@\n-    log_warning(cds)(\"This %s was created with AllowArchivingWithJavaAgent. It should be used \"\n+    aot_log_warning(aot)(\"This %s was created with AllowArchivingWithJavaAgent. It should be used \"\n@@ -1969,1 +1970,1 @@\n-  log_info(cds)(\"The %s was created with UseCompressedOops = %d, UseCompressedClassPointers = %d, UseCompactObjectHeaders = %d\",\n+  aot_log_info(aot)(\"The %s was created with UseCompressedOops = %d, UseCompressedClassPointers = %d, UseCompactObjectHeaders = %d\",\n@@ -1972,1 +1973,1 @@\n-    log_warning(cds)(\"Unable to use %s.\\nThe saved state of UseCompressedOops and UseCompressedClassPointers is \"\n+    aot_log_warning(aot)(\"Unable to use %s.\\nThe saved state of UseCompressedOops and UseCompressedClassPointers is \"\n@@ -1978,1 +1979,1 @@\n-    log_warning(cds)(\"Unable to use %s.\\nThe %s's UseCompactObjectHeaders setting (%s)\"\n+    aot_log_warning(aot)(\"Unable to use %s.\\nThe %s's UseCompactObjectHeaders setting (%s)\"\n@@ -1987,1 +1988,1 @@\n-    log_info(cds)(\"optimized module handling: disabled because archive was created without optimized module handling\");\n+    aot_log_info(aot)(\"optimized module handling: disabled because archive was created without optimized module handling\");\n@@ -2075,1 +2076,1 @@\n-  log_debug(cds, jvmti)(\"classfile data for %s [%d: %s] = %d bytes\", class_name, path_index,\n+  log_debug(aot, jvmti)(\"classfile data for %s [%d: %s] = %d bytes\", class_name, path_index,\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":101,"deletions":100,"binary":false,"changes":201,"status":"modified"},{"patch":"@@ -184,3 +184,3 @@\n-          log_error(cds)(\"Unable to resolve class from CDS archive: %s\", ik->external_name());\n-          log_error(cds)(\"Expected: \" INTPTR_FORMAT \", actual: \" INTPTR_FORMAT, p2i(ik), p2i(actual));\n-          log_error(cds)(\"Please check if your VM command-line is the same as in the training run\");\n+          log_error(aot)(\"Unable to resolve class from CDS archive: %s\", ik->external_name());\n+          log_error(aot)(\"Expected: \" INTPTR_FORMAT \", actual: \" INTPTR_FORMAT, p2i(ik), p2i(actual));\n+          log_error(aot)(\"Please check if your VM command-line is the same as in the training run\");\n@@ -208,1 +208,1 @@\n-      log_error(cds)(\"%s: %s\", PENDING_EXCEPTION->klass()->external_name(),\n+      log_error(aot)(\"%s: %s\", PENDING_EXCEPTION->klass()->external_name(),\n@@ -210,1 +210,1 @@\n-      log_error(cds)(\"Please check if your VM command-line is the same as in the training run\");\n+      log_error(aot)(\"Please check if your VM command-line is the same as in the training run\");\n","filename":"src\/hotspot\/share\/cds\/finalImageRecipes.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cds\/aotLogging.hpp\"\n@@ -177,1 +178,1 @@\n-      if (log_is_enabled(Debug, cds)) {\n+      if (log_is_enabled(Debug, aot)) {\n@@ -179,1 +180,1 @@\n-        log_debug(cds)(\"  calling %s\", method->name_and_sig_as_C_string());\n+        log_debug(aot)(\"  calling %s\", method->name_and_sig_as_C_string());\n@@ -191,1 +192,1 @@\n-  log_debug(cds)(\"Resetting platform loader\");\n+  log_debug(aot)(\"Resetting platform loader\");\n@@ -193,1 +194,1 @@\n-  log_debug(cds)(\"Resetting system loader\");\n+  log_debug(aot)(\"Resetting system loader\");\n@@ -203,1 +204,1 @@\n-  log_debug(cds)(\"Resetting boot loader\");\n+  log_debug(aot)(\"Resetting boot loader\");\n@@ -280,1 +281,1 @@\n-    if (log_is_enabled(Debug, cds, heap)) {\n+    if (log_is_enabled(Debug, aot, heap)) {\n@@ -282,1 +283,1 @@\n-      log_debug(cds, heap)(\"Clearing root %d: was \" PTR_FORMAT, index, p2i(old));\n+      log_debug(aot, heap)(\"Clearing root %d: was \" PTR_FORMAT, index, p2i(old));\n@@ -297,1 +298,1 @@\n-    log_debug(cds, heap)(\"Cannot archive, object (\" PTR_FORMAT \") is too large: %zu\",\n+    log_debug(aot, heap)(\"Cannot archive, object (\" PTR_FORMAT \") is too large: %zu\",\n@@ -345,1 +346,1 @@\n-    if (log_is_enabled(Debug, cds, heap)) {\n+    if (log_is_enabled(Debug, aot, heap)) {\n@@ -347,1 +348,1 @@\n-      LogTarget(Debug, cds, heap) log;\n+      LogTarget(Debug, aot, heap) log;\n@@ -572,1 +573,1 @@\n-  if (log_is_enabled(Debug, cds, init)) {\n+  if (log_is_enabled(Debug, aot, init)) {\n@@ -574,1 +575,1 @@\n-    log_debug(cds, init)(\"copied %3d field(s) in aot-initialized mirror %s%s%s\", nfields, ik->external_name(),\n+    log_debug(aot, init)(\"copied %3d field(s) in aot-initialized mirror %s%s%s\", nfields, ik->external_name(),\n@@ -657,1 +658,1 @@\n-      log_info(cds)(\"Heap range = [\" PTR_FORMAT \" - \"  PTR_FORMAT \"]\",\n+      aot_log_info(aot)(\"Heap range = [\" PTR_FORMAT \" - \"  PTR_FORMAT \"]\",\n@@ -820,1 +821,1 @@\n-  if (log_is_enabled(Debug, cds, heap)) {\n+  if (log_is_enabled(Debug, aot, heap)) {\n@@ -823,1 +824,1 @@\n-      log_debug(cds, heap)(\"Adding klass %s\", orig_k->external_name());\n+      log_debug(aot, heap)(\"Adding klass %s\", orig_k->external_name());\n@@ -866,1 +867,1 @@\n-  log_error(cds, heap)(\"Class %s not allowed in archive heap. Must be in java.base%s%s\",\n+  log_error(aot, heap)(\"Class %s not allowed in archive heap. Must be in java.base%s%s\",\n@@ -878,1 +879,1 @@\n-      log_info(cds, heap)(\"non-early: %s\", k->external_name());\n+      log_info(aot, heap)(\"non-early: %s\", k->external_name());\n@@ -906,1 +907,1 @@\n-    log_info(cds, heap)(\n+    log_info(aot, heap)(\n@@ -945,1 +946,1 @@\n-      if (log_is_enabled(Info, cds, heap)) {\n+      if (log_is_enabled(Info, aot, heap)) {\n@@ -951,1 +952,1 @@\n-        log_info(cds, heap)(\n+        log_info(aot, heap)(\n@@ -1020,1 +1021,1 @@\n-  if (log_is_enabled(Info, cds, heap)) {\n+  if (log_is_enabled(Info, aot, heap)) {\n@@ -1055,1 +1056,1 @@\n-    log_info(cds, heap)(\"Verify heap %s initializing static field(s) in %s\",\n+    log_info(aot, heap)(\"Verify heap %s initializing static field(s) in %s\",\n@@ -1069,1 +1070,1 @@\n-      log_info(cds, heap)(\"Trigger GC %s initializing static field(s) in %s\",\n+      log_info(aot, heap)(\"Trigger GC %s initializing static field(s) in %s\",\n@@ -1188,1 +1189,1 @@\n-    log_info(cds, heap)(\"Skip initializing ArchivedModuleGraph subgraph: is_using_optimized_module_handling=%s num_module_paths=%d\",\n+    log_info(aot, heap)(\"Skip initializing ArchivedModuleGraph subgraph: is_using_optimized_module_handling=%s num_module_paths=%d\",\n@@ -1231,1 +1232,1 @@\n-    if (log_is_enabled(Info, cds, heap)) {\n+    if (log_is_enabled(Info, aot, heap)) {\n@@ -1233,1 +1234,1 @@\n-      log_info(cds, heap)(\"subgraph %s is not recorded\",\n+      log_info(aot, heap)(\"subgraph %s is not recorded\",\n@@ -1239,1 +1240,1 @@\n-      if (log_is_enabled(Info, cds, heap)) {\n+      if (log_is_enabled(Info, aot, heap)) {\n@@ -1241,1 +1242,1 @@\n-        log_info(cds, heap)(\"subgraph %s cannot be used because full module graph is disabled\",\n+        log_info(aot, heap)(\"subgraph %s cannot be used because full module graph is disabled\",\n@@ -1248,1 +1249,1 @@\n-      if (log_is_enabled(Info, cds, heap)) {\n+      if (log_is_enabled(Info, aot, heap)) {\n@@ -1250,1 +1251,1 @@\n-        log_info(cds, heap)(\"subgraph %s cannot be used because JVMTI ClassFileLoadHook is enabled\",\n+        log_info(aot, heap)(\"subgraph %s cannot be used because JVMTI ClassFileLoadHook is enabled\",\n@@ -1256,1 +1257,1 @@\n-    if (log_is_enabled(Info, cds, heap)) {\n+    if (log_is_enabled(Info, aot, heap)) {\n@@ -1258,1 +1259,1 @@\n-      log_info(cds, heap)(\"%s subgraph %s \", do_init ? \"init\" : \"resolve\", k->external_name());\n+      log_info(aot, heap)(\"%s subgraph %s \", do_init ? \"init\" : \"resolve\", k->external_name());\n@@ -1330,1 +1331,1 @@\n-      log_debug(cds, heap)(\"  \" PTR_FORMAT \" init field @ %2d = \" PTR_FORMAT, p2i(k), field_offset, p2i(v));\n+      log_debug(aot, heap)(\"  \" PTR_FORMAT \" init field @ %2d = \" PTR_FORMAT, p2i(k), field_offset, p2i(v));\n@@ -1335,1 +1336,1 @@\n-    if (log_is_enabled(Info, cds, heap)) {\n+    if (log_is_enabled(Info, aot, heap)) {\n@@ -1337,1 +1338,1 @@\n-      log_info(cds, heap)(\"initialize_from_archived_subgraph %s \" PTR_FORMAT \"%s%s\",\n+      log_info(aot, heap)(\"initialize_from_archived_subgraph %s \" PTR_FORMAT \"%s%s\",\n@@ -1409,1 +1410,1 @@\n-      if (!_record_klasses_only && log_is_enabled(Debug, cds, heap)) {\n+      if (!_record_klasses_only && log_is_enabled(Debug, aot, heap)) {\n@@ -1411,1 +1412,1 @@\n-        log_debug(cds, heap)(\"(%d) %s[%d] ==> \" PTR_FORMAT \" size %zu %s\", _level,\n+        log_debug(aot, heap)(\"(%d) %s[%d] ==> \" PTR_FORMAT \" size %zu %s\", _level,\n@@ -1414,2 +1415,2 @@\n-        if (log_is_enabled(Trace, cds, heap)) {\n-          LogTarget(Trace, cds, heap) log;\n+        if (log_is_enabled(Trace, aot, heap)) {\n+          LogTarget(Trace, aot, heap) log;\n@@ -1502,1 +1503,1 @@\n-    log_error(cds, heap)(\"Cannot archive object \" PTR_FORMAT \" of class %s\", p2i(orig_obj), orig_obj->klass()->external_name());\n+    log_error(aot, heap)(\"Cannot archive object \" PTR_FORMAT \" of class %s\", p2i(orig_obj), orig_obj->klass()->external_name());\n@@ -1507,1 +1508,1 @@\n-  if (log_is_enabled(Debug, cds, heap) && java_lang_Class::is_instance(orig_obj)) {\n+  if (log_is_enabled(Debug, aot, heap) && java_lang_Class::is_instance(orig_obj)) {\n@@ -1509,1 +1510,1 @@\n-    LogTarget(Debug, cds, heap) log;\n+    LogTarget(Debug, aot, heap) log;\n@@ -1548,1 +1549,1 @@\n-      log_error(cds, heap)(\"(%d) Unknown java.lang.Class object is in the archived sub-graph\", level);\n+      log_error(aot, heap)(\"(%d) Unknown java.lang.Class object is in the archived sub-graph\", level);\n@@ -1568,1 +1569,1 @@\n-      log_error(cds, heap)(\n+      log_error(aot, heap)(\n@@ -1653,1 +1654,1 @@\n-  log_debug(cds, heap)(\"Start archiving from: %s::%s (\" PTR_FORMAT \")\", klass_name, field_name, p2i(f));\n+  log_debug(aot, heap)(\"Start archiving from: %s::%s (\" PTR_FORMAT \")\", klass_name, field_name, p2i(f));\n@@ -1656,2 +1657,2 @@\n-    if (log_is_enabled(Trace, cds, heap)) {\n-      LogTarget(Trace, cds, heap) log;\n+    if (log_is_enabled(Trace, aot, heap)) {\n+      LogTarget(Trace, aot, heap) log;\n@@ -1664,1 +1665,1 @@\n-      log_error(cds, heap)(\"Archiving failed %s::%s (some reachable objects cannot be archived)\",\n+      log_error(aot, heap)(\"Archiving failed %s::%s (some reachable objects cannot be archived)\",\n@@ -1671,1 +1672,1 @@\n-      log_info(cds, heap)(\"Archived field %s::%s => \" PTR_FORMAT, klass_name, field_name, p2i(f));\n+      log_info(aot, heap)(\"Archived field %s::%s => \" PTR_FORMAT, klass_name, field_name, p2i(f));\n@@ -1790,1 +1791,1 @@\n-  log_info(cds, heap)(\"Start recording subgraph(s) for archived fields in %s\", class_name);\n+  log_info(aot, heap)(\"Start recording subgraph(s) for archived fields in %s\", class_name);\n@@ -1801,1 +1802,1 @@\n-  log_info(cds, heap)(\"Done recording subgraph(s) for archived fields in %s: \"\n+  log_info(aot, heap)(\"Done recording subgraph(s) for archived fields in %s: \"\n@@ -1853,1 +1854,1 @@\n-      log_warning(cds)(\"Loading ArchiveHeapTestClass %s ...\", test_class_name);\n+      log_warning(aot)(\"Loading ArchiveHeapTestClass %s ...\", test_class_name);\n@@ -1901,1 +1902,1 @@\n-      log_warning(cds)(\"Initializing ArchiveHeapTestClass %s ...\", test_class_name);\n+      log_warning(aot)(\"Initializing ArchiveHeapTestClass %s ...\", test_class_name);\n@@ -2050,1 +2051,1 @@\n-  log_info(cds, heap)(\"Archived subgraph records = %d\",\n+  log_info(aot, heap)(\"Archived subgraph records = %d\",\n@@ -2052,3 +2053,3 @@\n-  log_info(cds, heap)(\"  Walked %d objects\", _num_total_walked_objs);\n-  log_info(cds, heap)(\"  Archived %d objects\", _num_total_archived_objs);\n-  log_info(cds, heap)(\"  Recorded %d klasses\", _num_total_recorded_klasses);\n+  log_info(aot, heap)(\"  Walked %d objects\", _num_total_walked_objs);\n+  log_info(aot, heap)(\"  Archived %d objects\", _num_total_archived_objs);\n+  log_info(aot, heap)(\"  Recorded %d klasses\", _num_total_recorded_klasses);\n@@ -2061,1 +2062,1 @@\n-  log_info(cds, heap)(\"  Verified %d references\", _num_total_verifications);\n+  log_info(aot, heap)(\"  Verified %d references\", _num_total_verifications);\n@@ -2088,1 +2089,1 @@\n-    LogStream ls(Log(cds, heap)::error());\n+    LogStream ls(Log(aot, heap)::error());\n@@ -2161,1 +2162,1 @@\n-    log_info(cds, heap)(\"%8zu objects are <= %-6zu\"\n+    log_info(aot, heap)(\"%8zu objects are <= %-6zu\"\n@@ -2168,1 +2169,1 @@\n-  log_info(cds, heap)(\"%8zu huge  objects               (total %8zu bytes\"\n+  log_info(aot, heap)(\"%8zu huge  objects               (total %8zu bytes\"\n@@ -2172,1 +2173,1 @@\n-  log_info(cds, heap)(\"%8zu total objects               (total %8zu bytes\"\n+  log_info(aot, heap)(\"%8zu total objects               (total %8zu bytes\"\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":63,"deletions":62,"binary":false,"changes":125,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-    log_info(cds)(\"Regenerate MethodHandle Holder classes...\");\n+    log_info(aot)(\"Regenerate MethodHandle Holder classes...\");\n@@ -89,1 +89,1 @@\n-    log_info(cds)(\"Regenerate MethodHandle Holder classes...done\");\n+    log_info(aot)(\"Regenerate MethodHandle Holder classes...done\");\n@@ -117,1 +117,1 @@\n-    log_info(cds)(\"Nothing to regenerate for holder classes\");\n+    log_info(aot)(\"Nothing to regenerate for holder classes\");\n@@ -156,1 +156,1 @@\n-        log_error(cds)(\"Failed to generate LambdaForm holder classes. Is your classlist out of date?\");\n+        log_error(aot)(\"Failed to generate LambdaForm holder classes. Is your classlist out of date?\");\n@@ -158,1 +158,1 @@\n-        log_error(cds)(\"Failed to generate LambdaForm holder classes. Was the base archive generated with an outdated classlist?\");\n+        log_error(aot)(\"Failed to generate LambdaForm holder classes. Was the base archive generated with an outdated classlist?\");\n@@ -229,1 +229,1 @@\n-  log_info(cds, lambda)(\"Regenerated class %s, old: \" INTPTR_FORMAT \" new: \" INTPTR_FORMAT,\n+  log_info(aot, lambda)(\"Regenerated class %s, old: \" INTPTR_FORMAT \" new: \" INTPTR_FORMAT,\n@@ -259,1 +259,1 @@\n-    log_debug(cds)(\"Total LF lines stored into %s: %d\", CDSConfig::type_of_archive_being_written(), count);\n+    log_debug(aot)(\"Total LF lines stored into %s: %d\", CDSConfig::type_of_archive_being_written(), count);\n@@ -271,1 +271,1 @@\n-    log_debug(cds)(\"Total LF lines read from %s: %d\", CDSConfig::type_of_archive_being_loaded(), _static_archive_invokers->length());\n+    log_debug(aot)(\"Total LF lines read from %s: %d\", CDSConfig::type_of_archive_being_loaded(), _static_archive_invokers->length());\n","filename":"src\/hotspot\/share\/cds\/lambdaFormInvokers.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"cds\/aotLogging.hpp\"\n@@ -189,1 +190,1 @@\n-      log_info(cds, hashtables)(\"Expanded _dumped_classes table to %d\", _dumped_classes.table_size());\n+      log_info(aot, hashtables)(\"Expanded _dumped_classes table to %d\", _dumped_classes.table_size());\n@@ -260,1 +261,1 @@\n-    log_info(cds)(\"SharedBaseAddress (\" INTPTR_FORMAT \") aligned up to \" INTPTR_FORMAT,\n+    aot_log_info(aot)(\"SharedBaseAddress (\" INTPTR_FORMAT \") aligned up to \" INTPTR_FORMAT,\n@@ -278,1 +279,1 @@\n-  log_warning(cds)(\"SharedBaseAddress (\" INTPTR_FORMAT \") is %s. Reverted to \" INTPTR_FORMAT,\n+  aot_log_warning(aot)(\"SharedBaseAddress (\" INTPTR_FORMAT \") is %s. Reverted to \" INTPTR_FORMAT,\n@@ -293,1 +294,1 @@\n-  log_info(cds)(\"Core region alignment: %zu\", core_region_alignment());\n+  aot_log_info(aot)(\"Core region alignment: %zu\", core_region_alignment());\n@@ -317,1 +318,1 @@\n-    log_error(cds)(\"Unable to reserve memory for symbols: %zu bytes.\", symbol_rs_size);\n+    aot_log_error(aot)(\"Unable to reserve memory for symbols: %zu bytes.\", symbol_rs_size);\n@@ -353,1 +354,1 @@\n-      log_error(cds)(\"string length too large: %d\", utf8_length);\n+      aot_log_error(aot)(\"string length too large: %d\", utf8_length);\n@@ -370,1 +371,1 @@\n-        log_warning(cds, heap)(\"[line %d] extra interned string allocation failed; size too large: %d\",\n+        log_warning(aot, heap)(\"[line %d] extra interned string allocation failed; size too large: %d\",\n@@ -376,1 +377,1 @@\n-          log_warning(cds, heap)(\"[line %d] extra interned string ignored; size too large: %d\",\n+          log_warning(aot, heap)(\"[line %d] extra interned string ignored; size too large: %d\",\n@@ -410,1 +411,1 @@\n-  log_info(cds)(\"Archived %d method handle intrinsics (%d bytes)\", len, word_size * BytesPerWord);\n+  log_info(aot)(\"Archived %d method handle intrinsics (%d bytes)\", len, word_size * BytesPerWord);\n@@ -542,1 +543,1 @@\n-    log_info(cds)(\"Dumping symbol table ...\");\n+    log_info(aot)(\"Dumping symbol table ...\");\n@@ -659,1 +660,1 @@\n-  log_info(cds)(\"Make classes shareable\");\n+  log_info(aot)(\"Make classes shareable\");\n@@ -671,1 +672,1 @@\n-    log_info(cds)(\"Adjust lambda proxy class dictionary\");\n+    log_info(aot)(\"Adjust lambda proxy class dictionary\");\n@@ -797,1 +798,1 @@\n-      log_error(cds)(\"Out of memory. Please run with a larger Java heap, current MaxHeapSize = \"\n+      aot_log_error(aot)(\"Out of memory. Please run with a larger Java heap, current MaxHeapSize = \"\n@@ -801,1 +802,1 @@\n-      log_error(cds)(\"%s: %s\", PENDING_EXCEPTION->klass()->external_name(),\n+      aot_log_error(aot)(\"%s: %s\", PENDING_EXCEPTION->klass()->external_name(),\n@@ -840,1 +841,1 @@\n-    log_debug(cds)(\"Setting MinHeapSize to 4G for CDS dumping, original size = %zuM\", MinHeapSize\/M);\n+    log_debug(aot)(\"Setting MinHeapSize to 4G for CDS dumping, original size = %zuM\", MinHeapSize\/M);\n@@ -844,1 +845,1 @@\n-    log_debug(cds)(\"Setting InitialHeapSize to 4G for CDS dumping, original size = %zuM\", InitialHeapSize\/M);\n+    log_debug(aot)(\"Setting InitialHeapSize to 4G for CDS dumping, original size = %zuM\", InitialHeapSize\/M);\n@@ -848,1 +849,1 @@\n-    log_debug(cds)(\"Setting MaxHeapSize to 4G for CDS dumping, original size = %zuM\", MaxHeapSize\/M);\n+    log_debug(aot)(\"Setting MaxHeapSize to 4G for CDS dumping, original size = %zuM\", MaxHeapSize\/M);\n@@ -871,1 +872,1 @@\n-  log_info(cds)(\"Loading classes to share ...\");\n+  aot_log_info(aot)(\"Loading classes to share ...\");\n@@ -892,1 +893,1 @@\n-  log_info(cds)(\"Loading classes to share: done.\");\n+  aot_log_info(aot)(\"Loading classes to share: done.\");\n@@ -910,1 +911,1 @@\n-      log_info(cds)(\"Reading extra data from %s ...\", SharedArchiveConfigFile);\n+      log_info(aot)(\"Reading extra data from %s ...\", SharedArchiveConfigFile);\n@@ -912,1 +913,1 @@\n-      log_info(cds)(\"Reading extra data: done.\");\n+      log_info(aot)(\"Reading extra data: done.\");\n@@ -917,1 +918,1 @@\n-    log_info(cds)(\"Reading lambda form invokers from JDK default classlist ...\");\n+    log_info(aot)(\"Reading lambda form invokers from JDK default classlist ...\");\n@@ -941,1 +942,1 @@\n-      log_info(cds)(\"Loading extra classes from %s ...\", ExtraSharedClassListFile);\n+      log_info(aot)(\"Loading extra classes from %s ...\", ExtraSharedClassListFile);\n@@ -948,1 +949,1 @@\n-  log_info(cds)(\"Rewriting and linking classes ...\");\n+  log_info(aot)(\"Rewriting and linking classes ...\");\n@@ -955,1 +956,1 @@\n-  log_info(cds)(\"Rewriting and linking classes: done\");\n+  log_info(aot)(\"Rewriting and linking classes: done\");\n@@ -976,1 +977,1 @@\n-      log_debug(cds)(\"Resetting Class::reflectionFactory\");\n+      log_debug(aot)(\"Resetting Class::reflectionFactory\");\n@@ -991,1 +992,1 @@\n-    log_info(cds)(\"Not dumping heap, reset CDSConfig::_is_using_optimized_module_handling\");\n+    log_info(aot)(\"Not dumping heap, reset CDSConfig::_is_using_optimized_module_handling\");\n@@ -1027,1 +1028,1 @@\n-    log_warning(cds)(\"This %s was created with AllowArchivingWithJavaAgent. It should be used \"\n+    aot_log_warning(aot)(\"This %s was created with AllowArchivingWithJavaAgent. It should be used \"\n@@ -1060,1 +1061,1 @@\n-      log_warning(cds)(\"Preload Warning: Verification failed for %s\",\n+      aot_log_warning(aot)(\"Preload Warning: Verification failed for %s\",\n@@ -1112,1 +1113,1 @@\n-  report_loading_error(message);\n+  report_loading_error(\"%s\", message);\n@@ -1124,2 +1125,5 @@\n-  \/\/ If the user doesn't specify any CDS options, we will try to load the default CDS archive, which\n-  \/\/ may fail due to incompatible VM options. Print at the info level to avoid excessive verbosity.\n+  \/\/ When using AOT cache, errors messages are always printed on the error channel.\n+  LogStream ls_aot(LogLevel::Error, LogTagSetMapping<LOG_TAGS(aot)>::tagset());\n+\n+  \/\/ If we are loading load the default CDS archive, it may fail due to incompatible VM options.\n+  \/\/ Print at the info level to avoid excessive verbosity.\n@@ -1128,4 +1132,7 @@\n-  Log(cds) log;\n-  LogStream ls_error(log.error());\n-  LogStream ls_info(log.info());\n-  LogStream& ls = (!CDSConfig::is_using_archive()) || CDSConfig::is_using_only_default_archive() ? ls_info : ls_error;\n+  LogLevelType level = (!CDSConfig::is_using_archive() || CDSConfig::is_using_only_default_archive()) ?\n+                        LogLevel::Info : LogLevel::Error;\n+  LogStream ls_cds(level, LogTagSetMapping<LOG_TAGS(cds)>::tagset());\n+\n+  LogStream& ls = CDSConfig::new_aot_flags_used() ? ls_aot : ls_cds;\n+  va_list ap;\n+  va_start(ap, format);\n@@ -1135,1 +1142,2 @@\n-    ls.print_cr(\"An error has occurred while processing the %s. Run with -Xlog:cds for details.\", CDSConfig::type_of_archive_being_loaded());\n+    ls.print_cr(\"An error has occurred while processing the %s. Run with -Xlog:%s for details.\",\n+                CDSConfig::type_of_archive_being_loaded(), CDSConfig::new_aot_flags_used() ? \"aot\" : \"aot,cds\");\n@@ -1138,0 +1146,1 @@\n+  ls.vprint_cr(format, ap);\n@@ -1139,6 +1148,1 @@\n-  if (format != nullptr) {\n-    va_list ap;\n-    va_start(ap, format);\n-    ls.vprint_cr(format, ap);\n-    va_end(ap);\n-  }\n+  va_end(ap);\n@@ -1157,1 +1161,1 @@\n-  log_error(cds)(\"An error has occurred while writing the shared archive file.\");\n+  aot_log_error(aot)(\"An error has occurred while writing the shared archive file.\");\n@@ -1159,1 +1163,1 @@\n-    log_error(cds)(\"%s\", message);\n+    aot_log_error(aot)(\"%s\", message);\n@@ -1171,1 +1175,1 @@\n-    log_info(cds)(\"Core region alignment: %zu\", static_mapinfo->core_region_alignment());\n+    aot_log_info(aot)(\"Core region alignment: %zu\", static_mapinfo->core_region_alignment());\n@@ -1174,1 +1178,1 @@\n-    log_info(cds)(\"ArchiveRelocationMode: %d\", ArchiveRelocationMode);\n+    aot_log_info(aot)(\"ArchiveRelocationMode: %d\", ArchiveRelocationMode);\n@@ -1181,1 +1185,1 @@\n-      log_info(cds)(\"Try to map archive(s) at an alternative address\");\n+      aot_log_info(aot)(\"Try to map archive(s) at an alternative address\");\n@@ -1202,1 +1206,1 @@\n-      log_warning(cds)(\"-XX:ArchiveClassesAtExit is unsupported when base CDS archive is not loaded. Run with -Xlog:cds for more info.\");\n+      aot_log_warning(aot)(\"-XX:ArchiveClassesAtExit is unsupported when base CDS archive is not loaded. Run with -Xlog:cds for more info.\");\n@@ -1271,1 +1275,1 @@\n-    log_info(cds)(\"Archive(s) were created with -XX:SharedBaseAddress=0. Always map at os-selected address.\");\n+    aot_log_info(aot)(\"Archive(s) were created with -XX:SharedBaseAddress=0. Always map at os-selected address.\");\n@@ -1279,1 +1283,1 @@\n-      log_info(cds)(\"ArchiveRelocationMode == 1: always map archive(s) at an alternative address\");\n+      aot_log_info(aot)(\"ArchiveRelocationMode == 1: always map archive(s) at an alternative address\");\n@@ -1284,1 +1288,1 @@\n-    log_info(cds)(\"ArchiveRelocationMode == 2: never map archive(s) at an alternative address\");\n+    aot_log_info(aot)(\"ArchiveRelocationMode == 2: never map archive(s) at an alternative address\");\n@@ -1305,1 +1309,1 @@\n-    log_debug(cds)(\"Failed to reserve spaces (use_requested_addr=%u)\", (unsigned)use_requested_addr);\n+    aot_log_debug(aot)(\"Failed to reserve spaces (use_requested_addr=%u)\", (unsigned)use_requested_addr);\n@@ -1335,1 +1339,1 @@\n-    log_info(cds)(\"Reserved archive_space_rs [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] (%zu) bytes%s\",\n+    aot_log_info(aot)(\"Reserved archive_space_rs [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] (%zu) bytes%s\",\n@@ -1338,1 +1342,1 @@\n-    log_info(cds)(\"Reserved class_space_rs   [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] (%zu) bytes\",\n+    aot_log_info(aot)(\"Reserved class_space_rs   [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] (%zu) bytes\",\n@@ -1360,1 +1364,1 @@\n-        log_info(cds)(\"Windows mmap workaround: releasing archive space.\");\n+        aot_log_info(aot)(\"Windows mmap workaround: releasing archive space.\");\n@@ -1377,1 +1381,1 @@\n-            log_debug(cds)(\"Failed to re-reserve protection zone\");\n+            aot_log_debug(aot)(\"Failed to re-reserve protection zone\");\n@@ -1402,1 +1406,1 @@\n-      log_info(cds)(\"ArchiveRelocationMode == 1: always map archive(s) at an alternative address\");\n+      aot_log_info(aot)(\"ArchiveRelocationMode == 1: always map archive(s) at an alternative address\");\n@@ -1471,2 +1475,2 @@\n-    log_info(cds)(\"initial optimized module handling: %s\", CDSConfig::is_using_optimized_module_handling() ? \"enabled\" : \"disabled\");\n-    log_info(cds)(\"initial full module graph: %s\", CDSConfig::is_using_full_module_graph() ? \"enabled\" : \"disabled\");\n+    log_info(aot)(\"initial optimized module handling: %s\", CDSConfig::is_using_optimized_module_handling() ? \"enabled\" : \"disabled\");\n+    log_info(aot)(\"initial full module graph: %s\", CDSConfig::is_using_full_module_graph() ? \"enabled\" : \"disabled\");\n@@ -1618,1 +1622,1 @@\n-    log_info(cds)(\"CDS initialization: Cannot use SharedBaseAddress \" PTR_FORMAT \" with precomputed shift %d.\",\n+    aot_log_info(aot)(\"CDS initialization: Cannot use SharedBaseAddress \" PTR_FORMAT \" with precomputed shift %d.\",\n@@ -1702,1 +1706,1 @@\n-    log_debug(cds)(\"Released shared space (archive + class) \" INTPTR_FORMAT, p2i(total_space_rs.base()));\n+    aot_log_debug(aot)(\"Released shared space (archive + class) \" INTPTR_FORMAT, p2i(total_space_rs.base()));\n@@ -1707,1 +1711,1 @@\n-      log_debug(cds)(\"Released shared space (archive) \" INTPTR_FORMAT, p2i(archive_space_rs.base()));\n+      aot_log_debug(aot)(\"Released shared space (archive) \" INTPTR_FORMAT, p2i(archive_space_rs.base()));\n@@ -1712,1 +1716,1 @@\n-      log_debug(cds)(\"Released shared space (classes) \" INTPTR_FORMAT, p2i(class_space_rs.base()));\n+      aot_log_debug(aot)(\"Released shared space (classes) \" INTPTR_FORMAT, p2i(class_space_rs.base()));\n@@ -1822,1 +1826,1 @@\n-  LogStreamHandle(Info, cds) lsh;\n+  LogStreamHandle(Info, aot) lsh;\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":69,"deletions":65,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-  static void unrecoverable_loading_error(const char* message = nullptr) ATTRIBUTE_PRINTF(1, 0);\n+  static void unrecoverable_loading_error(const char* message = \"unrecoverable error\");\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1209,1 +1209,1 @@\n-  log_debug(cds, mirror)(\"Archived mirror is: \" PTR_FORMAT, p2i(m));\n+  log_debug(aot, mirror)(\"Archived mirror is: \" PTR_FORMAT, p2i(m));\n@@ -1234,1 +1234,1 @@\n-  if (log_is_enabled(Trace, cds, heap, mirror)) {\n+  if (log_is_enabled(Trace, aot, heap, mirror)) {\n@@ -1236,1 +1236,1 @@\n-    log_trace(cds, heap, mirror)(\n+    log_trace(aot, heap, mirror)(\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -795,1 +795,1 @@\n-  if (log_is_enabled(Trace, cds, unshareable)) {\n+  if (log_is_enabled(Trace, aot, unshareable)) {\n@@ -797,1 +797,1 @@\n-    log_trace(cds, unshareable)(\"remove: %s\", external_name());\n+    log_trace(aot, unshareable)(\"remove: %s\", external_name());\n@@ -821,1 +821,1 @@\n-  if (log_is_enabled(Trace, cds, unshareable)) {\n+  if (log_is_enabled(Trace, aot, unshareable)) {\n@@ -823,1 +823,1 @@\n-    log_trace(cds, unshareable)(\"remove java_mirror: %s\", external_name());\n+    log_trace(aot, unshareable)(\"remove java_mirror: %s\", external_name());\n@@ -859,1 +859,1 @@\n-  if (log_is_enabled(Trace, cds, unshareable)) {\n+  if (log_is_enabled(Trace, aot, unshareable)) {\n@@ -862,1 +862,1 @@\n-    log_trace(cds, unshareable)(\"restore: %s with class loader: %s\", external_name(),\n+    log_trace(aot, unshareable)(\"restore: %s with class loader: %s\", external_name(),\n@@ -895,1 +895,1 @@\n-    log_debug(cds, mirror)(\"%s has raw archived mirror\", external_name());\n+    log_debug(aot, mirror)(\"%s has raw archived mirror\", external_name());\n@@ -906,1 +906,1 @@\n-    log_debug(cds, mirror)(\"No archived mirror data for %s\", external_name());\n+    log_debug(aot, mirror)(\"No archived mirror data for %s\", external_name());\n@@ -915,1 +915,1 @@\n-    log_trace(cds, mirror)(\"Recreate mirror for %s\", external_name());\n+    log_trace(aot, mirror)(\"Recreate mirror for %s\", external_name());\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -957,1 +957,1 @@\n-    log_debug(cds, heap)(\"skipped dormant archived object \" INTPTR_FORMAT \" (%s)\", p2i(o),\n+    log_debug(aot, heap)(\"skipped dormant archived object \" INTPTR_FORMAT \" (%s)\", p2i(o),\n@@ -1043,1 +1043,1 @@\n-    log_debug(cds, heap)(\"skipped dormant archived object \" INTPTR_FORMAT \" (%s)\", p2i(obj),\n+    log_debug(aot, heap)(\"skipped dormant archived object \" INTPTR_FORMAT \" (%s)\", p2i(obj),\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"cds\/aotLogging.hpp\"\n@@ -1365,1 +1366,1 @@\n-    log_error(cds)(\"%s is incompatible with other specified options.\",\n+    aot_log_error(aot)(\"%s is incompatible with other specified options.\",\n@@ -1374,1 +1375,1 @@\n-      log_warning(cds)(\"Unable to use AOT cache: %s\", message);\n+      log_warning(aot)(\"Unable to use AOT cache: %s\", message);\n@@ -1565,1 +1566,1 @@\n-          log_info(cds)(\"UseCompressedOops and UseCompressedClassPointers have been disabled due to\"\n+          aot_log_info(aot)(\"UseCompressedOops and UseCompressedClassPointers have been disabled due to\"\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -797,1 +797,1 @@\n-    if (log_is_enabled(Trace, cds, heap)) {\n+    if (log_is_enabled(Trace, aot, heap)) {\n@@ -800,1 +800,1 @@\n-        log_trace(cds, heap)(\"skipped dormant archived object \" INTPTR_FORMAT \" (%s) referenced by \" INTPTR_FORMAT \" (%s)\",\n+        log_trace(aot, heap)(\"skipped dormant archived object \" INTPTR_FORMAT \" (%s) referenced by \" INTPTR_FORMAT \" (%s)\",\n@@ -804,1 +804,1 @@\n-        log_trace(cds, heap)(\"skipped dormant archived object \" INTPTR_FORMAT \" (%s)\",\n+        log_trace(aot, heap)(\"skipped dormant archived object \" INTPTR_FORMAT \" (%s)\",\n@@ -2680,1 +2680,1 @@\n-    log_debug(cds, heap)(\"Error %s while dumping heap\", error());\n+    log_debug(aot, heap)(\"Error %s while dumping heap\", error());\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-            \"-Xlog:cds=debug\",\n+            \"-Xlog:aot=debug\",\n@@ -73,1 +73,1 @@\n-            \"-Xlog:cds\",\n+            \"-Xlog:aot\",\n@@ -76,2 +76,2 @@\n-        out.shouldContain(\"Dumping shared data to file:\");\n-        out.shouldMatch(\"cds.*hello[.]aot\");\n+        out.shouldContain(\"AOTCache creation is complete\");\n+        out.shouldMatch(\"hello[.]aot\");\n@@ -84,1 +84,1 @@\n-            \"-Xlog:cds\",\n+            \"-Xlog:aot\",\n@@ -97,1 +97,1 @@\n-            \"-Xlog:cds\",\n+            \"-Xlog:aot\",\n@@ -111,1 +111,1 @@\n-            \"-Xlog:cds\",\n+            \"-Xlog:aot\",\n@@ -125,1 +125,1 @@\n-            \"-Xlog:cds\",\n+            \"-Xlog:aot\",\n@@ -141,1 +141,1 @@\n-            \"-Xlog:cds\",\n+            \"-Xlog:aot\",\n@@ -144,2 +144,2 @@\n-        out.shouldContain(\"Dumping shared data to file:\");\n-        out.shouldMatch(\"cds.*hello[.]aot\");\n+        out.shouldContain(\"AOTCache creation is complete\");\n+        out.shouldMatch(\"hello[.]aot\");\n@@ -152,1 +152,1 @@\n-            \"-Xlog:cds\",\n+            \"-Xlog:aot\",\n@@ -348,1 +348,1 @@\n-            \"-Xlog:cds\",\n+            \"-Xlog:aot\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/AOTFlags.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-        String logArg = \"-Xlog:cds=debug,cds+reloc=debug,cds+heap\";\n+        String logArg = \"-Xlog:cds=debug,cds+reloc=debug,aot+heap\";\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/ArchiveRelocationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-            OutputAnalyzer output = TestCommon.dump(appJar, appClasses, \"-Xlog:cds+lambda=debug\");\n+            OutputAnalyzer output = TestCommon.dump(appJar, appClasses, \"-Xlog:aot+lambda=debug\");\n@@ -66,1 +66,1 @@\n-            OutputAnalyzer output = TestCommon.dump(appJar, appClasses, \"-Xlog:cds\", \"-Xlog:cds+lambda=debug\");\n+            OutputAnalyzer output = TestCommon.dump(appJar, appClasses, \"-Xlog:cds\", \"-Xlog:aot\", \"-Xlog:aot+lambda=debug\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/ClassListFormatBase.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -97,1 +97,1 @@\n-        final String logArg = \"-Xlog:gc+heap=trace,cds=debug\";\n+        final String logArg = \"-Xlog:gc+heap=trace,cds=debug,aot=debug\";\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/DumpingWithNoCoops.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,1 @@\n-            .addPrefix(\"-cp\", appJar, \"-Xlog:class+load,cds=debug\",\n+            .addPrefix(\"-cp\", appJar, \"-Xlog:class+load=debug,cds=debug,class+path=debug\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/LambdaWithJavaAgent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-            .addVmArgs(\"-Xlog:cds+class=debug\", \"-Xlog:cds\",\n+            .addVmArgs(\"-Xlog:aot+class=debug\", \"-Xlog:aot\", \"-Xlog:cds\",\n@@ -68,4 +68,4 @@\n-                    out.shouldMatch(\"cds,class.*unreg AppWithCustomLoaders[$]MyLoadeeA\")\n-                       .shouldMatch(\"cds,class.*unreg com.test.Foo\")\n-                       .shouldMatch(\"cds,class.*array \\\\[LAppWithCustomLoaders[$]MyLoadeeA;\")\n-                       .shouldNotMatch(\"cds,class.* ReturnIntegerAsString\");\n+                    out.shouldMatch(\",class.*unreg AppWithCustomLoaders[$]MyLoadeeA\")\n+                       .shouldMatch(\",class.*unreg com.test.Foo\")\n+                       .shouldMatch(\",class.*array \\\\[LAppWithCustomLoaders[$]MyLoadeeA;\")\n+                       .shouldNotMatch(\",class.* ReturnIntegerAsString\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/AOTCacheSupportForCustomLoaders.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @summary when AOT cache options are used, old \"cds\" logs should be aliased to \"aot\".\n+ * @requires vm.cds\n+ * @requires vm.flagless\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @build Hello\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar hello.jar Hello\n+ * @run driver AOTLoggingTag\n+ *\/\n+\n+import java.io.File;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class AOTLoggingTag {\n+    static String appJar = ClassFileInstaller.getJarPath(\"hello.jar\");\n+    static String aotConfigFile = \"hello.aotconfig\";\n+    static String aotCacheFile = \"hello.aot\";\n+    static String helloClass = \"Hello\";\n+\n+    public static void main(String[] args) throws Exception {\n+        ProcessBuilder pb;\n+        OutputAnalyzer out;\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Training Run\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-Xlog:aot\",\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"train\");\n+        out.shouldContain(\"[info][aot] Writing binary AOTConfiguration file:\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Assembly Phase\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-Xlog:aot\",\n+            \"-cp\", appJar);\n+        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n+        out.shouldContain(\"[info][aot] Opened AOT configuration file hello.aotconfig\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Production Run with AOTCache\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-Xlog:aot\",\n+            \"-cp\", appJar, helloClass);\n+        out = CDSTestUtils.executeAndLog(pb, \"prod\");\n+        out.shouldContain(\"[info][aot] Opened AOT cache hello.aot\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"All old -Xlog:cds+heap logs have been changed to -Xlog:aot+heap should alias to -Xlog:cds+heap\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-Xlog:aot+heap\",\n+            \"-cp\", appJar, helloClass);\n+        out = CDSTestUtils.executeAndLog(pb, \"prod\");\n+        out.shouldNotContain(\"No tag set matches selection: aot+heap\");\n+        out.shouldContain(\"[info][aot,heap] resolve subgraph java.lang.Integer$IntegerCache\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Production Run: errors should be printed with [aot] decoration\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTCache=nosuchfile.aot\",\n+            \"-XX:AOTMode=on\",\n+            \"-cp\", appJar, helloClass);\n+        out = CDSTestUtils.executeAndLog(pb, \"prod\");\n+        out.shouldContain(\"[error][aot] An error has occurred while processing the AOT cache. Run with -Xlog:aot for details.\");\n+        out.shouldNotHaveExitValue(0);\n+    }\n+\n+    static int testNum = 0;\n+    static void printTestCase(String s) {\n+        System.out.println(\"vvvvvvv TEST CASE \" + testNum + \": \" + s + \" starts here vvvvvvv\");\n+        testNum++;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/AOTLoggingTag.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"},{"patch":"@@ -44,1 +44,1 @@\n-            .addVmArgs(\"-Xlog:cds+class=debug\")\n+            .addVmArgs(\"-Xlog:aot+class=debug\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/VerifierFailOver.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-            .addVmArgs(\"-XX:+UseZGC\", \"-Xlog:cds\")\n+            .addVmArgs(\"-XX:+UseZGC\", \"-Xlog:cds\", \"-Xlog:aot\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/AOTCacheWithZGC.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -127,1 +127,2 @@\n-        TestCommon.run(\"-Xlog:cds\",\n+        TestCommon.run(\"-Xlog:aot\",\n+                       \"-Xlog:cds\",\n@@ -132,1 +133,2 @@\n-        TestCommon.run(\"-Xlog:cds\",\n+        TestCommon.run(\"-Xlog:aot\",\n+                       \"-Xlog:cds\",\n@@ -142,1 +144,2 @@\n-        TestCommon.run(\"-Xlog:cds\",\n+        TestCommon.run(\"-Xlog:aot\",\n+                       \"-Xlog:cds\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/AOTClassLinkingVMOptions.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-                \"-Xlog:cds,cds+aot+load,cds+class=debug\",\n+                \"-Xlog:cds,aot+load,cds+class=debug,aot+class=debug\",\n@@ -161,1 +161,1 @@\n-                out.shouldMatch(\"cds,class.* SimpleCusty\");\n+                out.shouldMatch(\",class.* SimpleCusty\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/BulkLoaderTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+                \"-Xlog:aot\",\n@@ -77,0 +78,1 @@\n+                \"-Xlog:aot+class=debug\",\n@@ -97,3 +99,3 @@\n-                out.shouldMatch(\"cds,class.* FakeCodeLocationApp\");\n-                out.shouldNotMatch(\"cds,class.* ClassNotInJar1\");\n-                out.shouldNotMatch(\"cds,class.* ClassNotInJar2\");\n+                out.shouldMatch(\",class.* FakeCodeLocationApp\");\n+                out.shouldNotMatch(\",class.* ClassNotInJar1\");\n+                out.shouldNotMatch(\",class.* ClassNotInJar2\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/FakeCodeLocation.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,1 @@\n-                                      \"-Xlog:cds+heap\");\n+                                      \"-Xlog:aot+heap\");\n@@ -112,2 +112,2 @@\n-        output.shouldMatch(\"warning.*cds.*Loading ArchiveHeapTestClass \" + CDSTestClassA_name);\n-        output.shouldMatch(\"warning.*cds.*Initializing ArchiveHeapTestClass \" + CDSTestClassA_name);\n+        output.shouldMatch(\"warning.*aot.*Loading ArchiveHeapTestClass \" + CDSTestClassA_name);\n+        output.shouldMatch(\"warning.*aot.*Initializing ArchiveHeapTestClass \" + CDSTestClassA_name);\n@@ -118,1 +118,1 @@\n-        TestCommon.run(\"-Xbootclasspath\/a:\" + bootJar, \"-cp\", appJar, \"-Xlog:cds+heap\", CDSTestClassA_name)\n+        TestCommon.run(\"-Xbootclasspath\/a:\" + bootJar, \"-cp\", appJar, \"-Xlog:aot+heap\", CDSTestClassA_name)\n@@ -172,1 +172,1 @@\n-        TestCommon.run(\"-Xbootclasspath\/a:\" + bootJar, \"-cp\", appJar, \"-Xlog:cds+heap,cds+init\",\n+        TestCommon.run(\"-Xbootclasspath\/a:\" + bootJar, \"-cp\", appJar, \"-Xlog:aot+heap,cds+init\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/cacheObject\/ArchiveHeapTestClass.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-            \"-Xlog:class+load,class+load+array=debug,cds+dynamic=debug,cds=debug,cds+unshareable=trace\";\n+            \"-Xlog:class+load,class+load+array=debug,cds+dynamic=debug,cds=debug,aot+unshareable=trace\";\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/ArrayKlasses.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,1 @@\n-             \"-Xlog:cds=debug\", \/\/ test detailed metadata info printing\n+             \"-Xlog:cds=debug,aot=debug\", \/\/ test detailed metadata info printing\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/DynamicLotsOfClasses.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-            TestCommon.execCommon(\"-Xlog:cds\", \"--version\")\n+            TestCommon.execCommon(\"-Xlog:aot\", \"-Xlog:cds\", \"--version\")\n@@ -82,1 +82,1 @@\n-            TestCommon.execCommon(\"-Xlog:cds\", o.cmdLine(), o.valueA(), \"--version\")\n+            TestCommon.execCommon(\"-Xlog:aot\", \"-Xlog:cds\", o.cmdLine(), o.valueA(), \"--version\")\n@@ -91,1 +91,1 @@\n-            TestCommon.execCommon(\"-Xlog:cds\", o.cmdLine(), o.valueA(), \"--version\")\n+            TestCommon.execCommon(\"-Xlog:aot\", \"-Xlog:cds\", o.cmdLine(), o.valueA(), \"--version\")\n@@ -97,1 +97,1 @@\n-            TestCommon.execCommon(\"-Xlog:cds\", o.cmdLine(), o.valueA(), o.cmdLine(), o.valueB(), \"--version\")\n+            TestCommon.execCommon(\"-Xlog:aot\", \"-Xlog:cds\", o.cmdLine(), o.valueA(), o.cmdLine(), o.valueB(), \"--version\")\n@@ -102,1 +102,1 @@\n-            TestCommon.execCommon(\"-Xlog:cds\", o.cmdLine(), o.valueB(), o.cmdLine(), o.valueA(), \"--version\")\n+            TestCommon.execCommon(\"-Xlog:aot\", \"-Xlog:cds\", o.cmdLine(), o.valueB(), o.cmdLine(), o.valueA(), \"--version\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/ExactOptionMatch.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-        final String loggingOption = \"-Xlog:cds=debug,cds+module=debug,cds+heap=info,module=trace\";\n+        final String loggingOption = \"-Xlog:aot=debug,cds+module=debug,aot+heap=info,cds=debug,module=trace\";\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/addmods\/AddmodsOption.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-        final String loggingOption = \"-Xlog:cds=debug,cds+module=debug,cds+heap=info,module=trace\";\n+        final String loggingOption = \"-Xlog:aot=debug,cds+module=debug,aot+heap=info,cds=debug,module=trace\";\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/addopens\/AddopensOption.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-        final String loggingOption = \"-Xlog:cds=debug,cds+module=debug,cds+heap=info,module=trace\";\n+        final String loggingOption = \"-Xlog:aot=debug,cds+module=debug,aot+heap=info,cds=debug,module=trace\";\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/module\/ModuleOption.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -106,0 +106,1 @@\n+                \"-Xlog:aot\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\/CFLH\/ClassFileLoadHookTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -169,0 +169,1 @@\n+                       \"-Xlog:aot\",\n@@ -176,1 +177,1 @@\n-        opts.addSuffix(\"-Xlog:cds,cds+heap\");\n+        opts.addSuffix(\"-Xlog:aot,aot+heap,cds\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/serviceability\/ReplaceCriticalClasses.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -245,0 +245,1 @@\n+                                                             \"aot=debug\",\n@@ -267,0 +268,2 @@\n+                                                   \"-Xlog:aot\",\n+                                                   \"-Xlog:aot+heap=error\",\n@@ -268,1 +271,0 @@\n-                                                   \"-Xlog:cds+heap=error\",\n@@ -273,0 +275,1 @@\n+                                                             \"aot=debug\",\n@@ -275,1 +278,1 @@\n-                                                             \"cds+heap=warning\",\n+                                                             \"aot+heap=warning\",\n@@ -285,0 +288,2 @@\n+                                                   \"-Xlog:aot\",\n+                                                   \"-Xlog:aot+heap=error\",\n@@ -286,1 +291,0 @@\n-                                                   \"-Xlog:cds+heap=error\",\n@@ -291,0 +295,1 @@\n+                                                             \"aot=debug\",\n@@ -293,1 +298,1 @@\n-                                                             \"cds+heap=warning\",\n+                                                             \"aot+heap=warning\",\n@@ -334,0 +339,1 @@\n+                                            \"-Xlog:aot\",\n@@ -337,0 +343,1 @@\n+                                                      \"aot=debug\",\n@@ -365,1 +372,1 @@\n-                                                   logToFile(productionRunLog(), \"cds\"));\n+                                                   logToFile(productionRunLog(), \"aot\", \"cds\"));\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSAppTester.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"}]}