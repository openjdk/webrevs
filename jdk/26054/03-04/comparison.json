{"files":[{"patch":"@@ -259,1 +259,1 @@\n-            return reader.findNode(\"\/modules\").getChildNames().map(mn -> loadModuleAttributes(reader, mn));\n+            return reader.findNode(\"\/modules\").getChildNames().map(mn -> readModuleAttributes(reader, mn));\n@@ -265,2 +265,2 @@\n-    \/\/ The nodes we are processing must exist (every module must have a module-info.class).\n-    private static ModuleInfo.Attributes loadModuleAttributes(ImageReader reader, String moduleName) {\n+    \/\/ Every module is required to have a valid module-info.class.\n+    private static ModuleInfo.Attributes readModuleAttributes(ImageReader reader, String moduleName) {\n@@ -455,2 +455,1 @@\n-         * a non-resource node, then an {@link Optional#empty() empty optional} is\n-         * returned even if a non-resource node exists with the given name.\n+         * a non-resource node, then {@code null} is returned.\n@@ -458,1 +457,1 @@\n-        private Optional<ImageReader.Node> findResourceNode(ImageReader reader, String name) throws IOException {\n+        private ImageReader.Node findResourceNode(ImageReader reader, String name) throws IOException {\n@@ -465,1 +464,1 @@\n-            return node != null && node.isResource() ? Optional.of(node) : Optional.empty();\n+            return node != null && node.isResource() ? node : null;\n@@ -471,1 +470,1 @@\n-            return findResourceNode(reader, name).map(reader::getResourceBuffer);\n+            return Optional.ofNullable(findResourceNode(reader, name)).map(reader::getResourceBuffer);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/SystemModuleFinders.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"}]}