{"files":[{"patch":"@@ -89,4 +89,0 @@\n-     *\n-     * <p>Almost all callers should use {@link #open(Path)} to obtain a reader\n-     * with the platform native byte ordering. Using a non-native ordering is\n-     * extremely unusual.\n@@ -104,3 +100,0 @@\n-     *\n-     * <p>This is the expected was to open an {@code ImageReader}, and it should\n-     * be rare for anything other than the native byte order to be needed.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageReader.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -259,1 +259,3 @@\n-            return reader.findNode(\"\/modules\").getChildNames().map(mn -> readModuleAttributes(reader, mn));\n+            return reader.findNode(\"\/modules\")\n+                    .getChildNames()\n+                    .map(mn -> readModuleAttributes(reader, mn));\n@@ -265,1 +267,4 @@\n-    \/\/ Every module is required to have a valid module-info.class.\n+    \/**\n+     * Returns the module's \"module-info\", returning a holder for its class file\n+     * attributes. Every module is required to have a valid {@code module-info.class}.\n+     *\/\n@@ -457,1 +462,1 @@\n-        private ImageReader.Node findResourceNode(ImageReader reader, String name) throws IOException {\n+        private ImageReader.Node findResource(ImageReader reader, String name) throws IOException {\n@@ -464,1 +469,1 @@\n-            return node != null && node.isResource() ? node : null;\n+            return (node != null && node.isResource()) ? node : null;\n@@ -470,1 +475,2 @@\n-            return Optional.ofNullable(findResourceNode(reader, name)).map(reader::getResourceBuffer);\n+            return Optional.ofNullable(findResource(reader, name))\n+                    .map(reader::getResourceBuffer);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/SystemModuleFinders.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"}]}