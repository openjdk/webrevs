{"files":[{"patch":"@@ -317,1 +317,1 @@\n-            \/\/ Will fail for non-directory resources, since the image path does not\n+            \/\/ Will fail for non-directory resources since the jimage name does not\n@@ -325,29 +325,3 @@\n-            if (moduleExistsFor(name)) {\n-                \/\/ Resource paths in the image are NOT prefixed with \"\/modules\".\n-                ImageLocation resourceLoc = findLocation(name.substring(MODULES_ROOT.length()));\n-                if (resourceLoc != null) {\n-                    return newResource(name, resourceLoc);\n-                }\n-            }\n-            return null;\n-        }\n-\n-        \/\/ For a given resource name \"\/modules\/<module>\/<path>\", this tests if the parent\n-        \/\/ module directory \"\/modules\/<module>\" exists before looking up the resource\n-        \/\/ location \"\/<module>\/<path>\".\n-        \/\/ TODO (review note): This is a heuristic to avoid spending time on lookup in\n-        \/\/  cases of failure, but is not strictly required for correct behaviour. Its\n-        \/\/  only real advantage seems to be that it only needs to construct a hash for\n-        \/\/  a shorter path in cases where the module doesn't exist, but the actual node\n-        \/\/  is always based on the original name minus the leading prefix. If the jimage\n-        \/\/  is correctly constructed, this test makes no functional difference.\n-        private boolean moduleExistsFor(String name) {\n-            int moduleEnd = name.indexOf('\/', MODULES_ROOT.length() + 1);\n-            if (moduleEnd == -1) {\n-                \/\/ Resources can only exist within \"\/modules\/<module>\/...\"\n-                return false;\n-            }\n-            \/\/ Tests the implied module directory location \"\/modules\/<module>\" exists.\n-            ImageLocation loc = findLocation(name.substring(0, moduleEnd));\n-            assert loc == null || isModulesSubdirectory(loc);\n-            return loc != null;\n+            \/\/ Now try the non-prefixed resource name.\n+            loc = findLocation(name.substring(MODULES_ROOT.length()));\n+            return loc != null ? newResource(name, loc) : null;\n@@ -394,2 +368,2 @@\n-            \/\/ either \"\/modules\" or \"\/packages\", making differentiation easy. It\n-            \/\/ also means that the name is valid, so it must yield a location.\n+            \/\/ either \"\/modules\" or \"\/packages\", making differentiation easy.\n+            \/\/ It also means that the name is valid, so it must yield a location.\n@@ -401,1 +375,1 @@\n-            \/\/ TODO (review note): I feel a bit dirty putting this test in, but it is fast and accurate.\n+            \/\/ The string MUST start \"\/modules\" or \"\/packages\" here.\n@@ -545,0 +519,10 @@\n+     *\n+     * <h3 id=\"node_equality\">Node Equality<\/h3>\n+     *\n+     * Nodes are identified solely by their name, and it is not valid to attempt\n+     * to compare nodes from different reader instances. Different readers may\n+     * produce nodes with the same names, but different contents.\n+     *\n+     * <p>Furthermore, since a {@link ImageReader} provides \"perfect\" caching of\n+     * nodes, equality of nodes from the same reader is equivalent to instance\n+     * identity.\n@@ -564,1 +548,1 @@\n-            throw new IllegalArgumentException(\"not a resource: \" + getName());\n+            throw new IllegalStateException(\"not a resource: \" + getName());\n@@ -623,1 +607,0 @@\n-        \/\/ TODO (review note): Could\/should this be IllegalStateException?\n@@ -628,1 +611,1 @@\n-         * then this method will throw {@link IllegalArgumentException}.\n+         * then this method will throw {@link IllegalStateException}.\n@@ -631,1 +614,1 @@\n-            throw new IllegalArgumentException(\"not a directory: \" + getName());\n+            throw new IllegalStateException(\"not a directory: \" + getName());\n@@ -663,2 +646,1 @@\n-        \/\/\/  TODO (review note): In general, nodes are NOT comparable by name. They\n-        \/\/\/ can differ depending on the reader they came from, and soon preview mode.\n+        \/** See <a href=\"#node_equality\">Node Equality<\/a>. *\/\n@@ -670,0 +652,1 @@\n+        \/** See <a href=\"#node_equality\">Node Equality<\/a>. *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageReader.java","additions":22,"deletions":39,"binary":false,"changes":61,"status":"modified"}]}