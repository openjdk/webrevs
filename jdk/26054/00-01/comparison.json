{"files":[{"patch":"@@ -555,1 +555,1 @@\n-         * Returns the JRY file system compatible name of this node (e.g.\n+         * Returns the JRT file system compatible name of this node (e.g.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import java.util.Objects;\n@@ -62,2 +63,0 @@\n-import static java.util.Objects.requireNonNull;\n-\n@@ -212,1 +211,1 @@\n-     * Parses the module-info.class of all module in the runtime image and\n+     * Parses the {@code module-info.class} of all modules in the runtime image and\n@@ -222,1 +221,1 @@\n-        getModuleAttributes().forEach(attrs -> {\n+        allModuleAttributes().forEach(attrs -> {\n@@ -251,1 +250,6 @@\n-    private static Stream<ModuleInfo.Attributes> getModuleAttributes() {\n+    \/**\n+     * Parses the {@code module-info.class} of all modules in the runtime image and\n+     * returns a stream of {@link ModuleInfo.Attributes Attributes} for them. The\n+     * returned attributes are in no specific order.\n+     *\/\n+    private static Stream<ModuleInfo.Attributes> allModuleAttributes() {\n@@ -254,6 +258,5 @@\n-        return getNode(reader, \"\/modules\")\n-                .getChildNames()\n-                .map(mn -> getNode(reader, mn + \"\/module-info.class\"))\n-                \/\/ This fails with ISE if the node isn't a resource (corrupt JImage).\n-                .map(reader::getResourceBuffer)\n-                .map(bb -> ModuleInfo.read(bb, null));\n+        try {\n+            return reader.findNode(\"\/modules\").getChildNames().map(mn -> loadModuleAttributes(reader, mn));\n+        } catch (IOException e) {\n+            throw new Error(\"Error reading root \/modules entry\", e);\n+        }\n@@ -263,1 +266,2 @@\n-    private static ImageReader.Node getNode(ImageReader reader, String name) {\n+    private static ModuleInfo.Attributes loadModuleAttributes(ImageReader reader, String moduleName) {\n+        Exception err = null;\n@@ -265,3 +269,6 @@\n-            return requireNonNull(reader.findNode(name));\n-        } catch (IOException e) {\n-            throw new IllegalStateException(\"ImageReader node must exist: \" + name, e);\n+            ImageReader.Node node = reader.findNode(moduleName + \"\/module-info.class\");\n+            if (node != null && node.isResource()) {\n+                return ModuleInfo.read(reader.getResourceBuffer(node), null);\n+            }\n+        } catch (IOException | UncheckedIOException e) {\n+            err = e;\n@@ -269,0 +276,1 @@\n+        throw new Error(\"Missing or invalid module-info.class for module: \" + moduleName, err);\n@@ -292,1 +300,1 @@\n-            requireNonNull(name);\n+            Objects.requireNonNull(name);\n@@ -405,1 +413,1 @@\n-            requireNonNull(resourcePath);\n+            Objects.requireNonNull(resourcePath);\n@@ -446,1 +454,3 @@\n-         * Returns the node for the given resource, or {@code null} if not found.\n+         * Returns the node for the given resource if found. If the name references\n+         * a non-resource node, then an {@link Optional#empty() empty optional} is\n+         * returned even if a non-resource node exists with the given name.\n@@ -449,1 +459,1 @@\n-            requireNonNull(name);\n+            Objects.requireNonNull(name);\n@@ -454,5 +464,2 @@\n-            Optional<ImageReader.Node> node = Optional.ofNullable(reader.findNode(nodeName));\n-            if (node.isPresent() && !node.get().isResource()) {\n-                throw new IllegalStateException(\"Not a resource node: \" + node.get());\n-            }\n-            return node;\n+            ImageReader.Node node = reader.findNode(nodeName);\n+            return node != null && node.isResource() ? Optional.of(node) : Optional.empty();\n@@ -469,1 +476,1 @@\n-            requireNonNull(bb);\n+            Objects.requireNonNull(bb);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/SystemModuleFinders.java","additions":32,"deletions":25,"binary":false,"changes":57,"status":"modified"}]}