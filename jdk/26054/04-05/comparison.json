{"files":[{"patch":"@@ -187,1 +187,1 @@\n-        private final Set<ImageReader> openers;\n+        private final Set<ImageReader> openers = new HashSet<>();\n@@ -192,2 +192,1 @@\n-        \/\/ Initialized lazily, see imageFileAttributes().\n-        private BasicFileAttributes imageFileAttributes;\n+        private final BasicFileAttributes imageFileAttributes;\n@@ -195,1 +194,1 @@\n-        \/\/ Guarded by synchronizing 'this' instance.\n+        \/\/ Cache of all user visible nodes, guarded by synchronizing 'this' instance.\n@@ -203,1 +202,1 @@\n-            this.openers = new HashSet<>();\n+            this.imageFileAttributes = Files.readAttributes(imagePath, BasicFileAttributes.class);\n@@ -208,2 +207,2 @@\n-            this.modulesStringOffset = findLocation(\"\/modules\/java.base\").getModuleOffset();\n-            this.packagesStringOffset = findLocation(\"\/packages\/java.lang\").getModuleOffset();\n+            this.modulesStringOffset = getModuleOffset(\"\/modules\/java.base\");\n+            this.packagesStringOffset = getModuleOffset(\"\/packages\/java.lang\");\n@@ -223,0 +222,11 @@\n+        \/\/\/ Returns the offset of the string denoting the leading \"module\" segment\n+        \/\/\/ in the given path (e.g. `<module>\/<path>`). We can't just pass in the\n+        \/\/\/ `\/<module>` string here because that has a module offset of zero.\n+        private int getModuleOffset(String path) {\n+            ImageLocation location = findLocation(path);\n+            assert location != null : \"Cannot find expected jimage location: \" + path;\n+            int offset = location.getModuleOffset();\n+            assert offset != 0 : \"Invalid module offset for jimage location: \" + path;\n+            return offset;\n+        }\n+\n@@ -279,1 +289,1 @@\n-                \/\/ We cannot be given the root paths (\"\/modules\" or \"\/packages\")\n+                \/\/ We cannot get the root paths (\"\/modules\" or \"\/packages\") here\n@@ -300,1 +310,1 @@\n-        \/\/\/ Called by `findNode()` if a `\/modules` node is not present in the cache.\n+        \/\/\/ Called by `findNode()` if a `\/modules\/...` node is not present in the cache.\n@@ -332,1 +342,1 @@\n-        \/\/\/ Called by `findNode()` if a `\/packages` node is not present in the cache.\n+        \/\/\/ Called by `findNode()` if a `\/packages\/...` node is not present in the cache.\n@@ -345,4 +355,4 @@\n-                \/\/ We cannot assume that because the given name was not cached, the\n-                \/\/ directory exists (the given name is untrusted and could reference\n-                \/\/ a non-existent link). However, *if* the parent directory *is*\n-                \/\/ present, we can conclude that the given name is not a valid link.\n+                \/\/ We cannot assume that the parent directory exists for a link node, since\n+                \/\/ the given name is untrusted and could reference a non-existent link.\n+                \/\/ However, if the parent directory is present, we can conclude that the\n+                \/\/ given name was not a valid link (or else it would already be cached).\n@@ -352,0 +362,1 @@\n+                    \/\/ If the parent location doesn't exist, the link node cannot exist.\n@@ -353,3 +364,3 @@\n-                        Directory dir = completePackageDirectory(newDirectory(dirName), loc);\n-                        \/\/ When the parent is created, its child nodes are cached.\n-                        nodes.put(dir.getName(), dir);\n+                        nodes.put(dirName, completePackageDirectory(newDirectory(dirName), loc));\n+                        \/\/ When the parent is created its child nodes are created and cached,\n+                        \/\/ but this can still return null if given name wasn't a valid link.\n@@ -482,15 +493,0 @@\n-        \/\/\/ Returns the file attributes of the image file. Currently, all nodes\n-        \/\/\/ share the same attributes.\n-        private BasicFileAttributes imageFileAttributes() {\n-            BasicFileAttributes attrs = imageFileAttributes;\n-            if (attrs == null) {\n-                try {\n-                    attrs = Files.readAttributes(getImagePath(), BasicFileAttributes.class);\n-                } catch (IOException ioe) {\n-                    throw new UncheckedIOException(ioe);\n-                }\n-                imageFileAttributes = attrs;\n-            }\n-            return attrs;\n-        }\n-\n@@ -501,1 +497,1 @@\n-            return new Directory(name, imageFileAttributes());\n+            return new Directory(name, imageFileAttributes);\n@@ -509,1 +505,1 @@\n-            return new Resource(name, loc, imageFileAttributes());\n+            return new Resource(name, loc, imageFileAttributes);\n@@ -517,1 +513,1 @@\n-            return new LinkNode(name, () -> findNode(targetName), imageFileAttributes());\n+            return new LinkNode(name, () -> findNode(targetName), imageFileAttributes);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageReader.java","additions":31,"deletions":35,"binary":false,"changes":66,"status":"modified"}]}