{"files":[{"patch":"@@ -221,3 +221,5 @@\n-        \/\/\/ Returns the offset of the string denoting the leading \"module\" segment\n-        \/\/\/ in the given path (e.g. `<module>\/<path>`). We can't just pass in the\n-        \/\/\/ `\/<module>` string here because that has a module offset of zero.\n+        \/**\n+         * Returns the offset of the string denoting the leading \"module\" segment in\n+         * the given path (e.g. {@code <module>\/<path>}). We can't just pass in the\n+         * {@code \/<module>} string here because that has a module offset of zero.\n+         *\/\n@@ -273,11 +275,13 @@\n-        \/\/\/ Returns a node with the given name, or null if no resource or directory of\n-        \/\/\/ that name exists.\n-        \/\/\/\n-        \/\/\/ This is the only public API by which anything outside this class can access\n-        \/\/\/ `Node` instances either directly, or by resolving symbolic links.\n-        \/\/\/\n-        \/\/\/ Note also that there is no reentrant calling back to this method from within\n-        \/\/\/ the node handling code.\n-        \/\/\/\n-        \/\/\/ @param name an absolute, `\/`-separated path string, prefixed with either\n-        \/\/\/     \"\/modules\" or \"\/packages\".\n+        \/**\n+         * Returns a node with the given name, or null if no resource or directory of\n+         * that name exists.\n+         *\n+         * <p>This is the only public API by which anything outside this class can access\n+         * {@code Node} instances either directly, or by resolving symbolic links.\n+         *\n+         * <p>Note also that there is no reentrant calling back to this method from within\n+         * the node handling code.\n+         *\n+         * @param name an absolute, {@code \/}-separated path string, prefixed with either\n+         *     \"\/modules\" or \"\/packages\".\n+         *\/\n@@ -306,3 +310,6 @@\n-        \/\/\/ Builds a node in the \"\/modules\/...\" namespace.\n-        \/\/\/\n-        \/\/\/ Called by `findNode()` if a `\/modules\/...` node is not present in the cache.\n+        \/**\n+         * Builds a node in the \"\/modules\/...\" namespace.\n+         *\n+         * <p>Called by {@link #findNode(String)} if a {@code \/modules\/...} node\n+         * is not present in the cache.\n+         *\/\n@@ -324,3 +331,6 @@\n-        \/\/\/ Builds a node in the \"\/packages\/...\" namespace.\n-        \/\/\/\n-        \/\/\/ Called by `findNode()` if a `\/packages\/...` node is not present in the cache.\n+        \/**\n+         * Builds a node in the \"\/packages\/...\" namespace.\n+         *\n+         * <p>Called by {@link #findNode(String)} if a {@code \/packages\/...} node\n+         * is not present in the cache.\n+         *\/\n@@ -358,1 +368,1 @@\n-        \/\/\/ Completes a directory by ensuring its child list is populated correctly.\n+        \/** Completes a directory by ensuring its child list is populated correctly. *\/\n@@ -378,4 +388,6 @@\n-        \/\/\/ Completes a modules directory by setting the list of child nodes.\n-        \/\/\/\n-        \/\/\/ The given directory can be the top level `\/modules` directory, so\n-        \/\/\/ it is NOT safe to use `isModulesSubdirectory(loc)` here.\n+        \/**\n+         * Completes a modules directory by setting the list of child nodes.\n+         *\n+         * <p>The given directory can be the top level {@code \/modules} directory,\n+         * so it is NOT safe to use {@code isModulesSubdirectory(loc)} here.\n+         *\/\n@@ -397,4 +409,6 @@\n-        \/\/\/ Completes a package directory by setting the list of child nodes.\n-        \/\/\/\n-        \/\/\/ The given directory can be the top level `\/packages` directory, so\n-        \/\/\/ it is NOT safe to use `isPackagesSubdirectory(loc)` here.\n+        \/**\n+         * Completes a package directory by setting the list of child nodes.\n+         *\n+         * <p>The given directory can be the top level {@code \/packages} directory,\n+         * so it is NOT safe to use {@code isPackagesSubdirectory(loc)} here.\n+         *\/\n@@ -430,5 +444,6 @@\n-        \/\/\/ Creates the list of child nodes for a `Directory` based on a given\n-        \/\/\/ node creation function.\n-        \/\/\/\n-        \/\/\/ Note: This cannot be used for package subdirectories as they have\n-        \/\/\/ child offsets stored differently to other directories.\n+        \/**\n+         * Creates the list of child nodes for a {@code Directory} based on a given\n+         *\n+         * <p>Note: This cannot be used for package subdirectories as they have\n+         * child offsets stored differently to other directories.\n+         *\/\n@@ -445,1 +460,1 @@\n-        \/\/\/ Helper to extract the integer offset buffer from a directory location.\n+        \/** Helper to extract the integer offset buffer from a directory location. *\/\n@@ -454,5 +469,8 @@\n-        \/\/\/ Determines if an image location is a directory in the `\/modules`\n-        \/\/\/ namespace (if so, the location name is the node name).\n-        \/\/\/\n-        \/\/\/ In jimage, every `ImageLocation` under `\/modules\/` is a directory\n-        \/\/\/ and has the same value for `getModule()`, and `getModuleOffset()`.\n+        \/**\n+         * Determines if an image location is a directory in the {@code \/modules}\n+         * namespace (if so, the location name is the node name).\n+         *\n+         * <p>In jimage, every {@code ImageLocation} under {@code \/modules\/} is a\n+         * directory and has the same value for {@code getModule()}, and {@code\n+         * getModuleOffset()}.\n+         *\/\n@@ -463,5 +481,8 @@\n-        \/\/\/ Determines if an image location is a directory in the `\/packages``\n-        \/\/\/ namespace (if so, the location name is the node name).\n-        \/\/\/\n-        \/\/\/ In jimage, every `ImageLocation` under `\/packages\/` is a directory\n-        \/\/\/ and has the same value for `getModule()`, and `getModuleOffset()`.\n+        \/**\n+         * Determines if an image location is a directory in the {@code \/packages}\n+         * namespace (if so, the location name is the node name).\n+         *\n+         * <p>In jimage, every {@code ImageLocation} under {@code \/packages\/} is a\n+         * directory and has the same value for {@code getModule()}, and {@code\n+         * getModuleOffset()}.\n+         *\/\n@@ -472,1 +493,1 @@\n-        \/\/\/ Determines if an image location represents a directory of some kind.\n+        \/** Determines if an image location represents a directory of some kind. *\/\n@@ -477,3 +498,5 @@\n-        \/\/\/ Creates an \"incomplete\" directory node with no child nodes set.\n-        \/\/\/ Directories need to be \"completed\" before they are returned by\n-        \/\/\/ `findNode()`.\n+        \/**\n+         * Creates an \"incomplete\" directory node with no child nodes set.\n+         * Directories need to be \"completed\" before they are returned by\n+         * {@link #findNode(String)}.\n+         *\/\n@@ -484,3 +507,5 @@\n-        \/\/\/ Creates a new resource from an image location. This is the only case\n-        \/\/\/ where the image location name does not match the requested node name.\n-        \/\/\/ In image files, resource locations are NOT prefixed by `\/modules`.\n+        \/**\n+         * Creates a new resource from an image location. This is the only case\n+         * where the image location name does not match the requested node name.\n+         * In image files, resource locations are NOT prefixed by {@code \/modules}.\n+         *\/\n@@ -492,4 +517,6 @@\n-        \/\/\/ Creates a new link node pointing at the given target name.\n-        \/\/\/\n-        \/\/\/ Note that target node is resolved each time `resolve()` is called, so\n-        \/\/\/ if a link node is retained after its reader is closed, it will fail.\n+        \/**\n+         * Creates a new link node pointing at the given target name.\n+         *\n+         * <p>Note that target node is resolved each time {@code resolve()} is called,\n+         * so if a link node is retained after its reader is closed, it will fail.\n+         *\/\n@@ -500,1 +527,1 @@\n-        \/\/\/ Returns the content of a resource node.\n+        \/** Returns the content of a resource node. *\/\n@@ -669,18 +696,23 @@\n-    \/\/\/ Directory node (referenced from a full path, without a trailing '\/').\n-    \/\/\/\n-    \/\/\/ Directory nodes have two distinct states:\n-    \/\/\/ * Incomplete: The child list has not been set.\n-    \/\/\/ * Complete: The child list has been set.\n-    \/\/\/\n-    \/\/\/ When a directory node is returned by `findNode()` it is always complete,\n-    \/\/\/ but this DOES NOT mean that its child nodes are complete yet.\n-    \/\/\/\n-    \/\/\/ To avoid users being able to access incomplete child nodes, the\n-    \/\/\/ `Node` API offers only a way to obtain child node names, forcing\n-    \/\/\/ callers to invoke {@link ImageReader#findNode(String)} if they need to\n-    \/\/\/ access the child node itself.\n-    \/\/\/\n-    \/\/\/ This approach allows directories to be implemented lazily with respect\n-    \/\/\/ to child nodes, while retaining efficiency when child nodes are accessed\n-    \/\/\/ (since any incomplete nodes will be created and placed in the node cache\n-    \/\/\/ when the parent was first returned to the user).\n+    \/**\n+     * Directory node (referenced from a full path, without a trailing '\/').\n+     *\n+     * <p>Directory nodes have two distinct states:\n+     * <ul>\n+     *     <li>Incomplete: The child list has not been set.\n+     *     <li>Complete: The child list has been set.\n+     * <\/ul>\n+     *\n+     * <p>When a directory node is returned by {@link ImageReader#findNode(String)}\n+     * it is always complete, but this DOES NOT mean that its child nodes are\n+     * complete yet.\n+     *\n+     * <p>To avoid users being able to access incomplete child nodes, the\n+     * {@code Node} API offers only a way to obtain child node names, forcing\n+     * callers to invoke {@code findNode()} if they need to access the child\n+     * node itself.\n+     *\n+     * <p>This approach allows directories to be implemented lazily with respect\n+     * to child nodes, while retaining efficiency when child nodes are accessed\n+     * (since any incomplete nodes will be created and placed in the node cache\n+     * when the parent was first returned to the user).\n+     *\/\n@@ -718,11 +750,12 @@\n-\n-    \/\/\/ Resource node (e.g. a \".class\" entry, or any other data resource).\n-    \/\/\/\n-    \/\/\/ Resources are leaf nodes referencing an underlying image location. They\n-    \/\/\/ are lightweight, and do not cache their contents.\n-    \/\/\/\n-    \/\/\/ Unlike directories (where the node name matches the jimage path for the\n-    \/\/\/ corresponding `ImageLocation`), resource node names are NOT the same as\n-    \/\/\/ the corresponding jimage path. The difference is that node names for\n-    \/\/\/ resources are prefixed with \"\/modules\", which is missing from the\n-    \/\/\/ equivalent jimage path.\n+    \/**\n+     * Resource node (e.g. a \".class\" entry, or any other data resource).\n+     *\n+     * <p>Resources are leaf nodes referencing an underlying image location. They\n+     * are lightweight, and do not cache their contents.\n+     *\n+     * <p>Unlike directories (where the node name matches the jimage path for the\n+     * corresponding {@code ImageLocation}), resource node names are NOT the same\n+     * as the corresponding jimage path. The difference is that node names for\n+     * resources are prefixed with \"\/modules\", which is missing from the\n+     * equivalent jimage path.\n+     *\/\n@@ -763,6 +796,8 @@\n-    \/\/\/ Link node (a symbolic link to a top-level modules directory).\n-    \/\/\/\n-    \/\/\/ Link nodes resolve their target by invoking a given supplier, and do not\n-    \/\/\/ cache the result. Since nodes are cached by the `ImageReader`, this\n-    \/\/\/ means that only the first call to `resolveLink()` could do any\n-    \/\/\/ significant work.\n+    \/**\n+     * Link node (a symbolic link to a top-level modules directory).\n+     *\n+     * <p>Link nodes resolve their target by invoking a given supplier, and do\n+     * not cache the result. Since nodes are cached by the {@code ImageReader},\n+     * this means that only the first call to {@link #resolveLink(boolean)}\n+     * could do any significant work.\n+     *\/\n@@ -779,0 +814,2 @@\n+            \/\/ No need to use or propagate the recursive flag, since the target\n+            \/\/ cannot possibly be a link node (links only point to directories).\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageReader.java","additions":129,"deletions":92,"binary":false,"changes":221,"status":"modified"}]}