{"files":[{"patch":"@@ -326,1 +326,3 @@\n-            \/\/ Now try the non-prefixed resource name.\n+            \/\/ Now try the non-prefixed resource name, but be careful to avoid false\n+            \/\/ positives for names like \"\/modules\/modules\/xxx\" which could return a\n+            \/\/ location of a directory entry.\n@@ -328,1 +330,1 @@\n-            return loc != null ? newResource(name, loc) : null;\n+            return loc != null && isResource(loc) ? newResource(name, loc) : null;\n@@ -462,1 +464,1 @@\n-            assert isDirectory(dir) : \"Not a directory: \" + dir.getFullName();\n+            assert !isResource(dir) : \"Not a directory: \" + dir.getFullName();\n@@ -470,2 +472,1 @@\n-         * Determines if an image location is a directory in the {@code \/modules}\n-         * namespace (if so, the location name is the node name).\n+         * Efficiently determines if an image location is a resource.\n@@ -473,3 +474,3 @@\n-         * <p>In jimage, every {@code ImageLocation} under {@code \/modules\/} is a\n-         * directory and has the same value for {@code getModule()}, and {@code\n-         * getModuleOffset()}.\n+         * <p>A resource must have a valid module associated with it, so its\n+         * module offset must be non-zero, and not equal to the offsets for\n+         * \"\/modules\/...\" or \"\/packages\/...\" entries.\n@@ -477,2 +478,5 @@\n-        private boolean isModulesSubdirectory(ImageLocation loc) {\n-            return loc.getModuleOffset() == modulesStringOffset;\n+        private boolean isResource(ImageLocation loc) {\n+            int moduleOffset = loc.getModuleOffset();\n+            return moduleOffset != 0\n+                    && moduleOffset != modulesStringOffset\n+                    && moduleOffset != packagesStringOffset;\n@@ -482,1 +486,1 @@\n-         * Determines if an image location is a directory in the {@code \/packages}\n+         * Determines if an image location is a directory in the {@code \/modules}\n@@ -485,1 +489,1 @@\n-         * <p>In jimage, every {@code ImageLocation} under {@code \/packages\/} is a\n+         * <p>In jimage, every {@code ImageLocation} under {@code \/modules\/} is a\n@@ -489,7 +493,2 @@\n-        private boolean isPackagesSubdirectory(ImageLocation loc) {\n-            return loc.getModuleOffset() == packagesStringOffset;\n-        }\n-\n-        \/** Determines if an image location represents a directory of some kind. *\/\n-        private boolean isDirectory(ImageLocation loc) {\n-            return isModulesSubdirectory(loc) || isPackagesSubdirectory(loc) || loc.getModuleOffset() == 0;\n+        private boolean isModulesSubdirectory(ImageLocation loc) {\n+            return loc.getModuleOffset() == modulesStringOffset;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageReader.java","additions":18,"deletions":19,"binary":false,"changes":37,"status":"modified"}]}