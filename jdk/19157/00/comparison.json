{"files":[{"patch":"@@ -552,0 +552,1 @@\n+  bool is_abstract() const { return _access_flags.is_abstract(); }\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,2 +78,3 @@\n-static bool can_compress_element(traceid id) {\n-  return Metaspace::using_class_space() && id < uncompressed_threshold;\n+static bool can_compress_element(const Klass* klass) {\n+  return Metaspace::using_class_space() && klass->is_in_klass_space() &&\n+         JfrTraceId::load_raw(klass) < uncompressed_threshold;\n@@ -84,1 +85,1 @@\n-  return element_size(can_compress_element(JfrTraceId::load_raw(klass)));\n+  return element_size(can_compress_element(klass));\n@@ -140,1 +141,2 @@\n-  assert(can_compress_element(id), \"invariant\");\n+  assert(can_compress_element(klass), \"invariant\");\n+  assert(id == JfrTraceId::load_raw(klass), \"invariant\");\n@@ -156,1 +158,1 @@\n-  if (can_compress_element(id)) {\n+  if (can_compress_element(klass)) {\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdKlassQueue.cpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -318,1 +318,2 @@\n-  f(RecordComponent)\n+  f(RecordComponent) \\\n+  f(AbstractClass)\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,1 @@\n-      bool is_klass = md->is_klass();\n+      bool is_klass = md->is_in_klass_space();\n","filename":"src\/hotspot\/share\/memory\/metadataFactory.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,1 +92,1 @@\n-  bool is_klass() const { return false; }\n+  bool is_in_klass_space() const { return false; }\n","filename":"src\/hotspot\/share\/oops\/annotations.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,0 +45,4 @@\n+void* ArrayKlass::operator new(size_t size, ClassLoaderData* loader_data, size_t word_size, TRAPS) throw() {\n+  return Metaspace::allocate(loader_data, word_size, MetaspaceObj::ClassType, THREAD);\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,0 +52,2 @@\n+  void* operator new(size_t size, ClassLoaderData* loader_data, size_t word_size, TRAPS) throw();\n+\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -473,1 +473,1 @@\n-  bool is_klass() const { return false; }\n+  bool is_in_klass_space() const { return false; }\n","filename":"src\/hotspot\/share\/oops\/constMethod.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -234,1 +234,1 @@\n-  bool is_klass() const { return false; }\n+  bool is_in_klass_space() const { return false; }\n","filename":"src\/hotspot\/share\/oops\/cpCache.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -440,0 +440,4 @@\n+void* InstanceKlass::operator new(size_t size, ClassLoaderData* loader_data, size_t word_size, MetaspaceObj::Type type, TRAPS) throw() {\n+  return Metaspace::allocate(loader_data, word_size, type, THREAD);\n+}\n+\n@@ -452,0 +456,1 @@\n+  MetaspaceObj::Type type = (parser.is_interface() || parser.is_abstract()) ? MetaspaceObj::AbstractClassType : MetaspaceObj::ClassType;\n@@ -456,1 +461,1 @@\n-    ik = new (loader_data, size, THREAD) InstanceRefKlass(parser);\n+    ik = new (loader_data, size, type, THREAD) InstanceRefKlass(parser);\n@@ -459,1 +464,1 @@\n-    ik = new (loader_data, size, THREAD) InstanceMirrorKlass(parser);\n+    ik = new (loader_data, size, type, THREAD) InstanceMirrorKlass(parser);\n@@ -462,1 +467,1 @@\n-    ik = new (loader_data, size, THREAD) InstanceStackChunkKlass(parser);\n+    ik = new (loader_data, size, type, THREAD) InstanceStackChunkKlass(parser);\n@@ -465,1 +470,1 @@\n-    ik = new (loader_data, size, THREAD) InstanceClassLoaderKlass(parser);\n+    ik = new (loader_data, size, type, THREAD) InstanceClassLoaderKlass(parser);\n@@ -468,1 +473,1 @@\n-    ik = new (loader_data, size, THREAD) InstanceKlass(parser);\n+    ik = new (loader_data, size, type, THREAD) InstanceKlass(parser);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"memory\/allocation.hpp\"\n@@ -147,0 +148,2 @@\n+  void* operator new(size_t size, ClassLoaderData* loader_data, size_t word_size, MetaspaceObj::Type type, TRAPS) throw();\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -250,4 +250,0 @@\n-void* Klass::operator new(size_t size, ClassLoaderData* loader_data, size_t word_size, TRAPS) throw() {\n-  return Metaspace::allocate(loader_data, word_size, MetaspaceObj::ClassType, THREAD);\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -204,2 +204,0 @@\n-  void* operator new(size_t size, ClassLoaderData* loader_data, size_t word_size, TRAPS) throw();\n-\n@@ -216,0 +214,2 @@\n+  bool is_in_klass_space() const { return !is_interface() && !is_abstract(); }\n+\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,0 +52,1 @@\n+  virtual bool is_in_klass_space() const { return false; }\n","filename":"src\/hotspot\/share\/oops\/metadata.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-    bool is_klass() const { return false; }\n+    bool is_in_klass_space() const { return false; }\n","filename":"src\/hotspot\/share\/oops\/recordComponent.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -279,1 +279,1 @@\n-                    clb.withFlags(ACC_FINAL | ACC_SUPER)\n+                    clb.withFlags(ACC_ABSTRACT | ACC_SUPER)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InvokerBytecodeGenerator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n- *      -XX:MaxMetaspaceSize=20m\n+ *      -XX:MaxMetaspaceSize=10m\n@@ -55,1 +55,1 @@\n- * It tries to allocate all available metespace (loads new classes and keeps\n+ * It tries to allocate all available metaspace (loads new classes and keeps\n@@ -90,1 +90,1 @@\n-        whoAmI = name;\n+        whoAmI = \"%\" + name + \"%\";\n@@ -101,1 +101,1 @@\n-        System.out.println(\"%\" + whoAmI + \"% \" + message);\n+        System.out.println(whoAmI + message);\n@@ -105,1 +105,1 @@\n-        throw new TestFault(\"%\" + whoAmI + \"% \" + message);\n+        throw new TestFault(whoAmI + message);\n@@ -109,1 +109,1 @@\n-        throw new TestFault(\"%\" + whoAmI + \"% \" + message, t);\n+        throw new TestFault(whoAmI + message, t);\n@@ -119,1 +119,1 @@\n-                System.out.println(\"Not applicalbe, Compressed Class Space is required\");\n+                System.out.println(\"Not applicable, Compressed Class Space is required\");\n@@ -124,1 +124,1 @@\n-            log(\"Bootstrapping string concatenation for \" + whoAmI );\n+            log(\"Bootstrapping string concatenation\");\n@@ -153,1 +153,11 @@\n-                throwFault(\"Hmm, we ran out metaspace. Metaspace error is still excpected here \" + error, error);\n+                throwFault(\"Hmm, we ran out metaspace. Metaspace error is still expected here \" + error, error);\n+            }\n+        } catch(BootstrapMethodError bsme) {\n+            Throwable cause = bsme.getCause();\n+            if (cause instanceof OutOfMemoryError) {\n+                OutOfMemoryError error = (OutOfMemoryError)cause;\n+                if (!isMetaspaceError(error)) {\n+                    throwFault(\"Hmm, we got BootstrapMethodError. Metaspace error is still expected as the cause \" + error, bsme);\n+                }\n+            } else {\n+                throwFault(\"We should be out of metaspace but got \" + cause, bsme);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/shrink_grow\/ShrinkGrowTest\/ShrinkGrowTest.java","additions":20,"deletions":10,"binary":false,"changes":30,"status":"modified"}]}