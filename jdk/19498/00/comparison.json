{"files":[{"patch":"@@ -6028,0 +6028,13 @@\n+        @Override\n+        public void visitRecordPattern(JCRecordPattern that) {\n+            initTypeIfNeeded(that);\n+            if (that.record == null) {\n+                that.record = new ClassSymbol(0, TreeInfo.name(that.deconstructor),\n+                                              that.type, syms.noSymbol);\n+            }\n+            if (that.fullComponentTypes == null) {\n+                that.fullComponentTypes = List.nil();\n+            }\n+            super.visitRecordPattern(that);\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8262891 8268871 8274363 8281100 8294670 8311038 8311815 8325215\n+ * @bug 8262891 8268871 8274363 8281100 8294670 8311038 8311815 8325215 8333169\n@@ -2079,0 +2079,29 @@\n+   @Test \/\/JDK-8333169\n+   public void testFlowForNestedSwitch(Path base) throws Exception {\n+       doTest(base,\n+              new String[0],\n+              \"\"\"\n+              class Main {\n+\n+                  record A() {};\n+\n+                  public static void main(String[] args) {\n+                      A a1 = new A();\n+                      A a2 = new A();\n+\n+                      String causesCompilationError = log(\n+                              switch(a1) {\n+                                  case A() -> switch(a2) {\n+                                      case A() -> \"A\";\n+                                  };\n+                              }\n+                      );\n+                   }\n+\n+                  static <T> T log(T t) {\n+                      System.out.println(\"LOG: \" + t);\n+                      return t;\n+                  }\n+              }\"\"\");\n+   }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/Exhaustiveness.java","additions":30,"deletions":1,"binary":false,"changes":31,"status":"modified"}]}