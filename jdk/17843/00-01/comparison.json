{"files":[{"patch":"@@ -593,11 +593,6 @@\n-    private static String getMainClassFromJar(String jarname, JarFile jarFile) {\n-        String mainValue;\n-        try {\n-            Manifest manifest = jarFile.getManifest();\n-            if (manifest == null) {\n-                abort(null, \"java.launcher.jar.error2\", jarname);\n-            }\n-            Attributes mainAttrs = manifest.getMainAttributes();\n-            if (mainAttrs == null) {\n-                abort(null, \"java.launcher.jar.error3\", jarname);\n-            }\n+    private static String getMainClassFromJar(JarFile jarFile) throws IOException {\n+        String jarname = jarFile.getName();\n+        Manifest manifest = jarFile.getManifest();\n+        if (manifest == null) {\n+            abort(null, \"java.launcher.jar.error2\", jarname);\n+        }\n@@ -605,5 +600,4 @@\n-            \/\/ Main-Class\n-            mainValue = mainAttrs.getValue(MAIN_CLASS);\n-            if (mainValue == null) {\n-                abort(null, \"java.launcher.jar.error3\", jarname);\n-            }\n+        Attributes mainAttrs = manifest.getMainAttributes();\n+        if (mainAttrs == null) {\n+            abort(null, \"java.launcher.jar.error3\", jarname);\n+        }\n@@ -611,15 +605,5 @@\n-            \/\/ Launcher-Agent-Class (only check for this when Main-Class present)\n-            String agentClass = mainAttrs.getValue(LAUNCHER_AGENT_CLASS);\n-            if (agentClass != null) {\n-                ModuleLayer.boot().findModule(\"java.instrument\").ifPresent(m -> {\n-                    try {\n-                        String cn = \"sun.instrument.InstrumentationImpl\";\n-                        Class<?> clazz = Class.forName(cn, false, null);\n-                        Method loadAgent = clazz.getMethod(\"loadAgent\", String.class);\n-                        loadAgent.invoke(null, jarname);\n-                    } catch (Throwable e) {\n-                        if (e instanceof InvocationTargetException) e = e.getCause();\n-                        abort(e, \"java.launcher.jar.error4\", jarname);\n-                    }\n-                });\n-            }\n+        \/\/ Main-Class\n+        String mainValue = mainAttrs.getValue(MAIN_CLASS);\n+        if (mainValue == null) {\n+            abort(null, \"java.launcher.jar.error3\", jarname);\n+        }\n@@ -627,13 +611,12 @@\n-            \/\/ Add-Exports and Add-Opens\n-            String exports = mainAttrs.getValue(ADD_EXPORTS);\n-            if (exports != null) {\n-                addExportsOrOpens(exports, false);\n-            }\n-            String opens = mainAttrs.getValue(ADD_OPENS);\n-            if (opens != null) {\n-                addExportsOrOpens(opens, true);\n-            }\n-            String enableNativeAccess = mainAttrs.getValue(ENABLE_NATIVE_ACCESS);\n-            if (enableNativeAccess != null) {\n-                if (!enableNativeAccess.equals(\"ALL-UNNAMED\")) {\n-                    abort(null, \"java.launcher.jar.error.illegal.ena.value\", enableNativeAccess);\n+        \/\/ Launcher-Agent-Class (only check for this when Main-Class present)\n+        String agentClass = mainAttrs.getValue(LAUNCHER_AGENT_CLASS);\n+        if (agentClass != null) {\n+            ModuleLayer.boot().findModule(\"java.instrument\").ifPresent(m -> {\n+                try {\n+                    String cn = \"sun.instrument.InstrumentationImpl\";\n+                    Class<?> clazz = Class.forName(cn, false, null);\n+                    Method loadAgent = clazz.getMethod(\"loadAgent\", String.class);\n+                    loadAgent.invoke(null, jarname);\n+                } catch (Throwable e) {\n+                    if (e instanceof InvocationTargetException) e = e.getCause();\n+                    abort(e, \"java.launcher.jar.error4\", jarname);\n@@ -641,2 +624,2 @@\n-                Modules.addEnableNativeAccessToAllUnnamed();\n-            }\n+            });\n+        }\n@@ -644,9 +627,13 @@\n-            \/*\n-             * Hand off to FXHelper if it detects a JavaFX application\n-             * This must be done after ensuring a Main-Class entry\n-             * exists to enforce compliance with the jar specification\n-             *\/\n-            if (mainAttrs.containsKey(\n-                    new Attributes.Name(JAVAFX_APPLICATION_MARKER))) {\n-                FXHelper.setFXLaunchParameters(jarname, LM_JAR);\n-                return FXHelper.class.getName();\n+        \/\/ Add-Exports and Add-Opens\n+        String exports = mainAttrs.getValue(ADD_EXPORTS);\n+        if (exports != null) {\n+            addExportsOrOpens(exports, false);\n+        }\n+        String opens = mainAttrs.getValue(ADD_OPENS);\n+        if (opens != null) {\n+            addExportsOrOpens(opens, true);\n+        }\n+        String enableNativeAccess = mainAttrs.getValue(ENABLE_NATIVE_ACCESS);\n+        if (enableNativeAccess != null) {\n+            if (!enableNativeAccess.equals(\"ALL-UNNAMED\")) {\n+                abort(null, \"java.launcher.jar.error.illegal.ena.value\", enableNativeAccess);\n@@ -654,0 +641,2 @@\n+            Modules.addEnableNativeAccessToAllUnnamed();\n+        }\n@@ -655,3 +644,9 @@\n-            return mainValue.trim();\n-        } catch (IOException ioe) {\n-            abort(ioe, \"java.launcher.jar.error1\", jarname);\n+        \/*\n+         * Hand off to FXHelper if it detects a JavaFX application\n+         * This must be done after ensuring a Main-Class entry\n+         * exists to enforce compliance with the jar specification\n+         *\/\n+        if (mainAttrs.containsKey(\n+                new Attributes.Name(JAVAFX_APPLICATION_MARKER))) {\n+            FXHelper.setFXLaunchParameters(jarname, LM_JAR);\n+            return FXHelper.class.getName();\n@@ -659,1 +654,2 @@\n-        return null;\n+\n+        return mainValue.trim();\n@@ -822,2 +818,4 @@\n-        String cn;\n-        \/\/ store the jar file\n+        String cn = null;\n+        \/\/ In LM_JAR mode, put the underlying file in the JarFile\/ZipFile cache.\n+        \/\/ This will avoid needing to re-parse the manifest when the JAR file\n+        \/\/ is opened on the class path, triggered by Class.forName below.\n@@ -832,0 +830,1 @@\n+                    cn = getMainClassFromJar(jarFile);\n@@ -835,1 +834,0 @@\n-                cn = getMainClassFromJar(what, jarFile);\n@@ -876,1 +874,1 @@\n-                    abort(ioe, \"java.launcher.jar.error1\", what);\n+                    abort(ioe, \"java.launcher.jar.error5\", what);\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":61,"deletions":63,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -264,0 +264,2 @@\n+java.launcher.jar.error5=\\\n+    Error: An unexpected error occurred while trying to close file {0}\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/resources\/launcher.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}