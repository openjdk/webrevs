{"files":[{"patch":"@@ -938,27 +938,16 @@\n-  # Check whether the compiler supports the Arm C Language Extensions (ACLE)\n-  # for SVE. Set SVE_CFLAGS to -march=armv8-a+sve if it does.\n-  # ACLE and this flag are required to build the aarch64 SVE related functions in\n-  # libvectormath. Apple Silicon does not support SVE; use macOS as a proxy for\n-  # that check.\n-  if test \"x$FLAGS_CPU\" = \"xaarch64\" && test \"x$FLAGS_OS\" = \"xlinux\"; then\n-    if test \"x$TOOLCHAIN_TYPE\" = xgcc || test \"x$TOOLCHAIN_TYPE\" = xclang; then\n-      AC_LANG_PUSH(C)\n-      OLD_CFLAGS=\"$CFLAGS\"\n-      CFLAGS=\"$CFLAGS -march=armv8-a+sve\"\n-      # check the compiler and binutils support sve or not\n-      AC_MSG_CHECKING([if Arm SVE ACLE is supported])\n-      saved_cflags=\"$CFLAGS\"\n-      saved_cc=\"$CC\"\n-      CFLAGS=\"$CFLAGS $CFLAGS_WARNINGS_ARE_ERRORS ARG_ARGUMENT\"\n-      CC=\"$ARG_PREFIX[CC]\"\n-      AC_LANG_PUSH([C])\n-      AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n-          [\n-            #include <arm_sve.h>\n-            svfloat64_t a() {}\n-          ],\n-          [\n-            svint32_t r = svdup_n_s32(1)\n-          ])],\n-          [sve_supported=yes],\n-          [sve_supported=no]\n+  $2SVE_CFLAGS=\"\"\n+  if test \"x$AARCH64_SVE_ENABLED\" = xtrue; then\n+    $2SVE_CFLAGS=\"-march=armv8-a+sve\"\n+    # Switching the initialization mode with gcc from 'pattern' to 'zero'\n+    # avoids the use of unsupported `__builtin_clear_padding` for variable\n+    # length aggregates\n+    AC_LANG_PUSH(C)\n+    OLD_CFLAGS=\"$CFLAGS\"\n+    if test \"x$DEBUG_LEVEL\" != xrelease && test \"x$TOOLCHAIN_TYPE\" = xgcc ; then\n+      AC_MSG_CHECKING([Switching the initialization mode with gcc from pattern to zero])\n+      INIT_ZERO_FLAG=\"-ftrivial-auto-var-init=zero\"\n+      FLAGS_COMPILER_CHECK_ARGUMENTS(ARGUMENT: [$INIT_ZERO_FLAG],\n+        PREFIX: $3,\n+        IF_TRUE: [\n+          $2SVE_CFLAGS=\"${$2SVE_CFLAGS} $INIT_ZERO_FLAG\"\n+        ]\n@@ -966,32 +955,0 @@\n-      AC_MSG_RESULT([$sve_supported])\n-      AC_LANG_POP([C])\n-      CC=\"$saved_cc\"\n-      CFLAGS=\"$saved_cflags\"\n-      $2SVE_CFLAGS=\"\"\n-      if test \"x$AARCH64_SVE_ENABLED\" = \"xtrue\"; then\n-        if test \"x$sve_supported\" = \"xyes\"; then\n-          $2SVE_CFLAGS=\"-march=armv8-a+sve\"\n-        else\n-          AC_MSG_ERROR([--enable-aarch64-sve but compiler or binutils does not support SVE])\n-        fi\n-      elif test \"x$AARCH64_SVE_ENABLED\" = \"xfalse\"; then\n-        # disable sve explicitly\n-        if test \"x$sve_supported\" = \"xyes\"; then\n-          $2SVE_CFLAGS=\"\"\n-        fi\n-      fi\n-      # Switching the initialization mode with gcc from 'pattern' to 'zero'\n-      # avoids the use of unsupported `__builtin_clear_padding` for variable\n-      # length aggregates\n-      if test \"x$$2SVE_CFLAGS\" != \"x\" && test \"x$DEBUG_LEVEL\" != xrelease && test \"x$TOOLCHAIN_TYPE\" = xgcc ; then\n-        AC_MSG_CHECKING([Switching the initialization mode with gcc from pattern to zero])\n-        INIT_ZERO_FLAG=\"-ftrivial-auto-var-init=zero\"\n-        FLAGS_COMPILER_CHECK_ARGUMENTS(ARGUMENT: [$INIT_ZERO_FLAG],\n-          PREFIX: $3,\n-          IF_TRUE: [\n-            $2SVE_CFLAGS=\"${$2SVE_CFLAGS} $INIT_ZERO_FLAG\"\n-          ]\n-        )\n-      fi\n-      CFLAGS=\"$OLD_CFLAGS\"\n-      AC_LANG_POP(C)\n@@ -999,0 +956,2 @@\n+    CFLAGS=\"$OLD_CFLAGS\"\n+    AC_LANG_POP(C)\n","filename":"make\/autoconf\/flags-cflags.m4","additions":18,"deletions":59,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -370,1 +370,35 @@\n-    DESC: [Use SVE when compile libsleef])\n+    DESC: [Use SVE when compile libsleef],\n+    CHECK_AVAILABLE: [\n+      # Check whether the compiler supports the Arm C Language Extensions (ACLE)\n+      # for SVE. Set SVE_CFLAGS to -march=armv8-a+sve if it does.\n+      # ACLE and this flag are required to build the aarch64 SVE related functions in\n+      # libvectormath. Apple Silicon does not support SVE; use macOS as a proxy for\n+      # that check.\n+      if test \"x$FLAGS_CPU\" = \"xaarch64\" && test \"x$FLAGS_OS\" = \"xlinux\"; then\n+        if test \"x$TOOLCHAIN_TYPE\" = xgcc || test \"x$TOOLCHAIN_TYPE\" = xclang; then\n+          CFLAGS=\"$CFLAGS -march=armv8-a+sve\"\n+          # check the compiler and binutils support sve or not\n+          AC_MSG_CHECKING([if Arm SVE ACLE is supported])\n+          saved_cflags=\"$CFLAGS\"\n+          saved_cc=\"$CC\"\n+          CFLAGS=\"$CFLAGS $CFLAGS_WARNINGS_ARE_ERRORS ARG_ARGUMENT\"\n+          CC=\"$ARG_PREFIX[CC]\"\n+          AC_LANG_PUSH([C])\n+          AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n+            [\n+              #include <arm_sve.h>\n+              svfloat64_t a() {}\n+            ],\n+            [\n+              svint32_t r = svdup_n_s32(1)\n+            ])],\n+            [AVAILABLE=yes],\n+            [AVAILABLE=no]\n+          )\n+          AC_MSG_RESULT([$AVAILABLE])\n+          AC_LANG_POP([C])\n+          CC=\"$saved_cc\"\n+          CFLAGS=\"$saved_cflags\"\n+        fi\n+      fi\n+    ])\n","filename":"make\/autoconf\/flags.m4","additions":35,"deletions":1,"binary":false,"changes":36,"status":"modified"}]}