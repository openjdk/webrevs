{"files":[{"patch":"@@ -937,23 +937,0 @@\n-\n-  $2SVE_CFLAGS=\"\"\n-  if test \"x$AARCH64_SVE_ENABLED\" = xtrue; then\n-    $2SVE_CFLAGS=\"-march=armv8-a+sve\"\n-    # Switching the initialization mode with gcc from 'pattern' to 'zero'\n-    # avoids the use of unsupported `__builtin_clear_padding` for variable\n-    # length aggregates\n-    AC_LANG_PUSH(C)\n-    OLD_CFLAGS=\"$CFLAGS\"\n-    if test \"x$DEBUG_LEVEL\" != xrelease && test \"x$TOOLCHAIN_TYPE\" = xgcc ; then\n-      AC_MSG_CHECKING([Switching the initialization mode with gcc from pattern to zero])\n-      INIT_ZERO_FLAG=\"-ftrivial-auto-var-init=zero\"\n-      FLAGS_COMPILER_CHECK_ARGUMENTS(ARGUMENT: [$INIT_ZERO_FLAG],\n-        PREFIX: $3,\n-        IF_TRUE: [\n-          $2SVE_CFLAGS=\"${$2SVE_CFLAGS} $INIT_ZERO_FLAG\"\n-        ]\n-      )\n-    fi\n-    CFLAGS=\"$OLD_CFLAGS\"\n-    AC_LANG_POP(C)\n-  fi\n-  AC_SUBST($2SVE_CFLAGS)\n","filename":"make\/autoconf\/flags-cflags.m4","additions":0,"deletions":23,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -112,0 +112,60 @@\n+AC_DEFUN([FLAGS_SETUP_SVE],\n+[\n+  UTIL_ARG_ENABLE(NAME: aarch64-sve, DEFAULT: auto,\n+    RESULT: AARCH64_SVE_ENABLED,\n+    DESC: [Use SVE when compile libsleef],\n+    CHECK_AVAILABLE: [\n+      # Check whether the compiler supports the Arm C Language Extensions (ACLE)\n+      # for SVE. Set SVE_CFLAGS to -march=armv8-a+sve if it does.\n+      # ACLE and this flag are required to build the aarch64 SVE related functions in\n+      # libvectormath. Apple Silicon does not support SVE; use macOS as a proxy for\n+      # that check.\n+      if test \"x$TOOLCHAIN_TYPE\" = xgcc || test \"x$TOOLCHAIN_TYPE\" = xclang; then\n+        # check the compiler and binutils support sve or not\n+        AC_MSG_CHECKING([if Arm SVE ACLE is supported])\n+        AC_LANG_PUSH([C])\n+        saved_cflags=\"$CFLAGS\"\n+        saved_cc=\"$CC\"\n+        CFLAGS=\"$CFLAGS -march=armv8-a+sve $CFLAGS_WARNINGS_ARE_ERRORS ARG_ARGUMENT\"\n+        CC=\"$ARG_PREFIX[CC]\"\n+        AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n+          [\n+            #include <arm_sve.h>\n+            svfloat64_t a() {}\n+          ],\n+          [\n+            svint32_t r = svdup_n_s32(1)\n+          ])],\n+          [AVAILABLE=yes],\n+          [AVAILABLE=no]\n+        )\n+        AC_MSG_RESULT([$AVAILABLE])\n+        CC=\"$saved_cc\"\n+        CFLAGS=\"$saved_cflags\"\n+        AC_LANG_POP([C])\n+      fi\n+    ])\n+  SVE_CFLAGS=\"\"\n+  if test \"x$AARCH64_SVE_ENABLED\" = xyes || test \"x$AARCH64_SVE_ENABLED\" = xtrue; then\n+    SVE_CFLAGS=\"-march=armv8-a+sve\"\n+    # Switching the initialization mode with gcc from 'pattern' to 'zero'\n+    # avoids the use of unsupported `__builtin_clear_padding` for variable\n+    # length aggregates\n+    AC_LANG_PUSH(C)\n+    OLD_CFLAGS=\"$CFLAGS\"\n+    if test \"x$DEBUG_LEVEL\" != xrelease && test \"x$TOOLCHAIN_TYPE\" = xgcc ; then\n+      AC_MSG_CHECKING([Switching the initialization mode with gcc from pattern to zero])\n+      INIT_ZERO_FLAG=\"-ftrivial-auto-var-init=zero\"\n+      FLAGS_COMPILER_CHECK_ARGUMENTS(ARGUMENT: [$INIT_ZERO_FLAG],\n+        PREFIX: $3,\n+        IF_TRUE: [\n+          SVE_CFLAGS=\"${SVE_CFLAGS} $INIT_ZERO_FLAG\"\n+        ]\n+      )\n+    fi\n+    CFLAGS=\"$OLD_CFLAGS\"\n+    AC_LANG_POP(C)\n+  fi\n+  AC_SUBST(SVE_CFLAGS)\n+])\n+\n","filename":"make\/autoconf\/flags-other.m4","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -368,37 +368,0 @@\n-  UTIL_ARG_ENABLE(NAME: aarch64-sve, DEFAULT: auto,\n-    RESULT: AARCH64_SVE_ENABLED,\n-    DESC: [Use SVE when compile libsleef],\n-    CHECK_AVAILABLE: [\n-      # Check whether the compiler supports the Arm C Language Extensions (ACLE)\n-      # for SVE. Set SVE_CFLAGS to -march=armv8-a+sve if it does.\n-      # ACLE and this flag are required to build the aarch64 SVE related functions in\n-      # libvectormath. Apple Silicon does not support SVE; use macOS as a proxy for\n-      # that check.\n-      if test \"x$FLAGS_CPU\" = \"xaarch64\" && test \"x$FLAGS_OS\" = \"xlinux\"; then\n-        if test \"x$TOOLCHAIN_TYPE\" = xgcc || test \"x$TOOLCHAIN_TYPE\" = xclang; then\n-          # check the compiler and binutils support sve or not\n-          AC_MSG_CHECKING([if Arm SVE ACLE is supported])\n-          AC_LANG_PUSH([C])\n-          saved_cflags=\"$CFLAGS\"\n-          saved_cc=\"$CC\"\n-          CFLAGS=\"$CFLAGS -march=armv8-a+sve $CFLAGS_WARNINGS_ARE_ERRORS ARG_ARGUMENT\"\n-          CC=\"$ARG_PREFIX[CC]\"\n-          AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n-            [\n-              #include <arm_sve.h>\n-              svfloat64_t a() {}\n-            ],\n-            [\n-              svint32_t r = svdup_n_s32(1)\n-            ])],\n-            [AVAILABLE=yes],\n-            [AVAILABLE=no]\n-          )\n-          AC_MSG_RESULT([$AVAILABLE])\n-          AC_LANG_POP([C])\n-          CC=\"$saved_cc\"\n-          CFLAGS=\"$saved_cflags\"\n-        fi\n-      fi\n-    ])\n-\n@@ -414,0 +377,1 @@\n+  FLAGS_SETUP_SVE\n","filename":"make\/autoconf\/flags.m4","additions":1,"deletions":37,"binary":false,"changes":38,"status":"modified"}]}