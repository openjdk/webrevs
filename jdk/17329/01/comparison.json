{"files":[{"patch":"@@ -448,0 +448,3 @@\n+        if (appContext == null) {\n+            return;\n+        }\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/SunToolkit.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,43 +0,0 @@\n-<html>\n-<!--\n- Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<!--\n-  @test\n-  @bug 6384984 8004032\n-  @summary TrayIcon try to dispay a tooltip when is not visible\n-  @author Dmitry.Cherepanov@sun.com area=awt.tray\n-  @run applet\/manual=yesno ShowAfterDisposeTest.html\n-  -->\n-<head>\n-<title> ShowAfterDisposeTest <\/title>\n-<\/head>\n-<body>\n-\n-<h1>ShowAfterDisposeTest<br>Bug ID: 6384984<\/h1>\n-\n-<p> See the dialog box (usually in upper left corner) for instructions<\/p>\n-\n-<APPLET CODE=\"ShowAfterDisposeTest.class\" WIDTH=200 HEIGHT=200><\/APPLET>\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/ShowAfterDisposeTest\/ShowAfterDisposeTest.html","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024 Oracle and\/or its affiliates. All rights reserved.\n@@ -25,5 +25,6 @@\n-  test\n-  @bug 6384984 8004032\n-  @summary TrayIcon try to dispay a tooltip when is not visible\n-  @author Dmitry.Cherepanov@sun.com area=awt.tray\n-  @run applet\/manual=yesno ShowAfterDisposeTest.html\n+ * @test\n+ * @bug 6384984 8004032\n+ * @library ..\/..\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary TrayIcon try to dispay a tooltip when is not visible\n+ * @run main\/manual ShowAfterDisposeTest\n@@ -32,8 +33,13 @@\n-import java.applet.*;\n-\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.image.*;\n-\n-public class ShowAfterDisposeTest extends Applet\n-{\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import java.awt.SystemTray;\n+import java.awt.TrayIcon;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.image.BufferedImage;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+\n+public class ShowAfterDisposeTest {\n+    JFrame frame;\n@@ -42,3 +48,4 @@\n-    public void init()\n-    {\n-        this.setLayout (new BorderLayout ());\n+    public static void main(String[] args) throws Exception {\n+        ShowAfterDisposeTest test = new ShowAfterDisposeTest();\n+        test.startTest();\n+    }\n@@ -46,1 +53,1 @@\n-        String[] instructions;\n+    public void startTest() throws Exception {\n@@ -48,24 +55,3 @@\n-        if (traySupported)\n-        {\n-            String[] s =\n-            {\n-                \"1) When the test starts an icon is added to the SystemTray area.\",\n-                \"2a) If you use Apple OS X,\",\n-                \"    right click on this icon (it's important to click before the tooltip is shown).\",\n-                \"    The icon should disappear.\",\n-                \"2b) If you use other os (Windows, Linux, Solaris),\",\n-                \"    double click on this icon (it's important to click before the tooltip is shown).\",\n-                \"    The icon should disappear.\",\n-                \"3) If the bug is reproducible then the test will fail without assistance.\",\n-                \"4) Just press the 'pass' button.\"\n-            };\n-            instructions = s;\n-        }\n-        else\n-        {\n-            String[] s =\n-            {\n-              \"The test cannot be run because SystemTray is not supported.\",\n-              \"Simply press PASS button.\"\n-            };\n-            instructions = s;\n+        if (!traySupported) {\n+            System.out.println(\"The test cannot be run because SystemTray is not supported.\");\n+            return;\n@@ -73,1 +59,21 @@\n-        Sysout.createDialogWithInstructions(instructions);\n+\n+        String instructions =\n+            \"1) When the test starts an icon is added to the SystemTray area.\\n\" +\n+            \"2a) If you use Apple OS X,\\n\" +\n+            \"    right click on this icon (it's important to click before the tooltip is shown).\\n\" +\n+            \"    The icon should disappear.\\n\" +\n+            \"2b) If you use other os (Windows, Linux, Solaris),\\n\" +\n+            \"    double click on this icon (it's important to click before the tooltip is shown).\\n\" +\n+            \"    The icon should disappear.\\n\" +\n+            \"3) If the bug is reproducible then the test will fail without assistance.\\n\" +\n+            \"4) Just press the 'pass' button.\";\n+\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"Test Instructions Frame\")\n+                .instructions(instructions)\n+                .testTimeOut(10)\n+                .rows(10)\n+                .columns(45)\n+                .build();\n+        showFrameAndIcon();\n+        passFailJFrame.awaitAndCheck();\n@@ -76,5 +82,4 @@\n-    public void start ()\n-    {\n-        setSize (200,200);\n-        setVisible(true);\n-        validate();\n+    public void showFrameAndIcon() throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            frame = new JFrame(\"ShowAfterDisposeTest\");\n+            frame.setLayout(new BorderLayout());\n@@ -82,4 +87,4 @@\n-        if (!traySupported)\n-        {\n-            return;\n-        }\n+            frame.setSize(200,200);\n+            frame.setVisible(true);\n+            frame.validate();\n+        });\n@@ -95,0 +100,1 @@\n+\n@@ -98,8 +104,4 @@\n-        icon.addActionListener(new ActionListener()\n-            {\n-                public void actionPerformed(ActionEvent ev)\n-                {\n-                    tray.remove(icon);\n-                }\n-            }\n-        );\n+        icon.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent ev) {\n+                tray.remove(icon);\n+            }});\n@@ -107,7 +109,1 @@\n-        try {\n-            tray.add(icon);\n-        } catch (AWTException e) {\n-            Sysout.println(e.toString());\n-            Sysout.println(\"!!! The test coudn't be performed !!!\");\n-            return;\n-        }\n+        tray.add(icon);\n@@ -117,130 +113,0 @@\n-\n-\/****************************************************\n- Standard Test Machinery\n- DO NOT modify anything below -- it's a standard\n-  chunk of code whose purpose is to make user\n-  interaction uniform, and thereby make it simpler\n-  to read and understand someone else's test.\n- ****************************************************\/\n-\n-\/**\n- This is part of the standard test machinery.\n- It creates a dialog (with the instructions), and is the interface\n-  for sending text messages to the user.\n- To print the instructions, send an array of strings to Sysout.createDialog\n-  WithInstructions method.  Put one line of instructions per array entry.\n- To display a message for the tester to see, simply call Sysout.println\n-  with the string to be displayed.\n- This mimics System.out.println but works within the test harness as well\n-  as standalone.\n- *\/\n-\n-class Sysout\n-{\n-    private static TestDialog dialog;\n-\n-    public static void createDialogWithInstructions( String[] instructions )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        dialog.printInstructions( instructions );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-    public static void createDialog( )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-        dialog.printInstructions( defInstr );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-    public static void printInstructions( String[] instructions )\n-    {\n-        dialog.printInstructions( instructions );\n-    }\n-\n-    public static void println( String messageIn )\n-    {\n-        dialog.displayMessage( messageIn );\n-    }\n-}\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog\n-{\n-\n-    TextArea instructionsText;\n-    TextArea messageText;\n-    int maxStringLength = 80;\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public TestDialog( Frame frame, String name )\n-    {\n-        super( frame, name );\n-        int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-        instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-        add( \"North\", instructionsText );\n-\n-        messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-        add(\"Center\", messageText);\n-\n-        pack();\n-\n-        setVisible(true);\n-    }\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void printInstructions( String[] instructions )\n-    {\n-        \/\/Clear out any current instructions\n-        instructionsText.setText( \"\" );\n-\n-        \/\/Go down array of instruction strings\n-\n-        String printStr, remainingStr;\n-        for( int i=0; i < instructions.length; i++ )\n-        {\n-            \/\/chop up each into pieces maxSringLength long\n-            remainingStr = instructions[ i ];\n-            while( remainingStr.length() > 0 )\n-            {\n-                \/\/if longer than max then chop off first max chars to print\n-                if( remainingStr.length() >= maxStringLength )\n-                {\n-                    \/\/Try to chop on a word boundary\n-                    int posOfSpace = remainingStr.\n-                        lastIndexOf( ' ', maxStringLength - 1 );\n-\n-                    if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-                    printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-                    remainingStr = remainingStr.substring( posOfSpace + 1 );\n-                }\n-                \/\/else just print\n-                else\n-                {\n-                    printStr = remainingStr;\n-                    remainingStr = \"\";\n-                }\n-\n-                instructionsText.append( printStr + \"\\n\" );\n-            }\n-        }\n-    }\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void displayMessage( String messageIn )\n-    {\n-        messageText.append( messageIn + \"\\n\" );\n-        System.out.println(messageIn);\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/ShowAfterDisposeTest\/ShowAfterDisposeTest.java","additions":63,"deletions":197,"binary":false,"changes":260,"status":"modified"}]}