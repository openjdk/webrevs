{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -222,0 +222,3 @@\n+     * <p>\n+     * Memory segments {@linkplain #allocate(long, long) allocated} by the returned arena\n+     * are zero-initialized.\n@@ -234,0 +237,3 @@\n+     * <p>\n+     * Memory segments {@linkplain #allocate(long, long) allocated} by the returned arena\n+     * are zero-initialized.\n@@ -246,0 +252,3 @@\n+     * <p>\n+     * Memory segments {@linkplain #allocate(long, long) allocated} by the returned arena\n+     * are zero-initialized.\n@@ -254,0 +263,3 @@\n+     * <p>\n+     * Memory segments {@linkplain #allocate(long, long) allocated} by the returned arena\n+     * are zero-initialized.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Arena.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024 Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import java.lang.foreign.ValueLayout;\n@@ -36,0 +37,2 @@\n+import java.util.HexFormat;\n+import java.util.stream.LongStream;\n@@ -111,0 +114,24 @@\n+    @Test\n+    public void testZeroedOfAuto() {\n+        testZeroed(Arena.ofAuto());\n+    }\n+\n+    @Test\n+    public void testZeroedGlobal() {\n+        testZeroed(Arena.global());\n+    }\n+\n+    @Test\n+    public void testZeroedOfConfined() {\n+        try (Arena arena = Arena.ofConfined()) {\n+            testZeroed(arena);\n+        }\n+    }\n+\n+    @Test\n+    public void testZeroedOfShared() {\n+        try (Arena arena = Arena.ofShared()) {\n+            testZeroed(arena);\n+        }\n+    }\n+\n@@ -122,0 +149,10 @@\n+\n+    private static final MemorySegment ZEROED_MEMORY = MemorySegment.ofArray(new byte[8102]);\n+\n+    void testZeroed(Arena arena) {\n+        long byteSize = ZEROED_MEMORY.byteSize();\n+        var segment = arena.allocate(byteSize, Long.BYTES);\n+        long mismatch = ZEROED_MEMORY.mismatch(segment);\n+        assertEquals(mismatch, -1);\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestScope.java","additions":38,"deletions":1,"binary":false,"changes":39,"status":"modified"}]}