{"files":[{"patch":"@@ -291,6 +291,0 @@\n-  if ((NMTPrintMemoryAllocationsSizesFor != nullptr) && (strlen(NMTPrintMemoryAllocationsSizesFor) > 0)) {\n-    NMT_MemoryLogRecorder::printActualSizesFor((const char*)NMTPrintMemoryAllocationsSizesFor);\n-    os::exit(0);\n-    fprintf(stderr, \">> NMTPrintMemoryAllocationsSizesFor:%s\\n\", NMTPrintMemoryAllocationsSizesFor);\n-    fprintf(stderr, \">> os::exit()\\n\");\n-  }\n@@ -585,22 +579,0 @@\n-void NMT_MemoryLogRecorder::printActualSizesFor(const char* list) {\n-fprintf(stderr, \"NMT_MemoryLogRecorder::printActualSizesFor(%s)\\n\", list);\n-  char* string = os::strdup(NMTPrintMemoryAllocationsSizesFor, mtNMT);\n-  if (string != nullptr) {\n-    char* token = permit_forbidden_function::strtok(string, \",\");\n-    while (token) {\n-      long requested =  permit_forbidden_function::strtol(token, nullptr, 10);\n-      long actual = 0;\n-      void *ptr = permit_forbidden_function::malloc(requested);\n-      if (ptr != nullptr) {\n-        actual = NMT_LogRecorder::mallocSize(ptr);\n-        permit_forbidden_function::free(ptr);\n-      }\n-      printf(\"%ld\", actual);\n-        token = permit_forbidden_function::strtok(NULL, \",\");\n-      if (token) {\n-        printf(\",\");\n-      }\n-    }\n-    os::exit(0);\n-  }\n-}\n","filename":"src\/hotspot\/share\/nmt\/memLogRecorder.cpp","additions":0,"deletions":28,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -603,4 +603,0 @@\n-  product(ccstrlist, NMTPrintMemoryAllocationsSizesFor, nullptr, DIAGNOSTIC,\\\n-          \"Print the actual allocated memory sizes for given \"              \\\n-          \"comma separated list of malloc sizes\")                           \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,3 +76,0 @@\n-inline char *strtok(char *str, const char *sep) { return ::strtok(str, sep); }\n-inline long strtol(const char *str, char **endptr, int base) { return ::strtol(str, endptr, base); }\n-\n","filename":"src\/hotspot\/share\/utilities\/permitForbiddenFunctions.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}