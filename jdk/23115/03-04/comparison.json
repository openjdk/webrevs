{"files":[{"patch":"@@ -62,0 +62,1 @@\n+#include <locale.h>\n@@ -156,0 +157,11 @@\n+size_t NMT_LogRecorder::mallocSize(void* ptr)\n+{\n+#if defined(LINUX)\n+  return permit_forbidden_function::malloc_usable_size(ptr);\n+#elif defined(WINDOWS)\n+  return permit_forbidden_function::_msize(ptr);)\n+#elif defined(__APPLE__)\n+  return permit_forbidden_function::malloc_size(ptr);\n+#endif\n+}\n+\n@@ -341,0 +353,1 @@\n+    setlocale(LC_NUMERIC, \"\");\n@@ -381,0 +394,2 @@\n+    jlong requestedTotal = 0;\n+    jlong actualTotal = 0;\n@@ -395,2 +410,2 @@\n-      size_t requested = 0;\n-      size_t actual = 0;\n+      jlong requested = 0;\n+      jlong actual = 0;\n@@ -402,2 +417,2 @@\n-        requested = e->requested;\n-        if (IS_MALOC(e)) {\n+        if (IS_MALOC(e) || (IS_MALLOC_REALLOC(e))) {\n+          address client_ptr = nullptr;\n@@ -406,1 +421,1 @@\n-            pointers[i] = (address)os::malloc(e->requested, mem_tag, stack);\n+            client_ptr = (address)os::malloc(e->requested, mem_tag, stack);\n@@ -409,7 +424,4 @@\n-        } else if (IS_MALLOC_REALLOC(e)) {\n-          start = os::javaTimeNanos();\n-          {\n-            \/\/ the recorded \"realloc\" that was captured in a different process\n-            \/\/ is trivial one (i.e. realloc(nullptr)) which looks like \"malloc\",\n-            \/\/ but continue to treat it as \"realloc\"\n-            pointers[i] = (address)os::realloc(nullptr, e->requested, mem_tag, stack);\n+          if (MemTracker::enabled()) {\n+            actual += NMT_LogRecorder::mallocSize((address)MallocHeader::resolve_checked(client_ptr));\n+          } else {\n+            actual += NMT_LogRecorder::mallocSize(client_ptr);\n@@ -417,1 +429,2 @@\n-          end = os::javaTimeNanos();\n+          requested += e->requested;\n+          pointers[i] = client_ptr;\n@@ -423,1 +436,8 @@\n-            if (e->old == p->ptr) {\n+            if ((e->ptr == p->ptr) && (pointers[j] != nullptr)) {\n+              address client_ptr = pointers[j];\n+              if (MemTracker::enabled()) {\n+                actual -= NMT_LogRecorder::mallocSize((address)MallocHeader::resolve_checked(client_ptr));\n+              } else {\n+                actual -= NMT_LogRecorder::mallocSize(client_ptr);\n+              }\n+              requested -= p->requested;\n@@ -426,1 +446,1 @@\n-                pointers[i] = (address)os::realloc(pointers[j], e->requested, mem_tag, stack);\n+                client_ptr = (address)os::realloc(client_ptr, e->requested, mem_tag, stack);\n@@ -429,0 +449,7 @@\n+              if (MemTracker::enabled()) {\n+                actual += NMT_LogRecorder::mallocSize((address)MallocHeader::resolve_checked(client_ptr));\n+              } else {\n+                actual += NMT_LogRecorder::mallocSize(client_ptr);\n+              }\n+              requested += e->requested;\n+              pointers[i] = client_ptr;\n@@ -438,1 +465,8 @@\n-            if (e->ptr == p->ptr) {\n+            if ((e->ptr == p->ptr) && (pointers[j] != nullptr)) {\n+              void* client_ptr = pointers[j];\n+              if (MemTracker::enabled()) {\n+                actual -= NMT_LogRecorder::mallocSize((address)MallocHeader::resolve_checked(client_ptr));\n+              } else {\n+                actual -= NMT_LogRecorder::mallocSize(client_ptr);\n+              }\n+              requested -= p->requested;\n@@ -441,1 +475,1 @@\n-                os::free(pointers[j]);\n+                os::free(client_ptr);\n@@ -454,13 +488,2 @@\n-        if (!IS_FREE(e)) {\n-          void* outer_ptr = pointers[i];\n-          if ((outer_ptr != nullptr) && (MemTracker::enabled())) {\n-            outer_ptr = MallocHeader::resolve_checked(outer_ptr);\n-          }\n-#if defined(LINUX)\n-          actual = permit_forbidden_function::malloc_usable_size(outer_ptr);\n-#elif defined(WINDOWS)\n-          actual = permit_forbidden_function::_msize(outer_ptr);)\n-#elif defined(__APPLE__)\n-          actual = permit_forbidden_function::malloc_size(outer_ptr);\n-#endif\n-        }\n+        requestedTotal += requested;\n+        actualTotal += actual;\n@@ -478,1 +501,3 @@\n-    fprintf(stderr, \"time:%ld[ns] [samples:%ld]\\n\", total, count);\n+    jlong overhead = actualTotal - requestedTotal;\n+    double overheadPercentage = 100.0 * (double)overhead \/ (double)requestedTotal;\n+    fprintf(stderr, \"time:%ld[ns] [samples:%ld] memory overhead=%'zu bytes [%.2f%%] [requestedTotal=%'zu actualTotal=%'zu]\\n\", total, count, overhead, overheadPercentage, requestedTotal, actualTotal);\n","filename":"src\/hotspot\/share\/nmt\/memLogRecorder.cpp","additions":56,"deletions":31,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+  static size_t mallocSize(void* ptr);\n","filename":"src\/hotspot\/share\/nmt\/memLogRecorder.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}