{"files":[{"patch":"@@ -75,1 +75,1 @@\n-\n+  \n@@ -462,1 +462,0 @@\n-        headers++;\n@@ -508,1 +507,0 @@\n-            headers--;\n@@ -525,0 +523,1 @@\n+        headers--;\n@@ -526,1 +525,2 @@\n-      } else {\n+      } else if IS_MALLOC(e) {\n+        headers++;\n@@ -738,2 +738,2 @@\n-    size_t level = NMTUtil::parse_tracking_level(NativeMemoryTracking);\n-    _write_and_check(info_fd, &level, sizeof(level));\n+    size_t mode = NMTUtil::parse_tracking_level(NativeMemoryTracking);\n+    _write_and_check(info_fd, &level, sizeof(mode));\n","filename":"src\/hotspot\/share\/nmt\/memLogRecorder.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-#if defined(LINUX)\n+#if defined(LINUX) || defined(WINDOWS)\n","filename":"src\/hotspot\/share\/nmt\/memLogRecorder.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-inline size_t malloc_usable_size(void *_Nullable ptr) { return ::malloc_usable_size(ptr); }\n+inline size_t malloc_usable_size(void *ptr) { return ::malloc_usable_size(ptr); }\n","filename":"src\/hotspot\/share\/utilities\/permitForbiddenFunctions.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}