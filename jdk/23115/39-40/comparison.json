{"files":[{"patch":"@@ -66,0 +66,3 @@\n+#include <unistd.h>\n+#include <errno.h>\n+#include <sys\/mman.h>\n@@ -200,1 +203,1 @@\n-  return permit_forbidden_function::_msize(ptr);)\n+  return permit_forbidden_function::_msize(ptr);\n@@ -378,1 +381,1 @@\n-const long int histogramLimitsSize = sizeof(histogramLimits)\/sizeof(long int);\n+const long int histogramLimitsSize = (long int)(sizeof(histogramLimits)\/sizeof(long int));\n@@ -410,2 +413,2 @@\n-  long int count = (records_fi.size \/ sizeof(Entry));\n-  size_t size_pointers = count * sizeof(address);\n+  long int count = (long int)(records_fi.size \/ sizeof(Entry));\n+  long int size_pointers = (long int)(count * sizeof(address));\n@@ -553,1 +556,1 @@\n-  size_t overhead_NMT = headers * MemTracker::overhead_per_malloc();\n+  long int overhead_NMT = headers * MemTracker::overhead_per_malloc();\n@@ -684,27 +687,27 @@\n-void NMT_MemoryLogRecorder::print(Entry *e) {\n-  if (e == nullptr) {\n-    fprintf(stderr, \"nullptr\\n\");\n-  } else {\n-    if (IS_FREE(e)) {\n-      fprintf(stderr, \"           FREE: \");\n-    } else if (IS_REALLOC(e)) {\n-      fprintf(stderr, \"        REALLOC: \");\n-    } else if (IS_MALLOC(e)) {\n-      fprintf(stderr, \"         MALLOC: \");\n-    }\n-    fprintf(stderr, \"time:%15ld, thread:%6ld, ptr:%14p, old:%14p, requested:%8ld, actual:%8ld, mem_tag:%s\\n\", e->time, e->thread, e->ptr, e->old, e->requested, e->actual, NMTUtil::tag_to_name(NMTUtil::index_to_tag((int)e->mem_tag)));\n-  }\n-}\n-\n-static inline const char* type_to_name(NMT_VirtualMemoryLogRecorder::Type type) {\n-  switch (type) {\n-    case NMT_VirtualMemoryLogRecorder::Type::RESERVE: return \"RESERVE\"; break;\n-    case NMT_VirtualMemoryLogRecorder::Type::RELEASE: return \"RELEASE\"; break;\n-    case NMT_VirtualMemoryLogRecorder::Type::UNCOMMIT: return \"UNCOMMIT\"; break;\n-    case NMT_VirtualMemoryLogRecorder::Type::RESERVE_AND_COMMIT: return \"RESERVE_AND_COMMIT\"; break;\n-    case NMT_VirtualMemoryLogRecorder::Type::COMMIT: return \"COMMIT\"; break;\n-    case NMT_VirtualMemoryLogRecorder::Type::SPLIT_RESERVED: return \"SPLIT_RESERVED\"; break;\n-    case NMT_VirtualMemoryLogRecorder::Type::TAG: return \"TAG\"; break;\n-    default: break;\n-  }\n-}\n+\/\/void NMT_MemoryLogRecorder::print(Entry *e) {\n+\/\/  if (e == nullptr) {\n+\/\/    fprintf(stderr, \"nullptr\\n\");\n+\/\/  } else {\n+\/\/    if (IS_FREE(e)) {\n+\/\/      fprintf(stderr, \"           FREE: \");\n+\/\/    } else if (IS_REALLOC(e)) {\n+\/\/      fprintf(stderr, \"        REALLOC: \");\n+\/\/    } else if (IS_MALLOC(e)) {\n+\/\/      fprintf(stderr, \"         MALLOC: \");\n+\/\/    }\n+\/\/    fprintf(stderr, \"time:%15ld, thread:%6ld, ptr:%14p, old:%14p, requested:%8ld, actual:%8ld, mem_tag:%s\\n\", e->time, e->thread, e->ptr, e->old, e->requested, e->actual, NMTUtil::tag_to_name(NMTUtil::index_to_tag((int)e->mem_tag)));\n+\/\/  }\n+\/\/}\n+\n+\/\/static inline const char* type_to_name(NMT_VirtualMemoryLogRecorder::Type type) {\n+\/\/  switch (type) {\n+\/\/    case NMT_VirtualMemoryLogRecorder::Type::RESERVE: return \"RESERVE\"; break;\n+\/\/    case NMT_VirtualMemoryLogRecorder::Type::RELEASE: return \"RELEASE\"; break;\n+\/\/    case NMT_VirtualMemoryLogRecorder::Type::UNCOMMIT: return \"UNCOMMIT\"; break;\n+\/\/    case NMT_VirtualMemoryLogRecorder::Type::RESERVE_AND_COMMIT: return \"RESERVE_AND_COMMIT\"; break;\n+\/\/    case NMT_VirtualMemoryLogRecorder::Type::COMMIT: return \"COMMIT\"; break;\n+\/\/    case NMT_VirtualMemoryLogRecorder::Type::SPLIT_RESERVED: return \"SPLIT_RESERVED\"; break;\n+\/\/    case NMT_VirtualMemoryLogRecorder::Type::TAG: return \"TAG\"; break;\n+\/\/    default: break;\n+\/\/  }\n+\/\/}\n@@ -770,1 +773,1 @@\n-  long int count = (records_fi.size \/ sizeof(Entry));\n+  long int count = (long int)(records_fi.size \/ sizeof(Entry));\n","filename":"src\/hotspot\/share\/nmt\/memLogRecorder.cpp","additions":36,"deletions":33,"binary":false,"changes":69,"status":"modified"}]}