{"files":[{"patch":"@@ -80,0 +80,1 @@\n+#define LD_FORMAT \"%ld\"\n@@ -83,0 +84,2 @@\n+#else\n+#define LD_FORMAT \"%'ld\"\n@@ -408,4 +411,4 @@\n-  if (NMTUtil::parse_tracking_level(NativeMemoryTracking) != recorded_nmt_level) {\n-    tty->print(\"NativeMemoryTracking mismatch [%u != %u].\\n\", recorded_nmt_level, NMTUtil::parse_tracking_level(NativeMemoryTracking));\n-    tty->print(\"Re-run with \\\"-XX:NativeMemoryTracking=%s\\\"\\n\", NMTUtil::tracking_level_to_string(recorded_nmt_level));\n-    os::exit(-1);\n+  bool timeOnly = NMTUtil::parse_tracking_level(NativeMemoryTracking) != recorded_nmt_level;\n+  if (timeOnly) {\n+    tty->print(\"\\n\\nNativeMemoryTracking mismatch [%s != %s].\\n\", NMTUtil::tracking_level_to_string(recorded_nmt_level), NMTUtil::tracking_level_to_string(NMTUtil::parse_tracking_level(NativeMemoryTracking)));\n+    tty->print(\"(Can not be used for memory usage comparison)\\n\");\n@@ -570,53 +573,41 @@\n-#if defined(_WIN64)\n-  fprintf(stderr, \"time:%ld[ns] [samples:%ld] [NMT headers:%ld]\\n\", nanoseconds, count, headers);\n-  fprintf(stderr, \"memory requested:%ld bytes, allocated:%ld bytes\\n\", requestedTotal, actualTotal);\n-#else\n-  fprintf(stderr, \"time:%'ld[ns] [samples:%'ld] [NMT headers:%'ld]\\n\", nanoseconds, count, headers);\n-  fprintf(stderr, \"memory requested:%'ld bytes, allocated:%'ld bytes\\n\", requestedTotal, actualTotal);\n-#endif\n-  double overheadPercentage_NMT = 100.0 * (double)overhead_NMT \/ (double)requestedTotal;\n-#if defined(_WIN64)\n-  fprintf(stderr, \"malloc overhead=%ld bytes [%2.2f%%], NMT headers overhead=%ld bytes [%2.2f%%]\\n\", overhead_malloc, overheadPercentage_malloc, overhead_NMT, overheadPercentage_NMT);\n-  fprintf(stderr, \"\\n\");\n-#else\n-  fprintf(stderr, \"malloc overhead=%'ld bytes [%2.2f%%], NMT headers overhead=%'ld bytes [%2.2f%%]\\n\", overhead_malloc, overheadPercentage_malloc, overhead_NMT, overheadPercentage_NMT);\n-  fprintf(stderr, \"\\n\");\n-#endif\n-  fprintf(stderr, \"%22s: %12s: %12s: %12s: %12s: %12s: %12s: %12s:\\n\", \"NMT type\", \"objects\", \"bytes\", \"time\", \"objects%\", \"bytes%\", \"time%\", \"overhead%\");\n-  fprintf(stderr, \"-------------------------------------------------------------------------------------------------------------------------\\n\");\n-  for (int i = 0; i < mt_number_of_tags; i++) {\n-    double overhead = 0.0;\n-    if (requestedByCategory[i] > 0) {\n-      overhead = 100.0 * ((double)allocatedByCategory[i] - (double)requestedByCategory[i]) \/ (double)requestedByCategory[i];\n-    }\n-#if defined(_WIN64)\n-    fprintf(stderr, \"%22s: %12ld  %12ld   %12ld\", NMTUtil::tag_to_name(NMTUtil::index_to_tag(i)), nmtObjectsByCategory[i], allocatedByCategory[i], timeByCategory[i]);\n-#else\n-    fprintf(stderr, \"%22s: %'12ld  %'12ld   %'12ld\", NMTUtil::tag_to_name(NMTUtil::index_to_tag(i)), nmtObjectsByCategory[i], allocatedByCategory[i], timeByCategory[i]);\n-#endif\n-    double countPercentage = 100.0 * ((double)nmtObjectsByCategory[i] \/ (double)headers);\n-    if (countPercentage > 10.0) {\n-      fprintf(stderr, \"        %.1f%%\", countPercentage);\n-    } else {\n-      fprintf(stderr, \"         %.1f%%\", countPercentage);\n-    }\n-    double bytesPercentage = 100.0 * ((double)allocatedByCategory[i] \/ (double)actualTotal);\n-    if (bytesPercentage > 10.0) {\n-      fprintf(stderr, \"         %.1f%%\", bytesPercentage);\n-    } else {\n-      fprintf(stderr, \"          %.1f%%\", bytesPercentage);\n-    }\n-    double timePercentage = 100.0 * ((double)timeByCategory[i] \/ (double)nanoseconds);\n-    if (timePercentage > 10.0) {\n-      fprintf(stderr, \"         %.1f%%\", timePercentage);\n-    } else {\n-      fprintf(stderr, \"          %.1f%%\", timePercentage);\n-    }\n-    if (overhead > 100.0) {\n-      fprintf(stderr, \"        %.1f%%\", overhead);\n-    } else if (overhead > 10.0) {\n-      fprintf(stderr, \"         %.1f%%\", overhead);\n-    } else {\n-      fprintf(stderr, \"          %.1f%%\", overhead);\n-    }\n-    fprintf(stderr, \"    \");\n+  fprintf(stderr, \"time:\" LD_FORMAT \"[ns]\\n\", nanoseconds);\n+  if (!timeOnly) {\n+    double overheadPercentage_NMT = 100.0 * (double)overhead_NMT \/ (double)requestedTotal;\n+    fprintf(stderr, \"[samples:\" LD_FORMAT \"] [NMT headers:\" LD_FORMAT \"]\\n\", count, headers);\n+    fprintf(stderr, \"memory requested:\" LD_FORMAT \" bytes, allocated:\" LD_FORMAT \" bytes\\n\", requestedTotal, actualTotal);\n+    fprintf(stderr, \"malloc overhead=\" LD_FORMAT \" bytes [%2.2f%%], NMT headers overhead=\" LD_FORMAT \" bytes [%2.2f%%]\\n\", overhead_malloc, overheadPercentage_malloc, overhead_NMT, overheadPercentage_NMT);\n+    fprintf(stderr, \"\\n\");\n+    fprintf(stderr, \"%22s: %12s: %12s: %12s: %12s: %12s: %12s: %12s:\\n\", \"NMT type\", \"objects\", \"bytes\", \"time\", \"objects%\", \"bytes%\", \"time%\", \"overhead%\");\n+    fprintf(stderr, \"-------------------------------------------------------------------------------------------------------------------------\\n\");\n+    for (int i = 0; i < mt_number_of_tags; i++) {\n+      double overhead = 0.0;\n+      if (requestedByCategory[i] > 0) {\n+        overhead = 100.0 * ((double)allocatedByCategory[i] - (double)requestedByCategory[i]) \/ (double)requestedByCategory[i];\n+      }\n+      fprintf(stderr, \"%22s: %'12ld  %'12ld   %'12ld\", NMTUtil::tag_to_name(NMTUtil::index_to_tag(i)), nmtObjectsByCategory[i], allocatedByCategory[i], timeByCategory[i]);\n+      double countPercentage = 100.0 * ((double)nmtObjectsByCategory[i] \/ (double)headers);\n+      if (countPercentage > 10.0) {\n+        fprintf(stderr, \"        %.1f%%\", countPercentage);\n+      } else {\n+        fprintf(stderr, \"         %.1f%%\", countPercentage);\n+      }\n+      double bytesPercentage = 100.0 * ((double)allocatedByCategory[i] \/ (double)actualTotal);\n+      if (bytesPercentage > 10.0) {\n+        fprintf(stderr, \"         %.1f%%\", bytesPercentage);\n+      } else {\n+        fprintf(stderr, \"          %.1f%%\", bytesPercentage);\n+      }\n+      double timePercentage = 100.0 * ((double)timeByCategory[i] \/ (double)nanoseconds);\n+      if (timePercentage > 10.0) {\n+        fprintf(stderr, \"         %.1f%%\", timePercentage);\n+      } else {\n+        fprintf(stderr, \"          %.1f%%\", timePercentage);\n+      }\n+      if (overhead > 100.0) {\n+        fprintf(stderr, \"        %.1f%%\", overhead);\n+      } else if (overhead > 10.0) {\n+        fprintf(stderr, \"         %.1f%%\", overhead);\n+      } else {\n+        fprintf(stderr, \"          %.1f%%\", overhead);\n+      }\n+      fprintf(stderr, \"    \");\n@@ -624,5 +615,6 @@\n-    HistogramBuckets* histogram = &histogramByCategory[i];\n-    long int max = 0;\n-    for (int s = histogramLimitsSize; s >= 0; s--) {\n-      if (histogram->buckets[s] > max) {\n-        max = histogram->buckets[s];\n+      HistogramBuckets* histogram = &histogramByCategory[i];\n+      long int max = 0;\n+      for (int s = histogramLimitsSize; s >= 0; s--) {\n+        if (histogram->buckets[s] > max) {\n+          max = histogram->buckets[s];\n+        }\n@@ -630,0 +622,5 @@\n+      for (int s = 0; s < histogramLimitsSize; s++) {\n+        int index = (int)(100.0 * ((double)histogram->buckets[s] \/ (double)max)) % 8;\n+        fprintf(stderr, \"%s\", histogramChars[index]);\n+      }\n+      fprintf(stderr, \"\\n\");\n@@ -631,5 +628,0 @@\n-    for (int s = 0; s < histogramLimitsSize; s++) {\n-      int index = (int)(100.0 * ((double)histogram->buckets[s] \/ (double)max)) % 8;\n-      fprintf(stderr, \"%s\", histogramChars[index]);\n-    }\n-    fprintf(stderr, \"\\n\");\n@@ -866,5 +858,1 @@\n-#if defined(_WIN64)\n-  fprintf(stderr, \"time:%ld[ns] [samples:%ld]\\n\", total, count);\n-#else\n-  fprintf(stderr, \"time:%'ld[ns] [samples:%'ld]\\n\", total, count);\n-#endif\n+  fprintf(stderr, \"time:\" LD_FORMAT \"[ns] [samples:\" LD_FORMAT \"]\\n\", total, count);\n","filename":"src\/hotspot\/share\/nmt\/memLogRecorder.cpp","additions":60,"deletions":72,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -60,1 +60,0 @@\n-  static void *mmap(void *addr, size_t len, int prot, int flags, int fd);\n","filename":"src\/hotspot\/share\/nmt\/memLogRecorder.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}