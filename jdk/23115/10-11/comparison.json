{"files":[{"patch":"@@ -43,1 +43,1 @@\n-\/\/ .\/build\/macosx-aarch64-server-release\/xcode\/build\/jdk\/bin\/java -XX:+UnlockDiagnosticVMOptions -XX:NativeMemoryTracking=summary -XX:NMTBenchmarkRecordedPID=55996 -XX:NMTBenchmarkRecordedLoops=10\n+\/\/ .\/build\/macosx-aarch64-server-release\/xcode\/build\/jdk\/bin\/java -XX:+UnlockDiagnosticVMOptions -XX:NativeMemoryTracking=summary -XX:NMTBenchmarkRecordedPID=55996\n@@ -290,1 +290,1 @@\n-  fprintf(stderr, \"> NMT_MemoryLogRecorder::initialize(%ld)\\n\", limit);\n+  \/\/fprintf(stderr, \"> NMT_MemoryLogRecorder::initialize(%ld)\\n\", limit);\n@@ -342,1 +342,1 @@\n-  fprintf(stderr, \"> NMT_MemoryLogRecorder::replay(\\\"%s\\\", %d)\\n\", path, pid);\n+  \/\/fprintf(stderr, \"NMT_MemoryLogRecorder::replay(\\\"%s\\\", %d)\\n\", path, pid);\n@@ -478,1 +478,0 @@\n-        \/\/fprintf(stderr, \"requested:%ld, actual:%ld\\n\", requested, actual);\n@@ -626,1 +625,1 @@\n-  fprintf(stderr, \"> NMT_VirtualMemoryLogRecorder::initialize(%ld)\\n\", limit);\n+  \/\/fprintf(stderr, \"NMT_VirtualMemoryLogRecorder::initialize(%ld)\\n\", limit);\n@@ -669,1 +668,1 @@\n-    fprintf(stderr, \"NMT_VirtualMemoryLogRecorder::replay(\\\"%s\\\", %d)\\n\", path, pid);\n+    \/\/fprintf(stderr, \"NMT_VirtualMemoryLogRecorder::replay(\\\"%s\\\", %d)\\n\", path, pid);\n@@ -691,15 +690,9 @@\n-    for (off_t l = 0; l < NMTBenchmarkRecordedLoops; l++) {\n-      \/\/VirtualMemoryTracker::Instance::initialize(NMTUtil::parse_tracking_level(NativeMemoryTracking));\n-      for (off_t i = 0; i < count; i++) {\n-        Entry *e = &records_file_entries[i];\n-        \n-        MemTag mem_tag = mtNone; \/\/NMTUtil::index_to_tag((int)e->mem_tag);\n-        int frameCount;\n-        for (frameCount = 0; frameCount < NMT_TrackingStackDepth; frameCount++) {\n-          if (e->stack[frameCount] == 0) {\n-            break;\n-          }\n-        }\n-        NativeCallStack stack = NativeCallStack::empty_stack();\n-        if (frameCount > 0) {\n-          stack = NativeCallStack(e->stack, frameCount);\n+    \/\/VirtualMemoryTracker::Instance::initialize(NMTUtil::parse_tracking_level(NativeMemoryTracking));\n+    for (off_t i = 0; i < count; i++) {\n+      Entry *e = &records_file_entries[i];\n+\n+      MemTag mem_tag = NMTUtil::index_to_tag((int)e->mem_tag);\n+      int frameCount;\n+      for (frameCount = 0; frameCount < NMT_TrackingStackDepth; frameCount++) {\n+        if (e->stack[frameCount] == 0) {\n+          break;\n@@ -707,0 +700,5 @@\n+      }\n+      NativeCallStack stack = NativeCallStack::empty_stack();\n+      if (frameCount > 0) {\n+        stack = NativeCallStack(e->stack, frameCount);\n+      }\n@@ -708,43 +706,42 @@\n-        jlong start = os::javaTimeNanos();\n-        {\n-          switch (e->type) {\n-            case NMT_VirtualMemoryLogRecorder::Type::RESERVE:\n-              \/\/fprintf(stderr, \"[record_virtual_memory_reserve(%p, %zu, %p, %hhu)\\n\", e->ptr, e->size, &stack, mem_tag);fflush(stderr);\n-              MemTracker::record_virtual_memory_reserve(e->ptr, e->size, stack, mem_tag);\n-              \/\/fprintf(stderr, \"]\\n\");fflush(stderr);\n-              break;\n-            case NMT_VirtualMemoryLogRecorder::Type::RELEASE:\n-              \/\/fprintf(stderr, \"[record_virtual_memory_release(%p, %zu)\\n\", e->ptr, e->size);fflush(stderr);\n-              MemTracker::record_virtual_memory_release(e->ptr, e->size);\n-              \/\/fprintf(stderr, \"]\\n\");fflush(stderr);\n-              break;\n-            case NMT_VirtualMemoryLogRecorder::Type::UNCOMMIT:\n-              \/\/fprintf(stderr, \"<record_virtual_memory_uncommit(%p, %zu)\\n\", e->ptr, e->size);fflush(stderr);\n-              MemTracker::record_virtual_memory_uncommit(e->ptr, e->size);\n-              \/\/fprintf(stderr, \">\\n\");fflush(stderr);\n-              break;\n-            case NMT_VirtualMemoryLogRecorder::Type::RESERVE_AND_COMMIT:\n-              \/\/fprintf(stderr, \"[MemTracker::record_virtual_memory_reserve_and_commit\\n\");\n-              MemTracker::record_virtual_memory_reserve_and_commit(e->ptr, e->size, stack, mem_tag);\n-              \/\/fprintf(stderr, \"]\\n\");fflush(stderr);\n-              break;\n-            case NMT_VirtualMemoryLogRecorder::Type::COMMIT:\n-              \/\/fprintf(stderr, \"[record_virtual_memory_commit(%p, %zu, %p)\\n\", e->ptr, e->size, &stack);fflush(stderr);\n-              MemTracker::record_virtual_memory_commit(e->ptr, e->size, stack);\n-              \/\/fprintf(stderr, \"]\\n\");fflush(stderr);\n-              break;\n-            case NMT_VirtualMemoryLogRecorder::Type::SPLIT_RESERVED:\n-              \/\/fprintf(stderr, \"[MemTracker::record_virtual_memory_split_reserved\\n\");\n-              MemTracker::record_virtual_memory_split_reserved(e->ptr, e->size, e->size_split, mem_tag, NMTUtil::index_to_tag((int)e->mem_tag_split));\n-              \/\/fprintf(stderr, \"]\\n\");fflush(stderr);\n-              break;\n-            case NMT_VirtualMemoryLogRecorder::Type::TAG:\n-              \/\/fprintf(stderr, \"[record_virtual_memory_type(%p, %zu, %p)\\n\", e->ptr, e->size, &stack);fflush(stderr);\n-              MemTracker::record_virtual_memory_tag(e->ptr, mem_tag);\n-              \/\/fprintf(stderr, \"]\\n\");fflush(stderr);\n-              break;\n-            default:\n-              fprintf(stderr, \"HUH?\\n\");\n-              os::exit(-1);\n-              break;\n-          }\n+      jlong start = os::javaTimeNanos();\n+      {\n+        switch (e->type) {\n+          case NMT_VirtualMemoryLogRecorder::Type::RESERVE:\n+            \/\/fprintf(stderr, \"[record_virtual_memory_reserve(%p, %zu, %p, %hhu)\\n\", e->ptr, e->size, &stack, mem_tag);fflush(stderr);\n+            MemTracker::record_virtual_memory_reserve(e->ptr, e->size, stack, mem_tag);\n+            \/\/fprintf(stderr, \"]\\n\");fflush(stderr);\n+            break;\n+          case NMT_VirtualMemoryLogRecorder::Type::RELEASE:\n+            \/\/fprintf(stderr, \"[record_virtual_memory_release(%p, %zu)\\n\", e->ptr, e->size);fflush(stderr);\n+            MemTracker::record_virtual_memory_release(e->ptr, e->size);\n+            \/\/fprintf(stderr, \"]\\n\");fflush(stderr);\n+            break;\n+          case NMT_VirtualMemoryLogRecorder::Type::UNCOMMIT:\n+            \/\/fprintf(stderr, \"<record_virtual_memory_uncommit(%p, %zu)\\n\", e->ptr, e->size);fflush(stderr);\n+            MemTracker::record_virtual_memory_uncommit(e->ptr, e->size);\n+            \/\/fprintf(stderr, \">\\n\");fflush(stderr);\n+            break;\n+          case NMT_VirtualMemoryLogRecorder::Type::RESERVE_AND_COMMIT:\n+            \/\/fprintf(stderr, \"[MemTracker::record_virtual_memory_reserve_and_commit\\n\");\n+            MemTracker::record_virtual_memory_reserve_and_commit(e->ptr, e->size, stack, mem_tag);\n+            \/\/fprintf(stderr, \"]\\n\");fflush(stderr);\n+            break;\n+          case NMT_VirtualMemoryLogRecorder::Type::COMMIT:\n+            \/\/fprintf(stderr, \"[record_virtual_memory_commit(%p, %zu, %p)\\n\", e->ptr, e->size, &stack);fflush(stderr);\n+            MemTracker::record_virtual_memory_commit(e->ptr, e->size, stack);\n+            \/\/fprintf(stderr, \"]\\n\");fflush(stderr);\n+            break;\n+          case NMT_VirtualMemoryLogRecorder::Type::SPLIT_RESERVED:\n+            \/\/fprintf(stderr, \"[MemTracker::record_virtual_memory_split_reserved\\n\");\n+            MemTracker::record_virtual_memory_split_reserved(e->ptr, e->size, e->size_split, mem_tag, NMTUtil::index_to_tag((int)e->mem_tag_split));\n+            \/\/fprintf(stderr, \"]\\n\");fflush(stderr);\n+            break;\n+          case NMT_VirtualMemoryLogRecorder::Type::TAG:\n+            \/\/fprintf(stderr, \"[record_virtual_memory_type(%p, %zu, %p)\\n\", e->ptr, e->size, &stack);fflush(stderr);\n+            MemTracker::record_virtual_memory_tag(e->ptr, mem_tag);\n+            \/\/fprintf(stderr, \"]\\n\");fflush(stderr);\n+            break;\n+          default:\n+            fprintf(stderr, \"HUH?\\n\");\n+            os::exit(-1);\n+            break;\n@@ -752,3 +749,0 @@\n-        jlong end = os::javaTimeNanos();\n-        jlong duration = (start > 0) ? (end - start) : 0;\n-        total += duration;\n@@ -756,0 +750,3 @@\n+      jlong end = os::javaTimeNanos();\n+      jlong duration = (start > 0) ? (end - start) : 0;\n+      total += duration;\n@@ -757,1 +754,1 @@\n-    fprintf(stderr, \"time:%ld[ns] [samples:%ld] [loops:%ld]\\n\", total, count, NMTBenchmarkRecordedLoops);\n+    fprintf(stderr, \"time:%'ld[ns] [samples:%'ld]\\n\", total, count);\n@@ -769,1 +766,0 @@\n-\/\/      fprintf(stderr, \"loops:%d total:%ld\\n\", NMTBenchmarkRecordedLoops, total);\n","filename":"src\/hotspot\/share\/nmt\/memLogRecorder.cpp","additions":65,"deletions":69,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -599,4 +599,0 @@\n-  product(int, NMTBenchmarkRecordedLoops, 1, DIAGNOSTIC,                    \\\n-          \"Benchmark memory allocations specified number of times\")         \\\n-          range(0, max_jint)                                                \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}