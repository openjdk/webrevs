{"files":[{"patch":"@@ -650,2 +650,2 @@\n-  __ push(rax);        \/\/ save return address\n-  __ enter();          \/\/ save old & set new rbp\n+  __ push(rax);         \/\/ save return address\n+  __ enter();           \/\/ save old & set new rbp\n@@ -653,3 +653,9 @@\n-  __ push(NULL_WORD); \/\/ leave last_sp as null\n-  __ movptr(rbcp, Address(rbx, Method::const_offset()));      \/\/ get ConstMethod*\n-  __ lea(rbcp, Address(rbcp, ConstMethod::codes_offset())); \/\/ get codebase\n+\n+  \/\/ Resolve ConstMethod* -> ConstantPool*.\n+  \/\/ Get codebase, while we still have ConstMethod*.\n+  \/\/ Save ConstantPool* in rax for later use.\n+  __ movptr(rax, Address(rbx, Method::const_offset()));\n+  __ lea(rbcp, Address(rax, ConstMethod::codes_offset()));\n+  __ movptr(rax, Address(rax, ConstMethod::constants_offset()));\n+\n+  __ push(NULL_WORD);  \/\/ leave last_sp as null\n@@ -657,2 +663,6 @@\n-  \/\/ Get mirror and store it in the frame as GC root for this Method*\n-  __ load_mirror(rdx, rbx, rscratch2);\n+\n+  \/\/ Get mirror and store it in the frame as GC root for this Method*.\n+  \/\/ rax is still ConstantPool*, resolve ConstantPool* -> InstanceKlass* -> Java mirror.\n+  __ movptr(rdx, Address(rax, ConstantPool::pool_holder_offset()));\n+  __ movptr(rdx, Address(rdx, in_bytes(Klass::java_mirror_offset())));\n+  __ resolve_oop_handle(rdx, rscratch2);\n@@ -660,0 +670,1 @@\n+\n@@ -664,1 +675,1 @@\n-    __ jcc(Assembler::zero, method_data_continue);\n+    __ jccb(Assembler::zero, method_data_continue);\n@@ -669,1 +680,1 @@\n-    __ push(0);\n+    __ push(NULL_WORD);\n@@ -672,4 +683,3 @@\n-  __ movptr(rdx, Address(rbx, Method::const_offset()));\n-  __ movptr(rdx, Address(rdx, ConstMethod::constants_offset()));\n-  __ movptr(rdx, Address(rdx, ConstantPool::cache_offset()));\n-  __ push(rdx); \/\/ set constant pool cache\n+  \/\/ rax is still ConstantPool*, set the constant pool cache\n+  __ movptr(rdx, Address(rax, ConstantPool::cache_offset()));\n+  __ push(rdx);\n@@ -683,1 +693,1 @@\n-    __ push(0); \/\/ no bcp\n+    __ push(NULL_WORD); \/\/ no bcp\n@@ -1421,1 +1431,1 @@\n-    __ jcc(Assembler::lessEqual, exit); \/\/ do nothing if rdx <= 0\n+    __ jccb(Assembler::lessEqual, exit); \/\/ do nothing if rdx <= 0\n@@ -1425,1 +1435,1 @@\n-    __ jcc(Assembler::greater, loop);\n+    __ jccb(Assembler::greater, loop);\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":26,"deletions":16,"binary":false,"changes":42,"status":"modified"}]}