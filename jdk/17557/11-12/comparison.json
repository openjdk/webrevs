{"files":[{"patch":"@@ -79,8 +79,4 @@\n-        if (arguments.length > 0) {\n-            StringBuilder builder = new StringBuilder();\n-            for (int i = 0; i < arguments.length; i++) {\n-                builder.append(\"arg \").append(i).append(\": \").append(arguments[i]).append(\", \");\n-            }\n-            builder.setLength(builder.length() - 2);\n-            return builder.toString();\n-        } else {\n+        if (arguments == null) {\n+            return \"<null>\";\n+        }\n+        if (arguments.length == 0) {\n@@ -89,0 +85,6 @@\n+        StringBuilder builder = new StringBuilder();\n+        for (int i = 0; i < arguments.length; i++) {\n+            builder.append(\"arg \").append(i).append(\": \").append(arguments[i]).append(\", \");\n+        }\n+        builder.setLength(builder.length() - 2);\n+        return builder.toString();\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/DeclaredTest.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -529,0 +529,3 @@\n+        Method mOverloaded = setupMethodMap.get(m.getName());\n+        TestFormat.checkNoThrow(mOverloaded == null,\n+                                \"@Setup method cannot be overloaded: \" + mOverloaded + \" with \" + m);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/TestVM.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -676,0 +676,17 @@\n+\n+    \/\/ ----------- Overloaded Setup Method ----------------------\n+    @NoFail\n+    @Setup\n+    Object[] setupOverloaded() {\n+        return new Object[]{3, 2, 1};\n+    }\n+\n+    @Setup\n+    Object[] setupOverloaded(SetupInfo info) {\n+        return new Object[]{1, 2, 3};\n+    }\n+\n+    @NoFail\n+    @Test\n+    @Arguments(setup = \"setupOverloaded\")\n+    void testOverloaded(int a, int b, int c) {}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestBadFormat.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -78,0 +78,4 @@\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"testSetupNull\"));\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"wrong number of arguments: 0 expected: 1\"));\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"Arguments: <null>\"));\n+\n@@ -81,2 +85,2 @@\n-            Asserts.assertEQ(e.getExceptionInfo().split(\"There was an error while invoking @Test\").length - 1, 3);\n-            Asserts.assertTrue(e.getExceptionInfo().contains(\"Test Failures (7)\"));\n+            Asserts.assertEQ(e.getExceptionInfo().split(\"There was an error while invoking @Test\").length - 1, 4);\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"Test Failures (8)\"));\n@@ -102,1 +106,1 @@\n- \n+\n@@ -107,0 +111,9 @@\n+    @Setup\n+    public Object[] setupEmpty() {\n+        return new Object[]{};\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setupEmpty\")\n+    public void testSetupEmpty() {}\n+\n@@ -221,0 +234,9 @@\n+    \/\/ ----------------- setup returns null ------\n+    @Setup\n+    public Object[] setupNull() {\n+        return null;\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setupNull\")\n+    public void testSetupNull(Object x) {}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestSetupTests.java","additions":25,"deletions":3,"binary":false,"changes":28,"status":"modified"}]}