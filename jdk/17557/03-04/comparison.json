{"files":[{"patch":"@@ -38,1 +38,1 @@\n- * This class provides arguments (and can set fields) for a test method. Different implementations are chosen\n+ * This interface provides arguments (and can set fields) for a test method. Different implementations are chosen\n@@ -41,8 +41,1 @@\n-abstract class ArgumentsProvider {\n-    \/**\n-     * The ArgumentsProvider is default, if there is no @Arguments annotation.\n-     *\/\n-    public boolean isDefault() {\n-        return this instanceof DefaultArgumentsProvider;\n-    }\n-\n+interface ArgumentsProvider {\n@@ -60,6 +53,9 @@\n-    \/**\n-     * For a test method, determine what ArgumentsProvider is to be constructed, given its @Arguments annotation,\n-     * and the available setup methods.\n-     *\/\n-    public static ArgumentsProvider getArgumentsProvider(Method method,\n-                                                         HashMap<String, Method> setupMethodMap) {\n+}\n+\n+\/**\n+ * For a test method, determine what ArgumentsProvider is to be constructed, given its @Arguments annotation,\n+ * and the available setup methods.\n+ *\/\n+class ArgumentsProviderBuilder {\n+   public static ArgumentsProvider build(Method method,\n+                                          HashMap<String, Method> setupMethodMap) {\n@@ -94,1 +90,1 @@\n-final class DefaultArgumentsProvider extends ArgumentsProvider {\n+final class DefaultArgumentsProvider implements ArgumentsProvider {\n@@ -104,1 +100,1 @@\n-final class ValueArgumentsProvider extends ArgumentsProvider {\n+final class ValueArgumentsProvider implements ArgumentsProvider {\n@@ -121,1 +117,1 @@\n-final class SetupArgumentsProvider extends ArgumentsProvider {\n+final class SetupArgumentsProvider implements ArgumentsProvider {\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/ArgumentsProvider.java","additions":14,"deletions":18,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -63,7 +63,0 @@\n-    \/**\n-     * The ArgumentsProvider is default, if there is no @Arguments annotation.\n-     *\/\n-    public boolean hasDefaultArgumentsProvider() {\n-        return argumentsProvider.isDefault();\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/DeclaredTest.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -572,1 +572,1 @@\n-        ArgumentsProvider argumentsProvider = ArgumentsProvider.getArgumentsProvider(m, setupMethodMap);\n+        ArgumentsProvider argumentsProvider = ArgumentsProviderBuilder.build(m, setupMethodMap);\n@@ -762,1 +762,1 @@\n-        TestFormat.check(test.hasDefaultArgumentsProvider(),\n+        TestFormat.check(!setupMethodMap.containsKey(testMethod.getName()),\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/TestVM.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}