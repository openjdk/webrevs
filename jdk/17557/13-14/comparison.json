{"files":[{"patch":"@@ -29,0 +29,1 @@\n+\n@@ -32,0 +33,2 @@\n+import jdk.test.lib.Utils;\n+import java.util.Random;\n@@ -43,1 +46,1 @@\n-    public int iFld;\n+    private static final Random RANDOM = Utils.getRandomInstance();\n@@ -88,0 +91,7 @@\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"setupThrowInSetup\"));\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"BadCheckedTestException: expected setup\"));\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"testThrowInTest\"));\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"BadCheckedTestException: expected test\"));\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"checkThrowInCheck\"));\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"BadCheckedTestException: expected check\"));\n+\n@@ -90,3 +100,5 @@\n-            Asserts.assertEQ(e.getExceptionInfo().split(\"There was an error while invoking setup\").length - 1, 4);\n-            Asserts.assertEQ(e.getExceptionInfo().split(\"There was an error while invoking @Test\").length - 1, 4);\n-            Asserts.assertTrue(e.getExceptionInfo().contains(\"Test Failures (8)\"));\n+            Asserts.assertEQ(e.getExceptionInfo().split(\"There was an error while invoking setup\").length - 1, 5);\n+            Asserts.assertEQ(e.getExceptionInfo().split(\"There was an error while invoking @Test\").length - 1, 5);\n+            Asserts.assertEQ(e.getExceptionInfo().split(\"There was an error while invoking @Check\").length - 1, 1);\n+            Asserts.assertEQ(e.getExceptionInfo().split(\"BadCheckedTestException\").length - 1, 3);\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"Test Failures (11)\"));\n@@ -94,11 +106,0 @@\n-\n-\/\/ TODO make sure asserts from setup get out properly\n-\/\/         \/\/ Negative test with run into TestRunException\n-\/\/         System.setOut(ps);\n-\/\/         try {\n-\/\/             TestFramework.run(TestSetupTestsWithBadRunExceptions.class);\n-\/\/             Asserts.fail(\"Should have thrown exception\");\n-\/\/         } catch (TestRunException e) {\n-\/\/             System.setOut(oldOut);\n-\/\/ \/\/            Asserts.assertTrue(e.getExceptionInfo().contains(\"Failed IR Rules (3)\"));\n-\/\/         }\n@@ -107,3 +108,1 @@\n-    \/\/ ----------- Bad Setup Return Type -------------------------\n-    \/\/ TODO investigate if the values are really right here, e.g. if fields are set\n-    \/\/ TODO try other bad return values\n+    \/\/ ---------- Setup Nothing ---------------\n@@ -126,44 +125,39 @@\n-    \/\/ TODO\n-    \/\/ - SetupInfo\n-    \/\/ - Object only used once\n-    \/\/ - move the examples here, make examples more \"real examples\"\n-\n-\n-\/\/    @Test\n-\/\/    @IR(counts = {IRNode.STORE_I, \"1\"})\n-\/\/    public void testGood1() {\n-\/\/        iFld = 3;\n-\/\/    }\n-\/\/\n-\/\/    @Check(test = \"testGood1\")\n-\/\/    public void checkTestGood1(TestInfo info) {\n-\/\/    }\n-\/\/\n-\/\/    @Test\n-\/\/    @IR(failOn = IRNode.LOAD)\n-\/\/    public int testGood2() {\n-\/\/        iFld = 3;\n-\/\/        return 3;\n-\/\/    }\n-\/\/\n-\/\/    @Check(test = \"testGood2\")\n-\/\/    public void sameName(int retValue) {\n-\/\/        if (retValue != 3) {\n-\/\/            throw new RuntimeException(\"must be 3 but was \" + retValue);\n-\/\/        }\n-\/\/    }\n-\/\/\n-\/\/    @Test\n-\/\/    @Arguments(values = Argument.NUMBER_42)\n-\/\/    @IR(failOn = IRNode.LOAD)\n-\/\/    @IR(counts = {IRNode.STORE_I, \"0\"})\n-\/\/    public int testGood3(int x) {\n-\/\/        return x;\n-\/\/    }\n-\/\/\n-\/\/    @Check(test = \"testGood3\")\n-\/\/    public void sameName(int retValue, TestInfo info) {\n-\/\/        if (retValue != 42) {\n-\/\/            throw new RuntimeException(\"must be 42\");\n-\/\/        }\n-\/\/    }\n+    \/\/ ---------- Setup Arrays ---------------\n+    @Setup\n+    static Object[] setupArrayII(SetupInfo info) {\n+        int[] a = new int[1_000];\n+        int[] b = new int[1_000];\n+        int x = info.invocationCounter();\n+        for (int i = 0; i < a.length; i++) { a[i] = x + i; }\n+        for (int i = 0; i < a.length; i++) { b[i] = x - i; }\n+        return new Object[]{a, b};\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setupArrayII\")\n+    static void testSetupArrayII(int[] a, int[] b) {\n+        for (int i = 0; i < a.length; i++) {\n+            int y = a[i] - b[i];\n+            if (y != 2 * i) {\n+                throw new RuntimeException(\"bad values for i=\" + i + \" a[i]=\" + a[i] + \" b[i]=\" + b[i]);\n+\t    }\n+        }\n+    }\n+\n+    \/\/ ---------- Setup \"linked\" random values ---------------\n+    @Setup\n+    static Object[] setupLinkedII() {\n+        int r = RANDOM.nextInt();\n+        return new Object[]{ r, r + 42};\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setupLinkedII\")\n+    static int testSetupLinkedII(int a, int b) {\n+        return b - a;\n+    }\n+\n+    @Check(test = \"testSetupLinkedII\")\n+    static void checkSetupLinkedII(int res) {\n+        if (res != 42) { throw new RuntimeException(\"wrong result \" + res); }\n+    }\n@@ -189,0 +183,3 @@\n+        iFld1++;\n+        iFld2++;\n+        iFld3++;\n@@ -194,3 +191,3 @@\n-        if (iFld1 != y - 4) { throw new RuntimeException(\"iFld1 wrong value: \" + iFld1 + \" != \" + (y - 4)); }\n-        if (iFld2 != y - 3) { throw new RuntimeException(\"iFld2 wrong value: \" + iFld2 + \" != \" + (y - 3)); }\n-        if (iFld3 != y - 2) { throw new RuntimeException(\"iFld3 wrong value: \" + iFld3 + \" != \" + (y - 2)); }\n+        if (iFld1 != y - 3) { throw new RuntimeException(\"iFld1 wrong value: \" + iFld1 + \" != \" + (y - 3)); }\n+        if (iFld2 != y - 2) { throw new RuntimeException(\"iFld2 wrong value: \" + iFld2 + \" != \" + (y - 2)); }\n+        if (iFld3 != y - 1) { throw new RuntimeException(\"iFld3 wrong value: \" + iFld3 + \" != \" + (y - 1)); }\n@@ -297,1 +294,0 @@\n-}\n@@ -299,42 +295,46 @@\n-\/\/ class TestSetupTestsWithBadRunExceptions {\n-\/\/ \/\/    public int iFld;\n-\/\/ \/\/\n-\/\/ \/\/    @Test\n-\/\/ \/\/    @IR(counts = {IRNode.STORE_I, \"2\"})\n-\/\/ \/\/    public void testBad1() {\n-\/\/ \/\/        iFld = 3;\n-\/\/ \/\/    }\n-\/\/ \/\/\n-\/\/ \/\/    @Check(test = \"testBad1\")\n-\/\/ \/\/    public void checkTestBad1(TestInfo info) {\n-\/\/ \/\/    }\n-\/\/ \/\/\n-\/\/ \/\/    @Test\n-\/\/ \/\/    @IR(failOn = IRNode.STORE_I)\n-\/\/ \/\/    public int testBad2() {\n-\/\/ \/\/        iFld = 3;\n-\/\/ \/\/        return 3;\n-\/\/ \/\/    }\n-\/\/ \/\/\n-\/\/ \/\/    @Check(test = \"testBad2\")\n-\/\/ \/\/    public void sameName(int retValue) {\n-\/\/ \/\/        if (retValue != 3) {\n-\/\/ \/\/            throw new RuntimeException(\"must be 3\");\n-\/\/ \/\/        }\n-\/\/ \/\/    }\n-\/\/ \/\/\n-\/\/ \/\/    @Test\n-\/\/ \/\/    @Arguments(values = Argument.NUMBER_42)\n-\/\/ \/\/    @IR(failOn = IRNode.LOAD)\n-\/\/ \/\/    @IR(counts = {IRNode.STORE_I, \"1\"})\n-\/\/ \/\/    public int testBad4(int x) {\n-\/\/ \/\/        return x;\n-\/\/ \/\/    }\n-\/\/ \/\/\n-\/\/ \/\/    @Check(test = \"testBad4\")\n-\/\/ \/\/    public void sameName(int retValue, TestInfo info) {\n-\/\/ \/\/        if (retValue != 42) {\n-\/\/ \/\/            throw new RuntimeException(\"must be 42\");\n-\/\/ \/\/        }\n-\/\/ \/\/    }\n-\/\/ }\n+    \/\/ ----------------- Throw in Setup -----------\n+    @Setup\n+    public Object[] setupThrowInSetup() {\n+        throw new BadCheckedTestException(\"expected setup\");\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setupThrowInSetup\")\n+    public void testThrowInSetup() {\n+        throw new RuntimeException(\"should have thrown in setup\");\n+    }\n+\n+    \/\/ ----------------- Throw in Test  -----------\n+    @Setup\n+    public Object[] setupThrowInTest(SetupInfo info) {\n+        return new Object[]{ info.invocationCounter() };\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setupThrowInTest\")\n+    public int testThrowInTest(int x) {\n+        throw new BadCheckedTestException(\"expected test\");\n+    }\n+\n+    @Check(test = \"testThrowInTest\")\n+    public void checkThrowInTest(int x) {\n+        throw new RuntimeException(\"should have thrown in test\");\n+    }\n+\n+    \/\/ ----------------- Throw in Check -----------\n+    @Setup\n+    public Object[] setupThrowInCheck(SetupInfo info) {\n+        return new Object[]{ info.invocationCounter() };\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setupThrowInCheck\")\n+    public int testThrowInCheck(int x) {\n+        return x + 1;\n+    }\n+\n+    @Check(test = \"testThrowInCheck\")\n+    public void checkThrowInCheck(int x) {\n+        throw new BadCheckedTestException(\"expected check\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestSetupTests.java","additions":108,"deletions":108,"binary":false,"changes":216,"status":"modified"}]}