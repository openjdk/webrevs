{"files":[{"patch":"@@ -29,0 +29,3 @@\n+import jdk.test.lib.Utils;\n+import java.util.Random;\n+\n@@ -45,1 +48,4 @@\n-    int iFld, iFld2, iFld3;\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    int iFld1, iFld2;\n+\n@@ -50,1 +56,1 @@\n-    \/\/ Test with static setup, test and check method.\n+    \/\/ ----------------- Random but Linked --------------\n@@ -52,8 +58,3 @@\n-    static Object[] setupTwoIntArrays() {\n-        int[] a = new int[10_000];\n-        int[] b = new int[10_000];\n-        for (int i = 0; i < a.length; i++) {\n-            a[i] = i - 2;\n-            b[i] = i + 2;\n-        }\n-        return new Object[]{a, b}; \/\/ passed as arguments to test method\n+    static Object[] setupLinkedII() {\n+        int r = RANDOM.nextInt();\n+        return new Object[]{ r, r + 42};\n@@ -63,7 +64,15 @@\n-    @Arguments(setup = \"setupTwoIntArrays\")\n-    static Object[] testWithSetupRandomIntArray(int[] a, int[] b) {\n-        for (int i = 0; i < a.length; i++) {\n-            int aa = a[i];\n-            int bb = b[i];\n-            a[i] = aa + bb;\n-            b[i] = aa - bb;\n+    @Arguments(setup = \"setupLinkedII\")\n+    static int testSetupLinkedII(int a, int b) {\n+        return b - a;\n+    }\n+\n+    @Check(test = \"testSetupLinkedII\")\n+    static void checkSetupLinkedII(int res) {\n+        if (res != 42) { throw new RuntimeException(\"wrong result \" + res); }\n+    }\n+\n+    \/\/ ----------------- Random Arrays --------------\n+    static int[] generateI(int len) {\n+        int[] a = new int[len];\n+        for (int i = 0; i < len; i++) {\n+            a[i] = RANDOM.nextInt();\n@@ -71,1 +80,1 @@\n-        return new Object[]{a, b}; \/\/ passed as argument to check method\n+        return a;\n@@ -74,4 +83,8 @@\n-    @Check(test = \"testWithSetupRandomIntArray\")\n-    void checkTestWithSetupRandomIntArray(Object[] args) {\n-        int[] a = (int[])args[0]; \/\/ parse return values of test method\n-        int[] b = (int[])args[1];\n+    @Setup\n+    static Object[] setupRandomArrayII() {\n+        \/\/ Random length, so that AutoVectorization pre\/main\/post and drain loops are tested\n+        int len = RANDOM.nextInt(20_000);\n+        int[] a = generateI(len);\n+        int[] b = generateI(len);\n+        return new Object[] { a, b };\n+    }\n@@ -79,2 +92,6 @@\n-        if (a.length != 10_000 || b.length != 10_000) {\n-            throw new RuntimeException(\"bad length\");\n+    @Test\n+    @Arguments(setup = \"setupRandomArrayII\")\n+    static Object[] testAdd(int[] a, int[] b) {\n+        int[] c = new int[a.length];\n+        for (int i = 0; i < a.length; i++) {\n+            c[i] = a[i] + b[i];\n@@ -82,0 +99,2 @@\n+        return new Object[] { a, b, c };\n+    }\n@@ -83,0 +102,5 @@\n+    @Check(test = \"testAdd\")\n+    static void checkAdd(Object[] res) {\n+        int[] a = (int[])res[0];\n+        int[] b = (int[])res[1];\n+        int[] c = (int[])res[2];\n@@ -84,2 +108,2 @@\n-            if ((a[i] != 2 * i) || (b[i] != -4)) {\n-                throw new RuntimeException(\"bad value: \" + i + \": \" + a[i] + \" \" + b[i]);\n+            if (c[i] != a[i] + b[i]) {\n+                throw new RuntimeException(\"wrong values: \" + a[i] + \" \" + b[i] + \" \" + c[i]);\n@@ -90,1 +114,1 @@\n-    \/\/ Test with non-static setup, test and check method.\n+    \/\/ ----------------- Setup Fields ---------------\n@@ -92,5 +116,4 @@\n-    Object[] setupTestSetupArgumentsAndFields(SetupInfo info) {\n-        iFld  = info.invocationCounter();\n-        iFld2 = info.invocationCounter() + 1;\n-        iFld3 = info.invocationCounter() + 2;\n-        return new Object[]{info.invocationCounter()}; \/\/ passed as arguments to test method\n+    void setupFields() {\n+        int r = RANDOM.nextInt();\n+        iFld1 = r;\n+        iFld2 = r + 42;\n@@ -100,6 +123,8 @@\n-    @Arguments(setup = \"setupTestSetupArgumentsAndFields\")\n-    int testSetupArgumentsAndFields(int argVal) {\n-        if ((iFld != argVal) || (iFld2 != argVal + 1) || (iFld3 != argVal + 2)) {\n-            throw new RuntimeException(\"bad values: setup -> test\");\n-        }\n-        return argVal + 2; \/\/ passed as argument to check method\n+    @Arguments(setup = \"setupFields\")\n+    int testSetupFields() {\n+        return iFld2 - iFld1;\n+    }\n+\n+    @Check(test = \"testSetupFields\")\n+    static void checkSetupFields(int res) {\n+        if (res != 42) { throw new RuntimeException(\"wrong result \" + res); }\n@@ -108,4 +133,23 @@\n-    @Check(test = \"testSetupArgumentsAndFields\")\n-    void checkTestSetupArgumentsAndFields(int retVal) {\n-        if ((iFld + 2 != retVal) || (iFld2 + 1 != retVal) || (iFld3 != retVal)) {\n-            throw new RuntimeException(\"bad values: test -> check\");\n+    \/\/ ----------------- Deterministic Values -------\n+    @Setup\n+    Object[] setupDeterministic(SetupInfo info) {\n+        \/\/ This value increments with every invocation of the setup method: 0, 1, 2, ...\n+        int cnt = info.invocationCounter();\n+\n+        \/\/ Return true with low frequency. If we did this randomly, we can get unlucky\n+        \/\/ and never return true. So doing it deterministically can be helpful when we\n+        \/\/ want \"low frequency\" but a guaranteed \"true\" at some point.\n+        return new Object[]{ (long)(cnt % 1_000) };\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setupDeterministic\")\n+    @IR(counts = {IRNode.STORE_OF_FIELD, \"iFld1\", \"1\",\n+                  IRNode.STORE_OF_FIELD, \"iFld2\", \"1\"})\n+    void testLowProbabilityBranchDeterministic(long x) {\n+        if (x == 7) {\n+            \/\/ unlikely branch -> guaranteed taken -> in profile -> not trapped -> in IR\n+            iFld1 = 42;\n+        } else {\n+            \/\/ likely branch\n+            iFld2 = 77;\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/examples\/SetupExample.java","additions":86,"deletions":42,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-\t\/\/ Positive tests in TestSetupTests class\n+        \/\/ Positive tests in TestSetupTests class\n@@ -143,1 +143,1 @@\n-\t    }\n+            }\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestSetupTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}