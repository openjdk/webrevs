{"files":[{"patch":"@@ -37,1 +37,1 @@\n-There are two ways a test can be formulated, depending on how much control is needed over the test invocation.\n+There are two ways a test can be written, depending on how much control is needed over the test invocation.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/README.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n- * method (see {@link Test}), as well as to set field values. A test method can use a setup method, by specifying it in a\n- * {@link Arguments} annotation. A setup method can optionally take a {@link SetupInfo} as an argument. The\n+ * method (see {@link Test}), as well as to set field values. A test method can use a setup method, by specifying\n+ * it in a {@link Arguments} annotation. A setup method can optionally take a {@link SetupInfo} as an argument. The\n@@ -35,1 +35,2 @@\n- * Examples on how to use test methods can be found in {@link ir_framework.examples.SetupExample} and also as part of the internal testing in the package {@link ir_framework.tests}.\n+ * Examples on how to use test methods can be found in {@link ir_framework.examples.SetupExample} and also as part of the\n+ * internal testing in the package {@link ir_framework.tests}.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/Setup.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-                                          HashMap<String, Method> setupMethodMap) {\n+                                         HashMap<String, Method> setupMethodMap) {\n@@ -70,1 +70,1 @@\n-        if (setupMethodName.length() > 0) {\n+        if (!setupMethodName.isEmpty()) {\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/ArgumentsProvider.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}