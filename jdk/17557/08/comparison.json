{"files":[{"patch":"@@ -81,1 +81,1 @@\n-    @Arguments({ Argument.RANDOM_EACH })\n+    @Arguments(values = { Argument.RANDOM_EACH })\n@@ -91,1 +91,1 @@\n-    @Arguments({ Argument.RANDOM_EACH })\n+    @Arguments(values = { Argument.RANDOM_EACH })\n@@ -122,1 +122,1 @@\n-    @Arguments({ Argument.RANDOM_EACH })\n+    @Arguments(values = { Argument.RANDOM_EACH })\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestIterativeEA.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    @Arguments({Argument.MAX}) \/\/ the argument needs to be big enough to fall out of cache.\n+    @Arguments(values = {Argument.MAX}) \/\/ the argument needs to be big enough to fall out of cache.\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestOptimizeUnstableIf.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @Arguments(values = {Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n@@ -54,1 +54,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @Arguments(values = {Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n@@ -65,1 +65,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @Arguments(values = {Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n@@ -76,1 +76,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @Arguments(values = {Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n@@ -87,1 +87,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @Arguments(values = {Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n@@ -98,1 +98,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @Arguments(values = {Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestRemixAddressExpressions.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-    @Arguments(Argument.RANDOM_EACH)\n+    @Arguments(values = Argument.RANDOM_EACH)\n@@ -61,1 +61,1 @@\n-    @Arguments(Argument.RANDOM_EACH)\n+    @Arguments(values = Argument.RANDOM_EACH)\n@@ -78,1 +78,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.BOOLEAN_TOGGLE_FIRST_TRUE})\n+    @Arguments(values = {Argument.RANDOM_EACH, Argument.BOOLEAN_TOGGLE_FIRST_TRUE})\n@@ -99,1 +99,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.BOOLEAN_TOGGLE_FIRST_TRUE})\n+    @Arguments(values = {Argument.RANDOM_EACH, Argument.BOOLEAN_TOGGLE_FIRST_TRUE})\n@@ -210,1 +210,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @Arguments(values = {Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n@@ -224,1 +224,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @Arguments(values = {Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n@@ -277,1 +277,1 @@\n-    @Arguments({Argument.RANDOM_EACH})\n+    @Arguments(values = {Argument.RANDOM_EACH})\n@@ -291,1 +291,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.BOOLEAN_TOGGLE_FIRST_TRUE})\n+    @Arguments(values = {Argument.RANDOM_EACH, Argument.BOOLEAN_TOGGLE_FIRST_TRUE})\n@@ -329,1 +329,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @Arguments(values = {Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestShiftAndMask.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    @Arguments({Argument.RANDOM_ONCE, Argument.RANDOM_ONCE, Argument.RANDOM_ONCE})\n+    @Arguments(values = {Argument.RANDOM_ONCE, Argument.RANDOM_ONCE, Argument.RANDOM_ONCE})\n@@ -54,1 +54,1 @@\n-    @Arguments({Argument.RANDOM_ONCE, Argument.RANDOM_ONCE, Argument.RANDOM_ONCE})\n+    @Arguments(values = {Argument.RANDOM_ONCE, Argument.RANDOM_ONCE, Argument.RANDOM_ONCE})\n@@ -62,1 +62,1 @@\n-    @Arguments({Argument.RANDOM_ONCE, Argument.RANDOM_ONCE, Argument.RANDOM_ONCE})\n+    @Arguments(values = {Argument.RANDOM_ONCE, Argument.RANDOM_ONCE, Argument.RANDOM_ONCE})\n@@ -70,1 +70,1 @@\n-    @Arguments({Argument.RANDOM_ONCE, Argument.RANDOM_ONCE, Argument.RANDOM_ONCE})\n+    @Arguments(values = {Argument.RANDOM_ONCE, Argument.RANDOM_ONCE, Argument.RANDOM_ONCE})\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestSpecialCasesOf_AMinusB_Plus_CMinusD_InAddIdeal.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @Arguments(values = {Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n@@ -59,1 +59,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @Arguments(values = {Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n@@ -71,1 +71,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @Arguments(values = {Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n@@ -83,1 +83,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @Arguments(values = {Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n@@ -95,1 +95,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @Arguments(values = {Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n@@ -107,1 +107,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @Arguments(values = {Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n@@ -119,1 +119,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @Arguments(values = {Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n@@ -131,1 +131,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @Arguments(values = {Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n@@ -143,1 +143,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @Arguments(values = {Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n@@ -155,1 +155,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @Arguments(values = {Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n@@ -183,1 +183,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestTestRemovalPeephole.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -132,1 +132,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -147,1 +147,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -162,1 +162,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -177,1 +177,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -192,1 +192,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -207,1 +207,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -222,1 +222,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -237,1 +237,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -254,1 +254,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -272,1 +272,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -289,1 +289,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -307,1 +307,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -325,1 +325,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -343,1 +343,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -358,1 +358,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -373,1 +373,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -388,1 +388,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -403,1 +403,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -495,1 +495,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -511,1 +511,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -526,1 +526,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -541,1 +541,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -556,1 +556,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -571,1 +571,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -586,1 +586,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -601,1 +601,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -616,1 +616,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -633,1 +633,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -651,1 +651,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -668,1 +668,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -686,1 +686,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -704,1 +704,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -722,1 +722,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -737,1 +737,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -752,1 +752,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -767,1 +767,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n@@ -782,1 +782,1 @@\n-    @Arguments({Argument.TRUE, Argument.FALSE})\n+    @Arguments(values = {Argument.TRUE, Argument.FALSE})\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/igvn\/TestIntegerMulRing.java","additions":38,"deletions":38,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    @Arguments(Argument.RANDOM_EACH)\n+    @Arguments(values = Argument.RANDOM_EACH)\n@@ -66,1 +66,1 @@\n-    @Arguments(Argument.RANDOM_EACH)\n+    @Arguments(values = Argument.RANDOM_EACH)\n@@ -74,1 +74,1 @@\n-    @Arguments(Argument.RANDOM_EACH)\n+    @Arguments(values = Argument.RANDOM_EACH)\n@@ -83,1 +83,1 @@\n-    @Arguments(Argument.RANDOM_EACH)\n+    @Arguments(values = Argument.RANDOM_EACH)\n@@ -92,1 +92,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n+    @Arguments(values = {Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/scalarReplacement\/ScalarReplacementTests.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,2 +30,4 @@\n- * This annotation is used to specify well-defined {@link Argument} values for test methods (specifying {@link Test}) when\n- * used as part of a <b>base test<\/b> or <b>checked test<\/b>.\n+ * This annotation is used for test methods (see {@link Test}) to specify what values should be passed as arguments.\n+ * One can either specify the individual arguments with values (see {@link Argument}), or use\n+ * a setup method (see {@link Setup}) to define more complex arguments and\/or even set fields values.\n+ * This annotation can only be applied to a <b>base test<\/b> or <b>checked test<\/b>.\n@@ -40,1 +42,1 @@\n-     * Get the argument value.\n+     * Get the argument values.\n@@ -42,1 +44,5 @@\n-    Argument[] value();\n+    Argument[] values() default {};\n+    \/**\n+     * Get the setup method name.\n+     *\/\n+    String setup() default \"\";\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/Arguments.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -37,3 +37,1 @@\n-There are three kinds of tests depending on how much control is needed over the test invocation.\n-#### Base Tests\n-The simplest form of testing provides a single `@Test` annotated method which the framework will invoke as part of the testing. The test method has no or well-defined arguments that the framework can automatically provide.\n+There are two ways a test can be written, depending on how much control is needed over the test invocation.\n@@ -41,1 +39,2 @@\n-More information on base tests with a precise definition can be found in the Javadocs of [Test](.\/Test.java). Concrete examples on how to specify a base test can be found in [BaseTestsExample](..\/..\/..\/testlibrary_tests\/ir_framework\/examples\/BaseTestExample.java).\n+#### Normal Test\n+The normal and simplest form of testing provides a single `@Test` annotated method which the framework invokes directly as part of the testing. The test method either has no arguments, or they must be specified with an `@Arguments` annotation.\n@@ -43,2 +42,1 @@\n-#### Checked Tests\n-The base tests do not provide any way of verification by user code. A checked test enables this by allowing the user to define an additional `@Check` annotated method which is invoked directly after the `@Test` annotated method. This allows the user to perform various checks about the test method including return value verification.\n+Arguments can be provided with `@Arguments(values = {...})` by providing well-specified inputs for each individual argument. Alternatively, a setup method can be chosen with `@Arguments(setup = \"setupMethodName\")`, which computes arguments and can also set fields.\n@@ -46,1 +44,11 @@\n-More information on checked tests with a precise definition can be found in the Javadocs of [Check](.\/Check.java). Concrete examples on how to specify a checked test can be found in [CheckedTestsExample](..\/..\/..\/testlibrary_tests\/ir_framework\/examples\/CheckedTestExample.java).\n+More information on normal test methods with a precise definition can be found in the Javadocs of [Test](.\/Test.java). Concrete examples on how to specify a normal test can be found in [BaseTestsExample](..\/..\/..\/testlibrary_tests\/ir_framework\/examples\/BaseTestExample.java).\n+\n+##### Setup Method\n+A `@Setup` annotated method can provide custom arguments and set fields before a normal test is run. A `@Test` annotated method can additionally be annotated with `@Arguments(setup = \"setupMethodName\")` to define the dedicated `@Setup` method.\n+\n+More information on normal tests with `@Setup` methods together with a precise definition can be found in the Javadocs of [Setup](.\/Setup.java). Concrete examples on how to specify a setup method can be found in [SetupExample](..\/..\/..\/testlibrary_tests\/ir_framework\/examples\/SetupExample.java).\n+\n+##### Check Method\n+A `@Check(test = \"checkMethodName\")` annotated method is invoked directly after the `@Test` annotated method `checkMethodName()` is executed. The user can perform various checks, such as test method return value and field value verification.\n+\n+More information on check methods with a precise definition can be found in the Javadocs of [Check](.\/Check.java). Concrete examples on how to specify check methods can be found in [CheckedTestsExample](..\/..\/..\/testlibrary_tests\/ir_framework\/examples\/CheckedTestExample.java).\n@@ -49,1 +57,1 @@\n-Neither the base nor the checked tests provide any control over how a `@Test` annotated method is invoked in terms of customized argument values and\/or conditions for the invocation itself. A custom run test gives full control over the invocation of the `@Test` annotated method to the user. The framework calls a dedicated `@Run` annotated method from which the user can invoke the `@Test` method according to his\/her needs.\n+A custom run test gives full control over the invocation of the `@Test` annotated method to the user which includes argument and field setup as well as result and field value verification. The framework calls a dedicated `@Run` annotated method from which the user can invoke the `@Test` method according to their needs.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/README.md","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.ir_framework;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+\/**\n+ * This annotation is used to identify Setup methods. These can be used to compute arbitrary arguments for a test\n+ * method (see {@link Test}), as well as to set field values. A test method can use a setup method, by specifying\n+ * it in a {@link Arguments} annotation. A setup method can optionally take a {@link SetupInfo} as an argument. The\n+ * arguments for the test methods are returned as a new object array.\n+ *\n+ * Examples on how to use test methods can be found in {@link ir_framework.examples.SetupExample} and also as part of the\n+ * internal testing in the package {@link ir_framework.tests}.\n+ *\n+ * @see Arguments\n+ * @see Setup\n+ * @see SetupInfo\n+ * @see Test\n+ *\/\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface Setup {\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/Setup.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.ir_framework;\n+\n+\/**\n+ * Info optionally passed to {@link Setup} annotated methods.\n+ *\n+ * @see Setup\n+ *\/\n+public record SetupInfo(int invocationCounter) {\n+\n+    \/**\n+     * Get the invocation counter, which increments with every invocation of the setup method. It allows the creation\n+     * of deterministically different inputs to the test method for every invocation.\n+     *\/\n+    @Override\n+    public int invocationCounter() {\n+        return invocationCounter;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/SetupInfo.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -97,1 +97,0 @@\n-        onStart();\n@@ -107,4 +106,0 @@\n-    protected void onStart() {\n-        \/\/ Do nothing by default.\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/AbstractTest.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-     * Return all arguments for the @Arguments annotation.\n+     * From the @Arguments(value = {...}) annotation, determine the list of ArgumentValues for a specific test method m.\n@@ -74,0 +74,1 @@\n+     * @param values The argument values specified in the annotation.\n@@ -77,6 +78,1 @@\n-    public static ArgumentValue[] getArguments(Method m) {\n-        Arguments argumentsAnno = m.getAnnotation(Arguments.class);\n-        if (argumentsAnno == null) {\n-            return null;\n-        }\n-        Argument[] values = argumentsAnno.value();\n+    public static ArgumentValue[] getArgumentValues(Method m, Argument[] values) {\n@@ -253,1 +249,1 @@\n-    public Object getArgument() {\n+    public Object getValue() {\n@@ -325,1 +321,1 @@\n-    public Object getArgument() {\n+    public Object getValue() {\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/ArgumentValue.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.ir_framework.test;\n+\n+import compiler.lib.ir_framework.shared.TestFormat;\n+import compiler.lib.ir_framework.shared.TestRunException;\n+import compiler.lib.ir_framework.Argument;\n+import compiler.lib.ir_framework.Arguments;\n+import compiler.lib.ir_framework.SetupInfo;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Arrays;\n+\n+\/**\n+ * This interface provides arguments (and can set fields) for a test method. Different implementations are chosen\n+ * based on the @Arguments annotation for the @Test method.\n+ *\/\n+interface ArgumentsProvider {\n+    \/**\n+     * Compute arguments (and possibly set fields) for a test method.\n+     *\n+     * @param invocationTarget object on which the test method is called, or null if the test method is static.\n+     * @param invocationCounter is incremented for every set of arguments to be provided for the test method.\n+     *                          It can be used to create deterministic inputs, that vary between different\n+     *                          invocations of the test method.\n+     * @return Returns the arguments to be passed into the test method.\n+     *\/\n+    public abstract Object[] getArguments(Object invocationTarget, int invocationCounter);\n+\n+}\n+\n+\/**\n+ * For a test method, determine what ArgumentsProvider is to be constructed, given its @Arguments annotation,\n+ * and the available setup methods.\n+ *\/\n+class ArgumentsProviderBuilder {\n+   public static ArgumentsProvider build(Method method,\n+                                         HashMap<String, Method> setupMethodMap) {\n+        Arguments argumentsAnnotation = method.getAnnotation(Arguments.class);\n+        if (argumentsAnnotation == null) {\n+            return new DefaultArgumentsProvider();\n+        }\n+\n+        Argument[] values = argumentsAnnotation.values();\n+        String setupMethodName = argumentsAnnotation.setup();\n+\n+        if (!setupMethodName.isEmpty()) {\n+            TestFormat.check(values.length == 0,\n+                             \"@Arguments: Can only specify \\\"setup\\\" or \\\"values\\\" but not both in \" + method);\n+            TestFormat.check(setupMethodMap.containsKey(setupMethodName),\n+                             \"@Arguments setup: did not find \" + setupMethodName +\n+                             \" for \" + method);\n+            Method setupMethod = setupMethodMap.get(setupMethodName);\n+            return new SetupArgumentsProvider(setupMethod);\n+        } else {\n+            TestFormat.check(values.length > 0,\n+                             \"@Arguments: Empty annotation not allowed. Either specify \\\"values\\\" or \\\"setup\\\" in \" + method);\n+            ArgumentValue[] argumentValues = ArgumentValue.getArgumentValues(method, values);\n+            return new ValueArgumentsProvider(argumentValues);\n+        }\n+    }\n+}\n+\n+\/**\n+ * Default: when no @Arguments annotation is provided (including for custom run tests).\n+ *\/\n+final class DefaultArgumentsProvider implements ArgumentsProvider {\n+    @Override\n+    public Object[] getArguments(Object invocationTarget, int invocationCounter) {\n+        return new Object[]{};\n+    }\n+}\n+\n+\/**\n+ * Used for @Arguments(values = {...}) to specify individual arguments directly.\n+ *\/\n+final class ValueArgumentsProvider implements ArgumentsProvider {\n+    ArgumentValue[] argumentValues;\n+\n+    ValueArgumentsProvider(ArgumentValue[] argumentValues) {\n+        this.argumentValues = argumentValues;\n+    }\n+\n+    @Override\n+    public Object[] getArguments(Object invocationTarget, int invocationCounter) {\n+        return Arrays.stream(argumentValues).map(v -> v.getValue()).toArray();\n+    }\n+}\n+\n+\/**\n+ * Used for @Arguments(setup = \"setupMethodName\") to specify a setup method to provide arguments\n+ * and possibly set fields.\n+ *\/\n+final class SetupArgumentsProvider implements ArgumentsProvider {\n+    Method setupMethod;\n+\n+    SetupArgumentsProvider(Method setupMethod) {\n+        this.setupMethod = setupMethod;\n+    }\n+\n+    @Override\n+    public Object[] getArguments(Object invocationTarget, int invocationCounter) {\n+        Object target = Modifier.isStatic(setupMethod.getModifiers()) ? null\n+                                                                      : invocationTarget;\n+        try {\n+            if (setupMethod.getParameterCount() == 1) {\n+                return (Object[]) setupMethod.invoke(target, new SetupInfo(invocationCounter));\n+            } else {\n+                return (Object[]) setupMethod.invoke(target);\n+            }\n+        } catch (Exception e) {\n+            throw new TestRunException(\"There was an error while invoking setup method \" +\n+                                       setupMethod + \" on \" + target + \", \" + e);\n+        }\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/ArgumentsProvider.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"},{"patch":"@@ -41,0 +41,1 @@\n+    private int invocationCounter;\n@@ -50,0 +51,1 @@\n+        this.invocationCounter = 0;\n@@ -62,5 +64,0 @@\n-    @Override\n-    protected void onStart() {\n-        test.printFixedRandomArguments();\n-    }\n-\n@@ -77,0 +74,3 @@\n+    \/**\n+     * Compute arguments (and possibly set fields), and invoke the test method.\n+     *\/\n@@ -78,0 +78,1 @@\n+        Object[] arguments = test.getArguments(invocationTarget, invocationCounter);\n@@ -79,5 +80,1 @@\n-            if (test.hasArguments()) {\n-                return testMethod.invoke(invocationTarget, test.getArguments());\n-            } else {\n-                return testMethod.invoke(invocationTarget);\n-            }\n+            return testMethod.invoke(invocationTarget, arguments);\n@@ -85,2 +82,4 @@\n-            throw new TestRunException(\"There was an error while invoking @Test method \" + testMethod\n-                                       + \". Used arguments: \" + test.getArgumentsString(), e);\n+            throw new TestRunException(\"There was an error while invoking @Test method \" + testMethod +\n+                                       \". Target: \" + invocationTarget +\n+                                       \". Arguments: \" + test.formatArguments(arguments),\n+                                       e);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/BaseTest.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.Arrays;\n@@ -37,1 +36,1 @@\n-    private final ArgumentValue[] arguments;\n+    private final ArgumentsProvider argumentsProvider;\n@@ -42,1 +41,1 @@\n-    public DeclaredTest(Method testMethod, ArgumentValue[] arguments, CompLevel compLevel, int warmupIterations) {\n+    public DeclaredTest(Method testMethod, ArgumentsProvider argumentsProvider, CompLevel compLevel, int warmupIterations) {\n@@ -47,1 +46,1 @@\n-        this.arguments = arguments;\n+        this.argumentsProvider = argumentsProvider;\n@@ -64,6 +63,2 @@\n-    public boolean hasArguments() {\n-        return arguments != null;\n-    }\n-\n-    public Object[] getArguments() {\n-        return Arrays.stream(arguments).map(ArgumentValue::getArgument).toArray();\n+    public Object[] getArguments(Object invocationTarget, int invocationCounter) {\n+        return argumentsProvider.getArguments(invocationTarget, invocationCounter);\n@@ -80,26 +75,5 @@\n-    public void printFixedRandomArguments() {\n-        if (hasArguments()) {\n-            boolean hasRandomArgs = false;\n-            StringBuilder builder = new StringBuilder(\"Fixed random arguments for method \").append(testMethod).append(\": \");\n-            for (int i = 0; i < arguments.length; i++) {\n-                ArgumentValue argument = arguments[i];\n-                if (argument.isFixedRandom()) {\n-                    hasRandomArgs = true;\n-                    Object argumentVal = argument.getArgument();\n-                    builder.append(\"arg \").append(i).append(\": \").append(argumentVal.toString());\n-                    if (argumentVal instanceof Character) {\n-                        builder.append(\" (\").append((int)(Character)argumentVal).append(\")\");\n-                    }\n-                    builder.append(\", \");\n-                }\n-            }\n-            if (hasRandomArgs) {\n-                \/\/ Drop the last comma and space.\n-                builder.setLength(builder.length() - 2);\n-                System.out.println(builder.toString());\n-            }\n-        }\n-    }\n-\n-    public String getArgumentsString() {\n-        if (hasArguments()) {\n+    \/**\n+     * Format an array of arguments to string for error reporting.\n+     *\/\n+    public String formatArguments(Object[] arguments) {\n+        if (arguments.length > 0) {\n@@ -108,1 +82,1 @@\n-                builder.append(\"arg \").append(i).append(\": \").append(arguments[i].getArgument()).append(\", \");\n+                builder.append(\"arg \").append(i).append(\": \").append(arguments[i]).append(\", \");\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/DeclaredTest.java","additions":11,"deletions":37,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -110,0 +110,1 @@\n+    private final HashMap<String, Method> setupMethodMap = new HashMap<>();\n@@ -228,0 +229,2 @@\n+            TestFormat.checkNoThrow(getAnnotation(m, Setup.class) == null,\n+                                    \"Cannot use @Setup annotation in \" + clazzType + \" \" + c + \" at \" + m);\n@@ -259,0 +262,5 @@\n+\n+        \/\/ Collect the @Setup methods so we can reference them\n+        \/\/ from the test methods\n+        collectSetupMethods();\n+\n@@ -498,0 +506,21 @@\n+\n+    \/**\n+     *  Collect all @Setup annotated methods and add them to setupMethodMap, for convenience to reference later from\n+     *  tests with @Arguments(setup = \"setupMethodName\").\n+     *\/\n+    private void collectSetupMethods() {\n+        for (Method m : testClass.getDeclaredMethods()) {\n+            Setup setupAnnotation = getAnnotation(m, Setup.class);\n+            if (setupAnnotation != null) {\n+                addSetupMethod(m);\n+            }\n+        }\n+    }\n+\n+    private void addSetupMethod(Method m) {\n+        TestFormat.check(getAnnotation(m, Test.class) == null,\n+                         \"@Setup method cannot have @Test annotation: \" + m);\n+        m.setAccessible(true);\n+        setupMethodMap.put(m.getName(), m);\n+    }\n+\n@@ -543,1 +572,2 @@\n-        DeclaredTest test = new DeclaredTest(m, ArgumentValue.getArguments(m), compLevel, warmupIterations);\n+        ArgumentsProvider argumentsProvider = ArgumentsProviderBuilder.build(m, setupMethodMap);\n+        DeclaredTest test = new DeclaredTest(m, argumentsProvider, compLevel, warmupIterations);\n@@ -732,1 +762,1 @@\n-        TestFormat.check(!test.hasArguments(),\n+        TestFormat.check(!setupMethodMap.containsKey(testMethod.getName()),\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/TestVM.java","additions":32,"deletions":2,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-    @Arguments({Argument.DEFAULT, Argument.MAX})\n+    @Arguments(values = {Argument.DEFAULT, Argument.MAX})\n@@ -84,1 +84,1 @@\n-    @Arguments({Argument.DEFAULT, Argument.MAX})\n+    @Arguments(values = {Argument.DEFAULT, Argument.MAX})\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/examples\/BaseTestExample.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-    @Arguments(Argument.DEFAULT) \/\/ As with normal tests, you need to tell the framework what the argument is.\n+    @Arguments(values = Argument.DEFAULT) \/\/ As with normal tests, you need to tell the framework what the argument is.\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/examples\/CheckedTestExample.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package ir_framework.examples;\n+\n+import compiler.lib.ir_framework.*;\n+import compiler.lib.ir_framework.SetupInfo;\n+\n+\/*\n+ * @test\n+ * @summary Example test to use setup method (provide arguments and set fields).\n+ * @library \/test\/lib \/\n+ * @run driver ir_framework.examples.SetupExample\n+ *\/\n+\n+\/**\n+ * This file shows some examples of how to use a setup method, annotated with {@link Setup}, and referenced by\n+ * a test method with @Arguments(setup = \"setupMethodName\").\n+ *\n+ * @see Setup\n+ * @see Arguments\n+ * @see Test\n+ *\/\n+public class SetupExample {\n+    int iFld, iFld2, iFld3;\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    \/\/ Test with static setup, test and check method.\n+    @Setup\n+    static Object[] setupTwoIntArrays() {\n+        int[] a = new int[10_000];\n+        int[] b = new int[10_000];\n+        for (int i = 0; i < a.length; i++) {\n+            a[i] = i - 2;\n+            b[i] = i + 2;\n+        }\n+        return new Object[]{a, b}; \/\/ passed as arguments to test method\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setupTwoIntArrays\")\n+    static Object[] testWithSetupRandomIntArray(int[] a, int[] b) {\n+        for (int i = 0; i < a.length; i++) {\n+            int aa = a[i];\n+            int bb = b[i];\n+            a[i] = aa + bb;\n+            b[i] = aa - bb;\n+        }\n+        return new Object[]{a, b}; \/\/ passed as argument to check method\n+    }\n+\n+    @Check(test = \"testWithSetupRandomIntArray\")\n+    void checkTestWithSetupRandomIntArray(Object[] args) {\n+        int[] a = (int[])args[0]; \/\/ parse return values of test method\n+        int[] b = (int[])args[1];\n+\n+        if (a.length != 10_000 || b.length != 10_000) {\n+            throw new RuntimeException(\"bad length\");\n+        }\n+\n+        for (int i = 0; i < a.length; i++) {\n+            if ((a[i] != 2 * i) || (b[i] != -4)) {\n+                throw new RuntimeException(\"bad value: \" + i + \": \" + a[i] + \" \" + b[i]);\n+            }\n+        }\n+    }\n+\n+    \/\/ Test with non-static setup, test and check method.\n+    @Setup\n+    Object[] setupTestSetupArgumentsAndFields(SetupInfo info) {\n+        iFld  = info.invocationCounter();\n+        iFld2 = info.invocationCounter() + 1;\n+        iFld3 = info.invocationCounter() + 2;\n+        return new Object[]{info.invocationCounter()}; \/\/ passed as arguments to test method\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setupTestSetupArgumentsAndFields\")\n+    int testSetupArgumentsAndFields(int argVal) {\n+        if ((iFld != argVal) || (iFld2 != argVal + 1) || (iFld3 != argVal + 2)) {\n+            throw new RuntimeException(\"bad values: setup -> test\");\n+        }\n+        return argVal + 2; \/\/ passed as argument to check method\n+    }\n+\n+    @Check(test = \"testSetupArgumentsAndFields\")\n+    void checkTestSetupArgumentsAndFields(int retVal) {\n+        if ((iFld + 2 != retVal) || (iFld2 + 1 != retVal) || (iFld3 != retVal)) {\n+            throw new RuntimeException(\"bad values: test -> check\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/examples\/SetupExample.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"},{"patch":"@@ -48,1 +48,1 @@\n-    @Arguments(Argument.DEFAULT)\n+    @Arguments(values = Argument.DEFAULT)\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestAccessModifiers.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -208,1 +208,1 @@\n-    @Arguments(Argument.DEFAULT)\n+    @Arguments(values = Argument.DEFAULT)\n@@ -212,1 +212,1 @@\n-    @Arguments(Argument.DEFAULT)\n+    @Arguments(values = Argument.DEFAULT)\n@@ -216,1 +216,1 @@\n-    @Arguments(Argument.NUMBER_42)\n+    @Arguments(values = Argument.NUMBER_42)\n@@ -220,1 +220,1 @@\n-    @Arguments(Argument.NUMBER_MINUS_42)\n+    @Arguments(values = Argument.NUMBER_MINUS_42)\n@@ -224,1 +224,1 @@\n-    @Arguments(Argument.TRUE)\n+    @Arguments(values = Argument.TRUE)\n@@ -228,1 +228,1 @@\n-    @Arguments(Argument.FALSE)\n+    @Arguments(values = Argument.FALSE)\n@@ -232,1 +232,1 @@\n-    @Arguments(Argument.BOOLEAN_TOGGLE_FIRST_TRUE)\n+    @Arguments(values = Argument.BOOLEAN_TOGGLE_FIRST_TRUE)\n@@ -236,1 +236,1 @@\n-    @Arguments(Argument.BOOLEAN_TOGGLE_FIRST_FALSE)\n+    @Arguments(values = Argument.BOOLEAN_TOGGLE_FIRST_FALSE)\n@@ -240,1 +240,1 @@\n-    @Arguments({Argument.BOOLEAN_TOGGLE_FIRST_FALSE, Argument.TRUE})\n+    @Arguments(values = {Argument.BOOLEAN_TOGGLE_FIRST_FALSE, Argument.TRUE})\n@@ -245,1 +245,1 @@\n-    @Arguments({Argument.BOOLEAN_TOGGLE_FIRST_FALSE, Argument.NUMBER_42})\n+    @Arguments(values = {Argument.BOOLEAN_TOGGLE_FIRST_FALSE, Argument.NUMBER_42})\n@@ -250,1 +250,1 @@\n-    @Arguments({Argument.MIN, Argument.MAX})\n+    @Arguments(values = {Argument.MIN, Argument.MAX})\n@@ -254,1 +254,1 @@\n-    @Arguments(Argument.DEFAULT)\n+    @Arguments(values = Argument.DEFAULT)\n@@ -258,1 +258,1 @@\n-    @Arguments(Argument.TRUE)\n+    @Arguments(values = Argument.TRUE)\n@@ -268,1 +268,1 @@\n-    @Arguments(Argument.TRUE)\n+    @Arguments(values = Argument.TRUE)\n@@ -285,1 +285,1 @@\n-    @Arguments(Argument.DEFAULT)\n+    @Arguments(values = Argument.DEFAULT)\n@@ -289,1 +289,1 @@\n-    @Arguments(Argument.DEFAULT)\n+    @Arguments(values = Argument.DEFAULT)\n@@ -491,1 +491,1 @@\n-    @Arguments(Argument.DEFAULT)\n+    @Arguments(values = Argument.DEFAULT)\n@@ -498,1 +498,1 @@\n-    @Arguments(Argument.DEFAULT)\n+    @Arguments(values = Argument.DEFAULT)\n@@ -505,1 +505,1 @@\n-    @Arguments(Argument.DEFAULT)\n+    @Arguments(values = Argument.DEFAULT)\n@@ -534,1 +534,1 @@\n-    @Arguments(Argument.DEFAULT)\n+    @Arguments(values = Argument.DEFAULT)\n@@ -581,1 +581,1 @@\n-    @Arguments(Argument.DEFAULT)\n+    @Arguments(values = Argument.DEFAULT)\n@@ -705,1 +705,1 @@\n-    @Arguments(Argument.DEFAULT)\n+    @Arguments(values = Argument.DEFAULT)\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestBadFormat.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-    @Arguments(Argument.DEFAULT)\n+    @Arguments(values = Argument.DEFAULT)\n@@ -145,1 +145,1 @@\n-    @Arguments(Argument.DEFAULT)\n+    @Arguments(values = Argument.DEFAULT)\n@@ -154,1 +154,1 @@\n-    @Arguments(Argument.DEFAULT)\n+    @Arguments(values = Argument.DEFAULT)\n@@ -163,1 +163,1 @@\n-    @Arguments(Argument.DEFAULT)\n+    @Arguments(values = Argument.DEFAULT)\n@@ -172,1 +172,1 @@\n-    @Arguments(Argument.DEFAULT)\n+    @Arguments(values = Argument.DEFAULT)\n@@ -181,1 +181,1 @@\n-    @Arguments(Argument.DEFAULT)\n+    @Arguments(values = Argument.DEFAULT)\n@@ -190,1 +190,1 @@\n-    @Arguments(Argument.DEFAULT)\n+    @Arguments(values = Argument.DEFAULT)\n@@ -199,1 +199,1 @@\n-    @Arguments(Argument.DEFAULT)\n+    @Arguments(values = Argument.DEFAULT)\n@@ -208,1 +208,1 @@\n-    @Arguments(Argument.DEFAULT)\n+    @Arguments(values = Argument.DEFAULT)\n@@ -217,1 +217,1 @@\n-    @Arguments(Argument.DEFAULT)\n+    @Arguments(values = Argument.DEFAULT)\n@@ -226,1 +226,1 @@\n-    @Arguments(Argument.NUMBER_42)\n+    @Arguments(values = Argument.NUMBER_42)\n@@ -235,1 +235,1 @@\n-    @Arguments(Argument.NUMBER_42)\n+    @Arguments(values = Argument.NUMBER_42)\n@@ -244,1 +244,1 @@\n-    @Arguments(Argument.NUMBER_42)\n+    @Arguments(values = Argument.NUMBER_42)\n@@ -253,1 +253,1 @@\n-    @Arguments(Argument.NUMBER_42)\n+    @Arguments(values = Argument.NUMBER_42)\n@@ -262,1 +262,1 @@\n-    @Arguments(Argument.NUMBER_42)\n+    @Arguments(values = Argument.NUMBER_42)\n@@ -271,1 +271,1 @@\n-    @Arguments(Argument.NUMBER_42)\n+    @Arguments(values = Argument.NUMBER_42)\n@@ -280,1 +280,1 @@\n-    @Arguments(Argument.FALSE)\n+    @Arguments(values = Argument.FALSE)\n@@ -289,1 +289,1 @@\n-    @Arguments(Argument.TRUE)\n+    @Arguments(values = Argument.TRUE)\n@@ -298,1 +298,1 @@\n-    @Arguments(Argument.RANDOM_ONCE)\n+    @Arguments(values = Argument.RANDOM_ONCE)\n@@ -304,1 +304,1 @@\n-    @Arguments(Argument.RANDOM_ONCE)\n+    @Arguments(values = Argument.RANDOM_ONCE)\n@@ -310,1 +310,1 @@\n-    @Arguments(Argument.RANDOM_ONCE)\n+    @Arguments(values = Argument.RANDOM_ONCE)\n@@ -316,1 +316,1 @@\n-    @Arguments(Argument.RANDOM_ONCE)\n+    @Arguments(values = Argument.RANDOM_ONCE)\n@@ -322,1 +322,1 @@\n-    @Arguments(Argument.RANDOM_ONCE)\n+    @Arguments(values = Argument.RANDOM_ONCE)\n@@ -328,1 +328,1 @@\n-    @Arguments(Argument.RANDOM_ONCE)\n+    @Arguments(values = Argument.RANDOM_ONCE)\n@@ -339,1 +339,1 @@\n-    @Arguments(Argument.RANDOM_ONCE)\n+    @Arguments(values = Argument.RANDOM_ONCE)\n@@ -345,1 +345,1 @@\n-    @Arguments(Argument.BOOLEAN_TOGGLE_FIRST_FALSE)\n+    @Arguments(values = Argument.BOOLEAN_TOGGLE_FIRST_FALSE)\n@@ -360,1 +360,1 @@\n-    @Arguments(Argument.RANDOM_EACH)\n+    @Arguments(values = Argument.RANDOM_EACH)\n@@ -367,1 +367,1 @@\n-    @Arguments(Argument.RANDOM_EACH)\n+    @Arguments(values = Argument.RANDOM_EACH)\n@@ -374,1 +374,1 @@\n-    @Arguments(Argument.RANDOM_EACH)\n+    @Arguments(values = Argument.RANDOM_EACH)\n@@ -381,1 +381,1 @@\n-    @Arguments(Argument.RANDOM_EACH)\n+    @Arguments(values = Argument.RANDOM_EACH)\n@@ -388,1 +388,1 @@\n-    @Arguments(Argument.RANDOM_EACH)\n+    @Arguments(values = Argument.RANDOM_EACH)\n@@ -395,1 +395,1 @@\n-    @Arguments(Argument.RANDOM_EACH)\n+    @Arguments(values = Argument.RANDOM_EACH)\n@@ -402,1 +402,1 @@\n-    @Arguments(Argument.RANDOM_EACH)\n+    @Arguments(values = Argument.RANDOM_EACH)\n@@ -409,1 +409,1 @@\n-    @Arguments(Argument.RANDOM_EACH)\n+    @Arguments(values = Argument.RANDOM_EACH)\n@@ -462,1 +462,1 @@\n-    @Arguments(Argument.NUMBER_MINUS_42)\n+    @Arguments(values = Argument.NUMBER_MINUS_42)\n@@ -471,1 +471,1 @@\n-    @Arguments(Argument.NUMBER_MINUS_42)\n+    @Arguments(values = Argument.NUMBER_MINUS_42)\n@@ -480,1 +480,1 @@\n-    @Arguments(Argument.NUMBER_MINUS_42)\n+    @Arguments(values = Argument.NUMBER_MINUS_42)\n@@ -489,1 +489,1 @@\n-    @Arguments(Argument.NUMBER_MINUS_42)\n+    @Arguments(values = Argument.NUMBER_MINUS_42)\n@@ -498,1 +498,1 @@\n-    @Arguments(Argument.NUMBER_MINUS_42)\n+    @Arguments(values = Argument.NUMBER_MINUS_42)\n@@ -507,1 +507,1 @@\n-    @Arguments(Argument.NUMBER_MINUS_42)\n+    @Arguments(values = Argument.NUMBER_MINUS_42)\n@@ -516,1 +516,1 @@\n-    @Arguments(Argument.MIN)\n+    @Arguments(values = Argument.MIN)\n@@ -525,1 +525,1 @@\n-    @Arguments(Argument.MIN)\n+    @Arguments(values = Argument.MIN)\n@@ -534,1 +534,1 @@\n-    @Arguments(Argument.MIN)\n+    @Arguments(values = Argument.MIN)\n@@ -543,1 +543,1 @@\n-    @Arguments(Argument.MIN)\n+    @Arguments(values = Argument.MIN)\n@@ -552,1 +552,1 @@\n-    @Arguments(Argument.MIN)\n+    @Arguments(values = Argument.MIN)\n@@ -561,1 +561,1 @@\n-    @Arguments(Argument.MIN)\n+    @Arguments(values = Argument.MIN)\n@@ -570,1 +570,1 @@\n-    @Arguments(Argument.MIN)\n+    @Arguments(values = Argument.MIN)\n@@ -579,1 +579,1 @@\n-    @Arguments(Argument.MAX)\n+    @Arguments(values = Argument.MAX)\n@@ -588,1 +588,1 @@\n-    @Arguments(Argument.MAX)\n+    @Arguments(values = Argument.MAX)\n@@ -597,1 +597,1 @@\n-    @Arguments(Argument.MAX)\n+    @Arguments(values = Argument.MAX)\n@@ -606,1 +606,1 @@\n-    @Arguments(Argument.MAX)\n+    @Arguments(values = Argument.MAX)\n@@ -615,1 +615,1 @@\n-    @Arguments(Argument.MAX)\n+    @Arguments(values = Argument.MAX)\n@@ -624,1 +624,1 @@\n-    @Arguments(Argument.MAX)\n+    @Arguments(values = Argument.MAX)\n@@ -633,1 +633,1 @@\n-    @Arguments(Argument.MAX)\n+    @Arguments(values = Argument.MAX)\n@@ -642,1 +642,1 @@\n-    @Arguments({Argument.DEFAULT, Argument.DEFAULT})\n+    @Arguments(values = {Argument.DEFAULT, Argument.DEFAULT})\n@@ -651,1 +651,1 @@\n-    @Arguments({Argument.DEFAULT, Argument.DEFAULT})\n+    @Arguments(values = {Argument.DEFAULT, Argument.DEFAULT})\n@@ -660,1 +660,1 @@\n-    @Arguments({Argument.DEFAULT, Argument.DEFAULT})\n+    @Arguments(values = {Argument.DEFAULT, Argument.DEFAULT})\n@@ -669,1 +669,1 @@\n-    @Arguments({Argument.DEFAULT, Argument.DEFAULT})\n+    @Arguments(values = {Argument.DEFAULT, Argument.DEFAULT})\n@@ -678,1 +678,1 @@\n-    @Arguments({Argument.DEFAULT, Argument.DEFAULT})\n+    @Arguments(values = {Argument.DEFAULT, Argument.DEFAULT})\n@@ -687,1 +687,1 @@\n-    @Arguments({Argument.DEFAULT, Argument.DEFAULT})\n+    @Arguments(values = {Argument.DEFAULT, Argument.DEFAULT})\n@@ -696,1 +696,1 @@\n-    @Arguments({Argument.RANDOM_ONCE, Argument.RANDOM_ONCE})\n+    @Arguments(values = {Argument.RANDOM_ONCE, Argument.RANDOM_ONCE})\n@@ -702,1 +702,1 @@\n-    @Arguments({Argument.RANDOM_ONCE, Argument.RANDOM_ONCE,\n+    @Arguments(values = {Argument.RANDOM_ONCE, Argument.RANDOM_ONCE,\n@@ -714,1 +714,1 @@\n-    @Arguments({Argument.RANDOM_ONCE, Argument.RANDOM_ONCE,\n+    @Arguments(values = {Argument.RANDOM_ONCE, Argument.RANDOM_ONCE,\n@@ -723,1 +723,1 @@\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH,\n+    @Arguments(values = {Argument.RANDOM_EACH, Argument.RANDOM_EACH,\n@@ -732,1 +732,1 @@\n-    @Arguments({Argument.RANDOM_ONCE, Argument.RANDOM_ONCE,\n+    @Arguments(values = {Argument.RANDOM_ONCE, Argument.RANDOM_ONCE,\n@@ -741,1 +741,1 @@\n-    @Arguments({Argument.NUMBER_42, Argument.NUMBER_42,\n+    @Arguments(values = {Argument.NUMBER_42, Argument.NUMBER_42,\n@@ -752,1 +752,1 @@\n-    @Arguments({Argument.NUMBER_MINUS_42, Argument.NUMBER_MINUS_42,\n+    @Arguments(values = {Argument.NUMBER_MINUS_42, Argument.NUMBER_MINUS_42,\n@@ -763,1 +763,1 @@\n-    @Arguments({Argument.NUMBER_MINUS_42, Argument.NUMBER_42,\n+    @Arguments(values = {Argument.NUMBER_MINUS_42, Argument.NUMBER_42,\n@@ -775,1 +775,1 @@\n-    @Arguments(Argument.BOOLEAN_TOGGLE_FIRST_TRUE)\n+    @Arguments(values = Argument.BOOLEAN_TOGGLE_FIRST_TRUE)\n@@ -790,1 +790,1 @@\n-    @Arguments({Argument.BOOLEAN_TOGGLE_FIRST_FALSE, Argument.BOOLEAN_TOGGLE_FIRST_TRUE})\n+    @Arguments(values = {Argument.BOOLEAN_TOGGLE_FIRST_FALSE, Argument.BOOLEAN_TOGGLE_FIRST_TRUE})\n@@ -807,1 +807,1 @@\n-    @Arguments({Argument.BOOLEAN_TOGGLE_FIRST_FALSE, Argument.FALSE,\n+    @Arguments(values = {Argument.BOOLEAN_TOGGLE_FIRST_FALSE, Argument.FALSE,\n@@ -856,1 +856,1 @@\n-    @Arguments(Argument.NUMBER_42)\n+    @Arguments(values = Argument.NUMBER_42)\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestBasics.java","additions":72,"deletions":72,"binary":false,"changes":144,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-    @Arguments(Argument.NUMBER_42)\n+    @Arguments(values = Argument.NUMBER_42)\n@@ -142,1 +142,1 @@\n-    @Arguments(Argument.NUMBER_42)\n+    @Arguments(values = Argument.NUMBER_42)\n@@ -156,1 +156,1 @@\n-    @Arguments(Argument.NUMBER_42)\n+    @Arguments(values = Argument.NUMBER_42)\n@@ -171,1 +171,1 @@\n-    @Arguments(Argument.NUMBER_42)\n+    @Arguments(values = Argument.NUMBER_42)\n@@ -213,1 +213,1 @@\n-    @Arguments(Argument.NUMBER_42)\n+    @Arguments(values = Argument.NUMBER_42)\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestCheckedTests.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -416,1 +416,1 @@\n-    @Arguments(Argument.DEFAULT)\n+    @Arguments(values = Argument.DEFAULT)\n@@ -1113,1 +1113,1 @@\n-    @Arguments(Argument.TRUE)\n+    @Arguments(values = Argument.TRUE)\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestIRMatching.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}