{"files":[{"patch":"@@ -521,2 +521,8 @@\n-        TestFormat.check(getAnnotation(m, Test.class) == null,\n-                         \"@Setup method cannot have @Test annotation: \" + m);\n+        TestFormat.checkNoThrow(getAnnotation(m, Test.class) == null,\n+                                \"@Setup method cannot have @Test annotation: \" + m);\n+        TestFormat.checkNoThrow(getAnnotation(m, Check.class) == null,\n+                                \"@Setup method cannot have @Check annotation: \" + m);\n+        TestFormat.checkNoThrow(getAnnotation(m, Arguments.class) == null,\n+                                \"@Setup method cannot have @Arguments annotation: \" + m);\n+        TestFormat.checkNoThrow(getAnnotation(m, Run.class) == null,\n+                                \"@Setup method cannot have @Run annotation: \" + m);\n@@ -762,1 +768,2 @@\n-        TestFormat.check(!setupMethodMap.containsKey(testMethod.getName()),\n+        Arguments argumentsAnno = getAnnotation(testMethod, Arguments.class);\n+        TestFormat.check(argumentsAnno == null,\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/TestVM.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+        expectTestFormatException(BadSetupTest.class);\n@@ -626,0 +627,51 @@\n+class BadSetupTest {\n+    \/\/ ----------- Bad Combinations of Annotations -----------------\n+    @Setup\n+    @Test\n+    public Object[] badSetupTestAnnotation() {\n+      return new Object[]{1, 2, 3};\n+    }\n+\n+    @NoFail\n+    @Test\n+    public void testForBadSetupCheckAnnotation() {}\n+\n+    @Setup\n+    @Check(test = \"testForBadSetupCheckAnnotation\")\n+    public void badSetupCheckAnnotation() {}\n+\n+    @Setup\n+    @Arguments(values = {Argument.NUMBER_42, Argument.NUMBER_42})\n+    public void badSetupArgumentsAnnotation(int a, int b) {}\n+\n+    @NoFail\n+    @Test\n+    public void testForBadSetupRunAnnotation() {}\n+\n+    @Setup\n+    @Run(test = \"testForBadSetupRunAnnotation\")\n+    public void badSetupRunAnnotation() {}\n+\n+    \/\/ ----------- Ok: Setup Without Test Method -----------------\n+    @NoFail\n+    @Setup\n+    public void setupWithNoTest() {}\n+\n+    \/\/ ----------- Bad: Test where Setup Method does not exist ---\n+    @Test\n+    @Arguments(setup = \"nonExistingMethod\")\n+    public void testWithNonExistingMethod() {}\n+\n+    \/\/ ----------- Bad Arguments Annotation ----------------------\n+    @NoFail\n+    @Setup\n+    public Object[] setupForTestSetupAndValues() {\n+        return new Object[]{1, 2};\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setupForTestSetupAndValues\",\n+               values = {Argument.NUMBER_42, Argument.NUMBER_42})\n+    public void testSetupAndValues(int a, int b) {}\n+}\n+\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestBadFormat.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -0,0 +1,194 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package ir_framework.tests;\n+\n+import compiler.lib.ir_framework.*;\n+import compiler.lib.ir_framework.driver.TestVMException;\n+import compiler.lib.ir_framework.shared.TestRunException;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @bug 8324641\n+ * @requires vm.debug == true & vm.compMode != \"Xint\" & vm.compiler2.enabled & vm.flagless\n+ * @summary Test different custom run tests.\n+ * @library \/test\/lib \/testlibrary_tests \/\n+ * @run driver ir_framework.tests.TestSetupTests\n+ *\/\n+\n+public class TestSetupTests {\n+    public int iFld;\n+\n+    public static void main(String[] args) {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        PrintStream ps = new PrintStream(baos);\n+        PrintStream oldOut = System.out;\n+        System.setOut(ps);\n+\n+\t\/\/ Positive tests in TestSetupTests class\n+        TestFramework.run();\n+\n+        \/\/ Positive tests with expected exceptions\n+        try {\n+            TestFramework.run(TestSetupTestsWithExpectedExceptions.class);\n+            Asserts.fail(\"Should have thrown exception\");\n+        } catch (TestVMException e) {\n+            System.setOut(oldOut);\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"Test Failures (2)\"));\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"testTooManyArgs\"));\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"testTooFewArgs\"));\n+            Asserts.assertTrue(e.getExceptionInfo().split(\"There was an error while invoking @Test\").length == 3);\n+        }\n+\n+\/\/         \/\/ Negative test with run into TestRunException\n+\/\/         System.setOut(ps);\n+\/\/         try {\n+\/\/             TestFramework.run(TestSetupTestsWithBadRunExceptions.class);\n+\/\/             Asserts.fail(\"Should have thrown exception\");\n+\/\/         } catch (TestRunException e) {\n+\/\/             System.setOut(oldOut);\n+\/\/ \/\/            Asserts.assertTrue(e.getExceptionInfo().contains(\"Failed IR Rules (3)\"));\n+\/\/         }\n+    }\n+\n+    \/\/ ----------- Bad Setup Return Type -------------------------\n+    \/\/ TODO investigate if the values are really right here, e.g. if fields are set\n+    \/\/ TODO try other bad return values\n+    @Setup\n+    public void setupTestGood1() {}\n+ \n+    @Test\n+    @Arguments(setup = \"setupTestGood1\")\n+    public void testGood1() {}\n+\n+\/\/    @Test\n+\/\/    @IR(counts = {IRNode.STORE_I, \"1\"})\n+\/\/    public void testGood1() {\n+\/\/        iFld = 3;\n+\/\/    }\n+\/\/\n+\/\/    @Check(test = \"testGood1\")\n+\/\/    public void checkTestGood1(TestInfo info) {\n+\/\/    }\n+\/\/\n+\/\/    @Test\n+\/\/    @IR(failOn = IRNode.LOAD)\n+\/\/    public int testGood2() {\n+\/\/        iFld = 3;\n+\/\/        return 3;\n+\/\/    }\n+\/\/\n+\/\/    @Check(test = \"testGood2\")\n+\/\/    public void sameName(int retValue) {\n+\/\/        if (retValue != 3) {\n+\/\/            throw new RuntimeException(\"must be 3 but was \" + retValue);\n+\/\/        }\n+\/\/    }\n+\/\/\n+\/\/    @Test\n+\/\/    @Arguments(values = Argument.NUMBER_42)\n+\/\/    @IR(failOn = IRNode.LOAD)\n+\/\/    @IR(counts = {IRNode.STORE_I, \"0\"})\n+\/\/    public int testGood3(int x) {\n+\/\/        return x;\n+\/\/    }\n+\/\/\n+\/\/    @Check(test = \"testGood3\")\n+\/\/    public void sameName(int retValue, TestInfo info) {\n+\/\/        if (retValue != 42) {\n+\/\/            throw new RuntimeException(\"must be 42\");\n+\/\/        }\n+\/\/    }\n+}\n+\n+class TestSetupTestsWithExpectedExceptions {\n+    @Setup\n+    public Object[] setupTooManyArgs() {\n+      return new Object[]{1, 2, 3};\n+    }\n+    \n+    @Test\n+    @Arguments(setup = \"setupTooManyArgs\")\n+    public void testTooManyArgs(int a) {}\n+\n+    @Setup\n+    public Object[] setupTooFewArgs() {\n+      return new Object[]{1, 2};\n+    }\n+    \n+    @Test\n+    @Arguments(setup = \"setupTooFewArgs\")\n+    public void testTooFewArgs(int a, int b, int c) {}\n+}\n+\n+\/\/ class TestSetupTestsWithBadRunExceptions {\n+\/\/ \/\/    public int iFld;\n+\/\/ \/\/\n+\/\/ \/\/    @Test\n+\/\/ \/\/    @IR(counts = {IRNode.STORE_I, \"2\"})\n+\/\/ \/\/    public void testBad1() {\n+\/\/ \/\/        iFld = 3;\n+\/\/ \/\/    }\n+\/\/ \/\/\n+\/\/ \/\/    @Check(test = \"testBad1\")\n+\/\/ \/\/    public void checkTestBad1(TestInfo info) {\n+\/\/ \/\/    }\n+\/\/ \/\/\n+\/\/ \/\/    @Test\n+\/\/ \/\/    @IR(failOn = IRNode.STORE_I)\n+\/\/ \/\/    public int testBad2() {\n+\/\/ \/\/        iFld = 3;\n+\/\/ \/\/        return 3;\n+\/\/ \/\/    }\n+\/\/ \/\/\n+\/\/ \/\/    @Check(test = \"testBad2\")\n+\/\/ \/\/    public void sameName(int retValue) {\n+\/\/ \/\/        if (retValue != 3) {\n+\/\/ \/\/            throw new RuntimeException(\"must be 3\");\n+\/\/ \/\/        }\n+\/\/ \/\/    }\n+\/\/ \/\/\n+\/\/ \/\/    @Test\n+\/\/ \/\/    @Arguments(values = Argument.NUMBER_42)\n+\/\/ \/\/    @IR(failOn = IRNode.LOAD)\n+\/\/ \/\/    @IR(counts = {IRNode.STORE_I, \"1\"})\n+\/\/ \/\/    public int testBad4(int x) {\n+\/\/ \/\/        return x;\n+\/\/ \/\/    }\n+\/\/ \/\/\n+\/\/ \/\/    @Check(test = \"testBad4\")\n+\/\/ \/\/    public void sameName(int retValue, TestInfo info) {\n+\/\/ \/\/        if (retValue != 42) {\n+\/\/ \/\/            throw new RuntimeException(\"must be 42\");\n+\/\/ \/\/        }\n+\/\/ \/\/    }\n+\/\/ }\n+\n+class BadCheckedTestException extends RuntimeException {\n+    BadCheckedTestException(String s) {\n+        super(s);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestSetupTests.java","additions":194,"deletions":0,"binary":false,"changes":194,"status":"added"}]}