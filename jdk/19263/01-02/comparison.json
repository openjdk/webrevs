{"files":[{"patch":"@@ -49,8 +49,8 @@\n- *\tIn the <em>JNDI form<\/em>, the URL indicates <em>where to find\n- *\tan RMI stub for the connector<\/em>.  This RMI stub is a Java\n- *\tobject of type {@link javax.management.remote.rmi.RMIServer\n- *\tRMIServer} that gives remote access to the connector server.\n- *\tWith this address form, the RMI stub is obtained from an\n- *\texternal directory entry included in the URL.  An external\n- *\tdirectory is any directory recognized by {@link javax.naming\n- *\tJNDI}, typically the RMI registry, LDAP, or COS Naming.\n+ *  In the <em>JNDI form<\/em>, the URL indicates <em>where to find\n+ *  an RMI stub for the connector<\/em>.  This RMI stub is a Java\n+ *  object of type {@link javax.management.remote.rmi.RMIServer\n+ *  RMIServer} that gives remote access to the connector server.\n+ *  With this address form, the RMI stub is obtained from an\n+ *  external directory entry included in the URL.  An external\n+ *  directory is any directory recognized by {@link javax.naming\n+ *  JNDI}, typically the RMI registry, LDAP, or COS Naming.\n@@ -59,5 +59,5 @@\n- *\tIn the <em>encoded form<\/em>, the URL directly includes the\n- *\tinformation needed to connect to the connector server.  When\n- *\tusing RMI\/JRMP, the encoded form is the serialized RMI stub\n- *\tfor the server object, encoded using BASE64 without embedded\n- *\tnewlines.\n+ *  In the <em>encoded form<\/em>, the URL directly includes the\n+ *  information needed to connect to the connector server.  When\n+ *  using RMI\/JRMP, the encoded form is the serialized RMI stub\n+ *  for the server object, encoded using BASE64 without embedded\n+ *  newlines.\n@@ -99,1 +99,1 @@\n- *\tserver<\/a><\/h3>\n+ *  server<\/a><\/h3>\n@@ -111,3 +111,3 @@\n- *\t<pre>\n- *\t<code>service:jmx:rmi:\/\/<em>host<\/em>:<em>port<\/em><\/code>\n- *\t<\/pre>\n+ *  <pre>\n+ *  <code>service:jmx:rmi:\/\/<em>host<\/em>:<em>port<\/em><\/code>\n+ *  <\/pre>\n@@ -115,4 +115,4 @@\n- *\t<p>then the connector server will generate an {@link\n- *\tjavax.management.remote.rmi.RMIJRMPServerImpl\n- *\tRMIJRMPServerImpl} and the returned <code>JMXServiceURL<\/code>\n- *\tlooks like:<\/p>\n+ *  <p>then the connector server will generate an {@link\n+ *  javax.management.remote.rmi.RMIJRMPServerImpl\n+ *  RMIJRMPServerImpl} and the returned <code>JMXServiceURL<\/code>\n+ *  looks like:<\/p>\n@@ -120,3 +120,3 @@\n- *\t<pre>\n- *\t<code>service:jmx:rmi:\/\/<em>host<\/em>:<em>port<\/em>\/stub\/<em>XXXX<\/em><\/code>\n- *\t<\/pre>\n+ *  <pre>\n+ *  <code>service:jmx:rmi:\/\/<em>host<\/em>:<em>port<\/em>\/stub\/<em>XXXX<\/em><\/code>\n+ *  <\/pre>\n@@ -124,3 +124,3 @@\n- *\t<p>where <code><em>XXXX<\/em><\/code> is the serialized form of the\n- *\tstub for the generated object, encoded in BASE64 without\n- *\tnewlines.<\/p>\n+ *  <p>where <code><em>XXXX<\/em><\/code> is the serialized form of the\n+ *  stub for the generated object, encoded in BASE64 without\n+ *  newlines.<\/p>\n@@ -129,1 +129,1 @@\n- *\tuser-provided <code>RMIServerImpl<\/code>.  The connector server\n+ *  user-provided <code>RMIServerImpl<\/code>.  The connector server\n@@ -131,1 +131,1 @@\n- *\tform.<\/p>\n+ *  form.<\/p>\n@@ -158,1 +158,1 @@\n- *\tentries<\/a><\/h3>\n+ *  entries<\/a><\/h3>\n","filename":"src\/java.management.rmi\/share\/classes\/javax\/management\/remote\/rmi\/package-info.java","additions":30,"deletions":30,"binary":false,"changes":60,"status":"modified"}]}