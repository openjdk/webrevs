{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,15 +105,17 @@\n-    * Name of the attribute that specifies an\n-    * {@link ObjectInputFilter} pattern string to filter classes acceptable\n-    * for {@link RMIServer#newClient(java.lang.Object) RMIServer.newClient()}\n-    * remote method call.\n-    * <p>\n-    * The filter pattern must be in same format as used in\n-    * {@link java.io.ObjectInputFilter.Config#createFilter}\n-    * <p>\n-    * This list of classes allowed by filter should correspond to the\n-    * transitive closure of the credentials class (or classes) used by the\n-    * installed {@linkplain JMXAuthenticator} associated with the\n-    * {@linkplain RMIServer} implementation.\n-    * If the attribute is not set then any class is deemed acceptable.\n-    * @see ObjectInputFilter\n-    *\/\n+     * Name of the attribute that specifies an\n+     * {@link ObjectInputFilter} pattern string to filter classes acceptable\n+     * for {@link RMIServer#newClient(java.lang.Object) RMIServer.newClient()}\n+     * remote method call.\n+     * <p>\n+     * The filter pattern must be in same format as used in\n+     * {@link java.io.ObjectInputFilter.Config#createFilter}\n+     * <p>\n+     * This list of classes allowed by filter should correspond to the\n+     * transitive closure of the credentials class (or classes) used by the\n+     * installed {@linkplain JMXAuthenticator} associated with the\n+     * {@linkplain RMIServer} implementation.\n+     * If the attribute is not set then any class is deemed acceptable.\n+     * @see ObjectInputFilter\n+     *\n+     * @since 10\n+     *\/\n@@ -155,0 +157,2 @@\n+     *\n+     * @since 10\n","filename":"src\/java.management.rmi\/share\/classes\/javax\/management\/remote\/rmi\/RMIConnectorServer.java","additions":20,"deletions":16,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -0,0 +1,326 @@\n+\/*\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ *    <p>The RMI connector is a connector for the JMX Remote API that\n+ *      uses RMI to transmit client requests to a remote MBean server.\n+ *      This package defines the classes that the user of an RMI\n+ *      connector needs to reference directly, for both the client and\n+ *      server sides.  It also defines certain classes that the user\n+ *      will not usually reference directly, but that must be defined so\n+ *      that different implementations of the RMI connector can\n+ *      interoperate.<\/p>\n+ *\n+ *    <p>The RMI connector supports the JRMP transport for RMI.<\/p>\n+ *\n+ *    <p>Like most connectors in the JMX Remote API, an RMI connector\n+ *      usually has an address, which\n+ *      is a {@link javax.management.remote.JMXServiceURL\n+ *      JMXServiceURL}.  The protocol part of this address is\n+ *      <code>rmi<\/code> for a connector that uses the default RMI\n+ *      transport (JRMP).<\/p>\n+ *\n+ *    <p>There are two forms for RMI connector addresses:<\/p>\n+ *\n+ *    <ul>\n+ *      <li>\n+ *  In the <em>JNDI form<\/em>, the URL indicates <em>where to find\n+ *  an RMI stub for the connector<\/em>.  This RMI stub is a Java\n+ *  object of type {@link javax.management.remote.rmi.RMIServer\n+ *  RMIServer} that gives remote access to the connector server.\n+ *  With this address form, the RMI stub is obtained from an\n+ *  external directory entry included in the URL.  An external\n+ *  directory is any directory recognized by {@link javax.naming\n+ *  JNDI}, typically the RMI registry, LDAP, or COS Naming.\n+ *\n+ *      <li>\n+ *  In the <em>encoded form<\/em>, the URL directly includes the\n+ *  information needed to connect to the connector server.  When\n+ *  using RMI\/JRMP, the encoded form is the serialized RMI stub\n+ *  for the server object, encoded using BASE64 without embedded\n+ *  newlines.\n+ *    <\/ul>\n+ *\n+ *    <p>Addresses are covered in more detail below.<\/p>\n+ *\n+ *\n+ *    <h2>Creating an RMI connector server<\/h2>\n+ *\n+ *    <p>The usual way to create an RMI connector server is to supply an\n+ *      RMI connector address to the method {@link\n+ *      javax.management.remote.JMXConnectorServerFactory#newJMXConnectorServer\n+ *      JMXConnectorServerFactory.newJMXConnectorServer}.  The MBean\n+ *      server to which the connector server is attached can be\n+ *      specified as a parameter to that method.  Alternatively, the\n+ *      connector server can be registered as an MBean in that MBean\n+ *      server.<\/p>\n+ *\n+ *    <p>An RMI connector server can also be created by constructing an\n+ *      instance of {@link\n+ *      javax.management.remote.rmi.RMIConnectorServer\n+ *      RMIConnectorServer}, explicitly or through the MBean server's\n+ *      <code>createMBean<\/code> method.<\/p>\n+ *\n+ *    <h3>Choosing the RMI transport<\/h3>\n+ *\n+ *    <p>You can choose the RMI transport by specifying\n+ *      <code>rmi<\/code> in the <code><em>protocol<\/em><\/code> part of the\n+ *      <code>serviceURL<\/code> when creating the connector server.  You\n+ *      can also create specialized connector servers by instantiating\n+ *      an appropriate subclass of {@link\n+ *      javax.management.remote.rmi.RMIServerImpl RMIServerImpl} and\n+ *      supplying it to the <code>RMIConnectorServer<\/code>\n+ *      constructor.<\/p>\n+ *\n+ *\n+ *    <h3><a id=\"servergen\">Connector addresses generated by the\n+ *  server<\/a><\/h3>\n+ *\n+ *    <p>If the <code>serviceURL<\/code> you specify has an empty URL\n+ *      path (after the optional host and port), or if you do not\n+ *      specify a <code>serviceURL<\/code>, then the connector server\n+ *      will fabricate a new <code>JMXServiceURL<\/code> that clients can\n+ *      use to connect:<\/p>\n+ *\n+ *    <ul>\n+ *\n+ *      <li><p>If the <code>serviceURL<\/code> looks like:<\/p>\n+ *\n+ *  <pre>\n+ *  <code>service:jmx:rmi:\/\/<em>host<\/em>:<em>port<\/em><\/code>\n+ *  <\/pre>\n+ *\n+ *  <p>then the connector server will generate an {@link\n+ *  javax.management.remote.rmi.RMIJRMPServerImpl\n+ *  RMIJRMPServerImpl} and the returned <code>JMXServiceURL<\/code>\n+ *  looks like:<\/p>\n+ *\n+ *  <pre>\n+ *  <code>service:jmx:rmi:\/\/<em>host<\/em>:<em>port<\/em>\/stub\/<em>XXXX<\/em><\/code>\n+ *  <\/pre>\n+ *\n+ *  <p>where <code><em>XXXX<\/em><\/code> is the serialized form of the\n+ *  stub for the generated object, encoded in BASE64 without\n+ *  newlines.<\/p>\n+ *\n+ *      <li><p>If there is no <code>serviceURL<\/code>, there must be a\n+ *  user-provided <code>RMIServerImpl<\/code>.  The connector server\n+ *        will generate a <code>JMXServiceURL<\/code> using the <code>rmi<\/code>\n+ *  form.<\/p>\n+ *\n+ *    <\/ul>\n+ *\n+ *    <p>The <code><em>host<\/em><\/code> in a user-provided\n+ *      <code>serviceURL<\/code> is optional.  If present, it is copied\n+ *      into the generated <code>JMXServiceURL<\/code> but otherwise\n+ *      ignored.  If absent, the generated <code>JXMServiceURL<\/code>\n+ *      will have the local host name.<\/p>\n+ *\n+ *    <p>The <code><em>port<\/em><\/code> in a user-provided\n+ *      <code>serviceURL<\/code> is also optional.  If present, it is\n+ *      also copied into the generated <code>JMXServiceURL<\/code>;\n+ *      otherwise, the generated <code>JMXServiceURL<\/code> has no port.\n+ *      For an <code>serviceURL<\/code> using the <code>rmi<\/code>\n+ *      protocol, the <code><em>port<\/em><\/code>, if present, indicates\n+ *      what port the generated remote object should be exported on.  It\n+ *      has no other effect.<\/p>\n+ *\n+ *    <p>If the user provides an <code>RMIServerImpl<\/code> rather than a\n+ *      <code>JMXServiceURL<\/code>, then the generated\n+ *      <code>JMXServiceURL<\/code> will have the local host name in its\n+ *      <code><em>host<\/em><\/code> part and no\n+ *      <code><em>port<\/em><\/code>.<\/p>\n+ *\n+ *\n+ *    <h3><a id=\"directory\">Connector addresses based on directory\n+ *  entries<\/a><\/h3>\n+ *\n+ *    <p>As an alternative to the generated addresses just described,\n+ *      the <code>serviceURL<\/code> address supplied when creating a\n+ *      connector server can specify a <em>directory address<\/em> in\n+ *      which to store the provided or generated <code>RMIServer<\/code>\n+ *      stub.  This directory address is then used by both client and\n+ *      server.<\/p>\n+ *\n+ *    <p>In this case, the <code>serviceURL<\/code> has the following form:<\/p>\n+ *\n+ *    <pre>\n+ *    <code>service:jmx:rmi:\/\/<em>host<\/em>:<em>port<\/em>\/jndi\/<em>jndi-name<\/em><\/code>\n+ *    <\/pre>\n+ *\n+ *    <p>Here, <code><em>jndi-name<\/em><\/code> is a string that can be\n+ *      supplied to {@link javax.naming.InitialContext#bind\n+ *      javax.naming.InitialContext.bind}.<\/p>\n+ *\n+ *    <p>As usual, the <code><em>host<\/em><\/code> and\n+ *      <code>:<em>port<\/em><\/code> can be omitted.<\/p>\n+ *\n+ *    <p>The connector server will generate an\n+ *      <code>RMIServerImpl<\/code> based on the protocol\n+ *      (<code>rmi<\/code>) and the <code><em>port<\/em><\/code> if any.  When\n+ *      the connector server is started, it will derive a stub from this\n+ *      object using its {@link\n+ *      javax.management.remote.rmi.RMIServerImpl#toStub toStub} method\n+ *      and store the object using the given\n+ *      <code><em>jndi-name<\/em><\/code>.  The properties defined by the\n+ *      JNDI API are consulted as usual.<\/p>\n+ *\n+ *    <p>For example, if the <code>JMXServiceURL<\/code> is:\n+ *\n+ *      <pre>\n+ *      <code>service:jmx:rmi:\/\/ignoredhost\/jndi\/rmi:\/\/myhost\/myname<\/code>\n+ *      <\/pre>\n+ *\n+ *      then the connector server will generate an\n+ *      <code>RMIJRMPServerImpl<\/code> and store its stub using the JNDI\n+ *      name\n+ *\n+ *      <pre>\n+ *      <code>rmi:\/\/myhost\/myname<\/code>\n+ *      <\/pre>\n+ *\n+ *      which means entry <code>myname<\/code> in the RMI registry\n+ *      running on the default port of host <code>myhost<\/code>.  Note\n+ *      that the RMI registry only allows registration from the local\n+ *      host.  So, in this case, <code>myhost<\/code> must be the name\n+ *      (or a name) of the host that the connector server is running\n+ *      on.\n+ *\n+ *    <p>In this <code>JMXServiceURL<\/code>, the first <code>rmi:<\/code>\n+ *      specifies the RMI\n+ *      connector, while the second <code>rmi:<\/code> specifies the RMI\n+ *      registry.\n+ *\n+ *    <p>As another example, if the <code>JMXServiceURL<\/code> is:\n+ *\n+ *      <pre>\n+ *      <code>service:jmx:rmi:\/\/ignoredhost\/jndi\/ldap:\/\/dirhost:9999\/cn=this,ou=that<\/code>\n+ *      <\/pre>\n+ *\n+ *      then the connector server will generate an\n+ *      <code>RMIJRMPServerImpl<\/code> and store its stub using the JNDI\n+ *      name\n+ *\n+ *      <pre>\n+ *      <code>ldap:\/\/dirhost:9999\/cn=this,ou=that<\/code>\n+ *      <\/pre>\n+ *\n+ *      which means entry <code>cn=this,ou=that<\/code> in the LDAP\n+ *      directory running on port 9999 of host <code>dirhost<\/code>.\n+ *\n+ *    <p>If the <code>JMXServiceURL<\/code> is:\n+ *\n+ *      <pre>\n+ *      <code>service:jmx:rmi:\/\/ignoredhost\/jndi\/cn=this,ou=that<\/code>\n+ *      <\/pre>\n+ *\n+ *      then the connector server will generate an\n+ *      <code>RMIJRMPServerImpl<\/code> and store its stub using the JNDI\n+ *      name\n+ *\n+ *      <pre>\n+ *      <code>cn=this,ou=that<\/code>\n+ *      <\/pre>\n+ *\n+ *      For this case to work, the JNDI API must have been configured\n+ *      appropriately to supply the information about what directory to\n+ *      use.\n+ *\n+ *    <p>In these examples, the host name <code>ignoredhost<\/code> is\n+ *      not used by the connector server or its clients.  It can be\n+ *      omitted, for example:<\/p>\n+ *\n+ *      <pre>\n+ *      <code>service:jmx:rmi:\/\/\/jndi\/cn=this,ou=that<\/code>\n+ *      <\/pre>\n+ *\n+ *    <p>However, it is good practice to use the name of the host\n+ *      where the connector server is running.  This is often different\n+ *      from the name of the directory host.<\/p>\n+ *\n+ *\n+ *    <h3>Connector server attributes<\/h3>\n+ *\n+ *    <p>When using the default JRMP transport, RMI socket factories can\n+ *      be specified using the attributes\n+ *      <code>jmx.remote.rmi.client.socket.factory<\/code> and\n+ *      <code>jmx.remote.rmi.server.socket.factory<\/code> in the\n+ *      <code>environment<\/code> given to the\n+ *      <code>RMIConnectorServer<\/code> constructor.  The values of these\n+ *      attributes must be of type {@link\n+ *      java.rmi.server.RMIClientSocketFactory} and {@link\n+ *      java.rmi.server.RMIServerSocketFactory}, respectively.  These\n+ *      factories are used when creating the RMI objects associated with\n+ *      the connector.<\/p>\n+ *\n+ *    <h2>Creating an RMI connector client<\/h2>\n+ *\n+ *    <p>An RMI connector client is usually constructed using {@link\n+ *      javax.management.remote.JMXConnectorFactory}, with a\n+ *      <code>JMXServiceURL<\/code> that has <code>rmi<\/code> as its protocol.<\/p>\n+ *\n+ *    <p>If the <code>JMXServiceURL<\/code> was generated by the server,\n+ *      as described above under <a href=\"#servergen\">\"connector\n+ *      addresses generated by the server\"<\/a>, then the client will\n+ *      need to obtain it directly or indirectly from the server.\n+ *      Typically, the server makes the <code>JMXServiceURL<\/code>\n+ *      available by storing it in a file or a lookup service.<\/p>\n+ *\n+ *    <p>If the <code>JMXServiceURL<\/code> uses the directory syntax, as\n+ *      described above under <a href=\"#directory\">\"connector addresses\n+ *      based on directory entries\"<\/a>, then the client may obtain it\n+ *      as just explained, or client and server may both know the\n+ *      appropriate directory entry to use.  For example, if the\n+ *      connector server for the Whatsit agent uses the entry\n+ *      <code>whatsit-agent-connector<\/code> in the RMI registry on host\n+ *      <code>myhost<\/code>, then client and server can both know\n+ *      that the appropriate <code>JMXServiceURL<\/code> is:<\/p>\n+ *\n+ *    <pre>\n+ *    <code>service:jmx:rmi:\/\/\/jndi\/rmi:\/\/myhost\/whatsit-agent-connector<\/code>\n+ *    <\/pre>\n+ *\n+ *    <p>If you have an RMI stub of type {@link\n+ *      javax.management.remote.rmi.RMIServer RMIServer}, you can\n+ *      construct an RMI connection directly by using the appropriate\n+ *      constructor of {@link javax.management.remote.rmi.RMIConnector\n+ *      RMIConnector}.<\/p>\n+ *\n+ *    <h2>Dynamic code downloading<\/h2>\n+ *\n+ *    <p>If an RMI connector client or server receives from its peer an\n+ *      instance of a class that it does not know, and if dynamic code\n+ *      downloading is active for the RMI connection, then the class can\n+ *      be downloaded from a codebase specified by the peer.\n+ *      {@extLink rmi_guide Java RMI Guide} explains this in more detail.<\/p>\n+ *\n+ *    @see <a href=\"http:\/\/www.ietf.org\/rfc\/rfc2045.txt\">RFC 2045,\n+ *    section 6.8, \"Base64 Content-Transfer-Encoding\"<\/a>\n+ *\n+ *\n+ *    @since 1.5\n+ *\n+ *\/\n+package javax.management.remote.rmi;\n","filename":"src\/java.management.rmi\/share\/classes\/javax\/management\/remote\/rmi\/package-info.java","additions":326,"deletions":0,"binary":false,"changes":326,"status":"added"},{"patch":"@@ -1,329 +0,0 @@\n-<html>\n-<head>\n-    <title>RMI connector<\/title>\n-<!--\n-Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n-DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n-This code is free software; you can redistribute it and\/or modify it\n-under the terms of the GNU General Public License version 2 only, as\n-published by the Free Software Foundation.  Oracle designates this\n-particular file as subject to the \"Classpath\" exception as provided\n-by Oracle in the LICENSE file that accompanied this code.\n-\n-This code is distributed in the hope that it will be useful, but WITHOUT\n-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-version 2 for more details (a copy is included in the LICENSE file that\n-accompanied this code).\n-\n-You should have received a copy of the GNU General Public License version\n-2 along with this work; if not, write to the Free Software Foundation,\n-Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n-Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-or visit www.oracle.com if you need additional information or have any\n-questions.\n--->\n-<\/head>\n-<body bgcolor=\"white\">\n-    <p>The RMI connector is a connector for the JMX Remote API that\n-      uses RMI to transmit client requests to a remote MBean server.\n-      This package defines the classes that the user of an RMI\n-      connector needs to reference directly, for both the client and\n-      server sides.  It also defines certain classes that the user\n-      will not usually reference directly, but that must be defined so\n-      that different implementations of the RMI connector can\n-      interoperate.<\/p>\n-\n-    <p>The RMI connector supports the JRMP transport for RMI.<\/p>\n-\n-    <p>Like most connectors in the JMX Remote API, an RMI connector\n-      usually has an address, which\n-      is a {@link javax.management.remote.JMXServiceURL\n-      JMXServiceURL}.  The protocol part of this address is\n-      <code>rmi<\/code> for a connector that uses the default RMI\n-      transport (JRMP).<\/p>\n-\n-    <p>There are two forms for RMI connector addresses:<\/p>\n-\n-    <ul>\n-      <li>\n-\tIn the <em>JNDI form<\/em>, the URL indicates <em>where to find\n-\tan RMI stub for the connector<\/em>.  This RMI stub is a Java\n-\tobject of type {@link javax.management.remote.rmi.RMIServer\n-\tRMIServer} that gives remote access to the connector server.\n-\tWith this address form, the RMI stub is obtained from an\n-\texternal directory entry included in the URL.  An external\n-\tdirectory is any directory recognized by {@link javax.naming\n-\tJNDI}, typically the RMI registry, LDAP, or COS Naming.\n-\n-      <li>\n-\tIn the <em>encoded form<\/em>, the URL directly includes the\n-\tinformation needed to connect to the connector server.  When\n-\tusing RMI\/JRMP, the encoded form is the serialized RMI stub\n-\tfor the server object, encoded using BASE64 without embedded\n-\tnewlines.\n-    <\/ul>\n-\n-    <p>Addresses are covered in more detail below.<\/p>\n-\n-\n-    <h2>Creating an RMI connector server<\/h2>\n-\n-    <p>The usual way to create an RMI connector server is to supply an\n-      RMI connector address to the method {@link\n-      javax.management.remote.JMXConnectorServerFactory#newJMXConnectorServer\n-      JMXConnectorServerFactory.newJMXConnectorServer}.  The MBean\n-      server to which the connector server is attached can be\n-      specified as a parameter to that method.  Alternatively, the\n-      connector server can be registered as an MBean in that MBean\n-      server.<\/p>\n-\n-    <p>An RMI connector server can also be created by constructing an\n-      instance of {@link\n-      javax.management.remote.rmi.RMIConnectorServer\n-      RMIConnectorServer}, explicitly or through the MBean server's\n-      <code>createMBean<\/code> method.<\/p>\n-\n-    <h3>Choosing the RMI transport<\/h3>\n-\n-    <p>You can choose the RMI transport by specifying\n-      <code>rmi<\/code> in the <code><em>protocol<\/em><\/code> part of the\n-      <code>serviceURL<\/code> when creating the connector server.  You\n-      can also create specialized connector servers by instantiating\n-      an appropriate subclass of {@link\n-      javax.management.remote.rmi.RMIServerImpl RMIServerImpl} and\n-      supplying it to the <code>RMIConnectorServer<\/code>\n-      constructor.<\/p>\n-\n-\n-    <h3><a id=\"servergen\">Connector addresses generated by the\n-\tserver<\/a><\/h3>\n-\n-    <p>If the <code>serviceURL<\/code> you specify has an empty URL\n-      path (after the optional host and port), or if you do not\n-      specify a <code>serviceURL<\/code>, then the connector server\n-      will fabricate a new <code>JMXServiceURL<\/code> that clients can\n-      use to connect:<\/p>\n-\n-    <ul>\n-\n-      <li><p>If the <code>serviceURL<\/code> looks like:<\/p>\n-\n-\t<pre>\n-\t<code>service:jmx:rmi:\/\/<em>host<\/em>:<em>port<\/em><\/code>\n-\t<\/pre>\n-\n-\t<p>then the connector server will generate an {@link\n-\tjavax.management.remote.rmi.RMIJRMPServerImpl\n-\tRMIJRMPServerImpl} and the returned <code>JMXServiceURL<\/code>\n-\tlooks like:<\/p>\n-\n-\t<pre>\n-\t<code>service:jmx:rmi:\/\/<em>host<\/em>:<em>port<\/em>\/stub\/<em>XXXX<\/em><\/code>\n-\t<\/pre>\n-\n-\t<p>where <code><em>XXXX<\/em><\/code> is the serialized form of the\n-\tstub for the generated object, encoded in BASE64 without\n-\tnewlines.<\/p>\n-\n-      <li><p>If there is no <code>serviceURL<\/code>, there must be a\n-\tuser-provided <code>RMIServerImpl<\/code>.  The connector server\n-        will generate a <code>JMXServiceURL<\/code> using the <code>rmi<\/code>\n-\tform.<\/p>\n-\n-    <\/ul>\n-\n-    <p>The <code><em>host<\/em><\/code> in a user-provided\n-      <code>serviceURL<\/code> is optional.  If present, it is copied\n-      into the generated <code>JMXServiceURL<\/code> but otherwise\n-      ignored.  If absent, the generated <code>JXMServiceURL<\/code>\n-      will have the local host name.<\/p>\n-\n-    <p>The <code><em>port<\/em><\/code> in a user-provided\n-      <code>serviceURL<\/code> is also optional.  If present, it is\n-      also copied into the generated <code>JMXServiceURL<\/code>;\n-      otherwise, the generated <code>JMXServiceURL<\/code> has no port.\n-      For an <code>serviceURL<\/code> using the <code>rmi<\/code>\n-      protocol, the <code><em>port<\/em><\/code>, if present, indicates\n-      what port the generated remote object should be exported on.  It\n-      has no other effect.<\/p>\n-\n-    <p>If the user provides an <code>RMIServerImpl<\/code> rather than a\n-      <code>JMXServiceURL<\/code>, then the generated\n-      <code>JMXServiceURL<\/code> will have the local host name in its\n-      <code><em>host<\/em><\/code> part and no\n-      <code><em>port<\/em><\/code>.<\/p>\n-\n-\n-    <h3><a id=\"directory\">Connector addresses based on directory\n-\tentries<\/a><\/h3>\n-\n-    <p>As an alternative to the generated addresses just described,\n-      the <code>serviceURL<\/code> address supplied when creating a\n-      connector server can specify a <em>directory address<\/em> in\n-      which to store the provided or generated <code>RMIServer<\/code>\n-      stub.  This directory address is then used by both client and\n-      server.<\/p>\n-\n-    <p>In this case, the <code>serviceURL<\/code> has the following form:<\/p>\n-\n-    <pre>\n-    <code>service:jmx:rmi:\/\/<em>host<\/em>:<em>port<\/em>\/jndi\/<em>jndi-name<\/em><\/code>\n-    <\/pre>\n-\n-    <p>Here, <code><em>jndi-name<\/em><\/code> is a string that can be\n-      supplied to {@link javax.naming.InitialContext#bind\n-      javax.naming.InitialContext.bind}.<\/p>\n-\n-    <p>As usual, the <code><em>host<\/em><\/code> and\n-      <code>:<em>port<\/em><\/code> can be omitted.<\/p>\n-\n-    <p>The connector server will generate an\n-      <code>RMIServerImpl<\/code> based on the protocol\n-      (<code>rmi<\/code>) and the <code><em>port<\/em><\/code> if any.  When\n-      the connector server is started, it will derive a stub from this\n-      object using its {@link\n-      javax.management.remote.rmi.RMIServerImpl#toStub toStub} method\n-      and store the object using the given\n-      <code><em>jndi-name<\/em><\/code>.  The properties defined by the\n-      JNDI API are consulted as usual.<\/p>\n-\n-    <p>For example, if the <code>JMXServiceURL<\/code> is:\n-\n-      <pre>\n-      <code>service:jmx:rmi:\/\/ignoredhost\/jndi\/rmi:\/\/myhost\/myname<\/code>\n-      <\/pre>\n-\n-      then the connector server will generate an\n-      <code>RMIJRMPServerImpl<\/code> and store its stub using the JNDI\n-      name\n-\n-      <pre>\n-      <code>rmi:\/\/myhost\/myname<\/code>\n-      <\/pre>\n-\n-      which means entry <code>myname<\/code> in the RMI registry\n-      running on the default port of host <code>myhost<\/code>.  Note\n-      that the RMI registry only allows registration from the local\n-      host.  So, in this case, <code>myhost<\/code> must be the name\n-      (or a name) of the host that the connector server is running\n-      on.\n-\n-    <p>In this <code>JMXServiceURL<\/code>, the first <code>rmi:<\/code>\n-      specifies the RMI\n-      connector, while the second <code>rmi:<\/code> specifies the RMI\n-      registry.\n-\n-    <p>As another example, if the <code>JMXServiceURL<\/code> is:\n-\n-      <pre>\n-      <code>service:jmx:rmi:\/\/ignoredhost\/jndi\/ldap:\/\/dirhost:9999\/cn=this,ou=that<\/code>\n-      <\/pre>\n-\n-      then the connector server will generate an\n-      <code>RMIJRMPServerImpl<\/code> and store its stub using the JNDI\n-      name\n-\n-      <pre>\n-      <code>ldap:\/\/dirhost:9999\/cn=this,ou=that<\/code>\n-      <\/pre>\n-\n-      which means entry <code>cn=this,ou=that<\/code> in the LDAP\n-      directory running on port 9999 of host <code>dirhost<\/code>.\n-\n-    <p>If the <code>JMXServiceURL<\/code> is:\n-\n-      <pre>\n-      <code>service:jmx:rmi:\/\/ignoredhost\/jndi\/cn=this,ou=that<\/code>\n-      <\/pre>\n-\n-      then the connector server will generate an\n-      <code>RMIJRMPServerImpl<\/code> and store its stub using the JNDI\n-      name\n-\n-      <pre>\n-      <code>cn=this,ou=that<\/code>\n-      <\/pre>\n-\n-      For this case to work, the JNDI API must have been configured\n-      appropriately to supply the information about what directory to\n-      use.\n-\n-    <p>In these examples, the host name <code>ignoredhost<\/code> is\n-      not used by the connector server or its clients.  It can be\n-      omitted, for example:<\/p>\n-\n-      <pre>\n-      <code>service:jmx:rmi:\/\/\/jndi\/cn=this,ou=that<\/code>\n-      <\/pre>\n-\n-    <p>However, it is good practice to use the name of the host\n-      where the connector server is running.  This is often different\n-      from the name of the directory host.<\/p>\n-\n-\n-    <h3>Connector server attributes<\/h3>\n-\n-    <p>When using the default JRMP transport, RMI socket factories can\n-      be specified using the attributes\n-      <code>jmx.remote.rmi.client.socket.factory<\/code> and\n-      <code>jmx.remote.rmi.server.socket.factory<\/code> in the\n-      <code>environment<\/code> given to the\n-      <code>RMIConnectorServer<\/code> constructor.  The values of these\n-      attributes must be of type {@link\n-      java.rmi.server.RMIClientSocketFactory} and {@link\n-      java.rmi.server.RMIServerSocketFactory}, respectively.  These\n-      factories are used when creating the RMI objects associated with\n-      the connector.<\/p>\n-\n-    <h2>Creating an RMI connector client<\/h2>\n-\n-    <p>An RMI connector client is usually constructed using {@link\n-      javax.management.remote.JMXConnectorFactory}, with a\n-      <code>JMXServiceURL<\/code> that has <code>rmi<\/code> as its protocol.<\/p>\n-\n-    <p>If the <code>JMXServiceURL<\/code> was generated by the server,\n-      as described above under <a href=\"#servergen\">\"connector\n-      addresses generated by the server\"<\/a>, then the client will\n-      need to obtain it directly or indirectly from the server.\n-      Typically, the server makes the <code>JMXServiceURL<\/code>\n-      available by storing it in a file or a lookup service.<\/p>\n-\n-    <p>If the <code>JMXServiceURL<\/code> uses the directory syntax, as\n-      described above under <a href=\"#directory\">\"connector addresses\n-      based on directory entries\"<\/a>, then the client may obtain it\n-      as just explained, or client and server may both know the\n-      appropriate directory entry to use.  For example, if the\n-      connector server for the Whatsit agent uses the entry\n-      <code>whatsit-agent-connector<\/code> in the RMI registry on host\n-      <code>myhost<\/code>, then client and server can both know\n-      that the appropriate <code>JMXServiceURL<\/code> is:<\/p>\n-\n-    <pre>\n-    <code>service:jmx:rmi:\/\/\/jndi\/rmi:\/\/myhost\/whatsit-agent-connector<\/code>\n-    <\/pre>\n-\n-    <p>If you have an RMI stub of type {@link\n-      javax.management.remote.rmi.RMIServer RMIServer}, you can\n-      construct an RMI connection directly by using the appropriate\n-      constructor of {@link javax.management.remote.rmi.RMIConnector\n-      RMIConnector}.<\/p>\n-\n-    <h2>Dynamic code downloading<\/h2>\n-\n-    <p>If an RMI connector client or server receives from its peer an\n-      instance of a class that it does not know, and if dynamic code\n-      downloading is active for the RMI connection, then the class can\n-      be downloaded from a codebase specified by the peer.\n-      {@extLink rmi_guide Java RMI Guide} explains this in more detail.<\/p>\n-\n-    @see <a href=\"http:\/\/www.ietf.org\/rfc\/rfc2045.txt\">RFC 2045,\n-    section 6.8, \"Base64 Content-Transfer-Encoding\"<\/a>\n-\n-\n-    @since 1.5\n-\n-  <\/body>\n-<\/html>\n","filename":"src\/java.management.rmi\/share\/classes\/javax\/management\/remote\/rmi\/package.html","additions":0,"deletions":329,"binary":false,"changes":329,"status":"deleted"}]}