{"files":[{"patch":"@@ -3020,1 +3020,3 @@\n-    verify_legal_class_modifiers(flags, CHECK_0);\n+\n+    Symbol* inner_name_symbol = inner_name_index == 0 ? vmSymbols::unnamed_name() : cp->symbol_at(inner_name_index);\n+    verify_legal_class_modifiers(flags, inner_name_symbol, CHECK_0);\n@@ -4275,1 +4277,1 @@\n-void ClassFileParser::verify_legal_class_modifiers(jint flags, TRAPS) const {\n+void ClassFileParser::verify_legal_class_modifiers(jint flags, Symbol* inner_name, TRAPS) const {\n@@ -4305,6 +4307,15 @@\n-    Exceptions::fthrow(\n-      THREAD_AND_LOCATION,\n-      vmSymbols::java_lang_ClassFormatError(),\n-      \"Illegal class modifiers in class %s: 0x%X\",\n-      _class_name->as_C_string(), flags\n-    );\n+    if (inner_name == nullptr) {\n+      Exceptions::fthrow(\n+        THREAD_AND_LOCATION,\n+        vmSymbols::java_lang_ClassFormatError(),\n+        \"Illegal class modifiers in class %s: 0x%X\",\n+        _class_name->as_C_string(), flags\n+      );\n+    } else {\n+      Exceptions::fthrow(\n+        THREAD_AND_LOCATION,\n+        vmSymbols::java_lang_ClassFormatError(),\n+        \"Illegal class modifiers in inner class %s of class %s: 0x%X\",\n+        inner_name->as_C_string(), _class_name->as_C_string(), flags\n+      );\n+    }\n@@ -5571,1 +5582,1 @@\n-  verify_legal_class_modifiers(flags, CHECK);\n+  verify_legal_class_modifiers(flags, nullptr, CHECK);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":20,"deletions":9,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -435,1 +435,1 @@\n-  void verify_legal_class_modifiers(jint flags, TRAPS) const;\n+  void verify_legal_class_modifiers(jint flags, Symbol* inner_name, TRAPS) const;\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -515,0 +515,1 @@\n+  template(unnamed_name,                              \"unnamed\")                                  \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+class OuterTest1 {\n+    class Inner {\n+        public void foo() { System.out.println(\"Inner.foo\"); }\n+    };\n+}\n+\n+Nested class acccess flags are made invalid in this jcod file.\n+*\/\n+\n+class OuterTest1 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  70; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"OuterTest1\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"SourceFile\"; \/\/ #11\n+    Utf8 \"OuterTest1.java\"; \/\/ #12\n+    Utf8 \"NestMembers\"; \/\/ #13\n+    class #15; \/\/ #14\n+    Utf8 \"OuterTest1$Inner\"; \/\/ #15\n+    Utf8 \"InnerClasses\"; \/\/ #16\n+    Utf8 \"Inner\"; \/\/ #17\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  3;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#11) { \/\/ SourceFile\n+      #12;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#13) { \/\/ NestMembers\n+      [] { \/\/ classes\n+        #14;\n+      }\n+    } \/\/ end NestMembers\n+    ;\n+    Attr(#16) { \/\/ InnerClasses\n+      [] { \/\/ classes\n+        #14 #7 #17 0x0fff;\n+      }\n+    } \/\/ end InnerClasses\n+  } \/\/ Attributes\n+} \/\/ end class OuterTest1\n","filename":"test\/hotspot\/jtreg\/runtime\/InnerClassesAttr\/OuterTest1.jcod","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"},{"patch":"@@ -0,0 +1,169 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+class OuterTest2 {\n+    interface Greeting {\n+        void sayHello();\n+    }\n+\n+    public static void test2() throws ClassFormatError {\n+        Greeting greeting = new Greeting() {\n+            @Override\n+            public void sayHello() {\n+                System.out.println(\"Hello from an anonymous inner class!\");\n+            }\n+        };\n+\n+        greeting.sayHello(); \/\/ Calls the method in the anonymous inner class\n+    }\n+}\n+\n+Nested class acccess flags are made invalid in this jcod file, the inner class is unnamed.\n+*\/\n+\n+class OuterTest2 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  70; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"OuterTest2$1\"; \/\/ #8\n+    Method #7 #3; \/\/ #9\n+    InterfaceMethod #11 #12; \/\/ #10\n+    class #13; \/\/ #11\n+    NameAndType #14 #6; \/\/ #12\n+    Utf8 \"OuterTest2$Greeting\"; \/\/ #13\n+    Utf8 \"sayHello\"; \/\/ #14\n+    class #16; \/\/ #15\n+    Utf8 \"OuterTest2\"; \/\/ #16\n+    Utf8 \"Code\"; \/\/ #17\n+    Utf8 \"LineNumberTable\"; \/\/ #18\n+    Utf8 \"test2\"; \/\/ #19\n+    Utf8 \"Exceptions\"; \/\/ #20\n+    class #22; \/\/ #21\n+    Utf8 \"java\/lang\/ClassFormatError\"; \/\/ #22\n+    Utf8 \"SourceFile\"; \/\/ #23\n+    Utf8 \"OuterTest2.java\"; \/\/ #24\n+    Utf8 \"NestMembers\"; \/\/ #25\n+    Utf8 \"InnerClasses\"; \/\/ #26\n+    Utf8 \"Greeting\"; \/\/ #27\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #15;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#17) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#18) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  3;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #19; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#17) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xBB000759B700094B;\n+            0x2AB9000A0100B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#18) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  9;\n+                8  16;\n+                14  17;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+        ;\n+        Attr(#20) { \/\/ Exceptions\n+          [] { \/\/ Exceptions\n+            #21;\n+          }\n+        } \/\/ end Exceptions\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#23) { \/\/ SourceFile\n+      #24;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#25) { \/\/ NestMembers\n+      [] { \/\/ classes\n+        #11;\n+        #7;\n+      }\n+    } \/\/ end NestMembers\n+    ;\n+    Attr(#26) { \/\/ InnerClasses\n+      [] { \/\/ classes\n+        #7 #0 #0 0x0fff;\n+        #11 #15 #27 1544;\n+      }\n+    } \/\/ end InnerClasses\n+  } \/\/ Attributes\n+} \/\/ end class OuterTest2\n","filename":"test\/hotspot\/jtreg\/runtime\/InnerClassesAttr\/OuterTest2.jcod","additions":169,"deletions":0,"binary":false,"changes":169,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8079784\n+ * @summary Test that CFE with bad inner class attribute has a nice message.\n+ * @library \/test\/lib\n+ * @compile OuterTest1.jcod OuterTest2.jcod\n+ * @run main TestInnerClassAccessFlagErrorMessage\n+ *\/\n+\n+import static jdk.test.lib.Asserts.*;\n+\n+public class TestInnerClassAccessFlagErrorMessage {\n+\n+    static String msg1 = \"Illegal class modifiers in inner class Inner of class OuterTest1: 0x63F\";\n+    static String msg2 = \"Illegal class modifiers in inner class unnamed of class OuterTest2: 0x63F\";\n+\n+    public static void main(java.lang.String[] unused) {\n+        try {\n+            Class<?> outer = Class.forName(\"OuterTest1\");\n+            fail(\"Should not reach here\");\n+        } catch (ClassFormatError err) {\n+            System.out.println(err.getMessage());\n+            assertEquals(err.getMessage(), msg1);\n+        } catch (ClassNotFoundException cfne) {\n+            cfne.printStackTrace();\n+            fail(\"Should not reach here\");\n+        }\n+\n+        try {\n+            Class<?> outer = Class.forName(\"OuterTest2\");\n+            fail(\"Should not reach here\");\n+        } catch (ClassFormatError err) {\n+            System.out.println(err.getMessage());\n+            assertEquals(err.getMessage(), msg2);\n+        } catch (ClassNotFoundException cfne) {\n+            cfne.printStackTrace();\n+            fail(\"Should not reach here\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/InnerClassesAttr\/TestInnerClassAccessFlagErrorMessage.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"}]}