{"files":[{"patch":"@@ -1725,1 +1725,3 @@\n-  if (t_oop != nullptr && (t_oop->is_known_instance_field() || load_boxed_values)) {\n+  if (region == mem->in(0) \/\/ Avoid infinite split\n+      && t_oop != nullptr\n+      && (t_oop->is_known_instance_field() || load_boxed_values)) {\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8340602\n+ * @requires vm.compiler2.enabled & vm.gc.Parallel\n+ * @summary C2: LoadNode::split_through_phi might exhaust nodes in case of base_is_phi\n+ * @run main\/othervm -Xbatch -XX:+UseParallelGC\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure\n+ *                   compiler.loopopts.TestInfiniteSplitInCaseOfBaseIsPhi\n+ *\/\n+\n+package compiler.loopopts;\n+\n+import java.util.Random;\n+\n+public class TestInfiniteSplitInCaseOfBaseIsPhi {\n+\n+    static class Obj {\n+        final Integer[] array;\n+        final int start;\n+        final int end;\n+\n+        Integer max = Integer.MIN_VALUE;\n+\n+        Obj(Integer[] array, int start, int end) {\n+            this.array = array;\n+            this.start = start;\n+            this.end = end;\n+        }\n+\n+        Integer cmp(Integer i, Integer j) {\n+            return i > j ? i : j;\n+        }\n+\n+        void calc() {\n+            int i = start;\n+            do {\n+                max = cmp(max, array[i]);\n+                i++;\n+            } while (i < end);\n+        }\n+    }\n+\n+    static final int LEN = 2000;\n+    static final Integer[] a = new Integer[LEN];\n+    static {\n+        Random r = new Random();\n+        for (int i = 0; i < LEN; i++) {\n+            a[i] = Integer.valueOf(r.nextInt());\n+        }\n+    }\n+\n+    public static void main (String[] args) {\n+        Obj o = new Obj(a, 0, LEN);\n+        for (int i = 0; i < 1000; i++) {\n+            o.calc();\n+        }\n+        System.out.println(o.max);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestInfiniteSplitInCaseOfBaseIsPhi.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}