{"files":[{"patch":"@@ -545,0 +545,1 @@\n+ -runtime\/cds\/appcds\/methodHandles \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,136 +0,0 @@\n-#!\/bin\/bash\n-# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-echo \"\/\/ --- start auto-generated\"\n-\n-testnames=( MethodHandlesGeneralTest  MethodHandlesAsCollectorTest MethodHandlesCastFailureTest MethodHandlesInvokersTest MethodHandlesPermuteArgumentsTest MethodHandlesSpreadArgumentsTest )\n-name_suffix='.java'\n-\n-for i in \"${testnames[@]}\"\n-do\n-    fname=\"$i$name_suffix\"\n-    cat << EOF > $fname\n-\/*\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\/\/ this file is auto-generated by $0. Do not edit manually.\n-\n-\/*\n- * @test\n- * @summary Run the $fname test in dynamic CDS archive mode.\n- * @requires vm.cds & vm.compMode != \"Xcomp\"\n- * @comment Some of the tests run excessively slowly with -Xcomp. The original\n- *          tests aren't executed with -Xcomp in the CI pipeline, so let's exclude\n- *          the generated tests from -Xcomp execution as well.\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n- *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\n- *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\n- * @compile ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesTest.java\n- *        ..\/..\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/Utils.java\n- *        ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/$fname\n- *        ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/remote\/RemoteExample.java\n- *        ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/CodeCacheOverflowProcessor.java\n- *        ..\/test-classes\/TestMHApp.java\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run junit\/othervm\/timeout=480 -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. $i\n- *\/\n-\n-import org.junit.Test;\n-\n-import java.io.File;\n-import java.nio.file.Path;\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-public class $i extends DynamicArchiveTestBase {\n-    @Test\n-    public void test() throws Exception {\n-        runTest($i::testImpl);\n-    }\n-\n-    private static final String classDir = System.getProperty(\"test.classes\");\n-    private static final String mainClass = \"TestMHApp\";\n-    private static final String javaClassPath = System.getProperty(\"java.class.path\");\n-    private static final String ps = System.getProperty(\"path.separator\");\n-    private static final String testPackageName = \"test.java.lang.invoke\";\n-    private static final String testClassName = \"$i\";\n-    private static final String loggingOpts = \"-Xlog:cds,cds+dynamic=debug,class+load=trace\";\n-    private static final String lambdaLoadedFromArchive =\n-        \".class.load. test.java.lang.invoke.$i[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file.*(top)\";\n-\n-    static void checkError(OutputAnalyzer output) throws Exception {\n-        if (testClassName.equals(\"MethodHandlesInvokersTest\")) {\n-            output.shouldNotContain(\"Failed to generate LambdaForm holder classes. Was the base archive generated with an outdated classlist?\");\n-        }\n-    }\n-\n-    static void testImpl() throws Exception {\n-        String topArchiveName = getNewArchiveName();\n-        String appJar = JarBuilder.build(\"MH\", new File(classDir), null);\n-        \/\/ Disable VerifyDpendencies when running with debug build because\n-        \/\/ the test requires a lot more time to execute with the option enabled.\n-        String verifyOpt =\n-            Platform.isDebugBuild() ? \"-XX:-VerifyDependencies\" : \"-showversion\";\n-\n-        String junitJar = Path.of(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI()).toString();\n-        String jars = appJar + ps + junitJar;\n-        String className = testPackageName + \".\" + testClassName;\n-\n-        dump(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n-            .assertNormalExit(output -> checkError(output))\n-            .assertNormalExit(output -> {\n-                    output.shouldContain(\"Written dynamic archive 0x\");\n-                });\n-\n-        run(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n-            .assertNormalExit(output -> {\n-                    output.shouldMatch(lambdaLoadedFromArchive)\n-                          .shouldHaveExitValue(0);\n-                });\n-\n-    }\n-}\n-EOF\n-done\n-echo \"\/\/ --- end auto-generated\"\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/methodHandles\/CDSMHTest_generate.sh","additions":0,"deletions":136,"binary":false,"changes":136,"status":"deleted"},{"patch":"@@ -1,101 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\/\/ this file is auto-generated by CDSMHTest_generate.sh. Do not edit manually.\n-\n-\/*\n- * @test\n- * @summary Run the MethodHandlesAsCollectorTest.java test in dynamic CDS archive mode.\n- * @requires vm.cds & vm.compMode != \"Xcomp\"\n- * @comment Some of the tests run excessively slowly with -Xcomp. The original\n- *          tests aren't executed with -Xcomp in the CI pipeline, so let's exclude\n- *          the generated tests from -Xcomp execution as well.\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n- *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\n- *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\n- * @compile ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesTest.java\n- *        ..\/..\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/Utils.java\n- *        ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesAsCollectorTest.java\n- *        ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/remote\/RemoteExample.java\n- *        ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/CodeCacheOverflowProcessor.java\n- *        ..\/test-classes\/TestMHApp.java\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run junit\/othervm\/timeout=480 -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. MethodHandlesAsCollectorTest\n- *\/\n-\n-import org.junit.Test;\n-\n-import java.io.File;\n-import java.nio.file.Path;\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-public class MethodHandlesAsCollectorTest extends DynamicArchiveTestBase {\n-    @Test\n-    public void test() throws Exception {\n-        runTest(MethodHandlesAsCollectorTest::testImpl);\n-    }\n-\n-    private static final String classDir = System.getProperty(\"test.classes\");\n-    private static final String mainClass = \"TestMHApp\";\n-    private static final String javaClassPath = System.getProperty(\"java.class.path\");\n-    private static final String ps = System.getProperty(\"path.separator\");\n-    private static final String testPackageName = \"test.java.lang.invoke\";\n-    private static final String testClassName = \"MethodHandlesAsCollectorTest\";\n-    private static final String loggingOpts = \"-Xlog:cds,cds+dynamic=debug,class+load=trace\";\n-    private static final String lambdaLoadedFromArchive =\n-        \".class.load. test.java.lang.invoke.MethodHandlesAsCollectorTest[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file.*(top)\";\n-\n-    static void checkError(OutputAnalyzer output) throws Exception {\n-        if (testClassName.equals(\"MethodHandlesInvokersTest\")) {\n-            output.shouldNotContain(\"Failed to generate LambdaForm holder classes. Was the base archive generated with an outdated classlist?\");\n-        }\n-    }\n-\n-    static void testImpl() throws Exception {\n-        String topArchiveName = getNewArchiveName();\n-        String appJar = JarBuilder.build(\"MH\", new File(classDir), null);\n-        \/\/ Disable VerifyDpendencies when running with debug build because\n-        \/\/ the test requires a lot more time to execute with the option enabled.\n-        String verifyOpt =\n-            Platform.isDebugBuild() ? \"-XX:-VerifyDependencies\" : \"-showversion\";\n-\n-        String junitJar = Path.of(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI()).toString();\n-        String jars = appJar + ps + junitJar;\n-        String className = testPackageName + \".\" + testClassName;\n-\n-        dump(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n-            .assertNormalExit(output -> checkError(output))\n-            .assertNormalExit(output -> {\n-                    output.shouldContain(\"Written dynamic archive 0x\");\n-                });\n-\n-        run(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n-            .assertNormalExit(output -> {\n-                    output.shouldMatch(lambdaLoadedFromArchive)\n-                          .shouldHaveExitValue(0);\n-                });\n-\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/methodHandles\/MethodHandlesAsCollectorTest.java","additions":0,"deletions":101,"binary":false,"changes":101,"status":"deleted"},{"patch":"@@ -1,101 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\/\/ this file is auto-generated by CDSMHTest_generate.sh. Do not edit manually.\n-\n-\/*\n- * @test\n- * @summary Run the MethodHandlesCastFailureTest.java test in dynamic CDS archive mode.\n- * @requires vm.cds & vm.compMode != \"Xcomp\"\n- * @comment Some of the tests run excessively slowly with -Xcomp. The original\n- *          tests aren't executed with -Xcomp in the CI pipeline, so let's exclude\n- *          the generated tests from -Xcomp execution as well.\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n- *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\n- *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\n- * @compile ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesTest.java\n- *        ..\/..\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/Utils.java\n- *        ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesCastFailureTest.java\n- *        ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/remote\/RemoteExample.java\n- *        ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/CodeCacheOverflowProcessor.java\n- *        ..\/test-classes\/TestMHApp.java\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run junit\/othervm\/timeout=480 -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. MethodHandlesCastFailureTest\n- *\/\n-\n-import org.junit.Test;\n-\n-import java.io.File;\n-import java.nio.file.Path;\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-public class MethodHandlesCastFailureTest extends DynamicArchiveTestBase {\n-    @Test\n-    public void test() throws Exception {\n-        runTest(MethodHandlesCastFailureTest::testImpl);\n-    }\n-\n-    private static final String classDir = System.getProperty(\"test.classes\");\n-    private static final String mainClass = \"TestMHApp\";\n-    private static final String javaClassPath = System.getProperty(\"java.class.path\");\n-    private static final String ps = System.getProperty(\"path.separator\");\n-    private static final String testPackageName = \"test.java.lang.invoke\";\n-    private static final String testClassName = \"MethodHandlesCastFailureTest\";\n-    private static final String loggingOpts = \"-Xlog:cds,cds+dynamic=debug,class+load=trace\";\n-    private static final String lambdaLoadedFromArchive =\n-        \".class.load. test.java.lang.invoke.MethodHandlesCastFailureTest[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file.*(top)\";\n-\n-    static void checkError(OutputAnalyzer output) throws Exception {\n-        if (testClassName.equals(\"MethodHandlesInvokersTest\")) {\n-            output.shouldNotContain(\"Failed to generate LambdaForm holder classes. Was the base archive generated with an outdated classlist?\");\n-        }\n-    }\n-\n-    static void testImpl() throws Exception {\n-        String topArchiveName = getNewArchiveName();\n-        String appJar = JarBuilder.build(\"MH\", new File(classDir), null);\n-        \/\/ Disable VerifyDpendencies when running with debug build because\n-        \/\/ the test requires a lot more time to execute with the option enabled.\n-        String verifyOpt =\n-            Platform.isDebugBuild() ? \"-XX:-VerifyDependencies\" : \"-showversion\";\n-\n-        String junitJar = Path.of(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI()).toString();\n-        String jars = appJar + ps + junitJar;\n-        String className = testPackageName + \".\" + testClassName;\n-\n-        dump(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n-            .assertNormalExit(output -> checkError(output))\n-            .assertNormalExit(output -> {\n-                    output.shouldContain(\"Written dynamic archive 0x\");\n-                });\n-\n-        run(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n-            .assertNormalExit(output -> {\n-                    output.shouldMatch(lambdaLoadedFromArchive)\n-                          .shouldHaveExitValue(0);\n-                });\n-\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/methodHandles\/MethodHandlesCastFailureTest.java","additions":0,"deletions":101,"binary":false,"changes":101,"status":"deleted"},{"patch":"@@ -1,101 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\/\/ this file is auto-generated by CDSMHTest_generate.sh. Do not edit manually.\n-\n-\/*\n- * @test\n- * @summary Run the MethodHandlesGeneralTest.java test in dynamic CDS archive mode.\n- * @requires vm.cds & vm.compMode != \"Xcomp\"\n- * @comment Some of the tests run excessively slowly with -Xcomp. The original\n- *          tests aren't executed with -Xcomp in the CI pipeline, so let's exclude\n- *          the generated tests from -Xcomp execution as well.\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n- *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\n- *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\n- * @compile ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesTest.java\n- *        ..\/..\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/Utils.java\n- *        ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesGeneralTest.java\n- *        ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/remote\/RemoteExample.java\n- *        ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/CodeCacheOverflowProcessor.java\n- *        ..\/test-classes\/TestMHApp.java\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run junit\/othervm\/timeout=480 -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. MethodHandlesGeneralTest\n- *\/\n-\n-import org.junit.Test;\n-\n-import java.io.File;\n-import java.nio.file.Path;\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-public class MethodHandlesGeneralTest extends DynamicArchiveTestBase {\n-    @Test\n-    public void test() throws Exception {\n-        runTest(MethodHandlesGeneralTest::testImpl);\n-    }\n-\n-    private static final String classDir = System.getProperty(\"test.classes\");\n-    private static final String mainClass = \"TestMHApp\";\n-    private static final String javaClassPath = System.getProperty(\"java.class.path\");\n-    private static final String ps = System.getProperty(\"path.separator\");\n-    private static final String testPackageName = \"test.java.lang.invoke\";\n-    private static final String testClassName = \"MethodHandlesGeneralTest\";\n-    private static final String loggingOpts = \"-Xlog:cds,cds+dynamic=debug,class+load=trace\";\n-    private static final String lambdaLoadedFromArchive =\n-        \".class.load. test.java.lang.invoke.MethodHandlesGeneralTest[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file.*(top)\";\n-\n-    static void checkError(OutputAnalyzer output) throws Exception {\n-        if (testClassName.equals(\"MethodHandlesInvokersTest\")) {\n-            output.shouldNotContain(\"Failed to generate LambdaForm holder classes. Was the base archive generated with an outdated classlist?\");\n-        }\n-    }\n-\n-    static void testImpl() throws Exception {\n-        String topArchiveName = getNewArchiveName();\n-        String appJar = JarBuilder.build(\"MH\", new File(classDir), null);\n-        \/\/ Disable VerifyDpendencies when running with debug build because\n-        \/\/ the test requires a lot more time to execute with the option enabled.\n-        String verifyOpt =\n-            Platform.isDebugBuild() ? \"-XX:-VerifyDependencies\" : \"-showversion\";\n-\n-        String junitJar = Path.of(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI()).toString();\n-        String jars = appJar + ps + junitJar;\n-        String className = testPackageName + \".\" + testClassName;\n-\n-        dump(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n-            .assertNormalExit(output -> checkError(output))\n-            .assertNormalExit(output -> {\n-                    output.shouldContain(\"Written dynamic archive 0x\");\n-                });\n-\n-        run(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n-            .assertNormalExit(output -> {\n-                    output.shouldMatch(lambdaLoadedFromArchive)\n-                          .shouldHaveExitValue(0);\n-                });\n-\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/methodHandles\/MethodHandlesGeneralTest.java","additions":0,"deletions":101,"binary":false,"changes":101,"status":"deleted"},{"patch":"@@ -1,101 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\/\/ this file is auto-generated by CDSMHTest_generate.sh. Do not edit manually.\n-\n-\/*\n- * @test\n- * @summary Run the MethodHandlesInvokersTest.java test in dynamic CDS archive mode.\n- * @requires vm.cds & vm.compMode != \"Xcomp\"\n- * @comment Some of the tests run excessively slowly with -Xcomp. The original\n- *          tests aren't executed with -Xcomp in the CI pipeline, so let's exclude\n- *          the generated tests from -Xcomp execution as well.\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n- *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\n- *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\n- * @compile ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesTest.java\n- *        ..\/..\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/Utils.java\n- *        ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesInvokersTest.java\n- *        ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/remote\/RemoteExample.java\n- *        ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/CodeCacheOverflowProcessor.java\n- *        ..\/test-classes\/TestMHApp.java\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run junit\/othervm\/timeout=480 -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. MethodHandlesInvokersTest\n- *\/\n-\n-import org.junit.Test;\n-\n-import java.io.File;\n-import java.nio.file.Path;\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-public class MethodHandlesInvokersTest extends DynamicArchiveTestBase {\n-    @Test\n-    public void test() throws Exception {\n-        runTest(MethodHandlesInvokersTest::testImpl);\n-    }\n-\n-    private static final String classDir = System.getProperty(\"test.classes\");\n-    private static final String mainClass = \"TestMHApp\";\n-    private static final String javaClassPath = System.getProperty(\"java.class.path\");\n-    private static final String ps = System.getProperty(\"path.separator\");\n-    private static final String testPackageName = \"test.java.lang.invoke\";\n-    private static final String testClassName = \"MethodHandlesInvokersTest\";\n-    private static final String loggingOpts = \"-Xlog:cds,cds+dynamic=debug,class+load=trace\";\n-    private static final String lambdaLoadedFromArchive =\n-        \".class.load. test.java.lang.invoke.MethodHandlesInvokersTest[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file.*(top)\";\n-\n-    static void checkError(OutputAnalyzer output) throws Exception {\n-        if (testClassName.equals(\"MethodHandlesInvokersTest\")) {\n-            output.shouldNotContain(\"Failed to generate LambdaForm holder classes. Was the base archive generated with an outdated classlist?\");\n-        }\n-    }\n-\n-    static void testImpl() throws Exception {\n-        String topArchiveName = getNewArchiveName();\n-        String appJar = JarBuilder.build(\"MH\", new File(classDir), null);\n-        \/\/ Disable VerifyDpendencies when running with debug build because\n-        \/\/ the test requires a lot more time to execute with the option enabled.\n-        String verifyOpt =\n-            Platform.isDebugBuild() ? \"-XX:-VerifyDependencies\" : \"-showversion\";\n-\n-        String junitJar = Path.of(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI()).toString();\n-        String jars = appJar + ps + junitJar;\n-        String className = testPackageName + \".\" + testClassName;\n-\n-        dump(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n-            .assertNormalExit(output -> checkError(output))\n-            .assertNormalExit(output -> {\n-                    output.shouldContain(\"Written dynamic archive 0x\");\n-                });\n-\n-        run(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n-            .assertNormalExit(output -> {\n-                    output.shouldMatch(lambdaLoadedFromArchive)\n-                          .shouldHaveExitValue(0);\n-                });\n-\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/methodHandles\/MethodHandlesInvokersTest.java","additions":0,"deletions":101,"binary":false,"changes":101,"status":"deleted"},{"patch":"@@ -1,101 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\/\/ this file is auto-generated by CDSMHTest_generate.sh. Do not edit manually.\n-\n-\/*\n- * @test\n- * @summary Run the MethodHandlesPermuteArgumentsTest.java test in dynamic CDS archive mode.\n- * @requires vm.cds & vm.compMode != \"Xcomp\"\n- * @comment Some of the tests run excessively slowly with -Xcomp. The original\n- *          tests aren't executed with -Xcomp in the CI pipeline, so let's exclude\n- *          the generated tests from -Xcomp execution as well.\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n- *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\n- *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\n- * @compile ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesTest.java\n- *        ..\/..\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/Utils.java\n- *        ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesPermuteArgumentsTest.java\n- *        ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/remote\/RemoteExample.java\n- *        ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/CodeCacheOverflowProcessor.java\n- *        ..\/test-classes\/TestMHApp.java\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run junit\/othervm\/timeout=480 -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. MethodHandlesPermuteArgumentsTest\n- *\/\n-\n-import org.junit.Test;\n-\n-import java.io.File;\n-import java.nio.file.Path;\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-public class MethodHandlesPermuteArgumentsTest extends DynamicArchiveTestBase {\n-    @Test\n-    public void test() throws Exception {\n-        runTest(MethodHandlesPermuteArgumentsTest::testImpl);\n-    }\n-\n-    private static final String classDir = System.getProperty(\"test.classes\");\n-    private static final String mainClass = \"TestMHApp\";\n-    private static final String javaClassPath = System.getProperty(\"java.class.path\");\n-    private static final String ps = System.getProperty(\"path.separator\");\n-    private static final String testPackageName = \"test.java.lang.invoke\";\n-    private static final String testClassName = \"MethodHandlesPermuteArgumentsTest\";\n-    private static final String loggingOpts = \"-Xlog:cds,cds+dynamic=debug,class+load=trace\";\n-    private static final String lambdaLoadedFromArchive =\n-        \".class.load. test.java.lang.invoke.MethodHandlesPermuteArgumentsTest[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file.*(top)\";\n-\n-    static void checkError(OutputAnalyzer output) throws Exception {\n-        if (testClassName.equals(\"MethodHandlesInvokersTest\")) {\n-            output.shouldNotContain(\"Failed to generate LambdaForm holder classes. Was the base archive generated with an outdated classlist?\");\n-        }\n-    }\n-\n-    static void testImpl() throws Exception {\n-        String topArchiveName = getNewArchiveName();\n-        String appJar = JarBuilder.build(\"MH\", new File(classDir), null);\n-        \/\/ Disable VerifyDpendencies when running with debug build because\n-        \/\/ the test requires a lot more time to execute with the option enabled.\n-        String verifyOpt =\n-            Platform.isDebugBuild() ? \"-XX:-VerifyDependencies\" : \"-showversion\";\n-\n-        String junitJar = Path.of(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI()).toString();\n-        String jars = appJar + ps + junitJar;\n-        String className = testPackageName + \".\" + testClassName;\n-\n-        dump(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n-            .assertNormalExit(output -> checkError(output))\n-            .assertNormalExit(output -> {\n-                    output.shouldContain(\"Written dynamic archive 0x\");\n-                });\n-\n-        run(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n-            .assertNormalExit(output -> {\n-                    output.shouldMatch(lambdaLoadedFromArchive)\n-                          .shouldHaveExitValue(0);\n-                });\n-\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/methodHandles\/MethodHandlesPermuteArgumentsTest.java","additions":0,"deletions":101,"binary":false,"changes":101,"status":"deleted"},{"patch":"@@ -1,101 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\/\/ this file is auto-generated by CDSMHTest_generate.sh. Do not edit manually.\n-\n-\/*\n- * @test\n- * @summary Run the MethodHandlesSpreadArgumentsTest.java test in dynamic CDS archive mode.\n- * @requires vm.cds & vm.compMode != \"Xcomp\"\n- * @comment Some of the tests run excessively slowly with -Xcomp. The original\n- *          tests aren't executed with -Xcomp in the CI pipeline, so let's exclude\n- *          the generated tests from -Xcomp execution as well.\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n- *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\n- *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\n- * @compile ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesTest.java\n- *        ..\/..\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/Utils.java\n- *        ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesSpreadArgumentsTest.java\n- *        ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/remote\/RemoteExample.java\n- *        ..\/..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/CodeCacheOverflowProcessor.java\n- *        ..\/test-classes\/TestMHApp.java\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run junit\/othervm\/timeout=480 -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. MethodHandlesSpreadArgumentsTest\n- *\/\n-\n-import org.junit.Test;\n-\n-import java.io.File;\n-import java.nio.file.Path;\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-public class MethodHandlesSpreadArgumentsTest extends DynamicArchiveTestBase {\n-    @Test\n-    public void test() throws Exception {\n-        runTest(MethodHandlesSpreadArgumentsTest::testImpl);\n-    }\n-\n-    private static final String classDir = System.getProperty(\"test.classes\");\n-    private static final String mainClass = \"TestMHApp\";\n-    private static final String javaClassPath = System.getProperty(\"java.class.path\");\n-    private static final String ps = System.getProperty(\"path.separator\");\n-    private static final String testPackageName = \"test.java.lang.invoke\";\n-    private static final String testClassName = \"MethodHandlesSpreadArgumentsTest\";\n-    private static final String loggingOpts = \"-Xlog:cds,cds+dynamic=debug,class+load=trace\";\n-    private static final String lambdaLoadedFromArchive =\n-        \".class.load. test.java.lang.invoke.MethodHandlesSpreadArgumentsTest[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file.*(top)\";\n-\n-    static void checkError(OutputAnalyzer output) throws Exception {\n-        if (testClassName.equals(\"MethodHandlesInvokersTest\")) {\n-            output.shouldNotContain(\"Failed to generate LambdaForm holder classes. Was the base archive generated with an outdated classlist?\");\n-        }\n-    }\n-\n-    static void testImpl() throws Exception {\n-        String topArchiveName = getNewArchiveName();\n-        String appJar = JarBuilder.build(\"MH\", new File(classDir), null);\n-        \/\/ Disable VerifyDpendencies when running with debug build because\n-        \/\/ the test requires a lot more time to execute with the option enabled.\n-        String verifyOpt =\n-            Platform.isDebugBuild() ? \"-XX:-VerifyDependencies\" : \"-showversion\";\n-\n-        String junitJar = Path.of(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI()).toString();\n-        String jars = appJar + ps + junitJar;\n-        String className = testPackageName + \".\" + testClassName;\n-\n-        dump(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n-            .assertNormalExit(output -> checkError(output))\n-            .assertNormalExit(output -> {\n-                    output.shouldContain(\"Written dynamic archive 0x\");\n-                });\n-\n-        run(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n-            .assertNormalExit(output -> {\n-                    output.shouldMatch(lambdaLoadedFromArchive)\n-                          .shouldHaveExitValue(0);\n-                });\n-\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/methodHandles\/MethodHandlesSpreadArgumentsTest.java","additions":0,"deletions":101,"binary":false,"changes":101,"status":"deleted"},{"patch":"@@ -1,77 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-import java.lang.annotation.Annotation;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.util.Arrays;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-public class TestMHApp {\n-    public static void main(String args[]) throws Exception {\n-        try {\n-            Class<?> testClass = Class.forName(args[0]);\n-            System.out.println(testClass);\n-            Object obj = testClass.newInstance();\n-            final List<Method> allMethods = new ArrayList<Method>(Arrays.asList(testClass.getDeclaredMethods()));\n-            for (final Method method : allMethods) {\n-                \/\/System.out.println(method.toString());\n-                method.setAccessible(true);\n-                Annotation[] annotations = null;\n-                try {\n-                    annotations = method.getDeclaredAnnotations();\n-                } catch (Throwable th) {\n-                    System.out.println(\"skipping method\");\n-                    continue;\n-                }\n-                boolean isTest = false;\n-                for (Annotation annotation : annotations) {\n-                    String annotationString = annotation.toString();\n-                    System.out.println(\"     annotation: \" + annotationString);\n-                    if (annotationString.startsWith(\"@org.junit.Test\")) {\n-                        isTest = true;\n-                    }\n-                }\n-                if (isTest) {\n-                    System.out.println(\"    invoking method: \" + method.getName());\n-                    try {\n-                        method.invoke(obj);\n-                    } catch (IllegalAccessException iae) {\n-                        System.out.println(\"Got IllegalAccessException!!!\");\n-                        System.out.println(iae.getCause());\n-                    } catch (InvocationTargetException ite) {\n-                        System.out.println(\"Got InvocationTargetException!!!\");\n-                        \/\/System.out.println(ite.getCause());\n-                        throw ite;\n-                    }\n-               }\n-            }\n-        } catch (ClassNotFoundException cnfe) {\n-            System.out.println(\"Class not found: \" + args[0]);\n-        } catch (java.lang.IllegalAccessError iae) {\n-            System.out.println(\"Skipping test: \" + args[0]);\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\/TestMHApp.java","additions":0,"deletions":77,"binary":false,"changes":77,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,8 @@\n-echo \"\/\/ --- start auto-generated\"\n+testnames=\n+\n+testnames=\"$testnames MethodHandlesAsCollectorTest\"\n+testnames=\"$testnames MethodHandlesCastFailureTest\"\n+testnames=\"$testnames MethodHandlesGeneralTest\"\n+testnames=\"$testnames MethodHandlesInvokersTest\"\n+testnames=\"$testnames MethodHandlesPermuteArgumentsTest\"\n+testnames=\"$testnames MethodHandlesSpreadArgumentsTest\"\n@@ -26,1 +33,0 @@\n-testnames=( MethodHandlesGeneralTest  MethodHandlesAsCollectorTest MethodHandlesCastFailureTest MethodHandlesInvokersTest MethodHandlesPermuteArgumentsTest MethodHandlesSpreadArgumentsTest )\n@@ -29,1 +35,1 @@\n-for i in \"${testnames[@]}\"\n+for i in ${testnames}\n@@ -34,1 +40,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,0 +64,6 @@\n+EOF\n+\n+for w in AOT DYNAMIC STATIC; do\n+    id=$(echo \"$w\" | awk '{print tolower($0)}')\n+\n+    cat << EOF >> $fname\n@@ -59,2 +71,2 @@\n- * @test\n- * @summary Run the $fname test in static CDS archive mode.\n+ * @test id=$id\n+ * @summary Run the $fname test in CDSAppTester::$w workflow.\n@@ -66,1 +78,0 @@\n- *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\n@@ -72,1 +83,5 @@\n- *        ..\/dynamicArchive\/test-classes\/TestMHApp.java\n+EOF\n+\n+    if test \"$w\" == \"DYNAMIC\"; then\n+\n+        cat << EOF >> $fname\n@@ -75,1 +90,1 @@\n- * @run junit\/othervm\/timeout=480 -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. $i\n+ * @run junit\/othervm\/timeout=480 -Dcds.app.tester.workflow=$w -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. $i\n@@ -77,0 +92,6 @@\n+EOF\n+    else\n+        cat << EOF >> $fname\n+ * @run junit\/othervm\/timeout=480 -Dcds.app.tester.workflow=$w $i\n+ *\/\n+EOF\n@@ -78,4 +99,2 @@\n-import org.junit.Test;\n-\n-import java.io.File;\n-import java.nio.file.Path;\n+    fi\n+done\n@@ -83,4 +102,2 @@\n-import jdk.test.lib.cds.CDSOptions;\n-import jdk.test.lib.cds.CDSTestUtils;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.Platform;\n+    cat << EOF >> $fname\n+import org.junit.Test;\n@@ -91,47 +108,1 @@\n-        testImpl();\n-    }\n-\n-    private static final String classDir = System.getProperty(\"test.classes\");\n-    private static final String mainClass = \"TestMHApp\";\n-    private static final String javaClassPath = System.getProperty(\"java.class.path\");\n-    private static final String ps = System.getProperty(\"path.separator\");\n-    private static final String testPackageName = \"test.java.lang.invoke\";\n-    private static final String testClassName = \"$i\";\n-\n-    static void testImpl() throws Exception {\n-        String appJar = JarBuilder.build(\"MH\", new File(classDir), null);\n-        String classList = testClassName + \".list\";\n-        String archiveName = testClassName + \".jsa\";\n-        \/\/ Disable VerifyDpendencies when running with debug build because\n-        \/\/ the test requires a lot more time to execute with the option enabled.\n-        String verifyOpt =\n-            Platform.isDebugBuild() ? \"-XX:-VerifyDependencies\" : \"-showversion\";\n-\n-        String junitJar = Path.of(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI()).toString();\n-\n-        String jars = appJar + ps + junitJar;\n-\n-        \/\/ dump class list\n-        CDSTestUtils.dumpClassList(classList, \"-cp\", jars, verifyOpt, mainClass,\n-                                   testPackageName + \".\" + testClassName);\n-\n-        \/\/ create archive with the class list\n-        CDSOptions opts = (new CDSOptions())\n-            .addPrefix(\"-XX:ExtraSharedClassListFile=\" + classList,\n-                       \"-cp\", jars,\n-                       \"-Xlog:class+load,cds\")\n-            .setArchiveName(archiveName);\n-        OutputAnalyzer output = CDSTestUtils.createArchiveAndCheck(opts);\n-        if (testClassName.equals(\"MethodHandlesInvokersTest\")) {\n-            output.shouldNotContain(\"Failed to generate LambdaForm holder classes. Is your classlist out of date?\");\n-        }\n-\n-        \/\/ run with archive\n-        CDSOptions runOpts = (new CDSOptions())\n-            .addPrefix(\"-cp\", jars, \"-Xlog:class+load,cds=debug\", verifyOpt)\n-            .setArchiveName(archiveName)\n-            .setUseVersion(false)\n-            .addSuffix(mainClass, testPackageName + \".\" + testClassName);\n-        output = CDSTestUtils.runWithArchive(runOpts);\n-        output.shouldMatch(\".class.load. test.java.lang.invoke.$i[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file\")\n-              .shouldHaveExitValue(0);\n+        JDKMethodHandlesTestRunner.test($i.class.getName());\n@@ -142,1 +113,0 @@\n-echo \"\/\/ --- end auto-generated\"\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/methodHandles\/CDSMHTest_generate.sh","additions":36,"deletions":66,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -0,0 +1,148 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import jdk.test.lib.cds.CDSAppTester;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.Platform;\n+\n+import org.junit.Test;\n+\n+\/\/ This class is for running the ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandles*java tests\n+\/\/ using CDSAppTester\n+public class JDKMethodHandlesTestRunner {\n+    private static final String classDir = System.getProperty(\"test.classes\");\n+    private static final String mainClass = \"TestMHApp\";\n+    private static final String javaClassPath = System.getProperty(\"java.class.path\");\n+    private static final String ps = System.getProperty(\"path.separator\");\n+    private static final String testPackageName = \"test.java.lang.invoke\";\n+\n+    public static void test(String testClassName) throws Exception {\n+        String appJar = JarBuilder.build(\"MH\", new File(classDir), null);\n+        String classList = testClassName + \".list\";\n+        String archiveName = testClassName + \".jsa\";\n+        \/\/ Disable VerifyDpendencies when running with debug build because\n+        \/\/ the test requires a lot more time to execute with the option enabled.\n+        String verifyOpt =\n+            Platform.isDebugBuild() ? \"-XX:-VerifyDependencies\" : \"-showversion\";\n+\n+        String junitJar = Path.of(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI()).toString();\n+\n+        String jars = appJar + ps + junitJar;\n+\n+        CDSAppTester tester = new CDSAppTester(testClassName) {\n+                @Override\n+                public String classpath(RunMode runMode) {\n+                    return jars;\n+                }\n+\n+                @Override\n+                public String[] vmArgs(RunMode runMode) {\n+                    if (runMode.isProductionRun()) {\n+                        return new String[] {\n+                            \"-Xlog:class+load,cds=debug\",\n+                            verifyOpt,\n+                        };\n+                    } else {\n+                        return new String[] {\n+                            verifyOpt,\n+                        };\n+                    }\n+                }\n+\n+                @Override\n+                public String[] appCommandLine(RunMode runMode) {\n+                    return new String[] {\n+                        mainClass,\n+                        testPackageName + \".\" + testClassName,\n+                    };\n+                }\n+\n+                @Override\n+                public void checkExecution(OutputAnalyzer out, RunMode runMode) throws Exception {\n+                    out.shouldHaveExitValue(0);\n+                    if (runMode.isProductionRun()) {\n+                        out.shouldMatch(\".class.load. test.java.lang.invoke.\" + testClassName +\n+                                        \"[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file\");\n+                    }\n+                }\n+            };\n+\n+        String workflow = System.getProperty(\"cds.app.tester.workflow\");\n+        tester.run(workflow);\n+    }\n+}\n+\n+class TestMHApp {\n+    public static void main(String args[]) throws Exception {\n+        try {\n+            Class<?> testClass = Class.forName(args[0]);\n+            System.out.println(testClass);\n+            Object obj = testClass.newInstance();\n+            final List<Method> allMethods = new ArrayList<Method>(Arrays.asList(testClass.getDeclaredMethods()));\n+            for (final Method method : allMethods) {\n+                method.setAccessible(true);\n+                Annotation[] annotations = null;\n+                try {\n+                    annotations = method.getDeclaredAnnotations();\n+                } catch (Throwable th) {\n+                    System.out.println(\"skipping method\");\n+                    continue;\n+                }\n+                boolean isTest = false;\n+                for (Annotation annotation : annotations) {\n+                    String annotationString = annotation.toString();\n+                    System.out.println(\"     annotation: \" + annotationString);\n+                    if (annotationString.startsWith(\"@org.junit.Test\")) {\n+                        isTest = true;\n+                    }\n+                }\n+                if (isTest) {\n+                    System.out.println(\"    invoking method: \" + method.getName());\n+                    try {\n+                        method.invoke(obj);\n+                    } catch (IllegalAccessException iae) {\n+                        System.out.println(\"Got IllegalAccessException!!!\");\n+                        System.out.println(iae.getCause());\n+                    } catch (InvocationTargetException ite) {\n+                        System.out.println(\"Got InvocationTargetException!!!\");\n+                        throw ite;\n+                    }\n+               }\n+            }\n+        } catch (ClassNotFoundException cnfe) {\n+            System.out.println(\"Class not found: \" + args[0]);\n+        } catch (java.lang.IllegalAccessError iae) {\n+            System.out.println(\"Skipping test: \" + args[0]);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/methodHandles\/JDKMethodHandlesTestRunner.java","additions":148,"deletions":0,"binary":false,"changes":148,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,17 @@\n- * @test\n- * @summary Run the MethodHandlesAsCollectorTest.java test in static CDS archive mode.\n+ * @test id=aot\n+ * @summary Run the MethodHandlesAsCollectorTest.java test in CDSAppTester::AOT workflow.\n+ * @requires vm.cds & vm.compMode != \"Xcomp\"\n+ * @comment Some of the tests run excessively slowly with -Xcomp. The original\n+ *          tests aren't executed with -Xcomp in the CI pipeline, so let's exclude\n+ *          the generated tests from -Xcomp execution as well.\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesTest.java\n+ *        ..\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/Utils.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesAsCollectorTest.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/remote\/RemoteExample.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/CodeCacheOverflowProcessor.java\n+ * @run junit\/othervm\/timeout=480 -Dcds.app.tester.workflow=AOT MethodHandlesAsCollectorTest\n+ *\/\n+\/*\n+ * @test id=dynamic\n+ * @summary Run the MethodHandlesAsCollectorTest.java test in CDSAppTester::DYNAMIC workflow.\n@@ -34,1 +49,0 @@\n- *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\n@@ -40,1 +54,0 @@\n- *        ..\/dynamicArchive\/test-classes\/TestMHApp.java\n@@ -43,1 +56,16 @@\n- * @run junit\/othervm\/timeout=480 -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. MethodHandlesAsCollectorTest\n+ * @run junit\/othervm\/timeout=480 -Dcds.app.tester.workflow=DYNAMIC -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. MethodHandlesAsCollectorTest\n+ *\/\n+\/*\n+ * @test id=static\n+ * @summary Run the MethodHandlesAsCollectorTest.java test in CDSAppTester::STATIC workflow.\n+ * @requires vm.cds & vm.compMode != \"Xcomp\"\n+ * @comment Some of the tests run excessively slowly with -Xcomp. The original\n+ *          tests aren't executed with -Xcomp in the CI pipeline, so let's exclude\n+ *          the generated tests from -Xcomp execution as well.\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesTest.java\n+ *        ..\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/Utils.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesAsCollectorTest.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/remote\/RemoteExample.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/CodeCacheOverflowProcessor.java\n+ * @run junit\/othervm\/timeout=480 -Dcds.app.tester.workflow=STATIC MethodHandlesAsCollectorTest\n@@ -45,1 +73,0 @@\n-\n@@ -48,8 +75,0 @@\n-import java.io.File;\n-import java.nio.file.Path;\n-\n-import jdk.test.lib.cds.CDSOptions;\n-import jdk.test.lib.cds.CDSTestUtils;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.Platform;\n-\n@@ -59,47 +78,1 @@\n-        testImpl();\n-    }\n-\n-    private static final String classDir = System.getProperty(\"test.classes\");\n-    private static final String mainClass = \"TestMHApp\";\n-    private static final String javaClassPath = System.getProperty(\"java.class.path\");\n-    private static final String ps = System.getProperty(\"path.separator\");\n-    private static final String testPackageName = \"test.java.lang.invoke\";\n-    private static final String testClassName = \"MethodHandlesAsCollectorTest\";\n-\n-    static void testImpl() throws Exception {\n-        String appJar = JarBuilder.build(\"MH\", new File(classDir), null);\n-        String classList = testClassName + \".list\";\n-        String archiveName = testClassName + \".jsa\";\n-        \/\/ Disable VerifyDpendencies when running with debug build because\n-        \/\/ the test requires a lot more time to execute with the option enabled.\n-        String verifyOpt =\n-            Platform.isDebugBuild() ? \"-XX:-VerifyDependencies\" : \"-showversion\";\n-\n-        String junitJar = Path.of(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI()).toString();\n-\n-        String jars = appJar + ps + junitJar;\n-\n-        \/\/ dump class list\n-        CDSTestUtils.dumpClassList(classList, \"-cp\", jars, verifyOpt, mainClass,\n-                                   testPackageName + \".\" + testClassName);\n-\n-        \/\/ create archive with the class list\n-        CDSOptions opts = (new CDSOptions())\n-            .addPrefix(\"-XX:ExtraSharedClassListFile=\" + classList,\n-                       \"-cp\", jars,\n-                       \"-Xlog:class+load,cds\")\n-            .setArchiveName(archiveName);\n-        OutputAnalyzer output = CDSTestUtils.createArchiveAndCheck(opts);\n-        if (testClassName.equals(\"MethodHandlesInvokersTest\")) {\n-            output.shouldNotContain(\"Failed to generate LambdaForm holder classes. Is your classlist out of date?\");\n-        }\n-\n-        \/\/ run with archive\n-        CDSOptions runOpts = (new CDSOptions())\n-            .addPrefix(\"-cp\", jars, \"-Xlog:class+load,cds=debug\", verifyOpt)\n-            .setArchiveName(archiveName)\n-            .setUseVersion(false)\n-            .addSuffix(mainClass, testPackageName + \".\" + testClassName);\n-        output = CDSTestUtils.runWithArchive(runOpts);\n-        output.shouldMatch(\".class.load. test.java.lang.invoke.MethodHandlesAsCollectorTest[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file\")\n-              .shouldHaveExitValue(0);\n+        JDKMethodHandlesTestRunner.test(MethodHandlesAsCollectorTest.class.getName());\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/methodHandles\/MethodHandlesAsCollectorTest.java","additions":35,"deletions":62,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,17 @@\n- * @test\n- * @summary Run the MethodHandlesCastFailureTest.java test in static CDS archive mode.\n+ * @test id=aot\n+ * @summary Run the MethodHandlesCastFailureTest.java test in CDSAppTester::AOT workflow.\n+ * @requires vm.cds & vm.compMode != \"Xcomp\"\n+ * @comment Some of the tests run excessively slowly with -Xcomp. The original\n+ *          tests aren't executed with -Xcomp in the CI pipeline, so let's exclude\n+ *          the generated tests from -Xcomp execution as well.\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesTest.java\n+ *        ..\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/Utils.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesCastFailureTest.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/remote\/RemoteExample.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/CodeCacheOverflowProcessor.java\n+ * @run junit\/othervm\/timeout=480 -Dcds.app.tester.workflow=AOT MethodHandlesCastFailureTest\n+ *\/\n+\/*\n+ * @test id=dynamic\n+ * @summary Run the MethodHandlesCastFailureTest.java test in CDSAppTester::DYNAMIC workflow.\n@@ -34,1 +49,0 @@\n- *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\n@@ -40,1 +54,0 @@\n- *        ..\/dynamicArchive\/test-classes\/TestMHApp.java\n@@ -43,1 +56,16 @@\n- * @run junit\/othervm\/timeout=480 -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. MethodHandlesCastFailureTest\n+ * @run junit\/othervm\/timeout=480 -Dcds.app.tester.workflow=DYNAMIC -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. MethodHandlesCastFailureTest\n+ *\/\n+\/*\n+ * @test id=static\n+ * @summary Run the MethodHandlesCastFailureTest.java test in CDSAppTester::STATIC workflow.\n+ * @requires vm.cds & vm.compMode != \"Xcomp\"\n+ * @comment Some of the tests run excessively slowly with -Xcomp. The original\n+ *          tests aren't executed with -Xcomp in the CI pipeline, so let's exclude\n+ *          the generated tests from -Xcomp execution as well.\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesTest.java\n+ *        ..\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/Utils.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesCastFailureTest.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/remote\/RemoteExample.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/CodeCacheOverflowProcessor.java\n+ * @run junit\/othervm\/timeout=480 -Dcds.app.tester.workflow=STATIC MethodHandlesCastFailureTest\n@@ -45,1 +73,0 @@\n-\n@@ -48,8 +75,0 @@\n-import java.io.File;\n-import java.nio.file.Path;\n-\n-import jdk.test.lib.cds.CDSOptions;\n-import jdk.test.lib.cds.CDSTestUtils;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.Platform;\n-\n@@ -59,47 +78,1 @@\n-        testImpl();\n-    }\n-\n-    private static final String classDir = System.getProperty(\"test.classes\");\n-    private static final String mainClass = \"TestMHApp\";\n-    private static final String javaClassPath = System.getProperty(\"java.class.path\");\n-    private static final String ps = System.getProperty(\"path.separator\");\n-    private static final String testPackageName = \"test.java.lang.invoke\";\n-    private static final String testClassName = \"MethodHandlesCastFailureTest\";\n-\n-    static void testImpl() throws Exception {\n-        String appJar = JarBuilder.build(\"MH\", new File(classDir), null);\n-        String classList = testClassName + \".list\";\n-        String archiveName = testClassName + \".jsa\";\n-        \/\/ Disable VerifyDpendencies when running with debug build because\n-        \/\/ the test requires a lot more time to execute with the option enabled.\n-        String verifyOpt =\n-            Platform.isDebugBuild() ? \"-XX:-VerifyDependencies\" : \"-showversion\";\n-\n-        String junitJar = Path.of(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI()).toString();\n-\n-        String jars = appJar + ps + junitJar;\n-\n-        \/\/ dump class list\n-        CDSTestUtils.dumpClassList(classList, \"-cp\", jars, verifyOpt, mainClass,\n-                                   testPackageName + \".\" + testClassName);\n-\n-        \/\/ create archive with the class list\n-        CDSOptions opts = (new CDSOptions())\n-            .addPrefix(\"-XX:ExtraSharedClassListFile=\" + classList,\n-                       \"-cp\", jars,\n-                       \"-Xlog:class+load,cds\")\n-            .setArchiveName(archiveName);\n-        OutputAnalyzer output = CDSTestUtils.createArchiveAndCheck(opts);\n-        if (testClassName.equals(\"MethodHandlesInvokersTest\")) {\n-            output.shouldNotContain(\"Failed to generate LambdaForm holder classes. Is your classlist out of date?\");\n-        }\n-\n-        \/\/ run with archive\n-        CDSOptions runOpts = (new CDSOptions())\n-            .addPrefix(\"-cp\", jars, \"-Xlog:class+load,cds=debug\", verifyOpt)\n-            .setArchiveName(archiveName)\n-            .setUseVersion(false)\n-            .addSuffix(mainClass, testPackageName + \".\" + testClassName);\n-        output = CDSTestUtils.runWithArchive(runOpts);\n-        output.shouldMatch(\".class.load. test.java.lang.invoke.MethodHandlesCastFailureTest[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file\")\n-              .shouldHaveExitValue(0);\n+        JDKMethodHandlesTestRunner.test(MethodHandlesCastFailureTest.class.getName());\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/methodHandles\/MethodHandlesCastFailureTest.java","additions":35,"deletions":62,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,17 @@\n- * @test\n- * @summary Run the MethodHandlesGeneralTest.java test in static CDS archive mode.\n+ * @test id=aot\n+ * @summary Run the MethodHandlesGeneralTest.java test in CDSAppTester::AOT workflow.\n+ * @requires vm.cds & vm.compMode != \"Xcomp\"\n+ * @comment Some of the tests run excessively slowly with -Xcomp. The original\n+ *          tests aren't executed with -Xcomp in the CI pipeline, so let's exclude\n+ *          the generated tests from -Xcomp execution as well.\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesTest.java\n+ *        ..\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/Utils.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesGeneralTest.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/remote\/RemoteExample.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/CodeCacheOverflowProcessor.java\n+ * @run junit\/othervm\/timeout=480 -Dcds.app.tester.workflow=AOT MethodHandlesGeneralTest\n+ *\/\n+\/*\n+ * @test id=dynamic\n+ * @summary Run the MethodHandlesGeneralTest.java test in CDSAppTester::DYNAMIC workflow.\n@@ -34,1 +49,0 @@\n- *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\n@@ -40,1 +54,0 @@\n- *        ..\/dynamicArchive\/test-classes\/TestMHApp.java\n@@ -43,1 +56,16 @@\n- * @run junit\/othervm\/timeout=480 -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. MethodHandlesGeneralTest\n+ * @run junit\/othervm\/timeout=480 -Dcds.app.tester.workflow=DYNAMIC -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. MethodHandlesGeneralTest\n+ *\/\n+\/*\n+ * @test id=static\n+ * @summary Run the MethodHandlesGeneralTest.java test in CDSAppTester::STATIC workflow.\n+ * @requires vm.cds & vm.compMode != \"Xcomp\"\n+ * @comment Some of the tests run excessively slowly with -Xcomp. The original\n+ *          tests aren't executed with -Xcomp in the CI pipeline, so let's exclude\n+ *          the generated tests from -Xcomp execution as well.\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesTest.java\n+ *        ..\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/Utils.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesGeneralTest.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/remote\/RemoteExample.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/CodeCacheOverflowProcessor.java\n+ * @run junit\/othervm\/timeout=480 -Dcds.app.tester.workflow=STATIC MethodHandlesGeneralTest\n@@ -45,1 +73,0 @@\n-\n@@ -48,8 +75,0 @@\n-import java.io.File;\n-import java.nio.file.Path;\n-\n-import jdk.test.lib.cds.CDSOptions;\n-import jdk.test.lib.cds.CDSTestUtils;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.Platform;\n-\n@@ -59,47 +78,1 @@\n-        testImpl();\n-    }\n-\n-    private static final String classDir = System.getProperty(\"test.classes\");\n-    private static final String mainClass = \"TestMHApp\";\n-    private static final String javaClassPath = System.getProperty(\"java.class.path\");\n-    private static final String ps = System.getProperty(\"path.separator\");\n-    private static final String testPackageName = \"test.java.lang.invoke\";\n-    private static final String testClassName = \"MethodHandlesGeneralTest\";\n-\n-    static void testImpl() throws Exception {\n-        String appJar = JarBuilder.build(\"MH\", new File(classDir), null);\n-        String classList = testClassName + \".list\";\n-        String archiveName = testClassName + \".jsa\";\n-        \/\/ Disable VerifyDpendencies when running with debug build because\n-        \/\/ the test requires a lot more time to execute with the option enabled.\n-        String verifyOpt =\n-            Platform.isDebugBuild() ? \"-XX:-VerifyDependencies\" : \"-showversion\";\n-\n-        String junitJar = Path.of(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI()).toString();\n-\n-        String jars = appJar + ps + junitJar;\n-\n-        \/\/ dump class list\n-        CDSTestUtils.dumpClassList(classList, \"-cp\", jars, verifyOpt, mainClass,\n-                                   testPackageName + \".\" + testClassName);\n-\n-        \/\/ create archive with the class list\n-        CDSOptions opts = (new CDSOptions())\n-            .addPrefix(\"-XX:ExtraSharedClassListFile=\" + classList,\n-                       \"-cp\", jars,\n-                       \"-Xlog:class+load,cds\")\n-            .setArchiveName(archiveName);\n-        OutputAnalyzer output = CDSTestUtils.createArchiveAndCheck(opts);\n-        if (testClassName.equals(\"MethodHandlesInvokersTest\")) {\n-            output.shouldNotContain(\"Failed to generate LambdaForm holder classes. Is your classlist out of date?\");\n-        }\n-\n-        \/\/ run with archive\n-        CDSOptions runOpts = (new CDSOptions())\n-            .addPrefix(\"-cp\", jars, \"-Xlog:class+load,cds=debug\", verifyOpt)\n-            .setArchiveName(archiveName)\n-            .setUseVersion(false)\n-            .addSuffix(mainClass, testPackageName + \".\" + testClassName);\n-        output = CDSTestUtils.runWithArchive(runOpts);\n-        output.shouldMatch(\".class.load. test.java.lang.invoke.MethodHandlesGeneralTest[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file\")\n-              .shouldHaveExitValue(0);\n+        JDKMethodHandlesTestRunner.test(MethodHandlesGeneralTest.class.getName());\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/methodHandles\/MethodHandlesGeneralTest.java","additions":35,"deletions":62,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,17 @@\n- * @test\n- * @summary Run the MethodHandlesInvokersTest.java test in static CDS archive mode.\n+ * @test id=aot\n+ * @summary Run the MethodHandlesInvokersTest.java test in CDSAppTester::AOT workflow.\n+ * @requires vm.cds & vm.compMode != \"Xcomp\"\n+ * @comment Some of the tests run excessively slowly with -Xcomp. The original\n+ *          tests aren't executed with -Xcomp in the CI pipeline, so let's exclude\n+ *          the generated tests from -Xcomp execution as well.\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesTest.java\n+ *        ..\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/Utils.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesInvokersTest.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/remote\/RemoteExample.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/CodeCacheOverflowProcessor.java\n+ * @run junit\/othervm\/timeout=480 -Dcds.app.tester.workflow=AOT MethodHandlesInvokersTest\n+ *\/\n+\/*\n+ * @test id=dynamic\n+ * @summary Run the MethodHandlesInvokersTest.java test in CDSAppTester::DYNAMIC workflow.\n@@ -34,1 +49,0 @@\n- *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\n@@ -40,1 +54,0 @@\n- *        ..\/dynamicArchive\/test-classes\/TestMHApp.java\n@@ -43,1 +56,16 @@\n- * @run junit\/othervm\/timeout=480 -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. MethodHandlesInvokersTest\n+ * @run junit\/othervm\/timeout=480 -Dcds.app.tester.workflow=DYNAMIC -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. MethodHandlesInvokersTest\n+ *\/\n+\/*\n+ * @test id=static\n+ * @summary Run the MethodHandlesInvokersTest.java test in CDSAppTester::STATIC workflow.\n+ * @requires vm.cds & vm.compMode != \"Xcomp\"\n+ * @comment Some of the tests run excessively slowly with -Xcomp. The original\n+ *          tests aren't executed with -Xcomp in the CI pipeline, so let's exclude\n+ *          the generated tests from -Xcomp execution as well.\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesTest.java\n+ *        ..\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/Utils.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesInvokersTest.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/remote\/RemoteExample.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/CodeCacheOverflowProcessor.java\n+ * @run junit\/othervm\/timeout=480 -Dcds.app.tester.workflow=STATIC MethodHandlesInvokersTest\n@@ -45,1 +73,0 @@\n-\n@@ -48,8 +75,0 @@\n-import java.io.File;\n-import java.nio.file.Path;\n-\n-import jdk.test.lib.cds.CDSOptions;\n-import jdk.test.lib.cds.CDSTestUtils;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.Platform;\n-\n@@ -59,47 +78,1 @@\n-        testImpl();\n-    }\n-\n-    private static final String classDir = System.getProperty(\"test.classes\");\n-    private static final String mainClass = \"TestMHApp\";\n-    private static final String javaClassPath = System.getProperty(\"java.class.path\");\n-    private static final String ps = System.getProperty(\"path.separator\");\n-    private static final String testPackageName = \"test.java.lang.invoke\";\n-    private static final String testClassName = \"MethodHandlesInvokersTest\";\n-\n-    static void testImpl() throws Exception {\n-        String appJar = JarBuilder.build(\"MH\", new File(classDir), null);\n-        String classList = testClassName + \".list\";\n-        String archiveName = testClassName + \".jsa\";\n-        \/\/ Disable VerifyDpendencies when running with debug build because\n-        \/\/ the test requires a lot more time to execute with the option enabled.\n-        String verifyOpt =\n-            Platform.isDebugBuild() ? \"-XX:-VerifyDependencies\" : \"-showversion\";\n-\n-        String junitJar = Path.of(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI()).toString();\n-\n-        String jars = appJar + ps + junitJar;\n-\n-        \/\/ dump class list\n-        CDSTestUtils.dumpClassList(classList, \"-cp\", jars, verifyOpt, mainClass,\n-                                   testPackageName + \".\" + testClassName);\n-\n-        \/\/ create archive with the class list\n-        CDSOptions opts = (new CDSOptions())\n-            .addPrefix(\"-XX:ExtraSharedClassListFile=\" + classList,\n-                       \"-cp\", jars,\n-                       \"-Xlog:class+load,cds\")\n-            .setArchiveName(archiveName);\n-        OutputAnalyzer output = CDSTestUtils.createArchiveAndCheck(opts);\n-        if (testClassName.equals(\"MethodHandlesInvokersTest\")) {\n-            output.shouldNotContain(\"Failed to generate LambdaForm holder classes. Is your classlist out of date?\");\n-        }\n-\n-        \/\/ run with archive\n-        CDSOptions runOpts = (new CDSOptions())\n-            .addPrefix(\"-cp\", jars, \"-Xlog:class+load,cds=debug\", verifyOpt)\n-            .setArchiveName(archiveName)\n-            .setUseVersion(false)\n-            .addSuffix(mainClass, testPackageName + \".\" + testClassName);\n-        output = CDSTestUtils.runWithArchive(runOpts);\n-        output.shouldMatch(\".class.load. test.java.lang.invoke.MethodHandlesInvokersTest[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file\")\n-              .shouldHaveExitValue(0);\n+        JDKMethodHandlesTestRunner.test(MethodHandlesInvokersTest.class.getName());\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/methodHandles\/MethodHandlesInvokersTest.java","additions":35,"deletions":62,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,17 @@\n- * @test\n- * @summary Run the MethodHandlesPermuteArgumentsTest.java test in static CDS archive mode.\n+ * @test id=aot\n+ * @summary Run the MethodHandlesPermuteArgumentsTest.java test in CDSAppTester::AOT workflow.\n+ * @requires vm.cds & vm.compMode != \"Xcomp\"\n+ * @comment Some of the tests run excessively slowly with -Xcomp. The original\n+ *          tests aren't executed with -Xcomp in the CI pipeline, so let's exclude\n+ *          the generated tests from -Xcomp execution as well.\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesTest.java\n+ *        ..\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/Utils.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesPermuteArgumentsTest.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/remote\/RemoteExample.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/CodeCacheOverflowProcessor.java\n+ * @run junit\/othervm\/timeout=480 -Dcds.app.tester.workflow=AOT MethodHandlesPermuteArgumentsTest\n+ *\/\n+\/*\n+ * @test id=dynamic\n+ * @summary Run the MethodHandlesPermuteArgumentsTest.java test in CDSAppTester::DYNAMIC workflow.\n@@ -34,1 +49,0 @@\n- *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\n@@ -40,1 +54,0 @@\n- *        ..\/dynamicArchive\/test-classes\/TestMHApp.java\n@@ -43,1 +56,16 @@\n- * @run junit\/othervm\/timeout=480 -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. MethodHandlesPermuteArgumentsTest\n+ * @run junit\/othervm\/timeout=480 -Dcds.app.tester.workflow=DYNAMIC -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. MethodHandlesPermuteArgumentsTest\n+ *\/\n+\/*\n+ * @test id=static\n+ * @summary Run the MethodHandlesPermuteArgumentsTest.java test in CDSAppTester::STATIC workflow.\n+ * @requires vm.cds & vm.compMode != \"Xcomp\"\n+ * @comment Some of the tests run excessively slowly with -Xcomp. The original\n+ *          tests aren't executed with -Xcomp in the CI pipeline, so let's exclude\n+ *          the generated tests from -Xcomp execution as well.\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesTest.java\n+ *        ..\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/Utils.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesPermuteArgumentsTest.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/remote\/RemoteExample.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/CodeCacheOverflowProcessor.java\n+ * @run junit\/othervm\/timeout=480 -Dcds.app.tester.workflow=STATIC MethodHandlesPermuteArgumentsTest\n@@ -45,1 +73,0 @@\n-\n@@ -48,8 +75,0 @@\n-import java.io.File;\n-import java.nio.file.Path;\n-\n-import jdk.test.lib.cds.CDSOptions;\n-import jdk.test.lib.cds.CDSTestUtils;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.Platform;\n-\n@@ -59,47 +78,1 @@\n-        testImpl();\n-    }\n-\n-    private static final String classDir = System.getProperty(\"test.classes\");\n-    private static final String mainClass = \"TestMHApp\";\n-    private static final String javaClassPath = System.getProperty(\"java.class.path\");\n-    private static final String ps = System.getProperty(\"path.separator\");\n-    private static final String testPackageName = \"test.java.lang.invoke\";\n-    private static final String testClassName = \"MethodHandlesPermuteArgumentsTest\";\n-\n-    static void testImpl() throws Exception {\n-        String appJar = JarBuilder.build(\"MH\", new File(classDir), null);\n-        String classList = testClassName + \".list\";\n-        String archiveName = testClassName + \".jsa\";\n-        \/\/ Disable VerifyDpendencies when running with debug build because\n-        \/\/ the test requires a lot more time to execute with the option enabled.\n-        String verifyOpt =\n-            Platform.isDebugBuild() ? \"-XX:-VerifyDependencies\" : \"-showversion\";\n-\n-        String junitJar = Path.of(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI()).toString();\n-\n-        String jars = appJar + ps + junitJar;\n-\n-        \/\/ dump class list\n-        CDSTestUtils.dumpClassList(classList, \"-cp\", jars, verifyOpt, mainClass,\n-                                   testPackageName + \".\" + testClassName);\n-\n-        \/\/ create archive with the class list\n-        CDSOptions opts = (new CDSOptions())\n-            .addPrefix(\"-XX:ExtraSharedClassListFile=\" + classList,\n-                       \"-cp\", jars,\n-                       \"-Xlog:class+load,cds\")\n-            .setArchiveName(archiveName);\n-        OutputAnalyzer output = CDSTestUtils.createArchiveAndCheck(opts);\n-        if (testClassName.equals(\"MethodHandlesInvokersTest\")) {\n-            output.shouldNotContain(\"Failed to generate LambdaForm holder classes. Is your classlist out of date?\");\n-        }\n-\n-        \/\/ run with archive\n-        CDSOptions runOpts = (new CDSOptions())\n-            .addPrefix(\"-cp\", jars, \"-Xlog:class+load,cds=debug\", verifyOpt)\n-            .setArchiveName(archiveName)\n-            .setUseVersion(false)\n-            .addSuffix(mainClass, testPackageName + \".\" + testClassName);\n-        output = CDSTestUtils.runWithArchive(runOpts);\n-        output.shouldMatch(\".class.load. test.java.lang.invoke.MethodHandlesPermuteArgumentsTest[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file\")\n-              .shouldHaveExitValue(0);\n+        JDKMethodHandlesTestRunner.test(MethodHandlesPermuteArgumentsTest.class.getName());\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/methodHandles\/MethodHandlesPermuteArgumentsTest.java","additions":35,"deletions":62,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,17 @@\n- * @test\n- * @summary Run the MethodHandlesSpreadArgumentsTest.java test in static CDS archive mode.\n+ * @test id=aot\n+ * @summary Run the MethodHandlesSpreadArgumentsTest.java test in CDSAppTester::AOT workflow.\n+ * @requires vm.cds & vm.compMode != \"Xcomp\"\n+ * @comment Some of the tests run excessively slowly with -Xcomp. The original\n+ *          tests aren't executed with -Xcomp in the CI pipeline, so let's exclude\n+ *          the generated tests from -Xcomp execution as well.\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesTest.java\n+ *        ..\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/Utils.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesSpreadArgumentsTest.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/remote\/RemoteExample.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/CodeCacheOverflowProcessor.java\n+ * @run junit\/othervm\/timeout=480 -Dcds.app.tester.workflow=AOT MethodHandlesSpreadArgumentsTest\n+ *\/\n+\/*\n+ * @test id=dynamic\n+ * @summary Run the MethodHandlesSpreadArgumentsTest.java test in CDSAppTester::DYNAMIC workflow.\n@@ -34,1 +49,0 @@\n- *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\n@@ -40,1 +54,0 @@\n- *        ..\/dynamicArchive\/test-classes\/TestMHApp.java\n@@ -43,1 +56,16 @@\n- * @run junit\/othervm\/timeout=480 -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. MethodHandlesSpreadArgumentsTest\n+ * @run junit\/othervm\/timeout=480 -Dcds.app.tester.workflow=DYNAMIC -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. MethodHandlesSpreadArgumentsTest\n+ *\/\n+\/*\n+ * @test id=static\n+ * @summary Run the MethodHandlesSpreadArgumentsTest.java test in CDSAppTester::STATIC workflow.\n+ * @requires vm.cds & vm.compMode != \"Xcomp\"\n+ * @comment Some of the tests run excessively slowly with -Xcomp. The original\n+ *          tests aren't executed with -Xcomp in the CI pipeline, so let's exclude\n+ *          the generated tests from -Xcomp execution as well.\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesTest.java\n+ *        ..\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/Utils.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/MethodHandlesSpreadArgumentsTest.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/remote\/RemoteExample.java\n+ *        ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/CodeCacheOverflowProcessor.java\n+ * @run junit\/othervm\/timeout=480 -Dcds.app.tester.workflow=STATIC MethodHandlesSpreadArgumentsTest\n@@ -45,1 +73,0 @@\n-\n@@ -48,8 +75,0 @@\n-import java.io.File;\n-import java.nio.file.Path;\n-\n-import jdk.test.lib.cds.CDSOptions;\n-import jdk.test.lib.cds.CDSTestUtils;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.Platform;\n-\n@@ -59,47 +78,1 @@\n-        testImpl();\n-    }\n-\n-    private static final String classDir = System.getProperty(\"test.classes\");\n-    private static final String mainClass = \"TestMHApp\";\n-    private static final String javaClassPath = System.getProperty(\"java.class.path\");\n-    private static final String ps = System.getProperty(\"path.separator\");\n-    private static final String testPackageName = \"test.java.lang.invoke\";\n-    private static final String testClassName = \"MethodHandlesSpreadArgumentsTest\";\n-\n-    static void testImpl() throws Exception {\n-        String appJar = JarBuilder.build(\"MH\", new File(classDir), null);\n-        String classList = testClassName + \".list\";\n-        String archiveName = testClassName + \".jsa\";\n-        \/\/ Disable VerifyDpendencies when running with debug build because\n-        \/\/ the test requires a lot more time to execute with the option enabled.\n-        String verifyOpt =\n-            Platform.isDebugBuild() ? \"-XX:-VerifyDependencies\" : \"-showversion\";\n-\n-        String junitJar = Path.of(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI()).toString();\n-\n-        String jars = appJar + ps + junitJar;\n-\n-        \/\/ dump class list\n-        CDSTestUtils.dumpClassList(classList, \"-cp\", jars, verifyOpt, mainClass,\n-                                   testPackageName + \".\" + testClassName);\n-\n-        \/\/ create archive with the class list\n-        CDSOptions opts = (new CDSOptions())\n-            .addPrefix(\"-XX:ExtraSharedClassListFile=\" + classList,\n-                       \"-cp\", jars,\n-                       \"-Xlog:class+load,cds\")\n-            .setArchiveName(archiveName);\n-        OutputAnalyzer output = CDSTestUtils.createArchiveAndCheck(opts);\n-        if (testClassName.equals(\"MethodHandlesInvokersTest\")) {\n-            output.shouldNotContain(\"Failed to generate LambdaForm holder classes. Is your classlist out of date?\");\n-        }\n-\n-        \/\/ run with archive\n-        CDSOptions runOpts = (new CDSOptions())\n-            .addPrefix(\"-cp\", jars, \"-Xlog:class+load,cds=debug\", verifyOpt)\n-            .setArchiveName(archiveName)\n-            .setUseVersion(false)\n-            .addSuffix(mainClass, testPackageName + \".\" + testClassName);\n-        output = CDSTestUtils.runWithArchive(runOpts);\n-        output.shouldMatch(\".class.load. test.java.lang.invoke.MethodHandlesSpreadArgumentsTest[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file\")\n-              .shouldHaveExitValue(0);\n+        JDKMethodHandlesTestRunner.test(MethodHandlesSpreadArgumentsTest.class.getName());\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/methodHandles\/MethodHandlesSpreadArgumentsTest.java","additions":35,"deletions":62,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -370,1 +370,1 @@\n-    public void run(String args[]) throws Exception {\n+    public void run(String... args) throws Exception {\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSAppTester.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}