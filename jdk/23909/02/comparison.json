{"files":[{"patch":"@@ -48,1 +48,0 @@\n-import java.net.URL;\n@@ -607,49 +606,1 @@\n-                                null, resourceBase, defaultsMap);\n-    }\n-\n-    \/**\n-     * Loads the set of <code>SynthStyle<\/code>s that will be used by\n-     * this <code>SynthLookAndFeel<\/code>. Path based resources are resolved\n-     * relatively to the specified <code>URL<\/code> of the style. For example\n-     * an <code>Image<\/code> would be resolved by\n-     * <code>new URL(synthFile, path)<\/code>. Refer to\n-     * <a href=\"doc-files\/synthFileFormat.html\">Synth File Format<\/a> for more\n-     * information.\n-     * <p>\n-     * Whilst this API may be safe for loading local resources that are\n-     * delivered with a {@code LookAndFeel} or application, and so have an\n-     * equal level of trust with application code, using it to load from\n-     * remote resources, particularly any which may have a lower level of\n-     * trust, is strongly discouraged.\n-     * The alternative mechanisms to load styles from an {@code InputStream}\n-     * {@linkplain #load(InputStream, Class)}\n-     * using resources co-located with the application or by providing a\n-     * {@code SynthStyleFactory} to\n-     * {@linkplain #setStyleFactory setStyleFactory(SynthStyleFactory)}\n-     * are preferred.\n-     * Consequently this method is deprecated and will be removed in a future\n-     * release.\n-     *\n-     * @param url the <code>URL<\/code> to load the set of\n-     *     <code>SynthStyle<\/code> from\n-     * @throws ParseException if there is an error in parsing\n-     * @throws IllegalArgumentException if synthSet is <code>null<\/code>\n-     * @throws IOException if synthSet cannot be opened as an <code>InputStream<\/code>\n-     * @since 1.6\n-     * @deprecated Use {@link #load(InputStream, Class)} or\n-     * {@link #setStyleFactory setStyleFactory(SynthStyleFactory)} instead\n-     *\/\n-    @Deprecated(since = \"21\", forRemoval = true)\n-    public void load(URL url) throws ParseException, IOException {\n-        if (url == null) {\n-            throw new IllegalArgumentException(\n-                \"You must supply a valid Synth set URL\");\n-        }\n-\n-        if (defaultsMap == null) {\n-            defaultsMap = new HashMap<String, Object>();\n-        }\n-\n-        InputStream input = url.openStream();\n-        new SynthParser().parse(input, (DefaultSynthStyleFactory) factory,\n-                                url, null, defaultsMap);\n+                                resourceBase, defaultsMap);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthLookAndFeel.java","additions":1,"deletions":50,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.net.MalformedURLException;\n@@ -168,5 +167,0 @@\n-    \/**\n-     * Based URL used to resolve paths.\n-     *\/\n-    private URL _urlResourceBase;\n-\n@@ -216,1 +210,0 @@\n-     * @param urlResourceBase the URL used to resolve any resources, such as Images\n@@ -222,1 +215,1 @@\n-                      URL urlResourceBase, Class<?> classResourceBase,\n+                      Class<?> classResourceBase,\n@@ -225,2 +218,1 @@\n-        if (inputStream == null || factory == null ||\n-            (urlResourceBase == null && classResourceBase == null)) {\n+        if (inputStream == null || factory == null || classResourceBase == null) {\n@@ -228,1 +220,1 @@\n-                \"You must supply an InputStream, StyleFactory and Class or URL\");\n+                \"You must supply an InputStream, StyleFactory and Class\");\n@@ -231,2 +223,0 @@\n-        assert(!(urlResourceBase != null && classResourceBase != null));\n-\n@@ -235,1 +225,0 @@\n-        _urlResourceBase = urlResourceBase;\n@@ -258,11 +247,1 @@\n-        if (_classResourceBase != null) {\n-            return _classResourceBase.getResource(path);\n-        } else {\n-            try {\n-                @SuppressWarnings(\"deprecation\")\n-                var result = new URL(_urlResourceBase, path);\n-                return result;\n-            } catch (MalformedURLException mue) {\n-                return null;\n-            }\n-        }\n+        return _classResourceBase.getResource(path);\n@@ -297,14 +276,1 @@\n-            if (_urlResourceBase != null) {\n-                \/\/ getHandler() is never called before parse() so it is safe\n-                \/\/ to create a URLClassLoader with _resourceBase.\n-                \/\/\n-                \/\/ getResource(\".\") is called to ensure we have the directory\n-                \/\/ containing the resources in the case the resource base is a\n-                \/\/ .class file.\n-                URL[] urls = new URL[] { getResource(\".\") };\n-                ClassLoader parent = Thread.currentThread().getContextClassLoader();\n-                ClassLoader urlLoader = new URLClassLoader(urls, parent);\n-                _handler.setClassLoader(urlLoader);\n-            } else {\n-                _handler.setClassLoader(_classResourceBase.getClassLoader());\n-            }\n+            _handler.setClassLoader(_classResourceBase.getClassLoader());\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthParser.java","additions":5,"deletions":39,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -56,3 +56,1 @@\n-      SynthLookAndFeel.load(InputStream, Class)<\/a> or\n-      <a href=\"..\/..\/..\/..\/..\/javax\/swing\/plaf\/synth\/SynthLookAndFeel.html#load(java.net.URL)\">\n-        SynthLookAndFeel.load(URL)<\/a> methods.\n+      SynthLookAndFeel.load(InputStream, Class)<\/a> method.\n@@ -74,30 +72,0 @@\n-    <p>\n-      It is also possible to load a look and feel from an arbitrary URL\n-      as in the following example.\n-    <\/p>\n-    <div class=\"example\">\n-      <pre>\n-  SynthLookAndFeel laf = new SynthLookAndFeel();\n-  laf.load(new URL(\"file:\/\/\/C:\/java\/synth\/laf\/laf.xml\"));\n-  UIManager.setLookAndFeel(laf);\n-      <\/pre>\n-    <\/div>\n-    <p>\n-      The method <a\n-        href=\"..\/..\/..\/..\/..\/javax\/swing\/plaf\/synth\/SynthLookAndFeel.html#load(java.net.URL)\">\n-      SynthLookAndFeel.load(URL)<\/a> can be used, for instance, to load a look\n-      and feel from any of the following:\n-    <\/p>\n-    <ul>\n-      <li>File, e.g. <code>file:\/\/\/C:\/java\/synth\/laf\/laf.xml<\/code><\/li>\n-      <li>Web server, e.g. <code>http:\/\/host\/laf.xml<\/code><\/li>\n-      <li>JAR file, e.g.\n-        <code>jar:file:\/\/\/C:\/synth-laf.jar!\/laf.xml<\/code><\/li>\n-      <li>Remote JAR file, e.g.\n-        <code>jar:http:\/\/host\/synth-laf.jar!\/laf.xml<\/code><\/li>\n-    <\/ul>\n-    <p>Note: Synth's file format allows for the definition of code to be executed.\n-       Loading any code from a remote location should be used only\n-       with extreme caution from a trusted source over a secure connection.\n-       It is strongly discouraged for an application or a LookAndFeel to do so.\n-    <\/p>\n@@ -883,4 +851,3 @@\n-      <dd>Path to the image.  If SynthLookAndFeel.load is\n-    passed a Class this will use the Class method getResource (with the\n-    Class supplied to the load method). If load is passed a URL this will use the\n-    URL constructor URL(context, path) to resolve the path.<\/dd>\n+      <dd>Path to the image.  SynthLookAndFeel.load \n+    will use the Class method getResource (with the\n+    Class supplied to the load method) to resolve the path.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/doc-files\/synthFileFormat.html","additions":4,"deletions":37,"binary":false,"changes":41,"status":"modified"}]}