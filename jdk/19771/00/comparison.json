{"files":[{"patch":"@@ -99,0 +99,4 @@\n+\/\/ sys\/mman.h defines MAP_ANON_64K beginning with AIX7.3 TL1\n+#ifndef MAP_ANON_64K\n+#define MAP_ANON_64K  0x400\n+#endif\n@@ -227,0 +231,1 @@\n+  bool can_use_64K_mmap_pages;\/\/ True if we can alloc 64K pages dynamically with mmap.\n@@ -234,1 +239,1 @@\n-  false, false,\n+  false, false, false,\n@@ -451,0 +456,8 @@\n+    \/\/ Can we use mmap with 64K pages? (Should be available with AIX7.3 TL1)\n+    {\n+      void* p = mmap(NULL, 1000000, PROT_READ | PROT_WRITE, MAP_ANON_64K | MAP_ANONYMOUS | MAP_SHARED, -1, 0);\n+      guarantee0(p != (void*) -1); \/\/ Should always work.\n+      g_multipage_support.can_use_64K_mmap_pages = (64*K == os::Aix::query_pagesize(p));\n+      munmap(p, 1000000);\n+    }\n+\n@@ -463,0 +476,2 @@\n+  trcVerbose(\"Can use 64K pages with mmap memory: %s\",\n+      (g_multipage_support.can_use_64K_mmap_pages ? \"yes\" :\"no\"));\n@@ -1134,0 +1149,2 @@\n+  st->print_cr(\"  Can use 64K pages with mmap memory:     %s\",\n+    (g_multipage_support.can_use_64K_mmap_pages ? \"yes\" :\"no\"));\n@@ -1613,0 +1630,4 @@\n+  if (os::vm_page_size() == 64*K && g_multipage_support.can_use_64K_mmap_pages) {\n+    flags |= MAP_ANON_64K;\n+  }\n+\n@@ -1662,1 +1683,5 @@\n-  vmembk_add(addr, size, 4*K, VMEM_MAPPED);\n+  if (os::vm_page_size() == 64*K && g_multipage_support.can_use_64K_mmap_pages) {\n+    vmembk_add(addr, size, 64*K, VMEM_MAPPED);\n+  } else {\n+    vmembk_add(addr, size, 4*K, VMEM_MAPPED);\n+  }\n@@ -1855,2 +1880,2 @@\n-  \/\/ In 64K mode allocate small sizes with mmap, large ones with 64K shmatted.\n-  if (os::vm_page_size() == 4*K) {\n+  \/\/ In 64K mode allocate with mmap if it supports 64K pages, otherwise use 64K shmatted.\n+  if (os::vm_page_size() == 4*K || g_multipage_support.can_use_64K_mmap_pages) {\n@@ -2043,2 +2068,2 @@\n-  \/\/ In 64K mode allocate small sizes with mmap, large ones with 64K shmatted.\n-  if (os::vm_page_size() == 4*K) {\n+  \/\/ In 64K mode allocate with mmap if it supports 64K pages, otherwise use 64K shmatted.\n+  if (os::vm_page_size() == 4*K || g_multipage_support.can_use_64K_mmap_pages) {\n@@ -2184,3 +2209,3 @@\n-  \/\/ LDR_CNTRL    can_use_64K_pages_dynamically       what we do                      remarks\n-  \/\/ 4K           no                                  4K                              old systems (aix 5.2) or new systems with AME activated\n-  \/\/ 4k           yes                                 64k (treat 4k stacks as 64k)    different loader than java and standard settings\n+  \/\/ LDR_CNTRL    can_use_64K_pages_dynamically(mmap or shm)       what we do                      remarks\n+  \/\/ 4K           no                                               4K                              old systems (aix 5.2) or new systems with AME activated\n+  \/\/ 4k           yes                                              64k (treat 4k stacks as 64k)    different loader than java and standardsettings\n@@ -2188,1 +2213,1 @@\n-  \/\/ 64k          yes                                 64k                             new systems and standard java loader (we set datapsize=64k when linking)\n+  \/\/ 64k          yes                                              64k                             new systems and standard java loader (we set datapsize=64k when linking)\n@@ -2195,1 +2220,1 @@\n-    if (g_multipage_support.can_use_64K_pages) {\n+    if (g_multipage_support.can_use_64K_pages || g_multipage_support.can_use_64K_mmap_pages) {\n@@ -2225,1 +2250,1 @@\n-    assert0(g_multipage_support.can_use_64K_pages);\n+    assert0(g_multipage_support.can_use_64K_pages || g_multipage_support.can_use_64K_mmap_pages);\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":37,"deletions":12,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -41,0 +41,7 @@\n+#ifdef AIX\n+# include <sys\/mman.h>\n+\/\/ sys\/mman.h defines MAP_ANON_64K beginning with AIX7.3 TL1\n+# ifndef MAP_ANON_64K\n+# define MAP_ANON_64K  0x400\n+# endif\n+#endif\n@@ -958,1 +965,3 @@\n-\/\/ On Aix, we should fail attach attempts not aligned to segment boundaries (256m)\n+\/\/ On Aix, when using shmget() in os::attempt_reserve_memory_at() we should fail with attach\n+\/\/ attempts not aligned to shmget() segment boundaries (256m)\n+\/\/ But shmget() is only used in cases we want to have 64K pages and mmap() does not provide it.\n@@ -960,1 +969,8 @@\n-  if (Use64KPages) {\n+  \/\/ Can we use mmap with 64K pages? (Should be available with AIX 7.3 TL1)\n+  void* p = mmap(NULL, 1000000, PROT_READ | PROT_WRITE, MAP_ANON_64K | MAP_ANONYMOUS | MAP_SHARED, -1, 0);\n+  guarantee(p != (void*) -1, \"mmap returned invalid ptr.\"); \/\/ Should always work.\n+  bool can_use_64K_mmap_pages = (64*K == os::Aix::query_pagesize(p));\n+  munmap(p, 1000000);\n+\n+  if (os::vm_page_size() != 4*K && !can_use_64K_mmap_pages) {\n+    \/\/ With this condition true shmget() is used inside\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"}]}