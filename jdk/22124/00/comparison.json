{"files":[{"patch":"@@ -2017,0 +2017,1 @@\n+int java_lang_VirtualThread::_objectWaiter_offset;\n@@ -2032,0 +2033,1 @@\n+  VTHREAD_INJECTED_FIELDS(INJECTED_FIELD_COMPUTE_OFFSET);\n@@ -2147,0 +2149,16 @@\n+ObjectMonitor* java_lang_VirtualThread::current_pending_monitor(oop vthread) {\n+  ObjectWaiter* waiter = objectWaiter(vthread);\n+  if (waiter != nullptr && waiter->at_monitorenter()) {\n+    return waiter->monitor();\n+  }\n+  return nullptr;\n+}\n+\n+ObjectMonitor* java_lang_VirtualThread::current_waiting_monitor(oop vthread) {\n+  ObjectWaiter* waiter = objectWaiter(vthread);\n+  if (waiter != nullptr && waiter->is_wait()) {\n+    return waiter->monitor();\n+  }\n+  return nullptr;\n+}\n+\n@@ -2157,0 +2175,1 @@\n+   VTHREAD_INJECTED_FIELDS(INJECTED_FIELD_SERIALIZE_OFFSET);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -40,0 +40,2 @@\n+class ObjectWaiter;\n+class ObjectMonitor;\n@@ -523,0 +525,2 @@\n+#define VTHREAD_INJECTED_FIELDS(macro)                                           \\\n+  macro(java_lang_VirtualThread,   objectWaiter,  intptr_signature,       false)\n@@ -535,0 +539,1 @@\n+  static int _objectWaiter_offset;\n@@ -586,0 +591,5 @@\n+\n+  static inline ObjectWaiter* objectWaiter(oop vthread);\n+  static inline void set_objectWaiter(oop vthread, ObjectWaiter* waiter);\n+  static ObjectMonitor* current_pending_monitor(oop vthread);\n+  static ObjectMonitor* current_waiting_monitor(oop vthread);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -223,0 +223,8 @@\n+inline ObjectWaiter* java_lang_VirtualThread::objectWaiter(oop vthread) {\n+  return (ObjectWaiter*)vthread->address_field(_objectWaiter_offset);\n+}\n+\n+inline void java_lang_VirtualThread::set_objectWaiter(oop vthread, ObjectWaiter* value) {\n+  vthread->address_field_put(_objectWaiter_offset, (address)value);\n+}\n+\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.inline.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+  VTHREAD_INJECTED_FIELDS(macro)            \\\n","filename":"src\/hotspot\/share\/classfile\/javaClassesImpl.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -101,6 +101,0 @@\n-  inline ObjectWaiter* object_waiter() const;\n-  inline void set_object_waiter(ObjectWaiter* obj_waiter);\n-\n-  inline ObjectMonitor* current_pending_monitor() const;\n-  inline ObjectMonitor* current_waiting_monitor() const;\n-\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -95,3 +95,0 @@\n-inline ObjectWaiter* stackChunkOopDesc::object_waiter() const       { return (ObjectWaiter*)jdk_internal_vm_StackChunk::objectWaiter(as_oop()); }\n-inline void stackChunkOopDesc::set_object_waiter(ObjectWaiter* obj) { jdk_internal_vm_StackChunk::set_objectWaiter(this, (address)obj); }\n-\n@@ -174,16 +171,0 @@\n-inline ObjectMonitor* stackChunkOopDesc::current_pending_monitor() const {\n-  ObjectWaiter* waiter = object_waiter();\n-  if (waiter != nullptr && waiter->at_monitorenter()) {\n-    return waiter->monitor();\n-  }\n-  return nullptr;\n-}\n-\n-inline ObjectMonitor* stackChunkOopDesc::current_waiting_monitor() const {\n-  ObjectWaiter* waiter = object_waiter();\n-  if (waiter != nullptr && waiter->is_wait()) {\n-    return waiter->monitor();\n-  }\n-  return nullptr;\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.inline.hpp","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1083,6 +1083,1 @@\n-      assert(vthread != nullptr, \"no vthread oop\");\n-      oop cont = java_lang_VirtualThread::continuation(vthread);\n-      assert(cont != nullptr, \"vthread with no continuation\");\n-      stackChunkOop chunk = jdk_internal_vm_Continuation::tail(cont);\n-      assert(chunk != nullptr, \"unmounted vthread should have a chunk\");\n-      ObjectMonitor *mon = chunk->current_waiting_monitor();\n+      ObjectMonitor *mon = java_lang_VirtualThread::current_waiting_monitor(vthread);\n@@ -1102,6 +1097,1 @@\n-      assert(vthread != nullptr, \"no vthread oop\");\n-      oop cont = java_lang_VirtualThread::continuation(vthread);\n-      assert(cont != nullptr, \"vthread with no continuation\");\n-      stackChunkOop chunk = jdk_internal_vm_Continuation::tail(cont);\n-      assert(chunk != nullptr, \"unmounted vthread should have a chunk\");\n-      ObjectMonitor *mon = chunk->current_pending_monitor();\n+      ObjectMonitor *mon = java_lang_VirtualThread::current_pending_monitor(vthread);\n@@ -2572,6 +2562,3 @@\n-    oop cont = java_lang_VirtualThread::continuation(target_h());\n-    assert(cont != nullptr, \"vthread with no continuation\");\n-    stackChunkOop chunk = jdk_internal_vm_Continuation::tail(cont);\n-    assert(chunk != nullptr, \"unmounted vthread should have a chunk\");\n-    if (chunk->current_pending_monitor() != nullptr) {\n-      *_owned_monitor_ptr = JNIHandles::make_local(_calling_thread, chunk->current_pending_monitor()->object());\n+    ObjectMonitor *mon = java_lang_VirtualThread::current_pending_monitor(target_h());\n+    if (mon != nullptr) {\n+      *_owned_monitor_ptr = JNIHandles::make_local(_calling_thread, mon->object());\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":5,"deletions":18,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -1527,1 +1527,0 @@\n-  assert(chunk->object_waiter() == nullptr, \"\");\n@@ -2217,1 +2216,2 @@\n-    if (chunk->object_waiter() != nullptr) {\n+    ObjectWaiter* waiter = java_lang_VirtualThread::objectWaiter(_thread->vthread());\n+    if (waiter != nullptr) {\n@@ -2220,2 +2220,0 @@\n-      assert(chunk->current_pending_monitor() != nullptr || chunk->current_waiting_monitor() != nullptr, \"\");\n-      ObjectWaiter* waiter = chunk->object_waiter();\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -91,1 +91,0 @@\n-int jdk_internal_vm_StackChunk::_objectWaiter_offset;\n","filename":"src\/hotspot\/share\/runtime\/continuationJavaClasses.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -79,1 +79,0 @@\n-  macro(jdk_internal_vm_StackChunk, objectWaiter,    intptr_signature,       false) \\\n@@ -92,1 +91,0 @@\n-  static int _objectWaiter_offset;\n@@ -134,3 +132,0 @@\n-  static inline address objectWaiter(oop chunk);\n-  static inline void set_objectWaiter(oop chunk, address mon);\n-\n","filename":"src\/hotspot\/share\/runtime\/continuationJavaClasses.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -197,8 +197,0 @@\n-inline address jdk_internal_vm_StackChunk::objectWaiter(oop chunk) {\n-  return chunk->address_field(_objectWaiter_offset);\n-}\n-\n-inline void jdk_internal_vm_StackChunk::set_objectWaiter(oop chunk, address value) {\n-  chunk->address_field_put(_objectWaiter_offset, value);\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/continuationJavaClasses.inline.hpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1137,1 +1137,1 @@\n-  \/\/ save ObjectWaiter* in the chunk since we will need it when resuming execution.\n+  \/\/ save ObjectWaiter* in the vthread since we will need it when resuming execution.\n@@ -1139,3 +1139,1 @@\n-  oop cont = java_lang_VirtualThread::continuation(vthread);\n-  stackChunkOop chunk  = jdk_internal_vm_Continuation::tail(cont);\n-  chunk->set_object_waiter(node);\n+  java_lang_VirtualThread::set_objectWaiter(vthread, node);\n@@ -1205,5 +1203,2 @@\n-  \/\/ Remove the ObjectWaiter* from the stackChunk.\n-  oop vthread = current->vthread();\n-  oop cont = java_lang_VirtualThread::continuation(vthread);\n-  stackChunkOop chunk  = jdk_internal_vm_Continuation::tail(cont);\n-  chunk->set_object_waiter(nullptr);\n+  \/\/ Clear the ObjectWaiter* from the vthread.\n+  java_lang_VirtualThread::set_objectWaiter(current->vthread(), nullptr);\n@@ -2033,4 +2028,2 @@\n-  \/\/ Save the ObjectWaiter* in the chunk since we will need it when resuming execution.\n-  oop cont = java_lang_VirtualThread::continuation(vthread);\n-  stackChunkOop chunk  = jdk_internal_vm_Continuation::tail(cont);\n-  chunk->set_object_waiter(node);\n+  \/\/ Save the ObjectWaiter* in the vthread since we will need it when resuming execution.\n+  java_lang_VirtualThread::set_objectWaiter(vthread, node);\n@@ -2082,2 +2075,2 @@\n-      stackChunkOop chunk  = cont.tail();\n-      chunk->set_object_waiter(nullptr);\n+      \/\/ Clear the ObjectWaiter* from the vthread.\n+      java_lang_VirtualThread::set_objectWaiter(current->vthread(), nullptr);\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":8,"deletions":15,"binary":false,"changes":23,"status":"modified"}]}