{"files":[{"patch":"@@ -48,0 +48,1 @@\n+import static jdk.internal.constant.ConstantUtils.CD_module_info;\n@@ -395,1 +396,1 @@\n-        return build(ClassDesc.of(\"module-info\"), clb -> {\n+        return build(CD_module_info, clb -> {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFile.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -68,2 +68,1 @@\n-import static jdk.internal.constant.ConstantUtils.classDesc;\n-import static jdk.internal.constant.ConstantUtils.methodDesc;\n+import static jdk.internal.constant.ConstantUtils.*;\n@@ -256,1 +255,1 @@\n-            var md = methodDesc(m.getReturnType(), JLRA.getExecutableSharedParameterTypes(m));\n+            var md = methodTypeDesc(m.getReturnType(), JLRA.getExecutableSharedParameterTypes(m));\n@@ -261,1 +260,1 @@\n-                                                       Arrays.stream(thrown).map(ConstantUtils::classDesc))\n+                                                       Arrays.stream(thrown).map(ConstantUtils::referenceClassDesc))\n@@ -286,1 +285,2 @@\n-        byte[] template = createTemplate(loader, ClassDesc.of(className), classDesc(intfc), uniqueName, methods);\n+        byte[] template = createTemplate(loader, binaryNameToDesc(className),\n+                referenceClassDesc(intfc), uniqueName, methods);\n@@ -342,3 +342,3 @@\n-    private static final List<ClassDesc> DEFAULT_RETHROWS = List.of(classDesc(RuntimeException.class), classDesc(Error.class));\n-    private static final ClassDesc CD_UndeclaredThrowableException = classDesc(UndeclaredThrowableException.class);\n-    private static final ClassDesc CD_IllegalAccessException = classDesc(IllegalAccessException.class);\n+    private static final List<ClassDesc> DEFAULT_RETHROWS = List.of(referenceClassDesc(RuntimeException.class), referenceClassDesc(Error.class));\n+    private static final ClassDesc CD_UndeclaredThrowableException = referenceClassDesc(UndeclaredThrowableException.class);\n+    private static final ClassDesc CD_IllegalAccessException = referenceClassDesc(IllegalAccessException.class);\n@@ -352,1 +352,1 @@\n-            = methodDesc(MT_void_Lookup_MethodHandle_MethodHandle);\n+            = methodTypeDesc(MT_void_Lookup_MethodHandle_MethodHandle);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleProxies.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1094,1 +1094,1 @@\n-            byte[] classBytes = ClassFile.of().build(ClassDesc.of(className),\n+            byte[] classBytes = ClassFile.of().build(ConstantUtils.binaryNameToDesc(className),\n@@ -1100,1 +1100,1 @@\n-                                        ConstantUtils.methodDesc(args),\n+                                        ConstantUtils.methodTypeDesc(args),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,2 +52,1 @@\n-import static jdk.internal.constant.ConstantUtils.classDesc;\n-import static jdk.internal.constant.ConstantUtils.methodDesc;\n+import static jdk.internal.constant.ConstantUtils.*;\n@@ -169,1 +168,1 @@\n-        this.classEntry = cp.classEntry(ReferenceClassDescImpl.ofValidatedBinaryName(className));\n+        this.classEntry = cp.classEntry(ConstantUtils.binaryNameToDesc(className));\n@@ -233,1 +232,1 @@\n-            ces.add(cp.classEntry(ReferenceClassDescImpl.ofValidatedBinaryName(t.getName())));\n+            ces.add(cp.classEntry(ConstantUtils.binaryNameToDesc(t.getName())));\n@@ -647,1 +646,1 @@\n-            var desc = methodDesc(returnType, parameterTypes);\n+            var desc = methodTypeDesc(returnType, parameterTypes);\n@@ -658,1 +657,1 @@\n-                                classDesc(fromClass),\n+                                referenceClassDesc(fromClass),\n@@ -686,1 +685,1 @@\n-                                cob.exceptionCatch(cob.startLabel(), c1, c1, classDesc(exc));\n+                                cob.exceptionCatch(cob.startLabel(), c1, c1, referenceClassDesc(exc));\n@@ -732,1 +731,1 @@\n-                cob.checkcast(classDesc(type))\n+                cob.checkcast(referenceClassDesc(type))\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.lang.classfile.ClassBuilder;\n@@ -53,0 +52,1 @@\n+import jdk.internal.constant.ConstantUtils;\n@@ -63,0 +63,1 @@\n+import static jdk.internal.constant.ConstantUtils.referenceClassDesc;\n@@ -326,1 +327,1 @@\n-            return EnumDesc.of(classDesc(enumClassTemplate), (String) label);\n+            return EnumDesc.of(referenceClassDesc(enumClassTemplate), (String) label);\n@@ -469,1 +470,1 @@\n-                            cb.instanceOf(classDesc(Wrapper.forBasicType(classLabel)\n+                            cb.instanceOf(referenceClassDesc(Wrapper.forBasicType(classLabel)\n@@ -518,1 +519,1 @@\n-                            cb.invokestatic(ExactConversionsSupport.class.describeConstable().orElseThrow(),\n+                            cb.invokestatic(referenceClassDesc(ExactConversionsSupport.class),\n@@ -556,1 +557,1 @@\n-                    cb.invokeinterface(BiPredicate.class.describeConstable().orElseThrow(),\n+                    cb.invokeinterface(referenceClassDesc(BiPredicate.class),\n@@ -604,1 +605,1 @@\n-                    cb.invokestatic(element.caseLabel().getClass().describeConstable().orElseThrow(),\n+                    cb.invokestatic(referenceClassDesc(element.caseLabel().getClass()),\n@@ -606,2 +607,2 @@\n-                            MethodTypeDesc.of(classDesc(element.caseLabel().getClass()),\n-                                    classDesc(Wrapper.asPrimitiveType(element.caseLabel().getClass()))));\n+                            MethodTypeDesc.of(referenceClassDesc(element.caseLabel().getClass()),\n+                                    Wrapper.forWrapperType(element.caseLabel().getClass()).classDescriptor()));\n@@ -634,1 +635,1 @@\n-        byte[] classBytes = ClassFile.of().build(ReferenceClassDescImpl.ofValidatedBinaryName(typeSwitchClassName(caller.lookupClass())),\n+        byte[] classBytes = ClassFile.of().build(ConstantUtils.binaryNameToDesc(typeSwitchClassName(caller.lookupClass())),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/SwitchBootstraps.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-import static jdk.internal.constant.ConstantUtils.classDesc;\n+import static jdk.internal.constant.ConstantUtils.referenceClassDesc;\n@@ -249,1 +249,1 @@\n-                    : ClassHierarchyInfo.ofClass(classDesc(cl.getSuperclass()));\n+                    : ClassHierarchyInfo.ofClass(referenceClassDesc(cl.getSuperclass()));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassHierarchyImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.lang.classfile.constantpool.NameAndTypeEntry;\n@@ -36,1 +35,0 @@\n-import java.lang.classfile.constantpool.DynamicConstantPoolEntry;\n@@ -49,0 +47,2 @@\n+import static jdk.internal.constant.ConstantUtils.binaryNameToDesc;\n+\n@@ -1324,2 +1324,2 @@\n-        private static final ClassDesc CD_Cloneable = ClassDesc.of(\"java.lang.Cloneable\");\n-        private static final ClassDesc CD_Serializable = ClassDesc.of(\"java.io.Serializable\");\n+        private static final ClassDesc CD_Cloneable = binaryNameToDesc(\"java.lang.Cloneable\");\n+        private static final ClassDesc CD_Serializable = binaryNameToDesc(\"java.io.Serializable\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapGenerator.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+    public static final ClassDesc CD_module_info = binaryNameToDesc(\"module-info\");\n@@ -58,0 +59,11 @@\n+    \/**\n+     * Creates a {@linkplain ClassDesc} from a pre-validated binary name\n+     * for a class or interface type. Validated version of {@link\n+     * ClassDesc#of(String)}.\n+     *\n+     * @param binaryName a binary name\n+     *\/\n+    public static ClassDesc binaryNameToDesc(String binaryName) {\n+        return ReferenceClassDescImpl.ofValidated(\"L\" + binaryToInternal(binaryName) + \";\");\n+    }\n+\n@@ -68,0 +80,8 @@\n+        return referenceClassDesc(type);\n+    }\n+\n+    \/**\n+     * Creates a ClassDesc from a Class object representing a non-hidden\n+     * class or interface or an array type with a non-hidden component type.\n+     *\/\n+    public static ClassDesc referenceClassDesc(Class<?> type) {\n@@ -76,1 +96,1 @@\n-    public static MethodTypeDesc methodDesc(MethodType type) {\n+    public static MethodTypeDesc methodTypeDesc(MethodType type) {\n@@ -93,1 +113,1 @@\n-    public static MethodTypeDesc methodDesc(Class<?> returnType, Class<?>[] parameterTypes) {\n+    public static MethodTypeDesc methodTypeDesc(Class<?> returnType, Class<?>[] parameterTypes) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/constant\/ConstantUtils.java","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -74,11 +74,0 @@\n-    \/**\n-     * Creates a {@linkplain ClassDesc} from a pre-validated descriptor string\n-     * for a class or interface type or an array type.\n-     *\n-     * @param descriptor a field descriptor string for a class or interface type\n-     * @jvms 4.3.2 Field Descriptors\n-     *\/\n-    public static ClassDesc ofValidatedBinaryName(String typeSwitchClassName) {\n-        return ofValidated(\"L\" + binaryToInternal(typeSwitchClassName) + \";\");\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/constant\/ReferenceClassDescImpl.java","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -73,2 +73,1 @@\n-import static jdk.internal.constant.ConstantUtils.classDesc;\n-import static jdk.internal.constant.ConstantUtils.methodDesc;\n+import static jdk.internal.constant.ConstantUtils.*;\n@@ -85,18 +84,18 @@\n-    private static final ClassDesc CD_Arena = classDesc(Arena.class);\n-    private static final ClassDesc CD_MemorySegment = classDesc(MemorySegment.class);\n-    private static final ClassDesc CD_MemorySegment_Scope = classDesc(MemorySegment.Scope.class);\n-    private static final ClassDesc CD_SharedUtils = classDesc(SharedUtils.class);\n-    private static final ClassDesc CD_AbstractMemorySegmentImpl = classDesc(AbstractMemorySegmentImpl.class);\n-    private static final ClassDesc CD_MemorySessionImpl = classDesc(MemorySessionImpl.class);\n-    private static final ClassDesc CD_Utils = classDesc(Utils.class);\n-    private static final ClassDesc CD_SegmentAllocator = classDesc(SegmentAllocator.class);\n-    private static final ClassDesc CD_ValueLayout = classDesc(ValueLayout.class);\n-    private static final ClassDesc CD_ValueLayout_OfBoolean = classDesc(ValueLayout.OfBoolean.class);\n-    private static final ClassDesc CD_ValueLayout_OfByte = classDesc(ValueLayout.OfByte.class);\n-    private static final ClassDesc CD_ValueLayout_OfShort = classDesc(ValueLayout.OfShort.class);\n-    private static final ClassDesc CD_ValueLayout_OfChar = classDesc(ValueLayout.OfChar.class);\n-    private static final ClassDesc CD_ValueLayout_OfInt = classDesc(ValueLayout.OfInt.class);\n-    private static final ClassDesc CD_ValueLayout_OfLong = classDesc(ValueLayout.OfLong.class);\n-    private static final ClassDesc CD_ValueLayout_OfFloat = classDesc(ValueLayout.OfFloat.class);\n-    private static final ClassDesc CD_ValueLayout_OfDouble = classDesc(ValueLayout.OfDouble.class);\n-    private static final ClassDesc CD_AddressLayout = classDesc(AddressLayout.class);\n+    private static final ClassDesc CD_Arena = referenceClassDesc(Arena.class);\n+    private static final ClassDesc CD_MemorySegment = referenceClassDesc(MemorySegment.class);\n+    private static final ClassDesc CD_MemorySegment_Scope = referenceClassDesc(MemorySegment.Scope.class);\n+    private static final ClassDesc CD_SharedUtils = referenceClassDesc(SharedUtils.class);\n+    private static final ClassDesc CD_AbstractMemorySegmentImpl = referenceClassDesc(AbstractMemorySegmentImpl.class);\n+    private static final ClassDesc CD_MemorySessionImpl = referenceClassDesc(MemorySessionImpl.class);\n+    private static final ClassDesc CD_Utils = referenceClassDesc(Utils.class);\n+    private static final ClassDesc CD_SegmentAllocator = referenceClassDesc(SegmentAllocator.class);\n+    private static final ClassDesc CD_ValueLayout = referenceClassDesc(ValueLayout.class);\n+    private static final ClassDesc CD_ValueLayout_OfBoolean = referenceClassDesc(ValueLayout.OfBoolean.class);\n+    private static final ClassDesc CD_ValueLayout_OfByte = referenceClassDesc(ValueLayout.OfByte.class);\n+    private static final ClassDesc CD_ValueLayout_OfShort = referenceClassDesc(ValueLayout.OfShort.class);\n+    private static final ClassDesc CD_ValueLayout_OfChar = referenceClassDesc(ValueLayout.OfChar.class);\n+    private static final ClassDesc CD_ValueLayout_OfInt = referenceClassDesc(ValueLayout.OfInt.class);\n+    private static final ClassDesc CD_ValueLayout_OfLong = referenceClassDesc(ValueLayout.OfLong.class);\n+    private static final ClassDesc CD_ValueLayout_OfFloat = referenceClassDesc(ValueLayout.OfFloat.class);\n+    private static final ClassDesc CD_ValueLayout_OfDouble = referenceClassDesc(ValueLayout.OfDouble.class);\n+    private static final ClassDesc CD_AddressLayout = referenceClassDesc(AddressLayout.class);\n@@ -201,1 +200,1 @@\n-            clb.withMethodBody(METHOD_NAME, methodDesc(callerMethodType), ACC_PUBLIC | ACC_STATIC,\n+            clb.withMethodBody(METHOD_NAME, methodTypeDesc(callerMethodType), ACC_PUBLIC | ACC_STATIC,\n@@ -367,1 +366,1 @@\n-        cb.invokevirtual(CD_MethodHandle, \"invokeExact\", methodDesc(leafType));\n+        cb.invokevirtual(CD_MethodHandle, \"invokeExact\", methodTypeDesc(leafType));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":21,"deletions":22,"binary":false,"changes":43,"status":"modified"}]}