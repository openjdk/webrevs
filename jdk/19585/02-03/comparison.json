{"files":[{"patch":"@@ -39,1 +39,0 @@\n-import static jdk.internal.constant.ConstantUtils.dropFirstAndLastChar;\n@@ -168,1 +167,1 @@\n-               ? Wrapper.forPrimitiveType(descriptor.charAt(0)).classDescriptor()\n+               ? Wrapper.forPrimitiveType(descriptor.charAt(0)).basicClassDescriptor()\n@@ -318,1 +317,1 @@\n-                return Wrapper.forBasicType(desc.charAt(1)).classDescriptor();\n+                return Wrapper.forBasicType(desc.charAt(1)).basicClassDescriptor();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ClassDesc.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -470,2 +470,1 @@\n-                            cb.instanceOf(referenceClassDesc(Wrapper.forBasicType(classLabel)\n-                                    .wrapperType()));\n+                            cb.instanceOf(Wrapper.forBasicType(classLabel).wrapperClassDescriptor());\n@@ -608,1 +607,1 @@\n-                                    Wrapper.forWrapperType(element.caseLabel().getClass()).classDescriptor()));\n+                                    Wrapper.forWrapperType(element.caseLabel().getClass()).basicClassDescriptor()));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/SwitchBootstraps.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-            return Wrapper.forPrimitiveType(type).classDescriptor();\n+            return Wrapper.forPrimitiveType(type).basicClassDescriptor();\n@@ -309,1 +309,1 @@\n-            return Wrapper.forPrimitiveType(descriptor.charAt(start)).classDescriptor();\n+            return Wrapper.forPrimitiveType(descriptor.charAt(start)).basicClassDescriptor();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/constant\/ConstantUtils.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,2 +35,4 @@\n-    \/\/        wrapperType      simple     primitiveType  simple     char  emptyArray     format               numericClass  superClass  classDescriptor\n-    BOOLEAN(  Boolean.class,   \"Boolean\", boolean.class, \"boolean\", 'Z', new boolean[0], Format.unsigned( 1), 0, 0, ConstantDescs.CD_boolean),\n+    \/\/        wrapperType      simple     primitiveType  simple     char  emptyArray     format               numericClass  superClass\n+    \/\/        basicClassDescriptor    wrapperClassDescriptor\n+    BOOLEAN(  Boolean.class,   \"Boolean\", boolean.class, \"boolean\", 'Z', new boolean[0], Format.unsigned( 1), 0, 0,\n+            ConstantDescs.CD_boolean, ConstantDescs.CD_Boolean),\n@@ -39,8 +41,16 @@\n-    BYTE   (     Byte.class,      \"Byte\",    byte.class,    \"byte\", 'B', new    byte[0], Format.signed(   8), BYTE_CLASS, BYTE_SUPERCLASSES, ConstantDescs.CD_byte),\n-    SHORT  (    Short.class,     \"Short\",   short.class,   \"short\", 'S', new   short[0], Format.signed(  16), SHORT_CLASS, SHORT_SUPERCLASSES, ConstantDescs.CD_short),\n-    CHAR   (Character.class, \"Character\",    char.class,    \"char\", 'C', new    char[0], Format.unsigned(16), CHAR_CLASS, CHAR_SUPERCLASSES, ConstantDescs.CD_char),\n-    INT    (  Integer.class,   \"Integer\",     int.class,     \"int\", 'I', new     int[0], Format.signed(  32), INT_CLASS, INT_SUPERCLASSES, ConstantDescs.CD_int),\n-    LONG   (     Long.class,      \"Long\",    long.class,    \"long\", 'J', new    long[0], Format.signed(  64), LONG_CLASS, LONG_SUPERCLASSES, ConstantDescs.CD_long),\n-    FLOAT  (    Float.class,     \"Float\",   float.class,   \"float\", 'F', new   float[0], Format.floating(32), FLOAT_CLASS, FLOAT_SUPERCLASSES, ConstantDescs.CD_float),\n-    DOUBLE (   Double.class,    \"Double\",  double.class,  \"double\", 'D', new  double[0], Format.floating(64), DOUBLE_CLASS, DOUBLE_CLASS, ConstantDescs.CD_double),\n-    OBJECT (   Object.class,    \"Object\",  Object.class,  \"Object\", 'L', new  Object[0], Format.other(    1), 0, 0, ConstantDescs.CD_Object),\n+    BYTE   (     Byte.class,      \"Byte\",    byte.class,    \"byte\", 'B', new    byte[0], Format.signed(   8), BYTE_CLASS, BYTE_SUPERCLASSES,\n+            ConstantDescs.CD_byte, ConstantDescs.CD_Byte),\n+    SHORT  (    Short.class,     \"Short\",   short.class,   \"short\", 'S', new   short[0], Format.signed(  16), SHORT_CLASS, SHORT_SUPERCLASSES,\n+            ConstantDescs.CD_short, ConstantDescs.CD_Short),\n+    CHAR   (Character.class, \"Character\",    char.class,    \"char\", 'C', new    char[0], Format.unsigned(16), CHAR_CLASS, CHAR_SUPERCLASSES,\n+            ConstantDescs.CD_char, ConstantDescs.CD_Character),\n+    INT    (  Integer.class,   \"Integer\",     int.class,     \"int\", 'I', new     int[0], Format.signed(  32), INT_CLASS, INT_SUPERCLASSES,\n+            ConstantDescs.CD_int, ConstantDescs.CD_Integer),\n+    LONG   (     Long.class,      \"Long\",    long.class,    \"long\", 'J', new    long[0], Format.signed(  64), LONG_CLASS, LONG_SUPERCLASSES,\n+            ConstantDescs.CD_long, ConstantDescs.CD_Long),\n+    FLOAT  (    Float.class,     \"Float\",   float.class,   \"float\", 'F', new   float[0], Format.floating(32), FLOAT_CLASS, FLOAT_SUPERCLASSES,\n+            ConstantDescs.CD_float, ConstantDescs.CD_Float),\n+    DOUBLE (   Double.class,    \"Double\",  double.class,  \"double\", 'D', new  double[0], Format.floating(64), DOUBLE_CLASS, DOUBLE_CLASS,\n+            ConstantDescs.CD_double, ConstantDescs.CD_Double),\n+    OBJECT (   Object.class,    \"Object\",  Object.class,  \"Object\", 'L', new  Object[0], Format.other(    1), 0, 0,\n+            ConstantDescs.CD_Object, ConstantDescs.CD_Object),\n@@ -48,1 +58,2 @@\n-    VOID   (     Void.class,      \"Void\",    void.class,    \"void\", 'V',           null, Format.other(    0), 0, 0, ConstantDescs.CD_void),\n+    VOID   (     Void.class,      \"Void\",    void.class,    \"void\", 'V',           null, Format.other(    0), 0, 0,\n+            ConstantDescs.CD_void, ConstantDescs.CD_Void),\n@@ -63,1 +74,2 @@\n-    private final ClassDesc classDesc;\n+    private final ClassDesc basicClassDesc;\n+    private final ClassDesc wrapperClassDesc;\n@@ -65,10 +77,11 @@\n-    private Wrapper(Class<?> wtype,\n-                    String wtypeName,\n-                    Class<?> ptype,\n-                    String ptypeName,\n-                    char tchar,\n-                    Object emptyArray,\n-                    int format,\n-                    int numericClass,\n-                    int superClasses,\n-                    ClassDesc classDesc) {\n+    Wrapper(Class<?> wtype,\n+            String wtypeName,\n+            Class<?> ptype,\n+            String ptypeName,\n+            char tchar,\n+            Object emptyArray,\n+            int format,\n+            int numericClass,\n+            int superClasses,\n+            ClassDesc basicClassDesc,\n+            ClassDesc wrapperClassDesc) {\n@@ -85,1 +98,2 @@\n-        this.classDesc = classDesc;\n+        this.basicClassDesc = basicClassDesc;\n+        this.wrapperClassDesc = wrapperClassDesc;\n@@ -393,1 +407,4 @@\n-    public ClassDesc classDescriptor() { return classDesc; }\n+    public ClassDesc basicClassDescriptor() { return basicClassDesc; }\n+\n+    \/** A nominal descriptor of the wrapper type *\/\n+    public ClassDesc wrapperClassDescriptor() { return wrapperClassDesc; }\n","filename":"src\/java.base\/share\/classes\/sun\/invoke\/util\/Wrapper.java","additions":41,"deletions":24,"binary":false,"changes":65,"status":"modified"}]}