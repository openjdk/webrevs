{"files":[{"patch":"@@ -602,1 +602,1 @@\n-                str = JLA.uncheckedNewStringNoRepl(bytearr, StandardCharsets.ISO_8859_1);\n+                str = JLA.uncheckedNewStringNoReplacement(bytearr, StandardCharsets.ISO_8859_1);\n","filename":"src\/java.base\/share\/classes\/java\/io\/DataInputStream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -607,1 +607,1 @@\n-            dp = decodeUTF8_UTF16(latin1, sp, length, utf16, dp, true);\n+            dp = decodeUTF8_UTF16(latin1, sp, length, utf16, dp);\n@@ -614,1 +614,1 @@\n-            int dp = decodeUTF8_UTF16(bytes, offset, offset + length, dst, 0, true);\n+            int dp = decodeUTF8_UTF16(bytes, offset, offset + length, dst, 0);\n@@ -692,1 +692,1 @@\n-     * Throws iae, instead of replacing, if malformed or unmappable.\n+     * {@return a new string by decoding from the given UTF-8 bytes array}\n@@ -694,0 +694,2 @@\n+     * @param offset the index of the first byte to decode\n+     * @param length the number of bytes to decode\n@@ -698,0 +700,5 @@\n+     * @throws NullPointerException If {@code bytes} is null\n+     * @throws StringIndexOutOfBoundsException If {@code offset} is negative,\n+     *         {@code length} is negative, or {@code offset} is greater than\n+     *         {@code bytes.length - length}\n+     * @throws CharacterCodingException for malformed input or unmappable characters\n@@ -699,2 +706,2 @@\n-    static String newStringUTF8NoRepl(byte[] bytes, int offset, int length, boolean noShare) {\n-        checkBoundsOffCount(offset, length, bytes.length);\n+    static String newStringUTF8NoReplacement(byte[] bytes, int offset, int length, boolean noShare) throws CharacterCodingException {\n+        checkBoundsOffCount(offset, length, bytes.length);  \/\/ Implicit null check on `bytes`\n@@ -751,1 +758,1 @@\n-            dp = decodeUTF8_UTF16(bytes, offset, sl, dst, dp, false);\n+            dp = decodeUTF8_UTF16NoReplacement(bytes, offset, sl, dst, dp);\n@@ -754,1 +761,1 @@\n-            dp = decodeUTF8_UTF16(bytes, offset, offset + length, dst, 0, false);\n+            dp = decodeUTF8_UTF16NoReplacement(bytes, offset, offset + length, dst, 0);\n@@ -762,14 +769,1 @@\n-    static String newStringNoRepl(byte[] src, Charset cs) throws CharacterCodingException {\n-        try {\n-            return newStringNoRepl1(src, cs);\n-        } catch (IllegalArgumentException e) {\n-            \/\/newStringNoRepl1 throws IAE with MalformedInputException or CCE as the cause\n-            Throwable cause = e.getCause();\n-            if (cause instanceof MalformedInputException mie) {\n-                throw mie;\n-            }\n-            throw (CharacterCodingException)cause;\n-        }\n-    }\n-\n-    private static String newStringNoRepl1(byte[] src, Charset cs) {\n+    static String newStringNoReplacement(byte[] src, Charset cs) throws CharacterCodingException {\n@@ -781,1 +775,1 @@\n-            return newStringUTF8NoRepl(src, 0, src.length, false);\n+            return newStringUTF8NoReplacement(src, 0, src.length, false);\n@@ -794,1 +788,1 @@\n-                throwMalformed(src);\n+                throw malformedInputException(src, MalformedInputException.class);\n@@ -809,7 +803,1 @@\n-        int caLen;\n-        try {\n-            caLen = decodeWithDecoder(cd, ca, src, 0, src.length);\n-        } catch (CharacterCodingException x) {\n-            \/\/ throw via IAE\n-            throw new IllegalArgumentException(x);\n-        }\n+        int caLen = decodeWithDecoder(cd, ca, src, 0, src.length);\n@@ -852,1 +840,1 @@\n-            return encodeUTF8(coder, val, true);\n+            return encodeUTF8(coder, val);\n@@ -860,1 +848,1 @@\n-        return encodeWithEncoder(cs, coder, val, true);\n+        return encodeWithEncoder(cs, coder, val);\n@@ -863,1 +851,12 @@\n-    private static byte[] encodeWithEncoder(Charset cs, byte coder, byte[] val, boolean doReplace) {\n+    private static <E extends Exception> byte[] encodeWithEncoder(Charset cs, byte coder, byte[] val) {\n+        return encodeWithEncoder(cs, coder, val, null);\n+    }\n+\n+    private static <E extends Exception> byte[] encodeWithEncoderNoReplacement(Charset cs, byte coder, byte[] val)\n+            throws CharacterCodingException {\n+        return encodeWithEncoder(cs, coder, val, CharacterCodingException.class);\n+    }\n+\n+    private static <E extends Exception> byte[] encodeWithEncoder(\n+            Charset cs, byte coder, byte[] val, Class<E> characterCodingException)\n+            throws E {\n@@ -867,2 +866,2 @@\n-        \/\/ fastpath with ArrayEncoder implies `doReplace`.\n-        if (doReplace && ce instanceof ArrayEncoder ae) {\n+        \/\/ fastpath with ArrayEncoder implies replacement.\n+        if (characterCodingException == null && ce instanceof ArrayEncoder ae) {\n@@ -891,1 +890,1 @@\n-        if (doReplace) {\n+        if (characterCodingException == null) {\n@@ -907,2 +906,4 @@\n-            if (!doReplace) {\n-                throw new IllegalArgumentException(x);\n+            if (characterCodingException != null) {\n+                @SuppressWarnings(\"unchecked\")\n+                E cce = (E) x;\n+                throw cce;\n@@ -916,2 +917,6 @@\n-    \/*\n-     * Throws iae, instead of replacing, if unmappable.\n+    \/**\n+     * {@return the sequence of bytes obtained by encoding the given string in UTF-8}\n+     *\n+     * @param s the string to encode\n+     * @throws NullPointerException If {@code s} is null\n+     * @throws CharacterCodingException For malformed input or unmappable characters\n@@ -919,2 +924,2 @@\n-    static byte[] getBytesUTF8NoRepl(String s) {\n-        return encodeUTF8(s.coder(), s.value(), false);\n+    static byte[] getBytesUTF8NoReplacement(String s) throws CharacterCodingException {\n+        return encodeUTF8NoReplacement(s.coder(), s.value());  \/\/ Implicit null check on `s`\n@@ -927,2 +932,12 @@\n-    \/*\n-     * Throws CCE, instead of replacing, if unmappable.\n+    \/**\n+     * {@return the sequence of bytes obtained by encoding the given string in\n+     * the specified {@linkplain java.nio.charset.Charset charset}}\n+     * <p>\n+     * <b>WARNING: This method returns the {@code byte[]} backing the provided\n+     * {@code String}, if the input is ASCII. Hence, the returned byte array\n+     * must not be modified.<\/b>\n+     *\n+     * @param s the string to encode\n+     * @param cs the charset\n+     * @throws NullPointerException If {@code s} or {@code cs} is null\n+     * @throws CharacterCodingException For malformed input or unmappable characters\n@@ -930,15 +945,3 @@\n-    static byte[] getBytesNoRepl(String s, Charset cs) throws CharacterCodingException {\n-        try {\n-            return getBytesNoRepl1(s, cs);\n-        } catch (IllegalArgumentException e) {\n-            \/\/getBytesNoRepl1 throws IAE with UnmappableCharacterException or CCE as the cause\n-            Throwable cause = e.getCause();\n-            if (cause instanceof UnmappableCharacterException) {\n-                throw (UnmappableCharacterException)cause;\n-            }\n-            throw (CharacterCodingException)cause;\n-        }\n-    }\n-\n-    private static byte[] getBytesNoRepl1(String s, Charset cs) {\n-        byte[] val = s.value();\n+    static byte[] getBytesNoReplacement(String s, Charset cs) throws CharacterCodingException {\n+        Objects.requireNonNull(cs);\n+        byte[] val = s.value();     \/\/ Implicit null check on `s`\n@@ -950,1 +953,1 @@\n-            return encodeUTF8(coder, val, false);\n+            return encodeUTF8NoReplacement(coder, val);\n@@ -956,1 +959,1 @@\n-            return encode8859_1(coder, val, false);\n+            return encode8859_1NoReplacement(coder, val);\n@@ -963,1 +966,1 @@\n-                    throwUnmappable(val);\n+                    throw unmappableCharacterException(val, UnmappableCharacterException.class);\n@@ -967,1 +970,1 @@\n-        return encodeWithEncoder(cs, coder, val, false);\n+        return encodeWithEncoderNoReplacement(cs, coder, val);\n@@ -1009,1 +1012,5 @@\n-        return encode8859_1(coder, val, true);\n+        return encode8859_1(coder, val, null);\n+    }\n+\n+    private static byte[] encode8859_1NoReplacement(byte coder, byte[] val) throws UnmappableCharacterException {\n+        return encode8859_1(coder, val, UnmappableCharacterException.class);\n@@ -1012,1 +1019,1 @@\n-    private static byte[] encode8859_1(byte coder, byte[] val, boolean doReplace) {\n+    private static <E extends Exception> byte[] encode8859_1(byte coder, byte[] val, Class<E> unmappableCharacterException) throws E {\n@@ -1026,2 +1033,2 @@\n-                if (!doReplace) {\n-                    throwUnmappable(sp);\n+                if (unmappableCharacterException != null) {\n+                    throw unmappableCharacterException(sp, unmappableCharacterException);\n@@ -1121,1 +1128,13 @@\n-    private static int decodeUTF8_UTF16(byte[] src, int sp, int sl, byte[] dst, int dp, boolean doReplace) {\n+    private static <E extends Exception> int decodeUTF8_UTF16(byte[] src, int sp, int sl, byte[] dst, int dp) {\n+        return decodeUTF8_UTF16(src, sp, sl, dst, dp, null);\n+    }\n+\n+    private static <E extends Exception> int decodeUTF8_UTF16NoReplacement(\n+            byte[] src, int sp, int sl, byte[] dst, int dp)\n+            throws MalformedInputException {\n+        return decodeUTF8_UTF16(src, sp, sl, dst, dp, MalformedInputException.class);\n+    }\n+\n+    private static <E extends Exception> int decodeUTF8_UTF16(\n+            byte[] src, int sp, int sl, byte[] dst, int dp, Class <E> malformedInputException)\n+            throws E {\n@@ -1130,2 +1149,2 @@\n-                        if (!doReplace) {\n-                            throwMalformed(sp - 1, 1);\n+                        if (malformedInputException != null) {\n+                            throw malformedInputException(sp - 1, 1, malformedInputException);\n@@ -1140,2 +1159,2 @@\n-                if (!doReplace) {\n-                    throwMalformed(sp, 1);  \/\/ underflow()\n+                if (malformedInputException != null) {\n+                    throw malformedInputException(sp, 1, malformedInputException);  \/\/ underflow()\n@@ -1150,2 +1169,2 @@\n-                        if (!doReplace) {\n-                            throwMalformed(sp - 3, 3);\n+                        if (malformedInputException != null) {\n+                            throw malformedInputException(sp - 3, 3, malformedInputException);\n@@ -1159,2 +1178,2 @@\n-                            if (!doReplace) {\n-                                throwMalformed(sp - 3, 3);\n+                            if (malformedInputException != null) {\n+                                throw malformedInputException(sp - 3, 3, malformedInputException);\n@@ -1170,2 +1189,2 @@\n-                    if (!doReplace) {\n-                        throwMalformed(sp - 1, 2);\n+                    if (malformedInputException != null) {\n+                        throw malformedInputException(sp - 1, 2, malformedInputException);\n@@ -1176,2 +1195,2 @@\n-                if (!doReplace) {\n-                    throwMalformed(sp, 1);\n+                if (malformedInputException != null) {\n+                    throw malformedInputException(sp, 1, malformedInputException);\n@@ -1189,2 +1208,2 @@\n-                        if (!doReplace) {\n-                            throwMalformed(sp - 4, 4);\n+                        if (malformedInputException != null) {\n+                            throw malformedInputException(sp - 4, 4, malformedInputException);\n@@ -1203,2 +1222,2 @@\n-                    if (!doReplace) {\n-                        throwMalformed(sp - 1, 1);  \/\/ or 2\n+                    if (malformedInputException != null) {\n+                        throw malformedInputException(sp - 1, 1, malformedInputException);  \/\/ or 2\n@@ -1209,2 +1228,2 @@\n-                if (!doReplace) {\n-                    throwMalformed(sp - 1, 1);\n+                if (malformedInputException != null) {\n+                    throw malformedInputException(sp - 1, 1, malformedInputException);\n@@ -1219,2 +1238,2 @@\n-                if (!doReplace) {\n-                    throwMalformed(sp - 1, 1);\n+                if (malformedInputException != null) {\n+                    throw malformedInputException(sp - 1, 1, malformedInputException);\n@@ -1262,1 +1281,3 @@\n-    private static void throwMalformed(int off, int nb) {\n+    @SuppressWarnings(\"unchecked\")\n+    private static <E extends Exception> E malformedInputException(int off, int nb, Class<E> exceptionType) {\n+        MalformedInputException mie = new MalformedInputException(nb);\n@@ -1264,1 +1285,2 @@\n-        throw new IllegalArgumentException(msg, new MalformedInputException(nb));\n+        mie.initCause(new IllegalArgumentException(msg));\n+        return (E) mie;\n@@ -1267,1 +1289,1 @@\n-    private static void throwMalformed(byte[] val) {\n+    private static <E extends Exception> E malformedInputException(byte[] val, Class<E> exceptionType) {\n@@ -1269,1 +1291,1 @@\n-        throwMalformed(dp, 1);\n+        return malformedInputException(dp, 1, exceptionType);\n@@ -1272,1 +1294,3 @@\n-    private static void throwUnmappable(int off) {\n+    @SuppressWarnings(\"unchecked\")\n+    private static <E extends Exception> E unmappableCharacterException(int off, Class<E> exceptionType) {\n+        UnmappableCharacterException uce = new UnmappableCharacterException(1);\n@@ -1274,1 +1298,2 @@\n-        throw new IllegalArgumentException(msg, new UnmappableCharacterException(1));\n+        uce.initCause(new IllegalArgumentException(msg, uce));\n+        return (E) uce;\n@@ -1277,1 +1302,1 @@\n-    private static void throwUnmappable(byte[] val) {\n+    private static <E extends Exception> E unmappableCharacterException(byte[] val, Class<E> exceptionType) {\n@@ -1279,1 +1304,9 @@\n-        throwUnmappable(dp);\n+        return unmappableCharacterException(dp, exceptionType);\n+    }\n+\n+    private static byte[] encodeUTF8(byte coder, byte[] val) {\n+        return encodeUTF8(coder, val, null);\n+    }\n+\n+    private static byte[] encodeUTF8NoReplacement(byte coder, byte[] val) throws UnmappableCharacterException {\n+        return encodeUTF8(coder, val, UnmappableCharacterException.class);\n@@ -1282,1 +1315,1 @@\n-    private static byte[] encodeUTF8(byte coder, byte[] val, boolean doReplace) {\n+    private static <E extends Exception> byte[] encodeUTF8(byte coder, byte[] val, Class<E> unmappableCharacterException) throws E {\n@@ -1284,1 +1317,1 @@\n-            return encodeUTF8_UTF16(val, doReplace);\n+            return encodeUTF8_UTF16(val, unmappableCharacterException);\n@@ -1307,1 +1340,1 @@\n-    private static byte[] encodeUTF8_UTF16(byte[] val, boolean doReplace) {\n+    private static <E extends Exception> byte[] encodeUTF8_UTF16(byte[] val, Class<E> unmappableCharacterException) throws E {\n@@ -1313,1 +1346,1 @@\n-        long allocLen = (sl * 3 < 0) ? computeSizeUTF8_UTF16(val, doReplace) : sl * 3;\n+        long allocLen = (sl * 3 < 0) ? computeSizeUTF8_UTF16(val, unmappableCharacterException) : sl * 3;\n@@ -1342,1 +1375,1 @@\n-                    if (doReplace) {\n+                    if (unmappableCharacterException == null) {\n@@ -1345,1 +1378,1 @@\n-                        throwUnmappable(sp - 1);\n+                        throw unmappableCharacterException(sp - 1, unmappableCharacterException);\n@@ -1369,2 +1402,0 @@\n-     * @param val UTF16 encoded byte array\n-     * @param doReplace true to replace unmappable characters\n@@ -1372,1 +1403,1 @@\n-    private static long computeSizeUTF8_UTF16(byte[] val, boolean doReplace) {\n+    private static <E extends Exception> long computeSizeUTF8_UTF16(byte[] val, Class<E> unmappableCharacterException) throws E {\n@@ -1391,1 +1422,1 @@\n-                    if (doReplace) {\n+                    if (unmappableCharacterException == null) {\n@@ -1394,1 +1425,1 @@\n-                        throwUnmappable(sp - 1);\n+                        throw unmappableCharacterException(sp - 1, unmappableCharacterException);\n@@ -1850,1 +1881,1 @@\n-     }\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":139,"deletions":108,"binary":false,"changes":247,"status":"modified"},{"patch":"@@ -58,1 +58,0 @@\n-import java.util.concurrent.ScheduledExecutorService;\n@@ -2127,0 +2126,1 @@\n+\n@@ -2130,2 +2130,3 @@\n-            public String uncheckedNewStringNoRepl(byte[] bytes, Charset cs) throws CharacterCodingException  {\n-                return String.newStringNoRepl(bytes, cs);\n+\n+            public String uncheckedNewStringNoReplacement(byte[] bytes, Charset cs) throws CharacterCodingException  {\n+                return String.newStringNoReplacement(bytes, cs);\n@@ -2133,0 +2134,1 @@\n+\n@@ -2136,0 +2138,1 @@\n+\n@@ -2139,2 +2142,3 @@\n-            public byte[] uncheckedGetBytesNoRepl(String s, Charset cs) throws CharacterCodingException {\n-                return String.getBytesNoRepl(s, cs);\n+\n+            public byte[] uncheckedGetBytesNoReplacement(String s, Charset cs) throws CharacterCodingException {\n+                return String.getBytesNoReplacement(s, cs);\n@@ -2143,2 +2147,2 @@\n-            public String newStringUTF8NoRepl(byte[] bytes, int off, int len) {\n-                return String.newStringUTF8NoRepl(bytes, off, len, true);\n+            public String newStringUTF8NoReplacement(byte[] bytes, int off, int len) throws CharacterCodingException {\n+                return String.newStringUTF8NoReplacement(bytes, off, len, true);\n@@ -2147,2 +2151,2 @@\n-            public byte[] getBytesUTF8NoRepl(String s) {\n-                return String.getBytesUTF8NoRepl(s);\n+            public byte[] getBytesUTF8NoReplacement(String s) throws CharacterCodingException {\n+                return String.getBytesUTF8NoReplacement(s);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -4153,1 +4153,1 @@\n-                return JLA.uncheckedNewStringNoRepl(buf, StandardCharsets.ISO_8859_1);\n+                return JLA.uncheckedNewStringNoReplacement(buf, StandardCharsets.ISO_8859_1);\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3046,1 +3046,1 @@\n-        return JLA.uncheckedNewStringNoRepl(ba, cs);\n+        return JLA.uncheckedNewStringNoReplacement(ba, cs);\n@@ -3365,1 +3365,1 @@\n-        byte[] bytes = JLA.uncheckedGetBytesNoRepl(String.valueOf(csq), cs);\n+        byte[] bytes = JLA.uncheckedGetBytesNoReplacement(String.valueOf(csq), cs);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/Files.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -465,1 +465,1 @@\n-            return jla.uncheckedNewStringNoRepl(rep, StandardCharsets.ISO_8859_1);\n+            return jla.uncheckedNewStringNoReplacement(rep, StandardCharsets.ISO_8859_1);\n@@ -699,1 +699,1 @@\n-            return jla.uncheckedNewStringNoRepl(rep, StandardCharsets.ISO_8859_1);\n+            return jla.uncheckedNewStringNoReplacement(rep, StandardCharsets.ISO_8859_1);\n@@ -735,1 +735,1 @@\n-            return jla.uncheckedNewStringNoRepl(rep, StandardCharsets.ISO_8859_1);\n+            return jla.uncheckedNewStringNoReplacement(rep, StandardCharsets.ISO_8859_1);\n@@ -763,1 +763,1 @@\n-            return jla.uncheckedNewStringNoRepl(rep, StandardCharsets.ISO_8859_1);\n+            return jla.uncheckedNewStringNoReplacement(rep, StandardCharsets.ISO_8859_1);\n@@ -799,1 +799,1 @@\n-            return jla.uncheckedNewStringNoRepl(rep, StandardCharsets.ISO_8859_1);\n+            return jla.uncheckedNewStringNoReplacement(rep, StandardCharsets.ISO_8859_1);\n@@ -827,1 +827,1 @@\n-            return jla.uncheckedNewStringNoRepl(rep, StandardCharsets.ISO_8859_1);\n+            return jla.uncheckedNewStringNoReplacement(rep, StandardCharsets.ISO_8859_1);\n","filename":"src\/java.base\/share\/classes\/java\/util\/HexFormat.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -483,1 +483,1 @@\n-            return jla.uncheckedNewStringNoRepl(buf, StandardCharsets.ISO_8859_1);\n+            return jla.uncheckedNewStringNoReplacement(buf, StandardCharsets.ISO_8859_1);\n","filename":"src\/java.base\/share\/classes\/java\/util\/UUID.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -255,1 +255,5 @@\n-            return JLA.newStringUTF8NoRepl(ba, off, length);\n+            try {\n+                return JLA.newStringUTF8NoReplacement(ba, off, length);\n+            } catch (CharacterCodingException cce) {\n+                throw new IllegalArgumentException(cce);\n+            }\n@@ -260,1 +264,5 @@\n-            return JLA.getBytesUTF8NoRepl(s);\n+            try {\n+                return JLA.getBytesUTF8NoReplacement(s);\n+            } catch (CharacterCodingException cce) {\n+                throw new IllegalArgumentException(cce);\n+            }\n@@ -274,1 +282,1 @@\n-                \/\/ We use the JLA.newStringUTF8NoRepl variant to throw\n+                \/\/ We use the JLA.newStringUTF8NoReplacement variant to throw\n@@ -276,1 +284,1 @@\n-                return hash(JLA.newStringUTF8NoRepl(a, off, len));\n+                return hash(JLA.newStringUTF8NoReplacement(a, off, len));\n@@ -292,1 +300,1 @@\n-                byte[] encoded = JLA.uncheckedGetBytesNoRepl(str, UTF_8.INSTANCE);\n+                byte[] encoded = JLA.uncheckedGetBytesNoReplacement(str, UTF_8.INSTANCE);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipCoder.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -333,1 +333,1 @@\n-    String uncheckedNewStringNoRepl(byte[] bytes, Charset cs) throws CharacterCodingException;\n+    String uncheckedNewStringNoReplacement(byte[] bytes, Charset cs) throws CharacterCodingException;\n@@ -336,2 +336,2 @@\n-     * Encode the given string into a sequence of bytes using the specified\n-     * {@linkplain java.nio.charset.Charset charset}.\n+     * {@return the sequence of bytes obtained by encoding the given string in\n+     * the specified {@linkplain java.nio.charset.Charset charset}}\n@@ -342,3 +342,0 @@\n-     * <p>\n-     * This method throws {@code CharacterCodingException} instead of replacing\n-     * when malformed input or unmappable characters are encountered.\n@@ -348,2 +345,2 @@\n-     * @return the encoded bytes\n-     * @throws CharacterCodingException for malformed input or unmappable characters\n+     * @throws NullPointerException If {@code s} or {@code cs} is null\n+     * @throws CharacterCodingException For malformed input or unmappable characters\n@@ -351,1 +348,1 @@\n-    byte[] uncheckedGetBytesNoRepl(String s, Charset cs) throws CharacterCodingException;\n+    byte[] uncheckedGetBytesNoReplacement(String s, Charset cs) throws CharacterCodingException;\n@@ -354,1 +351,1 @@\n-     * Returns a new string by decoding from the given UTF-8 bytes array.\n+     * {@return a new string by decoding from the given UTF-8 bytes array}\n@@ -356,4 +353,7 @@\n-     * @param off the index of the first byte to decode\n-     * @param len the number of bytes to decode\n-     * @return the newly created string\n-     * @throws IllegalArgumentException for malformed or unmappable bytes.\n+     * @param offset the index of the first byte to decode\n+     * @param length the number of bytes to decode\n+     * @throws NullPointerException If {@code bytes} is null\n+     * @throws StringIndexOutOfBoundsException If {@code offset} is negative,\n+     *         {@code length} is negative, or {@code offset} is greater than\n+     *         {@code bytes.length - length}\n+     * @throws CharacterCodingException For malformed input or unmappable characters\n@@ -361,1 +361,1 @@\n-    String newStringUTF8NoRepl(byte[] bytes, int off, int len);\n+    String newStringUTF8NoReplacement(byte[] bytes, int offset, int length) throws CharacterCodingException;\n@@ -387,1 +387,1 @@\n-     * Encode the given string into a sequence of bytes using utf8.\n+     * {@return the sequence of bytes obtained by encoding the given string in UTF-8}\n@@ -390,2 +390,2 @@\n-     * @return the encoded bytes in utf8\n-     * @throws IllegalArgumentException for malformed surrogates\n+     * @throws NullPointerException If {@code s} is null\n+     * @throws CharacterCodingException For malformed input or unmappable characters\n@@ -393,1 +393,1 @@\n-    byte[] getBytesUTF8NoRepl(String s);\n+    byte[] getBytesUTF8NoReplacement(String s) throws CharacterCodingException;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-            return JLA.uncheckedGetBytesNoRepl(input, Util.jnuEncoding());\n+            return JLA.uncheckedGetBytesNoReplacement(input, Util.jnuEncoding());\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixPath.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @summary Tests for *NoRepl() shared secret methods.\n+ * @summary Tests for *NoReplacement() shared secret methods.\n@@ -48,1 +48,1 @@\n-     * Verifies newStringNoRepl() throws a CharacterCodingException.\n+     * Verifies `uncheckedNewStringNoReplacement()` throws a `CharacterCodingException`.\n@@ -52,1 +52,1 @@\n-    public void newStringNoReplTest() throws IOException {\n+    public void uncheckedNewStringNoReplacementTest() throws IOException {\n@@ -70,1 +70,1 @@\n-     * Verifies getBytesNoRepl() throws a CharacterCodingException.\n+     * Verifies `uncheckedGetBytesNoReplacement()` throws a `CharacterCodingException`.\n@@ -74,1 +74,1 @@\n-    public void getBytesNoReplTest() throws IOException {\n+    public void uncheckedGetBytesNoReplacementTest() throws IOException {\n","filename":"test\/jdk\/java\/lang\/String\/NoReplTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}