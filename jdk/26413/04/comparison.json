{"files":[{"patch":"@@ -607,1 +607,1 @@\n-            dp = decodeUTF8_UTF16(latin1, sp, length, utf16, dp, true);\n+            dp = decodeUTF8_UTF16(latin1, sp, length, utf16, dp);\n@@ -614,1 +614,1 @@\n-            int dp = decodeUTF8_UTF16(bytes, offset, offset + length, dst, 0, true);\n+            int dp = decodeUTF8_UTF16(bytes, offset, offset + length, dst, 0);\n@@ -692,3 +692,14 @@\n-     * Throws iae, instead of replacing, if malformed or unmappable.\n-     * The byte array can be exclusively used to construct\n-     * the string and is not modified or used for any other purpose.\n+     * {@return a new string by decoding from the given UTF-8 bytes array}\n+     * <p>\n+     * <b>WARNING: The caller of this method is assumed to have relinquished\n+     * and transferred the ownership of the byte array<\/b>. It can thus be\n+     * exclusively used to construct the {@code String}.\n+     *\n+     * @param bytes byte array containing UTF-8 encoded characters\n+     * @param offset the index of the first byte to decode\n+     * @param length the number of bytes to decode\n+     * @throws NullPointerException If {@code bytes} is null\n+     * @throws StringIndexOutOfBoundsException If {@code offset} is negative,\n+     *         {@code length} is negative, or {@code offset} is greater than\n+     *         {@code bytes.length - length}\n+     * @throws CharacterCodingException for malformed input or unmappable characters\n@@ -696,2 +707,2 @@\n-    private static String newStringUTF8NoRepl(byte[] bytes, int offset, int length) {\n-        checkBoundsOffCount(offset, length, bytes.length);\n+    private static String newStringUTF8NoReplacement(byte[] bytes, int offset, int length) throws CharacterCodingException {\n+        checkBoundsOffCount(offset, length, bytes.length);  \/\/ Implicit null check on `bytes`\n@@ -748,1 +759,1 @@\n-            dp = decodeUTF8_UTF16(bytes, offset, sl, dst, dp, false);\n+            dp = decodeUTF8_UTF16NoReplacement(bytes, offset, sl, dst, dp);\n@@ -751,1 +762,1 @@\n-            dp = decodeUTF8_UTF16(bytes, offset, offset + length, dst, 0, false);\n+            dp = decodeUTF8_UTF16NoReplacement(bytes, offset, offset + length, dst, 0);\n@@ -787,14 +798,1 @@\n-    static String newStringNoRepl(byte[] src, Charset cs) throws CharacterCodingException {\n-        try {\n-            return newStringNoRepl1(src, cs);\n-        } catch (IllegalArgumentException e) {\n-            \/\/newStringNoRepl1 throws IAE with MalformedInputException or CCE as the cause\n-            Throwable cause = e.getCause();\n-            if (cause instanceof MalformedInputException mie) {\n-                throw mie;\n-            }\n-            throw (CharacterCodingException)cause;\n-        }\n-    }\n-\n-    private static String newStringNoRepl1(byte[] src, Charset cs) {\n+    static String newStringNoReplacement(byte[] src, Charset cs) throws CharacterCodingException {\n@@ -806,1 +804,1 @@\n-            return newStringUTF8NoRepl(src, 0, src.length);\n+            return newStringUTF8NoReplacement(src, 0, src.length);\n@@ -819,1 +817,1 @@\n-                throwMalformed(src);\n+                throw malformedInputException(src, MalformedInputException.class);\n@@ -834,7 +832,1 @@\n-        int caLen;\n-        try {\n-            caLen = decodeWithDecoder(cd, ca, src, 0, src.length);\n-        } catch (CharacterCodingException x) {\n-            \/\/ throw via IAE\n-            throw new IllegalArgumentException(x);\n-        }\n+        int caLen = decodeWithDecoder(cd, ca, src, 0, src.length);\n@@ -877,1 +869,1 @@\n-            return encodeUTF8(coder, val, true);\n+            return encodeUTF8(coder, val);\n@@ -885,1 +877,10 @@\n-        return encodeWithEncoder(cs, coder, val, true);\n+        return encodeWithEncoder(cs, coder, val);\n+    }\n+\n+    private static byte[] encodeWithEncoder(Charset cs, byte coder, byte[] val) {\n+        return encodeWithEncoder(cs, coder, val, null);\n+    }\n+\n+    private static byte[] encodeWithEncoderNoReplacement(Charset cs, byte coder, byte[] val)\n+            throws CharacterCodingException {\n+        return encodeWithEncoder(cs, coder, val, CharacterCodingException.class);\n@@ -888,1 +889,3 @@\n-    private static byte[] encodeWithEncoder(Charset cs, byte coder, byte[] val, boolean doReplace) {\n+    private static <E extends Exception> byte[] encodeWithEncoder(\n+            Charset cs, byte coder, byte[] val, Class<E> characterCodingException)\n+            throws E {\n@@ -892,0 +895,1 @@\n+        boolean doReplace = characterCodingException == null;\n@@ -933,1 +937,3 @@\n-                throw new IllegalArgumentException(x);\n+                @SuppressWarnings(\"unchecked\")\n+                E cce = (E) x;\n+                throw cce;\n@@ -941,2 +947,6 @@\n-    \/*\n-     * Throws iae, instead of replacing, if unmappable.\n+    \/**\n+     * {@return the sequence of bytes obtained by encoding the given string in UTF-8}\n+     *\n+     * @param s the string to encode\n+     * @throws NullPointerException If {@code s} is null\n+     * @throws CharacterCodingException For malformed input or unmappable characters\n@@ -944,2 +954,2 @@\n-    static byte[] getBytesUTF8NoRepl(String s) {\n-        return encodeUTF8(s.coder(), s.value(), false);\n+    static byte[] getBytesUTF8NoReplacement(String s) throws CharacterCodingException {\n+        return encodeUTF8NoReplacement(s.coder(), s.value());  \/\/ Implicit null check on `s`\n@@ -952,2 +962,12 @@\n-    \/*\n-     * Throws CCE, instead of replacing, if unmappable.\n+    \/**\n+     * {@return the sequence of bytes obtained by encoding the given string in\n+     * the specified {@linkplain java.nio.charset.Charset charset}}\n+     * <p>\n+     * <b>WARNING: This method returns the {@code byte[]} backing the provided\n+     * {@code String}, if the input is ASCII. Hence, the returned byte array\n+     * must not be modified.<\/b>\n+     *\n+     * @param s the string to encode\n+     * @param cs the charset\n+     * @throws NullPointerException If {@code s} or {@code cs} is null\n+     * @throws CharacterCodingException For malformed input or unmappable characters\n@@ -955,15 +975,3 @@\n-    static byte[] getBytesNoRepl(String s, Charset cs) throws CharacterCodingException {\n-        try {\n-            return getBytesNoRepl1(s, cs);\n-        } catch (IllegalArgumentException e) {\n-            \/\/getBytesNoRepl1 throws IAE with UnmappableCharacterException or CCE as the cause\n-            Throwable cause = e.getCause();\n-            if (cause instanceof UnmappableCharacterException) {\n-                throw (UnmappableCharacterException)cause;\n-            }\n-            throw (CharacterCodingException)cause;\n-        }\n-    }\n-\n-    private static byte[] getBytesNoRepl1(String s, Charset cs) {\n-        byte[] val = s.value();\n+    static byte[] getBytesNoReplacement(String s, Charset cs) throws CharacterCodingException {\n+        Objects.requireNonNull(cs);\n+        byte[] val = s.value();     \/\/ Implicit null check on `s`\n@@ -975,1 +983,1 @@\n-            return encodeUTF8(coder, val, false);\n+            return encodeUTF8NoReplacement(coder, val);\n@@ -981,1 +989,1 @@\n-            return encode8859_1(coder, val, false);\n+            return encode8859_1NoReplacement(coder, val);\n@@ -988,1 +996,1 @@\n-                    throwUnmappable(val);\n+                    throw unmappableCharacterException(val, UnmappableCharacterException.class);\n@@ -992,1 +1000,1 @@\n-        return encodeWithEncoder(cs, coder, val, false);\n+        return encodeWithEncoderNoReplacement(cs, coder, val);\n@@ -1034,1 +1042,1 @@\n-        return encode8859_1(coder, val, true);\n+        return encode8859_1(coder, val, null);\n@@ -1037,1 +1045,5 @@\n-    private static byte[] encode8859_1(byte coder, byte[] val, boolean doReplace) {\n+    private static byte[] encode8859_1NoReplacement(byte coder, byte[] val) throws UnmappableCharacterException {\n+        return encode8859_1(coder, val, UnmappableCharacterException.class);\n+    }\n+\n+    private static <E extends Exception> byte[] encode8859_1(byte coder, byte[] val, Class<E> unmappableCharacterException) throws E {\n@@ -1051,2 +1063,2 @@\n-                if (!doReplace) {\n-                    throwUnmappable(sp);\n+                if (unmappableCharacterException != null) {\n+                    throw unmappableCharacterException(sp, unmappableCharacterException);\n@@ -1146,1 +1158,13 @@\n-    private static int decodeUTF8_UTF16(byte[] src, int sp, int sl, byte[] dst, int dp, boolean doReplace) {\n+    private static int decodeUTF8_UTF16(byte[] src, int sp, int sl, byte[] dst, int dp) {\n+        return decodeUTF8_UTF16(src, sp, sl, dst, dp, null);\n+    }\n+\n+    private static int decodeUTF8_UTF16NoReplacement(\n+            byte[] src, int sp, int sl, byte[] dst, int dp)\n+            throws MalformedInputException {\n+        return decodeUTF8_UTF16(src, sp, sl, dst, dp, MalformedInputException.class);\n+    }\n+\n+    private static <E extends Exception> int decodeUTF8_UTF16(\n+            byte[] src, int sp, int sl, byte[] dst, int dp, Class <E> malformedInputException)\n+            throws E {\n@@ -1155,2 +1179,2 @@\n-                        if (!doReplace) {\n-                            throwMalformed(sp - 1, 1);\n+                        if (malformedInputException != null) {\n+                            throw malformedInputException(sp - 1, 1, malformedInputException);\n@@ -1165,2 +1189,2 @@\n-                if (!doReplace) {\n-                    throwMalformed(sp, 1);  \/\/ underflow()\n+                if (malformedInputException != null) {\n+                    throw malformedInputException(sp, 1, malformedInputException);  \/\/ underflow()\n@@ -1175,2 +1199,2 @@\n-                        if (!doReplace) {\n-                            throwMalformed(sp - 3, 3);\n+                        if (malformedInputException != null) {\n+                            throw malformedInputException(sp - 3, 3, malformedInputException);\n@@ -1184,2 +1208,2 @@\n-                            if (!doReplace) {\n-                                throwMalformed(sp - 3, 3);\n+                            if (malformedInputException != null) {\n+                                throw malformedInputException(sp - 3, 3, malformedInputException);\n@@ -1195,2 +1219,2 @@\n-                    if (!doReplace) {\n-                        throwMalformed(sp - 1, 2);\n+                    if (malformedInputException != null) {\n+                        throw malformedInputException(sp - 1, 2, malformedInputException);\n@@ -1201,2 +1225,2 @@\n-                if (!doReplace) {\n-                    throwMalformed(sp, 1);\n+                if (malformedInputException != null) {\n+                    throw malformedInputException(sp, 1, malformedInputException);\n@@ -1214,2 +1238,2 @@\n-                        if (!doReplace) {\n-                            throwMalformed(sp - 4, 4);\n+                        if (malformedInputException != null) {\n+                            throw malformedInputException(sp - 4, 4, malformedInputException);\n@@ -1228,2 +1252,2 @@\n-                    if (!doReplace) {\n-                        throwMalformed(sp - 1, 1);  \/\/ or 2\n+                    if (malformedInputException != null) {\n+                        throw malformedInputException(sp - 1, 1, malformedInputException);  \/\/ or 2\n@@ -1234,2 +1258,2 @@\n-                if (!doReplace) {\n-                    throwMalformed(sp - 1, 1);\n+                if (malformedInputException != null) {\n+                    throw malformedInputException(sp - 1, 1, malformedInputException);\n@@ -1244,2 +1268,2 @@\n-                if (!doReplace) {\n-                    throwMalformed(sp - 1, 1);\n+                if (malformedInputException != null) {\n+                    throw malformedInputException(sp - 1, 1, malformedInputException);\n@@ -1287,1 +1311,3 @@\n-    private static void throwMalformed(int off, int nb) {\n+    @SuppressWarnings(\"unchecked\")\n+    private static <E extends Exception> E malformedInputException(int off, int nb, Class<E> exceptionType) {\n+        MalformedInputException mie = new MalformedInputException(nb);\n@@ -1289,1 +1315,2 @@\n-        throw new IllegalArgumentException(msg, new MalformedInputException(nb));\n+        mie.initCause(new IllegalArgumentException(msg));\n+        return (E) mie;\n@@ -1292,1 +1319,1 @@\n-    private static void throwMalformed(byte[] val) {\n+    private static <E extends Exception> E malformedInputException(byte[] val, Class<E> exceptionType) {\n@@ -1294,1 +1321,1 @@\n-        throwMalformed(dp, 1);\n+        return malformedInputException(dp, 1, exceptionType);\n@@ -1297,1 +1324,3 @@\n-    private static void throwUnmappable(int off) {\n+    @SuppressWarnings(\"unchecked\")\n+    private static <E extends Exception> E unmappableCharacterException(int off, Class<E> exceptionType) {\n+        UnmappableCharacterException uce = new UnmappableCharacterException(1);\n@@ -1299,1 +1328,2 @@\n-        throw new IllegalArgumentException(msg, new UnmappableCharacterException(1));\n+        uce.initCause(new IllegalArgumentException(msg, uce));\n+        return (E) uce;\n@@ -1302,1 +1332,1 @@\n-    private static void throwUnmappable(byte[] val) {\n+    private static <E extends Exception> E unmappableCharacterException(byte[] val, Class<E> exceptionType) {\n@@ -1304,1 +1334,9 @@\n-        throwUnmappable(dp);\n+        return unmappableCharacterException(dp, exceptionType);\n+    }\n+\n+    private static byte[] encodeUTF8(byte coder, byte[] val) {\n+        return encodeUTF8(coder, val, null);\n+    }\n+\n+    private static byte[] encodeUTF8NoReplacement(byte coder, byte[] val) throws UnmappableCharacterException {\n+        return encodeUTF8(coder, val, UnmappableCharacterException.class);\n@@ -1307,1 +1345,1 @@\n-    private static byte[] encodeUTF8(byte coder, byte[] val, boolean doReplace) {\n+    private static <E extends Exception> byte[] encodeUTF8(byte coder, byte[] val, Class<E> unmappableCharacterException) throws E {\n@@ -1309,1 +1347,1 @@\n-            return encodeUTF8_UTF16(val, doReplace);\n+            return encodeUTF8_UTF16(val, unmappableCharacterException);\n@@ -1337,1 +1375,1 @@\n-    private static byte[] encodeUTF8_UTF16(byte[] val, boolean doReplace) {\n+    private static <E extends Exception> byte[] encodeUTF8_UTF16(byte[] val, Class<E> unmappableCharacterException) throws E {\n@@ -1343,1 +1381,1 @@\n-        long allocLen = (sl * 3 < 0) ? computeSizeUTF8_UTF16(val, doReplace) : sl * 3;\n+        long allocLen = (sl * 3 < 0) ? computeSizeUTF8_UTF16(val, unmappableCharacterException) : sl * 3;\n@@ -1372,1 +1410,1 @@\n-                    if (doReplace) {\n+                    if (unmappableCharacterException == null) {\n@@ -1375,1 +1413,1 @@\n-                        throwUnmappable(sp - 1);\n+                        throw unmappableCharacterException(sp - 1, unmappableCharacterException);\n@@ -1399,2 +1437,0 @@\n-     * @param val UTF16 encoded byte array\n-     * @param doReplace true to replace unmappable characters\n@@ -1402,1 +1438,1 @@\n-    private static long computeSizeUTF8_UTF16(byte[] val, boolean doReplace) {\n+    private static <E extends Exception> long computeSizeUTF8_UTF16(byte[] val, Class<E> unmappableCharacterException) throws E {\n@@ -1421,1 +1457,1 @@\n-                    if (doReplace) {\n+                    if (unmappableCharacterException == null) {\n@@ -1424,1 +1460,1 @@\n-                        throwUnmappable(sp - 1);\n+                        throw unmappableCharacterException(sp - 1, unmappableCharacterException);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":141,"deletions":105,"binary":false,"changes":246,"status":"modified"},{"patch":"@@ -2126,0 +2126,1 @@\n+\n@@ -2134,2 +2135,2 @@\n-            public String uncheckedNewStringNoRepl(byte[] bytes, Charset cs) throws CharacterCodingException  {\n-                return String.newStringNoRepl(bytes, cs);\n+            public String uncheckedNewStringNoReplacement(byte[] bytes, Charset cs) throws CharacterCodingException  {\n+                return String.newStringNoReplacement(bytes, cs);\n@@ -2137,0 +2138,1 @@\n+\n@@ -2140,0 +2142,1 @@\n+\n@@ -2143,2 +2146,3 @@\n-            public byte[] uncheckedGetBytesNoRepl(String s, Charset cs) throws CharacterCodingException {\n-                return String.getBytesNoRepl(s, cs);\n+\n+            public byte[] uncheckedGetBytesNoReplacement(String s, Charset cs) throws CharacterCodingException {\n+                return String.getBytesNoReplacement(s, cs);\n@@ -2147,2 +2151,2 @@\n-            public byte[] getBytesUTF8NoRepl(String s) {\n-                return String.getBytesUTF8NoRepl(s);\n+            public byte[] getBytesUTF8NoReplacement(String s) throws CharacterCodingException {\n+                return String.getBytesUTF8NoReplacement(s);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -3046,1 +3046,1 @@\n-        return JLA.uncheckedNewStringNoRepl(ba, cs);\n+        return JLA.uncheckedNewStringNoReplacement(ba, cs);\n@@ -3365,1 +3365,1 @@\n-        byte[] bytes = JLA.uncheckedGetBytesNoRepl(String.valueOf(csq), cs);\n+        byte[] bytes = JLA.uncheckedGetBytesNoReplacement(String.valueOf(csq), cs);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/Files.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -259,1 +259,1 @@\n-                return JLA.uncheckedNewStringNoRepl(bytes, StandardCharsets.UTF_8);\n+                return JLA.uncheckedNewStringNoReplacement(bytes, StandardCharsets.UTF_8);\n@@ -267,1 +267,5 @@\n-            return JLA.getBytesUTF8NoRepl(s);\n+            try {\n+                return JLA.getBytesUTF8NoReplacement(s);\n+            } catch (CharacterCodingException cce) {\n+                throw new IllegalArgumentException(cce);\n+            }\n@@ -281,2 +285,0 @@\n-                \/\/ We use the JLA.newStringUTF8NoRepl variant to throw\n-                \/\/ exceptions eagerly when opening ZipFiles\n@@ -299,1 +301,1 @@\n-                byte[] encoded = JLA.uncheckedGetBytesNoRepl(str, UTF_8.INSTANCE);\n+                byte[] encoded = JLA.uncheckedGetBytesNoReplacement(str, UTF_8.INSTANCE);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipCoder.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-import java.util.function.BiFunction;\n@@ -346,1 +345,1 @@\n-    String uncheckedNewStringNoRepl(byte[] bytes, Charset cs) throws CharacterCodingException;\n+    String uncheckedNewStringNoReplacement(byte[] bytes, Charset cs) throws CharacterCodingException;\n@@ -349,2 +348,2 @@\n-     * Encode the given string into a sequence of bytes using the specified\n-     * {@linkplain java.nio.charset.Charset charset}.\n+     * {@return the sequence of bytes obtained by encoding the given string in\n+     * the specified {@linkplain java.nio.charset.Charset charset}}\n@@ -355,3 +354,0 @@\n-     * <p>\n-     * This method throws {@code CharacterCodingException} instead of replacing\n-     * when malformed input or unmappable characters are encountered.\n@@ -361,1 +357,1 @@\n-     * @return the encoded bytes\n+     * @throws NullPointerException If {@code s} or {@code cs} is null\n@@ -364,1 +360,1 @@\n-    byte[] uncheckedGetBytesNoRepl(String s, Charset cs) throws CharacterCodingException;\n+    byte[] uncheckedGetBytesNoReplacement(String s, Charset cs) throws CharacterCodingException;\n@@ -390,1 +386,1 @@\n-     * Encode the given string into a sequence of bytes using utf8.\n+     * {@return the sequence of bytes obtained by encoding the given string in UTF-8}\n@@ -393,2 +389,2 @@\n-     * @return the encoded bytes in utf8\n-     * @throws IllegalArgumentException for malformed surrogates\n+     * @throws NullPointerException If {@code s} is null\n+     * @throws CharacterCodingException For malformed input or unmappable characters\n@@ -396,1 +392,1 @@\n-    byte[] getBytesUTF8NoRepl(String s);\n+    byte[] getBytesUTF8NoReplacement(String s) throws CharacterCodingException;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-            return JLA.uncheckedGetBytesNoRepl(input, Util.jnuEncoding());\n+            return JLA.uncheckedGetBytesNoReplacement(input, Util.jnuEncoding());\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixPath.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @summary Tests for *NoRepl() shared secret methods.\n+ * @summary Tests for *NoReplacement() shared secret methods.\n@@ -48,2 +48,2 @@\n-     * Verifies newStringNoRepl() throws a CharacterCodingException.\n-     * The method is invoked by `Files.readString()` method.\n+     * Verifies {@code uncheckedNewStringNoReplacement()} throws a {@link CharacterCodingException}.\n+     * The method is invoked by {@code Files.readString()} method.\n@@ -52,1 +52,1 @@\n-    public void newStringNoReplTest() throws IOException {\n+    public void uncheckedNewStringNoReplacementTest() throws IOException {\n@@ -70,2 +70,2 @@\n-     * Verifies getBytesNoRepl() throws a CharacterCodingException.\n-     * The method is invoked by `Files.writeString()` method.\n+     * Verifies {@code uncheckedGetBytesNoReplacement()} throws a {@link CharacterCodingException}.\n+     * The method is invoked by {@code Files.writeString()} method.\n@@ -74,1 +74,1 @@\n-    public void getBytesNoReplTest() throws IOException {\n+    public void uncheckedGetBytesNoReplacementTest() throws IOException {\n","filename":"test\/jdk\/java\/lang\/String\/NoReplTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}