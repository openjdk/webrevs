{"files":[{"patch":"@@ -891,2 +891,1 @@\n-            \/\/ Parametrizing on exception type to enable callers (using null) to avoid having to declare the exception\n-            throws E {\n+            throws E {  \/\/ Parametrize on `throws` to enable callers to avoid having to declare the exception\n@@ -997,1 +996,1 @@\n-                    throw unmappableCharacterException(val);\n+                    throw unmappableASCII(val);\n@@ -1051,2 +1050,1 @@\n-            \/\/ Parametrizing on exception type to enable callers (using null) to avoid having to declare the exception\n-            throws E {\n+            throws E {  \/\/ Parametrize on `throws` to enable callers to avoid having to declare the exception\n@@ -1067,1 +1065,1 @@\n-                    throw unmappableCharacterException(sp, exceptionClass);\n+                    throw String.<E>unmappableCharacterException(sp);\n@@ -1173,2 +1171,1 @@\n-            \/\/ Parametrizing on exception type to enable callers (using null) to avoid having to declare the exception\n-            throws E {\n+            throws E {  \/\/ Parametrize on `throws` to enable callers to avoid having to declare the exception\n@@ -1184,1 +1181,1 @@\n-                            throw malformedInputException(sp - 1, 1, exceptionClass);\n+                            throw String.<E>malformedInputException(sp - 1, 1);\n@@ -1194,1 +1191,1 @@\n-                    throw malformedInputException(sp, 1, exceptionClass);  \/\/ underflow()\n+                    throw String.<E>malformedInputException(sp, 1);  \/\/ underflow()\n@@ -1204,1 +1201,1 @@\n-                            throw malformedInputException(sp - 3, 3, exceptionClass);\n+                            throw String.<E>malformedInputException(sp - 3, 3);\n@@ -1213,1 +1210,1 @@\n-                                throw malformedInputException(sp - 3, 3, exceptionClass);\n+                                throw String.<E>malformedInputException(sp - 3, 3);\n@@ -1224,1 +1221,1 @@\n-                        throw malformedInputException(sp - 1, 2, exceptionClass);\n+                        throw String.<E>malformedInputException(sp - 1, 2);\n@@ -1230,1 +1227,1 @@\n-                    throw malformedInputException(sp, 1, exceptionClass);\n+                    throw String.<E>malformedInputException(sp, 1);\n@@ -1243,1 +1240,1 @@\n-                            throw malformedInputException(sp - 4, 4, exceptionClass);\n+                            throw String.<E>malformedInputException(sp - 4, 4);\n@@ -1257,1 +1254,1 @@\n-                        throw malformedInputException(sp - 1, 1, exceptionClass);  \/\/ or 2\n+                        throw String.<E>malformedInputException(sp - 1, 1);  \/\/ or 2\n@@ -1263,1 +1260,1 @@\n-                    throw malformedInputException(sp - 1, 1, exceptionClass);\n+                    throw String.<E>malformedInputException(sp - 1, 1);\n@@ -1273,1 +1270,1 @@\n-                    throw malformedInputException(sp - 1, 1, exceptionClass);\n+                    throw String.<E>malformedInputException(sp - 1, 1);\n@@ -1315,0 +1312,3 @@\n+    \/**\n+     * {@return a new {@link MalformedInputException} for the sub-range denoted by specified {@code offset} and {@code length}}\n+     *\/\n@@ -1316,3 +1316,4 @@\n-    private static <E extends Exception> E malformedInputException(int off, int nb, Class<E> exceptionClass) {\n-        MalformedInputException mie = new MalformedInputException(nb);\n-        String msg = \"malformed input off : \" + off + \", length : \" + nb;\n+    private static <E extends Exception> E malformedInputException(int offset, int length)\n+            throws E {  \/\/ Parametrize on `throws` to enable callers to avoid having to declare the exception\n+        MalformedInputException mie = new MalformedInputException(length);\n+        String msg = \"malformed input offset : \" + offset + \", length : \" + length;\n@@ -1323,1 +1324,5 @@\n-    private static MalformedInputException malformedASCII(byte[] val) {\n+    \/**\n+     * {@return a new {@link MalformedInputException} for the given malformed ASCII string}\n+     *\/\n+    private static <E extends Exception> E malformedASCII(byte[] val)\n+            throws E {  \/\/ Parametrize on `throws` to enable callers to avoid having to declare the exception\n@@ -1325,1 +1330,1 @@\n-        return malformedInputException(dp, 1, MalformedInputException.class);\n+        return malformedInputException(dp, 1);\n@@ -1328,0 +1333,3 @@\n+    \/**\n+     * {@return a new {@link UnmappableCharacterException} at given {@code offset}}\n+     *\/\n@@ -1329,1 +1337,2 @@\n-    private static <E extends Exception> E unmappableCharacterException(int off, Class<E> exceptionClass) {\n+    private static <E extends Exception> E unmappableCharacterException(int offset)\n+            throws E {  \/\/ Parametrize on `throws` to enable callers to avoid having to declare the exception\n@@ -1331,1 +1340,1 @@\n-        String msg = \"malformed input off : \" + off + \", length : 1\";\n+        String msg = \"malformed input offset : \" + offset + \", length : 1\";\n@@ -1336,1 +1345,5 @@\n-    private static UnmappableCharacterException unmappableCharacterException(byte[] val) {\n+    \/**\n+     * {@return a new {@link UnmappableCharacterException} for the given malformed ASCII string}\n+     *\/\n+    private static <E extends Exception> E unmappableASCII(byte[] val)\n+            throws E {  \/\/ Parametrize on `throws` to enable callers to avoid having to declare the exception\n@@ -1338,1 +1351,1 @@\n-        return unmappableCharacterException(dp, UnmappableCharacterException.class);\n+        return unmappableCharacterException(dp);\n@@ -1350,2 +1363,1 @@\n-            \/\/ Parametrizing on exception type to enable callers (using null) to avoid having to declare the exception\n-            throws E {\n+            throws E {  \/\/ Parametrize on `throws` to enable callers to avoid having to declare the exception\n@@ -1382,2 +1394,1 @@\n-            \/\/ Parametrizing on exception type to enable callers (using null) to avoid having to declare the exception\n-            throws E {\n+            throws E {  \/\/ Parametrize on `throws` to enable callers to avoid having to declare the exception\n@@ -1421,1 +1432,1 @@\n-                        throw unmappableCharacterException(sp - 1, unmappableCharacterException);\n+                        throw String.<E>unmappableCharacterException(sp - 1);\n@@ -1447,2 +1458,1 @@\n-            \/\/ Parametrizing on exception type to enable callers (using null) to avoid having to declare the exception\n-            throws E {\n+            throws E {  \/\/ Parametrize on `throws` to enable callers to avoid having to declare the exception\n@@ -1470,1 +1480,1 @@\n-                        throw unmappableCharacterException(sp - 1, unmappableCharacterException);\n+                        throw String.<E>unmappableCharacterException(sp - 1);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":45,"deletions":35,"binary":false,"changes":80,"status":"modified"}]}