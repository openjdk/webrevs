{"files":[{"patch":"@@ -882,4 +882,10 @@\n-     * @param exceptionClass The exception class where any non-null value\n-     *                       indicates malformed or unmappable bytes will\n-     *                       result in an exception to be thrown instead of\n-     *                       getting replaced.\n+     * {@return the byte array obtained by first decoding {@code val} with\n+     * {@code coder}, and then encoding the result with the encoder of {@code\n+     * cs}}\n+     *\n+     * @param cs a charset to obtain the encoder from\n+     * @param coder a coder to decode {@code val} with\n+     * @param val a string byte array encoded with {@code coder}\n+     * @param exClass The exception class where any non-null value indicates\n+     *                malformed or unmappable bytes will result in an exception\n+     *                to be thrown instead of getting replaced.\n@@ -890,1 +896,1 @@\n-            Charset cs, byte coder, byte[] val, Class<E> exceptionClass)\n+            Charset cs, byte coder, byte[] val, Class<E> exClass)\n@@ -895,1 +901,1 @@\n-        boolean doReplace = exceptionClass == null;\n+        boolean doReplace = exClass == null;\n@@ -1003,0 +1009,7 @@\n+    \/**\n+     * {@return the byte array obtained by first decoding {@code val} with\n+     * {@code coder}, and then encoding the result with US-ASCII}\n+     *\n+     * @param coder a coder to decode {@code val} with\n+     * @param val a string byte array encoded with {@code coder}\n+     *\/\n@@ -1050,4 +1063,8 @@\n-     * @param exceptionClass The exception class where any non-null value\n-     *                       indicates malformed or unmappable bytes will\n-     *                       result in an exception to be thrown instead of\n-     *                       getting replaced.\n+     * {@return the byte array obtained by first decoding {@code val} with\n+     * {@code coder}, and then encoding the result with ISO-8859-1}\n+     *\n+     * @param coder a coder to decode {@code val} with\n+     * @param val a string byte array encoded with {@code coder}\n+     * @param exClass The exception class where any non-null value indicates\n+     *                malformed or unmappable bytes will result in an exception\n+     *                to be thrown instead of getting replaced.\n@@ -1057,1 +1074,1 @@\n-    private static <E extends Exception> byte[] encode8859_1(byte coder, byte[] val, Class<E> exceptionClass) throws E {\n+    private static <E extends Exception> byte[] encode8859_1(byte coder, byte[] val, Class<E> exClass) throws E {\n@@ -1071,1 +1088,1 @@\n-                if (exceptionClass != null) {\n+                if (exClass != null) {\n@@ -1177,4 +1194,3 @@\n-     * @param exceptionClass The exception class where any non-null value\n-     *                       indicates malformed or unmappable bytes will\n-     *                       result in an exception to be thrown instead of\n-     *                       getting replaced.\n+     * @param exClass The exception class where any non-null value indicates\n+     *                malformed or unmappable bytes will result in an exception\n+     *                to be thrown instead of getting replaced.\n@@ -1185,1 +1201,1 @@\n-            byte[] src, int sp, int sl, byte[] dst, int dp, Class <E> exceptionClass)\n+            byte[] src, int sp, int sl, byte[] dst, int dp, Class <E> exClass)\n@@ -1195,1 +1211,1 @@\n-                        if (exceptionClass != null) {\n+                        if (exClass != null) {\n@@ -1205,1 +1221,1 @@\n-                if (exceptionClass != null) {\n+                if (exClass != null) {\n@@ -1215,1 +1231,1 @@\n-                        if (exceptionClass != null) {\n+                        if (exClass != null) {\n@@ -1224,1 +1240,1 @@\n-                            if (exceptionClass != null) {\n+                            if (exClass != null) {\n@@ -1235,1 +1251,1 @@\n-                    if (exceptionClass != null) {\n+                    if (exClass != null) {\n@@ -1241,1 +1257,1 @@\n-                if (exceptionClass != null) {\n+                if (exClass != null) {\n@@ -1254,1 +1270,1 @@\n-                        if (exceptionClass != null) {\n+                        if (exClass != null) {\n@@ -1268,1 +1284,1 @@\n-                    if (exceptionClass != null) {\n+                    if (exClass != null) {\n@@ -1274,1 +1290,1 @@\n-                if (exceptionClass != null) {\n+                if (exClass != null) {\n@@ -1284,1 +1300,1 @@\n-                if (exceptionClass != null) {\n+                if (exClass != null) {\n@@ -1389,4 +1405,8 @@\n-     * @param exceptionClass The exception class where any non-null value\n-     *                       indicates malformed or unmappable bytes will\n-     *                       result in an exception to be thrown instead of\n-     *                       getting replaced.\n+     * {@return the byte array obtained by first decoding {@code val} with\n+     * {@code coder}, and then encoding the result with UTF-8}\n+     *\n+     * @param coder a coder to decode {@code val} with\n+     * @param val a string byte array encoded with {@code coder}\n+     * @param exClass The exception class where any non-null value indicates\n+     *                malformed or unmappable bytes will result in an exception\n+     *                to be thrown instead of getting replaced.\n@@ -1396,1 +1416,1 @@\n-    private static <E extends Exception> byte[] encodeUTF8(byte coder, byte[] val, Class<E> exceptionClass) throws E {\n+    private static <E extends Exception> byte[] encodeUTF8(byte coder, byte[] val, Class<E> exClass) throws E {\n@@ -1398,1 +1418,1 @@\n-            return encodeUTF8_UTF16(val, exceptionClass);\n+            return encodeUTF8_UTF16(val, exClass);\n@@ -1427,4 +1447,7 @@\n-     * @param exceptionClass The exception class where any non-null value\n-     *                       indicates malformed or unmappable bytes will\n-     *                       result in an exception to be thrown instead of\n-     *                       getting replaced.\n+     * {@return the byte array obtained by first decoding {@code val} with\n+     * UTF-16, and then encoding the result with UTF-8}\n+     *\n+     * @param val a string byte array encoded with UTF-16\n+     * @param exClass The exception class where any non-null value indicates\n+     *                malformed or unmappable bytes will result in an exception\n+     *                to be thrown instead of getting replaced.\n@@ -1434,1 +1457,1 @@\n-    private static <E extends Exception> byte[] encodeUTF8_UTF16(byte[] val, Class<E> exceptionClass) throws E {\n+    private static <E extends Exception> byte[] encodeUTF8_UTF16(byte[] val, Class<E> exClass) throws E {\n@@ -1440,1 +1463,1 @@\n-        long allocLen = (sl * 3 < 0) ? computeSizeUTF8_UTF16(val, exceptionClass) : sl * 3;\n+        long allocLen = (sl * 3 < 0) ? computeSizeUTF8_UTF16(val, exClass) : sl * 3;\n@@ -1469,1 +1492,1 @@\n-                    if (exceptionClass == null) {\n+                    if (exClass == null) {\n@@ -1497,4 +1520,3 @@\n-     * @param exceptionClass The exception class where any non-null value\n-     *                       indicates malformed or unmappable bytes will\n-     *                       result in an exception to be thrown instead of\n-     *                       getting discarded.\n+     * @param exClass The exception class where any non-null value indicates\n+     *                malformed or unmappable bytes will result in an exception\n+     *                to be thrown instead of getting discarded.\n@@ -1504,1 +1526,1 @@\n-    private static <E extends Exception> long computeSizeUTF8_UTF16(byte[] val, Class<E> exceptionClass) throws E {\n+    private static <E extends Exception> long computeSizeUTF8_UTF16(byte[] val, Class<E> exClass) throws E {\n@@ -1523,1 +1545,1 @@\n-                    if (exceptionClass == null) {\n+                    if (exClass == null) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":68,"deletions":46,"binary":false,"changes":114,"status":"modified"}]}