{"files":[{"patch":"@@ -817,1 +817,1 @@\n-                throw malformedInputException(src, MalformedInputException.class);\n+                throw malformedASCII(src);\n@@ -890,1 +890,2 @@\n-            Charset cs, byte coder, byte[] val, Class<E> characterCodingException)\n+            Charset cs, byte coder, byte[] val, Class<E> exceptionClass)\n+            \/\/ Parametrizing on exception type to enable callers (using null) to avoid having to declare the exception\n@@ -895,1 +896,1 @@\n-        boolean doReplace = characterCodingException == null;\n+        boolean doReplace = exceptionClass == null;\n@@ -964,1 +965,1 @@\n-     * the specified {@linkplain java.nio.charset.Charset charset}}\n+     * the specified {@code Charset}}\n@@ -996,1 +997,1 @@\n-                    throw unmappableCharacterException(val, UnmappableCharacterException.class);\n+                    throw unmappableCharacterException(val);\n@@ -1049,1 +1050,3 @@\n-    private static <E extends Exception> byte[] encode8859_1(byte coder, byte[] val, Class<E> unmappableCharacterException) throws E {\n+    private static <E extends Exception> byte[] encode8859_1(byte coder, byte[] val, Class<E> exceptionClass)\n+            \/\/ Parametrizing on exception type to enable callers (using null) to avoid having to declare the exception\n+            throws E {\n@@ -1063,2 +1066,2 @@\n-                if (unmappableCharacterException != null) {\n-                    throw unmappableCharacterException(sp, unmappableCharacterException);\n+                if (exceptionClass != null) {\n+                    throw unmappableCharacterException(sp, exceptionClass);\n@@ -1169,1 +1172,2 @@\n-            byte[] src, int sp, int sl, byte[] dst, int dp, Class <E> malformedInputException)\n+            byte[] src, int sp, int sl, byte[] dst, int dp, Class <E> exceptionClass)\n+            \/\/ Parametrizing on exception type to enable callers (using null) to avoid having to declare the exception\n@@ -1179,2 +1183,2 @@\n-                        if (malformedInputException != null) {\n-                            throw malformedInputException(sp - 1, 1, malformedInputException);\n+                        if (exceptionClass != null) {\n+                            throw malformedInputException(sp - 1, 1, exceptionClass);\n@@ -1189,2 +1193,2 @@\n-                if (malformedInputException != null) {\n-                    throw malformedInputException(sp, 1, malformedInputException);  \/\/ underflow()\n+                if (exceptionClass != null) {\n+                    throw malformedInputException(sp, 1, exceptionClass);  \/\/ underflow()\n@@ -1199,2 +1203,2 @@\n-                        if (malformedInputException != null) {\n-                            throw malformedInputException(sp - 3, 3, malformedInputException);\n+                        if (exceptionClass != null) {\n+                            throw malformedInputException(sp - 3, 3, exceptionClass);\n@@ -1208,2 +1212,2 @@\n-                            if (malformedInputException != null) {\n-                                throw malformedInputException(sp - 3, 3, malformedInputException);\n+                            if (exceptionClass != null) {\n+                                throw malformedInputException(sp - 3, 3, exceptionClass);\n@@ -1219,2 +1223,2 @@\n-                    if (malformedInputException != null) {\n-                        throw malformedInputException(sp - 1, 2, malformedInputException);\n+                    if (exceptionClass != null) {\n+                        throw malformedInputException(sp - 1, 2, exceptionClass);\n@@ -1225,2 +1229,2 @@\n-                if (malformedInputException != null) {\n-                    throw malformedInputException(sp, 1, malformedInputException);\n+                if (exceptionClass != null) {\n+                    throw malformedInputException(sp, 1, exceptionClass);\n@@ -1238,2 +1242,2 @@\n-                        if (malformedInputException != null) {\n-                            throw malformedInputException(sp - 4, 4, malformedInputException);\n+                        if (exceptionClass != null) {\n+                            throw malformedInputException(sp - 4, 4, exceptionClass);\n@@ -1252,2 +1256,2 @@\n-                    if (malformedInputException != null) {\n-                        throw malformedInputException(sp - 1, 1, malformedInputException);  \/\/ or 2\n+                    if (exceptionClass != null) {\n+                        throw malformedInputException(sp - 1, 1, exceptionClass);  \/\/ or 2\n@@ -1258,2 +1262,2 @@\n-                if (malformedInputException != null) {\n-                    throw malformedInputException(sp - 1, 1, malformedInputException);\n+                if (exceptionClass != null) {\n+                    throw malformedInputException(sp - 1, 1, exceptionClass);\n@@ -1268,2 +1272,2 @@\n-                if (malformedInputException != null) {\n-                    throw malformedInputException(sp - 1, 1, malformedInputException);\n+                if (exceptionClass != null) {\n+                    throw malformedInputException(sp - 1, 1, exceptionClass);\n@@ -1312,1 +1316,1 @@\n-    private static <E extends Exception> E malformedInputException(int off, int nb, Class<E> exceptionType) {\n+    private static <E extends Exception> E malformedInputException(int off, int nb, Class<E> exceptionClass) {\n@@ -1319,1 +1323,1 @@\n-    private static <E extends Exception> E malformedInputException(byte[] val, Class<E> exceptionType) {\n+    private static MalformedInputException malformedASCII(byte[] val) {\n@@ -1321,1 +1325,1 @@\n-        return malformedInputException(dp, 1, exceptionType);\n+        return malformedInputException(dp, 1, MalformedInputException.class);\n@@ -1325,1 +1329,1 @@\n-    private static <E extends Exception> E unmappableCharacterException(int off, Class<E> exceptionType) {\n+    private static <E extends Exception> E unmappableCharacterException(int off, Class<E> exceptionClass) {\n@@ -1332,1 +1336,1 @@\n-    private static <E extends Exception> E unmappableCharacterException(byte[] val, Class<E> exceptionType) {\n+    private static UnmappableCharacterException unmappableCharacterException(byte[] val) {\n@@ -1334,1 +1338,1 @@\n-        return unmappableCharacterException(dp, exceptionType);\n+        return unmappableCharacterException(dp, UnmappableCharacterException.class);\n@@ -1345,1 +1349,3 @@\n-    private static <E extends Exception> byte[] encodeUTF8(byte coder, byte[] val, Class<E> unmappableCharacterException) throws E {\n+    private static <E extends Exception> byte[] encodeUTF8(byte coder, byte[] val, Class<E> exceptionClass)\n+            \/\/ Parametrizing on exception type to enable callers (using null) to avoid having to declare the exception\n+            throws E {\n@@ -1347,1 +1353,1 @@\n-            return encodeUTF8_UTF16(val, unmappableCharacterException);\n+            return encodeUTF8_UTF16(val, exceptionClass);\n@@ -1375,1 +1381,3 @@\n-    private static <E extends Exception> byte[] encodeUTF8_UTF16(byte[] val, Class<E> unmappableCharacterException) throws E {\n+    private static <E extends Exception> byte[] encodeUTF8_UTF16(byte[] val, Class<E> unmappableCharacterException)\n+            \/\/ Parametrizing on exception type to enable callers (using null) to avoid having to declare the exception\n+            throws E {\n@@ -1438,1 +1446,3 @@\n-    private static <E extends Exception> long computeSizeUTF8_UTF16(byte[] val, Class<E> unmappableCharacterException) throws E {\n+    private static <E extends Exception> long computeSizeUTF8_UTF16(byte[] val, Class<E> unmappableCharacterException)\n+            \/\/ Parametrizing on exception type to enable callers (using null) to avoid having to declare the exception\n+            throws E {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":49,"deletions":39,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -334,1 +334,1 @@\n-     * using the specified {@linkplain java.nio.charset.Charset charset}.\n+     * using the specified {@code Charset}.\n@@ -349,1 +349,1 @@\n-     * the specified {@linkplain java.nio.charset.Charset charset}}\n+     * the specified {@code Charset}}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng NoReplTest\n+ * @run testng NoReplacementTest\n@@ -42,1 +42,1 @@\n-public class NoReplTest {\n+public class NoReplacementTest {\n","filename":"test\/jdk\/java\/lang\/String\/NoReplacementTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"test\/jdk\/java\/lang\/String\/NoReplTest.java","status":"renamed"}]}