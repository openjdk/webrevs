{"files":[{"patch":"@@ -889,0 +889,8 @@\n+    \/**\n+     * @param exceptionClass The exception class where any non-null value\n+     *                       indicates malformed or unmappable bytes will\n+     *                       result in an exception to be thrown instead of\n+     *                       getting replaced.\n+     * @param <E> The exception type parameter to enable callers to avoid\n+     *           having to declare the exception\n+     *\/\n@@ -891,1 +899,1 @@\n-            throws E {  \/\/ Parametrize on `throws` to enable callers to avoid having to declare the exception\n+            throws E {\n@@ -1049,2 +1057,9 @@\n-    private static <E extends Exception> byte[] encode8859_1(byte coder, byte[] val, Class<E> exceptionClass)\n-            throws E {  \/\/ Parametrize on `throws` to enable callers to avoid having to declare the exception\n+    \/**\n+     * @param exceptionClass The exception class where any non-null value\n+     *                       indicates malformed or unmappable bytes will\n+     *                       result in an exception to be thrown instead of\n+     *                       getting replaced.\n+     * @param <E> The exception type parameter to enable callers to avoid\n+     *           having to declare the exception\n+     *\/\n+    private static <E extends Exception> byte[] encode8859_1(byte coder, byte[] val, Class<E> exceptionClass) throws E {\n@@ -1169,0 +1184,8 @@\n+    \/**\n+     * @param exceptionClass The exception class where any non-null value\n+     *                       indicates malformed or unmappable bytes will\n+     *                       result in an exception to be thrown instead of\n+     *                       getting replaced.\n+     * @param <E> The exception type parameter to enable callers to avoid\n+     *           having to declare the exception\n+     *\/\n@@ -1171,1 +1194,1 @@\n-            throws E {  \/\/ Parametrize on `throws` to enable callers to avoid having to declare the exception\n+            throws E {\n@@ -1314,0 +1337,2 @@\n+     *\n+     * @param <E> The exception type parameter to enable callers to avoid having to declare the exception\n@@ -1316,2 +1341,1 @@\n-    private static <E extends Exception> E malformedInputException(int offset, int length)\n-            throws E {  \/\/ Parametrize on `throws` to enable callers to avoid having to declare the exception\n+    private static <E extends Exception> E malformedInputException(int offset, int length) throws E {\n@@ -1326,0 +1350,2 @@\n+     *\n+     * @param <E> The exception type parameter to enable callers to avoid having to declare the exception\n@@ -1327,2 +1353,1 @@\n-    private static <E extends Exception> E malformedASCII(byte[] val)\n-            throws E {  \/\/ Parametrize on `throws` to enable callers to avoid having to declare the exception\n+    private static <E extends Exception> E malformedASCII(byte[] val) throws E {\n@@ -1335,0 +1360,2 @@\n+     *\n+     * @param <E> The exception type parameter to enable callers to avoid having to declare the exception\n@@ -1337,2 +1364,1 @@\n-    private static <E extends Exception> E unmappableCharacterException(int offset)\n-            throws E {  \/\/ Parametrize on `throws` to enable callers to avoid having to declare the exception\n+    private static <E extends Exception> E unmappableCharacterException(int offset) throws E {\n@@ -1347,0 +1373,2 @@\n+     *\n+     * @param <E> The exception type parameter to enable callers to avoid having to declare the exception\n@@ -1348,2 +1376,1 @@\n-    private static <E extends Exception> E unmappableASCII(byte[] val)\n-            throws E {  \/\/ Parametrize on `throws` to enable callers to avoid having to declare the exception\n+    private static <E extends Exception> E unmappableASCII(byte[] val) throws E {\n@@ -1362,2 +1389,9 @@\n-    private static <E extends Exception> byte[] encodeUTF8(byte coder, byte[] val, Class<E> exceptionClass)\n-            throws E {  \/\/ Parametrize on `throws` to enable callers to avoid having to declare the exception\n+    \/**\n+     * @param exceptionClass The exception class where any non-null value\n+     *                       indicates malformed or unmappable bytes will\n+     *                       result in an exception to be thrown instead of\n+     *                       getting replaced.\n+     * @param <E> The exception type parameter to enable callers to avoid\n+     *           having to declare the exception\n+     *\/\n+    private static <E extends Exception> byte[] encodeUTF8(byte coder, byte[] val, Class<E> exceptionClass) throws E {\n@@ -1393,2 +1427,9 @@\n-    private static <E extends Exception> byte[] encodeUTF8_UTF16(byte[] val, Class<E> unmappableCharacterException)\n-            throws E {  \/\/ Parametrize on `throws` to enable callers to avoid having to declare the exception\n+    \/**\n+     * @param exceptionClass The exception class where any non-null value\n+     *                       indicates malformed or unmappable bytes will\n+     *                       result in an exception to be thrown instead of\n+     *                       getting replaced.\n+     * @param <E> The exception type parameter to enable callers to avoid\n+     *           having to declare the exception\n+     *\/\n+    private static <E extends Exception> byte[] encodeUTF8_UTF16(byte[] val, Class<E> exceptionClass) throws E {\n@@ -1400,1 +1441,1 @@\n-        long allocLen = (sl * 3 < 0) ? computeSizeUTF8_UTF16(val, unmappableCharacterException) : sl * 3;\n+        long allocLen = (sl * 3 < 0) ? computeSizeUTF8_UTF16(val, exceptionClass) : sl * 3;\n@@ -1429,1 +1470,1 @@\n-                    if (unmappableCharacterException == null) {\n+                    if (exceptionClass == null) {\n@@ -1456,0 +1497,7 @@\n+     *\n+     * @param exceptionClass The exception class where any non-null value\n+     *                       indicates malformed or unmappable bytes will\n+     *                       result in an exception to be thrown instead of\n+     *                       getting discarded.\n+     * @param <E> The exception type parameter to enable callers to avoid\n+     *           having to declare the exception\n@@ -1457,2 +1505,1 @@\n-    private static <E extends Exception> long computeSizeUTF8_UTF16(byte[] val, Class<E> unmappableCharacterException)\n-            throws E {  \/\/ Parametrize on `throws` to enable callers to avoid having to declare the exception\n+    private static <E extends Exception> long computeSizeUTF8_UTF16(byte[] val, Class<E> exceptionClass) throws E {\n@@ -1477,1 +1524,1 @@\n-                    if (unmappableCharacterException == null) {\n+                    if (exceptionClass == null) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":68,"deletions":21,"binary":false,"changes":89,"status":"modified"}]}