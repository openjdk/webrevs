{"files":[{"patch":"@@ -1618,2 +1618,3 @@\n-bool PhaseIdealLoop::is_counted_loop(Node* x, IdealLoopTree*&loop, BasicType iv_bt) {\n-  return do_is_counted_loop(x, loop, iv_bt) || is_counted_loop_with_speculative_long_limit(x, loop, iv_bt);\n+bool PhaseIdealLoop::try_convert_to_counted_loop(Node* loop_head, IdealLoopTree*&loop, BasicType iv_bt) {\n+  return convert_to_counted_loop(loop_head, loop, iv_bt)\n+         || convert_to_counted_loop_with_speculative_long_limit(loop_head, loop, iv_bt);\n@@ -1626,1 +1627,14 @@\n-bool PhaseIdealLoop::is_counted_loop_with_speculative_long_limit(Node* x, IdealLoopTree*&loop, BasicType iv_bt) {\n+\/\/\n+\/\/ In summary, we transform\n+\/\/\n+\/\/  for (int i = 0; (long) i < long_limit; i++) {...}\n+\/\/\n+\/\/ to\n+\/\/\n+\/\/  if (int_min <= long_limit && long_limit <= int_max) {\n+\/\/    for (int i = 0; i < (int) long_limit; i++) {...}\n+\/\/  } else {\n+\/\/    trap: loop_limit_check\n+\/\/  }\n+bool PhaseIdealLoop::convert_to_counted_loop_with_speculative_long_limit(Node* loop_head, IdealLoopTree*&loop,\n+                                                                         BasicType iv_bt) {\n@@ -1631,1 +1645,1 @@\n-  Node* back_control = loop_exit_control(x, loop);\n+  Node* back_control = loop_exit_control(loop_head, loop);\n@@ -1636,1 +1650,1 @@\n-  Node* init_control = x->in(LoopNode::EntryControl);\n+  Node* init_control = loop_head->in(LoopNode::EntryControl);\n@@ -1638,1 +1652,1 @@\n-  \/\/ Make sure there is a parse predicate for us to insert the loop limit check.\n+  \/\/ Make sure there is a Loop Limit Check Parse Predicate for us to insert the Loop Limit Check Predicate above it.\n@@ -1642,0 +1656,7 @@\n+#ifdef ASSERT\n+    if (TraceLoopLimitCheck) {\n+      tty->print(\"Missing Loop Limit Check Parse Predicate:\");\n+      loop->dump_head();\n+      loop_head->dump(1);\n+    }\n+#endif\n@@ -1650,1 +1671,0 @@\n-\n@@ -1668,4 +1688,2 @@\n-  Node* new_cmp = _igvn.register_new_node_with_optimizer(\n-      cmp->in(1) == incr\n-          ? new CmpINode(new_incr, new_limit) : new CmpINode(new_limit, new_incr),\n-      cmp);\n+  Node* new_cmp = cmp->in(1) == incr ? new CmpINode(new_incr, new_limit) : new CmpINode(new_limit, new_incr);\n+  _igvn.register_new_node_with_optimizer(new_cmp, cmp);\n@@ -1680,1 +1698,1 @@\n-  if (!do_is_counted_loop(x, loop, iv_bt)) {\n+  if (!convert_to_counted_loop(loop_head, loop, iv_bt)) {\n@@ -1684,1 +1702,0 @@\n-\n@@ -1696,1 +1713,0 @@\n-\n@@ -1700,1 +1716,1 @@\n-bool PhaseIdealLoop::do_is_counted_loop(Node* x, IdealLoopTree*&loop, BasicType iv_bt) {\n+bool PhaseIdealLoop::convert_to_counted_loop(Node* loop_head, IdealLoopTree*&loop, BasicType iv_bt) {\n@@ -1703,1 +1719,1 @@\n-  Node* back_control = loop_exit_control(x, loop);\n+  Node* back_control = loop_exit_control(loop_head, loop);\n@@ -1724,1 +1740,1 @@\n-  incr = loop_iv_incr(incr, x, loop, phi_incr);\n+  incr = loop_iv_incr(incr, loop_head, loop, phi_incr);\n@@ -1753,1 +1769,1 @@\n-  PhiNode* phi = loop_iv_phi(xphi, phi_incr, x, loop);\n+  PhiNode* phi = loop_iv_phi(xphi, phi_incr, loop_head, loop);\n@@ -1862,2 +1878,2 @@\n-  if (x->Opcode() == Op_Region) {\n-    \/\/ x has not yet been transformed to Loop or LongCountedLoop.\n+  if (loop_head->Opcode() == Op_Region) {\n+    \/\/ loop_head has not yet been transformed to Loop or LongCountedLoop.\n@@ -1870,2 +1886,2 @@\n-    assert(x->as_Region()->is_in_infinite_subgraph(),\n-           \"x can only be a Region and not Loop if inside infinite loop\");\n+    assert(loop_head->as_Region()->is_in_infinite_subgraph(),\n+           \"loop_head can only be a Region and not Loop if inside infinite loop\");\n@@ -1876,2 +1892,2 @@\n-  assert(x->Opcode() == Op_Loop || x->Opcode() == Op_LongCountedLoop, \"regular loops only\");\n-  C->print_method(PHASE_BEFORE_CLOOPS, 3, x);\n+  assert(loop_head->Opcode() == Op_Loop || loop_head->Opcode() == Op_LongCountedLoop, \"regular loops only\");\n+  C->print_method(PHASE_BEFORE_CLOOPS, 3, loop_head);\n@@ -2083,1 +2099,1 @@\n-  Node* init_control = x->in(LoopNode::EntryControl);\n+  Node* init_control = loop_head->in(LoopNode::EntryControl);\n@@ -2093,1 +2109,1 @@\n-    assert(!x->as_Loop()->is_loop_nest_inner_loop(), \"loop was transformed\");\n+    assert(!loop_head->as_Loop()->is_loop_nest_inner_loop(), \"loop was transformed\");\n@@ -2102,1 +2118,1 @@\n-        x->dump(1);\n+        loop_head->dump(1);\n@@ -2155,1 +2171,1 @@\n-        x->dump(1);\n+        loop_head->dump(1);\n@@ -2197,1 +2213,1 @@\n-    sfpt = find_safepoint(back_control, x, loop);\n+    sfpt = find_safepoint(back_control, loop_head, loop);\n@@ -2205,2 +2221,2 @@\n-  if (x->in(LoopNode::LoopBackControl)->Opcode() == Op_SafePoint) {\n-    Node* backedge_sfpt = x->in(LoopNode::LoopBackControl);\n+  if (loop_head->in(LoopNode::LoopBackControl)->Opcode() == Op_SafePoint) {\n+    Node* backedge_sfpt = loop_head->in(LoopNode::LoopBackControl);\n@@ -2228,1 +2244,1 @@\n-      !x->as_Loop()->is_loop_nest_inner_loop() &&\n+      !loop_head->as_Loop()->is_loop_nest_inner_loop() &&\n@@ -2351,1 +2367,1 @@\n-  l->set_unswitch_count(x->as_Loop()->unswitch_count()); \/\/ Preserve\n+  l->set_unswitch_count(loop_head->as_Loop()->unswitch_count()); \/\/ Preserve\n@@ -2361,1 +2377,1 @@\n-  lazy_replace( x, l );\n+  lazy_replace(loop_head, l );\n@@ -2420,1 +2436,1 @@\n-  if (x->as_Loop()->is_loop_nest_inner_loop() && iv_bt == T_LONG) {\n+  if (loop_head->as_Loop()->is_loop_nest_inner_loop() && iv_bt == T_LONG) {\n@@ -2424,1 +2440,1 @@\n-  if (iv_bt == T_LONG && x->as_Loop()->is_loop_nest_outer_loop()) {\n+  if (iv_bt == T_LONG && loop_head->as_Loop()->is_loop_nest_outer_loop()) {\n@@ -4239,1 +4255,1 @@\n-      phase->is_counted_loop(_head, loop, T_INT)) {\n+      phase->try_convert_to_counted_loop(_head, loop, T_INT)) {\n@@ -4253,1 +4269,1 @@\n-             phase->is_counted_loop(_head, loop, T_LONG)) {\n+             phase->try_convert_to_counted_loop(_head, loop, T_LONG)) {\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":54,"deletions":38,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -1226,2 +1226,1 @@\n-  bool is_counted_loop(Node* x, IdealLoopTree*& loop, BasicType iv_bt);\n-  bool is_counted_loop_with_speculative_long_limit(Node* x, IdealLoopTree*& loop, BasicType iv_bt);\n+  bool try_convert_to_counted_loop(Node* loop_head, IdealLoopTree*& loop, BasicType iv_bt);\n@@ -1229,2 +1228,2 @@\n-  bool do_is_counted_loop(Node* x, IdealLoopTree*& loop, BasicType iv_bt);\n- public:\n+  bool convert_to_counted_loop(Node* loop_head, IdealLoopTree*& loop, BasicType iv_bt);\n+  bool convert_to_counted_loop_with_speculative_long_limit(Node* loop_head, IdealLoopTree*& loop, BasicType iv_bt);\n@@ -1232,0 +1231,1 @@\n+ public:\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.test.lib.Utils;\n@@ -41,1 +42,5 @@\n-    private static final Random RNG = jdk.test.lib.Utils.getRandomInstance();\n+    private static final Random RNG = Utils.getRandomInstance();\n+\n+    \/\/ Use a larger stride to avoid tests taking too long\n+    private static final int LARGE_STRIDE = Integer.MAX_VALUE \/ 1024;\n+    private static volatile long SOME_LONG = 42;\n@@ -88,1 +93,1 @@\n-        long limit = RNG.nextLong(0, 1024 * 1024); \/\/ Choice a small number to avoid tests taking too long\n+        long limit = RNG.nextLong(0, 1024 * 1024); \/\/ Choose a small number to avoid tests taking too long\n@@ -126,3 +131,0 @@\n-    \/\/ Use a larger stride to avoid tests taking too long\n-    private static final int LARGE_STRIDE = Integer.MAX_VALUE \/ 1024;\n-\n@@ -179,2 +181,0 @@\n-    private static volatile long SOME_LONG = 42;\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestIntCountedLoopLongLimit.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}