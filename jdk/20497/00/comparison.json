{"files":[{"patch":"@@ -370,1 +370,1 @@\n-static char* reserve_mmapped_memory(size_t bytes, char* requested_addr, MEMFLAGS flag) {\n+static char* reserve_mmapped_memory(size_t bytes, char* requested_addr, MemType flag) {\n@@ -498,1 +498,1 @@\n-char* os::map_memory_to_file_aligned(size_t size, size_t alignment, int file_desc, MEMFLAGS flag) {\n+char* os::map_memory_to_file_aligned(size_t size, size_t alignment, int file_desc, MemType flag) {\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3431,1 +3431,1 @@\n-static char* map_or_reserve_memory_aligned(size_t size, size_t alignment, int file_desc, MEMFLAGS flag = mtNone) {\n+static char* map_or_reserve_memory_aligned(size_t size, size_t alignment, int file_desc, MemType flag = mtNone) {\n@@ -3475,1 +3475,1 @@\n-char* os::map_memory_to_file_aligned(size_t size, size_t alignment, int fd, MEMFLAGS flag) {\n+char* os::map_memory_to_file_aligned(size_t size, size_t alignment, int fd, MemType flag) {\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1716,1 +1716,1 @@\n-                        bool allow_exec, MEMFLAGS flags = mtNone) {\n+                        bool allow_exec, MemType flags = mtNone) {\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-template <typename E, MEMFLAGS F>\n+template <typename E, MemType F>\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BatchedTask.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-G1MonotonicArena::Segment::Segment(uint slot_size, uint num_slots, Segment* next, MEMFLAGS flag) :\n+G1MonotonicArena::Segment::Segment(uint slot_size, uint num_slots, Segment* next, MemType flag) :\n@@ -44,1 +44,1 @@\n-                                                                     MEMFLAGS mem_flag) {\n+                                                                     MemType mem_flag) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArena.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n@@ -123,1 +123,1 @@\n-  const MEMFLAGS _mem_flag;\n+  const MemType _mem_flag;\n@@ -139,1 +139,1 @@\n-  Segment(uint slot_size, uint num_slots, Segment* next, MEMFLAGS flag);\n+  Segment(uint slot_size, uint num_slots, Segment* next, MemType flag);\n@@ -176,1 +176,1 @@\n-  static Segment* create_segment(uint slot_size, uint num_slots, Segment* next, MEMFLAGS mem_flag);\n+  static Segment* create_segment(uint slot_size, uint num_slots, Segment* next, MemType mem_flag);\n@@ -225,1 +225,1 @@\n-  const MEMFLAGS _mem_flag;\n+  const MemType _mem_flag;\n@@ -233,1 +233,1 @@\n-  AllocOptions(MEMFLAGS mem_flag, uint slot_size, uint initial_num_slots, uint max_num_slots, uint alignment) :\n+  AllocOptions(MemType mem_flag, uint slot_size, uint initial_num_slots, uint max_num_slots, uint alignment) :\n@@ -253,1 +253,1 @@\n-  MEMFLAGS mem_flag() const {return _mem_flag; }\n+  MemType mem_flag() const {return _mem_flag; }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArena.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-                                             MEMFLAGS type) :\n+                                             MemType type) :\n@@ -75,1 +75,1 @@\n-                                      MEMFLAGS type) :\n+                                      MemType type) :\n@@ -167,1 +167,1 @@\n-                                       MEMFLAGS type) :\n+                                       MemType type) :\n@@ -266,1 +266,1 @@\n-                                                            MEMFLAGS type) {\n+                                                            MemType type) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionToSpaceMapper.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n-  MEMFLAGS _memory_type;\n+  MemType _memory_type;\n@@ -57,1 +57,1 @@\n-  G1RegionToSpaceMapper(ReservedSpace rs, size_t used_size, size_t page_size, size_t region_granularity, size_t commit_factor, MEMFLAGS type);\n+  G1RegionToSpaceMapper(ReservedSpace rs, size_t used_size, size_t page_size, size_t region_granularity, size_t commit_factor, MemType type);\n@@ -88,1 +88,1 @@\n-                                              MEMFLAGS type);\n+                                              MemType type);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionToSpaceMapper.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-                                                         MEMFLAGS memflags,\n+                                                         MemType memflags,\n@@ -808,1 +808,1 @@\n-OopStorage* OopStorage::create(const char* name, MEMFLAGS memflags) {\n+OopStorage* OopStorage::create(const char* name, MemType memflags) {\n@@ -822,1 +822,1 @@\n-OopStorage::OopStorage(const char* name, MEMFLAGS memflags) :\n+OopStorage::OopStorage(const char* name, MemType memflags) :\n@@ -1033,1 +1033,1 @@\n-MEMFLAGS OopStorage::memflags() const { return _memflags; }\n+MemType OopStorage::memflags() const { return _memflags; }\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-  static OopStorage* create(const char* name, MEMFLAGS memflags);\n+  static OopStorage* create(const char* name, MemType memflags);\n@@ -93,1 +93,1 @@\n-  MEMFLAGS memflags() const;\n+  MemType memflags() const;\n@@ -277,1 +277,1 @@\n-  MEMFLAGS _memflags;\n+  MemType _memflags;\n@@ -283,1 +283,1 @@\n-  OopStorage(const char* name, MEMFLAGS memflags);\n+  OopStorage(const char* name, MemType memflags);\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-                             MEMFLAGS memflags = mtGC,\n+                             MemType memflags = mtGC,\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-OopStorage* OopStorageSet::create_strong(const char* name, MEMFLAGS memflags) {\n+OopStorage* OopStorageSet::create_strong(const char* name, MemType memflags) {\n@@ -42,1 +42,1 @@\n-OopStorage* OopStorageSet::create_weak(const char* name, MEMFLAGS memflags) {\n+OopStorage* OopStorageSet::create_weak(const char* name, MemType memflags) {\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorageSet.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n@@ -82,2 +82,2 @@\n-  static OopStorage* create_strong(const char* name, MEMFLAGS memflags);\n-  static OopStorage* create_weak(const char* name, MEMFLAGS memflags);\n+  static OopStorage* create_strong(const char* name, MemType memflags);\n+  static OopStorage* create_weak(const char* name, MemType memflags);\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorageSet.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupProcessor.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,1 +119,1 @@\n-template <unsigned int N, MEMFLAGS F>\n+template <unsigned int N, MemType F>\n@@ -327,1 +327,1 @@\n-template <class E, MEMFLAGS F, unsigned int N = TASKQUEUE_SIZE>\n+template <class E, MemType F, unsigned int N = TASKQUEUE_SIZE>\n@@ -431,1 +431,1 @@\n-template<class E, MEMFLAGS F, unsigned int N = TASKQUEUE_SIZE>\n+template<class E, MemType F, unsigned int N = TASKQUEUE_SIZE>\n@@ -470,1 +470,1 @@\n-template <MEMFLAGS F> class TaskQueueSetSuperImpl: public CHeapObj<F>, public TaskQueueSetSuper {\n+template <MemType F> class TaskQueueSetSuperImpl: public CHeapObj<F>, public TaskQueueSetSuper {\n@@ -473,1 +473,1 @@\n-template<class T, MEMFLAGS F>\n+template<class T, MemType F>\n@@ -521,1 +521,1 @@\n-template<class T, MEMFLAGS F> void\n+template<class T, MemType F> void\n@@ -527,1 +527,1 @@\n-template<class T, MEMFLAGS F> T*\n+template<class T, MemType F> T*\n@@ -534,1 +534,1 @@\n-template<class T, MEMFLAGS F>\n+template<class T, MemType F>\n@@ -542,1 +542,1 @@\n-template<class T, MEMFLAGS F>\n+template<class T, MemType F>\n","filename":"src\/hotspot\/share\/gc\/shared\/taskqueue.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-template <class T, MEMFLAGS F>\n+template <class T, MemType F>\n@@ -50,1 +50,1 @@\n-template <class T, MEMFLAGS F>\n+template <class T, MemType F>\n@@ -56,1 +56,1 @@\n-template<class T, MEMFLAGS F>\n+template<class T, MemType F>\n@@ -63,1 +63,1 @@\n-template<class T, MEMFLAGS F>\n+template<class T, MemType F>\n@@ -78,1 +78,1 @@\n-template<class T, MEMFLAGS F>\n+template<class T, MemType F>\n@@ -86,1 +86,1 @@\n-template <class T, MEMFLAGS F>\n+template <class T, MemType F>\n@@ -100,1 +100,1 @@\n-template<class E, MEMFLAGS F, unsigned int N>\n+template<class E, MemType F, unsigned int N>\n@@ -106,1 +106,1 @@\n-template<class E, MEMFLAGS F, unsigned int N>\n+template<class E, MemType F, unsigned int N>\n@@ -111,1 +111,1 @@\n-template<class E, MEMFLAGS F, unsigned int N> inline bool\n+template<class E, MemType F, unsigned int N> inline bool\n@@ -137,1 +137,1 @@\n-template <class E, MEMFLAGS F, unsigned int N>\n+template <class E, MemType F, unsigned int N>\n@@ -146,1 +146,1 @@\n-template <class E, MEMFLAGS F, unsigned int N>\n+template <class E, MemType F, unsigned int N>\n@@ -157,1 +157,1 @@\n-template<class E, MEMFLAGS F, unsigned int N>\n+template<class E, MemType F, unsigned int N>\n@@ -190,1 +190,1 @@\n-template<class E, MEMFLAGS F, unsigned int N> inline bool\n+template<class E, MemType F, unsigned int N> inline bool\n@@ -227,1 +227,1 @@\n-template <class E, MEMFLAGS F, unsigned int N>\n+template <class E, MemType F, unsigned int N>\n@@ -256,1 +256,1 @@\n-template<class E, MEMFLAGS F, unsigned int N>\n+template<class E, MemType F, unsigned int N>\n@@ -314,1 +314,1 @@\n-template<class E, MEMFLAGS F, unsigned int N>\n+template<class E, MemType F, unsigned int N>\n@@ -319,1 +319,1 @@\n-template<class T, MEMFLAGS F>\n+template<class T, MemType F>\n@@ -375,1 +375,1 @@\n-template<class T, MEMFLAGS F>\n+template<class T, MemType F>\n@@ -397,1 +397,1 @@\n-template<class E, MEMFLAGS F, unsigned int N>\n+template<class E, MemType F, unsigned int N>\n","filename":"src\/hotspot\/share\/gc\/shared\/taskqueue.inline.hpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n@@ -39,1 +39,1 @@\n-template<class E, MEMFLAGS F, unsigned int N = TASKQUEUE_SIZE>\n+template<class E, MemType F, unsigned int N = TASKQUEUE_SIZE>\n@@ -304,1 +304,1 @@\n-template <class T, MEMFLAGS F>\n+template <class T, MemType F>\n@@ -334,1 +334,1 @@\n-template <class T, MEMFLAGS F>\n+template <class T, MemType F>\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahTaskqueue.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +34,1 @@\n-template <class E, MEMFLAGS F, unsigned int N>\n+template <class E, MemType F, unsigned int N>\n@@ -48,1 +49,1 @@\n-template <class E, MEMFLAGS F, unsigned int N>\n+template <class E, MemType F, unsigned int N>\n@@ -61,1 +62,1 @@\n-template <class E, MEMFLAGS F, unsigned int N>\n+template <class E, MemType F, unsigned int N>\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahTaskqueue.inline.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zNMT.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/jfrbitset.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n-void JfrNativeMemoryEvent::send_type_event(const Ticks& starttime, MEMFLAGS flag, size_t reserved, size_t committed) {\n+void JfrNativeMemoryEvent::send_type_event(const Ticks& starttime, MemType flag, size_t reserved, size_t committed) {\n@@ -83,1 +83,1 @@\n-    MEMFLAGS flag = NMTUtil::index_to_flag(index);\n+    MemType flag = NMTUtil::index_to_flag(index);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrNativeMemoryEvent.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n@@ -38,1 +38,1 @@\n-  static void send_type_event(const Ticks& starttime, MEMFLAGS flag, size_t reserved, size_t committed);\n+  static void send_type_event(const Ticks& starttime, MemType flag, size_t reserved, size_t committed);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrNativeMemoryEvent.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -338,1 +338,1 @@\n-    MEMFLAGS flag = NMTUtil::index_to_flag(i);\n+    MemType flag = NMTUtil::index_to_flag(i);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrType.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-                   MEMFLAGS flags,\n+                   MemType flags,\n@@ -50,1 +50,1 @@\n-                   MEMFLAGS flags,\n+                   MemType flags,\n@@ -57,1 +57,1 @@\n-                     MEMFLAGS flag,\n+                     MemType flag,\n@@ -120,1 +120,1 @@\n-void* AnyObj::operator new(size_t size, MEMFLAGS flags) throw() {\n+void* AnyObj::operator new(size_t size, MemType flags) throw() {\n@@ -127,1 +127,1 @@\n-    MEMFLAGS flags) throw() {\n+    MemType flags) throw() {\n","filename":"src\/hotspot\/share\/memory\/allocation.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n@@ -97,3 +97,3 @@\n-\/\/ char* AllocateHeap(size_t size, MEMFLAGS flags, const NativeCallStack& stack, AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n-\/\/ char* AllocateHeap(size_t size, MEMFLAGS flags, AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n-\/\/ char* ReallocateHeap(char *old, size_t size, MEMFLAGS flag, AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n+\/\/ char* AllocateHeap(size_t size, MemType flags, const NativeCallStack& stack, AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n+\/\/ char* AllocateHeap(size_t size, MemType flags, AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n+\/\/ char* ReallocateHeap(char *old, size_t size, MemType flag, AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n@@ -109,1 +109,1 @@\n-                   MEMFLAGS flags,\n+                   MemType flags,\n@@ -113,1 +113,1 @@\n-                   MEMFLAGS flags,\n+                   MemType flags,\n@@ -118,1 +118,1 @@\n-                     MEMFLAGS flag,\n+                     MemType flag,\n@@ -126,1 +126,1 @@\n-  ALWAYSINLINE void* operator new(size_t size, MEMFLAGS f) {\n+  ALWAYSINLINE void* operator new(size_t size, MemType f) {\n@@ -131,1 +131,1 @@\n-                                  MEMFLAGS f,\n+                                  MemType f,\n@@ -137,1 +137,1 @@\n-                                  MEMFLAGS f,\n+                                  MemType f,\n@@ -144,1 +144,1 @@\n-                                  MEMFLAGS f,\n+                                  MemType f,\n@@ -149,1 +149,1 @@\n-  ALWAYSINLINE void* operator new[](size_t size, MEMFLAGS f) {\n+  ALWAYSINLINE void* operator new[](size_t size, MemType f) {\n@@ -154,1 +154,1 @@\n-                                    MEMFLAGS f,\n+                                    MemType f,\n@@ -160,1 +160,1 @@\n-                                    MEMFLAGS f,\n+                                    MemType f,\n@@ -167,1 +167,1 @@\n-                                    MEMFLAGS f,\n+                                    MemType f,\n@@ -177,1 +177,1 @@\n-template<MEMFLAGS F>\n+template<MemType F>\n@@ -442,4 +442,4 @@\n-  void* operator new(size_t size, MEMFLAGS flags) throw();\n-  void* operator new [](size_t size, MEMFLAGS flags) throw() = delete;\n-  void* operator new(size_t size, const std::nothrow_t&  nothrow_constant, MEMFLAGS flags) throw();\n-  void* operator new [](size_t size, const std::nothrow_t&  nothrow_constant, MEMFLAGS flags) throw() = delete;\n+  void* operator new(size_t size, MemType flags) throw();\n+  void* operator new [](size_t size, MemType flags) throw() = delete;\n+  void* operator new(size_t size, const std::nothrow_t&  nothrow_constant, MemType flags) throw();\n+  void* operator new [](size_t size, const std::nothrow_t&  nothrow_constant, MemType flags) throw() = delete;\n@@ -571,2 +571,2 @@\n-  static E* allocate_or_null(size_t length, MEMFLAGS flags);\n-  static E* allocate(size_t length, MEMFLAGS flags);\n+  static E* allocate_or_null(size_t length, MemType flags);\n+  static E* allocate(size_t length, MemType flags);\n@@ -582,2 +582,2 @@\n-  static E* allocate(size_t length, MEMFLAGS flags);\n-  static E* reallocate(E* addr, size_t new_length, MEMFLAGS flags);\n+  static E* allocate(size_t length, MemType flags);\n+  static E* reallocate(E* addr, size_t new_length, MemType flags);\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-E* MmapArrayAllocator<E>::allocate_or_null(size_t length, MEMFLAGS flags) {\n+E* MmapArrayAllocator<E>::allocate_or_null(size_t length, MemType flags) {\n@@ -75,1 +75,1 @@\n-E* MmapArrayAllocator<E>::allocate(size_t length, MEMFLAGS flags) {\n+E* MmapArrayAllocator<E>::allocate(size_t length, MemType flags) {\n@@ -100,1 +100,1 @@\n-E* MallocArrayAllocator<E>::allocate(size_t length, MEMFLAGS flags) {\n+E* MallocArrayAllocator<E>::allocate(size_t length, MemType flags) {\n@@ -105,1 +105,1 @@\n-E* MallocArrayAllocator<E>::reallocate(E* addr, size_t new_length, MEMFLAGS flags) {\n+E* MallocArrayAllocator<E>::reallocate(E* addr, size_t new_length, MemType flags) {\n","filename":"src\/hotspot\/share\/memory\/allocation.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -225,1 +225,1 @@\n-Arena::Arena(MEMFLAGS flag, Tag tag, size_t init_size) :\n+Arena::Arena(MemType flag, Tag tag, size_t init_size) :\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-  const MEMFLAGS _flags;        \/\/ Memory tracking flags\n+  const MemType _flags;        \/\/ Memory tracking flags\n@@ -141,1 +141,1 @@\n-  Arena(MEMFLAGS memflag, Tag tag = Tag::tag_other, size_t init_size = Chunk::init_size);\n+  Arena(MemType memflag, Tag tag = Tag::tag_other, size_t init_size = Chunk::init_size);\n","filename":"src\/hotspot\/share\/memory\/arena.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n","filename":"src\/hotspot\/share\/memory\/guardedMemory.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,1 +105,1 @@\n-MemRegion* MemRegion::create_array(size_t length, MEMFLAGS flags) {\n+MemRegion* MemRegion::create_array(size_t length, MemType flags) {\n","filename":"src\/hotspot\/share\/memory\/memRegion.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,1 +93,1 @@\n-  static MemRegion* create_array(size_t length, MEMFLAGS flags);\n+  static MemRegion* create_array(size_t length, MemType flags);\n","filename":"src\/hotspot\/share\/memory\/memRegion.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n@@ -92,1 +92,1 @@\n-template <class T, MEMFLAGS flags, size_t alignment = DEFAULT_PADDING_SIZE>\n+template <class T, MemType flags, size_t alignment = DEFAULT_PADDING_SIZE>\n@@ -103,1 +103,1 @@\n-template <class T, MEMFLAGS flags, size_t alignment = DEFAULT_PADDING_SIZE>\n+template <class T, MemType flags, size_t alignment = DEFAULT_PADDING_SIZE>\n@@ -115,1 +115,1 @@\n-template <class T, MEMFLAGS flags, size_t alignment = DEFAULT_PADDING_SIZE>\n+template <class T, MemType flags, size_t alignment = DEFAULT_PADDING_SIZE>\n","filename":"src\/hotspot\/share\/memory\/padded.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-template <class T, MEMFLAGS flags, size_t alignment>\n+template <class T, MemType flags, size_t alignment>\n@@ -56,1 +56,1 @@\n-template <class T, MEMFLAGS flags, size_t alignment>\n+template <class T, MemType flags, size_t alignment>\n@@ -84,1 +84,1 @@\n-template <class T, MEMFLAGS flags, size_t alignment>\n+template <class T, MemType flags, size_t alignment>\n@@ -90,1 +90,1 @@\n-template <class T, MEMFLAGS flags, size_t alignment>\n+template <class T, MemType flags, size_t alignment>\n","filename":"src\/hotspot\/share\/memory\/padded.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-  ResourceArea(MEMFLAGS flags = mtThread) :\n+  ResourceArea(MemType flags = mtThread) :\n@@ -57,1 +57,1 @@\n-  ResourceArea(size_t init_size, MEMFLAGS flags = mtThread) :\n+  ResourceArea(size_t init_size, MemType flags = mtThread) :\n","filename":"src\/hotspot\/share\/memory\/resourceArea.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n@@ -36,1 +36,1 @@\n-  const MEMFLAGS         _flag;\n+  const MemType         _flag;\n@@ -38,1 +38,1 @@\n-  AllocationSite(const NativeCallStack& stack, MEMFLAGS flag) : _call_stack(stack), _flag(flag) { }\n+  AllocationSite(const NativeCallStack& stack, MemType flag) : _call_stack(stack), _flag(flag) { }\n@@ -52,1 +52,1 @@\n-  MEMFLAGS flag() const { return _flag; }\n+  MemType flag() const { return _flag; }\n","filename":"src\/hotspot\/share\/nmt\/allocationSite.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-template<typename E, MEMFLAGS flag>\n+template<typename E, MemType flag>\n","filename":"src\/hotspot\/share\/nmt\/arrayWithFreeList.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n@@ -36,1 +36,1 @@\n-\/\/ The malloc header, as well as the coming VMATree implementation, rely on MEMFLAGS\n+\/\/ The malloc header, as well as the coming VMATree implementation, rely on MemType\n@@ -38,1 +38,1 @@\n-STATIC_ASSERT(sizeof(MEMFLAGS) == sizeof(uint8_t));\n+STATIC_ASSERT(sizeof(MemType) == sizeof(uint8_t));\n","filename":"src\/hotspot\/share\/nmt\/mallocHeader.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n@@ -95,1 +95,1 @@\n-  const MEMFLAGS _flags;\n+  const MemType _flags;\n@@ -124,1 +124,1 @@\n-    const MEMFLAGS flags;\n+    const MemType flags;\n@@ -128,1 +128,1 @@\n-  inline MallocHeader(size_t size, MEMFLAGS flags, uint32_t mst_marker);\n+  inline MallocHeader(size_t size, MemType flags, uint32_t mst_marker);\n@@ -131,1 +131,1 @@\n-  inline MEMFLAGS flags() const { return _flags; }\n+  inline MemType flags() const { return _flags; }\n","filename":"src\/hotspot\/share\/nmt\/mallocHeader.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-inline MallocHeader::MallocHeader(size_t size, MEMFLAGS flags, uint32_t mst_marker)\n+inline MallocHeader::MallocHeader(size_t size, MemType flags, uint32_t mst_marker)\n","filename":"src\/hotspot\/share\/nmt\/mallocHeader.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n@@ -83,1 +83,1 @@\n-  bool match_category(MEMFLAGS* out) {\n+  bool match_category(MemType* out) {\n@@ -93,1 +93,1 @@\n-    MEMFLAGS f = NMTUtil::string_to_flag(ss.base());\n+    MemType f = NMTUtil::string_to_flag(ss.base());\n@@ -134,1 +134,1 @@\n-void MallocLimitSet::set_category_limit(MEMFLAGS f, size_t s, MallocLimitMode flag) {\n+void MallocLimitSet::set_category_limit(MemType f, size_t s, MallocLimitMode flag) {\n@@ -190,1 +190,1 @@\n-      MEMFLAGS f;\n+      MemType f;\n","filename":"src\/hotspot\/share\/nmt\/mallocLimit.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n@@ -57,1 +57,1 @@\n-  void set_category_limit(MEMFLAGS f, size_t s, MallocLimitMode flag);\n+  void set_category_limit(MemType f, size_t s, MallocLimitMode flag);\n@@ -60,1 +60,1 @@\n-  const malloclimit* category_limit(MEMFLAGS f) const { return &_cat[(int)f]; }\n+  const malloclimit* category_limit(MemType f) const { return &_cat[(int)f]; }\n@@ -72,1 +72,1 @@\n-  static const malloclimit* category_limit(MEMFLAGS f) { return _limits.category_limit(f); }\n+  static const malloclimit* category_limit(MemType f) { return _limits.category_limit(f); }\n","filename":"src\/hotspot\/share\/nmt\/mallocLimit.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -114,1 +114,1 @@\n-MallocSite* MallocSiteTable::lookup_or_add(const NativeCallStack& key, uint32_t* marker, MEMFLAGS flags) {\n+MallocSite* MallocSiteTable::lookup_or_add(const NativeCallStack& key, uint32_t* marker, MemType flags) {\n@@ -180,1 +180,1 @@\n-MallocSiteHashtableEntry* MallocSiteTable::new_entry(const NativeCallStack& key, MEMFLAGS flags) {\n+MallocSiteHashtableEntry* MallocSiteTable::new_entry(const NativeCallStack& key, MemType flags) {\n","filename":"src\/hotspot\/share\/nmt\/mallocSiteTable.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-  MallocSite(const NativeCallStack& stack, MEMFLAGS flags) :\n+  MallocSite(const NativeCallStack& stack, MemType flags) :\n@@ -66,1 +66,1 @@\n-  MallocSiteHashtableEntry(NativeCallStack stack, MEMFLAGS flags):\n+  MallocSiteHashtableEntry(NativeCallStack stack, MemType flags):\n@@ -150,1 +150,1 @@\n-      uint32_t* marker, MEMFLAGS flags) {\n+      uint32_t* marker, MemType flags) {\n@@ -173,1 +173,1 @@\n-  static MallocSiteHashtableEntry* new_entry(const NativeCallStack& key, MEMFLAGS flags);\n+  static MallocSiteHashtableEntry* new_entry(const NativeCallStack& key, MemType flags);\n@@ -175,1 +175,1 @@\n-  static MallocSite* lookup_or_add(const NativeCallStack& key, uint32_t* marker, MEMFLAGS flags);\n+  static MallocSite* lookup_or_add(const NativeCallStack& key, uint32_t* marker, MemType flags);\n","filename":"src\/hotspot\/share\/nmt\/mallocSiteTable.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-bool MallocMemorySummary::category_limit_reached(MEMFLAGS f, size_t s, size_t so_far, const malloclimit* limit) {\n+bool MallocMemorySummary::category_limit_reached(MemType f, size_t s, size_t so_far, const malloclimit* limit) {\n@@ -170,1 +170,1 @@\n-void* MallocTracker::record_malloc(void* malloc_base, size_t size, MEMFLAGS flags,\n+void* MallocTracker::record_malloc(void* malloc_base, size_t size, MemType flags,\n","filename":"src\/hotspot\/share\/nmt\/mallocTracker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n@@ -158,1 +158,1 @@\n-  inline MallocMemory* by_type(MEMFLAGS flags) {\n+  inline MallocMemory* by_type(MemType flags) {\n@@ -163,1 +163,1 @@\n-  inline const MallocMemory* by_type(MEMFLAGS flags) const {\n+  inline const MallocMemory* by_type(MemType flags) const {\n@@ -217,1 +217,1 @@\n-  static bool category_limit_reached(MEMFLAGS f, size_t s, size_t so_far, const malloclimit* limit);\n+  static bool category_limit_reached(MemType f, size_t s, size_t so_far, const malloclimit* limit);\n@@ -222,1 +222,1 @@\n-   static inline void record_malloc(size_t size, MEMFLAGS flag) {\n+   static inline void record_malloc(size_t size, MemType flag) {\n@@ -227,1 +227,1 @@\n-   static inline void record_free(size_t size, MEMFLAGS flag) {\n+   static inline void record_free(size_t size, MemType flag) {\n@@ -232,1 +232,1 @@\n-   static inline void record_new_arena(MEMFLAGS flag) {\n+   static inline void record_new_arena(MemType flag) {\n@@ -236,1 +236,1 @@\n-   static inline void record_arena_free(MEMFLAGS flag) {\n+   static inline void record_arena_free(MemType flag) {\n@@ -240,1 +240,1 @@\n-   static inline void record_arena_size_change(ssize_t size, MEMFLAGS flag) {\n+   static inline void record_arena_size_change(ssize_t size, MemType flag) {\n@@ -260,1 +260,1 @@\n-  static inline bool check_exceeds_limit(size_t s, MEMFLAGS f);\n+  static inline bool check_exceeds_limit(size_t s, MemType f);\n@@ -283,1 +283,1 @@\n-  static void* record_malloc(void* malloc_base, size_t size, MEMFLAGS flags,\n+  static void* record_malloc(void* malloc_base, size_t size, MemType flags,\n@@ -292,1 +292,1 @@\n-  static inline void record_new_arena(MEMFLAGS flags) {\n+  static inline void record_new_arena(MemType flags) {\n@@ -296,1 +296,1 @@\n-  static inline void record_arena_free(MEMFLAGS flags) {\n+  static inline void record_arena_free(MemType flags) {\n@@ -300,1 +300,1 @@\n-  static inline void record_arena_size_change(ssize_t size, MEMFLAGS flags) {\n+  static inline void record_arena_size_change(ssize_t size, MemType flags) {\n@@ -306,1 +306,1 @@\n-  static inline bool check_exceeds_limit(size_t s, MEMFLAGS f);\n+  static inline bool check_exceeds_limit(size_t s, MemType f);\n","filename":"src\/hotspot\/share\/nmt\/mallocTracker.hpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-inline bool MallocMemorySummary::check_exceeds_limit(size_t s, MEMFLAGS f) {\n+inline bool MallocMemorySummary::check_exceeds_limit(size_t s, MemType f) {\n@@ -67,1 +67,1 @@\n-inline bool MallocTracker::check_exceeds_limit(size_t s, MEMFLAGS f) {\n+inline bool MallocTracker::check_exceeds_limit(size_t s, MemType f) {\n","filename":"src\/hotspot\/share\/nmt\/mallocTracker.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -147,1 +147,1 @@\n-  MallocMemory* malloc_memory(MEMFLAGS flag) {\n+  MallocMemory* malloc_memory(MemType flag) {\n@@ -152,1 +152,1 @@\n-  VirtualMemory* virtual_memory(MEMFLAGS flag) {\n+  VirtualMemory* virtual_memory(MemType flag) {\n","filename":"src\/hotspot\/share\/nmt\/memBaseline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n@@ -43,1 +43,1 @@\n-  void set_flag(MEMFLAGS f) {\n+  void set_flag(MemType f) {\n@@ -48,1 +48,1 @@\n-  bool has_flag(MEMFLAGS f) const {\n+  bool has_flag(MemType f) const {\n","filename":"src\/hotspot\/share\/nmt\/memFlagBitmap.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n@@ -70,1 +70,1 @@\n-static const char* get_shortname_for_nmt_flag(MEMFLAGS f) {\n+static const char* get_shortname_for_nmt_flag(MemType f) {\n@@ -91,1 +91,1 @@\n-  MEMFLAGS* _flags;\n+  MemType* _flags;\n@@ -104,1 +104,1 @@\n-  bool add(const void* from, const void* to, MEMFLAGS f) {\n+  bool add(const void* from, const void* to, MemType f) {\n@@ -117,1 +117,1 @@\n-      ALLOW_C_FUNCTION(realloc, _flags = (MEMFLAGS*)::realloc(_flags, new_capacity * sizeof(MEMFLAGS));)\n+      ALLOW_C_FUNCTION(realloc, _flags = (MemType*)::realloc(_flags, new_capacity * sizeof(MemType));)\n@@ -253,1 +253,1 @@\n-        const MEMFLAGS flag = (MEMFLAGS)i;\n+        const MemType flag = (MemType)i;\n","filename":"src\/hotspot\/share\/nmt\/memMapPrinter.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n","filename":"src\/hotspot\/share\/nmt\/memMapPrinter.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n@@ -73,1 +73,1 @@\n-void MemReporterBase::print_malloc(const MemoryCounter* c, MEMFLAGS flag) const {\n+void MemReporterBase::print_malloc(const MemoryCounter* c, MemType flag) const {\n@@ -181,1 +181,1 @@\n-    MEMFLAGS flag = NMTUtil::index_to_flag(index);\n+    MemType flag = NMTUtil::index_to_flag(index);\n@@ -191,1 +191,1 @@\n-void MemSummaryReporter::report_summary_of_type(MEMFLAGS flag,\n+void MemSummaryReporter::report_summary_of_type(MemType flag,\n@@ -341,1 +341,1 @@\n-    MEMFLAGS flag = malloc_site->flag();\n+    MemType flag = malloc_site->flag();\n@@ -381,1 +381,1 @@\n-      const MEMFLAGS flag = virtual_memory_site->flag();\n+      const MemType flag = virtual_memory_site->flag();\n@@ -524,1 +524,1 @@\n-    MEMFLAGS flag = NMTUtil::index_to_flag(index);\n+    MemType flag = NMTUtil::index_to_flag(index);\n@@ -538,1 +538,1 @@\n-    size_t early_amount, size_t early_count, MEMFLAGS flags) const {\n+    size_t early_amount, size_t early_count, MemType flags) const {\n@@ -597,1 +597,1 @@\n-void MemSummaryDiffReporter::diff_summary_of_type(MEMFLAGS flag,\n+void MemSummaryDiffReporter::diff_summary_of_type(MemType flag,\n@@ -891,1 +891,1 @@\n-  size_t current_count, size_t early_size, size_t early_count, MEMFLAGS flags) const {\n+  size_t current_count, size_t early_size, size_t early_count, MemType flags) const {\n@@ -926,1 +926,1 @@\n-  size_t current_committed, size_t early_reserved, size_t early_committed, MEMFLAGS flag) const  {\n+  size_t current_committed, size_t early_reserved, size_t early_committed, MemType flag) const  {\n","filename":"src\/hotspot\/share\/nmt\/memReporter.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-  void print_malloc(const MemoryCounter* c, MEMFLAGS flag = mtNone) const;\n+  void print_malloc(const MemoryCounter* c, MemType flag = mtNone) const;\n@@ -142,1 +142,1 @@\n-  void report_summary_of_type(MEMFLAGS type, MallocMemory* malloc_memory,\n+  void report_summary_of_type(MemType type, MallocMemory* malloc_memory,\n@@ -207,1 +207,1 @@\n-  void diff_summary_of_type(MEMFLAGS type,\n+  void diff_summary_of_type(MemType type,\n@@ -215,1 +215,1 @@\n-    size_t early_amount, size_t early_count, MEMFLAGS flags) const;\n+    size_t early_amount, size_t early_count, MemType flags) const;\n@@ -265,1 +265,1 @@\n-    size_t currrent_count, size_t early_size, size_t early_count, MEMFLAGS flags) const;\n+    size_t currrent_count, size_t early_size, size_t early_count, MemType flags) const;\n@@ -267,1 +267,1 @@\n-    size_t current_committed, size_t early_reserved, size_t early_committed, MEMFLAGS flag) const;\n+    size_t current_committed, size_t early_reserved, size_t early_committed, MemType flag) const;\n","filename":"src\/hotspot\/share\/nmt\/memReporter.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,1 +78,1 @@\n-  static inline void* record_malloc(void* mem_base, size_t size, MEMFLAGS flag,\n+  static inline void* record_malloc(void* mem_base, size_t size, MemType flag,\n@@ -102,1 +102,1 @@\n-  static inline void record_new_arena(MEMFLAGS flag) {\n+  static inline void record_new_arena(MemType flag) {\n@@ -108,1 +108,1 @@\n-  static inline void record_arena_free(MEMFLAGS flag) {\n+  static inline void record_arena_free(MemType flag) {\n@@ -115,1 +115,1 @@\n-  static inline void record_arena_size_change(ssize_t diff, MEMFLAGS flag) {\n+  static inline void record_arena_size_change(ssize_t diff, MemType flag) {\n@@ -124,1 +124,1 @@\n-    MEMFLAGS flag = mtNone) {\n+    MemType flag = mtNone) {\n@@ -150,1 +150,1 @@\n-    const NativeCallStack& stack, MEMFLAGS flag = mtNone) {\n+    const NativeCallStack& stack, MemType flag = mtNone) {\n@@ -186,1 +186,1 @@\n-                                       const NativeCallStack& stack, MEMFLAGS flag) {\n+                                       const NativeCallStack& stack, MemType flag) {\n@@ -209,1 +209,1 @@\n-  static inline void record_virtual_memory_split_reserved(void* addr, size_t size, size_t split, MEMFLAGS flag, MEMFLAGS split_flag) {\n+  static inline void record_virtual_memory_split_reserved(void* addr, size_t size, size_t split, MemType flag, MemType split_flag) {\n@@ -218,1 +218,1 @@\n-  static inline void record_virtual_memory_type(void* addr, MEMFLAGS flag) {\n+  static inline void record_virtual_memory_type(void* addr, MemType flag) {\n@@ -266,1 +266,1 @@\n-  static inline bool check_exceeds_limit(size_t s, MEMFLAGS f);\n+  static inline bool check_exceeds_limit(size_t s, MemType f);\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-inline bool MemTracker::check_exceeds_limit(size_t s, MEMFLAGS f) {\n+inline bool MemTracker::check_exceeds_limit(size_t s, MemType f) {\n","filename":"src\/hotspot\/share\/nmt\/memTracker.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,2 +25,2 @@\n-#ifndef SHARE_NMT_MEMFLAGS_HPP\n-#define SHARE_NMT_MEMFLAGS_HPP\n+#ifndef SHARE_NMT_MEMTYPE_HPP\n+#define SHARE_NMT_MEMTYPE_HPP\n@@ -67,1 +67,1 @@\n-enum class MEMFLAGS : uint8_t  {\n+enum class MemType : uint8_t  {\n@@ -74,1 +74,1 @@\n-  constexpr MEMFLAGS type = MEMFLAGS::type;\n+  constexpr MemType type = MemType::type;\n@@ -76,1 +76,1 @@\n-\/\/ Generate short aliases for the enum values. E.g. mtGC instead of MEMFLAGS::mtGC.\n+\/\/ Generate short aliases for the enum values. E.g. mtGC instead of MemType::mtGC.\n@@ -80,1 +80,1 @@\n-constexpr int mt_number_of_types = static_cast<int>(MEMFLAGS::mt_number_of_types);\n+constexpr int mt_number_of_types = static_cast<int>(MemType::mt_number_of_types);\n@@ -82,1 +82,1 @@\n-#endif \/\/ SHARE_NMT_MEMFLAGS_HPP\n+#endif \/\/ SHARE_NMT_MEMTYPE_HPP\n","filename":"src\/hotspot\/share\/nmt\/memType.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"previous_filename":"src\/hotspot\/share\/nmt\/memflags.hpp","status":"renamed"},{"patch":"@@ -45,1 +45,1 @@\n-                                        MEMFLAGS flag) {\n+                                        MemType flag) {\n@@ -141,1 +141,1 @@\n-                                                  MEMFLAGS flag) {\n+                                                  MemType flag) {\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-                       MEMFLAGS flag);\n+                       MemType flag);\n@@ -99,1 +99,1 @@\n-                                const NativeCallStack& stack, MEMFLAGS flag);\n+                                const NativeCallStack& stack, MemType flag);\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n","filename":"src\/hotspot\/share\/nmt\/nativeCallStackPrinter.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,1 +90,1 @@\n-MEMFLAGS NMTUtil::string_to_flag(const char* s) {\n+MemType NMTUtil::string_to_flag(const char* s) {\n@@ -97,1 +97,1 @@\n-      return (MEMFLAGS)i;\n+      return (MemType)i;\n","filename":"src\/hotspot\/share\/nmt\/nmtCommon.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n@@ -78,1 +78,1 @@\n-  \/\/ Check if index is a valid MEMFLAGS enum value (including mtNone)\n+  \/\/ Check if index is a valid MemType enum value (including mtNone)\n@@ -83,2 +83,2 @@\n-  \/\/ Check if flag value is a valid MEMFLAGS enum value (including mtNone)\n-  static inline bool flag_is_valid(MEMFLAGS flag) {\n+  \/\/ Check if flag value is a valid MemType enum value (including mtNone)\n+  static inline bool flag_is_valid(MemType flag) {\n@@ -90,1 +90,1 @@\n-  static inline int flag_to_index(MEMFLAGS flag) {\n+  static inline int flag_to_index(MemType flag) {\n@@ -96,1 +96,1 @@\n-  static const char* flag_to_name(MEMFLAGS flag) {\n+  static const char* flag_to_name(MemType flag) {\n@@ -101,1 +101,1 @@\n-  static const char* flag_to_enum_name(MEMFLAGS flag) {\n+  static const char* flag_to_enum_name(MemType flag) {\n@@ -106,1 +106,1 @@\n-  static MEMFLAGS index_to_flag(int index) {\n+  static MemType index_to_flag(int index) {\n@@ -108,1 +108,1 @@\n-    return static_cast<MEMFLAGS>(index);\n+    return static_cast<MemType>(index);\n@@ -127,1 +127,1 @@\n-  static MEMFLAGS string_to_flag(const char* name);\n+  static MemType string_to_flag(const char* name);\n","filename":"src\/hotspot\/share\/nmt\/nmtCommon.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -201,1 +201,1 @@\n-void* NMTPreInit::do_os_malloc(size_t size, MEMFLAGS memflags) {\n+void* NMTPreInit::do_os_malloc(size_t size, MemType memflags) {\n","filename":"src\/hotspot\/share\/nmt\/nmtPreInit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -258,1 +258,1 @@\n-  static void* do_os_malloc(size_t size, MEMFLAGS memflags);\n+  static void* do_os_malloc(size_t size, MemType memflags);\n@@ -286,1 +286,1 @@\n-  static bool handle_realloc(void** rc, void* old_p, size_t new_size, MEMFLAGS memflags) {\n+  static bool handle_realloc(void** rc, void* old_p, size_t new_size, MemType memflags) {\n","filename":"src\/hotspot\/share\/nmt\/nmtPreInit.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-    MEMFLAGS flag = NMTUtil::index_to_flag(i);\n+    MemType flag = NMTUtil::index_to_flag(i);\n@@ -85,1 +85,1 @@\n-    MEMFLAGS flag = NMTUtil::index_to_flag(i);\n+    MemType flag = NMTUtil::index_to_flag(i);\n@@ -119,1 +119,1 @@\n-size_t NMTUsage::reserved(MEMFLAGS flag) const {\n+size_t NMTUsage::reserved(MemType flag) const {\n@@ -124,1 +124,1 @@\n-size_t NMTUsage::committed(MEMFLAGS flag) const {\n+size_t NMTUsage::committed(MemType flag) const {\n","filename":"src\/hotspot\/share\/nmt\/nmtUsage.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,2 +64,2 @@\n-  size_t reserved(MEMFLAGS flag) const;\n-  size_t committed(MEMFLAGS flag) const;\n+  size_t reserved(MemType flag) const;\n+  size_t committed(MemType flag) const;\n","filename":"src\/hotspot\/share\/nmt\/nmtUsage.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -295,1 +295,1 @@\n-void ReservedMemoryRegion::set_flag(MEMFLAGS f) {\n+void ReservedMemoryRegion::set_flag(MemType f) {\n@@ -337,1 +337,1 @@\n-    const NativeCallStack& stack, MEMFLAGS flag) {\n+    const NativeCallStack& stack, MemType flag) {\n@@ -416,1 +416,1 @@\n-void VirtualMemoryTracker::set_reserved_region_type(address addr, MEMFLAGS flag) {\n+void VirtualMemoryTracker::set_reserved_region_type(address addr, MemType flag) {\n@@ -561,1 +561,1 @@\n-bool VirtualMemoryTracker::split_reserved_region(address addr, size_t size, size_t split, MEMFLAGS flag, MEMFLAGS split_flag) {\n+bool VirtualMemoryTracker::split_reserved_region(address addr, size_t size, size_t split, MemType flag, MemType split_flag) {\n@@ -570,1 +570,1 @@\n-  MEMFLAGS original_flags = reserved_rgn->flag();\n+  MemType original_flags = reserved_rgn->flag();\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,1 @@\n-  VirtualMemoryAllocationSite(const NativeCallStack& stack, MEMFLAGS flag) :\n+  VirtualMemoryAllocationSite(const NativeCallStack& stack, MemType flag) :\n@@ -101,1 +101,1 @@\n-  inline VirtualMemory* by_type(MEMFLAGS flag) {\n+  inline VirtualMemory* by_type(MemType flag) {\n@@ -106,1 +106,1 @@\n-  inline const VirtualMemory* by_type(MEMFLAGS flag) const {\n+  inline const VirtualMemory* by_type(MemType flag) const {\n@@ -137,1 +137,1 @@\n-  static inline void record_reserved_memory(size_t size, MEMFLAGS flag) {\n+  static inline void record_reserved_memory(size_t size, MemType flag) {\n@@ -141,1 +141,1 @@\n-  static inline void record_committed_memory(size_t size, MEMFLAGS flag) {\n+  static inline void record_committed_memory(size_t size, MemType flag) {\n@@ -145,1 +145,1 @@\n-  static inline void record_uncommitted_memory(size_t size, MEMFLAGS flag) {\n+  static inline void record_uncommitted_memory(size_t size, MemType flag) {\n@@ -149,1 +149,1 @@\n-  static inline void record_released_memory(size_t size, MEMFLAGS flag) {\n+  static inline void record_released_memory(size_t size, MemType flag) {\n@@ -157,1 +157,1 @@\n-  static inline void move_reserved_memory(MEMFLAGS from, MEMFLAGS to, size_t size) {\n+  static inline void move_reserved_memory(MemType from, MemType to, size_t size) {\n@@ -162,1 +162,1 @@\n-  static inline void move_committed_memory(MEMFLAGS from, MEMFLAGS to, size_t size) {\n+  static inline void move_committed_memory(MemType from, MemType to, size_t size) {\n@@ -296,1 +296,1 @@\n-  MEMFLAGS         _flag;\n+  MemType         _flag;\n@@ -300,1 +300,1 @@\n-    MEMFLAGS flag = mtNone) :\n+    MemType flag = mtNone) :\n@@ -316,2 +316,2 @@\n-  void  set_flag(MEMFLAGS flag);\n-  inline MEMFLAGS flag() const            { return _flag;  }\n+  void  set_flag(MemType flag);\n+  inline MemType flag() const            { return _flag;  }\n@@ -383,1 +383,1 @@\n-  static bool add_reserved_region (address base_addr, size_t size, const NativeCallStack& stack, MEMFLAGS flag = mtNone);\n+  static bool add_reserved_region (address base_addr, size_t size, const NativeCallStack& stack, MemType flag = mtNone);\n@@ -389,1 +389,1 @@\n-  static void set_reserved_region_type  (address addr, MEMFLAGS flag);\n+  static void set_reserved_region_type  (address addr, MemType flag);\n@@ -394,1 +394,1 @@\n-  static bool split_reserved_region(address addr, size_t size, size_t split, MEMFLAGS flag, MEMFLAGS split_flag);\n+  static bool split_reserved_region(address addr, size_t size, size_t split, MemType flag, MemType split_flag);\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.hpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-\/\/ or from committed memory of a certain MEMFLAGS to committed memory of a different MEMFLAGS.\n+\/\/ or from committed memory of a certain MemType to committed memory of a different MemType.\n@@ -72,1 +72,1 @@\n-    const MEMFLAGS flag;\n+    const MemType flag;\n@@ -76,1 +76,1 @@\n-    RegionData(NativeCallStackStorage::StackIndex stack_idx, MEMFLAGS flag)\n+    RegionData(NativeCallStackStorage::StackIndex stack_idx, MemType flag)\n@@ -107,2 +107,2 @@\n-    MEMFLAGS flag() const {\n-      return static_cast<MEMFLAGS>(type_flag[1]);\n+    MemType flag() const {\n+      return static_cast<MemType>(type_flag[1]);\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiAgentList.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -699,1 +699,1 @@\n-  return (jlong)(uintptr_t)os::malloc(size, (MEMFLAGS)type, stack);\n+  return (jlong)(uintptr_t)os::malloc(size, (MemType)type, stack);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-  HandleArea(MEMFLAGS flags, HandleArea* prev) : Arena(flags, Tag::tag_ha, Chunk::tiny_size) {\n+  HandleArea(MemType flags, HandleArea* prev) : Arena(flags, Tag::tag_ha, Chunk::tiny_size) {\n","filename":"src\/hotspot\/share\/runtime\/handles.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -412,1 +412,1 @@\n-JavaThread::JavaThread(MEMFLAGS flags) :\n+JavaThread::JavaThread(MemType flags) :\n@@ -636,1 +636,1 @@\n-JavaThread::JavaThread(ThreadFunction entry_point, size_t stack_sz, MEMFLAGS flags) : JavaThread(flags) {\n+JavaThread::JavaThread(ThreadFunction entry_point, size_t stack_sz, MemType flags) : JavaThread(flags) {\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -481,2 +481,2 @@\n-  JavaThread(MEMFLAGS flags = mtThread);   \/\/ delegating constructor\n-  JavaThread(ThreadFunction entry_point, size_t stack_size = 0, MEMFLAGS flags = mtThread);\n+  JavaThread(MemType flags = mtThread);   \/\/ delegating constructor\n+  JavaThread(ThreadFunction entry_point, size_t stack_size = 0, MemType flags = mtThread);\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -603,1 +603,1 @@\n-char *os::strdup(const char *str, MEMFLAGS flags) {\n+char *os::strdup(const char *str, MemType flags) {\n@@ -611,1 +611,1 @@\n-char* os::strdup_check_oom(const char* str, MEMFLAGS flags) {\n+char* os::strdup_check_oom(const char* str, MemType flags) {\n@@ -632,1 +632,1 @@\n-void* os::malloc(size_t size, MEMFLAGS flags) {\n+void* os::malloc(size_t size, MemType flags) {\n@@ -636,1 +636,1 @@\n-void* os::malloc(size_t size, MEMFLAGS memflags, const NativeCallStack& stack) {\n+void* os::malloc(size_t size, MemType memflags, const NativeCallStack& stack) {\n@@ -682,1 +682,1 @@\n-void* os::realloc(void *memblock, size_t size, MEMFLAGS flags) {\n+void* os::realloc(void *memblock, size_t size, MemType flags) {\n@@ -686,1 +686,1 @@\n-void* os::realloc(void *memblock, size_t size, MEMFLAGS memflags, const NativeCallStack& stack) {\n+void* os::realloc(void *memblock, size_t size, MemType memflags, const NativeCallStack& stack) {\n@@ -1867,1 +1867,1 @@\n-char* os::reserve_memory(size_t bytes, bool executable, MEMFLAGS flags) {\n+char* os::reserve_memory(size_t bytes, bool executable, MemType flags) {\n@@ -1878,1 +1878,1 @@\n-char* os::attempt_reserve_memory_at(char* addr, size_t bytes, bool executable, MEMFLAGS flag) {\n+char* os::attempt_reserve_memory_at(char* addr, size_t bytes, bool executable, MemType flag) {\n@@ -2231,1 +2231,1 @@\n-char* os::map_memory_to_file(size_t bytes, int file_desc, MEMFLAGS flag) {\n+char* os::map_memory_to_file(size_t bytes, int file_desc, MemType flag) {\n@@ -2242,1 +2242,1 @@\n-char* os::attempt_map_memory_to_file_at(char* addr, size_t bytes, int file_desc, MEMFLAGS flag) {\n+char* os::attempt_map_memory_to_file_at(char* addr, size_t bytes, int file_desc, MemType flag) {\n@@ -2252,1 +2252,1 @@\n-                           bool allow_exec, MEMFLAGS flags) {\n+                           bool allow_exec, MemType flags) {\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -453,1 +453,1 @@\n-  static char*  reserve_memory(size_t bytes, bool executable = false, MEMFLAGS flags = mtNone);\n+  static char*  reserve_memory(size_t bytes, bool executable = false, MemType flags = mtNone);\n@@ -460,1 +460,1 @@\n-  static char*  attempt_reserve_memory_at(char* addr, size_t bytes, bool executable = false, MEMFLAGS flag = mtNone);\n+  static char*  attempt_reserve_memory_at(char* addr, size_t bytes, bool executable = false, MemType flag = mtNone);\n@@ -512,2 +512,2 @@\n-  static char* map_memory_to_file(size_t size, int fd, MEMFLAGS flag = mtNone);\n-  static char* map_memory_to_file_aligned(size_t size, size_t alignment, int fd, MEMFLAGS flag = mtNone);\n+  static char* map_memory_to_file(size_t size, int fd, MemType flag = mtNone);\n+  static char* map_memory_to_file_aligned(size_t size, size_t alignment, int fd, MemType flag = mtNone);\n@@ -515,1 +515,1 @@\n-  static char* attempt_map_memory_to_file_at(char* base, size_t size, int fd, MEMFLAGS flag = mtNone);\n+  static char* attempt_map_memory_to_file_at(char* base, size_t size, int fd, MemType flag = mtNone);\n@@ -521,1 +521,1 @@\n-                           bool allow_exec = false, MEMFLAGS flags = mtNone);\n+                           bool allow_exec = false, MemType flags = mtNone);\n@@ -903,4 +903,4 @@\n-  static void* malloc  (size_t size, MEMFLAGS flags, const NativeCallStack& stack);\n-  static void* malloc  (size_t size, MEMFLAGS flags);\n-  static void* realloc (void *memblock, size_t size, MEMFLAGS flag, const NativeCallStack& stack);\n-  static void* realloc (void *memblock, size_t size, MEMFLAGS flag);\n+  static void* malloc  (size_t size, MemType flags, const NativeCallStack& stack);\n+  static void* malloc  (size_t size, MemType flags);\n+  static void* realloc (void *memblock, size_t size, MemType flag, const NativeCallStack& stack);\n+  static void* realloc (void *memblock, size_t size, MemType flag);\n@@ -910,1 +910,1 @@\n-  static char* strdup(const char *, MEMFLAGS flags = mtInternal);  \/\/ Like strdup\n+  static char* strdup(const char *, MemType flags = mtInternal);  \/\/ Like strdup\n@@ -912,1 +912,1 @@\n-  static char* strdup_check_oom(const char*, MEMFLAGS flags = mtInternal);\n+  static char* strdup_check_oom(const char*, MemType flags = mtInternal);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-Thread::Thread(MEMFLAGS flags) {\n+Thread::Thread(MemType flags) {\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -280,1 +280,1 @@\n-  Thread(MEMFLAGS flag = mtThread);\n+  Thread(MemType flag = mtThread);\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n","filename":"src\/hotspot\/share\/services\/threadService.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -176,1 +176,1 @@\n-CHeapBitMap::CHeapBitMap(idx_t size_in_bits, MEMFLAGS flags, bool clear)\n+CHeapBitMap::CHeapBitMap(idx_t size_in_bits, MemType flags, bool clear)\n","filename":"src\/hotspot\/share\/utilities\/bitMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n@@ -645,1 +645,1 @@\n-  const MEMFLAGS _flags;\n+  const MemType _flags;\n@@ -652,2 +652,2 @@\n-  explicit CHeapBitMap(MEMFLAGS flags) : GrowableBitMap(), _flags(flags) {}\n-  CHeapBitMap(idx_t size_in_bits, MEMFLAGS flags, bool clear = true);\n+  explicit CHeapBitMap(MemType flags) : GrowableBitMap(), _flags(flags) {}\n+  CHeapBitMap(idx_t size_in_bits, MemType flags, bool clear = true);\n","filename":"src\/hotspot\/share\/utilities\/bitMap.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-template <class T, MEMFLAGS F> class ChunkedList : public CHeapObj<F> {\n+template <class T, MemType F> class ChunkedList : public CHeapObj<F> {\n","filename":"src\/hotspot\/share\/utilities\/chunkedList.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -64,1 +64,1 @@\n-  \/\/ Only constructed with placement new from memory allocated with MEMFLAGS of\n+  \/\/ Only constructed with placement new from memory allocated with MemType of\n@@ -103,1 +103,1 @@\n-  \/\/ Only constructed with placement new from an array allocated with MEMFLAGS\n+  \/\/ Only constructed with placement new from an array allocated with MemType\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -70,1 +70,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -78,1 +78,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -90,1 +90,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -99,1 +99,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -106,1 +106,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -113,1 +113,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -131,1 +131,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -144,1 +144,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -159,1 +159,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -174,1 +174,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -184,1 +184,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -193,1 +193,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -209,1 +209,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -217,1 +217,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -230,1 +230,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -237,1 +237,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -246,1 +246,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -274,1 +274,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -290,1 +290,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -307,1 +307,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -326,1 +326,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -351,1 +351,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -361,1 +361,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -377,1 +377,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -385,1 +385,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -393,1 +393,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -409,1 +409,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -449,1 +449,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -481,1 +481,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -536,1 +536,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -571,1 +571,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -585,1 +585,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -616,1 +616,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -641,1 +641,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -699,1 +699,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -716,1 +716,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -735,1 +735,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -772,1 +772,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -787,1 +787,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -801,1 +801,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -827,1 +827,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -845,1 +845,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -861,1 +861,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -882,1 +882,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -949,1 +949,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -965,1 +965,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -982,1 +982,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -1013,1 +1013,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -1032,1 +1032,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -1042,1 +1042,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -1050,1 +1050,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -1058,1 +1058,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -1067,1 +1067,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -1076,1 +1076,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -1084,1 +1084,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -1092,1 +1092,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -1107,1 +1107,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -1127,1 +1127,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -1140,1 +1140,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -1154,1 +1154,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -1178,1 +1178,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -1203,1 +1203,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -1217,1 +1217,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -1229,1 +1229,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -1267,1 +1267,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -1282,1 +1282,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -1299,1 +1299,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.inline.hpp","additions":68,"deletions":68,"binary":false,"changes":136,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -149,1 +149,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -193,1 +193,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n@@ -232,1 +232,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemType F>\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTableTasks.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-void* GrowableArrayCHeapAllocator::allocate(int max, int element_size, MEMFLAGS memflags) {\n+void* GrowableArrayCHeapAllocator::allocate(int max, int element_size, MemType memflags) {\n","filename":"src\/hotspot\/share\/utilities\/growableArray.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -598,1 +598,1 @@\n-  static void* allocate(int max, int element_size, MEMFLAGS memflags);\n+  static void* allocate(int max, int element_size, MemType memflags);\n@@ -631,2 +631,2 @@\n-  static uintptr_t bits(MEMFLAGS memflags) {\n-    assert(memflags != mtNone, \"Must provide a proper MEMFLAGS\");\n+  static uintptr_t bits(MemType memflags) {\n+    assert(memflags != mtNone, \"Must provide a proper MemType\");\n@@ -656,1 +656,1 @@\n-  GrowableArrayMetadata(MEMFLAGS memflags) :\n+  GrowableArrayMetadata(MemType memflags) :\n@@ -686,1 +686,1 @@\n-  MEMFLAGS memflags() const { return MEMFLAGS(_bits >> 1); }\n+  MemType memflags() const { return MemType(_bits >> 1); }\n@@ -715,1 +715,1 @@\n-  static E* allocate(int max, MEMFLAGS memflags) {\n+  static E* allocate(int max, MemType memflags) {\n@@ -763,1 +763,1 @@\n-  GrowableArray(int initial_capacity, MEMFLAGS memflags) :\n+  GrowableArray(int initial_capacity, MemType memflags) :\n@@ -779,1 +779,1 @@\n-  GrowableArray(int initial_capacity, int initial_len, const E& filler, MEMFLAGS memflags) :\n+  GrowableArray(int initial_capacity, int initial_len, const E& filler, MemType memflags) :\n@@ -802,2 +802,2 @@\n-\/\/ Leaner GrowableArray for CHeap backed data arrays, with compile-time decided MEMFLAGS.\n-template <typename E, MEMFLAGS F>\n+\/\/ Leaner GrowableArray for CHeap backed data arrays, with compile-time decided MemType.\n+template <typename E, MemType F>\n@@ -809,1 +809,1 @@\n-  static E* allocate(int max, MEMFLAGS flags) {\n+  static E* allocate(int max, MemType flags) {\n","filename":"src\/hotspot\/share\/utilities\/growableArray.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -141,1 +141,1 @@\n-  MEMFLAGS F = mtNMT, AllocFailType alloc_failmode = AllocFailStrategy::RETURN_NULL>\n+  MemType F = mtNMT, AllocFailType alloc_failmode = AllocFailStrategy::RETURN_NULL>\n@@ -368,1 +368,1 @@\n-  MEMFLAGS F = mtNMT, AllocFailType alloc_failmode = AllocFailStrategy::RETURN_NULL>\n+  MemType F = mtNMT, AllocFailType alloc_failmode = AllocFailStrategy::RETURN_NULL>\n","filename":"src\/hotspot\/share\/utilities\/linkedlist.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-template<MEMFLAGS F>\n+template<MemType F>\n@@ -84,1 +84,1 @@\n-template<MEMFLAGS F>\n+template<MemType F>\n","filename":"src\/hotspot\/share\/utilities\/objectBitSet.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-template<MEMFLAGS F>\n+template<MemType F>\n@@ -39,1 +39,1 @@\n-template<MEMFLAGS F>\n+template<MemType F>\n@@ -47,1 +47,1 @@\n-template<MEMFLAGS F>\n+template<MemType F>\n@@ -59,1 +59,1 @@\n-template<MEMFLAGS F>\n+template<MemType F>\n@@ -64,1 +64,1 @@\n-template<MEMFLAGS F>\n+template<MemType F>\n@@ -89,1 +89,1 @@\n-template<MEMFLAGS F>\n+template<MemType F>\n@@ -96,1 +96,1 @@\n-template<MEMFLAGS F>\n+template<MemType F>\n","filename":"src\/hotspot\/share\/utilities\/objectBitSet.inline.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-    MEMFLAGS MEM_TYPE>\n+    MemType MEM_TYPE>\n@@ -75,1 +75,1 @@\n-    MEMFLAGS MEM_TYPE = mtInternal,\n+    MemType MEM_TYPE = mtInternal,\n","filename":"src\/hotspot\/share\/utilities\/resizeableResourceHash.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-    MEMFLAGS MEM_TYPE,\n+    MemType MEM_TYPE,\n@@ -367,1 +367,1 @@\n-    MEMFLAGS MEM_TYPE = mtInternal,\n+    MemType MEM_TYPE = mtInternal,\n","filename":"src\/hotspot\/share\/utilities\/resourceHash.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-template <class E, MEMFLAGS F> class StackIterator;\n+template <class E, MemType F> class StackIterator;\n@@ -58,1 +58,1 @@\n-template <MEMFLAGS F> class StackBase\n+template <MemType F> class StackBase\n@@ -88,1 +88,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemType F>\n@@ -163,1 +163,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemType F>\n","filename":"src\/hotspot\/share\/utilities\/stack.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-template <MEMFLAGS F> StackBase<F>::StackBase(size_t segment_size, size_t max_cache_size,\n+template <MemType F> StackBase<F>::StackBase(size_t segment_size, size_t max_cache_size,\n@@ -43,1 +43,1 @@\n-template <MEMFLAGS F> size_t StackBase<F>::adjust_max_size(size_t max_size, size_t seg_size)\n+template <MemType F> size_t StackBase<F>::adjust_max_size(size_t max_size, size_t seg_size)\n@@ -54,1 +54,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemType F>\n@@ -61,1 +61,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemType F>\n@@ -74,1 +74,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemType F>\n@@ -88,1 +88,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemType F>\n@@ -96,1 +96,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemType F>\n@@ -108,1 +108,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemType F>\n@@ -114,1 +114,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemType F>\n@@ -120,1 +120,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemType F>\n@@ -126,1 +126,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemType F>\n@@ -132,1 +132,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemType F>\n@@ -139,1 +139,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemType F>\n@@ -145,1 +145,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemType F>\n@@ -155,1 +155,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemType F>\n@@ -176,1 +176,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemType F>\n@@ -197,1 +197,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemType F>\n@@ -208,1 +208,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemType F>\n@@ -221,1 +221,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemType F>\n@@ -237,1 +237,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemType F>\n@@ -246,1 +246,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemType F>\n@@ -254,1 +254,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemType F>\n","filename":"src\/hotspot\/share\/utilities\/stack.inline.hpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-template<typename E, template<typename, MEMFLAGS> class Allocator>\n+template<typename E, template<typename, MemType> class Allocator>\n","filename":"test\/hotspot\/gtest\/nmt\/test_arrayWithFreeList.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-static void check_expected_malloc_header(const void* payload, MEMFLAGS type, size_t size) {\n+static void check_expected_malloc_header(const void* payload, MemType type, size_t size) {\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_cornercases.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -100,2 +100,2 @@\n-    MEMFLAGS f = NMTUtil::index_to_flag(i);\n-    if (f != MEMFLAGS::mtNone) {\n+    MemType f = NMTUtil::index_to_flag(i);\n+    if (f != MemType::mtNone) {\n@@ -113,2 +113,2 @@\n-    MEMFLAGS f = NMTUtil::index_to_flag(i);\n-    if (f != MEMFLAGS::mtNone) {\n+    MemType f = NMTUtil::index_to_flag(i);\n+    if (f != MemType::mtNone) {\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_malloclimit.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,1 +93,1 @@\n-    p[i] = NEW_C_HEAP_ARRAY(char, ALLOC_SIZE, (MEMFLAGS)category);\n+    p[i] = NEW_C_HEAP_ARRAY(char, ALLOC_SIZE, (MemType)category);\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_totals.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n@@ -349,1 +349,1 @@\n-    MEMFLAGS flag;\n+    MemType flag;\n@@ -353,1 +353,1 @@\n-    Info(Type type, NativeCallStack stack, MEMFLAGS flag)\n+    Info(Type type, NativeCallStack stack, MemType flag)\n@@ -371,1 +371,1 @@\n-  VMATree::SummaryDiff do_it(Type type, size_t start, size_t size, NativeCallStack stack, MEMFLAGS flag) {\n+  VMATree::SummaryDiff do_it(Type type, size_t start, size_t size, NativeCallStack stack, MemType flag) {\n@@ -404,1 +404,1 @@\n-  VMATree::SummaryDiff reserve(size_t start, size_t size, NativeCallStack stack, MEMFLAGS flag) {\n+  VMATree::SummaryDiff reserve(size_t start, size_t size, NativeCallStack stack, MemType flag) {\n@@ -408,1 +408,1 @@\n-  VMATree::SummaryDiff commit(size_t start, size_t size, NativeCallStack stack, MEMFLAGS flag) {\n+  VMATree::SummaryDiff commit(size_t start, size_t size, NativeCallStack stack, MemType flag) {\n@@ -434,1 +434,1 @@\n-  const MEMFLAGS candidate_flags[candidates_len_flags] = {\n+  const MemType candidate_flags[candidates_len_flags] = {\n@@ -458,1 +458,1 @@\n-    const MEMFLAGS flag = candidate_flags[os::random() % candidates_len_flags];\n+    const MemType flag = candidate_flags[os::random() % candidates_len_flags];\n","filename":"test\/hotspot\/gtest\/nmt\/test_vmatree.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-  WithEmbeddedArray(int initial_max, MEMFLAGS memflags) : _a(initial_max, memflags) {\n+  WithEmbeddedArray(int initial_max, MemType memflags) : _a(initial_max, memflags) {\n","filename":"test\/hotspot\/gtest\/utilities\/test_growableArray.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-  const static MEMFLAGS MEM_TYPE = mtInternal;\n+  const static MemType MEM_TYPE = mtInternal;\n","filename":"test\/hotspot\/gtest\/utilities\/test_resourceHash.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-#include \"nmt\/memflags.hpp\"\n+#include \"nmt\/memType.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_utf8.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}