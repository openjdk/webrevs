{"files":[{"patch":"@@ -411,1 +411,1 @@\n-        _state(NOT_READY),\n+        _state(SHUTDOWN),\n@@ -416,1 +416,1 @@\n-  assert(Atomic::load(&_state) == NOT_READY, \"Should be\");\n+  assert(Atomic::load(&_state) == SHUTDOWN, \"Should be shutdown\");\n@@ -419,1 +419,6 @@\n-  Atomic::store(&_state, READY);\n+  Atomic::store(&_started_workers, 0);\n+  Atomic::store(&_waiting_workers, 0);\n+  Atomic::store(&_running_workers, 0);\n+\n+  State prev_state = Atomic::cmpxchg(&_state, SHUTDOWN, READY, memory_order_relaxed);\n+  assert(prev_state == SHUTDOWN, \"Should be\");\n@@ -482,1 +487,1 @@\n-         \"Should be in correct state\");\n+         \"Should be ready\");\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.cpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -374,0 +374,1 @@\n+  friend class ArchiveWorkersUseMark;\n@@ -380,1 +381,1 @@\n-  \/\/ Global shared instance. Can be uninitialized, can be shut down.\n+  \/\/ Global shared instance. Can be ready to use, can be shut down.\n@@ -392,1 +393,1 @@\n-  typedef enum { NOT_READY, READY, SHUTDOWN } State;\n+  typedef enum { READY, SHUTDOWN } State;\n@@ -407,0 +408,2 @@\n+  void initialize();\n+  void shutdown();\n@@ -410,2 +413,0 @@\n-  void initialize();\n-  void shutdown();\n@@ -415,0 +416,14 @@\n+\/\/ Marks the code that wants to use ArchiveWorkers.\n+\/\/ Makes sure the workers are properly initialized before use\n+\/\/ and shut down after use.\n+class ArchiveWorkersUseMark : public StackObj {\n+public:\n+  ArchiveWorkersUseMark() {\n+    ArchiveWorkers::workers()->initialize();\n+  }\n+  ~ArchiveWorkersUseMark() {\n+    ArchiveWorkers::workers()->shutdown();\n+  }\n+};\n+\n+\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.hpp","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -1091,2 +1091,1 @@\n-  \/\/ We are about to open the archives. Initialize workers now.\n-  ArchiveWorkers::workers()->initialize();\n+  ArchiveWorkersUseMark workers_use_mark;\n@@ -1685,3 +1684,0 @@\n-  \/\/ Archive was fully read. Workers are no longer needed.\n-  ArchiveWorkers::workers()->shutdown();\n-\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -444,5 +444,0 @@\n-\n-  \/\/ Initiate Archive Workers shutdown. These workers are likely already\n-  \/\/ shut down, but we need to make sure they really are. Otherwise, workers\n-  \/\/ would fail hard on broken semaphores.\n-  ArchiveWorkers::workers()->shutdown();\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"cds\/archiveUtils.hpp\"\n+#include \"unittest.hpp\"\n+\n+class TestArchiveWorkerTask : public ArchiveWorkerTask {\n+private:\n+  volatile int _sum;\n+  int _max;\n+public:\n+  TestArchiveWorkerTask() : ArchiveWorkerTask(\"Test\"), _sum(0), _max(0) {}\n+  void work(int chunk, int max_chunks) override {\n+    Atomic::add(&_sum, chunk);\n+    Atomic::store(&_max, max_chunks);\n+  }\n+  int sum() { return Atomic::load(&_sum); }\n+  int max() { return Atomic::load(&_max); }\n+};\n+\n+\/\/ Test a repeated cycle of pool start works.\n+TEST_VM(ArchiveWorkersTest, continuous_restart) {\n+  for (int c = 0; c < 100; c++) {\n+    ArchiveWorkersUseMark mark;\n+  }\n+}\n+\n+\/\/ Test a repeated cycle of single-task-use works.\n+TEST_VM(ArchiveWorkersTest, single_task) {\n+  for (int c = 0; c < 100; c++) {\n+    ArchiveWorkersUseMark mark;\n+    TestArchiveWorkerTask task;\n+    ArchiveWorkers::workers()->run_task(&task);\n+    ASSERT_EQ(task.max() * (task.max() - 1) \/ 2, task.sum());\n+  }\n+}\n+\n+\/\/ Test a repeated cycle of multi-task-use works.\n+TEST_VM(ArchiveWorkersTest, multiple_tasks) {\n+  for (int c = 0; c < 100; c++) {\n+    ArchiveWorkersUseMark mark;\n+    for (int t = 0; t < 10; t++) {\n+      TestArchiveWorkerTask task;\n+      ArchiveWorkers::workers()->run_task(&task);\n+      ASSERT_EQ(task.max() * (task.max() - 1) \/ 2, task.sum());\n+    }\n+  }\n+}\n+\n+\/\/ Test that using the pool without use mark fails.\n+#ifdef ASSERT\n+TEST_VM_ASSERT_MSG(ArchiveWorkersTest, pool_use_without_mark, \".* Should be ready\") {\n+  TestArchiveWorkerTask task;\n+  ArchiveWorkers::workers()->run_task(&task);\n+}\n+\n+\/\/ Test that using the pool outside use mark fails.\n+TEST_VM_ASSERT_MSG(ArchiveWorkersTest, pool_use_after_mark, \".* Should be ready\") {\n+  {\n+    ArchiveWorkersUseMark mark;\n+  }\n+  TestArchiveWorkerTask task;\n+  ArchiveWorkers::workers()->run_task(&task);\n+}\n+#endif \/\/ ASSERT\n","filename":"test\/hotspot\/gtest\/cds\/test_archiveWorkers.cpp","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -103,11 +103,0 @@\n-runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRanges.java#id0 8344583 macosx-aarch64\n-runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRanges.java#id1 8344583 macosx-aarch64\n-runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRanges.java#id2 8344583 macosx-aarch64\n-runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRanges.java#id3 8344583 macosx-aarch64\n-runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRanges.java#id4 8344583 macosx-aarch64\n-runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRanges.java#id5 8344583 macosx-aarch64\n-runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRanges.java#id6 8344583 macosx-aarch64\n-runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRanges.java#id7 8344583 macosx-aarch64\n-runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRanges.java#id8 8344583 macosx-aarch64\n-runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRanges.java#id9 8344583 macosx-aarch64\n-\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"}]}