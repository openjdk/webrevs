{"files":[{"patch":"@@ -82,0 +82,1 @@\n+      case Op_ReverseV:\n@@ -4707,0 +4708,26 @@\n+\/\/ -------------------------------- Reverse Bits Vector Operations ------------------------\n+\n+instruct vreverse_masked(vReg dst_src, vRegMask_V0 v0) %{\n+  match(Set dst_src (ReverseV dst_src v0));\n+  format %{ \"vreverse_masked $dst_src, $dst_src, v0\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    uint vlen = Matcher::vector_length(this);\n+    __ vsetvli_helper(bt, vlen);\n+    __ vbrev_v(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vreverse(vReg dst, vReg src) %{\n+  match(Set dst (ReverseV src));\n+  format %{ \"vreverse $dst, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    uint vlen = Matcher::vector_length(this);\n+    __ vsetvli_helper(bt, vlen);\n+    __ vbrev_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -28,1 +28,3 @@\n- * @requires (os.simpleArch == \"x64\" & vm.cpu.features ~= \".*avx2.*\") | os.arch == \"aarch64\"\n+ * @requires (os.simpleArch == \"x64\" & vm.cpu.features ~= \".*avx2.*\") |\n+ *           os.arch == \"aarch64\" |\n+ *           (os.arch == \"riscv64\" & vm.cpu.features ~= \".*zbkb.*\" & vm.cpu.features ~= \".*zvbb.*\")\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestReverseBitsVector.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}