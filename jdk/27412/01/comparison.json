{"files":[{"patch":"@@ -203,1 +203,1 @@\n-      ClassFileStream st((u1*)buf, len, nullptr);\n+      ClassFileStream st((u1*)buf, len, \"jrt:\/java.base\");\n","filename":"src\/hotspot\/share\/cds\/lambdaFormInvokers.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1195,4 +1195,1 @@\n-    if (loader == nullptr) {\n-      \/\/ JFR classes\n-      ik->set_shared_classpath_index(0);\n-    }\n+    ik->set_shared_classpath_index(-1); \/\/ unsupported location\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary classes defined with JNI DefineClass should be excluded from the AOT config file and AOT cache.\n+ * @bug 8368182\n+ * @requires vm.cds\n+ * @requires vm.cds.supports.aot.class.linking\n+ * @library \/test\/lib\n+ * @build JNIDefineClass\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar\n+ *                 JNIDefineClassApp ExcludedDummy ExcludedDummy2\n+ * @run main\/native JNIDefineClass\n+ *\/\n+\n+import java.io.InputStream;\n+import jdk.test.lib.cds.CDSAppTester;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class JNIDefineClass {\n+    static final String appJar = ClassFileInstaller.getJarPath(\"app.jar\");\n+    static final String mainClass = \"JNIDefineClassApp\";\n+\n+    public static void main(String[] args) throws Exception {\n+        Tester tester = new Tester();\n+        tester.run(new String[] {\"AOT\", \"--two-step-training\"} );\n+    }\n+\n+    static class Tester extends CDSAppTester {\n+        public Tester() {\n+            super(mainClass);\n+        }\n+\n+        @Override\n+        public String classpath(RunMode runMode) {\n+            return appJar;\n+        }\n+\n+        @Override\n+        public String[] vmArgs(RunMode runMode) {\n+            return new String[] {\n+                \"--enable-native-access=ALL-UNNAMED\",\n+                \"-Xlog:aot,aot+class=debug\",\n+                \"-Djava.library.path=\" + System.getProperty(\"java.library.path\"),\n+            };\n+        }\n+\n+        @Override\n+        public String[] appCommandLine(RunMode runMode) {\n+            return new String[] {mainClass};\n+        }\n+\n+        @Override\n+        public void checkExecution(OutputAnalyzer out, RunMode runMode) {\n+            if (runMode.isApplicationExecuted()) {\n+                out.shouldContain(\"@@loader = null\");\n+                out.shouldContain(\"@@name = ExcludedDummy\");\n+\n+                out.shouldMatch(\"@@loader2 = .*AppClassLoader\");\n+                out.shouldContain(\"@@name2 = ExcludedDummy2\");\n+            }\n+            if (runMode == RunMode.TRAINING) {\n+                out.shouldContain(\"Skipping ExcludedDummy: Unsupported location\");\n+            }\n+\n+            \/\/ Must not have a log like this\n+            \/\/\/ [0.378s][debug  ][aot,class] klasses[   65] = 0x0000000800160490 boot  ExcludedDummy\n+            \/\/\/ [0.378s][debug  ][aot,class] klasses[   66] = 0x0000000800160490 app   ExcludedDummy2\n+            out.shouldNotContain(\"aot,class.* klasses.*ExcludedDummy\");\n+            out.shouldNotContain(\"aot,class.* klasses.*ExcludedDummy2\");\n+        }\n+    }\n+}\n+\n+class JNIDefineClassApp {\n+\n+    static native Class<?> nativeDefineClass(String name, ClassLoader ldr, byte[] class_bytes);\n+\n+    static {\n+        System.loadLibrary(\"JNIDefineClassApp\");\n+    }\n+\n+    public static void main(java.lang.String[] unused) throws Exception {\n+        ClassLoader appLoader = JNIDefineClassApp.class.getClassLoader();\n+\n+        try (InputStream in = appLoader.getResourceAsStream(\"ExcludedDummy.class\")) {\n+            byte[] b = in.readAllBytes();\n+            System.out.println(b.length);\n+            Class<?> c = nativeDefineClass(\"ExcludedDummy\", null, b);\n+            System.out.println(\"@@loader = \" + c.getClassLoader());\n+            System.out.println(\"@@name = \" + c.getName());\n+        }\n+\n+        try (InputStream in = appLoader.getResourceAsStream(\"ExcludedDummy2.class\")) {\n+            byte[] b = in.readAllBytes();\n+            System.out.println(b.length);\n+            Class<?> c = nativeDefineClass(\"ExcludedDummy2\", appLoader, b);\n+            System.out.println(\"@@loader2 = \" + c.getClassLoader());\n+            System.out.println(\"@@name2 = \" + c.getName());\n+        }\n+\n+        System.out.println(\"TEST PASSED\");\n+    }\n+}\n+\n+\/\/ This class is loaded into the bootstrap loader using JNI DefineClass() with a null code source,\n+\/\/ so it should be excluded from the AOT configuration (and hence excluded from AOT cache)\n+class ExcludedDummy {\n+\n+}\n+\n+\/\/ This class is loaded into the app loader using JNI DefineClass() with a null code source,\n+\/\/ so it should be excluded from the AOT configuration (and hence excluded from AOT cache)\n+class ExcludedDummy2 {\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/JNIDefineClass.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <jni.h>\n+\n+JNIEXPORT jclass JNICALL\n+Java_JNIDefineClassApp_nativeDefineClass(JNIEnv* env, jclass clazz \/*unused*\/,\n+                                         jstring className, jobject classLoader, jbyteArray bytecode) {\n+    const char* classNameChar = (*env)->GetStringUTFChars(env, className, NULL);\n+    jbyte* arrayContent = (*env)->GetByteArrayElements(env, bytecode, NULL);\n+    jsize bytecodeLength = (*env)->GetArrayLength(env, bytecode);\n+    jclass returnValue = (*env)->DefineClass(env, classNameChar, classLoader, arrayContent, bytecodeLength);\n+    (*env)->ReleaseByteArrayElements(env, bytecode, arrayContent, JNI_ABORT);\n+    (*env)->ReleaseStringUTFChars(env, className, classNameChar);\n+    return returnValue;\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/libJNIDefineClassApp.c","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"}]}