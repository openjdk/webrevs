{"files":[{"patch":"@@ -26,2 +26,0 @@\n-#include \"kludge_c++11.h\"\n-\n","filename":"src\/jdk.jpackage\/linux\/native\/libapplauncher\/LinuxLauncherLib.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-#include \"kludge_c++11.h\"\n-\n","filename":"src\/jdk.jpackage\/share\/native\/applauncher\/CfgFile.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-#include \"kludge_c++11.h\"\n-\n","filename":"src\/jdk.jpackage\/share\/native\/applauncher\/PackageFile.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-#include \"kludge_c++11.h\"\n-\n","filename":"src\/jdk.jpackage\/share\/native\/applauncher\/StringProcessing.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n-#include \"kludge_c++11.h\"\n-\n","filename":"src\/jdk.jpackage\/share\/native\/common\/Dll.h","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-#include \"kludge_c++11.h\"\n-\n","filename":"src\/jdk.jpackage\/share\/native\/common\/app.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,170 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-#ifndef kludge_cxx11_h\n-#define kludge_cxx11_h\n-\n-\/\/\n-\/\/ This file contains kludge implementation of C++11 features needed to build\n-\/\/ jpackage until Open JDK moves forward from C++98 standard.\n-\/\/\n-\n-#ifdef __GNUG__\n-#ifndef __clang__\n-#if __cplusplus < 201103L\n-#define JP_WITH_KLUDGE_CXX11\n-#endif\n-#endif\n-#endif\n-\n-#ifdef JP_WITH_KLUDGE_CXX11\n-\n-#include <algorithm>\n-\n-\n-namespace std {\n-\n-namespace impl {\n-\n-template <typename Tp, typename Dp>\n-class unique_ptr_impl {\n-public:\n-    typedef typename Dp::pointer pointer;\n-    typedef Tp element_type;\n-    typedef Dp deleter_type;\n-\n-    unique_ptr_impl(): value(0) {\n-    }\n-\n-    unique_ptr_impl(pointer p): value(p) {\n-    }\n-\n-    pointer release() {\n-        const pointer retValue = value;\n-        value = 0;\n-        return retValue;\n-    }\n-\n-    void swap(unique_ptr_impl& other) {\n-        std::swap(value, other.value);\n-    }\n-\n-    pointer get() const {\n-        return value;\n-    }\n-\n-private:\n-    unique_ptr_impl(const unique_ptr_impl&);\n-    unique_ptr_impl& operator= (const unique_ptr_impl&);\n-\n-private:\n-    pointer value;\n-};\n-\n-} \/\/ namespace impl\n-\n-\n-template <typename Tp>\n-struct default_delete {\n-    typedef Tp* pointer;\n-\n-    void operator()(Tp* ptr) const {\n-        delete ptr;\n-    }\n-};\n-\n-\n-template <typename Tp, typename Dp = default_delete<Tp> >\n-class unique_ptr {\n-    typedef impl::unique_ptr_impl<Tp, Dp> impl_type;\n-public:\n-    typedef typename impl_type::pointer pointer;\n-    typedef typename impl_type::element_type element_type;\n-    typedef typename impl_type::deleter_type deleter_type;\n-\n-    unique_ptr() {\n-    }\n-\n-    unique_ptr(pointer p): impl(p) {\n-    }\n-\n-    ~unique_ptr() {\n-        if (get() != 0) {\n-            impl_type tmp;\n-            tmp.swap(impl);\n-            Dp()(tmp.get());\n-        }\n-    }\n-\n-    pointer release() {\n-        return impl.release();\n-    }\n-\n-    void swap(unique_ptr& other) {\n-        impl.swap(other.impl);\n-    }\n-\n-    pointer get() const {\n-        return impl.get();\n-    }\n-\n-    element_type& operator *() const {\n-        return *impl.get();\n-    }\n-\n-    pointer operator ->() const {\n-        return impl.get();\n-    }\n-\n-private:\n-    impl_type impl;\n-};\n-\n-template <class Ctnr>\n-typename Ctnr::const_iterator begin(const Ctnr& ctnr) {\n-    return ctnr.begin();\n-}\n-\n-template <class Ctnr>\n-typename Ctnr::iterator begin(Ctnr& ctnr) {\n-    return ctnr.begin();\n-}\n-\n-template <class Ctnr>\n-typename Ctnr::const_iterator end(const Ctnr& ctnr) {\n-    return ctnr.end();\n-}\n-\n-template <class Ctnr>\n-typename Ctnr::iterator end(Ctnr& ctnr) {\n-    return ctnr.end();\n-}\n-\n-} \/\/ namespace std\n-\n-#endif \/\/ #ifdef JP_WITH_KLUDGE_CXX11\n-\n-#endif \/\/ #ifndef kludge_cxx11_h\n","filename":"src\/jdk.jpackage\/share\/native\/common\/kludge_c++11.h","additions":0,"deletions":170,"binary":false,"changes":170,"status":"deleted"},{"patch":"@@ -35,0 +35,1 @@\n+#include <memory>\n","filename":"src\/jdk.jpackage\/windows\/native\/common\/MsiUtils.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}