{"files":[{"patch":"@@ -4682,1 +4682,1 @@\n-     * Returns the top-level ancestor of this component (either the\n+     * Returns the top-level ancestor of this component (the\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JComponent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.sound.SoundClip;\n+import javax.sound.sampled.AudioFileFormat.Type;\n+import javax.sound.sampled.AudioFormat;\n+import javax.sound.sampled.AudioInputStream;\n+import javax.sound.sampled.AudioSystem;\n+\n+import static javax.sound.sampled.AudioFormat.Encoding.PCM_SIGNED;\n+import static javax.sound.sampled.AudioSystem.NOT_SPECIFIED;\n+\n+\/**\n+ * @test\n+ * @bug 8202264\n+ *\/\n+public final class AutoCloseTimeCheck {\n+\n+    public static void main(final String[] args) throws Exception {\n+        \/\/ Prepare the audio file\n+        File file = new File(\"audio.wav\");\n+        try {\n+            AudioFormat format =\n+                    new AudioFormat(PCM_SIGNED, 44100, 8, 1, 1, 44100, false);\n+            AudioSystem.write(getStream(format), Type.WAVE, file);\n+        } catch (final Exception ignored) {\n+            return; \/\/ the test is not applicable\n+        }\n+        try {\n+            testSmallDelay(file);\n+            testBigDelay(file);\n+        } finally {\n+            Files.delete(file.toPath());\n+        }\n+    }\n+\n+    \/**\n+     * Checks that after a big period of non-activity the clip will be closed\n+     * and the \"Direct Clip\" thread will stop.\n+     *\/\n+    private static void testBigDelay(final File file) throws Exception {\n+        SoundClip clip = SoundClip.createSoundClip(file);\n+        clip.loop();\n+        clip.stop();\n+        sleep(20000); \/\/ 20 sec for slow systems\n+        if (count() != 0) {\n+            throw new RuntimeException(\"Thread was found\");\n+        }\n+    }\n+\n+    \/**\n+     * Checks that after small period of non-activity the clip will not be\n+     * closed and the \"Direct Clip\" thread will alive.\n+     *\/\n+    private static void testSmallDelay(final File file) throws IOException {\n+        SoundClip clip = SoundClip.createSoundClip(file);\n+        long threadID = 0;\n+        \/\/ Will run the test no more than 15 seconds\n+        long endtime = System.nanoTime() + TimeUnit.SECONDS.toNanos(15);\n+        while (endtime - System.nanoTime() > 0) {\n+            clip.loop();\n+            sleep(500);\n+\n+            long data = count();\n+            if (data != threadID) {\n+                System.out.println(\"Playing on new thread: \" + data + \" at \"\n+                                           + new java.util.Date());\n+                if (threadID == 0) {\n+                    threadID = data;\n+                } else {\n+                    throw new RuntimeException(\"Thread was changed\");\n+                }\n+            }\n+\n+            clip.stop();\n+            sleep(500);\n+        }\n+    }\n+\n+    private static void sleep(int millis) {\n+        try {\n+            Thread.sleep(millis);\n+        } catch (InterruptedException ignored) {\n+        }\n+    }\n+\n+    private static long count() {\n+        for (final Thread t : Thread.getAllStackTraces().keySet()) {\n+            if (t.getName().equals(\"Direct Clip\")) {\n+                return t.getId();\n+            }\n+        }\n+        return 0;\n+    }\n+\n+    private static AudioInputStream getStream(final AudioFormat format) {\n+        final int dataSize = 5000 * format.getFrameSize();\n+        final InputStream in = new ByteArrayInputStream(new byte[dataSize]);\n+        return new AudioInputStream(in, format, NOT_SPECIFIED);\n+    }\n+}\n","filename":"test\/jdk\/javax\/sound\/sampled\/Clip\/AutoCloseTimeCheck.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import static javax.sound.sampled.AudioFormat.Encoding.PCM_SIGNED;\n+import static javax.sound.sampled.AudioSystem.NOT_SPECIFIED;\n+\n+import javax.sound.sampled.AudioFileFormat;\n+import javax.sound.sampled.AudioFormat;\n+import javax.sound.sampled.AudioInputStream;\n+import javax.sound.sampled.AudioSystem;\n+import javax.sound.sampled.Clip;\n+import javax.sound.sampled.DataLine;\n+import javax.sound.SoundClip;\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8279673\n+ * @summary Verify no NPE creating threads\n+ * @run main\/othervm DataPusherThreadCheck\n+ *\/\n+public class DataPusherThreadCheck {\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Prepare the audio file\n+        File file = new File(\"audio.wav\");\n+        try {\n+            AudioFormat format =\n+                    new AudioFormat(PCM_SIGNED, 44100, 8, 1, 1, 44100, false);\n+            DataLine.Info info = new DataLine.Info(Clip.class, format);\n+            if (!(AudioSystem.isLineSupported(info)) ) {\n+                return; \/\/ the test is not applicable\n+            }\n+            int dataSize = 6000*1000 * format.getFrameSize();\n+            InputStream in = new ByteArrayInputStream(new byte[dataSize]);\n+            AudioInputStream audioStream = new AudioInputStream(in, format, NOT_SPECIFIED);\n+            AudioSystem.write(audioStream, AudioFileFormat.Type.WAVE, file);\n+        } catch (Exception ignored) {\n+            return; \/\/ the test is not applicable\n+        }\n+        try {\n+            checkThread(file);\n+        } finally {\n+            Files.delete(file.toPath());\n+        }\n+    }\n+\n+    private static void checkThread(File file) throws Exception {\n+        SoundClip clip = SoundClip.createSoundClip(file);\n+        clip.loop();\n+        try {\n+            Thread.sleep(2000);\n+        } catch (InterruptedException ignored) {\n+        }\n+        boolean found = isDataPushedThreadExist();\n+        clip.stop();\n+        if (!found) {\n+            throw new RuntimeException(\"Thread 'DataPusher' isn't found\");\n+        }\n+    }\n+\n+    private static boolean isDataPushedThreadExist() {\n+        for (Thread t : Thread.getAllStackTraces().keySet()) {\n+            if (t.getName().equals(\"DataPusher\")) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/sound\/sampled\/Clip\/DataPusherThreadCheck.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}