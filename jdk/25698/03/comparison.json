{"files":[{"patch":"@@ -365,1 +365,1 @@\n-     * certain command line options of the demo or from the demo applet parameters are\n+     * certain command line options of the demo\n","filename":"src\/demo\/share\/jfc\/J2Ddemo\/java2d\/RunWindow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -409,7 +409,0 @@\n-        } catch (@SuppressWarnings(\"removal\") java.security.AccessControlException ace) {\n-            String errmsg = \"Applet access control exception; to allow \"\n-                    + \"access to printer, set\\n\"\n-                    + \"permission for \\\"queuePrintJob\\\" in \"\n-                    + \"RuntimePermission.\";\n-            JOptionPane.showMessageDialog(this, errmsg, \"Printer Access Error\",\n-                    JOptionPane.ERROR_MESSAGE);\n","filename":"src\/demo\/share\/jfc\/J2Ddemo\/java2d\/Tools.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-    \/\/ contentPane cache, saved from the applet or application frame\n+    \/\/ contentPane cache, saved from the application frame\n@@ -180,1 +180,1 @@\n-     * SwingSet2 Main. Called only if we're an application, not an applet.\n+     * SwingSet2 Main.\n@@ -719,2 +719,1 @@\n-     * Returns the content pane whether we're in an applet\n-     * or application\n+     * Returns the content pane\n","filename":"src\/demo\/share\/jfc\/SwingSet2\/SwingSet2.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -470,3 +470,0 @@\n-                } else if (c instanceof JApplet) {\n-                    ((JApplet)c).getGlassPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\n-                    ((JApplet)c).getGlassPane().setVisible(false);\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaInternalFrameUI.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -828,1 +828,1 @@\n-            \/\/ compatibility with applets. It can be removed when the\n+            \/\/ compatibility. It can be removed when the\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/LWWindowPeer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -436,1 +436,0 @@\n-            \/\/ Popups in applets don't activate applet's process\n@@ -717,1 +716,0 @@\n-                        \/\/ Popups in applets don't activate applet's process\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPlatformWindow.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n- * all good applets are only interested in logical key typed events not\n+ * all good applications are only interested in logical key typed events not\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/AWTEvent.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-\/\/ This may not work in the Applet case, since they are all running in the same VM\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/DnDUtilities.m","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.applet.Applet;\n@@ -56,3 +55,1 @@\n- * This is a second part of sun.swing.SwingUtilities2. It is required\n- * to provide services for JavaFX applets.\n- *\n+ * This is a second part of sun.swing.SwingUtilities2.\n@@ -94,2 +91,1 @@\n-     * @param rootContainer topmost container. Should be either {@code Window}\n-     *  or {@code Applet}\n+     * @param rootContainer topmost container. Should be {@code Window}\n@@ -101,1 +97,1 @@\n-        assert (rootContainer instanceof Applet) || (rootContainer instanceof Window);\n+        assert (rootContainer instanceof Window);\n@@ -112,1 +108,1 @@\n-     * @param rootContainer topmost container. Should be either Window or Applet\n+     * @param rootContainer topmost container. Should be Window\n@@ -117,1 +113,1 @@\n-        assert (rootContainer instanceof Applet) || (rootContainer instanceof Window);\n+        assert (rootContainer instanceof Window);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/SwingUtilities3.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.applet.AudioClip;\n@@ -63,1 +62,1 @@\n-public final class JavaSoundAudioClip implements AudioClip, MetaEventListener, LineListener {\n+public final class JavaSoundAudioClip implements MetaEventListener, LineListener {\n@@ -116,10 +115,0 @@\n-    public static JavaSoundAudioClip create(final URL url) {\n-        JavaSoundAudioClip clip = new JavaSoundAudioClip();\n-        try {\n-            clip.init(url.openStream());\n-        } catch (final Exception ignored) {\n-            \/\/ Playing the clip will be a no-op if an exception occurred in inititialization.\n-        }\n-        return clip;\n-    }\n-\n@@ -170,1 +159,0 @@\n-    @Override\n@@ -178,1 +166,0 @@\n-    @Override\n@@ -187,1 +174,1 @@\n-        \/\/ hack for some applets that call the start method very rapidly...\n+        \/\/ hack for some applications that call the start method very rapidly...\n@@ -250,1 +237,0 @@\n-    @Override\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/JavaSoundAudioClip.java","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1,609 +0,0 @@\n-\/*\n- * Copyright (c) 1995, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.applet;\n-\n-import java.awt.Dimension;\n-import java.awt.GraphicsEnvironment;\n-import java.awt.HeadlessException;\n-import java.awt.Image;\n-import java.awt.Panel;\n-import java.awt.event.ComponentEvent;\n-import java.io.IOException;\n-import java.io.ObjectInputStream;\n-import java.io.Serial;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.util.Locale;\n-\n-import javax.accessibility.AccessibleContext;\n-import javax.accessibility.AccessibleRole;\n-import javax.accessibility.AccessibleState;\n-import javax.accessibility.AccessibleStateSet;\n-\n-import com.sun.media.sound.JavaSoundAudioClip;\n-\n-\/**\n- * An applet is a small program that is intended not to be run on its own, but\n- * rather to be embedded inside another application.\n- * <p>\n- * The {@code Applet} class must be the superclass of any applet that is to be\n- * embedded in a Web page or viewed by the Java Applet Viewer. The\n- * {@code Applet} class provides a standard interface between applets and their\n- * environment.\n- *\n- * @author Arthur van Hoff\n- * @author Chris Warth\n- * @since 1.0\n- * @deprecated The Applet API is deprecated, no replacement.\n- *\/\n-@Deprecated(since = \"9\", forRemoval = true)\n-@SuppressWarnings(\"removal\")\n-public class Applet extends Panel {\n-\n-    \/**\n-     * Constructs a new Applet.\n-     * <p>\n-     * Note: Many methods in {@code java.applet.Applet} may be invoked by the\n-     * applet only after the applet is fully constructed; applet should avoid\n-     * calling methods in {@code java.applet.Applet} in the constructor.\n-     *\n-     * @throws HeadlessException if {@code GraphicsEnvironment.isHeadless()}\n-     *         returns {@code true}\n-     * @see java.awt.GraphicsEnvironment#isHeadless\n-     * @since 1.4\n-     *\/\n-    public Applet() throws HeadlessException {\n-        if (GraphicsEnvironment.isHeadless()) {\n-            throw new HeadlessException();\n-        }\n-    }\n-\n-    \/**\n-     * Applets can be serialized but the following conventions MUST be followed:\n-     * <p>\n-     * Before Serialization: An applet must be in STOPPED state.\n-     * <p>\n-     * After Deserialization: The applet will be restored in STOPPED state (and\n-     * most clients will likely move it into RUNNING state). The stub field will\n-     * be restored by the reader.\n-     *\/\n-    private transient AppletStub stub;\n-\n-    \/**\n-     * Use serialVersionUID from JDK 1.0 for interoperability.\n-     *\/\n-    @Serial\n-    private static final long serialVersionUID = -5836846270535785031L;\n-\n-    \/**\n-     * Read an applet from an object input stream.\n-     *\n-     * @param  s the {@code ObjectInputStream} to read\n-     * @throws ClassNotFoundException if the class of a serialized object could\n-     *         not be found\n-     * @throws IOException if an I\/O error occurs\n-     * @throws HeadlessException if {@code GraphicsEnvironment.isHeadless()}\n-     *         returns {@code true}\n-     *\n-     * @see java.awt.GraphicsEnvironment#isHeadless\n-     * @since 1.4\n-     *\/\n-    @Serial\n-    private void readObject(ObjectInputStream s)\n-        throws ClassNotFoundException, IOException, HeadlessException {\n-        if (GraphicsEnvironment.isHeadless()) {\n-            throw new HeadlessException();\n-        }\n-        s.defaultReadObject();\n-    }\n-\n-    \/**\n-     * Sets this applet's stub. This is done automatically by the system.\n-     *\n-     * @param  stub the new stub\n-     *\/\n-    public final void setStub(AppletStub stub) {\n-        this.stub = stub;\n-    }\n-\n-    \/**\n-     * Determines if this applet is active. An applet is marked active just\n-     * before its {@code start} method is called. It becomes inactive just\n-     * before its {@code stop} method is called.\n-     *\n-     * @return {@code true} if the applet is active; {@code false} otherwise\n-     * @see java.applet.Applet#start()\n-     * @see java.applet.Applet#stop()\n-     *\/\n-    public boolean isActive() {\n-        if (stub != null) {\n-            return stub.isActive();\n-        } else {        \/\/ If stub field not filled in, applet never active\n-            return false;\n-        }\n-    }\n-\n-    \/**\n-     * Gets the {@code URL} of the document in which this applet is embedded.\n-     * For example, suppose an applet is contained within the document:\n-     * <blockquote><pre>\n-     *    http:\/\/www.oracle.com\/technetwork\/java\/index.html\n-     * <\/pre><\/blockquote>\n-     * The document base is:\n-     * <blockquote><pre>\n-     *    http:\/\/www.oracle.com\/technetwork\/java\/index.html\n-     * <\/pre><\/blockquote>\n-     *\n-     * @return the {@link java.net.URL} of the document that contains this\n-     *         applet\n-     * @see java.applet.Applet#getCodeBase()\n-     *\/\n-    public URL getDocumentBase() {\n-        return stub.getDocumentBase();\n-    }\n-\n-    \/**\n-     * Gets the base {@code URL}. This is the {@code URL} of the directory which\n-     * contains this applet.\n-     *\n-     * @return the base {@link java.net.URL} of the directory which contains\n-     *         this applet\n-     * @see java.applet.Applet#getDocumentBase()\n-     *\/\n-    public URL getCodeBase() {\n-        return stub.getCodeBase();\n-    }\n-\n-    \/**\n-     * Returns the value of the named parameter in the HTML tag. For example, if\n-     * this applet is specified as\n-     * <blockquote><pre>\n-     * &lt;applet code=\"Clock\" width=50 height=50&gt;\n-     * &lt;param name=Color value=\"blue\"&gt;\n-     * &lt;\/applet&gt;\n-     * <\/pre><\/blockquote>\n-     * <p>\n-     * then a call to {@code getParameter(\"Color\")} returns the value\n-     * {@code \"blue\"}.\n-     * <p>\n-     * The {@code name} argument is case insensitive.\n-     *\n-     * @param  name a parameter name\n-     * @return the value of the named parameter, or {@code null} if not set\n-     *\/\n-    public String getParameter(String name) {\n-        return stub.getParameter(name);\n-    }\n-\n-    \/**\n-     * Determines this applet's context, which allows the applet to query and\n-     * affect the environment in which it runs.\n-     * <p>\n-     * This environment of an applet represents the document that contains the\n-     * applet.\n-     *\n-     * @return the applet's context\n-     *\/\n-    public AppletContext getAppletContext() {\n-        return stub.getAppletContext();\n-    }\n-\n-    \/**\n-     * Requests that this applet be resized.\n-     *\n-     * @param  width the new requested width for the applet\n-     * @param  height the new requested height for the applet\n-     *\/\n-    @SuppressWarnings(\"deprecation\")\n-    public void resize(int width, int height) {\n-        Dimension d = size();\n-        if ((d.width != width) || (d.height != height)) {\n-            super.resize(width, height);\n-            if (stub != null) {\n-                stub.appletResize(width, height);\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Requests that this applet be resized.\n-     *\n-     * @param  d an object giving the new width and height\n-     *\/\n-    @SuppressWarnings(\"deprecation\")\n-    public void resize(Dimension d) {\n-        resize(d.width, d.height);\n-    }\n-\n-    \/**\n-     * Indicates if this container is a validate root.\n-     * <p>\n-     * {@code Applet} objects are the validate roots, and, therefore, they\n-     * override this method to return {@code true}.\n-     *\n-     * @return {@code true}\n-     * @see java.awt.Container#isValidateRoot\n-     * @since 1.7\n-     *\/\n-    @Override\n-    public boolean isValidateRoot() {\n-        return true;\n-    }\n-\n-    \/**\n-     * Requests that the argument string be displayed in the \"status window\".\n-     * Many browsers and applet viewers provide such a window, where the\n-     * application can inform users of its current state.\n-     *\n-     * @param  msg a string to display in the status window\n-     *\/\n-    public void showStatus(String msg) {\n-        getAppletContext().showStatus(msg);\n-    }\n-\n-    \/**\n-     * Returns an {@code Image} object that can then be painted on the screen.\n-     * The {@code url} that is passed as an argument must specify an absolute\n-     * {@code URL}.\n-     * <p>\n-     * This method always returns immediately, whether or not the image exists.\n-     * When this applet attempts to draw the image on the screen, the data will\n-     * be loaded. The graphics primitives that draw the image will incrementally\n-     * paint on the screen.\n-     *\n-     * @param  url an absolute {@code URL} giving the location of the image\n-     * @return the image at the specified {@code URL}\n-     * @see java.awt.Image\n-     *\/\n-    public Image getImage(URL url) {\n-        return getAppletContext().getImage(url);\n-    }\n-\n-    \/**\n-     * Returns an {@code Image} object that can then be painted on the screen.\n-     * The {@code url} argument must specify an absolute {@code URL}. The\n-     * {@code name} argument is a specifier that is relative to the {@code url}\n-     * argument.\n-     * <p>\n-     * This method always returns immediately, whether or not the image exists.\n-     * When this applet attempts to draw the image on the screen, the data will\n-     * be loaded. The graphics primitives that draw the image will incrementally\n-     * paint on the screen.\n-     *\n-     * @param  url an absolute URL giving the base location of the image\n-     * @param  name the location of the image, relative to the {@code url}\n-     *         argument\n-     * @return the image at the specified {@code URL}\n-     * @see java.awt.Image\n-     *\/\n-    public Image getImage(URL url, String name) {\n-        try {\n-            @SuppressWarnings(\"deprecation\")\n-            var u = new URL(url, name);\n-            return getImage(u);\n-        } catch (MalformedURLException e) {\n-            return null;\n-        }\n-    }\n-\n-    \/**\n-     * Get an audio clip from the given {@code URL}.\n-     *\n-     * @param  url points to the audio clip\n-     * @return the audio clip at the specified {@code URL}\n-     * @since 1.2\n-     *\/\n-    public static final AudioClip newAudioClip(URL url) {\n-        return JavaSoundAudioClip.create(url);\n-    }\n-\n-    \/**\n-     * Returns the {@code AudioClip} object specified by the {@code URL}\n-     * argument.\n-     * <p>\n-     * This method always returns immediately, whether or not the audio clip\n-     * exists. When this applet attempts to play the audio clip, the data will\n-     * be loaded.\n-     *\n-     * @param  url an absolute {@code URL} giving the location of the audio clip\n-     * @return the audio clip at the specified {@code URL}\n-     * @see java.applet.AudioClip\n-     *\/\n-    public AudioClip getAudioClip(URL url) {\n-        return getAppletContext().getAudioClip(url);\n-    }\n-\n-    \/**\n-     * Returns the {@code AudioClip} object specified by the {@code URL} and\n-     * {@code name} arguments.\n-     * <p>\n-     * This method always returns immediately, whether or not the audio clip\n-     * exists. When this applet attempts to play the audio clip, the data will\n-     * be loaded.\n-     *\n-     * @param  url an absolute {@code URL} giving the base location of the audio\n-     *         clip\n-     * @param  name the location of the audio clip, relative to the {@code url}\n-     *         argument\n-     * @return the audio clip at the specified {@code URL}\n-     * @see java.applet.AudioClip\n-     *\/\n-    public AudioClip getAudioClip(URL url, String name) {\n-        try {\n-            @SuppressWarnings(\"deprecation\")\n-            var u = new URL(url, name);\n-            return getAudioClip(u);\n-        } catch (MalformedURLException e) {\n-            return null;\n-        }\n-    }\n-\n-    \/**\n-     * Returns information about this applet. An applet should override this\n-     * method to return a {@code String} containing information about the\n-     * author, version, and copyright of the applet.\n-     * <p>\n-     * The implementation of this method provided by the {@code Applet} class\n-     * returns {@code null}.\n-     *\n-     * @return a string containing information about the author, version, and\n-     *         copyright of the applet\n-     *\/\n-    public String getAppletInfo() {\n-        return null;\n-    }\n-\n-    \/**\n-     * Gets the locale of the applet. It allows the applet to maintain its own\n-     * locale separated from the locale of the browser or appletviewer.\n-     *\n-     * @return the locale of the applet; if no locale has been set, the default\n-     *         locale is returned\n-     * @since 1.1\n-     *\/\n-    public Locale getLocale() {\n-        Locale locale = super.getLocale();\n-        if (locale == null) {\n-            return Locale.getDefault();\n-        }\n-        return locale;\n-    }\n-\n-    \/**\n-     * Returns information about the parameters that are understood by this\n-     * applet. An applet should override this method to return an array of\n-     * strings describing these parameters.\n-     * <p>\n-     * Each element of the array should be a set of three strings containing the\n-     * name, the type, and a description. For example:\n-     * <blockquote><pre>\n-     * String pinfo[][] = {\n-     *   {\"fps\",    \"1-10\",    \"frames per second\"},\n-     *   {\"repeat\", \"boolean\", \"repeat image loop\"},\n-     *   {\"imgs\",   \"url\",     \"images directory\"}\n-     * };\n-     * <\/pre><\/blockquote>\n-     * <p>\n-     * The implementation of this method provided by the {@code Applet} class\n-     * returns {@code null}.\n-     *\n-     * @return an array describing the parameters this applet looks for\n-     *\/\n-    public String[][] getParameterInfo() {\n-        return null;\n-    }\n-\n-    \/**\n-     * Plays the audio clip at the specified absolute {@code URL}. Nothing\n-     * happens if the audio clip cannot be found.\n-     *\n-     * @param  url an absolute {@code URL} giving the location of the audio clip\n-     *\/\n-    public void play(URL url) {\n-        AudioClip clip = getAudioClip(url);\n-        if (clip != null) {\n-            clip.play();\n-        }\n-    }\n-\n-    \/**\n-     * Plays the audio clip given the {@code URL} and a specifier that is\n-     * relative to it. Nothing happens if the audio clip cannot be found.\n-     *\n-     * @param  url an absolute {@code URL} giving the base location of the audio\n-     *         clip\n-     * @param  name the location of the audio clip, relative to the {@code url}\n-     *         argument\n-     *\/\n-    public void play(URL url, String name) {\n-        AudioClip clip = getAudioClip(url, name);\n-        if (clip != null) {\n-            clip.play();\n-        }\n-    }\n-\n-    \/**\n-     * Called by the browser or applet viewer to inform this applet that it has\n-     * been loaded into the system. It is always called before the first time\n-     * that the {@code start} method is called.\n-     * <p>\n-     * A subclass of {@code Applet} should override this method if it has\n-     * initialization to perform. For example, an applet with threads would use\n-     * the {@code init} method to create the threads and the {@code destroy}\n-     * method to kill them.\n-     * <p>\n-     * The implementation of this method provided by the {@code Applet} class\n-     * does nothing.\n-     *\n-     * @see java.applet.Applet#destroy()\n-     * @see java.applet.Applet#start()\n-     * @see java.applet.Applet#stop()\n-     *\/\n-    public void init() {\n-    }\n-\n-    \/**\n-     * Called by the browser or applet viewer to inform this applet that it\n-     * should start its execution. It is called after the {@code init} method\n-     * and each time the applet is revisited in a Web page.\n-     * <p>\n-     * A subclass of {@code Applet} should override this method if it has any\n-     * operation that it wants to perform each time the Web page containing it\n-     * is visited. For example, an applet with animation might want to use the\n-     * {@code start} method to resume animation, and the {@code stop} method to\n-     * suspend the animation.\n-     * <p>\n-     * Note: some methods, such as {@code getLocationOnScreen}, can only provide\n-     * meaningful results if the applet is showing. Because {@code isShowing}\n-     * returns {@code false} when the applet's {@code start} is first called,\n-     * methods requiring {@code isShowing} to return {@code true} should be\n-     * called from a {@code ComponentListener}.\n-     * <p>\n-     * The implementation of this method provided by the {@code Applet} class\n-     * does nothing.\n-     *\n-     * @see java.applet.Applet#destroy()\n-     * @see java.applet.Applet#init()\n-     * @see java.applet.Applet#stop()\n-     * @see java.awt.Component#isShowing()\n-     * @see java.awt.event.ComponentListener#componentShown(ComponentEvent)\n-     *\/\n-    public void start() {\n-    }\n-\n-    \/**\n-     * Called by the browser or applet viewer to inform this applet that it\n-     * should stop its execution. It is called when the Web page that contains\n-     * this applet has been replaced by another page, and also just before the\n-     * applet is to be destroyed.\n-     * <p>\n-     * A subclass of {@code Applet} should override this method if it has any\n-     * operation that it wants to perform each time the Web page containing it\n-     * is no longer visible. For example, an applet with animation might want to\n-     * use the {@code start} method to resume animation, and the {@code stop}\n-     * method to suspend the animation.\n-     * <p>\n-     * The implementation of this method provided by the {@code Applet} class\n-     * does nothing.\n-     *\n-     * @see java.applet.Applet#destroy()\n-     * @see java.applet.Applet#init()\n-     *\/\n-    public void stop() {\n-    }\n-\n-    \/**\n-     * Called by the browser or applet viewer to inform this applet that it is\n-     * being reclaimed and that it should destroy any resources that it has\n-     * allocated. The {@code stop} method will always be called before\n-     * {@code destroy}.\n-     * <p>\n-     * A subclass of {@code Applet} should override this method if it has any\n-     * operation that it wants to perform before it is destroyed. For example,\n-     * an applet with threads would use the {@code init} method to create the\n-     * threads and the {@code destroy} method to kill them.\n-     * <p>\n-     * The implementation of this method provided by the {@code Applet} class\n-     * does nothing.\n-     *\n-     * @see java.applet.Applet#init()\n-     * @see java.applet.Applet#start()\n-     * @see java.applet.Applet#stop()\n-     *\/\n-    public void destroy() {\n-    }\n-\n-    \/\/\n-    \/\/ Accessibility support\n-    \/\/\n-\n-    \/**\n-     * @serial The accessible context associated with this {@code Applet}.\n-     *\/\n-    @SuppressWarnings(\"serial\") \/\/ Not statically typed as Serializable\n-    AccessibleContext accessibleContext = null;\n-\n-    \/**\n-     * Gets the {@code AccessibleContext} associated with this {@code Applet}.\n-     * For applets, the {@code AccessibleContext} takes the form of an\n-     * {@code AccessibleApplet}. A new {@code AccessibleApplet} instance is\n-     * created if necessary.\n-     *\n-     * @return an {@code AccessibleApplet} that serves as the\n-     *         {@code AccessibleContext} of this {@code Applet}\n-     * @since 1.3\n-     *\/\n-    public AccessibleContext getAccessibleContext() {\n-        if (accessibleContext == null) {\n-            accessibleContext = new AccessibleApplet();\n-        }\n-        return accessibleContext;\n-    }\n-\n-    \/**\n-     * This class implements accessibility support for the {@code Applet} class.\n-     * It provides an implementation of the Java Accessibility API appropriate\n-     * to applet user-interface elements.\n-     *\n-     * @since 1.3\n-     *\/\n-    protected class AccessibleApplet extends AccessibleAWTPanel {\n-\n-        \/**\n-         * Use serialVersionUID from JDK 1.3 for interoperability.\n-         *\/\n-        @Serial\n-        private static final long serialVersionUID = 8127374778187708896L;\n-\n-        \/**\n-         * Constructs an {@code AccessibleApplet}.\n-         *\/\n-        protected AccessibleApplet() {}\n-\n-        \/**\n-         * Get the role of this object.\n-         *\n-         * @return an instance of {@code AccessibleRole} describing the role of\n-         *         the object\n-         *\/\n-        public AccessibleRole getAccessibleRole() {\n-            return AccessibleRole.FRAME;\n-        }\n-\n-        \/**\n-         * Get the state of this object.\n-         *\n-         * @return an instance of {@code AccessibleStateSet} containing the\n-         *         current state set of the object\n-         * @see AccessibleState\n-         *\/\n-        public AccessibleStateSet getAccessibleStateSet() {\n-            AccessibleStateSet states = super.getAccessibleStateSet();\n-            states.add(AccessibleState.ACTIVE);\n-            return states;\n-        }\n-    }\n-}\n","filename":"src\/java.desktop\/share\/classes\/java\/applet\/Applet.java","additions":0,"deletions":609,"binary":false,"changes":609,"status":"deleted"},{"patch":"@@ -1,200 +0,0 @@\n-\/*\n- * Copyright (c) 1995, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.applet;\n-\n-import java.awt.Image;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.net.URL;\n-import java.util.Enumeration;\n-import java.util.Iterator;\n-\n-\/**\n- * This interface corresponds to an applet's environment: the document\n- * containing the applet and the other applets in the same document.\n- * <p>\n- * The methods in this interface can be used by an applet to obtain information\n- * about its environment.\n- *\n- * @author Arthur van Hoff\n- * @since 1.0\n- * @deprecated The Applet API is deprecated, no replacement.\n- *\/\n-@Deprecated(since = \"9\", forRemoval = true)\n-@SuppressWarnings(\"removal\")\n-public interface AppletContext {\n-\n-    \/**\n-     * Creates an audio clip.\n-     *\n-     * @param  url an absolute {@code URL} giving the location of the audio clip\n-     * @return the audio clip at the specified {@code URL}\n-     *\/\n-    AudioClip getAudioClip(URL url);\n-\n-    \/**\n-     * Returns an {@code Image} object that can then be painted on the screen.\n-     * The {@code url} argument that is passed as an argument must specify an\n-     * absolute {@code URL}.\n-     * <p>\n-     * This method always returns immediately, whether or not the image exists.\n-     * When the applet attempts to draw the image on the screen, the data will\n-     * be loaded. The graphics primitives that draw the image will incrementally\n-     * paint on the screen.\n-     *\n-     * @param  url an absolute {@code URL} giving the location of the image\n-     * @return the image at the specified {@code URL}\n-     * @see java.awt.Image\n-     *\/\n-    Image getImage(URL url);\n-\n-    \/**\n-     * Finds and returns the applet in the document represented by this applet\n-     * context with the given name. The name can be set in the HTML tag by\n-     * setting the {@code name} attribute.\n-     *\n-     * @param  name an applet name\n-     * @return the applet with the given name, or {@code null} if not found\n-     *\/\n-    Applet getApplet(String name);\n-\n-    \/**\n-     * Finds all the applets in the document represented by this applet context.\n-     *\n-     * @return an enumeration of all applets in the document represented by this\n-     *         applet context\n-     *\/\n-    Enumeration<Applet> getApplets();\n-\n-    \/**\n-     * Requests that the browser or applet viewer show the Web page indicated by\n-     * the {@code url} argument. The browser or applet viewer determines which\n-     * window or frame to display the Web page. This method may be ignored by\n-     * applet contexts that are not browsers.\n-     *\n-     * @param url an absolute {@code URL} giving the location of the document\n-     *\/\n-    void showDocument(URL url);\n-\n-    \/**\n-     * Requests that the browser or applet viewer show the Web page indicated by\n-     * the {@code url} argument. The {@code target} argument indicates in which\n-     * HTML frame the document is to be displayed. The target argument is\n-     * interpreted as follows:\n-     *\n-     * <table class=\"striped\">\n-     * <caption>Target arguments and their descriptions<\/caption>\n-     * <thead>\n-     *   <tr>\n-     *     <th scope=\"col\">Target Argument\n-     *     <th scope=\"col\">Description\n-     * <\/thead>\n-     * <tbody>\n-     *   <tr>\n-     *     <th scope=\"row\">{@code \"_self\"}\n-     *     <td>Show in the window and frame that contain the applet.\n-     *   <tr>\n-     *     <th scope=\"row\">{@code \"_parent\"}\n-     *     <td>Show in the applet's parent frame. If the applet's frame has no\n-     *     parent frame, acts the same as \"_self\".\n-     *   <tr>\n-     *     <th scope=\"row\">{@code \"_top\"}\n-     *     <td>Show in the top-level frame of the applet's window. If the\n-     *     applet's frame is the top-level frame, acts the same as \"_self\".\n-     *   <tr>\n-     *     <th scope=\"row\">{@code \"_blank\"}\n-     *     <td>Show in a new, unnamed top-level window.\n-     *   <tr>\n-     *     <th scope=\"row\"><i>name<\/i>\n-     *     <td>Show in the frame or window named <i>name<\/i>. If a target named\n-     *     <i>name<\/i> does not already exist, a new top-level window with the\n-     *     specified name is created, and the document is shown there.\n-     * <\/tbody>\n-     * <\/table>\n-     * <p>\n-     * An applet viewer or browser is free to ignore {@code showDocument}.\n-     *\n-     * @param  url an absolute {@code URL} giving the location of the document\n-     * @param  target a {@code String} indicating where to display the page\n-     *\/\n-    public void showDocument(URL url, String target);\n-\n-    \/**\n-     * Requests that the argument string be displayed in the \"status window\".\n-     * Many browsers and applet viewers provide such a window, where the\n-     * application can inform users of its current state.\n-     *\n-     * @param  status a string to display in the status window\n-     *\/\n-    void showStatus(String status);\n-\n-    \/**\n-     * Associates the specified stream with the specified key in this applet\n-     * context. If the applet context previously contained a mapping for this\n-     * key, the old value is replaced.\n-     * <p>\n-     * For security reasons, mapping of streams and keys exists for each\n-     * codebase. In other words, applet from one codebase cannot access the\n-     * streams created by an applet from a different codebase\n-     *\n-     * @param  key key with which the specified value is to be associated\n-     * @param  stream stream to be associated with the specified key. If this\n-     *         parameter is {@code null}, the specified key is removed in this\n-     *         applet context.\n-     * @throws IOException if the stream size exceeds a certain size limit. Size\n-     *         limit is decided by the implementor of this interface.\n-     * @since 1.4\n-     *\/\n-    public void setStream(String key, InputStream stream) throws IOException;\n-\n-    \/**\n-     * Returns the stream to which specified key is associated within this\n-     * applet context. Returns {@code null} if the applet context contains no\n-     * stream for this key.\n-     * <p>\n-     * For security reasons, mapping of streams and keys exists for each\n-     * codebase. In other words, applet from one codebase cannot access the\n-     * streams created by an applet from a different codebase.\n-     *\n-     * @param  key key whose associated stream is to be returned\n-     * @return the stream to which this applet context maps the key\n-     * @since 1.4\n-     *\/\n-    public InputStream getStream(String key);\n-\n-    \/**\n-     * Finds all the keys of the streams in this applet context.\n-     * <p>\n-     * For security reasons, mapping of streams and keys exists for each\n-     * codebase. In other words, applet from one codebase cannot access the\n-     * streams created by an applet from a different codebase.\n-     *\n-     * @return an {@code Iterator} of all the names of the streams in this\n-     *         applet context\n-     * @since 1.4\n-     *\/\n-    public Iterator<String> getStreamKeys();\n-}\n","filename":"src\/java.desktop\/share\/classes\/java\/applet\/AppletContext.java","additions":0,"deletions":200,"binary":false,"changes":200,"status":"deleted"},{"patch":"@@ -1,111 +0,0 @@\n-\/*\n- * Copyright (c) 1995, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.applet;\n-\n-import java.net.URL;\n-\n-\/**\n- * When an applet is first created, an applet stub is attached to it using the\n- * applet's {@code setStub} method. This stub serves as the interface between\n- * the applet and the browser environment or applet viewer environment in which\n- * the application is running.\n- *\n- * @author Arthur van Hoff\n- * @see java.applet.Applet#setStub(java.applet.AppletStub)\n- * @since 1.0\n- * @deprecated The Applet API is deprecated, no replacement.\n- *\/\n-@Deprecated(since = \"9\", forRemoval = true)\n-@SuppressWarnings(\"removal\")\n-public interface AppletStub {\n-\n-    \/**\n-     * Determines if the applet is active. An applet is active just before its\n-     * {@code start} method is called. It becomes inactive just before its\n-     * {@code stop} method is called.\n-     *\n-     * @return {@code true} if the applet is active; {@code false} otherwise\n-     *\/\n-    boolean isActive();\n-\n-    \/**\n-     * Gets the {@code URL} of the document in which the applet is embedded. For\n-     * example, suppose an applet is contained within the document:\n-     * <blockquote><pre>\n-     *    http:\/\/www.oracle.com\/technetwork\/java\/index.html\n-     * <\/pre><\/blockquote>\n-     * The document base is:\n-     * <blockquote><pre>\n-     *    http:\/\/www.oracle.com\/technetwork\/java\/index.html\n-     * <\/pre><\/blockquote>\n-     *\n-     * @return the {@link java.net.URL} of the document that contains the applet\n-     * @see java.applet.AppletStub#getCodeBase()\n-     *\/\n-    URL getDocumentBase();\n-\n-    \/**\n-     * Gets the base {@code URL}. This is the {@code URL} of the directory which\n-     * contains the applet.\n-     *\n-     * @return the base {@link java.net.URL} of the directory which contains the\n-     *         applet\n-     * @see java.applet.AppletStub#getDocumentBase()\n-     *\/\n-    URL getCodeBase();\n-\n-    \/**\n-     * Returns the value of the named parameter in the HTML tag. For example, if\n-     * an applet is specified as\n-     * <blockquote><pre>\n-     * &lt;applet code=\"Clock\" width=50 height=50&gt;\n-     * &lt;param name=Color value=\"blue\"&gt;\n-     * &lt;\/applet&gt;\n-     * <\/pre><\/blockquote>\n-     * <p>\n-     * then a call to {@code getParameter(\"Color\")} returns the value\n-     * {@code \"blue\"}.\n-     *\n-     * @param  name a parameter name\n-     * @return the value of the named parameter, or {@code null} if not set\n-     *\/\n-    String getParameter(String name);\n-\n-    \/**\n-     * Returns the applet's context.\n-     *\n-     * @return the applet's context\n-     *\/\n-    AppletContext getAppletContext();\n-\n-    \/**\n-     * Called when the applet wants to be resized.\n-     *\n-     * @param  width the new requested width for the applet\n-     * @param  height the new requested height for the applet\n-     *\/\n-    void appletResize(int width, int height);\n-}\n","filename":"src\/java.desktop\/share\/classes\/java\/applet\/AppletStub.java","additions":0,"deletions":111,"binary":false,"changes":111,"status":"deleted"},{"patch":"@@ -1,55 +0,0 @@\n-\/*\n- * Copyright (c) 1995, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.applet;\n-\n-\/**\n- * The {@code AudioClip} interface is a simple abstraction for playing a sound\n- * clip. Multiple {@code AudioClip} items can be playing at the same time, and\n- * the resulting sound is mixed together to produce a composite.\n- *\n- * @author Arthur van Hoff\n- * @since 1.0\n- * @deprecated The Applet API is deprecated, no replacement.\n- *\/\n-@Deprecated(since = \"9\", forRemoval = true)\n-public interface AudioClip {\n-\n-    \/**\n-     * Starts playing this audio clip. Each time this method is called, the clip\n-     * is restarted from the beginning.\n-     *\/\n-    void play();\n-\n-    \/**\n-     * Starts playing this audio clip in a loop.\n-     *\/\n-    void loop();\n-\n-    \/**\n-     * Stops playing this audio clip.\n-     *\/\n-    void stop();\n-}\n","filename":"src\/java.desktop\/share\/classes\/java\/applet\/AudioClip.java","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * Provides the classes necessary to create an applet and the classes an applet\n- * uses to communicate with its applet context.\n- * <p>\n- * The applet framework involves two entities: the <i>applet<\/i> and the\n- * <i>applet context<\/i>. An applet is an embeddable window (see the Panel\n- * class) with a few extra methods that the applet context can use to\n- * initialize, start, and stop the applet.\n- * <p>\n- * The applet context is an application that is responsible for loading and\n- * running applets. For example, the applet context could be a Web browser or an\n- * applet development environment.\n- * <p>\n- * This package has been deprecated and may be removed in\n- * a future version of the Java Platform. There is no replacement.\n- * All of the classes and interfaces in this package have been terminally\n- * deprecated.\n- * Users are advised to migrate their applications to other technologies.\n- *\n- * @since 1.0\n- *\/\n-package java.applet;\n","filename":"src\/java.desktop\/share\/classes\/java\/applet\/package-info.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -28,1 +28,0 @@\n-import java.applet.Applet;\n@@ -240,2 +239,1 @@\n-     * The {@code AppContext} of the component. Applets\/Plugin may\n-     * change the AppContext.\n+     * The {@code AppContext} of the component.\n@@ -3940,1 +3938,1 @@\n-     * be a {@code Canvas} or {@code Window} or {@code Applet}.\n+     * be a {@code Canvas} or {@code Window}.\n@@ -3943,1 +3941,0 @@\n-     * @see Applet\n@@ -3991,2 +3988,1 @@\n-         * The component must be a {@code Canvas} or {@code Window} or\n-         * {@code Applet}.\n+         * The component must be a {@code Canvas} or {@code Window}.\n@@ -3995,1 +3991,0 @@\n-         * @see Applet\n@@ -4013,2 +4008,1 @@\n-                !(Component.this instanceof Canvas) &&\n-                !(Component.this instanceof Applet))\n+                !(Component.this instanceof Canvas))\n@@ -4017,1 +4011,1 @@\n-                        \"Component must be a Canvas or Window or Applet\");\n+                        \"Component must be a Canvas or Window\");\n@@ -8164,6 +8158,0 @@\n-            if (toFocus == null) {\n-                Applet applet = EmbeddedFrame.getAppletIfAncestorOf(this);\n-                if (applet != null) {\n-                    toFocus = applet;\n-                }\n-            }\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Component.java","additions":5,"deletions":17,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1560,2 +1560,2 @@\n-     * The {@code Window} class and the {@code Applet} class are the validate\n-     * roots in AWT.  Swing introduces more validate roots.\n+     * The {@code Window} class is the validate root in AWT.\n+     * Swing introduces more validate roots.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Container.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -168,3 +168,0 @@\n-         * If there are several applets launched in a browser, they can be\n-         * treated either as separate applications or a single one. This behavior\n-         * is implementation-dependent.\n@@ -175,5 +172,1 @@\n-         * from the same toolkit except those from its own child hierarchy. If there\n-         * are several applets launched in a browser, all of them run with the same\n-         * toolkit; thus, a toolkit-modal dialog displayed by an applet may affect\n-         * other applets and all windows of the browser instance which embeds the\n-         * Java runtime environment for this toolkit.\n+         * from the same toolkit except those from its own child hierarchy.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Dialog.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -70,9 +70,0 @@\n- * Some browsers partition applets in different code bases into\n- * separate contexts, and establish walls between these contexts.\n- * In such a scenario, there will be one {@code EventQueue}\n- * per context. Other browsers place all applets into the same\n- * context, implying that there will be only a single, global\n- * {@code EventQueue} for all applets. This behavior is\n- * implementation-dependent.  Consult your browser's documentation\n- * for more information.\n- * <p>\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/EventQueue.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1126,2 +1126,0 @@\n-     * If called from an applet, the array includes only the {@code Frame}s\n-     * accessible by that applet.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Frame.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -295,2 +295,1 @@\n-     * application or applet. This means applets cannot register fonts in\n-     * a way that they are visible to other applets.\n+     * application.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/GraphicsEnvironment.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -74,10 +74,0 @@\n- * Some browsers partition applets in different code bases into separate\n- * contexts, and establish walls between these contexts. In such a scenario,\n- * there will be one KeyboardFocusManager per context. Other browsers place all\n- * applets into the same context, implying that there will be only a single,\n- * global KeyboardFocusManager for all applets. This behavior is\n- * implementation-dependent. Consult your browser's documentation for more\n- * information. No matter how many contexts there may be, however, there can\n- * never be more than one focus owner, focused Window, or active Window, per\n- * ClassLoader.\n- * <p>\n@@ -1180,1 +1170,1 @@\n-     *        for this application or applet's browser context\n+     *        for this application\n@@ -1265,1 +1255,1 @@\n-     *        for this application or applet's browser context\n+     *        for this application\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/KeyboardFocusManager.java","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -163,1 +163,1 @@\n-        \/\/ Fix 6343431: Applet compatibility problems if arrays are not\n+        \/\/ Fix 6343431: compatibility problems if arrays are not\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Polygon.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -309,4 +309,1 @@\n-     * application.  Some browsers partition applets in different\n-     * code bases into separate contexts, and establish walls between\n-     * these contexts.  In such a scenario, only the tray icons added\n-     * from this context will be returned.\n+     * application.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/SystemTray.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1353,7 +1353,1 @@\n-     * Get the application's or applet's EventQueue instance.\n-     * Depending on the Toolkit implementation, different EventQueues\n-     * may be returned for different applets.  Applets should\n-     * therefore not assume that the EventQueue instance returned\n-     * by this method will be shared by other applets or the system.\n-     *\n-     * @return    the {@code EventQueue} object\n+     * {@return the {@code EventQueue} for this application}\n@@ -1366,3 +1360,3 @@\n-     * Gets the application's or applet's {@code EventQueue}\n-     * instance, without checking access.  For security reasons,\n-     * this can only be called from a {@code Toolkit} subclass.\n+     * A method used by toolkit subclasses to get the {@code EventQueue}.\n+     * This may be more direct or more efficient than calling\n+     * {@code getSystemEventQueue()}.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Toolkit.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1523,2 +1523,0 @@\n-     * If called from an applet, the array includes only the {@code Window}s\n-     * accessible by that applet.\n@@ -1546,2 +1544,0 @@\n-     * If called from an applet, the array includes only the {@code Window}s\n-     * accessible by that applet.\n@@ -3868,1 +3864,1 @@\n-                \/\/ Iterate down one level to see whether we have a JApplet\n+                \/\/ Iterate down one level to see whether we have (eg) a JInternalFrame\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Window.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -84,1 +84,0 @@\n-      <li><a href=#BrowserContexts>KeyboardFocusManager and Browser Contexts<\/a>\n@@ -216,16 +215,0 @@\n-<a id=\"BrowserContexts\"><\/a>\n-<h2>KeyboardFocusManager and Browser Contexts<\/h2>\n-<p>\n-Some browsers partition applets in different code bases into separate\n-contexts, and establish walls between these contexts. Each thread and\n-each Component is associated with a particular context and cannot\n-interfere with threads or access Components in other contexts. In such\n-a scenario, there will be one KeyboardFocusManager per context. Other\n-browsers place all applets into the same context, implying that there\n-will be only a single, global KeyboardFocusManager for all\n-applets. This behavior is implementation-dependent. Consult your\n-browser's documentation for more information. No matter how many\n-contexts there may be, however, there can never be more than one focus\n-owner, focused Window, or active Window, per ClassLoader.\n-\n-\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/doc-files\/FocusSpec.html","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -120,3 +120,0 @@\n-        If there are several applets launched in a browser, they can be\n-        treated either as separate applications or a single application.\n-\tThis behavior is implementation-dependent.\n@@ -125,5 +122,1 @@\n-        toolkit except those from its child hierarchy. If there\n-        are several applets launched all of them run with the same toolkit,\n-        so a toolkit-modal dialog shown from an applet may affect other\n-        applets and all windows of the browser instance which embeds the\n-        Java runtime environment for this toolkit.\n+        toolkit except those from its child hierarchy.\n@@ -359,2 +352,2 @@\n-      but the only distinction between application- and toolkit-modality is for\n-      applets and applications launched from Java Web Start.\n+      and now with single application per-VM there is no\n+      distinction between application- and toolkit-modality\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/doc-files\/Modality.html","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1,90 +0,0 @@\n-\/*\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.beans;\n-\n-import java.applet.Applet;\n-\n-import java.beans.beancontext.BeanContext;\n-\n-\/**\n- * This interface is designed to work in collusion with java.beans.Beans.instantiate.\n- * The interface is intended to provide mechanism to allow the proper\n- * initialization of JavaBeans that are also Applets, during their\n- * instantiation by java.beans.Beans.instantiate().\n- *\n- * @see java.beans.Beans#instantiate\n- *\n- * @since 1.2\n- *\n- * @deprecated The Applet API is deprecated. See the\n- * <a href=\"..\/applet\/package-summary.html\"> java.applet package\n- * documentation<\/a> for further information.\n- *\/\n-@Deprecated(since = \"9\", forRemoval = true)\n-public interface AppletInitializer {\n-\n-    \/**\n-     * <p>\n-     * If passed to the appropriate variant of java.beans.Beans.instantiate\n-     * this method will be called in order to associate the newly instantiated\n-     * Applet (JavaBean) with its AppletContext, AppletStub, and Container.\n-     * <\/p>\n-     * <p>\n-     * Conformant implementations shall:\n-     * <ol>\n-     * <li> Associate the newly instantiated Applet with the appropriate\n-     * AppletContext.\n-     *\n-     * <li> Instantiate an AppletStub() and associate that AppletStub with\n-     * the Applet via an invocation of setStub().\n-     *\n-     * <li> If BeanContext parameter is null, then it shall associate the\n-     * Applet with its appropriate Container by adding that Applet to its\n-     * Container via an invocation of add(). If the BeanContext parameter is\n-     * non-null, then it is the responsibility of the BeanContext to associate\n-     * the Applet with its Container during the subsequent invocation of its\n-     * addChildren() method.\n-     * <\/ol>\n-     *\n-     * @param newAppletBean  The newly instantiated JavaBean\n-     * @param bCtxt          The BeanContext intended for this Applet, or\n-     *                       null.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    void initialize(Applet newAppletBean, BeanContext bCtxt);\n-\n-    \/**\n-     * <p>\n-     * Activate, and\/or mark Applet active. Implementors of this interface\n-     * shall mark this Applet as active, and optionally invoke its start()\n-     * method.\n-     * <\/p>\n-     *\n-     * @param newApplet  The newly instantiated JavaBean\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    void activate(Applet newApplet);\n-}\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/AppletInitializer.java","additions":0,"deletions":90,"binary":false,"changes":90,"status":"deleted"},{"patch":"@@ -30,5 +30,0 @@\n-import java.applet.Applet;\n-import java.applet.AppletContext;\n-import java.applet.AppletStub;\n-import java.applet.AudioClip;\n-\n@@ -85,1 +80,1 @@\n-        return Beans.instantiate(cls, beanName, null, null);\n+        return Beans.instantiate(cls, beanName, null);\n@@ -112,67 +107,0 @@\n-        return Beans.instantiate(cls, beanName, beanContext, null);\n-    }\n-\n-    \/**\n-     * Instantiate a bean.\n-     * <p>\n-     * The bean is created based on a name relative to a class-loader.\n-     * This name should be a dot-separated name such as \"a.b.c\".\n-     * <p>\n-     * In Beans 1.0 the given name can indicate either a serialized object\n-     * or a class.  Other mechanisms may be added in the future.  In\n-     * beans 1.0 we first try to treat the beanName as a serialized object\n-     * name then as a class name.\n-     * <p>\n-     * When using the beanName as a serialized object name we convert the\n-     * given beanName to a resource pathname and add a trailing \".ser\" suffix.\n-     * We then try to load a serialized object from that resource.\n-     * <p>\n-     * For example, given a beanName of \"x.y\", Beans.instantiate would first\n-     * try to read a serialized object from the resource \"x\/y.ser\" and if\n-     * that failed it would try to load the class \"x.y\" and create an\n-     * instance of that class.\n-     * <p>\n-     * If the bean is a subtype of java.applet.Applet, then it is given\n-     * some special initialization.  First, it is supplied with a default\n-     * AppletStub and AppletContext.  Second, if it was instantiated from\n-     * a classname the applet's \"init\" method is called.  (If the bean was\n-     * deserialized this step is skipped.)\n-     * <p>\n-     * Note that for beans which are applets, it is the caller's responsibility\n-     * to call \"start\" on the applet.  For correct behaviour, this should be done\n-     * after the applet has been added into a visible AWT container.\n-     * <p>\n-     * Note that applets created via beans.instantiate run in a slightly\n-     * different environment than applets running inside browsers.  In\n-     * particular, bean applets have no access to \"parameters\", so they may\n-     * wish to provide property get\/set methods to set parameter values.  We\n-     * advise bean-applet developers to test their bean-applets against both\n-     * the JDK appletviewer (for a reference browser environment) and the\n-     * BDK BeanBox (for a reference bean container).\n-     *\n-     * @return a JavaBean\n-     * @param     cls         the class-loader from which we should create\n-     *                        the bean.  If this is null, then the system\n-     *                        class-loader is used.\n-     * @param     beanName    the name of the bean within the class-loader.\n-     *                        For example \"sun.beanbox.foobah\"\n-     * @param     beanContext The BeanContext in which to nest the new bean\n-     * @param     initializer The AppletInitializer for the new bean\n-     *\n-     * @throws ClassNotFoundException if the class of a serialized\n-     *              object could not be found.\n-     * @throws IOException if an I\/O error occurs.\n-     * @since 1.2\n-     *\n-     * @deprecated It is recommended to use\n-     * {@link #instantiate(ClassLoader, String, BeanContext)},\n-     * because the Applet API is deprecated. See the\n-     * <a href=\"..\/..\/java\/applet\/package-summary.html\"> java.applet package\n-     * documentation<\/a> for further information.\n-     *\/\n-    @Deprecated(since = \"9\", forRemoval = true)\n-    @SuppressWarnings(\"removal\")\n-    public static Object instantiate(ClassLoader cls, String beanName,\n-                                     BeanContext beanContext,\n-                                     AppletInitializer initializer)\n-            throws IOException, ClassNotFoundException {\n@@ -252,95 +180,1 @@\n-\n-            \/\/ Ok, if the result is an applet initialize it.\n-\n-            AppletStub stub = null;\n-\n-            if (result instanceof Applet) {\n-                Applet  applet      = (Applet) result;\n-                boolean needDummies = initializer == null;\n-\n-                if (needDummies) {\n-\n-                    \/\/ Figure our the codebase and docbase URLs.  We do this\n-                    \/\/ by locating the URL for a known resource, and then\n-                    \/\/ massaging the URL.\n-\n-                    \/\/ First find the \"resource name\" corresponding to the bean\n-                    \/\/ itself.  So a serialized bean \"a.b.c\" would imply a\n-                    \/\/ resource name of \"a\/b\/c.ser\" and a classname of \"x.y\"\n-                    \/\/ would imply a resource name of \"x\/y.class\".\n-\n-                    final String resourceName;\n-\n-                    if (serialized) {\n-                        \/\/ Serialized bean\n-                        resourceName = beanName.replace('.','\/').concat(\".ser\");\n-                    } else {\n-                        \/\/ Regular class\n-                        resourceName = beanName.replace('.','\/').concat(\".class\");\n-                    }\n-\n-                    URL objectUrl = null;\n-                    URL codeBase  = null;\n-                    URL docBase   = null;\n-\n-                    \/\/ Now get the URL corresponding to the resource name.\n-                    if (cls == null) {\n-                        objectUrl = ClassLoader.getSystemResource(resourceName);\n-                    } else\n-                        objectUrl = cls.getResource(resourceName);\n-\n-                    \/\/ If we found a URL, we try to locate the docbase by taking\n-                    \/\/ of the final path name component, and the code base by taking\n-                    \/\/ of the complete resourceName.\n-                    \/\/ So if we had a resourceName of \"a\/b\/c.class\" and we got an\n-                    \/\/ objectURL of \"file:\/\/bert\/classes\/a\/b\/c.class\" then we would\n-                    \/\/ want to set the codebase to \"file:\/\/bert\/classes\/\" and the\n-                    \/\/ docbase to \"file:\/\/bert\/classes\/a\/b\/\"\n-\n-                    if (objectUrl != null) {\n-                        String s = objectUrl.toExternalForm();\n-\n-                        if (s.endsWith(resourceName)) {\n-                            int ix   = s.length() - resourceName.length();\n-                            codeBase = newURL(s.substring(0,ix));\n-                            docBase  = codeBase;\n-\n-                            ix = s.lastIndexOf('\/');\n-\n-                            if (ix >= 0) {\n-                                docBase = newURL(s.substring(0,ix+1));\n-                            }\n-                        }\n-                    }\n-\n-                    \/\/ Setup a default context and stub.\n-                    BeansAppletContext context = new BeansAppletContext(applet);\n-\n-                    stub = (AppletStub)new BeansAppletStub(applet, context, codeBase, docBase);\n-                    applet.setStub(stub);\n-                } else {\n-                    initializer.initialize(applet, beanContext);\n-                }\n-\n-                \/\/ now, if there is a BeanContext, add the bean, if applicable.\n-\n-                if (beanContext != null) {\n-                    unsafeBeanContextAdd(beanContext, result);\n-                }\n-\n-                \/\/ If it was deserialized then it was already init-ed.\n-                \/\/ Otherwise we need to initialize it.\n-\n-                if (!serialized) {\n-                    \/\/ We need to set a reasonable initial size, as many\n-                    \/\/ applets are unhappy if they are started without\n-                    \/\/ having been explicitly sized.\n-                    applet.setSize(100,100);\n-                    applet.init();\n-                }\n-\n-                if (needDummies) {\n-                  ((BeansAppletStub)stub).active = true;\n-                } else initializer.activate(applet);\n-\n-            } else if (beanContext != null) unsafeBeanContextAdd(beanContext, result);\n+           if (beanContext != null) unsafeBeanContextAdd(beanContext, result);\n@@ -485,135 +319,0 @@\n-\n-\/**\n- * Package private support class.  This provides a default AppletContext\n- * for beans which are applets.\n- *\/\n-@Deprecated(since = \"9\", forRemoval = true)\n-@SuppressWarnings(\"removal\")\n-class BeansAppletContext implements AppletContext {\n-    Applet target;\n-    Hashtable<URL,Object> imageCache = new Hashtable<>();\n-\n-    BeansAppletContext(Applet target) {\n-        this.target = target;\n-    }\n-\n-    public AudioClip getAudioClip(URL url) {\n-        \/\/ We don't currently support audio clips in the Beans.instantiate\n-        \/\/ applet context, unless by some luck there exists a URL content\n-        \/\/ class that can generate an AudioClip from the audio URL.\n-        try {\n-            return (AudioClip) url.getContent();\n-        } catch (Exception ex) {\n-            return null;\n-        }\n-    }\n-\n-    public synchronized Image getImage(URL url) {\n-        Object o = imageCache.get(url);\n-        if (o != null) {\n-            return (Image)o;\n-        }\n-        try {\n-            o = url.getContent();\n-            if (o == null) {\n-                return null;\n-            }\n-            if (o instanceof Image) {\n-                imageCache.put(url, o);\n-                return (Image) o;\n-            }\n-            \/\/ Otherwise it must be an ImageProducer.\n-            Image img = target.createImage((java.awt.image.ImageProducer)o);\n-            imageCache.put(url, img);\n-            return img;\n-\n-        } catch (Exception ex) {\n-            return null;\n-        }\n-    }\n-\n-    public Applet getApplet(String name) {\n-        return null;\n-    }\n-\n-    public Enumeration<Applet> getApplets() {\n-        Vector<Applet> applets = new Vector<>();\n-        applets.addElement(target);\n-        return applets.elements();\n-    }\n-\n-    public void showDocument(URL url) {\n-        \/\/ We do nothing.\n-    }\n-\n-    public void showDocument(URL url, String target) {\n-        \/\/ We do nothing.\n-    }\n-\n-    public void showStatus(String status) {\n-        \/\/ We do nothing.\n-    }\n-\n-    public void setStream(String key, InputStream stream)throws IOException{\n-        \/\/ We do nothing.\n-    }\n-\n-    public InputStream getStream(String key){\n-        \/\/ We do nothing.\n-        return null;\n-    }\n-\n-    public Iterator<String> getStreamKeys(){\n-        \/\/ We do nothing.\n-        return null;\n-    }\n-}\n-\n-\/**\n- * Package private support class.  This provides an AppletStub\n- * for beans which are applets.\n- *\/\n-@Deprecated(since = \"9\", forRemoval = true)\n-@SuppressWarnings(\"removal\")\n-class BeansAppletStub implements AppletStub {\n-    transient boolean active;\n-    transient Applet target;\n-    transient AppletContext context;\n-    transient URL codeBase;\n-    transient URL docBase;\n-\n-    BeansAppletStub(Applet target,\n-                AppletContext context, URL codeBase,\n-                                URL docBase) {\n-        this.target = target;\n-        this.context = context;\n-        this.codeBase = codeBase;\n-        this.docBase = docBase;\n-    }\n-\n-    public boolean isActive() {\n-        return active;\n-    }\n-\n-    public URL getDocumentBase() {\n-        \/\/ use the root directory of the applet's class-loader\n-        return docBase;\n-    }\n-\n-    public URL getCodeBase() {\n-        \/\/ use the directory where we found the class or serialized object.\n-        return codeBase;\n-    }\n-\n-    public String getParameter(String name) {\n-        return null;\n-    }\n-\n-    public AppletContext getAppletContext() {\n-        return context;\n-    }\n-\n-    public void appletResize(int width, int height) {\n-        \/\/ we do nothing.\n-    }\n-}\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/Beans.java","additions":2,"deletions":303,"binary":false,"changes":305,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * as opposed to runtime when the JavaBean is part of an applet, application,\n+ * as opposed to runtime when the JavaBean is part of an application,\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/DesignMode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -955,1 +955,1 @@\n-         * This includes plugins bundled with applets\/applications.\n+         * This includes plugins bundled with applications.\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/metadata\/IIOMetadataFormatImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,3 +113,1 @@\n-     * <p> Each {@code ThreadGroup} will receive its own\n-     * instance; this allows different {@code Applet}s in the\n-     * same browser (for example) to each have their own registry.\n+     * <p> Each {@code ThreadGroup} will receive its own instance.\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/spi\/IIORegistry.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -537,2 +537,1 @@\n-               (!(root instanceof Window) &&\n-                !SunToolkit.isInstanceOf(root, \"java.applet.Applet\"))) {\n+               (!(root instanceof Window))) {\n@@ -690,1 +689,1 @@\n-         * Returns the Root (Window or Applet) that this BufferInfo references.\n+         * Returns the Root (Window) that this BufferInfo references.\n@@ -796,24 +795,8 @@\n-            if (SunToolkit.isInstanceOf(root, \"java.applet.Applet\")) {\n-                try {\n-                    AWTAccessor.ComponentAccessor componentAccessor\n-                            = AWTAccessor.getComponentAccessor();\n-                    componentAccessor.createBufferStrategy(root, 2, caps);\n-                    bs = componentAccessor.getBufferStrategy(root);\n-                } catch (AWTException e) {\n-                    \/\/ Type is not supported\n-                    if (LOGGER.isLoggable(PlatformLogger.Level.FINER)) {\n-                        LOGGER.finer(\"createBufferStrategy failed\",\n-                                     e);\n-                    }\n-                }\n-            }\n-            else {\n-                try {\n-                    ((Window)root).createBufferStrategy(2, caps);\n-                    bs = ((Window)root).getBufferStrategy();\n-                } catch (AWTException e) {\n-                    \/\/ Type not supported\n-                    if (LOGGER.isLoggable(PlatformLogger.Level.FINER)) {\n-                        LOGGER.finer(\"createBufferStrategy failed\",\n-                                     e);\n-                    }\n+            try {\n+                ((Window)root).createBufferStrategy(2, caps);\n+                bs = ((Window)root).getBufferStrategy();\n+            } catch (AWTException e) {\n+                \/\/ Type not supported\n+                if (LOGGER.isLoggable(PlatformLogger.Level.FINER)) {\n+                    LOGGER.finer(\"createBufferStrategy failed\",\n+                                 e);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/BufferStrategyPaintManager.java","additions":10,"deletions":27,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -1,580 +0,0 @@\n-\/*\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package javax.swing;\n-\n-import java.applet.Applet;\n-import java.awt.AWTEvent;\n-import java.awt.BorderLayout;\n-import java.awt.Color;\n-import java.awt.Component;\n-import java.awt.Container;\n-import java.awt.Graphics;\n-import java.awt.HeadlessException;\n-import java.awt.LayoutManager;\n-import java.beans.BeanProperty;\n-import java.beans.JavaBean;\n-\n-import javax.accessibility.Accessible;\n-import javax.accessibility.AccessibleContext;\n-\n-\/**\n- * An extended version of <code>java.applet.Applet<\/code> that adds support for\n- * the JFC\/Swing component architecture.\n- * You can find task-oriented documentation about using <code>JApplet<\/code>\n- * in <em>The Java Tutorial<\/em>,\n- * in the section\n- * <a\n- href=\"https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/components\/applet.html\">How to Make Applets<\/a>.\n- * <p>\n- * The <code>JApplet<\/code> class is slightly incompatible with\n- * <code>java.applet.Applet<\/code>.  <code>JApplet<\/code> contains a\n- * <code>JRootPane<\/code> as its only child.  The <code>contentPane<\/code>\n- * should be the parent of any children of the <code>JApplet<\/code>.\n- * As a convenience, the {@code add}, {@code remove}, and {@code setLayout}\n- * methods of this class are overridden, so that they delegate calls\n- * to the corresponding methods of the {@code ContentPane}.\n- * For example, you can add a child component to an applet as follows:\n- * <pre>\n- *       applet.add(child);\n- * <\/pre>\n- *\n- * And the child will be added to the <code>contentPane<\/code>.\n- * The <code>contentPane<\/code> will always be non-<code>null<\/code>.\n- * Attempting to set it to <code>null<\/code> will cause the\n- * <code>JApplet<\/code> to throw an exception. The default\n- * <code>contentPane<\/code> will have a <code>BorderLayout<\/code>\n- * manager set on it.\n- * Refer to {@link javax.swing.RootPaneContainer}\n- * for details on adding, removing and setting the <code>LayoutManager<\/code>\n- * of a <code>JApplet<\/code>.\n- * <p>\n- * Please see the <code>JRootPane<\/code> documentation for a\n- * complete description of the <code>contentPane<\/code>, <code>glassPane<\/code>,\n- * and <code>layeredPane<\/code> properties.\n- * <p>\n- * <strong>Warning:<\/strong> Swing is not thread safe. For more\n- * information see <a\n- * href=\"package-summary.html#threading\">Swing's Threading\n- * Policy<\/a>.\n- * <p>\n- * <strong>Warning:<\/strong>\n- * Serialized objects of this class will not be compatible with\n- * future Swing releases. The current serialization support is\n- * appropriate for short term storage or RMI between applications running\n- * the same version of Swing.  As of 1.4, support for long term storage\n- * of all JavaBeans\n- * has been added to the <code>java.beans<\/code> package.\n- * Please see {@link java.beans.XMLEncoder}.\n- *\n- * @see javax.swing.RootPaneContainer\n- *\n- * @author Arnaud Weber\n- * @since 1.2\n- *\n- * @deprecated The Applet API is deprecated, no replacement.\n- *\/\n-@Deprecated(since = \"9\", forRemoval = true)\n-@JavaBean(defaultProperty = \"JMenuBar\", description = \"Swing's Applet subclass.\")\n-@SwingContainer(delegate = \"getContentPane\")\n-@SuppressWarnings({\"serial\", \"removal\"}) \/\/ Same-version serialization only\n-public class JApplet extends Applet implements Accessible,\n-                                               RootPaneContainer,\n-                               TransferHandler.HasGetTransferHandler\n-{\n-    \/**\n-     * The <code>JRootPane<\/code> instance that manages the\n-     * <code>contentPane<\/code>.\n-     *\n-     * @see #getRootPane\n-     * @see #setRootPane\n-     *\/\n-    protected JRootPane rootPane;\n-\n-    \/**\n-     * If true then calls to <code>add<\/code> and <code>setLayout<\/code>\n-     * will be forwarded to the <code>contentPane<\/code>. This is initially\n-     * false, but is set to true when the <code>JApplet<\/code> is constructed.\n-     *\n-     * @see #isRootPaneCheckingEnabled\n-     * @see #setRootPaneCheckingEnabled\n-     * @see javax.swing.RootPaneContainer\n-     *\/\n-    protected boolean rootPaneCheckingEnabled = false;\n-\n-    \/**\n-     * The <code>TransferHandler<\/code> for this applet.\n-     *\/\n-    private TransferHandler transferHandler;\n-\n-    \/**\n-     * Creates a swing applet instance.\n-     * <p>\n-     * This constructor sets the component's locale property to the value\n-     * returned by <code>JComponent.getDefaultLocale<\/code>.\n-     *\n-     * @throws HeadlessException if GraphicsEnvironment.isHeadless()\n-     * returns true.\n-     * @see java.awt.GraphicsEnvironment#isHeadless\n-     * @see JComponent#getDefaultLocale\n-     *\/\n-    public JApplet() throws HeadlessException {\n-        super();\n-        \/\/ Check the timerQ and restart if necessary.\n-        TimerQueue q = TimerQueue.sharedInstance();\n-        if(q != null) {\n-            q.startIfNeeded();\n-        }\n-\n-        \/* Workaround for bug 4155072.  The shared double buffer image\n-         * may hang on to a reference to this applet; unfortunately\n-         * Image.getGraphics() will continue to call JApplet.getForeground()\n-         * and getBackground() even after this applet has been destroyed.\n-         * So we ensure that these properties are non-null here.\n-         *\/\n-        setForeground(Color.black);\n-        setBackground(Color.white);\n-\n-        setLocale( JComponent.getDefaultLocale() );\n-        setLayout(new BorderLayout());\n-        setRootPane(createRootPane());\n-        setRootPaneCheckingEnabled(true);\n-\n-        setFocusTraversalPolicyProvider(true);\n-        sun.awt.SunToolkit.checkAndSetPolicy(this);\n-\n-        enableEvents(AWTEvent.KEY_EVENT_MASK);\n-    }\n-\n-    \/**\n-     * Called by the constructor methods to create the default rootPane.\n-     *\n-     * @return  a new {@code JRootPane}\n-     *\/\n-    protected JRootPane createRootPane() {\n-        JRootPane rp = new JRootPane();\n-        \/\/ NOTE: this uses setOpaque vs LookAndFeel.installProperty as there\n-        \/\/ is NO reason for the RootPane not to be opaque. For painting to\n-        \/\/ work the contentPane must be opaque, therefore the RootPane can\n-        \/\/ also be opaque.\n-        rp.setOpaque(true);\n-        return rp;\n-    }\n-\n-    \/**\n-     * Sets the {@code transferHandler} property, which is a mechanism to\n-     * support transfer of data into this component. Use {@code null}\n-     * if the component does not support data transfer operations.\n-     * <p>\n-     * If the system property {@code suppressSwingDropSupport} is {@code false}\n-     * (the default) and the current drop target on this component is either\n-     * {@code null} or not a user-set drop target, this method will change the\n-     * drop target as follows: If {@code newHandler} is {@code null} it will\n-     * clear the drop target. If not {@code null} it will install a new\n-     * {@code DropTarget}.\n-     * <p>\n-     * Note: When used with {@code JApplet}, {@code TransferHandler} only\n-     * provides data import capability, as the data export related methods\n-     * are currently typed to {@code JComponent}.\n-     * <p>\n-     * Please see\n-     * <a href=\"https:\/\/docs.oracle.com\/javase\/tutorial\/uiswing\/dnd\/index.html\">\n-     * How to Use Drag and Drop and Data Transfer<\/a>, a section in\n-     * <em>The Java Tutorial<\/em>, for more information.\n-     *\n-     * @param newHandler the new {@code TransferHandler}\n-     *\n-     * @see TransferHandler\n-     * @see #getTransferHandler\n-     * @see java.awt.Component#setDropTarget\n-     * @since 1.6\n-     *\/\n-    @BeanProperty(hidden = true, description\n-            = \"Mechanism for transfer of data into the component\")\n-    public void setTransferHandler(TransferHandler newHandler) {\n-        TransferHandler oldHandler = transferHandler;\n-        transferHandler = newHandler;\n-        SwingUtilities.installSwingDropTargetAsNecessary(this, transferHandler);\n-        firePropertyChange(\"transferHandler\", oldHandler, newHandler);\n-    }\n-\n-    \/**\n-     * Gets the <code>transferHandler<\/code> property.\n-     *\n-     * @return the value of the <code>transferHandler<\/code> property\n-     *\n-     * @see TransferHandler\n-     * @see #setTransferHandler\n-     * @since 1.6\n-     *\/\n-    public TransferHandler getTransferHandler() {\n-        return transferHandler;\n-    }\n-\n-    \/**\n-     * Just calls <code>paint(g)<\/code>.  This method was overridden to\n-     * prevent an unnecessary call to clear the background.\n-     *\/\n-    public void update(Graphics g) {\n-        paint(g);\n-    }\n-\n-   \/**\n-    * Sets the menubar for this applet.\n-    * @param menuBar the menubar being placed in the applet\n-    *\n-    * @see #getJMenuBar\n-    *\/\n-    @BeanProperty(bound = false, hidden = true, description\n-            = \"The menubar for accessing pulldown menus from this applet.\")\n-    public void setJMenuBar(final JMenuBar menuBar) {\n-        getRootPane().setJMenuBar(menuBar);\n-    }\n-\n-   \/**\n-    * Returns the menubar set on this applet.\n-    *\n-    * @return the menubar set on this applet\n-    * @see #setJMenuBar\n-    *\/\n-    public JMenuBar getJMenuBar() {\n-        return getRootPane().getJMenuBar();\n-    }\n-\n-\n-    \/**\n-     * Returns whether calls to <code>add<\/code> and\n-     * <code>setLayout<\/code> are forwarded to the <code>contentPane<\/code>.\n-     *\n-     * @return true if <code>add<\/code> and <code>setLayout<\/code>\n-     *         are forwarded; false otherwise\n-     *\n-     * @see #addImpl\n-     * @see #setLayout\n-     * @see #setRootPaneCheckingEnabled\n-     * @see javax.swing.RootPaneContainer\n-     *\/\n-    protected boolean isRootPaneCheckingEnabled() {\n-        return rootPaneCheckingEnabled;\n-    }\n-\n-\n-    \/**\n-     * Sets whether calls to <code>add<\/code> and\n-     * <code>setLayout<\/code> are forwarded to the <code>contentPane<\/code>.\n-     *\n-     * @param enabled  true if <code>add<\/code> and <code>setLayout<\/code>\n-     *        are forwarded, false if they should operate directly on the\n-     *        <code>JApplet<\/code>.\n-     *\n-     * @see #addImpl\n-     * @see #setLayout\n-     * @see #isRootPaneCheckingEnabled\n-     * @see javax.swing.RootPaneContainer\n-     *\/\n-    @BeanProperty(hidden = true, description\n-            = \"Whether the add and setLayout methods are forwarded\")\n-    protected void setRootPaneCheckingEnabled(boolean enabled) {\n-        rootPaneCheckingEnabled = enabled;\n-    }\n-\n-\n-    \/**\n-     * Adds the specified child <code>Component<\/code>.\n-     * This method is overridden to conditionally forward calls to the\n-     * <code>contentPane<\/code>.\n-     * By default, children are added to the <code>contentPane<\/code> instead\n-     * of the frame, refer to {@link javax.swing.RootPaneContainer} for\n-     * details.\n-     *\n-     * @param comp the component to be enhanced\n-     * @param constraints the constraints to be respected\n-     * @param index the index\n-     * @throws IllegalArgumentException if <code>index<\/code> is invalid\n-     * @throws IllegalArgumentException if adding the container's parent\n-     *                  to itself\n-     * @throws IllegalArgumentException if adding a window to a container\n-     *\n-     * @see #setRootPaneCheckingEnabled\n-     * @see javax.swing.RootPaneContainer\n-     *\/\n-    protected void addImpl(Component comp, Object constraints, int index)\n-    {\n-        if(isRootPaneCheckingEnabled()) {\n-            getContentPane().add(comp, constraints, index);\n-        }\n-        else {\n-            super.addImpl(comp, constraints, index);\n-        }\n-    }\n-\n-    \/**\n-     * Removes the specified component from the container. If\n-     * <code>comp<\/code> is not the <code>rootPane<\/code>, this will forward\n-     * the call to the <code>contentPane<\/code>. This will do nothing if\n-     * <code>comp<\/code> is not a child of the <code>JFrame<\/code> or\n-     * <code>contentPane<\/code>.\n-     *\n-     * @param comp the component to be removed\n-     * @throws NullPointerException if <code>comp<\/code> is null\n-     * @see #add\n-     * @see javax.swing.RootPaneContainer\n-     *\/\n-    public void remove(Component comp) {\n-        if (comp == rootPane) {\n-            super.remove(comp);\n-        } else {\n-            getContentPane().remove(comp);\n-        }\n-    }\n-\n-\n-    \/**\n-     * Sets the <code>LayoutManager<\/code>.\n-     * Overridden to conditionally forward the call to the\n-     * <code>contentPane<\/code>.\n-     * Refer to {@link javax.swing.RootPaneContainer} for\n-     * more information.\n-     *\n-     * @param manager the <code>LayoutManager<\/code>\n-     * @see #setRootPaneCheckingEnabled\n-     * @see javax.swing.RootPaneContainer\n-     *\/\n-    public void setLayout(LayoutManager manager) {\n-        if(isRootPaneCheckingEnabled()) {\n-            getContentPane().setLayout(manager);\n-        }\n-        else {\n-            super.setLayout(manager);\n-        }\n-    }\n-\n-\n-    \/**\n-     * Returns the rootPane object for this applet.\n-     *\n-     * @see #setRootPane\n-     * @see RootPaneContainer#getRootPane\n-     *\/\n-    @BeanProperty(bound = false, hidden = true, description\n-            = \"the RootPane object for this applet.\")\n-    public JRootPane getRootPane() {\n-        return rootPane;\n-    }\n-\n-\n-    \/**\n-     * Sets the rootPane property.  This method is called by the constructor.\n-     * @param root the rootPane object for this applet\n-     *\n-     * @see #getRootPane\n-     *\/\n-    protected void setRootPane(JRootPane root) {\n-        if(rootPane != null) {\n-            remove(rootPane);\n-        }\n-        rootPane = root;\n-        if(rootPane != null) {\n-            boolean checkingEnabled = isRootPaneCheckingEnabled();\n-            try {\n-                setRootPaneCheckingEnabled(false);\n-                add(rootPane, BorderLayout.CENTER);\n-            }\n-            finally {\n-                setRootPaneCheckingEnabled(checkingEnabled);\n-            }\n-        }\n-    }\n-\n-\n-    \/**\n-     * Returns the contentPane object for this applet.\n-     *\n-     * @see #setContentPane\n-     * @see RootPaneContainer#getContentPane\n-     *\/\n-    public Container getContentPane() {\n-        return getRootPane().getContentPane();\n-    }\n-\n-   \/**\n-     * Sets the contentPane property.  This method is called by the constructor.\n-     * @param contentPane the contentPane object for this applet\n-     *\n-     * @throws java.awt.IllegalComponentStateException (a runtime\n-     *            exception) if the content pane parameter is null\n-     * @see #getContentPane\n-     * @see RootPaneContainer#setContentPane\n-     *\/\n-   @BeanProperty(bound = false, hidden = true, description\n-           = \"The client area of the applet where child components are normally inserted.\")\n-    public void setContentPane(Container contentPane) {\n-        getRootPane().setContentPane(contentPane);\n-    }\n-\n-    \/**\n-     * Returns the layeredPane object for this applet.\n-     *\n-     * @throws java.awt.IllegalComponentStateException (a runtime\n-     *            exception) if the layered pane parameter is null\n-     * @see #setLayeredPane\n-     * @see RootPaneContainer#getLayeredPane\n-     *\/\n-    public JLayeredPane getLayeredPane() {\n-        return getRootPane().getLayeredPane();\n-    }\n-\n-    \/**\n-     * Sets the layeredPane property.  This method is called by the constructor.\n-     * @param layeredPane the layeredPane object for this applet\n-     *\n-     * @see #getLayeredPane\n-     * @see RootPaneContainer#setLayeredPane\n-     *\/\n-    @BeanProperty(bound = false, hidden = true, description\n-            = \"The pane which holds the various applet layers.\")\n-    public void setLayeredPane(JLayeredPane layeredPane) {\n-        getRootPane().setLayeredPane(layeredPane);\n-    }\n-\n-    \/**\n-     * Returns the glassPane object for this applet.\n-     *\n-     * @see #setGlassPane\n-     * @see RootPaneContainer#getGlassPane\n-     *\/\n-    public Component getGlassPane() {\n-        return getRootPane().getGlassPane();\n-    }\n-\n-    \/**\n-     * Sets the glassPane property.\n-     * This method is called by the constructor.\n-     * @param glassPane the glassPane object for this applet\n-     *\n-     * @see #getGlassPane\n-     * @see RootPaneContainer#setGlassPane\n-     *\/\n-    @BeanProperty(bound = false, hidden = true, description\n-            = \"A transparent pane used for menu rendering.\")\n-    public void setGlassPane(Component glassPane) {\n-        getRootPane().setGlassPane(glassPane);\n-    }\n-\n-    \/**\n-     * {@inheritDoc}\n-     *\n-     * @since 1.6\n-     *\/\n-    @BeanProperty(bound = false)\n-    public Graphics getGraphics() {\n-        JComponent.getGraphicsInvoked(this);\n-        return super.getGraphics();\n-    }\n-\n-    \/**\n-     * Repaints the specified rectangle of this component within\n-     * <code>time<\/code> milliseconds.  Refer to <code>RepaintManager<\/code>\n-     * for details on how the repaint is handled.\n-     *\n-     * @param     time   maximum time in milliseconds before update\n-     * @param     x    the <i>x<\/i> coordinate\n-     * @param     y    the <i>y<\/i> coordinate\n-     * @param     width    the width\n-     * @param     height   the height\n-     * @see       RepaintManager\n-     * @since     1.6\n-     *\/\n-    public void repaint(long time, int x, int y, int width, int height) {\n-        if (RepaintManager.HANDLE_TOP_LEVEL_PAINT) {\n-            RepaintManager.currentManager(this).addDirtyRegion(\n-                              this, x, y, width, height);\n-        }\n-        else {\n-            super.repaint(time, x, y, width, height);\n-        }\n-    }\n-\n-    \/**\n-     * Returns a string representation of this JApplet. This method\n-     * is intended to be used only for debugging purposes, and the\n-     * content and format of the returned string may vary between\n-     * implementations. The returned string may be empty but may not\n-     * be <code>null<\/code>.\n-     *\n-     * @return  a string representation of this JApplet.\n-     *\/\n-    protected String paramString() {\n-        String rootPaneString = (rootPane != null ?\n-                                 rootPane.toString() : \"\");\n-        String rootPaneCheckingEnabledString = (rootPaneCheckingEnabled ?\n-                                                \"true\" : \"false\");\n-\n-        return super.paramString() +\n-        \",rootPane=\" + rootPaneString +\n-        \",rootPaneCheckingEnabled=\" + rootPaneCheckingEnabledString;\n-    }\n-\n-\n-\n-\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n-\/\/ Accessibility support\n-\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n-\n-    \/**\n-     * {@code AccessibleContext} associated with this {@code JApplet}\n-     *\/\n-    protected AccessibleContext accessibleContext = null;\n-\n-    \/**\n-     * Gets the AccessibleContext associated with this JApplet.\n-     * For JApplets, the AccessibleContext takes the form of an\n-     * AccessibleJApplet.\n-     * A new AccessibleJApplet instance is created if necessary.\n-     *\n-     * @return an AccessibleJApplet that serves as the\n-     *         AccessibleContext of this JApplet\n-     *\/\n-    public AccessibleContext getAccessibleContext() {\n-        if (accessibleContext == null) {\n-            accessibleContext = new AccessibleJApplet();\n-        }\n-        return accessibleContext;\n-    }\n-\n-    \/**\n-     * This class implements accessibility support for the\n-     * <code>JApplet<\/code> class.\n-     *\/\n-    protected class AccessibleJApplet extends AccessibleApplet {\n-\n-        \/**\n-         * Constructs an {@code AccessibleJApplet}.\n-         *\/\n-        protected AccessibleJApplet() {}\n-\n-        \/\/ everything moved to new parent, AccessibleApplet\n-    }\n-}\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JApplet.java","additions":0,"deletions":580,"binary":false,"changes":580,"status":"deleted"},{"patch":"@@ -28,1 +28,0 @@\n-import java.applet.Applet;\n@@ -109,2 +108,1 @@\n- * such as <code>JFrame<\/code>, <code>JDialog<\/code>,\n- * and <code>JApplet<\/code> --\n+ * such as <code>JFrame<\/code> and <code>JDialog<\/code> --\n@@ -626,2 +624,1 @@\n-                if(parent instanceof Window ||\n-                   parent instanceof Applet) {\n+                if(parent instanceof Window) {\n@@ -2841,5 +2838,0 @@\n-     * The default locale has \"AppContext\" scope so that applets (and\n-     * potentially multiple lightweight applications running in a single VM)\n-     * can have their own setting. An applet can safely alter its default\n-     * locale because it will have no affect on other applets (or the browser).\n-     *\n@@ -2868,4 +2860,0 @@\n-     * The default locale has \"AppContext\" scope so that applets (and\n-     * potentially multiple lightweight applications running in a single VM)\n-     * can have their own setting. An applet can safely alter its default\n-     * locale because it will have no affect on other applets (or the browser).\n@@ -3018,2 +3006,1 @@\n-      while (parent != null && !(parent instanceof Window) &&\n-             !(parent instanceof Applet)) {\n+      while (parent != null && !(parent instanceof Window)) {\n@@ -4542,1 +4529,1 @@\n-        if (p == null || p instanceof Window || p instanceof Applet) {\n+        if (p == null || p instanceof Window) {\n@@ -4698,1 +4685,1 @@\n-     * containing <code>Window<\/code> or <code>Applet<\/code>),\n+     * containing <code>Window<\/code>)\n@@ -4709,1 +4696,1 @@\n-            if(p instanceof Window || p instanceof Applet) {\n+            if(p instanceof Window) {\n@@ -5129,1 +5116,1 @@\n-        \/\/ parent Container's up to Window or Applet. First container is\n+        \/\/ parent Container's up to Window. First container is\n@@ -5159,1 +5146,1 @@\n-             c != null && !(c instanceof Window) && !(c instanceof Applet);\n+             c != null && !(c instanceof Window);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JComponent.java","additions":8,"deletions":21,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -1342,2 +1342,1 @@\n-     * called once when running in plugin resulting in the entries only\n-     * appearing in the first applet.\n+     * called once when running in an AppContext.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JEditorPane.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1319,5 +1319,1 @@\n-             * is tested below).  This is necessary for JApplets, because\n-             * because an applet normally isn't made visible until after its\n-             * start() method returns -- if this method is called from start(),\n-             * the applet will appear to hang while an invisible modal frame\n-             * waits for input.\n+             * is tested below).\n@@ -1463,5 +1459,1 @@\n-         * is tested below).  This is necessary for JApplets, because\n-         * because an applet normally isn't made visible until after its\n-         * start() method returns -- if this method is called from start(),\n-         * the applet will appear to hang while an invisible modal frame\n-         * waits for input.\n+         * is tested below).\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JOptionPane.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * <code>JApplet<\/code>, and <code>JInternalFrame<\/code>.\n+ * and <code>JInternalFrame<\/code>.\n@@ -45,1 +45,1 @@\n- * <p style=\"text-align:center\"><img src=\"doc-files\/JRootPane-1.gif\"\n+ * <p style=\"text-align:center\"><img src=\"doc-files\/JRootPane-1.svg\"\n@@ -47,1 +47,1 @@\n- * HEIGHT=484 WIDTH=629><\/p>\n+ * HEIGHT=600 WIDTH=850><\/p>\n@@ -49,11 +49,8 @@\n- * component on the host system) are shown with a darker, heavier box. The four\n- * heavyweight JFC\/Swing containers (<code>JFrame<\/code>, <code>JDialog<\/code>,\n- * <code>JWindow<\/code>, and <code>JApplet<\/code>) are\n- * shown in relation to the AWT classes they extend.\n- * These four components are the\n- * only heavyweight containers in the Swing library. The lightweight container\n- * <code>JInternalFrame<\/code> is also shown.\n- * All five of these JFC\/Swing containers implement the\n- * <code>RootPaneContainer<\/code> interface,\n- * and they all delegate their operations to a\n- * <code>JRootPane<\/code> (shown with a little \"handle\" on top).\n+ * component on the host system) are shown with a heavier box. AWT components in red,\n+ * Swing heavyweights in blue.\n+ * The three heavyweight JFC\/Swing containers ({@code JFrame}, {@code JDialog}, and\n+ * {@code JWindow}) are shown in relation to the AWT classes they extend.\n+ * These three components are the only heavyweight containers in the Swing library.\n+ * The lightweight container {@code JInternalFrame} is also shown in green with thin outline.\n+ * All four of these JFC\/Swing containers implement the {@code RootPaneContainer} interface,\n+ * and they all delegate their operations to a {@code JRootPane}.\n@@ -182,1 +179,0 @@\n- * @see JApplet\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JRootPane.java","additions":11,"deletions":15,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.applet.Applet;\n@@ -6136,2 +6135,1 @@\n-                } else if ((c instanceof Window) ||\n-                           (c instanceof Applet && c.getParent() == null)) {\n+                } else if (c instanceof Window) {\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JTable.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -381,1 +381,1 @@\n-     * ancestors is not a <code>Window<\/code> or <code>Applet<\/code>.\n+     * ancestors is not a <code>Window<\/code>.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JViewport.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.applet.*;\n@@ -136,1 +135,1 @@\n-       * Find the top focusable Window, Applet, or InternalFrame\n+       * Find the top focusable Window, or InternalFrame\n@@ -142,1 +141,1 @@\n-                p instanceof Applet || p instanceof JInternalFrame) {\n+                p instanceof JInternalFrame) {\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/KeyboardManager.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.applet.Applet;\n@@ -291,4 +290,0 @@\n-            if ((OSInfo.getOSType() == OSInfo.OSType.MACOSX) && (owner != null) &&\n-                (EmbeddedFrame.getAppletIfAncestorOf(owner) != null)) {\n-                ((HeavyWeightPopup)popup).setCacheEnabled(false);\n-            }\n@@ -659,6 +654,0 @@\n-                } else if (parent instanceof JApplet) {\n-                    Rectangle parentBounds = parent.getBounds();\n-                    Point p = parent.getLocationOnScreen();\n-                    parentBounds.x = p.x;\n-                    parentBounds.y = p.y;\n-                    result = parentBounds.contains(x, y, popupWidth, popupHeight);\n@@ -820,5 +809,0 @@\n-                } else if (p instanceof JApplet) {\n-                    \/\/ Painting code stops at Applets, we don't want\n-                    \/\/ to add to a Component above an Applet otherwise\n-                    \/\/ you'll never see it painted.\n-                    break;\n@@ -964,1 +948,1 @@\n-            while (!(parent instanceof Window || parent instanceof Applet) &&\n+            while (!(parent instanceof Window) &&\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/PopupFactory.java","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.applet.*;\n@@ -55,2 +54,2 @@\n- * for Swing's top level components (<code>JApplet<\/code>,\n- * <code>JWindow<\/code>, <code>JFrame<\/code> and <code>JDialog<\/code>).\n+ * for Swing's top level components\n+ * (<code>JWindow<\/code>, <code>JFrame<\/code> and <code>JDialog<\/code>).\n@@ -427,1 +426,1 @@\n-        \/* Make sure that c and all it ancestors (up to an Applet or\n+        \/* Make sure that c and all it ancestors (up to a\n@@ -443,1 +442,1 @@\n-            if ((p instanceof Window) || (p instanceof Applet)) {\n+            if (p instanceof Window) {\n@@ -511,22 +510,0 @@\n-    \/**\n-     * Adds <code>applet<\/code> to the list of <code>Component<\/code>s that\n-     * need to be repainted.\n-     *\n-     * @param applet Applet to repaint, null results in nothing happening.\n-     * @param x X coordinate of the region to repaint\n-     * @param y Y coordinate of the region to repaint\n-     * @param w Width of the region to repaint\n-     * @param h Height of the region to repaint\n-     * @see JApplet#repaint\n-     * @since 1.6\n-     *\n-     * @deprecated The Applet API is deprecated. See the\n-     * <a href=\"..\/..\/java\/applet\/package-summary.html\"> java.applet package\n-     * documentation<\/a> for further information.\n-     *\/\n-    @Deprecated(since = \"9\", forRemoval = true)\n-    @SuppressWarnings(\"removal\")\n-    public void addDirtyRegion(Applet applet, int x, int y, int w, int h) {\n-        addDirtyRegion0(applet, x, y, w, h);\n-    }\n-\n@@ -550,4 +527,0 @@\n-            else if (hw instanceof Applet) {\n-                addDirtyRegion((Applet)hw, dirty.x, dirty.y,\n-                               dirty.width, dirty.height);\n-            }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/RepaintManager.java","additions":4,"deletions":31,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * JRootPane child: JDialog, JFrame, JWindow, JApplet, JInternalFrame.\n+ * JRootPane child: JDialog, JFrame, JWindow, JInternalFrame.\n@@ -49,1 +49,1 @@\n- * (such as {@code JFrame}, {@code JDialog}, {@code JWindow}, {@code JApplet},\n+ * (such as {@code JFrame}, {@code JDialog}, {@code JWindow},\n@@ -65,1 +65,1 @@\n- * <code>JApplet<\/code> and <code>JInternalFrame<\/code> is controlled by\n+ * and <code>JInternalFrame<\/code> is controlled by\n@@ -76,1 +76,0 @@\n- * @see JApplet\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/RootPaneContainer.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * is a top level Swing component (JFrame, JWindow, JDialog, JApplet), this\n+ * is a top level Swing component (JFrame, JWindow, JDialog), this\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/SwingPaintEventDispatcher.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-import java.applet.*;\n-\n@@ -428,2 +426,1 @@\n-                } else if(c instanceof java.applet.Applet ||\n-                          c instanceof java.awt.Window) {\n+                } else if(c instanceof java.awt.Window) {\n@@ -446,1 +443,1 @@\n-                if(c instanceof java.awt.Window || c instanceof java.applet.Applet)\n+                if(c instanceof java.awt.Window)\n@@ -468,2 +465,1 @@\n-            }  else if(c instanceof java.applet.Applet ||\n-                       c instanceof java.awt.Window) {\n+            }  else if (c instanceof java.awt.Window) {\n@@ -486,1 +482,1 @@\n-            if(c instanceof java.awt.Window || c instanceof java.applet.Applet)\n+            if(c instanceof java.awt.Window)\n@@ -1658,1 +1654,1 @@\n-     * @return the first ancestor of c that's a Window or the last Applet ancestor\n+     * @return the first ancestor of c that's a Window\n@@ -1662,1 +1658,0 @@\n-        Component applet = null;\n@@ -1667,3 +1662,0 @@\n-            if (p instanceof Applet) {\n-                applet = p;\n-            }\n@@ -1671,1 +1663,1 @@\n-        return applet;\n+        return null;\n@@ -1721,3 +1713,2 @@\n-                if ((component instanceof Applet) ||\n-                    (component instanceof Window)) {\n-                    \/\/ No JComponents, if Window or Applet parent, process\n+                if (component instanceof Window) {\n+                    \/\/ No JComponents, if Window parent, process\n@@ -2205,2 +2196,1 @@\n-     * (either a {@code Frame} or an {@code Applet} object.) Otherwise this\n-     * method returns {@code null}.\n+     * (a {@code Frame}). Otherwise this method returns {@code null}.\n@@ -2240,1 +2230,1 @@\n-            if (c instanceof Window || c instanceof Applet) {\n+            if (c instanceof Window) {\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/SwingUtilities.java","additions":10,"deletions":20,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -177,1 +177,1 @@\n-    \/\/ happen in applet case when TimerQueues thread is destroyed.\n+    \/\/ happen in an AppContext case when TimerQueues thread is destroyed.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/Timer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -806,1 +806,1 @@\n-        } else if (parent instanceof JApplet || parent instanceof JInternalFrame) {\n+        } else if (parent instanceof JInternalFrame) {\n@@ -831,1 +831,1 @@\n-        } else if (parent instanceof JApplet || parent instanceof JInternalFrame) {\n+        } else if (parent instanceof JInternalFrame) {\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/ToolTipManager.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -183,4 +183,2 @@\n-     * scope instead so that applets (and potentially multiple lightweight\n-     * applications running in a single VM) have their own state. For example,\n-     * an applet can alter its look and feel, see <code>setLookAndFeel<\/code>.\n-     * Doing so has no affect on other applets (or the browser).\n+     * scope instead so that potentially multiple lightweight\n+     * applications running in a single VM have their own state.\n@@ -1458,2 +1456,2 @@\n-     * <code>AppContext<\/code> specific LAFState object runs.  When the AppContext\n-     * corresponds to a set of applets it's possible for this method\n+     * <code>AppContext<\/code> specific LAFState object runs.\n+     * In some AppContext cases, it's possible for this method\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/UIManager.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/beaninfo\/images\/JAppletColor16.gif","binary":true,"status":"deleted"},{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/beaninfo\/images\/JAppletColor32.gif","binary":true,"status":"deleted"},{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/beaninfo\/images\/JAppletMono16.gif","binary":true,"status":"deleted"},{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/beaninfo\/images\/JAppletMono32.gif","binary":true,"status":"deleted"},{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/doc-files\/JRootPane-1.gif","binary":true,"status":"deleted"},{"patch":"@@ -0,0 +1,112 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<!--\n+ Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+ This code is free software; you can redistribute it and\/or modify it\n+ under the terms of the GNU General Public License version 2 only, as\n+ published by the Free Software Foundation.  Oracle designates this\n+ particular file as subject to the \"Classpath\" exception as provided\n+ by Oracle in the LICENSE file that accompanied this code.\n+\n+ This code is distributed in the hope that it will be useful, but WITHOUT\n+ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ version 2 for more details (a copy is included in the LICENSE file that\n+ accompanied this code).\n+\n+ You should have received a copy of the GNU General Public License version\n+ 2 along with this work; if not, write to the Free Software Foundation,\n+ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\n+ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ or visit www.oracle.com if you need additional information or have any\n+ questions.\n+-->\n+\n+<svg version=\"1.1\"\n+     width=\"850\" height=\"600\"\n+     xmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n+     xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\">\n+    <style><![CDATA[\n+        text {\n+            font: 20px 'DejaVu Sans', Verdana, Arial, sans-serif;\n+            fill: #000000;\n+        }\n+        text.centered {\n+            text-anchor: middle;\n+            dominant-baseline: middle;\n+        }\n+    ]]><\/style>\n+\n+    <defs>\n+\n+    <g id=\"window\">\n+       <rect id=\"w1\" x=\"10\" y=\"10\" width=\"100\" height=\"60\" fill=\"none\" stroke=\"#ff0000\" stroke-width=\"5\" \/>\n+       <text id=\"t1\" x=\"60\" y=\"40\" class=\"centered\">Window<\/text>\n+    <\/g>\n+\n+    <g id=\"frame\">\n+       <rect id=\"w2\" x=\"10\" y=\"10\" width=\"100\" height=\"60\" fill=\"none\" stroke=\"#ff0000\" stroke-width=\"5\" \/>\n+       <text id=\"t2\" x=\"60\" y=\"40\" class=\"centered\">Frame<\/text>\n+    <\/g>\n+\n+    <g id=\"dialog\">\n+       <rect id=\"w1\" x=\"10\" y=\"10\" width=\"100\" height=\"60\" fill=\"none\" stroke=\"#ff0000\" stroke-width=\"5\" \/>\n+       <text id=\"t1\" x=\"60\" y=\"40\" class=\"centered\">Dialog<\/text>\n+    <\/g>\n+\n+    <g id=\"jframe\">\n+       <rect id=\"w1\" x=\"10\" y=\"10\" width=\"100\" height=\"60\" fill=\"none\" stroke=\"#0000ff\" stroke-width=\"5\" \/>\n+       <text id=\"t1\" x=\"60\" y=\"40\" class=\"centered\">JFrame<\/text>\n+    <\/g>\n+\n+    <g id=\"jdialog\">\n+       <rect id=\"w1\" x=\"10\" y=\"10\" width=\"100\" height=\"60\" fill=\"none\" stroke=\"#0000ff\" stroke-width=\"5\" \/>\n+       <text id=\"t1\" x=\"60\" y=\"40\" class=\"centered\">JDialog<\/text>\n+    <\/g>\n+\n+    <g id=\"jwindow\">\n+       <rect id=\"w1\" x=\"10\" y=\"10\" width=\"100\" height=\"60\" fill=\"none\" stroke=\"#0000ff\" stroke-width=\"5\" \/>\n+       <text id=\"t1\" x=\"60\" y=\"40\" class=\"centered\">JWindow<\/text>\n+    <\/g>\n+\n+    <g id=\"jinternalframe\">\n+       <rect id=\"w1\" x=\"10\" y=\"10\" width=\"160\" height=\"60\" fill=\"none\" stroke=\"#00ff00\" stroke-width=\"2\" \/>\n+       <text id=\"t1\" x=\"90\" y=\"40\" class=\"centered\">JInternalFrame<\/text>\n+    <\/g>\n+\n+    <g id=\"jrootpane\">\n+       <rect id=\"w1\" x=\"10\" y=\"10\" width=\"120\" height=\"60\" fill=\"none\" stroke=\"#00ff00\" stroke-width=\"2\" \/>\n+       <text id=\"t1\" x=\"70\" y=\"40\" class=\"centered\">JRootPane<\/text>\n+    <\/g>\n+\n+    <\/defs>\n+\n+    <use x=\"300\" y=\"10\" xlink:href=\"#window\"\/>\n+    <use x=\"300\" y=\"300\" xlink:href=\"#jwindow\"\/>\n+    <use x=\"10\" y=\"150\" xlink:href=\"#frame\"\/>\n+    <use x=\"10\" y=\"300\" xlink:href=\"#jframe\"\/>\n+    <use x=\"150\" y=\"150\" xlink:href=\"#dialog\"\/>\n+    <use x=\"150\" y=\"300\" xlink:href=\"#jdialog\"\/>\n+    <use x=\"450\" y=\"300\" xlink:href=\"#jinternalframe\"\/>\n+    <use x=\"270\" y=\"450\" xlink:href=\"#jrootpane\"\/>\n+    <line x1=\"10\" y1=\"260\" x2=\"640\" y2=\"260\" stroke=\"#000000\" stroke-width=\"2\" \/>\n+    <line x1=\"10\" y1=\"410\" x2=\"640\" y2=\"410\" stroke=\"#000000\" stroke-width=\"5\" \/>\n+\n+    <line x1=\"70\" y1=\"120\" x2=\"360\" y2=\"120\" stroke=\"#000000\" stroke-width=\"2\" \/>\n+    <line x1=\"70\" y1=\"120\" x2=\"70\" y2=\"160\" stroke=\"#000000\" stroke-width=\"2\" \/>\n+    <line x1=\"210\" y1=\"120\" x2=\"210\" y2=\"160\" stroke=\"#000000\" stroke-width=\"2\" \/>\n+    <line x1=\"70\" y1=\"220\" x2=\"70\" y2=\"310\" stroke=\"#000000\" stroke-width=\"2\" \/>\n+    <line x1=\"210\" y1=\"220\" x2=\"210\" y2=\"310\" stroke=\"#000000\" stroke-width=\"2\" \/>\n+    <line x1=\"360\" y1=\"80\" x2=\"360\" y2=\"310\" stroke=\"#000000\" stroke-width=\"2\" \/>\n+    <line x1=\"340\" y1=\"410\" x2=\"340\" y2=\"460\" stroke=\"#000000\" stroke-width=\"2\" \/>\n+\n+    <text x=\"650\" y=\"150\">AWT classes<\/text>\n+    <text x=\"650\" y=\"300\">Swing classes<\/text>\n+    <text x=\"650\" y=\"330\">implementing the<\/text>\n+    <text x=\"650\" y=\"360\">RootPaneContainer<\/text>\n+    <text x=\"650\" y=\"390\">interface<\/text>\n+\n+<\/svg>\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/doc-files\/JRootPane-1.svg","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -47,2 +47,2 @@\n- * application. Calls to an application's {@code main} method, or methods in\n- * {@code Applet}, are not invoked on the event dispatching thread. As such,\n+ * application. Calls to an application's {@code main} method,\n+ * are not invoked on the event dispatching thread. As such,\n@@ -50,1 +50,1 @@\n- * constructing and showing an application or applet. The preferred way to\n+ * constructing and showing an application. The preferred way to\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/package-info.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-import java.applet.Applet;\n-\n@@ -922,1 +920,1 @@\n-                if (c instanceof Applet || c instanceof Window) {\n+                if (c instanceof Window) {\n@@ -1174,2 +1172,0 @@\n-                    } else if(c instanceof JApplet) {\n-                        invoker = ((JApplet)c).getRootPane();\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicPopupMenuUI.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -64,1 +64,0 @@\n-    exports java.applet;\n","filename":"src\/java.desktop\/share\/classes\/module-info.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n- * The AppContext allows applet access to what would otherwise be\n+ * The AppContext allows a context access to what would otherwise be\n@@ -82,1 +82,1 @@\n- * so that applets and other untrusted code can execute methods on the\n+ * so that untrusted code can execute methods on the\n@@ -107,1 +107,1 @@\n- * within the AppContext \"sandbox\".  For example, say a malicious applet\n+ * within the AppContext \"sandbox\".  For example, say malicious code\n@@ -110,2 +110,2 @@\n- * using AppContexts, the only key events that applet will be able to\n- * listen to are its own.  A more reasonable applet request would be to\n+ * using AppContexts, the only key events that code will be able to\n+ * listen to are its own.  A more reasonable request would be to\n@@ -113,8 +113,2 @@\n- * an AppContext, the applet's look-and-feel will change without\n- * disrupting other applets or potentially the browser itself.<p>\n- *\n- * Because the AppContext is a facility for safely extending application\n- * service support to applets, none of its methods may be blocked by a\n- * a SecurityManager check in a valid Java implementation.  Applets may\n- * therefore safely invoke any of its methods without worry of being\n- * blocked.\n+ * an AppContext, the look-and-feel will change without\n+ * disrupting other contexts.\n@@ -158,1 +152,1 @@\n-       standalone apps only (i.e. not applets)\n+       standalone apps only.\n@@ -286,3 +280,1 @@\n-            \/\/ if no contexts have been created yet. This covers standalone apps\n-            \/\/ and excludes applets because by the time applet starts\n-            \/\/ a number of contexts have already been created by the plugin.\n+            \/\/ if no contexts have been created yet.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/AppContext.java","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.applet.Applet;\n@@ -52,1 +51,1 @@\n- * A generic container used for embedding Java components, usually applets.\n+ * A generic container used for embedding Java components.\n@@ -56,1 +55,1 @@\n- *   firewall, preventing the contained components or applets from using\n+ *   firewall, preventing the contained components from using\n@@ -74,1 +73,1 @@\n-    private KeyboardFocusManager appletKFM;\n+    private KeyboardFocusManager appKFM;\n@@ -142,1 +141,1 @@\n-        \/\/ should be the same as appletKFM\n+        \/\/ should be the same as appKFM\n@@ -145,1 +144,1 @@\n-        appletKFM = KeyboardFocusManager.getCurrentKeyboardFocusManager();\n+        appKFM = KeyboardFocusManager.getCurrentKeyboardFocusManager();\n@@ -147,1 +146,1 @@\n-            addTraversingOutListeners(appletKFM);\n+            addTraversingOutListeners(appKFM);\n@@ -172,1 +171,1 @@\n-     * must call this method on the Applet's AppContext. After that, all the changes\n+     * must call this method on the AppContext. After that, all the changes\n@@ -177,2 +176,2 @@\n-        if (appletKFM != null) {\n-            removeTraversingOutListeners(appletKFM);\n+        if (appKFM != null) {\n+            removeTraversingOutListeners(appKFM);\n@@ -180,1 +179,1 @@\n-        appletKFM = KeyboardFocusManager.getCurrentKeyboardFocusManager();\n+        appKFM = KeyboardFocusManager.getCurrentKeyboardFocusManager();\n@@ -182,1 +181,1 @@\n-            addTraversingOutListeners(appletKFM);\n+            addTraversingOutListeners(appKFM);\n@@ -188,1 +187,1 @@\n-     * KeyboardFocusManager of applet's AppContext. We don't want the KFM to keep\n+     * KeyboardFocusManager of an AppContext. We don't want the KFM to keep\n@@ -194,2 +193,2 @@\n-        if (appletKFM != null) {\n-            addTraversingOutListeners(appletKFM);\n+        if (appKFM != null) {\n+            addTraversingOutListeners(appKFM);\n@@ -202,1 +201,1 @@\n-     * KeyboardFocusManager of applet's AppContext. We don't want the KFM to keep\n+     * KeyboardFocusManager of an AppContext. We don't want the KFM to keep\n@@ -208,2 +207,2 @@\n-        if (appletKFM != null) {\n-            removeTraversingOutListeners(appletKFM);\n+        if (appKFM != null) {\n+            removeTraversingOutListeners(appKFM);\n@@ -514,25 +513,0 @@\n-    \/**\n-     * Checks if the component is in an EmbeddedFrame. If so,\n-     * returns the applet found in the hierarchy or null if\n-     * not found.\n-     * @return the parent applet or {@code null}\n-     * @since 1.6\n-     *\n-     * @deprecated The Applet API is deprecated. See the\n-     * <a href=\"..\/..\/java\/applet\/package-summary.html\"> java.applet package\n-     * documentation<\/a> for further information.\n-     *\/\n-    @Deprecated(since = \"9\", forRemoval = true)\n-    @SuppressWarnings(\"removal\")\n-    public static Applet getAppletIfAncestorOf(Component comp) {\n-        Container parent = comp.getParent();\n-        Applet applet = null;\n-        while (parent != null && !(parent instanceof EmbeddedFrame)) {\n-            if (parent instanceof Applet) {\n-                applet = (Applet)parent;\n-            }\n-            parent = parent.getParent();\n-        }\n-        return parent == null ? null : applet;\n-    }\n-\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/EmbeddedFrame.java","additions":17,"deletions":43,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -270,2 +270,1 @@\n-     * new ThreadGroup.  Browser code, for example, would use this\n-     * method to create an AppContext & EventQueue for an Applet.\n+     * new ThreadGroup.\n@@ -1638,3 +1637,0 @@\n-     * This could be stored per-app context which would work\n-     * for different applets, but wouldn't help for a single application\n-     * using GTK and some other L&F concurrently.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/SunToolkit.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -47,3 +47,3 @@\n- * use of particular time values by multiple applets will cause\n- * confusing results.  For example, if plugin runs two applets\n- * simultaneously, the initTime for those applets will collide\n+ * use of particular time values by multiple AppContexts will cause\n+ * confusing results.  For example, if two contexts run\n+ * simultaneously, the initTime for those will collide\n@@ -52,1 +52,1 @@\n- * To automatically track startup performance in an app or applet,\n+ * To automatically track startup performance in an app\n@@ -170,1 +170,1 @@\n-     * during the startup of a Java applet or application.  This time is\n+     * during the startup of an application.  This time is\n@@ -172,1 +172,1 @@\n-     * time and other events in the system (such as an applet's init time).\n+     * time and other events in the system.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/util\/PerformanceLogger.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2484,1 +2484,1 @@\n-     * running in an applet\/browser\/Java plugin environment these new fonts\n+     * in an AppContext environment these new fonts\n@@ -2505,1 +2505,1 @@\n-     * If _usingAlternateComposites is true, we are not in an \"applet\"\n+     * If _usingAlternateComposites is true, we are not in an \"AppContext\"\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/SunFontManager.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1444,1 +1444,1 @@\n-            \/\/ applets, embedded, etc - translate directly\n+            \/\/ embedded, etc - translate directly\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XWindow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -256,2 +256,2 @@\n-     *     container at the moment when it is blocked, for example,\n-     *     when running an applet in IE. Then the call to this method\n+     *     container at the moment when it is blocked.\n+     *     Then the call to this method\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WEmbeddedFrame.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -131,2 +131,1 @@\n-    \/\/ MouseHookProc but installed on non-toolkit threads, for\n-    \/\/ example on browser's thread when running in Java Plugin\n+    \/\/ MouseHookProc but installed on non-toolkit threads\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Dialog.h","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n- * (which could include the browser, in the case of applets)\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_GDIObject.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1789,2 +1789,2 @@\n-    \/* This code is rarely used now. It used to be invoked by Java plugin browser\n-     * printing. Today embedded frames are used only when a toolkit such as SWT\n+    \/* This code is rarely used now.\n+     * Today embedded frames are used only when a toolkit such as SWT\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_PrintJob.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -781,0 +781,2 @@\n+jdk\/internal\/loader\/URLClassPath\/ClassnameCharTest.java         8358729 generic-all\n+\n","filename":"test\/jdk\/ProblemList.txt","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,123 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @key headful\n- * @bug 6683728\n- * @summary Tests that a JApplet in a translucent JFrame works properly\n- * @compile -XDignore.symbol.file=true TranslucentJAppletTest.java\n- * @run main\/othervm -Dsun.java2d.uiScale=1 TranslucentJAppletTest\n- *\/\n-\n-import java.awt.*;\n-import java.awt.image.*;\n-\n-import javax.swing.*;\n-\n-public class TranslucentJAppletTest {\n-\n-    private static volatile GraphicsConfiguration graphicsConfig = null;\n-    private static JFrame frame;\n-    private static volatile boolean paintComponentCalled = false;\n-\n-    private static void initAndShowGUI() {\n-        frame = new JFrame(graphicsConfig);\n-        JApplet applet = new JApplet();\n-        applet.setBackground(new Color(0, 0, 0, 0));\n-        JPanel panel = new JPanel() {\n-            protected void paintComponent(Graphics g) {\n-                paintComponentCalled = true;\n-                g.setColor(Color.RED);\n-                g.fillOval(0, 0, getWidth(), getHeight());\n-            }\n-        };\n-        panel.setDoubleBuffered(false);\n-        panel.setOpaque(false);\n-        applet.add(panel);\n-        frame.add(applet);\n-        frame.setBounds(100, 100, 200, 200);\n-        frame.setUndecorated(true);\n-        frame.setBackground(new Color(0, 0, 0, 0));\n-        frame.setVisible(true);\n-    }\n-\n-    public static void main(String[] args)\n-        throws Exception\n-    {\n-\n-        final GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n-        for (GraphicsDevice gd : ge.getScreenDevices()) {\n-            if (gd.isWindowTranslucencySupported(\n-                        GraphicsDevice.WindowTranslucency.PERPIXEL_TRANSLUCENT))\n-            {\n-                for (GraphicsConfiguration gc : gd.getConfigurations()) {\n-                    if (gc.isTranslucencyCapable()) {\n-                        graphicsConfig = gc;\n-                        break;\n-                    }\n-                }\n-            }\n-            if (graphicsConfig != null) {\n-                break;\n-            }\n-        }\n-        if (graphicsConfig == null) {\n-            System.out.println(\"The system does not support translucency. Consider the test passed.\");\n-            return;\n-        }\n-\n-        Robot r = new Robot();\n-        Color color1 = r.getPixelColor(100, 100); \/\/ (0, 0) in frame coordinates\n-\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-            public void run() {\n-                initAndShowGUI();\n-            }\n-        });\n-        r.waitForIdle();\n-\n-        if (!paintComponentCalled) {\n-            throw new RuntimeException(\"Test FAILED: panel's paintComponent() method is not called\");\n-        }\n-        Thread.sleep(1500);\n-\n-        Color newColor1 = r.getPixelColor(100, 100);\n-        Color newColor2 = r.getPixelColor(200, 200);\n-\n-        \/\/ Frame must be transparent at (100, 100) in screen coords\n-        if (!color1.equals(newColor1)) {\n-            System.err.println(\"color1 = \" + color1);\n-            System.err.println(\"newColor1 = \" + newColor1);\n-            throw new RuntimeException(\"Test FAILED: frame pixel at (0, 0) is not transparent\");\n-        }\n-\n-        \/\/ Frame must be RED at (200, 200) in screen coords\n-        if (!newColor2.equals(Color.RED)) {\n-            System.err.println(\"newColor2 = \" + newColor2);\n-            throw new RuntimeException(\"Test FAILED: frame pixel at (100, 100) is not red (transparent?)\");\n-        }\n-\n-        System.out.println(\"Test PASSED\");\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/Window\/TranslucentJAppletTest\/TranslucentJAppletTest.java","additions":0,"deletions":123,"binary":false,"changes":123,"status":"deleted"},{"patch":"@@ -1,93 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.applet.Applet;\n-import java.awt.AWTException;\n-import java.awt.BufferCapabilities;\n-import java.awt.BufferCapabilities.FlipContents;\n-import java.awt.Frame;\n-import java.awt.ImageCapabilities;\n-import java.util.HashSet;\n-import java.util.Set;\n-\n-import sun.awt.AWTAccessor;\n-import sun.awt.AWTAccessor.ComponentAccessor;\n-\n-import static java.awt.BufferCapabilities.FlipContents.BACKGROUND;\n-import static java.awt.BufferCapabilities.FlipContents.COPIED;\n-import static java.awt.BufferCapabilities.FlipContents.PRIOR;\n-import static java.awt.BufferCapabilities.FlipContents.UNDEFINED;\n-\n-\/**\n- * @test\n- * @key headful\n- * @bug 8130390 8134732\n- * @summary Applet fails to launch on virtual desktop\n- * @modules java.desktop\/sun.awt\n- * @author Semyon Sadetsky\n- *\/\n-public final class AppletFlipBuffer {\n-\n-    static final ImageCapabilities[] ics = {new ImageCapabilities(true),\n-                                            new ImageCapabilities(false)};\n-    static final FlipContents[] cntx = {UNDEFINED, BACKGROUND, PRIOR, COPIED};\n-    static final Set<BufferCapabilities> bcs = new HashSet<>();\n-\n-    static {\n-        for (final ImageCapabilities icFront : ics) {\n-            for (final ImageCapabilities icBack : ics) {\n-                for (final FlipContents cnt : cntx) {\n-                    bcs.add(new BufferCapabilities(icFront, icBack, cnt));\n-                }\n-            }\n-        }\n-    }\n-\n-    public static void main(final String[] args) throws Exception {\n-        Applet applet = new Applet();\n-        Frame frame = new Frame();\n-        try {\n-            frame.setSize(10, 10);\n-            frame.add(applet);\n-            frame.setUndecorated(true);\n-            frame.setVisible(true);\n-            test(applet);\n-            System.out.println(\"ok\");\n-        } finally {\n-            frame.dispose();\n-        }\n-    }\n-\n-    private static void test(final Applet applet) {\n-        ComponentAccessor acc = AWTAccessor.getComponentAccessor();\n-        for (int i = 1; i < 10; ++i) {\n-            for (final BufferCapabilities caps : bcs) {\n-                try {\n-                    acc.createBufferStrategy(applet, i, caps);\n-                } catch (final AWTException ignored) {\n-                    \/\/ this kind of buffer strategy is not supported\n-                }\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/applet\/Applet\/AppletFlipBuffer.java","additions":0,"deletions":93,"binary":false,"changes":93,"status":"deleted"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.applet.Applet;\n-import java.awt.HeadlessException;\n-\n-\/*\n- * @test\n- * @summary Check HeadlessException occurrence when trying to create Applet\n- *          in headless mode\n- * @run main\/othervm -Djava.awt.headless=true HeadlessApplet\n- *\/\n-\n-public class HeadlessApplet {\n-\n-    public static void main(String args[]) {\n-        boolean noExceptions = true;\n-\n-        try {\n-            Applet a = new Applet();\n-        } catch (HeadlessException e) {\n-            noExceptions = false;\n-        }\n-\n-        if (noExceptions) {\n-            throw new RuntimeException(\"No HeadlessException occured when creating Applet in headless mode\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/applet\/Applet\/HeadlessApplet.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -44,1 +44,0 @@\n-import javax.swing.JApplet;\n@@ -64,1 +63,1 @@\n-        test(null, JApplet.class, JButton.class, JCheckBox.class);\n+        test(null, JButton.class, JCheckBox.class);\n","filename":"test\/jdk\/java\/beans\/Introspector\/4520754\/Test4520754.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run main\/manual TestIntrospector\n+ * @run main TestIntrospector\n@@ -46,1 +46,0 @@\n-            javax.swing.JApplet.class,\n","filename":"test\/jdk\/java\/beans\/Performance\/TestIntrospector.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import javax.swing.JApplet;\n@@ -73,1 +72,0 @@\n-            JApplet.class,\n","filename":"test\/jdk\/java\/beans\/PropertyChangeSupport\/Test4682386.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,112 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.applet.AudioClip;\n-import java.io.ByteArrayInputStream;\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.nio.file.Files;\n-import java.util.ArrayList;\n-import java.util.LinkedList;\n-import java.util.List;\n-\n-import javax.sound.sampled.AudioFileFormat;\n-import javax.sound.sampled.AudioFormat;\n-import javax.sound.sampled.AudioInputStream;\n-import javax.sound.sampled.AudioSystem;\n-\n-import static javax.sound.sampled.AudioFileFormat.Type.AIFC;\n-import static javax.sound.sampled.AudioFileFormat.Type.AIFF;\n-import static javax.sound.sampled.AudioFileFormat.Type.AU;\n-import static javax.sound.sampled.AudioFileFormat.Type.SND;\n-import static javax.sound.sampled.AudioFileFormat.Type.WAVE;\n-\n-\/**\n- * @test\n- * @bug 8204454\n- * @summary URL.getContent() should return AudioClip for supported formats\n- * @run main\/othervm -Xmx128m AudioContentHandlers\n- *\/\n-public final class AudioContentHandlers {\n-\n-    private static final List<AudioFormat> formats = new ArrayList<>();\n-\n-    private static final AudioFormat.Encoding[] encodings =\n-            {AudioFormat.Encoding.ALAW, AudioFormat.Encoding.ULAW,\n-                    AudioFormat.Encoding.PCM_SIGNED,\n-                    AudioFormat.Encoding.PCM_UNSIGNED,\n-                    AudioFormat.Encoding.PCM_FLOAT};\n-\n-    private static final AudioFileFormat.Type[] types =\n-            {WAVE, AU, AIFF, AIFC, SND};\n-\n-    static {\n-        for (final AudioFormat.Encoding enc : encodings) {\n-            formats.add(new AudioFormat(enc, 44100, 8, 1, 1, 44100, true));\n-            formats.add(new AudioFormat(enc, 44100, 8, 1, 1, 44100, false));\n-        }\n-    }\n-\n-    public static void main(final String[] args) throws Exception {\n-        for (final AudioFileFormat.Type type : types) {\n-            for (final AudioFormat format : formats) {\n-                File file = new File(\"audio.\" + type.getExtension());\n-                try {\n-                    AudioSystem.write(getStream(format), type, file);\n-                } catch (IOException | IllegalArgumentException ignored) {\n-                    continue;\n-                }\n-                AudioClip content;\n-                try {\n-                    content = (AudioClip) file.toURL().getContent();\n-                    \/\/ We need to generate OOM because the stream in AudioClip\n-                    \/\/ will be closed in finalize().\n-                    generateOOME();\n-                } finally {\n-                    Files.delete(file.toPath());\n-                }\n-                if (content == null) {\n-                    throw new RuntimeException(\"Content is null\");\n-                }\n-            }\n-        }\n-    }\n-\n-    private static AudioInputStream getStream(final AudioFormat format) {\n-        final InputStream in = new ByteArrayInputStream(new byte[100]);\n-        return new AudioInputStream(in, format, 10);\n-    }\n-\n-    private static void generateOOME() throws Exception {\n-        List<Object> leak = new LinkedList<>();\n-        try {\n-            while (true) {\n-                leak.add(new byte[1024 * 1024]);\n-            }\n-        } catch (OutOfMemoryError ignored) {\n-        }\n-        \/\/ Give the GC a chance at that weakref in case of slow systems\n-        Thread.sleep(2000);\n-    }\n-}\n","filename":"test\/jdk\/javax\/sound\/sampled\/Clip\/AudioContentHandlers.java","additions":0,"deletions":112,"binary":false,"changes":112,"status":"deleted"},{"patch":"@@ -1,128 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.applet.AudioClip;\n-import java.io.ByteArrayInputStream;\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.nio.file.Files;\n-import java.util.concurrent.TimeUnit;\n-\n-import javax.sound.sampled.AudioFileFormat.Type;\n-import javax.sound.sampled.AudioFormat;\n-import javax.sound.sampled.AudioInputStream;\n-import javax.sound.sampled.AudioSystem;\n-\n-import static javax.sound.sampled.AudioFormat.Encoding.PCM_SIGNED;\n-import static javax.sound.sampled.AudioSystem.NOT_SPECIFIED;\n-\n-\/**\n- * @test\n- * @bug 8202264\n- *\/\n-public final class AutoCloseTimeCheck {\n-\n-    public static void main(final String[] args) throws Exception {\n-        \/\/ Prepare the audio file\n-        File file = new File(\"audio.wav\");\n-        try {\n-            AudioFormat format =\n-                    new AudioFormat(PCM_SIGNED, 44100, 8, 1, 1, 44100, false);\n-            AudioSystem.write(getStream(format), Type.WAVE, file);\n-        } catch (final Exception ignored) {\n-            return; \/\/ the test is not applicable\n-        }\n-        try {\n-            testSmallDelay(file);\n-            testBigDelay(file);\n-        } finally {\n-            Files.delete(file.toPath());\n-        }\n-    }\n-\n-    \/**\n-     * Checks that after a big period of non-activity the clip will be closed\n-     * and the \"Direct Clip\" thread will stop.\n-     *\/\n-    private static void testBigDelay(final File file) throws Exception {\n-        AudioClip clip = (AudioClip) file.toURL().getContent();\n-        clip.loop();\n-        clip.stop();\n-        sleep(20000); \/\/ 20 sec for slow systems\n-        if (count() != 0) {\n-            throw new RuntimeException(\"Thread was found\");\n-        }\n-    }\n-\n-    \/**\n-     * Checks that after small period of non-activity the clip will not be\n-     * closed and the \"Direct Clip\" thread will alive.\n-     *\/\n-    private static void testSmallDelay(final File file) throws IOException {\n-        AudioClip clip = (AudioClip) file.toURL().getContent();\n-        long threadID = 0;\n-        \/\/ Will run the test no more than 15 seconds\n-        long endtime = System.nanoTime() + TimeUnit.SECONDS.toNanos(15);\n-        while (endtime - System.nanoTime() > 0) {\n-            clip.loop();\n-            sleep(500);\n-\n-            long data = count();\n-            if (data != threadID) {\n-                System.out.println(\"Playing on new thread: \" + data + \" at \"\n-                                           + new java.util.Date());\n-                if (threadID == 0) {\n-                    threadID = data;\n-                } else {\n-                    throw new RuntimeException(\"Thread was changed\");\n-                }\n-            }\n-\n-            clip.stop();\n-            sleep(500);\n-        }\n-    }\n-\n-    private static void sleep(int millis) {\n-        try {\n-            Thread.sleep(millis);\n-        } catch (InterruptedException ignored) {\n-        }\n-    }\n-\n-    private static long count() {\n-        for (final Thread t : Thread.getAllStackTraces().keySet()) {\n-            if (t.getName().equals(\"Direct Clip\")) {\n-                return t.getId();\n-            }\n-        }\n-        return 0;\n-    }\n-\n-    private static AudioInputStream getStream(final AudioFormat format) {\n-        final int dataSize = 5000 * format.getFrameSize();\n-        final InputStream in = new ByteArrayInputStream(new byte[dataSize]);\n-        return new AudioInputStream(in, format, NOT_SPECIFIED);\n-    }\n-}\n","filename":"test\/jdk\/javax\/sound\/sampled\/Clip\/AutoCloseTimeCheck.java","additions":0,"deletions":128,"binary":false,"changes":128,"status":"deleted"},{"patch":"@@ -1,95 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import static javax.sound.sampled.AudioFormat.Encoding.PCM_SIGNED;\n-import static javax.sound.sampled.AudioSystem.NOT_SPECIFIED;\n-\n-import javax.sound.sampled.AudioFileFormat;\n-import javax.sound.sampled.AudioFormat;\n-import javax.sound.sampled.AudioInputStream;\n-import javax.sound.sampled.AudioSystem;\n-import javax.sound.sampled.Clip;\n-import javax.sound.sampled.DataLine;\n-import java.applet.AudioClip;\n-import java.io.ByteArrayInputStream;\n-import java.io.File;\n-import java.io.InputStream;\n-import java.nio.file.Files;\n-\n-\/*\n- * @test\n- * @key headful\n- * @bug 8279673\n- * @summary Verify no NPE creating threads\n- * @run main\/othervm DataPusherThreadCheck\n- *\/\n-public class DataPusherThreadCheck {\n-\n-    public static void main(String[] args) throws Exception {\n-        \/\/ Prepare the audio file\n-        File file = new File(\"audio.wav\");\n-        try {\n-            AudioFormat format =\n-                    new AudioFormat(PCM_SIGNED, 44100, 8, 1, 1, 44100, false);\n-            DataLine.Info info = new DataLine.Info(Clip.class, format);\n-            if (!(AudioSystem.isLineSupported(info)) ) {\n-                return; \/\/ the test is not applicable\n-            }\n-            int dataSize = 6000*1000 * format.getFrameSize();\n-            InputStream in = new ByteArrayInputStream(new byte[dataSize]);\n-            AudioInputStream audioStream = new AudioInputStream(in, format, NOT_SPECIFIED);\n-            AudioSystem.write(audioStream, AudioFileFormat.Type.WAVE, file);\n-        } catch (Exception ignored) {\n-            return; \/\/ the test is not applicable\n-        }\n-        try {\n-            checkThread(file);\n-        } finally {\n-            Files.delete(file.toPath());\n-        }\n-    }\n-\n-    private static void checkThread(File file) throws Exception {\n-        AudioClip clip = (AudioClip) file.toURL().getContent();\n-        clip.loop();\n-        try {\n-            Thread.sleep(2000);\n-        } catch (InterruptedException ignored) {\n-        }\n-        boolean found = isDataPushedThreadExist();\n-        clip.stop();\n-        if (!found) {\n-            throw new RuntimeException(\"Thread 'DataPusher' isn't found\");\n-        }\n-    }\n-\n-    private static boolean isDataPushedThreadExist() {\n-        for (Thread t : Thread.getAllStackTraces().keySet()) {\n-            if (t.getName().equals(\"DataPusher\")) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-}\n","filename":"test\/jdk\/javax\/sound\/sampled\/Clip\/DataPusherThreadCheck.java","additions":0,"deletions":95,"binary":false,"changes":95,"status":"deleted"},{"patch":"@@ -1,44 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import javax.swing.JApplet;\n-import java.awt.HeadlessException;\n-\n-\/*\n- * @test\n- * @summary Check that JApplet constructor throws HeadlessException in headless mode\n- * @run main\/othervm -Djava.awt.headless=true HeadlessJApplet\n- *\/\n-\n-public class HeadlessJApplet {\n-    public static void main(String args[]) {\n-        boolean exceptions = false;\n-        try {\n-            new JApplet();\n-        } catch (HeadlessException e) {\n-            exceptions = true;\n-        }\n-        if (!exceptions)\n-            throw new RuntimeException(\"HeadlessException did not occur when expected\");\n-    }\n-}\n","filename":"test\/jdk\/javax\/swing\/Headless\/HeadlessJApplet.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"}]}