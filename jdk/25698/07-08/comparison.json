{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.io.FileOutputStream;\n@@ -37,0 +38,1 @@\n+import javax.sound.SoundClip;\n@@ -104,2 +106,3 @@\n-    public static JavaSoundAudioClip create(final URLConnection uc) {\n-        JavaSoundAudioClip clip = new JavaSoundAudioClip();\n+    \/* Used [only] by sun.awt.www.content.MultiMediaContentHandlers *\/\n+    public static SoundClip create(final URLConnection uc) {\n+        File tmpFile = null;\n@@ -107,3 +110,3 @@\n-            clip.init(uc.getInputStream());\n-        } catch (final Exception ignored) {\n-            \/\/ Playing the clip will be a no-op if an exception occured in inititialization.\n+            tmpFile = File.createTempFile(\"javaurl\", \".aud\");\n+        } catch (IOException e) {\n+            return null;\n@@ -111,1 +114,14 @@\n-        return clip;\n+\n+        try (InputStream in = uc.getInputStream();\n+             FileOutputStream out = new FileOutputStream(tmpFile)) {\n+             in.transferTo(out);\n+        } catch (IOException e) {\n+        }\n+\n+        try {\n+             return SoundClip.createSoundClip(tmpFile);\n+        } catch (IOException e) {\n+        } finally {\n+            tmpFile.delete();\n+        }\n+        return null;\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/JavaSoundAudioClip.java","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import javax.sound.SoundClip;\n+import javax.sound.sampled.AudioFileFormat;\n+import javax.sound.sampled.AudioFormat;\n+import javax.sound.sampled.AudioInputStream;\n+import javax.sound.sampled.AudioSystem;\n+\n+import static javax.sound.sampled.AudioFileFormat.Type.AIFC;\n+import static javax.sound.sampled.AudioFileFormat.Type.AIFF;\n+import static javax.sound.sampled.AudioFileFormat.Type.AU;\n+import static javax.sound.sampled.AudioFileFormat.Type.SND;\n+import static javax.sound.sampled.AudioFileFormat.Type.WAVE;\n+\n+\/**\n+ * @test\n+ * @bug 8204454 8359053\n+ * @summary URL.getContent() should return SoundClip for supported formats\n+ * @run main\/othervm -Xmx128m AudioContentHandlers\n+ *\/\n+public final class AudioContentHandlers {\n+\n+    private static final List<AudioFormat> formats = new ArrayList<>();\n+\n+    private static final AudioFormat.Encoding[] encodings =\n+            {AudioFormat.Encoding.ALAW, AudioFormat.Encoding.ULAW,\n+                    AudioFormat.Encoding.PCM_SIGNED,\n+                    AudioFormat.Encoding.PCM_UNSIGNED,\n+                    AudioFormat.Encoding.PCM_FLOAT};\n+\n+    private static final AudioFileFormat.Type[] types =\n+            {WAVE, AU, AIFF, AIFC, SND};\n+\n+    static {\n+        for (final AudioFormat.Encoding enc : encodings) {\n+            formats.add(new AudioFormat(enc, 44100, 8, 1, 1, 44100, true));\n+            formats.add(new AudioFormat(enc, 44100, 8, 1, 1, 44100, false));\n+        }\n+    }\n+\n+    public static void main(final String[] args) throws Exception {\n+        for (final AudioFileFormat.Type type : types) {\n+            for (final AudioFormat format : formats) {\n+                File file = new File(\"audio.\" + type.getExtension());\n+                try {\n+                    AudioSystem.write(getStream(format), type, file);\n+                } catch (IOException | IllegalArgumentException ignored) {\n+                    continue;\n+                }\n+                SoundClip content;\n+                try {\n+                    content = (SoundClip) file.toURL().getContent();\n+                    \/\/ We need to generate OOM because the stream in SoundClip\n+                    \/\/ will be closed in finalize().\n+                    generateOOME();\n+                } finally {\n+                    Files.delete(file.toPath());\n+                }\n+                if (content == null) {\n+                    throw new RuntimeException(\"Content is null\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private static AudioInputStream getStream(final AudioFormat format) {\n+        final InputStream in = new ByteArrayInputStream(new byte[100]);\n+        return new AudioInputStream(in, format, 10);\n+    }\n+\n+    private static void generateOOME() throws Exception {\n+        List<Object> leak = new LinkedList<>();\n+        try {\n+            while (true) {\n+                leak.add(new byte[1024 * 1024]);\n+            }\n+        } catch (OutOfMemoryError ignored) {\n+        }\n+        \/\/ Give the GC a chance at that weakref in case of slow systems\n+        Thread.sleep(2000);\n+    }\n+}\n","filename":"test\/jdk\/javax\/sound\/sampled\/Clip\/AudioContentHandlers.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"}]}