{"files":[{"patch":"@@ -149,7 +149,1 @@\n-    \/\/ -nowarn is retained for command-line backward compatibility\n-    NOWARN(\"-nowarn\", \"opt.nowarn\", STANDARD, BASIC) {\n-        @Override\n-        public void process(OptionHelper helper, String option) {\n-            helper.put(\"-Xlint:none\", option);\n-        }\n-    },\n+    NOWARN(\"-nowarn\", \"opt.nowarn\", STANDARD, BASIC),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/Option.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-    Generate no warnings\n+    Generate only mandatory warnings\n@@ -171,1 +171,1 @@\n-    Enable recommended warnings\n+    Enable recommended lint warning categories\n@@ -173,1 +173,1 @@\n-    Enable all warnings\n+    Enable all lint warning categories\n@@ -175,1 +175,1 @@\n-    Disable all warnings\n+    Disable all lint warning categories\n@@ -180,1 +180,1 @@\n-    Warnings to enable or disable, separated by comma.\\n\\\n+    Lint warning categories to enable or disable, separated by comma.\\n\\\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/javac.properties","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -370,1 +370,1 @@\n-            this.emitWarnings = options.isUnset(XLINT_CUSTOM, \"none\");\n+            this.emitWarnings = options.isUnset(NOWARN);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Log.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,6 +2,9 @@\n- * @test  \/nodynamiccopyright\/\n- * @bug 6183484\n- * @summary verify -nowarn is the same as -Xlint:none\n- * @compile\/ref=NoWarn1.out -XDrawDiagnostics             NoWarn.java\n- * @compile\/ref=NoWarn2.out -XDrawDiagnostics -nowarn     NoWarn.java\n- * @compile\/ref=NoWarn2.out -XDrawDiagnostics -Xlint:none NoWarn.java\n+ * @test \/nodynamiccopyright\/\n+ * @bug 6183484 8352612\n+ * @summary Restrict -Xlint:none to affect only lint categories, while -nowarn disables all warnings\n+ * @compile\/ref=NoWarn1.out -XDfind=diamond -XDrawDiagnostics -Xlint:none                           NoWarn.java\n+ * @compile\/ref=NoWarn2.out -XDfind=diamond -XDrawDiagnostics -Xlint:divzero,unchecked              NoWarn.java\n+ * @compile\/ref=NoWarn2.out -XDfind=diamond -XDrawDiagnostics -Xlint:none,divzero,unchecked         NoWarn.java\n+ * @compile\/ref=NoWarn3.out -XDfind=diamond -XDrawDiagnostics -Xlint:none                   -nowarn NoWarn.java\n+ * @compile\/ref=NoWarn4.out -XDfind=diamond -XDrawDiagnostics -Xlint:divzero,unchecked      -nowarn NoWarn.java\n+ * @compile\/ref=NoWarn4.out -XDfind=diamond -XDrawDiagnostics -Xlint:none,divzero,unchecked -nowarn NoWarn.java\n@@ -9,1 +12,1 @@\n-\n+import java.util.*;\n@@ -11,4 +14,6 @@\n-    void m(Object... args) { }\n-    void foo() {\n-        m(null);\n-    }\n+    Set<?> z = null;                        \/\/ Mandatory  Lint  Lint Category   How can it be suppressed?\n+                                            \/\/ ---------  ----  -------------   -------------------------\n+    sun.misc.Unsafe b;                      \/\/    Yes      No        N\/A        Not possible\n+    Set<String> a = new HashSet<String>();  \/\/    No       No        N\/A        \"-nowarn\" only (requires -XDfind=diamond)\n+    Set<String> d = (Set<String>)z;         \/\/    Yes      Yes    \"unchecked\"   \"-Xlint:-unchecked\" only\n+    int c = 1\/0;                            \/\/    No       Yes    \"divzero\"     \"-Xlint:-divzero\" or \"-nowarn\"\n","filename":"test\/langtools\/tools\/javac\/lint\/NoWarn.java","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1,2 +1,5 @@\n-NoWarn.java:13:11: compiler.warn.inexact.non-varargs.call: java.lang.Object, java.lang.Object[]\n-1 warning\n+NoWarn.java:16:13: compiler.warn.sun.proprietary: sun.misc.Unsafe\n+NoWarn.java:17:32: compiler.warn.diamond.redundant.args\n+- compiler.note.unchecked.filename: NoWarn.java\n+- compiler.note.unchecked.recompile\n+2 warnings\n","filename":"test\/langtools\/tools\/javac\/lint\/NoWarn1.out","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,5 @@\n+NoWarn.java:16:13: compiler.warn.sun.proprietary: sun.misc.Unsafe\n+NoWarn.java:18:34: compiler.warn.prob.found.req: (compiler.misc.unchecked.cast.to.type), java.util.Set<compiler.misc.type.captureof: 1, ?>, java.util.Set<java.lang.String>\n+NoWarn.java:19:15: compiler.warn.div.zero\n+NoWarn.java:17:35: compiler.warn.diamond.redundant.args\n+4 warnings\n","filename":"test\/langtools\/tools\/javac\/lint\/NoWarn2.out","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,4 @@\n+NoWarn.java:16:13: compiler.warn.sun.proprietary: sun.misc.Unsafe\n+- compiler.note.unchecked.filename: NoWarn.java\n+- compiler.note.unchecked.recompile\n+1 warning\n","filename":"test\/langtools\/tools\/javac\/lint\/NoWarn3.out","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+NoWarn.java:16:13: compiler.warn.sun.proprietary: sun.misc.Unsafe\n+NoWarn.java:18:34: compiler.warn.prob.found.req: (compiler.misc.unchecked.cast.to.type), java.util.Set<compiler.misc.type.captureof: 1, ?>, java.util.Set<java.lang.String>\n+2 warnings\n","filename":"test\/langtools\/tools\/javac\/lint\/NoWarn4.out","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -9,1 +9,1 @@\n- * @compile -Werror -Xlint:none Warn1.java\n+ * @compile -Werror -nowarn Warn1.java\n","filename":"test\/langtools\/tools\/javac\/varargs\/Warn1.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n- * @compile       -Werror -Xlint:none Warn2.java\n+ * @compile       -Werror -nowarn Warn2.java\n","filename":"test\/langtools\/tools\/javac\/varargs\/Warn2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}