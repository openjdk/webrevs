{"files":[{"patch":"@@ -1851,1 +1851,1 @@\n-      \"Stack shouldn't be empty\");\n+           \"Stack shouldn't be empty\");\n@@ -1862,3 +1862,1 @@\n-  \/\/ Deferred transition to VM, so we can stash away the return oop before GC\n-  \/\/ Note that this transition is not needed when throwing an exception, because\n-  \/\/ there is no oop to retain.\n+  \/\/ Deferred transition to VM, so we can stash away the return oop before GC.\n@@ -1867,1 +1865,1 @@\n-    post_method_exit_inner(thread, mh, state, false, current_frame, value);\n+    post_method_exit_inner(thread, mh, state, false \/* not exception exit *\/, current_frame, value);\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * if method is called while there is a pending exception on this thread.\n+ *          if method is called while there is a pending exception on this thread.\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MethodExit\/PendingException\/TestMethodExitWithPendingException.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-\/\/    has been popped by exception and call 'upCall' mthod using JNI.\n+\/\/    has been popped by exception and calls 'upCall' method using JNI.\n@@ -67,1 +67,1 @@\n-      \"upCall\", \"()Ljava\/lang\/String;\");\n+                                                   \"upCall\", \"()Ljava\/lang\/String;\");\n@@ -104,1 +104,1 @@\n- return JNI_OK;\n+  return JNI_OK;\n@@ -109,0 +109,1 @@\n+\n@@ -125,1 +126,1 @@\n-}\n+} \/\/ extern \"C\"\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MethodExit\/PendingException\/libTestMethodExitWithPendingException.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}