{"files":[{"patch":"@@ -32,2 +32,2 @@\n-bool DefaultICProtectionBehaviour::lock(nmethod* method) {\n-  if (is_safe(method)) {\n+bool DefaultICProtectionBehaviour::lock(nmethod* nm) {\n+  if (is_safe(nm)) {\n@@ -40,1 +40,1 @@\n-void DefaultICProtectionBehaviour::unlock(nmethod* method) {\n+void DefaultICProtectionBehaviour::unlock(nmethod* nm) {\n@@ -44,2 +44,2 @@\n-bool DefaultICProtectionBehaviour::is_safe(nmethod* method) {\n-  return SafepointSynchronize::is_at_safepoint() || CompiledIC_lock->owned_by_self() || method->is_not_installed();\n+bool DefaultICProtectionBehaviour::is_safe(nmethod* nm) {\n+  return SafepointSynchronize::is_at_safepoint() || CompiledIC_lock->owned_by_self() || nm->is_not_installed();\n","filename":"src\/hotspot\/share\/code\/codeBehaviours.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -36,3 +36,3 @@\n-  virtual bool lock(nmethod* method) = 0;\n-  virtual void unlock(nmethod* method) = 0;\n-  virtual bool is_safe(nmethod* method) = 0;\n+  virtual bool lock(nmethod* nm) = 0;\n+  virtual void unlock(nmethod* nm) = 0;\n+  virtual bool is_safe(nmethod* nm) = 0;\n@@ -45,3 +45,3 @@\n-  virtual bool lock(nmethod* method);\n-  virtual void unlock(nmethod* method);\n-  virtual bool is_safe(nmethod* method);\n+  virtual bool lock(nmethod* nm);\n+  virtual void unlock(nmethod* nm);\n+  virtual bool is_safe(nmethod* nm);\n","filename":"src\/hotspot\/share\/code\/codeBehaviours.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -58,2 +58,2 @@\n-bool CompiledICLocker::is_safe(nmethod* method) {\n-  return CompiledICProtectionBehaviour::current()->is_safe(method);\n+bool CompiledICLocker::is_safe(nmethod* nm) {\n+  return CompiledICProtectionBehaviour::current()->is_safe(nm);\n","filename":"src\/hotspot\/share\/code\/compiledIC.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  static bool is_safe(nmethod* method);\n+  static bool is_safe(nmethod* nm);\n","filename":"src\/hotspot\/share\/code\/compiledIC.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1157,3 +1157,3 @@\n-    + align_up((int)dependencies->size_in_bytes()     , oopSize)\n-    + align_up(handler_table->size_in_bytes()         , oopSize)\n-    + align_up(nul_chk_table->size_in_bytes()         , oopSize)\n+    + align_up((int)dependencies->size_in_bytes(), oopSize)\n+    + align_up(handler_table->size_in_bytes()    , oopSize)\n+    + align_up(nul_chk_table->size_in_bytes()    , oopSize)\n@@ -1161,1 +1161,1 @@\n-    + align_up(speculations_len                       , oopSize)\n+    + align_up(speculations_len                  , oopSize)\n@@ -1163,2 +1163,2 @@\n-    + align_up(debug_info->data_size()                , oopSize)\n-    + align_up(ImmutableDataReferencesCounterSize     , oopSize);\n+    + align_up(debug_info->data_size()           , oopSize)\n+    + align_up(ImmutableDataReferencesCounterSize, oopSize);\n@@ -1610,2 +1610,1 @@\n-#if INCLUDE_JVMCI\n-  if (jvmci_nmethod_data() != nullptr && jvmci_nmethod_data()->has_mirror()) {\n+  if (!is_java_method()) {\n@@ -1614,1 +1613,0 @@\n-#endif\n@@ -1616,1 +1614,1 @@\n-  if (is_marked_for_deoptimization()) {\n+  if (!is_in_use()) {\n@@ -1620,1 +1618,1 @@\n-  if (is_unloading()) {\n+  if (is_osr_method()) {\n@@ -1624,1 +1622,1 @@\n-  if (is_osr_method()) {\n+  if (is_marked_for_deoptimization()) {\n@@ -1628,1 +1626,2 @@\n-  if (!is_java_method()) {\n+#if INCLUDE_JVMCI\n+  if (jvmci_nmethod_data() != nullptr && jvmci_nmethod_data()->has_mirror()) {\n@@ -1631,0 +1630,1 @@\n+#endif\n@@ -1632,1 +1632,1 @@\n-  if (!is_in_use()) {\n+  if (is_unloading()) {\n@@ -2451,0 +2451,5 @@\n+    int reference_count = get_immutable_data_references_counter();\n+    assert(reference_count > 0, \"immutable data has no references\");\n+\n+    set_immutable_data_references_counter(reference_count - 1);\n+\n@@ -2452,1 +2457,1 @@\n-    if (get_immutable_data_references_counter() == 1) {\n+    if (reference_count == 0) {\n@@ -2454,2 +2459,0 @@\n-    } else {\n-      set_immutable_data_references_counter(get_immutable_data_references_counter() - 1);\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":20,"deletions":17,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+  private static long          immutableDataReferencesCounterSize;\n@@ -82,19 +83,20 @@\n-    methodField                 = type.getAddressField(\"_method\");\n-    entryBCIField               = type.getCIntegerField(\"_entry_bci\");\n-    osrLinkField                = type.getAddressField(\"_osr_link\");\n-    immutableDataField          = type.getAddressField(\"_immutable_data\");\n-    immutableDataSizeField      = type.getCIntegerField(\"_immutable_data_size\");\n-    exceptionOffsetField        = type.getCIntegerField(\"_exception_offset\");\n-    deoptHandlerOffsetField     = type.getCIntegerField(\"_deopt_handler_offset\");\n-    deoptMhHandlerOffsetField   = type.getCIntegerField(\"_deopt_mh_handler_offset\");\n-    origPCOffsetField           = type.getCIntegerField(\"_orig_pc_offset\");\n-    stubOffsetField             = type.getCIntegerField(\"_stub_offset\");\n-    scopesPCsOffsetField        = type.getCIntegerField(\"_scopes_pcs_offset\");\n-    scopesDataOffsetField       = type.getCIntegerField(\"_scopes_data_offset\");\n-    handlerTableOffsetField     = new CIntField(type.getCIntegerField(\"_handler_table_offset\"), 0);\n-    nulChkTableOffsetField      = new CIntField(type.getCIntegerField(\"_nul_chk_table_offset\"), 0);\n-    entryOffsetField            = new CIntField(type.getCIntegerField(\"_entry_offset\"), 0);\n-    verifiedEntryOffsetField    = new CIntField(type.getCIntegerField(\"_verified_entry_offset\"), 0);\n-    osrEntryPointField          = type.getAddressField(\"_osr_entry_point\");\n-    compLevelField              = new CIntField(type.getCIntegerField(\"_comp_level\"), 0);\n-    pcDescSize = db.lookupType(\"PcDesc\").getSize();\n+    methodField                        = type.getAddressField(\"_method\");\n+    entryBCIField                      = type.getCIntegerField(\"_entry_bci\");\n+    osrLinkField                       = type.getAddressField(\"_osr_link\");\n+    immutableDataField                 = type.getAddressField(\"_immutable_data\");\n+    immutableDataSizeField             = type.getCIntegerField(\"_immutable_data_size\");\n+    exceptionOffsetField               = type.getCIntegerField(\"_exception_offset\");\n+    deoptHandlerOffsetField            = type.getCIntegerField(\"_deopt_handler_offset\");\n+    deoptMhHandlerOffsetField          = type.getCIntegerField(\"_deopt_mh_handler_offset\");\n+    origPCOffsetField                  = type.getCIntegerField(\"_orig_pc_offset\");\n+    stubOffsetField                    = type.getCIntegerField(\"_stub_offset\");\n+    scopesPCsOffsetField               = type.getCIntegerField(\"_scopes_pcs_offset\");\n+    scopesDataOffsetField              = type.getCIntegerField(\"_scopes_data_offset\");\n+    handlerTableOffsetField            = new CIntField(type.getCIntegerField(\"_handler_table_offset\"), 0);\n+    nulChkTableOffsetField             = new CIntField(type.getCIntegerField(\"_nul_chk_table_offset\"), 0);\n+    entryOffsetField                   = new CIntField(type.getCIntegerField(\"_entry_offset\"), 0);\n+    verifiedEntryOffsetField           = new CIntField(type.getCIntegerField(\"_verified_entry_offset\"), 0);\n+    osrEntryPointField                 = type.getAddressField(\"_osr_entry_point\");\n+    compLevelField                     = new CIntField(type.getCIntegerField(\"_comp_level\"), 0);\n+    pcDescSize                         = db.lookupType(\"PcDesc\").getSize();\n+    immutableDataReferencesCounterSize = VM.getVM().getIntSize();\n@@ -145,1 +147,1 @@\n-  public Address scopesPCsEnd()         { return immutableDataEnd();                                        }\n+  public Address scopesPCsEnd()         { return immutableDataEnd().addOffsetTo(-immutableDataReferencesCounterSize); }\n@@ -175,1 +177,2 @@\n-      nulChkTableSize();\n+      nulChkTableSize()  +\n+      (int) immutableDataReferencesCounterSize;\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/NMethod.java","additions":24,"deletions":21,"binary":false,"changes":45,"status":"modified"}]}