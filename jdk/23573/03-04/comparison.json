{"files":[{"patch":"@@ -147,0 +147,1 @@\n+  static CodeHeap* get_code_heap_containing(void* p);   \/\/ Returns the CodeHeap containing the given pointer, or nullptr\n@@ -163,1 +164,0 @@\n-  static CodeHeap* get_code_heap_containing(void* p);   \/\/ Returns the CodeHeap containing the given pointer, or nullptr\n","filename":"src\/hotspot\/share\/code\/codeCache.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1171,1 +1171,1 @@\n-    + align_up(oopSize                           , oopSize);\n+    + align_up(sizeof(int)                       , oopSize);\n@@ -1403,1 +1403,1 @@\n-  memcpy(nm_copy, this, size());\n+  memcpy((void*) nm_copy, this, size());\n@@ -1407,1 +1407,1 @@\n-    (*immutable_data_references_begin())++;\n+    set_immutable_data_references(get_immutable_data_references() + 1);\n@@ -1461,5 +1461,0 @@\n-  \/\/ No need to relocate if already in correct code heap\n-  if (nm->lookup_code_blob_type() == code_blob_type) {\n-    return nm;\n-  }\n-\n@@ -1536,4 +1531,0 @@\n-CodeBlobType nmethod::lookup_code_blob_type() {\n-  return CodeCache::get_code_heap_containing(this)->code_blob_type();\n-}\n-\n@@ -1672,2 +1663,1 @@\n-    _immutable_data_references_offset         = _speculations_offset  + align_up(speculations_len, oopSize);\n-    DEBUG_ONLY( int immutable_data_end_offset = _immutable_data_references_offset  + align_up(oopSize, oopSize); )\n+    DEBUG_ONLY( int immutable_data_end_offset = _speculations_offset + align_up(speculations_len, oopSize) + align_up(sizeof(int), oopSize); )\n@@ -1675,2 +1665,1 @@\n-    _immutable_data_references_offset         =  _scopes_data_offset + align_up(debug_info->data_size(), oopSize);\n-    DEBUG_ONLY( int immutable_data_end_offset = _immutable_data_references_offset + align_up(oopSize, oopSize); )\n+    DEBUG_ONLY( int immutable_data_end_offset = _scopes_data_offset + align_up(debug_info->data_size(), oopSize) + align_up(sizeof(int), oopSize); )\n@@ -1709,1 +1698,1 @@\n-    memset(immutable_data_references_begin(), 1, oopSize);\n+    set_immutable_data_references(1);\n@@ -2289,2 +2278,0 @@\n-    long _immutable_data_references = *immutable_data_references_begin();\n-\n@@ -2292,1 +2279,1 @@\n-    if (_immutable_data_references == 1) {\n+    if (get_immutable_data_references() == 1) {\n@@ -2295,1 +2282,1 @@\n-      (*immutable_data_references_begin())--;\n+      set_immutable_data_references(get_immutable_data_references() - 1);\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":8,"deletions":21,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -253,1 +253,0 @@\n-  int      _immutable_data_references_offset;\n@@ -338,2 +337,0 @@\n-  nmethod(nmethod& nm);\n-\n@@ -504,1 +501,0 @@\n-  \/\/ If nm is already in the needed code heap, it is not relocated and the function returns it.\n@@ -525,2 +521,0 @@\n-  CodeBlobType lookup_code_blob_type();\n-\n@@ -580,1 +574,1 @@\n-  address speculations_end      () const { return           _immutable_data + _immutable_data_references_offset   ; }\n+  address speculations_end      () const { return           immutable_data_end() - sizeof(int)     ; }\n@@ -582,1 +576,1 @@\n-  address scopes_data_end       () const { return           _immutable_data + _immutable_data_references_offset   ; }\n+  address scopes_data_end       () const { return           immutable_data_end() - sizeof(int)     ; }\n@@ -585,2 +579,1 @@\n-  address immutable_data_references_begin      () const { return           _immutable_data + _immutable_data_references_offset   ; }\n-  address immutable_data_references_end        () const { return            immutable_data_end(); }\n+  address immutable_data_references_begin () const { return immutable_data_end() - sizeof(int)     ; }\n@@ -900,0 +893,3 @@\n+  inline int  get_immutable_data_references()           { return *immutable_data_references_begin();    }\n+  inline void set_immutable_data_references(int count)  { (*immutable_data_references_begin()) = count; }\n+\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1640,35 +1640,0 @@\n-WB_ENTRY(void, WB_RelocateAllNMethods(JNIEnv* env))\n-  ResourceMark rm(THREAD);\n-\n-  \/\/ Get all nmethods in heap\n-  GrowableArray<nmethod*> nmethods;\n-  for (int codeBlobTypeIndex = 0; codeBlobTypeIndex < (int) CodeBlobType::NumTypes; codeBlobTypeIndex++) {\n-    CodeHeap* heap;\n-    {\n-      MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n-      heap = WhiteBox::get_code_heap(static_cast<CodeBlobType>(codeBlobTypeIndex));\n-      if (heap == nullptr) {\n-        continue;\n-      }\n-    }\n-\n-    for (CodeBlob* cb = (CodeBlob*) heap->first(); cb != nullptr; cb = (CodeBlob*) heap->next(cb)) {\n-      if (cb->is_nmethod()) {\n-        nmethods.append(cb->as_nmethod());\n-      }\n-    }\n-\n-    if (!SegmentedCodeCache) {\n-      break;\n-    }\n-  }\n-\n-  \/\/ Replace all\n-  for (GrowableArrayIterator<nmethod*> it = nmethods.begin(); it != nmethods.end(); ++it) {\n-    \/\/ Destination should be different than current location\n-    CodeBlobType code_cache_dest = (*it)->lookup_code_blob_type() == CodeBlobType::MethodNonProfiled ? CodeBlobType::MethodProfiled : CodeBlobType::MethodNonProfiled;\n-    nmethod::relocate_to(*it, code_cache_dest);\n-  }\n-\n-WB_END\n-\n@@ -2920,1 +2885,0 @@\n-  {CC\"relocateAllNMethods\", CC\"()V\",                  (void*)&WB_RelocateAllNMethods},\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -1,107 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test id=Serial\n- * @bug 8316694\n- * @summary Relocates all nmethods and runs garbage collector to cleanup old versions\n- * @library \/test\/lib \/\n- * @modules java.base\/jdk.internal.misc java.management\n- *\n- * @requires vm.opt.DeoptimizeALot != true\n- *\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+SegmentedCodeCache -XX:+UseSerialGC compiler.whitebox.RelocateAllNMethods\n- *\/\n-\n-\/*\n- * @test id=Parallel\n- * @bug 8316694\n- * @summary Relocates all nmethods and runs garbage collector to cleanup old versions\n- * @library \/test\/lib \/\n- * @modules java.base\/jdk.internal.misc java.management\n- *\n- * @requires vm.opt.DeoptimizeALot != true\n- *\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+SegmentedCodeCache -XX:+UseParallelGC compiler.whitebox.RelocateAllNMethods\n- *\/\n-\n-\/*\n- * @test id=G1\n- * @bug 8316694\n- * @summary Relocates all nmethods and runs garbage collector to cleanup old versions\n- * @library \/test\/lib \/\n- * @modules java.base\/jdk.internal.misc java.management\n- *\n- * @requires vm.opt.DeoptimizeALot != true\n- *\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+SegmentedCodeCache -XX:+UseG1GC compiler.whitebox.RelocateAllNMethods\n- *\/\n-\n-\/*\n- * @test id=Shenandoah\n- * @bug 8316694\n- * @summary Relocates all nmethods and runs garbage collector to cleanup old versions\n- * @library \/test\/lib \/\n- * @modules java.base\/jdk.internal.misc java.management\n- *\n- * @requires vm.opt.DeoptimizeALot != true\n- *\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+SegmentedCodeCache -XX:+UseShenandoahGC compiler.whitebox.RelocateAllNMethods\n- *\/\n-\n-\/*\n- * @test id=ZGC\n- * @bug 8316694\n- * @summary Relocates all nmethods and runs garbage collector to cleanup old versions\n- * @library \/test\/lib \/\n- * @modules java.base\/jdk.internal.misc java.management\n- *\n- * @requires vm.opt.DeoptimizeALot != true\n- *\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+SegmentedCodeCache -XX:+UseZGC compiler.whitebox.RelocateAllNMethods\n- *\/\n-\n-package compiler.whitebox;\n-\n-import jdk.test.whitebox.WhiteBox;\n-\n-public class RelocateAllNMethods {\n-\n-    private static final WhiteBox WHITE_BOX = WhiteBox.getWhiteBox();\n-\n-    public static void main(String [] args) throws Exception {\n-        WHITE_BOX.relocateAllNMethods();\n-\n-        WHITE_BOX.fullGC();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/whitebox\/RelocateAllNMethods.java","additions":0,"deletions":107,"binary":false,"changes":107,"status":"deleted"},{"patch":"@@ -1,111 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test id=Serial\n- * @bug 8316694\n- * @summary Relocates all nmethods and also deoptimizes to confirm no crashes\n- * @library \/test\/lib \/\n- * @modules java.base\/jdk.internal.misc java.management\n- *\n- * @requires vm.opt.DeoptimizeALot != true\n- *\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+SegmentedCodeCache -XX:+UseSerialGC compiler.whitebox.RelocateAndDeoptmizeAllNMethods\n- *\/\n-\n-\/*\n- * @test id=Parallel\n- * @bug 8316694\n- * @summary Relocates all nmethods and also deoptimizes to confirm no crashes\n- * @library \/test\/lib \/\n- * @modules java.base\/jdk.internal.misc java.management\n- *\n- * @requires vm.opt.DeoptimizeALot != true\n- *\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+SegmentedCodeCache -XX:+UseParallelGC compiler.whitebox.RelocateAndDeoptmizeAllNMethods\n- *\/\n-\n-\/*\n- * @test id=G1\n- * @bug 8316694\n- * @summary Relocates all nmethods and also deoptimizes to confirm no crashes\n- * @library \/test\/lib \/\n- * @modules java.base\/jdk.internal.misc java.management\n- *\n- * @requires vm.opt.DeoptimizeALot != true\n- *\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+SegmentedCodeCache -XX:+UseG1GC compiler.whitebox.RelocateAndDeoptmizeAllNMethods\n- *\/\n-\n-\/*\n- * @test id=Shenandoah\n- * @bug 8316694\n- * @summary Relocates all nmethods and also deoptimizes to confirm no crashes\n- * @library \/test\/lib \/\n- * @modules java.base\/jdk.internal.misc java.management\n- *\n- * @requires vm.opt.DeoptimizeALot != true\n- *\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+SegmentedCodeCache -XX:+UseShenandoahGC compiler.whitebox.RelocateAndDeoptmizeAllNMethods\n- *\/\n-\n-\/*\n- * @test id=ZGC\n- * @bug 8316694\n- * @summary Relocates all nmethods and also deoptimizes to confirm no crashes\n- * @library \/test\/lib \/\n- * @modules java.base\/jdk.internal.misc java.management\n- *\n- * @requires vm.opt.DeoptimizeALot != true\n- *\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+SegmentedCodeCache -XX:+UseZGC compiler.whitebox.RelocateAndDeoptmizeAllNMethods\n- *\/\n-\n-package compiler.whitebox;\n-\n-import jdk.test.whitebox.WhiteBox;\n-\n-public class RelocateAndDeoptmizeAllNMethods {\n-\n-    private static final WhiteBox WHITE_BOX = WhiteBox.getWhiteBox();\n-\n-    public static void main(String [] args) throws Exception {\n-        WHITE_BOX.relocateAllNMethods();\n-\n-        WHITE_BOX.fullGC();\n-\n-        WHITE_BOX.deoptimizeAll();\n-\n-        WHITE_BOX.fullGC();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/whitebox\/RelocateAndDeoptmizeAllNMethods.java","additions":0,"deletions":111,"binary":false,"changes":111,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n@@ -22,0 +22,1 @@\n+ *\n","filename":"test\/hotspot\/jtreg\/compiler\/whitebox\/RelocateNMethod.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n@@ -22,0 +22,15 @@\n+ *\n+ *\/\n+\n+\/*\n+ * @test id=SerialC1\n+ * @bug 8316694\n+ * @requires vm.debug == true\n+ * @summary test that relocated nmethod is correctly deoptimized\n+ * @library \/test\/lib \/\n+ * @modules java.base\/jdk.internal.misc java.management\n+ *\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch -XX:+TieredCompilation -XX:TieredStopAtLevel=1\n+ * -XX:+SegmentedCodeCache -XX:-DeoptimizeRandom -XX:+DeoptimizeALot -XX:+UseSerialGC compiler.whitebox.RelocateNMethodMultiplePaths\n@@ -25,1 +40,1 @@\n- * @test id=Serial\n+ * @test id=SerialC2\n@@ -34,2 +49,2 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch -XX:+SegmentedCodeCache\n- * -XX:-DeoptimizeRandom -XX:+DeoptimizeALot -XX:+UseSerialGC compiler.whitebox.RelocateNMethodMultiplePaths\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch -XX:+TieredCompilation\n+ * -XX:+SegmentedCodeCache -XX:-DeoptimizeRandom -XX:+DeoptimizeALot -XX:+UseSerialGC compiler.whitebox.RelocateNMethodMultiplePaths\n@@ -39,1 +54,1 @@\n- * @test id=Parallel\n+ * @test id=ParallelC1\n@@ -48,2 +63,2 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch -XX:+SegmentedCodeCache\n- * -XX:-DeoptimizeRandom -XX:+DeoptimizeALot -XX:+UseParallelGC compiler.whitebox.RelocateNMethodMultiplePaths\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch -XX:+TieredCompilation -XX:TieredStopAtLevel=1\n+ * -XX:+SegmentedCodeCache -XX:-DeoptimizeRandom -XX:+DeoptimizeALot -XX:+UseParallelGC compiler.whitebox.RelocateNMethodMultiplePaths\n@@ -53,1 +68,1 @@\n- * @test id=G1\n+ * @test id=ParallelC2\n@@ -62,2 +77,2 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch -XX:+SegmentedCodeCache\n- * -XX:-DeoptimizeRandom -XX:+DeoptimizeALot -XX:+UseG1GC compiler.whitebox.RelocateNMethodMultiplePaths\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch -XX:+TieredCompilation\n+ * -XX:+SegmentedCodeCache -XX:-DeoptimizeRandom -XX:+DeoptimizeALot -XX:+UseParallelGC compiler.whitebox.RelocateNMethodMultiplePaths\n@@ -67,1 +82,1 @@\n- * @test id=Shenandoah\n+ * @test id=G1C1\n@@ -76,2 +91,2 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch -XX:+SegmentedCodeCache\n- * -XX:-DeoptimizeRandom -XX:+DeoptimizeALot -XX:+UseShenandoahGC compiler.whitebox.RelocateNMethodMultiplePaths\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch -XX:+TieredCompilation -XX:TieredStopAtLevel=1\n+ * -XX:+SegmentedCodeCache -XX:-DeoptimizeRandom -XX:+DeoptimizeALot -XX:+UseG1GC compiler.whitebox.RelocateNMethodMultiplePaths\n@@ -81,1 +96,1 @@\n- * @test id=ZGC\n+ * @test id=G1C2\n@@ -90,2 +105,58 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch -XX:+SegmentedCodeCache\n- * -XX:-DeoptimizeRandom -XX:+DeoptimizeALot -XX:+UseZGC compiler.whitebox.RelocateNMethodMultiplePaths\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch -XX:+TieredCompilation\n+ * -XX:+SegmentedCodeCache -XX:-DeoptimizeRandom -XX:+DeoptimizeALot -XX:+UseG1GC compiler.whitebox.RelocateNMethodMultiplePaths\n+ *\/\n+\n+\/*\n+ * @test id=ShenandoahC1\n+ * @bug 8316694\n+ * @requires vm.debug == true\n+ * @summary test that relocated nmethod is correctly deoptimized\n+ * @library \/test\/lib \/\n+ * @modules java.base\/jdk.internal.misc java.management\n+ *\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch -XX:+TieredCompilation -XX:TieredStopAtLevel=1\n+ * -XX:+SegmentedCodeCache -XX:-DeoptimizeRandom -XX:+DeoptimizeALot -XX:+UseShenandoahGC compiler.whitebox.RelocateNMethodMultiplePaths\n+ *\/\n+\n+\/*\n+ * @test id=ShenandoahC2\n+ * @bug 8316694\n+ * @requires vm.debug == true\n+ * @summary test that relocated nmethod is correctly deoptimized\n+ * @library \/test\/lib \/\n+ * @modules java.base\/jdk.internal.misc java.management\n+ *\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch -XX:+TieredCompilation\n+ * -XX:+SegmentedCodeCache -XX:-DeoptimizeRandom -XX:+DeoptimizeALot -XX:+UseShenandoahGC compiler.whitebox.RelocateNMethodMultiplePaths\n+ *\/\n+\n+\/*\n+ * @test id=ZGCC1\n+ * @bug 8316694\n+ * @requires vm.debug == true\n+ * @summary test that relocated nmethod is correctly deoptimized\n+ * @library \/test\/lib \/\n+ * @modules java.base\/jdk.internal.misc java.management\n+ *\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch -XX:+TieredCompilation -XX:TieredStopAtLevel=1\n+ * -XX:+SegmentedCodeCache -XX:-DeoptimizeRandom -XX:+DeoptimizeALot -XX:+UseZGC compiler.whitebox.RelocateNMethodMultiplePaths\n+ *\/\n+\n+\/*\n+ * @test id=ZGCC2\n+ * @bug 8316694\n+ * @requires vm.debug == true\n+ * @summary test that relocated nmethod is correctly deoptimized\n+ * @library \/test\/lib \/\n+ * @modules java.base\/jdk.internal.misc java.management\n+ *\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch -XX:+TieredCompilation\n+ * -XX:+SegmentedCodeCache -XX:-DeoptimizeRandom -XX:+DeoptimizeALot -XX:+UseZGC compiler.whitebox.RelocateNMethodMultiplePaths\n@@ -105,1 +176,3 @@\n-    public static double FUNCTION_RESULT = 0;\n+\n+    private static final int PATH_ONE_RESULT = 1;\n+    private static final int PATH_TWO_RESULT = 2;\n@@ -125,1 +198,1 @@\n-        WHITE_BOX.relocateNMethodTo(method, BlobType.MethodProfiled.id);\n+        WHITE_BOX.relocateNMethodTo(method, BlobType.MethodNonProfiled.id);\n@@ -139,2 +212,4 @@\n-        \/\/ Call function again with different path so it gets deoptimized\n-        function(false);\n+        \/\/ Verify function still produces correct result\n+        if (function(true) != PATH_ONE_RESULT) {\n+            throw new RuntimeException(\"Relocated function produced incorrect result in path one\");\n+        }\n@@ -142,1 +217,4 @@\n-        CompilerWhiteBoxTest.checkNotCompiled(method, false);\n+        \/\/ Call function again with different path and verify result\n+        if (function(false) != PATH_TWO_RESULT) {\n+            throw new RuntimeException(\"Relocated function produced incorrect result in path two\");\n+        }\n@@ -144,3 +222,3 @@\n-        \/\/ Call both paths to verify everything still works\n-        function(true);\n-        function(false);\n+        \/\/ Verify function can be correctly deoptimized\n+        WHITE_BOX.deoptimizeMethod(method);\n+        CompilerWhiteBoxTest.checkNotCompiled(method, false);\n@@ -156,1 +234,1 @@\n-    public static void function(boolean pathOne) {\n+    public static int function(boolean pathOne) {\n@@ -158,1 +236,1 @@\n-            FUNCTION_RESULT = 1;\n+            return PATH_ONE_RESULT;\n@@ -160,1 +238,1 @@\n-            FUNCTION_RESULT = 2;\n+            return PATH_TWO_RESULT;\n","filename":"test\/hotspot\/jtreg\/compiler\/whitebox\/RelocateNMethodMultiplePaths.java","additions":105,"deletions":27,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -494,1 +494,0 @@\n-  public native void    relocateAllNMethods();\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}