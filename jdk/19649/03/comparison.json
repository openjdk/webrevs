{"files":[{"patch":"@@ -2010,1 +2010,10 @@\n-instruct reduce_addF(fRegF dst, fRegF src1, vReg src2, vReg tmp) %{\n+\/\/ Distinguish two cases based on requires_strict_order\n+\/\/ 1. Non strictly-ordered AddReductionVF\/D. For example, AddReductionVF\/D\n+\/\/    generated by Vector API. It is more beneficial performance-wise to do\n+\/\/    an unordered FP reduction sum (vfredusum.vs).\n+\/\/ 2. Strictly-ordered AddReductionVF\/D. For example, AddReductionVF\/D\n+\/\/    generated by auto-vectorization. Must do an ordered FP reduction sum\n+\/\/    (vfredosum.vs).\n+\n+instruct reduce_addF_ordered(fRegF dst, fRegF src1, vReg src2, vReg tmp) %{\n+  predicate(n->as_Reduction()->requires_strict_order());\n@@ -2014,1 +2023,1 @@\n-  format %{ \"reduce_addF $dst, $src1, $src2\\t# KILL $tmp\" %}\n+  format %{ \"reduce_addF_ordered $dst, $src1, $src2\\t# KILL $tmp\" %}\n@@ -2025,1 +2034,18 @@\n-instruct reduce_addD(fRegD dst, fRegD src1, vReg src2, vReg tmp) %{\n+instruct reduce_addF_unordered(fRegF dst, fRegF src1, vReg src2, vReg tmp) %{\n+  predicate(!n->as_Reduction()->requires_strict_order());\n+  match(Set dst (AddReductionVF src1 src2));\n+  effect(TEMP tmp);\n+  ins_cost(VEC_COST);\n+  format %{ \"reduce_addF_unordered $dst, $src1, $src2\\t# KILL $tmp\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this, $src2));\n+    __ vfmv_s_f(as_VectorRegister($tmp$$reg), $src1$$FloatRegister);\n+    __ vfredusum_vs(as_VectorRegister($tmp$$reg), as_VectorRegister($src2$$reg),\n+                    as_VectorRegister($tmp$$reg));\n+    __ vfmv_f_s($dst$$FloatRegister, as_VectorRegister($tmp$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_addD_ordered(fRegD dst, fRegD src1, vReg src2, vReg tmp) %{\n+  predicate(n->as_Reduction()->requires_strict_order());\n@@ -2029,1 +2055,1 @@\n-  format %{ \"reduce_addD $dst, $src1, $src2\\t# KILL $tmp\" %}\n+  format %{ \"reduce_addD_ordered $dst, $src1, $src2\\t# KILL $tmp\" %}\n@@ -2035,0 +2061,16 @@\n+    __ vfmv_f_s($dst$$FloatRegister, as_VectorRegister($tmp$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_addD_unordered(fRegD dst, fRegD src1, vReg src2, vReg tmp) %{\n+  predicate(!n->as_Reduction()->requires_strict_order());\n+  match(Set dst (AddReductionVD src1 src2));\n+  effect(TEMP tmp);\n+  ins_cost(VEC_COST);\n+  format %{ \"reduce_addD_unordered $dst, $src1, $src2\\t# KILL $tmp\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this, $src2));\n+    __ vfmv_s_f(as_VectorRegister($tmp$$reg), $src1$$FloatRegister);\n+    __ vfredusum_vs(as_VectorRegister($tmp$$reg), as_VectorRegister($src2$$reg),\n+                    as_VectorRegister($tmp$$reg));\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":46,"deletions":4,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-        applyIfCPUFeatureOr = {\"sve\", \"true\", \"sse2\", \"true\"},\n+        applyIfCPUFeatureOr = {\"sve\", \"true\", \"sse2\", \"true\", \"rvv\", \"true\"},\n@@ -72,1 +72,1 @@\n-        applyIfCPUFeatureOr = {\"sve\", \"true\", \"sse2\", \"true\"},\n+        applyIfCPUFeatureOr = {\"sve\", \"true\", \"sse2\", \"true\", \"rvv\", \"true\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestVectorFPReduction.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\"},\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\", \"rvv\", \"true\"},\n@@ -91,1 +91,1 @@\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\"},\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\", \"rvv\", \"true\"},\n@@ -101,1 +101,1 @@\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\"},\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\", \"rvv\", \"true\"},\n@@ -111,1 +111,1 @@\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\"},\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\", \"rvv\", \"true\"},\n@@ -130,1 +130,1 @@\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\"},\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\", \"rvv\", \"true\"},\n@@ -140,1 +140,1 @@\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\"},\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\", \"rvv\", \"true\"},\n@@ -150,1 +150,1 @@\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\"},\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\", \"rvv\", \"true\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorAddMulReduction.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}