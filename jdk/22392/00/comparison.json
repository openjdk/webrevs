{"files":[{"patch":"@@ -4218,0 +4218,3 @@\n+                            } else if (token.name() == names.transitive && isTransitive) {\n+                                log.error(DiagnosticFlag.SYNTAX, token.pos, Errors.RepeatedModifier);\n+                                break;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -224,0 +224,35 @@\n+\n+    @Test\n+    public void testRepeatedModifiers(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        Path src_m1 = src.resolve(\"m1\");\n+        tb.writeJavaFiles(src_m1,\n+                \"\"\"\n+                module m1 {\n+                    requires static static java.sql;\n+                    requires transitive transitive java.desktop;\n+                }\n+                \"\"\"\n+        );\n+        Path classes = base.resolve(\"classes\");\n+        Files.createDirectories(classes);\n+\n+        String log = new JavacTask(tb, Task.Mode.CMDLINE)\n+                .options(\"-XDrawDiagnostics\",\n+                        \"--module-source-path\", src.toString())\n+                .files(findJavaFiles(src))\n+                .outdir(classes)\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutput(Task.OutputKind.DIRECT);\n+\n+        String[] expect = {\n+                \"module-info.java:2:21: compiler.err.repeated.modifier\",\n+                \"module-info.java:3:25: compiler.err.repeated.modifier\"\n+        };\n+\n+        for (String e: expect) {\n+            if (!log.contains(e))\n+                throw new Exception(\"expected output not found: \" + e);\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/modules\/RequiresTransitiveTest.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"}]}