{"files":[{"patch":"@@ -48,1 +48,1 @@\n-    SINGLE_KEYWORDS := JOBS TIMEOUT_FACTOR JCOV JCOV_DIFF_CHANGESET, \\\n+    SINGLE_KEYWORDS := JOBS TIMEOUT_FACTOR JCOV JCOV_DIFF_CHANGESET AOT_JDK, \\\n@@ -205,0 +205,1 @@\n+$(eval $(call SetTestOpt,AOT_JDK,JTREG))\n@@ -209,1 +210,1 @@\n-        RETRY_COUNT REPEAT_COUNT MAX_OUTPUT REPORT $(CUSTOM_JTREG_SINGLE_KEYWORDS), \\\n+        RETRY_COUNT REPEAT_COUNT MAX_OUTPUT REPORT AOT_JDK $(CUSTOM_JTREG_SINGLE_KEYWORDS), \\\n@@ -705,0 +706,52 @@\n+\n+# Parameter 1 is the name of the rule.\n+#\n+# Remaining parameters are named arguments.\n+#   VM_OPTIONS  List of JVM arguments to use when creating AOT cache\n+#\n+#  After calling this, the following variables are defined\n+#   $1_AOT_TARGETS   List of all targets that the test rule will need to depend on\n+#   $1_AOT_JDK_CACHE The AOT cache file to be usd to wun the test with\n+#\n+SetupAot = $(NamedParamsMacroTemplate)\n+define SetupAotBody\n+  $1_AOT_JDK_CONF  := $$($1_TEST_SUPPORT_DIR)\/aot\/jdk.aotconf\n+  $1_AOT_JDK_CACHE := $$($1_TEST_SUPPORT_DIR)\/aot\/jdk.aotcache\n+\n+  $1_JAVA_TOOL_OPTS := $$(addprefix -J, $$($1_VM_OPTIONS))\n+\n+  $$($1_AOT_JDK_CACHE): $$(JDK_IMAGE_DIR)\/release\n+\t$$(call MakeDir, $$($1_TEST_SUPPORT_DIR)\/aot)\n+\t\n+\t$(foreach jtool, javac javap jlink jar, \\\n+\t    $(info AOT: Create cache configuration for $(jtool)) \\\n+\t    $$(call ExecuteWithLog, $$($1_TEST_SUPPORT_DIR)\/aot.$(jtool), ( \\\n+\t        $$(FIXPATH) $(JDK_UNDER_TEST)\/bin\/$(jtool) $$($1_JAVA_TOOL_OPTS) \\\n+\t                    -J-XX:AOTMode=record -J-XX:AOTConfiguration=$$($1_AOT_JDK_CONF).$(jtool) --help \\\n+\t    ))\n+\t)\n+\n+\t$$(info AOT: Copy $(JDK_UNDER_TEST)\/lib\/classlist to $$($1_AOT_JDK_CONF).jdk )\n+\t$$(call ExecuteWithLog, $$($1_TEST_SUPPORT_DIR)\/aot, ( \\\n+\t\t$$(FIXPATH) $(CP) $(JDK_UNDER_TEST)\/lib\/classlist $$($1_AOT_JDK_CONF).jdk \\\n+\t))\n+\n+\t$$(FIXPATH) $$(CAT) $$($1_AOT_JDK_CONF).* > $$($1_AOT_JDK_CONF).temp\n+\t$$(FIXPATH) $$(CAT) $$($1_AOT_JDK_CONF).temp | $(GREP) -v '#' | $(GREP) -v '@' | $(SORT) | \\\n+\t        $(SED) -e 's\/id:.*\/\/g' | uniq \\\n+\t\t> $$($1_AOT_JDK_CONF)\n+\t$$(FIXPATH) $$(CAT) $$($1_AOT_JDK_CONF).temp | $(GREP) '@cp' | $(SORT) \\\n+\t        >> $$($1_AOT_JDK_CONF)\n+\n+\t$$(info AOT: Generate AOT cache $$($1_AOT_JDK_CACHE) with flags: $$($1_VM_OPTIONS))\n+\t$$(call ExecuteWithLog, $$($1_TEST_SUPPORT_DIR)\/aot, ( \\\n+\t\t$$(FIXPATH) $(JDK_UNDER_TEST)\/bin\/java \\\n+\t        $$($1_VM_OPTIONS) -Xlog:cds,cds+class=debug:file=$$($1_AOT_JDK_CACHE).log \\\n+\t\t-XX:AOTMode=create -XX:AOTConfiguration=$$($1_AOT_JDK_CONF) -XX:AOTCache=$$($1_AOT_JDK_CACHE) \\\n+\t))\n+\n+  $1_AOT_TARGETS += $$($1_AOT_JDK_CACHE)\n+\n+endef\n+\n+\n@@ -765,0 +818,1 @@\n+  JTREG_AOT_JDK ?= false\n@@ -894,0 +948,11 @@\n+  ifeq ($$(JTREG_AOT_JDK), true)\n+    $$(info Add AOT target for $1)\n+    $$(eval $$(call SetupAot, $1, VM_OPTIONS := $$(JTREG_ALL_OPTIONS) ))\n+\n+    $$(info AOT_TARGETS=$$($1_AOT_TARGETS))\n+    $$(info AOT_JDK_CACHE=$$($1_AOT_JDK_CACHE))\n+\n+    $1_JTREG_BASIC_OPTIONS += -vmoption:-XX:AOTCache=\"$$($1_AOT_JDK_CACHE)\"\n+  endif\n+\n+\n@@ -909,0 +974,1 @@\n+\t$$(call LogWarn, Clean up dirs for $1)\n@@ -956,1 +1022,1 @@\n-  run-test-$1: pre-run-test clean-outputdirs-$1\n+  run-test-$1: clean-outputdirs-$1 pre-run-test $$($1_AOT_TARGETS)\n","filename":"make\/RunTests.gmk","additions":69,"deletions":3,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -0,0 +1,18 @@\n+runtime\/modules\/PatchModule\/PatchModuleClassList.java 0000000 generic-all\n+runtime\/NMT\/NMTWithCDS.java                           0000000 generic-all\n+runtime\/symbols\/TestSharedArchiveConfigFile.java      0000000 generic-all\n+\n+gc\/arguments\/TestSerialHeapSizeFlags.java             0000000 generic-all\n+gc\/TestAllocateHeapAtMultiple.java                    0000000 generic-all\n+gc\/TestAllocateHeapAt.java                            0000000 generic-all\n+\n+# use -Xshare\n+serviceability\/sa\/ClhsdbCDSJstackPrintAll.java        0000000 generic-all\n+serviceability\/sa\/ClhsdbCDSCore.java                  0000000 generic-all\n+serviceability\/sa\/CDSJMapClstats.java                 0000000 generic-all\n+compiler\/intrinsics\/klass\/TestIsPrimitive.java        0000000 generic-all\n+\n+# This test is incompatible with AOTClassLinking.\n+# It has the assumption about unresolved Integer.\n+# However when AOTClassLinking is enabled, Integer is always resolved at JVM start-up.\n+compiler\/ciReplay\/TestInliningProtectionDomain.java   0000000 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList-AotJdk.txt","additions":18,"deletions":0,"binary":false,"changes":18,"status":"added"},{"patch":"@@ -63,0 +63,1 @@\n+  -runtime\/cds\/appcds\/aotClassLinking\/BulkLoaderTest.java \\\n@@ -595,0 +596,4 @@\n+tier1_runtime_no_cds = \\\n+   :tier1_runtime \\\n+   -runtime\/cds\n+\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,11 @@\n+java\/math\/BigInteger\/largeMemory\/DivisionOverflow.java          0000000 generic-all\n+java\/math\/BigInteger\/largeMemory\/StringConstructorOverflow.java 0000000 generic-all\n+\n+jdk\/internal\/misc\/CDS\/ArchivedEnumTest.java                     0000000 generic-all\n+\n+java\/lang\/module\/ModuleDescriptorHashCodeTest.java              0000000 generic-all\n+\n+\n+# The test case is incorrect. There's no guarantee that running a JVM with the following\n+# parameters will always cause the class java\/lang\/invoke\/MethodHandleStatics to be initialized\n+java\/lang\/invoke\/DumpMethodHandleInternals.java                 0000000 generic-all\n","filename":"test\/jdk\/ProblemList-AotJdk.txt","additions":11,"deletions":0,"binary":false,"changes":11,"status":"added"}]}