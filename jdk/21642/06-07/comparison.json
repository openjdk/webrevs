{"files":[{"patch":"@@ -341,1 +341,1 @@\n-void AOTClassInitializer::call_runtime_setup(InstanceKlass* ik, TRAPS) {\n+void AOTClassInitializer::call_runtime_setup(JavaThread* current, InstanceKlass* ik) {\n@@ -351,1 +351,6 @@\n-                           vmSymbols::void_method_signature(), CHECK);\n+                           vmSymbols::void_method_signature(), current);\n+    if (current->has_pending_exception()) {\n+      \/\/ We cannot continue, as we might have cached instances of ik in the heap, but propagating the\n+      \/\/ exception would cause ik to be in an error state.\n+      AOTLinkedClassBulkLoader::exit_on_exception(current);\n+    }\n","filename":"src\/hotspot\/share\/cds\/aotClassInitializer.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  static void call_runtime_setup(InstanceKlass* ik, TRAPS);\n+  static void call_runtime_setup(JavaThread* current, InstanceKlass* ik);\n","filename":"src\/hotspot\/share\/cds\/aotClassInitializer.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,1 +81,0 @@\n-    ResourceMark rm(current);\n@@ -84,8 +83,1 @@\n-    if (current->pending_exception()->is_a(vmClasses::OutOfMemoryError_klass())) {\n-      log_error(cds)(\"Out of memory. Please run with a larger Java heap, current MaxHeapSize = \"\n-                     SIZE_FORMAT \"M\", MaxHeapSize\/M);\n-    } else {\n-      log_error(cds)(\"%s: %s\", current->pending_exception()->klass()->external_name(),\n-                     java_lang_String::as_utf8_string(java_lang_Throwable::message(current->pending_exception())));\n-    }\n-    vm_exit_during_initialization(\"Unexpected exception when loading aot-linked classes.\");\n+    exit_on_exception(current);\n@@ -95,0 +87,13 @@\n+void AOTLinkedClassBulkLoader::exit_on_exception(JavaThread* current) {\n+  assert(current->has_pending_exception(), \"precondition\");\n+  ResourceMark rm(current);\n+  if (current->pending_exception()->is_a(vmClasses::OutOfMemoryError_klass())) {\n+    log_error(cds)(\"Out of memory. Please run with a larger Java heap, current MaxHeapSize = \"\n+                   SIZE_FORMAT \"M\", MaxHeapSize\/M);\n+  } else {\n+    log_error(cds)(\"%s: %s\", current->pending_exception()->klass()->external_name(),\n+                   java_lang_String::as_utf8_string(java_lang_Throwable::message(current->pending_exception())));\n+  }\n+  vm_exit_during_initialization(\"Unexpected exception when loading aot-linked classes.\");\n+}\n+\n","filename":"src\/hotspot\/share\/cds\/aotLinkedClassBulkLoader.cpp","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -64,0 +64,1 @@\n+  static void exit_on_exception(JavaThread* current);\n","filename":"src\/hotspot\/share\/cds\/aotLinkedClassBulkLoader.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -859,0 +859,1 @@\n+  AOTClassInitializer::call_runtime_setup(THREAD, this);\n@@ -860,1 +861,0 @@\n-  AOTClassInitializer::call_runtime_setup(this, CHECK);\n@@ -1660,1 +1660,1 @@\n-    AOTClassInitializer::call_runtime_setup(this, CHECK);\n+    AOTClassInitializer::call_runtime_setup(THREAD, this);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}