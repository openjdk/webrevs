{"files":[{"patch":"@@ -240,1 +240,1 @@\n-\/\/ match to leaPCompressedOopOffset, leaP8Narow, or leaP32Narrow. This happens for ideal graphs\n+\/\/ match to leaPCompressedOopOffset, leaP8Narrow, or leaP32Narrow. This happens for ideal graphs\n@@ -267,1 +267,1 @@\n-\/\/ In this case where the common parent of the leaP* and the decode is one MemToRegSpill Copy\n+\/\/ In this case where the common parent of the leaP* and the decode is one MemToRegSpillCopy\n@@ -297,1 +297,1 @@\n-  \/\/ Ensure the decode only has the leaP*s with the same (grand)parent and a MachProj leaf as children.\n+  \/\/ Ensure the decode only has the leaP*s (with the same (grand)parent) and a MachProj leaf as children.\n","filename":"src\/hotspot\/cpu\/x86\/peephole_x86_64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-\/\/ leaP8Narow, and leaP32Narrow and stem from a decodeHeapOopNotNull that is not needed\n+\/\/ leaP8Narrow, and leaP32Narrow and stem from a decodeHeapOopNotNull that is not needed\n@@ -141,1 +141,1 @@\n-                \/\/                                             leaPComperssedOopOffset  leaP(8|32)Narrow\n+                \/\/                                             leaPCompressedOopOffset  leaP(8|32)Narrow\n","filename":"test\/hotspot\/jtreg\/compiler\/codegen\/TestRedundantLea.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}