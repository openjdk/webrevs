{"files":[{"patch":"@@ -286,3 +286,6 @@\n-  bool is_spill = lea_derived_oop->in(AddPNode::Address) != decode->in(1) &&\n-                  lea_derived_oop->in(AddPNode::Address)->is_SpillCopy() &&\n-                  decode->in(1)->is_SpillCopy();\n+  Node* lea_address = lea_derived_oop->in(AddPNode::Address);\n+  Node* decode_address = decode->in(1);\n+\n+  bool is_spill = lea_address != decode->in(1) &&\n+                  lea_address->is_SpillCopy() &&\n+                  decode_address->is_SpillCopy();\n@@ -292,2 +295,2 @@\n-  if ((!is_spill && lea_derived_oop->in(AddPNode::Address) != decode->in(1)) ||\n-      (is_spill && lea_derived_oop->in(AddPNode::Address)->in(1) != decode->in(1)->in(1))) {\n+  if ((!is_spill && lea_address != decode_address) ||\n+      (is_spill && lea_address->in(1) != decode_address->in(1))) {\n@@ -314,2 +317,2 @@\n-          (other_lea->in(AddPNode::Address) == decode->in(1) ||\n-          (is_spill && other_lea->in(AddPNode::Address)->in(1) == decode->in(1)->in(1)))) {\n+          (other_lea->in(AddPNode::Address) == decode_address ||\n+          (is_spill && other_lea->in(AddPNode::Address)->in(1) == decode_address->in(1)))) {\n@@ -325,0 +328,2 @@\n+    \/\/ This should only fail if we are stressing scheduling.\n+    assert(StressGCM, \"should be scheduled contiguously otherwise\");\n@@ -335,3 +340,3 @@\n-    Node* out = decode->fast_out(i);\n-    if (out->is_Mach() && out->as_Mach()->ideal_Opcode() == Op_AddP) {\n-      out->set_req(\n+    Node* dependant_lea = decode->fast_out(i);\n+    if (dependant_lea->is_Mach() && dependant_lea->as_Mach()->ideal_Opcode() == Op_AddP) {\n+      dependant_lea->set_req(\n@@ -339,1 +344,1 @@\n-        is_spill ? out->in(AddPNode::Address)->in(1) : out->in(AddPNode::Address)\n+        is_spill ? dependant_lea->in(AddPNode::Address)->in(1) : dependant_lea->in(AddPNode::Address)\n@@ -348,2 +353,2 @@\n-  if (is_spill && decode->in(1)->is_Mach() && decode->in(1)->outcnt() == 1 && block->contains(decode->in(1))) {\n-    MachNode* decode_spill = decode->in(1)->as_Mach();\n+  if (is_spill && decode_address->is_Mach() && decode_address->outcnt() == 1 && block->contains(decode_address)) {\n+    MachNode* decode_spill = decode_address->as_Mach();\n","filename":"src\/hotspot\/cpu\/x86\/peephole_x86_64.cpp","additions":18,"deletions":13,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -6378,1 +6378,1 @@\n-instruct cmovI_rReg_rReg_memUCF_ndd(rRegI dst, cmpOpUCF cop, rFlagsRegUCF cr, rRegI src1, memory src2)\n+instruct cmovI_rReg_rReg_memUCF_ndd(rRegI dst, cmpOpUCF cop, rFlagsRegUCF cr, rRegI src1, memory src2) \n@@ -6761,1 +6761,1 @@\n-instruct cmovL_regUCF_ndd(rRegL dst, cmpOpUCF cop, rFlagsRegUCF cr, rRegL src1, rRegL src2)\n+instruct cmovL_regUCF_ndd(rRegL dst, cmpOpUCF cop, rFlagsRegUCF cr, rRegL src1, rRegL src2) \n@@ -6868,1 +6868,1 @@\n-instruct cmovL_rReg_rReg_memUCF_ndd(rRegL dst, cmpOpUCF cop, rFlagsRegUCF cr, rRegL src1, memory src2)\n+instruct cmovL_rReg_rReg_memUCF_ndd(rRegL dst, cmpOpUCF cop, rFlagsRegUCF cr, rRegL src1, memory src2) \n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}