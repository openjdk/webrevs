{"files":[{"patch":"@@ -351,1 +351,0 @@\n-\n","filename":"src\/hotspot\/cpu\/x86\/peephole_x86_64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -137,1 +137,0 @@\n-        int i = 0;\n@@ -139,9 +138,4 @@\n-        for (boolean negativeTest : new boolean[] {false, true}) {\n-            if (negativeTest) {\n-                scenarios[i] = new Scenario(i, \"-XX:+IgnoreUnrecognizedVMOptions\", \"-XX:-OptoPeephole\");\n-            } else {\n-                scenarios[i] = new Scenario(i, \"-XX:+IgnoreUnrecognizedVMOptions\", \"-XX:+OptoPeephole\");\n-            }\n-            i += 1;\n-        }\n-\n+        \/\/ Scenario for the negative test without peephole optimizations.\n+        scenarios[0] = new Scenario(0, \"-XX:+IgnoreUnrecognizedVMOptions\", \"-XX:-OptoPeephole\");\n+        \/\/ Scenario for the positive test with +OptoPeephole (the default on x64).\n+        scenarios[1] = new Scenario(1);\n@@ -267,5 +261,1 @@\n-    @IR(counts = {IRNode.LEA_P_8_NARROW, \"=1\"},\n-        phase = {CompilePhase.FINAL_CODE},\n-        applyIfAnd = {\"MaxHeapSize\", \"<1073741824\", \"UseAVX\", \"=3\"},\n-        applyIfPlatform = {\"mac\", \"false\"})\n-    @IR(counts = {IRNode.LEA_P_COMPRESSED_OOP_OFFSET, \"=1\"},\n+    @IR(counts = {IRNode.LEA_P, \"=1\"},\n@@ -273,1 +263,0 @@\n-        applyIfAnd = {\"MaxHeapSize\", \">1073741824\", \"UseAVX\", \"=3\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/codegen\/TestRedundantLea.java","additions":5,"deletions":16,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -878,18 +878,0 @@\n-    \/\/ Only supported on x86.\n-    public static final String LEA_P_COMPRESSED_OOP_OFFSET = PREFIX + \"LEA_P_COMPRESSED_OOP_OFFSET\" + POSTFIX;\n-    static {\n-        machOnly(LEA_P_COMPRESSED_OOP_OFFSET, \"leaPCompressedOopOffset\");\n-    }\n-\n-    \/\/ Only supported on x86.\n-    public static final String LEA_P_8_NARROW = PREFIX + \"LEA_P_8_NARROW\" + POSTFIX;\n-    static {\n-        machOnly(LEA_P_8_NARROW, \"leaP8Narrow\");\n-    }\n-\n-    \/\/ Only supported on x86.\n-    public static final String LEA_P_32_NARROW = PREFIX + \"LEA_P_32_NARROW\" + POSTFIX;\n-    static {\n-        machOnly(LEA_P_32_NARROW, \"leaP32Narrow\");\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"}]}