{"files":[{"patch":"@@ -733,3 +733,16 @@\n-  Node* nsr_value       = _igvn->zerocon(load_type->basic_type());\n-  Node* data_phi        = _igvn->transform(PhiNode::make(region, nsr_value, load_type));\n-  Node* memory          = curr_load->in(MemNode::Memory);\n+  Node* nsr_value = _igvn->zerocon(load_type->basic_type());\n+  Node* memory = curr_load->in(MemNode::Memory);\n+\n+  \/\/ The data_phi merging the loads needs to be nullable if\n+  \/\/ we are loading pointers.\n+  if (load_type->make_ptr() != nullptr) {\n+    if (load_type->isa_narrowoop()) {\n+      load_type = load_type->meet(TypeNarrowOop::NULL_PTR);\n+    } else if (load_type->isa_ptr()) {\n+      load_type = load_type->meet(TypePtr::NULL_PTR);\n+    } else {\n+      assert(false, \"Unexpected load ptr type.\");\n+    }\n+  }\n+\n+  Node* data_phi = PhiNode::make(region, nsr_value, load_type);\n@@ -749,1 +762,1 @@\n-      Node* load = _igvn->transform(curr_load->clone());\n+      Node* load = curr_load->clone();\n@@ -755,2 +768,2 @@\n-        Node* intermediate_phi = _igvn->transform(PhiNode::make(cmp_region, nsr_value, load_type));\n-        intermediate_phi->set_req(1, load);\n+        Node* intermediate_phi = PhiNode::make(cmp_region, nsr_value, load_type);\n+        intermediate_phi->set_req(1, _igvn->transform(load));\n@@ -760,1 +773,1 @@\n-      data_phi->set_req(i, load);\n+      data_phi->set_req(i, _igvn->transform(load));\n@@ -766,2 +779,2 @@\n-  \/\/ Takes care of updating CG and split_unique_types worklists due to cloned\n-  \/\/ AddP->Load.\n+  \/\/ Takes care of updating CG and split_unique_types worklists due\n+  \/\/ to cloned AddP->Load.\n@@ -770,1 +783,1 @@\n-  return data_phi;\n+  return _igvn->transform(data_phi);\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":23,"deletions":10,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8330565\n+ * @summary Check that Reduce Allocation Merges does not crash when legacy\n+ *          string concatenation optimization is applied.\n+ * @requires vm.flagless & vm.compiler2.enabled & vm.opt.final.EliminateAllocations\n+ * @compile -XDstringConcat=inline TestReduceAllocationAndNullableLoads.java\n+ * @run main\/othervm -XX:CompileCommand=compileonly,*TestReduceAllocationAndNullableLoads*::*\n+ *                   -XX:CompileCommand=dontinline,*TestReduceAllocationAndNullableLoads*::*\n+ *                   -XX:-TieredCompilation -Xcomp -server\n+ *                   compiler.c2.TestReduceAllocationAndNullableLoads\n+ *\/\n+\n+package compiler.c2;\n+\n+public class TestReduceAllocationAndNullableLoads {\n+    public static void main(String[] args) {\n+        try {\n+            \/\/ Load \/ initialize these classes\n+            IllegalArgumentException e = new IllegalArgumentException(\"Reason is: \");\n+            StringBuilder xixi = new StringBuilder(\"abc\");\n+\n+            \/\/ The actual test\n+            test(new char[] { 'a', 'b', 'c' });\n+        } catch (IllegalArgumentException e) { }\n+    }\n+\n+    public static void test(char[] chars) throws IllegalArgumentException {\n+        String reason = null;\n+\n+        for (int i = 0; i < chars.length; i++) {\n+            char c = chars[i];\n+\n+            if (c == 'a') {\n+                reason = \"first entry\" + i;\n+                break;\n+            }\n+        }\n+\n+        if (reason != null) {\n+            throw new IllegalArgumentException(\"Reason is: \" + reason);\n+        }\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestReduceAllocationAndNullableLoads.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}