{"files":[{"patch":"@@ -733,3 +733,16 @@\n-  Node* nsr_value       = _igvn->zerocon(load_type->basic_type());\n-  Node* data_phi        = _igvn->transform(PhiNode::make(region, nsr_value, load_type));\n-  Node* memory          = curr_load->in(MemNode::Memory);\n+  Node* nsr_value = _igvn->zerocon(load_type->basic_type());\n+  Node* memory = curr_load->in(MemNode::Memory);\n+\n+  \/\/ The data_phi merging the loads needs to be nullable if\n+  \/\/ we are loading pointers.\n+  if (load_type->make_ptr() != nullptr) {\n+    if (load_type->isa_narrowoop()) {\n+      load_type = load_type->meet(TypeNarrowOop::NULL_PTR);\n+    } else if (load_type->isa_ptr()) {\n+      load_type = load_type->meet(TypePtr::NULL_PTR);\n+    } else {\n+      assert(false, \"Unexpected load ptr type.\");\n+    }\n+  }\n+\n+  Node* data_phi = PhiNode::make(region, nsr_value, load_type);\n@@ -749,1 +762,1 @@\n-      Node* load = _igvn->transform(curr_load->clone());\n+      Node* load = curr_load->clone();\n@@ -755,2 +768,2 @@\n-        Node* intermediate_phi = _igvn->transform(PhiNode::make(cmp_region, nsr_value, load_type));\n-        intermediate_phi->set_req(1, load);\n+        Node* intermediate_phi = PhiNode::make(cmp_region, nsr_value, load_type);\n+        intermediate_phi->set_req(1, _igvn->transform(load));\n@@ -760,1 +773,1 @@\n-      data_phi->set_req(i, load);\n+      data_phi->set_req(i, _igvn->transform(load));\n@@ -766,17 +779,2 @@\n-  \/\/ The data_phi merging the loads needs to be nullable if we are loading\n-  \/\/ pointers\n-  if (load_type->make_ptr() != nullptr) {\n-    const Type* new_t = _igvn->type(data_phi);\n-    if (load_type->isa_narrowoop()) {\n-      new_t = load_type->meet(TypeNarrowOop::NULL_PTR);\n-    } else if (load_type->isa_narrowklass()) {\n-      new_t = load_type->meet(TypeNarrowKlass::NULL_PTR);\n-    } else if (load_type->isa_ptr()) {\n-      new_t = load_type->meet(TypePtr::NULL_PTR);\n-    }\n-    _igvn->set_type(data_phi,  new_t);\n-    data_phi->raise_bottom_type(new_t);\n-  }\n-\n-  \/\/ Takes care of updating CG and split_unique_types worklists due to cloned\n-  \/\/ AddP->Load.\n+  \/\/ Takes care of updating CG and split_unique_types worklists due\n+  \/\/ to cloned AddP->Load.\n@@ -785,1 +783,1 @@\n-  return data_phi;\n+  return _igvn->transform(data_phi);\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":23,"deletions":25,"binary":false,"changes":48,"status":"modified"}]}