{"files":[{"patch":"@@ -1988,1 +1988,1 @@\n-  develop(bool, SimulateFullAdressSpace, false,                             \\\n+  develop(bool, SimulateFullAddressSpace, false,                             \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1813,1 +1813,1 @@\n-  char* result = SimulateFullAdressSpace ? nullptr : pd_attempt_reserve_memory_at(addr, bytes, executable);\n+  char* result = SimulateFullAddressSpace ? nullptr : pd_attempt_reserve_memory_at(addr, bytes, executable);\n@@ -1989,1 +1989,1 @@\n-    result = SimulateFullAdressSpace ? nullptr : os::pd_attempt_reserve_memory_at(candidate, bytes, false);\n+    result = SimulateFullAddressSpace ? nullptr : os::pd_attempt_reserve_memory_at(candidate, bytes, false);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @requires os.family != \"windows\"\n@@ -43,0 +44,4 @@\n+    \/\/ Note: windows: On windows, we currently have the issue that os::reserve_memory_aligned relies on\n+    \/\/ os::attempt_reserve_memory_at because VirtualAlloc cannot be unmapped in parts; this precludes use of\n+    \/\/ +SimulateFullAddressSpace (VM won't be able to reserve heap). Therefore we exclude the test for windows\n+    \/\/ for now.\n@@ -53,2 +58,2 @@\n-                \"-Xlog:metaspace+map=trace\", \"-Xlog:os+map=trace\",\n-                \"-XX:+SimulateFullAdressSpace\", \/\/ So that no resevation attempt will succeed\n+                \"-Xlog:metaspace*\", \"-Xlog:metaspace+map=trace\", \"-Xlog:os+map=trace\",\n+                \"-XX:+SimulateFullAddressSpace\", \/\/ So that no resevation attempt will succeed\n@@ -111,0 +116,8 @@\n+\n+        \/\/ In all cases we should have managed to map successfully eventually\n+        if (CDS) {\n+            output.shouldContain(\"CDS archive(s) mapped at:\");\n+        } else {\n+            output.shouldContain(\"CDS archive(s) not mapped\");\n+        }\n+        output.shouldContain(\"Compressed class space mapped at:\");\n","filename":"test\/hotspot\/jtreg\/runtime\/CompressedOops\/CompressedCPUSpecificClassSpaceReservation.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"}]}