{"files":[{"patch":"@@ -1994,0 +1994,5 @@\n+                                                                            \\\n+  develop(bool, SimulateFullAdressSpace, false,                             \\\n+          \"Simulates a very populated, fragmented address space; no \"       \\\n+          \"targeted reservations will succeed.\")                            \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1989,1 +1989,1 @@\n-    result = os::pd_attempt_reserve_memory_at(candidate, bytes, false);\n+    result = SimulateFullAdressSpace ? nullptr : os::pd_attempt_reserve_memory_at(candidate, bytes, false);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test the various CPU-specific reservation schemes\n+ * @requires vm.bits == 64 & !vm.graal.enabled & vm.debug == true\n+ * @requires vm.flagless\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver CompressedCPUSpecificClassSpaceReservation\n+ *\/\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jtreg.SkippedException;\n+\n+import java.io.IOException;\n+\n+public class CompressedCPUSpecificClassSpaceReservation {\n+\n+    private static void do_test(boolean CDS) throws IOException {\n+        \/\/ We start the VM with -XX:+SimulateFullAdressSpace, which means the JVM will go through all motions\n+        \/\/ of reserving the cds+class space, but never succeed. That means we see every single allocation attempt.\n+        \/\/ We start with -Xlog options enabled. The expected output goes like this:\n+        \/\/ [0.017s][debug][os,map] reserve_between (range [0x0000000000000000-0x0000000100000000), size 0x41000000, alignment 0x1000000, randomize: 1)\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+                \"-Xshare:\" + (CDS ? \"on\" : \"off\"),\n+                \"-Xmx128m\",\n+                \"-XX:CompressedClassSpaceSize=128m\",\n+                \"-Xlog:metaspace+map=trace\", \"-Xlog:os+map=trace\",\n+                \"-XX:+SimulateFullAdressSpace\", \/\/ So that no resevation attempt will succeed\n+                \"-version\");\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+\n+        final String tryReserveForUnscaled = \"reserve_between (range [0x0000000000000000-0x0000000100000000)\";\n+        final String tryReserveForZeroBased = \"reserve_between (range [0x0000000100000000-0x0000000800000000)\";\n+        final String tryReserveFor16bitMoveIntoQ3 = \"reserve_between (range [0x0000000100000000-0x0001000000000000)\";\n+        if (Platform.isAArch64()) {\n+            if (CDS) {\n+                output.shouldNotContain(tryReserveForUnscaled);\n+            } else {\n+                output.shouldContain(tryReserveForUnscaled);\n+            }\n+            output.shouldNotContain(tryReserveForZeroBased);\n+            output.shouldContain(tryReserveFor16bitMoveIntoQ3);\n+        } else if (Platform.isPPC()) {\n+            if (CDS) {\n+                output.shouldNotContain(tryReserveForUnscaled);\n+                output.shouldNotContain(tryReserveForZeroBased);\n+            } else {\n+                output.shouldContain(tryReserveForUnscaled);\n+                output.shouldContain(tryReserveForZeroBased);\n+            }\n+            output.shouldContain(tryReserveFor16bitMoveIntoQ3);\n+        } else if (Platform.isRISCV64()) {\n+            output.shouldContain(tryReserveForUnscaled); \/\/ unconditionally\n+            if (CDS) {\n+                output.shouldNotContain(tryReserveForZeroBased);\n+                \/\/ bits 32..44\n+                output.shouldContain(\"reserve_between (range [0x0000000100000000-0x0000100000000000)\");\n+            } else {\n+                output.shouldContain(tryReserveForZeroBased);\n+                \/\/ bits 32..44, but not lower than zero-based limit\n+                output.shouldContain(\"reserve_between (range [0x0000000800000000-0x0000100000000000])\");\n+            }\n+            \/\/ bits 44..64\n+            output.shouldContain(\"reserve_between (range [0x0000100000000000-0xffffffffffffffff)\");\n+        } else if (Platform.isS390x()) {\n+            output.shouldContain(tryReserveForUnscaled); \/\/ unconditionally\n+            if (CDS) {\n+                output.shouldNotContain(tryReserveForZeroBased);\n+            } else {\n+                output.shouldContain(tryReserveForZeroBased);\n+            }\n+            output.shouldContain(tryReserveFor16bitMoveIntoQ3);\n+        } else if (Platform.isX64()) {\n+            if (CDS) {\n+                output.shouldNotContain(tryReserveForUnscaled);\n+                output.shouldNotContain(tryReserveForZeroBased);\n+            } else {\n+                output.shouldContain(tryReserveForUnscaled);\n+                output.shouldContain(tryReserveForZeroBased);\n+            }\n+        } else {\n+            throw new RuntimeException(\"Unexpected platform\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        System.out.println(\"Test with CDS\");\n+        do_test(true);\n+        System.out.println(\"Test without CDS\");\n+        do_test(false);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/CompressedOops\/CompressedCPUSpecificClassSpaceReservation.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"}]}