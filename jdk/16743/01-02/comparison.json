{"files":[{"patch":"@@ -27,0 +27,1 @@\n+#include \"asm\/assembler.hpp\"\n@@ -29,0 +30,1 @@\n+#include \"memory\/metaspace.hpp\"\n@@ -32,0 +34,48 @@\n+\/\/ Helper function; reserve at an address that is compatible with EOR\n+static char* reserve_at_eor_compatible_address(size_t size, bool aslr) {\n+  char* result = nullptr;\n+\n+  log_debug(metaspace, map)(\"Trying to reserve at an EOR-compatible address\");\n+\n+  \/\/ We need immediates that are 32-bit aligned, since they should not intersect nKlass\n+  \/\/ bits. They should not be larger than the addressable space either, but we still\n+  \/\/ lack a good abstraction for that (see JDK-8320584), therefore we assume and hard-code\n+  \/\/ 2^48 as a reasonable higher ceiling.\n+  static const uint16_t immediates[] = {\n+      0x0001, 0x0002, 0x0003, 0x0004, 0x0006, 0x0007, 0x0008, 0x000c, 0x000e,\n+      0x000f, 0x0010, 0x0018, 0x001c, 0x001e, 0x001f, 0x0020, 0x0030, 0x0038,\n+      0x003c, 0x003e, 0x003f, 0x0040, 0x0060, 0x0070, 0x0078, 0x007c, 0x007e,\n+      0x007f, 0x0080, 0x00c0, 0x00e0, 0x00f0, 0x00f8, 0x00fc, 0x00fe, 0x00ff,\n+      0x0100, 0x0180, 0x01c0, 0x01e0, 0x01f0, 0x01f8, 0x01fc, 0x01fe, 0x01ff,\n+      0x0200, 0x0300, 0x0380, 0x03c0, 0x03e0, 0x03f0, 0x03f8, 0x03fc, 0x03fe,\n+      0x03ff, 0x0400, 0x0600, 0x0700, 0x0780, 0x07c0, 0x07e0, 0x07f0, 0x07f8,\n+      0x07fc, 0x07fe, 0x07ff, 0x0800, 0x0c00, 0x0e00, 0x0f00, 0x0f80, 0x0fc0,\n+      0x0fe0, 0x0ff0, 0x0ff8, 0x0ffc, 0x0ffe, 0x0fff, 0x1000, 0x1800, 0x1c00,\n+      0x1e00, 0x1f00, 0x1f80, 0x1fc0, 0x1fe0, 0x1ff0, 0x1ff8, 0x1ffc, 0x1ffe,\n+      0x1fff, 0x2000, 0x3000, 0x3800, 0x3c00, 0x3e00, 0x3f00, 0x3f80, 0x3fc0,\n+      0x3fe0, 0x3ff0, 0x3ff8, 0x3ffc, 0x3ffe, 0x3fff, 0x4000, 0x6000, 0x7000,\n+      0x7800, 0x7c00, 0x7e00, 0x7f00, 0x7f80, 0x7fc0, 0x7fe0, 0x7ff0, 0x7ff8,\n+      0x7ffc, 0x7ffe, 0x7fff\n+  };\n+  static constexpr int num_immediates = sizeof(immediates) \/ sizeof(uint16_t);\n+  const int start_index = aslr ? os::random() : 0;\n+  constexpr int max_tries = 64;\n+  for (int ntry = 0; result == nullptr && ntry < max_tries; ntry ++) {\n+    \/\/ As in os::attempt_reserve_memory_between, we alternate between higher and lower\n+    \/\/ addresses; this maximizes the chance of early success if part of the address space\n+    \/\/ is not accessible (e.g. 39-bit address space).\n+    const int alt_index = (ntry & 1) ? 0 : num_immediates \/ 2;\n+    const int index = (start_index + ntry + alt_index) % num_immediates;\n+    const uint64_t immediate = ((uint64_t)immediates[index]) << 32;\n+    assert(immediate > 0 && Assembler::operand_valid_for_logical_immediate(\/*is32*\/false, immediate),\n+           \"Invalid immediate %d \" UINT64_FORMAT, index, immediate);\n+    result = os::attempt_reserve_memory_at((char*)immediate, size, false);\n+    if (result == nullptr) {\n+      log_trace(metaspace, map)(\"Failed to attach at \" PTR_FORMAT, immediate);\n+    }\n+  }\n+  if (result == nullptr) {\n+    log_debug(metaspace, map)(\"Failed to reserve at any EOR-compatible address\");\n+  }\n+  return result;\n+}\n@@ -42,1 +92,6 @@\n-  \/\/ advantages over movk mode.\n+  \/\/ advantages over EOR or movk mode.\n+\n+  \/\/ EOR-compatible reservation\n+  if (result == nullptr) {\n+    result = reserve_at_eor_compatible_address(size, aslr);\n+  }\n@@ -44,1 +99,1 @@\n-  \/\/ Allocate for movk mode: aim for a base address that has only bits set in the third quadrant.\n+  \/\/ Movk-compatible reservation via probing.\n@@ -49,0 +104,1 @@\n+  \/\/ Movk-compatible reservation via overallocation.\n","filename":"src\/hotspot\/cpu\/aarch64\/compressedKlass_aarch64.cpp","additions":58,"deletions":2,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -1812,1 +1812,1 @@\n-  char* result = pd_attempt_reserve_memory_at(addr, bytes, executable);\n+  char* result = SimulateFullAdressSpace ? nullptr : pd_attempt_reserve_memory_at(addr, bytes, executable);\n@@ -1820,1 +1820,0 @@\n-\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+            output.shouldContain(\"Trying to reserve at an EOR-compatible address\");\n","filename":"test\/hotspot\/jtreg\/runtime\/CompressedOops\/CompressedCPUSpecificClassSpaceReservation.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}