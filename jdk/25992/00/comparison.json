{"files":[{"patch":"@@ -0,0 +1,1113 @@\n+# Categorizing new C++17 features for HotSpot\n+\n+I'm hijacking the PR mechanism as a way to discuss new C++17 features that can\n+be more easily structured and captured than bare email. Once discussion\n+settles down I'll turn the results into HotSpot Style Guide changes. I don't\n+intend to integrate any version of this document to the OpenJDK repository.\n+\n+Of course, this assumes we're going to move the OpenJDK from C++14 to\n+C++17. That should also be part of the conversation. Thanks to some\n+preparatory work, the mainline JDK can already be built with C++17 enabled and\n+there don't seem to be any problems arising from doing so.\n+\n+Below is a list of (most of) the new features from C++17, categorized\n+according to whether they should be (1) permitted in HotSpot, (2) forbidden in\n+HotSpot, or (3) undecided (so implicitly forbidden). This is an early draft,\n+and feedback is requested.\n+\n+The list of features is mostly drawn from the book\n+[C++17: The Complete Guide](https:\/\/www.cppstd17.com\/),\n+by Nicolai M. Josuttis.\n+It's not a reference. Rather, it provides a summary of each new feature, along\n+with links to relevant papers. It was invaluable for writing this document,\n+but shouldn't be required reading for making decisions. Sections here are\n+chapters and sections from this book. The listed links are also mostly from\n+this book. Note that there seem to be a few features not covered by this book.\n+\n+Alternatively, there is a freely available list of features, which includes\n+very brief summaries:\n+[Changes between C++14 and C++17 DIS](https:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2017\/p0636r1.html).\n+There are a couple of features in that paper that aren't in the Josuttis book.\n+\n+## Permissive vs Restrictive\n+\n+There are different approaches that could be taken to the catagorization of\n+new features.\n+\n+Clearly, if there is some technical blocker, such as relying on RTTI or being\n+unable to configure allocation, a feature cannot be used in HotSpot.\n+Similarly for features that are incompatible with existing practice in\n+HotSpot, such as many new Standard Library features.\n+\n+Equally clearly, we want to permit features that have strong immediate\n+use-cases and no technical blockers.\n+\n+But for many features, it's less clear. And for those we can be initially\n+inclusive and permit the use of most new features, or we can be restrictive,\n+and only permit those with known immediate use-cases. Both approaches have\n+costs and benefits.\n+\n+Being permissive allows developers to explore usage, potentially finding a\n+better way to accomplish some task. On the other hand, such exploration can\n+produce bad usage due to lack of experience with a feature. It can also lead\n+to review problems, both because reviewers may not be familiar with a feature\n+and because issues of style and what constitutes readable code may arise.\n+\n+Another cost of being permissive is that it expands the stuff that all HotSpot\n+developers must learn or at least be prepared to encounter. That's one of the\n+reasons we forbid large amounts of C++; not just potential runtime overheads,\n+but also human training costs. Learning the intricacies of obscure corners of\n+C++ (and there are a lot of those) may distract making improvements to the\n+JVM. Meanwhile, we have our own way of doing certain things, some of which are\n+not mainstream C++, or are problems specific to the JVM. There's plenty for\n+folks to learn in the JVM, and it's good that they don't have to learn _all_\n+of C++ as well.\n+\n+On the other hand, being restrictive may result in dismissal of some feature\n+that might be exactly what is needed to solve a task elegantly and cleanly,\n+just because it isn't already in the permitted C++ subset. An example is\n+Forwarding References, also known as Universal References.\n+\n+## Permitted features\n+\n+Some features are permitted without qualifications. In such cases we note the\n+feature as `PERMITTED_UNQUALIFIED`.\n+\n+Some features are permitted because they are implicit (don't involve any\n+explicit syntax or calls) and are unavoidable. In such cases we note the\n+feature as `PERMITTED_UNAVOIDABLE`. These also have impact on C++ code in the\n+rest of the OpenJDK, not just on HotSpot code.\n+\n+### 2. `if` and `switch` with Initialization\n+\n+Limiting the scope of a variable to the containing statement is\n+beneficial. The alternative method of scope-limiting via scope nesting isn't\n+very popular. But complex uses can make the condition form much more\n+complicated, interfering with readability.\n+\n+The guidance against using implicit conversions to bool still stands.\n+\n+[p0305r0](http:\/\/wg21.link\/p0305r0)\n+[p0305r1](http:\/\/wg21.link\/p0305r1)\n+\n+A specific use-case that was mentioned is UL when checking whether a\n+`LogTarget` is enabled, e.g.  instead of\n+\n+```\n+  LogTarget(...) lt;\n+  if (lt.is_enabled()) {\n+    LogStream log(lt);\n+    ... use log ...\n+  }\n+  ... lt is accessible but probably not needed here ...\n+```\n+\n+one could write\n+\n+```\n+  if (LogTarget(...) lt; lt.is_enabled()) {\n+    LogStream log(lt);\n+    ... use log ...\n+  }\n+```\n+\n+or even (if the performance cost of unconditionally creating the stream is okay)\n+\n+```\n+  if (LogStreamHandle(...) log; log.is_enabled()) {\n+    ... use log ...\n+  }\n+```\n+\n+### 3. Inline Variables\n+\n+`PERMITTED_UNQUALIFIED`\n+\n+[n4147](http:\/\/wg21.link\/n4147)\n+[n4424](http:\/\/wg21.link\/n4424)\n+[p0386r2](http:\/\/wg21.link\/p0386r2)\n+\n+### 5. Mandatory Copy Elision\n+\n+`PERMITTED_UNQUALIFIED`\n+`PERMITTED_UNAVOIDABLE`\n+\n+Copy elision when initializing an object from a temporary is mandatory. No\n+copy\/move ctor needs to be declared. Note that other forms of copy elision\n+(such as NRVO) are still optional, and still require a copy\/move ctor be\n+available, even if it might not be used.\n+\n+No known backward compatibility issues for non-HotSpot OpenJDK.\n+\n+[p0135r0](http:\/\/wg21.link\/p0135r0)\n+[p0135r1](http:\/\/wg21.link\/p0135r1)\n+\n+### 6. Lambda Extensions\n+\n+#### 6.1 `constexpr` Lambdas\n+\n+`PERMITTED_UNQUALIFIED`\n+\n+C++17 makes lambdas implicitly `constexpr` when that's possible.\n+\n+[n4487](http:\/\/wg21.link\/n4487)\n+[p0170r1](http:\/\/wg21.link\/p0170r1)\n+\n+### 7. New Attributes and Attribute Features\n+\n+[p0068r0](http:\/\/wg21.link\/p0068r0)\n+\n+#### 7.1. `[[nodiscard]]`\n+\n+`PERMITTED_UNQUALIFIED`\n+\n+[p0189r1](http:\/\/wg21.link\/p0189r1)\n+\n+#### 7.2. `[[maybe_unused]]`\n+\n+`PERMITTED_UNQUALIFIED`\n+\n+[p0212r1](http:\/\/wg21.link\/p0212r1)\n+\n+#### 7.3. `[[fallthrough]]`\n+\n+`PERMITTED_UNQUALIFIED`\n+\n+However, the relevant compiler warning is not currently enabled, or is\n+disabled, depending on which compiler is involved. Enabling the warnings\n+likely requires significant work.\n+\n+[p0188r1](http:\/\/wg21.link\/p0188r1)\n+\n+### 8. Other Language Features\n+\n+#### 8.2. Defined Expression Evaluation Order\n+\n+`PERMITTED_UNAVOIDABLE`\n+\n+It is possible that code that previously \"worked\" despite invoking undefined\n+behavior will now have defined but different behavior. Hopefully we won't run\n+into (many) such cases.\n+\n+[n4228](http:\/\/wg21.link\/n4228)\n+[p0145r3](http:\/\/wg21.link\/p0145r3)\n+\n+#### 8.3. Relaxed Enum Initialization from Integral Values\n+\n+`PERMITTED_UNQUALIFIED`\n+\n+[p0138r0](http:\/\/wg21.link\/p0138r0)\n+[p0138r2](http:\/\/wg21.link\/p0138r2)\n+\n+#### 8.5. Hexadecimal Floating-Point Literals\n+\n+`PERMITTED_UNQUALIFIED`\n+\n+There are floating point values constructed via casts that could be converted\n+to use this new syntax.\n+\n+[p0245r0](http:\/\/wg21.link\/p0245r0)\n+[p0245r1](http:\/\/wg21.link\/p0245r1)\n+\n+#### 8.7. Exception Specifications as Part of the Type\n+\n+`PERMITTED_UNAVOIDABLE`\n+\n+The Style Guide needs to be updated regarding exception specifications.\n+[JDK-8255082](https:\/\/bugs.openjdk.org\/browse\/JDK-8255082)\n+[PR 25574](https:\/\/github.com\/openjdk\/jdk\/pull\/25574)\n+\n+This could cause problems for non-HotSpot OpenJDK code. That would be detected\n+at build time, and there's no indication of a problem.\n+\n+[n4320](http:\/\/wg21.link\/n4320)\n+[p0012r1](http:\/\/wg21.link\/p0012r1)\n+\n+#### 8.8. Single-Argument `static_assert`\n+\n+`PERMITTED_UNQUALIFIED`\n+\n+[n3928](http:\/\/wg21.link\/n3928)\n+\n+#### 8.9. Preprocessor Condition `__has_include`\n+\n+`PERMITTED_UNQUALIFIED`\n+\n+[p0061r0](http:\/\/wg21.link\/p0061r0)\n+[p0061r1](http:\/\/wg21.link\/p0061r1)\n+\n+### 9. Class Template Argument Deduction\n+\n+#### 9.1. Use of Class Template\n+\n+`PERMITTED_UNQUALIFIED`\n+\n+[n2332](http:\/\/wg21.link\/n2332)\n+[n3602](http:\/\/wg21.link\/n3602)\n+[p0091r3](http:\/\/wg21.link\/p0091r3)\n+[p0512r0](http:\/\/wg21.link\/p0512r0)\n+[p0620r0](http:\/\/wg21.link\/p0620r0)\n+[p702r1](http:\/\/wg21.link\/p702r1)\n+\n+#### 9.2. Deduction Guides\n+\n+`PERMITTED_UNQUALIFIED`\n+\n+This feature allows the addition of a scope-guard mechanism with nice syntax.\n+\n+```\n+  ScopeGuard guard{[&]{ ... cleanup code ... }};\n+```\n+\n+[p0433r2](http:\/\/wg21.link\/p0433r2)\n+[p0739r0](http:\/\/wg21.link\/p0739r0)\n+\n+### 10. Compile-time If\n+\n+`PERMITTED_UNQUALIFIED`\n+\n+For compile-time `if` with initialization, see item 2.\n+\n+[n3329](http:\/\/wg21.link\/n3329)\n+[n4461](http:\/\/wg21.link\/n4461)\n+[p0128r0](http:\/\/wg21.link\/p0128r0)\n+[p0292r2](http:\/\/wg21.link\/p0292r2)\n+\n+### 12. Dealing with String Literals as Template Parameters\n+\n+`PERMITTED_UNQUALIFIED`\n+\n+Note: A string literal still can't be used directly as a template parameter.\n+\n+[n4198](http:\/\/wg21.link\/n4198)\n+[n4268](http:\/\/wg21.link\/n4268)\n+\n+### 13. Placeholder Types like `auto` as Template Parameters\n+\n+#### 13.1. Using `auto` for Template Parameters\n+\n+`PERMITTED_UNQUALIFIED`\n+\n+See also section 13.2.\n+\n+[n4469](http:\/\/wg21.link\/n4469)\n+[p0127r2](http:\/\/wg21.link\/p0127r2)\n+\n+### 21. Extensions to Type Traits\n+\n+#### 21.1. Type Traits Suffix `_v`\n+\n+`PERMITTED_UNQUALIFIED`\n+\n+This is covered by the existing guidance that `<type_traits>` can be used.\n+\n+[n3854](http:\/\/wg21.link\/n3854)\n+[p0006r0](http:\/\/wg21.link\/p0006r0)\n+\n+#### 21.2. New Type Traits\n+\n+`PERMITTED_UNQUALIFIED`\n+\n+This is covered by the existing guidance that `<type_traits>` can be used.\n+\n+[lwg2911](http:\/\/wg21.link\/lwg2911)\n+[n3619](http:\/\/wg21.link\/n3619)\n+[p0185r1](http:\/\/wg21.link\/p0185r1)\n+[p0258r0](http:\/\/wg21.link\/p0258r0)\n+[p0258r2](http:\/\/wg21.link\/p0258r2)\n+[n4446](http:\/\/wg21.link\/n4446)\n+[p0604r0](http:\/\/wg21.link\/p0604r0)\n+[p0013r0](http:\/\/wg21.link\/p0013r0)\n+[p0013r1](http:\/\/wg21.link\/p0013r1)\n+\n+### 28. Other Small Library Features and Modifications\n+\n+#### 28.5. `constexpr` Extensions and Fixes\n+\n+`PERMITTED_UNQUALIFIED`\n+\n+Where a function is permitted at all, if it is now `constexpr` then it can be\n+used as such. Note, however, that most of the functions newly made `constexpr`\n+by C++17 are forbidden as being in the Standard Library.\n+\n+[p0505r0](http:\/\/wg21.link\/p0505r0)\n+[p0092r1](http:\/\/wg21.link\/p0092r1)\n+[p0031r0](http:\/\/wg21.link\/p0031r0)\n+[p0426r1](http:\/\/wg21.link\/p0426r1)\n+\n+#### 28.6. `noexcept` Extensions and Fixes\n+\n+`PERMITTED_UNAVOIDABLE`\n+\n+Where a function is permitted at all, if it is now `noexcept` then it can be\n+used as such. Note, however, that most of the functions newly made `noexcept`\n+by C++17 are forbidden as being in the Standard Library.\n+\n+[n4002](http:\/\/wg21.link\/n4002)\n+[n4258](http:\/\/wg21.link\/n4258)\n+\n+#### 34.2. Compatibility with C11\n+\n+`PERMITTED_UNQUALIFIED`\n+\n+We can now use (some? because of varying levels of compatibility) C11 Standard\n+Library features from HotSpot (and any other part of the OpenJDK written in\n+C++).\n+\n+Not that it matters much, but we already select C11 (where possible) for parts\n+of the OpenJDK written in C.\n+\n+This might have some impact on non-HotSpot OpenJDK code written in C++.\n+\n+[p0063r0](http:\/\/wg21.link\/p0063r0)\n+[n3631](http:\/\/wg21.link\/n3631)\n+[p0063r3](http:\/\/wg21.link\/p0063r3)\n+\n+### 35. Deprecated and Removed Features\n+\n+#### 35.1. Deprecated and Removed Core Language Features\n+\n+##### 35.1.1. Throw Specifications\n+\n+We don't use non-empty `throw` specifications in the OpenJDK. Where we use empty\n+`throw` specifications, we should switch over to using `noexcept`.\n+\n+There don't appear to be any non-empty `throw` specifications elsewhere in the\n+OpenJDK.\n+\n+See also 8.7.\n+\n+[p0003r5](http:\/\/wg21.link\/p0003r5)\n+\n+##### 35.1.5. Definition\/Redeclaration of `static constexpr` Members\n+\n+(Not in Jossutis book)\n+`PERMITTED_UNQUALIFIED`\n+\n+Since C++14 a definition was only needed when the member is ODR-used. That's\n+relatively rare, so it's likely there aren't many of these no longer needed\n+definitions. Generalizing the range-based for loop\n+\n+[p0184r0](http:\/\/wg21.link\/p0184r0)\n+\n+## Forbidden features\n+\n+Some features are forbidden because HotSpot doesn't use most of the C++\n+Standard Library. In such cases we note the feature as\n+`FORBIDDEN_STANDARD_LIBRARY`.\n+\n+Some features are forbidden based on a return on investment argument. If a\n+feature is permitted then any HotSpot developer may encounter a use, so must\n+be at least somewhat familiar with it. But if the provided benefit is\n+(perceived to be) small, or (especially) if the feature is expected to be used\n+rarely, making every HotSpot developer learn about it may not be a good use of\n+their time. In such cases we note the feature as `FORBIDDEN_ROI`.\n+\n+### 1. Structured Bindings\n+\n+`FORBIDDEN_ROI`\n+\n+[p0144r0](http:\/\/wg21.link\/p0144r0)\n+[p0217r3](http:\/\/wg21.link\/p0217r3)\n+\n+### 4. Aggregate Extensions\n+\n+`FORBIDDEN_ROI`\n+\n+[n4404](http:\/\/wg21.link\/n4404)\n+[p0017r1](http:\/\/wg21.link\/p0017r1)\n+\n+### 6. Lambda Extensions\n+\n+#### 6.2. Passing Copies of `this` to Lambdas\n+\n+One of the motivating use-cases is when the lifetime of the lambda exceeds the\n+lifetime of the object for the containing member function. That is, we have an\n+upward lambda that is capturing `this` of the enclosing method. But since we\n+already forbid the use of upward lambdas, that use-case isn't relevant.\n+\n+Another use-case is when we simply want the lambda to be operating on a copy\n+of `this` for some reason. `FORBIDDEN_ROI`.\n+\n+[p0018r0](http:\/\/wg21.link\/p0018r0)\n+[p0180r3](http:\/\/wg21.link\/p0180r3)\n+\n+### 6.3. Capturing by `const` Reference\n+\n+An explicit capture parameter can be captured by `const` reference through the\n+use of the library function `std::as_const`. But explicit capture parameters\n+are recommended against in HotSpot. `FORBIDDEN_ROI`.\n+\n+### 7. New Attributes and Attribute Features\n+\n+#### 7.4. General Attribute Extensions\n+\n+##### 7.4.1. Attributes for namespaces\n+\n+Probably not relevant for HotSpot. The only relevant attribute seems to be\n+`[[deprecated]]` and we wouldn't use that in HotSpot.\n+\n+[n4196](http:\/\/wg21.link\/n4196)\n+[n4266](http:\/\/wg21.link\/n4266)\n+\n+##### 7.4.2. Attributes for enumerators\n+\n+Probably not relevant for HotSpot. The only relevant attribute seems to be\n+`[[deprecated]]` and we wouldn't use that in HotSpot.\n+\n+[n4196](http:\/\/wg21.link\/n4196)\n+[n4266](http:\/\/wg21.link\/n4266)\n+\n+##### 7.4.3. `using` directive in attribute lists.\n+\n+We don't generally use scoped attributes in attribute lists with other\n+attributes. Rather, any use of scoped attributes (which are implementation\n+defined) are generally hidden behind a portability macro that includes the\n+surrounding brackets.\n+\n+[p0028r0](http:\/\/wg21.link\/p0028r0)\n+[p0028r4](http:\/\/wg21.link\/p0028r4)\n+\n+### 13. Placeholder Types like `auto` as Template Parameters\n+\n+#### 13.3. Using `decltype(auto)` as Template Parameter\n+\n+`FORBIDDEN_ROI`\n+\n+[n4469](http:\/\/wg21.link\/n4469)\n+[p0127r2](http:\/\/wg21.link\/p0127r2)\n+\n+### 14. Extended `using` Declarations\n+\n+#### 14.1. Using Variadic Using Declarations\n+\n+`FORBIDDEN_ROI`\n+\n+[p0195r0](http:\/\/wg21.link\/p0195r0)\n+[p0195r2](http:\/\/wg21.link\/p0195r2)\n+\n+#### 14.2. Variadic Using Declarations for Inheriting Constructors\n+\n+`FORBIDDEN_ROI`\n+\n+Inherited constructors are currently a forbidden feature in the style guide,\n+because there are problems with the specification. Those problems are fixed in\n+C++17, but it remains dubious that we would use this feature enough make it\n+worth permitting. Even more so for this new feature.\n+\n+[n4429](http:\/\/wg21.link\/n4429)\n+[p0136r1](http:\/\/wg21.lini\/p0136r1)\n+\n+### 16. `std::variant<>`\n+\n+`FORBIDDEN_STANDARD_LIBRARY`\n+\n+Additionally, invalid access is indicated by throwing an exception.\n+\n+[n4218](http:\/\/wg21.link\/n4218)\n+[p0088r3](http:\/\/wg21.link\/p0088r3)\n+[p0393r3](http:\/\/wg21.link\/p0393r3)\n+[p0032r3](http:\/\/wg21.link\/p0032r3)\n+[p0504r0](http:\/\/wg21.link\/p0504r0)\n+[p0510r0](http:\/\/wg21.link\/p0510r0)\n+[p0739r0](http:\/\/wg21.link\/p0739r0)\n+\n+### 17. `std::any`\n+\n+`FORBIDDEN_STANDARD_LIBRARY`\n+\n+Additionally\n+\n+* It requires heap allocation for values whose size is greater than some\n+implementation-dependent small buffer size. There is no mechanism for\n+specifying an allocator for that allocation.\n+\n+* It requires RTTI, but HotSpot is built without RTTI support when that option\n+is available.\n+\n+* Invalid access may be indicated by throwing an exception. Need to use\n+alternative form of `any_cast` with a pointer to the `any` to get `nullptr`\n+instead of an exception for invalid access.\n+\n+[n1939](http:\/\/wg21.link\/n1939)\n+[n3904](http:\/\/wg21.link\/n3904)\n+[p0220r1](http:\/\/wg21.link\/p0220r1)\n+[p0032r3](http:\/\/wg21.link\/p0032r3)\n+[p0504r0](http:\/\/wg21.link\/p0504r0)\n+\n+### 20. File System Library\n+\n+`FORBIDDEN_STANDARD_LIBRARY`\n+`FORBIDDEN_ROI`\n+\n+HotSpot doesn't do all that much with files, and already has adequate\n+mechanisms for its needs. Rewriting in terms of this new library doesn't seem\n+like a good use of resources. Having a mix of the existing usage and uses of\n+this new library would just be confusing.\n+\n+[n4100](http:\/\/wg21.link\/n4100)\n+[p0218r0](http:\/\/wg21.link\/p0218r0)\n+[p0219r1](http:\/\/wg21.link\/p0219r1)\n+[p0317r1](http:\/\/wg21.link\/p0317r1)\n+[p0392r0](http:\/\/wg21.link\/p0392r0)\n+[p0430r2](http:\/\/wg21.link\/p0430r2)\n+[p0492r2](http:\/\/wg21.link\/p0492r2)\n+[p1164r1](http:\/\/wg21.link\/p1164r1)\n+\n+### 22. Parallel STL Algorithms\n+\n+Built on the standard C++ threading mechanisms. HotSpot doesn't use those\n+mechanisms, instead providing and using its own.\n+\n+[n3850](http:\/\/wg21.link\/n3850)\n+[n4276](http:\/\/wg21.link\/n4276)\n+[p0024r2](http:\/\/wg21.link\/p0024r2)\n+[p0394r4](http:\/\/wg21.link\/p0394r4)\n+\n+### 23. New STL Algorithms in Detail\n+\n+`FORBIDDEN_STANDARD_LIBRARY`\n+\n+[n3408](http:\/\/wg21.link\/n3408)\n+[n3950](http:\/\/wg21.link\/n3950)\n+[n4276](http:\/\/wg21.link\/n4276)\n+[p0024r2](http:\/\/wg21.link\/p0024r2)\n+[p0394r4](http:\/\/wg21.link\/p0394r4)\n+\n+### 25. Other Utility Functions and Algorithms\n+\n+#### 25.1. `size()`, `empty()`, and `data()`\n+\n+`FORBIDDEN_STANDARD_LIBRARY`\n+\n+[n4017](http:\/\/wg21.link\/n4017)\n+[n4280](http:\/\/wg21.link\/n4280)\n+\n+#### 25.2. `as_const()`\n+\n+`FORBIDDEN_STANDARD_LIBRARY`\n+\n+If sufficiently useful, HotSpot could add such a function, perhaps in\n+globalDefinitions.hpp.\n+\n+[n4380](http:\/\/wg21.link\/n4380)\n+[p0007r1](http:\/\/wg21.link\/p0007r1)\n+\n+#### 25.3. `clamp()`\n+\n+`FORBIDDEN_STANDARD_LIBRARY`\n+\n+HotSpot has a similar (identical?) function in globalDefinitions.hpp.\n+\n+[n4536](http:\/\/wg21.link\/n4536)\n+[p002501](http:\/\/wg21.link\/p002501)\n+\n+#### 25.4. `sample()`\n+\n+`FORBIDDEN_STANDARD_LIBRARY`\n+\n+[n3842](http:\/\/wg21.link\/n3842)\n+[n3925](http:\/\/wg21.link\/n3925)\n+\n+### 26. Container and String Extensions\n+\n+`FORBIDDEN_STANDARD_LIBRARY`\n+\n+There are several subsections in this chapter of the book, but all are covered\n+by the blanket forbidden category.\n+\n+[lwg839](http:\/\/wg21.link\/lwg839)\n+[lwg1041](http:\/\/wg21.link\/lwg1041)\n+[p0083r3](http:\/\/wg21.link\/p0083r3)\n+[p0508r0](http:\/\/wg21.link\/p0508r0)\n+\n+[p0084r0](http:\/\/wg21.link\/p0084r0)\n+[p0084r2](http:\/\/wg21.link\/p0084r2)\n+\n+[n3873](http:\/\/wg21.link\/n3873)\n+[n4279](http:\/\/wg21.link\/n4279)\n+\n+[184403814](http:\/\/drdobbs.com\/184403814)\n+[n3890](http:\/\/wg21.link\/n3890)\n+[n4510](http:\/\/wg21.link\/n4510)\n+[lwg2391](http:\/\/wg21.link\/lwg2391)\n+[p0272r1](http:\/\/wg21.link\/p0272r1)\n+\n+### 27. Multithreading and Concurrency\n+\n+#### 27.1. Supplementary Mutexes and Locks\n+\n+`FORBIDDEN_STANDARD_LIBRARY`\n+\n+HotSpot has its own threading mechanisms and mutexes, and does not use the\n+Standard Library in this area.\n+\n+[n4470](http:\/\/wg21.link\/n4470)\n+[p0156r0](http:\/\/wg21.link\/p0156r0)\n+[p0156r2](http:\/\/wg21.link\/p0156r2)\n+[p0739r0](http:\/\/wg21.link\/p0739r0)\n+\n+[n2406](http:\/\/wg21.link\/n2406)\n+[n4508](http:\/\/wg21.link\/n4508)\n+\n+#### 27.2. `is_always_lock_free` for Atomics\n+\n+`FORBIDDEN_STANDARD_LIBRARY`\n+\n+HotSpot has its own atomics, and does not use the Standard Library in this area.\n+\n+[n4509](http:\/\/wg21.link\/n4509)\n+[p0152r1](http:\/\/wg21.link\/p0152r1)\n+\n+#### 27.3. Cache Line Sizes\n+\n+`FORBIDDEN_STANDARD_LIBRARY`\n+\n+HotSpot has its own mechanisms for this. It's not clear that switching to\n+these standard mechanisms is worthwhile. Quoting from the Josuttis book:\n+\n+\"... if you know better, use specific values, but using these values is better\n+than any assumed fixed size for code supporting multiple platforms.\"\n+\n+[n4523](http:\/\/wg21.link\/n4523)\n+[p0154r1](http:\/\/wg21.link\/p0154r1)\n+\n+### 28. Other Small Library Features and Modifications\n+\n+#### 28.1. `std::uncaught_exceptions()`\n+\n+Not useful, since HotSpot is built with exceptions disabled.\n+\n+[n3614](http:\/\/wg21.link\/n3614)\n+[n4259](http:\/\/wg21.link\/n4259)\n+\n+#### 28.2. Shared Pointer Improvements\n+\n+`FORBIDDEN_STANDARD_LIBRARY`\n+\n+[n3640](http:\/\/wg21.link\/n3640)\n+[p0414r2](http:\/\/wg21.link\/p0414r2)\n+[n4537](http:\/\/wg21.link\/n4537)\n+[p0163r0](http:\/\/wg21.link\/p0163r0)\n+[p0033r0](http:\/\/wg21.link\/p0033r0)\n+[p0033r1](http:\/\/wg21.link\/p0033r1)\n+\n+#### 28.3. Numeric Extensions\n+\n+`FORBIDDEN_STANDARD_LIBRARY`\n+\n+[n3845](http:\/\/wg21.link\/n3845)\n+[p0295r0](http:\/\/wg21.link\/p0295r0)\n+[p0030r0](http:\/\/wg21.link\/p0030r0)\n+[p0030r1](http:\/\/wg21.link\/p0030r1)\n+[n1422](http:\/\/wg21.link\/n1422)\n+[p0226r1](http:\/\/wg21.link\/p0226r1)\n+\n+#### 28.4. `chrono` Extensions\n+\n+`FORBIDDEN_STANDARD_LIBRARY`\n+\n+[p0092r0](http:\/\/wg21.link\/p0092r0)\n+[p0092r1](http:\/\/wg21.link\/p0092r1)\n+\n+### 29. Polymorphic Memory Resources\n+\n+`FORBIDDEN_STANDARD_LIBRARY`\n+\n+If we ever start using Standard Library containers, we might base the\n+allocators we provide on this set of features and use the corresponding\n+containers.\n+\n+[n3525](http:\/\/wg21.link\/n3525)\n+[n3916](http:\/\/wg21.link\/n3916)\n+[p0220r1](http:\/\/wg21.link\/p0220r1)\n+\n+### 34. Common C++ Settings\n+\n+#### 34.1. Value of `__cplusplus`\n+\n+We build HotSpot (and the rest of the OpenJDK) with a specifically selected\n+version of the Standard. Hence, the value of `__cplusplus` should be known and\n+unchanging until we change the project's build configuration again. So testing\n+the value shouldn't ever be necessary.\n+\n+### 35. Deprecated and Removed Features\n+\n+#### 35.1. Deprecated and Removed Core Language Features\n+\n+##### 35.1.2. Keyword `register`\n+\n+We don't use the `register` keyword in the OpenJDK anymore?\n+\n+[p0001r1](http:\/\/wg21.link\/p0001r1)\n+\n+#### 35.1.3. Disable `++` for `bool`\n+\n+We don't do this anywhere in OpenJDK?\n+\n+[p0003r1](http:\/\/wg21.link\/p0003r1)\n+\n+#### 35.1.4. Trigraphs\n+\n+We don't use trigraphs in OpenJDK code.\n+\n+[n4086](http:\/\/wg21.link\/n4086)\n+\n+#### 35.2. Deprecated and Removed Library Features\n+\n+##### 35.2.1. `auto_ptr`\n+\n+`auto_ptr` is not used in the OpenJDK.\n+\n+[n4168](http:\/\/wg21.link\/n4168)\n+[n4190](http:\/\/wg21.link\/n4190)\n+\n+#### 35.2.2. Algorithm `random_shuffle()`\n+\n+`random_shuffle()` is not used in the OpenJDK.\n+\n+[n4190](http:\/\/wg21.link\/n4190)\n+\n+#### 35.2.3. `unary_function` and `binary_function`\n+\n+These aren't used in the OpenJDK.\n+\n+#### 35.2.4. `ptr_fun()`, `mem_fun()`, and Binders\n+\n+These aren't used in the OpenJDK.\n+\n+#### 35.2.5. Allocator Support for `std::function<>`\n+\n+This feature was never implemented for gcc, to the extent that the API was\n+never added. There are no uses of allocator support in the OpenJDK.\n+\n+[p0302r1](http:\/\/wg21.link\/p0302r1)\n+\n+#### 35.2.6. Deprecated IOStream Aliases\n+\n+[p0004r1](http:\/\/wg21.link\/p0004r1)\n+\n+#### 35.2.7. Deprecated Library Features\n+\n+* `result_of<>` - [p0604r0](http:\/\/wg21.link\/p0604r0)\n+\n+* `unique()` for shared pointers - [p0521r0](http:\/\/wg21.link\/p0521r0)\n+\n+* `<codecvt>` - [p0618r0](http:\/\/wg21.link\/p0618r0)\n+\n+* `is_literal_type<>`, `iterator<>`, `raw_storage_iterator<>`,\n+`get_temporary_buffer()`, `allocator<void>` - [p0174r2](http:\/\/wg21.link\/p0174r2)\n+\n+* `<ccomplex>`, `<cstdalign>`, `<cstdbool>`, `<ctgmath>` -\n+[p0063r3](http:\/\/wg21.link\/p0063r3)\n+\n+* `memory_order_consume` - [p0371r1](http:\/\/wg21.link\/p0371r1)\n+\n+### Ignoring unsupported non-standard attributes\n+\n+(Not in Jossutis book)\n+\n+This might allow non-standard scoped attributes to be used in shared code\n+without the macros currently used in HotSpot for non-standard attributes. But\n+since we already have the macro technique well-established, this doesn't seem\n+all that useful.\n+\n+May require disabling a warning for some compilers.\n+\n+[p0283r2](http:\/\/wg21.link\/p0283r2)\n+\n+## Undecided features\n+\n+Some features are undecided (so implicitly forbidden) because we don't expect\n+to use them at all. This might be reconsidered if someone finds a good use\n+case. In such cases we note the feature as `UNDECIDED_WHO_CARES`.\n+\n+Some Standard Library features are undecided (so implicitly forbidden)\n+because, while the HotSpot Style Guide forbids the use of such, they may be\n+sufficiently useful that we want to permit them anyway. Doing so may require\n+some idiomatic mechanism for addressing things like `assert` incompatibility,\n+incompatibility with HotSpot's `FORBID_C_FUNCTION` mechanism, and the like. In\n+such cases we note the feature as `UNDECIDED_STANDARD_LIBRARY`.\n+\n+### 8. Other Language Features\n+\n+#### 8.1. Nested Namespaces\n+\n+`UNDECIDED_WHO_CARES`\n+\n+We don't use namespaces (especially nested namespaces) much, or at all.\n+\n+[n1524](http:\/\/wg21.link\/n1524)\n+[n4026](http:\/\/wg21.link\/n4026)\n+[n4230](http:\/\/wg21.link\/n4230)\n+\n+#### 8.4. Fixed Direct List Initialization with `auto`\n+\n+`UNDECIDED_WHO_CARES`\n+\n+We don't use direct list initialization with `auto` much, or at all.\n+\n+[n3681](http:\/\/wg21.link\/n3681)\n+[n3912](http:\/\/wg21.link\/n3912)\n+[n3681](http:\/\/wg21.link\/n3681)\n+\n+#### 8.6. UTF-8 Character Literals\n+\n+`UNDECIDED_WHO_CARES`\n+\n+[n4197](http:\/\/wg21.link\/n4197)\n+[n4267](http:\/\/wg21.link\/n4267)\n+\n+### 11. Fold Expressions\n+\n+`UNDECIDED_WHO_CARES`\n+\n+HotSpot doesn't use variadic templates very much.\n+\n+The requirement that the \"operator\" must be one of the standard binary\n+operators and the precedence restriction might seem like signficantly\n+limiting. However, pack expansion on the `pack` argument, and the possibility\n+of using the comma operator, can achieve a lot.\n+\n+This could fall under `FORBIDDEN_ROI`. But if someone does come up with a good\n+use, it's likely that alternatives are significantly worse, because pack\n+manipulation without this can be pretty contorted.\n+\n+[n4191](http:\/\/wg21.link\/n4191)\n+[n4295](http:\/\/wg21.link\/n4295)\n+[p0036](http:\/\/wg21.link\/p0036)\n+\n+### 13. Placeholder Types like `auto` as Template Parameters\n+\n+#### 13.2. Using `auto` as Variable Template Parameter\n+\n+Variable templates are a C++14 feature that is categorized as \"Undecided\" in\n+the HotSpot Style Guide. Being a change to that feature, this new feature is\n+also being left as undecided.\n+\n+[n4469](http:\/\/wg21.link\/n4469)\n+[p0127r2](http:\/\/wg21.link\/p0127r2)\n+\n+### 15. `std::optional<>`\n+\n+`UNDECIDED_STANDARD_LIBRARY`\n+\n+Additionally, invalid access may be indicated by throwing an exception.\n+`value()` throws, `operator*()` and `operator->()` are UB. So use of `value()`\n+should be forbidden even if `std::optional<>` were permitted.\n+\n+[n1878](http:\/\/wg21.link\/n1878)\n+[n3793](http:\/\/wg21.link\/n3793)\n+[p0220r1](http:\/\/wg21.link\/p0220r1)\n+[n3765](http:\/\/wg21.link\/n3765)\n+[p0307r2](http:\/\/wg21.link\/p0307r2)\n+[p0032r3](http:\/\/wg21.link\/p0032r3)\n+[p0504r0](http:\/\/wg21.link\/p0504r0)\n+\n+### 18. `std::byte`\n+\n+`UNDECIDED_STANDARD_LIBRARY`\n+\n+It was suggested that changing the HotSpot `address` type to use `std::byte`\n+has some benefits. That is, replace\n+```\n+typedef u_char*       address;\n+typedef const u_char* const_address;\n+```\n+```\n+using address       = std::byte*;\n+using const_address = const std::byte*;\n+```\n+in globalDefinitions.hpp.\n+\n+A specific benefit that was mentioned is that it might improve the horrible\n+way that gdb handles our current definition of the `address` type.\n+\n+```\n+#include <cstddef>\n+\n+typedef unsigned char* address;\n+typedef std::byte* address_b;\n+\n+int main() {\n+\n+  char* mem;\n+\n+  address addr = (address)mem;\n+  address_b addr_b = (address_b)mem;\n+\n+  return 0;\n+}\n+```\n+\n+```\n+(gdb) p addr\n+$1 = (address) 0x7ffff7fe4fa0 <dl_main> \"\\363\\017\\036\\372Uf\\017\\357\\300H\\211\\345AWI\\211\\377AVAUATSH\\201\\354\\210\\002\"\n+(gdb) p addr_b\n+$2 = (address_b) 0x7ffff7fe4fa0 <dl_main>\n+```\n+\n+This needs to be explored. Some folks have said they will do so.\n+\n+[p0298r0](http:\/\/wg21.link\/p0298r0)\n+[p0298r3](http:\/\/wg21.link\/p0298r3)\n+\n+### 19. String Views\n+\n+`UNDECIDED_STANDARD_LIBRARY`\n+\n+HotSpot doesn't use `std::string`, but uses `char*` strings a lot. Wrapping\n+such in a `std::string_view` to enable the use of various algorithms could be\n+useful. But since HotSpot also doesn't permit use of `<algorithm>` and the\n+like, that only gets the limited set of algorithms provided by the view class\n+directly.\n+\n+There is also the issue of `NUL` termination; string views are not necessarily\n+`NUL` terminated. Moreover, if one goes to the work of making one that is\n+`NUL` terminated, that terminator is included in the size.\n+\n+There are other caveats. Permitting use of string views would require\n+discussion of those.\n+\n+[n3334](http:\/\/wg21.link\/n3334)\n+[n3921](http:\/\/wg21.link\/n3921)\n+[p0220r1](http:\/\/wg21.link\/p0220r1)\n+[p0254r2](http:\/\/wg21.link\/p0254r2)\n+[p0403r1](http:\/\/wg21.link\/p0403r1)\n+[p0392r0](http:\/\/wg21.link\/p0392r0)\n+[p0426r1](http:\/\/wg21.link\/p0426r1)\n+[lwg2946](http:\/\/wg21.link\/lwg2946)\n+\n+### 24. Substring and Subsequence Searching\n+\n+`UNDECIDED_STANDARD_LIBRARY`\n+`UNDECIDED_WHO_CARES`\n+\n+In addition to simple substring searching, the Standard Library now includes\n+Boyer-Moore and Boyer-Moore-Horspool searchers, in case someone wants to\n+search really large texts. That seems an unlikely use-case for HotSpot.\n+\n+[n3411](http:\/\/wg21.link\/n3411)\n+[p0220r1](http:\/\/wg21.link\/p0220r1)\n+[p0253r1](http:\/\/wg21.link\/p0253r1)\n+\n+### 30. `new` and `delete` with Over-Aligned Data\n+\n+HotSpot currently only has a couple of over-aligned types that are dynamically\n+allocated. These are handled manually, not going through `new` expressions, as\n+that couldn't work before C++17.\n+\n+One of the ways an over-aligned type might arise is by aligning a data member.\n+This might be done to avoid destructive interference for concurrent accesses.\n+But HotSpot uses a different approach, using explicit padding. Again, this is\n+in part because `new` and `delete` of overaligned types didn't work. But we\n+might prefer to continue this approach.\n+\n+We would need to add `operator new` overloads to `CHeapObj<>` and possibly in\n+other places in order to support this. However, it has been suggested that\n+implementing it (efficiently) on top of NMT might be difficult. Note that\n+`posix_memalign` \/ `_aligned_malloc` don't help here, because of NMT's use of\n+malloc headers.\n+\n+If we don't support it we may want to add `operator new` overloads that are\n+deleted, to prevent attempted uses.\n+\n+Alignment usage in non-HotSpot parts of the OpenJDK:\n+\n+* `alignas` used once in harfbuzz, to align a variable.\n+\n+* libpipewire has `#define SPA_ALIGNED` macro using gcc `aligned` attribute,\n+but doesn't use it.\n+\n+* libsleef has `#define ALIGNED` macro using gcc `aligned` attribute. It is\n+not used for class or member declarations.\n+\n+[n3396](http:\/\/wg21.link\/n3396)\n+[p00354](http:\/\/wg21.link\/p00354)\n+\n+### 31. `std::to_chars()` and `std::from_chars()`\n+\n+`UNDECIDED_STANDARD_LIBRARY`\n+\n+Low-level conversions between character sequences and numeric values. This\n+seems like a good candidate for use in HotSpot, potentially replacing various\n+clumsy or less performant alternatives. No memory allocation, parsing failures\n+indicated via error codes rather than exceptions, and various other nice for\n+HotSpot properties.\n+\n+Note that the published C++17 puts these in `<utility>`, but a defect report\n+moved them to `<charconv>`. Also needs `<system_error>`.\n+\n+Would require upgrading minimum gcc version to 11.1 for floating point\n+conversion support. Minimum Visual Studio version is already sufficient.\n+Haven't found minimum clang version requirement yet.\n+\n+[p0067r0](http:\/\/wg21.link\/p0067r0)\n+[p0067r5](http:\/\/wg21.link\/p0067r5)\n+[p0682r1](http:\/\/wg21.link\/p0682r1)\n+\n+### 32. `std::launder()`\n+\n+`UNDECIDED_STANDARD_LIBRARY`\n+\n+Change to permitted if we discover a place where we need it. Or maybe we\n+should just permit it, but hope we don't need it.\n+\n+Also, C++20 revised the relevant part of Object Lifetime in a way that seems\n+more permissive and with less need of laundering. We don't know if\n+implementations of prior versions take advantage of the difference.\n+\n+Object Lifetime: C++17 6.8\/8, C++20 6.7.3\/8\n+\n+[n3903](http:\/\/wg21.link\/n3903)\n+[cwg1776](http:\/\/wg21.link\/cwg1776)\n+[n4303](http:\/\/wg21.link\/n4303)\n+[p0137r1](http:\/\/wg21.link\/p0137r1)\n+\n+### 33. Improvements for Implementing Generic Code\n+\n+#### 33.1. `std::invoke<>()`\n+\n+`UNDECIDED_WHO_CARES`\n+`UNDECIDED_STANDARD_LIBRARY`\n+\n+[n3727](http:\/\/wg21.link\/n3727)\n+[n4169](http:\/\/wg21.link\/n4169)\n+[p0604r0](http:\/\/wg21.link\/p0604r0)\n+\n+### 34. Common C++ Settings\n+\n+#### 34.3. Dealing with Signal Handlers\n+\n+Is there anything actionable for us here?\n+\n+Specifies the set of C++ Standard Library functions that are signal-safe. But\n+since we mostly don't use the Standard Library, this doesn't matter much.\n+\n+[p0270r0](http:\/\/wg21.link\/p0270r0)\n+[p0270r3](http:\/\/wg21.link\/p0270r3)\n+\n+#### 34.4. Forward Progress Guarantees\n+\n+Is there anything actionable for us here?\n+\n+[p0296r2](http:\/\/wg21.link\/p0296r2)\n+\n+### Allow `typename` in a template template parameter\n+\n+(Not in Jossutis book)\n+`UNDECIDED_WHO_CARES`\n+\n+Template template parameters are barely used (if at all) in HotSpot.\n+\n+[n4051](http:\/\/wg21.link\/n4051)\n+\n+### Further uninitialized algorithms\n+\n+(Not in Jossutis book)\n+`UNDECIDED_STANDARD_LIBRARY`\n+\n+[p0040r3](http:\/\/wg21.link\/p0040r3)\n+\n+\n+\n","filename":"doc\/cpp17-features.md","additions":1113,"deletions":0,"binary":false,"changes":1113,"status":"added"}]}