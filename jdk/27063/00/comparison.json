{"files":[{"patch":"@@ -3078,14 +3078,1 @@\n-    \/\/ This 'Phi' will be a 'good' if it still points to\n-    \/\/ at least one scalar replaceable object. Note that 'obj'\n-    \/\/ was\/should be marked as NSR before calling this function.\n-    bool good_phi = false;\n-\n-    for (uint j = 1; j < phi->req(); j++) {\n-      JavaObjectNode* phi_in_obj = unique_java_object(phi->in(j));\n-      if (phi_in_obj != nullptr && phi_in_obj->scalar_replaceable()) {\n-        good_phi = true;\n-        break;\n-      }\n-    }\n-\n-    if (!good_phi) {\n+    if (!can_reduce_phi(phi->as_Phi())) {\n@@ -3132,0 +3119,10 @@\n+        } else if (use->is_LocalVar()) {\n+          Node* phi = use->ideal_node();\n+          if (phi->Opcode() == Op_Phi && reducible_merges.member(phi)) {\n+            if (!can_reduce_phi(phi->as_Phi())) {\n+              set_not_scalar_replaceable(jobj NOT_PRODUCT(COMMA \"is merged in a non-reducible phi\"));\n+              reducible_merges.yank(phi);\n+              found_nsr_alloc = true;\n+              break;\n+            }\n+          }\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8361699\n+ * @summary Check that NSR state propagate correctly to initially reducible Phis\n+ *          and turns them into non-reducible Phis.\n+ * @run main\/othervm -XX:CompileCommand=compileonly,*TestReduceAllocationNotReducibleAnymore*::*\n+ *                   -XX:CompileCommand=dontinline,*TestReduceAllocationNotReducibleAnymore*::*\n+ *                   -Xcomp compiler.escapeAnalysis.TestReduceAllocationNotReducibleAnymore\n+ * @run main compiler.escapeAnalysis.TestReduceAllocationNotReducibleAnymore\n+ *\/\n+\n+package compiler.escapeAnalysis;\n+\n+public class TestReduceAllocationNotReducibleAnymore {\n+    public static void main(String[] args) {\n+        for (int i =0; i< 100; i++) {\n+            test(4, null);\n+        }\n+    }\n+\n+    static void test(int x, A a) {\n+        Object[] objects = { new Object() };\n+        Object object = new Object();\n+        for (int i = 0; i < 150; i++) {\n+            try {\n+                objects[x] = object;\n+                object = new byte[10];\n+            } catch (Exception e) {\n+            }\n+            try {\n+                a.foo();\n+            } catch (Exception e) {\n+            }\n+        }\n+    }\n+\n+    class A {\n+        void foo() {}\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/escapeAnalysis\/TestReduceAllocationNotReducibleAnymore.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"}]}