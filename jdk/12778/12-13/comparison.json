{"files":[{"patch":"@@ -2343,2 +2343,1 @@\n-  __ tst(method, method);\n-  __ br(Assembler::NE, resolved);\n+  __ cbnz(method, resolved);\n@@ -2359,2 +2358,1 @@\n-  __ tst(method, method);\n-  __ br(Assembler::NE, resolved);\n+  __ cbnz(method, resolved);\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -452,3 +452,3 @@\n-    __ get_cache_and_index_at_bcp(x11, x12, 1, index_size);\n-    __ ld(x11, Address(x11, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));\n-    __ andi(x11, x11, ConstantPoolCacheEntry::parameter_size_mask);\n+    __ get_cache_and_index_at_bcp(cache, index, 1, index_size);\n+    __ ld(cache, Address(cache, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));\n+    __ andi(cache, cache, ConstantPoolCacheEntry::parameter_size_mask);\n@@ -456,1 +456,1 @@\n-    __ shadd(esp, x11, esp, t0, 3);\n+    __ shadd(esp, cache, esp, t0, 3);\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2218,0 +2218,3 @@\n+\/\/ The xmethod register is input and overwritten to be the adapter method for the\n+\/\/ indy call. Return address (ra) is set to the return address for the adapter and\n+\/\/ an appendix may be pushed to the stack. Registers x10-x13 are clobbered.\n@@ -2235,2 +2238,1 @@\n-  __ andr(t0, method, method);\n-  __ bnez(t0, resolved);\n+  __ bnez(method, resolved);\n@@ -2243,1 +2245,1 @@\n-  __ call_VM(noreg, entry, method); \/\/ Example uses temp = rbx. In this case rbx is method\n+  __ call_VM(noreg, entry, method);\n@@ -2251,2 +2253,1 @@\n-  __ andr(t0, method, method);\n-  __ bnez(t0, resolved);\n+  __ bnez(method, resolved);\n@@ -2260,3 +2261,1 @@\n-  __ slli(index, index, XLEN - (ResolvedIndyEntry::has_appendix_shift + 1));\n-  __ srli(index, index, XLEN - 1);\n-  __ andr(t0, index, index);\n+  __ andi(t0, index, 1UL << ResolvedIndyEntry::has_appendix_shift);\n@@ -2280,2 +2279,1 @@\n-  \/\/ Return address is loaded into link register(lr) and not pushed to the stack\n-  \/\/ like x86\n+  \/\/ Return address is loaded into ra and not pushed to the stack like x86\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"}]}