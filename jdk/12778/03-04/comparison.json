{"files":[{"patch":"@@ -1837,1 +1837,1 @@\n-void InterpreterMacroAssembler::load_resolved_indy_entry(Register cache, Register index, Register tmp) {\n+void InterpreterMacroAssembler::load_resolved_indy_entry(Register cache, Register index) {\n@@ -1843,1 +1843,0 @@\n-  mov(tmp, sizeof(ResolvedIndyEntry));\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -323,1 +323,1 @@\n-  void load_resolved_indy_entry(Register cache, Register index, Register tmp);\n+  void load_resolved_indy_entry(Register cache, Register index);\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2334,1 +2334,1 @@\n-  __ load_resolved_indy_entry(cache, index, appendix);\n+  __ load_resolved_indy_entry(cache, index);\n@@ -2348,1 +2348,1 @@\n-  __ load_resolved_indy_entry(cache, index, appendix);\n+  __ load_resolved_indy_entry(cache, index);\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -216,3 +216,3 @@\n-                                                          _indy_index,\n-                                                          pool()->tag_at(_bss_index),\n-                                                          CHECK_false);\n+                                                                     _indy_index,\n+                                                                     pool()->tag_at(_bss_index),\n+                                                                     CHECK_false);\n@@ -234,2 +234,1 @@\n-  }\n-  else\n+  } else {\n@@ -237,0 +236,1 @@\n+  }\n","filename":"src\/hotspot\/share\/interpreter\/bootstrapInfo.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -618,1 +618,0 @@\n-      constantPoolHandle cph(Thread::current(), cache->constant_pool());\n@@ -652,2 +651,2 @@\n-  \/\/ Initialize resolvedinvokedynamicinfo array with available data\n-  Array<ResolvedIndyEntry>* array;\n+  \/\/ Initialize ResolvedIndyEntry array with available data\n+  Array<ResolvedIndyEntry>* resolved_indy_entries;\n@@ -655,1 +654,1 @@\n-    array = MetadataFactory::new_array<ResolvedIndyEntry>(loader_data, indy_entries.length(), CHECK_NULL);\n+    resolved_indy_entries = MetadataFactory::new_array<ResolvedIndyEntry>(loader_data, indy_entries.length(), CHECK_NULL);\n@@ -657,1 +656,1 @@\n-      array->at_put(i, indy_entries.at(i));\n+      resolved_indy_entries->at_put(i, indy_entries.at(i));\n@@ -660,1 +659,1 @@\n-    array = nullptr;\n+    resolved_indy_entries = nullptr;\n@@ -664,1 +663,1 @@\n-    ConstantPoolCache(length, index_map, invokedynamic_map, array);\n+              ConstantPoolCache(length, index_map, invokedynamic_map, resolved_indy_entries);\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -118,2 +118,2 @@\n-          (old_cp->signature_ref_at(index_old) != new_cp->signature_ref_at(index_new)))\n-        return false;\n+        (old_cp->signature_ref_at(index_old) != new_cp->signature_ref_at(index_new)))\n+      return false;\n","filename":"src\/hotspot\/share\/prims\/methodComparator.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-      return cpCache.getIndyEntryAt(cpCacheIndex).getConstantPoolIndex();\n+        return cpCache.getIndyEntryAt(cpCacheIndex).getConstantPoolIndex();\n@@ -60,1 +60,1 @@\n-      return cpCache.getEntryAt((int) (0xFFFF & cpCacheIndex)).getConstantPoolIndex();\n+        return cpCache.getEntryAt((int) (0xFFFF & cpCacheIndex)).getConstantPoolIndex();\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/interpreter\/BytecodeWithCPIndex.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,7 +37,7 @@\n-  static {\n-    VM.registerVMInitializedObserver(new Observer() {\n-      public void update(Observable o, Object data) {\n-        initialize(VM.getVM().getTypeDataBase());\n-      }\n-    });\n-  }\n+    static {\n+        VM.registerVMInitializedObserver(new Observer() {\n+            public void update(Observable o, Object data) {\n+                initialize(VM.getVM().getTypeDataBase());\n+            }\n+        });\n+    }\n@@ -45,2 +45,2 @@\n-  private static synchronized void initialize(TypeDataBase db) throws WrongTypeException {\n-    elemType = db.lookupType(\"ResolvedIndyEntry\");\n+    private static synchronized void initialize(TypeDataBase db) throws WrongTypeException {\n+        elemType = db.lookupType(\"ResolvedIndyEntry\");\n@@ -48,3 +48,3 @@\n-    Type type = db.lookupType(\"Array<ResolvedIndyEntry>\");\n-    dataFieldOffset = type.getAddressField(\"_data\").getOffset();\n-  }\n+        Type type = db.lookupType(\"Array<ResolvedIndyEntry>\");\n+        dataFieldOffset = type.getAddressField(\"_data\").getOffset();\n+    }\n@@ -52,2 +52,2 @@\n-  private static long dataFieldOffset;\n-  protected static Type elemType;\n+    private static long dataFieldOffset;\n+    protected static Type elemType;\n@@ -55,3 +55,3 @@\n-  public ResolvedIndyArray(Address addr) {\n-    super(addr, dataFieldOffset);\n-  }\n+    public ResolvedIndyArray(Address addr) {\n+        super(addr, dataFieldOffset);\n+    }\n@@ -59,2 +59,2 @@\n-  public ResolvedIndyEntry getAt(int index) {\n-    if (index < 0 || index >= length()) throw new ArrayIndexOutOfBoundsException(index + \" \" + length());\n+    public ResolvedIndyEntry getAt(int index) {\n+        if (index < 0 || index >= length()) throw new ArrayIndexOutOfBoundsException(index + \" \" + length());\n@@ -62,1 +62,1 @@\n-    Type elemType = getElemType();\n+        Type elemType = getElemType();\n@@ -64,2 +64,2 @@\n-    Address data = getAddress().addOffsetTo(dataFieldOffset);\n-    long elemSize = elemType.getSize();\n+        Address data = getAddress().addOffsetTo(dataFieldOffset);\n+        long elemSize = elemType.getSize();\n@@ -67,2 +67,2 @@\n-    return new ResolvedIndyEntry(data.addOffsetTo(index* elemSize));\n-  }\n+        return new ResolvedIndyEntry(data.addOffsetTo(index* elemSize));\n+    }\n@@ -70,3 +70,3 @@\n-  public Type getElemType() {\n-    return elemType;\n-  }\n+    public Type getElemType() {\n+        return elemType;\n+    }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/ResolvedIndyArray.java","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -36,3 +36,3 @@\n-  private static long          size;\n-  private static long          baseOffset;\n-  private static CIntegerField cpIndex;\n+    private static long          size;\n+    private static long          baseOffset;\n+    private static CIntegerField cpIndex;\n@@ -40,7 +40,7 @@\n-  static {\n-    VM.registerVMInitializedObserver(new Observer() {\n-        public void update(Observable o, Object data) {\n-          initialize(VM.getVM().getTypeDataBase());\n-        }\n-      });\n-  }\n+    static {\n+        VM.registerVMInitializedObserver(new Observer() {\n+            public void update(Observable o, Object data) {\n+                initialize(VM.getVM().getTypeDataBase());\n+            }\n+        });\n+    }\n@@ -48,3 +48,3 @@\n-  private static synchronized void initialize(TypeDataBase db) throws WrongTypeException {\n-    Type type      = db.lookupType(\"ResolvedIndyEntry\");\n-    size = type.getSize();\n+    private static synchronized void initialize(TypeDataBase db) throws WrongTypeException {\n+        Type type            = db.lookupType(\"ResolvedIndyEntry\");\n+        size = type.getSize();\n@@ -52,2 +52,2 @@\n-    cpIndex = type.getCIntegerField(\"_cpool_index\");\n-  }\n+        cpIndex = type.getCIntegerField(\"_cpool_index\");\n+    }\n@@ -55,3 +55,3 @@\n-  ResolvedIndyEntry(Address addr) {\n-    super(addr);\n-  }\n+    ResolvedIndyEntry(Address addr) {\n+        super(addr);\n+    }\n@@ -59,3 +59,3 @@\n-  public int getConstantPoolIndex() {\n-    return this.getAddress().getJShortAt(cpIndex.getOffset());\n-  }\n+    public int getConstantPoolIndex() {\n+        return this.getAddress().getJShortAt(cpIndex.getOffset());\n+    }\n@@ -63,1 +63,1 @@\n-  public void iterateFields(MetadataVisitor visitor) { }\n+    public void iterateFields(MetadataVisitor visitor) { }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/ResolvedIndyEntry.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"}]}