{"files":[{"patch":"@@ -1924,3 +1924,8 @@\n-  \/\/ Scale the index to be the entry index * sizeof(ResolvedInvokeDynamicInfo)\n-  mv(tmp, sizeof(ResolvedIndyEntry));\n-  mul(index, index, tmp);\n+  if (is_power_of_2(sizeof(ResolvedIndyEntry))) {\n+    \/\/ Scale index by power of 2\n+    slli(index, index, log2i_exact(sizeof(ResolvedIndyEntry)));\n+  } else {\n+    \/\/ Scale the index to be the entry index * sizeof(ResolvedInvokeDynamicInfo)\n+    mv(tmp, sizeof(ResolvedIndyEntry));\n+    mul(index, index, tmp);\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -448,13 +448,1 @@\n-    \/\/ Get index out of bytecode pointer, get_cache_entry_pointer_at_bcp\n-    __ get_cache_index_at_bcp(index, 1, sizeof(u4));\n-    \/\/ Get address of invokedynamic array\n-    __ ld(cache, Address(xcpool, in_bytes(ConstantPoolCache::invokedynamic_entries_offset())));\n-    \/\/ Scale the index to be the entry index * sizeof(ResolvedInvokeDynamicInfo)\n-    __ mv(temp, sizeof(ResolvedIndyEntry)); \/\/ use appendix as temp\n-    __ mul(index, index, temp);\n-    __ add(cache, cache, Array<ResolvedIndyEntry>::base_offset_in_bytes());\n-\n-    \/\/ __ la(cache, Address(cache, index));\n-    __ add(cache, cache, index);\n-    __ la(cache, Address(cache, 0));\n-\n+    __ load_resolved_indy_entry(cache, index, temp);\n@@ -475,2 +463,2 @@\n- __ check_and_handle_popframe(xthread);\n- __ check_and_handle_earlyret(xthread);\n+  __ check_and_handle_popframe(xthread);\n+  __ check_and_handle_earlyret(xthread);\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":3,"deletions":15,"binary":false,"changes":18,"status":"modified"}]}