{"files":[{"patch":"@@ -406,1 +406,6 @@\n-  return attempt_allocation(min_size, requested_size, actual_size);\n+  \/\/ Do not allow a GC because we are allocating a new TLAB to avoid an issue\n+  \/\/ with UseGCOverheadLimit: although this GC would return null if the overhead\n+  \/\/ limit would be exceeded, but it would likely free at least some space.\n+  \/\/ So the subsequent outside-TLAB allocation could be successful anyway and\n+  \/\/ the indication that the overhead limit had been exceeded swallowed.\n+  return attempt_allocation(min_size, requested_size, actual_size, false \/* allow_gc *\/);\n@@ -409,2 +414,1 @@\n-HeapWord*\n-G1CollectedHeap::mem_allocate(size_t word_size) {\n+HeapWord* G1CollectedHeap::mem_allocate(size_t word_size) {\n@@ -417,1 +421,1 @@\n-  return attempt_allocation(word_size, word_size, &dummy);\n+  return attempt_allocation(word_size, word_size, &dummy, true \/* allow_gc *\/);\n@@ -420,1 +424,1 @@\n-HeapWord* G1CollectedHeap::attempt_allocation_slow(uint node_index, size_t word_size) {\n+HeapWord* G1CollectedHeap::attempt_allocation_slow(uint node_index, size_t word_size, bool allow_gc) {\n@@ -447,0 +451,2 @@\n+      } else if (!allow_gc) {\n+        return nullptr;\n@@ -615,1 +621,2 @@\n-                                                     size_t* actual_word_size) {\n+                                                     size_t* actual_word_size,\n+                                                     bool allow_gc) {\n@@ -627,1 +634,1 @@\n-    result = attempt_allocation_slow(node_index, desired_word_size);\n+    result = attempt_allocation_slow(node_index, desired_word_size, allow_gc);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":14,"deletions":7,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -442,7 +442,3 @@\n-  \/\/   this fails, they will attempt to do an evacuation pause and\n-  \/\/   retry the allocation.\n-  \/\/\n-  \/\/ * If all allocation attempts fail, even after trying to schedule\n-  \/\/   an evacuation pause, allocate_new_tlab() will return null,\n-  \/\/   whereas mem_allocate() will attempt a heap expansion and\/or\n-  \/\/   schedule a Full GC.\n+  \/\/   this fails, (only) mem_allocate() will attempt to do an evacuation\n+  \/\/   pause and retry the allocation. Allocate_new_tlab() will return null,\n+  \/\/   deferring to the following mem_allocate().\n@@ -453,1 +449,1 @@\n-  \/\/   will satisfy them with a special path.\n+  \/\/   will satisfy them in a special path.\n@@ -466,2 +462,2 @@\n-                                      size_t* actual_word_size);\n-\n+                                      size_t* actual_word_size,\n+                                      bool allow_gc);\n@@ -470,2 +466,3 @@\n-  \/\/ pause. This should only be used for non-humongous allocations.\n-  HeapWord* attempt_allocation_slow(uint node_index, size_t word_size);\n+  \/\/ pause if allow_gc is set. This should only be used for non-humongous\n+  \/\/ allocations.\n+  HeapWord* attempt_allocation_slow(uint node_index, size_t word_size, bool allow_gc);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"}]}