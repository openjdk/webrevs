{"files":[{"patch":"@@ -313,1 +313,1 @@\n-  uint stk_args = 0; \/\/ inc by 2 each time\n+  uint stk_args = 0;\n@@ -325,0 +325,1 @@\n+        stk_args = align_up(stk_args, 2);\n@@ -326,1 +327,1 @@\n-        stk_args += 2;\n+        stk_args += 1;\n@@ -343,0 +344,1 @@\n+        stk_args = align_up(stk_args, 2);\n@@ -351,0 +353,1 @@\n+        stk_args = align_up(stk_args, 2);\n@@ -352,1 +355,1 @@\n-        stk_args += 2;\n+        stk_args += 1;\n@@ -360,0 +363,1 @@\n+        stk_args = align_up(stk_args, 2);\n@@ -370,1 +374,1 @@\n-  return align_up(stk_args, 2);\n+  return stk_args;\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -444,1 +444,0 @@\n-  if (slot & 1) slot++;\n","filename":"src\/hotspot\/cpu\/arm\/sharedRuntime_arm.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -737,1 +737,1 @@\n-  return align_up(stk, 2);\n+  return stk;\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -269,1 +269,1 @@\n-  uint stk_args = 0; \/\/ inc by 2 each time\n+  uint stk_args = 0;\n@@ -281,0 +281,1 @@\n+          stk_args = align_up(stk_args, 2);\n@@ -282,1 +283,1 @@\n-          stk_args += 2;\n+          stk_args += 1;\n@@ -298,0 +299,1 @@\n+          stk_args = align_up(stk_args, 2);\n@@ -306,0 +308,1 @@\n+          stk_args = align_up(stk_args, 2);\n@@ -307,1 +310,1 @@\n-          stk_args += 2;\n+          stk_args += 1;\n@@ -315,0 +318,1 @@\n+          stk_args = align_up(stk_args, 2);\n@@ -324,1 +328,1 @@\n-  return align_up(stk_args, 2);\n+  return stk_args;\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -758,1 +758,1 @@\n-  return align_up(stk, 2);\n+  return stk;\n","filename":"src\/hotspot\/cpu\/s390\/sharedRuntime_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -531,2 +531,1 @@\n-  \/\/ return value can be odd number of VMRegImpl stack slots make multiple of 2\n-  return align_up(stack, 2);\n+  return stack;\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-  uint stk_args = 0; \/\/ inc by 2 each time\n+  uint stk_args = 0;\n@@ -513,0 +513,1 @@\n+        stk_args = align_up(stk_args, 2);\n@@ -514,1 +515,1 @@\n-        stk_args += 2;\n+        stk_args += 1;\n@@ -531,0 +532,1 @@\n+        stk_args = align_up(stk_args, 2);\n@@ -539,0 +541,1 @@\n+        stk_args = align_up(stk_args, 2);\n@@ -540,1 +543,1 @@\n-        stk_args += 2;\n+        stk_args += 1;\n@@ -548,0 +551,1 @@\n+        stk_args = align_up(stk_args, 2);\n@@ -558,1 +562,1 @@\n-  return align_up(stk_args, 2);\n+  return stk_args;\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-  intptr_t out_preserve = SharedRuntime::java_calling_convention(sig_bt, regs, sizeargs);\n+  intptr_t out_preserve = align_up(SharedRuntime::java_calling_convention(sig_bt, regs, sizeargs), 2);\n","filename":"src\/hotspot\/share\/c1\/c1_FrameMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3017,1 +3017,1 @@\n-      intptr_t out_preserve = SharedRuntime::java_calling_convention(sig_bt, regs, sizeargs);\n+      SharedRuntime::java_calling_convention(sig_bt, regs, sizeargs);\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -389,1 +389,2 @@\n-  int num_stack_arg_slots() const { return constMethod()->num_stack_arg_slots(); }\n+  int num_stack_arg_slots(bool rounded = true) const {\n+    return rounded ? align_up(constMethod()->num_stack_arg_slots(), 2) : constMethod()->num_stack_arg_slots(); }\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -265,0 +265,1 @@\n+  assert(is_aligned(p, alignof(OopT)), \"should be aligned: \" PTR_FORMAT, p2i(p));\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-  int slots = SharedRuntime::java_calling_convention(signature, vm_regs, num_args);\n+  int slots = align_up(SharedRuntime::java_calling_convention(signature, vm_regs, num_args), 2);\n","filename":"src\/hotspot\/share\/prims\/foreignGlobals.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2170,0 +2170,3 @@\n+  assert(is_aligned(start, wordSize), \"should be aligned: \" PTR_FORMAT, p2i(start));\n+  assert(is_aligned(end, VMRegImpl::stack_slot_size), \"should be aligned: \" PTR_FORMAT, p2i(end));\n+\n@@ -2172,1 +2175,2 @@\n-  log_develop_trace(continuations)(\"clearing bitmap for \" INTPTR_FORMAT \" - \" INTPTR_FORMAT, p2i(start), p2i(end));\n+  address effective_end = UseCompressedOops ? end : align_down(end, wordSize);\n+  log_develop_trace(continuations)(\"clearing bitmap for \" INTPTR_FORMAT \" - \" INTPTR_FORMAT, p2i(start), p2i(effective_end));\n@@ -2174,1 +2178,2 @@\n-  chunk->bitmap().clear_range(chunk->bit_index_for(start), chunk->bit_index_for(end));\n+  chunk->bitmap().clear_range(chunk->bit_index_for(start), chunk->bit_index_for(effective_end));\n+  assert(chunk->bitmap().count_one_bits(chunk->bit_index_for(effective_end), chunk->bit_index_for(end)) == 0, \"bits should not be set\");\n@@ -2303,3 +2308,2 @@\n-    \/\/ If the last stack slot in the argument area is unused c2 could place a narrow oop for the caller. Since\n-    \/\/ passed oops will always be word aligned there is no need to clear this bit anyways.\n-    int argsize_in_bytes = (added_argsize << LogBytesPerWord) - (UseCompressedOops ? VMRegImpl::stack_slot_size : 0);\n+    int stack_args_slots = f.cb()->as_compiled_method()->method()->num_stack_arg_slots(false \/* rounded *\/);\n+    int argsize_in_bytes = stack_args_slots * VMRegImpl::stack_slot_size;\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1442,1 +1442,1 @@\n-      assert(stack_arg_slots ==  m->num_stack_arg_slots(), \"\");\n+      assert(stack_arg_slots ==  m->num_stack_arg_slots(false \/* rounded *\/), \"\");\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1994,1 +1994,1 @@\n-  int comp_args_on_stack = java_calling_convention(sig_bt, regs_without_member_name, total_args_passed - 1);\n+  java_calling_convention(sig_bt, regs_without_member_name, total_args_passed - 1);\n@@ -3092,1 +3092,1 @@\n-      int comp_args_on_stack = SharedRuntime::java_calling_convention(sig_bt, regs, total_args_passed);\n+      SharedRuntime::java_calling_convention(sig_bt, regs, total_args_passed);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -181,1 +181,0 @@\n-  _stack_arg_slots = align_up(_stack_arg_slots, 2);\n@@ -238,1 +237,0 @@\n-#if defined(PPC64) || defined(S390)\n@@ -242,0 +240,4 @@\n+#if defined(PPC64) || defined(S390)\n+      _stack_arg_slots += 1;\n+#else\n+      _stack_arg_slots = align_up(_stack_arg_slots, 2);\n@@ -243,0 +245,1 @@\n+#endif \/\/ defined(PPC64) || defined(S390)\n@@ -245,1 +248,0 @@\n-#endif \/\/ defined(PPC64) || defined(S390)\n@@ -253,2 +255,1 @@\n-      PPC64_ONLY(_stack_arg_slots = align_up(_stack_arg_slots, 2));\n-      S390_ONLY(_stack_arg_slots = align_up(_stack_arg_slots, 2));\n+      _stack_arg_slots = align_up(_stack_arg_slots, 2);\n@@ -259,1 +260,0 @@\n-#if defined(PPC64) || defined(S390)\n@@ -263,0 +263,4 @@\n+#if defined(PPC64) || defined(S390)\n+      _stack_arg_slots += 1;\n+#else\n+      _stack_arg_slots = align_up(_stack_arg_slots, 2);\n@@ -264,0 +268,1 @@\n+#endif \/\/ defined(PPC64) || defined(S390)\n@@ -266,1 +271,0 @@\n-#endif \/\/ defined(PPC64) || defined(S390)\n@@ -271,2 +275,1 @@\n-      PPC64_ONLY(_stack_arg_slots = align_up(_stack_arg_slots, 2));\n-      S390_ONLY(_stack_arg_slots = align_up(_stack_arg_slots, 2));\n+      _stack_arg_slots = align_up(_stack_arg_slots, 2);\n","filename":"src\/hotspot\/share\/runtime\/signature.cpp","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"}]}