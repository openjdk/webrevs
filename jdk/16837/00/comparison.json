{"files":[{"patch":"@@ -158,1 +158,1 @@\n-  inline BitMap::idx_t bit_index_for(intptr_t* p) const;\n+  inline BitMap::idx_t bit_index_for(address p) const;\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -259,1 +259,1 @@\n-inline BitMap::idx_t stackChunkOopDesc::bit_index_for(intptr_t* p) const {\n+inline BitMap::idx_t stackChunkOopDesc::bit_index_for(address p) const {\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1778,1 +1778,1 @@\n-  void clear_bitmap_bits(intptr_t* start, int range);\n+  void clear_bitmap_bits(address start, address end);\n@@ -2169,1 +2169,1 @@\n-void ThawBase::clear_bitmap_bits(intptr_t* start, int range) {\n+void ThawBase::clear_bitmap_bits(address start, address end) {\n@@ -2172,1 +2172,1 @@\n-  log_develop_trace(continuations)(\"clearing bitmap for \" INTPTR_FORMAT \" - \" INTPTR_FORMAT, p2i(start), p2i(start+range));\n+  log_develop_trace(continuations)(\"clearing bitmap for \" INTPTR_FORMAT \" - \" INTPTR_FORMAT, p2i(start), p2i(end));\n@@ -2174,2 +2174,1 @@\n-  chunk->bitmap().clear_range(chunk->bit_index_for(start),\n-                              chunk->bit_index_for(start+range));\n+  chunk->bitmap().clear_range(chunk->bit_index_for(start), chunk->bit_index_for(end));\n@@ -2228,1 +2227,3 @@\n-    clear_bitmap_bits(heap_frame_bottom - locals, locals);\n+    address start = (address)(heap_frame_bottom - locals);\n+    address end = (address)heap_frame_bottom;\n+    clear_bitmap_bits(start, end);\n@@ -2301,1 +2302,5 @@\n-    clear_bitmap_bits(heap_frame_top + ContinuationHelper::CompiledFrame::size(hf) + frame::metadata_words_at_top, added_argsize);\n+    address start = (address)(heap_frame_top + ContinuationHelper::CompiledFrame::size(hf) + frame::metadata_words_at_top);\n+    \/\/ If the last stack slot in the argument area is unused c2 could place a narrow oop for the caller. Since\n+    \/\/ passed oops will always be word aligned there is no need to clear this bit anyways.\n+    int argsize_in_bytes = (added_argsize << LogBytesPerWord) - (UseCompressedOops ? VMRegImpl::stack_slot_size : 0);\n+    clear_bitmap_bits(start, start + argsize_in_bytes);\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"}]}