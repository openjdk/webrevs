{"files":[{"patch":"@@ -28,1 +28,1 @@\n- * Extends the <code>javax.naming<\/code> package to provide functionality\n+ * Extends the {@code javax.naming} package to provide functionality\n@@ -35,1 +35,1 @@\n- * written in the Java programming language.  It is designed to be\n+ * written in the Java programming language. It is designed to be\n@@ -37,1 +37,1 @@\n- * implementation.  Thus a variety of services--new, emerging, and\n+ * implementation. Thus a variety of services--new, emerging, and\n@@ -47,1 +47,1 @@\n- * The <code>DirContext<\/code>\n+ * The {@code DirContext}\n@@ -53,1 +53,1 @@\n- * You use  <code>getAttributes()<\/code> to retrieve the attributes\n+ * You use {@code getAttributes()} to retrieve the attributes\n@@ -55,1 +55,1 @@\n- * Attributes are modified using <code>modifyAttributes()<\/code>.\n+ * Attributes are modified using {@code modifyAttributes()}.\n@@ -59,2 +59,2 @@\n- * <code>DirContext<\/code> also behaves as a naming context\n- * by extending the <code>Context<\/code> interface in the <code>javax.naming<\/code> package.\n+ * {@code DirContext} also behaves as a naming context\n+ * by extending the {@code Context} interface in the {@code javax.naming} package.\n@@ -69,1 +69,1 @@\n- * <code>DirContext<\/code> contains methods for\n+ * {@code DirContext} contains methods for\n@@ -74,2 +74,2 @@\n- * <code>search()<\/code> method.\n- * There are other overloaded forms of <code>search()<\/code>\n+ * {@code search()} method.\n+ * There are other overloaded forms of {@code search()}\n","filename":"src\/java.naming\/share\/classes\/javax\/naming\/directory\/package-info.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * written in the Java programming language.  It is designed to be\n+ * written in the Java programming language. It is designed to be\n@@ -37,1 +37,1 @@\n- * implementation.  Thus a variety of services--new, emerging, and\n+ * implementation. Thus a variety of services--new, emerging, and\n@@ -42,1 +42,1 @@\n- * This package defines a <code>NamingEvent<\/code> class to represent an event\n+ * This package defines a {@code NamingEvent} class to represent an event\n@@ -44,2 +44,2 @@\n- * It also defines subinterfaces of <code>Context<\/code> and <code>DirContext<\/code>,\n- * called <code>EventContext<\/code> and <code>EventDirContext<\/code>,\n+ * It also defines subinterfaces of {@code Context} and {@code DirContext},\n+ * called {@code EventContext} and {@code EventDirContext},\n@@ -49,1 +49,1 @@\n- * <code>NamingEvent<\/code> represents an event that occurs in a\n+ * {@code NamingEvent} represents an event that occurs in a\n@@ -56,1 +56,1 @@\n- * <code>NamespaceChangeListener<\/code>, <code>ObjectChangeListener<\/code>.\n+ * {@code NamespaceChangeListener}, {@code ObjectChangeListener}.\n@@ -61,1 +61,1 @@\n- * <pre>\n+ * {@snippet :\n@@ -75,1 +75,1 @@\n- * <\/pre>\n+ * }\n@@ -82,2 +82,2 @@\n- * as <code>objectChanged()<\/code>) may be executed in a thread other than the\n- * one in which the call to <code>addNamingListener()<\/code> was executed.\n+ * as {@code objectChanged()}) may be executed in a thread other than the\n+ * one in which the call to {@code addNamingListener()} was executed.\n@@ -89,1 +89,1 @@\n- * When a listener instance invokes <code>NamingEvent.getEventContext()<\/code>,\n+ * When a listener instance invokes {@code NamingEvent.getEventContext()},\n@@ -91,2 +91,2 @@\n- * working with that context concurrently.  Likewise, when a listener is\n- * registered via <code>addNamingListener()<\/code>, the registering thread\n+ * working with that context concurrently. Likewise, when a listener is\n+ * registered via {@code addNamingListener()}, the registering thread\n@@ -94,1 +94,1 @@\n- * will later invoke the listeners in newly-created threads.  As <code>Context<\/code>\n+ * will later invoke the listeners in newly-created threads. As {@code Context}\n@@ -102,1 +102,1 @@\n- * required to generate the events.  The context, for example, might need\n+ * required to generate the events. The context, for example, might need\n@@ -107,1 +107,1 @@\n- * When such an exception occurs, a <code>NamingExceptionEvent<\/code> is\n+ * When such an exception occurs, a {@code NamingExceptionEvent} is\n@@ -109,1 +109,1 @@\n- * <code>namingExceptionThrown()<\/code> method is invoked, as shown in the\n+ * {@code namingExceptionThrown()} method is invoked, as shown in the\n@@ -115,1 +115,0 @@\n- *\n","filename":"src\/java.naming\/share\/classes\/javax\/naming\/event\/package-info.java","additions":18,"deletions":19,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * written in the Java programming language.  It is designed to be\n+ * written in the Java programming language. It is designed to be\n@@ -36,1 +36,1 @@\n- * implementation.  Thus a variety of services--new, emerging, and\n+ * implementation. Thus a variety of services--new, emerging, and\n@@ -43,1 +43,1 @@\n- * The core interface in this package is <code>LdapContext<\/code>, which defines\n+ * The core interface in this package is {@code LdapContext}, which defines\n@@ -49,1 +49,1 @@\n- * This package defines the interface <code>ExtendedRequest<\/code>\n+ * This package defines the interface {@code ExtendedRequest}\n@@ -51,1 +51,1 @@\n- * and the interface <code>ExtendedResponse<\/code> to represent the result\n+ * and the interface {@code ExtendedResponse} to represent the result\n@@ -72,1 +72,1 @@\n- * <code>GetTimeRequest<\/code> and <code>GetTimeResponse<\/code>,\n+ * {@code GetTimeRequest} and {@code GetTimeResponse},\n@@ -75,1 +75,1 @@\n- * <blockquote><pre>\n+ * {@snippet :\n@@ -79,1 +79,1 @@\n- * <\/pre><\/blockquote>\n+ * }\n@@ -81,1 +81,1 @@\n- * The <code>GetTimeRequest<\/code> and <code>GetTimeResponse<\/code> classes might\n+ * The {@code GetTimeRequest} and {@code GetTimeResponse} classes might\n@@ -83,1 +83,1 @@\n- * <blockquote><pre>\n+ * {@snippet :\n@@ -101,1 +101,1 @@\n- * public class GetTimeResponse() implements ExtendedResponse {\n+ * public class GetTimeResponse implements ExtendedResponse {\n@@ -122,1 +122,1 @@\n- * <\/pre><\/blockquote>\n+ * }\n@@ -126,1 +126,1 @@\n- * This package defines the interface <code>Control<\/code> to represent an LDAPv3\n+ * This package defines the interface {@code Control} to represent an LDAPv3\n@@ -129,1 +129,1 @@\n- * (<em>response control<\/em>).  Unlike extended requests and responses,\n+ * (<em>response control<\/em>). Unlike extended requests and responses,\n@@ -131,1 +131,1 @@\n- * response controls.  You can send request controls and expect no\n+ * response controls. You can send request controls and expect no\n@@ -139,1 +139,1 @@\n- * vendor-specific controls.  The request control classes should have\n+ * vendor-specific controls. The request control classes should have\n@@ -143,1 +143,1 @@\n- * manner.  Internally, the request\/response control classes deal with\n+ * manner. Internally, the request\/response control classes deal with\n@@ -149,1 +149,1 @@\n- * It would supply a class <code>SignedResultsControl<\/code>  so that applications\n+ * It would supply a class {@code SignedResultsControl} so that applications\n@@ -151,3 +151,2 @@\n- * An application  would use this class as follows:\n- * <blockquote>\n- * <pre>\n+ * An application would use this class as follows:\n+ * {@snippet :\n@@ -157,4 +156,3 @@\n- * <\/pre>\n- * <\/blockquote>\n- * The <code>SignedResultsControl<\/code> class might be defined as follows:\n- * <blockquote><pre>\n+ * }\n+ * The {@code SignedResultsControl} class might be defined as follows:\n+ * {@snippet :\n@@ -176,1 +174,1 @@\n- * <\/pre><\/blockquote>\n+ * }\n@@ -179,2 +177,2 @@\n- * the <code>ControlFactory<\/code> class to produce specific classes\n- * that implement the <code>Control<\/code> interface.\n+ * the {@code ControlFactory} class to produce specific classes\n+ * that implement the {@code Control} interface.\n@@ -185,1 +183,1 @@\n- * The <code>LdapContext<\/code> provides a method (<code>getResponseControls()<\/code>)\n+ * The {@code LdapContext} provides a method ({@code getResponseControls()})\n@@ -187,1 +185,1 @@\n- * while the <code>HasControls<\/code> interface is used to retrieve\n+ * while the {@code HasControls} interface is used to retrieve\n@@ -191,1 +189,1 @@\n- * to a successful modification. It would supply a class <code>ChangeIDControl<\/code>\n+ * to a successful modification. It would supply a class {@code ChangeIDControl}\n@@ -194,1 +192,1 @@\n- * <blockquote><pre>\n+ * {@snippet :\n@@ -202,1 +200,1 @@\n- *     for (int i = 0; i &lt; respCtls; i++) {\n+ *     for (int i = 0; i < respCtls.length; i++) {\n@@ -209,3 +207,3 @@\n- * <\/pre><\/blockquote>\n- * The vendor might supply the following <code>ChangeIDControl<\/code> and\n- * <code>VendorXControlFactory<\/code> classes. The <code>VendorXControlFactory<\/code>\n+ * }\n+ * The vendor might supply the following {@code ChangeIDControl} and\n+ * {@code VendorXControlFactory} classes. The {@code VendorXControlFactory}\n@@ -214,1 +212,1 @@\n- * <blockquote><pre>\n+ * {@snippet :\n@@ -252,1 +250,1 @@\n- * <\/pre><\/blockquote>\n+ * }\n","filename":"src\/java.naming\/share\/classes\/javax\/naming\/ldap\/package-info.java","additions":36,"deletions":38,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n- *  Extends the <code>javax.naming.ldap<\/code> package to provide the classes\n- *  and interfaces for the Service Provider Interface (SPI) for LDAP\n+ * Extends the {@code javax.naming.ldap} package to provide the classes\n+ * and interfaces for the Service Provider Interface (SPI) for LDAP\n","filename":"src\/java.naming\/share\/classes\/javax\/naming\/ldap\/spi\/package-info.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * written in the Java programming language.  It is designed to be\n+ * written in the Java programming language. It is designed to be\n@@ -35,1 +35,1 @@\n- * implementation.  Thus a variety of services--new, emerging, and\n+ * implementation. Thus a variety of services--new, emerging, and\n@@ -42,1 +42,1 @@\n- * by the <code>Context<\/code> interface.\n+ * by the {@code Context} interface.\n@@ -44,1 +44,1 @@\n- * <code>Context<\/code> is the core interface for looking up, binding, unbinding,\n+ * {@code Context} is the core interface for looking up, binding, unbinding,\n@@ -47,2 +47,2 @@\n- * <code>lookup()<\/code> is the most commonly used operation.\n- * You supply <code>lookup()<\/code>\n+ * {@code lookup()} is the most commonly used operation.\n+ * You supply {@code lookup()}\n@@ -55,2 +55,1 @@\n- * <blockquote>\n- * <pre>\n+ * {@snippet :\n@@ -59,2 +58,1 @@\n- * <\/pre>\n- * <\/blockquote>\n+ * }\n@@ -64,1 +62,1 @@\n- * Every naming method in the <code>Context<\/code>\n+ * Every naming method in the {@code Context}\n@@ -67,2 +65,2 @@\n- * <code>Name<\/code> argument and one that accepts a string name.\n- * <code>Name<\/code> is an interface that represents a generic\n+ * {@code Name} argument and one that accepts a string name.\n+ * {@code Name} is an interface that represents a generic\n@@ -70,2 +68,2 @@\n- * For these methods, <code>Name<\/code> can be used to represent a\n- * <em>composite name<\/em> (<code>CompositeName<\/code>)\n+ * For these methods, {@code Name} can be used to represent a\n+ * <em>composite name<\/em> ({@code CompositeName})\n@@ -74,1 +72,1 @@\n- * The overloads that accept <code>Name<\/code>\n+ * The overloads that accept {@code Name}\n@@ -83,1 +81,1 @@\n- * The <code>Binding<\/code> class represents a name-to-object binding.\n+ * The {@code Binding} class represents a name-to-object binding.\n@@ -87,2 +85,2 @@\n- * The <code>Binding<\/code> class is actually a subclass of\n- * <code>NameClassPair<\/code>, which consists\n+ * The {@code Binding} class is actually a subclass of\n+ * {@code NameClassPair}, which consists\n@@ -90,1 +88,1 @@\n- * The <code>NameClassPair<\/code> is useful when you only want\n+ * The {@code NameClassPair} is useful when you only want\n@@ -103,1 +101,1 @@\n- * JNDI defines a <em>reference<\/em>, represented by the <code>Reference<\/code>\n+ * JNDI defines a <em>reference<\/em>, represented by the {@code Reference}\n@@ -116,1 +114,1 @@\n- * <code>InitialContext<\/code>,\n+ * {@code InitialContext},\n@@ -124,2 +122,2 @@\n- * the course of performing naming and directory operations.  The root of\n- * this class hierarchy is <code>NamingException<\/code>.\n+ * the course of performing naming and directory operations. The root of\n+ * this class hierarchy is {@code NamingException}.\n@@ -128,1 +126,1 @@\n- * Otherwise, programs should catch <code>NamingException<\/code>.\n+ * Otherwise, programs should catch {@code NamingException}.\n","filename":"src\/java.naming\/share\/classes\/javax\/naming\/package-info.java","additions":23,"deletions":25,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * naming and directory services through the <code>javax.naming<\/code>\n+ * naming and directory services through the {@code javax.naming}\n@@ -35,1 +35,1 @@\n- * written in the Java programming language.  It is designed to be\n+ * written in the Java programming language. It is designed to be\n@@ -37,1 +37,1 @@\n- * implementation.  Thus a variety of services--new, emerging, and\n+ * implementation. Thus a variety of services--new, emerging, and\n@@ -59,1 +59,1 @@\n- * <code>javax.naming.Context.lookup()<\/code>\n+ * {@code javax.naming.Context.lookup()}\n@@ -70,1 +70,1 @@\n- * naming systems.  So in the process of completing\n+ * naming systems. So in the process of completing\n","filename":"src\/java.naming\/share\/classes\/javax\/naming\/spi\/package-info.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}