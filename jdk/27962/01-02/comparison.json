{"files":[{"patch":"@@ -676,0 +676,11 @@\n+  AtomicAccess::inc(&_promotion_failure_count);\n+  AtomicAccess::add(&_promotion_failure_words, size);\n+\n+  LogTarget(Debug, gc, plab) lt;\n+  LogStream ls(lt);\n+  if (lt.is_enabled()) {\n+    log_failed_promotion(ls, thread, size);\n+  }\n+}\n+\n+void ShenandoahOldGeneration::log_failed_promotion(LogStream& ls, Thread* thread, size_t size) {\n@@ -677,1 +688,1 @@\n-  const size_t MaxReportsPerEpoch = 4;\n+  constexpr size_t MaxReportsPerEpoch = 4;\n@@ -680,1 +691,0 @@\n-  auto heap = ShenandoahGenerationalHeap::heap();\n@@ -682,0 +692,1 @@\n+  const auto heap = ShenandoahGenerationalHeap::heap();\n@@ -683,4 +694,0 @@\n-\n-  AtomicAccess::inc(&_promotion_failure_count);\n-  AtomicAccess::add(&_promotion_failure_words, size);\n-\n@@ -688,8 +695,1 @@\n-    size_t promotion_expended;\n-    size_t promotion_reserve;\n-    {\n-      \/\/ Promotion failures should be very rare.  Invest in providing useful diagnostic info.\n-      ShenandoahHeapLocker locker(heap->lock());\n-      promotion_reserve = get_promoted_reserve();\n-      promotion_expended = get_promoted_expended();\n-    }\n+    \/\/ Promotion failures should be very rare.  Invest in providing useful diagnostic info.\n@@ -700,6 +700,10 @@\n-    log_info(gc, ergo)(\"Promotion failed, size %zu, has plab? %s, PLAB remaining: %zu\"\n-                       \", plab promotions %s, promotion reserve: %zu, promotion expended: %zu\"\n-                       \", old capacity: %zu, old_used: %zu, old unaffiliated regions: %zu\",\n-                       size * HeapWordSize, plab == nullptr? \"no\": \"yes\",\n-                       words_remaining * HeapWordSize, promote_enabled, promotion_reserve, promotion_expended,\n-                       max_capacity(), used(), free_unaffiliated_regions());\n+    \/\/ Promoted reserve is only changed by vm or control thread. Promoted expended is always accessed atomically.\n+    const size_t promotion_reserve = get_promoted_reserve();\n+    const size_t promotion_expended = get_promoted_expended();\n+\n+    ls.print_cr(\"Promotion failed, size %zu, has plab? %s, PLAB remaining: %zu\"\n+                \", plab promotions %s, promotion reserve: %zu, promotion expended: %zu\"\n+                \", old capacity: %zu, old_used: %zu, old unaffiliated regions: %zu\",\n+                size * HeapWordSize, plab == nullptr? \"no\": \"yes\",\n+                words_remaining * HeapWordSize, promote_enabled, promotion_reserve, promotion_expended,\n+                max_capacity(), used(), free_unaffiliated_regions());\n@@ -707,3 +711,1 @@\n-    if ((gc_id == last_report_epoch) && (epoch_report_count >= MaxReportsPerEpoch)) {\n-      log_debug(gc, ergo)(\"Squelching additional promotion failure reports for current epoch\");\n-    } else if (gc_id != last_report_epoch) {\n+    if (gc_id != last_report_epoch) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":25,"deletions":23,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-  \/\/ This logs that an evacuation to the old generation has failed\n+  \/\/ Increment promotion failure counters, optionally log a more detailed message\n@@ -176,0 +176,1 @@\n+  void log_failed_promotion(LogStream& ls, Thread* thread, size_t size);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}