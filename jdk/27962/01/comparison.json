{"files":[{"patch":"@@ -1093,0 +1093,4 @@\n+  log_info(gc, cset)(\"Concurrent cycle complete, promotions reserved: %zu, promotions expended: %zu, failed count: %zu, failed bytes: %zu\",\n+                     old_generation()->get_promoted_reserve(), old_generation()->get_promoted_expended(),\n+                     old_generation()->get_promotion_failed_count(), old_generation()->get_promotion_failed_words() * HeapWordSize);\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -207,0 +207,2 @@\n+    _promotion_failure_count(0),\n+    _promotion_failure_words(0),\n@@ -243,1 +245,3 @@\n-  AtomicAccess::store(&_promoted_expended, (size_t) 0);\n+  AtomicAccess::store(&_promoted_expended, static_cast<size_t>(0));\n+  AtomicAccess::store(&_promotion_failure_count, static_cast<size_t>(0));\n+  AtomicAccess::store(&_promotion_failure_words, static_cast<size_t>(0));\n@@ -678,3 +682,0 @@\n-  size_t promotion_reserve;\n-  size_t promotion_expended;\n-\n@@ -683,0 +684,3 @@\n+  AtomicAccess::inc(&_promotion_failure_count);\n+  AtomicAccess::add(&_promotion_failure_words, size);\n+\n@@ -684,0 +688,2 @@\n+    size_t promotion_expended;\n+    size_t promotion_reserve;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -68,2 +68,2 @@\n-  \/\/ Represents the quantity of live bytes we expect to promote in place during the next\n-  \/\/ evacuation cycle. This value is used by the young heuristic to trigger mixed collections.\n+  \/\/ Represents the quantity of live bytes we expect to promote during the next evacuation\n+  \/\/ cycle. This value is used by the young heuristic to trigger mixed collections.\n@@ -75,1 +75,1 @@\n-  \/\/ objects. This field records the total amount of padding used for such regions.\n+  \/\/ objects). This field records the total amount of padding used for such regions.\n@@ -78,0 +78,5 @@\n+  \/\/ Keep track of the number and size of promotions that failed. Perhaps we should use this to increase\n+  \/\/ the size of the old generation for the next collection cycle.\n+  size_t _promotion_failure_count;\n+  size_t _promotion_failure_words;\n+\n@@ -122,0 +127,4 @@\n+  \/\/ Return the count and size (in words) of failed promotions since the last reset\n+  size_t get_promotion_failed_count() const { return AtomicAccess::load(&_promotion_failure_count); }\n+  size_t get_promotion_failed_words() const { return AtomicAccess::load(&_promotion_failure_words); }\n+\n@@ -140,0 +149,1 @@\n+\n@@ -141,2 +151,2 @@\n-  void set_promotion_potential(size_t val) { _promotion_potential = val; };\n-  size_t get_promotion_potential() const { return _promotion_potential; };\n+  void set_promotion_potential(size_t val) { _promotion_potential = val; }\n+  size_t get_promotion_potential() const { return _promotion_potential; }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.hpp","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"}]}