{"files":[{"patch":"@@ -974,0 +974,2 @@\n+  # jdk.compiler-gendata needs the BUILD_JDK. If the BUILD_JDK was supplied\n+  # externally, no extra prerequisites are needed.\n@@ -976,0 +978,2 @@\n+      # When cross compiling and an external BUILD_JDK wasn't supplied, it's\n+      # produced by the create-buildjdk target.\n@@ -978,1 +982,3 @@\n-  else\n+  else ifeq ($(EXTERNAL_BUILDJDK), false)\n+    # When not cross compiling, the BUILD_JDK is the interim jdk image, and\n+    # the javac launcher is needed.\n","filename":"make\/Main.gmk","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -523,2 +523,2 @@\n-  BUILDJDK_JAVA_FLAGS_SMALL=\"-Xms32M -Xmx512M -XX:TieredStopAtLevel=1\"\n-  AC_SUBST(BUILDJDK_JAVA_FLAGS_SMALL)\n+  BUILD_JAVA_FLAGS_SMALL=\"-Xms32M -Xmx512M -XX:TieredStopAtLevel=1\"\n+  AC_SUBST(BUILD_JAVA_FLAGS_SMALL)\n","filename":"make\/autoconf\/boot-jdk.m4","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -666,1 +666,1 @@\n-BUILDJDK_JAVA_FLAGS_SMALL:=@BUILDJDK_JAVA_FLAGS_SMALL@\n+BUILD_JAVA_FLAGS_SMALL:=@BUILD_JAVA_FLAGS_SMALL@\n@@ -693,0 +693,1 @@\n+BUILD_JAVA_SMALL=@FIXPATH@ $(BUILD_JDK)\/bin\/java $(BUILD_JAVA_FLAGS_SMALL)\n","filename":"make\/autoconf\/spec.gmk.in","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -233,1 +233,1 @@\n-                              long timestamp, String currentVersion, String moduleClasses) throws IOException {\n+                              long timestamp, String currentVersion, String preReleaseTag, String moduleClasses) throws IOException {\n@@ -263,1 +263,10 @@\n-                                        mhd.versions);\n+                                        mhd.versions,\n+                                        version -> {\n+                                            String versionString = Character.toString(version);\n+                                            int versionNumber = Integer.parseInt(versionString, Character.MAX_RADIX);\n+                                            versionString = Integer.toString(versionNumber);\n+                                            if (versionNumber == currentVersionParsed && !preReleaseTag.isEmpty()) {\n+                                                versionString = versionString + \"-\" + preReleaseTag;\n+                                            }\n+                                            return versionString;\n+                                        });\n@@ -798,1 +807,2 @@\n-                                 String versions)\n+                                 String versions,\n+                                 Function<Character, String> version2ModuleVersion)\n@@ -803,1 +813,2 @@\n-            writeModule(directory2FileData, moduleDescription, header, ver);\n+            writeModule(directory2FileData, moduleDescription, header, ver,\n+                        version2ModuleVersion);\n@@ -811,1 +822,2 @@\n-                    char version) throws IOException {\n+                    char version,\n+                    Function<Character, String> version2ModuleVersion) throws IOException {\n@@ -820,2 +832,2 @@\n-        int versionNumber = Integer.parseInt(versionString, Character.MAX_RADIX);\n-        addAttributes(moduleDescription, header, constantPool, attributesMap, versionNumber);\n+        addAttributes(moduleDescription, header, constantPool, attributesMap,\n+                      version2ModuleVersion.apply(version));\n@@ -939,1 +951,1 @@\n-                               int version) {\n+                               String moduleVersion) {\n@@ -960,1 +972,1 @@\n-        int versionIdx = addString(cp, Integer.toString(version));\n+        int versionIdx = addString(cp, moduleVersion);\n@@ -4631,0 +4643,1 @@\n+                String preReleaseTag;\n@@ -4633,1 +4646,1 @@\n-                if (args.length == 6) {\n+                if (args.length == 7) {\n@@ -4639,2 +4652,3 @@\n-                    moduleClasses = args[5];\n-                } else if (args.length == 7) {\n+                    preReleaseTag = args[5];\n+                    moduleClasses = args[6];\n+                } else if (args.length == 8) {\n@@ -4646,1 +4660,2 @@\n-                    moduleClasses = args[6];\n+                    preReleaseTag = args[6];\n+                    moduleClasses = args[7];\n@@ -4662,0 +4677,1 @@\n+                                                  preReleaseTag,\n","filename":"make\/langtools\/src\/classes\/build\/tools\/symbolgenerator\/CreateSymbols.java","additions":29,"deletions":13,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -26,4 +26,0 @@\n-default:all\n-\n-include $(SPEC)\n-include MakeBase.gmk\n@@ -42,1 +38,1 @@\n-# Modules that should be visible for 9 - the documented modules:\n+# Modules that should be visible - the documented modules:\n@@ -44,0 +40,4 @@\n+CT_TRANSITIVE_MODULES := $(call FindTransitiveIndirectDepsForModules, $(CT_MODULES))\n+CT_MODULES_API_TARGETS := \\\n+    $(foreach m, $(CT_MODULES) $(CT_TRANSITIVE_MODULES), \\\n+      $(call SetupJavaCompilationApiTarget, $m, $(JDK_OUTPUTDIR)\/modules\/$m))\n@@ -45,2 +45,1 @@\n-# Get the complete module source path:\n-CT_MODULESOURCEPATH := $(call GetModuleSrcPath)\n+SYMBOL_FILES := $(wildcard $(MODULE_SRC)\/share\/data\/symbols\/*)\n@@ -71,6 +70,2 @@\n-$(SUPPORT_OUTPUTDIR)\/symbols\/ct.sym: \\\n-    $(COMPILE_CREATE_SYMBOLS) \\\n-    $(wildcard $(MODULE_SRC)\/share\/data\/symbols\/*) \\\n-    $(MODULE_INFOS) \\\n-    $(foreach m, $(CT_MODULES) $(call FindTransitiveIndirectDepsForModules, $(CT_MODULES)), \\\n-      $(call SetupJavaCompilationApiTarget, $m, $(JDK_OUTPUTDIR)\/modules\/$m))\n+$(SUPPORT_OUTPUTDIR)\/symbols\/ct.sym: $(COMPILE_CREATE_SYMBOLS) $(SYMBOL_FILES) \\\n+    $(MODULE_INFOS) $(CT_MODULES_API_TARGETS)\n@@ -80,1 +75,1 @@\n-\t$(BUILD_JAVA) \\\n+\t$(BUILD_JAVA_SMALL) \\\n@@ -89,0 +84,1 @@\n+\t    \"$(VERSION_PRE)\" \\\n","filename":"make\/modules\/jdk.compiler\/Gendata.gmk","additions":10,"deletions":14,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -129,0 +129,1 @@\n+                                               \"\",\n","filename":"test\/langtools\/tools\/javac\/platform\/CanHandleClassFilesTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,0 +44,2 @@\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n@@ -58,0 +60,3 @@\n+    private static final Pattern VERSION_PATTERN =\n+            Pattern.compile(\"^([0-9]+)(.[0-9]+)*(-.*)?\");\n+\n@@ -60,2 +65,16 @@\n-        doTestVersionInDependency(\"17\");\n-        doTestVersionInDependency(System.getProperty(\"java.specification.version\"));\n+        doTestVersionInDependency(\"11\", \"11\");\n+\n+        String expectedVersion = System.getProperty(\"java.version\");\n+        Matcher m = VERSION_PATTERN.matcher(expectedVersion);\n+\n+        if (m.find()) {\n+            String preRelease = m.group(3);\n+\n+            expectedVersion = m.group(1);\n+\n+            if (preRelease != null) {\n+                expectedVersion += preRelease;\n+            }\n+        }\n+\n+        doTestVersionInDependency(System.getProperty(\"java.specification.version\"), expectedVersion);\n@@ -64,1 +83,2 @@\n-    private void doTestVersionInDependency(String specificationVersion) throws Exception {\n+    private void doTestVersionInDependency(String specificationVersion,\n+                                           String expectedVersion) throws Exception {\n@@ -91,1 +111,1 @@\n-        assertEquals(specificationVersion, req.requiresVersion().get().stringValue());\n+        assertEquals(expectedVersion, req.requiresVersion().get().stringValue());\n","filename":"test\/langtools\/tools\/javac\/platform\/ModuleVersionTest.java","additions":24,"deletions":4,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -761,1 +761,1 @@\n-        new CreateSymbols().createSymbols(null, symbolsDesc.toAbsolutePath().toString(), classesZip.toAbsolutePath().toString(), 0, \"9\", modules.toString());\n+        new CreateSymbols().createSymbols(null, symbolsDesc.toAbsolutePath().toString(), classesZip.toAbsolutePath().toString(), 0, \"9\", \"\", modules.toString());\n@@ -1045,1 +1045,1 @@\n-        new CreateSymbols().createSymbols(null, symbolsDesc.toAbsolutePath().toString(), classDest, 0, \"8\", modules.toString());\n+        new CreateSymbols().createSymbols(null, symbolsDesc.toAbsolutePath().toString(), classDest, 0, \"8\", \"\", modules.toString());\n","filename":"test\/langtools\/tools\/javac\/platform\/createsymbols\/CreateSymbolsTestImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}