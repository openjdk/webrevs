{"files":[{"patch":"@@ -577,4 +577,2 @@\n-        } else if (code != null) {\n-            if (options.showDisassembled || options.showLineAndLocalVariableTables) {\n-                codeWriter.writeMinimal(code);\n-            }\n+        } else if (code != null && options.showDisassembled) {\n+            codeWriter.writeMinimal(code);\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/ClassWriter.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -269,5 +269,2 @@\n-        if (options.showDisassembled) {\n-            writeInstrs(attr);\n-            writeExceptionTable(attr);\n-        }\n-\n+        writeInstrs(attr);\n+        writeExceptionTable(attr);\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/CodeWriter.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -552,0 +552,4 @@\n+        if (!options.showDisassembled && !options.verbose && options.showLineAndLocalVariableTables) {\n+            reportWarning(\"err.incompatible.options\", \"-l without -c, line number and local variable tables will not be printed\");\n+        }\n+\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/JavapTask.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-\\  -l                               Print line number and local variable tables\n+\\  -l                               Print line number and local variable tables, works in combination with -c\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/resources\/javap.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8345145\n+ * @summary javap should not print LineNumberTable\/LocalVariableTable (-l) without disassembled code (-c).\n+ * @compile -g ClassWriterNoLineVariableTableTest.java\n+ * @run junit ClassWriterNoLineVariableTableTest\n+ * @modules jdk.jdeps\/com.sun.tools.javap\n+ *\/\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class ClassWriterNoLineVariableTableTest {\n+    String expectedErrorOutput = \"Warning: bad combination of options: -l without -c, line number and local variable tables will not be printed\";\n+\n+    @Test\n+    public void testJavapWithoutCodeAttribute() {\n+        String output = javap(\"-l\");\n+        assertContains(output, expectedErrorOutput,\n+            \"javap should throw warning, when -l used without -c or -v\");\n+        assertNotContains(output, \"LineNumberTable\",\n+            \"There should be no LineNumberTable output when javap is provided l without -c or -v\");\n+        assertNotContains(output, \"LocalVariableTable\",\n+            \"There should be no LineNumberTable output when javap is provided l without -c or -v\");\n+    }\n+\n+    @ParameterizedTest(name = \"Test javap with fixed option -l and varying option: {0}\")\n+    @ValueSource(strings = {\"-v\", \"-c\"})\n+    public void testJavapWithCodeAttribute(String addedOption) {\n+        String output = javap(\"-l\", addedOption);\n+        assertNotContains(output, expectedErrorOutput,\n+            \"There should be no warning when javap is provided -l and \" + addedOption);\n+        assertContains(output, \"LineNumberTable\",\n+            \"There should be LineNumberTable output when javap is provided -l and \" + addedOption);\n+        assertContains(output, \"LocalVariableTable\",\n+            \"There should be LocalVariableTable output when javap is provided -l and \" + addedOption);\n+    }\n+\n+    private static void assertContains(String actual, String expectedSubstring, String message) {\n+        assertTrue(actual.contains(expectedSubstring),\n+            message + \" - Expected '\" + actual + \"' to contain '\" + expectedSubstring + \"'\");\n+    }\n+\n+    private static void assertNotContains(String actual, String expectedSubstring, String message) {\n+        assertFalse(actual.contains(expectedSubstring),\n+            message + \" - Expected '\" + actual + \"' not to contain '\" + expectedSubstring + \"'\");\n+    }\n+\n+    private String javap(String... args) {\n+        StringWriter sw = new StringWriter();\n+        PrintWriter out = new PrintWriter(sw);\n+\n+        String[] fullArgs = new String[args.length + 1];\n+        System.arraycopy(args, 0, fullArgs, 0, args.length);\n+        fullArgs[args.length] = System.getProperty(\"test.classes\") + \"\/RandomLoop8345145.class\";\n+\n+        int rc = com.sun.tools.javap.Main.run(fullArgs, out);\n+        if (rc != 0)\n+            throw new Error(\"javap failed. rc=\" + rc);\n+        out.close();\n+        System.out.println(sw);\n+        return sw.toString();\n+    }\n+}\n+\n+class RandomLoop8345145 {\n+    public void randomLoop() {\n+        int x = 5;\n+        for (int i = 0; i < 10; i++) {\n+            x*=2;\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javap\/ClassWriterNoLineVariableTableTest.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -55,1 +55,1 @@\n-        List<String[]> runArgsList = List.of(new String[]{\"-c\", \"-l\"}, new String[]{\"-v\"}, new String[]{\"-l\"});\n+        List<String[]> runArgsList = List.of(new String[]{\"-c\", \"-l\"}, new String[]{\"-v\"});\n","filename":"test\/langtools\/tools\/javap\/ClassWriterTableIndentTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-        int rc = com.sun.tools.javap.Main.run(new String[] { \"-l\", f.getPath() }, out);\n+        int rc = com.sun.tools.javap.Main.run(new String[] { \"-l\", \"-c\", f.getPath() }, out);\n","filename":"test\/langtools\/tools\/javap\/T4459541.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-        test(clazz, count, \"-l\");\n+        test(clazz, count, \"-c\", \"-l\");\n","filename":"test\/langtools\/tools\/javap\/T8032814.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}