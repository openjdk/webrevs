{"files":[{"patch":"@@ -0,0 +1,155 @@\n+\/*\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4524015\n+ * @summary Tests that when user switches between windows using Alt-tab then the appropriate events are generated\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual AltTabEventsTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Choice;\n+import java.awt.Component;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.PopupMenu;\n+import java.awt.event.ActionListener;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+\n+public class AltTabEventsTest {\n+\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+           This test verifies that when user switches between windows using Alt-tab\n+           key combination then appropriate window events are generated. Also, when\n+           user interacts with Menu bar, Popup menu, Choice then no excessive window\n+           event is generated.\n+\n+           After test started you will see Frame('Test for 4524015')-F1 with some\n+           components and Frame('Another frame')-F2 with no components.\n+           1. Make F1 active by clicking on it.\n+           2. Press Alt-tab.\n+           In the messqge dialog area you should see that\n+           WINDOW_DEACTIVATED,WINDOW_LOST_FOCUS event were generated.\n+           If you switched to F2 then also WINDOW_ACTIVATED, WINDOW_GAINED_FOCUS\n+           were generated.\n+           If no events were generated the test FAILED.\n+           Repeat the 2) with different circumstances.\n+\n+           3. Make F1 active by clicking on it.\n+           4. Click on Menu bar\/Button 'popup'\/Choice and select some item from\n+           the list shown. If any of the window events appeared in the output then\n+           the test FAILED.\n+\n+           else the test PASSED.\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"AltTabEventsTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 5)\n+                .columns(35)\n+                .testUI(AltTabEventsTest::createTestUI)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createTestUI() {\n+        return new Test();\n+    }\n+}\n+\n+\n+class Test extends Frame {\n+    PopupMenu pop;\n+    Frame f;\n+\n+    void println(String messageIn) {\n+        PassFailJFrame.log(messageIn);\n+    }\n+\n+    public Test() {\n+        super(\"Test for 4524015\");\n+        WindowAdapter wa = new WindowAdapter() {\n+                public void windowActivated(WindowEvent e) {\n+                    println(e.toString());\n+                }\n+                public void windowDeactivated(WindowEvent e) {\n+                    println(e.toString());\n+                }\n+                public void windowGainedFocus(WindowEvent e) {\n+                    println(e.toString());\n+                }\n+                public void windowLostFocus(WindowEvent e) {\n+                    println(e.toString());\n+                }\n+            };\n+        addWindowListener(wa);\n+        addWindowFocusListener(wa);\n+\n+        f = new Frame(\"Another frame\");\n+        f.addWindowListener(wa);\n+        f.addWindowFocusListener(wa);\n+        f.setBounds(800, 300, 300, 100);\n+        f.setVisible(true);\n+\n+        setLayout(new FlowLayout());\n+        Button b = new Button(\"popup\");\n+        add(b);\n+        b.addActionListener(new ActionListener() {\n+                public void actionPerformed(ActionEvent e) {\n+                    pop.show((Component)e.getSource(), 10, 10);\n+                }\n+            });\n+        Choice cho = new Choice();\n+        add(cho);\n+        cho.addItem(\"1\");\n+        cho.addItem(\"2\");\n+        cho.addItem(\"3\");\n+\n+        MenuBar bar = new MenuBar();\n+        Menu menu = new Menu(\"menu\");\n+        MenuItem item = new MenuItem(\"first\");\n+        menu.add(item);\n+        item = new MenuItem(\"second\");\n+        menu.add(item);\n+        bar.add(menu);\n+        setMenuBar(bar);\n+\n+        pop = new PopupMenu();\n+        pop.add(\"1\");\n+        pop.add(\"@\");\n+        add(pop);\n+        setSize(300, 100);\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/Focus\/AltTabEventsTest.java","additions":155,"deletions":0,"binary":false,"changes":155,"status":"added"},{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4982943\n+ * @key headful\n+ * @summary focus lost in text fields or text areas, unable to enter characters from keyboar\n+ * @run main ComponentLostFocusTest\n+ *\/\n+\n+import java.awt.Dialog;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.KeyboardFocusManager;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.TextField;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.InputEvent;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+\n+public class ComponentLostFocusTest {\n+\n+    Frame frame = new Frame(\"Frame\");\n+    TextField tf = new TextField(\"Text Field\");\n+    static Robot r;\n+    Dialog dialog = null;\n+    volatile boolean passed;\n+\n+    public ComponentLostFocusTest() {\n+        try{\n+            r = new Robot();\n+        } catch(Exception e){\n+            throw new RuntimeException(e);\n+        }\n+        r.setAutoDelay(100);\n+\n+        dialog = new Dialog(frame, \"Dialog\", true);\n+\n+        frame.addWindowFocusListener(new WindowAdapter() {\n+            public void windowGainedFocus(WindowEvent e) {\n+                System.out.println(\"Frame gained focus: \"+e);\n+            }\n+        });\n+\n+        frame.setLayout (new FlowLayout ());\n+        frame.add(tf);\n+        frame.setSize(400,300);\n+        frame.setVisible(true);\n+        frame.setLocationRelativeTo(null);\n+        frame.validate();\n+    }\n+\n+    public void doTest() {\n+        \/\/ Do requesting focus to the modal dialog in order to after that\n+        \/\/ to do requesting focus to the frame\n+        System.out.println(\"dialog.setVisible.... \");\n+        new Thread(new Runnable() {\n+            public void run() {\n+                dialog.setVisible(true);\n+            }\n+        }).start();\n+\n+        \/\/ The bug is that this construction leads to the redundant xRequestFocus\n+        \/\/ By the way, the requestFocusInWindow() works fine before the fix\n+        System.out.println(\"requesting.... \");\n+        frame.requestFocus();\n+\n+        r.delay(1000);\n+\n+        \/\/ Returning the focus to the initial frame will work correctly after the fix\n+        System.out.println(\"disposing.... \");\n+        dialog.dispose();\n+\n+        r.delay(1000);\n+\n+        \/\/ We want to track the GAIN_FOCUS from this time\n+        tf.addFocusListener(new FocusAdapter() {\n+            public void focusGained(FocusEvent e) {\n+                System.out.println(\"TextField gained focus: \"+e);\n+                passed = true;\n+            }\n+        });\n+\n+        doRequestFocusToTextField();\n+\n+        System.out.println(\"Focused window: \" + KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusedWindow());\n+        System.out.println(\"Focus owner: \" + KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner());\n+\n+        if (!passed) {\n+            throw new RuntimeException(\"TextField got no focus! Test failed.\");\n+        }\n+    }\n+\n+    private void doRequestFocusToTextField(){\n+        \/\/ do activation using press title\n+        Point loc = frame.getLocationOnScreen();\n+        r.mouseMove(loc.x + frame.getWidth()\/2, loc.y + frame.getInsets().top\/2);\n+        r.waitForIdle();\n+        r.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        r.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        r.waitForIdle();\n+\n+        \/\/ request focus to the text field\n+        tf.requestFocus();\n+    }\n+\n+    public static final void main(String args[]){\n+        ComponentLostFocusTest test = new ComponentLostFocusTest();\n+        r.waitForIdle();\n+        r.delay(1000);\n+        test.doTest();\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/Focus\/ComponentLostFocusTest.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4128659\n+ * @summary Tests whether a focus request will work on a focus lost event.\n+ * @key headful\n+ * @run main FocusKeepTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.KeyboardFocusManager;\n+import java.awt.Robot;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.KeyEvent;\n+import javax.swing.JFrame;\n+import javax.swing.JTextField;\n+import javax.swing.SwingUtilities;\n+\n+public class FocusKeepTest {\n+\n+    static JFrame frame;\n+    static JTextField tf;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(100);\n+        try {\n+            SwingUtilities.invokeAndWait(() -> createTestUI());\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            robot.keyPress(KeyEvent.VK_TAB);\n+            robot.keyRelease(KeyEvent.VK_TAB);\n+            if (KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner() instanceof JTextField tf1) {\n+                if (!tf1.getText().equals(\"TextField 1\")) {\n+                    throw new RuntimeException(\"Focus on wrong textfield\");\n+                }\n+            } else {\n+                throw new RuntimeException(\"Focus not on correct component\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createTestUI() {\n+        frame = new JFrame(\"FocusKeepTest\");\n+        tf = new JTextField(\"TextField 1\");\n+        tf.addFocusListener(new MyFocusAdapter(\"TextField 1\"));\n+        frame.add(tf, BorderLayout.NORTH);\n+\n+        tf = new JTextField(\"TextField 2\");\n+        tf.addFocusListener(new MyFocusAdapter(\"TextField 2\"));\n+        frame.add(tf, BorderLayout.SOUTH);\n+\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    static class MyFocusAdapter extends FocusAdapter {\n+        private String myName;\n+\n+        public MyFocusAdapter (String name) {\n+            myName = name;\n+        }\n+\n+        public void focusLost (FocusEvent e) {\n+            if (myName.equals (\"TextField 1\")) {\n+                e.getComponent().requestFocus ();\n+            }\n+        }\n+\n+        public void focusGained (FocusEvent e) {\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Focus\/FocusKeepTest.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4845868\n+ * @summary REGRESSION: First keystroke after JDialog is closed is lost\n+ * @key headful\n+ * @run main KeyStrokeTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Dialog;\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.TextField;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.KeyAdapter;\n+import java.awt.event.KeyEvent;\n+\n+public class KeyStrokeTest {\n+    static boolean keyTyped;\n+    static Frame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            KeyStrokeTest test = new KeyStrokeTest();\n+            test.doTest();\n+        } finally {\n+            if (frame != null) {\n+                frame.dispose();\n+            }\n+        }\n+    }\n+\n+    private static void doTest() throws Exception {\n+        final Object monitor = new Object();\n+        frame = new Frame();\n+        TextField textField = new TextField() {\n+                public void transferFocus() {\n+                    System.err.println(\"transferFocus()\");\n+                    final Dialog dialog = new Dialog(frame, true);\n+                    Button btn = new Button(\"Close It\");\n+                    btn.addActionListener(new ActionListener() {\n+                            public void actionPerformed(ActionEvent e) {\n+                                System.err.println(\"action performed\");\n+                                dialog.setVisible(false);\n+                            }\n+                        });\n+                    dialog.add(btn);\n+                    dialog.setSize(200, 200);\n+                    dialog.setVisible(true);\n+                }\n+            };\n+\n+        textField.addKeyListener(new KeyAdapter() {\n+                public void keyTyped(KeyEvent e) {\n+                    System.err.println(e);\n+                    if (e.getKeyChar() == 'a') {\n+                        keyTyped = true;\n+                    }\n+\n+                    synchronized (monitor) {\n+                        monitor.notifyAll();\n+                    }\n+                }\n+            });\n+        frame.add(textField);\n+        frame.setSize(400, 400);\n+        frame.setVisible(true);\n+\n+        Robot robot = new Robot();\n+        robot.waitForIdle();\n+        robot.delay(1000);\n+        robot.keyPress(KeyEvent.VK_TAB);\n+        robot.keyRelease(KeyEvent.VK_TAB);\n+\n+        robot.delay(1000);\n+        robot.keyPress(KeyEvent.VK_SPACE);\n+        robot.keyRelease(KeyEvent.VK_SPACE);\n+\n+        robot.delay(1000);\n+        synchronized (monitor) {\n+            robot.keyPress(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_A);\n+            monitor.wait(3000);\n+        }\n+\n+        if (!keyTyped) {\n+            throw new RuntimeException(\"TEST FAILED\");\n+        }\n+\n+        System.out.println(\"Test passed\");\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/Focus\/KeyStrokeTest.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"}]}