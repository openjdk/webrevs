{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,2 @@\n+import java.util.stream.Collectors;\n+\n@@ -88,0 +90,26 @@\n+    \/**\n+     * Get system load.\n+     *\n+     * <dl>\n+     *   <dt>load() ~=   1 <\/dt><dd> fully loaded system, all cores are used 100%<\/dd>\n+     *   <dt>load() &lt; 1 <\/dt><dd> some cpu resources are available<\/dd>\n+     *   <dt>load() &gt; 1 <\/dt><dd> system is overloaded<\/dd>\n+     * <\/dl>\n+     *\n+     * @return the load of the system or Optional.empty() if the load can not be determined.\n+     *\/\n+    private static Optional<Double> systemLoad() {\n+        OperatingSystemMXBean bean = ManagementFactory.getPlatformMXBean(OperatingSystemMXBean.class);\n+        double average = bean.getSystemLoadAverage() \/ bean.getAvailableProcessors();\n+        return (average < 0)\n+            ? Optional.empty()\n+            : Optional.of(average);\n+    }\n+\n+    private static String minMax(List<Optional<Double>> l) {\n+        DoubleSummaryStatistics minmax = l.stream().flatMap(Optional::stream).collect(Collectors.summarizingDouble(d -> d));\n+        return minmax.getCount() != 0\n+            ? \"min: \" + minmax.getMin() + \", max: \" + minmax.getMax()\n+            : \"could not gather load statistics from system\";\n+    }\n+\n@@ -182,1 +210,1 @@\n-    private static boolean waitForDeduplication(String s1, String s2) {\n+    private static void waitForDeduplication(String s1, String s2) {\n@@ -186,0 +214,1 @@\n+        List<Optional<Double>> loadHistory = new ArrayList<>();\n@@ -187,0 +216,1 @@\n+            loadHistory.add(systemLoad());\n@@ -188,1 +218,1 @@\n-                return true;\n+                return;\n@@ -197,1 +227,1 @@\n-                throw new RuntimeException(e);\n+                throw new RuntimeException(\"Deduplication has not occurred: Thread.sleep() threw\", e);\n@@ -200,1 +230,1 @@\n-        return false;\n+        throw new RuntimeException(\"Deduplication has not occurred, load history: \" + minMax(loadHistory));\n@@ -243,0 +273,1 @@\n+        List<Optional<Double>> loadHistory = new ArrayList<>();\n@@ -244,0 +275,1 @@\n+            loadHistory.add(systemLoad());\n@@ -280,1 +312,1 @@\n-            throw new RuntimeException(\"String verification failed\");\n+            throw new RuntimeException(\"String verification failed, load history: \" + minMax(loadHistory));\n@@ -364,3 +396,1 @@\n-            if (!waitForDeduplication(dupString1, baseString)) {\n-                throw new RuntimeException(\"Deduplication has not occurred\");\n-            }\n+            waitForDeduplication(dupString1, baseString);\n@@ -401,3 +431,1 @@\n-            if (!waitForDeduplication(dupString3, internedString)) {\n-                throw new RuntimeException(\"Deduplication has not occurred for string 3\");\n-            }\n+            waitForDeduplication(dupString3, internedString);\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationTools.java","additions":40,"deletions":12,"binary":false,"changes":52,"status":"modified"}]}