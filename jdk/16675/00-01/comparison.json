{"files":[{"patch":"@@ -213,3 +213,2 @@\n-  \/\/ We omit printing altogether if:\n-  \/\/ - the current reserved value falls below scale\n-  \/\/ - none of the historic peaks (malloc, mmap committed, arena) raised above scale either\n+  \/\/ Omit printing if the current reserved value as well as all historical peaks (malloc, mmap committed, arena)\n+  \/\/ fall below scale threshold\n@@ -220,5 +219,8 @@\n-  if (amount_in_current_scale(MAX4(reserved_amount, pk_vm, pk_malloc, pk_arena)) > 0) {\n-    outputStream* out   = output();\n-    const char*   scale = current_scale();\n-    out->print(\"-%26s (\", NMTUtil::flag_to_name(flag));\n-    print_total(reserved_amount, committed_amount);\n+  if (amount_in_current_scale(MAX4(reserved_amount, pk_vm, pk_malloc, pk_arena)) == 0) {\n+    return;\n+  }\n+\n+  outputStream* out   = output();\n+  const char*   scale = current_scale();\n+  out->print(\"-%26s (\", NMTUtil::flag_to_name(flag));\n+  print_total(reserved_amount, committed_amount);\n@@ -226,5 +228,5 @@\n-    if (flag == mtClassShared) {\n-        size_t read_only_bytes = FileMapInfo::readonly_total();\n-      output()->print(\", readonly=\" SIZE_FORMAT \"%s\",\n-                      amount_in_current_scale(read_only_bytes), scale);\n-    }\n+  if (flag == mtClassShared) {\n+      size_t read_only_bytes = FileMapInfo::readonly_total();\n+    output()->print(\", readonly=\" SIZE_FORMAT \"%s\",\n+                    amount_in_current_scale(read_only_bytes), scale);\n+  }\n@@ -232,1 +234,1 @@\n-    out->print_cr(\")\");\n+  out->print_cr(\")\");\n@@ -234,23 +236,21 @@\n-    if (flag == mtClass) {\n-      \/\/ report class count\n-      out->print_cr(\"%27s (classes #\" SIZE_FORMAT \")\",\n-        \" \", (_instance_class_count + _array_class_count));\n-      out->print_cr(\"%27s (  instance classes #\" SIZE_FORMAT \", array classes #\" SIZE_FORMAT \")\",\n-        \" \", _instance_class_count, _array_class_count);\n-    } else if (flag == mtThread) {\n-      if (ThreadStackTracker::track_as_vm()) {\n-        const VirtualMemory* thread_stack_usage =\n-         _vm_snapshot->by_type(mtThreadStack);\n-        \/\/ report thread count\n-        out->print_cr(\"%27s (threads #\" SIZE_FORMAT \")\", \" \", ThreadStackTracker::thread_count());\n-        out->print(\"%27s (stack: \", \" \");\n-        print_total(thread_stack_usage->reserved(), thread_stack_usage->committed(), thread_stack_usage->peak_size());\n-      } else {\n-        MallocMemory* thread_stack_memory = _malloc_snapshot->by_type(mtThreadStack);\n-        const char* scale = current_scale();\n-        \/\/ report thread count\n-        out->print_cr(\"%27s (threads #\" SIZE_FORMAT \")\", \" \", thread_stack_memory->malloc_count());\n-        out->print(\"%27s (Stack: \" SIZE_FORMAT \"%s\", \" \",\n-          amount_in_current_scale(thread_stack_memory->malloc_size()), scale);\n-      }\n-      out->print_cr(\")\");\n+  if (flag == mtClass) {\n+    \/\/ report class count\n+    out->print_cr(\"%27s (classes #\" SIZE_FORMAT \")\",\n+      \" \", (_instance_class_count + _array_class_count));\n+    out->print_cr(\"%27s (  instance classes #\" SIZE_FORMAT \", array classes #\" SIZE_FORMAT \")\",\n+      \" \", _instance_class_count, _array_class_count);\n+  } else if (flag == mtThread) {\n+    if (ThreadStackTracker::track_as_vm()) {\n+      const VirtualMemory* thread_stack_usage =\n+       _vm_snapshot->by_type(mtThreadStack);\n+      \/\/ report thread count\n+      out->print_cr(\"%27s (threads #\" SIZE_FORMAT \")\", \" \", ThreadStackTracker::thread_count());\n+      out->print(\"%27s (stack: \", \" \");\n+      print_total(thread_stack_usage->reserved(), thread_stack_usage->committed(), thread_stack_usage->peak_size());\n+    } else {\n+      MallocMemory* thread_stack_memory = _malloc_snapshot->by_type(mtThreadStack);\n+      const char* scale = current_scale();\n+      \/\/ report thread count\n+      out->print_cr(\"%27s (threads #\" SIZE_FORMAT \")\", \" \", thread_stack_memory->malloc_count());\n+      out->print(\"%27s (Stack: \" SIZE_FORMAT \"%s\", \" \",\n+        amount_in_current_scale(thread_stack_memory->malloc_size()), scale);\n@@ -258,0 +258,2 @@\n+    out->print_cr(\")\");\n+  }\n@@ -259,4 +261,4 @@\n-     \/\/ report malloc'd memory\n-    if (amount_in_current_scale(MAX2(malloc_memory->malloc_size(), pk_malloc)) > 0) {\n-      print_malloc_line(malloc_memory->malloc_counter());\n-    }\n+   \/\/ report malloc'd memory\n+  if (amount_in_current_scale(MAX2(malloc_memory->malloc_size(), pk_malloc)) > 0) {\n+    print_malloc_line(malloc_memory->malloc_counter());\n+  }\n@@ -264,3 +266,3 @@\n-    if (amount_in_current_scale(MAX2(virtual_memory->reserved(), pk_vm)) > 0) {\n-      print_virtual_memory_line(virtual_memory->reserved(), virtual_memory->committed(), virtual_memory->peak_size());\n-    }\n+  if (amount_in_current_scale(MAX2(virtual_memory->reserved(), pk_vm)) > 0) {\n+    print_virtual_memory_line(virtual_memory->reserved(), virtual_memory->committed(), virtual_memory->peak_size());\n+  }\n@@ -268,3 +270,3 @@\n-    if (amount_in_current_scale(MAX2(malloc_memory->arena_size(), pk_arena)) > 0) {\n-      print_arena_line(malloc_memory->arena_counter());\n-    }\n+  if (amount_in_current_scale(MAX2(malloc_memory->arena_size(), pk_arena)) > 0) {\n+    print_arena_line(malloc_memory->arena_counter());\n+  }\n@@ -272,10 +274,9 @@\n-    if (flag == mtNMT &&\n-      amount_in_current_scale(_malloc_snapshot->malloc_overhead()) > 0) {\n-      out->print_cr(\"%27s (tracking overhead=\" SIZE_FORMAT \"%s)\", \" \",\n-        amount_in_current_scale(_malloc_snapshot->malloc_overhead()), scale);\n-    } else if (flag == mtClass) {\n-      \/\/ Metadata information\n-      report_metadata(Metaspace::NonClassType);\n-      if (Metaspace::using_class_space()) {\n-        report_metadata(Metaspace::ClassType);\n-      }\n+  if (flag == mtNMT &&\n+    amount_in_current_scale(_malloc_snapshot->malloc_overhead()) > 0) {\n+    out->print_cr(\"%27s (tracking overhead=\" SIZE_FORMAT \"%s)\", \" \",\n+      amount_in_current_scale(_malloc_snapshot->malloc_overhead()), scale);\n+  } else if (flag == mtClass) {\n+    \/\/ Metadata information\n+    report_metadata(Metaspace::NonClassType);\n+    if (Metaspace::using_class_space()) {\n+      report_metadata(Metaspace::ClassType);\n@@ -283,1 +284,0 @@\n-    out->print_cr(\" \");\n@@ -285,0 +285,1 @@\n+  out->print_cr(\" \");\n@@ -334,2 +335,1 @@\n-    \/\/ Omit printing if neither the current nor the historic peak malloc amount raises above\n-    \/\/ reporting scale threshold.\n+    \/\/ Omit printing if the current value and the historic peak value both fall below the reporting scale threshold\n@@ -366,2 +366,2 @@\n-    \/\/ Omit printing if neither the current nor the historic peak malloc amount raises above\n-    \/\/ reporting scale threshold.\n+    \/\/ Omit printing if the current value and the historic peak value both fall below the\n+    \/\/ reporting scale threshold\n","filename":"src\/hotspot\/share\/nmt\/memReporter.cpp","additions":62,"deletions":62,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-    \/\/ Repeat report at GB level. Peak should be 0 now. Current usage is 1KB, since arena2 is left, but that\n+    \/\/ Repeat report at GB level. Reserved should be 0 now. Current usage is 1KB, since arena2 is left, but that\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/HugeArenaTracking.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-    wb.NMTFree(memAlloc1);                           \/\/ current 0K #0 peak +768K #2\n+    wb.NMTFree(memAlloc1); \/\/ current 0K #0 peak +768K #2\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/MallocTestType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -798,5 +798,7 @@\n-        int needleIdx = 0;\n-        int haystackIdx = 0;\n-        boolean started = false;\n-        boolean found = false;\n-        while (needleIdx < needles.length && haystackIdx < haystack.length && (started == false || found == true)) {\n+\n+        if (needles.length == 0) {\n+            return;\n+        }\n+\n+        int firstNeedlePos = 0;\n+        for (int i = 0; i < haystack.length; i++) {\n@@ -804,1 +806,1 @@\n-                System.out.println(\"\" + haystackIdx + \":\" + haystack[haystackIdx]);\n+                System.out.println(\"\" + i + \":\" + haystack[i]);\n@@ -806,2 +808,1 @@\n-            found = haystack[haystackIdx].contains(needles[needleIdx]);\n-            if (found) {\n+            if (haystack[i].contains(needles[0])) {\n@@ -809,1 +810,1 @@\n-                    System.out.println(\"Matches pattern \" + needleIdx + \" (\\\"\" + haystack[haystackIdx] + \"\\\")\");\n+                    System.out.println(\"Matches pattern 0 (\\\"\" + needles[0] + \"\\\")\");\n@@ -811,2 +812,2 @@\n-                started = true;\n-                needleIdx++;\n+                firstNeedlePos = i;\n+                break;\n@@ -814,1 +815,0 @@\n-            haystackIdx++;\n@@ -816,4 +816,18 @@\n-        if (needleIdx < needles.length) {\n-            String err = \"First unmatched: \\\"\" + needles[needleIdx] + \"\\\"\";\n-            if (!verbose) { \/\/ don't print twice\n-                reportDiagnosticSummary();\n+\n+        for (int i = 1; i < needles.length; i++) {\n+            int haystackPos = firstNeedlePos + i;\n+            if (haystackPos < haystack.length) {\n+                if (verbose) {\n+                    System.out.println(\"\" + haystackPos + \":\" + haystack[haystackPos]);\n+                }\n+                if (haystack[haystackPos].contains(needles[i])) {\n+                    if (verbose) {\n+                        System.out.println(\"Matches pattern \" + i  + \"(\\\"\" + needles[i] + \"\\\")\");\n+                    }\n+                } else {\n+                    String err = \"First unmatched pattern: \" + i + \" (\\\"\" + needles[i] + \"\\\")\";\n+                    if (!verbose) { \/\/ don't print twice\n+                        reportDiagnosticSummary();\n+                    }\n+                    throw new RuntimeException(err);\n+                }\n@@ -821,1 +835,0 @@\n-            throw new RuntimeException(err);\n","filename":"test\/lib\/jdk\/test\/lib\/process\/OutputAnalyzer.java","additions":30,"deletions":17,"binary":false,"changes":47,"status":"modified"}]}