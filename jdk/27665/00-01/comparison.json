{"files":[{"patch":"@@ -3165,0 +3165,2 @@\n+                } else if ((flags & STATIC) != (member.flags_field & STATIC)) {\n+                    log.warning(LintWarnings.InconsistentInnerClasses(member, currentClassFile));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+import java.util.List;\n+import java.util.Objects;\n@@ -42,0 +44,1 @@\n+import toolbox.Task;\n@@ -49,1 +52,1 @@\n-    public void testStaticNonStatic() throws Exception {\n+    public void testNonStaticToStatic() throws Exception {\n@@ -91,0 +94,181 @@\n+        List<String> log = new JavacTask(tb)\n+            .options(\"-XDrawDiagnostics\", \"-Xlint:classfile\")\n+            .classpath(classes)\n+            .files(src.resolve(\"Complex.java\"))\n+            .outdir(classes)\n+            .run()\n+            .writeAll()\n+            .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = List.of(\n+            \"- compiler.warn.inconsistent.inner.classes: Complex.Nested, Other.class\",\n+            \"1 warning\"\n+        );\n+        if (!Objects.equals(expected, log)) {\n+            throw new AssertionError(\"Wrong output, expected: \" + expected +\n+                                     \", got: \" + log);\n+        }\n+    }\n+\n+    @Test\n+    public void testStaticToNonStatic() throws Exception {\n+        Path base = Paths.get(\".\");\n+        Path src = base.resolve(\"src\");\n+        Path classes = base.resolve(\"classes\");\n+\n+        tb.writeJavaFiles(src,\n+                          \"\"\"\n+                          public class Complex {\n+                              public static class Nested {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          public class Other {\n+                              Complex.Nested n;\n+                          }\n+                          \"\"\");\n+\n+        Files.createDirectories(classes);\n+\n+        new JavacTask(tb)\n+            .options(\"-XDrawDiagnostics\", \"-XDdev\")\n+            .files(tb.findJavaFiles(src))\n+            .outdir(classes)\n+            .run()\n+            .writeAll();\n+\n+        tb.writeJavaFiles(src,\n+                          \"\"\"\n+                          public class Complex {\n+                              public class Nested {}\n+                              private void t() {\n+                                  Other o;\n+                              }\n+                          }\n+                          \"\"\");\n+        new JavacTask(tb)\n+            .options(\"-XDrawDiagnostics\", \"-XDdev\")\n+            .classpath(classes)\n+            .files(src.resolve(\"Complex.java\"))\n+            .outdir(classes)\n+            .run()\n+            .writeAll();\n+        List<String> log = new JavacTask(tb)\n+            .options(\"-XDrawDiagnostics\", \"-Xlint:classfile\")\n+            .classpath(classes)\n+            .files(src.resolve(\"Complex.java\"))\n+            .outdir(classes)\n+            .run()\n+            .writeAll()\n+            .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = List.of(\n+            \"- compiler.warn.inconsistent.inner.classes: Complex.Nested, Other.class\",\n+            \"1 warning\"\n+        );\n+        if (!Objects.equals(expected, log)) {\n+            throw new AssertionError(\"Wrong output, expected: \" + expected +\n+                                     \", got: \" + log);\n+        }\n+    }\n+\n+    @Test\n+    public void testNoWarning() throws Exception {\n+        Path base = Paths.get(\".\");\n+        Path src = base.resolve(\"src\");\n+        Path classes = base.resolve(\"classes\");\n+\n+        tb.writeJavaFiles(src,\n+                          \"\"\"\n+                          public class Complex {\n+                              public static class Nested {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          public class Other {\n+                              Complex.Nested n;\n+                          }\n+                          \"\"\");\n+\n+        Files.createDirectories(classes);\n+\n+        new JavacTask(tb)\n+            .options(\"-XDrawDiagnostics\", \"-XDdev\")\n+            .files(tb.findJavaFiles(src))\n+            .outdir(classes)\n+            .run()\n+            .writeAll();\n+\n+        tb.writeJavaFiles(src,\n+                          \"\"\"\n+                          public class Complex {\n+                              public static class Nested {}\n+                              private void t() {\n+                                  Other o;\n+                              }\n+                          }\n+                          \"\"\");\n+        new JavacTask(tb)\n+            .options(\"-XDrawDiagnostics\", \"-XDdev\")\n+            .classpath(classes)\n+            .files(src.resolve(\"Complex.java\"))\n+            .outdir(classes)\n+            .run()\n+            .writeAll();\n+        new JavacTask(tb)\n+            .options(\"-XDrawDiagnostics\", \"-Xlint:classfile\", \"-Werror\")\n+            .classpath(classes)\n+            .files(src.resolve(\"Complex.java\"))\n+            .outdir(classes)\n+            .run()\n+            .writeAll();\n+    }\n+\n+    @Test\n+    public void testSuppress() throws Exception {\n+        Path base = Paths.get(\".\");\n+        Path src = base.resolve(\"src\");\n+        Path classes = base.resolve(\"classes\");\n+\n+        tb.writeJavaFiles(src,\n+                          \"\"\"\n+                          public class Complex {\n+                              public static class Nested {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          public class Other {\n+                              Complex.Nested n;\n+                          }\n+                          \"\"\");\n+\n+        Files.createDirectories(classes);\n+\n+        new JavacTask(tb)\n+            .options(\"-XDrawDiagnostics\", \"-XDdev\")\n+            .files(tb.findJavaFiles(src))\n+            .outdir(classes)\n+            .run()\n+            .writeAll();\n+\n+        tb.writeJavaFiles(src,\n+                          \"\"\"\n+                          public class Complex {\n+                              public class Nested {}\n+                              private void t() {\n+                                  Other o;\n+                              }\n+                          }\n+                          \"\"\");\n+        new JavacTask(tb)\n+            .options(\"-XDrawDiagnostics\", \"-XDdev\")\n+            .classpath(classes)\n+            .files(src.resolve(\"Complex.java\"))\n+            .outdir(classes)\n+            .run()\n+            .writeAll();\n+        new JavacTask(tb)\n+            .options(\"-XDrawDiagnostics\", \"-Xlint:-classfile\", \"-Werror\")\n+            .classpath(classes)\n+            .files(src.resolve(\"Complex.java\"))\n+            .outdir(classes)\n+            .run()\n+            .writeAll();\n","filename":"test\/langtools\/tools\/javac\/recovery\/SourceAndInnerClassInconsistency.java","additions":185,"deletions":1,"binary":false,"changes":186,"status":"modified"}]}