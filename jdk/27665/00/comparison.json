{"files":[{"patch":"@@ -3155,8 +3155,10 @@\n-                if ((flags & STATIC) == 0) {\n-                    ((ClassType)member.type).setEnclosingType(outer.type);\n-                    if (member.erasure_field != null)\n-                        ((ClassType)member.erasure_field).setEnclosingType(types.erasure(outer.type));\n-                }\n-                if (c == outer && member.owner == c) {\n-                    member.flags_field = flags;\n-                    enterMember(c, member);\n+                if ((member.flags_field & FROM_SOURCE) == 0) {\n+                    if ((flags & STATIC) == 0) {\n+                        ((ClassType)member.type).setEnclosingType(outer.type);\n+                        if (member.erasure_field != null)\n+                            ((ClassType)member.erasure_field).setEnclosingType(types.erasure(outer.type));\n+                    }\n+                    if (c == outer && member.owner == c) {\n+                        member.flags_field = flags;\n+                        enterMember(c, member);\n+                    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,1 +93,1 @@\n-        } catch (Exception ex) {\n+        } catch (Exception | LinkageError ex) {\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/JdiExecutionControl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test 8080069 8152925\n+ * @test 8080069 8152925 8340840 8368999\n@@ -285,0 +285,35 @@\n+\n+    @Test \/\/JDK-8368999\n+    public void testLinkageErrorWhileRedefine() {\n+        Snippet iKey = classKey(assertEval(\"sealed interface I permits C {}\",\n+                                           ste(MAIN_SNIPPET, NONEXISTENT, RECOVERABLE_NOT_DEFINED, false, null)));\n+        Snippet cKey = classKey(assertEval(\"sealed class C implements I permits SubC {}\",\n+                                           ste(MAIN_SNIPPET, NONEXISTENT, RECOVERABLE_NOT_DEFINED, false, null)));\n+        Snippet subCKey = classKey(assertEval(\"final class SubC extends C {}\",\n+                                              ste(MAIN_SNIPPET, NONEXISTENT, VALID, true, null),\n+                                              ste(iKey, RECOVERABLE_NOT_DEFINED, VALID, true, null),\n+                                              ste(cKey, RECOVERABLE_NOT_DEFINED, VALID, true, null)));\n+        assertEval(\"sealed abstract class C implements I permits SubC {}\",\n+                   ste(MAIN_SNIPPET, VALID, VALID, true, null),\n+                   ste(iKey, VALID, VALID, true, null),\n+                   ste(subCKey, VALID, VALID, true, null),\n+                   ste(cKey, VALID, OVERWRITTEN, false, null));\n+    }\n+\n+    @Test \/\/JDK-8340840\n+    public void testStaticNonStatic() {\n+        Snippet oKey = classKey(assertEval(\"class O { class I {} }\"));\n+        Snippet vKey = varKey(assertEval(\"var i = new O().new I();\"));\n+        assertEval(\"class O { static class I {} }\",\n+                   DiagCheck.DIAG_OK,\n+                   DiagCheck.DIAG_ERROR,\n+                   ste(MAIN_SNIPPET, VALID, VALID, true, null),\n+                   ste(vKey, VALID, RECOVERABLE_NOT_DEFINED, true, null),\n+                   ste(oKey, VALID, OVERWRITTEN, false, null));\n+        assertEval(\"var i2 = new O.I();\");\n+        assertEval(\"var i = new O.I();\",\n+                   DiagCheck.DIAG_OK,\n+                   DiagCheck.DIAG_IGNORE, \/\/there are errors in the original (replaced) Snippet\n+                   ste(MAIN_SNIPPET, RECOVERABLE_NOT_DEFINED, VALID, true, null),\n+                   ste(vKey, RECOVERABLE_NOT_DEFINED, OVERWRITTEN, false, null));\n+    }\n","filename":"test\/langtools\/jdk\/jshell\/ReplaceTest.java","additions":36,"deletions":1,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8340840\n+ * @summary Ensure InnerClasses attribute from a classfile won't overwrite properties\n+ *          of a source-based class\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run junit SourceAndInnerClassInconsistency\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.jupiter.api.Test;\n+import toolbox.JavacTask;\n+import toolbox.ToolBox;\n+\n+public class SourceAndInnerClassInconsistency {\n+\n+    ToolBox tb = new ToolBox();\n+\n+    @Test\n+    public void testStaticNonStatic() throws Exception {\n+        Path base = Paths.get(\".\");\n+        Path src = base.resolve(\"src\");\n+        Path classes = base.resolve(\"classes\");\n+\n+        tb.writeJavaFiles(src,\n+                          \"\"\"\n+                          public class Complex {\n+                              public class Nested {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          public class Other {\n+                              Complex.Nested n;\n+                          }\n+                          \"\"\");\n+\n+        Files.createDirectories(classes);\n+\n+        new JavacTask(tb)\n+            .options(\"-XDrawDiagnostics\", \"-XDdev\")\n+            .files(tb.findJavaFiles(src))\n+            .outdir(classes)\n+            .run()\n+            .writeAll();\n+\n+        tb.writeJavaFiles(src,\n+                          \"\"\"\n+                          public class Complex {\n+                              public static class Nested {}\n+                              private void t() {\n+                                  Other o;\n+                              }\n+                          }\n+                          \"\"\");\n+        new JavacTask(tb)\n+            .options(\"-XDrawDiagnostics\", \"-XDdev\")\n+            .classpath(classes)\n+            .files(src.resolve(\"Complex.java\"))\n+            .outdir(classes)\n+            .run()\n+            .writeAll();\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/recovery\/SourceAndInnerClassInconsistency.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"}]}