{"files":[{"patch":"@@ -0,0 +1,174 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.Cursor;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Robot;\n+import java.awt.event.KeyAdapter;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+\n+\/*\n+ * @test\n+ * @bug 4050138\n+ * @key headful\n+ * @summary Test to verify Lightweight components don't get\n+ *          enter\/exit during drags\n+ * @run main MouseEnterExitTest\n+ *\/\n+\n+class LWSquare extends Container {\n+    int width;\n+    int height;\n+\n+    public LWSquare(Color color, int w, int h) {\n+        setBackground(color);\n+        setLayout(new FlowLayout());\n+        width = w;\n+        height = h;\n+        addMouseListener(new EnterExitAdapter(this));\n+        setName(\"LWSquare-\" + color.toString());\n+    }\n+\n+    public void paint(Graphics g) {\n+        g.setColor(getBackground());\n+        g.fillRect(0, 0, getSize().width, getSize().height);\n+        super.paint(g);\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(width, height);\n+    }\n+\n+    public Cursor getCursor() {\n+        return new Cursor(Cursor.CROSSHAIR_CURSOR);\n+    }\n+}\n+\n+class MouseFrame extends Frame {\n+    public LWSquare lw;\n+\n+    public MouseFrame() {\n+        super(\"MouseEnterExitTest\");\n+        setLayout(new FlowLayout());\n+\n+        lw = new LWSquare(Color.red, 75, 75);\n+        add(lw);\n+        setBounds(50, 50, 300, 200);\n+        setVisible(true);\n+        System.out.println(getInsets());\n+\n+        addMouseListener(new EnterExitAdapter(this));\n+        addWindowListener(\n+                new WindowAdapter() {\n+                    public void windowClosing(WindowEvent ev) {\n+                        dispose();\n+                    }\n+                }\n+        );\n+        addKeyListener(\n+                new KeyAdapter() {\n+                    public void keyPressed(KeyEvent ev) {\n+                        MouseEnterExitTest.getFrame().setTitle(\"MouseEnterExitTest\");\n+                    }\n+                }\n+        );\n+    }\n+}\n+\n+\n+public class MouseEnterExitTest {\n+    static MouseFrame testFrame;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+\n+        robot.setAutoDelay(100);\n+        try {\n+            EventQueue.invokeAndWait(() -> testFrame = new MouseFrame());\n+            if (testFrame.lw.getBackground() != Color.red) {\n+                throw new RuntimeException(\"Initial Background color not matching\");\n+            }\n+            robot.waitForIdle();\n+            robot.delay(100);\n+            EventQueue.invokeAndWait(() -> robot.mouseMove(\n+                    testFrame.getLocationOnScreen().x + testFrame.getSize().width \/ 2,\n+                    testFrame.getLocationOnScreen().y + testFrame.getSize().height \/ 2));\n+            robot.waitForIdle();\n+            robot.delay(100);\n+\n+            if (testFrame.lw.getBackground() != Color.green) {\n+                throw new RuntimeException(\"Initial Background color not matching\");\n+            }\n+            EventQueue.invokeAndWait(() -> robot.mouseMove(\n+                    testFrame.getLocationOnScreen().x + testFrame.getSize().width * 2,\n+                    testFrame.getLocationOnScreen().y + testFrame.getSize().height \/ 2));\n+            robot.waitForIdle();\n+            robot.delay(100);\n+\n+            if (testFrame.lw.getBackground() != Color.red) {\n+                throw new RuntimeException(\"Initial Background color not matching\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (testFrame != null) {\n+                    testFrame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static Frame getFrame() {\n+        return testFrame;\n+    }\n+}\n+\n+class EnterExitAdapter extends MouseAdapter {\n+    Component compToColor;\n+    Color colorNormal;\n+\n+    EnterExitAdapter(Component comp) {\n+        compToColor = comp;\n+        colorNormal = comp.getBackground();\n+    }\n+\n+    public void mouseEntered(MouseEvent ev) {\n+        compToColor.setBackground(Color.green);\n+        compToColor.repaint();\n+    }\n+\n+    public void mouseExited(MouseEvent ev) {\n+        compToColor.setBackground(colorNormal);\n+        compToColor.repaint();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Mouse\/MouseEnterExitTest.java","additions":174,"deletions":0,"binary":false,"changes":174,"status":"added"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.GridLayout;\n+import java.awt.Rectangle;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseListener;\n+\n+\/*\n+ * @test\n+ * @bug 4150851\n+ * @summary Tests enter and exit events when a lightweight component is on a border\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MouseEnterExitTest2\n+ *\/\n+\n+public class MouseEnterExitTest2 {\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Verify that white component turns black whenever mouse enters the frame,\n+                   except when it enters the red rectangle.\n+                2. When the mouse enters the red part of the frame the component should stay white.\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(EntryExitTest.initialize())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n+\n+class EntryExitTest extends Component {\n+    boolean inWin;\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(200, 150);\n+    }\n+\n+    public void paint(Graphics g) {\n+        Color c1, c2;\n+        String s;\n+        if (inWin) {\n+            c1 = Color.black;\n+            c2 = Color.white;\n+            s = \"IN\";\n+        } else {\n+            c2 = Color.black;\n+            c1 = Color.white;\n+            s = \"OUT\";\n+        }\n+        g.setColor(c1);\n+        Rectangle r = getBounds();\n+        g.fillRect(0, 0, r.width, r.height);\n+        g.setColor(c2);\n+        g.drawString(s, r.width \/ 2, r.height \/ 2);\n+    }\n+\n+    public static Frame initialize() {\n+        EntryExitTest test = new EntryExitTest();\n+        MouseListener frameEnterExitListener = new MouseAdapter() {\n+            public void mouseEntered(MouseEvent e) {\n+                test.inWin = true;\n+                test.repaint();\n+            }\n+\n+            public void mouseExited(MouseEvent e) {\n+                test.inWin = false;\n+                test.repaint();\n+            }\n+        };\n+\n+        Frame f = new Frame(\"Mouse Modifier Test\");\n+\n+        f.add(test);\n+        Component jc = new Component() {\n+            public Dimension getPreferredSize() {\n+                return new Dimension(100, 50);\n+            }\n+\n+            public void paint(Graphics g) {\n+                Dimension d = getSize();\n+                g.setColor(Color.red);\n+                g.fillRect(0, 0, d.width, d.height);\n+            }\n+        };\n+        final Container cont = new Container() {\n+            public Dimension getPreferredSize() {\n+                return new Dimension(100, 100);\n+            }\n+        };\n+        cont.setLayout(new GridLayout(2, 1));\n+        cont.add(jc);\n+        jc.addMouseListener(new MouseAdapter() {\n+            public void mouseEntered(MouseEvent e) {\n+                \/\/System.out.println(\"Component entered\");\n+            }\n+            public void mouseExited(MouseEvent e) {\n+                \/\/System.out.println(\"Component exited\");\n+            }\n+        });\n+\n+        f.add(cont, BorderLayout.NORTH);\n+        f.addMouseListener(frameEnterExitListener);\n+        f.pack();\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Mouse\/MouseEnterExitTest2.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseListener;\n+import javax.swing.JButton;\n+\n+\/*\n+ * @test\n+ * @bug 4431868\n+ * @summary Tests that hw container doesn't receive mouse enter\/exit events when mouse\n+ *          is moved between its lw and hw children\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MouseEnterExitTest3\n+ *\/\n+\n+public class MouseEnterExitTest3 {\n+    static final Button button = new Button(\"Button\");\n+    static final JButton jbutton = new JButton(\"JButton\");\n+    static final Frame frame = new Frame(\"Mouse Enter\/Exit Test\");\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Move the mouse between Button and JButton\n+                2. Verify that the frame doesn't receive enter\/exit events\n+                   (Enter\/exit events are dumped to the area below)\n+                4. If you see enter\/exit events dumped the test fails\n+                        \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(initialize())\n+                .logArea(4)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    final static MouseListener listener = new MouseAdapter() {\n+        public void mouseEntered(MouseEvent e) {\n+            PassFailJFrame.log(e.toString());\n+        }\n+\n+        public void mouseExited(MouseEvent e) {\n+            PassFailJFrame.log(e.toString());\n+        }\n+    };\n+\n+    public static Frame initialize() {\n+        frame.setLayout(new GridLayout(2, 1));\n+        frame.add(button);\n+        frame.add(jbutton);\n+        frame.addMouseListener(listener);\n+        frame.pack();\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Mouse\/MouseEnterExitTest3.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Frame;\n+import java.awt.Window;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseListener;\n+import java.util.List;\n+\n+\/*\n+ * @test\n+ * @bug 4431868\n+ * @summary Tests that window totally obscured by its child doesn't receive\n+ *          enter\/exit events when located over another frame\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MouseEnterExitTest4\n+ *\/\n+\n+public class MouseEnterExitTest4 {\n+    static Button button = new Button(\"Button\");\n+    static Frame frame = new Frame(\"Mouse Enter\/Exit test\");\n+    static Window window = new Window(frame);\n+    static MouseListener listener = new MouseAdapter() {\n+        public void mouseEntered(MouseEvent e) {\n+            PassFailJFrame.log(e.toString());\n+        }\n+\n+        public void mouseExited(MouseEvent e) {\n+            PassFailJFrame.log(e.toString());\n+        }\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. You should see a frame titled \"Mouse Enter\/Exit test\" and a window\n+                   with a red button located over the frame\n+                2. Rapidly move the mouse to enter\/exit the button\n+                3. Verify that the window doesn't receive enter\/exit events\n+                4. Enter\/exit events are dumped to the area below\n+                5. If you see enter\/exit events dumped the test fails\n+                   \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(initialize())\n+                .logArea(4)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static List<Window> initialize() {\n+        button.setBackground(Color.red);\n+        window.add(button);\n+        frame.setBounds(100, 100, 300, 300);\n+        window.setBounds(200, 200, 100, 100);\n+        window.addMouseListener(listener);\n+        return List.of(frame, window);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Mouse\/MouseEnterExitTest4.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Container;\n+import java.awt.GridLayout;\n+import javax.swing.JButton;\n+import javax.swing.JCheckBox;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JRadioButton;\n+import javax.swing.JScrollPane;\n+import javax.swing.JToggleButton;\n+\n+\/*\n+ * @test\n+ * @bug 4268759\n+ * @summary Tests whether clicking on the edge of a lightweight button\n+ *          causes sticking behavior\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MousePressedTest\n+ *\/\n+\n+public class MousePressedTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Click and hold on the very bottom border (2-pixel-wide border) of the\n+                   JButton. Then drag the mouse straight down out of the JButton and\n+                   into the JRadioButton, and release the mouse button\n+                2. If the component remains highlighted as if the mouse button is still\n+                   down, the test fails\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(initialize())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame initialize() {\n+        JFrame f = new JFrame(\"JButton Test\");\n+        JPanel p = new JPanel();\n+        p.setLayout(new GridLayout(2, 2));\n+        JButton b = new JButton(\"JButton\");\n+        p.add(b);\n+        JCheckBox cb = new JCheckBox(\"JCheckBox\");\n+        p.add(cb);\n+        JRadioButton rb = new JRadioButton(\"JRadioButton\");\n+        p.add(rb);\n+        p.add(new JToggleButton(\"JToggleButton\"));\n+\n+        JScrollPane j = new JScrollPane(p,\n+                JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,\n+                JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);\n+\n+        Container c = f.getContentPane();\n+        c.setLayout(new GridLayout(1, 1));\n+        c.add(j);\n+        f.pack();\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Mouse\/MousePressedTest.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}