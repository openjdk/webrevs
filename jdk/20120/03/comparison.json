{"files":[{"patch":"@@ -1252,1 +1252,0 @@\n-bool ciMethod::is_initializer () const {         FETCH_FLAG_FROM_VM(is_initializer); }\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -355,1 +355,0 @@\n-  bool is_initializer () const;\n","filename":"src\/hotspot\/share\/ci\/ciMethod.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-    if (!mh->is_native() && !mh->is_static() && !mh->is_initializer()) {\n+    if (!mh->is_native() && !mh->is_static() && !mh->is_object_initializer() && !mh->is_static_initializer()) {\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompiler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2181,1 +2181,1 @@\n-    if (m->is_initializer() && !m->is_static()) {\n+    if (m->is_object_initializer()) {\n@@ -2208,1 +2208,1 @@\n-    if (!m->is_initializer() && !m->is_overpass()) {\n+    if (!m->is_object_initializer() && !m->is_static_initializer() && !m->is_overpass()) {\n@@ -2924,5 +2924,1 @@\n-  if (m->is_initializer()) {\n-    if (m->is_static_initializer()) {\n-      JVMCI_THROW_MSG_NULL(IllegalArgumentException,\n-          \"Cannot create java.lang.reflect.Method for class initializer\");\n-    }\n+  if (m->is_object_initializer()) {\n@@ -2930,0 +2926,3 @@\n+  } else if (m->is_static_initializer()) {\n+    JVMCI_THROW_MSG_NULL(IllegalArgumentException,\n+        \"Cannot create java.lang.reflect.Method for class initializer\");\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1233,3 +1233,4 @@\n-  if (m->is_static())           return false;   \/\/ e.g., Stream.empty\n-  if (m->is_initializer())      return false;   \/\/ <init> or <clinit>\n-  if (m->is_private())          return false;   \/\/ uses direct call\n+  if (m->is_static())             return false; \/\/ e.g., Stream.empty\n+  if (m->is_object_initializer()) return false; \/\/ <init>\n+  if (m->is_static_initializer()) return false; \/\/ <clinit>\n+  if (m->is_private())            return false; \/\/ uses direct call\n","filename":"src\/hotspot\/share\/oops\/klassVtable.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -849,4 +849,0 @@\n-bool Method::is_initializer() const {\n-  return is_object_initializer() || is_static_initializer();\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -579,3 +579,0 @@\n-  \/\/ returns true if the method is an initializer (<init> or <clinit>).\n-  bool is_initializer() const;\n-\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}