{"files":[{"patch":"@@ -1227,1 +1227,0 @@\n-bool ciMethod::is_initializer () const {         FETCH_FLAG_FROM_VM(is_initializer); }\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -355,1 +355,0 @@\n-  bool is_initializer () const;\n","filename":"src\/hotspot\/share\/ci\/ciMethod.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3017,1 +3017,1 @@\n-  if (m->is_initializer()) {\n+  if (m->is_object_initializer()) {\n@@ -3020,0 +3020,1 @@\n+    \/\/ Note: Static initializers can be here. Record them as plain methods.\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-    if (!mh->is_native() && !mh->is_static() && !mh->is_initializer()) {\n+    if (!mh->is_native() && !mh->is_static() && !mh->is_object_initializer() && !mh->is_static_initializer()) {\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompiler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2131,1 +2131,1 @@\n-    if (m->is_initializer() && !m->is_static()) {\n+    if (m->is_object_initializer()) {\n@@ -2158,1 +2158,1 @@\n-    if (!m->is_initializer() && !m->is_overpass()) {\n+    if (!m->is_object_initializer() && !m->is_static_initializer() && !m->is_overpass()) {\n@@ -2874,5 +2874,1 @@\n-  if (m->is_initializer()) {\n-    if (m->is_static_initializer()) {\n-      JVMCI_THROW_MSG_NULL(IllegalArgumentException,\n-          \"Cannot create java.lang.reflect.Method for class initializer\");\n-    }\n+  if (m->is_object_initializer()) {\n@@ -2880,0 +2876,3 @@\n+  } else if (m->is_static_initializer()) {\n+    JVMCI_THROW_MSG_NULL(IllegalArgumentException,\n+        \"Cannot create java.lang.reflect.Method for class initializer\");\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1233,3 +1233,4 @@\n-  if (m->is_static())           return false;   \/\/ e.g., Stream.empty\n-  if (m->is_initializer())      return false;   \/\/ <init> or <clinit>\n-  if (m->is_private())          return false;   \/\/ uses direct call\n+  if (m->is_static())             return false; \/\/ e.g., Stream.empty\n+  if (m->is_object_initializer()) return false; \/\/ <init>\n+  if (m->is_static_initializer()) return false; \/\/ <clinit>\n+  if (m->is_private())            return false; \/\/ uses direct call\n","filename":"src\/hotspot\/share\/oops\/klassVtable.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -849,4 +849,0 @@\n-bool Method::is_initializer() const {\n-  return is_object_initializer() || is_static_initializer();\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -579,3 +579,0 @@\n-  \/\/ returns true if the method is an initializer (<init> or <clinit>).\n-  bool is_initializer() const;\n-\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-  if (callee_method->is_initializer()) {\n+  if (callee_method->is_object_initializer()) {\n@@ -92,1 +92,1 @@\n-  if (caller_method->is_initializer() &&\n+  if (caller_method->is_object_initializer() &&\n","filename":"src\/hotspot\/share\/opto\/bytecodeInfo.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1604,4 +1604,2 @@\n-  assert(initializer != nullptr &&\n-         initializer->is_initializer() &&\n-         !initializer->is_static(),\n-             \"unexpected initializer method\");\n+  assert(initializer != nullptr && initializer->is_object_initializer(),\n+         \"unexpected initializer method\");\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1012,1 +1012,1 @@\n-  if (method()->is_initializer() &&\n+  if (method()->is_object_initializer() &&\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -447,1 +447,1 @@\n-  if (m->is_initializer()) {\n+  if (m->is_object_initializer()) {\n@@ -450,0 +450,1 @@\n+    assert(!m->is_static_initializer(), \"Cannot be static initializer\");\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1870,1 +1870,1 @@\n-    return (method->is_initializer() && !method->is_static());\n+    return method->is_object_initializer();\n@@ -1872,1 +1872,1 @@\n-    return  (!method->is_initializer() && !method->is_overpass());\n+    return !method->is_object_initializer() && !method->is_static_initializer() && !method->is_overpass();\n@@ -2217,3 +2217,1 @@\n-  if (!m->is_initializer() || m->is_static()) {\n-    method = Reflection::new_method(m, true, CHECK_NULL);\n-  } else {\n+  if (m->is_object_initializer()) {\n@@ -2221,0 +2219,3 @@\n+  } else {\n+    \/\/ new_method accepts <clinit> as Method here\n+    method = Reflection::new_method(m, true, CHECK_NULL);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -316,0 +316,1 @@\n+      assert(!m->is_static_initializer(), \"Cannot be static initializer\");\n@@ -317,1 +318,1 @@\n-    } else if (m->is_initializer()) {\n+    } else if (m->is_object_initializer()) {\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -770,2 +770,2 @@\n-  assert(!method()->is_initializer() ||\n-         (for_constant_pool_access && method()->is_static()),\n+  assert(!method()->is_object_initializer() &&\n+         (for_constant_pool_access || !method()->is_static_initializer()),\n@@ -820,1 +820,1 @@\n-  assert(method()->is_initializer(), \"should call new_method instead\");\n+  assert(method()->is_object_initializer(), \"should call new_method instead\");\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}