{"files":[{"patch":"@@ -3433,4 +3433,9 @@\n-      \/\/ We are going to add pre-loop and post-loop.\n-      \/\/ But should we also multi-version for auto-vectorization speculative\n-      \/\/ checks, i.e. fast and slow-paths?\n-      phase->maybe_multiversion_for_auto_vectorization_runtime_checks(this, old_new);\n+      if (!peel_only) {\n+        \/\/ We are going to add pre-loop and post-loop (PreMainPost).\n+        \/\/ But should we also multiversion for auto-vectorization speculative\n+        \/\/ checks, i.e. fast and slow-paths?\n+        \/\/ Note: Just PeelMainPost is not sufficient, as we could never find the\n+        \/\/       multiversion_if again from the main loop: we need a nicely structured\n+        \/\/       pre-loop, a peeled iteration cannot easily be parsed through.\n+        phase->maybe_multiversion_for_auto_vectorization_runtime_checks(this, old_new);\n+      }\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -4474,0 +4474,4 @@\n+        } else {\n+          \/\/ We could not find the multiversion_if, and would never find it again. Remove the\n+          \/\/ multiversion marking for consistency.\n+          head->set_no_multiversion();\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4487,1 +4487,1 @@\n-\/\/ Just before insert_pre_post_loops, we can multi-version the loop:\n+\/\/ Just before insert_pre_post_loops, we can multiversion the loop:\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.loopopts.superword;\n+\n+\/*\n+ * @test\n+ * @bug 8352587\n+ * @summary Test case where we used to Multiversion a PeelMainPost loop,\n+ *          which is useless and triggered an assert later on.\n+ * @run main compiler.loopopts.superword.TestMultiversionWithPeelMainPost\n+ * @run main\/othervm -XX:CompileCommand=compileonly,compiler.loopopts.superword.TestMultiversionWithPeelMainPost::test\n+ *                   -XX:-TieredCompilation -Xcomp\n+ *                   -XX:PerMethodTrapLimit=0\n+ *                   compiler.loopopts.superword.TestMultiversionWithPeelMainPost\n+ *\/\n+\n+public class TestMultiversionWithPeelMainPost {\n+    static byte byArr[] = new byte[2];\n+\n+    public static void main(String[] strArr) {\n+        test();\n+    }\n+\n+    static void test() {\n+        int x = 2;\n+        int i = 4;\n+        while (i > 0) {\n+            for (int j = 5; j < 56; j++) {\n+                byArr[1] = 3;\n+            }\n+            for (int j = 256; j > 3; j -= 2) {\n+                x += 3;\n+            }\n+            i--;\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestMultiversionWithPeelMainPost.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.loopopts.superword;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8352587\n+ * @summary IR test to ensure that PeelMainPost cases does not get Multiversioned.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestPeelMainPostNoMultiversioning\n+ *\/\n+\n+public class TestPeelMainPostNoMultiversioning {\n+\n+    public static void main(String[] args) {\n+        TestFramework framework = new TestFramework(TestPeelMainPostNoMultiversioning.class);\n+        \/\/ No traps means we cannot use the predicates version for SuperWord \/ AutoVectorization,\n+        \/\/ and instead use multiversioning directly.\n+        framework.addFlags(\"-XX:-TieredCompilation\", \"-XX:PerMethodTrapLimit=0\");\n+        framework.setDefaultWarmup(0); \/\/ simulates Xcomp\n+        framework.start();\n+    }\n+\n+    public static long value = 1;\n+    public static long multiplicator = 3;\n+\n+    @Test\n+    @IR(counts = {\".*multiversion.*\", \"= 0\"},\n+        phase = CompilePhase.PHASEIDEALLOOP1)\n+    @IR(counts = {\".*multiversion.*\", \"= 0\"},\n+        phase = CompilePhase.PHASEIDEALLOOP_ITERATIONS)\n+    @IR(counts = {\".*multiversion.*\", \"= 0\"},\n+        phase = CompilePhase.PRINT_IDEAL)\n+    \/\/ We are checking it for a few phases, just to make sure we are not seeing multiversioning\n+    \/\/ at any point.\n+    public static void test() {\n+        long x = value;\n+        long y = multiplicator;\n+        for (int i = 0; i < 10_000; i++) {\n+            x *= y; \/\/ No memory load\/store -> PeelMainPost\n+        }\n+        value = x;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestPeelMainPostNoMultiversioning.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"}]}