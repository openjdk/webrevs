{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.io.IOException;\n@@ -47,1 +48,6 @@\n-    static byte[] decompress(byte[] bytesIn, int offset) throws Exception {\n+    static byte[] decompress(byte[] bytesIn, int offset, long originalSize) throws Exception {\n+        if (originalSize > Integer.MAX_VALUE) {\n+            throw new OutOfMemoryError(\"Required array size too large\");\n+        }\n+        byte[] bytesOut = new byte[(int) originalSize];\n+\n@@ -50,2 +56,0 @@\n-        ByteArrayOutputStream stream = new ByteArrayOutputStream(bytesIn.length - offset);\n-        byte[] buffer = new byte[1024];\n@@ -53,3 +57,3 @@\n-        while (!inflater.finished()) {\n-            int count = inflater.inflate(buffer);\n-            stream.write(buffer, 0, count);\n+        int count = 0;\n+        while (!inflater.finished() && count < originalSize) {\n+            count += inflater.inflate(bytesOut, count, bytesOut.length - count);\n@@ -58,3 +62,0 @@\n-        stream.close();\n-\n-        byte[] bytesOut = stream.toByteArray();\n@@ -63,0 +64,4 @@\n+        if (count != originalSize) {\n+            throw new IOException(\"Resource content size mismatch\");\n+        }\n+\n@@ -69,1 +74,1 @@\n-        byte[] decompressed = decompress(content, offset);\n+        byte[] decompressed = decompress(content, offset, originalSize);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/decompressor\/ZipDecompressor.java","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"}]}