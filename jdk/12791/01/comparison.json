{"files":[{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.jarsigner;\n-\n-import java.io.IOException;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.cert.CertificateException;\n-\n-\/**\n- * This class defines a content signing service.\n- * Implementations must be instantiable using a zero-argument constructor.\n- *\n- * @since 1.5\n- * @author Vincent Ryan\n- * @deprecated This class has been deprecated.\n- *\/\n-\n-@Deprecated(since=\"9\", forRemoval=true)\n-public abstract class ContentSigner {\n-\n-    \/**\n-     * Generates a PKCS #7 signed data message.\n-     * This method is used when the signature has already been generated.\n-     * The signature, the signer's details, and optionally a signature\n-     * timestamp and the content that was signed, are all packaged into a\n-     * signed data message.\n-     *\n-     * @param parameters The non-null input parameters.\n-     * @param omitContent true if the content should be omitted from the\n-     *         signed data message. Otherwise the content is included.\n-     * @param applyTimestamp true if the signature should be timestamped.\n-     *         Otherwise timestamping is not performed.\n-     * @return A PKCS #7 signed data message.\n-     * @throws NoSuchAlgorithmException The exception is thrown if the signature\n-     *         algorithm is unrecognised.\n-     * @throws CertificateException The exception is thrown if an error occurs\n-     *         while processing the signer's certificate or the TSA's\n-     *         certificate.\n-     * @throws IOException The exception is thrown if an error occurs while\n-     *         generating the signature timestamp or while generating the signed\n-     *         data message.\n-     * @throws NullPointerException The exception is thrown if parameters is\n-     *         null.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    public abstract byte[] generateSignedData(\n-        ContentSignerParameters parameters, boolean omitContent,\n-        boolean applyTimestamp)\n-            throws NoSuchAlgorithmException, CertificateException, IOException;\n-}\n","filename":"src\/jdk.jartool\/share\/classes\/com\/sun\/jarsigner\/ContentSigner.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -1,118 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.jarsigner;\n-\n-import java.net.URI;\n-import java.security.cert.X509Certificate;\n-import java.util.zip.ZipFile;\n-\n-\/**\n- * This interface encapsulates the parameters for a ContentSigner object.\n- *\n- * @since 1.5\n- * @author Vincent Ryan\n- * @deprecated This class has been deprecated.\n- *\/\n-@Deprecated(since=\"9\", forRemoval=true)\n-public interface ContentSignerParameters {\n-\n-    \/**\n-     * Retrieves the command-line arguments passed to the jarsigner tool.\n-     *\n-     * @return The command-line arguments. May be null.\n-     *\/\n-    public String[] getCommandLine();\n-\n-    \/**\n-     * Retrieves the identifier for a Timestamping Authority (TSA).\n-     *\n-     * @return The TSA identifier. May be null.\n-     *\/\n-    public URI getTimestampingAuthority();\n-\n-    \/**\n-     * Retrieves the certificate for a Timestamping Authority (TSA).\n-     *\n-     * @return The TSA certificate. May be null.\n-     *\/\n-    public X509Certificate getTimestampingAuthorityCertificate();\n-\n-    \/**\n-     * Retrieves the TSAPolicyID for a Timestamping Authority (TSA).\n-     *\n-     * @return The TSAPolicyID. May be null.\n-     *\/\n-    public default String getTSAPolicyID() {\n-        return null;\n-    }\n-\n-    \/**\n-     * Retreives the message digest algorithm that is used to generate\n-     * the message imprint to be sent to the TSA server.\n-     *\n-     * @since 9\n-     * @return The non-null string of the message digest algorithm name.\n-     *\/\n-    public default String getTSADigestAlg() {\n-        return \"SHA-256\";\n-    }\n-\n-    \/**\n-     * Retrieves the JAR file's signature.\n-     *\n-     * @return The non-null array of signature bytes.\n-     *\/\n-    public byte[] getSignature();\n-\n-    \/**\n-     * Retrieves the name of the signature algorithm.\n-     *\n-     * @return The non-null string name of the signature algorithm.\n-     *\/\n-    public String getSignatureAlgorithm();\n-\n-    \/**\n-     * Retrieves the signer's X.509 certificate chain.\n-     *\n-     * @return The non-null array of X.509 public-key certificates.\n-     *\/\n-    public X509Certificate[] getSignerCertificateChain();\n-\n-    \/**\n-     * Retrieves the content that was signed.\n-     * The content is the JAR file's signature file.\n-     *\n-     * @return The content bytes. May be null.\n-     *\/\n-    public byte[] getContent();\n-\n-    \/**\n-     * Retrieves the original source ZIP file before it was signed.\n-     *\n-     * @return The original ZIP file. May be null.\n-     *\/\n-    public ZipFile getSource();\n-}\n","filename":"src\/jdk.jartool\/share\/classes\/com\/sun\/jarsigner\/ContentSignerParameters.java","additions":0,"deletions":118,"binary":false,"changes":118,"status":"deleted"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/**\n- * This package comprises the interfaces and classes used to define the\n- * signing mechanism used by the {@code jarsigner} tool.\n- * <p>\n- * Clients may override the default signing mechanism of the {@code jarsigner}\n- * tool by supplying an alternative implementation of\n- * {@link com.sun.jarsigner.ContentSigner}.\n- *\n- * The classes in this package have been deprecated and will be removed in\n- * a future release. New classes should not be added to this package.\n- * Use the {@link jdk.security.jarsigner.JarSigner} API to sign JAR files.\n- *\/\n-\n-package com.sun.jarsigner;\n","filename":"src\/jdk.jartool\/share\/classes\/com\/sun\/jarsigner\/package-info.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -28,2 +28,0 @@\n-import com.sun.jarsigner.ContentSigner;\n-import com.sun.jarsigner.ContentSignerParameters;\n@@ -126,2 +124,0 @@\n-        String altSignerPath;\n-        String altSigner;\n@@ -394,6 +390,0 @@\n-                case \"altsignerpath\":\n-                    altSignerPath = value;\n-                    break;\n-                case \"altsigner\":\n-                    altSigner = value;\n-                    break;\n@@ -505,5 +495,0 @@\n-\n-    @Deprecated(since=\"16\", forRemoval=true)\n-    private final String altSignerPath;\n-    @Deprecated(since=\"16\", forRemoval=true)\n-    private final String altSigner;\n@@ -552,9 +537,0 @@\n-        this.altSigner = builder.altSigner;\n-        this.altSignerPath = builder.altSignerPath;\n-\n-        \/\/ altSigner cannot support modern algorithms like RSASSA-PSS and EdDSA\n-        if (altSigner != null\n-                && !sigalg.toUpperCase(Locale.ENGLISH).contains(\"WITH\")) {\n-            throw new IllegalArgumentException(\n-                    \"Customized ContentSigner is not supported for \" + sigalg);\n-        }\n@@ -661,4 +637,0 @@\n-            case \"altsignerpath\":\n-                return altSignerPath;\n-            case \"altsigner\":\n-                return altSigner;\n@@ -857,39 +829,17 @@\n-        if (altSigner == null) {\n-            Function<byte[], PKCS9Attributes> timestamper = null;\n-            if (tsaUrl != null) {\n-                timestamper = s -> {\n-                    try {\n-                        \/\/ Timestamp the signature\n-                        HttpTimestamper tsa = new HttpTimestamper(tsaUrl);\n-                        byte[] tsToken = PKCS7.generateTimestampToken(\n-                                tsa, tSAPolicyID, tSADigestAlg, s);\n-\n-                        return new PKCS9Attributes(new PKCS9Attribute[]{\n-                                new PKCS9Attribute(\n-                                        PKCS9Attribute.SIGNATURE_TIMESTAMP_TOKEN_OID,\n-                                        tsToken)});\n-                    } catch (IOException | CertificateException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                };\n-            }\n-            \/\/ We now create authAttrs in block data, so \"direct == false\".\n-            block = PKCS7.generateNewSignedData(sigalg, sigProvider, privateKey, certChain,\n-                    content, internalsf, false, timestamper);\n-        } else {\n-            Signature signer = SignatureUtil.fromKey(sigalg, privateKey, sigProvider);\n-            signer.update(content);\n-            byte[] signature = signer.sign();\n-\n-            @SuppressWarnings(\"removal\")\n-            ContentSignerParameters params =\n-                    new JarSignerParameters(null, tsaUrl, tSAPolicyID,\n-                            tSADigestAlg, signature,\n-                            signer.getAlgorithm(), certChain, content, zipFile);\n-            @SuppressWarnings(\"removal\")\n-            ContentSigner signingMechanism = loadSigningMechanism(altSigner, altSignerPath);\n-            block = signingMechanism.generateSignedData(\n-                    params,\n-                    !internalsf,\n-                    params.getTimestampingAuthority() != null\n-                            || params.getTimestampingAuthorityCertificate() != null);\n+        Function<byte[], PKCS9Attributes> timestamper = null;\n+        if (tsaUrl != null) {\n+            timestamper = s -> {\n+                try {\n+                    \/\/ Timestamp the signature\n+                    HttpTimestamper tsa = new HttpTimestamper(tsaUrl);\n+                    byte[] tsToken = PKCS7.generateTimestampToken(\n+                            tsa, tSAPolicyID, tSADigestAlg, s);\n+\n+                    return new PKCS9Attributes(new PKCS9Attribute[]{\n+                            new PKCS9Attribute(\n+                                    PKCS9Attribute.SIGNATURE_TIMESTAMP_TOKEN_OID,\n+                                    tsToken)});\n+                } catch (IOException | CertificateException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            };\n@@ -897,0 +847,3 @@\n+        \/\/ We now create authAttrs in block data, so \"direct == false\".\n+        block = PKCS7.generateNewSignedData(sigalg, sigProvider, privateKey, certChain,\n+                content, internalsf, false, timestamper);\n@@ -1104,38 +1057,0 @@\n-    \/*\n-     * Try to load the specified signing mechanism.\n-     * The URL class loader is used.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    private ContentSigner loadSigningMechanism(String signerClassName,\n-                                               String signerClassPath) {\n-\n-        \/\/ If there is no signerClassPath provided, search from here\n-        if (signerClassPath == null) {\n-            signerClassPath = \".\";\n-        }\n-\n-        \/\/ construct class loader\n-        String cpString;   \/\/ make sure env.class.path defaults to dot\n-\n-        \/\/ do prepends to get correct ordering\n-        cpString = PathList.appendPath(\n-                System.getProperty(\"env.class.path\"), null);\n-        cpString = PathList.appendPath(\n-                System.getProperty(\"java.class.path\"), cpString);\n-        cpString = PathList.appendPath(signerClassPath, cpString);\n-        URL[] urls = PathList.pathToURLs(cpString);\n-        ClassLoader appClassLoader = new URLClassLoader(urls);\n-\n-        try {\n-            \/\/ attempt to find signer\n-            Class<?> signerClass = appClassLoader.loadClass(signerClassName);\n-            Object signer = signerClass.getDeclaredConstructor().newInstance();\n-            return (ContentSigner) signer;\n-        } catch (ClassNotFoundException|InstantiationException|\n-                IllegalAccessException|ClassCastException|\n-                NoSuchMethodException| InvocationTargetException e) {\n-            throw new IllegalArgumentException(\n-                    \"Invalid altSigner or altSignerPath\", e);\n-        }\n-    }\n-\n@@ -1229,77 +1144,0 @@\n-\n-    @SuppressWarnings(\"removal\")\n-    @Deprecated(since=\"16\", forRemoval=true)\n-    class JarSignerParameters implements ContentSignerParameters {\n-\n-        private String[] args;\n-        private URI tsa;\n-        private byte[] signature;\n-        private String signatureAlgorithm;\n-        private X509Certificate[] signerCertificateChain;\n-        private byte[] content;\n-        private ZipFile source;\n-        private String tSAPolicyID;\n-        private String tSADigestAlg;\n-\n-        JarSignerParameters(String[] args, URI tsa,\n-                            String tSAPolicyID, String tSADigestAlg,\n-                            byte[] signature, String signatureAlgorithm,\n-                            X509Certificate[] signerCertificateChain,\n-                            byte[] content, ZipFile source) {\n-\n-            Objects.requireNonNull(signature);\n-            Objects.requireNonNull(signatureAlgorithm);\n-            Objects.requireNonNull(signerCertificateChain);\n-\n-            this.args = args;\n-            this.tsa = tsa;\n-            this.tSAPolicyID = tSAPolicyID;\n-            this.tSADigestAlg = tSADigestAlg;\n-            this.signature = signature;\n-            this.signatureAlgorithm = signatureAlgorithm;\n-            this.signerCertificateChain = signerCertificateChain;\n-            this.content = content;\n-            this.source = source;\n-        }\n-\n-        public String[] getCommandLine() {\n-            return args;\n-        }\n-\n-        public URI getTimestampingAuthority() {\n-            return tsa;\n-        }\n-\n-        public X509Certificate getTimestampingAuthorityCertificate() {\n-            \/\/ We don't use this param. Always provide tsaURI.\n-            return null;\n-        }\n-\n-        public String getTSAPolicyID() {\n-            return tSAPolicyID;\n-        }\n-\n-        public String getTSADigestAlg() {\n-            return tSADigestAlg;\n-        }\n-\n-        public byte[] getSignature() {\n-            return signature;\n-        }\n-\n-        public String getSignatureAlgorithm() {\n-            return signatureAlgorithm;\n-        }\n-\n-        public X509Certificate[] getSignerCertificateChain() {\n-            return signerCertificateChain;\n-        }\n-\n-        public byte[] getContent() {\n-            return content;\n-        }\n-\n-        public ZipFile getSource() {\n-            return source;\n-        }\n-    }\n","filename":"src\/jdk.jartool\/share\/classes\/jdk\/security\/jarsigner\/JarSigner.java","additions":20,"deletions":182,"binary":false,"changes":202,"status":"modified"},{"patch":"@@ -182,2 +182,0 @@\n-    private String altSignerClass = null;\n-    private String altSignerClasspath = null;\n@@ -486,12 +484,0 @@\n-            } else if (collator.compare(flags, \"-altsigner\") ==0) {\n-                if (++n == args.length) usageNoArg();\n-                altSignerClass = args[n];\n-                System.err.println(\n-                        rb.getString(\"This.option.is.forremoval\") +\n-                                \"-altsigner\");\n-            } else if (collator.compare(flags, \"-altsignerpath\") ==0) {\n-                if (++n == args.length) usageNoArg();\n-                altSignerClasspath = args[n];\n-                System.err.println(\n-                        rb.getString(\"This.option.is.forremoval\") +\n-                                \"-altsignerpath\");\n@@ -701,6 +687,0 @@\n-        System.out.println(rb.getString\n-                (\".altsigner.class.class.name.of.an.alternative.signing.mechanism\"));\n-        System.out.println();\n-        System.out.println(rb.getString\n-                (\".altsignerpath.pathlist.location.of.an.alternative.signing.mechanism\"));\n-        System.out.println();\n@@ -1951,12 +1931,0 @@\n-        if (altSignerClass != null) {\n-            builder.setProperty(\"altSigner\", altSignerClass);\n-            if (verbose != null) {\n-                System.out.println(\n-                        rb.getString(\"using.an.alternative.signing.mechanism\"));\n-            }\n-        }\n-\n-        if (altSignerClasspath != null) {\n-            builder.setProperty(\"altSignerPath\", altSignerClasspath);\n-        }\n-\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,6 +100,0 @@\n-        {\".altsigner.class.class.name.of.an.alternative.signing.mechanism\",\n-                \"[-altsigner <class>]        class name of an alternative signing mechanism\\n\" +\n-                \"                            (This option is deprecated and will be removed in a future release.)\"},\n-        {\".altsignerpath.pathlist.location.of.an.alternative.signing.mechanism\",\n-                \"[-altsignerpath <pathlist>] location of an alternative signing mechanism\\n\" +\n-                \"                            (This option is deprecated and will be removed in a future release.)\"},\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Resources.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,4 +100,0 @@\n-        {\".altsigner.class.class.name.of.an.alternative.signing.mechanism\",\n-                \"[-altsigner <Klasse>]        Klassenname eines alternativen Signiermechanismus\\n                            (Diese Option ist veraltet und wird in einem zuk\\u00FCnftigen Release entfernt.)\"},\n-        {\".altsignerpath.pathlist.location.of.an.alternative.signing.mechanism\",\n-                \"[-altsignerpath <Pfadliste>] Speicherort eines alternativen Signiermechanismus\\n                            (Diese Option ist veraltet und wird in einem zuk\\u00FCnftigen Release entfernt.)\"},\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Resources_de.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,4 +100,0 @@\n-        {\".altsigner.class.class.name.of.an.alternative.signing.mechanism\",\n-                \"[-altsigner <class>]        \\u4EE3\\u66FF\\u7F72\\u540D\\u30E1\\u30AB\\u30CB\\u30BA\\u30E0\\u306E\\u30AF\\u30E9\\u30B9\\u540D\\n                            (\\u3053\\u306E\\u30AA\\u30D7\\u30B7\\u30E7\\u30F3\\u306F\\u975E\\u63A8\\u5968\\u3067\\u3042\\u308A\\u3001\\u5C06\\u6765\\u306E\\u30EA\\u30EA\\u30FC\\u30B9\\u3067\\u524A\\u9664\\u3055\\u308C\\u308B\\u4E88\\u5B9A\\u3067\\u3059\\u3002)\"},\n-        {\".altsignerpath.pathlist.location.of.an.alternative.signing.mechanism\",\n-                \"[-altsignerpath <pathlist>] \\u4EE3\\u66FF\\u7F72\\u540D\\u30E1\\u30AB\\u30CB\\u30BA\\u30E0\\u306E\\u5834\\u6240\\n                            (\\u3053\\u306E\\u30AA\\u30D7\\u30B7\\u30E7\\u30F3\\u306F\\u975E\\u63A8\\u5968\\u3067\\u3042\\u308A\\u3001\\u5C06\\u6765\\u306E\\u30EA\\u30EA\\u30FC\\u30B9\\u3067\\u524A\\u9664\\u3055\\u308C\\u308B\\u4E88\\u5B9A\\u3067\\u3059\\u3002)\"},\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Resources_ja.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,4 +100,0 @@\n-        {\".altsigner.class.class.name.of.an.alternative.signing.mechanism\",\n-                \"[-altsigner <class>]        \\u66FF\\u4EE3\\u7B7E\\u540D\\u673A\\u5236\\u7684\\u7C7B\\u540D\\n                            \\uFF08\\u8BE5\\u9009\\u9879\\u5DF2\\u8FC7\\u65F6\\uFF0C\\u5728\\u5C06\\u6765\\u7684\\u53D1\\u884C\\u7248\\u4E2D\\u5C06\\u88AB\\u5220\\u9664\\u3002\\uFF09\"},\n-        {\".altsignerpath.pathlist.location.of.an.alternative.signing.mechanism\",\n-                \"[-altsignerpath <pathlist>] \\u66FF\\u4EE3\\u7B7E\\u540D\\u673A\\u5236\\u7684\\u4F4D\\u7F6E\\n                            \\uFF08\\u8BE5\\u9009\\u9879\\u5DF2\\u8FC7\\u65F6\\uFF0C\\u5728\\u5C06\\u6765\\u7684\\u53D1\\u884C\\u7248\\u4E2D\\u5C06\\u88AB\\u5220\\u9664\\u3002\\uFF09\"},\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Resources_zh_CN.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,79 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8039358\n- * @summary com.sun.jarsigner.ContentSignerParameters.getTSAPolicyID() should be default\n- * @modules jdk.jartool\n- * @compile DefaultMethod.java\n- *\/\n-\n-import com.sun.jarsigner.ContentSignerParameters;\n-\n-import java.net.URI;\n-import java.security.cert.X509Certificate;\n-import java.util.zip.ZipFile;\n-\n-public class DefaultMethod implements ContentSignerParameters {\n-\n-    @Override\n-    public String[] getCommandLine() {\n-        return new String[0];\n-    }\n-\n-    @Override\n-    public URI getTimestampingAuthority() {\n-        return null;\n-    }\n-\n-    @Override\n-    public X509Certificate getTimestampingAuthorityCertificate() {\n-        return null;\n-    }\n-\n-    @Override\n-    public byte[] getSignature() {\n-        return new byte[0];\n-    }\n-\n-    @Override\n-    public String getSignatureAlgorithm() {\n-        return null;\n-    }\n-\n-    @Override\n-    public X509Certificate[] getSignerCertificateChain() {\n-        return new X509Certificate[0];\n-    }\n-\n-    @Override\n-    public byte[] getContent() {\n-        return new byte[0];\n-    }\n-\n-    @Override\n-    public ZipFile getSource() {\n-        return null;\n-    }\n-}\n","filename":"test\/jdk\/com\/sun\/jarsigner\/DefaultMethod.java","additions":0,"deletions":79,"binary":false,"changes":79,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,2 +37,0 @@\n-import com.sun.jarsigner.ContentSigner;\n-import com.sun.jarsigner.ContentSignerParameters;\n@@ -132,1 +130,0 @@\n-        npe(()->b1.setProperty(\"altsigner\", null));\n@@ -150,1 +147,0 @@\n-        assertTrue(js2.getProperty(\"altsigner\") == null);\n@@ -166,1 +162,0 @@\n-                .setProperty(\"altsigner\", \"MyContentSigner\")\n@@ -178,2 +173,0 @@\n-        assertTrue(js3.getProperty(\"altsigner\").equals(\"MyContentSigner\"));\n-        assertTrue(js3.getProperty(\"altsignerpath\") == null);\n@@ -210,8 +203,0 @@\n-\n-        \/\/ altsigner does not support modern algorithms\n-        JarSigner.Builder b4 = new JarSigner.Builder(\n-                (PrivateKey)ks.getKey(\"e\", pass),\n-                CertificateFactory.getInstance(\"X.509\")\n-                        .generateCertPath(Arrays.asList(ks.getCertificateChain(\"e\"))));\n-        b4.setProperty(\"altsigner\", \"MyContentSigner\");\n-        iae(() -> b4.build());\n@@ -256,11 +241,0 @@\n-\n-    static class MyContentSigner extends ContentSigner {\n-        @Override\n-        public byte[] generateSignedData(\n-                ContentSignerParameters parameters,\n-                boolean omitContent,\n-                boolean applyTimestamp) throws NoSuchAlgorithmException,\n-                CertificateException, IOException {\n-            return new byte[0];\n-        }\n-    }\n","filename":"test\/jdk\/jdk\/security\/jarsigner\/Spec.java","additions":1,"deletions":27,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,0 @@\n-import com.sun.jarsigner.ContentSigner;\n-import com.sun.jarsigner.ContentSignerParameters;\n@@ -55,13 +53,0 @@\n-        \/\/ Help\n-        boolean lastLineHasAltSigner = false;\n-        for (String line : SecurityTools.jarsigner(\"--help\").asLines()) {\n-            if (line.contains(\"-altsigner\")) {\n-                lastLineHasAltSigner = true;\n-            } else {\n-                if (lastLineHasAltSigner) {\n-                    Asserts.assertTrue(line.contains(\"deprecated and will be removed\"));\n-                }\n-                lastLineHasAltSigner = false;\n-            }\n-        }\n-\n@@ -80,32 +65,0 @@\n-        \/\/ -altsign\n-        SecurityTools.jarsigner(\n-                \"-debug -signedjar altsign.jar -keystore jks -storepass changeit\" +\n-                        \" -altsigner Options$X\" +\n-                        \" -altsignerpath \" + System.getProperty(\"test.classes\") +\n-                        \" a.jar a\")\n-                .shouldContain(\"removed in a future release: -altsigner\")\n-                .shouldContain(\"removed in a future release: -altsignerpath\")\n-                .shouldContain(\"PKCS7.parse\");  \/\/ signature not parseable\n-                                                \/\/ but signing succeeds\n-\n-        try (JarFile jf = new JarFile(\"altsign.jar\")) {\n-            JarEntry je = jf.getJarEntry(\"META-INF\/A.RSA\");\n-            try (InputStream is = jf.getInputStream(je)) {\n-                if (!Arrays.equals(is.readAllBytes(), \"1234\".getBytes())) {\n-                    throw new Exception(\"altsign go wrong\");\n-                }\n-            }\n-        }\n-\n-        \/\/ -altsign with no -altsignerpath\n-        Files.copy(Path.of(System.getProperty(\"test.classes\"), \"Options$X.class\"),\n-                Path.of(\"Options$X.class\"));\n-        SecurityTools.jarsigner(\n-                \"-debug -signedjar altsign.jar -keystore jks -storepass changeit\" +\n-                        \" -altsigner Options$X\" +\n-                        \" a.jar a\")\n-                .shouldContain(\"removed in a future release: -altsigner\")\n-                .shouldNotContain(\"removed in a future release: -altsignerpath\")\n-                .shouldContain(\"PKCS7.parse\");  \/\/ signature not parseable\n-                                                \/\/ but signing succeeds\n-\n@@ -158,8 +111,0 @@\n-\n-    public static class X extends ContentSigner {\n-        @Override\n-        public byte[] generateSignedData(ContentSignerParameters parameters,\n-                boolean omitContent, boolean applyTimestamp) {\n-            return \"1234\".getBytes();\n-        }\n-    }\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/Options.java","additions":1,"deletions":56,"binary":false,"changes":57,"status":"modified"}]}