{"files":[{"patch":"@@ -1087,4 +1087,4 @@\n-      if (is_verify_Value())    { failure |= verify_node_Value(n); }\n-      if (is_verify_Ideal())    { failure |= verify_node_Ideal(n, false); }\n-      if (is_verify_Ideal())    { failure |= verify_node_Ideal(n, true); }\n-      if (is_verify_Identity()) { failure |= verify_node_Identity(n); }\n+      if (is_verify_Value())    { failure |= verify_Value_for(n); }\n+      if (is_verify_Ideal())    { failure |= verify_Ideal_for(n, false); }\n+      if (is_verify_Ideal())    { failure |= verify_Ideal_for(n, true); }\n+      if (is_verify_Identity()) { failure |= verify_Identity_for(n); }\n@@ -1126,1 +1126,1 @@\n-  assert(_worklist.size() == 0, \"igvn worklist must still be empty after verify\");\n+  assert(false, \"igvn worklist must still be empty after verify\");\n@@ -1134,1 +1134,1 @@\n-bool PhaseIterGVN::verify_node_Value(Node* n) {\n+bool PhaseIterGVN::verify_Value_for(Node* n) {\n@@ -1196,1 +1196,1 @@\n-bool PhaseIterGVN::verify_node_Ideal(Node* n, bool can_reshape) {\n+bool PhaseIterGVN::verify_Ideal_for(Node* n, bool can_reshape) {\n@@ -1844,1 +1844,1 @@\n-bool PhaseIterGVN::verify_node_Identity(Node* n) {\n+bool PhaseIterGVN::verify_Identity_for(Node* n) {\n@@ -2761,1 +2761,1 @@\n-\/\/ We have a list of exceptions, see comments in verify_node_Value.\n+\/\/ We have a list of exceptions, see comments in verify_Value_for.\n@@ -2766,1 +2766,1 @@\n-    failure |= verify_node_Value(n);\n+    failure |= verify_Value_for(n);\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -497,3 +497,3 @@\n-  bool verify_node_Value(Node* n);\n-  bool verify_node_Ideal(Node* n, bool can_reshape);\n-  bool verify_node_Identity(Node* n);\n+  bool verify_Value_for(Node* n);\n+  bool verify_Ideal_for(Node* n, bool can_reshape);\n+  bool verify_Identity_for(Node* n);\n","filename":"src\/hotspot\/share\/opto\/phaseX.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}