{"files":[{"patch":"@@ -1442,3 +1442,16 @@\n-    \/\/ This has the effect that these new nodes end up on the IGVN worklist,\n-    \/\/ but if we now leave verification and IGVN itself, we have nodes on the\n-    \/\/ worklist, and that should not be (there are asserts against this).\n+    \/\/ This verification code in the Ideal code creates new nodes, and checks\n+    \/\/ if they fold in unexpected ways. This means some nodes are created and\n+    \/\/ added to the worklist, even if the SubTypeCheck is not optimized. This\n+    \/\/ goes agains the assumption of the verification here, which assumes that\n+    \/\/ if the node is not optimized, then no new nodes should be created, and\n+    \/\/ also no nodes should be added to the worklist.\n+    \/\/ I see two options:\n+    \/\/  1) forbid what verify_helper does, because for each Ideal call it\n+    \/\/     uses memory and that is suboptimal. But it is not clear how that\n+    \/\/     verification can be done otherwise.\n+    \/\/  2) Special case the verification here. Probably the new nodes that\n+    \/\/     were just created are dead, i.e. they are not connected down to\n+    \/\/     root. We could verify that, and remove those nodes from the graph\n+    \/\/     by setting all their inputs to nullptr. And of course we would\n+    \/\/     have to remove those nodes from the worklist.\n+    \/\/ Maybe there are other options too, I did not dig much deeper yet.\n@@ -1673,1 +1686,1 @@\n-    \/\/ Found in tier1-3.\n+    \/\/ Found in tier1-3. Did not investigate further yet.\n@@ -1678,1 +1691,1 @@\n-    \/\/ Found in tier1-3.\n+    \/\/ Found in tier1-3. Did not investigate further yet.\n@@ -1683,1 +1696,1 @@\n-    \/\/ Found in tier1-3.\n+    \/\/ Found in tier1-3. Did not investigate further yet.\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":19,"deletions":6,"binary":false,"changes":25,"status":"modified"}]}