{"files":[{"patch":"@@ -709,1 +709,1 @@\n-  \/\/ and will still be vectorized by SuperWordVTransformBuilder::get_vtnode_vector_input_at_index.\n+  \/\/ and will still be vectorized by SuperWordVTransformBuilder::get_or_make_vtnode_vector_input_at_index.\n@@ -773,1 +773,1 @@\n-\/\/ will be vectorized by SuperWordVTransformBuilder::get_vtnode_vector_input_at_index.\n+\/\/ will be vectorized by SuperWordVTransformBuilder::get_or_make_vtnode_vector_input_at_index.\n@@ -1891,0 +1891,1 @@\n+  assert(_schedule.is_nonempty(), \"must already be scheduled\");\n@@ -2011,1 +2012,1 @@\n-  GrowableArray<Node*> vnode_idx_to_transformed_node(length, length, nullptr);\n+  GrowableArray<Node*> vtnode_idx_to_transformed_node(length, length, nullptr);\n@@ -2018,3 +2019,3 @@\n-    VTransformApplyStatus status = vtn->apply(_vloop_analyzer,\n-                                              vnode_idx_to_transformed_node);\n-    NOT_PRODUCT( if (_is_trace_verbose) { status.trace(vtn); } )\n+    VTransformApplyResult result = vtn->apply(_vloop_analyzer,\n+                                              vtnode_idx_to_transformed_node);\n+    NOT_PRODUCT( if (_is_trace_verbose) { result.trace(vtn); } )\n@@ -2022,3 +2023,3 @@\n-    vnode_idx_to_transformed_node.at_put(vtn->_idx, status.node());\n-    max_vector_length = MAX2(max_vector_length, status.vector_length());\n-    max_vector_width  = MAX2(max_vector_width,  status.vector_width());\n+    vtnode_idx_to_transformed_node.at_put(vtn->_idx, result.node());\n+    max_vector_length = MAX2(max_vector_length, result.vector_length());\n+    max_vector_width  = MAX2(max_vector_width,  result.vector_width());\n@@ -3033,1 +3034,1 @@\n-void SuperWordVTransformBuilder::build_vtransform() {\n+void SuperWordVTransformBuilder::build() {\n@@ -3035,0 +3036,1 @@\n+  assert(_graph.is_empty(), \"start with empty graph\");\n@@ -3036,0 +3038,1 @@\n+  \/\/ Create vtnodes for all nodes in the loop.\n@@ -3039,0 +3042,2 @@\n+  \/\/ Connect all vtnodes with their inputs. Possibly create vtnodes for input\n+  \/\/ nodes that are outside the loop.\n@@ -3040,2 +3045,2 @@\n-  build_edges_for_vector_vtnodes(vtn_dependencies);\n-  build_edges_for_scalar_vtnodes(vtn_dependencies);\n+  build_inputs_for_vector_vtnodes(vtn_dependencies);\n+  build_inputs_for_scalar_vtnodes(vtn_dependencies);\n@@ -3047,1 +3052,1 @@\n-    VTransformVectorNode* vtn = make_vtnode_for_pack(pack);\n+    VTransformVectorNode* vtn = make_vector_vtnode_for_pack(pack);\n@@ -3049,1 +3054,1 @@\n-      set_vtnode(pack->at(k), vtn);\n+      map_node_to_vtnode(pack->at(k), vtn);\n@@ -3059,1 +3064,1 @@\n-    set_vtnode(n, vtn);\n+    map_node_to_vtnode(n, vtn);\n@@ -3063,1 +3068,1 @@\n-void SuperWordVTransformBuilder::build_edges_for_vector_vtnodes(VectorSet& vtn_dependencies) {\n+void SuperWordVTransformBuilder::build_inputs_for_vector_vtnodes(VectorSet& vtn_dependencies) {\n@@ -3103,1 +3108,1 @@\n-      add_dependencies_of_node_to_vtn(pack->at(k), vtn, vtn_dependencies);\n+      add_dependencies_of_node_to_vtnode(pack->at(k), vtn, vtn_dependencies);\n@@ -3108,1 +3113,1 @@\n-void SuperWordVTransformBuilder::build_edges_for_scalar_vtnodes(VectorSet& vtn_dependencies) {\n+void SuperWordVTransformBuilder::build_inputs_for_scalar_vtnodes(VectorSet& vtn_dependencies) {\n@@ -3131,1 +3136,1 @@\n-    add_dependencies_of_node_to_vtn(n, vtn, vtn_dependencies);\n+    add_dependencies_of_node_to_vtnode(n, vtn, vtn_dependencies);\n@@ -3136,1 +3141,1 @@\n-VTransformVectorNode* SuperWordVTransformBuilder::make_vtnode_for_pack(const Node_List* pack) const {\n+VTransformVectorNode* SuperWordVTransformBuilder::make_vector_vtnode_for_pack(const Node_List* pack) const {\n@@ -3180,1 +3185,3 @@\n-VTransformNode* SuperWordVTransformBuilder::get_vtnode_vector_input_at_index(const Node_List* pack, const int index) {\n+\/\/ Either get existing vtnode vector input (when input is a pack), or else make a\n+\/\/ new one vector vtnode for the input (e.g. for Replicate or PopulateIndex).\n+VTransformNode* SuperWordVTransformBuilder::get_or_make_vtnode_vector_input_at_index(const Node_List* pack, const int index) {\n@@ -3247,1 +3254,1 @@\n-  tty->print_cr(\"\\nSuperWordVTransformBuilder::get_vtnode_vector_input_at_index: index=%d\", index);\n+  tty->print_cr(\"\\nSuperWordVTransformBuilder::get_or_make_vtnode_vector_input_at_index: index=%d\", index);\n@@ -3260,1 +3267,1 @@\n-  set_vtnode(n, vtn);\n+  map_node_to_vtnode(n, vtn);\n@@ -3265,1 +3272,1 @@\n-  VTransformNode* req = get_vtnode_vector_input_at_index(pack, j);\n+  VTransformNode* req = get_or_make_vtnode_vector_input_at_index(pack, j);\n@@ -3290,1 +3297,1 @@\n-void SuperWordVTransformBuilder::add_dependencies_of_node_to_vtn(Node*n, VTransformNode* vtn, VectorSet& vtn_dependencies) {\n+void SuperWordVTransformBuilder::add_dependencies_of_node_to_vtnode(Node*n, VTransformNode* vtn, VectorSet& vtn_dependencies) {\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":32,"deletions":25,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -651,1 +651,3 @@\n-    build_vtransform();\n+    assert(_graph.is_empty(), \"constructor is passed an empty graph\");\n+    build();\n+    assert(!_graph.is_empty(), \"graph must contain some vtnodes now\");\n@@ -655,1 +657,1 @@\n-  void build_vtransform();\n+  void build();\n@@ -658,2 +660,2 @@\n-  void build_edges_for_vector_vtnodes(VectorSet& vtn_dependencies);\n-  void build_edges_for_scalar_vtnodes(VectorSet& vtn_dependencies);\n+  void build_inputs_for_vector_vtnodes(VectorSet& vtn_dependencies);\n+  void build_inputs_for_scalar_vtnodes(VectorSet& vtn_dependencies);\n@@ -673,1 +675,1 @@\n-  void set_vtnode(Node* n, VTransformNode* vtn) {\n+  void map_node_to_vtnode(Node* n, VTransformNode* vtn) {\n@@ -678,2 +680,2 @@\n-  VTransformVectorNode* make_vtnode_for_pack(const Node_List* pack) const;\n-  VTransformNode* get_vtnode_vector_input_at_index(const Node_List* pack, const int index);\n+  VTransformVectorNode* make_vector_vtnode_for_pack(const Node_List* pack) const;\n+  VTransformNode* get_or_make_vtnode_vector_input_at_index(const Node_List* pack, const int index);\n@@ -685,5 +687,1 @@\n-  void add_dependencies_of_node_to_vtn(Node* n, VTransformNode* vtn, VectorSet& vtn_dependencies);\n-\n-  \/\/ Ensure that the main loop vectors are aligned by adjusting the pre loop limit.\n-  void determine_mem_ref_and_aw_for_main_loop_alignment();\n-  void adjust_pre_loop_limit_to_align_main_loop_vectors();\n+  void add_dependencies_of_node_to_vtnode(Node* n, VTransformNode* vtn, VectorSet& vtn_dependencies);\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1820,1 +1820,1 @@\n-  schedule_collect_nodes_without_req_or_dep(stack);\n+  schedule_collect_nodes_without_req_or_dependency(stack);\n@@ -1874,1 +1874,1 @@\n-void VTransformGraph::schedule_collect_nodes_without_req_or_dep(GrowableArray<VTransformNode*>& stack) const {\n+void VTransformGraph::schedule_collect_nodes_without_req_or_dependency(GrowableArray<VTransformNode*>& stack) const {\n@@ -1877,1 +1877,1 @@\n-    if (!vtn->has_req_or_dep()) {\n+    if (!vtn->has_req_or_dependency()) {\n@@ -1896,1 +1896,1 @@\n-void VTransformApplyStatus::trace(VTransformNode* vtn) const {\n+void VTransformApplyResult::trace(VTransformNode* vtn) const {\n@@ -1914,1 +1914,1 @@\n-VTransformApplyStatus VTransformScalarNode::apply(const VLoopAnalyzer& vloop_analyzer, const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n+VTransformApplyResult VTransformScalarNode::apply(const VLoopAnalyzer& vloop_analyzer, const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n@@ -1916,1 +1916,1 @@\n-  return VTransformApplyStatus::make_scalar(_node);\n+  return VTransformApplyResult::make_scalar(_node);\n@@ -1919,1 +1919,1 @@\n-VTransformApplyStatus VTransformReplicateNode::apply(const VLoopAnalyzer& vloop_analyzer, const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n+VTransformApplyResult VTransformReplicateNode::apply(const VLoopAnalyzer& vloop_analyzer, const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n@@ -1923,1 +1923,1 @@\n-  return VTransformApplyStatus::make_vector(vn, _vlen, vn->length_in_bytes());\n+  return VTransformApplyResult::make_vector(vn, _vlen, vn->length_in_bytes());\n@@ -1926,1 +1926,1 @@\n-VTransformApplyStatus VTransformConvI2LNode::apply(const VLoopAnalyzer& vloop_analyzer, const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n+VTransformApplyResult VTransformConvI2LNode::apply(const VLoopAnalyzer& vloop_analyzer, const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n@@ -1930,1 +1930,1 @@\n-  return VTransformApplyStatus::make_scalar(n);\n+  return VTransformApplyResult::make_scalar(n);\n@@ -1933,1 +1933,1 @@\n-VTransformApplyStatus VTransformShiftCountNode::apply(const VLoopAnalyzer& vloop_analyzer, const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n+VTransformApplyResult VTransformShiftCountNode::apply(const VLoopAnalyzer& vloop_analyzer, const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n@@ -1945,1 +1945,1 @@\n-  return VTransformApplyStatus::make_vector(vn, _vlen, vn->length_in_bytes());\n+  return VTransformApplyResult::make_vector(vn, _vlen, vn->length_in_bytes());\n@@ -1949,1 +1949,1 @@\n-VTransformApplyStatus VTransformPopulateIndexNode::apply(const VLoopAnalyzer& vloop_analyzer, const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n+VTransformApplyResult VTransformPopulateIndexNode::apply(const VLoopAnalyzer& vloop_analyzer, const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n@@ -1957,1 +1957,1 @@\n-  return VTransformApplyStatus::make_vector(vn, _vlen, vn->length_in_bytes());\n+  return VTransformApplyResult::make_vector(vn, _vlen, vn->length_in_bytes());\n@@ -1960,1 +1960,1 @@\n-VTransformApplyStatus VTransformElementWiseVectorNode::apply(const VLoopAnalyzer& vloop_analyzer, const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n+VTransformApplyResult VTransformElementWiseVectorNode::apply(const VLoopAnalyzer& vloop_analyzer, const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n@@ -1969,1 +1969,1 @@\n-    return VTransformApplyStatus::make_empty();\n+    return VTransformApplyResult::make_empty();\n@@ -2010,1 +2010,1 @@\n-  return VTransformApplyStatus::make_vector(vn, vlen, vn->length_in_bytes());\n+  return VTransformApplyResult::make_vector(vn, vlen, vn->length_in_bytes());\n@@ -2013,1 +2013,1 @@\n-VTransformApplyStatus VTransformBoolVectorNode::apply(const VLoopAnalyzer& vloop_analyzer, const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n+VTransformApplyResult VTransformBoolVectorNode::apply(const VLoopAnalyzer& vloop_analyzer, const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n@@ -2032,1 +2032,1 @@\n-  return VTransformApplyStatus::make_vector(vn, vlen, vn->vect_type()->length_in_bytes());\n+  return VTransformApplyResult::make_vector(vn, vlen, vn->vect_type()->length_in_bytes());\n@@ -2035,1 +2035,1 @@\n-VTransformApplyStatus VTransformReductionVectorNode::apply(const VLoopAnalyzer& vloop_analyzer, const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n+VTransformApplyResult VTransformReductionVectorNode::apply(const VLoopAnalyzer& vloop_analyzer, const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n@@ -2046,1 +2046,1 @@\n-  return VTransformApplyStatus::make_vector(vn, vlen, vn->vect_type()->length_in_bytes());\n+  return VTransformApplyResult::make_vector(vn, vlen, vn->vect_type()->length_in_bytes());\n@@ -2049,1 +2049,1 @@\n-VTransformApplyStatus VTransformLoadVectorNode::apply(const VLoopAnalyzer& vloop_analyzer, const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n+VTransformApplyResult VTransformLoadVectorNode::apply(const VLoopAnalyzer& vloop_analyzer, const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n@@ -2075,1 +2075,1 @@\n-  return VTransformApplyStatus::make_vector(vn, vlen, vn->memory_size());\n+  return VTransformApplyResult::make_vector(vn, vlen, vn->memory_size());\n@@ -2078,1 +2078,1 @@\n-VTransformApplyStatus VTransformStoreVectorNode::apply(const VLoopAnalyzer& vloop_analyzer, const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n+VTransformApplyResult VTransformStoreVectorNode::apply(const VLoopAnalyzer& vloop_analyzer, const GrowableArray<Node*>& vnode_idx_to_transformed_node) const {\n@@ -2091,1 +2091,1 @@\n-  return VTransformApplyStatus::make_vector(vn, vlen, vn->memory_size());\n+  return VTransformApplyResult::make_vector(vn, vlen, vn->memory_size());\n","filename":"src\/hotspot\/share\/opto\/vectorization.cpp","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1355,2 +1355,2 @@\n-\/\/ Status output from a VTransformNode::apply\n-class VTransformApplyStatus {\n+\/\/ Result from a VTransformNode::apply\n+class VTransformApplyResult {\n@@ -1362,1 +1362,1 @@\n-  VTransformApplyStatus(Node* n, uint vector_length, uint vector_width) :\n+  VTransformApplyResult(Node* n, uint vector_length, uint vector_width) :\n@@ -1368,2 +1368,2 @@\n-  static VTransformApplyStatus make_scalar(Node* n) {\n-    return VTransformApplyStatus(n, 0, 0);\n+  static VTransformApplyResult make_scalar(Node* n) {\n+    return VTransformApplyResult(n, 0, 0);\n@@ -1372,1 +1372,1 @@\n-  static VTransformApplyStatus make_vector(Node* n, uint vector_length, uint vector_width) {\n+  static VTransformApplyResult make_vector(Node* n, uint vector_length, uint vector_width) {\n@@ -1374,1 +1374,1 @@\n-    return VTransformApplyStatus(n, vector_length, vector_width);\n+    return VTransformApplyResult(n, vector_length, vector_width);\n@@ -1377,2 +1377,2 @@\n-  static VTransformApplyStatus make_empty() {\n-    return VTransformApplyStatus(nullptr, 0, 0);\n+  static VTransformApplyResult make_empty() {\n+    return VTransformApplyResult(nullptr, 0, 0);\n@@ -1387,0 +1387,15 @@\n+\/\/ VTransformGraph is a graph of VTransformNode, which represent the VTransform. It\n+\/\/ is designed to resemble the C2 nodes after \"apply\" as closely as possible.\n+\/\/ Currently, there are these stages to the VTransform:\n+\/\/\n+\/\/  - Construction:\n+\/\/      external (e.g. with SuperWordVTransformBuilder)\n+\/\/\n+\/\/  - Schedule:\n+\/\/      compute linearization of graph, into a order that respects all edges in the\n+\/\/      graph (bailout if circle detected).\n+\/\/\n+\/\/  - Apply:\n+\/\/      Make all necessary changes to the C2 IR, each VTransformNode generates the\n+\/\/      corresponding scalar or vector C2 nodes.\n+\/\/\n@@ -1447,0 +1462,1 @@\n+  bool is_empty() const { return _vtnodes.is_empty(); }\n@@ -1457,1 +1473,0 @@\n-  PhiNode* iv()               const { return _vloop.iv(); }\n@@ -1461,1 +1476,1 @@\n-  \/\/ VLoopVPointer accessors\n+  \/\/ VLoopVPointers accessors\n@@ -1466,1 +1481,1 @@\n-  void schedule_collect_nodes_without_req_or_dep(GrowableArray<VTransformNode*>& stack) const;\n+  void schedule_collect_nodes_without_req_or_dependency(GrowableArray<VTransformNode*>& stack) const;\n@@ -1541,1 +1556,1 @@\n-  bool has_req_or_dep() const {\n+  bool has_req_or_dependency() const {\n@@ -1555,1 +1570,1 @@\n-  virtual VTransformApplyStatus apply(const VLoopAnalyzer& vloop_analyzer,\n+  virtual VTransformApplyResult apply(const VLoopAnalyzer& vloop_analyzer,\n@@ -1568,0 +1583,1 @@\n+\/\/ Identity transform for scalar nodes.\n@@ -1576,1 +1592,1 @@\n-  virtual VTransformApplyStatus apply(const VLoopAnalyzer& vloop_analyzer,\n+  virtual VTransformApplyResult apply(const VLoopAnalyzer& vloop_analyzer,\n@@ -1582,1 +1598,3 @@\n-\/\/ Wrapper node for nodes outside the loop that are inputs to the loop.\n+\/\/ Wrapper node for nodes outside the loop that are inputs to nodes in the loop.\n+\/\/ Since we want the loop-internal nodes to be able to reference all inputs as vtnodes,\n+\/\/ we must wrap the inputs that are outside the loop also into special vtnodes.\n@@ -1591,0 +1609,1 @@\n+\/\/ Transform produces a ReplicateNode, replicating the input to all vector lanes.\n@@ -1598,1 +1617,1 @@\n-  virtual VTransformApplyStatus apply(const VLoopAnalyzer& vloop_analyzer,\n+  virtual VTransformApplyResult apply(const VLoopAnalyzer& vloop_analyzer,\n@@ -1604,0 +1623,1 @@\n+\/\/ Transform introduces a scalar ConvI2LNode that was not previously in the C2 graph.\n@@ -1607,1 +1627,1 @@\n-  virtual VTransformApplyStatus apply(const VLoopAnalyzer& vloop_analyzer,\n+  virtual VTransformApplyResult apply(const VLoopAnalyzer& vloop_analyzer,\n@@ -1612,1 +1632,1 @@\n-\n+\/\/ Transform introduces a shift-count node, that truncates the shift count for a vector shift.\n@@ -1622,1 +1642,1 @@\n-  virtual VTransformApplyStatus apply(const VLoopAnalyzer& vloop_analyzer,\n+  virtual VTransformApplyResult apply(const VLoopAnalyzer& vloop_analyzer,\n@@ -1628,0 +1648,1 @@\n+\/\/ Transform introduces a PopulateIndex node: [phi, phi+1, phi+2, phi+3, ...].\n@@ -1635,1 +1656,1 @@\n-  virtual VTransformApplyStatus apply(const VLoopAnalyzer& vloop_analyzer,\n+  virtual VTransformApplyResult apply(const VLoopAnalyzer& vloop_analyzer,\n@@ -1641,0 +1662,1 @@\n+\/\/ Base class for all vector vtnodes.\n@@ -1645,1 +1667,1 @@\n-  VTransformVectorNode(VTransformGraph& graph, const uint req, const int number_of_nodes) :\n+  VTransformVectorNode(VTransformGraph& graph, const uint req, const uint number_of_nodes) :\n@@ -1660,0 +1682,1 @@\n+\/\/ Catch all for all element-wise vector operations.\n@@ -1662,1 +1685,1 @@\n-  VTransformElementWiseVectorNode(VTransformGraph& graph, uint req, int number_of_nodes) :\n+  VTransformElementWiseVectorNode(VTransformGraph& graph, uint req, uint number_of_nodes) :\n@@ -1665,1 +1688,1 @@\n-  virtual VTransformApplyStatus apply(const VLoopAnalyzer& vloop_analyzer,\n+  virtual VTransformApplyResult apply(const VLoopAnalyzer& vloop_analyzer,\n@@ -1682,1 +1705,1 @@\n-  VTransformBoolVectorNode(VTransformGraph& graph, int number_of_nodes, VTransformBoolTest test) :\n+  VTransformBoolVectorNode(VTransformGraph& graph, uint number_of_nodes, VTransformBoolTest test) :\n@@ -1686,1 +1709,1 @@\n-  virtual VTransformApplyStatus apply(const VLoopAnalyzer& vloop_analyzer,\n+  virtual VTransformApplyResult apply(const VLoopAnalyzer& vloop_analyzer,\n@@ -1694,1 +1717,1 @@\n-  VTransformReductionVectorNode(VTransformGraph& graph, int number_of_nodes) :\n+  VTransformReductionVectorNode(VTransformGraph& graph, uint number_of_nodes) :\n@@ -1697,1 +1720,1 @@\n-  virtual VTransformApplyStatus apply(const VLoopAnalyzer& vloop_analyzer,\n+  virtual VTransformApplyResult apply(const VLoopAnalyzer& vloop_analyzer,\n@@ -1705,1 +1728,1 @@\n-  VTransformLoadVectorNode(VTransformGraph& graph, int number_of_nodes) :\n+  VTransformLoadVectorNode(VTransformGraph& graph, uint number_of_nodes) :\n@@ -1708,1 +1731,1 @@\n-  virtual VTransformApplyStatus apply(const VLoopAnalyzer& vloop_analyzer,\n+  virtual VTransformApplyResult apply(const VLoopAnalyzer& vloop_analyzer,\n@@ -1716,1 +1739,1 @@\n-  VTransformStoreVectorNode(VTransformGraph& graph, int number_of_nodes) :\n+  VTransformStoreVectorNode(VTransformGraph& graph, uint number_of_nodes) :\n@@ -1718,1 +1741,1 @@\n-  virtual VTransformApplyStatus apply(const VLoopAnalyzer& vloop_analyzer,\n+  virtual VTransformApplyResult apply(const VLoopAnalyzer& vloop_analyzer,\n","filename":"src\/hotspot\/share\/opto\/vectorization.hpp","additions":55,"deletions":32,"binary":false,"changes":87,"status":"modified"}]}