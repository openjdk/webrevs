{"files":[{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.jpackage.test;\n-\n-import java.util.List;\n-import java.util.function.BiFunction;\n-\n-public final class CannedFormattedString {\n-\n-    CannedFormattedString(BiFunction<String, Object[], String> formatter,\n-            String key, Object[] args) {\n-        this.formatter = formatter;\n-        this.key = key;\n-        this.args = args;\n-    }\n-\n-    public String getValue() {\n-        return formatter.apply(key, args);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        if (args.length == 0) {\n-            return String.format(\"%s\", key);\n-        } else {\n-            return String.format(\"%s+%s\", key, List.of(args));\n-        }\n-    }\n-\n-    private final BiFunction<String, Object[], String> formatter;\n-    private final String key;\n-    private final Object[] args;\n-}\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/CannedFormattedString.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -81,1 +81,0 @@\n-        outputValidator = cmd.outputValidator;\n@@ -743,18 +742,0 @@\n-    public JPackageCommand validateOutput(TKit.TextStreamVerifier validator) {\n-        return JPackageCommand.this.validateOutput(validator::apply);\n-    }\n-\n-    public JPackageCommand validateOutput(Consumer<Stream<String>> validator) {\n-        if (validator != null) {\n-            saveConsoleOutput(true);\n-            outputValidator = validator;\n-        } else {\n-            outputValidator = null;\n-        }\n-        return this;\n-    }\n-\n-    public JPackageCommand validateOutput(CannedFormattedString str) {\n-        return JPackageCommand.this.validateOutput(TKit.assertTextStream(str.getValue()));\n-    }\n-\n@@ -839,4 +820,0 @@\n-        if (outputValidator != null) {\n-            outputValidator.accept(result.getOutput().stream());\n-        }\n-\n@@ -1213,1 +1190,0 @@\n-    private Consumer<Stream<String>> outputValidator;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1,67 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jpackage.test;\n-\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.text.MessageFormat;\n-\n-public enum JPackageStringBundle {\n-\n-    MAIN(\"jdk.jpackage.internal.I18N\"),\n-    ;\n-\n-    JPackageStringBundle(String i18nClassName) {\n-        try {\n-            i18nClass = Class.forName(i18nClassName);\n-\n-            i18nClass_getString = i18nClass.getDeclaredMethod(\"getString\", String.class);\n-            i18nClass_getString.setAccessible(true);\n-        } catch (ClassNotFoundException|NoSuchMethodException ex) {\n-            throw Functional.rethrowUnchecked(ex);\n-        }\n-    }\n-\n-    \/**\n-     * Gets a string for the given key from jpackage resources.\n-     *\/\n-    private String getString(String key) {\n-        try {\n-            return (String)i18nClass_getString.invoke(i18nClass, key);\n-        } catch (IllegalAccessException|InvocationTargetException ex) {\n-            throw Functional.rethrowUnchecked(ex);\n-        }\n-    }\n-\n-    private String getFormattedString(String key, Object[] args) {\n-        return MessageFormat.format(getString(key), args);\n-    }\n-\n-    public CannedFormattedString cannedFormattedString(String key, String ... args) {\n-        return new CannedFormattedString(this::getFormattedString, key, args);\n-    }\n-\n-    private final Class<?> i18nClass;\n-    private final Method i18nClass_getString;\n-}\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageStringBundle.java","additions":0,"deletions":67,"binary":false,"changes":67,"status":"deleted"},{"patch":"@@ -28,3 +28,1 @@\n-import java.util.Optional;\n-import java.util.stream.Stream;\n-import jdk.jpackage.test.Annotations.ParameterSupplier;\n+import jdk.jpackage.test.Annotations.Parameters;\n@@ -32,1 +30,0 @@\n-import jdk.jpackage.test.CannedFormattedString;\n@@ -34,1 +31,0 @@\n-import jdk.jpackage.test.JPackageStringBundle;\n@@ -61,0 +57,4 @@\n+    private final String expectedError;\n+    private final JPackageCommand cmd;\n+\n+    @Parameters\n@@ -67,1 +67,1 @@\n-                    JPackageStringBundle.MAIN.cannedFormattedString(\"ERR_InvalidOption\", \"--no-such-argument\")},\n+                    \"Invalid Option: [--no-such-argument]\"},\n@@ -72,1 +72,1 @@\n-                    JPackageStringBundle.MAIN.cannedFormattedString(\"ERR_NoEntryPoint\")},\n+                    \"--main-jar or --module\"},\n@@ -77,2 +77,1 @@\n-                    JPackageStringBundle.MAIN.cannedFormattedString(\"error.no-main-class-with-main-jar\", \"hello.jar\"),\n-                    JPackageStringBundle.MAIN.cannedFormattedString(\"error.no-main-class-with-main-jar.advice\", \"hello.jar\")},\n+                    \"main class was not specified\"},\n@@ -83,1 +82,1 @@\n-                    JPackageStringBundle.MAIN.cannedFormattedString(\"error.main-jar-does-not-exist\", \"non-existent.jar\")},\n+                    \"main jar does not exist\"},\n@@ -88,1 +87,1 @@\n-                    JPackageStringBundle.MAIN.cannedFormattedString(\"message.runtime-image-dir-does-not-exist\", \"runtime-image\", \"non-existent.runtime\")},\n+                    \"does not exist\"},\n@@ -93,1 +92,1 @@\n-                    JPackageStringBundle.MAIN.cannedFormattedString(\"message.resource-dir-does-not-exist\", \"resource-dir\", \"non-existent.dir\")},\n+                    \"does not exist\"},\n@@ -98,1 +97,1 @@\n-                    JPackageStringBundle.MAIN.cannedFormattedString(\"ERR_InvalidInstallerType\", \"invalid-type\")},\n+                    \"Invalid or unsupported type: [invalid-type]\"},\n@@ -103,1 +102,1 @@\n-                    JPackageStringBundle.MAIN.cannedFormattedString(\"ERR_MissingArgument\", \"--input\")},\n+                    \"Missing argument: --input\"},\n@@ -108,1 +107,1 @@\n-                    JPackageStringBundle.MAIN.cannedFormattedString(\"ERR_MissingArgument\", \"--runtime-image or --module-path\")},\n+                    \"Missing argument: --runtime-image or --module-path\"},\n@@ -112,20 +111,4 @@\n-    @Test\n-    @ParameterSupplier(\"input\")\n-    public static void test(String javaAppDesc, String[] jpackageArgs,\n-            String[] removeArgs, CannedFormattedString... expectedErrors) {\n-        \/\/ Init default jpackage test command line.\n-        var cmd = JPackageCommand.helloAppImage(javaAppDesc)\n-                \/\/ Disable default logic adding `--verbose` option\n-                \/\/ to jpackage command line.\n-                \/\/ It will affect jpackage error messages if the command line is malformed.\n-                .ignoreDefaultVerbose(true)\n-                \/\/ Ignore external runtime as it will interfer\n-                \/\/ with jpackage arguments in this test.\n-                .ignoreDefaultRuntime(true);\n-\n-        \/\/ Add arguments if requested.\n-        Optional.ofNullable(jpackageArgs).ifPresent(cmd::addArguments);\n-\n-        \/\/ Remove arguments if requested.\n-        Optional.ofNullable(removeArgs).map(List::of).ifPresent(\n-                args -> args.forEach(cmd::removeArgumentWithValue));\n+    public ErrorTest(String javaAppDesc, String[] jpackageArgs,\n+                String[] removeArgs,\n+                String expectedError) {\n+        this.expectedError = expectedError;\n@@ -133,6 +116,10 @@\n-        \/\/ Configure jpackage output verifier to look up the list of provided\n-        \/\/ errors in the order they specified.\n-        cmd.validateOutput(Stream.of(expectedErrors)\n-                .map(CannedFormattedString::getValue)\n-                .map(TKit::assertTextStream)\n-                .reduce(TKit.TextStreamVerifier::andThen).get());\n+        cmd = JPackageCommand.helloAppImage(javaAppDesc)\n+                .saveConsoleOutput(true).dumpOutput(true);\n+        if (jpackageArgs != null) {\n+            cmd.addArguments(jpackageArgs);\n+        } if (removeArgs != null) {\n+            for (String arg : removeArgs) {\n+                cmd.removeArgumentWithValue(arg);\n+            }\n+        }\n+    }\n@@ -140,1 +127,5 @@\n-        cmd.execute(1);\n+    @Test\n+    public void test() {\n+        List<String> output = cmd.execute(1).getOutput();\n+        TKit.assertNotNull(output, \"output is null\");\n+        TKit.assertTextStream(expectedError).apply(output.stream());\n@@ -142,0 +133,1 @@\n+\n","filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/ErrorTest.java","additions":34,"deletions":42,"binary":false,"changes":76,"status":"modified"}]}