{"files":[{"patch":"@@ -28,0 +28,2 @@\n+import java.lang.invoke.*;\n+\n@@ -41,0 +43,19 @@\n+    @Param({  \"0\",   \"1\",   \"2\",   \"3\",   \"4\",   \"5\",   \"6\",   \"7\",   \"8\",   \"9\",\n+             \"10\",  \"11\",  \"12\",  \"13\",  \"14\",  \"15\",  \"16\",  \"17\",  \"18\",  \"19\",\n+             \"20\",  \"21\",  \"22\",  \"23\",  \"24\",  \"25\",  \"26\",  \"27\",  \"28\",  \"29\",\n+             \"30\",  \"31\",  \"32\",  \"33\",  \"34\",  \"35\",  \"36\",  \"37\",  \"38\",  \"39\",\n+             \"40\",  \"41\",  \"42\",  \"43\",  \"44\",  \"45\",  \"46\",  \"47\",  \"48\",  \"49\",\n+             \"50\",  \"51\",  \"52\",  \"53\",  \"54\",  \"55\",  \"56\",  \"57\",  \"58\",  \"59\",\n+             \"60\",  \"61\",  \"62\",  \"63\",  \"64\",  \"65\",  \"66\",  \"67\",  \"68\",  \"69\",\n+             \"70\",  \"71\",  \"72\",  \"73\",  \"74\",  \"75\",  \"76\",  \"77\",  \"78\",  \"79\",\n+             \"80\",  \"81\",  \"82\",  \"83\",  \"84\",  \"85\",  \"86\",  \"87\",  \"88\",  \"89\",\n+             \"90\",  \"91\",  \"92\",  \"93\",  \"94\",  \"95\",  \"96\",  \"97\",  \"98\",  \"99\",\n+            \"100\", \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\",\n+            \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\",\n+            \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\"})\n+    public int OFFSET;\n+\n+    \/\/ To get compile-time constants for OFFSET\n+    static final MutableCallSite MUTABLE_CONSTANT = new MutableCallSite(MethodType.methodType(int.class));\n+    static final MethodHandle MUTABLE_CONSTANT_HANDLE = MUTABLE_CONSTANT.dynamicInvoker();\n+\n@@ -53,1 +74,1 @@\n-    public void init() {\n+    public void init() throws Throwable {\n@@ -65,344 +86,0 @@\n-    }\n-\n-    @Benchmark\n-    public void byte_000() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 0] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_001() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 1] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_002() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 2] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_003() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 3] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_004() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 4] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_005() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 5] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_006() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 6] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_007() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 7] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_008() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 8] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_009() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 9] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_010() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 10] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_011() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 11] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_012() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 12] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_013() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 13] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_014() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 14] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_015() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 15] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_016() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 16] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_017() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 17] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_018() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 18] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_019() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 19] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_020() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 20] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_021() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 21] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_022() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 22] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_023() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 23] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_024() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 24] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_025() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 25] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_026() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 26] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_027() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 27] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_028() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 28] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_029() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 29] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_030() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 30] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_031() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 31] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_032() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 32] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_033() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 33] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_034() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 34] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_035() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 35] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_036() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 36] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_037() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 37] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_038() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 38] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_039() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 39] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_040() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 40] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_041() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 41] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_042() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 42] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_043() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 43] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_044() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 44] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_045() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 45] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_046() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 46] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_047() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 47] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_048() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 48] + 1);\n-        }\n-    }\n@@ -410,12 +87,2 @@\n-    @Benchmark\n-    public void byte_049() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 49] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_050() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 50] + 1);\n-        }\n+        MethodHandle constant = MethodHandles.constant(int.class, OFFSET);\n+        MUTABLE_CONSTANT.setTarget(constant);\n@@ -424,3225 +91,3 @@\n-    @Benchmark\n-    public void byte_051() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 51] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_052() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 52] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_053() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 53] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_054() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 54] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_055() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 55] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_056() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 56] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_057() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 57] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_058() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 58] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_059() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 59] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_060() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 60] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_061() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 61] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_062() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 62] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_063() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 63] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_064() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 64] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_065() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 65] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_066() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 66] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_067() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 67] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_068() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 68] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_069() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 69] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_070() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 70] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_071() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 71] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_072() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 72] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_073() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 73] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_074() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 74] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_075() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 75] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_076() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 76] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_077() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 77] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_078() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 78] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_079() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 79] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_080() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 80] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_081() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 81] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_082() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 82] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_083() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 83] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_084() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 84] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_085() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 85] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_086() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 86] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_087() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 87] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_088() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 88] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_089() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 89] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_090() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 90] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_091() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 91] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_092() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 92] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_093() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 93] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_094() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 94] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_095() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 95] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_096() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 96] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_097() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 97] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_098() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 98] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_099() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 99] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_100() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 100] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_101() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 101] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_102() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 102] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_103() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 103] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_104() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 104] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_105() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 105] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_106() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 106] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_107() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 107] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_108() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 108] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_109() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 109] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_110() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 110] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_111() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 111] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_112() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 112] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_113() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 113] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_114() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 114] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_115() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 115] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_116() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 116] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_117() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 117] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_118() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 118] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_119() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 119] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_120() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 120] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_121() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 121] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_122() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 122] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_123() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 123] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_124() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 124] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_125() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 125] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_126() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 126] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_127() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 127] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void byte_128() {\n-        for (int i = START; i < SIZE; i++) {\n-            aB[i] = (byte)(aB[i - 128] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_000() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 0] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_001() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 1] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_002() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 2] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_003() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 3] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_004() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 4] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_005() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 5] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_006() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 6] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_007() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 7] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_008() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 8] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_009() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 9] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_010() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 10] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_011() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 11] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_012() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 12] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_013() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 13] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_014() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 14] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_015() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 15] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_016() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 16] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_017() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 17] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_018() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 18] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_019() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 19] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_020() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 20] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_021() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 21] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_022() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 22] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_023() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 23] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_024() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 24] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_025() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 25] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_026() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 26] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_027() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 27] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_028() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 28] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_029() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 29] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_030() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 30] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_031() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 31] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_032() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 32] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_033() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 33] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_034() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 34] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_035() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 35] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_036() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 36] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_037() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 37] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_038() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 38] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_039() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 39] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_040() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 40] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_041() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 41] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_042() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 42] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_043() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 43] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_044() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 44] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_045() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 45] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_046() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 46] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_047() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 47] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_048() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 48] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_049() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 49] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_050() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 50] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_051() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 51] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_052() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 52] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_053() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 53] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_054() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 54] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_055() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 55] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_056() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 56] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_057() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 57] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_058() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 58] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_059() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 59] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_060() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 60] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_061() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 61] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_062() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 62] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_063() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 63] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_064() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 64] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_065() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 65] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_066() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 66] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_067() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 67] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_068() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 68] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_069() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 69] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_070() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 70] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_071() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 71] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_072() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 72] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_073() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 73] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_074() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 74] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_075() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 75] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_076() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 76] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_077() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 77] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_078() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 78] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_079() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 79] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_080() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 80] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_081() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 81] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_082() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 82] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_083() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 83] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_084() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 84] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_085() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 85] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_086() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 86] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_087() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 87] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_088() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 88] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_089() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 89] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_090() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 90] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_091() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 91] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_092() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 92] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_093() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 93] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_094() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 94] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_095() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 95] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_096() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 96] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_097() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 97] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_098() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 98] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_099() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 99] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_100() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 100] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_101() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 101] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_102() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 102] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_103() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 103] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_104() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 104] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_105() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 105] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_106() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 106] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_107() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 107] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_108() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 108] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_109() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 109] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_110() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 110] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_111() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 111] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_112() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 112] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_113() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 113] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_114() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 114] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_115() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 115] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_116() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 116] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_117() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 117] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_118() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 118] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_119() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 119] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_120() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 120] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_121() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 121] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_122() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 122] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_123() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 123] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_124() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 124] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_125() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 125] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_126() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 126] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_127() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 127] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void short_128() {\n-        for (int i = START; i < SIZE; i++) {\n-            aS[i] = (short)(aS[i - 128] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_000() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 0] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_001() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 1] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_002() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 2] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_003() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 3] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_004() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 4] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_005() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 5] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_006() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 6] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_007() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 7] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_008() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 8] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_009() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 9] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_010() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 10] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_011() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 11] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_012() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 12] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_013() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 13] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_014() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 14] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_015() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 15] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_016() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 16] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_017() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 17] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_018() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 18] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_019() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 19] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_020() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 20] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_021() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 21] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_022() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 22] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_023() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 23] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_024() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 24] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_025() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 25] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_026() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 26] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_027() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 27] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_028() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 28] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_029() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 29] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_030() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 30] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_031() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 31] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_032() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 32] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_033() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 33] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_034() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 34] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_035() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 35] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_036() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 36] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_037() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 37] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_038() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 38] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_039() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 39] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_040() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 40] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_041() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 41] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_042() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 42] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_043() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 43] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_044() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 44] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_045() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 45] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_046() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 46] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_047() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 47] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_048() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 48] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_049() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 49] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_050() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 50] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_051() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 51] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_052() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 52] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_053() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 53] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_054() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 54] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_055() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 55] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_056() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 56] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_057() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 57] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_058() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 58] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_059() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 59] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_060() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 60] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_061() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 61] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_062() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 62] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_063() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 63] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_064() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 64] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_065() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 65] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_066() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 66] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_067() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 67] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_068() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 68] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_069() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 69] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_070() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 70] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_071() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 71] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_072() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 72] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_073() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 73] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_074() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 74] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_075() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 75] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_076() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 76] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_077() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 77] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_078() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 78] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_079() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 79] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_080() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 80] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_081() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 81] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_082() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 82] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_083() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 83] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_084() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 84] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_085() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 85] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_086() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 86] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_087() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 87] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_088() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 88] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_089() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 89] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_090() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 90] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_091() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 91] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_092() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 92] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_093() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 93] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_094() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 94] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_095() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 95] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_096() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 96] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_097() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 97] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_098() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 98] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_099() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 99] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_100() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 100] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_101() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 101] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_102() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 102] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_103() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 103] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_104() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 104] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_105() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 105] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_106() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 106] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_107() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 107] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_108() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 108] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_109() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 109] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_110() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 110] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_111() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 111] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_112() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 112] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_113() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 113] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_114() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 114] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_115() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 115] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_116() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 116] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_117() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 117] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_118() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 118] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_119() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 119] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_120() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 120] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_121() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 121] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_122() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 122] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_123() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 123] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_124() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 124] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_125() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 125] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_126() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 126] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_127() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 127] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void int_128() {\n-        for (int i = START; i < SIZE; i++) {\n-            aI[i] = aI[i - 128] + 1;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_000() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 0] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_001() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 1] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_002() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 2] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_003() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 3] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_004() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 4] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_005() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 5] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_006() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 6] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_007() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 7] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_008() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 8] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_009() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 9] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_010() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 10] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_011() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 11] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_012() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 12] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_013() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 13] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_014() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 14] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_015() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 15] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_016() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 16] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_017() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 17] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_018() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 18] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_019() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 19] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_020() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 20] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_021() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 21] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_022() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 22] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_023() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 23] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_024() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 24] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_025() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 25] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_026() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 26] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_027() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 27] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_028() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 28] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_029() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 29] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_030() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 30] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_031() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 31] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_032() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 32] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_033() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 33] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_034() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 34] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_035() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 35] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_036() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 36] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_037() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 37] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_038() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 38] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_039() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 39] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_040() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 40] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_041() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 41] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_042() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 42] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_043() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 43] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_044() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 44] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_045() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 45] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_046() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 46] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_047() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 47] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_048() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 48] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_049() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 49] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_050() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 50] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_051() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 51] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_052() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 52] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_053() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 53] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_054() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 54] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_055() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 55] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_056() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 56] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_057() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 57] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_058() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 58] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_059() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 59] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_060() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 60] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_061() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 61] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_062() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 62] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_063() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 63] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_064() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 64] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_065() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 65] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_066() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 66] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_067() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 67] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_068() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 68] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_069() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 69] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_070() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 70] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_071() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 71] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_072() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 72] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_073() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 73] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_074() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 74] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_075() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 75] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_076() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 76] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_077() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 77] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_078() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 78] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_079() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 79] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_080() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 80] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_081() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 81] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_082() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 82] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_083() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 83] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_084() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 84] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_085() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 85] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_086() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 86] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_087() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 87] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_088() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 88] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_089() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 89] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_090() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 90] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_091() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 91] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_092() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 92] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_093() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 93] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_094() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 94] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_095() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 95] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_096() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 96] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_097() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 97] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_098() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 98] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_099() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 99] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_100() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 100] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_101() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 101] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_102() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 102] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_103() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 103] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_104() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 104] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_105() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 105] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_106() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 106] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_107() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 107] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_108() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 108] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_109() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 109] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_110() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 110] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_111() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 111] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_112() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 112] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_113() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 113] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_114() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 114] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_115() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 115] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_116() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 116] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_117() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 117] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_118() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 118] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_119() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 119] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_120() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 120] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_121() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 121] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_122() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 122] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_123() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 123] + 1);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void long_124() {\n-        for (int i = START; i < SIZE; i++) {\n-            aL[i] = (long)(aL[i - 124] + 1);\n-        }\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    private int offset_con() throws Throwable {\n+        return (int) MUTABLE_CONSTANT_HANDLE.invokeExact();\n@@ -3652,1 +97,2 @@\n-    public void long_125() {\n+    public void bytes() throws Throwable {\n+        int offset = offset_con();\n@@ -3654,1 +100,1 @@\n-            aL[i] = (long)(aL[i - 125] + 1);\n+            aB[i] = (byte)(aB[i - offset] + 1);\n@@ -3659,1 +105,2 @@\n-    public void long_126() {\n+    public void shorts() throws Throwable {\n+        int offset = offset_con();\n@@ -3661,1 +108,1 @@\n-            aL[i] = (long)(aL[i - 126] + 1);\n+            aS[i] = (short)(aS[i - offset] + 1);\n@@ -3666,1 +113,2 @@\n-    public void long_127() {\n+    public void ints() throws Throwable {\n+        int offset = offset_con();\n@@ -3668,1 +116,1 @@\n-            aL[i] = (long)(aL[i - 127] + 1);\n+            aI[i] = aI[i - offset] + 1;\n@@ -3673,1 +121,2 @@\n-    public void long_128() {\n+    public void longs() throws Throwable {\n+        int offset = offset_con();\n@@ -3675,1 +124,1 @@\n-            aL[i] = (long)(aL[i - 128] + 1);\n+            aL[i] = (long)(aL[i - offset] + 1);\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/VectorStoreToLoadForwarding.java","additions":39,"deletions":3590,"binary":false,"changes":3629,"status":"modified"}]}