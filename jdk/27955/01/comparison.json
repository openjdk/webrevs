{"files":[{"patch":"@@ -231,0 +231,34 @@\n+  \/\/ If the region is a Loop, we are removing the old n,\n+  \/\/ and need to yank it from the _body. If any phi we\n+  \/\/ just split through now has no use any more, it also\n+  \/\/ has to be removed.\n+  IdealLoopTree* region_loop = get_loop(region);\n+  if (region->is_Loop() && region_loop->_child == nullptr) {\n+    region_loop->_body.yank(n);\n+    for (uint j = 1; j < n->req(); j++) {\n+      PhiNode* phi = n->in(j)->isa_Phi();\n+      \/\/ Check that phi belongs to the region and only has n as a use.\n+      if (phi != nullptr && phi->in(0) == region) {\n+        bool found_n = false;\n+        bool found_other = false;\n+        for (DUIterator_Fast kmax, k = phi->fast_outs(kmax); k < kmax; k++) {\n+          Node* u = phi->fast_out(k);\n+          if (u == n) {\n+            \/\/ Single and multiple use are allowed:\n+            \/\/   n = ConvF2I(phi)\n+            \/\/   n = AddI(phi, phi)\n+            found_n = true;\n+          } else {\n+            found_other = true;\n+          }\n+        }\n+        if (found_n && !found_other) {\n+          assert(get_ctrl(phi) == region, \"sanity\");\n+          assert(get_ctrl(n) == region, \"sanity\");\n+          region_loop->_body.yank(phi);\n+        }\n+      }\n+    }\n+  }\n+  _igvn.replace_node(n, phi);\n+\n@@ -1210,3 +1244,3 @@\n-  \/\/ Split 'n' through the merge point if it is profitable\n-  Node *phi = split_thru_phi( n, n_blk, policy );\n-  if (!phi) return n;\n+  \/\/ Split 'n' through the merge point if it is profitable, replacing it with a new phi.\n+  Node* phi = split_thru_phi(n, n_blk, policy);\n+  if (phi == nullptr) { return n; }\n@@ -1214,3 +1248,0 @@\n-  \/\/ Found a Phi to split thru!\n-  \/\/ Replace 'n' with the new phi\n-  _igvn.replace_node( n, phi );\n@@ -1447,4 +1478,0 @@\n-    \/\/ Found a Phi to split thru!\n-    \/\/ Replace 'n' with the new phi\n-    _igvn.replace_node(n, phi);\n-\n@@ -1452,1 +1479,1 @@\n-    Node *bolphi = split_thru_phi(bol, n_ctrl, -1);\n+    Node* bolphi = split_thru_phi(bol, n_ctrl, -1);\n@@ -1454,2 +1481,0 @@\n-\n-    _igvn.replace_node(bol, bolphi);\n@@ -1464,2 +1489,1 @@\n-      Node *cmovphi = split_thru_phi(iff, n_ctrl, -1);\n-      _igvn.replace_node(iff, cmovphi);\n+      Node* cmovphi = split_thru_phi(iff, n_ctrl, -1);\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":39,"deletions":15,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test id=with-flags\n+ * @bug 8370332\n+ * @summary This test shows a case where split_if split a node through a phi, but left the\n+ *          dead node and a dead phi in the loop _body. Subsequently, SuperWord was run, and\n+ *          found the dead nodes in the _body, which is not expected.\n+ * @run main\/othervm\n+ *      -XX:CompileCommand=compileonly,*TestSplitThruPhiRemoveDeadNodesFromLoopBody::test\n+ *      -Xbatch\n+ *      compiler.loopopts.superword.TestSplitThruPhiRemoveDeadNodesFromLoopBody\n+ *\/\n+\n+\/*\n+ * @test id=vanilla\n+ * @bug 8370332\n+ * @run main compiler.loopopts.superword.TestSplitThruPhiRemoveDeadNodesFromLoopBody\n+ *\/\n+\n+package compiler.loopopts.superword;\n+\n+public class TestSplitThruPhiRemoveDeadNodesFromLoopBody {\n+    static int N = 400;\n+    static float floatZero = 0;\n+    static boolean falseFlag = false;;\n+\n+    static int fieldStore = 0;\n+    static int fieldIncr = 0;\n+    static int arrayI[] = new int[N];\n+\n+    static void inlined() {\n+        int x = 0;\n+        for (int i = 0; i < 100; i++) {\n+            fieldStore = 42;\n+            if (falseFlag) {\n+                for (int k = 0; k < 20; k++) {\n+                    x += i;\n+                }\n+            }\n+        }\n+    }\n+\n+    static void test() {\n+        inlined();\n+        for (int k = 0; k < 10; k++) {\n+            for (int j = 0; j < 100; j++) {\n+                fieldIncr += floatZero;\n+                arrayI[j] = 42; \/\/ SuperWord happens here -> SIGSEGV\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] strArr) {\n+        for (int i = 0; i < 1_000; i++) {\n+            test();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestSplitThruPhiRemoveDeadNodesFromLoopBody.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"}]}