{"files":[{"patch":"@@ -2119,1 +2119,1 @@\n-                if (skind == CAPTURED_THIS && sym != null && sym.kind == TYP && !typesUnderConstruction.isEmpty()) {\n+                if (skind == CAPTURED_THIS && sym != null && sym.kind == TYP) {\n@@ -2121,3 +2121,4 @@\n-                    if (currentClass != null && typesUnderConstruction.contains(currentClass)) {\n-                        \/\/ reference must be to enclosing outer instance, mutate capture kind.\n-                        Assert.check(sym != currentClass); \/\/ should have been caught right in Attr\n+                    if (currentClass != null && currentClass != sym && !outerThisReachable(currentClass.type, sym)) {\n+                        \/\/ This is a reference to an enclosing instance that is not reachable via this$n.\n+                        \/\/ This can happen when a lambda expression occurs in a pre-construction context,\n+                        \/\/ either directly, or indirectly (e.g. via one or more enclosing local\/anonymous classes).\n@@ -2133,0 +2134,11 @@\n+            private boolean outerThisReachable(Type current, Symbol target) {\n+                if (current == Type.noType || typesUnderConstruction.contains(current.tsym)) {\n+                    return false;\n+                } else if (current.tsym.isSubClass(target, types)) {\n+                    return true;\n+                } else {\n+                    return current.tsym.hasOuterInstance() &&\n+                            outerThisReachable(current.getEnclosingType(), target);\n+                }\n+            }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.function.Supplier;\n+\n+\/*\n+ * @test\n+ * @bug 8333766\n+ * @summary Stack overflow with anonymous class in super() parameter\n+ *\/\n+public class EnclosingSuperCapture01 {\n+\n+    interface Getter {\n+        int get();\n+    }\n+\n+    class Inner {\n+        int i;\n+\n+        Inner() {\n+            this(() -> new Getter() {\n+                public int get() {\n+                    return m();\n+                }\n+            });\n+        }\n+        Inner(Supplier<Getter> r) {\n+            i = r.get().get();\n+        }\n+    }\n+\n+    int m() {\n+        return 42;\n+    }\n+\n+    public static void main(String[] args) {\n+        Inner inner = new EnclosingSuperCapture01().new Inner();\n+        if (inner.i != 42) {\n+            throw new AssertionError(\"Unexpected value: \" + inner.i);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda\/enclosingSuperCapture\/EnclosingSuperCapture01.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.function.Supplier;\n+\n+\/*\n+ * @test\n+ * @bug 8333766\n+ * @summary Stack overflow with anonymous class in super() parameter\n+ *\/\n+public class EnclosingSuperCapture02 {\n+\n+    interface Getter {\n+        int get();\n+    }\n+\n+    static class Sup {\n+        int i;\n+\n+        Sup(Supplier<Getter> r) {\n+            i = r.get().get();\n+        }\n+    }\n+\n+    class Inner extends Sup {\n+        Inner() {\n+            super(() -> new Getter() {\n+                public int get() {\n+                    return m();\n+                }\n+            });\n+        }\n+    }\n+\n+    int m() {\n+        return 42;\n+    }\n+\n+    public static void main(String[] args) {\n+        Inner inner = new EnclosingSuperCapture02().new Inner();\n+        if (inner.i != 42) {\n+            throw new AssertionError(\"Unexpected value: \" + inner.i);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda\/enclosingSuperCapture\/EnclosingSuperCapture02.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.function.Supplier;\n+\n+\/*\n+ * @test\n+ * @bug 8333766\n+ * @summary Stack overflow with anonymous class in super() parameter\n+ *\/\n+public class EnclosingSuperCapture03 {\n+\n+    interface Getter {\n+        int get();\n+    }\n+\n+    interface GetterGetter {\n+        Supplier<Getter> get();\n+    }\n+\n+    class Inner {\n+        int i;\n+\n+        Inner() {\n+            this(() -> new GetterGetter() {\n+                public Supplier<Getter> get() {\n+                    return () -> new Getter() {\n+                        public int get() { return m(); }\n+                    };\n+                }\n+            });\n+        }\n+\n+        Inner(Supplier<GetterGetter> r) {\n+            i = r.get().get().get().get();\n+        }\n+    }\n+\n+    int m() {\n+        return 42;\n+    }\n+\n+    public static void main(String[] args) {\n+        Inner inner = new EnclosingSuperCapture03().new Inner();\n+        if (inner.i != 42) {\n+            throw new AssertionError(\"Unexpected value: \" + inner.i);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda\/enclosingSuperCapture\/EnclosingSuperCapture03.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.function.Supplier;\n+\n+\/*\n+ * @test\n+ * @bug 8333766\n+ * @summary Stack overflow with anonymous class in super() parameter\n+ *\/\n+public class EnclosingSuperCapture04 {\n+\n+    interface Getter {\n+        int get();\n+    }\n+\n+    interface GetterGetter {\n+        Supplier<Getter> get();\n+    }\n+\n+    static class Sup {\n+        int i;\n+\n+        Sup(Supplier<GetterGetter> r) {\n+            i = r.get().get().get().get();\n+        }\n+    }\n+\n+    class Inner extends Sup {\n+        Inner() {\n+            super(() -> new GetterGetter() {\n+                public Supplier<Getter> get() {\n+                    return () -> new Getter() {\n+                        public int get() { return m(); }\n+                    };\n+                }\n+            });\n+        }\n+    }\n+\n+    int m() {\n+        return 42;\n+    }\n+\n+    public static void main(String[] args) {\n+        Inner inner = new EnclosingSuperCapture04().new Inner();\n+        if (inner.i != 42) {\n+            throw new AssertionError(\"Unexpected value: \" + inner.i);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda\/enclosingSuperCapture\/EnclosingSuperCapture04.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}