{"files":[{"patch":"@@ -70,1 +70,0 @@\n-#ifdef AMD64\n@@ -72,1 +71,0 @@\n-#endif \/\/ AMD64\n@@ -160,1 +158,0 @@\n-#ifdef AMD64\n@@ -172,6 +169,0 @@\n-#else\n-  \/\/ make sure code pattern is actually a mov reg, imm32 instruction\n-  u_char test_byte = *(u_char*)instruction_address();\n-  u_char test_byte_2 = test_byte & ( 0xff ^ register_mask);\n-  if (test_byte_2 != instruction_code) fatal(\"not a mov reg, imm32\");\n-#endif \/\/ AMD64\n@@ -195,1 +186,0 @@\n-    NOT_LP64(assert((0xC0 & ubyte_at(1)) == 0xC0, \"shouldn't have LDS and LES instructions\"));\n@@ -200,1 +190,0 @@\n-    NOT_LP64(assert((0xC0 & ubyte_at(1)) == 0xC0, \"shouldn't have LDS and LES instructions\"));\n@@ -316,2 +305,1 @@\n-  if ( ! ((test_byte == lea_instruction_code)\n-          LP64_ONLY(|| (test_byte == mov64_instruction_code) ))) {\n+  if ((test_byte != lea_instruction_code) && (test_byte != mov64_instruction_code)) {\n@@ -343,1 +331,0 @@\n-#ifdef AMD64\n@@ -345,1 +332,0 @@\n-#endif \/\/ AMD64\n@@ -358,1 +344,0 @@\n-#ifdef AMD64\n@@ -360,3 +345,0 @@\n-#else\n-  const int linesize = 32;\n-#endif \/\/ AMD64\n@@ -389,1 +371,0 @@\n-#ifdef _LP64\n@@ -405,37 +386,0 @@\n-\n-#else\n-  unsigned char code_buffer[5];\n-  code_buffer[0] = instruction_code;\n-  intptr_t disp = (intptr_t)dest - ((intptr_t)verified_entry + 1 + 4);\n-  *(int32_t*)(code_buffer + 1) = (int32_t)disp;\n-\n-  check_verified_entry_alignment(entry, verified_entry);\n-\n-  \/\/ Can't call nativeJump_at() because it's asserts jump exists\n-  NativeJump* n_jump = (NativeJump*) verified_entry;\n-\n-  \/\/First patch dummy jmp in place\n-\n-  unsigned char patch[4];\n-  assert(sizeof(patch)==sizeof(int32_t), \"sanity check\");\n-  patch[0] = 0xEB;       \/\/ jmp rel8\n-  patch[1] = 0xFE;       \/\/ jmp to self\n-  patch[2] = 0xEB;\n-  patch[3] = 0xFE;\n-\n-  \/\/ First patch dummy jmp in place\n-  *(int32_t*)verified_entry = *(int32_t *)patch;\n-\n-  n_jump->wrote(0);\n-\n-  \/\/ Patch 5th byte (from jump instruction)\n-  verified_entry[4] = code_buffer[4];\n-\n-  n_jump->wrote(4);\n-\n-  \/\/ Patch bytes 0-3 (from jump instruction)\n-  *(int32_t*)verified_entry = *(int32_t *)code_buffer;\n-  \/\/ Invalidate.  Opteron requires a flush after every write.\n-  n_jump->wrote(0);\n-#endif \/\/ _LP64\n-\n@@ -458,1 +402,0 @@\n-#ifdef AMD64\n@@ -460,1 +403,0 @@\n-#endif \/\/ AMD64\n","filename":"src\/hotspot\/cpu\/x86\/nativeInst_x86.cpp","additions":1,"deletions":59,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -129,1 +129,0 @@\n-#ifdef AMD64\n@@ -132,1 +131,0 @@\n-#endif \/\/ AMD64\n@@ -214,1 +212,0 @@\n-#ifdef AMD64\n@@ -218,5 +215,0 @@\n-#else\n-  static const bool has_rex = false;\n-  static const int rex_size = 0;\n-  static const int rex2_size = 0;\n-#endif \/\/ AMD64\n@@ -393,1 +385,0 @@\n-#ifdef AMD64\n@@ -396,4 +387,0 @@\n-#else\n-  static const bool has_rex = false;\n-  static const int rex_size = 0;\n-#endif \/\/ AMD64\n@@ -450,1 +437,0 @@\n-#ifdef AMD64\n@@ -452,1 +438,0 @@\n-#endif \/\/ AMD64\n@@ -575,1 +560,0 @@\n-#ifdef AMD64\n@@ -578,3 +562,0 @@\n-#else\n-  const int test_offset = 0;\n-#endif\n@@ -587,1 +568,0 @@\n-#ifdef AMD64\n@@ -596,3 +576,0 @@\n-#else\n-  return false;\n-#endif \/\/ AMD64\n","filename":"src\/hotspot\/cpu\/x86\/nativeInst_x86.hpp","additions":0,"deletions":23,"binary":false,"changes":23,"status":"modified"}]}