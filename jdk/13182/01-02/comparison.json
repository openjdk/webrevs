{"files":[{"patch":"@@ -570,1 +570,1 @@\n-            Class<?> speciesCode = lookup.makeClassDefiner(classBCName(className), classFile, DUMP_CLASS_FILES)\n+            Class<?> speciesCode = lookup.makeClassDefiner(classBCName(className), classFile, dumper())\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/ClassSpecializer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.util.ClassFileDumper;\n@@ -34,1 +35,0 @@\n-import java.io.FilePermission;\n@@ -38,2 +38,1 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n+import java.nio.file.Path;\n@@ -42,1 +41,0 @@\n-import java.util.PropertyPermission;\n@@ -90,1 +88,1 @@\n-    private static final ClassFileDumper dumper;\n+    private static final ClassFileDumper lambdaProxyClassFileDumper;\n@@ -98,2 +96,5 @@\n-        final String dumpProxyClassesKey = \"jdk.internal.lambda.dumpProxyClasses\";\n-        dumper = ClassFileDumper.getInstance(dumpProxyClassesKey);\n+        \/\/ To dump the lambda proxy classes, set this system property:\n+        \/\/    -Djdk.invoke.LambdaMetafactory.dumpProxyClassFiles=true\n+        final String dumpProxyClassesKey = \"jdk.invoke.LambdaMetafactory.dumpProxyClassFiles\";\n+        lambdaProxyClassFileDumper = ClassFileDumper.getInstance(dumpProxyClassesKey, Path.of(\"DUMP_LAMBDA_PROXY_CLASS_FILES\"));\n+\n@@ -363,1 +364,1 @@\n-            return caller.makeHiddenClassDefiner(lambdaClassName, classBytes, Set.of(NESTMATE, STRONG), dumper)\n+            return caller.makeHiddenClassDefiner(lambdaClassName, classBytes, Set.of(NESTMATE, STRONG), lambdaProxyClassFileDumper)\n@@ -371,14 +372,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private void doDump(final String className, final byte[] classBytes) {\n-        AccessController.doPrivileged(new PrivilegedAction<>() {\n-            @Override\n-            public Void run() {\n-                dumper.dumpClass(className, classBytes);\n-                return null;\n-            }\n-        }, null,\n-        new FilePermission(\"<<ALL FILES>>\", \"read, write\"),\n-        \/\/ createDirectories may need it\n-        new PropertyPermission(\"user.dir\", \"read\"));\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":9,"deletions":22,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -39,3 +38,0 @@\n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n@@ -128,1 +124,1 @@\n-        if (dumpClassEnabled()) {\n+        if (dumper().isEnabled()) {\n@@ -176,14 +172,2 @@\n-    private static final HashMap<String,Integer> DUMP_CLASS_FILES_COUNTERS;\n-\n-    static {\n-        if (dumpClassEnabled()) {\n-            DUMP_CLASS_FILES_COUNTERS = new HashMap<>();\n-            System.out.println(\"Dumping class files to \" + DUMP_CLASS_FILES.dumpPath() + \"\/...\");\n-        } else {\n-            DUMP_CLASS_FILES_COUNTERS = null;\n-        }\n-    }\n-\n-    private static boolean dumpClassEnabled() {\n-        return DUMP_CLASS_FILES.isEnabled();\n-    }\n+    private static final HashMap<String,Integer> DUMP_CLASS_FILES_COUNTERS =\n+            dumper().isEnabled() ?  new HashMap<>(): null;\n@@ -236,1 +220,1 @@\n-        if (dumpClassEnabled()) {\n+        if (dumper().isEnabled()) {\n@@ -264,1 +248,1 @@\n-        Class<?> invokerClass = LOOKUP.makeHiddenClassDefiner(className, classFile, Set.of(), DUMP_CLASS_FILES)\n+        Class<?> invokerClass = LOOKUP.makeHiddenClassDefiner(className, classFile, Set.of(), dumper())\n@@ -1936,1 +1920,1 @@\n-        if (dumpClassEnabled()) {\n+        if (dumper().isEnabled()) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InvokerBytecodeGenerator.java","additions":6,"deletions":22,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -1106,1 +1106,1 @@\n-                        .makeHiddenClassDefiner(name, INJECTED_INVOKER_TEMPLATE, Set.of(NESTMATE), DUMP_CLASS_FILES)\n+                        .makeHiddenClassDefiner(name, INJECTED_INVOKER_TEMPLATE, Set.of(NESTMATE), dumper())\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.util.ClassFileDumper;\n@@ -71,2 +72,1 @@\n-        DUMP_CLASS_FILES = ClassFileDumper.getInstance(\"java.lang.invoke.MethodHandle.DUMP_CLASS_FILES\",\n-                                                       Path.of(\"DUMP_CLASS_FILES\"));\n+\n@@ -100,0 +100,3 @@\n+        DUMP_CLASS_FILES = ClassFileDumper.getInstance(\"jdk.invoke.MethodHandle.dumpMethodHandleInternals\",\n+                Path.of(\"DUMP_METHOD_HANDLE_INTERNALS\"));\n+\n@@ -117,0 +120,4 @@\n+    static ClassFileDumper dumper() {\n+        return DUMP_CLASS_FILES;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleStatics.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import jdk.internal.util.ClassFileDumper;\n@@ -58,0 +59,1 @@\n+import java.nio.file.Path;\n@@ -2240,0 +2242,14 @@\n+        \/\/ A default dumper for writing class files passed to Lookup::defineClass\n+        \/\/ and Lookup::defineHiddenClass to disk for debugging purposes.  To enable,\n+        \/\/ set -Djdk.invoke.MethodHandle.dumpHiddenClassFiles=true\n+        \/\/\n+        \/\/ This default dumper does not dump hidden classes defined by LambdaMetafactory\n+        \/\/ and LambdaForms and method handle internals.  They are dumped via\n+        \/\/ different ClassFileDumpers.\n+        private static ClassFileDumper defaultDumper() {\n+            return DEFAULT_DUMPER;\n+        }\n+\n+        private static final ClassFileDumper DEFAULT_DUMPER = ClassFileDumper.getInstance(\n+                \"jdk.invoke.MethodHandle.dumpClassFiles\", Path.of(\"DUMP_CLASS_FILES\"));\n+\n@@ -2344,1 +2360,1 @@\n-            return new ClassDefiner(this, cf, STRONG_LOADER_LINK, DEFAULT_DUMPER);\n+            return new ClassDefiner(this, cf, STRONG_LOADER_LINK, defaultDumper());\n@@ -2377,1 +2393,1 @@\n-            return makeHiddenClassDefiner(cf, Set.of(), false, DEFAULT_DUMPER);\n+            return makeHiddenClassDefiner(cf, Set.of(), false, defaultDumper());\n@@ -2400,1 +2416,1 @@\n-            return makeHiddenClassDefiner(cf, options, accessVmAnnotations, DEFAULT_DUMPER);\n+            return makeHiddenClassDefiner(cf, options, accessVmAnnotations, defaultDumper());\n@@ -2414,1 +2430,1 @@\n-            return makeHiddenClassDefiner(name, bytes, options, DEFAULT_DUMPER);\n+            return makeHiddenClassDefiner(name, bytes, options, defaultDumper());\n@@ -2521,1 +2537,0 @@\n-                        System.out.println(\"dump: \" + dumper.pathname(name));\n@@ -2547,5 +2562,0 @@\n-        \/\/ A default dumper for writing generated classes to disk, for debugging purposes\n-        \/\/ To enable, set -Djava.lang.invoke.Lookup.dumpClasses=<path>\n-        private static final ClassFileDumper DEFAULT_DUMPER =\n-                ClassFileDumper.getInstance(\"java.lang.invoke.Lookup.dumpClasses\");\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":20,"deletions":10,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-package java.lang.invoke;\n+package jdk.internal.util;\n@@ -46,1 +46,2 @@\n- * Helper class to log normal and hidden classes defined via Lookup API\n+ * Helper class to log normal and hidden classes defined via Lookup::defineClass\n+ * and Lookup::defineHiddenClass API\n@@ -52,1 +53,1 @@\n-final class ClassFileDumper {\n+public final class ClassFileDumper {\n@@ -165,1 +166,1 @@\n-                    } catch (Exception ignore) {\n+                    } catch (Exception ex) {\n@@ -169,1 +170,2 @@\n-                                  .log(System.Logger.Level.WARNING, \"Exception writing to path at \" + file.toString());\n+                                  .log(System.Logger.Level.WARNING, \"Exception writing to \" +\n+                                          file.toString() + \" \" + ex.getMessage());\n@@ -190,1 +192,1 @@\n-                            throw new UncheckedIOException(\"Fail to create \" + path + \" - dumping disabled\", ex);\n+                            throw new UncheckedIOException(\"Fail to create \" + path, ex);\n@@ -194,1 +196,1 @@\n-                        throw new IllegalArgumentException(\"Path \" + path + \" is not a directory\" + \" - dumping disabled\");\n+                        throw new IllegalArgumentException(\"Path \" + path + \" is not a directory\");\n@@ -196,1 +198,1 @@\n-                        throw new IllegalArgumentException(\"Directory \" + path + \" is not writable\" + \" - dumping disabled\");\n+                        throw new IllegalArgumentException(\"Directory \" + path + \" is not writable\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/ClassFileDumper.java","additions":10,"deletions":8,"binary":false,"changes":18,"previous_filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/ClassFileDumper.java","status":"renamed"},{"patch":"@@ -54,0 +54,1 @@\n+    static final Path DUMP_LAMBDA_PROXY_CLASS_FILES = Path.of(\"DUMP_LAMBDA_PROXY_CLASS_FILES\");\n@@ -61,1 +62,1 @@\n-                \"-Djdk.internal.lambda.dumpProxyClasses=.\",\n+                \"-Djdk.invoke.LambdaMetafactory.dumpProxyClassFiles=true\",\n@@ -137,1 +138,1 @@\n-        try (DirectoryStream<Path> ds = newDirectoryStream(new File(\".\").toPath(),\n+        try (DirectoryStream<Path> ds = newDirectoryStream(DUMP_LAMBDA_PROXY_CLASS_FILES,\n","filename":"test\/jdk\/java\/lang\/invoke\/lambda\/LambdaAsm.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+    static final Path DUMP_LAMBDA_PROXY_CLASS_FILES = Path.of(\"DUMP_LAMBDA_PROXY_CLASS_FILES\");\n@@ -96,6 +97,0 @@\n-\n-        \/\/ create target\n-        Files.createDirectory(Paths.get(\"dump\"));\n-        Files.createDirectories(Paths.get(\"dumpLong\/com\/example\/nonsense\"));\n-        Files.createFile(Paths.get(\"dumpLong\/com\/example\/nonsense\/nonsense\"));\n-        Files.createFile(Paths.get(\"file\"));\n@@ -108,2 +103,2 @@\n-        Files.delete(Paths.get(\"file\"));\n-        TestUtil.removeAll(Paths.get(\"com\"));\n+        TestUtil.removeAll(DUMP_LAMBDA_PROXY_CLASS_FILES);\n+        TestUtil.removeAll(Paths.get(\"notDir\"));\n@@ -125,1 +120,3 @@\n-        assertTrue(Files.exists(Paths.get(\"dump\")));\n+        Path testDir = Path.of(\"dump\");\n+        Path dumpDir = testDir.resolve(DUMP_LAMBDA_PROXY_CLASS_FILES);\n+        Files.createDirectory(testDir);\n@@ -127,1 +124,2 @@\n-                               \"-cp\", \".\",\n+                               \"-cp\", \"..\",\n+                               \"-Duser.dir=\" + testDir.toAbsolutePath(),\n@@ -129,1 +127,1 @@\n-                               \"-Djdk.internal.lambda.dumpProxyClasses=dump\",\n+                               \"-Djdk.invoke.LambdaMetafactory.dumpProxyClassFiles=true\",\n@@ -133,1 +131,1 @@\n-                        Paths.get(\"dump\"),\n+                        dumpDir,\n@@ -135,1 +133,1 @@\n-                        (p, a) -> p.startsWith(Paths.get(\"dump\/com\/example\"))\n+                        (p, a) -> p.startsWith(dumpDir.resolve(\"com\/example\"))\n@@ -143,1 +141,6 @@\n-        assertFalse(Files.exists(Paths.get(\"notExist\")));\n+        Path testDir = Path.of(\"NotExist\");\n+        Path dumpDir = testDir.resolve(DUMP_LAMBDA_PROXY_CLASS_FILES);\n+        Files.createDirectory(testDir);\n+        TestUtil.removeAll(dumpDir);\n+\n+        assertFalse(Files.exists(dumpDir));\n@@ -145,1 +148,2 @@\n-                               \"-cp\", \".\",\n+                               \"-cp\", \"..\",\n+                               \"-Duser.dir=\" + testDir.toAbsolutePath(),\n@@ -147,1 +151,1 @@\n-                               \"-Djdk.internal.lambda.dumpProxyClasses=notExist\",\n+                               \"-Djdk.invoke.LambdaMetafactory.dumpProxyClassFiles=true\",\n@@ -149,0 +153,1 @@\n+\n@@ -151,1 +156,1 @@\n-                        Paths.get(\"notExist\"),\n+                        dumpDir,\n@@ -153,1 +158,1 @@\n-                        (p, a) -> p.startsWith(Paths.get(\"notExist\/com\/example\"))\n+                        (p, a) -> p.startsWith(dumpDir.resolve(\"com\/example\"))\n@@ -161,1 +166,5 @@\n-        assertTrue(Files.isRegularFile(Paths.get(\"file\")));\n+        Path testDir = Path.of(\"notDir\");\n+        Path dumpFile = testDir.resolve(DUMP_LAMBDA_PROXY_CLASS_FILES);\n+        Files.createDirectory(testDir);\n+        Files.createFile(dumpFile);\n+        assertTrue(Files.isRegularFile(dumpFile));\n@@ -163,1 +172,2 @@\n-                               \"-cp\", \".\",\n+                               \"-cp\", \"..\",\n+                               \"-Duser.dir=\" + testDir.toAbsolutePath(),\n@@ -165,1 +175,1 @@\n-                               \"-Djdk.internal.lambda.dumpProxyClasses=file\",\n+                               \"-Djdk.invoke.LambdaMetafactory.dumpProxyClassFiles=true\",\n@@ -168,1 +178,1 @@\n-                                  .filter(s -> s.contains(\"Path file is not a directory - dumping disabled\"))\n+                                  .filter(s -> s.contains(\"is not a directory\"))\n@@ -210,1 +220,4 @@\n-        Files.createDirectory(Paths.get(\"readOnly\"),\n+        Path testDir = Path.of(\"readOnly\");\n+        Path dumpDir = testDir.resolve(DUMP_LAMBDA_PROXY_CLASS_FILES);\n+        Files.createDirectory(testDir);\n+        Files.createDirectory(dumpDir,\n@@ -213,1 +226,1 @@\n-            if (isWriteableDirectory(Paths.get(\"readOnly\"))) {\n+            if (isWriteableDirectory(dumpDir)) {\n@@ -216,1 +229,1 @@\n-                System.out.println(\"WARNING: readOnly directory is writeable. Skipping testDumpDirNotWritable test.\");\n+                System.out.println(\"WARNING: The dump directory is writeable. Skipping testDumpDirNotWritable test.\");\n@@ -221,1 +234,2 @@\n-                                   \"-cp\", \".\",\n+                                   \"-cp\", \"..\",\n+                                   \"-Duser.dir=\" + testDir.toAbsolutePath(),\n@@ -223,1 +237,1 @@\n-                                   \"-Djdk.internal.lambda.dumpProxyClasses=readOnly\",\n+                                   \"-Djdk.invoke.LambdaMetafactory.dumpProxyClassFiles=true\",\n@@ -226,1 +240,1 @@\n-                                      .filter(s -> s.contains(\"Directory readOnly is not writable - dumping disabled\"))\n+                                      .filter(s -> s.contains(\"is not writable\"))\n@@ -231,1 +245,1 @@\n-            TestUtil.removeAll(Paths.get(\"readOnly\"));\n+            TestUtil.removeAll(testDir);\n@@ -237,1 +251,4 @@\n-        assertTrue(Files.exists(Paths.get(\"dumpLong\")));\n+        Path testDir = Path.of(\"dumpLong\");\n+        Path dumpDir = testDir.resolve(DUMP_LAMBDA_PROXY_CLASS_FILES);\n+        Files.createDirectories(dumpDir.resolve(\"com\/example\/nonsense\"));\n+        Files.createFile(dumpDir.resolve(\"com\/example\/nonsense\/nonsense\"));\n@@ -239,3 +256,4 @@\n-                               \"-cp\", \".\",\n-                                \"-Djava.security.manager=allow\",\n-                               \"-Djdk.internal.lambda.dumpProxyClasses=dumpLong\",\n+                               \"-cp\", \"..\",\n+                               \"-Duser.dir=\" + testDir.toAbsolutePath(),\n+                               \"-Djava.security.manager=allow\",\n+                               \"-Djdk.invoke.LambdaMetafactory.dumpProxyClassFiles=true\",\n@@ -247,2 +265,2 @@\n-        \/\/ dumpLong\/com\/example\/nonsense\/nonsense\n-        Path dumpPath = Paths.get(\"dumpLong\/com\/example\/nonsense\");\n+        \/\/ dumpLong\/DUMP_LAMBDA_PROXY_CLASS_FILES\/com\/example\/nonsense\/nonsense\n+        Path dumpPath = dumpDir.resolve(\"com\/example\/nonsense\");\n@@ -252,1 +270,1 @@\n-           Files.walk(Paths.get(\"dumpLong\"))\n+           Files.walk(dumpDir)\n@@ -261,1 +279,1 @@\n-        assertEquals(Files.walk(Paths.get(\"dumpLong\"))\n+        assertEquals(Files.walk(dumpDir)\n","filename":"test\/jdk\/java\/lang\/invoke\/lambda\/LogGeneratedClassesTest.java","additions":55,"deletions":37,"binary":false,"changes":92,"status":"modified"}]}