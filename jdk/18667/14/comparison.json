{"files":[{"patch":"@@ -140,1 +140,0 @@\n-        flush();\n@@ -142,0 +141,4 @@\n+            \/* write any pending chunk data *\/\n+            if(count>0) {\n+                writeChunk();\n+            }\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/ChunkedOutputStream.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -210,1 +210,1 @@\n-        OutputStream tmpout = new BufferedOutputStream (ros);\n+        ByteArrayOutputStream tmpout = new ByteArrayOutputStream();\n@@ -281,2 +281,1 @@\n-        tmpout.flush() ;\n-        tmpout = null;\n+        tmpout.writeTo(ros);\n@@ -286,0 +285,1 @@\n+            ros.flush();\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/ExchangeImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.io.BufferedOutputStream;\n@@ -689,0 +690,1 @@\n+                    rawout = new BufferedOutputStream(rawout);\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/ServerImpl.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 6968351\n+ * @summary  tcp no delay not required for small payloads\n+ * @library \/test\/lib\n+ * @run main\/othervm\/timeout=5 -Dsun.net.httpserver.nodelay=false  TcpNoDelayNotRequired\n+ *\/\n+\n+import com.sun.net.httpserver.*;\n+import jdk.test.lib.net.URIBuilder;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.*;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.logging.*;\n+\n+public class TcpNoDelayNotRequired {\n+\n+    public static final Logger LOGGER = Logger.getLogger(\"sun.net.www.protocol.http\");\n+\n+    public static void main (String[] args) throws Exception {\n+\n+        java.util.logging.Handler outHandler = new StreamHandler(System.out,\n+                new SimpleFormatter());\n+        outHandler.setLevel(Level.FINEST);\n+        LOGGER.setLevel(Level.FINEST);\n+        LOGGER.addHandler(outHandler);\n+\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        InetSocketAddress addr = new InetSocketAddress (loopback, 0);\n+        HttpServer server = HttpServer.create (addr, 0);\n+        HttpHandler handler = new Handler();\n+        HttpContext ctx = server.createContext (\"\/test\", handler);\n+        HttpContext ctx2 = server.createContext (\"\/chunked\", handler);\n+        ExecutorService executor = Executors.newCachedThreadPool();\n+        server.setExecutor (executor);\n+        server.start ();\n+\n+        HttpClient client = HttpClient.newBuilder().build();\n+\n+        long start = System.currentTimeMillis();\n+        for(int i=0;i<1000;i++) {\n+            var uri = URIBuilder.newBuilder().scheme(\"http\").loopback().port(server.getAddress().getPort()).path(\"\/test\").build();\n+            var response = client.send(HttpRequest.newBuilder(uri).build(), HttpResponse.BodyHandlers.ofString());\n+            if(!response.body().equals(\"hello\")) throw new IllegalStateException(\"incorrect body\");\n+        }\n+        for(int i=0;i<1000;i++) {\n+            var uri = URIBuilder.newBuilder().scheme(\"http\").loopback().port(server.getAddress().getPort()).path(\"\/chunked\").build();\n+            var response = client.send(HttpRequest.newBuilder(uri).build(), HttpResponse.BodyHandlers.ofString());\n+            if(!response.body().equals(\"hello\")) throw new IllegalStateException(\"incorrect body\");\n+        }\n+        long time = System.currentTimeMillis()-start;\n+        System.out.println(\"time \"+time);\n+        if(time>5000) throw new IllegalStateException(\"took too long\");\n+        server.stop(0);\n+        executor.shutdown();\n+    }\n+\n+    static class Handler implements HttpHandler {\n+        public void handle (HttpExchange t)\n+                throws IOException\n+        {\n+            InputStream is = t.getRequestBody();\n+            Headers map = t.getRequestHeaders();\n+            Headers rmap = t.getResponseHeaders();\n+            while (is.read () != -1) ;\n+            is.close();\n+            rmap.add(\"content-type\",\"text\/plain\");\n+            t.sendResponseHeaders(200,5);\n+            t.getResponseBody().write(\"hello\".getBytes(StandardCharsets.ISO_8859_1));\n+            t.getResponseBody().close();\n+        }\n+    }\n+    static class ChunkedHandler implements HttpHandler {\n+        public void handle (HttpExchange t)\n+                throws IOException\n+        {\n+            InputStream is = t.getRequestBody();\n+            Headers map = t.getRequestHeaders();\n+            Headers rmap = t.getResponseHeaders();\n+            while (is.read () != -1) ;\n+            is.close();\n+            rmap.add(\"content-type\",\"text\/plain\");\n+            t.sendResponseHeaders(200,0);\n+            t.getResponseBody().write(\"hello\".getBytes(StandardCharsets.ISO_8859_1));\n+            t.getResponseBody().close();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/bugs\/TcpNoDelayNotRequired.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"}]}