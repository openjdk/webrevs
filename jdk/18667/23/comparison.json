{"files":[{"patch":"@@ -140,1 +140,0 @@\n-        flush();\n@@ -142,0 +141,7 @@\n+            \/*\n+            * write any pending chunk data. manually write chunk rather than\n+            * calling flush to avoid sending small packets\n+            *\/\n+            if (count > 0) {\n+                writeChunk();\n+            }\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/ChunkedOutputStream.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -210,1 +210,1 @@\n-        OutputStream tmpout = new BufferedOutputStream (ros);\n+        ByteArrayOutputStream tmpout = new ByteArrayOutputStream();\n@@ -281,2 +281,1 @@\n-        tmpout.flush() ;\n-        tmpout = null;\n+        tmpout.writeTo(ros);\n@@ -286,0 +285,1 @@\n+            ros.flush();\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/ExchangeImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.io.BufferedOutputStream;\n@@ -689,0 +690,1 @@\n+                    rawout = new BufferedOutputStream(rawout);\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/ServerImpl.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,144 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 6968351\n+ * @summary  tcp no delay not required for small payloads\n+ * @library \/test\/lib\n+ * @run main\/othervm\/timeout=5 -Dsun.net.httpserver.nodelay=false  TcpNoDelayNotRequired\n+ *\/\n+\n+import com.sun.net.httpserver.Headers;\n+import com.sun.net.httpserver.HttpContext;\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+\n+import com.sun.net.httpserver.HttpsConfigurator;\n+import com.sun.net.httpserver.HttpsServer;\n+import jdk.test.lib.net.SimpleSSLContext;\n+import jdk.test.lib.net.URIBuilder;\n+\n+import javax.net.ssl.SSLContext;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.logging.SimpleFormatter;\n+import java.util.logging.StreamHandler;\n+\n+public class TcpNoDelayNotRequired {\n+\n+    public static final Logger LOGGER = Logger.getLogger(\"sun.net.www.protocol.http\");\n+\n+    public static void main (String[] args) throws Exception {\n+\n+        java.util.logging.Handler outHandler = new StreamHandler(System.out,\n+                new SimpleFormatter());\n+        outHandler.setLevel(Level.FINEST);\n+        LOGGER.setLevel(Level.FINEST);\n+        LOGGER.addHandler(outHandler);\n+\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        InetSocketAddress addr = new InetSocketAddress (loopback, 0);\n+\n+        SSLContext sslContext = new SimpleSSLContext().get();\n+\n+        HttpServer httpServer = HttpServer.create (addr, 0);\n+        testHttpServer(\"http\",httpServer,sslContext);\n+\n+        HttpsServer httpsServer = HttpsServer.create (addr, 0);\n+        httpsServer.setHttpsConfigurator(new HttpsConfigurator(sslContext));\n+\n+        testHttpServer(\"https\",httpsServer,sslContext);\n+    }\n+\n+    private static void testHttpServer(String scheme,HttpServer server,SSLContext sslContext) throws Exception {\n+        HttpContext ctx = server.createContext (\"\/test\", new Handler());\n+        HttpContext ctx2 = server.createContext (\"\/chunked\", new ChunkedHandler());\n+        ExecutorService executor = Executors.newCachedThreadPool();\n+        server.setExecutor (executor);\n+        server.start ();\n+        try {\n+            try (HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build()) {\n+                long start = System.currentTimeMillis();\n+                for (int i = 0; i < 1000; i++) {\n+                    var uri = URIBuilder.newBuilder().scheme(scheme).loopback().port(server.getAddress().getPort()).path(\"\/test\").build();\n+                    var response = client.send(HttpRequest.newBuilder(uri).build(), HttpResponse.BodyHandlers.ofString());\n+                    if (!response.body().equals(\"hello\"))\n+                        throw new IllegalStateException(\"incorrect body \" + response.body());\n+                }\n+                for (int i = 0; i < 1000; i++) {\n+                    var uri = URIBuilder.newBuilder().scheme(scheme).loopback().port(server.getAddress().getPort()).path(\"\/chunked\").build();\n+                    var response = client.send(HttpRequest.newBuilder(uri).build(), HttpResponse.BodyHandlers.ofString());\n+                    if (!response.body().equals(\"hello\"))\n+                        throw new IllegalStateException(\"incorrect body \" + response.body());\n+                }\n+                long time = System.currentTimeMillis() - start;\n+                System.out.println(\"time \" + time);\n+            }\n+        } finally {\n+            server.stop(0);\n+        }\n+        executor.shutdown();\n+    }\n+\n+    static class Handler implements HttpHandler {\n+        public void handle (HttpExchange t)\n+                throws IOException\n+        {\n+            Headers rmap = t.getResponseHeaders();\n+            try (var is = t.getRequestBody()) {\n+                is.readAllBytes();\n+            }\n+            rmap.add(\"content-type\",\"text\/plain\");\n+            t.sendResponseHeaders(200,5);\n+            try (var os = t.getResponseBody()) {\n+                os.write(\"hello\".getBytes(StandardCharsets.ISO_8859_1));\n+            }\n+        }\n+    }\n+    static class ChunkedHandler implements HttpHandler {\n+        public void handle (HttpExchange t)\n+                throws IOException\n+        {\n+            Headers rmap = t.getResponseHeaders();\n+            try (var is = t.getRequestBody()) {\n+                is.readAllBytes();\n+            }\n+            rmap.add(\"content-type\",\"text\/plain\");\n+            t.sendResponseHeaders(200,0);\n+            try (var os = t.getResponseBody()) {\n+                os.write(\"hello\".getBytes(StandardCharsets.ISO_8859_1));\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/TcpNoDelayNotRequired.java","additions":144,"deletions":0,"binary":false,"changes":144,"status":"added"},{"patch":"@@ -358,1 +358,1 @@\n-            exchange.sendResponseHeaders(407, 0);\n+            exchange.sendResponseHeaders(407, -1);\n","filename":"test\/jdk\/java\/net\/Authenticator\/B4769350.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -247,0 +247,1 @@\n+            t.getResponseBody().close();\n","filename":"test\/jdk\/sun\/net\/www\/http\/KeepAliveCache\/B8293562.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}