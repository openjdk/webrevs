{"files":[{"patch":"@@ -40,2 +40,0 @@\n-import java.util.ArrayList;\n-import java.util.List;\n@@ -955,0 +953,1 @@\n+            boolean found = false;\n@@ -956,1 +955,1 @@\n-            String elementName = element.toString();\n+            \/\/ compare path bytes until a match is found or no more entries\n@@ -958,3 +957,0 @@\n-                \/\/ compare path bytes until a match is found\n-                List<Path> notMatched = new ArrayList<Path>();\n-                boolean found = false;\n@@ -967,2 +963,0 @@\n-                    } else {\n-                        notMatched.add(entry);\n@@ -971,0 +965,1 @@\n+            }\n@@ -972,3 +967,10 @@\n-                \/\/ if no path match found, compare file keys\n-                if (!found) {\n-                    for (Path entry : notMatched) {\n+            \/\/ if no path match found, compare file keys\n+            if (!found) {\n+                try {\n+                    dp = opendir(path);\n+                } catch (UnixException x) {\n+                    x.rethrowAsIOException(path);\n+                }\n+\n+                try (DirectoryStream<Path> entries = new UnixDirectoryStream(path, dp, filter)) {\n+                    for (Path entry : entries) {\n@@ -986,1 +988,1 @@\n-                        }catch (UnixException ignore) {\n+                        } catch (UnixException ignore) {\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixPath.java","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.io.File;\n@@ -27,0 +28,1 @@\n+import java.nio.file.FileVisitResult;\n@@ -29,0 +31,2 @@\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n@@ -35,0 +39,1 @@\n+import org.openjdk.jmh.annotations.TearDown;\n@@ -39,1 +44,1 @@\n-    static Random RND = new Random();\n+    static Random RND = new Random(17_000_126);\n@@ -41,0 +46,4 @@\n+    static final String NAME = \"RealPath\";\n+    static final int LEN = NAME.length();\n+\n+    Path root;\n@@ -45,2 +54,6 @@\n-        files = new Path[10000];\n-        Path cwd = Path.of(\".\");\n+        \/\/ root the test files at CWD\/NAME\n+        root = Path.of(System.getProperty(\"user.dir\")).resolve(NAME);\n+\n+        \/\/ populate files array\n+        StringBuilder sb = new StringBuilder();\n+        files = new Path[100];\n@@ -48,3 +61,32 @@\n-            Path p = Files.createTempFile(cwd, \"RealPath\" + i, \".tmp\");\n-            p.toFile().deleteOnExit();\n-            files[i] = p;\n+            \/\/ create directories up to a depth of 9, inclusive\n+            sb.setLength(0);\n+            int depth = RND.nextInt(10);\n+            for (int j = 0; j < depth; j++) {\n+                sb.append(\"dir\");\n+                sb.append(j);\n+                sb.append(File.separatorChar);\n+            }\n+            Path dir = root.resolve(sb.toString());\n+            Files.createDirectories(dir);\n+\n+            \/\/ set the file prefix with random case conversion\n+            String prefix;\n+            if (RND.nextBoolean()) {\n+                sb.setLength(0);\n+                for (int k = 0; k < LEN; k++) {\n+                    char c = NAME.charAt(k);\n+                    sb.append(RND.nextBoolean()\n+                              ? Character.toLowerCase(c)\n+                              : Character.toUpperCase(c));\n+                }\n+                prefix = sb.append(i).toString();\n+            } else {\n+                prefix = NAME + i;\n+            }\n+\n+            \/\/ create the file\n+            Path tmpFile = Files.createTempFile(dir, prefix, \".tmp\");\n+\n+            \/\/ set the array path to a version with a lower case name\n+            String tmpName = tmpFile.getFileName().toString().toLowerCase();\n+            files[i] = tmpFile.getParent().resolve(tmpName);\n@@ -54,0 +96,28 @@\n+    @TearDown\n+    public void cleanup() throws IOException {\n+        Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n+                @Override\n+                public FileVisitResult visitFile(Path file,\n+                                                 BasicFileAttributes attrs)\n+                    throws IOException\n+                {\n+                    Files.delete(file);\n+                    return FileVisitResult.CONTINUE;\n+                }\n+\n+                @Override\n+                public FileVisitResult postVisitDirectory(Path dir,\n+                                                          IOException e)\n+                    throws IOException\n+                {\n+                    if (e == null) {\n+                        Files.delete(dir);\n+                        return FileVisitResult.CONTINUE;\n+                    } else {\n+                        \/\/ directory iteration failed\n+                        throw e;\n+                    }\n+                }\n+            });\n+    }\n+\n@@ -59,1 +129,0 @@\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/file\/ToRealPath.java","additions":76,"deletions":7,"binary":false,"changes":83,"status":"modified"}]}