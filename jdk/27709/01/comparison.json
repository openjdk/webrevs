{"files":[{"patch":"@@ -40,0 +40,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -951,1 +953,2 @@\n-            \/\/ key is equal to the key of the current element\n+            \/\/ internal path bytes equal the internal path bytes of the current\n+            \/\/ element, or whose key is equal to the key  of the current element\n@@ -953,0 +956,1 @@\n+            String elementName = element.toString();\n@@ -954,0 +958,2 @@\n+                \/\/ compare path bytes until a match is found\n+                List<Path> notMatched = new ArrayList<Path>();\n@@ -956,9 +962,26 @@\n-                    UnixPath p = path.resolve(entry.getFileName());\n-                    UnixFileAttributes attributes = null;\n-                    try {\n-                        attributes = UnixFileAttributes.get(p, false);\n-                        UnixFileKey key = attributes.fileKey();\n-                        if (key.equals(elementKey)) {\n-                            path = path.resolve(entry);\n-                            found = true;\n-                            break;\n+                    Path name = entry.getFileName();\n+                    if (name.compareTo(element) == 0) {\n+                        found = true;\n+                        path = path.resolve(entry);\n+                        break;\n+                    } else {\n+                        notMatched.add(entry);\n+                    }\n+                }\n+\n+                \/\/ if no path match found, compare file keys\n+                if (!found) {\n+                    for (Path entry : notMatched) {\n+                        Path name = entry.getFileName();\n+                        UnixPath p = path.resolve(name);\n+                        UnixFileAttributes attributes = null;\n+                        try {\n+                            attributes = UnixFileAttributes.get(p, false);\n+                            UnixFileKey key = attributes.fileKey();\n+                            if (key.equals(elementKey)) {\n+                                found = true;\n+                                path = path.resolve(entry);\n+                                break;\n+                            }\n+                        }catch (UnixException ignore) {\n+                            continue;\n@@ -966,2 +989,0 @@\n-                    } catch (UnixException ignore) {\n-                        continue;\n@@ -971,1 +992,0 @@\n-                \/\/ Fallback which should in theory never happen\n@@ -973,0 +993,1 @@\n+                    \/\/ Fallback which should in theory never happen\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixPath.java","additions":34,"deletions":13,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -154,1 +154,1 @@\n-        System.out.println(\"sub: \" + sub);\n+        System.err.println(\"sub: \" + sub);\n@@ -156,1 +156,1 @@\n-        System.out.println(\"LINK: \" + LINK + \" -> \" + sub);\n+        System.err.println(\"LINK: \" + LINK + \" -> \" + sub);\n@@ -158,1 +158,1 @@\n-        System.out.println(\"p: \" + p);\n+        System.err.println(\"p: \" + p);\n@@ -160,1 +160,1 @@\n-        System.out.println(\"path:      \" + path);\n+        System.err.println(\"path:      \" + path);\n@@ -165,1 +165,1 @@\n-        System.out.println(\"no follow: \" + path.toRealPath(NOFOLLOW_LINKS));\n+        System.err.println(\"no follow: \" + path.toRealPath(NOFOLLOW_LINKS));\n@@ -184,1 +184,1 @@\n-        System.out.println(\"aaa: \" + aaa + \" -> \" + sub);\n+        System.err.println(\"aaa: \" + aaa + \" -> \" + sub);\n@@ -187,1 +187,1 @@\n-        System.out.println(\"bbb: \" + bbb + \" -> \" + sub);\n+        System.err.println(\"bbb: \" + bbb + \" -> \" + sub);\n@@ -190,1 +190,1 @@\n-        System.out.println(\"path:      \" + path);\n+        System.err.println(\"path:      \" + path);\n@@ -195,1 +195,1 @@\n-        System.out.println(\"no follow: \" + path.toRealPath(NOFOLLOW_LINKS));\n+        System.err.println(\"no follow: \" + path.toRealPath(NOFOLLOW_LINKS));\n@@ -200,1 +200,1 @@\n-        System.out.println(path.toRealPath());\n+        System.err.println(path.toRealPath());\n","filename":"test\/jdk\/java\/nio\/file\/Path\/ToRealPath.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.nio.file;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.LinkOption;\n+import java.nio.file.Path;\n+import java.util.Random;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+\n+@State(Scope.Benchmark)\n+public class ToRealPath {\n+\n+    static Random RND = new Random();\n+\n+    Path[] files;\n+\n+    @Setup\n+    public void init() throws IOException {\n+        files = new Path[10000];\n+        Path cwd = Path.of(\".\");\n+        for (int i = 0; i < files.length; i++) {\n+            Path p = Files.createTempFile(cwd, \"RealPath\" + i, \".tmp\");\n+            p.toFile().deleteOnExit();\n+            files[i] = p;\n+        }\n+    }\n+\n+    @Benchmark\n+    public Path noFollowLinks() throws IOException {\n+        int i = RND.nextInt(0, files.length);\n+        return files[i].toRealPath(LinkOption.NOFOLLOW_LINKS);\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/file\/ToRealPath.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"}]}