{"files":[{"patch":"@@ -40,0 +40,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -952,3 +954,1 @@\n-            \/\/ element, or whose string representation is equal to that of the\n-            \/\/ current element ignoring case and whose key is equal to the key\n-            \/\/ of the current element\n+            \/\/ element, or whose key is equal to the key  of the current element\n@@ -958,0 +958,2 @@\n+                \/\/ compare path bytes until a match is found\n+                List<Path> notMatched = new ArrayList<Path>();\n@@ -965,1 +967,9 @@\n-                    } else if (name.toString().equalsIgnoreCase(elementName)) {\n+                    } else {\n+                        notMatched.add(entry);\n+                    }\n+                }\n+\n+                \/\/ if no path match found, compare file keys\n+                if (!found) {\n+                    for (Path entry : notMatched) {\n+                        Path name = entry.getFileName();\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixPath.java","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.nio.file;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.LinkOption;\n+import java.nio.file.Path;\n+import java.util.Random;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+\n+@State(Scope.Benchmark)\n+public class ToRealPath {\n+\n+    static Random RND = new Random();\n+\n+    Path[] files;\n+\n+    @Setup\n+    public void init() throws IOException {\n+        files = new Path[10000];\n+        Path cwd = Path.of(\".\");\n+        for (int i = 0; i < files.length; i++) {\n+            Path p = Files.createTempFile(cwd, \"RealPath\" + i, \".tmp\");\n+            p.toFile().deleteOnExit();\n+            files[i] = p;\n+        }\n+    }\n+\n+    @Benchmark\n+    public Path noFollowLinks() throws IOException {\n+        int i = RND.nextInt(0, files.length);\n+        return files[i].toRealPath(LinkOption.NOFOLLOW_LINKS);\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/file\/ToRealPath.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"}]}