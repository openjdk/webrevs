{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,0 @@\n-import java.nio.file.Path;\n@@ -65,0 +64,1 @@\n+import org.testng.annotations.DataProvider;\n@@ -66,1 +66,0 @@\n-import org.testng.Assert;\n@@ -4151,4 +4150,3 @@\n-    @Test\n-    public static void grapheme() throws Exception {\n-        final int[] lineNumber = new int[1];\n-        Stream.concat(Files.lines(UCDFiles.GRAPHEME_BREAK_TEST),\n+    @DataProvider\n+    private static String[] graphemeTestCases() throws Exception {\n+        return Stream.concat(Files.lines(UCDFiles.GRAPHEME_BREAK_TEST),\n@@ -4156,76 +4154,75 @@\n-            .forEach( ln -> {\n-                    lineNumber[0]++;\n-                    if (ln.length() == 0 || ln.startsWith(\"#\")) {\n-                        return;\n-                    }\n-                    ln = ln.replaceAll(\"\\\\s+|\\\\([a-zA-Z]+\\\\)|\\\\[[a-zA-Z]]+\\\\]|#.*\", \"\");\n-                    \/\/ System.out.println(str);\n-                    String[] strs = ln.split(\"\\u00f7|\\u00d7\");\n-                    StringBuilder src = new StringBuilder();\n-                    ArrayList<String> graphemes = new ArrayList<>();\n-                    StringBuilder buf = new StringBuilder();\n-                    int offBk = 0;\n-                    for (String str : strs) {\n-                        if (str.length() == 0)  \/\/ first empty str\n-                            continue;\n-                        int cp = Integer.parseInt(str, 16);\n-                        src.appendCodePoint(cp);\n-                        buf.appendCodePoint(cp);\n-                        offBk += (str.length() + 1);\n-                        if (ln.charAt(offBk) == '\\u00f7') {    \/\/ DIV\n-                            graphemes.add(buf.toString());\n-                            buf = new StringBuilder();\n-                        }\n-                    }\n-                    Pattern p = Pattern.compile(\"\\\\X\");\n-                    \/\/ (1) test \\X directly\n-                    Matcher m = p.matcher(src.toString());\n-                    for (String g : graphemes) {\n-                        \/\/ System.out.printf(\"     grapheme:=[%s]%n\", g);\n-                        String group = null;\n-                        if (!m.find() || !(group = m.group()).equals(g)) {\n-                                 fail(\"Failed pattern \\\\X [\" + ln + \"] : \"\n-                                    + \"expected: \" + g + \" - actual: \" + group\n-                                    + \"(line \" + lineNumber[0] + \")\");\n-                        }\n-                    }\n-                    assertFalse(m.find());\n-                    \/\/ test \\b{g} without \\X via Pattern\n-                    Pattern pbg = Pattern.compile(\"\\\\b{g}\");\n-                    m = pbg.matcher(src.toString());\n-                    m.find();\n-                    int prev = m.end();\n-                    for (String g : graphemes) {\n-                        String group = null;\n-                        if (!m.find() || !(group = src.substring(prev, m.end())).equals(g)) {\n-                                 fail(\"Failed pattern \\\\b{g} [\" + ln + \"] : \"\n-                                    + \"expected: \" + g + \" - actual: \" + group\n-                                    + \"(line \" + lineNumber[0] + \")\");\n-                        }\n-                        assertEquals(\"\", m.group());\n-                        prev = m.end();\n-                    }\n-                    assertFalse(m.find());\n-                    \/\/ (2) test \\b{g} + \\X  via Scanner\n-                    Scanner s = new Scanner(src.toString()).useDelimiter(\"\\\\b{g}\");\n-                    for (String g : graphemes) {\n-                        String next = null;\n-                        if (!s.hasNext(p) || !(next = s.next(p)).equals(g)) {\n-                                 fail(\"Failed \\\\b{g} [\" + ln + \"] : \"\n-                                    + \"expected: \" + g + \" - actual: \" + next\n-                                    + \" (line \" + lineNumber[0] + \")\");\n-                        }\n-                    }\n-                    assertFalse(s.hasNext(p));\n-                    \/\/ test \\b{g} without \\X via Scanner\n-                    s = new Scanner(src.toString()).useDelimiter(\"\\\\b{g}\");\n-                    for (String g : graphemes) {\n-                        String next = null;\n-                        if (!s.hasNext() || !(next = s.next()).equals(g)) {\n-                                 fail(\"Failed \\\\b{g} [\" + ln + \"] : \"\n-                                    + \"expected: \" + g + \" - actual: \" + next\n-                                    + \" (line \" + lineNumber[0] + \")\");\n-                        }\n-                    }\n-                    assertFalse(s.hasNext());\n-                });\n+            .filter(line -> !line.isEmpty() && !line.startsWith(\"#\"))\n+            .toArray(String[]::new);\n+    }\n+\n+    @Test(dataProvider = \"graphemeTestCases\")\n+    public static void grapheme(String line) throws Exception {\n+        String tc = line.replaceAll(\"\\\\s+|\\\\([a-zA-Z]+\\\\)|\\\\[[a-zA-Z]]+]|#.*\", \"\");\n+        String[] strs = tc.split(\"\\u00f7|\\u00d7\");\n+        StringBuilder src = new StringBuilder();\n+        ArrayList<String> graphemes = new ArrayList<>();\n+        StringBuilder buf = new StringBuilder();\n+        int offBk = 0;\n+        for (String str : strs) {\n+            if (str.length() == 0)  \/\/ first empty str\n+                continue;\n+            int cp = Integer.parseInt(str, 16);\n+            src.appendCodePoint(cp);\n+            buf.appendCodePoint(cp);\n+            offBk += (str.length() + 1);\n+            if (tc.charAt(offBk) == '\\u00f7') {    \/\/ DIV\n+                graphemes.add(buf.toString());\n+                buf = new StringBuilder();\n+            }\n+        }\n+        Pattern p = Pattern.compile(\"\\\\X\");\n+        \/\/ (1) test \\X directly\n+        Matcher m = p.matcher(src.toString());\n+        for (String g : graphemes) {\n+            \/\/ System.out.printf(\"     grapheme:=[%s]%n\", g);\n+            String group = null;\n+            if (!m.find() || !(group = m.group()).equals(g)) {\n+                fail(\"Failed pattern \\\\X [\" + tc + \"] : \"\n+                    + \"expected: \" + g + \" - actual: \" + group);\n+            }\n+        }\n+        assertFalse(m.find());\n+        \/\/ test \\b{g} without \\X via Pattern\n+        Pattern pbg = Pattern.compile(\"\\\\b{g}\");\n+        m = pbg.matcher(src.toString());\n+        m.find();\n+        int prev = m.end();\n+        for (String g : graphemes) {\n+            String group = null;\n+            if (!m.find() || !(group = src.substring(prev, m.end())).equals(g)) {\n+                fail(\"Failed pattern \\\\b{g} [\" + tc + \"] : \"\n+                    + \"expected: \" + g + \" - actual: \" + group);\n+            }\n+            assertEquals(\"\", m.group());\n+            prev = m.end();\n+        }\n+        assertFalse(m.find());\n+        \/\/ (2) test \\b{g} + \\X  via Scanner\n+        Scanner s = new Scanner(src.toString()).useDelimiter(\"\\\\b{g}\");\n+        for (String g : graphemes) {\n+            String next = null;\n+            if (!s.hasNext(p) || !(next = s.next(p)).equals(g)) {\n+                fail(\"Failed \\\\b{g} [\" + tc + \"] : \"\n+                    + \"expected: \" + g + \" - actual: \" + next);\n+            }\n+        }\n+        assertFalse(s.hasNext(p));\n+        \/\/ test \\b{g} without \\X via Scanner\n+        s = new Scanner(src.toString()).useDelimiter(\"\\\\b{g}\");\n+        for (String g : graphemes) {\n+            String next = null;\n+            if (!s.hasNext() || !(next = s.next()).equals(g)) {\n+                fail(\"Failed \\\\b{g} [\" + tc + \"] : \"\n+                    + \"expected: \" + g + \" - actual: \" + next);\n+            }\n+        }\n+        assertFalse(s.hasNext());\n+    }\n+\n+    @Test\n+    public static void graphemeSanity() {\n","filename":"test\/jdk\/java\/util\/regex\/RegExTest.java","additions":80,"deletions":83,"binary":false,"changes":163,"status":"modified"}]}