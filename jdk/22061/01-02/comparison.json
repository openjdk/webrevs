{"files":[{"patch":"@@ -476,1 +476,1 @@\n-template <typename TypeClass, typename Signed>\n+template <typename TypeClass, typename Unsigned>\n@@ -507,1 +507,1 @@\n-  Signed l = tl->get_con(); \/\/ Get divisor\n+  Unsigned l = static_cast<Unsigned>(tl->get_con()); \/\/ Get divisor\n@@ -513,4 +513,0 @@\n-  if (l == min_jint) {\n-    return nullptr;\n-  }\n-\n@@ -951,1 +947,1 @@\n-  return unsigned_div_ideal<TypeInt, jint>(phase, can_reshape, this);\n+  return unsigned_div_ideal<TypeInt, juint>(phase, can_reshape, this);\n@@ -987,1 +983,1 @@\n-  return unsigned_div_ideal<TypeLong, jlong>(phase, can_reshape, this);\n+  return unsigned_div_ideal<TypeLong, julong>(phase, can_reshape, this);\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -40,2 +40,2 @@\n-    @Run(test = {\"constant\", \"identity\", \"identityAgain\", \"identityThird\",\n-            \"retainDenominator\", \"divByPow2\" })\n+    @Run(test = {\"constant\", \"identity\", \"identityAgain\", \"identityAgainButBig\", \"identityThird\",\n+            \"retainDenominator\", \"divByPow2\", \"divByPow2Big\" })\n@@ -83,0 +83,2 @@\n+        Asserts.assertEQ(Integer.divideUnsigned(a, -2147483648), divByPow2Big(a));\n+        Asserts.assertEQ(Integer.divideUnsigned(a, Integer.divideUnsigned(-2129457054, -2129457054)), identityAgainButBig(a));\n@@ -107,0 +109,7 @@\n+    @Test\n+    @IR(failOn = {IRNode.DIV})\n+    \/\/ Checks x \/ (c \/ c) => x\n+    public int identityAgainButBig(int x) {\n+        return Integer.divideUnsigned(x, Integer.divideUnsigned(-2129457054, -2129457054));  \/\/ Integer.parseUnsignedInt(\"2165510242\") = -2129457054\n+    }\n+\n@@ -127,3 +136,1 @@\n-    @IR(counts = {\n-            IRNode.URSHIFT, \"1\",\n-    })\n+    @IR(counts = {IRNode.URSHIFT, \"1\"})\n@@ -134,0 +141,7 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.DIV})\n+    @IR(counts = {IRNode.URSHIFT, \"1\"})\n+    public int divByPow2Big(int x) {\n+        return Integer.divideUnsigned(x, -2147483648);  \/\/ -2147483648 = Integer.parseUnsignedInt(\"2147483648\")\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/UDivINodeIdealizationTests.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -40,2 +40,2 @@\n-    @Run(test = {\"constant\", \"identity\", \"identityAgain\", \"identityThird\",\n-            \"retainDenominator\", \"divByPow2\"})\n+    @Run(test = {\"constant\", \"identity\", \"identityAgain\", \"identityAgainButBig\", \"identityThird\",\n+            \"retainDenominator\", \"divByPow2\", \"divByPow2Big\"})\n@@ -83,0 +83,2 @@\n+        Asserts.assertEQ(Long.divideUnsigned(a, -9223372036854775808L), divByPow2Big(a));\n+        Asserts.assertEQ(Long.divideUnsigned(a, Long.divideUnsigned(-9214294468834361176L, -9214294468834361176L)), identityAgainButBig(a));\n@@ -107,0 +109,7 @@\n+    @Test\n+    @IR(failOn = {IRNode.DIV})\n+    \/\/ Checks x \/ (c \/ c) => x\n+    public long identityAgainButBig(long x) {\n+        return Long.divideUnsigned(x, Long.divideUnsigned(-9214294468834361176L, -9214294468834361176L));  \/\/ Long.parseUnsignedLong(\"9232449604875190440\") = -9214294468834361176L\n+    }\n+\n@@ -132,0 +141,7 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.DIV})\n+    @IR(counts = {IRNode.URSHIFT, \"1\"})\n+    public long divByPow2Big(long x) {\n+        return Long.divideUnsigned(x, -9223372036854775808L);  \/\/ -9223372036837998592 = Long.parseUnsignedLong(\"9223372036854775808\")\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/UDivLNodeIdealizationTests.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"}]}