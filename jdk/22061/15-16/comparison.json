{"files":[{"patch":"@@ -90,1 +90,1 @@\n-        Asserts.assertEQ(Integer.divideUnsigned(a, Integer.divideUnsigned(-2129457054, -2129457054)), identityAgainButBig(a));\n+        Asserts.assertEQ(Integer.divideUnsigned(a, Integer.divideUnsigned((1 << 20) + 1, (1 << 20) + 1)), identityAgainButBig(a));\n@@ -119,1 +119,2 @@\n-        return Integer.divideUnsigned(x, Integer.divideUnsigned(-2129457054, -2129457054));  \/\/ Integer.parseUnsignedInt(\"2165510242\") = -2129457054\n+        \/\/ (1 << 20) + 1 is an arbitrary integer that cannot be optimized by the power of 2 optimizations\n+        return Integer.divideUnsigned(x, Integer.divideUnsigned((1 << 20) + 1, (1 << 20) + 1));\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/UDivINodeIdealizationTests.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-        Asserts.assertEQ(Long.divideUnsigned(a, Long.divideUnsigned(-9214294468834361176L, -9214294468834361176L)), identityAgainButBig(a));\n+        Asserts.assertEQ(Long.divideUnsigned(a, Long.divideUnsigned((1L << 40) + 1, (1L << 40) + 1)), identityAgainButBig(a));\n@@ -120,1 +120,2 @@\n-        return Long.divideUnsigned(x, Long.divideUnsigned(-9214294468834361176L, -9214294468834361176L));  \/\/ Long.parseUnsignedLong(\"9232449604875190440\") = -9214294468834361176L\n+        \/\/ (1L << 40) + 1 is an arbitrary integer that cannot be optimized by the power of 2 optimizations\n+        return Long.divideUnsigned(x, Long.divideUnsigned((1L << 40) + 1, (1L << 40) + 1));\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/UDivLNodeIdealizationTests.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}