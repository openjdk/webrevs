{"files":[{"patch":"@@ -130,1 +130,0 @@\n-    \/\/ Hotspot should keep the division because it may cause a division by zero trap\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/DivINodeIdealizationTests.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -128,1 +128,0 @@\n-    \/\/ Hotspot should keep the division because it may cause a division by zero trap\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/DivLNodeIdealizationTests.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    @Run(test = {\"constant\", \"constantAgain\", \"powerOf2\", \"powerOf2Random\", \"powerOf2Minus1\", \n+    @Run(test = {\"constant\", \"constantAgain\", \"powerOf2\", \"powerOf2Random\", \"powerOf2Minus1\",\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ModINodeIdealizationTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-        Asserts.assertEQ(Integer.divideUnsigned(a, -2147483648), divByPow2Big(a));\n+        Asserts.assertEQ(Integer.divideUnsigned(a, Integer.MIN_VALUE), divByPow2Big(a));\n@@ -135,1 +135,0 @@\n-    \/\/ Hotspot should keep the division because it may cause a division by zero trap\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/UDivINodeIdealizationTests.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -89,1 +89,2 @@\n-        Asserts.assertEQ(Long.divideUnsigned(a, -9223372036854775808L), divByPow2Big(a));\n+        Asserts.assertEQ(Long.divideUnsigned(a, Long.MIN_VALUE), divByPow2Big(a));\n+        Asserts.assertEQ(Long.divideUnsigned(a, RANDOM_POWER_OF_2), divByPow2Random(a));\n@@ -135,1 +136,0 @@\n-    \/\/ Hotspot should keep the division because it may cause a division by zero trap\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/UDivLNodeIdealizationTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,1 +73,3 @@\n-        Asserts.assertEQ(Integer.remainderUnsigned(Integer.parseUnsignedInt(\"2147483648\"), 302032), reallyConstant());\n+        Asserts.assertEQ(Integer.remainderUnsigned(a, Integer.MIN_VALUE), powerOf2Big(a));\n+        Asserts.assertEQ(Integer.remainderUnsigned(a, RANDOM_POWER_OF_2), powerOf2Random(a));\n+        Asserts.assertEQ(Integer.remainderUnsigned(Integer.MIN_VALUE, 302032), reallyConstant());\n@@ -95,1 +97,1 @@\n-        return Integer.remainderUnsigned(-2147483648, 302032); \/\/ -2147483648 = Integer.parseUnsignedInt(\"2147483648\")\n+        return Integer.remainderUnsigned(Integer.MIN_VALUE, 302032); \/\/ -2147483648 = Integer.parseUnsignedInt(\"2147483648\")\n@@ -119,1 +121,1 @@\n-        return Integer.remainderUnsigned(x, -2147483648); \/\/ -2147483648 = Integer.parseUnsignedInt(\"2147483648\")\n+        return Integer.remainderUnsigned(x, Integer.MIN_VALUE);\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/UModINodeIdealizationTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -74,0 +74,2 @@\n+        Asserts.assertEQ(Long.remainderUnsigned(a, Long.MIN_VALUE), powerOf2Big(a));\n+        Asserts.assertEQ(Long.remainderUnsigned(a, RANDOM_POWER_OF_2), powerOf2Random(a));\n@@ -119,1 +121,1 @@\n-        return Long.remainderUnsigned(x, -9223372036854775808L); \/\/ -9223372036854775808 =  Long.parseUnsignedLong(\"9223372036854775808\")\n+        return Long.remainderUnsigned(x, Long.MIN_VALUE);\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/UModLNodeIdealizationTests.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}