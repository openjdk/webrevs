{"files":[{"patch":"@@ -492,0 +492,4 @@\n+#ifdef LINUX\n+  st->print_cr(\"#   This process has exceeded the maximum number of memory mappings (check below\");\n+  st->print_cr(\"#     for `\/proc\/sys\/vm\/max_map_count` and `Total number of mappings`)\");\n+#endif\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @library \/test\/lib\n@@ -37,0 +38,1 @@\n+ * @library \/test\/lib\n@@ -43,0 +45,4 @@\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n@@ -64,1 +70,25 @@\n-  public static void main(String[] args) {\n+  public static void main(String[] args) throws Exception {\n+    if (args.length == 0) {\n+      \/\/ Called from the driver process so exec a new JVM on Linux.\n+      if (Platform.isLinux()) {\n+        \/\/ On Linux this test sometimes hits the limit for the maximum number of memory mappings,\n+        \/\/ which leads to various other failure modes. Run this test with a limit on how many\n+        \/\/ threads the process is allowed to create, so we hit that limit first.\n+\n+        final String ULIMIT_CMD = \"ulimit -u 4096\";\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(ThreadCountLimit.class.getName());\n+        String java_cmd = ProcessTools.getCommandLine(pb);\n+        \/\/ Relaunch the test with args.length > 0, and the ulimit set\n+        ProcessTools.executeCommand(\"bash\", \"-c\", ULIMIT_CMD + \" && \" + java_cmd + \" dummy\")\n+                    .shouldHaveExitValue(0);\n+      } else {\n+        \/\/ Not Linux so run directly.\n+        test();\n+      }\n+    } else {\n+      \/\/ This is the exec'd process so run directly.\n+      test();\n+    }\n+  }\n+\n+  static void test() {\n@@ -68,1 +98,0 @@\n-    boolean reachedTimeLimit = false;\n@@ -70,2 +99,0 @@\n-    int countAtTimeLimit = -1;\n-    int countAtNativeOOM = -1;\n@@ -78,1 +105,1 @@\n-    int count = 1;\n+    int count = 0;\n@@ -89,2 +116,2 @@\n-          reachedTimeLimit = true;\n-          countAtTimeLimit = count;\n+          \/\/ Windows always gets here, but we also get here if\n+          \/\/ ulimit is set high enough.\n@@ -96,1 +123,1 @@\n-        \/\/ Linux, macOS path\n+        \/\/ Linux, macOS path if we hit ulimit\n@@ -98,1 +125,0 @@\n-        countAtNativeOOM = count;\n@@ -116,7 +142,6 @@\n-    if (reachedTimeLimit) {\n-       \/\/ Windows path or a system with very large ulimit\n-       System.out.println(\"INFO: reached the time limit \" + TIME_LIMIT_MS +\n-                          \" ms, with \" + countAtTimeLimit + \" threads created\");\n-    } else if (reachedNativeOOM) {\n-       System.out.println(\"INFO: reached this process thread count limit with \" +\n-                           countAtNativeOOM + \" threads created\");\n+    if (reachedNativeOOM) {\n+      System.out.println(\"INFO: reached this process thread count limit with \" +\n+                         count + \" threads created\");\n+    } else {\n+      System.out.println(\"INFO: reached the time limit \" + TIME_LIMIT_MS +\n+                         \" ms, with \" + count + \" threads created\");\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/ThreadCountLimit.java","additions":41,"deletions":16,"binary":false,"changes":57,"status":"modified"}]}