{"files":[{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2024 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -69,1 +69,7 @@\n-    \/\/ pc could refer to a native address outside the code cache even though the thread isInJava.\n+    if (!CodeCache::contains(pc)) {\n+      \/\/ The thread `isInJava` but its pc is not in the CodeCache. This is uncommon. It\n+      \/\/ can occur, for instance, if we're trying to sample the stack while actually\n+      \/\/ handling a SIGTRAP (e.g. because of a range check). It is not safe to do that.\n+      return false;\n+    }\n+\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/javaThread_aix_ppc.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2024 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -68,1 +68,7 @@\n-    \/\/ pc could refer to a native address outside the code cache even though the thread isInJava.\n+    if (!CodeCache::contains(pc)) {\n+      \/\/ The thread `isInJava` but its pc is not in the CodeCache. This is uncommon. It\n+      \/\/ can occur, for instance, if we're trying to sample the stack while actually\n+      \/\/ handling a SIGTRAP (e.g. because of a range check). It is not safe to do that.\n+      return false;\n+    }\n+\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/javaThread_linux_ppc.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}