{"files":[{"patch":"@@ -392,0 +392,4 @@\n+            if (!isString && !Character.isBmpCodePoint(getCodepoint())) {\n+                lexError(pos, Errors.IllegalCharLiteralMultipleSurrogates);\n+            }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavaTokenizer.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -697,0 +697,3 @@\n+compiler.err.illegal.char.literal.multiple.surrogates=\\\n+    character literal contains more than one UTF-16 code unit\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.illegal.char.literal.multiple.surrogates\n+\n+class IllegalCharLiteralMultipleSurrogates {\n+    char c = '\\uD83D\\uDE0A';\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/IllegalCharLiteralMultipleSurrogates.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -35,0 +37,1 @@\n+import javax.tools.DiagnosticListener;\n@@ -104,0 +107,2 @@\n+            new TestTuple(ERROR,         \"'\\uD83D\\uDE0A'\",\n+                          List.of(\"compiler.err.illegal.char.literal.multiple.surrogates\")),\n@@ -110,0 +115,1 @@\n+        List<String> expectedErrors;\n@@ -111,1 +117,1 @@\n-        TestTuple(TokenKind kind, String input, String expected) {\n+        TestTuple(TokenKind kind, String input, String expected, List<String> expectedErrors) {\n@@ -115,0 +121,9 @@\n+            this.expectedErrors = expectedErrors;\n+        }\n+\n+        TestTuple(TokenKind kind, String input, List<String> expectedErrors) {\n+            this(kind, input, input, expectedErrors);\n+        }\n+\n+        TestTuple(TokenKind kind, String input, String expected) {\n+            this(kind, input, expected, null);\n@@ -124,0 +139,6 @@\n+        List<String> errors = new ArrayList();\n+\n+        if (test.expectedErrors != null) {\n+            ctx.put(DiagnosticListener.class, (DiagnosticListener) d -> errors.add(d.getCode()));\n+        }\n+\n@@ -152,0 +173,4 @@\n+\n+        if (test.expectedErrors != null && !test.expectedErrors.equals(errors)) {\n+            throw new AssertionError(\"Unexpected errors: \" + errors);\n+        }\n","filename":"test\/langtools\/tools\/javac\/lexer\/JavaLexerTest.java","additions":27,"deletions":2,"binary":false,"changes":29,"status":"modified"}]}