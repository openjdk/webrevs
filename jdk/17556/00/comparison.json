{"files":[{"patch":"@@ -649,0 +649,2 @@\n+            } else if (e.posixPerms == -1) {\n+                e.posixPerms = ZipUtils.permsToFlags(perms);\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n- * @bug 8213031 8273935\n+ * @bug 8213031 8273935 8324635\n@@ -722,1 +722,1 @@\n-     * Verify that calling Files.setPosixPermissions with the current\n+     * Verify that calling Files.setPosixFilePermissions with the current\n@@ -736,0 +736,27 @@\n+    \/**\n+     * Verify that calling Files.setPosixFilePermissions on an MS-DOS entry\n+     * results in only the expected permission bits being set\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void setPermissionsShouldConvertToUnix() throws IOException {\n+        \/\/ The default environment creates MS-DOS entries, with zero 'external file attributes'\n+        createEmptyZipFile(ZIP_FILE, ENV_DEFAULT);\n+        try (FileSystem fs = FileSystems.newFileSystem(ZIP_FILE, ENV_DEFAULT)) {\n+            Path path = fs.getPath(\"hello.txt\");\n+            Files.createFile(path);\n+        }\n+\n+        \/\/ Sanity check that all 'external file attributes' bits are zero\n+        verifyExternalFileAttribute(Files.readAllBytes(ZIP_FILE), \"0\");\n+\n+        \/\/ Convert to a UNIX entry by calling Files.setPosixFilePermissions\n+        try (FileSystem fs = FileSystems.newFileSystem(ZIP_FILE, ENV_POSIX)) {\n+            Path path = fs.getPath(\"hello.txt\");\n+            Files.setPosixFilePermissions(path, EnumSet.of(OWNER_READ));\n+        }\n+        \/\/ The first of the nine trailing permission bits should be set\n+        verifyExternalFileAttribute(Files.readAllBytes(ZIP_FILE), \"100000000\");\n+    }\n+\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/TestPosix.java","additions":29,"deletions":2,"binary":false,"changes":31,"status":"modified"}]}