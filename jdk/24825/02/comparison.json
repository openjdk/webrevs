{"files":[{"patch":"@@ -1260,40 +1260,0 @@\n-  objArrayHandle buf(THREAD, (objArrayOop) JNIHandles::resolve(buf_jh));\n-  if (start < 0) {\n-    for (int pseudo_index = -4; pseudo_index < 0; pseudo_index++) {\n-      if (start == pseudo_index) {\n-        if (start >= end || 0 > pos || pos >= buf->length())  break;\n-        oop pseudo_arg = nullptr;\n-        switch (pseudo_index) {\n-        case -4:  \/\/ bootstrap method\n-          {\n-            int bsm_index = caller->constants()->bootstrap_method_ref_index_at(bss_index_in_pool);\n-            pseudo_arg = caller->constants()->resolve_possibly_cached_constant_at(bsm_index, CHECK);\n-            break;\n-          }\n-        case -3:  \/\/ name\n-          {\n-            Symbol* name = caller->constants()->name_ref_at(bss_index_in_pool, Bytecodes::_invokedynamic);\n-            Handle str = java_lang_String::create_from_symbol(name, CHECK);\n-            pseudo_arg = str();\n-            break;\n-          }\n-        case -2:  \/\/ type\n-          {\n-            Symbol* type = caller->constants()->signature_ref_at(bss_index_in_pool, Bytecodes::_invokedynamic);\n-            Handle th;\n-            if (type->char_at(0) == JVM_SIGNATURE_FUNC) {\n-              th = SystemDictionary::find_method_handle_type(type, caller, CHECK);\n-            } else {\n-              th = SystemDictionary::find_java_mirror_for_type(type, caller, SignatureStream::NCDFError, CHECK);\n-            }\n-            pseudo_arg = th();\n-            break;\n-          }\n-        case -1:  \/\/ argument count\n-          {\n-            int argc = caller->constants()->bootstrap_argument_count_at(bss_index_in_pool);\n-            jvalue argc_value; argc_value.i = (jint)argc;\n-            pseudo_arg = java_lang_boxing_object::create(T_INT, &argc_value, CHECK);\n-            break;\n-          }\n-        }\n@@ -1301,7 +1261,2 @@\n-        \/\/ Store the pseudo-argument, and advance the pointers.\n-        buf->obj_at_put(pos++, pseudo_arg);\n-        ++start;\n-      }\n-    }\n-    \/\/ When we are done with this there may be regular arguments to process too.\n-  }\n+  objArrayHandle buf(THREAD, (objArrayOop)JNIHandles::resolve(buf_jh));\n+\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":2,"deletions":47,"binary":false,"changes":49,"status":"modified"}]}