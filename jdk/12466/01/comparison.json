{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -376,1 +376,1 @@\n-                int privateBits;\n+                int privateBits = 0;\n@@ -381,0 +381,1 @@\n+                        privateBits = getDefDHPrivateExpSize(dhParams);\n@@ -385,1 +386,0 @@\n-                    privateBits = 0;\n@@ -389,4 +389,4 @@\n-                }\n-                if (privateBits <= 0) {\n-                    \/\/ XXX find better defaults\n-                    privateBits = (keySize >= 1024) ? 768 : 512;\n+                    if (privateBits < 0) {\n+                        \/\/ invalid, override with JDK defaults\n+                        privateBits = getDefDHPrivateExpSize(dhParams);\n+                    }\n@@ -398,3 +398,5 @@\n-                privateKeyTemplate = new CK_ATTRIBUTE[]{\n-                        new CK_ATTRIBUTE(CKA_VALUE_BITS, privateBits),\n-                };\n+                privateKeyTemplate = (privateBits != 0 ?\n+                        new CK_ATTRIBUTE[]{\n+                            new CK_ATTRIBUTE(CKA_VALUE_BITS, privateBits),\n+                        } :\n+                        new CK_ATTRIBUTE[]{});\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11KeyPairGenerator.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.Provider;\n+import java.security.PrivateKey;\n+import javax.crypto.spec.DHParameterSpec;\n+import javax.crypto.interfaces.DHPrivateKey;\n+import sun.security.util.SecurityProviderConstants;\n+import sun.security.provider.ParameterCache;\n+\n+\/**\n+ * @test\n+ * @bug 8295425\n+ * @modules java.base\/sun.security.provider java.base\/sun.security.util\n+ * @library \/test\/lib ..\n+ * @run main TestDefaultDHPrivateExpSize\n+ * @summary This test verifies the DH private exponent size for SunPKCS11\n+ *         provider.\n+ *\/\n+\n+public class TestDefaultDHPrivateExpSize extends PKCS11Test {\n+\n+    @Override\n+    public void main(Provider p) throws Exception {\n+        System.out.println(\"Testing \" + p.getName());\n+\n+        if (p.getService(\"KeyPairGenerator\", \"DH\") == null) {\n+            System.out.println(\"Skip, no support for DH KeyPairGenerator\");\n+            return;\n+        }\n+\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"DH\", p);\n+        \/\/ try common DH key sizes with built-in primes\n+        int[] cachedSizes = { 2048, 3072, 4096, 6144, 8192 };\n+        for (int ks : cachedSizes) {\n+            \/\/ use keysize which uses JDK default parameters w\/ JDK\n+            \/\/ default lSize\n+            kpg.initialize(ks);\n+            int expectedL = SecurityProviderConstants.getDefDHPrivateExpSize\n+                    (ParameterCache.getCachedDHParameterSpec(ks));\n+            System.out.println(\"Test against built-in DH \" + ks +\n+                    \"-bit parameters, expectedL = \" + expectedL);\n+            DHParameterSpec spec = generateAndCheck(kpg, ks, expectedL);\n+\n+            \/\/ use custom DH parameters w\/o lSize\n+            DHParameterSpec spec2 = new DHParameterSpec(spec.getP(),\n+                    spec.getG());\n+            kpg.initialize(spec2);\n+            System.out.println(\"Test against user DH \" + ks +\n+                    \"-bit parameters, expectedL = \" + spec2.getL());\n+\n+            generateAndCheck(kpg, ks, spec2.getL());\n+\n+            \/\/ use custom DH parameters w\/ lSize\n+            expectedL += 2;\n+            spec2 = new DHParameterSpec(spec.getP(), spec.getG(), expectedL);\n+            kpg.initialize(spec2);\n+            System.out.println(\"Test against user DH \" + ks +\n+                    \"-bit parameters, expectedL = \" + spec2.getL());\n+            generateAndCheck(kpg, ks, expectedL);\n+        }\n+    }\n+\n+    \/\/ initialize the specified 'kpg' with 'initParam', then check\n+    \/\/ the parameters associated with the generated key against 'initParam'\n+    \/\/ and return the actual private exponent length.\n+    private static DHParameterSpec generateAndCheck(KeyPairGenerator kpg,\n+            int expKeySize, int expL) {\n+\n+        DHPrivateKey dhPriv = (DHPrivateKey) kpg.generateKeyPair().getPrivate();\n+        DHParameterSpec generated = dhPriv.getParams();\n+        \/\/ check the params associated with the key as that's what we\n+        \/\/ have control over\n+        if ((generated.getP().bitLength() != expKeySize) ||\n+                generated.getL()!= expL) {\n+            new RuntimeException(\"Error: size check failed, got \" +\n+                    generated.getP().bitLength() + \" and \" + generated.getL());\n+        }\n+\n+        \/\/ Known NSS Issue\/limitation: NSS ignores the supplied L value when\n+        \/\/ generating the DH private key\n+        int actualL = dhPriv.getX().bitLength();\n+        System.out.println(\"INFO: actual L = \" + actualL);\n+        \/*\n+        if (expLSize != 0 && actualL != expLSize) {\n+            throw new RuntimeException(\"ERROR: actual L mismatches, got \"\n+                    + actualL + \" vs expect \" + expLSize);\n+        }\n+        *\/\n+        return generated;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        main(new TestDefaultDHPrivateExpSize(), args);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyPairGenerator\/TestDefaultDHPrivateExpSize.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"}]}