{"files":[{"patch":"@@ -2306,10 +2306,0 @@\n-  void generate_aescrypt_round(const VectorRegister res, const VectorRegister vzero,\n-                               const VectorRegister vtmp1, const VectorRegister vtmp2,\n-                               const VectorRegister vtmp3, const VectorRegister vtmp4) {\n-    __ vxor_vv(res, res, vtmp1);\n-    __ vaesem_vv(res, vtmp2);\n-    __ vaesem_vv(res, vtmp3);\n-    __ vaesem_vv(res, vtmp4);\n-    __ vaesem_vv(res, vzero);\n-  }\n-\n@@ -2329,1 +2319,1 @@\n-    Label L_doLast;\n+    Label L_do44, L_do52;\n@@ -2336,5 +2326,5 @@\n-    const VectorRegister res   = v16;\n-    const VectorRegister vtmp1 = v4;\n-    const VectorRegister vtmp2 = v5;\n-    const VectorRegister vtmp3 = v6;\n-    const VectorRegister vtmp4 = v7;\n+    const VectorRegister res   = v19;\n+    VectorRegister working_vregs[] = {\n+      v4, v5, v6, v7, v8, v9, v10, v11,\n+      v12, v13, v14, v15, v16, v17, v18\n+    };\n@@ -2351,14 +2341,0 @@\n-    __ vmv_v_x(vzero, zr);\n-    \/\/ Note: the following function performs key += 4*16\n-    generate_vle32_pack4(key, vtmp1, vtmp2, vtmp3, vtmp4);\n-    generate_rev8_pack4(vtmp1, vtmp2, vtmp3, vtmp4);\n-    generate_aescrypt_round(res, vzero, vtmp1, vtmp2, vtmp3, vtmp4);\n-\n-    \/\/ Note: the following function performs key += 4*16\n-    generate_vle32_pack4(key, vtmp1, vtmp2, vtmp3, vtmp4);\n-    generate_rev8_pack4(vtmp1, vtmp2, vtmp3, vtmp4);\n-    generate_aescrypt_round(res, vzero, vtmp1, vtmp2, vtmp3, vtmp4);\n-\n-    \/\/ Note: the following function performs key += 2*16\n-    generate_vle32_pack2(key, vtmp1, vtmp2);\n-    generate_rev8_pack2(vtmp1, vtmp2);\n@@ -2366,6 +2342,10 @@\n-    __ mv(t2, 44);\n-    __ beq(keylen, t2, L_doLast);\n-\n-    __ vxor_vv(res, res, vtmp1);\n-    __ vaesem_vv(res, vtmp2);\n-    __ vaesem_vv(res, vzero);\n+    __ mv(t2, 52);\n+    __ blt(keylen, t2, L_do44);\n+    __ beq(keylen, t2, L_do52);\n+    \/\/ Else we fallthrough to the biggest case (256-bit key size)\n+\n+    for (int i = 0; i < 15; i++) {\n+      __ vle32_v(working_vregs[i], key);\n+      __ vrev8_v(working_vregs[i], working_vregs[i]);\n+      __ addi(key, key, 16);\n+    }\n@@ -2373,3 +2353,5 @@\n-    \/\/ Note: the following function performs key += 2*16\n-    generate_vle32_pack2(key, vtmp1, vtmp2);\n-    generate_rev8_pack2(vtmp1, vtmp2);\n+    __ vxor_vv(res, res, working_vregs[0]);\n+    for (int i = 1; i < 14; i++) {\n+      __ vaesem_vv(res, working_vregs[i]);\n+    }\n+    __ vaesef_vv(res, working_vregs[14]);\n@@ -2377,2 +2359,4 @@\n-    __ mv(t2, 52);\n-    __ beq(keylen, t2, L_doLast);\n+    __ vse32_v(res, to);\n+    __ mv(c_rarg0, 0);\n+    __ leave();\n+    __ ret();\n@@ -2380,3 +2364,6 @@\n-    __ vxor_vv(res, res, vtmp1);\n-    __ vaesem_vv(res, vtmp2);\n-    __ vaesem_vv(res, vzero);\n+  __ bind(L_do52);\n+    for (int i = 0; i < 13; i++) {\n+      __ vle32_v(working_vregs[i], key);\n+      __ vrev8_v(working_vregs[i], working_vregs[i]);\n+      __ addi(key, key, 16);\n+    }\n@@ -2384,3 +2371,5 @@\n-    \/\/ Note: the following function performs key += 2*16\n-    generate_vle32_pack2(key, vtmp1, vtmp2);\n-    generate_rev8_pack2(vtmp1, vtmp2);\n+    __ vxor_vv(res, res, working_vregs[0]);\n+    for (int i = 1; i < 12; i++) {\n+      __ vaesem_vv(res, working_vregs[i]);\n+    }\n+    __ vaesef_vv(res, working_vregs[12]);\n@@ -2388,1 +2377,4 @@\n-    __ bind(L_doLast);\n+    __ vse32_v(res, to);\n+    __ mv(c_rarg0, 0);\n+    __ leave();\n+    __ ret();\n@@ -2390,2 +2382,6 @@\n-    __ vle32_v(vtmp3, key);\n-    __ vrev8_v(vtmp3, vtmp3);\n+  __ bind(L_do44);\n+    for (int i = 0; i < 11; i++) {\n+      __ vle32_v(working_vregs[i], key);\n+      __ vrev8_v(working_vregs[i], working_vregs[i]);\n+      __ addi(key, key, 16);\n+    }\n@@ -2393,3 +2389,5 @@\n-    __ vxor_vv(res, res, vtmp1);\n-    __ vaesem_vv(res, vtmp2);\n-    __ vaesef_vv(res, vtmp3);\n+    __ vxor_vv(res, res, working_vregs[0]);\n+    for (int i = 1; i < 10; i++) {\n+      __ vaesem_vv(res, working_vregs[i]);\n+    }\n+    __ vaesef_vv(res, working_vregs[10]);\n@@ -2399,1 +2397,0 @@\n-\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":51,"deletions":54,"binary":false,"changes":105,"status":"modified"}]}