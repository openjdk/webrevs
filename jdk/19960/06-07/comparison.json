{"files":[{"patch":"@@ -2366,3 +2366,2 @@\n-  void generate_aes_decrypt(const VectorRegister &res, const VectorRegister &vzero,\n-    const VectorRegister &vtemp, VectorRegister *working_vregs, int reg_number) {\n-    assert(reg_number <= 14, \"reg_number should be less than or equal to working_vregs size\");\n+  void generate_aes_decrypt(const VectorRegister &res, VectorRegister *working_vregs, int reg_number) {\n+    assert(reg_number <= 15, \"reg_number should be less than or equal to working_vregs size\");\n@@ -2370,4 +2369,0 @@\n-    for (int i = 0; i < reg_number; i++) {\n-      __ vxor_vv(res, res, working_vregs[i]);\n-      __ vaesdm_vv(res, vzero);\n-    }\n@@ -2375,1 +2370,4 @@\n-    __ vaesdf_vv(res, vtemp);\n+    for (int i = reg_number - 1; i > 0; i--) {\n+      __ vaesdm_vv(res, working_vregs[i]);\n+    }\n+    __ vaesdf_vv(res, working_vregs[0]);\n@@ -2400,1 +2398,1 @@\n-      v12, v13, v14, v15, v16, v17\n+      v12, v13, v14, v15, v16, v17, v18\n@@ -2402,3 +2400,1 @@\n-    const VectorRegister res   = v18;\n-    const VectorRegister vzero = v19;\n-    const VectorRegister vtemp = v20;\n+    const VectorRegister res   = v19;\n@@ -2413,4 +2409,0 @@\n-    __ vmv_v_x(vzero, zr);\n-    __ vle32_v(vtemp, key);\n-    __ addi(key, key, 16);\n-    __ vrev8_v(vtemp, vtemp);\n@@ -2423,4 +2415,3 @@\n-    \/\/ Note: the following function performs key += 14*16\n-    generate_aes_loadkeys(key, working_vregs, 14);\n-    generate_aes_decrypt(res, vzero, vtemp, working_vregs, 13);\n-\n+    \/\/ Note: the following function performs key += 15*16\n+    generate_aes_loadkeys(key, working_vregs, 15);\n+    generate_aes_decrypt(res, working_vregs, 14);\n@@ -2433,4 +2424,3 @@\n-    \/\/ Note: the following function performs key += 12*16\n-    generate_aes_loadkeys(key, working_vregs, 12);\n-    generate_aes_decrypt(res, vzero, vtemp, working_vregs, 11);\n-\n+    \/\/ Note: the following function performs key += 13*16\n+    generate_aes_loadkeys(key, working_vregs, 13);\n+    generate_aes_decrypt(res, working_vregs, 12);\n@@ -2443,4 +2433,3 @@\n-    \/\/ Note: the following function performs key += 10*16\n-    generate_aes_loadkeys(key, working_vregs, 10);\n-    generate_aes_decrypt(res, vzero, vtemp, working_vregs, 9);\n-\n+    \/\/ Note: the following function performs key += 11*16\n+    generate_aes_loadkeys(key, working_vregs, 11);\n+    generate_aes_decrypt(res, working_vregs, 10);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":17,"deletions":28,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -7225,1 +7225,1 @@\n-#if defined(PPC64) || defined(S390)\n+#if defined(PPC64) || defined(S390) || defined(RISCV)\n@@ -7230,0 +7230,1 @@\n+  \/\/ The RISC-V stubs of encryption and decryption use the same round keys (sessionK[0]).\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}