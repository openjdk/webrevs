{"files":[{"patch":"@@ -117,0 +117,4 @@\n+    private static final String OBJECT_HASH_CODE_SIG;\n+    private static final String OBJECT_EQUALS_SIG;\n+    private static final String OBJECT_TO_STRING_SIG;\n+\n@@ -120,0 +124,1 @@\n+            OBJECT_HASH_CODE_SIG = OBJECT_HASH_CODE_METHOD.toShortSignature();\n@@ -121,0 +126,1 @@\n+            OBJECT_EQUALS_SIG = OBJECT_EQUALS_METHOD.toShortSignature();\n@@ -122,0 +128,1 @@\n+            OBJECT_TO_STRING_SIG = OBJECT_TO_STRING_METHOD.toShortSignature();\n@@ -449,3 +456,3 @@\n-        addProxyMethod(new ProxyMethod(OBJECT_HASH_CODE_METHOD, \"m0\"));\n-        addProxyMethod(new ProxyMethod(OBJECT_EQUALS_METHOD, \"m1\"));\n-        addProxyMethod(new ProxyMethod(OBJECT_TO_STRING_METHOD, \"m2\"));\n+        addProxyMethod(new ProxyMethod(OBJECT_HASH_CODE_METHOD, OBJECT_HASH_CODE_SIG, \"m0\"));\n+        addProxyMethod(new ProxyMethod(OBJECT_EQUALS_METHOD, OBJECT_EQUALS_SIG, \"m1\"));\n+        addProxyMethod(new ProxyMethod(OBJECT_TO_STRING_METHOD, OBJECT_TO_STRING_SIG, \"m2\"));\n@@ -529,1 +536,1 @@\n-        sigmethods.add(new ProxyMethod(m, sig, m.getSharedParameterTypes(), returnType,\n+        sigmethods.add(new ProxyMethod(m, sig, returnType,\n@@ -620,1 +627,1 @@\n-                            cob.aload(cob.parameterSlot(0))\n+                            cob.aload(0)\n@@ -624,1 +631,1 @@\n-                               .aload(cob.parameterSlot(0))\n+                               .aload(0)\n@@ -632,1 +639,1 @@\n-                               .aload(cob.parameterSlot(0))\n+                               .aload(0)\n@@ -653,1 +660,0 @@\n-        private final Class<?>[] parameterTypes;\n@@ -659,1 +665,1 @@\n-        private ProxyMethod(Method method, String sig, Class<?>[] parameterTypes,\n+        private ProxyMethod(Method method, String sig,\n@@ -664,1 +670,0 @@\n-            this.parameterTypes = parameterTypes;\n@@ -673,0 +678,4 @@\n+        private Class<?>[] parameterTypes() {\n+            return method.getSharedParameterTypes();\n+        }\n+\n@@ -678,3 +687,2 @@\n-        private ProxyMethod(Method method, String methodFieldName) {\n-            this(method, method.toShortSignature(),\n-                 method.getSharedParameterTypes(), method.getReturnType(),\n+        private ProxyMethod(Method method, String sig, String methodFieldName) {\n+            this(method, sig, method.getReturnType(),\n@@ -688,1 +696,1 @@\n-            var desc = methodTypeDesc(returnType, parameterTypes);\n+            var desc = methodTypeDesc(returnType, parameterTypes());\n@@ -691,1 +699,0 @@\n-            var catchList = computeUniqueCatchList(exceptionTypes);\n@@ -695,0 +702,1 @@\n+                        var catchList = computeUniqueCatchList(exceptionTypes);\n@@ -699,0 +707,1 @@\n+                        Class<?>[] parameterTypes = parameterTypes();\n@@ -787,0 +796,1 @@\n+            Class<?>[] parameterTypes = parameterTypes();\n@@ -820,4 +830,8 @@\n-            cob.ldc(cl.getName())\n-               .iconst_0() \/\/ false\n-               .aload(0)\/\/ classLoader\n-               .invokestatic(classForName);\n+            if (cl == Object.class) {\n+                cob.ldc(objectCE);\n+            } else {\n+                cob.ldc(cl.getName())\n+                        .iconst_0() \/\/ false\n+                        .aload(0)\/\/ classLoader\n+                        .invokestatic(classForName);\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":33,"deletions":19,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -1,162 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.bench.java.lang.reflect.proxy;\n-\n-import java.util.List;\n-\n-import org.openjdk.jmh.annotations.Benchmark;\n-import org.openjdk.jmh.annotations.BenchmarkMode;\n-import org.openjdk.jmh.annotations.CompilerControl;\n-import org.openjdk.jmh.annotations.Fork;\n-import org.openjdk.jmh.annotations.Measurement;\n-import org.openjdk.jmh.annotations.Mode;\n-import org.openjdk.jmh.annotations.OutputTimeUnit;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.Setup;\n-import org.openjdk.jmh.annotations.State;\n-import org.openjdk.jmh.annotations.Warmup;\n-\n-import org.openjdk.jmh.infra.Blackhole;\n-\n-import java.lang.reflect.InvocationHandler;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n-import java.util.concurrent.TimeUnit;\n-\n-\/**\n- * Benchmark measuring java.lang.reflect.ProxyGenerator.generateProxyClass.\n- * It bypasses the cache of proxies to measure the time to construct a proxy.\n- *\/\n-@Warmup(iterations = 5)\n-@Measurement(iterations = 10)\n-@Fork(value = 1)\n-@BenchmarkMode(Mode.AverageTime)\n-@OutputTimeUnit(TimeUnit.NANOSECONDS)\n-@State(Scope.Thread)\n-public class ProxyPerf {\n-\n-    \/**\n-     * Sample results from a Dell T7610.\n-     * Benchmark                        Mode  Cnt      Score      Error  Units\n-     *      ProxyPerf.genIntf_1              avgt   10  35325.428 +\/-  780.459  ns\/op\n-     *      ProxyPerf.genIntf_1_V49          avgt   10  34309.423 +\/-  727.188  ns\/op\n-     *      ProxyPerf.genStringsIntf_3       avgt   10  46600.366 +\/-  663.812  ns\/op\n-     *      ProxyPerf.genStringsIntf_3_V49   avgt   10  45911.817 +\/- 1598.536  ns\/op\n-     *      ProxyPerf.genZeroParams          avgt   10  33245.048 +\/-  437.988  ns\/op\n-     *      ProxyPerf.genZeroParams_V49      avgt   10  32954.254 +\/- 1041.932  ns\/op\n-     *      ProxyPerf.getPrimsIntf_2         avgt   10  43987.819 +\/-  837.443  ns\/op\n-     *      ProxyPerf.getPrimsIntf_2_V49     avgt   10  42863.462 +\/- 1193.480  ns\/op\n-     *\/\n-\n-    public interface Intf_1 {\n-        public Object mL(Object o);\n-    }\n-\n-    public interface Intf_2 {\n-        public int m1I(int i);\n-        public long m2IJ(int i, long l);\n-    }\n-\n-    public interface Intf_3 {\n-        public void mString(String s1);\n-        public String m2String(String s1);\n-        public String m2String(String s1, String s2);\n-    }\n-\n-    private InvocationHandler handler;\n-    private ClassLoader classloader;\n-    private Method proxyGen;\n-    private Method proxyGenV49;\n-\n-    @Setup\n-    public void setup() {\n-        try {\n-            handler = (Object proxy, Method method, Object[] args) -> null;\n-            classloader = ClassLoader.getSystemClassLoader();\n-            Class<?> proxyGenClass = Class.forName(\"java.lang.reflect.ProxyGenerator\");\n-            proxyGen = proxyGenClass.getDeclaredMethod(\"generateProxyClass\",\n-                    ClassLoader.class, String.class, java.util.List.class, int.class);\n-            proxyGen.setAccessible(true);\n-\n-            \/\/ Init access to the old Proxy generator\n-            Class<?> proxyGenClassV49 = Class.forName(\"java.lang.reflect.ProxyGenerator_v49\");\n-            proxyGenV49 = proxyGenClassV49.getDeclaredMethod(\"generateProxyClass\",\n-                    String.class, java.util.List.class, int.class);\n-            proxyGenV49.setAccessible(true);\n-\n-        } catch (Exception ex) {\n-            ex.printStackTrace();\n-            throw new RuntimeException(\"ProxyClass setup fails\", ex);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void genZeroParams(Blackhole bh) throws Exception {\n-        List<Class<?>> interfaces = List.of(Runnable.class);\n-        bh.consume(proxyGen.invoke(null, classloader, \"ProxyImpl\", interfaces, 1));\n-    }\n-\n-    @Benchmark\n-    public void genIntf_1(Blackhole bh) throws Exception {\n-        List<Class<?>> interfaces = List.of(Intf_1.class);\n-        bh.consume(proxyGen.invoke(null, classloader, \"ProxyImpl\", interfaces, 1));\n-    }\n-\n-    @Benchmark\n-    public void getPrimsIntf_2(Blackhole bh) throws Exception {\n-        List<Class<?>> interfaces = List.of(Intf_2.class);\n-        bh.consume(proxyGen.invoke(null, classloader, \"ProxyImpl\", interfaces, 1));\n-    }\n-    @Benchmark\n-    public void genStringsIntf_3(Blackhole bh) throws Exception {\n-        List<Class<?>> interfaces = List.of(Intf_3.class);\n-        bh.consume(proxyGen.invoke(null, classloader, \"ProxyImpl\", interfaces, 1));\n-    }\n-\n-    \/\/ Generate using the V49inal generator for comparison\n-\n-    @Benchmark\n-    public void genZeroParams_V49(Blackhole bh) throws Exception {\n-        List<Class<?>> interfaces = List.of(Runnable.class);\n-        bh.consume(proxyGenV49.invoke(null, \"ProxyImpl\", interfaces, 1));\n-    }\n-\n-    @Benchmark\n-    public void genIntf_1_V49(Blackhole bh) throws Exception {\n-        List<Class<?>> interfaces = List.of(Intf_1.class);\n-        bh.consume(proxyGenV49.invoke(null, \"ProxyImpl\", interfaces, 1));\n-    }\n-\n-    @Benchmark\n-    public void getPrimsIntf_2_V49(Blackhole bh) throws Exception {\n-        List<Class<?>> interfaces = List.of(Intf_2.class);\n-        bh.consume(proxyGenV49.invoke(null, \"ProxyImpl\", interfaces, 1));\n-    }\n-    @Benchmark\n-    public void genStringsIntf_3_V49(Blackhole bh) throws Exception {\n-        List<Class<?>> interfaces = List.of(Intf_3.class);\n-        bh.consume(proxyGenV49.invoke(null, \"ProxyImpl\", interfaces, 1));\n-    }\n-\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/reflect\/Proxy\/ProxyPerf.java","additions":0,"deletions":162,"binary":false,"changes":162,"status":"deleted"},{"patch":"","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/reflect\/proxy\/ProxyBench.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/reflect\/Proxy\/ProxyBench.java","status":"renamed"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang.reflect.proxy;\n+\n+import java.util.List;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Method;\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Benchmark measuring java.lang.reflect.ProxyGenerator.generateProxyClass.\n+ * It bypasses the cache of proxies to measure the time to construct a proxy.\n+ *\/\n+@Warmup(iterations = 5, time = 2)\n+@Measurement(iterations = 5, time = 2)\n+@Fork(value = 1, jvmArgsPrepend = \"--add-opens=java.base\/java.lang.reflect=ALL-UNNAMED\")\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+public class ProxyGeneratorBench {\n+\n+    \/**\n+     * Sample results from a Dell T7610.\n+     * Benchmark                        Mode  Cnt      Score      Error  Units\n+     *      ProxyPerf.genIntf_1              avgt   10  35325.428 +\/-  780.459  ns\/op\n+     *      ProxyPerf.genStringsIntf_3       avgt   10  46600.366 +\/-  663.812  ns\/op\n+     *      ProxyPerf.genZeroParams          avgt   10  33245.048 +\/-  437.988  ns\/op\n+     *      ProxyPerf.genPrimsIntf_2         avgt   10  43987.819 +\/-  837.443  ns\/op\n+     *\/\n+\n+    public interface Intf_1 {\n+        public Object mL(Object o);\n+    }\n+\n+    public interface Intf_2 {\n+        public int m1I(int i);\n+        public long m2IJ(int i, long l);\n+    }\n+\n+    public interface Intf_3 {\n+        public void mString(String s1);\n+        public String m2String(String s1);\n+        public String m2String(String s1, String s2);\n+    }\n+\n+    private ClassLoader classloader;\n+    private Method proxyGen;\n+    private Method proxyGenV49;\n+\n+    @Setup\n+    public void setup() {\n+        try {\n+            classloader = ClassLoader.getSystemClassLoader();\n+            Class<?> proxyGenClass = Class.forName(\"java.lang.reflect.ProxyGenerator\");\n+            proxyGen = proxyGenClass.getDeclaredMethod(\"generateProxyClass\",\n+                    ClassLoader.class, String.class, java.util.List.class, int.class);\n+            proxyGen.setAccessible(true);\n+        } catch (Exception ex) {\n+            ex.printStackTrace();\n+            throw new RuntimeException(\"ProxyClass setup fails\", ex);\n+        }\n+    }\n+\n+    @Benchmark\n+    public Object genZeroParams() throws Exception {\n+        List<Class<?>> interfaces = List.of(Runnable.class);\n+        return proxyGen.invoke(null, classloader, \"ProxyImpl\", interfaces, 1);\n+    }\n+\n+    @Benchmark\n+    public Object genIntf_1() throws Exception {\n+        List<Class<?>> interfaces = List.of(Intf_1.class);\n+        return proxyGen.invoke(null, classloader, \"ProxyImpl\", interfaces, 1);\n+    }\n+\n+    @Benchmark\n+    public Object genPrimsIntf_2() throws Exception {\n+        List<Class<?>> interfaces = List.of(Intf_2.class);\n+        return proxyGen.invoke(null, classloader, \"ProxyImpl\", interfaces, 1);\n+    }\n+\n+    @Benchmark\n+    public Object genStringsIntf_3() throws Exception {\n+        List<Class<?>> interfaces = List.of(Intf_3.class);\n+        return proxyGen.invoke(null, classloader, \"ProxyImpl\", interfaces, 1);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        var benchmark = new ProxyGeneratorBench();\n+        benchmark.setup();\n+        benchmark.genZeroParams();\n+        benchmark.genIntf_1();\n+        benchmark.genPrimsIntf_2();\n+        benchmark.genStringsIntf_3();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/reflect\/proxy\/ProxyGeneratorBench.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"}]}