{"files":[{"patch":"@@ -24,0 +24,1 @@\n+#include <stdlib.h>\n@@ -38,0 +39,3 @@\n+\/\/ JVMTI_ERROR_WRONG_PHASE guard\n+static jrawMonitorID event_mon = nullptr;\n+static bool is_vm_dead = false;\n@@ -50,0 +54,18 @@\n+struct MonitorLock {\n+  MonitorLock() {\n+    jvmtiError err = jvmti->RawMonitorEnter(event_mon);\n+    if (err != JVMTI_ERROR_NONE) {\n+      LOG1(\"RawMonitorEnter returned error: %d\\n\", err);\n+      abort();\n+    }\n+  }\n+\n+  ~MonitorLock() {\n+    jvmtiError err = jvmti->RawMonitorExit(event_mon);\n+    if (err != JVMTI_ERROR_NONE) {\n+      LOG1(\"RawMonitorExit returned error: %d\\n\", err);\n+      abort();\n+    }\n+  }\n+};\n+\n@@ -250,1 +272,1 @@\n-\/* Process a CLASS_LOAD or aClassPrepare event. *\/\n+\/* Process a CLASS_LOAD or a ClassPrepare event. *\/\n@@ -257,0 +279,5 @@\n+  MonitorLock lock;\n+  if (is_vm_dead) {\n+    return;\n+  }\n+\n@@ -259,1 +286,1 @@\n-  CHECK_JVMTI_ERROR(jni, err, \"ClassLoad event: Error in JVMTI GetClassSignature\");\n+  CHECK_JVMTI_ERROR(jni, err, \"ClassLoad\/ClassPrepare event: Error in JVMTI GetClassSignature\");\n@@ -304,0 +331,8 @@\n+static void JNICALL\n+VMDeath(jvmtiEnv *jvmti, JNIEnv* jni) {\n+  MonitorLock lock;\n+\n+  LOG0(\"VMDeath\\n\");\n+  is_vm_dead = true;\n+}\n+\n@@ -316,0 +351,7 @@\n+  err = jvmti->CreateRawMonitor(\"Event Monitor\", &event_mon);\n+  if (err != JVMTI_ERROR_NONE) {\n+    LOG1(\"Agent_OnLoad: CreateRawMonitor failed: %d\\n\", err);\n+    failed = true;\n+    return JNI_ERR;\n+  }\n+\n@@ -321,0 +363,1 @@\n+  callbacks.VMDeath = &VMDeath;\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/HiddenClass\/libHiddenClassSigTest.cpp","additions":45,"deletions":2,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+#include <stdlib.h>\n@@ -29,0 +30,5 @@\n+static jvmtiEnv *jvmti = nullptr;\n+\/\/ JVMTI_ERROR_WRONG_PHASE guard\n+static jrawMonitorID event_mon = nullptr;\n+static bool is_vm_dead = false;\n+\n@@ -31,0 +37,18 @@\n+struct MonitorLock {\n+  MonitorLock() {\n+    jvmtiError err = jvmti->RawMonitorEnter(event_mon);\n+    if (err != JVMTI_ERROR_NONE) {\n+      printf(\"RawMonitorEnter returned error: %d\\n\", err);\n+      abort();\n+    }\n+  }\n+\n+  ~MonitorLock() {\n+    jvmtiError err = jvmti->RawMonitorExit(event_mon);\n+    if (err != JVMTI_ERROR_NONE) {\n+      printf(\"RawMonitorExit returned error: %d\\n\", err);\n+      abort();\n+    }\n+  }\n+};\n+\n@@ -38,0 +62,5 @@\n+  MonitorLock lock;\n+  if (is_vm_dead) {\n+    return;\n+  }\n+\n@@ -51,0 +80,7 @@\n+static void JNICALL\n+VMDeath(jvmtiEnv *jvmti, JNIEnv* jni) {\n+  MonitorLock lock;\n+\n+  printf(\"VMDeath\\n\");\n+  is_vm_dead = true;\n+}\n@@ -59,1 +95,0 @@\n-  jvmtiEnv *jvmti;\n@@ -68,0 +103,6 @@\n+  err = jvmti->CreateRawMonitor(\"Event Monitor\", &event_mon);\n+  if (err != JVMTI_ERROR_NONE) {\n+    printf(\"Agent_OnLoad: CreateRawMonitor failed: %d\\n\", err);\n+    return JNI_ERR;\n+  }\n+\n@@ -70,0 +111,1 @@\n+  callbacks.VMDeath = &VMDeath;\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/VMObjectAlloc\/libVMObjectAlloc.cpp","additions":43,"deletions":1,"binary":false,"changes":44,"status":"modified"}]}