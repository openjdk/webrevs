{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -193,0 +193,3 @@\n+    \/\/ Initialize the java.lang.ProcessBuilder logger, non-null if configured for level DEBUG\n+    private static final System.Logger LOGGER = initLogger();\n+\n@@ -199,0 +202,4 @@\n+    private static System.Logger initLogger() {\n+        System.Logger logger = System.getLogger(\"java.lang.ProcessBuilder\");\n+        return logger.isLoggable(System.Logger.Level.DEBUG) ? logger : null;\n+    }\n@@ -1123,0 +1130,14 @@\n+            try {\n+                if (LOGGER != null) {\n+                    RuntimeException stackTraceEx = new RuntimeException(\"ProcessBuilder.start() debug\");\n+                    LOGGER.log(System.Logger.Level.DEBUG, \"ProcessBuilder.start(): \" +\n+                                    Arrays.toString(cmdarray) + \", pid: \" + process.pid(),\n+                                    stackTraceEx);\n+                }\n+            } catch (Throwable logEx) {\n+                try {\n+                    System.err.println(\"Logging failed: \" + logEx.getMessage() +\n+                            \", ProcessBuilder.start(): \" + Arrays.toString(cmdarray) +\n+                            \", pid: \" + process.pid());\n+                } catch (Throwable thEx) {\/* ignore *\/}\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessBuilder.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,8 @@\n+############################################################\n+#  \tEnable logging java.lang.ProcessBuilder to the console\n+############################################################\n+\n+handlers= java.util.logging.ConsoleHandler\n+\n+java.util.logging.ConsoleHandler.level = ALL\n+java.lang.ProcessBuilder.level = FINE\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/ProcessLogging-FINE.properties","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"@@ -0,0 +1,8 @@\n+############################################################\n+#  \tEnable logging java.lang.ProcessBuilder to the console\n+############################################################\n+\n+handlers= java.util.logging.ConsoleHandler\n+\n+java.util.logging.ConsoleHandler.level = ALL\n+java.lang.ProcessBuilder.level = INFO\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/ProcessLogging-INFO.properties","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"@@ -0,0 +1,162 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+import java.util.logging.StreamHandler;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+\/*\n+ * @test\n+ * @summary verify logging of ProcessBuilder.start()\n+ * @run junit\/othervm ProcessStartLoggingTest\n+ *\/\n+public class ProcessStartLoggingTest {\n+\n+    private static final String TEST_JDK = System.getProperty(\"test.jdk\");\n+    private static final String TEST_SRC = System.getProperty(\"test.src\");\n+\n+    private static Object HOLD_LOGGER;\n+\n+    \/**\n+     * Launch a process with the arguments.\n+     * @param args 1 or strings passed directly to ProcessBuilder as command and arguments.\n+     *\/\n+    public static void main(String[] args) throws InterruptedException {\n+        if (System.getProperty(\"ThrowingHandler\") != null) {\n+            HOLD_LOGGER = ProcessStartLoggingTest.ThrowingHandler.installHandler();\n+        }\n+        try {\n+            ProcessBuilder pb = new ProcessBuilder(args);\n+            Process p = pb.start();\n+            int status = p.waitFor();\n+            if (status != 0) {\n+                System.out.println(\"exitValue: \" + status);\n+            }\n+        } catch (IOException ioe) {\n+            System.out.println(\"ProcessBuilder.start() threw IOException: \" + ioe);\n+        }\n+    }\n+\n+    \/**\n+     * Test various log level settings, and none.\n+     * @return a stream of arguments for parameterized test\n+     *\/\n+    private static Stream<Arguments> logParamProvider() {\n+        return Stream.of(\n+                \/\/ Logging enabled with level DEBUG\n+                Arguments.of(List.of(\"-Djava.util.logging.config.file=\" +\n+                                Path.of(TEST_SRC, \"ProcessLogging-FINE.properties\").toString()),\n+                        List.of(\"echo\", \"echo1\"),\n+                        \"ProcessBuilder.start(): [echo, echo1], pid:\"),\n+                \/\/ Logging disabled due to level\n+                Arguments.of(List.of(\"-Djava.util.logging.config.file=\" +\n+                                Path.of(TEST_SRC, \"ProcessLogging-INFO.properties\").toString()),\n+                        List.of(\"echo\", \"echo2\"),\n+                        \"\"),\n+                \/\/ Console logger\n+                Arguments.of(List.of(\"--limit-modules\", \"java.base\",\n+                                \"-Djdk.system.logger.level=DEBUG\"),\n+                        List.of(\"echo\", \"echo3\"),\n+                        \"ProcessBuilder.start(): [echo, echo3], pid:\"),\n+                \/\/ Console logger\n+                Arguments.of(List.of(),\n+                        List.of(\"echo\", \"echo4\"),\n+                        \"\"),\n+                \/\/ Throwing Handler\n+                Arguments.of(List.of(\"-DThrowingHandler\",\n+                                \"-Djava.util.logging.config.file=\" +\n+                                        Path.of(TEST_SRC, \"ProcessLogging-FINE.properties\").toString()),\n+                        List.of(\"echo\", \"echo5\"),\n+                        \"Logging failed: Exception in publish, ProcessBuilder.start():\")\n+        );\n+    }\n+\n+    \/**\n+     * Check that the logger output of a launched process contains the expected message.\n+     *\n+     * @param logArgs Arguments to configure logging in the java test process\n+     * @param childArgs the args passed to the child to be invoked as a Process\n+     * @param expectMessage log should contain the message\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"logParamProvider\")\n+    public void checkLogger(List<String> logArgs, List<String> childArgs, String expectMessage) {\n+        ProcessBuilder pb = new ProcessBuilder();\n+        pb.redirectErrorStream(true);\n+\n+        List<String> cmd = pb.command();\n+        cmd.add(Path.of(TEST_JDK,\"bin\", \"java\").toString());\n+        cmd.addAll(logArgs);\n+        cmd.add(this.getClass().getName());\n+        cmd.addAll(childArgs);\n+\n+        try {\n+            Process process = pb.start();\n+            try (BufferedReader reader = process.inputReader()) {\n+                List<String> lines = reader.lines().toList();\n+                boolean match = (expectMessage.isEmpty())\n+                        ? lines.size() == 0\n+                        : lines.stream().filter(s -> s.contains(expectMessage)).findFirst().isPresent();\n+                if (!match) {\n+                    \/\/ Output lines for debug\n+                    System.err.println(\"Expected> \\\"\" + expectMessage + \"\\\"\");\n+                    lines.forEach(l -> System.err.println(\"Actual>   \\\"\" + l+ \"\\\"\"));\n+                    fail(\"Unexpected log contents\");\n+                }\n+            }\n+            int result = process.waitFor();\n+            assertEquals(0, result, \"Exit status\");\n+        } catch (IOException | InterruptedException ex) {\n+            fail(ex);\n+        }\n+    }\n+\n+    \/**\n+     * A LoggingHandler that throws an Exception.\n+     *\/\n+    public static class ThrowingHandler extends StreamHandler {\n+\n+        \/\/ Install this handler for java.lang.ProcessBuilder\n+        public static Logger installHandler() {\n+            Logger logger = Logger.getLogger(\"java.lang.ProcessBuilder\");\n+            logger.addHandler(new ProcessStartLoggingTest.ThrowingHandler());\n+            return logger;\n+        }\n+\n+        @Override\n+        public synchronized void publish(LogRecord record) {\n+            throw new RuntimeException(\"Exception in publish\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/ProcessStartLoggingTest.java","additions":162,"deletions":0,"binary":false,"changes":162,"status":"added"}]}