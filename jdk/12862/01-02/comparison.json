{"files":[{"patch":"@@ -193,2 +193,2 @@\n-    \/\/ Initialize the java.lang.ProcessBuilder logger, non-null if configured for level DEBUG\n-    private static final System.Logger LOGGER = initLogger();\n+    \/\/ Lazily and racy initialize when needed, racy is ok, any logger is ok\n+    private static System.Logger LOGGER ;\n@@ -1079,3 +1079,10 @@\n-     * If the {@linkplain System#getLogger(String) system logger} for {@code java.lang.ProcessBuilder}\n-     * is enabled with logging level {@link System.Logger.Level#DEBUG Level.DEBUG} the stack trace\n-     * of the call to {@code ProcessBuilder.start()} is logged.\n+     * Logging of the command, arguments, directory, stack trace, and process id can be enabled.\n+     * The logged information may contain sensitive security information and the potential exposure\n+     * of the information should be carefully reviewed.\n+     * Logging of the information is enabled when the logging level of the\n+     * {@linkplain System#getLogger(String) system logger} named {@code java.lang.ProcessBuilder}\n+     * is {@link System.Logger.Level#DEBUG Level.DEBUG} or {@link System.Logger.Level#TRACE Level.TRACE}.\n+     * When enabled for {@code Level.DEBUG} only the command, directory, stack trace,\n+     * and process id are logged.\n+     * When enabled for {@code Level.TRACE} the arguments are included with the command,\n+     * directory, stack trace, and process id.\n@@ -1135,13 +1142,15 @@\n-            try {\n-                if (LOGGER != null) {\n-                    RuntimeException stackTraceEx = new RuntimeException(\"ProcessBuilder.start() debug\");\n-                    LOGGER.log(System.Logger.Level.DEBUG, \"ProcessBuilder.start(): \" +\n-                                    Arrays.toString(cmdarray) + \", pid: \" + process.pid(),\n-                                    stackTraceEx);\n-                }\n-            } catch (Throwable logEx) {\n-                try {\n-                    System.err.println(\"Logging failed: \" + logEx.getMessage() +\n-                            \", ProcessBuilder.start(): \" + Arrays.toString(cmdarray) +\n-                            \", pid: \" + process.pid());\n-                } catch (Throwable thEx) {\/* ignore *\/}\n+            \/\/ Racy initialization for logging; errors in configuration may throw exceptions\n+            System.Logger logger = LOGGER;\n+            if (logger == null) {\n+                LOGGER = logger = System.getLogger(\"java.lang.ProcessBuilder\");\n+            }\n+            if (logger.isLoggable(System.Logger.Level.DEBUG)) {\n+                boolean detail = logger.isLoggable(System.Logger.Level.TRACE);\n+                var level = (detail) ? System.Logger.Level.TRACE : System.Logger.Level.DEBUG;\n+                var cmdargs = (detail) ? String.join(\" \", cmdarray) : cmdarray[0];\n+                RuntimeException stackTraceEx = new RuntimeException(\"ProcessBuilder.start() debug\");\n+                LOGGER.log(level, \"ProcessBuilder.start(): \" +\n+                                \"cmd: \" + cmdargs +\n+                                \", dir: \" + dir +\n+                                \", pid: \" + process.pid(),\n+                        stackTraceEx);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessBuilder.java","additions":27,"deletions":18,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -0,0 +1,8 @@\n+############################################################\n+#  \tEnable logging java.lang.ProcessBuilder to the console\n+############################################################\n+\n+handlers= java.util.logging.ConsoleHandler\n+\n+java.util.logging.ConsoleHandler.level = ALL\n+java.lang.ProcessBuilder.level = FINER\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/ProcessLogging-FINER.properties","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"@@ -25,0 +25,1 @@\n+import java.io.File;\n@@ -59,0 +60,1 @@\n+        String directory = System.getProperty(\"directory\");\n@@ -61,0 +63,1 @@\n+            pb.directory((directory == null) ? null : new File(directory));\n@@ -76,0 +79,3 @@\n+        File nullDirectory = null;\n+        File thisDirectory = new File(\".\");\n+\n@@ -77,0 +83,7 @@\n+                \/\/ Logging enabled with level TRACE\n+                Arguments.of(List.of(\"-Djava.util.logging.config.file=\" +\n+                                Path.of(TEST_SRC, \"ProcessLogging-FINER.properties\").toString(),\n+                                \"-Ddirectory=.\"),\n+                        List.of(\"echo\", \"echo0\"),\n+                        \"ProcessBuilder.start(): cmd: echo echo0, dir: ., pid:\",\n+                        0),\n@@ -79,1 +92,2 @@\n-                                Path.of(TEST_SRC, \"ProcessLogging-FINE.properties\").toString()),\n+                                Path.of(TEST_SRC, \"ProcessLogging-FINE.properties\").toString(),\n+                                \"-Ddirectory=.\"),\n@@ -81,1 +95,2 @@\n-                        \"ProcessBuilder.start(): [echo, echo1], pid:\"),\n+                        \"ProcessBuilder.start(): cmd: echo, dir: ., pid:\",\n+                        0),\n@@ -86,1 +101,2 @@\n-                        \"\"),\n+                        \"\",\n+                        0),\n@@ -91,1 +107,2 @@\n-                        \"ProcessBuilder.start(): [echo, echo3], pid:\"),\n+                        \"ProcessBuilder.start(): cmd: echo, dir: null, pid:\",\n+                        0),\n@@ -93,1 +110,3 @@\n-                Arguments.of(List.of(),\n+                Arguments.of(List.of(\"--limit-modules\", \"java.base\",\n+                                \"-Djdk.system.logger.level=TRACE\",\n+                                \"-Ddirectory=.\"),\n@@ -95,1 +114,7 @@\n-                        \"\"),\n+                        \"ProcessBuilder.start(): cmd: echo echo4, dir: ., pid:\",\n+                        0),\n+                \/\/ Console logger\n+                Arguments.of(List.of(),\n+                        List.of(\"echo\", \"echo5\"),\n+                        \"\",\n+                        0),\n@@ -100,2 +125,3 @@\n-                        List.of(\"echo\", \"echo5\"),\n-                        \"Logging failed: Exception in publish, ProcessBuilder.start():\")\n+                        List.of(\"echo\", \"echo6\"),\n+                        \"Exception in thread \\\"main\\\" java.lang.RuntimeException: Exception in publish\",\n+                        1)\n@@ -108,2 +134,2 @@\n-     * @param logArgs Arguments to configure logging in the java test process\n-     * @param childArgs the args passed to the child to be invoked as a Process\n+     * @param logArgs       Arguments to configure logging in the java test process\n+     * @param childArgs     the args passed to the child to be invoked as a Process\n@@ -114,1 +140,2 @@\n-    public void checkLogger(List<String> logArgs, List<String> childArgs, String expectMessage) {\n+    public void checkLogger(List<String> logArgs, List<String> childArgs,\n+                            String expectMessage, int expectedStatus) {\n@@ -123,1 +150,0 @@\n-\n@@ -139,1 +165,1 @@\n-            assertEquals(0, result, \"Exit status\");\n+            assertEquals(expectedStatus, result, \"Exit status\");\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/ProcessStartLoggingTest.java","additions":39,"deletions":13,"binary":false,"changes":52,"status":"modified"}]}