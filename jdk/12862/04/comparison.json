{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -193,0 +193,3 @@\n+    \/\/ Lazily and racy initialize when needed, racy is ok, any logger is ok\n+    private static System.Logger LOGGER ;\n+\n@@ -199,0 +202,4 @@\n+    private static System.Logger initLogger() {\n+        System.Logger logger = System.getLogger(\"java.lang.ProcessBuilder\");\n+        return logger.isLoggable(System.Logger.Level.DEBUG) ? logger : null;\n+    }\n@@ -1071,0 +1078,12 @@\n+     * @implNote\n+     * Logging of the command, arguments, directory, stack trace, and process id can be enabled.\n+     * The logged information may contain sensitive security information and the potential exposure\n+     * of the information should be carefully reviewed.\n+     * Logging of the information is enabled when the logging level of the\n+     * {@linkplain System#getLogger(String) system logger} named {@code java.lang.ProcessBuilder}\n+     * is {@link System.Logger.Level#DEBUG Level.DEBUG} or {@link System.Logger.Level#TRACE Level.TRACE}.\n+     * When enabled for {@code Level.DEBUG} only the process id, directory, command, and stack trace\n+     * are logged.\n+     * When enabled for {@code Level.TRACE} the arguments are included with the process id,\n+     * directory, command, and stack trace.\n+     *\n@@ -1123,0 +1142,15 @@\n+            \/\/ Racy initialization for logging; errors in configuration may throw exceptions\n+            System.Logger logger = LOGGER;\n+            if (logger == null) {\n+                LOGGER = logger = System.getLogger(\"java.lang.ProcessBuilder\");\n+            }\n+            if (logger.isLoggable(System.Logger.Level.DEBUG)) {\n+                boolean detail = logger.isLoggable(System.Logger.Level.TRACE);\n+                var level = (detail) ? System.Logger.Level.TRACE : System.Logger.Level.DEBUG;\n+                var cmdargs = (detail) ? String.join(\"\\\" \\\"\", cmdarray) : cmdarray[0];\n+                RuntimeException stackTraceEx = new RuntimeException(\"ProcessBuilder.start() debug\");\n+                LOGGER.log(level, \"ProcessBuilder.start(): pid: \" + process.pid() +\n+                        \", dir: \" + dir +\n+                        \", cmd: \\\"\" + cmdargs + \"\\\"\",\n+                        stackTraceEx);\n+            }\n@@ -1267,0 +1301,3 @@\n+     * @implNote\n+     * Each created process is logged, see {@link ProcessBuilder#start()} for details.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessBuilder.java","additions":38,"deletions":1,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -352,0 +352,3 @@\n+     * @implNote\n+     * The process created is logged, see {@link ProcessBuilder#start()} for details.\n+     *\n@@ -400,0 +403,3 @@\n+     * @implNote\n+     * The process created is logged, see {@link ProcessBuilder#start()} for details.\n+     *\n@@ -461,0 +467,3 @@\n+     * @implNote\n+     * The process created is logged, see {@link ProcessBuilder#start()} for details.\n+     *\n@@ -506,0 +515,3 @@\n+     * @implNote\n+     * The process created is logged, see {@link ProcessBuilder#start()} for details.\n+     *\n@@ -549,0 +561,3 @@\n+     * @implNote\n+     * The process created is logged, see {@link ProcessBuilder#start()} for details.\n+     *\n@@ -644,0 +659,3 @@\n+     * @implNote\n+     * The process created is logged, see {@link ProcessBuilder#start()} for details.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Runtime.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,8 @@\n+############################################################\n+#  \tEnable logging java.lang.ProcessBuilder to the console\n+############################################################\n+\n+handlers= java.util.logging.ConsoleHandler\n+\n+java.util.logging.ConsoleHandler.level = ALL\n+java.lang.ProcessBuilder.level = FINE\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/ProcessLogging-FINE.properties","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"@@ -0,0 +1,8 @@\n+############################################################\n+#  \tEnable logging java.lang.ProcessBuilder to the console\n+############################################################\n+\n+handlers= java.util.logging.ConsoleHandler\n+\n+java.util.logging.ConsoleHandler.level = ALL\n+java.lang.ProcessBuilder.level = FINER\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/ProcessLogging-FINER.properties","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"@@ -0,0 +1,8 @@\n+############################################################\n+#  \tEnable logging java.lang.ProcessBuilder to the console\n+############################################################\n+\n+handlers= java.util.logging.ConsoleHandler\n+\n+java.util.logging.ConsoleHandler.level = ALL\n+java.lang.ProcessBuilder.level = INFO\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/ProcessLogging-INFO.properties","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"@@ -0,0 +1,189 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+import java.util.logging.StreamHandler;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+\/*\n+ * @test\n+ * @summary verify logging of ProcessBuilder.start()\n+ * @run junit\/othervm ProcessStartLoggingTest\n+ *\/\n+public class ProcessStartLoggingTest {\n+\n+    private final static int NORMAL_STATUS = 0;\n+    private final static int ERROR_STATUS = 1;\n+\n+    private static final String TEST_JDK = System.getProperty(\"test.jdk\");\n+    private static final String TEST_SRC = System.getProperty(\"test.src\");\n+\n+    private static Object HOLD_LOGGER;\n+\n+    \/**\n+     * Launch a process with the arguments.\n+     * @param args 1 or strings passed directly to ProcessBuilder as command and arguments.\n+     *\/\n+    public static void main(String[] args) throws InterruptedException {\n+        if (System.getProperty(\"ThrowingHandler\") != null) {\n+            HOLD_LOGGER = ProcessStartLoggingTest.ThrowingHandler.installHandler();\n+        }\n+        String directory = System.getProperty(\"directory\");\n+        try {\n+            ProcessBuilder pb = new ProcessBuilder(args);\n+            pb.directory((directory == null) ? null : new File(directory));\n+            Process p = pb.start();\n+            int status = p.waitFor();\n+            if (status != 0) {\n+                System.out.println(\"exitValue: \" + status);\n+            }\n+        } catch (IOException ioe) {\n+            System.out.println(\"ProcessBuilder.start() threw IOException: \" + ioe);\n+        }\n+    }\n+\n+    \/**\n+     * Test various log level settings, and none.\n+     * @return a stream of arguments for parameterized test\n+     *\/\n+    private static Stream<Arguments> logParamProvider() {\n+\n+        return Stream.of(\n+                \/\/ Logging enabled with level TRACE\n+                Arguments.of(List.of(\"-Djava.util.logging.config.file=\" +\n+                                        Path.of(TEST_SRC, \"ProcessLogging-FINER.properties\").toString(),\n+                                \"-Ddirectory=.\"),\n+                        List.of(\"echo\", \"echo0\"),\n+                        NORMAL_STATUS,\n+                        \"dir: ., cmd: \\\"echo\\\" \\\"echo0\\\"\"),\n+                \/\/ Logging enabled with level DEBUG\n+                Arguments.of(List.of(\"-Djava.util.logging.config.file=\" +\n+                                        Path.of(TEST_SRC, \"ProcessLogging-FINE.properties\").toString(),\n+                                \"-Ddirectory=.\"),\n+                        List.of(\"echo\", \"echo1\"),\n+                        NORMAL_STATUS,\n+                        \"dir: ., cmd: \\\"echo\\\"\"),\n+                \/\/ Logging disabled due to level INFO\n+                Arguments.of(List.of(\"-Djava.util.logging.config.file=\" +\n+                                Path.of(TEST_SRC, \"ProcessLogging-INFO.properties\").toString()),\n+                        List.of(\"echo\", \"echo2\"),\n+                        NORMAL_STATUS,\n+                        \"\"),\n+                \/\/ Console logger DEBUG\n+                Arguments.of(List.of(\"--limit-modules\", \"java.base\",\n+                                \"-Djdk.system.logger.level=DEBUG\"),\n+                        List.of(\"echo\", \"echo3\"),\n+                        NORMAL_STATUS,\n+                        \"dir: null, cmd: \\\"echo\\\"\"),\n+                \/\/ Console logger TRACE\n+                Arguments.of(List.of(\"--limit-modules\", \"java.base\",\n+                                \"-Djdk.system.logger.level=TRACE\",\n+                                \"-Ddirectory=.\"),\n+                        List.of(\"echo\", \"echo4\"),\n+                        NORMAL_STATUS,\n+                        \"dir: ., cmd: \\\"echo\\\" \\\"echo4\\\"\"),\n+                \/\/ No Logging configured\n+                Arguments.of(List.of(),\n+                        List.of(\"echo\", \"echo5\"),\n+                        NORMAL_STATUS,\n+                        \"\"),\n+                \/\/ Throwing Handler\n+                Arguments.of(List.of(\"-DThrowingHandler\",\n+                                \"-Djava.util.logging.config.file=\" +\n+                                        Path.of(TEST_SRC, \"ProcessLogging-FINE.properties\").toString()),\n+                        List.of(\"echo\", \"echo6\"),\n+                        ERROR_STATUS,\n+                        \"Exception in thread \\\"main\\\" java.lang.RuntimeException: Exception in publish\")\n+        );\n+    }\n+\n+    \/**\n+     * Check that the logger output of a launched process contains the expected message.\n+     *\n+     * @param logArgs       Arguments to configure logging in the java test process\n+     * @param childArgs     the args passed to the child to be invoked as a Process\n+     * @param expectMessage log should contain the message\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"logParamProvider\")\n+    public void checkLogger(List<String> logArgs, List<String> childArgs,\n+                            int expectedStatus, String expectMessage) {\n+        ProcessBuilder pb = new ProcessBuilder();\n+        pb.redirectErrorStream(true);\n+\n+        List<String> cmd = pb.command();\n+        cmd.add(Path.of(TEST_JDK,\"bin\", \"java\").toString());\n+        cmd.addAll(logArgs);\n+        cmd.add(this.getClass().getName());\n+        cmd.addAll(childArgs);\n+        try {\n+            Process process = pb.start();\n+            try (BufferedReader reader = process.inputReader()) {\n+                List<String> lines = reader.lines().toList();\n+                boolean match = (expectMessage.isEmpty())\n+                        ? lines.size() == 0\n+                        : lines.stream().filter(s -> s.contains(expectMessage)).findFirst().isPresent();\n+                if (!match) {\n+                    \/\/ Output lines for debug\n+                    System.err.println(\"Expected> \\\"\" + expectMessage + \"\\\"\");\n+                    lines.forEach(l -> System.err.println(\"Actual>   \\\"\" + l+ \"\\\"\"));\n+                    fail(\"Unexpected log contents\");\n+                }\n+            }\n+            int result = process.waitFor();\n+            assertEquals(expectedStatus, result, \"Exit status\");\n+        } catch (IOException | InterruptedException ex) {\n+            fail(ex);\n+        }\n+    }\n+\n+    \/**\n+     * A LoggingHandler that throws an Exception.\n+     *\/\n+    public static class ThrowingHandler extends StreamHandler {\n+\n+        \/\/ Install this handler for java.lang.ProcessBuilder\n+        public static Logger installHandler() {\n+            Logger logger = Logger.getLogger(\"java.lang.ProcessBuilder\");\n+            logger.addHandler(new ProcessStartLoggingTest.ThrowingHandler());\n+            return logger;\n+        }\n+\n+        @Override\n+        public synchronized void publish(LogRecord record) {\n+            throw new RuntimeException(\"Exception in publish\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/ProcessStartLoggingTest.java","additions":189,"deletions":0,"binary":false,"changes":189,"status":"added"}]}