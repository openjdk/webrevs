{"files":[{"patch":"@@ -92,0 +92,1 @@\n+        --add-exports java.base\/jdk.internal.classfile.components=ALL-UNNAMED \\\n","filename":"make\/test\/BuildMicrobenchmark.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -63,6 +63,1 @@\n- * <p>\n- * Class transformation sample where code transformation is stateful:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"codeRelabeling\"}\n- * <p>\n- * Complex class instrumentation sample chaining multiple transformations:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"classInstrumentation\"}\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFileTransform.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,3 +28,0 @@\n-import java.lang.classfile.components.ClassRemapper;\n-import java.lang.classfile.components.CodeLocalsShifter;\n-import java.lang.classfile.components.CodeRelabeler;\n@@ -36,2 +33,0 @@\n-import java.lang.reflect.AccessFlag;\n-import java.util.ArrayDeque;\n@@ -39,1 +34,0 @@\n-import java.util.Map;\n@@ -41,2 +35,0 @@\n-import java.util.function.Predicate;\n-import java.util.stream.Collectors;\n@@ -329,76 +321,0 @@\n-    void codeRelabeling(ClassModel classModel) {\n-        \/\/ @start region=\"codeRelabeling\"\n-        byte[] newBytes = ClassFile.of().transformClass(classModel,\n-                ClassTransform.transformingMethodBodies(\n-                        CodeTransform.ofStateful(CodeRelabeler::of)));\n-        \/\/ @end\n-    }\n-\n-    \/\/ @start region=\"classInstrumentation\"\n-    byte[] classInstrumentation(ClassModel target, ClassModel instrumentor, Predicate<MethodModel> instrumentedMethodsFilter) {\n-        var instrumentorCodeMap = instrumentor.methods().stream()\n-                                              .filter(instrumentedMethodsFilter)\n-                                              .collect(Collectors.toMap(mm -> mm.methodName().stringValue() + mm.methodType().stringValue(), mm -> mm.code().orElseThrow()));\n-        var targetFieldNames = target.fields().stream().map(f -> f.fieldName().stringValue()).collect(Collectors.toSet());\n-        var targetMethods = target.methods().stream().map(m -> m.methodName().stringValue() + m.methodType().stringValue()).collect(Collectors.toSet());\n-        var instrumentorClassRemapper = ClassRemapper.of(Map.of(instrumentor.thisClass().asSymbol(), target.thisClass().asSymbol()));\n-        return ClassFile.of().transformClass(target,\n-                ClassTransform.transformingMethods(\n-                        instrumentedMethodsFilter,\n-                        (mb, me) -> {\n-                            if (me instanceof CodeModel targetCodeModel) {\n-                                var mm = targetCodeModel.parent().get();\n-                                \/\/instrumented methods code is taken from instrumentor\n-                                mb.transformCode(instrumentorCodeMap.get(mm.methodName().stringValue() + mm.methodType().stringValue()),\n-                                        \/\/all references to the instrumentor class are remapped to target class\n-                                        instrumentorClassRemapper.asCodeTransform()\n-                                        .andThen((codeBuilder, instrumentorCodeElement) -> {\n-                                            \/\/all invocations of target methods from instrumentor are inlined\n-                                            if (instrumentorCodeElement instanceof InvokeInstruction inv\n-                                                && target.thisClass().asInternalName().equals(inv.owner().asInternalName())\n-                                                && mm.methodName().stringValue().equals(inv.name().stringValue())\n-                                                && mm.methodType().stringValue().equals(inv.type().stringValue())) {\n-\n-                                                \/\/store stacked method parameters into locals\n-                                                var storeStack = new ArrayDeque<StoreInstruction>();\n-                                                int slot = 0;\n-                                                if (!mm.flags().has(AccessFlag.STATIC))\n-                                                    storeStack.push(StoreInstruction.of(TypeKind.REFERENCE, slot++));\n-                                                for (var pt : mm.methodTypeSymbol().parameterList()) {\n-                                                    var tk = TypeKind.from(pt);\n-                                                    storeStack.push(StoreInstruction.of(tk, slot));\n-                                                    slot += tk.slotSize();\n-                                                }\n-                                                storeStack.forEach(codeBuilder::with);\n-\n-                                                \/\/inlined target locals must be shifted based on the actual instrumentor locals\n-                                                codeBuilder.block(inlinedBlockBuilder -> inlinedBlockBuilder\n-                                                        .transform(targetCodeModel, CodeLocalsShifter.of(mm.flags(), mm.methodTypeSymbol())\n-                                                        .andThen(CodeRelabeler.of())\n-                                                        .andThen((innerBuilder, shiftedTargetCode) -> {\n-                                                            \/\/returns must be replaced with jump to the end of the inlined method\n-                                                            if (shiftedTargetCode instanceof ReturnInstruction)\n-                                                                innerBuilder.goto_(inlinedBlockBuilder.breakLabel());\n-                                                            else\n-                                                                innerBuilder.with(shiftedTargetCode);\n-                                                        })));\n-                                            } else\n-                                                codeBuilder.with(instrumentorCodeElement);\n-                                        }));\n-                            } else\n-                                mb.with(me);\n-                        })\n-                .andThen(ClassTransform.endHandler(clb ->\n-                    \/\/remaining instrumentor fields and methods are injected at the end\n-                    clb.transform(instrumentor,\n-                            ClassTransform.dropping(cle ->\n-                                    !(cle instanceof FieldModel fm\n-                                            && !targetFieldNames.contains(fm.fieldName().stringValue()))\n-                                    && !(cle instanceof MethodModel mm\n-                                            && !ConstantDescs.INIT_NAME.equals(mm.methodName().stringValue())\n-                                            && !targetMethods.contains(mm.methodName().stringValue() + mm.methodType().stringValue())))\n-                            \/\/and instrumentor class references remapped to target class\n-                            .andThen(instrumentorClassRemapper)))));\n-    }\n-    \/\/ @end\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/snippet-files\/PackageSnippets.java","additions":0,"deletions":84,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-package java.lang.classfile.components;\n+package jdk.internal.classfile.components;\n@@ -61,2 +61,0 @@\n- *\n- * @since 24\n@@ -71,2 +69,0 @@\n-     *\n-     * @since 24\n@@ -105,2 +101,0 @@\n-     *\n-     * @since 24\n@@ -149,2 +143,0 @@\n-     *\n-     * @since 24\n@@ -164,2 +156,0 @@\n-     *\n-     * @since 24\n@@ -175,2 +165,0 @@\n-     *\n-     * @since 24\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/ClassPrinter.java","additions":1,"deletions":13,"binary":false,"changes":14,"previous_filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/components\/ClassPrinter.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package java.lang.classfile.components;\n+package jdk.internal.classfile.components;\n@@ -56,2 +56,0 @@\n- *\n- * @since 24\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/ClassRemapper.java","additions":1,"deletions":3,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/components\/ClassRemapper.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package java.lang.classfile.components;\n+package jdk.internal.classfile.components;\n@@ -40,2 +40,0 @@\n- *\n- * @since 24\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/CodeLocalsShifter.java","additions":1,"deletions":3,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/components\/CodeLocalsShifter.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package java.lang.classfile.components;\n+package jdk.internal.classfile.components;\n@@ -47,2 +47,0 @@\n- *\n- * @since 24\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/CodeRelabeler.java","additions":1,"deletions":3,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/components\/CodeRelabeler.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package java.lang.classfile.components;\n+package jdk.internal.classfile.components;\n@@ -52,2 +52,0 @@\n- *\n- * @since 24\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/CodeStackTracker.java","additions":1,"deletions":3,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/components\/CodeStackTracker.java","status":"renamed"},{"patch":"@@ -113,2 +113,0 @@\n- *\n- * @since 24\n@@ -116,1 +114,1 @@\n-package java.lang.classfile.components;\n+package jdk.internal.classfile.components;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/package-info.java","additions":1,"deletions":3,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/components\/package-info.java","status":"renamed"},{"patch":"@@ -28,4 +28,4 @@\n-import java.lang.classfile.components.ClassPrinter;\n-import java.lang.classfile.components.ClassRemapper;\n-import java.lang.classfile.components.CodeLocalsShifter;\n-import java.lang.classfile.components.CodeRelabeler;\n+import jdk.internal.classfile.components.ClassPrinter;\n+import jdk.internal.classfile.components.ClassRemapper;\n+import jdk.internal.classfile.components.CodeLocalsShifter;\n+import jdk.internal.classfile.components.CodeRelabeler;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/snippet-files\/PackageSnippets.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/components\/snippet-files\/PackageSnippets.java","status":"renamed"},{"patch":"@@ -34,5 +34,5 @@\n-import java.lang.classfile.components.ClassPrinter.LeafNode;\n-import java.lang.classfile.components.ClassPrinter.ListNode;\n-import java.lang.classfile.components.ClassPrinter.MapNode;\n-import java.lang.classfile.components.ClassPrinter.Node;\n-import java.lang.classfile.components.ClassPrinter.Verbosity;\n+import jdk.internal.classfile.components.ClassPrinter.LeafNode;\n+import jdk.internal.classfile.components.ClassPrinter.ListNode;\n+import jdk.internal.classfile.components.ClassPrinter.MapNode;\n+import jdk.internal.classfile.components.ClassPrinter.Node;\n+import jdk.internal.classfile.components.ClassPrinter.Verbosity;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassPrinterImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import java.lang.classfile.components.ClassRemapper;\n+import jdk.internal.classfile.components.ClassRemapper;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassRemapperImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import java.lang.classfile.components.CodeLocalsShifter;\n+import jdk.internal.classfile.components.CodeLocalsShifter;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeLocalsShifterImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import java.lang.classfile.components.CodeRelabeler;\n+import jdk.internal.classfile.components.CodeRelabeler;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeRelabelerImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import java.lang.classfile.components.CodeStackTracker;\n+import jdk.internal.classfile.components.CodeStackTracker;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeStackTrackerImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import java.lang.classfile.components.ClassPrinter;\n+import jdk.internal.classfile.components.ClassPrinter;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Util.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import java.lang.classfile.components.ClassPrinter;\n+import jdk.internal.classfile.components.ClassPrinter;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerifierImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,1 +84,0 @@\n-    exports java.lang.classfile.components;\n@@ -180,0 +179,2 @@\n+    exports jdk.internal.classfile.components to\n+        jdk.jfr;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import java.lang.classfile.components.ClassPrinter;\n+import jdk.internal.classfile.components.ClassPrinter;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/util\/Bytecode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,2 +40,2 @@\n-import java.lang.classfile.components.ClassRemapper;\n-import java.lang.classfile.components.CodeLocalsShifter;\n+import jdk.internal.classfile.components.ClassRemapper;\n+import jdk.internal.classfile.components.CodeLocalsShifter;\n@@ -62,1 +62,1 @@\n-import java.lang.classfile.components.CodeRelabeler;\n+import jdk.internal.classfile.components.CodeRelabeler;\n@@ -64,1 +64,1 @@\n-import java.lang.classfile.components.ClassPrinter;\n+import jdk.internal.classfile.components.ClassPrinter;\n","filename":"test\/jdk\/jdk\/classfile\/AdvancedTransformationsTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import java.lang.classfile.components.ClassRemapper;\n+import jdk.internal.classfile.components.ClassRemapper;\n","filename":"test\/jdk\/jdk\/classfile\/ClassBuildingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import java.lang.classfile.components.ClassPrinter;\n+import jdk.internal.classfile.components.ClassPrinter;\n","filename":"test\/jdk\/jdk\/classfile\/ClassPrinterTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import java.util.ArrayList;\n@@ -44,1 +45,1 @@\n-        \"src\/java.base\/share\/classes\/java\/lang\/classfile\/components\/snippet-files\/PackageSnippets.java\"})\n+        \"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/snippet-files\/PackageSnippets.java\"})\n@@ -55,3 +56,8 @@\n-                    var task = compiler.getTask(null, fileManager, null, List.of(\n-                            \"--enable-preview\",\n-                            \"--source\", String.valueOf(Runtime.version().feature())),\n+                    List<String> flags = List.of(\n+                            \"--source\", String.valueOf(Runtime.version().feature()));\n+                    if (source.contains(\"jdk\/internal\/classfile\/components\")) {\n+                        flags = new ArrayList<>(flags);\n+                        flags.add(\"--add-exports\");\n+                        flags.add(\"java.base\/jdk.internal.classfile.components=ALL-UNNAMED\");\n+                    }\n+                    var task = compiler.getTask(null, fileManager, null, flags,\n","filename":"test\/jdk\/jdk\/classfile\/SnippetsTest.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import java.lang.classfile.components.ClassPrinter;\n+import jdk.internal.classfile.components.ClassPrinter;\n","filename":"test\/jdk\/jdk\/classfile\/StackMapsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import java.lang.classfile.components.CodeStackTracker;\n+import jdk.internal.classfile.components.CodeStackTracker;\n","filename":"test\/jdk\/jdk\/classfile\/StackTrackerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+    java.base\/jdk.internal.classfile.components \\\n","filename":"test\/jdk\/jdk\/classfile\/TEST.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-import java.lang.classfile.components.ClassPrinter;\n+import jdk.internal.classfile.components.ClassPrinter;\n","filename":"test\/jdk\/jdk\/classfile\/VerifierSelfTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-import java.lang.classfile.components.ClassPrinter;\n+import jdk.internal.classfile.components.ClassPrinter;\n","filename":"test\/jdk\/jdk\/classfile\/examples\/AnnotationsExamples.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.classfile.components.CodeStackTracker;\n+import jdk.internal.classfile.components.CodeStackTracker;\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/RebuildingTransformation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import java.io.ByteArrayInputStream;\n@@ -46,1 +45,1 @@\n-import java.lang.classfile.components.ClassRemapper;\n+import jdk.internal.classfile.components.ClassRemapper;\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/Transforms.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+        \"--add-exports\", \"java.base\/jdk.internal.classfile.components=ALL-UNNAMED\",\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/AbstractCorpusBenchmark.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import java.lang.classfile.components.ClassPrinter;\n+import jdk.internal.classfile.components.ClassPrinter;\n@@ -40,0 +40,1 @@\n+        \"--add-exports\", \"java.base\/jdk.internal.classfile.components=ALL-UNNAMED\",\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/RepeatedModelTraversal.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-import java.io.ByteArrayInputStream;\n-import java.io.IOException;\n@@ -29,1 +27,0 @@\n-import java.util.Optional;\n@@ -46,1 +43,1 @@\n-import java.lang.classfile.components.ClassRemapper;\n+import jdk.internal.classfile.components.ClassRemapper;\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/Transforms.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"}]}