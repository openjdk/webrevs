{"files":[{"patch":"@@ -30,3 +30,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -37,1 +34,0 @@\n-import jdk.dynalink.internal.AccessControlContextFactory;\n@@ -204,5 +200,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final AccessControlContext GET_CLASS_LOADER_CONTEXT =\n-        AccessControlContextFactory.createAccessControlContext(\"getClassLoader\");\n-\n-    @SuppressWarnings(\"removal\")\n@@ -210,10 +201,8 @@\n-        return AccessController.doPrivileged((PrivilegedAction<RetentionDirection>) () -> {\n-            final ClassLoader cl1 = from.getClassLoader();\n-            final ClassLoader cl2 = to.getClassLoader();\n-            if (canReferenceDirectly(cl1, cl2)) {\n-                return RetentionDirection.FORWARD;\n-            } else if (canReferenceDirectly(cl2, cl1)) {\n-                return RetentionDirection.REVERSE;\n-            }\n-            return RetentionDirection.NEITHER;\n-        }, GET_CLASS_LOADER_CONTEXT);\n+        final ClassLoader cl1 = from.getClassLoader();\n+        final ClassLoader cl2 = to.getClassLoader();\n+        if (canReferenceDirectly(cl1, cl2)) {\n+            return RetentionDirection.FORWARD;\n+        } else if (canReferenceDirectly(cl2, cl1)) {\n+            return RetentionDirection.REVERSE;\n+        }\n+        return RetentionDirection.NEITHER;\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/BiClassValue.java","additions":8,"deletions":19,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -66,3 +66,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -82,1 +79,0 @@\n-import jdk.dynalink.internal.AccessControlContextFactory;\n@@ -111,4 +107,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final AccessControlContext GET_CLASS_LOADER_CONTEXT =\n-            AccessControlContextFactory.createAccessControlContext(\"getClassLoader\");\n-\n@@ -433,1 +425,2 @@\n-        final ClassLoader effectiveClassLoader = classLoaderExplicitlySet ? classLoader : getThreadContextClassLoader();\n+        final ClassLoader effectiveClassLoader =\n+                classLoaderExplicitlySet ? classLoader : Thread.currentThread().getContextClassLoader();\n@@ -436,1 +429,0 @@\n-            @SuppressWarnings(\"removal\")\n@@ -438,6 +430,3 @@\n-                    AccessController.doPrivileged((PrivilegedAction<ServiceLoader<GuardingDynamicLinkerExporter>>)()-> {\n-                        if (effectiveClassLoader == null) {\n-                            return ServiceLoader.loadInstalled(GuardingDynamicLinkerExporter.class);\n-                        }\n-                        return ServiceLoader.load(GuardingDynamicLinkerExporter.class, effectiveClassLoader);\n-                    });\n+                    (effectiveClassLoader == null)\n+                ? ServiceLoader.loadInstalled(GuardingDynamicLinkerExporter.class)\n+                : ServiceLoader.load(GuardingDynamicLinkerExporter.class, effectiveClassLoader);\n@@ -473,7 +462,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static ClassLoader getThreadContextClassLoader() {\n-        return AccessController.doPrivileged(\n-            (PrivilegedAction<ClassLoader>) () -> Thread.currentThread().getContextClassLoader(),\n-            GET_CLASS_LOADER_CONTEXT);\n-    }\n-\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/DynamicLinkerFactory.java","additions":5,"deletions":23,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -48,2 +48,0 @@\n-    private static final RuntimePermission GET_LOOKUP_PERMISSION = new RuntimePermission(SecureLookupSupplier.GET_LOOKUP_PERMISSION_NAME);\n-\n@@ -66,5 +64,0 @@\n-        @SuppressWarnings(\"removal\")\n-        final SecurityManager sm = System.getSecurityManager();\n-        if (sm != null && lookup != MethodHandles.publicLookup()) {\n-            sm.checkPermission(GET_LOOKUP_PERMISSION);\n-        }\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/SecureLookupSupplier.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,2 +66,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -89,14 +87,6 @@\n-            try {\n-                \/\/ Need to use doPrivileged as getRecordComponents is rather strict.\n-                @SuppressWarnings(\"removal\")\n-                final RecordComponent[] rcs = AccessController.doPrivileged(\n-                    (PrivilegedAction<RecordComponent[]>) clazz::getRecordComponents);\n-                return Arrays.stream(rcs)\n-                    .map(RecordComponent::getAccessor)\n-                    .map(membersLookup::getAccessibleMethod)\n-                    .filter(Objects::nonNull) \/\/ no accessible counterpart\n-                    .toList();\n-            } catch (SecurityException e) {\n-                \/\/ We couldn't execute getRecordComponents.\n-                return List.of();\n-            }\n+            final RecordComponent[] rcs = clazz.getRecordComponents();\n+            return Arrays.stream(rcs)\n+                .map(RecordComponent::getAccessor)\n+                .map(membersLookup::getAccessibleMethod)\n+                .filter(Objects::nonNull) \/\/ no accessible counterpart\n+                .toList();\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/beans\/BeanIntrospector.java","additions":7,"deletions":17,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -70,3 +70,1 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n+\n@@ -74,2 +72,0 @@\n-import jdk.dynalink.SecureLookupSupplier;\n-import jdk.dynalink.internal.AccessControlContextFactory;\n@@ -85,4 +81,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final AccessControlContext GET_LOOKUP_CONTEXT =\n-            AccessControlContextFactory.createAccessControlContext(\n-                    SecureLookupSupplier.GET_LOOKUP_PERMISSION_NAME);\n@@ -130,4 +122,1 @@\n-        @SuppressWarnings(\"removal\")\n-        final MethodHandles.Lookup lookup = AccessController.doPrivileged(\n-                (PrivilegedAction<MethodHandles.Lookup>)desc::getLookup,\n-                GET_LOOKUP_CONTEXT);\n+        final MethodHandles.Lookup lookup = desc.getLookup();\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/beans\/CallerSensitiveDynamicMethod.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,4 +64,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import jdk.dynalink.internal.AccessControlContextFactory;\n@@ -73,3 +69,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final AccessControlContext NO_PERMISSIONS_CONTEXT =\n-            AccessControlContextFactory.createAccessControlContext();\n@@ -82,1 +75,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -100,15 +92,0 @@\n-\n-        final SecurityManager sm = System.getSecurityManager();\n-        if(sm == null) {\n-            \/\/ No further restrictions if we don't have a security manager\n-            return false;\n-        }\n-        \/\/ Do a package access check from within an access control context with no permissions\n-        try {\n-            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                sm.checkPackageAccess(pkgName);\n-                return null;\n-            }, NO_PERMISSIONS_CONTEXT);\n-        } catch(final SecurityException e) {\n-            return true;\n-        }\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/beans\/CheckRestrictedPackage.java","additions":1,"deletions":24,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -64,3 +64,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -70,1 +67,1 @@\n-import jdk.dynalink.internal.AccessControlContextFactory;\n+\n@@ -81,4 +78,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final AccessControlContext GET_CLASS_LOADER_CONTEXT =\n-            AccessControlContextFactory.createAccessControlContext(\"getClassLoader\");\n-\n@@ -131,1 +124,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -133,5 +125,3 @@\n-        return AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> {\n-            for(final Class<?> clazz: classes) {\n-                if(!InternalTypeUtilities.canReferenceDirectly(classLoader, clazz.getClassLoader())) {\n-                    return false;\n-                }\n+        for(final Class<?> clazz: classes) {\n+            if(!InternalTypeUtilities.canReferenceDirectly(classLoader, clazz.getClassLoader())) {\n+                return false;\n@@ -139,2 +129,2 @@\n-            return true;\n-        }, GET_CLASS_LOADER_CONTEXT);\n+        }\n+        return true;\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/beans\/ClassString.java","additions":6,"deletions":16,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -65,3 +65,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -76,1 +73,0 @@\n-import jdk.dynalink.SecureLookupSupplier;\n@@ -78,1 +74,0 @@\n-import jdk.dynalink.internal.AccessControlContextFactory;\n@@ -197,6 +192,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final AccessControlContext GET_CALL_SITE_CLASS_LOADER_CONTEXT =\n-            AccessControlContextFactory.createAccessControlContext(\n-                    \"getClassLoader\", SecureLookupSupplier.GET_LOOKUP_PERMISSION_NAME);\n-\n-    @SuppressWarnings(\"removal\")\n@@ -204,3 +193,1 @@\n-        return AccessController.doPrivileged(\n-            (PrivilegedAction<ClassLoader>) () -> callSiteDescriptor.getLookup().lookupClass().getClassLoader(),\n-            GET_CALL_SITE_CLASS_LOADER_CONTEXT);\n+        return callSiteDescriptor.getLookup().lookupClass().getClassLoader();\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/beans\/OverloadedDynamicMethod.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1,80 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.dynalink.internal;\n-\n-import java.security.AccessControlContext;\n-import java.security.Permission;\n-import java.security.Permissions;\n-import java.security.ProtectionDomain;\n-import java.util.stream.Stream;\n-\n-\/**\n- * Utility class for creating permission-restricting {@link AccessControlContext}s.\n- *\/\n-public final class AccessControlContextFactory {\n-    private AccessControlContextFactory () {\n-    }\n-\n-    \/**\n-     * Creates an access control context with no permissions.\n-     * @return an access control context with no permissions.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    public static AccessControlContext createAccessControlContext() {\n-        return createAccessControlContext(new Permission[0]);\n-    }\n-\n-    \/**\n-     * Creates an access control context limited to only the specified permissions.\n-     * @param permissions the permissions for the newly created access control context.\n-     * @return a new access control context limited to only the specified permissions.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    public static AccessControlContext createAccessControlContext(final Permission... permissions) {\n-        final Permissions perms = new Permissions();\n-        for(final Permission permission: permissions) {\n-            perms.add(permission);\n-        }\n-        return new AccessControlContext(new ProtectionDomain[] { new ProtectionDomain(null, perms) });\n-    }\n-\n-    \/**\n-     * Creates an access control context limited to only the {@link RuntimePermission}s\n-     * of the given names.\n-     * @param runtimePermissionNames the names of runtime permissions for the\n-     * newly created access control context.\n-     * @return a new access control context limited to only the runtime\n-     * permissions with the specified names.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    public static AccessControlContext createAccessControlContext(final String... runtimePermissionNames) {\n-        return createAccessControlContext(makeRuntimePermissions(runtimePermissionNames));\n-    }\n-\n-    private static Permission[] makeRuntimePermissions(final String... runtimePermissionNames) {\n-        return Stream.of(runtimePermissionNames).map(RuntimePermission::new).toArray(Permission[]::new);\n-    }\n-}\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/internal\/AccessControlContextFactory.java","additions":0,"deletions":80,"binary":false,"changes":80,"status":"deleted"},{"patch":"@@ -66,3 +66,0 @@\n-     * @throws SecurityException if the caller does not have the\n-     * {@code RuntimePermission(\"getClassLoader\")} permission and the method\n-     * needs to traverse the parent class loader chain.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/internal\/InternalTypeUtilities.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -55,2 +55,0 @@\n-    private static final Permission AUTOLOAD_PERMISSION = new RuntimePermission(AUTOLOAD_PERMISSION_NAME);\n-\n@@ -61,5 +59,0 @@\n-        @SuppressWarnings(\"removal\")\n-        final SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(AUTOLOAD_PERMISSION);\n-        }\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/linker\/GuardingDynamicLinkerExporter.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -118,5 +118,1 @@\n-     * interface for interoperability). Invoking the {@link Supplier#get()}\n-     * method on the passed supplier will be subject to the same security checks\n-     * as {@link SecureLookupSupplier#getLookup()}. An implementation should avoid\n-     * retrieving the lookup if it is not needed so as to avoid the expense of\n-     * {@code AccessController.doPrivileged} call.\n+     * interface for interoperability).\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/linker\/GuardingTypeConverterFactory.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -218,4 +218,1 @@\n-     * for the duration of the operation. Note that since you are passing a\n-     * {@link SecureLookupSupplier}, any invoked type converter factories will\n-     * still need to hold the necessary runtime permission to be able to get the\n-     * lookup should they need it.\n+     * for the duration of the operation.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/linker\/LinkerServices.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"}]}