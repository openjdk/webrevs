{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+const char* const LogFileOutput::HostnameFilenamePlaceholder = \"%hn\";\n@@ -45,0 +46,1 @@\n+char        LogFileOutput::_hostname_str[HostnameBufferSize];\n@@ -52,1 +54,1 @@\n-  _file_name = make_file_name(name + strlen(Prefix), _pid_str, _vm_start_time_str);\n+  _file_name = make_file_name(name + strlen(Prefix), _pid_str, _vm_start_time_str, _hostname_str);\n@@ -72,0 +74,5 @@\n+\n+  if (!os::get_host_name(_hostname_str, sizeof(_hostname_str))) {\n+    res = jio_snprintf(_hostname_str, sizeof(_hostname_str), \"%s\", HostnameFilenamePlaceholder);\n+    assert(res > 0, \"Hostname buffer too small\");\n+  }\n@@ -380,1 +387,2 @@\n-                                    const char* timestamp_string) {\n+                                    const char* timestamp_string,\n+                                    const char* hostname_string) {\n@@ -383,1 +391,1 @@\n-  \/\/ Lets start finding out if we have any %d and\/or %t in the name.\n+  \/\/ Lets start finding out if we have any %p, %t and\/or %hn in the name.\n@@ -387,0 +395,1 @@\n+  const char* hostname = strstr(file_name, HostnameFilenamePlaceholder);\n@@ -388,1 +397,1 @@\n-  if (pid == nullptr && timestamp == nullptr) {\n+  if (pid == nullptr && timestamp == nullptr && hostname == nullptr) {\n@@ -394,9 +403,1 @@\n-  const char* first = \"\";\n-  size_t first_pos = SIZE_MAX;\n-  size_t first_replace_len = 0;\n-\n-  const char* second = \"\";\n-  size_t second_pos = SIZE_MAX;\n-  size_t second_replace_len = 0;\n-\n-  \/\/ If we found a %p, then setup our variables accordingly\n+  size_t result_len =  strlen(file_name);\n@@ -404,9 +405,2 @@\n-    if (timestamp == nullptr || pid < timestamp) {\n-      first = pid_string;\n-      first_pos = pid - file_name;\n-      first_replace_len = strlen(PidFilenamePlaceholder);\n-    } else {\n-      second = pid_string;\n-      second_pos = pid - file_name;\n-      second_replace_len = strlen(PidFilenamePlaceholder);\n-    }\n+    result_len -= strlen(PidFilenamePlaceholder);\n+    result_len += strlen(pid_string);\n@@ -414,1 +408,0 @@\n-\n@@ -416,9 +409,6 @@\n-    if (pid == nullptr || timestamp < pid) {\n-      first = timestamp_string;\n-      first_pos = timestamp - file_name;\n-      first_replace_len = strlen(TimestampFilenamePlaceholder);\n-    } else {\n-      second = timestamp_string;\n-      second_pos = timestamp - file_name;\n-      second_replace_len = strlen(TimestampFilenamePlaceholder);\n-    }\n+    result_len -= strlen(TimestampFilenamePlaceholder);\n+    result_len += strlen(timestamp_string);\n+  }\n+  if (hostname != nullptr) {\n+    result_len -= strlen(HostnameFilenamePlaceholder);\n+    result_len += strlen(hostname_string);\n@@ -426,4 +416,0 @@\n-\n-  size_t first_len = strlen(first);\n-  size_t second_len = strlen(second);\n-\n@@ -431,1 +417,0 @@\n-  size_t result_len =  strlen(file_name) + first_len - first_replace_len + second_len - second_replace_len;\n@@ -437,0 +422,4 @@\n+\n+  assert(PidFilenamePlaceholder[0] == '%' &&\n+         TimestampFilenamePlaceholder[0] == '%' &&\n+         HostnameFilenamePlaceholder[0] == '%', \"must be\");\n@@ -438,16 +427,29 @@\n-    if (file_name_pos == first_pos) {\n-      \/\/ We are in the range of the first placeholder\n-      strcpy(result + i, first);\n-      \/\/ Bump output buffer position with length of replacing string\n-      i += first_len;\n-      \/\/ Bump source buffer position to skip placeholder\n-      file_name_pos += first_replace_len;\n-    } else if (file_name_pos == second_pos) {\n-      \/\/ We are in the range of the second placeholder\n-      strcpy(result + i, second);\n-      i += second_len;\n-      file_name_pos += second_replace_len;\n-    } else {\n-      \/\/ Else, copy char by char of the original file\n-      result[i] = file_name[file_name_pos++];\n-      i++;\n+    if (file_name[file_name_pos] == '%') {\n+      \/\/ Replace the first occurrence of any placeholder\n+      if (pid != nullptr && strncmp(&file_name[file_name_pos],\n+                                    PidFilenamePlaceholder,\n+                                    strlen(PidFilenamePlaceholder)) == 0) {\n+        strcpy(result + i, pid_string);\n+        i += strlen(pid_string);\n+        file_name_pos += strlen(PidFilenamePlaceholder);\n+        pid = nullptr;\n+        continue;\n+      }\n+      if (timestamp != nullptr && strncmp(&file_name[file_name_pos],\n+                                          TimestampFilenamePlaceholder,\n+                                          strlen(TimestampFilenamePlaceholder)) == 0) {\n+        strcpy(result + i, timestamp_string);\n+        i += strlen(timestamp_string);\n+        file_name_pos += strlen(TimestampFilenamePlaceholder);\n+        timestamp = nullptr;\n+        continue;\n+      }\n+      if (hostname != nullptr && strncmp(&file_name[file_name_pos],\n+                                         HostnameFilenamePlaceholder,\n+                                         strlen(HostnameFilenamePlaceholder)) == 0) {\n+        strcpy(result + i, hostname_string);\n+        i += strlen(hostname_string);\n+        file_name_pos += strlen(HostnameFilenamePlaceholder);\n+        hostname = nullptr;\n+        continue;\n+      }\n@@ -455,0 +457,2 @@\n+    \/\/ Else, copy char by char of the original file\n+    result[i++] = file_name[file_name_pos++];\n@@ -456,0 +460,3 @@\n+  assert(i == result_len, \"should be\");\n+  assert(file_name[file_name_pos] == '\\0', \"should be\");\n+\n","filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp","additions":61,"deletions":54,"binary":false,"changes":115,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+  static const char* const HostnameFilenamePlaceholder;\n@@ -46,0 +47,1 @@\n+  static const size_t HostnameBufferSize = 512;\n@@ -49,0 +51,1 @@\n+  static char         _hostname_str[HostnameBufferSize];\n@@ -68,1 +71,2 @@\n-  char *make_file_name(const char* file_name, const char* pid_string, const char* timestamp_string);\n+  char *make_file_name(const char* file_name, const char* pid_string, const char* timestamp_string,\n+                       const char* hostname_string);\n","filename":"src\/hotspot\/share\/logging\/logFileOutput.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}