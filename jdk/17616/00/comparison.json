{"files":[{"patch":"@@ -652,0 +652,6 @@\n+bool DefNewGeneration::is_in(const void* p) const {\n+  return eden()->is_in(p)\n+      || from()->is_in(p)\n+      || to()  ->is_in(p);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -178,0 +178,3 @@\n+  \/\/ Returns \"TRUE\" iff \"p\" points into the used areas in each space of young-gen.\n+  bool is_in(const void* p) const;\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -86,20 +86,0 @@\n-\/\/ Utility iterator classes\n-\n-class GenerationIsInClosure : public SpaceClosure {\n- public:\n-  const void* _p;\n-  Space* sp;\n-  virtual void do_space(Space* s) {\n-    if (sp == nullptr) {\n-      if (s->is_in(_p)) sp = s;\n-    }\n-  }\n-  GenerationIsInClosure(const void* p) : _p(p), sp(nullptr) {}\n-};\n-\n-bool Generation::is_in(const void* p) const {\n-  GenerationIsInClosure blk(p);\n-  ((Generation*)this)->space_iterate(&blk);\n-  return blk.sp != nullptr;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/generation.cpp","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -126,7 +126,0 @@\n-  \/\/ Returns \"TRUE\" iff \"p\" points into the committed areas in the generation.\n-  \/\/ For some kinds of generations, this may be an expensive operation.\n-  \/\/ To avoid performance problems stemming from its inadvertent use in\n-  \/\/ product jvm's, we restrict its use to assertion checking or\n-  \/\/ verification only.\n-  virtual bool is_in(const void* p) const;\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/generation.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"}]}