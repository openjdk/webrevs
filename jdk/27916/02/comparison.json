{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -29,1 +29,5 @@\n- * @run main\/manual=yesno PageRanges\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n+ * @run main\/manual PageRanges\n@@ -32,2 +36,6 @@\n-import java.awt.*;\n-import java.awt.print.*;\n+import java.awt.Graphics;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+import jtreg.SkippedException;\n@@ -36,8 +44,7 @@\n-\n-    static String[] instr = {\n-     \"This test prints two jobs, and tests that the specified range\",\n-     \"of pages is printed. You must have a printer installed for this test.\",\n-     \"In the first dialog, select a page range of 2 to 3, and press OK\",\n-     \"In the second dialog, select ALL, to print all pages (in total 5 pages).\",\n-     \"Collect the two print outs and confirm the jobs printed correctly\",\n-    };\n+    private static final String INSTRUCTIONS = \"\"\"\n+                 This test prints two jobs and tests that the specified range\n+                 of pages is printed.\n+                 In the first dialog, select a page range of 2 to 3, and press OK.\n+                 In the second dialog, select ALL, to print all pages (in total 5 pages).\n+                 Collect the two print outs and confirm the jobs are printed correctly.\n+                 \"\"\";\n@@ -46,3 +53,0 @@\n-        for (int i=0;i<instr.length;i++) {\n-            System.out.println(instr[i]);\n-        }\n@@ -51,2 +55,1 @@\n-           System.out.println(\"No printers. Test cannot continue.\");\n-           return;\n+            throw new SkippedException(\"Printer not configured or available.\");\n@@ -54,0 +57,7 @@\n+\n+        PassFailJFrame passFailJFrame = PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(45)\n+                .build();\n+\n@@ -55,2 +65,2 @@\n-        if (!job.printDialog()) {\n-           return;\n+        if (job.printDialog()) {\n+            job.print();\n@@ -58,3 +68,2 @@\n-        job.print();\n-        if (!job.printDialog()) {\n-           return;\n+        if (job.printDialog()) {\n+            job.print();\n@@ -62,1 +71,0 @@\n-        job.print();\n@@ -64,1 +72,1 @@\n-        return;\n+        passFailJFrame.awaitAndCheck();\n@@ -68,2 +76,1 @@\n-                     throws PrinterException  {\n-\n+                     throws PrinterException {\n@@ -75,1 +82,0 @@\n-\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PageRanges.java","additions":34,"deletions":28,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,2 @@\n-\/**\n+\/*\n+ * @test\n@@ -28,1 +29,3 @@\n- * @run main\/manual=yesno PolylinePrintingTest\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual PolylinePrintingTest\n@@ -31,3 +34,0 @@\n-import java.awt.Dialog;\n-import java.awt.Frame;\n-import java.awt.TextArea;\n@@ -45,0 +45,18 @@\n+    private static final String INSTRUCTIONS = \"\"\"\n+              You must have a printer available to perform this test.\n+              Click OK in the print dialog and collect the printed page.\n+              Passing test : Output should show two identical chevrons.\n+              Failing test : The line joins will appear different.\n+              \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame passFailJFrame = PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(45)\n+                .build();\n+\n+        new PolylinePrintingTest();\n+\n+        passFailJFrame.awaitAndCheck();\n+    }\n@@ -98,12 +116,0 @@\n-\n-    public static void main(String[] args) throws PrinterException {\n-        String[] instructions = {\n-             \"You must have a printer available to perform this test.\",\n-             \"OK the print dialog, and collect the printed page.\",\n-             \"Passing test : Output should show two identical chevrons.\",\n-             \"Failing test : The line joins will appear different.\"\n-           };\n-        Sysout.createDialog();\n-        Sysout.printInstructions(instructions);\n-        new PolylinePrintingTest();\n-    }\n@@ -111,113 +117,0 @@\n-\n-class Sysout {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-  TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n-}\/\/ TestDialog  class\n-\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PolylinePrintingTest.java","additions":24,"deletions":131,"binary":false,"changes":155,"status":"modified"}]}