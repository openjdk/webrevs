{"files":[{"patch":"@@ -26,0 +26,2 @@\n+import module jdk.httpserver;\n+\n@@ -104,0 +106,9 @@\n+ * @implNote\n+ * Prior to JDK 26, in the JDK default implementation, the {@link HttpExchange} attribute map was\n+ * shared with the enclosing {@link HttpContext}.\n+ * Since JDK 26, by default, exchange attributes are per-exchange and the context attributes must\n+ * be accessed by calling {@link HttpExchange#getHttpContext() getHttpContext()}{@link\n+ * HttpContext#getAttributes() .getAttributes()}. <br>\n+ * A new system property, <b>{@systemProperty jdk.httpserver.attributes}<\/b> (default value: {@code \"\"})\n+ * allows to revert this new behavior. Set this property to \"context\" to restore the pre JDK 26 behavior.\n+ *\n","filename":"src\/jdk.httpserver\/share\/classes\/module-info.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.concurrent.ConcurrentHashMap;\n@@ -62,0 +63,3 @@\n+    private static final boolean perExchangeAttributes =\n+        !System.getProperty(\"jdk.httpserver.attributes\", \"\")\n+              .equals(\"context\");\n@@ -79,1 +83,1 @@\n-    Map<String,Object> attributes;\n+    final Map<String,Object> attributes;\n@@ -94,0 +98,3 @@\n+        this.attributes = perExchangeAttributes\n+            ? new ConcurrentHashMap<>()\n+            : getHttpContext().getAttributes();\n@@ -364,7 +371,1 @@\n-        if (name == null) {\n-            throw new NullPointerException (\"null name parameter\");\n-        }\n-        if (attributes == null) {\n-            attributes = getHttpContext().getAttributes();\n-        }\n-        return attributes.get (name);\n+        return attributes.get(Objects.requireNonNull(name, \"null name parameter\"));\n@@ -374,6 +375,1 @@\n-        if (name == null) {\n-            throw new NullPointerException (\"null name parameter\");\n-        }\n-        if (attributes == null) {\n-            attributes = getHttpContext().getAttributes();\n-        }\n+        var key = Objects.requireNonNull(name, \"null name parameter\");\n@@ -381,1 +377,1 @@\n-            attributes.put (name, value);\n+            attributes.put(key, value);\n@@ -383,1 +379,1 @@\n-            attributes.remove (name);\n+            attributes.remove(key);\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/ExchangeImpl.java","additions":12,"deletions":16,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 7105350\n+ * @summary Test HttpExchange set\/getAttribute do not affect HttpContext attributes\n+ * @library \/test\/lib\n+ * @run junit\/othervm ExchangeAttributePerExchangeTest\n+ *\/\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+import jdk.test.lib.net.URIBuilder;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.logging.ConsoleHandler;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import static java.net.http.HttpClient.Builder.NO_PROXY;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class ExchangeAttributePerExchangeTest {\n+\n+    static final InetAddress LOOPBACK_ADDR = InetAddress.getLoopbackAddress();\n+    static final boolean ENABLE_LOGGING = true;\n+    static final Logger logger = Logger.getLogger(\"com.sun.net.httpserver\");\n+\n+    @BeforeAll\n+    public static void setup() {\n+        if (ENABLE_LOGGING) {\n+            ConsoleHandler ch = new ConsoleHandler();\n+            logger.setLevel(Level.ALL);\n+            ch.setLevel(Level.ALL);\n+            logger.addHandler(ch);\n+        }\n+    }\n+\n+    @Test\n+    public void testExchangeAttributes() throws Exception {\n+        var handler = new AttribHandler();\n+        var server = HttpServer.create(new InetSocketAddress(LOOPBACK_ADDR,0), 10);\n+        server.createContext(\"\/\", handler).getAttributes().put(\"attr\", \"context-val\");\n+        server.start();\n+        try {\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"\")).build();\n+            var response = client.send(request, HttpResponse.BodyHandlers.ofString());\n+            assertEquals(200, response.statusCode());\n+        } finally {\n+            server.stop(0);\n+        }\n+    }\n+\n+    \/\/ --- infra ---\n+\n+    static URI uri(HttpServer server, String path) throws URISyntaxException {\n+        return URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .loopback()\n+                .port(server.getAddress().getPort())\n+                .path(path)\n+                .build();\n+    }\n+\n+    \/**\n+     * A test handler that discards the request and sends a response\n+     *\/\n+    static class AttribHandler implements HttpHandler {\n+        @java.lang.Override\n+        public void handle(HttpExchange exchange) throws IOException {\n+            try {\n+                assertNull(exchange.getAttribute(\"attr\"));\n+                exchange.setAttribute(\"attr\", \"val\");\n+                assertEquals(\"val\", exchange.getAttribute(\"attr\"))\n+                assertNotEquals(\"val\", exchange.getHttpContext().getAttributes().get(\"attr\"));\n+                exchange.setAttribute(\"attr\", null);\n+                assertNull(exchange.getAttribute(\"attr\"));\n+                exchange.sendResponseHeaders(200, -1);\n+            } catch (Throwable t) {\n+                t.printStackTrace();\n+                exchange.sendResponseHeaders(500, -1);\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/ExchangeAttributePerExchangeTest.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -72,0 +72,1 @@\n+        System.getProperty(\"jdk.httpserver.attributes\", \"context\")\n@@ -74,1 +75,1 @@\n-        server.createContext(\"\/\", handler);\n+        server.createContext(\"\/\", handler).getAttributes().put(\"attr\", \"context-val\");\n@@ -105,1 +106,2 @@\n-                assertEquals(\"val\", exchange.getAttribute(\"attr\"));\n+                assertEquals(\"val\", exchange.getAttribute(\"attr\"))\n+                assertEquals(\"val\", exchange.getHttpContext().getAttributes().get(\"attr\"));\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/ExchangeAttributeTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}