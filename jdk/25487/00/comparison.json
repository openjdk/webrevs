{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,11 @@\n-        UNSAFE.setMemory(base, size, (byte) 0);\n+\n+        long chunkSize = 1024 * 1024; \/\/ 1MB per chunk\n+        long offset = 0;\n+\n+        while (offset < size) {\n+            long len = Math.min(chunkSize, size - offset);\n+            UNSAFE.setMemory(base + offset, len, (byte) 0);\n+            offset += len;\n+        }\n+\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.nio;\n+\n+\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Measurement(iterations = 5)\n+@Warmup(iterations = 5)\n+public class ByteBufferAllocationBenchmark {\n+\n+    @Param({\n+            \"128\", \/\/ 128 bytes\n+            \"1024\", \/\/ 1KB\n+            \"1048576\", \/\/ 1 MB\n+            \"2147483647\" \/\/ ~2 GB\n+    })\n+    public int bytes;\n+\n+    @Benchmark\n+    public ByteBuffer allocateDirectBuffer() {\n+        return ByteBuffer.allocateDirect(bytes);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/ByteBufferAllocationBenchmark.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"}]}