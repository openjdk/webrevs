{"files":[{"patch":"@@ -247,1 +247,1 @@\n-     * @param size\n+     * @param count\n@@ -252,1 +252,1 @@\n-    static void setMemory(long srcAddr, long size, byte value) {\n+    static void setMemory(long srcAddr, long count, byte value) {\n@@ -254,3 +254,2 @@\n-        long len = 0;\n-        while (offset < size) {\n-            len = Math.min(UNSAFE_SET_THRESHOLD, size - offset);\n+        while (offset < count) {\n+            long len = Math.min(UNSAFE_SET_THRESHOLD, count - offset);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Bits.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -26,1 +26,4 @@\n- * @bug 4490253 6535542\n+ * @bug 4490253 6535542 8357959\n+ * @key randomness\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.RandomFactory\n@@ -28,0 +31,1 @@\n+ * @run main\/othervm AllocateDirectInit\n@@ -31,0 +35,3 @@\n+import java.util.Random;\n+\n+import jdk.test.lib.RandomFactory;\n@@ -33,0 +40,6 @@\n+    private static final int MAX_BIN_LIMIT = 16 * 1024 * 1024;\n+    private static final int MAX_DEC_LIMIT = 10 * 1000 * 1000;\n+    private static final int TRIES_PER_LIMIT = 1024;\n+\n+    private static final Random RND = RandomFactory.getRandom();\n+\n@@ -34,7 +47,18 @@\n-        for (int i = 0; i < 1024; i++) {\n-            ByteBuffer bb = ByteBuffer.allocateDirect(1024);\n-\/\/          printByteBuffer(bb);\n-            for (bb.position(0); bb.position() < bb.limit(); ) {\n-                if ((bb.get() & 0xff) != 0)\n-                    throw new RuntimeException(\"uninitialized buffer, position = \"\n-                                               + bb.position());\n+        \/\/ Try power of two limits\n+        for (int limit = 1; limit < MAX_BIN_LIMIT; limit *= 2) {\n+            check(ByteBuffer.allocateDirect(limit - 1));\n+            check(ByteBuffer.allocateDirect(limit));\n+            check(ByteBuffer.allocateDirect(limit + 1));\n+        }\n+\n+        \/\/ Try power of ten limits\n+        for (int limit = 1; limit < MAX_DEC_LIMIT; limit *= 10) {\n+            check(ByteBuffer.allocateDirect(limit - 1));\n+            check(ByteBuffer.allocateDirect(limit));\n+            check(ByteBuffer.allocateDirect(limit + 1));\n+        }\n+\n+        \/\/ Try random sizes within power of two limits\n+        for (int limit = 1; limit < MAX_BIN_LIMIT; limit *= 2) {\n+            for (int t = 0; t < TRIES_PER_LIMIT; t++) {\n+                check(ByteBuffer.allocateDirect(RND.nextInt(limit)));\n@@ -45,5 +69,12 @@\n-    private static void printByteBuffer(ByteBuffer bb) {\n-        System.out.print(\"byte [\");\n-        for (bb.position(0); bb.position() < bb.limit(); )\n-            System.out.print(\" \" + Integer.toHexString(bb.get() & 0xff));\n-        System.out.println(\" ]\");\n+    private static void check(ByteBuffer bb) {\n+        for (bb.position(0); bb.position() < bb.limit(); ) {\n+            if (bb.get() != 0) {\n+                int mismatchPos = bb.position();\n+                System.out.print(\"byte [\");\n+                for (bb.position(0); bb.position() < bb.limit(); ) {\n+                    System.out.print(\" \" + Integer.toHexString(bb.get() & 0xff));\n+                }\n+                System.out.println(\" ]\");\n+                throw new RuntimeException(\"uninitialized buffer, position = \" + mismatchPos);\n+            }\n+        }\n","filename":"test\/jdk\/java\/nio\/Buffer\/AllocateDirectInit.java","additions":44,"deletions":13,"binary":false,"changes":57,"status":"modified"}]}