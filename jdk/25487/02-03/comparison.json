{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -237,0 +237,26 @@\n+\n+    \/\/ Maximum number of bytes to set in one call to {@code Unsafe.setMemory}.\n+    \/\/ This threshold allows safepoint polling during large memory operations.\n+    static final long UNSAFE_SET_THRESHOLD = 1024 * 1024;\n+\n+    \/**\n+     * Sets a block of memory starting from a given address to a specified byte value.\n+     *\n+     * @param srcAddr\n+     *        the starting memory address\n+     * @param size\n+     *        the number of bytes to set\n+     * @param value\n+     *        the byte value to set\n+     *\/\n+    static void setMemory(long srcAddr, long size, byte value) {\n+        \/\/ Zero in chunks to avoid blocking safepoints for too long\n+        long offset = 0;\n+        long len = 0;\n+        while (offset < size) {\n+            len = Math.min(UNSAFE_SET_THRESHOLD, size - offset);\n+            UNSAFE.setMemory(srcAddr + offset, len, value);\n+            offset += len;\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Bits.java","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -74,1 +74,0 @@\n-    private static final long MEM_ZERO_CHUNK_SIZE = 1024 * 1024;\n@@ -118,9 +117,1 @@\n-\n-        \/\/ Zero in chunks to avoid blocking safepoints for too long\n-        long offset = 0;\n-        while (offset < size) {\n-            long len = Math.min(MEM_ZERO_CHUNK_SIZE, size - offset);\n-            UNSAFE.setMemory(base + offset, len, (byte) 0);\n-            offset += len;\n-        }\n-\n+        Bits.setMemory(base, size, (byte) 0);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"}]}