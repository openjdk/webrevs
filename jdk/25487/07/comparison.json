{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -237,0 +237,24 @@\n+\n+    \/\/ Maximum number of bytes to set in one call to {@code Unsafe.setMemory}.\n+    \/\/ This threshold allows safepoint polling during large memory operations.\n+    static final long UNSAFE_SET_THRESHOLD = 1024 * 1024;\n+\n+    \/**\n+     * Sets a block of memory starting from a given address to a specified byte value.\n+     *\n+     * @param srcAddr\n+     *        the starting memory address\n+     * @param count\n+     *        the number of bytes to set\n+     * @param value\n+     *        the byte value to set\n+     *\/\n+    static void setMemory(long srcAddr, long count, byte value) {\n+        long offset = 0;\n+        while (offset < count) {\n+            long len = Math.min(UNSAFE_SET_THRESHOLD, count - offset);\n+            UNSAFE.setMemory(srcAddr + offset, len, value);\n+            offset += len;\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Bits.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        UNSAFE.setMemory(base, size, (byte) 0);\n+        Bits.setMemory(base, size, (byte) 0);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,4 @@\n- * @bug 4490253 6535542\n+ * @bug 4490253 6535542 8357959\n+ * @key randomness\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.RandomFactory\n@@ -28,0 +31,1 @@\n+ * @run main\/othervm AllocateDirectInit\n@@ -31,0 +35,3 @@\n+import java.util.Random;\n+\n+import jdk.test.lib.RandomFactory;\n@@ -33,0 +40,6 @@\n+    private static final int MAX_BIN_LIMIT = 16 * 1024 * 1024;\n+    private static final int MAX_DEC_LIMIT = 10 * 1000 * 1000;\n+    private static final int TRIES_PER_LIMIT = 1024;\n+\n+    private static final Random RND = RandomFactory.getRandom();\n+\n@@ -34,7 +47,18 @@\n-        for (int i = 0; i < 1024; i++) {\n-            ByteBuffer bb = ByteBuffer.allocateDirect(1024);\n-\/\/          printByteBuffer(bb);\n-            for (bb.position(0); bb.position() < bb.limit(); ) {\n-                if ((bb.get() & 0xff) != 0)\n-                    throw new RuntimeException(\"uninitialized buffer, position = \"\n-                                               + bb.position());\n+        \/\/ Try power of two limits\n+        for (int limit = 1; limit < MAX_BIN_LIMIT; limit *= 2) {\n+            check(ByteBuffer.allocateDirect(limit - 1));\n+            check(ByteBuffer.allocateDirect(limit));\n+            check(ByteBuffer.allocateDirect(limit + 1));\n+        }\n+\n+        \/\/ Try power of ten limits\n+        for (int limit = 1; limit < MAX_DEC_LIMIT; limit *= 10) {\n+            check(ByteBuffer.allocateDirect(limit - 1));\n+            check(ByteBuffer.allocateDirect(limit));\n+            check(ByteBuffer.allocateDirect(limit + 1));\n+        }\n+\n+        \/\/ Try random sizes within power of two limits\n+        for (int limit = 1; limit < MAX_BIN_LIMIT; limit *= 2) {\n+            for (int t = 0; t < TRIES_PER_LIMIT; t++) {\n+                check(ByteBuffer.allocateDirect(RND.nextInt(limit)));\n@@ -45,5 +69,12 @@\n-    private static void printByteBuffer(ByteBuffer bb) {\n-        System.out.print(\"byte [\");\n-        for (bb.position(0); bb.position() < bb.limit(); )\n-            System.out.print(\" \" + Integer.toHexString(bb.get() & 0xff));\n-        System.out.println(\" ]\");\n+    private static void check(ByteBuffer bb) {\n+        for (bb.position(0); bb.position() < bb.limit(); ) {\n+            if (bb.get() != 0) {\n+                int mismatchPos = bb.position();\n+                System.out.print(\"byte [\");\n+                for (bb.position(0); bb.position() < bb.limit(); ) {\n+                    System.out.print(\" \" + Integer.toHexString(bb.get() & 0xff));\n+                }\n+                System.out.println(\" ]\");\n+                throw new RuntimeException(\"uninitialized buffer, position = \" + mismatchPos);\n+            }\n+        }\n","filename":"test\/jdk\/java\/nio\/Buffer\/AllocateDirectInit.java","additions":44,"deletions":13,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+package org.openjdk.bench.java.nio;\n+\n+\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n+public class DirectByteBufferAlloc {\n+\n+    @Param({\n+            \"128\", \/\/ 128 bytes\n+            \"1024\", \/\/ 1KB\n+            \"1048576\", \/\/ 1 MB\n+            \"16777216\" \/\/ 16MB\n+    })\n+    public int bytes;\n+\n+    @Benchmark\n+    public ByteBuffer allocateDirectBuffer() {\n+        return ByteBuffer.allocateDirect(bytes);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/DirectByteBufferAlloc.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"}]}