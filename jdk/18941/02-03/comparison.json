{"files":[{"patch":"@@ -145,1 +145,4 @@\n-static const size_t DEFAULT_MAX_ADDRESS_BIT = XMaxAddressOffsetBits + XAddressableMetadataBits - 1;\n+\/\/ Default value if probing is not implemented for a certain platform: 64TB\n+\/\/ It is also restricted by implicit assumptions in the code, for instance\n+\/\/ the bit layout of XForwardingEntry or Partial array entry (see XMarkStackEntry) in mark stack\n+static const size_t DEFAULT_MAX_ADDRESS_BIT = 46;\n@@ -200,1 +203,1 @@\n-  const size_t max_address_offset_bits = valid_max_address_offset_bits - XAddressableMetadataBits;\n+  const size_t max_address_offset_bits = valid_max_address_offset_bits - 3;\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/x\/xGlobals_aarch64.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -39,1 +39,4 @@\n-static const size_t DEFAULT_MAX_ADDRESS_BIT = ZMaxAddressOffsetBits - 1;\n+\/\/ Default value if probing is not implemented for a certain platform: 64TB\n+\/\/ It is also restricted by implicit assumptions in the code, for instance\n+\/\/ the bit layout of XForwardingEntry or Partial array entry (see XMarkStackEntry) in mark stack\n+static const size_t DEFAULT_MAX_ADDRESS_BIT = 46;\n@@ -93,1 +96,2 @@\n-  const static size_t max_address_offset_bits = probe_valid_max_address_bit() + 1;\n+  const static size_t valid_max_address_offset_bits = probe_valid_max_address_bit() + 1;\n+  const size_t max_address_offset_bits = valid_max_address_offset_bits - 3;\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/zAddress_aarch64.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -85,2 +85,0 @@\n-static const unsigned int MAX_ADDRESS_BIT_LIMIT = XMaxAddressOffsetBits + XAddressableMetadataBits - 1;\n-\n@@ -174,1 +172,1 @@\n-    if ((max_valid_address_bit == init_bit) && (max_valid_address_bit < MAX_ADDRESS_BIT_LIMIT)) {\n+    if (max_valid_address_bit == init_bit) {\n@@ -195,1 +193,1 @@\n-  const size_t max_address_offset_bits = valid_max_address_offset_bits - XAddressableMetadataBits;\n+  const size_t max_address_offset_bits = valid_max_address_offset_bits - 3;\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/x\/xGlobals_ppc.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,1 +38,2 @@\n-static const size_t DEFAULT_MAX_ADDRESS_BIT = ZMaxAddressOffsetBits - 1;\n+\/\/ Default value if probing is not implemented for a certain platform: 128TB\n+static const size_t DEFAULT_MAX_ADDRESS_BIT = 47;\n@@ -92,1 +93,2 @@\n-  const static size_t max_address_offset_bits = probe_valid_max_address_bit() + 1;\n+  const static size_t valid_max_address_offset_bits = probe_valid_max_address_bit() + 1;\n+  const size_t max_address_offset_bits = valid_max_address_offset_bits - 3;\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/z\/zAddress_ppc.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -147,1 +147,2 @@\n-static const size_t DEFAULT_MAX_ADDRESS_BIT = XMaxAddressOffsetBits + XAddressableMetadataBits - 1;\n+\/\/ Default value if probing is not implemented for a certain platform: 128TB\n+static const size_t DEFAULT_MAX_ADDRESS_BIT = 47;\n@@ -202,1 +203,1 @@\n-  const size_t max_address_offset_bits = valid_max_address_offset_bits - XAddressableMetadataBits;\n+  const size_t max_address_offset_bits = valid_max_address_offset_bits - 3;\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/x\/xGlobals_riscv.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -40,1 +40,2 @@\n-static const size_t DEFAULT_MAX_ADDRESS_BIT = ZMaxAddressOffsetBits - 1;\n+\/\/ Default value if probe is not implemented for a certain platform: 128TB\n+static const size_t DEFAULT_MAX_ADDRESS_BIT = 47;\n@@ -94,1 +95,2 @@\n-  const static size_t max_address_offset_bits = probe_valid_max_address_bit() + 1;\n+  const static size_t valid_max_address_offset_bits = probe_valid_max_address_bit() + 1;\n+  const size_t max_address_offset_bits = valid_max_address_offset_bits - 3;\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/z\/zAddress_riscv.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -140,1 +140,0 @@\n-  const size_t max_address_offset_bits = XMaxAddressOffsetBits;\n@@ -142,3 +141,1 @@\n-  assert(max_address_offset_bits >= min_address_offset_bits,\n-         \"max_address_offset_bits %zu cannot be less than min_address_offset_bits %zu\",\n-         max_address_offset_bits, min_address_offset_bits);\n+  const size_t max_address_offset_bits = 44; \/\/ 16TB\n","filename":"src\/hotspot\/cpu\/x86\/gc\/x\/xGlobals_x86.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-  const size_t max_address_offset_bits = ZMaxAddressOffsetBits;\n@@ -36,3 +35,1 @@\n-  assert(max_address_offset_bits >= min_address_offset_bits,\n-         \"max_address_offset_bits %zu cannot be less than min_address_offset_bits %zu\",\n-         max_address_offset_bits, min_address_offset_bits);\n+  const size_t max_address_offset_bits = 44; \/\/ 16TB\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/zAddress_x86.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -105,3 +105,0 @@\n-\/\/ Maximum value of addressable offset bits is set to 44 based on the\n-\/\/ maximum address space requirement of 16 TB.\n-const size_t      XMaxAddressOffsetBits  = 44;\n@@ -114,1 +111,0 @@\n-\/\/ Finalizable bit doesn't need to be addressable\n@@ -116,1 +112,0 @@\n-const size_t      XAddressableMetadataBits      = XAddressMetadataBits - 1;\n","filename":"src\/hotspot\/share\/gc\/x\/xGlobals.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -37,3 +37,0 @@\n-\/\/ Default maximum value of addressable offset bits is set to 44 based on the\n-\/\/ maximum address space requirement of 16 TB.\n-const size_t     ZMaxAddressOffsetBits  = 44;\n","filename":"src\/hotspot\/share\/gc\/z\/zAddress.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}