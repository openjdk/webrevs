{"files":[{"patch":"@@ -420,0 +420,4 @@\n+                \/\/ Using --limit-modules with ALL-MODULE-PATH is an error\n+                if (!options.limitMods.isEmpty()) {\n+                    throw taskHelper.newBadArgs(\"err.limit.modules\");\n+                }\n@@ -439,5 +443,2 @@\n-                \/\/ run-time image. Only do this if no --limit-modules has been\n-                \/\/ specified to begin with.\n-                ModuleFinder mf = limitFinder(finder,\n-                                              options.limitMods.isEmpty() ? initialRoots : options.limitMods,\n-                                              Set.of());\n+                \/\/ run-time image.\n+                ModuleFinder mf = limitFinder(finder, initialRoots, Set.of());\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/JlinkTask.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -132,0 +132,1 @@\n+err.limit.modules=--limit-modules not allowed with --add-modules ALL-MODULE-PATH\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/jlink.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-import jdk.test.lib.process.OutputAnalyzer;\n@@ -129,2 +128,3 @@\n-     * --add-modules ALL-MODULE-PATH with an existing module path and module\n-     * limits applied. Module limit on module from module path.\n+     * Since ALL-MODULE-PATH does not allow --limit-modules. Add a test that\n+     * includes just a single module from the module path. This is just for\n+     * completeness and shows the intended replacement.\n@@ -133,1 +133,1 @@\n-    public void testLimitModules() throws Throwable {\n+    public void testSubsetModules() throws Throwable {\n@@ -140,0 +140,1 @@\n+        \/\/ Instead of --add-modules ALL-MODULE-PATH [...] --limit-modules m1 do:\n@@ -142,2 +143,1 @@\n-                                    \"--add-modules\", \"ALL-MODULE-PATH\",\n-                                    \"--limit-modules\", \"m1\");\n+                                    \"--add-modules\", \"m1\");\n@@ -151,2 +151,0 @@\n-     * and module limits applied. Module limit on a dependency, but custom\n-     * modules explicitly listed (therefore, expect inclusion of them).\n@@ -165,2 +163,1 @@\n-                                    \"--add-modules\", \"ALL-MODULE-PATH\",\n-                                    \"--limit-modules\", \"java.base\");\n+                                    \"--add-modules\", \"ALL-MODULE-PATH\");\n@@ -200,1 +197,1 @@\n-            throw new RuntimeException(\"Test setup error, path must not exist!\");\n+            throw new AssertionError(\"Test setup error, path must not exist!\");\n@@ -213,4 +210,1 @@\n-     * --add-modules ALL-MODULE-PATH with an existing module path and module\n-     * limits applied. This case tests a module limit on a dependency, jdk.jfr,\n-     * and *doesn't* list the module explicitly in --add-modules. Therefore,\n-     * expects for the module - on the module path - to not be present.\n+     * --add-modules ALL-MODULE-PATH with --limit-modules is an error\n@@ -219,1 +213,1 @@\n-    public void modulePathWithLimitMods() throws Exception {\n+    public void testLimitModules() throws Exception {\n@@ -228,1 +222,1 @@\n-                                       \"--limit-modules\", \"jdk.jfr\", \/\/ A dependency of com.baz.runtime\n+                                       \"--limit-modules\", \"jdk.jfr\",\n@@ -231,5 +225,4 @@\n-        JlinkOutput allOut = createImage(targetPath, allArgs, true \/* success *\/);\n-        assertTrue(allOut.stdout.isEmpty());\n-        assertTrue(allOut.stderr.isEmpty());\n-        Set<String> expected = Set.of(\"java.base\", \"jdk.jfr\");\n-        verifyListModules(targetPath, expected);\n+        JlinkOutput allOut = createImage(targetPath, allArgs, false \/* success *\/);\n+        String actual = allOut.stdout.trim();\n+        String expected = \"Error: --limit-modules not allowed with --add-modules ALL-MODULE-PATH\";\n+        assertEquals(actual, expected);\n@@ -255,14 +248,0 @@\n-    \/*\n-     * Verify linked modules using java --list-modules\n-     *\/\n-    private void verifyListModules(Path targetPath, Set<String> expected) throws Exception {\n-        Path java = findTool(targetPath, \"java\");\n-        List<String> listMods = List.of(java.toString(), \"--list-modules\");\n-        OutputAnalyzer out = ProcessTools.executeCommand(listMods.toArray(new String[] {}))\n-                                         .shouldHaveExitValue(0);\n-        Set<String> actual = out.asLines().stream()\n-                                 .map(s -> { return s.split(\"@\")[0]; })\n-                                 .collect(Collectors.toSet());\n-        assertEquals(actual, expected);\n-    }\n-\n","filename":"test\/jdk\/tools\/jlink\/basic\/AllModulePath.java","additions":15,"deletions":36,"binary":false,"changes":51,"status":"modified"}]}