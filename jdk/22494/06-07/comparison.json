{"files":[{"patch":"@@ -376,1 +376,0 @@\n-        List<Path> originalModulePath = new ArrayList<>(options.modulePath);\n@@ -394,2 +393,3 @@\n-                options.modulePath.add(defModPath);\n-                finder = newModuleFinder(options.modulePath);\n+                List<Path> combinedPaths = new ArrayList<>(options.modulePath);\n+                combinedPaths.add(defModPath);\n+                finder = newModuleFinder(combinedPaths);\n@@ -429,1 +429,1 @@\n-                    String modPath = originalModulePath.stream()\n+                    String modPath = options.modulePath.stream()\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/JlinkTask.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.io.File;\n@@ -34,1 +33,0 @@\n-import java.nio.file.attribute.BasicFileAttributes;\n@@ -36,1 +34,0 @@\n-import java.util.Arrays;\n@@ -40,1 +37,0 @@\n-import java.util.regex.Pattern;\n@@ -43,1 +39,0 @@\n-import java.util.stream.Stream;\n@@ -57,0 +52,1 @@\n+ * @bug 8345259\n@@ -109,0 +105,3 @@\n+    \/*\n+     * --add-modules ALL-MODULE-PATH with an existing module-path.\n+     *\/\n@@ -115,3 +114,5 @@\n-        \/\/ create custom image\n-        Path image = Paths.get(\"image\");\n-        createImage(image, \"--add-modules\", \"ALL-MODULE-PATH\");\n+        Path image = HELPER.createNewImageDir(\"image\");\n+        List<String> opts = List.of(\"--module-path\", MODS.toString(),\n+                                    \"--output\", image.toString(),\n+                                    \"--add-modules\", \"ALL-MODULE-PATH\");\n+        createImage(image, opts, true \/* success *\/);\n@@ -120,10 +121,2 @@\n-        if (JMODS_EXIST) {\n-            Files.find(JMODS, 1, (Path p, BasicFileAttributes attr) ->\n-                                p.toString().endsWith(\".jmod\"))\n-                 .map(p -> JMODS.relativize(p).toString())\n-                 .map(n -> n.substring(0, n.length()-5))\n-                 .forEach(modules::add);\n-        } else {\n-            \/\/ java.base is a dependency of external modules\n-            modules.add(\"java.base\");\n-        }\n+        \/\/ java.base is a dependency of any external module\n+        modules.add(\"java.base\");\n@@ -135,0 +128,4 @@\n+    \/*\n+     * --add-modules ALL-MODULE-PATH with an existing module path and module\n+     * limits applied. Module limit on module from module path.\n+     *\/\n@@ -142,4 +139,6 @@\n-        Path image = Paths.get(\"image1\");\n-        createImage(image,\n-                    \"--add-modules\", \"ALL-MODULE-PATH\",\n-                    \"--limit-modules\", \"m1\");\n+        Path image = HELPER.createNewImageDir(\"image1\");\n+        List<String> opts = List.of(\"--module-path\", MODS.toString(),\n+                                    \"--output\", image.toString(),\n+                                    \"--add-modules\", \"ALL-MODULE-PATH\",\n+                                    \"--limit-modules\", \"m1\");\n+        createImage(image, opts, true \/* success *\/);\n@@ -150,0 +149,5 @@\n+    \/*\n+     * --add-modules *includes* ALL-MODULE-PATH with an existing module path\n+     * and module limits applied. Module limit on a dependency, but custom\n+     * modules explicitly listed (therefore, expect inclusion of them).\n+     *\/\n@@ -157,5 +161,7 @@\n-        Path image = Paths.get(\"image2\");\n-        createImage(image,\n-                    \"--add-modules\", \"m1,test\",\n-                    \"--add-modules\", \"ALL-MODULE-PATH\",\n-                    \"--limit-modules\", \"java.base\");\n+        Path image = HELPER.createNewImageDir(\"image2\");\n+        List<String> opts = List.of(\"--module-path\", MODS.toString(),\n+                                    \"--output\", image.toString(),\n+                                    \"--add-modules\", \"m1,test\",\n+                                    \"--add-modules\", \"ALL-MODULE-PATH\",\n+                                    \"--limit-modules\", \"java.base\");\n+        createImage(image, opts, true \/* success *\/);\n@@ -170,1 +176,1 @@\n-    public void noModulePath() {\n+    public void noModulePath() throws IOException {\n@@ -177,8 +183,3 @@\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        PrintWriter out = new PrintWriter(baos);\n-        ByteArrayOutputStream berrOs = new ByteArrayOutputStream();\n-        PrintWriter err = new PrintWriter(berrOs);\n-        int rc = JLINK_TOOL.run(out, err, allArgs.toArray(new String[] {}));\n-        assertTrue(rc != 0);\n-        String actual = new String(baos.toByteArray()).trim();\n-        assertEquals(actual, \"Error: --module-path option must be specified with --add-modules ALL-MODULE-PATH\");\n+        JlinkOutput allOut = createImage(targetPath, allArgs, false \/* expect failure *\/);\n+        String expected = \"Error: --module-path option must be specified with --add-modules ALL-MODULE-PATH\";\n+        assertEquals(allOut.stdout.trim(), expected);\n@@ -191,1 +192,1 @@\n-    public void modulePathEmpty() {\n+    public void modulePathEmpty() throws IOException {\n@@ -204,7 +205,3 @@\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        PrintWriter out = new PrintWriter(baos);\n-        ByteArrayOutputStream berrOs = new ByteArrayOutputStream();\n-        PrintWriter err = new PrintWriter(berrOs);\n-        int rc = JLINK_TOOL.run(out, err, allArgs.toArray(new String[] {}));\n-        assertTrue(rc != 0);\n-        String actual = new String(baos.toByteArray()).trim();\n+\n+        JlinkOutput allOut = createImage(targetPath, allArgs, false \/* expect failure *\/);\n+        String actual = allOut.stdout.trim();\n@@ -217,1 +214,3 @@\n-     * limits applied.\n+     * limits applied. This case test a module limit on a dependency, jdk.jfr,\n+     * and *doesn't* list the module explicitly in --add-modules. Therefore,\n+     * expects for the module - on the module path - to be not be present.\n@@ -232,10 +231,3 @@\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        PrintWriter out = new PrintWriter(baos);\n-        ByteArrayOutputStream berrOs = new ByteArrayOutputStream();\n-        PrintWriter err = new PrintWriter(berrOs);\n-        int rc = JLINK_TOOL.run(out, err, allArgs.toArray(new String[] {}));\n-        assertTrue(rc == 0);\n-        String stdOut = new String(baos.toByteArray());\n-        String stdErr = new String(berrOs.toByteArray());\n-        assertTrue(stdOut.isEmpty());\n-        assertTrue(stdErr.isEmpty());\n+        JlinkOutput allOut = createImage(targetPath, allArgs, true \/* success *\/);\n+        assertTrue(allOut.stdout.isEmpty());\n+        assertTrue(allOut.stderr.isEmpty());\n@@ -246,33 +238,0 @@\n-    \/*\n-     * --add-modules ALL-MODULE-PATH with an existing module-path.\n-     *\/\n-    @Test\n-    public void modulePath() throws Exception {\n-        if (isExplodedJDKImage()) {\n-            return;\n-        }\n-        Path targetPath = HELPER.createNewImageDir(\"all-mod-path-w-mod-path\");\n-        String moduleName = \"com.foo.runtime\";\n-        Result result = HELPER.generateDefaultJModule(moduleName, \"jdk.jfr\");\n-        Path customModulePath = result.getFile().getParent();\n-        List<String> allArgs = List.of(\"--add-modules\", \"ALL-MODULE-PATH\",\n-                                       \"--module-path\", customModulePath.toString(),\n-                                       \"--output\", targetPath.toString(),\n-                                       \"--verbose\");\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        PrintWriter out = new PrintWriter(baos);\n-        ByteArrayOutputStream berrOs = new ByteArrayOutputStream();\n-        PrintWriter err = new PrintWriter(berrOs);\n-        int rc = JLINK_TOOL.run(out, err, allArgs.toArray(new String[] {}));\n-        assertTrue(rc == 0);\n-        String stdOut = new String(baos.toByteArray());\n-        String stdErr = new String(berrOs.toByteArray());\n-        assertTrue(stdErr.isEmpty());\n-        assertTrue(stdOut.contains(moduleName));\n-        assertTrue(stdOut.contains(\"java.base\"));\n-        assertTrue(stdOut.contains(\"jdk.jfr\"));\n-        \/\/ Verify the output image's modules\n-        List<String> expected = List.of(moduleName, \"java.base\", \"jdk.jfr\");\n-        verifyListModules(targetPath, expected);\n-    }\n-\n@@ -302,8 +261,6 @@\n-        OutputAnalyzer out = ProcessTools.executeCommand(listMods.toArray(new String[] {}));\n-        if (out.getExitValue() != 0) {\n-            throw new AssertionError(\"java --list-modules failed\");\n-        }\n-        List<String> actual = Stream.of(out.getStdout().split(Pattern.quote(System.lineSeparator())))\n-                                    .map(s -> { return s.split(\"@\")[0]; })\n-                                    .sorted()\n-                                    .toList();\n+        OutputAnalyzer out = ProcessTools.executeCommand(listMods.toArray(new String[] {}))\n+                                         .shouldHaveExitValue(0);\n+        List<String> actual = out.asLines().stream()\n+                                 .map(s -> { return s.split(\"@\")[0]; })\n+                                 .sorted()\n+                                 .toList();\n@@ -324,12 +281,12 @@\n-    private void createImage(Path image, String... options) throws IOException {\n-        String modulepath = (JMODS_EXIST ? JMODS.toString() + File.pathSeparator : \"\")\n-                                + MODS.toString();\n-        List<String> opts = List.of(\"--module-path\", modulepath,\n-                                    \"--output\", image.toString());\n-        String[] args = Stream.concat(opts.stream(), Arrays.stream(options))\n-                              .toArray(String[]::new);\n-\n-        System.out.println(\"jlink \" + Arrays.stream(args).collect(Collectors.joining(\" \")));\n-        PrintWriter pw = new PrintWriter(System.out);\n-        int rc = JLINK_TOOL.run(pw, pw, args);\n-        assertTrue(rc == 0);\n+    private JlinkOutput createImage(Path image, List<String> args, boolean success) throws IOException {\n+        System.out.println(\"jlink \" + args.stream().collect(Collectors.joining(\" \")));\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        PrintWriter out = new PrintWriter(baos);\n+        ByteArrayOutputStream berrOs = new ByteArrayOutputStream();\n+        PrintWriter err = new PrintWriter(berrOs);\n+        int rc = JLINK_TOOL.run(out, err, args.toArray(String[]::new));\n+        assertEquals(rc == 0, success);\n+        String stdOut = new String(baos.toByteArray());\n+        String stdErr = new String(berrOs.toByteArray());\n+        return new JlinkOutput(stdErr, stdOut);\n@@ -337,0 +294,2 @@\n+\n+    private static record JlinkOutput(String stderr, String stdout) {};\n","filename":"test\/jdk\/tools\/jlink\/basic\/AllModulePath.java","additions":67,"deletions":108,"binary":false,"changes":175,"status":"modified"}]}