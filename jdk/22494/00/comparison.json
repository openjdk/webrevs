{"files":[{"patch":"@@ -382,0 +382,1 @@\n+        boolean isLinkableRuntime = LinkableRuntimeImage.isLinkableRuntime();\n@@ -383,0 +384,4 @@\n+            \/\/ For linking from packaged modules options.modulePath.size() is\n+            \/\/ always > 0 since we add the default packaged modules in\n+            \/\/ JlinkTask.run() after options processing and the 'jmods' folder\n+            \/\/ exists.\n@@ -391,0 +396,19 @@\n+            } else if (mod.equals(ALL_MODULE_PATH) &&\n+                       options.modulePath.isEmpty() && isLinkableRuntime) {\n+                \/\/ Handle ALL-MODULE-PATH for the case when linking from the\n+                \/\/ run-time image.\n+                ModuleFinder finder = newModuleFinder(List.of(), options.limitMods, Set.of());\n+                \/\/ All observable modules that isn't jdk.jlink and doesn't\n+                \/\/ depend on jdk.jlink module.\n+                \/\/ jdk.jlink is not allowed to be used when linking\n+                \/\/ from the run-time image (JEP 493).\n+                finder.findAll()\n+                      .stream()\n+                      .map(ModuleReference::descriptor)\n+                      .filter(a -> {\n+                          return !(\"jdk.jlink\".equals(a.name()) ||\n+                                      a.requires().stream()\n+                                                  .anyMatch(r -> \"jdk.jlink\".equals(r.name())));\n+                          })\n+                      .map(ModuleDescriptor::name)\n+                      .forEach(mn -> roots.add(mn));\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/JlinkTask.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,159 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.module.ModuleDescriptor;\n+import java.lang.module.ModuleFinder;\n+import java.lang.module.ModuleReference;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import tests.Helper;\n+import tests.Result;\n+\n+\n+\/*\n+ * @test id=default\n+ * @summary Test basic linking from the run-time image using ALL-MODULE-PATH\n+ * @requires (vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n+ * @library ..\/..\/lib \/test\/lib\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.jimage\n+ *          jdk.jlink\/jdk.tools.jlink.internal\n+ *          jdk.jlink\/jdk.tools.jlink.plugin\n+ *          jdk.jlink\/jdk.tools.jimage\n+ * @build tests.* jdk.test.lib.process.OutputAnalyzer\n+ *        jdk.test.lib.process.ProcessTools\n+ * @run main\/othervm -Xmx1400m AllModulePathTest true\n+ *\/\n+\n+\/*\n+ * @test id=with-module-path\n+ * @summary Test basic linking from the run-time image using ALL-MODULE-PATH and\n+ *          a specifically set module path\n+ * @requires (vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n+ * @library ..\/..\/lib \/test\/lib\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.jimage\n+ *          jdk.jlink\/jdk.tools.jlink.internal\n+ *          jdk.jlink\/jdk.tools.jlink.plugin\n+ *          jdk.jlink\/jdk.tools.jimage\n+ * @build tests.* jdk.test.lib.process.OutputAnalyzer\n+ *        jdk.test.lib.process.ProcessTools\n+ * @run main\/othervm -Xmx1400m AllModulePathTest false\n+ *\/\n+public class AllModulePathTest extends AbstractLinkableRuntimeTest {\n+\n+    private static boolean IS_DEFAULT_TEST = true;\n+\n+    @Override\n+    public void runTest(Helper helper, boolean isLinkableRuntime) throws Exception {\n+        if (IS_DEFAULT_TEST) {\n+            defaultTest(helper, isLinkableRuntime);\n+        } else {\n+            allModulePathNonDefault(helper, isLinkableRuntime);\n+        }\n+    }\n+\n+    \/**\n+     * Tests linking from the run-time image with {@code --add-modules ALL-MODULE-PATH}\n+     * but no module path otherwise given. This needs to special case the restriction\n+     * of the jdk.jlink module being disallowed from being on the list of included\n+     * modules in the output image.\n+     *\n+     * @param helper\n+     * @param isLinkableRuntime\n+     * @throws Exception\n+     *\/\n+    private void defaultTest(Helper helper, boolean isLinkableRuntime) throws Exception {\n+        Path finalImage = createAllModulesRuntimeLink(helper,\n+                                                      \"all-module-path-default\",\n+                                                      isLinkableRuntime,\n+                                                      List.of() \/* no custom args *\/);\n+        List<String> expected = ModuleFinder.ofSystem()\n+                                            .findAll()\n+                                            .stream()\n+                                            .map(ModuleReference::descriptor)\n+                                            \/\/ linking from run-time image doesn't yet\n+                                            \/\/ allow jdk.jlink, or any module that\n+                                            \/\/ depends on it.\n+                                            .filter(a -> {\n+                                                return !(\"jdk.jlink\".equals(a.name()) ||\n+                                                         a.requires().stream()\n+                                                          .anyMatch(r -> \"jdk.jlink\".equals(r.name())));\n+                                                })\n+                                            .map(ModuleDescriptor::name)\n+                                            .sorted()\n+                                            .toList();\n+        verifyListModules(finalImage, expected);\n+    }\n+\n+    \/**\n+     * Tests linking from the run-time image with {@code --add-modules ALL-MODULE-PATH}\n+     * with a module path including only a single module.\n+     *\n+     * @param helper\n+     * @param isLinkableRuntime\n+     * @throws Exception\n+     *\/\n+    private void allModulePathNonDefault(Helper helper, boolean isLinkableRuntime) throws Exception {\n+        String moduleName = \"com.foo.runtime\";\n+        Result result = helper.generateDefaultJModule(moduleName, \"jdk.jfr\");\n+        Path customModulePath = result.getFile().getParent();\n+        List<String> extraArgs = List.of(\"--module-path\", customModulePath.toString());\n+        Path finalImage = createAllModulesRuntimeLink(helper,\n+                                                      \"all-module-path-cust-mod\",\n+                                                      isLinkableRuntime,\n+                                                      extraArgs);\n+        List<String> expected = List.of(\"com.foo.runtime\", \"java.base\", \"jdk.jfr\");\n+        verifyListModules(finalImage, expected);\n+    }\n+\n+    private Path createAllModulesRuntimeLink(Helper helper,\n+                                             String name,\n+                                             boolean isLinkableRuntime,\n+                                             List<String> extraArgs) throws Exception {\n+        BaseJlinkSpecBuilder builder = new BaseJlinkSpecBuilder();\n+        builder.helper(helper)\n+               .name(name)\n+               .addModule(\"ALL-MODULE-PATH\")\n+               .validatingModule(\"java.base\");\n+        for (String arg: extraArgs) {\n+            builder.addExtraOption(arg);\n+        }\n+        if (isLinkableRuntime) {\n+            builder.setLinkableRuntime();\n+        }\n+        return createJavaImageRuntimeLink(builder.build());\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 1) {\n+            AllModulePathTest.IS_DEFAULT_TEST = Boolean.parseBoolean(args[0]);\n+        } else {\n+            throw new AssertionError(\"Illegal number of arguments: \" + args);\n+        }\n+        AllModulePathTest test = new AllModulePathTest();\n+        test.run();\n+    }\n+\n+}\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/AllModulePathTest.java","additions":159,"deletions":0,"binary":false,"changes":159,"status":"added"},{"patch":"@@ -42,1 +42,1 @@\n- * @run main\/othervm -Xmx1400m BasicJlinkTest false\n+ * @run main\/othervm -Xmx1400m BasicJlinkTest\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/BasicJlinkTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}