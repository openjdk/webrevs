{"files":[{"patch":"@@ -435,0 +435,13 @@\n+                \/\/ Verify legitimacy of --limit-modules\n+                Set<String> depSet = newConfiguration(finder, initialRoots)\n+                        .modules()\n+                        .stream()\n+                        .map(ResolvedModule::name)\n+                        .collect(Collectors.toSet());\n+                for (String modLim: options.limitMods) {\n+                    \/\/ If the module limits aren't in the dep tree of the\n+                    \/\/ root set this is an error.\n+                    if (!depSet.contains(modLim)) {\n+                        throw taskHelper.newBadArgs(\"err.limit.modules\", modLim);\n+                    }\n+                }\n@@ -478,0 +491,5 @@\n+    private Configuration newConfiguration(ModuleFinder finder, Set<String> roots) {\n+        return options.bindServices ? Configuration.empty().resolveAndBind(finder, ModuleFinder.of(), roots) :\n+                                      Configuration.empty().resolve(finder, ModuleFinder.of(), roots);\n+    }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/JlinkTask.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -132,0 +132,1 @@\n+err.limit.modules={0} not in module dependency graph, but specified with --limit-modules\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/jlink.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,5 @@\n+import java.lang.module.Configuration;\n+import java.lang.module.ModuleDescriptor;\n+import java.lang.module.ModuleFinder;\n+import java.lang.module.ModuleReference;\n+import java.lang.module.ResolvedModule;\n@@ -43,0 +48,1 @@\n+import jdk.internal.module.ModulePath;\n@@ -57,0 +63,1 @@\n+ *          java.base\/jdk.internal.module\n@@ -238,0 +245,52 @@\n+    \/*\n+     * --add-modules ALL-MODULE-PATH with an existing module path and module\n+     * limits applied. This case tests a module limit that does not exist in the\n+     * module dependency graph. I.e. a module-limit specified on a module that\n+     * would not get included into the image if that --limit-modules clause would\n+     * be absent. This is an error.\n+     *\/\n+    @Test\n+    public void modulePathWithLimitModNotInDepTree() throws Exception {\n+        if (isExplodedJDKImage()) {\n+            return;\n+        }\n+        Path targetPath = HELPER.createNewImageDir(\"all-mods-limit-mods-error\");\n+        String moduleName = \"com.bar.testmod\";\n+        Result result = HELPER.generateDefaultJModule(moduleName, \"jdk.jdeps\");\n+        Path customModulePath = result.getFile().getParent();\n+        ModuleFinder finder = moduleFinder(new Path[] { customModulePath });\n+        Set<String> roots = finder.findAll().stream()\n+                                .map(ModuleReference::descriptor)\n+                                .map(ModuleDescriptor::name)\n+                                .collect(Collectors.toSet());\n+        Set<String> depSet = Configuration.empty()\n+                     .resolve(finder, ModuleFinder.ofSystem(), roots)\n+                     .modules()\n+                     .stream()\n+                     .map(ResolvedModule::name)\n+                     .collect(Collectors.toSet());\n+        String moduleOutsideDepTree = \"jdk.net\";\n+        if (depSet.contains(moduleOutsideDepTree)) {\n+            throw new AssertionError(\"Invalid test setup! \" + moduleOutsideDepTree + \" not \" +\n+                                     \"expected in the dependency tree of \" + moduleName);\n+        }\n+        List<String> allArgs = List.of(\"--add-modules\", \"ALL-MODULE-PATH\",\n+                                       \"--add-modules\", moduleName,\n+                                       \/\/ jdk.jfr doesn't exist in the module path\n+                                       \/\/ and is no dependency of com.bar.testmod\n+                                       \"--limit-modules\", moduleOutsideDepTree,\n+                                       \"--module-path\", customModulePath.toString(),\n+                                       \"--output\", targetPath.toString());\n+        JlinkOutput allOut = createImage(targetPath, allArgs, false \/* success *\/);\n+        String stdOut = allOut.stdout.trim();\n+        String expectedMsg = String.format(\"Error: %s not in module dependency graph,\" +\n+                                           \" but specified with --limit-modules\", moduleOutsideDepTree);\n+        assertEquals(stdOut, expectedMsg);\n+        assertTrue(allOut.stderr.isEmpty());\n+    }\n+\n+    private ModuleFinder moduleFinder(Path[] path) {\n+        Runtime.Version version = Runtime.version();\n+        return ModulePath.of(version, true, path);\n+    }\n+\n","filename":"test\/jdk\/tools\/jlink\/basic\/AllModulePath.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"modified"}]}