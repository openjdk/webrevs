{"files":[{"patch":"@@ -51,0 +51,1 @@\n+import java.util.Map.Entry;\n@@ -90,0 +91,1 @@\n+        FACTORY_METHOD_BODY_LINT(\"factory.decl.method.body.lint\"),\n@@ -91,0 +93,1 @@\n+        FACTORY_FIELD_LINT(\"factory.decl.field.lint\"),\n@@ -92,1 +95,2 @@\n-        SUPPRESS_WARNINGS(\"suppress.warnings\");\n+        SUPPRESS_WARNINGS(\"suppress.warnings\"),\n+        LINT_CATEGORY(\"lint.category\");\n@@ -117,0 +121,1 @@\n+        LINT_WARN(\"warn\", \"LintWarning\", \"LintWarnings\"),\n@@ -139,1 +144,3 @@\n-        static FactoryKind parseFrom(String prefix) {\n+        static FactoryKind of(Entry<String, Message> messageEntry) {\n+            String prefix = messageEntry.getKey().split(\"\\\\.\")[1];\n+            FactoryKind selected = null;\n@@ -142,1 +149,2 @@\n-                    return k;\n+                    selected = k;\n+                    break;\n@@ -145,1 +153,9 @@\n-            return null;\n+            if (selected == WARN) {\n+                for (MessageLine line : messageEntry.getValue().getLines(false)) {\n+                    if (line.isLint()) {\n+                        selected = LINT_WARN;\n+                        break;\n+                    }\n+                }\n+            }\n+            return selected;\n@@ -158,1 +174,1 @@\n-                                        e -> FactoryKind.parseFrom(e.getKey().split(\"\\\\.\")[1]),\n+                                        FactoryKind::of,\n@@ -168,1 +184,1 @@\n-                    .flatMap(e -> generateFactoryMethodsAndFields(e.getKey(), e.getValue()).stream())\n+                    .flatMap(e -> generateFactoryMethodsAndFields(entry.getKey(), e.getKey(), e.getValue()).stream())\n@@ -233,1 +249,1 @@\n-    List<String> generateFactoryMethodsAndFields(String key, Message msg) {\n+    List<String> generateFactoryMethodsAndFields(FactoryKind k, String key, Message msg) {\n@@ -241,1 +257,5 @@\n-        FactoryKind k = FactoryKind.parseFrom(keyParts[1]);\n+        String lintCategory = lines.stream()\n+                .filter(MessageLine::isLint)\n+                .map(MessageLine::lintCategory)\n+                .findFirst().orElse(null);\n+        \/\/System.out.println(\"category for \" + key + \" = \" + lintCategory);\n@@ -245,4 +265,13 @@\n-            String factoryField = StubKind.FACTORY_FIELD.format(k.keyClazz, factoryName,\n-                    \"\\\"\" + keyParts[0] + \"\\\"\",\n-                    \"\\\"\" + Stream.of(keyParts).skip(2).collect(Collectors.joining(\".\")) + \"\\\"\",\n-                    javadoc);\n+            String factoryField;\n+            if (lintCategory == null) {\n+                factoryField = StubKind.FACTORY_FIELD.format(k.keyClazz, factoryName,\n+                        \"\\\"\" + keyParts[0] + \"\\\"\",\n+                        \"\\\"\" + Stream.of(keyParts).skip(2).collect(Collectors.joining(\".\")) + \"\\\"\",\n+                        javadoc);\n+            } else {\n+                factoryField = StubKind.FACTORY_FIELD_LINT.format(k.keyClazz, factoryName,\n+                        StubKind.LINT_CATEGORY.format(\"\\\"\" + lintCategory + \"\\\"\"),\n+                        \"\\\"\" + keyParts[0] + \"\\\"\",\n+                        \"\\\"\" + Stream.of(keyParts).skip(2).collect(Collectors.joining(\".\")) + \"\\\"\",\n+                        javadoc);\n+            }\n@@ -258,0 +287,13 @@\n+                String methodBody;\n+                if (lintCategory == null) {\n+                    methodBody = StubKind.FACTORY_METHOD_BODY.format(k.keyClazz,\n+                            \"\\\"\" + keyParts[0] + \"\\\"\",\n+                            \"\\\"\" + Stream.of(keyParts).skip(2).collect(Collectors.joining(\".\")) + \"\\\"\",\n+                            argNames.stream().collect(Collectors.joining(\", \")));\n+                } else {\n+                    methodBody = StubKind.FACTORY_METHOD_BODY_LINT.format(k.keyClazz,\n+                            StubKind.LINT_CATEGORY.format(\"\\\"\" + lintCategory + \"\\\"\"),\n+                            \"\\\"\" + keyParts[0] + \"\\\"\",\n+                            \"\\\"\" + Stream.of(keyParts).skip(2).collect(Collectors.joining(\".\")) + \"\\\"\",\n+                            argNames.stream().collect(Collectors.joining(\", \")));\n+                }\n@@ -260,4 +302,1 @@\n-                        indent(StubKind.FACTORY_METHOD_BODY.format(k.keyClazz,\n-                                \"\\\"\" + keyParts[0] + \"\\\"\",\n-                                \"\\\"\" + Stream.of(keyParts).skip(2).collect(Collectors.joining(\".\")) + \"\\\"\",\n-                                argNames.stream().collect(Collectors.joining(\", \"))), 1),\n+                        indent(methodBody, 1),\n","filename":"make\/langtools\/tools\/propertiesparser\/gen\/ClassGenerator.java","additions":55,"deletions":16,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -52,0 +52,3 @@\n+            if (l != null && l.isLint()) {\n+                l = l.prev;\n+            }\n@@ -74,1 +77,1 @@\n-            if (l.prev != null && l.prev.isInfo())\n+            if (l.prev != null && (l.prev.isInfo() || l.prev.isLint()))\n","filename":"make\/langtools\/tools\/propertiesparser\/parser\/Message.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.regex.Matcher;\n@@ -40,0 +41,1 @@\n+    static final Pattern lintPattern = Pattern.compile(\"# lint: ([a-z\\\\-]+)\");\n@@ -57,0 +59,13 @@\n+    public boolean isLint() {\n+        return lintPattern.matcher(text).matches();\n+    }\n+\n+    public String lintCategory() {\n+        Matcher matcher = lintPattern.matcher(text);\n+        if (matcher.matches()) {\n+            return matcher.group(1);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n","filename":"make\/langtools\/tools\/propertiesparser\/parser\/MessageLine.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+    import com.sun.tools.javac.util.JCDiagnostic.LintWarning;\\n\\\n@@ -34,0 +35,1 @@\n+    import com.sun.tools.javac.code.Lint.LintCategory;\\n\\\n@@ -61,0 +63,3 @@\n+factory.decl.method.body.lint=\\\n+    return new {0}({1}, {2}, {3}, {4});\n+\n@@ -67,0 +72,6 @@\n+factory.decl.field.lint=\\\n+    \/**\\n\\\n+    ' '* {5}\\n\\\n+    ' '*\/\\n\\\n+    public static final {0} {1} = new {0}({2}, {3}, {4});\n+\n@@ -73,0 +84,2 @@\n+lint.category=\\\n+  LintCategory.get({0})\n","filename":"make\/langtools\/tools\/propertiesparser\/resources\/templates.properties","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+import com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition;\n+import com.sun.tools.javac.util.JCDiagnostic.LintWarning;\n@@ -37,0 +39,1 @@\n+import com.sun.tools.javac.util.Log;\n@@ -96,0 +99,1 @@\n+    private final Log log;\n@@ -149,0 +153,1 @@\n+        log = Log.instance(context);\n@@ -155,0 +160,1 @@\n+        this.log = other.log;\n@@ -362,1 +368,1 @@\n-        static LintCategory get(String option) {\n+        public static LintCategory get(String option) {\n@@ -388,0 +394,9 @@\n+    \/**\n+     * Helper method. Log a lint warning if its lint category is enabled.\n+     *\/\n+    public void logIfEnabled(DiagnosticPosition pos, LintWarning warning) {\n+        if (isEnabled(warning.getLintCategory())) {\n+            log.warning(pos, warning);\n+        }\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.LintWarnings;\n@@ -38,0 +39,1 @@\n+import com.sun.tools.javac.util.JCDiagnostic.LintWarning;\n@@ -178,2 +180,2 @@\n-                    Warnings.PreviewFeatureUsePlural(feature.nameFragment()) :\n-                    Warnings.PreviewFeatureUse(feature.nameFragment()));\n+                    LintWarnings.PreviewFeatureUsePlural(feature.nameFragment()) :\n+                    LintWarnings.PreviewFeatureUse(feature.nameFragment()));\n@@ -191,2 +193,2 @@\n-            log.mandatoryWarning(LintCategory.PREVIEW, null,\n-                    Warnings.PreviewFeatureUseClassfile(classfile, majorVersionToSource.get(majorVersion).name));\n+            log.mandatoryWarning(null,\n+                    LintWarnings.PreviewFeatureUseClassfile(classfile, majorVersionToSource.get(majorVersion).name));\n@@ -200,1 +202,1 @@\n-    public void reportPreviewWarning(DiagnosticPosition pos, Warning warnKey) {\n+    public void reportPreviewWarning(DiagnosticPosition pos, LintWarning warnKey) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.LintWarnings;\n@@ -1941,2 +1942,2 @@\n-        if (env.info.lint.isEnabled(LintCategory.SYNCHRONIZATION) && isValueBased(tree.lock.type)) {\n-            log.warning(LintCategory.SYNCHRONIZATION, tree.pos(), Warnings.AttemptToSynchronizeOnInstanceOfValueBasedClass);\n+        if (isValueBased(tree.lock.type)) {\n+            env.info.lint.logIfEnabled(tree.pos(), LintWarnings.AttemptToSynchronizeOnInstanceOfValueBasedClass);\n@@ -2048,3 +2049,2 @@\n-                    chk.isHandled(syms.interruptedExceptionType, types.memberType(resource, close).getThrownTypes()) &&\n-                    env.info.lint.isEnabled(LintCategory.TRY)) {\n-                log.warning(LintCategory.TRY, pos, Warnings.TryResourceThrowsInterruptedExc(resource));\n+                    chk.isHandled(syms.interruptedExceptionType, types.memberType(resource, close).getThrownTypes())) {\n+                env.info.lint.logIfEnabled(pos, LintWarnings.TryResourceThrowsInterruptedExc(resource));\n@@ -4444,3 +4444,2 @@\n-                sym.overrides(syms.autoCloseableClose, sitesym.type.tsym, types, true) &&\n-                env.info.lint.isEnabled(LintCategory.TRY)) {\n-            log.warning(LintCategory.TRY, tree, Warnings.TryExplicitCloseCall);\n+                sym.overrides(syms.autoCloseableClose, sitesym.type.tsym, types, true)) {\n+            env.info.lint.logIfEnabled(tree, LintWarnings.TryExplicitCloseCall);\n@@ -4473,1 +4472,1 @@\n-                chk.warnStatic(tree, Warnings.StaticNotQualifiedByType(sym.kind.kindName(), sym.owner));\n+                chk.lint.logIfEnabled(tree, LintWarnings.StaticNotQualifiedByType(sym.kind.kindName(), sym.owner));\n@@ -4475,1 +4474,1 @@\n-                chk.warnStatic(tree, Warnings.StaticNotQualifiedByType2(sym.kind.kindName()));\n+                chk.lint.logIfEnabled(tree, LintWarnings.StaticNotQualifiedByType2(sym.kind.kindName()));\n@@ -4688,1 +4687,1 @@\n-                        chk.warnUnchecked(tree.pos(), Warnings.UncheckedAssignToVar(v, s));\n+                        chk.warnUnchecked(tree.pos(), LintWarnings.UncheckedAssignToVar(v, s));\n@@ -4886,1 +4885,1 @@\n-                chk.warnUnchecked(env.tree.pos(), Warnings.UncheckedCallMbrOfRawType(sym, s));\n+                chk.warnUnchecked(env.tree.pos(), LintWarnings.UncheckedCallMbrOfRawType(sym, s));\n@@ -4936,1 +4935,1 @@\n-                chk.warnUnchecked(env.tree.pos(), Warnings.UncheckedMethInvocationApplied(kindName(sym),\n+                chk.warnUnchecked(env.tree.pos(), LintWarnings.UncheckedMethInvocationApplied(kindName(sym),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.util.function.Consumer;\n@@ -53,0 +52,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.LintWarnings;\n@@ -59,0 +59,1 @@\n+import com.sun.tools.javac.util.JCDiagnostic.LintWarning;\n@@ -82,1 +83,0 @@\n-import javax.lang.model.element.ExecutableElement;\n@@ -85,2 +85,0 @@\n-import javax.lang.model.type.TypeMirror;\n-import javax.lang.model.util.ElementFilter;\n@@ -125,1 +123,1 @@\n-    private Lint lint;\n+    Lint lint;\n@@ -254,1 +252,1 @@\n-                    removalHandler.report(pos, Warnings.HasBeenDeprecatedForRemovalModule(sym));\n+                    removalHandler.report(pos, LintWarnings.HasBeenDeprecatedForRemovalModule(sym));\n@@ -256,1 +254,1 @@\n-                    removalHandler.report(pos, Warnings.HasBeenDeprecatedForRemoval(sym, sym.location()));\n+                    removalHandler.report(pos, LintWarnings.HasBeenDeprecatedForRemoval(sym, sym.location()));\n@@ -261,1 +259,1 @@\n-                deprecationHandler.report(pos, Warnings.HasBeenDeprecatedModule(sym));\n+                deprecationHandler.report(pos, LintWarnings.HasBeenDeprecatedModule(sym));\n@@ -263,1 +261,1 @@\n-                deprecationHandler.report(pos, Warnings.HasBeenDeprecated(sym, sym.location()));\n+                deprecationHandler.report(pos, LintWarnings.HasBeenDeprecated(sym, sym.location()));\n@@ -272,1 +270,1 @@\n-    public void warnPreviewAPI(DiagnosticPosition pos, Warning warnKey) {\n+    public void warnPreviewAPI(DiagnosticPosition pos, LintWarning warnKey) {\n@@ -283,1 +281,1 @@\n-            preview.reportPreviewWarning(pos, Warnings.DeclaredUsingPreview(kindName(sym), sym));\n+            preview.reportPreviewWarning(pos, LintWarnings.DeclaredUsingPreview(kindName(sym), sym));\n@@ -291,2 +289,1 @@\n-        if (lint.isEnabled(LintCategory.RESTRICTED))\n-            log.warning(LintCategory.RESTRICTED, pos, Warnings.RestrictedMethod(sym.enclClass(), sym));\n+        lint.logIfEnabled(pos, LintWarnings.RestrictedMethod(sym.enclClass(), sym));\n@@ -299,1 +296,1 @@\n-    public void warnUnchecked(DiagnosticPosition pos, Warning warnKey) {\n+    public void warnUnchecked(DiagnosticPosition pos, LintWarning warnKey) {\n@@ -304,21 +301,0 @@\n-    \/** Warn about unsafe vararg method decl.\n-     *  @param pos        Position to be used for error reporting.\n-     *\/\n-    void warnUnsafeVararg(DiagnosticPosition pos, Warning warnKey) {\n-        if (lint.isEnabled(LintCategory.VARARGS))\n-            log.warning(LintCategory.VARARGS, pos, warnKey);\n-    }\n-\n-    public void warnStatic(DiagnosticPosition pos, Warning warnKey) {\n-        if (lint.isEnabled(LintCategory.STATIC))\n-            log.warning(LintCategory.STATIC, pos, warnKey);\n-    }\n-\n-    \/** Warn about division by integer constant zero.\n-     *  @param pos        Position to be used for error reporting.\n-     *\/\n-    void warnDivZero(DiagnosticPosition pos) {\n-        if (lint.isEnabled(LintCategory.DIVZERO))\n-            log.warning(LintCategory.DIVZERO, pos, Warnings.DivZero);\n-    }\n-\n@@ -677,3 +653,1 @@\n-                if (lint.isEnabled(LintCategory.CAST))\n-                    log.warning(LintCategory.CAST,\n-                            tree.pos(), Warnings.RedundantCast(tree.clazz.type));\n+                lint.logIfEnabled(tree.pos(), LintWarnings.RedundantCast(tree.clazz.type));\n@@ -984,1 +958,1 @@\n-            warnUnsafeVararg(tree, Warnings.VarargsRedundantTrustmeAnno(\n+            lint.logIfEnabled(tree, LintWarnings.VarargsRedundantTrustmeAnno(\n@@ -990,1 +964,1 @@\n-            warnUnchecked(tree.params.head.pos(), Warnings.UncheckedVarargsNonReifiableType(varargElemType));\n+            warnUnchecked(tree.params.head.pos(), LintWarnings.UncheckedVarargsNonReifiableType(varargElemType));\n@@ -1077,1 +1051,1 @@\n-                warnUnchecked(env.tree.pos(), Warnings.UncheckedGenericArrayCreation(argtype));\n+                warnUnchecked(env.tree.pos(), LintWarnings.UncheckedGenericArrayCreation(argtype));\n@@ -1353,4 +1327,2 @@\n-            deferredLintHandler.report(_l -> {\n-                                           if (lint.isEnabled(LintCategory.STRICTFP)) {\n-                                               log.warning(LintCategory.STRICTFP,\n-                                                           pos, Warnings.Strictfp); }\n+            deferredLintHandler.report(_ -> {\n+                                           lint.logIfEnabled(pos, LintWarnings.Strictfp);\n@@ -1572,2 +1544,1 @@\n-        if (lint.isEnabled(LintCategory.RAW) &&\n-            tree.type.hasTag(CLASS) &&\n+        if (tree.type.hasTag(CLASS) &&\n@@ -1577,2 +1548,1 @@\n-            log.warning(LintCategory.RAW,\n-                    tree.pos(), Warnings.RawClassUse(tree.type, tree.type.tsym.type));\n+            lint.logIfEnabled(tree.pos(), LintWarnings.RawClassUse(tree.type, tree.type.tsym.type));\n@@ -1880,1 +1850,1 @@\n-                    Warnings.OverrideUncheckedRet(uncheckedOverrides(m, other), mtres, otres));\n+                    LintWarnings.OverrideUncheckedRet(uncheckedOverrides(m, other), mtres, otres));\n@@ -1896,1 +1866,1 @@\n-                          Warnings.OverrideUncheckedThrown(cannotOverride(m, other), unhandledUnerased.head));\n+                          LintWarnings.OverrideUncheckedThrown(cannotOverride(m, other), unhandledUnerased.head));\n@@ -1901,3 +1871,2 @@\n-        if ((((m.flags() ^ other.flags()) & Flags.VARARGS) != 0)\n-            && lint.isEnabled(LintCategory.OVERRIDES)) {\n-            log.warning(TreeInfo.diagnosticPositionFor(m, tree),\n+        if ((((m.flags() ^ other.flags()) & Flags.VARARGS) != 0)) {\n+            lint.logIfEnabled(TreeInfo.diagnosticPositionFor(m, tree),\n@@ -1905,2 +1874,2 @@\n-                        ? Warnings.OverrideVarargsMissing(varargsOverrides(m, other))\n-                        : Warnings.OverrideVarargsExtra(varargsOverrides(m, other)));\n+                        ? LintWarnings.OverrideVarargsMissing(varargsOverrides(m, other))\n+                        : LintWarnings.OverrideVarargsExtra(varargsOverrides(m, other)));\n@@ -2250,2 +2219,2 @@\n-                log.warning(LintCategory.OVERRIDES, pos,\n-                            Warnings.OverrideEqualsButNotHashcode(someClass));\n+                log.warning(pos,\n+                            LintWarnings.OverrideEqualsButNotHashcode(someClass));\n@@ -2313,1 +2282,1 @@\n-                        log.warning(Lint.LintCategory.MODULE, pos, Warnings.PoorChoiceForModuleName(componentName));\n+                        log.warning(pos, LintWarnings.PoorChoiceForModuleName(componentName));\n@@ -2784,2 +2753,2 @@\n-            log.warning(LintCategory.OVERLOADS, pos,\n-                Warnings.PotentiallyAmbiguousOverload(\n+            log.warning(pos,\n+                LintWarnings.PotentiallyAmbiguousOverload(\n@@ -3005,1 +2974,1 @@\n-                        log.warning(LintCategory.SERIAL, tree.pos(),\n+                        log.warning(tree.pos(),\n@@ -3793,2 +3762,1 @@\n-            log.warning(LintCategory.DEP_ANN,\n-                    pos, Warnings.MissingDeprecatedAnnotation);\n+            log.warning(pos, LintWarnings.MissingDeprecatedAnnotation);\n@@ -3799,2 +3767,2 @@\n-                log.warning(LintCategory.DEPRECATION, pos,\n-                            Warnings.DeprecatedAnnotationHasNoEffect(Kinds.kindName(s)));\n+                log.warning(pos,\n+                            LintWarnings.DeprecatedAnnotationHasNoEffect(Kinds.kindName(s)));\n@@ -3860,1 +3828,1 @@\n-                    deferredLintHandler.report(_l -> warnPreviewAPI(pos, Warnings.IsPreview(s)));\n+                    deferredLintHandler.report(_l -> warnPreviewAPI(pos, LintWarnings.IsPreview(s)));\n@@ -3863,1 +3831,1 @@\n-                    deferredLintHandler.report(_l -> warnPreviewAPI(pos, Warnings.IsPreviewReflective(s)));\n+                    deferredLintHandler.report(_l -> warnPreviewAPI(pos, LintWarnings.IsPreviewReflective(s)));\n@@ -4128,1 +4096,1 @@\n-                deferredLintHandler.report(_l -> warnDivZero(pos));\n+                deferredLintHandler.report(_ -> lint.logIfEnabled(pos, LintWarnings.DivZero));\n@@ -4141,4 +4109,2 @@\n-            deferredLintHandler.report(_l -> {\n-                if (lint.isEnabled(LintCategory.LOSSY_CONVERSIONS))\n-                    log.warning(LintCategory.LOSSY_CONVERSIONS,\n-                            pos, Warnings.PossibleLossOfPrecision(found, req));\n+            deferredLintHandler.report(_ -> {\n+                lint.logIfEnabled(pos, LintWarnings.PossibleLossOfPrecision(found, req));\n@@ -4153,3 +4119,3 @@\n-        if (tree.thenpart.hasTag(SKIP) && tree.elsepart == null &&\n-                lint.isEnabled(LintCategory.EMPTY))\n-            log.warning(LintCategory.EMPTY, tree.thenpart.pos(), Warnings.EmptyIf);\n+        if (tree.thenpart.hasTag(SKIP) && tree.elsepart == null) {\n+            lint.logIfEnabled(tree.thenpart.pos(), LintWarnings.EmptyIf);\n+        }\n@@ -4297,2 +4263,1 @@\n-        if (lint.isEnabled(Lint.LintCategory.AUXILIARYCLASS) &&\n-            (c.flags() & AUXILIARY) != 0 &&\n+        if ((c.flags() & AUXILIARY) != 0 &&\n@@ -4302,2 +4267,2 @@\n-            log.warning(pos,\n-                        Warnings.AuxiliaryClassAccessedFromOutsideOfItsSourceFile(c, c.sourcefile));\n+            lint.logIfEnabled(pos,\n+                        LintWarnings.AuxiliaryClassAccessedFromOutsideOfItsSourceFile(c, c.sourcefile));\n@@ -4345,5 +4310,3 @@\n-                            deferredLintHandler.report(_l -> {\n-                                if (lint.isEnabled(LintCategory.MISSING_EXPLICIT_CTOR))\n-                                   log.warning(LintCategory.MISSING_EXPLICIT_CTOR,\n-                                               pos, Warnings.MissingExplicitCtor(c, pkg, modle));\n-                                                       });\n+                            deferredLintHandler.report(_ -> {\n+                                lint.logIfEnabled(pos, LintWarnings.MissingExplicitCtor(c, pkg, modle));\n+                            });\n@@ -4378,1 +4341,1 @@\n-                    Check.this.warnUnchecked(pos(), Warnings.ProbFoundReq(diags.fragment(uncheckedKey), found, expected));\n+                    Check.this.warnUnchecked(pos(), LintWarnings.ProbFoundReq(diags.fragment(uncheckedKey), found, expected));\n@@ -4385,1 +4348,1 @@\n-                        Check.this.warnUnsafeVararg(pos(), Warnings.VarargsUnsafeUseVarargsParam(method.params.last()));\n+                        Check.this.lint.logIfEnabled(pos(), LintWarnings.VarargsUnsafeUseVarargsParam(method.params.last()));\n@@ -4640,1 +4603,1 @@\n-                log.warning(LintCategory.EXPORTS, pos, Warnings.LeaksNotAccessible(kindName(what), what, what.packge().modle));\n+                log.warning(pos, LintWarnings.LeaksNotAccessible(kindName(what), what, what.packge().modle));\n@@ -4649,1 +4612,1 @@\n-                log.warning(LintCategory.EXPORTS, pos, Warnings.LeaksNotAccessibleUnexported(kindName(what), what, what.packge().modle));\n+                log.warning(pos, LintWarnings.LeaksNotAccessibleUnexported(kindName(what), what, what.packge().modle));\n@@ -4655,1 +4618,1 @@\n-                    log.warning(LintCategory.EXPORTS, pos, Warnings.LeaksNotAccessibleUnexportedQualified(kindName(what), what, what.packge().modle));\n+                    log.warning(pos, LintWarnings.LeaksNotAccessibleUnexportedQualified(kindName(what), what, what.packge().modle));\n@@ -4677,1 +4640,1 @@\n-                log.warning(LintCategory.EXPORTS, pos, Warnings.LeaksNotAccessibleNotRequiredTransitive(kindName(what), what, what.packge().modle));\n+                log.warning(pos, LintWarnings.LeaksNotAccessibleNotRequiredTransitive(kindName(what), what, what.packge().modle));\n@@ -4683,3 +4646,2 @@\n-            deferredLintHandler.report(_l -> {\n-                if (lint.isEnabled(LintCategory.MODULE))\n-                    log.warning(LintCategory.MODULE, pos, Warnings.ModuleNotFound(msym));\n+            deferredLintHandler.report(_ -> {\n+                lint.logIfEnabled(pos, LintWarnings.ModuleNotFound(msym));\n@@ -4693,3 +4655,2 @@\n-            deferredLintHandler.report(_l -> {\n-                if (lint.isEnabled(LintCategory.OPENS))\n-                    log.warning(pos, Warnings.PackageEmptyOrNotFound(packge));\n+            deferredLintHandler.report(_ -> {\n+                lint.logIfEnabled(pos, LintWarnings.PackageEmptyOrNotFound(packge));\n@@ -4702,1 +4663,1 @@\n-            deferredLintHandler.report(_l -> {\n+            deferredLintHandler.report(_ -> {\n@@ -4704,3 +4665,3 @@\n-                    log.warning(pos, Warnings.RequiresTransitiveAutomatic);\n-                } else if (lint.isEnabled(LintCategory.REQUIRES_AUTOMATIC)) {\n-                    log.warning(pos, Warnings.RequiresAutomatic);\n+                    log.warning(pos, LintWarnings.RequiresTransitiveAutomatic);\n+                } else {\n+                    lint.logIfEnabled(pos, LintWarnings.RequiresAutomatic);\n@@ -5004,1 +4965,1 @@\n-                log.warning(LintCategory.SERIAL, p.pos(), Warnings.MissingSVUID(c));\n+                log.warning(p.pos(), Warnings.MissingSVUID(c));\n@@ -5031,2 +4992,2 @@\n-                                    log.warning(LintCategory.SERIAL,\n-                                                TreeInfo.diagnosticPositionFor(enclosed, tree),\n+                                    log.warning(\n+                                            TreeInfo.diagnosticPositionFor(enclosed, tree),\n@@ -5042,2 +5003,2 @@\n-                                        log.warning(LintCategory.SERIAL,\n-                                                    TreeInfo.diagnosticPositionFor(enclosed, tree),\n+                                        log.warning(\n+                                                TreeInfo.diagnosticPositionFor(enclosed, tree),\n@@ -5127,1 +5088,1 @@\n-                log.warning(LintCategory.SERIAL, tree.pos(),\n+                log.warning(tree.pos(),\n@@ -5155,1 +5116,1 @@\n-                                    log.warning(LintCategory.SERIAL, tree.pos(),\n+                                    log.warning(tree.pos(),\n@@ -5174,2 +5135,2 @@\n-                 log.warning(LintCategory.SERIAL,\n-                             TreeInfo.diagnosticPositionFor(svuid, tree),\n+                 log.warning(\n+                         TreeInfo.diagnosticPositionFor(svuid, tree),\n@@ -5181,2 +5142,2 @@\n-                 log.warning(LintCategory.SERIAL,\n-                             TreeInfo.diagnosticPositionFor(svuid, tree),\n+                 log.warning(\n+                         TreeInfo.diagnosticPositionFor(svuid, tree),\n@@ -5187,2 +5148,2 @@\n-                 log.warning(LintCategory.SERIAL,\n-                            TreeInfo.diagnosticPositionFor(svuid, tree),\n+                 log.warning(\n+                         TreeInfo.diagnosticPositionFor(svuid, tree),\n@@ -5196,2 +5157,2 @@\n-                 log.warning(LintCategory.SERIAL,\n-                             TreeInfo.diagnosticPositionFor(spf, tree),\n+                 log.warning(\n+                         TreeInfo.diagnosticPositionFor(spf, tree),\n@@ -5202,2 +5163,2 @@\n-                 log.warning(LintCategory.SERIAL,\n-                             TreeInfo.diagnosticPositionFor(spf, tree),\n+                 log.warning(\n+                         TreeInfo.diagnosticPositionFor(spf, tree),\n@@ -5208,2 +5169,2 @@\n-                log.warning(LintCategory.SERIAL,\n-                            TreeInfo.diagnosticPositionFor(spf, tree),\n+                log.warning(\n+                        TreeInfo.diagnosticPositionFor(spf, tree),\n@@ -5220,1 +5181,1 @@\n-                     log.warning(LintCategory.SERIAL, initExpr.pos(),\n+                     log.warning(initExpr.pos(),\n@@ -5299,2 +5260,2 @@\n-                log.warning(LintCategory.SERIAL,\n-                            TreeInfo.diagnosticPositionFor(method, tree),\n+                log.warning(\n+                        TreeInfo.diagnosticPositionFor(method, tree),\n@@ -5308,3 +5269,3 @@\n-                log.warning(LintCategory.SERIAL,\n-                            TreeInfo.diagnosticPositionFor(method, tree),\n-                            Warnings.SerialMethodNotPrivate(method.getSimpleName()));\n+                log.warning(\n+                        TreeInfo.diagnosticPositionFor(method, tree),\n+                            LintWarnings.SerialMethodNotPrivate(method.getSimpleName()));\n@@ -5314,3 +5275,3 @@\n-                log.warning(LintCategory.SERIAL,\n-                            TreeInfo.diagnosticPositionFor(method, tree),\n-                            Warnings.SerialMethodStatic(method.getSimpleName()));\n+                log.warning(\n+                        TreeInfo.diagnosticPositionFor(method, tree),\n+                            LintWarnings.SerialMethodStatic(method.getSimpleName()));\n@@ -5339,2 +5300,2 @@\n-                            log.warning(LintCategory.SERIAL,\n-                                        TreeInfo.diagnosticPositionFor(field, tree),\n+                            log.warning(\n+                                    TreeInfo.diagnosticPositionFor(field, tree),\n@@ -5348,2 +5309,2 @@\n-                            log.warning(LintCategory.SERIAL,\n-                                        TreeInfo.diagnosticPositionFor(method, tree),\n+                            log.warning(\n+                                    TreeInfo.diagnosticPositionFor(method, tree),\n@@ -5388,2 +5349,2 @@\n-                log.warning(LintCategory.SERIAL,\n-                            TreeInfo.diagnosticPositionFor(method, tree),\n+                log.warning(\n+                        TreeInfo.diagnosticPositionFor(method, tree),\n@@ -5420,2 +5381,2 @@\n-                            log.warning(LintCategory.SERIAL,\n-                                        TreeInfo.diagnosticPositionFor(field, tree),\n+                            log.warning(\n+                                    TreeInfo.diagnosticPositionFor(field, tree),\n@@ -5460,2 +5421,2 @@\n-                log.warning(LintCategory.SERIAL,\n-                            TreeInfo.diagnosticPositionFor(method, tree),\n+                log.warning(\n+                        TreeInfo.diagnosticPositionFor(method, tree),\n@@ -5470,2 +5431,2 @@\n-                log.warning(LintCategory.SERIAL,\n-                            TreeInfo.diagnosticPositionFor(method, tree),\n+                log.warning(\n+                        TreeInfo.diagnosticPositionFor(method, tree),\n@@ -5517,2 +5478,2 @@\n-                            log.warning(LintCategory.SERIAL,\n-                                        TreeInfo.diagnosticPositionFor(field, tree),\n+                            log.warning(\n+                                    TreeInfo.diagnosticPositionFor(field, tree),\n@@ -5541,2 +5502,2 @@\n-                                log.warning(LintCategory.SERIAL,\n-                                            TreeInfo.diagnosticPositionFor(method, tree),\n+                                log.warning(\n+                                        TreeInfo.diagnosticPositionFor(method, tree),\n@@ -5555,3 +5516,3 @@\n-                    log.warning(LintCategory.SERIAL,\n-                                TreeInfo.diagnosticPositionFor(method, tree),\n-                                Warnings.SerialConcreteInstanceMethod(method.getSimpleName()));\n+                    log.warning(\n+                            TreeInfo.diagnosticPositionFor(method, tree),\n+                                LintWarnings.SerialConcreteInstanceMethod(method.getSimpleName()));\n@@ -5572,3 +5533,3 @@\n-                log.warning(LintCategory.SERIAL,\n-                            TreeInfo.diagnosticPositionFor(method, tree),\n-                            Warnings.SerialMethodUnexpectedReturnType(method.getSimpleName(),\n+                log.warning(\n+                        TreeInfo.diagnosticPositionFor(method, tree),\n+                            LintWarnings.SerialMethodUnexpectedReturnType(method.getSimpleName(),\n@@ -5588,3 +5549,3 @@\n-                log.warning(LintCategory.SERIAL,\n-                            TreeInfo.diagnosticPositionFor(method, tree),\n-                            Warnings.SerialMethodOneArg(method.getSimpleName(), parameters.size()));\n+                log.warning(\n+                        TreeInfo.diagnosticPositionFor(method, tree),\n+                            LintWarnings.SerialMethodOneArg(method.getSimpleName(), parameters.size()));\n@@ -5596,3 +5557,3 @@\n-                log.warning(LintCategory.SERIAL,\n-                            TreeInfo.diagnosticPositionFor(method, tree),\n-                            Warnings.SerialMethodParameterType(method.getSimpleName(),\n+                log.warning(\n+                        TreeInfo.diagnosticPositionFor(method, tree),\n+                            LintWarnings.SerialMethodParameterType(method.getSimpleName(),\n@@ -5617,3 +5578,3 @@\n-                log.warning(LintCategory.SERIAL,\n-                            TreeInfo.diagnosticPositionFor(parameters.get(0), tree),\n-                            Warnings.SerialMethodNoArgs(method.getSimpleName()));\n+                log.warning(\n+                        TreeInfo.diagnosticPositionFor(parameters.get(0), tree),\n+                            LintWarnings.SerialMethodNoArgs(method.getSimpleName()));\n@@ -5626,2 +5587,2 @@\n-                log.warning(LintCategory.SERIAL,\n-                            TreeInfo.diagnosticPositionFor(method, tree),\n+                log.warning(\n+                        TreeInfo.diagnosticPositionFor(method, tree),\n@@ -5655,3 +5616,3 @@\n-                        log.warning(LintCategory.SERIAL,\n-                                    TreeInfo.diagnosticPositionFor(method, tree),\n-                                    Warnings.SerialMethodUnexpectedException(method.getSimpleName(),\n+                        log.warning(\n+                                TreeInfo.diagnosticPositionFor(method, tree),\n+                                    LintWarnings.SerialMethodUnexpectedException(method.getSimpleName(),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":126,"deletions":165,"binary":false,"changes":291,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import com.sun.source.tree.CaseTree;\n@@ -42,0 +41,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.LintWarnings;\n@@ -63,2 +63,0 @@\n-import java.util.Collections;\n-import java.util.IdentityHashMap;\n@@ -729,1 +727,0 @@\n-                    lint.isEnabled(Lint.LintCategory.FALLTHROUGH) &&\n@@ -731,3 +728,2 @@\n-                    log.warning(Lint.LintCategory.FALLTHROUGH,\n-                                l.tail.head.pos(),\n-                                Warnings.PossibleFallThroughIntoCase);\n+                    lint.logIfEnabled(l.tail.head.pos(),\n+                                LintWarnings.PossibleFallThroughIntoCase);\n@@ -1240,5 +1236,2 @@\n-                    if (lint.isEnabled(Lint.LintCategory.FINALLY)) {\n-                        log.warning(Lint.LintCategory.FINALLY,\n-                                TreeInfo.diagEndPos(tree.finalizer),\n-                                Warnings.FinallyCannotComplete);\n-                    }\n+                    lint.logIfEnabled(TreeInfo.diagEndPos(tree.finalizer),\n+                                LintWarnings.FinallyCannotComplete);\n@@ -2866,2 +2859,2 @@\n-                        log.warning(Lint.LintCategory.TRY, resVar.pos(),\n-                                    Warnings.TryResourceNotReferenced(resVar.sym));\n+                        log.warning(resVar.pos(),\n+                                    LintWarnings.TryResourceNotReferenced(resVar.sym));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":7,"deletions":14,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n-import com.sun.tools.javac.code.ClassFinder;\n@@ -91,0 +90,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.LintWarnings;\n@@ -1278,2 +1278,2 @@\n-                        log.warning(LintCategory.OPTIONS,\n-                                Warnings.ModuleForOptionNotFound(Option.LIMIT_MODULES, msym));\n+                        log.warning(\n+                                LintWarnings.ModuleForOptionNotFound(Option.LIMIT_MODULES, msym));\n@@ -1384,1 +1384,1 @@\n-                log.warning(Warnings.IncubatingModules(incubatingModules));\n+                log.warning(LintWarnings.IncubatingModules(incubatingModules));\n@@ -1734,2 +1734,2 @@\n-                log.warning(LintCategory.OPTIONS,\n-                        Warnings.ModuleForOptionNotFound(Option.ADD_EXPORTS, msym));\n+                log.warning(\n+                        LintWarnings.ModuleForOptionNotFound(Option.ADD_EXPORTS, msym));\n@@ -1773,1 +1773,1 @@\n-                    log.warning(Warnings.ModuleForOptionNotFound(Option.ADD_READS, msym));\n+                    log.warning(LintWarnings.ModuleForOptionNotFound(Option.ADD_READS, msym));\n@@ -1793,1 +1793,1 @@\n-                            log.warning(LintCategory.OPTIONS, Warnings.ModuleForOptionNotFound(Option.ADD_READS, targetModule));\n+                            log.warning(LintWarnings.ModuleForOptionNotFound(Option.ADD_READS, targetModule));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Modules.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.util.Map.Entry;\n@@ -39,1 +38,0 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -56,0 +54,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.LintWarnings;\n@@ -66,1 +65,0 @@\n-import com.sun.tools.javac.util.Name;\n@@ -427,1 +425,1 @@\n-            JCDiagnostic.Warning key = Warnings.PossibleThisEscape;\n+            JCDiagnostic.Warning key = LintWarnings.PossibleThisEscape;\n@@ -431,2 +429,2 @@\n-                log.warning(Lint.LintCategory.THIS_ESCAPE, pos, key);\n-                key = Warnings.PossibleThisEscapeLocation;\n+                log.warning(pos, key);\n+                key = LintWarnings.PossibleThisEscapeLocation;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ThisEscapeAnalyzer.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n@@ -44,1 +42,0 @@\n-import java.nio.file.Files;\n@@ -59,1 +56,0 @@\n-import com.sun.tools.javac.code.Lint.LintCategory;\n@@ -64,0 +60,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.LintWarnings;\n@@ -65,1 +62,0 @@\n-import com.sun.tools.javac.util.Abort;\n@@ -532,1 +528,1 @@\n-            log.warning(LintCategory.OUTPUT_FILE_CLASH, Warnings.OutputFileClash(path));\n+            log.warning(LintWarnings.OutputFileClash(path)); \/\/ @@@: shouldn't we check for suppression?\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/file\/BaseFileManager.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -80,0 +80,2 @@\n+import com.sun.tools.javac.code.Lint;\n+import com.sun.tools.javac.resources.CompilerProperties.LintWarnings;\n@@ -82,2 +84,0 @@\n-import com.sun.tools.javac.code.Lint;\n-import com.sun.tools.javac.code.Lint.LintCategory;\n@@ -227,1 +227,1 @@\n-                        log.warning(LintCategory.PATH, Warnings.InvalidPath(s));\n+                        log.warning(LintWarnings.InvalidPath(s));\n@@ -322,2 +322,2 @@\n-                    log.warning(Lint.LintCategory.PATH,\n-                                Warnings.DirPathElementNotFound(dir));\n+                    log.warning(\n+                            LintWarnings.DirPathElementNotFound(dir));\n@@ -368,2 +368,2 @@\n-                    log.warning(Lint.LintCategory.PATH,\n-                                Warnings.PathElementNotFound(file));\n+                    log.warning(\n+                            LintWarnings.PathElementNotFound(file));\n@@ -391,2 +391,2 @@\n-                                log.warning(Lint.LintCategory.PATH,\n-                                            Warnings.UnexpectedArchiveFile(file));\n+                                log.warning(\n+                                        LintWarnings.UnexpectedArchiveFile(file));\n@@ -397,2 +397,2 @@\n-                                log.warning(Lint.LintCategory.PATH,\n-                                            Warnings.InvalidArchiveFile(file));\n+                                log.warning(\n+                                        LintWarnings.InvalidArchiveFile(file));\n@@ -1663,3 +1663,3 @@\n-                            ? Warnings.DirPathElementNotDirectory(prefix)\n-                            : Warnings.DirPathElementNotFound(prefix);\n-                    log.warning(Lint.LintCategory.PATH, key);\n+                            ? LintWarnings.DirPathElementNotDirectory(prefix)\n+                            : LintWarnings.DirPathElementNotFound(prefix);\n+                    log.warning(key);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/file\/Locations.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.LintWarnings;\n@@ -858,2 +859,2 @@\n-                        log.warning(LintCategory.CLASSFILE, (DiagnosticPosition) null,\n-                                    Warnings.FutureAttr(name, version.major, version.minor, majorVersion, minorVersion));\n+                        log.warning((DiagnosticPosition) null,\n+                                    LintWarnings.FutureAttr(name, version.major, version.minor, majorVersion, minorVersion));\n@@ -1613,1 +1614,1 @@\n-                log.warning(LintCategory.CLASSFILE, Warnings.RuntimeVisibleInvisibleParamAnnotationsMismatch(currentClassFile));\n+                log.warning(LintWarnings.RuntimeVisibleInvisibleParamAnnotationsMismatch(currentClassFile));\n@@ -2081,1 +2082,1 @@\n-                        log.warning(Warnings.AnnotationMethodNotFound(container, name));\n+                        log.warning(LintWarnings.AnnotationMethodNotFound(container, name));\n@@ -2083,1 +2084,1 @@\n-                        log.warning(Warnings.AnnotationMethodNotFoundReason(container,\n+                        log.warning(LintWarnings.AnnotationMethodNotFoundReason(container,\n@@ -2963,1 +2964,1 @@\n-            log.warning(LintCategory.CLASSFILE, Warnings.RuntimeInvisibleParameterAnnotations(currentClassFile));\n+            log.warning(LintWarnings.RuntimeInvisibleParameterAnnotations(currentClassFile));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.LintWarnings;\n@@ -500,1 +501,1 @@\n-                            log.warning(LintCategory.PATH, Warnings.OutdirIsInExplodedModule(outDir));\n+                            log.warning(LintWarnings.OutdirIsInExplodedModule(outDir));\n@@ -574,1 +575,1 @@\n-                        log.warning(LintCategory.OPTIONS, Warnings.SourceNoBootclasspath(source.name, releaseNote(source, targetString)));\n+                        log.warning(LintWarnings.SourceNoBootclasspath(source.name, releaseNote(source, targetString)));\n@@ -577,1 +578,1 @@\n-                        log.warning(LintCategory.OPTIONS, Warnings.SourceNoSystemModulesPath(source.name, releaseNote(source, targetString)));\n+                        log.warning(LintWarnings.SourceNoSystemModulesPath(source.name, releaseNote(source, targetString)));\n@@ -587,1 +588,1 @@\n-            log.warning(LintCategory.OPTIONS, Warnings.OptionObsoleteSource(source.name));\n+            log.warning(LintWarnings.OptionObsoleteSource(source.name));\n@@ -594,1 +595,1 @@\n-            log.warning(LintCategory.OPTIONS, Warnings.OptionObsoleteTarget(target));\n+            log.warning(LintWarnings.OptionObsoleteTarget(target));\n@@ -628,1 +629,1 @@\n-            log.warning(LintCategory.OPTIONS, Warnings.OptionObsoleteSuppression);\n+            log.warning(LintWarnings.OptionObsoleteSuppression);\n@@ -639,1 +640,1 @@\n-            log.warning(LintCategory.OPTIONS, Warnings.AddopensIgnored);\n+            log.warning(LintWarnings.AddopensIgnored);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/Arguments.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.LintWarnings;\n@@ -38,1 +39,0 @@\n-import com.sun.tools.javac.tree.JCTree;\n@@ -43,1 +43,0 @@\n-import java.util.Iterator;\n@@ -225,1 +224,0 @@\n-     * @param lc     lint category.\n@@ -229,1 +227,1 @@\n-    protected void lexWarning(LintCategory lc, int pos, JCDiagnostic.Warning key) {\n+    protected void lexWarning(int pos, JCDiagnostic.Warning key) {\n@@ -231,1 +229,1 @@\n-        log.warning(lc, dp, key);\n+        log.warning(dp, key);\n@@ -1078,2 +1076,2 @@\n-                            lexWarning(LintCategory.TEXT_BLOCKS, pos,\n-                                    Warnings.InconsistentWhiteSpaceIndentation);\n+                            lexWarning(pos,\n+                                    LintWarnings.InconsistentWhiteSpaceIndentation);\n@@ -1082,2 +1080,2 @@\n-                            lexWarning(LintCategory.TEXT_BLOCKS, pos,\n-                                    Warnings.TrailingWhiteSpaceWillBeRemoved);\n+                            lexWarning(pos,\n+                                    LintWarnings.TrailingWhiteSpaceWillBeRemoved);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavaTokenizer.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.LintWarnings;\n@@ -672,2 +673,2 @@\n-                    log.warning(Lint.LintCategory.DANGLING_DOC_COMMENTS,\n-                            pos, Warnings.DanglingDocComment);\n+                    log.warning(\n+                            pos, LintWarnings.DanglingDocComment);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.LintWarnings;\n@@ -495,1 +496,1 @@\n-                    log.warning(Warnings.ProcSuspiciousClassName(name, extn));\n+                    log.warning(LintWarnings.ProcSuspiciousClassName(name, extn));\n@@ -711,1 +712,1 @@\n-                log.warning(Warnings.ProcIllegalFileName(name));\n+                log.warning(LintWarnings.ProcIllegalFileName(name));\n@@ -740,1 +741,1 @@\n-                log.warning(Warnings.ProcTypeRecreate(typename));\n+                log.warning(LintWarnings.ProcTypeRecreate(typename));\n@@ -744,1 +745,1 @@\n-            log.warning(Warnings.ProcTypeAlreadyExists(typename));\n+            log.warning(LintWarnings.ProcTypeAlreadyExists(typename));\n@@ -774,1 +775,1 @@\n-                log.warning(Warnings.ProcFileReopening(fileObject.getName()));\n+                log.warning(LintWarnings.ProcFileReopening(fileObject.getName()));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacFiler.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.LintWarnings;\n@@ -717,1 +718,1 @@\n-                        log.warning(Warnings.ProcDuplicateSupportedAnnotation(annotationPattern,\n+                        log.warning(LintWarnings.ProcDuplicateSupportedAnnotation(annotationPattern,\n@@ -731,1 +732,1 @@\n-                    log.warning(Warnings.ProcRedundantTypesWithWildcard(p.getClass().getName()));\n+                    log.warning(LintWarnings.ProcRedundantTypesWithWildcard(p.getClass().getName()));\n@@ -739,1 +740,1 @@\n-                            log.warning(Warnings.ProcDuplicateOptionName(optionName,\n+                            log.warning(LintWarnings.ProcDuplicateOptionName(optionName,\n@@ -960,1 +961,1 @@\n-                log.warning(Warnings.ProcAnnotationsWithoutProcessors(unmatchedAnnotations.keySet()));\n+                log.warning(LintWarnings.ProcAnnotationsWithoutProcessors(unmatchedAnnotations.keySet()));\n@@ -1783,1 +1784,1 @@\n-            log.warning(Warnings.ProcMalformedSupportedString(s, p.getClass().getName()));\n+            log.warning(LintWarnings.ProcMalformedSupportedString(s, p.getClass().getName()));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacProcessingEnvironment.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -711,0 +711,1 @@\n+# lint: this-escape\n@@ -714,0 +715,1 @@\n+# lint: this-escape\n@@ -734,0 +736,1 @@\n+# lint: text-blocks\n@@ -737,0 +740,1 @@\n+# lint: text-blocks\n@@ -1597,0 +1601,1 @@\n+# lint: path\n@@ -1664,0 +1669,1 @@\n+# lint: output-file-clash\n@@ -1879,0 +1885,1 @@\n+# lint: dangling\n@@ -1883,0 +1890,1 @@\n+# lint: path\n@@ -1887,0 +1895,1 @@\n+# lint: path\n@@ -1891,0 +1900,1 @@\n+# lint: missing-explicit-ctor\n@@ -1894,0 +1904,1 @@\n+# lint: strictfp\n@@ -1897,0 +1908,1 @@\n+# lint: finally\n@@ -1901,0 +1913,1 @@\n+# lint: module\n@@ -1905,0 +1918,1 @@\n+# lint: incubating\n@@ -1909,0 +1923,1 @@\n+# lint: deprecation\n@@ -1913,0 +1928,1 @@\n+# lint: removal\n@@ -1917,0 +1933,1 @@\n+# lint: preview\n@@ -1926,0 +1943,1 @@\n+# lint: preview\n@@ -1930,0 +1948,1 @@\n+# lint: restricted\n@@ -1935,0 +1954,1 @@\n+# lint: deprecation\n@@ -1939,0 +1959,1 @@\n+# lint: removal\n@@ -1993,0 +2014,1 @@\n+# lint: serial\n@@ -1997,0 +2019,1 @@\n+# lint: serial\n@@ -2001,0 +2024,1 @@\n+# lint: serial\n@@ -2005,0 +2029,1 @@\n+# lint: serial\n@@ -2009,0 +2034,1 @@\n+# lint: serial\n@@ -2013,0 +2039,1 @@\n+# lint: serial\n@@ -2017,0 +2044,1 @@\n+# lint: serial\n@@ -2022,0 +2050,1 @@\n+# lint: serial\n@@ -2076,0 +2105,1 @@\n+# lint: overloads\n@@ -2080,0 +2110,1 @@\n+# lint: overrides\n@@ -2084,0 +2115,1 @@\n+# lint: overrides\n@@ -2096,0 +2128,1 @@\n+# lint: path\n@@ -2099,0 +2132,1 @@\n+# lint: fallthrough\n@@ -2103,0 +2137,1 @@\n+# lint: cast\n@@ -2120,0 +2155,1 @@\n+# lint: static\n@@ -2124,0 +2160,1 @@\n+# lint: static\n@@ -2128,0 +2165,1 @@\n+# lint: options\n@@ -2132,0 +2170,1 @@\n+# lint: options\n@@ -2156,0 +2195,1 @@\n+# lint: options\n@@ -2160,0 +2200,1 @@\n+# lint: options\n@@ -2171,0 +2212,1 @@\n+# lint: options\n@@ -2175,0 +2217,1 @@\n+# lint: classfile\n@@ -2178,0 +2221,1 @@\n+# lint: requires-automatic\n@@ -2181,0 +2225,1 @@\n+# lint: requires-transitive-automatic\n@@ -2190,0 +2235,1 @@\n+# lint: processing\n@@ -2194,0 +2240,1 @@\n+# lint: processing\n@@ -2198,0 +2245,1 @@\n+# lint: processing\n@@ -2202,0 +2250,1 @@\n+# lint: processing\n@@ -2206,0 +2255,1 @@\n+# lint: processing\n@@ -2214,0 +2264,1 @@\n+# lint: processing\n@@ -2218,0 +2269,1 @@\n+# lint: processing\n@@ -2226,0 +2278,1 @@\n+# lint: processing\n@@ -2230,0 +2283,1 @@\n+# lint: processing\n@@ -2235,0 +2289,1 @@\n+# lint: processing\n@@ -2262,0 +2317,1 @@\n+# lint: try\n@@ -2266,0 +2322,1 @@\n+# lint: try\n@@ -2270,0 +2327,1 @@\n+# lint: try\n@@ -2273,0 +2331,1 @@\n+# lint: unchecked\n@@ -2277,0 +2336,1 @@\n+# lint: unchecked\n@@ -2281,0 +2341,1 @@\n+# lint: unchecked\n@@ -2284,0 +2345,1 @@\n+# lint: unchecked\n@@ -2288,0 +2350,1 @@\n+# lint: unchecked\n@@ -2294,0 +2357,1 @@\n+# lint: unchecked\n@@ -2298,0 +2362,1 @@\n+# lint: unchecked\n@@ -2302,0 +2367,1 @@\n+# lint: varargs\n@@ -2305,0 +2371,1 @@\n+# lint: dep-ann\n@@ -2309,0 +2376,1 @@\n+# lint: deprecation\n@@ -2313,0 +2381,1 @@\n+# lint: path\n@@ -2325,0 +2394,1 @@\n+# lint: path\n@@ -2329,0 +2399,1 @@\n+# lint: path\n@@ -2336,0 +2407,1 @@\n+# lint: divzero\n@@ -2339,0 +2411,1 @@\n+# lint: empty\n@@ -2343,0 +2416,1 @@\n+# lint: classfile\n@@ -2347,0 +2421,1 @@\n+# lint: classfile\n@@ -2365,0 +2440,1 @@\n+# lint: rawtypes\n@@ -2382,0 +2458,1 @@\n+# lint: varargs\n@@ -2547,0 +2624,1 @@\n+# lint: classfile\n@@ -2553,0 +2631,1 @@\n+# lint: classfile\n@@ -2679,0 +2758,1 @@\n+# lint: unchecked\n@@ -2693,0 +2773,1 @@\n+# lint: lossy-conversions\n@@ -2868,0 +2949,1 @@\n+# lint: auxiliaryclass\n@@ -3072,0 +3154,1 @@\n+# lint: unchecked\n@@ -3077,0 +3160,1 @@\n+# lint: unchecked\n@@ -3082,0 +3166,1 @@\n+# lint: overrides\n@@ -3174,0 +3259,1 @@\n+# lint: preview\n@@ -3178,0 +3264,1 @@\n+# lint: preview\n@@ -3182,0 +3269,1 @@\n+# lint: preview\n@@ -3564,0 +3652,1 @@\n+# lint: module\n@@ -3659,0 +3748,1 @@\n+# lint: opens\n@@ -3742,0 +3832,1 @@\n+# lint: options\n@@ -3757,0 +3848,1 @@\n+# lint: options\n@@ -3787,0 +3879,1 @@\n+# lint: exports\n@@ -3790,0 +3883,1 @@\n+# lint: exports\n@@ -3793,0 +3887,1 @@\n+# lint: exports\n@@ -3796,0 +3891,1 @@\n+# lint: exports\n@@ -4125,0 +4221,1 @@\n+# lint: preview\n@@ -4128,0 +4225,1 @@\n+# lint: synchronization\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":98,"deletions":0,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import com.sun.tools.javac.code.Lint.LintCategory;\n@@ -158,3 +157,5 @@\n-    \/** Report a warning, unless suppressed by the  -nowarn option or the\n-     *  maximum number of warnings has been reached.\n-     *  @param warningKey    The key for the localized warning message.\n+    \/**\n+     * Report a lint warning, unless suppressed by the  -nowarn option or the\n+     * maximum number of warnings has been reached.\n+     *\n+     * @param warningKey The key for the localized warning message.\n@@ -163,10 +164,1 @@\n-        report(diags.warning(null, source, null, warningKey));\n-    }\n-\n-    \/** Report a lint warning, unless suppressed by the  -nowarn option or the\n-     *  maximum number of warnings has been reached.\n-     *  @param lc     The lint category for the diagnostic\n-     *  @param warningKey    The key for the localized warning message.\n-     *\/\n-    public void warning(LintCategory lc, Warning warningKey) {\n-        report(diags.warning(lc, null, null, warningKey));\n+        report(diags.warning(source, null, warningKey));\n@@ -181,11 +173,1 @@\n-        report(diags.warning(null, source, pos, warningKey));\n-    }\n-\n-    \/** Report a lint warning, unless suppressed by the  -nowarn option or the\n-     *  maximum number of warnings has been reached.\n-     *  @param lc     The lint category for the diagnostic\n-     *  @param pos    The source position at which to report the warning.\n-     *  @param warningKey    The key for the localized warning message.\n-     *\/\n-    public void warning(LintCategory lc, DiagnosticPosition pos, Warning warningKey) {\n-        report(diags.warning(lc, source, pos, warningKey));\n+        report(diags.warning(source, pos, warningKey));\n@@ -200,1 +182,1 @@\n-        report(diags.warning(null, source, wrap(pos), warningKey));\n+        report(diags.warning(source, wrap(pos), warningKey));\n@@ -208,10 +190,1 @@\n-        report(diags.mandatoryWarning(null, source, pos, warningKey));\n-    }\n-\n-    \/** Report a warning.\n-     *  @param lc     The lint category for the diagnostic\n-     *  @param pos    The source position at which to report the warning.\n-     *  @param warningKey    The key for the localized warning message.\n-     *\/\n-    public void mandatoryWarning(LintCategory lc, DiagnosticPosition pos, Warning warningKey) {\n-        report(diags.mandatoryWarning(lc, source, pos, warningKey));\n+        report(diags.mandatoryWarning(source, pos, warningKey));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/AbstractLog.java","additions":9,"deletions":36,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-            JCDiagnostic diag = create(null, EnumSet.copyOf(defaultErrorFlags), source, pos, errorKey);\n+            JCDiagnostic diag = create(EnumSet.copyOf(defaultErrorFlags), source, pos, errorKey);\n@@ -133,1 +133,1 @@\n-            return mandatoryWarning(lc, source, pos, warningKey(key, args));\n+            return mandatoryWarning(source, pos, warningKey(lc, key, args));\n@@ -138,1 +138,0 @@\n-         *  @param lc     The lint category for the diagnostic\n@@ -145,1 +144,0 @@\n-                LintCategory lc,\n@@ -147,1 +145,1 @@\n-            return create(lc, EnumSet.of(DiagnosticFlag.MANDATORY), source, pos, warningKey);\n+            return create(EnumSet.of(DiagnosticFlag.MANDATORY), source, pos, warningKey);\n@@ -161,1 +159,1 @@\n-            return warning(lc, source, pos, warningKey(key, args));\n+            return warning(source, pos, warningKey(lc, key, args));\n@@ -166,1 +164,0 @@\n-         *  @param lc     The lint category for the diagnostic\n@@ -173,2 +170,2 @@\n-                LintCategory lc, DiagnosticSource source, DiagnosticPosition pos, Warning warningKey) {\n-            return create(lc, EnumSet.noneOf(DiagnosticFlag.class), source, pos, warningKey);\n+                DiagnosticSource source, DiagnosticPosition pos, Warning warningKey) {\n+            return create(EnumSet.noneOf(DiagnosticFlag.class), source, pos, warningKey);\n@@ -194,1 +191,1 @@\n-            return create(null, EnumSet.of(DiagnosticFlag.MANDATORY), source, null, noteKey);\n+            return create(EnumSet.of(DiagnosticFlag.MANDATORY), source, null, noteKey);\n@@ -215,1 +212,1 @@\n-            return create(null, EnumSet.noneOf(DiagnosticFlag.class), source, pos, noteKey);\n+            return create(EnumSet.noneOf(DiagnosticFlag.class), source, pos, noteKey);\n@@ -232,1 +229,1 @@\n-            return create(null, EnumSet.noneOf(DiagnosticFlag.class), null, null, fragmentKey);\n+            return create(EnumSet.noneOf(DiagnosticFlag.class), null, null, fragmentKey);\n@@ -246,1 +243,1 @@\n-            return create(null, EnumSet.noneOf(DiagnosticFlag.class), source, pos, DiagnosticInfo.of(kind, prefix, key, args));\n+            return create(EnumSet.noneOf(DiagnosticFlag.class), source, pos, DiagnosticInfo.of(kind, prefix, key, args));\n@@ -261,1 +258,1 @@\n-            return create(null, EnumSet.noneOf(DiagnosticFlag.class), source, pos, DiagnosticInfo.of(kind, prefix, key, args), rewriter);\n+            return create(EnumSet.noneOf(DiagnosticFlag.class), source, pos, DiagnosticInfo.of(kind, prefix, key, args), rewriter);\n@@ -273,1 +270,1 @@\n-            return create(null, EnumSet.noneOf(DiagnosticFlag.class), source, pos, diagnosticInfo);\n+            return create(EnumSet.noneOf(DiagnosticFlag.class), source, pos, diagnosticInfo);\n@@ -288,1 +285,1 @@\n-            return create(lc, flags, source, pos, DiagnosticInfo.of(kind, prefix, key, args));\n+            return create(flags, source, pos, DiagnosticInfo.of(kind, lc, prefix, key, args));\n@@ -293,1 +290,0 @@\n-         *  @param lc          The lint category, if applicable, or null\n@@ -300,2 +296,2 @@\n-                LintCategory lc, Set<DiagnosticFlag> flags, DiagnosticSource source, DiagnosticPosition pos, DiagnosticInfo diagnosticInfo) {\n-            return new JCDiagnostic(formatter, normalize(diagnosticInfo), lc, flags, source, pos);\n+                Set<DiagnosticFlag> flags, DiagnosticSource source, DiagnosticPosition pos, DiagnosticInfo diagnosticInfo) {\n+            return new JCDiagnostic(formatter, normalize(diagnosticInfo), flags, source, pos);\n@@ -305,2 +301,2 @@\n-                LintCategory lc, Set<DiagnosticFlag> flags, DiagnosticSource source, DiagnosticPosition pos, DiagnosticInfo diagnosticInfo, UnaryOperator<JCDiagnostic> rewriter) {\n-            return new JCDiagnostic(formatter, normalize(diagnosticInfo), lc, flags, source, pos, rewriter);\n+                Set<DiagnosticFlag> flags, DiagnosticSource source, DiagnosticPosition pos, DiagnosticInfo diagnosticInfo, UnaryOperator<JCDiagnostic> rewriter) {\n+            return new JCDiagnostic(formatter, normalize(diagnosticInfo), flags, source, pos, rewriter);\n@@ -311,1 +307,3 @@\n-                return DiagnosticInfo.of(diagnosticInfo.type, diagnosticInfo.prefix, diagnosticInfo.code,\n+                LintCategory category = diagnosticInfo instanceof LintWarning lintWarning ?\n+                        lintWarning.category : null;\n+                return DiagnosticInfo.of(diagnosticInfo.type, category, diagnosticInfo.prefix, diagnosticInfo.code,\n@@ -328,2 +326,2 @@\n-        Warning warningKey(String code, Object... args) {\n-            return (Warning)DiagnosticInfo.of(WARNING, prefix, code, args);\n+        Warning warningKey(LintCategory lintCategory, String code, Object... args) {\n+            return (Warning)DiagnosticInfo.of(WARNING, lintCategory, prefix, code, args);\n@@ -359,0 +357,1 @@\n+                                      null,\n@@ -362,1 +361,0 @@\n-                              null,\n@@ -467,1 +465,0 @@\n-    private final LintCategory lintCategory;\n@@ -540,0 +537,4 @@\n+            return of(type, null, prefix, code, args);\n+        }\n+\n+        public static DiagnosticInfo of(DiagnosticType type, LintCategory lc, String prefix, String code, Object... args) {\n@@ -544,1 +545,3 @@\n-                    return new Warning(prefix, code, args);\n+                    return lc == null ?\n+                            new Warning(prefix, code, args) :\n+                            new LintWarning(lc, prefix, code, args);\n@@ -586,1 +589,1 @@\n-    public static final class Warning extends DiagnosticInfo {\n+    public static sealed class Warning extends DiagnosticInfo {\n@@ -592,0 +595,16 @@\n+    \/**\n+     * Class representing warning diagnostic keys.\n+     *\/\n+    public static final class LintWarning extends Warning {\n+        final LintCategory category;\n+\n+        public LintWarning(LintCategory category, String prefix, String key, Object... args) {\n+            super(prefix, key, args);\n+            this.category = category;\n+        }\n+\n+        public LintCategory getLintCategory() {\n+            return category;\n+        }\n+    }\n+\n@@ -617,1 +636,0 @@\n-     * @param lc     the lint category for the diagnostic\n@@ -623,1 +641,0 @@\n-                       LintCategory lc,\n@@ -627,1 +644,1 @@\n-        this(formatter, diagnosticInfo, lc, flags, source, pos, null);\n+        this(formatter, diagnosticInfo, flags, source, pos, null);\n@@ -634,1 +651,0 @@\n-     * @param lc     the lint category for the diagnostic\n@@ -641,1 +657,0 @@\n-                           LintCategory lc,\n@@ -651,1 +666,0 @@\n-        this.lintCategory = lc;\n@@ -690,1 +704,1 @@\n-        return (lintCategory != null);\n+        return getLintCategory() != null;\n@@ -697,1 +711,2 @@\n-        return lintCategory;\n+        return diagnosticInfo instanceof LintWarning lintWarning ?\n+                lintWarning.category : null;\n@@ -873,1 +888,0 @@\n-                  other.getLintCategory(),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/JCDiagnostic.java","additions":51,"deletions":37,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import com.sun.tools.javac.util.JCDiagnostic.LintWarning;\n@@ -129,1 +130,1 @@\n-    public void report(DiagnosticPosition pos, Warning warnKey) {\n+    public void report(DiagnosticPosition pos, LintWarning warnKey) {\n@@ -131,0 +132,1 @@\n+        Assert.check(warnKey.getLintCategory() == lintCategory);\n@@ -262,1 +264,1 @@\n-            log.mandatoryWarning(lintCategory, pos, warnKey);\n+            log.mandatoryWarning(pos, warnKey);\n@@ -264,1 +266,1 @@\n-            log.warning(lintCategory, pos, warnKey);\n+            log.warning(pos, warnKey);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/MandatoryWarningHandler.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.LintWarnings;\n@@ -54,1 +55,0 @@\n-import com.sun.tools.javac.resources.CompilerProperties.Warnings;\n@@ -133,4 +133,4 @@\n-            log.warning(Warnings.DivZero);\n-            log.warning(tree.pos, Warnings.DivZero);\n-            log.warning(tree.pos(), Warnings.DivZero);\n-            log.warning(nil, Warnings.DivZero);\n+            log.warning(LintWarnings.DivZero);\n+            log.warning(tree.pos, LintWarnings.DivZero);\n+            log.warning(tree.pos(), LintWarnings.DivZero);\n+            log.warning(nil, LintWarnings.DivZero);\n","filename":"test\/langtools\/tools\/javac\/6304921\/TestLog.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}