{"files":[{"patch":"@@ -498,0 +498,34 @@\n+#ifdef ASSERT\n+\n+TEST_VM_ASSERT_MSG(RegMask, unexpected_clone, \".*clone sanity check\") {\n+  RegMask rm1;\n+  RegMask rm2;\n+  \/\/ Copy contents of rm1 to rm2 inappropriately (no copy constructor)\n+  memcpy((void*)&rm2, (void*)&rm1, sizeof(RegMask));\n+  rm2.Member(0); \/\/ Safeguard in RegMask must catch this.\n+}\n+\n+TEST_VM_ASSERT_MSG(RegMask, unexpected_growth, \".*unexpected register mask growth\") {\n+  RegMask rm;\n+  \/\/ Add clearly out of range OptoReg::Name\n+  rm.Insert(std::numeric_limits<OptoReg::Name>::max());\n+}\n+\n+TEST_VM_ASSERT_MSG(RegMask, not_growable, \".*register mask not growable\") {\n+  RegMask rm;\n+  \/\/ Add a bit just outside the mask, without having specified an arena for\n+  \/\/ extension.\n+  rm.Insert(rm.rm_size_in_bits());\n+}\n+\n+TEST_VM_ASSERT_MSG(RegMask, offset_mismatch, \".*offset mismatch\") {\n+  RegMask rm1;\n+  RegMask rm2;\n+  rm1.set_infinite_stack(true);\n+  rm1.rollover();\n+  \/\/ Cannot copy with different offsets\n+  rm2 = rm1;\n+}\n+\n+#endif\n+\n","filename":"test\/hotspot\/gtest\/opto\/test_regmask.cpp","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -71,33 +71,33 @@\n-                        static #boxedType[][] $inputs = generateInput(generator#boxedType, new #boxedType[#inputSize][#numberOfArguments]);\n-                        static int $nextInput = 0;\n-                        static #type[] $golden = $init();\n-\n-                        public static #type[] $init() {\n-                            #type[] golden = new #type[$inputs.length];\n-                            for (int i = 0; i < golden.length; ++i) {\n-                                #boxedType[] input = $inputs[i];\n-                                golden[i] = $test(#arguments);\n-                            }\n-                            return golden;\n-                        }\n-\n-                        @Setup\n-                        public static Object[] $setup() {\n-                            #boxedType[] input = $inputs[$nextInput];\n-                            return new Object[]{#arguments};\n-                        }\n-\n-                        @Test\n-                        @Arguments(setup = \"$setup\")\n-                        public static #type $test(#parameters) {\n-                            return #sum;\n-                        }\n-\n-                        @Check(test = \"$test\")\n-                        public static void $check(#type res) {\n-                            if (res != $golden[$nextInput]) {\n-                                throw new RuntimeException(\"wrong result \" + res + \"!=\" + $golden[$nextInput]);\n-                            }\n-                            $nextInput = ($nextInput + 1) % $inputs.length;\n-                        }\n-                        \"\"\"));\n+                static #boxedType[][] $inputs = generateInput(generator#boxedType, new #boxedType[#inputSize][#numberOfArguments]);\n+                static int $nextInput = 0;\n+                static #type[] $golden = $init();\n+\n+                public static #type[] $init() {\n+                    #type[] golden = new #type[$inputs.length];\n+                    for (int i = 0; i < golden.length; ++i) {\n+                        #boxedType[] input = $inputs[i];\n+                        golden[i] = $test(#arguments);\n+                    }\n+                    return golden;\n+                }\n+\n+                @Setup\n+                public static Object[] $setup() {\n+                    #boxedType[] input = $inputs[$nextInput];\n+                    return new Object[]{#arguments};\n+                }\n+\n+                @Test\n+                @Arguments(setup = \"$setup\")\n+                public static #type $test(#parameters) {\n+                    return #sum;\n+                }\n+\n+                @Check(test = \"$test\")\n+                public static void $check(#type res) {\n+                    if (res != $golden[$nextInput]) {\n+                        throw new RuntimeException(\"wrong result \" + res + \"!=\" + $golden[$nextInput]);\n+                    }\n+                    $nextInput = ($nextInput + 1) % $inputs.length;\n+                }\n+                \"\"\"));\n@@ -120,26 +120,23 @@\n-                        import java.util.Arrays;\n-                        import java.util.stream.*;\n-                        import compiler.lib.generators.*;\n-                        import compiler.lib.ir_framework.*;\n-                        import compiler.lib.template_framework.library.*;\n-\n-                        public class InnerTest {\n-\n-                            static RestrictableGenerator<Integer> generatorInteger = Generators.G.uniformInts();\n-                            static RestrictableGenerator<Long> generatorLong = Generators.G.uniformLongs();\n-                            static RestrictableGenerator<Float> generatorFloat = Generators.G.uniformFloats();\n-                            static RestrictableGenerator<Double> generatorDouble = Generators.G.uniformDoubles();\n-\n-                            public static void main() {\n-                                TestFramework framework = new TestFramework(InnerTest.class);\n-                                framework.addFlags(\"-classpath\", \"#classpath\");\n-                                framework.start();\n-                            }\n-\n-                            public static <T> T[][] generateInput(Generator<T> t, T[][] array) {\n-                                for (int i = 0; i < array.length; i++) {\n-                                    for (int j = 0; j < array[i].length; j++) {\n-                                        array[i][j] = t.next();\n-                                    }\n-                                }\n-                                return array;\n+                import java.util.Arrays;\n+                import java.util.stream.*;\n+                import compiler.lib.generators.*;\n+                import compiler.lib.ir_framework.*;\n+                import compiler.lib.template_framework.library.*;\n+\n+                public class InnerTest {\n+\n+                    static RestrictableGenerator<Integer> generatorInteger = Generators.G.uniformInts();\n+                    static RestrictableGenerator<Long> generatorLong = Generators.G.uniformLongs();\n+                    static RestrictableGenerator<Float> generatorFloat = Generators.G.uniformFloats();\n+                    static RestrictableGenerator<Double> generatorDouble = Generators.G.uniformDoubles();\n+\n+                    public static void main() {\n+                        TestFramework framework = new TestFramework(InnerTest.class);\n+                        framework.addFlags(\"-classpath\", \"#classpath\");\n+                        framework.start();\n+                    }\n+\n+                    public static <T> T[][] generateInput(Generator<T> t, T[][] array) {\n+                        for (int i = 0; i < array.length; i++) {\n+                            for (int j = 0; j < array[i].length; j++) {\n+                                array[i][j] = t.next();\n@@ -147,1 +144,4 @@\n-                        \"\"\",\n+                        }\n+                        return array;\n+                    }\n+                \"\"\",\n@@ -150,2 +150,2 @@\n-                        }\n-                        \"\"\")).render();\n+                }\n+                \"\"\")).render();\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestMethodArguments.java","additions":62,"deletions":62,"binary":false,"changes":124,"status":"modified"}]}