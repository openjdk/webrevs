{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/adlc\/output_h.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1623,1 +1623,3 @@\n-        \/\/ We very rarely, if ever, reach this bailout in practice.\n+        \/\/ We should never get here in practice. Bail out in product,\n+        \/\/ assert in debug.\n+        assert(false, \"should not happen\");\n","filename":"src\/hotspot\/share\/opto\/chaitin.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/coalesce.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -187,2 +188,4 @@\n-  short _second;\n-  short _first;\n+  typedef short Name;\n+  Name _second;\n+  Name _first;\n+\n@@ -190,5 +193,25 @@\n-  void set_bad (                   ) { _second = OptoReg::Bad; _first = OptoReg::Bad; }\n-  void set1    ( OptoReg::Name n  ) { _second = OptoReg::Bad; _first = n; }\n-  void set2    ( OptoReg::Name n  ) { _second = n + 1;       _first = n; }\n-  void set_pair( OptoReg::Name second, OptoReg::Name first    ) { _second= second;    _first= first; }\n-  void set_ptr ( OptoReg::Name ptr ) {\n+  static constexpr bool can_fit(OptoReg::Name n) {\n+    return n <= std::numeric_limits<Name>::max();\n+  }\n+  void set_bad() {\n+    _second = OptoReg::Bad;\n+    _first = OptoReg::Bad;\n+  }\n+  void set1(OptoReg::Name n) {\n+    assert(can_fit(n), \"overflow\");\n+    _second = OptoReg::Bad;\n+    _first = n;\n+  }\n+  void set2(OptoReg::Name n) {\n+    assert(can_fit(n + 1), \"overflow\");\n+    assert(can_fit(n), \"overflow\");\n+    _second = n + 1;\n+    _first = n;\n+  }\n+  void set_pair(OptoReg::Name second, OptoReg::Name first) {\n+    assert(can_fit(second), \"overflow\");\n+    assert(can_fit(first), \"overflow\");\n+    _second = second;\n+    _first = first;\n+  }\n+  void set_ptr(OptoReg::Name ptr) {\n@@ -196,1 +219,2 @@\n-    _second = ptr+1;\n+    assert(can_fit(ptr + 1), \"overflow\");\n+    _second = ptr + 1;\n@@ -200,0 +224,1 @@\n+    assert(can_fit(ptr), \"overflow\");\n@@ -205,3 +230,8 @@\n-  OptoRegPair(OptoReg::Name second, OptoReg::Name first) {  _second = second; _first = first; }\n-  OptoRegPair(OptoReg::Name f) { _second = OptoReg::Bad; _first = f; }\n-  OptoRegPair() { _second = OptoReg::Bad; _first = OptoReg::Bad; }\n+  OptoRegPair(OptoReg::Name second, OptoReg::Name first) {\n+    assert(can_fit(second), \"overflow\");\n+    assert(can_fit(first), \"overflow\");\n+    _second = second;\n+    _first = first;\n+  }\n+  OptoRegPair(OptoReg::Name f) : OptoRegPair(OptoReg::Bad, f) {}\n+  OptoRegPair() : OptoRegPair(OptoReg::Bad, OptoReg::Bad) {}\n","filename":"src\/hotspot\/share\/opto\/optoreg.hpp","additions":42,"deletions":12,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -87,3 +87,7 @@\n-  \/\/ The maximum OptoReg size is SHRT_MAX. Ensure that register masks cannot\n-  \/\/ grow beyond that.\n-  STATIC_ASSERT((RM_SIZE_MAX << 5) < SHRT_MAX);\n+\n+  \/\/ Sanity check\n+  STATIC_ASSERT(RM_SIZE <= RM_SIZE_MAX);\n+\n+  \/\/ Ensure that register masks cannot grow beyond the point at which\n+  \/\/ OptoRegPair can no longer index the whole mask.\n+  STATIC_ASSERT(OptoRegPair::can_fit((RM_SIZE_MAX << 5) - 1));\n@@ -273,0 +277,16 @@\n+  void _trim_watermarks() {\n+    if (_hwm < _lwm) {\n+      return;\n+    }\n+    while ((_hwm > _lwm) && _rm_up(_hwm) == 0) {\n+      _hwm--;\n+    }\n+    while ((_lwm < _hwm) && _rm_up(_lwm) == 0) {\n+      _lwm++;\n+    }\n+    if ((_lwm == _hwm) && _rm_up(_lwm) == 0) {\n+      _lwm = _rm_max();\n+      _hwm = 0;\n+    }\n+  }\n+\n@@ -675,0 +695,1 @@\n+    _trim_watermarks();\n@@ -697,0 +718,1 @@\n+    _trim_watermarks();\n@@ -704,3 +726,3 @@\n-    if ((_rm_size + _offset + _rm_size) * BitsPerWord > SHRT_MAX) {\n-      \/\/ The maximum OptoReg size is SHRT_MAX. Register masks\n-      \/\/ cannot represent anything beyond that.\n+    if (!OptoRegPair::can_fit((_rm_size + _offset + _rm_size) * BitsPerWord - 1)) {\n+      \/\/ Ensure that register masks cannot roll over beyond the point at which\n+      \/\/ OptoRegPair can no longer index the whole mask.\n","filename":"src\/hotspot\/share\/opto\/regmask.hpp","additions":28,"deletions":6,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @requires vm.opt.DeoptimizeALot == null | vm.opt.DeoptimizeALot == false\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestMaxMethodArguments.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,11 @@\n- * @run junit\/othervm\/timeout=2500 -XX:+IgnoreUnrecognizedVMOptions -XX:-VerifyDependencies -esa -DBigArityTest.ITERATION_COUNT=1 test.java.lang.invoke.BigArityTest\n+ * @comment The reduced maximum node limit below avoids, in combination with\n+ *          -Xcomp, excessive C2 memory consumption during compilation of\n+ *          some methods that both\n+ *            (1) have a large number of parameters, and\n+ *            (2) use JSR292 methods internally (which increases the\n+ *                MaxNodeLimit with a factor of 3)\n+ * @run junit\/othervm\/timeout=2500 -XX:+IgnoreUnrecognizedVMOptions\n+ *                                 -XX:MaxNodeLimit=20000\n+ *                                 -XX:-VerifyDependencies\n+ *                                 -esa -DBigArityTest.ITERATION_COUNT=1\n+ *                                 test.java.lang.invoke.BigArityTest\n","filename":"test\/jdk\/java\/lang\/invoke\/BigArityTest.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,4 @@\n- * @run main TestCatchExceptionWithVarargs\n+ * @comment The maximum node limit below avoids, in combination with -Xcomp,\n+ *          timeouts due to compilation of a large number of methods with a\n+ *          large number of parameters.\n+ * @run main\/othervm -XX:MaxNodeLimit=15000 TestCatchExceptionWithVarargs\n","filename":"test\/jdk\/java\/lang\/invoke\/TestCatchExceptionWithVarargs.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,2 +40,7 @@\n- * @run main\/bootclasspath\/othervm -DVarargsArrayTest.MAX_ARITY=255 -DVarargsArrayTest.START_ARITY=250\n- *                         VarargsArrayTest\n+ * @comment The maximum node limit below avoids, in combination with -Xcomp,\n+ *          timeouts due to compilation of a large number of methods with a\n+ *          large number of parameters.\n+ * @run main\/bootclasspath\/othervm -XX:MaxNodeLimit=15000\n+ *                                 -DVarargsArrayTest.MAX_ARITY=255\n+ *                                 -DVarargsArrayTest.START_ARITY=250\n+ *                                 VarargsArrayTest\n@@ -45,1 +50,4 @@\n- * @run main\/bootclasspath -DVarargsArrayTest.MAX_ARITY=255 -DVarargsArrayTest.EXHAUSTIVE=true VarargsArrayTest\n+ * @run main\/bootclasspath\/othervm -XX:MaxNodeLimit=15000\n+ *                                 -DVarargsArrayTest.MAX_ARITY=255\n+ *                                 -DVarargsArrayTest.EXHAUSTIVE=true\n+ *                                 VarargsArrayTest\n","filename":"test\/jdk\/java\/lang\/invoke\/VarargsArrayTest.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"}]}