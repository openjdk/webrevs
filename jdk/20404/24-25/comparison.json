{"files":[{"patch":"@@ -35,0 +35,21 @@\n+\/\/------------------------------RegMask----------------------------------------\n+\/\/ The register mask data structure (RegMask) provides a representation\n+\/\/ of sets of OptoReg::Name (i.e., machine registers and stack slots). The data\n+\/\/ structure tracks register availability and allocations during code\n+\/\/ generation, in particular during register allocation. Internally, RegMask\n+\/\/ uses a compact bitset representation. Further documentation, including an\n+\/\/ illustrative example, is available in source code comments throughout this\n+\/\/ file.\n+\n+\/\/ The ADLC defines 3 macros, RM_SIZE, RM_SIZE_MIN, and FORALL_BODY.\n+\/\/ RM_SIZE is the base size of a register mask in 32-bit words.\n+\/\/ RM_SIZE_MIN is the theoretical minimum size of a register mask in 32-bit\n+\/\/ words.\n+\/\/ FORALL_BODY replicates a BODY macro once per word in the register mask.\n+\/\/ The usage is somewhat clumsy and limited to the regmask.[h,c]pp files.\n+\/\/ However, it means the ADLC can redefine the unroll macro and all loops\n+\/\/ over register masks will be unrolled by the correct amount.\n+\/\/\n+\/\/ The ADL file describes how to print the machine-specific registers, as well\n+\/\/ as any notion of register classes.\n+\n@@ -55,14 +76,0 @@\n-\/\/------------------------------RegMask----------------------------------------\n-\/\/ The ADL file describes how to print the machine-specific registers, as well\n-\/\/ as any notion of register classes.  We provide a register mask, which is\n-\/\/ just a collection of Register numbers.\n-\n-\/\/ The ADLC defines 3 macros, RM_SIZE, RM_SIZE_MIN, and FORALL_BODY.\n-\/\/ RM_SIZE is the base size of a register mask in 32-bit words.\n-\/\/ RM_SIZE_MIN is the theoretical minimum size of a register mask in 32-bit\n-\/\/ words.\n-\/\/ FORALL_BODY replicates a BODY macro once per word in the register mask.\n-\/\/ The usage is somewhat clumsy and limited to the regmask.[h,c]pp files.\n-\/\/ However, it means the ADLC can redefine the unroll macro and all loops\n-\/\/ over register masks will be unrolled by the correct amount.\n-\n@@ -95,2 +102,2 @@\n-        (max_method_parameter_length * 2) + \/\/ Slots for incoming arguments\n-        (max_method_parameter_length * 2) + \/\/ Slots for outgoing arguments\n+        (max_method_parameter_length * 2) + \/\/ Slots for incoming arguments (from caller)\n+        (max_method_parameter_length * 2) + \/\/ Slots for outgoing arguments (to callee)\n@@ -149,3 +156,4 @@\n-  \/\/ which is problematic when dealing with the externally allocated memory for\n-  \/\/ _RM_UP_EXT. Therefore, we need some sanity checks to ensure we have not\n-  \/\/ missed any such cases. The below variables enable such checks.\n+  \/\/ for example as part of `Node::clone`. This is problematic when dealing with\n+  \/\/ the externally allocated memory for _RM_UP_EXT. Therefore, we need some\n+  \/\/ sanity checks to ensure we have addressed all such cases. The below\n+  \/\/ variables enable such checks.\n@@ -183,0 +191,1 @@\n+  \/\/ The watermarks do not concern _all_stack-registers.\n@@ -230,1 +239,1 @@\n-  \/\/                                              _rm_size\n+  \/\/                                       _rm_size = _offset = 5\n","filename":"src\/hotspot\/share\/opto\/regmask.hpp","additions":29,"deletions":20,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -0,0 +1,160 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8325467\n+ * @summary Ensure that C2 can compile methods up to the maximum\n+ *          number of parameters (according to the JVM spec).\n+ * @library \/test\/lib \/\n+ * @run driver compiler.arguments.TestMethodArguments\n+ *\/\n+\n+package compiler.arguments;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import compiler.lib.compile_framework.CompileFramework;\n+import compiler.lib.template_framework.Template;\n+import compiler.lib.template_framework.library.CodeGenerationDataNameType;\n+import compiler.lib.template_framework.library.PrimitiveType;\n+\n+public class TestMethodArguments {\n+\n+    static final int MIN = 0;\n+    static final int MAX = 255;\n+    static final int INPUT_SIZE = 100;\n+\n+    public static Template.ZeroArgs generateTest(PrimitiveType t, int numberOfArguments) {\n+        String arguments = IntStream.range(0, numberOfArguments)\n+                .mapToObj(i -> \"input[\" + i + \"]\")\n+                .collect(Collectors.joining(\", \"));\n+        String parameters = IntStream.range(0, numberOfArguments)\n+                .mapToObj(i -> t.name() + \" x\" + i)\n+                .collect(Collectors.joining(\", \"));\n+        String sum = numberOfArguments == 0 ? \"0\"\n+                : IntStream.range(0, numberOfArguments)\n+                        .mapToObj(i -> \"x\" + i)\n+                        .collect(Collectors.joining(\" + \"));\n+        return Template.make(() -> Template.body(\n+                Template.let(\"type\", t.name()),\n+                Template.let(\"boxedType\", t.boxedTypeName()),\n+                Template.let(\"arguments\", arguments),\n+                Template.let(\"parameters\", parameters),\n+                Template.let(\"sum\", sum),\n+                Template.let(\"inputSize\", INPUT_SIZE),\n+                Template.let(\"numberOfArguments\", numberOfArguments),\n+                \"\"\"\n+                        static #boxedType[][] $inputs = generateInput(generator#boxedType, new #boxedType[#inputSize][#numberOfArguments]);\n+                        static int $nextInput = 0;\n+                        static #type[] $golden = $init();\n+\n+                        public static #type[] $init() {\n+                            #type[] golden = new #type[$inputs.length];\n+                            for (int i = 0; i < golden.length; ++i) {\n+                                #boxedType[] input = $inputs[i];\n+                                golden[i] = $test(#arguments);\n+                            }\n+                            return golden;\n+                        }\n+\n+                        @Setup\n+                        public static Object[] $setup() {\n+                            #boxedType[] input = $inputs[$nextInput];\n+                            return new Object[]{#arguments};\n+                        }\n+\n+                        @Test\n+                        @Arguments(setup = \"$setup\")\n+                        public static #type $test(#parameters) {\n+                            return #sum;\n+                        }\n+\n+                        @Check(test = \"$test\")\n+                        public static void $check(#type res) {\n+                            if (res != $golden[$nextInput]) {\n+                                throw new RuntimeException(\"wrong result \" + res + \"!=\" + $golden[$nextInput]);\n+                            }\n+                            $nextInput = ($nextInput + 1) % $inputs.length;\n+                        }\n+                        \"\"\"));\n+    }\n+\n+    public static String generate(CompileFramework comp) {\n+        List<Object> tests = new LinkedList<>();\n+        for (int i = MIN; i <= MAX; ++i) {\n+            tests.add(generateTest(CodeGenerationDataNameType.ints(), i).asToken());\n+            tests.add(generateTest(CodeGenerationDataNameType.floats(), i).asToken());\n+            \/\/ Longs and doubles take up double as much space in the parameter list as other\n+            \/\/ primitive types (e.g., int). We therefore have to divide by two to fill up\n+            \/\/ the same amount of space as for ints and floats.\n+            tests.add(generateTest(CodeGenerationDataNameType.longs(), i \/ 2).asToken());\n+            tests.add(generateTest(CodeGenerationDataNameType.doubles(), i \/ 2).asToken());\n+        }\n+        return Template.make(() -> Template.body(\n+                Template.let(\"classpath\", comp.getEscapedClassPathOfCompiledClasses()),\n+                \"\"\"\n+                        import java.util.Arrays;\n+                        import java.util.stream.*;\n+                        import compiler.lib.generators.*;\n+                        import compiler.lib.ir_framework.*;\n+                        import compiler.lib.template_framework.library.*;\n+\n+                        public class InnerTest {\n+\n+                            static RestrictableGenerator<Integer> generatorInteger = Generators.G.uniformInts();\n+                            static RestrictableGenerator<Long> generatorLong = Generators.G.uniformLongs();\n+                            static RestrictableGenerator<Float> generatorFloat = Generators.G.uniformFloats();\n+                            static RestrictableGenerator<Double> generatorDouble = Generators.G.uniformDoubles();\n+\n+                            public static void main() {\n+                                TestFramework framework = new TestFramework(InnerTest.class);\n+                                framework.addFlags(\"-classpath\", \"#classpath\");\n+                                framework.start();\n+                            }\n+\n+                            public static <T> T[][] generateInput(Generator<T> t, T[][] array) {\n+                                for (int i = 0; i < array.length; i++) {\n+                                    for (int j = 0; j < array[i].length; j++) {\n+                                        array[i][j] = t.next();\n+                                    }\n+                                }\n+                                return array;\n+                            }\n+                        \"\"\",\n+                tests,\n+                \"\"\"\n+                        }\n+                        \"\"\")).render();\n+    }\n+\n+    public static void main(String[] args) {\n+        CompileFramework comp = new CompileFramework();\n+        comp.addJavaSourceCode(\"InnerTest\", generate(comp));\n+        comp.compile();\n+        comp.invoke(\"InnerTest\", \"main\", new Object[] {});\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestMethodArguments.java","additions":160,"deletions":0,"binary":false,"changes":160,"status":"added"}]}