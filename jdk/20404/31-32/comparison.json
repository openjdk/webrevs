{"files":[{"patch":"@@ -88,4 +88,0 @@\n-  \/\/ RM_SIZE_IN_INTS_MIN, but in number of machine words\n-  static const unsigned int RM_SIZE_IN_WORDS_MIN =\n-      LP64_ONLY(((RM_SIZE_IN_INTS_MIN + 1) & ~1) >> 1) NOT_LP64(RM_SIZE_IN_INTS_MIN);\n-\n@@ -196,3 +192,2 @@\n-  \/\/ (for a made-up platform with 10 registers and 4-bit\n-  \/\/ words) that has been extended with two additional words to represent more\n-  \/\/ stack locations:\n+  \/\/ (for a made-up platform with 10 registers and 4-bit words) that has been\n+  \/\/ extended with two additional words to represent more stack locations:\n@@ -417,1 +412,1 @@\n-  \/\/ in directly.  Calls to this look something like RM(1,2,3,4);\n+  \/\/ in directly.  Calls to this look something like RM(0xc0, 0x0, 0x0, false);\n","filename":"src\/hotspot\/share\/opto\/regmask.hpp","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-        \/\/ Exceptions after every definition of a temporary forces the\n+        \/\/ Exceptions after every definition of a temporary force the\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestMaxMethodArguments.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,2 @@\n- * @run driver\/timeout=480 compiler.arguments.TestMethodArguments\n+ * @requires vm.compMode != \"Xcomp\"\n+ * @run driver\/timeout=1000 compiler.arguments.TestMethodArguments\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestMethodArguments.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}