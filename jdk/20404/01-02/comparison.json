{"files":[{"patch":"@@ -1404,1 +1404,1 @@\n-        assert(assigned < (int)mask.rm_size_bits(), \"sanity\");\n+        assert(mask.can_represent(assigned), \"sanity\");\n","filename":"src\/hotspot\/share\/opto\/chaitin.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -177,1 +177,1 @@\n-  bool can_use = use_mask.Member(def_reg) != 0;\n+  bool can_use = use_mask.Member_including_AllStack(def_reg);\n@@ -683,0 +683,1 @@\n+              assert(lrgs(useidx).mask().can_represent(ureg_lo), \"sanity\");\n@@ -765,0 +766,1 @@\n+        assert(lrgs(lidx).mask().can_represent(nreg_lo), \"sanity\");\n","filename":"src\/hotspot\/share\/opto\/postaloc.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -303,2 +303,2 @@\n-  \/\/ Check for register being in mask (excluding inclusion by the all-stack flag).\n-  bool Member(OptoReg::Name reg) const {\n+  \/\/ Check for register being in mask.\n+  bool Member(OptoReg::Name reg, bool include_all_stack = false) const {\n@@ -307,1 +307,3 @@\n-    if (reg >= (int)rm_size_bits()) { return false; }\n+    if (reg >= (int)rm_size_bits()) {\n+      return include_all_stack ? is_AllStack() : false;\n+    }\n@@ -312,0 +314,4 @@\n+  bool Member_including_AllStack(OptoReg::Name reg) const {\n+    return Member(reg, true);\n+  }\n+\n@@ -376,0 +382,5 @@\n+\n+  bool can_represent(OptoReg::Name reg, unsigned int size = 1) const {\n+    reg = reg - offset_bits();\n+    return (int)reg <= (int)(rm_size_bits() - size) && (int)reg >= 0;\n+  }\n","filename":"src\/hotspot\/share\/opto\/regmask.hpp","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"}]}