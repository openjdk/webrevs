{"files":[{"patch":"@@ -48,0 +48,1 @@\n+import jdk.internal.util.ArraysSupport;\n@@ -3966,0 +3967,1 @@\n+    @Override\n@@ -3994,6 +3996,3 @@\n-        for (int i = 0; i < len1; i++) {\n-            int a = m1[i];\n-            int b = m2[i];\n-            if (a != b)\n-                return ((a & LONG_MASK) < (b & LONG_MASK)) ? -1 : 1;\n-        }\n+        int i = ArraysSupport.mismatch(m1, m2, len1);\n+        if (i != -1)\n+            return Integer.compareUnsigned(m1[i], m2[i]) < 0 ? -1 : 1;\n@@ -4026,1 +4025,1 @@\n-                return ((a & LONG_MASK) < (b & LONG_MASK))? -1 : 1;\n+                return Integer.compareUnsigned(a, b) < 0 ? -1 : 1;\n@@ -4035,1 +4034,1 @@\n-                return ((a & LONG_MASK) < (b & LONG_MASK))? -1 : 1;\n+                return Integer.compareUnsigned(a, b) < 0 ? -1 : 1;\n@@ -4040,1 +4039,1 @@\n-                return ((a & LONG_MASK) < (b & LONG_MASK))? -1 : 1;\n+                return Integer.compareUnsigned(a, b) < 0 ? -1 : 1;\n@@ -4053,0 +4052,1 @@\n+    @Override\n@@ -4064,4 +4064,1 @@\n-        int[] m = mag;\n-        int len = m.length;\n-        int[] xm = xInt.mag;\n-        if (len != xm.length)\n+        if (mag.length != xInt.mag.length)\n@@ -4070,5 +4067,1 @@\n-        for (int i = 0; i < len; i++)\n-            if (xm[i] != m[i])\n-                return false;\n-\n-        return true;\n+        return ArraysSupport.mismatch(mag, xInt.mag, mag.length) == -1;\n@@ -4103,3 +4096,1 @@\n-     * Returns the hash code for this BigInteger.\n-     *\n-     * @return hash code for this BigInteger.\n+     * {@return the hash code for this BigInteger}\n@@ -4107,0 +4098,1 @@\n+    @Override\n@@ -4108,6 +4100,2 @@\n-        int hashCode = 0;\n-\n-        for (int i=0; i < mag.length; i++)\n-            hashCode = (int)(31*hashCode + (mag[i] & LONG_MASK));\n-\n-        return hashCode * signum;\n+        return ArraysSupport.vectorizedHashCode(mag, 0, mag.length, 0,\n+                ArraysSupport.T_INT) * signum;\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":15,"deletions":27,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.math.BigInteger;\n+\n+\/*\n+ * @test\n+ * @bug 8310813\n+ * @summary Check hashCode implementation against reference values\n+ *\/\n+public class HashCode {\n+\n+    \/\/ This test guards against inadvertent changes to BigInteger.hashCode,\n+    \/\/ by checking generated hashCode values against reference values\n+    \/\/ captured immediately before 8310813\n+\n+    public static void main(String[] args) {\n+        equals(          0, BigInteger.ZERO);\n+        equals(          1, BigInteger.ONE);\n+        equals(          2, BigInteger.TWO);\n+        equals(         10, BigInteger.TEN);\n+        equals(       -128, BigInteger.valueOf(Byte.MIN_VALUE));\n+        equals(        127, BigInteger.valueOf(Byte.MAX_VALUE));\n+        equals(     -32768, BigInteger.valueOf(Short.MIN_VALUE));\n+        equals(      32767, BigInteger.valueOf(Short.MAX_VALUE));\n+        equals(          0, BigInteger.valueOf(Character.MIN_VALUE));\n+        equals(      65535, BigInteger.valueOf(Character.MAX_VALUE));\n+        equals(-2147483648, BigInteger.valueOf(Integer.MIN_VALUE));\n+        equals( 2147483647, BigInteger.valueOf(Integer.MAX_VALUE));\n+        equals(-2147483648, BigInteger.valueOf(Long.MIN_VALUE));\n+        equals( 2147483616, BigInteger.valueOf(Long.MAX_VALUE));\n+        equals(         -1, BigInteger.valueOf(-1));\n+\n+        \/\/ a 37-byte negative number, generated at random\n+        equals( 1428257188, new BigInteger(\"\"\"\n+                -5573526435790097067262357965922443376770234990700620666883\\\n+                2705705469477701887396205062479\"\"\"));\n+        \/\/ a 123-byte positive number, generated at random\n+        equals( -412503667, new BigInteger(\"\"\"\n+                13093241912251296135908856604398494061635394768699286753760\\\n+                22827291528069076557720973813183142494646514532475660126948\\\n+                43316474303725664231917408569680292008962577772928370936861\\\n+                12952691245923210726443405774197400117701581498597123145452\\\n+                15111774818054200162634242662445757757255702394598235971294\\\n+                50\"\"\"));\n+    }\n+\n+    private static void equals(int expectedHashCode, BigInteger i) {\n+        int actualHashCode = i.hashCode();\n+        if (expectedHashCode != actualHashCode)\n+            throw new AssertionError(\"%s: expectedHashCode=%s, actual=%s\"\n+                    .formatted(i, expectedHashCode, actualHashCode));\n+    }\n+}\n","filename":"test\/jdk\/java\/math\/BigInteger\/HashCode.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.math;\n+\n+import java.math.BigInteger;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 3, time = 5)\n+@Measurement(iterations = 3, time = 5)\n+@Fork(value = 3)\n+public class BigIntegerCompareTo {\n+\n+    public enum Group {S, M, L}\n+\n+    @Param({\"S\", \"M\", \"L\"})\n+    private Group group;\n+\n+    private static final int MAX_LENGTH = Arrays.stream(Group.values())\n+            .mapToInt(p -> getNumbersOfBits(p).length)\n+            .max()\n+            .getAsInt();\n+\n+    private BigInteger[] numbers;\n+\n+    @Setup\n+    public void setup() {\n+        int[] nBits = getNumbersOfBits(group);\n+        numbers = new BigInteger[2 * MAX_LENGTH];\n+        for (int i = 0; i < MAX_LENGTH; i++) {\n+            var p = Shared.createPair(nBits[i % nBits.length]);\n+            numbers[2 * i] = p.x();\n+            numbers[2 * i + 1] = p.y();\n+        }\n+    }\n+\n+    private static int[] getNumbersOfBits(Group p) {\n+        \/\/ the below arrays were derived from stats gathered from running tests in\n+        \/\/ the security area, which is the biggest client of BigInteger in JDK\n+        return switch (p) {\n+            case S -> new int[]{0, 1, 2, 11, 12, 13, 14, 15, 16, 17, 18, 19};\n+            case M -> new int[]{255, 256, 512};\n+            case L -> new int[]{1023, 1024, 1534, 1535, 1536};\n+        };\n+    }\n+\n+    @Benchmark\n+    public void testCompareTo(Blackhole bh) {\n+        for (int i = 0; i < numbers.length; i += 2)\n+            bh.consume(numbers[i].compareTo(numbers[i + 1]));\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigIntegerCompareTo.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.math;\n+\n+import java.math.BigInteger;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 3, time = 5)\n+@Measurement(iterations = 3, time = 5)\n+@Fork(value = 3)\n+public class BigIntegerEquals {\n+\n+    public enum Group {S, M, L}\n+\n+    @Param({\"S\", \"M\", \"L\"})\n+    private Group group;\n+\n+    private static final int MAX_LENGTH = Arrays.stream(Group.values())\n+            .mapToInt(p -> getNumbersOfBits(p).length)\n+            .max()\n+            .getAsInt();\n+\n+    private BigInteger[] numbers;\n+\n+    @Setup\n+    public void setup() {\n+        int[] nBits = getNumbersOfBits(group);\n+        numbers = new BigInteger[2 * MAX_LENGTH];\n+        for (int i = 0; i < MAX_LENGTH; i++) {\n+            var p = Shared.createPair(nBits[i % nBits.length]);\n+            numbers[2 * i] = p.x();\n+            numbers[2 * i + 1] = p.y();\n+        }\n+    }\n+\n+    private static int[] getNumbersOfBits(Group p) {\n+        \/\/ the below arrays were derived from stats gathered from running tests in\n+        \/\/ the security area, which is the biggest client of BigInteger in JDK\n+        return switch (p) {\n+            case S -> new int[]{1, 46};\n+            case M -> new int[]{129, 130, 251, 252, 253, 254, 255, 256};\n+            case L -> new int[]{382, 383, 384, 445, 446, 447, 448, 519, 520, 521};\n+        };\n+    }\n+\n+    @Benchmark\n+    public void testEquals(Blackhole bh) {\n+        for (int i = 0; i < numbers.length; i += 2)\n+            bh.consume(numbers[i].equals(numbers[i + 1]));\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigIntegerEquals.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.math;\n+\n+import java.math.BigInteger;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 3, time = 5)\n+@Measurement(iterations = 3, time = 5)\n+@Fork(value = 3)\n+public class BigIntegerHashCode {\n+\n+    public enum Group {S, M, L}\n+\n+    @Param({\"S\", \"M\", \"L\"})\n+    private Group group;\n+\n+    private static final int MAX_LENGTH = Arrays.stream(Group.values())\n+            .mapToInt(p -> getNumbersOfBits(p).length)\n+            .max()\n+            .getAsInt();\n+\n+    private BigInteger[] numbers;\n+\n+    @Setup\n+    public void setup() {\n+        int[] nBits = getNumbersOfBits(group);\n+        numbers = new BigInteger[MAX_LENGTH];\n+        for (int i = 0; i < MAX_LENGTH; i++) {\n+            numbers[i] = Shared.createSingle(nBits[i % nBits.length]);\n+        }\n+    }\n+\n+    private static int[] getNumbersOfBits(Group p) {\n+        \/\/ the below arrays were derived from stats gathered from running tests in\n+        \/\/ the security area, which is the biggest client of BigInteger in JDK\n+        return switch (p) {\n+            case S -> new int[]{2, 7, 13, 64};\n+            case M -> new int[]{256, 384, 511, 512, 521, 767, 768};\n+            case L -> new int[]{1024, 1025, 2047, 2048, 2049, 3072, 4096, 5120, 6144};\n+        };\n+    }\n+\n+    @Benchmark\n+    public void testHashCode(Blackhole bh) {\n+        for (var n : numbers)\n+            bh.consume(n.hashCode());\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigIntegerHashCode.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,157 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.math;\n+\n+import java.math.BigInteger;\n+import java.util.Random;\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/ THIS IS NOT A BENCHMARK\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+public final class Shared {\n+\n+    \/\/ General note\n+    \/\/ ============\n+    \/\/\n+    \/\/ Isn't there a simple way to get a BigInteger of the specified number\n+    \/\/ of bits of magnitude? It does not seem like it.\n+    \/\/\n+    \/\/ We cannot create a BigInteger of the specified number of bytes,\n+    \/\/ directly and *cheaply*. This constructor does not do what you\n+    \/\/ might think it does:\n+    \/\/\n+    \/\/      BigInteger(int numBits, Random rnd)\n+    \/\/\n+    \/\/  The only real direct option we have is this constructor:\n+    \/\/\n+    \/\/      BigInteger(int bitLength, int certainty, Random rnd)\n+    \/\/\n+    \/\/  But even with certainty == 0, it is not cheap. So, create the\n+    \/\/  number with the closest number of bytes and then shift right\n+    \/\/  the excess bits.\n+\n+    private Shared() {\n+        throw new AssertionError(\"This is a utility class\");\n+    }\n+\n+    \/\/\n+    \/\/ Creates a pair of same sign numbers x and y that minimally differ in\n+    \/\/ magnitude.\n+    \/\/\n+    \/\/ More formally: x.bitLength() == nBits and x.signum() == y.signum()\n+    \/\/ and either\n+    \/\/\n+    \/\/   * y.bitLength() == nBits, and\n+    \/\/   * x.testBit(0) != y.testBit(0)\n+    \/\/\n+    \/\/ or\n+    \/\/\n+    \/\/   * y.bitLength() == nBits + 1\n+    \/\/\n+    \/\/ By construction, such numbers are unequal to each other, but the\n+    \/\/ difference in magnitude is minimal. That way, the comparison\n+    \/\/ methods, such as equals and compareTo, are forced to examine\n+    \/\/ the _complete_ number representation.\n+    \/\/\n+    \/\/ Assumptions on BigInteger mechanics\n+    \/\/ ===================================\n+    \/\/\n+    \/\/ 1. bigLength() is not consulted with for short-circuiting; if it is,\n+    \/\/    then we have a problem with nBits={0,1}\n+    \/\/ 2. new BigInteger(0, new byte[]{0}) and new BigInteger(1, new byte[]{1})\n+    \/\/    are not canonicalized to BigInteger.ZERO and BigInteger.ONE,\n+    \/\/    respectively; if they are, then internal optimizations might be\n+    \/\/    possible (BigInteger is not exactly a value-based class).\n+    \/\/ 3. Comparison and equality are checked from the most significant bit\n+    \/\/    to the least significant bit, not the other way around (for\n+    \/\/    comparison it seems natural, but not for equality). If any\n+    \/\/    of those are checked in the opposite direction, then the check\n+    \/\/    might short-circuit.\n+    \/\/\n+    public static Pair createPair(int nBits) {\n+        if (nBits < 0) {\n+            throw new IllegalArgumentException(String.valueOf(nBits));\n+        } else if (nBits == 0) {\n+            var zero = new BigInteger(nBits, new byte[0]);\n+            var one = new BigInteger(\/* positive *\/ 1, new byte[]{1});\n+            return new Pair(zero, one);\n+        } else if (nBits == 1) {\n+            var one = new BigInteger(\/* positive *\/ 1, new byte[]{1});\n+            var two = new BigInteger(\/* positive *\/ 1, new byte[]{2});\n+            return new Pair(one, two);\n+        }\n+        int nBytes = (nBits + 7) \/ 8;\n+        var r = new Random();\n+        var bytes = new byte[nBytes];\n+        r.nextBytes(bytes);\n+        \/\/ Create a BigInteger of the exact bit length by:\n+        \/\/ 1. ensuring that the most significant bit is set so that\n+        \/\/    no leading zeros are truncated, and\n+        \/\/ 2. explicitly specifying signum, so it's not calculated from\n+        \/\/    the passed bytes, which must represent magnitude only\n+        bytes[0] |= (byte) 0b1000_0000;\n+        var x = new BigInteger(\/* positive *\/ 1, bytes)\n+                .shiftRight(nBytes * 8 - nBits);\n+        var y = x.flipBit(0);\n+        \/\/ do not rely on the assert statement in benchmark\n+        if (x.bitLength() != nBits)\n+            throw new AssertionError(x.bitLength() + \", \" + nBits);\n+        return new Pair(x, y);\n+    }\n+\n+    public record Pair(BigInteger x, BigInteger y) {\n+        public Pair {\n+            if (x.signum() == -y.signum()) \/\/ if the pair comprises positive and negative\n+                throw new IllegalArgumentException(\"x.signum()=\" + x.signum()\n+                        + \", y=signum()=\" + y.signum());\n+            if (y.bitLength() - x.bitLength() > 1)\n+                throw new IllegalArgumentException(\"x.bitLength()=\" + x.bitLength()\n+                        + \", y.bitLength()=\" + y.bitLength());\n+        }\n+    }\n+\n+    public static BigInteger createSingle(int nBits) {\n+        if (nBits < 0) {\n+            throw new IllegalArgumentException(String.valueOf(nBits));\n+        }\n+        if (nBits == 0) {\n+            return new BigInteger(nBits, new byte[0]);\n+        }\n+        int nBytes = (nBits + 7) \/ 8;\n+        var r = new Random();\n+        var bytes = new byte[nBytes];\n+        r.nextBytes(bytes);\n+        \/\/ Create a BigInteger of the exact bit length by:\n+        \/\/ 1. ensuring that the most significant bit is set so that\n+        \/\/    no leading zeros are truncated, and\n+        \/\/ 2. explicitly specifying signum, so it's not calculated from\n+        \/\/    the passed bytes, which must represent magnitude only\n+        bytes[0] |= (byte) 0b1000_0000;\n+        var x = new BigInteger(\/* positive *\/ 1, bytes)\n+                .shiftRight(nBytes * 8 - nBits);\n+        if (x.bitLength() != nBits)\n+            throw new AssertionError(x.bitLength() + \", \" + nBits);\n+        return x;\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/Shared.java","additions":157,"deletions":0,"binary":false,"changes":157,"status":"added"}]}