{"files":[{"patch":"@@ -880,0 +880,8 @@\n+        \/\/ convert null entry return values into NSEE\n+        static <T extends Map.Entry<?,?>> T nsee(T entry) {\n+            if (entry == null) {\n+                throw new NoSuchElementException();\n+            } else {\n+                return entry;\n+            }\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/AbstractMap.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -266,2 +266,9 @@\n-     * that behaves as follows. Its {@link SequencedSet#add add} and {@link\n-     * SequencedSet#addAll addAll} methods throw {@link UnsupportedOperationException}.\n+     * that behaves as follows. Its {@link SequencedSet#add add}, {@link\n+     * SequencedSet#addAll addAll}, {@link SequencedSet#addFirst addFirst}, and {@link\n+     * SequencedSet#addLast addLast} methods throw {@link UnsupportedOperationException}.\n+     * Its {@link SequencedSet#getFirst getFirst} and {@link SequencedSet#getLast getLast}\n+     * methods are implemented in terms of the {@link #firstEntry firstEntry} and {@link\n+     * #lastEntry lastEntry} methods of this interface, respectively. Its {@link\n+     * SequencedSet#removeFirst removeFirst} and {@link SequencedSet#removeLast removeLast}\n+     * methods are implemented in terms of the {@link #pollFirstEntry pollFirstEntry} and\n+     * {@link #pollLastEntry pollLastEntry} methods of this interface, respectively.\n@@ -289,0 +296,10 @@\n+            public void addFirst(K k) { throw new UnsupportedOperationException(); }\n+            public void addLast(K k) { throw new UnsupportedOperationException(); }\n+            public K getFirst() { return nsee(SequencedMap.this.firstEntry()).getKey(); }\n+            public K getLast() { return nsee(SequencedMap.this.lastEntry()).getKey(); }\n+            public K removeFirst() {\n+                return nsee(SequencedMap.this.pollFirstEntry()).getKey();\n+            }\n+            public K removeLast() {\n+                return nsee(SequencedMap.this.pollLastEntry()).getKey();\n+            }\n@@ -298,2 +315,9 @@\n-     * that behaves as follows. Its {@link SequencedCollection#add add} and {@link\n-     * SequencedCollection#addAll addAll} methods throw {@link UnsupportedOperationException}.\n+     * that behaves as follows. Its {@link SequencedCollection#add add}, {@link\n+     * SequencedCollection#addAll addAll}, {@link SequencedCollection#addFirst addFirst}, and {@link\n+     * SequencedCollection#addLast addLast} methods throw {@link UnsupportedOperationException}.\n+     * Its {@link SequencedCollection#getFirst getFirst} and {@link SequencedCollection#getLast getLast}\n+     * methods are implemented in terms of the {@link #firstEntry firstEntry} and {@link\n+     * #lastEntry lastEntry} methods of this interface, respectively. Its {@link\n+     * SequencedCollection#removeFirst removeFirst} and {@link SequencedCollection#removeLast removeLast}\n+     * methods are implemented in terms of the {@link #pollFirstEntry pollFirstEntry} and\n+     * {@link #pollLastEntry pollLastEntry} methods of this interface, respectively.\n@@ -316,0 +340,10 @@\n+            public void addFirst(V v) { throw new UnsupportedOperationException(); }\n+            public void addLast(V v) { throw new UnsupportedOperationException(); }\n+            public V getFirst() { return nsee(SequencedMap.this.firstEntry()).getValue(); }\n+            public V getLast() { return nsee(SequencedMap.this.lastEntry()).getValue(); }\n+            public V removeFirst() {\n+                return nsee(SequencedMap.this.pollFirstEntry()).getValue();\n+            }\n+            public V removeLast() {\n+                return nsee(SequencedMap.this.pollLastEntry()).getValue();\n+            }\n@@ -325,2 +359,9 @@\n-     * that behaves as follows. Its {@link SequencedSet#add add} and {@link\n-     * SequencedSet#addAll addAll} methods throw {@link UnsupportedOperationException}.\n+     * that behaves as follows. Its {@link SequencedSet#add add}, {@link\n+     * SequencedSet#addAll addAll}, {@link SequencedSet#addFirst addFirst}, and {@link\n+     * SequencedSet#addLast addLast} methods throw {@link UnsupportedOperationException}.\n+     * Its {@link SequencedSet#getFirst getFirst} and {@link SequencedSet#getLast getLast}\n+     * methods are implemented in terms of the {@link #firstEntry firstEntry} and {@link\n+     * #lastEntry lastEntry} methods of this interface, respectively. Its {@link\n+     * SequencedSet#removeFirst removeFirst} and {@link SequencedSet#removeLast removeLast}\n+     * methods are implemented in terms of the {@link #pollFirstEntry pollFirstEntry} and\n+     * {@link #pollLastEntry pollLastEntry} methods of this interface, respectively.\n@@ -349,0 +390,10 @@\n+            public void addFirst(Map.Entry<K, V> e) { throw new UnsupportedOperationException(); }\n+            public void addLast(Map.Entry<K, V> e) { throw new UnsupportedOperationException(); }\n+            public Map.Entry<K, V> getFirst() { return nsee(SequencedMap.this.firstEntry()); }\n+            public Map.Entry<K, V> getLast() { return nsee(SequencedMap.this.lastEntry()); }\n+            public Map.Entry<K, V> removeFirst() {\n+                return nsee(SequencedMap.this.pollFirstEntry());\n+            }\n+            public Map.Entry<K, V> removeLast() {\n+                return nsee(SequencedMap.this.pollLastEntry());\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/util\/SequencedMap.java","additions":58,"deletions":7,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -566,2 +566,2 @@\n-        assertThrows(CCE, () -> { objMap.sequencedEntrySet().getFirst().setValue(new Object()); });\n-        assertThrows(CCE, () -> { objMap.sequencedEntrySet().reversed().getFirst().setValue(new Object()); });\n+        assertThrows(CCE, () -> { objMap.sequencedEntrySet().iterator().next().setValue(new Object()); });\n+        assertThrows(CCE, () -> { objMap.sequencedEntrySet().reversed().iterator().next().setValue(new Object()); });\n@@ -570,2 +570,2 @@\n-        assertThrows(CCE, () -> { objMap.reversed().sequencedEntrySet().getFirst().setValue(new Object()); });\n-        assertThrows(CCE, () -> { objMap.reversed().sequencedEntrySet().reversed().getFirst().setValue(new Object()); });\n+        assertThrows(CCE, () -> { objMap.reversed().sequencedEntrySet().iterator().next().setValue(new Object()); });\n+        assertThrows(CCE, () -> { objMap.reversed().sequencedEntrySet().reversed().iterator().next().setValue(new Object()); });\n","filename":"test\/jdk\/java\/util\/SequencedCollection\/BasicMap.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}