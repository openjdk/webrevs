{"files":[{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2024 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -565,4 +565,4 @@\n-  cmpi(   CCR7,  0, R27, 4711);\n-  cmp(    CCR0, 1, R14, R11);\n-  cmpli(  CCR5,  1, R17, 45);\n-  cmpl(   CCR3, 0, R9,  R10);\n+  cmpi(   CR7,  0, R27, 4711);\n+  cmp(    CR0, 1, R14, R11);\n+  cmpli(  CR5,  1, R17, 45);\n+  cmpl(   CR3, 0, R9,  R10);\n@@ -570,4 +570,4 @@\n-  cmpwi(  CCR7,  R27, 4711);\n-  cmpw(   CCR0, R14, R11);\n-  cmplwi( CCR5,  R17, 45);\n-  cmplw(  CCR3, R9,  R10);\n+  cmpwi(  CR7,  R27, 4711);\n+  cmpw(   CR0, R14, R11);\n+  cmplwi( CR5,  R17, 45);\n+  cmplw(  CR3, R9,  R10);\n@@ -575,4 +575,4 @@\n-  cmpdi(  CCR7,  R27, 4711);\n-  cmpd(   CCR0, R14, R11);\n-  cmpldi( CCR5,  R17, 45);\n-  cmpld(  CCR3, R9,  R10);\n+  cmpdi(  CR7,  R27, 4711);\n+  cmpd(   CR0, R14, R11);\n+  cmpldi( CR5,  R17, 45);\n+  cmpld(  CR3, R9,  R10);\n@@ -718,17 +718,17 @@\n-  blt(CCR0, lbl2);\n-  bgt(CCR1, lbl2);\n-  beq(CCR2, lbl2);\n-  bso(CCR3, lbl2);\n-  bge(CCR4, lbl2);\n-  ble(CCR5, lbl2);\n-  bne(CCR6, lbl2);\n-  bns(CCR7, lbl2);\n-\n-  bltl(CCR0, lbl2);\n-  bgtl(CCR1, lbl2);\n-  beql(CCR2, lbl2);\n-  bsol(CCR3, lbl2);\n-  bgel(CCR4, lbl2);\n-  blel(CCR5, lbl2);\n-  bnel(CCR6, lbl2);\n-  bnsl(CCR7, lbl2);\n+  blt(CR0, lbl2);\n+  bgt(CR1, lbl2);\n+  beq(CR2, lbl2);\n+  bso(CR3, lbl2);\n+  bge(CR4, lbl2);\n+  ble(CR5, lbl2);\n+  bne(CR6, lbl2);\n+  bns(CR7, lbl2);\n+\n+  bltl(CR0, lbl2);\n+  bgtl(CR1, lbl2);\n+  beql(CR2, lbl2);\n+  bsol(CR3, lbl2);\n+  bgel(CR4, lbl2);\n+  blel(CR5, lbl2);\n+  bnel(CR6, lbl2);\n+  bnsl(CR7, lbl2);\n@@ -797,1 +797,1 @@\n-  fcmpu( CCR7, F24, F25);\n+  fcmpu( CR7, F24, F25);\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.cpp","additions":31,"deletions":31,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2024 SAP SE. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -249,3 +249,3 @@\n-inline void Assembler::brnop0()                           { Assembler::mcrf(CCR2, CCR2); }\n-inline void Assembler::brnop1()                           { Assembler::mcrf(CCR3, CCR3); }\n-inline void Assembler::brnop2()                           { Assembler::mcrf(CCR4,  CCR4); }\n+inline void Assembler::brnop0()                           { Assembler::mcrf(CR2, CR2); }\n+inline void Assembler::brnop1()                           { Assembler::mcrf(CR3, CR3); }\n+inline void Assembler::brnop2()                           { Assembler::mcrf(CR4,  CR4); }\n@@ -306,1 +306,1 @@\n-  if (cr == CCR0) {\n+  if (cr == CR0) {\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.inline.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2024 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -370,1 +370,1 @@\n-    __ cmpd(CCR0, _obj, R16_thread);\n+    __ cmpd(CR0, _obj, R16_thread);\n@@ -372,1 +372,1 @@\n-    __ bne(CCR0, call_patch);\n+    __ bne(CR0, call_patch);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_CodeStubs_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2024 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -51,1 +51,1 @@\n-const ConditionRegister LIR_Assembler::BOOL_RESULT = CCR5;\n+const ConditionRegister LIR_Assembler::BOOL_RESULT = CR5;\n@@ -159,2 +159,2 @@\n-        __ cmpdi(CCR0, R0, 0);\n-        __ bne(CCR0, L);\n+        __ cmpdi(CR0, R0, 0);\n+        __ bne(CR0, L);\n@@ -413,1 +413,1 @@\n-    __ cmpwi(CCR0, Rdivisor, -1);\n+    __ cmpwi(CR0, Rdivisor, -1);\n@@ -415,1 +415,1 @@\n-    __ cmpdi(CCR0, Rdivisor, -1);\n+    __ cmpdi(CR0, Rdivisor, -1);\n@@ -417,1 +417,1 @@\n-  __ bne(CCR0, regular);\n+  __ bne(CR0, regular);\n@@ -600,1 +600,1 @@\n-      __ fcmpu(CCR0, rsrc, rsrc);\n+      __ fcmpu(CR0, rsrc, rsrc);\n@@ -607,1 +607,1 @@\n-      __ bso(CCR0, L);\n+      __ bso(CR0, L);\n@@ -624,1 +624,1 @@\n-      __ fcmpu(CCR0, rsrc, rsrc);\n+      __ fcmpu(CR0, rsrc, rsrc);\n@@ -631,1 +631,1 @@\n-      __ bso(CCR0, L);\n+      __ bso(CR0, L);\n@@ -1533,1 +1533,1 @@\n-      __ fcmpu(CCR0, left->as_float_reg(), right->as_float_reg());\n+      __ fcmpu(CR0, left->as_float_reg(), right->as_float_reg());\n@@ -1535,1 +1535,1 @@\n-      __ fcmpu(CCR0, left->as_double_reg(), right->as_double_reg());\n+      __ fcmpu(CR0, left->as_double_reg(), right->as_double_reg());\n@@ -1541,1 +1541,1 @@\n-    __ cmpd(CCR0, left->as_register_lo(), right->as_register_lo());\n+    __ cmpd(CR0, left->as_register_lo(), right->as_register_lo());\n@@ -1896,2 +1896,2 @@\n-    __ cmpwi(CCR0, R3_RET, 0);\n-    __ bc_far_optimized(Assembler::bcondCRbiIs1, __ bi0(CCR0, Assembler::less), *stub->entry());\n+    __ cmpwi(CR0, R3_RET, 0);\n+    __ bc_far_optimized(Assembler::bcondCRbiIs1, __ bi0(CR0, Assembler::less), *stub->entry());\n@@ -1913,1 +1913,1 @@\n-    ConditionRegister combined_check = CCR1, tmp_check = CCR1;\n+    ConditionRegister combined_check = CR1, tmp_check = CR1;\n@@ -1918,1 +1918,1 @@\n-      tmp_check = CCR0;\n+      tmp_check = CR0;\n@@ -1926,1 +1926,1 @@\n-      tmp_check = CCR0;\n+      tmp_check = CR0;\n@@ -1932,1 +1932,1 @@\n-      tmp_check = CCR0;\n+      tmp_check = CR0;\n@@ -1963,2 +1963,2 @@\n-      __ cmpwi(CCR0, tmp2, Klass::_lh_neutral_value);\n-      __ bge(CCR0, slow);\n+      __ cmpwi(CR0, tmp2, Klass::_lh_neutral_value);\n+      __ bge(CR0, slow);\n@@ -1970,2 +1970,2 @@\n-      __ cmpwi(CCR0, tmp2, Klass::_lh_neutral_value);\n-      __ bge(CCR0, slow);\n+      __ cmpwi(CR0, tmp2, Klass::_lh_neutral_value);\n+      __ bge(CR0, slow);\n@@ -1982,2 +1982,2 @@\n-    __ cmpld(CCR0, tmp2, tmp);\n-    __ ble(CCR0, slow);\n+    __ cmpld(CR0, tmp2, tmp);\n+    __ ble(CR0, slow);\n@@ -1990,2 +1990,2 @@\n-    __ cmpld(CCR0, tmp2, tmp);\n-    __ ble(CCR0, slow);\n+    __ cmpld(CR0, tmp2, tmp);\n+    __ ble(CR0, slow);\n@@ -2006,2 +2006,2 @@\n-      __ cmp_klasses_from_objects(CCR0, src, dst, tmp, tmp2);\n-      __ beq(CCR0, cont);\n+      __ cmp_klasses_from_objects(CR0, src, dst, tmp, tmp2);\n+      __ beq(CR0, cont);\n@@ -2027,1 +2027,1 @@\n-      __ beq(CCR0, cont);\n+      __ beq(CR0, cont);\n@@ -2047,2 +2047,2 @@\n-          __ cmpw(CCR0, tmp, tmp2);\n-          __ bne(CCR0, slow);\n+          __ cmpw(CR0, tmp, tmp2);\n+          __ bne(CR0, slow);\n@@ -2083,2 +2083,2 @@\n-          __ cmpwi(CCR0, R3_RET, 0);\n-          __ bne(CCR0, failed);\n+          __ cmpwi(CR0, R3_RET, 0);\n+          __ bne(CR0, failed);\n@@ -2095,2 +2095,2 @@\n-        __ cmpwi(CCR0, R3_RET, 0);\n-        __ beq(CCR0, *stub->continuation());\n+        __ cmpwi(CR0, R3_RET, 0);\n+        __ beq(CR0, *stub->continuation());\n@@ -2129,1 +2129,1 @@\n-    __ cmp_klass(CCR0, dst, tmp, R11_scratch1, R12_scratch2);\n+    __ cmp_klass(CR0, dst, tmp, R11_scratch1, R12_scratch2);\n@@ -2131,3 +2131,3 @@\n-      __ bne(CCR0, halt);\n-      __ cmp_klass(CCR0, src, tmp, R11_scratch1, R12_scratch2);\n-      __ beq(CCR0, known_ok);\n+      __ bne(CR0, halt);\n+      __ cmp_klass(CR0, src, tmp, R11_scratch1, R12_scratch2);\n+      __ beq(CR0, known_ok);\n@@ -2135,3 +2135,3 @@\n-      __ beq(CCR0, known_ok);\n-      __ cmpw(CCR0, src, dst);\n-      __ beq(CCR0, known_ok);\n+      __ beq(CR0, known_ok);\n+      __ cmpw(CR0, src, dst);\n+      __ beq(CR0, known_ok);\n@@ -2272,2 +2272,2 @@\n-    __ cmpwi(CCR0, op->tmp1()->as_register(), InstanceKlass::fully_initialized);\n-    __ bc_far_optimized(Assembler::bcondCRbiIs0, __ bi0(CCR0, Assembler::equal), *op->stub()->entry());\n+    __ cmpwi(CR0, op->tmp1()->as_register(), InstanceKlass::fully_initialized);\n+    __ bc_far_optimized(Assembler::bcondCRbiIs0, __ bi0(CR0, Assembler::equal), *op->stub()->entry());\n@@ -2320,2 +2320,2 @@\n-    __ cmpd(CCR0, recv, tmp1);\n-    __ bne(CCR0, next_test);\n+    __ cmpd(CR0, recv, tmp1);\n+    __ bne(CR0, next_test);\n@@ -2335,2 +2335,2 @@\n-    __ cmpdi(CCR0, tmp1, 0);\n-    __ bne(CCR0, next_test);\n+    __ cmpdi(CR0, tmp1, 0);\n+    __ bne(CR0, next_test);\n@@ -2397,2 +2397,2 @@\n-    __ cmpdi(CCR0, obj, 0);\n-    __ bne(CCR0, not_null);\n+    __ cmpdi(CR0, obj, 0);\n+    __ bne(CR0, not_null);\n@@ -2415,2 +2415,2 @@\n-    __ cmpdi(CCR0, obj, 0);\n-    __ beq(CCR0, *obj_is_null);\n+    __ cmpdi(CR0, obj, 0);\n+    __ beq(CR0, *obj_is_null);\n@@ -2430,2 +2430,2 @@\n-    __ cmpd(CCR0, k_RInfo, klass_RInfo);\n-    __ beq(CCR0, *success);\n+    __ cmpd(CR0, k_RInfo, klass_RInfo);\n+    __ beq(CR0, *success);\n@@ -2465,1 +2465,1 @@\n-      __ beq(CCR0, *success);\n+      __ beq(CR0, *success);\n@@ -2504,2 +2504,2 @@\n-      __ cmpdi(CCR0, value, 0);\n-      __ bne(CCR0, not_null);\n+      __ cmpdi(CR0, value, 0);\n+      __ bne(CR0, not_null);\n@@ -2522,2 +2522,2 @@\n-      __ cmpdi(CCR0, value, 0);\n-      __ beq(CCR0, done);\n+      __ cmpdi(CR0, value, 0);\n+      __ beq(CR0, done);\n@@ -2546,1 +2546,1 @@\n-    __ beq(CCR0, done);\n+    __ beq(CR0, done);\n@@ -3027,1 +3027,1 @@\n-    __ bne_predict_not_taken(CCR0, Lretry);\n+    __ bne_predict_not_taken(CR0, Lretry);\n@@ -3029,1 +3029,1 @@\n-    __ bne(                  CCR0, Lretry);\n+    __ bne(                  CR0, Lretry);\n@@ -3066,2 +3066,2 @@\n-      __ cmpdi(CCR0, obj, 0);\n-      __ bne(CCR0, Lupdate);\n+      __ cmpdi(CR0, obj, 0);\n+      __ bne(CR0, Lupdate);\n@@ -3077,2 +3077,2 @@\n-        __ cmpdi(CCR0, obj, 0);\n-        __ beq(CCR0, Ldone);\n+        __ cmpdi(CR0, obj, 0);\n+        __ beq(CR0, Ldone);\n@@ -3083,2 +3083,2 @@\n-    __ cmpdi(CCR0, obj, 0);\n-    __ bne(CCR0, Lupdate);\n+    __ cmpdi(CR0, obj, 0);\n+    __ bne(CR0, Lupdate);\n@@ -3100,2 +3100,2 @@\n-      __ cmpd(CCR0, klass, R0);\n-      __ beq(CCR0, ok);\n+      __ cmpd(CR0, klass, R0);\n+      __ beq(CR0, ok);\n@@ -3121,1 +3121,1 @@\n-        __ cmpd(CCR1, R0, klass);\n+        __ cmpd(CR1, R0, klass);\n@@ -3123,1 +3123,1 @@\n-        \/\/beq(CCR1, do_nothing);\n+        \/\/beq(CR1, do_nothing);\n@@ -3127,3 +3127,3 @@\n-        \/\/bne(CCR0, do_nothing);\n-        __ crorc(CCR0, Assembler::equal, CCR1, Assembler::equal); \/\/ cr0 eq = cr1 eq or cr0 ne\n-        __ beq(CCR0, Lnext);\n+        \/\/bne(CR0, do_nothing);\n+        __ crorc(CR0, Assembler::equal, CR1, Assembler::equal); \/\/ cr0 eq = cr1 eq or cr0 ne\n+        __ beq(CR0, Lnext);\n@@ -3134,1 +3134,1 @@\n-          __ beq(CCR0, Ldo_update); \/\/ First time here. Set profile type.\n+          __ beq(CR0, Ldo_update); \/\/ First time here. Set profile type.\n@@ -3144,1 +3144,1 @@\n-        __ bne(CCR0, Lnext);\n+        __ bne(CR0, Lnext);\n@@ -3160,1 +3160,1 @@\n-        __ cmpd(CCR1, R0, klass);\n+        __ cmpd(CR1, R0, klass);\n@@ -3162,1 +3162,1 @@\n-        __ beq(CCR1, Lnext);\n+        __ beq(CR1, Lnext);\n@@ -3167,1 +3167,1 @@\n-          __ beq(CCR0, ok); \/\/ First time here.\n+          __ beq(CR0, ok); \/\/ First time here.\n@@ -3181,1 +3181,1 @@\n-        __ bne(CCR0, Lnext);\n+        __ bne(CR0, Lnext);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":83,"deletions":83,"binary":false,"changes":166,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2024 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -89,2 +89,2 @@\n-    testbitdi(CCR0, R0, Rscratch, exact_log2(KlassFlags::_misc_is_value_based_class));\n-    bne(CCR0, slow_int);\n+    testbitdi(CR0, R0, Rscratch, exact_log2(KlassFlags::_misc_is_value_based_class));\n+    bne(CR0, slow_int);\n@@ -104,1 +104,1 @@\n-    cmpxchgd(\/*flag=*\/CCR0,\n+    cmpxchgd(\/*flag=*\/CR0,\n@@ -131,1 +131,1 @@\n-    bne(CCR0, slow_int);\n+    bne(CR0, slow_int);\n@@ -152,2 +152,2 @@\n-    cmpdi(CCR0, Rmark, 0);\n-    beq(CCR0, done);\n+    cmpdi(CR0, Rmark, 0);\n+    beq(CR0, done);\n@@ -165,1 +165,1 @@\n-    cmpxchgd(\/*flag=*\/CCR0,\n+    cmpxchgd(\/*flag=*\/CR0,\n@@ -288,1 +288,1 @@\n-      cmpw(CCR0, t1, var_size_in_bytes);\n+      cmpw(CR0, t1, var_size_in_bytes);\n@@ -290,1 +290,1 @@\n-      cmpwi(CCR0, t1, con_size_in_bytes);\n+      cmpwi(CR0, t1, con_size_in_bytes);\n@@ -343,2 +343,2 @@\n-  cmpld(CCR0, len, t1);\n-  bc_far_optimized(Assembler::bcondCRbiIs1, bi0(CCR0, Assembler::greater), slow_case);\n+  cmpld(CR0, len, t1);\n+  bc_far_optimized(Assembler::bcondCRbiIs1, bi0(CR0, Assembler::greater), slow_case);\n@@ -402,2 +402,2 @@\n-  cmpdi(CCR0, r, 0);\n-  bne(CCR0, not_null);\n+  cmpdi(CR0, r, 0);\n+  bne(CR0, not_null);\n@@ -417,2 +417,2 @@\n-    cmpdi(CCR0, r, 0);\n-    bc_far_optimized(Assembler::bcondCRbiIs1, bi0(CCR0, Assembler::equal), *Lnull);\n+    cmpdi(CR0, r, 0);\n+    bc_far_optimized(Assembler::bcondCRbiIs1, bi0(CR0, Assembler::equal), *Lnull);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_MacroAssembler_ppc.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2023 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -72,1 +72,1 @@\n-    cmpdi(CCR0, R0, 0);\n+    cmpdi(CR0, R0, 0);\n@@ -79,1 +79,1 @@\n-    beq(CCR0, ok);\n+    beq(CR0, ok);\n@@ -371,1 +371,1 @@\n-  __ cmpdi(CCR0, R3_RET, 0);\n+  __ cmpdi(CR0, R3_RET, 0);\n@@ -385,1 +385,1 @@\n-  __ bclr(Assembler::bcondCRbiIs1, Assembler::bi0(CCR0, Assembler::equal), Assembler::bhintbhBCLRisReturn);\n+  __ bclr(Assembler::bcondCRbiIs1, Assembler::bi0(CR0, Assembler::equal), Assembler::bhintbhBCLRisReturn);\n@@ -451,2 +451,2 @@\n-          __ cmpwi(CCR0, R0, tag);\n-          __ beq(CCR0, ok);\n+          __ cmpwi(CR0, R0, tag);\n+          __ beq(CR0, ok);\n@@ -488,1 +488,1 @@\n-        __ testbitdi(CCR0, R0, t, exact_log2(KlassFlags::_misc_has_finalizer));\n+        __ testbitdi(CR0, R0, t, exact_log2(KlassFlags::_misc_has_finalizer));\n@@ -490,1 +490,1 @@\n-        __ bclr(Assembler::bcondCRbiIs1, Assembler::bi0(CCR0, Assembler::equal), Assembler::bhintbhBCLRisReturn);\n+        __ bclr(Assembler::bcondCRbiIs1, Assembler::bi0(CR0, Assembler::equal), Assembler::bhintbhBCLRisReturn);\n@@ -808,1 +808,1 @@\n-  __ cmpdi(CCR0, R0, 0);\n+  __ cmpdi(CR0, R0, 0);\n@@ -811,1 +811,1 @@\n-  __ cmpdi(CCR0, R0, 0);\n+  __ cmpdi(CR0, R0, 0);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_Runtime1_ppc.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-  beq(CCR0, Lslow);\n+  beq(CR0, Lslow);\n@@ -90,1 +90,1 @@\n-  bne(CCR0, Lfailure);            \/\/ Not latin1\/ascii.\n+  bne(CR0, Lfailure);            \/\/ Not latin1\/ascii.\n@@ -118,2 +118,2 @@\n-  cmplwi(CCR0, tmp, byte_mask);\n-  bgt(CCR0, Lfailure);            \/\/ Not latin1\/ascii.\n+  cmplwi(CR0, tmp, byte_mask);\n+  bgt(CR0, Lfailure);            \/\/ Not latin1\/ascii.\n@@ -133,1 +133,1 @@\n-  beq(CCR0, Ldone);\n+  beq(CR0, Ldone);\n@@ -143,1 +143,1 @@\n-  beq(CCR0, Ldone);\n+  beq(CR0, Ldone);\n@@ -162,1 +162,1 @@\n-  beq(CCR0, Lslow);\n+  beq(CR0, Lslow);\n@@ -238,1 +238,1 @@\n-    isel(cnt1, CCR0, Assembler::greater, \/*invert*\/ false, cnt2);\n+    isel(cnt1, CR0, Assembler::greater, \/*invert*\/ false, cnt2);\n@@ -241,1 +241,1 @@\n-    blt(CCR0, Lskip);\n+    blt(CR0, Lskip);\n@@ -257,1 +257,1 @@\n-    beq(CCR0, Lskipfast);\n+    beq(CR0, Lskipfast);\n@@ -265,2 +265,2 @@\n-    cmpd(CCR0, chr1, chr2);\n-    bne(CCR0, Lslow);\n+    cmpd(CR0, chr1, chr2);\n+    bne(CR0, Lslow);\n@@ -275,2 +275,2 @@\n-  cmpwi(CCR0, cnt1, 0);\n-  beq(CCR0, Lreturn_diff);\n+  cmpwi(CR0, cnt1, 0);\n+  beq(CR0, Lreturn_diff);\n@@ -292,1 +292,1 @@\n-  bne(CCR0, Ldone);\n+  bne(CR0, Ldone);\n@@ -320,2 +320,2 @@\n-    cmpd(CCR0, ary1, ary2);\n-    beq(CCR0, Lskiploop);\n+    cmpd(CR0, ary1, ary2);\n+    beq(CR0, Lskiploop);\n@@ -324,2 +324,2 @@\n-    cmpdi(CCR0, ary1, 0);\n-    cmpdi(CCR1, ary2, 0);\n+    cmpdi(CR0, ary1, 0);\n+    cmpdi(CR1, ary2, 0);\n@@ -327,2 +327,2 @@\n-    cror(CCR0, Assembler::equal, CCR1, Assembler::equal);\n-    beq(CCR0, Ldone);\n+    cror(CR0, Assembler::equal, CR1, Assembler::equal);\n+    beq(CR0, Ldone);\n@@ -335,2 +335,2 @@\n-    cmpw(CCR0, limit, tmp0);\n-    bne(CCR0, Ldone);\n+    cmpw(CR0, limit, tmp0);\n+    bne(CR0, Ldone);\n@@ -354,1 +354,1 @@\n-  beq(CCR0, Lskipfast);\n+  beq(CR0, Lskipfast);\n@@ -362,2 +362,2 @@\n-  cmpd(CCR0, chr1, chr2);\n-  bne(CCR0, Ldone);\n+  cmpd(CR0, chr1, chr2);\n+  bne(CR0, Ldone);\n@@ -368,1 +368,1 @@\n-  beq(CCR0, Lskiploop);\n+  beq(CR0, Lskiploop);\n@@ -384,2 +384,2 @@\n-  cmpw(CCR0, chr1, chr2);\n-  bne(CCR0, Ldone);\n+  cmpw(CR0, chr1, chr2);\n+  bne(CR0, Ldone);\n@@ -417,1 +417,1 @@\n-   cmpwi(CCR6, needlecnt, 2);\n+   cmpwi(CR6, needlecnt, 2);\n@@ -419,1 +419,1 @@\n-   blt(CCR6, L_TooShort);             \/\/ Variable needlecnt: handle short needle separately.\n+   blt(CR6, L_TooShort);             \/\/ Variable needlecnt: handle short needle separately.\n@@ -450,1 +450,1 @@\n-   beq(CCR0, L_FinalCheck);           \/\/ 2 characters left?\n+   beq(CR0, L_FinalCheck);           \/\/ 2 characters left?\n@@ -460,4 +460,4 @@\n-   cmpw(CCR0, ch1, n_start);          \/\/ Compare 2 characters (1 would be sufficient but try to reduce branches to CompLoop).\n-   cmpw(CCR1, ch2, n_start);\n-   beq(CCR0, L_Comp1);                \/\/ Did we find the needle start?\n-   beq(CCR1, L_Comp2);\n+   cmpw(CR0, ch1, n_start);          \/\/ Compare 2 characters (1 would be sufficient but try to reduce branches to CompLoop).\n+   cmpw(CR1, ch2, n_start);\n+   beq(CR0, L_Comp1);                \/\/ Did we find the needle start?\n+   beq(CR1, L_Comp2);\n@@ -468,1 +468,1 @@\n-   beq(CCR0, L_NotFound);\n+   beq(CR0, L_NotFound);\n@@ -470,2 +470,2 @@\n-   cmpw(CCR1, ch1, n_start);\n-   beq(CCR1, L_Comp1);\n+   cmpw(CR1, ch1, n_start);\n+   beq(CR1, L_Comp1);\n@@ -486,2 +486,2 @@\n-   cmpw(CCR1, ch1, n_start);\n-   beq(CCR1, L_Found);               \/\/ Did we find the one character needle?\n+   cmpw(CR1, ch1, n_start);\n+   beq(CR1, L_Found);               \/\/ Did we find the one character needle?\n@@ -503,1 +503,1 @@\n-    if (needlecntval == 0) { beq(CCR6, L_Found); } \/\/ Variable needlecnt==2?\n+    if (needlecntval == 0) { beq(CR6, L_Found); } \/\/ Variable needlecnt==2?\n@@ -516,2 +516,2 @@\n-    cmpw(CCR1, ch1, ch2);\n-    bne(CCR1, L_OuterLoop);\n+    cmpw(CR1, ch1, ch2);\n+    bne(CR1, L_OuterLoop);\n@@ -523,2 +523,2 @@\n-    cmpw(CCR1, ch1, ch2);\n-    bne(CCR1, L_OuterLoop);\n+    cmpw(CR1, ch1, ch2);\n+    bne(CR1, L_OuterLoop);\n@@ -548,1 +548,1 @@\n-   beq(CCR0, L_FinalCheck);\n+   beq(CR0, L_FinalCheck);\n@@ -559,4 +559,4 @@\n-   (needle != R0) ? cmpw(CCR0, ch1, needle) : cmplwi(CCR0, ch1, (unsigned int)needleChar);\n-   (needle != R0) ? cmpw(CCR1, ch2, needle) : cmplwi(CCR1, ch2, (unsigned int)needleChar);\n-   beq(CCR0, L_Found1);      \/\/ Did we find the needle?\n-   beq(CCR1, L_Found2);\n+   (needle != R0) ? cmpw(CR0, ch1, needle) : cmplwi(CR0, ch1, (unsigned int)needleChar);\n+   (needle != R0) ? cmpw(CR1, ch2, needle) : cmplwi(CR1, ch2, (unsigned int)needleChar);\n+   beq(CR0, L_Found1);      \/\/ Did we find the needle?\n+   beq(CR1, L_Found2);\n@@ -568,1 +568,1 @@\n-   beq(CCR0, L_NotFound);\n+   beq(CR0, L_NotFound);\n@@ -570,2 +570,2 @@\n-   (needle != R0) ? cmpw(CCR1, ch1, needle) : cmplwi(CCR1, ch1, (unsigned int)needleChar);\n-   beq(CCR1, L_Found1);\n+   (needle != R0) ? cmpw(CR1, ch1, needle) : cmplwi(CR1, ch1, (unsigned int)needleChar);\n+   beq(CR1, L_Found1);\n@@ -597,1 +597,1 @@\n-  beq(CCR0, Lslow);\n+  beq(CR0, Lslow);\n@@ -610,1 +610,1 @@\n-  bne(CCR0, Lslow);               \/\/ Found negative byte.\n+  bne(CR0, Lslow);               \/\/ Found negative byte.\n@@ -617,1 +617,1 @@\n-  beq(CCR0, Ldone);\n+  beq(CR0, Ldone);\n@@ -622,1 +622,1 @@\n-  bne(CCR0, Ldone);               \/\/ Found negative byte.\n+  bne(CR0, Ldone);               \/\/ Found negative byte.\n","filename":"src\/hotspot\/cpu\/ppc\/c2_MacroAssembler_ppc.cpp","additions":58,"deletions":58,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2025 SAP SE. All rights reserved.\n@@ -285,2 +285,2 @@\n-    __ cmpwi(CCR0, tmp, 0);\n-    __ bne(CCR0, L_safepoint_poll_slow_path);\n+    __ cmpwi(CR0, tmp, 0);\n+    __ bne(CR0, L_safepoint_poll_slow_path);\n@@ -296,2 +296,2 @@\n-    __ cmpwi(CCR0, tmp, StackOverflow::stack_guard_yellow_reserved_disabled);\n-    __ beq(CCR0, L_reguard);\n+    __ cmpwi(CR0, tmp, StackOverflow::stack_guard_yellow_reserved_disabled);\n+    __ beq(CR0, L_reguard);\n","filename":"src\/hotspot\/cpu\/ppc\/downcallLinker_ppc.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2018, 2024 SAP SE. All rights reserved.\n+ * Copyright (c) 2018, 2025 SAP SE. All rights reserved.\n@@ -54,1 +54,1 @@\n-  __ cmpwi(CCR0, R0, 0);\n+  __ cmpwi(CR0, R0, 0);\n@@ -71,1 +71,1 @@\n-    __ beq(CCR0, filtered);\n+    __ beq(CR0, filtered);\n@@ -121,2 +121,2 @@\n-  __ cmpdi(CCR0, temp, 0);                          \/\/ jump to runtime if index == 0 (full buffer)\n-  __ beq(CCR0, runtime);\n+  __ cmpdi(CR0, temp, 0);                          \/\/ jump to runtime if index == 0 (full buffer)\n+  __ beq(CR0, runtime);\n@@ -157,1 +157,1 @@\n-  __ beq(CCR0, filtered);\n+  __ beq(CR0, filtered);\n@@ -174,1 +174,1 @@\n-    __ cmpdi(CCR0, pre_val, 0);\n+    __ cmpdi(CR0, pre_val, 0);\n@@ -178,2 +178,2 @@\n-    __ cmpdi(CCR0, pre_val, 0);\n-    __ beq(CCR0, filtered);\n+    __ cmpdi(CR0, pre_val, 0);\n+    __ beq(CR0, filtered);\n@@ -243,1 +243,1 @@\n-  __ cmpwi(CCR0, R0, (int)G1CardTable::g1_young_card_val());\n+  __ cmpwi(CR0, R0, (int)G1CardTable::g1_young_card_val());\n@@ -250,1 +250,1 @@\n-  __ cmpwi(CCR0, R0, (int)G1CardTable::dirty_card_val()); \/\/ tmp2 := card == dirty_card_val?\n+  __ cmpwi(CR0, R0, (int)G1CardTable::dirty_card_val()); \/\/ tmp2 := card == dirty_card_val?\n@@ -265,1 +265,1 @@\n-  __ beq(CCR0, filtered);\n+  __ beq(CR0, filtered);\n@@ -270,1 +270,1 @@\n-    __ cmpdi(CCR0, new_val, 0);\n+    __ cmpdi(CR0, new_val, 0);\n@@ -274,2 +274,2 @@\n-    __ cmpdi(CCR0, new_val, 0);\n-    __ beq(CCR0, filtered);\n+    __ cmpdi(CR0, new_val, 0);\n+    __ beq(CR0, filtered);\n@@ -279,1 +279,1 @@\n-  __ beq(CCR0, filtered);\n+  __ beq(CR0, filtered);\n@@ -282,1 +282,1 @@\n-  __ beq(CCR0, filtered);\n+  __ beq(CR0, filtered);\n@@ -374,2 +374,2 @@\n-  __ cmpdi(CCR0, value, 0);\n-  __ beq(CCR0, done);         \/\/ Use null as-is.\n+  __ cmpdi(CR0, value, 0);\n+  __ beq(CR0, done);         \/\/ Use null as-is.\n@@ -381,1 +381,1 @@\n-  __ beq(CCR0, not_weak);     \/\/ Test for jweak tag.\n+  __ beq(CR0, not_weak);     \/\/ Test for jweak tag.\n@@ -412,1 +412,1 @@\n-  __ bc_far_optimized(Assembler::bcondCRbiIs0, __ bi0(CCR0, Assembler::equal), *stub->entry());\n+  __ bc_far_optimized(Assembler::bcondCRbiIs0, __ bi0(CR0, Assembler::equal), *stub->entry());\n@@ -436,2 +436,2 @@\n-  __ cmpdi(CCR0, pre_val, 0);\n-  __ bc_far_optimized(Assembler::bcondCRbiIs1, __ bi0(CCR0, Assembler::equal), *stub->continuation());\n+  __ cmpdi(CR0, pre_val, 0);\n+  __ bc_far_optimized(Assembler::bcondCRbiIs1, __ bi0(CR0, Assembler::equal), *stub->continuation());\n@@ -475,2 +475,2 @@\n-      __ cmpwi(CCR0, new_val, 0);\n-      __ beq(CCR0, *stub->continuation());\n+      __ cmpwi(CR0, new_val, 0);\n+      __ beq(CR0, *stub->continuation());\n@@ -483,1 +483,1 @@\n-  __ beq(CCR0, *stub->continuation());\n+  __ beq(CR0, *stub->continuation());\n@@ -487,2 +487,2 @@\n-    __ cmpdi(CCR0, new_val_decoded, 0);\n-    __ beq(CCR0, *stub->continuation());\n+    __ cmpdi(CR0, new_val_decoded, 0);\n+    __ beq(CR0, *stub->continuation());\n@@ -493,1 +493,1 @@\n-  __ bc_far_optimized(Assembler::bcondCRbiIs0, __ bi0(CCR0, Assembler::equal), *stub->entry());\n+  __ bc_far_optimized(Assembler::bcondCRbiIs0, __ bi0(CR0, Assembler::equal), *stub->entry());\n@@ -507,1 +507,1 @@\n-  __ bc_far_optimized(Assembler::bcondCRbiIs1, __ bi0(CCR0, Assembler::equal), *stub->continuation());\n+  __ bc_far_optimized(Assembler::bcondCRbiIs1, __ bi0(CR0, Assembler::equal), *stub->continuation());\n@@ -549,2 +549,2 @@\n-  __ cmpdi(CCR0, pre_val_reg, 0);\n-  __ bc_far_optimized(Assembler::bcondCRbiIs1, __ bi0(CCR0, Assembler::equal), *stub->continuation());\n+  __ cmpdi(CR0, pre_val_reg, 0);\n+  __ bc_far_optimized(Assembler::bcondCRbiIs1, __ bi0(CR0, Assembler::equal), *stub->continuation());\n@@ -570,2 +570,2 @@\n-  __ cmpdi(CCR0, new_val_reg, 0);\n-  __ bc_far_optimized(Assembler::bcondCRbiIs1, __ bi0(CCR0, Assembler::equal), *stub->continuation());\n+  __ cmpdi(CR0, new_val_reg, 0);\n+  __ bc_far_optimized(Assembler::bcondCRbiIs1, __ bi0(CR0, Assembler::equal), *stub->continuation());\n@@ -607,1 +607,1 @@\n-  __ beq(CCR0, marking_not_active);\n+  __ beq(CR0, marking_not_active);\n@@ -615,2 +615,2 @@\n-  __ cmpdi(CCR0, tmp, 0);\n-  __ beq(CCR0, refill);\n+  __ cmpdi(CR0, tmp, 0);\n+  __ beq(CR0, refill);\n@@ -669,2 +669,2 @@\n-  __ cmpwi(CCR0, tmp, G1CardTable::g1_young_card_val());\n-  __ beq(CCR0, ret);\n+  __ cmpwi(CR0, tmp, G1CardTable::g1_young_card_val());\n+  __ beq(CR0, ret);\n@@ -676,2 +676,2 @@\n-  __ cmpwi(CCR0, tmp, G1CardTable::dirty_card_val());\n-  __ beq(CCR0, ret);\n+  __ cmpwi(CR0, tmp, G1CardTable::dirty_card_val());\n+  __ beq(CR0, ret);\n@@ -695,2 +695,2 @@\n-  __ cmpdi(CCR0, tmp2, 0);\n-  __ beq(CCR0, refill);\n+  __ cmpdi(CR0, tmp2, 0);\n+  __ beq(CR0, refill);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/g1\/g1BarrierSetAssembler_ppc.cpp","additions":43,"deletions":43,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-\/\/ Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ Copyright (c) 2024 SAP SE. All rights reserved.\n+\/\/ Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2025 SAP SE. All rights reserved.\n@@ -167,1 +167,1 @@\n-    __ cmpxchgd(CCR0, $res$$Register, $oldval$$Register, $newval$$Register, $mem$$Register,\n+    __ cmpxchgd(CR0, $res$$Register, $oldval$$Register, $newval$$Register, $mem$$Register,\n@@ -197,1 +197,1 @@\n-    __ cmpxchgd(CCR0, $res$$Register, $oldval$$Register, $newval$$Register, $mem$$Register,\n+    __ cmpxchgd(CR0, $res$$Register, $oldval$$Register, $newval$$Register, $mem$$Register,\n@@ -233,1 +233,1 @@\n-    __ cmpxchgw(CCR0, $res$$Register, $oldval$$Register, $newval$$Register, $mem$$Register,\n+    __ cmpxchgw(CR0, $res$$Register, $oldval$$Register, $newval$$Register, $mem$$Register,\n@@ -264,1 +264,1 @@\n-    __ cmpxchgw(CCR0, $res$$Register, $oldval$$Register, $newval$$Register, $mem$$Register,\n+    __ cmpxchgw(CR0, $res$$Register, $oldval$$Register, $newval$$Register, $mem$$Register,\n@@ -302,1 +302,1 @@\n-    __ cmpxchgd(CCR0, R0, $oldval$$Register, $newval$$Register, $mem$$Register,\n+    __ cmpxchgd(CR0, R0, $oldval$$Register, $newval$$Register, $mem$$Register,\n@@ -335,1 +335,1 @@\n-    __ cmpxchgd(CCR0, R0, $oldval$$Register, $newval$$Register, $mem$$Register,\n+    __ cmpxchgd(CR0, R0, $oldval$$Register, $newval$$Register, $mem$$Register,\n@@ -374,1 +374,1 @@\n-    __ cmpxchgw(CCR0, R0, $oldval$$Register, $newval$$Register, $mem$$Register,\n+    __ cmpxchgw(CR0, R0, $oldval$$Register, $newval$$Register, $mem$$Register,\n@@ -408,1 +408,1 @@\n-    __ cmpxchgw(CCR0, R0, $oldval$$Register, $newval$$Register, $mem$$Register,\n+    __ cmpxchgw(CR0, R0, $oldval$$Register, $newval$$Register, $mem$$Register,\n@@ -448,1 +448,1 @@\n-    __ cmpxchgd(CCR0, R0, $oldval$$Register, $newval$$Register, $mem$$Register,\n+    __ cmpxchgd(CR0, R0, $oldval$$Register, $newval$$Register, $mem$$Register,\n@@ -481,1 +481,1 @@\n-    __ cmpxchgd(CCR0, R0, $oldval$$Register, $newval$$Register, $mem$$Register,\n+    __ cmpxchgd(CR0, R0, $oldval$$Register, $newval$$Register, $mem$$Register,\n@@ -520,1 +520,1 @@\n-    __ cmpxchgw(CCR0, R0, $oldval$$Register, $newval$$Register, $mem$$Register,\n+    __ cmpxchgw(CR0, R0, $oldval$$Register, $newval$$Register, $mem$$Register,\n@@ -554,1 +554,1 @@\n-    __ cmpxchgw(CCR0, R0, $oldval$$Register, $newval$$Register, $mem$$Register,\n+    __ cmpxchgw(CR0, R0, $oldval$$Register, $newval$$Register, $mem$$Register,\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/g1\/g1_ppc.ad","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2018, 2022 SAP SE. All rights reserved.\n+ * Copyright (c) 2018, 2025 SAP SE. All rights reserved.\n@@ -92,2 +92,2 @@\n-        __ cmpwi(CCR0, dst, 0);\n-        __ beq(CCR0, *L_handle_null);\n+        __ cmpwi(CR0, dst, 0);\n+        __ beq(CR0, *L_handle_null);\n@@ -106,2 +106,2 @@\n-        __ cmpdi(CCR0, dst, 0);\n-        __ beq(CCR0, *L_handle_null);\n+        __ cmpdi(CR0, dst, 0);\n+        __ beq(CR0, *L_handle_null);\n@@ -121,2 +121,2 @@\n-  __ cmpdi(CCR0, value, 0);\n-  __ beq(CCR0, done);         \/\/ Use null as-is.\n+  __ cmpdi(CR0, value, 0);\n+  __ beq(CR0, done);         \/\/ Use null as-is.\n@@ -125,1 +125,1 @@\n-  __ bne(CCR0, tagged);       \/\/ Test for tag.\n+  __ bne(CR0, tagged);       \/\/ Test for tag.\n@@ -134,1 +134,1 @@\n-  __ bne(CCR0, weak_tagged);   \/\/ Test for jweak tag.\n+  __ bne(CR0, weak_tagged);   \/\/ Test for jweak tag.\n@@ -155,2 +155,2 @@\n-  __ cmpdi(CCR0, value, 0);\n-  __ beq(CCR0, done);         \/\/ Use null as-is.\n+  __ cmpdi(CR0, value, 0);\n+  __ beq(CR0, done);         \/\/ Use null as-is.\n@@ -162,1 +162,1 @@\n-    __ bne(CCR0, valid_global_tag);       \/\/ Test for global tag.\n+    __ bne(CR0, valid_global_tag);       \/\/ Test for global tag.\n@@ -203,1 +203,1 @@\n-  __ cmpw(CCR0, R0, tmp);\n+  __ cmpw(CR0, R0, tmp);\n@@ -205,1 +205,1 @@\n-  __ bnectrl(CCR0);\n+  __ bnectrl(CR0);\n@@ -232,2 +232,2 @@\n-  __ cmpdi(CCR0, R19_method, 0);\n-  __ beq(CCR0, bad_call);\n+  __ cmpdi(CR0, R19_method, 0);\n+  __ beq(CR0, bad_call);\n@@ -241,2 +241,2 @@\n-  __ cmpdi(CCR0, tmp2, 0);\n-  __ bne(CCR0, skip_barrier);\n+  __ cmpdi(CR0, tmp2, 0);\n+  __ bne(CR0, skip_barrier);\n@@ -247,2 +247,2 @@\n-  __ cmpdi(CCR0, tmp2, 0);\n-  __ bne(CCR0, skip_barrier);\n+  __ cmpdi(CR0, tmp2, 0);\n+  __ bne(CR0, skip_barrier);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/barrierSetAssembler_ppc.cpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2018, 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2018, 2025 SAP SE. All rights reserved.\n@@ -52,1 +52,1 @@\n-  __ beq(CCR0, Lskip_loop); \/\/ zero length\n+  __ beq(CR0, Lskip_loop); \/\/ zero length\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/cardTableBarrierSetAssembler_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2018, 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2018, 2025 SAP SE. All rights reserved.\n@@ -83,2 +83,2 @@\n-  __ cmpdi(CCR0, value, 0);\n-  __ beq(CCR0, done);         \/\/ Use null as-is.\n+  __ cmpdi(CR0, value, 0);\n+  __ beq(CR0, done);         \/\/ Use null as-is.\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/modRefBarrierSetAssembler_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2018, 2024, Red Hat, Inc. All rights reserved.\n- * Copyright (c) 2012, 2024 SAP SE. All rights reserved.\n+ * Copyright (c) 2018, 2025, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -105,2 +105,2 @@\n-  __ cmpdi(CCR0, count, 0);\n-  __ beq(CCR0, skip_prologue);\n+  __ cmpdi(CR0, count, 0);\n+  __ beq(CR0, skip_prologue);\n@@ -121,1 +121,1 @@\n-  __ beq(CCR0, skip_prologue);\n+  __ beq(CR0, skip_prologue);\n@@ -219,1 +219,1 @@\n-  __ beq(CCR0, skip_barrier);\n+  __ beq(CR0, skip_barrier);\n@@ -238,1 +238,1 @@\n-      __ cmpdi(CCR0, pre_val, 0);\n+      __ cmpdi(CR0, pre_val, 0);\n@@ -242,2 +242,2 @@\n-      __ cmpdi(CCR0, pre_val, 0);\n-      __ beq(CCR0, skip_barrier);\n+      __ cmpdi(CR0, pre_val, 0);\n+      __ beq(CR0, skip_barrier);\n@@ -257,2 +257,2 @@\n-    __ cmpdi(CCR0, pre_val, 0);\n-    __ beq(CCR0, skip_barrier);\n+    __ cmpdi(CR0, pre_val, 0);\n+    __ beq(CR0, skip_barrier);\n@@ -274,2 +274,2 @@\n-    __ cmpdi(CCR0, Rindex, 0);\n-    __ beq(CCR0, runtime); \/\/ If index == 0 (buffer is full), goto runtime.\n+    __ cmpdi(CR0, Rindex, 0);\n+    __ beq(CR0, runtime); \/\/ If index == 0 (buffer is full), goto runtime.\n@@ -365,1 +365,1 @@\n-    __ isel(dst, CCR0, Assembler::equal, false, tmp1);\n+    __ isel(dst, CR0, Assembler::equal, false, tmp1);\n@@ -367,1 +367,1 @@\n-    __ bne(CCR0, done);\n+    __ bne(CR0, done);\n@@ -405,1 +405,1 @@\n-    __ beq(CCR0, skip_barrier);\n+    __ beq(CR0, skip_barrier);\n@@ -417,1 +417,1 @@\n-    __ bne(CCR0, skip_fastpath);\n+    __ bne(CR0, skip_fastpath);\n@@ -420,1 +420,1 @@\n-    __ beq(CCR0, skip_barrier);\n+    __ beq(CR0, skip_barrier);\n@@ -456,1 +456,1 @@\n-    __ beq(CCR0, skip_barrier);\n+    __ beq(CR0, skip_barrier);\n@@ -642,2 +642,2 @@\n-  __ cmpdi(CCR0, obj, 0);\n-  __ beq(CCR0, done);\n+  __ cmpdi(CR0, obj, 0);\n+  __ beq(CR0, done);\n@@ -654,1 +654,1 @@\n-  __ bne(CCR0, slowpath);\n+  __ bne(CR0, slowpath);\n@@ -704,1 +704,1 @@\n-    __ cmpxchgw(CCR0, current_value, expected, new_val, base_addr, MacroAssembler::MemBarNone,\n+    __ cmpxchgw(CR0, current_value, expected, new_val, base_addr, MacroAssembler::MemBarNone,\n@@ -707,1 +707,1 @@\n-    __ cmpxchgd(CCR0, current_value, expected, new_val, base_addr, MacroAssembler::MemBarNone,\n+    __ cmpxchgd(CR0, current_value, expected, new_val, base_addr, MacroAssembler::MemBarNone,\n@@ -714,1 +714,1 @@\n-  __ beq(CCR0, done);\n+  __ beq(CR0, done);\n@@ -719,2 +719,2 @@\n-  __ cmpdi(CCR0, current_value, 0);\n-  __ beq(CCR0, done);\n+  __ cmpdi(CR0, current_value, 0);\n+  __ beq(CR0, done);\n@@ -740,2 +740,2 @@\n-  __ cmpd(CCR0, current_value, expected);\n-  __ bne(CCR0, done);\n+  __ cmpd(CR0, current_value, expected);\n+  __ bne(CR0, done);\n@@ -745,1 +745,1 @@\n-    __ cmpxchgw(CCR0, R0, initial_value, new_val, base_addr, MacroAssembler::MemBarNone,\n+    __ cmpxchgw(CR0, R0, initial_value, new_val, base_addr, MacroAssembler::MemBarNone,\n@@ -748,1 +748,1 @@\n-    __ cmpxchgd(CCR0, R0, initial_value, new_val, base_addr, MacroAssembler::MemBarNone,\n+    __ cmpxchgd(CR0, R0, initial_value, new_val, base_addr, MacroAssembler::MemBarNone,\n@@ -773,1 +773,1 @@\n-  __ bne(CCR0, step_four);\n+  __ bne(CR0, step_four);\n@@ -792,1 +792,1 @@\n-  __ beq(CCR0, L_skip_loop);\n+  __ beq(CR0, L_skip_loop);\n@@ -838,2 +838,2 @@\n-  __ cmpdi(CCR0, pre_val, 0);\n-  __ bc_far_optimized(Assembler::bcondCRbiIs1_bhintNoHint, __ bi0(CCR0, Assembler::equal), *stub->continuation());\n+  __ cmpdi(CR0, pre_val, 0);\n+  __ bc_far_optimized(Assembler::bcondCRbiIs1_bhintNoHint, __ bi0(CR0, Assembler::equal), *stub->continuation());\n@@ -869,1 +869,1 @@\n-  __ cmpd(CCR0, res, obj);\n+  __ cmpd(CR0, res, obj);\n@@ -891,1 +891,1 @@\n-    __ bc_far_optimized(Assembler::bcondCRbiIs1_bhintNoHint, __ bi0(CCR0, Assembler::equal), *stub->continuation());\n+    __ bc_far_optimized(Assembler::bcondCRbiIs1_bhintNoHint, __ bi0(CR0, Assembler::equal), *stub->continuation());\n@@ -949,1 +949,1 @@\n-  __ beq(CCR0, skip_barrier);\n+  __ beq(CR0, skip_barrier);\n@@ -954,2 +954,2 @@\n-  __ cmpdi(CCR0, R12_tmp2, 0);\n-  __ beq(CCR0, runtime);\n+  __ cmpdi(CR0, R12_tmp2, 0);\n+  __ beq(CR0, runtime);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/shenandoahBarrierSetAssembler_ppc.cpp","additions":40,"deletions":40,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2021, 2024 SAP SE. All rights reserved.\n+ * Copyright (c) 2021, 2025 SAP SE. All rights reserved.\n@@ -172,1 +172,1 @@\n-  __ beq(CCR0, uncolor);\n+  __ beq(CR0, uncolor);\n@@ -196,2 +196,2 @@\n-    __ cmpdi(CCR0, dst, 0);\n-    __ beq(CCR0, *L_handle_null);\n+    __ cmpdi(CR0, dst, 0);\n+    __ beq(CR0, *L_handle_null);\n@@ -206,1 +206,1 @@\n-    __ beq(CCR0, *L_handle_null);\n+    __ beq(CR0, *L_handle_null);\n@@ -237,1 +237,1 @@\n-    __ cmplwi(CCR0, R0, barrier_Relocation::unpatched);\n+    __ cmplwi(CR0, R0, barrier_Relocation::unpatched);\n@@ -247,1 +247,1 @@\n-  __ bc_far_optimized(Assembler::bcondCRbiIs0, __ bi0(CCR0, Assembler::equal), medium_path);\n+  __ bc_far_optimized(Assembler::bcondCRbiIs0, __ bi0(CR0, Assembler::equal), medium_path);\n@@ -277,1 +277,1 @@\n-    __ bne(CCR0, medium_path);\n+    __ bne(CR0, medium_path);\n@@ -296,1 +296,1 @@\n-  __ blt(CCR0, slow_path);\n+  __ blt(CR0, slow_path);\n@@ -330,2 +330,2 @@\n-    __ cmpdi(CCR0, tmp, 0);\n-    __ bne(CCR0, slow_path);\n+    __ cmpdi(CR0, tmp, 0);\n+    __ bne(CR0, slow_path);\n@@ -341,1 +341,1 @@\n-    __ cmpxchgd(CCR0, tmp, (intptr_t)0, R0, ref_base,\n+    __ cmpxchgd(CR0, tmp, (intptr_t)0, R0, ref_base,\n@@ -346,1 +346,1 @@\n-      __ bne(CCR0, slow_path);\n+      __ bne(CR0, slow_path);\n@@ -450,1 +450,1 @@\n-  __ bne(CCR0, slow_path);\n+  __ bne(CR0, slow_path);\n@@ -483,1 +483,1 @@\n-    __ bne(CCR0, medium_path);\n+    __ bne(CR0, medium_path);\n@@ -518,2 +518,2 @@\n-  __ cmpdi(CCR0, R5_ARG3, 0);\n-  __ beq(CCR0, done);\n+  __ cmpdi(CR0, R5_ARG3, 0);\n+  __ beq(CR0, done);\n@@ -542,1 +542,1 @@\n-  __ beq(CCR0, done);\n+  __ beq(CR0, done);\n@@ -573,1 +573,1 @@\n-  __ beq(CCR0, done);\n+  __ beq(CR0, done);\n@@ -578,1 +578,1 @@\n-  __ beq(CCR0, skip_uncolor);\n+  __ beq(CR0, skip_uncolor);\n@@ -597,1 +597,1 @@\n-  __ bne(CCR0, tagged);\n+  __ bne(CR0, tagged);\n@@ -608,1 +608,1 @@\n-  __ bne(CCR0, weak_tagged);\n+  __ bne(CR0, weak_tagged);\n@@ -623,1 +623,1 @@\n-  __ bne(CCR0, slowpath);\n+  __ bne(CR0, slowpath);\n@@ -669,1 +669,1 @@\n-  __ bc_far_optimized(Assembler::bcondCRbiIs0, __ bi0(CCR0, Assembler::equal), *stub->entry());\n+  __ bc_far_optimized(Assembler::bcondCRbiIs0, __ bi0(CR0, Assembler::equal), *stub->entry());\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/z\/zBarrierSetAssembler_ppc.cpp","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-\/\/ Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ Copyright (c) 2021 SAP SE. All rights reserved.\n+\/\/ Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2025 SAP SE. All rights reserved.\n@@ -73,1 +73,1 @@\n-    __ bne_far(CCR0, *stub->entry(), MacroAssembler::bc_far_optimize_on_relocate);\n+    __ bne_far(CR0, *stub->entry(), MacroAssembler::bc_far_optimize_on_relocate);\n@@ -100,1 +100,1 @@\n-  __ cmpxchgd(CCR0, R0, rold_zpointer, rnew_zpointer, mem,\n+  __ cmpxchgd(CR0, R0, rold_zpointer, rnew_zpointer, mem,\n@@ -122,1 +122,1 @@\n-  __ cmpxchgd(CCR0, res, rold_zpointer, rnew_zpointer, mem,\n+  __ cmpxchgd(CR0, res, rold_zpointer, rnew_zpointer, mem,\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/z\/z_ppc.ad","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2024 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -129,1 +129,1 @@\n-    beq(CCR0, L);\n+    beq(CR0, L);\n@@ -132,1 +132,1 @@\n-    bne(CCR0, L);\n+    bne(CR0, L);\n@@ -153,2 +153,2 @@\n-    cmpdi(CCR0, Rthr_state_addr, 0);\n-    beq(CCR0, Lno_early_ret);\n+    cmpdi(CR0, Rthr_state_addr, 0);\n+    beq(CR0, Lno_early_ret);\n@@ -157,2 +157,2 @@\n-    cmpwi(CCR0, R0, JvmtiThreadState::earlyret_pending);\n-    bne(CCR0, Lno_early_ret);\n+    cmpwi(CR0, R0, JvmtiThreadState::earlyret_pending);\n+    bne(CR0, Lno_early_ret);\n@@ -232,1 +232,1 @@\n-      beq(CCR0, dispatch);\n+      beq(CR0, dispatch);\n@@ -531,2 +531,2 @@\n-  cmpd(CCR0, index, R0);\n-  blt(CCR0, index_ok);\n+  cmpd(CR0, index, R0);\n+  blt(CR0, index_ok);\n@@ -595,2 +595,2 @@\n-    cmpdi(CCR0, Rarray, 0);\n-    beq(CCR0, LisNull);\n+    cmpdi(CR0, Rarray, 0);\n+    beq(CR0, LisNull);\n@@ -608,1 +608,1 @@\n-  cmplw(CCR0, Rindex, Rlength);\n+  cmplw(CR0, Rindex, Rlength);\n@@ -610,1 +610,1 @@\n-  blt(CCR0, LnotOOR);\n+  blt(CR0, LnotOOR);\n@@ -690,2 +690,2 @@\n-    testbitdi(CCR0, R0, Raccess_flags, JVM_ACC_SYNCHRONIZED_BIT);\n-    beq(CCR0, Lunlocked);\n+    testbitdi(CR0, R0, Raccess_flags, JVM_ACC_SYNCHRONIZED_BIT);\n+    beq(CR0, Lunlocked);\n@@ -693,2 +693,2 @@\n-    cmpwi(CCR0, Rdo_not_unlock_flag, 0);\n-    bne(CCR0, Lno_unlock);\n+    cmpwi(CR0, Rdo_not_unlock_flag, 0);\n+    bne(CR0, Lno_unlock);\n@@ -708,2 +708,2 @@\n-    cmpdi(CCR0, R0, 0);\n-    bne(CCR0, Lunlock);\n+    cmpdi(CR0, R0, 0);\n+    bne(CR0, Lunlock);\n@@ -743,1 +743,1 @@\n-      ble(CCR0, Lno_unlock);\n+      ble(CR0, Lno_unlock);\n@@ -762,2 +762,2 @@\n-      cmpdi(CCR0, Rcurrent_obj, 0);\n-      bne(CCR0, Lexception);\n+      cmpdi(CR0, Rcurrent_obj, 0);\n+      bne(CR0, Lexception);\n@@ -819,2 +819,2 @@\n-  cmpwi(CCR0, ret_type, T_INT);\n-  beq(CCR0, done);\n+  cmpwi(CR0, ret_type, T_INT);\n+  beq(CR0, done);\n@@ -822,2 +822,2 @@\n-  cmpwi(CCR0, ret_type, T_BOOLEAN);\n-  bne(CCR0, notBool);\n+  cmpwi(CR0, ret_type, T_BOOLEAN);\n+  bne(CR0, notBool);\n@@ -828,2 +828,2 @@\n-  cmpwi(CCR0, ret_type, T_BYTE);\n-  bne(CCR0, notByte);\n+  cmpwi(CR0, ret_type, T_BYTE);\n+  bne(CR0, notByte);\n@@ -834,2 +834,2 @@\n-  cmpwi(CCR0, ret_type, T_CHAR);\n-  bne(CCR0, notChar);\n+  cmpwi(CR0, ret_type, T_CHAR);\n+  bne(CR0, notChar);\n@@ -840,2 +840,2 @@\n-  \/\/ cmpwi(CCR0, ret_type, T_SHORT);  \/\/ all that's left\n-  \/\/ bne(CCR0, done);\n+  \/\/ cmpwi(CR0, ret_type, T_SHORT);  \/\/ all that's left\n+  \/\/ bne(CR0, done);\n@@ -896,2 +896,2 @@\n-    cmpwi(CCR0, R0, StackOverflow::stack_guard_enabled);\n-    beq_predict_taken(CCR0, no_reserved_zone_enabling);\n+    cmpwi(CR0, R0, StackOverflow::stack_guard_enabled);\n+    beq_predict_taken(CR0, no_reserved_zone_enabling);\n@@ -905,2 +905,2 @@\n-    cmpld(CCR0, R11_scratch1, R0);\n-    blt_predict_taken(CCR0, no_reserved_zone_enabling);\n+    cmpld(CR0, R11_scratch1, R0);\n+    blt_predict_taken(CR0, no_reserved_zone_enabling);\n@@ -964,2 +964,2 @@\n-      testbitdi(CCR0, R0, tmp, exact_log2(KlassFlags::_misc_is_value_based_class));\n-      bne(CCR0, slow_case);\n+      testbitdi(CR0, R0, tmp, exact_log2(KlassFlags::_misc_is_value_based_class));\n+      bne(CR0, slow_case);\n@@ -992,2 +992,2 @@\n-      \/\/ CmpxchgX sets CCR0 to cmpX(current, displaced).\n-      cmpxchgd(\/*flag=*\/CCR0,\n+      \/\/ CmpxchgX sets CR0 to cmpX(current, displaced).\n+      cmpxchgd(\/*flag=*\/CR0,\n@@ -1024,1 +1024,1 @@\n-      bne(CCR0, slow_case);\n+      bne(CR0, slow_case);\n@@ -1090,2 +1090,2 @@\n-      cmpdi(CCR0, header, 0);\n-      beq(CCR0, free_slot); \/\/ recursive unlock\n+      cmpdi(CR0, header, 0);\n+      beq(CR0, free_slot); \/\/ recursive unlock\n@@ -1111,2 +1111,2 @@\n-      \/\/ CmpxchgX sets CCR0 to cmpX(current, monitor).\n-      cmpxchgd(\/*flag=*\/CCR0,\n+      \/\/ CmpxchgX sets CR0 to cmpX(current, monitor).\n+      cmpxchgd(\/*flag=*\/CR0,\n@@ -1173,2 +1173,2 @@\n-    cmpwi(CCR0, Rinterp_only, 0);\n-    beq(CCR0, done);\n+    cmpwi(CR0, Rinterp_only, 0);\n+    beq(CR0, done);\n@@ -1183,2 +1183,2 @@\n-    cmpdi(CCR0, Rtarget_addr, 0);\n-    bne(CCR0, Lok);\n+    cmpdi(CR0, Rtarget_addr, 0);\n+    bne(CR0, Lok);\n@@ -1214,1 +1214,1 @@\n-  cmpd(CCR0, R21_sender_SP, Rscratch1);\n+  cmpd(CR0, R21_sender_SP, Rscratch1);\n@@ -1237,2 +1237,2 @@\n-  cmpdi(CCR0, R28_mdx, 0);\n-  beq(CCR0, zero_continue);\n+  cmpdi(CR0, R28_mdx, 0);\n+  beq(CR0, zero_continue);\n@@ -1253,2 +1253,2 @@\n-  cmpd(CCR0, R11_scratch1, R14_bcp);\n-  beq(CCR0, verify_continue);\n+  cmpd(CR0, R11_scratch1, R14_bcp);\n+  beq(CR0, verify_continue);\n@@ -1337,2 +1337,2 @@\n-  cmpd(CCR0,  value, test_out);\n-  bne(CCR0, not_equal_continue);\n+  cmpd(CR0,  value, test_out);\n+  bne(CR0, not_equal_continue);\n@@ -1494,2 +1494,2 @@\n-    cmpdi(CCR0, Rreceiver, 0);\n-    bne(CCR0, not_null);\n+    cmpdi(CR0, Rreceiver, 0);\n+    bne(CR0, not_null);\n@@ -1684,2 +1684,2 @@\n-        cmpdi(CCR0, scratch1, 0);\n-        beq(CCR0, found_null);\n+        cmpdi(CR0, scratch1, 0);\n+        beq(CR0, found_null);\n@@ -1694,2 +1694,2 @@\n-      cmpdi(CCR0, scratch1, 0);\n-      beq(CCR0, found_null);\n+      cmpdi(CR0, scratch1, 0);\n+      beq(CR0, found_null);\n@@ -1737,1 +1737,1 @@\n-  cmpdi(CCR0, obj, 0);\n+  cmpdi(CR0, obj, 0);\n@@ -1739,1 +1739,1 @@\n-  beq(CCR0, do_update);\n+  beq(CR0, do_update);\n@@ -1745,1 +1745,1 @@\n-  cmpd(CCR1, R0, klass);\n+  cmpd(CR1, R0, klass);\n@@ -1747,1 +1747,1 @@\n-  \/\/beq(CCR1, do_nothing);\n+  \/\/beq(CR1, do_nothing);\n@@ -1751,3 +1751,3 @@\n-  \/\/bne(CCR0, do_nothing);\n-  crorc(CCR0, Assembler::equal, CCR1, Assembler::equal); \/\/ cr0 eq = cr1 eq or cr0 ne\n-  beq(CCR0, do_nothing);\n+  \/\/bne(CR0, do_nothing);\n+  crorc(CR0, Assembler::equal, CR1, Assembler::equal); \/\/ cr0 eq = cr1 eq or cr0 ne\n+  beq(CR0, do_nothing);\n@@ -1757,1 +1757,1 @@\n-  beq(CCR0, do_update); \/\/ First time here. Set profile type.\n+  beq(CR0, do_update); \/\/ First time here. Set profile type.\n@@ -1788,2 +1788,2 @@\n-    cmpwi(CCR0, tmp1, is_virtual ? DataLayout::virtual_call_type_data_tag : DataLayout::call_type_data_tag);\n-    bne(CCR0, profile_continue);\n+    cmpwi(CR0, tmp1, is_virtual ? DataLayout::virtual_call_type_data_tag : DataLayout::call_type_data_tag);\n+    bne(CR0, profile_continue);\n@@ -1800,1 +1800,1 @@\n-          cmpdi(CCR0, tmp1, (i+1)*TypeStackSlotEntries::per_arg_count());\n+          cmpdi(CR0, tmp1, (i+1)*TypeStackSlotEntries::per_arg_count());\n@@ -1802,1 +1802,1 @@\n-          blt(CCR0, done);\n+          blt(CR0, done);\n@@ -1868,6 +1868,6 @@\n-      cmpwi(CCR0, tmp1, Bytecodes::_invokedynamic);\n-      cmpwi(CCR1, tmp1, Bytecodes::_invokehandle);\n-      cror(CCR0, Assembler::equal, CCR1, Assembler::equal);\n-      cmpwi(CCR1, tmp2, static_cast<int>(vmIntrinsics::_compiledLambdaForm));\n-      cror(CCR0, Assembler::equal, CCR1, Assembler::equal);\n-      bne(CCR0, profile_continue);\n+      cmpwi(CR0, tmp1, Bytecodes::_invokedynamic);\n+      cmpwi(CR1, tmp1, Bytecodes::_invokehandle);\n+      cror(CR0, Assembler::equal, CR1, Assembler::equal);\n+      cmpwi(CR1, tmp2, static_cast<int>(vmIntrinsics::_compiledLambdaForm));\n+      cror(CR0, Assembler::equal, CR1, Assembler::equal);\n+      bne(CR0, profile_continue);\n@@ -1893,2 +1893,2 @@\n-    cmpwi(CCR0, tmp1, 0);\n-    blt(CCR0, profile_continue);\n+    cmpwi(CR0, tmp1, 0);\n+    blt(CR0, profile_continue);\n@@ -1939,1 +1939,1 @@\n-    cmpdi(CCR0, entry_offset, off_base + delta);\n+    cmpdi(CR0, entry_offset, off_base + delta);\n@@ -1941,1 +1941,1 @@\n-    bge(CCR0, loop);\n+    bge(CR0, loop);\n@@ -1978,1 +1978,1 @@\n-    beq(CCR0, copy_slot_finished);                     \/\/ Nothing to copy.\n+    beq(CR0, copy_slot_finished);                     \/\/ Nothing to copy.\n@@ -2118,2 +2118,2 @@\n-  cmpdi(CCR0, Rexception, 0);\n-  beq(CCR0, Ldone);\n+  cmpdi(CR0, Rexception, 0);\n+  beq(CR0, Ldone);\n@@ -2171,1 +2171,1 @@\n-  DEBUG_ONLY(cmpdi(CCR0, R0, 0));\n+  DEBUG_ONLY(cmpdi(CR0, R0, 0));\n@@ -2189,2 +2189,2 @@\n-  cmpdi(CCR0, R0, 0);\n-  beq(CCR0, not_preempted);\n+  cmpdi(CR0, R0, 0);\n+  beq(CR0, not_preempted);\n@@ -2218,2 +2218,2 @@\n-    cmpd(CCR0, R12_scratch2, R11_scratch1);\n-    beq(CCR0, ok);\n+    cmpd(CR0, R12_scratch2, R11_scratch1);\n+    beq(CR0, ok);\n@@ -2301,2 +2301,2 @@\n-    cmpdi(CCR0, R0, frame::top_ijava_frame_abi_size + frame::ijava_state_size);\n-    bge(CCR0, Lok);\n+    cmpdi(CR0, R0, frame::top_ijava_frame_abi_size + frame::ijava_state_size);\n+    bge(CR0, Lok);\n@@ -2315,2 +2315,2 @@\n-  cmpdi(CCR0, Rcounters, 0);\n-  bne(CCR0, has_counters);\n+  cmpdi(CR0, Rcounters, 0);\n+  bne(CR0, has_counters);\n@@ -2320,2 +2320,2 @@\n-  cmpdi(CCR0, Rcounters, 0);\n-  beq(CCR0, skip); \/\/ No MethodCounters, OutOfMemory.\n+  cmpdi(CR0, Rcounters, 0);\n+  beq(CR0, skip); \/\/ No MethodCounters, OutOfMemory.\n@@ -2401,1 +2401,1 @@\n-  bne(CCR0, test);\n+  bne(CR0, test);\n@@ -2445,2 +2445,2 @@\n-    cmpwi(CCR0, R0, 0);\n-    beq(CCR0, jvmti_post_done);\n+    cmpwi(CR0, R0, 0);\n+    beq(CR0, jvmti_post_done);\n@@ -2479,2 +2479,2 @@\n-    cmpwi(CCR0, R0, 0);\n-    beq(CCR0, jvmti_post_done);\n+    cmpwi(CR0, R0, 0);\n+    beq(CR0, jvmti_post_done);\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":104,"deletions":104,"binary":false,"changes":208,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2013 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -106,1 +106,1 @@\n-    __ cmpdi(CCR0, R0, 0);\n+    __ cmpdi(CR0, R0, 0);\n@@ -108,1 +108,1 @@\n-    __ beq(CCR0, do_null);\n+    __ beq(CR0, do_null);\n","filename":"src\/hotspot\/cpu\/ppc\/interpreterRT_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2019 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -78,1 +78,1 @@\n-  __ bne(CCR0, slow);\n+  __ bne(CR0, slow);\n@@ -94,2 +94,2 @@\n-    __ cmpwi(CCR0, Rtmp, 0);\n-    __ bne(CCR0, slow);\n+    __ cmpwi(CR0, Rtmp, 0);\n+    __ bne(CR0, slow);\n@@ -121,2 +121,2 @@\n-    __ fcmpu(CCR0, F1_RET, F1_RET);\n-    __ bne(CCR0, next);\n+    __ fcmpu(CR0, F1_RET, F1_RET);\n+    __ bne(CR0, next);\n@@ -130,2 +130,2 @@\n-  __ cmpd(CCR0, R0, Rcounter);\n-  __ bne(CCR0, slow);\n+  __ cmpd(CR0, R0, Rcounter);\n+  __ bne(CR0, slow);\n","filename":"src\/hotspot\/cpu\/ppc\/jniFastGetField_ppc.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2024 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -1306,2 +1306,2 @@\n-      cmpdi(CCR0, receiver, 0);\n-      beqctr(CCR0);\n+      cmpdi(CR0, receiver, 0);\n+      beqctr(CR0);\n@@ -1315,2 +1315,2 @@\n-    cmpd(CCR0, tmp1, tmp2);\n-    bnectr(CCR0);\n+    cmpd(CR0, tmp1, tmp2);\n+    bnectr(CR0);\n@@ -1530,2 +1530,2 @@\n-  cmpld(CCR0, R1_SP, R0);\n-  blt_predict_taken(CCR0, no_reserved_zone_enabling);\n+  cmpld(CR0, R1_SP, R0);\n+  blt_predict_taken(CR0, no_reserved_zone_enabling);\n@@ -1554,1 +1554,1 @@\n-    bne_predict_not_taken(CCR0, retry); \/\/ StXcx_ sets CCR0.\n+    bne_predict_not_taken(CR0, retry); \/\/ StXcx_ sets CR0.\n@@ -1556,1 +1556,1 @@\n-    bne(                  CCR0, retry); \/\/ StXcx_ sets CCR0.\n+    bne(                  CR0, retry); \/\/ StXcx_ sets CR0.\n@@ -1568,1 +1568,1 @@\n-    bne_predict_not_taken(CCR0, retry); \/\/ StXcx_ sets CCR0.\n+    bne_predict_not_taken(CR0, retry); \/\/ StXcx_ sets CR0.\n@@ -1570,1 +1570,1 @@\n-    bne(                  CCR0, retry); \/\/ StXcx_ sets CCR0.\n+    bne(                  CR0, retry); \/\/ StXcx_ sets CR0.\n@@ -1641,1 +1641,1 @@\n-    bne_predict_not_taken(CCR0, retry); \/\/ StXcx_ sets CCR0.\n+    bne_predict_not_taken(CR0, retry); \/\/ StXcx_ sets CR0.\n@@ -1643,1 +1643,1 @@\n-    bne(                  CCR0, retry); \/\/ StXcx_ sets CCR0.\n+    bne(                  CR0, retry); \/\/ StXcx_ sets CR0.\n@@ -1747,1 +1747,1 @@\n-  assert(!weak || flag == CCR0, \"weak only supported with CCR0\");\n+  assert(!weak || flag == CR0, \"weak only supported with CR0\");\n@@ -1776,1 +1776,1 @@\n-      bne_predict_not_taken(CCR0, weak ? failed : retry); \/\/ StXcx_ sets CCR0.\n+      bne_predict_not_taken(CR0, weak ? failed : retry); \/\/ StXcx_ sets CR0.\n@@ -1778,1 +1778,1 @@\n-      bne(                  CCR0, weak ? failed : retry); \/\/ StXcx_ sets CCR0.\n+      bne(                  CR0, weak ? failed : retry); \/\/ StXcx_ sets CR0.\n@@ -1840,1 +1840,1 @@\n-  assert(!weak || flag == CCR0, \"weak only supported with CCR0\");\n+  assert(!weak || flag == CR0, \"weak only supported with CR0\");\n@@ -1873,1 +1873,1 @@\n-      bne_predict_not_taken(CCR0, weak ? failed : retry); \/\/ stXcx_ sets CCR0\n+      bne_predict_not_taken(CR0, weak ? failed : retry); \/\/ stXcx_ sets CR0\n@@ -1875,1 +1875,1 @@\n-      bne(                  CCR0, weak ? failed : retry); \/\/ stXcx_ sets CCR0\n+      bne(                  CR0, weak ? failed : retry); \/\/ stXcx_ sets CR0\n@@ -1963,1 +1963,1 @@\n-    cmpd(CCR0, temp2, intf_klass);\n+    cmpd(CR0, temp2, intf_klass);\n@@ -1966,1 +1966,1 @@\n-      beq(CCR0, found_method);\n+      beq(CR0, found_method);\n@@ -1968,1 +1968,1 @@\n-      bne(CCR0, search);\n+      bne(CR0, search);\n@@ -1976,2 +1976,2 @@\n-    cmpdi(CCR0, temp2, 0);\n-    beq(CCR0, L_no_such_interface);\n+    cmpdi(CR0, temp2, 0);\n+    beq(CR0, L_no_such_interface);\n@@ -2047,2 +2047,2 @@\n-  cmpd(CCR0, sub_klass, super_klass);\n-  beq(CCR0, *L_success);\n+  cmpd(CR0, sub_klass, super_klass);\n+  beq(CR0, *L_success);\n@@ -2061,1 +2061,1 @@\n-  cmpd(CCR0, cached_super, super_klass);\n+  cmpd(CR0, cached_super, super_klass);\n@@ -2077,2 +2077,2 @@\n-    beq(CCR0, *L_success);\n-    cmpwi(CCR0, super_check_offset.as_register(), sc_offset);\n+    beq(CR0, *L_success);\n+    cmpwi(CR0, super_check_offset.as_register(), sc_offset);\n@@ -2080,1 +2080,1 @@\n-      beq(CCR0, *L_slow_path);\n+      beq(CR0, *L_slow_path);\n@@ -2082,1 +2082,1 @@\n-      bne(CCR0, *L_failure);\n+      bne(CR0, *L_failure);\n@@ -2089,1 +2089,1 @@\n-        beq(CCR0, *L_success);\n+        beq(CR0, *L_success);\n@@ -2091,1 +2091,1 @@\n-        bne(CCR0, *L_slow_path);\n+        bne(CR0, *L_slow_path);\n@@ -2097,1 +2097,1 @@\n-        beq(CCR0, *L_success);\n+        beq(CR0, *L_success);\n@@ -2099,1 +2099,1 @@\n-        bne(CCR0, *L_failure);\n+        bne(CR0, *L_failure);\n@@ -2133,2 +2133,2 @@\n-  cmpwi(CCR0, temp, 0);\n-  beq(CCR0, (L_success == nullptr) ? failure : fallthru); \/\/ indicate failure if length 0\n+  cmpwi(CR0, temp, 0);\n+  beq(CR0, (L_success == nullptr) ? failure : fallthru); \/\/ indicate failure if length 0\n@@ -2141,2 +2141,2 @@\n-  cmpd(CCR0, temp, super_klass);\n-  beq(CCR0, hit);\n+  cmpd(CR0, temp, super_klass);\n+  beq(CR0, hit);\n@@ -2150,1 +2150,1 @@\n-    crandc(CCR0, Assembler::equal, CCR0, Assembler::equal); \/\/ miss indicated by CR0.ne\n+    crandc(CR0, Assembler::equal, CR0, Assembler::equal); \/\/ miss indicated by CR0.ne\n@@ -2227,1 +2227,1 @@\n-    cmpdi(CCR0, result_reg, 0);\n+    cmpdi(CR0, result_reg, 0);\n@@ -2234,1 +2234,1 @@\n-    beq(CCR0, *L_success);\n+    beq(CR0, *L_success);\n@@ -2273,2 +2273,2 @@\n-    cmpdi(CCR0, count, 0);\n-    bgt(CCR0, ok);\n+    cmpdi(CR0, count, 0);\n+    bgt(CR0, ok);\n@@ -2285,1 +2285,1 @@\n-  beq(CCR0, Lexit);\n+  beq(CR0, Lexit);\n@@ -2339,1 +2339,1 @@\n-  bge(CCR0, L_done);\n+  bge(CR0, L_done);\n@@ -2363,1 +2363,1 @@\n-  beq(CCR0, L_done); \/\/ Found a match (result == 0)\n+  beq(CR0, L_done); \/\/ Found a match (result == 0)\n@@ -2366,2 +2366,2 @@\n-  testbitdi(CCR0, \/* temp *\/ r_array_length, r_bitmap, (bit + 1) & Klass::SECONDARY_SUPERS_TABLE_MASK);\n-  beq(CCR0, L_done); \/\/ (result != 0)\n+  testbitdi(CR0, \/* temp *\/ r_array_length, r_bitmap, (bit + 1) & Klass::SECONDARY_SUPERS_TABLE_MASK);\n+  beq(CR0, L_done); \/\/ (result != 0)\n@@ -2431,1 +2431,1 @@\n-  bge(CCR0, L_done);\n+  bge(CR0, L_done);\n@@ -2449,1 +2449,1 @@\n-  beq(CCR0, L_done); \/\/ found a match, result is 0 in this case\n+  beq(CR0, L_done); \/\/ found a match, result is 0 in this case\n@@ -2457,1 +2457,1 @@\n-  beq(CCR0, L_done); \/\/ fail (result != 0)\n+  beq(CR0, L_done); \/\/ fail (result != 0)\n@@ -2506,2 +2506,2 @@\n-  cmpwi(CCR0, r_array_length, (int32_t)Klass::SECONDARY_SUPERS_TABLE_SIZE - 2);\n-  bgt(CCR0, L_huge);\n+  cmpwi(CR0, r_array_length, (int32_t)Klass::SECONDARY_SUPERS_TABLE_SIZE - 2);\n+  bgt(CR0, L_huge);\n@@ -2525,2 +2525,2 @@\n-      cmpdi(CCR0, r_array_length, 0);\n-      bgt(CCR0, ok);\n+      cmpdi(CR0, r_array_length, 0);\n+      bgt(CR0, ok);\n@@ -2540,2 +2540,2 @@\n-    cmpd(CCR0, r_array_index, r_array_length);\n-    isel_0(r_array_index, CCR0, Assembler::greater);\n+    cmpd(CR0, r_array_index, r_array_length);\n+    isel_0(r_array_index, CR0, Assembler::greater);\n@@ -2545,1 +2545,1 @@\n-    beq(CCR0, L_done); \/\/ success (result == 0)\n+    beq(CR0, L_done); \/\/ success (result == 0)\n@@ -2548,2 +2548,2 @@\n-    testbitdi(CCR0, R0, r_bitmap, 2);\n-    beq(CCR0, L_done); \/\/ fail (result != 0)\n+    testbitdi(CR0, R0, r_bitmap, 2);\n+    beq(CR0, L_done); \/\/ fail (result != 0)\n@@ -2597,2 +2597,2 @@\n-  cmpdi(CCR0, r_array_length, 0);\n-  ble(CCR0, failure);\n+  cmpdi(CR0, r_array_length, 0);\n+  ble(CR0, failure);\n@@ -2605,2 +2605,2 @@\n-  cmpd(CCR0, result, linear_result);\n-  beq(CCR0, passed);\n+  cmpd(CR0, result, linear_result);\n+  beq(CR0, passed);\n@@ -2642,2 +2642,2 @@\n-  cmpwi(CCR0, R0, InstanceKlass::fully_initialized);\n-  bne(CCR0, L_check_thread);\n+  cmpwi(CR0, R0, InstanceKlass::fully_initialized);\n+  bne(CR0, L_check_thread);\n@@ -2650,1 +2650,1 @@\n-  cmpd(CCR0, thread, R0);\n+  cmpd(CR0, thread, R0);\n@@ -2652,1 +2652,1 @@\n-    beq(CCR0, *L_fast_path);\n+    beq(CR0, *L_fast_path);\n@@ -2654,1 +2654,1 @@\n-    bne(CCR0, *L_slow_path);\n+    bne(CR0, *L_slow_path);\n@@ -2702,2 +2702,2 @@\n-  cmpld(CCR0, new_top, R0);\n-  bc_far_optimized(Assembler::bcondCRbiIs1, bi0(CCR0, Assembler::greater), slow_case);\n+  cmpld(CR0, new_top, R0);\n+  bc_far_optimized(Assembler::bcondCRbiIs1, bi0(CR0, Assembler::greater), slow_case);\n@@ -2710,1 +2710,1 @@\n-    beq(CCR0, L);\n+    beq(CR0, L);\n@@ -2787,1 +2787,1 @@\n-  bne(CCR0, object_has_monitor);\n+  bne(CR0, object_has_monitor);\n@@ -2833,2 +2833,2 @@\n-    if (flag != CCR0) {\n-      mcrf(flag, CCR0);\n+    if (flag != CR0) {\n+      mcrf(flag, CR0);\n@@ -2836,1 +2836,1 @@\n-    beq(CCR0, success);\n+    beq(CR0, success);\n@@ -2909,1 +2909,1 @@\n-  bne(CCR0, object_has_monitor);\n+  bne(CR0, object_has_monitor);\n@@ -2940,1 +2940,1 @@\n-  blt(CCR0, not_recursive); \/\/ Not recursive if negative after decrement.\n+  blt(CR0, not_recursive); \/\/ Not recursive if negative after decrement.\n@@ -2944,2 +2944,2 @@\n-  if (flag == CCR0) { \/\/ Otherwise, flag is already EQ, here.\n-    crorc(CCR0, Assembler::equal, CCR0, Assembler::equal); \/\/ Set CCR0 EQ\n+  if (flag == CR0) { \/\/ Otherwise, flag is already EQ, here.\n+    crorc(CR0, Assembler::equal, CR0, Assembler::equal); \/\/ Set CR0 EQ\n@@ -3004,1 +3004,1 @@\n-  assert(flag == CCR0, \"bad condition register\");\n+  assert(flag == CR0, \"bad condition register\");\n@@ -3022,2 +3022,2 @@\n-    testbitdi(CCR0, R0, tmp1, exact_log2(KlassFlags::_misc_is_value_based_class));\n-    bne(CCR0, slow_path);\n+    testbitdi(CR0, R0, tmp1, exact_log2(KlassFlags::_misc_is_value_based_class));\n+    bne(CR0, slow_path);\n@@ -3037,2 +3037,2 @@\n-    cmplwi(CCR0, top, LockStack::end_offset() - 1);\n-    bgt(CCR0, slow_path);\n+    cmplwi(CR0, top, LockStack::end_offset() - 1);\n+    bgt(CR0, slow_path);\n@@ -3046,2 +3046,2 @@\n-    cmpd(CCR0, obj, R0);\n-    beq(CCR0, push);\n+    cmpd(CR0, obj, R0);\n+    beq(CR0, push);\n@@ -3052,3 +3052,3 @@\n-    cmpldi(CCR0, R0, markWord::unlocked_value);\n-    bgt(CCR0, inflated);\n-    bne(CCR0, slow_path);\n+    cmpldi(CR0, R0, markWord::unlocked_value);\n+    bgt(CR0, inflated);\n+    bne(CR0, slow_path);\n@@ -3094,2 +3094,2 @@\n-        cmpd(CCR0, R0, obj);\n-        beq(CCR0, monitor_found);\n+        cmpd(CR0, R0, obj);\n+        beq(CR0, monitor_found);\n@@ -3106,2 +3106,2 @@\n-      cmpd(CCR0, R0, obj);\n-      beq(CCR0, monitor_found);\n+      cmpd(CR0, R0, obj);\n+      beq(CR0, monitor_found);\n@@ -3111,3 +3111,3 @@\n-      cmpdi(CCR1, R0, 0);\n-      bne(CCR1, loop);\n-      \/\/ Cache Miss, CCR0.NE set from cmp above\n+      cmpdi(CR1, R0, 0);\n+      bne(CR1, loop);\n+      \/\/ Cache Miss, CR0.NE set from cmp above\n@@ -3126,1 +3126,1 @@\n-    cmpxchgd(\/*flag=*\/CCR0,\n+    cmpxchgd(\/*flag=*\/CR0,\n@@ -3133,1 +3133,1 @@\n-    beq(CCR0, monitor_locked);\n+    beq(CR0, monitor_locked);\n@@ -3136,2 +3136,2 @@\n-    cmpd(CCR0, R0, thread_id);\n-    bne(CCR0, slow_path);\n+    cmpd(CR0, R0, thread_id);\n+    bne(CR0, slow_path);\n@@ -3163,1 +3163,1 @@\n-  beq(CCR0, flag_correct);\n+  beq(CR0, flag_correct);\n@@ -3169,1 +3169,1 @@\n-  bne(CCR0, flag_correct);\n+  bne(CR0, flag_correct);\n@@ -3179,1 +3179,1 @@\n-  assert(flag == CCR0, \"bad condition register\");\n+  assert(flag == CR0, \"bad condition register\");\n@@ -3199,1 +3199,1 @@\n-    cmpd(CCR0, obj, t);\n+    cmpd(CR0, obj, t);\n@@ -3201,1 +3201,1 @@\n-    bne(CCR0, inflated_load_monitor);\n+    bne(CR0, inflated_load_monitor);\n@@ -3214,2 +3214,2 @@\n-    cmpd(CCR0, obj, t);\n-    beq(CCR0, unlocked);\n+    cmpd(CR0, obj, t);\n+    beq(CR0, unlocked);\n@@ -3223,1 +3223,1 @@\n-      bne(CCR0, inflated);\n+      bne(CR0, inflated);\n@@ -3225,1 +3225,1 @@\n-      bne(CCR0, push_and_slow);\n+      bne(CR0, push_and_slow);\n@@ -3232,1 +3232,1 @@\n-    beq(CCR0, not_unlocked);\n+    beq(CR0, not_unlocked);\n@@ -3254,1 +3254,1 @@\n-    bne(CCR0, inflated);\n+    bne(CR0, inflated);\n@@ -3263,2 +3263,2 @@\n-    cmplwi(CCR0, top, in_bytes(JavaThread::lock_stack_base_offset()));\n-    blt(CCR0, check_done);\n+    cmplwi(CR0, top, in_bytes(JavaThread::lock_stack_base_offset()));\n+    blt(CR0, check_done);\n@@ -3266,2 +3266,2 @@\n-    cmpd(CCR0, obj, t);\n-    bne(CCR0, inflated);\n+    cmpd(CR0, obj, t);\n+    bne(CR0, inflated);\n@@ -3282,2 +3282,2 @@\n-      cmpldi(CCR0, monitor, checked_cast<uint8_t>(alignof(ObjectMonitor*)));\n-      blt(CCR0, slow_path);\n+      cmpldi(CR0, monitor, checked_cast<uint8_t>(alignof(ObjectMonitor*)));\n+      blt(CR0, slow_path);\n@@ -3292,1 +3292,1 @@\n-    blt(CCR0, not_recursive);\n+    blt(CR0, not_recursive);\n@@ -3296,1 +3296,1 @@\n-    crorc(CCR0, Assembler::equal, CCR0, Assembler::equal);\n+    crorc(CR0, Assembler::equal, CR0, Assembler::equal);\n@@ -3316,2 +3316,2 @@\n-    cmpdi(CCR0, t, 0);\n-    beq(CCR0, unlocked); \/\/ If so we are done.\n+    cmpdi(CR0, t, 0);\n+    beq(CR0, unlocked); \/\/ If so we are done.\n@@ -3321,1 +3321,1 @@\n-    cmpdi(CCR0, t, 0);\n+    cmpdi(CR0, t, 0);\n@@ -3324,1 +3324,1 @@\n-    beq(CCR0, unlocked); \/\/ If there is a successor we are done.\n+    beq(CR0, unlocked); \/\/ If there is a successor we are done.\n@@ -3337,1 +3337,1 @@\n-  beq(CCR0, flag_correct);\n+  beq(CR0, flag_correct);\n@@ -3343,1 +3343,1 @@\n-  bne(CCR0, flag_correct);\n+  bne(CR0, flag_correct);\n@@ -3360,1 +3360,1 @@\n-        cmpld(CCR0, R1_SP, temp);\n+        cmpld(CR0, R1_SP, temp);\n@@ -3362,1 +3362,1 @@\n-        bc_far_optimized(Assembler::bcondCRbiIs1, bi0(CCR0, Assembler::greater), slow_path);\n+        bc_far_optimized(Assembler::bcondCRbiIs1, bi0(CR0, Assembler::greater), slow_path);\n@@ -3368,2 +3368,2 @@\n-      cmpld(CCR0, fp, temp);\n-      bgt(CCR0, slow_path);\n+      cmpld(CR0, fp, temp);\n+      bgt(CR0, slow_path);\n@@ -3374,1 +3374,1 @@\n-    bne(CCR0, slow_path);\n+    bne(CR0, slow_path);\n@@ -3615,2 +3615,2 @@\n-  cmpdi(CCR0, result, 0);\n-  beq(CCR0, resolved);\n+  cmpdi(CR0, result, 0);\n+  beq(CR0, resolved);\n@@ -3677,2 +3677,2 @@\n-    cmpdi(CCR1, cnt_dwords, min_cnt); \/\/ Big enough? (ensure >= dcbz_min lines included).\n-    blt(CCR1, small_rest);\n+    cmpdi(CR1, cnt_dwords, min_cnt); \/\/ Big enough? (ensure >= dcbz_min lines included).\n+    blt(CR1, small_rest);\n@@ -3681,1 +3681,1 @@\n-    beq(CCR0, fast);                                  \/\/ Already 128byte aligned.\n+    beq(CR0, fast);                                  \/\/ Already 128byte aligned.\n@@ -3704,2 +3704,2 @@\n-    cmpdi(CCR0, cnt_dwords, 0);        \/\/ size 0?\n-    beq(CCR0, done);                   \/\/ rest == 0\n+    cmpdi(CR0, cnt_dwords, 0);        \/\/ size 0?\n+    beq(CR0, done);                   \/\/ rest == 0\n@@ -3827,1 +3827,1 @@\n-  beq(CCR0, L_done);\n+  beq(CR0, L_done);\n@@ -3918,2 +3918,2 @@\n-  cmpdi(CCR0, len, complexThreshold);\n-  blt(CCR0, L_tail);\n+  cmpdi(CR0, len, complexThreshold);\n+  blt(CR0, L_tail);\n@@ -3932,2 +3932,2 @@\n-      cmpdi(CCR0, tmp, mainLoop_stepping);\n-      blt(CCR0, L_tail);                         \/\/ For less than one mainloop_stepping left, do only tail processing\n+      cmpdi(CR0, tmp, mainLoop_stepping);\n+      blt(CR0, L_tail);                         \/\/ For less than one mainloop_stepping left, do only tail processing\n@@ -4010,2 +4010,2 @@\n-  cmpw(CCR0, t1, prealign);\n-  blt(CCR0, L_tail); \/\/ len - prealign < threshold?\n+  cmpw(CR0, t1, prealign);\n+  blt(CR0, L_tail); \/\/ len - prealign < threshold?\n@@ -4135,2 +4135,2 @@\n-  cmpd(CCR0, len, num_bytes);\n-  blt(CCR0, L_last);\n+  cmpd(CR0, len, num_bytes);\n+  blt(CR0, L_last);\n@@ -4223,2 +4223,2 @@\n-  cmpd(CCR0, len, num_bytes);\n-  bge(CCR0, L_outer_loop);\n+  cmpd(CR0, len, num_bytes);\n+  bge(CR0, L_outer_loop);\n@@ -4236,1 +4236,1 @@\n-  bgt(CCR0, L_outer_loop);\n+  bgt(CR0, L_outer_loop);\n@@ -4251,1 +4251,1 @@\n-    beq(CCR0, L_done);\n+    beq(CR0, L_done);\n@@ -4370,1 +4370,1 @@\n-  blt(CCR0, L_one_x);   \/\/ Special case: length of x is 1.\n+  blt(CR0, L_one_x);   \/\/ Special case: length of x is 1.\n@@ -4382,2 +4382,2 @@\n-  cmpdi(CCR0, idx, 1);\n-  blt(CCR0, L_first_loop_exit);\n+  cmpdi(CR0, idx, 1);\n+  blt(CR0, L_first_loop_exit);\n@@ -4385,1 +4385,1 @@\n-  beq(CCR0, L_one_y);\n+  beq(CR0, L_one_y);\n@@ -4493,1 +4493,1 @@\n-  beq(CCR0, L_third_loop_exit);\n+  beq(CR0, L_third_loop_exit);\n@@ -4511,1 +4511,1 @@\n-  beq(CCR0, L_post_third_loop_done);\n+  beq(CR0, L_post_third_loop_done);\n@@ -4516,1 +4516,1 @@\n-  blt(CCR0, L_check_1);\n+  blt(CR0, L_check_1);\n@@ -4526,1 +4526,1 @@\n-  blt(CCR0, L_post_third_loop_done);\n+  blt(CR0, L_post_third_loop_done);\n@@ -4554,1 +4554,1 @@\n-  cmpdi  (CCR0,    len,     0);\n+  cmpdi  (CR0,    len,     0);\n@@ -4559,1 +4559,1 @@\n-  ble    (CCR0,    SKIP);\n+  ble    (CR0,    SKIP);\n@@ -4631,1 +4631,1 @@\n-  blt(CCR0, L_done);\n+  blt(CR0, L_done);\n@@ -4638,2 +4638,2 @@\n-  cmpdi(CCR0, kdx, 0);\n-  beq(CCR0, L_second_loop);\n+  cmpdi(CR0, kdx, 0);\n+  beq(CR0, L_second_loop);\n@@ -4644,1 +4644,1 @@\n-  beq(CCR0, L_carry);\n+  beq(CR0, L_carry);\n@@ -4679,1 +4679,1 @@\n-  blt(CCR0, L_done);\n+  blt(CR0, L_done);\n@@ -4692,1 +4692,1 @@\n-  blt(CCR0, L_last_x);\n+  blt(CR0, L_last_x);\n@@ -4726,1 +4726,1 @@\n-  blt(CCR0, L_done);\n+  blt(CR0, L_done);\n@@ -4746,1 +4746,1 @@\n-    beq(CCR0, ok);\n+    beq(CR0, ok);\n@@ -4748,1 +4748,1 @@\n-    bne(CCR0, ok);\n+    bne(CR0, ok);\n@@ -4761,1 +4761,1 @@\n-      cmpwi(CCR0, R0, 0);\n+      cmpwi(CR0, R0, 0);\n@@ -4765,1 +4765,1 @@\n-      cmpdi(CCR0, R0, 0);\n+      cmpdi(CR0, R0, 0);\n@@ -4887,2 +4887,2 @@\n-    cmpd(CCR6, addr, high);\n-    ble(CCR6, loop);\n+    cmpd(CR6, addr, high);\n+    ble(CR6, loop);\n@@ -4920,2 +4920,2 @@\n-  cmpld(CCR0, R1_SP, R0);\n-  ble(CCR0, done);\n+  cmpld(CR0, R1_SP, R0);\n+  ble(CR0, done);\n@@ -4931,2 +4931,2 @@\n-  cmpld(CCR0, R1_SP, R0);\n-  ble(CCR0, done);\n+  cmpld(CR0, R1_SP, R0);\n+  ble(CR0, done);\n@@ -4938,1 +4938,1 @@\n-\/\/ Note: Must preserve CCR0 EQ (invariant).\n+\/\/ Note: Must preserve CR0 EQ (invariant).\n@@ -4944,2 +4944,2 @@\n-  cmpdi(CCR0, tmp, 0);\n-  bge_predict_taken(CCR0, ok);\n+  cmpdi(CR0, tmp, 0);\n+  bge_predict_taken(CR0, ok);\n@@ -4948,1 +4948,1 @@\n-  crorc(CCR0, Assembler::equal, CCR0, Assembler::equal); \/\/ Restore CCR0 EQ\n+  crorc(CR0, Assembler::equal, CR0, Assembler::equal); \/\/ Restore CR0 EQ\n@@ -4954,1 +4954,1 @@\n-\/\/ Note: Must preserve CCR0 EQ (invariant).\n+\/\/ Note: Must preserve CR0 EQ (invariant).\n@@ -4960,2 +4960,2 @@\n-  cmpdi(CCR0, tmp, 0);\n-  bgt_predict_taken(CCR0, ok);\n+  cmpdi(CR0, tmp, 0);\n+  bgt_predict_taken(CR0, ok);\n@@ -4964,1 +4964,1 @@\n-  crorc(CCR0, Assembler::equal, CCR0, Assembler::equal); \/\/ Restore CCR0 EQ\n+  crorc(CR0, Assembler::equal, CR0, Assembler::equal); \/\/ Restore CR0 EQ\n@@ -4971,2 +4971,2 @@\n-\/\/ Branches to failed if the state is not as expected with CCR0 NE.\n-\/\/ Falls through upon success with CCR0 EQ.\n+\/\/ Branches to failed if the state is not as expected with CR0 NE.\n+\/\/ Falls through upon success with CR0 EQ.\n@@ -4989,1 +4989,1 @@\n-    bne(CCR0, failed); \/\/ failed if new header doesn't contain locked_value (which is 0)\n+    bne(CR0, failed); \/\/ failed if new header doesn't contain locked_value (which is 0)\n@@ -4993,1 +4993,1 @@\n-    bne(CCR0, failed); \/\/ failed if old header doesn't contain locked_value (which is 0)\n+    bne(CR0, failed); \/\/ failed if old header doesn't contain locked_value (which is 0)\n@@ -4997,1 +4997,1 @@\n-  bne(CCR0, retry);\n+  bne(CR0, retry);\n@@ -5027,2 +5027,2 @@\n-  cmplwi(CCR0, top, LockStack::end_offset());\n-  bge(CCR0, slow);\n+  cmplwi(CR0, top, LockStack::end_offset());\n+  bge(CR0, slow);\n@@ -5036,2 +5036,2 @@\n-  cmpd(CCR0, obj, t);\n-  beq(CCR0, push);\n+  cmpd(CR0, obj, t);\n+  beq(CR0, push);\n@@ -5043,1 +5043,1 @@\n-  bne(CCR0, slow);\n+  bne(CR0, slow);\n@@ -5072,2 +5072,2 @@\n-    cmplwi(CCR0, t1, LockStack::start_offset());\n-    bge(CCR0, stack_ok);\n+    cmplwi(CR0, t1, LockStack::start_offset());\n+    bge(CR0, stack_ok);\n@@ -5088,2 +5088,2 @@\n-  cmpd(CCR0, obj, t);\n-  bne(CCR0, slow);\n+  cmpd(CR0, obj, t);\n+  bne(CR0, slow);\n@@ -5102,2 +5102,2 @@\n-  cmpd(CCR0, obj, t);\n-  beq(CCR0, unlocked);\n+  cmpd(CR0, obj, t);\n+  beq(CR0, unlocked);\n@@ -5111,1 +5111,1 @@\n-  bne(CCR0, push_and_slow);\n+  bne(CR0, push_and_slow);\n@@ -5117,1 +5117,1 @@\n-  beq(CCR0, not_unlocked);\n+  beq(CR0, not_unlocked);\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":205,"deletions":205,"binary":false,"changes":410,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2024 SAP SE. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -182,2 +182,2 @@\n-  \/\/ set dst to -1, 0, +1 as follows: if CCR0bi is \"greater than\", dst is set to 1,\n-  \/\/ if CCR0bi is \"equal\", dst is set to 0, otherwise it's set to -1.\n+  \/\/ set dst to -1, 0, +1 as follows: if CR0bi is \"greater than\", dst is set to 1,\n+  \/\/ if CR0bi is \"equal\", dst is set to 0, otherwise it's set to -1.\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2024 SAP SE. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -251,2 +251,2 @@\n-\/\/ set dst to -1, 0, +1 as follows: if CCR0bi is \"greater than\", dst is set to 1,\n-\/\/ if CCR0bi is \"equal\", dst is set to 0, otherwise it's set to -1.\n+\/\/ set dst to -1, 0, +1 as follows: if CR0bi is \"greater than\", dst is set to 1,\n+\/\/ if CR0bi is \"equal\", dst is set to 0, otherwise it's set to -1.\n@@ -257,2 +257,2 @@\n-    setbc(R0, CCR0, Assembler::greater); \/\/ Set 1 to R0 if CCR0bi is \"greater than\", otherwise 0\n-    setnbc(dst, CCR0, Assembler::less); \/\/ Set -1 to dst if CCR0bi is \"less than\", otherwise 0\n+    setbc(R0, CR0, Assembler::greater); \/\/ Set 1 to R0 if CR0bi is \"greater than\", otherwise 0\n+    setnbc(dst, CR0, Assembler::less); \/\/ Set -1 to dst if CR0bi is \"less than\", otherwise 0\n@@ -270,1 +270,1 @@\n-    cror(CCR0, Assembler::less, CCR0, Assembler::summary_overflow); \/\/ treat unordered like less\n+    cror(CR0, Assembler::less, CR0, Assembler::summary_overflow); \/\/ treat unordered like less\n@@ -272,1 +272,1 @@\n-    cror(CCR0, Assembler::greater, CCR0, Assembler::summary_overflow); \/\/ treat unordered like greater\n+    cror(CR0, Assembler::greater, CR0, Assembler::summary_overflow); \/\/ treat unordered like greater\n@@ -283,1 +283,1 @@\n-      cmpdi(CCR0, dst, 0);\n+      cmpdi(CR0, dst, 0);\n@@ -285,1 +285,1 @@\n-      cmpwi(CCR0, dst, 0);\n+      cmpwi(CR0, dst, 0);\n@@ -287,1 +287,1 @@\n-    setbcr(dst, CCR0, Assembler::equal);\n+    setbcr(dst, CR0, Assembler::equal);\n@@ -376,2 +376,2 @@\n-      cmpdi(CCR0, a, 0);\n-      bne(CCR0, ok);\n+      cmpdi(CR0, a, 0);\n+      bne(CR0, ok);\n@@ -393,2 +393,2 @@\n-      cmpdi(CCR0, a, 0);\n-      beq(CCR0, *Lis_null);\n+      cmpdi(CR0, a, 0);\n+      beq(CR0, *Lis_null);\n@@ -471,1 +471,1 @@\n-      cmpdi(CCR0, src, 0);\n+      cmpdi(CR0, src, 0);\n@@ -474,1 +474,1 @@\n-      isel_0(d, CCR0, Assembler::equal);\n+      isel_0(d, CR0, Assembler::equal);\n@@ -478,1 +478,1 @@\n-      beq(CCR0, isNull);\n+      beq(CR0, isNull);\n@@ -512,1 +512,1 @@\n-    cmpwi(CCR0, d, 0);\n+    cmpwi(CR0, d, 0);\n@@ -516,1 +516,1 @@\n-      beq(CCR0, isNull);\n+      beq(CR0, isNull);\n@@ -521,1 +521,1 @@\n-    isel_0(d, CCR0, Assembler::equal);\n+    isel_0(d, CR0, Assembler::equal);\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.inline.hpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-  beq    (CCR0, sha256_aligned);\n+  beq    (CR0, sha256_aligned);\n@@ -124,1 +124,1 @@\n-  beq   (CCR0, w_aligned); \/\/ address ends with 0x0, not 0x8\n+  beq   (CR0, w_aligned); \/\/ address ends with 0x0, not 0x8\n@@ -321,1 +321,1 @@\n-  beq     (CCR0, state_load_aligned);\n+  beq     (CR0, state_load_aligned);\n@@ -541,2 +541,2 @@\n-    cmplw(CCR0, ofs, limit);\n-    ble(CCR0, sha_loop);\n+    cmplw(CR0, ofs, limit);\n+    ble(CR0, sha_loop);\n@@ -570,1 +570,1 @@\n-  beq    (CCR0, is_aligned); \/\/ address ends with 0x0, not 0x8\n+  beq    (CR0, is_aligned); \/\/ address ends with 0x0, not 0x8\n@@ -626,1 +626,1 @@\n-  beq(CCR0, state_save_aligned);\n+  beq(CR0, state_save_aligned);\n@@ -863,1 +863,1 @@\n-  beq(CCR0, state_aligned);\n+  beq(CR0, state_aligned);\n@@ -1124,2 +1124,2 @@\n-    cmplw(CCR0, ofs, limit);\n-    ble(CCR0, sha_loop);\n+    cmplw(CR0, ofs, limit);\n+    ble(CR0, sha_loop);\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc_sha.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2024 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -86,2 +86,2 @@\n-  __ cmpdi(CCR0, obj_reg, 0);\n-  __ beq(CCR0, L_bad);\n+  __ cmpdi(CR0, obj_reg, 0);\n+  __ beq(CR0, L_bad);\n@@ -91,2 +91,2 @@\n-  __ cmpd(CCR0, temp_reg, temp2_reg);\n-  __ beq(CCR0, L_ok);\n+  __ cmpd(CR0, temp_reg, temp2_reg);\n+  __ beq(CR0, L_ok);\n@@ -94,2 +94,2 @@\n-  __ cmpd(CCR0, temp_reg, temp2_reg);\n-  __ beq(CCR0, L_ok);\n+  __ cmpd(CR0, temp_reg, temp2_reg);\n+  __ beq(CR0, L_ok);\n@@ -110,2 +110,2 @@\n-  __ cmpwi(CCR1, temp, ref_kind);\n-  __ beq(CCR1, L);\n+  __ cmpwi(CR1, temp, ref_kind);\n+  __ beq(CR1, L);\n@@ -138,2 +138,2 @@\n-    __ cmplwi(CCR0, temp, 0);\n-    __ beq(CCR0, run_compiled_code);\n+    __ cmplwi(CR0, temp, 0);\n+    __ beq(CR0, run_compiled_code);\n@@ -141,2 +141,2 @@\n-    __ cmplwi(CCR0, R19_method, 0);\n-    __ beq(CCR0, L_no_such_method);\n+    __ cmplwi(CR0, R19_method, 0);\n+    __ beq(CR0, L_no_such_method);\n@@ -150,2 +150,2 @@\n-  __ cmplwi(CCR0, R19_method, 0);\n-  __ beq(CCR0, L_no_such_method);\n+  __ cmplwi(CR0, R19_method, 0);\n+  __ beq(CR0, L_no_such_method);\n@@ -203,2 +203,2 @@\n-    __ cmpd(CCR1, temp2, recv);\n-    __ beq(CCR1, L);\n+    __ cmpd(CR1, temp2, recv);\n+    __ beq(CR1, L);\n@@ -251,2 +251,2 @@\n-    __ cmpwi(CCR1, R30_tmp1, (int) iid);\n-    __ beq(CCR1, L);\n+    __ cmpwi(CR1, R30_tmp1, (int) iid);\n+    __ beq(CR1, L);\n@@ -428,2 +428,2 @@\n-        __ cmpdi(CCR1, temp2_index, 0);\n-        __ bge(CCR1, L_index_ok);\n+        __ cmpdi(CR1, temp2_index, 0);\n+        __ bge(CR1, L_index_ok);\n@@ -460,2 +460,2 @@\n-        __ cmpdi(CCR1, vtable_index, 0);\n-        __ bge(CCR1, L_index_ok);\n+        __ cmpdi(CR1, vtable_index, 0);\n+        __ bge(CR1, L_index_ok);\n","filename":"src\/hotspot\/cpu\/ppc\/methodHandles_ppc.cpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-\/\/ Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ Copyright (c) 2012, 2024 SAP SE. All rights reserved.\n+\/\/ Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -239,8 +239,8 @@\n-  reg_def CCR0(SOC, SOC, Op_RegFlags, 0, CCR0->as_VMReg());  \/\/ v\n-  reg_def CCR1(SOC, SOC, Op_RegFlags, 1, CCR1->as_VMReg());  \/\/ v\n-  reg_def CCR2(SOC, SOC, Op_RegFlags, 2, CCR2->as_VMReg());  \/\/ nv\n-  reg_def CCR3(SOC, SOC, Op_RegFlags, 3, CCR3->as_VMReg());  \/\/ nv\n-  reg_def CCR4(SOC, SOC, Op_RegFlags, 4, CCR4->as_VMReg());  \/\/ nv\n-  reg_def CCR5(SOC, SOC, Op_RegFlags, 5, CCR5->as_VMReg());  \/\/ v\n-  reg_def CCR6(SOC, SOC, Op_RegFlags, 6, CCR6->as_VMReg());  \/\/ v\n-  reg_def CCR7(SOC, SOC, Op_RegFlags, 7, CCR7->as_VMReg());  \/\/ v\n+  reg_def CR0(SOC, SOC, Op_RegFlags, 0, CR0->as_VMReg());  \/\/ v\n+  reg_def CR1(SOC, SOC, Op_RegFlags, 1, CR1->as_VMReg());  \/\/ v\n+  reg_def CR2(SOC, SOC, Op_RegFlags, 2, CR2->as_VMReg());  \/\/ nv\n+  reg_def CR3(SOC, SOC, Op_RegFlags, 3, CR3->as_VMReg());  \/\/ nv\n+  reg_def CR4(SOC, SOC, Op_RegFlags, 4, CR4->as_VMReg());  \/\/ nv\n+  reg_def CR5(SOC, SOC, Op_RegFlags, 5, CR5->as_VMReg());  \/\/ v\n+  reg_def CR6(SOC, SOC, Op_RegFlags, 6, CR6->as_VMReg());  \/\/ v\n+  reg_def CR7(SOC, SOC, Op_RegFlags, 7, CR7->as_VMReg());  \/\/ v\n@@ -446,8 +446,8 @@\n-  CCR0,\n-  CCR1,\n-  CCR2,\n-  CCR3,\n-  CCR4,\n-  CCR5,\n-  CCR6,\n-  CCR7\n+  CR0,\n+  CR1,\n+  CR2,\n+  CR3,\n+  CR4,\n+  CR5,\n+  CR6,\n+  CR7\n@@ -806,8 +806,8 @@\n-\/*CCR0*\/             \/\/ scratch\n-\/*CCR1*\/             \/\/ scratch\n-\/*CCR2*\/             \/\/ nv!\n-\/*CCR3*\/             \/\/ nv!\n-\/*CCR4*\/             \/\/ nv!\n-  CCR5,\n-  CCR6,\n-  CCR7\n+\/*CR0*\/             \/\/ scratch\n+\/*CR1*\/             \/\/ scratch\n+\/*CR2*\/             \/\/ nv!\n+\/*CR3*\/             \/\/ nv!\n+\/*CR4*\/             \/\/ nv!\n+  CR5,\n+  CR6,\n+  CR7\n@@ -817,8 +817,8 @@\n-  CCR0,\n-  CCR1,\n-  CCR2,\n-  CCR3,\n-  CCR4,\n-  CCR5,\n-  CCR6,\n-  CCR7\n+  CR0,\n+  CR1,\n+  CR2,\n+  CR3,\n+  CR4,\n+  CR5,\n+  CR6,\n+  CR7\n@@ -827,3 +827,3 @@\n-reg_class int_flags_CR0(CCR0);\n-reg_class int_flags_CR1(CCR1);\n-reg_class int_flags_CR6(CCR6);\n+reg_class int_flags_CR0(CR0);\n+reg_class int_flags_CR1(CR1);\n+reg_class int_flags_CR6(CR6);\n@@ -5571,2 +5571,2 @@\n-    __ fcmpu(CCR0, $dst$$FloatRegister, $dst$$FloatRegister);\n-    __ bne(CCR0, next);\n+    __ fcmpu(CR0, $dst$$FloatRegister, $dst$$FloatRegister);\n+    __ bne(CR0, next);\n@@ -5607,2 +5607,2 @@\n-    __ fcmpu(CCR0, $dst$$FloatRegister, $dst$$FloatRegister);\n-    __ bne(CCR0, next);\n+    __ fcmpu(CR0, $dst$$FloatRegister, $dst$$FloatRegister);\n+    __ bne(CR0, next);\n@@ -7397,2 +7397,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgb(CCR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register, noreg, noreg,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgb(CR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register, noreg, noreg,\n@@ -7416,2 +7416,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgb(CCR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register, $tmp1$$Register, $tmp2$$Register,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgb(CR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register, $tmp1$$Register, $tmp2$$Register,\n@@ -7435,2 +7435,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgh(CCR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register, noreg, noreg,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgh(CR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register, noreg, noreg,\n@@ -7454,2 +7454,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgh(CCR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register, $tmp1$$Register, $tmp2$$Register,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgh(CR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register, $tmp1$$Register, $tmp2$$Register,\n@@ -7472,2 +7472,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgw(CCR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgw(CR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n@@ -7491,2 +7491,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgw(CCR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgw(CR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n@@ -7509,2 +7509,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgd(CCR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgd(CR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n@@ -7528,2 +7528,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgd(CCR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgd(CR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n@@ -7549,2 +7549,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgb(CCR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register, noreg, noreg,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgb(CR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register, noreg, noreg,\n@@ -7563,2 +7563,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgb(CCR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register, $tmp1$$Register, $tmp2$$Register,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgb(CR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register, $tmp1$$Register, $tmp2$$Register,\n@@ -7577,2 +7577,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgb(CCR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register, noreg, noreg,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgb(CR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register, noreg, noreg,\n@@ -7591,2 +7591,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgb(CCR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register, $tmp1$$Register, $tmp2$$Register,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgb(CR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register, $tmp1$$Register, $tmp2$$Register,\n@@ -7605,2 +7605,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgh(CCR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register, noreg, noreg,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgh(CR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register, noreg, noreg,\n@@ -7619,2 +7619,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgh(CCR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register, $tmp1$$Register, $tmp2$$Register,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgh(CR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register, $tmp1$$Register, $tmp2$$Register,\n@@ -7633,2 +7633,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgh(CCR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register, noreg, noreg,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgh(CR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register, noreg, noreg,\n@@ -7647,2 +7647,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgh(CCR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register, $tmp1$$Register, $tmp2$$Register,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgh(CR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register, $tmp1$$Register, $tmp2$$Register,\n@@ -7661,2 +7661,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgw(CCR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgw(CR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n@@ -7675,1 +7675,1 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n@@ -7678,1 +7678,1 @@\n-    __ cmpxchgw(CCR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n+    __ cmpxchgw(CR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n@@ -7691,2 +7691,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgw(CCR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgw(CR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n@@ -7705,1 +7705,1 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n@@ -7708,1 +7708,1 @@\n-    __ cmpxchgw(CCR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n+    __ cmpxchgw(CR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n@@ -7721,1 +7721,1 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n@@ -7723,1 +7723,1 @@\n-    __ cmpxchgd(CCR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n+    __ cmpxchgd(CR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n@@ -7736,1 +7736,1 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n@@ -7739,1 +7739,1 @@\n-    __ cmpxchgd(CCR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n+    __ cmpxchgd(CR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n@@ -7752,2 +7752,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgd(CCR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgd(CR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n@@ -7766,1 +7766,1 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n@@ -7769,1 +7769,1 @@\n-    __ cmpxchgd(CCR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n+    __ cmpxchgd(CR0, R0, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n@@ -7784,2 +7784,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgb(CCR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register, noreg, noreg,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgb(CR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register, noreg, noreg,\n@@ -7798,2 +7798,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgb(CCR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register, $tmp1$$Register, R0,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgb(CR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register, $tmp1$$Register, R0,\n@@ -7812,2 +7812,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgb(CCR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register, noreg, noreg,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgb(CR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register, noreg, noreg,\n@@ -7832,2 +7832,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgb(CCR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register, $tmp1$$Register, R0,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgb(CR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register, $tmp1$$Register, R0,\n@@ -7852,2 +7852,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgh(CCR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register, noreg, noreg,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgh(CR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register, noreg, noreg,\n@@ -7866,2 +7866,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgh(CCR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register, $tmp1$$Register, R0,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgh(CR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register, $tmp1$$Register, R0,\n@@ -7880,2 +7880,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgh(CCR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register, noreg, noreg,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgh(CR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register, noreg, noreg,\n@@ -7900,2 +7900,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgh(CCR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register, $tmp1$$Register, R0,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgh(CR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register, $tmp1$$Register, R0,\n@@ -7920,2 +7920,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgw(CCR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgw(CR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n@@ -7934,2 +7934,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgw(CCR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgw(CR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n@@ -7954,2 +7954,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgw(CCR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgw(CR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n@@ -7968,2 +7968,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgw(CCR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgw(CR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n@@ -7988,2 +7988,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgd(CCR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgd(CR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n@@ -8002,2 +8002,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgd(CCR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgd(CR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n@@ -8023,2 +8023,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgd(CCR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgd(CR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n@@ -8038,2 +8038,2 @@\n-    \/\/ CmpxchgX sets CCR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n-    __ cmpxchgd(CCR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n+    \/\/ CmpxchgX sets CR0 to cmpX(src1, src2) and Rres to 'true'\/'false'.\n+    __ cmpxchgd(CR0, $res$$Register, $src1$$Register, $src2$$Register, $mem_ptr$$Register,\n@@ -11392,1 +11392,1 @@\n-    __ cmpd(CCR0, $src1$$Register, $src2$$Register);\n+    __ cmpd(CR0, $src1$$Register, $src2$$Register);\n@@ -11664,1 +11664,1 @@\n-  \/\/    cmpFUrd CCR6, F11, F9\n+  \/\/    cmpFUrd CR6, F11, F9\n@@ -11666,1 +11666,1 @@\n-  \/\/    cmov CCR6\n+  \/\/    cmov CR6\n@@ -11668,1 +11668,1 @@\n-  \/\/    B_FARle CCR6, B56  P=0.500000 C=-1.000000\n+  \/\/    B_FARle CR6, B56  P=0.500000 C=-1.000000\n@@ -11727,1 +11727,1 @@\n-    __ fcmpu(CCR0, $src1$$FloatRegister, $src2$$FloatRegister);\n+    __ fcmpu(CR0, $src1$$FloatRegister, $src2$$FloatRegister);\n@@ -11811,1 +11811,1 @@\n-    __ fcmpu(CCR0, $src1$$FloatRegister, $src2$$FloatRegister);\n+    __ fcmpu(CR0, $src1$$FloatRegister, $src2$$FloatRegister);\n@@ -12773,1 +12773,1 @@\n-    __ beq(CCR0, Ldone);\n+    __ beq(CR0, Ldone);\n@@ -12857,2 +12857,2 @@\n-    __ cmpw(CCR0, $src1$$Register, $src2$$Register);\n-    __ isel($dst$$Register, CCR0, Assembler::less, \/*invert*\/false, $src1$$Register, $src2$$Register);\n+    __ cmpw(CR0, $src1$$Register, $src2$$Register);\n+    __ isel($dst$$Register, CR0, Assembler::less, \/*invert*\/false, $src1$$Register, $src2$$Register);\n@@ -12890,2 +12890,2 @@\n-    __ cmpw(CCR0, $src1$$Register, $src2$$Register);\n-    __ isel($dst$$Register, CCR0, Assembler::greater, \/*invert*\/false, $src1$$Register, $src2$$Register);\n+    __ cmpw(CR0, $src1$$Register, $src2$$Register);\n+    __ isel($dst$$Register, CR0, Assembler::greater, \/*invert*\/false, $src1$$Register, $src2$$Register);\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":132,"deletions":132,"binary":false,"changes":264,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2023 SAP SE. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -182,8 +182,8 @@\n-constexpr ConditionRegister CCR0 = as_ConditionRegister(0);\n-constexpr ConditionRegister CCR1 = as_ConditionRegister(1);\n-constexpr ConditionRegister CCR2 = as_ConditionRegister(2);\n-constexpr ConditionRegister CCR3 = as_ConditionRegister(3);\n-constexpr ConditionRegister CCR4 = as_ConditionRegister(4);\n-constexpr ConditionRegister CCR5 = as_ConditionRegister(5);\n-constexpr ConditionRegister CCR6 = as_ConditionRegister(6);\n-constexpr ConditionRegister CCR7 = as_ConditionRegister(7);\n+constexpr ConditionRegister CR0 = as_ConditionRegister(0);\n+constexpr ConditionRegister CR1 = as_ConditionRegister(1);\n+constexpr ConditionRegister CR2 = as_ConditionRegister(2);\n+constexpr ConditionRegister CR3 = as_ConditionRegister(3);\n+constexpr ConditionRegister CR4 = as_ConditionRegister(4);\n+constexpr ConditionRegister CR5 = as_ConditionRegister(5);\n+constexpr ConditionRegister CR6 = as_ConditionRegister(6);\n+constexpr ConditionRegister CR7 = as_ConditionRegister(7);\n","filename":"src\/hotspot\/cpu\/ppc\/register_ppc.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2023 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -104,1 +104,1 @@\n-  __ cmpdi(CCR0, R3_RET, 0);\n+  __ cmpdi(CR0, R3_RET, 0);\n","filename":"src\/hotspot\/cpu\/ppc\/runtime_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2024 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -911,1 +911,1 @@\n-  __ cmpdi(CCR0, code, 0);\n+  __ cmpdi(CR0, code, 0);\n@@ -913,1 +913,1 @@\n-  __ beq(CCR0, call_interpreter);\n+  __ beq(CR0, call_interpreter);\n@@ -1187,1 +1187,1 @@\n-  __ cmpdi(CCR0, code, 0);\n+  __ cmpdi(CR0, code, 0);\n@@ -1189,1 +1189,1 @@\n-  __ beq_predict_taken(CCR0, call_interpreter);\n+  __ beq_predict_taken(CR0, call_interpreter);\n@@ -1206,1 +1206,1 @@\n-      __ beq(CCR0, L_skip_barrier); \/\/ non-static\n+      __ beq(CR0, L_skip_barrier); \/\/ non-static\n@@ -1254,2 +1254,2 @@\n-    __ cmpdi(CCR0, r_temp_2, 0);\n-    __ bne(CCR0, skip);\n+    __ cmpdi(CR0, r_temp_2, 0);\n+    __ bne(CR0, skip);\n@@ -1284,2 +1284,2 @@\n-    __ cmpdi(CCR0, r_oop, 0);\n-    __ bne(CCR0, skip);\n+    __ cmpdi(CR0, r_oop, 0);\n+    __ bne(CR0, skip);\n@@ -1645,1 +1645,1 @@\n-  __ cmpd(CCR0, R1_SP, tmp1);\n+  __ cmpd(CR0, R1_SP, tmp1);\n@@ -1656,2 +1656,2 @@\n-    __ cmpwi(CCR0, R0, 0);\n-    __ beq(CCR0, L_skip_vthread_code);\n+    __ cmpwi(CR0, R0, 0);\n+    __ beq(CR0, L_skip_vthread_code);\n@@ -1663,2 +1663,2 @@\n-    __ cmpdi(CCR0, R0, 0);\n-    __ beq(CCR0, L_skip_vthread_code);\n+    __ cmpdi(CR0, R0, 0);\n+    __ beq(CR0, L_skip_vthread_code);\n@@ -1686,2 +1686,2 @@\n-    __ cmpwi(CCR0, R0, 0);\n-    __ beq(CCR0, L_skip_vthread_code);\n+    __ cmpwi(CR0, R0, 0);\n+    __ beq(CR0, L_skip_vthread_code);\n@@ -1752,2 +1752,2 @@\n-    __ cmpwi(CCR0, R0, 0);\n-    __ bne(CCR0, is_interp_only);\n+    __ cmpwi(CR0, R0, 0);\n+    __ bne(CR0, is_interp_only);\n@@ -1773,2 +1773,2 @@\n-    __ cmpwi(CCR0, reg_is_cont, 0);\n-    __ bne(CCR0, L_thaw);\n+    __ cmpwi(CR0, reg_is_cont, 0);\n+    __ bne(CR0, L_thaw);\n@@ -1821,2 +1821,2 @@\n-  __ cmpwi(CCR0, reg_is_cont, 0);\n-  __ bne(CCR0, L_thaw);\n+  __ cmpwi(CR0, reg_is_cont, 0);\n+  __ bne(CR0, L_thaw);\n@@ -1872,1 +1872,1 @@\n-  DEBUG_ONLY(__ cmpd(CCR0, R0, R1_SP));\n+  DEBUG_ONLY(__ cmpd(CR0, R0, R1_SP));\n@@ -1940,2 +1940,2 @@\n-  __ cmpwi(CCR0, R3_RET, 0);\n-  __ bne(CCR0, L_pinned);\n+  __ cmpwi(CR0, R3_RET, 0);\n+  __ bne(CR0, L_pinned);\n@@ -1964,2 +1964,2 @@\n-  __ cmpdi(CCR0, tmp, 0);\n-  __ beq(CCR0, L_return); \/\/ return if no exception is pending\n+  __ cmpdi(CR0, tmp, 0);\n+  __ beq(CR0, L_return); \/\/ return if no exception is pending\n@@ -2401,1 +2401,1 @@\n-      __ compiler_fast_lock_lightweight_object(CCR0, r_oop, r_box, r_temp_1, r_temp_2, r_temp_3_or_noreg);\n+      __ compiler_fast_lock_lightweight_object(CR0, r_oop, r_box, r_temp_1, r_temp_2, r_temp_3_or_noreg);\n@@ -2404,1 +2404,1 @@\n-      __ compiler_fast_lock_object(CCR0, r_oop, r_box, r_temp_1, r_temp_2, r_temp_3);\n+      __ compiler_fast_lock_object(CR0, r_oop, r_box, r_temp_1, r_temp_2, r_temp_3);\n@@ -2406,1 +2406,1 @@\n-    __ beq(CCR0, locked);\n+    __ beq(CR0, locked);\n@@ -2541,2 +2541,2 @@\n-    __ cmpwi(CCR1, suspend_flags, 0);\n-    __ beq(CCR1, no_block);\n+    __ cmpwi(CR1, suspend_flags, 0);\n+    __ beq(CR1, no_block);\n@@ -2575,2 +2575,2 @@\n-      __ cmpdi(CCR0, R0, 0);\n-      __ beq(CCR0, not_preempted);\n+      __ cmpdi(CR0, R0, 0);\n+      __ beq(CR0, not_preempted);\n@@ -2594,2 +2594,2 @@\n-  __ cmpwi(CCR0, r_temp_1, StackOverflow::stack_guard_yellow_reserved_disabled);\n-  __ bne(CCR0, no_reguard);\n+  __ cmpwi(CR0, r_temp_1, StackOverflow::stack_guard_yellow_reserved_disabled);\n+  __ bne(CR0, no_reguard);\n@@ -2625,1 +2625,1 @@\n-      __ compiler_fast_unlock_lightweight_object(CCR0, r_oop, r_box, r_temp_1, r_temp_2, r_temp_3);\n+      __ compiler_fast_unlock_lightweight_object(CR0, r_oop, r_box, r_temp_1, r_temp_2, r_temp_3);\n@@ -2627,1 +2627,1 @@\n-      __ compiler_fast_unlock_object(CCR0, r_oop, r_box, r_temp_1, r_temp_2, r_temp_3);\n+      __ compiler_fast_unlock_object(CR0, r_oop, r_box, r_temp_1, r_temp_2, r_temp_3);\n@@ -2629,1 +2629,1 @@\n-    __ beq(CCR0, done);\n+    __ beq(CR0, done);\n@@ -2696,2 +2696,2 @@\n-  __ cmpdi(CCR0, r_temp_2, 0);\n-  __ bne(CCR0, handle_pending_exception);\n+  __ cmpdi(CR0, r_temp_2, 0);\n+  __ bne(CR0, handle_pending_exception);\n@@ -2854,1 +2854,1 @@\n-  __ cmpdi(CCR0, number_of_frames_reg, 0);\n+  __ cmpdi(CR0, number_of_frames_reg, 0);\n@@ -2869,2 +2869,2 @@\n-  __ cmpdi(CCR0, number_of_frames_reg, 0);\n-  __ bne(CCR0, loop);\n+  __ cmpdi(CR0, number_of_frames_reg, 0);\n+  __ bne(CR0, loop);\n@@ -3017,2 +3017,2 @@\n-  __ cmpdi(CCR0, exec_mode_reg, Deoptimization::Unpack_exception);\n-  __ bne(CCR0, skip_restore_excp);\n+  __ cmpdi(CR0, exec_mode_reg, Deoptimization::Unpack_exception);\n+  __ bne(CR0, skip_restore_excp);\n@@ -3168,1 +3168,1 @@\n-  __ cmpdi(CCR0, R22_tmp2, (unsigned)Deoptimization::Unpack_uncommon_trap);\n+  __ cmpdi(CR0, R22_tmp2, (unsigned)Deoptimization::Unpack_uncommon_trap);\n@@ -3298,2 +3298,2 @@\n-  __ cmpdi(CCR0, pending_exception, 0);\n-  __ beq(CCR0, noException);\n+  __ cmpdi(CR0, pending_exception, 0);\n+  __ beq(CR0, noException);\n@@ -3318,2 +3318,2 @@\n-    __ cmpd(CCR0, R0, R31);\n-    __ bne(CCR0, no_adjust);\n+    __ cmpd(CR0, R0, R31);\n+    __ bne(CR0, no_adjust);\n@@ -3398,2 +3398,2 @@\n-  __ cmpdi(CCR0, R11_scratch1, 0);\n-  __ bne(CCR0, pending);\n+  __ cmpdi(CR0, R11_scratch1, 0);\n+  __ bne(CR0, pending);\n@@ -3502,2 +3502,2 @@\n-    __ cmpdi(CCR0, R0, 0);\n-    __ bne(CCR0, L);\n+    __ cmpdi(CR0, R0, 0);\n+    __ bne(CR0, L);\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":56,"deletions":56,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2024 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -197,2 +197,2 @@\n-      __ cmpdi(CCR0, r_arg_argument_count, 0);\n-      __ beq(CCR0, arguments_copied);\n+      __ cmpdi(CR0, r_arg_argument_count, 0);\n+      __ beq(CR0, arguments_copied);\n@@ -337,4 +337,4 @@\n-      __ cmpwi(CCR0, r_arg_result_type, T_OBJECT);\n-      __ cmpwi(CCR1, r_arg_result_type, T_LONG);\n-      __ cmpwi(CCR5, r_arg_result_type, T_FLOAT);\n-      __ cmpwi(CCR6, r_arg_result_type, T_DOUBLE);\n+      __ cmpwi(CR0, r_arg_result_type, T_OBJECT);\n+      __ cmpwi(CR1, r_arg_result_type, T_LONG);\n+      __ cmpwi(CR5, r_arg_result_type, T_FLOAT);\n+      __ cmpwi(CR6, r_arg_result_type, T_DOUBLE);\n@@ -356,4 +356,4 @@\n-      __ beq(CCR0, ret_is_object);\n-      __ beq(CCR1, ret_is_long);\n-      __ beq(CCR5, ret_is_float);\n-      __ beq(CCR6, ret_is_double);\n+      __ beq(CR0, ret_is_object);\n+      __ beq(CR1, ret_is_long);\n+      __ beq(CR5, ret_is_float);\n+      __ beq(CR6, ret_is_double);\n@@ -461,2 +461,2 @@\n-        __ cmpdi(CCR0, R3_ARG1, 0);\n-        __ bne(CCR0, L);\n+        __ cmpdi(CR0, R3_ARG1, 0);\n+        __ bne(CR0, L);\n@@ -499,2 +499,2 @@\n-      __ cmpdi(CCR0, R3_ARG1, 0);\n-      __ bne(CCR0, L);\n+      __ cmpdi(CR0, R3_ARG1, 0);\n+      __ bne(CR0, L);\n@@ -554,2 +554,2 @@\n-    __ cmpdi(CCR1, tmp2_reg, 0);                \/\/ cnt_dwords even?\n-    __ beq(CCR0, lastdword);                    \/\/ size <= 1\n+    __ cmpdi(CR1, tmp2_reg, 0);                \/\/ cnt_dwords even?\n+    __ beq(CR0, lastdword);                    \/\/ size <= 1\n@@ -557,1 +557,1 @@\n-    __ cmpdi(CCR0, cnt_dwords_reg, (min_dcbz+1)*cl_dwords-1); \/\/ Big enough to ensure >=min_dcbz cache lines are included?\n+    __ cmpdi(CR0, cnt_dwords_reg, (min_dcbz+1)*cl_dwords-1); \/\/ Big enough to ensure >=min_dcbz cache lines are included?\n@@ -560,1 +560,1 @@\n-    __ blt(CCR0, restloop);                     \/\/ Too small. (<31=(2*cl_dwords)-1 is sufficient, but bigger performs better.)\n+    __ blt(CR0, restloop);                     \/\/ Too small. (<31=(2*cl_dwords)-1 is sufficient, but bigger performs better.)\n@@ -563,1 +563,1 @@\n-    __ beq(CCR0, fast);                         \/\/ already 128byte aligned\n+    __ beq(CR0, fast);                         \/\/ already 128byte aligned\n@@ -579,1 +579,1 @@\n-    __ cmpdi(CCR1, tmp2_reg, 0);                \/\/ rest even?\n+    __ cmpdi(CR1, tmp2_reg, 0);                \/\/ rest even?\n@@ -588,1 +588,1 @@\n-    __ beq(CCR0, lastdword);                    \/\/ rest<=1\n+    __ beq(CR0, lastdword);                    \/\/ rest<=1\n@@ -599,1 +599,1 @@\n-    __ beq(CCR1, done);\n+    __ beq(CR1, done);\n@@ -670,2 +670,2 @@\n-        __ cmpdi(CCR0, count, 2<<shift);    \/\/ Short arrays (< 8 bytes) fill by element.\n-        __ blt(CCR0, L_fill_elements);\n+        __ cmpdi(CR0, count, 2<<shift);    \/\/ Short arrays (< 8 bytes) fill by element.\n+        __ blt(CR0, L_fill_elements);\n@@ -678,2 +678,2 @@\n-        __ cmpdi(CCR0, count, 2<<shift);    \/\/ Short arrays (< 8 bytes) fill by element.\n-        __ blt(CCR0, L_fill_elements);\n+        __ cmpdi(CR0, count, 2<<shift);    \/\/ Short arrays (< 8 bytes) fill by element.\n+        __ blt(CR0, L_fill_elements);\n@@ -683,2 +683,2 @@\n-        __ cmpdi(CCR0, count, 2<<shift);    \/\/ Short arrays (< 8 bytes) fill by element.\n-        __ blt(CCR0, L_fill_4_bytes);\n+        __ cmpdi(CR0, count, 2<<shift);    \/\/ Short arrays (< 8 bytes) fill by element.\n+        __ blt(CR0, L_fill_4_bytes);\n@@ -694,1 +694,1 @@\n-        __ beq(CCR0, L_skip_align1);\n+        __ beq(CR0, L_skip_align1);\n@@ -702,1 +702,1 @@\n-      __ beq(CCR0, L_skip_align2);\n+      __ beq(CR0, L_skip_align2);\n@@ -712,1 +712,1 @@\n-      __ beq(CCR0, L_fill_32_bytes);\n+      __ beq(CR0, L_fill_32_bytes);\n@@ -726,1 +726,1 @@\n-    __ blt(CCR0, L_check_fill_8_bytes);\n+    __ blt(CR0, L_check_fill_8_bytes);\n@@ -739,1 +739,1 @@\n-    __ bge(CCR0, L_fill_32_bytes_loop);\n+    __ bge(CR0, L_fill_32_bytes_loop);\n@@ -743,1 +743,1 @@\n-    __ beq(CCR0, L_exit);\n+    __ beq(CR0, L_exit);\n@@ -745,1 +745,1 @@\n-    __ blt(CCR0, L_fill_4_bytes);\n+    __ blt(CR0, L_fill_4_bytes);\n@@ -755,1 +755,1 @@\n-    __ bge(CCR0, L_fill_8_bytes_loop);\n+    __ bge(CR0, L_fill_8_bytes_loop);\n@@ -760,1 +760,1 @@\n-    __ beq(CCR0, L_fill_2_bytes);\n+    __ beq(CR0, L_fill_2_bytes);\n@@ -768,1 +768,1 @@\n-      __ beq(CCR0, L_fill_byte);\n+      __ beq(CR0, L_fill_byte);\n@@ -775,1 +775,1 @@\n-        __ beq(CCR0, L_exit);\n+        __ beq(CR0, L_exit);\n@@ -791,1 +791,1 @@\n-      __ beq(CCR0, L_fill_2);\n+      __ beq(CR0, L_fill_2);\n@@ -796,1 +796,1 @@\n-      __ beq(CCR0, L_fill_4);\n+      __ beq(CR0, L_fill_4);\n@@ -802,1 +802,1 @@\n-      __ beq(CCR0, L_exit);\n+      __ beq(CR0, L_exit);\n@@ -814,1 +814,1 @@\n-      __ beq(CCR0, L_fill_2);\n+      __ beq(CR0, L_fill_2);\n@@ -819,1 +819,1 @@\n-      __ beq(CCR0, L_exit);\n+      __ beq(CR0, L_exit);\n@@ -849,3 +849,3 @@\n-    __ cmpld(CCR0, R3_ARG1, R4_ARG2); \/\/ Use unsigned comparison!\n-    __ cmpld(CCR1, tmp1, tmp2);\n-    __ crnand(CCR0, Assembler::less, CCR1, Assembler::less);\n+    __ cmpld(CR0, R3_ARG1, R4_ARG2); \/\/ Use unsigned comparison!\n+    __ cmpld(CR1, tmp1, tmp2);\n+    __ crnand(CR0, Assembler::less, CR1, Assembler::less);\n@@ -854,1 +854,1 @@\n-    __ bc(Assembler::bcondCRbiIs1, Assembler::bi0(CCR0, Assembler::less), no_overlap_target);\n+    __ bc(Assembler::bcondCRbiIs1, Assembler::bi0(CR0, Assembler::less), no_overlap_target);\n@@ -916,2 +916,2 @@\n-      __ cmpwi(CCR0, R5_ARG3, 17);\n-      __ ble(CCR0, l_6); \/\/ copy 4 at a time\n+      __ cmpwi(CR0, R5_ARG3, 17);\n+      __ ble(CR0, l_6); \/\/ copy 4 at a time\n@@ -922,1 +922,1 @@\n-        __ bne(CCR0, l_6); \/\/ If arrays don't have the same alignment mod 4, do 4 element copy.\n+        __ bne(CR0, l_6); \/\/ If arrays don't have the same alignment mod 4, do 4 element copy.\n@@ -927,1 +927,1 @@\n-        __ beq(CCR0, l_2);\n+        __ beq(CR0, l_2);\n@@ -936,1 +936,1 @@\n-        __ bne(CCR0, l_9);\n+        __ bne(CR0, l_9);\n@@ -944,1 +944,1 @@\n-      __ bne(CCR0, l_7); \/\/ not same alignment -> to or from is aligned -> copy 8\n+      __ bne(CR0, l_7); \/\/ not same alignment -> to or from is aligned -> copy 8\n@@ -948,1 +948,1 @@\n-      __ beq(CCR0, l_7);\n+      __ beq(CR0, l_7);\n@@ -960,2 +960,2 @@\n-        __ cmpwi(CCR0, R5_ARG3, 31);\n-        __ ble(CCR0, l_6); \/\/ copy 2 at a time if less than 32 elements remain\n+        __ cmpwi(CR0, R5_ARG3, 31);\n+        __ ble(CR0, l_6); \/\/ copy 2 at a time if less than 32 elements remain\n@@ -1026,2 +1026,2 @@\n-      __ cmpwi(CCR0, R5_ARG3, 4);\n-      __ blt(CCR0, l_1);\n+      __ cmpwi(CR0, R5_ARG3, 4);\n+      __ blt(CR0, l_1);\n@@ -1045,2 +1045,2 @@\n-      __ cmpwi(CCR0, R5_ARG3, 0);\n-      __ beq(CCR0, l_4);\n+      __ cmpwi(CR0, R5_ARG3, 0);\n+      __ beq(CR0, l_4);\n@@ -1101,1 +1101,1 @@\n-      __ bge(CCR0, l_1);\n+      __ bge(CR0, l_1);\n@@ -1184,2 +1184,2 @@\n-      __ cmpwi(CCR0, R5_ARG3, 9);\n-      __ ble(CCR0, l_6); \/\/ copy 2 at a time\n+      __ cmpwi(CR0, R5_ARG3, 9);\n+      __ ble(CR0, l_6); \/\/ copy 2 at a time\n@@ -1190,1 +1190,1 @@\n-        __ bne(CCR0, l_6); \/\/ if arrays don't have the same alignment mod 4, do 2 element copy\n+        __ bne(CR0, l_6); \/\/ if arrays don't have the same alignment mod 4, do 2 element copy\n@@ -1196,1 +1196,1 @@\n-        __ beq(CCR0, l_2);\n+        __ beq(CR0, l_2);\n@@ -1211,1 +1211,1 @@\n-        __ bne(CCR0, l_7); \/\/ not same alignment mod 8 -> copy 4, either from or to will be unaligned\n+        __ bne(CR0, l_7); \/\/ not same alignment mod 8 -> copy 4, either from or to will be unaligned\n@@ -1215,1 +1215,1 @@\n-        __ beq(CCR0, l_7);\n+        __ beq(CR0, l_7);\n@@ -1232,2 +1232,2 @@\n-        __ cmpwi(CCR0, R5_ARG3, 15);\n-        __ ble(CCR0, l_6); \/\/ copy 2 at a time if less than 16 elements remain\n+        __ cmpwi(CR0, R5_ARG3, 15);\n+        __ ble(CR0, l_6); \/\/ copy 2 at a time if less than 16 elements remain\n@@ -1297,2 +1297,2 @@\n-        __ cmpwi(CCR0, R5_ARG3, 2);\n-        __ blt(CCR0, l_1);\n+        __ cmpwi(CR0, R5_ARG3, 2);\n+        __ blt(CR0, l_1);\n@@ -1317,2 +1317,2 @@\n-      __ cmpwi(CCR0, R5_ARG3, 0);\n-      __ beq(CCR0, l_4);\n+      __ cmpwi(CR0, R5_ARG3, 0);\n+      __ beq(CR0, l_4);\n@@ -1373,1 +1373,1 @@\n-      __ bge(CCR0, l_1);\n+      __ bge(CR0, l_1);\n@@ -1402,2 +1402,2 @@\n-    __ cmpwi(CCR0, R5_ARG3, 5);\n-    __ ble(CCR0, l_2);\n+    __ cmpwi(CR0, R5_ARG3, 5);\n+    __ ble(CR0, l_2);\n@@ -1410,1 +1410,1 @@\n-        __ bne(CCR0, l_4); \/\/ to OR from is 8 byte aligned -> copy 2 at a time\n+        __ bne(CR0, l_4); \/\/ to OR from is 8 byte aligned -> copy 2 at a time\n@@ -1414,1 +1414,1 @@\n-        __ beq(CCR0, l_4);\n+        __ beq(CR0, l_4);\n@@ -1427,2 +1427,2 @@\n-      __ cmpwi(CCR0, R5_ARG3, 7);\n-      __ ble(CCR0, l_2); \/\/ copy 1 at a time if less than 8 elements remain\n+      __ cmpwi(CR0, R5_ARG3, 7);\n+      __ ble(CR0, l_2); \/\/ copy 1 at a time if less than 8 elements remain\n@@ -1492,2 +1492,2 @@\n-    __ cmpwi(CCR0, R5_ARG3, 0);\n-    __ beq(CCR0, l_1);\n+    __ cmpwi(CR0, R5_ARG3, 0);\n+    __ beq(CR0, l_1);\n@@ -1556,2 +1556,2 @@\n-      __ cmpwi(CCR0, R5_ARG3, 0);\n-      __ beq(CCR0, l_6);\n+      __ cmpwi(CR0, R5_ARG3, 0);\n+      __ beq(CR0, l_6);\n@@ -1569,1 +1569,1 @@\n-        __ bne(CCR0, l_7); \/\/ to OR from is 8 byte aligned -> copy 2 at a time\n+        __ bne(CR0, l_7); \/\/ to OR from is 8 byte aligned -> copy 2 at a time\n@@ -1573,1 +1573,1 @@\n-        __ beq(CCR0, l_7);\n+        __ beq(CR0, l_7);\n@@ -1583,2 +1583,2 @@\n-      __ cmpwi(CCR0, R5_ARG3, 7);\n-      __ ble(CCR0, l_5); \/\/ copy 1 at a time if less than 8 elements remain\n+      __ cmpwi(CR0, R5_ARG3, 7);\n+      __ ble(CR0, l_5); \/\/ copy 1 at a time if less than 8 elements remain\n@@ -1641,2 +1641,2 @@\n-      __ cmpwi(CCR0, R5_ARG3, 0);\n-      __ beq(CCR0, l_6);\n+      __ cmpwi(CR0, R5_ARG3, 0);\n+      __ beq(CR0, l_6);\n@@ -1707,2 +1707,2 @@\n-      __ cmpwi(CCR0, R5_ARG3, 3);\n-      __ ble(CCR0, l_3); \/\/ copy 1 at a time if less than 4 elements remain\n+      __ cmpwi(CR0, R5_ARG3, 3);\n+      __ ble(CR0, l_3); \/\/ copy 1 at a time if less than 4 elements remain\n@@ -1771,2 +1771,2 @@\n-    __ cmpwi(CCR0, R5_ARG3, 0);\n-    __ beq(CCR0, l_1);\n+    __ cmpwi(CR0, R5_ARG3, 0);\n+    __ beq(CR0, l_1);\n@@ -1831,2 +1831,2 @@\n-    __ cmpwi(CCR0, R5_ARG3, 0);\n-    __ beq(CCR0, l_1);\n+    __ cmpwi(CR0, R5_ARG3, 0);\n+    __ beq(CR0, l_1);\n@@ -1840,2 +1840,2 @@\n-      __ cmpwi(CCR0, R5_ARG3, 3);\n-      __ ble(CCR0, l_5); \/\/ copy 1 at a time if less than 4 elements remain\n+      __ cmpwi(CR0, R5_ARG3, 3);\n+      __ ble(CR0, l_5); \/\/ copy 1 at a time if less than 4 elements remain\n@@ -1898,2 +1898,2 @@\n-      __ cmpwi(CCR0, R5_ARG3, 0);\n-      __ beq(CCR0, l_1);\n+      __ cmpwi(CR0, R5_ARG3, 0);\n+      __ beq(CR0, l_1);\n@@ -2096,3 +2096,3 @@\n-    __ cmpld(CCR0, R3_ARG1, R4_ARG2); \/\/ Use unsigned comparison!\n-    __ cmpld(CCR1, tmp1, tmp2);\n-    __ crnand(CCR0, Assembler::less, CCR1, Assembler::less);\n+    __ cmpld(CR0, R3_ARG1, R4_ARG2); \/\/ Use unsigned comparison!\n+    __ cmpld(CR1, tmp1, tmp2);\n+    __ crnand(CR0, Assembler::less, CR1, Assembler::less);\n@@ -2101,1 +2101,1 @@\n-    __ blt(CCR0, no_overlap);\n+    __ blt(CR0, no_overlap);\n@@ -2120,1 +2120,1 @@\n-    __ bne(CCR0, load_element);\n+    __ bne(CR0, load_element);\n@@ -2148,1 +2148,1 @@\n-    __ beq(CCR0, success);\n+    __ beq(CR0, success);\n@@ -2178,1 +2178,1 @@\n-    __ bne(CCR0, do_epilogue);\n+    __ bne(CR0, do_epilogue);\n@@ -2229,1 +2229,1 @@\n-    __ beq(CCR0, long_copy);\n+    __ beq(CR0, long_copy);\n@@ -2232,1 +2232,1 @@\n-    __ beq(CCR0, int_copy);\n+    __ beq(CR0, int_copy);\n@@ -2235,1 +2235,1 @@\n-    __ beq(CCR0, short_copy);\n+    __ beq(CR0, short_copy);\n@@ -2274,2 +2274,2 @@\n-    __ cmpd(CCR0, end_pos, array_length);\n-    __ bgt(CCR0, L_failed);\n+    __ cmpd(CR0, end_pos, array_length);\n+    __ bgt(CR0, L_failed);\n@@ -2280,2 +2280,2 @@\n-    __ cmpd(CCR0, end_pos, array_length);\n-    __ bgt(CCR0, L_failed);\n+    __ cmpd(CR0, end_pos, array_length);\n+    __ bgt(CR0, L_failed);\n@@ -2347,1 +2347,1 @@\n-    __ cmpdi(CCR1, src, 0);      \/\/ if (src == nullptr) return -1;\n+    __ cmpdi(CR1, src, 0);      \/\/ if (src == nullptr) return -1;\n@@ -2349,2 +2349,2 @@\n-    __ cmpdi(CCR5, dst, 0);      \/\/ if (dst == nullptr) return -1;\n-    __ cror(CCR1, Assembler::equal, CCR0, Assembler::less);\n+    __ cmpdi(CR5, dst, 0);      \/\/ if (dst == nullptr) return -1;\n+    __ cror(CR1, Assembler::equal, CR0, Assembler::less);\n@@ -2352,1 +2352,1 @@\n-    __ cror(CCR5, Assembler::equal, CCR0, Assembler::less);\n+    __ cror(CR5, Assembler::equal, CR0, Assembler::less);\n@@ -2354,3 +2354,3 @@\n-    __ cror(CCR1, Assembler::equal, CCR5, Assembler::equal);\n-    __ cror(CCR1, Assembler::equal, CCR0, Assembler::less);\n-    __ beq(CCR1, L_failed);\n+    __ cror(CR1, Assembler::equal, CR5, Assembler::equal);\n+    __ cror(CR1, Assembler::equal, CR0, Assembler::less);\n+    __ beq(CR1, L_failed);\n@@ -2378,2 +2378,2 @@\n-    __ cmpw(CCR0, lh, temp);\n-    __ beq(CCR0, L_objArray);\n+    __ cmpw(CR0, lh, temp);\n+    __ beq(CR0, L_objArray);\n@@ -2381,2 +2381,2 @@\n-    __ cmpd(CCR5, src_klass, dst_klass);          \/\/ if (src->klass() != dst->klass()) return -1;\n-    __ cmpwi(CCR6, lh, Klass::_lh_neutral_value); \/\/ if (!src->is_Array()) return -1;\n+    __ cmpd(CR5, src_klass, dst_klass);          \/\/ if (src->klass() != dst->klass()) return -1;\n+    __ cmpwi(CR6, lh, Klass::_lh_neutral_value); \/\/ if (!src->is_Array()) return -1;\n@@ -2384,2 +2384,2 @@\n-    __ crnand(CCR5, Assembler::equal, CCR6, Assembler::less);\n-    __ beq(CCR5, L_failed);\n+    __ crnand(CR5, Assembler::equal, CR6, Assembler::less);\n+    __ beq(CR5, L_failed);\n@@ -2392,2 +2392,2 @@\n-      __ cmpw(CCR0, lh, temp);\n-      __ bge(CCR0, L);\n+      __ cmpw(CR0, lh, temp);\n+      __ bge(CR0, L);\n@@ -2433,2 +2433,2 @@\n-    const int bo = Assembler::bcondCRbiIs1, bi = Assembler::bi0(CCR0, Assembler::equal);\n-    __ cmpwi(CCR0, elsize, 0);\n+    const int bo = Assembler::bcondCRbiIs1, bi = Assembler::bi0(CR0, Assembler::equal);\n+    __ cmpwi(CR0, elsize, 0);\n@@ -2436,1 +2436,1 @@\n-    __ cmpwi(CCR0, elsize, LogBytesPerShort);\n+    __ cmpwi(CR0, elsize, LogBytesPerShort);\n@@ -2438,1 +2438,1 @@\n-    __ cmpwi(CCR0, elsize, LogBytesPerInt);\n+    __ cmpwi(CR0, elsize, LogBytesPerInt);\n@@ -2442,2 +2442,2 @@\n-      __ cmpwi(CCR0, elsize, LogBytesPerLong);\n-      __ beq(CCR0, L);\n+      __ cmpwi(CR0, elsize, LogBytesPerLong);\n+      __ beq(CR0, L);\n@@ -2456,2 +2456,2 @@\n-    __ cmpd(CCR0, src_klass, dst_klass);         \/\/ usual case is exact equality\n-    __ bne(CCR0, L_checkcast_copy);\n+    __ cmpd(CR0, src_klass, dst_klass);         \/\/ usual case is exact equality\n+    __ bne(CR0, L_checkcast_copy);\n@@ -2477,2 +2477,2 @@\n-      __ cmpw(CCR0, lh, temp);\n-      __ bne(CCR0, L_failed);\n+      __ cmpw(CR0, lh, temp);\n+      __ bne(CR0, L_failed);\n@@ -2655,2 +2655,2 @@\n-    __ cmpwi           (CCR0, keylen, 44);\n-    __ beq             (CCR0, L_doLast);\n+    __ cmpwi           (CR0, keylen, 44);\n+    __ beq             (CR0, L_doLast);\n@@ -2673,2 +2673,2 @@\n-    __ cmpwi           (CCR0, keylen, 52);\n-    __ beq             (CCR0, L_doLast);\n+    __ cmpwi           (CR0, keylen, 52);\n+    __ beq             (CR0, L_doLast);\n@@ -2677,2 +2677,2 @@\n-    __ cmpwi           (CCR0, keylen, 60);\n-    __ bne             (CCR0, L_error);\n+    __ cmpwi           (CR0, keylen, 60);\n+    __ bne             (CR0, L_error);\n@@ -2792,2 +2792,2 @@\n-    __ cmpwi           (CCR0, keylen, 44);\n-    __ beq             (CCR0, L_do44);\n+    __ cmpwi           (CR0, keylen, 44);\n+    __ beq             (CR0, L_do44);\n@@ -2795,2 +2795,2 @@\n-    __ cmpwi           (CCR0, keylen, 52);\n-    __ beq             (CCR0, L_do52);\n+    __ cmpwi           (CR0, keylen, 52);\n+    __ beq             (CR0, L_do52);\n@@ -2799,2 +2799,2 @@\n-    __ cmpwi           (CCR0, keylen, 60);\n-    __ bne             (CCR0, L_error);\n+    __ cmpwi           (CR0, keylen, 60);\n+    __ bne             (CR0, L_error);\n@@ -3013,1 +3013,1 @@\n-    __ bne(CCR0, SKIP);\n+    __ bne(CR0, SKIP);\n@@ -3270,1 +3270,1 @@\n-    __ cmpwi  (CCR0,      in_len,    0);\n+    __ cmpwi  (CR0,      in_len,    0);\n@@ -3273,1 +3273,1 @@\n-    __ ble    (CCR0,      SKIP_LOOP_SQUARE);    \/\/ in_len <= 0\n+    __ ble    (CR0,      SKIP_LOOP_SQUARE);    \/\/ in_len <= 0\n@@ -3296,2 +3296,2 @@\n-    __ cmpwi  (CCR0,      in_len,    0);\n-    __ ble    (CCR0,      SKIP_DIAGONAL_SUM);\n+    __ cmpwi  (CR0,      in_len,    0);\n+    __ ble    (CR0,      SKIP_DIAGONAL_SUM);\n@@ -3328,1 +3328,1 @@\n-    __ beq    (CCR0,      SKIP_ADDONE);\n+    __ beq    (CR0,      SKIP_ADDONE);\n@@ -3333,2 +3333,2 @@\n-    __ cmpwi  (CCR0,      mlen,      0);\n-    __ beq    (CCR0,      SKIP_ADDONE);\n+    __ cmpwi  (CR0,      mlen,      0);\n+    __ beq    (CR0,      SKIP_ADDONE);\n@@ -3338,2 +3338,2 @@\n-    __ cmpwi  (CCR0,      off_aux,   0);\n-    __ blt    (CCR0,      SKIP_ADDONE);\n+    __ cmpwi  (CR0,      off_aux,   0);\n+    __ blt    (CR0,      SKIP_ADDONE);\n@@ -3345,2 +3345,2 @@\n-    __ cmpwi  (CCR0,      b,         0);\n-    __ bne    (CCR0,      SKIP_ADDONE);\n+    __ cmpwi  (CR0,      b,         0);\n+    __ bne    (CR0,      SKIP_ADDONE);\n@@ -3354,2 +3354,2 @@\n-    __ cmpwi  (CCR0,      i_minus1,  0);\n-    __ bge    (CCR0,      LOOP_DIAGONAL_SUM);\n+    __ cmpwi  (CR0,      i_minus1,  0);\n+    __ bge    (CR0,      LOOP_DIAGONAL_SUM);\n@@ -3362,2 +3362,2 @@\n-    __ cmpwi  (CCR0,      out_len,   0);\n-    __ ble    (CCR0,      SKIP_LSHIFT);\n+    __ cmpwi  (CR0,      out_len,   0);\n+    __ ble    (CR0,      SKIP_LSHIFT);\n@@ -3496,1 +3496,1 @@\n-    __ cmpdi(CCR0, R0, 0);\n+    __ cmpdi(CR0, R0, 0);\n@@ -3499,1 +3499,1 @@\n-    __ bclr(Assembler::bcondCRbiIs1, Assembler::bi0(CCR0, Assembler::equal), Assembler::bhintIsTaken);\n+    __ bclr(Assembler::bcondCRbiIs1, Assembler::bi0(CR0, Assembler::equal), Assembler::bhintIsTaken);\n@@ -3780,1 +3780,1 @@\n-    __ ble(CCR0, return_zero);\n+    __ ble(CR0, return_zero);\n@@ -3819,2 +3819,2 @@\n-    __ cmpwi(CCR0, isURL, 0);\n-    __ beq(CCR0, not_URL);\n+    __ cmpwi(CR0, isURL, 0);\n+    __ beq(CR0, not_URL);\n@@ -3910,1 +3910,1 @@\n-    \/\/ vmcmpequb_ sets the EQ bit of CCR6 if no elements compare equal.\n+    \/\/ vmcmpequb_ sets the EQ bit of CR6 if no elements compare equal.\n@@ -3913,2 +3913,2 @@\n-    \/\/ non_match is not referenced again.  Only CCR6-EQ matters.\n-    __ bne_predict_not_taken(CCR6, loop_exit);\n+    \/\/ non_match is not referenced again.  Only CR6-EQ matters.\n+    __ bne_predict_not_taken(CR6, loop_exit);\n@@ -4314,2 +4314,2 @@\n-    __ cmpdi(CCR0, isURL, 0);\n-    __ beq(CCR0, not_URL);\n+    __ cmpdi(CR0, isURL, 0);\n+    __ beq(CR0, not_URL);\n@@ -4332,2 +4332,2 @@\n-    __ cmpdi(CCR7, size, block_size);\n-    __ bgt(CCR7, calculate_blocked_size);\n+    __ cmpdi(CR7, size, block_size);\n+    __ bgt(CR7, calculate_blocked_size);\n@@ -4391,2 +4391,2 @@\n-    __ cmpwi(CCR7, bytes_to_write, 16);\n-    __ ble_predict_taken(CCR7, le_16_to_write);\n+    __ cmpwi(CR7, bytes_to_write, 16);\n+    __ ble_predict_taken(CR7, le_16_to_write);\n@@ -4413,1 +4413,1 @@\n-    __ rlwinm_(modulo_chars, bytes_to_write, 0, 30, 31); \/\/ bytes_to_write % 4, set CCR0\n+    __ rlwinm_(modulo_chars, bytes_to_write, 0, 30, 31); \/\/ bytes_to_write % 4, set CR0\n@@ -4427,3 +4427,3 @@\n-    __ beq(CCR0, no_pad);\n-    __ cmpwi(CCR7, modulo_chars, 3);\n-    __ beq(CCR7, one_pad_char);\n+    __ beq(CR0, no_pad);\n+    __ cmpwi(CR7, modulo_chars, 3);\n+    __ beq(CR7, one_pad_char);\n@@ -4512,1 +4512,1 @@\n-      __ cmpd(CCR0, tmp1, tmp2);\n+      __ cmpd(CR0, tmp1, tmp2);\n@@ -4518,1 +4518,1 @@\n-    __ cmpd(CCR0, R1_SP, tmp1);\n+    __ cmpd(CR0, R1_SP, tmp1);\n@@ -4527,1 +4527,1 @@\n-    DEBUG_ONLY(__ cmpd(CCR0, R1_SP, tmp1));\n+    DEBUG_ONLY(__ cmpd(CR0, R1_SP, tmp1));\n@@ -4533,2 +4533,2 @@\n-    __ cmpdi(CCR0, R3_RET, 0);\n-    __ bne(CCR0, thaw_success);\n+    __ cmpdi(CR0, R3_RET, 0);\n+    __ bne(CR0, thaw_success);\n@@ -4608,2 +4608,2 @@\n-    __ cmpwi(CCR0, R11_scratch1, 0);\n-    __ bne(CCR0, preemption_cancelled);\n+    __ cmpwi(CR0, R11_scratch1, 0);\n+    __ bne(CR0, preemption_cancelled);\n","filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp","additions":194,"deletions":194,"binary":false,"changes":388,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2015, 2024 SAP SE. All rights reserved.\n+ * Copyright (c) 2015, 2025 SAP SE. All rights reserved.\n@@ -150,2 +150,2 @@\n-    __ testbitdi(CCR0, R0, R11_scratch1\/*access_flags*\/, JVM_ACC_STATIC_BIT);\n-    __ btrue(CCR0, L);\n+    __ testbitdi(CR0, R0, R11_scratch1\/*access_flags*\/, JVM_ACC_STATIC_BIT);\n+    __ btrue(CR0, L);\n@@ -178,2 +178,2 @@\n-  __ cmplwi(CCR0, sig_byte, '(');\n-  __ bne(CCR0, do_dontreachhere);\n+  __ cmplwi(CR0, sig_byte, '(');\n+  __ bne(CR0, do_dontreachhere);\n@@ -187,2 +187,2 @@\n-  __ cmplwi(CCR0, sig_byte, ')'); \/\/ end of signature\n-  __ beq(CCR0, loop_end);\n+  __ cmplwi(CR0, sig_byte, ')'); \/\/ end of signature\n+  __ beq(CR0, loop_end);\n@@ -190,2 +190,2 @@\n-  __ cmplwi(CCR0, sig_byte, 'B'); \/\/ byte\n-  __ beq(CCR0, do_int);\n+  __ cmplwi(CR0, sig_byte, 'B'); \/\/ byte\n+  __ beq(CR0, do_int);\n@@ -193,2 +193,2 @@\n-  __ cmplwi(CCR0, sig_byte, 'C'); \/\/ char\n-  __ beq(CCR0, do_int);\n+  __ cmplwi(CR0, sig_byte, 'C'); \/\/ char\n+  __ beq(CR0, do_int);\n@@ -196,2 +196,2 @@\n-  __ cmplwi(CCR0, sig_byte, 'D'); \/\/ double\n-  __ beq(CCR0, do_double);\n+  __ cmplwi(CR0, sig_byte, 'D'); \/\/ double\n+  __ beq(CR0, do_double);\n@@ -199,2 +199,2 @@\n-  __ cmplwi(CCR0, sig_byte, 'F'); \/\/ float\n-  __ beq(CCR0, do_float);\n+  __ cmplwi(CR0, sig_byte, 'F'); \/\/ float\n+  __ beq(CR0, do_float);\n@@ -202,2 +202,2 @@\n-  __ cmplwi(CCR0, sig_byte, 'I'); \/\/ int\n-  __ beq(CCR0, do_int);\n+  __ cmplwi(CR0, sig_byte, 'I'); \/\/ int\n+  __ beq(CR0, do_int);\n@@ -205,2 +205,2 @@\n-  __ cmplwi(CCR0, sig_byte, 'J'); \/\/ long\n-  __ beq(CCR0, do_long);\n+  __ cmplwi(CR0, sig_byte, 'J'); \/\/ long\n+  __ beq(CR0, do_long);\n@@ -208,2 +208,2 @@\n-  __ cmplwi(CCR0, sig_byte, 'S'); \/\/ short\n-  __ beq(CCR0, do_int);\n+  __ cmplwi(CR0, sig_byte, 'S'); \/\/ short\n+  __ beq(CR0, do_int);\n@@ -211,2 +211,2 @@\n-  __ cmplwi(CCR0, sig_byte, 'Z'); \/\/ boolean\n-  __ beq(CCR0, do_int);\n+  __ cmplwi(CR0, sig_byte, 'Z'); \/\/ boolean\n+  __ beq(CR0, do_int);\n@@ -214,2 +214,2 @@\n-  __ cmplwi(CCR0, sig_byte, 'L'); \/\/ object\n-  __ beq(CCR0, do_object);\n+  __ cmplwi(CR0, sig_byte, 'L'); \/\/ object\n+  __ beq(CR0, do_object);\n@@ -217,2 +217,2 @@\n-  __ cmplwi(CCR0, sig_byte, '['); \/\/ array\n-  __ beq(CCR0, do_array);\n+  __ cmplwi(CR0, sig_byte, '['); \/\/ array\n+  __ beq(CR0, do_array);\n@@ -220,2 +220,2 @@\n-  \/\/  __ cmplwi(CCR0, sig_byte, 'V'); \/\/ void cannot appear since we do not parse the return type\n-  \/\/  __ beq(CCR0, do_void);\n+  \/\/  __ cmplwi(CR0, sig_byte, 'V'); \/\/ void cannot appear since we do not parse the return type\n+  \/\/  __ beq(CR0, do_void);\n@@ -234,6 +234,6 @@\n-    __ cmplwi(CCR0, sig_byte, '[');\n-    __ beq(CCR0, start_skip); \/\/ skip further brackets\n-    __ cmplwi(CCR0, sig_byte, '9');\n-    __ bgt(CCR0, end_skip);   \/\/ no optional size\n-    __ cmplwi(CCR0, sig_byte, '0');\n-    __ bge(CCR0, start_skip); \/\/ skip optional size\n+    __ cmplwi(CR0, sig_byte, '[');\n+    __ beq(CR0, start_skip); \/\/ skip further brackets\n+    __ cmplwi(CR0, sig_byte, '9');\n+    __ bgt(CR0, end_skip);   \/\/ no optional size\n+    __ cmplwi(CR0, sig_byte, '0');\n+    __ bge(CR0, start_skip); \/\/ skip optional size\n@@ -242,2 +242,2 @@\n-    __ cmplwi(CCR0, sig_byte, 'L');\n-    __ beq(CCR0, do_object);  \/\/ for arrays of objects, the name of the object must be skipped\n+    __ cmplwi(CR0, sig_byte, 'L');\n+    __ beq(CR0, do_object);  \/\/ for arrays of objects, the name of the object must be skipped\n@@ -252,2 +252,2 @@\n-    __ cmplwi(CCR0, sig_byte, ';');\n-    __ bne(CCR0, L);\n+    __ cmplwi(CR0, sig_byte, ';');\n+    __ bne(CR0, L);\n@@ -261,1 +261,1 @@\n-  __ cmpdi(CCR0, R0, 0);\n+  __ cmpdi(CR0, R0, 0);\n@@ -263,1 +263,1 @@\n-  __ beq(CCR0, do_null);\n+  __ beq(CR0, do_null);\n@@ -269,2 +269,2 @@\n-  __ cmplwi(CCR0, argcnt, max_int_register_arguments);\n-  __ blt(CCR0, move_intSlot_to_ARG);\n+  __ cmplwi(CR0, argcnt, max_int_register_arguments);\n+  __ blt(CR0, move_intSlot_to_ARG);\n@@ -278,2 +278,2 @@\n-  __ cmplwi(CCR0, argcnt, max_int_register_arguments);\n-  __ blt(CCR0, move_intSlot_to_ARG);\n+  __ cmplwi(CR0, argcnt, max_int_register_arguments);\n+  __ blt(CR0, move_intSlot_to_ARG);\n@@ -287,2 +287,2 @@\n-  __ cmplwi(CCR0, argcnt, max_int_register_arguments);\n-  __ blt(CCR0, move_intSlot_to_ARG);\n+  __ cmplwi(CR0, argcnt, max_int_register_arguments);\n+  __ blt(CR0, move_intSlot_to_ARG);\n@@ -296,2 +296,2 @@\n-  __ cmplwi(CCR0, fpcnt, max_fp_register_arguments);\n-  __ blt(CCR0, move_floatSlot_to_FARG);\n+  __ cmplwi(CR0, fpcnt, max_fp_register_arguments);\n+  __ blt(CR0, move_floatSlot_to_FARG);\n@@ -305,2 +305,2 @@\n-  __ cmplwi(CCR0, fpcnt, max_fp_register_arguments);\n-  __ blt(CCR0, move_floatSlot_to_FARG);\n+  __ cmplwi(CR0, fpcnt, max_fp_register_arguments);\n+  __ blt(CR0, move_floatSlot_to_FARG);\n@@ -513,2 +513,2 @@\n-  __ cmpdi(CCR0, R3_RET, 0);\n-  __ beq(CCR0, slow_path);\n+  __ cmpdi(CR0, R3_RET, 0);\n+  __ beq(CR0, slow_path);\n@@ -728,2 +728,2 @@\n-    __ cmpdi(CCR0, Rmdo, 0);\n-    __ beq(CCR0, no_mdo);\n+    __ cmpdi(CR0, Rmdo, 0);\n+    __ beq(CR0, no_mdo);\n@@ -738,1 +738,1 @@\n-    __ bne(CCR0, done);\n+    __ bne(CR0, done);\n@@ -751,1 +751,1 @@\n-  __ beq(CCR0, *overflow);\n+  __ beq(CR0, *overflow);\n@@ -792,2 +792,2 @@\n-  __ cmpld(CCR0\/*is_stack_overflow*\/, Rmem_frame_size, Rscratch1);\n-  __ bgt(CCR0\/*is_stack_overflow*\/, done);\n+  __ cmpld(CR0\/*is_stack_overflow*\/, Rmem_frame_size, Rscratch1);\n+  __ bgt(CR0\/*is_stack_overflow*\/, done);\n@@ -802,2 +802,2 @@\n-  __ cmpld(CCR0, R1_SP, R21_sender_SP);\n-  __ ble(CCR0, frame_not_shrunk);\n+  __ cmpld(CR0, R1_SP, R21_sender_SP);\n+  __ ble(CR0, frame_not_shrunk);\n@@ -808,1 +808,1 @@\n-  __ cmpd(CCR0, R0, Rscratch1);\n+  __ cmpd(CR0, R0, Rscratch1);\n@@ -832,2 +832,2 @@\n-      __ testbitdi(CCR0, R0, Rflags, JVM_ACC_SYNCHRONIZED_BIT);\n-      __ btrue(CCR0,Lok);\n+      __ testbitdi(CR0, R0, Rflags, JVM_ACC_SYNCHRONIZED_BIT);\n+      __ btrue(CR0,Lok);\n@@ -845,2 +845,2 @@\n-    __ testbitdi(CCR0, R0, Rflags, JVM_ACC_STATIC_BIT);\n-    __ btrue(CCR0, Lstatic);\n+    __ testbitdi(CR0, R0, Rflags, JVM_ACC_STATIC_BIT);\n+    __ btrue(CR0, Lstatic);\n@@ -953,2 +953,2 @@\n-    __ cmpwi(CCR0, Rtop_frame_size, Argument::n_int_register_parameters_c);\n-    __ bge(CCR0, skip_native_calculate_max_stack);\n+    __ cmpwi(CR0, Rtop_frame_size, Argument::n_int_register_parameters_c);\n+    __ bge(CR0, skip_native_calculate_max_stack);\n@@ -1002,2 +1002,2 @@\n-    __ cmpdi(CCR0, R28_mdx, 0);\n-    __ beq(CCR0, zero_continue);\n+    __ cmpdi(CR0, R28_mdx, 0);\n+    __ beq(CR0, zero_continue);\n@@ -1333,2 +1333,2 @@\n-  __ cmpdi(CCR0, signature_handler_fd, 0);\n-  __ bne(CCR0, call_signature_handler);\n+  __ cmpdi(CR0, signature_handler_fd, 0);\n+  __ bne(CR0, call_signature_handler);\n@@ -1345,2 +1345,2 @@\n-  __ cmpdi(CCR0, pending_exception, 0);\n-  __ bne(CCR0, exception_return_sync_check); \/\/ Has pending exception.\n+  __ cmpdi(CR0, pending_exception, 0);\n+  __ bne(CR0, exception_return_sync_check); \/\/ Has pending exception.\n@@ -1401,2 +1401,2 @@\n-    __ testbitdi(CCR0, R0, access_flags, JVM_ACC_STATIC_BIT);\n-    __ bfalse(CCR0, method_is_not_static);\n+    __ testbitdi(CR0, R0, access_flags, JVM_ACC_STATIC_BIT);\n+    __ bfalse(CR0, method_is_not_static);\n@@ -1511,2 +1511,2 @@\n-  __ cmpwi(CCR1, suspend_flags, 0);\n-  __ beq(CCR1, sync_check_done);\n+  __ cmpwi(CR1, suspend_flags, 0);\n+  __ beq(CR1, sync_check_done);\n@@ -1555,2 +1555,2 @@\n-    __ cmpdi(CCR0, R0, 0);\n-    __ beq(CCR0, not_preempted);\n+    __ cmpdi(CR0, R0, 0);\n+    __ beq(CR0, not_preempted);\n@@ -1614,2 +1614,2 @@\n-  __ cmpdi(CCR0, R0\/*pending_exception*\/, 0);\n-  __ bne(CCR0, exception_return_sync_check_already_unlocked);\n+  __ cmpdi(CR0, R0\/*pending_exception*\/, 0);\n+  __ bne(CR0, exception_return_sync_check_already_unlocked);\n@@ -1709,1 +1709,1 @@\n-  __ beq(CCR0, Lno_locals);\n+  __ beq(CR0, Lno_locals);\n@@ -2083,2 +2083,2 @@\n-    __ cmpdi(CCR0, R3_RET, 0);\n-    __ bne(CCR0, Lcaller_not_deoptimized);\n+    __ cmpdi(CR0, R3_RET, 0);\n+    __ bne(CR0, Lcaller_not_deoptimized);\n@@ -2130,2 +2130,2 @@\n-    __ cmpwi(CCR0, R11_scratch1, Bytecodes::_invokestatic);\n-    __ bne(CCR0, L_done);\n+    __ cmpwi(CR0, R11_scratch1, Bytecodes::_invokestatic);\n+    __ bne(CR0, L_done);\n@@ -2138,2 +2138,2 @@\n-    __ cmpdi(CCR0, R4_ARG2, 0);\n-    __ beq(CCR0, L_done);\n+    __ cmpdi(CR0, R4_ARG2, 0);\n+    __ beq(CR0, L_done);\n@@ -2324,2 +2324,2 @@\n-    __ cmpd(CCR0, R12_scratch2, R11_scratch1);\n-    __ blt(CCR0, Lskip_vm_call);\n+    __ cmpd(CR0, R12_scratch2, R11_scratch1);\n+    __ blt(CR0, Lskip_vm_call);\n@@ -2399,2 +2399,2 @@\n-  __ cmpd(CCR0, R12_scratch2, R11_scratch1);\n-  __ bne(CCR0, L);\n+  __ cmpd(CR0, R12_scratch2, R11_scratch1);\n+  __ bne(CR0, L);\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":93,"deletions":93,"binary":false,"changes":186,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2013, 2024 SAP SE. All rights reserved.\n+ * Copyright (c) 2013, 2025 SAP SE. All rights reserved.\n@@ -126,1 +126,1 @@\n-      __ cmpwi(CCR0, Rnew_bc, 0);\n+      __ cmpwi(CR0, Rnew_bc, 0);\n@@ -128,1 +128,1 @@\n-      __ beq(CCR0, L_patch_done);\n+      __ beq(CR0, L_patch_done);\n@@ -143,2 +143,2 @@\n-    __ cmpwi(CCR0, Rtemp, (unsigned int)(unsigned char)Bytecodes::_breakpoint);\n-    __ bne(CCR0, L_fast_patch);\n+    __ cmpwi(CR0, Rtemp, (unsigned int)(unsigned char)Bytecodes::_breakpoint);\n+    __ bne(CR0, L_fast_patch);\n@@ -264,3 +264,3 @@\n-  __ cmpwi(CCR0, Rscratch2, JVM_CONSTANT_UnresolvedClass); \/\/ Unresolved class?\n-  __ cmpwi(CCR1, Rscratch2, JVM_CONSTANT_UnresolvedClassInError); \/\/ Unresolved class in error state?\n-  __ cror(CCR0, Assembler::equal, CCR1, Assembler::equal);\n+  __ cmpwi(CR0, Rscratch2, JVM_CONSTANT_UnresolvedClass); \/\/ Unresolved class?\n+  __ cmpwi(CR1, Rscratch2, JVM_CONSTANT_UnresolvedClassInError); \/\/ Unresolved class in error state?\n+  __ cror(CR0, Assembler::equal, CR1, Assembler::equal);\n@@ -269,3 +269,3 @@\n-  __ cmpwi(CCR1, Rscratch2, JVM_CONSTANT_Class);\n-  __ crnor(CCR0, Assembler::equal, CCR1, Assembler::equal); \/\/ Neither resolved class nor unresolved case from above?\n-  __ beq(CCR0, notClass);\n+  __ cmpwi(CR1, Rscratch2, JVM_CONSTANT_Class);\n+  __ crnor(CR0, Assembler::equal, CR1, Assembler::equal); \/\/ Neither resolved class nor unresolved case from above?\n+  __ beq(CR0, notClass);\n@@ -282,2 +282,2 @@\n-  __ cmpdi(CCR0, Rscratch2, JVM_CONSTANT_Integer);\n-  __ bne(CCR0, notInt);\n+  __ cmpdi(CR0, Rscratch2, JVM_CONSTANT_Integer);\n+  __ bne(CR0, notInt);\n@@ -290,2 +290,2 @@\n-  __ cmpdi(CCR0, Rscratch2, JVM_CONSTANT_Float);\n-  __ bne(CCR0, notFloat);\n+  __ cmpdi(CR0, Rscratch2, JVM_CONSTANT_Float);\n+  __ bne(CR0, notFloat);\n@@ -321,1 +321,1 @@\n-  __ cmpld(CCR0, R17_tos, R31);\n+  __ cmpld(CR0, R17_tos, R31);\n@@ -323,1 +323,1 @@\n-    __ isel_0(R17_tos, CCR0, Assembler::equal);\n+    __ isel_0(R17_tos, CR0, Assembler::equal);\n@@ -326,1 +326,1 @@\n-    __ bne(CCR0, not_sentinel);\n+    __ bne(CR0, not_sentinel);\n@@ -362,2 +362,2 @@\n-  __ cmpdi(CCR0, Rtag, JVM_CONSTANT_Double);\n-  __ bne(CCR0, not_double);\n+  __ cmpdi(CR0, Rtag, JVM_CONSTANT_Double);\n+  __ bne(CR0, not_double);\n@@ -369,2 +369,2 @@\n-  __ cmpdi(CCR0, Rtag, JVM_CONSTANT_Long);\n-  __ bne(CCR0, not_long);\n+  __ cmpdi(CR0, Rtag, JVM_CONSTANT_Long);\n+  __ bne(CR0, not_long);\n@@ -404,2 +404,2 @@\n-      __ cmplwi(CCR0, flags, itos);\n-      __ bne(CCR0, notInt);\n+      __ cmplwi(CR0, flags, itos);\n+      __ bne(CR0, notInt);\n@@ -412,2 +412,2 @@\n-      __ cmplwi(CCR0, flags, ftos);\n-      __ bne(CCR0, notFloat);\n+      __ cmplwi(CR0, flags, ftos);\n+      __ bne(CR0, notFloat);\n@@ -420,2 +420,2 @@\n-      __ cmplwi(CCR0, flags, stos);\n-      __ bne(CCR0, notShort);\n+      __ cmplwi(CR0, flags, stos);\n+      __ bne(CR0, notShort);\n@@ -428,2 +428,2 @@\n-      __ cmplwi(CCR0, flags, btos);\n-      __ bne(CCR0, notByte);\n+      __ cmplwi(CR0, flags, btos);\n+      __ bne(CR0, notByte);\n@@ -437,2 +437,2 @@\n-      __ cmplwi(CCR0, flags, ctos);\n-      __ bne(CCR0, notChar);\n+      __ cmplwi(CR0, flags, ctos);\n+      __ bne(CR0, notChar);\n@@ -445,2 +445,2 @@\n-      __ cmplwi(CCR0, flags, ztos);\n-      __ bne(CCR0, notBool);\n+      __ cmplwi(CR0, flags, ztos);\n+      __ bne(CR0, notBool);\n@@ -459,2 +459,2 @@\n-      __ cmplwi(CCR0, flags, ltos);\n-      __ bne(CCR0, notLong);\n+      __ cmplwi(CR0, flags, ltos);\n+      __ bne(CR0, notLong);\n@@ -467,2 +467,2 @@\n-      __ cmplwi(CCR0, flags, dtos);\n-      __ bne(CCR0, notDouble);\n+      __ cmplwi(CR0, flags, dtos);\n+      __ bne(CR0, notDouble);\n@@ -520,2 +520,2 @@\n-    __ cmpwi(CCR0, Rnext_byte, (unsigned int)(unsigned char)Bytecodes::_iload);\n-    __ beq(CCR0, Ldone);\n+    __ cmpwi(CR0, Rnext_byte, (unsigned int)(unsigned char)Bytecodes::_iload);\n+    __ beq(CR0, Ldone);\n@@ -523,1 +523,1 @@\n-    __ cmpwi(CCR1, Rnext_byte, (unsigned int)(unsigned char)Bytecodes::_fast_iload);\n+    __ cmpwi(CR1, Rnext_byte, (unsigned int)(unsigned char)Bytecodes::_fast_iload);\n@@ -525,1 +525,1 @@\n-    __ beq(CCR1, Lrewrite);\n+    __ beq(CR1, Lrewrite);\n@@ -527,1 +527,1 @@\n-    __ cmpwi(CCR0, Rnext_byte, (unsigned int)(unsigned char)Bytecodes::_caload);\n+    __ cmpwi(CR0, Rnext_byte, (unsigned int)(unsigned char)Bytecodes::_caload);\n@@ -529,1 +529,1 @@\n-    __ beq(CCR0, Lrewrite);\n+    __ beq(CR0, Lrewrite);\n@@ -815,2 +815,2 @@\n-    __ cmpwi(CCR0, Rnext_byte, (unsigned int)(unsigned char)Bytecodes::_getfield);\n-    __ beq(CCR0, Ldont_rewrite);\n+    __ cmpwi(CR0, Rnext_byte, (unsigned int)(unsigned char)Bytecodes::_getfield);\n+    __ beq(CR0, Ldont_rewrite);\n@@ -818,1 +818,1 @@\n-    __ cmpwi(CCR1, Rnext_byte, (unsigned int)(unsigned char)Bytecodes::_fast_igetfield);\n+    __ cmpwi(CR1, Rnext_byte, (unsigned int)(unsigned char)Bytecodes::_fast_igetfield);\n@@ -820,1 +820,1 @@\n-    __ beq(CCR1, Lrewrite);\n+    __ beq(CR1, Lrewrite);\n@@ -822,1 +822,1 @@\n-    __ cmpwi(CCR0, Rnext_byte, (unsigned int)(unsigned char)Bytecodes::_fast_agetfield);\n+    __ cmpwi(CR0, Rnext_byte, (unsigned int)(unsigned char)Bytecodes::_fast_agetfield);\n@@ -824,1 +824,1 @@\n-    __ beq(CCR0, Lrewrite);\n+    __ beq(CR0, Lrewrite);\n@@ -826,1 +826,1 @@\n-    __ cmpwi(CCR1, Rnext_byte, (unsigned int)(unsigned char)Bytecodes::_fast_fgetfield);\n+    __ cmpwi(CR1, Rnext_byte, (unsigned int)(unsigned char)Bytecodes::_fast_fgetfield);\n@@ -828,1 +828,1 @@\n-    __ beq(CCR1, Lrewrite);\n+    __ beq(CR1, Lrewrite);\n@@ -1000,2 +1000,2 @@\n-  __ cmpdi(CCR0, R17_tos, 0);\n-  __ beq(CCR0, Lis_null);\n+  __ cmpdi(CR0, R17_tos, 0);\n+  __ beq(CR0, Lis_null);\n@@ -1048,1 +1048,1 @@\n-  __ testbitdi(CCR0, R0, Rscratch, diffbit);\n+  __ testbitdi(CR0, R0, Rscratch, diffbit);\n@@ -1050,1 +1050,1 @@\n-  __ bfalse(CCR0, L_skip);\n+  __ bfalse(CR0, L_skip);\n@@ -1265,2 +1265,2 @@\n-  __ cmplwi(CCR0, R0, 2);\n-  __ bgt(CCR0, Lnormal); \/\/ divisor <-1 or >1\n+  __ cmplwi(CR0, R0, 2);\n+  __ bgt(CR0, Lnormal); \/\/ divisor <-1 or >1\n@@ -1268,2 +1268,2 @@\n-  __ cmpwi(CCR1, R17_tos, 0);\n-  __ beq(CCR1, Lexception); \/\/ divisor == 0\n+  __ cmpwi(CR1, R17_tos, 0);\n+  __ beq(CR1, Lexception); \/\/ divisor == 0\n@@ -1310,2 +1310,2 @@\n-  __ cmpldi(CCR0, R0, 2);\n-  __ bgt(CCR0, Lnormal); \/\/ divisor <-1 or >1\n+  __ cmpldi(CR0, R0, 2);\n+  __ bgt(CR0, Lnormal); \/\/ divisor <-1 or >1\n@@ -1313,2 +1313,2 @@\n-  __ cmpdi(CCR1, R17_tos, 0);\n-  __ beq(CCR1, Lexception); \/\/ divisor == 0\n+  __ cmpdi(CR1, R17_tos, 0);\n+  __ beq(CR1, Lexception); \/\/ divisor == 0\n@@ -1568,1 +1568,1 @@\n-      __ fcmpu(CCR0, F15_ftos, F15_ftos);\n+      __ fcmpu(CR0, F15_ftos, F15_ftos);\n@@ -1570,1 +1570,1 @@\n-      __ bso(CCR0, done);\n+      __ bso(CR0, done);\n@@ -1577,1 +1577,1 @@\n-      __ fcmpu(CCR0, F15_ftos, F15_ftos);\n+      __ fcmpu(CR0, F15_ftos, F15_ftos);\n@@ -1579,1 +1579,1 @@\n-      __ bso(CCR0, done);\n+      __ bso(CR0, done);\n@@ -1596,1 +1596,1 @@\n-  __ cmpd(CCR0, Rscratch, R17_tos); \/\/ compare\n+  __ cmpd(CR0, Rscratch, R17_tos); \/\/ compare\n@@ -1614,1 +1614,1 @@\n-  __ fcmpu(CCR0, Rfirst, Rsecond); \/\/ compare\n+  __ fcmpu(CR0, Rfirst, Rsecond); \/\/ compare\n@@ -1686,2 +1686,2 @@\n-    __ cmpdi(CCR0, Rdisp, 0);\n-    __ bgt(CCR0, Lforward);\n+    __ cmpdi(CR0, Rdisp, 0);\n+    __ bgt(CR0, Lforward);\n@@ -1698,2 +1698,2 @@\n-      __ cmpdi(CCR0, Rmdo, 0);\n-      __ beq(CCR0, Lno_mdo);\n+      __ cmpdi(CR0, Rmdo, 0);\n+      __ beq(CR0, Lno_mdo);\n@@ -1709,1 +1709,1 @@\n-        __ bne(CCR0, Lforward);\n+        __ bne(CR0, Lforward);\n@@ -1725,1 +1725,1 @@\n-      __ bne(CCR0, Lforward);\n+      __ bne(CR0, Lforward);\n@@ -1736,2 +1736,2 @@\n-    __ cmpdi(CCR0, R3_RET, 0);\n-    __ beq(CCR0, Lforward);\n+    __ cmpdi(CR0, R3_RET, 0);\n+    __ beq(CR0, Lforward);\n@@ -1741,2 +1741,2 @@\n-    __ cmpwi(CCR0, R0, nmethod::in_use);\n-    __ bne(CCR0, Lforward);\n+    __ cmpwi(CR0, R0, nmethod::in_use);\n+    __ bne(CR0, Lforward);\n@@ -1778,1 +1778,1 @@\n-      __ cmpwi(CCR0, Rfirst, 0);\n+      __ cmpwi(CR0, Rfirst, 0);\n@@ -1780,1 +1780,1 @@\n-      __ cmpw(CCR0, Rfirst, Rsecond);\n+      __ cmpw(CR0, Rfirst, Rsecond);\n@@ -1784,1 +1784,1 @@\n-      __ cmpdi(CCR0, Rfirst, 0);\n+      __ cmpdi(CR0, Rfirst, 0);\n@@ -1786,1 +1786,1 @@\n-      __ cmpd(CCR0, Rfirst, Rsecond);\n+      __ cmpd(CR0, Rfirst, Rsecond);\n@@ -1789,1 +1789,1 @@\n-  branch_conditional(CCR0, cc, Lnot_taken, \/*invert*\/ true);\n+  branch_conditional(CR0, cc, Lnot_taken, \/*invert*\/ true);\n@@ -1888,4 +1888,4 @@\n-  __ cmpw(CCR0, R17_tos, Rlow_byte);\n-  __ cmpw(CCR1, R17_tos, Rhigh_byte);\n-  __ blt(CCR0, Ldefault_case);\n-  __ bgt(CCR1, Ldefault_case);\n+  __ cmpw(CR0, R17_tos, Rlow_byte);\n+  __ cmpw(CR1, R17_tos, Rhigh_byte);\n+  __ blt(CR0, Ldefault_case);\n+  __ bgt(CR1, Ldefault_case);\n@@ -1947,2 +1947,2 @@\n-  __ cmpwi(CCR0, Rcount, 0);\n-  __ bne(CCR0, Lloop_entry);\n+  __ cmpwi(CR0, Rcount, 0);\n+  __ bne(CR0, Lloop_entry);\n@@ -1964,2 +1964,2 @@\n-  __ cmpw(CCR0, Rvalue, Rcmp_value);\n-  __ bne(CCR0, Lsearch_loop);\n+  __ cmpw(CR0, Rvalue, Rcmp_value);\n+  __ bne(CR0, Lsearch_loop);\n@@ -2060,2 +2060,2 @@\n-    __ cmpw(CCR0, Rkey, Rscratch);\n-    __ bge(CCR0, Lgreater);\n+    __ cmpw(CR0, Rkey, Rscratch);\n+    __ bge(CR0, Lgreater);\n@@ -2070,1 +2070,1 @@\n-    __ cmpw(CCR0, Rscratch, Rj);\n+    __ cmpw(CR0, Rscratch, Rj);\n@@ -2073,1 +2073,1 @@\n-    __ blt(CCR0, loop);\n+    __ blt(CR0, loop);\n@@ -2089,2 +2089,2 @@\n-  __ cmpw(CCR0, Rkey, Rscratch);\n-  __ beq(CCR0, not_found);\n+  __ cmpw(CR0, Rkey, Rscratch);\n+  __ beq(CR0, not_found);\n@@ -2133,2 +2133,2 @@\n-    __ testbitdi(CCR0, R0, Rklass_flags, exact_log2(KlassFlags::_misc_has_finalizer));\n-    __ bfalse(CCR0, Lskip_register_finalizer);\n+    __ testbitdi(CR0, R0, Rklass_flags, exact_log2(KlassFlags::_misc_has_finalizer));\n+    __ bfalse(CR0, Lskip_register_finalizer);\n@@ -2146,1 +2146,1 @@\n-    __ beq(CCR0, no_safepoint);\n+    __ beq(CR0, no_safepoint);\n@@ -2217,2 +2217,2 @@\n-  __ cmpdi(CCR0, Rscratch, (int)code);\n-  __ beq(CCR0, Lresolved);\n+  __ cmpdi(CR0, Rscratch, (int)code);\n+  __ beq(CR0, Lresolved);\n@@ -2266,2 +2266,2 @@\n-  __ cmpwi(CCR0, R0, (int)code); \/\/ have we resolved this bytecode?\n-  __ beq(CCR0, resolved);\n+  __ cmpwi(CR0, R0, (int)code); \/\/ have we resolved this bytecode?\n+  __ beq(CR0, resolved);\n@@ -2335,2 +2335,2 @@\n-  __ testbitdi(CCR0, R0, flags, ResolvedMethodEntry::has_appendix_shift);\n-  __ bfalse(CCR0, L_no_push);\n+  __ testbitdi(CR0, R0, flags, ResolvedMethodEntry::has_appendix_shift);\n+  __ bfalse(CR0, L_no_push);\n@@ -2398,2 +2398,2 @@\n-  __ cmpdi(CCR0, method, 0);\n-  __ bne(CCR0, resolved);\n+  __ cmpdi(CR0, method, 0);\n+  __ bne(CR0, resolved);\n@@ -2411,1 +2411,1 @@\n-  DEBUG_ONLY(__ cmpdi(CCR0, method, 0));\n+  DEBUG_ONLY(__ cmpdi(CR0, method, 0));\n@@ -2420,1 +2420,1 @@\n-  __ beq(CCR0, L_no_push);\n+  __ beq(CR0, L_no_push);\n@@ -2492,2 +2492,2 @@\n-    __ cmpwi(CCR0, Rscratch, 0);\n-    __ beq(CCR0, Lno_field_access_post);\n+    __ cmpwi(CR0, Rscratch, 0);\n+    __ beq(CR0, Lno_field_access_post);\n@@ -2577,2 +2577,2 @@\n-  __ cmpldi(CCR0, Rtos_state, number_of_states);\n-  __ bge(CCR0, LFlagInvalid);\n+  __ cmpldi(CR0, Rtos_state, number_of_states);\n+  __ bge(CR0, LFlagInvalid);\n@@ -2583,1 +2583,1 @@\n-  __ cmpwi(CCR2, Rscratch, 1); \/\/ Volatile?\n+  __ cmpwi(CR2, Rscratch, 1); \/\/ Volatile?\n@@ -2634,1 +2634,1 @@\n-    __ beq(CCR2, acquire_double); \/\/ Volatile?\n+    __ beq(CR2, acquire_double); \/\/ Volatile?\n@@ -2638,2 +2638,2 @@\n-    __ fcmpu(CCR0, F15_ftos, F15_ftos); \/\/ Acquire by cmp-br-isync.\n-    __ beq_predict_taken(CCR0, Lisync);\n+    __ fcmpu(CR0, F15_ftos, F15_ftos); \/\/ Acquire by cmp-br-isync.\n+    __ beq_predict_taken(CR0, Lisync);\n@@ -2655,1 +2655,1 @@\n-    __ beq(CCR2, acquire_float); \/\/ Volatile?\n+    __ beq(CR2, acquire_float); \/\/ Volatile?\n@@ -2659,2 +2659,2 @@\n-    __ fcmpu(CCR0, F15_ftos, F15_ftos); \/\/ Acquire by cmp-br-isync.\n-    __ beq_predict_taken(CCR0, Lisync);\n+    __ fcmpu(CR0, F15_ftos, F15_ftos); \/\/ Acquire by cmp-br-isync.\n+    __ beq_predict_taken(CR0, Lisync);\n@@ -2674,1 +2674,1 @@\n-  __ beq(CCR2, Lacquire); \/\/ Volatile?\n+  __ beq(CR2, Lacquire); \/\/ Volatile?\n@@ -2687,1 +2687,1 @@\n-  __ beq(CCR2, Lacquire); \/\/ Volatile?\n+  __ beq(CR2, Lacquire); \/\/ Volatile?\n@@ -2701,1 +2701,1 @@\n-  __ beq(CCR2, Lacquire); \/\/ Volatile?\n+  __ beq(CR2, Lacquire); \/\/ Volatile?\n@@ -2715,1 +2715,1 @@\n-  __ beq(CCR2, Lacquire); \/\/ Volatile?\n+  __ beq(CR2, Lacquire); \/\/ Volatile?\n@@ -2728,1 +2728,1 @@\n-  __ beq(CCR2, Lacquire); \/\/ Volatile?\n+  __ beq(CR2, Lacquire); \/\/ Volatile?\n@@ -2741,1 +2741,1 @@\n-  __ beq(CCR2, Lacquire); \/\/ Volatile?\n+  __ beq(CR2, Lacquire); \/\/ Volatile?\n@@ -2756,1 +2756,1 @@\n-  __ beq(CCR2, Lacquire); \/\/ Volatile?\n+  __ beq(CR2, Lacquire); \/\/ Volatile?\n@@ -2799,2 +2799,2 @@\n-    __ cmpwi(CCR0, Rscratch, 0);\n-    __ beq(CCR0, Lno_field_mod_post);\n+    __ cmpwi(CR0, Rscratch, 0);\n+    __ beq(CR0, Lno_field_mod_post);\n@@ -2833,2 +2833,2 @@\n-          __ cmpwi(CCR0, Rtos_state, ltos);\n-          __ cmpwi(CCR1, Rtos_state, dtos);\n+          __ cmpwi(CR0, Rtos_state, ltos);\n+          __ cmpwi(CR1, Rtos_state, dtos);\n@@ -2836,2 +2836,2 @@\n-          __ crnor(CCR0, Assembler::equal, CCR1, Assembler::equal);\n-          __ beq(CCR0, is_one_slot);\n+          __ crnor(CR0, Assembler::equal, CR1, Assembler::equal);\n+          __ beq(CR0, is_one_slot);\n@@ -2884,1 +2884,1 @@\n-  const ConditionRegister CR_is_vol = CCR2; \/\/ Non-volatile condition register (survives runtime call in do_oop_store).\n+  const ConditionRegister CR_is_vol = CR2; \/\/ Non-volatile condition register (survives runtime call in do_oop_store).\n@@ -2910,2 +2910,2 @@\n-  __ cmpldi(CCR0, Rtos_state, number_of_states);\n-  __ bge(CCR0, LFlagInvalid);\n+  __ cmpldi(CR0, Rtos_state, number_of_states);\n+  __ bge(CR0, LFlagInvalid);\n@@ -3127,1 +3127,1 @@\n-  const ConditionRegister CR_is_vol = CCR2; \/\/ Non-volatile condition register (survives runtime call in do_oop_store).\n+  const ConditionRegister CR_is_vol = CR2; \/\/ Non-volatile condition register (survives runtime call in do_oop_store).\n@@ -3142,1 +3142,1 @@\n-    __ beq(CCR0, LnotVolatile);\n+    __ beq(CR0, LnotVolatile);\n@@ -3222,1 +3222,1 @@\n-  __ bne(CCR0, LisVolatile);\n+  __ bne(CR0, LisVolatile);\n@@ -3310,2 +3310,2 @@\n-      __ fcmpu(CCR0, F15_ftos, F15_ftos); \/\/ Acquire by cmp-br-isync.\n-      __ bne_predict_not_taken(CCR0, Ldummy);\n+      __ fcmpu(CR0, F15_ftos, F15_ftos); \/\/ Acquire by cmp-br-isync.\n+      __ bne_predict_not_taken(CR0, Ldummy);\n@@ -3325,2 +3325,2 @@\n-      __ fcmpu(CCR0, F15_ftos, F15_ftos); \/\/ Acquire by cmp-br-isync.\n-      __ bne_predict_not_taken(CCR0, Ldummy);\n+      __ fcmpu(CR0, F15_ftos, F15_ftos); \/\/ Acquire by cmp-br-isync.\n+      __ bne_predict_not_taken(CR0, Ldummy);\n@@ -3363,1 +3363,1 @@\n-  __ bne(CCR0, LisVolatile);\n+  __ bne(CR0, LisVolatile);\n@@ -3401,2 +3401,2 @@\n-      __ fcmpu(CCR0, F15_ftos, F15_ftos); \/\/ Acquire by cmp-br-isync.\n-      __ bne_predict_not_taken(CCR0, Ldummy);\n+      __ fcmpu(CR0, F15_ftos, F15_ftos); \/\/ Acquire by cmp-br-isync.\n+      __ bne_predict_not_taken(CR0, Ldummy);\n@@ -3483,2 +3483,2 @@\n-  __ testbitdi(CCR0, R0, Rflags, ResolvedMethodEntry::is_vfinal_shift);\n-  __ bfalse(CCR0, LnotFinal);\n+  __ testbitdi(CR0, R0, Rflags, ResolvedMethodEntry::is_vfinal_shift);\n+  __ bfalse(CR0, LnotFinal);\n@@ -3590,2 +3590,2 @@\n-  __ testbitdi(CCR0, R0, Rflags, ResolvedMethodEntry::is_vfinal_shift);\n-  __ bfalse(CCR0, LnotFinal);\n+  __ testbitdi(CR0, R0, Rflags, ResolvedMethodEntry::is_vfinal_shift);\n+  __ bfalse(CR0, LnotFinal);\n@@ -3644,2 +3644,2 @@\n-  __ testbitdi(CCR0, R0, Rflags, ResolvedMethodEntry::is_forced_virtual_shift);\n-  __ bfalse(CCR0, LnotObjectMethod);\n+  __ testbitdi(CR0, R0, Rflags, ResolvedMethodEntry::is_forced_virtual_shift);\n+  __ bfalse(CR0, LnotObjectMethod);\n@@ -3655,2 +3655,2 @@\n-  __ testbitdi(CCR0, R0, Rflags, ResolvedMethodEntry::is_vfinal_shift);\n-  __ bfalse(CCR0, LnotVFinal);\n+  __ testbitdi(CR0, R0, Rflags, ResolvedMethodEntry::is_vfinal_shift);\n+  __ bfalse(CR0, LnotVFinal);\n@@ -3690,2 +3690,2 @@\n-  __ cmpdi(CCR0, Rmethod2, 0);\n-  __ beq(CCR0, Lthrow_ame);\n+  __ cmpdi(CR0, Rmethod2, 0);\n+  __ beq(CR0, Lthrow_ame);\n@@ -3798,2 +3798,2 @@\n-    __ cmpdi(CCR0, Rtags, JVM_CONSTANT_Class);\n-    __ bne(CCR0, Lslow_case);\n+    __ cmpdi(CR0, Rtags, JVM_CONSTANT_Class);\n+    __ bne(CR0, Lslow_case);\n@@ -3813,1 +3813,1 @@\n-    __ bne(CCR0, Lslow_case);\n+    __ bne(CR0, Lslow_case);\n@@ -3832,2 +3832,2 @@\n-    __ cmpld(CCR0, RnewTopValue, RendValue);\n-    __ bgt(CCR0, Lslow_case);\n+    __ cmpld(CR0, RnewTopValue, RendValue);\n+    __ bgt(CR0, Lslow_case);\n@@ -3950,2 +3950,2 @@\n-  __ cmpdi(CCR0, R17_tos, 0);\n-  __ beq(CCR0, Lis_null);\n+  __ cmpdi(CR0, R17_tos, 0);\n+  __ beq(CR0, Lis_null);\n@@ -3961,2 +3961,2 @@\n-  __ cmpdi(CCR0, Rtags, JVM_CONSTANT_Class);\n-  __ beq(CCR0, Lquicked);\n+  __ cmpdi(CR0, Rtags, JVM_CONSTANT_Class);\n+  __ beq(CR0, Lquicked);\n@@ -4012,2 +4012,2 @@\n-  __ cmpdi(CCR0, R17_tos, 0);\n-  __ beq(CCR0, Lis_null);\n+  __ cmpdi(CR0, R17_tos, 0);\n+  __ beq(CR0, Lis_null);\n@@ -4023,2 +4023,2 @@\n-  __ cmpdi(CCR0, Rtags, JVM_CONSTANT_Class);\n-  __ beq(CCR0, Lquicked);\n+  __ cmpdi(CR0, Rtags, JVM_CONSTANT_Class);\n+  __ beq(CR0, Lquicked);\n@@ -4130,2 +4130,2 @@\n-  __ cmpld(CCR0, Rcurrent_monitor, Rbot);\n-  __ beq(CCR0, Lallocate_new);\n+  __ cmpld(CR0, Rcurrent_monitor, Rbot);\n+  __ beq(CR0, Lallocate_new);\n@@ -4144,2 +4144,2 @@\n-    __ cmpd(CCR0, Rcurrent_obj, Robj_to_lock);\n-    __ beq(CCR0, Lexit); \/\/ recursive locking\n+    __ cmpd(CR0, Rcurrent_obj, Robj_to_lock);\n+    __ beq(CR0, Lexit); \/\/ recursive locking\n@@ -4147,2 +4147,2 @@\n-    __ cmpdi(CCR0, Rcurrent_obj, 0);\n-    __ bne(CCR0, LnotFree);\n+    __ cmpdi(CR0, Rcurrent_obj, 0);\n+    __ bne(CR0, LnotFree);\n@@ -4153,2 +4153,2 @@\n-    __ cmpld(CCR0, Rcurrent_monitor, Rbot);\n-    __ bne(CCR0, Lloop);\n+    __ cmpld(CR0, Rcurrent_monitor, Rbot);\n+    __ bne(CR0, Lloop);\n@@ -4160,2 +4160,2 @@\n-  __ cmpdi(CCR0, Rfree_slot, 0);\n-  __ bne(CCR0, Lfound);\n+  __ cmpdi(CR0, Rfree_slot, 0);\n+  __ bne(CR0, Lfound);\n@@ -4209,2 +4209,2 @@\n-  __ cmpld(CCR0, Rcurrent_monitor, Rbot);\n-  __ beq(CCR0, Lillegal_monitor_state);\n+  __ cmpld(CR0, Rcurrent_monitor, Rbot);\n+  __ beq(CR0, Lillegal_monitor_state);\n@@ -4219,2 +4219,2 @@\n-    __ cmpd(CCR0, Rcurrent_obj, Robj_to_lock);\n-    __ beq(CCR0, Lfound);\n+    __ cmpd(CR0, Rcurrent_obj, Robj_to_lock);\n+    __ beq(CR0, Lfound);\n@@ -4223,2 +4223,2 @@\n-    __ cmpld(CCR0, Rcurrent_monitor, Rbot);\n-    __ bne(CCR0, Lloop);\n+    __ cmpld(CR0, Rcurrent_monitor, Rbot);\n+    __ bne(CR0, Lloop);\n","filename":"src\/hotspot\/cpu\/ppc\/templateTable_ppc_64.cpp","additions":188,"deletions":188,"binary":false,"changes":376,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2024 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -94,2 +94,2 @@\n-    __ cmpwi(CCR0, vtable_len, vtable_index*vtableEntry::size());\n-    __ bge(CCR0, L);\n+    __ cmpwi(CR0, vtable_len, vtable_index*vtableEntry::size());\n+    __ bge(CR0, L);\n@@ -111,2 +111,2 @@\n-    __ cmpdi(CCR0, R19_method, 0);\n-    __ bne(CCR0, L);\n+    __ cmpdi(CR0, R19_method, 0);\n+    __ bne(CR0, L);\n@@ -197,2 +197,2 @@\n-    __ cmpdi(CCR0, R19_method, 0);\n-    __ bne(CCR0, ok);\n+    __ cmpdi(CR0, R19_method, 0);\n+    __ bne(CR0, ok);\n","filename":"src\/hotspot\/cpu\/ppc\/vtableStubs_ppc_64.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}