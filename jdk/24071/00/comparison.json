{"files":[{"patch":"@@ -49,1 +49,1 @@\n- * @build jdk.test.whitebox.WhiteBox BulkLoaderTest\n+ * @build BulkLoaderTest\n@@ -52,2 +52,1 @@\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. BulkLoaderTest DYNAMIC\n+ * @run driver BulkLoaderTest DYNAMIC\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/BulkLoaderTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -38,3 +38,1 @@\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. JavacBench DYNAMIC\n+ * @run driver JavacBench DYNAMIC\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/applications\/JavacBench.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.io.FileOutputStream;\n@@ -126,0 +127,1 @@\n+        map.put(\"vm.cds.sharing.enabled\", this::vmCDSSharingEnabled);\n@@ -150,0 +152,1 @@\n+        export(map.map);\n@@ -448,0 +451,10 @@\n+    \/**\n+     * Check if the current JVM process has loaded a CDS archive. If so, that means\n+     * the JDK contains a default CDS archive that's compatible with the current set of\n+     * VM options. This property is used by jdk.test.lib.cds.CDSAppTester to determine if\n+     * a custom base archive needs to be created for running dynamic CDS tests.\n+     *\/\n+    protected String vmCDSSharingEnabled() {\n+        return \"\" + WB.isSharingEnabled();\n+    }\n+\n@@ -833,0 +846,40 @@\n+    \/**\n+     * @return the directory specified with 'jtreg -workDir:<dir>'\n+     *\/\n+    private static Path getJtregWorkDir() {\n+        Path pwd = Paths.get(\"\").toAbsolutePath();\n+        Path dir = pwd;\n+        if (dir.getFileName().toString().matches(\"^[0-9]+$\")) {\n+            dir = dir.getParent();\n+        }\n+\n+        if (dir.getFileName().toString().equals(\"scratch\")) {\n+            return dir.getParent();\n+        }\n+        throw new RuntimeException(\"The current directory '\" + pwd +\n+                                   \"' does not end with \/scratch((\/[0-9]+)|)\");\n+    }\n+\n+    \/**\n+     * Writes the VM properties to a well-known location (workDir\/vm.properties)\n+     * so that the properties can be easily queried from the test cases using\n+     * the jdk.test.lib.VMPropsGetter class. This avoids the needs for using\n+     * WhiteBox in individual test cases.\n+     *\n+     * @param map the set of VM properties to be exported to the test cases.\n+     *\/\n+    protected static void export(Map<String, String> map) {\n+        Path workDir = getJtregWorkDir();\n+        Path output = workDir.resolve(\"vm.properties\");\n+        Properties props = new Properties();\n+        map.forEach((k, v) -> props.put(k, v));\n+\n+        try (FileOutputStream out = new FileOutputStream(output.toFile())) {\n+            props.store(out, \"VM properties computed by \" + VMProps.class.getName());\n+        } catch (IOException e) {\n+            e.printStackTrace(System.err);\n+            throw new RuntimeException(\"Failed to export properties into '\"\n+                    + output + \"'\", e);\n+        }\n+    }\n+\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -39,0 +39,23 @@\n+\n+# Allow querying of various System properties in @requires clauses\n+#\n+# Source files for classes that will be used at the beginning of each test suite run,\n+# to determine additional characteristics of the system for use with the @requires tag.\n+# Note: compiled bootlibs classes will be added to BCP.\n+requires.extraPropDefns = ..\/jtreg-ext\/requires\/VMProps.java\n+requires.extraPropDefns.bootlibs = ..\/lib\/jdk\/test\/whitebox\n+requires.extraPropDefns.libs = \\\n+    ..\/lib\/jdk\/test\/lib\/Platform.java \\\n+    ..\/lib\/jdk\/test\/lib\/Container.java\n+requires.extraPropDefns.javacOpts = \\\n+    --add-exports java.base\/jdk.internal.foreign=ALL-UNNAMED \\\n+    --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\n+requires.extraPropDefns.vmOpts = \\\n+    -XX:+UnlockDiagnosticVMOptions \\\n+    -XX:+LogVMOutput -XX:-DisplayVMOutput -XX:LogFile=vmprops.flags.final.vm.log \\\n+    -XX:+PrintFlagsFinal \\\n+    -XX:+WhiteBoxAPI \\\n+    --add-exports java.base\/jdk.internal.foreign=ALL-UNNAMED \\\n+    --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\n+requires.properties= \\\n+    vm.flagless\n","filename":"test\/lib-test\/TEST.ROOT","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @summary Unit Test for jdk.test.lib.VMPropsGetter.\n+ * @requires vm.flagless\n+ * @library \/test\/lib\n+ * @run driver VMPropsGetterTest\n+ * @run main VMPropsGetterTest\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.VMPropsGetter;\n+\n+public class VMPropsGetterTest {\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Sanity test: we should be able to read the vm.flagless property using VMPropsGetter.\n+        String key = \"vm.flagless\";\n+        String value = VMPropsGetter.get(key);\n+        Asserts.assertEQ(value, \"true\");\n+    }\n+}\n","filename":"test\/lib-test\/jdk\/test\/lib\/VMPropsGetterTest.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.test.lib;\n+\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+\n+public class VMPropsGetter {\n+    private static final Properties vmProps = init();\n+\n+    \/**\n+     * @return the directory specified with 'jtreg -workDir:<dir>'\n+     *\/\n+    private static Path getJtregWorkDir() {\n+        Path pwd = Paths.get(\"\").toAbsolutePath();\n+        Path dir = pwd;\n+        if (dir.getFileName().toString().matches(\"^[0-9]+$\")) {\n+            dir = dir.getParent();\n+        }\n+\n+        if (dir.getFileName().toString().equals(\"scratch\")) {\n+            return dir.getParent();\n+        }\n+        throw new RuntimeException(\"The current directory '\" + pwd +\n+                                   \"' does not end with \/scratch((\/[0-9]+)|)\");\n+    }\n+\n+    static Properties init() {\n+        Path workDir = getJtregWorkDir();\n+        Path input = workDir.resolve(\"vm.properties\");\n+        Properties props = new Properties();\n+\n+        try (FileInputStream in = new FileInputStream(input.toFile())) {\n+            props.load(in);\n+            System.out.println(\"Loaded \" + props.size() + \" propertis from '\" +\n+                               input + \"'\");\n+        } catch (IOException e) {\n+            e.printStackTrace(System.err);\n+            throw new RuntimeException(\"Failed to load properties from '\"\n+                                       + input + \"'\", e);\n+        }\n+\n+        return props;\n+    }\n+\n+    public static String get(String key) {\n+        return vmProps.getProperty(key);\n+    }\n+}\n","filename":"test\/lib\/jdk\/test\/lib\/VMPropsGetter.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -31,1 +31,1 @@\n-import jdk.test.whitebox.WhiteBox;\n+import jdk.test.lib.VMPropsGetter;\n@@ -260,1 +260,1 @@\n-    \/\/ VM options used by this test, we need to create a temporary static archive to be used with -XX:ArchiveClassesAtExit.\n+    \/\/ VM options used by this test, we need to create a temporary static archive.\n@@ -262,2 +262,1 @@\n-        WhiteBox wb = WhiteBox.getWhiteBox();\n-        if (wb.isSharingEnabled()) {\n+        if (\"true\".equals(VMPropsGetter.get(\"vm.cds.sharing.enabled\"))) {\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSAppTester.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}