{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1301,11 +1301,1 @@\n-            String srationalString;\n-            if(ivalue[1] != 0 && ivalue[0] % ivalue[1] == 0) {\n-                \/\/ If the denominator is a non-zero integral divisor\n-                \/\/ of the numerator then convert the fraction to be\n-                \/\/ with respect to a unity denominator.\n-                srationalString = (ivalue[0] \/ ivalue[1]) + \"\/1\";\n-            } else {\n-                \/\/ Use the values directly.\n-                srationalString = ivalue[0] + \"\/\" + ivalue[1];\n-            }\n-            return srationalString;\n+            return ivalue[0] + \"\/\" + ivalue[1];\n@@ -1314,11 +1304,1 @@\n-            String rationalString;\n-            if(lvalue[1] != 0L && lvalue[0] % lvalue[1] == 0) {\n-                \/\/ If the denominator is a non-zero integral divisor\n-                \/\/ of the numerator then convert the fraction to be\n-                \/\/ with respect to a unity denominator.\n-                rationalString = (lvalue[0] \/ lvalue[1]) + \"\/1\";\n-            } else {\n-                \/\/ Use the values directly.\n-                rationalString = lvalue[0] + \"\/\" + lvalue[1];\n-            }\n-            return rationalString;\n+            return lvalue[0] + \"\/\" + lvalue[1];\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/plugins\/tiff\/TIFFField.java","additions":3,"deletions":23,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,170 @@\n+\/*\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug     8152293\n+ * @summary Verify bounds check and no terms reduction for TIFF_[S]RATIONAL\n+ * @run     junit TIFFRationalTest\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import javax.imageio.plugins.tiff.TIFFField;\n+import javax.imageio.plugins.tiff.TIFFTag;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class TIFFRationalTest {\n+    \/\/ largest unsigned 32-bit integer\n+    private static final long MAX_UINT32 = 0xffffffffL;\n+\n+    \/\/ bogus TIFF tag number\n+    private static final int TAG_NUMBER = 12345;\n+\n+    private static Stream<Arguments> paramsSignedRational() {\n+\n+        int signedRationals[][] = {\n+            { -1,   0},\n+            { 11,  22},\n+            { 22,  11},\n+            {-11,  22},\n+            {-22,  11},\n+            { 11, -22},\n+            { 22, -11},\n+            {-11, -22},\n+            {-22, -11},\n+            {  0,  11},\n+            {  0, -11},\n+            { 11,  13},\n+            {-11,  13},\n+            { 11, -13},\n+            {105,  30},\n+            { 30, 105}\n+        };\n+\n+        final int n = signedRationals.length;\n+\n+        int type = TIFFTag.TIFF_SRATIONAL;\n+        TIFFTag tag = new TIFFTag(\"tag\", TAG_NUMBER, 1 << type);\n+        TIFFField f = new TIFFField(tag, type, n, signedRationals);\n+\n+        List<Arguments> list = new ArrayList<Arguments>();\n+        for (int i = 0; i < n; i++) {\n+            list.add(Arguments.of(f, i, signedRationals[i]));\n+        }\n+\n+        return list.stream();\n+    }\n+\n+    private static Stream<Arguments> paramsUnsignedRational() {\n+\n+        long unsignedRationals[][] = {\n+            {  1,  0},\n+            { 11, 22},\n+            { 22, 11},\n+            {  0, 11},\n+            { 11, 13},\n+            {105, 30},\n+            { 30, 105}\n+        };\n+\n+        final int n = unsignedRationals.length;\n+\n+        int type = TIFFTag.TIFF_RATIONAL;\n+        TIFFTag tag = new TIFFTag(\"tag\", TAG_NUMBER, 1 << type);\n+        TIFFField f = new TIFFField(tag, type, n, unsignedRationals);\n+\n+        List<Arguments> list = new ArrayList<Arguments>();\n+        for (int i = 0; i < n; i++) {\n+            list.add(Arguments.of(f, i, unsignedRationals[i]));\n+        }\n+\n+        return list.stream();\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"paramsSignedRational\")\n+    void signedRational(TIFFField f, int i, int[] expected) {\n+        int fraction[] = f.getAsSRational(i);\n+        assertEquals(expected[0], fraction[0],\n+                     \"numerator reduction failure: \" +\n+                     fraction[0] + \" != \" + expected[0]);\n+        assertEquals(expected[1], fraction[1],\n+                     \"denominator reduction failure: \" +\n+                     fraction[1] + \" != \" + expected[1]);\n+\n+        String s =\n+            Integer.toString(expected[0]) + \"\/\" +\n+            Integer.toString(expected[1]);\n+        assertEquals(s, f.getValueAsString(i),\n+                     \"invalid string representation\");\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"paramsUnsignedRational\")\n+    void unsignedRational(TIFFField f, int i, long[] expected) {\n+        long[] fraction = f.getAsRational(i);\n+        assertEquals(expected[0], fraction[0],\n+                     \"numerator reduction failure: \" +\n+                     fraction[0] + \" != \" + expected[0]);\n+        assertEquals(expected[1], fraction[1],\n+                     \"denominator reduction failure: \" +\n+                     fraction[1] + \" != \" + expected[1]);\n+\n+        String s =\n+            Long.toString(expected[0]) + \"\/\" +\n+            Long.toString(expected[1]);\n+        assertEquals(s, f.getValueAsString(i),\n+                     \"invalid string representation\");\n+    }\n+\n+    private static Stream<Arguments> aberrantRationals() {\n+        List<Arguments> list = new ArrayList<Arguments>();\n+\n+        list.add(Arguments.of(new long[] {-1,  1}));\n+        list.add(Arguments.of(new long[] { 1, -1}));\n+        list.add(Arguments.of(new long[] {-1, -1}));\n+        list.add(Arguments.of(new long[] {MAX_UINT32 + 1, 1}));\n+        list.add(Arguments.of(new long[] {1, MAX_UINT32 + 1}));\n+        list.add(Arguments.of(new long[] {MAX_UINT32 + 1, MAX_UINT32 + 1}));\n+\n+        return list.stream();\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"aberrantRationals\")\n+    void rationalOverflow(long[] frac) {\n+        int type = TIFFTag.TIFF_RATIONAL;\n+        TIFFTag tag = new TIFFTag(\"tag\", TAG_NUMBER, 1 << type);\n+        assertThrows(IllegalArgumentException.class,\n+                     () -> new TIFFField(tag, type, 1, new long[][]{frac}));\n+    }\n+}\n","filename":"test\/jdk\/javax\/imageio\/plugins\/tiff\/TIFFRationalTest.java","additions":170,"deletions":0,"binary":false,"changes":170,"status":"added"}]}