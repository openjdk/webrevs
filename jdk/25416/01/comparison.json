{"files":[{"patch":"@@ -560,1 +560,2 @@\n-        ConcurrentLinkedQueue<ReadSubscription> pendingSubscriptions = new ConcurrentLinkedQueue<>();\n+        private final ConcurrentLinkedQueue<ReadSubscription> pendingSubscriptions\n+                = new ConcurrentLinkedQueue<>();\n@@ -566,22 +567,2 @@\n-\n-            TubeSubscriber sub = FlowTube.asTubeSubscriber(s);\n-            ReadSubscription previous;\n-            while ((previous = pendingSubscriptions.poll()) != null) {\n-                if (debug.on())\n-                    debug.log(\"read publisher: dropping pending subscriber: \"\n-                              + previous.subscriber);\n-                previous.errorRef.compareAndSet(null, errorRef.get());\n-                \/\/ make sure no data will be routed to the old subscriber.\n-                previous.stopReading();\n-                previous.signalOnSubscribe();\n-                if (subscriptionImpl.completed) {\n-                    previous.signalCompletion();\n-                } else {\n-                    previous.subscriber.dropSubscription();\n-                }\n-            }\n-            ReadSubscription target = new ReadSubscription(subscriptionImpl, sub);\n-            pendingSubscriptions.offer(target);\n-\n-            if (debug.on()) debug.log(\"read publisher got new subscriber: \" + s);\n-            subscriptionImpl.signalSubscribe();\n+            if (debug.on()) debug.log(\"Offering new subscriber: %s\", s);\n+            subscriptionImpl.offer(FlowTube.asTubeSubscriber(s));\n@@ -956,1 +937,26 @@\n-            boolean handlePending() {\n+            synchronized void offer(TubeSubscriber sub) {\n+                ReadSubscription previous;\n+                while ((previous = pendingSubscriptions.poll()) != null) {\n+                    if (debug.on())\n+                        debug.log(\"read publisher: dropping pending subscriber: \"\n+                                + previous.subscriber);\n+                    previous.errorRef.compareAndSet(null, errorRef.get());\n+                    \/\/ make sure no data will be routed to the old subscriber.\n+                    previous.stopReading();\n+                    previous.signalOnSubscribe();\n+                    if (completed) {\n+                        previous.signalCompletion();\n+                    } else {\n+                        previous.subscriber.dropSubscription();\n+                    }\n+                }\n+                ReadSubscription target = new ReadSubscription(this, sub);\n+                pendingSubscriptions.offer(target);\n+\n+                if (debug.on()) {\n+                    debug.log(\"read publisher got new subscriber: \" + sub);\n+                }\n+                signalSubscribe();\n+            }\n+\n+            synchronized boolean handlePending() {\n@@ -959,0 +965,1 @@\n+                ReadSubscription current = subscription;\n@@ -964,3 +971,2 @@\n-                    ReadSubscription current = subscription;\n-                    if (current != null && current != pending && !completed) {\n-                        debug.log(\"dropping pending subscription for current %s\",\n+                    if (current != null && !completed) {\n+                        debug.log(\"dropping subscription for current %s\",\n@@ -968,0 +974,1 @@\n+                        current.stopReading();\n@@ -970,0 +977,3 @@\n+                    if (!pendingSubscriptions.isEmpty()) {\n+                        pending.stopReading();\n+                    }\n@@ -974,1 +984,1 @@\n-                        subscription = pending;\n+                        current = subscription = pending;\n@@ -1334,0 +1344,1 @@\n+        ensureReadingStopped();\n@@ -1338,0 +1349,14 @@\n+    \/**\n+     * This method ensure that we stop reading before\n+     * switching subscribers\n+     *\/\n+    private void ensureReadingStopped() {\n+        var readPublisher = this.readPublisher;\n+        if (readPublisher == null) return;\n+        var readSubscription = readPublisher.subscription;\n+        if (readSubscription == null) return;\n+        readSubscription.stopReading();\n+        var subscriptionImpl = readPublisher.subscriptionImpl;\n+        if (subscriptionImpl == null) return;\n+        subscriptionImpl.pauseReadEvent();\n+    }\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/SocketTube.java","additions":53,"deletions":28,"binary":false,"changes":81,"status":"modified"}]}