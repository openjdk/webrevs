{"files":[{"patch":"@@ -37,0 +37,1 @@\n+import java.util.LinkedHashSet;\n@@ -122,1 +123,2 @@\n-    Set<Element> foundParams = new HashSet<>();\n+    Set<Element> foundParams = new LinkedHashSet<>();\n+    Set<Element> foundTypeParams = new LinkedHashSet<>();\n@@ -228,0 +230,1 @@\n+        foundTypeParams.clear();\n@@ -258,2 +261,2 @@\n-            checkParamsDocumented(te.getTypeParameters());\n-            checkParamsDocumented(te.getRecordComponents());\n+            checkParamsDocumented(te.getTypeParameters(), true);\n+            checkParamsDocumented(te.getRecordComponents(), false);\n@@ -261,0 +264,2 @@\n+            \/\/ Note: although @params are not required in overriding methods it\n+            \/\/ would still be a good idea to check them if they are present.\n@@ -264,2 +269,2 @@\n-                    checkParamsDocumented(ee.getTypeParameters());\n-                    checkParamsDocumented(ee.getParameters());\n+                    checkParamsDocumented(ee.getTypeParameters(), true);\n+                    checkParamsDocumented(ee.getParameters(), false);\n@@ -966,1 +971,3 @@\n-            boolean unique = foundParams.add(paramElement);\n+            boolean unique = typaram\n+                    ? foundTypeParams.add(paramElement)\n+                    : foundParams.add(paramElement);\n@@ -977,2 +984,2 @@\n-    private void checkParamsDocumented(List<? extends Element> list) {\n-        if (foundInheritDoc)\n+    private void checkParamsDocumented(List<? extends Element> list, boolean isTypeParam) {\n+        if (foundInheritDoc || list.isEmpty()) {\n@@ -980,4 +987,7 @@\n-\n-        for (Element e: list) {\n-            if (!foundParams.contains(e)) {\n-                CharSequence paramName = (e.getKind() == ElementKind.TYPE_PARAMETER)\n+        }\n+        Set<Element> found = isTypeParam ? foundTypeParams : foundParams;\n+        var iter = found.iterator();\n+        var reportedOrderWarning = false;\n+        for (Element e : list) {\n+            if (!found.contains(e)) {\n+                CharSequence paramName = isTypeParam\n@@ -987,0 +997,3 @@\n+            } else if (!reportedOrderWarning && iter.hasNext() && !e.equals(iter.next())) {\n+                reportReference(\"dc.param.wrong.order\");\n+                reportedOrderWarning = true;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/Checker.java","additions":25,"deletions":12,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+dc.param.wrong.order = wrong order of @param tags\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/resources\/doclint.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug      4802275 4967243 8026567 8239804 8234682\n+ * @bug      4802275 4967243 8026567 8239804 8234682 8279931\n@@ -30,1 +30,1 @@\n- * @library  ..\/..\/lib\n+ * @library  \/tools\/lib ..\/..\/lib\n@@ -32,1 +32,1 @@\n- * @build    javadoc.tester.*\n+ * @build    toolbox.ToolBox javadoc.tester.*\n@@ -37,0 +37,3 @@\n+import toolbox.ToolBox;\n+\n+import java.nio.file.Path;\n@@ -45,0 +48,2 @@\n+    private final ToolBox tb = new ToolBox();\n+\n@@ -98,0 +103,76 @@\n+\n+    @Test\n+    public void testParamOrder(Path base) throws Exception {\n+        String contents = \"\"\"\n+                package pkg;\n+\n+                \/**\n+                 * Class with missing and unsorted param tags.\n+                 *\n+                 * @param <V> third type param\n+                 * @param <T> second type param\n+                 *\/\n+                public class C<S, T, V>{\n+                    \/**\n+                      * Method with unsorted param tags.\n+                      *\n+                      * @param i1 first param\n+                      * @param d1 third param\n+                      * @param i2 second param\n+                      * @param d2 fourth param\n+                      *\/\n+                    public void paramOrder(int i1, int i2, double d1, double d2) {\n+                    }\n+                }\n+                \"\"\";\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, contents);\n+\n+        \/\/ Run with all doclint groups enabled\n+        javadoc(\"-d\", base.resolve(\"out-warn\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"-Xdoclint:all\",\n+                \"pkg\");\n+        checkExit(Exit.OK);\n+        checkOutput(Output.OUT, true,\n+                \"C.java:9: warning: no @param for <S>\",\n+                \"C.java:9: warning: wrong order of @param tags\",\n+                \"C.java:18: warning: wrong order of @param tags\");\n+        checkOutput(\"pkg\/C.html\", true,\n+                \"\"\"\n+                    <dt>Type Parameters:<\/dt>\n+                    <dd><span id=\"type-param-T\"><code>T<\/code> - second type param<\/span><\/dd>\n+                    <dd><span id=\"type-param-V\"><code>V<\/code> - third type param<\/span><\/dd>\n+                    <\/dl>\"\"\",\n+                \"\"\"\n+                    <dt>Parameters:<\/dt>\n+                    <dd><code>i1<\/code> - first param<\/dd>\n+                    <dd><code>i2<\/code> - second param<\/dd>\n+                    <dd><code>d1<\/code> - third param<\/dd>\n+                    <dd><code>d2<\/code> - fourth param<\/dd>\n+                    <\/dl>\"\"\");\n+\n+        \/\/ Run with doclint enabled except for reference group\n+        javadoc(\"-d\", base.resolve(\"out-nowarn\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"-Xdoclint:all,-reference\",\n+                \"pkg\");\n+        checkExit(Exit.OK);\n+        checkOutput(Output.OUT, true,\n+                \"C.java:9: warning: no @param for <S>\");\n+        checkOutput(Output.OUT, false,\n+                \"warning: wrong order\");\n+        checkOutput(\"pkg\/C.html\", true,\n+                \"\"\"\n+                    <dt>Type Parameters:<\/dt>\n+                    <dd><span id=\"type-param-T\"><code>T<\/code> - second type param<\/span><\/dd>\n+                    <dd><span id=\"type-param-V\"><code>V<\/code> - third type param<\/span><\/dd>\n+                    <\/dl>\"\"\",\n+                \"\"\"\n+                    <dt>Parameters:<\/dt>\n+                    <dd><code>i1<\/code> - first param<\/dd>\n+                    <dd><code>i2<\/code> - second param<\/dd>\n+                    <dd><code>d1<\/code> - third param<\/dd>\n+                    <dd><code>d2<\/code> - fourth param<\/dd>\n+                    <\/dl>\"\"\");\n+    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testParamTaglet\/TestParamTaglet.java","additions":84,"deletions":3,"binary":false,"changes":87,"status":"modified"}]}