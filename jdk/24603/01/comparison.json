{"files":[{"patch":"@@ -37,2 +37,0 @@\n-import jdk.internal.access.JavaIOFilePermissionAccess;\n-import jdk.internal.access.SharedSecrets;\n@@ -40,1 +38,0 @@\n-import sun.security.util.FilePermCompat;\n@@ -42,0 +39,1 @@\n+import sun.security.util.SecurityProperties;\n@@ -158,0 +156,20 @@\n+    \/**\n+     * New behavior? Keep compatibility?\n+     * The new behavior does not use the canonical path normalization\n+     *\/\n+    private static final boolean nb = initNb();\n+\n+    \/\/ Initialize the nb flag from the System property jdk.io.permissionsUseCanonicalPath.\n+    private static boolean initNb() {\n+        String flag = SecurityProperties.getOverridableProperty(\n+                \"jdk.io.permissionsUseCanonicalPath\");\n+        return switch (flag) {\n+            case \"true\" -> false;   \/\/ compatibility mode to canonicalize paths\n+            case \"false\" -> true;   \/\/ do not canonicalize\n+            case null -> true;      \/\/ default, do not canonicalize\n+            default ->\n+                throw new RuntimeException(\n+                        \"Invalid jdk.io.permissionsUseCanonicalPath: \" + flag);\n+        };\n+    }\n+\n@@ -235,41 +253,17 @@\n-    static {\n-        SharedSecrets.setJavaIOFilePermissionAccess(\n-            \/**\n-             * Creates FilePermission objects with special internals.\n-             * See {@link FilePermCompat#newPermPlusAltPath(Permission)} and\n-             * {@link FilePermCompat#newPermUsingAltPath(Permission)}.\n-             *\/\n-            new JavaIOFilePermissionAccess() {\n-                public FilePermission newPermPlusAltPath(FilePermission input) {\n-                    if (!input.invalid && input.npath2 == null && !input.allFiles) {\n-                        Path npath2 = altPath(input.npath);\n-                        if (npath2 != null) {\n-                            \/\/ Please note the name of the new permission is\n-                            \/\/ different than the original so that when one is\n-                            \/\/ added to a FilePermissionCollection it will not\n-                            \/\/ be merged with the original one.\n-                            return new FilePermission(input.getName() + \"#plus\",\n-                                    input,\n-                                    input.npath,\n-                                    npath2,\n-                                    input.mask,\n-                                    input.actions);\n-                        }\n-                    }\n-                    return input;\n-                }\n-                public FilePermission newPermUsingAltPath(FilePermission input) {\n-                    if (!input.invalid && !input.allFiles) {\n-                        Path npath2 = altPath(input.npath);\n-                        if (npath2 != null) {\n-                            \/\/ New name, see above.\n-                            return new FilePermission(input.getName() + \"#using\",\n-                                    input,\n-                                    npath2,\n-                                    null,\n-                                    input.mask,\n-                                    input.actions);\n-                        }\n-                    }\n-                    return null;\n-                }\n+    \/\/ Construct a new Permission with altPath\n+    \/\/ Used by test FilePermissionCollectionMerge\n+    private FilePermission newPermPlusAltPath() {\n+        System.err.println(\"PlusAlt path: \" + this + \", npath: \" + npath);\n+        if (nb && !invalid && npath2 == null && !allFiles) {\n+            Path npath2 = altPath(npath);\n+            if (npath2 != null) {\n+                \/\/ Please note the name of the new permission is\n+                \/\/ different than the original so that when one is\n+                \/\/ added to a FilePermissionCollection it will not\n+                \/\/ be merged with the original one.\n+                return new FilePermission(getName() + \"#plus\",\n+                        this,\n+                        npath,\n+                        npath2,\n+                        mask,\n+                        actions);\n@@ -277,1 +271,2 @@\n-        );\n+        }\n+        return this;\n@@ -280,0 +275,21 @@\n+    \/\/ Construct a new Permission adding altPath\n+    \/\/ Used by test FilePermissionCollectionMerge\n+    private FilePermission newPermUsingAltPath() {\n+        System.err.println(\"Alt path: \" + this + \", npath: \" + npath);\n+        if (!invalid && !allFiles) {\n+            Path npath2 = altPath(npath);\n+            if (npath2 != null) {\n+                \/\/ New name, see above.\n+                return new FilePermission(getName() + \"#using\",\n+                        this,\n+                        npath2,\n+                        null,\n+                        mask,\n+                        actions);\n+            }\n+        }\n+        return this;\n+}\n+\n+\n+\n@@ -294,1 +310,1 @@\n-        if (FilePermCompat.nb) {\n+        if (nb) {\n@@ -570,1 +586,1 @@\n-        if (FilePermCompat.nb) {\n+        if (nb) {\n@@ -769,1 +785,1 @@\n-        if (FilePermCompat.nb) {\n+        if (nb) {\n@@ -792,1 +808,1 @@\n-        if (FilePermCompat.nb) {\n+        if (nb) {\n","filename":"src\/java.base\/share\/classes\/java\/io\/FilePermission.java","additions":65,"deletions":49,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -1,50 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.access;\n-\n-import java.io.FilePermission;\n-\n-public interface JavaIOFilePermissionAccess {\n-\n-    \/**\n-     * Returns a new FilePermission plus an alternative path.\n-     *\n-     * @param input the input\n-     * @return the new FilePermission plus the alt path (as npath2)\n-     *         or the input itself if no alt path is available.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    FilePermission newPermPlusAltPath(FilePermission input);\n-\n-    \/**\n-     * Returns a new FilePermission using an alternative path.\n-     *\n-     * @param input the input\n-     * @return the new FilePermission using the alt path (as npath)\n-     *         or null if no alt path is available\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    FilePermission newPermUsingAltPath(FilePermission input);\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaIOFilePermissionAccess.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -72,1 +72,0 @@\n-    private static JavaIOFilePermissionAccess javaIOFilePermissionAccess;\n@@ -290,14 +289,0 @@\n-    @SuppressWarnings(\"removal\")\n-    public static JavaIOFilePermissionAccess getJavaIOFilePermissionAccess() {\n-        var access = javaIOFilePermissionAccess;\n-        if (access == null) {\n-            ensureClassInitialized(FilePermission.class);\n-            access = javaIOFilePermissionAccess;\n-        }\n-        return access;\n-    }\n-\n-    public static void setJavaIOFilePermissionAccess(JavaIOFilePermissionAccess jiofpa) {\n-        javaIOFilePermissionAccess = jiofpa;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/SharedSecrets.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1,80 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.security.util;\n-\n-import java.io.FilePermission;\n-import java.security.Permission;\n-import jdk.internal.access.SharedSecrets;\n-\n-\/**\n- * Take care of FilePermission compatibility after JDK-8164705.\n- *\/\n-public class FilePermCompat {\n-    \/**\n-     * New behavior? Keep compatibility? Both default true.\n-     *\/\n-    public static final boolean nb;\n-    public static final boolean compat;\n-\n-    static {\n-        String flag = SecurityProperties.getOverridableProperty(\n-                \"jdk.io.permissionsUseCanonicalPath\");\n-        if (flag == null) {\n-            flag = \"false\";\n-        }\n-        switch (flag) {\n-            case \"true\":\n-                nb = false;\n-                compat = false;\n-                break;\n-            case \"false\":\n-                nb = true;\n-                compat = true;\n-                break;\n-            default:\n-                throw new RuntimeException(\n-                        \"Invalid jdk.io.permissionsUseCanonicalPath: \" + flag);\n-        }\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    public static Permission newPermPlusAltPath(Permission input) {\n-        if (compat && input instanceof FilePermission) {\n-            return SharedSecrets.getJavaIOFilePermissionAccess()\n-                    .newPermPlusAltPath((FilePermission) input);\n-        }\n-        return input;\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    public static Permission newPermUsingAltPath(Permission input) {\n-        if (input instanceof FilePermission) {\n-            return SharedSecrets.getJavaIOFilePermissionAccess()\n-                    .newPermUsingAltPath((FilePermission) input);\n-        }\n-        return null;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/FilePermCompat.java","additions":0,"deletions":80,"binary":false,"changes":80,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @bug 8168127\n+ * @bug 8168127 8354053\n@@ -29,1 +29,1 @@\n- * @modules java.base\/sun.security.util\n+ * @modules java.base\/java.io:open\n@@ -35,1 +35,0 @@\n-import sun.security.util.FilePermCompat;\n@@ -37,0 +36,1 @@\n+import java.lang.reflect.Method;\n@@ -38,0 +38,1 @@\n+\n@@ -40,0 +41,1 @@\n+@SuppressWarnings(\"removal\")\n@@ -53,1 +55,1 @@\n-    static void test(String arg) {\n+    static void test(String arg) throws Exception {\n@@ -55,0 +57,11 @@\n+        Method altPathMethod;\n+        Method plusAltPathMethod;\n+        try {\n+            altPathMethod = FilePermission.class.getDeclaredMethod(\"newPermUsingAltPath\");\n+            altPathMethod.setAccessible(true);\n+            plusAltPathMethod = FilePermission.class.getDeclaredMethod(\"newPermPlusAltPath\");\n+            plusAltPathMethod.setAccessible(true);\n+        } catch (Exception ex) {\n+            System.err.println(\"File permission compatibility initialization failed\");\n+            throw ex;\n+        }\n@@ -56,4 +69,2 @@\n-        FilePermission fp2 = (FilePermission)\n-                FilePermCompat.newPermUsingAltPath(fp1);\n-        FilePermission fp3 = (FilePermission)\n-                FilePermCompat.newPermPlusAltPath(fp1);\n+        FilePermission fp2 = (FilePermission) altPathMethod.invoke(fp1);\n+        FilePermission fp3 = (FilePermission) plusAltPathMethod.invoke(fp1);\n","filename":"test\/jdk\/java\/io\/FilePermission\/FilePermissionCollectionMerge.java","additions":20,"deletions":9,"binary":false,"changes":29,"status":"modified"}]}