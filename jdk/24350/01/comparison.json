{"files":[{"patch":"@@ -70,0 +70,2 @@\n+        public boolean isParm;\n+        public boolean isProj;\n@@ -82,0 +84,2 @@\n+            isParm = isParm(this);\n+            isProj = isProj(this);\n@@ -467,1 +471,14 @@\n-                unscheduled.add(n);\n+                if (!n.isParm && !n.isProj) {\n+                    unscheduled.add(n);\n+                } else {\n+                    \/\/ Schedule Parm and Proj nodes in same block as parent\n+                    Node prev = n.preds.get(0);\n+                    InputBlock blk = prev.block;\n+                    if (blk != null) {\n+                        n.block = blk;\n+                        blk.addNode(n.inputNode.getId());\n+                    } else {\n+                        \/\/ Fallback in the case parent has no block\n+                        unscheduled.add(n);\n+                    }\n+                }\n@@ -782,2 +799,4 @@\n-            } else if (n.inputNode.getProperties().get(\"type\").equals(\"bottom\")\n-                       && n.preds.size() > 0 &&\n+            } else if (n.inputNode.getProperties().get(\"type\").equals(\"bottom\") &&\n+                       n.preds.size() > 0 &&\n+                       n.succs.size() > 0 &&\n+                       n.succs.stream().findFirst().get().inputNode.getProperties().get(\"name\") == \"Root\" &&\n@@ -788,0 +807,1 @@\n+                \/\/ The root-as-successor check disallows machine nodes such as prefetchAlloc and rep_stos.\n","filename":"src\/utils\/IdealGraphVisualizer\/ServerCompiler\/src\/main\/java\/com\/sun\/hotspot\/igv\/servercompiler\/ServerCompilerScheduler.java","additions":23,"deletions":3,"binary":false,"changes":26,"status":"modified"}]}