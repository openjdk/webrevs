{"files":[{"patch":"@@ -457,5 +457,0 @@\n-\n-  if (FLAG_IS_DEFAULT(UseZicond)) {\n-    FLAG_SET_DEFAULT(UseZicond, false);\n-    warning(\"UseZicond is turned off automatically. Turn it on with -XX:+UseZicond explicitly.\");\n-  }\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -226,1 +226,3 @@\n-#endif\n+  \/\/ Currently tests shows that cmove using Zicond instructions will bring\n+  \/\/ performance regression, but to get a test coverage all the time, will\n+  \/\/ still prefer to enabling it in debug version.\n@@ -230,0 +232,1 @@\n+#endif\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/riscv_hwprobe.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+ *           | os.arch == \"riscv64\"\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}