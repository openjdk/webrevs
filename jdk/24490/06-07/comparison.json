{"files":[{"patch":"@@ -2173,1 +2173,2 @@\n-      cmov_cmp_fp_ge(op1, op2, dst, src, is_single);\n+      assert(false, \"Should go to BoolTest::le case\");\n+      ShouldNotReachHere();\n@@ -2179,1 +2180,2 @@\n-      cmov_cmp_fp_gt(op1, op2, dst, src, is_single);\n+      assert(false, \"Should go to BoolTest::lt case\");\n+      ShouldNotReachHere();\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1331,3 +1331,7 @@\n-\/\/ Clarification:\n-\/\/   java code      :  cmp2 < cmp1 ? dst : src\n-\/\/   transformed to :  CMove dst, (cmp1 le cmp2), dst, src\n+\/\/ Clarification\n+\/\/   scenario 1:\n+\/\/     java code      :  cmp2 < cmp1 ? dst : src\n+\/\/     transformed to :  CMove dst, (cmp1 le cmp2), dst, src\n+\/\/   scenario 2:\n+\/\/     java code      :  cmp1 > cmp2 ? dst : src\n+\/\/     transformed to :  CMove dst, (cmp1 le cmp2), dst, src\n@@ -1358,8 +1362,0 @@\n-\/\/ Clarification:\n-\/\/   java code      :  cmp1 > cmp2 ? dst : src\n-\/\/   transformed to :  CMove dst, (cmp1 le cmp2), dst, src\n-\/\/ So, cmov_le_fp is invoked instead this method.\n-void MacroAssembler::cmov_cmp_fp_ge(FloatRegister cmp1, FloatRegister cmp2, Register dst, Register src, bool is_single) {\n-  Unimplemented();\n-}\n-\n@@ -1367,3 +1363,7 @@\n-\/\/ Clarification:\n-\/\/   java code      :  cmp2 <= cmp1 ? dst : src\n-\/\/   transformed to :  CMove dst, (cmp1 lt cmp2), dst, src\n+\/\/ Clarification\n+\/\/   scenario 1:\n+\/\/     java code      :  cmp2 <= cmp1 ? dst : src\n+\/\/     transformed to :  CMove dst, (cmp1 lt cmp2), dst, src\n+\/\/   scenario 2:\n+\/\/     java code      :  cmp1 >= cmp2 ? dst : src\n+\/\/     transformed to :  CMove dst, (cmp1 lt cmp2), dst, src\n@@ -1394,7 +1394,0 @@\n-\/\/ Clarification:\n-\/\/   java code      :  cmp2 <= cmp1 ? dst : src\n-\/\/   transformed to :  CMove dst, (cmp1 lt cmp2), dst, src\n-void MacroAssembler::cmov_cmp_fp_gt(FloatRegister cmp1, FloatRegister cmp2, Register dst, Register src, bool is_single) {\n-  Unimplemented();\n-}\n-\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":14,"deletions":21,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -663,1 +663,0 @@\n-  void cmov_cmp_fp_ge(FloatRegister cmp1, FloatRegister cmp2, Register dst, Register src, bool is_single);\n@@ -665,1 +664,0 @@\n-  void cmov_cmp_fp_gt(FloatRegister cmp1, FloatRegister cmp2, Register dst, Register src, bool is_single);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -149,0 +149,1 @@\n+                    \"UseZicond\",\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/TestFramework.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}