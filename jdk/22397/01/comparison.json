{"files":[{"patch":"@@ -95,0 +95,24 @@\n+    \/**\n+     * The ML-KEM-512 parameters\n+     *\n+     * @since 24\n+     *\/\n+    public static final NamedParameterSpec ML_KEM_512\n+            = new NamedParameterSpec(\"ML-KEM-512\");\n+\n+    \/**\n+     * The ML-KEM-768 parameters\n+     *\n+     * @since 24\n+     *\/\n+    public static final NamedParameterSpec ML_KEM_768\n+            = new NamedParameterSpec(\"ML-KEM-768\");\n+\n+    \/**\n+     * The ML-KEM-1024 parameters\n+     *\n+     * @since 24\n+     *\/\n+    public static final NamedParameterSpec ML_KEM_1024\n+            = new NamedParameterSpec(\"ML-KEM-1024\");\n+\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/NamedParameterSpec.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8345057\n+ * @summary Test the existence of constants inside the\n+ *         java.security.spec.NamedParameterSpec class.\n+ * @run main TestNamedParameterSpec\n+ *\/\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.security.spec.NamedParameterSpec;\n+import java.util.Arrays;\n+import java.util.TreeSet;\n+\n+public class TestNamedParameterSpec {\n+\n+    \/\/ names of the static fields in NamedParameterSpec class\n+    private static String[] EXPECTED = {\n+        \"ED25519\", \"ED448\", \"X25519\", \"X448\",\n+        \"ML_DSA_44\", \"ML_DSA_65\", \"ML_DSA_87\",\n+        \"ML_KEM_512\", \"ML_KEM_768\", \"ML_KEM_1024\",\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        Arrays.sort(EXPECTED);\n+        var actual = getSortedConstNames(NamedParameterSpec.class);\n+        \/\/ both arrays should be sorted before comparison\n+        if (Arrays.compare(EXPECTED, actual) != 0) {\n+            System.out.println(\"expected: \" + Arrays.toString(EXPECTED));\n+            System.out.println(\"actual: \" + Arrays.toString(actual));\n+            throw new RuntimeException(\"Name check failed\");\n+        }\n+        System.out.println(\"Test Passed\");\n+    }\n+\n+    public static String[] getSortedConstNames(Class<?> clazz) {\n+        TreeSet<String> names = new TreeSet<String>();\n+        for (Field field : clazz.getDeclaredFields()) {\n+            int mods = field.getModifiers();\n+            if (Modifier.isPublic(mods) && Modifier.isStatic(mods)\n+                    && Modifier.isFinal(mods)){\n+                names.add(field.getName());\n+            }\n+        }\n+        return names.toArray(new String[0]);\n+    }\n+}\n","filename":"test\/jdk\/java\/security\/spec\/TestNamedParameterSpec.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}