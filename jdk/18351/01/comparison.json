{"files":[{"patch":"@@ -145,0 +145,1 @@\n+        private boolean downstreamProceed = true;\n@@ -176,1 +177,1 @@\n-            return cancellationRequested(proceed);\n+            return cancellationRequested(proceed && downstreamProceed);\n@@ -181,1 +182,1 @@\n-            return !(knownProceed && (!sink.cancellationRequested() || (proceed = false)));\n+            return !(knownProceed && (!sink.cancellationRequested() || (downstreamProceed = false)));\n@@ -197,1 +198,1 @@\n-            return !proceed;\n+            return !downstreamProceed;\n@@ -202,1 +203,1 @@\n-            var p = proceed;\n+            var p = downstreamProceed;\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/GathererOp.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Gatherer;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assumptions.*;\n+\n+\/**\n+ * @test\n+ * @bug 8328316\n+ * @summary Testing Gatherer behavior under short circuiting\n+ * @enablePreview\n+ * @run junit GathererShortCircuitTest\n+ *\/\n+\n+public class GathererShortCircuitTest {\n+    @Test\n+    public void mustBeAbleToPushFromFinisher() {\n+        Integer expected = 8328316;\n+        List<Integer> source = List.of(1,2,3,4,5);\n+\n+        Gatherer<Integer, ?, Integer> pushOneInFinisher =\n+                Gatherer.of(\n+                    (_, element, downstream) -> false,\n+                    (_ downstream) -> downstream.push(expected)\n+                );\n+\n+        var usingCollect =\n+            source.stream().gather(pushOneInFinisher).collect(Collectors.toList());\n+        var usingBuiltin =\n+            source.stream().gather(pushOneInFinisher).toList();\n+        var usingCollectPar =\n+            source.stream().parallel().gather(pushOneInFinisher).collect(Collectors.toList());\n+        var usingBuiltinPar =\n+            source.stream().parallel().gather(pushOneInFinisher).toList();\n+\n+        assertEquals(List.of(expected), usingCollect);\n+        assertEquals(List.of(expected), usingBuiltin);\n+        assertEquals(List.of(expected), usingCollectPar);\n+        assertEquals(List.of(expected), usingBuiltinPar);\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/stream\/GathererShortCircuitTest.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"}]}