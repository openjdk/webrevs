{"files":[{"patch":"@@ -313,0 +313,1 @@\n+    assert(!IS_THIS_EPOCH_CLEARED_BIT_SET(ptr), \"invariant\");\n@@ -314,0 +315,1 @@\n+  assert(IS_PREVIOUS_EPOCH_CLEARED_BIT_SET(ptr), \"invariant\");\n@@ -932,0 +934,1 @@\n+    assert(!IS_THIS_EPOCH_METHOD_CLEARED_BIT_SET(method), \"invariant\");\n@@ -935,0 +938,1 @@\n+  assert(IS_PREVIOUS_EPOCH_METHOD_CLEARED_BIT_SET(method), \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrTypeSet.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -99,0 +99,2 @@\n+    assert(IS_THIS_EPOCH_CLEARED_BIT_SET(value), \"invariant\");\n+    assert(IS_PREVIOUS_EPOCH_CLEARED_BIT_SET(value), \"invariant\");\n@@ -114,0 +116,2 @@\n+    assert(IS_THIS_EPOCH_METHOD_CLEARED_BIT_SET(method), \"invariant\");\n+    assert(IS_PREVIOUS_EPOCH_METHOD_CLEARED_BIT_SET(method), \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrTypeSetUtils.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-  return atomic_inc(&class_id_counter) << TRACE_ID_SHIFT;\n+  return (atomic_inc(&class_id_counter) << TRACE_ID_SHIFT) | EPOCH_CLEARED_BITS;\n@@ -58,1 +58,1 @@\n-  return atomic_inc(&module_id_counter) << TRACE_ID_SHIFT;\n+  return (atomic_inc(&module_id_counter) << TRACE_ID_SHIFT) | EPOCH_CLEARED_BITS;\n@@ -63,1 +63,1 @@\n-  return atomic_inc(&package_id_counter) << TRACE_ID_SHIFT;\n+  return (atomic_inc(&package_id_counter) << TRACE_ID_SHIFT) | EPOCH_CLEARED_BITS;\n@@ -68,1 +68,1 @@\n-  return atomic_inc(&cld_id_counter) << TRACE_ID_SHIFT;\n+  return (atomic_inc(&cld_id_counter) << TRACE_ID_SHIFT) | EPOCH_CLEARED_BITS;\n@@ -204,1 +204,1 @@\n-  \/\/ Mask off and store the event flags.\n+  \/\/ Mask off and store the event flags and epoch clear bits.\n@@ -208,1 +208,1 @@\n-  k->set_trace_id(EVENT_KLASS_MASK(k));\n+  k->set_trace_id(EPOCH_CLEARED_BITS | EVENT_KLASS_MASK(k));\n@@ -214,2 +214,2 @@\n-  \/\/ Clear all bits.\n-  method->set_trace_flags(0);\n+  \/\/ Clear tag bits and set epoch cleared bits.\n+  method->set_trace_flags(static_cast<uint16_t>(EPOCH_CLEARED_BITS));\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceId.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -160,1 +160,0 @@\n-  assert(METHOD_AND_CLASS_USED_THIS_EPOCH(klass), \"invariant\");\n@@ -163,0 +162,1 @@\n+  assert(METHOD_AND_CLASS_USED_THIS_EPOCH(klass), \"invariant\");\n@@ -177,1 +177,0 @@\n-  assert(METHOD_AND_CLASS_USED_PREVIOUS_EPOCH(klass), \"invariant\");\n@@ -180,0 +179,1 @@\n+  assert(METHOD_AND_CLASS_USED_PREVIOUS_EPOCH(klass), \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdLoadBarrier.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,1 @@\n+#define EPOCH_CLEARED_BITS                        (EPOCH_1_CLEARED_BIT | EPOCH_0_CLEARED_BIT)\n@@ -139,0 +140,2 @@\n+#define IS_THIS_EPOCH_CLEARED_BIT_SET(ptr)        (TRACE_ID_PREDICATE(ptr, (THIS_EPOCH_BIT << META_SHIFT)))\n+#define IS_PREVIOUS_EPOCH_CLEARED_BIT_SET(ptr)    (TRACE_ID_PREDICATE(ptr, (PREVIOUS_EPOCH_BIT << META_SHIFT)))\n@@ -164,0 +167,2 @@\n+#define IS_THIS_EPOCH_METHOD_CLEARED_BIT_SET(ptr) (METHOD_FLAG_PREDICATE(ptr, (THIS_EPOCH_BIT << META_SHIFT)))\n+#define IS_PREVIOUS_EPOCH_METHOD_CLEARED_BIT_SET(ptr) (METHOD_FLAG_PREDICATE(ptr, (PREVIOUS_EPOCH_BIT << META_SHIFT)))\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdMacros.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -47,0 +47,2 @@\n+static constexpr const uint16_t cleared_epoch_bits = 512 | 256;\n+\n@@ -51,1 +53,1 @@\n-  JfrTraceFlag() : _flags(0) {}\n+  JfrTraceFlag() : _flags(cleared_epoch_bits) {}\n@@ -99,3 +101,2 @@\n-  void copy_trace_flags(uint8_t src_flags) const { \\\n-    uint8_t flags = *_trace_flags.flags_addr();    \\\n-    _trace_flags.set_flags(flags | src_flags);     \\\n+  void copy_trace_flags(uint16_t rhs_flags) const { \\\n+    _trace_flags.set_flags(_trace_flags.flags() | rhs_flags); \\\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrTraceIdExtension.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1177,1 +1177,1 @@\n-      JFR_ONLY(k_new_method->copy_trace_flags(*k_old_method->trace_flags_addr());)\n+      JFR_ONLY(k_new_method->copy_trace_flags(k_old_method->trace_flags());)\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}