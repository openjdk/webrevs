{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,14 +79,1 @@\n-public class disable001 {\n-\n-    \/\/----------------------------------------------------- templete section\n-    static final int PASSED = 0;\n-    static final int FAILED = 2;\n-    static final int PASS_BASE = 95;\n-\n-    \/\/----------------------------------------------------- templete parameters\n-    static final String\n-    sHeader1 = \"\\n==> nsk\/jdi\/EventRequest\/disable\/disable001 \",\n-    sHeader2 = \"--> debugger: \",\n-    sHeader3 = \"##> debugger: \";\n-\n-    \/\/----------------------------------------------------- main method\n+public class disable001 extends JDIBase {\n@@ -113,14 +100,0 @@\n-    \/\/--------------------------------------------------   log procedures\n-\n-    private static Log  logHandler;\n-\n-    private static void log1(String message) {\n-        logHandler.display(sHeader1 + message);\n-    }\n-    private static void log2(String message) {\n-        logHandler.display(sHeader2 + message);\n-    }\n-    private static void log3(String message) {\n-        logHandler.complain(sHeader3 + message);\n-    }\n-\n@@ -135,2 +108,0 @@\n-    Location location = null;               \/\/ !!!!!!!!!!!!! see settingBreakpoint\n-\n@@ -138,19 +109,0 @@\n-    \/\/------------------------------------------------------ common section\n-\n-    static Debugee          debuggee;\n-    static ArgumentHandler  argsHandler;\n-\n-    static int waitTime;\n-\n-    static VirtualMachine      vm            = null;\n-    static EventRequestManager eventRManager = null;\n-    static EventQueue          eventQueue    = null;\n-    static EventSet            eventSet      = null;\n-    static EventIterator       eventIterator = null;\n-\n-    static ReferenceType       debuggeeClass = null;\n-\n-    static int  testExitCode = PASSED;\n-\n-\n-    \/\/------------------------------------------------------ methods\n@@ -295,8 +247,6 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n+        BreakpointRequest bpRequest =\n+            setupBreakpointForCommunication(debuggeeClass);\n+        \/\/ setupBreakpointForCommunication() defaults to SUSPEND_EVENT_THREAD. We need\n+        \/\/ to change this to SUSPEND_ALL.\n+        bpRequest.disable();\n+        bpRequest.setSuspendPolicy(EventRequest.SUSPEND_ALL);\n@@ -408,1 +358,1 @@\n-                     eventRequest1 = eventRManager.createBreakpointRequest(location);\n+                     eventRequest1 = eventRManager.createBreakpointRequest(breakpLocation);\n@@ -437,95 +387,0 @@\n-   \/*\n-    * private BreakpointRequest settingBreakpoint(ThreadReference, ReferenceType,\n-    *                                             String, String, String)\n-    *\n-    * It sets up a breakpoint at given line number within a given method in a given class\n-    * for a given thread.\n-    *\n-    * Return value: BreakpointRequest object  in case of success\n-    *\n-    * JDITestRuntimeException   in case of an Exception thrown within the method\n-    *\/\n-\n-    private BreakpointRequest settingBreakpoint ( ThreadReference thread,\n-                                                  ReferenceType testedClass,\n-                                                  String methodName,\n-                                                  String bpLine,\n-                                                  String property)\n-            throws JDITestRuntimeException {\n-\n-        log2(\"......setting up a breakpoint:\");\n-        log2(\"       thread: \" + thread + \"; class: \" + testedClass +\n-                        \"; method: \" + methodName + \"; line: \" + bpLine);\n-\n-        List              alllineLocations = null;\n-        Location          lineLocation     = null;\n-        BreakpointRequest breakpRequest    = null;\n-\n-        try {\n-            Method  method  = (Method) testedClass.methodsByName(methodName).get(0);\n-\n-            alllineLocations = method.allLineLocations();\n-\n-            int n =\n-                ( (IntegerValue) testedClass.getValue(testedClass.fieldByName(bpLine) ) ).value();\n-            if (n > alllineLocations.size()) {\n-                log3(\"ERROR:  TEST_ERROR_IN_settingBreakpoint(): number is out of bound of method's lines\");\n-            } else {\n-                lineLocation = (Location) alllineLocations.get(n);\n-\n-\/\/ this is only for this test to get Location object\n-location = lineLocation;\n-\n-                try {\n-                    breakpRequest = eventRManager.createBreakpointRequest(lineLocation);\n-                    breakpRequest.putProperty(\"number\", property);\n-                    breakpRequest.addThreadFilter(thread);\n-                    breakpRequest.setSuspendPolicy( EventRequest.SUSPEND_ALL);\n-                } catch ( Exception e1 ) {\n-                    log3(\"ERROR: inner Exception within settingBreakpoint() : \" + e1);\n-                    breakpRequest    = null;\n-                }\n-            }\n-        } catch ( Exception e2 ) {\n-            log3(\"ERROR: ATTENTION:  outer Exception within settingBreakpoint() : \" + e2);\n-            breakpRequest    = null;\n-        }\n-\n-        if (breakpRequest == null) {\n-            log2(\"      A BREAKPOINT HAS NOT BEEN SET UP\");\n-            throw new JDITestRuntimeException(\"**FAILURE to set up a breakpoint**\");\n-        }\n-\n-        log2(\"      a breakpoint has been set up\");\n-        return breakpRequest;\n-    }\n-\n-\n-    private void getEventSet()\n-                 throws JDITestRuntimeException {\n-        try {\n-\/\/            log2(\"       eventSet = eventQueue.remove(waitTime);\");\n-            eventSet = eventQueue.remove(waitTime);\n-            if (eventSet == null) {\n-                throw new JDITestRuntimeException(\"** TIMEOUT while waiting for event **\");\n-            }\n-\/\/            log2(\"       eventIterator = eventSet.eventIterator;\");\n-            eventIterator = eventSet.eventIterator();\n-        } catch ( Exception e ) {\n-            throw new JDITestRuntimeException(\"** EXCEPTION while waiting for event ** : \" + e);\n-        }\n-    }\n-\n-\n-    private void breakpointForCommunication()\n-                 throws JDITestRuntimeException {\n-\n-        log2(\"breakpointForCommunication\");\n-        getEventSet();\n-\n-        if (eventIterator.nextEvent() instanceof BreakpointEvent)\n-            return;\n-\n-        throw new JDITestRuntimeException(\"** event IS NOT a breakpoint **\");\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequest\/disable\/disable001.java","additions":9,"deletions":154,"binary":false,"changes":163,"status":"modified"}]}