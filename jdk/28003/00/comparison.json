{"files":[{"patch":"@@ -0,0 +1,150 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library \/test\/lib\n+ * @run main\/othervm DisabledCipherSuitesNotNegotiated client\n+ * @run main\/othervm DisabledCipherSuitesNotNegotiated server\n+ *\/\n+\n+import java.net.InetAddress;\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import jdk.test.lib.security.SecurityUtils;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLServerSocket;\n+import javax.net.ssl.SSLServerSocketFactory;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.net.ssl.SSLHandshakeException;\n+\n+public class DisabledCipherSuitesNotNegotiated {\n+    private static volatile int serverPort = 0;\n+    private static volatile Exception serverException = null;\n+\n+    private static final CountDownLatch waitForServer = new CountDownLatch(1);\n+    private static final int WAIT_FOR_SERVER_SECS = 5;\n+\n+    private static final String DISABLED_CIPHERSUITE = \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\";\n+    private static final String DISABLED_CIPHER_WILDCARD = \"TLS_ECDH*WITH_AES_256_GCM_*\";\n+\n+    private static void runServer(boolean disabledInClient) throws Exception {\n+        SSLContext ctx = SSLContext.getInstance(\"TLSv1.2\");\n+        ctx.init(null, null, null);\n+        SSLServerSocketFactory factory = ctx.getServerSocketFactory();\n+        try(SSLServerSocket serverSocket = (SSLServerSocket)factory\n+                .createServerSocket(0, -1, InetAddress.getLoopbackAddress())) {\n+            serverPort = serverSocket.getLocalPort();\n+            waitForServer.countDown();\n+\n+            if (disabledInClient) {\n+                \/\/ set cipher suite to disabled ciphersuite\n+                serverSocket.setEnabledCipherSuites(new String[]{DISABLED_CIPHERSUITE});\n+            }\n+\n+            try(SSLSocket clientSocket = (SSLSocket) serverSocket.accept()) {\n+                try {\n+                    clientSocket.getInputStream().readAllBytes();\n+                    throw new Exception(\"The expected handshake exception was not thrown.\");\n+                } catch (SSLHandshakeException exc) {\n+                    System.out.println(\"Server caught excepted SSLHandshakeException\");\n+                    exc.printStackTrace(System.out);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void runClient(boolean disableInClient, int portNumber) throws Exception {\n+        SSLContext ctx = SSLContext.getInstance(\"TLSv1.2\");\n+        ctx.init(null, null, null);\n+        SSLSocketFactory factory = ctx.getSocketFactory();\n+        try(SSLSocket socket = (SSLSocket)factory.createSocket(\"localhost\", portNumber)) {\n+            if (!disableInClient) {\n+                socket.setEnabledCipherSuites(new String[]{DISABLED_CIPHERSUITE});\n+            }\n+\n+            try {\n+                socket.getOutputStream().write(\"hello\".getBytes(StandardCharsets.UTF_8));\n+                throw new Exception(\"The expected handshake exception was not thrown.\");\n+            } catch (SSLHandshakeException exc) {\n+                System.out.println(\"Client caught excepted SSLHandshakeException\");\n+            }\n+        }\n+    }\n+\n+    public static void main(String [] args) throws Exception {\n+        if (args.length == 1) {\n+            final boolean disabledInClient = args[0].equals(\"client\");\n+            if (!disabledInClient) {\n+                SecurityUtils.addToDisabledTlsAlgs(DISABLED_CIPHER_WILDCARD);\n+            }\n+            try(ExecutorService executorService = Executors.newSingleThreadExecutor()) {\n+                executorService.submit(() -> {\n+                    try {\n+                        runServer(disabledInClient);\n+                    } catch (Exception exc) {\n+                        System.out.println(\"Server Exception:\");\n+                        exc.printStackTrace(System.out);\n+                        serverException = exc;\n+                        throw new RuntimeException(exc);\n+                    }\n+                });\n+\n+                if (!waitForServer.await(WAIT_FOR_SERVER_SECS, TimeUnit.SECONDS)) {\n+                    throw new Exception(\"Server did not start within \" +\n+                            WAIT_FOR_SERVER_SECS + \" seconds.\");\n+                }\n+\n+                System.out.printf(\"Server listening on port %d.%nStarting client process...\",\n+                        serverPort);\n+\n+                OutputAnalyzer oa = ProcessTools.executeProcess(\n+                        ProcessTools.createTestJavaProcessBuilder(\"DisabledCipherSuitesNotNegotiated\",\n+                                \"\" + disabledInClient, \"\" + serverPort));\n+                oa.shouldHaveExitValue(0);\n+                System.out.println(\"Client output:\");\n+                System.out.println(oa.getOutput());\n+                if (serverException != null) {\n+                    throw new Exception (\"Server-side threw an unexpected exception: \"\n+                            + serverException);\n+                }\n+            }\n+\n+        } else {\n+            boolean disabledInClient = Boolean.parseBoolean(args[0]);\n+            if (disabledInClient) {\n+                SecurityUtils.addToDisabledTlsAlgs(DISABLED_CIPHER_WILDCARD);\n+            }\n+            runClient(Boolean.parseBoolean(args[0]), Integer.parseInt(args[1]));\n+        }\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/DisabledCipherSuitesNotNegotiated.java","additions":150,"deletions":0,"binary":false,"changes":150,"status":"added"}]}