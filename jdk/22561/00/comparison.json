{"files":[{"patch":"@@ -972,5 +972,3 @@\n-    static void implMlKemNtt(short[] poly, short[] ntt_zetas) {\n-        implMlKemNttJava(poly);\n-    }\n-\n-    private static void implMlKemNttJava(short[] poly) {\n+    \/\/ The elements of poly should be in the range [-ML_KEM_Q, ML_KEM_Q]\n+    \/\/ The elements of poly at return will be in the range of [0, ML_KEM_Q]\n+    private void mlKemNTT(short[] poly) {\n@@ -985,6 +983,0 @@\n-    }\n-\n-    \/\/ The elements of poly should be in the range [-ML_KEM_Q, ML_KEM_Q]\n-    \/\/ The elements of poly at return will be in the range of [0, ML_KEM_Q]\n-    private void mlKemNTT(short[] poly) {\n-        implMlKemNtt(poly, MONT_ZETAS_FOR_VECTOR_NTT_ARR);\n@@ -994,5 +986,3 @@\n-    static void implMlKemInverseNtt(short[] poly, short[] zetas) {\n-        implMlKemInverseNttJava(poly);\n-    }\n-\n-    private static void implMlKemInverseNttJava(short[] poly) {\n+    \/\/ Works in place, but also returns its (modified) input so that it can\n+    \/\/ be used in expressions\n+    private short[] mlKemInverseNTT(short[] poly) {\n@@ -1007,6 +997,0 @@\n-    }\n-\n-    \/\/ Works in place, but also returns its (modified) input so that it can\n-    \/\/ be used in expressions\n-    private short[] mlKemInverseNTT(short[] poly) {\n-        implMlKemInverseNtt(poly, MONT_ZETAS_FOR_VECTOR_INVERSE_NTT_ARR);\n@@ -1103,8 +1087,4 @@\n-    static void implMlKemNttMult(short[] result, short[] ntta, short[] nttb,\n-                                short[] zetas) {\n-        implMlKemNttMultJava(result, ntta, nttb);\n-    }\n-\n-    private static void implMlKemNttMultJava(short[] result,\n-                                             short[] ntta, short[] nttb) {\n-\n+    \/\/ Multiplies two polynomials represented in the NTT domain.\n+    \/\/ The result is a representation of the product still in the NTT domain.\n+    \/\/ The coefficients in the result are in the range (-ML_KEM_Q, ML_KEM_Q).\n+    private void nttMult(short[] result, short[] ntta, short[] nttb) {\n@@ -1117,1 +1097,1 @@\n-                    montMul(montMul(a1, b1), MONT_ZETAS_FOR_NTT_MULT[m]);\n+                montMul(montMul(a1, b1), MONT_ZETAS_FOR_NTT_MULT[m]);\n@@ -1120,1 +1100,1 @@\n-                    (montMul(a0, b1) + montMul(a1, b0)), MONT_R_SQUARE_MOD_Q);\n+                (montMul(a0, b1) + montMul(a1, b0)), MONT_R_SQUARE_MOD_Q);\n@@ -1124,7 +1104,0 @@\n-    \/\/ Multiplies two polynomials represented in the NTT domain.\n-    \/\/ The result is a representation of the product still in the NTT domain.\n-    \/\/ The coefficients in the result are in the range (-ML_KEM_Q, ML_KEM_Q).\n-    private void nttMult(short[] result, short[] ntta, short[] nttb) {\n-        implMlKemNttMult(result, ntta, nttb, MONT_ZETAS_FOR_VECTOR_NTT_MULT_ARR);\n-    }\n-\n@@ -1145,11 +1118,0 @@\n-    static void implMlKemAddPoly(short[] result, short[] a, short[] b) {\n-        implMlKemAddPolyJava(result, a, b);\n-    }\n-\n-    private static void implMlKemAddPolyJava(short[] result, short[] a, short[] b) {\n-        for (int m = 0; m < ML_KEM_N; m++) {\n-            int r = a[m] + b[m] + ML_KEM_Q; \/\/ This makes r > -ML_KEM_Q\n-            result[m] = (short) r;\n-        }\n-    }\n-\n@@ -1162,10 +1124,0 @@\n-        implMlKemAddPoly(a, a, b);\n-    }\n-\n-    static void implMlKemAddPoly(short[] result, short[] a, short[] b, short[] c) {\n-        implMlKemAddPolyJava(result, a, b, c);\n-    }\n-\n-    private static void implMlKemAddPolyJava(short[] result, short[] a,\n-                                             short[] b, short[] c) {\n-\n@@ -1173,2 +1125,2 @@\n-            int r = a[m] + b[m] + c[m] + 2 * ML_KEM_Q; \/\/ This makes r > - ML_KEM_Q\n-            result[m] = (short) r;\n+            int r = a[m] + b[m] + ML_KEM_Q; \/\/ This makes r > -ML_KEM_Q\n+            a[m] = (short) r;\n@@ -1184,1 +1136,4 @@\n-        implMlKemAddPoly(a, a, b, c);\n+        for (int m = 0; m < ML_KEM_N; m++) {\n+            int r = a[m] + b[m] + c[m] + 2 * ML_KEM_Q; \/\/ This makes r > - ML_KEM_Q\n+            a[m] = (short) r;\n+        }\n@@ -1307,17 +1262,0 @@\n-    private static void implMlKem12To16(byte[] condensed, int index,\n-                                        short[] parsed, int parsedLength) {\n-\n-        implMlKem12To16Java(condensed, index, parsed, parsedLength);\n-    }\n-\n-    private static void implMlKem12To16Java(byte[] condensed, int index,\n-                                            short[] parsed, int parsedLength) {\n-\n-        for (int i = 0; i < parsedLength * 3 \/ 2; i += 3) {\n-            parsed[(i \/ 3) * 2] = (short) ((condensed[i + index] & 0xff) +\n-                    256 * (condensed[i + index + 1] & 0xf));\n-            parsed[(i \/ 3) * 2 + 1] = (short) (((condensed[i + index + 1] >>> 4) & 0xf) +\n-                    16 * (condensed[i + index + 2] & 0xff));\n-        }\n-    }\n-\n@@ -1333,1 +1271,6 @@\n-        implMlKem12To16(condensed, index, parsed, parsedLength);\n+        for (int i = 0; i < parsedLength * 3 \/ 2; i += 3) {\n+            parsed[(i \/ 3) * 2] = (short) ((condensed[i + index] & 0xff) +\n+                256 * (condensed[i + index + 1] & 0xf));\n+            parsed[(i \/ 3) * 2 + 1] = (short) (((condensed[i + index + 1] >>> 4) & 0xf) +\n+                16 * (condensed[i + index + 2] & 0xff));\n+        }\n@@ -1474,12 +1417,0 @@\n-    static void implMlKemBarrettReduce(short[] coeffs) {\n-        implMlKemBarrettReduceJava(coeffs);\n-    }\n-\n-    private static void implMlKemBarrettReduceJava(short[] coeffs) {\n-        for (int m = 0; m < ML_KEM_N; m++) {\n-            int tmp = ((int) coeffs[m] * BARRETT_MULTIPLIER) >>\n-                    BARRETT_SHIFT;\n-            coeffs[m] = (short) (coeffs[m] - tmp * ML_KEM_Q);\n-        }\n-    }\n-\n@@ -1496,1 +1427,5 @@\n-        implMlKemBarrettReduce(poly);\n+        for (int m = 0; m < ML_KEM_N; m++) {\n+            int tmp = ((int) poly[m] * BARRETT_MULTIPLIER) >>\n+                BARRETT_SHIFT;\n+            poly[m] = (short) (poly[m] - tmp * ML_KEM_Q);\n+        }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ML_KEM.java","additions":29,"deletions":94,"binary":false,"changes":123,"status":"modified"},{"patch":"@@ -1035,6 +1035,0 @@\n-        implMlDsaAlmostNttJava(coeffs);\n-        implMlDsaMontMulByConstantJava(coeffs,  MONT_R_MOD_Q);\n-        return coeffs;\n-    }\n-\n-    static void implMlDsaAlmostNttJava(int[] coeffs) {\n@@ -1053,5 +1047,1 @@\n-    }\n-\n-    public static int[] mlDsaInverseNtt(int[] coeffs) {\n-        implMlDsaAlmostInverseNttJava(coeffs);\n-        implMlDsaMontMulByConstantJava(coeffs, MONT_DIM_INVERSE);\n+        montMulByConstant(coeffs,  MONT_R_MOD_Q);\n@@ -1061,1 +1051,1 @@\n-    static void implMlDsaAlmostInverseNttJava(int[] coeffs) {\n+    public static int[] mlDsaInverseNtt(int[] coeffs) {\n@@ -1075,0 +1065,2 @@\n+        montMulByConstant(coeffs, MONT_DIM_INVERSE);\n+        return coeffs;\n@@ -1089,6 +1081,1 @@\n-    \/\/Todo\n-    public static void mlDsaNttMultiply(int[] res, int[] coeffs1, int[] coeffs2) {\n-        implMlDsaNttMultJava(res, coeffs1, coeffs2);\n-    }\n-\n-    static void implMlDsaNttMultJava(int[] product, int[] coeffs1, int[] coeffs2) {\n+    public static void mlDsaNttMultiply(int[] product, int[] coeffs1, int[] coeffs2) {\n@@ -1101,4 +1088,0 @@\n-        implMlDsaMontMulByConstantJava(coeffs, constant);\n-    }\n-\n-    static void implMlDsaMontMulByConstantJava(int[] coeffs, int constant) {\n@@ -1112,11 +1095,0 @@\n-        implMlDsaDecomposePoly(input, lowPart, highPart, twoGamma2, multiplier);\n-    }\n-\n-    @IntrinsicCandidate\n-    static void implMlDsaDecomposePoly(int[] input, int[] lowPart, int[] highPart,\n-                                          int twoGamma2, int multiplier) {\n-        decomposePolyJava(input, lowPart, highPart, twoGamma2, multiplier);\n-    }\n-\n-    static void decomposePolyJava(int[] input, int[] lowPart, int[] highPart,\n-                                 int twoGamma2, int multiplier) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/ML_DSA.java","additions":5,"deletions":33,"binary":false,"changes":38,"status":"modified"}]}