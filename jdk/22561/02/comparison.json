{"files":[{"patch":"@@ -74,243 +74,0 @@\n-    private static final short[] MONT_ZETAS_FOR_VECTOR_NTT_ARR = new short[]{\n-            \/\/ level 0\n-            -758, -758, -758, -758, -758, -758, -758, -758,\n-            -758, -758, -758, -758, -758, -758, -758, -758,\n-            -758, -758, -758, -758, -758, -758, -758, -758,\n-            -758, -758, -758, -758, -758, -758, -758, -758,\n-            -758, -758, -758, -758, -758, -758, -758, -758,\n-            -758, -758, -758, -758, -758, -758, -758, -758,\n-            -758, -758, -758, -758, -758, -758, -758, -758,\n-            -758, -758, -758, -758, -758, -758, -758, -758,\n-            -758, -758, -758, -758, -758, -758, -758, -758,\n-            -758, -758, -758, -758, -758, -758, -758, -758,\n-            -758, -758, -758, -758, -758, -758, -758, -758,\n-            -758, -758, -758, -758, -758, -758, -758, -758,\n-            -758, -758, -758, -758, -758, -758, -758, -758,\n-            -758, -758, -758, -758, -758, -758, -758, -758,\n-            -758, -758, -758, -758, -758, -758, -758, -758,\n-            -758, -758, -758, -758, -758, -758, -758, -758,\n-            \/\/ level 1\n-            -359, -359, -359, -359, -359, -359, -359, -359,\n-            -359, -359, -359, -359, -359, -359, -359, -359,\n-            -359, -359, -359, -359, -359, -359, -359, -359,\n-            -359, -359, -359, -359, -359, -359, -359, -359,\n-            -359, -359, -359, -359, -359, -359, -359, -359,\n-            -359, -359, -359, -359, -359, -359, -359, -359,\n-            -359, -359, -359, -359, -359, -359, -359, -359,\n-            -359, -359, -359, -359, -359, -359, -359, -359,\n-            -1517, -1517, -1517, -1517, -1517, -1517, -1517, -1517,\n-            -1517, -1517, -1517, -1517, -1517, -1517, -1517, -1517,\n-            -1517, -1517, -1517, -1517, -1517, -1517, -1517, -1517,\n-            -1517, -1517, -1517, -1517, -1517, -1517, -1517, -1517,\n-            -1517, -1517, -1517, -1517, -1517, -1517, -1517, -1517,\n-            -1517, -1517, -1517, -1517, -1517, -1517, -1517, -1517,\n-            -1517, -1517, -1517, -1517, -1517, -1517, -1517, -1517,\n-            -1517, -1517, -1517, -1517, -1517, -1517, -1517, -1517,\n-            \/\/ level 2\n-            1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,\n-            1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,\n-            1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,\n-            1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,\n-            1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422,\n-            1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422,\n-            1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422,\n-            1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422,\n-            287, 287, 287, 287, 287, 287, 287, 287,\n-            287, 287, 287, 287, 287, 287, 287, 287,\n-            287, 287, 287, 287, 287, 287, 287, 287,\n-            287, 287, 287, 287, 287, 287, 287, 287,\n-            202, 202, 202, 202, 202, 202, 202, 202,\n-            202, 202, 202, 202, 202, 202, 202, 202,\n-            202, 202, 202, 202, 202, 202, 202, 202,\n-            202, 202, 202, 202, 202, 202, 202, 202,\n-            \/\/ level 3\n-            -171, -171, -171, -171, -171, -171, -171, -171,\n-            -171, -171, -171, -171, -171, -171, -171, -171,\n-            622, 622, 622, 622, 622, 622, 622, 622,\n-            622, 622, 622, 622, 622, 622, 622, 622,\n-            1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577,\n-            1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577,\n-            182, 182, 182, 182, 182, 182, 182, 182,\n-            182, 182, 182, 182, 182, 182, 182, 182,\n-            962, 962, 962, 962, 962, 962, 962, 962,\n-            962, 962, 962, 962, 962, 962, 962, 962,\n-            -1202, -1202, -1202, -1202, -1202, -1202, -1202, -1202,\n-            -1202, -1202, -1202, -1202, -1202, -1202, -1202, -1202,\n-            -1474, -1474, -1474, -1474, -1474, -1474, -1474, -1474,\n-            -1474, -1474, -1474, -1474, -1474, -1474, -1474, -1474,\n-            1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,\n-            1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,\n-            \/\/ level 4\n-            573, 573, 573, 573, 573, 573, 573, 573,\n-            -1325, -1325, -1325, -1325, -1325, -1325, -1325, -1325,\n-            264, 264, 264, 264, 264, 264, 264, 264,\n-            383, 383, 383, 383, 383, 383, 383, 383,\n-            -829, -829, -829, -829, -829, -829, -829, -829,\n-            1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,\n-            -1602, -1602, -1602, -1602, -1602, -1602, -1602, -1602,\n-            -130, -130, -130, -130, -130, -130, -130, -130,\n-            -681, -681, -681, -681, -681, -681, -681, -681,\n-            1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017,\n-            732, 732, 732, 732, 732, 732, 732, 732,\n-            608, 608, 608, 608, 608, 608, 608, 608,\n-            -1542, -1542, -1542, -1542, -1542, -1542, -1542, -1542,\n-            411, 411, 411, 411, 411, 411, 411, 411,\n-            -205, -205, -205, -205, -205, -205, -205, -205,\n-            -1571, -1571, -1571, -1571, -1571, -1571, -1571, -1571,\n-            \/\/ level 5\n-            1223, 1223, 1223, 1223, 652, 652, 652, 652,\n-            -552, -552, -552, -552, 1015, 1015, 1015, 1015,\n-            -1293, -1293, -1293, -1293, 1491, 1491, 1491, 1491,\n-            -282, -282, -282, -282, -1544, -1544, -1544, -1544,\n-            516, 516, 516, 516, -8, -8, -8, -8,\n-            -320, -320, -320, -320, -666, -666, -666, -666,\n-            1711, 1711, 1711, 1711, -1162, -1162, -1162, -1162,\n-            126, 126, 126, 126, 1469, 1469, 1469, 1469,\n-            -853, -853, -853, -853, -90, -90, -90, -90,\n-            -271, -271, -271, -271, 830, 830, 830, 830,\n-            107, 107, 107, 107, -1421, -1421, -1421, -1421,\n-            -247, -247, -247, -247, -951, -951, -951, -951,\n-            -398, -398, -398, -398, 961, 961, 961, 961,\n-            -1508, -1508, -1508, -1508, -725, -725, -725, -725,\n-            448, 448, 448, 448, -1065, -1065, -1065, -1065,\n-            677, 677, 677, 677, -1275, -1275, -1275, -1275,\n-            \/\/ level 6\n-            -1103, -1103, 430, 430, 555, 555, 843, 843,\n-            -1251, -1251, 871, 871, 1550, 1550, 105, 105,\n-            422, 422, 587, 587, 177, 177, -235, -235,\n-            -291, -291, -460, -460, 1574, 1574, 1653, 1653,\n-            -246, -246, 778, 778, 1159, 1159, -147, -147,\n-            -777, -777, 1483, 1483, -602, -602, 1119, 1119,\n-            -1590, -1590, 644, 644, -872, -872, 349, 349,\n-            418, 418, 329, 329, -156, -156, -75, -75,\n-            817, 817, 1097, 1097, 603, 603, 610, 610,\n-            1322, 1322, -1285, -1285, -1465, -1465, 384, 384,\n-            -1215, -1215, -136, -136, 1218, 1218, -1335, -1335,\n-            -874, -874, 220, 220, -1187, -1187, 1670, 1670,\n-            -1185, -1185, -1530, -1530, -1278, -1278, 794, 794,\n-            -1510, -1510, -854, -854, -870, -870, 478, 478,\n-            -108, -108, -308, -308, 996, 996, 991, 991,\n-            958, 958, -1460, -1460, 1522, 1522, 1628, 1628\n-    };\n-    private static final short[] MONT_ZETAS_FOR_VECTOR_INVERSE_NTT_ARR = new short[]{\n-            \/\/ level 0\n-            -1628, -1628, -1522, -1522, 1460, 1460, -958, -958,\n-            -991, -991, -996, -996, 308, 308, 108, 108,\n-            -478, -478, 870, 870, 854, 854, 1510, 1510,\n-            -794, -794, 1278, 1278, 1530, 1530, 1185, 1185,\n-            1659, 1659, 1187, 1187, -220, -220, 874, 874,\n-            1335, 1335, -1218, -1218, 136, 136, 1215, 1215,\n-            -384, -384, 1465, 1465, 1285, 1285, -1322, -1322,\n-            -610, -610, -603, -603, -1097, -1097, -817, -817,\n-            75, 75, 156, 156, -329, -329, -418, -418,\n-            -349, -349, 872, 872, -644, -644, 1590, 1590,\n-            -1119, -1119, 602, 602, -1483, -1483, 777, 777,\n-            147, 147, -1159, -1159, -778, -778, 246, 246,\n-            -1653, -1653, -1574, -1574, 460, 460, 291, 291,\n-            235, 235, -177, -177, -587, -587, -422, -422,\n-            -105, -105, -1550, -1550, -871, -871, 1251, 1251,\n-            -843, -843, -555, -555, -430, -430, 1103, 1103,\n-            \/\/ level 1\n-            1275, 1275, 1275, 1275, -677, -677, -677, -677,\n-            1065, 1065, 1065, 1065, -448, -448, -448, -448,\n-            725, 725, 725, 725, 1508, 1508, 1508, 1508,\n-            -961, -961, -961, -961, 398, 398, 398, 398,\n-            951, 951, 951, 951, 247, 247, 247, 247,\n-            1421, 1421, 1421, 1421, -107, -107, -107, -107,\n-            -830, -830, -830, -830, 271, 271, 271, 271,\n-            90, 90, 90, 90, 853, 853, 853, 853,\n-            -1469, -1469, -1469, -1469, -126, -126, -126, -126,\n-            1162, 1162, 1162, 1162, 1618, 1618, 1618, 1618,\n-            666, 666, 666, 666, 320, 320, 320, 320,\n-            8, 8, 8, 8, -516, -516, -516, -516,\n-            1544, 1544, 1544, 1544, 282, 282, 282, 282,\n-            -1491, -1491, -1491, -1491, 1293, 1293, 1293, 1293,\n-            -1015, -1015, -1015, -1015, 552, 552, 552, 552,\n-            -652, -652, -652, -652, -1223, -1223, -1223, -1223,\n-            \/\/ level 2\n-            1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,\n-            205, 205, 205, 205, 205, 205, 205, 205,\n-            -411, -411, -411, -411, -411, -411, -411, -411,\n-            1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542,\n-            -608, -608, -608, -608, -608, -608, -608, -608,\n-            -732, -732, -732, -732, -732, -732, -732, -732,\n-            -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017,\n-            681, 681, 681, 681, 681, 681, 681, 681,\n-            130, 130, 130, 130, 130, 130, 130, 130,\n-            1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602,\n-            -1458, -1458, -1458, -1458, -1458, -1458, -1458, -1458,\n-            829, 829, 829, 829, 829, 829, 829, 829,\n-            -383, -383, -383, -383, -383, -383, -383, -383,\n-            -264, -264, -264, -264, -264, -264, -264, -264,\n-            1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,\n-            -573, -573, -573, -573, -573, -573, -573, -573,\n-            \/\/ level 3\n-            -1468, -1468, -1468, -1468, -1468, -1468, -1468, -1468,\n-            -1468, -1468, -1468, -1468, -1468, -1468, -1468, -1468,\n-            1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,\n-            1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,\n-            1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,\n-            1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,\n-            -962, -962, -962, -962, -962, -962, -962, -962,\n-            -962, -962, -962, -962, -962, -962, -962, -962,\n-            -182, -182, -182, -182, -182, -182, -182, -182,\n-            -182, -182, -182, -182, -182, -182, -182, -182,\n-            -1577, -1577, -1577, -1577, -1577, -1577, -1577, -1577,\n-            -1577, -1577, -1577, -1577, -1577, -1577, -1577, -1577,\n-            -622, -622, -622, -622, -622, -622, -622, -622,\n-            -622, -622, -622, -622, -622, -622, -622, -622,\n-            171, 171, 171, 171, 171, 171, 171, 171,\n-            171, 171, 171, 171, 171, 171, 171, 171,\n-            \/\/ level 4\n-            -202, -202, -202, -202, -202, -202, -202, -202,\n-            -202, -202, -202, -202, -202, -202, -202, -202,\n-            -202, -202, -202, -202, -202, -202, -202, -202,\n-            -202, -202, -202, -202, -202, -202, -202, -202,\n-            -287, -287, -287, -287, -287, -287, -287, -287,\n-            -287, -287, -287, -287, -287, -287, -287, -287,\n-            -287, -287, -287, -287, -287, -287, -287, -287,\n-            -287, -287, -287, -287, -287, -287, -287, -287,\n-            -1422, -1422, -1422, -1422, -1422, -1422, -1422, -1422,\n-            -1422, -1422, -1422, -1422, -1422, -1422, -1422, -1422,\n-            -1422, -1422, -1422, -1422, -1422, -1422, -1422, -1422,\n-            -1422, -1422, -1422, -1422, -1422, -1422, -1422, -1422,\n-            -1493, -1493, -1493, -1493, -1493, -1493, -1493, -1493,\n-            -1493, -1493, -1493, -1493, -1493, -1493, -1493, -1493,\n-            -1493, -1493, -1493, -1493, -1493, -1493, -1493, -1493,\n-            -1493, -1493, -1493, -1493, -1493, -1493, -1493, -1493,\n-            \/\/ level 5\n-            1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,\n-            1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,\n-            1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,\n-            1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,\n-            1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,\n-            1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,\n-            1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,\n-            1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,\n-            359, 359, 359, 359, 359, 359, 359, 359,\n-            359, 359, 359, 359, 359, 359, 359, 359,\n-            359, 359, 359, 359, 359, 359, 359, 359,\n-            359, 359, 359, 359, 359, 359, 359, 359,\n-            359, 359, 359, 359, 359, 359, 359, 359,\n-            359, 359, 359, 359, 359, 359, 359, 359,\n-            359, 359, 359, 359, 359, 359, 359, 359,\n-            359, 359, 359, 359, 359, 359, 359, 359,\n-            \/\/ level 6\n-            758, 758, 758, 758, 758, 758, 758, 758,\n-            758, 758, 758, 758, 758, 758, 758, 758,\n-            758, 758, 758, 758, 758, 758, 758, 758,\n-            758, 758, 758, 758, 758, 758, 758, 758,\n-            758, 758, 758, 758, 758, 758, 758, 758,\n-            758, 758, 758, 758, 758, 758, 758, 758,\n-            758, 758, 758, 758, 758, 758, 758, 758,\n-            758, 758, 758, 758, 758, 758, 758, 758,\n-            758, 758, 758, 758, 758, 758, 758, 758,\n-            758, 758, 758, 758, 758, 758, 758, 758,\n-            758, 758, 758, 758, 758, 758, 758, 758,\n-            758, 758, 758, 758, 758, 758, 758, 758,\n-            758, 758, 758, 758, 758, 758, 758, 758,\n-            758, 758, 758, 758, 758, 758, 758, 758,\n-            758, 758, 758, 758, 758, 758, 758, 758,\n-            758, 758, 758, 758, 758, 758, 758, 758\n-    };\n-\n@@ -336,19 +93,0 @@\n-    private static final short[] MONT_ZETAS_FOR_VECTOR_NTT_MULT_ARR = new short[]{\n-            -1103, 1103, 430, -430, 555, -555, 843, -843,\n-            -1251, 1251, 871, -871, 1550, -1550, 105, -105,\n-            422, -422, 587, -587, 177, -177, -235, 235,\n-            -291, 291, -460, 460, 1574, -1574, 1653, -1653,\n-            -246, 246, 778, -778, 1159, -1159, -147, 147,\n-            -777, 777, 1483, -1483, -602, 602, 1119, -1119,\n-            -1590, 1590, 644, -644, -872, 872, 349, -349,\n-            418, -418, 329, -329, -156, 156, -75, 75,\n-            817, -817, 1097, -1097, 603, -603, 610, -610,\n-            1322, -1322, -1285, 1285, -1465, 1465, 384, -384,\n-            -1215, 1215, -136, 136, 1218, -1218, -1335, 1335,\n-            -874, 874, 220, -220, -1187, 1187, 1670, 1659,\n-            -1185, 1185, -1530, 1530, -1278, 1278, 794, -794,\n-            -1510, 1510, -854, 854, -870, 870, 478, -478,\n-            -108, 108, -308, 308, 996, -996, 991, -991,\n-            958, -958, -1460, 1460, 1522, -1522, 1628, -1628\n-    };\n-\n@@ -502,1 +240,1 @@\n-            kPkePrivateKey.length, encapsKey.length);\n+                kPkePrivateKey.length, encapsKey.length);\n@@ -537,1 +275,1 @@\n-            randomMessage, randomCoins);\n+                randomMessage, randomCoins);\n@@ -567,1 +305,1 @@\n-            kPkePrivateKeyBytes.length);\n+                kPkePrivateKeyBytes.length);\n@@ -681,2 +419,2 @@\n-            new K_PKE_EncryptionKey(pkEncoded),\n-            new K_PKE_DecryptionKey(skEncoded));\n+                new K_PKE_EncryptionKey(pkEncoded),\n+                new K_PKE_DecryptionKey(skEncoded));\n@@ -972,5 +710,3 @@\n-    static void implMlKemNtt(short[] poly, short[] ntt_zetas) {\n-        implMlKemNttJava(poly);\n-    }\n-\n-    private static void implMlKemNttJava(short[] poly) {\n+    \/\/ The elements of poly should be in the range [-ML_KEM_Q, ML_KEM_Q]\n+    \/\/ The elements of poly at return will be in the range of [0, ML_KEM_Q]\n+    private void mlKemNTT(short[] poly) {\n@@ -985,6 +721,0 @@\n-    }\n-\n-    \/\/ The elements of poly should be in the range [-ML_KEM_Q, ML_KEM_Q]\n-    \/\/ The elements of poly at return will be in the range of [0, ML_KEM_Q]\n-    private void mlKemNTT(short[] poly) {\n-        implMlKemNtt(poly, MONT_ZETAS_FOR_VECTOR_NTT_ARR);\n@@ -994,5 +724,3 @@\n-    static void implMlKemInverseNtt(short[] poly, short[] zetas) {\n-        implMlKemInverseNttJava(poly);\n-    }\n-\n-    private static void implMlKemInverseNttJava(short[] poly) {\n+    \/\/ Works in place, but also returns its (modified) input so that it can\n+    \/\/ be used in expressions\n+    private short[] mlKemInverseNTT(short[] poly) {\n@@ -1007,6 +735,0 @@\n-    }\n-\n-    \/\/ Works in place, but also returns its (modified) input so that it can\n-    \/\/ be used in expressions\n-    private short[] mlKemInverseNTT(short[] poly) {\n-        implMlKemInverseNtt(poly, MONT_ZETAS_FOR_VECTOR_INVERSE_NTT_ARR);\n@@ -1103,8 +825,4 @@\n-    static void implMlKemNttMult(short[] result, short[] ntta, short[] nttb,\n-                                short[] zetas) {\n-        implMlKemNttMultJava(result, ntta, nttb);\n-    }\n-\n-    private static void implMlKemNttMultJava(short[] result,\n-                                             short[] ntta, short[] nttb) {\n-\n+    \/\/ Multiplies two polynomials represented in the NTT domain.\n+    \/\/ The result is a representation of the product still in the NTT domain.\n+    \/\/ The coefficients in the result are in the range (-ML_KEM_Q, ML_KEM_Q).\n+    private void nttMult(short[] result, short[] ntta, short[] nttb) {\n@@ -1124,7 +842,0 @@\n-    \/\/ Multiplies two polynomials represented in the NTT domain.\n-    \/\/ The result is a representation of the product still in the NTT domain.\n-    \/\/ The coefficients in the result are in the range (-ML_KEM_Q, ML_KEM_Q).\n-    private void nttMult(short[] result, short[] ntta, short[] nttb) {\n-        implMlKemNttMult(result, ntta, nttb, MONT_ZETAS_FOR_VECTOR_NTT_MULT_ARR);\n-    }\n-\n@@ -1145,11 +856,0 @@\n-    static void implMlKemAddPoly(short[] result, short[] a, short[] b) {\n-        implMlKemAddPolyJava(result, a, b);\n-    }\n-\n-    private static void implMlKemAddPolyJava(short[] result, short[] a, short[] b) {\n-        for (int m = 0; m < ML_KEM_N; m++) {\n-            int r = a[m] + b[m] + ML_KEM_Q; \/\/ This makes r > -ML_KEM_Q\n-            result[m] = (short) r;\n-        }\n-    }\n-\n@@ -1162,10 +862,0 @@\n-        implMlKemAddPoly(a, a, b);\n-    }\n-\n-    static void implMlKemAddPoly(short[] result, short[] a, short[] b, short[] c) {\n-        implMlKemAddPolyJava(result, a, b, c);\n-    }\n-\n-    private static void implMlKemAddPolyJava(short[] result, short[] a,\n-                                             short[] b, short[] c) {\n-\n@@ -1173,2 +863,2 @@\n-            int r = a[m] + b[m] + c[m] + 2 * ML_KEM_Q; \/\/ This makes r > - ML_KEM_Q\n-            result[m] = (short) r;\n+            int r = a[m] + b[m] + ML_KEM_Q; \/\/ This makes r > -ML_KEM_Q\n+            a[m] = (short) r;\n@@ -1184,1 +874,4 @@\n-        implMlKemAddPoly(a, a, b, c);\n+        for (int m = 0; m < ML_KEM_N; m++) {\n+            int r = a[m] + b[m] + c[m] + 2 * ML_KEM_Q; \/\/ This makes r > - ML_KEM_Q\n+            a[m] = (short) r;\n+        }\n@@ -1307,17 +1000,0 @@\n-    private static void implMlKem12To16(byte[] condensed, int index,\n-                                        short[] parsed, int parsedLength) {\n-\n-        implMlKem12To16Java(condensed, index, parsed, parsedLength);\n-    }\n-\n-    private static void implMlKem12To16Java(byte[] condensed, int index,\n-                                            short[] parsed, int parsedLength) {\n-\n-        for (int i = 0; i < parsedLength * 3 \/ 2; i += 3) {\n-            parsed[(i \/ 3) * 2] = (short) ((condensed[i + index] & 0xff) +\n-                    256 * (condensed[i + index + 1] & 0xf));\n-            parsed[(i \/ 3) * 2 + 1] = (short) (((condensed[i + index + 1] >>> 4) & 0xf) +\n-                    16 * (condensed[i + index + 2] & 0xff));\n-        }\n-    }\n-\n@@ -1333,1 +1009,6 @@\n-        implMlKem12To16(condensed, index, parsed, parsedLength);\n+        for (int i = 0; i < parsedLength * 3 \/ 2; i += 3) {\n+            parsed[(i \/ 3) * 2] = (short) ((condensed[i + index] & 0xff) +\n+                    256 * (condensed[i + index + 1] & 0xf));\n+            parsed[(i \/ 3) * 2 + 1] = (short) (((condensed[i + index + 1] >>> 4) & 0xf) +\n+                    16 * (condensed[i + index + 2] & 0xff));\n+        }\n@@ -1474,12 +1155,0 @@\n-    static void implMlKemBarrettReduce(short[] coeffs) {\n-        implMlKemBarrettReduceJava(coeffs);\n-    }\n-\n-    private static void implMlKemBarrettReduceJava(short[] coeffs) {\n-        for (int m = 0; m < ML_KEM_N; m++) {\n-            int tmp = ((int) coeffs[m] * BARRETT_MULTIPLIER) >>\n-                    BARRETT_SHIFT;\n-            coeffs[m] = (short) (coeffs[m] - tmp * ML_KEM_Q);\n-        }\n-    }\n-\n@@ -1496,1 +1165,4 @@\n-        implMlKemBarrettReduce(poly);\n+        for (int m = 0; m < ML_KEM_N; m++) {\n+            int tmp = ((int) poly[m] * BARRETT_MULTIPLIER) >> BARRETT_SHIFT;\n+            poly[m] = (short) (poly[m] - tmp * ML_KEM_Q);\n+        }\n@@ -1506,2 +1178,2 @@\n-        int m = ((MONT_Q_INV_MOD_R * aLow) << (32 - MONT_R_BITS)) >>\n-                (32 - MONT_R_BITS); \/\/ signed low product\n+        \/\/ signed low product\n+        int m = ((MONT_Q_INV_MOD_R * aLow) << (32 - MONT_R_BITS)) >> (32 - MONT_R_BITS);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ML_KEM.java","additions":33,"deletions":361,"binary":false,"changes":394,"status":"modified"},{"patch":"@@ -40,13 +40,0 @@\n-    static int name2int(String name) {\n-        if (name.endsWith(\"512\")) {\n-            return 512;\n-        } else if (name.endsWith(\"768\")) {\n-            return 768;\n-        } else if (name.endsWith(\"1024\")) {\n-            return 1024;\n-        } else {\n-            \/\/ should not happen\n-            throw new ProviderException(\"Unknown name \" + name);\n-        }\n-    }\n-\n@@ -169,7 +156,2 @@\n-            try {\n-                decapsulateResult = mlKem.decapsulate(\n-                        new ML_KEM.ML_KEM_DecapsulationKey(\n-                            decapsulationKey), kpkeCipherText);\n-            } catch (DecapsulateException e) {\n-                throw new DecapsulateException(\"Decapsulate error\", e) ;\n-            }\n+            decapsulateResult = mlKem.decapsulate(new ML_KEM.ML_KEM_DecapsulationKey(\n+                    decapsulationKey), kpkeCipherText);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ML_KEM_Impls.java","additions":2,"deletions":20,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import jdk.internal.vm.annotation.IntrinsicCandidate;\n@@ -530,1 +529,1 @@\n-                    ((v[vOffset+1] << 8) & 0x3FF);\n+                        ((v[vOffset+1] << 8) & 0x3FF);\n@@ -532,1 +531,1 @@\n-                    ((v[vOffset+2] << 6) & 0x3FF);\n+                        ((v[vOffset+2] << 6) & 0x3FF);\n@@ -534,1 +533,1 @@\n-                    ((v[vOffset+3] << 4) & 0x3FF);\n+                        ((v[vOffset+3] << 4) & 0x3FF);\n@@ -536,1 +535,1 @@\n-                    ((v[vOffset+4] << 2) & 0x3FF);\n+                        ((v[vOffset+4] << 2) & 0x3FF);\n@@ -878,2 +877,2 @@\n-                        ((rawAij[rawOfs + 1] & 0xFF) << 8) +\n-                        ((rawAij[rawOfs + 2] & 0x7F) << 16);\n+                            ((rawAij[rawOfs + 1] & 0xFF) << 8) +\n+                            ((rawAij[rawOfs + 2] & 0x7F) << 16);\n@@ -984,1 +983,1 @@\n-                highPart[i], gamma2 * 2, multiplier);\n+                    highPart[i], gamma2 * 2, multiplier);\n@@ -1035,6 +1034,0 @@\n-        implMlDsaAlmostNttJava(coeffs);\n-        implMlDsaMontMulByConstantJava(coeffs,  MONT_R_MOD_Q);\n-        return coeffs;\n-    }\n-\n-    static void implMlDsaAlmostNttJava(int[] coeffs) {\n@@ -1053,5 +1046,1 @@\n-    }\n-\n-    public static int[] mlDsaInverseNtt(int[] coeffs) {\n-        implMlDsaAlmostInverseNttJava(coeffs);\n-        implMlDsaMontMulByConstantJava(coeffs, MONT_DIM_INVERSE);\n+        montMulByConstant(coeffs,  MONT_R_MOD_Q);\n@@ -1061,1 +1050,1 @@\n-    static void implMlDsaAlmostInverseNttJava(int[] coeffs) {\n+    public static int[] mlDsaInverseNtt(int[] coeffs) {\n@@ -1070,1 +1059,1 @@\n-                        MONT_ZETAS_FOR_INVERSE_NTT[m]);\n+                            MONT_ZETAS_FOR_INVERSE_NTT[m]);\n@@ -1075,0 +1064,2 @@\n+        montMulByConstant(coeffs, MONT_DIM_INVERSE);\n+        return coeffs;\n@@ -1089,6 +1080,1 @@\n-    \/\/Todo\n-    public static void mlDsaNttMultiply(int[] res, int[] coeffs1, int[] coeffs2) {\n-        implMlDsaNttMultJava(res, coeffs1, coeffs2);\n-    }\n-\n-    static void implMlDsaNttMultJava(int[] product, int[] coeffs1, int[] coeffs2) {\n+    public static void mlDsaNttMultiply(int[] product, int[] coeffs1, int[] coeffs2) {\n@@ -1101,4 +1087,0 @@\n-        implMlDsaMontMulByConstantJava(coeffs, constant);\n-    }\n-\n-    static void implMlDsaMontMulByConstantJava(int[] coeffs, int constant) {\n@@ -1112,11 +1094,0 @@\n-        implMlDsaDecomposePoly(input, lowPart, highPart, twoGamma2, multiplier);\n-    }\n-\n-    @IntrinsicCandidate\n-    static void implMlDsaDecomposePoly(int[] input, int[] lowPart, int[] highPart,\n-                                          int twoGamma2, int multiplier) {\n-        decomposePolyJava(input, lowPart, highPart, twoGamma2, multiplier);\n-    }\n-\n-    static void decomposePolyJava(int[] input, int[] lowPart, int[] highPart,\n-                                 int twoGamma2, int multiplier) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/ML_DSA.java","additions":13,"deletions":42,"binary":false,"changes":55,"status":"modified"}]}