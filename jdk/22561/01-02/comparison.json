{"files":[{"patch":"@@ -240,1 +240,1 @@\n-            kPkePrivateKey.length, encapsKey.length);\n+                kPkePrivateKey.length, encapsKey.length);\n@@ -275,1 +275,1 @@\n-            randomMessage, randomCoins);\n+                randomMessage, randomCoins);\n@@ -305,1 +305,1 @@\n-            kPkePrivateKeyBytes.length);\n+                kPkePrivateKeyBytes.length);\n@@ -419,2 +419,2 @@\n-            new K_PKE_EncryptionKey(pkEncoded),\n-            new K_PKE_DecryptionKey(skEncoded));\n+                new K_PKE_EncryptionKey(pkEncoded),\n+                new K_PKE_DecryptionKey(skEncoded));\n@@ -835,1 +835,1 @@\n-                montMul(montMul(a1, b1), MONT_ZETAS_FOR_NTT_MULT[m]);\n+                    montMul(montMul(a1, b1), MONT_ZETAS_FOR_NTT_MULT[m]);\n@@ -838,1 +838,1 @@\n-                (montMul(a0, b1) + montMul(a1, b0)), MONT_R_SQUARE_MOD_Q);\n+                    (montMul(a0, b1) + montMul(a1, b0)), MONT_R_SQUARE_MOD_Q);\n@@ -1011,1 +1011,1 @@\n-                256 * (condensed[i + index + 1] & 0xf));\n+                    256 * (condensed[i + index + 1] & 0xf));\n@@ -1013,1 +1013,1 @@\n-                16 * (condensed[i + index + 2] & 0xff));\n+                    16 * (condensed[i + index + 2] & 0xff));\n@@ -1166,2 +1166,1 @@\n-            int tmp = ((int) poly[m] * BARRETT_MULTIPLIER) >>\n-                BARRETT_SHIFT;\n+            int tmp = ((int) poly[m] * BARRETT_MULTIPLIER) >> BARRETT_SHIFT;\n@@ -1179,2 +1178,2 @@\n-        int m = ((MONT_Q_INV_MOD_R * aLow) << (32 - MONT_R_BITS)) >>\n-                (32 - MONT_R_BITS); \/\/ signed low product\n+        \/\/ signed low product\n+        int m = ((MONT_Q_INV_MOD_R * aLow) << (32 - MONT_R_BITS)) >> (32 - MONT_R_BITS);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ML_KEM.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -40,13 +40,0 @@\n-    static int name2int(String name) {\n-        if (name.endsWith(\"512\")) {\n-            return 512;\n-        } else if (name.endsWith(\"768\")) {\n-            return 768;\n-        } else if (name.endsWith(\"1024\")) {\n-            return 1024;\n-        } else {\n-            \/\/ should not happen\n-            throw new ProviderException(\"Unknown name \" + name);\n-        }\n-    }\n-\n@@ -169,7 +156,2 @@\n-            try {\n-                decapsulateResult = mlKem.decapsulate(\n-                        new ML_KEM.ML_KEM_DecapsulationKey(\n-                            decapsulationKey), kpkeCipherText);\n-            } catch (DecapsulateException e) {\n-                throw new DecapsulateException(\"Decapsulate error\", e) ;\n-            }\n+            decapsulateResult = mlKem.decapsulate(new ML_KEM.ML_KEM_DecapsulationKey(\n+                    decapsulationKey), kpkeCipherText);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ML_KEM_Impls.java","additions":2,"deletions":20,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import jdk.internal.vm.annotation.IntrinsicCandidate;\n@@ -530,1 +529,1 @@\n-                    ((v[vOffset+1] << 8) & 0x3FF);\n+                        ((v[vOffset+1] << 8) & 0x3FF);\n@@ -532,1 +531,1 @@\n-                    ((v[vOffset+2] << 6) & 0x3FF);\n+                        ((v[vOffset+2] << 6) & 0x3FF);\n@@ -534,1 +533,1 @@\n-                    ((v[vOffset+3] << 4) & 0x3FF);\n+                        ((v[vOffset+3] << 4) & 0x3FF);\n@@ -536,1 +535,1 @@\n-                    ((v[vOffset+4] << 2) & 0x3FF);\n+                        ((v[vOffset+4] << 2) & 0x3FF);\n@@ -878,2 +877,2 @@\n-                        ((rawAij[rawOfs + 1] & 0xFF) << 8) +\n-                        ((rawAij[rawOfs + 2] & 0x7F) << 16);\n+                            ((rawAij[rawOfs + 1] & 0xFF) << 8) +\n+                            ((rawAij[rawOfs + 2] & 0x7F) << 16);\n@@ -984,1 +983,1 @@\n-                highPart[i], gamma2 * 2, multiplier);\n+                    highPart[i], gamma2 * 2, multiplier);\n@@ -1060,1 +1059,1 @@\n-                        MONT_ZETAS_FOR_INVERSE_NTT[m]);\n+                            MONT_ZETAS_FOR_INVERSE_NTT[m]);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/ML_DSA.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"}]}