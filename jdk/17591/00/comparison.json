{"files":[{"patch":"@@ -177,0 +177,6 @@\n+\n+  \/\/ Return an estimate of the maximum allocation that could be performed\n+  \/\/ in the generation without triggering any collection or expansion\n+  \/\/ activity.  It is \"unsafe\" because no locks are taken; the result\n+  \/\/ should be treated as an approximation, not a guarantee, for use in\n+  \/\/ heuristic resizing decisions.\n@@ -178,0 +184,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -111,7 +111,0 @@\n-  \/\/ Return an estimate of the maximum allocation that could be performed\n-  \/\/ in the generation without triggering any collection or expansion\n-  \/\/ activity.  It is \"unsafe\" because no locks are taken; the result\n-  \/\/ should be treated as an approximation, not a guarantee, for use in\n-  \/\/ heuristic resizing decisions.\n-  virtual size_t unsafe_max_alloc_nogc() const = 0;\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/generation.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -453,4 +453,0 @@\n-size_t TenuredGeneration::unsafe_max_alloc_nogc() const {\n-  return _the_space->free();\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -114,1 +114,0 @@\n-  size_t unsafe_max_alloc_nogc() const;\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}