{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -42,2 +40,0 @@\n-\n-@SuppressWarnings(\"removal\")\n@@ -47,6 +43,1 @@\n-        AccessController.doPrivileged(\n-            new PrivilegedAction<Void>() {\n-                public Void run() {\n-                    loadDefaultProperties();\n-                    return null;\n-                }});\n+        loadDefaultProperties();\n@@ -85,3 +76,0 @@\n-     * @throws  SecurityException  if a security manager exists and its\n-     *          <code>checkPropertiesAccess<\/code> method doesn't allow access\n-     *          to the system properties.\n@@ -106,3 +94,0 @@\n-     * @throws  SecurityException  if a security manager exists and its\n-     *          <code>checkPropertiesAccess<\/code> method doesn't allow access\n-     *          to the system properties.\n@@ -134,3 +119,0 @@\n-     * @throws  SecurityException  if a security manager exists and its\n-     *          <code>checkPropertiesAccess<\/code> method doesn't allow access\n-     *          to the system properties.\n","filename":"src\/java.base\/share\/classes\/sun\/net\/NetProperties.java","additions":2,"deletions":20,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.net.UnknownHostException;\n@@ -34,2 +33,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -42,1 +39,0 @@\n-@SuppressWarnings(\"removal\")\n@@ -69,14 +65,3 @@\n-        final int vals[] = {0, 0};\n-        final String encs[] = { null };\n-\n-        AccessController.doPrivileged(\n-                new PrivilegedAction<>() {\n-                    public Void run() {\n-                        vals[0] = Integer.getInteger(\"sun.net.client.defaultReadTimeout\", 0).intValue();\n-                        vals[1] = Integer.getInteger(\"sun.net.client.defaultConnectTimeout\", 0).intValue();\n-                        encs[0] = System.getProperty(\"file.encoding\", \"ISO8859_1\");\n-                        return null;\n-            }\n-        });\n-        if (vals[0] != 0) {\n-            defaultSoTimeout = vals[0];\n+        int soTimeout = Integer.getInteger(\"sun.net.client.defaultReadTimeout\", 0);\n+        if (soTimeout != 0) {\n+            defaultSoTimeout = soTimeout;\n@@ -84,2 +69,4 @@\n-        if (vals[1] != 0) {\n-            defaultConnectTimeout = vals[1];\n+\n+        int connTimeout = Integer.getInteger(\"sun.net.client.defaultConnectTimeout\", 0);\n+        if (connTimeout != 0) {\n+            defaultConnectTimeout = connTimeout;\n@@ -88,1 +75,1 @@\n-        encoding = encs[0];\n+        encoding = System.getProperty(\"file.encoding\", \"ISO8859_1\");\n@@ -134,1 +121,1 @@\n-        throws IOException, UnknownHostException {\n+        throws IOException {\n@@ -153,1 +140,1 @@\n-    throws IOException, UnknownHostException {\n+    throws IOException {\n@@ -157,5 +144,1 @@\n-                s = AccessController.doPrivileged(\n-                    new PrivilegedAction<>() {\n-                        public Socket run() {\n-                                       return new Socket(proxy);\n-                                   }});\n+                s = new Socket(proxy);\n@@ -206,7 +189,1 @@\n-        return  AccessController.doPrivileged(\n-                        new PrivilegedAction<>() {\n-                            public InetAddress run() {\n-                                return serverSocket.getLocalAddress();\n-\n-                            }\n-                        });\n+        return serverSocket.getLocalAddress();\n","filename":"src\/java.base\/share\/classes\/sun\/net\/NetworkClient.java","additions":13,"deletions":36,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,7 +68,2 @@\n-        @SuppressWarnings(\"removal\")\n-        String rulesFile = java.security.AccessController.doPrivileged(\n-            new java.security.PrivilegedAction<>() {\n-                public String run() {\n-                    return NetProperties.get(\"sun.net.http.captureRules\");\n-                }\n-            });\n+\n+        String rulesFile = NetProperties.get(\"sun.net.http.captureRules\");\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/http\/HttpCapture.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -73,1 +72,1 @@\n-    private static final int    HTTP_CONTINUE = 100;\n+    private static final int HTTP_CONTINUE = 100;\n@@ -76,1 +75,1 @@\n-    static final int    httpPortNumber = 80;\n+    static final int httpPortNumber = 80;\n@@ -197,1 +196,1 @@\n-        Properties props = GetPropertyAction.privilegedGetProperties();\n+        Properties props = System.getProperties();\n@@ -246,5 +245,0 @@\n-    private HttpClient(URL url)\n-    throws IOException {\n-        this(url, (String)null, -1, false);\n-    }\n-\n@@ -391,9 +385,0 @@\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager security = System.getSecurityManager();\n-            if (security != null) {\n-                if (ret.proxy == Proxy.NO_PROXY || ret.proxy == null) {\n-                    security.checkConnect(InetAddress.getByName(url.getHost()).getHostAddress(), url.getPort());\n-                } else {\n-                    security.checkConnect(url.getHost(), url.getPort());\n-                }\n-            }\n@@ -574,1 +559,1 @@\n-    public void afterConnect() throws IOException, UnknownHostException {\n+    public void afterConnect() throws IOException {\n@@ -579,1 +564,1 @@\n-     * call openServer in a privileged block\n+     * call openServer\n@@ -581,2 +566,1 @@\n-    @SuppressWarnings(\"removal\")\n-    private void privilegedOpenServer(final InetSocketAddress server)\n+    private void openServer(final InetSocketAddress server)\n@@ -586,11 +570,1 @@\n-        try {\n-            java.security.AccessController.doPrivileged(\n-                new java.security.PrivilegedExceptionAction<>() {\n-                    public Void run() throws IOException {\n-                    openServer(server.getHostString(), server.getPort());\n-                    return null;\n-                }\n-            });\n-        } catch (java.security.PrivilegedActionException pae) {\n-            throw (IOException) pae.getException();\n-        }\n+        openServer(server.getHostString(), server.getPort());\n@@ -604,1 +578,1 @@\n-        throws IOException, UnknownHostException\n+        throws IOException\n@@ -613,3 +587,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-\n@@ -618,3 +589,0 @@\n-            if (security != null) {\n-                security.checkConnect(host, port);\n-            }\n@@ -631,1 +599,1 @@\n-                    privilegedOpenServer((InetSocketAddress) proxy.address());\n+                    openServer((InetSocketAddress) proxy.address());\n@@ -647,1 +615,1 @@\n-                    privilegedOpenServer((InetSocketAddress) proxy.address());\n+                    openServer((InetSocketAddress) proxy.address());\n@@ -666,1 +634,1 @@\n-        \/**\n+        \/*\n@@ -820,1 +788,1 @@\n-        boolean ret = false;\n+        boolean ret;\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/http\/HttpClient.java","additions":13,"deletions":45,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -42,1 +40,0 @@\n-import sun.security.action.GetIntegerAction;\n@@ -72,1 +69,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -74,2 +70,1 @@\n-        int v = AccessController.doPrivileged(\n-            new GetIntegerAction(keepAliveProp+type, -1)).intValue();\n+        int v = Integer.getInteger(keepAliveProp+type, -1);\n@@ -92,1 +87,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -95,3 +89,1 @@\n-            result = AccessController.doPrivileged(\n-                new GetIntegerAction(\"http.maxConnections\", MAX_CONNECTIONS))\n-                .intValue();\n+            result = Integer.getInteger(\"http.maxConnections\", MAX_CONNECTIONS);\n@@ -122,1 +114,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -147,9 +138,4 @@\n-                AccessController.doPrivileged(new PrivilegedAction<>() {\n-                    public Void run() {\n-                        keepAliveTimer = InnocuousThread.newSystemThread(\"Keep-Alive-Timer\", cache);\n-                        keepAliveTimer.setDaemon(true);\n-                        keepAliveTimer.setPriority(Thread.MAX_PRIORITY - 2);\n-                        keepAliveTimer.start();\n-                        return null;\n-                    }\n-                });\n+                keepAliveTimer = InnocuousThread.newSystemThread(\"Keep-Alive-Timer\", cache);\n+                keepAliveTimer.setDaemon(true);\n+                keepAliveTimer.setPriority(Thread.MAX_PRIORITY - 2);\n+                keepAliveTimer.start();\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/http\/KeepAliveCache.java","additions":6,"deletions":20,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -179,10 +179,4 @@\n-                java.security.AccessController.doPrivileged(\n-                    new java.security.PrivilegedAction<Void>() {\n-                    public Void run() {\n-                        cleanerThread = InnocuousThread.newSystemThread(\"Keep-Alive-SocketCleaner\", queue);\n-                        cleanerThread.setDaemon(true);\n-                        cleanerThread.setPriority(Thread.MAX_PRIORITY - 2);\n-                        cleanerThread.start();\n-                        return null;\n-                    }\n-                });\n+                cleanerThread = InnocuousThread.newSystemThread(\"Keep-Alive-SocketCleaner\", queue);\n+                cleanerThread.setDaemon(true);\n+                cleanerThread.setPriority(Thread.MAX_PRIORITY - 2);\n+                cleanerThread.start();\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/http\/KeepAliveStream.java","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -38,1 +36,1 @@\n- * This class is used to cleanup any remaining data that may be on a KeepAliveStream\n+ * This class is used to clean up any remaining data that may be on a KeepAliveStream\n@@ -42,1 +40,1 @@\n- * the reamining bytes on its KeepAliveStream, and if successful puts the connection in\n+ * the remaining bytes on its KeepAliveStream, and if successful puts the connection in\n@@ -53,1 +51,1 @@\n-    \/\/ maximum amount of remaining data that we will try to cleanup\n+    \/\/ maximum amount of remaining data that we will try to clean up\n@@ -67,7 +65,1 @@\n-        @SuppressWarnings(\"removal\")\n-        int maxData = AccessController.doPrivileged(\n-            new PrivilegedAction<Integer>() {\n-                public Integer run() {\n-                    return NetProperties.getInteger(maxDataKey, 512);\n-                }}).intValue() * 1024;\n-        MAX_DATA_REMAINING = maxData;\n+        MAX_DATA_REMAINING = NetProperties.getInteger(maxDataKey, 512) * 1024;\n@@ -76,7 +68,1 @@\n-        @SuppressWarnings(\"removal\")\n-        int maxCapacity = AccessController.doPrivileged(\n-            new PrivilegedAction<Integer>() {\n-                public Integer run() {\n-                    return NetProperties.getInteger(maxCapacityKey, 10);\n-                }}).intValue();\n-        MAX_CAPACITY = maxCapacity;\n+        MAX_CAPACITY = NetProperties.getInteger(maxCapacityKey, 10);\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/http\/KeepAliveStreamCleaner.java","additions":6,"deletions":20,"binary":false,"changes":26,"status":"modified"}]}