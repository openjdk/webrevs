{"files":[{"patch":"@@ -120,0 +120,1 @@\n+        createPrefixTables();\n@@ -127,2 +128,0 @@\n-        createPrefixTables();\n-\n@@ -163,1 +162,5 @@\n-    \/\/ KMP failure function\n+    \/**\n+     * The failure function for KMP. Returns the correct index in the pattern to jump\n+     * back to when encountering a mismatched character. Used in both\n+     * createPrefixTables (pre-processing) and scanBytes (matching).\n+     *\/\n@@ -177,1 +180,6 @@\n-    \/\/ precompute KMP prefixes\n+    \/**\n+     * Pre-processing string patterns for Knuth–Morris–Pratt (KMP) search algorithm.\n+     * Lookup tables of longest prefixes at each given index are created for each\n+     * search pattern string. These tables are later used in scanBytes during matching\n+     * as lookups for failure state transitions.\n+     *\/\n@@ -251,0 +259,1 @@\n+        \/\/ test fails\n@@ -263,0 +272,6 @@\n+    \/**\n+     * Scans each byte until encounters a match with one of searchPatterns. Uses KMP to\n+     * perform matches. Keep track of current matched index (states) for each search\n+     * pattern. At each given byte, update states accordingly (increment if match or\n+     * failure function transition if mismatch). Returns a list of Match objects.\n+     *\/\n@@ -277,0 +292,2 @@\n+                        \/\/ technically at last match, state should reset according to failure function\n+                        \/\/ but in original test, matching didn't search same string for multiple matches\n@@ -287,0 +304,7 @@\n+    \/**\n+     * In original test, failed test output would backtrack to last non-ascii byte on\n+     * matched pattern. This is incompatible with the new buffered approach (and a\n+     * proper solution requires a 2nd dynamic buffer). Instead, on failed test case,\n+     * files are scanned a 2nd time to print debug output. Failed runs will pay\n+     * additional performance\/space penalty, but passing runs are faster.\n+     *\/\n@@ -306,0 +330,2 @@\n+                    \/\/ This imperfect as incorrect in edge cases with patterns containing non-ascii?\n+                    \/\/ but high-accuracy not priority + output still legible and useful\n","filename":"test\/jdk\/build\/AbsPathsInImage.java","additions":30,"deletions":4,"binary":false,"changes":34,"status":"modified"}]}