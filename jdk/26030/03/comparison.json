{"files":[{"patch":"@@ -24,0 +24,2 @@\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayOutputStream;\n@@ -45,1 +47,1 @@\n- * @run main\/othervm -Xmx900m AbsPathsInImage\n+ * @run main AbsPathsInImage\n@@ -183,1 +185,5 @@\n-        List<String> matches = scanBytes(Files.readAllBytes(file), searchPatterns);\n+        List<String> matches;\n+        InputStream inputStream = Files.newInputStream(file);\n+        try (BufferedInputStream input = new BufferedInputStream(inputStream)) {\n+            matches = scanBytes(input, searchPatterns);\n+        }\n@@ -195,4 +201,6 @@\n-        try (ZipInputStream zipInputStream = new ZipInputStream(Files.newInputStream(zipFile))) {\n-            ZipEntry zipEntry;\n-            while ((zipEntry = zipInputStream.getNextEntry()) != null) {\n-                List<String> matches = scanBytes(zipInputStream.readAllBytes(), searchPatterns);\n+        ZipEntry zipEntry;\n+        InputStream inputStream = Files.newInputStream(zipFile);\n+        BufferedInputStream bufferedStream = new BufferedInputStream(inputStream);\n+        try (ZipInputStream input = new ZipInputStream(bufferedStream)) {\n+            while ((zipEntry = input.getNextEntry()) != null) {\n+                List<String> matches = scanBytes(input, searchPatterns);\n@@ -211,1 +219,1 @@\n-    private List<String> scanBytes(byte[] data, List<byte[]> searchPatterns) {\n+    private List<String> scanBytes(InputStream input, List<byte[]> searchPatterns) throws IOException {\n@@ -213,9 +221,6 @@\n-        for (int i = 0; i < data.length; i++) {\n-            for (byte[] searchPattern : searchPatterns) {\n-                boolean found = true;\n-                for (int j = 0; j < searchPattern.length; j++) {\n-                    if ((i + j >= data.length || data[i + j] != searchPattern[j])) {\n-                        found = false;\n-                        break;\n-                    }\n-                }\n+        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+        int[] states = new int[searchPatterns.size()];\n+        boolean found = false;\n+        int datum;\n+        while ((datum = input.read()) != -1) {\n+            if (datum < 32 || datum > 126) {\n@@ -223,3 +228,2 @@\n-                    matches.add(new String(data, charsStart(data, i), charsOffset(data, i, searchPattern.length)));\n-                    \/\/ No need to search the same string for multiple patterns\n-                    break;\n+                    matches.add(buffer.toString());\n+                    found = false;\n@@ -227,0 +231,3 @@\n+                buffer.reset();\n+            } else {\n+                buffer.write(datum);\n@@ -228,21 +235,7 @@\n-        }\n-        return matches;\n-    }\n-\n-    private int charsStart(byte[] data, int startIndex) {\n-        int index = startIndex;\n-        while (--index > 0) {\n-            byte datum = data[index];\n-            if (datum < 32 || datum > 126) {\n-                break;\n-            }\n-        }\n-        return index + 1;\n-    }\n-\n-    private int charsOffset(byte[] data, int startIndex, int startOffset) {\n-        int offset = startOffset;\n-        while (startIndex + ++offset < data.length) {\n-            byte datum = data[startIndex + offset];\n-            if (datum < 32 || datum > 126) {\n-                break;\n+            for (int i = 0; i < searchPatterns.size(); i++) {\n+                if (datum != searchPatterns.get(i)[states[i]]) {\n+                    states[i] = 0;\n+                } else if (++states[i] == searchPatterns.get(i).length) {\n+                    states[i] = 0;\n+                    found = true;\n+                }\n@@ -251,1 +244,1 @@\n-        return offset;\n+        return matches;\n","filename":"test\/jdk\/build\/AbsPathsInImage.java","additions":34,"deletions":41,"binary":false,"changes":75,"status":"modified"}]}