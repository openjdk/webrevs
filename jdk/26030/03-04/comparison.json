{"files":[{"patch":"@@ -24,1 +24,0 @@\n-import java.io.BufferedInputStream;\n@@ -34,0 +33,1 @@\n+import java.util.Arrays;\n@@ -40,0 +40,2 @@\n+import static java.util.Comparator.comparing;\n+\n@@ -56,0 +58,4 @@\n+    private static final int DEFAULT_BUFFER_SIZE = 8192;\n+    private static List<byte[]> searchPatterns = new ArrayList<>();\n+    private static List<int[]> prefixTables = new ArrayList<>();\n+    private static boolean containsNonASCII = false;\n@@ -59,0 +65,2 @@\n+    record Match(int begin, int end) { }\n+\n@@ -112,3 +120,2 @@\n-        List<byte[]> searchPatterns = new ArrayList<>();\n-        expandPatterns(searchPatterns, buildWorkspaceRoot);\n-        expandPatterns(searchPatterns, buildOutputRoot);\n+        expandPatterns(buildWorkspaceRoot);\n+        expandPatterns(buildOutputRoot);\n@@ -122,0 +129,2 @@\n+        createPrefixTables();\n+\n@@ -123,1 +132,1 @@\n-        absPathsInImage.scanFiles(dirToScan, searchPatterns);\n+        absPathsInImage.scanFiles(dirToScan);\n@@ -134,1 +143,1 @@\n-    private static void expandPatterns(List<byte[]> searchPatterns, String pattern) {\n+    private static void expandPatterns(String pattern) {\n@@ -156,1 +165,27 @@\n-    private void scanFiles(Path root, List<byte[]> searchPatterns) throws IOException {\n+    \/\/ KMP failure function\n+    private static int getPrefixIndex(int patternIdx, int state, byte match) {\n+        if (state == 0) {\n+            return 0;\n+        }\n+        byte[] searchPattern = searchPatterns.get(patternIdx);\n+        int[] prefixTable = prefixTables.get(patternIdx);\n+        int i = prefixTable[state - 1];\n+        while (i > 0 && searchPattern[i] != match) {\n+            i = prefixTable[i - 1];\n+        }\n+        return searchPattern[i] == match ? i + 1 : i;\n+    }\n+\n+    \/\/ precompute KMP prefixes\n+    private static void createPrefixTables() {\n+        for (int patternIdx = 0; patternIdx < searchPatterns.size(); patternIdx++) {\n+            int patternLen = searchPatterns.get(patternIdx).length;\n+            int[] prefixTable = new int[patternLen];\n+            prefixTables.add(prefixTable);\n+            for (int i = 1; i < patternLen; i++) {\n+                prefixTable[i] = getPrefixIndex(patternIdx, i, searchPatterns.get(patternIdx)[i]);\n+            }\n+        }\n+    }\n+\n+    private void scanFiles(Path root) throws IOException {\n@@ -175,1 +210,1 @@\n-                    scanZipFile(file, searchPatterns);\n+                    scanZipFile(file);\n@@ -177,1 +212,1 @@\n-                    scanFile(file, searchPatterns);\n+                    scanFile(file);\n@@ -184,13 +219,3 @@\n-    private void scanFile(Path file, List<byte[]> searchPatterns) throws IOException {\n-        List<String> matches;\n-        InputStream inputStream = Files.newInputStream(file);\n-        try (BufferedInputStream input = new BufferedInputStream(inputStream)) {\n-            matches = scanBytes(input, searchPatterns);\n-        }\n-        if (matches.size() > 0) {\n-            matchFound = true;\n-            System.out.println(file + \":\");\n-            for (String match : matches) {\n-                System.out.println(match);\n-            }\n-            System.out.println();\n+    private void scanFile(Path file) throws IOException {\n+        try (InputStream inputStream = Files.newInputStream(file)) {\n+            scanBytes(inputStream, file + \":\");\n@@ -200,15 +225,5 @@\n-    private void scanZipFile(Path zipFile, List<byte[]> searchPatterns) throws IOException {\n-        ZipEntry zipEntry;\n-        InputStream inputStream = Files.newInputStream(zipFile);\n-        BufferedInputStream bufferedStream = new BufferedInputStream(inputStream);\n-        try (ZipInputStream input = new ZipInputStream(bufferedStream)) {\n-            while ((zipEntry = input.getNextEntry()) != null) {\n-                List<String> matches = scanBytes(input, searchPatterns);\n-                if (matches.size() > 0) {\n-                    matchFound = true;\n-                    System.out.println(zipFile + \", \" + zipEntry.getName() + \":\");\n-                    for (String match : matches) {\n-                        System.out.println(match);\n-                    }\n-                    System.out.println();\n-                }\n+    private void scanZipFile(Path zipFile) throws IOException {\n+        try (ZipInputStream zipInputStream = new ZipInputStream(Files.newInputStream(zipFile))) {\n+            ZipEntry zipEntry;\n+            while ((zipEntry = zipInputStream.getNextEntry()) != null) {\n+                scanBytes(zipInputStream, zipFile + \", \" + zipEntry.getName() + \":\");\n@@ -219,3 +234,3 @@\n-    private List<String> scanBytes(InputStream input, List<byte[]> searchPatterns) throws IOException {\n-        List<String> matches = new ArrayList<>();\n-        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+    private void scanBytes(InputStream input, final String HEADER) throws IOException {\n+        List<Match> matches = new ArrayList<>();\n+        byte[] buf = new byte[DEFAULT_BUFFER_SIZE];\n@@ -223,7 +238,14 @@\n-        boolean found = false;\n-        int datum;\n-        while ((datum = input.read()) != -1) {\n-            if (datum < 32 || datum > 126) {\n-                if (found) {\n-                    matches.add(buffer.toString());\n-                    found = false;\n+        int fileIdx = 0;\n+        int bytesRead, patternLen;\n+        while ((bytesRead = input.read(buf)) != -1) {\n+            for (int bufIdx = 0; bufIdx < bytesRead; bufIdx++, fileIdx++) {\n+                byte datum = buf[bufIdx];\n+                for (int i = 0; i < searchPatterns.size(); i++) {\n+                    patternLen = searchPatterns.get(i).length;\n+                    if (datum != searchPatterns.get(i)[states[i]]) {\n+                        states[i] = getPrefixIndex(i, states[i], datum);\n+                    } else if (++states[i] == patternLen) {\n+                        states[i] = 0;\n+                        matches.add(new Match(fileIdx - patternLen + 1, fileIdx));\n+                        break;\n+                    }\n@@ -231,3 +253,0 @@\n-                buffer.reset();\n-            } else {\n-                buffer.write(datum);\n@@ -235,6 +254,26 @@\n-            for (int i = 0; i < searchPatterns.size(); i++) {\n-                if (datum != searchPatterns.get(i)[states[i]]) {\n-                    states[i] = 0;\n-                } else if (++states[i] == searchPatterns.get(i).length) {\n-                    states[i] = 0;\n-                    found = true;\n+        }\n+        \/\/ test succeeds; common case\n+        if (matches.size() == 0) {\n+            return;\n+        }\n+        \/\/ test fails; pay penalty and re-scan file\n+        matchFound = true;\n+        System.out.println(HEADER);\n+        matches.sort(comparing(Match::begin));\n+        ByteArrayOutputStream output = new ByteArrayOutputStream();\n+        int matchIdx = 0;\n+        fileIdx = 0;\n+        input.reset();\n+        while (matchIdx < matches.size() && (bytesRead = input.read(buf)) != -1) {\n+            for (int i = 0; matchIdx < matches.size() && i < bytesRead; i++, fileIdx++) {\n+                byte datum = buf[i];\n+                if (datum >= 32 && datum <= 126) {\n+                    output.write(datum);\n+                } else if (fileIdx < matches.get(matchIdx).begin()) {\n+                    output.reset();\n+                } else if (fileIdx > matches.get(matchIdx).end()) {\n+                    System.out.println(output.toString());\n+                    output.reset();\n+                    for (; matchIdx < matches.size() && matches.get(matchIdx).end() < fileIdx; matchIdx++);\n+                } else {\n+                    output.write(datum);\n@@ -244,1 +283,1 @@\n-        return matches;\n+        System.out.println();\n","filename":"test\/jdk\/build\/AbsPathsInImage.java","additions":96,"deletions":57,"binary":false,"changes":153,"status":"modified"}]}