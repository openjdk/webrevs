{"files":[{"patch":"@@ -33,1 +33,0 @@\n-import java.util.Arrays;\n@@ -61,1 +60,0 @@\n-    private static boolean containsNonASCII = false;\n@@ -220,0 +218,1 @@\n+        List<Match> matches;\n@@ -221,1 +220,9 @@\n-            scanBytes(inputStream, file + \":\");\n+            matches = scanBytes(inputStream);\n+        }\n+        \/\/ test succeeds\n+        if (matches.size() == 0) {\n+            return;\n+        }\n+        \/\/ test fails; pay penalty and re-scan file for debug output\n+        try (InputStream inputStream = Files.newInputStream(file)) {\n+            printDebugOutput(inputStream, matches, file + \":\");\n@@ -226,0 +233,3 @@\n+        List<List<Match>> entryMatches = new ArrayList<>();\n+        boolean found = false;\n+        ZipEntry zipEntry;\n@@ -227,1 +237,0 @@\n-            ZipEntry zipEntry;\n@@ -229,1 +238,21 @@\n-                scanBytes(zipInputStream, zipFile + \", \" + zipEntry.getName() + \":\");\n+                List<Match> matches = scanBytes(zipInputStream);\n+                if (matches.size() > 0) {\n+                    entryMatches.add(matches);\n+                    found = true;\n+                } else {\n+                    entryMatches.add(null);\n+                }\n+            }\n+        }\n+        \/\/ test succeeds\n+        if (!found) {\n+            return;\n+        }\n+        try (ZipInputStream zipInputStream = new ZipInputStream(Files.newInputStream(zipFile))) {\n+            int i = 0;\n+            while ((zipEntry = zipInputStream.getNextEntry()) != null) {\n+                List<Match> matches = entryMatches.get(i);\n+                i++;\n+                if (matches != null) {\n+                    printDebugOutput(zipInputStream, matches, zipFile + \", \" + zipEntry.getName() + \":\");\n+                }\n@@ -234,1 +263,1 @@\n-    private void scanBytes(InputStream input, final String HEADER) throws IOException {\n+    private List<Match> scanBytes(InputStream input) throws IOException {\n@@ -255,5 +284,4 @@\n-        \/\/ test succeeds; common case\n-        if (matches.size() == 0) {\n-            return;\n-        }\n-        \/\/ test fails; pay penalty and re-scan file\n+        return matches;\n+    }\n+\n+    private void printDebugOutput(InputStream input, List<Match> matches, final String HEADER) throws IOException{\n@@ -264,0 +292,1 @@\n+        byte[] buf = new byte[DEFAULT_BUFFER_SIZE];\n@@ -265,2 +294,2 @@\n-        fileIdx = 0;\n-        input.reset();\n+        int fileIdx = 0;\n+        int bytesRead;\n","filename":"test\/jdk\/build\/AbsPathsInImage.java","additions":42,"deletions":13,"binary":false,"changes":55,"status":"modified"}]}