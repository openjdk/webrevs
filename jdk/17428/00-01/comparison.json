{"files":[{"patch":"@@ -24,0 +24,8 @@\n+\/**\n+ * @test\n+ * @bug 7200264\n+ * @summary 7192963 changes disabled shift vectors\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.cr7200264.TestIntVect\n+ *\/\n+\n@@ -29,1 +37,1 @@\n- * Based on test\/compiler\/6340864\/TestIntVect.java.\n+ * Based on test\/compiler\/6340864\/TestIntVect.java without performance tests.\n@@ -34,0 +42,1 @@\n+    private static final int ITERS  = 11000;\n@@ -39,7 +48,17 @@\n-    private static int[] a0 = new int[ARRLEN];\n-    private static int[] a1 = new int[ARRLEN];\n-    private static int[] a2 = new int[ARRLEN];\n-    private static int[] a3 = new int[ARRLEN];\n-    private static int[] a4 = new int[ARRLEN];\n-    private static long[] p2 = new long[ARRLEN\/2];\n-    private static int gold_sum = 0;\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"-XX:+IgnoreUnrecognizedVMOptions\",\n+                                   \"-XX:StressLongCountedLoop=0\");\n+    }\n+\n+    @Run(test = {\n+           \"test_addc\", \"test_addv\", \"test_adda\", \"test_subc\", \"test_subv\",\n+           \"test_suba\", \"test_mulc\", \"test_mulc_n\", \"test_mulv\", \"test_mula\",\n+           \"test_andc\", \"test_andv\", \"test_anda\", \"test_orc\", \"test_orv\",\n+           \"test_ora\", \"test_xorc\", \"test_xorv\", \"test_xora\", \"test_sllc\",\n+           \"test_sllc_n\", \"test_sllv\", \"test_srlc\", \"test_srlc_n\", \"test_srlv\",\n+           \"test_srac\", \"test_srac_n\", \"test_srav\"\n+         },\n+         mode = RunMode.STANDALONE)\n+    public void run() {\n+\n+        System.out.println(\"Testing Integer vectors\");\n@@ -47,2 +66,8 @@\n-    \/\/ Initialize\n-    static{\n+        \/\/ Initialize\n+        int[] a0 = new int[ARRLEN];\n+        int[] a1 = new int[ARRLEN];\n+        int[] a2 = new int[ARRLEN];\n+        int[] a3 = new int[ARRLEN];\n+        int[] a4 = new int[ARRLEN];\n+        long[] p2 = new long[ARRLEN\/2];\n+        int gold_sum = 0;\n@@ -57,12 +82,0 @@\n-    }\n-\n-    @ForceInline\n-    public static void testInner() {\n-        System.out.println(\"Testing Integer vectors\");\n-        int errn = 0;\n-\n-        int sum = test_sum(a1);\n-        if (sum != gold_sum) {\n-            System.err.println(\"test_sum:  \" + sum + \" != \" + gold_sum);\n-            errn++;\n-        }\n@@ -70,0 +83,61 @@\n+        System.out.println(\"Warmup\");\n+        for (int i=0; i<ITERS; i++) {\n+            test_sum(a1);\n+            test_addc(a0, a1);\n+            test_addv(a0, a1, (int)VALUE);\n+            test_adda(a0, a1, a2);\n+            test_subc(a0, a1);\n+            test_subv(a0, a1, (int)VALUE);\n+            test_suba(a0, a1, a2);\n+            test_mulc(a0, a1);\n+            test_mulv(a0, a1, (int)VALUE);\n+            test_mula(a0, a1, a2);\n+            test_divc(a0, a1);\n+            test_divv(a0, a1, (int)VALUE);\n+            test_diva(a0, a1, a2);\n+            test_mulc_n(a0, a1);\n+            test_mulv(a0, a1, (int)-VALUE);\n+            test_mula(a0, a1, a3);\n+            test_divc_n(a0, a1);\n+            test_divv(a0, a1, (int)-VALUE);\n+            test_diva(a0, a1, a3);\n+            test_andc(a0, a1);\n+            test_andv(a0, a1, (int)BIT_MASK);\n+            test_anda(a0, a1, a4);\n+            test_orc(a0, a1);\n+            test_orv(a0, a1, (int)BIT_MASK);\n+            test_ora(a0, a1, a4);\n+            test_xorc(a0, a1);\n+            test_xorv(a0, a1, (int)BIT_MASK);\n+            test_xora(a0, a1, a4);\n+            test_sllc(a0, a1);\n+            test_sllv(a0, a1, VALUE);\n+            test_srlc(a0, a1);\n+            test_srlv(a0, a1, VALUE);\n+            test_srac(a0, a1);\n+            test_srav(a0, a1, VALUE);\n+            test_sllc_n(a0, a1);\n+            test_sllv(a0, a1, -VALUE);\n+            test_srlc_n(a0, a1);\n+            test_srlv(a0, a1, -VALUE);\n+            test_srac_n(a0, a1);\n+            test_srav(a0, a1, -VALUE);\n+            test_sllc_o(a0, a1);\n+            test_sllv(a0, a1, SHIFT);\n+            test_srlc_o(a0, a1);\n+            test_srlv(a0, a1, SHIFT);\n+            test_srac_o(a0, a1);\n+            test_srav(a0, a1, SHIFT);\n+            test_sllc_on(a0, a1);\n+            test_sllv(a0, a1, -SHIFT);\n+            test_srlc_on(a0, a1);\n+            test_srlv(a0, a1, -SHIFT);\n+            test_srac_on(a0, a1);\n+            test_srav(a0, a1, -SHIFT);\n+            test_pack2(p2, a1);\n+            test_unpack2(a0, p2);\n+            test_pack2_swap(p2, a1);\n+            test_unpack2_swap(a0, p2);\n+        }\n+\n+        \/\/ Test and verify results\n@@ -71,236 +145,256 @@\n-        test_addc(a0, a1);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_addc: \", i, a0[i], (int)((int)(ADD_INIT+i)+VALUE));\n-        }\n-        test_addv(a0, a1, (int)VALUE);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_addv: \", i, a0[i], (int)((int)(ADD_INIT+i)+VALUE));\n-        }\n-        test_adda(a0, a1, a2);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_adda: \", i, a0[i], (int)((int)(ADD_INIT+i)+VALUE));\n-        }\n-\n-        test_subc(a0, a1);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_subc: \", i, a0[i], (int)((int)(ADD_INIT+i)-VALUE));\n-        }\n-        test_subv(a0, a1, (int)VALUE);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_subv: \", i, a0[i], (int)((int)(ADD_INIT+i)-VALUE));\n-        }\n-        test_suba(a0, a1, a2);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_suba: \", i, a0[i], (int)((int)(ADD_INIT+i)-VALUE));\n-        }\n-\n-        test_mulc(a0, a1);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_mulc: \", i, a0[i], (int)((int)(ADD_INIT+i)*VALUE));\n-        }\n-        test_mulv(a0, a1, (int)VALUE);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_mulv: \", i, a0[i], (int)((int)(ADD_INIT+i)*VALUE));\n-        }\n-        test_mula(a0, a1, a2);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_mula: \", i, a0[i], (int)((int)(ADD_INIT+i)*VALUE));\n-        }\n-\n-        test_divc(a0, a1);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_divc: \", i, a0[i], (int)((int)(ADD_INIT+i)\/VALUE));\n-        }\n-        test_divv(a0, a1, (int)VALUE);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_divv: \", i, a0[i], (int)((int)(ADD_INIT+i)\/VALUE));\n-        }\n-        test_diva(a0, a1, a2);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_diva: \", i, a0[i], (int)((int)(ADD_INIT+i)\/VALUE));\n-        }\n-\n-        test_mulc_n(a0, a1);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_mulc_n: \", i, a0[i], (int)((int)(ADD_INIT+i)*(-VALUE)));\n-        }\n-        test_mulv(a0, a1, (int)-VALUE);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_mulv_n: \", i, a0[i], (int)((int)(ADD_INIT+i)*(-VALUE)));\n-        }\n-        test_mula(a0, a1, a3);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_mula_n: \", i, a0[i], (int)((int)(ADD_INIT+i)*(-VALUE)));\n-        }\n-\n-        test_divc_n(a0, a1);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_divc_n: \", i, a0[i], (int)((int)(ADD_INIT+i)\/(-VALUE)));\n-        }\n-        test_divv(a0, a1, (int)-VALUE);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_divv_n: \", i, a0[i], (int)((int)(ADD_INIT+i)\/(-VALUE)));\n-        }\n-        test_diva(a0, a1, a3);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_diva_n: \", i, a0[i], (int)((int)(ADD_INIT+i)\/(-VALUE)));\n-        }\n-\n-        test_andc(a0, a1);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_andc: \", i, a0[i], (int)((int)(ADD_INIT+i)&BIT_MASK));\n-        }\n-        test_andv(a0, a1, (int)BIT_MASK);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_andv: \", i, a0[i], (int)((int)(ADD_INIT+i)&BIT_MASK));\n-        }\n-        test_anda(a0, a1, a4);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_anda: \", i, a0[i], (int)((int)(ADD_INIT+i)&BIT_MASK));\n-        }\n-\n-        test_orc(a0, a1);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_orc: \", i, a0[i], (int)((int)(ADD_INIT+i)|BIT_MASK));\n-        }\n-        test_orv(a0, a1, (int)BIT_MASK);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_orv: \", i, a0[i], (int)((int)(ADD_INIT+i)|BIT_MASK));\n-        }\n-        test_ora(a0, a1, a4);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_ora: \", i, a0[i], (int)((int)(ADD_INIT+i)|BIT_MASK));\n-        }\n-\n-        test_xorc(a0, a1);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_xorc: \", i, a0[i], (int)((int)(ADD_INIT+i)^BIT_MASK));\n-        }\n-        test_xorv(a0, a1, (int)BIT_MASK);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_xorv: \", i, a0[i], (int)((int)(ADD_INIT+i)^BIT_MASK));\n-        }\n-        test_xora(a0, a1, a4);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_xora: \", i, a0[i], (int)((int)(ADD_INIT+i)^BIT_MASK));\n-        }\n-\n-        test_sllc(a0, a1);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_sllc: \", i, a0[i], (int)((int)(ADD_INIT+i)<<VALUE));\n-        }\n-        test_sllv(a0, a1, VALUE);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_sllv: \", i, a0[i], (int)((int)(ADD_INIT+i)<<VALUE));\n-        }\n-\n-        test_srlc(a0, a1);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_srlc: \", i, a0[i], (int)((int)(ADD_INIT+i)>>>VALUE));\n-        }\n-        test_srlv(a0, a1, VALUE);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_srlv: \", i, a0[i], (int)((int)(ADD_INIT+i)>>>VALUE));\n-        }\n-\n-        test_srac(a0, a1);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_srac: \", i, a0[i], (int)((int)(ADD_INIT+i)>>VALUE));\n-        }\n-        test_srav(a0, a1, VALUE);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_srav: \", i, a0[i], (int)((int)(ADD_INIT+i)>>VALUE));\n-        }\n-\n-        test_sllc_n(a0, a1);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_sllc_n: \", i, a0[i], (int)((int)(ADD_INIT+i)<<(-VALUE)));\n-        }\n-        test_sllv(a0, a1, -VALUE);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_sllv_n: \", i, a0[i], (int)((int)(ADD_INIT+i)<<(-VALUE)));\n-        }\n-\n-        test_srlc_n(a0, a1);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_srlc_n: \", i, a0[i], (int)((int)(ADD_INIT+i)>>>(-VALUE)));\n-        }\n-        test_srlv(a0, a1, -VALUE);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_srlv_n: \", i, a0[i], (int)((int)(ADD_INIT+i)>>>(-VALUE)));\n-        }\n-\n-        test_srac_n(a0, a1);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_srac_n: \", i, a0[i], (int)((int)(ADD_INIT+i)>>(-VALUE)));\n-        }\n-        test_srav(a0, a1, -VALUE);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_srav_n: \", i, a0[i], (int)((int)(ADD_INIT+i)>>(-VALUE)));\n-        }\n-\n-        test_sllc_o(a0, a1);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_sllc_o: \", i, a0[i], (int)((int)(ADD_INIT+i)<<SHIFT));\n-        }\n-        test_sllv(a0, a1, SHIFT);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_sllv_o: \", i, a0[i], (int)((int)(ADD_INIT+i)<<SHIFT));\n-        }\n-\n-        test_srlc_o(a0, a1);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_srlc_o: \", i, a0[i], (int)((int)(ADD_INIT+i)>>>SHIFT));\n-        }\n-        test_srlv(a0, a1, SHIFT);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_srlv_o: \", i, a0[i], (int)((int)(ADD_INIT+i)>>>SHIFT));\n-        }\n-\n-        test_srac_o(a0, a1);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_srac_o: \", i, a0[i], (int)((int)(ADD_INIT+i)>>SHIFT));\n-        }\n-        test_srav(a0, a1, SHIFT);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_srav_o: \", i, a0[i], (int)((int)(ADD_INIT+i)>>SHIFT));\n-        }\n-\n-        test_sllc_on(a0, a1);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_sllc_on: \", i, a0[i], (int)((int)(ADD_INIT+i)<<(-SHIFT)));\n-        }\n-        test_sllv(a0, a1, -SHIFT);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_sllv_on: \", i, a0[i], (int)((int)(ADD_INIT+i)<<(-SHIFT)));\n-        }\n-\n-        test_srlc_on(a0, a1);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_srlc_on: \", i, a0[i], (int)((int)(ADD_INIT+i)>>>(-SHIFT)));\n-        }\n-        test_srlv(a0, a1, -SHIFT);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_srlv_on: \", i, a0[i], (int)((int)(ADD_INIT+i)>>>(-SHIFT)));\n-        }\n-\n-        test_srac_on(a0, a1);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_srac_on: \", i, a0[i], (int)((int)(ADD_INIT+i)>>(-SHIFT)));\n-        }\n-        test_srav(a0, a1, -SHIFT);\n-        for (int i=0; i<ARRLEN; i++) {\n-            errn += verify(\"test_srav_on: \", i, a0[i], (int)((int)(ADD_INIT+i)>>(-SHIFT)));\n-        }\n-\n-        test_pack2(p2, a1);\n-        for (int i=0; i<ARRLEN\/2; i++) {\n-            errn += verify(\"test_pack2: \", i, p2[i], ((long)(ADD_INIT+2*i) & 0xFFFFFFFFl) | ((long)(ADD_INIT+2*i+1) << 32));\n-        }\n-        for (int i=0; i<ARRLEN; i++) {\n-            a0[i] = -1;\n-        }\n-        test_unpack2(a0, p2);\n-        for (int i=0; i<(ARRLEN&(-2)); i++) {\n-            errn += verify(\"test_unpack2: \", i, a0[i], (ADD_INIT+i));\n-        }\n+        int errn = 0;\n+        {\n+            int sum = test_sum(a1);\n+            if (sum != gold_sum) {\n+                System.err.println(\"test_sum:  \" + sum + \" != \" + gold_sum);\n+                errn++;\n+            }\n+\n+            test_addc(a0, a1);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_addc: \", i, a0[i], (int)((int)(ADD_INIT+i)+VALUE));\n+            }\n+            test_addv(a0, a1, (int)VALUE);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_addv: \", i, a0[i], (int)((int)(ADD_INIT+i)+VALUE));\n+            }\n+            test_adda(a0, a1, a2);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_adda: \", i, a0[i], (int)((int)(ADD_INIT+i)+VALUE));\n+            }\n+\n+            test_subc(a0, a1);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_subc: \", i, a0[i], (int)((int)(ADD_INIT+i)-VALUE));\n+            }\n+            test_subv(a0, a1, (int)VALUE);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_subv: \", i, a0[i], (int)((int)(ADD_INIT+i)-VALUE));\n+            }\n+            test_suba(a0, a1, a2);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_suba: \", i, a0[i], (int)((int)(ADD_INIT+i)-VALUE));\n+            }\n+\n+            test_mulc(a0, a1);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_mulc: \", i, a0[i], (int)((int)(ADD_INIT+i)*VALUE));\n+            }\n+            test_mulv(a0, a1, (int)VALUE);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_mulv: \", i, a0[i], (int)((int)(ADD_INIT+i)*VALUE));\n+            }\n+            test_mula(a0, a1, a2);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_mula: \", i, a0[i], (int)((int)(ADD_INIT+i)*VALUE));\n+            }\n+\n+            test_divc(a0, a1);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_divc: \", i, a0[i], (int)((int)(ADD_INIT+i)\/VALUE));\n+            }\n+            test_divv(a0, a1, (int)VALUE);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_divv: \", i, a0[i], (int)((int)(ADD_INIT+i)\/VALUE));\n+            }\n+            test_diva(a0, a1, a2);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_diva: \", i, a0[i], (int)((int)(ADD_INIT+i)\/VALUE));\n+            }\n+\n+            test_mulc_n(a0, a1);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_mulc_n: \", i, a0[i], (int)((int)(ADD_INIT+i)*(-VALUE)));\n+            }\n+            test_mulv(a0, a1, (int)-VALUE);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_mulv_n: \", i, a0[i], (int)((int)(ADD_INIT+i)*(-VALUE)));\n+            }\n+            test_mula(a0, a1, a3);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_mula_n: \", i, a0[i], (int)((int)(ADD_INIT+i)*(-VALUE)));\n+            }\n+\n+            test_divc_n(a0, a1);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_divc_n: \", i, a0[i], (int)((int)(ADD_INIT+i)\/(-VALUE)));\n+            }\n+            test_divv(a0, a1, (int)-VALUE);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_divv_n: \", i, a0[i], (int)((int)(ADD_INIT+i)\/(-VALUE)));\n+            }\n+            test_diva(a0, a1, a3);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_diva_n: \", i, a0[i], (int)((int)(ADD_INIT+i)\/(-VALUE)));\n+            }\n+\n+            test_andc(a0, a1);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_andc: \", i, a0[i], (int)((int)(ADD_INIT+i)&BIT_MASK));\n+            }\n+            test_andv(a0, a1, (int)BIT_MASK);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_andv: \", i, a0[i], (int)((int)(ADD_INIT+i)&BIT_MASK));\n+            }\n+            test_anda(a0, a1, a4);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_anda: \", i, a0[i], (int)((int)(ADD_INIT+i)&BIT_MASK));\n+            }\n+\n+            test_orc(a0, a1);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_orc: \", i, a0[i], (int)((int)(ADD_INIT+i)|BIT_MASK));\n+            }\n+            test_orv(a0, a1, (int)BIT_MASK);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_orv: \", i, a0[i], (int)((int)(ADD_INIT+i)|BIT_MASK));\n+            }\n+            test_ora(a0, a1, a4);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_ora: \", i, a0[i], (int)((int)(ADD_INIT+i)|BIT_MASK));\n+            }\n+\n+            test_xorc(a0, a1);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_xorc: \", i, a0[i], (int)((int)(ADD_INIT+i)^BIT_MASK));\n+            }\n+            test_xorv(a0, a1, (int)BIT_MASK);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_xorv: \", i, a0[i], (int)((int)(ADD_INIT+i)^BIT_MASK));\n+            }\n+            test_xora(a0, a1, a4);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_xora: \", i, a0[i], (int)((int)(ADD_INIT+i)^BIT_MASK));\n+            }\n+\n+            test_sllc(a0, a1);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_sllc: \", i, a0[i], (int)((int)(ADD_INIT+i)<<VALUE));\n+            }\n+            test_sllv(a0, a1, VALUE);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_sllv: \", i, a0[i], (int)((int)(ADD_INIT+i)<<VALUE));\n+            }\n+\n+            test_srlc(a0, a1);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_srlc: \", i, a0[i], (int)((int)(ADD_INIT+i)>>>VALUE));\n+            }\n+            test_srlv(a0, a1, VALUE);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_srlv: \", i, a0[i], (int)((int)(ADD_INIT+i)>>>VALUE));\n+            }\n+\n+            test_srac(a0, a1);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_srac: \", i, a0[i], (int)((int)(ADD_INIT+i)>>VALUE));\n+            }\n+            test_srav(a0, a1, VALUE);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_srav: \", i, a0[i], (int)((int)(ADD_INIT+i)>>VALUE));\n+            }\n+\n+            test_sllc_n(a0, a1);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_sllc_n: \", i, a0[i], (int)((int)(ADD_INIT+i)<<(-VALUE)));\n+            }\n+            test_sllv(a0, a1, -VALUE);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_sllv_n: \", i, a0[i], (int)((int)(ADD_INIT+i)<<(-VALUE)));\n+            }\n+\n+            test_srlc_n(a0, a1);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_srlc_n: \", i, a0[i], (int)((int)(ADD_INIT+i)>>>(-VALUE)));\n+            }\n+            test_srlv(a0, a1, -VALUE);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_srlv_n: \", i, a0[i], (int)((int)(ADD_INIT+i)>>>(-VALUE)));\n+            }\n+\n+            test_srac_n(a0, a1);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_srac_n: \", i, a0[i], (int)((int)(ADD_INIT+i)>>(-VALUE)));\n+            }\n+            test_srav(a0, a1, -VALUE);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_srav_n: \", i, a0[i], (int)((int)(ADD_INIT+i)>>(-VALUE)));\n+            }\n+\n+            test_sllc_o(a0, a1);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_sllc_o: \", i, a0[i], (int)((int)(ADD_INIT+i)<<SHIFT));\n+            }\n+            test_sllv(a0, a1, SHIFT);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_sllv_o: \", i, a0[i], (int)((int)(ADD_INIT+i)<<SHIFT));\n+            }\n+\n+            test_srlc_o(a0, a1);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_srlc_o: \", i, a0[i], (int)((int)(ADD_INIT+i)>>>SHIFT));\n+            }\n+            test_srlv(a0, a1, SHIFT);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_srlv_o: \", i, a0[i], (int)((int)(ADD_INIT+i)>>>SHIFT));\n+            }\n+\n+            test_srac_o(a0, a1);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_srac_o: \", i, a0[i], (int)((int)(ADD_INIT+i)>>SHIFT));\n+            }\n+            test_srav(a0, a1, SHIFT);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_srav_o: \", i, a0[i], (int)((int)(ADD_INIT+i)>>SHIFT));\n+            }\n+\n+            test_sllc_on(a0, a1);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_sllc_on: \", i, a0[i], (int)((int)(ADD_INIT+i)<<(-SHIFT)));\n+            }\n+            test_sllv(a0, a1, -SHIFT);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_sllv_on: \", i, a0[i], (int)((int)(ADD_INIT+i)<<(-SHIFT)));\n+            }\n+\n+            test_srlc_on(a0, a1);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_srlc_on: \", i, a0[i], (int)((int)(ADD_INIT+i)>>>(-SHIFT)));\n+            }\n+            test_srlv(a0, a1, -SHIFT);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_srlv_on: \", i, a0[i], (int)((int)(ADD_INIT+i)>>>(-SHIFT)));\n+            }\n+\n+            test_srac_on(a0, a1);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_srac_on: \", i, a0[i], (int)((int)(ADD_INIT+i)>>(-SHIFT)));\n+            }\n+            test_srav(a0, a1, -SHIFT);\n+            for (int i=0; i<ARRLEN; i++) {\n+                errn += verify(\"test_srav_on: \", i, a0[i], (int)((int)(ADD_INIT+i)>>(-SHIFT)));\n+            }\n+\n+            test_pack2(p2, a1);\n+            for (int i=0; i<ARRLEN\/2; i++) {\n+                errn += verify(\"test_pack2: \", i, p2[i], ((long)(ADD_INIT+2*i) & 0xFFFFFFFFl) | ((long)(ADD_INIT+2*i+1) << 32));\n+            }\n+            for (int i=0; i<ARRLEN; i++) {\n+                a0[i] = -1;\n+            }\n+            test_unpack2(a0, p2);\n+            for (int i=0; i<(ARRLEN&(-2)); i++) {\n+                errn += verify(\"test_unpack2: \", i, a0[i], (ADD_INIT+i));\n+            }\n+\n+            test_pack2_swap(p2, a1);\n+            for (int i=0; i<ARRLEN\/2; i++) {\n+                errn += verify(\"test_pack2_swap: \", i, p2[i], ((long)(ADD_INIT+2*i+1) & 0xFFFFFFFFl) | ((long)(ADD_INIT+2*i) << 32));\n+            }\n+            for (int i=0; i<ARRLEN; i++) {\n+                a0[i] = -1;\n+            }\n+            test_unpack2_swap(a0, p2);\n+            for (int i=0; i<(ARRLEN&(-2)); i++) {\n+                errn += verify(\"test_unpack2_swap: \", i, a0[i], (ADD_INIT+i));\n+            }\n@@ -308,10 +402,0 @@\n-        test_pack2_swap(p2, a1);\n-        for (int i=0; i<ARRLEN\/2; i++) {\n-            errn += verify(\"test_pack2_swap: \", i, p2[i], ((long)(ADD_INIT+2*i+1) & 0xFFFFFFFFl) | ((long)(ADD_INIT+2*i) << 32));\n-        }\n-        for (int i=0; i<ARRLEN; i++) {\n-            a0[i] = -1;\n-        }\n-        test_unpack2_swap(a0, p2);\n-        for (int i=0; i<(ARRLEN&(-2)); i++) {\n-            errn += verify(\"test_unpack2_swap: \", i, a0[i], (ADD_INIT+i));\n@@ -328,2 +412,1 @@\n-    @ForceInline\n-    static int test_sum(int[] a1) {\n+    int test_sum(int[] a1) {\n@@ -337,2 +420,4 @@\n-    @ForceInline\n-    static void test_addc(int[] a0, int[] a1) {\n+    @Test\n+    @IR(counts = { IRNode.ADD_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_addc(int[] a0, int[] a1) {\n@@ -343,2 +428,5 @@\n-    @ForceInline\n-    static void test_addv(int[] a0, int[] a1, int b) {\n+\n+    @Test\n+    @IR(counts = { IRNode.ADD_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_addv(int[] a0, int[] a1, int b) {\n@@ -349,2 +437,5 @@\n-    @ForceInline\n-    static void test_adda(int[] a0, int[] a1, int[] a2) {\n+\n+    @Test\n+    @IR(counts = { IRNode.ADD_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_adda(int[] a0, int[] a1, int[] a2) {\n@@ -356,2 +447,4 @@\n-    @ForceInline\n-    static void test_subc(int[] a0, int[] a1) {\n+    @Test\n+    @IR(counts = { IRNode.ADD_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_subc(int[] a0, int[] a1) {\n@@ -362,2 +455,5 @@\n-    @ForceInline\n-    static void test_subv(int[] a0, int[] a1, int b) {\n+\n+    @Test\n+    @IR(counts = { IRNode.SUB_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_subv(int[] a0, int[] a1, int b) {\n@@ -368,2 +464,5 @@\n-    @ForceInline\n-    static void test_suba(int[] a0, int[] a1, int[] a2) {\n+\n+    @Test\n+    @IR(counts = { IRNode.SUB_VI, \">= 1\", },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_suba(int[] a0, int[] a1, int[] a2) {\n@@ -375,2 +474,4 @@\n-    @ForceInline\n-    static void test_mulc(int[] a0, int[] a1) {\n+    @Test\n+    @IR(counts = { IRNode.SUB_VI, \">= 1\", IRNode.LSHIFT_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_mulc(int[] a0, int[] a1) {\n@@ -381,2 +482,5 @@\n-    @ForceInline\n-    static void test_mulc_n(int[] a0, int[] a1) {\n+\n+    @Test\n+    @IR(counts = { IRNode.SUB_VI, \">= 1\", IRNode.LSHIFT_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_mulc_n(int[] a0, int[] a1) {\n@@ -387,2 +491,5 @@\n-    @ForceInline\n-    static void test_mulv(int[] a0, int[] a1, int b) {\n+\n+    @Test\n+    @IR(counts = { IRNode.MUL_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse4.1\", \"true\"})\n+    void test_mulv(int[] a0, int[] a1, int b) {\n@@ -393,2 +500,5 @@\n-    @ForceInline\n-    static void test_mula(int[] a0, int[] a1, int[] a2) {\n+\n+    @Test\n+    @IR(counts = { IRNode.MUL_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse4.1\", \"true\"})\n+    void test_mula(int[] a0, int[] a1, int[] a2) {\n@@ -400,2 +510,1 @@\n-    @ForceInline\n-    static void test_divc(int[] a0, int[] a1) {\n+    void test_divc(int[] a0, int[] a1) {\n@@ -406,2 +515,2 @@\n-    @ForceInline\n-    static void test_divc_n(int[] a0, int[] a1) {\n+\n+    void test_divc_n(int[] a0, int[] a1) {\n@@ -412,2 +521,2 @@\n-    @ForceInline\n-    static void test_divv(int[] a0, int[] a1, int b) {\n+\n+    void test_divv(int[] a0, int[] a1, int b) {\n@@ -418,2 +527,2 @@\n-    @ForceInline\n-    static void test_diva(int[] a0, int[] a1, int[] a2) {\n+\n+    void test_diva(int[] a0, int[] a1, int[] a2) {\n@@ -425,2 +534,4 @@\n-    @ForceInline\n-    static void test_andc(int[] a0, int[] a1) {\n+    @Test\n+    @IR(counts = { IRNode.AND_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_andc(int[] a0, int[] a1) {\n@@ -431,2 +542,5 @@\n-    @ForceInline\n-    static void test_andv(int[] a0, int[] a1, int b) {\n+\n+    @Test\n+    @IR(counts = { IRNode.AND_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_andv(int[] a0, int[] a1, int b) {\n@@ -437,2 +551,5 @@\n-    @ForceInline\n-    static void test_anda(int[] a0, int[] a1, int[] a2) {\n+\n+    @Test\n+    @IR(counts = { IRNode.AND_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_anda(int[] a0, int[] a1, int[] a2) {\n@@ -444,2 +561,4 @@\n-    @ForceInline\n-    static void test_orc(int[] a0, int[] a1) {\n+    @Test\n+    @IR(counts = { IRNode.OR_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_orc(int[] a0, int[] a1) {\n@@ -450,2 +569,5 @@\n-    @ForceInline\n-    static void test_orv(int[] a0, int[] a1, int b) {\n+\n+    @Test\n+    @IR(counts = { IRNode.OR_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_orv(int[] a0, int[] a1, int b) {\n@@ -456,2 +578,5 @@\n-    @ForceInline\n-    static void test_ora(int[] a0, int[] a1, int[] a2) {\n+\n+    @Test\n+    @IR(counts = { IRNode.OR_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_ora(int[] a0, int[] a1, int[] a2) {\n@@ -463,2 +588,4 @@\n-    @ForceInline\n-    static void test_xorc(int[] a0, int[] a1) {\n+    @Test\n+    @IR(counts = { IRNode.XOR_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_xorc(int[] a0, int[] a1) {\n@@ -469,2 +596,5 @@\n-    @ForceInline\n-    static void test_xorv(int[] a0, int[] a1, int b) {\n+\n+    @Test\n+    @IR(counts = { IRNode.XOR_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_xorv(int[] a0, int[] a1, int b) {\n@@ -475,2 +605,5 @@\n-    @ForceInline\n-    static void test_xora(int[] a0, int[] a1, int[] a2) {\n+\n+    @Test\n+    @IR(counts = { IRNode.XOR_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_xora(int[] a0, int[] a1, int[] a2) {\n@@ -482,2 +615,4 @@\n-    @ForceInline\n-    static void test_sllc(int[] a0, int[] a1) {\n+    @Test\n+    @IR(counts = { IRNode.LSHIFT_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_sllc(int[] a0, int[] a1) {\n@@ -488,2 +623,5 @@\n-    @ForceInline\n-    static void test_sllc_n(int[] a0, int[] a1) {\n+\n+    @Test\n+    @IR(counts = { IRNode.LSHIFT_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_sllc_n(int[] a0, int[] a1) {\n@@ -494,2 +632,2 @@\n-    @ForceInline\n-    static void test_sllc_o(int[] a0, int[] a1) {\n+\n+    void test_sllc_o(int[] a0, int[] a1) {\n@@ -500,2 +638,2 @@\n-    @ForceInline\n-    static void test_sllc_on(int[] a0, int[] a1) {\n+\n+    void test_sllc_on(int[] a0, int[] a1) {\n@@ -506,2 +644,5 @@\n-    @ForceInline\n-    static void test_sllv(int[] a0, int[] a1, int b) {\n+\n+    @Test\n+    @IR(counts = { IRNode.LSHIFT_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_sllv(int[] a0, int[] a1, int b) {\n@@ -513,2 +654,4 @@\n-    @ForceInline\n-    static void test_srlc(int[] a0, int[] a1) {\n+    @Test\n+    @IR(counts = { IRNode.URSHIFT_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_srlc(int[] a0, int[] a1) {\n@@ -519,2 +662,5 @@\n-    @ForceInline\n-    static void test_srlc_n(int[] a0, int[] a1) {\n+\n+    @Test\n+    @IR(counts = { IRNode.URSHIFT_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_srlc_n(int[] a0, int[] a1) {\n@@ -525,2 +671,2 @@\n-    @ForceInline\n-    static void test_srlc_o(int[] a0, int[] a1) {\n+\n+    void test_srlc_o(int[] a0, int[] a1) {\n@@ -531,2 +677,2 @@\n-    @ForceInline\n-    static void test_srlc_on(int[] a0, int[] a1) {\n+\n+    void test_srlc_on(int[] a0, int[] a1) {\n@@ -537,2 +683,5 @@\n-    @ForceInline\n-    static void test_srlv(int[] a0, int[] a1, int b) {\n+\n+    @Test\n+    @IR(counts = { IRNode.URSHIFT_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_srlv(int[] a0, int[] a1, int b) {\n@@ -544,2 +693,4 @@\n-    @ForceInline\n-    static void test_srac(int[] a0, int[] a1) {\n+    @Test\n+    @IR(counts = { IRNode.RSHIFT_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_srac(int[] a0, int[] a1) {\n@@ -550,2 +701,5 @@\n-    @ForceInline\n-    static void test_srac_n(int[] a0, int[] a1) {\n+\n+    @Test\n+    @IR(counts = { IRNode.RSHIFT_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_srac_n(int[] a0, int[] a1) {\n@@ -556,2 +710,2 @@\n-    @ForceInline\n-    static void test_srac_o(int[] a0, int[] a1) {\n+\n+    void test_srac_o(int[] a0, int[] a1) {\n@@ -562,2 +716,2 @@\n-    @ForceInline\n-    static void test_srac_on(int[] a0, int[] a1) {\n+\n+    void test_srac_on(int[] a0, int[] a1) {\n@@ -568,2 +722,5 @@\n-    @ForceInline\n-    static void test_srav(int[] a0, int[] a1, int b) {\n+\n+    @Test\n+    @IR(counts = { IRNode.RSHIFT_VI, \">= 1\" },\n+        applyIfCPUFeature = {\"sse2\", \"true\"})\n+    void test_srav(int[] a0, int[] a1, int b) {\n@@ -575,2 +732,1 @@\n-    @ForceInline\n-    static void test_pack2(long[] p2, int[] a1) {\n+    void test_pack2(long[] p2, int[] a1) {\n@@ -584,2 +740,2 @@\n-    @ForceInline\n-    static void test_unpack2(int[] a0, long[] p2) {\n+\n+    void test_unpack2(int[] a0, long[] p2) {\n@@ -593,2 +749,2 @@\n-    @ForceInline\n-    static void test_pack2_swap(long[] p2, int[] a1) {\n+\n+    void test_pack2_swap(long[] p2, int[] a1) {\n@@ -602,2 +758,2 @@\n-    @ForceInline\n-    static void test_unpack2_swap(int[] a0, long[] p2) {\n+\n+    void test_unpack2_swap(int[] a0, long[] p2) {\n@@ -612,1 +768,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/cr7200264\/TestIntVect.java","additions":510,"deletions":355,"binary":false,"changes":865,"status":"modified"},{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 7200264\n- * @summary 7192963 changes disabled shift vectors\n- * @requires vm.cpu.features ~= \".*sse2.*\" & vm.debug & vm.flavor == \"server\"\n- * @requires !vm.emulatedClient & !vm.graal.enabled\n- * @library \/test\/lib \/\n- * @run driver compiler.c2.cr7200264.TestSSE2IntVect\n- *\/\n-\n-package compiler.c2.cr7200264;\n-\n-import compiler.lib.ir_framework.*;\n-\n-public class TestSSE2IntVect {\n-\n-    public static void main(String[] args) {\n-        new TestFramework().addHelperClasses(TestIntVect.class).addFlags(\"-XX:+IgnoreUnrecognizedVMOptions\", \"-XX:StressLongCountedLoop=0\").start();\n-    }\n-\n-    @Test\n-    @IR(counts = {IRNode.ADD_VI, \">= 4\",\n-                  IRNode.SUB_VI, \">= 4\",\n-                  IRNode.AND_VI, \">= 3\",\n-                  IRNode.OR_VI, \">= 3\",\n-                  IRNode.XOR_VI, \">= 3\",\n-                  IRNode.LSHIFT_VI, \">= 5\",\n-                  IRNode.RSHIFT_VI, \">= 3\",\n-                  IRNode.URSHIFT_VI, \">= 3\" })\n-    static void test() {\n-        TestIntVect.testInner();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/cr7200264\/TestSSE2IntVect.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 7200264\n- * @summary 7192963 changes disabled shift vectors\n- * @requires vm.cpu.features ~= \".*sse4\\\\.1.*\" & vm.debug & vm.flavor == \"server\"\n- * @requires !vm.emulatedClient & !vm.graal.enabled\n- * @library \/test\/lib \/\n- * @run driver compiler.c2.cr7200264.TestSSE4IntVect\n- *\/\n-\n-package compiler.c2.cr7200264;\n-\n-import compiler.lib.ir_framework.*;\n-\n-public class TestSSE4IntVect {\n-\n-    public static void main(String[] args) {\n-        new TestFramework().addHelperClasses(TestIntVect.class).addFlags(\"-XX:+IgnoreUnrecognizedVMOptions\", \"-XX:StressLongCountedLoop=0\").start();\n-    }\n-\n-    @Test\n-    @IR(counts = {IRNode.MUL_VI, \">= 2\" })\n-    static void test() {\n-        TestIntVect.testInner();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/cr7200264\/TestSSE4IntVect.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"}]}