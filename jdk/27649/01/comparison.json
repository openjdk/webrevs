{"files":[{"patch":"@@ -151,3 +151,0 @@\n-class RelocActions {\n-protected:\n-  typedef int (*reloc_insn)(address insn_addr, address &target);\n@@ -155,6 +152,3 @@\n-  virtual reloc_insn adrpMem() = 0;\n-  virtual reloc_insn adrpAdd() = 0;\n-  virtual reloc_insn adrpMovk() = 0;\n-\n-  const address _insn_addr;\n-  const uint32_t _insn;\n+static uint32_t insn_at(address insn_addr, int n) {\n+  return ((uint32_t*)insn_addr)[n];\n+}\n@@ -162,6 +156,2 @@\n-  static uint32_t insn_at(address insn_addr, int n) {\n-    return ((uint32_t*)insn_addr)[n];\n-  }\n-  uint32_t insn_at(int n) const {\n-    return insn_at(_insn_addr, n);\n-  }\n+template<typename T>\n+class RelocActions : public AllStatic {\n@@ -171,14 +161,1 @@\n-  RelocActions(address insn_addr) : _insn_addr(insn_addr), _insn(insn_at(insn_addr, 0)) {}\n-  RelocActions(address insn_addr, uint32_t insn)\n-    :  _insn_addr(insn_addr), _insn(insn) {}\n-\n-  virtual int unconditionalBranch(address insn_addr, address &target) = 0;\n-  virtual int conditionalBranch(address insn_addr, address &target) = 0;\n-  virtual int testAndBranch(address insn_addr, address &target) = 0;\n-  virtual int loadStore(address insn_addr, address &target) = 0;\n-  virtual int adr(address insn_addr, address &target) = 0;\n-  virtual int adrp(address insn_addr, address &target, reloc_insn inner) = 0;\n-  virtual int immediate(address insn_addr, address &target) = 0;\n-  virtual void verify(address insn_addr, address &target) = 0;\n-\n-  int ALWAYSINLINE run(address insn_addr, address &target) {\n+  static int ALWAYSINLINE run(address insn_addr, address &target) {\n@@ -186,0 +163,1 @@\n+    uint32_t insn = insn_at(insn_addr, 0);\n@@ -187,1 +165,1 @@\n-    uint32_t dispatch = Instruction_aarch64::extract(_insn, 30, 25);\n+    uint32_t dispatch = Instruction_aarch64::extract(insn, 30, 25);\n@@ -191,1 +169,1 @@\n-        instructions = unconditionalBranch(insn_addr, target);\n+        instructions = T::unconditionalBranch(insn_addr, target);\n@@ -196,2 +174,2 @@\n-        instructions = conditionalBranch(insn_addr, target);\n-          break;\n+        instructions = T::conditionalBranch(insn_addr, target);\n+        break;\n@@ -200,1 +178,1 @@\n-        instructions = testAndBranch(insn_addr, target);\n+        instructions = T::testAndBranch(insn_addr, target);\n@@ -212,1 +190,1 @@\n-        if ((Instruction_aarch64::extract(_insn, 29, 24) & 0b111011) == 0b011000) {\n+        if ((Instruction_aarch64::extract(insn, 29, 24) & 0b111011) == 0b011000) {\n@@ -214,1 +192,1 @@\n-          instructions = loadStore(insn_addr, target);\n+          instructions = T::loadStore(insn_addr, target);\n@@ -227,2 +205,2 @@\n-        assert(Instruction_aarch64::extract(_insn, 28, 24) == 0b10000, \"must be\");\n-        int shift = Instruction_aarch64::extract(_insn, 31, 31);\n+        assert(Instruction_aarch64::extract(insn, 28, 24) == 0b10000, \"must be\");\n+        int shift = Instruction_aarch64::extract(insn, 31, 31);\n@@ -230,1 +208,1 @@\n-          uint32_t insn2 = insn_at(1);\n+          uint32_t insn2 = insn_at(insn_addr, 1);\n@@ -232,1 +210,1 @@\n-              Instruction_aarch64::extract(_insn, 4, 0) ==\n+              Instruction_aarch64::extract(insn, 4, 0) ==\n@@ -234,1 +212,1 @@\n-            instructions = adrp(insn_addr, target, adrpMem());\n+            instructions = T::adrp(insn_addr, target, T::adrpMem);\n@@ -236,1 +214,1 @@\n-                     Instruction_aarch64::extract(_insn, 4, 0) ==\n+                     Instruction_aarch64::extract(insn, 4, 0) ==\n@@ -238,1 +216,1 @@\n-            instructions = adrp(insn_addr, target, adrpAdd());\n+            instructions = T::adrp(insn_addr, target, T::adrpAdd);\n@@ -240,1 +218,1 @@\n-                     Instruction_aarch64::extract(_insn, 4, 0) ==\n+                     Instruction_aarch64::extract(insn, 4, 0) ==\n@@ -242,1 +220,1 @@\n-            instructions = adrp(insn_addr, target, adrpMovk());\n+            instructions = T::adrp(insn_addr, target, T::adrpMovk);\n@@ -247,1 +225,1 @@\n-          instructions = adr(insn_addr, target);\n+          instructions = T::adr(insn_addr, target);\n@@ -255,1 +233,1 @@\n-        instructions = immediate(insn_addr, target);\n+        instructions = T::immediate(insn_addr, target);\n@@ -263,1 +241,1 @@\n-    verify(insn_addr, target);\n+    T::verify(insn_addr, target);\n@@ -268,5 +246,1 @@\n-class Patcher : public RelocActions {\n-  virtual reloc_insn adrpMem() { return &Patcher::adrpMem_impl; }\n-  virtual reloc_insn adrpAdd() { return &Patcher::adrpAdd_impl; }\n-  virtual reloc_insn adrpMovk() { return &Patcher::adrpMovk_impl; }\n-\n+class Patcher : public AllStatic {\n@@ -274,3 +248,1 @@\n-  Patcher(address insn_addr) : RelocActions(insn_addr) {}\n-\n-  virtual int unconditionalBranch(address insn_addr, address &target) {\n+  static int unconditionalBranch(address insn_addr, address &target) {\n@@ -281,1 +253,1 @@\n-  virtual int conditionalBranch(address insn_addr, address &target) {\n+  static int conditionalBranch(address insn_addr, address &target) {\n@@ -286,1 +258,1 @@\n-  virtual int testAndBranch(address insn_addr, address &target) {\n+  static int testAndBranch(address insn_addr, address &target) {\n@@ -291,1 +263,1 @@\n-  virtual int loadStore(address insn_addr, address &target) {\n+  static int loadStore(address insn_addr, address &target) {\n@@ -296,1 +268,1 @@\n-  virtual int adr(address insn_addr, address &target) {\n+  static int adr(address insn_addr, address &target) {\n@@ -298,1 +270,1 @@\n-    assert(Instruction_aarch64::extract(_insn, 28, 24) == 0b10000, \"must be\");\n+    assert(Instruction_aarch64::extract(insn_at(insn_addr, 0), 28, 24) == 0b10000, \"must be\");\n@@ -308,1 +280,2 @@\n-  virtual int adrp(address insn_addr, address &target, reloc_insn inner) {\n+  template<typename U>\n+  static int adrp(address insn_addr, address &target, U inner) {\n@@ -311,1 +284,1 @@\n-    assert(Instruction_aarch64::extract(_insn, 28, 24) == 0b10000, \"must be\");\n+    assert(Instruction_aarch64::extract(insn_at(insn_addr, 0), 28, 24) == 0b10000, \"must be\");\n@@ -318,1 +291,1 @@\n-    instructions = (*inner)(insn_addr, adjusted_target);\n+    instructions = inner(insn_addr, adjusted_target);\n@@ -328,1 +301,1 @@\n-  static int adrpMem_impl(address insn_addr, address &target) {\n+  static int adrpMem(address insn_addr, address &target) {\n@@ -337,1 +310,1 @@\n-  static int adrpAdd_impl(address insn_addr, address &target) {\n+  static int adrpAdd(address insn_addr, address &target) {\n@@ -343,1 +316,1 @@\n-  static int adrpMovk_impl(address insn_addr, address &target) {\n+  static int adrpMovk(address insn_addr, address &target) {\n@@ -350,2 +323,2 @@\n-  virtual int immediate(address insn_addr, address &target) {\n-    assert(Instruction_aarch64::extract(_insn, 31, 21) == 0b11010010100, \"must be\");\n+  static int immediate(address insn_addr, address &target) {\n+    assert(Instruction_aarch64::extract(insn_at(insn_addr, 0), 31, 21) == 0b11010010100, \"must be\");\n@@ -361,1 +334,1 @@\n-  virtual void verify(address insn_addr, address &target) {\n+  static void verify(address insn_addr, address &target) {\n@@ -395,5 +368,1 @@\n-class AArch64Decoder : public RelocActions {\n-  virtual reloc_insn adrpMem() { return &AArch64Decoder::adrpMem_impl; }\n-  virtual reloc_insn adrpAdd() { return &AArch64Decoder::adrpAdd_impl; }\n-  virtual reloc_insn adrpMovk() { return &AArch64Decoder::adrpMovk_impl; }\n-\n+class AArch64Decoder : public AllStatic {\n@@ -401,1 +370,0 @@\n-  AArch64Decoder(address insn_addr, uint32_t insn) : RelocActions(insn_addr, insn) {}\n@@ -403,2 +371,2 @@\n-  virtual int loadStore(address insn_addr, address &target) {\n-    intptr_t offset = Instruction_aarch64::sextract(_insn, 23, 5);\n+  static int loadStore(address insn_addr, address &target) {\n+    intptr_t offset = Instruction_aarch64::sextract(insn_at(insn_addr, 0), 23, 5);\n@@ -408,2 +376,2 @@\n-  virtual int unconditionalBranch(address insn_addr, address &target) {\n-    intptr_t offset = Instruction_aarch64::sextract(_insn, 25, 0);\n+  static int unconditionalBranch(address insn_addr, address &target) {\n+    intptr_t offset = Instruction_aarch64::sextract(insn_at(insn_addr, 0), 25, 0);\n@@ -413,2 +381,2 @@\n-  virtual int conditionalBranch(address insn_addr, address &target) {\n-    intptr_t offset = Instruction_aarch64::sextract(_insn, 23, 5);\n+  static int conditionalBranch(address insn_addr, address &target) {\n+    intptr_t offset = Instruction_aarch64::sextract(insn_at(insn_addr, 0), 23, 5);\n@@ -418,2 +386,2 @@\n-  virtual int testAndBranch(address insn_addr, address &target) {\n-    intptr_t offset = Instruction_aarch64::sextract(_insn, 18, 5);\n+  static int testAndBranch(address insn_addr, address &target) {\n+    intptr_t offset = Instruction_aarch64::sextract(insn_at(insn_addr, 0), 18, 5);\n@@ -423,1 +391,1 @@\n-  virtual int adr(address insn_addr, address &target) {\n+  static int adr(address insn_addr, address &target) {\n@@ -425,2 +393,3 @@\n-    intptr_t offset = Instruction_aarch64::extract(_insn, 30, 29);\n-    offset |= Instruction_aarch64::sextract(_insn, 23, 5) << 2;\n+    uint32_t insn = insn_at(insn_addr, 0);\n+    intptr_t offset = Instruction_aarch64::extract(insn, 30, 29);\n+    offset |= Instruction_aarch64::sextract(insn, 23, 5) << 2;\n@@ -430,4 +399,6 @@\n-  virtual int adrp(address insn_addr, address &target, reloc_insn inner) {\n-    assert(Instruction_aarch64::extract(_insn, 28, 24) == 0b10000, \"must be\");\n-    intptr_t offset = Instruction_aarch64::extract(_insn, 30, 29);\n-    offset |= Instruction_aarch64::sextract(_insn, 23, 5) << 2;\n+  template<typename U>\n+  static int adrp(address insn_addr, address &target, U inner) {\n+    uint32_t insn = insn_at(insn_addr, 0);\n+    assert(Instruction_aarch64::extract(insn, 28, 24) == 0b10000, \"must be\");\n+    intptr_t offset = Instruction_aarch64::extract(insn, 30, 29);\n+    offset |= Instruction_aarch64::sextract(insn, 23, 5) << 2;\n@@ -438,1 +409,1 @@\n-    uint32_t insn2 = insn_at(1);\n+    uint32_t insn2 = insn_at(insn_addr, 1);\n@@ -441,1 +412,1 @@\n-    (*inner)(insn_addr, target);\n+    inner(insn_addr, target);\n@@ -444,1 +415,1 @@\n-  static int adrpMem_impl(address insn_addr, address &target) {\n+  static int adrpMem(address insn_addr, address &target) {\n@@ -453,1 +424,1 @@\n-  static int adrpAdd_impl(address insn_addr, address &target) {\n+  static int adrpAdd(address insn_addr, address &target) {\n@@ -460,1 +431,1 @@\n-  static int adrpMovk_impl(address insn_addr, address &target) {\n+  static int adrpMovk(address insn_addr, address &target) {\n@@ -479,1 +450,1 @@\n-  virtual int immediate(address insn_addr, address &target) {\n+  static int immediate(address insn_addr, address &target) {\n@@ -481,1 +452,1 @@\n-    assert(Instruction_aarch64::extract(_insn, 31, 21) == 0b11010010100, \"must be\");\n+    assert(Instruction_aarch64::extract(insns[0], 31, 21) == 0b11010010100, \"must be\");\n@@ -485,3 +456,3 @@\n-    target = address(uint64_t(Instruction_aarch64::extract(_insn, 20, 5))\n-                 + (uint64_t(Instruction_aarch64::extract(insns[1], 20, 5)) << 16)\n-                 + (uint64_t(Instruction_aarch64::extract(insns[2], 20, 5)) << 32));\n+    target = address(uint64_t(Instruction_aarch64::extract(insns[0], 20, 5))\n+                  + (uint64_t(Instruction_aarch64::extract(insns[1], 20, 5)) << 16)\n+                  + (uint64_t(Instruction_aarch64::extract(insns[2], 20, 5)) << 32));\n@@ -492,1 +463,1 @@\n-  virtual void verify(address insn_addr, address &target) {\n+  static void verify(address insn_addr, address &target) {\n@@ -496,2 +467,1 @@\n-address MacroAssembler::target_addr_for_insn(address insn_addr, uint32_t insn) {\n-  AArch64Decoder decoder(insn_addr, insn);\n+address MacroAssembler::target_addr_for_insn(address insn_addr) {\n@@ -499,1 +469,1 @@\n-  decoder.run(insn_addr, target);\n+  RelocActions<AArch64Decoder>::run(insn_addr, target);\n@@ -506,2 +476,1 @@\n-  Patcher patcher(insn_addr);\n-  return patcher.run(insn_addr, target);\n+  return RelocActions<Patcher>::run(insn_addr, target);\n@@ -549,2 +518,2 @@\n-address MacroAssembler::target_addr_for_insn_or_null(address insn_addr, unsigned insn) {\n-  if (NativeInstruction::is_ldrw_to_zr(address(&insn))) {\n+address MacroAssembler::target_addr_for_insn_or_null(address insn_addr) {\n+  if (NativeInstruction::is_ldrw_to_zr(insn_addr)) {\n@@ -553,1 +522,1 @@\n-  return MacroAssembler::target_addr_for_insn(insn_addr, insn);\n+  return MacroAssembler::target_addr_for_insn(insn_addr);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":79,"deletions":110,"binary":false,"changes":189,"status":"modified"},{"patch":"@@ -679,10 +679,2 @@\n-  static address target_addr_for_insn(address insn_addr, unsigned insn);\n-  static address target_addr_for_insn_or_null(address insn_addr, unsigned insn);\n-  static address target_addr_for_insn(address insn_addr) {\n-    unsigned insn = *(unsigned*)insn_addr;\n-    return target_addr_for_insn(insn_addr, insn);\n-  }\n-  static address target_addr_for_insn_or_null(address insn_addr) {\n-    unsigned insn = *(unsigned*)insn_addr;\n-    return target_addr_for_insn_or_null(insn_addr, insn);\n-  }\n+  static address target_addr_for_insn(address insn_addr);\n+  static address target_addr_for_insn_or_null(address insn_addr);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"}]}