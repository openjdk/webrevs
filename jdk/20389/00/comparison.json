{"files":[{"patch":"@@ -203,80 +203,0 @@\n-\n-    public static Class<?> objectOnStack() {\n-        return SimpleDebugInfoTest.class;\n-    }\n-\n-    private void testObjectOnStack(DebugInfoCompiler compiler) {\n-        test(compiler, getMethod(\"objectOnStack\"), 2, JavaKind.Object);\n-    }\n-\n-    public static Class<?> objectInLocal() {\n-        Class<?> local = SimpleDebugInfoTest.class;\n-        return local;\n-    }\n-\n-    private void testObjectInLocal(DebugInfoCompiler compiler) {\n-        test(compiler, getMethod(\"objectInLocal\"), 3, JavaKind.Object);\n-    }\n-\n-    @Test\n-    public void testConstObject() {\n-        ResolvedJavaType type = metaAccess.lookupJavaType(objectOnStack());\n-        DebugInfoCompiler compiler = (asm, values) -> {\n-            values[0] = constantReflection.asJavaClass(type);\n-            return null;\n-        };\n-        testObjectOnStack(compiler);\n-        testObjectInLocal(compiler);\n-    }\n-\n-    @Test\n-    public void testRegObject() {\n-        ResolvedJavaType type = metaAccess.lookupJavaType(objectOnStack());\n-        DebugInfoCompiler compiler = (asm, values) -> {\n-            Register reg = asm.emitLoadPointer((HotSpotConstant) constantReflection.asJavaClass(type));\n-            values[0] = reg.asValue(asm.getValueKind(JavaKind.Object));\n-            return null;\n-        };\n-        testObjectOnStack(compiler);\n-        testObjectInLocal(compiler);\n-    }\n-\n-    @Test\n-    public void testStackObject() {\n-        ResolvedJavaType type = metaAccess.lookupJavaType(objectOnStack());\n-        DebugInfoCompiler compiler = (asm, values) -> {\n-            Register reg = asm.emitLoadPointer((HotSpotConstant) constantReflection.asJavaClass(type));\n-            values[0] = asm.emitPointerToStack(reg);\n-            return null;\n-        };\n-        testObjectOnStack(compiler);\n-        testObjectInLocal(compiler);\n-    }\n-\n-    @Test\n-    public void testRegNarrowObject() {\n-        Assume.assumeTrue(config.useCompressedOops);\n-        ResolvedJavaType type = metaAccess.lookupJavaType(objectOnStack());\n-        DebugInfoCompiler compiler = (asm, values) -> {\n-            HotSpotConstant wide = (HotSpotConstant) constantReflection.asJavaClass(type);\n-            Register reg = asm.emitLoadPointer((HotSpotConstant) wide.compress());\n-            values[0] = reg.asValue(asm.narrowOopKind);\n-            return null;\n-        };\n-        testObjectOnStack(compiler);\n-        testObjectInLocal(compiler);\n-    }\n-\n-    @Test\n-    public void testStackNarrowObject() {\n-        Assume.assumeTrue(config.useCompressedOops);\n-        ResolvedJavaType type = metaAccess.lookupJavaType(objectOnStack());\n-        DebugInfoCompiler compiler = (asm, values) -> {\n-            HotSpotConstant wide = (HotSpotConstant) constantReflection.asJavaClass(type);\n-            Register reg = asm.emitLoadPointer((HotSpotConstant) wide.compress());\n-            values[0] = asm.emitNarrowPointerToStack(reg);\n-            return null;\n-        };\n-        testObjectOnStack(compiler);\n-        testObjectInLocal(compiler);\n-    }\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/SimpleDebugInfoTest.java","additions":0,"deletions":80,"binary":false,"changes":80,"status":"modified"}]}