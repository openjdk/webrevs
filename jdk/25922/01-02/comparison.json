{"files":[{"patch":"@@ -66,0 +66,2 @@\n+\/\/         This function checks for the @jdk.internal.vm.annotation.AOTClassInitializer annotation, which\n+\/\/         also allows AOT-initialized classes to declare runtimeSetup() methods for the production run.\n","filename":"src\/hotspot\/share\/cds\/aotArtifactFinder.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -768,1 +768,1 @@\n-  \/\/ with explicit assembly phase assemblyCleanup() or production run runtimeSetup() access?\n+  \/\/ with explicit production run runtimeSetup() access?\n@@ -770,1 +770,1 @@\n-  \/\/ However, access to setup\/cleanup functionality must be requested.\n+  \/\/ However, access to setup functionality must be requested.\n@@ -774,0 +774,1 @@\n+  \/\/ Indicates private static void runtimeSetup() presence; requires has_aot_initialization() as above.\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -751,1 +751,1 @@\n-\/\/            System.out.println(\"import jdk.internal.vm.annotation.MethodHandleArchived;\");\n+\/\/            System.out.println(\"import jdk.internal.vm.annotation.AOTClassInitializer;\");\n@@ -756,1 +756,1 @@\n-\/\/            System.out.println(\"@MethodHandleArchived\");\n+\/\/            System.out.println(\"@AOTClassInitializer\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}