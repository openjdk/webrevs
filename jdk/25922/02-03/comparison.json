{"files":[{"patch":"@@ -66,1 +66,1 @@\n-\/\/         This function checks for the @jdk.internal.vm.annotation.AOTClassInitializer annotation, which\n+\/\/         This function checks for the @jdk.internal.vm.annotation.AOTSafeClassInitializer annotation, which\n","filename":"src\/hotspot\/share\/cds\/aotArtifactFinder.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,3 +40,3 @@\n-\/\/ Tell if ik is marked as AOT initialized via an annotation.\n-bool AOTClassInitializer::has_aot_initialization(InstanceKlass* ik) {\n-  if (ik->has_aot_initialization()) {\n+\/\/ Tell if ik is marked as AOT initialization safe via @jdk.internal.vm.annotation.AOTSafeClassInitializer.\n+bool AOTClassInitializer::allows_aot_initialization(InstanceKlass* ik) {\n+  if (ik->has_aot_safe_initializer()) {\n@@ -68,1 +68,1 @@\n-      log_info(aot, init)(\"Found @AOTClassInitializer class %s\", ik->external_name());\n+      log_info(aot, init)(\"Found @AOTSafeClassInitializer class %s\", ik->external_name());\n@@ -247,1 +247,1 @@\n-    \/\/ The list of @AOTClassInitializer was created with the help of CDSHeapVerifier.\n+    \/\/ The minimal list of @AOTSafeClassInitializer was created with the help of CDSHeapVerifier.\n@@ -256,1 +256,1 @@\n-    if (has_aot_initialization(ik)) {\n+    if (allows_aot_initialization(ik)) {\n@@ -270,12 +270,0 @@\n-bool AOTClassInitializer::has_runtime_setup(InstanceKlass* ik) {\n-  if (ik->has_aot_initialization()) {\n-    Method* runtime_setup_method = ik->find_method(vmSymbols::runtimeSetup(), vmSymbols::void_method_signature());\n-    if (runtime_setup_method != nullptr) {\n-      assert(runtime_setup_method->access_flags().is_private() && runtime_setup_method->access_flags().is_static(),\n-             \"%s::runtimeSetup() not private static\", ik->external_name());\n-      return true;\n-    }\n-  }\n-  return false;\n-}\n-\n","filename":"src\/hotspot\/share\/cds\/aotClassInitializer.cpp","additions":6,"deletions":18,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-  static bool has_aot_initialization(InstanceKlass* ik);\n+  static bool allows_aot_initialization(InstanceKlass* ik);\n@@ -41,1 +41,0 @@\n-  static bool has_runtime_setup(InstanceKlass* ik);\n","filename":"src\/hotspot\/share\/cds\/aotClassInitializer.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -509,3 +509,0 @@\n-  if (AOTClassInitializer::has_runtime_setup(ik)) {\n-    ik->set_is_runtime_setup_required();\n-  }\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -944,1 +944,2 @@\n-    _jdk_internal_vm_annotation_AOTClassInitializer,\n+    _jdk_internal_vm_annotation_AOTSafeClassInitializer,\n+    _method_AOTRuntimeSetup,\n@@ -980,0 +981,2 @@\n+\n+  bool has_aot_runtime_setup() const { return has_annotation(_method_AOTRuntimeSetup); }\n@@ -1900,1 +1903,1 @@\n-    case VM_SYMBOL_ENUM_NAME(jdk_internal_vm_annotation_AOTClassInitializer_signature): {\n+    case VM_SYMBOL_ENUM_NAME(jdk_internal_vm_annotation_AOTSafeClassInitializer_signature): {\n@@ -1903,1 +1906,6 @@\n-      return _jdk_internal_vm_annotation_AOTClassInitializer;\n+      return _jdk_internal_vm_annotation_AOTSafeClassInitializer;\n+    }\n+    case VM_SYMBOL_ENUM_NAME(jdk_internal_vm_annotation_AOTRuntimeSetup_signature): {\n+      if (_location != _in_method)  break;  \/\/ only allow for methods\n+      if (!privileged)              break;  \/\/ only allow in privileged code\n+      return _method_AOTRuntimeSetup;\n@@ -1984,2 +1992,2 @@\n-  if (has_annotation(_jdk_internal_vm_annotation_AOTClassInitializer)) {\n-    ik->set_has_aot_initialization();\n+  if (has_annotation(_jdk_internal_vm_annotation_AOTSafeClassInitializer)) {\n+    ik->set_has_aot_safe_initializer();\n@@ -2673,0 +2681,7 @@\n+  if (parsed_annotations.has_aot_runtime_setup()) {\n+    if (name != vmSymbols::runtimeSetup() || signature != vmSymbols::void_method_signature() ||\n+        !access_flags.is_private() || !access_flags.is_static()) {\n+      classfile_parse_error(\"Incorrect runtimeSetup method declaration in class file %s\", CHECK_NULL);\n+    }\n+    _has_aot_runtime_setup_method = true;\n+  }\n@@ -3990,0 +4005,5 @@\n+\n+  \/\/ Propagate the AOT runtimeSetup method discovery\n+  if (_has_aot_runtime_setup_method) {\n+    ik->set_is_runtime_setup_required();\n+  }\n@@ -5338,0 +5358,1 @@\n+  _has_aot_runtime_setup_method(false),\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":26,"deletions":5,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -195,0 +195,1 @@\n+  bool _has_aot_runtime_setup_method;\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -735,1 +735,1 @@\n-  template(jdk_internal_vm_annotation_AOTClassInitializer_signature, \"Ljdk\/internal\/vm\/annotation\/AOTClassInitializer;\")\\\n+  template(jdk_internal_vm_annotation_AOTSafeClassInitializer_signature, \"Ljdk\/internal\/vm\/annotation\/AOTSafeClassInitializer;\")\\\n@@ -738,0 +738,1 @@\n+  template(jdk_internal_vm_annotation_AOTRuntimeSetup_signature, \"Ljdk\/internal\/vm\/annotation\/AOTRuntimeSetup;\")  \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -771,2 +771,2 @@\n-  bool has_aot_initialization() const { return _misc_flags.has_aot_initialization(); }\n-  void set_has_aot_initialization()   { _misc_flags.set_has_aot_initialization(true); }\n+  bool has_aot_safe_initializer() const { return _misc_flags.has_aot_safe_initializer(); }\n+  void set_has_aot_safe_initializer()   { _misc_flags.set_has_aot_safe_initializer(true); }\n@@ -774,1 +774,1 @@\n-  \/\/ Indicates private static void runtimeSetup() presence; requires has_aot_initialization() as above.\n+  \/\/ Indicates private static void runtimeSetup() presence; requires has_aot_safe_initializer() as above.\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,2 +57,2 @@\n-    flag(has_aot_initialization             , 1 << 14) \/* True if klass explicitly requests to be initialized in AOT archive *\/ \\\n-    flag(is_runtime_setup_required          , 1 << 15) \/* True if klass has a runtimeSetup method to be called *\/ \\\n+    flag(has_aot_safe_initializer           , 1 << 14) \/* has @AOTSafeClassInitializer annotation *\/ \\\n+    flag(is_runtime_setup_required          , 1 << 15) \/* has a runtimeSetup method to be called *\/ \\\n","filename":"src\/hotspot\/share\/oops\/instanceKlassFlags.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n-import java.lang.reflect.Proxy;\n@@ -82,1 +81,1 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n+import jdk.internal.vm.annotation.AOTRuntimeSetup;\n@@ -215,1 +214,0 @@\n-@AOTClassInitializer\n@@ -231,1 +229,1 @@\n-    \/\/ Called from JVM when loading an AOT cache\n+    @AOTRuntimeSetup\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n+import jdk.internal.vm.annotation.AOTSafeClassInitializer;\n@@ -60,1 +60,1 @@\n-@AOTClassInitializer\n+@AOTSafeClassInitializer\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ConstantDescs.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n+import jdk.internal.vm.annotation.AOTSafeClassInitializer;\n@@ -61,1 +61,1 @@\n-@AOTClassInitializer\n+@AOTSafeClassInitializer \/\/ for PrimitiveClassDescImpl\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/DynamicConstantDesc.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n+import jdk.internal.vm.annotation.AOTSafeClassInitializer;\n@@ -48,1 +48,1 @@\n-@AOTClassInitializer\n+@AOTSafeClassInitializer\n@@ -238,1 +238,1 @@\n-    @AOTClassInitializer\n+    @AOTSafeClassInitializer\n@@ -318,1 +318,1 @@\n-    @AOTClassInitializer\n+    @AOTSafeClassInitializer\n@@ -409,1 +409,1 @@\n-    @AOTClassInitializer\n+    @AOTSafeClassInitializer\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/BoundMethodHandle.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n+import jdk.internal.vm.annotation.AOTSafeClassInitializer;\n@@ -68,1 +68,1 @@\n-@AOTClassInitializer\n+@AOTSafeClassInitializer\n@@ -74,2 +74,2 @@\n-    private static final RuntimeVisibleAnnotationsAttribute AOT_INITIALIZER_ANNOTATION = RuntimeVisibleAnnotationsAttribute.of(\n-            Annotation.of(ConstantUtils.referenceClassDesc(AOTClassInitializer.class))\n+    private static final RuntimeVisibleAnnotationsAttribute AOT_SAFE_ANNOTATION = RuntimeVisibleAnnotationsAttribute.of(\n+            Annotation.of(ConstantUtils.referenceClassDesc(AOTSafeClassInitializer.class))\n@@ -241,1 +241,1 @@\n-    @AOTClassInitializer\n+    @AOTSafeClassInitializer\n@@ -478,1 +478,1 @@\n-    @AOTClassInitializer\n+    @AOTSafeClassInitializer\n@@ -634,1 +634,1 @@\n-                       .with(AOT_INITIALIZER_ANNOTATION)\n+                       .with(AOT_SAFE_ANNOTATION)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/ClassSpecializer.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n+import jdk.internal.vm.annotation.AOTSafeClassInitializer;\n@@ -42,1 +42,1 @@\n-@AOTClassInitializer\n+@AOTSafeClassInitializer\n@@ -200,1 +200,1 @@\n-    @AOTClassInitializer\n+    @AOTSafeClassInitializer\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DelegatingMethodHandle.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.vm.annotation.AOTSafeClassInitializer;\n@@ -31,1 +32,0 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n@@ -53,1 +53,1 @@\n-@AOTClassInitializer\n+@AOTSafeClassInitializer\n@@ -471,1 +471,1 @@\n-    @AOTClassInitializer\n+    @AOTSafeClassInitializer\n@@ -943,1 +943,1 @@\n-    @AOTClassInitializer\n+    @AOTSafeClassInitializer\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n+import jdk.internal.vm.annotation.AOTSafeClassInitializer;\n@@ -73,1 +73,1 @@\n-    static final Annotation AOT_INITIALIZER_ANNOTATION = Annotation.of(AOTClassInitializer.class.describeConstable().orElseThrow());\n+    static final Annotation AOT_SAFE_ANNOTATION = Annotation.of(AOTSafeClassInitializer.class.describeConstable().orElseThrow());\n@@ -569,1 +569,1 @@\n-               .with(RuntimeVisibleAnnotationsAttribute.of(AOT_INITIALIZER_ANNOTATION))\n+               .with(RuntimeVisibleAnnotationsAttribute.of(AOT_SAFE_ANNOTATION))\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/GenerateJLIClassesHelper.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.vm.annotation.AOTSafeClassInitializer;\n@@ -32,1 +33,0 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n@@ -47,1 +47,1 @@\n-@AOTClassInitializer\n+@AOTSafeClassInitializer\n@@ -701,1 +701,1 @@\n-    @AOTClassInitializer\n+    @AOTSafeClassInitializer\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/Invokers.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.vm.annotation.AOTSafeClassInitializer;\n@@ -32,1 +33,0 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n@@ -126,1 +126,1 @@\n-@AOTClassInitializer\n+@AOTSafeClassInitializer\n@@ -1037,1 +1037,1 @@\n-    @AOTClassInitializer\n+    @AOTSafeClassInitializer\n@@ -1734,1 +1734,1 @@\n-    @AOTClassInitializer\n+    @AOTSafeClassInitializer\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaForm.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n+import jdk.internal.vm.annotation.AOTSafeClassInitializer;\n@@ -252,1 +252,1 @@\n-@AOTClassInitializer\n+@AOTSafeClassInitializer\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaMetafactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.vm.annotation.AOTSafeClassInitializer;\n@@ -33,1 +34,0 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n@@ -446,1 +446,1 @@\n-@AOTClassInitializer\n+@AOTSafeClassInitializer\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandle.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+import jdk.internal.vm.annotation.AOTRuntimeSetup;\n+import jdk.internal.vm.annotation.AOTSafeClassInitializer;\n@@ -38,1 +40,0 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n@@ -76,1 +77,1 @@\n-@AOTClassInitializer\n+@AOTSafeClassInitializer\n@@ -163,1 +164,1 @@\n-    @AOTClassInitializer\n+    @AOTSafeClassInitializer\n@@ -459,1 +460,1 @@\n-    @AOTClassInitializer\n+    @AOTSafeClassInitializer\n@@ -682,1 +683,1 @@\n-    @AOTClassInitializer\n+    @AOTSafeClassInitializer\n@@ -718,1 +719,1 @@\n-    @AOTClassInitializer\n+    @AOTSafeClassInitializer\n@@ -1044,1 +1045,1 @@\n-    @AOTClassInitializer\n+    @AOTSafeClassInitializer\n@@ -1153,1 +1154,1 @@\n-        @AOTClassInitializer\n+        @AOTSafeClassInitializer\n@@ -1296,1 +1297,1 @@\n-    @AOTClassInitializer\n+    @AOTSafeClassInitializer\n@@ -1360,1 +1361,1 @@\n-    @AOTClassInitializer\n+    @AOTSafeClassInitializer\n@@ -1541,1 +1542,1 @@\n-    \/\/ Also called from JVM when loading an AOT cache\n+    @AOTRuntimeSetup\n@@ -1791,1 +1792,1 @@\n-    @AOTClassInitializer\n+    @AOTSafeClassInitializer\n@@ -2119,1 +2120,1 @@\n-    @AOTClassInitializer\n+    @AOTSafeClassInitializer\n@@ -2149,1 +2150,1 @@\n-    @AOTClassInitializer\n+    @AOTSafeClassInitializer\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.internal.vm.annotation.AOTSafeClassInitializer;\n@@ -36,1 +37,0 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n@@ -87,1 +87,1 @@\n-@AOTClassInitializer\n+@AOTSafeClassInitializer\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n+import jdk.internal.vm.annotation.AOTSafeClassInitializer;\n@@ -37,1 +37,1 @@\n-@AOTClassInitializer\n+@AOTSafeClassInitializer\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/SimpleMethodHandle.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n+import jdk.internal.vm.annotation.AOTSafeClassInitializer;\n@@ -120,1 +120,1 @@\n-@AOTClassInitializer\n+@AOTSafeClassInitializer\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import jdk.internal.vm.annotation.AOTSafeClassInitializer;\n@@ -29,1 +30,0 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n@@ -32,1 +32,1 @@\n-@AOTClassInitializer\n+@AOTSafeClassInitializer\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandleGuards.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -749,0 +749,1 @@\n+\/\/            System.out.println(\"import jdk.internal.vm.annotation.AOTSafeClassInitializer;\");\n@@ -751,1 +752,0 @@\n-\/\/            System.out.println(\"import jdk.internal.vm.annotation.AOTClassInitializer;\");\n@@ -756,1 +756,1 @@\n-\/\/            System.out.println(\"@AOTClassInitializer\");\n+\/\/            System.out.println(\"@AOTSafeClassInitializer\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n+import jdk.internal.vm.annotation.AOTRuntimeSetup;\n@@ -47,1 +47,0 @@\n-@AOTClassInitializer\n@@ -314,1 +313,1 @@\n-    \/\/ Also called from JVM when loading an AOT cache\n+    @AOTRuntimeSetup\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n-\n@@ -73,1 +71,0 @@\n-@AOTClassInitializer\n","filename":"src\/java.base\/share\/classes\/java\/util\/AbstractMap.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n+import jdk.internal.vm.annotation.AOTSafeClassInitializer;\n@@ -86,1 +86,1 @@\n-@AOTClassInitializer\n+@AOTSafeClassInitializer\n","filename":"src\/java.base\/share\/classes\/java\/util\/Collections.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n+import jdk.internal.vm.annotation.AOTRuntimeSetup;\n@@ -267,1 +267,0 @@\n-@AOTClassInitializer\n@@ -607,1 +606,1 @@\n-    \/\/ Called from JVM when loading an AOT cache.\n+    @AOTRuntimeSetup\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ConcurrentHashMap.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n+import jdk.internal.vm.annotation.AOTSafeClassInitializer;\n@@ -107,1 +107,1 @@\n-@AOTClassInitializer\n+@AOTSafeClassInitializer\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/Collectors.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n@@ -45,1 +44,0 @@\n-@AOTClassInitializer\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/constant\/ClassOrInterfaceDescImpl.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n+import jdk.internal.vm.annotation.AOTSafeClassInitializer;\n@@ -45,1 +45,1 @@\n-@AOTClassInitializer\n+@AOTSafeClassInitializer \/\/ initialization dependency of PrimitiveClassDescImpl\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/constant\/ConstantUtils.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n-\n@@ -48,1 +46,0 @@\n-@AOTClassInitializer\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/constant\/DirectMethodHandleDescImpl.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n@@ -54,1 +53,0 @@\n-@AOTClassInitializer\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/constant\/MethodTypeDescImpl.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n+import jdk.internal.vm.annotation.AOTSafeClassInitializer;\n@@ -42,1 +42,1 @@\n-@AOTClassInitializer\n+@AOTSafeClassInitializer \/\/ identity-sensitive static final fields\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/constant\/PrimitiveClassDescImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.internal.vm.annotation.AOTClassInitializer;\n+import jdk.internal.vm.annotation.AOTRuntimeSetup;\n@@ -56,1 +56,0 @@\n-@AOTClassInitializer\n@@ -64,1 +63,1 @@\n-    \/\/ Called from JVM when loading an AOT cache\n+    @AOTRuntimeSetup\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/Unsafe.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,55 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.vm.annotation;\n-\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-\n-\/\/\/ Indicates a class or interface that should have its static initializer\n-\/\/\/ (`<clinit>`) executed whenever it is referenced in an AOT cache, and may\n-\/\/\/ have custom runtime setup actions in a `private static void runtimeSetup()`\n-\/\/\/ method.  Note that classes with instances in the AOT cache are always\n-\/\/\/ initialized even without this annotation, but cannot define custom actions.\n-\/\/\/\n-\/\/\/ In AOT assembly run, an object graph from metaspace to heap objects is\n-\/\/\/ constructed.  When an object is in the heap, its class must be initialized.\n-\/\/\/ However, class initialization may have dependencies on other classes in the\n-\/\/\/ initializer that won't be initialized because they do not have live objects.\n-\/\/\/ For example, `MethodHandles.IMPL_NAMES` is copied to\n-\/\/\/ `DirectMethodHandle.IMPL_NAMES`, but there is no object relationship from\n-\/\/\/ DMH to MHs, therefore we need to mark MethodHandles as AOTCI so it is\n-\/\/\/ consistently initialized when it is ever referenced.\n-\/\/\/\n-\/\/\/ This annotation is only recognized on privileged code and is ignored\n-\/\/\/ elsewhere.\n-\/\/\/\n-\/\/\/ @since 26\n-@Retention(RetentionPolicy.RUNTIME)\n-@Target(ElementType.TYPE)\n-public @interface AOTClassInitializer {\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/annotation\/AOTClassInitializer.java","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.vm.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+\/\/\/ Indicates that if this class or interface is stored in the AOT cache in the\n+\/\/\/ \"initialized\" state, the `private static void runtimeSetup()` method will\n+\/\/\/ be executed instead of the static initializer in the production run.  In\n+\/\/\/ contrast, other \"initialized\" classes skip initialization methods altogether.\n+\/\/\/\n+\/\/\/ `classFileParser.cpp` performs checks on the annotated method - if the\n+\/\/\/ annotated method's signature differs from that described above, a\n+\/\/\/ [ClassFormatError] will be thrown.\n+\/\/\/\n+\/\/\/ This annotation is only recognized on privileged code and is ignored elsewhere.\n+\/\/\/\n+\/\/\/ @since 26\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.METHOD)\n+public @interface AOTRuntimeSetup {\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/annotation\/AOTRuntimeSetup.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.vm.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+\/\/\/ Indicates that the static initializer of this class or interface is\n+\/\/\/ considered \"safe\" for AOT assembly. I.e., if this class or interface\n+\/\/\/ has been initialized in the AOT assembly phase, then this class or interface\n+\/\/\/ can be safely stored in the AOT cache in the \"initialized\" state:\n+\/\/\/\n+\/\/\/ 1. During the production run, the static initializer of this class or\n+\/\/\/    interface will not be executed.\n+\/\/\/ 2. The values of the static fields of this class or interface will be the same\n+\/\/\/    as their values at the end of the assembly phase.\n+\/\/\/\n+\/\/\/ Currently, this annotation is used only for supporting AOT linking of\n+\/\/\/ java.lang.invoke primitives.\n+\/\/\/\n+\/\/\/ The AOT assembly phase performs the following:\n+\/\/\/\n+\/\/\/ 1. Load and link (but does not initialize) all classes that were loaded\n+\/\/\/    during the application's training run.\n+\/\/\/ 2. During linking of these classes, we resolve constant pool\n+\/\/\/    entries when it's safe and beneficial to do so.\n+\/\/\/\n+\/\/\/ An AOT-resolved constant pool entry for an invokedynamic or invokehandle bytecodes can\n+\/\/\/ have direct or indirect references to Java objects. To ensure the correctness\n+\/\/\/ of the AOT-resolved constant pool entrties, we store the classes of such Java objects\n+\/\/\/ in the AOT cache in the initialized state (as described above).\n+\/\/\/\n+\/\/\/ However, such Java objects may have references to static fields whose object identity\n+\/\/\/ is important. For example, `PrimitiveClassDescImpl::CD_void`. To ensure correctness,\n+\/\/\/ we must also store classes like `PrimitiveClassDescImpl` in the initialized state.\n+\/\/\/ We require the implementors of java.lang.invoke to manually annotate such classes with\n+\/\/\/ `@AOTSafeClassInitializer`. This should be done when:\n+\/\/\/\n+\/\/\/ 1. It's possible for an artifact used in the linking java.lang.invoke primitives\n+\/\/\/    (usually a MethodHandle) to directly or indirectly remember the value of a static\n+\/\/\/    field in this class.\n+\/\/\/ 2. You have validated that the static initializer of this class doesn't depend on\n+\/\/\/    transient states (i.e., names of temporary directories) that cannot be carried over\n+\/\/\/    to a future production run.\n+\/\/\/ 3. All supertypes of this class must also have the `@AOTSafeClassInitializer`\n+\/\/\/    annotation.\n+\/\/\/\n+\/\/\/ This annotation is only recognized on privileged code and is ignored elsewhere.\n+\/\/\/\n+\/\/\/ @since 26\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+public @interface AOTSafeClassInitializer {\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/annotation\/AOTSafeClassInitializer.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}