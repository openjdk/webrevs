{"files":[{"patch":"@@ -754,1 +754,5 @@\n-void java_lang_String::print(oop java_string, outputStream* st) {\n+\/\/ Print the given string to the given outputStream, limiting the output to\n+\/\/ at most max_length of the string's characters. If the length exceeds the\n+\/\/ limit we print an abridged version of the string with the \"middle\" elided\n+\/\/ and replaced by \" ... \". If max_length is odd it is treated as max_length-1.\n+void java_lang_String::print(oop java_string, outputStream* st, int max_length) {\n@@ -756,0 +760,3 @@\n+  \/\/ We need at least two characters to print A ... B\n+  assert(max_length > 1, \"invalid max_length: %d\", max_length);\n+\n@@ -768,0 +775,2 @@\n+  bool abridge = length > max_length;\n+\n@@ -770,0 +779,7 @@\n+    \/\/ If we need to abridge and we've printed half the allowed characters\n+    \/\/ then jump to the tail of the string.\n+    if (abridge && index >= max_length \/ 2) {\n+      st->print(\" ... (%d characters ommitted) ... \", length - 2 * (max_length \/ 2));\n+      index = length - (max_length \/ 2);\n+      abridge = false; \/\/ only do this once\n+    }\n@@ -779,0 +795,4 @@\n+\n+  if (length > max_length) {\n+    st->print(\" (abridged) \");\n+  }\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -197,1 +197,1 @@\n-  static void print(oop java_string, outputStream* st);\n+  static void print(oop java_string, outputStream* st, int max_length = MaxStringPrintSize);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -182,0 +182,8 @@\n+WB_ENTRY(jstring, WB_PrintString(JNIEnv* env, jobject wb, jstring str, jint max_length))\n+  ResourceMark rm(THREAD);\n+  stringStream sb;\n+  java_lang_String::print(JNIHandles::resolve(str), &sb, max_length);\n+  oop result = java_lang_String::create_oop_from_str(sb.as_string(), THREAD);\n+  return (jstring) JNIHandles::make_local(THREAD, result);\n+WB_END\n+\n@@ -2962,0 +2970,1 @@\n+  {CC\"printString\", CC\"(Ljava\/lang\/String;I)Ljava\/lang\/String;\", (void*)&WB_PrintString},\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1307,0 +1307,6 @@\n+  develop(int, MaxStringPrintSize, 256,                                     \\\n+          \"maximum number of characters to print for a java.lang.String \"   \\\n+          \"in the VM. If exceeded, an abridged version of the string is \"   \\\n+          \"printed with the middle of the string elided.\")                  \\\n+          range(2, O_BUFLEN)                                                \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8325945\n+ * @summary Test abridged VM String printing\n+ * @library \/test\/lib\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+WhiteBoxAPI StringPrinting\n+ *\/\n+\n+import jdk.test.whitebox.WhiteBox;\n+\n+public class StringPrinting {\n+\n+    private static final WhiteBox WB = WhiteBox.getWhiteBox();\n+\n+    static void checkEqual(String s1, String s2) {\n+        if (!s1.equals(s2)) {\n+            throw new RuntimeException(\"Different strings: \" + s1 + \" vs \" + s2);\n+        }\n+    }\n+\n+    static void checkEqual(int len1, int len2) {\n+        if (len1 != len2) {\n+            throw new RuntimeException(\"Different lengths: \" + len1 + \" vs \" + len2);\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        \/\/ Modified string format is \"xxx ... (N characters ommitted) ... xxx\" (abridged)\n+        final String elipse = \" ... \";\n+        final String text = \" characters ommitted)\";\n+        final String abridged = \"\\\" (abridged) \";\n+\n+        \/\/ Define a set of maxLengths for ease of inspection in the test outout\n+        \/\/ Note: maxLength must be >= 2\n+        int[] maxLengths = new int[] { 2, 3, 16, 256, 512 };\n+        for (int maxLength : maxLengths) {\n+            \/\/ Test string lengths around maxLength and \"much\" bigger\n+            \/\/ than maxLength\n+            int[] strLengths = new int[] { maxLength - 1,\n+                                           maxLength,\n+                                           maxLength + 1,\n+                                           2 * maxLength\n+            };\n+            for (int length : strLengths) {\n+                System.out.println(\"Testing string length \" + length + \" with maxLength \" + maxLength);\n+                String s = \"x\".repeat(length);\n+                String r = WB.printString(s, maxLength);\n+                if (length <= maxLength) {\n+                    \/\/ Strip off the double-quotes that surround the string\n+                    if (r.charAt(0) == '\\\"' && r.charAt(r.length() - 1) == '\\\"') {\n+                        r = r.substring(1, r.length() - 1);\n+                    } else {\n+                        throw new RuntimeException(\"String was not quoted as expected: \" + r);\n+                    }\n+                    checkEqual(s, r);\n+                } else {\n+                    \/\/ Strip off leading double-quote\n+                    if (r.charAt(0) == '\\\"') {\n+                        r = r.substring(1, r.length());\n+                    } else {\n+                        throw new RuntimeException(\"String was not quoted as expected: \" + r);\n+                    }\n+\n+                    \/\/ Strip off abridged\n+                    if (r.endsWith(abridged)) {\n+                        r = r.substring(0, r.length() - abridged.length());\n+                    } else {\n+                        throw new RuntimeException(\"String was not marked abridged as expected: \" + r);\n+                    }\n+\n+                    \/\/ Now extract the two \"halves\"\n+                    int elipseStart = r.indexOf(elipse);\n+                    String firstHalf = r.substring(0, elipseStart);\n+                    int secondElipseStart = r.lastIndexOf(elipse);\n+                    String secondHalf = r.substring(secondElipseStart + elipse.length(), r.length());\n+\n+                    System.out.println(\"S1: >\" + firstHalf + \"<\");\n+                    System.out.println(\"S2: >\" + secondHalf + \"<\");\n+\n+                    checkEqual(firstHalf.length(), maxLength \/ 2);\n+                    checkEqual(secondHalf.length(), maxLength \/2);\n+\n+                    \/\/ Now check number of characters ommitted\n+                    String tail = r.substring(r.indexOf(\"(\"), r.length());\n+                    int numberEnd = tail.indexOf(\" \");\n+                    String nChars = tail.substring(1, numberEnd);\n+                    System.out.println(\"N: >\" + nChars + \"<\");\n+\n+                    \/\/ Now add all the bits back together to get the expected full length\n+                    int fullLength = maxLength \/ 2 + elipse.length() + 1 \/* for ( *\/\n+                        + nChars.length() + text.length() + elipse.length() + maxLength \/ 2;\n+                    checkEqual(r.length(), fullLength);\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/PrintingTests\/StringPrinting.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -102,1 +102,5 @@\n-  \/\/ Make sure class name is in the correct format\n+\n+  \/\/ Returns the potentially abridged form of `str` as it would be\n+  \/\/ printed by the VM.\n+  public native String printString(String str, int maxLength);\n+\n@@ -104,0 +108,1 @@\n+    \/\/ Make sure class name is in the correct format\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}