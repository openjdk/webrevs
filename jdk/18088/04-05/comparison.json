{"files":[{"patch":"@@ -313,5 +313,1 @@\n-        if (env.info.ctorPrologue &&\n-            v.owner.kind == TYP &&\n-            (v.flags() & STATIC) == 0 &&\n-            types.isSubtype(env.enclClass.type, v.owner.type) &&\n-            (base == null || TreeInfo.isExplicitThisReference(types, (ClassType)env.enclClass.type, base))) {\n+        if (rs.isEarlyReference(env, base, v)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1511,1 +1511,1 @@\n-                    if (env1.info.ctorPrologue && !isAllowedInPrologue(env1, (VarSymbol)sym))\n+                    if (env1.info.ctorPrologue && !isAllowedEarlyReference(env1, (VarSymbol)sym))\n@@ -3769,0 +3769,1 @@\n+        Assert.check(name == names._this || name == names._super);\n@@ -3778,1 +3779,1 @@\n-                    else if (env1.info.ctorPrologue && sym.kind == VAR && !isAllowedInPrologue(env1, (VarSymbol)sym))\n+                    else if (env1.info.ctorPrologue && sym.kind == VAR && !isAllowedEarlyReference(env1, (VarSymbol)sym))\n@@ -3832,1 +3833,1 @@\n-     * Determine if an instance field may appear in a constructor prologue.\n+     * Determine if an early instance field reference may appear in a constructor prologue.\n@@ -3844,0 +3845,1 @@\n+     * We also don't verify that the field has no initializer, which is required.\n@@ -3846,1 +3848,1 @@\n-    private boolean isAllowedInPrologue(Env<AttrContext> env, VarSymbol v) {\n+    private boolean isAllowedEarlyReference(Env<AttrContext> env, VarSymbol v) {\n@@ -3864,6 +3866,2 @@\n-        \/\/ The symbol must not be an instance field inherited from a superclass\n-        if (v.owner.kind == TYP &&\n-                types.isSubtype(env.enclClass.type, v.owner.type) &&\n-                v.owner != env.enclClass.sym &&\n-                (base == null ||\n-                  TreeInfo.isExplicitThisReference(types, (ClassType)env.enclClass.type, base))) {\n+        \/\/ If an early reference, the field must not be declared in a superclass\n+        if (isEarlyReference(env, base, v) && v.owner != env.enclClass.sym)\n@@ -3871,1 +3869,0 @@\n-        }\n@@ -3877,0 +3874,23 @@\n+    \/**\n+     * Determine if the variable appearance constitutes an early reference to the current class.\n+     *\n+     * <p>\n+     * This means the variable is an instance field of the current class and it appears\n+     * in an early initialization context of it (i.e., one of its constructor prologues).\n+     *\n+     * <p>\n+     * Such a reference is only allowed for assignments to non-initialized fields that are\n+     * not inherited from a superclass, though that is not enforced by this method.\n+     *\n+     * @param env    The current environment\n+     * @param base   Variable qualifier, if any, otherwise null\n+     * @param v      The variable\n+     *\/\n+    public boolean isEarlyReference(Env<AttrContext> env, JCTree base, VarSymbol v) {\n+        return env.info.ctorPrologue &&\n+            (v.flags() & STATIC) == 0 &&\n+            v.owner.kind == TYP &&\n+            types.isSubtype(env.enclClass.type, v.owner.type) &&\n+            (base == null || TreeInfo.isExplicitThisReference(types, (ClassType)env.enclClass.type, base));\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":31,"deletions":11,"binary":false,"changes":42,"status":"modified"}]}