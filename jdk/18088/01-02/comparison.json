{"files":[{"patch":"@@ -312,1 +312,1 @@\n-        \/\/ Illegal to assign an instance field inherited from a superclass in a constructor prologue\n+        \/\/ Check instance field assignments that appear in constructor prologues\n@@ -314,7 +314,16 @@\n-                v.owner.kind == TYP &&\n-                types.isSubtype(env.enclClass.type, v.owner.type) &&\n-                v.owner != env.enclClass.sym &&\n-                (v.flags() & STATIC) == 0 &&\n-                (base == null ||\n-                  TreeInfo.isExplicitThisReference(types, (ClassType)env.enclClass.type, base))) {\n-            log.error(pos, Errors.CantRefBeforeCtorCalled(v));\n+            v.owner.kind == TYP &&\n+            (v.flags() & STATIC) == 0 &&\n+            types.isSubtype(env.enclClass.type, v.owner.type) &&\n+            (base == null || TreeInfo.isExplicitThisReference(types, (ClassType)env.enclClass.type, base))) {\n+\n+            \/\/ Field may not be inherited from a superclass\n+            if (v.owner != env.enclClass.sym) {\n+                log.error(pos, Errors.CantRefBeforeCtorCalled(v));\n+                return;\n+            }\n+\n+            \/\/ Field may not have an initializer\n+            if ((v.flags() & HASINIT) != 0) {\n+                log.error(pos, Errors.CantAssignInitializedBeforeCtorCalled(v));\n+                return;\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":17,"deletions":8,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -402,0 +402,4 @@\n+# 0: symbol or name\n+compiler.err.cant.assign.initialized.before.ctor.called=\\\n+    cannot assign initialized field ''{0}'' before supertype constructor has been called\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -143,0 +143,18 @@\n+\n+    public static class Inner6 {\n+        public int x = 1;\n+\n+        public Inner6() {\n+            x = 2;                              \/\/ FAIL - illegal early access\n+            super();\n+        }\n+    }\n+\n+    public static class Inner7 {\n+        public final int x = 1;\n+\n+        public Inner7() {\n+            x = 2;                              \/\/ FAIL - illegal early access\n+            super();\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignments.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -24,0 +24,2 @@\n+EarlyAssignments.java:148:13: compiler.err.cant.assign.initialized.before.ctor.called: x\n+EarlyAssignments.java:157:13: compiler.err.cant.assign.val.to.var: final, x\n@@ -26,1 +28,1 @@\n-23 errors\n+25 errors\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignments.out","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+ \/\/ key: compiler.note.preview.filename\n+ \/\/ key: compiler.note.preview.recompile\n+ \/\/ key: compiler.err.cant.assign.initialized.before.ctor.called\n+ \/\/ options: --enable-preview  -source ${jdk.version}\n+\n+class CantAssignInitializedBeforeCtorCalled {\n+    int x = 1;\n+    CantAssignInitializedBeforeCtorCalled() {\n+        x = 2;\n+        super();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CantAssignInitializedBeforeCtorCalled.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"}]}