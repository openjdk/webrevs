{"files":[{"patch":"@@ -37,0 +37,1 @@\n+import jdk.internal.loader.ClassLoaders;\n@@ -115,5 +116,3 @@\n-                        Class<?> c = Class\n-                            .forName(cn, true, ClassLoader.getSystemClassLoader());\n-                        Constructor<?> ctor = c\n-                            .getDeclaredConstructor(FileSystemProvider.class);\n-                        provider = (FileSystemProvider)ctor.newInstance(provider);\n+                        Class<?> c = Class.forName(cn, true, ClassLoaders.appClassLoader());\n+                        Constructor<?> ctor = c.getDeclaredConstructor(FileSystemProvider.class);\n+                        provider = (FileSystemProvider) ctor.newInstance(provider);\n@@ -149,7 +148,11 @@\n-     * is defined then it is taken to be a list of one or more fully-qualified\n-     * names of concrete provider classes identified by the URI scheme\n-     * {@code \"file\"}. Where the property is a list of more than one name then\n-     * the names are separated by a comma. Each class is loaded, using the system\n-     * class loader, and instantiated by invoking a one argument constructor\n-     * whose formal parameter type is {@code FileSystemProvider}. The providers\n-     * are loaded and instantiated in the order they are listed in the property.\n+     * is defined then it is taken to be a list of one or more fully-qualified names\n+     * of concrete provider classes identified by the URI scheme {@code \"file\"}.\n+     * If the property is a list of more than one name then the names are separated\n+     * by a comma character. Each provider class is a {@code public} class with a\n+     * {@code public} constructor that has one formal parameter of type {@code\n+     * FileSystemProvider}. If the provider class is in a named module then the module\n+     * exports the package containing the provider class to at least {@code java.base}.\n+     * Each provider class is loaded, using the\n+     * {@linkplain ClassLoader#getSystemClassLoader() default system class loader},\n+     * and instantiated by invoking the constructor. The providers are loaded and\n+     * instantiated in the order they are listed in the property.\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/FileSystems.java","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+\n+\/**\n+ * Use by tests in SetDefaultProvider to test startup with a custom default file system\n+ * provider and a custom system class loader.\n+ *\/\n+\n+public class CustomSystemClassLoader extends ClassLoader {\n+    public CustomSystemClassLoader(ClassLoader parent) {\n+        super(parent);\n+\n+        \/\/ use default file system\n+        FileSystem fs = FileSystems.getDefault();\n+        var path = fs.getPath(\"foo\");\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/nio\/file\/spi\/CustomSystemClassLoader.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 4313887 7006126 8142968 8178380 8183320 8210112 8266345 8263940 8331467\n+ * @bug 4313887 7006126 8142968 8178380 8183320 8210112 8266345 8263940 8331467 8346573\n@@ -29,1 +29,1 @@\n- * @build testfsp\/* testapp\/*\n+ * @build testfsp\/* testapp\/* CustomSystemClassLoader\n@@ -207,0 +207,13 @@\n+    \/**\n+     * Test file system provider on class path in conjunction with a custom system\n+     * class loader that uses the file system API during its initialization.\n+     *\/\n+    @Test\n+    void testCustomSystemClassLoader() throws Exception {\n+        String testClasses = System.getProperty(\"test.classes\");\n+        exec(SET_DEFAULT_FSP,\n+                \"-Djava.system.class.loader=CustomSystemClassLoader\",\n+                \"-cp\", ofClasspath(testClasses, TESTFSP_CLASSES, TESTAPP_CLASSES),\n+                TESTAPP_MAIN);\n+    }\n+\n","filename":"test\/jdk\/java\/nio\/file\/spi\/SetDefaultProvider.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"}]}