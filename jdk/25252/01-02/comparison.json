{"files":[{"patch":"@@ -914,1 +914,1 @@\n-    amo_base<funct5, width>(Rd, Rs1, Rs2->raw_encoding(), aqrl);\n+    amo_base<funct5, width>(Rd, Rs1, Rs2->raw_encoding(), memory_order);\n@@ -920,1 +920,1 @@\n-    amo_base<AMO_ADD, AMO_WIDTH_BYTE>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_ADD, AMO_WIDTH_BYTE>(Rd, Rs1, Rs2, memory_order);\n@@ -924,1 +924,1 @@\n-    amo_base<AMO_ADD, AMO_WIDTH_HALFWORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_ADD, AMO_WIDTH_HALFWORD>(Rd, Rs1, Rs2, memory_order);\n@@ -928,1 +928,1 @@\n-    amo_base<AMO_ADD, AMO_WIDTH_WORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_ADD, AMO_WIDTH_WORD>(Rd, Rs1, Rs2, memory_order);\n@@ -932,1 +932,1 @@\n-    amo_base<AMO_ADD, AMO_WIDTH_DOUBLEWORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_ADD, AMO_WIDTH_DOUBLEWORD>(Rd, Rs1, Rs2, memory_order);\n@@ -936,1 +936,1 @@\n-    amo_base<AMO_SWAP, AMO_WIDTH_BYTE>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_SWAP, AMO_WIDTH_BYTE>(Rd, Rs1, Rs2, memory_order);\n@@ -940,1 +940,1 @@\n-    amo_base<AMO_SWAP, AMO_WIDTH_HALFWORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_SWAP, AMO_WIDTH_HALFWORD>(Rd, Rs1, Rs2, memory_order);\n@@ -944,1 +944,1 @@\n-    amo_base<AMO_SWAP, AMO_WIDTH_WORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_SWAP, AMO_WIDTH_WORD>(Rd, Rs1, Rs2, memory_order);\n@@ -948,1 +948,1 @@\n-    amo_base<AMO_SWAP, AMO_WIDTH_DOUBLEWORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_SWAP, AMO_WIDTH_DOUBLEWORD>(Rd, Rs1, Rs2, memory_order);\n@@ -952,1 +952,1 @@\n-    amo_base<AMO_XOR, AMO_WIDTH_BYTE>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_XOR, AMO_WIDTH_BYTE>(Rd, Rs1, Rs2, memory_order);\n@@ -956,1 +956,1 @@\n-    amo_base<AMO_XOR, AMO_WIDTH_HALFWORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_XOR, AMO_WIDTH_HALFWORD>(Rd, Rs1, Rs2, memory_order);\n@@ -960,1 +960,1 @@\n-    amo_base<AMO_XOR, AMO_WIDTH_WORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_XOR, AMO_WIDTH_WORD>(Rd, Rs1, Rs2, memory_order);\n@@ -964,1 +964,1 @@\n-    amo_base<AMO_XOR, AMO_WIDTH_DOUBLEWORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_XOR, AMO_WIDTH_DOUBLEWORD>(Rd, Rs1, Rs2, memory_order);\n@@ -968,1 +968,1 @@\n-    amo_base<AMO_OR, AMO_WIDTH_BYTE>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_OR, AMO_WIDTH_BYTE>(Rd, Rs1, Rs2, memory_order);\n@@ -972,1 +972,1 @@\n-    amo_base<AMO_OR, AMO_WIDTH_HALFWORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_OR, AMO_WIDTH_HALFWORD>(Rd, Rs1, Rs2, memory_order);\n@@ -976,1 +976,1 @@\n-    amo_base<AMO_OR, AMO_WIDTH_WORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_OR, AMO_WIDTH_WORD>(Rd, Rs1, Rs2, memory_order);\n@@ -980,1 +980,1 @@\n-    amo_base<AMO_OR, AMO_WIDTH_DOUBLEWORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_OR, AMO_WIDTH_DOUBLEWORD>(Rd, Rs1, Rs2, memory_order);\n@@ -984,1 +984,1 @@\n-    amo_base<AMO_AND, AMO_WIDTH_BYTE>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_AND, AMO_WIDTH_BYTE>(Rd, Rs1, Rs2, memory_order);\n@@ -988,1 +988,1 @@\n-    amo_base<AMO_AND, AMO_WIDTH_HALFWORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_AND, AMO_WIDTH_HALFWORD>(Rd, Rs1, Rs2, memory_order);\n@@ -992,1 +992,1 @@\n-    amo_base<AMO_AND, AMO_WIDTH_WORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_AND, AMO_WIDTH_WORD>(Rd, Rs1, Rs2, memory_order);\n@@ -996,1 +996,1 @@\n-    amo_base<AMO_AND, AMO_WIDTH_DOUBLEWORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_AND, AMO_WIDTH_DOUBLEWORD>(Rd, Rs1, Rs2, memory_order);\n@@ -1000,1 +1000,1 @@\n-    amo_base<AMO_MIN, AMO_WIDTH_BYTE>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_MIN, AMO_WIDTH_BYTE>(Rd, Rs1, Rs2, memory_order);\n@@ -1004,1 +1004,1 @@\n-    amo_base<AMO_MIN, AMO_WIDTH_HALFWORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_MIN, AMO_WIDTH_HALFWORD>(Rd, Rs1, Rs2, memory_order);\n@@ -1008,1 +1008,1 @@\n-    amo_base<AMO_MIN, AMO_WIDTH_WORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_MIN, AMO_WIDTH_WORD>(Rd, Rs1, Rs2, memory_order);\n@@ -1012,1 +1012,1 @@\n-    amo_base<AMO_MIN, AMO_WIDTH_DOUBLEWORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_MIN, AMO_WIDTH_DOUBLEWORD>(Rd, Rs1, Rs2, memory_order);\n@@ -1016,1 +1016,1 @@\n-    amo_base<AMO_MINU, AMO_WIDTH_BYTE>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_MINU, AMO_WIDTH_BYTE>(Rd, Rs1, Rs2, memory_order);\n@@ -1020,1 +1020,1 @@\n-    amo_base<AMO_MINU, AMO_WIDTH_HALFWORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_MINU, AMO_WIDTH_HALFWORD>(Rd, Rs1, Rs2, memory_order);\n@@ -1024,1 +1024,1 @@\n-    amo_base<AMO_MINU, AMO_WIDTH_WORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_MINU, AMO_WIDTH_WORD>(Rd, Rs1, Rs2, memory_order);\n@@ -1028,1 +1028,1 @@\n-    amo_base<AMO_MINU, AMO_WIDTH_DOUBLEWORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_MINU, AMO_WIDTH_DOUBLEWORD>(Rd, Rs1, Rs2, memory_order);\n@@ -1032,1 +1032,1 @@\n-    amo_base<AMO_MAX, AMO_WIDTH_BYTE>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_MAX, AMO_WIDTH_BYTE>(Rd, Rs1, Rs2, memory_order);\n@@ -1036,1 +1036,1 @@\n-    amo_base<AMO_MAX, AMO_WIDTH_HALFWORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_MAX, AMO_WIDTH_HALFWORD>(Rd, Rs1, Rs2, memory_order);\n@@ -1040,1 +1040,1 @@\n-    amo_base<AMO_MAX, AMO_WIDTH_WORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_MAX, AMO_WIDTH_WORD>(Rd, Rs1, Rs2, memory_order);\n@@ -1044,1 +1044,1 @@\n-    amo_base<AMO_MAX, AMO_WIDTH_DOUBLEWORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_MAX, AMO_WIDTH_DOUBLEWORD>(Rd, Rs1, Rs2, memory_order);\n@@ -1048,1 +1048,1 @@\n-    amo_base<AMO_MAXU, AMO_WIDTH_BYTE>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_MAXU, AMO_WIDTH_BYTE>(Rd, Rs1, Rs2, memory_order);\n@@ -1052,1 +1052,1 @@\n-    amo_base<AMO_MAXU, AMO_WIDTH_HALFWORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_MAXU, AMO_WIDTH_HALFWORD>(Rd, Rs1, Rs2, memory_order);\n@@ -1056,1 +1056,1 @@\n-    amo_base<AMO_MAXU, AMO_WIDTH_WORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_MAXU, AMO_WIDTH_WORD>(Rd, Rs1, Rs2, memory_order);\n@@ -1060,1 +1060,1 @@\n-    amo_base<AMO_MAXU, AMO_WIDTH_DOUBLEWORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_MAXU, AMO_WIDTH_DOUBLEWORD>(Rd, Rs1, Rs2, memory_order);\n@@ -1065,2 +1065,2 @@\n-  void lr_w(Register Rd, Register Rs1, Aqrl memory_order = relaxed) {\n-    amo_base<AMO_LR, AMO_WIDTH_WORD>(Rd, Rs1, 0, aqrl);\n+  void lr_w(Register Rd, Register Rs1, Aqrl memory_order = aqrl) {\n+    amo_base<AMO_LR, AMO_WIDTH_WORD>(Rd, Rs1, 0, memory_order);\n@@ -1069,2 +1069,2 @@\n-  void lr_d(Register Rd, Register Rs1, Aqrl memory_order = relaxed) {\n-    amo_base<AMO_LR, AMO_WIDTH_DOUBLEWORD>(Rd, Rs1, 0, aqrl);\n+  void lr_d(Register Rd, Register Rs1, Aqrl memory_order = aqrl) {\n+    amo_base<AMO_LR, AMO_WIDTH_DOUBLEWORD>(Rd, Rs1, 0, memory_order);\n@@ -1073,2 +1073,2 @@\n-  void sc_w(Register Rd, Register Rs2, Register Rs1, Aqrl memory_order = relaxed) {\n-    amo_base<AMO_SC, AMO_WIDTH_WORD>(Rd, Rs1, Rs2, aqrl);\n+  void sc_w(Register Rd, Register Rs2, Register Rs1, Aqrl memory_order = aqrl) {\n+    amo_base<AMO_SC, AMO_WIDTH_WORD>(Rd, Rs1, Rs2, memory_order);\n@@ -1077,2 +1077,2 @@\n-  void sc_d(Register Rd, Register Rs2, Register Rs1, Aqrl memory_order = relaxed) {\n-    amo_base<AMO_SC, AMO_WIDTH_DOUBLEWORD>(Rd, Rs1, Rs2, aqrl);\n+  void sc_d(Register Rd, Register Rs2, Register Rs1, Aqrl memory_order = aqrl) {\n+    amo_base<AMO_SC, AMO_WIDTH_DOUBLEWORD>(Rd, Rs1, Rs2, memory_order);\n@@ -1082,1 +1082,1 @@\n-    amo_base<AMO_CAS, AMO_WIDTH_BYTE>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_CAS, AMO_WIDTH_BYTE>(Rd, Rs1, Rs2, memory_order);\n@@ -1086,1 +1086,1 @@\n-    amo_base<AMO_CAS, AMO_WIDTH_HALFWORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_CAS, AMO_WIDTH_HALFWORD>(Rd, Rs1, Rs2, memory_order);\n@@ -1090,1 +1090,1 @@\n-    amo_base<AMO_CAS, AMO_WIDTH_WORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_CAS, AMO_WIDTH_WORD>(Rd, Rs1, Rs2, memory_order);\n@@ -1094,1 +1094,1 @@\n-    amo_base<AMO_CAS, AMO_WIDTH_DOUBLEWORD>(Rd, Rs1, Rs2, aqrl);\n+    amo_base<AMO_CAS, AMO_WIDTH_DOUBLEWORD>(Rd, Rs1, Rs2, memory_order);\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":49,"deletions":49,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -3842,1 +3842,0 @@\n-  assert(!(UseZacas && UseZabha), \"Use amocas\");\n@@ -3874,0 +3873,1 @@\n+  assert(!(UseZacas && UseZabha), \"Use amocas\");\n@@ -3948,0 +3948,1 @@\n+  assert(!(UseZacas && UseZabha), \"Use amocas\");\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -5274,2 +5274,2 @@\n-                           Assembler::relaxed \/* acquire *\/, Assembler::rl \/* release *\/, $res$$Register,\n-                           true \/* result as bool *\/);\n+               Assembler::relaxed \/* acquire *\/, Assembler::rl \/* release *\/, $res$$Register,\n+               true \/* result as bool *\/);\n@@ -5692,1 +5692,1 @@\n-                            \/*acquire*\/ Assembler::relaxed, \/*release*\/ Assembler::rl, $res$$Register);\n+               \/*acquire*\/ Assembler::relaxed, \/*release*\/ Assembler::rl, $res$$Register);\n@@ -6050,1 +6050,1 @@\n-                                 \/*acquire*\/ Assembler::relaxed, \/*release*\/ Assembler::rl, $res$$Register);\n+                    \/*acquire*\/ Assembler::relaxed, \/*release*\/ Assembler::rl, $res$$Register);\n@@ -6176,1 +6176,1 @@\n-                                 \/*acquire*\/ Assembler::aq, \/*release*\/ Assembler::rl, $res$$Register);\n+                    \/*acquire*\/ Assembler::aq, \/*release*\/ Assembler::rl, $res$$Register);\n@@ -6224,1 +6224,1 @@\n-                                 \/*acquire*\/ Assembler::aq, \/*release*\/ Assembler::rl, $res$$Register);\n+                    \/*acquire*\/ Assembler::aq, \/*release*\/ Assembler::rl, $res$$Register);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}