{"files":[{"patch":"@@ -3475,1 +3475,1 @@\n-                            vReg tmp1, vReg tmp2, pRegGov pgtmp) %{\n+                            vReg tmp1, vReg tmp2) %{\n@@ -3478,2 +3478,2 @@\n-  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2, TEMP pgtmp);\n-  format %{ \"reduce_mulI_gt128b $dst, $isrc, $vsrc\\t# vector (> 128 bits). KILL $tmp1, $tmp2, $pgtmp\" %}\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"reduce_mulI_gt128b $dst, $isrc, $vsrc\\t# vector (> 128 bits). KILL $tmp1, $tmp2\" %}\n@@ -3484,0 +3484,1 @@\n+    assert(length_in_bytes == MaxVectorSize, \"invalid vector length\");\n@@ -3486,2 +3487,1 @@\n-                                  $tmp1$$FloatRegister, $tmp2$$FloatRegister,\n-                                  $pgtmp$$PRegister);\n+                                  $tmp1$$FloatRegister, $tmp2$$FloatRegister);\n@@ -3504,2 +3504,1 @@\n-instruct reduce_mulL_gt128b(iRegLNoSp dst, iRegL isrc, vReg vsrc, vReg tmp,\n-                            pRegGov pgtmp) %{\n+instruct reduce_mulL_gt128b(iRegLNoSp dst, iRegL isrc, vReg vsrc, vReg tmp) %{\n@@ -3508,2 +3507,2 @@\n-  effect(TEMP_DEF dst, TEMP tmp, TEMP pgtmp);\n-  format %{ \"reduce_mulL_gt128b $dst, $isrc, $vsrc\\t# vector (> 128 bits). KILL $tmp, $pgtmp\" %}\n+  effect(TEMP_DEF dst, TEMP tmp);\n+  format %{ \"reduce_mulL_gt128b $dst, $isrc, $vsrc\\t# vector (> 128 bits). KILL $tmp\" %}\n@@ -3513,0 +3512,1 @@\n+    assert(length_in_bytes == MaxVectorSize, \"invalid vector length\");\n@@ -3515,2 +3515,1 @@\n-                                  $tmp$$FloatRegister, fnoreg,\n-                                  $pgtmp$$PRegister);\n+                                  $tmp$$FloatRegister, fnoreg);\n@@ -3543,0 +3542,1 @@\n+    assert(length_in_bytes == MaxVectorSize, \"invalid vector length\");\n@@ -3549,2 +3549,1 @@\n-instruct reduce_non_strict_order_mulF_gt128b(vRegF dst, vRegF fsrc, vReg vsrc, vReg tmp1, vReg tmp2,\n-                                             pRegGov pgtmp) %{\n+instruct reduce_non_strict_order_mulF_gt128b(vRegF dst, vRegF fsrc, vReg vsrc, vReg tmp1, vReg tmp2) %{\n@@ -3553,2 +3552,2 @@\n-  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2, TEMP pgtmp);\n-  format %{ \"reduce_non_strict_order_mulF_gt128b $dst, $fsrc, $vsrc\\t# (> 128 bits). KILL $tmp1, $tmp2, $pgtmp\" %}\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"reduce_non_strict_order_mulF_gt128b $dst, $fsrc, $vsrc\\t# (> 128 bits). KILL $tmp1, $tmp2\" %}\n@@ -3558,0 +3557,1 @@\n+    assert(length_in_bytes == MaxVectorSize, \"invalid vector length\");\n@@ -3560,1 +3560,1 @@\n-                                             $tmp2$$FloatRegister, $pgtmp$$PRegister);\n+                                             $tmp2$$FloatRegister);\n@@ -3585,0 +3585,1 @@\n+    assert(length_in_bytes == MaxVectorSize, \"invalid vector length\");\n@@ -3591,2 +3592,1 @@\n-instruct reduce_non_strict_order_mulD_gt128b(vRegD dst, vRegD dsrc, vReg vsrc, vReg tmp1, vReg tmp2,\n-                                             pRegGov pgtmp) %{\n+instruct reduce_non_strict_order_mulD_gt128b(vRegD dst, vRegD dsrc, vReg vsrc, vReg tmp1, vReg tmp2) %{\n@@ -3595,2 +3595,2 @@\n-  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2, TEMP pgtmp);\n-  format %{ \"reduce_mulD_gt128b $dst, $dsrc, $vsrc\\t# (> 16 bits). KILL $tmp1, $tmp2, $pgtmp\" %}\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"reduce_mulD_gt128b $dst, $dsrc, $vsrc\\t# (> 16 bits). KILL $tmp1, $tmp2\" %}\n@@ -3600,0 +3600,1 @@\n+    assert(length_in_bytes == MaxVectorSize, \"invalid vector length\");\n@@ -3602,1 +3603,1 @@\n-                                             $tmp2$$FloatRegister, $pgtmp$$PRegister);\n+                                             $tmp2$$FloatRegister);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":22,"deletions":21,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2102,1 +2102,1 @@\n-                            vReg tmp1, vReg tmp2, pRegGov pgtmp) %{\n+                            vReg tmp1, vReg tmp2) %{\n@@ -2105,2 +2105,2 @@\n-  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2, TEMP pgtmp);\n-  format %{ \"reduce_mulI_gt128b $dst, $isrc, $vsrc\\t# vector (> 128 bits). KILL $tmp1, $tmp2, $pgtmp\" %}\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"reduce_mulI_gt128b $dst, $isrc, $vsrc\\t# vector (> 128 bits). KILL $tmp1, $tmp2\" %}\n@@ -2111,0 +2111,1 @@\n+    assert(length_in_bytes == MaxVectorSize, \"invalid vector length\");\n@@ -2113,2 +2114,1 @@\n-                                  $tmp1$$FloatRegister, $tmp2$$FloatRegister,\n-                                  $pgtmp$$PRegister);\n+                                  $tmp1$$FloatRegister, $tmp2$$FloatRegister);\n@@ -2131,2 +2131,1 @@\n-instruct reduce_mulL_gt128b(iRegLNoSp dst, iRegL isrc, vReg vsrc, vReg tmp,\n-                            pRegGov pgtmp) %{\n+instruct reduce_mulL_gt128b(iRegLNoSp dst, iRegL isrc, vReg vsrc, vReg tmp) %{\n@@ -2135,2 +2134,2 @@\n-  effect(TEMP_DEF dst, TEMP tmp, TEMP pgtmp);\n-  format %{ \"reduce_mulL_gt128b $dst, $isrc, $vsrc\\t# vector (> 128 bits). KILL $tmp, $pgtmp\" %}\n+  effect(TEMP_DEF dst, TEMP tmp);\n+  format %{ \"reduce_mulL_gt128b $dst, $isrc, $vsrc\\t# vector (> 128 bits). KILL $tmp\" %}\n@@ -2140,0 +2139,1 @@\n+    assert(length_in_bytes == MaxVectorSize, \"invalid vector length\");\n@@ -2142,2 +2142,1 @@\n-                                  $tmp$$FloatRegister, fnoreg,\n-                                  $pgtmp$$PRegister);\n+                                  $tmp$$FloatRegister, fnoreg);\n@@ -2170,0 +2169,1 @@\n+    assert(length_in_bytes == MaxVectorSize, \"invalid vector length\");\n@@ -2176,2 +2176,1 @@\n-instruct reduce_non_strict_order_mulF_gt128b(vRegF dst, vRegF fsrc, vReg vsrc, vReg tmp1, vReg tmp2,\n-                                             pRegGov pgtmp) %{\n+instruct reduce_non_strict_order_mulF_gt128b(vRegF dst, vRegF fsrc, vReg vsrc, vReg tmp1, vReg tmp2) %{\n@@ -2180,2 +2179,2 @@\n-  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2, TEMP pgtmp);\n-  format %{ \"reduce_non_strict_order_mulF_gt128b $dst, $fsrc, $vsrc\\t# (> 128 bits). KILL $tmp1, $tmp2, $pgtmp\" %}\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"reduce_non_strict_order_mulF_gt128b $dst, $fsrc, $vsrc\\t# (> 128 bits). KILL $tmp1, $tmp2\" %}\n@@ -2185,0 +2184,1 @@\n+    assert(length_in_bytes == MaxVectorSize, \"invalid vector length\");\n@@ -2187,1 +2187,1 @@\n-                                             $tmp2$$FloatRegister, $pgtmp$$PRegister);\n+                                             $tmp2$$FloatRegister);\n@@ -2212,0 +2212,1 @@\n+    assert(length_in_bytes == MaxVectorSize, \"invalid vector length\");\n@@ -2218,2 +2219,1 @@\n-instruct reduce_non_strict_order_mulD_gt128b(vRegD dst, vRegD dsrc, vReg vsrc, vReg tmp1, vReg tmp2,\n-                                             pRegGov pgtmp) %{\n+instruct reduce_non_strict_order_mulD_gt128b(vRegD dst, vRegD dsrc, vReg vsrc, vReg tmp1, vReg tmp2) %{\n@@ -2222,2 +2222,2 @@\n-  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2, TEMP pgtmp);\n-  format %{ \"reduce_mulD_gt128b $dst, $dsrc, $vsrc\\t# (> 16 bits). KILL $tmp1, $tmp2, $pgtmp\" %}\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"reduce_mulD_gt128b $dst, $dsrc, $vsrc\\t# (> 16 bits). KILL $tmp1, $tmp2\" %}\n@@ -2227,0 +2227,1 @@\n+    assert(length_in_bytes == MaxVectorSize, \"invalid vector length\");\n@@ -2229,1 +2230,1 @@\n-                                             $tmp2$$FloatRegister, $pgtmp$$PRegister);\n+                                             $tmp2$$FloatRegister);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":22,"deletions":21,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2084,2 +2084,1 @@\n-                                                   FloatRegister vtmp1, FloatRegister vtmp2,\n-                                                   PRegister pgtmp) {\n+                                                   FloatRegister vtmp1, FloatRegister vtmp2) {\n@@ -2087,1 +2086,0 @@\n-  assert(vector_length_in_bytes <= FloatRegister::sve_vl_max, \"unsupported vector length\");\n@@ -2094,1 +2092,0 @@\n-  sve_gen_mask_imm(pgtmp, bt, vector_length \/ 2);          \/\/ gen mask\n@@ -2097,1 +2094,1 @@\n-  sve_mul(vtmp1, elemType_to_regVariant(bt), pgtmp, vsrc); \/\/ multiply halves\n+  sve_mul(vtmp1, elemType_to_regVariant(bt), ptrue, vsrc); \/\/ multiply halves\n@@ -2104,1 +2101,1 @@\n-    sve_mul(vtmp1, elemType_to_regVariant(bt), pgtmp, vtmp2); \/\/ multiply halves\n+    sve_mul(vtmp1, elemType_to_regVariant(bt), ptrue, vtmp2); \/\/ multiply halves\n@@ -2152,1 +2149,0 @@\n-  assert(vector_length_in_bytes <= FloatRegister::sve_vl_max, \"unsupported vector length\");\n@@ -2193,1 +2189,1 @@\n-    unsigned vector_length_in_bytes, FloatRegister vtmp1, FloatRegister vtmp2, PRegister pgtmp) {\n+    unsigned vector_length_in_bytes, FloatRegister vtmp1, FloatRegister vtmp2) {\n@@ -2195,1 +2191,0 @@\n-  assert(vector_length_in_bytes <= FloatRegister::sve_vl_max, \"unsupported vector length\");\n@@ -2200,1 +2195,0 @@\n-  sve_gen_mask_imm(pgtmp, bt, vector_length \/ 2);           \/\/ gen mask\n@@ -2203,1 +2197,1 @@\n-  sve_fmul(vtmp1, elemType_to_regVariant(bt), pgtmp, vsrc); \/\/ multiply halves\n+  sve_fmul(vtmp1, elemType_to_regVariant(bt), ptrue, vsrc); \/\/ multiply halves\n@@ -2211,1 +2205,1 @@\n-    sve_fmul(vtmp1, elemType_to_regVariant(bt), pgtmp, vtmp2); \/\/ multiply halves\n+    sve_fmul(vtmp1, elemType_to_regVariant(bt), ptrue, vtmp2); \/\/ multiply halves\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-                                  FloatRegister vtmp2, PRegister pgtmp1);\n+                                  FloatRegister vtmp2);\n@@ -144,2 +144,1 @@\n-                                             FloatRegister vtmp1, FloatRegister vtmp2,\n-                                             PRegister pgtmp);\n+                                             FloatRegister vtmp1, FloatRegister vtmp2);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}