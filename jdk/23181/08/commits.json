[{"commit":{"message":"Address review comments and simplify the implementation\n\n- remove the loops from gt128b methods making them 256b only\n- fixup: missed fnoregs in instruct reduce_mulL_256b\n- use an extra vtmp3 reg for the 256b integer method\n- remove a no longer needed change in reduce_mul_integral_le128b\n- cleanup: unify comments"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestVectorFPReduction.java"}],"sha":"5b06b6383cde2d72a8547f023cbf598c3cbfb46b"},{"commit":{"message":"Merge commit '8193856af8546332bfa180cb45154a4093b4fd2c'"},"files":[{"filename":"src\/hotspot\/share\/opto\/loopopts.cpp"}],"sha":"1d2b98183da7aa2cd0b38c6461de32f3c0745a83"},{"commit":{"message":"remove the strictly-ordered FP implementation as unused"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"}],"sha":"4593a5d717024df01769625993c2b769d8dde311"},{"commit":{"message":"Compare VL against MaxVectorSize instead of FloatRegister::sve_vl_max"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"}],"sha":"d35f108943ff548fd94c63a8e70b52f65ea366d0"},{"commit":{"message":"Use a dedicated ptrue predicate register\n\nThis shifts MulReduction performance on Neoverse V1 a bit. Here Before\nif before this specific commit (ebad6dd37e332da44222c50cd17c69f3ff3f0635)\nand After is this commit.\n\n| Benchmark                | Before (ops\/ms) | After (ops\/ms) | Diff (%) |\n| ------------------------ | --------------- | -------------- | -------- |\n| ByteMaxVector.MULLanes   | 9883.151        | 9093.557       | -7.99%   |\n| DoubleMaxVector.MULLanes | 2712.674        | 2607.367       | -3.89%   |\n| FloatMaxVector.MULLanes  | 3388.811        | 3291.429       | -2.88%   |\n| IntMaxVector.MULLanes    | 4765.554        | 5031.741       | +5.58%   |\n| LongMaxVector.MULLanes   | 2685.228        | 2896.445       | +7.88%   |\n| ShortMaxVector.MULLanes  | 5128.185        | 5197.656       | +1.35%   |"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"}],"sha":"609f78e22c1b300b7c32a1b806d51b7e3900d800"},{"commit":{"message":"cleanup: update a copyright notice\n\nCo-authored-by: Hao Sun <haosun@nvidia.com>"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestVectorFPReduction.java"}],"sha":"ebad6dd37e332da44222c50cd17c69f3ff3f0635"},{"commit":{"message":"fixup: remove undefined insts from aarch64-asmtest.py"},"files":[{"filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"}],"sha":"df09ab65f75c7b6f99e0088b3871d7df7a8c4d1b"},{"commit":{"message":"cleanup: address nits, rename several symbols"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"}],"sha":"025d5166ae5d1a73457b3d8324f35e4da48400a1"},{"commit":{"message":"cleanup: remove unreferenced definitions"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"}],"sha":"68bbbe247a26d116c7fb72ee1b34aa0204a5fc8d"},{"commit":{"message":"Address review comments.\n\n- fixup: disable FP mul reduction auto-vectorization for all targets\n- fixup: add a tmp vReg to reduce_mul_integral_gt128b and\n  reduce_non_strict_order_mul_fp_gt128bto keep vsrc unmodified\n- cleanup: replace a complex lambda in the above methods with a loop\n- cleanup: rename symbols to follow the existing naming convention\n- cleanup: add asserts to SVE only instructions\n- split mul FP reduction instructions into strictly-ordered (default)\n  and explicitly non strictly-ordered\n- remove redundant conditions in TestVectorFPReduction.java\n\nBenchmarks results:\n\nNeoverse-V1 (SVE 256-bit)\n\n| Benchmark                 | Before   | After    | Units  | Diff  |\n|---------------------------|----------|----------|--------|-------|\n| ByteMaxVector.MULLanes    | 619.156  | 9884.578 | ops\/ms | 1496% |\n| DoubleMaxVector.MULLanes  | 184.693  | 2712.051 | ops\/ms | 1368% |\n| FloatMaxVector.MULLanes   | 277.818  | 3388.038 | ops\/ms | 1119% |\n| IntMaxVector.MULLanes     | 371.225  | 4765.434 | ops\/ms | 1183% |\n| LongMaxVector.MULLanes    | 205.149  | 2672.975 | ops\/ms | 1203% |\n| ShortMaxVector.MULLanes   | 472.804  | 5122.917 | ops\/ms |  984% |"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopopts.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestVectorFPReduction.java"}],"sha":"9b4243ae053351ca4123c8c2c57686a7427dedd3"},{"commit":{"message":"Merge branch 'master' into 8343689-rebase"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopopts.cpp"},{"filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"}],"sha":"8c90035923d55e88b51dfc3cad9afbbc907c1196"},{"commit":{"message":"fixup: don't modify the value in vsrc\n\nFix reduce_mul_integral_gt128b() so it doesn't modify vsrc. With this\nchange, the result of recursive folding is held in vtmp1. To be able to\npass this intermediate result to reduce_mul_integral_le128b(), we would\nhave to use another temporary FloatRegister, as vtmp1 would essentially\nact as vsrc. It's possible to get around this however:\nreduce_mul_integral_le128b() is modified so it's possible to pass\nmatching vsrc and vtmp2 arguments. By doing this, we save ourselves a\ntemporary register in rules that match to reduce_mul_integral_gt128b()."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"}],"sha":"3fc989bd91394aef2cffc84497c31c9ac0c33beb"},{"commit":{"message":"cleanup: revert an unnecessary change to reduce_mul_fp_le128b() formating"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"}],"sha":"ff3a7aad6cf34105d8ee81076f65cb4a6e0caa81"},{"commit":{"message":"Use EXT instead of COMPACT to split a vector into two halves\n\nBenchmarks results:\n\nNeoverse-V1 (SVE 256-bit)\n\n  Benchmark                 (size)   Mode   master         PR  Units\n  ByteMaxVector.MULLanes      1024  thrpt 5447.643  11455.535 ops\/ms\n  ShortMaxVector.MULLanes     1024  thrpt 3388.183   7144.301 ops\/ms\n  IntMaxVector.MULLanes       1024  thrpt 3010.974   4911.485 ops\/ms\n  LongMaxVector.MULLanes      1024  thrpt 1539.137   2562.835 ops\/ms\n  FloatMaxVector.MULLanes     1024  thrpt 1355.551   4158.128 ops\/ms\n  DoubleMaxVector.MULLanes    1024  thrpt 1715.854   3284.189 ops\/ms\n\nFujitsu A64FX (SVE 512-bit)\n\n  Benchmark                 (size)   Mode   master         PR  Units\n  ByteMaxVector.MULLanes      1024  thrpt 1091.692   2887.798 ops\/ms\n  ShortMaxVector.MULLanes     1024  thrpt  597.008   1863.338 ops\/ms\n  IntMaxVector.MULLanes       1024  thrpt  510.642   1348.651 ops\/ms\n  LongMaxVector.MULLanes      1024  thrpt  468.878    878.620 ops\/ms\n  FloatMaxVector.MULLanes     1024  thrpt  376.284   2237.564 ops\/ms\n  DoubleMaxVector.MULLanes    1024  thrpt  431.343   1646.792 ops\/ms"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"}],"sha":"c9dcc45f7f362f5af87f013715f0b55777472c78"},{"commit":{"message":"8343689: AArch64: Optimize MulReduction implementation\n\nAdd a reduce_mul intrinsic SVE specialization for >= 256-bit long\nvectors. It multiplies halves of the source vector using SVE\ninstructions to get to a 128-bit long vector that fits into a SIMD&FP\nregister. After that point, existing ASIMD implementation is used.\n\nBenchmarks results for an AArch64 CPU with support for SVE with 256-bit\nvector length:\n\n  Benchmark                 (size)   Mode      Old        New  Units\n  Byte256Vector.MULLanes      1024  thrpt  502.498  10222.717 ops\/ms\n  Double256Vector.MULLanes    1024  thrpt  172.116   3130.997 ops\/ms\n  Float256Vector.MULLanes     1024  thrpt  291.612   4164.138 ops\/ms\n  Int256Vector.MULLanes       1024  thrpt  362.276   3717.213 ops\/ms\n  Long256Vector.MULLanes      1024  thrpt  184.826   2054.345 ops\/ms\n  Short256Vector.MULLanes     1024  thrpt  379.231   5716.223 ops\/ms\n\nBenchmarks results for an AArch64 CPU with support for SVE with 512-bit\nvector length:\n\n  Benchmark                 (size)   Mode      Old       New   Units\n  Byte512Vector.MULLanes      1024  thrpt  160.129  2630.600  ops\/ms\n  Double512Vector.MULLanes    1024  thrpt   51.229  1033.284  ops\/ms\n  Float512Vector.MULLanes     1024  thrpt   84.617  1658.400  ops\/ms\n  Int512Vector.MULLanes       1024  thrpt  109.419  1180.310  ops\/ms\n  Long512Vector.MULLanes      1024  thrpt   69.036   704.144  ops\/ms\n  Short512Vector.MULLanes     1024  thrpt  131.029  1629.632  ops\/ms"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"}],"sha":"0a62dc33978662fe9767eafefe732329f3002073"}]