[{"commit":{"message":"fixup: don't modify the value in vsrc\n\nFix reduce_mul_integral_gt128b() so it doesn't modify vsrc. With this\nchange, the result of recursive folding is held in vtmp1. To be able to\npass this intermediate result to reduce_mul_integral_le128b(), we would\nhave to use another temporary FloatRegister, as vtmp1 would essentially\nact as vsrc. It's possible to get around this however:\nreduce_mul_integral_le128b() is modified so it's possible to pass\nmatching vsrc and vtmp2 arguments. By doing this, we save ourselves a\ntemporary register in rules that match to reduce_mul_integral_gt128b()."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"}],"sha":"3fc989bd91394aef2cffc84497c31c9ac0c33beb"},{"commit":{"message":"cleanup: revert an unnecessary change to reduce_mul_fp_le128b() formating"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"}],"sha":"ff3a7aad6cf34105d8ee81076f65cb4a6e0caa81"},{"commit":{"message":"Use EXT instead of COMPACT to split a vector into two halves\n\nBenchmarks results:\n\nNeoverse-V1 (SVE 256-bit)\n\n  Benchmark                 (size)   Mode   master         PR  Units\n  ByteMaxVector.MULLanes      1024  thrpt 5447.643  11455.535 ops\/ms\n  ShortMaxVector.MULLanes     1024  thrpt 3388.183   7144.301 ops\/ms\n  IntMaxVector.MULLanes       1024  thrpt 3010.974   4911.485 ops\/ms\n  LongMaxVector.MULLanes      1024  thrpt 1539.137   2562.835 ops\/ms\n  FloatMaxVector.MULLanes     1024  thrpt 1355.551   4158.128 ops\/ms\n  DoubleMaxVector.MULLanes    1024  thrpt 1715.854   3284.189 ops\/ms\n\nFujitsu A64FX (SVE 512-bit)\n\n  Benchmark                 (size)   Mode   master         PR  Units\n  ByteMaxVector.MULLanes      1024  thrpt 1091.692   2887.798 ops\/ms\n  ShortMaxVector.MULLanes     1024  thrpt  597.008   1863.338 ops\/ms\n  IntMaxVector.MULLanes       1024  thrpt  510.642   1348.651 ops\/ms\n  LongMaxVector.MULLanes      1024  thrpt  468.878    878.620 ops\/ms\n  FloatMaxVector.MULLanes     1024  thrpt  376.284   2237.564 ops\/ms\n  DoubleMaxVector.MULLanes    1024  thrpt  431.343   1646.792 ops\/ms"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"}],"sha":"c9dcc45f7f362f5af87f013715f0b55777472c78"},{"commit":{"message":"8343689: AArch64: Optimize MulReduction implementation\n\nAdd a reduce_mul intrinsic SVE specialization for >= 256-bit long\nvectors. It multiplies halves of the source vector using SVE\ninstructions to get to a 128-bit long vector that fits into a SIMD&FP\nregister. After that point, existing ASIMD implementation is used.\n\nBenchmarks results for an AArch64 CPU with support for SVE with 256-bit\nvector length:\n\n  Benchmark                 (size)   Mode      Old        New  Units\n  Byte256Vector.MULLanes      1024  thrpt  502.498  10222.717 ops\/ms\n  Double256Vector.MULLanes    1024  thrpt  172.116   3130.997 ops\/ms\n  Float256Vector.MULLanes     1024  thrpt  291.612   4164.138 ops\/ms\n  Int256Vector.MULLanes       1024  thrpt  362.276   3717.213 ops\/ms\n  Long256Vector.MULLanes      1024  thrpt  184.826   2054.345 ops\/ms\n  Short256Vector.MULLanes     1024  thrpt  379.231   5716.223 ops\/ms\n\nBenchmarks results for an AArch64 CPU with support for SVE with 512-bit\nvector length:\n\n  Benchmark                 (size)   Mode      Old       New   Units\n  Byte512Vector.MULLanes      1024  thrpt  160.129  2630.600  ops\/ms\n  Double512Vector.MULLanes    1024  thrpt   51.229  1033.284  ops\/ms\n  Float512Vector.MULLanes     1024  thrpt   84.617  1658.400  ops\/ms\n  Int512Vector.MULLanes       1024  thrpt  109.419  1180.310  ops\/ms\n  Long512Vector.MULLanes      1024  thrpt   69.036   704.144  ops\/ms\n  Short512Vector.MULLanes     1024  thrpt  131.029  1629.632  ops\/ms"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"}],"sha":"0a62dc33978662fe9767eafefe732329f3002073"}]