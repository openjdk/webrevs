{"files":[{"patch":"@@ -27,0 +27,2 @@\n+import java.util.Set;\n+\n@@ -32,1 +34,1 @@\n-        \/\/ Used by EventWriter\n+        \/\/ Used by EventWriter, directly or indirectly.\n@@ -34,1 +36,3 @@\n-        \"jdk\/internal\/misc\/Unsafe;\",\n+        \"jdk\/internal\/misc\/Unsafe\",\n+        \"java\/lang\/StringLatin1\",\n+        \"java\/lang\/StringUTF16\"\n@@ -41,1 +45,2 @@\n-        \"jdk\/internal\/\", \/\/ jdk\/internal\/classfile, jdk\/internal\/loader and jdk\/internal\/foreign\n+        \/\/ Also to avoid recursion with EventWriter::putString\n+        \"jdk\/internal\/\", \/\/ jdk\/internal\/classfile, \/\/ jdk\/internal\/vm, jdk\/internal\/util, jdk\/internal\/loader and jdk\/internal\/foreign\n@@ -45,1 +50,1 @@\n-    private static final String[] EXCLUDED_METHODS = {\n+    private static final Set<String> EXCLUDED_METHODS = Set.of(\n@@ -49,2 +54,10 @@\n-        \"java.lang.Number::<init>\"\n-    };\n+        \"java.lang.Number::<init>\",\n+        \/\/ Used by EventWriter::putString, directly or indirectly.\n+        \"java.lang.String::charAt\",\n+        \"java.lang.String::length\",\n+        \"java.lang.String::coder\", \/\/ Used by charAt(int)\n+        \"java.lang.String::checkIndex\", \/\/ Used by charAt(int)\n+        \"java.lang.String::isLatin1\", \/\/ Used by charAt()\n+        \"java.lang.String::equals\", \/\/ Used by StringPool\n+        \"java.lang.String::hashCode\" \/\/ Used by StringPool\n+    );\n@@ -53,6 +66,1 @@\n-        for (String method : EXCLUDED_METHODS) {\n-            if (method.equals(methodName)) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        return EXCLUDED_METHODS.contains(methodName);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tracing\/ExcludeList.java","additions":20,"deletions":12,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+package jdk.jfr.event.tracing;\n+\n+import java.nio.file.Path;\n+\n+import jdk.jfr.Configuration;\n+import jdk.jfr.Name;\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.jfr.consumer.RecordingFile;\n+\n+\/**\n+ * @test\n+ * @summary Tests that java.lang.String can be traced.\n+ * @requires vm.flagless\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @run main\/othervm jdk.jfr.event.tracing.TestTracedString\n+ **\/\n+public class TestTracedString {\n+    private static long SEED = System.currentTimeMillis();\n+\n+    @Name(\"Message\")\n+    static class MessageEvent extends jdk.jfr.Event {\n+        String message;\n+        long checkSum;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Configuration c = Configuration.getConfiguration(\"default\");\n+        Path file = Path.of(\"recording.jfr\");\n+        try (Recording r = new Recording(c)) {\n+            r.enable(\"jdk.MethodTrace\").with(\"filter\", \"java.lang.String\");\n+            r.start();\n+            emit(100, \"\");\n+            emit(100, \"short\");\n+            emit(100, \"medium medium medium medium medium medium 1\");\n+            emit(100, \"medium medium medium medium medium medium 2\");\n+            emit(100, \"long\".repeat(100));\n+            r.stop();\n+            r.dump(file);\n+            int count = 0;\n+            for (RecordedEvent e : RecordingFile.readAllEvents(file)) {\n+                if (e.getEventType().getName().equals(\"Message\")) {\n+                    String text = e.getString(\"message\");\n+                    long checkSum = e.getLong(\"checkSum\");\n+                    if (checkSum(text) != checkSum) {\n+                        throw new Exception(\"Incorrect checksum for text \" + text);\n+                    }\n+                    count++;\n+                }\n+            }\n+            if (count != 500) {\n+                throw new Exception(\"Expected 500 Message events. Got \" + count);\n+            }\n+        }\n+    }\n+\n+    private static void emit(int count, String text) {\n+        long checkSum = checkSum(text);\n+        for (int i = 0; i < count; i++) {\n+            MessageEvent m = new MessageEvent();\n+            m.message = text;\n+            m.checkSum = checkSum;\n+            m.commit();\n+        }\n+    }\n+\n+    private static long checkSum(String text) {\n+        long checkSum = SEED;\n+        for (int i = 0; i < text.length(); i++) {\n+            checkSum += 17 * text.charAt(i);\n+        }\n+        return checkSum;\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/tracing\/TestTracedString.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}