{"files":[{"patch":"@@ -45,0 +45,2 @@\n+    \/\/ Return a new byte array for a UTF16-coded string for len chars\n+    \/\/ Throw an exception if out of range\n@@ -46,8 +48,1 @@\n-        if (len < 0) {\n-            throw new NegativeArraySizeException();\n-        }\n-        if (len > MAX_LENGTH) {\n-            throw new OutOfMemoryError(\"UTF16 String size is \" + len +\n-                                       \", should be less than \" + MAX_LENGTH);\n-        }\n-        return new byte[len << 1];\n+        return new byte[newBytesLength(len)];\n@@ -62,1 +57,1 @@\n-        if (len > MAX_LENGTH) {\n+        if (len >= MAX_LENGTH) {\n@@ -64,1 +59,1 @@\n-                                       \", should be less than \" + MAX_LENGTH);\n+                                       \", should be less than or equal to \" + MAX_LENGTH);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.Arguments;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+\n+\/*\n+ * @test\n+ * @bug 8077559 8321180\n+ * @summary Tests Compact String for maximum size strings\n+ * @requires os.maxMemory >= 7g & vm.bits == 64\n+ * @run junit\/othervm -XX:+CompactStrings -Xmx7g MaxSizeUTF16String\n+ * @run junit\/othervm -XX:-CompactStrings -Xmx7g MaxSizeUTF16String\n+ *\/\n+\n+public class MaxSizeUTF16String {\n+\n+    private final static int MAX_UTF16_STRING_LENGTH = Integer.MAX_VALUE \/ 2;\n+\n+    private final static String EXPECTED_OOME_MESSAGE = \"UTF16 String size is\";\n+\n+    \/\/ Create a large UTF-8 byte array with a single non-latin1 character\n+    private static byte[] generateUTF8Data(int byteSize) {\n+        byte[] nonAscii = \"\\u0100\".getBytes();\n+        int nonAsciiSize = nonAscii.length;\n+        int asciisize = byteSize - nonAsciiSize;\n+        byte[] arr = new byte[asciisize + nonAsciiSize];\n+        Arrays.fill(arr, (byte)'x');      \/\/ fill with latin1\n+        System.arraycopy(nonAscii, 0, arr, 0, nonAsciiSize); \/\/ non-latin1 at start\n+        return arr;\n+    }\n+\n+    \/\/ Create a large char array with a single non-latin1 character\n+    private static char[] generateCharData(int size) {\n+        char[] nonAscii = \"\\u0100\".toCharArray();\n+        int nonAsciiSize = nonAscii.length;\n+        int asciisize = size - nonAsciiSize;\n+        char[] arr = new char[asciisize + nonAsciiSize];\n+        Arrays.fill(arr, 'x');      \/\/ fill with latin1\n+        System.arraycopy(nonAscii, 0, arr, 0, nonAsciiSize); \/\/ non-latin1 at start\n+        return arr;\n+    }\n+\n+    @Test\n+    public void testMaxUTF8() {\n+        \/\/ Overly large UTF-8 data with 1 non-latin1 char\n+        final byte[] large_utf8_bytes = generateUTF8Data(MAX_UTF16_STRING_LENGTH + 1);\n+        int[] sizes = new int[] {\n+                MAX_UTF16_STRING_LENGTH + 1,\n+                MAX_UTF16_STRING_LENGTH,\n+                MAX_UTF16_STRING_LENGTH - 1};\n+        for (int size : sizes) {\n+            System.err.println(\"Checking max UTF16 string len: \" + size);\n+            try {\n+                \/\/ Use only part of the UTF-8 byte array\n+                new String(large_utf8_bytes, 0, size, StandardCharsets.UTF_8);\n+                if (size >= MAX_UTF16_STRING_LENGTH) {\n+                    fail(\"Expected OutOfMemoryError with message prefix: \" + EXPECTED_OOME_MESSAGE);\n+                }\n+            } catch (OutOfMemoryError ex) {\n+                if (!ex.getMessage().startsWith(EXPECTED_OOME_MESSAGE)) {\n+                    fail(\"Failed: Not the OutOfMemoryError expected\", ex);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testMaxCharArray() {\n+        \/\/ Overly large UTF-8 data with 1 non-latin1 char\n+        final char[] large_char_array = generateCharData(MAX_UTF16_STRING_LENGTH + 1);\n+        int[] sizes = new int[]{\n+                MAX_UTF16_STRING_LENGTH + 1,\n+                MAX_UTF16_STRING_LENGTH,\n+                MAX_UTF16_STRING_LENGTH - 1};\n+        for (int size : sizes) {\n+            System.err.println(\"Checking max UTF16 string len: \" + size);\n+            try {\n+                \/\/ Large char array with 1 non-latin1 char\n+                new String(large_char_array, 0, size);\n+                if (size >= MAX_UTF16_STRING_LENGTH) {\n+                    fail(\"Expected OutOfMemoryError with message prefix: \" + EXPECTED_OOME_MESSAGE);\n+                }\n+            } catch (OutOfMemoryError ex) {\n+                if (!ex.getMessage().startsWith(EXPECTED_OOME_MESSAGE)) {\n+                    throw new RuntimeException(\"Wrong exception message: \" + ex.getMessage(), ex);\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/String\/CompactString\/MaxSizeUTF16String.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"}]}