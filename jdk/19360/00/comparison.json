{"files":[{"patch":"@@ -61,11 +61,0 @@\n-  \/\/ Convert sizes from bits to HeapWords and back.  An object that is n bits\n-  \/\/ long will be bits_to_words(n) words long.  An object that is m words long\n-  \/\/ will take up words_to_bits(m) bits in the bitmap.\n-  inline static size_t bits_to_words(idx_t bits);\n-  inline static idx_t  words_to_bits(size_t words);\n-\n-  inline HeapWord* region_start() const;\n-  inline HeapWord* region_end() const;\n-  inline size_t    region_size() const;\n-  inline size_t    size() const;\n-\n@@ -78,3 +67,0 @@\n-  \/\/ Return word-aligned up range_end, which must not be greater than size().\n-  inline idx_t align_range_end(idx_t range_end) const;\n-\n@@ -95,5 +81,0 @@\n-  \/\/ Return the number of bits required to represent the specified number of\n-  \/\/ HeapWords, or the specified region.\n-  static inline idx_t bits_required(size_t words);\n-  static inline idx_t bits_required(MemRegion covered_region);\n-\n@@ -124,0 +105,19 @@\n+\n+  \/\/ Return the number of bits required to represent the specified number of\n+  \/\/ HeapWords, or the specified region.\n+  static inline idx_t bits_required(size_t words);\n+  static inline idx_t bits_required(MemRegion covered_region);\n+\n+  \/\/ Convert sizes from bits to HeapWords and back.  An object that is n bits\n+  \/\/ long will be bits_to_words(n) words long.  An object that is m words long\n+  \/\/ will take up words_to_bits(m) bits in the bitmap.\n+  inline static size_t bits_to_words(idx_t bits);\n+  inline static idx_t  words_to_bits(size_t words);\n+\n+  \/\/ Return word-aligned up range_end, which must not be greater than size().\n+  inline idx_t align_range_end(idx_t range_end) const;\n+\n+  inline HeapWord* region_start() const;\n+  inline HeapWord* region_end() const;\n+  inline size_t    region_size() const;\n+  inline size_t    size() const;\n","filename":"src\/hotspot\/share\/gc\/parallel\/parMarkBitMap.hpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"}]}