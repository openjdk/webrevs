{"files":[{"patch":"@@ -0,0 +1,161 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4133768 4363569\n+ * @summary Tests how button displays its icons\n+ * @key headful\n+ * @run main bug4133768\n+ *\/\n+\n+import javax.swing.AbstractButton;\n+import javax.swing.Icon;\n+import javax.swing.ImageIcon;\n+import javax.swing.JCheckBox;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JRadioButton;\n+import javax.swing.JToggleButton;\n+import javax.swing.SwingUtilities;\n+import java.awt.Color;\n+import java.awt.Graphics2D;\n+import java.awt.GridLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.image.BufferedImage;\n+import java.io.IOException;\n+\n+public class bug4133768 {\n+    private static Icon RED, GREEN;\n+    private static JFrame f;\n+    private static AbstractButton[] buttons;\n+    private static Point buttonLocation;\n+    private static int buttonWidth, buttonHeight;\n+    private static Robot robot;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            createTestImages();\n+            createUI();\n+            robot = new Robot();\n+            robot.delay(1000);\n+            for (AbstractButton b : buttons) {\n+                testEnabledButton(b);\n+            }\n+            for (AbstractButton b : buttons) {\n+                b.setEnabled(false);\n+                robot.delay(1000);\n+                testDisabledButton(b);\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createTestImages() throws IOException {\n+        int imageWidth = 32;\n+        int imageHeight = 32;\n+        BufferedImage redImg = new BufferedImage(imageWidth, imageHeight,\n+            BufferedImage.TYPE_INT_RGB);\n+        Graphics2D g = redImg.createGraphics();\n+        g.setColor(Color.RED);\n+        g.fillRect(0, 0, imageWidth, imageHeight);\n+        g.dispose();\n+        RED = new ImageIcon(redImg);\n+        BufferedImage greenImg = new BufferedImage(imageWidth, imageHeight,\n+            BufferedImage.TYPE_INT_RGB);\n+        g = greenImg.createGraphics();\n+        g.setColor(Color.GREEN);\n+        g.fillRect(0, 0, imageWidth, imageHeight);\n+        g.dispose();\n+        GREEN = new ImageIcon(greenImg);\n+    }\n+\n+    private static void createUI() throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            f = new JFrame(\"ButtonIconsTest\");\n+            buttons = new AbstractButton[] {\n+                new JToggleButton(),\n+                new JRadioButton(),\n+                new JCheckBox()\n+            };\n+\n+            JPanel buttonPanel = new JPanel();\n+            for (int i = 0; i < buttons.length; i++) {\n+                AbstractButton b = buttons[i];\n+                b.setIcon(RED);\n+                b.setSelected(true);\n+                b.setRolloverSelectedIcon(GREEN);\n+                buttonPanel.add(b);\n+            }\n+            f.setLayout(new GridLayout(2, 1));\n+            f.add(buttonPanel);\n+            f.pack();\n+            f.setLocationRelativeTo(null);\n+            f.setAlwaysOnTop(true);\n+            f.setVisible(true);\n+        });\n+    }\n+\n+    private static void testEnabledButton(AbstractButton button) throws Exception {\n+        robot.waitForIdle();\n+        SwingUtilities.invokeAndWait(() -> {\n+            buttonLocation = button.getLocationOnScreen();\n+            buttonWidth = button.getWidth();\n+            buttonHeight = button.getHeight();\n+        });\n+        robot.mouseMove(buttonLocation.x + buttonWidth \/ 2,\n+            buttonLocation.y + buttonHeight \/ 2 );\n+        robot.delay(1000);\n+        Color buttonColor = robot.getPixelColor(buttonLocation.x +\n+            buttonWidth \/ 2, buttonLocation.y + buttonHeight \/ 2);\n+        if (!buttonColor.equals(Color.GREEN)) {\n+            throw new RuntimeException(\"Button roll over color is : \" +\n+                buttonColor + \" but it should be : \" + Color.GREEN);\n+        }\n+    }\n+\n+    private static void testDisabledButton(AbstractButton button) throws Exception {\n+        robot.waitForIdle();\n+        SwingUtilities.invokeAndWait(() -> {\n+            buttonLocation = button.getLocationOnScreen();\n+            buttonWidth = button.getWidth();\n+            buttonHeight = button.getHeight();\n+        });\n+        robot.mouseMove(buttonLocation.x + buttonWidth \/ 2,\n+            buttonLocation.y + buttonHeight \/ 2 );\n+        robot.delay(1000);\n+        Color buttonColor = robot.getPixelColor(buttonLocation.x +\n+            buttonWidth \/ 2, buttonLocation.y + buttonHeight \/ 2);\n+        if (buttonColor.equals(Color.GREEN) ||\n+            buttonColor.equals(Color.RED)) {\n+            throw new RuntimeException(\"Disabled button color should not be : \"\n+                + buttonColor);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/AbstractButton\/bug4133768.java","additions":161,"deletions":0,"binary":false,"changes":161,"status":"added"},{"patch":"@@ -0,0 +1,141 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.AbstractAction;\n+import javax.swing.Action;\n+import javax.swing.Icon;\n+import javax.swing.ImageIcon;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JToolBar;\n+import javax.swing.SwingUtilities;\n+import java.awt.Color;\n+import java.awt.Graphics2D;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.InputEvent;\n+import java.awt.image.BufferedImage;\n+import java.io.IOException;\n+\n+\/*\n+ * @test\n+ * @bug 4391622\n+ * @summary The toolbar's button which is added as action should ignore text\n+ * @key headful\n+ * @run main bug4391622\n+ *\/\n+\n+public class bug4391622 {\n+    private static Icon RED, GREEN;\n+    private static JButton bt;\n+    private static JFrame f;\n+    private static Point buttonLocation;\n+    private static int buttonWidth, buttonHeight;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            createTestImages();\n+            createUI();\n+            runTest();\n+            verifyTest();\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createTestImages() throws IOException {\n+        int imageWidth = 32;\n+        int imageHeight = 32;\n+        BufferedImage redImg = new BufferedImage(imageWidth, imageHeight,\n+            BufferedImage.TYPE_INT_RGB);\n+        Graphics2D g = redImg.createGraphics();\n+        g.setColor(Color.RED);\n+        g.fillRect(0, 0, imageWidth, imageHeight);\n+        g.dispose();\n+        RED = new ImageIcon(redImg);\n+        BufferedImage greenImg = new BufferedImage(imageWidth, imageHeight,\n+            BufferedImage.TYPE_INT_RGB);\n+        g = greenImg.createGraphics();\n+        g.setColor(Color.GREEN);\n+        g.fillRect(0, 0, imageWidth, imageHeight);\n+        g.dispose();\n+        GREEN = new ImageIcon(greenImg);\n+    }\n+\n+    private static void createUI() throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            f = new JFrame(\"bug4391622\");\n+            Action changeIt = new ChangeIt();\n+\n+            JToolBar toolbar = new JToolBar();\n+            bt = toolbar.add(changeIt);\n+            f.add(bt);\n+            f.pack();\n+            f.setLocationRelativeTo(null);\n+            f.setVisible(true);\n+        });\n+    }\n+\n+    private static void runTest() throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(500);\n+        robot.waitForIdle();\n+        SwingUtilities.invokeAndWait(() -> {\n+            buttonLocation = bt.getLocationOnScreen();\n+            buttonWidth = bt.getWidth();\n+            buttonHeight = bt.getHeight();\n+        });\n+        robot.mouseMove(buttonLocation.x + buttonWidth \/ 2,\n+            buttonLocation.y + buttonHeight \/ 2 );\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+    }\n+\n+    private static void verifyTest() {\n+        if (bt.getText() != null) {\n+            throw new RuntimeException(\"The toolbar's button shouldn't\" +\n+                \" have any text.\");\n+        }\n+    }\n+\n+    public static class ChangeIt extends AbstractAction {\n+        private boolean c = true;\n+\n+        public ChangeIt() {\n+            putValue(Action.NAME, \"Red\");\n+            putValue(Action.SMALL_ICON, RED);\n+        }\n+\n+        public void actionPerformed(ActionEvent event) {\n+            c = !c;\n+            putValue(Action.NAME, c ? \"Red\" : \"Green\");\n+            putValue(Action.SMALL_ICON, c ? RED : GREEN);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/AbstractButton\/bug4391622.java","additions":141,"deletions":0,"binary":false,"changes":141,"status":"added"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4183379\n+ * @summary JList has wrong scrolling behavior when you click in the \"troth\"\n+ * of a scrollbar, in a scrollpane.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4183379\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JList;\n+import javax.swing.JScrollPane;\n+\n+public class bug4183379 {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+            Click mouse several times in the \"troth\" of a scrollbars\n+            in a scrollpane containing a list.\n+            The list should scrolls by one block, i.e.:\n+\n+            For vertical scrolling:\n+              - if scrolling down the last visible element should become the\n+              first completely visible element\n+              - if scrolling up, the first visible element should become the\n+              last completely visible element\n+\n+            For horizontal scrolling:\n+              - for scrolling left if the beginning of the first column is not\n+              visible it should become visible, otherwise the beginning of the\n+              previous column should become visible;\n+              - for scrolling right the next colunm after first visible column\n+              should become visible.\n+            \"\"\";\n+        PassFailJFrame.builder()\n+            .title(\"bug4183379 Instructions\")\n+            .instructions(INSTRUCTIONS)\n+            .columns(35)\n+            .testUI(bug4183379::initialize)\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    private static JFrame initialize() {\n+        JFrame fr = new JFrame(\"bug4183379\");\n+\n+        String[] data = new String[90];\n+        for (int i=0; i<90; i++) {\n+            data[i] = \"item number \"+i;\n+        }\n+\n+        JList lst = new JList(data);\n+        lst.setLayoutOrientation(JList.VERTICAL_WRAP);\n+        lst.setVisibleRowCount(20);\n+\n+        JScrollPane jsp = new JScrollPane(lst);\n+        fr.add(jsp);\n+        fr.setSize(210,200);\n+        fr.setAlwaysOnTop(true);\n+        return fr;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JList\/bug4183379.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4251306\n+ * @summary Test that Shift-Space keybinding works properly in JList.\n+ * @key headful\n+ * @run main bug4251306\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JList;\n+import javax.swing.JScrollPane;\n+import javax.swing.SwingUtilities;\n+import java.awt.Robot;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+public class bug4251306 {\n+    private static JFrame f;\n+    private static JList lst;\n+    private static CountDownLatch listGainedFocusLatch;\n+    private static volatile boolean failed;\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            listGainedFocusLatch = new CountDownLatch(1);\n+            createUI();\n+            runTest();\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createUI() throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            f = new JFrame(\"bug4251306\");\n+            lst = new JList<>(new String[]{\"anaheim\", \"bill\",\n+                \"chicago\", \"dingo\"});\n+            lst.addFocusListener(new FocusAdapter() {\n+                @Override\n+                public void focusGained(FocusEvent e) {\n+                    listGainedFocusLatch.countDown();\n+                }\n+            });\n+            JScrollPane sp = new JScrollPane(lst);\n+            f.add(sp);\n+            f.pack();\n+            f.setLocationRelativeTo(null);\n+            f.setAlwaysOnTop(true);\n+            f.setVisible(true);\n+        });\n+    }\n+\n+    private static void runTest() throws Exception {\n+        if (!listGainedFocusLatch.await(3, TimeUnit.SECONDS)) {\n+            throw new RuntimeException(\"Waited too long, but can't gain focus for list\");\n+        }\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(500);\n+        robot.waitForIdle();\n+        robot.keyPress(KeyEvent.VK_A);\n+        robot.keyRelease(KeyEvent.VK_A);\n+        robot.waitForIdle();\n+        robot.keyPress(KeyEvent.VK_SHIFT);\n+        robot.keyPress(KeyEvent.VK_SPACE);\n+        robot.keyPress(KeyEvent.VK_DOWN);\n+        robot.keyRelease(KeyEvent.VK_DOWN);\n+        robot.keyPress(KeyEvent.VK_DOWN);\n+        robot.keyRelease(KeyEvent.VK_DOWN);\n+        robot.keyPress(KeyEvent.VK_DOWN);\n+        robot.keyRelease(KeyEvent.VK_DOWN);\n+        robot.keyRelease(KeyEvent.VK_SPACE);\n+        robot.keyRelease(KeyEvent.VK_SHIFT);\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            if (!lst.isSelectedIndex(0) ||\n+                !lst.isSelectedIndex(1) ||\n+                !lst.isSelectedIndex(2) ||\n+                !lst.isSelectedIndex(3)) {\n+                failed = true;\n+            }\n+        });\n+        if (failed) {\n+            throw new RuntimeException(\"Required list items are not selected\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JList\/bug4251306.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,164 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4624845\n+ * @requires (os.family == \"windows\")\n+ * @summary Tests how submenus in WinLAF are painted\n+ * @key headful\n+ * @run main bug4624845\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import java.awt.Color;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+\n+public class bug4624845 {\n+    private static JFrame f;\n+    private static JMenu menu, subMenu;\n+    private static JMenuItem menuItem;\n+    private static Point menuLocation;\n+    private static Point subMenuLocation;\n+    private static Point menuItemLocation;\n+    private static int menuWidth;\n+    private static int menuHeight;\n+    private static int subMenuWidth;\n+    private static int subMenuHeight;\n+    private static int menuItemWidth;\n+    private static int menuItemHeight;\n+    private static Color menuItemColor;\n+    private static Color subMenuColor;\n+    private static boolean passed;\n+    private final static int OFFSET = 2;\n+    private static final int COLOR_TOLERANCE = 10;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            UIManager.setLookAndFeel\n+                (\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Failed to set Windows LAF\");\n+        }\n+        try {\n+            bug4624845 test = new bug4624845();\n+            SwingUtilities.invokeAndWait(() -> test.createUI());\n+            runTest();\n+            verifyColor();\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+        if (!passed) {\n+            throw new RuntimeException(\"Nested MenuItem color : \" +\n+                menuItemColor + \" is not similar to sub Menu color : \"\n+                + subMenuColor);\n+        }\n+    }\n+    private void createUI() {\n+        f = new JFrame(\"bug4624845\");\n+        menu = new JMenu(\"Menu\");\n+        menu.add(new JMenuItem(\"Item 1\"));\n+\n+        subMenu = new JMenu(\"Submenu\");\n+        menuItem = new JMenuItem(\"This\");\n+        subMenu.add(menuItem);\n+        subMenu.add(new JMenuItem(\"That\"));\n+        menu.add(subMenu);\n+\n+        JMenuBar mBar = new JMenuBar();\n+        mBar.add(menu);\n+        f.add(mBar);\n+        f.pack();\n+        f.setLocationRelativeTo(null);\n+        f.setVisible(true);\n+    }\n+\n+    private static void runTest() throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(200);\n+        robot.waitForIdle();\n+        SwingUtilities.invokeAndWait(() -> {\n+            menuLocation = menu.getLocationOnScreen();\n+            menuWidth = menu.getWidth();\n+            menuHeight = menu.getHeight();\n+        });\n+        robot.mouseMove(menuLocation.x + menuWidth \/ 2,\n+            menuLocation.y + menuHeight \/ 2 );\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+        SwingUtilities.invokeAndWait(() -> {\n+            subMenuLocation = subMenu.getLocationOnScreen();\n+            subMenuWidth = subMenu.getWidth();\n+            subMenuHeight = subMenu.getHeight();\n+        });\n+        robot.mouseMove(subMenuLocation.x + subMenuWidth \/ 2,\n+            subMenuLocation.y + subMenuHeight \/ 2 );\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+        subMenuColor = robot.\n+            getPixelColor(subMenuLocation.x + OFFSET,\n+                subMenuLocation.y + OFFSET);\n+        SwingUtilities.invokeAndWait(() -> {\n+            menuItemLocation = menuItem.getLocationOnScreen();\n+            menuItemWidth = subMenu.getWidth();\n+            menuItemHeight = subMenu.getHeight();\n+        });\n+        robot.mouseMove(menuItemLocation.x + menuItemWidth \/ 2,\n+            menuItemLocation.y + menuItemHeight \/ 2 );\n+        robot.waitForIdle();\n+        menuItemColor = robot.\n+            getPixelColor(menuItemLocation.x + OFFSET,\n+                menuItemLocation.y + OFFSET);\n+    }\n+\n+    private static void verifyColor() {\n+\n+        int red1 = subMenuColor.getRed();\n+        int blue1 = subMenuColor.getBlue();\n+        int green1 = subMenuColor.getGreen();\n+\n+        int red2 = menuItemColor.getRed();\n+        int blue2 = menuItemColor.getBlue();\n+        int green2 = menuItemColor.getGreen();\n+\n+        passed = true;\n+        if ((Math.abs(red1 - red2) > COLOR_TOLERANCE)\n+            || (Math.abs(green1 - green2) > COLOR_TOLERANCE)\n+            || (Math.abs(blue1 - blue2) > COLOR_TOLERANCE)) {\n+            passed = false;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenu\/bug4624845.java","additions":164,"deletions":0,"binary":false,"changes":164,"status":"added"}]}