{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -579,6 +579,8 @@\n-    assert(ent->in_named_module(), \"must be\");\n-    bool cond = strcmp(file, ent->name()) == 0;\n-    log_debug(class, path)(\"get_module_shared_path_index (%d) %s : %s = %s\", i,\n-                           location->as_C_string(), ent->name(), cond ? \"same\" : \"different\");\n-    if (cond) {\n-      return i;\n+    if (!ent->is_non_existent()) {\n+      assert(ent->in_named_module(), \"must be\");\n+      bool cond = strcmp(file, ent->name()) == 0;\n+      log_debug(class, path)(\"get_module_shared_path_index (%d) %s : %s = %s\", i,\n+                             location->as_C_string(), ent->name(), cond ? \"same\" : \"different\");\n+      if (cond) {\n+        return i;\n+      }\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,0 +92,1 @@\n+  bool is_non_existent()  const { return _type == non_existent_entry; }\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -202,0 +202,17 @@\n+    public static void createModularJarWithManifest(String jarPath,\n+                                                    String classesDir,\n+                                                    String mainClass,\n+                                                    String manifest) throws Exception {\n+        ArrayList<String> argList = new ArrayList<String>();\n+        argList.add(\"--create\");\n+        argList.add(\"--file=\" + jarPath);\n+        if (mainClass != null) {\n+            argList.add(\"--main-class=\" + mainClass);\n+        }\n+        argList.add(\"--manifest=\" + manifest);\n+        argList.add(\"-C\");\n+        argList.add(classesDir);\n+        argList.add(\".\");\n+        createJar(argList);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/JarBuilder.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8322657\n+ * @summary This test defines an application module using the DefineModuleApp.\n+ *          When performing dynamic dump, the modular jar containing the module\n+ *          is in the -cp. The jar listed in the \"Class-Path\" attribute of the modular\n+ *          jar doesn't exist. VM should not crash during dynamic dump under this scenario.\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\n+ * @build jdk.test.whitebox.WhiteBox DefineModuleApp\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar define_module_app.jar DefineModuleApp\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. ModularJarWithNonExistentJar\n+ *\/\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class ModularJarWithNonExistentJar extends DynamicArchiveTestBase {\n+    private static final Path USER_DIR = Paths.get(CDSTestUtils.getOutputDir());\n+\n+    private static final String TEST_SRC = System.getProperty(\"test.src\");\n+\n+    private static final Path SRC_DIR = Paths.get(TEST_SRC, \"..\/jigsaw\/modulepath\/src\");\n+    private static final Path MODS_DIR = Paths.get(\"mods\");\n+    private static final Path MANIFEST_PATH = Paths.get(TEST_SRC, \"test-classes\/manifest-with-non-existent-jar.txt\");\n+\n+    \/\/ the module name of the test module\n+    private static final String TEST_MODULE = \"com.simple\";\n+\n+    \/\/ the module main class\n+    private static final String MAIN_CLASS = \"com.simple.Main\";\n+\n+    private static Path moduleDir = null;\n+    private static Path modularJar = null;\n+\n+    public static void buildTestModule() throws Exception {\n+\n+        \/\/ javac -d mods\/$TESTMODULE --module-path MOD_DIR src\/$TESTMODULE\/**\n+        JarBuilder.compileModule(SRC_DIR.resolve(TEST_MODULE),\n+                                 MODS_DIR.resolve(TEST_MODULE),\n+                                 MODS_DIR.toString());\n+\n+\n+        moduleDir = Files.createTempDirectory(USER_DIR, \"mlib\");\n+\n+        modularJar = moduleDir.resolve(TEST_MODULE + \".jar\");\n+        String classes = MODS_DIR.resolve(TEST_MODULE).toString();\n+        JarBuilder.createModularJarWithManifest(modularJar.toString(), classes,\n+                                                MAIN_CLASS, MANIFEST_PATH.toString());\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        runTest(ModularJarWithNonExistentJar::testDefaultBase);\n+    }\n+\n+    static void testDefaultBase() throws Exception {\n+        String topArchiveName = getNewArchiveName(\"top\");\n+        doTest(topArchiveName);\n+    }\n+\n+    private static void doTest(String topArchiveName) throws Exception {\n+        \/\/ compile the module and create the modular jar file\n+        buildTestModule();\n+        String appJar = ClassFileInstaller.getJarPath(\"define_module_app.jar\");\n+        dump(topArchiveName,\n+             \"-Xlog:cds,class+path=info\",\n+             \"-Xlog:cds+dynamic=debug\",\n+             \"-cp\", appJar + File.pathSeparator + modularJar.toString(),\n+             \"DefineModuleApp\", moduleDir.toString(), TEST_MODULE)\n+            .assertNormalExit(output -> {\n+                    output.shouldContain(\"Written dynamic archive 0x\");\n+                });\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/ModularJarWithNonExistentJar.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * This app defines a module using the ModuleLayer.defineModulesWithOneLoader API\n+ * which calls the JVM_DefineModule.\n+ **\/\n+\n+import java.nio.file.Path;\n+import java.lang.ModuleLayer.Controller;\n+import java.lang.module.*;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class DefineModuleApp {\n+    public static void main(String[] args) throws Throwable {\n+        if (args.length != 2) {\n+            throw new RuntimeException(\"DefineModuleApp expects 2 args but saw \" + args.length);\n+        }\n+        final Path MODS = Path.of(args[0]);\n+        final String MODULE_NAME = args[1];\n+        Configuration cf = ModuleLayer.boot()\n+                .configuration()\n+                .resolve(ModuleFinder.of(), ModuleFinder.of(MODS), Set.of(MODULE_NAME));\n+        ResolvedModule m = cf.findModule(MODULE_NAME).orElseThrow();\n+        ModuleLayer bootLayer = ModuleLayer.boot();\n+        ClassLoader scl = ClassLoader.getSystemClassLoader();\n+        Controller controller = ModuleLayer.defineModulesWithOneLoader(cf, List.of(bootLayer), scl);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\/DefineModuleApp.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+Manifest-Version: 1.0\n+Class-Path: NonExistent.jar\n+Created-By: 23-internal (Oracle Corporation)\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\/manifest-with-non-existent-jar.txt","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"}]}