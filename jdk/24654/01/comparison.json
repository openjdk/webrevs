{"files":[{"patch":"@@ -0,0 +1,241 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.GridLayout;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.ScrollPane;\n+\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+\n+import javax.swing.JDialog;\n+import javax.swing.JLabel;\n+import javax.swing.WindowConstants;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n+ * @test\n+ * @bug 4368500\n+ * @key multimon\n+ * @summary Dialog needs a constructor with GraphicsConfiguration\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame\n+ * @run main\/manual DialogTest\n+ *\/\n+\n+public class DialogTest {\n+    static GraphicsDevice[] gds;\n+\n+    Frame f;\n+    Frame dummyFrame = new Frame();\n+    Dialog dummyDialog = new Dialog(dummyFrame);\n+\n+    public static void main(String[] args) throws Exception {\n+        gds = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices();\n+        if (gds.length < 2) {\n+            throw new SkippedException(\"You have only one monitor in your system\" +\n+                                       \" - test skipped\");\n+        }\n+\n+        String INSTRUCTIONS = \"\"\"\n+                This test tests the multiscreen functionality of Dialogs and JDialogs.\n+                You should see the message \"X screens detected\", where X\n+                is the number of screens on your system. If X is incorrect, press Fail.\n+\n+                In the test window, there are a list of buttons representing each\n+                type of dialog for each screen.\n+                If there aren't buttons for every screen in your system, press Fail.\n+\n+                Press each button, and the indicated type of dialog should appear\n+                on the indicated screen.\n+                Modal dialogs should not allow to click on the Instructions or\n+                DialogTest windows.\n+\n+                The buttons turn yellow once they have been pressed, to keep track\n+                of test progress.\n+\n+                If all Dialogs appear correctly, press Pass.\n+                If Dialogs appear on the wrong screen or don't behave in\n+                proper modality, press Fail.\"\"\";\n+\n+        DialogTest obj = new DialogTest();\n+\n+        PassFailJFrame.builder()\n+                .title(\"DialogTest Instruction\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .logArea(5)\n+                .testUI(obj::init)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public Frame init() {\n+        PassFailJFrame.log(gds.length + \" screens detected.\");\n+        f = new Frame(\"DialogTest UI\");\n+        f.setSize(400, 400);\n+        MyScrollPane sp = new MyScrollPane();\n+\n+        Panel p = new Panel();\n+        p.setLayout(new GridLayout(0, 1));\n+\n+        for (int i = 0; i < gds.length; i++) {\n+            Button btn;\n+\n+            \/\/screen # , modal, frame-owned, swing\n+            btn = new MyButton(new DialogInfo(i, false, false, false));\n+            p.add(btn);\n+\n+            btn = new MyButton(new DialogInfo(i, true, false, false));\n+            p.add(btn);\n+\n+            btn = new MyButton(new DialogInfo(i, false, true, false));\n+            p.add(btn);\n+\n+            btn = new MyButton(new DialogInfo(i, true, true, false));\n+            p.add(btn);\n+\n+            btn = new MyButton(new DialogInfo(i, false, false, true));\n+            p.add(btn);\n+\n+            btn = new MyButton(new DialogInfo(i, true, false, true));\n+            p.add(btn);\n+\n+            btn = new MyButton(new DialogInfo(i, false, true, true));\n+            p.add(btn);\n+\n+            btn = new MyButton(new DialogInfo(i, true, true, true));\n+            p.add(btn);\n+\n+        }\n+        sp.add(p);\n+        f.add(sp);\n+        return f;\n+    }\n+\n+    class MyScrollPane extends ScrollPane {\n+        @Override\n+        public Dimension getPreferredSize() {\n+            return f.getSize();\n+        }\n+    }\n+\n+    class MyButton extends Button {\n+        public MyButton(DialogInfo info) {\n+            setLabel(info.toString());\n+            addActionListener(new PutupDialog(info));\n+        }\n+    }\n+\n+    class PutupDialog implements ActionListener {\n+        DialogInfo info;\n+\n+        public PutupDialog(DialogInfo info) {\n+            this.info = info;\n+        }\n+\n+        @Override\n+        public void actionPerformed(ActionEvent e) {\n+            ((Button) (e.getSource())).setBackground(Color.yellow);\n+            Dialog d = info.createDialog();\n+            d.show();\n+        }\n+    }\n+\n+    class DialogInfo {\n+        int num;\n+        boolean modal;\n+        boolean frameOwned;\n+        boolean swing;\n+\n+        public DialogInfo(int num, boolean modal, boolean frameOwned, boolean swing) {\n+            this.num = num;\n+            this.modal = modal;\n+            this.frameOwned = frameOwned;\n+            this.swing = swing;\n+        }\n+\n+        public Dialog createDialog() {\n+            GraphicsConfiguration gc = gds[num].getDefaultConfiguration();\n+            String title = toString();\n+\n+\n+            Dialog d;\n+\n+            if (swing) {\n+                if (frameOwned) {\n+                    d = new JDialog(dummyFrame, toString(), modal, gc);\n+                } else {\n+                    d = new JDialog(dummyDialog, toString(), modal, gc);\n+                }\n+\n+                ((JDialog) d).setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);\n+                if (modal) {\n+                    ((JDialog) d).getContentPane().add(new JLabel(\"Check that I am modal!\"));\n+                }\n+            } else {\n+                if (frameOwned) {\n+                    d = new Dialog(dummyFrame, toString(), modal, gc);\n+                } else {\n+                    d = new Dialog(dummyDialog, toString(), modal, gc);\n+                }\n+\n+                d.addWindowListener(new WindowAdapter() {\n+                    public void windowClosing(WindowEvent e) {\n+                        e.getComponent().hide();\n+                    }\n+                });\n+                if (modal) {\n+                    d.add(new Label(\"Check that I am modal!\"));\n+                }\n+            }\n+\n+            d.setLocation(new Point((int) (gc.getBounds().getX() + 20)\n+                          , (int) (gc.getBounds().getY() + 20)));\n+            d.setSize(300, 100);\n+\n+            return d;\n+        }\n+\n+        public String toString() {\n+            return \"Screen \" + num + (frameOwned ? \" Frame-owned\" : \" Dialog-owned\")\n+                    + (modal ? \" modal \" : \" non-modal \")\n+                    + (swing ? \"JDialog\" : \"Dialog\");\n+        }\n+    }\n+}\n+\n+\n","filename":"test\/jdk\/java\/awt\/Multiscreen\/DialogTest.java","additions":241,"deletions":0,"binary":false,"changes":241,"status":"added"},{"patch":"@@ -0,0 +1,141 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Frame;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.GridLayout;\n+import java.awt.Rectangle;\n+\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n+ * @test\n+ * @bug 4356756\n+ * @key multimon\n+ * @summary Return all screen devices for physical and virtual display devices\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame\n+ * @run main\/manual FillThisScreen\n+ *\/\n+\n+public class FillThisScreen {\n+    private static Frame f;\n+    private static Button b;\n+    private static Rectangle oldSize;\n+    private static boolean fillmode = true;\n+    static GraphicsDevice[] gs;\n+\n+    public static void main(String[] args) throws Exception {\n+        gs = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices();\n+        if (gs.length < 2) {\n+            throw new SkippedException(\"You have only one monitor in your system\" +\n+                                       \" - test skipped\");\n+        }\n+\n+        String INSTRUCTIONS = \"\"\"\n+                This test is for testing the bounds of a multimonitor system.\n+                You will see a Frame with several buttons: one marked 'Fill\n+                This Screen' and an additional button for each display on your system.\n+\n+                First, drag the Frame onto each display and click the\n+                'Fill This Screen' button.\n+\n+                The Frame should resize to take up the entire display area\n+                of the screen it is on, and the button text changes to say,\n+                'Get Smaller'.\n+\n+                Click the button again to restore the Frame.\n+\n+                Next, use the 'Move to screen' buttons to move the Frame to\n+                each display and again click the 'Fill This Screen' button.\n+\n+                If the number of 'Move to Screen' buttons is not equals to\n+                the number of screens on your system, the test fails.\n+\n+                If the Frame always correctly resizes to take up ONLY the\n+                entire screen it is on (and not a different screen, or all\n+                screens), the test passes else it fails.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"FillThisScreen Test Instruction\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(FillThisScreen::init)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame init() {\n+        Button tempBtn;\n+\n+        f = new Frame(\"Drag Me Around\");\n+        f.setLayout(new GridLayout(0, 1));\n+\n+        b = new Button(\"Fill This Screen\");\n+        b.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (fillmode) {\n+                    oldSize = f.getBounds();\n+                    Rectangle r = f.getGraphicsConfiguration().getBounds();\n+                    f.setBounds(r);\n+                    b.setLabel(\"Get Smaller\");\n+                } else {\n+                    f.setBounds(oldSize);\n+                    b.setLabel(\"Fill This Screen\");\n+                }\n+                fillmode = !fillmode;\n+            }\n+        });\n+        f.add(b);\n+\n+        for (int i = 0; i < gs.length; i++) {\n+            tempBtn = new Button(\"Move to screen:\" + i);\n+            tempBtn.addActionListener(new WinMover(i));\n+            f.add(tempBtn);\n+        }\n+        f.setSize(300, 100);\n+        return f;\n+    }\n+\n+    private static class WinMover implements ActionListener {\n+        int scrNum;\n+\n+        public WinMover(int scrNum) {\n+            this.scrNum = scrNum;\n+        }\n+\n+        public void actionPerformed(ActionEvent e) {\n+            Rectangle newBounds = gs[scrNum].getDefaultConfiguration().getBounds();\n+            f.setLocation(newBounds.x + newBounds.width \/ 2,\n+                    newBounds.y + newBounds.height \/ 2);\n+        }\n+\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Multiscreen\/FillThisScreen.java","additions":141,"deletions":0,"binary":false,"changes":141,"status":"added"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.FlowLayout;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Rectangle;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JTextField;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n+ * @test\n+ * @bug 4805862\n+ * @key multimon\n+ * @requires (os.family == \"windows\")\n+ * @summary Tests IM candidate window is positioned correctly for the\n+ *          text components inside a window in multiscreen configurations, if\n+ *          this window has negative coordinates\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame\n+ * @run main\/manual IMCandidateWindowTest\n+ *\/\n+\n+public class IMCandidateWindowTest {\n+    static GraphicsConfiguration gc;\n+\n+    public static void main(String[] args) throws Exception {\n+        GraphicsDevice[] gds = GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                               .getScreenDevices();\n+        if (gds.length < 2) {\n+            throw new SkippedException(\"You have only one monitor in your system\" +\n+                                       \" - test skipped\");\n+        }\n+\n+        GraphicsDevice gd = null;\n+\n+        for (int i = 0; i < gds.length; i++) {\n+            gc = gds[i].getDefaultConfiguration();\n+            if ((gc.getBounds().x < 0) || (gc.getBounds().y < 0)) {\n+                gd = gds[i];\n+                break;\n+            }\n+        }\n+\n+        if (gd == null) {\n+            \/\/ no screens with negative coords\n+            throw new SkippedException(\"No screens with negative coords - test skipped\");\n+        }\n+\n+        String INSTRUCTIONS = \"\"\"\n+                Platform: windows\n+                Test requirements: installed support for asian languages\n+                Chinese (PRC) w\/ Chinese QuanPing input method.\n+                Multiscreen environment where one of the monitors has negative coords\n+                Go to the text field in the opened Frame. Switch to Chinese language and\n+                start typing \"ka\".\n+                Note, that IM helper window is appeared.\n+                If this window is appeared near the text field, press PASS button.\n+                If this window is appeared at the edge of the screen or on another\n+                screen, press FAIL button\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"IMCandidateWindowTest Instruction\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(IMCandidateWindowTest::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createUI() {\n+        Rectangle b = gc.getBounds();\n+\n+        JFrame f = new JFrame(\"Frame\", gc);\n+        f.setBounds(b.x + b.width \/ 2 - 150, b.y + b.height \/ 2 - 100, 300, 200);\n+        f.getContentPane().setLayout(new FlowLayout());\n+        JTextField tf = new JTextField(10);\n+        f.getContentPane().add(tf);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Multiscreen\/IMCandidateWindowTest.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"}]}