{"files":[{"patch":"@@ -31,1 +31,0 @@\n-#include \"utilities\/macros.hpp\"\n@@ -52,2 +51,2 @@\n-    STATIC_ASSERT(std::is_trivially_copyable<T>::value);\n-    STATIC_ASSERT(std::is_trivially_default_constructible<T>::value);\n+    static_assert(std::is_trivially_copyable<T>::value);\n+    static_assert(std::is_trivially_default_constructible<T>::value);\n@@ -60,2 +59,2 @@\n-    STATIC_ASSERT(std::is_trivially_copyable<T>::value);\n-    STATIC_ASSERT(std::is_trivially_default_constructible<T>::value);\n+    static_assert(std::is_trivially_copyable<T>::value);\n+    static_assert(std::is_trivially_default_constructible<T>::value);\n@@ -75,1 +74,1 @@\n-    STATIC_ASSERT(sizeof(T) == sizeof(uint8_t));\n+    static_assert(sizeof(T) == sizeof(uint8_t));\n@@ -84,1 +83,1 @@\n-    STATIC_ASSERT(sizeof(T) == sizeof(uint8_t));\n+    static_assert(sizeof(T) == sizeof(uint8_t));\n@@ -94,1 +93,1 @@\n-    STATIC_ASSERT(sizeof(T) == sizeof(uint16_t));\n+    static_assert(sizeof(T) == sizeof(uint16_t));\n@@ -103,1 +102,1 @@\n-    STATIC_ASSERT(sizeof(T) == sizeof(uint32_t));\n+    static_assert(sizeof(T) == sizeof(uint32_t));\n@@ -112,1 +111,1 @@\n-    STATIC_ASSERT(sizeof(T) == sizeof(uint64_t));\n+    static_assert(sizeof(T) == sizeof(uint64_t));\n@@ -121,1 +120,1 @@\n-    STATIC_ASSERT(sizeof(T) == sizeof(uint16_t));\n+    static_assert(sizeof(T) == sizeof(uint16_t));\n@@ -130,1 +129,1 @@\n-    STATIC_ASSERT(sizeof(T) == sizeof(uint32_t));\n+    static_assert(sizeof(T) == sizeof(uint32_t));\n@@ -139,1 +138,1 @@\n-    STATIC_ASSERT(sizeof(T) == sizeof(uint64_t));\n+    static_assert(sizeof(T) == sizeof(uint64_t));\n@@ -143,2 +142,1 @@\n-#endif\n-\n+#else\n@@ -149,2 +147,2 @@\n-    STATIC_ASSERT(sizeof(T) == byte_size);\n-    STATIC_ASSERT(byte_size != 0);  \/\/ Incomplete type\n+    static_assert(sizeof(T) == byte_size);\n+    static_assert(byte_size != 0);  \/\/ Incomplete type\n@@ -163,2 +161,2 @@\n-    STATIC_ASSERT(sizeof(T) == byte_size);\n-    STATIC_ASSERT(byte_size != 0);  \/\/ Incomplete type\n+    static_assert(sizeof(T) == byte_size);\n+    static_assert(byte_size != 0);  \/\/ Incomplete type\n@@ -174,0 +172,1 @@\n+#endif \/\/ SANITIZER_HAS_UNALIGNED_ACCESS\n","filename":"src\/hotspot\/share\/utilities\/unalignedAccess.hpp","additions":18,"deletions":19,"binary":false,"changes":37,"status":"modified"}]}