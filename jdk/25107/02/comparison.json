{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,2 +251,1 @@\n-        \/\/ need file attributes to know if file is directory\n-        UnixFileAttributes attrs = null;\n+        boolean isDirectory = false;\n@@ -254,3 +253,18 @@\n-            attrs = UnixFileAttributes.get(file, false);\n-            if (attrs.isDirectory()) {\n-                rmdir(file);\n+            if (UnixNativeDispatcher.unlinkDirFailureSupported()) {\n+                try {\n+                    \/\/ assume the common case that the file is a regular file\n+                    unlink(file);\n+                } catch (UnixException e) {\n+                    \/\/ check whether the file is a directory\n+                    if (e.errno() == EISDIR ||\n+                        UnixFileAttributes.get(file, false).isDirectory())\n+                        isDirectory = true;\n+\n+                    \/\/ if the file is a directory then try rmdir, otherwise\n+                    \/\/ re-throw and let the exception be handled below\n+                    if (isDirectory) {\n+                        rmdir(file);\n+                    } else {\n+                        throw e;\n+                    }\n+                }\n@@ -258,1 +272,5 @@\n-                unlink(file);\n+                isDirectory = UnixFileAttributes.get(file, false).isDirectory();\n+                if (isDirectory)\n+                    rmdir(file);\n+                else\n+                    unlink(file);\n@@ -267,1 +285,1 @@\n-            if (attrs != null && attrs.isDirectory() &&\n+            if (isDirectory &&\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystemProvider.java","additions":26,"deletions":8,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -535,3 +535,4 @@\n-    private static final int SUPPORTS_OPENAT        = 1 << 1;  \/\/ syscalls\n-    private static final int SUPPORTS_XATTR         = 1 << 3;\n-    private static final int SUPPORTS_BIRTHTIME     = 1 << 16; \/\/ other features\n+    private static final int SUPPORTS_OPENAT             = 1 << 1;  \/\/ syscalls\n+    private static final int SUPPORTS_UNLINK_DIR_FAILURE = 1 << 2;\n+    private static final int SUPPORTS_XATTR              = 1 << 3;\n+    private static final int SUPPORTS_BIRTHTIME          = 1 << 16; \/\/ other features\n@@ -547,0 +548,7 @@\n+    \/**\n+     * Supports EISDIR error of unlink(2)\n+     *\/\n+    static boolean unlinkDirFailureSupported() {\n+        return (capabilities & SUPPORTS_UNLINK_DIR_FAILURE) != 0;\n+    }\n+\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixNativeDispatcher.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -380,0 +380,5 @@\n+    \/* supports EISDIR failure of unlink(2) *\/\n+#if defined(__linux__)\n+    capabilities |= sun_nio_fs_UnixNativeDispatcher_SUPPORTS_UNLINK_DIR_FAILURE;\n+#endif\n+\n","filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixNativeDispatcher.c","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}