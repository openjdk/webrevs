{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import sun.security.action.GetBooleanAction;\n-\n@@ -60,2 +58,1 @@\n-    private static final boolean DEBUG\n-            = GetBooleanAction.privilegedGetProperty(\"ntlm.debug\");\n+    private static final boolean DEBUG = Boolean.getBoolean(\"ntlm.debug\");\n","filename":"src\/java.base\/share\/classes\/com\/sun\/security\/ntlm\/NTLM.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -240,6 +240,0 @@\n-        @SuppressWarnings(\"removal\")\n-        java.lang.SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(AuthPermissionHolder.SET_READ_ONLY_PERMISSION);\n-        }\n-\n@@ -308,1 +302,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -378,1 +371,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -383,5 +375,0 @@\n-        java.lang.SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(AuthPermissionHolder.DO_AS_PERMISSION);\n-        }\n-\n@@ -444,1 +431,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -450,5 +436,0 @@\n-        java.lang.SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(AuthPermissionHolder.DO_AS_PERMISSION);\n-        }\n-\n@@ -517,5 +498,0 @@\n-        java.lang.SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(AuthPermissionHolder.DO_AS_PRIVILEGED_PERMISSION);\n-        }\n-\n@@ -588,5 +564,0 @@\n-        java.lang.SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(AuthPermissionHolder.DO_AS_PRIVILEGED_PERMISSION);\n-        }\n-\n@@ -612,19 +583,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static AccessControlContext createContext(final Subject subject,\n-                                        final AccessControlContext acc) {\n-\n-\n-        return java.security.AccessController.doPrivileged\n-            (new java.security.PrivilegedAction<>() {\n-            public AccessControlContext run() {\n-                if (subject == null) {\n-                    return new AccessControlContext(acc, null);\n-                } else {\n-                    return new AccessControlContext\n-                                        (acc,\n-                                        new SubjectDomainCombiner(subject));\n-            }\n-            }\n-        });\n-    }\n-\n@@ -716,8 +668,0 @@\n-        \/\/ XXX\n-        \/\/ we do not need a security check for\n-        \/\/ AuthPermission(getPrivateCredentials)\n-        \/\/ because we already restrict access to private credentials\n-        \/\/ via the PrivateCredentialPermission.  all the extra AuthPermission\n-        \/\/ would do is protect the set operations themselves\n-        \/\/ (like size()), which don't seem security-sensitive.\n-\n@@ -785,8 +729,0 @@\n-        \/\/ XXX\n-        \/\/ we do not need a security check for\n-        \/\/ AuthPermission(getPrivateCredentials)\n-        \/\/ because we already restrict access to private credentials\n-        \/\/ via the PrivateCredentialPermission.  all the extra AuthPermission\n-        \/\/ would do is protect the set operations themselves\n-        \/\/ (like size()), which don't seem security-sensitive.\n-\n@@ -860,9 +796,0 @@\n-        return toString(true);\n-    }\n-\n-    \/**\n-     * package private convenience method to print out the Subject\n-     * without firing off a security check when trying to access\n-     * the Private Credentials\n-     *\/\n-    String toString(boolean includePrivateCredentials) {\n@@ -888,15 +815,13 @@\n-        if (includePrivateCredentials) {\n-            synchronized(privCredentials) {\n-                Iterator<Object> pI = privCredentials.iterator();\n-                while (pI.hasNext()) {\n-                    try {\n-                        Object o = pI.next();\n-                        suffix += ResourcesMgr.getString\n-                                        (\".Private.Credential.\") +\n-                                        o.toString() +\n-                                        ResourcesMgr.getString(\"NEWLINE\");\n-                    } catch (SecurityException se) {\n-                        suffix += ResourcesMgr.getString\n-                                (\".Private.Credential.inaccessible.\");\n-                        break;\n-                    }\n+        synchronized(privCredentials) {\n+            Iterator<Object> pI = privCredentials.iterator();\n+            while (pI.hasNext()) {\n+                try {\n+                    Object o = pI.next();\n+                    suffix += ResourcesMgr.getString\n+                                    (\".Private.Credential.\") +\n+                                    o.toString() +\n+                                    ResourcesMgr.getString(\"NEWLINE\");\n+                } catch (SecurityException se) {\n+                    suffix += ResourcesMgr.getString\n+                            (\".Private.Credential.inaccessible.\");\n+                    break;\n@@ -1085,1 +1010,1 @@\n-            final LinkedList<E> list = elements;\n+            LinkedList<E> list = elements;\n@@ -1087,1 +1012,1 @@\n-                final ListIterator<E> i = list.listIterator(0);\n+                ListIterator<E> i = list.listIterator(0);\n@@ -1094,16 +1019,0 @@\n-                    if (which != Subject.PRIV_CREDENTIAL_SET) {\n-                        return i.next();\n-                    }\n-\n-                    @SuppressWarnings(\"removal\")\n-                    SecurityManager sm = System.getSecurityManager();\n-                    if (sm != null) {\n-                        try {\n-                            sm.checkPermission(new PrivateCredentialPermission\n-                                (list.get(i.nextIndex()).getClass().getName(),\n-                                subject.getPrincipals()));\n-                        } catch (SecurityException se) {\n-                            i.next();\n-                            throw (se);\n-                        }\n-                    }\n@@ -1120,15 +1029,0 @@\n-                    @SuppressWarnings(\"removal\")\n-                    java.lang.SecurityManager sm = System.getSecurityManager();\n-                    if (sm != null) {\n-                        switch (which) {\n-                        case Subject.PRINCIPAL_SET:\n-                            sm.checkPermission(AuthPermissionHolder.MODIFY_PRINCIPALS_PERMISSION);\n-                            break;\n-                        case Subject.PUB_CREDENTIAL_SET:\n-                            sm.checkPermission(AuthPermissionHolder.MODIFY_PUBLIC_CREDENTIALS_PERMISSION);\n-                            break;\n-                        default:\n-                            sm.checkPermission(AuthPermissionHolder.MODIFY_PRIVATE_CREDENTIALS_PERMISSION);\n-                            break;\n-                        }\n-                    }\n@@ -1150,16 +1044,0 @@\n-            @SuppressWarnings(\"removal\")\n-            java.lang.SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                switch (which) {\n-                case Subject.PRINCIPAL_SET:\n-                    sm.checkPermission(AuthPermissionHolder.MODIFY_PRINCIPALS_PERMISSION);\n-                    break;\n-                case Subject.PUB_CREDENTIAL_SET:\n-                    sm.checkPermission(AuthPermissionHolder.MODIFY_PUBLIC_CREDENTIALS_PERMISSION);\n-                    break;\n-                default:\n-                    sm.checkPermission(AuthPermissionHolder.MODIFY_PRIVATE_CREDENTIALS_PERMISSION);\n-                    break;\n-                }\n-            }\n-\n@@ -1183,1 +1061,1 @@\n-        }\n+            }\n@@ -1186,1 +1064,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -1192,1 +1069,1 @@\n-            final Iterator<E> e = iterator();\n+            Iterator<E> e = iterator();\n@@ -1194,11 +1071,1 @@\n-                E next;\n-                if (which != Subject.PRIV_CREDENTIAL_SET) {\n-                    next = e.next();\n-                } else {\n-                    next = java.security.AccessController.doPrivileged\n-                        (new java.security.PrivilegedAction<E>() {\n-                        public E run() {\n-                            return e.next();\n-                        }\n-                    });\n-                }\n+                E next = e.next();\n@@ -1214,1 +1081,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -1220,1 +1086,1 @@\n-            final Iterator<E> e = iterator();\n+            Iterator<E> e = iterator();\n@@ -1222,24 +1088,1 @@\n-                E next;\n-                if (which != Subject.PRIV_CREDENTIAL_SET) {\n-                    next = e.next();\n-                } else {\n-\n-                    \/\/ For private credentials:\n-                    \/\/ If the caller does not have read permission\n-                    \/\/ for o.getClass(), we throw a SecurityException.\n-                    \/\/ Otherwise, we check the private cred set to see whether\n-                    \/\/ it contains the Object\n-\n-                    SecurityManager sm = System.getSecurityManager();\n-                    if (sm != null) {\n-                        sm.checkPermission(new PrivateCredentialPermission\n-                                                (o.getClass().getName(),\n-                                                subject.getPrincipals()));\n-                    }\n-                    next = java.security.AccessController.doPrivileged\n-                        (new java.security.PrivilegedAction<E>() {\n-                        public E run() {\n-                            return e.next();\n-                        }\n-                    });\n-                }\n+                E next = e.next();\n@@ -1266,1 +1109,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -1271,1 +1113,1 @@\n-            final Iterator<E> e = iterator();\n+            Iterator<E> e = iterator();\n@@ -1273,11 +1115,1 @@\n-                E next;\n-                if (which != Subject.PRIV_CREDENTIAL_SET) {\n-                    next = e.next();\n-                } else {\n-                    next = java.security.AccessController.doPrivileged\n-                        (new java.security.PrivilegedAction<E>() {\n-                        public E run() {\n-                            return e.next();\n-                        }\n-                    });\n-                }\n+                E next = e.next();\n@@ -1308,1 +1140,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -1313,1 +1144,1 @@\n-            final Iterator<E> e = iterator();\n+            Iterator<E> e = iterator();\n@@ -1315,11 +1146,1 @@\n-                E next;\n-                if (which != Subject.PRIV_CREDENTIAL_SET) {\n-                    next = e.next();\n-                } else {\n-                    next = java.security.AccessController.doPrivileged\n-                        (new java.security.PrivilegedAction<E>() {\n-                        public E run() {\n-                            return e.next();\n-                        }\n-                    });\n-                }\n+                E next = e.next();\n@@ -1336,1 +1157,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -1338,1 +1158,1 @@\n-            final Iterator<E> e = iterator();\n+            Iterator<E> e = iterator();\n@@ -1340,11 +1160,1 @@\n-                E next;\n-                if (which != Subject.PRIV_CREDENTIAL_SET) {\n-                    next = e.next();\n-                } else {\n-                    next = java.security.AccessController.doPrivileged\n-                        (new java.security.PrivilegedAction<E>() {\n-                        public E run() {\n-                            return e.next();\n-                        }\n-                    });\n-                }\n+                E next = e.next();\n@@ -1360,10 +1170,0 @@\n-            final Iterator<E> e = iterator();\n-            while (e.hasNext()) {\n-                \/\/ The next() method performs a security manager check\n-                \/\/ on each element in the SecureSet.  If we make it all\n-                \/\/ the way through we should be able to simply return\n-                \/\/ element's toArray results.  Otherwise, we'll let\n-                \/\/ the SecurityException pass up the call stack.\n-                e.next();\n-            }\n-\n@@ -1374,10 +1174,0 @@\n-            final Iterator<E> e = iterator();\n-            while (e.hasNext()) {\n-                \/\/ The next() method performs a security manager check\n-                \/\/ on each element in the SecureSet.  If we make it all\n-                \/\/ the way through we should be able to simply return\n-                \/\/ element's toArray results.  Otherwise, we'll let\n-                \/\/ the SecurityException pass up the call stack.\n-                e.next();\n-            }\n-\n@@ -1434,7 +1224,0 @@\n-            if (which == Subject.PRIV_CREDENTIAL_SET) {\n-                \/\/ check permissions before serializing\n-                Iterator<E> i = iterator();\n-                while (i.hasNext()) {\n-                    i.next();\n-                }\n-            }\n@@ -1499,1 +1282,1 @@\n-        @SuppressWarnings({\"removal\",\"unchecked\"})     \/*To suppress warning from line 1374*\/\n+        @SuppressWarnings(\"unchecked\")\n@@ -1501,1 +1284,1 @@\n-            final Iterator<?> iterator;\n+            Iterator<?> iterator;\n@@ -1514,3 +1297,0 @@\n-            \/\/ Check whether the caller has permission to get\n-            \/\/ credentials of Class c\n-\n@@ -1518,11 +1298,1 @@\n-                Object next;\n-                if (which == Subject.PRIV_CREDENTIAL_SET) {\n-                    next = java.security.AccessController.doPrivileged\n-                        (new java.security.PrivilegedAction<>() {\n-                        public Object run() {\n-                            return iterator.next();\n-                        }\n-                    });\n-                } else {\n-                    next = iterator.next();\n-                }\n+                Object next = iterator.next();\n@@ -1530,12 +1300,1 @@\n-                    if (which != Subject.PRIV_CREDENTIAL_SET) {\n-                        set.add((T)next);\n-                    } else {\n-                        \/\/ Check permission for private creds\n-                        SecurityManager sm = System.getSecurityManager();\n-                        if (sm != null) {\n-                            sm.checkPermission(new PrivateCredentialPermission\n-                                                (next.getClass().getName(),\n-                                                Subject.this.getPrincipals()));\n-                        }\n-                        set.add((T)next);\n-                    }\n+                    set.add((T)next);\n@@ -1569,23 +1328,0 @@\n-\n-    static final class AuthPermissionHolder {\n-        static final AuthPermission DO_AS_PERMISSION =\n-            new AuthPermission(\"doAs\");\n-\n-        static final AuthPermission DO_AS_PRIVILEGED_PERMISSION =\n-            new AuthPermission(\"doAsPrivileged\");\n-\n-        static final AuthPermission SET_READ_ONLY_PERMISSION =\n-            new AuthPermission(\"setReadOnly\");\n-\n-        static final AuthPermission GET_SUBJECT_PERMISSION =\n-            new AuthPermission(\"getSubject\");\n-\n-        static final AuthPermission MODIFY_PRINCIPALS_PERMISSION =\n-            new AuthPermission(\"modifyPrincipals\");\n-\n-        static final AuthPermission MODIFY_PUBLIC_CREDENTIALS_PERMISSION =\n-            new AuthPermission(\"modifyPublicCredentials\");\n-\n-        static final AuthPermission MODIFY_PRIVATE_CREDENTIALS_PERMISSION =\n-            new AuthPermission(\"modifyPrivateCredentials\");\n-    }\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/Subject.java","additions":30,"deletions":294,"binary":false,"changes":324,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.security.AccessController;\n@@ -30,1 +29,0 @@\n-import java.security.PrivilegedAction;\n@@ -87,5 +85,0 @@\n-        java.lang.SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new AuthPermission\n-                (\"getSubjectFromDomainCombiner\"));\n-        }\n@@ -147,8 +140,1 @@\n-                final Subject s = subject;\n-                AccessController.doPrivileged\n-                    (new java.security.PrivilegedAction<Void>() {\n-                    public Void run() {\n-                        debug.println(s.toString());\n-                        return null;\n-                    }\n-                });\n+                debug.println(subject.toString());\n@@ -352,5 +338,1 @@\n-        return AccessController.doPrivileged(new PrivilegedAction<String>() {\n-            public String run() {\n-                return pd.toString();\n-            }\n-        });\n+        return pd.toString();\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/SubjectDomainCombiner.java","additions":2,"deletions":20,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,6 +28,0 @@\n-import javax.security.auth.AuthPermission;\n-\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedExceptionAction;\n-import java.security.PrivilegedActionException;\n@@ -193,13 +187,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private final java.security.AccessControlContext acc =\n-            java.security.AccessController.getContext();\n-\n-    private static void checkPermission(String type) {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new AuthPermission\n-                                (\"createLoginConfiguration.\" + type));\n-        }\n-    }\n-\n@@ -222,1 +203,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -225,4 +205,0 @@\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null)\n-            sm.checkPermission(new AuthPermission(\"getLoginConfiguration\"));\n-\n@@ -231,8 +207,2 @@\n-                String config_class = null;\n-                config_class = AccessController.doPrivileged\n-                    (new PrivilegedAction<>() {\n-                    public String run() {\n-                        return java.security.Security.getProperty\n-                                    (\"login.configuration.provider\");\n-                    }\n-                });\n+                String config_class = Security.getProperty\n+                            (\"login.configuration.provider\");\n@@ -244,36 +214,12 @@\n-                    final String finalClass = config_class;\n-                    Configuration untrustedImpl = AccessController.doPrivileged(\n-                            new PrivilegedExceptionAction<>() {\n-                                public Configuration run() throws ClassNotFoundException,\n-                                        InstantiationException,\n-                                        IllegalAccessException {\n-                                    Class<? extends Configuration> implClass = Class.forName(\n-                                            finalClass, false,\n-                                            Thread.currentThread().getContextClassLoader()\n-                                    ).asSubclass(Configuration.class);\n-                                    @SuppressWarnings(\"deprecation\")\n-                                    Configuration result = implClass.newInstance();\n-                                    return result;\n-                                }\n-                            });\n-                    AccessController.doPrivileged(\n-                            new PrivilegedExceptionAction<>() {\n-                                public Void run() {\n-                                    setConfiguration(untrustedImpl);\n-                                    return null;\n-                                }\n-                            }, Objects.requireNonNull(untrustedImpl.acc)\n-                    );\n-                } catch (PrivilegedActionException e) {\n-                    Exception ee = e.getException();\n-                    if (ee instanceof InstantiationException) {\n-                        throw new SecurityException\n-                                    (\"Configuration error:\" +\n-                                     ee.getCause().getMessage() +\n-                                     \"\\n\", ee.getCause());\n-                    } else {\n-                        throw new SecurityException\n-                                    (\"Configuration error: \" +\n-                                     ee.toString() +\n-                                     \"\\n\", ee);\n-                    }\n+                    Class<? extends Configuration> implClass = Class.forName(\n+                            config_class, false,\n+                            Thread.currentThread().getContextClassLoader()\n+                    ).asSubclass(Configuration.class);\n+                    @SuppressWarnings(\"deprecation\")\n+                    Configuration result = implClass.newInstance();\n+                    setConfiguration(result);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new SecurityException\n+                                (\"Configuration error: \" +\n+                                 e.toString() +\n+                                 \"\\n\", e);\n@@ -294,4 +240,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null)\n-            sm.checkPermission(new AuthPermission(\"setLoginConfiguration\"));\n@@ -349,1 +291,0 @@\n-        checkPermission(type);\n@@ -415,1 +356,0 @@\n-        checkPermission(type);\n@@ -476,1 +416,0 @@\n-        checkPermission(type);\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/login\/Configuration.java","additions":14,"deletions":75,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -32,0 +30,1 @@\n+import java.security.Security;\n@@ -34,1 +33,0 @@\n-import javax.security.auth.AuthPermission;\n@@ -37,1 +35,0 @@\n-import java.security.AccessControlContext;\n@@ -185,2 +182,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private AccessControlContext creatorAcc = null;  \/\/ customized config only\n@@ -203,1 +198,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -206,6 +200,0 @@\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null && creatorAcc == null) {\n-            sm.checkPermission(new AuthPermission\n-                                (\"createLoginContext.\" + name));\n-        }\n-\n@@ -218,6 +206,1 @@\n-            config = java.security.AccessController.doPrivileged\n-                (new java.security.PrivilegedAction<Configuration>() {\n-                public Configuration run() {\n-                    return Configuration.getConfiguration();\n-                }\n-            });\n+            config = Configuration.getConfiguration();\n@@ -230,5 +213,0 @@\n-            if (sm != null && creatorAcc == null) {\n-                sm.checkPermission(new AuthPermission\n-                                (\"createLoginContext.\" + OTHER));\n-            }\n-\n@@ -254,14 +232,5 @@\n-        contextClassLoader = java.security.AccessController.doPrivileged\n-                (new java.security.PrivilegedAction<ClassLoader>() {\n-                public ClassLoader run() {\n-                    ClassLoader loader =\n-                            Thread.currentThread().getContextClassLoader();\n-                    if (loader == null) {\n-                        \/\/ Don't use bootstrap class loader directly to ensure\n-                        \/\/ proper package access control!\n-                        loader = ClassLoader.getSystemClassLoader();\n-                    }\n-\n-                    return loader;\n-                }\n-        });\n+        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        if (loader == null) {\n+            loader = ClassLoader.getSystemClassLoader();\n+        }\n+        contextClassLoader = loader;\n@@ -271,1 +240,1 @@\n-    @SuppressWarnings(\"removal\")\n+    @SuppressWarnings(\"deprecation\")\n@@ -276,27 +245,11 @@\n-\n-            final ClassLoader finalLoader = contextClassLoader;\n-\n-            this.callbackHandler = java.security.AccessController.doPrivileged(\n-                new java.security.PrivilegedExceptionAction<CallbackHandler>() {\n-                public CallbackHandler run() throws Exception {\n-                    String defaultHandler = java.security.Security.getProperty\n-                        (DEFAULT_HANDLER);\n-                    if (defaultHandler == null || defaultHandler.isEmpty())\n-                        return null;\n-                    Class<? extends CallbackHandler> c = Class.forName(\n-                            defaultHandler, true,\n-                            finalLoader).asSubclass(CallbackHandler.class);\n-                    @SuppressWarnings(\"deprecation\")\n-                    CallbackHandler result = c.newInstance();\n-                    return result;\n-                }\n-            });\n-        } catch (java.security.PrivilegedActionException pae) {\n-            throw new LoginException(pae.getException().toString());\n-        }\n-\n-        \/\/ secure it with the caller's ACC\n-        if (this.callbackHandler != null && creatorAcc == null) {\n-            this.callbackHandler = new SecureCallbackHandler\n-                                (java.security.AccessController.getContext(),\n-                                this.callbackHandler);\n+            String defaultHandler = Security.getProperty(DEFAULT_HANDLER);\n+            if (defaultHandler == null || defaultHandler.isEmpty()) {\n+                this.callbackHandler = null;\n+            } else {\n+                Class<? extends CallbackHandler> c = Class.forName(\n+                        defaultHandler, true,\n+                        contextClassLoader).asSubclass(CallbackHandler.class);\n+                this.callbackHandler = (CallbackHandler) c.newInstance();\n+            }\n+        } catch (ReflectiveOperationException e) {\n+            throw new LoginException(e.toString());\n@@ -370,1 +323,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -377,3 +329,1 @@\n-        this.callbackHandler = new SecureCallbackHandler\n-                                (java.security.AccessController.getContext(),\n-                                callbackHandler);\n+        this.callbackHandler = callbackHandler;\n@@ -403,1 +353,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -410,3 +359,1 @@\n-        this.callbackHandler = new SecureCallbackHandler\n-                                (java.security.AccessController.getContext(),\n-                                callbackHandler);\n+        this.callbackHandler = callbackHandler;\n@@ -440,1 +387,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -445,3 +391,0 @@\n-        if (config != null) {\n-            creatorAcc = java.security.AccessController.getContext();\n-        }\n@@ -456,4 +399,0 @@\n-        } else if (creatorAcc == null) {\n-            this.callbackHandler = new SecureCallbackHandler\n-                                (java.security.AccessController.getContext(),\n-                                callbackHandler);\n@@ -521,3 +460,2 @@\n-            \/\/ module invoked in doPrivileged\n-            invokePriv(LOGIN_METHOD);\n-            invokePriv(COMMIT_METHOD);\n+            invoke(LOGIN_METHOD);\n+            invoke(COMMIT_METHOD);\n@@ -527,1 +465,1 @@\n-                invokePriv(ABORT_METHOD);\n+                invoke(ABORT_METHOD);\n@@ -560,2 +498,1 @@\n-        \/\/ module invoked in doPrivileged\n-        invokePriv(LOGOUT_METHOD);\n+        invoke(LOGOUT_METHOD);\n@@ -600,6 +537,1 @@\n-     * Invokes the login, commit, and logout methods\n-     * from a LoginModule inside a doPrivileged block restricted\n-     * by creatorAcc (may be null).\n-     *\n-     * This version is called if the caller did not instantiate\n-     * the LoginContext with a Configuration object.\n+     * Invokes the login, commit, and logout methods from a LoginModule.\n@@ -607,15 +539,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private void invokePriv(final String methodName) throws LoginException {\n-        try {\n-            java.security.AccessController.doPrivileged\n-                (new java.security.PrivilegedExceptionAction<Void>() {\n-                public Void run() throws LoginException {\n-                    invoke(methodName);\n-                    return null;\n-                }\n-            }, creatorAcc);\n-        } catch (java.security.PrivilegedActionException pae) {\n-            throw (LoginException)pae.getException();\n-        }\n-    }\n-\n@@ -642,5 +559,2 @@\n-                            @SuppressWarnings(\"removal\")\n-                            ServiceLoader<LoginModule> sc = AccessController.doPrivileged(\n-                                    (PrivilegedAction<ServiceLoader<LoginModule>>)\n-                                            () -> java.util.ServiceLoader.load(\n-                                                LoginModule.class, contextClassLoader));\n+                            ServiceLoader<LoginModule> sc = ServiceLoader.load(\n+                                    LoginModule.class, contextClassLoader);\n@@ -844,39 +758,0 @@\n-    \/**\n-     * Wrap the caller-specified CallbackHandler in our own\n-     * and invoke it within a privileged block, constrained by\n-     * the caller's AccessControlContext.\n-     *\/\n-    private static class SecureCallbackHandler implements CallbackHandler {\n-\n-        @SuppressWarnings(\"removal\")\n-        private final java.security.AccessControlContext acc;\n-        private final CallbackHandler ch;\n-\n-        SecureCallbackHandler(@SuppressWarnings(\"removal\") java.security.AccessControlContext acc,\n-                        CallbackHandler ch) {\n-            this.acc = acc;\n-            this.ch = ch;\n-        }\n-\n-        @SuppressWarnings(\"removal\")\n-        public void handle(final Callback[] callbacks)\n-                throws java.io.IOException, UnsupportedCallbackException {\n-            try {\n-                java.security.AccessController.doPrivileged\n-                    (new java.security.PrivilegedExceptionAction<Void>() {\n-                    public Void run() throws java.io.IOException,\n-                                        UnsupportedCallbackException {\n-                        ch.handle(callbacks);\n-                        return null;\n-                    }\n-                }, acc);\n-            } catch (java.security.PrivilegedActionException pae) {\n-                if (pae.getException() instanceof java.io.IOException) {\n-                    throw (java.io.IOException)pae.getException();\n-                } else {\n-                    throw (UnsupportedCallbackException)pae.getException();\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/login\/LoginContext.java","additions":28,"deletions":153,"binary":false,"changes":181,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import java.security.AccessController;\n@@ -35,1 +34,0 @@\n-import java.security.PrivilegedAction;\n@@ -143,11 +141,1 @@\n-    private static String X509Provider;\n-\n-    static {\n-        X509Provider = AccessController.doPrivileged(\n-            new PrivilegedAction<>() {\n-                public String run() {\n-                    return Security.getProperty(X509_PROVIDER);\n-                }\n-            }\n-        );\n-    }\n+    private static String X509Provider = Security.getProperty(X509_PROVIDER);\n","filename":"src\/java.base\/share\/classes\/javax\/security\/cert\/X509Certificate.java","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-import java.security.*;\n+import java.security.URIParameter;\n@@ -34,10 +34,5 @@\n-        c = AccessController.doPrivileged\n-            (new PrivilegedAction<Configuration>() {\n-            public Configuration run() {\n-                if (params instanceof URIParameter) {\n-                    URIParameter uriParam = (URIParameter)params;\n-                    return new ConfigFile(uriParam.getURI());\n-                }\n-                return new ConfigFile();\n-            }\n-        });\n+        if (params instanceof URIParameter uriParam) {\n+            c = new ConfigFile(uriParam.getURI());\n+        } else {\n+            c = new ConfigFile();\n+        }\n","filename":"test\/jdk\/javax\/security\/auth\/login\/Configuration\/GetInstanceConfigSpi.java","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-import java.security.*;\n+import java.security.Provider;\n@@ -33,7 +33,1 @@\n-        AccessController.doPrivileged(new PrivilegedAction() {\n-            public Object run() {\n-                put(\"Configuration.GetInstanceConfigSpi\",\n-                        \"GetInstanceConfigSpi\");\n-                return null;\n-            }\n-        });\n+        put(\"Configuration.GetInstanceConfigSpi\", \"GetInstanceConfigSpi\");\n","filename":"test\/jdk\/javax\/security\/auth\/login\/Configuration\/GetInstanceProvider.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -34,6 +34,0 @@\n-\/**\n- * This test shares the login config with ConfigConstructorNoPerm.\n- * This test has all necessary permissions configured in the policy\n- * (ConfigConstructorNoPerm has no perms and checks for SecurityExceptions).\n- *\/\n-\n@@ -212,2 +206,1 @@\n-                ch == null ||\n-                ch == ConfigConstructor.ch) {\n+                ch == null) {\n","filename":"test\/jdk\/javax\/security\/auth\/login\/LoginContext\/ConfigConstructor.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -290,9 +290,3 @@\n-            final Subject s = subject;\n-            final UnixPrincipal up = userPrincipal;\n-            java.security.AccessController.doPrivileged\n-                    ((java.security.PrivilegedAction) () -> {\n-                        if (!s.getPrincipals().contains(up)) {\n-                            s.getPrincipals().add(up);\n-                        }\n-                        return null;\n-                    });\n+            if (!subject.getPrincipals().contains(userPrincipal)) {\n+                subject.getPrincipals().add(userPrincipal);\n+            }\n@@ -323,7 +317,1 @@\n-                final Subject s = subject;\n-                final UnixPrincipal up = userPrincipal;\n-                java.security.AccessController.doPrivileged\n-                        ((java.security.PrivilegedAction) () -> {\n-                            s.getPrincipals().remove(up);\n-                            return null;\n-                        });\n+                subject.getPrincipals().remove(userPrincipal);\n","filename":"test\/jdk\/javax\/security\/auth\/login\/LoginContext\/LCTest.java","additions":5,"deletions":17,"binary":false,"changes":22,"status":"modified"}]}