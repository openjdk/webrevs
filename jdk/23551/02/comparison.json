{"files":[{"patch":"@@ -1107,1 +1107,1 @@\n-  return CAST_FROM_FN_PTR(address, Runtime1::is_instance_of);\n+  return Runtime1::entry_for(C1StubId::is_instance_of_id);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRGenerator_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -928,0 +928,46 @@\n+    case C1StubId::is_instance_of_id:\n+      {\n+        \/\/ Mirror: x10\n+        \/\/ Object: x11\n+        \/\/ Temps: x13, x14, x15, x16, x17\n+        \/\/ Result: x10\n+\n+        \/\/ Get the Klass* into x16\n+        Register klass = x16, obj = x11, result = x10;\n+        __ ld(klass, Address(x10, java_lang_Class::klass_offset()));\n+\n+        Label fail, is_secondary, success;\n+\n+        __ beqz(klass, fail); \/\/ Klass is null\n+        __ beqz(obj, fail); \/\/ obj is null\n+\n+        __ lwu(x13, Address(klass, in_bytes(Klass::super_check_offset_offset())));\n+        __ mv(x17, in_bytes(Klass::secondary_super_cache_offset()));\n+        __ beq(x13, x17, is_secondary); \/\/ Klass is a secondary superclass\n+\n+        \/\/ Klass is a concrete class\n+        __ load_klass(x15, obj);\n+        __ add(x17, x15, x13);\n+        __ ld(x17, Address(x17));\n+        __ beq(klass, x17, success);\n+        __ mv(result, 0);\n+        __ ret();\n+\n+        __ bind(is_secondary);\n+        __ load_klass(obj, obj);\n+\n+        \/\/ This is necessary because I am never in my own secondary_super list.\n+        __ beq(obj, klass, success);\n+\n+        __ lookup_secondary_supers_table_var(obj, klass, result, x13, x14, x15, x17, &success);\n+\n+        __ bind(fail);\n+        __ mv(result, 0);\n+        __ ret();\n+\n+        __ bind(success);\n+        __ mv(result, 1);\n+        __ ret();\n+      }\n+      break;\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c1_Runtime1_riscv.cpp","additions":46,"deletions":0,"binary":false,"changes":46,"status":"modified"}]}