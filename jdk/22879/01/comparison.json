{"files":[{"patch":"@@ -34,1 +34,1 @@\n-  \/\/ RiscV loads a 64-bit immediate in up to four separate steps, splitting it into four different sections\n+  \/\/ RISC-V loads a 64-bit immediate in up to four separate steps, splitting it into four different sections\n@@ -54,5 +54,0 @@\n-  \/\/ Failing that, attempt to reserve for base=zero shift>0\n-  if (result == nullptr && optimize_for_zero_base) {\n-    result = reserve_address_space_for_zerobased_encoding(size, aslr);\n-  }\n-\n","filename":"src\/hotspot\/cpu\/riscv\/compressedKlass_riscv.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -88,9 +88,2 @@\n-            if (CDS) {\n-                output.shouldNotContain(tryReserveForZeroBased);\n-                \/\/ bits 32..44\n-                output.shouldContain(\"reserve_between (range [0x0000000100000000-0x0000100000000000)\");\n-            } else {\n-                output.shouldContain(tryReserveForZeroBased);\n-                \/\/ bits 32..44, but not lower than zero-based limit\n-                output.shouldContain(\"reserve_between (range [0x0000000800000000-0x0000100000000000)\");\n-            }\n+            \/\/ bits 32..44\n+            output.shouldContain(\"reserve_between (range [0x0000000100000000-0x0000100000000000)\");\n","filename":"test\/hotspot\/jtreg\/runtime\/CompressedOops\/CompressedCPUSpecificClassSpaceReservation.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"}]}