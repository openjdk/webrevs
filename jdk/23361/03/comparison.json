{"files":[{"patch":"@@ -325,0 +325,7 @@\n+    } else if (CDSConfig::is_dumping_aot_linked_classes()) {\n+      \/\/ Most loaded classes should have been speculatively linked by MetaspaceShared::link_class_for_cds().\n+      \/\/ However, we do not speculatively link old classes, as they are not recorded by\n+      \/\/ SystemDictionaryShared::record_linking_constraint(). As a result, such an unlinked\n+      \/\/ class may fail to verify in AOTLinkedClassBulkLoader::init_required_classes_for_loader(),\n+      \/\/ causing the JVM to fail at bootstrap.\n+      return warn_excluded(k, \"Unlinked class not supported by AOTClassLinking\");\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -521,0 +521,1 @@\n+ -runtime\/cds\/appcds\/customLoader\/CustomClassListDump.java \\\n@@ -522,0 +523,1 @@\n+ -runtime\/cds\/appcds\/customLoader\/OldClassAndInf.java \\\n@@ -527,0 +529,2 @@\n+ -runtime\/cds\/appcds\/dynamicArchive\/LambdaCustomLoader.java \\\n+ -runtime\/cds\/appcds\/dynamicArchive\/LambdaForOldInfInBaseArchive.java \\\n@@ -529,0 +533,3 @@\n+ -runtime\/cds\/appcds\/dynamicArchive\/OldClassAndInf.java \\\n+ -runtime\/cds\/appcds\/dynamicArchive\/OldClassInBaseArchive.java \\\n+ -runtime\/cds\/appcds\/dynamicArchive\/OldClassVerifierTrouble.java \\\n@@ -548,0 +555,7 @@\n+ -runtime\/cds\/appcds\/NestHostOldInf.java \\\n+ -runtime\/cds\/appcds\/OldClassTest.java \\\n+ -runtime\/cds\/appcds\/OldClassWithjsr.java \\\n+ -runtime\/cds\/appcds\/OldInfExtendsInfDefMeth.java \\\n+ -runtime\/cds\/appcds\/OldSuperClass.java \\\n+ -runtime\/cds\/appcds\/OldSuperInfIndirect.java \\\n+ -runtime\/cds\/appcds\/OldSuperInf.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+super public class BadOldClassA\n+    version 49:0\n+{\n+\n+\n+public Method \"<init>\":\"()V\"\n+    stack 1 locals 1\n+{\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+}\n+\n+    \/*\n+     * The following method tries to return an Object as a String.\n+     * Verifier should fail.\n+     *\/\n+public Method doit:\"()Ljava\/lang\/String;\"\n+    stack 2 locals 1\n+{\n+        new              class java\/lang\/Object;\n+        dup;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        astore_0;\n+        aload_0;\n+        areturn;   \/\/ tries to return an Object as a String\n+}\n+\n+} \/\/ end Class BadOldClassA\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/BadOldClassA.jasm","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+super public class BadOldClassB\n+    version 49:0\n+{\n+\n+\n+public Method \"<init>\":\"()V\"\n+    stack 1 locals 1\n+{\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+}\n+\n+    \/*\n+     * The following method tries to return an Object as a String.\n+     * Verifier should fail.\n+     *\/\n+public Method doit:\"()Ljava\/lang\/String;\"\n+    stack 2 locals 1\n+{\n+        new              class java\/lang\/Object;\n+        dup;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        astore_0;\n+        aload_0;\n+        areturn;   \/\/ tries to return an Object as a String\n+}\n+\n+} \/\/ end Class BadOldClassB\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/BadOldClassB.jasm","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n- * @build InitiatingLoaderTester\n+ * @build InitiatingLoaderTester BadOldClassA BadOldClassB\n@@ -38,0 +38,1 @@\n+ *                 BadOldClassA BadOldClassB\n@@ -47,1 +48,1 @@\n- * @build InitiatingLoaderTester\n+ * @build InitiatingLoaderTester BadOldClassA BadOldClassB\n@@ -50,0 +51,1 @@\n+ *                 BadOldClassA BadOldClassB\n@@ -132,0 +134,1 @@\n+        checkOldClasses();\n@@ -232,0 +235,23 @@\n+\n+    static void checkOldClasses() throws Exception {\n+        \/\/ Resolve BadOldClassA from the constant pool without linking it.\n+        \/\/ implNote: BadOldClassA will be excluded, so any resolved refereces\n+        \/\/ to BadOldClassA should be removed from the archived constant pool.\n+        Class c = BadOldClassA.class;\n+        Object n = new Object();\n+        if (c.isInstance(n)) { \/\/ Note that type-testing BadOldClassA here neither links nor initializes it.\n+            throw new RuntimeException(\"Must not succeed\");\n+        }\n+\n+        try {\n+            \/\/ In dynamic dump, the VM loads BadOldClassB and then attempts to\n+            \/\/ link it. This will leave BadOldClassB in a \"failed verification\" state.\n+            \/\/ All refernces to BadOldClassB from the CP should be purged from the CDS\n+            \/\/ archive.\n+            c = BadOldClassB.class;\n+            c.newInstance();\n+            throw new RuntimeException(\"Must not succeed\");\n+        } catch (VerifyError e) {\n+            System.out.println(\"Caught VerifyError for BadOldClassB: \" + e);\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/BulkLoaderTest.java","additions":29,"deletions":3,"binary":false,"changes":32,"status":"modified"}]}