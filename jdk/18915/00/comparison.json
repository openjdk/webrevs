{"files":[{"patch":"@@ -41,1 +41,1 @@\n-HSDIS_LINK_TYPE := C\n+HSDIS_LANG := C\n@@ -60,1 +60,1 @@\n-  HSDIS_LINK_TYPE := C++\n+  HSDIS_LANG := C++\n@@ -77,2 +77,3 @@\n-    # On windows, we need to \"fake\" a completely different toolchain using gcc\n-    # instead of the normal microsoft toolchain. This is quite hacky...\n+    ifeq ($(TOOLCHAIN_TYPE), microsoft)\n+      # On windows, we need to \"fake\" a completely different toolchain using gcc\n+      # instead of the normal microsoft toolchain. This is quite hacky...\n@@ -80,1 +81,1 @@\n-    MINGW_BASE := x86_64-w64-mingw32\n+      MINGW_BASE := x86_64-w64-mingw32\n@@ -82,4 +83,1 @@\n-    MINGW_SYSROOT = $(shell $(MINGW_BASE)-gcc -print-sysroot)\n-    ifeq ($(wildcard $(MINGW_SYSROOT)), )\n-      # Use fallback path\n-      MINGW_SYSROOT := \/usr\/$(MINGW_BASE)\n+      MINGW_SYSROOT = $(shell $(MINGW_BASE)-gcc -print-sysroot)\n@@ -87,1 +85,5 @@\n-        $(error mingw sysroot not found)\n+        # Use fallback path\n+        MINGW_SYSROOT := \/usr\/$(MINGW_BASE)\n+        ifeq ($(wildcard $(MINGW_SYSROOT)), )\n+          $(error mingw sysroot not found)\n+        endif\n@@ -89,1 +91,0 @@\n-    endif\n@@ -91,5 +92,5 @@\n-    BUILD_HSDIS_CC := $(MINGW_BASE)-gcc\n-    BUILD_HSDIS_LD := $(MINGW_BASE)-ld\n-    BUILD_HSDIS_OBJCOPY := $(MINGW_BASE)-objcopy\n-    BUILD_HSDIS_SYSROOT_CFLAGS := --sysroot=$(MINGW_SYSROOT)\n-    BUILD_HSDIS_SYSROOT_LDFLAGS := --sysroot=$(MINGW_SYSROOT)\n+      BUILD_HSDIS_CC := $(MINGW_BASE)-gcc\n+      BUILD_HSDIS_LD := $(MINGW_BASE)-ld\n+      BUILD_HSDIS_OBJCOPY := $(MINGW_BASE)-objcopy\n+      BUILD_HSDIS_SYSROOT_CFLAGS := --sysroot=$(MINGW_SYSROOT)\n+      BUILD_HSDIS_SYSROOT_LDFLAGS := --sysroot=$(MINGW_SYSROOT)\n@@ -97,4 +98,1 @@\n-    MINGW_SYSROOT_LIB_PATH := $(MINGW_SYSROOT)\/mingw\/lib\n-    ifeq ($(wildcard $(MINGW_SYSROOT_LIB_PATH)), )\n-      # Try without mingw\n-      MINGW_SYSROOT_LIB_PATH := $(MINGW_SYSROOT)\/lib\n+      MINGW_SYSROOT_LIB_PATH := $(MINGW_SYSROOT)\/mingw\/lib\n@@ -102,1 +100,5 @@\n-        $(error mingw sysroot lib path not found)\n+        # Try without mingw\n+        MINGW_SYSROOT_LIB_PATH := $(MINGW_SYSROOT)\/lib\n+        ifeq ($(wildcard $(MINGW_SYSROOT_LIB_PATH)), )\n+          $(error mingw sysroot lib path not found)\n+        endif\n@@ -104,1 +106,0 @@\n-    endif\n@@ -106,6 +107,2 @@\n-    MINGW_VERSION = $(shell $(MINGW_BASE)-gcc -v 2>&1 | $(GREP) \"gcc version\" | $(CUT) -d \" \" -f 3)\n-    MINGW_GCC_LIB_PATH := \/usr\/lib\/gcc\/$(MINGW_BASE)\/$(MINGW_VERSION)\n-    ifeq ($(wildcard $(MINGW_GCC_LIB_PATH)), )\n-      # Try using only major version number\n-      MINGW_VERSION_MAJOR := $(firstword $(subst ., , $(MINGW_VERSION)))\n-      MINGW_GCC_LIB_PATH := \/usr\/lib\/gcc\/$(MINGW_BASE)\/$(MINGW_VERSION_MAJOR)\n+      MINGW_VERSION = $(shell $(MINGW_BASE)-gcc -v 2>&1 | $(GREP) \"gcc version\" | $(CUT) -d \" \" -f 3)\n+      MINGW_GCC_LIB_PATH := \/usr\/lib\/gcc\/$(MINGW_BASE)\/$(MINGW_VERSION)\n@@ -113,1 +110,6 @@\n-        $(error mingw gcc lib path not found)\n+        # Try using only major version number\n+        MINGW_VERSION_MAJOR := $(firstword $(subst ., , $(MINGW_VERSION)))\n+        MINGW_GCC_LIB_PATH := \/usr\/lib\/gcc\/$(MINGW_BASE)\/$(MINGW_VERSION_MAJOR)\n+        ifeq ($(wildcard $(MINGW_GCC_LIB_PATH)), )\n+          $(error mingw gcc lib path not found)\n+        endif\n@@ -115,1 +117,0 @@\n-    endif\n@@ -117,17 +118,18 @@\n-    TOOLCHAIN_TYPE := gcc\n-    OPENJDK_TARGET_OS := linux\n-    OPENJDK_TARGET_OS_TYPE := unix\n-    CC_OUT_OPTION := -o$(SPACE)\n-    GENDEPS_FLAGS := -MMD -MF\n-    CFLAGS_DEBUG_SYMBOLS := -g\n-    DISABLED_WARNINGS :=\n-    DISABLE_WARNING_PREFIX := -Wno-\n-    CFLAGS_WARNINGS_ARE_ERRORS := -Werror\n-    SHARED_LIBRARY_FLAGS := -shared\n-\n-    HSDIS_TOOLCHAIN_DEFAULT_CFLAGS := false\n-    HSDIS_TOOLCHAIN_DEFAULT_LDFLAGS := false\n-    HSDIS_LDFLAGS += -L$(MINGW_GCC_LIB_PATH) -L$(MINGW_SYSROOT_LIB_PATH)\n-    MINGW_DLLCRT := $(MINGW_SYSROOT_LIB_PATH)\/dllcrt2.o\n-    HSDIS_TOOLCHAIN_LIBS := $(MINGW_DLLCRT) -lmingw32 -lgcc -lgcc_eh -lmoldname \\\n-        -lmingwex -lmsvcrt -lpthread -ladvapi32 -lshell32 -luser32 -lkernel32\n+      TOOLCHAIN_TYPE := gcc\n+      OPENJDK_TARGET_OS := linux\n+      OPENJDK_TARGET_OS_TYPE := unix\n+      CC_OUT_OPTION := -o$(SPACE)\n+      GENDEPS_FLAGS := -MMD -MF\n+      CFLAGS_DEBUG_SYMBOLS := -g\n+      DISABLED_WARNINGS :=\n+      DISABLE_WARNING_PREFIX := -Wno-\n+      CFLAGS_WARNINGS_ARE_ERRORS := -Werror\n+      SHARED_LIBRARY_FLAGS := -shared\n+\n+      HSDIS_TOOLCHAIN_DEFAULT_CFLAGS := false\n+      HSDIS_TOOLCHAIN_DEFAULT_LDFLAGS := false\n+      HSDIS_LDFLAGS += -L$(MINGW_GCC_LIB_PATH) -L$(MINGW_SYSROOT_LIB_PATH)\n+      MINGW_DLLCRT := $(MINGW_SYSROOT_LIB_PATH)\/dllcrt2.o\n+      HSDIS_TOOLCHAIN_LIBS := $(MINGW_DLLCRT) -lmingw32 -lgcc -lgcc_eh -lmoldname \\\n+          -lmingwex -lmsvcrt -lpthread -ladvapi32 -lshell32 -luser32 -lkernel32\n+    endif\n@@ -145,1 +147,1 @@\n-    LINK_TYPE := $(HSDIS_LINK_TYPE), \\\n+    LANG := $(HSDIS_LANG), \\\n","filename":"make\/Hsdis.gmk","additions":50,"deletions":48,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -168,1 +168,1 @@\n-  UTIL_LOOKUP_PROGS(CCACHE, ccache)\n+  UTIL_LOOKUP_PROGS(CCACHE, ccache, , NOFIXPATH)\n","filename":"make\/autoconf\/build-performance.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,8 +38,18 @@\n-    # Default works for linux, might work on other platforms as well.\n-    SHARED_LIBRARY_FLAGS='-shared'\n-    # --disable-new-dtags forces use of RPATH instead of RUNPATH for rpaths.\n-    # This protects internal library dependencies within the JDK from being\n-    # overridden using LD_LIBRARY_PATH. See JDK-8326891 for more information.\n-    SET_EXECUTABLE_ORIGIN='-Wl,-rpath,\\$$ORIGIN[$]1 -Wl,--disable-new-dtags'\n-    SET_SHARED_LIBRARY_ORIGIN=\"-Wl,-z,origin $SET_EXECUTABLE_ORIGIN\"\n-    SET_SHARED_LIBRARY_NAME='-Wl,-soname=[$]1'\n+    if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n+      # Linking is different on Windows\n+      SHARED_LIBRARY_FLAGS='-shared'\n+      SET_EXECUTABLE_ORIGIN=''\n+      SET_SHARED_LIBRARY_ORIGIN=\"\"\n+      SET_SHARED_LIBRARY_NAME='-Wl,-soname=[$]1'\n+\n+    else\n+      # Default works for linux, might work on other platforms as well.\n+      SHARED_LIBRARY_FLAGS='-shared'\n+      # --disable-new-dtags forces use of RPATH instead of RUNPATH for rpaths.\n+      # This protects internal library dependencies within the JDK from being\n+      # overridden using LD_LIBRARY_PATH. See JDK-8326891 for more information.\n+      SET_EXECUTABLE_ORIGIN='-Wl,-rpath,\\$$ORIGIN[$]1 -Wl,--disable-new-dtags'\n+      SET_SHARED_LIBRARY_ORIGIN=\"-Wl,-z,origin $SET_EXECUTABLE_ORIGIN\"\n+      SET_SHARED_LIBRARY_NAME='-Wl,-soname=[$]1'\n+\n+    fi\n@@ -127,1 +137,7 @@\n-    CFLAGS_DEBUG_SYMBOLS=\"-g -gdwarf-4\"\n+    if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n+      GCODEVIEW_OR_GDWARF_FLAGS=\"-gcodeview\"\n+    elif test \"x$OPENJDK_TARGET_OS\" = xlinux; then\n+      GCODEVIEW_OR_GDWARF_FLAGS=\"-g -gdwarf-4\"\n+    fi\n+\n+    CFLAGS_DEBUG_SYMBOLS=\"${GCODEVIEW_OR_GDWARF_FLAGS}\"\n@@ -456,1 +472,1 @@\n-    CFLAGS_OS_DEF_JVM=\"-DLINUX -D_FILE_OFFSET_BITS=64\"\n+    CFLAGS_OS_DEF_JVM=\"-DLINUX -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE -D_REENTRANT\"\n@@ -467,1 +483,6 @@\n-    CFLAGS_OS_DEF_JVM=\"-D_WINDOWS -DWIN32 -D_JNI_IMPLEMENTATION_\"\n+    CFLAGS_OS_DEF_JVM=\"-D_WINDOWS -DWIN32 -D_JNI_IMPLEMENTATION_ \\\n+        -DNOMINMAX -DWIN32_LEAN_AND_MEAN -D_WIN32_WINNT=0x0602\"\n+    # Access APIs for Windows 8 and above\n+    # see https:\/\/docs.microsoft.com\/en-us\/cpp\/porting\/modifying-winver-and-win32-winnt?view=msvc-170\n+    CFLAGS_OS_DEF_JDK=\"-DWIN32_LEAN_AND_MEAN -D_WIN32_WINNT=0x0602 \\\n+        -DWIN32 -DIAL\"\n@@ -500,3 +521,1 @@\n-  if test \"x$TOOLCHAIN_TYPE\" = xgcc; then\n-    ALWAYS_DEFINES_JVM=\"-D_GNU_SOURCE -D_REENTRANT\"\n-  elif test \"x$TOOLCHAIN_TYPE\" = xclang; then\n+  if test \"x$TOOLCHAIN_TYPE\" = xclang; then\n@@ -505,6 +524,2 @@\n-    # Access APIs for Windows 8 and above\n-    # see https:\/\/docs.microsoft.com\/en-us\/cpp\/porting\/modifying-winver-and-win32-winnt?view=msvc-170\n-    ALWAYS_DEFINES_JDK=\"-DWIN32_LEAN_AND_MEAN -D_WIN32_WINNT=0x0602 \\\n-        -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_DEPRECATE -DWIN32 -DIAL\"\n-    ALWAYS_DEFINES_JVM=\"-DNOMINMAX -DWIN32_LEAN_AND_MEAN -D_WIN32_WINNT=0x0602 \\\n-        -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_DEPRECATE\"\n+    ALWAYS_DEFINES_JVM=\"-D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_DEPRECATE\"\n+    ALWAYS_DEFINES_JDK=\"-D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_DEPRECATE\"\n@@ -529,1 +544,5 @@\n-  if test \"x$TOOLCHAIN_TYPE\" = xgcc; then\n+  if test \"x$TOOLCHAIN_TYPE\" = xgcc && test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n+    # gcc compiler on Windows needs -fno-stack-protector\n+    TOOLCHAIN_CFLAGS_JVM=\"$TOOLCHAIN_CFLAGS_JVM -fno-stack-protector\"\n+    TOOLCHAIN_CFLAGS_JDK=\"-pipe -fno-stack-protector\"\n+  elif test \"x$TOOLCHAIN_TYPE\" = xgcc && test \"x$OPENJDK_TARGET_OS\" = xlinux; then\n@@ -532,1 +551,6 @@\n-    # reduce lib size on linux in link step, this needs also special compile flags\n+  fi\n+\n+  if test \"x$TOOLCHAIN_TYPE\" = xgcc; then\n+    TOOLCHAIN_CFLAGS_JVM=\"$TOOLCHAIN_CFLAGS_JVM\"\n+    TOOLCHAIN_CFLAGS_JDK=\"$TOOLCHAIN_CFLAGS_JDK\"\n+    # reduce lib size for gcc in link step, this needs also special compile flags\n@@ -636,0 +660,5 @@\n+  if test \"x$TOOLCHAIN_TYPE\" = xgcc && test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n+    PICFLAG=\"\"\n+    PIEFLAG=\"\"\n+  fi\n+\n","filename":"make\/autoconf\/flags-cflags.m4","additions":51,"deletions":22,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -49,6 +49,10 @@\n-    # Add -z,defs, to forbid undefined symbols in object files.\n-    # add -z,relro (mark relocations read only) for all libs\n-    # add -z,now (\"full relro\" - more of the Global Offset Table GOT is marked read only)\n-    # add --no-as-needed to disable default --as-needed link flag on some GCC toolchains\n-    BASIC_LDFLAGS=\"-Wl,-z,defs -Wl,-z,relro -Wl,-z,now -Wl,--no-as-needed -Wl,--exclude-libs,ALL\"\n-    # Linux : remove unused code+data in link step\n+    if test \"x$OPENJDK_TARGET_OS\" = xlinux; then\n+      # Add -z,defs, to forbid undefined symbols in object files.\n+      # add -z,relro (mark relocations read only) for all libs\n+      # add -z,now (\"full relro\" - more of the Global Offset Table GOT is marked read only)\n+      # add --no-as-needed to disable default --as-needed link flag on some GCC toolchains\n+      BASIC_LDFLAGS=\"-Wl,-z,defs -Wl,-z,relro -Wl,-z,now -Wl,--no-as-needed -Wl,--exclude-libs,ALL\"\n+    elif test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n+      BASIC_LDFLAGS=\"-Wl,--no-undefined -fno-stack-protector -Wl,--exclude-libs,ALL\"\n+    fi\n+    # gcc : remove unused code+data in link step\n@@ -63,1 +67,5 @@\n-    BASIC_LDFLAGS_JVM_ONLY=\"\"\n+    if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n+      BASIC_LDFLAGS_JVM_ONLY=\"-Wl,--exclude-all-symbols -Wl,--subsystem,windows\"\n+    else\n+      BASIC_LDFLAGS_JVM_ONLY=\"\"\n+    fi\n@@ -89,1 +97,2 @@\n-      && test \"x$OPENJDK_TARGET_OS\" != xaix; then\n+      && test \"x$OPENJDK_TARGET_OS\" != xaix \\\n+      && test \"x$OPENJDK_TARGET_OS\" != xwindows; then\n@@ -121,5 +130,7 @@\n-    EXECUTABLE_LDFLAGS=\"$EXECUTABLE_LDFLAGS -Wl,--allow-shlib-undefined\"\n-    # Enabling pie on 32 bit builds prevents the JVM from allocating a continuous\n-    # java heap.\n-    if test \"x$OPENJDK_TARGET_CPU_BITS\" != \"x32\"; then\n-      EXECUTABLE_LDFLAGS=\"$EXECUTABLE_LDFLAGS -pie\"\n+    if test \"x$OPENJDK_TARGET_OS\" != xwindows; then\n+      EXECUTABLE_LDFLAGS=\"$EXECUTABLE_LDFLAGS -Wl,--allow-shlib-undefined\"\n+      # Enabling pie on 32 bit builds prevents the JVM from allocating a continuous\n+      # java heap.\n+      if test \"x$OPENJDK_TARGET_CPU_BITS\" != \"x32\"; then\n+        EXECUTABLE_LDFLAGS=\"$EXECUTABLE_LDFLAGS -pie\"\n+      fi\n@@ -168,6 +179,10 @@\n-    # MIPS ABI does not support GNU hash style\n-    if test \"x${OPENJDK_$1_CPU}\" = xmips ||\n-       test \"x${OPENJDK_$1_CPU}\" = xmipsel ||\n-       test \"x${OPENJDK_$1_CPU}\" = xmips64 ||\n-       test \"x${OPENJDK_$1_CPU}\" = xmips64el; then\n-      $1_CPU_LDFLAGS=\"${$1_CPU_LDFLAGS} -Wl,--hash-style=sysv\"\n+    if test \"x$OPENJDK_TARGET_OS\" != xwindows; then\n+      # MIPS ABI does not support GNU hash style\n+      if test \"x${OPENJDK_$1_CPU}\" = xmips ||\n+         test \"x${OPENJDK_$1_CPU}\" = xmipsel ||\n+         test \"x${OPENJDK_$1_CPU}\" = xmips64 ||\n+         test \"x${OPENJDK_$1_CPU}\" = xmips64el; then\n+        $1_CPU_LDFLAGS=\"${$1_CPU_LDFLAGS} -Wl,--hash-style=sysv\"\n+      else\n+        $1_CPU_LDFLAGS=\"${$1_CPU_LDFLAGS} -Wl,--hash-style=gnu\"\n+      fi\n@@ -175,1 +190,5 @@\n-      $1_CPU_LDFLAGS=\"${$1_CPU_LDFLAGS} -Wl,--hash-style=gnu\"\n+      if test \"x${OPENJDK_$1_CPU_BITS}\" = \"x32\"; then\n+        $1_CPU_EXECUTABLE_LDFLAGS=\"-Wl,--stack=327680\"\n+      elif test \"x${OPENJDK_$1_CPU_BITS}\" = \"x64\"; then\n+        $1_CPU_EXECUTABLE_LDFLAGS=\"-Wl,--stack=1048576\"\n+      fi\n","filename":"make\/autoconf\/flags-ldflags.m4","additions":39,"deletions":20,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -96,0 +96,4 @@\n+  elif test \"x$TOOLCHAIN_TYPE\" = xgcc && test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n+    if test \"x$DEBUG_LEVEL\" = xrelease; then\n+      RCFLAGS=\"$RCFLAGS -DNDEBUG\"\n+    fi\n","filename":"make\/autoconf\/flags-other.m4","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -259,1 +259,1 @@\n-  if test \"x$BINUTILS_INSTALL_DIR\" = xsystem; then\n+  if test \"x$BINUTILS_INSTALL_DIR\" = xsystem && test \"x$OPENJDK_TARGET_OS\" = xlinux; then\n@@ -267,0 +267,3 @@\n+  elif test \"x$BINUTILS_INSTALL_DIR\" = xsystem && test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n+    HSDIS_LIBS=\"-lbfd -lopcodes -l:libz.a -liberty -lsframe -l:libintl.a -l:libiconv.a -l:libzstd.a\"\n+    HSDIS_CFLAGS=\"-DLIBARCH_$OPENJDK_TARGET_CPU_LEGACY_LIB\"\n@@ -307,1 +310,1 @@\n-      if test \"x$OPENJDK_TARGET_OS\" != xlinux; then\n+      if test \"x$OPENJDK_TARGET_OS\" != xlinux && test \"x$OPENJDK_TARGET_OS\" != xwindows; then\n@@ -309,1 +312,3 @@\n-        AC_MSG_ERROR([binutils on system is supported for Linux only])\n+        AC_MSG_ERROR([binutils on system is supported for Linux and Windows only])\n+      elif test \"x$binutils_system_error\" = x && test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n+        AC_MSG_RESULT([system])\n","filename":"make\/autoconf\/lib-hsdis.m4","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -79,0 +79,32 @@\n+  elif test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n+    if test \"x$TOOLCHAIN_TYPE\" = xgcc; then\n+      # Test if stdc++ can be linked statically.\n+      AC_MSG_CHECKING([if static link of stdc++ is possible])\n+      STATIC_STDCXX_FLAGS=\"-static-libstdc++ -static-libgcc\"\n+      AC_LANG_PUSH(C++)\n+      OLD_LIBS=\"$LIBS\"\n+      LIBS=\"$STATIC_STDCXX_FLAGS\"\n+      AC_LINK_IFELSE([AC_LANG_PROGRAM([], [return 0;])],\n+          [has_static_libstdcxx=yes],\n+          [has_static_libstdcxx=no])\n+      LIBS=\"$OLD_LIBS\"\n+      AC_LANG_POP(C++)\n+      AC_MSG_RESULT([$has_static_libstdcxx])\n+      if test \"x$with_stdc__lib\" = xstatic && test \"x$has_static_libstdcxx\" = xno; then\n+        AC_MSG_ERROR([Static linking of libstdc++ was not possible!])\n+      fi\n+      # If dynamic was requested, it's available since it would fail above otherwise.\n+      # If dynamic wasn't requested, go with static unless it isn't available.\n+      AC_MSG_CHECKING([how to link with libstdc++])\n+      if test \"x$with_stdc__lib\" = xdynamic || test \"x$has_static_libstdcxx\" = xno ; then\n+        AC_MSG_RESULT([dynamic])\n+      else\n+        LIBCXX=\"$LIBCXX $STATIC_STDCXX_FLAGS\"\n+        JVM_LDFLAGS=\"$JVM_LDFLAGS $STATIC_STDCXX_FLAGS\"\n+        ADLC_LDFLAGS=\"$ADLC_LDFLAGS $STATIC_STDCXX_FLAGS\"\n+        # Ideally, we should test stdc++ for the BUILD toolchain separately. For now\n+        # just use the same setting as for the TARGET toolchain.\n+        OPENJDK_BUILD_JVM_LDFLAGS=\"$OPENJDK_BUILD_JVM_LDFLAGS $STATIC_STDCXX_FLAGS\"\n+        AC_MSG_RESULT([static])\n+      fi\n+    fi\n@@ -85,1 +117,3 @@\n-    TOOLCHAIN_SETUP_VS_RUNTIME_DLLS\n+    if test \"x$TOOLCHAIN_TYPE\" = xmicrosoft; then\n+      TOOLCHAIN_SETUP_VS_RUNTIME_DLLS\n+    fi\n","filename":"make\/autoconf\/lib-std.m4","additions":35,"deletions":1,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -160,3 +160,8 @@\n-    BASIC_JVM_LIBS=\"$BASIC_JVM_LIBS kernel32.lib user32.lib gdi32.lib winspool.lib \\\n-        comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib powrprof.lib uuid.lib \\\n-        ws2_32.lib winmm.lib version.lib psapi.lib\"\n+    # Only Visual C++ requires static import libraries\n+    if test \"x$TOOLCHAIN_TYPE\" = xmicrosoft; then\n+      BASIC_JVM_LIBS=\"$BASIC_JVM_LIBS kernel32.lib user32.lib gdi32.lib winspool.lib \\\n+          comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib powrprof.lib uuid.lib \\\n+          ws2_32.lib winmm.lib version.lib psapi.lib\"\n+    elif test \"x$TOOLCHAIN_TYPE\" = xgcc; then\n+      BASIC_JVM_LIBS=\"$BASIC_JVM_LIBS -lpowrprof -lws2_32 -lwinmm -lversion -lpsapi\"\n+    fi\n","filename":"make\/autoconf\/libraries.m4","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-VALID_TOOLCHAINS_windows=\"microsoft\"\n+VALID_TOOLCHAINS_windows=\"microsoft gcc\"\n@@ -177,1 +177,1 @@\n-    OBJ_SUFFIX='.obj'\n+    OBJ_SUFFIX='.o'\n@@ -319,1 +319,1 @@\n-  # some siutations in later configure checks.\n+  # some situations in later configure checks.\n@@ -443,1 +443,1 @@\n-      UTIL_LOOKUP_PROGS(POTENTIAL_$1, [$]$1)\n+      UTIL_LOOKUP_PROGS(POTENTIAL_$1, [$]$1, , NOFIXPATH)\n@@ -465,1 +465,1 @@\n-    UTIL_LOOKUP_TOOLCHAIN_PROGS(POTENTIAL_$1, $SEARCH_LIST)\n+    UTIL_LOOKUP_TOOLCHAIN_PROGS(POTENTIAL_$1, $SEARCH_LIST, , NOFIXPATH)\n@@ -625,3 +625,9 @@\n-    # All other toolchains use the compiler to link.\n-    LD=\"$CC\"\n-    LDCXX=\"$CXX\"\n+    if test \"x$TOOLCHAIN_TYPE\" = xgcc && test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n+      # Special case needed here if we're on Windows as the gcc linker needs mixed paths\n+      LD=\"$FIXPATH_BASE -m exec $CC\"\n+      LDCXX=\"$FIXPATH_BASE -m exec $CXX\"\n+    else\n+      # All other toolchains use the compiler to link.\n+      LD=\"$CC\"\n+      LDCXX=\"$CXX\"\n+    fi\n@@ -718,0 +724,8 @@\n+  if test \"x$TOOLCHAIN_TYPE\" = xgcc && test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n+    UTIL_LOOKUP_TOOLCHAIN_PROGS(STRIP, strip, , NOFIXPATH)\n+    UTIL_LOOKUP_TOOLCHAIN_PROGS(NM, nm gcc-nm, , NOFIXPATH)\n+    # Setup the resource compiler\n+    UTIL_LOOKUP_TOOLCHAIN_PROGS(RC, windres, , NOFIXPATH)\n+    UTIL_LOOKUP_TOOLCHAIN_PROGS(OBJCOPY, gobjcopy objcopy, , NOFIXPATH)\n+  fi\n+\n@@ -733,1 +747,1 @@\n-  UTIL_LOOKUP_TOOLCHAIN_PROGS(OBJDUMP, gobjdump objdump)\n+  UTIL_LOOKUP_TOOLCHAIN_PROGS(OBJDUMP, gobjdump objdump, , NOFIXPATH)\n","filename":"make\/autoconf\/toolchain.m4","additions":23,"deletions":9,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -445,0 +445,1 @@\n+# $4: set to NOFIXPATH to skip prefixing FIXPATH, even if needed on platform\n@@ -448,1 +449,1 @@\n-    UTIL_LOOKUP_PROGS($1, $2, $3)\n+    UTIL_LOOKUP_PROGS($1, $2, $3, $4)\n@@ -451,1 +452,1 @@\n-    UTIL_LOOKUP_PROGS($1, $prefixed_names, $3)\n+    UTIL_LOOKUP_PROGS($1, $prefixed_names, $3, $4)\n","filename":"make\/autoconf\/util_paths.m4","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-      ifeq ($$(call isTargetOs, windows), true)\n+      ifeq ($(TOOLCHAIN_TYPE), microsoft)\n@@ -135,1 +135,1 @@\n-      ifeq ($$(call isTargetOs, windows), true)\n+      ifeq ($(TOOLCHAIN_TYPE), microsoft)\n@@ -152,1 +152,1 @@\n-      ifeq ($$(call isTargetOs, windows), true)\n+      ifeq ($(TOOLCHAIN_TYPE), microsoft)\n@@ -214,1 +214,1 @@\n-    ifeq ($$(call isTargetOs, windows), true)\n+    ifeq ($(TOOLCHAIN_TYPE), microsoft)\n@@ -330,1 +330,1 @@\n-    ifeq ($$($1_LINK_TYPE), C++)\n+    ifeq ($$($1_LANG), C++)\n","filename":"make\/common\/JdkNativeCompilation.gmk","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-#   LINK_TYPE The language to use for the linker, C or C++. Defaults to C.\n+#   LANG The language to use for the linker, C or C++. Defaults to C.\n@@ -318,1 +318,1 @@\n-    ifeq ($$($1_LINK_TYPE), C++)\n+    ifeq ($$($1_LANG), C++)\n@@ -335,1 +335,1 @@\n-    ifeq ($$($1_LINK_TYPE), C++)\n+    ifeq ($$($1_LANG), C++)\n","filename":"make\/common\/NativeCompilation.gmk","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-        LINK_TYPE := $(if $$(filter %.cpp, $$(file)), C++, C), \\\n+        LANG := $(if $$(filter %.cpp, $$(file)), C++, C), \\\n","filename":"make\/common\/TestFilesCompilation.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -190,3 +190,0 @@\n-isCompiler = \\\n-  $(strip $(if $(filter $(TOOLCHAIN_TYPE), $1), true, false))\n-\n","filename":"make\/common\/Utils.gmk","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -326,24 +326,38 @@\n-    $$($1_RES): $$($1_VERSIONINFO_RESOURCE) $$($1_RES_VARDEPS_FILE)\n-\t\t$$(call LogInfo, Compiling resource $$(notdir $$($1_VERSIONINFO_RESOURCE)) (for $$($1_BASENAME)))\n-\t\t$$(call MakeDir, $$(@D) $$($1_OBJECT_DIR))\n-\t\t$$(call ExecuteWithLog, $$@, $$(call MakeCommandRelative, \\\n-\t\t    $$($1_RC) $$($1_RCFLAGS) $$($1_SYSROOT_CFLAGS) $(CC_OUT_OPTION)$$@ \\\n-\t\t    $$($1_VERSIONINFO_RESOURCE) 2>&1 ))\n-                # Windows RC compiler does not support -showIncludes, so we mis-use CL\n-                # for this. Filter out RC specific arguments that are unknown to CL.\n-                # For some unknown reason, in this case CL actually outputs the show\n-                # includes to stderr so need to redirect it to hide the output from the\n-                # main log.\n-\t\t$$(call ExecuteWithLog, $$($1_RES_DEPS_FILE)$(OBJ_SUFFIX), \\\n-\t\t    $$($1_CC) $$(filter-out -l%, $$($1_RCFLAGS)) \\\n-\t\t        $$($1_SYSROOT_CFLAGS) -showIncludes -nologo -TC \\\n-\t\t        $(CC_OUT_OPTION)$$($1_RES_DEPS_FILE)$(OBJ_SUFFIX) -P -Fi$$($1_RES_DEPS_FILE).pp \\\n-\t\t        $$($1_VERSIONINFO_RESOURCE)) 2>&1 \\\n-\t\t    | $(TR) -d '\\r' | $(GREP) -v -e \"^Note: including file:\" \\\n-\t\t        -e \"^$$(notdir $$($1_VERSIONINFO_RESOURCE))$$$$\" || test \"$$$$?\" = \"1\" ; \\\n-\t\t$(ECHO) $$($1_RES): \\\\ > $$($1_RES_DEPS_FILE) ; \\\n-\t\t$(SED) $(WINDOWS_SHOWINCLUDE_SED_PATTERN) $$($1_RES_DEPS_FILE)$(OBJ_SUFFIX).log \\\n-\t\t    >> $$($1_RES_DEPS_FILE) ; \\\n-\t\t$(ECHO) >> $$($1_RES_DEPS_FILE) ;\\\n-\t\t$(SED) $(DEPENDENCY_TARGET_SED_PATTERN) $$($1_RES_DEPS_FILE) \\\n-\t\t    > $$($1_RES_DEPS_TARGETS_FILE)\n+    ifeq ($(TOOLCHAIN_TYPE), gcc)\n+      $$($1_RES): $$($1_VERSIONINFO_RESOURCE) $$($1_RES_VARDEPS_FILE)\n+\t\t  $$(call LogInfo, Compiling resource $$(notdir $$($1_VERSIONINFO_RESOURCE)) (for $$($1_BASENAME)))\n+\t\t  $$(call MakeDir, $$(@D) $$($1_OBJECT_DIR))\n+\t\t  $$(call ExecuteWithLog, $$@, $$(call MakeCommandRelative, \\\n+\t\t      $$($1_RC) $$(addprefix --preprocessor-arg=, $$(GENDEPS_FLAGS) \\\n+\t\t      $$(addsuffix .tmp, $$($1_RES_DEPS_FILE)) -MT $$@) \\\n+\t\t      $$($1_RCFLAGS) $$($1_SYSROOT_CFLAGS) $(CC_OUT_OPTION)$$@ \\\n+\t\t      -O coff $$($1_VERSIONINFO_RESOURCE) 2>&1 ))\n+\t\t  $$(call fix-deps-file, $$($1_RES_DEPS_FILE))\n+\t\t  $(SED) $(DEPENDENCY_TARGET_SED_PATTERN) $$($1_RES_DEPS_FILE) \\\n+\t\t      > $$($1_RES_DEPS_TARGETS_FILE)\n+    else ifeq ($(TOOLCHAIN_TYPE), microsoft)\n+      $$($1_RES): $$($1_VERSIONINFO_RESOURCE) $$($1_RES_VARDEPS_FILE)\n+\t\t  $$(call LogInfo, Compiling resource $$(notdir $$($1_VERSIONINFO_RESOURCE)) (for $$($1_BASENAME)))\n+\t\t  $$(call MakeDir, $$(@D) $$($1_OBJECT_DIR))\n+\t\t  $$(call ExecuteWithLog, $$@, $$(call MakeCommandRelative, \\\n+\t\t      $$($1_RC) $$($1_RCFLAGS) $$($1_SYSROOT_CFLAGS) $(CC_OUT_OPTION)$$@ \\\n+\t\t      $$($1_VERSIONINFO_RESOURCE) 2>&1 ))\n+                  # Windows RC compiler does not support -showIncludes, so we mis-use CL\n+                  # for this. Filter out RC specific arguments that are unknown to CL.\n+                  # For some unknown reason, in this case CL actually outputs the show\n+                  # includes to stderr so need to redirect it to hide the output from the\n+                  # main log.\n+\t\t  $$(call ExecuteWithLog, $$($1_RES_DEPS_FILE)$(OBJ_SUFFIX), \\\n+\t\t      $$($1_CC) $$(filter-out -l%, $$($1_RCFLAGS)) \\\n+\t\t          $$($1_SYSROOT_CFLAGS) -showIncludes -nologo -TC \\\n+\t\t          $(CC_OUT_OPTION)$$($1_RES_DEPS_FILE)$(OBJ_SUFFIX) -P -Fi$$($1_RES_DEPS_FILE).pp \\\n+\t\t          $$($1_VERSIONINFO_RESOURCE)) 2>&1 \\\n+\t\t      | $(TR) -d '\\r' | $(GREP) -v -e \"^Note: including file:\" \\\n+\t\t          -e \"^$$(notdir $$($1_VERSIONINFO_RESOURCE))$$$$\" || test \"$$$$?\" = \"1\" ; \\\n+\t\t  $(ECHO) $$($1_RES): \\\\ > $$($1_RES_DEPS_FILE) ; \\\n+\t\t  $(SED) $(WINDOWS_SHOWINCLUDE_SED_PATTERN) $$($1_RES_DEPS_FILE)$(OBJ_SUFFIX).log \\\n+\t\t      >> $$($1_RES_DEPS_FILE) ; \\\n+\t\t  $(ECHO) >> $$($1_RES_DEPS_FILE) ;\\\n+\t\t  $(SED) $(DEPENDENCY_TARGET_SED_PATTERN) $$($1_RES_DEPS_FILE) \\\n+\t\t      > $$($1_RES_DEPS_TARGETS_FILE)\n+    endif\n","filename":"make\/common\/native\/CompileFile.gmk","additions":38,"deletions":24,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -49,2 +49,6 @@\n-          $1_DEBUGINFO_FILES := $$($1_SYMBOLS_DIR)\/$$($1_BASENAME).pdb \\\n-              $$($1_SYMBOLS_DIR)\/$$($1_BASENAME).map\n+          ifeq ($(TOOLCHAIN_TYPE), gcc)\n+            $1_DEBUGINFO_FILES := $$($1_SYMBOLS_DIR)\/$$($1_BASENAME).pdb\n+          else ifeq ($(TOOLCHAIN_TYPE), microsoft)\n+            $1_DEBUGINFO_FILES := $$($1_SYMBOLS_DIR)\/$$($1_BASENAME).pdb \\\n+                $$($1_SYMBOLS_DIR)\/$$($1_BASENAME).map\n+          endif\n@@ -63,4 +67,8 @@\n-          $1_EXTRA_LDFLAGS += -debug \"-pdb:$$($1_SYMBOLS_DIR)\/$$($1_BASENAME).pdb\" \\\n-              \"-map:$$($1_SYMBOLS_DIR)\/$$($1_BASENAME).map\"\n-          ifeq ($(SHIP_DEBUG_SYMBOLS), public)\n-            $1_EXTRA_LDFLAGS += \"-pdbstripped:$$($1_SYMBOLS_DIR)\/$$($1_BASENAME).stripped.pdb\"\n+          ifeq ($(TOOLCHAIN_TYPE), gcc)\n+            $1_EXTRA_LDFLAGS += -Wl$(COMMA)--pdb=$$($1_SYMBOLS_DIR)\/$$($1_BASENAME).pdb\n+          else ifeq ($(TOOLCHAIN_TYPE), microsoft)\n+            $1_EXTRA_LDFLAGS += -debug \"-pdb:$$($1_SYMBOLS_DIR)\/$$($1_BASENAME).pdb\" \\\n+                \"-map:$$($1_SYMBOLS_DIR)\/$$($1_BASENAME).map\"\n+            ifeq ($(SHIP_DEBUG_SYMBOLS), public)\n+              $1_EXTRA_LDFLAGS += \"-pdbstripped:$$($1_SYMBOLS_DIR)\/$$($1_BASENAME).stripped.pdb\"\n+            endif\n","filename":"make\/common\/native\/DebugSymbols.gmk","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-      $$($1_CFLAGS_$(TOOLCHAIN_TYPE)) \\\n+      $$($1_CFLAGS_$(TOOLCHAIN_TYPE)) $$($1_CFLAGS_$(TOOLCHAIN_TYPE)_$(OPENJDK_TARGET_OS)) \\\n@@ -105,2 +105,3 @@\n-  # Pickup extra OPENJDK_TARGET_OS_TYPE, OPENJDK_TARGET_OS and\/or TOOLCHAIN_TYPE\n-  # dependent variables for CXXFLAGS.\n+  # Pickup extra OPENJDK_TARGET_OS_TYPE, OPENJDK_TARGET_OS and TOOLCHAIN_TYPE dependent\n+  # variables for CXXFLAGS, and additionally the pair dependent TOOLCHAIN_TYPE plus\n+  # OPENJDK_TARGET_OS.\n@@ -108,1 +109,1 @@\n-      $$($1_CXXFLAGS_$(TOOLCHAIN_TYPE))\n+      $$($1_CXXFLAGS_$(TOOLCHAIN_TYPE)) $$($1_CXXFLAGS_$(TOOLCHAIN_TYPE)_$(OPENJDK_TARGET_OS))\n","filename":"make\/common\/native\/Flags.gmk","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -48,2 +48,4 @@\n-    ADLC_CFLAGS := -nologo -EHsc\n-    ADLC_CFLAGS_WARNINGS := -W3 -D_CRT_SECURE_NO_WARNINGS\n+    ifeq ($(TOOLCHAIN_TYPE), microsoft)\n+      ADLC_CFLAGS := -nologo -EHsc\n+      ADLC_CFLAGS_WARNINGS := -W3 -D_CRT_SECURE_NO_WARNINGS\n+    endif\n@@ -78,1 +80,1 @@\n-      LINK_TYPE := C++, \\\n+      LANG := C++, \\\n","filename":"make\/hotspot\/gensrc\/GensrcAdlc.gmk","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    LINK_TYPE := C++, \\\n+    LANG := C++, \\\n@@ -68,1 +68,1 @@\n-    CFLAGS_windows := -EHsc, \\\n+    CFLAGS_microsoft := -EHsc, \\\n@@ -85,1 +85,1 @@\n-    LINK_TYPE := C++, \\\n+    LANG := C++, \\\n@@ -98,1 +98,1 @@\n-    CFLAGS_windows := -EHsc, \\\n+    CFLAGS_microsoft := -EHsc, \\\n@@ -138,1 +138,1 @@\n-    LINK_TYPE := C++, \\\n+    LANG := C++, \\\n","filename":"make\/hotspot\/lib\/CompileGtest.gmk","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -162,1 +162,1 @@\n-    LINK_TYPE := C++, \\\n+    LANG := C++, \\\n","filename":"make\/hotspot\/lib\/CompileJvm.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -172,5 +172,5 @@\n-  ifeq ($(call isCompiler, gcc), true)\n-    JVM_CFLAGS_FEATURES += -flto=auto -fuse-linker-plugin -fno-strict-aliasing -fno-fat-lto-objects\n-    JVM_LDFLAGS_FEATURES += $(CXX_O_FLAG_HIGHEST_JVM) -flto=auto -fuse-linker-plugin -fno-strict-aliasing\n-  else ifeq ($(call isCompiler, microsoft), true)\n-    JVM_CFLAGS_FEATURES += -GL\n+  ifeq ($(TOOLCHAIN_TYPE), gcc)\n+    JVM_CFLAGS_FEATURES += -flto=$(JOBS) -fuse-linker-plugin -fno-strict-aliasing -fno-fat-lto-objects\n+    JVM_LDFLAGS_FEATURES += $(CXX_O_FLAG_HIGHEST_JVM) -flto=$(JOBS) -fuse-linker-plugin -fno-strict-aliasing\n+  else ifeq ($(TOOLCHAIN_TYPE), microsoft)\n+    JVM_CFLAGS_FEATURES += -GL -Gy\n@@ -180,1 +180,1 @@\n-  ifeq ($(call isCompiler, gcc), true)\n+  ifeq ($(TOOLCHAIN_TYPE), gcc)\n","filename":"make\/hotspot\/lib\/JvmFeatures.gmk","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-    ifeq ($$(call isCompiler, microsoft), true)\n+    ifeq ($$(TOOLCHAIN_TYPE), microsoft)\n","filename":"make\/ide\/eclipse\/CreateWorkspace.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -215,1 +215,1 @@\n-      LINK_TYPE := C++, \\\n+      LANG := C++, \\\n","filename":"make\/modules\/java.base\/Lib.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-    LINK_TYPE := C++, \\\n+    LANG := C++, \\\n","filename":"make\/modules\/java.base\/lib\/CoreLibraries.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,3 +55,3 @@\n-  LIBJSOUND_LINK_TYPE := C\n-  ifeq ($(call isTargetOs, macosx), true)\n-    LIBJSOUND_LINK_TYPE := C++\n+  LIBJSOUND_LANG := C\n+  ifeq ($(call isTargetOs, macosx windows), true)\n+    LIBJSOUND_LANG := C++\n@@ -62,1 +62,1 @@\n-      LINK_TYPE := $(LIBJSOUND_LINK_TYPE), \\\n+      LANG := $(LIBJSOUND_LANG), \\\n","filename":"make\/modules\/java.desktop\/Lib.gmk","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -50,2 +50,2 @@\n-ifeq ($(call isTargetOs, linux), true)\n-  LIBSAPROC_LINK_TYPE := C++\n+ifeq ($(call isTargetOs, linux windows), true)\n+  LIBSAPROC_LANG := C++\n@@ -53,1 +53,1 @@\n-  LIBSAPROC_LINK_TYPE := C\n+  LIBSAPROC_LANG := C\n@@ -58,1 +58,1 @@\n-    LINK_TYPE := $(LIBSAPROC_LINK_TYPE), \\\n+    LANG := $(LIBSAPROC_LANG), \\\n","filename":"make\/modules\/jdk.hotspot.agent\/Lib.gmk","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-      LINK_TYPE := C++, \\\n+      LANG := C++, \\\n","filename":"make\/modules\/jdk.internal.le\/Lib.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  JPACKAGEAPPLAUNCHER_LINK_TYPE := C\n+  JPACKAGEAPPLAUNCHER_LANG := C\n@@ -43,1 +43,1 @@\n-  JPACKAGEAPPLAUNCHER_LINK_TYPE := C++\n+  JPACKAGEAPPLAUNCHER_LANG := C++\n@@ -49,1 +49,1 @@\n-    LINK_TYPE := $(JPACKAGEAPPLAUNCHER_LINK_TYPE), \\\n+    LANG := $(JPACKAGEAPPLAUNCHER_LANG), \\\n@@ -90,1 +90,1 @@\n-      LINK_TYPE := C++, \\\n+      LANG := C++, \\\n@@ -108,0 +108,1 @@\n+      LANG := C++, \\\n@@ -126,0 +127,1 @@\n+      LANG := C++, \\\n@@ -145,0 +147,1 @@\n+      LANG := C++, \\\n@@ -162,0 +165,1 @@\n+      LANG := $(JPACKAGEAPPLAUNCHER_LANG), \\\n","filename":"make\/modules\/jdk.jpackage\/Lib.gmk","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"}]}