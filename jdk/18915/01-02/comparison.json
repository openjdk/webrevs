{"files":[{"patch":"@@ -77,3 +77,4 @@\n-    ifeq ($(TOOLCHAIN_TYPE), microsoft)\n-      # On windows, we need to \"fake\" a completely different toolchain using gcc\n-      # instead of the normal microsoft toolchain. This is quite hacky...\n+    ifeq ($(OPENJDK_TARGET_OS_ENV), windows.cygwin)\n+      ifeq ($(TOOLCHAIN_TYPE), microsoft)\n+        # On windows, we need to \"fake\" a completely different toolchain using gcc\n+        # instead of the normal microsoft toolchain. This is quite hacky...\n@@ -81,1 +82,1 @@\n-      MINGW_BASE := x86_64-w64-mingw32\n+        MINGW_BASE := x86_64-w64-mingw32\n@@ -83,4 +84,1 @@\n-      MINGW_SYSROOT = $(shell $(MINGW_BASE)-gcc -print-sysroot)\n-      ifeq ($(wildcard $(MINGW_SYSROOT)), )\n-        # Use fallback path\n-        MINGW_SYSROOT := \/usr\/$(MINGW_BASE)\n+        MINGW_SYSROOT = $(shell $(MINGW_BASE)-gcc -print-sysroot)\n@@ -88,1 +86,5 @@\n-          $(error mingw sysroot not found)\n+          # Use fallback path\n+          MINGW_SYSROOT := \/usr\/$(MINGW_BASE)\n+          ifeq ($(wildcard $(MINGW_SYSROOT)), )\n+            $(error mingw sysroot not found)\n+          endif\n@@ -90,1 +92,0 @@\n-      endif\n@@ -92,5 +93,5 @@\n-      BUILD_HSDIS_CC := $(MINGW_BASE)-gcc\n-      BUILD_HSDIS_LD := $(MINGW_BASE)-ld\n-      BUILD_HSDIS_OBJCOPY := $(MINGW_BASE)-objcopy\n-      BUILD_HSDIS_SYSROOT_CFLAGS := --sysroot=$(MINGW_SYSROOT)\n-      BUILD_HSDIS_SYSROOT_LDFLAGS := --sysroot=$(MINGW_SYSROOT)\n+        BUILD_HSDIS_CC := $(MINGW_BASE)-gcc\n+        BUILD_HSDIS_LD := $(MINGW_BASE)-ld\n+        BUILD_HSDIS_OBJCOPY := $(MINGW_BASE)-objcopy\n+        BUILD_HSDIS_SYSROOT_CFLAGS := --sysroot=$(MINGW_SYSROOT)\n+        BUILD_HSDIS_SYSROOT_LDFLAGS := --sysroot=$(MINGW_SYSROOT)\n@@ -98,4 +99,1 @@\n-      MINGW_SYSROOT_LIB_PATH := $(MINGW_SYSROOT)\/mingw\/lib\n-      ifeq ($(wildcard $(MINGW_SYSROOT_LIB_PATH)), )\n-        # Try without mingw\n-        MINGW_SYSROOT_LIB_PATH := $(MINGW_SYSROOT)\/lib\n+        MINGW_SYSROOT_LIB_PATH := $(MINGW_SYSROOT)\/mingw\/lib\n@@ -103,1 +101,5 @@\n-          $(error mingw sysroot lib path not found)\n+          # Try without mingw\n+          MINGW_SYSROOT_LIB_PATH := $(MINGW_SYSROOT)\/lib\n+          ifeq ($(wildcard $(MINGW_SYSROOT_LIB_PATH)), )\n+            $(error mingw sysroot lib path not found)\n+          endif\n@@ -105,1 +107,0 @@\n-      endif\n@@ -107,6 +108,2 @@\n-      MINGW_VERSION = $(shell $(MINGW_BASE)-gcc -v 2>&1 | $(GREP) \"gcc version\" | $(CUT) -d \" \" -f 3)\n-      MINGW_GCC_LIB_PATH := \/usr\/lib\/gcc\/$(MINGW_BASE)\/$(MINGW_VERSION)\n-      ifeq ($(wildcard $(MINGW_GCC_LIB_PATH)), )\n-        # Try using only major version number\n-        MINGW_VERSION_MAJOR := $(firstword $(subst ., , $(MINGW_VERSION)))\n-        MINGW_GCC_LIB_PATH := \/usr\/lib\/gcc\/$(MINGW_BASE)\/$(MINGW_VERSION_MAJOR)\n+        MINGW_VERSION = $(shell $(MINGW_BASE)-gcc -v 2>&1 | $(GREP) \"gcc version\" | $(CUT) -d \" \" -f 3)\n+        MINGW_GCC_LIB_PATH := \/usr\/lib\/gcc\/$(MINGW_BASE)\/$(MINGW_VERSION)\n@@ -114,1 +111,6 @@\n-          $(error mingw gcc lib path not found)\n+          # Try using only major version number\n+          MINGW_VERSION_MAJOR := $(firstword $(subst ., , $(MINGW_VERSION)))\n+          MINGW_GCC_LIB_PATH := \/usr\/lib\/gcc\/$(MINGW_BASE)\/$(MINGW_VERSION_MAJOR)\n+          ifeq ($(wildcard $(MINGW_GCC_LIB_PATH)), )\n+            $(error mingw gcc lib path not found)\n+          endif\n@@ -116,1 +118,0 @@\n-      endif\n@@ -118,17 +119,22 @@\n-      TOOLCHAIN_TYPE := gcc\n-      OPENJDK_TARGET_OS := linux\n-      OPENJDK_TARGET_OS_TYPE := unix\n-      CC_OUT_OPTION := -o$(SPACE)\n-      GENDEPS_FLAGS := -MMD -MF\n-      CFLAGS_DEBUG_SYMBOLS := -g\n-      DISABLED_WARNINGS :=\n-      DISABLE_WARNING_PREFIX := -Wno-\n-      CFLAGS_WARNINGS_ARE_ERRORS := -Werror\n-      SHARED_LIBRARY_FLAGS := -shared\n-\n-      HSDIS_TOOLCHAIN_DEFAULT_CFLAGS := false\n-      HSDIS_TOOLCHAIN_DEFAULT_LDFLAGS := false\n-      HSDIS_LDFLAGS += -L$(MINGW_GCC_LIB_PATH) -L$(MINGW_SYSROOT_LIB_PATH)\n-      MINGW_DLLCRT := $(MINGW_SYSROOT_LIB_PATH)\/dllcrt2.o\n-      HSDIS_TOOLCHAIN_LIBS := $(MINGW_DLLCRT) -lmingw32 -lgcc -lgcc_eh -lmoldname \\\n-          -lmingwex -lmsvcrt -lpthread -ladvapi32 -lshell32 -luser32 -lkernel32\n+        TOOLCHAIN_TYPE := gcc\n+        OPENJDK_TARGET_OS := linux\n+        OPENJDK_TARGET_OS_TYPE := unix\n+        CC_OUT_OPTION := -o$(SPACE)\n+        GENDEPS_FLAGS := -MMD -MF\n+        CFLAGS_DEBUG_SYMBOLS := -g\n+        DISABLED_WARNINGS :=\n+        DISABLE_WARNING_PREFIX := -Wno-\n+        CFLAGS_WARNINGS_ARE_ERRORS := -Werror\n+        SHARED_LIBRARY_FLAGS := -shared\n+\n+        HSDIS_TOOLCHAIN_DEFAULT_CFLAGS := false\n+        HSDIS_TOOLCHAIN_DEFAULT_LDFLAGS := false\n+        HSDIS_LDFLAGS += -L$(MINGW_GCC_LIB_PATH) -L$(MINGW_SYSROOT_LIB_PATH)\n+        MINGW_DLLCRT := $(MINGW_SYSROOT_LIB_PATH)\/dllcrt2.o\n+        HSDIS_TOOLCHAIN_LIBS := $(MINGW_DLLCRT) -lmingw32 -lgcc -lgcc_eh -lmoldname \\\n+            -lmingwex -lmsvcrt -lpthread -ladvapi32 -lshell32 -luser32 -lkernel32\n+      else ifeq ($(TOOLCHAIN_TYPE), gcc)\n+        $(error gcc is not yet supported as a hsdis compiler on Cygwin)\n+      endif\n+    else ifneq ($(OPENJDK_TARGET_OS_ENV), windows.msys2)\n+      $(error The only supported Windows POSIX environments for hsdis backend binutils are MSYS2 and Cygwin)\n","filename":"make\/Hsdis.gmk","additions":52,"deletions":46,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -45,1 +45,3 @@\n-      HSDIS_LDFLAGS=\"-nodefaultlib:libcmt.lib\"\n+      if test \"x$TOOLCHAIN_TYPE\" = xmicrosoft; then\n+        HSDIS_LDFLAGS=\"-nodefaultlib:libcmt.lib\"\n+      fi\n@@ -50,3 +52,5 @@\n-      # There is no way to auto-detect capstone on Windows\n-      AC_MSG_NOTICE([You must specify capstone location using --with-capstone=<path>])\n-      AC_MSG_ERROR([Cannot continue])\n+      if test \"x$OPENJDK_TARGET_OS_ENV\" != xwindows.msys2; then\n+        # There is no way to auto-detect capstone on Windows\n+        AC_MSG_NOTICE([You must specify capstone location using --with-capstone=<path>])\n+        AC_MSG_ERROR([Cannot continue])\n+      fi\n@@ -269,4 +273,13 @@\n-      HSDIS_CFLAGS=\"-DLIBARCH_$OPENJDK_TARGET_CPU_LEGACY_LIB\"\n-    elif test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n-      HSDIS_LIBS=\"-lbfd -lopcodes -l:libz.a -liberty -lsframe -l:libintl.a -l:libiconv.a -l:libzstd.a\"\n-      HSDIS_CFLAGS=\"-DLIBARCH_$OPENJDK_TARGET_CPU_LEGACY_LIB\"\n+    elif test \"x$OPENJDK_TARGET_OS_ENV\" = xwindows.msys2; then\n+      if test \"x$TOOLCHAIN_TYPE\" = xgcc; then\n+        AC_CHECK_LIB(bfd, bfd_openr, [ HSDIS_LIBS=\"-lbfd\" ], [ binutils_system_error=\"libbfd not found\" ], [ -l:libz.a -liberty -lsframe -l:libintl.a -l:libiconv.a -l:libzstd.a ])\n+        AC_CHECK_LIB(opcodes, disassembler, [ HSDIS_LIBS=\"$HSDIS_LIBS -lopcodes\" ], [ binutils_system_error=\"libopcodes not found\" ], [ -lbfd -l:libz.a -liberty -lsframe -l:libintl.a -l:libiconv.a -l:libzstd.a ])\n+        AC_CHECK_LIB(z, deflate, [ HSDIS_LIBS=\"$HSDIS_LIBS -l:libz.a\" ], [ binutils_system_error=\"libz not found\" ])\n+        AC_CHECK_LIB(iberty, xmalloc, [ HSDIS_LIBS=\"$HSDIS_LIBS -liberty\" ])\n+        AC_CHECK_LIB(sframe, frame, [ HSDIS_LIBS=\"$HSDIS_LIBS -lsframe\" ])\n+        AC_CHECK_LIB(intl, libintl_fprintf, [ HSDIS_LIBS=\"$HSDIS_LIBS -l:libintl.a\" ])\n+        AC_CHECK_LIB(iconv, libiconv, [ HSDIS_LIBS=\"$HSDIS_LIBS -l:libiconv.a\" ])\n+        AC_CHECK_LIB(zstd, ZSTD_decompress, [ HSDIS_LIBS=\"$HSDIS_LIBS -l:libzstd.a\" ])\n+      elif test \"x$TOOLCHAIN_TYPE\" = xmicrosoft; then\n+        AC_MSG_ERROR([gcc is currently the only supported hsdis compiler with MSYS2])\n+      fi\n@@ -274,0 +287,1 @@\n+    HSDIS_CFLAGS=\"-DLIBARCH_$OPENJDK_TARGET_CPU_LEGACY_LIB\"\n@@ -296,1 +310,12 @@\n-      AC_CHECK_LIB(z, deflate, [ HSDIS_LIBS=\"$HSDIS_LIBS -lz\" ], AC_MSG_ERROR([libz not found]))\n+      if test \"x$OPENJDK_TARGET_OS_ENV\" = xwindows.msys2; then\n+        if test \"x$TOOLCHAIN_TYPE\" = xgcc; then\n+          AC_CHECK_LIB(z, deflate, [ HSDIS_LIBS=\"$HSDIS_LIBS -l:libz.a\" ], AC_MSG_ERROR([libz not found]))\n+          AC_CHECK_LIB(intl, libintl_fprintf, [ HSDIS_LIBS=\"$HSDIS_LIBS -l:libintl.a\" ], AC_MSG_ERROR([libintl not found]))\n+          AC_CHECK_LIB(iconv, libiconv, [ HSDIS_LIBS=\"$HSDIS_LIBS -l:libiconv.a\" ], AC_MSG_ERROR([libiconv not found]))\n+          AC_CHECK_LIB(zstd, ZSTD_decompress, [ HSDIS_LIBS=\"$HSDIS_LIBS -l:libzstd.a\" ], AC_MSG_ERROR([libzstd not found]))\n+        else\n+          AC_MSG_ERROR([gcc is currently the only supported hsdis compiler with MSYS2])\n+        fi\n+      else\n+        AC_CHECK_LIB(z, deflate, [ HSDIS_LIBS=\"$HSDIS_LIBS -lz\" ], AC_MSG_ERROR([libz not found]))\n+      fi\n@@ -316,1 +341,1 @@\n-      if test \"x$OPENJDK_TARGET_OS\" != xlinux && test \"x$OPENJDK_TARGET_OS\" != xwindows; then\n+      if test \"x$OPENJDK_TARGET_OS\" != xlinux && test \"x$OPENJDK_TARGET_OS_ENV\" != xwindows.msys2; then\n@@ -318,1 +343,1 @@\n-        AC_MSG_ERROR([binutils on system is supported for Linux and Windows only])\n+        AC_MSG_ERROR([binutils on system is supported for Linux and Windows with MSYS2 only])\n","filename":"make\/autoconf\/lib-hsdis.m4","additions":36,"deletions":11,"binary":false,"changes":47,"status":"modified"}]}