{"files":[{"patch":"@@ -28,1 +28,1 @@\n- * @library lib \/test\/lib jdk.jdeps\n+ * @library lib \/test\/lib\n@@ -37,0 +37,1 @@\n+import java.nio.file.Files;\n@@ -40,0 +41,1 @@\n+import java.util.stream.Stream;\n@@ -43,0 +45,1 @@\n+import jdk.test.lib.helpers.ClassFileInstaller;\n@@ -44,1 +47,3 @@\n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -50,2 +55,2 @@\n-    @Test\n-    public void testMalformedSignature() throws IOException {\n+\n+    static Stream<Arguments> invalidArchives() throws Exception {\n@@ -93,0 +98,16 @@\n+\n+        Path flatDir = Path.of(\"flatDir\");\n+        Files.createDirectories(flatDir);\n+        for (var entry : classes.entrySet()) {\n+            ClassFileInstaller.writeClassToDisk(entry.getKey(), entry.getValue(), flatDir.toString());\n+        }\n+\n+        return Stream.of(\n+                Arguments.of(\"directory\", flatDir, \"one\/One.class\"),\n+                Arguments.of(\"jar\", jarPath, \"one\/One.class (malformed-signature.jar)\")\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"invalidArchives\")\n+    public void testMalformedSignature(String kind, Path path, String entryName) throws IOException {\n@@ -94,1 +115,1 @@\n-            jdeps.addRoot(jarPath);\n+            jdeps.addRoot(path);\n@@ -105,2 +126,1 @@\n-            assertTrue(message.contains(\"one\/One.class\"), message);\n-            assertTrue(message.contains(\"malformed-signature.jar\"), message);\n+            assertTrue(message.contains(entryName), \"\\\"\" + message + \"\\\" does not contain \\\"\" + entryName + \"\\\"\");\n","filename":"test\/langtools\/tools\/jdeps\/MalformedClassesTest.java","additions":27,"deletions":7,"binary":false,"changes":34,"status":"modified"}]}