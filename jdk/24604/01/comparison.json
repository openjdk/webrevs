{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-import java.util.Iterator;\n@@ -46,1 +45,0 @@\n-import java.util.NoSuchElementException;\n@@ -48,0 +46,1 @@\n+import java.util.function.Consumer;\n@@ -105,0 +104,4 @@\n+    protected void skipEntry(Throwable ex, String entryPath) {\n+        skippedEntries.add(String.format(\"%s: %s\", ex.toString(), entryPath));\n+    }\n+\n@@ -138,2 +141,9 @@\n-    public Iterable<ClassModel> getClassFiles() throws IOException {\n-        return FileIterator::new;\n+    public void forEachClassFile(Consumer<ClassModel> handler) throws IOException {\n+        if (baseFileName.endsWith(\".class\")) {\n+            \/\/ propagate ClassFileError for single file\n+            try {\n+                handler.accept(readClassFile(path));\n+            } catch (ClassFileError ex) {\n+                skipEntry(ex, path.toString());\n+            }\n+        }\n@@ -170,27 +180,0 @@\n-    class FileIterator implements Iterator<ClassModel> {\n-        int count;\n-        FileIterator() {\n-            this.count = 0;\n-        }\n-        public boolean hasNext() {\n-            return count == 0 && baseFileName.endsWith(\".class\");\n-        }\n-\n-        public ClassModel next() {\n-            if (!hasNext()) {\n-                throw new NoSuchElementException();\n-            }\n-            try {\n-                ClassModel cf = readClassFile(path);\n-                count++;\n-                return cf;\n-            } catch (IOException e) {\n-                throw new ClassFileError(e);\n-            }\n-        }\n-\n-        public void remove() {\n-            throw new UnsupportedOperationException(\"Not supported yet.\");\n-        }\n-    }\n-\n@@ -244,36 +227,11 @@\n-        public Iterable<ClassModel> getClassFiles() throws IOException {\n-            final Iterator<ClassModel> iter = new DirectoryIterator();\n-            return () -> iter;\n-        }\n-\n-        class DirectoryIterator implements Iterator<ClassModel> {\n-            private final List<Path> entries;\n-            private int index = 0;\n-            DirectoryIterator() throws IOException {\n-                List<Path> paths = null;\n-                try (Stream<Path> stream = Files.walk(path, Integer.MAX_VALUE)) {\n-                    paths = stream.filter(ClassFileReader::isClass).toList();\n-\n-                }\n-                this.entries = paths;\n-                this.index = 0;\n-            }\n-\n-            public boolean hasNext() {\n-                return index != entries.size();\n-            }\n-\n-            public ClassModel next() {\n-                if (!hasNext()) {\n-                    throw new NoSuchElementException();\n-                }\n-                Path path = entries.get(index++);\n-                try {\n-                    return readClassFile(path);\n-                } catch (IOException e) {\n-                    throw new ClassFileError(e);\n-                }\n-            }\n-\n-            public void remove() {\n-                throw new UnsupportedOperationException(\"Not supported yet.\");\n+        @Override\n+        public void forEachClassFile(Consumer<ClassModel> handler) throws IOException {\n+            try (Stream<Path> stream = Files.walk(path, Integer.MAX_VALUE)) {\n+                stream.filter(ClassFileReader::isClass)\n+                      .forEach(e -> {\n+                          try {\n+                              handler.accept(readClassFile(e));\n+                          } catch (ClassFileError | IOException ex) {\n+                              skipEntry(ex, e.toString());\n+                          }\n+                      });\n@@ -317,0 +275,4 @@\n+        private static boolean isJarEntryClass(JarEntry e) {\n+            return e.getName().endsWith(\".class\");\n+        }\n+\n@@ -318,7 +280,4 @@\n-            try (JarFile jf = openJarFile(path.toFile(), version)) {\n-                return jf.versionedStream().map(JarEntry::getName)\n-                         .filter(n -> n.endsWith(\".class\"))\n-                         .collect(Collectors.toSet());\n-            } catch (IOException e) {\n-                throw new UncheckedIOException(e);\n-            }\n+            return jarfile.versionedStream()\n+                          .filter(JarFileReader::isJarEntryClass)\n+                          .map(JarEntry::getName)\n+                          .collect(Collectors.toSet());\n@@ -361,70 +320,11 @@\n-        public Iterable<ClassModel> getClassFiles() throws IOException {\n-            final Iterator<ClassModel> iter = new JarFileIterator(this, jarfile);\n-            return () -> iter;\n-        }\n-    }\n-\n-    class JarFileIterator implements Iterator<ClassModel> {\n-        protected final JarFileReader reader;\n-        protected Iterator<JarEntry> entries;\n-        protected JarFile jf;\n-        protected JarEntry nextEntry;\n-        protected ClassModel cf;\n-        JarFileIterator(JarFileReader reader) {\n-            this(reader, null);\n-        }\n-        JarFileIterator(JarFileReader reader, JarFile jarfile) {\n-            this.reader = reader;\n-            setJarFile(jarfile);\n-        }\n-\n-        void setJarFile(JarFile jarfile) {\n-            if (jarfile == null) return;\n-\n-            this.jf = jarfile;\n-            this.entries = jarfile.versionedStream().iterator();\n-            this.nextEntry = nextEntry();\n-        }\n-\n-        public boolean hasNext() {\n-            if (nextEntry != null && cf != null) {\n-                return true;\n-            }\n-            while (nextEntry != null) {\n-                try {\n-                    cf = reader.readClassFile(jf, nextEntry);\n-                    return true;\n-                } catch (ClassFileError | IOException ex) {\n-                    skippedEntries.add(String.format(\"%s: %s (%s)\",\n-                                                     ex.getMessage(),\n-                                                     nextEntry.getName(),\n-                                                     jf.getName()));\n-                }\n-                nextEntry = nextEntry();\n-            }\n-            return false;\n-        }\n-\n-        public ClassModel next() {\n-            if (!hasNext()) {\n-                throw new NoSuchElementException();\n-            }\n-            ClassModel classFile = cf;\n-            cf = null;\n-            nextEntry = nextEntry();\n-            return classFile;\n-        }\n-\n-        protected JarEntry nextEntry() {\n-            while (entries.hasNext()) {\n-                JarEntry e = entries.next();\n-                String name = e.getName();\n-                if (name.endsWith(\".class\")) {\n-                    return e;\n-                }\n-            }\n-            return null;\n-        }\n-\n-        public void remove() {\n-            throw new UnsupportedOperationException(\"Not supported yet.\");\n+        @Override\n+        public void forEachClassFile(Consumer<ClassModel> handler) throws IOException {\n+            jarfile.versionedStream()\n+                   .filter(JarFileReader::isJarEntryClass)\n+                   .forEach(e -> {\n+                       try {\n+                           handler.accept(readClassFile(jarfile, e));\n+                       } catch (ClassFileError | IOException ex) {\n+                           skipEntry(ex, e.getName() + \" (\" + jarfile.getName() + \")\");\n+                       }\n+                   });\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jdeps\/ClassFileReader.java","additions":45,"deletions":145,"binary":false,"changes":190,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-            initCause(cause);\n+            super(cause.getMessage(), cause);\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jdeps\/Dependencies.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -176,1 +176,1 @@\n-            for (var cf : archive.reader().getClassFiles()) {\n+            archive.reader().forEachClassFile(cf -> {\n@@ -178,1 +178,1 @@\n-                    continue;\n+                    return;\n@@ -190,1 +190,1 @@\n-                    continue;\n+                    return;\n@@ -194,1 +194,1 @@\n-                    continue;\n+                    return;\n@@ -206,1 +206,1 @@\n-            }\n+            });\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jdeps\/DependencyFinder.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}