{"files":[{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8341608\n+ * @summary Tests for jdeps tool with jar files with malformed classes\n+ * @library lib \/test\/lib jdk.jdeps\n+ * @build jdk.jdeps\/com.sun.tools.jdeps.*\n+ * @run junit MalformedClassesTest\n+ *\/\n+\n+import java.io.IOException;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.attribute.SignatureAttribute;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.sun.tools.jdeps.JdepsAccess;\n+import jdk.test.lib.compiler.InMemoryJavaCompiler;\n+import jdk.test.lib.util.JarUtils;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class MalformedClassesTest {\n+    @Test\n+    public void testMalformedSignature() throws IOException {\n+        var jarPath = Path.of(\"malformed-signature.jar\");\n+        var compiledClasses = InMemoryJavaCompiler.compile(Map.ofEntries(\n+                Map.entry(\"one.One\", \"\"\"\n+                          package one;\n+\n+                          import java.util.Optional;\n+\n+                          class One {\n+                              Optional<String> st = Optional.empty();\n+                          }\n+                          \"\"\"),\n+                Map.entry(\"two.Two\", \"\"\"\n+                          package two;\n+\n+                          import java.lang.invoke.*;\n+\n+                          class Two {\n+                              int i;\n+                              static final VarHandle I;\n+\n+                              static {\n+                                  try {\n+                                      I = MethodHandles.lookup().findVarHandle(Two.class, \"i\", int.class);\n+                                  } catch (ReflectiveOperationException ex) {\n+                                      throw new ExceptionInInitializerError(ex);\n+                                  }\n+                              }\n+                          }\n+                          \"\"\")\n+        ));\n+        var updated = ClassFile.of().transformClass(ClassFile.of().parse(compiledClasses.get(\"one.One\")),\n+                ClassTransform.transformingFields((fb, fe) -> {\n+                    if (fe instanceof SignatureAttribute) {\n+                        fb.with(SignatureAttribute.of(fb.constantPool().utf8Entry(\"Invalid string\")));\n+                    } else {\n+                        fb.with(fe);\n+                    }\n+                }));\n+        var classes = new HashMap<>(compiledClasses);\n+        classes.put(\"one.One\", updated);\n+        JarUtils.createJarFromClasses(jarPath, classes);\n+        try (var jdeps = JdepsUtil.newCommand(\"jdeps\")) {\n+            jdeps.addRoot(jarPath);\n+            var analyzer = jdeps.getDepsAnalyzer();\n+            analyzer.run();\n+            var archives = JdepsAccess.depsAnalyzerArchives(analyzer);\n+            assertEquals(1, archives.size(), archives::toString);\n+            var archive = archives.iterator().next();\n+            var skippedEntries = archive.reader().skippedEntries();\n+            assertEquals(1, skippedEntries.size(), skippedEntries::toString);\n+            var message = skippedEntries.getFirst();\n+            assertTrue(message.contains(\"ClassFileError\"), message);\n+            assertTrue(message.contains(\"Invalid string\"), message);\n+            assertTrue(message.contains(\"one\/One.class\"), message);\n+            assertTrue(message.contains(\"malformed-signature.jar\"), message);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/jdeps\/MalformedClassesTest.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+modules = \\\n+    jdk.jdeps\/com.sun.tools.jdeps\n","filename":"test\/langtools\/tools\/jdeps\/TEST.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.tools.jdeps;\n+\n+import java.util.Set;\n+\n+public final class JdepsAccess {\n+    public static Set<Archive> depsAnalyzerArchives(DepsAnalyzer analyzer) {\n+        return analyzer.archives;\n+    }\n+\n+    private JdepsAccess() {}\n+}\n","filename":"test\/langtools\/tools\/jdeps\/jdk.jdeps\/com\/sun\/tools\/jdeps\/JdepsAccess.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -211,2 +211,4 @@\n-     * Compiles the list of classes with the given map of name and source code.\n-     * This overloaded version of compile is useful for batch compile use cases.\n+     * Compiles the list of classes with the given map of binary name and source code.\n+     * This overloaded version of compile is useful for batch compile use cases, or\n+     * if a compilation unit produces multiple class files. Returns a map from\n+     * class binary names to class file content.\n","filename":"test\/lib\/jdk\/test\/lib\/compiler\/InMemoryJavaCompiler.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -134,0 +134,18 @@\n+\n+    \/**\n+     * Creates a JAR file from a map of class binary name to class bytes.\n+     *\n+     * @see jdk.test.lib.compiler.InMemoryJavaCompiler#compile(Map)\n+     *\/\n+    public static void createJarFromClasses(Path jarfile, Map<String, byte[]> classes) throws IOException {\n+        try (OutputStream out = Files.newOutputStream(jarfile);\n+             JarOutputStream jos = new JarOutputStream(out)) {\n+            for (var entry : classes.entrySet()) {\n+                String name = entry.getKey().replace('.', '\/') + \".class\";\n+                jos.putNextEntry(new JarEntry(name));\n+                jos.write(entry.getValue());\n+                jos.closeEntry();\n+            }\n+        }\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/util\/JarUtils.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"}]}