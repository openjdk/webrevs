{"files":[{"patch":"@@ -760,0 +760,1 @@\n+    VNEGW_OPCODE   = (4u  << OPCODE_SHIFT |  6u << 16 | 1538u),\n@@ -2375,0 +2376,1 @@\n+  inline void vnegw(    VectorRegister d, VectorRegister b);\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1092,0 +1092,1 @@\n+inline void Assembler::vnegw(   VectorRegister d, VectorRegister b)                   { emit_int32( VNEGW_OPCODE    | vrt(d) | vrb(b)); }\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2196,0 +2196,1 @@\n+    case Op_NegVI:\n@@ -2206,0 +2207,2 @@\n+    case Op_UMinV:\n+    case Op_UMaxV:\n@@ -2271,0 +2274,2 @@\n+    case Op_UMinV:\n+    case Op_UMaxV:\n@@ -8425,0 +8430,12 @@\n+instruct uMulHighL_reg_reg(iRegLdst dst, iRegLsrc src1, iRegLsrc src2) %{\n+  match(Set dst (UMulHiL src1 src2));\n+  ins_cost(DEFAULT_COST);\n+\n+  format %{ \"MULHDU   $dst $src1, $src2 \\t\/\/ unsigned long\" %}\n+  size(4);\n+  ins_encode %{\n+    __ mulhdu($dst$$Register, $src1$$Register, $src2$$Register);\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n@@ -10786,0 +10803,15 @@\n+instruct cmpUL3_reg_reg(iRegIdst dst, iRegLsrc src1, iRegLsrc src2, flagsRegCR0 cr0) %{\n+  match(Set dst (CmpUL3 src1 src2));\n+  effect(KILL cr0);\n+  ins_cost(DEFAULT_COST * 5);\n+  size((VM_Version::has_brw() ? 16 : 20));\n+\n+  format %{ \"cmpUL3_reg_reg $dst, $src1, $src2\" %}\n+\n+  ins_encode %{\n+    __ cmpld(CR0, $src1$$Register, $src2$$Register);\n+    __ set_cmp3($dst$$Register);\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n@@ -13350,0 +13382,40 @@\n+instruct vminu_reg(vecX dst, vecX src1, vecX src2) %{\n+  match(Set dst (UMinV src1 src2));\n+  format %{ \"VMINU  $dst,$src1,$src2\\t\/\/ vector unsigned min\" %}\n+  size(4);\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    switch (bt) {\n+      case T_INT:\n+        __ vminuw($dst$$VectorRegister, $src1$$VectorRegister, $src2$$VectorRegister);\n+        break;\n+      case T_LONG:\n+        __ vminud($dst$$VectorRegister, $src1$$VectorRegister, $src2$$VectorRegister);\n+        break;\n+      default:\n+        ShouldNotReachHere();\n+    }\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+instruct vmaxu_reg(vecX dst, vecX src1, vecX src2) %{\n+  match(Set dst (UMaxV src1 src2));\n+  format %{ \"VMAXU  $dst,$src1,$src2\\t\/\/ vector unsigned max\" %}\n+  size(4);\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    switch (bt) {\n+      case T_INT:\n+        __ vmaxuw($dst$$VectorRegister, $src1$$VectorRegister, $src2$$VectorRegister);\n+        break;\n+      case T_LONG:\n+        __ vmaxud($dst$$VectorRegister, $src1$$VectorRegister, $src2$$VectorRegister);\n+        break;\n+      default:\n+        ShouldNotReachHere();\n+    }\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n@@ -13510,0 +13582,10 @@\n+instruct vnegI_reg(vecX dst, vecX src) %{\n+  match(Set dst (NegVI src));\n+  format %{ \"VNEGW $dst,$src\\t\/\/ negate int vector\" %}\n+  size(4);\n+  ins_encode %{\n+    __ vnegw($dst$$VectorRegister, $src$$VectorRegister);\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":82,"deletions":0,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -33,1 +33,2 @@\n- * @requires os.arch==\"amd64\" | os.arch==\"x86_64\" | os.arch==\"aarch64\" | os.arch==\"riscv64\"\n+ * @requires os.arch==\"amd64\" | os.arch==\"x86_64\" | os.arch==\"aarch64\" | os.arch==\"riscv64\" | os.arch==\"ppc64\" | os.arch==\"ppc64le\"\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestCompareUnsigned.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}