{"files":[{"patch":"@@ -851,2 +851,3 @@\n-                public ByteBuffer allocateTemporaryDirectBuffer(int cap) {\n-                    return new DirectByteBuffer(cap, true);\n+                public ByteBuffer newDirectByteBuffer(int cap) {\n+                    long addr = UNSAFE.allocateMemory(cap);\n+                    return new DirectByteBuffer(addr, cap);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+\n@@ -101,1 +102,1 @@\n-    Direct$Type$Buffer$RW$(int cap, boolean temporary) { \/\/ package-private\n+    Direct$Type$Buffer$RW$(int cap) {                   \/\/ package-private\n@@ -107,2 +108,1 @@\n-        if (!temporary)\n-            Bits.reserveMemory(size, cap);\n+        Bits.reserveMemory(size, cap);\n@@ -114,2 +114,1 @@\n-            if (!temporary)\n-                Bits.unreserveMemory(size, cap);\n+            Bits.unreserveMemory(size, cap);\n@@ -125,10 +124,7 @@\n-        if (!temporary) {\n-            try {\n-                cleaner = Cleaner.create(this, new Deallocator(base, size, cap));\n-            } catch (Throwable t) {\n-                \/\/ Prevent leak if the Deallocator or Cleaner fail for any reason\n-                UNSAFE.freeMemory(base);\n-                throw t;\n-            }\n-        } else { \/\/ temporary\n-            cleaner = null;\n+        try {\n+            cleaner = Cleaner.create(this, new Deallocator(base, size, cap));\n+        } catch (Throwable t) {\n+            \/\/ Prevent leak if the Deallocator or Cleaner fail for any reason\n+            UNSAFE.freeMemory(base);\n+            Bits.unreserveMemory(size, cap);\n+            throw t;\n@@ -143,4 +139,0 @@\n-    Direct$Type$Buffer$RW$(int cap) { \/\/ package-private\n-        this(cap, false);\n-    }\n-\n@@ -170,0 +162,1 @@\n+    \/\/ and JavaNioAccess.newDirectByteBuffer(int).\n@@ -172,1 +165,1 @@\n-    private Direct$Type$Buffer(long addr, long cap) {\n+    Direct$Type$Buffer(long addr, long cap) {\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":13,"deletions":20,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-    ByteBuffer allocateTemporaryDirectBuffer(int cap);\n+    ByteBuffer newDirectByteBuffer(int cap);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaNioAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -228,1 +228,1 @@\n-            return NIO_ACCESS.allocateTemporaryDirectBuffer(size);\n+            return NIO_ACCESS.newDirectByteBuffer(size);\n@@ -243,1 +243,1 @@\n-            return NIO_ACCESS.allocateTemporaryDirectBuffer(size);\n+            return NIO_ACCESS.newDirectByteBuffer(size);\n@@ -254,1 +254,1 @@\n-            return NIO_ACCESS.allocateTemporaryDirectBuffer(size + alignment - 1)\n+            return NIO_ACCESS.newDirectByteBuffer(size + alignment - 1)\n@@ -270,1 +270,1 @@\n-        return NIO_ACCESS.allocateTemporaryDirectBuffer(size + alignment - 1)\n+        return NIO_ACCESS.newDirectByteBuffer(size + alignment - 1)\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/Util.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}