{"files":[{"patch":"@@ -850,0 +850,5 @@\n+                @Override\n+                public ByteBuffer newDirectByteBuffer(long addr, int cap) {\n+                    return new DirectByteBuffer(addr, cap);\n+                }\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -162,0 +162,1 @@\n+    \/\/ and JavaNioAccess.newDirectByteBuffer(int).\n@@ -164,1 +165,1 @@\n-    private Direct$Type$Buffer(long addr, long cap) {\n+    Direct$Type$Buffer(long addr, long cap) {\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -70,0 +70,5 @@\n+    \/**\n+     * Used by {@code sun.nio.ch.Util}.\n+     *\/\n+    ByteBuffer newDirectByteBuffer(long addr, int cap);\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaNioAccess.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -44,0 +46,2 @@\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -224,1 +228,2 @@\n-            return ByteBuffer.allocateDirect(size);\n+            long addr = unsafe.allocateMemory(size);\n+            return NIO_ACCESS.newDirectByteBuffer(addr, size);\n@@ -239,1 +244,2 @@\n-            return ByteBuffer.allocateDirect(size);\n+            long addr = unsafe.allocateMemory(size);\n+            return NIO_ACCESS.newDirectByteBuffer(addr, size);\n@@ -250,2 +256,2 @@\n-            return ByteBuffer.allocateDirect(size + alignment - 1)\n-                    .alignedSlice(alignment);\n+            return getTemporaryDirectBuffer(size + alignment - 1)\n+                .alignedSlice(alignment);\n@@ -266,2 +272,2 @@\n-        return ByteBuffer.allocateDirect(size + alignment - 1)\n-                .alignedSlice(alignment);\n+        return getTemporaryDirectBuffer(size + alignment - 1)\n+            .alignedSlice(alignment);\n@@ -277,0 +283,9 @@\n+    \/**\n+     * Return the underling byte buffer if the given byte buffer is\n+     * an aligned slice.\n+     *\/\n+    private static ByteBuffer unwrapIfAlignedSlice(ByteBuffer buf) {\n+        var parent = (ByteBuffer) ((DirectBuffer) buf).attachment();\n+        return (parent != null) ? parent : buf;\n+    }\n+\n@@ -283,0 +298,2 @@\n+        buf = unwrapIfAlignedSlice(buf);\n+\n@@ -305,0 +322,2 @@\n+        buf = unwrapIfAlignedSlice(buf);\n+\n@@ -324,1 +343,1 @@\n-        ((DirectBuffer)buf).cleaner().clean();\n+        unsafe.freeMemory(((DirectBuffer)buf).address());\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/Util.java","additions":26,"deletions":7,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -72,3 +72,0 @@\n-\n-# Direct buffer memory allocated before test launch\n-java\/nio\/Buffer\/LimitDirectMemory.java 8342849 generic-all\n","filename":"test\/jdk\/ProblemList-Virtual.txt","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}