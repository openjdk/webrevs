{"files":[{"patch":"@@ -34,1 +34,10 @@\n-import java.util.function.*;\n+import java.util.function.BinaryOperator;\n+import java.util.function.Consumer;\n+import java.util.function.DoubleBinaryOperator;\n+import java.util.function.IntBinaryOperator;\n+import java.util.function.IntFunction;\n+import java.util.function.IntToDoubleFunction;\n+import java.util.function.IntToLongFunction;\n+import java.util.function.IntUnaryOperator;\n+import java.util.function.LongBinaryOperator;\n+import java.util.function.UnaryOperator;\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -91,2 +91,3 @@\n-        extends AbstractSequentialList<E>\n-        implements List<E>, Deque<E>, Cloneable, java.io.Serializable {\n+    extends AbstractSequentialList<E>\n+    implements List<E>, Deque<E>, Cloneable, java.io.Serializable \n+{\n","filename":"src\/java.base\/share\/classes\/java\/util\/LinkedList.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -345,1 +345,1 @@\n-        int i = base.indexOf(o);\n+        int i = base.lastIndexOf(o);\n@@ -355,1 +355,1 @@\n-        int i = base.lastIndexOf(o);\n+        int i = base.indexOf(o);\n","filename":"src\/java.base\/share\/classes\/java\/util\/ReverseOrderListView.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import jdk.internal.util.ArraysSupport;\n-\n@@ -37,0 +35,2 @@\n+import jdk.internal.util.ArraysSupport;\n+\n@@ -385,1 +385,1 @@\n-     * @param filter a predicate to apply to each element to determine if it\n+     * @param filter a predicate to search mathcing element for\n@@ -431,1 +431,1 @@\n-     * @param filter a predicate to apply to each element to determine if it\n+     * @param filter a predicate to search mathcing element for\n@@ -437,1 +437,0 @@\n-     * @see Object#equals(Object)\n@@ -441,1 +440,1 @@\n-            if (filter.test(elementData(i))) {\n+            if (filter.test(elementData[i])) {\n@@ -468,1 +467,1 @@\n-     * {@code (filter.test(get(i))},\n+     * {@code i >= index && filter.test(get(i))},\n@@ -471,1 +470,1 @@\n-     * @param filter a predicate to apply to each element to determine if it\n+     * @param filter a predicate to search mathcing element for\n@@ -516,1 +515,1 @@\n-     * {@code (filter.test(get(i))},\n+     * {@code i <= index && filter.test(get(i))},\n@@ -519,1 +518,1 @@\n-     * @param filter a predicate to apply to each element to determine if it\n+     * @param filter a predicate to search mathcing element for\n","filename":"src\/java.base\/share\/classes\/java\/util\/Vector.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -37,3 +37,0 @@\n-import jdk.internal.access.SharedSecrets;\n-import jdk.internal.util.ArraysSupport;\n-\n@@ -42,1 +39,14 @@\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+import java.util.RandomAccess;\n+import java.util.Spliterator;\n+import java.util.Spliterators;\n@@ -49,0 +59,2 @@\n+import jdk.internal.access.SharedSecrets; \n+import jdk.internal.util.ArraysSupport;\n@@ -201,2 +213,2 @@\n-     * @param from   index of first element of range, last element to search\n-     * @param to     one past last element of range, first element to search\n+     * @param from   index of first element of range, first element to search\n+     * @param to     one past last element of range, last element to search\n@@ -1448,1 +1460,1 @@\n-            int i = indexOfRange(filter, es, offset, offset + size);\n+            int i = findIndexInRange(filter, es, offset, offset + size);\n@@ -1462,1 +1474,1 @@\n-            int i = lastIndexOfRange(filter, es, offset, offset + size);\n+            int i = findLastIndexInRange(filter, es, offset, offset + size);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CopyOnWriteArrayList.java","additions":20,"deletions":8,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -264,1 +264,1 @@\n-        act.indexOf((String) null);\n+        act.indexOf(null);\n@@ -269,1 +269,1 @@\n-        act.lastIndexOf((String) null);\n+        act.lastIndexOf(null);\n","filename":"test\/jdk\/java\/util\/List\/ListFactories.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -81,1 +81,7 @@\n-import java.util.function.*;\n+import java.util.function.Consumer;\n+import java.util.function.DoubleConsumer;\n+import java.util.function.Function;\n+import java.util.function.IntConsumer;\n+import java.util.function.LongConsumer;\n+import java.util.function.Supplier;\n+import java.util.function.UnaryOperator;\n","filename":"test\/jdk\/java\/util\/Spliterator\/SpliteratorTraversingAndSplittingTest.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}