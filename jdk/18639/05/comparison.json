{"files":[{"patch":"@@ -308,0 +308,25 @@\n+    \/**\n+     * Returns the index of the first occurrence of a matching element\n+     * in this list, or -1 if this list does not contain a matching element.\n+     * More formally, returns the lowest index {@code i} such that\n+     * {@code filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter a predicate to search matching element for\n+     * @return the index of the first occurrence of the specified element in\n+     *         this list, or -1 if this list does not contain the element\n+     *\/\n+    public int findIndex(Predicate<? super E> filter) {\n+        return findIndexInRange(filter, 0, size);\n+    }\n+\n+    int findIndexInRange(Predicate<? super E> filter, int start, int end) {\n+        Object[] es = elementData;\n+        for (int i = start; i < end; i++) {\n+            if (filter.test(elementAt(es, i))) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n@@ -337,0 +362,25 @@\n+    \/**\n+     * Returns the index of the last occurrence of a matching element\n+     * in this list, or -1 if this list does not contain a matching element.\n+     * More formally, returns the highest index {@code i} such that\n+     * {@code filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter a predicate to search matching element for\n+     * @return the index of the last occurrence of the specified element in\n+     *         this list, or -1 if this list does not contain the element\n+     *\/\n+    public int findLastIndex(Predicate<? super E> filter) {\n+        return findLastIndexInRange(filter, 0, size);\n+    }\n+\n+    int findLastIndexInRange(Predicate<? super E> filter, int start, int end) {\n+        Object[] es = elementData;\n+        for (int i = end - 1; i >= start; i--) {\n+            if (filter.test(elementAt(es, i))) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n@@ -1352,0 +1402,6 @@\n+        public int findIndex(Predicate<? super E> filter) {\n+            int index = root.indexOfRange(filter, offset, offset + size);\n+            checkForComodification();\n+            return index >= 0 ? index - offset : -1;\n+        }\n+\n@@ -1358,0 +1414,6 @@\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            int index = root.lastIndexOfRange(filter, offset, offset + size);\n+            checkForComodification();\n+            return index >= 0 ? index - offset : -1;\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/ArrayList.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -4252,0 +4252,8 @@\n+        public int findIndex(Predicate<? super E> filter) {\n+            E[] a = this.a;\n+            for (int i = 0; i < a.length; i++)\n+                if (filter.test(a[i]))\n+                    return i;\n+            return -1;\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1513,0 +1513,3 @@\n+        public int findIndex(Predicate<? super E> filter) {\n+            return list.findIndex(filter);\n+        }\n@@ -1514,0 +1517,3 @@\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            return list.findLastIndex(filter);\n+        }\n@@ -2730,1 +2736,0 @@\n-\n@@ -2734,0 +2739,3 @@\n+        public int findIndex(Predicate<? super E> filter) {\n+            synchronized (mutex) {return list.indexOf(filter);}\n+        }\n@@ -2737,0 +2745,3 @@\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            synchronized (mutex) {return list.lastIndexOf(filter);}\n+        }\n@@ -3768,0 +3779,2 @@\n+        public int findIndex(Predicate<? super E> filter) { return list.indexOf(filter); }\n+        public int findLastIndex(Predicate<? super E> filter) { return list.lastIndexOf(filter); }\n@@ -5397,0 +5410,4 @@\n+        public int findIndex(Predicate<? super E> filter) {\n+            return filter.test(element) ? 0 : -1;\n+        }\n+\n@@ -5401,0 +5418,4 @@\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            return filter.test(element) ? n - 1 : -1;\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/Collections.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -514,0 +514,9 @@\n+        public int findIndex(Predicate<? super E> filter) {\n+            for (int i = 0, s = size(); i < s; i++) {\n+                if (filter.test(get(i))) {\n+                    return i;\n+                }\n+            }\n+            return -1;\n+        }\n+\n@@ -527,0 +536,9 @@\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            for (int i = size() - 1; i >= 0; i--) {\n+                if (filter.test(get(i))) {\n+                    return i;\n+                }\n+            }\n+            return -1;\n+        }\n+\n@@ -607,0 +625,11 @@\n+        @SuppressWarnings(\"unchecked\")\n+        public int findIndex(Predicate<? super E> filter) {\n+            if (filter.test(e0)) {\n+                return 0;\n+            } else if (e1 != EMPTY && filter.test((E)e1)) {\n+                return 1;\n+            } else {\n+                return -1;\n+            }\n+        }\n+\n@@ -619,0 +648,11 @@\n+        @SuppressWarnings(\"unchecked\")\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            if (e1 != EMPTY && filter.test((E)e1)) {\n+                return 1;\n+            } else if (filter.test(e0)) {\n+                return 0;\n+            } else {\n+                return -1;\n+            }\n+        }\n+\n@@ -734,0 +774,10 @@\n+        public int findIndex(Predicate<? super E> filter) {\n+            E[] es = elements;\n+            for (int i = 0; i < es.length; i++) {\n+                if (filter.test(es[i])) {\n+                    return i;\n+                }\n+            }\n+            return -1;\n+        }\n+\n@@ -747,0 +797,10 @@\n+\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            E[] es = elements;\n+            for (int i = es.length - 1; i >= 0; i--) {\n+                if (filter.test(es[i])) {\n+                    return i;\n+                }\n+            }\n+            return -1;\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/ImmutableCollections.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n- *\n+ * <p>\n@@ -83,4 +83,0 @@\n- * @author  Josh Bloch\n- * @see     List\n- * @see     ArrayList\n- * @since 1.2\n@@ -88,0 +84,4 @@\n+ * @author Josh Bloch\n+ * @see List\n+ * @see ArrayList\n+ * @since 1.2\n@@ -92,1 +92,1 @@\n-    implements List<E>, Deque<E>, Cloneable, java.io.Serializable\n+    implements List<E>, Deque<E>, Cloneable, java.io.Serializable \n@@ -125,1 +125,1 @@\n-     * @param  c the collection whose elements are to be placed into this list\n+     * @param c the collection whose elements are to be placed into this list\n@@ -412,1 +412,1 @@\n-     * @param c collection containing elements to be added to this list\n+     * @param c     collection containing elements to be added to this list\n@@ -415,1 +415,1 @@\n-     * @throws NullPointerException if the specified collection is null\n+     * @throws NullPointerException      if the specified collection is null\n@@ -496,1 +496,1 @@\n-     * @param index index of the element to replace\n+     * @param index   index of the element to replace\n@@ -514,1 +514,1 @@\n-     * @param index index at which the specified element is to be inserted\n+     * @param index   index at which the specified element is to be inserted\n@@ -562,1 +562,1 @@\n-        return \"Index: \"+index+\", Size: \"+size;\n+        return \"Index: \" + index + \", Size: \" + size;\n@@ -605,1 +605,1 @@\n-     *         this list, or -1 if this list does not contain the element\n+     * this list, or -1 if this list does not contain the element\n@@ -625,0 +625,42 @@\n+    \/**\n+     * Returns the index of the first occurrence of a matching element in this\n+     * list, or -1 if this list does not contain the element.  More formally,\n+     * returns the lowest index {@code i} such that\n+     * {@code filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter a predicate to search mathcing element for\n+     * @return the index of the first occurrence of a matching element in\n+     * this list, or -1 if this list does not contain the element\n+     *\/\n+    public int findIndex(Predicate<? super E> filter) {\n+        int index = 0;\n+        for (Node<E> x = first; x != null; x = x.next) {\n+            if (filter.test(x.item))\n+                return index;\n+            index++;\n+        }\n+        return -1;\n+    }\n+\n+    \/**\n+     * Returns the index of the last occurrence of a matching element\n+     * in this list, or -1 if this list does not contain the element.\n+     * More formally, returns the highest index {@code i} such that\n+     * {@code filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter a predicate to search mathcing element for\n+     * @return the index of the last occurrence of a matching element in\n+     * this list, or -1 if this list does not contain the element\n+     *\/\n+    public int findLastIndex(Predicate<? super E> filter) {\n+        int index = size;\n+        for (Node<E> x = last; x != null; x = x.prev) {\n+            index--;\n+            if (filter.test(x.item))\n+                return index;\n+        }\n+        return -1;\n+    }\n+\n@@ -634,1 +676,1 @@\n-     *         this list, or -1 if this list does not contain the element\n+     * this list, or -1 if this list does not contain the element\n@@ -712,0 +754,1 @@\n+\n@@ -741,1 +784,1 @@\n-     *         if this list is empty\n+     * if this list is empty\n@@ -747,1 +790,1 @@\n-     }\n+    }\n@@ -754,1 +797,1 @@\n-     *         if this list is empty\n+     * if this list is empty\n@@ -767,1 +810,1 @@\n-     *     this list is empty\n+     * this list is empty\n@@ -780,1 +823,1 @@\n-     *     this list is empty\n+     * this list is empty\n@@ -808,1 +851,1 @@\n-     *         of the stack represented by this list)\n+     * of the stack represented by this list)\n@@ -860,2 +903,2 @@\n-     * Obeys the general contract of {@code List.listIterator(int)}.<p>\n-     *\n+     * Obeys the general contract of {@code List.listIterator(int)}.\n+     * <p>\n@@ -874,1 +917,1 @@\n-     *         sequence), starting at the specified position in the list\n+     * sequence), starting at the specified position in the list\n@@ -1006,0 +1049,1 @@\n+\n@@ -1009,0 +1053,1 @@\n+\n@@ -1012,0 +1057,1 @@\n+\n@@ -1059,1 +1105,1 @@\n-     *         in proper sequence\n+     * in proper sequence\n@@ -1094,1 +1140,1 @@\n-     *\n+     * <p>\n@@ -1102,3 +1148,3 @@\n-     * @throws ArrayStoreException if the runtime type of the specified array\n-     *         is not a supertype of the runtime type of every element in\n-     *         this list\n+     * @throws ArrayStoreException  if the runtime type of the specified array\n+     *                              is not a supertype of the runtime type of every element in\n+     *                              this list\n@@ -1110,2 +1156,2 @@\n-            a = (T[])java.lang.reflect.Array.newInstance(\n-                                a.getClass().getComponentType(), size);\n+            a = (T[]) java.lang.reflect.Array.newInstance(\n+                    a.getClass().getComponentType(), size);\n@@ -1131,2 +1177,2 @@\n-     *             contains) is emitted (int), followed by all of its\n-     *             elements (each an Object) in the proper order.\n+     * contains) is emitted (int), followed by all of its\n+     * elements (each an Object) in the proper order.\n@@ -1136,1 +1182,1 @@\n-        throws java.io.IOException {\n+            throws java.io.IOException {\n@@ -1155,1 +1201,1 @@\n-        throws java.io.IOException, ClassNotFoundException {\n+            throws java.io.IOException, ClassNotFoundException {\n@@ -1164,1 +1210,1 @@\n-            linkLast((E)s.readObject());\n+            linkLast((E) s.readObject());\n@@ -1176,4 +1222,0 @@\n-     * @implNote\n-     * The {@code Spliterator} additionally reports {@link Spliterator#SUBSIZED}\n-     * and implements {@code trySplit} to permit limited parallelism..\n-     *\n@@ -1181,0 +1223,2 @@\n+     * @implNote The {@code Spliterator} additionally reports {@link Spliterator#SUBSIZED}\n+     * and implements {@code trySplit} to permit limited parallelism..\n@@ -1188,1 +1232,3 @@\n-    \/** A customized variant of Spliterators.IteratorSpliterator *\/\n+    \/**\n+     * A customized variant of Spliterators.IteratorSpliterator\n+     *\/\n@@ -1219,1 +1265,3 @@\n-        public long estimateSize() { return (long) getEst(); }\n+        public long estimateSize() {\n+            return (long) getEst();\n+        }\n@@ -1232,1 +1280,3 @@\n-                do { a[j++] = p.item; } while ((p = p.next) != null && j < n);\n+                do {\n+                    a[j++] = p.item;\n+                } while ((p = p.next) != null && j < n);\n@@ -1242,1 +1292,2 @@\n-            Node<E> p; int n;\n+            Node<E> p;\n+            int n;\n@@ -1460,0 +1511,4 @@\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            return rlist.findLastIndex(filter);\n+        }\n+\n@@ -1464,0 +1519,4 @@\n+        public int findIndex(Predicate<? super E> filter) {\n+            return rlist.findIndex(filter);\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/LinkedList.java","additions":102,"deletions":43,"binary":false,"changes":145,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.function.Predicate;\n@@ -673,0 +674,60 @@\n+    \/**\n+     * Returns the index of the first occurrence of matching element\n+     * in this list, or -1 if this list does not contain the element.\n+     * More formally, returns the lowest index {@code i} such that\n+     * {@code filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @implSpec\n+     * This implementation first gets a list iterator (with\n+     * {@code listIterator()}).  Then, it iterates over the list until a\n+     * matching element is found or the beginning of the list is reached.\n+     *\n+     * @param filter a predicate to search matching element for\n+     * @return the index of the first occurrence of the specified element in\n+     *         this list, or -1 if this list does not contain the element\n+     * @throws NullPointerException if passed filter is null\n+     *\/\n+    default int findIndex(Predicate<? super E> filter) {\n+        Objects.requireNonNull(filter);\n+        ListIterator<E> it = listIterator();\n+        while (it.hasNext()) {\n+            E e = it.next();\n+            if (filter.test(e)) {\n+                return it.previousIndex();\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    \/**\n+     * Returns the index of the last occurrence of matching element\n+     * in this list, or -1 if this list does not contain the element.\n+     * More formally, returns the highest index {@code i} such that\n+     * {@code Objects.equals(o, get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @implSpec\n+     * This implementation first gets a list iterator that points to the end\n+     * of the list (with {@code listIterator(size())}).  Then, it iterates\n+     * backwards over the list until the matching element is found, or the\n+     * beginning of the list is reached.\n+     *\n+     * @param filter a predicate to search matching element for\n+     * @return the index of the last occurrence of the specified element in\n+     *         this list, or -1 if this list does not contain the element\n+     * @throws NullPointerException if passed filter is null\n+     *\/\n+    default int findLastIndex(Predicate<? super E> filter) {\n+        Objects.requireNonNull(filter);\n+        ListIterator<E> it = listIterator(size());\n+        while (it.hasPrevious()) {\n+            E e = it.previous();\n+            if (filter.test(e)) {\n+                return it.nextIndex();\n+            }\n+        }\n+        return -1;\n+    }\n+\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/List.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -349,0 +349,5 @@\n+    public int findIndex(Predicate<? super E> filter) {\n+        int i = base.findIndex(filter);\n+        return i == -1 ? -1 : base.size() - i - 1;\n+    }\n+\n@@ -354,0 +359,5 @@\n+    public int findLastIndex(Predicate<? super E> filter) {\n+        int i = base.findLastIndex(filter);\n+        return i == -1 ? -1 : base.size() - i - 1;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/ReverseOrderListView.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -85,3 +85,2 @@\n- *\n- * @author  Lee Boynton\n- * @author  Jonathan Payne\n+ * @author Lee Boynton\n+ * @author Jonathan Payne\n@@ -90,1 +89,1 @@\n- * @since   1.0\n+ * @since 1.0\n@@ -93,3 +92,2 @@\n-    extends AbstractList<E>\n-    implements List<E>, RandomAccess, Cloneable, java.io.Serializable\n-{\n+        extends AbstractList<E>\n+        implements List<E>, RandomAccess, Cloneable, java.io.Serializable {\n@@ -127,1 +125,3 @@\n-    \/** use serialVersionUID from JDK 1.0.2 for interoperability *\/\n+    \/**\n+     * use serialVersionUID from JDK 1.0.2 for interoperability\n+     *\/\n@@ -135,3 +135,3 @@\n-     * @param   initialCapacity     the initial capacity of the vector\n-     * @param   capacityIncrement   the amount by which the capacity is\n-     *                              increased when the vector overflows\n+     * @param initialCapacity   the initial capacity of the vector\n+     * @param capacityIncrement the amount by which the capacity is\n+     *                          increased when the vector overflows\n@@ -139,1 +139,1 @@\n-     *         is negative\n+     *                                  is negative\n@@ -144,2 +144,2 @@\n-            throw new IllegalArgumentException(\"Illegal Capacity: \"+\n-                                               initialCapacity);\n+            throw new IllegalArgumentException(\"Illegal Capacity: \" +\n+                    initialCapacity);\n@@ -154,1 +154,1 @@\n-     * @param   initialCapacity   the initial capacity of the vector\n+     * @param initialCapacity the initial capacity of the vector\n@@ -156,1 +156,1 @@\n-     *         is negative\n+     *                                  is negative\n@@ -177,1 +177,1 @@\n-     *       vector\n+     *          vector\n@@ -179,1 +179,1 @@\n-     * @since   1.2\n+     * @since 1.2\n@@ -196,2 +196,2 @@\n-     * @param  anArray the array into which the components get copied\n-     * @throws NullPointerException if the given array is null\n+     * @param anArray the array into which the components get copied\n+     * @throws NullPointerException      if the given array is null\n@@ -199,3 +199,3 @@\n-     *         large enough to hold all the components of this vector\n-     * @throws ArrayStoreException if a component of this vector is not of\n-     *         a runtime type that can be stored in the specified array\n+     *                                   large enough to hold all the components of this vector\n+     * @throws ArrayStoreException       if a component of this vector is not of\n+     *                                   a runtime type that can be stored in the specified array\n@@ -261,1 +261,1 @@\n-                                           \/* preferred growth *\/);\n+                \/* preferred growth *\/);\n@@ -275,1 +275,1 @@\n-     * @param  newSize   the new size of this vector\n+     * @param newSize the new size of this vector\n@@ -291,3 +291,3 @@\n-     * @return  the current capacity (the length of its internal\n-     *          data array, kept in the field {@code elementData}\n-     *          of this vector)\n+     * @return the current capacity (the length of its internal\n+     * data array, kept in the field {@code elementData}\n+     * of this vector)\n@@ -302,1 +302,1 @@\n-     * @return  the number of components in this vector\n+     * @return the number of components in this vector\n@@ -311,3 +311,3 @@\n-     * @return  {@code true} if and only if this vector has\n-     *          no components, that is, its size is zero;\n-     *          {@code false} otherwise.\n+     * @return {@code true} if and only if this vector has\n+     * no components, that is, its size is zero;\n+     * {@code false} otherwise.\n@@ -327,2 +327,2 @@\n-     * @return  an enumeration of the components of this vector\n-     * @see     Iterator\n+     * @return an enumeration of the components of this vector\n+     * @see Iterator\n@@ -371,1 +371,1 @@\n-     *         this vector, or -1 if this vector does not contain the element\n+     * this vector, or -1 if this vector does not contain the element\n@@ -377,0 +377,17 @@\n+    \/**\n+     * Returns the index of the first occurrence of a matching element in\n+     * this vector, searching forwards from {@code index}, or returns -1 if\n+     * no matching element is found.\n+     * More formally, returns the lowest index {@code i} such that\n+     * {@code (filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter a predicate to search mathcing element for\n+     * @return the index of the first occurrence of a matching element in\n+     * this vector or -1 if no matching element is found\n+     *\/\n+    public int findIndex(Predicate<? super E> filter) {\n+        return findIndex(filter, 0);\n+    }\n+\n+\n@@ -385,1 +402,1 @@\n-     * @param o element to search for\n+     * @param o     element to search for\n@@ -388,2 +405,2 @@\n-     *         this vector at position {@code index} or later in the vector;\n-     *         {@code -1} if the element is not found.\n+     * this vector at position {@code index} or later in the vector;\n+     * {@code -1} if the element is not found.\n@@ -391,1 +408,1 @@\n-     * @see     Object#equals(Object)\n+     * @see Object#equals(Object)\n@@ -395,2 +412,2 @@\n-            for (int i = index ; i < elementCount ; i++)\n-                if (elementData[i]==null)\n+            for (int i = index; i < elementCount; i++)\n+                if (elementData[i] == null)\n@@ -399,1 +416,1 @@\n-            for (int i = index ; i < elementCount ; i++)\n+            for (int i = index; i < elementCount; i++)\n@@ -406,0 +423,24 @@\n+    \/**\n+     * Returns the index of the first occurrence of a matching element in\n+     * this vector, searching forwards from {@code index}, or returns -1 if\n+     * no matching element is found.\n+     * More formally, returns the lowest index {@code i} such that\n+     * {@code (filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter a predicate to search mathcing element for\n+     * @param index index to start searching from\n+     * @return the index of the first occurrence of the element in\n+     * this vector at position {@code index} or later in the vector;\n+     * {@code -1} if the element is not found.\n+     * @throws IndexOutOfBoundsException if the specified index is negative\n+     *\/\n+    public synchronized int findIndex(Predicate<? super E> filter, int index) {\n+        for (int i = index; i < elementCount; i++) {\n+            if (filter.test(elementData[i])) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n@@ -415,1 +456,1 @@\n-     *         this vector, or -1 if this vector does not contain the element\n+     * this vector, or -1 if this vector does not contain the element\n@@ -418,1 +459,17 @@\n-        return lastIndexOf(o, elementCount-1);\n+        return lastIndexOf(o, elementCount - 1);\n+    }\n+\n+    \/**\n+     * Returns the index of the last occurrence of a matching element in\n+     * this vector, searching backwards from {@code index}, or returns -1 if\n+     * no matching element is found.\n+     * More formally, returns the highest index {@code i} such that\n+     * {@code i >= index && filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter a predicate to search mathcing element for\n+     * @return the index of the last occurrence of a matching element in\n+     * this vector or -1 if no matching element is found\n+     *\/\n+    public synchronized int findLastIndex(Predicate<? super E> filter) {\n+        return findLastIndex(filter, elementCount - 1);\n@@ -429,1 +486,1 @@\n-     * @param o element to search for\n+     * @param o     element to search for\n@@ -432,2 +489,2 @@\n-     *         less than or equal to {@code index} in this vector;\n-     *         -1 if the element is not found.\n+     * less than or equal to {@code index} in this vector;\n+     * -1 if the element is not found.\n@@ -435,1 +492,1 @@\n-     *         than or equal to the current size of this vector\n+     *                                   than or equal to the current size of this vector\n@@ -439,1 +496,1 @@\n-            throw new IndexOutOfBoundsException(index + \" >= \"+ elementCount);\n+            throw new IndexOutOfBoundsException(index + \" >= \" + elementCount);\n@@ -443,1 +500,1 @@\n-                if (elementData[i]==null)\n+                if (elementData[i] == null)\n@@ -453,0 +510,28 @@\n+    \/**\n+     * Returns the index of the last occurrence of a matching element in\n+     * this vector, searching backwards from {@code index}, or returns -1 if\n+     * no matching element is found.\n+     * More formally, returns the highest index {@code i} such that\n+     * {@code i <= index && filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter a predicate to search mathcing element for\n+     * @param index index to start searching backwards from\n+     * @return the index of the last occurrence of the element at position\n+     * less than or equal to {@code index} in this vector;\n+     * -1 if the element is not found.\n+     * @throws IndexOutOfBoundsException if the specified index is greater\n+     *                                   than or equal to the current size of this vector\n+     *\/\n+    public synchronized int findLastIndex(Predicate<? super E> filter, int index) {\n+        if (index >= elementCount)\n+            throw new IndexOutOfBoundsException(index + \" >= \" + elementCount);\n+\n+        for (int i = index; i >= 0; i--) {\n+            if (filter.test(elementData(i))) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n@@ -459,2 +544,2 @@\n-     * @param      index   an index into this vector\n-     * @return     the component at the specified index\n+     * @param index an index into this vector\n+     * @return the component at the specified index\n@@ -462,1 +547,1 @@\n-     *         ({@code index < 0 || index >= size()})\n+     *                                        ({@code index < 0 || index >= size()})\n@@ -476,1 +561,1 @@\n-     * @return     the first component of this vector\n+     * @return the first component of this vector\n@@ -489,2 +574,2 @@\n-     * @return  the last component of the vector, i.e., the component at index\n-     *          {@code size() - 1}\n+     * @return the last component of the vector, i.e., the component at index\n+     * {@code size() - 1}\n@@ -515,2 +600,2 @@\n-     * @param      obj     what the component is to be set to\n-     * @param      index   the specified index\n+     * @param obj   what the component is to be set to\n+     * @param index the specified index\n@@ -518,1 +603,1 @@\n-     *         ({@code index < 0 || index >= size()})\n+     *                                        ({@code index < 0 || index >= size()})\n@@ -523,1 +608,1 @@\n-                                                     elementCount);\n+                    elementCount);\n@@ -543,1 +628,1 @@\n-     * @param      index   the index of the object to remove\n+     * @param index the index of the object to remove\n@@ -545,1 +630,1 @@\n-     *         ({@code index < 0 || index >= size()})\n+     *                                        ({@code index < 0 || index >= size()})\n@@ -550,3 +635,2 @@\n-                                                     elementCount);\n-        }\n-        else if (index < 0) {\n+                    elementCount);\n+        } else if (index < 0) {\n@@ -582,2 +666,2 @@\n-     * @param      obj     the component to insert\n-     * @param      index   where to insert the new component\n+     * @param obj   the component to insert\n+     * @param index where to insert the new component\n@@ -585,1 +669,1 @@\n-     *         ({@code index < 0 || index > size()})\n+     *                                        ({@code index < 0 || index > size()})\n@@ -590,1 +674,1 @@\n-                                                     + \" > \" + elementCount);\n+                    + \" > \" + elementCount);\n@@ -598,2 +682,2 @@\n-                         elementData, index + 1,\n-                         s - index);\n+                elementData, index + 1,\n+                s - index);\n@@ -613,1 +697,1 @@\n-     * @param   obj   the component to be added\n+     * @param obj the component to be added\n@@ -631,3 +715,3 @@\n-     * @param   obj   the component to be removed\n-     * @return  {@code true} if the argument was a component of this\n-     *          vector; {@code false} otherwise.\n+     * @param obj the component to be removed\n+     * @return {@code true} if the argument was a component of this\n+     * vector; {@code false} otherwise.\n@@ -663,1 +747,1 @@\n-     * @return  a clone of this vector\n+     * @return a clone of this vector\n@@ -703,4 +787,4 @@\n-     * supertype of {@code <E>}.\n-     * @param a the array into which the elements of the Vector are to\n-     *          be stored, if it is big enough; otherwise, a new array of the\n-     *          same runtime type is allocated for this purpose.\n+     *            supertype of {@code <E>}.\n+     * @param a   the array into which the elements of the Vector are to\n+     *            be stored, if it is big enough; otherwise, a new array of the\n+     *            same runtime type is allocated for this purpose.\n@@ -708,3 +792,3 @@\n-     * @throws ArrayStoreException if the runtime type of a, {@code <T>}, is not\n-     * a supertype of the runtime type, {@code <E>}, of every element in this\n-     * Vector\n+     * @throws ArrayStoreException  if the runtime type of a, {@code <T>}, is not\n+     *                              a supertype of the runtime type, {@code <E>}, of every element in this\n+     *                              Vector\n@@ -745,1 +829,1 @@\n-     *            ({@code index < 0 || index >= size()})\n+     *                                        ({@code index < 0 || index >= size()})\n@@ -759,1 +843,1 @@\n-     * @param index index of the element to replace\n+     * @param index   index of the element to replace\n@@ -763,1 +847,1 @@\n-     *         ({@code index < 0 || index >= size()})\n+     *                                        ({@code index < 0 || index >= size()})\n@@ -820,1 +904,1 @@\n-     * @param index index at which the specified element is to be inserted\n+     * @param index   index at which the specified element is to be inserted\n@@ -823,1 +907,1 @@\n-     *         ({@code index < 0 || index > size()})\n+     *                                        ({@code index < 0 || index > size()})\n@@ -838,1 +922,1 @@\n-     *         ({@code index < 0 || index >= size()})\n+     *                                        ({@code index < 0 || index >= size()})\n@@ -849,2 +933,2 @@\n-            System.arraycopy(elementData, index+1, elementData, index,\n-                             numMoved);\n+            System.arraycopy(elementData, index + 1, elementData, index,\n+                    numMoved);\n@@ -872,1 +956,1 @@\n-     * @param   c a collection whose elements will be tested for containment\n+     * @param c a collection whose elements will be tested for containment\n@@ -875,1 +959,1 @@\n-     *         specified collection\n+     * specified collection\n@@ -918,4 +1002,4 @@\n-     * @throws ClassCastException if the types of one or more elements\n-     *         in this vector are incompatible with the specified\n-     *         collection\n-     * (<a href=\"Collection.html#optional-restrictions\">optional<\/a>)\n+     * @throws ClassCastException   if the types of one or more elements\n+     *                              in this vector are incompatible with the specified\n+     *                              collection\n+     *                              (<a href=\"Collection.html#optional-restrictions\">optional<\/a>)\n@@ -923,4 +1007,4 @@\n-     *         elements and the specified collection does not support null\n-     *         elements\n-     * (<a href=\"Collection.html#optional-restrictions\">optional<\/a>),\n-     *         or if the specified collection is null\n+     *                              elements and the specified collection does not support null\n+     *                              elements\n+     *                              (<a href=\"Collection.html#optional-restrictions\">optional<\/a>),\n+     *                              or if the specified collection is null\n@@ -942,4 +1026,4 @@\n-     * @throws ClassCastException if the types of one or more elements\n-     *         in this vector are incompatible with the specified\n-     *         collection\n-     * (<a href=\"Collection.html#optional-restrictions\">optional<\/a>)\n+     * @throws ClassCastException   if the types of one or more elements\n+     *                              in this vector are incompatible with the specified\n+     *                              collection\n+     *                              (<a href=\"Collection.html#optional-restrictions\">optional<\/a>)\n@@ -947,4 +1031,4 @@\n-     *         elements and the specified collection does not support null\n-     *         elements\n-     *         (<a href=\"Collection.html#optional-restrictions\">optional<\/a>),\n-     *         or if the specified collection is null\n+     *                              elements and the specified collection does not support null\n+     *                              elements\n+     *                              (<a href=\"Collection.html#optional-restrictions\">optional<\/a>),\n+     *                              or if the specified collection is null\n@@ -972,0 +1056,1 @@\n+\n@@ -975,0 +1060,1 @@\n+\n@@ -1024,1 +1110,1 @@\n-     * @param c elements to be inserted into this Vector\n+     * @param c     elements to be inserted into this Vector\n@@ -1027,2 +1113,2 @@\n-     *         ({@code index < 0 || index > size()})\n-     * @throws NullPointerException if the specified collection is null\n+     *                                        ({@code index < 0 || index > size()})\n+     * @throws NullPointerException           if the specified collection is null\n@@ -1048,2 +1134,2 @@\n-                             elementData, index + numNew,\n-                             numMoved);\n+                    elementData, index + numNew,\n+                    numMoved);\n@@ -1113,1 +1199,1 @@\n-     * @param toIndex high endpoint (exclusive) of the subList\n+     * @param toIndex   high endpoint (exclusive) of the subList\n@@ -1116,3 +1202,3 @@\n-     *         {@code (fromIndex < 0 || toIndex > size)}\n-     * @throws IllegalArgumentException if the endpoint indices are out of order\n-     *         {@code (fromIndex > toIndex)}\n+     *                                   {@code (fromIndex < 0 || toIndex > size)}\n+     * @throws IllegalArgumentException  if the endpoint indices are out of order\n+     *                                   {@code (fromIndex > toIndex)}\n@@ -1122,1 +1208,1 @@\n-                                            this);\n+                this);\n@@ -1137,1 +1223,3 @@\n-    \/** Erases the gap from lo to hi, by sliding down following elements. *\/\n+    \/**\n+     * Erases the gap from lo to hi, by sliding down following elements.\n+     *\/\n@@ -1151,1 +1239,1 @@\n-     * @throws java.io.IOException if an I\/O error occurs\n+     * @throws java.io.IOException    if an I\/O error occurs\n@@ -1153,1 +1241,1 @@\n-     *         of a non-existing class\n+     *                                of a non-existing class\n@@ -1160,1 +1248,1 @@\n-        Object[] data = (Object[])gfields.get(\"elementData\", null);\n+        Object[] data = (Object[]) gfields.get(\"elementData\", null);\n@@ -1205,1 +1293,1 @@\n-            throw new IndexOutOfBoundsException(\"Index: \"+index);\n+            throw new IndexOutOfBoundsException(\"Index: \" + index);\n@@ -1409,1 +1497,3 @@\n-    \/** Similar to ArrayList Spliterator *\/\n+    \/**\n+     * Similar to ArrayList Spliterator\n+     *\/\n@@ -1416,1 +1506,3 @@\n-        \/** Creates new spliterator covering the given range. *\/\n+        \/**\n+         * Creates new spliterator covering the given range.\n+         *\/\n@@ -1440,1 +1532,1 @@\n-                new VectorSpliterator(array, lo, index = mid, expectedModCount);\n+                    new VectorSpliterator(array, lo, index = mid, expectedModCount);\n@@ -1449,1 +1541,1 @@\n-                action.accept((E)array[i]);\n+                action.accept((E) array[i]);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Vector.java","additions":220,"deletions":128,"binary":false,"changes":348,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-import jdk.internal.access.SharedSecrets;\n+import jdk.internal.access.SharedSecrets; \n@@ -95,2 +95,0 @@\n- * @since 1.5\n- * @author Doug Lea\n@@ -98,0 +96,2 @@\n+ * @author Doug Lea\n+ * @since 1.5\n@@ -100,1 +100,1 @@\n-    implements List<E>, RandomAccess, Cloneable, java.io.Serializable {\n+        implements List<E>, RandomAccess, Cloneable, java.io.Serializable {\n@@ -109,1 +109,3 @@\n-    \/** The array, accessed only via getArray\/setArray. *\/\n+    \/**\n+     * The array, accessed only via getArray\/setArray.\n+     *\/\n@@ -145,1 +147,1 @@\n-            es = ((CopyOnWriteArrayList<?>)c).getArray();\n+            es = ((CopyOnWriteArrayList<?>) c).getArray();\n@@ -158,1 +160,1 @@\n-     *        internal array)\n+     *                 internal array)\n@@ -186,2 +188,3 @@\n-     * @param o element to search for\n-     * @param es the array\n+     *\n+     * @param o    element to search for\n+     * @param es   the array\n@@ -189,1 +192,1 @@\n-     * @param to one past last index to search\n+     * @param to   one past last index to search\n@@ -207,2 +210,19 @@\n-     * @param o element to search for\n-     * @param es the array\n+     *\n+     * @param filter the predicate to search matching element for\n+     * @param es     the array\n+     * @param from   index of first element of range, first element to search\n+     * @param to     one past last element of range, last element to search\n+     * @return index of element, or -1 if absent\n+     *\/\n+    private static <E> int findIndexInRange(Predicate<E> filter, E[] es, int from, int to) {\n+        for (int i = from; i < to; i++)\n+            if (filter.test(es[i]))\n+                return i;\n+        return -1;\n+    }\n+\n+    \/**\n+     * static version of lastIndexOf.\n+     *\n+     * @param o    element to search for\n+     * @param es   the array\n@@ -210,1 +230,1 @@\n-     * @param to one past last element of range, first element to search\n+     * @param to   one past last element of range, first element to search\n@@ -226,0 +246,16 @@\n+    \/**\n+     * static version of lastIndexOf.\n+     *\n+     * @param filter the predicate to search matching element for\n+     * @param es     the array\n+     * @param from   index of first element of range, last element to search\n+     * @param to     one past last element of range, first element to search\n+     * @return index of element, or -1 if absent\n+     *\/\n+    private static <E> int findLastIndexInRange(Predicate<? super E> filter, E[] es, int from, int to) {\n+        for (int i = to - 1; i >= from; i--)\n+            if (filter.test(es[i]))\n+                return i;\n+        return -1;\n+    }\n+\n@@ -246,0 +282,38 @@\n+    \/**\n+     * Returns the index of the first occurrence of a matching element in\n+     * this list, searching backwards from {@code index}, or returns -1 if\n+     * the element is not found.\n+     * More formally, returns the lowest index {@code i} such that\n+     * {@code filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter the predicate to search matching element for\n+     * @return the index of the last occurrence of the element in\n+     * this list;\n+     * -1 if the element is not found.\n+     *\/\n+    @SuppressWarnings(\"unchecked\")\n+    public int findIndex(Predicate<? super E> filter) {\n+        E[] es = (E[]) getArray();\n+        return findIndexInRange(filter, es, 0, es.length);\n+    }\n+\n+    \/**\n+     * Returns the index of the last occurrence of a matching element in\n+     * this list, searching backwards from {@code index}, or returns -1 if\n+     * the element is not found.\n+     * More formally, returns the highest index {@code i} such that\n+     * {@code filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter the predicate to search matching element for\n+     * @return the index of the last occurrence of the element in\n+     * this list;\n+     * -1 if the element is not found.\n+     *\/\n+    @SuppressWarnings(\"unchecked\")\n+    public int findLastIndex(Predicate<? super E> filter) {\n+        E[] es = (E[]) getArray();\n+        return findLastIndexInRange(filter, es, 0, es.length);\n+    }\n+\n@@ -254,1 +328,1 @@\n-     * @param e element to search for\n+     * @param e     element to search for\n@@ -257,2 +331,2 @@\n-     *         this list at position {@code index} or later in the list;\n-     *         {@code -1} if the element is not found.\n+     * this list at position {@code index} or later in the list;\n+     * {@code -1} if the element is not found.\n@@ -282,1 +356,1 @@\n-     * @param e element to search for\n+     * @param e     element to search for\n@@ -285,2 +359,2 @@\n-     *         less than or equal to {@code index} in this list;\n-     *         -1 if the element is not found.\n+     * less than or equal to {@code index} in this list;\n+     * -1 if the element is not found.\n@@ -288,1 +362,1 @@\n-     *         than or equal to the current size of this list\n+     *                                   than or equal to the current size of this list\n@@ -305,1 +379,1 @@\n-                (CopyOnWriteArrayList<E>) super.clone();\n+                    (CopyOnWriteArrayList<E>) super.clone();\n@@ -359,1 +433,1 @@\n-     *\n+     * <p>\n@@ -367,3 +441,3 @@\n-     * @throws ArrayStoreException if the runtime type of the specified array\n-     *         is not a supertype of the runtime type of every element in\n-     *         this list\n+     * @throws ArrayStoreException  if the runtime type of the specified array\n+     *                              is not a supertype of the runtime type of every element in\n+     *                              this list\n@@ -493,1 +567,1 @@\n-                                 numMoved);\n+                        numMoved);\n@@ -540,1 +614,1 @@\n-                                 numMoved);\n+                        numMoved);\n@@ -604,1 +678,1 @@\n-            if (snapshot != current) findIndex: {\n+            if (snapshot != current) findIndex:{\n@@ -608,1 +682,1 @@\n-                        && Objects.equals(o, current[i])) {\n+                            && Objects.equals(o, current[i])) {\n@@ -624,2 +698,2 @@\n-                             newElements, index,\n-                             len - index - 1);\n+                    newElements, index,\n+                    len - index - 1);\n@@ -639,1 +713,1 @@\n-     * @param toIndex index after last element to be removed\n+     * @param toIndex   index after last element to be removed\n@@ -641,1 +715,1 @@\n-     *         ({@code fromIndex < 0 || toIndex > size() || toIndex < fromIndex})\n+     *                                   ({@code fromIndex < 0 || toIndex > size() || toIndex < fromIndex})\n@@ -658,1 +732,1 @@\n-                                 fromIndex, numMoved);\n+                        fromIndex, numMoved);\n@@ -673,1 +747,1 @@\n-            && addIfAbsent(e, snapshot);\n+                && addIfAbsent(e, snapshot);\n@@ -689,1 +763,1 @@\n-                        && Objects.equals(e, current[i]))\n+                            && Objects.equals(e, current[i]))\n@@ -692,1 +766,1 @@\n-                        return false;\n+                    return false;\n@@ -707,1 +781,1 @@\n-     *         specified collection\n+     * specified collection\n@@ -728,3 +802,3 @@\n-     * @throws ClassCastException if the class of an element of this list\n-     *         is incompatible with the specified collection\n-     * (<a href=\"{@docRoot}\/java.base\/java\/util\/Collection.html#optional-restrictions\">optional<\/a>)\n+     * @throws ClassCastException   if the class of an element of this list\n+     *                              is incompatible with the specified collection\n+     *                              (<a href=\"{@docRoot}\/java.base\/java\/util\/Collection.html#optional-restrictions\">optional<\/a>)\n@@ -732,3 +806,3 @@\n-     *         specified collection does not permit null elements\n-     * (<a href=\"{@docRoot}\/java.base\/java\/util\/Collection.html#optional-restrictions\">optional<\/a>),\n-     *         or if the specified collection is null\n+     *                              specified collection does not permit null elements\n+     *                              (<a href=\"{@docRoot}\/java.base\/java\/util\/Collection.html#optional-restrictions\">optional<\/a>),\n+     *                              or if the specified collection is null\n@@ -749,3 +823,3 @@\n-     * @throws ClassCastException if the class of an element of this list\n-     *         is incompatible with the specified collection\n-     * (<a href=\"{@docRoot}\/java.base\/java\/util\/Collection.html#optional-restrictions\">optional<\/a>)\n+     * @throws ClassCastException   if the class of an element of this list\n+     *                              is incompatible with the specified collection\n+     *                              (<a href=\"{@docRoot}\/java.base\/java\/util\/Collection.html#optional-restrictions\">optional<\/a>)\n@@ -753,3 +827,3 @@\n-     *         specified collection does not permit null elements\n-     * (<a href=\"{@docRoot}\/java.base\/java\/util\/Collection.html#optional-restrictions\">optional<\/a>),\n-     *         or if the specified collection is null\n+     *                              specified collection does not permit null elements\n+     *                              (<a href=\"{@docRoot}\/java.base\/java\/util\/Collection.html#optional-restrictions\">optional<\/a>),\n+     *                              or if the specified collection is null\n@@ -789,1 +863,1 @@\n-                    indexOfRange(e, cs, 0, added) < 0)\n+                        indexOfRange(e, cs, 0, added) < 0)\n@@ -823,1 +897,1 @@\n-            ((CopyOnWriteArrayList<?>)c).getArray() : c.toArray();\n+                ((CopyOnWriteArrayList<?>) c).getArray() : c.toArray();\n@@ -831,1 +905,1 @@\n-                             c.getClass() == ArrayList.class)) {\n+                    c.getClass() == ArrayList.class)) {\n@@ -851,2 +925,2 @@\n-     *        from the specified collection\n-     * @param c collection containing elements to be added to this list\n+     *              from the specified collection\n+     * @param c     collection containing elements to be added to this list\n@@ -855,2 +929,2 @@\n-     * @throws NullPointerException if the specified collection is null\n-     * @see #add(int,Object)\n+     * @throws NullPointerException      if the specified collection is null\n+     * @see #add(int, Object)\n@@ -875,2 +949,2 @@\n-                                 newElements, index + cs.length,\n-                                 numMoved);\n+                        newElements, index + cs.length,\n+                        numMoved);\n@@ -908,0 +982,1 @@\n+\n@@ -911,0 +986,1 @@\n+\n@@ -980,1 +1056,1 @@\n-        Arrays.sort(es, i, end, (Comparator<Object>)c);\n+        Arrays.sort(es, i, end, (Comparator<Object>) c);\n@@ -990,2 +1066,2 @@\n-     *               (int), followed by all of its elements (each an Object)\n-     *               in the proper order.\n+     * (int), followed by all of its elements (each an Object)\n+     * in the proper order.\n@@ -994,1 +1070,1 @@\n-        throws java.io.IOException {\n+            throws java.io.IOException {\n@@ -1009,0 +1085,1 @@\n+     *\n@@ -1011,2 +1088,2 @@\n-     *         could not be found\n-     * @throws java.io.IOException if an I\/O error occurs\n+     *                                could not be found\n+     * @throws java.io.IOException    if an I\/O error occurs\n@@ -1015,1 +1092,1 @@\n-        throws java.io.IOException, ClassNotFoundException {\n+            throws java.io.IOException, ClassNotFoundException {\n@@ -1068,1 +1145,1 @@\n-        List<?> list = (List<?>)o;\n+        List<?> list = (List<?>) o;\n@@ -1158,1 +1235,1 @@\n-            (getArray(), Spliterator.IMMUTABLE | Spliterator.ORDERED);\n+                (getArray(), Spliterator.IMMUTABLE | Spliterator.ORDERED);\n@@ -1162,1 +1239,3 @@\n-        \/** Snapshot of the array *\/\n+        \/**\n+         * Snapshot of the array\n+         *\/\n@@ -1164,1 +1243,3 @@\n-        \/** Index of element to be returned by subsequent call to next.  *\/\n+        \/**\n+         * Index of element to be returned by subsequent call to next.\n+         *\/\n@@ -1182,1 +1263,1 @@\n-            if (! hasNext())\n+            if (!hasNext())\n@@ -1189,1 +1270,1 @@\n-            if (! hasPrevious())\n+            if (!hasPrevious())\n@@ -1204,0 +1285,1 @@\n+         *\n@@ -1205,1 +1287,1 @@\n-         *         is not supported by this iterator.\n+         *                                       is not supported by this iterator.\n@@ -1213,0 +1295,1 @@\n+         *\n@@ -1214,1 +1297,1 @@\n-         *         is not supported by this iterator.\n+         *                                       is not supported by this iterator.\n@@ -1222,0 +1305,1 @@\n+         *\n@@ -1223,1 +1307,1 @@\n-         *         is not supported by this iterator.\n+         *                                       is not supported by this iterator.\n@@ -1251,1 +1335,1 @@\n-     * @param toIndex high endpoint (exclusive) of the subList\n+     * @param toIndex   high endpoint (exclusive) of the subList\n@@ -1366,0 +1450,28 @@\n+        @SuppressWarnings(\"unchecked\")\n+        public int findIndex(Predicate<? super E> filter) {\n+            final E[] es;\n+            final int offset;\n+            final int size;\n+            synchronized (lock) {\n+                es = (E[]) getArrayChecked();\n+                offset = this.offset;\n+                size = this.size;\n+            }\n+            int i = findIndexInRange(filter, es, offset, offset + size);\n+            return (i == -1) ? -1 : i - offset;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            final E[] es;\n+            final int offset;\n+            final int size;\n+            synchronized (lock) {\n+                es = (E[]) getArrayChecked();\n+                offset = this.offset;\n+                size = this.size;\n+            }\n+            int i = findLastIndexInRange(filter, es, offset, offset + size);\n+            return (i == -1) ? -1 : i - offset;\n+        }\n+\n@@ -1410,1 +1522,1 @@\n-            Iterator<?> it = ((List<?>)o).iterator();\n+            Iterator<?> it = ((List<?>) o).iterator();\n@@ -1504,1 +1616,1 @@\n-                    CopyOnWriteArrayList.this.addAll(offset + size, c);\n+                        CopyOnWriteArrayList.this.addAll(offset + size, c);\n@@ -1515,1 +1627,1 @@\n-                    CopyOnWriteArrayList.this.addAll(offset + index, c);\n+                        CopyOnWriteArrayList.this.addAll(offset + index, c);\n@@ -1583,1 +1695,1 @@\n-                    CopyOnWriteArrayList.this, index, offset, size);\n+                        CopyOnWriteArrayList.this, index, offset, size);\n@@ -1598,1 +1710,2 @@\n-            int i, end; final Object[] es;\n+            int i, end;\n+            final Object[] es;\n@@ -1643,1 +1756,1 @@\n-                    filter, offset, offset + size);\n+                        filter, offset, offset + size);\n@@ -1753,0 +1866,1 @@\n+\n@@ -1758,3 +1872,12 @@\n-            public boolean hasNext() { return it.hasPrevious(); }\n-            public E next() { return it.previous(); }\n-            public void remove() { it.remove(); }\n+\n+            public boolean hasNext() {\n+                return it.hasPrevious();\n+            }\n+\n+            public E next() {\n+                return it.previous();\n+            }\n+\n+            public void remove() {\n+                it.remove();\n+            }\n@@ -1871,1 +1994,1 @@\n-                if (!(o1==null ? o2==null : o1.equals(o2)))\n+                if (!(o1 == null ? o2 == null : o1.equals(o2)))\n@@ -1881,1 +2004,1 @@\n-                hashCode = 31*hashCode + (e==null ? 0 : e.hashCode());\n+                hashCode = 31 * hashCode + (e == null ? 0 : e.hashCode());\n@@ -1936,1 +2059,1 @@\n-            if (! it.hasNext())\n+            if (!it.hasNext())\n@@ -1941,1 +2064,1 @@\n-            for (;;) {\n+            for (; ; ) {\n@@ -1944,1 +2067,1 @@\n-                if (! it.hasNext())\n+                if (!it.hasNext())\n@@ -2012,0 +2135,7 @@\n+        public int findIndex(Predicate<? super  E> filter) {\n+            synchronized (lock) {\n+                int i = base.indexOf(filter);\n+                return i == -1 ? -1 : base.size() - i - 1;\n+            }\n+        }\n+\n@@ -2019,0 +2149,7 @@\n+        public int findLastIndex(Predicate<? super  E> filter) {\n+            synchronized (lock) {\n+                int i = base.lastIndexOf(filter);\n+                return i == -1 ? -1 : base.size() - i - 1;\n+            }\n+        }\n+\n@@ -2083,1 +2220,3 @@\n-    \/** Initializes the lock; for use when deserializing or cloning. *\/\n+    \/**\n+     * Initializes the lock; for use when deserializing or cloning.\n+     *\/\n@@ -2087,9 +2226,10 @@\n-            (java.security.PrivilegedAction<Field>) () -> {\n-                try {\n-                    Field f = CopyOnWriteArrayList.class\n-                        .getDeclaredField(\"lock\");\n-                    f.setAccessible(true);\n-                    return f;\n-                } catch (ReflectiveOperationException e) {\n-                    throw new Error(e);\n-                }});\n+                (java.security.PrivilegedAction<Field>) () -> {\n+                    try {\n+                        Field f = CopyOnWriteArrayList.class\n+                                .getDeclaredField(\"lock\");\n+                        f.setAccessible(true);\n+                        return f;\n+                    } catch (ReflectiveOperationException e) {\n+                        throw new Error(e);\n+                    }\n+                });\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CopyOnWriteArrayList.java","additions":240,"deletions":100,"binary":false,"changes":340,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.util.function.Predicate;\n@@ -507,0 +508,9 @@\n+    public int findIndex(Predicate<? super A> filter) {\n+        int i = 0;\n+        for (List<A> l = this; l.tail != null; l = l.tail, i++) {\n+            if (filter.test(l.head))\n+                return i;\n+        }\n+        return -1;\n+    }\n+\n@@ -517,0 +527,10 @@\n+    public int findLastIndex(Predicate<? super A> filter) {\n+        int last = -1;\n+        int i = 0;\n+        for (List<A> l = this; l.tail != null; l = l.tail, i++) {\n+            if (filter.test(l.head))\n+                last = i;\n+        }\n+        return last;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/List.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.util.function.Predicate;\n@@ -129,0 +130,4 @@\n+    public int indexOf(Predicate<? super E> filter) {\n+        return list.indexOf(filter);\n+    }\n+\n@@ -133,0 +138,2 @@\n+    public int lastIndexOf(Predicate<? super E> filter) { return list.lastIndexOf(filter); }\n+\n","filename":"test\/jdk\/java\/util\/SequencedCollection\/SimpleList.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -438,0 +438,5 @@\n+                @Override\n+                public int findIndex(Predicate<? super Integer> filter) {\n+                    return l.findIndex(filter);\n+                }\n+\n@@ -443,0 +448,5 @@\n+                @Override\n+                public int findLastIndex(Predicate<? super Integer> filter) {\n+                    return l.findLastIndex(filter);\n+                }\n+\n","filename":"test\/jdk\/java\/util\/Spliterator\/SpliteratorTraversingAndSplittingTest.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}