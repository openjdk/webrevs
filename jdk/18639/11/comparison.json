{"files":[{"patch":"@@ -308,0 +308,27 @@\n+    \/**\n+     * Returns the index of the first occurrence of a matching element\n+     * in this list, or -1 if this list does not contain a matching element.\n+     * More formally, returns the lowest index {@code i} such that\n+     * {@code filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter a predicate to search matching element for\n+     * @return the index of the first occurrence of the specified element in\n+     *         this list, or -1 if this list does not contain the element\n+     * @throws NullPointerException if passed filter is null\n+     *\/\n+    public int findIndex(Predicate<? super E> filter) {\n+        return findIndexInRange(filter, 0, size);\n+    }\n+\n+    int findIndexInRange(Predicate<? super E> filter, int start, int end) {\n+        Objects.requireNonNull(filter);\n+        Object[] es = elementData;\n+        for (int i = start; i < end; i++) {\n+            if (filter.test(elementAt(es, i))) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n@@ -337,0 +364,27 @@\n+    \/**\n+     * Returns the index of the last occurrence of a matching element\n+     * in this list, or -1 if this list does not contain a matching element.\n+     * More formally, returns the highest index {@code i} such that\n+     * {@code filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter a predicate to search matching element for\n+     * @return the index of the last occurrence of the specified element in\n+     *         this list, or -1 if this list does not contain the element\n+     * @throws NullPointerException if passed filter is null\n+     *\/\n+    public int findLastIndex(Predicate<? super E> filter) {\n+        return findLastIndexInRange(filter, 0, size);\n+    }\n+\n+    int findLastIndexInRange(Predicate<? super E> filter, int start, int end) {\n+        Objects.requireNonNull(filter);\n+        Object[] es = elementData;\n+        for (int i = end - 1; i >= start; i--) {\n+            if (filter.test(elementAt(es, i))) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n@@ -1352,0 +1406,6 @@\n+        public int findIndex(Predicate<? super E> filter) {\n+            int index = root.findIndexInRange(filter, offset, offset + size);\n+            checkForComodification();\n+            return index >= 0 ? index - offset : -1;\n+        }\n+\n@@ -1358,0 +1418,6 @@\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            int index = root.findLastIndexInRange(filter, offset, offset + size);\n+            checkForComodification();\n+            return index >= 0 ? index - offset : -1;\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/ArrayList.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import java.util.function.Predicate;\n@@ -4252,0 +4253,9 @@\n+        public int findIndex(Predicate<? super E> filter) {\n+            Objects.requireNonNull(filter);\n+            E[] a = this.a;\n+            for (int i = 0; i < a.length; i++)\n+                if (filter.test(a[i]))\n+                    return i;\n+            return -1;\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1513,0 +1513,3 @@\n+        public int findIndex(Predicate<? super E> filter) {\n+            return list.findIndex(filter);\n+        }\n@@ -1514,0 +1517,3 @@\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            return list.findLastIndex(filter);\n+        }\n@@ -2734,0 +2740,4 @@\n+        public int findIndex(Predicate<? super E> filter) {\n+            Objects.requireNonNull(filter);\n+            synchronized (mutex) {return list.findIndex(filter);}\n+        }\n@@ -2737,0 +2747,4 @@\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            Objects.requireNonNull(filter);\n+            synchronized (mutex) {return list.findLastIndex(filter);}\n+        }\n@@ -3768,0 +3782,2 @@\n+        public int findIndex(Predicate<? super E> filter) { return list.findIndex(filter); }\n+        public int findLastIndex(Predicate<? super E> filter) { return list.findLastIndex(filter); }\n@@ -5397,0 +5413,4 @@\n+        public int findIndex(Predicate<? super E> filter) {\n+            return filter.test(element) ? 0 : -1;\n+        }\n+\n@@ -5401,0 +5421,5 @@\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            Objects.requireNonNull(filter);\n+            return filter.test(element) ? n - 1 : -1;\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/Collections.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -514,0 +514,10 @@\n+        public int findIndex(Predicate<? super E> filter) {\n+            Objects.requireNonNull(filter);\n+            for (int i = 0, s = size(); i < s; i++) {\n+                if (filter.test(get(i))) {\n+                    return i;\n+                }\n+            }\n+            return -1;\n+        }\n+\n@@ -527,0 +537,10 @@\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            Objects.requireNonNull(filter);\n+            for (int i = size() - 1; i >= 0; i--) {\n+                if (filter.test(get(i))) {\n+                    return i;\n+                }\n+            }\n+            return -1;\n+        }\n+\n@@ -607,0 +627,12 @@\n+        @SuppressWarnings(\"unchecked\")\n+        public int findIndex(Predicate<? super E> filter) {\n+            Objects.requireNonNull(filter);\n+            if (filter.test(e0)) {\n+                return 0;\n+            } else if (e1 != EMPTY && filter.test((E)e1)) {\n+                return 1;\n+            } else {\n+                return -1;\n+            }\n+        }\n+\n@@ -619,0 +651,12 @@\n+        @SuppressWarnings(\"unchecked\")\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            Objects.requireNonNull(filter);\n+            if (e1 != EMPTY && filter.test((E)e1)) {\n+                return 1;\n+            } else if (filter.test(e0)) {\n+                return 0;\n+            } else {\n+                return -1;\n+            }\n+        }\n+\n@@ -734,0 +778,11 @@\n+        public int findIndex(Predicate<? super E> filter) {\n+            Objects.requireNonNull(filter);\n+            E[] es = elements;\n+            for (int i = 0; i < es.length; i++) {\n+                if (filter.test(es[i])) {\n+                    return i;\n+                }\n+            }\n+            return -1;\n+        }\n+\n@@ -747,0 +802,11 @@\n+\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            Objects.requireNonNull(filter);\n+            E[] es = elements;\n+            for (int i = es.length - 1; i >= 0; i--) {\n+                if (filter.test(es[i])) {\n+                    return i;\n+                }\n+            }\n+            return -1;\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/ImmutableCollections.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -625,0 +625,46 @@\n+    \/**\n+     * Returns the index of the first occurrence of a matching element in this\n+     * list, or -1 if this list does not contain the element.  More formally,\n+     * returns the lowest index {@code i} such that\n+     * {@code filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter a predicate to search matching element for\n+     * @return the index of the first occurrence of a matching element in\n+     * this list, or -1 if this list does not contain the element\n+     * @throws NullPointerException if passed filter is null\n+     *\/\n+    public int findIndex(Predicate<? super E> filter) {\n+        Objects.requireNonNull(filter);\n+        int index = 0;\n+        for (Node<E> x = first; x != null; x = x.next) {\n+            if (filter.test(x.item))\n+                return index;\n+            index++;\n+        }\n+        return -1;\n+    }\n+\n+    \/**\n+     * Returns the index of the last occurrence of a matching element\n+     * in this list, or -1 if this list does not contain the element.\n+     * More formally, returns the highest index {@code i} such that\n+     * {@code filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter a predicate to search matching element for\n+     * @return the index of the last occurrence of a matching element in\n+     * this list, or -1 if this list does not contain the element\n+     * @throws NullPointerException if passed filter is null\n+     *\/\n+    public int findLastIndex(Predicate<? super E> filter) {\n+        Objects.requireNonNull(filter);\n+        int index = size;\n+        for (Node<E> x = last; x != null; x = x.prev) {\n+            index--;\n+            if (filter.test(x.item))\n+                return index;\n+        }\n+        return -1;\n+    }\n+\n@@ -1460,0 +1506,4 @@\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            return rlist.findLastIndex(filter);\n+        }\n+\n@@ -1464,0 +1514,4 @@\n+        public int findIndex(Predicate<? super E> filter) {\n+            return rlist.findIndex(filter);\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/LinkedList.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.function.Predicate;\n@@ -673,0 +674,60 @@\n+    \/**\n+     * Returns the index of the first occurrence of matching element\n+     * in this list, or -1 if this list does not contain the element.\n+     * More formally, returns the lowest index {@code i} such that\n+     * {@code filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @implSpec\n+     * This implementation first gets a list iterator (with\n+     * {@code listIterator()}).  Then, it iterates over the list until a\n+     * matching element is found or the beginning of the list is reached.\n+     *\n+     * @param filter a predicate to search matching element for\n+     * @return the index of the first occurrence of the specified element in\n+     *         this list, or -1 if this list does not contain the element\n+     * @throws NullPointerException if passed filter is null\n+     *\/\n+    default int findIndex(Predicate<? super E> filter) {\n+        Objects.requireNonNull(filter);\n+        ListIterator<E> it = listIterator();\n+        while (it.hasNext()) {\n+            E e = it.next();\n+            if (filter.test(e)) {\n+                return it.previousIndex();\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    \/**\n+     * Returns the index of the last occurrence of matching element\n+     * in this list, or -1 if this list does not contain the element.\n+     * More formally, returns the highest index {@code i} such that\n+     * {@code Objects.equals(o, get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @implSpec\n+     * This implementation first gets a list iterator that points to the end\n+     * of the list (with {@code listIterator(size())}).  Then, it iterates\n+     * backwards over the list until the matching element is found, or the\n+     * beginning of the list is reached.\n+     *\n+     * @param filter a predicate to search matching element for\n+     * @return the index of the last occurrence of the specified element in\n+     *         this list, or -1 if this list does not contain the element\n+     * @throws NullPointerException if passed filter is null\n+     *\/\n+    default int findLastIndex(Predicate<? super E> filter) {\n+        Objects.requireNonNull(filter);\n+        ListIterator<E> it = listIterator(size());\n+        while (it.hasPrevious()) {\n+            E e = it.previous();\n+            if (filter.test(e)) {\n+                return it.nextIndex();\n+            }\n+        }\n+        return -1;\n+    }\n+\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/List.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -349,0 +349,5 @@\n+    public int findIndex(Predicate<? super E> filter) {\n+        int i = base.findLastIndex(filter);\n+        return i == -1 ? -1 : base.size() - i - 1;\n+    }\n+\n@@ -354,0 +359,5 @@\n+    public int findLastIndex(Predicate<? super E> filter) {\n+        int i = base.findIndex(filter);\n+        return i == -1 ? -1 : base.size() - i - 1;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/ReverseOrderListView.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -377,0 +377,17 @@\n+    \/**\n+     * Returns the index of the first occurrence of a matching element in\n+     * this vector, searching forwards from {@code index}, or returns -1 if\n+     * no matching element is found.\n+     * More formally, returns the lowest index {@code i} such that\n+     * {@code (filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter a predicate to search matching element for\n+     * @return the index of the first occurrence of a matching element in\n+     * this vector or -1 if no matching element is found\n+     *\/\n+    public int findIndex(Predicate<? super E> filter) {\n+        return findIndex(filter, 0);\n+    }\n+\n+\n@@ -406,0 +423,26 @@\n+    \/**\n+     * Returns the index of the first occurrence of a matching element in\n+     * this vector, searching forwards from {@code index}, or returns -1 if\n+     * no matching element is found.\n+     * More formally, returns the lowest index {@code i} such that\n+     * {@code (i >= index && filter.test(get(i)))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter a predicate to search matching element for\n+     * @param index index to start searching from\n+     * @return the index of the first occurrence of the element in\n+     * this vector at position {@code index} or later in the vector;\n+     * {@code -1} if the element is not found.\n+     * @throws IndexOutOfBoundsException if the specified index is negative\n+     * @see Object#equals(Object)\n+     *\/\n+    public synchronized int findIndex(Predicate<? super E> filter, int index) {\n+        Objects.requireNonNull(filter);\n+        for (int i = index; i < elementCount; i++) {\n+            if (filter.test(elementData(i))) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n@@ -421,0 +464,15 @@\n+    \/**\n+     * Returns the index of the last occurrence of a matching element in\n+     * this vector, or returns -1 if no matching element is found.\n+     * More formally, returns the highest index {@code i} such that\n+     * {@code (filter.test(get(i)))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter a predicate to search matching element for\n+     * @return the index of the last occurrence of a matching element in\n+     * this vector or -1 if no matching element is found\n+     *\/\n+    public synchronized int findLastIndex(Predicate<? super E> filter) {\n+        return findLastIndex(filter, elementCount - 1);\n+    }\n+\n@@ -453,0 +511,29 @@\n+    \/**\n+     * Returns the index of the last occurrence of a matching element in\n+     * this vector, searching backwards from {@code index}, or returns -1 if\n+     * no matching element is found.\n+     * More formally, returns the highest index {@code i} such that\n+     * {@code (i <= index && filter.test(get(i)))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter a predicate to search matching element for\n+     * @param index index to start searching backwards from\n+     * @return the index of the last occurrence of the element at position\n+     * less than or equal to {@code index} in this vector;\n+     * -1 if the element is not found.\n+     * @throws IndexOutOfBoundsException if the specified index is greater\n+     *                                   than or equal to the current size of this vector\n+     *\/\n+    public synchronized int findLastIndex(Predicate<? super E> filter, int index) {\n+        Objects.requireNonNull(filter);\n+        if (index >= elementCount)\n+            throw new IndexOutOfBoundsException(index + \" >= \" + elementCount);\n+\n+        for (int i = index; i >= 0; i--) {\n+            if (filter.test(elementData(i))) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/Vector.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -205,0 +205,17 @@\n+    \/**\n+     * static version of findIndex.\n+     *\n+     * @param filter the predicate to search matching element for\n+     * @param es     the array\n+     * @param from   index of first element of range, first element to search\n+     * @param to     one past last element of range, last element to search\n+     * @return index of element, or -1 if absent\n+     *\/\n+    private static <E> int findIndexInRange(Predicate<E> filter, E[] es, int from, int to) {\n+        Objects.requireNonNull(filter);\n+        for (int i = from; i < to; i++)\n+            if (filter.test(es[i]))\n+                return i;\n+        return -1;\n+    }\n+\n@@ -226,0 +243,16 @@\n+    \/**\n+     * static version of findLastIndex.\n+     *\n+     * @param filter the predicate to search matching element for\n+     * @param es     the array\n+     * @param from   index of first element of range, last element to search\n+     * @param to     one past last element of range, first element to search\n+     * @return index of element, or -1 if absent\n+     *\/\n+    private static <E> int findLastIndexInRange(Predicate<? super E> filter, E[] es, int from, int to) {\n+        for (int i = to - 1; i >= from; i--)\n+            if (filter.test(es[i]))\n+                return i;\n+        return -1;\n+    }\n+\n@@ -246,0 +279,38 @@\n+    \/**\n+     * Returns the index of the first occurrence of a matching element in\n+     * this list, searching backwards from {@code index}, or returns -1 if\n+     * the element is not found.\n+     * More formally, returns the lowest index {@code i} such that\n+     * {@code filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter the predicate to search matching element for\n+     * @return the index of the last occurrence of the element in\n+     * this list;\n+     * -1 if the element is not found.\n+     *\/\n+    @SuppressWarnings(\"unchecked\")\n+    public int findIndex(Predicate<? super E> filter) {\n+        E[] es = (E[]) getArray();\n+        return findIndexInRange(filter, es, 0, es.length);\n+    }\n+\n+    \/**\n+     * Returns the index of the last occurrence of a matching element in\n+     * this list, searching backwards from {@code index}, or returns -1 if\n+     * the element is not found.\n+     * More formally, returns the highest index {@code i} such that\n+     * {@code filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter the predicate to search matching element for\n+     * @return the index of the last occurrence of the element in\n+     * this list;\n+     * -1 if the element is not found.\n+     *\/\n+    @SuppressWarnings(\"unchecked\")\n+    public int findLastIndex(Predicate<? super E> filter) {\n+        E[] es = (E[]) getArray();\n+        return findLastIndexInRange(filter, es, 0, es.length);\n+    }\n+\n@@ -1366,0 +1437,30 @@\n+        @SuppressWarnings(\"unchecked\")\n+        public int findIndex(Predicate<? super E> filter) {\n+            Objects.requireNonNull(filter);\n+            final E[] es;\n+            final int offset;\n+            final int size;\n+            synchronized (lock) {\n+                es = (E[]) getArrayChecked();\n+                offset = this.offset;\n+                size = this.size;\n+            }\n+            int i = findIndexInRange(filter, es, offset, offset + size);\n+            return (i == -1) ? -1 : i - offset;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            Objects.requireNonNull(filter);\n+            final E[] es;\n+            final int offset;\n+            final int size;\n+            synchronized (lock) {\n+                es = (E[]) getArrayChecked();\n+                offset = this.offset;\n+                size = this.size;\n+            }\n+            int i = findLastIndexInRange(filter, es, offset, offset + size);\n+            return (i == -1) ? -1 : i - offset;\n+        }\n+\n@@ -2012,0 +2113,7 @@\n+        public int findIndex(Predicate<? super  E> filter) {\n+            synchronized (lock) {\n+                int i = base.findLastIndex(filter);\n+                return i == -1 ? -1 : base.size() - i - 1;\n+            }\n+        }\n+\n@@ -2019,0 +2127,8 @@\n+        public int findLastIndex(Predicate<? super  E> filter) {\n+            Objects.requireNonNull(filter);\n+            synchronized (lock) {\n+                int i = base.findIndex(filter);\n+                return i == -1 ? -1 : base.size() - i - 1;\n+            }\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CopyOnWriteArrayList.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.util.Objects;\n@@ -37,0 +38,1 @@\n+import java.util.function.Predicate;\n@@ -507,0 +509,10 @@\n+    public int findIndex(Predicate<? super A> filter) {\n+        Objects.requireNonNull(filter);\n+        int i = 0;\n+        for (List<A> l = this; l.tail != null; l = l.tail, i++) {\n+            if (filter.test(l.head))\n+                return i;\n+        }\n+        return -1;\n+    }\n+\n@@ -517,0 +529,11 @@\n+    public int findLastIndex(Predicate<? super A> filter) {\n+        Objects.requireNonNull(filter);\n+        int last = -1;\n+        int i = 0;\n+        for (List<A> l = this; l.tail != null; l = l.tail, i++) {\n+            if (filter.test(l.head))\n+                last = i;\n+        }\n+        return last;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/List.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.util.function.Predicate;\n@@ -129,0 +130,4 @@\n+    public int indexOf(Predicate<? super E> filter) {\n+        return list.indexOf(filter);\n+    }\n+\n@@ -133,0 +138,4 @@\n+    public int lastIndexOf(Predicate<? super E> filter) {\n+    return list.lastIndexOf(filter);\n+    }\n+\n","filename":"test\/jdk\/java\/util\/SequencedCollection\/SimpleList.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -88,0 +88,1 @@\n+import java.util.function.Predicate;\n@@ -438,0 +439,5 @@\n+                @Override\n+                public int findIndex(Predicate<? super Integer> filter) {\n+                    return l.findIndex(filter);\n+                }\n+\n@@ -443,0 +449,5 @@\n+                @Override\n+                public int findLastIndex(Predicate<? super Integer> filter) {\n+                    return l.findLastIndex(filter);\n+                }\n+\n","filename":"test\/jdk\/java\/util\/Spliterator\/SpliteratorTraversingAndSplittingTest.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"}]}