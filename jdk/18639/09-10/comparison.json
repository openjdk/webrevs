{"files":[{"patch":"@@ -28,2 +28,0 @@\n-import jdk.internal.util.ArraysSupport;\n-\n@@ -37,0 +35,2 @@\n+import jdk.internal.util.ArraysSupport;\n+\n@@ -85,2 +85,3 @@\n- * @author Lee Boynton\n- * @author Jonathan Payne\n+ *\n+ * @author  Lee Boynton\n+ * @author  Jonathan Payne\n@@ -89,1 +90,1 @@\n- * @since 1.0\n+ * @since   1.0\n@@ -92,2 +93,3 @@\n-        extends AbstractList<E>\n-        implements List<E>, RandomAccess, Cloneable, java.io.Serializable {\n+    extends AbstractList<E>\n+    implements List<E>, RandomAccess, Cloneable, java.io.Serializable\n+{\n@@ -125,3 +127,1 @@\n-    \/**\n-     * use serialVersionUID from JDK 1.0.2 for interoperability\n-     *\/\n+    \/** use serialVersionUID from JDK 1.0.2 for interoperability *\/\n@@ -135,3 +135,3 @@\n-     * @param initialCapacity   the initial capacity of the vector\n-     * @param capacityIncrement the amount by which the capacity is\n-     *                          increased when the vector overflows\n+     * @param   initialCapacity     the initial capacity of the vector\n+     * @param   capacityIncrement   the amount by which the capacity is\n+     *                              increased when the vector overflows\n@@ -139,1 +139,1 @@\n-     *                                  is negative\n+     *         is negative\n@@ -144,2 +144,2 @@\n-            throw new IllegalArgumentException(\"Illegal Capacity: \" +\n-                    initialCapacity);\n+            throw new IllegalArgumentException(\"Illegal Capacity: \"+\n+                                               initialCapacity);\n@@ -154,1 +154,1 @@\n-     * @param initialCapacity the initial capacity of the vector\n+     * @param   initialCapacity   the initial capacity of the vector\n@@ -156,1 +156,1 @@\n-     *                                  is negative\n+     *         is negative\n@@ -177,1 +177,1 @@\n-     *          vector\n+     *       vector\n@@ -179,1 +179,1 @@\n-     * @since 1.2\n+     * @since   1.2\n@@ -196,2 +196,2 @@\n-     * @param anArray the array into which the components get copied\n-     * @throws NullPointerException      if the given array is null\n+     * @param  anArray the array into which the components get copied\n+     * @throws NullPointerException if the given array is null\n@@ -199,3 +199,3 @@\n-     *                                   large enough to hold all the components of this vector\n-     * @throws ArrayStoreException       if a component of this vector is not of\n-     *                                   a runtime type that can be stored in the specified array\n+     *         large enough to hold all the components of this vector\n+     * @throws ArrayStoreException if a component of this vector is not of\n+     *         a runtime type that can be stored in the specified array\n@@ -261,1 +261,1 @@\n-                \/* preferred growth *\/);\n+                                           \/* preferred growth *\/);\n@@ -275,1 +275,1 @@\n-     * @param newSize the new size of this vector\n+     * @param  newSize   the new size of this vector\n@@ -291,3 +291,3 @@\n-     * @return the current capacity (the length of its internal\n-     * data array, kept in the field {@code elementData}\n-     * of this vector)\n+     * @return  the current capacity (the length of its internal\n+     *          data array, kept in the field {@code elementData}\n+     *          of this vector)\n@@ -302,1 +302,1 @@\n-     * @return the number of components in this vector\n+     * @return  the number of components in this vector\n@@ -311,3 +311,3 @@\n-     * @return {@code true} if and only if this vector has\n-     * no components, that is, its size is zero;\n-     * {@code false} otherwise.\n+     * @return  {@code true} if and only if this vector has\n+     *          no components, that is, its size is zero;\n+     *          {@code false} otherwise.\n@@ -327,2 +327,2 @@\n-     * @return an enumeration of the components of this vector\n-     * @see Iterator\n+     * @return  an enumeration of the components of this vector\n+     * @see     Iterator\n@@ -371,1 +371,1 @@\n-     * this vector, or -1 if this vector does not contain the element\n+     *         this vector, or -1 if this vector does not contain the element\n@@ -402,1 +402,1 @@\n-     * @param o     element to search for\n+     * @param o element to search for\n@@ -405,2 +405,2 @@\n-     * this vector at position {@code index} or later in the vector;\n-     * {@code -1} if the element is not found.\n+     *         this vector at position {@code index} or later in the vector;\n+     *         {@code -1} if the element is not found.\n@@ -408,1 +408,1 @@\n-     * @see Object#equals(Object)\n+     * @see     Object#equals(Object)\n@@ -412,2 +412,2 @@\n-            for (int i = index; i < elementCount; i++)\n-                if (elementData[i] == null)\n+            for (int i = index ; i < elementCount ; i++)\n+                if (elementData[i]==null)\n@@ -416,1 +416,1 @@\n-            for (int i = index; i < elementCount; i++)\n+            for (int i = index ; i < elementCount ; i++)\n@@ -428,1 +428,1 @@\n-     * {@code (filter.test(get(i))},\n+     * {@code (i >= index && filter.test(get(i)))},\n@@ -457,1 +457,1 @@\n-     * this vector, or -1 if this vector does not contain the element\n+     *         this vector, or -1 if this vector does not contain the element\n@@ -460,1 +460,1 @@\n-        return lastIndexOf(o, elementCount - 1);\n+        return lastIndexOf(o, elementCount-1);\n@@ -465,2 +465,1 @@\n-     * this vector, searching backwards from {@code index}, or returns -1 if\n-     * no matching element is found.\n+     * this vector, or returns -1 if no matching element is found.\n@@ -487,1 +486,1 @@\n-     * @param o     element to search for\n+     * @param o element to search for\n@@ -490,2 +489,2 @@\n-     * less than or equal to {@code index} in this vector;\n-     * -1 if the element is not found.\n+     *         less than or equal to {@code index} in this vector;\n+     *         -1 if the element is not found.\n@@ -493,1 +492,1 @@\n-     *                                   than or equal to the current size of this vector\n+     *         than or equal to the current size of this vector\n@@ -497,1 +496,1 @@\n-            throw new IndexOutOfBoundsException(index + \" >= \" + elementCount);\n+            throw new IndexOutOfBoundsException(index + \" >= \"+ elementCount);\n@@ -501,1 +500,1 @@\n-                if (elementData[i] == null)\n+                if (elementData[i]==null)\n@@ -545,2 +544,2 @@\n-     * @param index an index into this vector\n-     * @return the component at the specified index\n+     * @param      index   an index into this vector\n+     * @return     the component at the specified index\n@@ -548,1 +547,1 @@\n-     *                                        ({@code index < 0 || index >= size()})\n+     *         ({@code index < 0 || index >= size()})\n@@ -562,1 +561,1 @@\n-     * @return the first component of this vector\n+     * @return     the first component of this vector\n@@ -575,2 +574,2 @@\n-     * @return the last component of the vector, i.e., the component at index\n-     * {@code size() - 1}\n+     * @return  the last component of the vector, i.e., the component at index\n+     *          {@code size() - 1}\n@@ -601,2 +600,2 @@\n-     * @param obj   what the component is to be set to\n-     * @param index the specified index\n+     * @param      obj     what the component is to be set to\n+     * @param      index   the specified index\n@@ -604,1 +603,1 @@\n-     *                                        ({@code index < 0 || index >= size()})\n+     *         ({@code index < 0 || index >= size()})\n@@ -609,1 +608,1 @@\n-                    elementCount);\n+                                                     elementCount);\n@@ -629,1 +628,1 @@\n-     * @param index the index of the object to remove\n+     * @param      index   the index of the object to remove\n@@ -631,1 +630,1 @@\n-     *                                        ({@code index < 0 || index >= size()})\n+     *         ({@code index < 0 || index >= size()})\n@@ -636,2 +635,3 @@\n-                    elementCount);\n-        } else if (index < 0) {\n+                                                     elementCount);\n+        }\n+        else if (index < 0) {\n@@ -667,2 +667,2 @@\n-     * @param obj   the component to insert\n-     * @param index where to insert the new component\n+     * @param      obj     the component to insert\n+     * @param      index   where to insert the new component\n@@ -670,1 +670,1 @@\n-     *                                        ({@code index < 0 || index > size()})\n+     *         ({@code index < 0 || index > size()})\n@@ -675,1 +675,1 @@\n-                    + \" > \" + elementCount);\n+                                                     + \" > \" + elementCount);\n@@ -683,2 +683,2 @@\n-                elementData, index + 1,\n-                s - index);\n+                         elementData, index + 1,\n+                         s - index);\n@@ -698,1 +698,1 @@\n-     * @param obj the component to be added\n+     * @param   obj   the component to be added\n@@ -716,3 +716,3 @@\n-     * @param obj the component to be removed\n-     * @return {@code true} if the argument was a component of this\n-     * vector; {@code false} otherwise.\n+     * @param   obj   the component to be removed\n+     * @return  {@code true} if the argument was a component of this\n+     *          vector; {@code false} otherwise.\n@@ -748,1 +748,1 @@\n-     * @return a clone of this vector\n+     * @return  a clone of this vector\n@@ -788,4 +788,4 @@\n-     *            supertype of {@code <E>}.\n-     * @param a   the array into which the elements of the Vector are to\n-     *            be stored, if it is big enough; otherwise, a new array of the\n-     *            same runtime type is allocated for this purpose.\n+     * supertype of {@code <E>}.\n+     * @param a the array into which the elements of the Vector are to\n+     *          be stored, if it is big enough; otherwise, a new array of the\n+     *          same runtime type is allocated for this purpose.\n@@ -793,3 +793,3 @@\n-     * @throws ArrayStoreException  if the runtime type of a, {@code <T>}, is not\n-     *                              a supertype of the runtime type, {@code <E>}, of every element in this\n-     *                              Vector\n+     * @throws ArrayStoreException if the runtime type of a, {@code <T>}, is not\n+     * a supertype of the runtime type, {@code <E>}, of every element in this\n+     * Vector\n@@ -830,1 +830,1 @@\n-     *                                        ({@code index < 0 || index >= size()})\n+     *            ({@code index < 0 || index >= size()})\n@@ -844,1 +844,1 @@\n-     * @param index   index of the element to replace\n+     * @param index index of the element to replace\n@@ -848,1 +848,1 @@\n-     *                                        ({@code index < 0 || index >= size()})\n+     *         ({@code index < 0 || index >= size()})\n@@ -905,1 +905,1 @@\n-     * @param index   index at which the specified element is to be inserted\n+     * @param index index at which the specified element is to be inserted\n@@ -908,1 +908,1 @@\n-     *                                        ({@code index < 0 || index > size()})\n+     *         ({@code index < 0 || index > size()})\n@@ -923,1 +923,1 @@\n-     *                                        ({@code index < 0 || index >= size()})\n+     *         ({@code index < 0 || index >= size()})\n@@ -934,2 +934,2 @@\n-            System.arraycopy(elementData, index + 1, elementData, index,\n-                    numMoved);\n+            System.arraycopy(elementData, index+1, elementData, index,\n+                             numMoved);\n@@ -957,1 +957,1 @@\n-     * @param c a collection whose elements will be tested for containment\n+     * @param   c a collection whose elements will be tested for containment\n@@ -960,1 +960,1 @@\n-     * specified collection\n+     *         specified collection\n@@ -1003,4 +1003,4 @@\n-     * @throws ClassCastException   if the types of one or more elements\n-     *                              in this vector are incompatible with the specified\n-     *                              collection\n-     *                              (<a href=\"Collection.html#optional-restrictions\">optional<\/a>)\n+     * @throws ClassCastException if the types of one or more elements\n+     *         in this vector are incompatible with the specified\n+     *         collection\n+     * (<a href=\"Collection.html#optional-restrictions\">optional<\/a>)\n@@ -1008,4 +1008,4 @@\n-     *                              elements and the specified collection does not support null\n-     *                              elements\n-     *                              (<a href=\"Collection.html#optional-restrictions\">optional<\/a>),\n-     *                              or if the specified collection is null\n+     *         elements and the specified collection does not support null\n+     *         elements\n+     * (<a href=\"Collection.html#optional-restrictions\">optional<\/a>),\n+     *         or if the specified collection is null\n@@ -1027,4 +1027,4 @@\n-     * @throws ClassCastException   if the types of one or more elements\n-     *                              in this vector are incompatible with the specified\n-     *                              collection\n-     *                              (<a href=\"Collection.html#optional-restrictions\">optional<\/a>)\n+     * @throws ClassCastException if the types of one or more elements\n+     *         in this vector are incompatible with the specified\n+     *         collection\n+     * (<a href=\"Collection.html#optional-restrictions\">optional<\/a>)\n@@ -1032,4 +1032,4 @@\n-     *                              elements and the specified collection does not support null\n-     *                              elements\n-     *                              (<a href=\"Collection.html#optional-restrictions\">optional<\/a>),\n-     *                              or if the specified collection is null\n+     *         elements and the specified collection does not support null\n+     *         elements\n+     *         (<a href=\"Collection.html#optional-restrictions\">optional<\/a>),\n+     *         or if the specified collection is null\n@@ -1057,1 +1057,0 @@\n-\n@@ -1061,1 +1060,0 @@\n-\n@@ -1111,1 +1109,1 @@\n-     * @param c     elements to be inserted into this Vector\n+     * @param c elements to be inserted into this Vector\n@@ -1114,2 +1112,2 @@\n-     *                                        ({@code index < 0 || index > size()})\n-     * @throws NullPointerException           if the specified collection is null\n+     *         ({@code index < 0 || index > size()})\n+     * @throws NullPointerException if the specified collection is null\n@@ -1135,2 +1133,2 @@\n-                    elementData, index + numNew,\n-                    numMoved);\n+                             elementData, index + numNew,\n+                             numMoved);\n@@ -1200,1 +1198,1 @@\n-     * @param toIndex   high endpoint (exclusive) of the subList\n+     * @param toIndex high endpoint (exclusive) of the subList\n@@ -1203,3 +1201,3 @@\n-     *                                   {@code (fromIndex < 0 || toIndex > size)}\n-     * @throws IllegalArgumentException  if the endpoint indices are out of order\n-     *                                   {@code (fromIndex > toIndex)}\n+     *         {@code (fromIndex < 0 || toIndex > size)}\n+     * @throws IllegalArgumentException if the endpoint indices are out of order\n+     *         {@code (fromIndex > toIndex)}\n@@ -1209,1 +1207,1 @@\n-                this);\n+                                            this);\n@@ -1224,3 +1222,1 @@\n-    \/**\n-     * Erases the gap from lo to hi, by sliding down following elements.\n-     *\/\n+    \/** Erases the gap from lo to hi, by sliding down following elements. *\/\n@@ -1240,1 +1236,1 @@\n-     * @throws java.io.IOException    if an I\/O error occurs\n+     * @throws java.io.IOException if an I\/O error occurs\n@@ -1242,1 +1238,1 @@\n-     *                                of a non-existing class\n+     *         of a non-existing class\n@@ -1249,1 +1245,1 @@\n-        Object[] data = (Object[]) gfields.get(\"elementData\", null);\n+        Object[] data = (Object[])gfields.get(\"elementData\", null);\n@@ -1294,1 +1290,1 @@\n-            throw new IndexOutOfBoundsException(\"Index: \" + index);\n+            throw new IndexOutOfBoundsException(\"Index: \"+index);\n@@ -1498,3 +1494,1 @@\n-    \/**\n-     * Similar to ArrayList Spliterator\n-     *\/\n+    \/** Similar to ArrayList Spliterator *\/\n@@ -1507,3 +1501,1 @@\n-        \/**\n-         * Creates new spliterator covering the given range.\n-         *\/\n+        \/** Creates new spliterator covering the given range. *\/\n@@ -1533,1 +1525,1 @@\n-                    new VectorSpliterator(array, lo, index = mid, expectedModCount);\n+                new VectorSpliterator(array, lo, index = mid, expectedModCount);\n@@ -1542,1 +1534,1 @@\n-                action.accept((E) array[i]);\n+                action.accept((E)array[i]);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Vector.java","additions":132,"deletions":140,"binary":false,"changes":272,"status":"modified"}]}