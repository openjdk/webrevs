{"files":[{"patch":"@@ -308,0 +308,25 @@\n+    \/**\n+     * Returns the index of the first occurrence of a matching element\n+     * in this list, or -1 if this list does not contain a matching element.\n+     * More formally, returns the lowest index {@code i} such that\n+     * {@code filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter a predicate to search matching element for\n+     * @return the index of the first occurrence of the specified element in\n+     *         this list, or -1 if this list does not contain the element\n+     *\/\n+    public int findIndex(Predicate<? super E> filter) {\n+        return findIndexInRange(filter, 0, size);\n+    }\n+\n+    int findIndexInRange(Predicate<? super E> filter, int start, int end) {\n+        Object[] es = elementData;\n+        for (int i = start; i < end; i++) {\n+            if (filter.test(elementAt(es, i))) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n@@ -337,0 +362,25 @@\n+    \/**\n+     * Returns the index of the last occurrence of a matching element\n+     * in this list, or -1 if this list does not contain a matching element.\n+     * More formally, returns the highest index {@code i} such that\n+     * {@code filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter a predicate to search matching element for\n+     * @return the index of the last occurrence of the specified element in\n+     *         this list, or -1 if this list does not contain the element\n+     *\/\n+    public int findLastIndex(Predicate<? super E> filter) {\n+        return findLastIndexInRange(filter, 0, size);\n+    }\n+\n+    int findLastIndexInRange(Predicate<? super E> filter, int start, int end) {\n+        Object[] es = elementData;\n+        for (int i = end - 1; i >= start; i--) {\n+            if (filter.test(elementAt(es, i))) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n@@ -1352,0 +1402,6 @@\n+        public int findIndex(Predicate<? super E> filter) {\n+            int index = root.indexOfRange(filter, offset, offset + size);\n+            checkForComodification();\n+            return index >= 0 ? index - offset : -1;\n+        }\n+\n@@ -1358,0 +1414,6 @@\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            int index = root.lastIndexOfRange(filter, offset, offset + size);\n+            checkForComodification();\n+            return index >= 0 ? index - offset : -1;\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/ArrayList.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import java.util.function.Predicate;\n@@ -4252,0 +4253,8 @@\n+        public int findIndex(Predicate<? super E> filter) {\n+            E[] a = this.a;\n+            for (int i = 0; i < a.length; i++)\n+                if (filter.test(a[i]))\n+                    return i;\n+            return -1;\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1513,0 +1513,3 @@\n+        public int findIndex(Predicate<? super E> filter) {\n+            return list.findIndex(filter);\n+        }\n@@ -1514,0 +1517,3 @@\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            return list.findLastIndex(filter);\n+        }\n@@ -2734,0 +2740,3 @@\n+        public int findIndex(Predicate<? super E> filter) {\n+            synchronized (mutex) {return list.findIndex(filter);}\n+        }\n@@ -2737,0 +2746,3 @@\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            synchronized (mutex) {return list.findLastIndex(filter);}\n+        }\n@@ -3768,0 +3780,2 @@\n+        public int findIndex(Predicate<? super E> filter) { return list.findIndex(filter); }\n+        public int findLastIndex(Predicate<? super E> filter) { return list.findLastIndex(filter); }\n@@ -5397,0 +5411,4 @@\n+        public int findIndex(Predicate<? super E> filter) {\n+            return filter.test(element) ? 0 : -1;\n+        }\n+\n@@ -5401,0 +5419,4 @@\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            return filter.test(element) ? n - 1 : -1;\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/Collections.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -514,0 +514,9 @@\n+        public int findIndex(Predicate<? super E> filter) {\n+            for (int i = 0, s = size(); i < s; i++) {\n+                if (filter.test(get(i))) {\n+                    return i;\n+                }\n+            }\n+            return -1;\n+        }\n+\n@@ -527,0 +536,9 @@\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            for (int i = size() - 1; i >= 0; i--) {\n+                if (filter.test(get(i))) {\n+                    return i;\n+                }\n+            }\n+            return -1;\n+        }\n+\n@@ -607,0 +625,11 @@\n+        @SuppressWarnings(\"unchecked\")\n+        public int findIndex(Predicate<? super E> filter) {\n+            if (filter.test(e0)) {\n+                return 0;\n+            } else if (e1 != EMPTY && filter.test((E)e1)) {\n+                return 1;\n+            } else {\n+                return -1;\n+            }\n+        }\n+\n@@ -619,0 +648,11 @@\n+        @SuppressWarnings(\"unchecked\")\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            if (e1 != EMPTY && filter.test((E)e1)) {\n+                return 1;\n+            } else if (filter.test(e0)) {\n+                return 0;\n+            } else {\n+                return -1;\n+            }\n+        }\n+\n@@ -734,0 +774,10 @@\n+        public int findIndex(Predicate<? super E> filter) {\n+            E[] es = elements;\n+            for (int i = 0; i < es.length; i++) {\n+                if (filter.test(es[i])) {\n+                    return i;\n+                }\n+            }\n+            return -1;\n+        }\n+\n@@ -747,0 +797,10 @@\n+\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            E[] es = elements;\n+            for (int i = es.length - 1; i >= 0; i--) {\n+                if (filter.test(es[i])) {\n+                    return i;\n+                }\n+            }\n+            return -1;\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/ImmutableCollections.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -625,0 +625,42 @@\n+    \/**\n+     * Returns the index of the first occurrence of a matching element in this\n+     * list, or -1 if this list does not contain the element.  More formally,\n+     * returns the lowest index {@code i} such that\n+     * {@code filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter a predicate to search matching element for\n+     * @return the index of the first occurrence of a matching element in\n+     * this list, or -1 if this list does not contain the element\n+     *\/\n+    public int findIndex(Predicate<? super E> filter) {\n+        int index = 0;\n+        for (Node<E> x = first; x != null; x = x.next) {\n+            if (filter.test(x.item))\n+                return index;\n+            index++;\n+        }\n+        return -1;\n+    }\n+\n+    \/**\n+     * Returns the index of the last occurrence of a matching element\n+     * in this list, or -1 if this list does not contain the element.\n+     * More formally, returns the highest index {@code i} such that\n+     * {@code filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter a predicate to search matching element for\n+     * @return the index of the last occurrence of a matching element in\n+     * this list, or -1 if this list does not contain the element\n+     *\/\n+    public int findLastIndex(Predicate<? super E> filter) {\n+        int index = size;\n+        for (Node<E> x = last; x != null; x = x.prev) {\n+            index--;\n+            if (filter.test(x.item))\n+                return index;\n+        }\n+        return -1;\n+    }\n+\n@@ -1460,0 +1502,4 @@\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            return rlist.findLastIndex(filter);\n+        }\n+\n@@ -1464,0 +1510,4 @@\n+        public int findIndex(Predicate<? super E> filter) {\n+            return rlist.findIndex(filter);\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/LinkedList.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.function.Predicate;\n@@ -673,0 +674,60 @@\n+    \/**\n+     * Returns the index of the first occurrence of matching element\n+     * in this list, or -1 if this list does not contain the element.\n+     * More formally, returns the lowest index {@code i} such that\n+     * {@code filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @implSpec\n+     * This implementation first gets a list iterator (with\n+     * {@code listIterator()}).  Then, it iterates over the list until a\n+     * matching element is found or the beginning of the list is reached.\n+     *\n+     * @param filter a predicate to search matching element for\n+     * @return the index of the first occurrence of the specified element in\n+     *         this list, or -1 if this list does not contain the element\n+     * @throws NullPointerException if passed filter is null\n+     *\/\n+    default int findIndex(Predicate<? super E> filter) {\n+        Objects.requireNonNull(filter);\n+        ListIterator<E> it = listIterator();\n+        while (it.hasNext()) {\n+            E e = it.next();\n+            if (filter.test(e)) {\n+                return it.previousIndex();\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    \/**\n+     * Returns the index of the last occurrence of matching element\n+     * in this list, or -1 if this list does not contain the element.\n+     * More formally, returns the highest index {@code i} such that\n+     * {@code Objects.equals(o, get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @implSpec\n+     * This implementation first gets a list iterator that points to the end\n+     * of the list (with {@code listIterator(size())}).  Then, it iterates\n+     * backwards over the list until the matching element is found, or the\n+     * beginning of the list is reached.\n+     *\n+     * @param filter a predicate to search matching element for\n+     * @return the index of the last occurrence of the specified element in\n+     *         this list, or -1 if this list does not contain the element\n+     * @throws NullPointerException if passed filter is null\n+     *\/\n+    default int findLastIndex(Predicate<? super E> filter) {\n+        Objects.requireNonNull(filter);\n+        ListIterator<E> it = listIterator(size());\n+        while (it.hasPrevious()) {\n+            E e = it.previous();\n+            if (filter.test(e)) {\n+                return it.nextIndex();\n+            }\n+        }\n+        return -1;\n+    }\n+\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/List.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -349,0 +349,5 @@\n+    public int findIndex(Predicate<? super E> filter) {\n+        int i = base.findLastIndex(filter);\n+        return i == -1 ? -1 : base.size() - i - 1;\n+    }\n+\n@@ -354,0 +359,5 @@\n+    public int findLastIndex(Predicate<? super E> filter) {\n+        int i = base.findIndex(filter);\n+        return i == -1 ? -1 : base.size() - i - 1;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/ReverseOrderListView.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.internal.util.ArraysSupport;\n+\n@@ -35,2 +37,0 @@\n-import jdk.internal.util.ArraysSupport;\n-\n@@ -85,3 +85,2 @@\n- *\n- * @author  Lee Boynton\n- * @author  Jonathan Payne\n+ * @author Lee Boynton\n+ * @author Jonathan Payne\n@@ -90,1 +89,1 @@\n- * @since   1.0\n+ * @since 1.0\n@@ -93,3 +92,2 @@\n-    extends AbstractList<E>\n-    implements List<E>, RandomAccess, Cloneable, java.io.Serializable\n-{\n+        extends AbstractList<E>\n+        implements List<E>, RandomAccess, Cloneable, java.io.Serializable {\n@@ -127,1 +125,3 @@\n-    \/** use serialVersionUID from JDK 1.0.2 for interoperability *\/\n+    \/**\n+     * use serialVersionUID from JDK 1.0.2 for interoperability\n+     *\/\n@@ -135,3 +135,3 @@\n-     * @param   initialCapacity     the initial capacity of the vector\n-     * @param   capacityIncrement   the amount by which the capacity is\n-     *                              increased when the vector overflows\n+     * @param initialCapacity   the initial capacity of the vector\n+     * @param capacityIncrement the amount by which the capacity is\n+     *                          increased when the vector overflows\n@@ -139,1 +139,1 @@\n-     *         is negative\n+     *                                  is negative\n@@ -144,2 +144,2 @@\n-            throw new IllegalArgumentException(\"Illegal Capacity: \"+\n-                                               initialCapacity);\n+            throw new IllegalArgumentException(\"Illegal Capacity: \" +\n+                    initialCapacity);\n@@ -154,1 +154,1 @@\n-     * @param   initialCapacity   the initial capacity of the vector\n+     * @param initialCapacity the initial capacity of the vector\n@@ -156,1 +156,1 @@\n-     *         is negative\n+     *                                  is negative\n@@ -177,1 +177,1 @@\n-     *       vector\n+     *          vector\n@@ -179,1 +179,1 @@\n-     * @since   1.2\n+     * @since 1.2\n@@ -196,2 +196,2 @@\n-     * @param  anArray the array into which the components get copied\n-     * @throws NullPointerException if the given array is null\n+     * @param anArray the array into which the components get copied\n+     * @throws NullPointerException      if the given array is null\n@@ -199,3 +199,3 @@\n-     *         large enough to hold all the components of this vector\n-     * @throws ArrayStoreException if a component of this vector is not of\n-     *         a runtime type that can be stored in the specified array\n+     *                                   large enough to hold all the components of this vector\n+     * @throws ArrayStoreException       if a component of this vector is not of\n+     *                                   a runtime type that can be stored in the specified array\n@@ -261,1 +261,1 @@\n-                                           \/* preferred growth *\/);\n+                \/* preferred growth *\/);\n@@ -275,1 +275,1 @@\n-     * @param  newSize   the new size of this vector\n+     * @param newSize the new size of this vector\n@@ -291,3 +291,3 @@\n-     * @return  the current capacity (the length of its internal\n-     *          data array, kept in the field {@code elementData}\n-     *          of this vector)\n+     * @return the current capacity (the length of its internal\n+     * data array, kept in the field {@code elementData}\n+     * of this vector)\n@@ -302,1 +302,1 @@\n-     * @return  the number of components in this vector\n+     * @return the number of components in this vector\n@@ -311,3 +311,3 @@\n-     * @return  {@code true} if and only if this vector has\n-     *          no components, that is, its size is zero;\n-     *          {@code false} otherwise.\n+     * @return {@code true} if and only if this vector has\n+     * no components, that is, its size is zero;\n+     * {@code false} otherwise.\n@@ -327,2 +327,2 @@\n-     * @return  an enumeration of the components of this vector\n-     * @see     Iterator\n+     * @return an enumeration of the components of this vector\n+     * @see Iterator\n@@ -371,1 +371,1 @@\n-     *         this vector, or -1 if this vector does not contain the element\n+     * this vector, or -1 if this vector does not contain the element\n@@ -377,0 +377,17 @@\n+    \/**\n+     * Returns the index of the first occurrence of a matching element in\n+     * this vector, searching forwards from {@code index}, or returns -1 if\n+     * no matching element is found.\n+     * More formally, returns the lowest index {@code i} such that\n+     * {@code (filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter a predicate to search matching element for\n+     * @return the index of the first occurrence of a matching element in\n+     * this vector or -1 if no matching element is found\n+     *\/\n+    public int findIndex(Predicate<? super E> filter) {\n+        return findIndex(filter, 0);\n+    }\n+\n+\n@@ -385,1 +402,1 @@\n-     * @param o element to search for\n+     * @param o     element to search for\n@@ -388,2 +405,2 @@\n-     *         this vector at position {@code index} or later in the vector;\n-     *         {@code -1} if the element is not found.\n+     * this vector at position {@code index} or later in the vector;\n+     * {@code -1} if the element is not found.\n@@ -391,1 +408,1 @@\n-     * @see     Object#equals(Object)\n+     * @see Object#equals(Object)\n@@ -395,2 +412,2 @@\n-            for (int i = index ; i < elementCount ; i++)\n-                if (elementData[i]==null)\n+            for (int i = index; i < elementCount; i++)\n+                if (elementData[i] == null)\n@@ -399,1 +416,1 @@\n-            for (int i = index ; i < elementCount ; i++)\n+            for (int i = index; i < elementCount; i++)\n@@ -406,0 +423,25 @@\n+    \/**\n+     * Returns the index of the first occurrence of a matching element in\n+     * this vector, searching forwards from {@code index}, or returns -1 if\n+     * no matching element is found.\n+     * More formally, returns the lowest index {@code i} such that\n+     * {@code (filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter a predicate to search matching element for\n+     * @param index index to start searching from\n+     * @return the index of the first occurrence of the element in\n+     * this vector at position {@code index} or later in the vector;\n+     * {@code -1} if the element is not found.\n+     * @throws IndexOutOfBoundsException if the specified index is negative\n+     * @see Object#equals(Object)\n+     *\/\n+    public synchronized int findIndex(Predicate<? super E> filter, int index) {\n+        for (int i = index; i < elementCount; i++) {\n+            if (filter.test(elementData(i))) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n@@ -415,1 +457,1 @@\n-     *         this vector, or -1 if this vector does not contain the element\n+     * this vector, or -1 if this vector does not contain the element\n@@ -418,1 +460,17 @@\n-        return lastIndexOf(o, elementCount-1);\n+        return lastIndexOf(o, elementCount - 1);\n+    }\n+\n+    \/**\n+     * Returns the index of the last occurrence of a matching element in\n+     * this vector, searching backwards from {@code index}, or returns -1 if\n+     * no matching element is found.\n+     * More formally, returns the highest index {@code i} such that\n+     * {@code (filter.test(get(i)))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter a predicate to search matching element for\n+     * @return the index of the last occurrence of a matching element in\n+     * this vector or -1 if no matching element is found\n+     *\/\n+    public synchronized int findLastIndex(Predicate<? super E> filter) {\n+        return findLastIndex(filter, elementCount - 1);\n@@ -429,1 +487,1 @@\n-     * @param o element to search for\n+     * @param o     element to search for\n@@ -432,2 +490,2 @@\n-     *         less than or equal to {@code index} in this vector;\n-     *         -1 if the element is not found.\n+     * less than or equal to {@code index} in this vector;\n+     * -1 if the element is not found.\n@@ -435,1 +493,1 @@\n-     *         than or equal to the current size of this vector\n+     *                                   than or equal to the current size of this vector\n@@ -439,1 +497,1 @@\n-            throw new IndexOutOfBoundsException(index + \" >= \"+ elementCount);\n+            throw new IndexOutOfBoundsException(index + \" >= \" + elementCount);\n@@ -443,1 +501,1 @@\n-                if (elementData[i]==null)\n+                if (elementData[i] == null)\n@@ -453,0 +511,28 @@\n+    \/**\n+     * Returns the index of the last occurrence of a matching element in\n+     * this vector, searching backwards from {@code index}, or returns -1 if\n+     * no matching element is found.\n+     * More formally, returns the highest index {@code i} such that\n+     * {@code (i <= index && filter.test(get(i)))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter a predicate to search matching element for\n+     * @param index index to start searching backwards from\n+     * @return the index of the last occurrence of the element at position\n+     * less than or equal to {@code index} in this vector;\n+     * -1 if the element is not found.\n+     * @throws IndexOutOfBoundsException if the specified index is greater\n+     *                                   than or equal to the current size of this vector\n+     *\/\n+    public synchronized int findLastIndex(Predicate<? super E> filter, int index) {\n+        if (index >= elementCount)\n+            throw new IndexOutOfBoundsException(index + \" >= \" + elementCount);\n+\n+        for (int i = index; i >= 0; i--) {\n+            if (filter.test(elementData(i))) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n@@ -459,2 +545,2 @@\n-     * @param      index   an index into this vector\n-     * @return     the component at the specified index\n+     * @param index an index into this vector\n+     * @return the component at the specified index\n@@ -462,1 +548,1 @@\n-     *         ({@code index < 0 || index >= size()})\n+     *                                        ({@code index < 0 || index >= size()})\n@@ -476,1 +562,1 @@\n-     * @return     the first component of this vector\n+     * @return the first component of this vector\n@@ -489,2 +575,2 @@\n-     * @return  the last component of the vector, i.e., the component at index\n-     *          {@code size() - 1}\n+     * @return the last component of the vector, i.e., the component at index\n+     * {@code size() - 1}\n@@ -515,2 +601,2 @@\n-     * @param      obj     what the component is to be set to\n-     * @param      index   the specified index\n+     * @param obj   what the component is to be set to\n+     * @param index the specified index\n@@ -518,1 +604,1 @@\n-     *         ({@code index < 0 || index >= size()})\n+     *                                        ({@code index < 0 || index >= size()})\n@@ -523,1 +609,1 @@\n-                                                     elementCount);\n+                    elementCount);\n@@ -543,1 +629,1 @@\n-     * @param      index   the index of the object to remove\n+     * @param index the index of the object to remove\n@@ -545,1 +631,1 @@\n-     *         ({@code index < 0 || index >= size()})\n+     *                                        ({@code index < 0 || index >= size()})\n@@ -550,3 +636,2 @@\n-                                                     elementCount);\n-        }\n-        else if (index < 0) {\n+                    elementCount);\n+        } else if (index < 0) {\n@@ -582,2 +667,2 @@\n-     * @param      obj     the component to insert\n-     * @param      index   where to insert the new component\n+     * @param obj   the component to insert\n+     * @param index where to insert the new component\n@@ -585,1 +670,1 @@\n-     *         ({@code index < 0 || index > size()})\n+     *                                        ({@code index < 0 || index > size()})\n@@ -590,1 +675,1 @@\n-                                                     + \" > \" + elementCount);\n+                    + \" > \" + elementCount);\n@@ -598,2 +683,2 @@\n-                         elementData, index + 1,\n-                         s - index);\n+                elementData, index + 1,\n+                s - index);\n@@ -613,1 +698,1 @@\n-     * @param   obj   the component to be added\n+     * @param obj the component to be added\n@@ -631,3 +716,3 @@\n-     * @param   obj   the component to be removed\n-     * @return  {@code true} if the argument was a component of this\n-     *          vector; {@code false} otherwise.\n+     * @param obj the component to be removed\n+     * @return {@code true} if the argument was a component of this\n+     * vector; {@code false} otherwise.\n@@ -663,1 +748,1 @@\n-     * @return  a clone of this vector\n+     * @return a clone of this vector\n@@ -703,4 +788,4 @@\n-     * supertype of {@code <E>}.\n-     * @param a the array into which the elements of the Vector are to\n-     *          be stored, if it is big enough; otherwise, a new array of the\n-     *          same runtime type is allocated for this purpose.\n+     *            supertype of {@code <E>}.\n+     * @param a   the array into which the elements of the Vector are to\n+     *            be stored, if it is big enough; otherwise, a new array of the\n+     *            same runtime type is allocated for this purpose.\n@@ -708,3 +793,3 @@\n-     * @throws ArrayStoreException if the runtime type of a, {@code <T>}, is not\n-     * a supertype of the runtime type, {@code <E>}, of every element in this\n-     * Vector\n+     * @throws ArrayStoreException  if the runtime type of a, {@code <T>}, is not\n+     *                              a supertype of the runtime type, {@code <E>}, of every element in this\n+     *                              Vector\n@@ -745,1 +830,1 @@\n-     *            ({@code index < 0 || index >= size()})\n+     *                                        ({@code index < 0 || index >= size()})\n@@ -759,1 +844,1 @@\n-     * @param index index of the element to replace\n+     * @param index   index of the element to replace\n@@ -763,1 +848,1 @@\n-     *         ({@code index < 0 || index >= size()})\n+     *                                        ({@code index < 0 || index >= size()})\n@@ -820,1 +905,1 @@\n-     * @param index index at which the specified element is to be inserted\n+     * @param index   index at which the specified element is to be inserted\n@@ -823,1 +908,1 @@\n-     *         ({@code index < 0 || index > size()})\n+     *                                        ({@code index < 0 || index > size()})\n@@ -838,1 +923,1 @@\n-     *         ({@code index < 0 || index >= size()})\n+     *                                        ({@code index < 0 || index >= size()})\n@@ -849,2 +934,2 @@\n-            System.arraycopy(elementData, index+1, elementData, index,\n-                             numMoved);\n+            System.arraycopy(elementData, index + 1, elementData, index,\n+                    numMoved);\n@@ -872,1 +957,1 @@\n-     * @param   c a collection whose elements will be tested for containment\n+     * @param c a collection whose elements will be tested for containment\n@@ -875,1 +960,1 @@\n-     *         specified collection\n+     * specified collection\n@@ -918,4 +1003,4 @@\n-     * @throws ClassCastException if the types of one or more elements\n-     *         in this vector are incompatible with the specified\n-     *         collection\n-     * (<a href=\"Collection.html#optional-restrictions\">optional<\/a>)\n+     * @throws ClassCastException   if the types of one or more elements\n+     *                              in this vector are incompatible with the specified\n+     *                              collection\n+     *                              (<a href=\"Collection.html#optional-restrictions\">optional<\/a>)\n@@ -923,4 +1008,4 @@\n-     *         elements and the specified collection does not support null\n-     *         elements\n-     * (<a href=\"Collection.html#optional-restrictions\">optional<\/a>),\n-     *         or if the specified collection is null\n+     *                              elements and the specified collection does not support null\n+     *                              elements\n+     *                              (<a href=\"Collection.html#optional-restrictions\">optional<\/a>),\n+     *                              or if the specified collection is null\n@@ -942,4 +1027,4 @@\n-     * @throws ClassCastException if the types of one or more elements\n-     *         in this vector are incompatible with the specified\n-     *         collection\n-     * (<a href=\"Collection.html#optional-restrictions\">optional<\/a>)\n+     * @throws ClassCastException   if the types of one or more elements\n+     *                              in this vector are incompatible with the specified\n+     *                              collection\n+     *                              (<a href=\"Collection.html#optional-restrictions\">optional<\/a>)\n@@ -947,4 +1032,4 @@\n-     *         elements and the specified collection does not support null\n-     *         elements\n-     *         (<a href=\"Collection.html#optional-restrictions\">optional<\/a>),\n-     *         or if the specified collection is null\n+     *                              elements and the specified collection does not support null\n+     *                              elements\n+     *                              (<a href=\"Collection.html#optional-restrictions\">optional<\/a>),\n+     *                              or if the specified collection is null\n@@ -972,0 +1057,1 @@\n+\n@@ -975,0 +1061,1 @@\n+\n@@ -1024,1 +1111,1 @@\n-     * @param c elements to be inserted into this Vector\n+     * @param c     elements to be inserted into this Vector\n@@ -1027,2 +1114,2 @@\n-     *         ({@code index < 0 || index > size()})\n-     * @throws NullPointerException if the specified collection is null\n+     *                                        ({@code index < 0 || index > size()})\n+     * @throws NullPointerException           if the specified collection is null\n@@ -1048,2 +1135,2 @@\n-                             elementData, index + numNew,\n-                             numMoved);\n+                    elementData, index + numNew,\n+                    numMoved);\n@@ -1113,1 +1200,1 @@\n-     * @param toIndex high endpoint (exclusive) of the subList\n+     * @param toIndex   high endpoint (exclusive) of the subList\n@@ -1116,3 +1203,3 @@\n-     *         {@code (fromIndex < 0 || toIndex > size)}\n-     * @throws IllegalArgumentException if the endpoint indices are out of order\n-     *         {@code (fromIndex > toIndex)}\n+     *                                   {@code (fromIndex < 0 || toIndex > size)}\n+     * @throws IllegalArgumentException  if the endpoint indices are out of order\n+     *                                   {@code (fromIndex > toIndex)}\n@@ -1122,1 +1209,1 @@\n-                                            this);\n+                this);\n@@ -1137,1 +1224,3 @@\n-    \/** Erases the gap from lo to hi, by sliding down following elements. *\/\n+    \/**\n+     * Erases the gap from lo to hi, by sliding down following elements.\n+     *\/\n@@ -1151,1 +1240,1 @@\n-     * @throws java.io.IOException if an I\/O error occurs\n+     * @throws java.io.IOException    if an I\/O error occurs\n@@ -1153,1 +1242,1 @@\n-     *         of a non-existing class\n+     *                                of a non-existing class\n@@ -1160,1 +1249,1 @@\n-        Object[] data = (Object[])gfields.get(\"elementData\", null);\n+        Object[] data = (Object[]) gfields.get(\"elementData\", null);\n@@ -1205,1 +1294,1 @@\n-            throw new IndexOutOfBoundsException(\"Index: \"+index);\n+            throw new IndexOutOfBoundsException(\"Index: \" + index);\n@@ -1409,1 +1498,3 @@\n-    \/** Similar to ArrayList Spliterator *\/\n+    \/**\n+     * Similar to ArrayList Spliterator\n+     *\/\n@@ -1416,1 +1507,3 @@\n-        \/** Creates new spliterator covering the given range. *\/\n+        \/**\n+         * Creates new spliterator covering the given range.\n+         *\/\n@@ -1440,1 +1533,1 @@\n-                new VectorSpliterator(array, lo, index = mid, expectedModCount);\n+                    new VectorSpliterator(array, lo, index = mid, expectedModCount);\n@@ -1449,1 +1542,1 @@\n-                action.accept((E)array[i]);\n+                action.accept((E) array[i]);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Vector.java","additions":223,"deletions":130,"binary":false,"changes":353,"status":"modified"},{"patch":"@@ -205,0 +205,16 @@\n+    \/**\n+     * static version of findIndex.\n+     *\n+     * @param filter the predicate to search matching element for\n+     * @param es     the array\n+     * @param from   index of first element of range, first element to search\n+     * @param to     one past last element of range, last element to search\n+     * @return index of element, or -1 if absent\n+     *\/\n+    private static <E> int findIndexInRange(Predicate<E> filter, E[] es, int from, int to) {\n+        for (int i = from; i < to; i++)\n+            if (filter.test(es[i]))\n+                return i;\n+        return -1;\n+    }\n+\n@@ -226,0 +242,16 @@\n+    \/**\n+     * static version of findLastIndex.\n+     *\n+     * @param filter the predicate to search matching element for\n+     * @param es     the array\n+     * @param from   index of first element of range, last element to search\n+     * @param to     one past last element of range, first element to search\n+     * @return index of element, or -1 if absent\n+     *\/\n+    private static <E> int findLastIndexInRange(Predicate<? super E> filter, E[] es, int from, int to) {\n+        for (int i = to - 1; i >= from; i--)\n+            if (filter.test(es[i]))\n+                return i;\n+        return -1;\n+    }\n+\n@@ -246,0 +278,38 @@\n+    \/**\n+     * Returns the index of the first occurrence of a matching element in\n+     * this list, searching backwards from {@code index}, or returns -1 if\n+     * the element is not found.\n+     * More formally, returns the lowest index {@code i} such that\n+     * {@code filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter the predicate to search matching element for\n+     * @return the index of the last occurrence of the element in\n+     * this list;\n+     * -1 if the element is not found.\n+     *\/\n+    @SuppressWarnings(\"unchecked\")\n+    public int findIndex(Predicate<? super E> filter) {\n+        E[] es = (E[]) getArray();\n+        return findIndexInRange(filter, es, 0, es.length);\n+    }\n+\n+    \/**\n+     * Returns the index of the last occurrence of a matching element in\n+     * this list, searching backwards from {@code index}, or returns -1 if\n+     * the element is not found.\n+     * More formally, returns the highest index {@code i} such that\n+     * {@code filter.test(get(i))},\n+     * or -1 if there is no such index.\n+     *\n+     * @param filter the predicate to search matching element for\n+     * @return the index of the last occurrence of the element in\n+     * this list;\n+     * -1 if the element is not found.\n+     *\/\n+    @SuppressWarnings(\"unchecked\")\n+    public int findLastIndex(Predicate<? super E> filter) {\n+        E[] es = (E[]) getArray();\n+        return findLastIndexInRange(filter, es, 0, es.length);\n+    }\n+\n@@ -1366,0 +1436,28 @@\n+        @SuppressWarnings(\"unchecked\")\n+        public int findIndex(Predicate<? super E> filter) {\n+            final E[] es;\n+            final int offset;\n+            final int size;\n+            synchronized (lock) {\n+                es = (E[]) getArrayChecked();\n+                offset = this.offset;\n+                size = this.size;\n+            }\n+            int i = findIndexInRange(filter, es, offset, offset + size);\n+            return (i == -1) ? -1 : i - offset;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public int findLastIndex(Predicate<? super E> filter) {\n+            final E[] es;\n+            final int offset;\n+            final int size;\n+            synchronized (lock) {\n+                es = (E[]) getArrayChecked();\n+                offset = this.offset;\n+                size = this.size;\n+            }\n+            int i = findLastIndexInRange(filter, es, offset, offset + size);\n+            return (i == -1) ? -1 : i - offset;\n+        }\n+\n@@ -2012,0 +2110,7 @@\n+        public int findIndex(Predicate<? super  E> filter) {\n+            synchronized (lock) {\n+                int i = base.findLastIndex(filter);\n+                return i == -1 ? -1 : base.size() - i - 1;\n+            }\n+        }\n+\n@@ -2019,0 +2124,7 @@\n+        public int findLastIndex(Predicate<? super  E> filter) {\n+            synchronized (lock) {\n+                int i = base.findIndex(filter);\n+                return i == -1 ? -1 : base.size() - i - 1;\n+            }\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CopyOnWriteArrayList.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.util.function.Predicate;\n@@ -507,0 +508,9 @@\n+    public int findIndex(Predicate<? super A> filter) {\n+        int i = 0;\n+        for (List<A> l = this; l.tail != null; l = l.tail, i++) {\n+            if (filter.test(l.head))\n+                return i;\n+        }\n+        return -1;\n+    }\n+\n@@ -517,0 +527,10 @@\n+    public int findLastIndex(Predicate<? super A> filter) {\n+        int last = -1;\n+        int i = 0;\n+        for (List<A> l = this; l.tail != null; l = l.tail, i++) {\n+            if (filter.test(l.head))\n+                last = i;\n+        }\n+        return last;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/List.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.util.function.Predicate;\n@@ -129,0 +130,4 @@\n+    public int indexOf(Predicate<? super E> filter) {\n+        return list.indexOf(filter);\n+    }\n+\n@@ -133,0 +138,4 @@\n+    public int lastIndexOf(Predicate<? super E> filter) {\n+    return list.lastIndexOf(filter);\n+    }\n+\n","filename":"test\/jdk\/java\/util\/SequencedCollection\/SimpleList.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -88,0 +88,1 @@\n+import java.util.function.Predicate;\n@@ -438,0 +439,5 @@\n+                @Override\n+                public int findIndex(Predicate<? super Integer> filter) {\n+                    return l.findIndex(filter);\n+                }\n+\n@@ -443,0 +449,5 @@\n+                @Override\n+                public int findLastIndex(Predicate<? super Integer> filter) {\n+                    return l.findLastIndex(filter);\n+                }\n+\n","filename":"test\/jdk\/java\/util\/Spliterator\/SpliteratorTraversingAndSplittingTest.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"}]}