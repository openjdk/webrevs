{"files":[{"patch":"@@ -2736,0 +2736,1 @@\n+\n@@ -2740,1 +2741,1 @@\n-            synchronized (mutex) {return list.indexOf(filter);}\n+            synchronized (mutex) {return list.findIndex(filter);}\n@@ -2746,1 +2747,1 @@\n-            synchronized (mutex) {return list.lastIndexOf(filter);}\n+            synchronized (mutex) {return list.findLastIndex(filter);}\n@@ -3779,2 +3780,2 @@\n-        public int findIndex(Predicate<? super E> filter) { return list.indexOf(filter); }\n-        public int findLastIndex(Predicate<? super E> filter) { return list.lastIndexOf(filter); }\n+        public int findIndex(Predicate<? super E> filter) { return list.findIndex(filter); }\n+        public int findLastIndex(Predicate<? super E> filter) { return list.findLastIndex(filter); }\n","filename":"src\/java.base\/share\/classes\/java\/util\/Collections.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n- * <p>\n+ *\n@@ -83,4 +83,3 @@\n- * @param <E> the type of elements held in this collection\n- * @author Josh Bloch\n- * @see List\n- * @see ArrayList\n+ * @author  Josh Bloch\n+ * @see     List\n+ * @see     ArrayList\n@@ -88,0 +87,1 @@\n+ * @param <E> the type of elements held in this collection\n@@ -125,1 +125,1 @@\n-     * @param c the collection whose elements are to be placed into this list\n+     * @param  c the collection whose elements are to be placed into this list\n@@ -412,1 +412,1 @@\n-     * @param c     collection containing elements to be added to this list\n+     * @param c collection containing elements to be added to this list\n@@ -415,1 +415,1 @@\n-     * @throws NullPointerException      if the specified collection is null\n+     * @throws NullPointerException if the specified collection is null\n@@ -496,1 +496,1 @@\n-     * @param index   index of the element to replace\n+     * @param index index of the element to replace\n@@ -514,1 +514,1 @@\n-     * @param index   index at which the specified element is to be inserted\n+     * @param index index at which the specified element is to be inserted\n@@ -562,1 +562,1 @@\n-        return \"Index: \" + index + \", Size: \" + size;\n+        return \"Index: \"+index+\", Size: \"+size;\n@@ -605,1 +605,1 @@\n-     * this list, or -1 if this list does not contain the element\n+     *         this list, or -1 if this list does not contain the element\n@@ -632,1 +632,1 @@\n-     * @param filter a predicate to search mathcing element for\n+     * @param filter a predicate to search matching element for\n@@ -653,1 +653,1 @@\n-     * @param filter a predicate to search mathcing element for\n+     * @param filter a predicate to search matching element for\n@@ -676,1 +676,1 @@\n-     * this list, or -1 if this list does not contain the element\n+     *         this list, or -1 if this list does not contain the element\n@@ -754,1 +754,0 @@\n-\n@@ -784,1 +783,1 @@\n-     * if this list is empty\n+     *         if this list is empty\n@@ -790,1 +789,1 @@\n-    }\n+     }\n@@ -797,1 +796,1 @@\n-     * if this list is empty\n+     *         if this list is empty\n@@ -810,1 +809,1 @@\n-     * this list is empty\n+     *     this list is empty\n@@ -823,1 +822,1 @@\n-     * this list is empty\n+     *     this list is empty\n@@ -851,1 +850,1 @@\n-     * of the stack represented by this list)\n+     *         of the stack represented by this list)\n@@ -903,2 +902,2 @@\n-     * Obeys the general contract of {@code List.listIterator(int)}.\n-     * <p>\n+     * Obeys the general contract of {@code List.listIterator(int)}.<p>\n+     *\n@@ -917,1 +916,1 @@\n-     * sequence), starting at the specified position in the list\n+     *         sequence), starting at the specified position in the list\n@@ -1049,1 +1048,0 @@\n-\n@@ -1053,1 +1051,0 @@\n-\n@@ -1057,1 +1054,0 @@\n-\n@@ -1105,1 +1101,1 @@\n-     * in proper sequence\n+     *         in proper sequence\n@@ -1140,1 +1136,1 @@\n-     * <p>\n+     *\n@@ -1148,3 +1144,3 @@\n-     * @throws ArrayStoreException  if the runtime type of the specified array\n-     *                              is not a supertype of the runtime type of every element in\n-     *                              this list\n+     * @throws ArrayStoreException if the runtime type of the specified array\n+     *         is not a supertype of the runtime type of every element in\n+     *         this list\n@@ -1156,2 +1152,2 @@\n-            a = (T[]) java.lang.reflect.Array.newInstance(\n-                    a.getClass().getComponentType(), size);\n+            a = (T[])java.lang.reflect.Array.newInstance(\n+                                a.getClass().getComponentType(), size);\n@@ -1177,2 +1173,2 @@\n-     * contains) is emitted (int), followed by all of its\n-     * elements (each an Object) in the proper order.\n+     *             contains) is emitted (int), followed by all of its\n+     *             elements (each an Object) in the proper order.\n@@ -1182,1 +1178,1 @@\n-            throws java.io.IOException {\n+        throws java.io.IOException {\n@@ -1201,1 +1197,1 @@\n-            throws java.io.IOException, ClassNotFoundException {\n+        throws java.io.IOException, ClassNotFoundException {\n@@ -1210,1 +1206,1 @@\n-            linkLast((E) s.readObject());\n+            linkLast((E)s.readObject());\n@@ -1222,2 +1218,2 @@\n-     * @return a {@code Spliterator} over the elements in this list\n-     * @implNote The {@code Spliterator} additionally reports {@link Spliterator#SUBSIZED}\n+     * @implNote\n+     * The {@code Spliterator} additionally reports {@link Spliterator#SUBSIZED}\n@@ -1225,0 +1221,2 @@\n+     *\n+     * @return a {@code Spliterator} over the elements in this list\n@@ -1232,3 +1230,1 @@\n-    \/**\n-     * A customized variant of Spliterators.IteratorSpliterator\n-     *\/\n+    \/** A customized variant of Spliterators.IteratorSpliterator *\/\n@@ -1265,3 +1261,1 @@\n-        public long estimateSize() {\n-            return (long) getEst();\n-        }\n+        public long estimateSize() { return (long) getEst(); }\n@@ -1280,3 +1274,1 @@\n-                do {\n-                    a[j++] = p.item;\n-                } while ((p = p.next) != null && j < n);\n+                do { a[j++] = p.item; } while ((p = p.next) != null && j < n);\n@@ -1292,2 +1284,1 @@\n-            Node<E> p;\n-            int n;\n+            Node<E> p; int n;\n","filename":"src\/java.base\/share\/classes\/java\/util\/LinkedList.java","additions":44,"deletions":53,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -350,1 +350,1 @@\n-        int i = base.findIndex(filter);\n+        int i = base.findLastIndex(filter);\n@@ -360,1 +360,1 @@\n-        int i = base.findLastIndex(filter);\n+        int i = base.findIndex(filter);\n","filename":"src\/java.base\/share\/classes\/java\/util\/ReverseOrderListView.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.internal.util.ArraysSupport;\n+\n@@ -35,2 +37,0 @@\n-import jdk.internal.util.ArraysSupport;\n-\n@@ -385,1 +385,1 @@\n-     * @param filter a predicate to search mathcing element for\n+     * @param filter a predicate to search matching element for\n@@ -431,1 +431,1 @@\n-     * @param filter a predicate to search mathcing element for\n+     * @param filter a predicate to search matching element for\n@@ -437,0 +437,1 @@\n+     * @see Object#equals(Object)\n@@ -467,1 +468,1 @@\n-     * {@code i >= index && filter.test(get(i))},\n+     * {@code (filter.test(get(i)))},\n@@ -470,1 +471,1 @@\n-     * @param filter a predicate to search mathcing element for\n+     * @param filter a predicate to search matching element for\n@@ -515,1 +516,1 @@\n-     * {@code i <= index && filter.test(get(i))},\n+     * {@code (i <= index && filter.test(get(i)))},\n@@ -518,1 +519,1 @@\n-     * @param filter a predicate to search mathcing element for\n+     * @param filter a predicate to search matching element for\n","filename":"src\/java.base\/share\/classes\/java\/util\/Vector.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -95,2 +95,0 @@\n- * @param <E> the type of elements held in this list\n- * @author Doug Lea\n@@ -98,0 +96,2 @@\n+ * @author Doug Lea\n+ * @param <E> the type of elements held in this list\n@@ -100,1 +100,1 @@\n-        implements List<E>, RandomAccess, Cloneable, java.io.Serializable {\n+    implements List<E>, RandomAccess, Cloneable, java.io.Serializable {\n@@ -109,3 +109,1 @@\n-    \/**\n-     * The array, accessed only via getArray\/setArray.\n-     *\/\n+    \/** The array, accessed only via getArray\/setArray. *\/\n@@ -147,1 +145,1 @@\n-            es = ((CopyOnWriteArrayList<?>) c).getArray();\n+            es = ((CopyOnWriteArrayList<?>)c).getArray();\n@@ -160,1 +158,1 @@\n-     *                 internal array)\n+     *        internal array)\n@@ -188,3 +186,2 @@\n-     *\n-     * @param o    element to search for\n-     * @param es   the array\n+     * @param o element to search for\n+     * @param es the array\n@@ -192,1 +189,1 @@\n-     * @param to   one past last index to search\n+     * @param to one past last index to search\n@@ -209,1 +206,1 @@\n-     * static version of lastIndexOf.\n+     * static version of findIndex.\n@@ -226,3 +223,2 @@\n-     *\n-     * @param o    element to search for\n-     * @param es   the array\n+     * @param o element to search for\n+     * @param es the array\n@@ -230,1 +226,1 @@\n-     * @param to   one past last element of range, first element to search\n+     * @param to one past last element of range, first element to search\n@@ -247,1 +243,1 @@\n-     * static version of lastIndexOf.\n+     * static version of findLastIndex.\n@@ -328,1 +324,1 @@\n-     * @param e     element to search for\n+     * @param e element to search for\n@@ -331,2 +327,2 @@\n-     * this list at position {@code index} or later in the list;\n-     * {@code -1} if the element is not found.\n+     *         this list at position {@code index} or later in the list;\n+     *         {@code -1} if the element is not found.\n@@ -356,1 +352,1 @@\n-     * @param e     element to search for\n+     * @param e element to search for\n@@ -359,2 +355,2 @@\n-     * less than or equal to {@code index} in this list;\n-     * -1 if the element is not found.\n+     *         less than or equal to {@code index} in this list;\n+     *         -1 if the element is not found.\n@@ -362,1 +358,1 @@\n-     *                                   than or equal to the current size of this list\n+     *         than or equal to the current size of this list\n@@ -379,1 +375,1 @@\n-                    (CopyOnWriteArrayList<E>) super.clone();\n+                (CopyOnWriteArrayList<E>) super.clone();\n@@ -433,1 +429,1 @@\n-     * <p>\n+     *\n@@ -441,3 +437,3 @@\n-     * @throws ArrayStoreException  if the runtime type of the specified array\n-     *                              is not a supertype of the runtime type of every element in\n-     *                              this list\n+     * @throws ArrayStoreException if the runtime type of the specified array\n+     *         is not a supertype of the runtime type of every element in\n+     *         this list\n@@ -567,1 +563,1 @@\n-                        numMoved);\n+                                 numMoved);\n@@ -614,1 +610,1 @@\n-                        numMoved);\n+                                 numMoved);\n@@ -678,1 +674,1 @@\n-            if (snapshot != current) findIndex:{\n+            if (snapshot != current) findIndex: {\n@@ -682,1 +678,1 @@\n-                            && Objects.equals(o, current[i])) {\n+                        && Objects.equals(o, current[i])) {\n@@ -698,2 +694,2 @@\n-                    newElements, index,\n-                    len - index - 1);\n+                             newElements, index,\n+                             len - index - 1);\n@@ -713,1 +709,1 @@\n-     * @param toIndex   index after last element to be removed\n+     * @param toIndex index after last element to be removed\n@@ -715,1 +711,1 @@\n-     *                                   ({@code fromIndex < 0 || toIndex > size() || toIndex < fromIndex})\n+     *         ({@code fromIndex < 0 || toIndex > size() || toIndex < fromIndex})\n@@ -732,1 +728,1 @@\n-                        fromIndex, numMoved);\n+                                 fromIndex, numMoved);\n@@ -747,1 +743,1 @@\n-                && addIfAbsent(e, snapshot);\n+            && addIfAbsent(e, snapshot);\n@@ -763,1 +759,1 @@\n-                            && Objects.equals(e, current[i]))\n+                        && Objects.equals(e, current[i]))\n@@ -766,1 +762,1 @@\n-                    return false;\n+                        return false;\n@@ -781,1 +777,1 @@\n-     * specified collection\n+     *         specified collection\n@@ -802,3 +798,3 @@\n-     * @throws ClassCastException   if the class of an element of this list\n-     *                              is incompatible with the specified collection\n-     *                              (<a href=\"{@docRoot}\/java.base\/java\/util\/Collection.html#optional-restrictions\">optional<\/a>)\n+     * @throws ClassCastException if the class of an element of this list\n+     *         is incompatible with the specified collection\n+     * (<a href=\"{@docRoot}\/java.base\/java\/util\/Collection.html#optional-restrictions\">optional<\/a>)\n@@ -806,3 +802,3 @@\n-     *                              specified collection does not permit null elements\n-     *                              (<a href=\"{@docRoot}\/java.base\/java\/util\/Collection.html#optional-restrictions\">optional<\/a>),\n-     *                              or if the specified collection is null\n+     *         specified collection does not permit null elements\n+     * (<a href=\"{@docRoot}\/java.base\/java\/util\/Collection.html#optional-restrictions\">optional<\/a>),\n+     *         or if the specified collection is null\n@@ -823,3 +819,3 @@\n-     * @throws ClassCastException   if the class of an element of this list\n-     *                              is incompatible with the specified collection\n-     *                              (<a href=\"{@docRoot}\/java.base\/java\/util\/Collection.html#optional-restrictions\">optional<\/a>)\n+     * @throws ClassCastException if the class of an element of this list\n+     *         is incompatible with the specified collection\n+     * (<a href=\"{@docRoot}\/java.base\/java\/util\/Collection.html#optional-restrictions\">optional<\/a>)\n@@ -827,3 +823,3 @@\n-     *                              specified collection does not permit null elements\n-     *                              (<a href=\"{@docRoot}\/java.base\/java\/util\/Collection.html#optional-restrictions\">optional<\/a>),\n-     *                              or if the specified collection is null\n+     *         specified collection does not permit null elements\n+     * (<a href=\"{@docRoot}\/java.base\/java\/util\/Collection.html#optional-restrictions\">optional<\/a>),\n+     *         or if the specified collection is null\n@@ -863,1 +859,1 @@\n-                        indexOfRange(e, cs, 0, added) < 0)\n+                    indexOfRange(e, cs, 0, added) < 0)\n@@ -897,1 +893,1 @@\n-                ((CopyOnWriteArrayList<?>) c).getArray() : c.toArray();\n+            ((CopyOnWriteArrayList<?>)c).getArray() : c.toArray();\n@@ -905,1 +901,1 @@\n-                    c.getClass() == ArrayList.class)) {\n+                             c.getClass() == ArrayList.class)) {\n@@ -925,2 +921,2 @@\n-     *              from the specified collection\n-     * @param c     collection containing elements to be added to this list\n+     *        from the specified collection\n+     * @param c collection containing elements to be added to this list\n@@ -929,2 +925,2 @@\n-     * @throws NullPointerException      if the specified collection is null\n-     * @see #add(int, Object)\n+     * @throws NullPointerException if the specified collection is null\n+     * @see #add(int,Object)\n@@ -949,2 +945,2 @@\n-                        newElements, index + cs.length,\n-                        numMoved);\n+                                 newElements, index + cs.length,\n+                                 numMoved);\n@@ -982,1 +978,0 @@\n-\n@@ -986,1 +981,0 @@\n-\n@@ -1056,1 +1050,1 @@\n-        Arrays.sort(es, i, end, (Comparator<Object>) c);\n+        Arrays.sort(es, i, end, (Comparator<Object>)c);\n@@ -1066,2 +1060,2 @@\n-     * (int), followed by all of its elements (each an Object)\n-     * in the proper order.\n+     *               (int), followed by all of its elements (each an Object)\n+     *               in the proper order.\n@@ -1070,1 +1064,1 @@\n-            throws java.io.IOException {\n+        throws java.io.IOException {\n@@ -1085,1 +1079,0 @@\n-     *\n@@ -1088,2 +1081,2 @@\n-     *                                could not be found\n-     * @throws java.io.IOException    if an I\/O error occurs\n+     *         could not be found\n+     * @throws java.io.IOException if an I\/O error occurs\n@@ -1092,1 +1085,1 @@\n-            throws java.io.IOException, ClassNotFoundException {\n+        throws java.io.IOException, ClassNotFoundException {\n@@ -1145,1 +1138,1 @@\n-        List<?> list = (List<?>) o;\n+        List<?> list = (List<?>)o;\n@@ -1235,1 +1228,1 @@\n-                (getArray(), Spliterator.IMMUTABLE | Spliterator.ORDERED);\n+            (getArray(), Spliterator.IMMUTABLE | Spliterator.ORDERED);\n@@ -1239,3 +1232,1 @@\n-        \/**\n-         * Snapshot of the array\n-         *\/\n+        \/** Snapshot of the array *\/\n@@ -1243,3 +1234,1 @@\n-        \/**\n-         * Index of element to be returned by subsequent call to next.\n-         *\/\n+        \/** Index of element to be returned by subsequent call to next.  *\/\n@@ -1263,1 +1252,1 @@\n-            if (!hasNext())\n+            if (! hasNext())\n@@ -1270,1 +1259,1 @@\n-            if (!hasPrevious())\n+            if (! hasPrevious())\n@@ -1285,1 +1274,0 @@\n-         *\n@@ -1287,1 +1275,1 @@\n-         *                                       is not supported by this iterator.\n+         *         is not supported by this iterator.\n@@ -1295,1 +1283,0 @@\n-         *\n@@ -1297,1 +1284,1 @@\n-         *                                       is not supported by this iterator.\n+         *         is not supported by this iterator.\n@@ -1305,1 +1292,0 @@\n-         *\n@@ -1307,1 +1293,1 @@\n-         *                                       is not supported by this iterator.\n+         *         is not supported by this iterator.\n@@ -1335,1 +1321,1 @@\n-     * @param toIndex   high endpoint (exclusive) of the subList\n+     * @param toIndex high endpoint (exclusive) of the subList\n@@ -1522,1 +1508,1 @@\n-            Iterator<?> it = ((List<?>) o).iterator();\n+            Iterator<?> it = ((List<?>)o).iterator();\n@@ -1616,1 +1602,1 @@\n-                        CopyOnWriteArrayList.this.addAll(offset + size, c);\n+                    CopyOnWriteArrayList.this.addAll(offset + size, c);\n@@ -1627,1 +1613,1 @@\n-                        CopyOnWriteArrayList.this.addAll(offset + index, c);\n+                    CopyOnWriteArrayList.this.addAll(offset + index, c);\n@@ -1695,1 +1681,1 @@\n-                        CopyOnWriteArrayList.this, index, offset, size);\n+                    CopyOnWriteArrayList.this, index, offset, size);\n@@ -1710,2 +1696,1 @@\n-            int i, end;\n-            final Object[] es;\n+            int i, end; final Object[] es;\n@@ -1756,1 +1741,1 @@\n-                        filter, offset, offset + size);\n+                    filter, offset, offset + size);\n@@ -1866,1 +1851,0 @@\n-\n@@ -1872,12 +1856,3 @@\n-\n-            public boolean hasNext() {\n-                return it.hasPrevious();\n-            }\n-\n-            public E next() {\n-                return it.previous();\n-            }\n-\n-            public void remove() {\n-                it.remove();\n-            }\n+            public boolean hasNext() { return it.hasPrevious(); }\n+            public E next() { return it.previous(); }\n+            public void remove() { it.remove(); }\n@@ -1994,1 +1969,1 @@\n-                if (!(o1 == null ? o2 == null : o1.equals(o2)))\n+                if (!(o1==null ? o2==null : o1.equals(o2)))\n@@ -2004,1 +1979,1 @@\n-                hashCode = 31 * hashCode + (e == null ? 0 : e.hashCode());\n+                hashCode = 31*hashCode + (e==null ? 0 : e.hashCode());\n@@ -2059,1 +2034,1 @@\n-            if (!it.hasNext())\n+            if (! it.hasNext())\n@@ -2064,1 +2039,1 @@\n-            for (; ; ) {\n+            for (;;) {\n@@ -2067,1 +2042,1 @@\n-                if (!it.hasNext())\n+                if (! it.hasNext())\n@@ -2137,1 +2112,1 @@\n-                int i = base.indexOf(filter);\n+                int i = base.findLastIndex(filter);\n@@ -2151,1 +2126,1 @@\n-                int i = base.lastIndexOf(filter);\n+                int i = base.findIndex(filter);\n@@ -2220,3 +2195,1 @@\n-    \/**\n-     * Initializes the lock; for use when deserializing or cloning.\n-     *\/\n+    \/** Initializes the lock; for use when deserializing or cloning. *\/\n@@ -2226,10 +2199,9 @@\n-                (java.security.PrivilegedAction<Field>) () -> {\n-                    try {\n-                        Field f = CopyOnWriteArrayList.class\n-                                .getDeclaredField(\"lock\");\n-                        f.setAccessible(true);\n-                        return f;\n-                    } catch (ReflectiveOperationException e) {\n-                        throw new Error(e);\n-                    }\n-                });\n+            (java.security.PrivilegedAction<Field>) () -> {\n+                try {\n+                    Field f = CopyOnWriteArrayList.class\n+                        .getDeclaredField(\"lock\");\n+                    f.setAccessible(true);\n+                    return f;\n+                } catch (ReflectiveOperationException e) {\n+                    throw new Error(e);\n+                }});\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CopyOnWriteArrayList.java","additions":103,"deletions":131,"binary":false,"changes":234,"status":"modified"},{"patch":"@@ -138,1 +138,3 @@\n-    public int lastIndexOf(Predicate<? super E> filter) { return list.lastIndexOf(filter); }\n+    public int lastIndexOf(Predicate<? super E> filter) {\n+    return list.lastIndexOf(filter);\n+    }\n","filename":"test\/jdk\/java\/util\/SequencedCollection\/SimpleList.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}