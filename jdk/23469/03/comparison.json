{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm CloseKeepAliveCached\n+ * @library \/test\/lib\n@@ -31,2 +31,2 @@\n- *     SunJSSE does not support dynamic system properties, no way to re-use\n- *     system properties in samevm\/agentvm mode.\n+ * @run main\/othervm -Dtest.separateThreads=true CloseKeepAliveCached false\n+ * @run main\/othervm -Dtest.separateThreads=true CloseKeepAliveCached true\n@@ -34,2 +34,2 @@\n- * @ignore\n- *    After run the test manually, at the end of the debug output,\n+ * @comment SunJSSE does not support dynamic system properties, no way to re-use\n+ *    system properties in samevm\/agentvm mode.\n@@ -40,4 +40,17 @@\n-import java.net.*;\n-import java.util.*;\n-import java.io.*;\n-import javax.net.ssl.*;\n+import jdk.test.lib.Asserts;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.BufferedReader;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.net.URL;\n+import javax.net.ssl.HostnameVerifier;\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLServerSocket;\n+import javax.net.ssl.SSLServerSocketFactory;\n+import javax.net.ssl.SSLSession;\n+import javax.net.ssl.SSLSocket;\n@@ -46,2 +59,1 @@\n-    static Map cookies;\n-    ServerSocket ss;\n+    public static final String CLOSE_THE_SSL_CONNECTION_PASSIVE = \"close the SSL connection (passive)\";\n@@ -60,1 +72,1 @@\n-    static boolean separateServerThread = true;\n+    static boolean separateServerThread = Boolean.getBoolean(\"test.separateThreads\");\n@@ -75,5 +87,0 @@\n-    \/*\n-     * Turn on SSL debugging?\n-     *\/\n-    static boolean debug = false;\n-\n@@ -89,2 +96,2 @@\n-        SSLServerSocketFactory sslssf =\n-            (SSLServerSocketFactory) SSLServerSocketFactory.getDefault();\n+        SSLServerSocketFactory sslSsf =\n+                (SSLServerSocketFactory) SSLServerSocketFactory.getDefault();\n@@ -92,1 +99,1 @@\n-            (SSLServerSocket) sslssf.createServerSocket(serverPort);\n+                (SSLServerSocket) sslSsf.createServerSocket(serverPort);\n@@ -99,14 +106,16 @@\n-        SSLSocket sslSocket = null;\n-        try {\n-            sslSocket = (SSLSocket) sslServerSocket.accept();\n-            for (int i = 0; i < 3 && !sslSocket.isClosed(); i++) {\n-                \/\/ read request\n-                InputStream is = sslSocket.getInputStream ();\n-\n-                BufferedReader r = new BufferedReader(\n-                                                new InputStreamReader(is));\n-                String x;\n-                while ((x=r.readLine()) != null) {\n-                    if (x.length() ==0) {\n-                        break;\n-                    }\n+        SSLSocket sslSocket = (SSLSocket) sslServerSocket.accept();\n+\n+        \/\/ getting input and output streams\n+        InputStream is = sslSocket.getInputStream();\n+        BufferedReader r = new BufferedReader(\n+                new InputStreamReader(is));\n+        PrintStream out = new PrintStream(\n+                new BufferedOutputStream(\n+                        sslSocket.getOutputStream()));\n+\n+        for (int i = 0; i < 3 && !sslSocket.isClosed(); i++) {\n+            \/\/ read request\n+            String x;\n+            while ((x = r.readLine()) != null) {\n+                if (x.isEmpty()) {\n+                    break;\n@@ -114,0 +123,1 @@\n+            }\n@@ -115,0 +125,9 @@\n+            \/* send the response headers and body *\/\n+            out.print(\"HTTP\/1.1 200 OK\\r\\n\");\n+            out.print(\"Keep-Alive: timeout=15, max=100\\r\\n\");\n+            out.print(\"Connection: Keep-Alive\\r\\n\");\n+            out.print(\"Content-Type: text\/html; charset=iso-8859-1\\r\\n\");\n+            out.print(\"Content-Length: 9\\r\\n\");\n+            out.print(\"\\r\\n\");\n+            out.print(\"Testing\\r\\n\");\n+            out.flush();\n@@ -116,20 +135,1 @@\n-                PrintStream out = new PrintStream(\n-                                 new BufferedOutputStream(\n-                                    sslSocket.getOutputStream() ));\n-\n-                \/* send the header *\/\n-                out.print(\"HTTP\/1.1 200 OK\\r\\n\");\n-                out.print(\"Keep-Alive: timeout=15, max=100\\r\\n\");\n-                out.print(\"Connection: Keep-Alive\\r\\n\");\n-                out.print(\"Content-Type: text\/html; charset=iso-8859-1\\r\\n\");\n-                out.print(\"Content-Length: 9\\r\\n\");\n-                out.print(\"\\r\\n\");\n-                out.print(\"Testing\\r\\n\");\n-                out.flush();\n-\n-                Thread.sleep(50);\n-            }\n-            sslSocket.close();\n-            sslServerSocket.close();\n-        } catch (Exception e) {\n-            e.printStackTrace();\n+            Thread.sleep(50);\n@@ -137,0 +137,2 @@\n+        sslSocket.close();\n+        sslServerSocket.close();\n@@ -154,1 +156,1 @@\n-            HttpsURLConnection.getDefaultHostnameVerifier();\n+                HttpsURLConnection.getDefaultHostnameVerifier();\n@@ -156,1 +158,1 @@\n-            HttpsURLConnection http = null;\n+            HttpsURLConnection http;\n@@ -159,1 +161,1 @@\n-            URL url = new URL(\"https:\/\/localhost:\" + serverPort+\"\/\");\n+            URL url = new URI(\"https:\/\/localhost:\" + serverPort + \"\/\").toURL();\n@@ -161,3 +163,3 @@\n-            http = (HttpsURLConnection)url.openConnection();\n-            InputStream is = http.getInputStream ();\n-            while (is.read() != -1);\n+            http = (HttpsURLConnection) url.openConnection();\n+            InputStream is = http.getInputStream();\n+            while (is.read() != -1) ;\n@@ -166,4 +168,4 @@\n-            url = new URL(\"https:\/\/localhost:\" + serverPort+\"\/\");\n-            http = (HttpsURLConnection)url.openConnection();\n-            is = http.getInputStream ();\n-            while (is.read() != -1);\n+            url = new URI(\"https:\/\/localhost:\" + serverPort + \"\/\").toURL();\n+            http = (HttpsURLConnection) url.openConnection();\n+            is = http.getInputStream();\n+            while (is.read() != -1) ;\n@@ -173,1 +175,1 @@\n-            \/\/ wanna close the keep-alive cached connection immediately\n+            \/\/ want to close the keep-alive cached connection immediately\n@@ -183,1 +185,0 @@\n-            \/\/ Thread.sleep(5000);\n@@ -185,1 +186,1 @@\n-            if (sslServerSocket != null)\n+            if (sslServerSocket != null) {\n@@ -187,0 +188,1 @@\n+            }\n@@ -210,1 +212,4 @@\n-    public static void main(String args[]) throws Exception {\n+    public static void main(String[] args) throws Exception {\n+        separateServerThread = Boolean.parseBoolean(args[0]);\n+        System.out.printf(\"separateServerThread: %s%n\", separateServerThread);\n+\n@@ -212,1 +217,1 @@\n-            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n+                System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n@@ -215,1 +220,1 @@\n-            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n+                System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n@@ -223,2 +228,7 @@\n-        if (debug)\n-            System.setProperty(\"javax.net.debug\", \"all\");\n+        System.setProperty(\"javax.net.debug\", \"all\");\n+\n+        \/\/ setting up the error stream for further analysis\n+        var errorCapture = new ByteArrayOutputStream();\n+        var errorStream = new PrintStream(errorCapture);\n+        var originalErr = System.err; \/\/ saving the initial error stream, so it can be restored\n+        System.setErr(errorStream);\n@@ -229,1 +239,34 @@\n-        new CloseKeepAliveCached();\n+        try {\n+            new CloseKeepAliveCached();\n+        } finally {\n+            \/\/ this will allow the error stream to be printed in case of an exception inside for debugging purposes\n+            System.setErr(originalErr);\n+            if (Boolean.getBoolean(\"test.debug\")) {\n+                System.err.println(errorCapture);\n+            }\n+        }\n+\n+        \/\/ Parses the captured error stream, which is used by debug, to find out who closed the SSL connection\n+        \/\/ example of pass: javax.net.ssl|DEBUG|91|MainThread|...|close the SSL connection (passive)\n+        \/\/ example of fail: javax.net.ssl|DEBUG|C1|Keep-Alive-Timer|...|close the SSL connection (passive)\n+        var isTestPassed = false;\n+        for (final String line : errorCapture.toString().split(\"\\n\")) {\n+            if (line.contains(CLOSE_THE_SSL_CONNECTION_PASSIVE) &&\n+                line.contains(\"MainThread\")) {\n+\n+                System.out.println(\"close was called by the MainThread: \");\n+                System.out.println(line);\n+\n+                isTestPassed = true;\n+                break;\n+            } else if (line.contains(CLOSE_THE_SSL_CONNECTION_PASSIVE) &&\n+                       line.contains(\"Keep-Alive-Timer\")) {\n+\n+                System.out.println(\"close was called by the Keep-Alive-Timer: \");\n+                System.out.println(line);\n+\n+                throw new RuntimeException(\"SSL connection was closed by the Keep-Alive-Timer. Should have been MainThread\");\n+            }\n+        }\n+\n+        Asserts.assertTrue(isTestPassed, \"Test pass result\");\n@@ -234,0 +277,1 @@\n+\n@@ -272,14 +316,12 @@\n-            serverThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doServerSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our server thread just died.\n-                         *\n-                         * Release the client, if not active already...\n-                         *\/\n-                        System.err.println(\"Server died...\");\n-                        serverReady = true;\n-                        serverException = e;\n-                    }\n+            serverThread = new Thread(() -> {\n+                try {\n+                    doServerSide();\n+                } catch (Exception e) {\n+                    \/*\n+                     * Our server thread just died.\n+                     *\n+                     * Release the client, if not active already...\n+                     *\/\n+                    System.err.println(\"Server died...\");\n+                    serverReady = true;\n+                    serverException = e;\n@@ -287,1 +329,1 @@\n-            };\n+            });\n@@ -296,11 +338,9 @@\n-            clientThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doClientSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our client thread just died.\n-                         *\/\n-                        System.err.println(\"Client died...\");\n-                        clientException = e;\n-                    }\n+            clientThread = new Thread(() -> {\n+                try {\n+                    doClientSide();\n+                } catch (Exception e) {\n+                    \/*\n+                     * Our client thread just died.\n+                     *\/\n+                    System.err.println(\"Client died...\");\n+                    clientException = e;\n@@ -308,1 +348,1 @@\n-            };\n+            });\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/CloseKeepAliveCached.java","additions":141,"deletions":101,"binary":false,"changes":242,"status":"modified"}]}