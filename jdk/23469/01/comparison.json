{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm CloseKeepAliveCached\n+ * @library \/test\/lib\n@@ -31,2 +31,2 @@\n- *     SunJSSE does not support dynamic system properties, no way to re-use\n- *     system properties in samevm\/agentvm mode.\n+ * @run main\/othervm CloseKeepAliveCached false\n+ * @run main\/othervm CloseKeepAliveCached true\n@@ -34,2 +34,2 @@\n- * @ignore\n- *    After run the test manually, at the end of the debug output,\n+ * @comment SunJSSE does not support dynamic system properties, no way to re-use\n+ *    system properties in samevm\/agentvm mode.\n@@ -40,0 +40,2 @@\n+import jdk.test.lib.Asserts;\n+\n@@ -46,0 +48,2 @@\n+    public static final String CLOSE_THE_SSL_CONNECTION_PASSIVE = \"close the SSL connection (passive)\";\n+\n@@ -90,1 +94,1 @@\n-            (SSLServerSocketFactory) SSLServerSocketFactory.getDefault();\n+                (SSLServerSocketFactory) SSLServerSocketFactory.getDefault();\n@@ -92,1 +96,1 @@\n-            (SSLServerSocket) sslssf.createServerSocket(serverPort);\n+                (SSLServerSocket) sslssf.createServerSocket(serverPort);\n@@ -99,15 +103,1 @@\n-        SSLSocket sslSocket = null;\n-        try {\n-            sslSocket = (SSLSocket) sslServerSocket.accept();\n-            for (int i = 0; i < 3 && !sslSocket.isClosed(); i++) {\n-                \/\/ read request\n-                InputStream is = sslSocket.getInputStream ();\n-\n-                BufferedReader r = new BufferedReader(\n-                                                new InputStreamReader(is));\n-                String x;\n-                while ((x=r.readLine()) != null) {\n-                    if (x.length() ==0) {\n-                        break;\n-                    }\n-                }\n+        SSLSocket sslSocket = (SSLSocket) sslServerSocket.accept();\n@@ -115,0 +105,7 @@\n+        \/\/ getting input and output streams\n+        InputStream is = sslSocket.getInputStream();\n+        BufferedReader r = new BufferedReader(\n+                new InputStreamReader(is));\n+        PrintStream out = new PrintStream(\n+                new BufferedOutputStream(\n+                        sslSocket.getOutputStream()));\n@@ -116,3 +113,8 @@\n-                PrintStream out = new PrintStream(\n-                                 new BufferedOutputStream(\n-                                    sslSocket.getOutputStream() ));\n+        for (int i = 0; i < 3 && !sslSocket.isClosed(); i++) {\n+            \/\/ read request\n+            String x;\n+            while ((x = r.readLine()) != null) {\n+                if (x.length() == 0) {\n+                    break;\n+                }\n+            }\n@@ -120,9 +122,9 @@\n-                \/* send the header *\/\n-                out.print(\"HTTP\/1.1 200 OK\\r\\n\");\n-                out.print(\"Keep-Alive: timeout=15, max=100\\r\\n\");\n-                out.print(\"Connection: Keep-Alive\\r\\n\");\n-                out.print(\"Content-Type: text\/html; charset=iso-8859-1\\r\\n\");\n-                out.print(\"Content-Length: 9\\r\\n\");\n-                out.print(\"\\r\\n\");\n-                out.print(\"Testing\\r\\n\");\n-                out.flush();\n+            \/* send the response headers and body *\/\n+            out.print(\"HTTP\/1.1 200 OK\\r\\n\");\n+            out.print(\"Keep-Alive: timeout=15, max=100\\r\\n\");\n+            out.print(\"Connection: Keep-Alive\\r\\n\");\n+            out.print(\"Content-Type: text\/html; charset=iso-8859-1\\r\\n\");\n+            out.print(\"Content-Length: 9\\r\\n\");\n+            out.print(\"\\r\\n\");\n+            out.print(\"Testing\\r\\n\");\n+            out.flush();\n@@ -130,6 +132,1 @@\n-                Thread.sleep(50);\n-            }\n-            sslSocket.close();\n-            sslServerSocket.close();\n-        } catch (Exception e) {\n-            e.printStackTrace();\n+            Thread.sleep(50);\n@@ -137,0 +134,2 @@\n+        sslSocket.close();\n+        sslServerSocket.close();\n@@ -154,1 +153,1 @@\n-            HttpsURLConnection.getDefaultHostnameVerifier();\n+                HttpsURLConnection.getDefaultHostnameVerifier();\n@@ -211,0 +210,3 @@\n+        separateServerThread = Boolean.parseBoolean(args[0]);\n+        System.out.printf(\"separateServerThread: %s%n\", separateServerThread);\n+\n@@ -212,2 +214,2 @@\n-            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n-                \"\/\" + keyStoreFile;\n+                System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n+                        \"\/\" + keyStoreFile;\n@@ -215,2 +217,2 @@\n-            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n-                \"\/\" + trustStoreFile;\n+                System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n+                        \"\/\" + trustStoreFile;\n@@ -223,2 +225,7 @@\n-        if (debug)\n-            System.setProperty(\"javax.net.debug\", \"all\");\n+        System.setProperty(\"javax.net.debug\", \"all\");\n+\n+        \/\/ setting up the error stream for further analysis\n+        var errorCapture = new ByteArrayOutputStream();\n+        var errorStream = new PrintStream(errorCapture);\n+        var originalErr = System.err; \/\/ saving the initial error stream, so it can be restored\n+        System.setErr(errorStream);\n@@ -229,1 +236,34 @@\n-        new CloseKeepAliveCached();\n+        try {\n+            new CloseKeepAliveCached();\n+        } finally {\n+            \/\/ this will allow the error stream to be printed in case of an exception inside for debugging purposes\n+            System.setErr(originalErr);\n+            if (debug) {\n+                System.err.println(errorCapture);\n+            }\n+        }\n+\n+        \/\/ Parses the captured error stream, which is used by debug, to find out who closed the SSL connection\n+        \/\/ example of pass: javax.net.ssl|DEBUG|91|MainThread|...|close the SSL connection (passive)\n+        \/\/ example of fail: javax.net.ssl|DEBUG|C1|Keep-Alive-Timer|...|close the SSL connection (passive)\n+        var isTestPassed = false;\n+        for (final var line : errorCapture.toString().split(\"\\n\")) {\n+            if (line.contains(CLOSE_THE_SSL_CONNECTION_PASSIVE) &&\n+                    line.contains(\"MainThread\")) {\n+\n+                System.out.println(\"close was called by the MainThread: \");\n+                System.out.println(line);\n+\n+                isTestPassed = true;\n+                break;\n+            } else if (line.contains(CLOSE_THE_SSL_CONNECTION_PASSIVE) &&\n+                    line.contains(\"Keep-Alive-Timer\")) {\n+\n+                System.out.println(\"close was called by the Keep-Alive-Timer: \");\n+                System.out.println(line);\n+\n+                throw new RuntimeException(\"SSL connection was closed by the Keep-Alive-Timer. Should have been MainThread\");\n+            }\n+        }\n+\n+        Asserts.assertTrue(isTestPassed, \"Test pass result\");\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/CloseKeepAliveCached.java","additions":89,"deletions":49,"binary":false,"changes":138,"status":"modified"}]}