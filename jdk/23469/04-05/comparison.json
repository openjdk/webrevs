{"files":[{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=\"separateServerThread\"\n@@ -40,0 +40,16 @@\n+\/*\n+ * @test id=\"separateClientThread\"\n+ * @bug 6618387\n+ * @summary SSL client sessions do not close cleanly. A TCP reset occurs\n+ *      instead of a close_notify alert.\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -Dtest.separateThreads=false CloseKeepAliveCached false\n+ * @run main\/othervm -Dtest.separateThreads=false CloseKeepAliveCached true\n+ *\n+ * @comment SunJSSE does not support dynamic system properties, no way to re-use\n+ *    system properties in samevm\/agentvm mode.\n+ *    if \"MainThread, called close()\" found, the test passed. Otherwise,\n+ *    if \"Keep-Alive-Timer: called close()\", the test failed.\n+ *\/\n+\n@@ -98,3 +114,0 @@\n-        sslServerSocket =\n-                (SSLServerSocket) sslSsf.createServerSocket(serverPort);\n-        serverPort = sslServerSocket.getLocalPort();\n@@ -102,20 +115,37 @@\n-        \/*\n-         * Signal Client, we're ready for his connect.\n-         *\/\n-        serverReady = true;\n-        SSLSocket sslSocket = (SSLSocket) sslServerSocket.accept();\n-\n-        \/\/ getting input and output streams\n-        InputStream is = sslSocket.getInputStream();\n-        BufferedReader r = new BufferedReader(\n-                new InputStreamReader(is));\n-        PrintStream out = new PrintStream(\n-                new BufferedOutputStream(\n-                        sslSocket.getOutputStream()));\n-\n-        for (int i = 0; i < 3 && !sslSocket.isClosed(); i++) {\n-            \/\/ read request\n-            String x;\n-            while ((x = r.readLine()) != null) {\n-                if (x.isEmpty()) {\n-                    break;\n+        \/\/ autoclose sslServerSocket, but keeping it global to be used by the client\n+        try (var _ = this.sslServerSocket = (SSLServerSocket) sslSsf.createServerSocket(serverPort)) {\n+            serverPort = sslServerSocket.getLocalPort();\n+\n+            \/*\n+             * Signal Client, we're ready for his connect.\n+             *\/\n+            serverReady = true;\n+            try (SSLSocket sslSocket = (SSLSocket) sslServerSocket.accept()) {\n+\n+                \/\/ getting input and output streams\n+                InputStream is = sslSocket.getInputStream();\n+                BufferedReader r = new BufferedReader(\n+                        new InputStreamReader(is));\n+                PrintStream out = new PrintStream(\n+                        new BufferedOutputStream(\n+                                sslSocket.getOutputStream()));\n+\n+                for (int i = 0; i < 3 && !sslSocket.isClosed(); i++) {\n+                    \/\/ read request\n+                    String x;\n+                    while ((x = r.readLine()) != null) {\n+                        if (x.isEmpty()) {\n+                            break;\n+                        }\n+                    }\n+\n+                    \/* send the response headers and body *\/\n+                    out.print(\"HTTP\/1.1 200 OK\\r\\n\");\n+                    out.print(\"Keep-Alive: timeout=15, max=100\\r\\n\");\n+                    out.print(\"Connection: Keep-Alive\\r\\n\");\n+                    out.print(\"Content-Type: text\/html; charset=iso-8859-1\\r\\n\");\n+                    out.print(\"Content-Length: 9\\r\\n\");\n+                    out.print(\"\\r\\n\");\n+                    out.print(\"Testing\\r\\n\");\n+                    out.flush();\n+\n@@ -124,12 +154,0 @@\n-\n-            \/* send the response headers and body *\/\n-            out.print(\"HTTP\/1.1 200 OK\\r\\n\");\n-            out.print(\"Keep-Alive: timeout=15, max=100\\r\\n\");\n-            out.print(\"Connection: Keep-Alive\\r\\n\");\n-            out.print(\"Content-Type: text\/html; charset=iso-8859-1\\r\\n\");\n-            out.print(\"Content-Length: 9\\r\\n\");\n-            out.print(\"\\r\\n\");\n-            out.print(\"Testing\\r\\n\");\n-            out.flush();\n-\n-            Thread.sleep(50);\n@@ -137,2 +155,1 @@\n-        sslSocket.close();\n-        sslServerSocket.close();\n+\n@@ -164,3 +181,3 @@\n-            InputStream is = http.getInputStream();\n-            while (is.read() != -1) ;\n-            is.close();\n+            try (InputStream is = http.getInputStream()) {\n+                while (is.read() != -1) ;\n+            }\n@@ -170,1 +187,1 @@\n-            is = http.getInputStream();\n+            InputStream is = http.getInputStream(); \/\/ not closed by design\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/CloseKeepAliveCached.java","additions":59,"deletions":42,"binary":false,"changes":101,"status":"modified"}]}