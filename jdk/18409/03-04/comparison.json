{"files":[{"patch":"@@ -2616,1 +2616,1 @@\n-     * derived key when the same arguments are provided.\n+     * derived keys when the same arguments are provided.\n@@ -2618,0 +2618,1 @@\n+     * @param algorithm the algorithm of the derived key\n@@ -2621,1 +2622,0 @@\n-     * @param algorithm the algorithm of the derived key\n@@ -2635,1 +2635,37 @@\n-    public SecretKey exportKey(byte[] context, String algorithm, int length) {\n+    public SecretKey exportKey(String algorithm, byte[] context, int length) {\n+        chooseFirstProvider();\n+        return spi.engineExportKey(algorithm, context, length);\n+    }\n+\n+\n+    \/**\n+     * Export derived data based on the current cryptographic state and\n+     * additional context.\n+     *\n+     * <p>This method is designed to enable the generation of additional\n+     * secret data for use in various later operations, ensuring that data\n+     * can be securely derived from the existing encryption or\n+     * decryption state.\n+     *\n+     * <p>This method guarantees that an encryption cipher and a decryption\n+     * cipher, if initialized with the same symmetric key or a matching\n+     * asymmetric key pair and equivalent parameters, will produce identical\n+     * derived data when the same arguments are provided.\n+     *\n+     * @param context a byte array representing additional data or context\n+     *          information that influences the key derivation process.\n+     *          The derived key should be unique to the given context.\n+     * @param length the desired length of the derived data\n+     *\n+     * @return the derived data\n+     *\n+     * @throws UnsupportedOperationException if the corresponding method in the\n+     *          {@code CipherSpi} is not supported\n+     * @throws IllegalArgumentException if one or more of the input arguments\n+     *          are invalid\n+     * @throws IllegalStateException if this {@code Cipher} object is in a wrong\n+     *          state (e.g., has not been initialized)\n+     *\n+     * @since 25\n+     *\/\n+    public byte[] exportData(byte[] context, int length) {\n@@ -2637,1 +2673,1 @@\n-        return spi.engineExportKey(context, algorithm, length);\n+        return spi.engineExportData(context, length);\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/Cipher.java","additions":40,"deletions":4,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -970,1 +970,1 @@\n-     * derived key when the same arguments are provided.\n+     * derived keys when the same arguments are provided.\n@@ -972,0 +972,1 @@\n+     * @param algorithm the algorithm of the derived key\n@@ -975,1 +976,0 @@\n-     * @param algorithm the algorithm of the derived key\n@@ -992,1 +992,40 @@\n-    protected SecretKey engineExportKey(byte[] context, String algorithm, int length) {\n+    protected SecretKey engineExportKey(String algorithm, byte[] context, int length) {\n+        throw new UnsupportedOperationException(\n+                \"The underlying Cipher implementation \"\n+                        +  \"does not support this method\");\n+    }\n+\n+    \/**\n+     * Export derived data based on the current cryptographic state and\n+     * additional context.\n+     *\n+     * <p>This method is designed to enable the generation of additional\n+     * secret data for use in various later operations, ensuring that data\n+     * can be securely derived from the existing encryption or\n+     * decryption state.\n+     *\n+     * <p>This method guarantees that an encryption cipher and a decryption\n+     * cipher, if initialized with the same symmetric key or a matching\n+     * asymmetric key pair and equivalent parameters, will produce identical\n+     * derived data when the same arguments are provided.\n+     *\n+     * @param context a byte array representing additional data or context\n+     *          information that influences the key derivation process.\n+     *          The derived key should be unique to the given context.\n+     * @param length the desired length of the derived data\n+     *\n+     * @return the derived data\n+     *\n+     * @throws UnsupportedOperationException if this method has not been\n+     *          overridden by an implementation\n+     * @throws IllegalArgumentException if one or more of the input arguments\n+     *          are invalid\n+     * @throws IllegalStateException if this {@code Cipher} object is in a wrong\n+     *          state (e.g., has not been initialized)\n+     *\n+     * @implSpec The default implementation throws an\n+     * {@code UnsupportedOperationException}.\n+     *\n+     * @since 25\n+     *\/\n+    protected byte[] engineExportData(byte[] context, int length) {\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/CipherSpi.java","additions":42,"deletions":3,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -51,2 +51,4 @@\n-        SecretKey sk11 = c1.exportKey(s2b(\"hi\"), \"X\", 32);\n-        SecretKey sk12 = c1.exportKey(s2b(\"ho\"), \"X\", 32);\n+        SecretKey sk11 = c1.exportKey(\"X\", s2b(\"hi\"), 32);\n+        SecretKey sk12 = c1.exportKey(\"X\", s2b(\"ho\"), 32);\n+        byte[] b11 = c1.exportData(s2b(\"hi\"), 32);\n+        byte[] b12 = c1.exportData(s2b(\"ho\"), 32);\n@@ -56,1 +58,2 @@\n-        SecretKey sk21 = c2.exportKey(s2b(\"hi\"), \"X\", 32);\n+        SecretKey sk21 = c2.exportKey(\"X\", s2b(\"hi\"), 32);\n+        byte[] b21 = c2.exportData(s2b(\"hi\"), 32);\n@@ -60,0 +63,2 @@\n+        Asserts.assertEqualsByteArray(b11, b21);\n+        Asserts.assertNotEqualsByteArray(b11, b12);\n@@ -83,1 +88,6 @@\n-        protected SecretKey engineExportKey(byte[] context, String algorithm, int length) {\n+        protected SecretKey engineExportKey(String algorithm, byte[] context, int length) {\n+            return new SecretKeySpec(engineExportData(context, length), algorithm);\n+        }\n+\n+        @Override\n+        protected byte[] engineExportData(byte[] context, int length) {\n@@ -88,1 +98,1 @@\n-            return new SecretKeySpec(output, algorithm);\n+            return output;\n","filename":"test\/jdk\/javax\/crypto\/Cipher\/Export.java","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"}]}