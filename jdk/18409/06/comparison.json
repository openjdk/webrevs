{"files":[{"patch":"@@ -2580,0 +2580,87 @@\n+    \/**\n+     * Export a derived key based on the current cryptographic state and\n+     * additional context.\n+     *\n+     * <p>This method is designed to enable the generation of additional\n+     * keys for use in various cryptographic operations, ensuring that key\n+     * material can be securely derived from the existing encryption or\n+     * decryption state.\n+     *\n+     * <p>This method guarantees that an encryption cipher and a decryption\n+     * cipher, if initialized with the same symmetric key or a matching\n+     * asymmetric key pair and equivalent parameters, will produce identical\n+     * derived keys when the same arguments are provided.\n+     *\n+     * @param algorithm the algorithm of the derived key\n+     * @param context a byte array representing additional data or context\n+     *          information that influences the key derivation process.\n+     *          The derived key should be unique to the given context.\n+     *          A cipher implementation may accept a {@code null} value.\n+     * @param length the desired length of the derived key in bytes\n+     *          (must be greater than 0)\n+     *\n+     * @return the derived key\n+     *\n+     * @throws UnsupportedOperationException if the corresponding method in the\n+     *          {@code CipherSpi} is not supported\n+     * @throws IllegalArgumentException if one or more of the input arguments\n+     *          are invalid\n+     * @throws IllegalStateException if this {@code Cipher} object is in a wrong\n+     *          state (e.g., has not been initialized)\n+     * @throws NullPointerException if {@code algorithm} is {@code null}\n+     *\n+     * @since 26\n+     *\/\n+    public SecretKey exportKey(String algorithm, byte[] context, int length) {\n+        Objects.requireNonNull(algorithm);\n+        if (length <= 0) {\n+            throw new IllegalArgumentException(\"length cannot be negative\");\n+        }\n+        checkCipherState();\n+        chooseFirstProvider();\n+        return spi.engineExportKey(algorithm, context, length);\n+    }\n+\n+\n+    \/**\n+     * Export derived data based on the current cryptographic state and\n+     * additional context.\n+     *\n+     * <p>This method is designed to enable the generation of additional\n+     * secret data for use in various later operations, ensuring that data\n+     * can be securely derived from the existing encryption or\n+     * decryption state.\n+     *\n+     * <p>This method guarantees that an encryption cipher and a decryption\n+     * cipher, if initialized with the same symmetric key or a matching\n+     * asymmetric key pair and equivalent parameters, will produce identical\n+     * derived data when the same arguments are provided.\n+     *\n+     * @param context a byte array representing additional data or context\n+     *          information that influences the key derivation process.\n+     *          The derived key should be unique to the given context.\n+     *          A cipher implementation may accept a {@code null} value.\n+     * @param length the desired length of the derived data\n+     *          (must be greater than 0)\n+     *\n+     * @return the derived data\n+     *\n+     * @throws UnsupportedOperationException if the corresponding method in the\n+     *          {@code CipherSpi} is not supported or the derived data is not\n+     *          extractable\n+     * @throws IllegalArgumentException if one or more of the input arguments\n+     *          are invalid\n+     * @throws IllegalStateException if this {@code Cipher} object is in a wrong\n+     *          state (e.g., has not been initialized)\n+     *\n+     * @since 26\n+     *\/\n+    public byte[] exportData(byte[] context, int length) {\n+        if (length <= 0) {\n+            throw new IllegalArgumentException(\"length cannot be negative\");\n+        }\n+        checkCipherState();\n+        chooseFirstProvider();\n+        return spi.engineExportData(context, length);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/Cipher.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -958,0 +958,82 @@\n+    \/**\n+     * Export a derived key based on the current cryptographic state and\n+     * additional context.\n+     *\n+     * <p>This method is designed to enable the generation of additional\n+     * keys for use in various cryptographic operations, ensuring that key\n+     * material can be securely derived from the existing encryption or\n+     * decryption state.\n+     *\n+     * <p>This method guarantees that an encryption cipher and a decryption\n+     * cipher, if initialized with the same symmetric key or a matching\n+     * asymmetric key pair and equivalent parameters, will produce identical\n+     * derived keys when the same arguments are provided.\n+     *\n+     * @param algorithm the algorithm of the derived key\n+     * @param context a byte array representing additional data or context\n+     *          information that influences the key derivation process.\n+     *          The derived key should be unique to the given context.\n+     *          A cipher implementation may accept a {@code null} value.\n+     * @param length the desired length of the derived key in bytes\n+     *\n+     * @return the derived key\n+     *\n+     * @throws UnsupportedOperationException if this method has not been\n+     *          overridden by an implementation\n+     * @throws IllegalArgumentException if one or more of the input arguments\n+     *          are invalid\n+     * @throws IllegalStateException if this {@code Cipher} object is in a wrong\n+     *          state (e.g., has not been initialized)\n+     *\n+     * @implSpec The default implementation throws an\n+     * {@code UnsupportedOperationException}.\n+     *\n+     * @since 26\n+     *\/\n+    protected SecretKey engineExportKey(String algorithm, byte[] context, int length) {\n+        throw new UnsupportedOperationException(\n+                \"The underlying Cipher implementation \"\n+                        +  \"does not support this method\");\n+    }\n+\n+    \/**\n+     * Export derived data based on the current cryptographic state and\n+     * additional context.\n+     *\n+     * <p>This method is designed to enable the generation of additional\n+     * secret data for use in various later operations, ensuring that data\n+     * can be securely derived from the existing encryption or\n+     * decryption state.\n+     *\n+     * <p>This method guarantees that an encryption cipher and a decryption\n+     * cipher, if initialized with the same symmetric key or a matching\n+     * asymmetric key pair and equivalent parameters, will produce identical\n+     * derived data when the same arguments are provided.\n+     *\n+     * @param context a byte array representing additional data or context\n+     *          information that influences the key derivation process.\n+     *          The derived key should be unique to the given context.\n+     *          A cipher implementation may accept a {@code null} value.\n+     * @param length the desired length of the derived data\n+     *\n+     * @return the derived data\n+     *\n+     * @throws UnsupportedOperationException if this method has not been\n+     *          overridden by an implementation or the derived data is not\n+     *          extractable\n+     * @throws IllegalArgumentException if one or more of the input arguments\n+     *          are invalid\n+     * @throws IllegalStateException if this {@code Cipher} object is in a wrong\n+     *          state (e.g., has not been initialized)\n+     *\n+     * @implSpec The default implementation throws an\n+     * {@code UnsupportedOperationException}.\n+     *\n+     * @since 26\n+     *\/\n+    protected byte[] engineExportData(byte[] context, int length) {\n+        throw new UnsupportedOperationException(\n+                \"The underlying Cipher implementation \"\n+                        +  \"does not support this method\");\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/CipherSpi.java","additions":83,"deletions":1,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -0,0 +1,174 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8325513\n+ * @library \/test\/lib \/test\/jdk\/security\/unsignedjce\n+ * @build java.base\/javax.crypto.ProviderVerifier\n+ * @run main\/othervm Export\n+ * @summary Try out the export method\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.CipherSpi;\n+import javax.crypto.KeyGenerator;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.nio.charset.StandardCharsets;\n+import java.security.AlgorithmParameters;\n+import java.security.Key;\n+import java.security.Provider;\n+import java.security.SecureRandom;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+public class Export {\n+\n+    public static Provider PROVIDER = new Provider(\"X\", \"X\", \"X\") {{\n+        put(\"Cipher.X\", CipherImpl.class.getName());\n+        put(\"Cipher.NX\", CipherImplNoEx.class.getName());\n+    }};\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ Not supported by AES cipher.\n+        Cipher c0 = Cipher.getInstance(\"AES\");\n+        c0.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(new byte[16], \"AES\"));\n+        Asserts.assertThrows(UnsupportedOperationException.class,\n+                () -> c0.exportKey(\"X\", s2b(\"one\"), 32));\n+        Asserts.assertThrows(UnsupportedOperationException.class,\n+                () -> c0.exportData(s2b(\"one\"), 32));\n+\n+        SecretKey key = new SecretKeySpec(s2b(\"key\"), \"X\");\n+\n+        \/\/ X cipher defined in this class supports exporting.\n+        Cipher c1 = Cipher.getInstance(\"X\", PROVIDER);\n+\n+        \/\/ Cipher not initialized\n+        Asserts.assertThrows(IllegalStateException.class,\n+                () -> c1.exportKey(\"X\", s2b(\"one\"), 32));\n+\n+        c1.init(Cipher.ENCRYPT_MODE, key);\n+\n+        \/\/ Several error cases\n+        Asserts.assertThrows(NullPointerException.class,\n+                () -> c1.exportKey(null, s2b(\"one\"), 32));\n+        Asserts.assertThrows(IllegalArgumentException.class,\n+                () -> c1.exportKey(\"X\", null, 32));\n+        Asserts.assertThrows(IllegalArgumentException.class,\n+                () -> c1.exportData(null, 32));\n+        Asserts.assertThrows(IllegalArgumentException.class,\n+                () -> c1.exportKey(\"X\", s2b(\"one\"), 0));\n+        Asserts.assertThrows(IllegalArgumentException.class,\n+                () -> c1.exportData(s2b(\"one\"), 0));\n+\n+        \/\/ Normal usages\n+        SecretKey sk1 = c1.exportKey(\"X\", s2b(\"one\"), 32);\n+        SecretKey sk1p = c1.exportKey(\"X\", s2b(\"two\"), 32);\n+        byte[] d1 = c1.exportData(s2b(\"one\"), 32);\n+        byte[] d1p = c1.exportData(s2b(\"two\"), 32);\n+\n+        \/\/ Different context strings return different exported data\n+        Asserts.assertNotEqualsByteArray(sk1.getEncoded(), sk1p.getEncoded());\n+        Asserts.assertNotEqualsByteArray(d1, d1p);\n+\n+        Cipher c2 = Cipher.getInstance(\"X\", PROVIDER);\n+        c2.init(Cipher.DECRYPT_MODE, key);\n+        SecretKey sk2 = c2.exportKey(\"X\", s2b(\"one\"), 32);\n+        byte[] d2 = c2.exportData(s2b(\"one\"), 32);\n+\n+        \/\/ Encryptor and decryptor export the same data\n+        Asserts.assertEqualsByteArray(sk1.getEncoded(), sk2.getEncoded());\n+        Asserts.assertEqualsByteArray(d1, d2);\n+\n+        \/\/ Initialized with a different key\n+        Cipher c3 = Cipher.getInstance(\"X\", PROVIDER);\n+        c3.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(s2b(\"another\"), \"X\"));\n+        byte[] d3 = c3.exportData(s2b(\"one\"), 32);\n+        Asserts.assertNotEqualsByteArray(d1, d3);\n+\n+        \/\/ NX cipher\n+        Cipher c4 = Cipher.getInstance(\"NX\", PROVIDER);\n+        c4.init(Cipher.ENCRYPT_MODE, key);\n+        c4.exportKey(\"X\", s2b(\"one\"), 32);\n+\n+        \/\/ NX does not support exportData\n+        Asserts.assertThrows(UnsupportedOperationException.class,\n+                () -> c4.exportData(s2b(\"one\"), 32));\n+    }\n+\n+    public static class CipherImpl extends CipherSpi {\n+\n+        protected void engineSetMode(String mode) { }\n+        protected void engineSetPadding(String padding) { }\n+        protected int engineGetBlockSize() { return 0; }\n+        protected int engineGetOutputSize(int inputLen) { return 0; }\n+        protected byte[] engineGetIV() { return new byte[0]; }\n+        protected AlgorithmParameters engineGetParameters() { return null; }\n+        protected void engineInit(int o, Key k, AlgorithmParameterSpec p, SecureRandom r) { }\n+        protected void engineInit(int o, Key k, AlgorithmParameters p, SecureRandom r) { }\n+        protected byte[] engineUpdate(byte[] i, int o, int l) { return new byte[0]; }\n+        protected int engineUpdate(byte[] i, int o, int l, byte[] op, int opo) { return 0; }\n+        protected byte[] engineDoFinal(byte[] i, int o, int l) { return new byte[0]; }\n+        protected int engineDoFinal(byte[] i, int o, int l, byte[] op, int opo) { return 0; }\n+\n+        byte[] keyBytes;\n+        protected void engineInit(int opmode, Key key, SecureRandom random) {\n+            keyBytes = key.getEncoded();\n+        }\n+\n+        @Override\n+        protected SecretKey engineExportKey(String algorithm, byte[] context, int length) {\n+            return new SecretKeySpec(exportInternal(context, length), algorithm);\n+        }\n+\n+        @Override\n+        protected byte[] engineExportData(byte[] context, int length) {\n+            return exportInternal(context, length);\n+        }\n+\n+        private byte[] exportInternal(byte[] context, int length) {\n+            if (context == null) {\n+                throw new IllegalArgumentException();\n+            }\n+            byte[] output = new byte[length];\n+            for (int i = 0; i < length; i++) {\n+                output[i] = (byte) (context[i % context.length] ^ keyBytes[i % keyBytes.length]);\n+            }\n+            return output;\n+        }\n+    }\n+\n+    public static class CipherImplNoEx extends CipherImpl {\n+        @Override\n+        protected byte[] engineExportData(byte[] context, int length) {\n+            throw new UnsupportedOperationException(\"Not supported\");\n+        }\n+    }\n+\n+    static byte[] s2b(String s) {\n+        return s.getBytes(StandardCharsets.UTF_8);\n+    }\n+}\n","filename":"test\/jdk\/javax\/crypto\/Cipher\/Export.java","additions":174,"deletions":0,"binary":false,"changes":174,"status":"added"}]}