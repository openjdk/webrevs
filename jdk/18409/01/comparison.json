{"files":[{"patch":"@@ -2595,0 +2595,35 @@\n+    \/**\n+     * Export a derived key based on the current cryptographic state and\n+     * additional context.\n+     *\n+     * <p>This method is designed to enable the generation of additional\n+     * keys for use in various cryptographic operations, ensuring that key\n+     * material can be securely derived from the existing encryption or\n+     * decryption state.\n+     *\n+     * <p>This method guarantees that an encryption cipher and a decryption\n+     * cipher, if initialized with the same symmetric key or a matching\n+     * asymmetric key pair and equivalent parameters, will produce identical\n+     * derived key when the same arguments are provided.\n+     *\n+     * @param context a byte array representing additional data or context\n+     *          information that influences the key derivation process.\n+     *          The derived key should be unique to the given context.\n+     * @param algorithm the algorithm of the derived key\n+     * @param length the desired length of the derived key in bytes\n+     *\n+     * @return the derived key\n+     *\n+     * @throws UnsupportedOperationException if the corresponding method in the\n+     *          {@code CipherSpi} is not supported\n+     * @throws IllegalArgumentException if one of the input arguments is invalid\n+     * @throws IllegalStateException if this {@code Cipher} object is in a wrong\n+     *          state (e.g., has not been initialized)\n+     *\n+     * @since 23\n+     *\/\n+    public final SecretKey exportKey(byte[] context, String algorithm, int length) {\n+        chooseFirstProvider();\n+        return spi.engineExportKey(context, algorithm, length);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/Cipher.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -958,0 +958,39 @@\n+    \/**\n+     * Export a derived key based on the current cryptographic state and\n+     * additional context.\n+     *\n+     * <p>This method is designed to enable the generation of additional\n+     * keys for use in various cryptographic operations, ensuring that key\n+     * material can be securely derived from the existing encryption or\n+     * decryption state.\n+     *\n+     * <p>This method guarantees that an encryption cipher and a decryption\n+     * cipher, if initialized with the same symmetric key or a matching\n+     * asymmetric key pair and equivalent parameters, will produce identical\n+     * derived key when the same arguments are provided.\n+     *\n+     * @param context a byte array representing additional data or context\n+     *          information that influences the key derivation process.\n+     *          The derived key should be unique to the given context.\n+     * @param algorithm the algorithm of the derived key\n+     * @param length the desired length of the derived key in bytes\n+     *\n+     * @return the derived key\n+     *\n+     * @throws UnsupportedOperationException if this method has not been\n+     *          overridden by an implementation\n+     * @throws IllegalArgumentException if one of the input arguments is invalid\n+     * @throws IllegalStateException if this {@code Cipher} object is in a wrong\n+     *          state (e.g., has not been initialized)\n+     *\n+     * @implSpec The default implementation throws an\n+     * {@code UnsupportedOperationException}.\n+     *\n+     * @since 23\n+     *\/\n+    protected SecretKey engineExportKey(byte[] context, String algorithm, int length) {\n+        throw new UnsupportedOperationException(\n+                \"The underlying Cipher implementation \"\n+                        +  \"does not support this method\");\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/CipherSpi.java","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8325513\n+ * @library \/test\/lib\n+ * @modules java.base\/javax.crypto:+open\n+ * @summary Try out the export method\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.CipherSpi;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.nio.charset.StandardCharsets;\n+import java.security.AlgorithmParameters;\n+import java.security.Key;\n+import java.security.SecureRandom;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+public class Export {\n+    public static void main(String[] args) throws Exception {\n+\n+        SecretKey sk = new SecretKeySpec(s2b(\"key\"), \"X\");\n+\n+        Cipher c1 = newCipher();\n+        c1.init(Cipher.ENCRYPT_MODE, sk);\n+        SecretKey sk11 = c1.export(s2b(\"hi\"), \"X\", 32);\n+        SecretKey sk12 = c1.export(s2b(\"ho\"), \"X\", 32);\n+\n+        Cipher c2 = newCipher();\n+        c2.init(Cipher.ENCRYPT_MODE, sk);\n+        SecretKey sk21 = c2.export(s2b(\"hi\"), \"X\", 32);\n+\n+        Asserts.assertEqualsByteArray(sk11.getEncoded(), sk21.getEncoded());\n+        Asserts.assertNotEqualsByteArray(sk11.getEncoded(), sk12.getEncoded());\n+    }\n+\n+    static class CipherImpl extends CipherSpi {\n+\n+        protected void engineSetMode(String mode) { }\n+        protected void engineSetPadding(String padding) { }\n+        protected int engineGetBlockSize() { return 0; }\n+        protected int engineGetOutputSize(int inputLen) { return 0; }\n+        protected byte[] engineGetIV() { return new byte[0]; }\n+        protected AlgorithmParameters engineGetParameters() { return null; }\n+        protected void engineInit(int opmode, Key key, AlgorithmParameterSpec params, SecureRandom random) { }\n+        protected void engineInit(int opmode, Key key, AlgorithmParameters params, SecureRandom random) { }\n+        protected byte[] engineUpdate(byte[] input, int inputOffset, int inputLen) { return new byte[0]; }\n+        protected int engineUpdate(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset) { return 0; }\n+        protected byte[] engineDoFinal(byte[] input, int inputOffset, int inputLen) { return new byte[0]; }\n+        protected int engineDoFinal(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset) { return 0; }\n+\n+        byte[] keyBytes;\n+        protected void engineInit(int opmode, Key key, SecureRandom random) {\n+            keyBytes = key.getEncoded();\n+        }\n+\n+        @Override\n+        protected SecretKey engineExport(byte[] context, String algorithm, int length) {\n+            byte[] output = new byte[length];\n+            for (int i = 0; i < length; i++) {\n+                output[i] = (byte)(context[i % context.length] ^ keyBytes[i % keyBytes.length]);\n+            }\n+            return new SecretKeySpec(output, algorithm);\n+        }\n+    }\n+\n+    static Cipher newCipher() throws Exception {\n+        var ctor = Cipher.class.getDeclaredConstructor(CipherSpi.class, String.class);\n+        ctor.setAccessible(true);\n+        return ctor.newInstance(new CipherImpl(), \"X\");\n+    }\n+\n+    static byte[] s2b(String s) {\n+        return s.getBytes(StandardCharsets.UTF_8);\n+    }\n+}\n","filename":"test\/jdk\/javax\/crypto\/Cipher\/Export.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"}]}