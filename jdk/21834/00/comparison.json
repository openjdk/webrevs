{"files":[{"patch":"@@ -220,1 +220,1 @@\n-      load = kit->make_load(control, adr, val_type, access.type(), adr_type, mo,\n+      load = kit->make_load(control, adr, val_type, access.type(), mo,\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/barrierSetC2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-  store_to_memory(control(), adr_sp, last_sp, T_ADDRESS, NoAlias, MemNode::unordered);\n+  store_to_memory(control(), adr_sp, last_sp, T_ADDRESS, MemNode::unordered);\n@@ -224,1 +224,1 @@\n-  store_to_memory(control(), adr_sp, null(), T_ADDRESS, NoAlias, MemNode::unordered);\n+  store_to_memory(control(), adr_sp, null(), T_ADDRESS, MemNode::unordered);\n@@ -226,1 +226,1 @@\n-  store_to_memory(control(), adr_last_Java_pc, null(), T_ADDRESS, NoAlias, MemNode::unordered);\n+  store_to_memory(control(), adr_last_Java_pc, null(), T_ADDRESS, MemNode::unordered);\n@@ -229,1 +229,1 @@\n-  store_to_memory(control(), adr_last_Java_fp, null(), T_ADDRESS, NoAlias, MemNode::unordered);\n+  store_to_memory(control(), adr_last_Java_fp, null(), T_ADDRESS, MemNode::unordered);\n@@ -237,1 +237,1 @@\n-    Node* vm_result = make_load(nullptr, adr, TypeOopPtr::BOTTOM, T_OBJECT, NoAlias, MemNode::unordered);\n+    Node* vm_result = make_load(nullptr, adr, TypeOopPtr::BOTTOM, T_OBJECT, MemNode::unordered);\n@@ -240,1 +240,1 @@\n-    store_to_memory(control(), adr, null(), T_ADDRESS, NoAlias, MemNode::unordered);\n+    store_to_memory(control(), adr, null(), T_ADDRESS, MemNode::unordered);\n@@ -246,1 +246,1 @@\n-  Node* pending = make_load(nullptr, adr, TypeOopPtr::BOTTOM, T_OBJECT, NoAlias, MemNode::unordered);\n+  Node* pending = make_load(nullptr, adr, TypeOopPtr::BOTTOM, T_OBJECT, MemNode::unordered);\n","filename":"src\/hotspot\/share\/opto\/generateOptoStub.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -513,1 +513,1 @@\n-    Node* should_post_flag = make_load(control(), adr, TypeInt::INT, T_INT, Compile::AliasIdxRaw, MemNode::unordered);\n+    Node* should_post_flag = make_load(control(), adr, TypeInt::INT, T_INT, MemNode::unordered);\n@@ -1553,1 +1553,0 @@\n-                          int adr_idx,\n@@ -1561,1 +1560,1 @@\n-  assert(adr_idx == C->get_alias_index(_gvn.type(adr)->isa_ptr()), \"slice of address and input slice don't match\");\n+  int adr_idx = C->get_alias_index(_gvn.type(adr)->isa_ptr());\n@@ -1583,1 +1582,0 @@\n-                                int adr_idx,\n@@ -1590,0 +1588,1 @@\n+  int adr_idx = C->get_alias_index(_gvn.type(adr)->isa_ptr());\n@@ -1591,1 +1590,0 @@\n-  assert(adr_idx == C->get_alias_index(_gvn.type(adr)->isa_ptr()), \"slice of address and input slice don't match\");\n@@ -2047,1 +2045,0 @@\n-  int adr_type = Compile::AliasIdxRaw;\n@@ -2049,1 +2046,1 @@\n-  Node* cnt  = make_load(ctrl, counter_addr, TypeLong::LONG, T_LONG, adr_type, MemNode::unordered);\n+  Node* cnt  = make_load(ctrl, counter_addr, TypeLong::LONG, T_LONG, MemNode::unordered);\n@@ -2051,1 +2048,1 @@\n-  store_to_memory(ctrl, counter_addr, incr, T_LONG, adr_type, MemNode::unordered);\n+  store_to_memory(ctrl, counter_addr, incr, T_LONG, MemNode::unordered);\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -543,20 +543,0 @@\n-                  MemNode::MemOrd mo, LoadNode::ControlDependency control_dependency = LoadNode::DependsOnlyOnTest,\n-                  bool require_atomic_access = false, bool unaligned = false,\n-                  bool mismatched = false, bool unsafe = false, uint8_t barrier_data = 0) {\n-    \/\/ This version computes alias_index from bottom_type\n-    return make_load(ctl, adr, t, bt, adr->bottom_type()->is_ptr(),\n-                     mo, control_dependency, require_atomic_access,\n-                     unaligned, mismatched, unsafe, barrier_data);\n-  }\n-  Node* make_load(Node* ctl, Node* adr, const Type* t, BasicType bt, const TypePtr* adr_type,\n-                  MemNode::MemOrd mo, LoadNode::ControlDependency control_dependency = LoadNode::DependsOnlyOnTest,\n-                  bool require_atomic_access = false, bool unaligned = false,\n-                  bool mismatched = false, bool unsafe = false, uint8_t barrier_data = 0) {\n-    \/\/ This version computes alias_index from an address type\n-    assert(adr_type != nullptr, \"use other make_load factory\");\n-    return make_load(ctl, adr, t, bt, C->get_alias_index(adr_type),\n-                     mo, control_dependency, require_atomic_access,\n-                     unaligned, mismatched, unsafe, barrier_data);\n-  }\n-  \/\/ This is the base version which is given an alias index.\n-  Node* make_load(Node* ctl, Node* adr, const Type* t, BasicType bt, int adr_idx,\n@@ -585,5 +565,2 @@\n-    return store_to_memory(ctl, adr, val, bt,\n-                           C->get_alias_index(adr_type),\n-                           mo, require_atomic_access,\n-                           unaligned, mismatched, unsafe,\n-                           barrier_data);\n+    return store_to_memory(ctl, adr, val, bt, mo, require_atomic_access, unaligned,\n+                           mismatched, unsafe, barrier_data);\n@@ -594,1 +571,0 @@\n-                        int adr_idx,\n","filename":"src\/hotspot\/share\/opto\/graphKit.hpp","additions":2,"deletions":26,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -3113,1 +3113,1 @@\n-  Node* notified_reset_memory = store_to_memory(control(), notified_offset, _gvn.intcon(0), T_BOOLEAN, Compile::AliasIdxRaw, MemNode::unordered);\n+  Node* notified_reset_memory = store_to_memory(control(), notified_offset, _gvn.intcon(0), T_BOOLEAN, MemNode::unordered);\n@@ -3133,1 +3133,1 @@\n-  commit_memory = store_to_memory(control(), java_buffer_pos_offset, next_pos_X, T_LONG, Compile::AliasIdxRaw, MemNode::release);\n+  commit_memory = store_to_memory(control(), java_buffer_pos_offset, next_pos_X, T_LONG, MemNode::release);\n@@ -3135,1 +3135,1 @@\n-  commit_memory = store_to_memory(control(), java_buffer_pos_offset, next_pos_X, T_INT, Compile::AliasIdxRaw, MemNode::release);\n+  commit_memory = store_to_memory(control(), java_buffer_pos_offset, next_pos_X, T_INT, MemNode::release);\n@@ -3565,1 +3565,1 @@\n-  Node* vthread_false_memory = store_to_memory(thread_equal_carrierThread, vthread_offset, _gvn.intcon(0), T_BOOLEAN, Compile::AliasIdxRaw, MemNode::release, true);\n+  Node* vthread_false_memory = store_to_memory(thread_equal_carrierThread, vthread_offset, _gvn.intcon(0), T_BOOLEAN, MemNode::release, true);\n@@ -3586,1 +3586,1 @@\n-  Node* tid_memory = store_to_memory(control(), thread_id_offset, tid, T_LONG, Compile::AliasIdxRaw, MemNode::unordered, true);\n+  Node* tid_memory = store_to_memory(control(), thread_id_offset, tid, T_LONG, MemNode::unordered, true);\n@@ -3608,1 +3608,1 @@\n-  Node* included_memory = store_to_memory(control(), vthread_epoch_offset, epoch, T_CHAR, Compile::AliasIdxRaw, MemNode::unordered, true);\n+  Node* included_memory = store_to_memory(control(), vthread_epoch_offset, epoch, T_CHAR, MemNode::unordered, true);\n@@ -3631,1 +3631,1 @@\n-  store_to_memory(control(), thread_local_excluded_offset, _gvn.transform(exclusion), T_BOOLEAN, Compile::AliasIdxRaw, MemNode::unordered, true);\n+  store_to_memory(control(), thread_local_excluded_offset, _gvn.transform(exclusion), T_BOOLEAN, MemNode::unordered, true);\n@@ -3634,1 +3634,1 @@\n-  Node * vthread_true_memory = store_to_memory(control(), vthread_offset, _gvn.intcon(1), T_BOOLEAN, Compile::AliasIdxRaw, MemNode::release, true);\n+  Node * vthread_true_memory = store_to_memory(control(), vthread_offset, _gvn.intcon(1), T_BOOLEAN, MemNode::release, true);\n@@ -3784,1 +3784,1 @@\n-  Node* updated_pin_count_memory = store_to_memory(control(), pin_count_offset, next_pin_count, T_INT, Compile::AliasIdxRaw, MemNode::unordered);\n+  Node* updated_pin_count_memory = store_to_memory(control(), pin_count_offset, next_pin_count, T_INT, MemNode::unordered);\n@@ -5061,1 +5061,1 @@\n-  store_to_memory(control(), doing_unsafe_access_addr, intcon(1), doing_unsafe_access_bt, Compile::AliasIdxRaw, MemNode::unordered);\n+  store_to_memory(control(), doing_unsafe_access_addr, intcon(1), doing_unsafe_access_bt, MemNode::unordered);\n@@ -5086,1 +5086,1 @@\n-  store_to_memory(control(), doing_unsafe_access_addr, intcon(0), doing_unsafe_access_bt, Compile::AliasIdxRaw, MemNode::unordered);\n+  store_to_memory(control(), doing_unsafe_access_addr, intcon(0), doing_unsafe_access_bt, MemNode::unordered);\n@@ -5116,1 +5116,1 @@\n-  store_to_memory(control(), doing_unsafe_access_addr, intcon(1), doing_unsafe_access_bt, Compile::AliasIdxRaw, MemNode::unordered);\n+  store_to_memory(control(), doing_unsafe_access_addr, intcon(1), doing_unsafe_access_bt, MemNode::unordered);\n@@ -5137,1 +5137,1 @@\n-  store_to_memory(control(), doing_unsafe_access_addr, intcon(0), doing_unsafe_access_bt, Compile::AliasIdxRaw, MemNode::unordered);\n+  store_to_memory(control(), doing_unsafe_access_addr, intcon(0), doing_unsafe_access_bt, MemNode::unordered);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -250,1 +250,1 @@\n-    store_to_memory(control(), box, displaced_hdr, T_ADDRESS, Compile::AliasIdxRaw, MemNode::unordered);\n+    store_to_memory(control(), box, displaced_hdr, T_ADDRESS, MemNode::unordered);\n@@ -2275,1 +2275,1 @@\n-  polladr = make_load(control(), polling_page_load_addr, TypeRawPtr::BOTTOM, T_ADDRESS, Compile::AliasIdxRaw, MemNode::unordered);\n+  polladr = make_load(control(), polling_page_load_addr, TypeRawPtr::BOTTOM, T_ADDRESS, MemNode::unordered);\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1379,1 +1379,1 @@\n-  counter = make_load(control(), counter_addr, TypeInt::INT, T_INT, Compile::AliasIdxRaw, MemNode::unordered);\n+  counter = make_load(control(), counter_addr, TypeInt::INT, T_INT, MemNode::unordered);\n@@ -1381,1 +1381,1 @@\n-  incr_store = store_to_memory(control(), counter_addr, counter, T_INT, Compile::AliasIdxRaw, MemNode::unordered);\n+  incr_store = store_to_memory(control(), counter_addr, counter, T_INT, MemNode::unordered);\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1328,1 +1328,1 @@\n-                                ch, bt, byte_adr_idx, MemNode::unordered, false \/* require_atomic_access *\/,\n+                                ch, bt, MemNode::unordered, false \/* require_atomic_access *\/,\n@@ -1367,2 +1367,2 @@\n-                            sign, bt, byte_adr_idx, MemNode::unordered, false \/* require_atomic_access *\/,\n-                            false \/* unaligned *\/, (bt != T_BYTE) \/* mismatched *\/);\n+                            sign, bt, MemNode::unordered, false \/* require_atomic_access *\/, false \/* unaligned *\/,\n+                            (bt != T_BYTE) \/* mismatched *\/);\n","filename":"src\/hotspot\/share\/opto\/stringopts.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}