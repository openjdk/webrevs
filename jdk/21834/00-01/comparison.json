{"files":[{"patch":"@@ -159,2 +159,2 @@\n-                                 access.addr().type(), mo, requires_atomic_access, unaligned,\n-                                 mismatched, unsafe, access.barrier_data());\n+                                 mo, requires_atomic_access, unaligned, mismatched,\n+                                 unsafe, access.barrier_data());\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/barrierSetC2.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4240,2 +4240,2 @@\n-                             AndI(ch, intcon(0xff)), T_CHAR, TypeAryPtr::BYTES, MemNode::unordered,\n-                             false, false, true \/* mismatched *\/);\n+                             AndI(ch, intcon(0xff)), T_CHAR, MemNode::unordered, false,\n+                             false, true \/* mismatched *\/);\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -555,14 +555,0 @@\n-  Node* store_to_memory(Node* ctl, Node* adr, Node* val, BasicType bt,\n-                        const TypePtr* adr_type,\n-                        MemNode::MemOrd mo,\n-                        bool require_atomic_access = false,\n-                        bool unaligned = false,\n-                        bool mismatched = false,\n-                        bool unsafe = false,\n-                        int barrier_data = 0) {\n-    \/\/ This version computes alias_index from an address type\n-    assert(adr_type != nullptr, \"use other store_to_memory factory\");\n-    return store_to_memory(ctl, adr, val, bt, mo, require_atomic_access, unaligned,\n-                           mismatched, unsafe, barrier_data);\n-  }\n-  \/\/ This is the base version which is given alias index\n","filename":"src\/hotspot\/share\/opto\/graphKit.hpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -3452,1 +3452,0 @@\n-  const TypePtr* event_writer_tid_field_type = _gvn.type(event_writer_tid_field)->isa_ptr();\n@@ -3455,1 +3454,0 @@\n-  const TypePtr* event_writer_excluded_field_type = _gvn.type(event_writer_excluded_field)->isa_ptr();\n@@ -3458,1 +3456,0 @@\n-  const TypePtr* event_writer_pin_field_type = _gvn.type(event_writer_pin_field)->isa_ptr();\n@@ -3480,1 +3477,1 @@\n-  store_to_memory(tid_is_not_equal, event_writer_pin_field, _gvn.transform(pinVirtualThread), T_BOOLEAN, event_writer_pin_field_type, MemNode::unordered);\n+  store_to_memory(tid_is_not_equal, event_writer_pin_field, _gvn.transform(pinVirtualThread), T_BOOLEAN, MemNode::unordered);\n@@ -3483,1 +3480,1 @@\n-  store_to_memory(tid_is_not_equal, event_writer_excluded_field, _gvn.transform(exclusion), T_BOOLEAN, event_writer_excluded_field_type, MemNode::unordered);\n+  store_to_memory(tid_is_not_equal, event_writer_excluded_field, _gvn.transform(exclusion), T_BOOLEAN, MemNode::unordered);\n@@ -3486,1 +3483,1 @@\n-  store_to_memory(tid_is_not_equal, event_writer_tid_field, tid, T_LONG, event_writer_tid_field_type, MemNode::unordered);\n+  store_to_memory(tid_is_not_equal, event_writer_tid_field, tid, T_LONG, MemNode::unordered);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -409,1 +409,1 @@\n-        store_to_memory(control(), dims_elem, length[j], T_INT, TypeAryPtr::INTS, MemNode::unordered);\n+        store_to_memory(control(), dims_elem, length[j], T_INT, MemNode::unordered);\n","filename":"src\/hotspot\/share\/opto\/parse3.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}