{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1157,15 +1157,12 @@\n-\n-        String atype = bits == 1 ? (Csyntax ? \"unsigned long\" : \"int\") :\n-            bits == 2 ? (Csyntax ? \"unsigned long\" : \"int\") :\n-            bits == 4 ? (Csyntax ? \"unsigned long\" : \"int\") :\n-            bits == 8 ? (Csyntax ? \"unsigned char\" : \"byte\") :\n-            bits == 16 ? (Csyntax ? \"unsigned short\" : \"char\") :\n-            bits == 32 ? (Csyntax ? \"unsigned long\" : \"int\") :\n-            (Csyntax ? \"int64\" : \"long\");\n-        long maxPosEntry = bits == 1 ? Integer.MAX_VALUE : \/\/ liu\n-            bits == 2 ? Integer.MAX_VALUE :\n-            bits == 4 ? Integer.MAX_VALUE :\n-            bits == 8 ? Byte.MAX_VALUE :\n-            bits == 16 ? Short.MAX_VALUE :\n-            bits == 32 ? Integer.MAX_VALUE :\n-            Long.MAX_VALUE;\n+        String atype = switch (bits) {\n+            case 1, 2, 4, 32 -> \"int\";\n+            case 8 -> \"byte\";\n+            case 16 -> \"char\";\n+            default -> \"long\";\n+        };\n+        long maxPosEntry = switch (bits) {\n+            case 1, 2, 4, 32 -> Integer.MAX_VALUE;\n+            case 8 -> Byte.MAX_VALUE;\n+            case 16 -> Short.MAX_VALUE;\n+            default -> Long.MAX_VALUE;\n+        };\n@@ -1268,1 +1265,1 @@\n-                printPerLine >> (castEntries ? (Csyntax ? 2 : 1) : 0)) - 1;\n+                printPerLine >> (castEntries ? 1 : 0)) - 1;\n@@ -1295,1 +1292,1 @@\n-                if (val > maxPosEntry && !Csyntax) { \/\/ liu\n+                if (val > maxPosEntry) { \/\/ liu\n@@ -1311,3 +1308,2 @@\n-                        result.append(hex16(val));\n-                        if (!Csyntax)\n-                            result.append(\"L\");\n+                        result.append(hex16(val))\n+                              .append(\"L\");\n@@ -1320,3 +1316,2 @@\n-                        result.append(dec5(val));\n-                        if (!Csyntax)\n-                            result.append(\"L\");\n+                        result.append(dec5(val))\n+                              .append(\"L\");\n@@ -1662,2 +1657,0 @@\n-            else if (args[j].equals(\"-c\"))\n-                Csyntax = true;\n@@ -1765,3 +1758,0 @@\n-        if (Csyntax && tableAsString) {\n-            FAIL(\"Can't specify table as string with C syntax\");\n-        }\n@@ -1802,2 +1792,1 @@\n-            TemplateFileName = (Csyntax ? DefaultCTemplateFileName\n-                  : DefaultJavaTemplateFileName);\n+            TemplateFileName = DefaultJavaTemplateFileName;\n@@ -1807,2 +1796,1 @@\n-            OutputFileName = (Csyntax ? DefaultCOutputFileName\n-                    : DefaultJavaOutputFileName);\n+            OutputFileName = DefaultJavaOutputFileName;\n@@ -1811,2 +1799,2 @@\n-        commentStart = (Csyntax ? \"\/*\" : \"\/\/\");\n-        commentEnd = (Csyntax ? \" *\/\" : \"\");\n+        commentStart = \"\/\/\";\n+        commentEnd = \"\";\n@@ -1868,3 +1856,1 @@\n-            if (Csyntax)\n-                zeroextend[j] = 0;\n-            else if (len > 0x7F && len <= 0xFF) {\n+            if (len > 0x7F && len <= 0xFF) {\n","filename":"make\/jdk\/src\/classes\/build\/tools\/generatecharacter\/GenerateCharacter.java","additions":24,"deletions":38,"binary":false,"changes":62,"status":"modified"}]}