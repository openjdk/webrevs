{"files":[{"patch":"@@ -116,0 +116,1 @@\n+int volatile AOTMetaspace::_preimage_static_archive_dumped = 0;\n@@ -960,0 +961,7 @@\n+bool AOTMetaspace::is_recording_preimage_static_archive() {\n+  if (CDSConfig::is_dumping_preimage_static_archive()) {\n+      return _preimage_static_archive_dumped == 0;\n+  }\n+  return false;\n+}\n+\n@@ -961,0 +969,6 @@\n+  if (CDSConfig::is_dumping_preimage_static_archive()) {\n+    if (AtomicAccess::cmpxchg(&_preimage_static_archive_dumped, 0, 1) != 0) {\n+      return;\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/cds\/aotMetaspace.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+  static int volatile _preimage_static_archive_dumped;\n@@ -116,0 +117,2 @@\n+  static bool is_recording_preimage_static_archive() NOT_CDS_RETURN_(false);\n+\n","filename":"src\/hotspot\/share\/cds\/aotMetaspace.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"cds\/aotMetaspace.hpp\"\n@@ -168,0 +169,1 @@\n+  DCmdFactory::register_DCmdFactory(new DCmdFactoryImpl<AOTEndRecordingDCmd>(full_export, true, false));\n@@ -989,0 +991,22 @@\n+#if INCLUDE_CDS\n+void AOTEndRecordingDCmd::execute(DCmdSource source, TRAPS) {\n+  if (!CDSConfig::is_dumping_preimage_static_archive()) {\n+    output()->print_cr(\"Error! Not a recording run\");\n+    return;\n+  }\n+\n+  if (!AOTMetaspace::is_recording_preimage_static_archive()) {\n+    output()->print_cr(\"Error! Not recording\");\n+    return;\n+  }\n+\n+  AOTMetaspace::dump_static_archive(THREAD);\n+  if (!AOTMetaspace::is_recording_preimage_static_archive()) {\n+    output()->print_cr(\"Recording ended successfully\");\n+    return;\n+  }\n+\n+  output()->print_cr(\"Error! Failed to end recording\");\n+}\n+#endif \/\/ INCLUDE_CDS\n+\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -328,0 +328,15 @@\n+#if INCLUDE_CDS\n+class AOTEndRecordingDCmd : public DCmd {\n+public:\n+  AOTEndRecordingDCmd(outputStream* output, bool heap) : DCmd(output, heap) { }\n+    static const char* name() { return \"AOT.end_recording\"; }\n+    static const char* description() {\n+      return \"End AOT recording.\";\n+    }\n+    static const char* impact() {\n+      return \"Medium: Pause time depends on number of loaded classes\";\n+    }\n+    virtual void execute(DCmdSource source, TRAPS);\n+};\n+#endif \/\/ INCLUDE_CDS\n+\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.hpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2025, Microsoft, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @requires vm.cds.supports.aot.class.linking\n+ * @requires vm.cds.write.archived.java.heap\n+ * @summary Sanity test for Jcmd AOT.end_recording command\n+ * @library \/test\/lib\n+ * @build JcmdAOTEndRecordingTest\n+ * @run driver JcmdAOTEndRecordingTest\n+ *\/\n+\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.dcmd.PidJcmdExecutor;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import java.io.IOException;\n+\n+public class JcmdAOTEndRecordingTest {\n+    public static void main(String[] args)  throws Exception {\n+        LingeredApp theApp = null;\n+        try {\n+            theApp = new LingeredApp();\n+            theApp.setUseDefaultClasspath(false);\n+            LingeredApp.startApp(theApp);\n+            long pid = theApp.getPid();\n+\n+            JDKToolLauncher jcmd = JDKToolLauncher.createUsingTestJDK(\"jcmd\");\n+            jcmd.addToolArg(String.valueOf(pid));\n+            jcmd.addToolArg(\"AOT.end_recording\");\n+\n+            try {\n+                OutputAnalyzer output = ProcessTools.executeProcess(jcmd.getCommand());\n+                output.shouldContain(\"Error! Not a recording run\");\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Test failed: \" + e);\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Test failed: \" + e);\n+        }\n+        finally {\n+            LingeredApp.stopApp(theApp);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/JcmdAOTEndRecordingTest.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}