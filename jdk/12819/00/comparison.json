{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+import java.util.Calendar;\n@@ -1240,1 +1241,4 @@\n-        constructor();\n+        \/\/ select a subset of sub-tests as a function of one third of a minute\n+        int subset = Integer.valueOf(System.getProperty(\"subset\",\n+            String.valueOf(1 + Calendar.getInstance().get(Calendar.SECOND)\/20)));\n+        System.out.println(\"Testing subset \" + subset);\n@@ -1242,2 +1246,3 @@\n-        prime();\n-        nextProbablePrime();\n+        switch (subset) {\n+        case 1:\n+            constructor();\n@@ -1245,3 +1250,2 @@\n-        arithmetic(order1);   \/\/ small numbers\n-        arithmetic(order3);   \/\/ Karatsuba range\n-        arithmetic(order4);   \/\/ Toom-Cook \/ Burnikel-Ziegler range\n+            prime();\n+            nextProbablePrime();\n@@ -1249,3 +1253,3 @@\n-        divideAndRemainder(order1);   \/\/ small numbers\n-        divideAndRemainder(order3);   \/\/ Karatsuba range\n-        divideAndRemainder(order4);   \/\/ Toom-Cook \/ Burnikel-Ziegler range\n+            arithmetic(order1);   \/\/ small numbers\n+            arithmetic(order3);   \/\/ Karatsuba range\n+            arithmetic(order4);   \/\/ Toom-Cook \/ Burnikel-Ziegler range\n@@ -1253,3 +1257,3 @@\n-        pow(order1);\n-        pow(order3);\n-        pow(order4);\n+            divideAndRemainder(order1);   \/\/ small numbers\n+            divideAndRemainder(order3);   \/\/ Karatsuba range\n+            divideAndRemainder(order4);   \/\/ Toom-Cook \/ Burnikel-Ziegler range\n@@ -1257,3 +1261,3 @@\n-        square(ORDER_MEDIUM);\n-        square(ORDER_KARATSUBA_SQUARE);\n-        square(ORDER_TOOM_COOK_SQUARE);\n+            pow(order1);\n+            pow(order3);\n+            pow(order4);\n@@ -1261,2 +1265,3 @@\n-        squareRoot();\n-        squareRootAndRemainder();\n+            square(ORDER_MEDIUM);\n+            square(ORDER_KARATSUBA_SQUARE);\n+            square(ORDER_TOOM_COOK_SQUARE);\n@@ -1264,4 +1269,2 @@\n-        bitCount();\n-        bitLength();\n-        bitOps(order1);\n-        bitwise(order1);\n+            squareRoot();\n+            squareRootAndRemainder();\n@@ -1269,1 +1272,4 @@\n-        shift(order1);\n+            bitCount();\n+            bitLength();\n+            bitOps(order1);\n+            bitwise(order1);\n@@ -1271,1 +1277,1 @@\n-        byteArrayConv(order1);\n+            shift(order1);\n@@ -1273,3 +1279,1 @@\n-        modInv(order1);   \/\/ small numbers\n-        modInv(order3);   \/\/ Karatsuba range\n-        modInv(order4);   \/\/ Toom-Cook \/ Burnikel-Ziegler range\n+            byteArrayConv(order1);\n@@ -1277,2 +1281,3 @@\n-        modExp(order1, order2);\n-        modExp2(order1);\n+            modInv(order1);   \/\/ small numbers\n+            modInv(order3);   \/\/ Karatsuba range\n+            break;\n@@ -1280,2 +1285,2 @@\n-        stringConv();\n-        serialize();\n+        case 2:\n+            modInv(order4);   \/\/ Toom-Cook \/ Burnikel-Ziegler range\n@@ -1283,3 +1288,16 @@\n-        multiplyLarge();\n-        squareLarge();\n-        divideLarge();\n+            modExp(order1, order2);\n+            modExp2(order1);\n+            break;\n+\n+        case 3:\n+            stringConv();\n+            serialize();\n+\n+            multiplyLarge();\n+            squareLarge();\n+            divideLarge();\n+            break;\n+\n+        default:\n+            throw new RuntimeException(\"Unknown subset \" + subset);\n+        }\n","filename":"test\/jdk\/java\/math\/BigInteger\/BigIntegerTest.java","additions":52,"deletions":34,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+import org.testng.ITestResult;\n+import org.testng.annotations.AfterMethod;\n@@ -65,0 +67,7 @@\n+    \/\/ Print the run time of each sub-test in milliseconds\n+    @AfterMethod\n+    public void getRunTime(ITestResult tr) {\n+        long time = tr.getEndMillis() - tr.getStartMillis();\n+        System.out.printf(\"Run time: %d ms%n\", time);\n+    }\n+\n","filename":"test\/jdk\/java\/math\/BigInteger\/LargeValueExceptions.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+import java.util.Calendar;\n@@ -624,40 +625,57 @@\n-        testOverflowInMakePositive();\n-        testBug8021204();\n-        testOverflowInBitSieve();\n-        testAdd();\n-        testSubtract();\n-        testMultiply();\n-        testDivide();\n-        testDivideAndRemainder();\n-        testBug9005933();\n-        testRemainder();\n-        testPow();\n-        testGcd();\n-        testAbs();\n-        testNegate();\n-        testMod();\n-        testModPow();\n-\/\/        testModInverse();\n-        testShiftLeft();\n-        testShiftRight();\n-        testAnd();\n-        testOr();\n-        testXor();\n-        testNot();\n-        testSetBit();\n-        testClearBit();\n-        testFlipBit();\n-        testGetLowestSetBit();\n-        testBitLength();\n-        testBitCount();\n-        testToString();\n-        testToByteArrayWithConstructor();\n-        testIntValue();\n-        testLongValue();\n-        testFloatValue();\n-        testDoubleValue();\n-        testSerialization();\n-        testLongValueExact();\n-        testIntValueExact();\n-        testShortValueExact();\n-        testByteValueExact();\n+        \/\/ select a subset of sub-tests as a function of quarter minute\n+        int subset = Integer.valueOf(System.getProperty(\"subset\",\n+            String.valueOf(1 + Calendar.getInstance().get(Calendar.SECOND)\/15)));\n+        System.out.println(\"Testing subset \" + subset);\n+\n+        switch (subset) {\n+        case 1:\n+            testOverflowInMakePositive();\n+            testBug8021204();\n+            testOverflowInBitSieve();\n+            testAdd();\n+            testSubtract();\n+            break;\n+        case 2:\n+            testMultiply();\n+            testDivide();\n+            testDivideAndRemainder();\n+            testBug9005933();\n+            break;\n+        case 3:\n+            testRemainder();\n+            testPow();\n+            testGcd();\n+            testAbs();\n+            testNegate();\n+            testMod();\n+            testModPow();\n+            \/\/        testModInverse();\n+            testShiftLeft();\n+            testShiftRight();\n+            testAnd();\n+            testOr();\n+            testXor();\n+            testNot();\n+            testSetBit();\n+            testClearBit();\n+            testFlipBit();\n+            testGetLowestSetBit();\n+            testBitLength();\n+            testBitCount();\n+            break;\n+        case 4:\n+            testToString();\n+            testToByteArrayWithConstructor();\n+            testIntValue();\n+            testLongValue();\n+            testFloatValue();\n+            testDoubleValue();\n+            testSerialization();\n+            testLongValueExact();\n+            testIntValueExact();\n+            testShortValueExact();\n+            testByteValueExact();\n+            break;\n+        default:\n+            throw new RuntimeException(\"Unknown subset \" + subset);\n+        }\n","filename":"test\/jdk\/java\/math\/BigInteger\/largeMemory\/SymmetricRangeTests.java","additions":59,"deletions":41,"binary":false,"changes":100,"status":"modified"}]}