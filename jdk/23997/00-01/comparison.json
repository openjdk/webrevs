{"files":[{"patch":"@@ -64,1 +64,0 @@\n-    _alloc_failure_waiters_count++;\n@@ -68,1 +67,0 @@\n-    _alloc_failure_waiters_count--;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahController.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-  size_t  _alloc_failure_waiters_count;\n@@ -62,1 +61,0 @@\n-    _alloc_failure_waiters_count(0),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahController.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -280,8 +280,3 @@\n-  {\n-    MonitorLocker ml(&_alloc_failure_waiters_lock);\n-    if (_alloc_failure_waiters_count > 0 && !_heap->cancelled_gc()) {\n-      log_debug(gc, thread)(\"Notify %zu threads waiting because of allocation failures\", _alloc_failure_waiters_count);\n-      \/\/ If there are threads waiting because of allocation failures, and we\n-      \/\/ completed a cycle that cleared the cancellation, notify the waiters.\n-      ml.notify_all();\n-    }\n+  \/\/ If this cycle completed successfully, notify threads waiting to retry allocation\n+  if (!_heap->cancelled_gc()) {\n+    notify_alloc_failure_waiters();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalControlThread.cpp","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"}]}