{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-\n@@ -30,2 +29,1 @@\n-import java.util.ArrayList;\n-import java.util.List;\n+import java.util.Arrays;\n@@ -33,1 +31,0 @@\n-import java.util.regex.Pattern;\n@@ -35,0 +32,1 @@\n+import java.util.stream.Stream;\n@@ -37,2 +35,1 @@\n- * Dotted numeric version string.\n- * E.g.: 1.0.37, 10, 0.5\n+ * Dotted numeric version string. E.g.: 1.0.37, 10, 0.5\n@@ -40,1 +37,1 @@\n-final class DottedVersion implements Comparable<String> {\n+final class DottedVersion {\n@@ -43,3 +40,1 @@\n-        greedy = true;\n-        components = parseVersionString(version, greedy);\n-        value = version;\n+        this(version, true);\n@@ -49,3 +44,97 @@\n-        this.greedy = greedy;\n-        components = parseVersionString(version, greedy);\n-        value = version;\n+        this.value = version;\n+        if (version.isEmpty()) {\n+            if (greedy) {\n+                throw new IllegalArgumentException(I18N.getString(\"error.version-string-empty\"));\n+            } else {\n+                this.components = new BigInteger[0];\n+                this.suffix = \"\";\n+            }\n+        } else {\n+            var ds = new DigitsSupplier(version);\n+            components = Stream.generate(ds::getNextDigits).takeWhile(Objects::nonNull).map(\n+                    digits -> {\n+                        if (digits.isEmpty()) {\n+                            if (!greedy) {\n+                                return null;\n+                            } else {\n+                                throw new IllegalArgumentException(MessageFormat.format(I18N.\n+                                        getString(\"error.version-string-zero-length-component\"),\n+                                        version));\n+                            }\n+                        }\n+\n+                        try {\n+                            return new BigInteger(digits);\n+                        } catch (NumberFormatException ex) {\n+                            if (!greedy) {\n+                                return null;\n+                            } else {\n+                                throw new IllegalArgumentException(MessageFormat.format(I18N.\n+                                        getString(\"error.version-string-invalid-component\"), version,\n+                                        digits));\n+                            }\n+                        }\n+                    }).takeWhile(Objects::nonNull).toArray(BigInteger[]::new);\n+            suffix = ds.getUnprocessedString();\n+            if (!suffix.isEmpty() && greedy) {\n+                throw new IllegalArgumentException(MessageFormat.format(I18N.getString(\n+                        \"error.version-string-invalid-component\"), version, suffix));\n+            }\n+        }\n+    }\n+\n+    private static class DigitsSupplier {\n+\n+        DigitsSupplier(String input) {\n+            this.input = input;\n+        }\n+\n+        public String getNextDigits() {\n+            if (stoped) {\n+                return null;\n+            }\n+\n+            var sb = new StringBuilder();\n+            while (cursor != input.length()) {\n+                var chr = input.charAt(cursor++);\n+                if (Character.isDigit(chr)) {\n+                    sb.append(chr);\n+                } else {\n+                    var curStopAtDot = (chr == '.');\n+                    if (!curStopAtDot) {\n+                        if (lastDotPos >= 0) {\n+                            cursor = lastDotPos;\n+                        } else {\n+                            cursor--;\n+                        }\n+                        stoped = true;\n+                    } else if (!sb.isEmpty()) {\n+                        lastDotPos = cursor - 1;\n+                    } else {\n+                        cursor = Math.max(lastDotPos, 0);\n+                        stoped = true;\n+                    }\n+                    return sb.toString();\n+                }\n+            }\n+\n+            if (sb.isEmpty()) {\n+                if (lastDotPos >= 0) {\n+                    cursor = lastDotPos;\n+                } else {\n+                    cursor--;\n+                }\n+            }\n+\n+            stoped = true;\n+            return sb.toString();\n+        }\n+\n+        public String getUnprocessedString() {\n+            return input.substring(cursor);\n+        }\n+\n+        private int cursor;\n+        private int lastDotPos = -1;\n+        private boolean stoped;\n+        private final String input;\n@@ -62,2 +151,1 @@\n-    @Override\n-    public int compareTo(String o) {\n+    static int compareComponents(DottedVersion a, DottedVersion b) {\n@@ -65,2 +153,3 @@\n-        BigInteger[] otherComponents = parseVersionString(o, greedy);\n-        for (int i = 0; i < Math.max(components.length, otherComponents.length)\n+        BigInteger[] aComponents = a.getComponents();\n+        BigInteger[] bComponents = b.getComponents();\n+        for (int i = 0; i < Math.max(aComponents.length, bComponents.length)\n@@ -69,2 +158,2 @@\n-            if (i < components.length) {\n-                x = components[i];\n+            if (i < aComponents.length) {\n+                x = aComponents[i];\n@@ -76,2 +165,2 @@\n-            if (i < otherComponents.length) {\n-                y = otherComponents[i];\n+            if (i < bComponents.length) {\n+                y = bComponents[i];\n@@ -87,49 +176,7 @@\n-    private static BigInteger[] parseVersionString(String version, boolean greedy) {\n-        Objects.requireNonNull(version);\n-        if (version.isEmpty()) {\n-            if (!greedy) {\n-                return new BigInteger[] {BigInteger.ZERO};\n-            }\n-            throw new IllegalArgumentException(I18N.getString(\n-                    \"error.version-string-empty\"));\n-        }\n-\n-        int lastNotZeroIdx = -1;\n-        List<BigInteger> components = new ArrayList<>();\n-        for (var component : version.split(\"\\\\.\", -1)) {\n-            if (component.isEmpty()) {\n-                if (!greedy) {\n-                    break;\n-                }\n-\n-                throw new IllegalArgumentException(MessageFormat.format(\n-                        I18N.getString(\n-                                \"error.version-string-zero-length-component\"),\n-                        version));\n-            }\n-\n-            if (!DIGITS.matcher(component).matches()) {\n-                \/\/ Catch \"+N\" and \"-N\"  cases.\n-                if (!greedy) {\n-                    break;\n-                }\n-\n-                throw new IllegalArgumentException(MessageFormat.format(\n-                        I18N.getString(\n-                                \"error.version-string-invalid-component\"),\n-                        version, component));\n-            }\n-\n-            final BigInteger num;\n-            try {\n-                num = new BigInteger(component);\n-            } catch (NumberFormatException ex) {\n-                if (!greedy) {\n-                    break;\n-                }\n-\n-                throw new IllegalArgumentException(MessageFormat.format(\n-                        I18N.getString(\n-                                \"error.version-string-invalid-component\"),\n-                        version, component));\n-            }\n+    @Override\n+    public int hashCode() {\n+        int hash = 3;\n+        hash = 29 * hash + Arrays.deepHashCode(this.components);\n+        hash = 29 * hash + Objects.hashCode(this.suffix);\n+        return hash;\n+    }\n@@ -137,4 +184,4 @@\n-            if (num != BigInteger.ZERO) {\n-                lastNotZeroIdx = components.size();\n-            }\n-            components.add(num);\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n@@ -142,4 +189,2 @@\n-\n-        if (lastNotZeroIdx + 1 != components.size()) {\n-            \/\/ Strip trailing zeros.\n-            components = components.subList(0, lastNotZeroIdx + 1);\n+        if (obj == null) {\n+            return false;\n@@ -147,3 +192,2 @@\n-\n-        if (components.isEmpty()) {\n-            components.add(BigInteger.ZERO);\n+        if (getClass() != obj.getClass()) {\n+            return false;\n@@ -151,1 +195,5 @@\n-        return components.toArray(BigInteger[]::new);\n+        final DottedVersion other = (DottedVersion) obj;\n+        if (!Objects.equals(this.suffix, other.suffix)) {\n+            return false;\n+        }\n+        return Arrays.deepEquals(this.components, other.components);\n@@ -159,0 +207,8 @@\n+    public String getUnprocessedSuffix() {\n+        return suffix;\n+    }\n+\n+    String toComponentsString() {\n+        return Stream.of(components).map(BigInteger::toString).collect(Collectors.joining(\".\"));\n+    }\n+\n@@ -165,3 +221,1 @@\n-    private final boolean greedy;\n-\n-    private static final Pattern DIGITS = Pattern.compile(\"\\\\d+\");\n+    private final String suffix;\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/DottedVersion.java","additions":140,"deletions":86,"binary":false,"changes":226,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,0 +68,4 @@\n+    ToolValidator setMinimalVersion(DottedVersion v) {\n+        return setMinimalVersion(t -> DottedVersion.compareComponents(v, DottedVersion.lazy(t)));\n+    }\n+\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/ToolValidator.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -788,1 +788,1 @@\n-        if (getWixVersion().compareTo(\"3.6\") < 0) {\n+        if (DottedVersion.compareComponents(getWixVersion(), DottedVersion.lazy(\"3.6\")) < 0) {\n@@ -802,1 +802,1 @@\n-        if (getWixVersion().compareTo(\"3.6\") < 0) {\n+        if (DottedVersion.compareComponents(getWixVersion(), DottedVersion.lazy(\"3.6\")) < 0) {\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WixAppImageFragmentBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,1 @@\n-        if (wixVersion.compareTo(\"3.6\") >= 0) {\n+        if (DottedVersion.compareComponents(wixVersion, DottedVersion.lazy(\"3.6\")) >= 0) {\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WixFragmentBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,0 +71,2 @@\n+            { false, \"\", \"0\", 0 },\n+            { false, \"0\", \"\", 0 },\n@@ -92,1 +94,1 @@\n-        int result = createTestee.apply(x).compareTo(y);\n+        int result = DottedVersion.compareComponents(createTestee.apply(x), createTestee.apply(y));\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/CompareDottedVersionTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import static org.junit.Assert.assertFalse;\n@@ -57,0 +58,55 @@\n+    private static class CtorTester {\n+\n+        CtorTester(String input, boolean greedy, String expectedSuffix,\n+                int expectedComponentCount, String expectedToComponent) {\n+            this.input = input;\n+            this.greedy = greedy;\n+            this.expectedSuffix = expectedSuffix;\n+            this.expectedComponentCount = expectedComponentCount;\n+            this.expectedToComponent = expectedToComponent;\n+        }\n+\n+        CtorTester(String input, boolean greedy, int expectedComponentCount,\n+                String expectedToComponent) {\n+            this(input, greedy, \"\", expectedComponentCount, expectedToComponent);\n+        }\n+\n+        CtorTester(String input, boolean greedy, int expectedComponentCount) {\n+            this(input, greedy, \"\", expectedComponentCount, input);\n+        }\n+\n+        static CtorTester greedy(String input, int expectedComponentCount,\n+                String expectedToComponent) {\n+            return new CtorTester(input, true, \"\", expectedComponentCount, expectedToComponent);\n+        }\n+\n+        static CtorTester greedy(String input, int expectedComponentCount) {\n+            return new CtorTester(input, true, \"\", expectedComponentCount, input);\n+        }\n+\n+        static CtorTester lazy(String input, String expectedSuffix, int expectedComponentCount,\n+                String expectedToComponent) {\n+            return new CtorTester(input, false, expectedSuffix, expectedComponentCount,\n+                    expectedToComponent);\n+        }\n+\n+        void run() {\n+            DottedVersion dv;\n+            if (greedy) {\n+                dv = DottedVersion.greedy(input);\n+            } else {\n+                dv = DottedVersion.lazy(input);\n+            }\n+\n+            assertEquals(expectedSuffix, dv.getUnprocessedSuffix());\n+            assertEquals(expectedComponentCount, dv.getComponents().length);\n+            assertEquals(expectedToComponent, dv.toComponentsString());\n+        }\n+\n+        private final String input;\n+        private final boolean greedy;\n+        private final String expectedSuffix;\n+        private final int expectedComponentCount;\n+        private final String expectedToComponent;\n+    }\n+\n@@ -59,8 +115,9 @@\n-        final List<String> validStrings = List.of(\n-            \"1.0\",\n-            \"1\",\n-            \"2.234.045\",\n-            \"2.234.0\",\n-            \"0\",\n-            \"0.1\",\n-            \"9\".repeat(1000)\n+        final List<CtorTester> validStrings = List.of(\n+                new CtorTester(\"1.0\", greedy, 2),\n+                new CtorTester(\"1\", greedy, 1),\n+                new CtorTester(\"2.20034.045\", greedy, 3, \"2.20034.45\"),\n+                new CtorTester(\"2.234.0\", greedy, 3),\n+                new CtorTester(\"0\", greedy, 1),\n+                new CtorTester(\"0.1\", greedy, 2),\n+                new CtorTester(\"9\".repeat(1000), greedy, 1),\n+                new CtorTester(\"00.0.0\", greedy, 3, \"0.0.0\")\n@@ -69,1 +126,1 @@\n-        final List<String> validLazyStrings;\n+        final List<CtorTester> validLazyStrings;\n@@ -74,14 +131,20 @@\n-                \"1.-1\",\n-                \"5.\",\n-                \"4.2.\",\n-                \"3..2\",\n-                \"2.a\",\n-                \"0a\",\n-                \".\",\n-                \" \",\n-                \" 1\",\n-                \"1. 2\",\n-                \"+1\",\n-                \"-1\",\n-                \"-0\",\n-                \"+0\"\n+                    CtorTester.lazy(\"1.-1\", \".-1\", 1, \"1\"),\n+                    CtorTester.lazy(\"5.\", \".\", 1, \"5\"),\n+                    CtorTester.lazy(\"4.2.\", \".\", 2, \"4.2\"),\n+                    CtorTester.lazy(\"3..2\", \"..2\", 1, \"3\"),\n+                    CtorTester.lazy(\"3......2\", \"......2\", 1, \"3\"),\n+                    CtorTester.lazy(\"2.a\", \".a\", 1, \"2\"),\n+                    CtorTester.lazy(\"a\", \"a\", 0, \"\"),\n+                    CtorTester.lazy(\"2..a\", \"..a\", 1, \"2\"),\n+                    CtorTester.lazy(\"0a\", \"a\", 1, \"0\"),\n+                    CtorTester.lazy(\"120a\", \"a\", 1, \"120\"),\n+                    CtorTester.lazy(\"120abc\", \"abc\", 1, \"120\"),\n+                    CtorTester.lazy(\".\", \".\", 0, \"\"),\n+                    CtorTester.lazy(\"....\", \"....\", 0, \"\"),\n+                    CtorTester.lazy(\" \", \" \", 0, \"\"),\n+                    CtorTester.lazy(\" 1\", \" 1\", 0, \"\"),\n+                    CtorTester.lazy(\"678. 2\", \". 2\", 1, \"678\"),\n+                    CtorTester.lazy(\"+1\", \"+1\", 0, \"\"),\n+                    CtorTester.lazy(\"-1\", \"-1\", 0, \"\"),\n+                    CtorTester.lazy(\"-0\", \"-0\", 0, \"\"),\n+                    CtorTester.lazy(\"+0\", \"+0\", 0, \"\")\n@@ -91,5 +154,1 @@\n-        Stream.concat(validStrings.stream(), validLazyStrings.stream())\n-        .forEach(value -> {\n-            DottedVersion version = createTestee.apply(value);\n-            assertEquals(version.toString(), value);\n-        });\n+        Stream.concat(validStrings.stream(), validLazyStrings.stream()).forEach(CtorTester::run);\n@@ -111,2 +170,20 @@\n-            assertTrue(0 == createTestee.apply(\"\").compareTo(\"\"));\n-            assertTrue(0 == createTestee.apply(\"\").compareTo(\"0\"));\n+            assertEquals(0, createTestee.apply(\"\").getComponents().length);\n+        }\n+    }\n+\n+    @Test\n+    public void testEquals() {\n+        DottedVersion dv = createTestee.apply(\"1.0\");\n+        assertFalse(dv.equals(null));\n+        assertFalse(dv.equals(Integer.valueOf(1)));\n+\n+        for (var ver : List.of(\"3\", \"3.4\", \"3.0.0\")) {\n+            DottedVersion a = createTestee.apply(ver);\n+            DottedVersion b = createTestee.apply(ver);\n+            assertTrue(a.equals(b));\n+            assertTrue(b.equals(a));\n+        }\n+\n+        if (!greedy) {\n+            assertTrue(createTestee.apply(\"3.6+67\").equals(createTestee.apply(\"3.6+67\")));\n+            assertFalse(createTestee.apply(\"3.6+67\").equals(createTestee.apply(\"3.6+067\")));\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/DottedVersionTest.java","additions":108,"deletions":31,"binary":false,"changes":139,"status":"modified"}]}