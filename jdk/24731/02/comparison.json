{"files":[{"patch":"@@ -34,2 +34,0 @@\n-import java.util.regex.Pattern;\n-import java.util.regex.Matcher;\n@@ -68,1 +66,1 @@\n-            args = marshal(args);\n+            args = args.toLowerCase(Locale.ENGLISH);\n@@ -352,63 +350,0 @@\n-    \/**\n-     * change a string into lower case except permission classes and URLs.\n-     *\/\n-    private static String marshal(String args) {\n-        if (args != null) {\n-            StringBuilder target = new StringBuilder();\n-            StringBuilder source = new StringBuilder(args);\n-\n-            \/\/ obtain the \"permission=<classname>\" options\n-            \/\/ the syntax of classname: IDENTIFIER.IDENTIFIER\n-            \/\/ the regular express to match a class name:\n-            \/\/ \"[a-zA-Z_$][a-zA-Z0-9_$]*([.][a-zA-Z_$][a-zA-Z0-9_$]*)*\"\n-            String keyReg = \"[Pp][Ee][Rr][Mm][Ii][Ss][Ss][Ii][Oo][Nn]=\";\n-            String keyStr = \"permission=\";\n-            String reg = keyReg +\n-                \"[a-zA-Z_$][a-zA-Z0-9_$]*([.][a-zA-Z_$][a-zA-Z0-9_$]*)*\";\n-            Pattern pattern = Pattern.compile(reg);\n-            Matcher matcher = pattern.matcher(source);\n-            StringBuilder left = new StringBuilder();\n-            while (matcher.find()) {\n-                String matched = matcher.group();\n-                target.append(matched.replaceFirst(keyReg, keyStr));\n-                target.append(\"  \");\n-\n-                \/\/ delete the matched sequence\n-                matcher.appendReplacement(left, \"\");\n-            }\n-            matcher.appendTail(left);\n-            source = left;\n-\n-            \/\/ obtain the \"codebase=<URL>\" options\n-            \/\/ the syntax of URL is too flexible, and here assumes that the\n-            \/\/ URL contains no space, comma(','), and semicolon(';'). That\n-            \/\/ also means those characters also could be used as separator\n-            \/\/ after codebase option.\n-            \/\/ However, the assumption is incorrect in some special situation\n-            \/\/ when the URL contains comma or semicolon\n-            keyReg = \"[Cc][Oo][Dd][Ee][Bb][Aa][Ss][Ee]=\";\n-            keyStr = \"codebase=\";\n-            reg = keyReg + \"[^, ;]*\";\n-            pattern = Pattern.compile(reg);\n-            matcher = pattern.matcher(source);\n-            left = new StringBuilder();\n-            while (matcher.find()) {\n-                String matched = matcher.group();\n-                target.append(matched.replaceFirst(keyReg, keyStr));\n-                target.append(\"  \");\n-\n-                \/\/ delete the matched sequence\n-                matcher.appendReplacement(left, \"\");\n-            }\n-            matcher.appendTail(left);\n-            source = left;\n-\n-            \/\/ convert the rest to lower-case characters\n-            target.append(source.toString().toLowerCase(Locale.ENGLISH));\n-\n-            return target.toString();\n-        }\n-\n-        return null;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/Debug.java","additions":1,"deletions":66,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test 1.1, 06\/11\/07\n- * @author Xuelei Fan\n- * @bug 6466247\n- * @summary java.security.debug permission=<classname> and codebase=<URL>\n- *          options do not work\n- * @modules java.base\/sun.security.util\n- * @run main\/othervm -Djava.security.debug=\"stacknothing--=-30logincontextacCess:stack-domain,combiner;access:fAilure-jarpermission=sun.dummy.DummyPermission;peRmiSsion=sun.Dummy.DummyPermission2=permission=sun.dummy.DummyPermission3:codEbAse=\/dir1\/DIR2\/Dir3\/File.java,codebase=http:\/\/www.sun.com\/search?q=SunMicro,codEbAse=\/dir1\/DIR2\/Dir3\/File.java;coDebase=www.sun.com;codebase=file:\/\/\/C:\/temp\/foo%20more\/a.txt\" MultiOptions\n- *\/\n-import sun.security.util.Debug;\n-\n-public class MultiOptions\n-{\n-    public static void main(String args[]) throws Exception {\n-\n-        if (!Debug.isOn(\"access\") ||\n-                !Debug.isOn(\"stack\") ||\n-                !Debug.isOn(\"logincontext\") ||\n-                !Debug.isOn(\"domain\") ||\n-                !Debug.isOn(\"combiner\") ||\n-                !Debug.isOn(\"failure\") ||\n-                !Debug.isOn(\"jar\") ||\n-                !Debug.isOn(\"permission=sun.dummy.DummyPermission\") ||\n-                Debug.isOn(\"permission=sun.dummy.dummypermission\") ||\n-                !Debug.isOn(\"permission=sun.Dummy.DummyPermission2\") ||\n-                !Debug.isOn(\"permission=sun.dummy.DummyPermission3\") ||\n-                !Debug.isOn(\"codebase=\/dir1\/DIR2\/Dir3\/File.java\") ||\n-                Debug.isOn(\"codebase=\/dir1\/dir2\/dir3\/file.java\") ||\n-                !Debug.isOn(\"codebase=www.sun.com\") ||\n-                !Debug.isOn(\"codebase=file:\/\/\/C:\/temp\/foo%20more\/a.txt\") ||\n-                !Debug.isOn(\"codebase=http:\/\/www.sun.com\/search?q=SunMicro\") ) {\n-            throw new Exception(\"sun.security.Debug failed to parse options\");\n-        }\n-    }\n-\n-}\n","filename":"test\/jdk\/sun\/security\/util\/Debug\/MultiOptions.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"}]}