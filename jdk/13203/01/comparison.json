{"files":[{"patch":"@@ -1501,1 +1501,0 @@\n-int java_lang_Thread_Constants::_static_NOT_SUPPORTED_CLASSLOADER_offset = 0;\n@@ -1504,2 +1503,1 @@\n-  macro(_static_VTHREAD_GROUP_offset,             k, \"VTHREAD_GROUP\",             threadgroup_signature, true); \\\n-  macro(_static_NOT_SUPPORTED_CLASSLOADER_offset, k, \"NOT_SUPPORTED_CLASSLOADER\", classloader_signature, true);\n+  macro(_static_VTHREAD_GROUP_offset,             k, \"VTHREAD_GROUP\",             threadgroup_signature, true);\n@@ -1526,5 +1524,0 @@\n-oop java_lang_Thread_Constants::get_NOT_SUPPORTED_CLASSLOADER() {\n-  InstanceKlass* k = vmClasses::Thread_Constants_klass();\n-  oop base = k->static_field_base_raw();\n-  return base->obj_field(_static_NOT_SUPPORTED_CLASSLOADER_offset);\n-}\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -477,1 +477,0 @@\n-  static oop get_NOT_SUPPORTED_CLASSLOADER();\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-static jint CurrentVersion = JNI_VERSION_20;\n+static jint CurrentVersion = JNI_VERSION_21;\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1727,1 +1727,1 @@\n-    <function id=\"SuspendAllVirtualThreads\" num=\"118\" since=\"19\">\n+    <function id=\"SuspendAllVirtualThreads\" num=\"118\" since=\"21\">\n@@ -1730,4 +1730,0 @@\n-        <b> SuspendAllVirtualThreads is a preview API of the Java platform. <\/b>\n-        <i>Preview features may be removed in a future release, or upgraded to\n-        permanent features of the Java platform.<\/i>\n-        <p\/>\n@@ -1853,1 +1849,1 @@\n-   <function id=\"ResumeAllVirtualThreads\" num=\"119\" since=\"19\">\n+   <function id=\"ResumeAllVirtualThreads\" num=\"119\" since=\"21\">\n@@ -1856,4 +1852,0 @@\n-        <b> ResumeAllVirtualThreads is a preview API of the Java platform. <\/b>\n-        <i>Preview features may be removed in a future release, or upgraded to\n-        permanent features of the Java platform.<\/i>\n-        <p\/>\n@@ -10653,1 +10645,1 @@\n-      <capabilityfield id=\"can_support_virtual_threads\" since=\"19\">\n+      <capabilityfield id=\"can_support_virtual_threads\" since=\"21\">\n@@ -10655,4 +10647,0 @@\n-          <b> can_support_virtual_threads is a preview API of the Java platform. <\/b>\n-          <i>Preview features may be removed in a future release, or upgraded to\n-          permanent features of the Java platform.<\/i>\n-          <p\/>\n@@ -13039,1 +13027,1 @@\n-         id=\"VirtualThreadStart\" const=\"JVMTI_EVENT_VIRTUAL_THREAD_START\" filtered=\"thread\" num=\"87\" phase=\"start\" since=\"19\">\n+         id=\"VirtualThreadStart\" const=\"JVMTI_EVENT_VIRTUAL_THREAD_START\" filtered=\"thread\" num=\"87\" phase=\"start\" since=\"21\">\n@@ -13041,4 +13029,0 @@\n-      <b> VirtualThreadStart is a preview API of the Java platform. <\/b>\n-      <i>Preview features may be removed in a future release, or upgraded to\n-      permanent features of the Java platform.<\/i>\n-      <p\/>\n@@ -13072,1 +13056,1 @@\n-         id=\"VirtualThreadEnd\" const=\"JVMTI_EVENT_VIRTUAL_THREAD_END\" filtered=\"thread\" num=\"88\" phase=\"start\" since=\"19\">\n+         id=\"VirtualThreadEnd\" const=\"JVMTI_EVENT_VIRTUAL_THREAD_END\" filtered=\"thread\" num=\"88\" phase=\"start\" since=\"21\">\n@@ -13074,4 +13058,0 @@\n-      <b> VirtualThreadEnd is a preview API of the Java platform. <\/b>\n-      <i>Preview features may be removed in a future release, or upgraded to\n-      permanent features of the Java platform.<\/i>\n-      <p\/>\n","filename":"src\/hotspot\/share\/prims\/jvmti.xml","additions":6,"deletions":26,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -1314,7 +1314,0 @@\n-  if (loader != nullptr) {\n-    \/\/ Do the same as Thread.getContextClassLoader and set context_class_loader to be\n-    \/\/ the system class loader when the field value is the \"not supported\" placeholder.\n-    if (loader == java_lang_Thread_Constants::get_NOT_SUPPORTED_CLASSLOADER()) {\n-      loader = SystemDictionary::java_system_loader();\n-    }\n-  }\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,0 +119,1 @@\n+    JVMTI_VERSION_21  = 0x30150000,\n","filename":"src\/hotspot\/share\/prims\/jvmtiH.xsl","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -176,0 +176,6 @@\n+    if (stream.continuation() != nullptr && stream.continuation() != stream.reg_map()->cont()) {\n+      \/\/ The code in StackStreamFactory.java has failed to set the continuation because frameBuffer.isAtBottom()\n+      \/\/ returns false if the end of a continuation falls precisely at the end of the batch.\n+      \/\/ By breaking here, we're signalling the Java code to set the continuation to the parent.\n+      break;\n+    }\n@@ -193,0 +199,2 @@\n+        \/\/ We end a batch on continuation bottom to let the Java side skip top frames of the next one\n+        if (stream.continuation() != nullptr && method->intrinsic_id() == vmIntrinsics::_Continuation_enter) break;\n@@ -579,1 +587,1 @@\n-      if (n < 1) {\n+      if (n < 1 && !skip_hidden_frames(mode)) {\n","filename":"src\/hotspot\/share\/prims\/stackwalk.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1171,0 +1171,1 @@\n+  if (version == JNI_VERSION_21) return JNI_TRUE;\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -92,1 +92,0 @@\n-import jdk.internal.vm.annotation.ChangesCurrentThread;\n@@ -2566,1 +2565,0 @@\n-            @ChangesCurrentThread\n@@ -2568,9 +2566,2 @@\n-                Thread thread = Thread.currentThread();\n-                if (thread.isVirtual()) {\n-                    Thread carrier = Thread.currentCarrierThread();\n-                    carrier.setCurrentThread(carrier);\n-                    try {\n-                        return task.call();\n-                    } finally {\n-                        carrier.setCurrentThread(thread);\n-                    }\n+                if (Thread.currentThread() instanceof VirtualThread vthread) {\n+                    return vthread.executeOnCarrierThread(task);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,2 +44,0 @@\n-import jdk.internal.javac.PreviewFeature;\n-import jdk.internal.misc.PreviewFeatures;\n@@ -59,0 +57,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -87,5 +86,5 @@\n- * a value that is independent of the value set by other threads. Thread also supports\n- * {@link InheritableThreadLocal} variables that are thread local variables that are\n- * inherited at Thread creation time from the parent Thread. Thread supports a special\n- * inheritable thread local for the thread {@linkplain #getContextClassLoader()\n- * context-class-loader}.\n+ * a value that is independent of the value set by other threads. {@code Thread} also\n+ * supports {@link InheritableThreadLocal} variables that are thread local variables\n+ * that are inherited at thread creation time from the parent {@code Thread}.\n+ * {@code Thread} supports a special inheritable thread local for the thread\n+ * {@linkplain #getContextClassLoader() context-class-loader}.\n@@ -446,0 +445,30 @@\n+    \/**\n+     * Called before sleeping to create a jdk.ThreadSleepEvent event.\n+     *\/\n+    private static ThreadSleepEvent beforeSleep(long nanos) {\n+        ThreadSleepEvent event = null;\n+        if (ThreadSleepEvent.isTurnedOn()) {\n+            try {\n+                event = new ThreadSleepEvent();\n+                event.time = nanos;\n+                event.begin();\n+            } catch (OutOfMemoryError e) {\n+                event = null;\n+            }\n+        }\n+        return event;\n+    }\n+\n+    \/**\n+     * Called after sleeping to commit the jdk.ThreadSleepEvent event.\n+     *\/\n+    private static void afterSleep(ThreadSleepEvent event) {\n+        if (event != null) {\n+            try {\n+                event.commit();\n+            } catch (OutOfMemoryError e) {\n+                \/\/ ignore\n+            }\n+        }\n+    }\n+\n@@ -468,11 +497,6 @@\n-        if (currentThread() instanceof VirtualThread vthread) {\n-            long nanos = MILLISECONDS.toNanos(millis);\n-            vthread.sleepNanos(nanos);\n-            return;\n-        }\n-\n-        if (ThreadSleepEvent.isTurnedOn()) {\n-            ThreadSleepEvent event = new ThreadSleepEvent();\n-            try {\n-                event.time = MILLISECONDS.toNanos(millis);\n-                event.begin();\n+        long nanos = MILLISECONDS.toNanos(millis);\n+        ThreadSleepEvent event = beforeSleep(nanos);\n+        try {\n+            if (currentThread() instanceof VirtualThread vthread) {\n+                vthread.sleepNanos(nanos);\n+            } else {\n@@ -480,2 +504,0 @@\n-            } finally {\n-                event.commit();\n@@ -483,2 +505,2 @@\n-        } else {\n-            sleep0(millis);\n+        } finally {\n+            afterSleep(event);\n@@ -521,10 +543,16 @@\n-        if (currentThread() instanceof VirtualThread vthread) {\n-            \/\/ total sleep time, in nanoseconds\n-            long totalNanos = MILLISECONDS.toNanos(millis);\n-            totalNanos += Math.min(Long.MAX_VALUE - totalNanos, nanos);\n-            vthread.sleepNanos(totalNanos);\n-            return;\n-        }\n-\n-        if (nanos > 0 && millis < Long.MAX_VALUE) {\n-            millis++;\n+        ThreadSleepEvent event = beforeSleep(nanos);\n+        try {\n+            if (currentThread() instanceof VirtualThread vthread) {\n+                \/\/ total sleep time, in nanoseconds\n+                long totalNanos = MILLISECONDS.toNanos(millis);\n+                totalNanos += Math.min(Long.MAX_VALUE - totalNanos, nanos);\n+                vthread.sleepNanos(totalNanos);\n+            } else {\n+                \/\/ millisecond precision\n+                if (nanos > 0 && millis < Long.MAX_VALUE) {\n+                    millis++;\n+                }\n+                sleep0(millis);\n+            }\n+        } finally {\n+            afterSleep(event);\n@@ -532,1 +560,0 @@\n-        sleep(millis);\n@@ -553,5 +580,1 @@\n-        if (nanos < 0)\n-            return;\n-\n-        if (currentThread() instanceof VirtualThread vthread) {\n-            vthread.sleepNanos(nanos);\n+        if (nanos < 0) {\n@@ -561,4 +584,14 @@\n-        \/\/ convert to milliseconds\n-        long millis = MILLISECONDS.convert(nanos, NANOSECONDS);\n-        if (nanos > NANOSECONDS.convert(millis, MILLISECONDS)) {\n-            millis += 1L;\n+        ThreadSleepEvent event = beforeSleep(nanos);\n+        try {\n+            if (currentThread() instanceof VirtualThread vthread) {\n+                vthread.sleepNanos(nanos);\n+            } else {\n+                \/\/ millisecond precision\n+                long millis = NANOSECONDS.toMillis(nanos);\n+                if (nanos > MILLISECONDS.toNanos(millis)) {\n+                    millis += 1L;\n+                }\n+                sleep0(millis);\n+            }\n+        } finally {\n+            afterSleep(event);\n@@ -566,1 +599,0 @@\n-        sleep(millis);\n@@ -608,7 +640,0 @@\n-    \/**\n-     * Characteristic value signifying that the thread cannot set values for its\n-     * copy of {@link ThreadLocal thread-locals}.\n-     * See Thread initialization.\n-     *\/\n-    static final int NO_THREAD_LOCALS = 1 << 1;\n-\n@@ -654,2 +679,1 @@\n-            ClassLoader cl = parent.contextClassLoader;\n-            return (isSupportedClassLoader(cl)) ? cl : ClassLoader.getSystemClassLoader();\n+            return parent.contextClassLoader;\n@@ -724,5 +748,1 @@\n-            if ((characteristics & NO_THREAD_LOCALS) != 0) {\n-                this.threadLocals = ThreadLocal.ThreadLocalMap.NOT_SUPPORTED;\n-                this.inheritableThreadLocals = ThreadLocal.ThreadLocalMap.NOT_SUPPORTED;\n-                this.contextClassLoader = Constants.NOT_SUPPORTED_CLASSLOADER;\n-            } else if ((characteristics & NO_INHERIT_THREAD_LOCALS) == 0) {\n+            if ((characteristics & NO_INHERIT_THREAD_LOCALS) == 0) {\n@@ -730,3 +750,1 @@\n-                if (parentMap != null\n-                        && parentMap != ThreadLocal.ThreadLocalMap.NOT_SUPPORTED\n-                        && parentMap.size() > 0) {\n+                if (parentMap != null && parentMap.size() > 0) {\n@@ -735,6 +753,2 @@\n-                ClassLoader parentLoader = contextClassLoader(parent);\n-                if (VM.isBooted() && !isSupportedClassLoader(parentLoader)) {\n-                    \/\/ parent does not support thread locals so no CCL to inherit\n-                    this.contextClassLoader = ClassLoader.getSystemClassLoader();\n-                } else {\n-                    this.contextClassLoader = parentLoader;\n+                if (VM.isBooted()) {\n+                    this.contextClassLoader = contextClassLoader(parent);\n@@ -748,1 +762,1 @@\n-        \/\/ Special value to indicate this is a newly-created Thread\n+        \/\/ special value to indicate this is a newly-created Thread\n@@ -766,5 +780,1 @@\n-        if ((characteristics & NO_THREAD_LOCALS) != 0) {\n-            this.threadLocals = ThreadLocal.ThreadLocalMap.NOT_SUPPORTED;\n-            this.inheritableThreadLocals = ThreadLocal.ThreadLocalMap.NOT_SUPPORTED;\n-            this.contextClassLoader = Constants.NOT_SUPPORTED_CLASSLOADER;\n-        } else if ((characteristics & NO_INHERIT_THREAD_LOCALS) == 0) {\n+        if ((characteristics & NO_INHERIT_THREAD_LOCALS) == 0) {\n@@ -773,3 +783,1 @@\n-            if (parentMap != null\n-                    && parentMap != ThreadLocal.ThreadLocalMap.NOT_SUPPORTED\n-                    && parentMap.size() > 0) {\n+            if (parentMap != null && parentMap.size() > 0) {\n@@ -778,7 +786,1 @@\n-            ClassLoader parentLoader = contextClassLoader(parent);\n-            if (isSupportedClassLoader(parentLoader)) {\n-                this.contextClassLoader = parentLoader;\n-            } else {\n-                \/\/ parent does not support thread locals so no CCL to inherit\n-                this.contextClassLoader = ClassLoader.getSystemClassLoader();\n-            }\n+            this.contextClassLoader = contextClassLoader(parent);\n@@ -790,1 +792,1 @@\n-        \/\/ Special value to indicate this is a newly-created Thread\n+        \/\/ special value to indicate this is a newly-created Thread\n@@ -833,1 +835,1 @@\n-     * @since 19\n+     * @since 21\n@@ -835,1 +837,0 @@\n-    @PreviewFeature(feature = PreviewFeature.Feature.VIRTUAL_THREADS)\n@@ -854,2 +855,1 @@\n-     * @throws UnsupportedOperationException if preview features are not enabled\n-     * @since 19\n+     * @since 21\n@@ -857,1 +857,0 @@\n-    @PreviewFeature(feature = PreviewFeature.Feature.VIRTUAL_THREADS)\n@@ -859,1 +858,0 @@\n-        PreviewFeatures.ensureEnabled();\n@@ -889,1 +887,1 @@\n-     * @since 19\n+     * @since 21\n@@ -891,1 +889,0 @@\n-    @PreviewFeature(feature = PreviewFeature.Feature.VIRTUAL_THREADS)\n@@ -893,4 +890,1 @@\n-            permits Builder.OfPlatform,\n-                    Builder.OfVirtual,\n-                    ThreadBuilders.BaseThreadBuilder {\n-\n+            permits Builder.OfPlatform, Builder.OfVirtual {\n@@ -932,22 +926,0 @@\n-        \/**\n-         * Sets whether the thread is allowed to set values for its copy of {@linkplain\n-         * ThreadLocal thread-local} variables. The default is to allow. If not allowed,\n-         * then any attempt by the thread to set a value for a thread-local with the\n-         * {@link ThreadLocal#set(Object)} method throws {@code\n-         * UnsupportedOperationException}. Any attempt to set the thread's context\n-         * class loader with {@link Thread#setContextClassLoader(ClassLoader)\n-         * setContextClassLoader} also throws. The {@link ThreadLocal#get()} method\n-         * always returns the {@linkplain ThreadLocal#initialValue() initial-value}\n-         * when thread locals are not allowed.\n-         *\n-         * @apiNote This method is intended for cases where there are a large number of\n-         * threads and where potentially unbounded memory usage due to thread locals is\n-         * a concern. Disallowing a thread to set its copy of thread-local variables\n-         * creates the potential for exceptions at run-time so great care is required\n-         * when the thread is used to invoke arbitrary code.\n-         *\n-         * @param allow {@code true} to allow, {@code false} to disallow\n-         * @return this builder\n-         *\/\n-        Builder allowSetThreadLocals(boolean allow);\n-\n@@ -959,4 +931,0 @@\n-         * <p> The initial values of {@code InheritableThreadLocal}s are never inherited\n-         * when {@link #allowSetThreadLocals(boolean)} is used to disallow the thread\n-         * to have its own copy of thread-local variables.\n-         *\n@@ -1021,1 +989,1 @@\n-         * @since 19\n+         * @since 21\n@@ -1023,1 +991,0 @@\n-        @PreviewFeature(feature = PreviewFeature.Feature.VIRTUAL_THREADS)\n@@ -1034,1 +1001,0 @@\n-            @Override OfPlatform allowSetThreadLocals(boolean allow);\n@@ -1097,1 +1063,1 @@\n-         * @since 19\n+         * @since 21\n@@ -1099,1 +1065,0 @@\n-        @PreviewFeature(feature = PreviewFeature.Feature.VIRTUAL_THREADS)\n@@ -1110,1 +1075,0 @@\n-            @Override OfVirtual allowSetThreadLocals(boolean allow);\n@@ -1528,1 +1492,0 @@\n-     * @throws UnsupportedOperationException if preview features are not enabled\n@@ -1530,1 +1493,1 @@\n-     * @since 19\n+     * @since 21\n@@ -1532,1 +1495,0 @@\n-    @PreviewFeature(feature = PreviewFeature.Feature.VIRTUAL_THREADS)\n@@ -1535,1 +1497,0 @@\n-        PreviewFeatures.ensureEnabled();\n@@ -1547,1 +1508,1 @@\n-     * @since 19\n+     * @since 21\n@@ -1549,1 +1510,0 @@\n-    @PreviewFeature(feature = PreviewFeature.Feature.VIRTUAL_THREADS)\n@@ -1584,0 +1544,2 @@\n+            if (this.container != null)\n+                throw new IllegalThreadStateException();\n@@ -1658,9 +1620,11 @@\n-        \/\/ pop any remaining scopes from the stack, this may block\n-        if (headStackableScopes != null) {\n-            StackableScope.popAll();\n-        }\n-\n-        \/\/ notify container that thread is exiting\n-        ThreadContainer container = threadContainer();\n-        if (container != null) {\n-            container.onExit(this);\n+        try {\n+            \/\/ pop any remaining scopes from the stack, this may block\n+            if (headStackableScopes != null) {\n+                StackableScope.popAll();\n+            }\n+        } finally {\n+            \/\/ notify container that thread is exiting\n+            ThreadContainer container = threadContainer();\n+            if (container != null) {\n+                container.onExit(this);\n+            }\n@@ -2378,2 +2342,0 @@\n-        if (!isSupportedClassLoader(cl))\n-            cl = ClassLoader.getSystemClassLoader();\n@@ -2395,4 +2357,0 @@\n-     * <p> The context {@code ClassLoader} cannot be set when the thread is\n-     * {@linkplain Thread.Builder#allowSetThreadLocals(boolean) not allowed} to have\n-     * its own copy of thread local variables.\n-     *\n@@ -2409,3 +2367,0 @@\n-     * @throws  UnsupportedOperationException if this thread is not allowed\n-     *          to set values for its copy of thread-local variables\n-     *\n@@ -2423,4 +2378,0 @@\n-        if (!isSupportedClassLoader(contextClassLoader)) {\n-            throw new UnsupportedOperationException(\n-                \"The context class loader cannot be set\");\n-        }\n@@ -2430,14 +2381,0 @@\n-    \/**\n-     * Returns true if the given ClassLoader is a \"supported\" class loader. All\n-     * class loaders, except ClassLoaders.NOT_SUPPORTED, are considered supported.\n-     * This method allows the initialization of ClassLoaders to be delayed until\n-     * it is required.\n-     *\/\n-    private static boolean isSupportedClassLoader(ClassLoader loader) {\n-        if (loader == null)\n-            return true;\n-        if (loader == jdk.internal.loader.ClassLoaders.appClassLoader())\n-            return true;\n-        return loader != Constants.NOT_SUPPORTED_CLASSLOADER;\n-    }\n-\n@@ -2980,3 +2917,0 @@\n-        \/\/ Placeholder TCCL when thread locals not supported\n-        static final ClassLoader NOT_SUPPORTED_CLASSLOADER;\n-\n@@ -3000,10 +2934,0 @@\n-\n-            var createClassLoader = new PrivilegedAction<ClassLoader>() {\n-                @Override\n-                public ClassLoader run() {\n-                    return new ClassLoader(null) { };\n-                }\n-            };\n-            @SuppressWarnings(\"removal\")\n-            ClassLoader loader = AccessController.doPrivileged(createClassLoader);\n-            NOT_SUPPORTED_CLASSLOADER = loader;\n@@ -3035,1 +2959,1 @@\n-    private volatile ThreadContainer container;  \/\/ @Stable candidate?\n+    private @Stable ThreadContainer container;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Thread.java","additions":108,"deletions":184,"binary":false,"changes":292,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.lang.Thread.Builder;\n@@ -44,0 +43,1 @@\n+    private ThreadBuilders() { }\n@@ -46,1 +46,1 @@\n-     * Base implementation of ThreadBuilder.\n+     * Base class for Thread.Builder implementations.\n@@ -48,2 +48,1 @@\n-    static abstract non-sealed\n-    class BaseThreadBuilder<T extends Builder> implements Builder {\n+    private static class BaseThreadBuilder {\n@@ -79,3 +78,1 @@\n-        @Override\n-        @SuppressWarnings(\"unchecked\")\n-        public T name(String name) {\n+        void setName(String name) {\n@@ -84,1 +81,0 @@\n-            return (T) this;\n@@ -87,3 +83,1 @@\n-        @Override\n-        @SuppressWarnings(\"unchecked\")\n-        public T name(String prefix, long start) {\n+        void setName(String prefix, long start) {\n@@ -95,1 +89,0 @@\n-            return (T) this;\n@@ -98,14 +91,1 @@\n-        @Override\n-        @SuppressWarnings(\"unchecked\")\n-        public T allowSetThreadLocals(boolean allow) {\n-            if (allow) {\n-                characteristics &= ~Thread.NO_THREAD_LOCALS;\n-            } else {\n-                characteristics |= Thread.NO_THREAD_LOCALS;\n-            }\n-            return (T) this;\n-        }\n-\n-        @Override\n-        @SuppressWarnings(\"unchecked\")\n-        public T inheritInheritableThreadLocals(boolean inherit) {\n+        void setInheritInheritableThreadLocals(boolean inherit) {\n@@ -117,1 +97,0 @@\n-            return (T) this;\n@@ -120,3 +99,1 @@\n-        @Override\n-        @SuppressWarnings(\"unchecked\")\n-        public T uncaughtExceptionHandler(UncaughtExceptionHandler ueh) {\n+        void setUncaughtExceptionHandler(UncaughtExceptionHandler ueh) {\n@@ -124,1 +101,0 @@\n-            return (T) this;\n@@ -132,1 +108,1 @@\n-            extends BaseThreadBuilder<OfPlatform> implements OfPlatform {\n+            extends BaseThreadBuilder implements OfPlatform {\n@@ -148,0 +124,24 @@\n+        @Override\n+        public OfPlatform name(String name) {\n+            setName(name);\n+            return this;\n+        }\n+\n+        @Override\n+        public OfPlatform name(String prefix, long start) {\n+            setName(prefix, start);\n+            return this;\n+        }\n+\n+        @Override\n+        public OfPlatform inheritInheritableThreadLocals(boolean inherit) {\n+            setInheritInheritableThreadLocals(inherit);\n+            return this;\n+        }\n+\n+        @Override\n+        public OfPlatform uncaughtExceptionHandler(UncaughtExceptionHandler ueh) {\n+            setUncaughtExceptionHandler(ueh);\n+            return this;\n+        }\n+\n@@ -211,1 +211,1 @@\n-            extends BaseThreadBuilder<OfVirtual> implements OfVirtual {\n+            extends BaseThreadBuilder implements OfVirtual {\n@@ -224,0 +224,24 @@\n+        @Override\n+        public OfVirtual name(String name) {\n+            setName(name);\n+            return this;\n+        }\n+\n+        @Override\n+        public OfVirtual name(String prefix, long start) {\n+            setName(prefix, start);\n+            return this;\n+        }\n+\n+        @Override\n+        public OfVirtual inheritInheritableThreadLocals(boolean inherit) {\n+            setInheritInheritableThreadLocals(inherit);\n+            return this;\n+        }\n+\n+        @Override\n+        public OfVirtual uncaughtExceptionHandler(UncaughtExceptionHandler ueh) {\n+            setUncaughtExceptionHandler(ueh);\n+            return this;\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ThreadBuilders.java","additions":58,"deletions":34,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.stream.Collectors;\n@@ -35,0 +36,1 @@\n+import sun.security.action.GetPropertyAction;\n@@ -80,0 +82,2 @@\n+    private static final boolean TRACE_VTHREAD_LOCALS = traceVirtualThreadLocals();\n+\n@@ -164,2 +168,0 @@\n-     * If the current thread does not support thread locals then\n-     * this method returns its {@link #initialValue}.\n@@ -168,1 +170,0 @@\n-     * @see Thread.Builder#allowSetThreadLocals(boolean)\n@@ -186,9 +187,5 @@\n-            if (map == ThreadLocalMap.NOT_SUPPORTED) {\n-                return initialValue();\n-            } else {\n-                ThreadLocalMap.Entry e = map.getEntry(this);\n-                if (e != null) {\n-                    @SuppressWarnings(\"unchecked\")\n-                    T result = (T) e.value;\n-                    return result;\n-                }\n+            ThreadLocalMap.Entry e = map.getEntry(this);\n+            if (e != null) {\n+                @SuppressWarnings(\"unchecked\")\n+                T result = (T) e.value;\n+                return result;\n@@ -214,1 +211,1 @@\n-        if (map != null && map != ThreadLocalMap.NOT_SUPPORTED) {\n+        if (map != null) {\n@@ -230,1 +227,0 @@\n-        assert map != ThreadLocalMap.NOT_SUPPORTED;\n@@ -239,0 +235,3 @@\n+        if (TRACE_VTHREAD_LOCALS) {\n+            dumpStackIfVirtualThread();\n+        }\n@@ -250,5 +249,0 @@\n-     *\n-     * @throws UnsupportedOperationException if the current thread is not\n-     *         allowed to set its copy of thread-local variables\n-     *\n-     * @see Thread.Builder#allowSetThreadLocals(boolean)\n@@ -258,0 +252,3 @@\n+        if (TRACE_VTHREAD_LOCALS) {\n+            dumpStackIfVirtualThread();\n+        }\n@@ -267,3 +264,0 @@\n-        if (map == ThreadLocalMap.NOT_SUPPORTED) {\n-            throw new UnsupportedOperationException();\n-        }\n@@ -299,1 +293,1 @@\n-         if (m != null && m != ThreadLocalMap.NOT_SUPPORTED) {\n+         if (m != null) {\n@@ -397,3 +391,0 @@\n-        \/\/ Placeholder when thread locals not supported\n-        static final ThreadLocalMap NOT_SUPPORTED = new ThreadLocalMap();\n-\n@@ -810,0 +801,39 @@\n+\n+\n+    \/**\n+     * Reads the value of the jdk.traceVirtualThreadLocals property to determine if\n+     * a stack trace should be printed when a virtual threads sets a thread local.\n+     *\/\n+    private static boolean traceVirtualThreadLocals() {\n+        String propValue = GetPropertyAction.privilegedGetProperty(\"jdk.traceVirtualThreadLocals\");\n+        return (propValue != null)\n+                && (propValue.isEmpty() || Boolean.parseBoolean(propValue));\n+    }\n+\n+    \/**\n+     * Print a stack trace if the current thread is a virtual thread.\n+     *\/\n+    static void dumpStackIfVirtualThread() {\n+        if (Thread.currentThread() instanceof VirtualThread vthread) {\n+            try {\n+                var stack = StackWalkerHolder.STACK_WALKER.walk(s ->\n+                        s.skip(1)  \/\/ skip caller\n+                         .collect(Collectors.toList()));\n+\n+                \/\/ switch to carrier thread to avoid recursive use of thread-locals\n+                vthread.executeOnCarrierThread(() -> {\n+                    System.out.println(vthread);\n+                    for (StackWalker.StackFrame frame : stack) {\n+                        System.out.format(\"    %s%n\", frame.toStackTraceElement());\n+                    }\n+                    return null;\n+                });\n+            } catch (Exception e) {\n+                throw new InternalError(e);\n+            }\n+        }\n+    }\n+\n+    private static class StackWalkerHolder {\n+        static final StackWalker STACK_WALKER = StackWalker.getInstance();\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ThreadLocal.java","additions":56,"deletions":26,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.util.concurrent.Callable;\n@@ -43,1 +44,0 @@\n-import jdk.internal.event.ThreadSleepEvent;\n@@ -61,0 +61,1 @@\n+import jdk.internal.vm.annotation.ReservedStackAccess;\n@@ -178,1 +179,1 @@\n-            super(VTHREAD_SCOPE, () -> vthread.run(task));\n+            super(VTHREAD_SCOPE, wrap(vthread, task));\n@@ -187,0 +188,8 @@\n+        private static Runnable wrap(VirtualThread vthread, Runnable task) {\n+            return new Runnable() {\n+                @Hidden\n+                public void run() {\n+                    vthread.run(task);\n+                }\n+            };\n+        }\n@@ -214,1 +223,1 @@\n-        notifyJvmtiMount(true, firstRun);\n+        notifyJvmtiMount(\/*hide*\/true, firstRun);\n@@ -220,1 +229,1 @@\n-                afterTerminate(\/*executed*\/ true);\n+                afterTerminate();\n@@ -294,1 +303,1 @@\n-        notifyJvmtiMount(false, true);\n+        notifyJvmtiMount(\/*hide*\/false, \/*first*\/true);\n@@ -322,1 +331,1 @@\n-                notifyJvmtiUnmount(true, true);\n+                notifyJvmtiUnmount(\/*hide*\/true, \/*last*\/true);\n@@ -344,0 +353,1 @@\n+    @ReservedStackAccess\n@@ -370,0 +380,1 @@\n+    @ReservedStackAccess\n@@ -407,0 +418,14 @@\n+    \/**\n+     * Executes the given value returning task on the current carrier thread.\n+     *\/\n+    @ChangesCurrentThread\n+    <V> V executeOnCarrierThread(Callable<V> task) throws Exception {\n+        assert Thread.currentThread() == this;\n+        switchToCarrierThread();\n+        try {\n+            return task.call();\n+        } finally {\n+            switchToVirtualThread(this);\n+        }\n+     }\n+\n@@ -412,0 +437,1 @@\n+    @Hidden\n@@ -415,1 +441,1 @@\n-        notifyJvmtiUnmount(true, false);\n+        notifyJvmtiUnmount(\/*hide*\/true, \/*last*\/false);\n@@ -422,1 +448,1 @@\n-            notifyJvmtiMount(false, false);\n+            notifyJvmtiMount(\/*hide*\/false, \/*first*\/false);\n@@ -439,1 +465,1 @@\n-            notifyJvmtiUnmount(false, false);\n+            notifyJvmtiUnmount(\/*hide*\/false, \/*last*\/false);\n@@ -455,1 +481,1 @@\n-            notifyJvmtiUnmount(false, false);\n+            notifyJvmtiUnmount(\/*hide*\/false, \/*last*\/false);\n@@ -466,0 +492,8 @@\n+    \/**\n+     * Invoked after the thread terminates execution. It notifies anyone\n+     * waiting for the thread to terminate.\n+     *\/\n+    private void afterTerminate() {\n+        afterTerminate(true, true);\n+    }\n+\n@@ -470,0 +504,1 @@\n+     * @param notifyContainer true if its container should be notified\n@@ -472,1 +507,1 @@\n-    private void afterTerminate(boolean executed) {\n+    private void afterTerminate(boolean notifyContainer, boolean executed) {\n@@ -476,1 +511,1 @@\n-            notifyJvmtiUnmount(false, true);\n+            notifyJvmtiUnmount(\/*hide*\/false, \/*last*\/true);\n@@ -486,2 +521,2 @@\n-        if (executed) {\n-            \/\/ notify container if thread executed\n+        \/\/ notify container\n+        if (notifyContainer) {\n@@ -489,3 +524,0 @@\n-\n-            \/\/ clear references to thread locals\n-            clearReferences();\n@@ -493,0 +525,3 @@\n+\n+        \/\/ clear references to thread locals\n+        clearReferences();\n@@ -512,0 +547,1 @@\n+        boolean addedToContainer = false;\n@@ -513,1 +549,0 @@\n-        container.onStart(this); \/\/ may throw\n@@ -515,0 +550,3 @@\n+            container.onStart(this);  \/\/ may throw\n+            addedToContainer = true;\n+\n@@ -524,2 +562,1 @@\n-                container.onExit(this);\n-                afterTerminate(\/*executed*\/ false);\n+                afterTerminate(addedToContainer, \/*executed*\/false);\n@@ -554,0 +591,1 @@\n+        boolean yielded = false;\n@@ -556,4 +594,1 @@\n-            if (!yieldContinuation()) {\n-                \/\/ park on the carrier thread when pinned\n-                parkOnCarrierThread(false, 0);\n-            }\n+            yielded = yieldContinuation();  \/\/ may throw\n@@ -561,1 +596,10 @@\n-            assert (Thread.currentThread() == this) && (state() == RUNNING);\n+            assert (Thread.currentThread() == this) && (yielded == (state() == RUNNING));\n+            if (!yielded) {\n+                assert state() == PARKING;\n+                setState(RUNNING);\n+            }\n+        }\n+\n+        \/\/ park on the carrier thread when pinned\n+        if (!yielded) {\n+            parkOnCarrierThread(false, 0);\n@@ -585,1 +629,1 @@\n-            boolean yielded;\n+            boolean yielded = false;\n@@ -589,1 +633,1 @@\n-                yielded = yieldContinuation();\n+                yielded = yieldContinuation();  \/\/ may throw\n@@ -591,2 +635,5 @@\n-                assert (Thread.currentThread() == this)\n-                        && (state() == RUNNING || state() == PARKING);\n+                assert (Thread.currentThread() == this) && (yielded == (state() == RUNNING));\n+                if (!yielded) {\n+                    assert state() == PARKING;\n+                    setState(RUNNING);\n+                }\n@@ -614,1 +661,1 @@\n-        assert state() == PARKING;\n+        assert state() == RUNNING;\n@@ -616,2 +663,7 @@\n-        var pinnedEvent = new VirtualThreadPinnedEvent();\n-        pinnedEvent.begin();\n+        VirtualThreadPinnedEvent event;\n+        try {\n+            event = new VirtualThreadPinnedEvent();\n+            event.begin();\n+        } catch (OutOfMemoryError e) {\n+            event = null;\n+        }\n@@ -635,1 +687,7 @@\n-        pinnedEvent.commit();\n+        if (event != null) {\n+            try {\n+                event.commit();\n+            } catch (OutOfMemoryError e) {\n+                \/\/ ignore\n+            }\n+        }\n@@ -710,0 +768,1 @@\n+        boolean yielded = false;\n@@ -711,1 +770,1 @@\n-            yieldContinuation();\n+            yielded = yieldContinuation();  \/\/ may throw\n@@ -713,2 +772,2 @@\n-            assert Thread.currentThread() == this;\n-            if (state() != RUNNING) {\n+            assert (Thread.currentThread() == this) && (yielded == (state() == RUNNING));\n+            if (!yielded) {\n@@ -721,24 +780,0 @@\n-    \/**\n-     * Sleep the current virtual thread for the given sleep time.\n-     *\n-     * @param nanos the maximum number of nanoseconds to sleep\n-     * @throws InterruptedException if interrupted while sleeping\n-     *\/\n-    void sleepNanos(long nanos) throws InterruptedException {\n-        assert Thread.currentThread() == this;\n-        if (nanos >= 0) {\n-            if (ThreadSleepEvent.isTurnedOn()) {\n-                ThreadSleepEvent event = new ThreadSleepEvent();\n-                try {\n-                    event.time = nanos;\n-                    event.begin();\n-                    doSleepNanos(nanos);\n-                } finally {\n-                    event.commit();\n-                }\n-            } else {\n-                doSleepNanos(nanos);\n-            }\n-        }\n-    }\n-\n@@ -754,0 +789,3 @@\n+     *\n+     * @param nanos the maximum number of nanoseconds to sleep\n+     * @throws InterruptedException if interrupted while sleeping\n@@ -755,2 +793,2 @@\n-    private void doSleepNanos(long nanos) throws InterruptedException {\n-        assert nanos >= 0;\n+    void sleepNanos(long nanos) throws InterruptedException {\n+        assert Thread.currentThread() == this && nanos >= 0;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/VirtualThread.java","additions":101,"deletions":63,"binary":false,"changes":164,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-import jdk.internal.javac.PreviewFeature;\n@@ -252,1 +251,1 @@\n-     * @since 19\n+     * @since 21\n@@ -254,1 +253,0 @@\n-    @PreviewFeature(feature = PreviewFeature.Feature.VIRTUAL_THREADS)\n@@ -268,2 +266,1 @@\n-     * @throws UnsupportedOperationException if preview features are not enabled\n-     * @since 19\n+     * @since 21\n@@ -271,1 +268,0 @@\n-    @PreviewFeature(feature = PreviewFeature.Feature.VIRTUAL_THREADS)\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/Executors.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -328,1 +328,1 @@\n-            extends CompletableFuture<T> implements Runnable {\n+            extends FutureTask<T> implements Runnable {\n@@ -331,1 +331,0 @@\n-        final Callable<T> task;\n@@ -335,0 +334,1 @@\n+            super(task);\n@@ -336,1 +336,0 @@\n-            this.task = task;\n@@ -345,22 +344,2 @@\n-        public void run() {\n-            if (Thread.currentThread() != thread) {\n-                \/\/ should not happen except where something casts this object\n-                \/\/ to a Runnable and invokes the run method.\n-                throw new WrongThreadException();\n-            }\n-            try {\n-                T result = task.call();\n-                complete(result);\n-            } catch (Throwable e) {\n-                completeExceptionally(e);\n-            } finally {\n-                executor.taskComplete(thread);\n-            }\n-        }\n-\n-        @Override\n-        public boolean cancel(boolean mayInterruptIfRunning) {\n-            boolean cancelled = super.cancel(mayInterruptIfRunning);\n-            if (cancelled && mayInterruptIfRunning)\n-                thread.interrupt();\n-            return cancelled;\n+        protected void done() {\n+            executor.taskComplete(thread);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ThreadPerTaskExecutor.java","additions":5,"deletions":26,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,1 @@\n-        @JEP(number=436, title=\"Virtual Threads\", status=\"Second Preview\")\n+        \/\/ not used\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/javac\/PreviewFeature.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import jdk.internal.misc.PreviewFeatures;\n@@ -39,0 +38,1 @@\n+import jdk.internal.vm.annotation.Hidden;\n@@ -50,1 +50,0 @@\n-        PreviewFeatures.ensureEnabled();\n@@ -306,0 +305,1 @@\n+    @Hidden\n@@ -318,0 +318,1 @@\n+    @Hidden\n@@ -319,1 +320,1 @@\n-      target.run();\n+        target.run();\n@@ -341,0 +342,1 @@\n+    @Hidden\n@@ -352,0 +354,1 @@\n+    @Hidden\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/Continuation.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -151,1 +151,0 @@\n-        java.management, \/\/ participates in preview features\n@@ -153,1 +152,0 @@\n-        jdk.incubator.concurrent, \/\/ participates in preview features\n@@ -156,4 +154,1 @@\n-        jdk.jdi,\n-        jdk.jfr,\n-        jdk.jshell,\n-        jdk.management;\n+        jdk.jshell;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1995,0 +1995,1 @@\n+#define JNI_VERSION_21  0x00150000\n","filename":"src\/java.base\/share\/native\/include\/jni.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-import jdk.internal.javac.ParticipatesInPreview;\n-\n@@ -40,1 +38,0 @@\n-@ParticipatesInPreview\n","filename":"src\/java.management\/share\/classes\/module-info.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -2159,4 +2159,0 @@\n-        \"<b>IsVirtual is a preview API of the Java platform.<\/b> \"\n-        \"<em>Preview features may be removed in a future release, or upgraded to \"\n-        \"permanent features of the Java platform.<\/em> Since JDWP version 19.\"\n-        \"<p>\"\n@@ -2165,0 +2161,1 @@\n+        \"<p>Since JDWP version 21.\"\n@@ -2540,4 +2537,0 @@\n-                        \"<b>PlatformThreadsOnly is a preview API of the Java platform.<\/b> \"\n-                        \"<em>Preview features may be removed in a future release, or upgraded to \"\n-                        \"permanent features of the Java platform.<\/em> Since JDWP version 19.\"\n-                        \"<p>\"\n@@ -2546,0 +2539,1 @@\n+                        \"<p>Since JDWP version 21.\"\n","filename":"src\/java.se\/share\/data\/jdwp\/jdwp.spec","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,0 @@\n-import jdk.internal.misc.PreviewFeatures;\n@@ -338,2 +337,0 @@\n-     *\n-     * @throws UnsupportedOperationException if preview features are not enabled\n@@ -342,1 +339,0 @@\n-        PreviewFeatures.ensureEnabled();\n","filename":"src\/jdk.incubator.concurrent\/share\/classes\/jdk\/incubator\/concurrent\/StructuredTaskScope.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-import jdk.internal.javac.ParticipatesInPreview;\n-\n@@ -34,1 +32,0 @@\n-@ParticipatesInPreview\n","filename":"src\/jdk.incubator.concurrent\/share\/classes\/module-info.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import jdk.internal.javac.PreviewFeature;\n@@ -519,1 +518,1 @@\n-     * @since 19\n+     * @since 21\n@@ -521,1 +520,0 @@\n-    @PreviewFeature(feature = PreviewFeature.Feature.VIRTUAL_THREADS, reflective = true)\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/jdi\/ThreadReference.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import jdk.internal.javac.PreviewFeature;\n@@ -73,1 +72,1 @@\n-     * @since 19\n+     * @since 21\n@@ -75,1 +74,0 @@\n-    @PreviewFeature(feature = PreviewFeature.Feature.VIRTUAL_THREADS, reflective = true)\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/jdi\/request\/ThreadDeathRequest.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import jdk.internal.javac.PreviewFeature;\n@@ -73,1 +72,1 @@\n-     * @since 19\n+     * @since 21\n@@ -75,1 +74,0 @@\n-    @PreviewFeature(feature = PreviewFeature.Feature.VIRTUAL_THREADS, reflective = true)\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/jdi\/request\/ThreadStartRequest.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -480,1 +480,0 @@\n-             \"                      Virtual threads are a preview feature of the Java platform.\\n\" +\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/tools\/example\/debug\/tty\/TTYResources.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-sun.include_virtualthreads = List of all threads includes virtual threads as well as platform threads. Virtual threads are a preview feature of the Java platform.\n+sun.include_virtualthreads = List of all threads includes virtual threads as well as platform threads.\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/tools\/jdi\/resources\/jdi.properties","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-.\\\" Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n+.\\\" Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -218,1 +218,0 @@\n-Virtual threads are a preview feature of the Java platform.\n@@ -255,4 +254,0 @@\n-Virtual threads are a preview feature of the Java platform.\n-Preview features may be removed in a future release, or upgraded to\n-permanent features of the Java platform.\n-.PP\n","filename":"src\/jdk.jdi\/share\/man\/jdb.1","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -830,1 +830,0 @@\n- \"                                 Virtual threads are a preview feature of the Java platform.\\n\"\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/debugInit.c","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import jdk.internal.javac.PreviewFeature;\n@@ -116,1 +115,1 @@\n-     * @since 19\n+     * @since 21\n@@ -118,1 +117,0 @@\n-    @PreviewFeature(feature = PreviewFeature.Feature.VIRTUAL_THREADS, reflective = true)\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/RecordedThread.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import jdk.internal.javac.PreviewFeature;\n@@ -150,1 +149,1 @@\n-     * @since 19\n+     * @since 21\n@@ -152,1 +151,0 @@\n-    @PreviewFeature(feature = PreviewFeature.Feature.VIRTUAL_THREADS, reflective = true)\n@@ -159,1 +157,1 @@\n-     * @since 19\n+     * @since 21\n@@ -161,1 +159,0 @@\n-    @PreviewFeature(feature = PreviewFeature.Feature.VIRTUAL_THREADS, reflective = true)\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/HotSpotDiagnosticMXBean.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n- *                   --enable-preview -DhelperVirtualThread=true\n+ *                   -DhelperVirtualThread=true\n@@ -58,1 +58,1 @@\n- *                   --enable-preview -DhelperVirtualThread=true\n+ *                   -DhelperVirtualThread=true\n","filename":"test\/hotspot\/jtreg\/compiler\/codecache\/stress\/UnexpectedDeoptimizationAllTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n- *                   --enable-preview -DhelperVirtualThread=true\n+ *                   -DhelperVirtualThread=true\n@@ -58,1 +58,1 @@\n- *                   --enable-preview -DhelperVirtualThread=true\n+ *                   -DhelperVirtualThread=true\n","filename":"test\/hotspot\/jtreg\/compiler\/codecache\/stress\/UnexpectedDeoptimizationTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-    public static final int JNI_VERSION_20 = 0x00140000;\n+    public static final int JNI_VERSION_21 = 0x00150000;\n@@ -35,1 +35,1 @@\n-        if (res != JNI_VERSION_20) {\n+        if (res != JNI_VERSION_21) {\n","filename":"test\/hotspot\/jtreg\/native_sanity\/JniVersion.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,1 @@\n- * @enablePreview\n- * @run main\/othervm\/timeout=180000 --enable-preview SyncOnValueBasedClassTest\n+ * @run main\/othervm\/timeout=180000 SyncOnValueBasedClassTest\n@@ -66,1 +65,1 @@\n-        String[] commonFatalTestsFlags = {\"--enable-preview\", \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:-CreateCoredumpOnCrash\", \"-XX:DiagnoseSyncOnValueBasedClasses=1\"};\n+        String[] commonFatalTestsFlags = {\"-XX:+UnlockDiagnosticVMOptions\", \"-XX:-CreateCoredumpOnCrash\", \"-XX:DiagnoseSyncOnValueBasedClasses=1\"};\n@@ -76,1 +75,1 @@\n-        String[] commonLogTestsFlags = {\"--enable-preview\", \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:DiagnoseSyncOnValueBasedClasses=2\"};\n+        String[] commonLogTestsFlags = {\"-XX:+UnlockDiagnosticVMOptions\", \"-XX:DiagnoseSyncOnValueBasedClasses=2\"};\n@@ -171,1 +170,1 @@\n-        final String[] vtTest = { \"--enable-preview\", \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:-CreateCoredumpOnCrash\",\n+        final String[] vtTest = { \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:-CreateCoredumpOnCrash\",\n@@ -174,1 +173,1 @@\n-        vtTest[3] = \"-XX:DiagnoseSyncOnValueBasedClasses=1\";\n+        vtTest[2] = \"-XX:DiagnoseSyncOnValueBasedClasses=1\";\n@@ -182,1 +181,1 @@\n-        vtTest[3] = \"-XX:DiagnoseSyncOnValueBasedClasses=2\";\n+        vtTest[2] = \"-XX:DiagnoseSyncOnValueBasedClasses=2\";\n","filename":"test\/hotspot\/jtreg\/runtime\/Monitor\/SyncOnValueBasedClassTest.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @compile --enable-preview -source ${jdk.version} RedefineRunningMethods_SharedHelper.java\n+ * @compile RedefineRunningMethods_SharedHelper.java\n@@ -62,2 +62,1 @@\n-                            use_whitebox_jar,\n-                            \"--enable-preview\");\n+                            use_whitebox_jar);\n@@ -72,1 +71,0 @@\n-                                 \"--enable-preview\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/redefineClass\/RedefineRunningMethods_Shared.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -37,1 +36,0 @@\n- * @enablePreview\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/IsVirtualThread\/IsVirtualThread.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @enablePreview\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/checked\/TestPrimitiveArrayCriticalWithBadParam.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,2 @@\n- * @compile --enable-preview -source ${jdk.version} JNIMonitor.java\n- * @run main\/native\/othervm --enable-preview JNIMonitor\n+ * @compile JNIMonitor.java\n+ * @run main\/native\/othervm JNIMonitor\n","filename":"test\/hotspot\/jtreg\/runtime\/vthread\/JNIMonitor\/JNIMonitor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @compile --enable-preview -source ${jdk.version} RedefineClass.java\n- * @run main\/othervm --enable-preview -Djdk.attach.allowAttachSelf RedefineClass\n+ * @compile RedefineClass.java\n+ * @run main\/othervm -Djdk.attach.allowAttachSelf RedefineClass\n","filename":"test\/hotspot\/jtreg\/runtime\/vthread\/RedefineClass.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,2 @@\n- * @compile --enable-preview -source ${jdk.version} TestObjectAllocationSampleEvent.java\n- * @run main\/othervm --enable-preview TestObjectAllocationSampleEvent\n+ * @compile TestObjectAllocationSampleEvent.java\n+ * @run main\/othervm TestObjectAllocationSampleEvent\n","filename":"test\/hotspot\/jtreg\/runtime\/vthread\/TestObjectAllocationSampleEvent.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @enablePreview\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/GetLocalVariable\/GetSetLocalUnsuspended.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,2 @@\n- * @compile --enable-preview -source ${jdk.version} GetOwnedMonitorInfoTest.java\n- * @run main\/othervm\/native --enable-preview -agentlib:GetOwnedMonitorInfoTest GetOwnedMonitorInfoTest\n+ * @compile GetOwnedMonitorInfoTest.java\n+ * @run main\/othervm\/native -agentlib:GetOwnedMonitorInfoTest GetOwnedMonitorInfoTest\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/GetOwnedMonitorInfo\/GetOwnedMonitorInfoTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,2 @@\n- * @compile --enable-preview -source ${jdk.version} GetOwnedMonitorStackDepthInfoTest.java\n- * @run main\/othervm\/native --enable-preview -agentlib:GetOwnedMonitorStackDepthInfoTest GetOwnedMonitorStackDepthInfoTest\n+ * @compile GetOwnedMonitorStackDepthInfoTest.java\n+ * @run main\/othervm\/native -agentlib:GetOwnedMonitorStackDepthInfoTest GetOwnedMonitorStackDepthInfoTest\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/GetOwnedMonitorStackDepthInfo\/GetOwnedMonitorStackDepthInfoTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,3 +50,2 @@\n- * @compile --enable-preview -source ${jdk.version} HeapMonitorVMEventsTest.java\n- * @run main\/othervm\/native --enable-preview\n- *                          -XX:+UnlockDiagnosticVMOptions\n+ * @compile HeapMonitorVMEventsTest.java\n+ * @run main\/othervm\/native -XX:+UnlockDiagnosticVMOptions\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/HeapMonitor\/MyPackage\/HeapMonitorVMEventsTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n- * @compile --enable-preview -source ${jdk.version} RedefineRunningMethods.java\n+ * @compile RedefineRunningMethods.java\n@@ -37,1 +37,0 @@\n- *         --enable-preview\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineRunningMethods.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,3 +35,3 @@\n- * @compile --enable-preview -source ${jdk.version} RedefineRunningMethodsWithBacktrace.java\n- * @run main\/othervm --enable-preview -javaagent:redefineagent.jar RedefineRunningMethodsWithBacktrace platform\n- * @run main\/othervm --enable-preview -javaagent:redefineagent.jar RedefineRunningMethodsWithBacktrace virtual\n+ * @compile RedefineRunningMethodsWithBacktrace.java\n+ * @run main\/othervm -javaagent:redefineagent.jar RedefineRunningMethodsWithBacktrace platform\n+ * @run main\/othervm -javaagent:redefineagent.jar RedefineRunningMethodsWithBacktrace virtual\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineRunningMethodsWithBacktrace.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,2 +45,2 @@\n- * @compile --enable-preview -source ${jdk.version} -g:lines,source,vars breakpoint01.java\n- * @run main\/othervm\/native --enable-preview -agentlib:breakpoint01 breakpoint01\n+ * @compile -g:lines,source,vars breakpoint01.java\n+ * @run main\/othervm\/native -agentlib:breakpoint01 breakpoint01\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/Breakpoint\/breakpoint01\/breakpoint01.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,2 +46,2 @@\n- * @compile --enable-preview -source ${jdk.version} classload01.java\n- * @run main\/othervm\/native --enable-preview -agentlib:classload01 classload01\n+ * @compile classload01.java\n+ * @run main\/othervm\/native -agentlib:classload01 classload01\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/ClassLoad\/classload01\/classload01.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,2 @@\n- * @compile --enable-preview -source ${jdk.version} classprep01.java\n- * @run main\/othervm\/native --enable-preview -agentlib:classprep01 classprep01\n+ * @compile classprep01.java\n+ * @run main\/othervm\/native -agentlib:classprep01 classprep01\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/ClassPrepare\/classprep01\/classprep01.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,2 @@\n- * @compile --enable-preview -source ${jdk.version} exception01.java\n- * @run main\/othervm\/native --enable-preview -agentlib:exception01 exception01\n+ * @compile exception01.java\n+ * @run main\/othervm\/native -agentlib:exception01 exception01\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/Exception\/exception01\/exception01.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,2 @@\n- * @compile --enable-preview -source ${jdk.version} excatch01.java\n- * @run main\/othervm\/native --enable-preview -agentlib:excatch01 excatch01\n+ * @compile excatch01.java\n+ * @run main\/othervm\/native -agentlib:excatch01 excatch01\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/ExceptionCatch\/excatch01\/excatch01.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,2 +40,2 @@\n- * @compile --enable-preview -source ${jdk.version} fieldacc01.java\n- * @run main\/othervm\/native --enable-preview -agentlib:fieldacc01 fieldacc01\n+ * @compile fieldacc01.java\n+ * @run main\/othervm\/native -agentlib:fieldacc01 fieldacc01\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldAccess\/fieldacc01\/fieldacc01.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,2 @@\n- * @compile --enable-preview -source ${jdk.version} fieldacc02.java\n- * @run main\/othervm\/native --enable-preview -agentlib:fieldacc02 fieldacc02\n+ * @compile fieldacc02.java\n+ * @run main\/othervm\/native -agentlib:fieldacc02 fieldacc02\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldAccess\/fieldacc02\/fieldacc02.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,2 +40,2 @@\n- * @compile --enable-preview -source ${jdk.version} fieldacc03.java\n- * @run main\/othervm\/native --enable-preview -agentlib:fieldacc03 fieldacc03\n+ * @compile fieldacc03.java\n+ * @run main\/othervm\/native -agentlib:fieldacc03 fieldacc03\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldAccess\/fieldacc03\/fieldacc03.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,2 +40,2 @@\n- * @compile --enable-preview -source ${jdk.version} fieldacc04.java\n- * @run main\/othervm\/native --enable-preview -agentlib:fieldacc04 fieldacc04\n+ * @compile fieldacc04.java\n+ * @run main\/othervm\/native -agentlib:fieldacc04 fieldacc04\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldAccess\/fieldacc04\/fieldacc04.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,2 @@\n- * @compile --enable-preview -source ${jdk.version} fieldmod01.java\n- * @run main\/othervm\/native --enable-preview -agentlib:fieldmod01 fieldmod01\n+ * @compile fieldmod01.java\n+ * @run main\/othervm\/native -agentlib:fieldmod01 fieldmod01\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldModification\/fieldmod01\/fieldmod01.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,2 @@\n- * @compile --enable-preview -source ${jdk.version} fieldmod02.java\n- * @run main\/othervm\/native --enable-preview -agentlib:fieldmod02 fieldmod02\n+ * @compile fieldmod02.java\n+ * @run main\/othervm\/native -agentlib:fieldmod02 fieldmod02\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldModification\/fieldmod02\/fieldmod02.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,2 @@\n- * @compile --enable-preview -source ${jdk.version} framepop01a.java\n- * @run main\/othervm\/native --enable-preview -agentlib:framepop01 framepop01\n+ * @compile framepop01a.java\n+ * @run main\/othervm\/native -agentlib:framepop01 framepop01\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FramePop\/framepop01\/framepop01.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,2 @@\n- * @compile --enable-preview -source ${jdk.version} framepop02.java\n- * @run main\/othervm\/native --enable-preview -agentlib:framepop02 framepop02 platform\n+ * @compile framepop02.java\n+ * @run main\/othervm\/native -agentlib:framepop02 framepop02 platform\n@@ -48,2 +48,2 @@\n- * @compile --enable-preview -source ${jdk.version} framepop02.java\n- * @run main\/othervm\/native --enable-preview -agentlib:framepop02 framepop02 virtual\n+ * @compile framepop02.java\n+ * @run main\/othervm\/native -agentlib:framepop02 framepop02 virtual\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FramePop\/framepop02\/framepop02.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,2 @@\n- * @compile --enable-preview -source ${jdk.version} mentry01.java\n- * @run main\/othervm\/native --enable-preview -agentlib:mentry01 mentry01\n+ * @compile mentry01.java\n+ * @run main\/othervm\/native -agentlib:mentry01 mentry01\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MethodEntry\/mentry01\/mentry01.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,2 @@\n- * @compile --enable-preview -source ${jdk.version} mentry02.java\n- * @run main\/othervm\/native --enable-preview -agentlib:mentry02 mentry02\n+ * @compile mentry02.java\n+ * @run main\/othervm\/native -agentlib:mentry02 mentry02\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MethodEntry\/mentry02\/mentry02.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,2 +44,2 @@\n- * @compile --enable-preview -source ${jdk.version} mexit01.java\n- * @run main\/othervm\/native --enable-preview -agentlib:mexit01 mexit01\n+ * @compile mexit01.java\n+ * @run main\/othervm\/native -agentlib:mexit01 mexit01\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MethodExit\/mexit01\/mexit01.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,2 +47,2 @@\n- * @compile --enable-preview -source ${jdk.version} mexit02.java\n- * @run main\/othervm\/native --enable-preview -agentlib:mexit02 mexit02\n+ * @compile mexit02.java\n+ * @run main\/othervm\/native -agentlib:mexit02 mexit02\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MethodExit\/mexit02\/mexit02.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,3 +45,3 @@\n- * @compile --enable-preview -source ${jdk.version} mcontenter01.java\n- * @run main\/othervm\/native --enable-preview -agentlib:mcontenter01 mcontenter01 platform\n- * @run main\/othervm\/native --enable-preview -agentlib:mcontenter01 mcontenter01 virtual\n+ * @compile mcontenter01.java\n+ * @run main\/othervm\/native -agentlib:mcontenter01 mcontenter01 platform\n+ * @run main\/othervm\/native -agentlib:mcontenter01 mcontenter01 virtual\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MonitorContendedEnter\/mcontenter01\/mcontenter01.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,3 +44,3 @@\n- * @compile --enable-preview -source ${jdk.version} mcontentered01.java\n- * @run main\/othervm\/native --enable-preview -agentlib:mcontentered01 mcontentered01 platform\n- * @run main\/othervm\/native --enable-preview -agentlib:mcontentered01 mcontentered01 virtual\n+ * @compile mcontentered01.java\n+ * @run main\/othervm\/native -agentlib:mcontentered01 mcontentered01 platform\n+ * @run main\/othervm\/native -agentlib:mcontentered01 mcontentered01 virtual\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MonitorContendedEntered\/mcontentered01\/mcontentered01.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,3 +44,3 @@\n- * @compile --enable-preview -source ${jdk.version} monitorwait01.java\n- * @run main\/othervm\/native --enable-preview -agentlib:monitorwait01 monitorwait01 platform\n- * @run main\/othervm\/native --enable-preview -agentlib:monitorwait01 monitorwait01 virtual\n+ * @compile monitorwait01.java\n+ * @run main\/othervm\/native -agentlib:monitorwait01 monitorwait01 platform\n+ * @run main\/othervm\/native -agentlib:monitorwait01 monitorwait01 virtual\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MonitorWait\/monitorwait01\/monitorwait01.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,3 +44,3 @@\n- * @compile --enable-preview -source ${jdk.version} monitorwaited01.java\n- * @run main\/othervm\/native --enable-preview -agentlib:monitorwaited01 monitorwaited01 platform\n- * @run main\/othervm\/native --enable-preview -agentlib:monitorwaited01 monitorwaited01 virtual\n+ * @compile monitorwaited01.java\n+ * @run main\/othervm\/native -agentlib:monitorwaited01 monitorwaited01 platform\n+ * @run main\/othervm\/native -agentlib:monitorwaited01 monitorwaited01 virtual\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MonitorWaited\/monitorwaited01\/monitorwaited01.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,2 +48,2 @@\n- * @compile --enable-preview -source ${jdk.version} singlestep01.java\n- * @run main\/othervm\/native --enable-preview -agentlib:singlestep01 singlestep01\n+ * @compile singlestep01.java\n+ * @run main\/othervm\/native -agentlib:singlestep01 singlestep01\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/SingleStep\/singlestep01\/singlestep01.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,3 +47,3 @@\n- * @compile --enable-preview -source ${jdk.version} singlestep03.java\n- * @run main\/othervm\/native --enable-preview -agentlib:singlestep03 singlestep03 platform\n- * @run main\/othervm\/native --enable-preview -agentlib:singlestep03 singlestep03 virtual\n+ * @compile singlestep03.java\n+ * @run main\/othervm\/native -agentlib:singlestep03 singlestep03 platform\n+ * @run main\/othervm\/native -agentlib:singlestep03 singlestep03 virtual\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/SingleStep\/singlestep03\/singlestep03.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @compile --enable-preview -source ${jdk.version} GetStackTraceNotSuspendedStressTest.java\n- * @run main\/othervm\/native --enable-preview -agentlib:GetStackTraceNotSuspendedStress GetStackTraceNotSuspendedStressTest\n+ * @compile GetStackTraceNotSuspendedStressTest.java\n+ * @run main\/othervm\/native -agentlib:GetStackTraceNotSuspendedStress GetStackTraceNotSuspendedStressTest\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/stress\/StackTrace\/NotSuspended\/GetStackTraceNotSuspendedStressTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @compile --enable-preview -source ${jdk.version} GetStackTraceSuspendedStressTest.java\n- * @run main\/othervm\/native --enable-preview -agentlib:GetStackTraceSuspendedStress GetStackTraceSuspendedStressTest\n+ * @compile GetStackTraceSuspendedStressTest.java\n+ * @run main\/othervm\/native -agentlib:GetStackTraceSuspendedStress GetStackTraceSuspendedStressTest\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/stress\/StackTrace\/Suspended\/GetStackTraceSuspendedStressTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,2 @@\n- * @compile --enable-preview -source ${jdk.version} SetGetThreadLocalStorageStressTest.java\n- * @run main\/othervm\/native --enable-preview -agentlib:SetGetThreadLocalStorageStress SetGetThreadLocalStorageStressTest\n+ * @compile SetGetThreadLocalStorageStressTest.java\n+ * @run main\/othervm\/native -agentlib:SetGetThreadLocalStorageStress SetGetThreadLocalStorageStressTest\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/stress\/ThreadLocalStorage\/SetGetThreadLocalStorageStressTest\/SetGetThreadLocalStorageStressTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,2 +41,2 @@\n- * @compile --enable-preview -source ${jdk.version} allthr01.java\n- * @run main\/othervm\/native --enable-preview -Djava.util.concurrent.ForkJoinPool.common.parallelism=1 -agentlib:allthr01 allthr01\n+ * @compile allthr01.java\n+ * @run main\/othervm\/native -Djava.util.concurrent.ForkJoinPool.common.parallelism=1 -agentlib:allthr01 allthr01\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetAllThreads\/allthr01\/allthr01.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,2 +63,2 @@\n- * @compile --enable-preview -source ${jdk.version} contmon01.java\n- * @run main\/othervm\/native --enable-preview -agentlib:contmon01 contmon01\n+ * @compile contmon01.java\n+ * @run main\/othervm\/native -agentlib:contmon01 contmon01\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetCurrentContendedMonitor\/contmon01\/contmon01.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,2 +44,2 @@\n- * @compile --enable-preview -source ${jdk.version} contmon02.java\n- * @run main\/othervm\/native --enable-preview -agentlib:contmon02 contmon02\n+ * @compile contmon02.java\n+ * @run main\/othervm\/native -agentlib:contmon02 contmon02\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetCurrentContendedMonitor\/contmon02\/contmon02.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,2 @@\n- * @compile --enable-preview -source ${jdk.version} framecnt01.java\n- * @run main\/othervm\/native --enable-preview -agentlib:framecnt01 framecnt01\n+ * @compile framecnt01.java\n+ * @run main\/othervm\/native -agentlib:framecnt01 framecnt01\n@@ -82,1 +82,1 @@\n-        checkFrames(vThread1, false, 15);\n+        checkFrames(vThread1, false, 14);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetFrameCount\/framecnt01\/framecnt01.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,2 @@\n- * @compile --enable-preview -source ${jdk.version} GetStackTraceCurrentThreadTest.java\n- * @run main\/othervm\/native --enable-preview -agentlib:GetStackTraceCurrentThreadTest GetStackTraceCurrentThreadTest\n+ * @compile GetStackTraceCurrentThreadTest.java\n+ * @run main\/othervm\/native -agentlib:GetStackTraceCurrentThreadTest GetStackTraceCurrentThreadTest\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetStackTrace\/GetStackTraceCurrentThreadTest\/GetStackTraceCurrentThreadTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,2 @@\n- * @compile --enable-preview -source ${jdk.version} getstacktr03.java\n- * @run main\/othervm\/native --enable-preview -agentlib:getstacktr03 getstacktr03\n+ * @compile getstacktr03.java\n+ * @run main\/othervm\/native -agentlib:getstacktr03 getstacktr03\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetStackTrace\/getstacktr03\/getstacktr03.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -49,2 +49,1 @@\n-    {\"Ljava\/lang\/VirtualThread$VThreadContinuation;\", \"lambda$new$0\", \"(Ljava\/lang\/VirtualThread;Ljava\/lang\/Runnable;)V\"},\n-    {\"Ljava\/lang\/VirtualThread$VThreadContinuation$$Lambda.0x0000000800098810;\", \"run\", \"()V\"},\n+    {\"Ljava\/lang\/VirtualThread$VThreadContinuation$1;\", \"run\", \"()V\"},\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetStackTrace\/getstacktr03\/libgetstacktr03.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,2 +40,2 @@\n- * @compile --enable-preview -source ${jdk.version} getstacktr04.java\n- * @run main\/othervm\/native --enable-preview -agentlib:getstacktr04 getstacktr04\n+ * @compile getstacktr04.java\n+ * @run main\/othervm\/native -agentlib:getstacktr04 getstacktr04\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetStackTrace\/getstacktr04\/getstacktr04.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,2 @@\n- * @compile --enable-preview -source ${jdk.version} getstacktr05.java\n- * @run main\/othervm\/native --enable-preview -agentlib:getstacktr05 getstacktr05\n+ * @compile getstacktr05.java\n+ * @run main\/othervm\/native -agentlib:getstacktr05 getstacktr05\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetStackTrace\/getstacktr05\/getstacktr05.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,2 +54,1 @@\n-    {\"Ljava\/lang\/VirtualThread$VThreadContinuation;\", \"lambda$new$0\", \"(Ljava\/lang\/VirtualThread;Ljava\/lang\/Runnable;)V\"},\n-    {\"Ljava\/lang\/VirtualThread$VThreadContinuation$$Lambda;\", \"run\", \"()V\"},\n+    {\"Ljava\/lang\/VirtualThread$VThreadContinuation$1;\", \"run\", \"()V\"},\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetStackTrace\/getstacktr05\/libgetstacktr05.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,2 @@\n- * @compile --enable-preview -source ${jdk.version} getstacktr06.java\n- * @run main\/othervm\/native --enable-preview -agentlib:getstacktr06 getstacktr06\n+ * @compile getstacktr06.java\n+ * @run main\/othervm\/native -agentlib:getstacktr06 getstacktr06\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetStackTrace\/getstacktr06\/getstacktr06.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,2 @@\n- * @compile --enable-preview -source ${jdk.version} getstacktr07.java\n- * @run main\/othervm\/native --enable-preview -agentlib:getstacktr07 getstacktr07\n+ * @compile getstacktr07.java\n+ * @run main\/othervm\/native -agentlib:getstacktr07 getstacktr07\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetStackTrace\/getstacktr07\/getstacktr07.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,2 +49,2 @@\n- * @compile --enable-preview -source ${jdk.version} getstacktr08.java\n- * @run main\/othervm\/native --enable-preview -agentlib:getstacktr08 getstacktr08\n+ * @compile getstacktr08.java\n+ * @run main\/othervm\/native -agentlib:getstacktr08 getstacktr08\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetStackTrace\/getstacktr08\/getstacktr08.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,2 +45,2 @@\n- * @compile --enable-preview -source ${jdk.version} thrinfo01.java\n- * @run main\/othervm\/native --enable-preview -agentlib:thrinfo01 thrinfo01\n+ * @compile thrinfo01.java\n+ * @run main\/othervm\/native -agentlib:thrinfo01 thrinfo01\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetThreadInfo\/thrinfo01\/thrinfo01.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,2 +76,2 @@\n- * @compile --enable-preview -source ${jdk.version} thrstat01.java\n- * @run main\/othervm\/native --enable-preview -agentlib:thrstat01 thrstat01\n+ * @compile thrstat01.java\n+ * @run main\/othervm\/native -agentlib:thrstat01 thrstat01\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetThreadState\/thrstat01\/thrstat01.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,2 @@\n- * @compile --enable-preview -source ${jdk.version} thrstat03.java\n- * @run main\/othervm\/native --enable-preview  -agentlib:thrstat03 thrstat03 5\n+ * @compile thrstat03.java\n+ * @run main\/othervm\/native  -agentlib:thrstat03 thrstat03 5\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetThreadState\/thrstat03\/thrstat03.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,2 +59,2 @@\n- * @compile --enable-preview -source ${jdk.version} thrstat05.java\n- * @run main\/othervm\/native --enable-preview -agentlib:thrstat05 thrstat05\n+ * @compile thrstat05.java\n+ * @run main\/othervm\/native -agentlib:thrstat05 thrstat05\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetThreadState\/thrstat05\/thrstat05.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @enablePreview\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/BoundVThreadTest\/BoundVThreadTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @compile --enable-preview -source ${jdk.version} BreakpointInYieldTest.java\n- * @run main\/othervm\/native --enable-preview -agentlib:BreakpointInYieldTest -Djdk.defaultScheduler.parallelism=2 BreakpointInYieldTest\n+ * @compile BreakpointInYieldTest.java\n+ * @run main\/othervm\/native -agentlib:BreakpointInYieldTest -Djdk.defaultScheduler.parallelism=2 BreakpointInYieldTest\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/BreakpointInYieldTest\/BreakpointInYieldTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run main\/othervm\/native --enable-preview -agentlib:ContFramePopTest ContFramePopTest\n+ * @run main\/othervm\/native -agentlib:ContFramePopTest ContFramePopTest\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/ContFramePopTest\/ContFramePopTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run main\/othervm\/native --enable-preview -agentlib:ContStackDepthTest ContStackDepthTest\n+ * @run main\/othervm\/native -agentlib:ContStackDepthTest ContStackDepthTest\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/ContStackDepthTest\/ContStackDepthTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run main\/othervm\/native --enable-preview -agentlib:ContYieldBreakPointTest ContYieldBreakPointTest\n+ * @run main\/othervm\/native -agentlib:ContYieldBreakPointTest ContYieldBreakPointTest\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/ContYieldBreakPointTest\/ContYieldBreakPointTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run main\/othervm\/native --enable-preview -agentlib:ContinuationTest ContinuationTest\n+ * @run main\/othervm\/native -agentlib:ContinuationTest ContinuationTest\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/ContinuationTest\/ContinuationTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,2 @@\n- * @compile --enable-preview -source ${jdk.version} GetSetLocalTest.java\n- * @run main\/othervm\/native --enable-preview -agentlib:GetSetLocalTest GetSetLocalTest\n+ * @compile GetSetLocalTest.java\n+ * @run main\/othervm\/native -agentlib:GetSetLocalTest GetSetLocalTest\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/GetSetLocalTest\/GetSetLocalTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,2 @@\n- * @compile --enable-preview -source ${jdk.version} InterruptThreadTest.java\n- * @run main\/othervm\/native --enable-preview -agentlib:InterruptThreadTest InterruptThreadTest\n+ * @compile InterruptThreadTest.java\n+ * @run main\/othervm\/native -agentlib:InterruptThreadTest InterruptThreadTest\n@@ -34,2 +34,2 @@\n- * @compile --enable-preview -source ${jdk.version} InterruptThreadTest.java\n- * @run main\/othervm\/native --enable-preview -agentlib:InterruptThreadTest -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations InterruptThreadTest\n+ * @compile InterruptThreadTest.java\n+ * @run main\/othervm\/native -agentlib:InterruptThreadTest -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations InterruptThreadTest\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/InterruptThreadTest\/InterruptThreadTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @compile --enable-preview -source ${jdk.version} MethodExitTest.java\n- * @run main\/othervm\/native --enable-preview -agentlib:MethodExitTest -Djdk.defaultScheduler.parallelism=2 MethodExitTest 150\n+ * @compile MethodExitTest.java\n+ * @run main\/othervm\/native -agentlib:MethodExitTest -Djdk.defaultScheduler.parallelism=2 MethodExitTest 150\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/MethodExitTest\/MethodExitTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,2 @@\n- * @compile --enable-preview -source ${jdk.version} NullAsCurrentThreadTest.java\n- * @run main\/othervm\/native --enable-preview -agentlib:NullAsCurrentThreadTest=EnableVirtualThreadSupport NullAsCurrentThreadTest\n+ * @compile NullAsCurrentThreadTest.java\n+ * @run main\/othervm\/native -agentlib:NullAsCurrentThreadTest=EnableVirtualThreadSupport NullAsCurrentThreadTest\n@@ -34,2 +34,2 @@\n- * @compile --enable-preview -source ${jdk.version} NullAsCurrentThreadTest.java\n- * @run main\/othervm\/native --enable-preview -agentlib:NullAsCurrentThreadTest=EnableVirtualThreadSupport -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations NullAsCurrentThreadTest\n+ * @compile NullAsCurrentThreadTest.java\n+ * @run main\/othervm\/native -agentlib:NullAsCurrentThreadTest=EnableVirtualThreadSupport -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations NullAsCurrentThreadTest\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/NullAsCurrentThreadTest\/NullAsCurrentThreadTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,2 @@\n- * @compile --enable-preview -source ${jdk.version} PinnedTaskTest.java\n- * @run main\/othervm\/native --enable-preview -agentlib:PinnedTaskTest PinnedTaskTest\n+ * @compile PinnedTaskTest.java\n+ * @run main\/othervm\/native -agentlib:PinnedTaskTest PinnedTaskTest\n@@ -34,2 +34,2 @@\n- * @compile --enable-preview -source ${jdk.version} PinnedTaskTest.java\n- * @run main\/othervm\/native --enable-preview -agentlib:PinnedTaskTest -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations PinnedTaskTest\n+ * @compile PinnedTaskTest.java\n+ * @run main\/othervm\/native -agentlib:PinnedTaskTest -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations PinnedTaskTest\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/PinnedTaskTest\/PinnedTaskTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @compile --enable-preview -source ${jdk.version} RawMonitorTest.java\n- * @run main\/othervm\/native --enable-preview -agentlib:RawMonitorTest RawMonitorTest\n+ * @compile RawMonitorTest.java\n+ * @run main\/othervm\/native -agentlib:RawMonitorTest RawMonitorTest\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/RawMonitorTest\/RawMonitorTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- * @run main\/othervm\/timeout=180 -Xint --enable-preview -javaagent:redefineagent.jar\n+ * @run main\/othervm\/timeout=180 -Xint -javaagent:redefineagent.jar\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/RedefineClasses\/RedefineRunningMethods.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @compile --enable-preview -source ${jdk.version} SelfSuspendDisablerTest.java\n- * @run main\/othervm\/native --enable-preview -agentlib:SelfSuspendDisablerTest SelfSuspendDisablerTest\n+ * @compile SelfSuspendDisablerTest.java\n+ * @run main\/othervm\/native -agentlib:SelfSuspendDisablerTest SelfSuspendDisablerTest\n@@ -36,2 +36,2 @@\n- * @compile --enable-preview -source ${jdk.version} SelfSuspendDisablerTest.java\n- * @run main\/othervm\/native --enable-preview -agentlib:SelfSuspendDisablerTest -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations SelfSuspendDisablerTest\n+ * @compile SelfSuspendDisablerTest.java\n+ * @run main\/othervm\/native -agentlib:SelfSuspendDisablerTest -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations SelfSuspendDisablerTest\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/SelfSuspendDisablerTest\/SelfSuspendDisablerTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @compile --enable-preview -source ${jdk.version} SuspendResume1.java\n+ * @compile SuspendResume1.java\n@@ -32,1 +32,0 @@\n- *      --enable-preview\n@@ -42,1 +41,1 @@\n- * @compile --enable-preview -source ${jdk.version} SuspendResume1.java\n+ * @compile SuspendResume1.java\n@@ -45,1 +44,0 @@\n- *      --enable-preview\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/SuspendResume1\/SuspendResume1.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @compile --enable-preview -source ${jdk.version} SuspendResume2.java\n+ * @compile SuspendResume2.java\n@@ -31,1 +31,0 @@\n- *      --enable-preview\n@@ -41,1 +40,1 @@\n- * @compile --enable-preview -source ${jdk.version} SuspendResume2.java\n+ * @compile SuspendResume2.java\n@@ -44,1 +43,0 @@\n- *      --enable-preview\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/SuspendResume2\/SuspendResume2.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @compile --enable-preview -source ${jdk.version} SuspendResumeAll.java\n+ * @compile SuspendResumeAll.java\n@@ -31,1 +31,0 @@\n- *      --enable-preview\n@@ -41,1 +40,1 @@\n- * @compile --enable-preview -source ${jdk.version} SuspendResumeAll.java\n+ * @compile SuspendResumeAll.java\n@@ -44,1 +43,0 @@\n- *      --enable-preview\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/SuspendResumeAll\/SuspendResumeAll.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,2 @@\n- * @compile --enable-preview -source ${jdk.version} VThreadMonitorTest.java\n- * @run main\/othervm\/native --enable-preview -agentlib:VThreadMonitorTest VThreadMonitorTest\n+ * @compile VThreadMonitorTest.java\n+ * @run main\/othervm\/native -agentlib:VThreadMonitorTest VThreadMonitorTest\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VThreadMonitorTest\/VThreadMonitorTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -40,1 +39,0 @@\n- * @enablePreview\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VThreadNotifyFramePopTest\/VThreadNotifyFramePopTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @compile --enable-preview -source ${jdk.version} VThreadTest.java\n- * @run main\/othervm\/native --enable-preview -agentlib:VThreadTest VThreadTest\n+ * @compile VThreadTest.java\n+ * @run main\/othervm\/native -agentlib:VThreadTest VThreadTest\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VThreadTest\/VThreadTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @compile --enable-preview -source ${jdk.version} VThreadUnsupportedTest.java\n- * @run main\/othervm\/native --enable-preview -agentlib:VThreadUnsupportedTest VThreadUnsupportedTest\n+ * @compile VThreadUnsupportedTest.java\n+ * @run main\/othervm\/native -agentlib:VThreadUnsupportedTest VThreadUnsupportedTest\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VThreadUnsupportedTest\/VThreadUnsupportedTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -36,1 +35,0 @@\n- * @enablePreview\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VirtualStackTraceTest\/VirtualStackTraceTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -38,1 +37,0 @@\n- * @enablePreview\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VirtualThreadStartTest\/VirtualThreadStartTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n- * @compile --enable-preview -source ${jdk.version} WaitNotifySuspendedVThreadTest.java\n+ * @compile WaitNotifySuspendedVThreadTest.java\n@@ -46,1 +46,0 @@\n- *     --enable-preview\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/WaitNotifySuspendedVThreadTest\/WaitNotifySuspendedVThreadTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @compile --enable-preview -source ${jdk.version} AgentWithVThread.java AgentWithVThreadTest.java\n+ * @compile AgentWithVThread.java AgentWithVThreadTest.java\n@@ -40,1 +40,1 @@\n-        ProcessBuilder pb = ProcessTools.createTestJvm(\"--enable-preview\", \"-javaagent:agent.jar\",  \"-version\");\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\"-javaagent:agent.jar\",  \"-version\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/premain\/AgentWithVThreadTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n- *      --enable-preview\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/RedefineClasses\/StressRedefineVirtual\/StressRedefineVirtual.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -168,2 +168,0 @@\n-                \/* Need --enable-preview on the debuggee in order to support virtual threads. *\/\n-                args.add(\"-R--enable-preview\");\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdb\/Launcher.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -756,2 +756,0 @@\n-            \/* Need --enable-preview on the debuggee in order to support virtual threads. *\/\n-            vmArgs += \" --enable-preview\";\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdi\/Binder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -316,6 +316,0 @@\n-        \/* Need --enable-preview on the debuggee in order to support virtual threads. *\/\n-        boolean vthreadMode = \"Virtual\".equals(System.getProperty(\"main.wrapper\"));\n-        if (vthreadMode) {\n-            args.add(\"--enable-preview\");\n-        }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jpda\/DebugeeBinder.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -273,1 +273,2 @@\n-    com\/sun\/management\/HotSpotDiagnosticMXBean\/ \\\n+    com\/sun\/management\/HotSpotDiagnosticMXBean \\\n+    com\/sun\/management\/ThreadMXBean \\\n","filename":"test\/jdk\/TEST.groups","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -38,1 +37,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/com\/sun\/jdi\/SuspendAfterDeath.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -980,1 +980,1 @@\n-            threadFactory = r -> newVirtualThread(r);\n+            threadFactory = Thread.ofVirtual().factory();\n@@ -983,1 +983,1 @@\n-            Thread vthread = newVirtualThread(() -> {\n+            Thread vthread = Thread.ofVirtual().unstarted(() -> {\n@@ -1032,14 +1032,0 @@\n-    \/\/ Need to use reflection while virtual threads --enable-preview feature\n-    private static Thread newVirtualThread(Runnable task) {\n-        try {\n-            Object builder = Thread.class.getMethod(\"ofVirtual\").invoke(null);\n-            Class<?> clazz = Class.forName(\"java.lang.Thread$Builder\");\n-            java.lang.reflect.Method unstarted = clazz.getMethod(\"unstarted\", Runnable.class);\n-            return (Thread) unstarted.invoke(builder, task);\n-        } catch (RuntimeException | Error e) {\n-            throw e;\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n","filename":"test\/jdk\/com\/sun\/jdi\/TestScaffold.java","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/com\/sun\/management\/HotSpotDiagnosticMXBean\/DumpThreads.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -36,1 +35,0 @@\n- * @enablePreview\n@@ -119,1 +117,5 @@\n-            assertTrue(allocated[0] >= 0L);\n+            if (Thread.currentThread().isVirtual()) {\n+                assertEquals(-1L, allocated[0]);\n+            } else {\n+                assertTrue(allocated[0] >= 0L);\n+            }\n@@ -141,1 +143,5 @@\n-            assertTrue(cpuTimes[0] >= 0L);\n+            if (Thread.currentThread().isVirtual()) {\n+                assertEquals(-1L, cpuTimes[0]);\n+            } else {\n+                assertTrue(cpuTimes[0] >= 0L);\n+            }\n@@ -163,1 +169,5 @@\n-            assertTrue(userTimes[0] >= 0L);\n+            if (Thread.currentThread().isVirtual()) {\n+                assertEquals(-1L, userTimes[0]);\n+            } else {\n+                assertTrue(userTimes[0] >= 0L);\n+            }\n","filename":"test\/jdk\/com\/sun\/management\/ThreadMXBean\/VirtualThreads.java","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @enablePreview\n@@ -576,30 +575,0 @@\n-    \/**\n-     * Test Thread.Builder creating threads that disallow or allow\n-     * thread locals.\n-     *\/\n-    @Test\n-    void testThreadLocals3() throws Exception {\n-        Thread.Builder builder = Thread.ofPlatform();\n-\n-        \/\/ disallow\n-        builder.allowSetThreadLocals(false);\n-        testNoThreadLocals(builder);\n-\n-        \/\/ allow\n-        builder.allowSetThreadLocals(true);\n-        testThreadLocals(builder);\n-    }\n-\n-    @Test\n-    void testThreadLocals4() throws Exception {\n-        Thread.Builder builder = Thread.ofVirtual();\n-\n-        \/\/ disallow\n-        builder.allowSetThreadLocals(false);\n-        testNoThreadLocals(builder);\n-\n-        \/\/ allow\n-        builder.allowSetThreadLocals(true);\n-        testThreadLocals(builder);\n-    }\n-\n@@ -702,40 +671,0 @@\n-    @Test\n-    void testInheritedThreadLocals3() throws Exception {\n-        Thread.Builder builder = Thread.ofPlatform();\n-\n-        \/\/ thread locals not allowed\n-        builder.allowSetThreadLocals(false);\n-        testNoInheritedThreadLocals(builder);\n-        builder.inheritInheritableThreadLocals(false);\n-        testNoInheritedThreadLocals(builder);\n-        builder.inheritInheritableThreadLocals(true);\n-        testNoInheritedThreadLocals(builder);\n-\n-        \/\/ thread locals allowed\n-        builder.allowSetThreadLocals(true);\n-        builder.inheritInheritableThreadLocals(false);\n-        testNoInheritedThreadLocals(builder);\n-        builder.inheritInheritableThreadLocals(true);\n-        testInheritedThreadLocals(builder);\n-    }\n-\n-    @Test\n-    void testInheritedThreadLocals4() throws Exception {\n-        Thread.Builder builder = Thread.ofVirtual();\n-\n-        \/\/ thread locals not allowed\n-        builder.allowSetThreadLocals(false);\n-        testNoInheritedThreadLocals(builder);\n-        builder.inheritInheritableThreadLocals(false);\n-        testNoInheritedThreadLocals(builder);\n-        builder.inheritInheritableThreadLocals(true);\n-        testNoInheritedThreadLocals(builder);\n-\n-        \/\/ thread locals allowed\n-        builder.allowSetThreadLocals(true);\n-        builder.inheritInheritableThreadLocals(false);\n-        testNoInheritedThreadLocals(builder);\n-        builder.inheritInheritableThreadLocals(true);\n-        testInheritedThreadLocals(builder);\n-    }\n-\n@@ -853,40 +782,0 @@\n-    @Test\n-    void testContextClassLoader3() throws Exception {\n-        Thread.Builder builder = Thread.ofPlatform();\n-\n-        \/\/ thread locals not allowed\n-        builder.allowSetThreadLocals(false);\n-        testNoInheritContextClassLoader(builder);\n-        builder.inheritInheritableThreadLocals(false);\n-        testNoInheritContextClassLoader(builder);\n-        builder.inheritInheritableThreadLocals(true);\n-        testNoInheritContextClassLoader(builder);\n-\n-        \/\/ thread locals allowed\n-        builder.allowSetThreadLocals(true);\n-        builder.inheritInheritableThreadLocals(false);\n-        testNoInheritContextClassLoader(builder);\n-        builder.inheritInheritableThreadLocals(true);\n-        testInheritContextClassLoader(builder);\n-    }\n-\n-    @Test\n-    void testContextClassLoader4() throws Exception {\n-        Thread.Builder builder = Thread.ofVirtual();\n-\n-        \/\/ thread locals not allowed\n-        builder.allowSetThreadLocals(false);\n-        testNoInheritContextClassLoader(builder);\n-        builder.inheritInheritableThreadLocals(false);\n-        testNoInheritContextClassLoader(builder);\n-        builder.inheritInheritableThreadLocals(true);\n-        testNoInheritContextClassLoader(builder);\n-\n-        \/\/ thread locals allowed\n-        builder.allowSetThreadLocals(true);\n-        builder.inheritInheritableThreadLocals(false);\n-        testNoInheritContextClassLoader(builder);\n-        builder.inheritInheritableThreadLocals(true);\n-        testInheritContextClassLoader(builder);\n-    }\n-\n","filename":"test\/jdk\/java\/lang\/Thread\/BuilderTest.java","additions":0,"deletions":111,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Test Thread.sleep when emitting the JFR ThreadSleepEvent throws OOME\n+ * @modules java.base\/jdk.internal.event\n+ * @compile\/module=java.base jdk\/internal\/event\/ThreadSleepEvent.java\n+ * @run junit ThreadSleepEventThrows\n+ *\/\n+\n+import jdk.internal.event.ThreadSleepEvent;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class ThreadSleepEventThrows {\n+\n+    \/**\n+     * Test Thread.sleep when creating the ThreadSleepEvent fails with OOME.\n+     *\/\n+    @Test\n+    void testThreadSleepEventCreateThrows() throws Exception {\n+        ThreadSleepEvent.setCreateThrows(true);\n+        try {\n+            testSleep();\n+        } finally {\n+            ThreadSleepEvent.setCreateThrows(false);\n+        }\n+    }\n+\n+    \/**\n+     * Test Thread.sleep when ThreadSleepEvent.begin fails with OOME.\n+     *\/\n+    @Test\n+    void testThreadSleepEventBeginThrows() throws Exception {\n+        ThreadSleepEvent.setBeginThrows(true);\n+        try {\n+            testSleep();\n+        } finally {\n+            ThreadSleepEvent.setBeginThrows(false);\n+        }\n+    }\n+\n+    \/**\n+     * Test Thread.sleep when ThreadSleepEvent.commit fails with OOME.\n+     *\/\n+    @Test\n+    void testThreadSleepEventCommitThrows() throws Exception {\n+        ThreadSleepEvent.setCommitThrows(true);\n+        try {\n+            testSleep();\n+        } finally {\n+            ThreadSleepEvent.setCommitThrows(false);\n+        }\n+    }\n+\n+    \/**\n+     * Test Thread.sleep takes a minimum duration and doesn't throw.\n+     *\/\n+    private void testSleep() throws Exception {\n+        long start = currentTimeMillis();\n+        Thread.sleep(SLEEP_TIME);\n+        long duration = currentTimeMillis() - start;\n+        assertTrue(duration >= MIN_EXPECTED_DURATION,\n+            \"Duration \" + duration + \"ms, expected >= \" + MIN_EXPECTED_DURATION + \"ms\");\n+    }\n+\n+    private static final int SLEEP_TIME = 2000;\n+    private static final int MIN_EXPECTED_DURATION = 1900;\n+\n+    private static long currentTimeMillis() {\n+        return NANOSECONDS.toMillis(System.nanoTime());\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/ThreadSleepEventThrows.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.event;\n+\n+\/**\n+ * ThreadSleepEvent to optionally throw OOME at create, begin or commit time.\n+ *\/\n+public class ThreadSleepEvent {\n+    private static boolean throwOnCreate;\n+    private static boolean throwOnBegin;\n+    private static boolean throwOnCommit;\n+\n+    public long time;\n+\n+    public static boolean isTurnedOn() {\n+        return true;\n+    }\n+\n+    public static void setCreateThrows(boolean value) {\n+        throwOnCreate = value;\n+    }\n+\n+    public static void setBeginThrows(boolean value) {\n+        throwOnBegin = value;\n+    }\n+\n+    public static void setCommitThrows(boolean value) {\n+        throwOnCommit = value;\n+    }\n+\n+    public ThreadSleepEvent() {\n+        if (throwOnCreate) {\n+            throw new OutOfMemoryError();\n+        }\n+    }\n+\n+    public void begin() {\n+        if (throwOnBegin) {\n+            throw new OutOfMemoryError();\n+        }\n+    }\n+\n+    public void commit() {\n+        if (throwOnCommit) {\n+            throw new OutOfMemoryError();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/java.base\/jdk\/internal\/event\/ThreadSleepEvent.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @enablePreview\n@@ -34,1 +33,1 @@\n- *     -Djdk.virtualThreadScheduler.maxPoolSize=2 ActiviateSpareCarrier 100\n+ *     -Djdk.virtualThreadScheduler.maxPoolSize=2 ActivateSpareCarrier 100\n@@ -43,1 +42,1 @@\n-public class ActiviateSpareCarrier {\n+public class ActivateSpareCarrier {\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/ActivateSpareCarrier.java","additions":3,"deletions":4,"binary":false,"changes":7,"previous_filename":"test\/jdk\/java\/lang\/Thread\/virtual\/ActiviateSpareCarrier.java","status":"renamed"},{"patch":"@@ -27,1 +27,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/Collectable.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/CustomScheduler.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -31,1 +30,1 @@\n- * @run main GetStackTrace\n+ * @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames GetStackTrace\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/GetStackTrace.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/GetStackTraceWhenRunnable.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -38,1 +37,0 @@\n- * @enablePreview\n@@ -58,0 +56,1 @@\n+import static org.junit.jupiter.api.Assumptions.*;\n@@ -91,0 +90,2 @@\n+        assumeFalse(Thread.currentThread().isVirtual(), \"Main thread must be platform thread\");\n+\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/HoldsLock.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/JfrEvents.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/Locking.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/ParkWithFixedThreadPool.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/Parking.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,112 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @summary Test that preview APIs throws exception when preview features not enabled\n- * @run junit\/othervm PreviewFeaturesNotEnabled\n- *\/\n-\n-import java.lang.reflect.Method;\n-import java.lang.reflect.InvocationTargetException;\n-import java.util.concurrent.Executors;\n-\n-import org.junit.jupiter.api.Test;\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-class PreviewFeaturesNotEnabled {\n-\n-    \/**\n-     * Thread.ofVirtual should fail with UOE.\n-     *\/\n-    @Test\n-    void testOfVirtual() throws Exception {\n-        Method ofVirtual = Thread.class.getDeclaredMethod(\"ofVirtual\");\n-        var exc = assertThrows(InvocationTargetException.class, () -> ofVirtual.invoke(null));\n-        assertTrue(exc.getCause() instanceof UnsupportedOperationException);\n-    }\n-\n-    \/**\n-     * Thread.startVirtualThread should fail with UOE.\n-     *\/\n-    @Test\n-    void testStartVirutalThread() throws Exception {\n-        Method startVirtualThread = Thread.class.getMethod(\"startVirtualThread\", Runnable.class);\n-        Runnable task = () -> { };\n-        var exc = assertThrows(InvocationTargetException.class,\n-                () -> startVirtualThread.invoke(null, task));\n-        assertTrue(exc.getCause() instanceof UnsupportedOperationException);\n-    }\n-\n-    \/**\n-     * Executors.newVirtualThreadPerTaskExecutor should fail with UOE.\n-     *\/\n-    @Test\n-    void testNewVirtualThreadPerTaskExecutor() throws Exception {\n-        Method newVirtualThreadPerTaskExecutor = Executors.class.getMethod(\"newVirtualThreadPerTaskExecutor\");\n-        var exc = assertThrows(InvocationTargetException.class,\n-                () -> newVirtualThreadPerTaskExecutor.invoke(null));\n-        assertTrue(exc.getCause() instanceof UnsupportedOperationException);\n-    }\n-\n-    \/**\n-     * Directly accessing internal Continuation class should fail with UOE.\n-     *\/\n-    @Test\n-    void testContinuationInitializer() throws Exception {\n-        var exc = assertThrows(ExceptionInInitializerError.class,\n-                () -> Class.forName(\"jdk.internal.vm.Continuation\"));\n-        assertTrue(exc.getCause() instanceof UnsupportedOperationException);\n-    }\n-\n-    \/**\n-     * Thread.isVirtual should not fail.\n-     *\/\n-    @Test\n-    void testIsVirtual() throws Exception {\n-        boolean isVirtual = isVirtual(Thread.currentThread());\n-        assertFalse(isVirtual);\n-    }\n-\n-    \/**\n-     * Thread.ofPlatform should not fail.\n-     *\/\n-    @Test\n-    void testOfPlatform() throws Exception {\n-        Method ofPlatform = Thread.class.getDeclaredMethod(\"ofPlatform\");\n-        Object builder = ofPlatform.invoke(null);\n-        Method startMethod = Class.forName(\"java.lang.Thread$Builder\")\n-                .getMethod(\"start\", Runnable.class);\n-        Runnable task = () -> { };\n-        Thread thread = (Thread) startMethod.invoke(builder, task);\n-    }\n-\n-    \/**\n-     * Invokes Thread::isVirtual reflectively to test if the given thread is a\n-     * virtual thread.\n-     *\/\n-    private static boolean isVirtual(Thread thread) throws Exception {\n-        Method isVirtualMethod = Thread.class.getDeclaredMethod(\"isVirtual\");\n-        return (boolean) isVirtualMethod.invoke(thread);\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/PreviewFeaturesNotEnabled.java","additions":0,"deletions":112,"binary":false,"changes":112,"status":"deleted"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/Reflection.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -40,1 +39,1 @@\n-            ProcessBuilder pb = createTestJvm(\"--enable-preview\", \"ShutdownHook\");\n+            ProcessBuilder pb = createTestJvm(\"ShutdownHook\");\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/ShutdownHook.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/StackTraces.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -37,1 +36,0 @@\n- * @enablePreview\n@@ -1250,1 +1248,1 @@\n-            expectDuration(start, \/*min*\/900, \/*max*\/4000);\n+            expectDuration(start, \/*min*\/900, \/*max*\/20_000);\n@@ -1340,1 +1338,1 @@\n-            expectDuration(start, \/*min*\/900, \/*max*\/4000);\n+            expectDuration(start, \/*min*\/900, \/*max*\/20_000);\n@@ -1357,1 +1355,1 @@\n-                expectDuration(start, \/*min*\/900, \/*max*\/4000);\n+                expectDuration(start, \/*min*\/900, \/*max*\/20_000);\n@@ -1385,1 +1383,1 @@\n-            expectDuration(start, \/*min*\/900, \/*max*\/4000);\n+            expectDuration(start, \/*min*\/900, \/*max*\/20_000);\n@@ -1528,16 +1526,0 @@\n-    \/**\n-     * Test Thread.xxxContextClassLoader when thread locals not supported.\n-     *\/\n-    @Test\n-    void testContextClassLoader5() throws Exception {\n-        ClassLoader scl = ClassLoader.getSystemClassLoader();\n-        ClassLoader loader = new ClassLoader() { };\n-        VThreadRunner.run(VThreadRunner.NO_THREAD_LOCALS, () -> {\n-            Thread t = Thread.currentThread();\n-            assertTrue(t.getContextClassLoader() == scl);\n-            assertThrows(UnsupportedOperationException.class,\n-                         () -> t.setContextClassLoader(loader));\n-            assertTrue(t.getContextClassLoader() == scl);\n-        });\n-    }\n-\n@@ -1549,1 +1531,1 @@\n-    void testContextClassLoader6() throws Exception {\n+    void testContextClassLoader5() throws Exception {\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/ThreadAPI.java","additions":5,"deletions":23,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -69,42 +68,0 @@\n-    \/**\n-     * Test Thread that cannot set values for its copy of thread-locals.\n-     *\/\n-    @Test\n-    void testThreadLocal3() throws Exception {\n-        Object INITIAL_VALUE = new Object();\n-        ThreadLocal<Object> LOCAL2 = new ThreadLocal<>() {\n-            @Override\n-            protected Object initialValue() {\n-                return INITIAL_VALUE;\n-            }\n-        };\n-        ThreadLocal<Object> INHERITED_LOCAL2 = new InheritableThreadLocal<>()  {\n-            @Override\n-            protected Object initialValue() {\n-                return INITIAL_VALUE;\n-            }\n-        };\n-\n-        VThreadRunner.run(VThreadRunner.NO_THREAD_LOCALS, () -> {\n-            assertThrows(UnsupportedOperationException.class, () -> LOCAL.set(null));\n-            assertThrows(UnsupportedOperationException.class, () -> LOCAL.set(new Object()));\n-            assertNull(LOCAL.get());\n-            LOCAL.remove();  \/\/ should not throw\n-\n-            assertThrows(UnsupportedOperationException.class, () -> LOCAL2.set(null));\n-            assertThrows(UnsupportedOperationException.class, () -> LOCAL2.set(new Object()));\n-            assertTrue(LOCAL2.get() == INITIAL_VALUE);\n-            LOCAL2.remove();  \/\/ should not throw\n-\n-            assertThrows(UnsupportedOperationException.class, () -> INHERITED_LOCAL.set(null));\n-            assertThrows(UnsupportedOperationException.class, () -> INHERITED_LOCAL.set(new Object()));\n-            assertNull(INHERITED_LOCAL.get());\n-            INHERITED_LOCAL.remove();  \/\/ should not throw\n-\n-            assertThrows(UnsupportedOperationException.class, () -> INHERITED_LOCAL2.set(null));\n-            assertThrows(UnsupportedOperationException.class, () -> INHERITED_LOCAL2.set(new Object()));\n-            assertTrue(INHERITED_LOCAL2.get() == INITIAL_VALUE);\n-            INHERITED_LOCAL2.remove();  \/\/ should not throw\n-        });\n-    }\n-\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/ThreadLocals.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/TracePinnedThreads.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Test diagnostic option for detecting a virtual thread using thread locals\n+ * @library \/test\/lib\n+ * @run junit\/othervm -Djdk.traceVirtualThreadLocals TraceVirtualThreadLocals\n+ * @run junit\/othervm -Djdk.traceVirtualThreadLocals=true TraceVirtualThreadLocals\n+ *\/\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+\n+import jdk.test.lib.thread.VThreadRunner;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class TraceVirtualThreadLocals {\n+\n+    @Test\n+    void testInitialValue() throws Exception {\n+        String output = run(() -> {\n+            ThreadLocal<String> name = new ThreadLocal<>() {\n+                @Override\n+                protected String initialValue() {\n+                    return \"<unnamed>\";\n+                }\n+            };\n+            name.get();\n+        });\n+        assertContains(output, \"java.lang.ThreadLocal.get\");\n+    }\n+\n+    @Test\n+    void testSet() throws Exception {\n+        String output = run(() -> {\n+            ThreadLocal<String> name = new ThreadLocal<>();\n+            name.set(\"duke\");\n+        });\n+        assertContains(output, \"java.lang.ThreadLocal.set\");\n+    }\n+\n+    \/**\n+     * Runs a task in a virutal thread, returning a String with any output printed\n+     * to standard output.\n+     *\/\n+    private static String run(Runnable task) throws Exception {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        PrintStream original = System.out;\n+        System.setOut(new PrintStream(baos, true));\n+        try {\n+            VThreadRunner.run(task::run);\n+        } finally {\n+            System.setOut(original);\n+        }\n+        String output = new String(baos.toByteArray());\n+        System.out.println(output);\n+        return output;\n+    }\n+\n+    \/**\n+     * Tests that s1 contains s2.\n+     *\/\n+    private static void assertContains(String s1, String s2) {\n+        assertTrue(s1.contains(s2), s2 + \" not found!!!\");\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/TraceVirtualThreadLocals.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Test parking when pinned and emitting the JFR VirtualThreadPinnedEvent throws\n+ * @modules java.base\/jdk.internal.event\n+ * @compile\/module=java.base jdk\/internal\/event\/VirtualThreadPinnedEvent.java\n+ * @run junit VirtualThreadPinnedEventThrows\n+ *\/\n+\n+import java.lang.ref.Reference;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.LockSupport;\n+import jdk.internal.event.VirtualThreadPinnedEvent;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class VirtualThreadPinnedEventThrows {\n+\n+    \/**\n+     * Test parking when pinned and creating the VirtualThreadPinnedEvent fails with OOME.\n+     *\/\n+    @Test\n+    void testVirtualThreadPinnedEventCreateThrows() throws Exception {\n+        VirtualThreadPinnedEvent.setCreateThrows(true);\n+        try {\n+            testParkWhenPinned();\n+        } finally {\n+            VirtualThreadPinnedEvent.setCreateThrows(false);\n+        }\n+    }\n+\n+    \/**\n+     * Test parking when pinned and VirtualThreadPinnedEvent.begin fails with OOME.\n+     *\/\n+    @Test\n+    void testVirtualThreadPinnedEventBeginThrows() throws Exception {\n+        VirtualThreadPinnedEvent.setBeginThrows(true);\n+        try {\n+            testParkWhenPinned();\n+        } finally {\n+            VirtualThreadPinnedEvent.setBeginThrows(false);\n+        }\n+    }\n+\n+    \/**\n+     * Test parking when pinned and VirtualThreadPinnedEvent.commit fails with OOME.\n+     *\/\n+    @Test\n+    void testVirtualThreadPinnedEventCommitThrows() throws Exception {\n+        VirtualThreadPinnedEvent.setCommitThrows(true);\n+        try {\n+            testParkWhenPinned();\n+        } finally {\n+            VirtualThreadPinnedEvent.setCommitThrows(false);\n+        }\n+    }\n+\n+    \/**\n+     * Test parking a virtual thread when pinned.\n+     *\/\n+    private void testParkWhenPinned() throws Exception {\n+        Object lock = new Object();\n+        try {\n+            var completed = new AtomicBoolean();\n+            Thread thread = Thread.startVirtualThread(() -> {\n+                synchronized (lock) {\n+                    LockSupport.park();\n+                    completed.set(true);\n+                }\n+            });\n+\n+            \/\/ wait for thread to park\n+            Thread.State state;\n+            while ((state = thread.getState()) != Thread.State.WAITING) {\n+                assertTrue(state != Thread.State.TERMINATED);\n+                Thread.sleep(10);\n+            }\n+\n+            \/\/ unpark and check that thread completed without exception\n+            LockSupport.unpark(thread);\n+            thread.join();\n+            assertTrue(completed.get());\n+        } finally {\n+            Reference.reachabilityFence(lock);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/VirtualThreadPinnedEventThrows.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/WaitNotify.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/YieldQueuing.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.event;\n+\n+\/**\n+ * VirtualThreadPinnedEvent to optionally throw OOME at create, begin or commit time.\n+ *\/\n+public class VirtualThreadPinnedEvent {\n+    private static boolean throwOnCreate;\n+    private static boolean throwOnBegin;\n+    private static boolean throwOnCommit;\n+\n+    public static void setCreateThrows(boolean value) {\n+        throwOnCreate = value;\n+    }\n+\n+    public static void setBeginThrows(boolean value) {\n+        throwOnBegin = value;\n+    }\n+\n+    public static void setCommitThrows(boolean value) {\n+        throwOnCommit = value;\n+    }\n+\n+    public VirtualThreadPinnedEvent() {\n+        if (throwOnCreate) {\n+            throw new OutOfMemoryError();\n+        }\n+    }\n+\n+    public void begin() {\n+        if (throwOnBegin) {\n+            throw new OutOfMemoryError();\n+        }\n+    }\n+\n+    public void commit() {\n+        if (throwOnCommit) {\n+            throw new OutOfMemoryError();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/java.base\/jdk\/internal\/event\/VirtualThreadPinnedEvent.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -38,1 +37,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/GetStackTraceALot.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -35,1 +34,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/PinALot.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -36,1 +35,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/PingPong.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -36,1 +35,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/Skynet.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -35,1 +34,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/SleepALot.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/TimedGet.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -35,1 +34,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/YieldALot.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- * @compile --enable-preview -source ${jdk.version} ParallelTransformerLoaderTest.java\n+ * @compile ParallelTransformerLoaderTest.java\n@@ -41,2 +41,2 @@\n- * @run main\/othervm --enable-preview -javaagent:ParallelTransformerLoaderAgent.jar=Test.jar ParallelTransformerLoaderTest platform\n- * @run main\/othervm --enable-preview -javaagent:ParallelTransformerLoaderAgent.jar=Test.jar ParallelTransformerLoaderTest virtual\n+ * @run main\/othervm -javaagent:ParallelTransformerLoaderAgent.jar=Test.jar ParallelTransformerLoaderTest platform\n+ * @run main\/othervm -javaagent:ParallelTransformerLoaderAgent.jar=Test.jar ParallelTransformerLoaderTest virtual\n","filename":"test\/jdk\/java\/lang\/instrument\/ParallelTransformerLoaderTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -40,1 +39,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/management\/ThreadMXBean\/VirtualThreadDeadlocks.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -37,1 +36,0 @@\n- * @enablePreview\n@@ -81,2 +79,3 @@\n-            \/\/ current thread should be included\n-            assertTrue(tids.contains(Thread.currentThread().threadId()));\n+            \/\/ if current thread is a platform thread then it should be included\n+            boolean expected = !Thread.currentThread().isVirtual();\n+            assertEquals(expected, tids.contains(Thread.currentThread().threadId()));\n@@ -100,1 +99,2 @@\n-            \/\/ current thread should be included\n+            \/\/ if current thread is a platform thread then it should be included\n+            boolean expected = !Thread.currentThread().isVirtual();\n@@ -102,1 +102,1 @@\n-            assertTrue(Arrays.stream(tids).anyMatch(tid -> tid == currentTid));\n+            assertEquals(expected, Arrays.stream(tids).anyMatch(tid -> tid == currentTid));\n@@ -156,1 +156,5 @@\n-            assertEquals(tid0, infos[0].getThreadId());\n+            if (Thread.currentThread().isVirtual()) {\n+                assertNull(infos[0]);\n+            } else {\n+                assertEquals(tid0, infos[0].getThreadId());\n+            }\n@@ -177,1 +181,5 @@\n-            assertEquals(tid0, infos[0].getThreadId());\n+            if (Thread.currentThread().isVirtual()) {\n+                assertNull(infos[0]);\n+            } else {\n+                assertEquals(tid0, infos[0].getThreadId());\n+            }\n","filename":"test\/jdk\/java\/lang\/management\/ThreadMXBean\/VirtualThreads.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,2 +59,1 @@\n- * @enablePreview\n- * @compile -source ${jdk.version} CleanerTest.java\n+ * @compile CleanerTest.java\n","filename":"test\/jdk\/java\/lang\/ref\/CleanerTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/net\/Socket\/Timeouts.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -37,1 +36,0 @@\n- * @enablePreview\n@@ -45,1 +43,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/net\/vthread\/BlockingSocketOps.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/net\/vthread\/HttpALot.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/net\/vthread\/InterruptHttp.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/AdaptorAsyncCloseAfterReceive.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -37,1 +36,0 @@\n- * @enablePreview\n@@ -45,1 +43,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/nio\/channels\/vthread\/BlockingChannelOps.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/util\/concurrent\/ExecutorService\/CloseTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/util\/concurrent\/ThreadPerTaskExecutor\/ThreadPerTaskExecutorTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/concurrent\/ScopedValue\/ManyBindings.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/concurrent\/ScopedValue\/ScopeValueAPI.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,4 +28,4 @@\n- * @compile --enable-preview -source ${jdk.version} StressStackOverflow.java\n- * @run main\/othervm\/timeout=300 -XX:-TieredCompilation --enable-preview StressStackOverflow\n- * @run main\/othervm\/timeout=300 -XX:TieredStopAtLevel=1 --enable-preview StressStackOverflow\n- * @run main\/othervm\/timeout=300 --enable-preview StressStackOverflow\n+ * @compile StressStackOverflow.java\n+ * @run main\/othervm\/timeout=300 -XX:-TieredCompilation StressStackOverflow\n+ * @run main\/othervm\/timeout=300 -XX:TieredStopAtLevel=1 StressStackOverflow\n+ * @run main\/othervm\/timeout=300 StressStackOverflow\n","filename":"test\/jdk\/jdk\/incubator\/concurrent\/ScopedValue\/StressStackOverflow.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,2 @@\n+package jdk.internal.event;\n+\n@@ -25,5 +27,1 @@\n- * @test\n- * @bug 8284199\n- * @summary Test StructuredTaskScope without --enable-preview\n- * @modules jdk.incubator.concurrent\n- * @run junit\/othervm PreviewFeaturesNotEnabled\n+ * VirtualThreadPinnedEvent to optionally throw OOME at create, begin or commit time.\n@@ -31,0 +29,8 @@\n+public class VirtualThreadPinnedEvent {\n+    private static boolean throwOnCreate;\n+    private static boolean throwOnBegin;\n+    private static boolean throwOnCommit;\n+\n+    public static void setCreateThrows(boolean value) {\n+        throwOnCreate = value;\n+    }\n@@ -32,11 +38,18 @@\n-import jdk.incubator.concurrent.StructuredTaskScope;\n-import org.junit.jupiter.api.Test;\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-class PreviewFeaturesNotEnabled {\n-    \/**\n-     * One-arg constructor needs --enable-preview.\n-     *\/\n-    @Test\n-    void testUnsupportedOperationException() {\n-        assertThrows(UnsupportedOperationException.class, StructuredTaskScope::new);\n+    public static void setBeginThrows(boolean value) {\n+        throwOnBegin = value;\n+    }\n+\n+    public static void setCommitThrows(boolean value) {\n+        throwOnCommit = value;\n+    }\n+\n+    public VirtualThreadPinnedEvent() {\n+        if (throwOnCreate) {\n+            throw new OutOfMemoryError();\n+        }\n+    }\n+\n+    public void begin() {\n+        if (throwOnBegin) {\n+            throw new OutOfMemoryError();\n+        }\n@@ -45,6 +58,3 @@\n-    \/**\n-     * Two-arg constructor does not need --enable-preview.\n-     *\/\n-    @Test\n-    void testNoUnsupportedOperationException() {\n-        try (var scope = new StructuredTaskScope<Object>(null, Thread::new)) {\n+    public void commit() {\n+        if (throwOnCommit) {\n+            throw new OutOfMemoryError();\n","filename":"test\/jdk\/jdk\/incubator\/concurrent\/StructuredTaskScope\/PreviewFeaturesNotEnabled.java","additions":33,"deletions":23,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -35,1 +34,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/concurrent\/StructuredTaskScope\/StructuredTaskScopeTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/concurrent\/StructuredTaskScope\/StructuredThreadDumpTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/concurrent\/StructuredTaskScope\/WithScopedValue.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,0 @@\n- * @enablePreview\n@@ -143,1 +142,0 @@\n-                    .allowSetThreadLocals(false)\n","filename":"test\/jdk\/jdk\/internal\/misc\/TerminatingThreadLocal\/TestTerminatingThreadLocal.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -35,1 +34,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/internal\/misc\/ThreadFlock\/ThreadFlockTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/internal\/misc\/ThreadFlock\/WithScopedValue.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,1 @@\n-* @enablePreview\n-* @run testng\/othervm -Xint Basic\n+* @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Xint Basic\n@@ -36,5 +35,5 @@\n-* @run testng\/othervm -Xcomp -XX:TieredStopAtLevel=3 -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Basic Basic\n-* @run testng\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Basic Basic\n-* @run testng\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Basic -XX:CompileCommand=exclude,Basic.manyArgsDriver Basic\n-* @run testng\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Basic -XX:CompileCommand=exclude,jdk\/internal\/vm\/Continuation.enter Basic\n-* @run testng\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Basic -XX:CompileCommand=inline,jdk\/internal\/vm\/Continuation.run Basic\n+* @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Xcomp -XX:TieredStopAtLevel=3 -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Basic Basic\n+* @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Basic Basic\n+* @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Basic -XX:CompileCommand=exclude,Basic.manyArgsDriver Basic\n+* @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Basic -XX:CompileCommand=exclude,jdk\/internal\/vm\/Continuation.enter Basic\n+* @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Basic -XX:CompileCommand=inline,jdk\/internal\/vm\/Continuation.run Basic\n@@ -50,4 +49,3 @@\n-* @enablePreview\n-* @run testng\/othervm -XX:+VerifyStack -Xint Basic\n-* @run testng\/othervm -XX:+VerifyStack -Xcomp -XX:TieredStopAtLevel=3 -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Basic Basic\n-* @run testng\/othervm -XX:+VerifyStack -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Basic Basic\n+* @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -XX:+VerifyStack -Xint Basic\n+* @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -XX:+VerifyStack -Xcomp -XX:TieredStopAtLevel=3 -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Basic Basic\n+* @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -XX:+VerifyStack -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Basic Basic\n@@ -97,1 +95,1 @@\n-            assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield\", \"bar\", \"foo\", \"lambda$test1$0\", \"enter0\", \"enter\"));\n+            assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield\", \"bar\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n@@ -144,1 +142,1 @@\n-        List<String> baseFrames = List.of(\"bar\", \"foo\", \"lambda$test1$0\", \"enter0\", \"enter\", \"run\", \"test1\");\n+        List<String> baseFrames = List.of(\"bar\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\", \"run\", \"test1\");\n@@ -155,1 +153,1 @@\n-        expected1.addAll(List.of(\"bar\", \"foo\", \"lambda$test1$0\", \"enter0\", \"enter\"));\n+        expected1.addAll(List.of(\"bar\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n","filename":"test\/jdk\/jdk\/internal\/vm\/Continuation\/Basic.java","additions":13,"deletions":15,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @enablePreview\n@@ -37,1 +36,1 @@\n- * @run main\/othervm   -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ * @run main\/othervm   -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n@@ -51,1 +50,0 @@\n- * @enablePreview\n@@ -58,1 +56,1 @@\n- * @run main\/othervm   -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ * @run main\/othervm   -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n@@ -72,1 +70,0 @@\n- * @enablePreview\n@@ -79,1 +76,1 @@\n- * @run main\/othervm   -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ * @run main\/othervm   -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n@@ -93,1 +90,0 @@\n- * @enablePreview\n@@ -100,1 +96,1 @@\n- * @run main\/othervm   -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ * @run main\/othervm   -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n@@ -114,1 +110,0 @@\n- * @enablePreview\n@@ -121,1 +116,1 @@\n- * @run main\/othervm   -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ * @run main\/othervm   -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n@@ -135,1 +130,0 @@\n- * @enablePreview\n@@ -142,1 +136,1 @@\n- * @run main\/othervm   -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ * @run main\/othervm   -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n@@ -156,1 +150,0 @@\n- * @enablePreview\n@@ -163,1 +156,1 @@\n- * @run main\/othervm   -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ * @run main\/othervm   -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n@@ -177,1 +170,0 @@\n- * @enablePreview\n@@ -184,1 +176,1 @@\n- * @run main\/othervm   -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ * @run main\/othervm   -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n@@ -198,1 +190,0 @@\n- * @enablePreview\n@@ -205,1 +196,1 @@\n- * @run main\/othervm   -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ * @run main\/othervm   -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n@@ -219,1 +210,0 @@\n- * @enablePreview\n@@ -226,1 +216,1 @@\n- * @run main\/othervm   -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ * @run main\/othervm   -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n","filename":"test\/jdk\/jdk\/internal\/vm\/Continuation\/BasicExt.java","additions":10,"deletions":20,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-* @enablePreview\n","filename":"test\/jdk\/jdk\/internal\/vm\/Continuation\/ClassUnloading.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @run main\/othervm\/timeout=300 --enable-preview -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ * @run main\/othervm\/timeout=300 -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n@@ -54,1 +54,1 @@\n- * @run main\/othervm\/timeout=300 --enable-preview -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ * @run main\/othervm\/timeout=300 -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n","filename":"test\/jdk\/jdk\/internal\/vm\/Continuation\/Fuzz.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-* @enablePreview\n","filename":"test\/jdk\/jdk\/internal\/vm\/Continuation\/HumongousStack.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/internal\/vm\/Continuation\/LiveFramesDriver.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,2 +35,1 @@\n- * @run main\/othervm   --enable-preview\n- *                     -XX:+UnlockDiagnosticVMOptions   -XX:+WhiteBoxAPI\n+ * @run main\/othervm   -XX:+UnlockDiagnosticVMOptions   -XX:+WhiteBoxAPI\n","filename":"test\/jdk\/jdk\/internal\/vm\/Continuation\/MovingCompWindow.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,3 +30,2 @@\n- * @enablePreview\n- * @run testng\/othervm -Xint Scoped\n- * @run testng\/othervm -Xcomp -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Scoped Scoped\n+ * @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Xint Scoped\n+ * @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Xcomp -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Scoped Scoped\n@@ -78,1 +77,1 @@\n-                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield\", \"lambda$bar$14\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"enter0\", \"enter\", \"run\", \"foo\", \"lambda$test1$0\", \"enter0\", \"enter\"));\n+                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\", \"run\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n@@ -82,1 +81,1 @@\n-                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield\", \"lambda$bar$14\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"enter0\", \"enter\", \"run\", \"foo\", \"lambda$test1$0\", \"enter0\", \"enter\"));\n+                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\", \"run\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n@@ -86,1 +85,1 @@\n-                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield\", \"lambda$bar$14\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"enter0\", \"enter\"));\n+                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\"));\n@@ -90,1 +89,1 @@\n-                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield\", \"lambda$bar$14\", \"enter0\", \"enter\"));\n+                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\"));\n@@ -94,1 +93,1 @@\n-                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield\", \"lambda$bar$14\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"enter0\", \"enter\", \"run\", \"foo\", \"lambda$test1$0\", \"enter0\", \"enter\"));\n+                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\", \"run\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n@@ -98,1 +97,1 @@\n-                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield\", \"lambda$bar$14\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"enter0\", \"enter\", \"run\", \"foo\", \"lambda$test1$0\", \"enter0\", \"enter\"));\n+                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\", \"run\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n@@ -123,1 +122,1 @@\n-                        assertEquals(frames.subList(0, 15), Arrays.asList(\"lambda$bar$14\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"enter0\", \"enter\", \"run\", \"foo\", \"lambda$test1$0\", \"enter0\", \"enter\", \"run\", \"test1\"));\n+                        assertEquals(frames.subList(0, 18), Arrays.asList(\"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\", \"run\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\", \"run\", \"test1\"));\n@@ -127,1 +126,1 @@\n-                        assertEquals(frames, Arrays.asList(\"lambda$bar$14\", \"enter0\", \"enter\"));\n+                        assertEquals(frames, Arrays.asList(\"lambda$bar$14\", \"run\", \"enter0\", \"enter\"));\n@@ -131,1 +130,1 @@\n-                        assertEquals(frames, Arrays.asList(\"lambda$bar$14\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"enter0\", \"enter\"));\n+                        assertEquals(frames, Arrays.asList(\"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\"));\n@@ -135,1 +134,1 @@\n-                        assertEquals(frames, Arrays.asList(\"lambda$bar$14\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"enter0\", \"enter\", \"run\", \"foo\", \"lambda$test1$0\", \"enter0\", \"enter\"));\n+                        assertEquals(frames, Arrays.asList(\"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\", \"run\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n@@ -139,1 +138,1 @@\n-                        assertEquals(frames.subList(0, 15), Arrays.asList(\"lambda$bar$14\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"enter0\", \"enter\", \"run\", \"foo\", \"lambda$test1$0\", \"enter0\", \"enter\", \"run\", \"test1\"));\n+                        assertEquals(frames.subList(0, 18), Arrays.asList(\"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\", \"run\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\", \"run\", \"test1\"));\n","filename":"test\/jdk\/jdk\/internal\/vm\/Continuation\/Scoped.java","additions":14,"deletions":15,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestThreadEndEvent.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestThreadSleepEvent.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestThreadStartEvent.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestVirtualThreadEndEvent.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestVirtualThreadStartEvent.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestThreadExclusion.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestVirtualThreadExclusion.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/jfr\/threading\/TestDeepVirtualStackTrace.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/jfr\/threading\/TestManyVirtualThreads.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/jfr\/threading\/TestNestedVirtualThreads.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,6 +37,0 @@\n-    \/**\n-     * Characteristic value signifying that the thread cannot set values for its\n-     * copy of thread-locals.\n-     *\/\n-    public static final int NO_THREAD_LOCALS = 1 << 1;\n-\n@@ -88,2 +82,0 @@\n-        if ((characteristics & NO_THREAD_LOCALS) != 0)\n-            builder.allowSetThreadLocals(false);\n","filename":"test\/lib\/jdk\/test\/lib\/thread\/VThreadRunner.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"}]}