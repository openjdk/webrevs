{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import jtreg.SkippedException;\n@@ -50,2 +51,1 @@\n-                System.out.println(\"Skipping test - no PKCS11 provider available\");\n-                return;\n+                throw new SkippedException(\"No PKCS11 provider available\");\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Config\/ReadConfInUTF16Env.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -784,1 +784,1 @@\n-            return;\n+            throw new SkippedException(\"See logs for details\");\n","filename":"test\/jdk\/sun\/security\/pkcs11\/PKCS11Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,3 +65,1 @@\n-        if (initSecmod() == false) {\n-            return;\n-        }\n+        initSecmod();\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Secmod\/AddPrivateKey.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import java.io.File;\n@@ -50,3 +49,1 @@\n-        if (initSecmod() == false) {\n-            return;\n-        }\n+        initSecmod();\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Secmod\/AddTrustedCert.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import java.io.File;\n@@ -43,3 +42,1 @@\n-        if (initSecmod() == false) {\n-            return;\n-        }\n+        initSecmod();\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Secmod\/Crypto.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import java.io.File;\n@@ -49,3 +48,1 @@\n-        if (initSecmod() == false) {\n-            return;\n-        }\n+        initSecmod();\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Secmod\/GetPrivateKey.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import java.io.File;\n@@ -48,3 +47,1 @@\n-        if (initSecmod() == false) {\n-            return;\n-        }\n+        initSecmod();\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Secmod\/JksSetPrivateKey.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import java.io.File;\n@@ -45,3 +44,1 @@\n-        if (!initSecmod()) {\n-            return;\n-        }\n+        initSecmod();\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Secmod\/LoadKeystore.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Red Hat, Inc. and\/or its affiliates.\n+ * Copyright (c) 2017, 2025, Red Hat, Inc. and\/or its affiliates.\n@@ -49,0 +49,1 @@\n+import jtreg.SkippedException;\n@@ -69,3 +70,1 @@\n-        if (!initialize()) {\n-            return;\n-        }\n+        initializeProvider();\n@@ -113,5 +112,1 @@\n-    private static boolean initialize() throws Exception {\n-        return initializeProvider();\n-    }\n-\n-    private static boolean initializeProvider() throws Exception {\n+    private static void initializeProvider() throws Exception {\n@@ -119,4 +114,1 @@\n-        if (!initSecmod()) {\n-            System.out.println(\"Cannot init security module database, skipping\");\n-            return false;\n-        }\n+        initSecmod();\n@@ -138,2 +130,0 @@\n-\n-        return true;\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Secmod\/TestNssDbSqlite.java","additions":5,"deletions":15,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import java.io.File;\n@@ -46,3 +45,1 @@\n-        if (initSecmod() == false) {\n-            return;\n-        }\n+        initSecmod();\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Secmod\/TrustAnchors.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+open\/test\/jdk\/sun\/security\/pkcs11\/Config\/ReadConfInUTF16Env.java open\/test\/jdk\/sun\/security\/pkcs11\/PKCS11Test.java open\/test\/jdk\/sun\/security\/pkcs11\/Secmod\/AddPrivateKey.java open\/test\/jdk\/sun\/security\/pkcs11\/Secmod\/AddTrustedCert.java open\/test\/jdk\/sun\/security\/pkcs11\/Secmod\/Crypto.java open\/test\/jdk\/sun\/security\/pkcs11\/Secmod\/GetPrivateKey.java open\/test\/jdk\/sun\/security\/pkcs11\/Secmod\/JksSetPrivateKey.java open\/test\/jdk\/sun\/security\/pkcs11\/Secmod\/LoadKeystore.java open\/test\/jdk\/sun\/security\/pkcs11\/Secmod\/TestNssDbSqlite.java open\/test\/jdk\/sun\/security\/pkcs11\/Secmod\/TrustAnchors.java open\/test\/jdk\/sun\/security\/pkcs11\/SecmodTest.java open\/test\/jdk\/sun\/security\/pkcs11\/ec\/ReadCertificates.java open\/test\/jdk\/sun\/security\/pkcs11\/ec\/ReadPKCS12.java open\/test\/jdk\/sun\/security\/pkcs11\/ec\/TestKeyFactory.java open\/test\/jdk\/sun\/security\/pkcs11\/rsa\/KeyWrap.java open\/test\/jdk\/sun\/security\/pkcs11\/sslecc\/ClientJSSEServerJSSE.java\n\\ No newline at end of file\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Secmod\/tmp.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -45,1 +45,1 @@\n-    static boolean initSecmod() throws Exception {\n+    static void initSecmod() throws Exception {\n@@ -63,1 +63,1 @@\n-        if (dbdirFile.exists() == false) {\n+        if (!dbdirFile.exists()) {\n@@ -76,1 +76,0 @@\n-        return true;\n","filename":"test\/jdk\/sun\/security\/pkcs11\/SecmodTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+import jtreg.SkippedException;\n@@ -81,2 +82,1 @@\n-            System.out.println(\"Provider does not support ECDSA, skipping...\");\n-            return;\n+            throw new SkippedException(\"Provider does not support ECDSA\");\n","filename":"test\/jdk\/sun\/security\/pkcs11\/ec\/ReadCertificates.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+import jtreg.SkippedException;\n@@ -69,2 +70,1 @@\n-            System.out.println(\"Provider does not support ECDSA, skipping...\");\n-            return;\n+            throw new SkippedException(\"Provider does not support ECDSA\");\n","filename":"test\/jdk\/sun\/security\/pkcs11\/ec\/ReadPKCS12.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,2 @@\n+import jtreg.SkippedException;\n+\n@@ -129,2 +131,1 @@\n-            System.out.println(\"Provider does not support EC, skipping\");\n-            return;\n+            throw new SkippedException(\"Provider does not support EC, skipping\");\n","filename":"test\/jdk\/sun\/security\/pkcs11\/ec\/TestKeyFactory.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+import jtreg.SkippedException;\n+\n@@ -57,2 +59,1 @@\n-            System.out.println(\"Not supported by provider, skipping\");\n-            return;\n+            throw new SkippedException(\"Not supported by provider, skipping\");\n@@ -77,2 +78,1 @@\n-                System.out.println(\"Provider does not support RSA, skipping\");\n-                return;\n+                throw new SkippedException(\"Provider does not support RSA, skipping\");\n","filename":"test\/jdk\/sun\/security\/pkcs11\/rsa\/KeyWrap.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import jtreg.SkippedException;\n@@ -61,2 +62,1 @@\n-            System.out.println(\"Provider does not support EC, skipping\");\n-            return;\n+            throw new SkippedException(\"Provider does not support EC, skipping\");\n","filename":"test\/jdk\/sun\/security\/pkcs11\/sslecc\/ClientJSSEServerJSSE.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}