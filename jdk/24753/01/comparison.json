{"files":[{"patch":"@@ -115,1 +115,1 @@\n-  assert(static_cast<int>(result) == thing, \"failed: %d != %d\", static_cast<int>(result), thing);\n+  guarantee(static_cast<int>(result) == thing, \"failed: %d != %d\", static_cast<int>(result), thing);\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -828,1 +828,7 @@\n-          CompileTask::print(tty, nm, \"(hosted JVMCI compilation)\");\n+          if (name != nullptr) {\n+            stringStream st;\n+            st.print_cr(\"(hosted JVMCI compilation: %s)\", name);\n+            CompileTask::print(tty, nm, st.as_string());\n+          } else {\n+            CompileTask::print(tty, nm, \"(hosted JVMCI compilation)\");\n+          }\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,0 +49,12 @@\n+    \/**\n+     * The maximum length of an InstalledCode name. This name is typically installed into\n+     * the code cache so it should have a reasonable limit.\n+     *\/\n+    public static final int MAX_NAME_LENGTH = 2048;\n+\n+    \/**\n+     * @param name the name to be associated with the installed code. Can be null and\n+     *        must be no longer than {@link #MAX_NAME_LENGTH}.\n+     *\n+     * @throws IllegalArgumentException if {@code name.length >} {@link #MAX_NAME_LENGTH}\n+     *\/\n@@ -50,0 +62,5 @@\n+        if (name.length() > MAX_NAME_LENGTH) {\n+            String msg = String.format(\"name length (%d) is greater than %d (name[0:%s] = %s)\",\n+                                        name.length(), MAX_NAME_LENGTH, MAX_NAME_LENGTH, name.substring(0, MAX_NAME_LENGTH));\n+            throw new IllegalArgumentException(msg);\n+        }\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/code\/InstalledCode.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @requires vm.jvmci\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.code\n+ * @run junit\/othervm -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI jdk.vm.ci.code.test.InstalledCodeTest\n+ *\/\n+\n+package jdk.vm.ci.code.test;\n+\n+import jdk.vm.ci.code.InstalledCode;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class InstalledCodeTest {\n+\n+    @Test\n+    public void testTooLongName() {\n+        String longName = new String(new char[InstalledCode.MAX_NAME_LENGTH]).replace('\\0', 'A');\n+        new InstalledCode(longName);\n+        try {\n+            String tooLongName = longName + \"X\";\n+            new InstalledCode(tooLongName);\n+        } catch (IllegalArgumentException iae) {\n+            \/\/ Threw IllegalArgumentException as expected.\n+            return;\n+        }\n+        Assert.fail(\"expected IllegalArgumentException\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/InstalledCodeTest.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"}]}