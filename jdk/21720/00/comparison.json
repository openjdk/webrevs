{"files":[{"patch":"@@ -395,0 +395,3 @@\n+        if (toType.isEnum()) {\n+            return Enum.valueOf(toType, value);\n+        }\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TestBuilder.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.util.function.Supplier;\n@@ -268,0 +267,6 @@\n+    public static enum TestTempType {\n+        TEMPDIR_EMPTY,\n+        TEMPDIR_NOT_EMPTY,\n+        TEMPDIR_NOT_EXIST,\n+    }\n+\n@@ -271,1 +276,0 @@\n-     * @throws IOException\n@@ -274,3 +278,4 @@\n-    @Parameter(\"true\")\n-    @Parameter(\"false\")\n-    public void testTemp(boolean withExistingTempDir) throws IOException {\n+    @Parameter(\"TEMPDIR_EMPTY\")\n+    @Parameter(\"TEMPDIR_NOT_EMPTY\")\n+    @Parameter(\"TEMPDIR_NOT_EXIST\")\n+    public void testTemp(TestTempType type) throws IOException {\n@@ -279,11 +284,14 @@\n-        Supplier<PackageTest> createTest = () -> {\n-            return new PackageTest()\n-            .configureHelloApp()\n-            \/\/ Force save of package bundle in test work directory.\n-            .addInitializer(JPackageCommand::setDefaultInputOutput)\n-            .addInitializer(cmd -> {\n-                Path tempDir = getTempDirectory(cmd, tempRoot);\n-                if (withExistingTempDir) {\n-                    Files.createDirectories(tempDir);\n-                } else {\n-                    Files.createDirectories(tempDir.getParent());\n+        var pkgTest = new PackageTest()\n+        .configureHelloApp()\n+        \/\/ Force save of package bundle in test work directory.\n+        .addInitializer(JPackageCommand::setDefaultInputOutput)\n+        .addInitializer(cmd -> {\n+            Path tempDir = getTempDirectory(cmd, tempRoot);\n+            switch (type) {\n+                    case TEMPDIR_EMPTY -> Files.createDirectories(tempDir);\n+                    case TEMPDIR_NOT_EXIST -> Files.createDirectories(tempDir.getParent());\n+                    case TEMPDIR_NOT_EMPTY -> {\n+                        Files.createDirectories(tempDir);\n+                        TKit.createTextFile(tempDir.resolve(\"foo.txt\"), List.of(\n+                                \"Hello Duke!\"));\n+                    }\n@@ -292,0 +300,15 @@\n+            }\n+        );\n+\n+        if (TestTempType.TEMPDIR_NOT_EMPTY.equals(type)) {\n+            pkgTest.setExpectedExitCode(1).addBundleVerifier(cmd -> {\n+                \/\/ Check jpackage didn't use the supplied directory.\n+                Path tempDir = getTempDirectory(cmd, tempRoot);\n+                String[] tempDirContents = tempDir.toFile().list();\n+                TKit.assertStringListEquals(List.of(\"foo.txt\"), List.of(\n+                        tempDirContents), String.format(\n+                                \"Check the contents of the supplied temporary directory [%s]\",\n+                                tempDir));\n+                TKit.assertStringListEquals(List.of(\"Hello Duke!\"),\n+                        Files.readAllLines(tempDir.resolve(tempDirContents[0])),\n+                        \"Check the contents of the file in the supplied temporary directory\");\n@@ -293,1 +316,7 @@\n-        };\n+        } else {\n+            pkgTest.addBundleVerifier(cmd -> {\n+                \/\/ Check jpackage used the supplied directory.\n+                Path tempDir = getTempDirectory(cmd, tempRoot);\n+                TKit.assertPathNotEmptyDirectory(tempDir);\n+            });\n+        }\n@@ -295,16 +324,1 @@\n-        createTest.get()\n-        .addBundleVerifier(cmd -> {\n-            \/\/ Check jpackage actually used the supplied directory.\n-            Path tempDir = getTempDirectory(cmd, tempRoot);\n-            TKit.assertNotEquals(0, tempDir.toFile().list().length,\n-                    String.format(\n-                            \"Check jpackage wrote some data in the supplied temporary directory [%s]\",\n-                            tempDir));\n-        })\n-        .run(PackageTest.Action.CREATE);\n-\n-        createTest.get()\n-        \/\/ Temporary directory should not be empty,\n-        \/\/ jpackage should exit with error.\n-        .setExpectedExitCode(1)\n-        .run(PackageTest.Action.CREATE);\n+        pkgTest.run(PackageTest.Action.CREATE);\n","filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/BasicTest.java","additions":47,"deletions":33,"binary":false,"changes":80,"status":"modified"}]}