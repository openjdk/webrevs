{"files":[{"patch":"@@ -113,2 +113,4 @@\n-ciEnv::ciEnv(CompileTask* task)\n-  : _ciEnv_arena(mtCompiler) {\n+ciEnv::ciEnv(CompileTask* task) :\n+    _ciEnv_arena(mtCompiler),\n+    _failure_reason(mtCompiler)\n+{\n@@ -124,1 +126,0 @@\n-  _failure_reason = nullptr;\n@@ -241,1 +242,4 @@\n-ciEnv::ciEnv(Arena* arena) : _ciEnv_arena(mtCompiler) {\n+ciEnv::ciEnv(Arena* arena) :\n+    _ciEnv_arena(mtCompiler),\n+    _failure_reason(mtCompiler)\n+{\n@@ -253,1 +257,0 @@\n-  _failure_reason = nullptr;\n@@ -1236,1 +1239,1 @@\n-  if (_failure_reason == nullptr) {\n+  if (_failure_reason.get() == nullptr) {\n@@ -1238,1 +1241,1 @@\n-    _failure_reason = reason;\n+    _failure_reason.set(reason);\n@@ -1268,1 +1271,1 @@\n-    _failure_reason = nullptr;\n+    _failure_reason.clear();\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"utilities\/cHeapStringHolder.hpp\"\n@@ -60,1 +61,1 @@\n-  const char*      _failure_reason;\n+  CHeapStringHolder _failure_reason;\n@@ -322,1 +323,1 @@\n-  bool failing() const { return _failure_reason != nullptr; }\n+  bool failing() const { return _failure_reason.get() != nullptr; }\n@@ -325,1 +326,1 @@\n-  const char* failure_reason() const { return _failure_reason; }\n+  const char* failure_reason() const { return _failure_reason.get(); }\n","filename":"src\/hotspot\/share\/ci\/ciEnv.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -408,1 +408,1 @@\n-      result = (failure_reason == failure_reason_memlimit()) ? \"oom\" : \"err\";\n+      result = (strcmp(failure_reason, failure_reason_memlimit()) == 0) ? \"oom\" : \"err\";\n","filename":"src\/hotspot\/share\/compiler\/compilationMemoryStatistic.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2331,1 +2331,3 @@\n-      failure_reason = ci_env.failure_reason();\n+      \/\/ Duplicate the failure reason string, so that it outlives ciEnv\n+      failure_reason = os::strdup(ci_env.failure_reason(), mtCompiler);\n+      bool reason_on_C_heap = true;\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -641,1 +641,1 @@\n-                  _failure_reason(nullptr),\n+                  _failure_reason(mtCompiler),\n@@ -932,1 +932,1 @@\n-    _failure_reason(nullptr),\n+    _failure_reason(mtCompiler),\n@@ -4394,1 +4394,1 @@\n-  if (_failure_reason == nullptr) {\n+  if (_failure_reason.get() == nullptr) {\n@@ -4396,1 +4396,1 @@\n-    _failure_reason = reason;\n+    _failure_reason.set(reason);\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+#include \"utilities\/cHeapStringHolder.hpp\"\n@@ -366,1 +367,1 @@\n-  const char*           _failure_reason;        \/\/ for record_failure\/failing pattern\n+  CHeapStringHolder     _failure_reason;       \/\/ for record_failure\/failing pattern\n@@ -813,2 +814,11 @@\n-  bool        failing() const        { return _env->failing() || _failure_reason != nullptr; }\n-  const char* failure_reason() const { return (_env->failing()) ? _env->failure_reason() : _failure_reason; }\n+\n+  bool        failing() const        {\n+    return _env->failing() ||\n+           _failure_reason.get() != nullptr;\n+  }\n+\n+  const char* failure_reason() const {\n+    return _env->failing() ? _env->failure_reason()\n+                           : _failure_reason.get();\n+  }\n+\n@@ -818,1 +828,4 @@\n-    return (r == _failure_reason) || (r != nullptr && _failure_reason != nullptr && strcmp(r, _failure_reason) == 0);\n+    return (r == _failure_reason.get()) ||\n+           (r != nullptr &&\n+            _failure_reason.get() != nullptr &&\n+            strcmp(r, _failure_reason.get()) == 0);\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -729,1 +729,0 @@\n-  nonstatic_field(ciEnv,                       _failure_reason,                               const char*)                           \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"runtime\/orderAccess.hpp\"\n+#include \"utilities\/cHeapStringHolder.hpp\"\n+\n+void CHeapStringHolder::set(const char* string) {\n+  clear();\n+  if (string != nullptr) {\n+    size_t len = strlen(string);\n+    _string = NEW_C_HEAP_ARRAY(char, len + 1, _memflags);\n+    ::memcpy(_string, string, len);\n+    _string[len] = 0; \/\/ terminating null\n+  }\n+}\n+\n+void CHeapStringHolder::clear() {\n+  if (_string != nullptr) {\n+    FREE_C_HEAP_ARRAY(char, _string);\n+    _string = nullptr;\n+  }\n+}\n","filename":"src\/hotspot\/share\/utilities\/cHeapStringHolder.cpp","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_UTILITIES_CHEAPSTRINGHOLDER_HPP\n+#define SHARE_UTILITIES_CHEAPSTRINGHOLDER_HPP\n+\n+#include \"memory\/allocation.hpp\"\n+\n+\/\/ Holder for a C-Heap allocated String\n+\/\/ The user must ensure that the destructor is called, or at least clear.\n+class CHeapStringHolder : public StackObj {\n+private:\n+  const MEMFLAGS _memflags;\n+  char* _string;\n+\n+public:\n+  CHeapStringHolder(MEMFLAGS memflags) :\n+    _memflags(memflags), _string(nullptr) {}\n+  ~CHeapStringHolder() { clear(); };\n+  NONCOPYABLE(CHeapStringHolder);\n+\n+  \/\/ Allocate memory to hold a copy of string\n+  void set(const char* string);\n+\n+  \/\/ Release allocated memory\n+  void clear();\n+\n+  const char* get() const { return _string; };\n+};\n+\n+#endif \/\/ SHARE_UTILITIES_CHEAPSTRINGHOLDER_HPP\n","filename":"src\/hotspot\/share\/utilities\/cHeapStringHolder.hpp","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"}]}