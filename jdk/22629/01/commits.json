[{"commit":{"message":"Merge branch 'master' into optimize-atomic-post"},"files":[{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopopts.cpp"},{"filename":"src\/hotspot\/share\/opto\/phasetype.hpp"}],"sha":"0446270f92fb857a151ec83e000deb0d2f9c8d63"},{"commit":{"message":"Clean up comments for consistency and add spacing for readability"},"files":[{"filename":"src\/hotspot\/share\/opto\/loopTransform.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"}],"sha":"c651d344d856155143b0e617d1d41205ae49f280"},{"commit":{"message":"Fix some corner case failures and refined part of code"},"files":[{"filename":"src\/hotspot\/share\/opto\/loopTransform.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopopts.cpp"},{"filename":"src\/hotspot\/share\/opto\/phasetype.hpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/CompilePhase.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestMultiversionRemoveUselessSlowLoop.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestVectorizedDrainLoop.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/VectorizedDrainLoopPerf.java"}],"sha":"3c14b0115ba54101dcfef72f294365100f3c9070"},{"commit":{"message":"Merge branch 'master' into optimize-atomic-post"},"files":[{"filename":"src\/hotspot\/share\/opto\/loopTransform.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopopts.cpp"}],"sha":"f2472741a5a9f020b8e340b92a16399b824829d9"},{"commit":{"message":"Refine ascii art, rename some variables and resolve conflicts"},"files":[{"filename":"src\/hotspot\/share\/opto\/loopTransform.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopopts.cpp"}],"sha":"3146d8ae769695ce5ffa8f4dacc4ce162b814626"},{"commit":{"message":"Merge branch 'master' into optimize-atomic-post"},"files":[{"filename":"src\/hotspot\/share\/opto\/loopTransform.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopopts.cpp"}],"sha":"8837cd444bf4ef5f77f04ebecff570313e0b0853"},{"commit":{"message":"Add necessary ASCII art, refactor insert_post_loop() and rename\n\"atomic post loop\" with \"vectorized drain loop."},"files":[{"filename":"src\/hotspot\/share\/opto\/loopTransform.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopopts.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestVectorizedDrainLoop.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/VectorizedDrainLoopPerf.java"}],"sha":"18299ef35f50495ca724b476ebc009b74d6fd2b1"},{"commit":{"message":"Merge branch 'master' into optimize-atomic-post"},"files":[{"filename":"src\/hotspot\/share\/opto\/loopTransform.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopopts.cpp"}],"sha":"9320ebaf461f3cf905363ab563df361c38b3d8c5"},{"commit":{"message":"8307084: C2: Vector atomic post loop is not executed for some small trip counts\n\nIn C2's loop optimization, for a counted loop, if we have any of\nthese conditions (RCE, unrolling) met, we switch to the\npre-main-post-loop model. Then a counted loop could be split into\npre-main-post loops. Meanwhile, C2 inserts minimum trip guards\n(a.k.a. zero-trip guards) before the main loop and the post loop.\nThese guards test if the remaining trip count is less than the\nloop stride (after unrolling). If yes, The execution jumps over\nthe loop code to avoid loop over-running. For example, if a main\nloop is unrolled to 8x, the main loop guard tests if the loop has\nless than 8 iterations and then decide which way to go.\n\nUsually, the vectorized main loop will be super-unrolled after\nvectorization. In such cases, the main loop's stride is going to\nbe further multiplied. After the main loop is super-unrolled, the\nminimum trip guard test will be updated. Assuming one vector can\noperate 8 iterations and the super-unrolling count is 4, the trip\nguard of the main loop will test if remaining trip is less than\n8 * 4 = 32.\n\nTo avoid the scalar post loop running too many iterations after\nsuper-unrolling, C2 clones the main loop before super-unrolling to\ncreate a vector drain loop, i.e. atomic post loop. The newly\ninserted post loop also has a minimum trip guard. And, both trip\nguards of the main loop and vector post loop jump to the scalar\npost loop.\n\nThe problem here is, if the remaining trip count when exiting from\nthe pre-loop is relatively small but larger than the vector length,\nthe vector atomic post loop will never be executed. Because the\nminimum trip guard test of main loop fails, the execution will\njump over both the main loop and the atomic post loop. For\nexample, in the above case, a loop still has 25 iterations after the\npre-loop, we may run 3 rounds of the atomic post loop but\nit's impossible. It would be better if the minimum trip guard\ntest of the main loop does not jump over the atomic post loop.\n\nThis patch is to improve it by modifying the control flow when\nthe minimum trip guard test of the main loop fails. Obviously,\nwe need to sync all data uses and control uses to adjust to the\nchange of control flow.\n\nThe whole process is done by the function\ninsert_atomic_post_loop_impl().\n\nWe introduce a new CloneLoopMode, InsertAtomicPost. When we're cloning\nvector main loop to atomic post loop with mode InsertAtomicPost:\n\n1. The fall-in control flow to the atomic post-loop comes from a\nRegionNode merging exits from pre-loop and main-loop, implemented in\ninsert_atomic_post_loop_impl().\n2. All fall-in values to the atomic post-loop come from (one or more)\nphis merging exit values from pre-loop and main-loop, implemented by\nclone_up_atomic_post_backedge_goo().\n3. All control uses of exits from old-loop now should use new\nRegionNodes that merge RegionNodes which merge exits from pre-loop\nand main-loop and exits from the new-loop (atomic post loop)\nequivalents, implemented by fix_ctrl_uses_for_atomic_post()\n4. All data uses of values from old-loop now should use new Phis\nthat merge Phis which merge values from pre-loop and main-loop and\nvalues from the new-loop (atomic post loop) equivalents, implemented\nby handle_data_uses_for_atomic_post_loop().\n\nWe also add a new micro-benchmark to test the performance gain. Here are\nthe performance results from different vector-length machines.\n\nTier 1- 3 passed on aarch64 and x86. There are still a few fuzzer\ntest failures."},"files":[{"filename":"src\/hotspot\/share\/opto\/loopTransform.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopopts.cpp"}],"sha":"ca605406dd0119d162878194c942849a10f27c87"}]