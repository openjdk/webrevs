{"files":[{"patch":"@@ -359,2 +359,1 @@\n-                \/\/ If it's before it, then this declaration overlaps nothing in the list. This only\n-                \/\/ happens with the initial declarations; after that, declarations always stay ahead.\n+                \/\/ If it's before it, then this declaration overlaps nothing else in the list.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/DeferredLintHandler.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -112,0 +112,1 @@\n+    private final Log log;\n@@ -128,0 +129,1 @@\n+        log = Log.instance(context);\n@@ -135,0 +137,1 @@\n+        this.log = other.log;\n@@ -437,1 +440,0 @@\n-     * @param log warning destination\n@@ -440,2 +442,2 @@\n-    public void logIfEnabled(Log log, LintWarning warning) {\n-        logIfEnabled(log, null, warning);\n+    public void logIfEnabled(LintWarning warning) {\n+        logIfEnabled(null, warning);\n@@ -447,1 +449,0 @@\n-     * @param log warning destination\n@@ -451,1 +452,1 @@\n-    public void logIfEnabled(Log log, DiagnosticPosition pos, LintWarning warning) {\n+    public void logIfEnabled(DiagnosticPosition pos, LintWarning warning) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -200,2 +200,2 @@\n-            LintWarnings.PreviewFeatureUsePlural(feature.nameFragment()) :\n-            LintWarnings.PreviewFeatureUse(feature.nameFragment()),\n+                LintWarnings.PreviewFeatureUsePlural(feature.nameFragment()) :\n+                LintWarnings.PreviewFeatureUse(feature.nameFragment()),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1949,1 +1949,1 @@\n-            env.info.lint.logIfEnabled(log, tree.pos(), LintWarnings.AttemptToSynchronizeOnInstanceOfValueBasedClass);\n+            env.info.lint.logIfEnabled(tree.pos(), LintWarnings.AttemptToSynchronizeOnInstanceOfValueBasedClass);\n@@ -2056,1 +2056,1 @@\n-                env.info.lint.logIfEnabled(log, pos, LintWarnings.TryResourceThrowsInterruptedExc(resource));\n+                env.info.lint.logIfEnabled(pos, LintWarnings.TryResourceThrowsInterruptedExc(resource));\n@@ -4463,1 +4463,1 @@\n-            env.info.lint.logIfEnabled(log, tree, LintWarnings.TryExplicitCloseCall);\n+            env.info.lint.logIfEnabled(tree, LintWarnings.TryExplicitCloseCall);\n@@ -4490,1 +4490,1 @@\n-                chk.lint.logIfEnabled(log, tree, LintWarnings.StaticNotQualifiedByType(sym.kind.kindName(), sym.owner));\n+                chk.lint.logIfEnabled(tree, LintWarnings.StaticNotQualifiedByType(sym.kind.kindName(), sym.owner));\n@@ -4492,1 +4492,1 @@\n-                chk.lint.logIfEnabled(log, tree, LintWarnings.StaticNotQualifiedByType2(sym.kind.kindName()));\n+                chk.lint.logIfEnabled(tree, LintWarnings.StaticNotQualifiedByType2(sym.kind.kindName()));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -278,1 +278,1 @@\n-        lint.logIfEnabled(log, pos, LintWarnings.RestrictedMethod(sym.enclClass(), sym));\n+        lint.logIfEnabled(pos, LintWarnings.RestrictedMethod(sym.enclClass(), sym));\n@@ -640,1 +640,1 @@\n-                lint.logIfEnabled(log, tree.pos(), LintWarnings.RedundantCast(tree.clazz.type));\n+                lint.logIfEnabled(tree.pos(), LintWarnings.RedundantCast(tree.clazz.type));\n@@ -945,1 +945,1 @@\n-            lint.logIfEnabled(log, tree, LintWarnings.VarargsRedundantTrustmeAnno(\n+            lint.logIfEnabled(tree, LintWarnings.VarargsRedundantTrustmeAnno(\n@@ -1315,1 +1315,1 @@\n-            deferredLintHandler.report(_ -> lint.logIfEnabled(log, tree.pos(), LintWarnings.Strictfp));\n+            deferredLintHandler.report(_ -> lint.logIfEnabled(tree.pos(), LintWarnings.Strictfp));\n@@ -1534,1 +1534,1 @@\n-            lint.logIfEnabled(log, tree.pos(), LintWarnings.RawClassUse(tree.type, tree.type.tsym.type));\n+            lint.logIfEnabled(tree.pos(), LintWarnings.RawClassUse(tree.type, tree.type.tsym.type));\n@@ -1858,1 +1858,1 @@\n-            lint.logIfEnabled(log, TreeInfo.diagnosticPositionFor(m, tree),\n+            lint.logIfEnabled(TreeInfo.diagnosticPositionFor(m, tree),\n@@ -4116,1 +4116,1 @@\n-                deferredLintHandler.report(_ -> lint.logIfEnabled(log, pos, LintWarnings.DivZero));\n+                deferredLintHandler.report(_ -> lint.logIfEnabled(pos, LintWarnings.DivZero));\n@@ -4130,1 +4130,1 @@\n-                lint.logIfEnabled(log, pos, LintWarnings.PossibleLossOfPrecision(found, req)));\n+                lint.logIfEnabled(pos, LintWarnings.PossibleLossOfPrecision(found, req)));\n@@ -4139,1 +4139,1 @@\n-            lint.logIfEnabled(log, tree.thenpart.pos(), LintWarnings.EmptyIf);\n+            lint.logIfEnabled(tree.thenpart.pos(), LintWarnings.EmptyIf);\n@@ -4286,1 +4286,1 @@\n-            lint.logIfEnabled(log, pos,\n+            lint.logIfEnabled(pos,\n@@ -4330,1 +4330,1 @@\n-                                lint.logIfEnabled(log, pos, LintWarnings.MissingExplicitCtor(c, pkg, modle)));\n+                                lint.logIfEnabled(pos, LintWarnings.MissingExplicitCtor(c, pkg, modle)));\n@@ -4366,1 +4366,1 @@\n-                        Check.this.lint.logIfEnabled(log, pos(), LintWarnings.VarargsUnsafeUseVarargsParam(method.params.last()));\n+                        Check.this.lint.logIfEnabled(pos(), LintWarnings.VarargsUnsafeUseVarargsParam(method.params.last()));\n@@ -4665,1 +4665,1 @@\n-                lint.logIfEnabled(log, pos, LintWarnings.ModuleNotFound(msym)));\n+                lint.logIfEnabled(pos, LintWarnings.ModuleNotFound(msym)));\n@@ -4673,1 +4673,1 @@\n-                lint.logIfEnabled(log, pos, LintWarnings.PackageEmptyOrNotFound(packge)));\n+                lint.logIfEnabled(pos, LintWarnings.PackageEmptyOrNotFound(packge)));\n@@ -4683,1 +4683,1 @@\n-                    lint.logIfEnabled(log, pos, LintWarnings.RequiresAutomatic);\n+                    lint.logIfEnabled(pos, LintWarnings.RequiresAutomatic);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -727,1 +727,1 @@\n-                    lint.logIfEnabled(log, l.tail.head.pos(),\n+                    lint.logIfEnabled(l.tail.head.pos(),\n@@ -1235,1 +1235,1 @@\n-                    lint.logIfEnabled(log, TreeInfo.diagEndPos(tree.finalizer),\n+                    lint.logIfEnabled(TreeInfo.diagEndPos(tree.finalizer),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -228,1 +228,1 @@\n-                    lint.logIfEnabled(log, LintWarnings.InvalidPath(s));\n+                    lint.logIfEnabled(LintWarnings.InvalidPath(s));\n@@ -322,1 +322,1 @@\n-                    lint.logIfEnabled(log, LintWarnings.DirPathElementNotFound(dir));\n+                    lint.logIfEnabled(LintWarnings.DirPathElementNotFound(dir));\n@@ -367,1 +367,1 @@\n-                    lint.logIfEnabled(log, LintWarnings.PathElementNotFound(file));\n+                    lint.logIfEnabled(LintWarnings.PathElementNotFound(file));\n@@ -389,1 +389,1 @@\n-                                lint.logIfEnabled(log, LintWarnings.UnexpectedArchiveFile(file));\n+                                lint.logIfEnabled(LintWarnings.UnexpectedArchiveFile(file));\n@@ -394,1 +394,1 @@\n-                                lint.logIfEnabled(log, LintWarnings.InvalidArchiveFile(file));\n+                                lint.logIfEnabled(LintWarnings.InvalidArchiveFile(file));\n@@ -1657,1 +1657,1 @@\n-                lint.logIfEnabled(log, Files.exists(prefix) ?\n+                lint.logIfEnabled(Files.exists(prefix) ?\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/file\/Locations.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -857,1 +857,1 @@\n-                        lint.logIfEnabled(log,\n+                        lint.logIfEnabled(\n@@ -1611,1 +1611,1 @@\n-            lint.logIfEnabled(log, LintWarnings.RuntimeVisibleInvisibleParamAnnotationsMismatch(currentClassFile));\n+            lint.logIfEnabled(LintWarnings.RuntimeVisibleInvisibleParamAnnotationsMismatch(currentClassFile));\n@@ -2077,1 +2077,1 @@\n-                    lint.logIfEnabled(log, LintWarnings.AnnotationMethodNotFound(container, name));\n+                    lint.logIfEnabled(LintWarnings.AnnotationMethodNotFound(container, name));\n@@ -2079,1 +2079,1 @@\n-                    lint.logIfEnabled(log, LintWarnings.AnnotationMethodNotFoundReason(container,\n+                    lint.logIfEnabled(LintWarnings.AnnotationMethodNotFoundReason(container,\n@@ -2957,1 +2957,1 @@\n-        lint.logIfEnabled(log, LintWarnings.RuntimeInvisibleParameterAnnotations(currentClassFile));\n+        lint.logIfEnabled(LintWarnings.RuntimeInvisibleParameterAnnotations(currentClassFile));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -227,1 +227,1 @@\n-            deferredLintHandler.report(lint -> lint.logIfEnabled(log, new SimpleDiagnosticPosition(pos), key));\n+            deferredLintHandler.report(lint -> lint.logIfEnabled(new SimpleDiagnosticPosition(pos), key));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavaTokenizer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -710,1 +710,1 @@\n-            lint.logIfEnabled(log, LintWarnings.ProcIllegalFileName(name));\n+            lint.logIfEnabled(LintWarnings.ProcIllegalFileName(name));\n@@ -738,1 +738,1 @@\n-            lint.logIfEnabled(log, LintWarnings.ProcTypeRecreate(typename));\n+            lint.logIfEnabled(LintWarnings.ProcTypeRecreate(typename));\n@@ -742,1 +742,1 @@\n-            lint.logIfEnabled(log, LintWarnings.ProcTypeAlreadyExists(typename));\n+            lint.logIfEnabled(LintWarnings.ProcTypeAlreadyExists(typename));\n@@ -771,1 +771,1 @@\n-            lint.logIfEnabled(log, LintWarnings.ProcFileReopening(fileObject.getName()));\n+            lint.logIfEnabled(LintWarnings.ProcFileReopening(fileObject.getName()));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacFiler.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -652,1 +652,1 @@\n-                        lint.logIfEnabled(log, LintWarnings.ProcDuplicateSupportedAnnotation(annotationPattern,\n+                        lint.logIfEnabled(LintWarnings.ProcDuplicateSupportedAnnotation(annotationPattern,\n@@ -665,1 +665,1 @@\n-                    lint.logIfEnabled(log, LintWarnings.ProcRedundantTypesWithWildcard(p.getClass().getName()));\n+                    lint.logIfEnabled(LintWarnings.ProcRedundantTypesWithWildcard(p.getClass().getName()));\n@@ -673,1 +673,1 @@\n-                            lint.logIfEnabled(log, LintWarnings.ProcDuplicateOptionName(optionName,\n+                            lint.logIfEnabled(LintWarnings.ProcDuplicateOptionName(optionName,\n@@ -1690,1 +1690,1 @@\n-        lint.logIfEnabled(log, LintWarnings.ProcMalformedSupportedString(s, p.getClass().getName()));\n+        lint.logIfEnabled(LintWarnings.ProcMalformedSupportedString(s, p.getClass().getName()));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacProcessingEnvironment.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}