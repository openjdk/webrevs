{"files":[{"patch":"@@ -145,1 +145,3 @@\n-\/\/ available here means free\n+\/\/ Available here means free. Note that this number is of no much use. As an estimate\n+\/\/ for future memory pressure it is far too conservative, since MacOS will use a lot\n+\/\/ of unused memory for caches, and return it willingly in case of needs.\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2514,0 +2514,5 @@\n+\/\/ Available memory of the host machine (container-aware)\n+WB_ENTRY(jlong, WB_HostAvailableMemory(JNIEnv* env, jobject o))\n+  return os::available_memory();\n+WB_END\n+\n@@ -2983,0 +2988,1 @@\n+  {CC\"hostAvailableMemory\",       CC\"()J\",            (void*)&WB_HostAvailableMemory },\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -94,6 +94,0 @@\n-gc\/TestAlwaysPreTouchBehavior.java#ParallelCollector 8334513 generic-all\n-gc\/TestAlwaysPreTouchBehavior.java#SerialCollector 8334513 generic-all\n-gc\/TestAlwaysPreTouchBehavior.java#Shenandoah 8334513 generic-all\n-gc\/TestAlwaysPreTouchBehavior.java#G1 8334513 generic-all\n-gc\/TestAlwaysPreTouchBehavior.java#Z 8334513 generic-all\n-gc\/TestAlwaysPreTouchBehavior.java#Epsilon 8334513 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,1 +3,2 @@\n- * Copyright (c) 2024, Red Hat Inc.\n+ * Copyright (c) 2024, 2025, Red Hat Inc.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +33,2 @@\n- * @requires os.family != \"aix\"\n+ * @requires !vm.debug\n+ * @requires os.family == \"linux\"\n@@ -36,1 +38,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xmx512m -Xms512m -XX:+UseParallelGC -XX:+AlwaysPreTouch gc.TestAlwaysPreTouchBehavior\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xmx256m -Xms256m -XX:+UseParallelGC -XX:+AlwaysPreTouch gc.TestAlwaysPreTouchBehavior\n@@ -39,1 +41,1 @@\n- \/**\n+\/**\n@@ -44,1 +46,2 @@\n- * @requires os.family != \"aix\"\n+ * @requires !vm.debug\n+ * @requires os.family == \"linux\"\n@@ -48,1 +51,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xmx512m -Xms512m -XX:+UseSerialGC -XX:+AlwaysPreTouch gc.TestAlwaysPreTouchBehavior\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xmx256m -Xms256m -XX:+UseSerialGC -XX:+AlwaysPreTouch gc.TestAlwaysPreTouchBehavior\n@@ -56,1 +59,2 @@\n- * @requires os.family != \"aix\"\n+ * @requires !vm.debug\n+ * @requires os.family == \"linux\"\n@@ -60,1 +64,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xmx512m -Xms512m -XX:+UseShenandoahGC  -XX:+AlwaysPreTouch gc.TestAlwaysPreTouchBehavior\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xmx256m -Xms256m -XX:+UseShenandoahGC  -XX:+AlwaysPreTouch gc.TestAlwaysPreTouchBehavior\n@@ -68,1 +72,2 @@\n- * @requires os.family != \"aix\"\n+ * @requires !vm.debug\n+ * @requires os.family == \"linux\"\n@@ -72,1 +77,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xmx512m -Xms512m -XX:+AlwaysPreTouch gc.TestAlwaysPreTouchBehavior\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xmx256m -Xms256m -XX:+AlwaysPreTouch gc.TestAlwaysPreTouchBehavior\n@@ -80,1 +85,2 @@\n- * @requires os.family != \"aix\"\n+ * @requires !vm.debug\n+ * @requires os.family == \"linux\"\n@@ -84,1 +90,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UseZGC -Xmx512m -Xms512m -XX:+AlwaysPreTouch gc.TestAlwaysPreTouchBehavior\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UseZGC -Xmx256m -Xms256m -XX:+AlwaysPreTouch gc.TestAlwaysPreTouchBehavior\n@@ -92,1 +98,2 @@\n- * @requires os.family != \"aix\"\n+ * @requires !vm.debug\n+ * @requires os.family == \"linux\"\n@@ -96,1 +103,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -Xmx512m -Xms512m -XX:+AlwaysPreTouch gc.TestAlwaysPreTouchBehavior\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -Xmx256m -Xms256m -XX:+AlwaysPreTouch gc.TestAlwaysPreTouchBehavior\n@@ -99,1 +106,0 @@\n-\n@@ -103,0 +109,1 @@\n+import jtreg.SkippedException;\n@@ -105,0 +112,22 @@\n+    \/\/\n+    \/\/    This test tests the ability of the JVM to pretouch its java heap for test purposes (AlwaysPreTouch). We start a\n+    \/\/    JVM with -XX:+AlwaysPreTouch, then observe RSS and expect to see RSS covering the entirety of the java heap,\n+    \/\/    since it should all be pre-touched now.\n+    \/\/\n+    \/\/    This test is important (we had pretouching break before) but very shaky since RSS of the JVM process is subject to\n+    \/\/    host machine conditions. If there is memory pressure, we may swap parts of the heap out after pretouching and\n+    \/\/    before measuring RSS, thus tainting the result.\n+    \/\/\n+    \/\/    This test attempts to minimize the risk of false positives stemming from memory pressure by:\n+    \/\/    - specifying @requires os.maxMemory > 2G\n+    \/\/    - checking  if the memory still available on the host machine after starting the process is lower than a\n+    \/\/      certain required threshold; if it is, we take this as a sign of memory pressure and disregard test errors.\n+    \/\/    - we only run this test with release JVMs - debug JVMs have a higher and more unpredictable RSS footprint\n+    \/\/      and therefore would require a larger heap for a clear difference between non-pretouch and pretouch; also,\n+    \/\/      there should not be much difference between debug and release code.\n+    \/\/\n+    \/\/    Obviously, all of this is not bulletproof and only useful on Linux:\n+    \/\/    - On MacOS, os::available_memory() drastically underreports available memory, so this technique would almost\n+    \/\/      always fail to function\n+    \/\/    - On AIX, we dont have a way to measure rss yet.\n+    \/\/\n@@ -107,5 +136,24 @@\n-    long rss = WhiteBox.getWhiteBox().rss();\n-    System.out.println(\"RSS: \" + rss);\n-    if (rss == 0) {\n-        System.out.println(\"cannot get RSS, just skip\");\n-        return; \/\/ Did not get available RSS, just ignore this test.\n+        long rss = WhiteBox.getWhiteBox().rss();\n+        System.out.println(\"RSS: \" + rss);\n+        long available = WhiteBox.getWhiteBox().hostAvailableMemory();\n+        System.out.println(\"Host available memory: \" + available);\n+\n+        long heapSize = 256 * 1024 * 1024;\n+\n+        \/\/ On Linux, a JVM that runs with 256M pre-committed heap will use about 60MB (release JVM) RSS. Barring\n+        \/\/ memory pressure that causes us to lose RSS, pretouching should increase RSS to >256MB. So there should be a\n+        \/\/ clear distinction between non-pretouched and pretouched.\n+        long minRequiredRss = heapSize;\n+\n+        \/\/ The minimum required available memory size to count test errors as errors (to somewhat safely disregard\n+        \/\/ outside memory pressure as the culprit). We are over-cautious and require at least 1G free. We rather err\n+        \/\/ on the side of disregarding true errors than to produce false positives (if pretouching is broken, at least\n+        \/\/ some of the runs of this test will run on beefy enough machines and show the test as failed).\n+        long requiredAvailable = 1024 * 1024 * 1024;\n+        if (rss == 0) {\n+            throw new SkippedException(\"cannot get RSS?\");\n+        }\n+        if (available > requiredAvailable) {\n+            Asserts.assertGreaterThan(rss, minRequiredRss, \"RSS of this process(\" + rss + \"b) should be bigger \" +\n+                                      \"than or equal to heap size(\" + heapSize + \"b) (available memory: \" + available + \")\");\n+        }\n@@ -113,4 +161,0 @@\n-    Runtime runtime = Runtime.getRuntime();\n-    long committedMemory = runtime.totalMemory();\n-    Asserts.assertGreaterThan(rss, committedMemory, \"RSS of this process(\" + rss + \"b) should be bigger than or equal to committed heap mem(\" + committedMemory + \"b)\");\n-   }\n@@ -118,1 +162,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/gc\/TestAlwaysPreTouchBehavior.java","additions":68,"deletions":25,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -819,0 +819,1 @@\n+  public native long hostAvailableMemory();\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}