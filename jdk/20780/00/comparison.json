{"files":[{"patch":"@@ -65,1 +65,2 @@\n-    public final void writeAttribute(BufWriter buf, T attr) {\n+    public final void writeAttribute(BufWriter writer, T attr) {\n+        BufWriterImpl buf = (BufWriterImpl) writer;\n@@ -67,1 +68,1 @@\n-        buf.writeInt(0);\n+        buf.skip(4);\n@@ -71,1 +72,1 @@\n-        buf.patchInt(start - 4, 4, written);\n+        buf.patchInt(start - 4, written);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -449,1 +449,1 @@\n-                        pool.patchInt(pool.size() - i - 2, 2, byteLengthFinal);\n+                        pool.patchU2(pool.size() - i - 2, byteLengthFinal);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -170,0 +170,14 @@\n+    public void patchU2(int offset, int x) {\n+        byte[] elems = this.elems;\n+        elems[offset    ] = (byte) (x >> 8);\n+        elems[offset + 1] = (byte)  x;\n+    }\n+\n+    public void patchInt(int offset, int x) {\n+        byte[] elems = this.elems;\n+        elems[offset    ] = (byte) (x >> 24);\n+        elems[offset + 1] = (byte) (x >> 16);\n+        elems[offset + 2] = (byte) (x >> 8);\n+        elems[offset + 3] = (byte)  x;\n+    }\n+\n@@ -178,0 +192,8 @@\n+    public void skip(int skipSize) {\n+        int nextOffset = offset + skipSize;\n+        if (nextOffset > elems.length) {\n+            grow(nextOffset);\n+        }\n+        this.offset = nextOffset;\n+    }\n+\n@@ -221,1 +243,1 @@\n-            writeU2(0);\n+            skip(2);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufWriterImpl.java","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -195,1 +195,1 @@\n-            tail.patchInt(attributesOffset, 2, attributes.size() + 1);\n+            tail.patchU2(attributesOffset, attributes.size() + 1);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectClassBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -209,1 +209,1 @@\n-            buf.patchInt(pos, 2, handlersSize);\n+            buf.patchU2(pos, handlersSize);\n@@ -246,1 +246,1 @@\n-                            b.patchInt(pos, 2, crSize);\n+                            b.patchU2(pos, crSize);\n@@ -269,1 +269,1 @@\n-                            b.patchInt(pos, 2, lvSize);\n+                            b.patchU2(pos, lvSize);\n@@ -292,1 +292,1 @@\n-                            b.patchInt(pos, 2, lvtSize);\n+                            b.patchU2(pos, lvtSize);\n@@ -472,2 +472,7 @@\n-                if (dl.size == 2 && (short)branchOffset != branchOffset) throw new LabelOverflowException();\n-                bytecodesBufWriter.patchInt(dl.labelPc, dl.size, branchOffset);\n+                if (dl.size == 2) {\n+                    if ((short)branchOffset != branchOffset) throw new LabelOverflowException();\n+                    bytecodesBufWriter.patchU2(dl.labelPc, branchOffset);\n+                } else {\n+                    assert dl.size == 4;\n+                    bytecodesBufWriter.patchInt(dl.labelPc, branchOffset);\n+                }\n@@ -593,1 +598,1 @@\n-        bytecodesBufWriter.writeU1(0);\n+        bytecodesBufWriter.skip(1);\n@@ -599,1 +604,1 @@\n-        bytecodesBufWriter.writeU2(0);\n+        bytecodesBufWriter.skip(2);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -145,2 +145,2 @@\n-            buf.patchInt(pos + 2, 4, attrLen - 6);\n-            buf.patchInt(pos + 6, 2, bsmSize);\n+            buf.patchInt(pos + 2, attrLen - 6);\n+            buf.patchU2(pos + 6, bsmSize);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SplitConstantPool.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -852,1 +852,1 @@\n-            b.writeInt(0);\n+            b.skip(4);\n@@ -856,1 +856,1 @@\n-            b.patchInt(start - 4, 4, written);\n+            b.patchInt(start - 4, written);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/UnboundAttribute.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -284,2 +284,2 @@\n-                                    b.writeU2(0);\/\/exception handlers\n-                                    b.writeU2(0);\/\/attributes\n+                                    b.skip(2);\/\/exception handlers\n+                                    b.skip(2);\/\/attributes\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Util.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}