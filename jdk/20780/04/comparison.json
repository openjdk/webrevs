{"files":[{"patch":"@@ -65,1 +65,2 @@\n-    public final void writeAttribute(BufWriter buf, T attr) {\n+    public final void writeAttribute(BufWriter writer, T attr) {\n+        BufWriterImpl buf = (BufWriterImpl) writer;\n@@ -71,1 +72,1 @@\n-        buf.patchInt(start - 4, 4, written);\n+        buf.patchInt(start - 4, written);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -449,1 +449,1 @@\n-                        pool.patchInt(pool.size() - i - 2, 2, byteLengthFinal);\n+                        pool.patchU2(pool.size() - i - 2, byteLengthFinal);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -170,0 +170,14 @@\n+    public void patchU2(int offset, int x) {\n+        byte[] elems = this.elems;\n+        elems[offset    ] = (byte) (x >> 8);\n+        elems[offset + 1] = (byte)  x;\n+    }\n+\n+    public void patchInt(int offset, int x) {\n+        byte[] elems = this.elems;\n+        elems[offset    ] = (byte) (x >> 24);\n+        elems[offset + 1] = (byte) (x >> 16);\n+        elems[offset + 2] = (byte) (x >> 8);\n+        elems[offset + 3] = (byte)  x;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufWriterImpl.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -195,1 +195,1 @@\n-            tail.patchInt(attributesOffset, 2, attributes.size() + 1);\n+            tail.patchU2(attributesOffset, attributes.size() + 1);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectClassBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -212,1 +212,1 @@\n-            buf.patchInt(pos, 2, handlersSize);\n+            buf.patchU2(pos, handlersSize);\n@@ -249,1 +249,1 @@\n-                            b.patchInt(pos, 2, crSize);\n+                            b.patchU2(pos, crSize);\n@@ -272,1 +272,1 @@\n-                            b.patchInt(pos, 2, lvSize);\n+                            b.patchU2(pos, lvSize);\n@@ -295,1 +295,1 @@\n-                            b.patchInt(pos, 2, lvtSize);\n+                            b.patchU2(pos, lvtSize);\n@@ -475,2 +475,7 @@\n-                if (dl.size == 2 && (short)branchOffset != branchOffset) throw new LabelOverflowException();\n-                bytecodesBufWriter.patchInt(dl.labelPc, dl.size, branchOffset);\n+                if (dl.size == 2) {\n+                    if ((short)branchOffset != branchOffset) throw new LabelOverflowException();\n+                    bytecodesBufWriter.patchU2(dl.labelPc, branchOffset);\n+                } else {\n+                    assert dl.size == 4;\n+                    bytecodesBufWriter.patchInt(dl.labelPc, branchOffset);\n+                }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -145,2 +145,2 @@\n-            buf.patchInt(pos + 2, 4, attrLen - 6);\n-            buf.patchInt(pos + 6, 2, bsmSize);\n+            buf.patchInt(pos + 2, attrLen - 6);\n+            buf.patchU2(pos + 6, bsmSize);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SplitConstantPool.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -856,1 +856,1 @@\n-            b.patchInt(start - 4, 4, written);\n+            b.patchInt(start - 4, written);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/UnboundAttribute.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}