{"files":[{"patch":"@@ -129,2 +129,0 @@\n-    static final int SOME_ALIASES_NOT_FOUND = 0x10;\n-    \/\/ at least one signer alias is not in keystore\n@@ -237,1 +235,0 @@\n-    private boolean allAliasesFound = true;\n@@ -344,1 +341,1 @@\n-            if (notSignedByAlias || aliasNotInStore) {\n+            if (notSignedByAlias) {\n@@ -850,2 +847,0 @@\n-                    allAliasesFound =\n-                        (inStoreWithAlias & SOME_ALIASES_NOT_FOUND) == 0;\n@@ -1183,1 +1178,1 @@\n-        if (!allAliasesFound) {\n+        if (aliasNotInStore) {\n@@ -1736,1 +1731,0 @@\n-        boolean allAliasesFound = true;\n@@ -1741,0 +1735,1 @@\n+                boolean isEndEntityCert = true;\n@@ -1747,2 +1742,0 @@\n-                        } else {\n-                            allAliasesFound = false;\n@@ -1751,10 +1744,10 @@\n-                    if (alias != null) {\n-                        result |= IN_KEYSTORE;\n-                    }\n-                    for (String ckalias : ckaliases) {\n-                        if (c.equals(store.getCertificate(ckalias))) {\n-                            result |= SIGNED_BY_ALIAS;\n-                            \/\/ must continue with next certificate c and cannot\n-                            \/\/ return or break outer loop because has to fill\n-                            \/\/ storeHash for printCert\n-                            break;\n+                    if (isEndEntityCert) {\n+                        \/\/ Only count end-entity cert as signer\n+                        if (alias != null) {\n+                            result |= IN_KEYSTORE;\n+                        }\n+                        for (String ckalias : ckaliases) {\n+                            if (c.equals(store.getCertificate(ckalias))) {\n+                                result |= SIGNED_BY_ALIAS;\n+                                break;\n+                            }\n@@ -1763,0 +1756,4 @@\n+                    isEndEntityCert = false;\n+                    \/\/ must continue with next certificate c and cannot\n+                    \/\/ return or break outer loop because has to fill\n+                    \/\/ storeHash for printCert\n@@ -1768,3 +1765,0 @@\n-        if (!allAliasesFound) {\n-            result |= SOME_ALIASES_NOT_FOUND;\n-        }\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":17,"deletions":23,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8330217\n+ * @summary correct warnings on whether signer is in keystore and listed\n+ * @library \/test\/lib\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.SecurityTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.util.JarUtils;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class ByAlias {\n+    static OutputAnalyzer kt(String cmd) throws Exception {\n+        return SecurityTools.keytool(\"-storepass changeit \"\n+                + \"-ext bc -keypass changeit -keystore ks \" + cmd);\n+        \/\/ Add \"-ext bc\" to avoid CertPath validation failure.\n+        \/\/ It's harmless to add it to an end-entity cert.\n+    }\n+\n+    static void selfsign(String name) throws Exception {\n+        kt(\"-alias \" + name + \" -dname CN=\" + name + \" -keyalg ec -genkey\");\n+    }\n+\n+    static void gencert(String signer, String owner) throws Exception {\n+        selfsign(owner);\n+        kt(\"-certreq -alias \" + owner + \" -file tmp.req\")\n+                .shouldHaveExitValue(0);\n+        kt(\"-gencert -infile tmp.req -outfile tmp.cert -alias \" + signer)\n+                .shouldHaveExitValue(0);\n+        kt(\"-import -alias \" + owner + \" -file tmp.cert\")\n+                .shouldHaveExitValue(0);\n+    }\n+\n+    static OutputAnalyzer js(String cmd) throws Exception {\n+        return SecurityTools.jarsigner(\"-keystore ks -storepass changeit \" + cmd);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        JarUtils.createJarFile(Path.of(\"a.jar\"), Path.of(\".\"),\n+                Files.writeString(Path.of(\"a\"), \"a\"));\n+\n+        selfsign(\"ca\");\n+        gencert(\"ca\", \"ca1\");\n+        gencert(\"ca1\", \"ee\");\n+        selfsign(\"n1\");\n+        selfsign(\"n2\");\n+\n+        js(\"a.jar ee\");\n+\n+        \/\/ Everything is good at the beginning\n+        js(\"-verify a.jar ee\")\n+                .shouldNotContain(\"not signed by the specified alias(es)\")\n+                .shouldNotContain(\"not signed by alias in this keystore\");\n+\n+        js(\"-verify a.jar ca1\") \/\/ ca1 is not the signer\n+                .shouldContain(\"not signed by the specified alias(es)\")\n+                .shouldNotContain(\"not signed by alias in this keystore\");\n+\n+        js(\"-verify a.jar ca1 -strict\") \/\/ notSignedByAlias is severe\n+                .shouldContainOrderedSequence(\"Error:\",\n+                        \"not signed by the specified alias(es)\",\n+                        \"Warning:\")\n+                .shouldNotContain(\"not signed by alias in this keystore\")\n+                .shouldHaveExitValue(32);\n+\n+        \/\/ Remove intermediate cert from ks. Still good.\n+        kt(\"-delete -alias ca1\");\n+        js(\"-verify a.jar ee\")\n+                .shouldNotContain(\"not signed by alias in this keystore\");\n+\n+        \/\/ End-entity cert is removed. Warn now.\n+        kt(\"-delete -alias ee\");\n+        js(\"-verify a.jar\")\n+                .shouldContain(\"not signed by alias in this keystore\");\n+\n+        js(\"-verify a.jar -strict\") \/\/ aliasNotInStore is informational\n+                .shouldContain(\"not signed by alias in this keystore\")\n+                .shouldNotContain(\"Error:\")\n+                .shouldHaveExitValue(0);\n+\n+        \/\/ Sign with different signer n1\n+        js(\"a.jar n1\");\n+\n+        \/\/ Add a new file and sign with different signer n2\n+        JarUtils.updateJarFile(Path.of(\"a.jar\"), Path.of(\".\"),\n+                Files.writeString(Path.of(\"b\"), \"b\"));\n+        js(\"a.jar n2\");\n+\n+        \/\/ Now a signed with n1 and n2, b signed with n2\n+        js(\"-verify a.jar\")\n+                .shouldNotContain(\"not signed by alias in this keystore\");\n+\n+        \/\/ If n2 is removed, then b has no signer\n+        kt(\"-delete -alias n2\");\n+        var exit = js(\"-verify a.jar\")\n+                .shouldContain(\"not signed by alias in this keystore\");\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/ByAlias.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,1 +82,2 @@\n-        SecurityTools.jarsigner(\"-keystore trust.jks -storepass changeit \"\n+        \/\/ Verify with own keystore is perfect.\n+        SecurityTools.jarsigner(\"-keystore js.jks -storepass changeit \"\n@@ -84,0 +85,6 @@\n+                .shouldNotContain(\"not signed by alias in this keystore\")\n+                .shouldHaveExitValue(0);\n+        \/\/ Verify with only CA keystore is mostly OK\n+        SecurityTools.jarsigner(\"-keystore trust.jks -storepass changeit \"\n+                        + \"-strict -verify a.jar\")\n+                .shouldContain(\"not signed by alias in this keystore\")\n@@ -90,0 +97,2 @@\n+                .shouldContainOrderedSequence(\"Error:\", \"certificate chain is invalid\", \"Warning:\")\n+                .shouldNotContain(\"not signed by alias in this keystore\")\n@@ -93,1 +102,1 @@\n-        \/\/ \"chain invalid\" and \"not alias in keystore\"\n+        \/\/ \"chain invalid\" and the warning is \"not alias in keystore\"\n@@ -97,1 +106,3 @@\n-                .shouldHaveExitValue(36);\n+                .shouldContainOrderedSequence(\"Error:\", \"certificate chain is invalid\", \"Warning:\")\n+                .shouldContainOrderedSequence(\"Warning:\", \"not signed by alias in this keystore\")\n+                .shouldHaveExitValue(4);\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/CheckUsage.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,2 +120,1 @@\n-        int expectedExitCode = ALIAS_NOT_IN_STORE_EXIT_CODE\n-                + CHAIN_NOT_VALIDATED_EXIT_CODE;\n+        int expectedExitCode = CHAIN_NOT_VALIDATED_EXIT_CODE;\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/warnings\/AliasNotInStoreTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -167,1 +167,0 @@\n-    static final int ALIAS_NOT_IN_STORE_EXIT_CODE = 32;\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/warnings\/Test.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -245,1 +245,0 @@\n-    }\n@@ -247,0 +246,26 @@\n+        \/\/ Multi lines\n+        OutputAnalyzer multi = new OutputAnalyzer(\"\"\"\n+                first\n+                second\n+                third\n+                fourth\n+                fifth\n+                \"\"\", \"\");\n+        multi.shouldContainOrderedSequence();\n+        multi.shouldContainOrderedSequence(\"first\");\n+        multi.shouldContainOrderedSequence(\"first\", \"third\", \"fifth\");\n+        multi.shouldContainOrderedSequence(\"fir\", \"ird\", \"fif\");\n+        multi.shouldContainOrderedSequence(\"second\", \"fourth\");\n+        try {\n+            multi.shouldContainOrderedSequence(\"second\", \"first\");\n+            throw new RuntimeException(\"Should not succeed\");\n+        } catch (RuntimeException e) {\n+            \/\/ good\n+        }\n+        try {\n+            multi.shouldContainOrderedSequence(\"second\", \"sixth\");\n+            throw new RuntimeException(\"Should not succeed\");\n+        } catch (RuntimeException e) {\n+            \/\/ good\n+        }\n+    }\n","filename":"test\/lib-test\/jdk\/test\/lib\/process\/OutputAnalyzerTest.java","additions":27,"deletions":2,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -900,0 +900,21 @@\n+    \/**\n+     * Verify that lines in the stdout and stderr contents of output buffer\n+     * contains each item of strings, in the order they appear. Note that\n+     * two items cannot appear in the same line.\n+     *\n+     * @param strings Strings that buffer should contain\n+     * @throws RuntimeException If not all string are found\n+     *\/\n+    public OutputAnalyzer shouldContainOrderedSequence(String... strings) {\n+        String[] lines = asLines().toArray(new String[0]);\n+        int elementIndex = 0;\n+        for (String line : lines) {\n+            if (elementIndex < strings.length && line.contains(strings[elementIndex])) {\n+                elementIndex++;\n+            }\n+        }\n+        if (elementIndex != strings.length) {\n+            throw new RuntimeException(\"Elements do not appear in the correct order.\");\n+        }\n+        return this;\n+    }\n","filename":"test\/lib\/jdk\/test\/lib\/process\/OutputAnalyzer.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"}]}