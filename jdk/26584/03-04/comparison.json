{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import java.time.Duration;\n@@ -299,1 +300,1 @@\n-                TKit.waitForFileCreated(appOutput, 7);\n+                TKit.waitForFileCreated(appOutput, Duration.ofSeconds(7), Duration.ofSeconds(3));\n@@ -301,5 +302,1 @@\n-                \/\/ Wait a little bit after file has been created to\n-                \/\/ make sure there are no pending writes into it.\n-                Thread.sleep(3000);\n-                HelloApp.verifyOutputFile(appOutput, expectedArgs,\n-                        Collections.emptyMap());\n+                HelloApp.verifyOutputFile(appOutput, expectedArgs, Map.of());\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/PackageTest.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -46,0 +46,2 @@\n+import java.time.Duration;\n+import java.time.Instant;\n@@ -600,2 +602,8 @@\n-    static void waitForFileCreated(Path fileToWaitFor,\n-            long timeoutSeconds) throws IOException {\n+    public static void waitForFileCreated(Path fileToWaitFor,\n+            Duration timeout, Duration afterCreatedTimeout) throws IOException {\n+        waitForFileCreated(fileToWaitFor, timeout);\n+        \/\/ Wait after the file has been created to ensure it is fully written.\n+        ThrowingConsumer.<Duration>toConsumer(Thread::sleep).accept(afterCreatedTimeout);\n+    }\n+\n+    private static void waitForFileCreated(Path fileToWaitFor, Duration timeout) throws IOException {\n@@ -611,1 +619,1 @@\n-        long waitUntil = System.currentTimeMillis() + timeoutSeconds * 1000;\n+        var waitUntil = Instant.now().plus(timeout);\n@@ -613,3 +621,3 @@\n-            long timeout = waitUntil - System.currentTimeMillis();\n-            assertTrue(timeout > 0, String.format(\n-                    \"Check timeout value %d is positive\", timeout));\n+            var remainderTimeout = Instant.now().until(waitUntil);\n+            assertTrue(remainderTimeout.isPositive(), String.format(\n+                    \"Check timeout value %dms is positive\", remainderTimeout.toMillis()));\n@@ -617,2 +625,3 @@\n-            WatchKey key = ThrowingSupplier.toSupplier(() -> ws.poll(timeout,\n-                    TimeUnit.MILLISECONDS)).get();\n+            WatchKey key = ThrowingSupplier.toSupplier(() -> {\n+                return ws.poll(remainderTimeout.toMillis(), TimeUnit.MILLISECONDS);\n+            }).get();\n@@ -620,1 +629,1 @@\n-                if (fileToWaitFor.toFile().exists()) {\n+                if (Files.exists(fileToWaitFor)) {\n@@ -626,1 +635,1 @@\n-                assertUnexpected(String.format(\"Timeout expired\", timeout));\n+                assertUnexpected(String.format(\"Timeout expired\", remainderTimeout));\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TKit.java","additions":19,"deletions":10,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.time.Duration;\n@@ -31,1 +32,0 @@\n-import java.util.NoSuchElementException;\n@@ -36,1 +36,0 @@\n-import jdk.jpackage.test.Annotations.ParameterSupplier;\n@@ -38,0 +37,1 @@\n+import jdk.jpackage.test.Annotations.ParameterSupplier;\n@@ -39,1 +39,0 @@\n-import jdk.jpackage.test.Executor;\n@@ -275,5 +274,1 @@\n-            Executor.tryRunMultipleTimes(() -> {\n-                if (!Files.exists(expectedOutputFile)) {\n-                    throw new NoSuchElementException(String.format(\"[%s] is not avaialble\", expectedOutputFile));\n-                }\n-            }, 3 \/* Number of attempts *\/, 3 \/* Seconds between attempts *\/);\n+            TKit.waitForFileCreated(expectedOutputFile, Duration.ofSeconds(10), Duration.ofSeconds(3));\n","filename":"test\/jdk\/tools\/jpackage\/share\/AddLShortcutTest.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"}]}