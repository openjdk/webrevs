{"files":[{"patch":"@@ -76,0 +76,3 @@\n+\n+      # Convert variable part of stack trace entry `at jdk.jpackage.test.JPackageCommand.execute(JPackageCommand.java:863)`\n+      -e 's\/^\\(.*\\b\\.java:\\)[0-9]\\{1,\\}\\()\\r\\{0,1\\}\\)$\/\\1N\\2\/'\n","filename":"test\/jdk\/tools\/jpackage\/clean_test_output.sh","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -93,0 +93,1 @@\n+        unpackedPackageDirectory = cmd.unpackedPackageDirectory;\n@@ -487,1 +488,1 @@\n-        return getArgumentValue(UNPACKED_PATH_ARGNAME, () -> null, Path::of);\n+        return unpackedPackageDirectory;\n@@ -665,1 +666,1 @@\n-        return hasArgument(UNPACKED_PATH_ARGNAME);\n+        return unpackedPackageDirectory != null;\n@@ -1163,3 +1164,2 @@\n-            if (TKit.isOSX()) {\n-                final Path rootDir = isImagePackageType() ? outputBundle() :\n-                        pathToUnpackedPackageFile(appInstallationDirectory());\n+            final Path rootDir = isImagePackageType() ? outputBundle() :\n+                pathToUnpackedPackageFile(appInstallationDirectory());\n@@ -1167,1 +1167,1 @@\n-                AppImageFile aif = AppImageFile.load(rootDir);\n+            final AppImageFile aif = AppImageFile.load(rootDir);\n@@ -1169,0 +1169,1 @@\n+            if (TKit.isOSX()) {\n@@ -1179,0 +1180,5 @@\n+\n+            TKit.assertStringListEquals(\n+                    addLauncherNames().stream().sorted().toList(),\n+                    aif.addLaunchers().keySet().stream().sorted().toList(),\n+                    \"Check additional launcher names\");\n@@ -1262,5 +1268,1 @@\n-        if (path != null) {\n-            setArgumentValue(UNPACKED_PATH_ARGNAME, path);\n-        } else {\n-            removeArgumentWithValue(UNPACKED_PATH_ARGNAME);\n-        }\n+        unpackedPackageDirectory = path;\n@@ -1478,0 +1480,1 @@\n+    private Path unpackedPackageDirectory;\n@@ -1505,2 +1508,0 @@\n-    private static final String UNPACKED_PATH_ARGNAME = \"jpt-unpacked-folder\";\n-\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -88,1 +88,0 @@\n-        this.predefinedAppImagePropertyName = propertyName.substring(propertyName.indexOf('-') + 1);\n@@ -95,0 +94,4 @@\n+    public String appImageFilePropertyName() {\n+        return propertyName.substring(propertyName.indexOf('-') + 1);\n+    }\n+\n@@ -109,1 +112,1 @@\n-                propertyName[0] = this.predefinedAppImagePropertyName;\n+                propertyName[0] = appImageFilePropertyName();\n@@ -164,1 +167,0 @@\n-    private final String predefinedAppImagePropertyName;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LauncherShortcut.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.util.function.Predicate;\n@@ -509,0 +510,2 @@\n+        var appLayout = cmd.appLayout();\n+\n@@ -518,2 +521,2 @@\n-        }).ifPresentOrElse(shortcutWorkDir -> {\n-            var actualShortcutWorkDir = data.findQuotedValue(\"Path\");\n+        }).map(Path::toString).ifPresentOrElse(shortcutWorkDir -> {\n+            var actualShortcutWorkDir = data.find(\"Path\");\n@@ -523,1 +526,1 @@\n-            TKit.assertTrue(data.findQuotedValue(\"Path\").isEmpty(), \"Check there is no [Path] key\");\n+            TKit.assertTrue(data.find(\"Path\").isEmpty(), \"Check there is no [Path] key\");\n@@ -533,1 +536,1 @@\n-            Path expectedDir = cmd.pathToPackageFile(e.getValue().apply(cmd.appLayout()));\n+            Path expectedDir = cmd.pathToPackageFile(e.getValue().apply(appLayout));\n@@ -829,1 +832,1 @@\n-                var stream = lines.stream().skip(1);\n+                var stream = lines.stream().skip(1).filter(Predicate.not(String::isEmpty));\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LinuxHelper.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import jdk.jpackage.test.LauncherShortcut.StartupDirectory;\n@@ -200,2 +201,2 @@\n-        final boolean isWinMenu = WIN_START_MENU_SHORTCUT.expectShortcut(cmd, predefinedAppImage, launcherName).isPresent();\n-        final boolean isDesktop = WIN_DESKTOP_SHORTCUT.expectShortcut(cmd, predefinedAppImage, launcherName).isPresent();\n+        final var winMenu = WIN_START_MENU_SHORTCUT.expectShortcut(cmd, predefinedAppImage, launcherName);\n+        final var desktop = WIN_DESKTOP_SHORTCUT.expectShortcut(cmd, predefinedAppImage, launcherName);\n@@ -212,1 +213,1 @@\n-        final var workDir = Path.of(installRoot.getMsiPropertyName()).resolve(getInstallationSubDirectory(cmd));\n+        final var installDir = Path.of(installRoot.getMsiPropertyName()).resolve(getInstallationSubDirectory(cmd));\n@@ -214,1 +215,5 @@\n-        if (isWinMenu) {\n+        final Function<StartupDirectory, Path> workDir = startupDirectory -> {\n+            return installDir;\n+        };\n+\n+        if (winMenu.isPresent()) {\n@@ -221,1 +226,1 @@\n-            shortcuts.add(createLauncherShortcutSpec(cmd, launcherName, installRoot, workDir, type));\n+            shortcuts.add(createLauncherShortcutSpec(cmd, launcherName, installRoot, winMenu.map(workDir).orElseThrow(), type));\n@@ -224,1 +229,1 @@\n-        if (isDesktop) {\n+        if (desktop.isPresent()) {\n@@ -231,1 +236,1 @@\n-            shortcuts.add(createLauncherShortcutSpec(cmd, launcherName, installRoot, workDir, type));\n+            shortcuts.add(createLauncherShortcutSpec(cmd, launcherName, installRoot, desktop.map(workDir).orElseThrow(), type));\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/WinShortcutVerifier.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.jpackage.test.Annotations.Parameter;\n@@ -209,1 +210,2 @@\n-    public void testInvokeShortcuts() {\n+    @Parameter(value = \"DEFAULT\")\n+    public void testInvokeShortcuts(StartupDirectory startupDirectory) {\n@@ -223,1 +225,1 @@\n-        shortcutStartupDirectoryVerifier.applyTo(test, StartupDirectory.DEFAULT);\n+        shortcutStartupDirectoryVerifier.applyTo(test, startupDirectory);\n@@ -371,1 +373,1 @@\n-                    cmd.addArgument(shortcut.optionName() + \"=\" + value);\n+                    cmd.addArguments(shortcut.optionName(), value);\n","filename":"test\/jdk\/tools\/jpackage\/share\/AddLShortcutTest.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}