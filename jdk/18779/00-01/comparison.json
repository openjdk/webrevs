{"files":[{"patch":"@@ -412,1 +412,1 @@\n- *   return segment.asSlice(offset).maxByteAlignment() >= layout.byteAlignment;\n+ *   return segment.asSlice(offset).maxByteAlignment() >= layout.byteAlignment();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,5 +82,3 @@\n-        long alignment = Long.lowestOneBit(address());\n-        if (alignment == 0) {\n-            alignment = maxAlignMask();\n-        }\n-        return Math.min(maxAlignMask(), alignment);\n+        return address() == 0\n+            ? maxAlignMask()\n+            : Math.min(maxAlignMask(), Long.lowestOneBit(address()));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/HeapMemorySegmentImpl.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -64,2 +64,1 @@\n-        long alignment = Long.lowestOneBit(address());\n-        return alignment == 0\n+        return address() == 0\n@@ -67,2 +66,1 @@\n-                : alignment;\n-    }\n+                : Long.lowestOneBit(address());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}