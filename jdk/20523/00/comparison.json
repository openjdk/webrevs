{"files":[{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"gc\/z\/zUtils.hpp\"\n-#include \"utilities\/debug.hpp\"\n-#include \"utilities\/globalDefinitions.hpp\"\n-\n-#include <stdlib.h>\n-\n-uintptr_t ZUtils::alloc_aligned(size_t alignment, size_t size) {\n-  void* res = nullptr;\n-\n-  \/\/ Use raw posix_memalign as long as we have no wrapper for it\n-  ALLOW_C_FUNCTION(::posix_memalign, int rc = posix_memalign(&res, alignment, size);)\n-  if (rc != 0) {\n-    fatal(\"posix_memalign() failed\");\n-  }\n-\n-  memset(res, 0, size);\n-\n-  return (uintptr_t)res;\n-}\n","filename":"src\/hotspot\/os\/posix\/gc\/z\/zUtils_posix.cpp","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"gc\/z\/zUtils.hpp\"\n-#include \"utilities\/debug.hpp\"\n-\n-#include <malloc.h>\n-\n-uintptr_t ZUtils::alloc_aligned(size_t alignment, size_t size) {\n-  void* const res = _aligned_malloc(size, alignment);\n-\n-  if (res == nullptr) {\n-    fatal(\"_aligned_malloc failed\");\n-  }\n-\n-  memset(res, 0, size);\n-\n-  return (uintptr_t)res;\n-}\n","filename":"src\/hotspot\/os\/windows\/gc\/z\/zUtils_windows.cpp","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -38,1 +38,1 @@\n-#include \"gc\/z\/zUtils.hpp\"\n+#include \"gc\/z\/zUtils.inline.hpp\"\n@@ -367,1 +367,1 @@\n-  _base = ZUtils::alloc_aligned(ZCacheLineSize, size);\n+  _base = ZUtils::alloc_aligned_unfreeable(ZCacheLineSize, size);\n","filename":"src\/hotspot\/share\/gc\/z\/zStat.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-  static uintptr_t alloc_aligned(size_t alignment, size_t size);\n+  static uintptr_t alloc_aligned_unfreeable(size_t alignment, size_t size);\n","filename":"src\/hotspot\/share\/gc\/z\/zUtils.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -36,0 +37,12 @@\n+inline uintptr_t ZUtils::alloc_aligned_unfreeable(size_t alignment, size_t size) {\n+  const size_t padded_size = size + (alignment - 1);\n+  void* const addr = os::malloc(padded_size, mtGC);\n+  void* const aligned_addr = align_up(addr, alignment);\n+\n+  memset(aligned_addr, 0, size);\n+\n+  \/\/ Since free expects pointers returned by malloc, aligned_addr cannot be\n+  \/\/ freed since it is most likely not the same as addr after alignment.\n+  return (uintptr_t)aligned_addr;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zUtils.inline.hpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-#include \"gc\/z\/zUtils.hpp\"\n+#include \"gc\/z\/zUtils.inline.hpp\"\n@@ -61,1 +61,1 @@\n-  _top = ZUtils::alloc_aligned(block_alignment, block_size);\n+  _top = ZUtils::alloc_aligned_unfreeable(block_alignment, block_size);\n","filename":"src\/hotspot\/share\/gc\/z\/zValue.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}