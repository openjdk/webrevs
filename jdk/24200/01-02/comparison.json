{"files":[{"patch":"@@ -144,1 +144,1 @@\n-    public void readAfterLastArrayElementTest() {\n+    public void readOnePastLastArrayElementTest() {\n@@ -149,0 +149,1 @@\n+                \/\/ read array[array.length]\n@@ -159,0 +160,15 @@\n+\n+    static class IntArrayConstants {\n+        static final int[] INT_ARRAY_CONST = new int[]{0};\n+    }\n+\n+    @Test\n+    public void readPartiallyOutOfBoundsTest() {\n+        for (ConstantValue cv : readConstants(IntArrayConstants.class)) {\n+            JavaKind kind = metaAccess.lookupJavaType(cv.value).getComponentType().getJavaKind();\n+            long offset = metaAccess.getArrayBaseOffset(kind) + (long) metaAccess.getArrayIndexScale(kind) * (Array.getLength(cv.boxed) - 1);\n+            \/\/ read a long from array[array.length - 1], which is partially out of bounds\n+            JavaKind accessKind = JavaKind.Long;\n+            assertThrows(IllegalArgumentException.class, () -> constantReflection.getMemoryAccessProvider().readPrimitiveConstant(accessKind, cv.value, offset, accessKind.getBitCount()));\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.runtime.test\/src\/jdk\/vm\/ci\/runtime\/test\/TestConstantReflectionProvider.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"}]}