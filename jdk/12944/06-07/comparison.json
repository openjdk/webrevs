{"files":[{"patch":"@@ -48,0 +48,1 @@\n+import java.util.Arrays;\n@@ -613,10 +614,9 @@\n-            clb.withMethod(\"<init>\", MethodTypeDesc.of(CD_void),\n-                    ACC_PUBLIC, mb -> mb.withFlags(ACC_PUBLIC).withCode( cob -> {\n-                        cob.loadInstruction(TypeKind.ReferenceType, 0);\n-                        cob.invokeInstruction(Opcode.INVOKESPECIAL,\n-                                              CD_Object,\n-                                              \"<init>\",\n-                                              MethodTypeDesc.of(CD_void),\n-                                              false);\n-                        cob.returnInstruction(TypeKind.VoidType);\n-                    }));\n+            clb.withMethodBody(\n+                    \"<init>\",\n+                    MethodTypeDesc.of(CD_void),\n+                    ACC_PUBLIC,\n+                    cob -> cob.aload(0)\n+                              .invokespecial(CD_Object,\n+                                             \"<init>\",\n+                                             MethodTypeDesc.of(CD_void))\n+                              .return_());\n@@ -635,1 +635,2 @@\n-            clb.withMethod(\"hasSplitPackages\",\n+            clb.withMethodBody(\n+                    \"hasSplitPackages\",\n@@ -638,4 +639,2 @@\n-                    mb -> mb.withFlags(ACC_PUBLIC).withCode(cob -> {\n-                        cob.constantInstruction(hasSplitPackages ? 1 : 0);\n-                        cob.returnInstruction(TypeKind.IntType);\n-                    }));\n+                    cob -> cob.constantInstruction(hasSplitPackages ? 1 : 0)\n+                              .ireturn());\n@@ -654,1 +653,2 @@\n-            clb.withMethod(\"hasIncubatorModules\",\n+            clb.withMethodBody(\n+                    \"hasIncubatorModules\",\n@@ -657,4 +657,2 @@\n-                    mb -> mb.withFlags(ACC_PUBLIC).withCode(cob -> {\n-                        cob.constantInstruction(hasIncubatorModules ? 1 : 0);\n-                        cob.returnInstruction(TypeKind.IntType);\n-                    }));\n+                    cob -> cob.constantInstruction(hasIncubatorModules ? 1 : 0)\n+                              .ireturn());\n@@ -667,1 +665,2 @@\n-            clb.withMethod(\"moduleDescriptors\",\n+            clb.withMethodBody(\n+                    \"moduleDescriptors\",\n@@ -670,4 +669,4 @@\n-                    mb -> mb.withFlags(ACC_PUBLIC).withCode(cob -> {\n-                        cob.constantInstruction(moduleInfos.size());\n-                        cob.anewarray(CD_MODULE_DESCRIPTOR);\n-                        cob.storeInstruction(TypeKind.ReferenceType, MD_VAR);\n+                    cob -> {\n+                        cob.constantInstruction(moduleInfos.size())\n+                           .anewarray(CD_MODULE_DESCRIPTOR)\n+                           .astore(MD_VAR);\n@@ -682,3 +681,3 @@\n-                        cob.loadInstruction(TypeKind.ReferenceType, MD_VAR);\n-                        cob.returnInstruction(TypeKind.ReferenceType);\n-                    }));\n+                        cob.aload(MD_VAR)\n+                           .areturn();\n+                    });\n@@ -691,1 +690,2 @@\n-            clb.withMethod(\"moduleTargets\",\n+            clb.withMethodBody(\n+                    \"moduleTargets\",\n@@ -694,4 +694,4 @@\n-                    mb -> mb.withFlags(ACC_PUBLIC).withCode(cob -> {\n-                        cob.constantInstruction(moduleInfos.size());\n-                        cob.anewarray(CD_MODULE_TARGET);\n-                        cob.storeInstruction(TypeKind.ReferenceType, MT_VAR);\n+                    cob -> {\n+                        cob.constantInstruction(moduleInfos.size())\n+                           .anewarray(CD_MODULE_TARGET)\n+                           .astore(MT_VAR);\n@@ -717,2 +717,2 @@\n-                                cob.loadInstruction(TypeKind.ReferenceType, MT_VAR);\n-                                cob.constantInstruction(index);\n+                                cob.aload(MT_VAR)\n+                                   .constantInstruction(index);\n@@ -721,5 +721,6 @@\n-                                cob.newObjectInstruction(CD_MODULE_TARGET);\n-                                cob.stackInstruction(Opcode.DUP);\n-                                cob.constantInstruction(minfo.target().targetPlatform());\n-                                cob.invokeInstruction(Opcode.INVOKESPECIAL, CD_MODULE_TARGET,\n-                                                   \"<init>\", MethodTypeDesc.of(CD_void, CD_String), false);\n+                                cob.new_(CD_MODULE_TARGET)\n+                                   .dup()\n+                                   .constantInstruction(minfo.target().targetPlatform())\n+                                   .invokespecial(CD_MODULE_TARGET,\n+                                                  \"<init>\",\n+                                                  MethodTypeDesc.of(CD_void, CD_String));\n@@ -727,1 +728,1 @@\n-                                cob.arrayStoreInstruction(TypeKind.ReferenceType);\n+                                cob.aastore();\n@@ -731,3 +732,3 @@\n-                        cob.loadInstruction(TypeKind.ReferenceType, MT_VAR);\n-                        cob.returnInstruction(TypeKind.ReferenceType);\n-                    }));\n+                        cob.aload(MT_VAR)\n+                           .areturn();\n+                    });\n@@ -740,1 +741,2 @@\n-            clb.withMethod(\"moduleHashes\",\n+            clb.withMethodBody(\n+                    \"moduleHashes\",\n@@ -743,4 +745,4 @@\n-                    mb -> mb.withFlags(ACC_PUBLIC).withCode(cob -> {\n-                        cob.constantInstruction(moduleInfos.size());\n-                        cob.anewarray(CD_MODULE_HASHES);\n-                        cob.storeInstruction(TypeKind.ReferenceType, MH_VAR);\n+                    cob -> {\n+                        cob.constantInstruction(moduleInfos.size())\n+                           .anewarray(CD_MODULE_HASHES)\n+                           .astore(MH_VAR);\n@@ -757,3 +759,3 @@\n-                        cob.loadInstruction(TypeKind.ReferenceType, MH_VAR);\n-                        cob.returnInstruction(TypeKind.ReferenceType);\n-                    }));\n+                        cob.aload(MH_VAR)\n+                           .areturn();\n+                    });\n@@ -766,18 +768,18 @@\n-            clb.withMethod(\"moduleResolutions\",\n-                MethodTypeDesc.of(CD_MODULE_RESOLUTION.arrayType()),\n-                ACC_PUBLIC,\n-                mb -> mb.withFlags(ACC_PUBLIC).withCode(cob -> {\n-                    cob.constantInstruction(moduleInfos.size());\n-                    cob.anewarray(CD_MODULE_RESOLUTION);\n-                    cob.storeInstruction(TypeKind.ReferenceType, 0);\n-\n-                    for (int index=0; index < moduleInfos.size(); index++) {\n-                        ModuleInfo minfo = moduleInfos.get(index);\n-                        if (minfo.moduleResolution() != null) {\n-                            cob.loadInstruction(TypeKind.ReferenceType, 0);\n-                            cob.constantInstruction(index);\n-                            cob.newObjectInstruction(CD_MODULE_RESOLUTION);\n-                            cob.stackInstruction(Opcode.DUP);\n-                            cob.constantInstruction(minfo.moduleResolution().value());\n-                            cob.invokeInstruction(Opcode.INVOKESPECIAL,\n-                                                  CD_MODULE_RESOLUTION,\n+            clb.withMethodBody(\n+                    \"moduleResolutions\",\n+                    MethodTypeDesc.of(CD_MODULE_RESOLUTION.arrayType()),\n+                    ACC_PUBLIC,\n+                    cob -> {\n+                        cob.constantInstruction(moduleInfos.size())\n+                           .anewarray(CD_MODULE_RESOLUTION)\n+                           .astore(0);\n+\n+                        for (int index=0; index < moduleInfos.size(); index++) {\n+                            ModuleInfo minfo = moduleInfos.get(index);\n+                            if (minfo.moduleResolution() != null) {\n+                                cob.aload(0)\n+                                   .constantInstruction(index)\n+                                   .new_(CD_MODULE_RESOLUTION)\n+                                   .dup()\n+                                   .constantInstruction(minfo.moduleResolution().value())\n+                                   .invokespecial(CD_MODULE_RESOLUTION,\n@@ -785,2 +787,3 @@\n-                                                  MethodTypeDesc.of(CD_void, CD_int), false);\n-                            cob.arrayStoreInstruction(TypeKind.ReferenceType);\n+                                                  MethodTypeDesc.of(CD_void, CD_int))\n+                                   .aastore();\n+                            }\n@@ -788,4 +791,3 @@\n-                    }\n-                    cob.loadInstruction(TypeKind.ReferenceType, 0);\n-                    cob.returnInstruction(TypeKind.ReferenceType);\n-                }));\n+                        cob.aload(0)\n+                           .areturn();\n+                    });\n@@ -817,1 +819,2 @@\n-            clb.withMethod(methodName,\n+            clb.withMethodBody(\n+                    methodName,\n@@ -820,1 +823,1 @@\n-                    mb -> mb.withFlags(ACC_PUBLIC).withCode(cob -> {\n+                    cob -> {\n@@ -836,1 +839,1 @@\n-                                cob.storeInstruction(TypeKind.ReferenceType, index);\n+                                cob.astore(index);\n@@ -855,3 +858,3 @@\n-                            cob.stackInstruction(Opcode.DUP);\n-                            cob.constantInstruction(index);\n-                            cob.constantInstruction(name);\n+                            cob.dup()\n+                               .constantInstruction(index)\n+                               .constantInstruction(name);\n@@ -864,1 +867,1 @@\n-                                cob.loadInstruction(TypeKind.ReferenceType, varIndex);\n+                                cob.aload(varIndex);\n@@ -869,6 +872,5 @@\n-                            cob.invokeInstruction(Opcode.INVOKESTATIC,\n-                                               CD_Map,\n-                                               \"entry\",\n-                                               desc,\n-                                               true);\n-                            cob.arrayStoreInstruction(TypeKind.ReferenceType);\n+                            cob.invokestatic(CD_Map,\n+                                             \"entry\",\n+                                             desc,\n+                                             true);\n+                            cob.aastore();\n@@ -879,5 +881,7 @@\n-                        cob.invokeInstruction(Opcode.INVOKESTATIC, CD_Map, \"ofEntries\",\n-                                MethodTypeDesc.ofDescriptor(\n-                                        \"([Ljava\/util\/Map$Entry;)Ljava\/util\/Map;\"), true);\n-                        cob.returnInstruction(TypeKind.ReferenceType);\n-                    }));\n+                        cob.invokestatic(CD_Map,\n+                                         \"ofEntries\",\n+                                         MethodTypeDesc.ofDescriptor(\n+                                                 \"([Ljava\/util\/Map$Entry;)Ljava\/util\/Map;\"),\n+                                         true);\n+                        cob.areturn();\n+                    });\n@@ -911,1 +915,0 @@\n-                StringBuilder sb = new StringBuilder(\"(\");\n@@ -914,1 +917,0 @@\n-                    sb.append(\"Ljava\/lang\/Object;\");\n@@ -916,1 +918,2 @@\n-                sb.append(\")Ljava\/util\/Set;\");\n+                var mtdArgs = new ClassDesc[size];\n+                Arrays.fill(mtdArgs, CD_Object);\n@@ -920,1 +923,1 @@\n-                        MethodTypeDesc.ofDescriptor(sb.toString()),\n+                        MethodTypeDesc.of(CD_Set, mtdArgs),\n@@ -1013,7 +1016,8 @@\n-                cob.newObjectInstruction(CD_MODULE_BUILDER);\n-                cob.stackInstruction(Opcode.DUP);\n-                cob.constantInstruction(md.name());\n-                cob.invokeInstruction(Opcode.INVOKESPECIAL, CD_MODULE_BUILDER,\n-                    \"<init>\", MethodTypeDesc.of(CD_void, CD_String), false);\n-                cob.storeInstruction(TypeKind.ReferenceType, BUILDER_VAR);\n-                cob.loadInstruction(TypeKind.ReferenceType, BUILDER_VAR);\n+                cob.new_(CD_MODULE_BUILDER)\n+                   .dup()\n+                   .constantInstruction(md.name())\n+                   .invokespecial(CD_MODULE_BUILDER,\n+                                  \"<init>\",\n+                                  MethodTypeDesc.of(CD_void, CD_String))\n+                   .astore(BUILDER_VAR)\n+                   .aload(BUILDER_VAR);\n@@ -1036,5 +1040,6 @@\n-                cob.loadInstruction(TypeKind.ReferenceType, BUILDER_VAR);\n-                cob.constantInstruction(value ? 1 : 0);\n-                cob.invokeInstruction(Opcode.INVOKEVIRTUAL, CD_MODULE_BUILDER,\n-                    methodName, MTD_BOOLEAN, false);\n-                cob.stackInstruction(Opcode.POP);\n+                cob.aload(BUILDER_VAR)\n+                   .constantInstruction(value ? 1 : 0)\n+                   .invokevirtual(CD_MODULE_BUILDER,\n+                                  methodName,\n+                                  MTD_BOOLEAN)\n+                   .pop();\n@@ -1047,8 +1052,8 @@\n-                cob.loadInstruction(TypeKind.ReferenceType, MD_VAR);\n-                cob.constantInstruction(index);\n-                cob.loadInstruction(TypeKind.ReferenceType, BUILDER_VAR);\n-                cob.constantInstruction(md.hashCode());\n-                cob.invokeInstruction(Opcode.INVOKEVIRTUAL, CD_MODULE_BUILDER,\n-                    \"build\", MethodTypeDesc.of(CD_MODULE_DESCRIPTOR, CD_int),\n-                    false);\n-                cob.arrayStoreInstruction(TypeKind.ReferenceType);\n+                cob.aload(MD_VAR)\n+                   .constantInstruction(index)\n+                   .aload(BUILDER_VAR)\n+                   .constantInstruction(md.hashCode())\n+                   .invokevirtual(CD_MODULE_BUILDER,\n+                                  \"build\",\n+                                  MethodTypeDesc.of(CD_MODULE_DESCRIPTOR, CD_int))\n+                   .aastore();\n@@ -1064,3 +1069,3 @@\n-                cob.loadInstruction(TypeKind.ReferenceType, BUILDER_VAR);\n-                cob.constantInstruction(requires.size());\n-                cob.anewarray(CD_REQUIRES);\n+                cob.aload(BUILDER_VAR)\n+                   .constantInstruction(requires.size())\n+                   .anewarray(CD_REQUIRES);\n@@ -1074,2 +1079,2 @@\n-                    cob.stackInstruction(Opcode.DUP);               \/\/ arrayref\n-                    cob.constantInstruction(arrayIndex++);\n+                    cob.dup()               \/\/ arrayref\n+                       .constantInstruction(arrayIndex++);\n@@ -1077,1 +1082,1 @@\n-                    cob.arrayStoreInstruction(TypeKind.ReferenceType);\n+                    cob.aastore();\n@@ -1079,2 +1084,3 @@\n-                cob.invokeInstruction(Opcode.INVOKEVIRTUAL, CD_MODULE_BUILDER,\n-                    \"requires\", MTD_REQUIRES_ARRAY, false);\n+                cob.invokevirtual(CD_MODULE_BUILDER,\n+                                  \"requires\",\n+                                  MTD_REQUIRES_ARRAY);\n@@ -1091,2 +1097,2 @@\n-                cob.loadInstruction(TypeKind.ReferenceType, varIndex);\n-                cob.constantInstruction(name);\n+                cob.aload(varIndex)\n+                   .constantInstruction(name);\n@@ -1094,3 +1100,4 @@\n-                    cob.constantInstruction(compiledVersion);\n-                    cob.invokeInstruction(Opcode.INVOKESTATIC, CD_MODULE_BUILDER,\n-                        \"newRequires\", MTD_REQUIRES_SET_STRING_STRING, false);\n+                    cob.constantInstruction(compiledVersion)\n+                       .invokestatic(CD_MODULE_BUILDER,\n+                                     \"newRequires\",\n+                                     MTD_REQUIRES_SET_STRING_STRING);\n@@ -1098,2 +1105,3 @@\n-                    cob.invokeInstruction(Opcode.INVOKESTATIC, CD_MODULE_BUILDER,\n-                        \"newRequires\", MTD_REQUIRES_SET_STRING, false);\n+                    cob.invokestatic(CD_MODULE_BUILDER,\n+                                     \"newRequires\",\n+                                     MTD_REQUIRES_SET_STRING);\n@@ -1110,3 +1118,3 @@\n-                cob.loadInstruction(TypeKind.ReferenceType, BUILDER_VAR);\n-                cob.constantInstruction(exports.size());\n-                cob.anewarray(CD_EXPORTS);\n+                cob.aload(BUILDER_VAR)\n+                   .constantInstruction(exports.size())\n+                   .anewarray(CD_EXPORTS);\n@@ -1115,2 +1123,2 @@\n-                    cob.stackInstruction(Opcode.DUP);    \/\/ arrayref\n-                    cob.constantInstruction(arrayIndex++);\n+                    cob.dup()    \/\/ arrayref\n+                       .constantInstruction(arrayIndex++);\n@@ -1118,1 +1126,1 @@\n-                    cob.arrayStoreInstruction(TypeKind.ReferenceType);\n+                    cob.aastore();\n@@ -1120,2 +1128,3 @@\n-                cob.invokeInstruction(Opcode.INVOKEVIRTUAL, CD_MODULE_BUILDER,\n-                    \"exports\", MTD_EXPORTS_ARRAY, false);\n+                cob.invokevirtual(CD_MODULE_BUILDER,\n+                                  \"exports\",\n+                                  MTD_EXPORTS_ARRAY);\n@@ -1143,5 +1152,6 @@\n-                    cob.loadInstruction(TypeKind.ReferenceType, modifiersSetIndex);\n-                    cob.constantInstruction(pn);\n-                    cob.loadInstruction(TypeKind.ReferenceType, stringSetIndex);\n-                    cob.invokeInstruction(Opcode.INVOKESTATIC, CD_MODULE_BUILDER,\n-                        \"newExports\", MTD_EXPORTS_MODIFIER_SET_STRING_SET, false);\n+                    cob.aload(modifiersSetIndex)\n+                       .constantInstruction(pn)\n+                       .aload(stringSetIndex)\n+                       .invokestatic(CD_MODULE_BUILDER,\n+                                     \"newExports\",\n+                                     MTD_EXPORTS_MODIFIER_SET_STRING_SET);\n@@ -1149,4 +1159,5 @@\n-                    cob.loadInstruction(TypeKind.ReferenceType, modifiersSetIndex);\n-                    cob.constantInstruction(pn);\n-                    cob.invokeInstruction(Opcode.INVOKESTATIC, CD_MODULE_BUILDER,\n-                        \"newExports\", MTD_EXPORTS_MODIFIER_SET_STRING, false);\n+                    cob.aload(modifiersSetIndex)\n+                       .constantInstruction(pn)\n+                       .invokestatic(CD_MODULE_BUILDER,\n+                                     \"newExports\",\n+                                     MTD_EXPORTS_MODIFIER_SET_STRING);\n@@ -1163,3 +1174,3 @@\n-                cob.loadInstruction(TypeKind.ReferenceType, BUILDER_VAR);\n-                cob.constantInstruction(opens.size());\n-                cob.anewarray(CD_OPENS);\n+                cob.aload(BUILDER_VAR)\n+                   .constantInstruction(opens.size())\n+                   .anewarray(CD_OPENS);\n@@ -1168,2 +1179,2 @@\n-                    cob.stackInstruction(Opcode.DUP);    \/\/ arrayref\n-                    cob.constantInstruction(arrayIndex++);\n+                    cob.dup()    \/\/ arrayref\n+                       .constantInstruction(arrayIndex++);\n@@ -1171,1 +1182,1 @@\n-                    cob.arrayStoreInstruction(TypeKind.ReferenceType);\n+                    cob.aastore();\n@@ -1173,2 +1184,3 @@\n-                cob.invokeInstruction(Opcode.INVOKEVIRTUAL, CD_MODULE_BUILDER,\n-                    \"opens\", MTD_OPENS_ARRAY, false);\n+                cob.invokevirtual(CD_MODULE_BUILDER,\n+                                  \"opens\",\n+                                  MTD_OPENS_ARRAY);\n@@ -1196,5 +1208,6 @@\n-                    cob.loadInstruction(TypeKind.ReferenceType, modifiersSetIndex);\n-                    cob.constantInstruction(pn);\n-                    cob.loadInstruction(TypeKind.ReferenceType, stringSetIndex);\n-                    cob.invokeInstruction(Opcode.INVOKESTATIC, CD_MODULE_BUILDER,\n-                        \"newOpens\", MTD_OPENS_MODIFIER_SET_STRING_SET, false);\n+                    cob.aload(modifiersSetIndex)\n+                       .constantInstruction(pn)\n+                       .aload(stringSetIndex)\n+                       .invokestatic(CD_MODULE_BUILDER,\n+                                     \"newOpens\",\n+                                     MTD_OPENS_MODIFIER_SET_STRING_SET);\n@@ -1202,4 +1215,5 @@\n-                    cob.loadInstruction(TypeKind.ReferenceType, modifiersSetIndex);\n-                    cob.constantInstruction(pn);\n-                    cob.invokeInstruction(Opcode.INVOKESTATIC, CD_MODULE_BUILDER,\n-                        \"newOpens\", MTD_OPENS_MODIFIER_SET_STRING, false);\n+                    cob.aload(modifiersSetIndex)\n+                       .constantInstruction(pn)\n+                       .invokestatic(CD_MODULE_BUILDER,\n+                                     \"newOpens\",\n+                                     MTD_OPENS_MODIFIER_SET_STRING);\n@@ -1214,5 +1228,6 @@\n-                cob.loadInstruction(TypeKind.ReferenceType, BUILDER_VAR);\n-                cob.loadInstruction(TypeKind.ReferenceType, varIndex);\n-                cob.invokeInstruction(Opcode.INVOKEVIRTUAL, CD_MODULE_BUILDER,\n-                    \"uses\", MTD_SET, false);\n-                cob.stackInstruction(Opcode.POP);\n+                cob.aload(BUILDER_VAR)\n+                   .aload(varIndex)\n+                   .invokevirtual(CD_MODULE_BUILDER,\n+                                  \"uses\",\n+                                  MTD_SET)\n+                   .pop();\n@@ -1252,3 +1267,3 @@\n-                cob.constantInstruction(service);\n-                cob.constantInstruction(providers.size());\n-                cob.anewarray(CD_String);\n+                cob.constantInstruction(service)\n+                   .constantInstruction(providers.size())\n+                   .anewarray(CD_String);\n@@ -1257,4 +1272,4 @@\n-                    cob.stackInstruction(Opcode.DUP);    \/\/ arrayref\n-                    cob.constantInstruction(arrayIndex++);\n-                    cob.constantInstruction(provider);\n-                    cob.arrayStoreInstruction(TypeKind.ReferenceType);\n+                    cob.dup()    \/\/ arrayref\n+                       .constantInstruction(arrayIndex++)\n+                       .constantInstruction(provider)\n+                       .aastore();\n@@ -1262,5 +1277,8 @@\n-                cob.invokeInstruction(Opcode.INVOKESTATIC, CD_List,\n-                    \"of\", MethodTypeDesc.ofDescriptor(\n-                            \"([Ljava\/lang\/Object;)Ljava\/util\/List;\"), true);\n-                cob.invokeInstruction(Opcode.INVOKESTATIC, CD_MODULE_BUILDER,\n-                    \"newProvides\", MTD_PROVIDES_STRING_LIST, false);\n+                cob.invokestatic(CD_List,\n+                                 \"of\",\n+                                 MethodTypeDesc.ofDescriptor(\n+                                        \"([Ljava\/lang\/Object;)Ljava\/util\/List;\"),\n+                                 true)\n+                   .invokestatic(CD_MODULE_BUILDER,\n+                                 \"newProvides\",\n+                                 MTD_PROVIDES_STRING_LIST);\n@@ -1274,5 +1292,6 @@\n-                cob.loadInstruction(TypeKind.ReferenceType, BUILDER_VAR);\n-                cob.loadInstruction(TypeKind.ReferenceType, varIndex);\n-                cob.invokeInstruction(Opcode.INVOKEVIRTUAL, CD_MODULE_BUILDER,\n-                    \"packages\", MTD_SET, false);\n-                cob.stackInstruction(Opcode.POP);\n+                cob.aload(BUILDER_VAR)\n+                   .aload(varIndex)\n+                   .invokevirtual(CD_MODULE_BUILDER,\n+                                  \"packages\",\n+                                  MTD_SET)\n+                   .pop();\n@@ -1285,5 +1304,6 @@\n-                cob.loadInstruction(TypeKind.ReferenceType, BUILDER_VAR);\n-                cob.constantInstruction(cn);\n-                cob.invokeInstruction(Opcode.INVOKEVIRTUAL, CD_MODULE_BUILDER,\n-                    \"mainClass\", MTD_STRING, false);\n-                cob.stackInstruction(Opcode.POP);\n+                cob.aload(BUILDER_VAR)\n+                   .constantInstruction(cn)\n+                   .invokevirtual(CD_MODULE_BUILDER,\n+                                  \"mainClass\",\n+                                  MTD_STRING)\n+                   .pop();\n@@ -1296,5 +1316,6 @@\n-                cob.loadInstruction(TypeKind.ReferenceType, BUILDER_VAR);\n-                cob.constantInstruction(v.toString());\n-                cob.invokeInstruction(Opcode.INVOKEVIRTUAL, CD_MODULE_BUILDER,\n-                    \"version\", MTD_STRING, false);\n-                cob.stackInstruction(Opcode.POP);\n+                cob.aload(BUILDER_VAR)\n+                   .constantInstruction(v.toString())\n+                   .invokevirtual(CD_MODULE_BUILDER,\n+                                  \"version\",\n+                                  MTD_STRING)\n+                   .pop();\n@@ -1304,5 +1325,6 @@\n-                cob.loadInstruction(TypeKind.ReferenceType, BUILDER_VAR);\n-                cob.constantInstruction(value);\n-                cob.invokeInstruction(Opcode.INVOKEVIRTUAL, CD_MODULE_BUILDER,\n-                    methodName, MTD_STRING, false);\n-                cob.stackInstruction(Opcode.POP);\n+                cob.aload(BUILDER_VAR)\n+                   .constantInstruction(value)\n+                   .invokevirtual(CD_MODULE_BUILDER,\n+                                  methodName,\n+                                  MTD_STRING)\n+                   .pop();\n@@ -1354,8 +1376,9 @@\n-                cob.newObjectInstruction(MODULE_HASHES_BUILDER);\n-                cob.stackInstruction(Opcode.DUP);\n-                cob.constantInstruction(recordedHashes.algorithm());\n-                cob.constantInstruction(((4 * recordedHashes.names().size()) \/ 3) + 1);\n-                cob.invokeInstruction(Opcode.INVOKESPECIAL, MODULE_HASHES_BUILDER,\n-                    \"<init>\", MethodTypeDesc.of(CD_void, CD_String, CD_int), false);\n-                cob.storeInstruction(TypeKind.ReferenceType, BUILDER_VAR);\n-                cob.loadInstruction(TypeKind.ReferenceType, BUILDER_VAR);\n+                cob.new_(MODULE_HASHES_BUILDER)\n+                   .dup()\n+                   .constantInstruction(recordedHashes.algorithm())\n+                   .constantInstruction(((4 * recordedHashes.names().size()) \/ 3) + 1)\n+                   .invokespecial(MODULE_HASHES_BUILDER,\n+                                  \"<init>\",\n+                                  MethodTypeDesc.of(CD_void, CD_String, CD_int))\n+                   .astore(BUILDER_VAR)\n+                   .aload(BUILDER_VAR);\n@@ -1370,7 +1393,7 @@\n-                cob.loadInstruction(TypeKind.ReferenceType, MH_VAR);\n-                cob.constantInstruction(index);\n-                cob.loadInstruction(TypeKind.ReferenceType, BUILDER_VAR);\n-                cob.invokeInstruction(Opcode.INVOKEVIRTUAL, MODULE_HASHES_BUILDER,\n-                    \"build\", MethodTypeDesc.of(CD_MODULE_HASHES),\n-                    false);\n-                cob.arrayStoreInstruction(TypeKind.ReferenceType);\n+                cob.aload(MH_VAR)\n+                   .constantInstruction(index)\n+                   .aload(BUILDER_VAR)\n+                   .invokevirtual(MODULE_HASHES_BUILDER,\n+                                  \"build\",\n+                                  MethodTypeDesc.of(CD_MODULE_HASHES))\n+                   .aastore();\n@@ -1383,5 +1406,4 @@\n-                cob.loadInstruction(TypeKind.ReferenceType, BUILDER_VAR);\n-                cob.constantInstruction(name);\n-\n-                cob.constantInstruction(hash.length);\n-                cob.newarray(TypeKind.ByteType);\n+                cob.aload(BUILDER_VAR)\n+                   .constantInstruction(name)\n+                   .constantInstruction(hash.length)\n+                   .newarray(TypeKind.ByteType);\n@@ -1389,4 +1411,4 @@\n-                    cob.stackInstruction(Opcode.DUP);              \/\/ arrayref\n-                    cob.constantInstruction(i);\n-                    cob.constantInstruction((int)hash[i]);\n-                    cob.arrayStoreInstruction(TypeKind.ByteType);\n+                    cob.dup()              \/\/ arrayref\n+                       .constantInstruction(i)\n+                       .constantInstruction((int)hash[i])\n+                       .bastore();\n@@ -1395,3 +1417,4 @@\n-                cob.invokeInstruction(Opcode.INVOKEVIRTUAL, MODULE_HASHES_BUILDER,\n-                    \"hashForModule\", STRING_BYTE_ARRAY_SIG, false);\n-                cob.stackInstruction(Opcode.POP);\n+                cob.invokevirtual(MODULE_HASHES_BUILDER,\n+                                  \"hashForModule\",\n+                                  STRING_BYTE_ARRAY_SIG)\n+                   .pop();\n@@ -1582,1 +1605,0 @@\n-                    StringBuilder sb = new StringBuilder(\"(\");\n@@ -1584,1 +1606,0 @@\n-                        sb.append(\"Ljava\/lang\/Object;\");\n@@ -1587,3 +1608,6 @@\n-                    sb.append(\")Ljava\/util\/Set;\");\n-                    cob.invokeInstruction(Opcode.INVOKESTATIC, CD_Set,\n-                            \"of\", MethodTypeDesc.ofDescriptor(sb.toString()), true);\n+                    var mtdArgs = new ClassDesc[elements.size()];\n+                    Arrays.fill(mtdArgs, CD_Object);\n+                    cob.invokestatic(CD_Set,\n+                                     \"of\",\n+                                     MethodTypeDesc.of(CD_Set, mtdArgs),\n+                                     true);\n@@ -1592,2 +1616,2 @@\n-                    cob.constantInstruction(elements.size());\n-                    cob.anewarray(CD_String);\n+                    cob.constantInstruction(elements.size())\n+                       .anewarray(CD_String);\n@@ -1596,2 +1620,2 @@\n-                        cob.stackInstruction(Opcode.DUP);    \/\/ arrayref\n-                        cob.constantInstruction(arrayIndex);\n+                        cob.dup()    \/\/ arrayref\n+                           .constantInstruction(arrayIndex);\n@@ -1599,1 +1623,1 @@\n-                        cob.arrayStoreInstruction(TypeKind.ReferenceType);\n+                        cob.aastore();\n@@ -1602,3 +1626,5 @@\n-                    cob.invokeInstruction(Opcode.INVOKESTATIC, CD_Set,\n-                            \"of\", MethodTypeDesc.ofDescriptor(\n-                                    \"([Ljava\/lang\/Object;)Ljava\/util\/Set;\"), true);\n+                    cob.invokestatic(CD_Set,\n+                                     \"of\",\n+                                     MethodTypeDesc.ofDescriptor(\n+                                            \"([Ljava\/lang\/Object;)Ljava\/util\/Set;\"),\n+                                     true);\n@@ -1606,1 +1632,1 @@\n-                cob.storeInstruction(TypeKind.ReferenceType, index);\n+                cob.astore(index);\n@@ -1629,1 +1655,1 @@\n-                cob.fieldInstruction(Opcode.GETSTATIC, classDesc, t.toString(), classDesc);\n+                cob.getstatic(classDesc, t.toString(), classDesc);\n@@ -1648,88 +1674,79 @@\n-                clb -> {\n-                    clb.withFlags(ACC_FINAL + ACC_SUPER);\n-                    clb.withVersion(52, 0);\n-\n-                    \/\/ <init>\n-                    clb.withMethod(\"<init>\",\n-                            MethodTypeDesc.of(CD_void),\n-                            0,\n-                            mb -> mb.withCode(cob -> {\n-                                cob.loadInstruction(TypeKind.ReferenceType, 0);\n-                                cob.invokeInstruction(Opcode.INVOKESPECIAL,\n-                                                      CD_Object,\n-                                                     \"<init>\",\n-                                                      MethodTypeDesc.of(CD_void),\n-                                                      false);\n-                                cob.returnInstruction(TypeKind.VoidType);\n-                            }));\n-\n-                    \/\/ allSystemModules()\n-                    clb.withMethod(\"allSystemModules\",\n-                            MethodTypeDesc.of(CD_SYSTEM_MODULES),\n-                            ACC_STATIC,\n-                            mb -> mb.withFlags(ACC_STATIC).withCode(cob -> {\n-                                cob.newObjectInstruction(allSystemModules);\n-                                cob.stackInstruction(Opcode.DUP);\n-                                cob.invokeInstruction(Opcode.INVOKESPECIAL,\n-                                                      allSystemModules,\n-                                                      \"<init>\",\n-                                                      MethodTypeDesc.of(CD_void),\n-                                                      false);\n-                                cob.returnInstruction(TypeKind.ReferenceType);\n-                            }));\n-\n-                    \/\/ defaultSystemModules()\n-                    clb.withMethod(\"defaultSystemModules\",\n-                            MethodTypeDesc.of(CD_SYSTEM_MODULES),\n-                            ACC_STATIC,\n-                            mb -> mb.withFlags(ACC_STATIC).withCode(cob -> {\n-                                cob.newObjectInstruction(defaultSystemModules);\n-                                cob.stackInstruction(Opcode.DUP);\n-                                cob.invokeInstruction(Opcode.INVOKESPECIAL,\n-                                                      defaultSystemModules,\n-                                                      \"<init>\",\n-                                                       MethodTypeDesc.of(CD_void),\n-                                                      false);\n-                                cob.returnInstruction(TypeKind.ReferenceType);\n-                            }));\n-\n-                    \/\/ moduleNames()\n-                    clb.withMethod(\"moduleNames\",\n-                            MethodTypeDesc.of(CD_String.arrayType()),\n-                            ACC_STATIC,\n-                            mb -> mb.withFlags(ACC_STATIC).withCode(cob -> {\n-                                cob.constantInstruction(map.size());\n-                                cob.anewarray(CD_String);\n-\n-                                int index = 0;\n-                                for (String moduleName : sorted(map.keySet())) {\n-                                    cob.stackInstruction(Opcode.DUP); \/\/ arrayref\n-                                    cob.constantInstruction(index);\n-                                    cob.constantInstruction(moduleName);\n-                                    cob.arrayStoreInstruction(TypeKind.ReferenceType);\n-                                    index++;\n-                                }\n-\n-                                cob.returnInstruction(TypeKind.ReferenceType);\n-                            }));\n-\n-                    \/\/ classNames()\n-                    clb.withMethod(\"classNames\",\n-                            MethodTypeDesc.of(CD_String.arrayType()),\n-                            ACC_STATIC,\n-                            mb -> mb.withFlags(ACC_STATIC).withCode(cob -> {\n-                                cob.constantInstruction(map.size());\n-                                cob.anewarray(CD_String);\n-\n-                                int index = 0;\n-                                for (String className : sorted(map.values())) {\n-                                    cob.stackInstruction(Opcode.DUP); \/\/ arrayref\n-                                    cob.constantInstruction(index);\n-                                    cob.constantInstruction(className);\n-                                    cob.arrayStoreInstruction(TypeKind.ReferenceType);\n-                                    index++;\n-                                }\n-\n-                                cob.returnInstruction(TypeKind.ReferenceType);\n-                            }));\n-                }));\n+                clb -> clb.withFlags(ACC_FINAL + ACC_SUPER)\n+                          .withVersion(52, 0)\n+\n+                          \/\/ <init>\n+                          .withMethodBody(\n+                                  \"<init>\",\n+                                  MethodTypeDesc.of(CD_void),\n+                                  0,\n+                                  cob -> cob.aload(0)\n+                                            .invokespecial(CD_Object,\n+                                                           \"<init>\",\n+                                                           MethodTypeDesc.of(CD_void))\n+                                            .return_())\n+\n+                          \/\/ allSystemModules()\n+                          .withMethodBody(\n+                                  \"allSystemModules\",\n+                                  MethodTypeDesc.of(CD_SYSTEM_MODULES),\n+                                  ACC_STATIC,\n+                                  cob -> cob.new_(allSystemModules)\n+                                            .dup()\n+                                            .invokespecial(allSystemModules,\n+                                                           \"<init>\",\n+                                                           MethodTypeDesc.of(CD_void))\n+                                            .areturn())\n+\n+                          \/\/ defaultSystemModules()\n+                          .withMethodBody(\n+                                  \"defaultSystemModules\",\n+                                   MethodTypeDesc.of(CD_SYSTEM_MODULES),\n+                                   ACC_STATIC,\n+                                   cob -> cob.new_(defaultSystemModules)\n+                                             .dup()\n+                                             .invokespecial(defaultSystemModules,\n+                                                            \"<init>\",\n+                                                            MethodTypeDesc.of(CD_void))\n+                                             .areturn())\n+\n+                          \/\/ moduleNames()\n+                          .withMethodBody(\n+                                  \"moduleNames\",\n+                                  MethodTypeDesc.of(CD_String.arrayType()),\n+                                  ACC_STATIC,\n+                                  cob -> {\n+                                      cob.constantInstruction(map.size());\n+                                      cob.anewarray(CD_String);\n+\n+                                      int index = 0;\n+                                      for (String moduleName : sorted(map.keySet())) {\n+                                          cob.dup() \/\/ arrayref\n+                                             .constantInstruction(index)\n+                                             .constantInstruction(moduleName)\n+                                             .aastore();\n+                                          index++;\n+                                      }\n+\n+                                      cob.areturn();\n+                                  })\n+\n+                          \/\/ classNames()\n+                          .withMethodBody(\n+                                  \"classNames\",\n+                                  MethodTypeDesc.of(CD_String.arrayType()),\n+                                  ACC_STATIC,\n+                                  cob -> {\n+                                      cob.constantInstruction(map.size())\n+                                         .anewarray(CD_String);\n+\n+                                      int index = 0;\n+                                      for (String className : sorted(map.values())) {\n+                                          cob.dup() \/\/ arrayref\n+                                             .constantInstruction(index)\n+                                             .constantInstruction(className.replace('\/', '.'))\n+                                             .aastore();\n+                                          index++;\n+                                      }\n+\n+                                      cob.areturn();\n+                                  })));\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/SystemModulesPlugin.java","additions":351,"deletions":334,"binary":false,"changes":685,"status":"modified"}]}